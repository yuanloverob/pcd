{
  "cve_id": "CVE-2017-16910",
  "cve_desc": "An error within the \"LibRaw::xtrans_interpolate()\" function (internal/dcraw_common.cpp) in LibRaw versions prior to 0.18.6 can be exploited to cause an invalid read memory access and subsequently a Denial of Service condition.",
  "repo": "LibRaw/LibRaw",
  "patch_hash": "5563e6ddc3f7cb93d98b491194ceebdee7288d36",
  "patch_info": {
    "commit_hash": "5563e6ddc3f7cb93d98b491194ceebdee7288d36",
    "repo": "LibRaw/LibRaw",
    "commit_url": "https://github.com/LibRaw/LibRaw/commit/5563e6ddc3f7cb93d98b491194ceebdee7288d36",
    "files": [
      "dcraw/dcraw.c",
      "internal/dcraw_common.cpp"
    ],
    "message": "Secunia 76000 #2: xtrans allhex not initialized",
    "before_after_code_files": [
      "dcraw/dcraw.c||dcraw/dcraw.c",
      "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
    ]
  },
  "patch_diff": {
    "dcraw/dcraw.c||dcraw/dcraw.c": [
      "File: dcraw/dcraw.c -> dcraw/dcraw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7045: #endif",
      "7047: #ifdef LIBRAW_LIBRARY_BUILD",
      "7049:   for (row = 0; row < 6; row++)",
      "7050:    for (col = 0; col < 6; col++)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7048:   if(width < TS || height < TS)",
      "7049:    throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7053:   if(cstat[0] < 6 || cstat[0]>10 || cstat[1]< 16",
      "7054:     || cstat[1]>24 || cstat[2]< 6 || cstat[2]>10 || cstat[3])",
      "7055:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "7056: #endif",
      "7057:   cielab(0, 0);",
      "7058:   ndir = 4 << (passes > 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7060:  for(int i = 0; i < 3; i++)",
      "7061:   for(int j = 0; j < 3; j++)",
      "7062:    for(int k = 0; k < 2; k++)",
      "7063:     for(int l = 0; l < 8; l++)",
      "7064:      allhex[i][j][k][l]=32700;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "7063:   drv = (float(*)[TS][TS])(buffer + TS * TS * (ndir * 6 + 6));",
      "7064:   homo = (char(*)[TS][TS])(buffer + TS * TS * (ndir * 10 + 6));",
      "7067:   for (row = 0; row < 3; row++)",
      "7068:     for (col = 0; col < 3; col++)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7075:   int minv=0,maxv=0,minh=0,maxh=0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7083:           {",
      "7084:             v = orth[d] * patt[g][c * 2] + orth[d + 1] * patt[g][c * 2 + 1];",
      "7085:             h = orth[d + 2] * patt[g][c * 2] + orth[d + 3] * patt[g][c * 2 + 1];",
      "7086:             allhex[row][col][0][c ^ (g * 2 & d)] = h + v * width;",
      "7087:             allhex[row][col][1][c ^ (g * 2 & d)] = h + v * TS;",
      "7088:           }",
      "7089:       }",
      "7092:   for (row = 2; row < height - 2; row++)",
      "7093:     for (min = ~(max = 0), col = 2; col < width - 2; col++)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7096:      minv=MIN(v,minv);",
      "7097:      maxv=MAX(v,maxv);",
      "7098:      minh=MIN(v,minh);",
      "7099:         maxh=MAX(v,maxh);",
      "7105: #ifdef LIBRAW_LIBRARY_BUILD",
      "7107:   for(int i = 0; i < 3; i++)",
      "7108:     for(int j = 0; j < 3; j++)",
      "7109:       for(int k = 0; k < 2; k++)",
      "7110:         for(int l = 0; l < 8; l++)",
      "7111:    if(allhex[i][j][k][l]>maxh+maxv*width+1 || allhex[i][j][k][l]<minh+minv*width-1)",
      "7112:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "7113:   int retrycount = 0;",
      "7114: #endif",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "7118:         break;",
      "7119:       case 2:",
      "7120:         if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)",
      "7122:       }",
      "7123:     }",
      "",
      "[Removed Lines]",
      "7121:           row--;",
      "",
      "[Added Lines]",
      "7145:  {",
      "7146:            row--;",
      "7147: #ifdef LIBRAW_LIBRARY_BUILD",
      "7148:    if(retrycount++ > width*height)",
      "7149:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "7150: #endif",
      "7151:  }",
      "",
      "---------------"
    ],
    "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
      "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5727: #endif",
      "5729: #ifdef LIBRAW_LIBRARY_BUILD",
      "5731:   for (row = 0; row < 6; row++)",
      "5732:    for (col = 0; col < 6; col++)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5730:   if(width < TS || height < TS)",
      "5731:    throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5735:   if(cstat[0] < 6 || cstat[0]>10 || cstat[1]< 16",
      "5736:     || cstat[1]>24 || cstat[2]< 6 || cstat[2]>10 || cstat[3])",
      "5737:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "5738: #endif",
      "5739:   cielab(0, 0);",
      "5740:   ndir = 4 << (passes > 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5742:  for(int i = 0; i < 3; i++)",
      "5743:   for(int j = 0; j < 3; j++)",
      "5744:    for(int k = 0; k < 2; k++)",
      "5745:     for(int l = 0; l < 8; l++)",
      "5746:      allhex[i][j][k][l]=32700;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5745:   drv = (float(*)[TS][TS])(buffer + TS * TS * (ndir * 6 + 6));",
      "5746:   homo = (char(*)[TS][TS])(buffer + TS * TS * (ndir * 10 + 6));",
      "5749:   for (row = 0; row < 3; row++)",
      "5750:     for (col = 0; col < 3; col++)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5757:   int minv=0,maxv=0,minh=0,maxh=0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5765:           {",
      "5766:             v = orth[d] * patt[g][c * 2] + orth[d + 1] * patt[g][c * 2 + 1];",
      "5767:             h = orth[d + 2] * patt[g][c * 2] + orth[d + 3] * patt[g][c * 2 + 1];",
      "5768:             allhex[row][col][0][c ^ (g * 2 & d)] = h + v * width;",
      "5769:             allhex[row][col][1][c ^ (g * 2 & d)] = h + v * TS;",
      "5770:           }",
      "5771:       }",
      "5774:   for (row = 2; row < height - 2; row++)",
      "5775:     for (min = ~(max = 0), col = 2; col < width - 2; col++)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5778:      minv=MIN(v,minv);",
      "5779:      maxv=MAX(v,maxv);",
      "5780:      minh=MIN(v,minh);",
      "5781:         maxh=MAX(v,maxh);",
      "5787: #ifdef LIBRAW_LIBRARY_BUILD",
      "5789:   for(int i = 0; i < 3; i++)",
      "5790:     for(int j = 0; j < 3; j++)",
      "5791:       for(int k = 0; k < 2; k++)",
      "5792:         for(int l = 0; l < 8; l++)",
      "5793:    if(allhex[i][j][k][l]>maxh+maxv*width+1 || allhex[i][j][k][l]<minh+minv*width-1)",
      "5794:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "5795:   int retrycount = 0;",
      "5796: #endif",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5800:         break;",
      "5801:       case 2:",
      "5802:         if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)",
      "5804:       }",
      "5805:     }",
      "",
      "[Removed Lines]",
      "5803:           row--;",
      "",
      "[Added Lines]",
      "5827:  {",
      "5828:            row--;",
      "5829: #ifdef LIBRAW_LIBRARY_BUILD",
      "5830:    if(retrycount++ > width*height)",
      "5831:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
      "5832: #endif",
      "5833:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7adfe103e0f913f3897233ad07262f581980caa",
      "candidate_info": {
        "commit_hash": "a7adfe103e0f913f3897233ad07262f581980caa",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/a7adfe103e0f913f3897233ad07262f581980caa",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/defines.h"
        ],
        "message": "Secunia 81800#1: samsumg_load_raw\n\nSecunia 81800#2: find_green\n\nSecunia 81800#3: rollei_load_raw\n\nremove_trailing_spaces: isspace() does not works right with signed non-latin chars\n\nSecunia 81800#5/6: nikon_coolscan_load_raw\n\nSecunia 81800#4: rollei_load_raw",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/defines.h||internal/defines.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         3 G R G R G R 3 B G B G B G 3 R G R G R G 3 G B G B G B",
          "265: #define RAW(row, col) raw_image[(row)*raw_width + (col)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: #define RAWINDEX(row, col) ((row)*raw_width + (col))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1772: void CLASS nikon_coolscan_load_raw()",
          "1773: {",
          "1775:   if (tiff_bps <= 8)",
          "1776:     gamma_curve(1.0 / imgdata.params.coolscan_nef_gamma, 0., 1, 255);",
          "1777:   else",
          "",
          "[Removed Lines]",
          "1774:   int bufsize = width * 3 * tiff_bps / 8;",
          "",
          "[Added Lines]",
          "1775:   if(!image)",
          "1776:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1778:   int bypp = tiff_bps <= 8 ? 1 : 2;",
          "1779:   int bufsize = width * 3 * bypp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2070: {",
          "2071:   uchar pixel[10];",
          "2072:   unsigned iten = 0, isix, i, buffer = 0, todo[16];",
          "2074:   isix = raw_width * raw_height * 5 / 8;",
          "2075:   while (fread(pixel, 1, 10, ifp) == 10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2079: #ifdef LIBRAW_LIBRARY_BUILD",
          "2080:   if(raw_width > 32767 || raw_height > 32767)",
          "2081:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "2082: #endif",
          "2083:   unsigned maxpixel = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2089:       todo[i + 1] = buffer >> (14 - i) * 5;",
          "2090:     }",
          "2091:     for (i = 0; i < 16; i += 2)",
          "2093:   }",
          "2094:   maximum = 0x3ff;",
          "2095: }",
          "",
          "[Removed Lines]",
          "2092:       raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "",
          "[Added Lines]",
          "2103:       if(todo[i] < maxpixel)",
          "2104:         raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "2105:       else",
          "2106:         derror();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4464: void CLASS samsung_load_raw()",
          "4465: {",
          "4466:   int row, col, c, i, dir, op[4], len[4];",
          "4468:   order = 0x4949;",
          "4469:   for (row = 0; row < raw_height; row++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4481: #ifdef LIBRAW_LIBRARY_BUILD",
          "4482:   if(raw_width> 32768 || raw_height > 32768)  // definitely too much for old samsung",
          "4483:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "4484: #endif",
          "4485:   unsigned maxpixels = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4493:       for (c = 0; c < 16; c += 2)",
          "4494:       {",
          "4495:         i = len[((c & 1) << 1) | (c >> 3)];",
          "4498:         if (c == 14)",
          "4499:           c = -1;",
          "4500:       }",
          "",
          "[Removed Lines]",
          "4496:         RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +",
          "4497:                             (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "",
          "[Added Lines]",
          "4515:  unsigned idest = RAWINDEX(row, col + c);",
          "4516:  unsigned isrc = (dir ? RAWINDEX(row + (~c | -2), col + c) : col ? RAWINDEX(row, col + (c | -2)) : 0);",
          "4517:  if(idest < maxpixels && isrc < maxpixels) // less than zero is handled by unsigned conversion",
          "4518:    RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +                    (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "4519:  else",
          "4520:      derror();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "13084:         ushort l;",
          "13085:         float num;",
          "13088:         pos = strstr(mn_text, \"gain_r=\");",
          "13089:         if (pos)",
          "13090:           cam_mul[0] = atof(pos + 7);",
          "",
          "[Removed Lines]",
          "13087:         fgets(mn_text, len, ifp);",
          "",
          "[Added Lines]",
          "13110:  fgets(mn_text, MIN(len,511), ifp);",
          "13111:         mn_text[511] = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "13096:         else",
          "13097:           cam_mul[0] = cam_mul[2] = 0.0f;",
          "13106:         {",
          "13109:           {",
          "13113:           }",
          "13116:         }",
          "13117:       }",
          "13118:       else",
          "13119: #endif",
          "13120:         parse_makernote(base, 0);",
          "13121:       break;",
          "",
          "[Removed Lines]",
          "13099:         pos = strstr(mn_text, \"ccm=\") + 4;",
          "13100:         l = strstr(pos, \" \") - pos;",
          "13101:         memcpy(ccms, pos, l);",
          "13102:         ccms[l] = '\\0';",
          "13104:         pos = strtok(ccms, \",\");",
          "13105:         for (l = 0; l < 4; l++)",
          "13107:           num = 0.0;",
          "13108:           for (c = 0; c < 3; c++)",
          "13110:             imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "13111:             num += imgdata.color.ccm[l][c];",
          "13112:             pos = strtok(NULL, \",\");",
          "13114:           if (num > 0.01)",
          "13115:             FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "",
          "[Added Lines]",
          "13124:         pos = strstr(mn_text, \"ccm=\");",
          "13125:         if(pos)",
          "13127:          pos +=4;",
          "13128:          char *pos2 = strstr(pos, \" \");",
          "13129:          if(pos2)",
          "13130:          {",
          "13131:            l = pos2 - pos;",
          "13132:            memcpy(ccms, pos, l);",
          "13133:            ccms[l] = '\\0';",
          "13134: #if defined WIN32 || defined(__MINGW32__)",
          "13136:           pos = strtok(ccms, \",\");",
          "13137: #else",
          "13138:           char *last=0;",
          "13139:           pos = strtok_r(ccms, \",\",&last);",
          "13140: #endif",
          "13141:           if(pos)",
          "13143:             for (l = 0; l < 4; l++)",
          "13144:             {",
          "13145:               num = 0.0;",
          "13146:               for (c = 0; c < 3; c++)",
          "13147:               {",
          "13148:                 imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "13149:                 num += imgdata.color.ccm[l][c];",
          "13150: #if defined WIN32 || defined(__MINGW32__)",
          "13151:                 pos = strtok(NULL, \",\");",
          "13152: #else",
          "13153:                 pos = strtok_r(NULL, \",\",&last);",
          "13154: #endif",
          "13155:                 if(!pos) goto end; // broken",
          "13156:               }",
          "13157:               if (num > 0.01)",
          "13158:                 FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "13159:             }",
          "13162:        }",
          "13163:       end:;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "18648:   int vbits, col, i, c;",
          "18649:   ushort img[2][2064];",
          "18650:   double sum[] = {0, 0};",
          "18652:   FORC(2)",
          "18653:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18699:   if(width > 2064) return 0.f; // too wide",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "18682:   len = strnlen(string, len - 1);",
          "18683:   for (int i = len - 1; i >= 0; i--)",
          "18684:   {",
          "18686:       string[i] = 0;",
          "18687:     else",
          "18688:       break;",
          "",
          "[Removed Lines]",
          "18685:     if (isspace(string[i]))",
          "",
          "[Added Lines]",
          "18734:     if (isspace((unsigned char)string[i]))",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1480: void CLASS nikon_coolscan_load_raw()",
          "1481: {",
          "1483:   if (tiff_bps <= 8)",
          "1484:     gamma_curve(1.0 / imgdata.params.coolscan_nef_gamma, 0., 1, 255);",
          "1485:   else",
          "",
          "[Removed Lines]",
          "1482:   int bufsize = width * 3 * tiff_bps / 8;",
          "",
          "[Added Lines]",
          "1482:   if(!image)",
          "1483:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1485:   int bypp = tiff_bps <= 8 ? 1 : 2;",
          "1486:   int bufsize = width * 3 * bypp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1773: {",
          "1774:   uchar pixel[10];",
          "1775:   unsigned iten = 0, isix, i, buffer = 0, todo[16];",
          "1777:   isix = raw_width * raw_height * 5 / 8;",
          "1778:   while (fread(pixel, 1, 10, ifp) == 10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1781: #ifdef LIBRAW_LIBRARY_BUILD",
          "1782:   if(raw_width > 32767 || raw_height > 32767)",
          "1783:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1784: #endif",
          "1785:   unsigned maxpixel = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1792:       todo[i + 1] = buffer >> (14 - i) * 5;",
          "1793:     }",
          "1794:     for (i = 0; i < 16; i += 2)",
          "1796:   }",
          "1797:   maximum = 0x3ff;",
          "1798: }",
          "",
          "[Removed Lines]",
          "1795:       raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "",
          "[Added Lines]",
          "1805:       if(todo[i] < maxpixel)",
          "1806:         raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "1807:       else",
          "1808:         derror();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4167: void CLASS samsung_load_raw()",
          "4168: {",
          "4169:   int row, col, c, i, dir, op[4], len[4];",
          "4171:   order = 0x4949;",
          "4172:   for (row = 0; row < raw_height; row++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4183: #ifdef LIBRAW_LIBRARY_BUILD",
          "4184:   if(raw_width> 32768 || raw_height > 32768)  // definitely too much for old samsung",
          "4185:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "4186: #endif",
          "4187:   unsigned maxpixels = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4196:       for (c = 0; c < 16; c += 2)",
          "4197:       {",
          "4198:         i = len[((c & 1) << 1) | (c >> 3)];",
          "4201:         if (c == 14)",
          "4202:           c = -1;",
          "4203:       }",
          "",
          "[Removed Lines]",
          "4199:         RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +",
          "4200:                             (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "",
          "[Added Lines]",
          "4217:  unsigned idest = RAWINDEX(row, col + c);",
          "4218:  unsigned isrc = (dir ? RAWINDEX(row + (~c | -2), col + c) : col ? RAWINDEX(row, col + (c | -2)) : 0);",
          "4219:  if(idest < maxpixels && isrc < maxpixels) // less than zero is handled by unsigned conversion",
          "4220:    RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +                    (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "4221:  else",
          "4222:      derror();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "11753:         ushort l;",
          "11754:         float num;",
          "11757:         pos = strstr(mn_text, \"gain_r=\");",
          "11758:         if (pos)",
          "11759:           cam_mul[0] = atof(pos + 7);",
          "",
          "[Removed Lines]",
          "11756:         fgets(mn_text, len, ifp);",
          "",
          "[Added Lines]",
          "11778:  fgets(mn_text, MIN(len,511), ifp);",
          "11779:         mn_text[511] = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "11765:         else",
          "11766:           cam_mul[0] = cam_mul[2] = 0.0f;",
          "11775:         {",
          "11778:           {",
          "11782:           }",
          "11785:         }",
          "11786:       }",
          "11787:       else",
          "11788: #endif",
          "11789:         parse_makernote(base, 0);",
          "11790:       break;",
          "",
          "[Removed Lines]",
          "11768:         pos = strstr(mn_text, \"ccm=\") + 4;",
          "11769:         l = strstr(pos, \" \") - pos;",
          "11770:         memcpy(ccms, pos, l);",
          "11771:         ccms[l] = '\\0';",
          "11773:         pos = strtok(ccms, \",\");",
          "11774:         for (l = 0; l < 4; l++)",
          "11776:           num = 0.0;",
          "11777:           for (c = 0; c < 3; c++)",
          "11779:             imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "11780:             num += imgdata.color.ccm[l][c];",
          "11781:             pos = strtok(NULL, \",\");",
          "11783:           if (num > 0.01)",
          "11784:             FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "",
          "[Added Lines]",
          "11792:         pos = strstr(mn_text, \"ccm=\");",
          "11793:         if(pos)",
          "11795:          pos +=4;",
          "11796:          char *pos2 = strstr(pos, \" \");",
          "11797:          if(pos2)",
          "11798:          {",
          "11799:            l = pos2 - pos;",
          "11800:            memcpy(ccms, pos, l);",
          "11801:            ccms[l] = '\\0';",
          "11802: #if defined WIN32 || defined(__MINGW32__)",
          "11804:           pos = strtok(ccms, \",\");",
          "11805: #else",
          "11806:           char *last=0;",
          "11807:           pos = strtok_r(ccms, \",\",&last);",
          "11808: #endif",
          "11809:           if(pos)",
          "11811:             for (l = 0; l < 4; l++)",
          "11812:             {",
          "11813:               num = 0.0;",
          "11814:               for (c = 0; c < 3; c++)",
          "11815:               {",
          "11816:                 imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "11817:                 num += imgdata.color.ccm[l][c];",
          "11818: #if defined WIN32 || defined(__MINGW32__)",
          "11819:                 pos = strtok(NULL, \",\");",
          "11820: #else",
          "11821:                 pos = strtok_r(NULL, \",\",&last);",
          "11822: #endif",
          "11823:                 if(!pos) goto end; // broken",
          "11824:               }",
          "11825:               if (num > 0.01)",
          "11826:                 FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "11827:             }",
          "11830:        }",
          "11831:       end:;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "17151:   int vbits, col, i, c;",
          "17152:   ushort img[2][2064];",
          "17153:   double sum[] = {0, 0};",
          "17155:   FORC(2)",
          "17156:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17201:   if(width > 2064) return 0.f; // too wide",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "17185:   len = strnlen(string, len - 1);",
          "17186:   for (int i = len - 1; i >= 0; i--)",
          "17187:   {",
          "17189:       string[i] = 0;",
          "17190:     else",
          "17191:       break;",
          "",
          "[Removed Lines]",
          "17188:     if (isspace(string[i]))",
          "",
          "[Added Lines]",
          "17236:     if (isspace((unsigned char)string[i]))",
          "",
          "---------------"
        ],
        "internal/defines.h||internal/defines.h": [
          "File: internal/defines.h -> internal/defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         3 G R G R G R 3 B G B G B G 3 R G R G R G 3 G B G B G B",
          "164: #define RAW(row, col) raw_image[(row)*raw_width + (col)]",
          "165: #define BAYER(row, col) image[((row) >> shrink) * iwidth + ((col) >> shrink)][FC(row, col)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: #define RAWINDEX(row, col) ((row)*raw_width + (col))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce4a43cdb3352a3bbeeefcde452a4ff76921af54",
      "candidate_info": {
        "commit_hash": "ce4a43cdb3352a3bbeeefcde452a4ff76921af54",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/ce4a43cdb3352a3bbeeefcde452a4ff76921af54",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "internal/defines.h"
        ],
        "message": "Secunia 81800#1: samsumg_load_raw\n\nSecunia 81800#2: find_green\n\nSecunia 81800#3: rollei_load_raw\n\nremove_trailing_spaces: isspace() does not works right with signed non-latin chars\n\nSecunia 81800#5/6: nikon_coolscan_load_raw\n\nSecunia 81800#4: rollei_load_raw",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "internal/defines.h||internal/defines.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         3 G R G R G R 3 B G B G B G 3 R G R G R G 3 G B G B G B",
          "265: #define RAW(row, col) raw_image[(row)*raw_width + (col)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: #define RAWINDEX(row, col) ((row)*raw_width + (col))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1772: void CLASS nikon_coolscan_load_raw()",
          "1773: {",
          "1775:   if (tiff_bps <= 8)",
          "1776:     gamma_curve(1.0 / imgdata.params.coolscan_nef_gamma, 0., 1, 255);",
          "1777:   else",
          "",
          "[Removed Lines]",
          "1774:   int bufsize = width * 3 * tiff_bps / 8;",
          "",
          "[Added Lines]",
          "1775:   if(!image)",
          "1776:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1778:   int bypp = tiff_bps <= 8 ? 1 : 2;",
          "1779:   int bufsize = width * 3 * bypp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2070: {",
          "2071:   uchar pixel[10];",
          "2072:   unsigned iten = 0, isix, i, buffer = 0, todo[16];",
          "2074:   isix = raw_width * raw_height * 5 / 8;",
          "2075:   while (fread(pixel, 1, 10, ifp) == 10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2079: #ifdef LIBRAW_LIBRARY_BUILD",
          "2080:   if(raw_width > 32767 || raw_height > 32767)",
          "2081:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "2082: #endif",
          "2083:   unsigned maxpixel = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2089:       todo[i + 1] = buffer >> (14 - i) * 5;",
          "2090:     }",
          "2091:     for (i = 0; i < 16; i += 2)",
          "2093:   }",
          "2094:   maximum = 0x3ff;",
          "2095: }",
          "",
          "[Removed Lines]",
          "2092:       raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "",
          "[Added Lines]",
          "2103:       if(todo[i] < maxpixel)",
          "2104:         raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "2105:       else",
          "2106:         derror();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4464: void CLASS samsung_load_raw()",
          "4465: {",
          "4466:   int row, col, c, i, dir, op[4], len[4];",
          "4468:   order = 0x4949;",
          "4469:   for (row = 0; row < raw_height; row++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4481: #ifdef LIBRAW_LIBRARY_BUILD",
          "4482:   if(raw_width> 32768 || raw_height > 32768)  // definitely too much for old samsung",
          "4483:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "4484: #endif",
          "4485:   unsigned maxpixels = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4493:       for (c = 0; c < 16; c += 2)",
          "4494:       {",
          "4495:         i = len[((c & 1) << 1) | (c >> 3)];",
          "4498:         if (c == 14)",
          "4499:           c = -1;",
          "4500:       }",
          "",
          "[Removed Lines]",
          "4496:         RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +",
          "4497:                             (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "",
          "[Added Lines]",
          "4515:  unsigned idest = RAWINDEX(row, col + c);",
          "4516:  unsigned isrc = (dir ? RAWINDEX(row + (~c | -2), col + c) : col ? RAWINDEX(row, col + (c | -2)) : 0);",
          "4517:  if(idest < maxpixels && isrc < maxpixels) // less than zero is handled by unsigned conversion",
          "4518:    RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +                    (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "4519:  else",
          "4520:      derror();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "13102:         ushort l;",
          "13103:         float num;",
          "13106:         pos = strstr(mn_text, \"gain_r=\");",
          "13107:         if (pos)",
          "13108:           cam_mul[0] = atof(pos + 7);",
          "",
          "[Removed Lines]",
          "13105:         fgets(mn_text, len, ifp);",
          "",
          "[Added Lines]",
          "13128:  fgets(mn_text, MIN(len,511), ifp);",
          "13129:         mn_text[511] = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "13114:         else",
          "13115:           cam_mul[0] = cam_mul[2] = 0.0f;",
          "13124:         {",
          "13127:           {",
          "13131:           }",
          "13134:         }",
          "13135:       }",
          "13136:       else",
          "13137: #endif",
          "13138:         parse_makernote(base, 0);",
          "13139:       break;",
          "",
          "[Removed Lines]",
          "13117:         pos = strstr(mn_text, \"ccm=\") + 4;",
          "13118:         l = strstr(pos, \" \") - pos;",
          "13119:         memcpy(ccms, pos, l);",
          "13120:         ccms[l] = '\\0';",
          "13122:         pos = strtok(ccms, \",\");",
          "13123:         for (l = 0; l < 4; l++)",
          "13125:           num = 0.0;",
          "13126:           for (c = 0; c < 3; c++)",
          "13128:             imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "13129:             num += imgdata.color.ccm[l][c];",
          "13130:             pos = strtok(NULL, \",\");",
          "13132:           if (num > 0.01)",
          "13133:             FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "",
          "[Added Lines]",
          "13142:         pos = strstr(mn_text, \"ccm=\");",
          "13143:         if(pos)",
          "13145:          pos +=4;",
          "13146:          char *pos2 = strstr(pos, \" \");",
          "13147:          if(pos2)",
          "13148:          {",
          "13149:            l = pos2 - pos;",
          "13150:            memcpy(ccms, pos, l);",
          "13151:            ccms[l] = '\\0';",
          "13152: #if defined WIN32 || defined(__MINGW32__)",
          "13154:           pos = strtok(ccms, \",\");",
          "13155: #else",
          "13156:           char *last=0;",
          "13157:           pos = strtok_r(ccms, \",\",&last);",
          "13158: #endif",
          "13159:           if(pos)",
          "13161:             for (l = 0; l < 4; l++)",
          "13162:             {",
          "13163:               num = 0.0;",
          "13164:               for (c = 0; c < 3; c++)",
          "13165:               {",
          "13166:                 imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "13167:                 num += imgdata.color.ccm[l][c];",
          "13168: #if defined WIN32 || defined(__MINGW32__)",
          "13169:                 pos = strtok(NULL, \",\");",
          "13170: #else",
          "13171:                 pos = strtok_r(NULL, \",\",&last);",
          "13172: #endif",
          "13173:                 if(!pos) goto end; // broken",
          "13174:               }",
          "13175:               if (num > 0.01)",
          "13176:                 FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "13177:             }",
          "13180:        }",
          "13181:       end:;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "18704:   int vbits, col, i, c;",
          "18705:   ushort img[2][2064];",
          "18706:   double sum[] = {0, 0};",
          "18708:   FORC(2)",
          "18709:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18755:   if(width > 2064) return 0.f; // too wide",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "18738:   len = strnlen(string, len - 1);",
          "18739:   for (int i = len - 1; i >= 0; i--)",
          "18740:   {",
          "18742:       string[i] = 0;",
          "18743:     else",
          "18744:       break;",
          "",
          "[Removed Lines]",
          "18741:     if (isspace(string[i]))",
          "",
          "[Added Lines]",
          "18790:     if (isspace((unsigned char)string[i]))",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1480: void CLASS nikon_coolscan_load_raw()",
          "1481: {",
          "1483:   if (tiff_bps <= 8)",
          "1484:     gamma_curve(1.0 / imgdata.params.coolscan_nef_gamma, 0., 1, 255);",
          "1485:   else",
          "",
          "[Removed Lines]",
          "1482:   int bufsize = width * 3 * tiff_bps / 8;",
          "",
          "[Added Lines]",
          "1482:   if(!image)",
          "1483:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "1485:   int bypp = tiff_bps <= 8 ? 1 : 2;",
          "1486:   int bufsize = width * 3 * bypp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1773: {",
          "1774:   uchar pixel[10];",
          "1775:   unsigned iten = 0, isix, i, buffer = 0, todo[16];",
          "1777:   isix = raw_width * raw_height * 5 / 8;",
          "1778:   while (fread(pixel, 1, 10, ifp) == 10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1781: #ifdef LIBRAW_LIBRARY_BUILD",
          "1782:   if(raw_width > 32767 || raw_height > 32767)",
          "1783:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "1784: #endif",
          "1785:   unsigned maxpixel = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1792:       todo[i + 1] = buffer >> (14 - i) * 5;",
          "1793:     }",
          "1794:     for (i = 0; i < 16; i += 2)",
          "1796:   }",
          "1797:   maximum = 0x3ff;",
          "1798: }",
          "",
          "[Removed Lines]",
          "1795:       raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "",
          "[Added Lines]",
          "1805:       if(todo[i] < maxpixel)",
          "1806:         raw_image[todo[i]] = (todo[i + 1] & 0x3ff);",
          "1807:       else",
          "1808:         derror();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4167: void CLASS samsung_load_raw()",
          "4168: {",
          "4169:   int row, col, c, i, dir, op[4], len[4];",
          "4171:   order = 0x4949;",
          "4172:   for (row = 0; row < raw_height; row++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4183: #ifdef LIBRAW_LIBRARY_BUILD",
          "4184:   if(raw_width> 32768 || raw_height > 32768)  // definitely too much for old samsung",
          "4185:     throw LIBRAW_EXCEPTION_IO_BADFILE;",
          "4186: #endif",
          "4187:   unsigned maxpixels = raw_width*(raw_height+7);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4196:       for (c = 0; c < 16; c += 2)",
          "4197:       {",
          "4198:         i = len[((c & 1) << 1) | (c >> 3)];",
          "4201:         if (c == 14)",
          "4202:           c = -1;",
          "4203:       }",
          "",
          "[Removed Lines]",
          "4199:         RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +",
          "4200:                             (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "",
          "[Added Lines]",
          "4217:  unsigned idest = RAWINDEX(row, col + c);",
          "4218:  unsigned isrc = (dir ? RAWINDEX(row + (~c | -2), col + c) : col ? RAWINDEX(row, col + (c | -2)) : 0);",
          "4219:  if(idest < maxpixels && isrc < maxpixels) // less than zero is handled by unsigned conversion",
          "4220:    RAW(row, col + c) = ((signed)ph1_bits(i) << (32 - i) >> (32 - i)) +                    (dir ? RAW(row + (~c | -2), col + c) : col ? RAW(row, col + (c | -2)) : 128);",
          "4221:  else",
          "4222:      derror();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "11771:         ushort l;",
          "11772:         float num;",
          "11775:         pos = strstr(mn_text, \"gain_r=\");",
          "11776:         if (pos)",
          "11777:           cam_mul[0] = atof(pos + 7);",
          "",
          "[Removed Lines]",
          "11774:         fgets(mn_text, len, ifp);",
          "",
          "[Added Lines]",
          "11796:  fgets(mn_text, MIN(len,511), ifp);",
          "11797:         mn_text[511] = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "11783:         else",
          "11784:           cam_mul[0] = cam_mul[2] = 0.0f;",
          "11793:         {",
          "11796:           {",
          "11800:           }",
          "11803:         }",
          "11804:       }",
          "11805:       else",
          "11806: #endif",
          "11807:         parse_makernote(base, 0);",
          "11808:       break;",
          "",
          "[Removed Lines]",
          "11786:         pos = strstr(mn_text, \"ccm=\") + 4;",
          "11787:         l = strstr(pos, \" \") - pos;",
          "11788:         memcpy(ccms, pos, l);",
          "11789:         ccms[l] = '\\0';",
          "11791:         pos = strtok(ccms, \",\");",
          "11792:         for (l = 0; l < 4; l++)",
          "11794:           num = 0.0;",
          "11795:           for (c = 0; c < 3; c++)",
          "11797:             imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "11798:             num += imgdata.color.ccm[l][c];",
          "11799:             pos = strtok(NULL, \",\");",
          "11801:           if (num > 0.01)",
          "11802:             FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "",
          "[Added Lines]",
          "11810:         pos = strstr(mn_text, \"ccm=\");",
          "11811:         if(pos)",
          "11813:          pos +=4;",
          "11814:          char *pos2 = strstr(pos, \" \");",
          "11815:          if(pos2)",
          "11816:          {",
          "11817:            l = pos2 - pos;",
          "11818:            memcpy(ccms, pos, l);",
          "11819:            ccms[l] = '\\0';",
          "11820: #if defined WIN32 || defined(__MINGW32__)",
          "11822:           pos = strtok(ccms, \",\");",
          "11823: #else",
          "11824:           char *last=0;",
          "11825:           pos = strtok_r(ccms, \",\",&last);",
          "11826: #endif",
          "11827:           if(pos)",
          "11829:             for (l = 0; l < 4; l++)",
          "11830:             {",
          "11831:               num = 0.0;",
          "11832:               for (c = 0; c < 3; c++)",
          "11833:               {",
          "11834:                 imgdata.color.ccm[l][c] = (float)atoi(pos);",
          "11835:                 num += imgdata.color.ccm[l][c];",
          "11836: #if defined WIN32 || defined(__MINGW32__)",
          "11837:                 pos = strtok(NULL, \",\");",
          "11838: #else",
          "11839:                 pos = strtok_r(NULL, \",\",&last);",
          "11840: #endif",
          "11841:                 if(!pos) goto end; // broken",
          "11842:               }",
          "11843:               if (num > 0.01)",
          "11844:                 FORC3 imgdata.color.ccm[l][c] = imgdata.color.ccm[l][c] / num;",
          "11845:             }",
          "11848:        }",
          "11849:       end:;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "17207:   int vbits, col, i, c;",
          "17208:   ushort img[2][2064];",
          "17209:   double sum[] = {0, 0};",
          "17211:   FORC(2)",
          "17212:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17257:   if(width > 2064) return 0.f; // too wide",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "17241:   len = strnlen(string, len - 1);",
          "17242:   for (int i = len - 1; i >= 0; i--)",
          "17243:   {",
          "17245:       string[i] = 0;",
          "17246:     else",
          "17247:       break;",
          "",
          "[Removed Lines]",
          "17244:     if (isspace(string[i]))",
          "",
          "[Added Lines]",
          "17292:     if (isspace((unsigned char)string[i]))",
          "",
          "---------------"
        ],
        "internal/defines.h||internal/defines.h": [
          "File: internal/defines.h -> internal/defines.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         3 G R G R G R 3 B G B G B G 3 R G R G R G 3 G B G B G B",
          "164: #define RAW(row, col) raw_image[(row)*raw_width + (col)]",
          "165: #define BAYER(row, col) image[((row) >> shrink) * iwidth + ((col) >> shrink)][FC(row, col)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: #define RAWINDEX(row, col) ((row)*raw_width + (col))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d0fe9da6791accc518170c25934007413835a42",
      "candidate_info": {
        "commit_hash": "6d0fe9da6791accc518170c25934007413835a42",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/6d0fe9da6791accc518170c25934007413835a42",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp",
          "libraw/libraw.h",
          "libraw/libraw_types.h",
          "samples/dcraw_emu.cpp",
          "samples/half_mt_win32.c",
          "samples/raw-identify.cpp",
          "src/libraw_c_api.cpp",
          "src/libraw_cxx.cpp",
          "src/libraw_fuji_compressed.cpp"
        ],
        "message": "reformatted",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp",
          "libraw/libraw.h||libraw/libraw.h",
          "libraw/libraw_types.h||libraw/libraw_types.h",
          "samples/dcraw_emu.cpp||samples/dcraw_emu.cpp",
          "samples/half_mt_win32.c||samples/half_mt_win32.c",
          "samples/raw-identify.cpp||samples/raw-identify.cpp",
          "src/libraw_c_api.cpp||src/libraw_c_api.cpp",
          "src/libraw_cxx.cpp||src/libraw_cxx.cpp",
          "src/libraw_fuji_compressed.cpp||src/libraw_fuji_compressed.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1558:   {",
          "1559: #ifdef LIBRAW_LIBRARY_BUILD",
          "1560:     if (row < raw_height && col < raw_width)",
          "1562:     image[row * raw_width + col][c] = curve[(*rp)[c]];",
          "1564: #else",
          "",
          "[Removed Lines]",
          "1561:     FORC(tiff_samples)",
          "",
          "[Added Lines]",
          "1561:       FORC(tiff_samples)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3202: void CLASS panasonic_16x10_load_raw()",
          "3203: {",
          "3204: #ifdef LIBRAW_LIBRARY_BUILD",
          "3206: #endif",
          "3207: }",
          "",
          "[Removed Lines]",
          "3205:  throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "",
          "[Added Lines]",
          "3205:   throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3445: #endif",
          "3446:     FORC3 mul[c] = getbits(6);",
          "3447: #ifdef LIBRAW_LIBRARY_BUILD",
          "3449:       throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "3450: #endif",
          "3451:     FORC3",
          "",
          "[Removed Lines]",
          "3448:     if(!mul[0] || !mul[1] || !mul[2])",
          "",
          "[Added Lines]",
          "3448:     if (!mul[0] || !mul[1] || !mul[2])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4034:       for (i = 0; i < len; i++)",
          "4035:       {",
          "4036:         int idx = ret ? buf[i] : (pred[i & 1] += buf[i]);",
          "4040:           derror();",
          "4044:       }",
          "4045:     }",
          "4046:   }",
          "",
          "[Removed Lines]",
          "4037:  if(idx >=0 && idx < 0xffff)",
          "4038:   {",
          "4039:            if ((RAW(row, col + i) = curve[idx]) >> 12)",
          "4041:    }",
          "4042:   else",
          "4043:    derror();",
          "",
          "[Added Lines]",
          "4037:         if (idx >= 0 && idx < 0xffff)",
          "4038:         {",
          "4039:           if ((RAW(row, col + i) = curve[idx]) >> 12)",
          "4040:             derror();",
          "4041:         }",
          "4042:         else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7024:   int c, d, f, g, h, i, v, ng, row, col, top, left, mrow, mcol;",
          "7026: #ifdef LIBRAW_LIBRARY_BUILD",
          "7028: #endif",
          "7030:   int val, ndir, pass, hm[8], avg[4], color[3][8];",
          "",
          "[Removed Lines]",
          "7027:   int cstat[4]={0,0,0,0};",
          "",
          "[Added Lines]",
          "7027:   int cstat[4] = {0, 0, 0, 0};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7045: #endif",
          "7047: #ifdef LIBRAW_LIBRARY_BUILD",
          "7051:   for (row = 0; row < 6; row++)",
          "7065: #endif",
          "7066:   cielab(0, 0);",
          "7067:   ndir = 4 << (passes > 1);",
          "",
          "[Removed Lines]",
          "7048:   if(width < TS || height < TS)",
          "7049:    throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
          "7052:    for (col = 0; col < 6; col++)",
          "7053:     cstat[fcol(row,col)]++;",
          "7055:   if(cstat[0] < 6 || cstat[0]>10 || cstat[1]< 16",
          "7056:     || cstat[1]>24 || cstat[2]< 6 || cstat[2]>10 || cstat[3])",
          "7057:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "7060:  for(int i = 0; i < 3; i++)",
          "7061:   for(int j = 0; j < 3; j++)",
          "7062:    for(int k = 0; k < 2; k++)",
          "7063:     for(int l = 0; l < 8; l++)",
          "7064:      allhex[i][j][k][l]=32700;",
          "",
          "[Added Lines]",
          "7048:   if (width < TS || height < TS)",
          "7049:     throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
          "7052:     for (col = 0; col < 6; col++)",
          "7053:       cstat[fcol(row, col)]++;",
          "7055:   if (cstat[0] < 6 || cstat[0] > 10 || cstat[1] < 16 || cstat[1] > 24 || cstat[2] < 6 || cstat[2] > 10 || cstat[3])",
          "7056:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "7059:   for (int i = 0; i < 3; i++)",
          "7060:     for (int j = 0; j < 3; j++)",
          "7061:       for (int k = 0; k < 2; k++)",
          "7062:         for (int l = 0; l < 8; l++)",
          "7063:           allhex[i][j][k][l] = 32700;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7072:   drv = (float(*)[TS][TS])(buffer + TS * TS * (ndir * 6 + 6));",
          "7073:   homo = (char(*)[TS][TS])(buffer + TS * TS * (ndir * 10 + 6));",
          "7077:   for (row = 0; row < 3; row++)",
          "7078:     for (col = 0; col < 3; col++)",
          "",
          "[Removed Lines]",
          "7075:   int minv=0,maxv=0,minh=0,maxh=0;",
          "",
          "[Added Lines]",
          "7074:   int minv = 0, maxv = 0, minh = 0, maxh = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7093:           {",
          "7094:             v = orth[d] * patt[g][c * 2] + orth[d + 1] * patt[g][c * 2 + 1];",
          "7095:             h = orth[d + 2] * patt[g][c * 2] + orth[d + 3] * patt[g][c * 2 + 1];",
          "7100:             allhex[row][col][0][c ^ (g * 2 & d)] = h + v * width;",
          "7101:             allhex[row][col][1][c ^ (g * 2 & d)] = h + v * TS;",
          "7102:           }",
          "7103:       }",
          "7105: #ifdef LIBRAW_LIBRARY_BUILD",
          "7113:   int retrycount = 0;",
          "7114: #endif",
          "",
          "[Removed Lines]",
          "7096:      minv=MIN(v,minv);",
          "7097:      maxv=MAX(v,maxv);",
          "7098:      minh=MIN(v,minh);",
          "7099:         maxh=MAX(v,maxh);",
          "7107:   for(int i = 0; i < 3; i++)",
          "7108:     for(int j = 0; j < 3; j++)",
          "7109:       for(int k = 0; k < 2; k++)",
          "7110:         for(int l = 0; l < 8; l++)",
          "7111:    if(allhex[i][j][k][l]>maxh+maxv*width+1 || allhex[i][j][k][l]<minh+minv*width-1)",
          "7112:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "[Added Lines]",
          "7095:             minv = MIN(v, minv);",
          "7096:             maxv = MAX(v, maxv);",
          "7097:             minh = MIN(v, minh);",
          "7098:             maxh = MAX(v, maxh);",
          "7106:   for (int i = 0; i < 3; i++)",
          "7107:     for (int j = 0; j < 3; j++)",
          "7108:       for (int k = 0; k < 2; k++)",
          "7109:         for (int l = 0; l < 8; l++)",
          "7110:           if (allhex[i][j][k][l] > maxh + maxv * width + 1 || allhex[i][j][k][l] < minh + minv * width - 1)",
          "7111:             throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7142:         break;",
          "7143:       case 2:",
          "7144:         if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)",
          "7147: #ifdef LIBRAW_LIBRARY_BUILD",
          "7150: #endif",
          "7152:       }",
          "7153:     }",
          "",
          "[Removed Lines]",
          "7145:  {",
          "7146:            row--;",
          "7148:    if(retrycount++ > width*height)",
          "7149:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "7151:  }",
          "",
          "[Added Lines]",
          "7144:         {",
          "7145:           row--;",
          "7147:           if (retrycount++ > width * height)",
          "7148:             throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "7150:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8005: unsigned CLASS setCanonBodyFeatures(unsigned id)",
          "8006: {",
          "8018:   imgdata.lens.makernotes.CamID = id;",
          "8019:   if ((id == 0x80000001) || // 1D",
          "",
          "[Removed Lines]",
          "8007:     if (id == 0x03740000) // EOS M3",
          "8008:       id = 0x80000374;",
          "8009:     else if (id == 0x03840000) // EOS M10",
          "8010:       id = 0x80000384;",
          "8011:     else if (id == 0x03940000) // EOS M5",
          "8012:       id = 0x80000394;",
          "8013:     else if (id == 0x04070000) // EOS M6",
          "8014:       id = 0x80000407;",
          "8015:     else if (id == 0x03980000) // EOS M100",
          "8016:       id = 0x80000398;",
          "",
          "[Added Lines]",
          "8006:   if (id == 0x03740000) // EOS M3",
          "8007:     id = 0x80000374;",
          "8008:   else if (id == 0x03840000) // EOS M10",
          "8009:     id = 0x80000384;",
          "8010:   else if (id == 0x03940000) // EOS M5",
          "8011:     id = 0x80000394;",
          "8012:   else if (id == 0x04070000) // EOS M6",
          "8013:     id = 0x80000407;",
          "8014:   else if (id == 0x03980000) // EOS M100",
          "8015:     id = 0x80000398;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8077: {",
          "8078:   ushort iCanonLensID = 0, iCanonMaxFocal = 0, iCanonMinFocal = 0, iCanonLens = 0, iCanonCurFocal = 0,",
          "8079:          iCanonFocalType = 0;",
          "8081:   CameraInfo[0] = 0;",
          "8082:   CameraInfo[1] = 0;",
          "8097:   }",
          "8099:   switch (id)",
          "",
          "[Removed Lines]",
          "8080:   if(maxlen<16) return; // too short",
          "8083:   if (type == 4) {",
          "8084:     if ((maxlen == 94)  ||",
          "8085:         (maxlen == 138) ||",
          "8086:         (maxlen == 148) ||",
          "8087:         (maxlen == 156) ||",
          "8088:         (maxlen == 162) ||",
          "8089:         (maxlen == 167) ||",
          "8090:         (maxlen == 171) ||",
          "8091:         (maxlen == 264) ||",
          "8092:         (maxlen > 400))",
          "8093:          imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-3)<<2));",
          "8094:       else if (maxlen == 72) imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-1)<<2));",
          "8095:       else if ((maxlen == 85) || (maxlen == 93)) imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-2)<<2));",
          "8096:       else if ((maxlen == 96) || (maxlen == 104)) imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-4)<<2));",
          "",
          "[Added Lines]",
          "8079:   if (maxlen < 16)",
          "8080:     return; // too short",
          "8083:   if (type == 4)",
          "8084:   {",
          "8085:     if ((maxlen == 94) || (maxlen == 138) || (maxlen == 148) || (maxlen == 156) || (maxlen == 162) || (maxlen == 167) ||",
          "8086:         (maxlen == 171) || (maxlen == 264) || (maxlen > 400))",
          "8087:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 3) << 2));",
          "8088:     else if (maxlen == 72)",
          "8089:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 1) << 2));",
          "8090:     else if ((maxlen == 85) || (maxlen == 93))",
          "8091:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 2) << 2));",
          "8092:     else if ((maxlen == 96) || (maxlen == 104))",
          "8093:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 4) << 2));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8534: void CLASS setOlympusBodyFeatures(unsigned long long id)",
          "8535: {",
          "8536:   imgdata.lens.makernotes.CamID = id;",
          "8539:   }",
          "8540:   if ((id == 0x4434303430ULL) || // E-1",
          "8541:       (id == 0x4434303431ULL) || // E-300",
          "",
          "[Removed Lines]",
          "8537:   if (id == 0x5330303638ULL) {",
          "8538:     strcpy (model, \"E-M10MarkIII\");",
          "",
          "[Added Lines]",
          "8534:   if (id == 0x5330303638ULL)",
          "8535:   {",
          "8536:     strcpy(model, \"E-M10MarkIII\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8586:     fseek(ifp, 24, SEEK_CUR);",
          "8587:     tempAp = get2();",
          "8589:     tempAp = get2();",
          "8591:     get2();",
          "",
          "[Removed Lines]",
          "8588:     if (tempAp != 0) imgdata.other.CameraTemperature = (float)(tempAp-128);",
          "8590:     if (tempAp != -1) imgdata.other.FlashGN = ((float)tempAp) / 32;",
          "",
          "[Added Lines]",
          "8586:     if (tempAp != 0)",
          "8587:       imgdata.other.CameraTemperature = (float)(tempAp - 128);",
          "8589:     if (tempAp != -1)",
          "8590:       imgdata.other.FlashGN = ((float)tempAp) / 32;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "9579: }",
          "9580: #undef strnXcat",
          "9594:   return;",
          "9595: }",
          "9600:   short bufx = SonySubstitution[buf[0]];",
          "9608:   return;",
          "9609: }",
          "9613:   short bufx = SonySubstitution[buf[4]];",
          "9619:   return;",
          "9620: }",
          "9624:   short bufx = SonySubstitution[buf[0]];",
          "9628:   bufx = SonySubstitution[buf[2]];",
          "9634:   return;",
          "9635: }",
          "",
          "[Removed Lines]",
          "9582: void CLASS process_Sony_0x0116(uchar *buf, unsigned id) {",
          "9584:   if ((id == 257) ||",
          "9585:       (id == 262) ||",
          "9586:       (id == 269) ||",
          "9587:       (id == 270))",
          "9588:     imgdata.other.BatteryTemperature = (float) (buf[1]-32) / 1.8f;",
          "9589:   else if ((id != 263) &&",
          "9590:            (id != 264) &&",
          "9591:            (id != 265) &&",
          "9592:            (id != 266))",
          "9593:     imgdata.other.BatteryTemperature = (float) (buf[2]-32) / 1.8f;",
          "9597: void CLASS process_Sony_0x9402(uchar *buf) {",
          "9599:   if (buf[2] != 0xff) return;",
          "9601:   if ((bufx < 0x0f) ||",
          "9602:       (bufx > 0x1a) ||",
          "9603:       (bufx == 0x16) ||",
          "9604:       (bufx == 0x18)) return;",
          "9606:   imgdata.other.AmbientTemperature = (float) ((short) SonySubstitution[buf[4]]);",
          "9611: void CLASS process_Sony_0x9403(uchar *buf) {",
          "9614:   if ((bufx == 0x00) ||",
          "9615:       (bufx == 0x94)) return;",
          "9617:   imgdata.other.SensorTemperature = (float) ((short) SonySubstitution[buf[5]]);",
          "9622: void CLASS process_Sony_0x9406(uchar *buf) {",
          "9625:   if ((bufx != 0x00) &&",
          "9626:       (bufx == 0x01) &&",
          "9627:       (bufx == 0x03)) return;",
          "9629:   if ((bufx != 0x02) &&",
          "9630:       (bufx == 0x03)) return;",
          "9632:   imgdata.other.BatteryTemperature = (float) (SonySubstitution[buf[5]]-32) / 1.8f;",
          "",
          "[Added Lines]",
          "9582: void CLASS process_Sony_0x0116(uchar *buf, unsigned id)",
          "9583: {",
          "9585:   if ((id == 257) || (id == 262) || (id == 269) || (id == 270))",
          "9586:     imgdata.other.BatteryTemperature = (float)(buf[1] - 32) / 1.8f;",
          "9587:   else if ((id != 263) && (id != 264) && (id != 265) && (id != 266))",
          "9588:     imgdata.other.BatteryTemperature = (float)(buf[2] - 32) / 1.8f;",
          "9592: void CLASS process_Sony_0x9402(uchar *buf)",
          "9593: {",
          "9595:   if (buf[2] != 0xff)",
          "9596:     return;",
          "9598:   if ((bufx < 0x0f) || (bufx > 0x1a) || (bufx == 0x16) || (bufx == 0x18))",
          "9599:     return;",
          "9601:   imgdata.other.AmbientTemperature = (float)((short)SonySubstitution[buf[4]]);",
          "9606: void CLASS process_Sony_0x9403(uchar *buf)",
          "9607: {",
          "9610:   if ((bufx == 0x00) || (bufx == 0x94))",
          "9611:     return;",
          "9613:   imgdata.other.SensorTemperature = (float)((short)SonySubstitution[buf[5]]);",
          "9618: void CLASS process_Sony_0x9406(uchar *buf)",
          "9619: {",
          "9622:   if ((bufx != 0x00) && (bufx == 0x01) && (bufx == 0x03))",
          "9623:     return;",
          "9625:   if ((bufx != 0x02) && (bufx == 0x03))",
          "9626:     return;",
          "9628:   imgdata.other.BatteryTemperature = (float)(SonySubstitution[buf[5]] - 32) / 1.8f;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "9756:   return;",
          "9757: }",
          "9766: {",
          "9768:   ushort lid;",
          "",
          "[Removed Lines]",
          "9759: void CLASS parseSonyMakernotes(unsigned tag, unsigned type, unsigned len, unsigned dng_writer,",
          "9760:                                uchar *&table_buf_0x9050, ushort &table_buf_0x9050_present,",
          "9761:                                uchar *&table_buf_0x940c, ushort &table_buf_0x940c_present,",
          "9762:                                uchar *&table_buf_0x0116, ushort &table_buf_0x0116_present,",
          "9763:                                uchar *&table_buf_0x9402, ushort &table_buf_0x9402_present,",
          "9764:                                uchar *&table_buf_0x9403, ushort &table_buf_0x9403_present,",
          "9765:                                uchar *&table_buf_0x9406, ushort &table_buf_0x9406_present)",
          "",
          "[Added Lines]",
          "9755: void CLASS parseSonyMakernotes(unsigned tag, unsigned type, unsigned len, unsigned dng_writer, uchar *&table_buf_0x9050,",
          "9756:                                ushort &table_buf_0x9050_present, uchar *&table_buf_0x940c,",
          "9757:                                ushort &table_buf_0x940c_present, uchar *&table_buf_0x0116,",
          "9758:                                ushort &table_buf_0x0116_present, uchar *&table_buf_0x9402,",
          "9759:                                ushort &table_buf_0x9402_present, uchar *&table_buf_0x9403,",
          "9760:                                ushort &table_buf_0x9403_present, uchar *&table_buf_0x9406,",
          "9761:                                ushort &table_buf_0x9406_present)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "9773:     unique_id = get2();",
          "9774:     setSonyBodyFeatures(unique_id);",
          "9777:       process_Sony_0x0116(table_buf_0x0116, unique_id);",
          "9778:       free(table_buf_0x0116);",
          "9779:       table_buf_0x0116_present = 0;",
          "9780:     }",
          "9783:       process_Sony_0x9050(table_buf_0x9050, unique_id);",
          "9784:       free(table_buf_0x9050);",
          "9785:       table_buf_0x9050_present = 0;",
          "9786:     }",
          "9789:       process_Sony_0x9402(table_buf_0x9402);",
          "9790:       free(table_buf_0x9402);",
          "9791:       table_buf_0x9402_present = 0;",
          "9792:     }",
          "9795:       process_Sony_0x9403(table_buf_0x9403);",
          "9796:       free(table_buf_0x9403);",
          "9797:       table_buf_0x9403_present = 0;",
          "9798:     }",
          "9801:       process_Sony_0x9406(table_buf_0x9406);",
          "9802:       free(table_buf_0x9406);",
          "9803:       table_buf_0x9406_present = 0;",
          "9804:     }",
          "9808:         process_Sony_0x940c(table_buf_0x940c);",
          "9809:       }",
          "9810:       free(table_buf_0x940c);",
          "",
          "[Removed Lines]",
          "9776:     if (table_buf_0x0116_present) {",
          "9782:     if (table_buf_0x9050_present) {",
          "9788:     if (table_buf_0x9402_present) {",
          "9794:     if (table_buf_0x9403_present) {",
          "9800:     if (table_buf_0x9406_present) {",
          "9806:     if (table_buf_0x940c_present) {",
          "9807:       if (imgdata.lens.makernotes.CameraMount == LIBRAW_MOUNT_Sony_E) {",
          "",
          "[Added Lines]",
          "9772:     if (table_buf_0x0116_present)",
          "9773:     {",
          "9779:     if (table_buf_0x9050_present)",
          "9780:     {",
          "9786:     if (table_buf_0x9402_present)",
          "9787:     {",
          "9793:     if (table_buf_0x9403_present)",
          "9794:     {",
          "9800:     if (table_buf_0x9406_present)",
          "9801:     {",
          "9807:     if (table_buf_0x940c_present)",
          "9808:     {",
          "9809:       if (imgdata.lens.makernotes.CameraMount == LIBRAW_MOUNT_Sony_E)",
          "9810:       {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9921:     free(table_buf);",
          "9922:   }",
          "9925:     table_buf_0x0116 = (uchar *)malloc(len);",
          "9926:     table_buf_0x0116_present = 1;",
          "9927:     fread(table_buf_0x0116, len, 1, ifp);",
          "9930:       free(table_buf_0x0116);",
          "9931:       table_buf_0x0116_present = 0;",
          "9932:     }",
          "",
          "[Removed Lines]",
          "9924:   else if (tag == 0x0116  && len < 256000) {",
          "9928:     if (imgdata.lens.makernotes.CamID) {",
          "9929:       process_Sony_0x0116 (table_buf_0x0116, unique_id);",
          "",
          "[Added Lines]",
          "9927:   else if (tag == 0x0116 && len < 256000)",
          "9928:   {",
          "9932:     if (imgdata.lens.makernotes.CamID)",
          "9933:     {",
          "9934:       process_Sony_0x0116(table_buf_0x0116, unique_id);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "9946:     }",
          "9947:   }",
          "9950:     table_buf_0x9402 = (uchar *)malloc(len);",
          "9951:     table_buf_0x9402_present = 1;",
          "9952:     fread(table_buf_0x9402, len, 1, ifp);",
          "9954:       process_Sony_0x9402(table_buf_0x9402);",
          "9955:       free(table_buf_0x9402);",
          "9956:       table_buf_0x9402_present = 0;",
          "9957:     }",
          "9958:   }",
          "9961:     table_buf_0x9403 = (uchar *)malloc(len);",
          "9962:     table_buf_0x9403_present = 1;",
          "9963:     fread(table_buf_0x9403, len, 1, ifp);",
          "9965:       process_Sony_0x9403(table_buf_0x9403);",
          "9966:       free(table_buf_0x9403);",
          "9967:       table_buf_0x9403_present = 0;",
          "9968:     }",
          "9969:   }",
          "9972:     table_buf_0x9406 = (uchar *)malloc(len);",
          "9973:     table_buf_0x9406_present = 1;",
          "9974:     fread(table_buf_0x9406, len, 1, ifp);",
          "9976:       process_Sony_0x9406(table_buf_0x9406);",
          "9977:       free(table_buf_0x9406);",
          "9978:       table_buf_0x9406_present = 0;",
          "",
          "[Removed Lines]",
          "9949:   else if (tag == 0x9402 && len < 256000) {",
          "9953:     if (imgdata.lens.makernotes.CamID) {",
          "9960:     else if (tag == 0x9403 && len < 256000) {",
          "9964:     if (imgdata.lens.makernotes.CamID) {",
          "9971:   else if (tag == 0x9406 && len < 256000) {",
          "9975:     if (imgdata.lens.makernotes.CamID) {",
          "",
          "[Added Lines]",
          "9954:   else if (tag == 0x9402 && len < 256000)",
          "9955:   {",
          "9959:     if (imgdata.lens.makernotes.CamID)",
          "9960:     {",
          "9967:   else if (tag == 0x9403 && len < 256000)",
          "9968:   {",
          "9972:     if (imgdata.lens.makernotes.CamID)",
          "9973:     {",
          "9980:   else if (tag == 0x9406 && len < 256000)",
          "9981:   {",
          "9985:     if (imgdata.lens.makernotes.CamID)",
          "9986:     {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "10072:   fread(buf, 1, 10, ifp);",
          "10082:   if (!strcmp(buf, \"Nikon\"))",
          "10083:   {",
          "",
          "[Removed Lines]",
          "10075:   printf(\"===>>buf: 0x\");",
          "10076:   for (int i = 0; i < sizeof buf; i ++) {",
          "10077:         printf(\"%02x\", buf[i]);",
          "10078:   }",
          "10079:   putchar('\\n');",
          "",
          "[Added Lines]",
          "10086:     printf(\"===>>buf: 0x\");",
          "10087:     for (int i = 0; i < sizeof buf; i ++) {",
          "10088:           printf(\"%02x\", buf[i]);",
          "10089:     }",
          "10090:     putchar('\\n');",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "10139:     {",
          "10140:       if (tag == 0x000d && len < 256000) // camera info",
          "10141:       {",
          "10144:           fread(CanonCameraInfo, len, 1, ifp);",
          "10147:           fread(CanonCameraInfo, len, 4, ifp);",
          "10148:         }",
          "10149:         lenCanonCameraInfo = len;",
          "",
          "[Removed Lines]",
          "10142:         if (type != 4) {",
          "10143:           CanonCameraInfo = (uchar *)malloc(MAX(16,len));",
          "10145:         } else {",
          "10146:           CanonCameraInfo = (uchar *)malloc(MAX(16,len*4));",
          "",
          "[Added Lines]",
          "10153:         if (type != 4)",
          "10154:         {",
          "10155:           CanonCameraInfo = (uchar *)malloc(MAX(16, len));",
          "10157:         }",
          "10158:         else",
          "10159:         {",
          "10160:           CanonCameraInfo = (uchar *)malloc(MAX(16, len * 4));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "10173:     else if (!strncasecmp(make, \"LEICA\", 5))",
          "10174:     {",
          "10183:       if (((tag == 0x035e) || (tag == 0x035f)) && (type == 10) && (len == 9))",
          "10184:       {",
          "",
          "[Removed Lines]",
          "10176:       if ((tag == 0x0320) && (type == 9) && (len == 1) &&",
          "10177:           !strncasecmp (make, \"Leica Camera AG\", 15)   &&",
          "10178:           !strncmp (buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0)",
          "10179:          ) imgdata.other.CameraTemperature = getreal(type);",
          "10181:       if (tag == 0x34003402) imgdata.other.CameraTemperature = getreal(type);",
          "",
          "[Added Lines]",
          "10190:       if ((tag == 0x0320) && (type == 9) && (len == 1) && !strncasecmp(make, \"Leica Camera AG\", 15) &&",
          "10191:           !strncmp(buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0))",
          "10192:         imgdata.other.CameraTemperature = getreal(type);",
          "10194:       if (tag == 0x34003402)",
          "10195:         imgdata.other.CameraTemperature = getreal(type);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "10478:         imgdata.other.LensTemperature = (float)get2();",
          "10479:         break;",
          "10480:       case 0x20401306:",
          "10481:         {",
          "10490:         }",
          "10492:       case 0x20501500:",
          "10494:           short temp = get2();",
          "10495:           if ((OlyID == 0x4434303430ULL) || // E-1",
          "10496:               (OlyID == 0x5330303336ULL) || // E-M5",
          "10497:               (len != 1))",
          "10498:             imgdata.other.SensorTemperature = (float)temp;",
          "10502:           }",
          "10503:         }",
          "10504:         break;",
          "",
          "[Removed Lines]",
          "10482:           int temp = get2();",
          "10483:           if ((temp != 0) && (temp != 100)) {",
          "10484:       if (temp < 61) imgdata.other.CameraTemperature = (float) temp;",
          "10485:       else imgdata.other.CameraTemperature = (float) (temp-32) / 1.8f;",
          "10486:       if ((OlyID == 0x4434353933ULL) &&   // TG-5",
          "10487:         (imgdata.other.exifAmbientTemperature > -273.15f))",
          "10488:        imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "10489:       }",
          "10491:         break;",
          "10493:         if (OlyID != 0x0ULL) {",
          "10499:           else if ((temp != -32768) && (temp != 0)) {",
          "10500:             if (temp > 199) imgdata.other.SensorTemperature = 86.474958f - 0.120228f*(float)temp;",
          "10501:             else imgdata.other.SensorTemperature = (float)temp;",
          "",
          "[Added Lines]",
          "10495:       {",
          "10496:         int temp = get2();",
          "10497:         if ((temp != 0) && (temp != 100))",
          "10499:           if (temp < 61)",
          "10500:             imgdata.other.CameraTemperature = (float)temp;",
          "10501:           else",
          "10502:             imgdata.other.CameraTemperature = (float)(temp - 32) / 1.8f;",
          "10503:           if ((OlyID == 0x4434353933ULL) && // TG-5",
          "10504:               (imgdata.other.exifAmbientTemperature > -273.15f))",
          "10505:             imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "10507:       }",
          "10508:       break;",
          "10510:         if (OlyID != 0x0ULL)",
          "10511:         {",
          "10517:           else if ((temp != -32768) && (temp != 0))",
          "10518:           {",
          "10519:             if (temp > 199)",
          "10520:               imgdata.other.SensorTemperature = 86.474958f - 0.120228f * (float)temp;",
          "10521:             else",
          "10522:               imgdata.other.SensorTemperature = (float)temp;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "10624:       else if (tag == 0x0043)",
          "10625:       {",
          "10626:         int temp = get4();",
          "10630:         }",
          "10631:       }",
          "10632:       else if (tag == 0xa003)",
          "",
          "[Removed Lines]",
          "10627:         if (temp) {",
          "10628:           imgdata.other.CameraTemperature = (float) temp;",
          "10629:           if (get4() == 10) imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "[Added Lines]",
          "10648:         if (temp)",
          "10649:         {",
          "10650:           imgdata.other.CameraTemperature = (float)temp;",
          "10651:           if (get4() == 10)",
          "10652:             imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "10651:       }",
          "10652:     }",
          "10657:              (!strncasecmp(make, \"Hasselblad\", 10) &&",
          "10670:     }",
          "10671:   next:",
          "10672:     fseek(ifp, save, SEEK_SET);",
          "",
          "[Removed Lines]",
          "10654:     else if (!strncasecmp(make, \"SONY\", 4) ||",
          "10655:              !strncasecmp(make, \"Konica\", 6) ||",
          "10656:              !strncasecmp(make, \"Minolta\", 7) ||",
          "10658:               (!strncasecmp(model, \"Stellar\", 7) ||",
          "10659:                !strncasecmp(model, \"Lunar\", 5) ||",
          "10660:                !strncasecmp(model, \"Lusso\", 5) ||",
          "10661:                !strncasecmp(model, \"HV\", 2))))",
          "10662:     {",
          "10663:       parseSonyMakernotes(tag, type, len, AdobeDNG,",
          "10664:                           table_buf_0x9050, table_buf_0x9050_present,",
          "10665:                           table_buf_0x940c, table_buf_0x940c_present,",
          "10666:                           table_buf_0x0116, table_buf_0x0116_present,",
          "10667:                           table_buf_0x9402, table_buf_0x9402_present,",
          "10668:                           table_buf_0x9403, table_buf_0x9403_present,",
          "10669:                           table_buf_0x9406, table_buf_0x9406_present);",
          "",
          "[Added Lines]",
          "10677:     else if (!strncasecmp(make, \"SONY\", 4) || !strncasecmp(make, \"Konica\", 6) || !strncasecmp(make, \"Minolta\", 7) ||",
          "10679:               (!strncasecmp(model, \"Stellar\", 7) || !strncasecmp(model, \"Lunar\", 5) ||",
          "10680:                !strncasecmp(model, \"Lusso\", 5) || !strncasecmp(model, \"HV\", 2))))",
          "10681:     {",
          "10682:       parseSonyMakernotes(tag, type, len, AdobeDNG, table_buf_0x9050, table_buf_0x9050_present, table_buf_0x940c,",
          "10683:                           table_buf_0x940c_present, table_buf_0x0116, table_buf_0x0116_present, table_buf_0x9402,",
          "10684:                           table_buf_0x9402_present, table_buf_0x9403, table_buf_0x9403_present, table_buf_0x9406,",
          "10685:                           table_buf_0x9406_present);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "10676: }",
          "10678: #else",
          "10680: #endif",
          "10682: void CLASS parse_makernote(int base, int uptag)",
          "",
          "[Removed Lines]",
          "10679: void CLASS parse_makernote_0xc634(int base, int uptag, unsigned dng_writer) { /*placeholder */}",
          "",
          "[Added Lines]",
          "10695: void CLASS parse_makernote_0xc634(int base, int uptag, unsigned dng_writer)",
          "10697: }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "10724:     return;",
          "10725:   fread(buf, 1, 10, ifp);",
          "10736:       !strncmp(buf, \"VER\", 3) || !strncmp(buf, \"IIII\", 4) || !strncmp(buf, \"MMMM\", 4))",
          "",
          "[Removed Lines]",
          "10728:   printf(\"===>>buf: 0x\");",
          "10729:   for (int i = 0; i < sizeof buf; i ++) {",
          "10730:         printf(\"%02x\", buf[i]);",
          "10731:   }",
          "10732:   putchar('\\n');",
          "",
          "[Added Lines]",
          "10746:     printf(\"===>>buf: 0x\");",
          "10747:     for (int i = 0; i < sizeof buf; i ++) {",
          "10748:           printf(\"%02x\", buf[i]);",
          "10749:     }",
          "10750:     putchar('\\n');",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "10849:     {",
          "10850:       if (tag == 0x000d && len < 256000) // camera info",
          "10851:       {",
          "10854:           fread(CanonCameraInfo, len, 1, ifp);",
          "10857:           fread(CanonCameraInfo, len, 4, ifp);",
          "10858:         }",
          "10859:         lenCanonCameraInfo = len;",
          "",
          "[Removed Lines]",
          "10852:         if (type != 4) {",
          "10853:           CanonCameraInfo = (uchar *)malloc(MAX(16,len));",
          "10855:         } else {",
          "10856:           CanonCameraInfo = (uchar *)malloc(MAX(16,len*4));",
          "",
          "[Added Lines]",
          "10870:         if (type != 4)",
          "10871:         {",
          "10872:           CanonCameraInfo = (uchar *)malloc(MAX(16, len));",
          "10874:         }",
          "10875:         else",
          "10876:         {",
          "10877:           CanonCameraInfo = (uchar *)malloc(MAX(16, len * 4));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "10952:         parseFujiMakernotes(tag, type);",
          "10953:     }",
          "10958:     {",
          "10959:       if (tag == 0x0045)",
          "10960:       {",
          "",
          "[Removed Lines]",
          "10955:     else if (!strncasecmp(model, \"Hasselblad X1D\", 14)",
          "10956:           || !strncasecmp(model, \"Hasselblad H6D\", 14)",
          "10957:           || !strncasecmp(model, \"Hasselblad A6D\", 14))",
          "",
          "[Added Lines]",
          "10976:     else if (!strncasecmp(model, \"Hasselblad X1D\", 14) || !strncasecmp(model, \"Hasselblad H6D\", 14) ||",
          "10977:              !strncasecmp(model, \"Hasselblad A6D\", 14))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "10976:         imgdata.color.dng_color[ind].parsedfields |= LIBRAW_DNGFM_FORWARDMATRIX;",
          "10977:       }",
          "10986:       if ((tag == 0x0303) && (type != 4))",
          "10987:       {",
          "",
          "[Removed Lines]",
          "10979:       if (tag == 0x34003402) imgdata.other.CameraTemperature = getreal(type);",
          "10981:       if ((tag == 0x0320) && (type == 9) && (len == 1) &&",
          "10982:           !strncasecmp (make, \"Leica Camera AG\", 15)   &&",
          "10983:           !strncmp (buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0)",
          "10984:          ) imgdata.other.CameraTemperature = getreal(type);",
          "",
          "[Added Lines]",
          "10999:       if (tag == 0x34003402)",
          "11000:         imgdata.other.CameraTemperature = getreal(type);",
          "11002:       if ((tag == 0x0320) && (type == 9) && (len == 1) && !strncasecmp(make, \"Leica Camera AG\", 15) &&",
          "11003:           !strncmp(buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0))",
          "11004:         imgdata.other.CameraTemperature = getreal(type);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "11245:         imgdata.other.LensTemperature = (float)get2();",
          "11246:         break;",
          "11247:       case 0x20401306:",
          "11248:         {",
          "11257:         }",
          "11259:       case 0x20501500:",
          "11261:           short temp = get2();",
          "11262:           if ((OlyID == 0x4434303430ULL) || // E-1",
          "11263:               (OlyID == 0x5330303336ULL) || // E-M5",
          "11264:               (len != 1))",
          "11265:             imgdata.other.SensorTemperature = (float)temp;",
          "11269:           }",
          "11270:         }",
          "11271:         break;",
          "",
          "[Removed Lines]",
          "11249:           int temp = get2();",
          "11250:           if ((temp != 0) && (temp != 100)) {",
          "11251:       if (temp < 61) imgdata.other.CameraTemperature = (float) temp;",
          "11252:       else imgdata.other.CameraTemperature = (float) (temp-32) / 1.8f;",
          "11253:       if ((OlyID == 0x4434353933ULL) &&   // TG-5",
          "11254:         (imgdata.other.exifAmbientTemperature > -273.15f))",
          "11255:        imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "11256:       }",
          "11258:         break;",
          "11260:         if (OlyID != 0x0ULL) {",
          "11266:           else if ((temp != -32768) && (temp != 0)) {",
          "11267:             if (temp > 199) imgdata.other.SensorTemperature = 86.474958f - 0.120228f*(float)temp;",
          "11268:             else imgdata.other.SensorTemperature = (float)temp;",
          "",
          "[Added Lines]",
          "11268:       {",
          "11269:         int temp = get2();",
          "11270:         if ((temp != 0) && (temp != 100))",
          "11272:           if (temp < 61)",
          "11273:             imgdata.other.CameraTemperature = (float)temp;",
          "11274:           else",
          "11275:             imgdata.other.CameraTemperature = (float)(temp - 32) / 1.8f;",
          "11276:           if ((OlyID == 0x4434353933ULL) && // TG-5",
          "11277:               (imgdata.other.exifAmbientTemperature > -273.15f))",
          "11278:             imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "11280:       }",
          "11281:       break;",
          "11283:         if (OlyID != 0x0ULL)",
          "11284:         {",
          "11290:           else if ((temp != -32768) && (temp != 0))",
          "11291:           {",
          "11292:             if (temp > 199)",
          "11293:               imgdata.other.SensorTemperature = 86.474958f - 0.120228f * (float)temp;",
          "11294:             else",
          "11295:               imgdata.other.SensorTemperature = (float)temp;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "11506:       else if (tag == 0x0043)",
          "11507:       {",
          "11508:         int temp = get4();",
          "11512:         }",
          "11513:       }",
          "11514:       else if (tag == 0xa002)",
          "",
          "[Removed Lines]",
          "11509:         if (temp) {",
          "11510:           imgdata.other.CameraTemperature = (float) temp;",
          "11511:           if (get4() == 10) imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "[Added Lines]",
          "11536:         if (temp)",
          "11537:         {",
          "11538:           imgdata.other.CameraTemperature = (float)temp;",
          "11539:           if (get4() == 10)",
          "11540:             imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "11537:       }",
          "11538:     }",
          "11543:              (!strncasecmp(make, \"Hasselblad\", 10) &&",
          "11548:     {",
          "11556:     }",
          "11558:     fseek(ifp, _pos, SEEK_SET);",
          "",
          "[Removed Lines]",
          "11540:     else if (!strncasecmp(make, \"SONY\", 4) ||",
          "11541:              !strncasecmp(make, \"Konica\", 6) ||",
          "11542:              !strncasecmp(make, \"Minolta\", 7) ||",
          "11544:               (!strncasecmp(model, \"Stellar\", 7) ||",
          "11545:                !strncasecmp(model, \"Lunar\", 5) ||",
          "11546:                !strncasecmp(model, \"Lusso\", 5) ||",
          "11547:                !strncasecmp(model, \"HV\", 2))))",
          "11549:       parseSonyMakernotes(tag, type, len, nonDNG,",
          "11550:                           table_buf_0x9050, table_buf_0x9050_present,",
          "11551:                           table_buf_0x940c, table_buf_0x940c_present,",
          "11552:                           table_buf_0x0116, table_buf_0x0116_present,",
          "11553:                           table_buf_0x9402, table_buf_0x9402_present,",
          "11554:                           table_buf_0x9403, table_buf_0x9403_present,",
          "11555:                           table_buf_0x9406, table_buf_0x9406_present);",
          "",
          "[Added Lines]",
          "11569:     else if (!strncasecmp(make, \"SONY\", 4) || !strncasecmp(make, \"Konica\", 6) || !strncasecmp(make, \"Minolta\", 7) ||",
          "11571:               (!strncasecmp(model, \"Stellar\", 7) || !strncasecmp(model, \"Lunar\", 5) ||",
          "11572:                !strncasecmp(model, \"Lusso\", 5) || !strncasecmp(model, \"HV\", 2))))",
          "11574:       parseSonyMakernotes(tag, type, len, nonDNG, table_buf_0x9050, table_buf_0x9050_present, table_buf_0x940c,",
          "11575:                           table_buf_0x940c_present, table_buf_0x0116, table_buf_0x0116_present, table_buf_0x9402,",
          "11576:                           table_buf_0x9402_present, table_buf_0x9403, table_buf_0x9403_present, table_buf_0x9406,",
          "11577:                           table_buf_0x9406_present);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "12003:     }",
          "12005:     if (((tag == 0x2020) || (tag == 0x3000) || (tag == 0x2030) || (tag == 0x2031) || (tag == 0x2050)) &&",
          "12008:     {",
          "12009:       INT64 _pos3 = ftell(ifp);",
          "12010:       parse_makernote(base, tag);",
          "",
          "[Removed Lines]",
          "12006:         ((type == 7) || (type == 13)) &&",
          "12007:         !strncasecmp(make, \"Olympus\", 7))",
          "",
          "[Added Lines]",
          "12028:         ((type == 7) || (type == 13)) && !strncasecmp(make, \"Olympus\", 7))",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "12179:     case 0x9400:",
          "12180:       imgdata.other.exifAmbientTemperature = getreal(type);",
          "12183:         imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "12184:       break;",
          "12185:     case 0x9401:",
          "",
          "[Removed Lines]",
          "12181:       if ((imgdata.other.CameraTemperature > -273.15f) &&",
          "12182:           (OlyID == 0x4434353933ULL))  // TG-5",
          "",
          "[Added Lines]",
          "12202:       if ((imgdata.other.CameraTemperature > -273.15f) && (OlyID == 0x4434353933ULL)) // TG-5",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "12805: #ifdef LIBRAW_LIBRARY_BUILD",
          "12806:     if (!strncasecmp(make, \"SONY\", 4) ||",
          "12807:         (!strncasecmp(make, \"Hasselblad\", 10) &&",
          "12811:     {",
          "12812:       switch (tag)",
          "12813:       {",
          "",
          "[Removed Lines]",
          "12808:          (!strncasecmp(model, \"Stellar\", 7) ||",
          "12809:           !strncasecmp(model, \"Lunar\", 5) ||",
          "12810:           !strncasecmp(model, \"HV\", 2))))",
          "",
          "[Added Lines]",
          "12828:          (!strncasecmp(model, \"Stellar\", 7) || !strncasecmp(model, \"Lunar\", 5) || !strncasecmp(model, \"HV\", 2))))",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "13344:     case 0x9400:",
          "13345:       imgdata.other.exifAmbientTemperature = getreal(type);",
          "13348:         imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "13349:       break;",
          "13350:     case 0x9401:",
          "",
          "[Removed Lines]",
          "13346:       if ((imgdata.other.CameraTemperature > -273.15f) &&",
          "13347:           (OlyID == 0x4434353933ULL))  // TG-5",
          "",
          "[Added Lines]",
          "13364:       if ((imgdata.other.CameraTemperature > -273.15f) && (OlyID == 0x4434353933ULL)) // TG-5",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "14350:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][2] = get2();",
          "14351:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][0] = get2();",
          "14352:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][2] = get2();",
          "14371:       }",
          "14372:       break;",
          "14373: #endif",
          "",
          "[Removed Lines]",
          "14353:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][1] =",
          "14354:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][3] =",
          "14355:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][1] =",
          "14356:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][3] =",
          "14357:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][1] =",
          "14358:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][3] =",
          "14359:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][1] =",
          "14360:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][3] =",
          "14361:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][1] =",
          "14362:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][3] =",
          "14363:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][1] =",
          "14364:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][3] =",
          "14365:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][1] =",
          "14366:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][3] =",
          "14367:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][1] =",
          "14368:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][3] =",
          "14369:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][1] =",
          "14370:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][3] = 0x100;",
          "",
          "[Added Lines]",
          "14370:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][3] =",
          "14371:             imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][3] =",
          "14372:                 imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][3] =",
          "14373:                     imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][3] =",
          "14374:                         imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][3] =",
          "14375:                             imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][3] =",
          "14376:                                 imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][1] =",
          "14377:                                     imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][3] =",
          "14378:                                         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][1] =",
          "14379:                                             imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][3] =",
          "14380:                                                 imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][1] =",
          "14381:                                                     imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][3] = 0x100;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "15068:   if (entries > 255)",
          "15069:     return;",
          "15070: #ifdef LIBRAW_LIBRARY_BUILD",
          "15072: #endif",
          "15073:   while (entries--)",
          "15074:   {",
          "",
          "[Removed Lines]",
          "15071:   imgdata.process_warnings |=  LIBRAW_WARN_PARSEFUJI_PROCESSED;",
          "",
          "[Added Lines]",
          "15082:   imgdata.process_warnings |= LIBRAW_WARN_PARSEFUJI_PROCESSED;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "15096:     {",
          "15097:       filters = 9;",
          "15098:       FORC(36)",
          "15103:     }",
          "15104:     else if (tag == 0x2ff0)",
          "15105:     {",
          "",
          "[Removed Lines]",
          "15099:         {",
          "15100:     int q = fgetc(ifp);",
          "15102:  }",
          "",
          "[Added Lines]",
          "15110:       {",
          "15111:         int q = fgetc(ifp);",
          "15113:       }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "17680:   memset(tiff_ifd, 0, sizeof tiff_ifd);",
          "17682: #ifdef LIBRAW_LIBRARY_BUILD",
          "17691:   for (i = 0; i < LIBRAW_IFD_MAXCOUNT; i++)",
          "17692:   {",
          "",
          "[Removed Lines]",
          "17683:   imgdata.other.CameraTemperature =",
          "17684:   imgdata.other.SensorTemperature =",
          "17685:   imgdata.other.SensorTemperature2 =",
          "17686:   imgdata.other.LensTemperature =",
          "17687:   imgdata.other.AmbientTemperature =",
          "17688:   imgdata.other.BatteryTemperature =",
          "17689:   imgdata.other.exifAmbientTemperature = -1000.0f;",
          "",
          "[Added Lines]",
          "17694:   imgdata.other.CameraTemperature = imgdata.other.SensorTemperature = imgdata.other.SensorTemperature2 =",
          "17695:       imgdata.other.LensTemperature = imgdata.other.AmbientTemperature = imgdata.other.BatteryTemperature =",
          "17696:           imgdata.other.exifAmbientTemperature = -1000.0f;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "17903:     height = get2();",
          "17904: #ifdef LIBRAW_LIBRARY_BUILD",
          "17909: #endif",
          "17910:     switch (tiff_bps = i * 8 / (width * height))",
          "17911:     {",
          "",
          "[Removed Lines]",
          "17906:     if(width < 1 || width > 16000 || height < 1 || height > 16000",
          "17907:        || i < (width*height) || i > (2* width*height))",
          "17908:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "[Added Lines]",
          "17913:     if (width < 1 || width > 16000 || height < 1 || height > 16000 || i < (width * height) || i > (2 * width * height))",
          "17914:       throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "17964:   else if (!memcmp(head, \"FOVb\", 4))",
          "17965:   {",
          "17966: #ifdef LIBRAW_LIBRARY_BUILD",
          "17969: #endif",
          "17970:   }",
          "17971:   else if (!memcmp(head, \"CI\", 2))",
          "",
          "[Removed Lines]",
          "17968:       parse_x3f();",
          "",
          "[Added Lines]",
          "17974:     parse_x3f();",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "18031:           load_raw = table[i].offset == 0xffff ? &CLASS unpacked_load_raw_reversed : &CLASS unpacked_load_raw;",
          "18032:         }",
          "18033:         maximum = (1 << tiff_bps) - (1 << table[i].max);",
          "18035:       }",
          "18036:   if (zero_fsize)",
          "18037:     fsize = 0;",
          "",
          "[Removed Lines]",
          "18034:  break;",
          "",
          "[Added Lines]",
          "18040:         break;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "19052:     zero_is_bad = 1;",
          "19053: #ifdef LIBRAW_LIBRARY_BUILD",
          "19054:     float fratio = float(data_size) / (float(raw_height) * float(raw_width));",
          "19056:     {",
          "19057:       load_raw = &CLASS panasonic_16x10_load_raw;",
          "19058:       zero_is_bad = 0;",
          "",
          "[Removed Lines]",
          "19055:     if(!(raw_width % 10) && !(data_size % 16384) && fratio >= 1.6f && fratio <= 1.6001f)",
          "",
          "[Added Lines]",
          "19061:     if (!(raw_width % 10) && !(data_size % 16384) && fratio >= 1.6f && fratio <= 1.6001f)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "19616: #ifdef LIBRAW_LIBRARY_BUILD",
          "19620: #endif",
          "19621:   if (fuji_width)",
          "19622:   {",
          "",
          "[Removed Lines]",
          "19618:   if(fuji_width && !dng_version && !(imgdata.process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED ))",
          "19619:      fuji_width = 0;",
          "",
          "[Added Lines]",
          "19624:   if (fuji_width && !dng_version && !(imgdata.process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED))",
          "19625:     fuji_width = 0;",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266:   {",
          "1267: #ifdef LIBRAW_LIBRARY_BUILD",
          "1268:     if (row < raw_height && col < raw_width)",
          "1270:     image[row * raw_width + col][c] = curve[(*rp)[c]];",
          "1272: #else",
          "",
          "[Removed Lines]",
          "1269:     FORC(tiff_samples)",
          "",
          "[Added Lines]",
          "1269:       FORC(tiff_samples)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2905: void CLASS panasonic_16x10_load_raw()",
          "2906: {",
          "2907: #ifdef LIBRAW_LIBRARY_BUILD",
          "2909: #endif",
          "2910: }",
          "",
          "[Removed Lines]",
          "2908:  throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "",
          "[Added Lines]",
          "2908:   throw LIBRAW_EXCEPTION_DECODE_RAW;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3148: #endif",
          "3149:     FORC3 mul[c] = getbits(6);",
          "3150: #ifdef LIBRAW_LIBRARY_BUILD",
          "3152:       throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "3153: #endif",
          "3154:     FORC3",
          "",
          "[Removed Lines]",
          "3151:     if(!mul[0] || !mul[1] || !mul[2])",
          "",
          "[Added Lines]",
          "3151:     if (!mul[0] || !mul[1] || !mul[2])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3737:       for (i = 0; i < len; i++)",
          "3738:       {",
          "3739:         int idx = ret ? buf[i] : (pred[i & 1] += buf[i]);",
          "3743:           derror();",
          "3747:       }",
          "3748:     }",
          "3749:   }",
          "",
          "[Removed Lines]",
          "3740:  if(idx >=0 && idx < 0xffff)",
          "3741:   {",
          "3742:            if ((RAW(row, col + i) = curve[idx]) >> 12)",
          "3744:    }",
          "3745:   else",
          "3746:    derror();",
          "",
          "[Added Lines]",
          "3740:         if (idx >= 0 && idx < 0xffff)",
          "3741:         {",
          "3742:           if ((RAW(row, col + i) = curve[idx]) >> 12)",
          "3743:             derror();",
          "3744:         }",
          "3745:         else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5706:   int c, d, f, g, h, i, v, ng, row, col, top, left, mrow, mcol;",
          "5708: #ifdef LIBRAW_LIBRARY_BUILD",
          "5710: #endif",
          "5712:   int val, ndir, pass, hm[8], avg[4], color[3][8];",
          "",
          "[Removed Lines]",
          "5709:   int cstat[4]={0,0,0,0};",
          "",
          "[Added Lines]",
          "5709:   int cstat[4] = {0, 0, 0, 0};",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5727: #endif",
          "5729: #ifdef LIBRAW_LIBRARY_BUILD",
          "5733:   for (row = 0; row < 6; row++)",
          "5747: #endif",
          "5748:   cielab(0, 0);",
          "5749:   ndir = 4 << (passes > 1);",
          "",
          "[Removed Lines]",
          "5730:   if(width < TS || height < TS)",
          "5731:    throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
          "5734:    for (col = 0; col < 6; col++)",
          "5735:     cstat[fcol(row,col)]++;",
          "5737:   if(cstat[0] < 6 || cstat[0]>10 || cstat[1]< 16",
          "5738:     || cstat[1]>24 || cstat[2]< 6 || cstat[2]>10 || cstat[3])",
          "5739:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5742:  for(int i = 0; i < 3; i++)",
          "5743:   for(int j = 0; j < 3; j++)",
          "5744:    for(int k = 0; k < 2; k++)",
          "5745:     for(int l = 0; l < 8; l++)",
          "5746:      allhex[i][j][k][l]=32700;",
          "",
          "[Added Lines]",
          "5730:   if (width < TS || height < TS)",
          "5731:     throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
          "5734:     for (col = 0; col < 6; col++)",
          "5735:       cstat[fcol(row, col)]++;",
          "5737:   if (cstat[0] < 6 || cstat[0] > 10 || cstat[1] < 16 || cstat[1] > 24 || cstat[2] < 6 || cstat[2] > 10 || cstat[3])",
          "5738:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5741:   for (int i = 0; i < 3; i++)",
          "5742:     for (int j = 0; j < 3; j++)",
          "5743:       for (int k = 0; k < 2; k++)",
          "5744:         for (int l = 0; l < 8; l++)",
          "5745:           allhex[i][j][k][l] = 32700;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5754:   drv = (float(*)[TS][TS])(buffer + TS * TS * (ndir * 6 + 6));",
          "5755:   homo = (char(*)[TS][TS])(buffer + TS * TS * (ndir * 10 + 6));",
          "5759:   for (row = 0; row < 3; row++)",
          "5760:     for (col = 0; col < 3; col++)",
          "",
          "[Removed Lines]",
          "5757:   int minv=0,maxv=0,minh=0,maxh=0;",
          "",
          "[Added Lines]",
          "5756:   int minv = 0, maxv = 0, minh = 0, maxh = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5775:           {",
          "5776:             v = orth[d] * patt[g][c * 2] + orth[d + 1] * patt[g][c * 2 + 1];",
          "5777:             h = orth[d + 2] * patt[g][c * 2] + orth[d + 3] * patt[g][c * 2 + 1];",
          "5782:             allhex[row][col][0][c ^ (g * 2 & d)] = h + v * width;",
          "5783:             allhex[row][col][1][c ^ (g * 2 & d)] = h + v * TS;",
          "5784:           }",
          "5785:       }",
          "5787: #ifdef LIBRAW_LIBRARY_BUILD",
          "5795:   int retrycount = 0;",
          "5796: #endif",
          "",
          "[Removed Lines]",
          "5778:      minv=MIN(v,minv);",
          "5779:      maxv=MAX(v,maxv);",
          "5780:      minh=MIN(v,minh);",
          "5781:         maxh=MAX(v,maxh);",
          "5789:   for(int i = 0; i < 3; i++)",
          "5790:     for(int j = 0; j < 3; j++)",
          "5791:       for(int k = 0; k < 2; k++)",
          "5792:         for(int l = 0; l < 8; l++)",
          "5793:    if(allhex[i][j][k][l]>maxh+maxv*width+1 || allhex[i][j][k][l]<minh+minv*width-1)",
          "5794:    throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "[Added Lines]",
          "5777:             minv = MIN(v, minv);",
          "5778:             maxv = MAX(v, maxv);",
          "5779:             minh = MIN(v, minh);",
          "5780:             maxh = MAX(v, maxh);",
          "5788:   for (int i = 0; i < 3; i++)",
          "5789:     for (int j = 0; j < 3; j++)",
          "5790:       for (int k = 0; k < 2; k++)",
          "5791:         for (int l = 0; l < 8; l++)",
          "5792:           if (allhex[i][j][k][l] > maxh + maxv * width + 1 || allhex[i][j][k][l] < minh + minv * width - 1)",
          "5793:             throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5824:         break;",
          "5825:       case 2:",
          "5826:         if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)",
          "5829: #ifdef LIBRAW_LIBRARY_BUILD",
          "5832: #endif",
          "5834:       }",
          "5835:     }",
          "",
          "[Removed Lines]",
          "5827:  {",
          "5828:            row--;",
          "5830:    if(retrycount++ > width*height)",
          "5831:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5833:  }",
          "",
          "[Added Lines]",
          "5826:         {",
          "5827:           row--;",
          "5829:           if (retrycount++ > width * height)",
          "5830:             throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5832:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6682: unsigned CLASS setCanonBodyFeatures(unsigned id)",
          "6683: {",
          "6695:   imgdata.lens.makernotes.CamID = id;",
          "6696:   if ((id == 0x80000001) || // 1D",
          "",
          "[Removed Lines]",
          "6684:     if (id == 0x03740000) // EOS M3",
          "6685:       id = 0x80000374;",
          "6686:     else if (id == 0x03840000) // EOS M10",
          "6687:       id = 0x80000384;",
          "6688:     else if (id == 0x03940000) // EOS M5",
          "6689:       id = 0x80000394;",
          "6690:     else if (id == 0x04070000) // EOS M6",
          "6691:       id = 0x80000407;",
          "6692:     else if (id == 0x03980000) // EOS M100",
          "6693:       id = 0x80000398;",
          "",
          "[Added Lines]",
          "6683:   if (id == 0x03740000) // EOS M3",
          "6684:     id = 0x80000374;",
          "6685:   else if (id == 0x03840000) // EOS M10",
          "6686:     id = 0x80000384;",
          "6687:   else if (id == 0x03940000) // EOS M5",
          "6688:     id = 0x80000394;",
          "6689:   else if (id == 0x04070000) // EOS M6",
          "6690:     id = 0x80000407;",
          "6691:   else if (id == 0x03980000) // EOS M100",
          "6692:     id = 0x80000398;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6754: {",
          "6755:   ushort iCanonLensID = 0, iCanonMaxFocal = 0, iCanonMinFocal = 0, iCanonLens = 0, iCanonCurFocal = 0,",
          "6756:          iCanonFocalType = 0;",
          "6758:   CameraInfo[0] = 0;",
          "6759:   CameraInfo[1] = 0;",
          "6774:   }",
          "6776:   switch (id)",
          "",
          "[Removed Lines]",
          "6757:   if(maxlen<16) return; // too short",
          "6760:   if (type == 4) {",
          "6761:     if ((maxlen == 94)  ||",
          "6762:         (maxlen == 138) ||",
          "6763:         (maxlen == 148) ||",
          "6764:         (maxlen == 156) ||",
          "6765:         (maxlen == 162) ||",
          "6766:         (maxlen == 167) ||",
          "6767:         (maxlen == 171) ||",
          "6768:         (maxlen == 264) ||",
          "6769:         (maxlen > 400))",
          "6770:          imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-3)<<2));",
          "6771:       else if (maxlen == 72) imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-1)<<2));",
          "6772:       else if ((maxlen == 85) || (maxlen == 93)) imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-2)<<2));",
          "6773:       else if ((maxlen == 96) || (maxlen == 104)) imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen-4)<<2));",
          "",
          "[Added Lines]",
          "6756:   if (maxlen < 16)",
          "6757:     return; // too short",
          "6760:   if (type == 4)",
          "6761:   {",
          "6762:     if ((maxlen == 94) || (maxlen == 138) || (maxlen == 148) || (maxlen == 156) || (maxlen == 162) || (maxlen == 167) ||",
          "6763:         (maxlen == 171) || (maxlen == 264) || (maxlen > 400))",
          "6764:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 3) << 2));",
          "6765:     else if (maxlen == 72)",
          "6766:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 1) << 2));",
          "6767:     else if ((maxlen == 85) || (maxlen == 93))",
          "6768:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 2) << 2));",
          "6769:     else if ((maxlen == 96) || (maxlen == 104))",
          "6770:       imgdata.other.CameraTemperature = sget4(CameraInfo + ((maxlen - 4) << 2));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7211: void CLASS setOlympusBodyFeatures(unsigned long long id)",
          "7212: {",
          "7213:   imgdata.lens.makernotes.CamID = id;",
          "7216:   }",
          "7217:   if ((id == 0x4434303430ULL) || // E-1",
          "7218:       (id == 0x4434303431ULL) || // E-300",
          "",
          "[Removed Lines]",
          "7214:   if (id == 0x5330303638ULL) {",
          "7215:     strcpy (model, \"E-M10MarkIII\");",
          "",
          "[Added Lines]",
          "7211:   if (id == 0x5330303638ULL)",
          "7212:   {",
          "7213:     strcpy(model, \"E-M10MarkIII\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7263:     fseek(ifp, 24, SEEK_CUR);",
          "7264:     tempAp = get2();",
          "7266:     tempAp = get2();",
          "7268:     get2();",
          "",
          "[Removed Lines]",
          "7265:     if (tempAp != 0) imgdata.other.CameraTemperature = (float)(tempAp-128);",
          "7267:     if (tempAp != -1) imgdata.other.FlashGN = ((float)tempAp) / 32;",
          "",
          "[Added Lines]",
          "7263:     if (tempAp != 0)",
          "7264:       imgdata.other.CameraTemperature = (float)(tempAp - 128);",
          "7266:     if (tempAp != -1)",
          "7267:       imgdata.other.FlashGN = ((float)tempAp) / 32;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8256: }",
          "8257: #undef strnXcat",
          "8271:   return;",
          "8272: }",
          "8277:   short bufx = SonySubstitution[buf[0]];",
          "8285:   return;",
          "8286: }",
          "8290:   short bufx = SonySubstitution[buf[4]];",
          "8296:   return;",
          "8297: }",
          "8301:   short bufx = SonySubstitution[buf[0]];",
          "8305:   bufx = SonySubstitution[buf[2]];",
          "8311:   return;",
          "8312: }",
          "",
          "[Removed Lines]",
          "8259: void CLASS process_Sony_0x0116(uchar *buf, unsigned id) {",
          "8261:   if ((id == 257) ||",
          "8262:       (id == 262) ||",
          "8263:       (id == 269) ||",
          "8264:       (id == 270))",
          "8265:     imgdata.other.BatteryTemperature = (float) (buf[1]-32) / 1.8f;",
          "8266:   else if ((id != 263) &&",
          "8267:            (id != 264) &&",
          "8268:            (id != 265) &&",
          "8269:            (id != 266))",
          "8270:     imgdata.other.BatteryTemperature = (float) (buf[2]-32) / 1.8f;",
          "8274: void CLASS process_Sony_0x9402(uchar *buf) {",
          "8276:   if (buf[2] != 0xff) return;",
          "8278:   if ((bufx < 0x0f) ||",
          "8279:       (bufx > 0x1a) ||",
          "8280:       (bufx == 0x16) ||",
          "8281:       (bufx == 0x18)) return;",
          "8283:   imgdata.other.AmbientTemperature = (float) ((short) SonySubstitution[buf[4]]);",
          "8288: void CLASS process_Sony_0x9403(uchar *buf) {",
          "8291:   if ((bufx == 0x00) ||",
          "8292:       (bufx == 0x94)) return;",
          "8294:   imgdata.other.SensorTemperature = (float) ((short) SonySubstitution[buf[5]]);",
          "8299: void CLASS process_Sony_0x9406(uchar *buf) {",
          "8302:   if ((bufx != 0x00) &&",
          "8303:       (bufx == 0x01) &&",
          "8304:       (bufx == 0x03)) return;",
          "8306:   if ((bufx != 0x02) &&",
          "8307:       (bufx == 0x03)) return;",
          "8309:   imgdata.other.BatteryTemperature = (float) (SonySubstitution[buf[5]]-32) / 1.8f;",
          "",
          "[Added Lines]",
          "8259: void CLASS process_Sony_0x0116(uchar *buf, unsigned id)",
          "8260: {",
          "8262:   if ((id == 257) || (id == 262) || (id == 269) || (id == 270))",
          "8263:     imgdata.other.BatteryTemperature = (float)(buf[1] - 32) / 1.8f;",
          "8264:   else if ((id != 263) && (id != 264) && (id != 265) && (id != 266))",
          "8265:     imgdata.other.BatteryTemperature = (float)(buf[2] - 32) / 1.8f;",
          "8269: void CLASS process_Sony_0x9402(uchar *buf)",
          "8270: {",
          "8272:   if (buf[2] != 0xff)",
          "8273:     return;",
          "8275:   if ((bufx < 0x0f) || (bufx > 0x1a) || (bufx == 0x16) || (bufx == 0x18))",
          "8276:     return;",
          "8278:   imgdata.other.AmbientTemperature = (float)((short)SonySubstitution[buf[4]]);",
          "8283: void CLASS process_Sony_0x9403(uchar *buf)",
          "8284: {",
          "8287:   if ((bufx == 0x00) || (bufx == 0x94))",
          "8288:     return;",
          "8290:   imgdata.other.SensorTemperature = (float)((short)SonySubstitution[buf[5]]);",
          "8295: void CLASS process_Sony_0x9406(uchar *buf)",
          "8296: {",
          "8299:   if ((bufx != 0x00) && (bufx == 0x01) && (bufx == 0x03))",
          "8300:     return;",
          "8302:   if ((bufx != 0x02) && (bufx == 0x03))",
          "8303:     return;",
          "8305:   imgdata.other.BatteryTemperature = (float)(SonySubstitution[buf[5]] - 32) / 1.8f;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8433:   return;",
          "8434: }",
          "8443: {",
          "8445:   ushort lid;",
          "",
          "[Removed Lines]",
          "8436: void CLASS parseSonyMakernotes(unsigned tag, unsigned type, unsigned len, unsigned dng_writer,",
          "8437:                                uchar *&table_buf_0x9050, ushort &table_buf_0x9050_present,",
          "8438:                                uchar *&table_buf_0x940c, ushort &table_buf_0x940c_present,",
          "8439:                                uchar *&table_buf_0x0116, ushort &table_buf_0x0116_present,",
          "8440:                                uchar *&table_buf_0x9402, ushort &table_buf_0x9402_present,",
          "8441:                                uchar *&table_buf_0x9403, ushort &table_buf_0x9403_present,",
          "8442:                                uchar *&table_buf_0x9406, ushort &table_buf_0x9406_present)",
          "",
          "[Added Lines]",
          "8432: void CLASS parseSonyMakernotes(unsigned tag, unsigned type, unsigned len, unsigned dng_writer, uchar *&table_buf_0x9050,",
          "8433:                                ushort &table_buf_0x9050_present, uchar *&table_buf_0x940c,",
          "8434:                                ushort &table_buf_0x940c_present, uchar *&table_buf_0x0116,",
          "8435:                                ushort &table_buf_0x0116_present, uchar *&table_buf_0x9402,",
          "8436:                                ushort &table_buf_0x9402_present, uchar *&table_buf_0x9403,",
          "8437:                                ushort &table_buf_0x9403_present, uchar *&table_buf_0x9406,",
          "8438:                                ushort &table_buf_0x9406_present)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8450:     unique_id = get2();",
          "8451:     setSonyBodyFeatures(unique_id);",
          "8454:       process_Sony_0x0116(table_buf_0x0116, unique_id);",
          "8455:       free(table_buf_0x0116);",
          "8456:       table_buf_0x0116_present = 0;",
          "8457:     }",
          "8460:       process_Sony_0x9050(table_buf_0x9050, unique_id);",
          "8461:       free(table_buf_0x9050);",
          "8462:       table_buf_0x9050_present = 0;",
          "8463:     }",
          "8466:       process_Sony_0x9402(table_buf_0x9402);",
          "8467:       free(table_buf_0x9402);",
          "8468:       table_buf_0x9402_present = 0;",
          "8469:     }",
          "8472:       process_Sony_0x9403(table_buf_0x9403);",
          "8473:       free(table_buf_0x9403);",
          "8474:       table_buf_0x9403_present = 0;",
          "8475:     }",
          "8478:       process_Sony_0x9406(table_buf_0x9406);",
          "8479:       free(table_buf_0x9406);",
          "8480:       table_buf_0x9406_present = 0;",
          "8481:     }",
          "8485:         process_Sony_0x940c(table_buf_0x940c);",
          "8486:       }",
          "8487:       free(table_buf_0x940c);",
          "",
          "[Removed Lines]",
          "8453:     if (table_buf_0x0116_present) {",
          "8459:     if (table_buf_0x9050_present) {",
          "8465:     if (table_buf_0x9402_present) {",
          "8471:     if (table_buf_0x9403_present) {",
          "8477:     if (table_buf_0x9406_present) {",
          "8483:     if (table_buf_0x940c_present) {",
          "8484:       if (imgdata.lens.makernotes.CameraMount == LIBRAW_MOUNT_Sony_E) {",
          "",
          "[Added Lines]",
          "8449:     if (table_buf_0x0116_present)",
          "8450:     {",
          "8456:     if (table_buf_0x9050_present)",
          "8457:     {",
          "8463:     if (table_buf_0x9402_present)",
          "8464:     {",
          "8470:     if (table_buf_0x9403_present)",
          "8471:     {",
          "8477:     if (table_buf_0x9406_present)",
          "8478:     {",
          "8484:     if (table_buf_0x940c_present)",
          "8485:     {",
          "8486:       if (imgdata.lens.makernotes.CameraMount == LIBRAW_MOUNT_Sony_E)",
          "8487:       {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8598:     free(table_buf);",
          "8599:   }",
          "8602:     table_buf_0x0116 = (uchar *)malloc(len);",
          "8603:     table_buf_0x0116_present = 1;",
          "8604:     fread(table_buf_0x0116, len, 1, ifp);",
          "8607:       free(table_buf_0x0116);",
          "8608:       table_buf_0x0116_present = 0;",
          "8609:     }",
          "",
          "[Removed Lines]",
          "8601:   else if (tag == 0x0116  && len < 256000) {",
          "8605:     if (imgdata.lens.makernotes.CamID) {",
          "8606:       process_Sony_0x0116 (table_buf_0x0116, unique_id);",
          "",
          "[Added Lines]",
          "8604:   else if (tag == 0x0116 && len < 256000)",
          "8605:   {",
          "8609:     if (imgdata.lens.makernotes.CamID)",
          "8610:     {",
          "8611:       process_Sony_0x0116(table_buf_0x0116, unique_id);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8623:     }",
          "8624:   }",
          "8627:     table_buf_0x9402 = (uchar *)malloc(len);",
          "8628:     table_buf_0x9402_present = 1;",
          "8629:     fread(table_buf_0x9402, len, 1, ifp);",
          "8631:       process_Sony_0x9402(table_buf_0x9402);",
          "8632:       free(table_buf_0x9402);",
          "8633:       table_buf_0x9402_present = 0;",
          "8634:     }",
          "8635:   }",
          "8638:     table_buf_0x9403 = (uchar *)malloc(len);",
          "8639:     table_buf_0x9403_present = 1;",
          "8640:     fread(table_buf_0x9403, len, 1, ifp);",
          "8642:       process_Sony_0x9403(table_buf_0x9403);",
          "8643:       free(table_buf_0x9403);",
          "8644:       table_buf_0x9403_present = 0;",
          "8645:     }",
          "8646:   }",
          "8649:     table_buf_0x9406 = (uchar *)malloc(len);",
          "8650:     table_buf_0x9406_present = 1;",
          "8651:     fread(table_buf_0x9406, len, 1, ifp);",
          "8653:       process_Sony_0x9406(table_buf_0x9406);",
          "8654:       free(table_buf_0x9406);",
          "8655:       table_buf_0x9406_present = 0;",
          "",
          "[Removed Lines]",
          "8626:   else if (tag == 0x9402 && len < 256000) {",
          "8630:     if (imgdata.lens.makernotes.CamID) {",
          "8637:     else if (tag == 0x9403 && len < 256000) {",
          "8641:     if (imgdata.lens.makernotes.CamID) {",
          "8648:   else if (tag == 0x9406 && len < 256000) {",
          "8652:     if (imgdata.lens.makernotes.CamID) {",
          "",
          "[Added Lines]",
          "8631:   else if (tag == 0x9402 && len < 256000)",
          "8632:   {",
          "8636:     if (imgdata.lens.makernotes.CamID)",
          "8637:     {",
          "8644:   else if (tag == 0x9403 && len < 256000)",
          "8645:   {",
          "8649:     if (imgdata.lens.makernotes.CamID)",
          "8650:     {",
          "8657:   else if (tag == 0x9406 && len < 256000)",
          "8658:   {",
          "8662:     if (imgdata.lens.makernotes.CamID)",
          "8663:     {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8749:   fread(buf, 1, 10, ifp);",
          "8759:   if (!strcmp(buf, \"Nikon\"))",
          "8760:   {",
          "",
          "[Removed Lines]",
          "8752:   printf(\"===>>buf: 0x\");",
          "8753:   for (int i = 0; i < sizeof buf; i ++) {",
          "8754:         printf(\"%02x\", buf[i]);",
          "8755:   }",
          "8756:   putchar('\\n');",
          "",
          "[Added Lines]",
          "8763:     printf(\"===>>buf: 0x\");",
          "8764:     for (int i = 0; i < sizeof buf; i ++) {",
          "8765:           printf(\"%02x\", buf[i]);",
          "8766:     }",
          "8767:     putchar('\\n');",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "8816:     {",
          "8817:       if (tag == 0x000d && len < 256000) // camera info",
          "8818:       {",
          "8821:           fread(CanonCameraInfo, len, 1, ifp);",
          "8824:           fread(CanonCameraInfo, len, 4, ifp);",
          "8825:         }",
          "8826:         lenCanonCameraInfo = len;",
          "",
          "[Removed Lines]",
          "8819:         if (type != 4) {",
          "8820:           CanonCameraInfo = (uchar *)malloc(MAX(16,len));",
          "8822:         } else {",
          "8823:           CanonCameraInfo = (uchar *)malloc(MAX(16,len*4));",
          "",
          "[Added Lines]",
          "8830:         if (type != 4)",
          "8831:         {",
          "8832:           CanonCameraInfo = (uchar *)malloc(MAX(16, len));",
          "8834:         }",
          "8835:         else",
          "8836:         {",
          "8837:           CanonCameraInfo = (uchar *)malloc(MAX(16, len * 4));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "8850:     else if (!strncasecmp(make, \"LEICA\", 5))",
          "8851:     {",
          "8860:       if (((tag == 0x035e) || (tag == 0x035f)) && (type == 10) && (len == 9))",
          "8861:       {",
          "",
          "[Removed Lines]",
          "8853:       if ((tag == 0x0320) && (type == 9) && (len == 1) &&",
          "8854:           !strncasecmp (make, \"Leica Camera AG\", 15)   &&",
          "8855:           !strncmp (buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0)",
          "8856:          ) imgdata.other.CameraTemperature = getreal(type);",
          "8858:       if (tag == 0x34003402) imgdata.other.CameraTemperature = getreal(type);",
          "",
          "[Added Lines]",
          "8867:       if ((tag == 0x0320) && (type == 9) && (len == 1) && !strncasecmp(make, \"Leica Camera AG\", 15) &&",
          "8868:           !strncmp(buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0))",
          "8869:         imgdata.other.CameraTemperature = getreal(type);",
          "8871:       if (tag == 0x34003402)",
          "8872:         imgdata.other.CameraTemperature = getreal(type);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "9155:         imgdata.other.LensTemperature = (float)get2();",
          "9156:         break;",
          "9157:       case 0x20401306:",
          "9158:         {",
          "9167:         }",
          "9169:       case 0x20501500:",
          "9171:           short temp = get2();",
          "9172:           if ((OlyID == 0x4434303430ULL) || // E-1",
          "9173:               (OlyID == 0x5330303336ULL) || // E-M5",
          "9174:               (len != 1))",
          "9175:             imgdata.other.SensorTemperature = (float)temp;",
          "9179:           }",
          "9180:         }",
          "9181:         break;",
          "",
          "[Removed Lines]",
          "9159:           int temp = get2();",
          "9160:           if ((temp != 0) && (temp != 100)) {",
          "9161:       if (temp < 61) imgdata.other.CameraTemperature = (float) temp;",
          "9162:       else imgdata.other.CameraTemperature = (float) (temp-32) / 1.8f;",
          "9163:       if ((OlyID == 0x4434353933ULL) &&   // TG-5",
          "9164:         (imgdata.other.exifAmbientTemperature > -273.15f))",
          "9165:        imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "9166:       }",
          "9168:         break;",
          "9170:         if (OlyID != 0x0ULL) {",
          "9176:           else if ((temp != -32768) && (temp != 0)) {",
          "9177:             if (temp > 199) imgdata.other.SensorTemperature = 86.474958f - 0.120228f*(float)temp;",
          "9178:             else imgdata.other.SensorTemperature = (float)temp;",
          "",
          "[Added Lines]",
          "9172:       {",
          "9173:         int temp = get2();",
          "9174:         if ((temp != 0) && (temp != 100))",
          "9176:           if (temp < 61)",
          "9177:             imgdata.other.CameraTemperature = (float)temp;",
          "9178:           else",
          "9179:             imgdata.other.CameraTemperature = (float)(temp - 32) / 1.8f;",
          "9180:           if ((OlyID == 0x4434353933ULL) && // TG-5",
          "9181:               (imgdata.other.exifAmbientTemperature > -273.15f))",
          "9182:             imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "9184:       }",
          "9185:       break;",
          "9187:         if (OlyID != 0x0ULL)",
          "9188:         {",
          "9194:           else if ((temp != -32768) && (temp != 0))",
          "9195:           {",
          "9196:             if (temp > 199)",
          "9197:               imgdata.other.SensorTemperature = 86.474958f - 0.120228f * (float)temp;",
          "9198:             else",
          "9199:               imgdata.other.SensorTemperature = (float)temp;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "9301:       else if (tag == 0x0043)",
          "9302:       {",
          "9303:         int temp = get4();",
          "9307:         }",
          "9308:       }",
          "9309:       else if (tag == 0xa003)",
          "",
          "[Removed Lines]",
          "9304:         if (temp) {",
          "9305:           imgdata.other.CameraTemperature = (float) temp;",
          "9306:           if (get4() == 10) imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "[Added Lines]",
          "9325:         if (temp)",
          "9326:         {",
          "9327:           imgdata.other.CameraTemperature = (float)temp;",
          "9328:           if (get4() == 10)",
          "9329:             imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "9328:       }",
          "9329:     }",
          "9334:              (!strncasecmp(make, \"Hasselblad\", 10) &&",
          "9347:     }",
          "9348:   next:",
          "9349:     fseek(ifp, save, SEEK_SET);",
          "",
          "[Removed Lines]",
          "9331:     else if (!strncasecmp(make, \"SONY\", 4) ||",
          "9332:              !strncasecmp(make, \"Konica\", 6) ||",
          "9333:              !strncasecmp(make, \"Minolta\", 7) ||",
          "9335:               (!strncasecmp(model, \"Stellar\", 7) ||",
          "9336:                !strncasecmp(model, \"Lunar\", 5) ||",
          "9337:                !strncasecmp(model, \"Lusso\", 5) ||",
          "9338:                !strncasecmp(model, \"HV\", 2))))",
          "9339:     {",
          "9340:       parseSonyMakernotes(tag, type, len, AdobeDNG,",
          "9341:                           table_buf_0x9050, table_buf_0x9050_present,",
          "9342:                           table_buf_0x940c, table_buf_0x940c_present,",
          "9343:                           table_buf_0x0116, table_buf_0x0116_present,",
          "9344:                           table_buf_0x9402, table_buf_0x9402_present,",
          "9345:                           table_buf_0x9403, table_buf_0x9403_present,",
          "9346:                           table_buf_0x9406, table_buf_0x9406_present);",
          "",
          "[Added Lines]",
          "9354:     else if (!strncasecmp(make, \"SONY\", 4) || !strncasecmp(make, \"Konica\", 6) || !strncasecmp(make, \"Minolta\", 7) ||",
          "9356:               (!strncasecmp(model, \"Stellar\", 7) || !strncasecmp(model, \"Lunar\", 5) ||",
          "9357:                !strncasecmp(model, \"Lusso\", 5) || !strncasecmp(model, \"HV\", 2))))",
          "9358:     {",
          "9359:       parseSonyMakernotes(tag, type, len, AdobeDNG, table_buf_0x9050, table_buf_0x9050_present, table_buf_0x940c,",
          "9360:                           table_buf_0x940c_present, table_buf_0x0116, table_buf_0x0116_present, table_buf_0x9402,",
          "9361:                           table_buf_0x9402_present, table_buf_0x9403, table_buf_0x9403_present, table_buf_0x9406,",
          "9362:                           table_buf_0x9406_present);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "9353: }",
          "9355: #else",
          "9357: #endif",
          "9359: void CLASS parse_makernote(int base, int uptag)",
          "",
          "[Removed Lines]",
          "9356: void CLASS parse_makernote_0xc634(int base, int uptag, unsigned dng_writer) { /*placeholder */}",
          "",
          "[Added Lines]",
          "9372: void CLASS parse_makernote_0xc634(int base, int uptag, unsigned dng_writer)",
          "9374: }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "9401:     return;",
          "9402:   fread(buf, 1, 10, ifp);",
          "9413:       !strncmp(buf, \"VER\", 3) || !strncmp(buf, \"IIII\", 4) || !strncmp(buf, \"MMMM\", 4))",
          "",
          "[Removed Lines]",
          "9405:   printf(\"===>>buf: 0x\");",
          "9406:   for (int i = 0; i < sizeof buf; i ++) {",
          "9407:         printf(\"%02x\", buf[i]);",
          "9408:   }",
          "9409:   putchar('\\n');",
          "",
          "[Added Lines]",
          "9423:     printf(\"===>>buf: 0x\");",
          "9424:     for (int i = 0; i < sizeof buf; i ++) {",
          "9425:           printf(\"%02x\", buf[i]);",
          "9426:     }",
          "9427:     putchar('\\n');",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "9526:     {",
          "9527:       if (tag == 0x000d && len < 256000) // camera info",
          "9528:       {",
          "9531:           fread(CanonCameraInfo, len, 1, ifp);",
          "9534:           fread(CanonCameraInfo, len, 4, ifp);",
          "9535:         }",
          "9536:         lenCanonCameraInfo = len;",
          "",
          "[Removed Lines]",
          "9529:         if (type != 4) {",
          "9530:           CanonCameraInfo = (uchar *)malloc(MAX(16,len));",
          "9532:         } else {",
          "9533:           CanonCameraInfo = (uchar *)malloc(MAX(16,len*4));",
          "",
          "[Added Lines]",
          "9547:         if (type != 4)",
          "9548:         {",
          "9549:           CanonCameraInfo = (uchar *)malloc(MAX(16, len));",
          "9551:         }",
          "9552:         else",
          "9553:         {",
          "9554:           CanonCameraInfo = (uchar *)malloc(MAX(16, len * 4));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "9629:         parseFujiMakernotes(tag, type);",
          "9630:     }",
          "9635:     {",
          "9636:       if (tag == 0x0045)",
          "9637:       {",
          "",
          "[Removed Lines]",
          "9632:     else if (!strncasecmp(model, \"Hasselblad X1D\", 14)",
          "9633:           || !strncasecmp(model, \"Hasselblad H6D\", 14)",
          "9634:           || !strncasecmp(model, \"Hasselblad A6D\", 14))",
          "",
          "[Added Lines]",
          "9653:     else if (!strncasecmp(model, \"Hasselblad X1D\", 14) || !strncasecmp(model, \"Hasselblad H6D\", 14) ||",
          "9654:              !strncasecmp(model, \"Hasselblad A6D\", 14))",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "9653:         imgdata.color.dng_color[ind].parsedfields |= LIBRAW_DNGFM_FORWARDMATRIX;",
          "9654:       }",
          "9663:       if ((tag == 0x0303) && (type != 4))",
          "9664:       {",
          "",
          "[Removed Lines]",
          "9656:       if (tag == 0x34003402) imgdata.other.CameraTemperature = getreal(type);",
          "9658:       if ((tag == 0x0320) && (type == 9) && (len == 1) &&",
          "9659:           !strncasecmp (make, \"Leica Camera AG\", 15)   &&",
          "9660:           !strncmp (buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0)",
          "9661:          ) imgdata.other.CameraTemperature = getreal(type);",
          "",
          "[Added Lines]",
          "9676:       if (tag == 0x34003402)",
          "9677:         imgdata.other.CameraTemperature = getreal(type);",
          "9679:       if ((tag == 0x0320) && (type == 9) && (len == 1) && !strncasecmp(make, \"Leica Camera AG\", 15) &&",
          "9680:           !strncmp(buf, \"LEICA\", 5) && (buf[5] == 0) && (buf[6] == 0) && (buf[7] == 0))",
          "9681:         imgdata.other.CameraTemperature = getreal(type);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "9922:         imgdata.other.LensTemperature = (float)get2();",
          "9923:         break;",
          "9924:       case 0x20401306:",
          "9925:         {",
          "9934:         }",
          "9936:       case 0x20501500:",
          "9938:           short temp = get2();",
          "9939:           if ((OlyID == 0x4434303430ULL) || // E-1",
          "9940:               (OlyID == 0x5330303336ULL) || // E-M5",
          "9941:               (len != 1))",
          "9942:             imgdata.other.SensorTemperature = (float)temp;",
          "9946:           }",
          "9947:         }",
          "9948:         break;",
          "",
          "[Removed Lines]",
          "9926:           int temp = get2();",
          "9927:           if ((temp != 0) && (temp != 100)) {",
          "9928:       if (temp < 61) imgdata.other.CameraTemperature = (float) temp;",
          "9929:       else imgdata.other.CameraTemperature = (float) (temp-32) / 1.8f;",
          "9930:       if ((OlyID == 0x4434353933ULL) &&   // TG-5",
          "9931:         (imgdata.other.exifAmbientTemperature > -273.15f))",
          "9932:        imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "9933:       }",
          "9935:         break;",
          "9937:         if (OlyID != 0x0ULL) {",
          "9943:           else if ((temp != -32768) && (temp != 0)) {",
          "9944:             if (temp > 199) imgdata.other.SensorTemperature = 86.474958f - 0.120228f*(float)temp;",
          "9945:             else imgdata.other.SensorTemperature = (float)temp;",
          "",
          "[Added Lines]",
          "9945:       {",
          "9946:         int temp = get2();",
          "9947:         if ((temp != 0) && (temp != 100))",
          "9949:           if (temp < 61)",
          "9950:             imgdata.other.CameraTemperature = (float)temp;",
          "9951:           else",
          "9952:             imgdata.other.CameraTemperature = (float)(temp - 32) / 1.8f;",
          "9953:           if ((OlyID == 0x4434353933ULL) && // TG-5",
          "9954:               (imgdata.other.exifAmbientTemperature > -273.15f))",
          "9955:             imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "9957:       }",
          "9958:       break;",
          "9960:         if (OlyID != 0x0ULL)",
          "9961:         {",
          "9967:           else if ((temp != -32768) && (temp != 0))",
          "9968:           {",
          "9969:             if (temp > 199)",
          "9970:               imgdata.other.SensorTemperature = 86.474958f - 0.120228f * (float)temp;",
          "9971:             else",
          "9972:               imgdata.other.SensorTemperature = (float)temp;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "10183:       else if (tag == 0x0043)",
          "10184:       {",
          "10185:         int temp = get4();",
          "10189:         }",
          "10190:       }",
          "10191:       else if (tag == 0xa002)",
          "",
          "[Removed Lines]",
          "10186:         if (temp) {",
          "10187:           imgdata.other.CameraTemperature = (float) temp;",
          "10188:           if (get4() == 10) imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "[Added Lines]",
          "10213:         if (temp)",
          "10214:         {",
          "10215:           imgdata.other.CameraTemperature = (float)temp;",
          "10216:           if (get4() == 10)",
          "10217:             imgdata.other.CameraTemperature /= 10.0f;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "10214:       }",
          "10215:     }",
          "10220:              (!strncasecmp(make, \"Hasselblad\", 10) &&",
          "10225:     {",
          "10233:     }",
          "10235:     fseek(ifp, _pos, SEEK_SET);",
          "",
          "[Removed Lines]",
          "10217:     else if (!strncasecmp(make, \"SONY\", 4) ||",
          "10218:              !strncasecmp(make, \"Konica\", 6) ||",
          "10219:              !strncasecmp(make, \"Minolta\", 7) ||",
          "10221:               (!strncasecmp(model, \"Stellar\", 7) ||",
          "10222:                !strncasecmp(model, \"Lunar\", 5) ||",
          "10223:                !strncasecmp(model, \"Lusso\", 5) ||",
          "10224:                !strncasecmp(model, \"HV\", 2))))",
          "10226:       parseSonyMakernotes(tag, type, len, nonDNG,",
          "10227:                           table_buf_0x9050, table_buf_0x9050_present,",
          "10228:                           table_buf_0x940c, table_buf_0x940c_present,",
          "10229:                           table_buf_0x0116, table_buf_0x0116_present,",
          "10230:                           table_buf_0x9402, table_buf_0x9402_present,",
          "10231:                           table_buf_0x9403, table_buf_0x9403_present,",
          "10232:                           table_buf_0x9406, table_buf_0x9406_present);",
          "",
          "[Added Lines]",
          "10246:     else if (!strncasecmp(make, \"SONY\", 4) || !strncasecmp(make, \"Konica\", 6) || !strncasecmp(make, \"Minolta\", 7) ||",
          "10248:               (!strncasecmp(model, \"Stellar\", 7) || !strncasecmp(model, \"Lunar\", 5) ||",
          "10249:                !strncasecmp(model, \"Lusso\", 5) || !strncasecmp(model, \"HV\", 2))))",
          "10251:       parseSonyMakernotes(tag, type, len, nonDNG, table_buf_0x9050, table_buf_0x9050_present, table_buf_0x940c,",
          "10252:                           table_buf_0x940c_present, table_buf_0x0116, table_buf_0x0116_present, table_buf_0x9402,",
          "10253:                           table_buf_0x9402_present, table_buf_0x9403, table_buf_0x9403_present, table_buf_0x9406,",
          "10254:                           table_buf_0x9406_present);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "10680:     }",
          "10682:     if (((tag == 0x2020) || (tag == 0x3000) || (tag == 0x2030) || (tag == 0x2031) || (tag == 0x2050)) &&",
          "10685:     {",
          "10686:       INT64 _pos3 = ftell(ifp);",
          "10687:       parse_makernote(base, tag);",
          "",
          "[Removed Lines]",
          "10683:         ((type == 7) || (type == 13)) &&",
          "10684:         !strncasecmp(make, \"Olympus\", 7))",
          "",
          "[Added Lines]",
          "10705:         ((type == 7) || (type == 13)) && !strncasecmp(make, \"Olympus\", 7))",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "10856:     case 0x9400:",
          "10857:       imgdata.other.exifAmbientTemperature = getreal(type);",
          "10860:         imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "10861:       break;",
          "10862:     case 0x9401:",
          "",
          "[Removed Lines]",
          "10858:       if ((imgdata.other.CameraTemperature > -273.15f) &&",
          "10859:           (OlyID == 0x4434353933ULL))  // TG-5",
          "",
          "[Added Lines]",
          "10879:       if ((imgdata.other.CameraTemperature > -273.15f) && (OlyID == 0x4434353933ULL)) // TG-5",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "11476: #ifdef LIBRAW_LIBRARY_BUILD",
          "11477:     if (!strncasecmp(make, \"SONY\", 4) ||",
          "11478:         (!strncasecmp(make, \"Hasselblad\", 10) &&",
          "11482:     {",
          "11483:       switch (tag)",
          "11484:       {",
          "",
          "[Removed Lines]",
          "11479:          (!strncasecmp(model, \"Stellar\", 7) ||",
          "11480:           !strncasecmp(model, \"Lunar\", 5) ||",
          "11481:           !strncasecmp(model, \"HV\", 2))))",
          "",
          "[Added Lines]",
          "11499:          (!strncasecmp(model, \"Stellar\", 7) || !strncasecmp(model, \"Lunar\", 5) || !strncasecmp(model, \"HV\", 2))))",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "12015:     case 0x9400:",
          "12016:       imgdata.other.exifAmbientTemperature = getreal(type);",
          "12019:         imgdata.other.CameraTemperature += imgdata.other.exifAmbientTemperature;",
          "12020:       break;",
          "12021:     case 0x9401:",
          "",
          "[Removed Lines]",
          "12017:       if ((imgdata.other.CameraTemperature > -273.15f) &&",
          "12018:           (OlyID == 0x4434353933ULL))  // TG-5",
          "",
          "[Added Lines]",
          "12035:       if ((imgdata.other.CameraTemperature > -273.15f) && (OlyID == 0x4434353933ULL)) // TG-5",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "13021:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][2] = get2();",
          "13022:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][0] = get2();",
          "13023:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][2] = get2();",
          "13042:       }",
          "13043:       break;",
          "13044: #endif",
          "",
          "[Removed Lines]",
          "13024:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][1] =",
          "13025:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][3] =",
          "13026:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][1] =",
          "13027:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][3] =",
          "13028:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][1] =",
          "13029:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][3] =",
          "13030:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][1] =",
          "13031:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][3] =",
          "13032:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][1] =",
          "13033:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][3] =",
          "13034:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][1] =",
          "13035:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][3] =",
          "13036:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][1] =",
          "13037:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][3] =",
          "13038:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][1] =",
          "13039:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][3] =",
          "13040:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][1] =",
          "13041:         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][3] = 0x100;",
          "",
          "[Added Lines]",
          "13041:         imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Daylight][3] =",
          "13042:             imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Tungsten][3] =",
          "13043:                 imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Flash][3] =",
          "13044:                     imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Cloudy][3] =",
          "13045:                         imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_Shade][3] =",
          "13046:                             imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][1] = imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_D][3] =",
          "13047:                                 imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][1] =",
          "13048:                                     imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_N][3] =",
          "13049:                                         imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][1] =",
          "13050:                                             imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_W][3] =",
          "13051:                                                 imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][1] =",
          "13052:                                                     imgdata.color.WB_Coeffs[LIBRAW_WBI_FL_WW][3] = 0x100;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "13739:   if (entries > 255)",
          "13740:     return;",
          "13741: #ifdef LIBRAW_LIBRARY_BUILD",
          "13743: #endif",
          "13744:   while (entries--)",
          "13745:   {",
          "",
          "[Removed Lines]",
          "13742:   imgdata.process_warnings |=  LIBRAW_WARN_PARSEFUJI_PROCESSED;",
          "",
          "[Added Lines]",
          "13753:   imgdata.process_warnings |= LIBRAW_WARN_PARSEFUJI_PROCESSED;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "13767:     {",
          "13768:       filters = 9;",
          "13769:       FORC(36)",
          "13774:     }",
          "13775:     else if (tag == 0x2ff0)",
          "13776:     {",
          "",
          "[Removed Lines]",
          "13770:         {",
          "13771:     int q = fgetc(ifp);",
          "13773:  }",
          "",
          "[Added Lines]",
          "13781:       {",
          "13782:         int q = fgetc(ifp);",
          "13784:       }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "16191:   memset(tiff_ifd, 0, sizeof tiff_ifd);",
          "16193: #ifdef LIBRAW_LIBRARY_BUILD",
          "16202:   for (i = 0; i < LIBRAW_IFD_MAXCOUNT; i++)",
          "16203:   {",
          "",
          "[Removed Lines]",
          "16194:   imgdata.other.CameraTemperature =",
          "16195:   imgdata.other.SensorTemperature =",
          "16196:   imgdata.other.SensorTemperature2 =",
          "16197:   imgdata.other.LensTemperature =",
          "16198:   imgdata.other.AmbientTemperature =",
          "16199:   imgdata.other.BatteryTemperature =",
          "16200:   imgdata.other.exifAmbientTemperature = -1000.0f;",
          "",
          "[Added Lines]",
          "16205:   imgdata.other.CameraTemperature = imgdata.other.SensorTemperature = imgdata.other.SensorTemperature2 =",
          "16206:       imgdata.other.LensTemperature = imgdata.other.AmbientTemperature = imgdata.other.BatteryTemperature =",
          "16207:           imgdata.other.exifAmbientTemperature = -1000.0f;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "16414:     height = get2();",
          "16415: #ifdef LIBRAW_LIBRARY_BUILD",
          "16420: #endif",
          "16421:     switch (tiff_bps = i * 8 / (width * height))",
          "16422:     {",
          "",
          "[Removed Lines]",
          "16417:     if(width < 1 || width > 16000 || height < 1 || height > 16000",
          "16418:        || i < (width*height) || i > (2* width*height))",
          "16419:     throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "[Added Lines]",
          "16424:     if (width < 1 || width > 16000 || height < 1 || height > 16000 || i < (width * height) || i > (2 * width * height))",
          "16425:       throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "16475:   else if (!memcmp(head, \"FOVb\", 4))",
          "16476:   {",
          "16477: #ifdef LIBRAW_LIBRARY_BUILD",
          "16480: #endif",
          "16481:   }",
          "16482:   else if (!memcmp(head, \"CI\", 2))",
          "",
          "[Removed Lines]",
          "16479:       parse_x3f();",
          "",
          "[Added Lines]",
          "16485:     parse_x3f();",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "16542:           load_raw = table[i].offset == 0xffff ? &CLASS unpacked_load_raw_reversed : &CLASS unpacked_load_raw;",
          "16543:         }",
          "16544:         maximum = (1 << tiff_bps) - (1 << table[i].max);",
          "16546:       }",
          "16547:   if (zero_fsize)",
          "16548:     fsize = 0;",
          "",
          "[Removed Lines]",
          "16545:  break;",
          "",
          "[Added Lines]",
          "16551:         break;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "17563:     zero_is_bad = 1;",
          "17564: #ifdef LIBRAW_LIBRARY_BUILD",
          "17565:     float fratio = float(data_size) / (float(raw_height) * float(raw_width));",
          "17567:     {",
          "17568:       load_raw = &CLASS panasonic_16x10_load_raw;",
          "17569:       zero_is_bad = 0;",
          "",
          "[Removed Lines]",
          "17566:     if(!(raw_width % 10) && !(data_size % 16384) && fratio >= 1.6f && fratio <= 1.6001f)",
          "",
          "[Added Lines]",
          "17572:     if (!(raw_width % 10) && !(data_size % 16384) && fratio >= 1.6f && fratio <= 1.6001f)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "18127: #ifdef LIBRAW_LIBRARY_BUILD",
          "18131: #endif",
          "18132:   if (fuji_width)",
          "18133:   {",
          "",
          "[Removed Lines]",
          "18129:   if(fuji_width && !dng_version && !(imgdata.process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED ))",
          "18130:      fuji_width = 0;",
          "",
          "[Added Lines]",
          "18135:   if (fuji_width && !dng_version && !(imgdata.process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED))",
          "18136:     fuji_width = 0;",
          "",
          "---------------"
        ],
        "libraw/libraw.h||libraw/libraw.h": [
          "File: libraw/libraw.h -> libraw/libraw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include \"libraw_alloc.h\"",
          "41: #ifdef __cplusplus",
          "43: #endif",
          "50: #if defined(_WIN32) && !defined(__MINGW32__) && defined(_MSC_VER) && (_MSC_VER > 1310)",
          "53: #endif",
          "111: #ifdef __cplusplus",
          "112: }",
          "",
          "[Removed Lines]",
          "42: extern \"C\" {",
          "44: DllDef const char *libraw_strerror(int errorcode);",
          "45: DllDef const char *libraw_strprogress(enum LibRaw_progress);",
          "47: DllDef libraw_data_t *libraw_init(unsigned int flags);",
          "48: DllDef int libraw_open_file(libraw_data_t *, const char *);",
          "49: DllDef int libraw_open_file_ex(libraw_data_t *, const char *, INT64 max_buff_sz);",
          "51: DllDef int libraw_open_wfile(libraw_data_t *, const wchar_t *);",
          "52: DllDef int libraw_open_wfile_ex(libraw_data_t *, const wchar_t *, INT64 max_buff_sz);",
          "54: DllDef int libraw_open_buffer(libraw_data_t *, void *buffer, size_t size);",
          "55: DllDef int libraw_unpack(libraw_data_t *);",
          "56: DllDef int libraw_unpack_thumb(libraw_data_t *);",
          "57: DllDef void libraw_recycle_datastream(libraw_data_t *);",
          "58: DllDef void libraw_recycle(libraw_data_t *);",
          "59: DllDef void libraw_close(libraw_data_t *);",
          "60: DllDef void libraw_subtract_black(libraw_data_t *);",
          "61: DllDef int libraw_raw2image(libraw_data_t *);",
          "62: DllDef void libraw_free_image(libraw_data_t *);",
          "64: DllDef const char *libraw_version();",
          "65: DllDef int libraw_versionNumber();",
          "67: DllDef const char **libraw_cameraList();",
          "68: DllDef int libraw_cameraCount();",
          "71: DllDef void libraw_set_memerror_handler(libraw_data_t *, memory_callback cb, void *datap);",
          "72: DllDef void libraw_set_exifparser_handler(libraw_data_t *, exif_parser_callback cb, void *datap);",
          "73: DllDef void libraw_set_dataerror_handler(libraw_data_t *, data_callback func, void *datap);",
          "74: DllDef void libraw_set_progress_handler(libraw_data_t *, progress_callback cb, void *datap);",
          "75: DllDef const char *libraw_unpack_function_name(libraw_data_t *lr);",
          "76: DllDef int libraw_get_decoder_info(libraw_data_t *lr, libraw_decoder_info_t *d);",
          "77: DllDef int libraw_COLOR(libraw_data_t *, int row, int col);",
          "78: DllDef unsigned libraw_capabilities();",
          "81: DllDef int libraw_adjust_sizes_info_only(libraw_data_t *);",
          "82: DllDef int libraw_dcraw_ppm_tiff_writer(libraw_data_t *lr, const char *filename);",
          "83: DllDef int libraw_dcraw_thumb_writer(libraw_data_t *lr, const char *fname);",
          "84: DllDef int libraw_dcraw_process(libraw_data_t *lr);",
          "85: DllDef libraw_processed_image_t *libraw_dcraw_make_mem_image(libraw_data_t *lr, int *errc);",
          "86: DllDef libraw_processed_image_t *libraw_dcraw_make_mem_thumb(libraw_data_t *lr, int *errc);",
          "87: DllDef void libraw_dcraw_clear_mem(libraw_processed_image_t *);",
          "89: DllDef void libraw_set_demosaic(libraw_data_t *lr, int value);",
          "90: DllDef void libraw_set_output_color(libraw_data_t *lr, int value);",
          "91: DllDef void libraw_set_user_mul(libraw_data_t *lr, int index, float val);",
          "92: DllDef void libraw_set_output_bps(libraw_data_t *lr, int value);",
          "93: DllDef void libraw_set_gamma(libraw_data_t *lr, int index, float value);",
          "94: DllDef void libraw_set_no_auto_bright(libraw_data_t *lr, int value);",
          "95: DllDef void libraw_set_bright(libraw_data_t *lr, float value);",
          "96: DllDef void libraw_set_highlight(libraw_data_t *lr, int value);",
          "97: DllDef void libraw_set_fbdd_noiserd(libraw_data_t *lr, int value);",
          "98: DllDef int libraw_get_raw_height(libraw_data_t *lr);",
          "99: DllDef int libraw_get_raw_width(libraw_data_t *lr);",
          "100: DllDef int libraw_get_iheight(libraw_data_t *lr);",
          "101: DllDef int libraw_get_iwidth(libraw_data_t *lr);",
          "102: DllDef float libraw_get_cam_mul(libraw_data_t *lr, int index);",
          "103: DllDef float libraw_get_pre_mul(libraw_data_t *lr, int index);",
          "104: DllDef float libraw_get_rgb_cam(libraw_data_t *lr, int index1, int index2);",
          "105: DllDef int libraw_get_color_maximum(libraw_data_t *lr);",
          "107: DllDef libraw_iparams_t *libraw_get_iparams(libraw_data_t *lr);",
          "108: DllDef libraw_lensinfo_t *libraw_get_lensinfo(libraw_data_t *lr);",
          "109: DllDef libraw_imgother_t *libraw_get_imgother(libraw_data_t *lr);",
          "",
          "[Added Lines]",
          "42: extern \"C\"",
          "43: {",
          "45:   DllDef const char *libraw_strerror(int errorcode);",
          "46:   DllDef const char *libraw_strprogress(enum LibRaw_progress);",
          "48:   DllDef libraw_data_t *libraw_init(unsigned int flags);",
          "49:   DllDef int libraw_open_file(libraw_data_t *, const char *);",
          "50:   DllDef int libraw_open_file_ex(libraw_data_t *, const char *, INT64 max_buff_sz);",
          "52:   DllDef int libraw_open_wfile(libraw_data_t *, const wchar_t *);",
          "53:   DllDef int libraw_open_wfile_ex(libraw_data_t *, const wchar_t *, INT64 max_buff_sz);",
          "55:   DllDef int libraw_open_buffer(libraw_data_t *, void *buffer, size_t size);",
          "56:   DllDef int libraw_unpack(libraw_data_t *);",
          "57:   DllDef int libraw_unpack_thumb(libraw_data_t *);",
          "58:   DllDef void libraw_recycle_datastream(libraw_data_t *);",
          "59:   DllDef void libraw_recycle(libraw_data_t *);",
          "60:   DllDef void libraw_close(libraw_data_t *);",
          "61:   DllDef void libraw_subtract_black(libraw_data_t *);",
          "62:   DllDef int libraw_raw2image(libraw_data_t *);",
          "63:   DllDef void libraw_free_image(libraw_data_t *);",
          "65:   DllDef const char *libraw_version();",
          "66:   DllDef int libraw_versionNumber();",
          "68:   DllDef const char **libraw_cameraList();",
          "69:   DllDef int libraw_cameraCount();",
          "72:   DllDef void libraw_set_memerror_handler(libraw_data_t *, memory_callback cb, void *datap);",
          "73:   DllDef void libraw_set_exifparser_handler(libraw_data_t *, exif_parser_callback cb, void *datap);",
          "74:   DllDef void libraw_set_dataerror_handler(libraw_data_t *, data_callback func, void *datap);",
          "75:   DllDef void libraw_set_progress_handler(libraw_data_t *, progress_callback cb, void *datap);",
          "76:   DllDef const char *libraw_unpack_function_name(libraw_data_t *lr);",
          "77:   DllDef int libraw_get_decoder_info(libraw_data_t *lr, libraw_decoder_info_t *d);",
          "78:   DllDef int libraw_COLOR(libraw_data_t *, int row, int col);",
          "79:   DllDef unsigned libraw_capabilities();",
          "82:   DllDef int libraw_adjust_sizes_info_only(libraw_data_t *);",
          "83:   DllDef int libraw_dcraw_ppm_tiff_writer(libraw_data_t *lr, const char *filename);",
          "84:   DllDef int libraw_dcraw_thumb_writer(libraw_data_t *lr, const char *fname);",
          "85:   DllDef int libraw_dcraw_process(libraw_data_t *lr);",
          "86:   DllDef libraw_processed_image_t *libraw_dcraw_make_mem_image(libraw_data_t *lr, int *errc);",
          "87:   DllDef libraw_processed_image_t *libraw_dcraw_make_mem_thumb(libraw_data_t *lr, int *errc);",
          "88:   DllDef void libraw_dcraw_clear_mem(libraw_processed_image_t *);",
          "90:   DllDef void libraw_set_demosaic(libraw_data_t *lr, int value);",
          "91:   DllDef void libraw_set_output_color(libraw_data_t *lr, int value);",
          "92:   DllDef void libraw_set_user_mul(libraw_data_t *lr, int index, float val);",
          "93:   DllDef void libraw_set_output_bps(libraw_data_t *lr, int value);",
          "94:   DllDef void libraw_set_gamma(libraw_data_t *lr, int index, float value);",
          "95:   DllDef void libraw_set_no_auto_bright(libraw_data_t *lr, int value);",
          "96:   DllDef void libraw_set_bright(libraw_data_t *lr, float value);",
          "97:   DllDef void libraw_set_highlight(libraw_data_t *lr, int value);",
          "98:   DllDef void libraw_set_fbdd_noiserd(libraw_data_t *lr, int value);",
          "99:   DllDef int libraw_get_raw_height(libraw_data_t *lr);",
          "100:   DllDef int libraw_get_raw_width(libraw_data_t *lr);",
          "101:   DllDef int libraw_get_iheight(libraw_data_t *lr);",
          "102:   DllDef int libraw_get_iwidth(libraw_data_t *lr);",
          "103:   DllDef float libraw_get_cam_mul(libraw_data_t *lr, int index);",
          "104:   DllDef float libraw_get_pre_mul(libraw_data_t *lr, int index);",
          "105:   DllDef float libraw_get_rgb_cam(libraw_data_t *lr, int index1, int index2);",
          "106:   DllDef int libraw_get_color_maximum(libraw_data_t *lr);",
          "108:   DllDef libraw_iparams_t *libraw_get_iparams(libraw_data_t *lr);",
          "109:   DllDef libraw_lensinfo_t *libraw_get_lensinfo(libraw_data_t *lr);",
          "110:   DllDef libraw_imgother_t *libraw_get_imgother(libraw_data_t *lr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:   int COLOR(int row, int col)",
          "206:   {",
          "209:     return libraw_internal_data.internal_output_params.fuji_width ? FCF(row, col) : FC(row, col);",
          "210:   }",
          "",
          "[Removed Lines]",
          "207:     if(!imgdata.idata.filters) return 6; // Special value 0+1+2+3",
          "208:     if(imgdata.idata.filters < 1000) return fcol(row,col);",
          "",
          "[Added Lines]",
          "208:     if (!imgdata.idata.filters)",
          "209:       return 6; // Special value 0+1+2+3",
          "210:     if (imgdata.idata.filters < 1000)",
          "211:       return fcol(row, col);",
          "",
          "---------------"
        ],
        "libraw/libraw_types.h||libraw/libraw_types.h": [
          "File: libraw/libraw_types.h -> libraw/libraw_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #endif",
          "72: #ifdef __cplusplus",
          "74: #endif",
          "76: #if defined(USE_LCMS)",
          "",
          "[Removed Lines]",
          "73: extern \"C\" {",
          "",
          "[Added Lines]",
          "73: extern \"C\"",
          "74: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: #include \"libraw_version.h\"",
          "87: #ifdef WIN32",
          "90: #else",
          "91: typedef long long INT64;",
          "92: typedef unsigned long long UINT64;",
          "93: #endif",
          "98: #ifdef WIN32",
          "99: #ifdef LIBRAW_NODLL",
          "",
          "[Removed Lines]",
          "88: typedef __int64 INT64;",
          "89: typedef unsigned __int64 UINT64;",
          "95: typedef unsigned char uchar;",
          "96: typedef unsigned short ushort;",
          "",
          "[Added Lines]",
          "89:   typedef __int64 INT64;",
          "90:   typedef unsigned __int64 UINT64;",
          "96:   typedef unsigned char uchar;",
          "97:   typedef unsigned short ushort;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: #define DllDef",
          "110: #endif",
          "678: #ifdef __cplusplus",
          "679: }",
          "",
          "[Removed Lines]",
          "112: typedef struct",
          "113: {",
          "114:   const char *decoder_name;",
          "115:   unsigned decoder_flags;",
          "116: } libraw_decoder_info_t;",
          "118: typedef struct",
          "119: {",
          "120:   unsigned mix_green;",
          "121:   unsigned raw_color;",
          "122:   unsigned zero_is_bad;",
          "123:   ushort shrink;",
          "124:   ushort fuji_width;",
          "125: } libraw_internal_output_params_t;",
          "127: typedef void (*memory_callback)(void *data, const char *file, const char *where);",
          "128: typedef void (*exif_parser_callback)(void *context, int tag, int type, int len, unsigned int ord, void *ifp);",
          "130: DllDef void default_memory_callback(void *data, const char *file, const char *where);",
          "132: typedef void (*data_callback)(void *data, const char *file, const int offset);",
          "134: DllDef void default_data_callback(void *data, const char *file, const int offset);",
          "136: typedef int (*progress_callback)(void *data, enum LibRaw_progress stage, int iteration, int expected);",
          "138: typedef struct",
          "139: {",
          "140:   memory_callback mem_cb;",
          "141:   void *memcb_data;",
          "143:   data_callback data_cb;",
          "144:   void *datacb_data;",
          "146:   progress_callback progress_cb;",
          "147:   void *progresscb_data;",
          "149:   exif_parser_callback exif_cb;",
          "150:   void *exifparser_data;",
          "151: } libraw_callbacks_t;",
          "153: typedef struct",
          "154: {",
          "155:   enum LibRaw_image_formats type;",
          "156:   ushort height, width, colors, bits;",
          "157:   unsigned int data_size;",
          "158:   unsigned char data[1];",
          "159: } libraw_processed_image_t;",
          "161: typedef struct",
          "162: {",
          "163:   char guard[4];",
          "164:   char make[64];",
          "165:   char model[64];",
          "166:   char software[64];",
          "167:   unsigned raw_count;",
          "168:   unsigned dng_version;",
          "169:   unsigned is_foveon;",
          "170:   int colors;",
          "171:   unsigned filters;",
          "172:   char xtrans[6][6];",
          "173:   char xtrans_abs[6][6];",
          "174:   char cdesc[5];",
          "175:   unsigned xmplen;",
          "176:   char *xmpdata;",
          "178: } libraw_iparams_t;",
          "180: typedef struct",
          "181: {",
          "182:   ushort raw_height, raw_width, height, width, top_margin, left_margin;",
          "183:   ushort iheight, iwidth;",
          "184:   unsigned raw_pitch;",
          "185:   double pixel_aspect;",
          "186:   int flip;",
          "187:   int mask[8][4];",
          "188: } libraw_image_sizes_t;",
          "190: struct ph1_t",
          "191: {",
          "192:   int format, key_off, tag_21a;",
          "193:   int t_black, split_col, black_col, split_row, black_row;",
          "194:   float tag_210;",
          "195: };",
          "197: typedef struct",
          "198: {",
          "199:   unsigned parsedfields;",
          "200:   ushort illuminant;",
          "201:   float calibration[4][4];",
          "202:   float colormatrix[4][3];",
          "203:   float forwardmatrix[3][4];",
          "204: } libraw_dng_color_t;",
          "206: typedef struct",
          "207: {",
          "208:   unsigned parsedfields;",
          "209:   unsigned dng_cblack[4102];",
          "210:   unsigned dng_black;",
          "211:   unsigned dng_whitelevel[4];",
          "213:   unsigned preview_colorspace;",
          "214:   float analogbalance[4];",
          "215: } libraw_dng_levels_t;",
          "217: typedef struct",
          "218: {",
          "219:   float romm_cam[9];",
          "220: } libraw_P1_color_t;",
          "222: typedef struct",
          "223: {",
          "224:   int CanonColorDataVer;",
          "225:   int CanonColorDataSubVer;",
          "226:   int SpecularWhiteLevel;",
          "227:   int ChannelBlackLevel[4];",
          "228:   int AverageBlackLevel;",
          "230:   unsigned int multishot[4];",
          "232:   short MeteringMode;",
          "233:   short SpotMeteringMode;",
          "234:   uchar FlashMeteringMode;",
          "235:   short FlashExposureLock;",
          "236:   short ExposureMode;",
          "237:   short AESetting;",
          "238:   uchar HighlightTonePriority;",
          "240:   short ImageStabilization;",
          "242:   short FocusMode;",
          "243:   short AFPoint;",
          "244:   short FocusContinuous;",
          "245:   short AFPointsInFocus30D;",
          "246:   uchar AFPointsInFocus1D[8];",
          "249:   ushort AFAreaMode;",
          "250:   ushort NumAFPoints;",
          "251:   ushort ValidAFPoints;",
          "252:   ushort AFImageWidth;",
          "253:   ushort AFImageHeight;",
          "260:   ushort PrimaryAFPoint;",
          "262:   short FlashMode;",
          "263:   short FlashActivity;",
          "264:   short FlashBits;",
          "265:   short ManualFlashOutput;",
          "266:   short FlashOutput;",
          "267:   short FlashGuideNumber;",
          "269:   short ContinuousDrive;",
          "271:   short SensorWidth;",
          "272:   short SensorHeight;",
          "273:   short SensorLeftBorder;",
          "274:   short SensorTopBorder;",
          "275:   short SensorRightBorder;",
          "276:   short SensorBottomBorder;",
          "277:   short BlackMaskLeftBorder;",
          "278:   short BlackMaskTopBorder;",
          "279:   short BlackMaskRightBorder;",
          "280:   short BlackMaskBottomBorder;",
          "282: } libraw_canon_makernotes_t;",
          "284: typedef struct",
          "285: {",
          "286:   int BaseISO;",
          "287:   double Gain;",
          "288: } libraw_hasselblad_makernotes_t;",
          "290: typedef struct",
          "291: {",
          "292:   float FujiExpoMidPointShift;",
          "293:   ushort FujiDynamicRange;",
          "294:   ushort FujiFilmMode;",
          "295:   ushort FujiDynamicRangeSetting;",
          "296:   ushort FujiDevelopmentDynamicRange;",
          "297:   ushort FujiAutoDynamicRange;",
          "298:   ushort FocusMode;",
          "299:   ushort AFMode;",
          "300:   ushort FocusPixel[2];",
          "301:   ushort ImageStabilization[3];",
          "302:   ushort FlashMode;",
          "303:   ushort WB_Preset;",
          "304:   ushort ShutterType;",
          "305:   ushort ExrMode;",
          "306:   ushort Macro;",
          "307:   unsigned Rating;",
          "308:   ushort FrameRate;",
          "309:   ushort FrameWidth;",
          "310:   ushort FrameHeight;",
          "311: } libraw_fuji_info_t;",
          "313: typedef struct",
          "314: {",
          "316:   double ExposureBracketValue;",
          "317:   ushort ActiveDLighting;",
          "318:   ushort ShootingMode;",
          "320:   uchar ImageStabilization[7];",
          "321:   uchar VibrationReduction;",
          "322:   uchar VRMode;",
          "324:   char FocusMode[7];",
          "325:   uchar AFPoint;",
          "326:   ushort AFPointsInFocus;",
          "327:   uchar ContrastDetectAF;",
          "328:   uchar AFAreaMode;",
          "329:   uchar PhaseDetectAF;",
          "330:   uchar PrimaryAFPoint;",
          "331:   uchar AFPointsUsed[29];",
          "332:   ushort AFImageWidth;",
          "333:   ushort AFImageHeight;",
          "334:   ushort AFAreaXPposition;",
          "335:   ushort AFAreaYPosition;",
          "336:   ushort AFAreaWidth;",
          "337:   ushort AFAreaHeight;",
          "338:   uchar ContrastDetectAFInFocus;",
          "340:   char FlashSetting[13];",
          "341:   char FlashType[20];",
          "342:   uchar FlashExposureCompensation[4];",
          "343:   uchar ExternalFlashExposureComp[4];",
          "344:   uchar FlashExposureBracketValue[4];",
          "345:   uchar FlashMode;",
          "346:   signed char FlashExposureCompensation2;",
          "347:   signed char FlashExposureCompensation3;",
          "348:   signed char FlashExposureCompensation4;",
          "349:   uchar FlashSource;",
          "350:   uchar FlashFirmware[2];",
          "351:   uchar ExternalFlashFlags;",
          "352:   uchar FlashControlCommanderMode;",
          "353:   uchar FlashOutputAndCompensation;",
          "354:   uchar FlashFocalLength;",
          "355:   uchar FlashGNDistance;",
          "356:   uchar FlashGroupControlMode[4];",
          "357:   uchar FlashGroupOutputAndCompensation[4];",
          "358:   uchar FlashColorFilter;",
          "359:   ushort NEFCompression;",
          "360:   int ExposureMode;",
          "361:   int nMEshots;",
          "362:   int MEgainOn;",
          "363:   double ME_WB[4];",
          "364: } libraw_nikon_makernotes_t;",
          "366: typedef struct",
          "367: {",
          "368:   int OlympusCropID;",
          "370:   int OlympusSensorCalibration[2];",
          "371:   ushort FocusMode[2];",
          "372:   ushort AutoFocus;",
          "373:   ushort AFPoint;",
          "374:   unsigned AFAreas[64];",
          "375:   double AFPointSelected[5];",
          "376:   ushort AFResult;",
          "377:   unsigned ImageStabilization;",
          "378:   ushort ColorSpace;",
          "379: } libraw_olympus_makernotes_t;",
          "381: typedef struct",
          "382: {",
          "383:   ushort FocusMode;",
          "384:   uchar AFPointMode;",
          "385:   ushort AFPointSelected[2];",
          "386:   unsigned AFPointsInFocus;",
          "387:   uchar DriveMode[4];",
          "388:   uchar SRResult;",
          "389:   uchar ShakeReduction;",
          "390: } libraw_pentax_makernotes_t;",
          "392: typedef struct",
          "393: {",
          "394:   ushort SonyCameraType;",
          "395: } libraw_sony_info_t;",
          "397: typedef struct",
          "398: {",
          "399:   ushort curve[0x10000];",
          "400:   unsigned cblack[4102];",
          "401:   unsigned black;",
          "402:   unsigned data_maximum;",
          "403:   unsigned maximum;",
          "404:   long linear_max[4];",
          "405:   float fmaximum;",
          "406:   float fnorm;",
          "407:   ushort white[8][8];",
          "408:   float cam_mul[4];",
          "409:   float pre_mul[4];",
          "410:   float cmatrix[3][4];",
          "411:   float ccm[3][4];",
          "412:   float rgb_cam[3][4];",
          "413:   float cam_xyz[4][3];",
          "414:   struct ph1_t phase_one_data;",
          "415:   float flash_used;",
          "416:   float canon_ev;",
          "417:   char model2[64];",
          "418:   char UniqueCameraModel[64];",
          "419:   char LocalizedCameraModel[64];",
          "420:   void *profile;",
          "421:   unsigned profile_length;",
          "422:   unsigned black_stat[8];",
          "423:   libraw_dng_color_t dng_color[2];",
          "424:   libraw_dng_levels_t dng_levels;",
          "425:   float baseline_exposure;",
          "428:   libraw_P1_color_t P1_color[2];",
          "429: } libraw_colordata_t;",
          "431: typedef struct",
          "432: {",
          "433:   enum LibRaw_thumbnail_formats tformat;",
          "434:   ushort twidth, theight;",
          "435:   unsigned tlength;",
          "436:   int tcolors;",
          "437:   char *thumb;",
          "438: } libraw_thumbnail_t;",
          "440: typedef struct",
          "441: {",
          "445:   float altitude;",
          "446:   char altref, latref, longref, gpsstatus;",
          "447:   char gpsparsed;",
          "448: } libraw_gps_info_t;",
          "450: typedef struct",
          "451: {",
          "452:   float iso_speed;",
          "453:   float shutter;",
          "454:   float aperture;",
          "455:   float focal_len;",
          "456:   time_t timestamp;",
          "457:   unsigned shot_order;",
          "458:   unsigned gpsdata[32];",
          "459:   libraw_gps_info_t parsed_gps;",
          "460:   char desc[512], artist[64];",
          "461:   float FlashEC;",
          "462:   float FlashGN;",
          "463:   float CameraTemperature;",
          "464:   float SensorTemperature;",
          "465:   float SensorTemperature2;",
          "466:   float LensTemperature;",
          "467:   float AmbientTemperature;",
          "468:   float BatteryTemperature;",
          "469:   float exifAmbientTemperature;",
          "470:   float exifHumidity;",
          "471:   float exifPressure;",
          "472:   float exifWaterDepth;",
          "473:   float exifAcceleration;",
          "474:   float exifCameraElevationAngle;",
          "475: } libraw_imgother_t;",
          "477: typedef struct",
          "478: {",
          "503:   int user_cblack[4];",
          "507:   float auto_bright_thr;",
          "508:   float adjust_maximum_thr;",
          "511:   int green_matching;",
          "513:   int dcb_iterations;",
          "514:   int dcb_enhance_fl;",
          "515:   int fbdd_noiserd;",
          "516:   int exp_correc;",
          "517:   float exp_shift;",
          "518:   float exp_preser;",
          "520:   int use_rawspeed;",
          "522:   int use_dngsdk;",
          "524:   int no_auto_scale;",
          "526:   int no_interpolation;",
          "530:   unsigned raw_processing_options;",
          "531:   int sony_arw2_posterization_thr;",
          "533:   float coolscan_nef_gamma;",
          "534:   char p4shot_order[5];",
          "536:   char **custom_camera_strings;",
          "537: } libraw_output_params_t;",
          "539: typedef struct",
          "540: {",
          "542:   void *raw_alloc;",
          "544:   ushort *raw_image;",
          "546:   ushort (*color4_image)[4];",
          "548:   ushort (*color3_image)[3];",
          "550:   float *float_image;",
          "552:   float (*float3_image)[3];",
          "554:   float (*float4_image)[4];",
          "557:   short (*ph1_cblack)[2];",
          "558:   short (*ph1_rblack)[2];",
          "560:   libraw_iparams_t iparams;",
          "561:   libraw_image_sizes_t sizes;",
          "562:   libraw_internal_output_params_t ioparams;",
          "563:   libraw_colordata_t color;",
          "564: } libraw_rawdata_t;",
          "566: typedef struct",
          "567: {",
          "568:   unsigned long long LensID;",
          "569:   char Lens[128];",
          "572:   unsigned long long CamID;",
          "575:   char body[64];",
          "577:   char LensFeatures_pre[16], LensFeatures_suf[16];",
          "578:   float MinFocal, MaxFocal;",
          "579:   float MaxAp4MinFocal, MaxAp4MaxFocal, MinAp4MinFocal, MinAp4MaxFocal;",
          "580:   float MaxAp, MinAp;",
          "581:   float CurFocal, CurAp;",
          "582:   float MaxAp4CurFocal, MinAp4CurFocal;",
          "583:   float MinFocusDistance;",
          "584:   float FocusRangeIndex;",
          "585:   float LensFStops;",
          "586:   unsigned long long TeleconverterID;",
          "587:   char Teleconverter[128];",
          "588:   unsigned long long AdapterID;",
          "589:   char Adapter[128];",
          "590:   unsigned long long AttachmentID;",
          "591:   char Attachment[128];",
          "592:   ushort CanonFocalUnits;",
          "593:   float FocalLengthIn35mmFormat;",
          "594: } libraw_makernotes_lens_t;",
          "596: typedef struct",
          "597: {",
          "598:   float NikonEffectiveMaxAp;",
          "599:   uchar NikonLensIDNumber, NikonLensFStops, NikonMCUVersion, NikonLensType;",
          "600: } libraw_nikonlens_t;",
          "602: typedef struct",
          "603: {",
          "604:   float MinFocal, MaxFocal, MaxAp4MinFocal, MaxAp4MaxFocal;",
          "605: } libraw_dnglens_t;",
          "607: typedef struct",
          "608: {",
          "609:   float MinFocal, MaxFocal, MaxAp4MinFocal, MaxAp4MaxFocal, EXIF_MaxAp;",
          "610:   char LensMake[128], Lens[128], LensSerial[128], InternalLensSerial[128];",
          "611:   ushort FocalLengthIn35mmFormat;",
          "612:   libraw_nikonlens_t nikon;",
          "613:   libraw_dnglens_t dng;",
          "614:   libraw_makernotes_lens_t makernotes;",
          "615: } libraw_lensinfo_t;",
          "617: typedef struct",
          "618: {",
          "619:   libraw_canon_makernotes_t canon;",
          "620:   libraw_nikon_makernotes_t nikon;",
          "621:   libraw_hasselblad_makernotes_t hasselblad;",
          "622:   libraw_fuji_info_t fuji;",
          "623:   libraw_olympus_makernotes_t olympus;",
          "624:   libraw_sony_info_t sony;",
          "625: } libraw_makernotes_t;",
          "627: typedef struct",
          "628: {",
          "629:   short DriveMode;",
          "630:   short FocusMode;",
          "631:   short MeteringMode;",
          "632:   short AFPoint;",
          "633:   short ExposureMode;",
          "634:   short ImageStabilization;",
          "635:   char BodySerial[64];",
          "637: } libraw_shootinginfo_t;",
          "639: typedef struct",
          "640: {",
          "641:   unsigned fsize;",
          "642:   ushort rw, rh;",
          "643:   uchar lm, tm, rm, bm, lf, cf, max, flags;",
          "644:   char t_make[10], t_model[20];",
          "645:   ushort offset;",
          "646: } libraw_custom_camera_t;",
          "648: typedef struct",
          "649: {",
          "650:   ushort (*image)[4];",
          "651:   libraw_image_sizes_t sizes;",
          "652:   libraw_iparams_t idata;",
          "653:   libraw_lensinfo_t lens;",
          "654:   libraw_makernotes_t makernotes;",
          "655:   libraw_shootinginfo_t shootinginfo;",
          "656:   libraw_output_params_t params;",
          "657:   unsigned int progress_flags;",
          "658:   unsigned int process_warnings;",
          "659:   libraw_colordata_t color;",
          "660:   libraw_imgother_t other;",
          "661:   libraw_thumbnail_t thumbnail;",
          "662:   libraw_rawdata_t rawdata;",
          "663:   void *parent_class;",
          "664: } libraw_data_t;",
          "666: struct fuji_compressed_params",
          "667: {",
          "670:   int max_bits;",
          "671:   int min_value;",
          "672:   int raw_bits;",
          "673:   int total_values;",
          "674:   int maxDiff;",
          "675:   ushort line_width;",
          "676: };",
          "",
          "[Added Lines]",
          "113:   typedef struct",
          "114:   {",
          "115:     const char *decoder_name;",
          "116:     unsigned decoder_flags;",
          "117:   } libraw_decoder_info_t;",
          "119:   typedef struct",
          "120:   {",
          "121:     unsigned mix_green;",
          "122:     unsigned raw_color;",
          "123:     unsigned zero_is_bad;",
          "124:     ushort shrink;",
          "125:     ushort fuji_width;",
          "126:   } libraw_internal_output_params_t;",
          "128:   typedef void (*memory_callback)(void *data, const char *file, const char *where);",
          "129:   typedef void (*exif_parser_callback)(void *context, int tag, int type, int len, unsigned int ord, void *ifp);",
          "131:   DllDef void default_memory_callback(void *data, const char *file, const char *where);",
          "133:   typedef void (*data_callback)(void *data, const char *file, const int offset);",
          "135:   DllDef void default_data_callback(void *data, const char *file, const int offset);",
          "137:   typedef int (*progress_callback)(void *data, enum LibRaw_progress stage, int iteration, int expected);",
          "139:   typedef struct",
          "140:   {",
          "141:     memory_callback mem_cb;",
          "142:     void *memcb_data;",
          "144:     data_callback data_cb;",
          "145:     void *datacb_data;",
          "147:     progress_callback progress_cb;",
          "148:     void *progresscb_data;",
          "150:     exif_parser_callback exif_cb;",
          "151:     void *exifparser_data;",
          "152:   } libraw_callbacks_t;",
          "154:   typedef struct",
          "155:   {",
          "156:     enum LibRaw_image_formats type;",
          "157:     ushort height, width, colors, bits;",
          "158:     unsigned int data_size;",
          "159:     unsigned char data[1];",
          "160:   } libraw_processed_image_t;",
          "162:   typedef struct",
          "163:   {",
          "164:     char guard[4];",
          "165:     char make[64];",
          "166:     char model[64];",
          "167:     char software[64];",
          "168:     unsigned raw_count;",
          "169:     unsigned dng_version;",
          "170:     unsigned is_foveon;",
          "171:     int colors;",
          "172:     unsigned filters;",
          "173:     char xtrans[6][6];",
          "174:     char xtrans_abs[6][6];",
          "175:     char cdesc[5];",
          "176:     unsigned xmplen;",
          "177:     char *xmpdata;",
          "179:   } libraw_iparams_t;",
          "181:   typedef struct",
          "182:   {",
          "183:     ushort raw_height, raw_width, height, width, top_margin, left_margin;",
          "184:     ushort iheight, iwidth;",
          "185:     unsigned raw_pitch;",
          "186:     double pixel_aspect;",
          "187:     int flip;",
          "188:     int mask[8][4];",
          "189:   } libraw_image_sizes_t;",
          "191:   struct ph1_t",
          "192:   {",
          "193:     int format, key_off, tag_21a;",
          "194:     int t_black, split_col, black_col, split_row, black_row;",
          "195:     float tag_210;",
          "196:   };",
          "198:   typedef struct",
          "199:   {",
          "200:     unsigned parsedfields;",
          "201:     ushort illuminant;",
          "202:     float calibration[4][4];",
          "203:     float colormatrix[4][3];",
          "204:     float forwardmatrix[3][4];",
          "205:   } libraw_dng_color_t;",
          "207:   typedef struct",
          "208:   {",
          "209:     unsigned parsedfields;",
          "210:     unsigned dng_cblack[4102];",
          "211:     unsigned dng_black;",
          "212:     unsigned dng_whitelevel[4];",
          "214:     unsigned preview_colorspace;",
          "215:     float analogbalance[4];",
          "216:   } libraw_dng_levels_t;",
          "218:   typedef struct",
          "219:   {",
          "220:     float romm_cam[9];",
          "221:   } libraw_P1_color_t;",
          "223:   typedef struct",
          "224:   {",
          "225:     int CanonColorDataVer;",
          "226:     int CanonColorDataSubVer;",
          "227:     int SpecularWhiteLevel;",
          "228:     int ChannelBlackLevel[4];",
          "229:     int AverageBlackLevel;",
          "231:     unsigned int multishot[4];",
          "233:     short MeteringMode;",
          "234:     short SpotMeteringMode;",
          "235:     uchar FlashMeteringMode;",
          "236:     short FlashExposureLock;",
          "237:     short ExposureMode;",
          "238:     short AESetting;",
          "239:     uchar HighlightTonePriority;",
          "241:     short ImageStabilization;",
          "243:     short FocusMode;",
          "244:     short AFPoint;",
          "245:     short FocusContinuous;",
          "246:     short AFPointsInFocus30D;",
          "247:     uchar AFPointsInFocus1D[8];",
          "250:     ushort AFAreaMode;",
          "251:     ushort NumAFPoints;",
          "252:     ushort ValidAFPoints;",
          "253:     ushort AFImageWidth;",
          "254:     ushort AFImageHeight;",
          "261:     ushort PrimaryAFPoint;",
          "263:     short FlashMode;",
          "264:     short FlashActivity;",
          "265:     short FlashBits;",
          "266:     short ManualFlashOutput;",
          "267:     short FlashOutput;",
          "268:     short FlashGuideNumber;",
          "270:     short ContinuousDrive;",
          "272:     short SensorWidth;",
          "273:     short SensorHeight;",
          "274:     short SensorLeftBorder;",
          "275:     short SensorTopBorder;",
          "276:     short SensorRightBorder;",
          "277:     short SensorBottomBorder;",
          "278:     short BlackMaskLeftBorder;",
          "279:     short BlackMaskTopBorder;",
          "280:     short BlackMaskRightBorder;",
          "281:     short BlackMaskBottomBorder;",
          "283:   } libraw_canon_makernotes_t;",
          "285:   typedef struct",
          "286:   {",
          "287:     int BaseISO;",
          "288:     double Gain;",
          "289:   } libraw_hasselblad_makernotes_t;",
          "291:   typedef struct",
          "292:   {",
          "293:     float FujiExpoMidPointShift;",
          "294:     ushort FujiDynamicRange;",
          "295:     ushort FujiFilmMode;",
          "296:     ushort FujiDynamicRangeSetting;",
          "297:     ushort FujiDevelopmentDynamicRange;",
          "298:     ushort FujiAutoDynamicRange;",
          "299:     ushort FocusMode;",
          "300:     ushort AFMode;",
          "301:     ushort FocusPixel[2];",
          "302:     ushort ImageStabilization[3];",
          "303:     ushort FlashMode;",
          "304:     ushort WB_Preset;",
          "305:     ushort ShutterType;",
          "306:     ushort ExrMode;",
          "307:     ushort Macro;",
          "308:     unsigned Rating;",
          "309:     ushort FrameRate;",
          "310:     ushort FrameWidth;",
          "311:     ushort FrameHeight;",
          "312:   } libraw_fuji_info_t;",
          "314:   typedef struct",
          "315:   {",
          "317:     double ExposureBracketValue;",
          "318:     ushort ActiveDLighting;",
          "319:     ushort ShootingMode;",
          "321:     uchar ImageStabilization[7];",
          "322:     uchar VibrationReduction;",
          "323:     uchar VRMode;",
          "325:     char FocusMode[7];",
          "326:     uchar AFPoint;",
          "327:     ushort AFPointsInFocus;",
          "328:     uchar ContrastDetectAF;",
          "329:     uchar AFAreaMode;",
          "330:     uchar PhaseDetectAF;",
          "331:     uchar PrimaryAFPoint;",
          "332:     uchar AFPointsUsed[29];",
          "333:     ushort AFImageWidth;",
          "334:     ushort AFImageHeight;",
          "335:     ushort AFAreaXPposition;",
          "336:     ushort AFAreaYPosition;",
          "337:     ushort AFAreaWidth;",
          "338:     ushort AFAreaHeight;",
          "339:     uchar ContrastDetectAFInFocus;",
          "341:     char FlashSetting[13];",
          "342:     char FlashType[20];",
          "343:     uchar FlashExposureCompensation[4];",
          "344:     uchar ExternalFlashExposureComp[4];",
          "345:     uchar FlashExposureBracketValue[4];",
          "346:     uchar FlashMode;",
          "347:     signed char FlashExposureCompensation2;",
          "348:     signed char FlashExposureCompensation3;",
          "349:     signed char FlashExposureCompensation4;",
          "350:     uchar FlashSource;",
          "351:     uchar FlashFirmware[2];",
          "352:     uchar ExternalFlashFlags;",
          "353:     uchar FlashControlCommanderMode;",
          "354:     uchar FlashOutputAndCompensation;",
          "355:     uchar FlashFocalLength;",
          "356:     uchar FlashGNDistance;",
          "357:     uchar FlashGroupControlMode[4];",
          "358:     uchar FlashGroupOutputAndCompensation[4];",
          "359:     uchar FlashColorFilter;",
          "360:     ushort NEFCompression;",
          "361:     int ExposureMode;",
          "362:     int nMEshots;",
          "363:     int MEgainOn;",
          "364:     double ME_WB[4];",
          "365:   } libraw_nikon_makernotes_t;",
          "367:   typedef struct",
          "368:   {",
          "369:     int OlympusCropID;",
          "371:     int OlympusSensorCalibration[2];",
          "372:     ushort FocusMode[2];",
          "373:     ushort AutoFocus;",
          "374:     ushort AFPoint;",
          "375:     unsigned AFAreas[64];",
          "376:     double AFPointSelected[5];",
          "377:     ushort AFResult;",
          "378:     unsigned ImageStabilization;",
          "379:     ushort ColorSpace;",
          "380:   } libraw_olympus_makernotes_t;",
          "382:   typedef struct",
          "383:   {",
          "384:     ushort FocusMode;",
          "385:     uchar AFPointMode;",
          "386:     ushort AFPointSelected[2];",
          "387:     unsigned AFPointsInFocus;",
          "388:     uchar DriveMode[4];",
          "389:     uchar SRResult;",
          "390:     uchar ShakeReduction;",
          "391:   } libraw_pentax_makernotes_t;",
          "393:   typedef struct",
          "394:   {",
          "395:     ushort SonyCameraType;",
          "396:   } libraw_sony_info_t;",
          "398:   typedef struct",
          "399:   {",
          "400:     ushort curve[0x10000];",
          "401:     unsigned cblack[4102];",
          "402:     unsigned black;",
          "403:     unsigned data_maximum;",
          "404:     unsigned maximum;",
          "405:     long linear_max[4];",
          "406:     float fmaximum;",
          "407:     float fnorm;",
          "408:     ushort white[8][8];",
          "409:     float cam_mul[4];",
          "410:     float pre_mul[4];",
          "411:     float cmatrix[3][4];",
          "412:     float ccm[3][4];",
          "413:     float rgb_cam[3][4];",
          "414:     float cam_xyz[4][3];",
          "415:     struct ph1_t phase_one_data;",
          "416:     float flash_used;",
          "417:     float canon_ev;",
          "418:     char model2[64];",
          "419:     char UniqueCameraModel[64];",
          "420:     char LocalizedCameraModel[64];",
          "421:     void *profile;",
          "422:     unsigned profile_length;",
          "423:     unsigned black_stat[8];",
          "424:     libraw_dng_color_t dng_color[2];",
          "425:     libraw_dng_levels_t dng_levels;",
          "426:     float baseline_exposure;",
          "429:     libraw_P1_color_t P1_color[2];",
          "430:   } libraw_colordata_t;",
          "432:   typedef struct",
          "433:   {",
          "434:     enum LibRaw_thumbnail_formats tformat;",
          "435:     ushort twidth, theight;",
          "436:     unsigned tlength;",
          "437:     int tcolors;",
          "438:     char *thumb;",
          "439:   } libraw_thumbnail_t;",
          "441:   typedef struct",
          "442:   {",
          "446:     float altitude;",
          "447:     char altref, latref, longref, gpsstatus;",
          "448:     char gpsparsed;",
          "449:   } libraw_gps_info_t;",
          "451:   typedef struct",
          "452:   {",
          "453:     float iso_speed;",
          "454:     float shutter;",
          "455:     float aperture;",
          "456:     float focal_len;",
          "457:     time_t timestamp;",
          "458:     unsigned shot_order;",
          "459:     unsigned gpsdata[32];",
          "460:     libraw_gps_info_t parsed_gps;",
          "461:     char desc[512], artist[64];",
          "462:     float FlashEC;",
          "463:     float FlashGN;",
          "464:     float CameraTemperature;",
          "465:     float SensorTemperature;",
          "466:     float SensorTemperature2;",
          "467:     float LensTemperature;",
          "468:     float AmbientTemperature;",
          "469:     float BatteryTemperature;",
          "470:     float exifAmbientTemperature;",
          "471:     float exifHumidity;",
          "472:     float exifPressure;",
          "473:     float exifWaterDepth;",
          "474:     float exifAcceleration;",
          "475:     float exifCameraElevationAngle;",
          "476:   } libraw_imgother_t;",
          "478:   typedef struct",
          "479:   {",
          "504:     int user_cblack[4];",
          "508:     float auto_bright_thr;",
          "509:     float adjust_maximum_thr;",
          "512:     int green_matching;",
          "514:     int dcb_iterations;",
          "515:     int dcb_enhance_fl;",
          "516:     int fbdd_noiserd;",
          "517:     int exp_correc;",
          "518:     float exp_shift;",
          "519:     float exp_preser;",
          "521:     int use_rawspeed;",
          "523:     int use_dngsdk;",
          "525:     int no_auto_scale;",
          "527:     int no_interpolation;",
          "531:     unsigned raw_processing_options;",
          "532:     int sony_arw2_posterization_thr;",
          "534:     float coolscan_nef_gamma;",
          "535:     char p4shot_order[5];",
          "537:     char **custom_camera_strings;",
          "538:   } libraw_output_params_t;",
          "540:   typedef struct",
          "541:   {",
          "543:     void *raw_alloc;",
          "545:     ushort *raw_image;",
          "547:     ushort (*color4_image)[4];",
          "549:     ushort (*color3_image)[3];",
          "551:     float *float_image;",
          "553:     float (*float3_image)[3];",
          "555:     float (*float4_image)[4];",
          "558:     short (*ph1_cblack)[2];",
          "559:     short (*ph1_rblack)[2];",
          "561:     libraw_iparams_t iparams;",
          "562:     libraw_image_sizes_t sizes;",
          "563:     libraw_internal_output_params_t ioparams;",
          "564:     libraw_colordata_t color;",
          "565:   } libraw_rawdata_t;",
          "567:   typedef struct",
          "568:   {",
          "569:     unsigned long long LensID;",
          "570:     char Lens[128];",
          "573:     unsigned long long CamID;",
          "576:     char body[64];",
          "578:     char LensFeatures_pre[16], LensFeatures_suf[16];",
          "579:     float MinFocal, MaxFocal;",
          "580:     float MaxAp4MinFocal, MaxAp4MaxFocal, MinAp4MinFocal, MinAp4MaxFocal;",
          "581:     float MaxAp, MinAp;",
          "582:     float CurFocal, CurAp;",
          "583:     float MaxAp4CurFocal, MinAp4CurFocal;",
          "584:     float MinFocusDistance;",
          "585:     float FocusRangeIndex;",
          "586:     float LensFStops;",
          "587:     unsigned long long TeleconverterID;",
          "588:     char Teleconverter[128];",
          "589:     unsigned long long AdapterID;",
          "590:     char Adapter[128];",
          "591:     unsigned long long AttachmentID;",
          "592:     char Attachment[128];",
          "593:     ushort CanonFocalUnits;",
          "594:     float FocalLengthIn35mmFormat;",
          "595:   } libraw_makernotes_lens_t;",
          "597:   typedef struct",
          "598:   {",
          "599:     float NikonEffectiveMaxAp;",
          "600:     uchar NikonLensIDNumber, NikonLensFStops, NikonMCUVersion, NikonLensType;",
          "601:   } libraw_nikonlens_t;",
          "603:   typedef struct",
          "604:   {",
          "605:     float MinFocal, MaxFocal, MaxAp4MinFocal, MaxAp4MaxFocal;",
          "606:   } libraw_dnglens_t;",
          "608:   typedef struct",
          "609:   {",
          "610:     float MinFocal, MaxFocal, MaxAp4MinFocal, MaxAp4MaxFocal, EXIF_MaxAp;",
          "611:     char LensMake[128], Lens[128], LensSerial[128], InternalLensSerial[128];",
          "612:     ushort FocalLengthIn35mmFormat;",
          "613:     libraw_nikonlens_t nikon;",
          "614:     libraw_dnglens_t dng;",
          "615:     libraw_makernotes_lens_t makernotes;",
          "616:   } libraw_lensinfo_t;",
          "618:   typedef struct",
          "619:   {",
          "620:     libraw_canon_makernotes_t canon;",
          "621:     libraw_nikon_makernotes_t nikon;",
          "622:     libraw_hasselblad_makernotes_t hasselblad;",
          "623:     libraw_fuji_info_t fuji;",
          "624:     libraw_olympus_makernotes_t olympus;",
          "625:     libraw_sony_info_t sony;",
          "626:   } libraw_makernotes_t;",
          "628:   typedef struct",
          "629:   {",
          "630:     short DriveMode;",
          "631:     short FocusMode;",
          "632:     short MeteringMode;",
          "633:     short AFPoint;",
          "634:     short ExposureMode;",
          "635:     short ImageStabilization;",
          "636:     char BodySerial[64];",
          "638:   } libraw_shootinginfo_t;",
          "640:   typedef struct",
          "641:   {",
          "642:     unsigned fsize;",
          "643:     ushort rw, rh;",
          "644:     uchar lm, tm, rm, bm, lf, cf, max, flags;",
          "645:     char t_make[10], t_model[20];",
          "646:     ushort offset;",
          "647:   } libraw_custom_camera_t;",
          "649:   typedef struct",
          "650:   {",
          "651:     ushort (*image)[4];",
          "652:     libraw_image_sizes_t sizes;",
          "653:     libraw_iparams_t idata;",
          "654:     libraw_lensinfo_t lens;",
          "655:     libraw_makernotes_t makernotes;",
          "656:     libraw_shootinginfo_t shootinginfo;",
          "657:     libraw_output_params_t params;",
          "658:     unsigned int progress_flags;",
          "659:     unsigned int process_warnings;",
          "660:     libraw_colordata_t color;",
          "661:     libraw_imgother_t other;",
          "662:     libraw_thumbnail_t thumbnail;",
          "663:     libraw_rawdata_t rawdata;",
          "664:     void *parent_class;",
          "665:   } libraw_data_t;",
          "667:   struct fuji_compressed_params",
          "668:   {",
          "671:     int max_bits;",
          "672:     int min_value;",
          "673:     int raw_bits;",
          "674:     int total_values;",
          "675:     int maxDiff;",
          "676:     ushort line_width;",
          "677:   };",
          "",
          "---------------"
        ],
        "samples/dcraw_emu.cpp||samples/dcraw_emu.cpp": [
          "File: samples/dcraw_emu.cpp -> samples/dcraw_emu.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:       {",
          "328:         strncpy(OUT.p4shot_order, argv[arg++], 5);",
          "329:       }",
          "332:         OUT.use_auto_wb = 1;",
          "333:       else",
          "334:         fprintf(stderr, \"Unknown option \\\"%s\\\".\\n\", argv[arg - 1]);",
          "",
          "[Removed Lines]",
          "330:       else",
          "331:           if (!argv[arg - 1][2])",
          "",
          "[Added Lines]",
          "330:       else if (!argv[arg - 1][2])",
          "",
          "---------------"
        ],
        "samples/half_mt_win32.c||samples/half_mt_win32.c": [
          "File: samples/half_mt_win32.c -> samples/half_mt_win32.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:                                            NULL,      // no thread function arguments",
          "191:                                            0,         // default creation flags",
          "192:                                            &ThreadID) // receive thread identifier",
          "194:     {",
          "195:       printf(\"CreateThread error: %d\\n\", GetLastError());",
          "196:       return 1;",
          "",
          "[Removed Lines]",
          "193:                 ))",
          "",
          "[Added Lines]",
          "193:                  ))",
          "",
          "---------------"
        ],
        "samples/raw-identify.cpp||samples/raw-identify.cpp": [
          "File: samples/raw-identify.cpp -> samples/raw-identify.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:       printf(\"%0.1f sec\\n\", P2.shutter);",
          "436:       printf(\"Aperture: f/%0.1f\\n\", P2.aperture);",
          "437:       printf(\"Focal length: %0.1f mm\\n\", P2.focal_len);",
          "446:       printf(\"Flash exposure compensation: %0.2f EV\\n\", P2.FlashEC);",
          "447:       if (C.profile)",
          "448:         printf(\"Embedded ICC profile: yes, %d bytes\\n\", C.profile_length);",
          "",
          "[Removed Lines]",
          "438:       if (P2.exifAmbientTemperature > -273.15f) printf(\"Ambient temperature (exif data): %6.2f\u00b0 C\\n\", P2.exifAmbientTemperature);",
          "439:       if (P2.CameraTemperature > -273.15f) printf(\"Camera temperature: %6.2f\u00b0 C\\n\", P2.CameraTemperature);",
          "440:       if (P2.SensorTemperature > -273.15f) printf(\"Sensor temperature: %6.2f\u00b0 C\\n\", P2.SensorTemperature);",
          "441:       if (P2.SensorTemperature2 > -273.15f) printf(\"Sensor temperature2: %6.2f\u00b0 C\\n\", P2.SensorTemperature2);",
          "442:       if (P2.LensTemperature > -273.15f) printf(\"Lens temperature: %6.2f\u00b0 C\\n\", P2.LensTemperature);",
          "443:       if (P2.AmbientTemperature > -273.15f) printf(\"Ambient temperature: %6.2f\u00b0 C\\n\", P2.AmbientTemperature);",
          "444:       if (P2.BatteryTemperature > -273.15f) printf(\"Battery temperature: %6.2f\u00b0 C\\n\", P2.BatteryTemperature);",
          "445:       if (P2.FlashGN > 1.0f) printf(\"Flash Guide Number: %6.2f\\n\", P2.FlashGN);",
          "",
          "[Added Lines]",
          "438:       if (P2.exifAmbientTemperature > -273.15f)",
          "439:         printf(\"Ambient temperature (exif data): %6.2f\u00b0 C\\n\", P2.exifAmbientTemperature);",
          "440:       if (P2.CameraTemperature > -273.15f)",
          "441:         printf(\"Camera temperature: %6.2f\u00b0 C\\n\", P2.CameraTemperature);",
          "442:       if (P2.SensorTemperature > -273.15f)",
          "443:         printf(\"Sensor temperature: %6.2f\u00b0 C\\n\", P2.SensorTemperature);",
          "444:       if (P2.SensorTemperature2 > -273.15f)",
          "445:         printf(\"Sensor temperature2: %6.2f\u00b0 C\\n\", P2.SensorTemperature2);",
          "446:       if (P2.LensTemperature > -273.15f)",
          "447:         printf(\"Lens temperature: %6.2f\u00b0 C\\n\", P2.LensTemperature);",
          "448:       if (P2.AmbientTemperature > -273.15f)",
          "449:         printf(\"Ambient temperature: %6.2f\u00b0 C\\n\", P2.AmbientTemperature);",
          "450:       if (P2.BatteryTemperature > -273.15f)",
          "451:         printf(\"Battery temperature: %6.2f\u00b0 C\\n\", P2.BatteryTemperature);",
          "452:       if (P2.FlashGN > 1.0f)",
          "453:         printf(\"Flash Guide Number: %6.2f\\n\", P2.FlashGN);",
          "",
          "---------------"
        ],
        "src/libraw_c_api.cpp||src/libraw_c_api.cpp": [
          "File: src/libraw_c_api.cpp -> src/libraw_c_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifdef __cplusplus",
          "25: #include <new>",
          "27: #endif",
          "33:   {",
          "35:   }",
          "37:   {",
          "39:   }",
          "101: #if defined(_WIN32) && !defined(__MINGW32__) && defined(_MSC_VER) && (_MSC_VER > 1310)",
          "117: #endif",
          "223:   {",
          "227:   }",
          "234:   {",
          "238:   }",
          "299: #define MIN(a, b) ((a) < (b) ? (a) : (b))",
          "300: #define MAX(a, b) ((a) > (b) ? (a) : (b))",
          "301: #define LIM(x, min, max) MAX(min, MIN(x, max))",
          "408: #ifdef __cplusplus",
          "409: }",
          "",
          "[Removed Lines]",
          "26: extern \"C\" {",
          "29: libraw_data_t *libraw_init(unsigned int flags)",
          "30: {",
          "31:   LibRaw *ret;",
          "32:   try",
          "34:     ret = new LibRaw(flags);",
          "36:   catch (std::bad_alloc)",
          "38:     return NULL;",
          "40:   return &(ret->imgdata);",
          "41: }",
          "43: unsigned libraw_capabilities() { return LibRaw::capabilities(); }",
          "44: const char *libraw_version() { return LibRaw::version(); }",
          "45: const char *libraw_strprogress(enum LibRaw_progress p) { return LibRaw::strprogress(p); }",
          "46: int libraw_versionNumber() { return LibRaw::versionNumber(); }",
          "47: const char **libraw_cameraList() { return LibRaw::cameraList(); }",
          "48: int libraw_cameraCount() { return LibRaw::cameraCount(); }",
          "49: const char *libraw_unpack_function_name(libraw_data_t *lr)",
          "50: {",
          "51:   if (!lr)",
          "52:     return \"NULL parameter passed\";",
          "53:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "54:   return ip->unpack_function_name();",
          "55: }",
          "57: void libraw_subtract_black(libraw_data_t *lr)",
          "58: {",
          "59:   if (!lr)",
          "60:     return;",
          "61:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "62:   ip->subtract_black();",
          "63: }",
          "65: int libraw_open_file(libraw_data_t *lr, const char *file)",
          "66: {",
          "67:   if (!lr)",
          "68:     return EINVAL;",
          "69:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "70:   return ip->open_file(file);",
          "71: }",
          "73: libraw_iparams_t *libraw_get_iparams(libraw_data_t *lr)",
          "74: {",
          "75:   if (!lr)",
          "76:     return NULL;",
          "77:   return &(lr->idata);",
          "78: }",
          "80: libraw_lensinfo_t *libraw_get_lensinfo(libraw_data_t *lr)",
          "81: {",
          "82:   if (!lr)",
          "83:     return NULL;",
          "84:   return &(lr->lens);",
          "85: }",
          "87: libraw_imgother_t *libraw_get_imgother(libraw_data_t *lr)",
          "88: {",
          "89:   if (!lr)",
          "90:     return NULL;",
          "91:   return &(lr->other);",
          "92: }",
          "94: int libraw_open_file_ex(libraw_data_t *lr, const char *file, INT64 sz)",
          "95: {",
          "96:   if (!lr)",
          "97:     return EINVAL;",
          "98:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "99:   return ip->open_file(file, sz);",
          "100: }",
          "102: int libraw_open_wfile(libraw_data_t *lr, const wchar_t *file)",
          "103: {",
          "104:   if (!lr)",
          "105:     return EINVAL;",
          "106:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "107:   return ip->open_file(file);",
          "108: }",
          "110: int libraw_open_wfile_ex(libraw_data_t *lr, const wchar_t *file, INT64 sz)",
          "111: {",
          "112:   if (!lr)",
          "113:     return EINVAL;",
          "114:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "115:   return ip->open_file(file, sz);",
          "116: }",
          "118: int libraw_open_buffer(libraw_data_t *lr, void *buffer, size_t size)",
          "119: {",
          "120:   if (!lr)",
          "121:     return EINVAL;",
          "122:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "123:   return ip->open_buffer(buffer, size);",
          "124: }",
          "125: int libraw_unpack(libraw_data_t *lr)",
          "126: {",
          "127:   if (!lr)",
          "128:     return EINVAL;",
          "129:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "130:   return ip->unpack();",
          "131: }",
          "132: int libraw_unpack_thumb(libraw_data_t *lr)",
          "133: {",
          "134:   if (!lr)",
          "135:     return EINVAL;",
          "136:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "137:   return ip->unpack_thumb();",
          "138: }",
          "139: void libraw_recycle_datastream(libraw_data_t *lr)",
          "140: {",
          "141:   if (!lr)",
          "142:     return;",
          "143:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "144:   ip->recycle_datastream();",
          "145: }",
          "146: void libraw_recycle(libraw_data_t *lr)",
          "147: {",
          "148:   if (!lr)",
          "149:     return;",
          "150:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "151:   ip->recycle();",
          "152: }",
          "153: void libraw_close(libraw_data_t *lr)",
          "154: {",
          "155:   if (!lr)",
          "156:     return;",
          "157:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "158:   delete ip;",
          "159: }",
          "161: void libraw_set_exifparser_handler(libraw_data_t *lr, exif_parser_callback cb, void *data)",
          "162: {",
          "163:   if (!lr)",
          "164:     return;",
          "165:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "166:   ip->set_exifparser_handler(cb, data);",
          "167: }",
          "169: void libraw_set_memerror_handler(libraw_data_t *lr, memory_callback cb, void *data)",
          "170: {",
          "171:   if (!lr)",
          "172:     return;",
          "173:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "174:   ip->set_memerror_handler(cb, data);",
          "175: }",
          "176: void libraw_set_dataerror_handler(libraw_data_t *lr, data_callback func, void *data)",
          "177: {",
          "178:   if (!lr)",
          "179:     return;",
          "180:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "181:   ip->set_dataerror_handler(func, data);",
          "182: }",
          "183: void libraw_set_progress_handler(libraw_data_t *lr, progress_callback cb, void *data)",
          "184: {",
          "185:   if (!lr)",
          "186:     return;",
          "187:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "188:   ip->set_progress_handler(cb, data);",
          "189: }",
          "192: int libraw_adjust_sizes_info_only(libraw_data_t *lr)",
          "193: {",
          "194:   if (!lr)",
          "195:     return EINVAL;",
          "196:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "197:   return ip->adjust_sizes_info_only();",
          "198: }",
          "199: int libraw_dcraw_ppm_tiff_writer(libraw_data_t *lr, const char *filename)",
          "200: {",
          "201:   if (!lr)",
          "202:     return EINVAL;",
          "203:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "204:   return ip->dcraw_ppm_tiff_writer(filename);",
          "205: }",
          "206: int libraw_dcraw_thumb_writer(libraw_data_t *lr, const char *fname)",
          "207: {",
          "208:   if (!lr)",
          "209:     return EINVAL;",
          "210:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "211:   return ip->dcraw_thumb_writer(fname);",
          "212: }",
          "213: int libraw_dcraw_process(libraw_data_t *lr)",
          "214: {",
          "215:   if (!lr)",
          "216:     return EINVAL;",
          "217:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "218:   return ip->dcraw_process();",
          "219: }",
          "220: libraw_processed_image_t *libraw_dcraw_make_mem_image(libraw_data_t *lr, int *errc)",
          "221: {",
          "222:   if (!lr)",
          "224:     if (errc)",
          "226:     return NULL;",
          "228:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "229:   return ip->dcraw_make_mem_image(errc);",
          "230: }",
          "231: libraw_processed_image_t *libraw_dcraw_make_mem_thumb(libraw_data_t *lr, int *errc)",
          "232: {",
          "233:   if (!lr)",
          "235:     if (errc)",
          "237:     return NULL;",
          "239:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "240:   return ip->dcraw_make_mem_thumb(errc);",
          "241: }",
          "243: void libraw_dcraw_clear_mem(libraw_processed_image_t *p) { LibRaw::dcraw_clear_mem(p); }",
          "245: int libraw_raw2image(libraw_data_t *lr)",
          "246: {",
          "247:   if (!lr)",
          "248:     return EINVAL;",
          "249:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "250:   return ip->raw2image();",
          "251: }",
          "252: void libraw_free_image(libraw_data_t *lr)",
          "253: {",
          "254:   if (!lr)",
          "255:     return;",
          "256:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "257:   ip->free_image();",
          "258: }",
          "259: int libraw_get_decoder_info(libraw_data_t *lr, libraw_decoder_info_t *d)",
          "260: {",
          "261:   if (!lr || !d)",
          "262:     return EINVAL;",
          "263:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "264:   return ip->get_decoder_info(d);",
          "265: }",
          "266: int libraw_COLOR(libraw_data_t *lr, int row, int col)",
          "267: {",
          "268:   if (!lr)",
          "269:     return EINVAL;",
          "270:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "271:   return ip->COLOR(row, col);",
          "272: }",
          "275: DllDef void libraw_set_demosaic(libraw_data_t *lr, int value)",
          "276: {",
          "277:   if (!lr)",
          "278:     return;",
          "279:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "280:   ip->imgdata.params.user_qual = value;",
          "281: }",
          "283: DllDef void libraw_set_output_color(libraw_data_t *lr, int value)",
          "284: {",
          "285:   if (!lr)",
          "286:     return;",
          "287:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "288:   ip->imgdata.params.output_color = value;",
          "289: }",
          "291: DllDef void libraw_set_output_bps(libraw_data_t *lr, int value)",
          "292: {",
          "293:   if (!lr)",
          "294:     return;",
          "295:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "296:   ip->imgdata.params.output_bps = value;",
          "297: }",
          "303: DllDef void libraw_set_user_mul(libraw_data_t *lr, int index, float val)",
          "304: {",
          "305:   if (!lr)",
          "306:     return;",
          "307:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "308:   ip->imgdata.params.user_mul[LIM(index, 0, 3)] = val;",
          "309: }",
          "311: DllDef void libraw_set_gamma(libraw_data_t *lr, int index, float value)",
          "312: {",
          "313:   if (!lr)",
          "314:     return;",
          "315:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "316:   ip->imgdata.params.gamm[LIM(index, 0, 5)] = value;",
          "317: }",
          "319: DllDef void libraw_set_no_auto_bright(libraw_data_t *lr, int value)",
          "320: {",
          "321:   if (!lr)",
          "322:     return;",
          "323:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "324:   ip->imgdata.params.no_auto_bright = value;",
          "325: }",
          "327: DllDef void libraw_set_bright(libraw_data_t *lr, float value)",
          "328: {",
          "329:   if (!lr)",
          "330:     return;",
          "331:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "332:   ip->imgdata.params.bright = value;",
          "333: }",
          "335: DllDef void libraw_set_highlight(libraw_data_t *lr, int value)",
          "336: {",
          "337:   if (!lr)",
          "338:     return;",
          "339:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "340:   ip->imgdata.params.highlight = value;",
          "341: }",
          "343: DllDef void libraw_set_fbdd_noiserd(libraw_data_t *lr, int value)",
          "344: {",
          "345:   if (!lr)",
          "346:     return;",
          "347:   LibRaw *ip = (LibRaw *)lr->parent_class;",
          "348:   ip->imgdata.params.fbdd_noiserd = value;",
          "349: }",
          "351: DllDef int libraw_get_raw_height(libraw_data_t *lr)",
          "352: {",
          "353:   if (!lr)",
          "354:     return EINVAL;",
          "355:   return lr->sizes.raw_height;",
          "356: }",
          "358: DllDef int libraw_get_raw_width(libraw_data_t *lr)",
          "359: {",
          "360:   if (!lr)",
          "361:     return EINVAL;",
          "362:   return lr->sizes.raw_width;",
          "363: }",
          "365: DllDef int libraw_get_iheight(libraw_data_t *lr)",
          "366: {",
          "367:   if (!lr)",
          "368:     return EINVAL;",
          "369:   return lr->sizes.iheight;",
          "370: }",
          "372: DllDef int libraw_get_iwidth(libraw_data_t *lr)",
          "373: {",
          "374:   if (!lr)",
          "375:     return EINVAL;",
          "376:   return lr->sizes.iwidth;",
          "377: }",
          "379: DllDef float libraw_get_cam_mul(libraw_data_t *lr, int index)",
          "380: {",
          "381:   if (!lr)",
          "382:     return EINVAL;",
          "383:   return lr->color.cam_mul[LIM(index, 0, 3)];",
          "384: }",
          "386: DllDef float libraw_get_pre_mul(libraw_data_t *lr, int index)",
          "387: {",
          "388:   if (!lr)",
          "389:     return EINVAL;",
          "390:   return lr->color.pre_mul[LIM(index, 0, 3)];",
          "391: }",
          "393: DllDef float libraw_get_rgb_cam(libraw_data_t *lr, int index1, int index2)",
          "394: {",
          "395:   if (!lr)",
          "396:     return EINVAL;",
          "397:   return lr->color.rgb_cam[LIM(index1, 0, 2)][LIM(index2, 0, 3)];",
          "398: }",
          "400: DllDef int libraw_get_color_maximum(libraw_data_t *lr)",
          "401: {",
          "402:   if (!lr)",
          "403:     return EINVAL;",
          "404:   return lr->color.maximum;",
          "405: }",
          "",
          "[Added Lines]",
          "26: extern \"C\"",
          "27: {",
          "30:   libraw_data_t *libraw_init(unsigned int flags)",
          "32:     LibRaw *ret;",
          "33:     try",
          "34:     {",
          "35:       ret = new LibRaw(flags);",
          "36:     }",
          "37:     catch (std::bad_alloc)",
          "38:     {",
          "39:       return NULL;",
          "40:     }",
          "41:     return &(ret->imgdata);",
          "44:   unsigned libraw_capabilities() { return LibRaw::capabilities(); }",
          "45:   const char *libraw_version() { return LibRaw::version(); }",
          "46:   const char *libraw_strprogress(enum LibRaw_progress p) { return LibRaw::strprogress(p); }",
          "47:   int libraw_versionNumber() { return LibRaw::versionNumber(); }",
          "48:   const char **libraw_cameraList() { return LibRaw::cameraList(); }",
          "49:   int libraw_cameraCount() { return LibRaw::cameraCount(); }",
          "50:   const char *libraw_unpack_function_name(libraw_data_t *lr)",
          "52:     if (!lr)",
          "53:       return \"NULL parameter passed\";",
          "54:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "55:     return ip->unpack_function_name();",
          "58:   void libraw_subtract_black(libraw_data_t *lr)",
          "59:   {",
          "60:     if (!lr)",
          "61:       return;",
          "62:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "63:     ip->subtract_black();",
          "64:   }",
          "66:   int libraw_open_file(libraw_data_t *lr, const char *file)",
          "67:   {",
          "68:     if (!lr)",
          "69:       return EINVAL;",
          "70:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "71:     return ip->open_file(file);",
          "72:   }",
          "74:   libraw_iparams_t *libraw_get_iparams(libraw_data_t *lr)",
          "75:   {",
          "76:     if (!lr)",
          "77:       return NULL;",
          "78:     return &(lr->idata);",
          "79:   }",
          "81:   libraw_lensinfo_t *libraw_get_lensinfo(libraw_data_t *lr)",
          "82:   {",
          "83:     if (!lr)",
          "84:       return NULL;",
          "85:     return &(lr->lens);",
          "86:   }",
          "88:   libraw_imgother_t *libraw_get_imgother(libraw_data_t *lr)",
          "89:   {",
          "90:     if (!lr)",
          "91:       return NULL;",
          "92:     return &(lr->other);",
          "93:   }",
          "95:   int libraw_open_file_ex(libraw_data_t *lr, const char *file, INT64 sz)",
          "96:   {",
          "97:     if (!lr)",
          "98:       return EINVAL;",
          "99:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "100:     return ip->open_file(file, sz);",
          "101:   }",
          "103:   int libraw_open_wfile(libraw_data_t *lr, const wchar_t *file)",
          "104:   {",
          "105:     if (!lr)",
          "106:       return EINVAL;",
          "107:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "108:     return ip->open_file(file);",
          "109:   }",
          "111:   int libraw_open_wfile_ex(libraw_data_t *lr, const wchar_t *file, INT64 sz)",
          "112:   {",
          "113:     if (!lr)",
          "114:       return EINVAL;",
          "115:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "116:     return ip->open_file(file, sz);",
          "117:   }",
          "119:   int libraw_open_buffer(libraw_data_t *lr, void *buffer, size_t size)",
          "120:   {",
          "121:     if (!lr)",
          "122:       return EINVAL;",
          "123:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "124:     return ip->open_buffer(buffer, size);",
          "125:   }",
          "126:   int libraw_unpack(libraw_data_t *lr)",
          "127:   {",
          "128:     if (!lr)",
          "129:       return EINVAL;",
          "130:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "131:     return ip->unpack();",
          "132:   }",
          "133:   int libraw_unpack_thumb(libraw_data_t *lr)",
          "134:   {",
          "135:     if (!lr)",
          "136:       return EINVAL;",
          "137:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "138:     return ip->unpack_thumb();",
          "139:   }",
          "140:   void libraw_recycle_datastream(libraw_data_t *lr)",
          "141:   {",
          "142:     if (!lr)",
          "143:       return;",
          "144:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "145:     ip->recycle_datastream();",
          "146:   }",
          "147:   void libraw_recycle(libraw_data_t *lr)",
          "148:   {",
          "149:     if (!lr)",
          "150:       return;",
          "151:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "152:     ip->recycle();",
          "153:   }",
          "154:   void libraw_close(libraw_data_t *lr)",
          "155:   {",
          "156:     if (!lr)",
          "157:       return;",
          "158:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "159:     delete ip;",
          "160:   }",
          "162:   void libraw_set_exifparser_handler(libraw_data_t *lr, exif_parser_callback cb, void *data)",
          "163:   {",
          "164:     if (!lr)",
          "165:       return;",
          "166:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "167:     ip->set_exifparser_handler(cb, data);",
          "168:   }",
          "170:   void libraw_set_memerror_handler(libraw_data_t *lr, memory_callback cb, void *data)",
          "171:   {",
          "172:     if (!lr)",
          "173:       return;",
          "174:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "175:     ip->set_memerror_handler(cb, data);",
          "176:   }",
          "177:   void libraw_set_dataerror_handler(libraw_data_t *lr, data_callback func, void *data)",
          "178:   {",
          "179:     if (!lr)",
          "180:       return;",
          "181:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "182:     ip->set_dataerror_handler(func, data);",
          "183:   }",
          "184:   void libraw_set_progress_handler(libraw_data_t *lr, progress_callback cb, void *data)",
          "185:   {",
          "186:     if (!lr)",
          "187:       return;",
          "188:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "189:     ip->set_progress_handler(cb, data);",
          "190:   }",
          "193:   int libraw_adjust_sizes_info_only(libraw_data_t *lr)",
          "195:     if (!lr)",
          "196:       return EINVAL;",
          "197:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "198:     return ip->adjust_sizes_info_only();",
          "200:   int libraw_dcraw_ppm_tiff_writer(libraw_data_t *lr, const char *filename)",
          "202:     if (!lr)",
          "203:       return EINVAL;",
          "204:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "205:     return ip->dcraw_ppm_tiff_writer(filename);",
          "206:   }",
          "207:   int libraw_dcraw_thumb_writer(libraw_data_t *lr, const char *fname)",
          "208:   {",
          "209:     if (!lr)",
          "210:       return EINVAL;",
          "211:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "212:     return ip->dcraw_thumb_writer(fname);",
          "213:   }",
          "214:   int libraw_dcraw_process(libraw_data_t *lr)",
          "215:   {",
          "216:     if (!lr)",
          "217:       return EINVAL;",
          "218:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "219:     return ip->dcraw_process();",
          "220:   }",
          "221:   libraw_processed_image_t *libraw_dcraw_make_mem_image(libraw_data_t *lr, int *errc)",
          "222:   {",
          "223:     if (!lr)",
          "224:     {",
          "225:       if (errc)",
          "227:       return NULL;",
          "228:     }",
          "229:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "230:     return ip->dcraw_make_mem_image(errc);",
          "231:   }",
          "232:   libraw_processed_image_t *libraw_dcraw_make_mem_thumb(libraw_data_t *lr, int *errc)",
          "233:   {",
          "234:     if (!lr)",
          "235:     {",
          "236:       if (errc)",
          "238:       return NULL;",
          "239:     }",
          "240:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "241:     return ip->dcraw_make_mem_thumb(errc);",
          "244:   void libraw_dcraw_clear_mem(libraw_processed_image_t *p) { LibRaw::dcraw_clear_mem(p); }",
          "246:   int libraw_raw2image(libraw_data_t *lr)",
          "247:   {",
          "248:     if (!lr)",
          "249:       return EINVAL;",
          "250:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "251:     return ip->raw2image();",
          "252:   }",
          "253:   void libraw_free_image(libraw_data_t *lr)",
          "254:   {",
          "255:     if (!lr)",
          "256:       return;",
          "257:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "258:     ip->free_image();",
          "259:   }",
          "260:   int libraw_get_decoder_info(libraw_data_t *lr, libraw_decoder_info_t *d)",
          "261:   {",
          "262:     if (!lr || !d)",
          "263:       return EINVAL;",
          "264:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "265:     return ip->get_decoder_info(d);",
          "266:   }",
          "267:   int libraw_COLOR(libraw_data_t *lr, int row, int col)",
          "268:   {",
          "269:     if (!lr)",
          "270:       return EINVAL;",
          "271:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "272:     return ip->COLOR(row, col);",
          "273:   }",
          "276:   DllDef void libraw_set_demosaic(libraw_data_t *lr, int value)",
          "277:   {",
          "278:     if (!lr)",
          "279:       return;",
          "280:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "281:     ip->imgdata.params.user_qual = value;",
          "282:   }",
          "284:   DllDef void libraw_set_output_color(libraw_data_t *lr, int value)",
          "285:   {",
          "286:     if (!lr)",
          "287:       return;",
          "288:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "289:     ip->imgdata.params.output_color = value;",
          "290:   }",
          "292:   DllDef void libraw_set_output_bps(libraw_data_t *lr, int value)",
          "293:   {",
          "294:     if (!lr)",
          "295:       return;",
          "296:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "297:     ip->imgdata.params.output_bps = value;",
          "298:   }",
          "304:   DllDef void libraw_set_user_mul(libraw_data_t *lr, int index, float val)",
          "305:   {",
          "306:     if (!lr)",
          "307:       return;",
          "308:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "309:     ip->imgdata.params.user_mul[LIM(index, 0, 3)] = val;",
          "310:   }",
          "312:   DllDef void libraw_set_gamma(libraw_data_t *lr, int index, float value)",
          "313:   {",
          "314:     if (!lr)",
          "315:       return;",
          "316:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "317:     ip->imgdata.params.gamm[LIM(index, 0, 5)] = value;",
          "318:   }",
          "320:   DllDef void libraw_set_no_auto_bright(libraw_data_t *lr, int value)",
          "321:   {",
          "322:     if (!lr)",
          "323:       return;",
          "324:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "325:     ip->imgdata.params.no_auto_bright = value;",
          "326:   }",
          "328:   DllDef void libraw_set_bright(libraw_data_t *lr, float value)",
          "329:   {",
          "330:     if (!lr)",
          "331:       return;",
          "332:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "333:     ip->imgdata.params.bright = value;",
          "334:   }",
          "336:   DllDef void libraw_set_highlight(libraw_data_t *lr, int value)",
          "337:   {",
          "338:     if (!lr)",
          "339:       return;",
          "340:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "341:     ip->imgdata.params.highlight = value;",
          "342:   }",
          "344:   DllDef void libraw_set_fbdd_noiserd(libraw_data_t *lr, int value)",
          "345:   {",
          "346:     if (!lr)",
          "347:       return;",
          "348:     LibRaw *ip = (LibRaw *)lr->parent_class;",
          "349:     ip->imgdata.params.fbdd_noiserd = value;",
          "350:   }",
          "352:   DllDef int libraw_get_raw_height(libraw_data_t *lr)",
          "353:   {",
          "354:     if (!lr)",
          "355:       return EINVAL;",
          "356:     return lr->sizes.raw_height;",
          "357:   }",
          "359:   DllDef int libraw_get_raw_width(libraw_data_t *lr)",
          "360:   {",
          "361:     if (!lr)",
          "362:       return EINVAL;",
          "363:     return lr->sizes.raw_width;",
          "364:   }",
          "366:   DllDef int libraw_get_iheight(libraw_data_t *lr)",
          "367:   {",
          "368:     if (!lr)",
          "369:       return EINVAL;",
          "370:     return lr->sizes.iheight;",
          "371:   }",
          "373:   DllDef int libraw_get_iwidth(libraw_data_t *lr)",
          "374:   {",
          "375:     if (!lr)",
          "376:       return EINVAL;",
          "377:     return lr->sizes.iwidth;",
          "378:   }",
          "380:   DllDef float libraw_get_cam_mul(libraw_data_t *lr, int index)",
          "381:   {",
          "382:     if (!lr)",
          "383:       return EINVAL;",
          "384:     return lr->color.cam_mul[LIM(index, 0, 3)];",
          "385:   }",
          "387:   DllDef float libraw_get_pre_mul(libraw_data_t *lr, int index)",
          "388:   {",
          "389:     if (!lr)",
          "390:       return EINVAL;",
          "391:     return lr->color.pre_mul[LIM(index, 0, 3)];",
          "392:   }",
          "394:   DllDef float libraw_get_rgb_cam(libraw_data_t *lr, int index1, int index2)",
          "395:   {",
          "396:     if (!lr)",
          "397:       return EINVAL;",
          "398:     return lr->color.rgb_cam[LIM(index1, 0, 2)][LIM(index2, 0, 3)];",
          "399:   }",
          "401:   DllDef int libraw_get_color_maximum(libraw_data_t *lr)",
          "402:   {",
          "403:     if (!lr)",
          "404:       return EINVAL;",
          "405:     return lr->color.maximum;",
          "406:   }",
          "",
          "---------------"
        ],
        "src/libraw_cxx.cpp||src/libraw_cxx.cpp": [
          "File: src/libraw_cxx.cpp -> src/libraw_cxx.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #include \"libraw_fuji_compressed.cpp\"",
          "57: #ifdef __cplusplus",
          "61: {",
          "105:   }",
          "108: #ifdef __cplusplus",
          "109: }",
          "",
          "[Removed Lines]",
          "58: extern \"C\" {",
          "59: #endif",
          "60: void default_memory_callback(void *, const char *file, const char *where)",
          "62:   fprintf(stderr, \"%s: Out of memory in %s\\n\", file ? file : \"unknown file\", where);",
          "63: }",
          "65: void default_data_callback(void *, const char *file, const int offset)",
          "66: {",
          "67:   if (offset < 0)",
          "68:     fprintf(stderr, \"%s: Unexpected end of file\\n\", file ? file : \"unknown file\");",
          "69:   else",
          "70:     fprintf(stderr, \"%s: data corrupted at %d\\n\", file ? file : \"unknown file\", offset);",
          "71: }",
          "72: const char *libraw_strerror(int e)",
          "73: {",
          "74:   enum LibRaw_errors errorcode = (LibRaw_errors)e;",
          "75:   switch (errorcode)",
          "76:   {",
          "77:   case LIBRAW_SUCCESS:",
          "78:     return \"No error\";",
          "79:   case LIBRAW_UNSPECIFIED_ERROR:",
          "80:     return \"Unspecified error\";",
          "81:   case LIBRAW_FILE_UNSUPPORTED:",
          "82:     return \"Unsupported file format or not RAW file\";",
          "83:   case LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE:",
          "84:     return \"Request for nonexisting image number\";",
          "85:   case LIBRAW_OUT_OF_ORDER_CALL:",
          "86:     return \"Out of order call of libraw function\";",
          "87:   case LIBRAW_NO_THUMBNAIL:",
          "88:     return \"No thumbnail in file\";",
          "89:   case LIBRAW_UNSUPPORTED_THUMBNAIL:",
          "90:     return \"Unsupported thumbnail format\";",
          "91:   case LIBRAW_INPUT_CLOSED:",
          "92:     return \"No input stream, or input stream closed\";",
          "93:   case LIBRAW_UNSUFFICIENT_MEMORY:",
          "94:     return \"Unsufficient memory\";",
          "95:   case LIBRAW_DATA_ERROR:",
          "96:     return \"Corrupted data or unexpected EOF\";",
          "97:   case LIBRAW_IO_ERROR:",
          "98:     return \"Input/output error\";",
          "99:   case LIBRAW_CANCELLED_BY_CALLBACK:",
          "100:     return \"Cancelled by user callback\";",
          "101:   case LIBRAW_BAD_CROP:",
          "102:     return \"Bad crop box\";",
          "103:   default:",
          "104:     return \"Unknown error code\";",
          "106: }",
          "",
          "[Added Lines]",
          "58: extern \"C\"",
          "60: #endif",
          "61:   void default_memory_callback(void *, const char *file, const char *where)",
          "62:   {",
          "63:     fprintf(stderr, \"%s: Out of memory in %s\\n\", file ? file : \"unknown file\", where);",
          "64:   }",
          "66:   void default_data_callback(void *, const char *file, const int offset)",
          "67:   {",
          "68:     if (offset < 0)",
          "69:       fprintf(stderr, \"%s: Unexpected end of file\\n\", file ? file : \"unknown file\");",
          "70:     else",
          "71:       fprintf(stderr, \"%s: data corrupted at %d\\n\", file ? file : \"unknown file\", offset);",
          "72:   }",
          "73:   const char *libraw_strerror(int e)",
          "74:   {",
          "75:     enum LibRaw_errors errorcode = (LibRaw_errors)e;",
          "76:     switch (errorcode)",
          "77:     {",
          "78:     case LIBRAW_SUCCESS:",
          "79:       return \"No error\";",
          "80:     case LIBRAW_UNSPECIFIED_ERROR:",
          "81:       return \"Unspecified error\";",
          "82:     case LIBRAW_FILE_UNSUPPORTED:",
          "83:       return \"Unsupported file format or not RAW file\";",
          "84:     case LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE:",
          "85:       return \"Request for nonexisting image number\";",
          "86:     case LIBRAW_OUT_OF_ORDER_CALL:",
          "87:       return \"Out of order call of libraw function\";",
          "88:     case LIBRAW_NO_THUMBNAIL:",
          "89:       return \"No thumbnail in file\";",
          "90:     case LIBRAW_UNSUPPORTED_THUMBNAIL:",
          "91:       return \"Unsupported thumbnail format\";",
          "92:     case LIBRAW_INPUT_CLOSED:",
          "93:       return \"No input stream, or input stream closed\";",
          "94:     case LIBRAW_UNSUFFICIENT_MEMORY:",
          "95:       return \"Unsufficient memory\";",
          "96:     case LIBRAW_DATA_ERROR:",
          "97:       return \"Corrupted data or unexpected EOF\";",
          "98:     case LIBRAW_IO_ERROR:",
          "99:       return \"Input/output error\";",
          "100:     case LIBRAW_CANCELLED_BY_CALLBACK:",
          "101:       return \"Cancelled by user callback\";",
          "102:     case LIBRAW_BAD_CROP:",
          "103:       return \"Bad crop box\";",
          "104:     default:",
          "105:       return \"Unknown error code\";",
          "106:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281: }",
          "283: int LibRaw::is_sraw() { return load_raw == &LibRaw::canon_sraw_load_raw || load_raw == &LibRaw::nikon_load_sraw; }",
          "285: int LibRaw::is_coolscan_nef() { return load_raw == &LibRaw::nikon_coolscan_load_raw; }",
          "288: int LibRaw::is_nikon_sraw() { return load_raw == &LibRaw::nikon_load_sraw; }",
          "289: int LibRaw::sraw_midpoint()",
          "",
          "[Removed Lines]",
          "284: int LibRaw::is_panasonic_16x10() { return load_raw == &LibRaw::panasonic_16x10_load_raw ; }",
          "286: int LibRaw::is_jpeg_thumb() { return  thumb_load_raw == 0 && write_thumb == &LibRaw::jpeg_thumb; }",
          "",
          "[Added Lines]",
          "285: int LibRaw::is_panasonic_16x10() { return load_raw == &LibRaw::panasonic_16x10_load_raw; }",
          "287: int LibRaw::is_jpeg_thumb() { return thumb_load_raw == 0 && write_thumb == &LibRaw::jpeg_thumb; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1689:   {",
          "1690:     int row, col;",
          "1691:   } _move[4] = {",
          "1693:   };",
          "1695:   int tidx = 0;",
          "",
          "[Removed Lines]",
          "1692:       {1, 1}, {0, 1}, {0, 0}, {1, 0},",
          "",
          "[Added Lines]",
          "1693:       {1, 1},",
          "1694:       {0, 1},",
          "1695:       {0, 0},",
          "1696:       {1, 0},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4153:         T.thumb = (char *)malloc(T.tlength);",
          "4154:         merror(T.thumb, \"jpeg_thumb()\");",
          "4155:         ID.input->read(T.thumb, 1, T.tlength);",
          "4157:         tthumb[0] = 0xff;",
          "4158:         tthumb[1] = 0xd8;",
          "4159: #ifdef NO_JPEG",
          "",
          "[Removed Lines]",
          "4156:  unsigned char *tthumb = (unsigned char*)T.thumb;",
          "",
          "[Added Lines]",
          "4160:         unsigned char *tthumb = (unsigned char *)T.thumb;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4714:       green_matching();",
          "4715:     }",
          "4718:     {",
          "4719:       scale_colors();",
          "4720:       SET_PROC_FLAG(LIBRAW_PROGRESS_SCALE_COLORS);",
          "",
          "[Removed Lines]",
          "4717:     if ( !O.no_auto_scale)",
          "",
          "[Added Lines]",
          "4721:     if (!O.no_auto_scale)",
          "",
          "---------------"
        ],
        "src/libraw_fuji_compressed.cpp||src/libraw_fuji_compressed.cpp": [
          "File: src/libraw_fuji_compressed.cpp -> src/libraw_fuji_compressed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "904:   cur_block_width = libraw_internal_data.unpacker_data.fuji_block_width;",
          "905:   if (cur_block + 1 == libraw_internal_data.unpacker_data.fuji_total_blocks)",
          "906:   {",
          "911:   }",
          "913:   struct i_pair",
          "",
          "[Removed Lines]",
          "907:    cur_block_width = imgdata.sizes.raw_width - (libraw_internal_data.unpacker_data.fuji_block_width * cur_block);",
          "909:    cur_block_width = imgdata.sizes.raw_width % libraw_internal_data.unpacker_data.fuji_block_width;",
          "",
          "[Added Lines]",
          "907:     cur_block_width = imgdata.sizes.raw_width - (libraw_internal_data.unpacker_data.fuji_block_width * cur_block);",
          "909:     cur_block_width = imgdata.sizes.raw_width % libraw_internal_data.unpacker_data.fuji_block_width;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026:   h_total_lines = sgetn(2, header + 14);",
          "1033:       h_raw_rounded_width - h_raw_width >= h_block_size || h_block_size != 0x300 || h_blocks_in_row > 0x10 ||",
          "1034:       h_blocks_in_row == 0 || h_blocks_in_row != h_raw_rounded_width / h_block_size || h_total_lines > 0x800 ||",
          "1035:       h_total_lines == 0 || h_total_lines != h_raw_height / 6 || (h_raw_bits != 12 && h_raw_bits != 14) ||",
          "",
          "[Removed Lines]",
          "1029:   if (signature != 0x4953 || version != 1 || h_raw_height > 0x3000 || h_raw_height < 6 || h_raw_height % 6",
          "1030:       || h_block_size < 1  ||",
          "1031:       h_raw_width > 0x3000 || h_raw_width < 0x300 || h_raw_width % 24 || h_raw_rounded_width > 0x3000 ||",
          "1032:       h_raw_rounded_width < h_block_size || h_raw_rounded_width % h_block_size ||",
          "",
          "[Added Lines]",
          "1029:   if (signature != 0x4953 || version != 1 || h_raw_height > 0x3000 || h_raw_height < 6 || h_raw_height % 6 ||",
          "1030:       h_block_size < 1 || h_raw_width > 0x3000 || h_raw_width < 0x300 || h_raw_width % 24 ||",
          "1031:       h_raw_rounded_width > 0x3000 || h_raw_rounded_width < h_block_size || h_raw_rounded_width % h_block_size ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39426f3c2c9744ca3cedf57d2ca95fbb46eeae6c",
      "candidate_info": {
        "commit_hash": "39426f3c2c9744ca3cedf57d2ca95fbb46eeae6c",
        "repo": "LibRaw/LibRaw",
        "commit_url": "https://github.com/LibRaw/LibRaw/commit/39426f3c2c9744ca3cedf57d2ca95fbb46eeae6c",
        "files": [
          "dcraw/dcraw.c",
          "internal/dcraw_common.cpp"
        ],
        "message": "5563e6ddc3f7cb93d98b491194ceebdee7288d36 merged",
        "before_after_code_files": [
          "dcraw/dcraw.c||dcraw/dcraw.c",
          "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ],
          "candidate": [
            "dcraw/dcraw.c||dcraw/dcraw.c",
            "internal/dcraw_common.cpp||internal/dcraw_common.cpp"
          ]
        }
      },
      "candidate_diff": {
        "dcraw/dcraw.c||dcraw/dcraw.c": [
          "File: dcraw/dcraw.c -> dcraw/dcraw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6194: #endif",
          "6196: #ifdef LIBRAW_LIBRARY_BUILD",
          "6198:   for (row = 0; row < 6; row++)",
          "6199:          for (col = 0; col < 6; col++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6197:   if(width < TS || height < TS)",
          "6198:          throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6202:   if(cstat[0] < 6 || cstat[0]>10 || cstat[1]< 16",
          "6203:     || cstat[1]>24 || cstat[2]< 6 || cstat[2]>10 || cstat[3])",
          "6204:          throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "6208:   cielab (0,0);",
          "6209:   ndir = 4 << (passes > 1);",
          "",
          "[Removed Lines]",
          "6205: #endif",
          "",
          "[Added Lines]",
          "6210:  for(int i = 0; i < 3; i++)",
          "6211:   for(int j = 0; j < 3; j++)",
          "6212:    for(int k = 0; k < 2; k++)",
          "6213:     for(int l = 0; l < 8; l++)",
          "6214:      allhex[i][j][k][l]=32700;",
          "6215: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6214:   drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));",
          "6215:   homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));",
          "6218:   for (row=0; row < 3; row++)",
          "6219:     for (col=0; col < 3; col++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6226:   int minv=0,maxv=0,minh=0,maxh=0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6224:  if (ng == g+1) FORC(8) {",
          "6225:    v = orth[d  ]*patt[g][c*2] + orth[d+1]*patt[g][c*2+1];",
          "6226:    h = orth[d+2]*patt[g][c*2] + orth[d+3]*patt[g][c*2+1];",
          "6227:    allhex[row][col][0][c^(g*2 & d)] = h + v*width;",
          "6228:    allhex[row][col][1][c^(g*2 & d)] = h + v*TS;",
          "6229:  }",
          "6230:       }",
          "6233:   for (row=2; row < height-2; row++)",
          "6234:     for (min=~(max=0), col=2; col < width-2; col++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6237:           minv=MIN(v,minv);",
          "6238:           maxv=MAX(v,maxv);",
          "6239:           minh=MIN(v,minh);",
          "6240:           maxh=MAX(v,maxh);",
          "6246: #ifdef LIBRAW_LIBRARY_BUILD",
          "6248:   for(int i = 0; i < 3; i++)",
          "6249:     for(int j = 0; j < 3; j++)",
          "6250:       for(int k = 0; k < 2; k++)",
          "6251:         for(int l = 0; l < 8; l++)",
          "6252:          if(allhex[i][j][k][l]>maxh+maxv*width+1 || allhex[i][j][k][l]<minh+minv*width-1)",
          "6253:          throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "6254:   int retrycount = 0;",
          "6255: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6244:       pix[0][3] = max;",
          "6245:       switch ((row-sgrow) % 3) {",
          "6246:  case 1: if (row < height-3) { row++; col--; } break;",
          "6248:       }",
          "6249:     }",
          "",
          "[Removed Lines]",
          "6247:  case 2: if ((min=~(max=0)) && (col+=2) < width-3 && row > 2) row--;",
          "",
          "[Added Lines]",
          "6272:  case 2:",
          "6273:   if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)",
          "6274:         {",
          "6275:            row--;",
          "6276: #ifdef LIBRAW_LIBRARY_BUILD",
          "6277:          if(retrycount++ > width*height)",
          "6278:                throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "6279: #endif",
          "6280:        }",
          "",
          "---------------"
        ],
        "internal/dcraw_common.cpp||internal/dcraw_common.cpp": [
          "File: internal/dcraw_common.cpp -> internal/dcraw_common.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5016: #endif",
          "5018: #ifdef LIBRAW_LIBRARY_BUILD",
          "5020:   for (row = 0; row < 6; row++)",
          "5021:          for (col = 0; col < 6; col++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5019:   if(width < TS || height < TS)",
          "5020:          throw LIBRAW_EXCEPTION_IO_CORRUPT; // too small image",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5024:   if(cstat[0] < 6 || cstat[0]>10 || cstat[1]< 16",
          "5025:     || cstat[1]>24 || cstat[2]< 6 || cstat[2]>10 || cstat[3])",
          "5026:          throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5030:   cielab (0,0);",
          "5031:   ndir = 4 << (passes > 1);",
          "",
          "[Removed Lines]",
          "5027: #endif",
          "",
          "[Added Lines]",
          "5032:  for(int i = 0; i < 3; i++)",
          "5033:   for(int j = 0; j < 3; j++)",
          "5034:    for(int k = 0; k < 2; k++)",
          "5035:     for(int l = 0; l < 8; l++)",
          "5036:      allhex[i][j][k][l]=32700;",
          "5037: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5036:   drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));",
          "5037:   homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));",
          "5040:   for (row=0; row < 3; row++)",
          "5041:     for (col=0; col < 3; col++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5048:   int minv=0,maxv=0,minh=0,maxh=0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5046:  if (ng == g+1) FORC(8) {",
          "5047:    v = orth[d  ]*patt[g][c*2] + orth[d+1]*patt[g][c*2+1];",
          "5048:    h = orth[d+2]*patt[g][c*2] + orth[d+3]*patt[g][c*2+1];",
          "5049:    allhex[row][col][0][c^(g*2 & d)] = h + v*width;",
          "5050:    allhex[row][col][1][c^(g*2 & d)] = h + v*TS;",
          "5051:  }",
          "5052:       }",
          "5055:   for (row=2; row < height-2; row++)",
          "5056:     for (min=~(max=0), col=2; col < width-2; col++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5059:           minv=MIN(v,minv);",
          "5060:           maxv=MAX(v,maxv);",
          "5061:           minh=MIN(v,minh);",
          "5062:           maxh=MAX(v,maxh);",
          "5068: #ifdef LIBRAW_LIBRARY_BUILD",
          "5070:   for(int i = 0; i < 3; i++)",
          "5071:     for(int j = 0; j < 3; j++)",
          "5072:       for(int k = 0; k < 2; k++)",
          "5073:         for(int l = 0; l < 8; l++)",
          "5074:          if(allhex[i][j][k][l]>maxh+maxv*width+1 || allhex[i][j][k][l]<minh+minv*width-1)",
          "5075:          throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5076:   int retrycount = 0;",
          "5077: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5066:       pix[0][3] = max;",
          "5067:       switch ((row-sgrow) % 3) {",
          "5068:  case 1: if (row < height-3) { row++; col--; } break;",
          "5070:       }",
          "5071:     }",
          "",
          "[Removed Lines]",
          "5069:  case 2: if ((min=~(max=0)) && (col+=2) < width-3 && row > 2) row--;",
          "",
          "[Added Lines]",
          "5094:  case 2:",
          "5095:   if ((min = ~(max = 0)) && (col += 2) < width - 3 && row > 2)",
          "5096:         {",
          "5097:            row--;",
          "5098: #ifdef LIBRAW_LIBRARY_BUILD",
          "5099:          if(retrycount++ > width*height)",
          "5100:                throw LIBRAW_EXCEPTION_IO_CORRUPT;",
          "5101: #endif",
          "5102:        }",
          "",
          "---------------"
        ]
      }
    }
  ]
}