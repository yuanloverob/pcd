{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
      "candidate_info": {
        "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
        "files": [
          "INSTALL",
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "584:    [], [AC_MSG_ERROR([function required by rpm])])",
          "586: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "583:     utimes getline localtime_r statvfs getaddrinfo ],",
          "",
          "[Added Lines]",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "584:     openat mkdirat fstatat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <inttypes.h>",
          "9: #include <utime.h>",
          "10: #include <errno.h>",
          "11: #if WITH_CAP",
          "12: #include <sys/capability.h>",
          "13: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:     return rc;",
          "407: }",
          "410: {",
          "412:     if (_fsm_debug)",
          "415:         (rc < 0 ? strerror(errno) : \"\"));",
          "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
          "417:     return rc;",
          "418: }",
          "420: static int fsmMkfifo(const char *path, mode_t mode)",
          "421: {",
          "422:     int rc = mkfifo(path, (mode & 07777));",
          "",
          "[Removed Lines]",
          "409: static int fsmMkdir(const char *path, mode_t mode)",
          "411:     int rc = mkdir(path, (mode & 07777));",
          "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
          "414:         path, (unsigned)(mode & 07777),",
          "",
          "[Added Lines]",
          "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
          "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
          "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
          "416:         dirfd, path, (unsigned)(mode & 07777),",
          "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
          "423: {",
          "424:     struct stat lsb, sb;",
          "425:     int sflags = flags | O_NOFOLLOW;",
          "426:     int fd = openat(dirfd, path, sflags);",
          "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
          "435:  int ffd = openat(dirfd, path, flags);",
          "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
          "437:      if (fstat(ffd, &sb) == 0) {",
          "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
          "439:       fd = ffd;",
          "440:   } else {",
          "441:       close(ffd);",
          "442:   }",
          "443:      }",
          "444:  }",
          "445:     }",
          "446:     return fd;",
          "447: }",
          "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
          "450:    int owned, mode_t mode)",
          "451: {",
          "452:     int rc;",
          "453:     rpmFsmOp op = (FA_CREATE);",
          "454:     if (!owned)",
          "455:  op |= FAF_UNOWNED;",
          "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
          "460:     if (!rc)",
          "461:  rc = fsmMkdir(dirfd, dn, mode);",
          "463:     if (!rc) {",
          "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
          "465:     }",
          "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
          "470:     if (!rc) {",
          "471:  rpmlog(RPMLOG_DEBUG,",
          "472:   \"%s directory created with perms %04o\\n\",",
          "473:   dn, (unsigned)(mode & 07777));",
          "474:     }",
          "476:     return rc;",
          "477: }",
          "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
          "480: {",
          "481:     char *path = xstrdup(p);",
          "482:     char *dp = path;",
          "483:     char *sp = NULL, *bn;",
          "484:     int oflags = O_RDONLY;",
          "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
          "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
          "490:  struct stat sb;",
          "491:  fd = fsmOpenat(dirfd, bn, oflags);",
          "493:  if (fd < 0 && errno == ENOENT && create) {",
          "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
          "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
          "497:      }",
          "498:  }",
          "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "501:      close(fd);",
          "502:      errno = ENOTDIR;",
          "503:      fd = -1;",
          "504:  }",
          "506:  close(dirfd);",
          "507:  if (fd >= 0) {",
          "508:      dirfd = fd;",
          "509:  } else {",
          "510:      dirfd = -1;",
          "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "512:     bn, p, strerror(errno));",
          "513:      break;",
          "514:  }",
          "516:  dp = NULL;",
          "517:     }",
          "519:     free(path);",
          "520:     return dirfd;",
          "521: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
          "509:   if (!rc)",
          "512:   if (!rc) {",
          "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
          "",
          "[Removed Lines]",
          "510:       rc = fsmMkdir(dn, mode);",
          "",
          "[Added Lines]",
          "613:       rc = fsmMkdir(-1, dn, mode);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:     }",
          "875: }",
          "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
          "878:               rpmpsm psm, char ** failedFile)",
          "879: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "980: struct diriter_s {",
          "981:     int dirfd;",
          "982: };",
          "984: static int onChdir(rpmfi fi, void *data)",
          "985: {",
          "986:     struct diriter_s *di = data;",
          "988:     if (di->dirfd >= 0) {",
          "989:  close(di->dirfd);",
          "990:  di->dirfd = -1;",
          "991:     }",
          "992:     return 0;",
          "993: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "890:     char *tid = NULL;",
          "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
          "892:     struct filedata_s *firstlink = NULL;",
          "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:     struct diriter_s di = { -1 };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "932:         rc = RPMERR_BAD_MAGIC;",
          "933:         goto exit;",
          "934:     }",
          "937:     if (!rc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "946:      if (!fp->suffix) {",
          "947:   rc = fsmBackup(fi, fp->action);",
          "948:      }",
          "950:      if (!fp->suffix) {",
          "951:   if (fp->action == FA_TOUCH) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070:      if (di.dirfd == -1) {",
          "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
          "1072:         (fp->action == FA_CREATE));",
          "1073:   if (di.dirfd == -1) {",
          "1074:       rc = RPMERR_OPEN_FAILED;",
          "1075:       break;",
          "1076:   }",
          "1077:      }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "980:                     mode_t mode = fp->sb.st_mode;",
          "981:                     mode &= ~07777;",
          "982:                     mode |=  00700;",
          "984:                 }",
          "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
          "986:   if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "983:                     rc = fsmMkdir(fp->fpath, mode);",
          "",
          "[Added Lines]",
          "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1022:  fp->stage = FILE_UNPACK;",
          "1023:     }",
          "1024:     fi = rpmfiFree(fi);",
          "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
          "1027:  rc = fx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1155:     close(di.dirfd);",
          "1156:     di.dirfd = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "014d22c8d6edf2dc0bc76408db58fe59630691bb",
      "candidate_info": {
        "commit_hash": "014d22c8d6edf2dc0bc76408db58fe59630691bb",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/014d22c8d6edf2dc0bc76408db58fe59630691bb",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert fsmRename() to renameat() based operation\n\nAll our renames are (for now at least) within a single directory so\nthe second dirfd is kinda redundant, but shrug...",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "585:    [], [AC_MSG_ERROR([function required by rpm])])",
          "587: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat ],",
          "",
          "[Added Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat \\",
          "585:     renameat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:     return rc;",
          "481: }",
          "484: {",
          "485:     removeSBITS(path);",
          "487: #if defined(ETXTBSY) && defined(__HPUX__)",
          "489:     if (rc && errno == ETXTBSY) {",
          "490:  char *rmpath = NULL;",
          "491:  rstrscat(&rmpath, path, \"-RPMDELETE\", NULL);",
          "494:  free(rmpath);",
          "495:     }",
          "496: #endif",
          "497:     if (_fsm_debug)",
          "500:     if (rc < 0)",
          "501:  rc = (errno == EISDIR ? RPMERR_EXIST_AS_DIR : RPMERR_RENAME_FAILED);",
          "502:     return rc;",
          "",
          "[Removed Lines]",
          "483: static int fsmRename(const char *opath, const char *path)",
          "486:     int rc = rename(opath, path);",
          "492:  rc = rename(path, rmpath);",
          "493:  if (!rc) rc = rename(opath, path);",
          "498:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "499:         opath, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "483: static int fsmRename(int odirfd, const char *opath, int dirfd, const char *path)",
          "486:     int rc = renameat(odirfd, opath, dirfd, path);",
          "493:  rc = renameat(odirfd, path, odirfd, rmpath);",
          "494:  if (!rc) rc = renameat(odirfd, opath, dirfd, path);",
          "499:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d %s) %s\\n\", __func__,",
          "500:         odirfd, opath, dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:     if (S_ISREG(mode)) {",
          "580:  char *rmpath = rstrscat(NULL, path, \"-RPMDELETE\", NULL);",
          "583:  if (!rc)",
          "584:      (void) fsmUnlink(dirfd, rmpath);",
          "",
          "[Removed Lines]",
          "581:  rc = fsmRename(path, rmpath);",
          "",
          "[Added Lines]",
          "582:  rc = fsmRename(dirfd, path, dirfd, rmpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634: {",
          "635:     int rc = 0;",
          "636:     const char *suffix = NULL;",
          "",
          "[Removed Lines]",
          "633: static int fsmBackup(rpmfi fi, rpmFileAction action)",
          "",
          "[Added Lines]",
          "634: static int fsmBackup(int dirfd, rpmfi fi, rpmFileAction action)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "651:     if (suffix) {",
          "652:  char * opath = fsmFsPath(fi, NULL);",
          "653:  char * path = fsmFsPath(fi, suffix);",
          "655:  if (!rc) {",
          "656:      rpmlog(RPMLOG_WARNING, _(\"%s saved as %s\\n\"), opath, path);",
          "657:  }",
          "",
          "[Removed Lines]",
          "654:  rc = fsmRename(opath, path);",
          "",
          "[Added Lines]",
          "655:  rc = fsmRename(dirfd, opath, dirfd, path);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "689:     return rc;",
          "690: }",
          "693: {",
          "694:     int rc = 0;",
          "",
          "[Removed Lines]",
          "692: static int fsmCommit(char **path, rpmfi fi, rpmFileAction action, const char *suffix)",
          "",
          "[Added Lines]",
          "693: static int fsmCommit(int dirfd, char **path, rpmfi fi, rpmFileAction action, const char *suffix)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "705:  if (dest != *path) {",
          "707:      if (!rc) {",
          "708:   if (nsuffix) {",
          "709:       char * opath = fsmFsPath(fi, NULL);",
          "",
          "[Removed Lines]",
          "706:      rc = fsmRename(*path, dest);",
          "",
          "[Added Lines]",
          "707:      rc = fsmRename(dirfd, *path, dirfd, dest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "873:         if (!fp->skip) {",
          "875:      if (!fp->suffix && fp != firstlink) {",
          "877:      }",
          "879:      if (!rc) {",
          "",
          "[Removed Lines]",
          "876:   rc = fsmBackup(fi, fp->action);",
          "",
          "[Added Lines]",
          "877:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "977:      if (!rc && fp->suffix)",
          "980:      if (!rc)",
          "983:      if (!rc)",
          "984:   fp->stage = FILE_COMMIT;",
          "",
          "[Removed Lines]",
          "978:   rc = fsmBackup(fi, fp->action);",
          "981:   rc = fsmCommit(&fp->fpath, fi, fp->action, fp->suffix);",
          "",
          "[Added Lines]",
          "979:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "982:   rc = fsmCommit(di.dirfd, &fp->fpath, fi, fp->action, fp->suffix);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1055:  rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "1056:           fp->sb.st_mode, fp->action);",
          "1061:         if (fp->action == FA_ERASE) {",
          "",
          "[Removed Lines]",
          "1058:  rc = fsmBackup(fi, fp->action);",
          "",
          "[Added Lines]",
          "1059:  rc = fsmBackup(di.dirfd, fi, fp->action);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab8b55aa60af196036897864267d9c205b951277",
      "candidate_info": {
        "commit_hash": "ab8b55aa60af196036897864267d9c205b951277",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ab8b55aa60af196036897864267d9c205b951277",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Extend directory tracking to our entire operation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340: }",
          "342: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create,",
          "344: {",
          "345:     char *path = xstrdup(p);",
          "346:     char *dp = path;",
          "",
          "[Removed Lines]",
          "343:       int *dirfdp)",
          "",
          "[Added Lines]",
          "343:       int quiet, int *dirfdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:  if (fd >= 0) {",
          "375:      dirfd = fd;",
          "376:  } else {",
          "379:      rc = RPMERR_OPEN_FAILED;",
          "380:      break;",
          "381:  }",
          "",
          "[Removed Lines]",
          "377:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "378:     bn, p, strerror(errno));",
          "",
          "[Added Lines]",
          "377:      if (!quiet) {",
          "378:   rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "379:    bn, p, strerror(errno));",
          "380:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "880:      if (!rc) {",
          "881:   rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "883:      }",
          "",
          "[Removed Lines]",
          "882:     (fp->action == FA_CREATE), &di.dirfd);",
          "",
          "[Added Lines]",
          "884:     (fp->action == FA_CREATE), 0, &di.dirfd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "966:  rc = fx;",
          "970:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "971:  struct filedata_s *fp = &fdata[fx];",
          "973:  if (!fp->skip) {",
          "975:      if (!rc && fp->suffix)",
          "976:   rc = fsmBackup(fi, fp->action);",
          "",
          "[Removed Lines]",
          "969:     fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "",
          "[Added Lines]",
          "971:     fi = fsmIter(NULL, files, RPMFI_ITER_FWD, &di);",
          "976:      if (!rc)",
          "977:   rc = ensureDir(NULL, rpmfiDN(fi), 0, 0, 0, &di.dirfd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "988:           fp->sb.st_mode, fp->action, rc);",
          "989:  }",
          "990:     }",
          "994:     if (rc) {",
          "996:  while ((fx = rpmfiNext(fi)) >= 0) {",
          "997:      struct filedata_s *fp = &fdata[fx];",
          "999:      if (fp->stage > FILE_NONE && !fp->skip) {",
          "1000:   (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "1001:      }",
          "",
          "[Removed Lines]",
          "991:     fi = rpmfiFree(fi);",
          "995:  fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "",
          "[Added Lines]",
          "996:     fi = fsmIterFini(fi, &di);",
          "1000:  fi = fsmIter(NULL, files, RPMFI_ITER_BACK, &di);",
          "1005:      if (ensureDir(NULL, rpmfiDN(fi), 0, 0, 1, &di.dirfd))",
          "1006:   continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1006:     rpmswAdd(rpmtsOp(ts, RPMTS_OP_DIGEST), fdOp(payload, FDSTAT_DIGEST));",
          "1008: exit:",
          "1010:     Fclose(payload);",
          "1011:     free(tid);",
          "1012:     for (int i = 0; i < fc; i++)",
          "",
          "[Removed Lines]",
          "1009:     fi = rpmfiFree(fi);",
          "",
          "[Added Lines]",
          "1018:     fi = fsmIterFini(fi, &di);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1020: int rpmPackageFilesRemove(rpmts ts, rpmte te, rpmfiles files,",
          "1021:               rpmpsm psm, char ** failedFile)",
          "1022: {",
          "1024:     rpmfs fs = rpmteGetFileStates(te);",
          "1025:     rpmPlugins plugins = rpmtsPlugins(ts);",
          "1026:     int fc = rpmfilesFC(files);",
          "",
          "[Removed Lines]",
          "1023:     rpmfi fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "",
          "[Added Lines]",
          "1032:     struct diriter_s di = { -1 };",
          "1033:     rpmfi fi = fsmIter(NULL, files, RPMFI_ITER_BACK, &di);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1031:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "1032:  struct filedata_s *fp = &fdata[fx];",
          "1033:  fp->action = rpmfsGetAction(fs, rpmfiFX(fi));",
          "1034:  fp->fpath = fsmFsPath(fi, NULL);",
          "1035:  rc = fsmStat(fp->fpath, 1, &fp->sb);",
          "1037:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045:  if (XFA_SKIPPING(fp->action))",
          "1046:      continue;",
          "1050:  if (ensureDir(NULL, rpmfiDN(fi), 0, 0, 1, &di.dirfd))",
          "1051:      continue;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1040:  rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "1041:           fp->sb.st_mode, fp->action);",
          "1047:         if (fp->action == FA_ERASE) {",
          "",
          "[Removed Lines]",
          "1043:  if (!XFA_SKIPPING(fp->action))",
          "1044:      rc = fsmBackup(fi, fp->action);",
          "",
          "[Added Lines]",
          "1061:  rc = fsmBackup(fi, fp->action);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1098:     for (int i = 0; i < fc; i++)",
          "1099:  free(fdata[i].fpath);",
          "1100:     free(fdata);",
          "1103:     return rc;",
          "1104: }",
          "",
          "[Removed Lines]",
          "1101:     rpmfiFree(fi);",
          "",
          "[Added Lines]",
          "1118:     fsmIterFini(fi, &di);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41edce3d6213878659630b25fc2372035c84ba6c",
      "candidate_info": {
        "commit_hash": "41edce3d6213878659630b25fc2372035c84ba6c",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/41edce3d6213878659630b25fc2372035c84ba6c",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert fsmRemove() and helpers to unlinkat() based operation",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "585:    [], [AC_MSG_ERROR([function required by rpm])])",
          "587: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat ],",
          "",
          "[Added Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     return rc;",
          "254: }",
          "257: {",
          "259:     if (_fsm_debug)",
          "262:     if (rc < 0)",
          "263:  switch (errno) {",
          "264:  case ENOENT:        rc = RPMERR_ENOENT;    break;",
          "",
          "[Removed Lines]",
          "256: static int fsmRmdir(const char *path)",
          "258:     int rc = rmdir(path);",
          "260:  rpmlog(RPMLOG_DEBUG, \" %8s (%s) %s\\n\", __func__,",
          "261:         path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "256: static int fsmRmdir(int dirfd, const char *path)",
          "258:     int rc = unlinkat(dirfd, path, AT_REMOVEDIR);",
          "260:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s) %s\\n\", __func__,",
          "261:         dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:     return rc;",
          "468: }",
          "471: {",
          "472:     int rc = 0;",
          "473:     removeSBITS(path);",
          "475:     if (_fsm_debug)",
          "478:     if (rc < 0)",
          "479:  rc = (errno == ENOENT ? RPMERR_ENOENT : RPMERR_UNLINK_FAILED);",
          "480:     return rc;",
          "",
          "[Removed Lines]",
          "470: static int fsmUnlink(const char *path)",
          "474:     rc = unlink(path);",
          "476:  rpmlog(RPMLOG_DEBUG, \" %8s (%s) %s\\n\", __func__,",
          "477:         path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "470: static int fsmUnlink(int dirfd, const char *path)",
          "474:     rc = unlinkat(dirfd, path, 0);",
          "476:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s) %s\\n\", __func__,",
          "477:         dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:     return rc;",
          "503: }",
          "506: {",
          "508: }",
          "510: static int fsmChown(const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "",
          "[Removed Lines]",
          "505: static int fsmRemove(const char *path, mode_t mode)",
          "507:     return S_ISDIR(mode) ? fsmRmdir(path) : fsmUnlink(path);",
          "",
          "[Added Lines]",
          "505: static int fsmRemove(int dirfd, const char *path, mode_t mode)",
          "507:     return S_ISDIR(mode) ? fsmRmdir(dirfd, path) : fsmUnlink(dirfd, path);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581:  rc = fsmRename(path, rmpath);",
          "583:  if (!rc)",
          "585:  else",
          "586:      rc = RPMERR_UNLINK_FAILED;",
          "587:  free(rmpath);",
          "",
          "[Removed Lines]",
          "584:      (void) fsmUnlink(rmpath);",
          "",
          "[Added Lines]",
          "584:      (void) fsmUnlink(dirfd, rmpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "616:         if (S_ISSOCK(dsb.st_mode)) return 0;",
          "617:     }",
          "620:     if (rc == 0) rc = RPMERR_ENOENT;",
          "622: }",
          "",
          "[Removed Lines]",
          "619:     rc = fsmUnlink(path);",
          "",
          "[Added Lines]",
          "619:     rc = fsmUnlink(dirfd, path);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1003:   continue;",
          "1005:      if (fp->stage > FILE_NONE && !fp->skip) {",
          "1007:      }",
          "1008:  }",
          "1009:     }",
          "",
          "[Removed Lines]",
          "1006:   (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "",
          "[Added Lines]",
          "1006:   (void) fsmRemove(di.dirfd, fp->fpath, fp->sb.st_mode);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1061:         if (fp->action == FA_ERASE) {",
          "1062:      int missingok = (rpmfiFFlags(fi) & (RPMFILE_MISSINGOK | RPMFILE_GHOST));",
          "",
          "[Removed Lines]",
          "1064:      rc = fsmRemove(fp->fpath, fp->sb.st_mode);",
          "",
          "[Added Lines]",
          "1064:      rc = fsmRemove(di.dirfd, fp->fpath, fp->sb.st_mode);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "796552e41590e1aa6b7c88177f1ffc2115b000b7",
      "candidate_info": {
        "commit_hash": "796552e41590e1aa6b7c88177f1ffc2115b000b7",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/796552e41590e1aa6b7c88177f1ffc2115b000b7",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Drop unsafe and now redundant unowned directories creation code\n\nAny unowned directories will be created inline during processing now\nso we can just flush this big pile of code that was insecure anyhow.\n\nAs an additional bonus creating the directories inline gives us an\nopportunity to track the creation so we can undo too, but that is\nnot done here.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     return rstrscat(NULL, rpmfiDN(fi), rpmfiBN(fi), suffix ? suffix : \"\", NULL);",
          "78: }",
          "217: static int fsmLink(const char *opath, const char *path)",
          "218: {",
          "219:     int rc = link(opath, path);",
          "",
          "[Removed Lines]",
          "83: typedef struct dnli_s {",
          "84:     rpmfiles fi;",
          "85:     char * active;",
          "86:     int reverse;",
          "87:     int isave;",
          "88:     int i;",
          "89: } * DNLI_t;",
          "96: static DNLI_t dnlFreeIterator(DNLI_t dnli)",
          "97: {",
          "98:     if (dnli) {",
          "99:  if (dnli->active) free(dnli->active);",
          "100:  free(dnli);",
          "101:     }",
          "102:     return NULL;",
          "103: }",
          "112: static DNLI_t dnlInitIterator(rpmfiles fi, rpmfs fs, int reverse)",
          "113: {",
          "114:     DNLI_t dnli;",
          "115:     int i, j;",
          "116:     int dc;",
          "118:     if (fi == NULL)",
          "119:  return NULL;",
          "120:     dc = rpmfilesDC(fi);",
          "121:     dnli = xcalloc(1, sizeof(*dnli));",
          "122:     dnli->fi = fi;",
          "123:     dnli->reverse = reverse;",
          "124:     dnli->i = (reverse ? dc : 0);",
          "126:     if (dc) {",
          "127:  dnli->active = xcalloc(dc, sizeof(*dnli->active));",
          "128:  int fc = rpmfilesFC(fi);",
          "131:  for (i = 0; i < fc; i++)",
          "132:             if (!XFA_SKIPPING(rpmfsGetAction(fs, i)))",
          "133:   dnli->active[rpmfilesDI(fi, i)] = 1;",
          "136:  for (i = 0; i < fc; i++) {",
          "137:      int dil;",
          "138:      size_t dnlen, bnlen;",
          "140:      if (!S_ISDIR(rpmfilesFMode(fi, i)))",
          "141:   continue;",
          "143:      dil = rpmfilesDI(fi, i);",
          "144:      dnlen = strlen(rpmfilesDN(fi, dil));",
          "145:      bnlen = strlen(rpmfilesBN(fi, i));",
          "147:      for (j = 0; j < dc; j++) {",
          "148:   const char * dnl;",
          "149:   size_t jlen;",
          "151:   if (!dnli->active[j] || j == dil)",
          "152:       continue;",
          "153:   dnl = rpmfilesDN(fi, j);",
          "154:   jlen = strlen(dnl);",
          "155:   if (jlen != (dnlen+bnlen+1))",
          "156:       continue;",
          "157:   if (!rstreqn(dnl, rpmfilesDN(fi, dil), dnlen))",
          "158:       continue;",
          "159:   if (!rstreqn(dnl+dnlen, rpmfilesBN(fi, i), bnlen))",
          "160:       continue;",
          "161:   if (dnl[dnlen+bnlen] != '/' || dnl[dnlen+bnlen+1] != '\\0')",
          "162:       continue;",
          "164:   dnli->active[j] = 0;",
          "165:   break;",
          "166:      }",
          "167:  }",
          "170:  if (!reverse) {",
          "171:      j = 0;",
          "172:      for (i = 0; i < dc; i++) {",
          "173:   if (!dnli->active[i]) continue;",
          "174:   if (j == 0) {",
          "175:       j = 1;",
          "176:       rpmlog(RPMLOG_DEBUG,",
          "177:  \"========== Directories not explicitly included in package:\\n\");",
          "178:   }",
          "179:   rpmlog(RPMLOG_DEBUG, \"%10d %s\\n\", i, rpmfilesDN(fi, i));",
          "180:      }",
          "181:      if (j)",
          "182:   rpmlog(RPMLOG_DEBUG, \"==========\\n\");",
          "183:  }",
          "184:     }",
          "185:     return dnli;",
          "186: }",
          "193: static",
          "194: const char * dnlNextIterator(DNLI_t dnli)",
          "195: {",
          "196:     const char * dn = NULL;",
          "198:     if (dnli) {",
          "199:  rpmfiles fi = dnli->fi;",
          "200:  int dc = rpmfilesDC(fi);",
          "201:  int i = -1;",
          "203:  if (dnli->active)",
          "204:  do {",
          "205:      i = (!dnli->reverse ? dnli->i++ : --dnli->i);",
          "206:  } while (i >= 0 && i < dc && !dnli->active[i]);",
          "208:  if (i >= 0 && i < dc)",
          "209:      dn = rpmfilesDN(fi, i);",
          "210:  else",
          "211:      i = -1;",
          "212:  dnli->isave = i;",
          "213:     }",
          "214:     return dn;",
          "215: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:     return rc;",
          "554: }",
          "644: static void removeSBITS(const char *path)",
          "645: {",
          "646:     struct stat stb;",
          "",
          "[Removed Lines]",
          "563: static int fsmMkdirs(rpmfiles files, rpmfs fs, rpmPlugins plugins)",
          "564: {",
          "565:     DNLI_t dnli = dnlInitIterator(files, fs, 0);",
          "566:     struct stat sb;",
          "567:     const char *dpath;",
          "568:     int rc = 0;",
          "569:     int i;",
          "570:     size_t ldnlen = 0;",
          "571:     const char * ldn = NULL;",
          "573:     while ((dpath = dnlNextIterator(dnli)) != NULL) {",
          "574:  size_t dnlen = strlen(dpath);",
          "575:  char * te, dn[dnlen+1];",
          "577:  if (dnlen <= 1)",
          "578:      continue;",
          "580:  if (dnlen == ldnlen && rstreq(dpath, ldn))",
          "581:      continue;",
          "584:  (void) stpcpy(dn, dpath);",
          "587:  for (i = 1, te = dn + 1; *te != '\\0'; te++, i++) {",
          "588:      if (*te != '/')",
          "589:   continue;",
          "592:      if (i < ldnlen &&",
          "593:   (ldn[i] == '/' || ldn[i] == '\\0') && rstreqn(dn, ldn, i))",
          "594:   continue;",
          "602:      if (rc == 0 && S_ISDIR(sb.st_mode)) {",
          "603:   continue;",
          "604:      } else if (rc == RPMERR_ENOENT) {",
          "606:   mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "607:   rpmFsmOp op = (FA_CREATE|FAF_UNOWNED);",
          "610:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
          "612:   if (!rc)",
          "613:       rc = fsmMkdir(-1, dn, mode);",
          "615:   if (!rc) {",
          "616:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
          "617:             mode, op);",
          "618:   }",
          "621:   rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
          "623:   if (!rc) {",
          "624:       rpmlog(RPMLOG_DEBUG,",
          "625:        \"%s directory created with perms %04o\\n\",",
          "626:        dn, (unsigned)(mode & 07777));",
          "627:   }",
          "629:      }",
          "630:      if (rc)",
          "631:   break;",
          "632:  }",
          "633:  if (rc) break;",
          "636:  ldn = dpath;",
          "637:  ldnlen = dnlen;",
          "638:     }",
          "639:     dnlFreeIterator(dnli);",
          "641:     return rc;",
          "642: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1053:     }",
          "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
          "1061:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "1062:  struct filedata_s *fp = &fdata[fx];",
          "",
          "[Removed Lines]",
          "1057:     if (!rc)",
          "1058:  rc = fsmMkdirs(files, fs, plugins);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}