{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c32349f4833bf4b57dc3597346fdafc241a301ec",
      "candidate_info": {
        "commit_hash": "c32349f4833bf4b57dc3597346fdafc241a301ec",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c32349f4833bf4b57dc3597346fdafc241a301ec",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Avoid dereferencing invalid memory on error logging\n\n(cherry picked from commit 99c9a828dd80f2874e89a520150565fa9e9162c7)\n(cherry picked from commit 7df9ff7176497c3109ac0648f381aad751ec90dd)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [
            "parser/parse_uri.c||parser/parse_uri.c"
          ],
          "candidate": [
            "parser/parse_uri.c||parser/parse_uri.c"
          ]
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1604: error_bad_char:",
          "1605:  LM_ERR(\"bad char '%c' in state %d\"",
          "1606:    \" parsed: <%.*s> (%d) / <%.*s> (%d)\\n\",",
          "1609:  goto error_exit;",
          "1610: error_bad_host:",
          "1611:  LM_ERR(\"bad host in uri (error at char %c in\"",
          "1612:    \" state %d) parsed: <%.*s>(%d) /<%.*s> (%d)\\n\",",
          "1615:  goto error_exit;",
          "1616: error_bad_port:",
          "1617:  LM_ERR(\"bad port in uri (error at char '%c' in\"",
          "1618:    \" state %d) parsed: <%.*s>(%d) /<%.*s> (%d)\\n\",",
          "1621:  goto error_exit;",
          "1622: error_bad_uri:",
          "1623:  LM_ERR(\"bad uri, state %d parsed: <%.*s> (%d) / <%.*s> (%d)\\n\",",
          "",
          "[Removed Lines]",
          "1608:    len, ZSW(buf), len);",
          "1614:    len, ZSW(buf), len);",
          "1620:    len, ZSW(buf), len);",
          "",
          "[Added Lines]",
          "1607:    p < end ? *p : *(buf+len-1), state, (int)(p-buf), ZSW(buf),",
          "1608:    (int)(p-buf), len, ZSW(buf), len);",
          "1613:    p < end ? *p : *(buf+len-1), state, (int)(p-buf), ZSW(buf),",
          "1614:    (int)(p-buf), len, ZSW(buf), len);",
          "1619:    p < end ? *p : *(buf+len-1), state, (int)(p-buf), ZSW(buf),",
          "1620:    (int)(p-buf), len, ZSW(buf), len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d5e755c18b8d76fa36aec7cd56b7d70b77ae98f",
      "candidate_info": {
        "commit_hash": "2d5e755c18b8d76fa36aec7cd56b7d70b77ae98f",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/2d5e755c18b8d76fa36aec7cd56b7d70b77ae98f",
        "files": [
          "modules/rtpengine/rtpengine.c"
        ],
        "message": "rtpengine: fix hostname detection for IPv6\n\n(cherry picked from commit 4d921360eb9dfa4dffe100de3444849afc7af5c9)",
        "before_after_code_files": [
          "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c": [
          "File: modules/rtpengine/rtpengine.c -> modules/rtpengine/rtpengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:   if (strncasecmp(pnode->rn_address, \"udp:\", 4) == 0) {",
          "869:    pnode->rn_umode = 1;",
          "870:    pnode->rn_address += 4;",
          "871:   } else if (strncasecmp(pnode->rn_address, \"udp6:\", 5) == 0) {",
          "872:    pnode->rn_umode = 6;",
          "873:    pnode->rn_address += 5;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:     pnode->rn_umode = 6;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1409: static inline int rtpengine_connect_node(struct rtpe_node *pnode)",
          "1410: {",
          "1411:  int n;",
          "1413:  char *hostname;",
          "1414:  struct addrinfo hints, *res;",
          "",
          "[Removed Lines]",
          "1412:  char *cp;",
          "",
          "[Added Lines]",
          "1414:  char *cp, *start, *end;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1418:   return 1;",
          "1419:  }",
          "1422:  if (hostname==NULL) {",
          "1423:   LM_ERR(\"no more pkg memory\\n\");",
          "1424:   return 0;",
          "1425:  }",
          "1436:  memset(&hints, 0, sizeof(hints));",
          "1437:  hints.ai_flags = 0;",
          "",
          "[Removed Lines]",
          "1421:  hostname = (char*)pkg_malloc(strlen(pnode->rn_address) + 1);",
          "1426:  strcpy(hostname, pnode->rn_address);",
          "1428:  cp = strrchr(hostname, ':');",
          "1429:  if (cp != NULL) {",
          "1431:   cp++;",
          "1432:  }",
          "1433:  if (cp == NULL || *cp == '\\0')",
          "1434:   cp = CPORT;",
          "",
          "[Added Lines]",
          "1423:  start = pnode->rn_address;",
          "1425:  cp = strrchr(pnode->rn_address, ':');",
          "1426:  if (cp == NULL) {",
          "1428:   cp = CPORT;",
          "1429:   end = start + strlen(pnode->rn_address);",
          "1430:  } else {",
          "1431:   end = cp++;",
          "1432:   if (pnode->rn_umode == 6) {",
          "1434:    if (end > start && *(end - 1) != ']') {",
          "1436:     cp = CPORT;",
          "1437:     end = start + strlen(pnode->rn_address);",
          "1438:    }",
          "1439:   }",
          "1440:  }",
          "1441:  if (pnode->rn_umode == 6 && *start == '[') {",
          "1442:   start++;",
          "1443:   if (end > start && *(end - 1) == ']')",
          "1444:    end--;",
          "1445:  }",
          "1447:  hostname = (char*)pkg_malloc(end - start + 1);",
          "1452:  memcpy(hostname, start, end - start);",
          "1453:  hostname[end-start] = '\\0';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5888125f77978c718c9da72fc67e7f44b9f39c0",
      "candidate_info": {
        "commit_hash": "c5888125f77978c718c9da72fc67e7f44b9f39c0",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c5888125f77978c718c9da72fc67e7f44b9f39c0",
        "files": [
          "modules/dialog/dlg_replication.c"
        ],
        "message": "dialog: fix typo in commit edc90fb\n\n(cherry picked from commit 3cebaf73059932183392761a040969efb887bcea)",
        "before_after_code_files": [
          "modules/dialog/dlg_replication.c||modules/dialog/dlg_replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/dialog/dlg_replication.c||modules/dialog/dlg_replication.c": [
          "File: modules/dialog/dlg_replication.c -> modules/dialog/dlg_replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:   }",
          "160:   dlg_sync_in_progress = shm_malloc(sizeof *dlg_sync_in_progress);",
          "162:    LM_ERR(\"no more shm memory!\\n\");",
          "163:    return -1;",
          "164:   }",
          "",
          "[Removed Lines]",
          "161:   if (*dlg_sync_in_progress) {",
          "",
          "[Added Lines]",
          "161:   if (!dlg_sync_in_progress) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43f00304aa045464b753da38a989c6849549954a",
      "candidate_info": {
        "commit_hash": "43f00304aa045464b753da38a989c6849549954a",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/43f00304aa045464b753da38a989c6849549954a",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_exchange.c",
          "modules/media_exchange/media_sessions.c",
          "modules/media_exchange/media_sessions.h"
        ],
        "message": "b2b_entities: provide dlginfo for entity_delete\n\nEach module that uses b2b_entities, should duplicate the dlginfo\nstructure and pass it to the entity_delete API call, otherwise wrong\nentities might be deleted due to mismatches\n\n(cherry picked from commit ce19581557c69dafee5095fecce831e2c2d80704)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c",
          "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c",
          "modules/media_exchange/media_sessions.h||modules/media_exchange/media_sessions.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return load_b2b( b2b_api );",
          "188: }",
          "190: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "191: {",
          "192:  b2b_dlginfo_t* dlg = NULL;",
          "193:  int size;",
          "195:  size = sizeof(b2b_dlginfo_t) + info->callid.len;",
          "196:  if (info->totag.s)",
          "197:   size += info->totag.len;",
          "198:  if (info->fromtag.s)",
          "199:   size += info->fromtag.len;",
          "200:  dlg = shm_malloc(size);",
          "201:  if (!dlg)",
          "202:   return NULL;",
          "203:  memset(dlg, 0, size);",
          "205:  dlg->callid.s = (char *)(dlg + 1);",
          "206:  dlg->callid.len = info->callid.len;",
          "207:  memcpy(dlg->callid.s, info->callid.s, dlg->callid.len);",
          "208:  if (info->totag.s) {",
          "209:   dlg->totag.len = info->totag.len;",
          "210:   dlg->totag.s = dlg->callid.s + dlg->callid.len;",
          "211:   memcpy(dlg->totag.s, info->totag.s, dlg->totag.len);",
          "212:  }",
          "213:  if (info->fromtag.s) {",
          "214:   dlg->fromtag.len = info->fromtag.len;",
          "215:   dlg->fromtag.s = dlg->callid.s + dlg->callid.len + dlg->totag.len;",
          "216:   memcpy(dlg->fromtag.s, info->fromtag.s, dlg->fromtag.len);",
          "217:  }",
          "218:  return dlg;",
          "219: }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_exchange.c||modules/media_exchange/media_exchange.c": [
          "File: modules/media_exchange/media_exchange.c -> modules/media_exchange/media_exchange.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "333:   LM_ERR(\"could not copy b2b client key\\n\");",
          "336:   goto release;",
          "337:  }",
          "338:  msl->params = mf;",
          "",
          "[Removed Lines]",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "335:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "532:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "533:   LM_ERR(\"could not copy b2b server key for callid %.*s\\n\", callid->len, callid->s);",
          "536:   goto destroy;",
          "537:  }",
          "538:  msl->b2b_entity = B2B_SERVER;",
          "",
          "[Removed Lines]",
          "535:   media_b2b.entity_delete(B2B_SERVER, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "535:   media_b2b.entity_delete(B2B_SERVER, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "613:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "614:   LM_ERR(\"could not copy b2b client key\\n\");",
          "617:   goto unref;",
          "618:  }",
          "619:  msl->b2b_entity = B2B_CLIENT;",
          "",
          "[Removed Lines]",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "616:   media_b2b.entity_delete(B2B_CLIENT, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:  if (shm_str_dup(&msl->b2b_key, b2b_key) < 0) {",
          "806:   LM_ERR(\"could not copy b2b server key for callid %.*s\\n\", callid->len, callid->s);",
          "809:   goto destroy;",
          "810:  }",
          "811:  msl->b2b_entity = B2B_SERVER;",
          "",
          "[Removed Lines]",
          "808:   media_b2b.entity_delete(B2B_SERVER, b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "808:   media_b2b.entity_delete(B2B_SERVER, b2b_key, msl->dlginfo, 1, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1513: static int b2b_media_confirm(str* key, str* entity_key, int src, b2b_dlginfo_t* info)",
          "1514: {",
          "1516:  struct media_session_leg *msl = *(struct media_session_leg **)((str *)key)->s;",
          "1518:  return 0;",
          "1519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1516:  msl->dlginfo = b2b_dup_dlginfo(info);",
          "1517:  if (!msl->dlginfo) {",
          "1518:   LM_ERR(\"could not duplicate b2be dialog info!\\n\");",
          "1519:   return -1;",
          "1520:  }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c": [
          "File: modules/media_exchange/media_sessions.c -> modules/media_exchange/media_sessions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     msl, msl->ms);",
          "74:  }",
          "75:  if (msl->b2b_key.s) {",
          "77:   shm_free(msl->b2b_key.s);",
          "78:   msl->b2b_key.s = NULL;",
          "79:  }",
          "80:  LM_DBG(\"releasing media_session_leg=%p\\n\", msl);",
          "81:  if (msl->params && msl->type == MEDIA_SESSION_TYPE_FORK)",
          "82:   media_forks_free(msl->params);",
          "83:  shm_free(msl);",
          "84: }",
          "",
          "[Removed Lines]",
          "76:   media_b2b.entity_delete(msl->b2b_entity, &msl->b2b_key, NULL, 1, 1);",
          "",
          "[Added Lines]",
          "76:   media_b2b.entity_delete(msl->b2b_entity, &msl->b2b_key, msl->dlginfo, 1, 1);",
          "83:  if (msl->dlginfo)",
          "84:   shm_free(msl->dlginfo);",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.h||modules/media_exchange/media_sessions.h": [
          "File: modules/media_exchange/media_sessions.h -> modules/media_exchange/media_sessions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  str b2b_key;",
          "46:  int nohold;",
          "47:  gen_lock_t lock;",
          "48:  enum b2b_entity_type b2b_entity;",
          "49:  struct media_session_leg *next;",
          "50:  void *params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  b2b_dlginfo_t *dlginfo;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f99dd82e38bb98662f304a9ebe0e77ebac961d7",
      "candidate_info": {
        "commit_hash": "5f99dd82e38bb98662f304a9ebe0e77ebac961d7",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/5f99dd82e38bb98662f304a9ebe0e77ebac961d7",
        "files": [
          "modules/clusterer/sync.c"
        ],
        "message": "clusterer: properly compute sync fallback interval in all cases\n\nThe timestamp of the sync request was not saved when queueing the sync\nafter certain send errors.\n\n(cherry picked from commit 816ef38b7c97b811a5822ceab9ebbe81609b1b6b)",
        "before_after_code_files": [
          "modules/clusterer/sync.c||modules/clusterer/sync.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/sync.c||modules/clusterer/sync.c": [
          "File: modules/clusterer/sync.c -> modules/clusterer/sync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:    lock_get(cluster->lock);",
          "159:    lcap->flags |= CAP_SYNC_PENDING;",
          "160:    lock_release(cluster->lock);",
          "161:   } else if (rc == CLUSTERER_SEND_ERR)",
          "162:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:    if (cluster->current_node->flags & NODE_IS_SEED)",
          "162:     gettimeofday(&lcap->sync_req_time, NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}