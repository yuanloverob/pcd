{
  "cve_id": "CVE-2019-1000019",
  "cve_desc": "libarchive version commit bf9aec176c6748f0ee7a678c5f9f9555b9a757c1 onwards (release v3.0.2 onwards) contains a CWE-125: Out-of-bounds Read vulnerability in 7zip decompression, archive_read_support_format_7zip.c, header_bytes() that can result in a crash (denial of service). This attack appears to be exploitable via the victim opening a specially crafted 7zip file.",
  "repo": "libarchive/libarchive",
  "patch_hash": "65a23f5dbee4497064e9bb467f81138a62b0dae1",
  "patch_info": {
    "commit_hash": "65a23f5dbee4497064e9bb467f81138a62b0dae1",
    "repo": "libarchive/libarchive",
    "commit_url": "https://github.com/libarchive/libarchive/commit/65a23f5dbee4497064e9bb467f81138a62b0dae1",
    "files": [
      "libarchive/archive_read_support_format_7zip.c"
    ],
    "message": "7zip: fix crash when parsing certain archives\n\nFuzzing with CRCs disabled revealed that a call to get_uncompressed_data()\nwould sometimes fail to return at least 'minimum' bytes. This can cause\nthe crc32() invocation in header_bytes to read off into invalid memory.\n\nA specially crafted archive can use this to cause a crash.\n\nAn ASAN trace is below, but ASAN is not required - an uninstrumented\nbinary will also crash.\n\n==7719==ERROR: AddressSanitizer: SEGV on unknown address 0x631000040000 (pc 0x7fbdb3b3ec1d bp 0x7ffe77a51310 sp 0x7ffe77a51150 T0)\n==7719==The signal is caused by a READ memory access.\n    #0 0x7fbdb3b3ec1c in crc32_z (/lib/x86_64-linux-gnu/libz.so.1+0x2c1c)\n    #1 0x84f5eb in header_bytes (/tmp/libarchive/bsdtar+0x84f5eb)\n    #2 0x856156 in read_Header (/tmp/libarchive/bsdtar+0x856156)\n    #3 0x84e134 in slurp_central_directory (/tmp/libarchive/bsdtar+0x84e134)\n    #4 0x849690 in archive_read_format_7zip_read_header (/tmp/libarchive/bsdtar+0x849690)\n    #5 0x5713b7 in _archive_read_next_header2 (/tmp/libarchive/bsdtar+0x5713b7)\n    #6 0x570e63 in _archive_read_next_header (/tmp/libarchive/bsdtar+0x570e63)\n    #7 0x6f08bd in archive_read_next_header (/tmp/libarchive/bsdtar+0x6f08bd)\n    #8 0x52373f in read_archive (/tmp/libarchive/bsdtar+0x52373f)\n    #9 0x5257be in tar_mode_x (/tmp/libarchive/bsdtar+0x5257be)\n    #10 0x51daeb in main (/tmp/libarchive/bsdtar+0x51daeb)\n    #11 0x7fbdb27cab96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\n    #12 0x41dd09 in _start (/tmp/libarchive/bsdtar+0x41dd09)\n\nThis was primarly done with afl and FairFuzz. Some early corpus entries\nmay have been generated by qsym.",
    "before_after_code_files": [
      "libarchive/archive_read_support_format_7zip.c||libarchive/archive_read_support_format_7zip.c"
    ]
  },
  "patch_diff": {
    "libarchive/archive_read_support_format_7zip.c||libarchive/archive_read_support_format_7zip.c": [
      "File: libarchive/archive_read_support_format_7zip.c -> libarchive/archive_read_support_format_7zip.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8312eaa576014cd9b965012af51bc1f967b12423",
      "candidate_info": {
        "commit_hash": "8312eaa576014cd9b965012af51bc1f967b12423",
        "repo": "libarchive/libarchive",
        "commit_url": "https://github.com/libarchive/libarchive/commit/8312eaa576014cd9b965012af51bc1f967b12423",
        "files": [
          "libarchive/archive_read_support_format_iso9660.c"
        ],
        "message": "iso9660: Fail when expected Rockridge extensions is missing\n\nA corrupted or malicious ISO9660 image can cause read_CE() to loop\nforever.\n\nread_CE() calls parse_rockridge(), expecting a Rockridge extension\nto be read. However, parse_rockridge() is structured as a while\nloop starting with a sanity check, and if the sanity check fails\nbefore the loop has run, the function returns ARCHIVE_OK without\nadvancing the position in the file. This causes read_CE() to retry\nindefinitely.\n\nMake parse_rockridge() return ARCHIVE_WARN if it didn't read an\nextension. As someone with no real knowledge of the format, this\nseems more apt than ARCHIVE_FATAL, but both the call-sites escalate\nit to a fatal error immediately anyway.\n\nFound with a combination of AFL, afl-rb (FairFuzz) and qsym.",
        "before_after_code_files": [
          "libarchive/archive_read_support_format_iso9660.c||libarchive/archive_read_support_format_iso9660.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libarchive/libarchive/pull/1120"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libarchive/archive_read_support_format_iso9660.c||libarchive/archive_read_support_format_iso9660.c": [
          "File: libarchive/archive_read_support_format_iso9660.c -> libarchive/archive_read_support_format_iso9660.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2102:     const unsigned char *p, const unsigned char *end)",
          "2103: {",
          "2104:  struct iso9660 *iso9660;",
          "2106:  iso9660 = (struct iso9660 *)(a->format->data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2105:  int entry_seen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2257:   }",
          "2259:   p += p[2];",
          "2260:  }",
          "2262: }",
          "2264: static int",
          "",
          "[Removed Lines]",
          "2261:  return (ARCHIVE_OK);",
          "",
          "[Added Lines]",
          "2261:   entry_seen = 1;",
          "2262:  }",
          "2264:  if (entry_seen)",
          "2265:   return (ARCHIVE_OK);",
          "2266:  else {",
          "2267:   archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
          "2268:       \"Tried to parse Rockridge extensions, but none found\");",
          "2269:   return (ARCHIVE_WARN);",
          "",
          "---------------"
        ]
      }
    }
  ]
}