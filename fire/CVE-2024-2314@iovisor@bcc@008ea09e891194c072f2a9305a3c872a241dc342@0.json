{
  "cve_id": "CVE-2024-2314",
  "cve_desc": "If kernel headers need to be extracted, bcc will attempt to load them from a temporary directory. An unprivileged attacker could use this to force bcc to load compromised linux headers. Linux distributions which provide kernel headers by default are not affected by default.",
  "repo": "iovisor/bcc",
  "patch_hash": "008ea09e891194c072f2a9305a3c872a241dc342",
  "patch_info": {
    "commit_hash": "008ea09e891194c072f2a9305a3c872a241dc342",
    "repo": "iovisor/bcc",
    "commit_url": "https://github.com/iovisor/bcc/commit/008ea09e891194c072f2a9305a3c872a241dc342",
    "files": [
      "src/cc/frontends/clang/kbuild_helper.cc"
    ],
    "message": "clang: check header ownership (#4928)\n\nExample testing with a brendan-owned /tmp/kheaders file (note the \"ERROR:\" message):\n\n~/bcc/build$ sudo /usr/share/bcc/tools/biosnoop\nERROR: header file ownership unexpected: /tmp/kheaders-5.15.47-internal\n<built-in>:1:10: fatal error: './include/linux/kconfig.h' file not found\n#include \"./include/linux/kconfig.h\"\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\nTraceback (most recent call last):\n  File \"/usr/share/bcc/tools/biosnoop\", line 335, in <module>\n    b = BPF(text=bpf_text)\n  File \"/usr/lib/python3/dist-packages/bcc-0.1.5+6cd27218-py3.10.egg/bcc/__init__.py\", line 479, in __init__\nException: Failed to compile BPF module <text>\n~/bcc/build$ ls -lhd /tmp/kheaders-5.15.47-internal\ndrwxrwxr-x 2 brendan dev 4.0K Mar  6 02:50 /tmp/kheaders-5.15.47-internal\n\nNo error when chown'd back to root.",
    "before_after_code_files": [
      "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
    ]
  },
  "patch_diff": {
    "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc": [
      "File: src/cc/frontends/clang/kbuild_helper.cc -> src/cc/frontends/clang/kbuild_helper.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:   return 0;",
      "141: }",
      "144: {",
      "145:   struct stat buffer;",
      "147: }",
      "149: static inline int proc_kheaders_exists(void)",
      "150: {",
      "152: }",
      "154: static inline const char *get_tmp_dir() {",
      "",
      "[Removed Lines]",
      "143: static inline int file_exists(const char *f)",
      "146:   return (stat(f, &buffer) == 0);",
      "151:   return file_exists(PROC_KHEADERS_PATH);",
      "",
      "[Added Lines]",
      "143: static inline int file_exists_and_ownedby(const char *f, uid_t uid)",
      "146:   int ret;",
      "147:   if ((ret = stat(f, &buffer)) == 0) {",
      "148:     if (buffer.st_uid != uid) {",
      "149:       std::cout << \"ERROR: header file ownership unexpected: \" << std::string(f) << \"\\n\";",
      "150:       return -1;",
      "151:     }",
      "152:   }",
      "153:   return ret;",
      "158:   return file_exists_and_ownedby(PROC_KHEADERS_PATH, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "224:            uname_data.release);",
      "225:   dirpath = std::string(dirpath_tmp);",
      "228:     return 0;",
      "",
      "[Removed Lines]",
      "227:   if (file_exists(dirpath_tmp))",
      "",
      "[Added Lines]",
      "234:   if (file_exists_and_ownedby(dirpath_tmp, 0))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c00d69ceb5dbbf1dedd2e30c5e16ba5ed23b50be",
      "candidate_info": {
        "commit_hash": "c00d69ceb5dbbf1dedd2e30c5e16ba5ed23b50be",
        "repo": "iovisor/bcc",
        "commit_url": "https://github.com/iovisor/bcc/commit/c00d69ceb5dbbf1dedd2e30c5e16ba5ed23b50be",
        "files": [
          "src/cc/frontends/clang/kbuild_helper.cc"
        ],
        "message": "clang: Fix file_exists_and_ownedby return value (#4935)\n\ncommit 008ea09 (clang: check header ownership) updates file_exists()\nto file_exists_and_ownedby(), add verifies onwer, but the return value\nis different from before, causing problems with the original code.\n\nSigned-off-by: Chunsheng Luo <luochunsheng@ustc.edu>",
        "before_after_code_files": [
          "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
          ],
          "candidate": [
            "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc": [
          "File: src/cc/frontends/clang/kbuild_helper.cc -> src/cc/frontends/clang/kbuild_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: static inline int file_exists_and_ownedby(const char *f, uid_t uid)",
          "144: {",
          "145:   struct stat buffer;",
          "148:     if (buffer.st_uid != uid) {",
          "149:       std::cout << \"ERROR: header file ownership unexpected: \" << std::string(f) << \"\\n\";",
          "150:       return -1;",
          "",
          "[Removed Lines]",
          "146:   int ret;",
          "147:   if ((ret = stat(f, &buffer)) == 0) {",
          "",
          "[Added Lines]",
          "146:   int ret = stat(f, &buffer) == 0;",
          "147:   if (ret) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bc97bbc50b1ccf0c63f320ee73a2c0abe84b596",
      "candidate_info": {
        "commit_hash": "5bc97bbc50b1ccf0c63f320ee73a2c0abe84b596",
        "repo": "iovisor/bcc",
        "commit_url": "https://github.com/iovisor/bcc/commit/5bc97bbc50b1ccf0c63f320ee73a2c0abe84b596",
        "files": [
          "src/cc/frontends/clang/kbuild_helper.cc"
        ],
        "message": "clang: fail when the kheaders ownership is wrong (#4928) (#4985)\n\nfile_exists_and_ownedby() returns -1 when the file exists but its\nownership is unexpected, which is very misleading since anything non\nzero is interpreted as true and a function with such a name is\nexpected to return a boolean. So currently all this does, is write a\nwarning message, and continues as if nothing is wrong.\n\nMake file_exists_and_ownedby() returns false when the ownership is\nwrong and have get_proc_kheaders() fails when this happen. Also have\nall the *exists* functions return bool to avoid such issues in the\nfuture.\n\nSigned-off-by: Jerome Marchand <jmarchan@redhat.com>",
        "before_after_code_files": [
          "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
          ],
          "candidate": [
            "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/cc/frontends/clang/kbuild_helper.cc||src/cc/frontends/clang/kbuild_helper.cc": [
          "File: src/cc/frontends/clang/kbuild_helper.cc -> src/cc/frontends/clang/kbuild_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   return 0;",
          "141: }",
          "144: {",
          "145:   struct stat buffer;",
          "146:   int ret = stat(f, &buffer) == 0;",
          "147:   if (ret) {",
          "148:     if (buffer.st_uid != uid) {",
          "149:       std::cout << \"ERROR: header file ownership unexpected: \" << std::string(f) << \"\\n\";",
          "151:     }",
          "152:   }",
          "153:   return ret;",
          "154: }",
          "157: {",
          "158:   return file_exists_and_ownedby(PROC_KHEADERS_PATH, 0);",
          "159: }",
          "",
          "[Removed Lines]",
          "143: static inline int file_exists_and_ownedby(const char *f, uid_t uid)",
          "150:       return -1;",
          "156: static inline int proc_kheaders_exists(void)",
          "",
          "[Added Lines]",
          "143: static inline bool file_exists(const char *f)",
          "144: {",
          "145:   struct stat buffer;",
          "146:   return (stat(f, &buffer) == 0);",
          "147: }",
          "149: static inline bool file_exists_and_ownedby(const char *f, uid_t uid)",
          "156:       return false;",
          "162: static inline bool proc_kheaders_exists(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:            uname_data.release);",
          "232:   dirpath = std::string(dirpath_tmp);",
          "238:   return extract_kheaders(dirpath, uname_data);",
          "",
          "[Removed Lines]",
          "234:   if (file_exists_and_ownedby(dirpath_tmp, 0))",
          "235:     return 0;",
          "",
          "[Added Lines]",
          "240:   if (file_exists(dirpath_tmp)) {",
          "241:     if (file_exists_and_ownedby(dirpath_tmp, 0))",
          "242:       return 0;",
          "243:     else",
          "246:       return -EEXIST;",
          "247:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}