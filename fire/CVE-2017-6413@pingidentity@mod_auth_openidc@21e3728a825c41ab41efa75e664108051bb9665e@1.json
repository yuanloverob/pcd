{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d46b34c70a006ac2b883003a33eb3ffdc17c568",
      "candidate_info": {
        "commit_hash": "5d46b34c70a006ac2b883003a33eb3ffdc17c568",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/5d46b34c70a006ac2b883003a33eb3ffdc17c568",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "2.2.0rc5: remove libjq expression support for the time being\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: AC_SUBST(HIREDIS_LIBS)",
          "89: # JQ",
          "112: AC_SUBST(HAVE_LIBJQ)",
          "113: AC_SUBST(JQ_CFLAGS)",
          "",
          "[Removed Lines]",
          "90: HAVE_LIBJQ=1",
          "92: AC_ARG_WITH(jq,",
          "93:         [  --with-jq=PATH          location of your libjq installation])",
          "95: if test -n \"$with_jq\"",
          "96: then",
          "97:     JQ_CFLAGS=\"-I$with_jq/include\"",
          "98:     JQ_LIBS=\"-L$with_jq/lib -ljq\"",
          "99: else",
          "100:     JQ_LIBS=\"-ljq\"",
          "101: fi",
          "103: CPPFLAGS=\"$JQ_CFLAGS $CPPFLAGS\"",
          "104: AC_CHECK_HEADERS([jq.h], , [HAVE_LIBJQ=0])",
          "106: LDFLAGS=\"$JQ_LIBS $LDFLAGS\"",
          "107: AC_CHECK_LIB([jq], [jq_init], , [HAVE_LIBJQ=0])",
          "108: if test \"x$have_jq\" = \"x0\" ; then",
          "109:   AC_MSG_WARN(\"cannot find library for -ljq.\")",
          "110: fi",
          "",
          "[Added Lines]",
          "90: HAVE_LIBJQ=0",
          "92: #AC_ARG_WITH(jq,",
          "93: #        [  --with-jq=PATH          location of your libjq installation])",
          "95: #if test -n \"$with_jq\"",
          "96: #then",
          "97: #    JQ_CFLAGS=\"-I$with_jq/include\"",
          "98: #    JQ_LIBS=\"-L$with_jq/lib -ljq\"",
          "99: #else",
          "100: #    JQ_LIBS=\"-ljq\"",
          "101: #fi",
          "103: #CPPFLAGS=\"$JQ_CFLAGS $CPPFLAGS\"",
          "104: #AC_CHECK_HEADERS([jq.h], , [HAVE_LIBJQ=0])",
          "106: #LDFLAGS=\"$JQ_LIBS $LDFLAGS\"",
          "107: #AC_CHECK_LIB([jq], [jq_init], , [HAVE_LIBJQ=0])",
          "108: #if test \"x$have_jq\" = \"x0\" ; then",
          "109: #  AC_MSG_WARN(\"cannot find library for -ljq.\")",
          "110: #fi",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62d801863f4754a48c70e6d206525814d5eb03d1",
      "candidate_info": {
        "commit_hash": "62d801863f4754a48c70e6d206525814d5eb03d1",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/62d801863f4754a48c70e6d206525814d5eb03d1",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.2.0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce6d05b5e76d381db6604204c098adc7c239c4c6",
      "candidate_info": {
        "commit_hash": "ce6d05b5e76d381db6604204c098adc7c239c4c6",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/ce6d05b5e76d381db6604204c098adc7c239c4c6",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.h",
          "src/util.c",
          "test/test.c"
        ],
        "message": "handle multiple values in X-Forwarded-* headers\n\n- as to better support chains of reverse proxies in front of\nmod_auth_openidc\n- log request headers in oidc_util_hdr_in_get\n- release 2.3.1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "526: #define OIDC_STR_SEMI_COLON    \";\"",
          "527: #define OIDC_STR_FORWARD_SLASH \"/\"",
          "528: #define OIDC_STR_AT            \"@\"",
          "530: #define OIDC_CHAR_EQUAL         '='",
          "531: #define OIDC_CHAR_COLON         ':'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529: #define OIDC_STR_COMMA         \",\"",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2099: }",
          "2101: static const char *oidc_util_hdr_in_get(const request_rec *r, const char *name) {",
          "2103: }",
          "2105: static void oidc_util_hdr_table_set(const request_rec *r, apr_table_t *table,",
          "",
          "[Removed Lines]",
          "2102:  return apr_table_get(r->headers_in, name);",
          "",
          "[Added Lines]",
          "2102:  const char *value = apr_table_get(r->headers_in, name);",
          "2103:  if (value)",
          "2104:   oidc_debug(r, \"%s=%s\", name, value);",
          "2105:  return value;",
          "2106: }",
          "2108: static const char *oidc_util_hdr_in_get_left_most_only(const request_rec *r, const char *name, const char *separator) {",
          "2109:  char *last = NULL;",
          "2110:  const char *value = oidc_util_hdr_in_get(r, name);",
          "2111:  if (value)",
          "2112:   return apr_strtok(apr_pstrdup(r->pool, value), separator, &last);",
          "2113:  return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2166: }",
          "2168: const char *oidc_util_hdr_in_x_forwarded_for_get(const request_rec *r) {",
          "2170: }",
          "2172: const char *oidc_util_hdr_in_content_type_get(const request_rec *r) {",
          "",
          "[Removed Lines]",
          "2169:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_X_FORWARDED_FOR);",
          "",
          "[Added Lines]",
          "2180:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_FOR, OIDC_STR_COMMA);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2186: }",
          "2188: const char *oidc_util_hdr_in_x_forwarded_proto_get(const request_rec *r) {",
          "2190: }",
          "2192: const char *oidc_util_hdr_in_x_forwarded_port_get(const request_rec *r) {",
          "2194: }",
          "2196: const char *oidc_util_hdr_in_x_forwarded_host_get(const request_rec *r) {",
          "2198: }",
          "2200: const char *oidc_util_hdr_in_host_get(const request_rec *r) {",
          "",
          "[Removed Lines]",
          "2189:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "2193:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_X_FORWARDED_PORT);",
          "2197:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_X_FORWARDED_HOST);",
          "",
          "[Added Lines]",
          "2200:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_PROTO, OIDC_STR_COMMA);",
          "2204:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_PORT, OIDC_STR_COMMA);",
          "2208:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_HOST, OIDC_STR_COMMA);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1189:  url = oidc_get_current_url(r);",
          "1190:  TST_ASSERT_STR(\"test_headers (5)\", url, \"http://www.outer.com:321\");",
          "1192:  apr_table_unset(r->headers_in, \"X-Forwarded-Host\");",
          "1193:  apr_table_unset(r->headers_in, \"X-Forwarded-Port\");",
          "1194:  url = oidc_get_current_url(r);",
          "1197:  return 0;",
          "1198: }",
          "",
          "[Removed Lines]",
          "1195:  TST_ASSERT_STR(\"test_headers (6)\", url, \"http://www.example.com\");",
          "",
          "[Added Lines]",
          "1192:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"https , http\");",
          "1193:  url = oidc_get_current_url(r);",
          "1194:  TST_ASSERT_STR(\"test_headers (6)\", url, \"https://www.outer.com:321\");",
          "1199:  TST_ASSERT_STR(\"test_headers (7)\", url, \"https://www.example.com\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d14466100ce2d8fc1ae489d14466450273c47410",
      "candidate_info": {
        "commit_hash": "d14466100ce2d8fc1ae489d14466450273c47410",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/d14466100ce2d8fc1ae489d14466450273c47410",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c"
        ],
        "message": "fix compiler warnings for OpenSSL 1.1.x; bump to 2.3.4rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1987: static apr_thread_mutex_t **ssl_locks;",
          "1988: static int ssl_num_locks;",
          "",
          "[Removed Lines]",
          "1985: #if defined(OPENSSL_THREADS) && APR_HAS_THREADS",
          "",
          "[Added Lines]",
          "1985: #if ((OPENSSL_VERSION_NUMBER < 0x10100000) && defined(OPENSSL_THREADS) && APR_HAS_THREADS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2038:  oidc_cleanup_child(data);",
          "2041:  if (CRYPTO_get_locking_callback() == oidc_ssl_locking_callback)",
          "2042:   CRYPTO_set_locking_callback(NULL);",
          "2043: #ifdef OPENSSL_NO_THREADID",
          "",
          "[Removed Lines]",
          "2040: #if (defined (OPENSSL_THREADS) && APR_HAS_THREADS)",
          "",
          "[Added Lines]",
          "2040: #if ((OPENSSL_VERSION_NUMBER < 0x10100000) && defined (OPENSSL_THREADS) && APR_HAS_THREADS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2065:   server_rec *s) {",
          "2066:  const char *userdata_key = \"oidc_post_config\";",
          "2067:  void *data = NULL;",
          "",
          "[Removed Lines]",
          "2068:  int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2102:  curl_global_init(CURL_GLOBAL_ALL);",
          "2103:  OpenSSL_add_all_digests();",
          "2106:  ssl_num_locks = CRYPTO_num_locks();",
          "2107:  ssl_locks = apr_pcalloc(s->process->pool,",
          "2108:    ssl_num_locks * sizeof(*ssl_locks));",
          "2110:  for (i = 0; i < ssl_num_locks; i++)",
          "2111:   apr_thread_mutex_create(&(ssl_locks[i]), APR_THREAD_MUTEX_DEFAULT,",
          "2112:     s->process->pool);",
          "",
          "[Removed Lines]",
          "2105: #if (defined(OPENSSL_THREADS) && APR_HAS_THREADS)",
          "",
          "[Added Lines]",
          "2105: #if ((OPENSSL_VERSION_NUMBER < 0x10100000) && defined (OPENSSL_THREADS) && APR_HAS_THREADS)",
          "2110:  int i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73ad0789183faedfba152fcca45dcb9713d77d1e",
      "candidate_info": {
        "commit_hash": "73ad0789183faedfba152fcca45dcb9713d77d1e",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/73ad0789183faedfba152fcca45dcb9713d77d1e",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.h"
        ],
        "message": "update token binding support to draft-ietf-tokbind-ttrp-01\n\n- use header names prefixed with \"Sec-\" conform\nhttps://tools.ietf.org/html/draft-ietf-tokbind-ttrp-01#section-2.1\n- depends on mod_token_binding >= 0.3.4 now\n- bump to 2.3.2rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: #define OIDC_COOKIE_EXT_SAME_SITE_LAX    \"SameSite=Lax\"",
          "205: #define OIDC_COOKIE_EXT_SAME_SITE_STRICT \"SameSite=Strict\"",
          "210: #define OIDC_TOKEN_BINDING_POLICY_DISABLED  0",
          "211: #define OIDC_TOKEN_BINDING_POLICY_OPTIONAL  1",
          "",
          "[Removed Lines]",
          "208: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Provided-Token-Binding-ID\"",
          "",
          "[Added Lines]",
          "208: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Sec-Provided-Token-Binding-ID\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}