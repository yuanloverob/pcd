{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b599e28112ce5cee98b9ffa7bd96886ec5155e9c",
      "candidate_info": {
        "commit_hash": "b599e28112ce5cee98b9ffa7bd96886ec5155e9c",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/b599e28112ce5cee98b9ffa7bd96886ec5155e9c",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert the file creation steps the *at() family of calls\n\nSupposedly no functional changes here, we just need all these things\nconverted before we can swap over to relative paths.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "585:    [], [AC_MSG_ERROR([function required by rpm])])",
          "587: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "584:     openat mkdirat fstatat ],",
          "",
          "[Added Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     return rstrscat(NULL, rpmfiDN(fi), rpmfiBN(fi), suffix ? suffix : \"\", NULL);",
          "78: }",
          "81: {",
          "84:     if (_fsm_debug) {",
          "87:     }",
          "89:     if (rc < 0)",
          "",
          "[Removed Lines]",
          "80: static int fsmLink(const char *opath, const char *path)",
          "82:     int rc = link(opath, path);",
          "85:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "86:         opath, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "80: static int fsmLink(int odirfd, const char *opath, int dirfd, const char *path)",
          "82:     int rc = linkat(odirfd, opath, dirfd, path, 0);",
          "85:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d %s) %s\\n\", __func__,",
          "86:         odirfd, opath, dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     return rc;",
          "140: }",
          "143: {",
          "144:     int rc = 0;",
          "150:     }",
          "153:  rc = RPMERR_OPEN_FAILED;",
          "155:     if (_fsm_debug) {",
          "",
          "[Removed Lines]",
          "142: static int fsmOpen(FD_t *wfdp, const char *dest)",
          "146:     {",
          "147:  mode_t old_umask = umask(0577);",
          "149:  umask(old_umask);",
          "152:     if (Ferror(*wfdp))",
          "",
          "[Added Lines]",
          "142: static int fsmOpen(FD_t *wfdp, int dirfd, const char *dest)",
          "146:     int fd = openat(dirfd, dest, O_WRONLY|O_EXCL|O_CREAT, 0200);",
          "148:     if (fd >= 0) {",
          "150:  close(fd);",
          "153:     if (fd < 0 || Ferror(*wfdp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     return rc;",
          "175: }",
          "178:        rpmpsm psm, int nodigest,",
          "179:        struct filedata_s ** firstlink, FD_t *firstlinkfile)",
          "180: {",
          "",
          "[Removed Lines]",
          "177: static int fsmMkfile(rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "",
          "[Added Lines]",
          "178: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:     if (*firstlink == NULL) {",
          "188:  if (fp->sb.st_nlink > 1) {",
          "",
          "[Removed Lines]",
          "186:  rc = fsmOpen(&fd, fp->fpath);",
          "",
          "[Added Lines]",
          "187:  rc = fsmOpen(&fd, dirfd, fp->fpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     } else {",
          "194:  if (*firstlink != fp) {",
          "196:  }",
          "197:  fd = *firstlinkfile;",
          "198:     }",
          "",
          "[Removed Lines]",
          "195:      rc = fsmLink((*firstlink)->fpath, fp->fpath);",
          "",
          "[Added Lines]",
          "196:      rc = fsmLink(dirfd, (*firstlink)->fpath, dirfd, fp->fpath);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "382:     return dirfd;",
          "383: }",
          "386: {",
          "389:     if (_fsm_debug) {",
          "392:         (rc < 0 ? strerror(errno) : \"\"));",
          "393:     }",
          "",
          "[Removed Lines]",
          "385: static int fsmMkfifo(const char *path, mode_t mode)",
          "387:     int rc = mkfifo(path, (mode & 07777));",
          "390:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\",",
          "391:         __func__, path, (unsigned)(mode & 07777),",
          "",
          "[Added Lines]",
          "386: static int fsmMkfifo(int dirfd, const char *path, mode_t mode)",
          "388:     int rc = mkfifoat(dirfd, path, (mode & 07777));",
          "391:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\",",
          "392:         __func__, dirfd, path, (unsigned)(mode & 07777),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "398:     return rc;",
          "399: }",
          "402: {",
          "406:     if (_fsm_debug) {",
          "409:         (unsigned)dev, (rc < 0 ? strerror(errno) : \"\"));",
          "410:     }",
          "",
          "[Removed Lines]",
          "401: static int fsmMknod(const char *path, mode_t mode, dev_t dev)",
          "404:     int rc = mknod(path, (mode & ~07777), dev);",
          "407:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%o, 0x%x) %s\\n\",",
          "408:         __func__, path, (unsigned)(mode & ~07777),",
          "",
          "[Added Lines]",
          "402: static int fsmMknod(int dirfd, const char *path, mode_t mode, dev_t dev)",
          "405:     int rc = mknodat(dirfd, path, (mode & ~07777), dev);",
          "408:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%o, 0x%x) %s\\n\",",
          "409:         __func__, dirfd, path, (unsigned)(mode & ~07777),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "440:      (fpath ? fpath : \"\"));",
          "441: }",
          "444: {",
          "447:     if (_fsm_debug) {",
          "450:     }",
          "452:     if (rc < 0)",
          "",
          "[Removed Lines]",
          "443: static int fsmSymlink(const char *opath, const char *path)",
          "445:     int rc = symlink(opath, path);",
          "448:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "449:         opath, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "444: static int fsmSymlink(const char *opath, int dirfd, const char *path)",
          "446:     int rc = symlinkat(opath, dirfd, path);",
          "449:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %d %s) %s\\n\", __func__,",
          "450:         opath, dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "885:             if (S_ISREG(fp->sb.st_mode)) {",
          "886:   if (rc == RPMERR_ENOENT) {",
          "888:        &firstlink, &firstlinkfile);",
          "889:   }",
          "890:             } else if (S_ISDIR(fp->sb.st_mode)) {",
          "",
          "[Removed Lines]",
          "887:       rc = fsmMkfile(fi, fp, files, psm, nodigest,",
          "",
          "[Added Lines]",
          "888:       rc = fsmMkfile(di.dirfd, fi, fp, files, psm, nodigest,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "896:                 }",
          "897:             } else if (S_ISLNK(fp->sb.st_mode)) {",
          "898:   if (rc == RPMERR_ENOENT) {",
          "900:   }",
          "901:             } else if (S_ISFIFO(fp->sb.st_mode)) {",
          "903:                 if (rc == RPMERR_ENOENT) {",
          "905:                 }",
          "906:             } else if (S_ISCHR(fp->sb.st_mode) ||",
          "907:                        S_ISBLK(fp->sb.st_mode) ||",
          "908:                        S_ISSOCK(fp->sb.st_mode))",
          "909:             {",
          "910:                 if (rc == RPMERR_ENOENT) {",
          "912:                 }",
          "913:             } else {",
          "",
          "[Removed Lines]",
          "899:       rc = fsmSymlink(rpmfiFLink(fi), fp->fpath);",
          "904:                     rc = fsmMkfifo(fp->fpath, 0000);",
          "911:                     rc = fsmMknod(fp->fpath, fp->sb.st_mode, fp->sb.st_rdev);",
          "",
          "[Added Lines]",
          "900:       rc = fsmSymlink(rpmfiFLink(fi), di.dirfd, fp->fpath);",
          "905:                     rc = fsmMkfifo(di.dirfd, fp->fpath, 0000);",
          "912:                     rc = fsmMknod(di.dirfd, fp->fpath, fp->sb.st_mode, fp->sb.st_rdev);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cc29d88ea7b7bc545c93740d21ed8ca3d02a788",
      "candidate_info": {
        "commit_hash": "1cc29d88ea7b7bc545c93740d21ed8ca3d02a788",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/1cc29d88ea7b7bc545c93740d21ed8ca3d02a788",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add fsm debug logging to ensureDir()\n\nThis being one of the more central functions in fsm now, there better\nbe some diagnostics from it too. Especially when we move to\ndirfd+basename operation.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:     }",
          "407:     free(path);",
          "408:     return rc;",
          "409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     if (_fsm_debug) {",
          "408:  rpmlog(RPMLOG_DEBUG, \" %8s (%s: %d) %s\\n\", __func__,",
          "409:   p, dirfd, (rc < 0 ? strerror(errno) : \"\"));",
          "410:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ebb6cdd22d112a56db6f5168674e5930ef96594",
      "candidate_info": {
        "commit_hash": "2ebb6cdd22d112a56db6f5168674e5930ef96594",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/2ebb6cdd22d112a56db6f5168674e5930ef96594",
        "files": [
          "tests/Makefile.am",
          "tests/data/SPECS/fs.spec",
          "tests/rpmi.at"
        ],
        "message": "Add a test-case for \"filesystem\" like package owning /\n\nThis is a special case in various places around rpm, worth having a test\nfor.",
        "before_after_code_files": [
          "tests/Makefile.am||tests/Makefile.am",
          "tests/data/SPECS/fs.spec||tests/data/SPECS/fs.spec",
          "tests/rpmi.at||tests/rpmi.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: EXTRA_DIST += data/SPECS/bcondtest.spec",
          "44: EXTRA_DIST += data/SPECS/buildrequires.spec",
          "45: EXTRA_DIST += data/SPECS/docmiss.spec",
          "46: EXTRA_DIST += data/SPECS/hello.spec",
          "47: EXTRA_DIST += data/SPECS/hello-auto.spec",
          "48: EXTRA_DIST += data/SPECS/hello-autopatch.spec",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: EXTRA_DIST += data/SPECS/fs.spec",
          "",
          "---------------"
        ],
        "tests/data/SPECS/fs.spec||tests/data/SPECS/fs.spec": [
          "File: tests/data/SPECS/fs.spec -> tests/data/SPECS/fs.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Name: fs",
          "2: Version: 1.0",
          "3: Release: 1",
          "4: Summary: filesystem",
          "5: License: GPL",
          "6: BuildArch: noarch",
          "8: %description",
          "9: %{summary}",
          "11: %install",
          "12: mkdir -p %{buildroot}/{bin,lib,opt,etc,tmp,var}",
          "14: %files",
          "15: /",
          "",
          "---------------"
        ],
        "tests/rpmi.at||tests/rpmi.at": [
          "File: tests/rpmi.at -> tests/rpmi.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "1004: ],",
          "1005: [])",
          "1006: AT_CLEANUP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008: AT_SETUP([rpm -U filesystem])",
          "1009: AT_KEYWORDS([install])",
          "1010: AT_CHECK([",
          "1011: RPMDB_INIT",
          "1013: runroot rpmbuild -bb --quiet /data/SPECS/fs.spec",
          "1014: runroot rpm -U --ignoreos /build/RPMS/noarch/fs-1.0-1.noarch.rpm",
          "1015: runroot rpm -Va --nouser --nogroup",
          "1016: runroot rpm -q --whatprovides /",
          "1017: ],",
          "1018: [0],",
          "1019: [fs-1.0-1.noarch",
          "1020: ],",
          "1021: [])",
          "1022: AT_CLEANUP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f5b22850d6437b890541e36c0a5c5caea54f46a",
      "candidate_info": {
        "commit_hash": "9f5b22850d6437b890541e36c0a5c5caea54f46a",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/9f5b22850d6437b890541e36c0a5c5caea54f46a",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add support for fd-based file metadata setting\n\nWe need to support both fd-based and (dirfd+) path based operations\ndue to all the lovely mismatches in POSIX, so lotsa half-duplicated\ntedious stuff here.\n\nAs of this commit, we only use fd based ops for regular files.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: static const char * fileActionString(rpmFileAction a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     return rc;",
          "92: }",
          "95: {",
          "96:     int rc = 0;",
          "98: #if WITH_CAP",
          "99:     if (captxt && *captxt != '\\0') {",
          "100:  cap_t fcaps = cap_from_text(captxt);",
          "108:  if (_fsm_debug) {",
          "111:  }",
          "112:  cap_free(fcaps);",
          "113:     }",
          "",
          "[Removed Lines]",
          "94: static int fsmSetFCaps(int dirfd, const char *path, const char *captxt)",
          "102:  if ((dirfd >= 0 && *path != '/') || fcaps == NULL)",
          "103:      rc = RPMERR_SETCAP_FAILED;",
          "105:  if (!rc && cap_set_file(path, fcaps) != 0)",
          "106:      rc = RPMERR_SETCAP_FAILED;",
          "109:      rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %s) %s\\n\", __func__,",
          "110:      dirfd, path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "95: static int cap_set_fileat(int dirfd, const char *path, cap_t fcaps)",
          "96: {",
          "97:     int rc = -1;",
          "98:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW);",
          "99:     if (fd >= 0) {",
          "100:  rc = cap_set_fd(fd, fcaps);",
          "101:  close(fd);",
          "102:     }",
          "103:     return rc;",
          "104: }",
          "106: static int fsmSetFCaps(int fd, int dirfd, const char *path, const char *captxt)",
          "114:  if (fd >= 0) {",
          "115:      if (fcaps == NULL || cap_set_fd(fd, fcaps))",
          "116:   rc = RPMERR_SETCAP_FAILED;",
          "117:  } else {",
          "118:      if (fcaps == NULL || cap_set_fileat(dirfd, path, fcaps))",
          "119:   rc = RPMERR_SETCAP_FAILED;",
          "120:  }",
          "123:      rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, %s) %s\\n\", __func__,",
          "124:      fd, dirfd, path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:     return S_ISDIR(mode) ? fsmRmdir(dirfd, path) : fsmUnlink(dirfd, path);",
          "508: }",
          "511: {",
          "519:  }",
          "520:     }",
          "524:         (rc < 0 ? strerror(errno) : \"\"));",
          "525:     if (rc < 0) rc = RPMERR_CHOWN_FAILED;",
          "526:     return rc;",
          "527: }",
          "530: {",
          "537:  }",
          "538:     }",
          "539:     if (_fsm_debug)",
          "542:         (rc < 0 ? strerror(errno) : \"\"));",
          "543:     if (rc < 0) rc = RPMERR_CHMOD_FAILED;",
          "544:     return rc;",
          "545: }",
          "548: {",
          "549:     int rc = 0;",
          "550:     struct timespec stamps[2] = {",
          "",
          "[Removed Lines]",
          "510: static int fsmChown(int dirfd, const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "512:     int flags = S_ISLNK(mode) ? AT_SYMLINK_NOFOLLOW : 0;",
          "513:     int rc = fchownat(dirfd, path, uid, gid, flags);",
          "514:     if (rc < 0) {",
          "515:  struct stat st;",
          "516:  if (fstatat(dirfd, path, &st, flags) == 0 &&",
          "517:   (st.st_uid == uid && st.st_gid == gid)) {",
          "518:      rc = 0;",
          "521:     if (_fsm_debug)",
          "522:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d, %d) %s\\n\", __func__,",
          "523:         dirfd, path, (int)uid, (int)gid,",
          "529: static int fsmChmod(int dirfd, const char *path, mode_t mode)",
          "531:     int rc = fchmodat(dirfd, path, (mode & 07777), 0);",
          "532:     if (rc < 0) {",
          "533:  struct stat st;",
          "534:  if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&",
          "535:   (st.st_mode & 07777) == (mode & 07777)) {",
          "536:      rc = 0;",
          "540:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
          "541:         dirfd, path, (unsigned)(mode & 07777),",
          "547: static int fsmUtime(int dirfd, const char *path, mode_t mode, time_t mtime)",
          "",
          "[Added Lines]",
          "524: static int fsmChown(int fd, int dirfd, const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "526:     int rc;",
          "527:     struct stat st;",
          "529:     if (fd >= 0) {",
          "530:  rc = fchown(fd, uid, gid);",
          "531:  if (rc < 0) {",
          "532:      if (fstat(fd, &st) == 0 && (st.st_uid == uid && st.st_gid == gid)) {",
          "533:   rc = 0;",
          "534:      }",
          "535:  }",
          "536:     } else {",
          "537:  int flags = S_ISLNK(mode) ? AT_SYMLINK_NOFOLLOW : 0;",
          "538:  rc = fchownat(dirfd, path, uid, gid, flags);",
          "539:  if (rc < 0) {",
          "540:      struct stat st;",
          "541:      if (fstatat(dirfd, path, &st, flags) == 0 &&",
          "542:       (st.st_uid == uid && st.st_gid == gid)) {",
          "543:   rc = 0;",
          "544:      }",
          "547:     if (_fsm_debug) {",
          "548:  rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, %d, %d) %s\\n\", __func__,",
          "549:         fd, dirfd, path, (int)uid, (int)gid,",
          "551:     }",
          "556: static int fsmChmod(int fd, int dirfd, const char *path, mode_t mode)",
          "558:     mode_t fmode = (mode & 07777);",
          "559:     int rc;",
          "560:     if (fd >= 0) {",
          "561:  rc = fchmod(fd, fmode);",
          "562:  if (rc < 0) {",
          "563:      struct stat st;",
          "564:      if (fstat(fd, &st) == 0 && (st.st_mode & 07777) == fmode) {",
          "565:   rc = 0;",
          "566:      }",
          "567:  }",
          "568:     } else {",
          "569:  rc = fchmodat(dirfd, path, fmode, 0);",
          "570:  if (rc < 0) {",
          "571:      struct stat st;",
          "572:      if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&",
          "573:       (st.st_mode & 07777) == fmode) {",
          "574:   rc = 0;",
          "575:      }",
          "579:  rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, 0%04o) %s\\n\", __func__,",
          "580:         fd, dirfd, path, (unsigned)(mode & 07777),",
          "586: static int fsmUtime(int fd, int dirfd, const char *path, mode_t mode, time_t mtime)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552:  { .tv_sec = mtime, .tv_nsec = 0 },",
          "553:     };",
          "557:     if (_fsm_debug)",
          "560:     if (rc < 0) rc = RPMERR_UTIME_FAILED;",
          "562:     if (rc && S_ISDIR(mode))",
          "",
          "[Removed Lines]",
          "555:     rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);",
          "558:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0x%x) %s\\n\", __func__,",
          "559:         dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "594:     if (fd >= 0)",
          "595:  rc = futimens(fd, stamps);",
          "596:     else",
          "597:  rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);",
          "600:  rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, 0x%x) %s\\n\", __func__,",
          "601:         fd, dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "661:     return rc;",
          "662: }",
          "665:         rpmFileAction action, const struct stat * st,",
          "666:         int nofcaps)",
          "667: {",
          "",
          "[Removed Lines]",
          "664: static int fsmSetmeta(int dirfd, const char *path, rpmfi fi, rpmPlugins plugins,",
          "",
          "[Added Lines]",
          "706: static int fsmSetmeta(int fd, int dirfd, const char *path,",
          "707:         rpmfi fi, rpmPlugins plugins,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "669:     const char *dest = rpmfiFN(fi);",
          "671:     if (!rc && !getuid()) {",
          "673:     }",
          "674:     if (!rc && !S_ISLNK(st->st_mode)) {",
          "676:     }",
          "678:     if (!rc && !nofcaps && S_ISREG(st->st_mode) && !getuid()) {",
          "680:     }",
          "681:     if (!rc) {",
          "683:     }",
          "684:     if (!rc) {",
          "685:  rc = rpmpluginsCallFsmFilePrepare(plugins, fi,",
          "",
          "[Removed Lines]",
          "672:  rc = fsmChown(dirfd, path, st->st_mode, st->st_uid, st->st_gid);",
          "675:  rc = fsmChmod(dirfd, path, st->st_mode);",
          "679:  rc = fsmSetFCaps(dirfd, path, rpmfiFCaps(fi));",
          "682:  rc = fsmUtime(dirfd, path, st->st_mode, rpmfiFMtime(fi));",
          "",
          "[Added Lines]",
          "715:  rc = fsmChown(fd, dirfd, path, st->st_mode, st->st_uid, st->st_gid);",
          "718:  rc = fsmChmod(fd, dirfd, path, st->st_mode);",
          "722:  rc = fsmSetFCaps(fd, dirfd, path, rpmfiFCaps(fi));",
          "725:  rc = fsmUtime(fd, dirfd, path, st->st_mode, rpmfiFMtime(fi));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950: setmeta:",
          "951:      if (!rc && fp->setmeta) {",
          "953:     &fp->sb, nofcaps);",
          "954:      }",
          "",
          "[Removed Lines]",
          "952:   rc = fsmSetmeta(di.dirfd, fp->fpath, fi, plugins, fp->action,",
          "",
          "[Added Lines]",
          "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
          "996:     fi, plugins, fp->action,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef95f110a3b9437ace76c1c34c426204a2339877",
      "candidate_info": {
        "commit_hash": "ef95f110a3b9437ace76c1c34c426204a2339877",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ef95f110a3b9437ace76c1c34c426204a2339877",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Parent directory needs to be open before we can back up stuff\n\nA thinko originating from commit c9b2686a4748c227b0abdc0752d844e35296474e\nwhich doesn't matter greatly as long as we're still using absolute\npaths but will fail as soon as dirfd+basename is used.\n\nAlso pay more attention to the rc's: we must not backup, or run file\npre plugin hook if we know it'll fail.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:         if (!fp->skip) {",
          "919:      int fd = -1;",
          "922:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "923:      }",
          "933:      if (rc)",
          "",
          "[Removed Lines]",
          "921:      if (!fp->suffix && fp != firstlink) {",
          "925:      if (!rc) {",
          "926:   rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "927:     (fp->action == FA_CREATE), 0, &di.dirfd);",
          "928:      }",
          "931:      rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "932:        fp->sb.st_mode, fp->action);",
          "",
          "[Added Lines]",
          "920:      rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "921:        (fp->action == FA_CREATE), 0, &di.dirfd);",
          "924:      if (!rc && !fp->suffix && fp != firstlink) {",
          "929:      if (!rc)",
          "930:   rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "931:            fp->sb.st_mode, fp->action);",
          "",
          "---------------"
        ]
      }
    }
  ]
}