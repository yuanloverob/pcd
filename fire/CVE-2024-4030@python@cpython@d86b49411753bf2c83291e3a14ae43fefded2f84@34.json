{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "00ec116883f71d51b4f27fe7f6ea98cf1f176e6e",
      "candidate_info": {
        "commit_hash": "00ec116883f71d51b4f27fe7f6ea98cf1f176e6e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/00ec116883f71d51b4f27fe7f6ea98cf1f176e6e",
        "files": [
          "Doc/library/ast.rst",
          "Doc/whatsnew/3.13.rst",
          "Lib/test/test_ast.py",
          "Misc/NEWS.d/next/Library/2024-05-09-08-46-12.gh-issue-118851.aPAoJw.rst",
          "Parser/asdl_c.py",
          "Python/Python-ast.c"
        ],
        "message": "[3.13] gh-118851: Default ctx arguments to AST constructors to Load() (GH-118854) (#118871)\n\n(cherry picked from commit 68fbc00dc870f6a8dcbecd2ec19298e21015867f)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\nCo-authored-by: Alex Waygood <Alex.Waygood@Gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_ast.py||Lib/test/test_ast.py",
          "Parser/asdl_c.py||Parser/asdl_c.py",
          "Python/Python-ast.c||Python/Python-ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_ast.py||Lib/test/test_ast.py": [
          "File: Lib/test/test_ast.py -> Lib/test/test_ast.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3036:         self.assertEqual(node.name, 'foo')",
          "3037:         self.assertEqual(node.decorator_list, [])",
          "3039:     def test_custom_subclass_with_no_fields(self):",
          "3040:         class NoInit(ast.AST):",
          "3041:             pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3039:     def test_expr_context(self):",
          "3040:         name = ast.Name(\"x\")",
          "3041:         self.assertEqual(name.id, \"x\")",
          "3042:         self.assertIsInstance(name.ctx, ast.Load)",
          "3044:         name2 = ast.Name(\"x\", ast.Store())",
          "3045:         self.assertEqual(name2.id, \"x\")",
          "3046:         self.assertIsInstance(name2.ctx, ast.Store)",
          "3048:         name3 = ast.Name(\"x\", ctx=ast.Del())",
          "3049:         self.assertEqual(name3.id, \"x\")",
          "3050:         self.assertIsInstance(name3.ctx, ast.Del)",
          "3052:         with self.assertWarnsRegex(DeprecationWarning,",
          "3053:                                    r\"Name\\.__init__ missing 1 required positional argument: 'id'\"):",
          "3054:             name3 = ast.Name()",
          "",
          "---------------"
        ],
        "Parser/asdl_c.py||Parser/asdl_c.py": [
          "File: Parser/asdl_c.py -> Parser/asdl_c.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:                     goto set_remaining_cleanup;",
          "1023:                 }",
          "1024:             }",
          "1025:             else {",
          "1027:                 if (PyErr_WarnFormat(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:             else if (type == state->expr_context_type) {",
          "1027:                 res = PyObject_SetAttr(self, name, state->Load_singleton);",
          "1028:                 if (res < 0) {",
          "1029:                     goto set_remaining_cleanup;",
          "1030:                 }",
          "1031:             }",
          "",
          "---------------"
        ],
        "Python/Python-ast.c||Python/Python-ast.c": [
          "File: Python/Python-ast.c -> Python/Python-ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5221:                     goto set_remaining_cleanup;",
          "5222:                 }",
          "5223:             }",
          "5224:             else {",
          "5226:                 if (PyErr_WarnFormat(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5224:             else if (type == state->expr_context_type) {",
          "5226:                 res = PyObject_SetAttr(self, name, state->Load_singleton);",
          "5227:                 if (res < 0) {",
          "5228:                     goto set_remaining_cleanup;",
          "5229:                 }",
          "5230:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da40fa35263893f78e75205c54fa3bcd24a64468",
      "candidate_info": {
        "commit_hash": "da40fa35263893f78e75205c54fa3bcd24a64468",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/da40fa35263893f78e75205c54fa3bcd24a64468",
        "files": [
          "Doc/library/enum.rst",
          "Lib/test/test_enum.py"
        ],
        "message": "[3.13] gh-120361: Add `nonmember` test with enum flags inside to `test_enum` (GH-120364) (#120511)\n\ngh-120361: Add `nonmember` test with enum flags inside to `test_enum` (GH-120364)\n\n* gh-120361: Add `nonmember` test with enum flags inside to `test_enum`\n(cherry picked from commit 7fadfd82ebf6ea90b38cb3f2a046a51f8601a205)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_enum.py||Lib/test/test_enum.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_enum.py||Lib/test/test_enum.py": [
          "File: Lib/test/test_enum.py -> Lib/test/test_enum.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1495:             spam = nonmember(SpamEnumIsInner)",
          "1496:         self.assertTrue(SpamEnum.spam is SpamEnumIsInner)",
          "1498:     def test_nested_classes_in_enum_with_member(self):",
          "1499:         \"\"\"Support locally-defined nested classes.\"\"\"",
          "1500:         class Outer(Enum):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1498:     def test_using_members_as_nonmember(self):",
          "1499:         class Example(Flag):",
          "1500:             A = 1",
          "1501:             B = 2",
          "1502:             ALL = nonmember(A | B)",
          "1504:         self.assertEqual(Example.A.value, 1)",
          "1505:         self.assertEqual(Example.B.value, 2)",
          "1506:         self.assertEqual(Example.ALL, 3)",
          "1507:         self.assertIs(type(Example.ALL), int)",
          "1509:         class Example(Flag):",
          "1510:             A = auto()",
          "1511:             B = auto()",
          "1512:             ALL = nonmember(A | B)",
          "1514:         self.assertEqual(Example.A.value, 1)",
          "1515:         self.assertEqual(Example.B.value, 2)",
          "1516:         self.assertEqual(Example.ALL, 3)",
          "1517:         self.assertIs(type(Example.ALL), int)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08416065a78516b923c1232c76f5fb674cc59618",
      "candidate_info": {
        "commit_hash": "08416065a78516b923c1232c76f5fb674cc59618",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/08416065a78516b923c1232c76f5fb674cc59618",
        "files": [
          "Include/internal/pycore_critical_section.h",
          "Lib/test/test_free_threading/test_str.py",
          "Misc/NEWS.d/next/C API/2024-05-21-11-35-11.gh-issue-119247.U6n6mh.rst",
          "Objects/unicodeobject.c"
        ],
        "message": "[3.13] gh-119247: Add macros to use PySequence_Fast safely in free-threaded build (GH-119315) (#119419)\n\nAdd `Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST` and\n`Py_END_CRITICAL_SECTION_SEQUENCE_FAST` macros and update `str.join` to use\nthem. Also add a regression test that would crash reliably without this\npatch.\n(cherry picked from commit baf347d91643a83483bae110092750d39471e0c2)\n\nCo-authored-by: Josh {*()} Rosenberg <26495692+MojoVampire@users.noreply.github.com>",
        "before_after_code_files": [
          "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h",
          "Lib/test/test_free_threading/test_str.py||Lib/test/test_free_threading/test_str.py",
          "Objects/unicodeobject.c||Objects/unicodeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h": [
          "File: Include/internal/pycore_critical_section.h -> Include/internal/pycore_critical_section.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         _PyCriticalSection2_End(&_cs2);                                 \\",
          "109:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: # define Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST(original)              \\",
          "117:     {                                                                   \\",
          "118:         PyObject *_orig_seq = _PyObject_CAST(original);                 \\",
          "119:         const bool _should_lock_cs = PyList_CheckExact(_orig_seq);      \\",
          "120:         _PyCriticalSection _cs;                                         \\",
          "121:         if (_should_lock_cs) {                                          \\",
          "122:             _PyCriticalSection_Begin(&_cs, &_orig_seq->ob_mutex);       \\",
          "123:         }",
          "125: # define Py_END_CRITICAL_SECTION_SEQUENCE_FAST()                        \\",
          "126:         if (_should_lock_cs) {                                          \\",
          "127:             _PyCriticalSection_End(&_cs);                               \\",
          "128:         }                                                               \\",
          "129:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: # define Py_END_CRITICAL_SECTION()",
          "138: # define Py_BEGIN_CRITICAL_SECTION2(a, b)",
          "139: # define Py_END_CRITICAL_SECTION2()",
          "140: # define _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(mutex)",
          "141: # define _Py_CRITICAL_SECTION_ASSERT_OBJECT_LOCKED(op)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: # define Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST(original)",
          "161: # define Py_END_CRITICAL_SECTION_SEQUENCE_FAST()",
          "",
          "---------------"
        ],
        "Lib/test/test_free_threading/test_str.py||Lib/test/test_free_threading/test_str.py": [
          "File: Lib/test/test_free_threading/test_str.py -> Lib/test/test_free_threading/test_str.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import sys",
          "2: import unittest",
          "4: from itertools import cycle",
          "5: from threading import Event, Thread",
          "6: from unittest import TestCase",
          "8: from test.support import threading_helper",
          "10: @threading_helper.requires_working_threading()",
          "11: class TestStr(TestCase):",
          "12:     def test_racing_join_extend(self):",
          "13:         '''Test joining a string being extended by another thread'''",
          "14:         l = []",
          "15:         ITERS = 100",
          "16:         READERS = 10",
          "17:         done_event = Event()",
          "18:         def writer_func():",
          "19:             for i in range(ITERS):",
          "20:                 l.extend(map(str, range(i)))",
          "21:                 l.clear()",
          "22:             done_event.set()",
          "23:         def reader_func():",
          "24:             while not done_event.is_set():",
          "25:                 ''.join(l)",
          "26:         writer = Thread(target=writer_func)",
          "27:         readers = []",
          "28:         for x in range(READERS):",
          "29:             reader = Thread(target=reader_func)",
          "30:             readers.append(reader)",
          "31:             reader.start()",
          "33:         writer.start()",
          "34:         writer.join()",
          "35:         for reader in readers:",
          "36:             reader.join()",
          "38:     def test_racing_join_replace(self):",
          "39:         '''",
          "40:         Test joining a string of characters being replaced with ephemeral",
          "41:         strings by another thread.",
          "42:         '''",
          "43:         l = [*'abcdefg']",
          "44:         MAX_ORDINAL = 1_000",
          "45:         READERS = 10",
          "46:         done_event = Event()",
          "48:         def writer_func():",
          "49:             for i, c in zip(cycle(range(len(l))),",
          "50:                             map(chr, range(128, MAX_ORDINAL))):",
          "51:                 l[i] = c",
          "52:             done_event.set()",
          "54:         def reader_func():",
          "55:             while not done_event.is_set():",
          "56:                 ''.join(l)",
          "57:                 ''.join(l)",
          "58:                 ''.join(l)",
          "59:                 ''.join(l)",
          "61:         writer = Thread(target=writer_func)",
          "62:         readers = []",
          "63:         for x in range(READERS):",
          "64:             reader = Thread(target=reader_func)",
          "65:             readers.append(reader)",
          "66:             reader.start()",
          "68:         writer.start()",
          "69:         writer.join()",
          "70:         for reader in readers:",
          "71:             reader.join()",
          "74: if __name__ == \"__main__\":",
          "75:     unittest.main()",
          "",
          "---------------"
        ],
        "Objects/unicodeobject.c||Objects/unicodeobject.c": [
          "File: Objects/unicodeobject.c -> Objects/unicodeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"pycore_bytesobject.h\"   // _PyBytes_Repeat()",
          "45: #include \"pycore_ceval.h\"         // _PyEval_GetBuiltin()",
          "46: #include \"pycore_codecs.h\"        // _PyCodec_Lookup()",
          "47: #include \"pycore_format.h\"        // F_LJUST",
          "48: #include \"pycore_initconfig.h\"    // _PyStatus_OK()",
          "49: #include \"pycore_interp.h\"        // PyInterpreterState.fs_codec",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include \"pycore_critical_section.h\" // Py_*_CRITICAL_SECTION_SEQUENCE_FAST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9559:         return NULL;",
          "9560:     }",
          "9566:     items = PySequence_Fast_ITEMS(fseq);",
          "9567:     seqlen = PySequence_Fast_GET_SIZE(fseq);",
          "9568:     res = _PyUnicode_JoinArray(separator, items, seqlen);",
          "9569:     Py_DECREF(fseq);",
          "9570:     return res;",
          "9571: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9563:     Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST(seq);",
          "9569:     Py_END_CRITICAL_SECTION_SEQUENCE_FAST();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99de20d729c14c9ea062c205b55925305ed797b6",
      "candidate_info": {
        "commit_hash": "99de20d729c14c9ea062c205b55925305ed797b6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/99de20d729c14c9ea062c205b55925305ed797b6",
        "files": [
          "Lib/argparse.py",
          "Lib/test/test_argparse.py",
          "Misc/NEWS.d/next/Library/2024-06-26-03-04-24.gh-issue-121018.clVSc4.rst"
        ],
        "message": "[3.13] gh-121018: Fix more cases of exiting in argparse when exit_on_error=False (GH-121056) (GH-121128)\n\n* parse_intermixed_args() now raises ArgumentError instead of calling\n  error() if exit_on_error is false.\n* Internal code now always raises ArgumentError instead of calling\n  error(). It is then caught at the higher level and error() is called if\n  exit_on_error is true.\n(cherry picked from commit 81a654a3425eaa05a51342509089533c1f623f1b)",
        "before_after_code_files": [
          "Lib/argparse.py||Lib/argparse.py",
          "Lib/test/test_argparse.py||Lib/test/test_argparse.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/argparse.py||Lib/argparse.py": [
          "File: Lib/argparse.py -> Lib/argparse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1819:     # ==================================",
          "1820:     def add_subparsers(self, **kwargs):",
          "1821:         if self._subparsers is not None:",
          "1824:         # add the parser class to the arguments if it's not present",
          "1825:         kwargs.setdefault('parser_class', type(self))",
          "",
          "[Removed Lines]",
          "1822:             self.error(_('cannot have multiple subparser arguments'))",
          "",
          "[Added Lines]",
          "1822:             raise ArgumentError(None, _('cannot have multiple subparser arguments'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1874:             msg = _('unrecognized arguments: %s') % ' '.join(argv)",
          "1875:             if self.exit_on_error:",
          "1876:                 self.error(msg)",
          "1878:         return args",
          "1880:     def parse_known_args(self, args=None, namespace=None):",
          "",
          "[Removed Lines]",
          "1877:             raise ArgumentError(None, msg)",
          "",
          "[Added Lines]",
          "1877:             else:",
          "1878:                 raise ArgumentError(None, msg)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2163:                                 self._get_value(action, action.default))",
          "2165:         if required_actions:",
          "2167:                        ', '.join(required_actions))",
          "2169:         # make sure all required groups had one option present",
          "",
          "[Removed Lines]",
          "2166:             self.error(_('the following arguments are required: %s') %",
          "",
          "[Added Lines]",
          "2167:             raise ArgumentError(None, _('the following arguments are required: %s') %",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2179:                              for action in group._group_actions",
          "2180:                              if action.help is not SUPPRESS]",
          "2181:                     msg = _('one of the arguments %s is required')",
          "2184:         # return the updated namespace and the extra arguments",
          "2185:         return namespace, extras",
          "",
          "[Removed Lines]",
          "2182:                     self.error(msg % ' '.join(names))",
          "",
          "[Added Lines]",
          "2183:                     raise ArgumentError(None, msg % ' '.join(names))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2206:                         arg_strings = self._read_args_from_files(arg_strings)",
          "2207:                         new_arg_strings.extend(arg_strings)",
          "2208:                 except OSError as err:",
          "2211:         # return the modified argument list",
          "2212:         return new_arg_strings",
          "",
          "[Removed Lines]",
          "2209:                     self.error(str(err))",
          "",
          "[Added Lines]",
          "2210:                     raise ArgumentError(None, str(err))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2286:                 for action, option_string, sep, explicit_arg in option_tuples])",
          "2287:             args = {'option': arg_string, 'matches': options}",
          "2288:             msg = _('ambiguous option: %(option)s could match %(matches)s')",
          "2291:         # if exactly one action matched, this segmentation is good,",
          "2292:         # so return the parsed action",
          "",
          "[Removed Lines]",
          "2289:             self.error(msg % args)",
          "",
          "[Added Lines]",
          "2290:             raise ArgumentError(None, msg % args)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2347:         # shouldn't ever get here",
          "2348:         else:",
          "2351:         # return the collected option tuples",
          "2352:         return result",
          "",
          "[Removed Lines]",
          "2349:             self.error(_('unexpected option string: %s') % option_string)",
          "",
          "[Added Lines]",
          "2350:             raise ArgumentError(None, _('unexpected option string: %s') % option_string)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2403:     def parse_intermixed_args(self, args=None, namespace=None):",
          "2404:         args, argv = self.parse_known_intermixed_args(args, namespace)",
          "2405:         if argv:",
          "2408:         return args",
          "2410:     def parse_known_intermixed_args(self, args=None, namespace=None):",
          "",
          "[Removed Lines]",
          "2406:             msg = _('unrecognized arguments: %s')",
          "2407:             self.error(msg % ' '.join(argv))",
          "",
          "[Added Lines]",
          "2407:             msg = _('unrecognized arguments: %s') % ' '.join(argv)",
          "2408:             if self.exit_on_error:",
          "2409:                 self.error(msg)",
          "2410:             else:",
          "2411:                 raise ArgumentError(None, msg)",
          "",
          "---------------"
        ],
        "Lib/test/test_argparse.py||Lib/test/test_argparse.py": [
          "File: Lib/test/test_argparse.py -> Lib/test/test_argparse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2190:         else:",
          "2191:             subparsers_kwargs['help'] = 'command help'",
          "2192:         subparsers = parser.add_subparsers(**subparsers_kwargs)",
          "2195:         # add first sub-parser",
          "2196:         parser1_kwargs = dict(description='1 description')",
          "",
          "[Removed Lines]",
          "2193:         self.assertArgumentParserError(parser.add_subparsers)",
          "",
          "[Added Lines]",
          "2193:         self.assertRaisesRegex(argparse.ArgumentError,",
          "2194:                                'cannot have multiple subparser arguments',",
          "2195:                                parser.add_subparsers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6085: class TestExitOnError(TestCase):",
          "6087:     def setUp(self):",
          "6089:         self.parser.add_argument('--integers', metavar='N', type=int)",
          "6091:     def test_exit_on_error_with_good_args(self):",
          "",
          "[Removed Lines]",
          "6088:         self.parser = argparse.ArgumentParser(exit_on_error=False)",
          "",
          "[Added Lines]",
          "6090:         self.parser = argparse.ArgumentParser(exit_on_error=False,",
          "6091:                                               fromfile_prefix_chars='@')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6096:         with self.assertRaises(argparse.ArgumentError):",
          "6097:             self.parser.parse_args('--integers a'.split())",
          "6103: def tearDownModule():",
          "6104:     # Remove global references to avoid looking like we have refleaks.",
          "",
          "[Removed Lines]",
          "6099:     def test_exit_on_error_with_unrecognized_args(self):",
          "6100:         with self.assertRaises(argparse.ArgumentError):",
          "6101:             self.parser.parse_args('--foo bar'.split())",
          "",
          "[Added Lines]",
          "6102:     def test_unrecognized_args(self):",
          "6103:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6104:                                'unrecognized arguments: --foo bar',",
          "6105:                                self.parser.parse_args, '--foo bar'.split())",
          "6107:     def test_unrecognized_intermixed_args(self):",
          "6108:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6109:                                'unrecognized arguments: --foo bar',",
          "6110:                                self.parser.parse_intermixed_args, '--foo bar'.split())",
          "6112:     def test_required_args(self):",
          "6113:         self.parser.add_argument('bar')",
          "6114:         self.parser.add_argument('baz')",
          "6115:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6116:                                'the following arguments are required: bar, baz',",
          "6117:                                self.parser.parse_args, [])",
          "6119:     def test_required_mutually_exclusive_args(self):",
          "6120:         group = self.parser.add_mutually_exclusive_group(required=True)",
          "6121:         group.add_argument('--bar')",
          "6122:         group.add_argument('--baz')",
          "6123:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6124:                                'one of the arguments --bar --baz is required',",
          "6125:                                self.parser.parse_args, [])",
          "6127:     def test_ambiguous_option(self):",
          "6128:         self.parser.add_argument('--foobaz')",
          "6129:         self.parser.add_argument('--fooble', action='store_true')",
          "6130:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6131:                                \"ambiguous option: --foob could match --foobaz, --fooble\",",
          "6132:                                self.parser.parse_args, ['--foob'])",
          "6134:     def test_os_error(self):",
          "6135:         self.parser.add_argument('file')",
          "6136:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6137:                                \"No such file or directory: 'no-such-file'\",",
          "6138:                                self.parser.parse_args, ['@no-such-file'])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49e5740135670e04ae6da7e6f52dbe380655e0f1",
      "candidate_info": {
        "commit_hash": "49e5740135670e04ae6da7e6f52dbe380655e0f1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/49e5740135670e04ae6da7e6f52dbe380655e0f1",
        "files": [
          "Doc/whatsnew/3.13.rst",
          "Lib/functools.py",
          "Lib/inspect.py",
          "Lib/test/test_functools.py",
          "Lib/test/test_inspect/test_inspect.py",
          "Misc/NEWS.d/next/Library/2024-06-27-13-47-14.gh-issue-121027.jh55EC.rst",
          "Modules/_functoolsmodule.c"
        ],
        "message": "[3.13] gh-121027: Add a future warning in functools.partial.__get__ (GH-121086) (#121092)\n\ngh-121027: Add a future warning in functools.partial.__get__ (GH-121086)\n(cherry picked from commit db96edd6d1a58045196a71aff565743f493b5fbb)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/functools.py||Lib/functools.py",
          "Lib/inspect.py||Lib/inspect.py",
          "Lib/test/test_functools.py||Lib/test/test_functools.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py",
          "Modules/_functoolsmodule.c||Modules/_functoolsmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/functools.py||Lib/functools.py": [
          "File: Lib/functools.py -> Lib/functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:         args.extend(f\"{k}={v!r}\" for (k, v) in self.keywords.items())",
          "312:         return f\"{module}.{qualname}({', '.join(args)})\"",
          "314:     def __reduce__(self):",
          "315:         return type(self), (self.func,), (self.func, self.args,",
          "316:                self.keywords or None, self.__dict__ or None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:     def __get__(self, obj, objtype=None):",
          "315:         if obj is None:",
          "316:             return self",
          "317:         import warnings",
          "318:         warnings.warn('functools.partial will be a method descriptor in '",
          "319:                       'future Python versions; wrap it in staticmethod() '",
          "320:                       'if you want to preserve the old behavior',",
          "321:                       FutureWarning, 2)",
          "322:         return self",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392:     def __get__(self, obj, cls=None):",
          "393:         get = getattr(self.func, \"__get__\", None)",
          "394:         result = None",
          "396:             new_func = get(obj, cls)",
          "397:             if new_func is not self.func:",
          "398:                 # Assume __get__ returning something new indicates the",
          "",
          "[Removed Lines]",
          "395:         if get is not None:",
          "",
          "[Added Lines]",
          "405:         if get is not None and not isinstance(self.func, partial):",
          "",
          "---------------"
        ],
        "Lib/inspect.py||Lib/inspect.py": [
          "File: Lib/inspect.py -> Lib/inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2556:                 new_params = (first_wrapped_param,) + sig_params",
          "2557:                 return sig.replace(parameters=new_params)",
          "2559:     if isfunction(obj) or _signature_is_functionlike(obj):",
          "2560:         # If it's a pure Python function, or an object that is duck type",
          "2561:         # of a Python function (Cython functions, for instance), then:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2559:     if isinstance(obj, functools.partial):",
          "2560:         wrapped_sig = _get_signature_of(obj.func)",
          "2561:         return _signature_get_partial(wrapped_sig, obj)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2567:         return _signature_from_builtin(sigcls, obj,",
          "2568:                                        skip_bound_arg=skip_bound_arg)",
          "2574:     if isinstance(obj, type):",
          "2575:         # obj is a class or a metaclass",
          "",
          "[Removed Lines]",
          "2570:     if isinstance(obj, functools.partial):",
          "2571:         wrapped_sig = _get_signature_of(obj.func)",
          "2572:         return _signature_get_partial(wrapped_sig, obj)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/test/test_functools.py||Lib/test/test_functools.py": [
          "File: Lib/test/test_functools.py -> Lib/test/test_functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:         f = self.partial(object)",
          "396:         self.assertRaises(TypeError, f.__setstate__, BadSequence())",
          "398: @unittest.skipUnless(c_functools, 'requires the C _functools module')",
          "399: class TestPartialC(TestPartial, unittest.TestCase):",
          "400:     if c_functools:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     def test_partial_as_method(self):",
          "399:         class A:",
          "400:             meth = self.partial(capture, 1, a=2)",
          "401:             cmeth = classmethod(self.partial(capture, 1, a=2))",
          "402:             smeth = staticmethod(self.partial(capture, 1, a=2))",
          "404:         a = A()",
          "405:         self.assertEqual(A.meth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "406:         self.assertEqual(A.cmeth(3, b=4), ((1, A, 3), {'a': 2, 'b': 4}))",
          "407:         self.assertEqual(A.smeth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "408:         with self.assertWarns(FutureWarning) as w:",
          "409:             self.assertEqual(a.meth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "410:         self.assertEqual(w.filename, __file__)",
          "411:         self.assertEqual(a.cmeth(3, b=4), ((1, A, 3), {'a': 2, 'b': 4}))",
          "412:         self.assertEqual(a.smeth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:                 def __init__(self, b):",
          "3874:                     pass",
          "3881:         with self.subTest('partialmethod'):",
          "3882:             class CM(type):",
          "",
          "[Removed Lines]",
          "3876:             self.assertEqual(C(1), (2, 1))",
          "3877:             self.assertEqual(self.signature(C),",
          "3878:                             ((('a', ..., ..., \"positional_or_keyword\"),),",
          "3879:                             ...))",
          "",
          "[Added Lines]",
          "3876:             with self.assertWarns(FutureWarning):",
          "3877:                 self.assertEqual(C(1), (2, 1))",
          "3878:             with self.assertWarns(FutureWarning):",
          "3879:                 self.assertEqual(self.signature(C),",
          "3880:                                 ((('a', ..., ..., \"positional_or_keyword\"),),",
          "3881:                                 ...))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4024:             class C:",
          "4025:                 __init__ = functools.partial(lambda x, a: None, 2)",
          "4032:         with self.subTest('partialmethod'):",
          "4033:             class C:",
          "",
          "[Removed Lines]",
          "4027:             C(1)  # does not raise",
          "4028:             self.assertEqual(self.signature(C),",
          "4029:                             ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4030:                             ...))",
          "",
          "[Added Lines]",
          "4029:             with self.assertWarns(FutureWarning):",
          "4030:                 C(1)  # does not raise",
          "4031:             with self.assertWarns(FutureWarning):",
          "4032:                 self.assertEqual(self.signature(C),",
          "4033:                                 ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4034:                                 ...))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4282:             class C:",
          "4283:                 __call__ = functools.partial(lambda x, a: (x, a), 2)",
          "4290:         with self.subTest('partialmethod'):",
          "4291:             class C:",
          "",
          "[Removed Lines]",
          "4285:             self.assertEqual(C()(1), (2, 1))",
          "4286:             self.assertEqual(self.signature(C()),",
          "4287:                             ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4288:                             ...))",
          "",
          "[Added Lines]",
          "4289:             c = C()",
          "4290:             with self.assertWarns(FutureWarning):",
          "4291:                 self.assertEqual(c(1), (2, 1))",
          "4292:             with self.assertWarns(FutureWarning):",
          "4293:                 self.assertEqual(self.signature(c),",
          "4294:                                 ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4295:                                 ...))",
          "",
          "---------------"
        ],
        "Modules/_functoolsmodule.c||Modules/_functoolsmodule.c": [
          "File: Modules/_functoolsmodule.c -> Modules/_functoolsmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     Py_DECREF(tp);",
          "198: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: static PyObject *",
          "201: partial_descr_get(PyObject *self, PyObject *obj, PyObject *type)",
          "202: {",
          "203:     if (obj == Py_None || obj == NULL) {",
          "204:         return Py_NewRef(self);",
          "205:     }",
          "206:     if (PyErr_WarnEx(PyExc_FutureWarning,",
          "207:                      \"functools.partial will be a method descriptor in \"",
          "208:                      \"future Python versions; wrap it in staticmethod() \"",
          "209:                      \"if you want to preserve the old behavior\", 1) < 0)",
          "210:     {",
          "211:         return NULL;",
          "212:     }",
          "213:     return Py_NewRef(self);",
          "214: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:     {Py_tp_methods, partial_methods},",
          "515:     {Py_tp_members, partial_memberlist},",
          "516:     {Py_tp_getset, partial_getsetlist},",
          "517:     {Py_tp_new, partial_new},",
          "518:     {Py_tp_free, PyObject_GC_Del},",
          "519:     {0, 0}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532:     {Py_tp_descr_get, (descrgetfunc)partial_descr_get},",
          "",
          "---------------"
        ]
      }
    }
  ]
}