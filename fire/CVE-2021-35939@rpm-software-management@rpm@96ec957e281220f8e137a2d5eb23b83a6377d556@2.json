{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ebb6cdd22d112a56db6f5168674e5930ef96594",
      "candidate_info": {
        "commit_hash": "2ebb6cdd22d112a56db6f5168674e5930ef96594",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/2ebb6cdd22d112a56db6f5168674e5930ef96594",
        "files": [
          "tests/Makefile.am",
          "tests/data/SPECS/fs.spec",
          "tests/rpmi.at"
        ],
        "message": "Add a test-case for \"filesystem\" like package owning /\n\nThis is a special case in various places around rpm, worth having a test\nfor.",
        "before_after_code_files": [
          "tests/Makefile.am||tests/Makefile.am",
          "tests/data/SPECS/fs.spec||tests/data/SPECS/fs.spec",
          "tests/rpmi.at||tests/rpmi.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: EXTRA_DIST += data/SPECS/bcondtest.spec",
          "44: EXTRA_DIST += data/SPECS/buildrequires.spec",
          "45: EXTRA_DIST += data/SPECS/docmiss.spec",
          "46: EXTRA_DIST += data/SPECS/hello.spec",
          "47: EXTRA_DIST += data/SPECS/hello-auto.spec",
          "48: EXTRA_DIST += data/SPECS/hello-autopatch.spec",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: EXTRA_DIST += data/SPECS/fs.spec",
          "",
          "---------------"
        ],
        "tests/data/SPECS/fs.spec||tests/data/SPECS/fs.spec": [
          "File: tests/data/SPECS/fs.spec -> tests/data/SPECS/fs.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Name: fs",
          "2: Version: 1.0",
          "3: Release: 1",
          "4: Summary: filesystem",
          "5: License: GPL",
          "6: BuildArch: noarch",
          "8: %description",
          "9: %{summary}",
          "11: %install",
          "12: mkdir -p %{buildroot}/{bin,lib,opt,etc,tmp,var}",
          "14: %files",
          "15: /",
          "",
          "---------------"
        ],
        "tests/rpmi.at||tests/rpmi.at": [
          "File: tests/rpmi.at -> tests/rpmi.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "1004: ],",
          "1005: [])",
          "1006: AT_CLEANUP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1008: AT_SETUP([rpm -U filesystem])",
          "1009: AT_KEYWORDS([install])",
          "1010: AT_CHECK([",
          "1011: RPMDB_INIT",
          "1013: runroot rpmbuild -bb --quiet /data/SPECS/fs.spec",
          "1014: runroot rpm -U --ignoreos /build/RPMS/noarch/fs-1.0-1.noarch.rpm",
          "1015: runroot rpm -Va --nouser --nogroup",
          "1016: runroot rpm -q --whatprovides /",
          "1017: ],",
          "1018: [0],",
          "1019: [fs-1.0-1.noarch",
          "1020: ],",
          "1021: [])",
          "1022: AT_CLEANUP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f5b22850d6437b890541e36c0a5c5caea54f46a",
      "candidate_info": {
        "commit_hash": "9f5b22850d6437b890541e36c0a5c5caea54f46a",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/9f5b22850d6437b890541e36c0a5c5caea54f46a",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add support for fd-based file metadata setting\n\nWe need to support both fd-based and (dirfd+) path based operations\ndue to all the lovely mismatches in POSIX, so lotsa half-duplicated\ntedious stuff here.\n\nAs of this commit, we only use fd based ops for regular files.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: static const char * fileActionString(rpmFileAction a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     return rc;",
          "92: }",
          "95: {",
          "96:     int rc = 0;",
          "98: #if WITH_CAP",
          "99:     if (captxt && *captxt != '\\0') {",
          "100:  cap_t fcaps = cap_from_text(captxt);",
          "108:  if (_fsm_debug) {",
          "111:  }",
          "112:  cap_free(fcaps);",
          "113:     }",
          "",
          "[Removed Lines]",
          "94: static int fsmSetFCaps(int dirfd, const char *path, const char *captxt)",
          "102:  if ((dirfd >= 0 && *path != '/') || fcaps == NULL)",
          "103:      rc = RPMERR_SETCAP_FAILED;",
          "105:  if (!rc && cap_set_file(path, fcaps) != 0)",
          "106:      rc = RPMERR_SETCAP_FAILED;",
          "109:      rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %s) %s\\n\", __func__,",
          "110:      dirfd, path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "95: static int cap_set_fileat(int dirfd, const char *path, cap_t fcaps)",
          "96: {",
          "97:     int rc = -1;",
          "98:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW);",
          "99:     if (fd >= 0) {",
          "100:  rc = cap_set_fd(fd, fcaps);",
          "101:  close(fd);",
          "102:     }",
          "103:     return rc;",
          "104: }",
          "106: static int fsmSetFCaps(int fd, int dirfd, const char *path, const char *captxt)",
          "114:  if (fd >= 0) {",
          "115:      if (fcaps == NULL || cap_set_fd(fd, fcaps))",
          "116:   rc = RPMERR_SETCAP_FAILED;",
          "117:  } else {",
          "118:      if (fcaps == NULL || cap_set_fileat(dirfd, path, fcaps))",
          "119:   rc = RPMERR_SETCAP_FAILED;",
          "120:  }",
          "123:      rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, %s) %s\\n\", __func__,",
          "124:      fd, dirfd, path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:     return S_ISDIR(mode) ? fsmRmdir(dirfd, path) : fsmUnlink(dirfd, path);",
          "508: }",
          "511: {",
          "519:  }",
          "520:     }",
          "524:         (rc < 0 ? strerror(errno) : \"\"));",
          "525:     if (rc < 0) rc = RPMERR_CHOWN_FAILED;",
          "526:     return rc;",
          "527: }",
          "530: {",
          "537:  }",
          "538:     }",
          "539:     if (_fsm_debug)",
          "542:         (rc < 0 ? strerror(errno) : \"\"));",
          "543:     if (rc < 0) rc = RPMERR_CHMOD_FAILED;",
          "544:     return rc;",
          "545: }",
          "548: {",
          "549:     int rc = 0;",
          "550:     struct timespec stamps[2] = {",
          "",
          "[Removed Lines]",
          "510: static int fsmChown(int dirfd, const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "512:     int flags = S_ISLNK(mode) ? AT_SYMLINK_NOFOLLOW : 0;",
          "513:     int rc = fchownat(dirfd, path, uid, gid, flags);",
          "514:     if (rc < 0) {",
          "515:  struct stat st;",
          "516:  if (fstatat(dirfd, path, &st, flags) == 0 &&",
          "517:   (st.st_uid == uid && st.st_gid == gid)) {",
          "518:      rc = 0;",
          "521:     if (_fsm_debug)",
          "522:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d, %d) %s\\n\", __func__,",
          "523:         dirfd, path, (int)uid, (int)gid,",
          "529: static int fsmChmod(int dirfd, const char *path, mode_t mode)",
          "531:     int rc = fchmodat(dirfd, path, (mode & 07777), 0);",
          "532:     if (rc < 0) {",
          "533:  struct stat st;",
          "534:  if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&",
          "535:   (st.st_mode & 07777) == (mode & 07777)) {",
          "536:      rc = 0;",
          "540:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
          "541:         dirfd, path, (unsigned)(mode & 07777),",
          "547: static int fsmUtime(int dirfd, const char *path, mode_t mode, time_t mtime)",
          "",
          "[Added Lines]",
          "524: static int fsmChown(int fd, int dirfd, const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "526:     int rc;",
          "527:     struct stat st;",
          "529:     if (fd >= 0) {",
          "530:  rc = fchown(fd, uid, gid);",
          "531:  if (rc < 0) {",
          "532:      if (fstat(fd, &st) == 0 && (st.st_uid == uid && st.st_gid == gid)) {",
          "533:   rc = 0;",
          "534:      }",
          "535:  }",
          "536:     } else {",
          "537:  int flags = S_ISLNK(mode) ? AT_SYMLINK_NOFOLLOW : 0;",
          "538:  rc = fchownat(dirfd, path, uid, gid, flags);",
          "539:  if (rc < 0) {",
          "540:      struct stat st;",
          "541:      if (fstatat(dirfd, path, &st, flags) == 0 &&",
          "542:       (st.st_uid == uid && st.st_gid == gid)) {",
          "543:   rc = 0;",
          "544:      }",
          "547:     if (_fsm_debug) {",
          "548:  rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, %d, %d) %s\\n\", __func__,",
          "549:         fd, dirfd, path, (int)uid, (int)gid,",
          "551:     }",
          "556: static int fsmChmod(int fd, int dirfd, const char *path, mode_t mode)",
          "558:     mode_t fmode = (mode & 07777);",
          "559:     int rc;",
          "560:     if (fd >= 0) {",
          "561:  rc = fchmod(fd, fmode);",
          "562:  if (rc < 0) {",
          "563:      struct stat st;",
          "564:      if (fstat(fd, &st) == 0 && (st.st_mode & 07777) == fmode) {",
          "565:   rc = 0;",
          "566:      }",
          "567:  }",
          "568:     } else {",
          "569:  rc = fchmodat(dirfd, path, fmode, 0);",
          "570:  if (rc < 0) {",
          "571:      struct stat st;",
          "572:      if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&",
          "573:       (st.st_mode & 07777) == fmode) {",
          "574:   rc = 0;",
          "575:      }",
          "579:  rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, 0%04o) %s\\n\", __func__,",
          "580:         fd, dirfd, path, (unsigned)(mode & 07777),",
          "586: static int fsmUtime(int fd, int dirfd, const char *path, mode_t mode, time_t mtime)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552:  { .tv_sec = mtime, .tv_nsec = 0 },",
          "553:     };",
          "557:     if (_fsm_debug)",
          "560:     if (rc < 0) rc = RPMERR_UTIME_FAILED;",
          "562:     if (rc && S_ISDIR(mode))",
          "",
          "[Removed Lines]",
          "555:     rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);",
          "558:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0x%x) %s\\n\", __func__,",
          "559:         dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "594:     if (fd >= 0)",
          "595:  rc = futimens(fd, stamps);",
          "596:     else",
          "597:  rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);",
          "600:  rpmlog(RPMLOG_DEBUG, \" %8s (%d - %d %s, 0x%x) %s\\n\", __func__,",
          "601:         fd, dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "661:     return rc;",
          "662: }",
          "665:         rpmFileAction action, const struct stat * st,",
          "666:         int nofcaps)",
          "667: {",
          "",
          "[Removed Lines]",
          "664: static int fsmSetmeta(int dirfd, const char *path, rpmfi fi, rpmPlugins plugins,",
          "",
          "[Added Lines]",
          "706: static int fsmSetmeta(int fd, int dirfd, const char *path,",
          "707:         rpmfi fi, rpmPlugins plugins,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "669:     const char *dest = rpmfiFN(fi);",
          "671:     if (!rc && !getuid()) {",
          "673:     }",
          "674:     if (!rc && !S_ISLNK(st->st_mode)) {",
          "676:     }",
          "678:     if (!rc && !nofcaps && S_ISREG(st->st_mode) && !getuid()) {",
          "680:     }",
          "681:     if (!rc) {",
          "683:     }",
          "684:     if (!rc) {",
          "685:  rc = rpmpluginsCallFsmFilePrepare(plugins, fi,",
          "",
          "[Removed Lines]",
          "672:  rc = fsmChown(dirfd, path, st->st_mode, st->st_uid, st->st_gid);",
          "675:  rc = fsmChmod(dirfd, path, st->st_mode);",
          "679:  rc = fsmSetFCaps(dirfd, path, rpmfiFCaps(fi));",
          "682:  rc = fsmUtime(dirfd, path, st->st_mode, rpmfiFMtime(fi));",
          "",
          "[Added Lines]",
          "715:  rc = fsmChown(fd, dirfd, path, st->st_mode, st->st_uid, st->st_gid);",
          "718:  rc = fsmChmod(fd, dirfd, path, st->st_mode);",
          "722:  rc = fsmSetFCaps(fd, dirfd, path, rpmfiFCaps(fi));",
          "725:  rc = fsmUtime(fd, dirfd, path, st->st_mode, rpmfiFMtime(fi));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "950: setmeta:",
          "951:      if (!rc && fp->setmeta) {",
          "953:     &fp->sb, nofcaps);",
          "954:      }",
          "",
          "[Removed Lines]",
          "952:   rc = fsmSetmeta(di.dirfd, fp->fpath, fi, plugins, fp->action,",
          "",
          "[Added Lines]",
          "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
          "996:     fi, plugins, fp->action,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef95f110a3b9437ace76c1c34c426204a2339877",
      "candidate_info": {
        "commit_hash": "ef95f110a3b9437ace76c1c34c426204a2339877",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ef95f110a3b9437ace76c1c34c426204a2339877",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Parent directory needs to be open before we can back up stuff\n\nA thinko originating from commit c9b2686a4748c227b0abdc0752d844e35296474e\nwhich doesn't matter greatly as long as we're still using absolute\npaths but will fail as soon as dirfd+basename is used.\n\nAlso pay more attention to the rc's: we must not backup, or run file\npre plugin hook if we know it'll fail.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:         if (!fp->skip) {",
          "919:      int fd = -1;",
          "922:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "923:      }",
          "933:      if (rc)",
          "",
          "[Removed Lines]",
          "921:      if (!fp->suffix && fp != firstlink) {",
          "925:      if (!rc) {",
          "926:   rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "927:     (fp->action == FA_CREATE), 0, &di.dirfd);",
          "928:      }",
          "931:      rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "932:        fp->sb.st_mode, fp->action);",
          "",
          "[Added Lines]",
          "920:      rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "921:        (fp->action == FA_CREATE), 0, &di.dirfd);",
          "924:      if (!rc && !fp->suffix && fp != firstlink) {",
          "929:      if (!rc)",
          "930:   rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "931:            fp->sb.st_mode, fp->action);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "796552e41590e1aa6b7c88177f1ffc2115b000b7",
      "candidate_info": {
        "commit_hash": "796552e41590e1aa6b7c88177f1ffc2115b000b7",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/796552e41590e1aa6b7c88177f1ffc2115b000b7",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Drop unsafe and now redundant unowned directories creation code\n\nAny unowned directories will be created inline during processing now\nso we can just flush this big pile of code that was insecure anyhow.\n\nAs an additional bonus creating the directories inline gives us an\nopportunity to track the creation so we can undo too, but that is\nnot done here.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     return rstrscat(NULL, rpmfiDN(fi), rpmfiBN(fi), suffix ? suffix : \"\", NULL);",
          "78: }",
          "217: static int fsmLink(const char *opath, const char *path)",
          "218: {",
          "219:     int rc = link(opath, path);",
          "",
          "[Removed Lines]",
          "83: typedef struct dnli_s {",
          "84:     rpmfiles fi;",
          "85:     char * active;",
          "86:     int reverse;",
          "87:     int isave;",
          "88:     int i;",
          "89: } * DNLI_t;",
          "96: static DNLI_t dnlFreeIterator(DNLI_t dnli)",
          "97: {",
          "98:     if (dnli) {",
          "99:  if (dnli->active) free(dnli->active);",
          "100:  free(dnli);",
          "101:     }",
          "102:     return NULL;",
          "103: }",
          "112: static DNLI_t dnlInitIterator(rpmfiles fi, rpmfs fs, int reverse)",
          "113: {",
          "114:     DNLI_t dnli;",
          "115:     int i, j;",
          "116:     int dc;",
          "118:     if (fi == NULL)",
          "119:  return NULL;",
          "120:     dc = rpmfilesDC(fi);",
          "121:     dnli = xcalloc(1, sizeof(*dnli));",
          "122:     dnli->fi = fi;",
          "123:     dnli->reverse = reverse;",
          "124:     dnli->i = (reverse ? dc : 0);",
          "126:     if (dc) {",
          "127:  dnli->active = xcalloc(dc, sizeof(*dnli->active));",
          "128:  int fc = rpmfilesFC(fi);",
          "131:  for (i = 0; i < fc; i++)",
          "132:             if (!XFA_SKIPPING(rpmfsGetAction(fs, i)))",
          "133:   dnli->active[rpmfilesDI(fi, i)] = 1;",
          "136:  for (i = 0; i < fc; i++) {",
          "137:      int dil;",
          "138:      size_t dnlen, bnlen;",
          "140:      if (!S_ISDIR(rpmfilesFMode(fi, i)))",
          "141:   continue;",
          "143:      dil = rpmfilesDI(fi, i);",
          "144:      dnlen = strlen(rpmfilesDN(fi, dil));",
          "145:      bnlen = strlen(rpmfilesBN(fi, i));",
          "147:      for (j = 0; j < dc; j++) {",
          "148:   const char * dnl;",
          "149:   size_t jlen;",
          "151:   if (!dnli->active[j] || j == dil)",
          "152:       continue;",
          "153:   dnl = rpmfilesDN(fi, j);",
          "154:   jlen = strlen(dnl);",
          "155:   if (jlen != (dnlen+bnlen+1))",
          "156:       continue;",
          "157:   if (!rstreqn(dnl, rpmfilesDN(fi, dil), dnlen))",
          "158:       continue;",
          "159:   if (!rstreqn(dnl+dnlen, rpmfilesBN(fi, i), bnlen))",
          "160:       continue;",
          "161:   if (dnl[dnlen+bnlen] != '/' || dnl[dnlen+bnlen+1] != '\\0')",
          "162:       continue;",
          "164:   dnli->active[j] = 0;",
          "165:   break;",
          "166:      }",
          "167:  }",
          "170:  if (!reverse) {",
          "171:      j = 0;",
          "172:      for (i = 0; i < dc; i++) {",
          "173:   if (!dnli->active[i]) continue;",
          "174:   if (j == 0) {",
          "175:       j = 1;",
          "176:       rpmlog(RPMLOG_DEBUG,",
          "177:  \"========== Directories not explicitly included in package:\\n\");",
          "178:   }",
          "179:   rpmlog(RPMLOG_DEBUG, \"%10d %s\\n\", i, rpmfilesDN(fi, i));",
          "180:      }",
          "181:      if (j)",
          "182:   rpmlog(RPMLOG_DEBUG, \"==========\\n\");",
          "183:  }",
          "184:     }",
          "185:     return dnli;",
          "186: }",
          "193: static",
          "194: const char * dnlNextIterator(DNLI_t dnli)",
          "195: {",
          "196:     const char * dn = NULL;",
          "198:     if (dnli) {",
          "199:  rpmfiles fi = dnli->fi;",
          "200:  int dc = rpmfilesDC(fi);",
          "201:  int i = -1;",
          "203:  if (dnli->active)",
          "204:  do {",
          "205:      i = (!dnli->reverse ? dnli->i++ : --dnli->i);",
          "206:  } while (i >= 0 && i < dc && !dnli->active[i]);",
          "208:  if (i >= 0 && i < dc)",
          "209:      dn = rpmfilesDN(fi, i);",
          "210:  else",
          "211:      i = -1;",
          "212:  dnli->isave = i;",
          "213:     }",
          "214:     return dn;",
          "215: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:     return rc;",
          "554: }",
          "644: static void removeSBITS(const char *path)",
          "645: {",
          "646:     struct stat stb;",
          "",
          "[Removed Lines]",
          "563: static int fsmMkdirs(rpmfiles files, rpmfs fs, rpmPlugins plugins)",
          "564: {",
          "565:     DNLI_t dnli = dnlInitIterator(files, fs, 0);",
          "566:     struct stat sb;",
          "567:     const char *dpath;",
          "568:     int rc = 0;",
          "569:     int i;",
          "570:     size_t ldnlen = 0;",
          "571:     const char * ldn = NULL;",
          "573:     while ((dpath = dnlNextIterator(dnli)) != NULL) {",
          "574:  size_t dnlen = strlen(dpath);",
          "575:  char * te, dn[dnlen+1];",
          "577:  if (dnlen <= 1)",
          "578:      continue;",
          "580:  if (dnlen == ldnlen && rstreq(dpath, ldn))",
          "581:      continue;",
          "584:  (void) stpcpy(dn, dpath);",
          "587:  for (i = 1, te = dn + 1; *te != '\\0'; te++, i++) {",
          "588:      if (*te != '/')",
          "589:   continue;",
          "592:      if (i < ldnlen &&",
          "593:   (ldn[i] == '/' || ldn[i] == '\\0') && rstreqn(dn, ldn, i))",
          "594:   continue;",
          "602:      if (rc == 0 && S_ISDIR(sb.st_mode)) {",
          "603:   continue;",
          "604:      } else if (rc == RPMERR_ENOENT) {",
          "606:   mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "607:   rpmFsmOp op = (FA_CREATE|FAF_UNOWNED);",
          "610:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
          "612:   if (!rc)",
          "613:       rc = fsmMkdir(-1, dn, mode);",
          "615:   if (!rc) {",
          "616:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
          "617:             mode, op);",
          "618:   }",
          "621:   rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
          "623:   if (!rc) {",
          "624:       rpmlog(RPMLOG_DEBUG,",
          "625:        \"%s directory created with perms %04o\\n\",",
          "626:        dn, (unsigned)(mode & 07777));",
          "627:   }",
          "629:      }",
          "630:      if (rc)",
          "631:   break;",
          "632:  }",
          "633:  if (rc) break;",
          "636:  ldn = dpath;",
          "637:  ldnlen = dnlen;",
          "638:     }",
          "639:     dnlFreeIterator(dnli);",
          "641:     return rc;",
          "642: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1053:     }",
          "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
          "1061:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "1062:  struct filedata_s *fp = &fdata[fx];",
          "",
          "[Removed Lines]",
          "1057:     if (!rc)",
          "1058:  rc = fsmMkdirs(files, fs, plugins);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb13f7fd9eff012cb7b9dbf94ac5381c69404055",
      "candidate_info": {
        "commit_hash": "fb13f7fd9eff012cb7b9dbf94ac5381c69404055",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/fb13f7fd9eff012cb7b9dbf94ac5381c69404055",
        "files": [
          "lib/rpmfi.c",
          "lib/rpmfi_internal.h"
        ],
        "message": "Add optional callback on directory changes during rpmfi iteration\n\nInternal only for now in case we need to fiddle with the API some more,\nbut no reason this couldn't be made public later.",
        "before_after_code_files": [
          "lib/rpmfi.c||lib/rpmfi.c",
          "lib/rpmfi_internal.h||lib/rpmfi_internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/rpmfi.c||lib/rpmfi.c": [
          "File: lib/rpmfi.c -> lib/rpmfi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:     return (fi != NULL ? rpmfilesDC(fi->files) : 0);",
          "304: }",
          "306: int rpmfiFX(rpmfi fi)",
          "307: {",
          "308:     return (fi != NULL ? fi->i : -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: int rpmfiSetOnChdir(rpmfi fi, rpmfiChdirCb cb, void *data)",
          "310: {",
          "311:     int rc = -1;",
          "312:     if (fi != NULL) {",
          "313:  fi->onChdir = cb;",
          "314:  fi->onChdirData = data;",
          "315:  rc = 0;",
          "316:     }",
          "317:     return rc;",
          "318: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:     int i = -1;",
          "315:     if (fi != NULL && fx >= 0 && fx < rpmfilesFC(fi->files)) {",
          "316:  fi->i = fx;",
          "317:  fi->j = rpmfilesDI(fi->files, fi->i);",
          "318:  i = fi->i;",
          "319:     }",
          "320:     return i;",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:  int dx = fi->j;",
          "331:  i = fi->i;",
          "336:  if (fi->j != dx && fi->onChdir) {",
          "337:      int chrc = fi->onChdir(fi, fi->onChdirData);",
          "338:      if (chrc < 0)",
          "339:   i = chrc;",
          "340:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1780:     if (files && itype>=0 && itype<=RPMFILEITERMAX) {",
          "1781:  fi = xcalloc(1, sizeof(*fi));",
          "1782:  fi->i = -1;",
          "1783:  fi->files = link ? rpmfilesLink(files) : files;",
          "1784:  fi->next = nextfuncs[itype];",
          "1786:  if (itype == RPMFI_ITER_BACK) {",
          "1787:      fi->i = rpmfilesFC(fi->files);",
          "1788:  } else if (itype >=RPMFI_ITER_READ_ARCHIVE",
          "",
          "[Removed Lines]",
          "1785:  fi->i = -1;",
          "",
          "[Added Lines]",
          "1805:  fi->j = -1;",
          "",
          "---------------"
        ],
        "lib/rpmfi_internal.h||lib/rpmfi_internal.h": [
          "File: lib/rpmfi_internal.h -> lib/rpmfi_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: extern \"C\" {",
          "14: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: typedef int (*rpmfiChdirCb)(rpmfi fi, void *data);",
          "31: int rpmfiSetOnChdir(rpmfi fi, rpmfiChdirCb cb, void *data);",
          "",
          "---------------"
        ]
      }
    }
  ]
}