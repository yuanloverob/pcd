{
  "cve_id": "CVE-2020-11085",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bounds read in cliprdr_read_format_list. Clipboard format data read (by client or server) might read data out-of-bounds. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
  "patch_info": {
    "commit_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "files": [
      "channels/cliprdr/cliprdr_common.c"
    ],
    "message": "Fixed oob read in cliprdr_read_format_list",
    "before_after_code_files": [
      "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
    ]
  },
  "patch_diff": {
    "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
      "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  int formatNameLength;",
      "401:  char* szFormatName;",
      "402:  WCHAR* wszFormatName;",
      "404:  CLIPRDR_FORMAT* formats = NULL;",
      "405:  UINT error = CHANNEL_RC_OK;",
      "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
      "409:  index = 0;",
      "410:  formatList->numFormats = 0;",
      "413:  if (!formatList->dataLen)",
      "414:  {",
      "418:  }",
      "419:  else if (!useLongFormatNames)",
      "420:  {",
      "424:   {",
      "426:    return ERROR_INTERNAL_ERROR;",
      "427:   }",
      "",
      "[Removed Lines]",
      "403:  UINT32 dataLen = formatList->dataLen;",
      "411:  position = Stream_GetPosition(s);",
      "416:   formatList->formats = NULL;",
      "417:   formatList->numFormats = 0;",
      "421:   formatList->numFormats = (dataLen / 36);",
      "423:   if ((formatList->numFormats * 36) != dataLen)",
      "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
      "",
      "[Added Lines]",
      "403:  wStream sub1, sub2;",
      "411:  formatList->formats = NULL;",
      "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
      "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
      "416:   return ERROR_INVALID_DATA;",
      "423:   const size_t cap = Stream_Capacity(&sub1);",
      "424:   formatList->numFormats = (cap / 36);",
      "426:   if ((formatList->numFormats * 36) != cap)",
      "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "438:   formatList->formats = formats;",
      "441:   {",
      "445:    formats[index].formatName = NULL;",
      "",
      "[Removed Lines]",
      "440:   while (dataLen)",
      "443:    dataLen -= 4;",
      "",
      "[Added Lines]",
      "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "455:    if (asciiNames)",
      "456:    {",
      "459:     if (szFormatName[0])",
      "460:     {",
      "",
      "[Removed Lines]",
      "457:     szFormatName = (char*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
      "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "459:    if (!Stream_SafeSeek(&sub1, 32))",
      "460:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "472:    }",
      "473:    else",
      "474:    {",
      "477:     if (wszFormatName[0])",
      "478:     {",
      "",
      "[Removed Lines]",
      "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "489:     }",
      "490:    }",
      "494:    index++;",
      "495:   }",
      "496:  }",
      "497:  else",
      "498:  {",
      "500:   {",
      "514:    formatList->numFormats++;",
      "515:   }",
      "520:   if (formatList->numFormats)",
      "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
      "",
      "[Removed Lines]",
      "492:    Stream_Seek(s, 32);",
      "493:    dataLen -= 32;",
      "499:   while (dataLen)",
      "502:    dataLen -= 4;",
      "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "506:    if (!wszFormatName[0])",
      "507:     formatNameLength = 0;",
      "508:    else",
      "509:     formatNameLength = _wcslen(wszFormatName);",
      "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "512:    dataLen -= ((formatNameLength + 1) * 2);",
      "517:   dataLen = formatList->dataLen;",
      "518:   Stream_SetPosition(s, position);",
      "",
      "[Added Lines]",
      "499:   sub2 = sub1;",
      "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
      "502:    size_t rest;",
      "504:     goto error_out;",
      "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "507:    rest = Stream_GetRemainingLength(&sub1);",
      "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
      "511:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "529:   formatList->formats = formats;",
      "532:   {",
      "536:    formats[index].formatName = NULL;",
      "545:    if (formatNameLength)",
      "546:    {",
      "549:     {",
      "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
      "551:      error = ERROR_INTERNAL_ERROR;",
      "",
      "[Removed Lines]",
      "531:   while (dataLen)",
      "534:    dataLen -= 4;",
      "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "540:    if (!wszFormatName[0])",
      "541:     formatNameLength = 0;",
      "542:    else",
      "543:     formatNameLength = _wcslen(wszFormatName);",
      "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
      "548:                            0, NULL, NULL) < 1)",
      "",
      "[Added Lines]",
      "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
      "528:    size_t rest;",
      "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
      "534:    rest = Stream_GetRemainingLength(&sub2);",
      "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
      "537:     goto error_out;",
      "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
      "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "553:     }",
      "554:    }",
      "559:    index++;",
      "560:   }",
      "561:  }",
      "",
      "[Removed Lines]",
      "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "557:    dataLen -= ((formatNameLength + 1) * 2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "582:   }",
      "584:   free(formatList->formats);",
      "585:  }",
      "586: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "576:   formatList->formats = NULL;",
      "577:   formatList->numFormats = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da03f7e04e384085c76aefdd77996efb9ceeb68b",
      "candidate_info": {
        "commit_hash": "da03f7e04e384085c76aefdd77996efb9ceeb68b",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/da03f7e04e384085c76aefdd77996efb9ceeb68b",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed #6122: Allow SSL server and client purpose",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:  if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "842:   goto end;",
          "845:  X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "847:  if (X509_verify_cert(csc) == 1)",
          "",
          "[Removed Lines]",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_SSL_SERVER);",
          "",
          "[Added Lines]",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_ANY);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eee9dead2d28ca99b0beeb8a56218fc05733974f",
      "candidate_info": {
        "commit_hash": "eee9dead2d28ca99b0beeb8a56218fc05733974f",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/eee9dead2d28ca99b0beeb8a56218fc05733974f",
        "files": [
          "channels/urbdrc/client/urbdrc_main.c"
        ],
        "message": "Fixed compiler warnings for usb channel",
        "before_after_code_files": [
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:   const UINT16 bcdDevice = (UINT16)pdev->query_device_descriptor(pdev, BCD_DEVICE);",
          "266:   sprintf_s(HardwareIds[1], DEVICE_HARDWARE_ID_SIZE,",
          "267:             \"USB\\\\VID_%04\" PRIX16 \"&PID_%04\" PRIX16 \"\", idVendor, idProduct);",
          "269:             bcdDevice);",
          "270:  }",
          "271:  {",
          "",
          "[Removed Lines]",
          "268:   sprintf_s(HardwareIds[0], DEVICE_HARDWARE_ID_SIZE, \"%s&REV_%04\" PRIX16 \"\", HardwareIds[1],",
          "",
          "[Added Lines]",
          "268:   sprintf_s(HardwareIds[0], DEVICE_HARDWARE_ID_SIZE,",
          "269:             \"USB\\\\VID_%04\" PRIX16 \"&PID_%04\" PRIX16 \"&REV_%04\" PRIX16 \"\", idVendor, idProduct,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:   {",
          "278:    sprintf_s(CompatibilityIds[2], DEVICE_COMPATIBILITY_ID_SIZE, \"USB\\\\Class_%02\" PRIX8 \"\",",
          "279:              bDeviceClass);",
          "284:   }",
          "285:   else",
          "286:   {",
          "287:    sprintf_s(CompatibilityIds[2], DEVICE_COMPATIBILITY_ID_SIZE, \"USB\\\\DevClass_00\");",
          "292:   }",
          "293:  }",
          "294:  func_instance_id_generate(pdev, strInstanceId, DEVICE_INSTANCE_STR_SIZE);",
          "",
          "[Removed Lines]",
          "280:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&SubClass_%02\" PRIX8 \"\",",
          "281:              CompatibilityIds[2], bDeviceSubClass);",
          "282:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&Prot_%02\" PRIX8 \"\",",
          "283:              CompatibilityIds[1], bDeviceProtocol);",
          "288:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&SubClass_00\",",
          "289:              CompatibilityIds[2]);",
          "290:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE, \"%s&Prot_00\",",
          "291:              CompatibilityIds[1]);",
          "",
          "[Added Lines]",
          "281:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE,",
          "282:              \"USB\\\\Class_%02\" PRIX8 \"&SubClass_%02\" PRIX8 \"\", bDeviceClass,",
          "283:              bDeviceSubClass);",
          "284:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE,",
          "285:              \"USB\\\\Class_%02\" PRIX8 \"&SubClass_%02\" PRIX8 \"&Prot_%02\" PRIX8 \"\",",
          "286:              bDeviceClass, bDeviceSubClass, bDeviceProtocol);",
          "291:    sprintf_s(CompatibilityIds[1], DEVICE_COMPATIBILITY_ID_SIZE,",
          "292:              \"USB\\\\DevClass_00&SubClass_00\");",
          "293:    sprintf_s(CompatibilityIds[0], DEVICE_COMPATIBILITY_ID_SIZE,",
          "294:              \"USB\\\\DevClass_00&SubClass_00&Prot_00\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b375d84ed6ea37387d21bd1d0ddc897e0e71de5a",
      "candidate_info": {
        "commit_hash": "b375d84ed6ea37387d21bd1d0ddc897e0e71de5a",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b375d84ed6ea37387d21bd1d0ddc897e0e71de5a",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_create",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: {",
          "84:  char* path = NULL;",
          "85:  int status;",
          "86:  UINT32 PathLength;",
          "90:  Stream_Read_UINT32(irp->input, PathLength);",
          "94:  if (status < 1)",
          "95:   if (!(path = (char*)calloc(1, 1)))",
          "",
          "[Removed Lines]",
          "87:  Stream_Seek(irp->input, 28);",
          "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
          "92:                              &path, 0, NULL, NULL);",
          "",
          "[Added Lines]",
          "86:  WCHAR* ptr;",
          "88:  if (!Stream_SafeSeek(irp->input, 28))",
          "89:   return ERROR_INVALID_DATA;",
          "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
          "93:   return ERROR_INVALID_DATA;",
          "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
          "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
          "97:   return ERROR_INVALID_DATA;",
          "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55ee2cce3467ed33c1b60f445dbe50132f96cd65",
      "candidate_info": {
        "commit_hash": "55ee2cce3467ed33c1b60f445dbe50132f96cd65",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/55ee2cce3467ed33c1b60f445dbe50132f96cd65",
        "files": [
          "client/Wayland/wlf_input.c"
        ],
        "message": "Fixed #6087: Inconsistend scroll on wayland\n\nThanks to @yol and @SaschaWessel a bug in scroll step conversion\nwas uncovered. The RDP value ranges are inverted when scrolling\nin negative direction.",
        "before_after_code_files": [
          "client/Wayland/wlf_input.c||client/Wayland/wlf_input.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Wayland/wlf_input.c||client/Wayland/wlf_input.c": [
          "File: client/Wayland/wlf_input.c -> client/Wayland/wlf_input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:    return FALSE;",
          "172:  }",
          "177:  flags |= step;",
          "179:  return freerdp_input_send_mouse_event(input, flags, (UINT16)x, (UINT16)y);",
          "",
          "[Removed Lines]",
          "174:  step = (uint32_t)abs(direction);",
          "175:  if (step > WheelRotationMask)",
          "176:   step = WheelRotationMask;",
          "",
          "[Added Lines]",
          "179:  step = abs(direction);",
          "180:  if (step > 0xFF)",
          "181:   step = 0xFF;",
          "184:  if (flags & PTR_FLAGS_WHEEL_NEGATIVE)",
          "185:   step = 0xFF - step;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f266b53621b91f28c49736c2f89bfc8d59e3ad7",
      "candidate_info": {
        "commit_hash": "0f266b53621b91f28c49736c2f89bfc8d59e3ad7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0f266b53621b91f28c49736c2f89bfc8d59e3ad7",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed #6112: Segfault in update_decompress_brush\n\nThe iterators need to be signed for the loop check to work.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2497: }",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2499: {",
          "2501:  BYTE byte = 0;",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2506:   return FALSE;",
          "",
          "[Removed Lines]",
          "2500:  UINT32 x, y, k;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "[Added Lines]",
          "2500:  INT32 x, y, k;",
          "2503:  const INT32 bytesPerPixel = ((bpp + 1) / 8);",
          "",
          "---------------"
        ]
      }
    }
  ]
}