{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab8b55aa60af196036897864267d9c205b951277",
      "candidate_info": {
        "commit_hash": "ab8b55aa60af196036897864267d9c205b951277",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ab8b55aa60af196036897864267d9c205b951277",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Extend directory tracking to our entire operation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340: }",
          "342: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create,",
          "344: {",
          "345:     char *path = xstrdup(p);",
          "346:     char *dp = path;",
          "",
          "[Removed Lines]",
          "343:       int *dirfdp)",
          "",
          "[Added Lines]",
          "343:       int quiet, int *dirfdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:  if (fd >= 0) {",
          "375:      dirfd = fd;",
          "376:  } else {",
          "379:      rc = RPMERR_OPEN_FAILED;",
          "380:      break;",
          "381:  }",
          "",
          "[Removed Lines]",
          "377:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "378:     bn, p, strerror(errno));",
          "",
          "[Added Lines]",
          "377:      if (!quiet) {",
          "378:   rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "379:    bn, p, strerror(errno));",
          "380:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "880:      if (!rc) {",
          "881:   rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "883:      }",
          "",
          "[Removed Lines]",
          "882:     (fp->action == FA_CREATE), &di.dirfd);",
          "",
          "[Added Lines]",
          "884:     (fp->action == FA_CREATE), 0, &di.dirfd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "966:  rc = fx;",
          "970:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "971:  struct filedata_s *fp = &fdata[fx];",
          "973:  if (!fp->skip) {",
          "975:      if (!rc && fp->suffix)",
          "976:   rc = fsmBackup(fi, fp->action);",
          "",
          "[Removed Lines]",
          "969:     fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "",
          "[Added Lines]",
          "971:     fi = fsmIter(NULL, files, RPMFI_ITER_FWD, &di);",
          "976:      if (!rc)",
          "977:   rc = ensureDir(NULL, rpmfiDN(fi), 0, 0, 0, &di.dirfd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "988:           fp->sb.st_mode, fp->action, rc);",
          "989:  }",
          "990:     }",
          "994:     if (rc) {",
          "996:  while ((fx = rpmfiNext(fi)) >= 0) {",
          "997:      struct filedata_s *fp = &fdata[fx];",
          "999:      if (fp->stage > FILE_NONE && !fp->skip) {",
          "1000:   (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "1001:      }",
          "",
          "[Removed Lines]",
          "991:     fi = rpmfiFree(fi);",
          "995:  fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "",
          "[Added Lines]",
          "996:     fi = fsmIterFini(fi, &di);",
          "1000:  fi = fsmIter(NULL, files, RPMFI_ITER_BACK, &di);",
          "1005:      if (ensureDir(NULL, rpmfiDN(fi), 0, 0, 1, &di.dirfd))",
          "1006:   continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1006:     rpmswAdd(rpmtsOp(ts, RPMTS_OP_DIGEST), fdOp(payload, FDSTAT_DIGEST));",
          "1008: exit:",
          "1010:     Fclose(payload);",
          "1011:     free(tid);",
          "1012:     for (int i = 0; i < fc; i++)",
          "",
          "[Removed Lines]",
          "1009:     fi = rpmfiFree(fi);",
          "",
          "[Added Lines]",
          "1018:     fi = fsmIterFini(fi, &di);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1020: int rpmPackageFilesRemove(rpmts ts, rpmte te, rpmfiles files,",
          "1021:               rpmpsm psm, char ** failedFile)",
          "1022: {",
          "1024:     rpmfs fs = rpmteGetFileStates(te);",
          "1025:     rpmPlugins plugins = rpmtsPlugins(ts);",
          "1026:     int fc = rpmfilesFC(files);",
          "",
          "[Removed Lines]",
          "1023:     rpmfi fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "",
          "[Added Lines]",
          "1032:     struct diriter_s di = { -1 };",
          "1033:     rpmfi fi = fsmIter(NULL, files, RPMFI_ITER_BACK, &di);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1031:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "1032:  struct filedata_s *fp = &fdata[fx];",
          "1033:  fp->action = rpmfsGetAction(fs, rpmfiFX(fi));",
          "1034:  fp->fpath = fsmFsPath(fi, NULL);",
          "1035:  rc = fsmStat(fp->fpath, 1, &fp->sb);",
          "1037:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045:  if (XFA_SKIPPING(fp->action))",
          "1046:      continue;",
          "1050:  if (ensureDir(NULL, rpmfiDN(fi), 0, 0, 1, &di.dirfd))",
          "1051:      continue;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1040:  rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "1041:           fp->sb.st_mode, fp->action);",
          "1047:         if (fp->action == FA_ERASE) {",
          "",
          "[Removed Lines]",
          "1043:  if (!XFA_SKIPPING(fp->action))",
          "1044:      rc = fsmBackup(fi, fp->action);",
          "",
          "[Added Lines]",
          "1061:  rc = fsmBackup(fi, fp->action);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1098:     for (int i = 0; i < fc; i++)",
          "1099:  free(fdata[i].fpath);",
          "1100:     free(fdata);",
          "1103:     return rc;",
          "1104: }",
          "",
          "[Removed Lines]",
          "1101:     rpmfiFree(fi);",
          "",
          "[Added Lines]",
          "1118:     fsmIterFini(fi, &di);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bab34c6e45c549c7829e469ba35bdececbb84e8",
      "candidate_info": {
        "commit_hash": "1bab34c6e45c549c7829e469ba35bdececbb84e8",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/1bab34c6e45c549c7829e469ba35bdececbb84e8",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert fsmSetmeta() to dirfd based operation where possible\n\nNotably cap_set_file() doesn't have a dirfd-based mode, to handle that\nsafely we'll need to use fd-based operation. Which would be nicer anyhow\nbut symlinks can't be opened so we'll have to carry the dirfd/path based\nmode forever more anyhow (yes Linux has extensions but that's another\nstory).",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat \\",
          "586:    [], [AC_MSG_ERROR([function required by rpm])])",
          "588: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "585:     renameat ],",
          "",
          "[Added Lines]",
          "585:     renameat utimensat fchmodat fchownat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     return rc;",
          "92: }",
          "95: {",
          "96:     int rc = 0;",
          "97: #if WITH_CAP",
          "98:     if (captxt && *captxt != '\\0') {",
          "99:  cap_t fcaps = cap_from_text(captxt);",
          "101:      rc = RPMERR_SETCAP_FAILED;",
          "103:  if (_fsm_debug) {",
          "106:  }",
          "107:  cap_free(fcaps);",
          "108:     }",
          "",
          "[Removed Lines]",
          "94: static int fsmSetFCaps(const char *path, const char *captxt)",
          "100:  if (fcaps == NULL || cap_set_file(path, fcaps) != 0) {",
          "102:  }",
          "104:      rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "105:      path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "94: static int fsmSetFCaps(int dirfd, const char *path, const char *captxt)",
          "102:  if ((dirfd >= 0 && *path != '/') || fcaps == NULL)",
          "105:  if (!rc && cap_set_file(path, fcaps) != 0)",
          "106:      rc = RPMERR_SETCAP_FAILED;",
          "109:      rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %s) %s\\n\", __func__,",
          "110:      dirfd, path, captxt, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:     return S_ISDIR(mode) ? fsmRmdir(dirfd, path) : fsmUnlink(dirfd, path);",
          "503: }",
          "506: {",
          "508:     if (rc < 0) {",
          "509:  struct stat st;",
          "511:      rc = 0;",
          "512:     }",
          "513:     if (_fsm_debug)",
          "516:         (rc < 0 ? strerror(errno) : \"\"));",
          "517:     if (rc < 0) rc = RPMERR_CHOWN_FAILED;",
          "518:     return rc;",
          "519: }",
          "522: {",
          "524:     if (rc < 0) {",
          "525:  struct stat st;",
          "527:      rc = 0;",
          "528:     }",
          "529:     if (_fsm_debug)",
          "532:         (rc < 0 ? strerror(errno) : \"\"));",
          "533:     if (rc < 0) rc = RPMERR_CHMOD_FAILED;",
          "534:     return rc;",
          "535: }",
          "538: {",
          "539:     int rc = 0;",
          "543:     };",
          "552:     if (_fsm_debug)",
          "555:     if (rc < 0) rc = RPMERR_UTIME_FAILED;",
          "557:     if (rc && S_ISDIR(mode))",
          "",
          "[Removed Lines]",
          "505: static int fsmChown(const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "507:     int rc = S_ISLNK(mode) ? lchown(path, uid, gid) : chown(path, uid, gid);",
          "510:  if (lstat(path, &st) == 0 && st.st_uid == uid && st.st_gid == gid)",
          "514:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %d, %d) %s\\n\", __func__,",
          "515:         path, (int)uid, (int)gid,",
          "521: static int fsmChmod(const char *path, mode_t mode)",
          "523:     int rc = chmod(path, (mode & 07777));",
          "526:  if (lstat(path, &st) == 0 && (st.st_mode & 07777) == (mode & 07777))",
          "530:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
          "531:         path, (unsigned)(mode & 07777),",
          "537: static int fsmUtime(const char *path, mode_t mode, time_t mtime)",
          "540:     struct timeval stamps[2] = {",
          "541:  { .tv_sec = mtime, .tv_usec = 0 },",
          "542:  { .tv_sec = mtime, .tv_usec = 0 },",
          "545: #if HAVE_LUTIMES",
          "546:     rc = lutimes(path, stamps);",
          "547: #else",
          "548:     if (!S_ISLNK(mode))",
          "549:  rc = utimes(path, stamps);",
          "550: #endif",
          "553:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0x%x) %s\\n\", __func__,",
          "554:         path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "510: static int fsmChown(int dirfd, const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "512:     int flags = S_ISLNK(mode) ? AT_SYMLINK_NOFOLLOW : 0;",
          "513:     int rc = fchownat(dirfd, path, uid, gid, flags);",
          "516:  if (fstatat(dirfd, path, &st, flags) == 0 &&",
          "517:   (st.st_uid == uid && st.st_gid == gid)) {",
          "519:  }",
          "522:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d, %d) %s\\n\", __func__,",
          "523:         dirfd, path, (int)uid, (int)gid,",
          "529: static int fsmChmod(int dirfd, const char *path, mode_t mode)",
          "531:     int rc = fchmodat(dirfd, path, (mode & 07777), 0);",
          "534:  if (fstatat(dirfd, path, &st, AT_SYMLINK_NOFOLLOW) == 0 &&",
          "535:   (st.st_mode & 07777) == (mode & 07777)) {",
          "537:  }",
          "540:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
          "541:         dirfd, path, (unsigned)(mode & 07777),",
          "547: static int fsmUtime(int dirfd, const char *path, mode_t mode, time_t mtime)",
          "550:     struct timespec stamps[2] = {",
          "551:  { .tv_sec = mtime, .tv_nsec = 0 },",
          "552:  { .tv_sec = mtime, .tv_nsec = 0 },",
          "555:     rc = utimensat(dirfd, path, stamps, AT_SYMLINK_NOFOLLOW);",
          "558:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0x%x) %s\\n\", __func__,",
          "559:         dirfd, path, (unsigned)mtime, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656:     return rc;",
          "657: }",
          "660:         rpmFileAction action, const struct stat * st,",
          "661:         int nofcaps)",
          "662: {",
          "",
          "[Removed Lines]",
          "659: static int fsmSetmeta(const char *path, rpmfi fi, rpmPlugins plugins,",
          "",
          "[Added Lines]",
          "664: static int fsmSetmeta(int dirfd, const char *path, rpmfi fi, rpmPlugins plugins,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:     const char *dest = rpmfiFN(fi);",
          "666:     if (!rc && !getuid()) {",
          "668:     }",
          "669:     if (!rc && !S_ISLNK(st->st_mode)) {",
          "671:     }",
          "673:     if (!rc && !nofcaps && S_ISREG(st->st_mode) && !getuid()) {",
          "675:     }",
          "676:     if (!rc) {",
          "678:     }",
          "679:     if (!rc) {",
          "680:  rc = rpmpluginsCallFsmFilePrepare(plugins, fi,",
          "682:     }",
          "684:     return rc;",
          "",
          "[Removed Lines]",
          "667:  rc = fsmChown(path, st->st_mode, st->st_uid, st->st_gid);",
          "670:  rc = fsmChmod(path, st->st_mode);",
          "674:  rc = fsmSetFCaps(path, rpmfiFCaps(fi));",
          "677:  rc = fsmUtime(path, st->st_mode, rpmfiFMtime(fi));",
          "681:        path, dest, st->st_mode, action);",
          "",
          "[Added Lines]",
          "672:  rc = fsmChown(dirfd, path, st->st_mode, st->st_uid, st->st_gid);",
          "675:  rc = fsmChmod(dirfd, path, st->st_mode);",
          "679:  rc = fsmSetFCaps(dirfd, path, rpmfiFCaps(fi));",
          "682:  rc = fsmUtime(dirfd, path, st->st_mode, rpmfiFMtime(fi));",
          "686:        path, dest,",
          "687:        st->st_mode, action);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "944: setmeta:",
          "945:      if (!rc && fp->setmeta) {",
          "947:     &fp->sb, nofcaps);",
          "948:      }",
          "",
          "[Removed Lines]",
          "946:   rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "",
          "[Added Lines]",
          "952:   rc = fsmSetmeta(di.dirfd, fp->fpath, fi, plugins, fp->action,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fee3aafbf6de78e0bef9809bd22113dd6d251866",
      "candidate_info": {
        "commit_hash": "fee3aafbf6de78e0bef9809bd22113dd6d251866",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/fee3aafbf6de78e0bef9809bd22113dd6d251866",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Fix file descriptor leak regression on install (#1947)\n\nCommit 0e3024ca3e7450104e70ec8d213cf223e71f7c02 introduced a leak on\ndirectory file descriptors from hardlinked sets, preventing some large\npackages with many hardlinks from installing at all.\n\nfsmMkfile() needs to close the firstdir fd when done with it because\nthat's the only place that knows when it's safe to do so. However, there\ncould be non-hardlink entries left in the same directory, so we must not\nclose *that* descriptor. Dup the firstdir descriptor so we're free to\nclose it without worrying about the other state.\n\nFixes: #1947",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:      fp->setmeta = 1;",
          "231:  }",
          "232:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:      fsmClose(firstdir);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "841:     struct diriter_s *di = data;",
          "843:     if (di->dirfd >= 0) {",
          "846:  di->dirfd = -1;",
          "847:     }",
          "848:     return 0;",
          "",
          "[Removed Lines]",
          "844:  if (di->dirfd != di->firstdir)",
          "845:      close(di->dirfd);",
          "",
          "[Added Lines]",
          "844:  close(di->dirfd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "014d22c8d6edf2dc0bc76408db58fe59630691bb",
      "candidate_info": {
        "commit_hash": "014d22c8d6edf2dc0bc76408db58fe59630691bb",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/014d22c8d6edf2dc0bc76408db58fe59630691bb",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert fsmRename() to renameat() based operation\n\nAll our renames are (for now at least) within a single directory so\nthe second dirfd is kinda redundant, but shrug...",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "585:    [], [AC_MSG_ERROR([function required by rpm])])",
          "587: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat ],",
          "",
          "[Added Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat \\",
          "585:     renameat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:     return rc;",
          "481: }",
          "484: {",
          "485:     removeSBITS(path);",
          "487: #if defined(ETXTBSY) && defined(__HPUX__)",
          "489:     if (rc && errno == ETXTBSY) {",
          "490:  char *rmpath = NULL;",
          "491:  rstrscat(&rmpath, path, \"-RPMDELETE\", NULL);",
          "494:  free(rmpath);",
          "495:     }",
          "496: #endif",
          "497:     if (_fsm_debug)",
          "500:     if (rc < 0)",
          "501:  rc = (errno == EISDIR ? RPMERR_EXIST_AS_DIR : RPMERR_RENAME_FAILED);",
          "502:     return rc;",
          "",
          "[Removed Lines]",
          "483: static int fsmRename(const char *opath, const char *path)",
          "486:     int rc = rename(opath, path);",
          "492:  rc = rename(path, rmpath);",
          "493:  if (!rc) rc = rename(opath, path);",
          "498:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "499:         opath, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "483: static int fsmRename(int odirfd, const char *opath, int dirfd, const char *path)",
          "486:     int rc = renameat(odirfd, opath, dirfd, path);",
          "493:  rc = renameat(odirfd, path, odirfd, rmpath);",
          "494:  if (!rc) rc = renameat(odirfd, opath, dirfd, path);",
          "499:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d %s) %s\\n\", __func__,",
          "500:         odirfd, opath, dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:     if (S_ISREG(mode)) {",
          "580:  char *rmpath = rstrscat(NULL, path, \"-RPMDELETE\", NULL);",
          "583:  if (!rc)",
          "584:      (void) fsmUnlink(dirfd, rmpath);",
          "",
          "[Removed Lines]",
          "581:  rc = fsmRename(path, rmpath);",
          "",
          "[Added Lines]",
          "582:  rc = fsmRename(dirfd, path, dirfd, rmpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634: {",
          "635:     int rc = 0;",
          "636:     const char *suffix = NULL;",
          "",
          "[Removed Lines]",
          "633: static int fsmBackup(rpmfi fi, rpmFileAction action)",
          "",
          "[Added Lines]",
          "634: static int fsmBackup(int dirfd, rpmfi fi, rpmFileAction action)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "651:     if (suffix) {",
          "652:  char * opath = fsmFsPath(fi, NULL);",
          "653:  char * path = fsmFsPath(fi, suffix);",
          "655:  if (!rc) {",
          "656:      rpmlog(RPMLOG_WARNING, _(\"%s saved as %s\\n\"), opath, path);",
          "657:  }",
          "",
          "[Removed Lines]",
          "654:  rc = fsmRename(opath, path);",
          "",
          "[Added Lines]",
          "655:  rc = fsmRename(dirfd, opath, dirfd, path);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "689:     return rc;",
          "690: }",
          "693: {",
          "694:     int rc = 0;",
          "",
          "[Removed Lines]",
          "692: static int fsmCommit(char **path, rpmfi fi, rpmFileAction action, const char *suffix)",
          "",
          "[Added Lines]",
          "693: static int fsmCommit(int dirfd, char **path, rpmfi fi, rpmFileAction action, const char *suffix)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "705:  if (dest != *path) {",
          "707:      if (!rc) {",
          "708:   if (nsuffix) {",
          "709:       char * opath = fsmFsPath(fi, NULL);",
          "",
          "[Removed Lines]",
          "706:      rc = fsmRename(*path, dest);",
          "",
          "[Added Lines]",
          "707:      rc = fsmRename(dirfd, *path, dirfd, dest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "873:         if (!fp->skip) {",
          "875:      if (!fp->suffix && fp != firstlink) {",
          "877:      }",
          "879:      if (!rc) {",
          "",
          "[Removed Lines]",
          "876:   rc = fsmBackup(fi, fp->action);",
          "",
          "[Added Lines]",
          "877:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "977:      if (!rc && fp->suffix)",
          "980:      if (!rc)",
          "983:      if (!rc)",
          "984:   fp->stage = FILE_COMMIT;",
          "",
          "[Removed Lines]",
          "978:   rc = fsmBackup(fi, fp->action);",
          "981:   rc = fsmCommit(&fp->fpath, fi, fp->action, fp->suffix);",
          "",
          "[Added Lines]",
          "979:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "982:   rc = fsmCommit(di.dirfd, &fp->fpath, fi, fp->action, fp->suffix);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1055:  rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "1056:           fp->sb.st_mode, fp->action);",
          "1061:         if (fp->action == FA_ERASE) {",
          "",
          "[Removed Lines]",
          "1058:  rc = fsmBackup(fi, fp->action);",
          "",
          "[Added Lines]",
          "1059:  rc = fsmBackup(di.dirfd, fi, fp->action);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35195684d29f495bfd982516044e05deed832b6e",
      "candidate_info": {
        "commit_hash": "35195684d29f495bfd982516044e05deed832b6e",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/35195684d29f495bfd982516044e05deed832b6e",
        "files": [
          "lib/fsm.c",
          "lib/rpmplugin.h",
          "lib/rpmplugins.c",
          "lib/rpmplugins.h",
          "plugins/fapolicyd.c",
          "plugins/fsverity.c",
          "plugins/ima.c",
          "plugins/selinux.c"
        ],
        "message": "Pass file descriptor to file prepare plugin hook, use when possible\n\nSadly the thing that allegedly makes things better mostly just makes\nthings more complicated as symlinks can't be opened, so we'll now have\nto deal with both cases in plugins too. To make matters worse, most\nAPIs out there support either an fd or a path, but very few support\nthe *at() style dirfd + basename approach so plugins are stuck with\nabsolute paths for now.\n\nThis is of course a plugin API/ABI change too.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c",
          "lib/rpmplugin.h||lib/rpmplugin.h",
          "lib/rpmplugins.c||lib/rpmplugins.c",
          "lib/rpmplugins.h||lib/rpmplugins.h",
          "plugins/fapolicyd.c||plugins/fapolicyd.c",
          "plugins/fsverity.c||plugins/fsverity.c",
          "plugins/ima.c||plugins/ima.c",
          "plugins/selinux.c||plugins/selinux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:     }",
          "349:     if (!rc) {",
          "351:     }",
          "",
          "[Removed Lines]",
          "350:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
          "",
          "[Added Lines]",
          "350:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, dn, dn, mode, op);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:     }",
          "738:     if (!rc) {",
          "739:  rc = rpmpluginsCallFsmFilePrepare(plugins, fi,",
          "741:        st->st_mode, action);",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:        path, dest,",
          "",
          "[Added Lines]",
          "740:        fd, path, dest,",
          "",
          "---------------"
        ],
        "lib/rpmplugin.h||lib/rpmplugin.h": [
          "File: lib/rpmplugin.h -> lib/rpmplugin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         const char* path, mode_t file_mode,",
          "58:         rpmFsmOp op, int res);",
          "59: typedef rpmRC (*plugin_fsm_file_prepare_func)(rpmPlugin plugin, rpmfi fi,",
          "61:            const char *dest,",
          "62:            mode_t file_mode, rpmFsmOp op);",
          "",
          "[Removed Lines]",
          "60:            const char* path,",
          "",
          "[Added Lines]",
          "60:            int fd, const char* path,",
          "",
          "---------------"
        ],
        "lib/rpmplugins.c||lib/rpmplugins.c": [
          "File: lib/rpmplugins.c -> lib/rpmplugins.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388: }",
          "390: rpmRC rpmpluginsCallFsmFilePrepare(rpmPlugins plugins, rpmfi fi,",
          "392:        mode_t file_mode, rpmFsmOp op)",
          "393: {",
          "394:     plugin_fsm_file_prepare_func hookFunc;",
          "",
          "[Removed Lines]",
          "391:        const char *path, const char *dest,",
          "",
          "[Added Lines]",
          "391:        int fd, const char *path, const char *dest,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     for (i = 0; i < plugins->count; i++) {",
          "399:  rpmPlugin plugin = plugins->plugins[i];",
          "400:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_prepare);",
          "402:      rpmlog(RPMLOG_ERR, \"Plugin %s: hook fsm_file_prepare failed\\n\", plugin->name);",
          "403:      rc = RPMRC_FAIL;",
          "404:  }",
          "",
          "[Removed Lines]",
          "401:  if (hookFunc && hookFunc(plugin, fi, path, dest, file_mode, op) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "401:  if (hookFunc && hookFunc(plugin, fi, fd, path, dest, file_mode, op) == RPMRC_FAIL) {",
          "",
          "---------------"
        ],
        "lib/rpmplugins.h||lib/rpmplugins.h": [
          "File: lib/rpmplugins.h -> lib/rpmplugins.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: RPM_GNUC_INTERNAL",
          "166: rpmRC rpmpluginsCallFsmFilePrepare(rpmPlugins plugins, rpmfi fi,",
          "168:                                    mode_t mode, rpmFsmOp op);",
          "170: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "167:                                    const char *path, const char *dest,",
          "",
          "[Added Lines]",
          "168:                                    int fd, const char *path, const char *dest,",
          "",
          "---------------"
        ],
        "plugins/fapolicyd.c||plugins/fapolicyd.c": [
          "File: plugins/fapolicyd.c -> plugins/fapolicyd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: }",
          "147: static rpmRC fapolicyd_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "149:                                         mode_t file_mode, rpmFsmOp op)",
          "150: {",
          "",
          "[Removed Lines]",
          "148:                                         const char *path, const char *dest,",
          "",
          "[Added Lines]",
          "148:                                         int fd, const char *path,",
          "149:      const char *dest,",
          "",
          "---------------"
        ],
        "plugins/fsverity.c||plugins/fsverity.c": [
          "File: plugins/fsverity.c -> plugins/fsverity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:            const char *path, const char *dest,",
          "38:            mode_t file_mode, rpmFsmOp op)",
          "39: {",
          "",
          "[Removed Lines]",
          "36: static rpmRC fsverity_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "",
          "[Added Lines]",
          "36: static rpmRC fsverity_fsm_file_prepare(rpmPlugin plugin, rpmfi fi, int fd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     size_t len;",
          "43:     uint16_t algo = 0;",
          "44:     int rc = RPMRC_OK;",
          "46:     rpmFileAction action = XFO_ACTION(op);",
          "47:     char *buffer;",
          "",
          "[Removed Lines]",
          "45:     int fd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     rpmlog(RPMLOG_DEBUG, \"applying signature: %s\\n\", buffer);",
          "99:     free(buffer);",
          "",
          "[Removed Lines]",
          "101:     fd = open(path, O_RDONLY);",
          "102:     if (fd < 0) {",
          "103:  rpmlog(RPMLOG_ERR, \"failed to open path %s\\n\", path);",
          "104:  goto exit;",
          "105:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:     rpmlog(RPMLOG_DEBUG, \"fsverity enabled signature for: path %s dest %s\\n\",",
          "164:     path, dest);",
          "166: exit:",
          "167:     return rc;",
          "168: }",
          "",
          "[Removed Lines]",
          "165:     close(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "plugins/ima.c||plugins/ima.c": [
          "File: plugins/ima.c -> plugins/ima.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  return (memcmp(fsig, &zero_hdr, sizeof(zero_hdr)) == 0);",
          "43: }",
          "46:                                   const char *path,",
          "47:                                   const char *dest,",
          "48:                                   mode_t file_mode, rpmFsmOp op)",
          "",
          "[Removed Lines]",
          "45: static rpmRC ima_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "",
          "[Added Lines]",
          "45: static rpmRC ima_fsm_file_prepare(rpmPlugin plugin, rpmfi fi, int fd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  fsig = rpmfiFSignature(fi, &len);",
          "70:  if (fsig && (check_zero_hdr(fsig, len) == 0)) {",
          "72:          rpmlog(RPMLOG_ERR,",
          "73:    \"ima: could not apply signature on '%s': %s\\n\",",
          "74:    path, strerror(errno));",
          "",
          "[Removed Lines]",
          "71:      if (lsetxattr(path, XATTR_NAME_IMA, fsig, len, 0) < 0) {",
          "",
          "[Added Lines]",
          "71:      int xx;",
          "72:      if (fd >= 0)",
          "73:   xx = fsetxattr(fd, XATTR_NAME_IMA, fsig, len, 0);",
          "74:      else",
          "75:   xx = lsetxattr(path, XATTR_NAME_IMA, fsig, len, 0);",
          "76:      if (xx < 0) {",
          "",
          "---------------"
        ],
        "plugins/selinux.c||plugins/selinux.c": [
          "File: plugins/selinux.c -> plugins/selinux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     return rc;",
          "156: }",
          "159:      const char *path, const char *dest,",
          "160:             mode_t file_mode, rpmFsmOp op)",
          "161: {",
          "",
          "[Removed Lines]",
          "158: static rpmRC selinux_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "",
          "[Added Lines]",
          "158: static rpmRC selinux_fsm_file_prepare(rpmPlugin plugin, rpmfi fi, int fd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     if (sehandle && !XFA_SKIPPING(action)) {",
          "166:  char *scon = NULL;",
          "167:  if (selabel_lookup_raw(sehandle, &scon, dest, file_mode) == 0) {",
          "170:      if (conrc == 0 || (conrc < 0 && errno == EOPNOTSUPP))",
          "171:   rc = RPMRC_OK;",
          "176:      freecon(scon);",
          "177:  } else {",
          "",
          "[Removed Lines]",
          "168:      int conrc = lsetfilecon(path, scon);",
          "173:      rpmlog(loglvl(rc != RPMRC_OK), \"lsetfilecon: (%s, %s) %s\\n\",",
          "174:          path, scon, (conrc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "168:      int conrc;",
          "169:      if (fd >= 0)",
          "170:   conrc = fsetfilecon(fd, scon);",
          "171:      else",
          "172:   conrc = lsetfilecon(path, scon);",
          "177:      rpmlog(loglvl(rc != RPMRC_OK), \"lsetfilecon: (%d %s, %s) %s\\n\",",
          "178:          fd, path, scon, (conrc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}