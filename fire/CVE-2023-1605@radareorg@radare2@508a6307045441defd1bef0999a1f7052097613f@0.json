{
  "cve_id": "CVE-2023-1605",
  "cve_desc": "Denial of Service in GitHub repository radareorg/radare2 prior to 5.8.6.",
  "repo": "radareorg/radare2",
  "patch_hash": "508a6307045441defd1bef0999a1f7052097613f",
  "patch_info": {
    "commit_hash": "508a6307045441defd1bef0999a1f7052097613f",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/508a6307045441defd1bef0999a1f7052097613f",
    "files": [
      "libr/bin/p/bin_coff.c"
    ],
    "message": "fix segfault when bin->symbols is NULL #21503",
    "before_after_code_files": [
      "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c": [
      "File: libr/bin/p/bin_coff.c -> libr/bin/p/bin_coff.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:  size_t nimports = 0;",
      "507:  int i;",
      "511:   }",
      "513:  }",
      "514:  ut64 m_vaddr = UT64_MAX;",
      "515:  if (nimports) {",
      "",
      "[Removed Lines]",
      "508:  for (i = 0; i < bin->hdr.f_nsyms; i++) {",
      "509:   if (is_imported_symbol (&bin->symbols[i])) {",
      "510:    nimports++;",
      "512:   i += bin->symbols[i].n_numaux;",
      "",
      "[Added Lines]",
      "508:  if (bin->symbols) {",
      "509:   for (i = 0; i < bin->hdr.f_nsyms; i++) {",
      "510:    if (is_imported_symbol (&bin->symbols[i])) {",
      "511:     nimports++;",
      "512:    }",
      "513:    i += bin->symbols[i].n_numaux;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2d085a0f0173dfcddee46acbc5180ed77736023",
      "candidate_info": {
        "commit_hash": "d2d085a0f0173dfcddee46acbc5180ed77736023",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/d2d085a0f0173dfcddee46acbc5180ed77736023",
        "files": [
          "libr/bin/format/coff/coff.c",
          "libr/bin/format/coff/coff.h",
          "libr/bin/format/coff/coff_specs.h",
          "libr/bin/p/bin_coff.c",
          "test/db/formats/coff"
        ],
        "message": "Support coff objects ##bin\n\nMain differences to regular coff are:\n* The header is different (56 bytes in size vs regular coff's 20 bytes).\n* New check function, also needed because the header is different\n* Symbol size is different (20 bytes vs regular coff's 18).\n\nTried following the elf32/64 example to avoid code duplication.\n\n* Merging COFF bigobj logic into existing COFF plugin.",
        "before_after_code_files": [
          "libr/bin/format/coff/coff.c||libr/bin/format/coff/coff.c",
          "libr/bin/format/coff/coff.h||libr/bin/format/coff/coff.h",
          "libr/bin/format/coff/coff_specs.h||libr/bin/format/coff/coff_specs.h",
          "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c"
          ],
          "candidate": [
            "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/coff/coff.c||libr/bin/format/coff/coff.c": [
          "File: libr/bin/format/coff/coff.c -> libr/bin/format/coff/coff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  return r_coff_supported_arch_le (buf) || r_coff_supported_arch_be (buf);",
          "53: }",
          "55: R_IPI char *r_coff_symbol_name(RBinCoffObj *obj, void *ptr) {",
          "56:  char n[256] = {0};",
          "57:  int len = 0;",
          "58:  union {",
          "59:   char name[8];",
          "60:   struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: static bool r_coff_decode_base64(const char *str, ut32 len, ut32 *res) {",
          "57:  ut32 i;",
          "58:  ut32 val;",
          "60:  val = 0;",
          "61:  for (i = 0; i < len; i++) {",
          "62:   char c = str[i];",
          "63:   ut32 d;",
          "64:   if (c >= 'A' && c <= 'Z') {",
          "65:    d = c - 'A';",
          "66:   } else if (c >= 'a' && c <= 'z') {",
          "67:    d = c - 'a' + 26;",
          "68:   } else if (c >= '0' && c <= '9') {",
          "69:    d = c - '0' + 52;",
          "70:   } else if (c == '+') {",
          "71:    d = 62;",
          "72:   } else if (c == '/') {",
          "73:    d = 63;",
          "74:   } else {",
          "75:    return false;",
          "76:   }",
          "79:   if ((val >> 26) != 0) {",
          "80:    return false;",
          "81:   }",
          "83:   val = (val << 6) + d;",
          "84:  }",
          "87:  return true;",
          "88: }",
          "93:  ut32 offset = 0; // offset into the string table.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  if (!ptr) {",
          "66:   return NULL;",
          "67:  }",
          "69:   return r_str_ndup (p->name, 8);",
          "70:  }",
          "73:   return NULL;",
          "74:  }",
          "76:  if (len < 1) {",
          "77:   return NULL;",
          "78:  }",
          "",
          "[Removed Lines]",
          "68:  if (p->zero) {",
          "71:  ut64 offset = obj->hdr.f_symptr + (obj->hdr.f_nsyms * sizeof (struct coff_symbol) + p->offset);",
          "72:  if (offset > obj->size) {",
          "75:  len = r_buf_read_at (obj->b, offset, (ut8*)n, sizeof (n));",
          "",
          "[Added Lines]",
          "106:  if (p->zero && *p->name != '/') {",
          "108:  } else if (*p->name == '/') {",
          "109:   char *offset_str = (p->name + 1);",
          "110:   if (*offset_str == '/') {",
          "111:    r_coff_decode_base64 (p->name + 2, 6, &offset);",
          "112:   } else {",
          "113:    offset = atoi (offset_str);",
          "114:   }",
          "115:  } else {",
          "116:   offset = p->offset;",
          "120:  ut64 name_ptr;",
          "121:  if (obj->type == COFF_TYPE_BIGOBJ) {",
          "122:   name_ptr = obj->bigobj_hdr.f_symptr + (obj->bigobj_hdr.f_nsyms * sizeof (struct coff_bigobj_symbol) + offset);",
          "123:  } else {",
          "124:   name_ptr = obj->hdr.f_symptr + (obj->hdr.f_nsyms * sizeof (struct coff_symbol) + offset);",
          "125:  }",
          "126:  if (name_ptr > obj->size) {",
          "129:  len = r_buf_read_at (obj->b, name_ptr, (ut8 *)n, sizeof (n));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:  return strdup (n);",
          "82: }",
          "86:   return 0;",
          "87:  }",
          "89:  return 1;",
          "90: }",
          "",
          "[Removed Lines]",
          "84: static int r_coff_rebase_sym(RBinCoffObj *obj, RBinAddr *addr, struct coff_symbol *sym) {",
          "85:  if (sym->n_scnum < 1 || sym->n_scnum > obj->hdr.f_nscns) {",
          "88:  addr->paddr = obj->scn_hdrs[sym->n_scnum - 1].s_scnptr + sym->n_value;",
          "",
          "[Added Lines]",
          "138: static int r_coff_rebase_sym(RBinCoffObj *obj, RBinAddr *addr, int symbol_index) {",
          "139:  ut32 n_scnum = 0;",
          "140:  ut32 n_value = 0;",
          "141:  ut32 f_nscns = 0;",
          "142:  if (obj->type == COFF_TYPE_BIGOBJ) {",
          "143:   n_scnum = obj->bigobj_symbols[symbol_index].n_scnum;",
          "144:   n_value = obj->bigobj_symbols[symbol_index].n_value;",
          "145:   f_nscns = obj->bigobj_hdr.f_nscns;",
          "146:  } else {",
          "147:   n_scnum = obj->symbols[symbol_index].n_scnum;",
          "148:   n_value = obj->symbols[symbol_index].n_value;",
          "149:   f_nscns = obj->hdr.f_nscns;",
          "150:  }",
          "152:  if (n_scnum < 1 || n_scnum > f_nscns) {",
          "155:  addr->paddr = obj->scn_hdrs[n_scnum - 1].s_scnptr + n_value;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:  return addr;",
          "146: }",
          "150: R_IPI RBinAddr *r_coff_get_entry(RBinCoffObj *obj) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215: static bool r_coff_get_entry_helper(RBinCoffObj *obj, RBinAddr *address) {",
          "216:  void *symbols = NULL;",
          "217:  size_t symbol_size;",
          "218:  size_t symbol_count;",
          "219:  if (obj->type == COFF_TYPE_BIGOBJ) {",
          "220:   symbols = (void *)obj->bigobj_symbols;",
          "221:   symbol_size = sizeof (struct coff_bigobj_symbol);",
          "222:   symbol_count = obj->bigobj_hdr.f_nsyms;",
          "223:  } else {",
          "224:   symbols = (void *)obj->symbols;",
          "225:   symbol_size = sizeof (struct coff_symbol);",
          "226:   symbol_count = obj->hdr.f_nsyms;",
          "227:  }",
          "229:  int i;",
          "231:  for (i = 0; i < symbol_count; i++) {",
          "232:   const char *name = (const char *)symbols + (i * symbol_size);",
          "233:   if ((!strcmp (name, \"_start\") || !strcmp (name, \"start\")) &&",
          "234:    r_coff_rebase_sym (obj, address, i)) {",
          "235:    return true;",
          "236:   }",
          "237:  }",
          "239:  for (i = 0; i < symbol_count; i++) {",
          "240:   const char *name = (const char *)symbols + (i * symbol_size);",
          "241:   if ((!strcmp (name, \"_main\") || !strcmp (name, \"main\")) &&",
          "242:    r_coff_rebase_sym (obj, address, i)) {",
          "243:    return true;",
          "244:   }",
          "245:  }",
          "246:  return false;",
          "247: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   return NULL;",
          "154:  }",
          "157:   return r_xcoff_get_entry (obj);",
          "158:  }",
          "161:   addr->paddr = obj->opt_hdr.entry;",
          "162:   return addr;",
          "163:  }",
          "181:   }",
          "182:  }",
          "183: #if 0",
          "",
          "[Removed Lines]",
          "156:  if (obj->xcoff) {",
          "160:  if (obj->hdr.f_opthdr) {",
          "166:  if (obj->symbols) {",
          "167:   int i;",
          "168:   for (i = 0; i < obj->hdr.f_nsyms; i++) {",
          "169:    if ((!strcmp (obj->symbols[i].n_name, \"_start\") ||",
          "170:         !strcmp (obj->symbols[i].n_name, \"start\")) &&",
          "171:     r_coff_rebase_sym (obj, addr, &obj->symbols[i])) {",
          "172:     return addr;",
          "173:    }",
          "174:   }",
          "175:   for (i = 0; i < obj->hdr.f_nsyms; i++) {",
          "176:    if ((!strcmp (obj->symbols[i].n_name, \"_main\") ||",
          "177:         !strcmp (obj->symbols[i].n_name, \"main\")) &&",
          "178:     r_coff_rebase_sym (obj, addr, &obj->symbols[i])) {",
          "179:     return addr;",
          "180:    }",
          "",
          "[Added Lines]",
          "257:  if (obj->type == COFF_TYPE_XCOFF) {",
          "261:  if (obj->type == COFF_TYPE_REGULAR && obj->hdr.f_opthdr) {",
          "268:  if ((obj->type == COFF_TYPE_BIGOBJ && obj->bigobj_symbols) || (obj->symbols)) {",
          "269:   if (r_coff_get_entry_helper (obj, addr)) {",
          "270:    return addr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199: }",
          "201: static bool r_bin_coff_init_hdr(RBinCoffObj *obj) {",
          "203:  switch (r_swap_ut16 (magic)) {",
          "204:  case COFF_FILE_MACHINE_H8300:",
          "205:  case COFF_FILE_MACHINE_AMD29K:",
          "",
          "[Removed Lines]",
          "202:  ut16 magic = r_buf_read_le16_at (obj->b, 0);",
          "",
          "[Added Lines]",
          "292:  ut8 buf[16];",
          "293:  int result = r_buf_read_at (obj->b, 12, buf, sizeof (buf));",
          "294:  if (result >= sizeof (buf) && memcmp (coff_bigobj_magic, buf, 16) == 0) {",
          "295:   obj->type = COFF_TYPE_BIGOBJ;",
          "296:  }",
          "298:  ut64 offset = obj->type == COFF_TYPE_BIGOBJ? 6: 0;",
          "299:  ut16 magic = r_buf_read_le16_at (obj->b, offset);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:  default:",
          "215:   obj->endian = COFF_IS_LITTLE_ENDIAN;",
          "216:  }",
          "217:  int ret = 0;",
          "220:   return false;",
          "221:  }",
          "223:   ret = r_buf_fread (obj->b, (ut8 *)&obj->target_id, obj->endian? \"S\": \"s\", 1);",
          "224:   if (ret != sizeof (ut16)) {",
          "225:    return false;",
          "226:   }",
          "227:  }",
          "229:  return true;",
          "230: }",
          "",
          "[Removed Lines]",
          "218:  ret = r_buf_fread_at (obj->b, 0, (ut8 *)&obj->hdr, obj->endian? \"2S3I2S\": \"2s3i2s\", 1);",
          "219:  if (ret != sizeof (struct coff_hdr)) {",
          "222:  if (obj->hdr.f_magic == COFF_FILE_TI_COFF) {",
          "228:  obj->xcoff = obj->hdr.f_opthdr == sizeof (struct coff_opt_hdr) + sizeof (struct xcoff32_opt_hdr);",
          "",
          "[Added Lines]",
          "317:  int expected = obj->type == COFF_TYPE_BIGOBJ? sizeof (struct coff_bigobj_hdr): sizeof (struct coff_hdr);",
          "319:  if (obj->type == COFF_TYPE_BIGOBJ) {",
          "320:   ret = r_buf_fread_at (obj->b, 0, (ut8 *)&obj->bigobj_hdr, obj->endian? \"4S12I\": \"4s12i\", 1);",
          "321:  } else {",
          "322:   ret = r_buf_fread_at (obj->b, 0, (ut8 *)&obj->hdr, obj->endian? \"2S3I2S\": \"2s3i2s\", 1);",
          "323:  }",
          "324:  if (ret != expected) {",
          "328:  if (magic == COFF_FILE_TI_COFF) {",
          "335:  if (obj->type != COFF_TYPE_BIGOBJ &&",
          "336:   obj->hdr.f_opthdr == sizeof (struct coff_opt_hdr) + sizeof (struct xcoff32_opt_hdr)) {",
          "337:   obj->type = COFF_TYPE_XCOFF;",
          "338:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "242:  return true;",
          "243: }",
          "245: static bool r_bin_xcoff_init_opt_hdr(RBinCoffObj *obj) {",
          "246:  int ret;",
          "247:  ret = r_buf_fread_at (obj->b, sizeof (struct coff_hdr) + sizeof (struct coff_opt_hdr),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: #ifndef R_BIN_COFF_BIGOBJ",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "251:  }",
          "252:  return true;",
          "253: }",
          "255: static bool r_bin_coff_init_scn_hdr(RBinCoffObj *obj) {",
          "259:   offset += 2;",
          "260:  }",
          "262:  if (offset > obj->size || offset + size > obj->size || size < 0) {",
          "263:   return false;",
          "264:  }",
          "",
          "[Removed Lines]",
          "256:  int ret, size;",
          "257:  ut64 offset = sizeof (struct coff_hdr) + obj->hdr.f_opthdr;",
          "258:  if (obj->hdr.f_magic == COFF_FILE_TI_COFF) {",
          "261:  size = obj->hdr.f_nscns * sizeof (struct coff_scn_hdr);",
          "",
          "[Added Lines]",
          "365: #endif",
          "368:  int ret, size, f_nscns;",
          "370:  ut64 offset = 0;",
          "371:  ut16 f_magic;",
          "372:  if (obj->type == COFF_TYPE_BIGOBJ) {",
          "373:   offset = sizeof (struct coff_bigobj_hdr);",
          "374:   f_nscns = obj->bigobj_hdr.f_nscns;",
          "375:   f_magic = obj->bigobj_hdr.f_magic;",
          "376:  } else {",
          "377:   offset = sizeof (struct coff_hdr) + obj->hdr.f_opthdr;",
          "378:   f_nscns = obj->hdr.f_nscns;",
          "379:   f_magic = obj->hdr.f_magic;",
          "380:  }",
          "382:  if (f_magic == COFF_FILE_TI_COFF) {",
          "385:  size = f_nscns * sizeof (struct coff_scn_hdr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "266:  if (!obj->scn_hdrs) {",
          "267:   return false;",
          "268:  }",
          "270:  if (ret != size) {",
          "271:   R_FREE (obj->scn_hdrs);",
          "272:   return false;",
          "",
          "[Removed Lines]",
          "269:  ret = r_buf_fread_at (obj->b, offset, (ut8 *)obj->scn_hdrs, obj->endian? \"8c6I2S1I\": \"8c6i2s1i\", obj->hdr.f_nscns);",
          "",
          "[Added Lines]",
          "393:  ret = r_buf_fread_at (obj->b, offset, (ut8 *)obj->scn_hdrs, obj->endian? \"8c6I2S1I\": \"8c6i2s1i\", f_nscns);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "329: static bool r_bin_coff_init_symtable(RBinCoffObj *obj) {",
          "330:  int ret, size;",
          "333:   return true;",
          "334:  }",
          "336:   return false;",
          "337:  }",
          "339:  if (size < 0 ||",
          "340:   size > obj->size ||",
          "341:   offset > obj->size ||",
          "342:   offset + size > obj->size) {",
          "343:   return false;",
          "344:  }",
          "347:   return false;",
          "348:  }",
          "350:  if (ret != size) {",
          "352:   return false;",
          "353:  }",
          "354:  return true;",
          "355: }",
          "357: static bool r_bin_coff_init_scn_va(RBinCoffObj *obj) {",
          "359:  if (!obj->scn_va) {",
          "360:   return false;",
          "361:  }",
          "362:  int i;",
          "363:  ut64 va = 0;",
          "365:   ut64 sz = obj->scn_hdrs[i].s_size;",
          "366:   if (sz < 16) {",
          "367:    sz = 16;",
          "",
          "[Removed Lines]",
          "331:  ut64 offset = obj->hdr.f_symptr;",
          "332:  if (!obj->hdr.f_nsyms) {",
          "335:  if (obj->hdr.f_nsyms >= 0xffff) { // too much symbols, probably not allocatable",
          "338:  size = obj->hdr.f_nsyms * sizeof (struct coff_symbol);",
          "345:  obj->symbols = calloc (1, size + sizeof (struct coff_symbol));",
          "346:  if (!obj->symbols) {",
          "349:  ret = r_buf_fread_at (obj->b, offset, (ut8 *)obj->symbols, obj->endian? \"8c1I2S2c\": \"8c1i2s2c\", obj->hdr.f_nsyms);",
          "351:   R_FREE (obj->symbols);",
          "358:  obj->scn_va = R_NEWS (ut64, obj->hdr.f_nscns);",
          "364:  for (i = 0; i < obj->hdr.f_nscns; i++) {",
          "",
          "[Added Lines]",
          "455:  ut32 f_symptr = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_symptr: obj->hdr.f_symptr;",
          "456:  ut32 f_nsyms = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_nsyms: obj->hdr.f_nsyms;",
          "457:  ut64 offset = f_symptr;",
          "458:  ut32 symbol_size = obj->type == COFF_TYPE_BIGOBJ? sizeof (struct coff_bigobj_symbol): sizeof (struct coff_symbol);",
          "459:  void *symbols = obj->type == COFF_TYPE_BIGOBJ? (void *)obj->bigobj_symbols: (void *)obj->symbols;",
          "461:  if (!f_nsyms) {",
          "465:  if (obj->type != COFF_TYPE_BIGOBJ && f_nsyms >= 0xffff) { // too much symbols, probably not allocatable",
          "468:  size = f_nsyms * symbol_size;",
          "475:  symbols = calloc (1, size + symbol_size);",
          "476:  if (!symbols) {",
          "479:  if (obj->type == COFF_TYPE_BIGOBJ) {",
          "480:   obj->bigobj_symbols = symbols;",
          "481:   ret = r_buf_fread_at (obj->b, offset, (ut8 *)obj->bigobj_symbols, obj->endian? \"8c2I1S2c\": \"8c2i1s2c\", f_nsyms);",
          "482:  } else {",
          "483:   obj->symbols = symbols;",
          "484:   ret = r_buf_fread_at (obj->b, offset, (ut8 *)obj->symbols, obj->endian? \"8c1I2S2c\": \"8c1i2s2c\", f_nsyms);",
          "485:  }",
          "487:   R_FREE (symbols);",
          "494:  int f_nscns = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_nscns: obj->hdr.f_nscns;",
          "495:  obj->scn_va = R_NEWS (ut64, f_nscns);",
          "501:  for (i = 0; i < f_nscns; i++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "382:  obj->verbose = verbose;",
          "383:  obj->sym_ht = ht_up_new0 ();",
          "384:  obj->imp_ht = ht_up_new0 ();",
          "385:  if (!r_bin_coff_init_hdr (obj)) {",
          "386:   R_LOG_ERROR (\"failed to init coff header\");",
          "387:   return false;",
          "388:  }",
          "392:  }",
          "393:  if (!r_bin_coff_init_scn_hdr (obj)) {",
          "394:   R_LOG_WARN (\"failed to init section header\");",
          "395:   return false;",
          "396:  }",
          "398:   if (!r_bin_coff_init_scn_va (obj)) {",
          "399:    R_LOG_WARN (\"failed to init section VA table\");",
          "400:    return false;",
          "",
          "[Removed Lines]",
          "389:  r_bin_coff_init_opt_hdr (obj);",
          "390:  if (obj->xcoff) {",
          "391:   r_bin_xcoff_init_opt_hdr (obj);",
          "397:  if (!obj->xcoff) {",
          "",
          "[Added Lines]",
          "525:  obj->type = COFF_TYPE_REGULAR;",
          "531:  if (obj->type != COFF_TYPE_BIGOBJ) {",
          "532:   r_bin_coff_init_opt_hdr (obj);",
          "533:   if (obj->type == COFF_TYPE_XCOFF) {",
          "534:    r_bin_xcoff_init_opt_hdr (obj);",
          "535:   }",
          "542:  if (obj->type != COFF_TYPE_XCOFF) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "423:   free (obj->scn_va);",
          "424:   free (obj->scn_hdrs);",
          "425:   free (obj->x_ldsyms);",
          "427:   r_buf_free (obj->b);",
          "428:   free (obj);",
          "429:  }",
          "",
          "[Removed Lines]",
          "426:   free (obj->symbols);",
          "",
          "[Added Lines]",
          "571:   if (obj->type == COFF_TYPE_BIGOBJ) {",
          "572:    free (obj->bigobj_symbols);",
          "573:   } else {",
          "574:    free (obj->symbols);",
          "575:   }",
          "",
          "---------------"
        ],
        "libr/bin/format/coff/coff.h||libr/bin/format/coff/coff.h": [
          "File: libr/bin/format/coff/coff.h -> libr/bin/format/coff/coff.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  struct xcoff32_ldhdr x_ldhdr;",
          "22:  struct xcoff32_ldsym *x_ldsyms;",
          "26:  RBuffer *b;",
          "27:  size_t size;",
          "29:  ut8 endian;",
          "30:  Sdb *kv;",
          "31:  bool verbose;",
          "",
          "[Removed Lines]",
          "28:  bool xcoff;",
          "",
          "[Added Lines]",
          "26:  struct coff_bigobj_hdr bigobj_hdr;",
          "27:  struct coff_bigobj_symbol *bigobj_symbols;",
          "33:  coff_type type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: } RBinCoffObj;",
          "39: R_IPI void r_bin_coff_free(RBinCoffObj *obj);",
          "40: R_IPI RBinAddr *r_coff_get_entry(RBinCoffObj *obj);",
          "41: R_IPI char *r_coff_symbol_name(RBinCoffObj *obj, void *ptr);",
          "",
          "[Removed Lines]",
          "38: R_IPI RBinCoffObj* r_bin_coff_new_buf(RBuffer *buf, bool verbose);",
          "",
          "[Added Lines]",
          "43: R_IPI RBinCoffObj *r_bin_coff_new_buf(RBuffer *buf, bool verbose);",
          "",
          "---------------"
        ],
        "libr/bin/format/coff/coff_specs.h||libr/bin/format/coff/coff_specs.h": [
          "File: libr/bin/format/coff/coff_specs.h -> libr/bin/format/coff/coff_specs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: #define COFF_IS_BIG_ENDIAN 1",
          "229: #define COFF_IS_LITTLE_ENDIAN 0",
          "244: R_PACKED (",
          "",
          "[Removed Lines]",
          "232: R_PACKED(",
          "233: struct coff_hdr {",
          "241: });// __attribute__ ((packed));",
          "",
          "[Added Lines]",
          "231: typedef enum {",
          "232:  COFF_TYPE_REGULAR,",
          "233:  COFF_TYPE_XCOFF,",
          "234:  COFF_TYPE_BIGOBJ,",
          "235: } coff_type;",
          "237: static const char coff_bigobj_magic[16] = {",
          "238:  0xC7, 0xA1, 0xBA, 0xD1, 0xEE, 0xBA, 0xa9, 0x4b,",
          "239:  0xAF, 0x20, 0xFA, 0xF6, 0x6A, 0xA4, 0xDC, 0xB8",
          "240: };",
          "242: R_PACKED (",
          "244:  struct coff_hdr {",
          "252:  }); // __attribute__ ((packed));",
          "254: R_PACKED (",
          "255:  struct coff_bigobj_hdr {",
          "269:  }); // __attribute__ ((packed));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371: });",
          "373: #define COFF_SYM_GET_DTYPE(type) (((type) >> 4) & 3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: R_PACKED (",
          "404:  struct coff_bigobj_symbol {",
          "411:  });",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c": [
          "File: libr/bin/p/bin_coff.c -> libr/bin/p/bin_coff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: }",
          "13: static bool r_coff_is_stripped(struct r_bin_coff_obj *obj) {",
          "16: }",
          "18: static bool load(RBinFile *bf, RBuffer *buf, ut64 loadaddr) {",
          "",
          "[Removed Lines]",
          "14:  return !!(obj->hdr.f_flags & (COFF_FLAGS_TI_F_RELFLG | \\",
          "15:   COFF_FLAGS_TI_F_LNNO | COFF_FLAGS_TI_F_LSYMS));",
          "",
          "[Added Lines]",
          "14:  ut16 flags = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_flags: obj->hdr.f_flags;",
          "15:  return !!(flags & (COFF_FLAGS_TI_F_RELFLG | COFF_FLAGS_TI_F_LNNO | COFF_FLAGS_TI_F_LSYMS));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: }",
          "23: static void destroy(RBinFile *bf) {",
          "25: }",
          "27: static RBinAddr *binsym(RBinFile *bf, int sym) {",
          "",
          "[Removed Lines]",
          "24:  r_bin_coff_free ((struct r_bin_coff_obj*)bf->bo->bin_obj);",
          "",
          "[Added Lines]",
          "24:  r_bin_coff_free ((struct r_bin_coff_obj *)bf->bo->bin_obj);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33: static bool _fill_bin_symbol(RBin *rbin, struct r_bin_coff_obj *bin, int idx, RBinSymbol **sym) {",
          "34:  RBinSymbol *ptr = *sym;",
          "36:  struct coff_scn_hdr *sc_hdr = NULL;",
          "38:   return false;",
          "39:  }",
          "41:   return false;",
          "42:  }",
          "44:  char *coffname = r_coff_symbol_name (bin, s);",
          "45:  if (!coffname) {",
          "46:   return false;",
          "",
          "[Removed Lines]",
          "35:  struct coff_symbol *s = NULL;",
          "37:  if (idx < 0 || idx > bin->hdr.f_nsyms) {",
          "40:  if (!bin->symbols) {",
          "43:  s = &bin->symbols[idx];",
          "",
          "[Added Lines]",
          "36:  void *s = NULL;",
          "38:  ut32 f_nsyms = 0;",
          "39:  ut32 f_nscns = 0;",
          "40:  ut32 n_scnum = 0;",
          "41:  ut32 n_value = 0;",
          "42:  ut16 n_type = 0;",
          "43:  ut8 n_sclass = 0;",
          "44:  char *n_name;",
          "46:  if ((bin->type == COFF_TYPE_BIGOBJ && !bin->bigobj_symbols) || (bin->type != COFF_TYPE_BIGOBJ && !bin->symbols)) {",
          "50:  if (bin->type == COFF_TYPE_BIGOBJ) {",
          "51:   f_nsyms = bin->bigobj_hdr.f_nsyms;",
          "52:   f_nscns = bin->bigobj_hdr.f_nscns;",
          "53:   n_scnum = bin->bigobj_symbols[idx].n_scnum;",
          "54:   n_value = bin->bigobj_symbols[idx].n_value;",
          "55:   n_type = bin->bigobj_symbols[idx].n_type;",
          "56:   n_sclass = bin->bigobj_symbols[idx].n_sclass;",
          "57:   n_name = bin->bigobj_symbols[idx].n_name;",
          "58:   s = &bin->bigobj_symbols[idx];",
          "59:  } else {",
          "60:   f_nsyms = bin->hdr.f_nsyms;",
          "61:   f_nscns = bin->hdr.f_nscns;",
          "62:   n_scnum = bin->symbols[idx].n_scnum;",
          "63:   n_value = bin->symbols[idx].n_value;",
          "64:   n_type = bin->symbols[idx].n_type;",
          "65:   n_sclass = bin->symbols[idx].n_sclass;",
          "66:   n_name = bin->symbols[idx].n_name;",
          "67:   s = &bin->symbols[idx];",
          "68:  }",
          "70:  if (idx < 0 || idx > f_nsyms) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:  ptr->forwarder = \"NONE\";",
          "50:  ptr->bind = R_BIN_BIND_LOCAL_STR;",
          "51:  ptr->is_imported = false;",
          "56:   if (bin->scn_va) {",
          "58:   }",
          "59:  }",
          "62:  case COFF_SYM_CLASS_FUNCTION:",
          "63:   ptr->type = R_BIN_TYPE_FUNC_STR;",
          "64:   break;",
          "",
          "[Removed Lines]",
          "52:  if (s->n_scnum < bin->hdr.f_nscns + 1 && s->n_scnum > 0) {",
          "54:   sc_hdr = &bin->scn_hdrs[s->n_scnum - 1];",
          "55:   ptr->paddr = sc_hdr->s_scnptr + s->n_value;",
          "57:    ptr->vaddr = bin->scn_va[s->n_scnum - 1] + s->n_value;",
          "61:  switch (s->n_sclass) {",
          "",
          "[Added Lines]",
          "82:  if (n_scnum < f_nscns + 1 && n_scnum > 0) {",
          "84:   sc_hdr = &bin->scn_hdrs[n_scnum - 1];",
          "85:   ptr->paddr = sc_hdr->s_scnptr + n_value;",
          "87:    ptr->vaddr = bin->scn_va[n_scnum - 1] + n_value;",
          "91:  switch (n_sclass) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69:   ptr->type = R_BIN_TYPE_SECTION_STR;",
          "70:   break;",
          "71:  case COFF_SYM_CLASS_EXTERNAL:",
          "73:    ptr->is_imported = true;",
          "74:    ptr->paddr = ptr->vaddr = UT64_MAX;",
          "75:    ptr->bind = \"NONE\";",
          "76:   } else {",
          "77:    ptr->bind = R_BIN_BIND_GLOBAL_STR;",
          "78:   }",
          "80:    ? R_BIN_TYPE_FUNC_STR",
          "81:    : R_BIN_TYPE_UNKNOWN_STR;",
          "82:   break;",
          "83:  case COFF_SYM_CLASS_STATIC:",
          "85:    ptr->type = \"ABS\";",
          "86:    ptr->paddr = ptr->vaddr = UT64_MAX;",
          "88:    if (ptr->name) {",
          "89:     R_FREE (coffname);",
          "90:    } else {",
          "91:     ptr->name = coffname;",
          "92:    }",
          "94:    ptr->type = R_BIN_TYPE_SECTION_STR;",
          "95:   } else {",
          "97:     ? R_BIN_TYPE_FUNC_STR",
          "98:     : R_BIN_TYPE_UNKNOWN_STR;",
          "99:   }",
          "100:   break;",
          "101:  default:",
          "102:   {",
          "105:   }",
          "106:   break;",
          "108:  ptr->size = 4;",
          "109:  ptr->ordinal = 0;",
          "110:  return true;",
          "111: }",
          "115: }",
          "117: static RBinImport *_fill_bin_import(struct r_bin_coff_obj *bin, int idx) {",
          "118:  RBinImport *ptr = R_NEW0 (RBinImport);",
          "120:   free (ptr);",
          "121:   return NULL;",
          "122:  }",
          "125:   free (ptr);",
          "126:   return NULL;",
          "127:  }",
          "",
          "[Removed Lines]",
          "72:   if (s->n_scnum == COFF_SYM_SCNUM_UNDEF) {",
          "79:   ptr->type = (DTYPE_IS_FUNCTION (s->n_type) || !strcmp (coffname, \"main\"))",
          "84:   if (s->n_scnum == COFF_SYM_SCNUM_ABS) {",
          "87:    ptr->name = r_str_newf (\"%s-0x%08x\", coffname, s->n_value);",
          "93:   } else if (sc_hdr && !memcmp (sc_hdr->s_name, s->n_name, 8)) {",
          "96:    ptr->type = DTYPE_IS_FUNCTION (s->n_type)",
          "103:    r_strf_var (ivar, 32, \"%i\", s->n_sclass);",
          "104:    ptr->type = r_str_constpool_get (&rbin->constpool, ivar);",
          "107:  }",
          "113: static bool is_imported_symbol(struct coff_symbol *s) {",
          "114:  return s->n_scnum == COFF_SYM_SCNUM_UNDEF && s->n_sclass == COFF_SYM_CLASS_EXTERNAL;",
          "119:  if (!ptr || idx < 0 || idx > bin->hdr.f_nsyms) {",
          "123:  struct coff_symbol *s = &bin->symbols[idx];",
          "124:  if (!is_imported_symbol (s)) {",
          "",
          "[Added Lines]",
          "102:   if (n_scnum == COFF_SYM_SCNUM_UNDEF) {",
          "109:   ptr->type = (DTYPE_IS_FUNCTION (n_type) || !strcmp (coffname, \"main\"))",
          "114:   if (n_scnum == COFF_SYM_SCNUM_ABS) {",
          "117:    ptr->name = r_str_newf (\"%s-0x%08x\", coffname, n_value);",
          "123:   } else if (sc_hdr && !memcmp (sc_hdr->s_name, n_name, 8)) {",
          "126:    ptr->type = DTYPE_IS_FUNCTION (n_type)",
          "133:   r_strf_var (ivar, 32, \"%i\", n_sclass);",
          "134:   ptr->type = r_str_constpool_get (&rbin->constpool, ivar);",
          "137:   }",
          "143: static bool is_imported_symbol(struct r_bin_coff_obj *bin, int idx) {",
          "144:  ut32 n_scnum = bin->type == COFF_TYPE_BIGOBJ? bin->bigobj_symbols[idx].n_scnum: bin->symbols[idx].n_scnum;",
          "145:  ut32 n_sclass = bin->type == COFF_TYPE_BIGOBJ? bin->bigobj_symbols[idx].n_sclass: bin->symbols[idx].n_sclass;",
          "146:  return n_scnum == COFF_SYM_SCNUM_UNDEF && n_sclass == COFF_SYM_CLASS_EXTERNAL;",
          "151:  void *s = NULL;",
          "152:  ut16 n_type = 0;",
          "153:  ut32 f_nsyms = bin->type == COFF_TYPE_BIGOBJ? bin->bigobj_hdr.f_nsyms: bin->hdr.f_nsyms;",
          "154:  if (!ptr || idx < 0 || idx > f_nsyms) {",
          "158:  if (bin->type == COFF_TYPE_BIGOBJ) {",
          "159:   s = &bin->bigobj_symbols[idx];",
          "160:   n_type = bin->bigobj_symbols[idx].n_type;",
          "161:  } else {",
          "162:   s = &bin->symbols[idx];",
          "163:   n_type = bin->symbols[idx].n_type;",
          "164:  }",
          "165:  if (!is_imported_symbol (bin, idx)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:  }",
          "133:  ptr->name = coffname;",
          "134:  ptr->bind = \"NONE\";",
          "136:   ? R_BIN_TYPE_FUNC_STR",
          "137:   : R_BIN_TYPE_UNKNOWN_STR;",
          "138:  return ptr;",
          "",
          "[Removed Lines]",
          "135:  ptr->type = DTYPE_IS_FUNCTION (s->n_type)",
          "",
          "[Added Lines]",
          "176:  ptr->type = DTYPE_IS_FUNCTION (n_type)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:  if (!ret) {",
          "310:   return NULL;",
          "311:  }",
          "312:  if (obj && obj->scn_hdrs) {",
          "314:    tmp = r_coff_symbol_name (obj, &obj->scn_hdrs[i]);",
          "315:    if (!tmp) {",
          "316:     r_list_free (ret);",
          "",
          "[Removed Lines]",
          "313:   for (i = 0; i < obj->hdr.f_nscns; i++) {",
          "",
          "[Added Lines]",
          "353:  ut32 f_nscns = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_nscns: obj->hdr.f_nscns;",
          "355:   for (i = 0; i < f_nscns; i++) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "325:    }",
          "326:    ptr->name = r_str_newf (\"%s-%u\", tmp, (unsigned int)i);",
          "327:    free (tmp);",
          "329:     xcoff_section (ptr, obj, i);",
          "330:    } else {",
          "331:     coff_section (ptr, obj, i);",
          "",
          "[Removed Lines]",
          "328:    if (obj->xcoff) {",
          "",
          "[Added Lines]",
          "370:    if (obj->type == COFF_TYPE_XCOFF) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "346:   return NULL;",
          "347:  }",
          "348:  ret->free = free;",
          "351:    if (!(ptr = R_NEW0 (RBinSymbol))) {",
          "352:     break;",
          "353:    }",
          "",
          "[Removed Lines]",
          "349:  if (obj->symbols) {",
          "350:   for (i = 0; i < obj->hdr.f_nsyms; i++) {",
          "",
          "[Added Lines]",
          "391:  if ((obj->type == COFF_TYPE_BIGOBJ && obj->bigobj_symbols) || obj->symbols) {",
          "392:   ut32 f_nsyms = 0;",
          "393:   ut32 symbol_size = 0;",
          "394:   void *symbols;",
          "395:   size_t numaux_offset = 0;",
          "397:   if (obj->type == COFF_TYPE_BIGOBJ) {",
          "398:    f_nsyms = obj->bigobj_hdr.f_nsyms;",
          "399:    symbol_size = sizeof (struct coff_bigobj_symbol);",
          "400:    symbols = obj->bigobj_symbols;",
          "401:    numaux_offset = offsetof (struct coff_bigobj_symbol, n_numaux);",
          "402:   } else {",
          "403:    f_nsyms = obj->hdr.f_nsyms;",
          "404:    symbol_size = sizeof (struct coff_symbol);",
          "405:    symbols = obj->symbols;",
          "406:    numaux_offset = offsetof (struct coff_symbol, n_numaux);",
          "407:   }",
          "409:   for (i = 0; i < f_nsyms; i++) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "357:    } else {",
          "358:     free (ptr);",
          "359:    }",
          "361:   }",
          "362:  }",
          "363:  return ret;",
          "",
          "[Removed Lines]",
          "360:    i += obj->symbols[i].n_numaux;",
          "",
          "[Added Lines]",
          "420:    ut8 n_numaux = *((ut8 *)symbols + i * symbol_size + numaux_offset);",
          "421:    i += n_numaux;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "380:     ht_up_insert (obj->imp_ht, (ut64)i, ptr);",
          "381:    }",
          "382:   }",
          "385:    RBinImport *ptr = _fill_bin_import (obj, i);",
          "386:    if (ptr) {",
          "387:     ptr->ordinal = ord++;",
          "388:     r_list_append (ret, ptr);",
          "389:     ht_up_insert (obj->imp_ht, (ut64)i, ptr);",
          "390:    }",
          "392:   }",
          "393:  }",
          "394:  return ret;",
          "",
          "[Removed Lines]",
          "383:  } else if (obj->symbols) {",
          "384:   for (i = 0; i < obj->hdr.f_nsyms; i++) {",
          "391:    i += obj->symbols[i].n_numaux;",
          "",
          "[Added Lines]",
          "444:  } else if ((obj->type == COFF_TYPE_BIGOBJ && obj->bigobj_symbols) || obj->symbols) {",
          "445:   ut32 f_nsyms = 0;",
          "446:   ut32 symbol_size = 0;",
          "447:   void *symbols;",
          "448:   size_t numaux_offset = 0;",
          "450:   if (obj->type == COFF_TYPE_BIGOBJ) {",
          "451:    f_nsyms = obj->bigobj_hdr.f_nsyms;",
          "452:    symbol_size = sizeof (struct coff_bigobj_symbol);",
          "453:    symbols = obj->bigobj_symbols;",
          "454:    numaux_offset = offsetof (struct coff_bigobj_symbol, n_numaux);",
          "455:   } else {",
          "456:    f_nsyms = obj->hdr.f_nsyms;",
          "457:    symbol_size = sizeof (struct coff_symbol);",
          "458:    symbols = obj->symbols;",
          "459:    numaux_offset = offsetof (struct coff_symbol, n_numaux);",
          "460:   }",
          "461:   for (i = 0; i < f_nsyms; i++) {",
          "468:    ut8 n_numaux = *((ut8 *)symbols + i * symbol_size + numaux_offset);",
          "469:    i += n_numaux;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "425:  RBinReloc *reloc;",
          "426:  struct coff_reloc *rel;",
          "427:  int j, i = 0;",
          "428:  RList *list_rel = r_list_newf (free);",
          "429:  if (!list_rel) {",
          "430:   return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:  ut32 f_nscns = bin->type == COFF_TYPE_BIGOBJ? bin->bigobj_hdr.f_nscns: bin->hdr.f_nscns;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "435:   r_list_free (list_rel);",
          "436:   return NULL;",
          "437:  }",
          "439:   if (!bin->scn_hdrs[i].s_nreloc) {",
          "440:    continue;",
          "441:   }",
          "",
          "[Removed Lines]",
          "438:  for (i = 0; i < bin->hdr.f_nscns; i++) {",
          "",
          "[Added Lines]",
          "517:  for (i = 0; i < f_nscns; i++) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "492:    if (sym_vaddr) {",
          "493:     int plen = 0;",
          "494:     ut8 patch_buf[8];",
          "496:     case COFF_FILE_MACHINE_I386:",
          "497:      switch (rel[j].r_type) {",
          "498:      case COFF_REL_I386_DIR32:",
          "",
          "[Removed Lines]",
          "495:     switch (bin->hdr.f_magic) {",
          "",
          "[Added Lines]",
          "574:     ut16 magic = bin->type == COFF_TYPE_BIGOBJ? bin->bigobj_hdr.f_magic: bin->hdr.f_magic;",
          "575:     switch (magic) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "596:  RBin *b = bf->rbin;",
          "597:  RBinObject *bo = r_bin_cur_object (b);",
          "598:  RIO *io = bf->rbin->iob.io;",
          "599:  if (!bo || !bo->bin_obj) {",
          "600:   return NULL;",
          "601:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "679:  void *symbols = NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "607:  size_t nimports = 0;",
          "608:  int i;",
          "612:     nimports++;",
          "613:    }",
          "615:   }",
          "616:  }",
          "617:  ut64 m_vaddr = UT64_MAX;",
          "",
          "[Removed Lines]",
          "609:  if (bin->symbols) {",
          "610:   for (i = 0; i < bin->hdr.f_nsyms; i++) {",
          "611:    if (is_imported_symbol (&bin->symbols[i])) {",
          "614:    i += bin->symbols[i].n_numaux;",
          "",
          "[Added Lines]",
          "690:  ut32 f_nsyms = 0;",
          "691:  size_t symbol_size = 0;",
          "692:  size_t numaux_offset = 0;",
          "693:  if ((bin->type == COFF_TYPE_BIGOBJ && bin->bigobj_symbols) || bin->symbols) {",
          "695:   if (bin->type == COFF_TYPE_BIGOBJ) {",
          "696:    symbols = bin->bigobj_symbols;",
          "697:    f_nsyms = bin->bigobj_hdr.f_nsyms;",
          "698:    symbol_size = sizeof (struct coff_bigobj_symbol);",
          "699:   } else {",
          "700:    symbols = bin->symbols;",
          "701:    f_nsyms = bin->hdr.f_nsyms;",
          "702:    symbol_size = sizeof (struct coff_symbol);",
          "703:   }",
          "705:   for (i = 0; i < f_nsyms; i++) {",
          "706:    if (is_imported_symbol (bin, i)) {",
          "709:    ut8 n_numaux = *((ut8 *)symbols + i * symbol_size + numaux_offset);",
          "710:    i += n_numaux;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "654:  ret->rclass = strdup (\"coff\");",
          "655:  ret->bclass = strdup (\"coff\");",
          "657:  case COFF_FILE_MACHINE_ALPHA:",
          "658:  case COFF_FILE_MACHINE_POWERPC:",
          "659:  case COFF_FILE_MACHINE_R4000:",
          "",
          "[Removed Lines]",
          "656:  switch (obj->hdr.f_magic) {",
          "",
          "[Added Lines]",
          "752:  ut16 magic = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_magic: obj->hdr.f_magic;",
          "753:  ut16 flags = obj->type == COFF_TYPE_BIGOBJ? obj->bigobj_hdr.f_flags: obj->hdr.f_flags;",
          "754:  switch (magic) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "688:  if (r_coff_is_stripped (obj)) {",
          "689:   ret->dbg_info |= R_BIN_DBG_STRIPPED;",
          "690:  } else {",
          "692:    ret->dbg_info |= R_BIN_DBG_RELOCS;",
          "693:   }",
          "695:    ret->dbg_info |= R_BIN_DBG_LINENUMS;",
          "696:   }",
          "698:    ret->dbg_info |= R_BIN_DBG_SYMS;",
          "699:   }",
          "700:  }",
          "703:  case COFF_FILE_MACHINE_R4000:",
          "704:   case COFF_FILE_MACHINE_MIPS16:",
          "705:   case COFF_FILE_MACHINE_MIPSFPU:",
          "",
          "[Removed Lines]",
          "691:   if (!(obj->hdr.f_flags & COFF_FLAGS_TI_F_RELFLG)) {",
          "694:   if (!(obj->hdr.f_flags & COFF_FLAGS_TI_F_LNNO)) {",
          "697:   if (!(obj->hdr.f_flags & COFF_FLAGS_TI_F_EXEC)) {",
          "702:  switch (obj->hdr.f_magic) {",
          "",
          "[Added Lines]",
          "789:   if (!(flags & COFF_FLAGS_TI_F_RELFLG)) {",
          "792:   if (!(flags & COFF_FLAGS_TI_F_LNNO)) {",
          "795:   if (!(flags & COFF_FLAGS_TI_F_EXEC)) {",
          "800:  switch (magic) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "806:  return ret;",
          "807: }",
          "810: #if 0",
          "811: TODO: do more checks here to avoid false positives",
          "",
          "[Removed Lines]",
          "809: static bool check(RBinFile *bf, RBuffer *buf) {",
          "",
          "[Added Lines]",
          "907: static bool check_coff_bigobj(RBinFile *bf, RBuffer *buf) {",
          "908:  ut8 tmp[56];",
          "909:  int r = r_buf_read_at (buf, 0, tmp, sizeof (tmp));",
          "911:  if (r >= 56) {",
          "912:   ut16 sig1 = r_read_le16 (tmp);",
          "914:   if (sig1 != COFF_FILE_MACHINE_UNKNOWN) {",
          "915:    return false;",
          "916:   }",
          "918:   ut16 sig2 = r_read_le16 (&tmp[2]);",
          "919:   if (sig2 != 0xffff) {",
          "920:    return false;",
          "921:   }",
          "923:   ut16 version = r_read_le16 (&tmp[4]);",
          "924:   if (version != 2) {",
          "925:    return false;",
          "926:   }",
          "928:   if (!r_coff_supported_arch (&tmp[6])) {",
          "929:    return false;",
          "930:   }",
          "933:   if (memcmp (coff_bigobj_magic, &tmp[12], 16) != 0) {",
          "934:    return false;",
          "935:   }",
          "937:   return true;",
          "938:  }",
          "940:  return false;",
          "941: }",
          "943: static bool check_coff(RBinFile *bf, RBuffer *buf) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "824:  return r >= 20 && r_coff_supported_arch (tmp);",
          "825: }",
          "827: RBinPlugin r_bin_plugin_coff = {",
          "828:  .meta = {",
          "829:   .name = \"coff\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "961: static bool check(RBinFile *bf, RBuffer *buf) {",
          "962:  return check_coff (bf, buf) || check_coff_bigobj (bf, buf);",
          "963: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}