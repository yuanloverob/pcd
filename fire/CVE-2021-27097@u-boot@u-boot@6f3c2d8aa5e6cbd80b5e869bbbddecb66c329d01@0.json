{
  "cve_id": "CVE-2021-27097",
  "cve_desc": "The boot loader in Das U-Boot before 2021.04-rc2 mishandles a modified FIT.",
  "repo": "u-boot/u-boot",
  "patch_hash": "6f3c2d8aa5e6cbd80b5e869bbbddecb66c329d01",
  "patch_info": {
    "commit_hash": "6f3c2d8aa5e6cbd80b5e869bbbddecb66c329d01",
    "repo": "u-boot/u-boot",
    "commit_url": "https://github.com/u-boot/u-boot/commit/6f3c2d8aa5e6cbd80b5e869bbbddecb66c329d01",
    "files": [
      "common/Kconfig.boot",
      "common/image-fit.c"
    ],
    "message": "image: Add an option to do a full check of the FIT\n\nSome strange modifications of the FIT can introduce security risks. Add an\noption to check it thoroughly, using libfdt's fdt_check_full() function.\n\nEnable this by default if signature verification is enabled.\n\nCVE-2021-27097\n\nSigned-off-by: Simon Glass <sjg@chromium.org>\nReported-by: Bruce Monroe <bruce.monroe@intel.com>\nReported-by: Arie Haenel <arie.haenel@intel.com>\nReported-by: Julien Lenoir <julien.lenoir@intel.com>",
    "before_after_code_files": [
      "common/Kconfig.boot||common/Kconfig.boot",
      "common/image-fit.c||common/image-fit.c"
    ]
  },
  "patch_diff": {
    "common/Kconfig.boot||common/Kconfig.boot": [
      "File: common/Kconfig.boot -> common/Kconfig.boot",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:    SHA512 checksum is a 512-bit (64-byte) hash value used to check that",
      "64:    the image contents have not been corrupted.",
      "66: config FIT_SIGNATURE",
      "67:  bool \"Enable signature verification of FIT uImages\"",
      "68:  depends on DM",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66: config FIT_FULL_CHECK",
      "67:  bool \"Do a full check of the FIT before using it\"",
      "68:  default y",
      "69:  help",
      "70:    Enable this do a full check of the FIT to make sure it is valid. This",
      "71:    helps to protect against carefully crafted FITs which take advantage",
      "72:    of bugs or omissions in the code. This includes a bad structure,",
      "73:    multiple root nodes and the like.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70:  select RSA",
      "71:  select RSA_VERIFY",
      "72:  select IMAGE_SIGN_INFO",
      "73:  help",
      "74:    This option enables signature verification of FIT uImages,",
      "75:    using a hash signed and verified using RSA. If",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:  select FIT_FULL_CHECK",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "159:  help",
      "160:    Support printing the content of the fitImage in a verbose manner in SPL.",
      "162: config SPL_FIT_SIGNATURE",
      "163:  bool \"Enable signature verification of FIT firmware within SPL\"",
      "164:  depends on SPL_DM",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172: config SPL_FIT_FULL_CHECK",
      "173:  bool \"Do a full check of the FIT before using it\"",
      "174:  help",
      "175:    Enable this do a full check of the FIT to make sure it is valid. This",
      "176:    helps to protect against carefully crafted FITs which take advantage",
      "177:    of bugs or omissions in the code. This includes a bad structure,",
      "178:    multiple root nodes and the like.",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "168:  select SPL_RSA",
      "169:  select SPL_RSA_VERIFY",
      "170:  select SPL_IMAGE_SIGN_INFO",
      "172: config SPL_LOAD_FIT",
      "173:  bool \"Enable SPL loading U-Boot as a FIT (basic fitImage features)\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "190:  select SPL_FIT_FULL_CHECK",
      "",
      "---------------"
    ],
    "common/image-fit.c||common/image-fit.c": [
      "File: common/image-fit.c -> common/image-fit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1580:   return -ENOEXEC;",
      "1581:  }",
      "1584:  if (!fdt_getprop(fit, 0, FIT_DESC_PROP, NULL)) {",
      "1585:   log_debug(\"Wrong FIT format: no description\\n\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1583:  if (CONFIG_IS_ENABLED(FIT_FULL_CHECK)) {",
      "1589:   if (size == IMAGE_SIZE_INVAL)",
      "1590:    size = fdt_totalsize(fit);",
      "1591:   ret = fdt_check_full(fit, size);",
      "1593:   if (ret) {",
      "1594:    log_debug(\"FIT check error %d\\n\", ret);",
      "1595:    return -EINVAL;",
      "1596:   }",
      "1597:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f04db891a353f4b127ed57279279f851c6b4917",
      "candidate_info": {
        "commit_hash": "3f04db891a353f4b127ed57279279f851c6b4917",
        "repo": "u-boot/u-boot",
        "commit_url": "https://github.com/u-boot/u-boot/commit/3f04db891a353f4b127ed57279279f851c6b4917",
        "files": [
          "common/image-fit.c",
          "test/py/tests/test_vboot.py"
        ],
        "message": "image: Check for unit addresses in FITs\n\nUsing unit addresses in a FIT is a security risk. Add a check for this\nand disallow it.\n\nCVE-2021-27138\n\nSigned-off-by: Simon Glass <sjg@chromium.org>\nReported-by: Bruce Monroe <bruce.monroe@intel.com>\nReported-by: Arie Haenel <arie.haenel@intel.com>\nReported-by: Julien Lenoir <julien.lenoir@intel.com>",
        "before_after_code_files": [
          "common/image-fit.c||common/image-fit.c",
          "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "common/image-fit.c||common/image-fit.c"
          ],
          "candidate": [
            "common/image-fit.c||common/image-fit.c"
          ]
        }
      },
      "candidate_diff": {
        "common/image-fit.c||common/image-fit.c": [
          "File: common/image-fit.c -> common/image-fit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1568:  return (comp == image_comp);",
          "1569: }",
          "1571: int fit_check_format(const void *fit, ulong size)",
          "1572: {",
          "1573:  int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580: static int fdt_check_no_at(const void *fit, int parent)",
          "1581: {",
          "1582:  const char *name;",
          "1583:  int node;",
          "1584:  int ret;",
          "1586:  name = fdt_get_name(fit, parent, NULL);",
          "1587:  if (!name || strchr(name, '@'))",
          "1588:   return -EADDRNOTAVAIL;",
          "1590:  fdt_for_each_subnode(node, fit, parent) {",
          "1591:   ret = fdt_check_no_at(fit, node);",
          "1592:   if (ret)",
          "1593:    return ret;",
          "1594:  }",
          "1596:  return 0;",
          "1597: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1589:   if (size == IMAGE_SIZE_INVAL)",
          "1590:    size = fdt_totalsize(fit);",
          "1591:   ret = fdt_check_full(fit, size);",
          "1593:   if (ret) {",
          "1594:    log_debug(\"FIT check error %d\\n\", ret);",
          "1596:   }",
          "1597:  }",
          "",
          "[Removed Lines]",
          "1595:    return -EINVAL;",
          "",
          "[Added Lines]",
          "1620:   if (ret)",
          "1621:    ret = -EINVAL;",
          "1630:   if (!ret && CONFIG_IS_ENABLED(FIT_SIGNATURE)) {",
          "1631:    ret = fdt_check_no_at(fit, 0);",
          "1633:    if (ret) {",
          "1634:     log_debug(\"FIT check error %d\\n\", ret);",
          "1635:     return ret;",
          "1636:    }",
          "1637:   }",
          "1640:    return ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1955:  printf(\"## Loading %s from FIT Image at %08lx ...\\n\", prop_name, addr);",
          "1957:  bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT);",
          "1960:   bootstage_error(bootstage_id + BOOTSTAGE_SUB_FORMAT);",
          "1962:  }",
          "1963:  bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT_OK);",
          "1964:  if (fit_uname) {",
          "",
          "[Removed Lines]",
          "1958:  if (fit_check_format(fit, IMAGE_SIZE_INVAL)) {",
          "1959:   printf(\"Bad FIT %s image format!\\n\", prop_name);",
          "1961:   return -ENOEXEC;",
          "",
          "[Added Lines]",
          "2003:  ret = fit_check_format(fit, IMAGE_SIZE_INVAL);",
          "2004:  if (ret) {",
          "2005:   printf(\"Bad FIT %s image format! (err=%d)\\n\", prop_name, ret);",
          "2006:   if (CONFIG_IS_ENABLED(FIT_SIGNATURE) && ret == -EADDRNOTAVAIL)",
          "2007:    printf(\"Signature checking prevents use of unit addresses (@) in nodes\\n\");",
          "2009:   return ret;",
          "",
          "---------------"
        ],
        "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py": [
          "File: test/py/tests/test_vboot.py -> test/py/tests/test_vboot.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         util.run_and_log(cons, [fit_check_sign, '-f', fit, '-k', dtb])",
          "234:         if full_test:",
          "237:             ffit = '%stest.forged.fit' % tmpdir",
          "238:             shutil.copyfile(fit, ffit)",
          "239:             with open(ffit, 'rb') as fd:",
          "",
          "[Removed Lines]",
          "235:             # Make sure that U-Boot checks that the config is in the list of hashed",
          "236:             # nodes. If it isn't, a security bypass is possible.",
          "",
          "[Added Lines]",
          "235:             # Make sure that U-Boot checks that the config is in the list of",
          "236:             # hashed nodes. If it isn't, a security bypass is possible.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:             shutil.copyfile(fit, efit)",
          "264:             vboot_evil.add_evil_node(fit, efit, evil_kernel, 'kernel@')",
          "266:             util.run_and_log_expect_exception(",
          "267:                 cons, [fit_check_sign, '-f', efit, '-k', dtb],",
          "271:         # Create a new properly signed fit and replace header bytes",
          "272:         make_fit('sign-configs-%s%s.its' % (sha_algo, padding))",
          "",
          "[Removed Lines]",
          "268:                 1, 'Node name contains @')",
          "269:             run_bootm(sha_algo, 'evil kernel@', 'Bad Data Hash', False, efit)",
          "",
          "[Added Lines]",
          "266:             msg = 'Signature checking prevents use of unit addresses (@) in nodes'",
          "269:                 1, msg)",
          "270:             run_bootm(sha_algo, 'evil kernel@', msg, False, efit)",
          "",
          "---------------"
        ]
      }
    }
  ]
}