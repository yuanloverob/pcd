{
  "cve_id": "CVE-2020-12887",
  "cve_desc": "Memory leaks were discovered in the CoAP library in Arm Mbed OS 5.15.3 when using the Arm mbed-coap library 5.1.5. The CoAP parser is responsible for parsing received CoAP packets. The function sn_coap_parser_options_parse() parses the CoAP option number field of all options present in the input packet. Each option number is calculated as a sum of the previous option number and a delta of the current option. The delta and the previous option number are expressed as unsigned 16-bit integers. Due to lack of overflow detection, it is possible to craft a packet that wraps the option number around and results in the same option number being processed again in a single packet. Certain options allocate memory by calling a memory allocation function. In the cases of COAP_OPTION_URI_QUERY, COAP_OPTION_URI_PATH, COAP_OPTION_LOCATION_QUERY, and COAP_OPTION_ETAG, there is no check on whether memory has already been allocated, which in conjunction with the option number integer overflow may lead to multiple assignments of allocated memory to a single pointer. This has been demonstrated to lead to memory leak by buffer orphaning. As a result, the memory is never freed.",
  "repo": "mjurczak/mbed-coap",
  "patch_hash": "4647a68e364401e81dbd370728127d844f221d93",
  "patch_info": {
    "commit_hash": "4647a68e364401e81dbd370728127d844f221d93",
    "repo": "mjurczak/mbed-coap",
    "commit_url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93",
    "files": [
      "source/sn_coap_parser.c"
    ],
    "message": "Implemented measures to prevent memory leaks in sn_coap_parser_options_parse().\n\nAdded a helper uint16_t addition function with overflow detection. The function is used when calculating the extended length and option delta. The overlow detection is needed to avoid wrap-around of option number or length.\nAdditional checks in options using sn_coap_parser_options_parse_multiple_options() have been implemented to avoid overwriting of pointers pointing to previously allocated memory.",
    "before_after_code_files": [
      "source/sn_coap_parser.c||source/sn_coap_parser.c"
    ]
  },
  "patch_diff": {
    "source/sn_coap_parser.c||source/sn_coap_parser.c": [
      "File: source/sn_coap_parser.c -> source/sn_coap_parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     return value;",
      "261: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272: static int8_t sn_coap_parser_add_u16_limit(uint16_t a, uint16_t b, uint16_t *result)",
      "273: {",
      "274:     uint16_t c;",
      "276:     c = a + b;",
      "277:     if (c < a || c < b)",
      "278:     {",
      "279:         return -1;",
      "280:     }",
      "284:     return 0;",
      "285: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "397:             return -1;",
      "398:         }",
      "399:         else {",
      "405:         }",
      "406:     } else if (option_number == 14) {",
      "407:             int8_t read_result = sn_coap_parser_read_packet_u16(&option_number,",
      "",
      "[Removed Lines]",
      "400:                 option_number += option_ext;",
      "402:                                                                packet_data_start_ptr,",
      "403:                                                                packet_len,",
      "404:                                                                1);",
      "",
      "[Added Lines]",
      "423:             if(sn_coap_parser_add_u16_limit(option_number, option_ext, &option_number) != 0)",
      "424:             {",
      "425:                 return -1;",
      "426:             }",
      "429:                                                             packet_data_start_ptr,",
      "430:                                                             packet_len,",
      "431:                                                             1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "414:                 return -1;",
      "415:             }",
      "416:             else {",
      "422:             }",
      "423:     }",
      "",
      "[Removed Lines]",
      "417:             option_number += 269;",
      "419:                                                            packet_data_start_ptr,",
      "420:                                                            packet_len,",
      "421:                                                            2);",
      "",
      "[Added Lines]",
      "444:                 if(sn_coap_parser_add_u16_limit(option_number, 269, &option_number) != 0)",
      "445:                 {",
      "446:                     return -1;",
      "447:                 }",
      "450:                                                             packet_data_start_ptr,",
      "451:                                                             packet_len,",
      "452:                                                             2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "499:             return -1;",
      "500:         }",
      "505:         option_parse_result = parse_ext_option(&option_len,",
      "",
      "[Removed Lines]",
      "502:         option_number += previous_option_number;",
      "",
      "[Added Lines]",
      "533:         if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)",
      "534:         {",
      "535:             return -1;",
      "536:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "577:                 break;",
      "579:             case COAP_OPTION_ETAG:",
      "581:                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,",
      "582:                              message_left,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614:                 if (dst_coap_msg_ptr->options_list_ptr->etag_ptr)",
      "615:                 {",
      "616:                     tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");",
      "617:                     return -1;",
      "618:                 }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "628:                 break;",
      "630:             case COAP_OPTION_LOCATION_QUERY:",
      "631:                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,",
      "632:                              &dst_coap_msg_ptr->options_list_ptr->location_query_ptr, &dst_coap_msg_ptr->options_list_ptr->location_query_len,",
      "633:                              COAP_OPTION_LOCATION_QUERY, option_len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "670:                 if (dst_coap_msg_ptr->options_list_ptr->location_query_ptr)",
      "671:                 {",
      "672:                     tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");",
      "673:                     return -1;",
      "674:                 }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "639:                 break;",
      "641:             case COAP_OPTION_URI_PATH:",
      "642:                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,",
      "643:                              &dst_coap_msg_ptr->uri_path_ptr, &dst_coap_msg_ptr->uri_path_len,",
      "644:                              COAP_OPTION_URI_PATH, option_len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "686:                 if (dst_coap_msg_ptr->uri_path_ptr)",
      "687:                 {",
      "688:                     tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");",
      "689:                     return -1;",
      "690:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e65e5eb79a66e004e9fdb30f224447ab6179059a",
      "candidate_info": {
        "commit_hash": "e65e5eb79a66e004e9fdb30f224447ab6179059a",
        "repo": "mjurczak/mbed-coap",
        "commit_url": "https://github.com/mjurczak/mbed-coap/commit/e65e5eb79a66e004e9fdb30f224447ab6179059a",
        "files": [
          "source/sn_coap_parser.c"
        ],
        "message": "Implemented measures to prevent memory leaks in sn_coap_parser_options_parse().\n\nAdded a helper uint16_t addition function with overflow detection. The function is used when calculating the extended length and option delta. The overlow detection is needed to avoid wrap-around of option number or length.\nAdditional checks in options using sn_coap_parser_options_parse_multiple_options() have been implemented to avoid overwriting of pointers pointing to previously allocated memory.\n\nCVE-2020-12887",
        "before_after_code_files": [
          "source/sn_coap_parser.c||source/sn_coap_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/sn_coap_parser.c||source/sn_coap_parser.c"
          ],
          "candidate": [
            "source/sn_coap_parser.c||source/sn_coap_parser.c"
          ]
        }
      },
      "candidate_diff": {
        "source/sn_coap_parser.c||source/sn_coap_parser.c": [
          "File: source/sn_coap_parser.c -> source/sn_coap_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:     return value;",
          "261: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: static int8_t sn_coap_parser_add_u16_limit(uint16_t a, uint16_t b, uint16_t *result)",
          "273: {",
          "274:     uint16_t c;",
          "276:     c = a + b;",
          "277:     if (c < a || c < b)",
          "278:     {",
          "279:         return -1;",
          "280:     }",
          "284:     return 0;",
          "285: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397:             return -1;",
          "398:         }",
          "399:         else {",
          "405:         }",
          "406:     } else if (option_number == 14) {",
          "407:             int8_t read_result = sn_coap_parser_read_packet_u16(&option_number,",
          "",
          "[Removed Lines]",
          "400:                 option_number += option_ext;",
          "402:                                                                packet_data_start_ptr,",
          "403:                                                                packet_len,",
          "404:                                                                1);",
          "",
          "[Added Lines]",
          "423:             if(sn_coap_parser_add_u16_limit(option_number, option_ext, &option_number) != 0)",
          "424:             {",
          "425:                 return -1;",
          "426:             }",
          "429:                                                             packet_data_start_ptr,",
          "430:                                                             packet_len,",
          "431:                                                             1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:                 return -1;",
          "415:             }",
          "416:             else {",
          "422:             }",
          "423:     }",
          "",
          "[Removed Lines]",
          "417:             option_number += 269;",
          "419:                                                            packet_data_start_ptr,",
          "420:                                                            packet_len,",
          "421:                                                            2);",
          "",
          "[Added Lines]",
          "444:                 if(sn_coap_parser_add_u16_limit(option_number, 269, &option_number) != 0)",
          "445:                 {",
          "446:                     return -1;",
          "447:                 }",
          "450:                                                             packet_data_start_ptr,",
          "451:                                                             packet_len,",
          "452:                                                             2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "499:             return -1;",
          "500:         }",
          "505:         option_parse_result = parse_ext_option(&option_len,",
          "",
          "[Removed Lines]",
          "502:         option_number += previous_option_number;",
          "",
          "[Added Lines]",
          "533:         if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)",
          "534:         {",
          "535:             return -1;",
          "536:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "577:                 break;",
          "579:             case COAP_OPTION_ETAG:",
          "581:                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,",
          "582:                              message_left,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:                 if (dst_coap_msg_ptr->options_list_ptr->etag_ptr)",
          "615:                 {",
          "616:                     tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");",
          "617:                     return -1;",
          "618:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "628:                 break;",
          "630:             case COAP_OPTION_LOCATION_QUERY:",
          "631:                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,",
          "632:                              &dst_coap_msg_ptr->options_list_ptr->location_query_ptr, &dst_coap_msg_ptr->options_list_ptr->location_query_len,",
          "633:                              COAP_OPTION_LOCATION_QUERY, option_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:                 if (dst_coap_msg_ptr->options_list_ptr->location_query_ptr)",
          "671:                 {",
          "672:                     tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");",
          "673:                     return -1;",
          "674:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "639:                 break;",
          "641:             case COAP_OPTION_URI_PATH:",
          "642:                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,",
          "643:                              &dst_coap_msg_ptr->uri_path_ptr, &dst_coap_msg_ptr->uri_path_len,",
          "644:                              COAP_OPTION_URI_PATH, option_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:                 if (dst_coap_msg_ptr->uri_path_ptr)",
          "687:                 {",
          "688:                     tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");",
          "689:                     return -1;",
          "690:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}