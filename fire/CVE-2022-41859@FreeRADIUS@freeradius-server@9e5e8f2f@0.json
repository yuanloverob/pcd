{
  "cve_id": "CVE-2022-41859",
  "cve_desc": "In freeradius, the EAP-PWD function compute_password_element() leaks information about the password which allows an attacker to substantially reduce the size of an offline dictionary attack.",
  "repo": "FreeRADIUS/freeradius-server",
  "patch_hash": "9e5e8f2f912ad2da8ac6e176ac3a606333469937",
  "patch_info": {
    "commit_hash": "9e5e8f2f912ad2da8ac6e176ac3a606333469937",
    "repo": "FreeRADIUS/freeradius-server",
    "commit_url": "https://github.com/FreeRADIUS/freeradius-server/commit/9e5e8f2f912ad2da8ac6e176ac3a606333469937",
    "files": [
      "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c"
    ],
    "message": "port fixes from master\n\nvia the simple expedient of copying the entire function, with\nsome minor changes to work in v3",
    "before_after_code_files": [
      "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c||src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c"
    ]
  },
  "patch_diff": {
    "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c||src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c": [
      "File: src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c -> src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248:          char const *id_peer, int id_peer_len,",
      "249:          uint32_t *token)",
      "250: {",
      "265:  case 19:",
      "",
      "[Removed Lines]",
      "251:  BIGNUM *x_candidate = NULL, *rnd = NULL, *y_sqrd = NULL, *qr = NULL, *qnr = NULL;",
      "252:  HMAC_CTX *ctx = NULL;",
      "253:  uint8_t pwe_digest[SHA256_DIGEST_LENGTH], *prfbuf = NULL, *xbuf = NULL, *pm1buf = NULL, ctr;",
      "254:  int nid, is_odd, primebitlen, primebytelen, ret = 0, found = 0, mask;",
      "255:  int save, i, rbits, qr_or_qnr, save_is_odd = 0, cmp;",
      "256:  unsigned int skip;",
      "258:  ctx = HMAC_CTX_new();",
      "259:  if (ctx == NULL) {",
      "260:   DEBUG(\"failed allocating HMAC context\");",
      "261:   goto fail;",
      "262:  }",
      "",
      "[Added Lines]",
      "251:  BIGNUM  *x_candidate = NULL, *rnd = NULL, *y_sqrd = NULL, *qr = NULL, *qnr = NULL, *y1 = NULL, *y2 = NULL, *y = NULL, *exp = NULL;",
      "252:  EVP_MD_CTX *hmac_ctx;",
      "253:  EVP_PKEY *hmac_pkey;",
      "254:  uint8_t  pwe_digest[SHA256_DIGEST_LENGTH], *prfbuf = NULL, *xbuf = NULL, *pm1buf = NULL, *y1buf = NULL, *y2buf = NULL, *ybuf = NULL, ctr;",
      "255:  int  nid, is_odd, primebitlen, primebytelen, ret = 0, found = 0, mask;",
      "256:  int  save, i, rbits, qr_or_qnr, save_is_odd = 0, cmp;",
      "257:  unsigned int skip;",
      "259:  MEM(hmac_ctx = EVP_MD_CTX_new());",
      "260:  MEM(hmac_pkey = EVP_PKEY_new_mac_key(EVP_PKEY_HMAC, NULL, allzero, sizeof(allzero)));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303:      ((qr = consttime_BN()) == NULL) ||",
      "304:      ((qnr = consttime_BN()) == NULL) ||",
      "305:      ((x_candidate = consttime_BN()) == NULL) ||",
      "307:   DEBUG(\"unable to create bignums\");",
      "308:   goto fail;",
      "309:  }",
      "",
      "[Removed Lines]",
      "306:      ((y_sqrd = consttime_BN()) == NULL)) {",
      "",
      "[Added Lines]",
      "304:      ((y_sqrd = consttime_BN()) == NULL) ||",
      "305:      ((y1 = consttime_BN()) == NULL) ||",
      "306:      ((y2 = consttime_BN()) == NULL) ||",
      "307:      ((y = consttime_BN()) == NULL) ||",
      "308:         ((exp = consttime_BN()) == NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "332:   DEBUG(\"unable to alloc space for pm1 buffer\");",
      "333:   goto fail;",
      "334:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "337:  if ((y1buf = talloc_zero_array(request, uint8_t, primebytelen)) == NULL) {",
      "338:   DEBUG(\"unable to alloc space for y1 buffer\");",
      "339:   goto fail;",
      "340:  }",
      "341:  if ((y2buf = talloc_zero_array(request, uint8_t, primebytelen)) == NULL) {",
      "342:   DEBUG(\"unable to alloc space for y2 buffer\");",
      "343:   goto fail;",
      "344:  }",
      "345:  if ((ybuf = talloc_zero_array(request, uint8_t, primebytelen)) == NULL) {",
      "346:   DEBUG(\"unable to alloc space for y buffer\");",
      "347:   goto fail;",
      "348:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "372:   BN_bin2bn(pwe_digest, SHA256_DIGEST_LENGTH, rnd);",
      "373:   eap_pwd_kdf(pwe_digest, SHA256_DIGEST_LENGTH, \"EAP-pwd Hunting And Pecking\",",
      "",
      "[Removed Lines]",
      "364:   HMAC_Init_ex(ctx, allzero, SHA256_DIGEST_LENGTH, EVP_sha256(),NULL);",
      "365:   HMAC_Update(ctx, (uint8_t *)token, sizeof(*token));",
      "366:   HMAC_Update(ctx, (uint8_t const *)id_peer, id_peer_len);",
      "367:   HMAC_Update(ctx, (uint8_t const *)id_server, id_server_len);",
      "368:   HMAC_Update(ctx, (uint8_t const *)password, password_len);",
      "369:   HMAC_Update(ctx, (uint8_t *)&ctr, sizeof(ctr));",
      "370:   pwd_hmac_final(ctx, pwe_digest);",
      "",
      "[Added Lines]",
      "379:   EVP_DigestSignInit(hmac_ctx, NULL, EVP_sha256(), NULL, hmac_pkey);",
      "380:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t *)token, sizeof(*token));",
      "381:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t const *)id_peer, id_peer_len);",
      "382:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t const *)id_server, id_server_len);",
      "383:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t const *)password, password_len);",
      "384:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t *)&ctr, sizeof(ctr));",
      "386:   {",
      "387:    size_t mdlen = SHA256_DIGEST_LENGTH;",
      "389:    EVP_DigestSignFinal(hmac_ctx, pwe_digest, &mdlen);",
      "390:    EVP_MD_CTX_reset(hmac_ctx);",
      "391:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "404:   is_odd = BN_is_odd(rnd) ? 1 : 0;",
      "",
      "[Added Lines]",
      "425:   is_odd = BN_is_odd(rnd);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "446:  BN_bin2bn(xbuf, primebytelen, x_candidate);",
      "449:   goto fail;",
      "450:  }",
      "",
      "[Removed Lines]",
      "447:  if (!EC_POINT_set_compressed_coordinates(session->group, session->pwe,",
      "448:            x_candidate, save_is_odd, NULL)) {",
      "",
      "[Added Lines]",
      "468:  do_equation(session->group, y_sqrd, x_candidate, session->bnctx);",
      "469:  if ( !BN_add(exp, session->prime, BN_value_one()) ||",
      "470:    !BN_rshift(exp, exp, 2) ||",
      "471:    !BN_mod_exp_mont_consttime(y1, y_sqrd, exp, session->prime, session->bnctx, NULL) ||",
      "472:    !BN_sub(y2, session->prime, y1) ||",
      "473:    !BN_bn2bin(y1, y1buf) ||",
      "474:    !BN_bn2bin(y2, y2buf)) {",
      "475:   DEBUG(\"unable to compute y\");",
      "476:   goto fail;",
      "477:  }",
      "478:  mask = const_time_eq(save_is_odd, BN_is_odd(y1));",
      "479:  const_time_select_bin(mask, y1buf, y2buf, primebytelen, ybuf);",
      "480:  if (BN_bin2bn(ybuf, primebytelen, y) == NULL ||",
      "481:   !EC_POINT_set_affine_coordinates(session->group, session->pwe, x_candidate, y, session->bnctx)) {",
      "482:   DEBUG(\"unable to set point coordinate\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "461:  BN_clear_free(qr);",
      "462:  BN_clear_free(qnr);",
      "463:  BN_clear_free(rnd);",
      "465:  if (prfbuf) talloc_free(prfbuf);",
      "466:  if (xbuf) talloc_free(xbuf);",
      "467:  if (pm1buf) talloc_free(pm1buf);",
      "471:  return ret;",
      "472: }",
      "",
      "[Removed Lines]",
      "469:  HMAC_CTX_free(ctx);",
      "",
      "[Added Lines]",
      "498:  BN_clear_free(y1);",
      "499:  BN_clear_free(y2);",
      "500:  BN_clear_free(y);",
      "501:  BN_clear_free(exp);",
      "506:  if (y1buf) talloc_free(y1buf);",
      "507:  if (y2buf) talloc_free(y2buf);",
      "508:  if (ybuf) talloc_free(ybuf);",
      "510:  EVP_MD_CTX_free(hmac_ctx);",
      "511:  EVP_PKEY_free(hmac_pkey);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f6eddf592cf15142321fa77f774d162362b67de1",
      "candidate_info": {
        "commit_hash": "f6eddf592cf15142321fa77f774d162362b67de1",
        "repo": "FreeRADIUS/freeradius-server",
        "commit_url": "https://github.com/FreeRADIUS/freeradius-server/commit/f6eddf592cf15142321fa77f774d162362b67de1",
        "files": [
          "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c"
        ],
        "message": "port fixes from master\n\nvia the simple expedient of copying the entire function, with\nsome minor changes to work in v3",
        "before_after_code_files": [
          "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c||src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c||src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c"
          ],
          "candidate": [
            "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c||src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c||src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c": [
          "File: src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c -> src/modules/rlm_eap/types/rlm_eap_pwd/eap_pwd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:          char const *id_peer, int id_peer_len,",
          "249:          uint32_t *token)",
          "250: {",
          "265:  case 19:",
          "",
          "[Removed Lines]",
          "251:  BIGNUM *x_candidate = NULL, *rnd = NULL, *y_sqrd = NULL, *qr = NULL, *qnr = NULL;",
          "252:  HMAC_CTX *ctx = NULL;",
          "253:  uint8_t pwe_digest[SHA256_DIGEST_LENGTH], *prfbuf = NULL, *xbuf = NULL, *pm1buf = NULL, ctr;",
          "254:  int nid, is_odd, primebitlen, primebytelen, ret = 0, found = 0, mask;",
          "255:  int save, i, rbits, qr_or_qnr, save_is_odd = 0, cmp;",
          "256:  unsigned int skip;",
          "258:  ctx = HMAC_CTX_new();",
          "259:  if (ctx == NULL) {",
          "260:   DEBUG(\"failed allocating HMAC context\");",
          "261:   goto fail;",
          "262:  }",
          "",
          "[Added Lines]",
          "251:  BIGNUM  *x_candidate = NULL, *rnd = NULL, *y_sqrd = NULL, *qr = NULL, *qnr = NULL, *y1 = NULL, *y2 = NULL, *y = NULL, *exp = NULL;",
          "252:  EVP_MD_CTX *hmac_ctx;",
          "253:  EVP_PKEY *hmac_pkey;",
          "254:  uint8_t  pwe_digest[SHA256_DIGEST_LENGTH], *prfbuf = NULL, *xbuf = NULL, *pm1buf = NULL, *y1buf = NULL, *y2buf = NULL, *ybuf = NULL, ctr;",
          "255:  int  nid, is_odd, primebitlen, primebytelen, ret = 0, found = 0, mask;",
          "256:  int  save, i, rbits, qr_or_qnr, save_is_odd = 0, cmp;",
          "257:  unsigned int skip;",
          "259:  MEM(hmac_ctx = EVP_MD_CTX_new());",
          "260:  MEM(hmac_pkey = EVP_PKEY_new_mac_key(EVP_PKEY_HMAC, NULL, allzero, sizeof(allzero)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:      ((qr = consttime_BN()) == NULL) ||",
          "304:      ((qnr = consttime_BN()) == NULL) ||",
          "305:      ((x_candidate = consttime_BN()) == NULL) ||",
          "307:   DEBUG(\"unable to create bignums\");",
          "308:   goto fail;",
          "309:  }",
          "",
          "[Removed Lines]",
          "306:      ((y_sqrd = consttime_BN()) == NULL)) {",
          "",
          "[Added Lines]",
          "304:      ((y_sqrd = consttime_BN()) == NULL) ||",
          "305:      ((y1 = consttime_BN()) == NULL) ||",
          "306:      ((y2 = consttime_BN()) == NULL) ||",
          "307:      ((y = consttime_BN()) == NULL) ||",
          "308:         ((exp = consttime_BN()) == NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:   DEBUG(\"unable to alloc space for pm1 buffer\");",
          "333:   goto fail;",
          "334:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:  if ((y1buf = talloc_zero_array(request, uint8_t, primebytelen)) == NULL) {",
          "338:   DEBUG(\"unable to alloc space for y1 buffer\");",
          "339:   goto fail;",
          "340:  }",
          "341:  if ((y2buf = talloc_zero_array(request, uint8_t, primebytelen)) == NULL) {",
          "342:   DEBUG(\"unable to alloc space for y2 buffer\");",
          "343:   goto fail;",
          "344:  }",
          "345:  if ((ybuf = talloc_zero_array(request, uint8_t, primebytelen)) == NULL) {",
          "346:   DEBUG(\"unable to alloc space for y buffer\");",
          "347:   goto fail;",
          "348:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:   BN_bin2bn(pwe_digest, SHA256_DIGEST_LENGTH, rnd);",
          "373:   eap_pwd_kdf(pwe_digest, SHA256_DIGEST_LENGTH, \"EAP-pwd Hunting And Pecking\",",
          "",
          "[Removed Lines]",
          "364:   HMAC_Init_ex(ctx, allzero, SHA256_DIGEST_LENGTH, EVP_sha256(),NULL);",
          "365:   HMAC_Update(ctx, (uint8_t *)token, sizeof(*token));",
          "366:   HMAC_Update(ctx, (uint8_t const *)id_peer, id_peer_len);",
          "367:   HMAC_Update(ctx, (uint8_t const *)id_server, id_server_len);",
          "368:   HMAC_Update(ctx, (uint8_t const *)password, password_len);",
          "369:   HMAC_Update(ctx, (uint8_t *)&ctr, sizeof(ctr));",
          "370:   pwd_hmac_final(ctx, pwe_digest);",
          "",
          "[Added Lines]",
          "379:   EVP_DigestSignInit(hmac_ctx, NULL, EVP_sha256(), NULL, hmac_pkey);",
          "380:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t *)token, sizeof(*token));",
          "381:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t const *)id_peer, id_peer_len);",
          "382:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t const *)id_server, id_server_len);",
          "383:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t const *)password, password_len);",
          "384:   EVP_DigestSignUpdate(hmac_ctx, (uint8_t *)&ctr, sizeof(ctr));",
          "386:   {",
          "387:    size_t mdlen = SHA256_DIGEST_LENGTH;",
          "389:    EVP_DigestSignFinal(hmac_ctx, pwe_digest, &mdlen);",
          "390:    EVP_MD_CTX_reset(hmac_ctx);",
          "391:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "404:   is_odd = BN_is_odd(rnd) ? 1 : 0;",
          "",
          "[Added Lines]",
          "425:   is_odd = BN_is_odd(rnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "446:  BN_bin2bn(xbuf, primebytelen, x_candidate);",
          "449:   goto fail;",
          "450:  }",
          "",
          "[Removed Lines]",
          "447:  if (!EC_POINT_set_compressed_coordinates(session->group, session->pwe,",
          "448:            x_candidate, save_is_odd, NULL)) {",
          "",
          "[Added Lines]",
          "468:  do_equation(session->group, y_sqrd, x_candidate, session->bnctx);",
          "469:  if ( !BN_add(exp, session->prime, BN_value_one()) ||",
          "470:    !BN_rshift(exp, exp, 2) ||",
          "471:    !BN_mod_exp_mont_consttime(y1, y_sqrd, exp, session->prime, session->bnctx, NULL) ||",
          "472:    !BN_sub(y2, session->prime, y1) ||",
          "473:    !BN_bn2bin(y1, y1buf) ||",
          "474:    !BN_bn2bin(y2, y2buf)) {",
          "475:   DEBUG(\"unable to compute y\");",
          "476:   goto fail;",
          "477:  }",
          "478:  mask = const_time_eq(save_is_odd, BN_is_odd(y1));",
          "479:  const_time_select_bin(mask, y1buf, y2buf, primebytelen, ybuf);",
          "480:  if (BN_bin2bn(ybuf, primebytelen, y) == NULL ||",
          "481:   !EC_POINT_set_affine_coordinates(session->group, session->pwe, x_candidate, y, session->bnctx)) {",
          "482:   DEBUG(\"unable to set point coordinate\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "461:  BN_clear_free(qr);",
          "462:  BN_clear_free(qnr);",
          "463:  BN_clear_free(rnd);",
          "465:  if (prfbuf) talloc_free(prfbuf);",
          "466:  if (xbuf) talloc_free(xbuf);",
          "467:  if (pm1buf) talloc_free(pm1buf);",
          "471:  return ret;",
          "472: }",
          "",
          "[Removed Lines]",
          "469:  HMAC_CTX_free(ctx);",
          "",
          "[Added Lines]",
          "498:  BN_clear_free(y1);",
          "499:  BN_clear_free(y2);",
          "500:  BN_clear_free(y);",
          "501:  BN_clear_free(exp);",
          "506:  if (y1buf) talloc_free(y1buf);",
          "507:  if (y2buf) talloc_free(y2buf);",
          "508:  if (ybuf) talloc_free(ybuf);",
          "510:  EVP_MD_CTX_free(hmac_ctx);",
          "511:  EVP_PKEY_free(hmac_pkey);",
          "",
          "---------------"
        ]
      }
    }
  ]
}