{
  "cve_id": "CVE-2022-3821",
  "cve_desc": "An off-by-one Error issue was discovered in Systemd in format_timespan() function of time-util.c. An attacker could supply specific values for time and accuracy that leads to buffer overrun in format_timespan(), leading to a Denial of Service.",
  "repo": "systemd/systemd",
  "patch_hash": "9102c625a673a3246d7e73d8737f3494446bad4e",
  "patch_info": {
    "commit_hash": "9102c625a673a3246d7e73d8737f3494446bad4e",
    "repo": "systemd/systemd",
    "commit_url": "https://github.com/systemd/systemd/commit/9102c625a673a3246d7e73d8737f3494446bad4e",
    "files": [
      "src/basic/time-util.c",
      "src/test/test-time-util.c"
    ],
    "message": "time-util: fix buffer-over-run\n\nFixes #23928.",
    "before_after_code_files": [
      "src/basic/time-util.c||src/basic/time-util.c",
      "src/test/test-time-util.c||src/test/test-time-util.c"
    ]
  },
  "patch_diff": {
    "src/basic/time-util.c||src/basic/time-util.c": [
      "File: src/basic/time-util.c -> src/basic/time-util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "591:                         t = b;",
      "592:                 }",
      "596:                 l -= n;",
      "597:                 p += n;",
      "",
      "[Removed Lines]",
      "594:                 n = MIN((size_t) k, l);",
      "",
      "[Added Lines]",
      "594:                 n = MIN((size_t) k, l-1);",
      "",
      "---------------"
    ],
    "src/test/test-time-util.c||src/test/test-time-util.c": [
      "File: src/test/test-time-util.c -> src/test/test-time-util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "238:         test_format_timespan_accuracy(1);",
      "239:         test_format_timespan_accuracy(USEC_PER_MSEC);",
      "240:         test_format_timespan_accuracy(USEC_PER_SEC);",
      "241: }",
      "243: TEST(verify_timezone) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "243:         _cleanup_free_ char *buf;",
      "244:         assert_se(buf = new(char, 5));",
      "245:         assert_se(buf == format_timespan(buf, 5, 100005, 1000));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d41b6b8e864abbf7b81c938532f42e97a900e22",
      "candidate_info": {
        "commit_hash": "3d41b6b8e864abbf7b81c938532f42e97a900e22",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/3d41b6b8e864abbf7b81c938532f42e97a900e22",
        "files": [
          "src/home/homework-luks.c",
          "src/journal/test-journal-interleaving.c",
          "src/libsystemd-network/test-dhcp-client.c",
          "src/libsystemd/sd-device/test-sd-device.c",
          "src/libsystemd/sd-event/test-event.c",
          "src/libsystemd/sd-journal/test-catalog.c",
          "src/libudev/test-libudev.c",
          "src/resolve/test-resolved-etc-hosts.c",
          "src/test/test-bpf-devices.c",
          "src/test/test-compress-benchmark.c",
          "src/test/test-copy.c",
          "src/test/test-date.c",
          "src/test/test-ellipsize.c",
          "src/test/test-escape.c",
          "src/test/test-execve.c",
          "src/test/test-fileio.c",
          "src/test/test-json.c",
          "src/test/test-nss-hosts.c",
          "src/test/test-sleep.c",
          "src/test/test-strbuf.c",
          "src/test/test-string-util.c",
          "src/test/test-strv.c",
          "src/test/test-time-util.c",
          "src/test/test-unit-name.c",
          "src/test/test-utf8.c",
          "src/xdg-autostart-generator/test-xdg-autostart.c"
        ],
        "message": "tree-wide: Fix false positives on newer gcc\n\nRecent gcc versions have started to trigger false positive\nmaybe-uninitialized warnings. Let's make sure we initialize\nvariables annotated with _cleanup_ to avoid these.",
        "before_after_code_files": [
          "src/home/homework-luks.c||src/home/homework-luks.c",
          "src/journal/test-journal-interleaving.c||src/journal/test-journal-interleaving.c",
          "src/libsystemd-network/test-dhcp-client.c||src/libsystemd-network/test-dhcp-client.c",
          "src/libsystemd/sd-device/test-sd-device.c||src/libsystemd/sd-device/test-sd-device.c",
          "src/libsystemd/sd-event/test-event.c||src/libsystemd/sd-event/test-event.c",
          "src/libsystemd/sd-journal/test-catalog.c||src/libsystemd/sd-journal/test-catalog.c",
          "src/libudev/test-libudev.c||src/libudev/test-libudev.c",
          "src/resolve/test-resolved-etc-hosts.c||src/resolve/test-resolved-etc-hosts.c",
          "src/test/test-bpf-devices.c||src/test/test-bpf-devices.c",
          "src/test/test-compress-benchmark.c||src/test/test-compress-benchmark.c",
          "src/test/test-copy.c||src/test/test-copy.c",
          "src/test/test-date.c||src/test/test-date.c",
          "src/test/test-ellipsize.c||src/test/test-ellipsize.c",
          "src/test/test-escape.c||src/test/test-escape.c",
          "src/test/test-execve.c||src/test/test-execve.c",
          "src/test/test-fileio.c||src/test/test-fileio.c",
          "src/test/test-json.c||src/test/test-json.c",
          "src/test/test-nss-hosts.c||src/test/test-nss-hosts.c",
          "src/test/test-sleep.c||src/test/test-sleep.c",
          "src/test/test-strbuf.c||src/test/test-strbuf.c",
          "src/test/test-string-util.c||src/test/test-string-util.c",
          "src/test/test-strv.c||src/test/test-strv.c",
          "src/test/test-time-util.c||src/test/test-time-util.c",
          "src/test/test-unit-name.c||src/test/test-unit-name.c",
          "src/test/test-utf8.c||src/test/test-utf8.c",
          "src/xdg-autostart-generator/test-xdg-autostart.c||src/xdg-autostart-generator/test-xdg-autostart.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/test/test-time-util.c||src/test/test-time-util.c"
          ],
          "candidate": [
            "src/test/test-time-util.c||src/test/test-time-util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/home/homework-luks.c||src/home/homework-luks.c": [
          "File: src/home/homework-luks.c -> src/home/homework-luks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1230:                 PasswordCache *cache,",
          "1231:                 UserRecord **ret_luks_home) {",
          "1234:         _cleanup_(user_record_unrefp) UserRecord *luks_home = NULL;",
          "1235:         _cleanup_(erase_and_freep) void *volume_key = NULL;",
          "1236:         size_t volume_key_size = 0;",
          "",
          "[Removed Lines]",
          "1233:         sd_id128_t found_partition_uuid, found_fs_uuid, found_luks_uuid = SD_ID128_NULL;",
          "",
          "[Added Lines]",
          "1233:         sd_id128_t found_partition_uuid, found_fs_uuid = SD_ID128_NULL, found_luks_uuid = SD_ID128_NULL;",
          "",
          "---------------"
        ],
        "src/journal/test-journal-interleaving.c||src/journal/test-journal-interleaving.c": [
          "File: src/journal/test-journal-interleaving.c -> src/journal/test-journal-interleaving.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: static void test_check_number(sd_journal *j, int n) {",
          "74:         const void *d;",
          "76:         size_t l;",
          "77:         int x;",
          "",
          "[Removed Lines]",
          "75:         _cleanup_free_ char *k;",
          "",
          "[Added Lines]",
          "75:         _cleanup_free_ char *k = NULL;",
          "",
          "---------------"
        ],
        "src/libsystemd-network/test-dhcp-client.c||src/libsystemd-network/test-dhcp-client.c": [
          "File: src/libsystemd-network/test-dhcp-client.c -> src/libsystemd-network/test-dhcp-client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: int dhcp_network_send_raw_socket(int s, const union sockaddr_union *link, const void *packet, size_t len) {",
          "191:         size_t size;",
          "193:         uint16_t ip_check, udp_check;",
          "195:         assert_se(s >= 0);",
          "",
          "[Removed Lines]",
          "192:         _cleanup_free_ DHCPPacket *discover;",
          "",
          "[Added Lines]",
          "192:         _cleanup_free_ DHCPPacket *discover = NULL;",
          "",
          "---------------"
        ],
        "src/libsystemd/sd-device/test-sd-device.c||src/libsystemd/sd-device/test-sd-device.c": [
          "File: src/libsystemd/sd-device/test-sd-device.c -> src/libsystemd/sd-device/test-sd-device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: static bool test_sd_device_enumerator_filter_subsystem_trial(void) {",
          "268:         _cleanup_(sd_device_enumerator_unrefp) sd_device_enumerator *e = NULL;",
          "270:         unsigned n_new_dev = 0, n_removed_dev = 0;",
          "271:         sd_device *d;",
          "272:         Hashmap *h;",
          "",
          "[Removed Lines]",
          "269:         _cleanup_(hashmap_freep) Hashmap *subsystems;",
          "",
          "[Added Lines]",
          "269:         _cleanup_(hashmap_freep) Hashmap *subsystems = NULL;",
          "",
          "---------------"
        ],
        "src/libsystemd/sd-event/test-event.c||src/libsystemd/sd-event/test-event.c": [
          "File: src/libsystemd/sd-event/test-event.c -> src/libsystemd/sd-event/test-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:         for (i = 0; i < n_create_events; i++) {",
          "508:                 char buf[DECIMAL_STR_MAX(unsigned)+1];",
          "511:                 xsprintf(buf, \"%u\", i);",
          "512:                 assert_se(z = path_join(p, buf));",
          "",
          "[Removed Lines]",
          "509:                 _cleanup_free_ char *z;",
          "",
          "[Added Lines]",
          "509:                 _cleanup_free_ char *z = NULL;",
          "",
          "---------------"
        ],
        "src/libsystemd/sd-journal/test-catalog.c||src/libsystemd/sd-journal/test-catalog.c": [
          "File: src/libsystemd/sd-journal/test-catalog.c -> src/libsystemd/sd-journal/test-catalog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static OrderedHashmap* test_import(const char* contents, ssize_t size, int code) {",
          "29:         _cleanup_(unlink_tempfilep) char name[] = \"/tmp/test-catalog.XXXXXX\";",
          "31:         OrderedHashmap *h;",
          "33:         if (size < 0)",
          "",
          "[Removed Lines]",
          "30:         _cleanup_close_ int fd;",
          "",
          "[Added Lines]",
          "30:         _cleanup_close_ int fd = -EBADF;",
          "",
          "---------------"
        ],
        "src/libudev/test-libudev.c||src/libudev/test-libudev.c": [
          "File: src/libudev/test-libudev.c -> src/libudev/test-libudev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: }",
          "93: static void test_device(struct udev *udev, const char *syspath) {",
          "96:         log_info(\"/* %s, device %s */\", __func__, syspath);",
          "97:         device = udev_device_new_from_syspath(udev, syspath);",
          "",
          "[Removed Lines]",
          "94:         _cleanup_(udev_device_unrefp) struct udev_device *device;",
          "",
          "[Added Lines]",
          "94:         _cleanup_(udev_device_unrefp) struct udev_device *device = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: }",
          "104: static void test_device_parents(struct udev *udev, const char *syspath) {",
          "106:         struct udev_device *device_parent;",
          "108:         log_info(\"/* %s, device %s */\", __func__, syspath);",
          "",
          "[Removed Lines]",
          "105:         _cleanup_(udev_device_unrefp) struct udev_device *device;",
          "",
          "[Added Lines]",
          "105:         _cleanup_(udev_device_unrefp) struct udev_device *device = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173: static void test_monitor(struct udev *udev) {",
          "174:         _cleanup_(udev_monitor_unrefp) struct udev_monitor *udev_monitor;",
          "176:         int fd_udev;",
          "177:         struct epoll_event ep_udev = {",
          "178:                 .events = EPOLLIN,",
          "",
          "[Removed Lines]",
          "175:         _cleanup_close_ int fd_ep;",
          "",
          "[Added Lines]",
          "175:         _cleanup_close_ int fd_ep = -EBADF;",
          "",
          "---------------"
        ],
        "src/resolve/test-resolved-etc-hosts.c||src/resolve/test-resolved-etc-hosts.c": [
          "File: src/resolve/test-resolved-etc-hosts.c -> src/resolve/test-resolved-etc-hosts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:                 t[] = \"/tmp/test-resolved-etc-hosts.XXXXXX\";",
          "40:         int fd;",
          "43:         fd = mkostemp_safe(t);",
          "44:         assert_se(fd >= 0);",
          "",
          "[Removed Lines]",
          "41:         _cleanup_fclose_ FILE *f;",
          "",
          "[Added Lines]",
          "41:         _cleanup_fclose_ FILE *f = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119: static void test_parse_file_one(const char *fname) {",
          "120:         _cleanup_(etc_hosts_clear) EtcHosts hosts = {};",
          "123:         log_info(\"/* %s(\\\"%s\\\") */\", __func__, fname);",
          "",
          "[Removed Lines]",
          "121:         _cleanup_fclose_ FILE *f;",
          "",
          "[Added Lines]",
          "121:         _cleanup_fclose_ FILE *f = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-bpf-devices.c||src/test/test-bpf-devices.c": [
          "File: src/test/test-bpf-devices.c -> src/test/test-bpf-devices.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:                           \"/dev/urandom\",",
          "38:                           \"/dev/tty\",",
          "39:                           \"/dev/ptmx\") {",
          "42:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "43:                 log_debug(\"open(%s, \\\"r\\\") = %d/%s\", s, fd, fd < 0 ? errno_to_name(errno) : \"-\");",
          "",
          "[Removed Lines]",
          "40:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "40:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         assert_se(r >= 0);",
          "76:         {",
          "78:                 const char *s = \"/dev/null\";",
          "80:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "77:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "77:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         }",
          "89:         {",
          "91:                 const char *s = \"/dev/random\";",
          "93:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "90:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "90:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         }",
          "102:         {",
          "104:                 const char *s = \"/dev/zero\";",
          "106:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "103:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "103:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:         }",
          "115:         {",
          "117:                 const char *s = \"/dev/full\";",
          "119:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "116:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "116:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:         {",
          "150:                 const char *s = \"/dev/null\";",
          "152:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "149:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "149:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "159:         }",
          "161:         {",
          "163:                 const char *s = \"/dev/full\";",
          "165:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "162:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "162:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "172:         }",
          "174:         {",
          "176:                 const char *s = \"/dev/tty\";",
          "178:                 fd = open(s, O_CLOEXEC|O_RDONLY|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "175:                 _cleanup_close_ int fd, fd2;",
          "",
          "[Added Lines]",
          "175:                 _cleanup_close_ int fd = -EBADF, fd2 = -EBADF;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "204:         assert_se(r >= 0);",
          "206:         {",
          "208:                 const char *s = \"/dev/null\";",
          "210:                 fd = open(s, O_CLOEXEC|O_RDWR|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "207:                 _cleanup_close_ int fd;",
          "",
          "[Added Lines]",
          "207:                 _cleanup_close_ int fd = -EBADF;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "237:         assert_se(r >= 0);",
          "239:         {",
          "241:                 const char *s = \"/dev/null\";",
          "243:                 fd = open(s, O_CLOEXEC|O_RDWR|O_NOCTTY);",
          "",
          "[Removed Lines]",
          "240:                 _cleanup_close_ int fd;",
          "",
          "[Added Lines]",
          "240:                 _cleanup_close_ int fd = -EBADF;",
          "",
          "---------------"
        ],
        "src/test/test-compress-benchmark.c||src/test/test-compress-benchmark.c": [
          "File: src/test/test-compress-benchmark.c -> src/test/test-compress-benchmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         usec_t n, n2 = 0;",
          "79:         float dt;",
          "82:         _cleanup_free_ void *buf2 = NULL;",
          "83:         size_t skipped = 0, compressed = 0, total = 0;",
          "",
          "[Removed Lines]",
          "81:         _cleanup_free_ char *text, *buf;",
          "",
          "[Added Lines]",
          "81:         _cleanup_free_ char *text = NULL, *buf = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-copy.c||src/test/test-copy.c": [
          "File: src/test/test-copy.c -> src/test/test-copy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:         (void) rm_rf(original_dir, REMOVE_ROOT|REMOVE_PHYSICAL);",
          "146:         STRV_FOREACH(p, files) {",
          "148:                 int k;",
          "150:                 assert_se(f = path_join(original_dir, *p));",
          "",
          "[Removed Lines]",
          "147:                 _cleanup_free_ char *f, *c;",
          "",
          "[Added Lines]",
          "147:                 _cleanup_free_ char *f = NULL, *c = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:         }",
          "161:         STRV_FOREACH_PAIR(ll, p, symlinks) {",
          "164:                 assert_se(f = path_join(original_dir, *p));",
          "165:                 assert_se(l = path_join(original_dir, *ll));",
          "",
          "[Removed Lines]",
          "162:                 _cleanup_free_ char *f, *l;",
          "",
          "[Added Lines]",
          "162:                 _cleanup_free_ char *f = NULL, *l = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:         }",
          "171:         STRV_FOREACH_PAIR(ll, p, hardlinks) {",
          "174:                 assert_se(f = path_join(original_dir, *p));",
          "175:                 assert_se(l = path_join(original_dir, *ll));",
          "",
          "[Removed Lines]",
          "172:                 _cleanup_free_ char *f, *l;",
          "",
          "[Added Lines]",
          "172:                 _cleanup_free_ char *f = NULL, *l = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:         assert_se(copy_tree(original_dir, copy_dir, UID_INVALID, GID_INVALID, COPY_REFLINK|COPY_MERGE|COPY_HARDLINKS, denylist) == 0);",
          "193:         STRV_FOREACH(p, files) {",
          "195:                 size_t sz;",
          "196:                 int k;",
          "",
          "[Removed Lines]",
          "194:                 _cleanup_free_ char *buf, *f, *c = NULL;",
          "",
          "[Added Lines]",
          "194:                 _cleanup_free_ char *buf = NULL, *f = NULL, *c = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:         }",
          "215:         STRV_FOREACH_PAIR(ll, p, symlinks) {",
          "218:                 assert_se(f = strjoin(original_dir, *p));",
          "219:                 assert_se(l = strjoin(copy_dir, *ll));",
          "",
          "[Removed Lines]",
          "216:                 _cleanup_free_ char *target, *f, *l;",
          "",
          "[Added Lines]",
          "216:                 _cleanup_free_ char *target = NULL, *f = NULL, *l = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223:         }",
          "225:         STRV_FOREACH_PAIR(ll, p, hardlinks) {",
          "227:                 struct stat a, b;",
          "229:                 assert_se(f = strjoin(copy_dir, *p));",
          "",
          "[Removed Lines]",
          "226:                 _cleanup_free_ char *f, *l;",
          "",
          "[Added Lines]",
          "226:                 _cleanup_free_ char *f = NULL, *l = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-date.c||src/test/test-date.c": [
          "File: src/test/test-date.c -> src/test/test-date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: }",
          "48: static void test_one(const char *p) {",
          "51:         with_utc = strjoin(p, \" UTC\");",
          "52:         test_should_pass(p);",
          "",
          "[Removed Lines]",
          "49:         _cleanup_free_ char *with_utc;",
          "",
          "[Added Lines]",
          "49:         _cleanup_free_ char *with_utc = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: }",
          "56: static void test_one_noutc(const char *p) {",
          "59:         with_utc = strjoin(p, \" UTC\");",
          "60:         test_should_pass(p);",
          "",
          "[Removed Lines]",
          "57:         _cleanup_free_ char *with_utc;",
          "",
          "[Added Lines]",
          "57:         _cleanup_free_ char *with_utc = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-ellipsize.c||src/test/test-ellipsize.c": [
          "File: src/test/test-ellipsize.c -> src/test/test-ellipsize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: }",
          "77: static void test_ellipsize_one(const char *p) {",
          "79:         t = ellipsize(p, columns(), 70);",
          "80:         puts(t);",
          "81:         free(t);",
          "",
          "[Removed Lines]",
          "78:         _cleanup_free_ char *t;",
          "",
          "[Added Lines]",
          "78:         _cleanup_free_ char *t = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-escape.c||src/test/test-escape.c": [
          "File: src/test/test-escape.c -> src/test/test-escape.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"tests.h\"",
          "8: TEST(cescape) {",
          "11:         assert_se(t = cescape(\"abc\\\\\\\"\\b\\f\\n\\r\\t\\v\\a\\003\\177\\234\\313\"));",
          "12:         assert_se(streq(t, \"abc\\\\\\\\\\\\\\\"\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\a\\\\003\\\\177\\\\234\\\\313\"));",
          "13: }",
          "15: TEST(xescape) {",
          "18:         assert_se(t = xescape(\"abc\\\\\\\"\\b\\f\\n\\r\\t\\v\\a\\003\\177\\234\\313\", \"\"));",
          "19:         assert_se(streq(t, \"abc\\\\x5c\\\"\\\\x08\\\\x0c\\\\x0a\\\\x0d\\\\x09\\\\x0b\\\\x07\\\\x03\\\\x7f\\\\x9c\\\\xcb\"));",
          "",
          "[Removed Lines]",
          "9:         _cleanup_free_ char *t;",
          "16:         _cleanup_free_ char *t;",
          "",
          "[Added Lines]",
          "9:         _cleanup_free_ char *t = NULL;",
          "16:         _cleanup_free_ char *t = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         log_info(\"/* %s */\", __func__);",
          "31:         for (unsigned i = 0; i < 60; i++) {",
          "34:                 assert_se(t = xescape_full(\"abc\\\\\\\"\\b\\f\\n\\r\\t\\v\\a\\003\\177\\234\\313\", \"b\", i, flags));",
          "",
          "[Removed Lines]",
          "32:                 _cleanup_free_ char *t, *q;",
          "",
          "[Added Lines]",
          "32:                 _cleanup_free_ char *t = NULL, *q = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: }",
          "67: TEST(cunescape) {",
          "70:         assert_se(cunescape(\"abc\\\\\\\\\\\\\\\"\\\\b\\\\f\\\\a\\\\n\\\\r\\\\t\\\\v\\\\003\\\\177\\\\234\\\\313\\\\000\\\\x00\", 0, &unescaped) < 0);",
          "71:         assert_se(cunescape(\"abc\\\\\\\\\\\\\\\"\\\\b\\\\f\\\\a\\\\n\\\\r\\\\t\\\\v\\\\003\\\\177\\\\234\\\\313\\\\000\\\\x00\", UNESCAPE_RELAX, &unescaped) >= 0);",
          "",
          "[Removed Lines]",
          "68:         _cleanup_free_ char *unescaped;",
          "",
          "[Added Lines]",
          "68:         _cleanup_free_ char *unescaped = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132: }",
          "134: static void test_shell_escape_one(const char *s, const char *bad, const char *expected) {",
          "137:         assert_se(r = shell_escape(s, bad));",
          "138:         log_debug(\"%s \u2192 %s (expected %s)\", s, r, expected);",
          "",
          "[Removed Lines]",
          "135:         _cleanup_free_ char *r;",
          "",
          "[Added Lines]",
          "135:         _cleanup_free_ char *r = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203: }",
          "205: static void test_quote_command_line_one(char **argv, const char *expected) {",
          "208:         assert_se(s = quote_command_line(argv, SHELL_ESCAPE_EMPTY));",
          "209:         log_info(\"%s\", s);",
          "",
          "[Removed Lines]",
          "206:         _cleanup_free_ char *s;",
          "",
          "[Added Lines]",
          "206:         _cleanup_free_ char *s = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "224: }",
          "226: static void test_octescape_one(const char *s, const char *expected) {",
          "229:         assert_se(ret = octescape(s, strlen_ptr(s)));",
          "230:         log_debug(\"octescape(\\\"%s\\\") \u2192 \\\"%s\\\" (expected: \\\"%s\\\")\", strnull(s), ret, expected);",
          "",
          "[Removed Lines]",
          "227:         _cleanup_free_ char *ret;",
          "",
          "[Added Lines]",
          "227:         _cleanup_free_ char *ret = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-execve.c||src/test/test-execve.c": [
          "File: src/test/test-execve.c -> src/test/test-execve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static int run(int argc, char **argv) {",
          "24:         char **args = strv_skip(argv, 1);",
          "25:         int r;",
          "",
          "[Removed Lines]",
          "23:         _cleanup_close_ int fd;",
          "",
          "[Added Lines]",
          "23:         _cleanup_close_ int fd = -EBADF;",
          "",
          "---------------"
        ],
        "src/test/test-fileio.c||src/test/test-fileio.c": [
          "File: src/test/test-fileio.c -> src/test/test-fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: TEST(write_string_file) {",
          "461:         _cleanup_(unlink_tempfilep) char fn[] = \"/tmp/test-write_string_file-XXXXXX\";",
          "462:         char buf[64] = {};",
          "465:         fd = mkostemp_safe(fn);",
          "466:         assert_se(fd >= 0);",
          "",
          "[Removed Lines]",
          "463:         _cleanup_close_ int fd;",
          "",
          "[Added Lines]",
          "463:         _cleanup_close_ int fd = -EBADF;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474: TEST(write_string_file_no_create) {",
          "475:         _cleanup_(unlink_tempfilep) char fn[] = \"/tmp/test-write_string_file_no_create-XXXXXX\";",
          "477:         char buf[64] = {};",
          "479:         fd = mkostemp_safe(fn);",
          "",
          "[Removed Lines]",
          "476:         _cleanup_close_ int fd;",
          "",
          "[Added Lines]",
          "476:         _cleanup_close_ int fd = -EBADF;",
          "",
          "---------------"
        ],
        "src/test/test-json.c||src/test/test-json.c": [
          "File: src/test/test-json.c -> src/test/test-json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         void *state = NULL;",
          "19:         va_list ap;",
          "22:         assert_se(cdata = cescape(data));",
          "23:         log_info(\"/* %s data=\\\"%s\\\" */\", __func__, cdata);",
          "",
          "[Removed Lines]",
          "21:         _cleanup_free_ char *cdata;",
          "",
          "[Added Lines]",
          "21:         _cleanup_free_ char *cdata = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-nss-hosts.c||src/test/test-nss-hosts.c": [
          "File: src/test/test-nss-hosts.c -> src/test/test-nss-hosts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:                         }",
          "450:                 }",
          "451:         } else {",
          "453:                 assert_se(hostname = gethostname_malloc());",
          "454:                 assert_se(names = strv_new(\"localhost\", \"_gateway\", \"_outbound\", \"foo_no_such_host\", hostname));",
          "",
          "[Removed Lines]",
          "452:                 _cleanup_free_ char *hostname;",
          "",
          "[Added Lines]",
          "452:                 _cleanup_free_ char *hostname = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-sleep.c||src/test/test-sleep.c": [
          "File: src/test/test-sleep.c -> src/test/test-sleep.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         assert_se(parse_sleep_config(&sleep_config) == 0);",
          "26:         sum = strv_join(sleep_config->modes[SLEEP_SUSPEND], \", \");",
          "27:         sus = strv_join(sleep_config->states[SLEEP_SUSPEND], \", \");",
          "",
          "[Removed Lines]",
          "24:         _cleanup_free_ char *sum, *sus, *him, *his, *hym, *hys;",
          "",
          "[Added Lines]",
          "24:         _cleanup_free_ char *sum = NULL, *sus = NULL, *him = NULL, *his = NULL, *hym = NULL, *hys = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-strbuf.c||src/test/test-strbuf.c": [
          "File: src/test/test-strbuf.c -> src/test/test-strbuf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: }",
          "15: TEST(strbuf) {",
          "18:         ssize_t a, b, c, d, e, f, g, h;",
          "20:         sb = strbuf_new();",
          "",
          "[Removed Lines]",
          "16:         _cleanup_(strbuf_freep) struct strbuf *sb;",
          "17:         _cleanup_strv_free_ char **l;",
          "",
          "[Added Lines]",
          "16:         _cleanup_(strbuf_freep) struct strbuf *sb = NULL;",
          "17:         _cleanup_strv_free_ char **l = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-string-util.c||src/test/test-string-util.c": [
          "File: src/test/test-string-util.c -> src/test/test-string-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: }",
          "261: TEST(strrep) {",
          "263:         one = strrep(\"waldo\", 1);",
          "264:         three = strrep(\"waldo\", 3);",
          "265:         zero = strrep(\"waldo\", 0);",
          "",
          "[Removed Lines]",
          "262:         _cleanup_free_ char *one, *three, *zero;",
          "",
          "[Added Lines]",
          "262:         _cleanup_free_ char *one = NULL, *three = NULL, *zero = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-strv.c||src/test/test-strv.c": [
          "File: src/test/test-strv.c -> src/test/test-strv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: }",
          "202: static void test_strv_unquote_one(const char *quoted, char **list) {",
          "205:         unsigned i = 0;",
          "206:         int r;",
          "",
          "[Removed Lines]",
          "203:         _cleanup_strv_free_ char **s;",
          "204:         _cleanup_free_ char *j;",
          "",
          "[Added Lines]",
          "203:         _cleanup_strv_free_ char **s = NULL;",
          "204:         _cleanup_free_ char *j = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-time-util.c||src/test/test-time-util.c": [
          "File: src/test/test-time-util.c -> src/test/test-time-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:         test_format_timespan_accuracy(USEC_PER_SEC);",
          "248:         assert_se(buf = new(char, 5));",
          "249:         assert_se(buf == format_timespan(buf, 5, 100005, 1000));",
          "250: }",
          "",
          "[Removed Lines]",
          "247:         _cleanup_free_ char *buf;",
          "",
          "[Added Lines]",
          "247:         _cleanup_free_ char *buf = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-unit-name.c||src/test/test-unit-name.c": [
          "File: src/test/test-unit-name.c -> src/test/test-unit-name.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "583: }",
          "585: TEST(unit_name_escape) {",
          "588:         r = unit_name_escape(\"ab+-c.a/bc@foo.service\");",
          "589:         assert_se(r);",
          "",
          "[Removed Lines]",
          "586:         _cleanup_free_ char *r;",
          "",
          "[Added Lines]",
          "586:         _cleanup_free_ char *r = NULL;",
          "",
          "---------------"
        ],
        "src/test/test-utf8.c||src/test/test-utf8.c": [
          "File: src/test/test-utf8.c -> src/test/test-utf8.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: }",
          "101: TEST(utf8_escape_invalid) {",
          "104:         p1 = utf8_escape_invalid(\"goo goo goo\");",
          "105:         log_debug(\"\\\"%s\\\"\", p1);",
          "",
          "[Removed Lines]",
          "102:         _cleanup_free_ char *p1, *p2, *p3;",
          "",
          "[Added Lines]",
          "102:         _cleanup_free_ char *p1 = NULL, *p2 = NULL, *p3 = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: }",
          "117: TEST(utf8_escape_non_printable) {",
          "120:         p1 = utf8_escape_non_printable(\"goo goo goo\");",
          "121:         log_debug(\"\\\"%s\\\"\", p1);",
          "",
          "[Removed Lines]",
          "118:         _cleanup_free_ char *p1, *p2, *p3, *p4, *p5, *p6;",
          "",
          "[Added Lines]",
          "118:         _cleanup_free_ char *p1 = NULL, *p2 = NULL, *p3 = NULL, *p4 = NULL, *p5 = NULL, *p6 = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:                 for (size_t cw = 0; cw < 22; cw++) {",
          "152:                         size_t ew;",
          "154:                         p = utf8_escape_non_printable_full(s, cw, false);",
          "",
          "[Removed Lines]",
          "151:                         _cleanup_free_ char *p, *q;",
          "",
          "[Added Lines]",
          "151:                         _cleanup_free_ char *p = NULL, *q = NULL;",
          "",
          "---------------"
        ],
        "src/xdg-autostart-generator/test-xdg-autostart.c||src/xdg-autostart-generator/test-xdg-autostart.c": [
          "File: src/xdg-autostart-generator/test-xdg-autostart.c -> src/xdg-autostart-generator/test-xdg-autostart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"xdg-autostart-service.h\"",
          "12: TEST(translate_name) {",
          "15:         assert_se(t = xdg_autostart_service_translate_name(\"a-b.blub.desktop\"));",
          "16:         assert_se(streq(t, \"app-a\\\\x2db.blub@autostart.service\"));",
          "",
          "[Removed Lines]",
          "13:         _cleanup_free_ char *t;",
          "",
          "[Added Lines]",
          "13:         _cleanup_free_ char *t = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: TEST(xdg_format_exec_start) {",
          "28:         _cleanup_free_ char *home = NULL;",
          "31:         assert_se(get_home_dir(&home) >= 0);",
          "",
          "[Removed Lines]",
          "29:         _cleanup_free_ char *expected1, *expected2 = NULL;",
          "",
          "[Added Lines]",
          "29:         _cleanup_free_ char *expected1 = NULL, *expected2 = NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}