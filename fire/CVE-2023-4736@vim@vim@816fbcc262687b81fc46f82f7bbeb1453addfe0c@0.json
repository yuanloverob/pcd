{
  "cve_id": "CVE-2023-4736",
  "cve_desc": "Untrusted Search Path in GitHub repository vim/vim prior to 9.0.1833.",
  "repo": "vim/vim",
  "patch_hash": "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
  "patch_info": {
    "commit_hash": "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c",
    "files": [
      "runtime/autoload/gzip.vim",
      "runtime/autoload/zip.vim",
      "runtime/ftplugin/perl.vim",
      "runtime/ftplugin/ruby.vim",
      "runtime/ftplugin/zig.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.1833: [security] runtime file fixes\n\nProblem:  runtime files may execute code in current dir\nSolution: only execute, if not run from current directory\n\nThe perl, zig and ruby filetype plugins and the zip and gzip autoload\nplugins may try to load malicious executable files from the current\nworking directory.  This is especially a problem on windows, where the\ncurrent directory is implicitly in your $PATH and windows may even run a\nfile with the extension `.bat` because of $PATHEXT.\n\nSo make sure that we are not trying to execute a file from the current\ndirectory. If this would be the case, error out (for the zip and gzip)\nplugins or silently do not run those commands (for the ftplugins).\n\nThis assumes, that only the current working directory is bad. For all\nother directories, it is assumed that those directories were\nintentionally set to the $PATH by the user.\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
      "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
      "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
      "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
      "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim": [
      "File: runtime/autoload/gzip.vim -> runtime/autoload/gzip.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: fun s:check(cmd)",
      "11:   let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')",
      "12:   if !exists(\"s:have_\" . name)",
      "13:     let e = executable(name)",
      "14:     if e < 0",
      "15:       let r = system(name . \" --version\")",
      "16:       let e = (r !~ \"not found\" && r != \"\")",
      "17:     endif",
      "19:   endif",
      "20:   exe \"return s:have_\" . name",
      "21: endfun",
      "",
      "[Removed Lines]",
      "18:     exe \"let s:have_\" . name . \"=\" . e",
      "",
      "[Added Lines]",
      "13:     \" safety check, don't execute anything from the current directory",
      "14:     let f = fnamemodify(exepath(name), \":p:h\") !=# getcwd()",
      "15:     if !f",
      "16:       echoerr \"Warning: NOT executing \" .. name .. \" from current directory!\"",
      "17:     endif",
      "23:     exe \"let s:have_\" . name . \"=\" . (e && f)",
      "",
      "---------------"
    ],
    "runtime/autoload/zip.vim||runtime/autoload/zip.vim": [
      "File: runtime/autoload/zip.vim -> runtime/autoload/zip.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  let g:zip_extractcmd= g:zip_unzipcmd",
      "58: endif",
      "60: \" ----------------",
      "61: \"  Functions: {{{1",
      "62: \" ----------------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: if fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()",
      "61:  echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"",
      "62:  finish",
      "63: endif",
      "",
      "---------------"
    ],
    "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim": [
      "File: runtime/ftplugin/perl.vim -> runtime/ftplugin/perl.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: \" Set this once, globally.",
      "56: if !exists(\"perlpath\")",
      "58:       try",
      "59:  if &shellxquote != '\"'",
      "60:      let perlpath = system('perl -e \"print join(q/,/,@INC)\"')",
      "",
      "[Removed Lines]",
      "57:     if executable(\"perl\")",
      "",
      "[Added Lines]",
      "57:     \" safety check: don't execute perl from current directory",
      "58:     if executable(\"perl\") && fnamemodify(exepath(\"perl\"), \":p:h\") != getcwd()",
      "",
      "---------------"
    ],
    "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim": [
      "File: runtime/ftplugin/ruby.vim -> runtime/ftplugin/ruby.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:   return path",
      "100: endfunction",
      "108:     endif",
      "109:   endif",
      "125:     endif",
      "126:   endif",
      "138: if (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")",
      "139:   let b:browsefilter = \"Ruby Source Files (*.rb)\\t*.rb\\n\" .",
      "",
      "[Removed Lines]",
      "102: if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))",
      "103:   let s:version_file = findfile('.ruby-version', '.;')",
      "104:   if !empty(s:version_file) && filereadable(s:version_file)",
      "105:     let b:ruby_version = get(readfile(s:version_file, '', 1), '')",
      "106:     if !has_key(g:ruby_version_paths, b:ruby_version)",
      "107:       let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))",
      "110: endif",
      "112: if exists(\"g:ruby_path\")",
      "113:   let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path",
      "114: elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', ''))",
      "115:   let s:ruby_paths = g:ruby_version_paths[b:ruby_version]",
      "116:   let s:ruby_path = s:build_path(s:ruby_paths)",
      "117: else",
      "118:   if !exists('g:ruby_default_path')",
      "119:     if has(\"ruby\") && has(\"win32\")",
      "120:       ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
      "121:     elseif executable('ruby') && !empty($HOME)",
      "122:       let g:ruby_default_path = s:query_path($HOME)",
      "123:     else",
      "124:       let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
      "127:   let s:ruby_paths = g:ruby_default_path",
      "128:   let s:ruby_path = s:build_path(s:ruby_paths)",
      "129: endif",
      "131: if stridx(&l:path, s:ruby_path) == -1",
      "132:   let &l:path = s:ruby_path",
      "133: endif",
      "134: if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1",
      "135:   let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')",
      "136: endif",
      "",
      "[Added Lines]",
      "102: let s:execute_ruby = 1",
      "103: \" Security Check, don't execute ruby from the current directory",
      "104: if fnamemodify(exepath(\"ruby\"), \":p:h\") ==# getcwd()",
      "105:   let s:execute_ruby = 0",
      "106: endif",
      "108: function SetRubyPath()",
      "109:   if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))",
      "110:     let s:version_file = findfile('.ruby-version', '.;')",
      "111:     if !empty(s:version_file) && filereadable(s:version_file) && s:execute_ruby",
      "112:       let b:ruby_version = get(readfile(s:version_file, '', 1), '')",
      "113:       if !has_key(g:ruby_version_paths, b:ruby_version)",
      "114:  let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))",
      "115:       endif",
      "119:   if exists(\"g:ruby_path\")",
      "120:     let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path",
      "121:   elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', '')) && s:execute_ruby",
      "122:     let s:ruby_paths = g:ruby_version_paths[b:ruby_version]",
      "123:     let s:ruby_path = s:build_path(s:ruby_paths)",
      "124:   else",
      "125:     if !exists('g:ruby_default_path')",
      "126:       if has(\"ruby\") && has(\"win32\")",
      "127:  ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
      "128:       elseif executable('ruby') && !empty($HOME) && s:execute_ruby",
      "129:  let g:ruby_default_path = s:query_path($HOME)",
      "130:       else",
      "131:  let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
      "132:       endif",
      "134:     let s:ruby_paths = g:ruby_default_path",
      "135:     let s:ruby_path = s:build_path(s:ruby_paths)",
      "138:   if stridx(&l:path, s:ruby_path) == -1",
      "139:     let &l:path = s:ruby_path",
      "140:   endif",
      "141:   if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1",
      "142:     let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')",
      "143:   endif",
      "144: endfunction",
      "146: call SetRubyPath()",
      "",
      "---------------"
    ],
    "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
      "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
      "43:     silent let s:env = system('zig env')",
      "44:     if v:shell_error == 0",
      "45:         let g:zig_std_dir = json_decode(s:env)['std_dir']",
      "",
      "[Removed Lines]",
      "42: if !exists('g:zig_std_dir') && exists('*json_decode') && executable('zig')",
      "",
      "[Added Lines]",
      "42: \" Safety check: don't execute zip from current directory",
      "43: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
      "44:     \\  executable('zig') && fnamemodify(exepath(\"zig\"), \":p:h\") != getcwd()",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700: static int included_patches[] =",
      "703:     1832,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     1833,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d08059ab48b822a25060b8a486085371ddeebcf7",
      "candidate_info": {
        "commit_hash": "d08059ab48b822a25060b8a486085371ddeebcf7",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/d08059ab48b822a25060b8a486085371ddeebcf7",
        "files": [
          "runtime/autoload/rubycomplete.vim",
          "runtime/ftplugin/ruby.vim"
        ],
        "message": "runtime(ruby): Update ftplugin and omni-complete (#13805)\n\nSigned-off-by: Doug Kearns <dougkearns@gmail.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "runtime/autoload/rubycomplete.vim||runtime/autoload/rubycomplete.vim",
          "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim"
          ],
          "candidate": [
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/autoload/rubycomplete.vim||runtime/autoload/rubycomplete.vim": [
          "File: runtime/autoload/rubycomplete.vim -> runtime/autoload/rubycomplete.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \" Language:  Ruby",
          "3: \" Maintainer:  Mark Guzman <segfault@hasno.info>",
          "4: \" URL:   https://github.com/vim-ruby/vim-ruby",
          "7: \" ----------------------------------------------------------------------------",
          "8: \"",
          "9: \" Ruby IRB/Complete author: Keiju ISHITSUKA(keiju@ishitsuka.com)",
          "",
          "[Removed Lines]",
          "5: \" Release Coordinator: Doug Kearns <dougkearns@gmail.com>",
          "6: \" Last Change:  2020 Apr 12",
          "",
          "[Added Lines]",
          "5: \" Last Change:  2023 Dec 31",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490:         trail = \"%s%s\" % [ dir, sub ]",
          "491:         tcfg = \"%sconfig\" % trail",
          "494:           rails_base = trail",
          "495:           break",
          "496:         end",
          "",
          "[Removed Lines]",
          "493:         if File.exists?( tcfg )",
          "",
          "[Added Lines]",
          "492:         if File.exist?( tcfg )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:     bootfile = rails_base + \"config/boot.rb\"",
          "505:     envfile = rails_base + \"config/environment.rb\"",
          "507:       begin",
          "508:         require bootfile",
          "509:         require envfile",
          "",
          "[Removed Lines]",
          "506:     if File.exists?( bootfile ) && File.exists?( envfile )",
          "",
          "[Added Lines]",
          "505:     if File.exist?( bootfile ) && File.exist?( envfile )",
          "",
          "---------------"
        ],
        "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim": [
          "File: runtime/ftplugin/ruby.vim -> runtime/ftplugin/ruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \" Language:  Ruby",
          "3: \" Maintainer:  Tim Pope <vimNOSPAM@tpope.org>",
          "4: \" URL:   https://github.com/vim-ruby/vim-ruby",
          "8: if (exists(\"b:did_ftplugin\"))",
          "9:   finish",
          "",
          "[Removed Lines]",
          "5: \" Release Coordinator: Doug Kearns <dougkearns@gmail.com>",
          "6: \" Last Change:  2023 Sep 1st",
          "",
          "[Added Lines]",
          "5: \" Last Change:  2023 Dec 31",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:   let g:ruby_version_paths = {}",
          "61: endif",
          "63: function! s:query_path(root) abort",
          "67:   endif",
          "68:   let code = \"print $:.join %q{,}\"",
          "74:   if &shellxquote == \"'\"",
          "76:   else",
          "78:   endif",
          "81:   let cwd = fnameescape(getcwd())",
          "82:   try",
          "83:     exe cd fnameescape(a:root)",
          "88:     else",
          "90:     endif",
          "92:     exe cd cwd",
          "93:     return path",
          "94:   finally",
          "",
          "[Removed Lines]",
          "64:   \" Disabled by default for security reasons.",
          "65:   if !get(g:, 'ruby_exec', get(g:, 'plugin_exec', 0))",
          "66:     return []",
          "69:   if &shell =~# 'sh' && empty(&shellxquote)",
          "70:     let prefix = 'env PATH='.shellescape($PATH).' '",
          "71:   else",
          "72:     let prefix = ''",
          "73:   endif",
          "75:     let path_check = prefix.'ruby --disable-gems -e \"' . code . '\"'",
          "77:     let path_check = prefix.\"ruby --disable-gems -e '\" . code . \"'\"",
          "80:   let cd = haslocaldir() ? 'lcd' : 'cd'",
          "84:     let s:tmp_cwd = getcwd()",
          "85:     if (fnamemodify(exepath('ruby'), ':p:h') ==# cwd",
          "86:           \\ && (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) == -1 || s:tmp_cwd == '.'))",
          "87:       let path = []",
          "89:       let path = split(system(path_check),',')",
          "91:     unlet! s:tmp_cwd",
          "",
          "[Added Lines]",
          "62: let s:path_split = has('win32') ? ';' : ':'",
          "65:   \" Disabled by default for security reasons.",
          "66:   if !get(g:, 'ruby_exec', get(g:, 'plugin_exec', 0)) || empty(a:root)",
          "67:     return map(split($RUBYLIB, s:path_split), 'v:val ==# \".\" ? \"\" : v:val')",
          "71:     let args = ' --disable-gems -e \"' . code . '\"'",
          "73:     let args = \" --disable-gems -e '\" . code . \"'\"",
          "76:   let cd = haslocaldir() ? 'lcd' : exists(':tcd') && haslocaldir(-1) ? 'tcd' : 'cd'",
          "80:     for dir in split($PATH, s:path_split)",
          "81:       if dir !=# '.' && executable(dir . '/ruby') == 1",
          "82:  let exepath = dir . '/ruby'",
          "83:  break",
          "84:       endif",
          "85:     endfor",
          "86:     if exists('l:exepath')",
          "87:       let path = split(system(exepath . args),',')",
          "88:       if v:shell_error",
          "89:  let path = []",
          "90:       endif",
          "92:       let path = []",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:   if !exists('g:ruby_default_path')",
          "130:     if has(\"ruby\") && has(\"win32\")",
          "131:       ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
          "134:     else",
          "136:     endif",
          "137:   endif",
          "138:   let s:ruby_paths = g:ruby_default_path",
          "",
          "[Removed Lines]",
          "132:     elseif executable('ruby') && !empty($HOME)",
          "133:       let g:ruby_default_path = s:query_path($HOME)",
          "135:       let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
          "",
          "[Added Lines]",
          "135:       let g:ruby_default_path = s:query_path($HOME)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1d9316c6621d275593f58664975faf0fc23985f",
      "candidate_info": {
        "commit_hash": "d1d9316c6621d275593f58664975faf0fc23985f",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/d1d9316c6621d275593f58664975faf0fc23985f",
        "files": [
          "runtime/autoload/zig/fmt.vim",
          "runtime/doc/filetype.txt",
          "runtime/doc/tags",
          "runtime/ftplugin/zig.vim"
        ],
        "message": "runtime(zig): refactor zig ftplugin, remove auto format\n\nRefactored zig ftplugin, removed upstream comment, aucmd and\nauto formatting support. Updated documentation for zig configuration\nsettings and added new maintainer.\n\ncloses: #13803\n\nSigned-off-by: Tiseno <mathias.lindgren@stabelo.se>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "runtime/autoload/zig/fmt.vim||runtime/autoload/zig/fmt.vim",
          "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ],
          "candidate": [
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/autoload/zig/fmt.vim||runtime/autoload/zig/fmt.vim": [
          "File: runtime/autoload/zig/fmt.vim -> runtime/autoload/zig/fmt.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
          "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \" Vim filetype plugin file",
          "6: if exists(\"b:did_ftplugin\")",
          "7:   finish",
          "8: endif",
          "10: let b:did_ftplugin = 1",
          "13: set cpo&vim",
          "15: compiler zig_build",
          "17: \" Match Zig builtin fns",
          "18: setlocal iskeyword+=@-@",
          "26: setlocal formatoptions-=t formatoptions+=croql",
          "30: if has('comments')",
          "31:     setlocal comments=:///,://!,://",
          "32:     setlocal commentstring=//\\ %s",
          "33: endif",
          "35: if has('find_in_path')",
          "36:     let &l:includeexpr='substitute(v:fname, \"^([^.])$\", \"\\1.zig\", \"\")'",
          "37:     let &l:include='\\v(\\@import>|\\@cInclude>|^\\s*\\#\\s*include)'",
          "50: endif",
          "52: if exists('g:zig_std_dir')",
          "54: endif",
          "68: \" vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab",
          "",
          "[Removed Lines]",
          "2: \" Language: Zig",
          "3: \" Upstream: https://github.com/ziglang/zig.vim",
          "5: \" Only do this when not done yet for this buffer",
          "12: let s:cpo_orig = &cpo",
          "20: \" Recommended code style, no tabs and 4-space indentation",
          "21: setlocal expandtab",
          "22: setlocal tabstop=8",
          "23: setlocal softtabstop=4",
          "24: setlocal shiftwidth=4",
          "28: setlocal suffixesadd=.zig,.zir",
          "38: endif",
          "40: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
          "42: \" Safety check: don't execute zig from current directory",
          "43: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
          "44:     \\  executable('zig') && dist#vim#IsSafeExecutable('zig', 'zig')",
          "45:     silent let s:env = system('zig env')",
          "46:     if v:shell_error == 0",
          "47:         let g:zig_std_dir = json_decode(s:env)['std_dir']",
          "48:     endif",
          "49:     unlet! s:env",
          "53:     let &l:path = g:zig_std_dir . ',' . &l:path",
          "56: let b:undo_ftplugin =",
          "57:     \\ 'setl isk< et< ts< sts< sw< fo< sua< mp< com< cms< inex< inc< pa<'",
          "59: augroup vim-zig",
          "60:     autocmd! * <buffer>",
          "61:     autocmd BufWritePre <buffer> if get(g:, 'zig_fmt_autosave', 1) | call zig#fmt#Format() | endif",
          "62: augroup END",
          "64: let b:undo_ftplugin .= '|au! vim-zig * <buffer>'",
          "66: let &cpo = s:cpo_orig",
          "67: unlet s:cpo_orig",
          "",
          "[Added Lines]",
          "2: \" Language:     Zig",
          "3: \" Maintainer:   Mathias Lindgren <math.lindgren@gmail.com>",
          "4: \" Last Change:  2024 May 21",
          "5: \" Based on:     https://github.com/ziglang/zig.vim",
          "13: let s:cpo_save = &cpo",
          "21: setlocal suffixesadd=.zig,.zir,.zon",
          "22: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
          "23: let b:undo_ftplugin = 'setl isk< fo< sua< mp< def<'",
          "25: if get(g:, 'zig_recommended_style', 1)",
          "26:     setlocal expandtab",
          "27:     setlocal tabstop=8",
          "28:     setlocal softtabstop=4",
          "29:     setlocal shiftwidth=4",
          "30:     let b:undo_ftplugin .= ' | setl et< ts< sts< sw<'",
          "31: endif",
          "36:     let b:undo_ftplugin .= ' | setl com< cms<'",
          "42:     let b:undo_ftplugin .= ' | setl inex< inc<'",
          "46:     let &l:path .= ',' . g:zig_std_dir",
          "47:     let b:undo_ftplugin .= ' | setl pa<'",
          "50: let &cpo = s:cpo_save",
          "51: unlet s:cpo_save",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee17b6f70d382ec6c5d8d27b56c4e84106ac8c55",
      "candidate_info": {
        "commit_hash": "ee17b6f70d382ec6c5d8d27b56c4e84106ac8c55",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/ee17b6f70d382ec6c5d8d27b56c4e84106ac8c55",
        "files": [
          "runtime/doc/builtin.txt",
          "runtime/doc/insert.txt",
          "runtime/doc/windows.txt",
          "runtime/ftplugin/zig.vim",
          "src/Makefile",
          "src/errors.h",
          "src/ex_cmds.c",
          "src/findfile.c",
          "src/gui_gtk_x11.c",
          "src/insexpand.c",
          "src/main.c",
          "src/mbyte.c",
          "src/mouse.c",
          "src/po/README.txt",
          "src/po/README_mingw.txt",
          "src/sound.c",
          "src/term.c",
          "src/testdir/test_autocmd.vim",
          "src/testdir/test_channel.vim",
          "src/testdir/test_edit.vim",
          "src/testdir/test_functions.vim",
          "src/testdir/test_highlight.vim",
          "src/testdir/test_listdict.vim",
          "src/testdir/test_mksession.vim",
          "src/testdir/test_normal.vim",
          "src/testdir/test_substitute.vim",
          "src/testdir/test_vim9_class.vim",
          "src/testdir/test_vimscript.vim",
          "src/testdir/test_virtualedit.vim",
          "src/typval.c",
          "src/version.c",
          "src/vim9.h",
          "src/vim9type.c"
        ],
        "message": "patch 9.0.1886: Various Typos\n\nProblem:  Various Typos\nSolution: Fix Typos\n\nThis is a collection of typo related commits.\n\ncloses: #12753\ncloses: #13016\n\nCo-authored-by: Adri Verhoef <a3@a3.xs4all.nl>\nCo-authored-by: zeertzjq <zeertzjq@outlook.com>\nCo-authored-by: Viktor Sz\u00e9pe <viktor@szepe.net>\nCo-authored-by: nuid64 <lvkuzvesov@proton.me>\nCo-authored-by: Meng Xiangzhuo <aumo@foxmail.com>\nCo-authored-by: Dominique Pell\u00e9 <dominique.pelle@gmail.com>\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim",
          "src/errors.h||src/errors.h",
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/findfile.c||src/findfile.c",
          "src/gui_gtk_x11.c||src/gui_gtk_x11.c",
          "src/insexpand.c||src/insexpand.c",
          "src/main.c||src/main.c",
          "src/mbyte.c||src/mbyte.c",
          "src/mouse.c||src/mouse.c",
          "src/sound.c||src/sound.c",
          "src/term.c||src/term.c",
          "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
          "src/testdir/test_channel.vim||src/testdir/test_channel.vim",
          "src/testdir/test_edit.vim||src/testdir/test_edit.vim",
          "src/testdir/test_functions.vim||src/testdir/test_functions.vim",
          "src/testdir/test_highlight.vim||src/testdir/test_highlight.vim",
          "src/testdir/test_listdict.vim||src/testdir/test_listdict.vim",
          "src/testdir/test_mksession.vim||src/testdir/test_mksession.vim",
          "src/testdir/test_normal.vim||src/testdir/test_normal.vim",
          "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
          "src/testdir/test_vim9_class.vim||src/testdir/test_vim9_class.vim",
          "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim",
          "src/testdir/test_virtualedit.vim||src/testdir/test_virtualedit.vim",
          "src/typval.c||src/typval.c",
          "src/version.c||src/version.c",
          "src/vim9.h||src/vim9.h",
          "src/vim9type.c||src/vim9type.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
          "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
          "43: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
          "44:     \\  executable('zig') && get(g:, 'zig_exec', get(g:, 'plugin_exec', 0))",
          "45:     \\ && (fnamemodify(exepath(\"zig\"), \":p:h\") != s:tmp_cwd",
          "",
          "[Removed Lines]",
          "42: \" Safety check: don't execute zip from current directory",
          "",
          "[Added Lines]",
          "42: \" Safety check: don't execute zig from current directory",
          "",
          "---------------"
        ],
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3516: EXTERN char e_member_str_type_mismatch_expected_str_but_got_str[]",
          "3517:  INIT(= N_(\"E1406: Member \\\"%s\\\": type mismatch, expected %s but got %s\"));",
          "3518: EXTERN char e_method_str_type_mismatch_expected_str_but_got_str[]",
          "3520: EXTERN char e_aptypes_is_null_nr_str[]",
          "3521:  INIT(= \"E1408: Internal error: ap_types or ap_types[idx] is NULL: %d: %s\");",
          "3522: EXTERN char e_interface_static_direct_access_str[]",
          "",
          "[Removed Lines]",
          "3519:  INIT(= N_(\"E1407: Member \\\"%s\\\": type mismatch, expected %s but got %s\"));",
          "",
          "[Added Lines]",
          "3519:  INIT(= N_(\"E1407: Method \\\"%s\\\": type mismatch, expected %s but got %s\"));",
          "",
          "---------------"
        ],
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c"
        ],
        "src/findfile.c||src/findfile.c": [
          "File: src/findfile.c -> src/findfile.c"
        ],
        "src/gui_gtk_x11.c||src/gui_gtk_x11.c": [
          "File: src/gui_gtk_x11.c -> src/gui_gtk_x11.c"
        ],
        "src/insexpand.c||src/insexpand.c": [
          "File: src/insexpand.c -> src/insexpand.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/mbyte.c||src/mbyte.c": [
          "File: src/mbyte.c -> src/mbyte.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4050:  0x2021, // \u2021 double dagger",
          "4051:  0x2026, // \u2026 horizontal ellipsis",
          "4052:  0x2030, // \u2030 per mille sign",
          "4054:  0x203c, // \u203c double exclamation mark",
          "4055:  0x2047, // \u2047 double question mark",
          "4056:  0x2048, // \u2048 question exclamation mark",
          "",
          "[Removed Lines]",
          "4053:  0x2031, // \u2031 per then thousand sign",
          "",
          "[Added Lines]",
          "4053:  0x2031, // \u2031 per ten thousand sign",
          "",
          "---------------"
        ],
        "src/mouse.c||src/mouse.c": [
          "File: src/mouse.c -> src/mouse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2162: do_mousescroll_horiz(long_u leftcol)",
          "2163: {",
          "2164:     if (curwin->w_p_wrap)",
          "2167:     if (curwin->w_leftcol == (colnr_T)leftcol)",
          "2168:  return FALSE;  // already there",
          "",
          "[Removed Lines]",
          "2165:  return FALSE;  // no wrapping, no scrolling",
          "",
          "[Added Lines]",
          "2165:  return FALSE;  // no horizontal scrolling when wrapping",
          "",
          "---------------"
        ],
        "src/sound.c||src/sound.c": [
          "File: src/sound.c -> src/sound.c"
        ],
        "src/term.c||src/term.c": [
          "File: src/term.c -> src/term.c"
        ],
        "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim": [
          "File: src/testdir/test_autocmd.vim -> src/testdir/test_autocmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025: \" Test for BufUnload autocommand that unloads all the other buffers",
          "2026: func Test_bufunload_all()",
          "2027:   let g:test_is_flaky = 1",
          "2031:   let content =<< trim [CODE]",
          "2032:     func UnloadAllBufs()",
          "",
          "[Removed Lines]",
          "2028:   call writefile(['Test file Xxx1'], 'Xxx1', 'D')\"",
          "2029:   call writefile(['Test file Xxx2'], 'Xxx2', 'D')\"",
          "",
          "[Added Lines]",
          "2028:   call writefile(['Test file Xxx1'], 'Xxx1', 'D')",
          "2029:   call writefile(['Test file Xxx2'], 'Xxx2', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_channel.vim||src/testdir/test_channel.vim": [
          "File: src/testdir/test_channel.vim -> src/testdir/test_channel.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:   let start = reltime()",
          "525:   let handle = ch_open('localhost:9876', s:chopt)",
          "526:   if ch_status(handle) != \"fail\"",
          "528:     call ch_close(handle)",
          "529:   else",
          "530:     let elapsed = reltime(start)",
          "",
          "[Removed Lines]",
          "527:     \" Oops, port does exists.",
          "",
          "[Added Lines]",
          "527:     \" Oops, port exists.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:   try",
          "539:     let handle = ch_open('localhost:9867', {'waittime': 500})",
          "540:     if ch_status(handle) != \"fail\"",
          "542:       call ch_close(handle)",
          "543:     else",
          "544:       \" Failed connection should wait about 500 msec.  Can be longer if the",
          "",
          "[Removed Lines]",
          "541:       \" Oops, port does exists.",
          "",
          "[Added Lines]",
          "541:       \" Oops, port exists.",
          "",
          "---------------"
        ],
        "src/testdir/test_edit.vim||src/testdir/test_edit.vim": [
          "File: src/testdir/test_edit.vim -> src/testdir/test_edit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1219: endfunc",
          "1221: func Test_edit_MOUSE()",
          "1223:   CheckFeature mouse",
          "1224:   10new",
          "1225:   call setline(1, range(1, 100))",
          "",
          "[Removed Lines]",
          "1222:   \" This is a simple test, since we not really using the mouse here",
          "",
          "[Added Lines]",
          "1222:   \" This is a simple test, since we're not really using the mouse here",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1797:   close!",
          "1798:   set charconvert&",
          "1801:   func Cconv1()",
          "1802:   endfunc",
          "1803:   set charconvert=Cconv1()",
          "",
          "[Removed Lines]",
          "1800:   \" 'charconvert' function doesn't create a output file",
          "",
          "[Added Lines]",
          "1800:   \" 'charconvert' function doesn't create an output file",
          "",
          "---------------"
        ],
        "src/testdir/test_functions.vim||src/testdir/test_functions.vim": [
          "File: src/testdir/test_functions.vim -> src/testdir/test_functions.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2911:   call term_sendkeys(buf, getstate)",
          "2912:   call WaitForAssert({-> assert_match('state: mSc; mode: n', term_getline(buf, 6))}, 1000)",
          "2915:   call term_sendkeys(buf, \":call RunTimer()\\<CR>y\")",
          "2916:   call TermWait(buf, 25)",
          "2917:   call term_sendkeys(buf, \"y\")",
          "",
          "[Removed Lines]",
          "2914:   \" A operator is pending",
          "",
          "[Added Lines]",
          "2914:   \" An operator is pending",
          "",
          "---------------"
        ],
        "src/testdir/test_highlight.vim||src/testdir/test_highlight.vim": [
          "File: src/testdir/test_highlight.vim -> src/testdir/test_highlight.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "878:   hi clear",
          "879: endfunc",
          "882: func Test_highlight_ctermul()",
          "883:   CheckNotGui",
          "884:   call assert_notmatch('ctermul=', HighlightArgs('Normal'))",
          "",
          "[Removed Lines]",
          "881: \" Test for 'ctermul in a highlight group",
          "",
          "[Added Lines]",
          "881: \" Test for 'ctermul' in a highlight group",
          "",
          "---------------"
        ],
        "src/testdir/test_listdict.vim||src/testdir/test_listdict.vim": [
          "File: src/testdir/test_listdict.vim -> src/testdir/test_listdict.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:   endtry",
          "374:   call assert_equal('Vim(let):E716: \"1500\"', str)",
          "377:   for i in range(1500)",
          "378:     call assert_equal(3000 - i, d[i])",
          "379:   endfor",
          "",
          "[Removed Lines]",
          "376:   \" lookup each items",
          "",
          "[Added Lines]",
          "376:   \" lookup each item",
          "",
          "---------------"
        ],
        "src/testdir/test_mksession.vim||src/testdir/test_mksession.vim": [
          "File: src/testdir/test_mksession.vim -> src/testdir/test_mksession.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "568: func Test_mkview_terminal_windows()",
          "569:   CheckFeature terminal",
          "572:   terminal",
          "573:   let term_buf = bufnr()",
          "574:   exe 'sbuf ' .. term_buf",
          "",
          "[Removed Lines]",
          "571:   \" create two window on the same terminal to check this is handled OK",
          "",
          "[Added Lines]",
          "571:   \" create two windows on the same terminal to check this is handled OK",
          "",
          "---------------"
        ],
        "src/testdir/test_normal.vim||src/testdir/test_normal.vim": [
          "File: src/testdir/test_normal.vim -> src/testdir/test_normal.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: endfunc",
          "382: func Test_normal07_internalfmt()",
          "384:   let list=range(1,11)",
          "385:   call map(list, 'v:val.\"    \"')",
          "386:   10new",
          "",
          "[Removed Lines]",
          "383:   \" basic test for internal formmatter to textwidth of 12",
          "",
          "[Added Lines]",
          "383:   \" basic test for internal formatter to textwidth of 12",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2582:   exe \"norm! G0\\<c-v>4k4ly\"",
          "2583:   exe \"norm! gvood\"",
          "2584:   call assert_equal(['', 'abfgh', 'abfgh', 'abfgh', 'fgh', 'fgh', 'fgh', 'fgh', 'fgh'], getline(1,'$'))",
          "2586:   call assert_beeps('normal! cgv')",
          "2587:   \" gv should beep without a previously selected visual area",
          "2588:   new",
          "",
          "[Removed Lines]",
          "2585:   \" gv cannot be used  in operator pending mode",
          "",
          "[Added Lines]",
          "2585:   \" gv cannot be used in operator pending mode",
          "",
          "---------------"
        ],
        "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
          "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1448:   let bufnr = bufnr('%')",
          "1449:   put =\"abcdef\"",
          "1450:   silent! s/\\%')/\\=R()",
          "1452:   delfunc R",
          "1453:   exe bufnr .. \"bw!\"",
          "1454: endfunc",
          "",
          "[Removed Lines]",
          "1451:   call assert_fails(':%s/./\\=R()/g', 'E565')",
          "",
          "[Added Lines]",
          "1451:   call assert_fails(':%s/./\\=R()/g', 'E565:')",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_class.vim||src/testdir/test_vim9_class.vim": [
          "File: src/testdir/test_vim9_class.vim -> src/testdir/test_vim9_class.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1884:         enddef",
          "1885:       endclass",
          "1886:   END",
          "1889:   lines =<< trim END",
          "1890:       vim9script",
          "",
          "[Removed Lines]",
          "1887:   v9.CheckScriptFailure(lines, 'E1407: Member \"IsEven\": type mismatch, expected func(number): bool but got func(number): string')",
          "",
          "[Added Lines]",
          "1887:   v9.CheckScriptFailure(lines, 'E1407: Method \"IsEven\": type mismatch, expected func(number): bool but got func(number): string')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1897:         enddef",
          "1898:       endclass",
          "1899:   END",
          "1902:   lines =<< trim END",
          "1903:       vim9script",
          "",
          "[Removed Lines]",
          "1900:   v9.CheckScriptFailure(lines, 'E1407: Member \"IsEven\": type mismatch, expected func(number): bool but got func(bool): bool')",
          "",
          "[Added Lines]",
          "1900:   v9.CheckScriptFailure(lines, 'E1407: Method \"IsEven\": type mismatch, expected func(number): bool but got func(bool): bool')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1910:         enddef",
          "1911:       endclass",
          "1912:   END",
          "1915:   # access superclass interface members from subclass, mix variable order",
          "1916:   lines =<< trim END",
          "",
          "[Removed Lines]",
          "1913:   v9.CheckScriptFailure(lines, 'E1407: Member \"IsEven\": type mismatch, expected func(number): bool but got func(number, ...list<number>): bool')",
          "",
          "[Added Lines]",
          "1913:   v9.CheckScriptFailure(lines, 'E1407: Method \"IsEven\": type mismatch, expected func(number): bool but got func(number, ...list<number>): bool')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4576:       enddef",
          "4577:     endclass",
          "4578:   END",
          "4581:   # Use an abstract class to invoke an abstract method",
          "4582:   # FIXME: This should fail",
          "",
          "[Removed Lines]",
          "4579:   v9.CheckScriptFailure(lines, 'E1407: Member \"Foo\": type mismatch, expected func(string, number): list<number> but got func(number, string): list<string>')",
          "",
          "[Added Lines]",
          "4579:   v9.CheckScriptFailure(lines, 'E1407: Method \"Foo\": type mismatch, expected func(string, number): list<number> but got func(number, string): list<string>')",
          "",
          "---------------"
        ],
        "src/testdir/test_vimscript.vim||src/testdir/test_vimscript.vim": [
          "File: src/testdir/test_vimscript.vim -> src/testdir/test_vimscript.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3105: \"     should be given.",
          "3106: \"",
          "3107: \"     This test reuses the function MESSAGES() from the previous test.",
          "3109: \"-------------------------------------------------------------------------------",
          "3111: func Test_nested_while_error()",
          "",
          "[Removed Lines]",
          "3108: \"     This functions checks the messages in g:msgfile.",
          "",
          "[Added Lines]",
          "3108: \"     This function checks the messages in g:msgfile.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3230: \"     error messages should be given.",
          "3231: \"",
          "3232: \"     This test reuses the function MESSAGES() from the previous test.",
          "3234: \"-------------------------------------------------------------------------------",
          "3236: func Test_nested_cont_break_error()",
          "",
          "[Removed Lines]",
          "3233: \"     This functions checks the messages in g:msgfile.",
          "",
          "[Added Lines]",
          "3233: \"     This function checks the messages in g:msgfile.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3336: \"     should be given.",
          "3337: \"",
          "3338: \"     This test reuses the function MESSAGES() from the previous test.",
          "3340: \"-------------------------------------------------------------------------------",
          "3342: func Test_nested_endtry_error()",
          "",
          "[Removed Lines]",
          "3339: \"     This functions checks the messages in g:msgfile.",
          "",
          "[Added Lines]",
          "3339: \"     This function check the messages in g:msgfile.",
          "",
          "---------------"
        ],
        "src/testdir/test_virtualedit.vim||src/testdir/test_virtualedit.vim": [
          "File: src/testdir/test_virtualedit.vim -> src/testdir/test_virtualedit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:   set virtualedit=",
          "237: endfunc",
          "240: \" line.  (Mary Ellen Foster)",
          "241: func Test_ve_del_to_eol()",
          "242:   new",
          "",
          "[Removed Lines]",
          "239: \" Using \"C\" then then <CR> moves the last remaining character to the next",
          "",
          "[Added Lines]",
          "239: \" Using \"C\" then <CR> moves the last remaining character to the next",
          "",
          "---------------"
        ],
        "src/typval.c||src/typval.c": [
          "File: src/typval.c -> src/typval.c"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1885,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1886,",
          "",
          "---------------"
        ],
        "src/vim9.h||src/vim9.h": [
          "File: src/vim9.h -> src/vim9.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     ISN_SOURCE,     // source autoload script, isn_arg.number is the script ID",
          "34:     ISN_INSTR,     // instructions compiled from expression",
          "36:     ISN_GET_OBJ_MEMBER, // object member, index is isn_arg.number",
          "37:     ISN_GET_ITF_MEMBER, // interface member, index is isn_arg.classmember",
          "38:     ISN_STORE_THIS, // store value in \"this\" object member, index is",
          "",
          "[Removed Lines]",
          "35:     ISN_CONSTRUCT,  // construct an object, using contstruct_T",
          "",
          "[Added Lines]",
          "35:     ISN_CONSTRUCT,  // construct an object, using construct_T",
          "",
          "---------------"
        ],
        "src/vim9type.c||src/vim9type.c": [
          "File: src/vim9type.c -> src/vim9type.c"
        ]
      }
    },
    {
      "candidate_hash": "da16a1b471aa717f58909cc6531cb6dbbff14d22",
      "candidate_info": {
        "commit_hash": "da16a1b471aa717f58909cc6531cb6dbbff14d22",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/da16a1b471aa717f58909cc6531cb6dbbff14d22",
        "files": [
          "runtime/ftplugin/eruby.vim",
          "runtime/ftplugin/ruby.vim",
          "runtime/indent/ruby.vim",
          "runtime/syntax/ruby.vim"
        ],
        "message": "runtime(ruby): Update syntax, indent and ftplugin files\n\nWhile making changes to the ruby ftplugin, slightly change the exepath()\nconditional from patch 9.0.1833 and move it after the :cd invocation.\n\ncloses: 12981\ncloses: 12994\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>\nCo-authored-by: Tim Pope <code@tpope.net>\nCo-authored-by: Doug Kearns <dougkearns@gmail.com>",
        "before_after_code_files": [
          "runtime/ftplugin/eruby.vim||runtime/ftplugin/eruby.vim",
          "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
          "runtime/indent/ruby.vim||runtime/indent/ruby.vim",
          "runtime/syntax/ruby.vim||runtime/syntax/ruby.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim"
          ],
          "candidate": [
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/ftplugin/eruby.vim||runtime/ftplugin/eruby.vim": [
          "File: runtime/ftplugin/eruby.vim -> runtime/ftplugin/eruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: \" Maintainer:  Tim Pope <vimNOSPAM@tpope.org>",
          "4: \" URL:   https://github.com/vim-ruby/vim-ruby",
          "5: \" Release Coordinator: Doug Kearns <dougkearns@gmail.com>",
          "8: \" Only do this when not done yet for this buffer",
          "9: if exists(\"b:did_ftplugin\")",
          "",
          "[Removed Lines]",
          "6: \" Last Change:  2020 Jun 28",
          "",
          "[Added Lines]",
          "6: \" Last Change:  2022 May 15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: let b:did_ftplugin = 1",
          "88: \" Combine the new set of values with those previously included.",
          "91: endif",
          "92: if exists (\"b:browsefilter\")",
          "93:   let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter",
          "",
          "[Removed Lines]",
          "89: if exists(\"b:undo_ftplugin\")",
          "90:   let s:undo_ftplugin = b:undo_ftplugin . \" | \" . s:undo_ftplugin",
          "",
          "[Added Lines]",
          "89: if !exists('b:undo_ftplugin')",
          "90:   \" No-op",
          "91:   let b:undo_ftplugin = 'exe'",
          "92: endif",
          "93: if !empty(s:undo_ftplugin)",
          "94:   let b:undo_ftplugin .= '|' . s:undo_ftplugin",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: setlocal commentstring=<%#%s%>",
          "121: let b:undo_ftplugin = \"setl cms< \" .",
          "124: let &cpo = s:save_cpo",
          "125: unlet s:save_cpo",
          "",
          "[Removed Lines]",
          "122:       \\ \" | unlet! b:browsefilter b:match_words | \" . s:undo_ftplugin",
          "",
          "[Added Lines]",
          "126:       \\ \" | unlet! b:browsefilter b:match_words | \" . b:undo_ftplugin",
          "",
          "---------------"
        ],
        "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim": [
          "File: runtime/ftplugin/ruby.vim -> runtime/ftplugin/ruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: \" Maintainer:  Tim Pope <vimNOSPAM@tpope.org>",
          "4: \" URL:   https://github.com/vim-ruby/vim-ruby",
          "5: \" Release Coordinator: Doug Kearns <dougkearns@gmail.com>",
          "8: if (exists(\"b:did_ftplugin\"))",
          "9:   finish",
          "",
          "[Removed Lines]",
          "6: \" Last Change:  2022 Mar 21",
          "",
          "[Added Lines]",
          "6: \" Last Change:  2023 Sep 1st",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   let cwd = fnameescape(getcwd())",
          "78:   try",
          "79:     exe cd fnameescape(a:root)",
          "81:     exe cd cwd",
          "82:     return path",
          "83:   finally",
          "",
          "[Removed Lines]",
          "80:     let path = split(system(path_check),',')",
          "",
          "[Added Lines]",
          "80:     if fnamemodify(exepath('ruby'), ':p:h') ==# getcwd()",
          "81:       let path = []",
          "82:     else",
          "83:       let path = split(system(path_check),',')",
          "84:     endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:   return path",
          "100: endfunction",
          "116:     endif",
          "117:   endif",
          "133:     endif",
          "136:   endif",
          "148: if (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")",
          "149:   let b:browsefilter = \"Ruby Source Files (*.rb)\\t*.rb\\n\" .",
          "",
          "[Removed Lines]",
          "102: let s:execute_ruby = 1",
          "103: \" Security Check, don't execute ruby from the current directory",
          "104: if fnamemodify(exepath(\"ruby\"), \":p:h\") ==# getcwd()",
          "105:   let s:execute_ruby = 0",
          "106: endif",
          "108: function SetRubyPath()",
          "109:   if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))",
          "110:     let s:version_file = findfile('.ruby-version', '.;')",
          "111:     if !empty(s:version_file) && filereadable(s:version_file) && s:execute_ruby",
          "112:       let b:ruby_version = get(readfile(s:version_file, '', 1), '')",
          "113:       if !has_key(g:ruby_version_paths, b:ruby_version)",
          "114:  let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))",
          "115:       endif",
          "119:   if exists(\"g:ruby_path\")",
          "120:     let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path",
          "121:   elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', '')) && s:execute_ruby",
          "122:     let s:ruby_paths = g:ruby_version_paths[b:ruby_version]",
          "123:     let s:ruby_path = s:build_path(s:ruby_paths)",
          "124:   else",
          "125:     if !exists('g:ruby_default_path')",
          "126:       if has(\"ruby\") && has(\"win32\")",
          "127:  ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
          "128:       elseif executable('ruby') && !empty($HOME) && s:execute_ruby",
          "129:  let g:ruby_default_path = s:query_path($HOME)",
          "130:       else",
          "131:  let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
          "132:       endif",
          "134:     let s:ruby_paths = g:ruby_default_path",
          "135:     let s:ruby_path = s:build_path(s:ruby_paths)",
          "138:   if stridx(&l:path, s:ruby_path) == -1",
          "139:     let &l:path = s:ruby_path",
          "140:   endif",
          "141:   if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1",
          "142:     let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')",
          "143:   endif",
          "144: endfunction",
          "146: call SetRubyPath()",
          "",
          "[Added Lines]",
          "106: if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))",
          "107:   let s:version_file = findfile('.ruby-version', '.;')",
          "108:   if !empty(s:version_file) && filereadable(s:version_file)",
          "109:     let b:ruby_version = get(readfile(s:version_file, '', 1), '')",
          "110:     if !has_key(g:ruby_version_paths, b:ruby_version)",
          "111:       let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))",
          "114: endif",
          "116: if exists(\"g:ruby_path\")",
          "117:   let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path",
          "118: elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', ''))",
          "119:   let s:ruby_paths = g:ruby_version_paths[b:ruby_version]",
          "120:   let s:ruby_path = s:build_path(s:ruby_paths)",
          "121: else",
          "122:   if !exists('g:ruby_default_path')",
          "123:     if has(\"ruby\") && has(\"win32\")",
          "124:       ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
          "125:     elseif executable('ruby') && !empty($HOME)",
          "126:       let g:ruby_default_path = s:query_path($HOME)",
          "127:     else",
          "128:       let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
          "131:   let s:ruby_paths = g:ruby_default_path",
          "132:   let s:ruby_path = s:build_path(s:ruby_paths)",
          "133: endif",
          "135: if stridx(&l:path, s:ruby_path) == -1",
          "136:   let &l:path = s:ruby_path",
          "137: endif",
          "138: if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1",
          "139:   let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')",
          "140: endif",
          "",
          "---------------"
        ],
        "runtime/indent/ruby.vim||runtime/indent/ruby.vim": [
          "File: runtime/indent/ruby.vim -> runtime/indent/ruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: \" Previous Maintainer: Nikolai Weibull <now at bitwi.se>",
          "5: \" URL:   https://github.com/vim-ruby/vim-ruby",
          "6: \" Release Coordinator: Doug Kearns <dougkearns@gmail.com>",
          "9: \" 0. Initialization {{{1",
          "10: \" =================",
          "",
          "[Removed Lines]",
          "7: \" Last Change:  2022 Mar 22",
          "",
          "[Added Lines]",
          "7: \" Last Change:  2022 Jun 30",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:       \\    '\\<\\%(if\\|for\\|while\\|until\\|case\\|unless\\|begin\\):\\@!\\>'",
          "95: \" Def without an end clause: def method_call(...) = <expression>",
          "98: \" Regex used for words that, at the start of a line, remove a level of indent.",
          "99: let s:ruby_deindent_keywords =",
          "",
          "[Removed Lines]",
          "96: let s:ruby_endless_def = '\\<def\\s\\+\\k\\+[!?]\\=\\%((.*)\\|\\s\\)\\s*='",
          "",
          "[Added Lines]",
          "96: let s:ruby_endless_def = '\\<def\\s\\+\\%(\\k\\+\\.\\)\\=\\k\\+[!?]\\=\\%((.*)\\|\\s\\)\\s*='",
          "",
          "---------------"
        ],
        "runtime/syntax/ruby.vim||runtime/syntax/ruby.vim": [
          "File: runtime/syntax/ruby.vim -> runtime/syntax/ruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: \" Maintainer:  Doug Kearns <dougkearns@gmail.com>",
          "4: \" URL:   https://github.com/vim-ruby/vim-ruby",
          "5: \" Release Coordinator: Doug Kearns <dougkearns@gmail.com>",
          "7: \" ----------------------------------------------------------------------------",
          "8: \"",
          "9: \" Previous Maintainer: Mirko Nasato",
          "",
          "[Removed Lines]",
          "6: \" Last Change:  2021 Nov 03",
          "",
          "[Added Lines]",
          "6: \" Last Change:  2023 Mar 16",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: syn cluster rubyStringNotTop  contains=@rubyStringSpecial,@rubyNestedBrackets,@rubySingleCharEscape",
          "147: \" Regular Expression Metacharacters {{{1",
          "151: syn match  rubyRegexpCharClass   \"\\\\[DdHhRSsWw]\"  contained display",
          "152: syn match  rubyRegexpCharClass   \"\\[:\\^\\=\\%(alnum\\|alpha\\|ascii\\|blank\\|cntrl\\|digit\\|graph\\|lower\\|print\\|punct\\|space\\|upper\\|word\\|xdigit\\):\\]\" contained",
          "153: syn match  rubyRegexpCharClass   \"\\\\[pP]{^\\=.\\{-}}\"  contained display",
          "",
          "[Removed Lines]",
          "148: syn region rubyRegexpComment   matchgroup=rubyRegexpSpecial  start=\"(?#\"            skip=\"\\\\\\\\\\|\\\\)\"  end=\")\"  contained",
          "149: syn region rubyRegexpParens   matchgroup=rubyRegexpSpecial  start=\"(\\(?:\\|?<\\=[=!]\\|?>\\|?<[a-z_]\\w*>\\|?[imx]*-[imx]*:\\=\\|\\%(?#\\)\\@!\\)\" skip=\"\\\\\\\\\\|\\\\)\"  end=\")\"  contained transparent contains=@rubyRegexpSpecial",
          "150: syn region rubyRegexpBrackets   matchgroup=rubyRegexpCharClass start=\"\\[\\^\\=\"            skip=\"\\\\\\\\\\|\\\\\\]\" end=\"\\]\" contained transparent contains=rubyRegexpBrackets,rubyStringEscape,rubyRegexpEscape,rubyRegexpCharClass,rubyRegexpIntersection oneline",
          "",
          "[Added Lines]",
          "148: syn region rubyRegexpComment   matchgroup=rubyRegexpSpecial  start=\"(?#\"             skip=\"\\\\\\\\\\|\\\\)\"  end=\")\" contained",
          "149: syn region rubyRegexpParens   matchgroup=rubyRegexpSpecial  start=\"(\\%(?:\\|?<\\=[=!]\\|?>\\|?<[a-z_]\\w*>\\|?[imx]*-[imx]*:\\=\\|\\%(?#\\)\\@!\\)\" skip=\"\\\\\\\\\\|\\\\)\"  end=\")\" contained transparent contains=@rubyRegexpSpecial",
          "150: syn region rubyRegexpBrackets   matchgroup=rubyRegexpCharClass start=\"\\[\\^\\=\"             skip=\"\\\\\\\\\\|\\\\\\]\" end=\"\\]\" contained transparent contains=rubyRegexpBrackets,rubyStringEscape,rubyRegexpEscape,rubyRegexpCharClass,rubyRegexpIntersection oneline",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346: syn match rubyControl      \"\\%#=1\\<\\%(break\\|in\\|next\\|redo\\|retry\\|return\\)\\>\"",
          "347: syn match rubyKeyword      \"\\%#=1\\<\\%(super\\|yield\\)\\>\"",
          "348: syn match rubyBoolean      \"\\%#=1\\<\\%(true\\|false\\)\\>[?!]\\@!\"",
          "350: syn match rubyPseudoVariable \"\\%#=1\\<__\\%(ENCODING\\|dir\\|FILE\\|LINE\\|callee\\|method\\)__\\>\"",
          "351: syn match rubyBeginEnd      \"\\%#=1\\<\\%(BEGIN\\|END\\)\\>\"",
          "",
          "[Removed Lines]",
          "349: syn match rubyPseudoVariable \"\\%#=1\\<\\(self\\|nil\\)\\>[?!]\\@!\"",
          "",
          "[Added Lines]",
          "349: syn match rubyPseudoVariable \"\\%#=1\\<\\%(self\\|nil\\)\\>[?!]\\@!\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400:   SynFold 'for' syn region rubyRepeatExpression start=\"\\<for\\>\" start=\"\\%(\\%(^\\|\\.\\.\\.\\=\\|[{:,;([<>~\\*/%&^|+=-]\\|\\%(\\<\\%(\\h\\|[^\\x00-\\x7F]\\)\\%(\\w\\|[^\\x00-\\x7F]\\)*\\)\\@<![!?]\\)\\s*\\)\\@<=\\<\\%(until\\|while\\)\\>\" matchgroup=rubyRepeat skip=\"\\<end:\" end=\"\\<end\\>\" contains=ALLBUT,@rubyNotTop nextgroup=rubyOptionalDoLine",
          "407: else",
          "408:   syn match rubyControl \"\\<def\\>\"    nextgroup=rubyMethodDeclaration skipwhite skipnl",
          "409:   syn match rubyControl \"\\<class\\>\"  nextgroup=rubyClassDeclaration  skipwhite skipnl",
          "",
          "[Removed Lines]",
          "402:   if !exists(\"ruby_minlines\")",
          "403:     let ruby_minlines = 500",
          "404:   endif",
          "405:   exe \"syn sync minlines=\" . ruby_minlines",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "412:   syn match rubyKeyword \"\\<\\%(alias\\|undef\\)\\>\"",
          "413: endif",
          "415: \" Special Methods {{{1",
          "416: if !exists(\"ruby_no_special_methods\")",
          "417:   syn match rubyAccess   \"\\<\\%(public\\|protected\\|private\\)\\>\" \" use re=2",
          "418:   syn match rubyAccess   \"\\%#=1\\<\\%(public\\|private\\)_class_method\\>\"",
          "419:   syn match rubyAccess   \"\\%#=1\\<\\%(public\\|private\\)_constant\\>\"",
          "420:   syn match rubyAccess   \"\\%#=1\\<module_function\\>\"",
          "422:   syn match rubyAttribute \"\\%#=1\\<attr_\\%(accessor\\|reader\\|writer\\)\\>\"",
          "423:   syn match rubyControl   \"\\%#=1\\<\\%(abort\\|at_exit\\|exit\\|fork\\|loop\\|trap\\)\\>\"",
          "424:   syn match rubyEval   \"\\%#=1\\<eval\\>\"",
          "",
          "[Removed Lines]",
          "421:   syn match rubyAttribute \"\\%#=1\\%(\\%(^\\|;\\)\\s*\\)\\@<=attr\\>\\(\\s*[.=]\\)\\@!\" \" attr is a common variable name",
          "",
          "[Added Lines]",
          "410: if !exists(\"ruby_minlines\")",
          "411:   let ruby_minlines = 500",
          "412: endif",
          "413: exe \"syn sync minlines=\" . ruby_minlines",
          "421:   syn match rubyAttribute \"\\%#=1\\%(\\%(^\\|;\\)\\s*\\)\\@<=attr\\>\\%(\\s*[.=]\\)\\@!\" \" attr is a common variable name",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "435: syn keyword rubyTodo      FIXME NOTE TODO OPTIMIZE HACK REVIEW XXX todo contained",
          "436: syn match   rubyEncoding     \"[[:alnum:]-_]\\+\" contained display",
          "437: syn match   rubyMagicComment \"\\c\\%<3l#\\s*\\zs\\%(coding\\|encoding\\):\"     contained nextgroup=rubyEncoding skipwhite",
          "440: syn match   rubyComment      \"#.*\" contains=@rubyCommentSpecial,rubySpaceError,@Spell",
          "442: syn cluster rubyCommentSpecial contains=rubySharpBang,rubyTodo,rubyMagicComment",
          "",
          "[Removed Lines]",
          "438: syn match   rubyMagicComment \"\\c\\%<10l#\\s*\\zs\\%(frozen_string_literal\\|warn_indent\\|warn_past_scope\\):\" contained nextgroup=rubyBoolean  skipwhite",
          "439: syn match   rubyMagicComment \"\\c\\%<10l#\\s*\\zs\\%(shareable_constant_value\\):\"    contained nextgroup=rubyEncoding  skipwhite",
          "",
          "[Added Lines]",
          "438: syn match   rubyMagicComment \"\\c\\%<10l#\\s*\\zs\\%(frozen[-_]string[-_]literal\\|warn[-_]indent\\|warn[-_]past[-_]scope\\):\" contained nextgroup=rubyBoolean  skipwhite",
          "439: syn match   rubyMagicComment \"\\c\\%<10l#\\s*\\zs\\%(shareable[-_]constant[-_]value\\):\"    contained nextgroup=rubyEncoding  skipwhite",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d52926857ec7f08a9bee8f96470748cecf58002",
      "candidate_info": {
        "commit_hash": "8d52926857ec7f08a9bee8f96470748cecf58002",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/8d52926857ec7f08a9bee8f96470748cecf58002",
        "files": [
          "runtime/autoload/zip.vim"
        ],
        "message": "runtime(zip): add a generic Message function\n\nProblem:  the zip plugin duplicates a lot of code for displaying\n          warnings/errors\nSolution: refactor common code into a generic Mess() function\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "runtime/autoload/zip.vim||runtime/autoload/zip.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/autoload/zip.vim||runtime/autoload/zip.vim"
          ],
          "candidate": [
            "runtime/autoload/zip.vim||runtime/autoload/zip.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/autoload/zip.vim||runtime/autoload/zip.vim": [
          "File: runtime/autoload/zip.vim -> runtime/autoload/zip.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  finish",
          "30: endif",
          "31: let g:loaded_zip= \"v34\"",
          "38: let s:keepcpo= &cpo",
          "39: set cpo&vim",
          "",
          "[Removed Lines]",
          "32: if v:version < 900",
          "33:  echohl WarningMsg",
          "34:  echomsg \"***warning*** this version of zip needs vim 9.0 or later\"",
          "35:  echohl Normal",
          "36:  finish",
          "37: endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  let g:zip_extractcmd= g:zip_unzipcmd",
          "65: endif",
          "67: if !dist#vim#IsSafeExecutable('zip', g:zip_unzipcmd)",
          "69:  finish",
          "70: endif",
          "",
          "[Removed Lines]",
          "68:  echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"",
          "",
          "[Added Lines]",
          "61: \" ---------------------------------------------------------------------",
          "62: \"  required early",
          "63: \" s:Mess: {{{2",
          "64: fun! s:Mess(group, msg)",
          "65:   redraw!",
          "66:   exe \"echohl \" . a:group",
          "67:   echomsg a:msg",
          "68:   echohl Normal",
          "69: endfun",
          "71: if v:version < 900",
          "72:  call s:Mess('WarningMsg', \"***warning*** this version of zip needs vim 9.0 or later\")",
          "73:  finish",
          "74: endif",
          "76:  call s:Mess('Error', \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:   \" sanity checks",
          "89:   if !executable(g:zip_unzipcmd)",
          "92:    call s:RestoreOpts(dict)",
          "93:    return",
          "94:   endif",
          "95:   if !filereadable(a:zipfile)",
          "96:    if a:zipfile !~# '^\\a\\+://'",
          "97:     \" if it's an url, don't complain, let url-handlers such as vim do its thing",
          "100:    endif",
          "101:    call s:RestoreOpts(dict)",
          "102:    return",
          "",
          "[Removed Lines]",
          "90:    redraw!",
          "91:    echohl Error | echomsg \"***error*** (zip#Browse) unzip not available on your system\"",
          "98:     redraw!",
          "99:     echohl Error | echomsg \"***error*** (zip#Browse) File not readable<\".a:zipfile.\">\" | echohl None",
          "",
          "[Added Lines]",
          "98:    call s:Mess('Error', \"***error*** (zip#Browse) unzip not available on your system\")",
          "105:     call s:Mess('Error', \"***error*** (zip#Browse) File not readable <\".a:zipfile.\">\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:   exe $\"keepj sil r! {g:zip_unzipcmd} -Z1 -- {s:Escape(a:zipfile, 1)}\"",
          "129:   if v:shell_error != 0",
          "132:    keepj sil! %d",
          "133:    let eikeep= &ei",
          "134:    set ei=BufReadCmd,FileReadCmd",
          "",
          "[Removed Lines]",
          "130:    redraw!",
          "131:    echohl WarningMsg | echomsg \"***warning*** (zip#Browse) \".fnameescape(a:zipfile).\" is not a zip file\" | echohl None",
          "",
          "[Added Lines]",
          "136:    call s:Mess('WarningMsg', \"***warning*** (zip#Browse) \".fnameescape(a:zipfile).\" is not a zip file\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:    return",
          "167:   endif",
          "168:   if fname =~ '/$'",
          "171:    call s:RestoreOpts(dict)",
          "172:    return",
          "173:   endif",
          "",
          "[Removed Lines]",
          "169:    redraw!",
          "170:    echohl Error | echomsg \"***error*** (zip#Browse) Please specify a file, not a directory\" | echohl None",
          "",
          "[Added Lines]",
          "174:    call s:Mess('Error', \"***error*** (zip#Browse) Please specify a file, not a directory\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:   let fname    = substitute(fname, '[', '[[]', 'g')",
          "203:   \" sanity check",
          "204:   if !executable(substitute(g:zip_unzipcmd,'\\s\\+.*$','',''))",
          "207:    call s:RestoreOpts(dict)",
          "208:    return",
          "209:   endif",
          "",
          "[Removed Lines]",
          "205:    redraw!",
          "206:    echohl Error | echomsg \"***error*** (zip#Read) sorry, your system doesn't appear to have the \".g:zip_unzipcmd.\" program\" | echohl None",
          "",
          "[Added Lines]",
          "209:    call s:Mess('Error', \"***error*** (zip#Read) sorry, your system doesn't appear to have the \".g:zip_unzipcmd.\" program\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "235:   \" sanity checks",
          "236:   if !executable(substitute(g:zip_zipcmd,'\\s\\+.*$','',''))",
          "239:    call s:RestoreOpts(dict)",
          "240:    return",
          "241:   endif",
          "242:   if !exists(\"*mkdir\")",
          "245:    call s:RestoreOpts(dict)",
          "246:    return",
          "247:   endif",
          "",
          "[Removed Lines]",
          "237:    redraw!",
          "238:    echohl Error | echomsg \"***error*** (zip#Write) sorry, your system doesn't appear to have the \".g:zip_zipcmd.\" program\" | echohl None",
          "243:    redraw!",
          "244:    echohl Error | echomsg \"***error*** (zip#Write) sorry, mkdir() doesn't work on your system\" | echohl None",
          "",
          "[Added Lines]",
          "240:    call s:Mess('Error', \"***error*** (zip#Write) sorry, your system doesn't appear to have the \".g:zip_zipcmd.\" program\")",
          "245:    call s:Mess('Error', \"***error*** (zip#Write) sorry, mkdir() doesn't work on your system\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   call system(g:zip_zipcmd.\" -u \".s:Escape(fnamemodify(zipfile,\":p\"),0).\" \".s:Escape(fname,0))",
          "298:   if v:shell_error != 0",
          "302:   elseif s:zipfile_{winnr()} =~ '^\\a\\+://'",
          "303:    \" support writing zipfiles across a network",
          "",
          "[Removed Lines]",
          "299:    redraw!",
          "300:    echohl Error | echomsg \"***error*** (zip#Write) sorry, unable to update \".zipfile.\" with \".fname | echohl None",
          "",
          "[Added Lines]",
          "300:    call s:Mess('Error', \"***error*** (zip#Write) sorry, unable to update \".zipfile.\" with \".fname)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "337:    return",
          "338:   endif",
          "339:   if fname =~ '/$'",
          "342:    call s:RestoreOpts(dict)",
          "343:    return",
          "344:   endif",
          "",
          "[Removed Lines]",
          "340:    redraw!",
          "341:    echohl Error | echomsg \"***error*** (zip#Extract) Please specify a file, not a directory\" | echohl None",
          "",
          "[Added Lines]",
          "340:    call s:Mess('Error', \"***error*** (zip#Extract) Please specify a file, not a directory\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "346:   \" extract the file mentioned under the cursor",
          "347:   call system($\"{g:zip_extractcmd} {shellescape(b:zipfile)} {shellescape(fname)}\")",
          "348:   if v:shell_error != 0",
          "350:   elseif !filereadable(fname)",
          "352:   else",
          "353:    echomsg \"***note*** successfully extracted \".fname",
          "354:   endif",
          "",
          "[Removed Lines]",
          "349:    echohl Error | echomsg \"***error*** \".g:zip_extractcmd.\" \".b:zipfile.\" \".fname.\": failed!\" | echohl NONE",
          "351:    echohl Error | echomsg \"***error*** attempted to extract \".fname.\" but it doesn't appear to be present!\"",
          "",
          "[Added Lines]",
          "348:    call s:Mess('Error', \"***error*** \".g:zip_extractcmd.\" \".b:zipfile.\" \".fname.\": failed!\")",
          "350:    call s:Mess('Error', \"***error*** attempted to extract \".fname.\" but it doesn't appear to be present!\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "383:    if a:errlvl == s:NOTE",
          "384:     echomsg \"***note*** \".a:errmsg",
          "385:    elseif a:errlvl == s:WARNING",
          "387:    elseif a:errlvl == s:ERROR",
          "389:    endif",
          "390:    return 1",
          "391:   endtry",
          "",
          "[Removed Lines]",
          "386:     echohl WarningMsg | echomsg \"***warning*** \".a:errmsg | echohl NONE",
          "388:     echohl Error | echomsg \"***error*** \".a:errmsg | echohl NONE",
          "",
          "[Added Lines]",
          "385:     call s:Mess(\"WarningMsg\", \"***warning*** \".a:errmsg)",
          "387:     call s:Mess(\"Error\", \"***error*** \".a:errmsg)",
          "",
          "---------------"
        ]
      }
    }
  ]
}