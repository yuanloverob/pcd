{
  "cve_id": "CVE-2023-40184",
  "cve_desc": "xrdp is an open source remote desktop protocol (RDP) server. In versions prior to 0.9.23 improper handling of session establishment errors allows bypassing OS-level session restrictions. The `auth_start_session` function can return non-zero (1) value on, e.g., PAM error which may result in in session restrictions such as max concurrent sessions per user by PAM (ex ./etc/security/limits.conf) to be bypassed. Users (administrators) don't use restrictions by PAM are not affected. This issue has been addressed in release version 0.9.23. Users are advised to upgrade. There are no known workarounds for this issue.",
  "repo": "neutrinolabs/xrdp",
  "patch_hash": "a111a0fdfe2421ef600e40708b5f0168594cfb23",
  "patch_info": {
    "commit_hash": "a111a0fdfe2421ef600e40708b5f0168594cfb23",
    "repo": "neutrinolabs/xrdp",
    "commit_url": "https://github.com/neutrinolabs/xrdp/commit/a111a0fdfe2421ef600e40708b5f0168594cfb23",
    "files": [
      "sesman/libsesman/verify_user_pam.c",
      "sesman/libsesman/verify_user_pam_userpass.c",
      "sesman/sesexec/session.c"
    ],
    "message": "Merge pull request from GHSA-f489-557v-47jq\n\nCheck auth_start_session() result",
    "before_after_code_files": [
      "sesman/libsesman/verify_user_pam.c||sesman/libsesman/verify_user_pam.c",
      "sesman/libsesman/verify_user_pam_userpass.c||sesman/libsesman/verify_user_pam_userpass.c",
      "sesman/sesexec/session.c||sesman/sesexec/session.c"
    ]
  },
  "patch_diff": {
    "sesman/libsesman/verify_user_pam.c||sesman/libsesman/verify_user_pam.c": [
      "File: sesman/libsesman/verify_user_pam.c -> sesman/libsesman/verify_user_pam.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "402: {",
      "403:     int error;",
      "404:     char display[256];",
      "",
      "[Removed Lines]",
      "400: int",
      "401: auth_start_session(struct auth_info *auth_info, int display_num)",
      "",
      "[Added Lines]",
      "400: static int",
      "401: auth_start_session_private(struct auth_info *auth_info, int display_num)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "436:     return 0;",
      "437: }",
      "441: static int",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "446: int",
      "447: auth_start_session(struct auth_info *auth_info, int display_num)",
      "448: {",
      "449:     int result = auth_start_session_private(auth_info, display_num);",
      "450:     if (result != 0)",
      "451:     {",
      "452:         LOG(LOG_LEVEL_ERROR,",
      "453:             \"Can't start PAM session. See PAM logging for more info\");",
      "454:     }",
      "456:     return result;",
      "457: }",
      "",
      "---------------"
    ],
    "sesman/libsesman/verify_user_pam_userpass.c||sesman/libsesman/verify_user_pam_userpass.c": [
      "File: sesman/libsesman/verify_user_pam_userpass.c -> sesman/libsesman/verify_user_pam_userpass.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "212: {",
      "213:     int error;",
      "214:     char display[256];",
      "",
      "[Removed Lines]",
      "210: int",
      "211: auth_start_session(struct auth_info *auth_info, int display_num)",
      "",
      "[Added Lines]",
      "210: static int",
      "211: auth_start_session_private(struct auth_info *auth_info, int display_num)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return 0;",
      "247: }",
      "251: static int",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256: int",
      "257: auth_start_session(struct auth_info *auth_info, int display_num)",
      "258: {",
      "259:     int result = auth_start_session_private(auth_info, display_num);",
      "260:     if (result != 0)",
      "261:     {",
      "262:         LOG(LOG_LEVEL_ERROR,",
      "263:             \"Can't start PAM session. See PAM logging for more info\");",
      "264:     }",
      "266:     return result;",
      "267: }",
      "",
      "---------------"
    ],
    "sesman/sesexec/session.c||sesman/sesexec/session.c": [
      "File: sesman/sesexec/session.c -> sesman/sesexec/session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:     int window_manager_pid;",
      "569:     enum scp_screate_status status = E_SCP_SCREATE_GENERAL_ERROR;",
      "572: #ifdef USE_BSD_SETLOGIN",
      "",
      "[Removed Lines]",
      "571:     auth_start_session(login_info->auth_info, s->display);",
      "",
      "[Added Lines]",
      "571:     if (auth_start_session(login_info->auth_info, s->display) != 0)",
      "572:     {",
      "575:         return E_SCP_SCREATE_GENERAL_ERROR;",
      "576:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c5b7cdff3929dc59c5f13e33cec839ed45d1c34",
      "candidate_info": {
        "commit_hash": "8c5b7cdff3929dc59c5f13e33cec839ed45d1c34",
        "repo": "neutrinolabs/xrdp",
        "commit_url": "https://github.com/neutrinolabs/xrdp/commit/8c5b7cdff3929dc59c5f13e33cec839ed45d1c34",
        "files": [
          "sesman/session.c",
          "sesman/verify_user_pam.c"
        ],
        "message": "Merge pull request from GHSA-f489-557v-47jq\n\n[v0.9] Check auth_start_session() result",
        "before_after_code_files": [
          "sesman/session.c||sesman/session.c",
          "sesman/verify_user_pam.c||sesman/verify_user_pam.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sesman/session.c||sesman/session.c": [
          "File: sesman/session.c -> sesman/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:         g_delete_wait_obj(g_sigchld_event);",
          "527:         g_delete_wait_obj(g_term_event);",
          "530:         sesman_close_all();",
          "531:         g_sprintf(geometry, \"%dx%d\", s->width, s->height);",
          "532:         g_sprintf(depth, \"%d\", s->bpp);",
          "",
          "[Removed Lines]",
          "529:         auth_start_session(data, display);",
          "",
          "[Added Lines]",
          "529:         if (auth_start_session(data, display) != 0)",
          "530:         {",
          "533:             g_exit(1);",
          "534:         }",
          "",
          "---------------"
        ],
        "sesman/verify_user_pam.c||sesman/verify_user_pam.c": [
          "File: sesman/verify_user_pam.c -> sesman/verify_user_pam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321: {",
          "322:     struct t_auth_info *auth_info;",
          "323:     int error;",
          "",
          "[Removed Lines]",
          "319: int",
          "320: auth_start_session(long in_val, int in_display)",
          "",
          "[Added Lines]",
          "319: static int",
          "320: auth_start_session_private(long in_val, int in_display)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:     return 0;",
          "358: }",
          "362: int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367: int",
          "368: auth_start_session(long in_val, int in_display)",
          "369: {",
          "370:     int result = auth_start_session_private(in_val, in_display);",
          "371:     if (result != 0)",
          "372:     {",
          "373:         LOG(LOG_LEVEL_ERROR,",
          "374:             \"Can't start PAM session. See PAM logging for more info\");",
          "375:     }",
          "377:     return result;",
          "378: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}