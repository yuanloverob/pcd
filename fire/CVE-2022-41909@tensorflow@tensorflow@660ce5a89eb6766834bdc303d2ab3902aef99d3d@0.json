{
  "cve_id": "CVE-2022-41909",
  "cve_desc": "TensorFlow is an open source platform for machine learning. An input `encoded` that is not a valid `CompositeTensorVariant` tensor will trigger a segfault in `tf.raw_ops.CompositeTensorVariantToComponents`. We have patched the issue in GitHub commits bf594d08d377dc6a3354d9fdb494b32d45f91971 and 660ce5a89eb6766834bdc303d2ab3902aef99d3d. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "660ce5a89eb6766834bdc303d2ab3902aef99d3d",
  "patch_info": {
    "commit_hash": "660ce5a89eb6766834bdc303d2ab3902aef99d3d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/660ce5a89eb6766834bdc303d2ab3902aef99d3d",
    "files": [
      "tensorflow/core/kernels/composite_tensor_ops.cc",
      "tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
    ],
    "message": "[Security] Add a check for empty variant tensor input to CompositeTensorVariantToComponents.\n\nSo an exception will be raised instead of segfault.\n\nPiperOrigin-RevId: 474397914",
    "before_after_code_files": [
      "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
      "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc": [
      "File: tensorflow/core/kernels/composite_tensor_ops.cc -> tensorflow/core/kernels/composite_tensor_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"tensorflow/core/framework/op.h\"",
      "17: #include \"tensorflow/core/framework/op_kernel.h\"",
      "18: #include \"tensorflow/core/framework/variant.h\"",
      "19: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
      "20: #include \"tensorflow/core/kernels/composite_tensor_variant.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include \"tensorflow/core/framework/op_requires.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:   void Compute(OpKernelContext* context) override {",
      "68:     Tensor encoded_t = context->input(0);",
      "69:     auto* encoded = encoded_t.flat<Variant>()(0).get<CompositeTensorVariant>();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "70:     OP_REQUIRES(",
      "71:         context, encoded_t.flat<Variant>().size() > 0,",
      "72:         errors::InvalidArgument(\"Input `encoded` must not be an empty variant \"",
      "73:                                 \"tensor, but got \",",
      "74:                                 encoded_t.DebugString()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py": [
      "File: tensorflow/python/kernel_tests/composite_tensor_ops_test.py -> tensorflow/python/kernel_tests/composite_tensor_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from tensorflow.python.eager import backprop",
      "20: from tensorflow.python.eager import context",
      "21: from tensorflow.python.framework import dtypes",
      "22: from tensorflow.python.framework import errors",
      "23: from tensorflow.python.framework import sparse_tensor",
      "24: from tensorflow.python.framework import test_util",
      "25: from tensorflow.python.ops import composite_tensor_ops",
      "26: from tensorflow.python.ops import gradients_impl",
      "27: from tensorflow.python.ops import math_ops",
      "28: from tensorflow.python.ops import parsing_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import constant_op",
      "27: from tensorflow.python.ops import gen_composite_tensor_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:     with self.assertRaisesRegex(ValueError, message):",
      "84:       composite_tensor_ops.composite_tensor_to_variants(value(), spec)",
      "86:   def testRoundTripThroughTensorProto(self):",
      "87:     value = ragged_factory_ops.constant([[1, 2], [3], [4, 5, 6]])",
      "88:     encoded = composite_tensor_ops.composite_tensor_to_variants(value)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:   def testDecodingEmptyNonScalarTensorError(self):",
      "89:     if not context.executing_eagerly():",
      "90:       # Creating a variant tensor of an empty list is not allowed in eager mode.",
      "91:       return",
      "93:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "94:                                 'must not be an empty variant tensor'):",
      "95:       gen_composite_tensor_ops.CompositeTensorVariantToComponents(",
      "96:           encoded=constant_op.constant([], dtype=dtypes.variant),",
      "97:           metadata='',",
      "98:           Tcomponents=[dtypes.int32])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73de58ca7226cf6711f910733337da4333acc9bd",
      "candidate_info": {
        "commit_hash": "73de58ca7226cf6711f910733337da4333acc9bd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/73de58ca7226cf6711f910733337da4333acc9bd",
        "files": [
          "tensorflow/core/kernels/composite_tensor_ops.cc",
          "tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
        ],
        "message": "[Security] Add a check for empty variant tensor input to CompositeTensorVariantToComponents.\n\nSo an exception will be raised instead of segfault.\n\nPiperOrigin-RevId: 474397914",
        "before_after_code_files": [
          "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
          "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
            "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
            "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc": [
          "File: tensorflow/core/kernels/composite_tensor_ops.cc -> tensorflow/core/kernels/composite_tensor_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/op.h\"",
          "17: #include \"tensorflow/core/framework/op_kernel.h\"",
          "18: #include \"tensorflow/core/framework/variant.h\"",
          "19: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
          "20: #include \"tensorflow/core/kernels/composite_tensor_variant.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   void Compute(OpKernelContext* context) override {",
          "68:     Tensor encoded_t = context->input(0);",
          "69:     auto* encoded = encoded_t.flat<Variant>()(0).get<CompositeTensorVariant>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         context, encoded_t.flat<Variant>().size() > 0,",
          "72:         errors::InvalidArgument(\"Input `encoded` must not be an empty variant \"",
          "73:                                 \"tensor, but got \",",
          "74:                                 encoded_t.DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py": [
          "File: tensorflow/python/kernel_tests/composite_tensor_ops_test.py -> tensorflow/python/kernel_tests/composite_tensor_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.eager import backprop",
          "20: from tensorflow.python.eager import context",
          "21: from tensorflow.python.framework import dtypes",
          "22: from tensorflow.python.framework import errors",
          "23: from tensorflow.python.framework import sparse_tensor",
          "24: from tensorflow.python.framework import test_util",
          "25: from tensorflow.python.ops import composite_tensor_ops",
          "26: from tensorflow.python.ops import gradients_impl",
          "27: from tensorflow.python.ops import math_ops",
          "28: from tensorflow.python.ops import parsing_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import constant_op",
          "27: from tensorflow.python.ops import gen_composite_tensor_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     with self.assertRaisesRegex(ValueError, message):",
          "84:       composite_tensor_ops.composite_tensor_to_variants(value(), spec)",
          "86:   def testRoundTripThroughTensorProto(self):",
          "87:     value = ragged_factory_ops.constant([[1, 2], [3], [4, 5, 6]])",
          "88:     encoded = composite_tensor_ops.composite_tensor_to_variants(value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   def testDecodingEmptyNonScalarTensorError(self):",
          "89:     if not context.executing_eagerly():",
          "90:       # Creating a variant tensor of an empty list is not allowed in eager mode.",
          "91:       return",
          "93:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "94:                                 'must not be an empty variant tensor'):",
          "95:       gen_composite_tensor_ops.CompositeTensorVariantToComponents(",
          "96:           encoded=constant_op.constant([], dtype=dtypes.variant),",
          "97:           metadata='',",
          "98:           Tcomponents=[dtypes.int32])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a0dc56f8125aeed018a62d78d2f991546490d51",
      "candidate_info": {
        "commit_hash": "9a0dc56f8125aeed018a62d78d2f991546490d51",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9a0dc56f8125aeed018a62d78d2f991546490d51",
        "files": [
          "tensorflow/core/kernels/composite_tensor_ops.cc",
          "tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
        ],
        "message": "[Security] Add a check for empty variant tensor input to CompositeTensorVariantToComponents.\n\nSo an exception will be raised instead of segfault.\n\nPiperOrigin-RevId: 474397914",
        "before_after_code_files": [
          "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
          "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
            "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
            "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc": [
          "File: tensorflow/core/kernels/composite_tensor_ops.cc -> tensorflow/core/kernels/composite_tensor_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/op.h\"",
          "17: #include \"tensorflow/core/framework/op_kernel.h\"",
          "18: #include \"tensorflow/core/framework/variant.h\"",
          "19: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
          "20: #include \"tensorflow/core/kernels/composite_tensor_variant.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   void Compute(OpKernelContext* context) override {",
          "68:     Tensor encoded_t = context->input(0);",
          "69:     auto* encoded = encoded_t.flat<Variant>()(0).get<CompositeTensorVariant>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         context, encoded_t.flat<Variant>().size() > 0,",
          "72:         errors::InvalidArgument(\"Input `encoded` must not be an empty variant \"",
          "73:                                 \"tensor, but got \",",
          "74:                                 encoded_t.DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py": [
          "File: tensorflow/python/kernel_tests/composite_tensor_ops_test.py -> tensorflow/python/kernel_tests/composite_tensor_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.eager import backprop",
          "20: from tensorflow.python.eager import context",
          "21: from tensorflow.python.framework import dtypes",
          "22: from tensorflow.python.framework import errors",
          "23: from tensorflow.python.framework import sparse_tensor",
          "24: from tensorflow.python.framework import test_util",
          "25: from tensorflow.python.ops import composite_tensor_ops",
          "26: from tensorflow.python.ops import gradients_impl",
          "27: from tensorflow.python.ops import math_ops",
          "28: from tensorflow.python.ops import parsing_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import constant_op",
          "27: from tensorflow.python.ops import gen_composite_tensor_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     with self.assertRaisesRegex(ValueError, message):",
          "84:       composite_tensor_ops.composite_tensor_to_variants(value(), spec)",
          "86:   def testRoundTripThroughTensorProto(self):",
          "87:     value = ragged_factory_ops.constant([[1, 2], [3], [4, 5, 6]])",
          "88:     encoded = composite_tensor_ops.composite_tensor_to_variants(value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   def testDecodingEmptyNonScalarTensorError(self):",
          "89:     if not context.executing_eagerly():",
          "90:       # Creating a variant tensor of an empty list is not allowed in eager mode.",
          "91:       return",
          "93:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "94:                                 'must not be an empty variant tensor'):",
          "95:       gen_composite_tensor_ops.CompositeTensorVariantToComponents(",
          "96:           encoded=constant_op.constant([], dtype=dtypes.variant),",
          "97:           metadata='',",
          "98:           Tcomponents=[dtypes.int32])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "019122652ee4d6390ceca7c20c26daa81f00610d",
      "candidate_info": {
        "commit_hash": "019122652ee4d6390ceca7c20c26daa81f00610d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/019122652ee4d6390ceca7c20c26daa81f00610d",
        "files": [
          "tensorflow/core/kernels/composite_tensor_ops.cc",
          "tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
        ],
        "message": "[Security] Add a check for empty variant tensor input to CompositeTensorVariantToComponents.\n\nSo an exception will be raised instead of segfault.\n\nPiperOrigin-RevId: 474397914",
        "before_after_code_files": [
          "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
          "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
            "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc",
            "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/composite_tensor_ops.cc||tensorflow/core/kernels/composite_tensor_ops.cc": [
          "File: tensorflow/core/kernels/composite_tensor_ops.cc -> tensorflow/core/kernels/composite_tensor_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/framework/op.h\"",
          "17: #include \"tensorflow/core/framework/op_kernel.h\"",
          "18: #include \"tensorflow/core/framework/variant.h\"",
          "19: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
          "20: #include \"tensorflow/core/kernels/composite_tensor_variant.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   void Compute(OpKernelContext* context) override {",
          "68:     Tensor encoded_t = context->input(0);",
          "69:     auto* encoded = encoded_t.flat<Variant>()(0).get<CompositeTensorVariant>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(",
          "71:         context, encoded_t.flat<Variant>().size() > 0,",
          "72:         errors::InvalidArgument(\"Input `encoded` must not be an empty variant \"",
          "73:                                 \"tensor, but got \",",
          "74:                                 encoded_t.DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/composite_tensor_ops_test.py||tensorflow/python/kernel_tests/composite_tensor_ops_test.py": [
          "File: tensorflow/python/kernel_tests/composite_tensor_ops_test.py -> tensorflow/python/kernel_tests/composite_tensor_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.eager import backprop",
          "20: from tensorflow.python.eager import context",
          "21: from tensorflow.python.framework import dtypes",
          "22: from tensorflow.python.framework import errors",
          "23: from tensorflow.python.framework import sparse_tensor",
          "24: from tensorflow.python.framework import test_util",
          "25: from tensorflow.python.ops import composite_tensor_ops",
          "26: from tensorflow.python.ops import gradients_impl",
          "27: from tensorflow.python.ops import math_ops",
          "28: from tensorflow.python.ops import parsing_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import constant_op",
          "27: from tensorflow.python.ops import gen_composite_tensor_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     with self.assertRaisesRegex(ValueError, message):",
          "84:       composite_tensor_ops.composite_tensor_to_variants(value(), spec)",
          "86:   def testRoundTripThroughTensorProto(self):",
          "87:     value = ragged_factory_ops.constant([[1, 2], [3], [4, 5, 6]])",
          "88:     encoded = composite_tensor_ops.composite_tensor_to_variants(value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   def testDecodingEmptyNonScalarTensorError(self):",
          "89:     if not context.executing_eagerly():",
          "90:       # Creating a variant tensor of an empty list is not allowed in eager mode.",
          "91:       return",
          "93:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "94:                                 'must not be an empty variant tensor'):",
          "95:       gen_composite_tensor_ops.CompositeTensorVariantToComponents(",
          "96:           encoded=constant_op.constant([], dtype=dtypes.variant),",
          "97:           metadata='',",
          "98:           Tcomponents=[dtypes.int32])",
          "",
          "---------------"
        ]
      }
    }
  ]
}