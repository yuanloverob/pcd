{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b111a38ea1ae395a0c33106b232ed840627939b",
      "candidate_info": {
        "commit_hash": "3b111a38ea1ae395a0c33106b232ed840627939b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3b111a38ea1ae395a0c33106b232ed840627939b",
        "files": [
          "Lib/test/test_future_stmt/test_future.py"
        ],
        "message": "[3.13] gh-116860: Remove outdated `test_parserhack` from `test_future` (GH-116861) (#119649)\n\ngh-116860: Remove outdated `test_parserhack` from `test_future` (GH-116861)\n(cherry picked from commit 669175bf8edc2c02d48401bac0e4c7d99a33f15b)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_future_stmt/test_future.py||Lib/test/test_future_stmt/test_future.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_future_stmt/test_future.py||Lib/test/test_future_stmt/test_future.py": [
          "File: Lib/test/test_future_stmt/test_future.py -> Lib/test/test_future_stmt/test_future.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         }",
          "172:         self.assertCountEqual(set(flags.values()), flags.values())",
          "194:     def test_unicode_literals_exec(self):",
          "195:         scope = {}",
          "196:         exec(\"from __future__ import unicode_literals; x = ''\", {}, scope)",
          "",
          "[Removed Lines]",
          "174:     def test_parserhack(self):",
          "175:         # test that the parser.c::future_hack function works as expected",
          "176:         # Note: although this test must pass, it's not testing the original",
          "177:         #       bug as of 2.6 since the with statement is not optional and",
          "178:         #       the parser hack disabled. If a new keyword is introduced in",
          "179:         #       2.6, change this to refer to the new future import.",
          "180:         try:",
          "181:             exec(\"from __future__ import print_function; print 0\")",
          "182:         except SyntaxError:",
          "183:             pass",
          "184:         else:",
          "185:             self.fail(\"syntax error didn't occur\")",
          "187:         try:",
          "188:             exec(\"from __future__ import (print_function); print 0\")",
          "189:         except SyntaxError:",
          "190:             pass",
          "191:         else:",
          "192:             self.fail(\"syntax error didn't occur\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9216a5336fc3c5b594bba1ae18779100c207b23f",
      "candidate_info": {
        "commit_hash": "9216a5336fc3c5b594bba1ae18779100c207b23f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9216a5336fc3c5b594bba1ae18779100c207b23f",
        "files": [
          "Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c"
        ],
        "message": "[3.13] gh-117398: Revert gh-119636, Add multiphase support to _datetime (#119639)\n\nRevert \"[3.13] gh-117398: Add multiphase support to _datetime (gh-119373) (gh-119636)\"\n\nThis reverts commit d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c.",
        "before_after_code_files": [
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     pass",
          "48: #",
          "70: pickle_loads = {pickle.loads, pickle._loads}",
          "72: pickle_choices = [(pickle, pickle, proto)",
          "",
          "[Removed Lines]",
          "50: # This is copied from test_import/__init__.py.",
          "51: # XXX Move it to support/__init__.py.",
          "52: def no_rerun(reason):",
          "53:     \"\"\"Skip rerunning for a particular test.",
          "55:     WARNING: Use this decorator with care; skipping rerunning makes it",
          "56:     impossible to find reference leaks. Provide a clear reason for skipping the",
          "57:     test using the 'reason' parameter.",
          "58:     \"\"\"",
          "59:     def deco(func):",
          "60:         _has_run = False",
          "61:         def wrapper(self):",
          "62:             nonlocal _has_run",
          "63:             if _has_run:",
          "64:                 self.skipTest(reason)",
          "65:             func(self)",
          "66:             _has_run = True",
          "67:         return wrapper",
          "68:     return deco",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6405: @unittest.skipIf(_testcapi is None, 'need _testcapi module')",
          "6407: class CapiTest(unittest.TestCase):",
          "6408:     def setUp(self):",
          "6409:         # Since the C API is not present in the _Pure tests, skip all tests",
          "",
          "[Removed Lines]",
          "6406: @no_rerun(\"the encapsulated datetime C API does not support reloading\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6970: }",
          "6971: #undef DATETIME_ADD_MACRO",
          "6981:     .m_base = PyModuleDef_HEAD_INIT,",
          "6982:     .m_name = \"_datetime\",",
          "6983:     .m_doc = \"Fast implementation of the datetime type.\",",
          "6985:     .m_methods = module_methods,",
          "6987: };",
          "6989: PyMODINIT_FUNC",
          "6990: PyInit__datetime(void)",
          "6991: {",
          "6993: }",
          "",
          "[Removed Lines]",
          "6973: static PyModuleDef_Slot module_slots[] = {",
          "6974:     {Py_mod_exec, _datetime_exec},",
          "6975:     {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},",
          "6976:     {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
          "6977:     {0, NULL},",
          "6978: };",
          "6980: static PyModuleDef datetimemodule = {",
          "6984:     .m_size = 0,",
          "6986:     .m_slots = module_slots,",
          "6992:     return PyModuleDef_Init(&datetimemodule);",
          "",
          "[Added Lines]",
          "6973: static struct PyModuleDef datetimemodule = {",
          "6977:     .m_size = -1,",
          "6984:     PyObject *mod = PyModule_Create(&datetimemodule);",
          "6985:     if (mod == NULL)",
          "6986:         return NULL;",
          "6987: #ifdef Py_GIL_DISABLED",
          "6988:     PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED);",
          "6989: #endif",
          "6991:     if (_datetime_exec(mod) < 0) {",
          "6992:         Py_DECREF(mod);",
          "6993:         return NULL;",
          "6994:     }",
          "6996:     return mod;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eea45ea21306fb04e5c4583889e8356315aa742b",
      "candidate_info": {
        "commit_hash": "eea45ea21306fb04e5c4583889e8356315aa742b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/eea45ea21306fb04e5c4583889e8356315aa742b",
        "files": [
          "Lib/_pyrepl/console.py",
          "Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/unix_console.py",
          "Lib/_pyrepl/windows_console.py",
          "Lib/test/test_pyrepl/test_reader.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-31-12-06-11.gh-issue-119842.tCGVsv.rst",
          "Modules/clinic/posixmodule.c.h",
          "Modules/posixmodule.c"
        ],
        "message": "[3.13] gh-119842: Honor PyOS_InputHook in the new REPL (GH-119843) (GH-120066)\n\n(cherry picked from commit d9095194dde27eaabfc0b86a11989cdb9a2acfe1)\n\nSigned-off-by: Pablo Galindo <pablogsal@gmail.com>\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>\nCo-authored-by: Michael Droettboom <mdboom@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/console.py||Lib/_pyrepl/console.py",
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py",
          "Lib/_pyrepl/windows_console.py||Lib/_pyrepl/windows_console.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py",
          "Modules/clinic/posixmodule.c.h||Modules/clinic/posixmodule.c.h",
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ],
          "candidate": [
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ]
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/console.py||Lib/_pyrepl/console.py": [
          "File: Lib/_pyrepl/console.py -> Lib/_pyrepl/console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: if TYPE_CHECKING:",
          "35:     from typing import IO",
          "38: @dataclass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     from typing import Callable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:         ...",
          "136:     @abstractmethod",
          "139:         ...",
          "141:     @abstractmethod",
          "",
          "[Removed Lines]",
          "137:     def wait(self) -> None:",
          "138:         \"\"\"Wait for an event.\"\"\"",
          "",
          "[Added Lines]",
          "138:     def wait(self, timeout: float | None) -> bool:",
          "139:         \"\"\"Wait for an event. The return value is True if an event is",
          "140:         available, False if the timeout has been reached. If timeout is",
          "141:         None, wait forever. The timeout is in milliseconds.\"\"\"",
          "142:         ...",
          "144:     @property",
          "145:     def input_hook(self) -> Callable[[], int] | None:",
          "146:         \"\"\"Returns the current input hook.\"\"\"",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:             self.dirty = True",
          "652:         while True:",
          "654:             if not event:  # can only happen if we're not blocking",
          "655:                 return False",
          "",
          "[Removed Lines]",
          "653:             event = self.console.get_event(block)",
          "",
          "[Added Lines]",
          "653:             input_hook = self.console.input_hook",
          "654:             if input_hook:",
          "655:                 input_hook()",
          "656:                 # We use the same timeout as in readline.c: 100ms",
          "657:                 while not self.console.wait(100):",
          "658:                     input_hook()",
          "659:                 event = self.console.get_event(block=False)",
          "660:             else:",
          "661:                 event = self.console.get_event(block)",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/unix_console.py||Lib/_pyrepl/unix_console.py": [
          "File: Lib/_pyrepl/unix_console.py -> Lib/_pyrepl/unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         def register(self, fd, flag):",
          "120:             self.fd = fd",
          "124:             return r",
          "126:     poll = MinimalPoll  # type: ignore[assignment]",
          "",
          "[Removed Lines]",
          "122:         def poll(self):  # note: a 'timeout' argument would be *milliseconds*",
          "123:             r, w, e = select.select([self.fd], [], [])",
          "",
          "[Added Lines]",
          "121:         # note: The 'timeout' argument is received as *milliseconds*",
          "122:         def poll(self, timeout: float | None = None) -> list[int]:",
          "123:             if timeout is None:",
          "124:                 r, w, e = select.select([self.fd], [], [])",
          "125:             else:",
          "126:                 r, w, e = select.select([self.fd], [], [], timeout/1000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:                 break",
          "386:         return self.event_queue.get()",
          "389:         \"\"\"",
          "390:         Wait for events on the console.",
          "391:         \"\"\"",
          "394:     def set_cursor_vis(self, visible):",
          "395:         \"\"\"",
          "",
          "[Removed Lines]",
          "388:     def wait(self):",
          "392:         self.pollob.poll()",
          "",
          "[Added Lines]",
          "391:     def wait(self, timeout: float | None = None) -> bool:",
          "395:         return bool(self.pollob.poll(timeout))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "527:         self.__posxy = 0, 0",
          "528:         self.screen = []",
          "530:     def __enable_bracketed_paste(self) -> None:",
          "531:         os.write(self.output_fd, b\"\\x1b[?2004h\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:     @property",
          "534:     def input_hook(self):",
          "535:         try:",
          "536:             import posix",
          "537:         except ImportError:",
          "538:             return None",
          "539:         if posix._is_inputhook_installed():",
          "540:             return posix._inputhook",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/windows_console.py||Lib/_pyrepl/windows_console.py": [
          "File: Lib/_pyrepl/windows_console.py -> Lib/_pyrepl/windows_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from multiprocessing import Value",
          "24: import os",
          "25: import sys",
          "27: from abc import ABC, abstractmethod",
          "28: from collections import deque",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import time",
          "27: import msvcrt",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:         self.screen = screen",
          "203:         self.move_cursor(cx, cy)",
          "205:     def __write_changed_line(",
          "206:         self, y: int, oldline: str, newline: str, px_coord: int",
          "207:     ) -> None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     @property",
          "208:     def input_hook(self):",
          "209:         try:",
          "210:             import nt",
          "211:         except ImportError:",
          "212:             return None",
          "213:         if nt._is_inputhook_installed():",
          "214:             return nt._inputhook",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460:         processed.\"\"\"",
          "461:         return Event(\"key\", \"\", b\"\")",
          "464:         \"\"\"Wait for an event.\"\"\"",
          "467:     def repaint(self) -> None:",
          "468:         raise NotImplementedError(\"No repaint support\")",
          "",
          "[Removed Lines]",
          "463:     def wait(self) -> None:",
          "465:         raise NotImplementedError(\"No wait support\")",
          "",
          "[Added Lines]",
          "474:     def wait(self, timeout: float | None) -> bool:",
          "476:         # Poor man's Windows select loop",
          "477:         start_time = time.time()",
          "478:         while True:",
          "479:             if msvcrt.kbhit(): # type: ignore[attr-defined]",
          "480:                 return True",
          "481:             if timeout and time.time() - start_time > timeout:",
          "482:                 return False",
          "483:             time.sleep(0.01)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import functools",
          "3: import rlcompleter",
          "4: from unittest import TestCase",
          "6: from .support import handle_all_events, handle_events_narrow_console, code_to_events, prepare_reader",
          "7: from _pyrepl.console import Event",
          "8: from _pyrepl.reader import Reader",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from unittest.mock import MagicMock, patch",
          "8: from test.support import import_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:         self.assert_screen_equals(reader, expected)",
          "180:         self.assertTrue(reader.finished)",
          "182:     def test_keyboard_interrupt_clears_screen(self):",
          "183:         namespace = {\"itertools\": itertools}",
          "184:         code = \"import itertools\\nitertools.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     def test_input_hook_is_called_if_set(self):",
          "185:         input_hook = MagicMock()",
          "186:         def _prepare_console(events):",
          "187:             console = MagicMock()",
          "188:             console.get_event.side_effect = events",
          "189:             console.height = 100",
          "190:             console.width = 80",
          "191:             console.input_hook = input_hook",
          "192:             return console",
          "194:         events = code_to_events(\"a\")",
          "195:         reader, _ = handle_all_events(events, prepare_console=_prepare_console)",
          "197:         self.assertEqual(len(input_hook.mock_calls), 4)",
          "",
          "---------------"
        ],
        "Modules/clinic/posixmodule.c.h||Modules/clinic/posixmodule.c.h": [
          "File: Modules/clinic/posixmodule.c.h -> Modules/clinic/posixmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12119: #ifndef OS_TTYNAME_METHODDEF",
          "12120:     #define OS_TTYNAME_METHODDEF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12119: PyDoc_STRVAR(os__inputhook__doc__,",
          "12120: \"_inputhook($module, /)\\n\"",
          "12121: \"--\\n\"",
          "12122: \"\\n\"",
          "12123: \"Calls PyOS_CallInputHook droppong the GIL first\");",
          "12125: #define OS__INPUTHOOK_METHODDEF    \\",
          "12126:     {\"_inputhook\", (PyCFunction)os__inputhook, METH_NOARGS, os__inputhook__doc__},",
          "12128: static PyObject *",
          "12129: os__inputhook_impl(PyObject *module);",
          "12131: static PyObject *",
          "12132: os__inputhook(PyObject *module, PyObject *Py_UNUSED(ignored))",
          "12133: {",
          "12134:     return os__inputhook_impl(module);",
          "12135: }",
          "12137: PyDoc_STRVAR(os__is_inputhook_installed__doc__,",
          "12138: \"_is_inputhook_installed($module, /)\\n\"",
          "12139: \"--\\n\"",
          "12140: \"\\n\"",
          "12141: \"Checks if PyOS_CallInputHook is set\");",
          "12143: #define OS__IS_INPUTHOOK_INSTALLED_METHODDEF    \\",
          "12144:     {\"_is_inputhook_installed\", (PyCFunction)os__is_inputhook_installed, METH_NOARGS, os__is_inputhook_installed__doc__},",
          "12146: static PyObject *",
          "12147: os__is_inputhook_installed_impl(PyObject *module);",
          "12149: static PyObject *",
          "12150: os__is_inputhook_installed(PyObject *module, PyObject *Py_UNUSED(ignored))",
          "12151: {",
          "12152:     return os__is_inputhook_installed_impl(module);",
          "12153: }",
          "",
          "---------------"
        ],
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16784: }",
          "16785: #endif",
          "16788: static PyMethodDef posix_methods[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16788: os._inputhook",
          "16790: Calls PyOS_CallInputHook droppong the GIL first",
          "16793: static PyObject *",
          "16794: os__inputhook_impl(PyObject *module)",
          "16796: {",
          "16797:      int result = 0;",
          "16798:      if (PyOS_InputHook) {",
          "16799:          Py_BEGIN_ALLOW_THREADS;",
          "16800:          result = PyOS_InputHook();",
          "16801:          Py_END_ALLOW_THREADS;",
          "16802:      }",
          "16803:      return PyLong_FromLong(result);",
          "16804: }",
          "16807: os._is_inputhook_installed",
          "16809: Checks if PyOS_CallInputHook is set",
          "16812: static PyObject *",
          "16813: os__is_inputhook_installed_impl(PyObject *module)",
          "16815: {",
          "16816:     return PyBool_FromLong(PyOS_InputHook != NULL);",
          "16817: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16997:     OS__PATH_LEXISTS_METHODDEF",
          "16999:     OS__SUPPORTS_VIRTUAL_TERMINAL_METHODDEF",
          "17001: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17031:     OS__INPUTHOOK_METHODDEF",
          "17032:     OS__IS_INPUTHOOK_INSTALLED_METHODDEF",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e370b642ea98a0444137654a3c66d3b697e91f68",
      "candidate_info": {
        "commit_hash": "e370b642ea98a0444137654a3c66d3b697e91f68",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e370b642ea98a0444137654a3c66d3b697e91f68",
        "files": [
          "Misc/NEWS.d/next/Build/2024-05-19-22-54-55.gh-issue-115119.DwMwev.rst",
          "configure",
          "configure.ac"
        ],
        "message": "[3.13] gh-115119: Fall back to bundled libmpdec if system libmpdec is not found (GH-119196) (#119217)\n\n(cherry picked from commit 642b25b9a82c368b045709f0b94e7d5a02400ed2)\n\nCo-authored-by: Erlend E. Aasland <erlend@python.org>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3980:   [with_system_libmpdec=\"yes\"])",
          "3981: AC_MSG_RESULT([$with_system_libmpdec])",
          "3983: AS_VAR_IF(",
          "3984:   [with_system_libmpdec], [yes],",
          "3985:   [PKG_CHECK_MODULES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3983: AC_DEFUN([USE_BUNDLED_LIBMPDEC],",
          "3984:          [LIBMPDEC_CFLAGS=\"-I\\$(srcdir)/Modules/_decimal/libmpdec\"",
          "3985:           LIBMPDEC_LIBS=\"-lm \\$(LIBMPDEC_A)\"",
          "3986:           LIBMPDEC_INTERNAL=\"\\$(LIBMPDEC_HEADERS) \\$(LIBMPDEC_A)\"",
          "3987:           have_mpdec=yes",
          "3988:           with_system_libmpdec=no])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3987:     [LIBMPDEC_CFLAGS=${LIBMPDEC_CFLAGS-\"\"}",
          "3988:      LIBMPDEC_LIBS=${LIBMPDEC_LIBS-\"-lmpdec -lm\"}",
          "3989:      LIBMPDEC_INTERNAL=])],",
          "3994: AS_VAR_IF([with_system_libmpdec], [yes],",
          "3995:   [WITH_SAVE_ENV([",
          "",
          "[Removed Lines]",
          "3990:   [LIBMPDEC_CFLAGS=\"-I\\$(srcdir)/Modules/_decimal/libmpdec\"",
          "3991:    LIBMPDEC_LIBS=\"-lm \\$(LIBMPDEC_A)\"",
          "3992:    LIBMPDEC_INTERNAL=\"\\$(LIBMPDEC_HEADERS) \\$(LIBMPDEC_A)\"])",
          "",
          "[Added Lines]",
          "3997:   [USE_BUNDLED_LIBMPDEC()])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4006:       [have_mpdec=yes],",
          "4007:       [have_mpdec=no])",
          "4008:   ])],",
          "4011:      the bundled copy of libmpdecimal is scheduled for removal in Python 3.15;",
          "4012:      consider using a system installed mpdecimal library.])])])",
          "4014: AS_IF([test \"$with_system_libmpdec\" = \"yes\" && test \"$have_mpdec\" = \"no\"],",
          "4017: # Disable forced inlining in debug builds, see GH-94847",
          "4018: AS_VAR_IF(",
          "",
          "[Removed Lines]",
          "4009:   [AS_VAR_SET([have_mpdec], [yes])",
          "4010:    AC_MSG_WARN([m4_normalize([",
          "4015:       [AC_MSG_WARN([no system libmpdecimal found; unable to build _decimal])])",
          "",
          "[Added Lines]",
          "4014:   [AC_MSG_WARN([m4_normalize([",
          "4019:       [AC_MSG_WARN([m4_normalize([",
          "4020:          no system libmpdecimal found; falling back to bundled libmpdecimal",
          "4021:          (deprecated and scheduled for removal in Python 3.15)])])",
          "4022:        USE_BUNDLED_LIBMPDEC()])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a4730e95ebfceeb3a6a9b037444db3eba4d1123",
      "candidate_info": {
        "commit_hash": "8a4730e95ebfceeb3a6a9b037444db3eba4d1123",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8a4730e95ebfceeb3a6a9b037444db3eba4d1123",
        "files": [
          "Lib/test/test_tkinter/test_misc.py"
        ],
        "message": "[3.13] Add Tkinter tests for different events (GH-118778) (GH-119091)\n\n(cherry picked from commit b6839942a8906fccdd64e749abeefe8a61ce7e03)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tkinter/test_misc.py||Lib/test/test_tkinter/test_misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tkinter/test_misc.py||Lib/test/test_tkinter/test_misc.py": [
          "File: Lib/test/test_tkinter/test_misc.py -> Lib/test/test_tkinter/test_misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:                          1.0 if self.wantobjects else '1.0')",
          "535: class BindTest(AbstractTkTest, unittest.TestCase):",
          "537:     def setUp(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: class EventTest(AbstractTkTest, unittest.TestCase):",
          "537:     def test_focus(self):",
          "538:         f = tkinter.Frame(self.root, width=150, height=100)",
          "539:         f.pack()",
          "540:         self.root.wait_visibility()  # needed on Windows",
          "541:         self.root.update_idletasks()",
          "543:         events = []",
          "544:         f.bind('<FocusIn>', events.append)",
          "546:         f.focus_force()",
          "547:         self.root.update()",
          "548:         self.assertEqual(len(events), 1, events)",
          "549:         e = events[0]",
          "550:         self.assertIs(e.type, tkinter.EventType.FocusIn)",
          "551:         self.assertIs(e.widget, f)",
          "552:         self.assertIsInstance(e.serial, int)",
          "553:         self.assertEqual(e.time, '??')",
          "554:         self.assertIs(e.send_event, False)",
          "555:         self.assertFalse(hasattr(e, 'focus'))",
          "556:         self.assertEqual(e.num, '??')",
          "557:         self.assertEqual(e.state, '??')",
          "558:         self.assertEqual(e.char, '??')",
          "559:         self.assertEqual(e.keycode, '??')",
          "560:         self.assertEqual(e.keysym, '??')",
          "561:         self.assertEqual(e.keysym_num, '??')",
          "562:         self.assertEqual(e.width, '??')",
          "563:         self.assertEqual(e.height, '??')",
          "564:         self.assertEqual(e.x, '??')",
          "565:         self.assertEqual(e.y, '??')",
          "566:         self.assertEqual(e.x_root, '??')",
          "567:         self.assertEqual(e.y_root, '??')",
          "568:         self.assertEqual(e.delta, 0)",
          "569:         self.assertEqual(repr(e), '<FocusIn event>')",
          "571:     def test_configure(self):",
          "572:         f = tkinter.Frame(self.root, width=150, height=100)",
          "573:         f.pack()",
          "574:         self.root.wait_visibility()  # needed on Windows",
          "575:         self.root.update_idletasks()",
          "577:         events = []",
          "578:         f.bind('<Configure>', events.append)",
          "580:         f.configure(height=120, borderwidth=10)",
          "581:         self.assertEqual(len(events), 1, events)",
          "582:         e = events[0]",
          "583:         self.assertIs(e.type, tkinter.EventType.Configure)",
          "584:         self.assertIs(e.widget, f)",
          "585:         self.assertIsInstance(e.serial, int)",
          "586:         self.assertEqual(e.time, '??')",
          "587:         self.assertIs(e.send_event, False)",
          "588:         self.assertFalse(hasattr(e, 'focus'))",
          "589:         self.assertEqual(e.num, '??')",
          "590:         self.assertEqual(e.state, '??')",
          "591:         self.assertEqual(e.char, '??')",
          "592:         self.assertEqual(e.keycode, '??')",
          "593:         self.assertEqual(e.keysym, '??')",
          "594:         self.assertEqual(e.keysym_num, '??')",
          "595:         self.assertEqual(e.width, 150)",
          "596:         self.assertEqual(e.height, 100)",
          "597:         self.assertEqual(e.x, 0)",
          "598:         self.assertEqual(e.y, 0)",
          "599:         self.assertEqual(e.x_root, '??')",
          "600:         self.assertEqual(e.y_root, '??')",
          "601:         self.assertEqual(e.delta, 0)",
          "602:         self.assertEqual(repr(e), '<Configure event x=0 y=0 width=150 height=100>')",
          "604:     def test_event_generate_key_press(self):",
          "605:         f = tkinter.Frame(self.root, width=150, height=100)",
          "606:         f.pack()",
          "607:         self.root.wait_visibility()  # needed on Windows",
          "608:         self.root.update_idletasks()",
          "610:         events = []",
          "611:         f.bind('<KeyPress>', events.append)",
          "612:         f.focus_force()",
          "614:         f.event_generate('<Alt-z>')",
          "615:         self.assertEqual(len(events), 1, events)",
          "616:         e = events[0]",
          "617:         self.assertIs(e.type, tkinter.EventType.KeyPress)",
          "618:         self.assertIs(e.widget, f)",
          "619:         self.assertIsInstance(e.serial, int)",
          "620:         self.assertEqual(e.time, 0)",
          "621:         self.assertIs(e.send_event, False)",
          "622:         self.assertFalse(hasattr(e, 'focus'))",
          "623:         self.assertEqual(e.num, '??')",
          "624:         self.assertIsInstance(e.state, int)",
          "625:         self.assertNotEqual(e.state, 0)",
          "626:         self.assertEqual(e.char, 'z')",
          "627:         self.assertIsInstance(e.keycode, int)",
          "628:         self.assertNotEqual(e.keycode, 0)",
          "629:         self.assertEqual(e.keysym, 'z')",
          "630:         self.assertEqual(e.keysym_num, ord('z'))",
          "631:         self.assertEqual(e.width, '??')",
          "632:         self.assertEqual(e.height, '??')",
          "633:         self.assertEqual(e.x, -1 - f.winfo_rootx())",
          "634:         self.assertEqual(e.y, -1 - f.winfo_rooty())",
          "635:         self.assertEqual(e.x_root, -1)",
          "636:         self.assertEqual(e.y_root, -1)",
          "637:         self.assertEqual(e.delta, 0)",
          "638:         self.assertEqual(repr(e),",
          "639:             f\"<KeyPress event state={e.state:#x} \"",
          "640:             f\"keysym=z keycode={e.keycode} char='z' x={e.x} y={e.y}>\")",
          "642:     def test_event_generate_enter(self):",
          "643:         f = tkinter.Frame(self.root, width=150, height=100)",
          "644:         f.pack()",
          "645:         self.root.wait_visibility()  # needed on Windows",
          "646:         self.root.update_idletasks()",
          "648:         events = []",
          "649:         f.bind('<Enter>', events.append)",
          "651:         f.event_generate('<Enter>', x=100, y=50)",
          "652:         self.assertEqual(len(events), 1, events)",
          "653:         e = events[0]",
          "654:         self.assertIs(e.type, tkinter.EventType.Enter)",
          "655:         self.assertIs(e.widget, f)",
          "656:         self.assertIsInstance(e.serial, int)",
          "657:         self.assertEqual(e.time, 0)",
          "658:         self.assertIs(e.send_event, False)",
          "659:         self.assertIs(e.focus, False)",
          "660:         self.assertEqual(e.num, '??')",
          "661:         self.assertEqual(e.state, 0)",
          "662:         self.assertEqual(e.char, '??')",
          "663:         self.assertEqual(e.keycode, '??')",
          "664:         self.assertEqual(e.keysym, '??')",
          "665:         self.assertEqual(e.keysym_num, '??')",
          "666:         self.assertEqual(e.width, '??')",
          "667:         self.assertEqual(e.height, '??')",
          "668:         self.assertEqual(e.x, 100)",
          "669:         self.assertEqual(e.y, 50)",
          "670:         self.assertEqual(e.x_root, 100 + f.winfo_rootx())",
          "671:         self.assertEqual(e.y_root, 50 + f.winfo_rooty())",
          "672:         self.assertEqual(e.delta, 0)",
          "673:         self.assertEqual(repr(e), '<Enter event focus=False x=100 y=50>')",
          "675:     def test_event_generate_button_press(self):",
          "676:         f = tkinter.Frame(self.root, width=150, height=100)",
          "677:         f.pack()",
          "678:         self.root.wait_visibility()  # needed on Windows",
          "679:         self.root.update_idletasks()",
          "681:         events = []",
          "682:         f.bind('<ButtonPress>', events.append)",
          "683:         f.focus_force()",
          "685:         f.event_generate('<Button-1>', x=100, y=50)",
          "686:         self.assertEqual(len(events), 1, events)",
          "687:         e = events[0]",
          "688:         self.assertIs(e.type, tkinter.EventType.ButtonPress)",
          "689:         self.assertIs(e.widget, f)",
          "690:         self.assertIsInstance(e.serial, int)",
          "691:         self.assertEqual(e.time, 0)",
          "692:         self.assertIs(e.send_event, False)",
          "693:         self.assertFalse(hasattr(e, 'focus'))",
          "694:         self.assertEqual(e.num, 1)",
          "695:         self.assertEqual(e.state, 0)",
          "696:         self.assertEqual(e.char, '??')",
          "697:         self.assertEqual(e.keycode, '??')",
          "698:         self.assertEqual(e.keysym, '??')",
          "699:         self.assertEqual(e.keysym_num, '??')",
          "700:         self.assertEqual(e.width, '??')",
          "701:         self.assertEqual(e.height, '??')",
          "702:         self.assertEqual(e.x, 100)",
          "703:         self.assertEqual(e.y, 50)",
          "704:         self.assertEqual(e.x_root, f.winfo_rootx() + 100)",
          "705:         self.assertEqual(e.y_root, f.winfo_rooty() + 50)",
          "706:         self.assertEqual(e.delta, 0)",
          "707:         self.assertEqual(repr(e), '<ButtonPress event num=1 x=100 y=50>')",
          "709:     def test_event_generate_motion(self):",
          "710:         f = tkinter.Frame(self.root, width=150, height=100)",
          "711:         f.pack()",
          "712:         self.root.wait_visibility()  # needed on Windows",
          "713:         self.root.update_idletasks()",
          "715:         events = []",
          "716:         f.bind('<Motion>', events.append)",
          "717:         f.focus_force()",
          "719:         f.event_generate('<B1-Motion>', x=100, y=50)",
          "720:         self.assertEqual(len(events), 1, events)",
          "721:         e = events[0]",
          "722:         self.assertIs(e.type, tkinter.EventType.Motion)",
          "723:         self.assertIs(e.widget, f)",
          "724:         self.assertIsInstance(e.serial, int)",
          "725:         self.assertEqual(e.time, 0)",
          "726:         self.assertIs(e.send_event, False)",
          "727:         self.assertFalse(hasattr(e, 'focus'))",
          "728:         self.assertEqual(e.num, '??')",
          "729:         self.assertEqual(e.state, 0x100)",
          "730:         self.assertEqual(e.char, '??')",
          "731:         self.assertEqual(e.keycode, '??')",
          "732:         self.assertEqual(e.keysym, '??')",
          "733:         self.assertEqual(e.keysym_num, '??')",
          "734:         self.assertEqual(e.width, '??')",
          "735:         self.assertEqual(e.height, '??')",
          "736:         self.assertEqual(e.x, 100)",
          "737:         self.assertEqual(e.y, 50)",
          "738:         self.assertEqual(e.x_root, f.winfo_rootx() + 100)",
          "739:         self.assertEqual(e.y_root, f.winfo_rooty() + 50)",
          "740:         self.assertEqual(e.delta, 0)",
          "741:         self.assertEqual(repr(e), '<Motion event state=Button1 x=100 y=50>')",
          "743:     def test_event_generate_mouse_wheel(self):",
          "744:         f = tkinter.Frame(self.root, width=150, height=100)",
          "745:         f.pack()",
          "746:         self.root.wait_visibility()  # needed on Windows",
          "747:         self.root.update_idletasks()",
          "749:         events = []",
          "750:         f.bind('<MouseWheel>', events.append)",
          "751:         f.focus_force()",
          "753:         f.event_generate('<MouseWheel>', x=100, y=50, delta=-5)",
          "754:         self.assertEqual(len(events), 1, events)",
          "755:         e = events[0]",
          "756:         self.assertIs(e.type, tkinter.EventType.MouseWheel)",
          "757:         self.assertIs(e.widget, f)",
          "758:         self.assertIsInstance(e.serial, int)",
          "759:         self.assertIs(e.send_event, False)",
          "760:         self.assertFalse(hasattr(e, 'focus'))",
          "761:         self.assertEqual(e.time, 0)",
          "762:         self.assertEqual(e.num, '??')",
          "763:         self.assertEqual(e.state, 0)",
          "764:         self.assertEqual(e.char, '??')",
          "765:         self.assertEqual(e.keycode, '??')",
          "766:         self.assertEqual(e.keysym, '??')",
          "767:         self.assertEqual(e.keysym_num, '??')",
          "768:         self.assertEqual(e.width, '??')",
          "769:         self.assertEqual(e.height, '??')",
          "770:         self.assertEqual(e.x, 100)",
          "771:         self.assertEqual(e.y, 50)",
          "772:         self.assertEqual(e.x_root, f.winfo_rootx() + 100)",
          "773:         self.assertEqual(e.y_root, f.winfo_rooty() + 50)",
          "774:         self.assertEqual(e.delta, -5)",
          "775:         self.assertEqual(repr(e), '<MouseWheel event delta=-5 x=100 y=50>')",
          "777:     def test_generate_event_virtual_event(self):",
          "778:         f = tkinter.Frame(self.root, width=150, height=100)",
          "779:         f.pack()",
          "780:         self.root.wait_visibility()  # needed on Windows",
          "781:         self.root.update_idletasks()",
          "783:         events = []",
          "784:         f.bind('<<Spam>>', events.append)",
          "785:         f.focus_force()",
          "787:         f.event_generate('<<Spam>>', x=50)",
          "788:         self.assertEqual(len(events), 1, events)",
          "789:         e = events[0]",
          "790:         self.assertIs(e.type, tkinter.EventType.VirtualEvent)",
          "791:         self.assertIs(e.widget, f)",
          "792:         self.assertIsInstance(e.serial, int)",
          "793:         self.assertEqual(e.time, 0)",
          "794:         self.assertIs(e.send_event, False)",
          "795:         self.assertFalse(hasattr(e, 'focus'))",
          "796:         self.assertEqual(e.num, '??')",
          "797:         self.assertEqual(e.state, 0)",
          "798:         self.assertEqual(e.char, '??')",
          "799:         self.assertEqual(e.keycode, '??')",
          "800:         self.assertEqual(e.keysym, '??')",
          "801:         self.assertEqual(e.keysym_num, '??')",
          "802:         self.assertEqual(e.width, '??')",
          "803:         self.assertEqual(e.height, '??')",
          "804:         self.assertEqual(e.x, 50)",
          "805:         self.assertEqual(e.y, 0)",
          "806:         self.assertEqual(e.x_root, f.winfo_rootx() + 50)",
          "807:         self.assertEqual(e.y_root, -1)",
          "808:         self.assertEqual(e.delta, 0)",
          "809:         self.assertEqual(repr(e),",
          "810:             f\"<VirtualEvent event x=50 y=0>\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}