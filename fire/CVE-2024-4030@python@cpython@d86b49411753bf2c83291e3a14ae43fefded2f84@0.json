{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "d3094744d40de2deefbda9b1996d5029c9ebf0b0",
      "candidate_info": {
        "commit_hash": "d3094744d40de2deefbda9b1996d5029c9ebf0b0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d3094744d40de2deefbda9b1996d5029c9ebf0b0",
        "files": [
          "Lib/test/datetimetester.py",
          "Lib/test/test_strptime.py"
        ],
        "message": "[3.13] gh-117655: Prevent `test_strptime` from raising a DeprecationWarning (GH-117668) (GH-118956)\n\ngh-117655: Prevent `test_strptime` from raising a DeprecationWarning (GH-117668)\n\n* Fix `test_strptime` raises a DeprecationWarning\n* Ignore deprecation warnings where appropriate.\n* Update Lib/test/datetimetester.py\n\nThis is follow on work to silence unnecessary warnings from the test suite that changes for https://github.com/python/cpython/issues/70647 added.\n(cherry picked from commit abead548af0172dabba13da8bacf2da3c02d4927)\n\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>",
        "before_after_code_files": [
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Lib/test/test_strptime.py||Lib/test/test_strptime.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from test import support",
          "24: from test.support import is_resource_enabled, ALWAYS_EQ, LARGEST, SMALLEST",
          "26: import datetime as datetime_module",
          "27: from datetime import MINYEAR, MAXYEAR",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from test.support import warnings_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2797:                 newdate = strptime(string, format)",
          "2798:                 self.assertEqual(newdate, target, msg=reason)",
          "2800:     def test_strptime_leap_year(self):",
          "2801:         # GH-70647: warns if parsing a format with a day and no year.",
          "2802:         with self.assertRaises(ValueError):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2801:     @warnings_helper.ignore_warnings(category=DeprecationWarning)",
          "",
          "---------------"
        ],
        "Lib/test/test_strptime.py||Lib/test/test_strptime.py": [
          "File: Lib/test/test_strptime.py -> Lib/test/test_strptime.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import os",
          "8: import sys",
          "9: from test import support",
          "11: from datetime import date as datetime_date",
          "13: import _strptime",
          "",
          "[Removed Lines]",
          "10: from test.support import skip_if_buggy_ucrt_strfptime",
          "",
          "[Added Lines]",
          "10: from test.support import skip_if_buggy_ucrt_strfptime, warnings_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:     def test_pattern(self):",
          "122:         # Test TimeRE.pattern",
          "124:         self.assertTrue(pattern_string.find(self.locale_time.a_weekday[2]) != -1,",
          "125:                         \"did not find abbreviated weekday in pattern string '%s'\" %",
          "126:                          pattern_string)",
          "",
          "[Removed Lines]",
          "123:         pattern_string = self.time_re.pattern(r\"%a %A %d\")",
          "",
          "[Added Lines]",
          "123:         pattern_string = self.time_re.pattern(r\"%a %A %d %Y\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:                           found.group('b')))",
          "161:         for directive in ('a','A','b','B','c','d','G','H','I','j','m','M','p',",
          "162:                           'S','u','U','V','w','W','x','X','y','Y','Z','%'):",
          "165:             self.assertTrue(found, \"Matching failed on '%s' using '%s' regex\" %",
          "167:                                      compiled.pattern))",
          "169:     def test_blankpattern(self):",
          "",
          "[Removed Lines]",
          "163:             compiled = self.time_re.compile(\"%\" + directive)",
          "164:             found = compiled.match(time.strftime(\"%\" + directive))",
          "166:                                     (time.strftime(\"%\" + directive),",
          "",
          "[Added Lines]",
          "163:             fmt = \"%d %Y\" if directive == 'd' else \"%\" + directive",
          "164:             compiled = self.time_re.compile(fmt)",
          "165:             found = compiled.match(time.strftime(fmt))",
          "167:                                     (time.strftime(fmt),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291:     def helper(self, directive, position):",
          "292:         \"\"\"Helper fxn in testing.\"\"\"",
          "295:         self.assertTrue(strp_output[position] == self.time_tuple[position],",
          "296:                         \"testing of '%s' directive failed; '%s' -> %s != %s\" %",
          "297:                          (directive, strf_output, strp_output[position],",
          "",
          "[Removed Lines]",
          "293:         strf_output = time.strftime(\"%\" + directive, self.time_tuple)",
          "294:         strp_output = _strptime._strptime_time(strf_output, \"%\" + directive)",
          "",
          "[Added Lines]",
          "294:         fmt = \"%d %Y\" if directive == 'd' else \"%\" + directive",
          "295:         strf_output = time.strftime(fmt, self.time_tuple)",
          "296:         strp_output = _strptime._strptime_time(strf_output, fmt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "497:         need_escaping = r\".^$*+?{}\\[]|)(\"",
          "498:         self.assertTrue(_strptime._strptime_time(need_escaping, need_escaping))",
          "500:     def test_feb29_on_leap_year_without_year(self):",
          "501:         time.strptime(\"Feb 29\", \"%b %d\")",
          "503:     def test_mar1_comes_after_feb29_even_when_omitting_the_year(self):",
          "504:         self.assertLess(",
          "505:                 time.strptime(\"Feb 29\", \"%b %d\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:     @warnings_helper.ignore_warnings(category=DeprecationWarning)  # gh-70647",
          "506:     @warnings_helper.ignore_warnings(category=DeprecationWarning)  # gh-70647",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "679:     def test_time_re_recreation(self):",
          "680:         # Make sure cache is recreated when current locale does not match what",
          "681:         # cached object was created with.",
          "683:         _strptime._strptime_time(\"2005\", \"%Y\")",
          "684:         _strptime._TimeRE_cache.locale_time.lang = \"Ni\"",
          "685:         original_time_re = _strptime._TimeRE_cache",
          "687:         self.assertIsNot(original_time_re, _strptime._TimeRE_cache)",
          "688:         self.assertEqual(len(_strptime._regex_cache), 1)",
          "690:     def test_regex_cleanup(self):",
          "691:         # Make sure cached regexes are discarded when cache becomes \"full\".",
          "692:         try:",
          "694:         except KeyError:",
          "695:             pass",
          "696:         bogus_key = 0",
          "697:         while len(_strptime._regex_cache) <= _strptime._CACHE_MAX_SIZE:",
          "698:             _strptime._regex_cache[bogus_key] = None",
          "699:             bogus_key += 1",
          "701:         self.assertEqual(len(_strptime._regex_cache), 1)",
          "703:     def test_new_localetime(self):",
          "",
          "[Removed Lines]",
          "682:         _strptime._strptime_time(\"10\", \"%d\")",
          "686:         _strptime._strptime_time(\"10\", \"%d\")",
          "693:             del _strptime._regex_cache['%d']",
          "700:         _strptime._strptime_time(\"10\", \"%d\")",
          "",
          "[Added Lines]",
          "686:         _strptime._strptime_time(\"10 2004\", \"%d %Y\")",
          "690:         _strptime._strptime_time(\"10 2004\", \"%d %Y\")",
          "697:             del _strptime._regex_cache['%d %Y']",
          "704:         _strptime._strptime_time(\"10 2004\", \"%d %Y\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "705:         # is created.",
          "706:         locale_time_id = _strptime._TimeRE_cache.locale_time",
          "707:         _strptime._TimeRE_cache.locale_time.lang = \"Ni\"",
          "709:         self.assertIsNot(locale_time_id, _strptime._TimeRE_cache.locale_time)",
          "711:     def test_TimeRE_recreation_locale(self):",
          "",
          "[Removed Lines]",
          "708:         _strptime._strptime_time(\"10\", \"%d\")",
          "",
          "[Added Lines]",
          "712:         _strptime._strptime_time(\"10 2004\", \"%d %Y\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "716:         except locale.Error:",
          "717:             self.skipTest('test needs en_US.UTF8 locale')",
          "718:         try:",
          "720:             # Get id of current cache object.",
          "721:             first_time_re = _strptime._TimeRE_cache",
          "722:             try:",
          "723:                 # Change the locale and force a recreation of the cache.",
          "724:                 locale.setlocale(locale.LC_TIME, ('de_DE', 'UTF8'))",
          "726:                 # Get the new cache object's id.",
          "727:                 second_time_re = _strptime._TimeRE_cache",
          "728:                 # They should not be equal.",
          "",
          "[Removed Lines]",
          "719:             _strptime._strptime_time('10', '%d')",
          "725:                 _strptime._strptime_time('10', '%d')",
          "",
          "[Added Lines]",
          "723:             _strptime._strptime_time('10 2004', '%d %Y')",
          "729:                 _strptime._strptime_time('10 2004', '%d %Y')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5dfcea3e32f02cc740d7cb96f36f8327f3650bd",
      "candidate_info": {
        "commit_hash": "e5dfcea3e32f02cc740d7cb96f36f8327f3650bd",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e5dfcea3e32f02cc740d7cb96f36f8327f3650bd",
        "files": [
          "Objects/unicodeobject.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Fix data races report by TSAN unicode-hash (gh-119907) (gh-119963)\n\ngh-117657: Fix data races report by TSAN unicode-hash (gh-119907)\n(cherry picked from commit 0594a27e5f1d87d59fa8a761dd8ca9df4e42816d)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Objects/unicodeobject.c||Objects/unicodeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/unicodeobject.c||Objects/unicodeobject.c": [
          "File: Objects/unicodeobject.c -> Objects/unicodeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1625:     assert(_PyUnicode_CHECK(unicode));",
          "1626:     if (Py_REFCNT(unicode) != 1)",
          "1627:         return 0;",
          "1629:         return 0;",
          "1630:     if (PyUnicode_CHECK_INTERNED(unicode))",
          "1631:         return 0;",
          "",
          "[Removed Lines]",
          "1628:     if (_PyUnicode_HASH(unicode) != -1)",
          "",
          "[Added Lines]",
          "1628:     if (FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(unicode)) != -1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10819:     if (PyUnicode_CHECK_INTERNED(left))",
          "10820:         return 0;",
          "10825:         return 0;",
          "10826:     }",
          "",
          "[Removed Lines]",
          "10822:     assert(_PyUnicode_HASH(right_uni) != -1);",
          "10823:     Py_hash_t hash = _PyUnicode_HASH(left);",
          "10824:     if (hash != -1 && hash != _PyUnicode_HASH(right_uni)) {",
          "",
          "[Added Lines]",
          "10822:     Py_hash_t right_hash = FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(right_uni));",
          "10823:     assert(right_hash != -1);",
          "10824:     Py_hash_t hash = FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(left));",
          "10825:     if (hash != -1 && hash != right_hash) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11306: #ifdef Py_DEBUG",
          "11307:     assert(_Py_HashSecret_Initialized);",
          "11308: #endif",
          "11312:     x = _Py_HashBytes(PyUnicode_DATA(self),",
          "11313:                       PyUnicode_GET_LENGTH(self) * PyUnicode_KIND(self));",
          "11315:     return x;",
          "11316: }",
          "",
          "[Removed Lines]",
          "11309:     if (_PyUnicode_HASH(self) != -1)",
          "11310:         return _PyUnicode_HASH(self);",
          "11314:     _PyUnicode_HASH(self) = x;",
          "",
          "[Added Lines]",
          "11310:     Py_hash_t hash = FT_ATOMIC_LOAD_SSIZE_RELAXED(_PyUnicode_HASH(self));",
          "11311:     if (hash != -1) {",
          "11312:         return hash;",
          "11313:     }",
          "11317:     FT_ATOMIC_STORE_SSIZE_RELAXED(_PyUnicode_HASH(self), x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5441f6aacc1eab69ad539445568a2ef779cb267",
      "candidate_info": {
        "commit_hash": "d5441f6aacc1eab69ad539445568a2ef779cb267",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d5441f6aacc1eab69ad539445568a2ef779cb267",
        "files": [
          "Python/pylifecycle.c"
        ],
        "message": "[3.13] gh-120837: Update _Py_DumpExtensionModules to be async-signal-safe (gh-121051) (gh-121107)\n\ngh-120837: Update _Py_DumpExtensionModules to be async-signal-safe (gh-121051)\n(cherry picked from commit 1a2e7a747540f74414e7c50556bcb2cc127e9d1c)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Python/pylifecycle.c||Python/pylifecycle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3036:     }",
          "3037: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3039: static inline int",
          "3040: acquire_dict_lock_for_dump(PyObject *obj)",
          "3041: {",
          "3042: #ifdef Py_GIL_DISABLED",
          "3043:     PyMutex *mutex = &obj->ob_mutex;",
          "3044:     if (_PyMutex_LockTimed(mutex, 0, 0) == PY_LOCK_ACQUIRED) {",
          "3045:         return 1;",
          "3046:     }",
          "3047:     return 0;",
          "3048: #else",
          "3049:     return 1;",
          "3050: #endif",
          "3051: }",
          "3053: static inline void",
          "3054: release_dict_lock_for_dump(PyObject *obj)",
          "3055: {",
          "3056: #ifdef Py_GIL_DISABLED",
          "3057:     PyMutex *mutex = &obj->ob_mutex;",
          "3060:     _Py_atomic_store_uint8(&mutex->_bits, _Py_UNLOCKED);",
          "3061: #endif",
          "3062: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3063:     PyObject *stdlib_module_names = NULL;",
          "3064:     if (interp->sysdict != NULL) {",
          "3065:         pos = 0;",
          "3067:             if (PyUnicode_Check(key)",
          "3068:                && PyUnicode_CompareWithASCIIString(key, \"stdlib_module_names\") == 0) {",
          "3069:                 stdlib_module_names = value;",
          "3070:                 break;",
          "3071:             }",
          "3072:         }",
          "3073:     }",
          "",
          "[Removed Lines]",
          "3066:         while (PyDict_Next(interp->sysdict, &pos, &key, &value)) {",
          "",
          "[Added Lines]",
          "3090:         if (!acquire_dict_lock_for_dump(interp->sysdict)) {",
          "3092:             return;",
          "3093:         }",
          "3094:         while (_PyDict_Next(interp->sysdict, &pos, &key, &value, NULL)) {",
          "3101:         release_dict_lock_for_dump(interp->sysdict);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3081:     int header = 1;",
          "3082:     Py_ssize_t count = 0;",
          "3083:     pos = 0;",
          "3085:         if (!PyUnicode_Check(key)) {",
          "3086:             continue;",
          "3087:         }",
          "",
          "[Removed Lines]",
          "3084:     while (PyDict_Next(modules, &pos, &key, &value)) {",
          "",
          "[Added Lines]",
          "3113:     if (!acquire_dict_lock_for_dump(modules)) {",
          "3115:         return;",
          "3116:     }",
          "3117:     while (_PyDict_Next(modules, &pos, &key, &value, NULL)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3122:         _Py_DumpASCII(fd, key);",
          "3123:         count++;",
          "3124:     }",
          "3126:     if (count) {",
          "3127:         PUTS(fd, \" (total: \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3158:     release_dict_lock_for_dump(modules);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6892b400dc8c95375ef31f6d716d62a6ff0c4cf2",
      "candidate_info": {
        "commit_hash": "6892b400dc8c95375ef31f6d716d62a6ff0c4cf2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6892b400dc8c95375ef31f6d716d62a6ff0c4cf2",
        "files": [
          "Lib/email/_header_value_parser.py",
          "Lib/test/test_email/test__header_value_parser.py",
          "Misc/NEWS.d/next/Library/2024-05-16-17-31-46.gh-issue-118643.hAWH4C.rst"
        ],
        "message": "[3.13] gh-118643: Fix AttributeError in the email module (GH-119099) (GH-119389)\n\nFix regression introduced in gh-100884: AttributeError when re-fold a long\naddress list.\n\nAlso fix more cases of incorrect encoding of the address separator in the\naddress list missed in gh-100884.\n(cherry picked from commit 858b9e85fcdd495947c9e892ce6e3734652c48f2)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/email/_header_value_parser.py||Lib/email/_header_value_parser.py",
          "Lib/test/test_email/test__header_value_parser.py||Lib/test/test_email/test__header_value_parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/email/_header_value_parser.py||Lib/email/_header_value_parser.py": [
          "File: Lib/email/_header_value_parser.py -> Lib/email/_header_value_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "956: DOT = ValueTerminal('.', 'dot')",
          "957: ListSeparator = ValueTerminal(',', 'list-separator')",
          "958: ListSeparator.as_ew_allowed = False",
          "959: RouteComponentMarker = ValueTerminal('@', 'route-component-marker')",
          "961: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959: ListSeparator.syntactic_break = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2844:             if not hasattr(part, 'encode'):",
          "2845:                 # It's not a Terminal, do each piece individually.",
          "2846:                 parts = list(part) + parts",
          "2848:                 # It's a terminal, wrap it as an encoded word, possibly",
          "2849:                 # combining it with previously encoded words if allowed.",
          "2850:                 if (last_ew is not None and",
          "",
          "[Removed Lines]",
          "2847:             else:",
          "",
          "[Added Lines]",
          "2848:                 want_encoding = False",
          "2849:                 continue",
          "2850:             elif part.as_ew_allowed:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2858:                 # so clear it now.",
          "2859:                 leading_whitespace = ''",
          "2860:                 last_charset = charset",
          "2864:         if len(tstr) <= maxlen - len(lines[-1]):",
          "2865:             lines[-1] += tstr",
          "",
          "[Removed Lines]",
          "2861:             want_encoding = False",
          "2862:             continue",
          "",
          "[Added Lines]",
          "2864:                 want_encoding = False",
          "2865:                 continue",
          "2866:             else:",
          "2867:                 # It's a terminal which should be kept non-encoded",
          "2868:                 # (e.g. a ListSeparator).",
          "2869:                 last_ew = None",
          "2870:                 want_encoding = False",
          "2871:                 # fall through",
          "",
          "---------------"
        ],
        "Lib/test/test_email/test__header_value_parser.py||Lib/test/test_email/test__header_value_parser.py": [
          "File: Lib/test/test_email/test__header_value_parser.py -> Lib/test/test_email/test__header_value_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3077:                 ' =?utf-8?q?bei=C3=9Ft_bei=C3=9Ft?= <biter@example.com>\\n')",
          "3079:     def test_address_list_with_list_separator_after_fold(self):",
          "3081:         self._test(parser.get_address_list(to)[0],",
          "3084:     # XXX Need tests with comments on various sides of a unicode token,",
          "3085:     # and with unicode tokens in the comments.  Spaces inside the quotes",
          "",
          "[Removed Lines]",
          "3080:         to = '0123456789' * 8 + '@foo, \u00e4 <foo@bar>'",
          "3082:                    '0123456789' * 8 + '@foo,\\n =?utf-8?q?=C3=A4?= <foo@bar>\\n')",
          "",
          "[Added Lines]",
          "3080:         a = 'x' * 66 + '@example.com'",
          "3081:         to = f'{a}, \"H\u00fcbsch Kaktus\" <beautiful@example.com>'",
          "3083:             f'{a},\\n =?utf-8?q?H=C3=BCbsch?= Kaktus <beautiful@example.com>\\n')",
          "3085:         a = '.' * 79",
          "3086:         to = f'\"{a}\" <xyz@example.com>, \"H\u00fcbsch Kaktus\" <beautiful@example.com>'",
          "3087:         self._test(parser.get_address_list(to)[0],",
          "3088:             f'{a}\\n'",
          "3089:             ' <xyz@example.com>, =?utf-8?q?H=C3=BCbsch?= Kaktus '",
          "3090:             '<beautiful@example.com>\\n')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e26e0985d94f1b9812cf41f043df89185f247945",
      "candidate_info": {
        "commit_hash": "e26e0985d94f1b9812cf41f043df89185f247945",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e26e0985d94f1b9812cf41f043df89185f247945",
        "files": [
          "Include/Python.h",
          "Include/cpython/code.h",
          "Include/cpython/optimizer.h",
          "Include/internal/pycore_backoff.h",
          "Include/internal/pycore_code.h",
          "Include/internal/pycore_interp.h",
          "Include/internal/pycore_optimizer.h",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/C API/2024-06-19-21-27-42.gh-issue-120642.UlKClN.rst",
          "Misc/NEWS.d/next/C API/2024-06-26-11-29-01.gh-issue-120642.H7P9qK.rst",
          "Modules/_opcode.c",
          "Modules/_testinternalcapi.c",
          "PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters",
          "Python/optimizer.c",
          "Python/optimizer_analysis.c",
          "Python/optimizer_symbols.c",
          "Python/pylifecycle.c"
        ],
        "message": "[3.13] gh-120642: Move private PyCode APIs to the internal C API (#120643) (#121043)\n\ngh-120642: Move private PyCode APIs to the internal C API (#120643)\n\n* Move _Py_CODEUNIT and related functions to pycore_code.h.\n* Move _Py_BackoffCounter to pycore_backoff.h.\n* Move Include/cpython/optimizer.h content to pycore_optimizer.h.\n* Remove Include/cpython/optimizer.h.\n* Remove PyUnstable_Replace_Executor().\n\nRename functions:\n\n* PyUnstable_GetExecutor() => _Py_GetExecutor()\n* PyUnstable_GetOptimizer() => _Py_GetOptimizer()\n* PyUnstable_SetOptimizer() => _Py_SetTier2Optimizer()\n* PyUnstable_Optimizer_NewCounter() => _PyOptimizer_NewCounter()\n* PyUnstable_Optimizer_NewUOpOptimizer() => _PyOptimizer_NewUOpOptimizer()\n\n(cherry picked from commit 9e4a81f00fef689c6e18a64245aa064eaadc7ac7)",
        "before_after_code_files": [
          "Include/Python.h||Include/Python.h",
          "Include/cpython/code.h||Include/cpython/code.h",
          "Include/cpython/optimizer.h||Include/cpython/optimizer.h",
          "Include/internal/pycore_backoff.h||Include/internal/pycore_backoff.h",
          "Include/internal/pycore_code.h||Include/internal/pycore_code.h",
          "Include/internal/pycore_interp.h||Include/internal/pycore_interp.h",
          "Include/internal/pycore_optimizer.h||Include/internal/pycore_optimizer.h",
          "Makefile.pre.in||Makefile.pre.in",
          "Modules/_opcode.c||Modules/_opcode.c",
          "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c",
          "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj",
          "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters",
          "Python/optimizer.c||Python/optimizer.c",
          "Python/optimizer_analysis.c||Python/optimizer_analysis.c",
          "Python/optimizer_symbols.c||Python/optimizer_symbols.c",
          "Python/pylifecycle.c||Python/pylifecycle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/Python.h||Include/Python.h": [
          "File: Include/Python.h -> Include/Python.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: #include \"fileutils.h\"",
          "132: #include \"cpython/pyfpe.h\"",
          "133: #include \"cpython/tracemalloc.h\"",
          "",
          "[Removed Lines]",
          "134: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/cpython/code.h||Include/cpython/code.h": [
          "File: Include/cpython/code.h -> Include/cpython/code.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     uint8_t tools[_PY_MONITORING_UNGROUPED_EVENTS];",
          "25: } _Py_GlobalMonitors;",
          "80: typedef struct {",
          "81:     PyObject *_co_code;",
          "",
          "[Removed Lines]",
          "27: typedef struct {",
          "28:     union {",
          "29:         struct {",
          "30:             uint16_t backoff : 4;",
          "31:             uint16_t value : 12;",
          "32:         };",
          "33:         uint16_t as_counter;  // For printf(\"%#x\", ...)",
          "34:     };",
          "35: } _Py_BackoffCounter;",
          "46: typedef union {",
          "47:     uint16_t cache;",
          "48:     struct {",
          "49:         uint8_t code;",
          "50:         uint8_t arg;",
          "51:     } op;",
          "52:     _Py_BackoffCounter counter;  // First cache entry of specializable op",
          "53: } _Py_CODEUNIT;",
          "57: #define _Py_OPCODE(word) ((word).op.code)",
          "58: #define _Py_OPARG(word) ((word).op.arg)",
          "60: static inline _Py_CODEUNIT",
          "61: _py_make_codeunit(uint8_t opcode, uint8_t oparg)",
          "62: {",
          "64:     _Py_CODEUNIT word;",
          "65:     word.op.code = opcode;",
          "66:     word.op.arg = oparg;",
          "67:     return word;",
          "68: }",
          "70: static inline void",
          "71: _py_set_opcode(_Py_CODEUNIT *word, uint8_t opcode)",
          "72: {",
          "73:     word->op.code = opcode;",
          "74: }",
          "76: #define _Py_MAKE_CODEUNIT(opcode, oparg) _py_make_codeunit((opcode), (oparg))",
          "77: #define _Py_SET_OPCODE(word, opcode) _py_set_opcode(&(word), (opcode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/cpython/optimizer.h||Include/cpython/optimizer.h": [
          "File: Include/cpython/optimizer.h -> Include/cpython/optimizer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Include/internal/pycore_backoff.h||Include/internal/pycore_backoff.h": [
          "File: Include/internal/pycore_backoff.h -> Include/internal/pycore_backoff.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <stdbool.h>",
          "14: #include <stdint.h>",
          "18:    These are used by the adaptive specializer to count down until",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: typedef struct {",
          "18:     union {",
          "19:         struct {",
          "20:             uint16_t backoff : 4;",
          "21:             uint16_t value : 12;",
          "22:         };",
          "23:         uint16_t as_counter;  // For printf(\"%#x\", ...)",
          "24:     };",
          "25: } _Py_BackoffCounter;",
          "",
          "---------------"
        ],
        "Include/internal/pycore_code.h||Include/internal/pycore_code.h": [
          "File: Include/internal/pycore_code.h -> Include/internal/pycore_code.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #endif",
          "11: #include \"pycore_lock.h\"        // PyMutex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"pycore_backoff.h\"     // _Py_BackoffCounter",
          "24: typedef union {",
          "25:     uint16_t cache;",
          "26:     struct {",
          "27:         uint8_t code;",
          "28:         uint8_t arg;",
          "29:     } op;",
          "30:     _Py_BackoffCounter counter;  // First cache entry of specializable op",
          "31: } _Py_CODEUNIT;",
          "35: #define _Py_OPCODE(word) ((word).op.code)",
          "36: #define _Py_OPARG(word) ((word).op.arg)",
          "38: static inline _Py_CODEUNIT",
          "39: _py_make_codeunit(uint8_t opcode, uint8_t oparg)",
          "40: {",
          "42:     _Py_CODEUNIT word;",
          "43:     word.op.code = opcode;",
          "44:     word.op.arg = oparg;",
          "45:     return word;",
          "46: }",
          "48: static inline void",
          "49: _py_set_opcode(_Py_CODEUNIT *word, uint8_t opcode)",
          "50: {",
          "51:     word->op.code = opcode;",
          "52: }",
          "54: #define _Py_MAKE_CODEUNIT(opcode, oparg) _py_make_codeunit((opcode), (oparg))",
          "55: #define _Py_SET_OPCODE(word, opcode) _py_set_opcode(&(word), (opcode))",
          "",
          "---------------"
        ],
        "Include/internal/pycore_interp.h||Include/internal/pycore_interp.h": [
          "File: Include/internal/pycore_interp.h -> Include/internal/pycore_interp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"pycore_list.h\"          // struct _Py_list_state",
          "31: #include \"pycore_mimalloc.h\"      // struct _mimalloc_interp_state",
          "32: #include \"pycore_object_state.h\"  // struct _py_object_state",
          "33: #include \"pycore_obmalloc.h\"      // struct _obmalloc_state",
          "34: #include \"pycore_qsbr.h\"          // struct _qsbr_state",
          "35: #include \"pycore_tstate.h\"        // _PyThreadStateImpl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"pycore_optimizer.h\"     // _PyOptimizerObject",
          "",
          "---------------"
        ],
        "Include/internal/pycore_optimizer.h||Include/internal/pycore_optimizer.h": [
          "File: Include/internal/pycore_optimizer.h -> Include/internal/pycore_optimizer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"pycore_uop_ids.h\"",
          "12: #include <stdbool.h>",
          "15: #define UOP_MAX_TRACE_LENGTH 800",
          "17: #define TRACE_STACK_SIZE 5",
          "20:     _PyUOpInstruction *trace, int trace_len, int curr_stackentries,",
          "21:     _PyBloomFilter *dependencies);",
          "",
          "[Removed Lines]",
          "19: int _Py_uop_analyze_and_optimize(_PyInterpreterFrame *frame,",
          "",
          "[Added Lines]",
          "15: typedef struct _PyExecutorLinkListNode {",
          "16:     struct _PyExecutorObject *next;",
          "17:     struct _PyExecutorObject *previous;",
          "18: } _PyExecutorLinkListNode;",
          "23: #define BLOOM_FILTER_WORDS 8",
          "25: typedef struct _bloom_filter {",
          "26:     uint32_t bits[BLOOM_FILTER_WORDS];",
          "27: } _PyBloomFilter;",
          "29: typedef struct {",
          "30:     uint8_t opcode;",
          "31:     uint8_t oparg;",
          "32:     uint8_t valid;",
          "33:     uint8_t linked;",
          "34:     int index;           // Index of ENTER_EXECUTOR (if code isn't NULL, below).",
          "35:     _PyBloomFilter bloom;",
          "36:     _PyExecutorLinkListNode links;",
          "37:     PyCodeObject *code;  // Weak (NULL if no corresponding ENTER_EXECUTOR).",
          "38: } _PyVMData;",
          "40: #define UOP_FORMAT_TARGET 0",
          "41: #define UOP_FORMAT_EXIT 1",
          "42: #define UOP_FORMAT_JUMP 2",
          "43: #define UOP_FORMAT_UNUSED 3",
          "56: typedef struct {",
          "57:     uint16_t opcode:14;",
          "58:     uint16_t format:2;",
          "59:     uint16_t oparg;",
          "60:     union {",
          "61:         uint32_t target;",
          "62:         struct {",
          "63:             union {",
          "64:                 uint16_t exit_index;",
          "65:                 uint16_t jump_target;",
          "66:             };",
          "67:             uint16_t error_target;",
          "68:         };",
          "69:     };",
          "70:     uint64_t operand;  // A cache entry",
          "71: } _PyUOpInstruction;",
          "73: static inline uint32_t uop_get_target(const _PyUOpInstruction *inst)",
          "74: {",
          "75:     assert(inst->format == UOP_FORMAT_TARGET);",
          "76:     return inst->target;",
          "77: }",
          "79: static inline uint16_t uop_get_exit_index(const _PyUOpInstruction *inst)",
          "80: {",
          "81:     assert(inst->format == UOP_FORMAT_EXIT);",
          "82:     return inst->exit_index;",
          "83: }",
          "85: static inline uint16_t uop_get_jump_target(const _PyUOpInstruction *inst)",
          "86: {",
          "87:     assert(inst->format == UOP_FORMAT_JUMP);",
          "88:     return inst->jump_target;",
          "89: }",
          "91: static inline uint16_t uop_get_error_target(const _PyUOpInstruction *inst)",
          "92: {",
          "93:     assert(inst->format != UOP_FORMAT_TARGET);",
          "94:     return inst->error_target;",
          "95: }",
          "97: typedef struct _exit_data {",
          "98:     uint32_t target;",
          "99:     _Py_BackoffCounter temperature;",
          "100:     const struct _PyExecutorObject *executor;",
          "101: } _PyExitData;",
          "103: typedef struct _PyExecutorObject {",
          "104:     PyObject_VAR_HEAD",
          "105:     const _PyUOpInstruction *trace;",
          "107:     uint32_t exit_count;",
          "108:     uint32_t code_size;",
          "109:     size_t jit_size;",
          "110:     void *jit_code;",
          "111:     void *jit_side_entry;",
          "112:     _PyExitData exits[1];",
          "113: } _PyExecutorObject;",
          "115: typedef struct _PyOptimizerObject _PyOptimizerObject;",
          "118: typedef int (*optimize_func)(",
          "119:     _PyOptimizerObject* self, struct _PyInterpreterFrame *frame,",
          "120:     _Py_CODEUNIT *instr, _PyExecutorObject **exec_ptr,",
          "121:     int curr_stackentries);",
          "123: struct _PyOptimizerObject {",
          "124:     PyObject_HEAD",
          "125:     optimize_func optimize;",
          "127: };",
          "130: typedef struct {",
          "131:     _PyOptimizerObject base;",
          "132:     int64_t count;",
          "133: } _PyCounterOptimizerObject;",
          "135: _PyOptimizerObject *_Py_SetOptimizer(PyInterpreterState *interp, _PyOptimizerObject* optimizer);",
          "137: PyAPI_FUNC(int) _Py_SetTier2Optimizer(_PyOptimizerObject* optimizer);",
          "139: PyAPI_FUNC(_PyOptimizerObject *) _Py_GetOptimizer(void);",
          "141: PyAPI_FUNC(_PyExecutorObject *) _Py_GetExecutor(PyCodeObject *code, int offset);",
          "143: void _Py_ExecutorInit(_PyExecutorObject *, const _PyBloomFilter *);",
          "144: void _Py_ExecutorDetach(_PyExecutorObject *);",
          "145: void _Py_BloomFilter_Init(_PyBloomFilter *);",
          "146: void _Py_BloomFilter_Add(_PyBloomFilter *bloom, void *obj);",
          "147: PyAPI_FUNC(void) _Py_Executor_DependsOn(_PyExecutorObject *executor, void *obj);",
          "149: PyAPI_FUNC(PyObject *) _PyOptimizer_NewCounter(void);",
          "150: PyAPI_FUNC(PyObject *) _PyOptimizer_NewUOpOptimizer(void);",
          "152: #define _Py_MAX_ALLOWED_BUILTINS_MODIFICATIONS 3",
          "153: #define _Py_MAX_ALLOWED_GLOBALS_MODIFICATIONS 6",
          "155: #ifdef _Py_TIER2",
          "156: PyAPI_FUNC(void) _Py_Executors_InvalidateDependency(PyInterpreterState *interp, void *obj, int is_invalidation);",
          "157: PyAPI_FUNC(void) _Py_Executors_InvalidateAll(PyInterpreterState *interp, int is_invalidation);",
          "158: #else",
          "159: #  define _Py_Executors_InvalidateDependency(A, B, C) ((void)0)",
          "160: #  define _Py_Executors_InvalidateAll(A, B) ((void)0)",
          "161: #endif",
          "169: int _Py_uop_analyze_and_optimize(struct _PyInterpreterFrame *frame,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: PyAPI_FUNC(PyObject *) _Py_uop_symbols_test(PyObject *self, PyObject *ignored);",
          "119: #ifdef __cplusplus",
          "120: }",
          "",
          "[Removed Lines]",
          "117: PyAPI_FUNC(int) _PyOptimizer_Optimize(_PyInterpreterFrame *frame, _Py_CODEUNIT *start, PyObject **stack_pointer, _PyExecutorObject **exec_ptr);",
          "",
          "[Added Lines]",
          "267: PyAPI_FUNC(int) _PyOptimizer_Optimize(struct _PyInterpreterFrame *frame, _Py_CODEUNIT *start, PyObject **stack_pointer, _PyExecutorObject **exec_ptr);",
          "",
          "---------------"
        ],
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1103:   $(srcdir)/Include/cpython/object.h \\",
          "1104:   $(srcdir)/Include/cpython/objimpl.h \\",
          "1105:   $(srcdir)/Include/cpython/odictobject.h \\",
          "1107:   $(srcdir)/Include/cpython/picklebufobject.h \\",
          "1108:   $(srcdir)/Include/cpython/pthread_stubs.h \\",
          "1109:   $(srcdir)/Include/cpython/pyatomic.h \\",
          "",
          "[Removed Lines]",
          "1106:   $(srcdir)/Include/cpython/optimizer.h \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Modules/_opcode.c||Modules/_opcode.c": [
          "File: Modules/_opcode.c -> Modules/_opcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"Python.h\"",
          "6: #include \"compile.h\"",
          "7: #include \"opcode.h\"",
          "13: module _opcode",
          "",
          "[Removed Lines]",
          "8: #include \"internal/pycore_code.h\"",
          "9: #include \"internal/pycore_compile.h\"",
          "10: #include \"internal/pycore_intrinsics.h\"",
          "",
          "[Added Lines]",
          "8: #include \"pycore_code.h\"",
          "9: #include \"pycore_compile.h\"",
          "10: #include \"pycore_intrinsics.h\"",
          "11: #include \"pycore_optimizer.h\"     // _Py_GetExecutor()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:         return NULL;",
          "369:     }",
          "370: #ifdef _Py_TIER2",
          "372: #else",
          "373:     PyErr_Format(PyExc_RuntimeError,",
          "374:                  \"Executors are not available in this build\");",
          "",
          "[Removed Lines]",
          "371:     return (PyObject *)PyUnstable_GetExecutor((PyCodeObject *)code, offset);",
          "",
          "[Added Lines]",
          "372:     return (PyObject *)_Py_GetExecutor((PyCodeObject *)code, offset);",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi.c||Modules/_testinternalcapi.c": [
          "File: Modules/_testinternalcapi.c -> Modules/_testinternalcapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "990: static PyObject *",
          "991: new_counter_optimizer(PyObject *self, PyObject *arg)",
          "992: {",
          "994: }",
          "996: static PyObject *",
          "997: new_uop_optimizer(PyObject *self, PyObject *arg)",
          "998: {",
          "1000: }",
          "1002: static PyObject *",
          "",
          "[Removed Lines]",
          "993:     return PyUnstable_Optimizer_NewCounter();",
          "999:     return PyUnstable_Optimizer_NewUOpOptimizer();",
          "",
          "[Added Lines]",
          "993:     return _PyOptimizer_NewCounter();",
          "999:     return _PyOptimizer_NewUOpOptimizer();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1005:     if (opt == Py_None) {",
          "1006:         opt = NULL;",
          "1007:     }",
          "1009:         return NULL;",
          "1010:     }",
          "1011:     Py_RETURN_NONE;",
          "",
          "[Removed Lines]",
          "1008:     if (PyUnstable_SetOptimizer((_PyOptimizerObject*)opt) < 0) {",
          "",
          "[Added Lines]",
          "1008:     if (_Py_SetTier2Optimizer((_PyOptimizerObject*)opt) < 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1016: {",
          "1017:     PyObject *opt = NULL;",
          "1018: #ifdef _Py_TIER2",
          "1020: #endif",
          "1021:     if (opt == NULL) {",
          "1022:         Py_RETURN_NONE;",
          "",
          "[Removed Lines]",
          "1019:     opt = (PyObject *)PyUnstable_GetOptimizer();",
          "",
          "[Added Lines]",
          "1019:     opt = (PyObject *)_Py_GetOptimizer();",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj||PCbuild/pythoncore.vcxproj": [
          "File: PCbuild/pythoncore.vcxproj -> PCbuild/pythoncore.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     <ClInclude Include=\"..\\Include\\cpython\\object.h\" />",
          "167:     <ClInclude Include=\"..\\Include\\cpython\\objimpl.h\" />",
          "168:     <ClInclude Include=\"..\\Include\\cpython\\odictobject.h\" />",
          "170:     <ClInclude Include=\"..\\Include\\cpython\\parser_interface.h\" />",
          "171:     <ClInclude Include=\"..\\Include\\cpython\\picklebufobject.h\" />",
          "172:     <ClInclude Include=\"..\\Include\\cpython\\pyarena.h\" />",
          "",
          "[Removed Lines]",
          "169:     <ClInclude Include=\"..\\Include\\cpython\\optimizer.h\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "PCbuild/pythoncore.vcxproj.filters||PCbuild/pythoncore.vcxproj.filters": [
          "File: PCbuild/pythoncore.vcxproj.filters -> PCbuild/pythoncore.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:     <ClInclude Include=\"..\\Include\\cpython\\odictobject.h\">",
          "418:       <Filter>Include</Filter>",
          "419:     </ClInclude>",
          "423:     <ClInclude Include=\"..\\Include\\cpython\\unicodeobject.h\">",
          "424:       <Filter>Include\\cpython</Filter>",
          "425:     </ClInclude>",
          "",
          "[Removed Lines]",
          "420:     <ClInclude Include=\"..\\Include\\cpython\\optimizer.h\">",
          "421:       <Filter>Include</Filter>",
          "422:     </ClInclude>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/optimizer.c||Python/optimizer.c": [
          "File: Python/optimizer.c -> Python/optimizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"pycore_pystate.h\"       // _PyInterpreterState_GET()",
          "13: #include \"pycore_uop_ids.h\"",
          "14: #include \"pycore_jit.h\"",
          "16: #include <stdbool.h>",
          "17: #include <stdint.h>",
          "18: #include <stddef.h>",
          "",
          "[Removed Lines]",
          "15: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     instr->op.arg = index;",
          "106: }",
          "121: static int",
          "122: never_optimize(",
          "",
          "[Removed Lines]",
          "108: int",
          "109: PyUnstable_Replace_Executor(PyCodeObject *code, _Py_CODEUNIT *instr, _PyExecutorObject *new)",
          "110: {",
          "111:     if (instr->op.code != ENTER_EXECUTOR) {",
          "112:         PyErr_Format(PyExc_ValueError, \"No executor to replace\");",
          "113:         return -1;",
          "114:     }",
          "115:     int index = instr->op.arg;",
          "116:     assert(index >= 0);",
          "117:     insert_executor(code, instr, index, new);",
          "118:     return 0;",
          "119: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144: };",
          "146: _PyOptimizerObject *",
          "148: {",
          "149:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "150:     if (interp->optimizer == &_PyOptimizer_Default) {",
          "",
          "[Removed Lines]",
          "147: PyUnstable_GetOptimizer(void)",
          "",
          "[Added Lines]",
          "134: _Py_GetOptimizer(void)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195: }",
          "197: int",
          "199: {",
          "200:     PyInterpreterState *interp = _PyInterpreterState_GET();",
          "201:     _PyOptimizerObject *old = _Py_SetOptimizer(interp, optimizer);",
          "",
          "[Removed Lines]",
          "198: PyUnstable_SetOptimizer(_PyOptimizerObject *optimizer)",
          "",
          "[Added Lines]",
          "185: _Py_SetTier2Optimizer(_PyOptimizerObject *optimizer)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240: }",
          "242: _PyExecutorObject *",
          "244: {",
          "245:     int code_len = (int)Py_SIZE(code);",
          "246:     for (int i = 0 ; i < code_len;) {",
          "",
          "[Removed Lines]",
          "243: PyUnstable_GetExecutor(PyCodeObject *code, int offset)",
          "",
          "[Added Lines]",
          "230: _Py_GetExecutor(PyCodeObject *code, int offset)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1349: };",
          "1351: PyObject *",
          "1353: {",
          "1354:     _PyOptimizerObject *opt = PyObject_New(_PyOptimizerObject, &_PyUOpOptimizer_Type);",
          "1355:     if (opt == NULL) {",
          "",
          "[Removed Lines]",
          "1352: PyUnstable_Optimizer_NewUOpOptimizer(void)",
          "",
          "[Added Lines]",
          "1339: _PyOptimizer_NewUOpOptimizer(void)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1437: };",
          "1439: PyObject *",
          "1441: {",
          "1442:     _PyCounterOptimizerObject *opt = (_PyCounterOptimizerObject *)_PyObject_New(&_PyCounterOptimizer_Type);",
          "1443:     if (opt == NULL) {",
          "",
          "[Removed Lines]",
          "1440: PyUnstable_Optimizer_NewCounter(void)",
          "",
          "[Added Lines]",
          "1427: _PyOptimizer_NewCounter(void)",
          "",
          "---------------"
        ],
        "Python/optimizer_analysis.c||Python/optimizer_analysis.c": [
          "File: Python/optimizer_analysis.c -> Python/optimizer_analysis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"pycore_uop_metadata.h\"",
          "22: #include \"pycore_dict.h\"",
          "23: #include \"pycore_long.h\"",
          "25: #include \"pycore_optimizer.h\"",
          "26: #include \"pycore_object.h\"",
          "27: #include \"pycore_dict.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/optimizer_symbols.c||Python/optimizer_symbols.c": [
          "File: Python/optimizer_symbols.c -> Python/optimizer_symbols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"Python.h\"",
          "6: #include \"pycore_code.h\"",
          "7: #include \"pycore_frame.h\"",
          "8: #include \"pycore_long.h\"",
          "",
          "[Removed Lines]",
          "5: #include \"cpython/optimizer.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"pycore_typevarobject.h\" // _Py_clear_generic_types()",
          "33: #include \"pycore_unicodeobject.h\" // _PyUnicode_InitTypes()",
          "34: #include \"pycore_weakref.h\"       // _PyWeakref_GET_REF()",
          "36: #include \"pycore_obmalloc.h\"      // _PyMem_init_obmalloc()",
          "38: #include \"opcode.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"cpython/optimizer.h\"    // _Py_MAX_ALLOWED_BUILTINS_MODIFICATIONS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1299:             enabled = *env != '0';",
          "1300:         }",
          "1301:         if (enabled) {",
          "1303:             if (opt == NULL) {",
          "1304:                 return _PyStatus_ERR(\"can't initialize optimizer\");",
          "1305:             }",
          "1307:                 return _PyStatus_ERR(\"can't install optimizer\");",
          "1308:             }",
          "1309:             Py_DECREF(opt);",
          "",
          "[Removed Lines]",
          "1302:             PyObject *opt = PyUnstable_Optimizer_NewUOpOptimizer();",
          "1306:             if (PyUnstable_SetOptimizer((_PyOptimizerObject *)opt)) {",
          "",
          "[Added Lines]",
          "1301:             PyObject *opt = _PyOptimizer_NewUOpOptimizer();",
          "1305:             if (_Py_SetTier2Optimizer((_PyOptimizerObject *)opt)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}