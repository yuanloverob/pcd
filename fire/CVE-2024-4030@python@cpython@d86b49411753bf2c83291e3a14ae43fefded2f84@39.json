{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "0bab0b3a53da735838720f96f3d3bf86ca6ba125",
      "candidate_info": {
        "commit_hash": "0bab0b3a53da735838720f96f3d3bf86ca6ba125",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0bab0b3a53da735838720f96f3d3bf86ca6ba125",
        "files": [
          "Misc/NEWS.d/next/Library/2024-05-24-11-47-08.gh-issue-69214.Grl6zF.rst",
          "Modules/clinic/fcntlmodule.c.h",
          "Modules/fcntlmodule.c"
        ],
        "message": "[3.13] gh-69214: Fix fcntl.ioctl() request type (GH-119498) (#119504)\n\ngh-69214: Fix fcntl.ioctl() request type (GH-119498)\n\nUse an 'unsigned long' instead of an 'unsigned int' for the request\nparameter of fcntl.ioctl() to support requests larger than UINT_MAX.\n(cherry picked from commit 92fab3356f4c61d4c73606e4fae705c6d8f6213b)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Modules/clinic/fcntlmodule.c.h||Modules/clinic/fcntlmodule.c.h",
          "Modules/fcntlmodule.c||Modules/fcntlmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/clinic/fcntlmodule.c.h||Modules/clinic/fcntlmodule.c.h": [
          "File: Modules/clinic/fcntlmodule.c.h -> Modules/clinic/fcntlmodule.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     {\"ioctl\", (PyCFunction)(void(*)(void))fcntl_ioctl, METH_FASTCALL, fcntl_ioctl__doc__},",
          "98: static PyObject *",
          "100:                  PyObject *ob_arg, int mutate_arg);",
          "102: static PyObject *",
          "",
          "[Removed Lines]",
          "99: fcntl_ioctl_impl(PyObject *module, int fd, unsigned int code,",
          "",
          "[Added Lines]",
          "99: fcntl_ioctl_impl(PyObject *module, int fd, unsigned long code,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: {",
          "105:     PyObject *return_value = NULL;",
          "106:     int fd;",
          "108:     PyObject *ob_arg = NULL;",
          "109:     int mutate_arg = 1;",
          "",
          "[Removed Lines]",
          "107:     unsigned int code;",
          "",
          "[Added Lines]",
          "107:     unsigned long code;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     if (fd < 0) {",
          "121:         goto exit;",
          "122:     }",
          "125:         goto exit;",
          "126:     }",
          "127:     if (nargs < 3) {",
          "128:         goto skip_optional;",
          "129:     }",
          "",
          "[Removed Lines]",
          "123:     code = (unsigned int)PyLong_AsUnsignedLongMask(args[1]);",
          "124:     if (code == (unsigned int)-1 && PyErr_Occurred()) {",
          "",
          "[Added Lines]",
          "123:     if (!PyLong_Check(args[1])) {",
          "124:         PyErr_Format(PyExc_TypeError, \"ioctl() argument 2 must be int, not %T\", args[1]);",
          "127:     code = PyLong_AsUnsignedLongMask(args[1]);",
          "",
          "---------------"
        ],
        "Modules/fcntlmodule.c||Modules/fcntlmodule.c": [
          "File: Modules/fcntlmodule.c -> Modules/fcntlmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: fcntl.ioctl",
          "114:     fd: fildes",
          "116:     arg as ob_arg: object(c_default='NULL') = 0",
          "117:     mutate_flag as mutate_arg: bool = True",
          "118:     /",
          "",
          "[Removed Lines]",
          "115:     request as code: unsigned_int(bitwise=True)",
          "",
          "[Added Lines]",
          "115:     request as code: unsigned_long(bitwise=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: static PyObject *",
          "152:                  PyObject *ob_arg, int mutate_arg)",
          "154: {",
          "155: #define IOCTL_BUFSZ 1024",
          "",
          "[Removed Lines]",
          "151: fcntl_ioctl_impl(PyObject *module, int fd, unsigned int code,",
          "",
          "[Added Lines]",
          "151: fcntl_ioctl_impl(PyObject *module, int fd, unsigned long code,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "217d57fc3c9a8ec45dfccd3aab9a05dbf6656da0",
      "candidate_info": {
        "commit_hash": "217d57fc3c9a8ec45dfccd3aab9a05dbf6656da0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/217d57fc3c9a8ec45dfccd3aab9a05dbf6656da0",
        "files": [
          "Lib/site.py"
        ],
        "message": "[3.13] GH-119496: accept UTF-8 BOM in .pth files (GH-119508)\n\n`Out-File -Encoding utf8` and similar commands in Windows Powershell 5.1 emit\nUTF-8 with a BOM marker, which the regular `utf-8` codec decodes incorrectly.\n\n`utf-8-sig` accepts a BOM, but also works correctly without one.\n\nThis change also makes .pth files match the way Python source files are handled.\n\n(cherry picked from commit bf5b6467f8cc06759f3396ab1a8ad64fe7d1db2e)\n\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>\nCo-authored-by: Inada Naoki <songofacandy@gmail.com>",
        "before_after_code_files": [
          "Lib/site.py||Lib/site.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/site.py||Lib/site.py": [
          "File: Lib/site.py -> Lib/site.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:         return",
          "187:     try:",
          "189:     except UnicodeDecodeError:",
          "190:         # Fallback to locale encoding for backward compatibility.",
          "191:         # We will deprecate this fallback in the future.",
          "",
          "[Removed Lines]",
          "188:         pth_content = pth_content.decode()",
          "",
          "[Added Lines]",
          "188:         # Accept BOM markers in .pth files as we do in source files",
          "189:         # (Windows PowerShell 5.1 makes it hard to emit UTF-8 files without a BOM)",
          "190:         pth_content = pth_content.decode(\"utf-8-sig\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9be94f9ce6dbc944e9807534664dbde28077f737",
      "candidate_info": {
        "commit_hash": "9be94f9ce6dbc944e9807534664dbde28077f737",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9be94f9ce6dbc944e9807534664dbde28077f737",
        "files": [
          "Lib/test/test_io.py",
          "Misc/NEWS.d/next/Library/2024-05-24-14-32-24.gh-issue-119506.-nMNqq.rst",
          "Modules/_io/textio.c"
        ],
        "message": "[3.13] gh-119506: fix `_io.TextIOWrapper.write()` write during flush (GH-119507) (#119964)\n\ngh-119506: fix `_io.TextIOWrapper.write()` write during flush (GH-119507)\n(cherry picked from commit 52586f930f62bd80374f0f240a4ecce0c0238174)\n\nCo-authored-by: Radislav Chugunov <52372310+chgnrdv@users.noreply.github.com>\nCo-authored-by: Inada Naoki <songofacandy@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_io.py||Lib/test/test_io.py",
          "Modules/_io/textio.c||Modules/_io/textio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_io.py||Lib/test/test_io.py": [
          "File: Lib/test/test_io.py -> Lib/test/test_io.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4016:         t.write(\"x\"*chunk_size)",
          "4017:         self.assertEqual([b\"abcdef\", b\"ghi\", b\"x\"*chunk_size], buf._write_stack)",
          "4020: class PyTextIOWrapperTest(TextIOWrapperTest):",
          "4021:     io = pyio",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4019:     def test_issue119506(self):",
          "4020:         chunk_size = 8192",
          "4022:         class MockIO(self.MockRawIO):",
          "4023:             written = False",
          "4024:             def write(self, data):",
          "4025:                 if not self.written:",
          "4026:                     self.written = True",
          "4027:                     t.write(\"middle\")",
          "4028:                 return super().write(data)",
          "4030:         buf = MockIO()",
          "4031:         t = self.TextIOWrapper(buf)",
          "4032:         t.write(\"abc\")",
          "4033:         t.write(\"def\")",
          "4034:         # writing data which size >= chunk_size cause flushing buffer before write.",
          "4035:         t.write(\"g\" * chunk_size)",
          "4036:         t.flush()",
          "4038:         self.assertEqual([b\"abcdef\", b\"middle\", b\"g\"*chunk_size],",
          "4039:                          buf._write_stack)",
          "",
          "---------------"
        ],
        "Modules/_io/textio.c||Modules/_io/textio.c": [
          "File: Modules/_io/textio.c -> Modules/_io/textio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1719:         bytes_len = PyBytes_GET_SIZE(b);",
          "1720:     }",
          "1731:         }",
          "1732:         self->pending_bytes = b;",
          "1733:     }",
          "1734:     else if (!PyList_CheckExact(self->pending_bytes)) {",
          "",
          "[Removed Lines]",
          "1722:     if (self->pending_bytes == NULL) {",
          "1723:         self->pending_bytes_count = 0;",
          "1724:         self->pending_bytes = b;",
          "1725:     }",
          "1726:     else if (self->pending_bytes_count + bytes_len > self->chunk_size) {",
          "1728:         if (_textiowrapper_writeflush(self) < 0) {",
          "1729:             Py_DECREF(b);",
          "1730:             return NULL;",
          "",
          "[Added Lines]",
          "1725:     if (bytes_len >= self->chunk_size) {",
          "1732:         while (self->pending_bytes != NULL) {",
          "1733:             if (_textiowrapper_writeflush(self) < 0) {",
          "1734:                 Py_DECREF(b);",
          "1735:                 return NULL;",
          "1736:             }",
          "1738:     }",
          "1740:     if (self->pending_bytes == NULL) {",
          "1741:         assert(self->pending_bytes_count == 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1737:             Py_DECREF(b);",
          "1738:             return NULL;",
          "1739:         }",
          "1740:         PyList_SET_ITEM(list, 0, self->pending_bytes);",
          "1741:         PyList_SET_ITEM(list, 1, b);",
          "1742:         self->pending_bytes = list;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1752:         assert(!PyList_CheckExact(self->pending_bytes));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a463cd8e45d6fc6ca16a59bcfeece99cf268e684",
      "candidate_info": {
        "commit_hash": "a463cd8e45d6fc6ca16a59bcfeece99cf268e684",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a463cd8e45d6fc6ca16a59bcfeece99cf268e684",
        "files": [
          "Lib/_pyrepl/simple_interact.py",
          "Lib/code.py",
          "Lib/test/test_pyrepl/test_interact.py",
          "Lib/test/test_traceback.py",
          "Lib/traceback.py"
        ],
        "message": "[3.13] gh-118893: Evaluate all statements in the new REPL separately (GH-119318) (#119408)\n\n(cherry picked from commit a3e4fec8734a304d654e4ae24a4aa2f41a7b0640)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py",
          "Lib/code.py||Lib/code.py",
          "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py",
          "Lib/test/test_traceback.py||Lib/test/test_traceback.py",
          "Lib/traceback.py||Lib/traceback.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import linecache",
          "31: import sys",
          "32: import code",
          "33: from types import ModuleType",
          "35: from .readline import _get_reader, multiline_input",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import ast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         super().__init__(locals=locals, filename=filename, local_exit=local_exit)  # type: ignore[call-arg]",
          "75:         self.can_colorize = _colorize.can_colorize()",
          "77:     def showtraceback(self):",
          "78:         super().showtraceback(colorize=self.can_colorize)",
          "81: def run_multiline_interactive_console(",
          "82:     mainmodule: ModuleType | None= None, future_flags: int = 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     def showsyntaxerror(self, filename=None):",
          "79:         super().showsyntaxerror(colorize=self.can_colorize)",
          "84:     def runsource(self, source, filename=\"<input>\", symbol=\"single\"):",
          "85:         try:",
          "86:             tree = ast.parse(source)",
          "87:         except (OverflowError, SyntaxError, ValueError):",
          "88:             self.showsyntaxerror(filename)",
          "89:             return False",
          "90:         if tree.body:",
          "92:         for stmt in tree.body:",
          "93:             wrapper = ast.Interactive if stmt is last_stmt else ast.Module",
          "94:             the_symbol = symbol if stmt is last_stmt else \"exec\"",
          "95:             item = wrapper([stmt])",
          "96:             try:",
          "97:                 code = compile(item, filename, the_symbol)",
          "98:             except (OverflowError, ValueError):",
          "99:                     self.showsyntaxerror(filename)",
          "100:                     return False",
          "102:             if code is None:",
          "103:                 return True",
          "105:             self.runcode(code)",
          "106:         return False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:             input_name = f\"<python-input-{input_n}>\"",
          "146:             linecache._register_code(input_name, statement, \"<stdin>\")  # type: ignore[attr-defined]",
          "151:             assert not more",
          "152:             input_n += 1",
          "153:         except KeyboardInterrupt:",
          "",
          "[Removed Lines]",
          "147:             symbol = \"single\" if not contains_pasted_code else \"exec\"",
          "148:             more = console.push(_strip_final_indent(statement), filename=input_name, _symbol=symbol)  # type: ignore[call-arg]",
          "149:             if contains_pasted_code and more:",
          "150:                 more = console.push(_strip_final_indent(statement), filename=input_name, _symbol=\"single\")  # type: ignore[call-arg]",
          "",
          "[Added Lines]",
          "175:             more = console.push(_strip_final_indent(statement), filename=input_name, _symbol=\"single\")  # type: ignore[call-arg]",
          "",
          "---------------"
        ],
        "Lib/code.py||Lib/code.py": [
          "File: Lib/code.py -> Lib/code.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         except:",
          "95:             self.showtraceback()",
          "98:         \"\"\"Display the syntax error that just occurred.",
          "100:         This doesn't display a stack trace because there isn't one.",
          "",
          "[Removed Lines]",
          "97:     def showsyntaxerror(self, filename=None):",
          "",
          "[Added Lines]",
          "97:     def showsyntaxerror(self, filename=None, **kwargs):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         The output is written by self.write(), below.",
          "108:         \"\"\"",
          "109:         type, value, tb = sys.exc_info()",
          "110:         sys.last_exc = value",
          "111:         sys.last_type = type",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:         colorize = kwargs.pop('colorize', False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:                 value = SyntaxError(msg, (filename, lineno, offset, line))",
          "124:                 sys.last_exc = sys.last_value = value",
          "125:         if sys.excepthook is sys.__excepthook__:",
          "127:             self.write(''.join(lines))",
          "128:         else:",
          "129:             # If someone has set sys.excepthook, we let that take precedence",
          "",
          "[Removed Lines]",
          "126:             lines = traceback.format_exception_only(type, value)",
          "",
          "[Added Lines]",
          "127:             lines = traceback.format_exception_only(type, value, colorize=colorize)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py": [
          "File: Lib/test/test_pyrepl/test_interact.py -> Lib/test/test_pyrepl/test_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import contextlib",
          "2: import io",
          "3: import unittest",
          "4: from unittest.mock import patch",
          "5: from textwrap import dedent",
          "7: from test.support import force_not_colorized",
          "9: from _pyrepl.simple_interact import InteractiveColoredConsole",
          "12: class TestSimpleInteract(unittest.TestCase):",
          "13:     def test_multiple_statements(self):",
          "14:         namespace = {}",
          "15:         code = dedent(\"\"\"\\",
          "16:         class A:",
          "17:             def foo(self):",
          "20:                 pass",
          "22:         class B:",
          "23:             def bar(self):",
          "24:                 pass",
          "26:         a = 1",
          "27:         a",
          "28:         \"\"\")",
          "29:         console = InteractiveColoredConsole(namespace, filename=\"<stdin>\")",
          "30:         with (",
          "31:             patch.object(InteractiveColoredConsole, \"showsyntaxerror\") as showsyntaxerror,",
          "32:             patch.object(InteractiveColoredConsole, \"runsource\", wraps=console.runsource) as runsource,",
          "33:         ):",
          "34:             more = console.push(code, filename=\"<stdin>\", _symbol=\"single\")  # type: ignore[call-arg]",
          "35:         self.assertFalse(more)",
          "36:         showsyntaxerror.assert_not_called()",
          "39:     def test_multiple_statements_output(self):",
          "40:         namespace = {}",
          "41:         code = dedent(\"\"\"\\",
          "42:         b = 1",
          "43:         b",
          "44:         a = 1",
          "45:         a",
          "46:         \"\"\")",
          "47:         console = InteractiveColoredConsole(namespace, filename=\"<stdin>\")",
          "48:         f = io.StringIO()",
          "49:         with contextlib.redirect_stdout(f):",
          "50:             more = console.push(code, filename=\"<stdin>\", _symbol=\"single\")  # type: ignore[call-arg]",
          "51:         self.assertFalse(more)",
          "52:         self.assertEqual(f.getvalue(), \"1\\n\")",
          "54:     def test_empty(self):",
          "55:         namespace = {}",
          "56:         code = \"\"",
          "57:         console = InteractiveColoredConsole(namespace, filename=\"<stdin>\")",
          "58:         f = io.StringIO()",
          "59:         with contextlib.redirect_stdout(f):",
          "60:             more = console.push(code, filename=\"<stdin>\", _symbol=\"single\")  # type: ignore[call-arg]",
          "61:         self.assertFalse(more)",
          "62:         self.assertEqual(f.getvalue(), \"\")",
          "64:     def test_runsource_compiles_and_runs_code(self):",
          "65:         console = InteractiveColoredConsole()",
          "66:         source = \"print('Hello, world!')\"",
          "67:         with patch.object(console, \"runcode\") as mock_runcode:",
          "68:             console.runsource(source)",
          "69:             mock_runcode.assert_called_once()",
          "71:     def test_runsource_returns_false_for_successful_compilation(self):",
          "72:         console = InteractiveColoredConsole()",
          "73:         source = \"print('Hello, world!')\"",
          "74:         result = console.runsource(source)",
          "75:         self.assertFalse(result)",
          "77:     @force_not_colorized",
          "78:     def test_runsource_returns_false_for_failed_compilation(self):",
          "79:         console = InteractiveColoredConsole()",
          "80:         source = \"print('Hello, world!'\"",
          "81:         f = io.StringIO()",
          "82:         with contextlib.redirect_stderr(f):",
          "83:             result = console.runsource(source)",
          "84:         self.assertFalse(result)",
          "85:         self.assertIn('SyntaxError', f.getvalue())",
          "87:     def test_runsource_shows_syntax_error_for_failed_compilation(self):",
          "88:         console = InteractiveColoredConsole()",
          "89:         source = \"print('Hello, world!'\"",
          "90:         with patch.object(console, \"showsyntaxerror\") as mock_showsyntaxerror:",
          "91:             console.runsource(source)",
          "92:             mock_showsyntaxerror.assert_called_once()",
          "",
          "---------------"
        ],
        "Lib/test/test_traceback.py||Lib/test/test_traceback.py": [
          "File: Lib/test/test_traceback.py -> Lib/test/test_traceback.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:         self.assertEqual(",
          "545:             str(inspect.signature(traceback.format_exception_only)),",
          "549: class PurePythonExceptionFormattingMixin:",
          "",
          "[Removed Lines]",
          "546:             '(exc, /, value=<implicit>, *, show_group=False)')",
          "",
          "[Added Lines]",
          "546:             '(exc, /, value=<implicit>, *, show_group=False, **kwargs)')",
          "",
          "---------------"
        ],
        "Lib/traceback.py||Lib/traceback.py": [
          "File: Lib/traceback.py -> Lib/traceback.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     return list(te.format(chain=chain, colorize=colorize))",
          "159:     \"\"\"Format the exception part of a traceback.",
          "161:     The return value is a list of strings, each ending in a newline.",
          "",
          "[Removed Lines]",
          "158: def format_exception_only(exc, /, value=_sentinel, *, show_group=False):",
          "",
          "[Added Lines]",
          "158: def format_exception_only(exc, /, value=_sentinel, *, show_group=False, **kwargs):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     :exc:`BaseExceptionGroup`, the nested exceptions are included as",
          "171:     well, recursively, with indentation relative to their nesting depth.",
          "172:     \"\"\"",
          "173:     if value is _sentinel:",
          "174:         value = exc",
          "175:     te = TracebackException(type(value), value, None, compact=True)",
          "179: # -- not official API but folk probably use these two functions.",
          "",
          "[Removed Lines]",
          "176:     return list(te.format_exception_only(show_group=show_group))",
          "",
          "[Added Lines]",
          "173:     colorize = kwargs.get(\"colorize\", False)",
          "177:     return list(te.format_exception_only(show_group=show_group, colorize=colorize))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6be55f1bedcd076c12d00bf061bbcffc4ed8073a",
      "candidate_info": {
        "commit_hash": "6be55f1bedcd076c12d00bf061bbcffc4ed8073a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6be55f1bedcd076c12d00bf061bbcffc4ed8073a",
        "files": [
          "Grammar/python.gram",
          "Lib/test/test_syntax.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-03-13-25-04.gh-issue-119724.EH1dkA.rst",
          "Parser/parser.c"
        ],
        "message": "[3.13] gh-119724: Revert \"bpo-45759: Better error messages for non-matching 'elif'/'else' statements (GH-29513)\" (GH-119974) (GH-120013)\n\nThis reverts commit 1c8f912ebdfdb146cd7dd2d7a3a67d2c5045ddb0.\n(cherry picked from commit 31a4fb3c74a0284436343858803b54471e2dc9c7)",
        "before_after_code_files": [
          "Grammar/python.gram||Grammar/python.gram",
          "Lib/test/test_syntax.py||Lib/test/test_syntax.py",
          "Parser/parser.c||Parser/parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Grammar/python.gram||Grammar/python.gram": [
          "File: Grammar/python.gram -> Grammar/python.gram",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     | &'nonlocal' nonlocal_stmt",
          "129: compound_stmt[stmt_ty]:",
          "131:     | &('def' | '@' | 'async') function_def",
          "132:     | &'if' if_stmt",
          "133:     | &('class' | '@') class_def",
          "",
          "[Removed Lines]",
          "130:     | invalid_compound_stmt",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1317:     | token=NEWLINE {",
          "1318:         RAISE_SYNTAX_ERROR_STARTING_FROM(token, \"Expected one or more names after 'import'\") }",
          "1324: invalid_with_stmt:",
          "1325:     | ['async'] 'with' ','.(expression ['as' star_target])+ NEWLINE { RAISE_SYNTAX_ERROR(\"expected ':'\") }",
          "1326:     | ['async'] 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' NEWLINE { RAISE_SYNTAX_ERROR(\"expected ':'\") }",
          "",
          "[Removed Lines]",
          "1320: invalid_compound_stmt:",
          "1321:     | a='elif' named_expression ':' { RAISE_SYNTAX_ERROR_STARTING_FROM(a, \"'elif' must match an if-statement here\") }",
          "1322:     | a='else' ':' { RAISE_SYNTAX_ERROR_STARTING_FROM(a, \"'else' must match a valid statement here\") }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/test/test_syntax.py||Lib/test/test_syntax.py": [
          "File: Lib/test/test_syntax.py -> Lib/test/test_syntax.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1853:     Traceback (most recent call last):",
          "1854:     SyntaxError: positional patterns follow keyword patterns",
          "1878: Uses of the star operator which should fail:",
          "1880: A[:*b]",
          "",
          "[Removed Lines]",
          "1856: Non-matching 'elif'/'else' statements:",
          "1858:     >>> if a == b:",
          "1859:     ...     ...",
          "1860:     ...     elif a == c:",
          "1861:     Traceback (most recent call last):",
          "1862:     SyntaxError: 'elif' must match an if-statement here",
          "1864:     >>> if x == y:",
          "1865:     ...     ...",
          "1866:     ...     else:",
          "1867:     Traceback (most recent call last):",
          "1868:     SyntaxError: 'else' must match a valid statement here",
          "1870:     >>> elif m == n:",
          "1871:     Traceback (most recent call last):",
          "1872:     SyntaxError: 'elif' must match an if-statement here",
          "1874:     >>> else:",
          "1875:     Traceback (most recent call last):",
          "1876:     SyntaxError: 'else' must match a valid statement here",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2167:                      lineno=None, offset=None, end_lineno=None, end_offset=None):",
          "2168:         \"\"\"Check that compiling code raises SyntaxError with errtext.",
          "2172:         is the expected subclass of SyntaxError (e.g. IndentationError).",
          "2173:         \"\"\"",
          "2174:         try:",
          "",
          "[Removed Lines]",
          "2170:         errtext is a regular expression that must be present in the",
          "2171:         test of the exception raised. If subclass is specified, it",
          "",
          "[Added Lines]",
          "2148:         errtest is a regular expression that must be present in the",
          "2149:         test of the exception raised.  If subclass is specified it",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2192:         else:",
          "2193:             self.fail(\"compile() did not raise SyntaxError\")",
          "2211:     def test_expression_with_assignment(self):",
          "2212:         self._check_error(",
          "2213:             \"print(end1 + end2 = ' ')\",",
          "",
          "[Removed Lines]",
          "2195:     def _check_noerror(self, code,",
          "2196:                        errtext=\"compile() raised unexpected SyntaxError\",",
          "2197:                        filename=\"<testcase>\", mode=\"exec\", subclass=None):",
          "2198:         \"\"\"Check that compiling code does not raise a SyntaxError.",
          "2200:         errtext is the message passed to self.fail if there is",
          "2201:         a SyntaxError. If the subclass parameter is specified,",
          "2202:         it is the subclass of SyntaxError (e.g. IndentationError)",
          "2203:         that the raised error is checked against.",
          "2204:         \"\"\"",
          "2205:         try:",
          "2206:             compile(code, filename, mode)",
          "2207:         except SyntaxError as err:",
          "2208:             if (not subclass) or isinstance(err, subclass):",
          "2209:                 self.fail(errtext)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2609: \"\"\"",
          "2610:         self._check_error(source, \"too many statically nested blocks\")",
          "2631:     @support.cpython_only",
          "2632:     def test_error_on_parser_stack_overflow(self):",
          "2633:         source = \"-\" * 100000 + \"4\"",
          "",
          "[Removed Lines]",
          "2612:     def test_syntax_error_non_matching_elif_else_statements(self):",
          "2613:         # Check bpo-45759: 'elif' statements that doesn't match an",
          "2614:         # if-statement or 'else' statements that doesn't match any",
          "2615:         # valid else-able statement (e.g. 'while')",
          "2616:         self._check_error(",
          "2617:             \"elif m == n:\\n    ...\",",
          "2618:             \"'elif' must match an if-statement here\")",
          "2619:         self._check_error(",
          "2620:             \"else:\\n    ...\",",
          "2621:             \"'else' must match a valid statement here\")",
          "2622:         self._check_noerror(\"if a == b:\\n    ...\\nelif a == c:\\n    ...\")",
          "2623:         self._check_noerror(\"if x == y:\\n    ...\\nelse:\\n    ...\")",
          "2624:         self._check_error(",
          "2625:             \"else = 123\",",
          "2626:             \"invalid syntax\")",
          "2627:         self._check_error(",
          "2628:             \"elif 55 = 123\",",
          "2629:             \"cannot assign to literal here\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Parser/parser.c||Parser/parser.c": [
          "File: Parser/parser.c -> Parser/parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     (KeywordToken[]) {{NULL, -1}},",
          "22:     (KeywordToken[]) {{NULL, -1}},",
          "23:     (KeywordToken[]) {",
          "27:         {\"or\", 581},",
          "28:         {\"is\", 589},",
          "29:         {NULL, -1},",
          "30:     },",
          "31:     (KeywordToken[]) {",
          "32:         {\"del\", 616},",
          "36:         {\"and\", 582},",
          "38:         {NULL, -1},",
          "39:     },",
          "40:     (KeywordToken[]) {",
          "41:         {\"from\", 621},",
          "42:         {\"pass\", 504},",
          "46:         {\"None\", 614},",
          "47:         {\"True\", 613},",
          "48:         {NULL, -1},",
          "",
          "[Removed Lines]",
          "24:         {\"if\", 662},",
          "25:         {\"as\", 660},",
          "26:         {\"in\", 673},",
          "33:         {\"def\", 677},",
          "34:         {\"for\", 672},",
          "35:         {\"try\", 644},",
          "37:         {\"not\", 681},",
          "43:         {\"with\", 635},",
          "44:         {\"elif\", 664},",
          "45:         {\"else\", 665},",
          "",
          "[Added Lines]",
          "24:         {\"if\", 660},",
          "25:         {\"as\", 658},",
          "26:         {\"in\", 671},",
          "33:         {\"def\", 675},",
          "34:         {\"for\", 670},",
          "35:         {\"try\", 642},",
          "37:         {\"not\", 679},",
          "43:         {\"with\", 633},",
          "44:         {\"elif\", 662},",
          "45:         {\"else\", 663},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         {\"raise\", 525},",
          "52:         {\"yield\", 580},",
          "53:         {\"break\", 508},",
          "57:         {\"False\", 615},",
          "58:         {\"await\", 590},",
          "59:         {NULL, -1},",
          "",
          "[Removed Lines]",
          "54:         {\"async\", 676},",
          "55:         {\"class\", 679},",
          "56:         {\"while\", 667},",
          "",
          "[Added Lines]",
          "54:         {\"async\", 674},",
          "55:         {\"class\", 677},",
          "56:         {\"while\", 665},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:         {\"import\", 622},",
          "64:         {\"assert\", 529},",
          "65:         {\"global\", 526},",
          "67:         {\"lambda\", 612},",
          "68:         {NULL, -1},",
          "69:     },",
          "70:     (KeywordToken[]) {",
          "72:         {NULL, -1},",
          "73:     },",
          "74:     (KeywordToken[]) {",
          "",
          "[Removed Lines]",
          "66:         {\"except\", 657},",
          "71:         {\"finally\", 653},",
          "",
          "[Added Lines]",
          "66:         {\"except\", 655},",
          "71:         {\"finally\", 651},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "306: #define invalid_group_type 1219",
          "307: #define invalid_import_type 1220",
          "308: #define invalid_import_from_targets_type 1221",
          "619: static mod_ty file_rule(Parser *p);",
          "620: static mod_ty interactive_rule(Parser *p);",
          "",
          "[Removed Lines]",
          "309: #define invalid_compound_stmt_type 1222",
          "310: #define invalid_with_stmt_type 1223",
          "311: #define invalid_with_stmt_indent_type 1224",
          "312: #define invalid_try_stmt_type 1225",
          "313: #define invalid_except_stmt_type 1226",
          "314: #define invalid_finally_stmt_type 1227",
          "315: #define invalid_except_stmt_indent_type 1228",
          "316: #define invalid_except_star_stmt_indent_type 1229",
          "317: #define invalid_match_stmt_type 1230",
          "318: #define invalid_case_block_type 1231",
          "319: #define invalid_as_pattern_type 1232",
          "320: #define invalid_class_pattern_type 1233",
          "321: #define invalid_class_argument_pattern_type 1234",
          "322: #define invalid_if_stmt_type 1235",
          "323: #define invalid_elif_stmt_type 1236",
          "324: #define invalid_else_stmt_type 1237",
          "325: #define invalid_while_stmt_type 1238",
          "326: #define invalid_for_stmt_type 1239",
          "327: #define invalid_def_raw_type 1240",
          "328: #define invalid_class_def_raw_type 1241",
          "329: #define invalid_double_starred_kvpairs_type 1242",
          "330: #define invalid_kvpair_type 1243",
          "331: #define invalid_starred_expression_type 1244",
          "332: #define invalid_replacement_field_type 1245",
          "333: #define invalid_conversion_character_type 1246",
          "334: #define invalid_arithmetic_type 1247",
          "335: #define invalid_factor_type 1248",
          "336: #define invalid_type_params_type 1249",
          "337: #define _loop0_1_type 1250",
          "338: #define _loop0_2_type 1251",
          "339: #define _loop1_3_type 1252",
          "340: #define _loop0_5_type 1253",
          "341: #define _gather_4_type 1254",
          "342: #define _tmp_6_type 1255",
          "343: #define _tmp_7_type 1256",
          "344: #define _tmp_8_type 1257",
          "345: #define _tmp_9_type 1258",
          "346: #define _tmp_10_type 1259",
          "347: #define _tmp_11_type 1260",
          "348: #define _tmp_12_type 1261",
          "349: #define _tmp_13_type 1262",
          "350: #define _loop1_14_type 1263",
          "351: #define _tmp_15_type 1264",
          "352: #define _tmp_16_type 1265",
          "353: #define _tmp_17_type 1266",
          "354: #define _loop0_19_type 1267",
          "355: #define _gather_18_type 1268",
          "356: #define _loop0_21_type 1269",
          "357: #define _gather_20_type 1270",
          "358: #define _tmp_22_type 1271",
          "359: #define _tmp_23_type 1272",
          "360: #define _loop0_24_type 1273",
          "361: #define _loop1_25_type 1274",
          "362: #define _loop0_27_type 1275",
          "363: #define _gather_26_type 1276",
          "364: #define _tmp_28_type 1277",
          "365: #define _loop0_30_type 1278",
          "366: #define _gather_29_type 1279",
          "367: #define _tmp_31_type 1280",
          "368: #define _loop1_32_type 1281",
          "369: #define _tmp_33_type 1282",
          "370: #define _tmp_34_type 1283",
          "371: #define _tmp_35_type 1284",
          "372: #define _loop0_36_type 1285",
          "373: #define _loop0_37_type 1286",
          "374: #define _loop0_38_type 1287",
          "375: #define _loop1_39_type 1288",
          "376: #define _loop0_40_type 1289",
          "377: #define _loop1_41_type 1290",
          "378: #define _loop1_42_type 1291",
          "379: #define _loop1_43_type 1292",
          "380: #define _loop0_44_type 1293",
          "381: #define _loop1_45_type 1294",
          "382: #define _loop0_46_type 1295",
          "383: #define _loop1_47_type 1296",
          "384: #define _loop0_48_type 1297",
          "385: #define _loop0_49_type 1298",
          "386: #define _loop1_50_type 1299",
          "387: #define _loop0_52_type 1300",
          "388: #define _gather_51_type 1301",
          "389: #define _loop0_54_type 1302",
          "390: #define _gather_53_type 1303",
          "391: #define _loop0_56_type 1304",
          "392: #define _gather_55_type 1305",
          "393: #define _loop0_58_type 1306",
          "394: #define _gather_57_type 1307",
          "395: #define _tmp_59_type 1308",
          "396: #define _loop1_60_type 1309",
          "397: #define _loop1_61_type 1310",
          "398: #define _tmp_62_type 1311",
          "399: #define _tmp_63_type 1312",
          "400: #define _loop1_64_type 1313",
          "401: #define _loop0_66_type 1314",
          "402: #define _gather_65_type 1315",
          "403: #define _tmp_67_type 1316",
          "404: #define _tmp_68_type 1317",
          "405: #define _tmp_69_type 1318",
          "406: #define _tmp_70_type 1319",
          "407: #define _loop0_72_type 1320",
          "408: #define _gather_71_type 1321",
          "409: #define _loop0_74_type 1322",
          "410: #define _gather_73_type 1323",
          "411: #define _tmp_75_type 1324",
          "412: #define _loop0_77_type 1325",
          "413: #define _gather_76_type 1326",
          "414: #define _loop0_79_type 1327",
          "415: #define _gather_78_type 1328",
          "416: #define _loop0_81_type 1329",
          "417: #define _gather_80_type 1330",
          "418: #define _loop1_82_type 1331",
          "419: #define _loop1_83_type 1332",
          "420: #define _loop0_85_type 1333",
          "421: #define _gather_84_type 1334",
          "422: #define _loop1_86_type 1335",
          "423: #define _loop1_87_type 1336",
          "424: #define _loop1_88_type 1337",
          "425: #define _tmp_89_type 1338",
          "426: #define _loop0_91_type 1339",
          "427: #define _gather_90_type 1340",
          "428: #define _tmp_92_type 1341",
          "429: #define _tmp_93_type 1342",
          "430: #define _tmp_94_type 1343",
          "431: #define _tmp_95_type 1344",
          "432: #define _tmp_96_type 1345",
          "433: #define _tmp_97_type 1346",
          "434: #define _loop0_98_type 1347",
          "435: #define _loop0_99_type 1348",
          "436: #define _loop0_100_type 1349",
          "437: #define _loop1_101_type 1350",
          "438: #define _loop0_102_type 1351",
          "439: #define _loop1_103_type 1352",
          "440: #define _loop1_104_type 1353",
          "441: #define _loop1_105_type 1354",
          "442: #define _loop0_106_type 1355",
          "443: #define _loop1_107_type 1356",
          "444: #define _loop0_108_type 1357",
          "445: #define _loop1_109_type 1358",
          "446: #define _loop0_110_type 1359",
          "447: #define _loop1_111_type 1360",
          "448: #define _loop0_112_type 1361",
          "449: #define _loop0_113_type 1362",
          "450: #define _loop1_114_type 1363",
          "451: #define _tmp_115_type 1364",
          "452: #define _loop0_117_type 1365",
          "453: #define _gather_116_type 1366",
          "454: #define _loop1_118_type 1367",
          "455: #define _loop0_119_type 1368",
          "456: #define _loop0_120_type 1369",
          "457: #define _tmp_121_type 1370",
          "458: #define _tmp_122_type 1371",
          "459: #define _loop0_124_type 1372",
          "460: #define _gather_123_type 1373",
          "461: #define _tmp_125_type 1374",
          "462: #define _loop0_127_type 1375",
          "463: #define _gather_126_type 1376",
          "464: #define _loop0_129_type 1377",
          "465: #define _gather_128_type 1378",
          "466: #define _loop0_131_type 1379",
          "467: #define _gather_130_type 1380",
          "468: #define _loop0_133_type 1381",
          "469: #define _gather_132_type 1382",
          "470: #define _loop0_134_type 1383",
          "471: #define _loop0_136_type 1384",
          "472: #define _gather_135_type 1385",
          "473: #define _loop1_137_type 1386",
          "474: #define _tmp_138_type 1387",
          "475: #define _loop0_140_type 1388",
          "476: #define _gather_139_type 1389",
          "477: #define _loop0_142_type 1390",
          "478: #define _gather_141_type 1391",
          "479: #define _loop0_144_type 1392",
          "480: #define _gather_143_type 1393",
          "481: #define _loop0_146_type 1394",
          "482: #define _gather_145_type 1395",
          "483: #define _loop0_148_type 1396",
          "484: #define _gather_147_type 1397",
          "485: #define _tmp_149_type 1398",
          "486: #define _tmp_150_type 1399",
          "487: #define _loop0_152_type 1400",
          "488: #define _gather_151_type 1401",
          "489: #define _tmp_153_type 1402",
          "490: #define _tmp_154_type 1403",
          "491: #define _tmp_155_type 1404",
          "492: #define _tmp_156_type 1405",
          "493: #define _tmp_157_type 1406",
          "494: #define _tmp_158_type 1407",
          "495: #define _tmp_159_type 1408",
          "496: #define _tmp_160_type 1409",
          "497: #define _tmp_161_type 1410",
          "498: #define _tmp_162_type 1411",
          "499: #define _loop0_163_type 1412",
          "500: #define _loop0_164_type 1413",
          "501: #define _loop0_165_type 1414",
          "502: #define _tmp_166_type 1415",
          "503: #define _tmp_167_type 1416",
          "504: #define _tmp_168_type 1417",
          "505: #define _tmp_169_type 1418",
          "506: #define _loop0_170_type 1419",
          "507: #define _loop0_171_type 1420",
          "508: #define _loop0_172_type 1421",
          "509: #define _loop1_173_type 1422",
          "510: #define _tmp_174_type 1423",
          "511: #define _loop0_175_type 1424",
          "512: #define _tmp_176_type 1425",
          "513: #define _loop0_177_type 1426",
          "514: #define _loop1_178_type 1427",
          "515: #define _tmp_179_type 1428",
          "516: #define _tmp_180_type 1429",
          "517: #define _tmp_181_type 1430",
          "518: #define _loop0_182_type 1431",
          "519: #define _tmp_183_type 1432",
          "520: #define _tmp_184_type 1433",
          "521: #define _loop1_185_type 1434",
          "522: #define _tmp_186_type 1435",
          "523: #define _loop0_187_type 1436",
          "524: #define _loop0_188_type 1437",
          "525: #define _loop0_189_type 1438",
          "526: #define _loop0_191_type 1439",
          "527: #define _gather_190_type 1440",
          "528: #define _tmp_192_type 1441",
          "529: #define _loop0_193_type 1442",
          "530: #define _tmp_194_type 1443",
          "531: #define _loop0_195_type 1444",
          "532: #define _loop1_196_type 1445",
          "533: #define _loop1_197_type 1446",
          "534: #define _tmp_198_type 1447",
          "535: #define _tmp_199_type 1448",
          "536: #define _loop0_200_type 1449",
          "537: #define _tmp_201_type 1450",
          "538: #define _tmp_202_type 1451",
          "539: #define _tmp_203_type 1452",
          "540: #define _loop0_205_type 1453",
          "541: #define _gather_204_type 1454",
          "542: #define _loop0_207_type 1455",
          "543: #define _gather_206_type 1456",
          "544: #define _loop0_209_type 1457",
          "545: #define _gather_208_type 1458",
          "546: #define _loop0_211_type 1459",
          "547: #define _gather_210_type 1460",
          "548: #define _loop0_213_type 1461",
          "549: #define _gather_212_type 1462",
          "550: #define _tmp_214_type 1463",
          "551: #define _loop0_215_type 1464",
          "552: #define _loop1_216_type 1465",
          "553: #define _tmp_217_type 1466",
          "554: #define _loop0_218_type 1467",
          "555: #define _loop1_219_type 1468",
          "556: #define _tmp_220_type 1469",
          "557: #define _tmp_221_type 1470",
          "558: #define _tmp_222_type 1471",
          "559: #define _tmp_223_type 1472",
          "560: #define _tmp_224_type 1473",
          "561: #define _tmp_225_type 1474",
          "562: #define _tmp_226_type 1475",
          "563: #define _tmp_227_type 1476",
          "564: #define _tmp_228_type 1477",
          "565: #define _tmp_229_type 1478",
          "566: #define _tmp_230_type 1479",
          "567: #define _loop0_232_type 1480",
          "568: #define _gather_231_type 1481",
          "569: #define _tmp_233_type 1482",
          "570: #define _tmp_234_type 1483",
          "571: #define _tmp_235_type 1484",
          "572: #define _tmp_236_type 1485",
          "573: #define _tmp_237_type 1486",
          "574: #define _tmp_238_type 1487",
          "575: #define _tmp_239_type 1488",
          "576: #define _loop0_240_type 1489",
          "577: #define _tmp_241_type 1490",
          "578: #define _tmp_242_type 1491",
          "579: #define _tmp_243_type 1492",
          "580: #define _tmp_244_type 1493",
          "581: #define _tmp_245_type 1494",
          "582: #define _tmp_246_type 1495",
          "583: #define _tmp_247_type 1496",
          "584: #define _tmp_248_type 1497",
          "585: #define _tmp_249_type 1498",
          "586: #define _tmp_250_type 1499",
          "587: #define _tmp_251_type 1500",
          "588: #define _tmp_252_type 1501",
          "589: #define _tmp_253_type 1502",
          "590: #define _tmp_254_type 1503",
          "591: #define _tmp_255_type 1504",
          "592: #define _tmp_256_type 1505",
          "593: #define _loop0_257_type 1506",
          "594: #define _tmp_258_type 1507",
          "595: #define _tmp_259_type 1508",
          "596: #define _tmp_260_type 1509",
          "597: #define _tmp_261_type 1510",
          "598: #define _tmp_262_type 1511",
          "599: #define _tmp_263_type 1512",
          "600: #define _tmp_264_type 1513",
          "601: #define _tmp_265_type 1514",
          "602: #define _tmp_266_type 1515",
          "603: #define _tmp_267_type 1516",
          "604: #define _tmp_268_type 1517",
          "605: #define _tmp_269_type 1518",
          "606: #define _tmp_270_type 1519",
          "607: #define _tmp_271_type 1520",
          "608: #define _tmp_272_type 1521",
          "609: #define _tmp_273_type 1522",
          "610: #define _loop0_275_type 1523",
          "611: #define _gather_274_type 1524",
          "612: #define _tmp_276_type 1525",
          "613: #define _tmp_277_type 1526",
          "614: #define _tmp_278_type 1527",
          "615: #define _tmp_279_type 1528",
          "616: #define _tmp_280_type 1529",
          "617: #define _tmp_281_type 1530",
          "",
          "[Added Lines]",
          "309: #define invalid_with_stmt_type 1222",
          "310: #define invalid_with_stmt_indent_type 1223",
          "311: #define invalid_try_stmt_type 1224",
          "312: #define invalid_except_stmt_type 1225",
          "313: #define invalid_finally_stmt_type 1226",
          "314: #define invalid_except_stmt_indent_type 1227",
          "315: #define invalid_except_star_stmt_indent_type 1228",
          "316: #define invalid_match_stmt_type 1229",
          "317: #define invalid_case_block_type 1230",
          "318: #define invalid_as_pattern_type 1231",
          "319: #define invalid_class_pattern_type 1232",
          "320: #define invalid_class_argument_pattern_type 1233",
          "321: #define invalid_if_stmt_type 1234",
          "322: #define invalid_elif_stmt_type 1235",
          "323: #define invalid_else_stmt_type 1236",
          "324: #define invalid_while_stmt_type 1237",
          "325: #define invalid_for_stmt_type 1238",
          "326: #define invalid_def_raw_type 1239",
          "327: #define invalid_class_def_raw_type 1240",
          "328: #define invalid_double_starred_kvpairs_type 1241",
          "329: #define invalid_kvpair_type 1242",
          "330: #define invalid_starred_expression_type 1243",
          "331: #define invalid_replacement_field_type 1244",
          "332: #define invalid_conversion_character_type 1245",
          "333: #define invalid_arithmetic_type 1246",
          "334: #define invalid_factor_type 1247",
          "335: #define invalid_type_params_type 1248",
          "336: #define _loop0_1_type 1249",
          "337: #define _loop0_2_type 1250",
          "338: #define _loop1_3_type 1251",
          "339: #define _loop0_5_type 1252",
          "340: #define _gather_4_type 1253",
          "341: #define _tmp_6_type 1254",
          "342: #define _tmp_7_type 1255",
          "343: #define _tmp_8_type 1256",
          "344: #define _tmp_9_type 1257",
          "345: #define _tmp_10_type 1258",
          "346: #define _tmp_11_type 1259",
          "347: #define _tmp_12_type 1260",
          "348: #define _tmp_13_type 1261",
          "349: #define _loop1_14_type 1262",
          "350: #define _tmp_15_type 1263",
          "351: #define _tmp_16_type 1264",
          "352: #define _tmp_17_type 1265",
          "353: #define _loop0_19_type 1266",
          "354: #define _gather_18_type 1267",
          "355: #define _loop0_21_type 1268",
          "356: #define _gather_20_type 1269",
          "357: #define _tmp_22_type 1270",
          "358: #define _tmp_23_type 1271",
          "359: #define _loop0_24_type 1272",
          "360: #define _loop1_25_type 1273",
          "361: #define _loop0_27_type 1274",
          "362: #define _gather_26_type 1275",
          "363: #define _tmp_28_type 1276",
          "364: #define _loop0_30_type 1277",
          "365: #define _gather_29_type 1278",
          "366: #define _tmp_31_type 1279",
          "367: #define _loop1_32_type 1280",
          "368: #define _tmp_33_type 1281",
          "369: #define _tmp_34_type 1282",
          "370: #define _tmp_35_type 1283",
          "371: #define _loop0_36_type 1284",
          "372: #define _loop0_37_type 1285",
          "373: #define _loop0_38_type 1286",
          "374: #define _loop1_39_type 1287",
          "375: #define _loop0_40_type 1288",
          "376: #define _loop1_41_type 1289",
          "377: #define _loop1_42_type 1290",
          "378: #define _loop1_43_type 1291",
          "379: #define _loop0_44_type 1292",
          "380: #define _loop1_45_type 1293",
          "381: #define _loop0_46_type 1294",
          "382: #define _loop1_47_type 1295",
          "383: #define _loop0_48_type 1296",
          "384: #define _loop0_49_type 1297",
          "385: #define _loop1_50_type 1298",
          "386: #define _loop0_52_type 1299",
          "387: #define _gather_51_type 1300",
          "388: #define _loop0_54_type 1301",
          "389: #define _gather_53_type 1302",
          "390: #define _loop0_56_type 1303",
          "391: #define _gather_55_type 1304",
          "392: #define _loop0_58_type 1305",
          "393: #define _gather_57_type 1306",
          "394: #define _tmp_59_type 1307",
          "395: #define _loop1_60_type 1308",
          "396: #define _loop1_61_type 1309",
          "397: #define _tmp_62_type 1310",
          "398: #define _tmp_63_type 1311",
          "399: #define _loop1_64_type 1312",
          "400: #define _loop0_66_type 1313",
          "401: #define _gather_65_type 1314",
          "402: #define _tmp_67_type 1315",
          "403: #define _tmp_68_type 1316",
          "404: #define _tmp_69_type 1317",
          "405: #define _tmp_70_type 1318",
          "406: #define _loop0_72_type 1319",
          "407: #define _gather_71_type 1320",
          "408: #define _loop0_74_type 1321",
          "409: #define _gather_73_type 1322",
          "410: #define _tmp_75_type 1323",
          "411: #define _loop0_77_type 1324",
          "412: #define _gather_76_type 1325",
          "413: #define _loop0_79_type 1326",
          "414: #define _gather_78_type 1327",
          "415: #define _loop0_81_type 1328",
          "416: #define _gather_80_type 1329",
          "417: #define _loop1_82_type 1330",
          "418: #define _loop1_83_type 1331",
          "419: #define _loop0_85_type 1332",
          "420: #define _gather_84_type 1333",
          "421: #define _loop1_86_type 1334",
          "422: #define _loop1_87_type 1335",
          "423: #define _loop1_88_type 1336",
          "424: #define _tmp_89_type 1337",
          "425: #define _loop0_91_type 1338",
          "426: #define _gather_90_type 1339",
          "427: #define _tmp_92_type 1340",
          "428: #define _tmp_93_type 1341",
          "429: #define _tmp_94_type 1342",
          "430: #define _tmp_95_type 1343",
          "431: #define _tmp_96_type 1344",
          "432: #define _tmp_97_type 1345",
          "433: #define _loop0_98_type 1346",
          "434: #define _loop0_99_type 1347",
          "435: #define _loop0_100_type 1348",
          "436: #define _loop1_101_type 1349",
          "437: #define _loop0_102_type 1350",
          "438: #define _loop1_103_type 1351",
          "439: #define _loop1_104_type 1352",
          "440: #define _loop1_105_type 1353",
          "441: #define _loop0_106_type 1354",
          "442: #define _loop1_107_type 1355",
          "443: #define _loop0_108_type 1356",
          "444: #define _loop1_109_type 1357",
          "445: #define _loop0_110_type 1358",
          "446: #define _loop1_111_type 1359",
          "447: #define _loop0_112_type 1360",
          "448: #define _loop0_113_type 1361",
          "449: #define _loop1_114_type 1362",
          "450: #define _tmp_115_type 1363",
          "451: #define _loop0_117_type 1364",
          "452: #define _gather_116_type 1365",
          "453: #define _loop1_118_type 1366",
          "454: #define _loop0_119_type 1367",
          "455: #define _loop0_120_type 1368",
          "456: #define _tmp_121_type 1369",
          "457: #define _tmp_122_type 1370",
          "458: #define _loop0_124_type 1371",
          "459: #define _gather_123_type 1372",
          "460: #define _tmp_125_type 1373",
          "461: #define _loop0_127_type 1374",
          "462: #define _gather_126_type 1375",
          "463: #define _loop0_129_type 1376",
          "464: #define _gather_128_type 1377",
          "465: #define _loop0_131_type 1378",
          "466: #define _gather_130_type 1379",
          "467: #define _loop0_133_type 1380",
          "468: #define _gather_132_type 1381",
          "469: #define _loop0_134_type 1382",
          "470: #define _loop0_136_type 1383",
          "471: #define _gather_135_type 1384",
          "472: #define _loop1_137_type 1385",
          "473: #define _tmp_138_type 1386",
          "474: #define _loop0_140_type 1387",
          "475: #define _gather_139_type 1388",
          "476: #define _loop0_142_type 1389",
          "477: #define _gather_141_type 1390",
          "478: #define _loop0_144_type 1391",
          "479: #define _gather_143_type 1392",
          "480: #define _loop0_146_type 1393",
          "481: #define _gather_145_type 1394",
          "482: #define _loop0_148_type 1395",
          "483: #define _gather_147_type 1396",
          "484: #define _tmp_149_type 1397",
          "485: #define _tmp_150_type 1398",
          "486: #define _loop0_152_type 1399",
          "487: #define _gather_151_type 1400",
          "488: #define _tmp_153_type 1401",
          "489: #define _tmp_154_type 1402",
          "490: #define _tmp_155_type 1403",
          "491: #define _tmp_156_type 1404",
          "492: #define _tmp_157_type 1405",
          "493: #define _tmp_158_type 1406",
          "494: #define _tmp_159_type 1407",
          "495: #define _tmp_160_type 1408",
          "496: #define _tmp_161_type 1409",
          "497: #define _tmp_162_type 1410",
          "498: #define _loop0_163_type 1411",
          "499: #define _loop0_164_type 1412",
          "500: #define _loop0_165_type 1413",
          "501: #define _tmp_166_type 1414",
          "502: #define _tmp_167_type 1415",
          "503: #define _tmp_168_type 1416",
          "504: #define _tmp_169_type 1417",
          "505: #define _loop0_170_type 1418",
          "506: #define _loop0_171_type 1419",
          "507: #define _loop0_172_type 1420",
          "508: #define _loop1_173_type 1421",
          "509: #define _tmp_174_type 1422",
          "510: #define _loop0_175_type 1423",
          "511: #define _tmp_176_type 1424",
          "512: #define _loop0_177_type 1425",
          "513: #define _loop1_178_type 1426",
          "514: #define _tmp_179_type 1427",
          "515: #define _tmp_180_type 1428",
          "516: #define _tmp_181_type 1429",
          "517: #define _loop0_182_type 1430",
          "518: #define _tmp_183_type 1431",
          "519: #define _tmp_184_type 1432",
          "520: #define _loop1_185_type 1433",
          "521: #define _tmp_186_type 1434",
          "522: #define _loop0_187_type 1435",
          "523: #define _loop0_188_type 1436",
          "524: #define _loop0_189_type 1437",
          "525: #define _loop0_191_type 1438",
          "526: #define _gather_190_type 1439",
          "527: #define _tmp_192_type 1440",
          "528: #define _loop0_193_type 1441",
          "529: #define _tmp_194_type 1442",
          "530: #define _loop0_195_type 1443",
          "531: #define _loop1_196_type 1444",
          "532: #define _loop1_197_type 1445",
          "533: #define _tmp_198_type 1446",
          "534: #define _tmp_199_type 1447",
          "535: #define _loop0_200_type 1448",
          "536: #define _tmp_201_type 1449",
          "537: #define _tmp_202_type 1450",
          "538: #define _tmp_203_type 1451",
          "539: #define _loop0_205_type 1452",
          "540: #define _gather_204_type 1453",
          "541: #define _loop0_207_type 1454",
          "542: #define _gather_206_type 1455",
          "543: #define _loop0_209_type 1456",
          "544: #define _gather_208_type 1457",
          "545: #define _loop0_211_type 1458",
          "546: #define _gather_210_type 1459",
          "547: #define _loop0_213_type 1460",
          "548: #define _gather_212_type 1461",
          "549: #define _tmp_214_type 1462",
          "550: #define _loop0_215_type 1463",
          "551: #define _loop1_216_type 1464",
          "552: #define _tmp_217_type 1465",
          "553: #define _loop0_218_type 1466",
          "554: #define _loop1_219_type 1467",
          "555: #define _tmp_220_type 1468",
          "556: #define _tmp_221_type 1469",
          "557: #define _tmp_222_type 1470",
          "558: #define _tmp_223_type 1471",
          "559: #define _tmp_224_type 1472",
          "560: #define _tmp_225_type 1473",
          "561: #define _tmp_226_type 1474",
          "562: #define _tmp_227_type 1475",
          "563: #define _tmp_228_type 1476",
          "564: #define _tmp_229_type 1477",
          "565: #define _tmp_230_type 1478",
          "566: #define _loop0_232_type 1479",
          "567: #define _gather_231_type 1480",
          "568: #define _tmp_233_type 1481",
          "569: #define _tmp_234_type 1482",
          "570: #define _tmp_235_type 1483",
          "571: #define _tmp_236_type 1484",
          "572: #define _tmp_237_type 1485",
          "573: #define _tmp_238_type 1486",
          "574: #define _tmp_239_type 1487",
          "575: #define _loop0_240_type 1488",
          "576: #define _tmp_241_type 1489",
          "577: #define _tmp_242_type 1490",
          "578: #define _tmp_243_type 1491",
          "579: #define _tmp_244_type 1492",
          "580: #define _tmp_245_type 1493",
          "581: #define _tmp_246_type 1494",
          "582: #define _tmp_247_type 1495",
          "583: #define _tmp_248_type 1496",
          "584: #define _tmp_249_type 1497",
          "585: #define _tmp_250_type 1498",
          "586: #define _tmp_251_type 1499",
          "587: #define _tmp_252_type 1500",
          "588: #define _tmp_253_type 1501",
          "589: #define _tmp_254_type 1502",
          "590: #define _tmp_255_type 1503",
          "591: #define _tmp_256_type 1504",
          "592: #define _loop0_257_type 1505",
          "593: #define _tmp_258_type 1506",
          "594: #define _tmp_259_type 1507",
          "595: #define _tmp_260_type 1508",
          "596: #define _tmp_261_type 1509",
          "597: #define _tmp_262_type 1510",
          "598: #define _tmp_263_type 1511",
          "599: #define _tmp_264_type 1512",
          "600: #define _tmp_265_type 1513",
          "601: #define _tmp_266_type 1514",
          "602: #define _tmp_267_type 1515",
          "603: #define _tmp_268_type 1516",
          "604: #define _tmp_269_type 1517",
          "605: #define _tmp_270_type 1518",
          "606: #define _tmp_271_type 1519",
          "607: #define _tmp_272_type 1520",
          "608: #define _tmp_273_type 1521",
          "609: #define _loop0_275_type 1522",
          "610: #define _gather_274_type 1523",
          "611: #define _tmp_276_type 1524",
          "612: #define _tmp_277_type 1525",
          "613: #define _tmp_278_type 1526",
          "614: #define _tmp_279_type 1527",
          "615: #define _tmp_280_type 1528",
          "616: #define _tmp_281_type 1529",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "838: static void *invalid_group_rule(Parser *p);",
          "839: static void *invalid_import_rule(Parser *p);",
          "840: static void *invalid_import_from_targets_rule(Parser *p);",
          "842: static void *invalid_with_stmt_rule(Parser *p);",
          "843: static void *invalid_with_stmt_indent_rule(Parser *p);",
          "844: static void *invalid_try_stmt_rule(Parser *p);",
          "",
          "[Removed Lines]",
          "841: static void *invalid_compound_stmt_rule(Parser *p);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2077:     }",
          "2078:     stmt_ty _res = NULL;",
          "2079:     int _mark = p->mark;",
          "2099:     { // &('def' | '@' | 'async') function_def",
          "2100:         if (p->error_indicator) {",
          "2101:             p->level--;",
          "",
          "[Removed Lines]",
          "2080:     if (p->call_invalid_rules) { // invalid_compound_stmt",
          "2081:         if (p->error_indicator) {",
          "2082:             p->level--;",
          "2083:             return NULL;",
          "2084:         }",
          "2085:         D(fprintf(stderr, \"%*c> compound_stmt[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"invalid_compound_stmt\"));",
          "2086:         void *invalid_compound_stmt_var;",
          "2087:         if (",
          "2088:             (invalid_compound_stmt_var = invalid_compound_stmt_rule(p))  // invalid_compound_stmt",
          "2089:         )",
          "2090:         {",
          "2091:             D(fprintf(stderr, \"%*c+ compound_stmt[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"invalid_compound_stmt\"));",
          "2092:             _res = invalid_compound_stmt_var;",
          "2093:             goto done;",
          "2094:         }",
          "2095:         p->mark = _mark;",
          "2096:         D(fprintf(stderr, \"%*c%s compound_stmt[%d-%d]: %s failed!\\n\", p->level, ' ',",
          "2097:                   p->error_indicator ? \"ERROR!\" : \"-\", _mark, p->mark, \"invalid_compound_stmt\"));",
          "2098:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2125:         D(fprintf(stderr, \"%*c> compound_stmt[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"&'if' if_stmt\"));",
          "2126:         stmt_ty if_stmt_var;",
          "2127:         if (",
          "2129:             &&",
          "2130:             (if_stmt_var = if_stmt_rule(p))  // if_stmt",
          "2131:         )",
          "",
          "[Removed Lines]",
          "2128:             _PyPegen_lookahead_with_int(1, _PyPegen_expect_token, p, 662)  // token='if'",
          "",
          "[Added Lines]",
          "2106:             _PyPegen_lookahead_with_int(1, _PyPegen_expect_token, p, 660)  // token='if'",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2209:         D(fprintf(stderr, \"%*c> compound_stmt[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"&'try' try_stmt\"));",
          "2210:         stmt_ty try_stmt_var;",
          "2211:         if (",
          "2213:             &&",
          "2214:             (try_stmt_var = try_stmt_rule(p))  // try_stmt",
          "2215:         )",
          "",
          "[Removed Lines]",
          "2212:             _PyPegen_lookahead_with_int(1, _PyPegen_expect_token, p, 644)  // token='try'",
          "",
          "[Added Lines]",
          "2190:             _PyPegen_lookahead_with_int(1, _PyPegen_expect_token, p, 642)  // token='try'",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2230:         D(fprintf(stderr, \"%*c> compound_stmt[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"&'while' while_stmt\"));",
          "2231:         stmt_ty while_stmt_var;",
          "2232:         if (",
          "2234:             &&",
          "2235:             (while_stmt_var = while_stmt_rule(p))  // while_stmt",
          "2236:         )",
          "",
          "[Removed Lines]",
          "2233:             _PyPegen_lookahead_with_int(1, _PyPegen_expect_token, p, 667)  // token='while'",
          "",
          "[Added Lines]",
          "2211:             _PyPegen_lookahead_with_int(1, _PyPegen_expect_token, p, 665)  // token='while'",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4370:         asdl_stmt_seq* c;",
          "4371:         void *t;",
          "4372:         if (",
          "4374:             &&",
          "4375:             (a = _PyPegen_name_token(p))  // NAME",
          "4376:             &&",
          "",
          "[Removed Lines]",
          "4373:             (_keyword = _PyPegen_expect_token(p, 679))  // token='class'",
          "",
          "[Added Lines]",
          "4351:             (_keyword = _PyPegen_expect_token(p, 677))  // token='class'",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4537:         void *t;",
          "4538:         void *tc;",
          "4539:         if (",
          "4541:             &&",
          "4542:             (n = _PyPegen_name_token(p))  // NAME",
          "4543:             &&",
          "",
          "[Removed Lines]",
          "4540:             (_keyword = _PyPegen_expect_token(p, 677))  // token='def'",
          "",
          "[Added Lines]",
          "4518:             (_keyword = _PyPegen_expect_token(p, 675))  // token='def'",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4598:         void *t;",
          "4599:         void *tc;",
          "4600:         if (",
          "4602:             &&",
          "4604:             &&",
          "4605:             (n = _PyPegen_name_token(p))  // NAME",
          "4606:             &&",
          "",
          "[Removed Lines]",
          "4601:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "4603:             (_keyword_1 = _PyPegen_expect_token(p, 677))  // token='def'",
          "",
          "[Added Lines]",
          "4579:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "4581:             (_keyword_1 = _PyPegen_expect_token(p, 675))  // token='def'",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5938:         asdl_stmt_seq* b;",
          "5939:         stmt_ty c;",
          "5940:         if (",
          "5942:             &&",
          "5943:             (a = named_expression_rule(p))  // named_expression",
          "5944:             &&",
          "",
          "[Removed Lines]",
          "5941:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "5919:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5983:         asdl_stmt_seq* b;",
          "5984:         void *c;",
          "5985:         if (",
          "5987:             &&",
          "5988:             (a = named_expression_rule(p))  // named_expression",
          "5989:             &&",
          "",
          "[Removed Lines]",
          "5986:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "5964:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6078:         asdl_stmt_seq* b;",
          "6079:         stmt_ty c;",
          "6080:         if (",
          "6082:             &&",
          "6083:             (a = named_expression_rule(p))  // named_expression",
          "6084:             &&",
          "",
          "[Removed Lines]",
          "6081:             (_keyword = _PyPegen_expect_token(p, 664))  // token='elif'",
          "",
          "[Added Lines]",
          "6059:             (_keyword = _PyPegen_expect_token(p, 662))  // token='elif'",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6123:         asdl_stmt_seq* b;",
          "6124:         void *c;",
          "6125:         if (",
          "6127:             &&",
          "6128:             (a = named_expression_rule(p))  // named_expression",
          "6129:             &&",
          "",
          "[Removed Lines]",
          "6126:             (_keyword = _PyPegen_expect_token(p, 664))  // token='elif'",
          "",
          "[Added Lines]",
          "6104:             (_keyword = _PyPegen_expect_token(p, 662))  // token='elif'",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6204:         Token * _literal;",
          "6205:         asdl_stmt_seq* b;",
          "6206:         if (",
          "6208:             &&",
          "6209:             (_literal = _PyPegen_expect_forced_token(p, 11, \":\"))  // forced_token=':'",
          "6210:             &&",
          "",
          "[Removed Lines]",
          "6207:             (_keyword = _PyPegen_expect_token(p, 665))  // token='else'",
          "",
          "[Added Lines]",
          "6185:             (_keyword = _PyPegen_expect_token(p, 663))  // token='else'",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6283:         asdl_stmt_seq* b;",
          "6284:         void *c;",
          "6285:         if (",
          "6287:             &&",
          "6288:             (a = named_expression_rule(p))  // named_expression",
          "6289:             &&",
          "",
          "[Removed Lines]",
          "6286:             (_keyword = _PyPegen_expect_token(p, 667))  // token='while'",
          "",
          "[Added Lines]",
          "6264:             (_keyword = _PyPegen_expect_token(p, 665))  // token='while'",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6383:         expr_ty t;",
          "6384:         void *tc;",
          "6385:         if (",
          "6387:             &&",
          "6388:             (t = star_targets_rule(p))  // star_targets",
          "6389:             &&",
          "6391:             &&",
          "6392:             (_cut_var = 1)",
          "6393:             &&",
          "",
          "[Removed Lines]",
          "6386:             (_keyword = _PyPegen_expect_token(p, 672))  // token='for'",
          "6390:             (_keyword_1 = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "6364:             (_keyword = _PyPegen_expect_token(p, 670))  // token='for'",
          "6368:             (_keyword_1 = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6445:         expr_ty t;",
          "6446:         void *tc;",
          "6447:         if (",
          "6449:             &&",
          "6451:             &&",
          "6452:             (t = star_targets_rule(p))  // star_targets",
          "6453:             &&",
          "6455:             &&",
          "6456:             (_cut_var = 1)",
          "6457:             &&",
          "",
          "[Removed Lines]",
          "6448:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "6450:             (_keyword_1 = _PyPegen_expect_token(p, 672))  // token='for'",
          "6454:             (_keyword_2 = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "6426:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "6428:             (_keyword_1 = _PyPegen_expect_token(p, 670))  // token='for'",
          "6432:             (_keyword_2 = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6580:         asdl_stmt_seq* b;",
          "6581:         void *tc;",
          "6582:         if (",
          "6584:             &&",
          "6585:             (_literal = _PyPegen_expect_token(p, 7))  // token='('",
          "6586:             &&",
          "",
          "[Removed Lines]",
          "6583:             (_keyword = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "6561:             (_keyword = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6631:         asdl_stmt_seq* b;",
          "6632:         void *tc;",
          "6633:         if (",
          "6635:             &&",
          "6636:             (a = (asdl_withitem_seq*)_gather_53_rule(p))  // ','.with_item+",
          "6637:             &&",
          "",
          "[Removed Lines]",
          "6634:             (_keyword = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "6612:             (_keyword = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6680:         asdl_withitem_seq* a;",
          "6681:         asdl_stmt_seq* b;",
          "6682:         if (",
          "6684:             &&",
          "6686:             &&",
          "6687:             (_literal = _PyPegen_expect_token(p, 7))  // token='('",
          "6688:             &&",
          "",
          "[Removed Lines]",
          "6683:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "6685:             (_keyword_1 = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "6661:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "6663:             (_keyword_1 = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6732:         asdl_stmt_seq* b;",
          "6733:         void *tc;",
          "6734:         if (",
          "6736:             &&",
          "6738:             &&",
          "6739:             (a = (asdl_withitem_seq*)_gather_57_rule(p))  // ','.with_item+",
          "6740:             &&",
          "",
          "[Removed Lines]",
          "6735:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "6737:             (_keyword_1 = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "6713:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "6715:             (_keyword_1 = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6820:         if (",
          "6821:             (e = expression_rule(p))  // expression",
          "6822:             &&",
          "6824:             &&",
          "6825:             (t = star_target_rule(p))  // star_target",
          "6826:             &&",
          "",
          "[Removed Lines]",
          "6823:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "6801:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6945:         asdl_stmt_seq* b;",
          "6946:         asdl_stmt_seq* f;",
          "6947:         if (",
          "6949:             &&",
          "6950:             (_literal = _PyPegen_expect_forced_token(p, 11, \":\"))  // forced_token=':'",
          "6951:             &&",
          "",
          "[Removed Lines]",
          "6948:             (_keyword = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "6926:             (_keyword = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6989:         asdl_excepthandler_seq* ex;",
          "6990:         void *f;",
          "6991:         if (",
          "6993:             &&",
          "6994:             (_literal = _PyPegen_expect_forced_token(p, 11, \":\"))  // forced_token=':'",
          "6995:             &&",
          "",
          "[Removed Lines]",
          "6992:             (_keyword = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "6970:             (_keyword = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "7037:         asdl_excepthandler_seq* ex;",
          "7038:         void *f;",
          "7039:         if (",
          "7041:             &&",
          "7042:             (_literal = _PyPegen_expect_forced_token(p, 11, \":\"))  // forced_token=':'",
          "7043:             &&",
          "",
          "[Removed Lines]",
          "7040:             (_keyword = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "7018:             (_keyword = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7135:         expr_ty e;",
          "7136:         void *t;",
          "7137:         if (",
          "7139:             &&",
          "7140:             (e = expression_rule(p))  // expression",
          "7141:             &&",
          "",
          "[Removed Lines]",
          "7138:             (_keyword = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "7116:             (_keyword = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7178:         Token * _literal;",
          "7179:         asdl_stmt_seq* b;",
          "7180:         if (",
          "7182:             &&",
          "7183:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "7184:             &&",
          "",
          "[Removed Lines]",
          "7181:             (_keyword = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "7159:             (_keyword = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7289:         expr_ty e;",
          "7290:         void *t;",
          "7291:         if (",
          "7293:             &&",
          "7294:             (_literal = _PyPegen_expect_token(p, 16))  // token='*'",
          "7295:             &&",
          "",
          "[Removed Lines]",
          "7292:             (_keyword = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "7270:             (_keyword = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7391:         Token * _literal;",
          "7392:         asdl_stmt_seq* a;",
          "7393:         if (",
          "7395:             &&",
          "7396:             (_literal = _PyPegen_expect_forced_token(p, 11, \":\"))  // forced_token=':'",
          "7397:             &&",
          "",
          "[Removed Lines]",
          "7394:             (_keyword = _PyPegen_expect_token(p, 653))  // token='finally'",
          "",
          "[Added Lines]",
          "7372:             (_keyword = _PyPegen_expect_token(p, 651))  // token='finally'",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7699:         Token * _keyword;",
          "7700:         expr_ty guard;",
          "7701:         if (",
          "7703:             &&",
          "7704:             (guard = named_expression_rule(p))  // named_expression",
          "7705:         )",
          "",
          "[Removed Lines]",
          "7702:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "7680:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7894:         if (",
          "7895:             (pattern = or_pattern_rule(p))  // or_pattern",
          "7896:             &&",
          "7898:             &&",
          "7899:             (target = pattern_capture_target_rule(p))  // pattern_capture_target",
          "7900:         )",
          "",
          "[Removed Lines]",
          "7897:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "7875:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "11237:         if (",
          "11238:             (a = disjunction_rule(p))  // disjunction",
          "11239:             &&",
          "11241:             &&",
          "11242:             (b = disjunction_rule(p))  // disjunction",
          "11243:             &&",
          "11245:             &&",
          "11246:             (c = expression_rule(p))  // expression",
          "11247:         )",
          "",
          "[Removed Lines]",
          "11240:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "11244:             (_keyword_1 = _PyPegen_expect_token(p, 665))  // token='else'",
          "",
          "[Added Lines]",
          "11218:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "11222:             (_keyword_1 = _PyPegen_expect_token(p, 663))  // token='else'",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "12123:         Token * _keyword;",
          "12124:         expr_ty a;",
          "12125:         if (",
          "12127:             &&",
          "12128:             (a = inversion_rule(p))  // inversion",
          "12129:         )",
          "",
          "[Removed Lines]",
          "12126:             (_keyword = _PyPegen_expect_token(p, 681))  // token='not'",
          "",
          "[Added Lines]",
          "12104:             (_keyword = _PyPegen_expect_token(p, 679))  // token='not'",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "12777:         Token * _keyword_1;",
          "12778:         expr_ty a;",
          "12779:         if (",
          "12781:             &&",
          "12783:             &&",
          "12784:             (a = bitwise_or_rule(p))  // bitwise_or",
          "12785:         )",
          "",
          "[Removed Lines]",
          "12780:             (_keyword = _PyPegen_expect_token(p, 681))  // token='not'",
          "12782:             (_keyword_1 = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "12758:             (_keyword = _PyPegen_expect_token(p, 679))  // token='not'",
          "12760:             (_keyword_1 = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "12825:         Token * _keyword;",
          "12826:         expr_ty a;",
          "12827:         if (",
          "12829:             &&",
          "12830:             (a = bitwise_or_rule(p))  // bitwise_or",
          "12831:         )",
          "",
          "[Removed Lines]",
          "12828:             (_keyword = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "12806:             (_keyword = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "12874:         if (",
          "12875:             (_keyword = _PyPegen_expect_token(p, 589))  // token='is'",
          "12876:             &&",
          "12878:             &&",
          "12879:             (a = bitwise_or_rule(p))  // bitwise_or",
          "12880:         )",
          "",
          "[Removed Lines]",
          "12877:             (_keyword_1 = _PyPegen_expect_token(p, 681))  // token='not'",
          "",
          "[Added Lines]",
          "12855:             (_keyword_1 = _PyPegen_expect_token(p, 679))  // token='not'",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "17045:         expr_ty b;",
          "17046:         asdl_expr_seq* c;",
          "17047:         if (",
          "17049:             &&",
          "17051:             &&",
          "17052:             (a = star_targets_rule(p))  // star_targets",
          "17053:             &&",
          "17055:             &&",
          "17056:             (_cut_var = 1)",
          "17057:             &&",
          "",
          "[Removed Lines]",
          "17048:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "17050:             (_keyword_1 = _PyPegen_expect_token(p, 672))  // token='for'",
          "17054:             (_keyword_2 = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "17026:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "17028:             (_keyword_1 = _PyPegen_expect_token(p, 670))  // token='for'",
          "17032:             (_keyword_2 = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "17090:         expr_ty b;",
          "17091:         asdl_expr_seq* c;",
          "17092:         if (",
          "17094:             &&",
          "17095:             (a = star_targets_rule(p))  // star_targets",
          "17096:             &&",
          "17098:             &&",
          "17099:             (_cut_var = 1)",
          "17100:             &&",
          "",
          "[Removed Lines]",
          "17093:             (_keyword = _PyPegen_expect_token(p, 672))  // token='for'",
          "17097:             (_keyword_1 = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "17071:             (_keyword = _PyPegen_expect_token(p, 670))  // token='for'",
          "17075:             (_keyword_1 = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "17131:         UNUSED(_opt_var); // Silence compiler warnings",
          "17132:         void *_tmp_121_var;",
          "17133:         if (",
          "17135:             &&",
          "17137:             &&",
          "17138:             (_tmp_121_var = _tmp_121_rule(p))  // bitwise_or ((',' bitwise_or))* ','?",
          "17139:             &&",
          "17141:         )",
          "17142:         {",
          "17143:             D(fprintf(stderr, \"%*c+ for_if_clause[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'async'? 'for' (bitwise_or ((',' bitwise_or))* ','?) !'in'\"));",
          "",
          "[Removed Lines]",
          "17134:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "17136:             (_keyword = _PyPegen_expect_token(p, 672))  // token='for'",
          "17140:             _PyPegen_lookahead_with_int(0, _PyPegen_expect_token, p, 673)  // token='in'",
          "",
          "[Added Lines]",
          "17112:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "17114:             (_keyword = _PyPegen_expect_token(p, 670))  // token='for'",
          "17118:             _PyPegen_lookahead_with_int(0, _PyPegen_expect_token, p, 671)  // token='in'",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "20411:         if (",
          "20412:             (a = disjunction_rule(p))  // disjunction",
          "20413:             &&",
          "20415:             &&",
          "20416:             (b = disjunction_rule(p))  // disjunction",
          "20417:             &&",
          "20419:             &&",
          "20420:             (c = expression_rule(p))  // expression",
          "20421:         )",
          "",
          "[Removed Lines]",
          "20414:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "20418:             (_keyword_1 = _PyPegen_expect_token(p, 665))  // token='else'",
          "",
          "[Added Lines]",
          "20392:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "20396:             (_keyword_1 = _PyPegen_expect_token(p, 663))  // token='else'",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "20596:         if (",
          "20597:             (a = disjunction_rule(p))  // disjunction",
          "20598:             &&",
          "20600:             &&",
          "20601:             (b = disjunction_rule(p))  // disjunction",
          "20602:             &&",
          "",
          "[Removed Lines]",
          "20599:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "20577:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "22534:         if (",
          "22535:             (expression_var = expression_rule(p))  // expression",
          "22536:             &&",
          "22538:             &&",
          "22539:             (a = expression_rule(p))  // expression",
          "22540:             &&",
          "",
          "[Removed Lines]",
          "22537:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "22515:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "22584:         UNUSED(_opt_var); // Silence compiler warnings",
          "22585:         expr_ty a;",
          "22586:         if (",
          "22588:             &&",
          "22590:             &&",
          "22591:             (a = star_expressions_rule(p))  // star_expressions",
          "22592:         )",
          "",
          "[Removed Lines]",
          "22587:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "22589:             (_keyword = _PyPegen_expect_token(p, 672))  // token='for'",
          "",
          "[Added Lines]",
          "22565:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "22567:             (_keyword = _PyPegen_expect_token(p, 670))  // token='for'",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "22844:     return _res;",
          "22845: }",
          "",
          "[Removed Lines]",
          "22848: static void *",
          "22849: invalid_compound_stmt_rule(Parser *p)",
          "22850: {",
          "22851:     if (p->level++ == MAXSTACK) {",
          "22852:         _Pypegen_stack_overflow(p);",
          "22853:     }",
          "22854:     if (p->error_indicator) {",
          "22855:         p->level--;",
          "22856:         return NULL;",
          "22857:     }",
          "22858:     void * _res = NULL;",
          "22859:     int _mark = p->mark;",
          "22860:     { // 'elif' named_expression ':'",
          "22861:         if (p->error_indicator) {",
          "22862:             p->level--;",
          "22863:             return NULL;",
          "22864:         }",
          "22865:         D(fprintf(stderr, \"%*c> invalid_compound_stmt[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'elif' named_expression ':'\"));",
          "22866:         Token * _literal;",
          "22867:         Token * a;",
          "22868:         expr_ty named_expression_var;",
          "22869:         if (",
          "22870:             (a = _PyPegen_expect_token(p, 664))  // token='elif'",
          "22871:             &&",
          "22872:             (named_expression_var = named_expression_rule(p))  // named_expression",
          "22873:             &&",
          "22874:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "22875:         )",
          "22876:         {",
          "22877:             D(fprintf(stderr, \"%*c+ invalid_compound_stmt[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'elif' named_expression ':'\"));",
          "22878:             _res = RAISE_SYNTAX_ERROR_STARTING_FROM ( a , \"'elif' must match an if-statement here\" );",
          "22879:             if (_res == NULL && PyErr_Occurred()) {",
          "22880:                 p->error_indicator = 1;",
          "22881:                 p->level--;",
          "22882:                 return NULL;",
          "22883:             }",
          "22884:             goto done;",
          "22885:         }",
          "22886:         p->mark = _mark;",
          "22887:         D(fprintf(stderr, \"%*c%s invalid_compound_stmt[%d-%d]: %s failed!\\n\", p->level, ' ',",
          "22888:                   p->error_indicator ? \"ERROR!\" : \"-\", _mark, p->mark, \"'elif' named_expression ':'\"));",
          "22889:     }",
          "22890:     { // 'else' ':'",
          "22891:         if (p->error_indicator) {",
          "22892:             p->level--;",
          "22893:             return NULL;",
          "22894:         }",
          "22895:         D(fprintf(stderr, \"%*c> invalid_compound_stmt[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'else' ':'\"));",
          "22896:         Token * _literal;",
          "22897:         Token * a;",
          "22898:         if (",
          "22899:             (a = _PyPegen_expect_token(p, 665))  // token='else'",
          "22900:             &&",
          "22901:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "22902:         )",
          "22903:         {",
          "22904:             D(fprintf(stderr, \"%*c+ invalid_compound_stmt[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'else' ':'\"));",
          "22905:             _res = RAISE_SYNTAX_ERROR_STARTING_FROM ( a , \"'else' must match a valid statement here\" );",
          "22906:             if (_res == NULL && PyErr_Occurred()) {",
          "22907:                 p->error_indicator = 1;",
          "22908:                 p->level--;",
          "22909:                 return NULL;",
          "22910:             }",
          "22911:             goto done;",
          "22912:         }",
          "22913:         p->mark = _mark;",
          "22914:         D(fprintf(stderr, \"%*c%s invalid_compound_stmt[%d-%d]: %s failed!\\n\", p->level, ' ',",
          "22915:                   p->error_indicator ? \"ERROR!\" : \"-\", _mark, p->mark, \"'else' ':'\"));",
          "22916:     }",
          "22917:     _res = NULL;",
          "22918:   done:",
          "22919:     p->level--;",
          "22920:     return _res;",
          "22921: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "22947:         UNUSED(_opt_var); // Silence compiler warnings",
          "22948:         Token * newline_var;",
          "22949:         if (",
          "22951:             &&",
          "22953:             &&",
          "22954:             (_gather_206_var = _gather_206_rule(p))  // ','.(expression ['as' star_target])+",
          "22955:             &&",
          "",
          "[Removed Lines]",
          "22950:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "22952:             (_keyword = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "22852:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "22854:             (_keyword = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "22985:         UNUSED(_opt_var_1); // Silence compiler warnings",
          "22986:         Token * newline_var;",
          "22987:         if (",
          "22989:             &&",
          "22991:             &&",
          "22992:             (_literal = _PyPegen_expect_token(p, 7))  // token='('",
          "22993:             &&",
          "",
          "[Removed Lines]",
          "22988:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "22990:             (_keyword = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "22890:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "22892:             (_keyword = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "23047:         Token * a;",
          "23048:         Token * newline_var;",
          "23049:         if (",
          "23051:             &&",
          "23053:             &&",
          "23054:             (_gather_210_var = _gather_210_rule(p))  // ','.(expression ['as' star_target])+",
          "23055:             &&",
          "",
          "[Removed Lines]",
          "23050:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "23052:             (a = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "22952:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "22954:             (a = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "23090:         Token * a;",
          "23091:         Token * newline_var;",
          "23092:         if (",
          "23094:             &&",
          "23096:             &&",
          "23097:             (_literal = _PyPegen_expect_token(p, 7))  // token='('",
          "23098:             &&",
          "",
          "[Removed Lines]",
          "23093:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "23095:             (a = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "22995:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "22997:             (a = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "23155:         Token * a;",
          "23156:         Token * newline_var;",
          "23157:         if (",
          "23159:             &&",
          "23160:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "23161:             &&",
          "",
          "[Removed Lines]",
          "23158:             (a = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "23060:             (a = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "23187:         Token * _literal;",
          "23188:         asdl_stmt_seq* block_var;",
          "23189:         if (",
          "23191:             &&",
          "23192:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "23193:             &&",
          "",
          "[Removed Lines]",
          "23190:             (_keyword = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "23092:             (_keyword = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "23226:         Token * b;",
          "23227:         expr_ty expression_var;",
          "23228:         if (",
          "23230:             &&",
          "23231:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "23232:             &&",
          "",
          "[Removed Lines]",
          "23229:             (_keyword = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "23131:             (_keyword = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "23234:             &&",
          "23235:             (_loop1_216_var = _loop1_216_rule(p))  // except_block+",
          "23236:             &&",
          "23238:             &&",
          "23239:             (b = _PyPegen_expect_token(p, 16))  // token='*'",
          "23240:             &&",
          "",
          "[Removed Lines]",
          "23237:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23139:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "23273:         UNUSED(_opt_var); // Silence compiler warnings",
          "23274:         Token * a;",
          "23275:         if (",
          "23277:             &&",
          "23278:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "23279:             &&",
          "",
          "[Removed Lines]",
          "23276:             (_keyword = _PyPegen_expect_token(p, 644))  // token='try'",
          "",
          "[Added Lines]",
          "23178:             (_keyword = _PyPegen_expect_token(p, 642))  // token='try'",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "23281:             &&",
          "23282:             (_loop1_219_var = _loop1_219_rule(p))  // except_star_block+",
          "23283:             &&",
          "23285:             &&",
          "23286:             (_opt_var = _tmp_220_rule(p), !p->error_indicator)  // [expression ['as' NAME]]",
          "23287:             &&",
          "",
          "[Removed Lines]",
          "23284:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23186:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "23340:         expr_ty a;",
          "23341:         expr_ty expressions_var;",
          "23342:         if (",
          "23344:             &&",
          "23345:             (_opt_var = _PyPegen_expect_token(p, 16), !p->error_indicator)  // '*'?",
          "23346:             &&",
          "",
          "[Removed Lines]",
          "23343:             (_keyword = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23245:             (_keyword = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "23382:         expr_ty expression_var;",
          "23383:         Token * newline_var;",
          "23384:         if (",
          "23386:             &&",
          "23387:             (_opt_var = _PyPegen_expect_token(p, 16), !p->error_indicator)  // '*'?",
          "23388:             &&",
          "",
          "[Removed Lines]",
          "23385:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23287:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "23415:         Token * a;",
          "23416:         Token * newline_var;",
          "23417:         if (",
          "23419:             &&",
          "23420:             (newline_var = _PyPegen_expect_token(p, NEWLINE))  // token='NEWLINE'",
          "23421:         )",
          "",
          "[Removed Lines]",
          "23418:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23320:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "23443:         void *_tmp_223_var;",
          "23444:         Token * a;",
          "23445:         if (",
          "23447:             &&",
          "23448:             (_literal = _PyPegen_expect_token(p, 16))  // token='*'",
          "23449:             &&",
          "",
          "[Removed Lines]",
          "23446:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23348:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "23492:         Token * a;",
          "23493:         Token * newline_var;",
          "23494:         if (",
          "23496:             &&",
          "23497:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "23498:             &&",
          "",
          "[Removed Lines]",
          "23495:             (a = _PyPegen_expect_token(p, 653))  // token='finally'",
          "",
          "[Added Lines]",
          "23397:             (a = _PyPegen_expect_token(p, 651))  // token='finally'",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "23548:         expr_ty expression_var;",
          "23549:         Token * newline_var;",
          "23550:         if (",
          "23552:             &&",
          "23553:             (expression_var = expression_rule(p))  // expression",
          "23554:             &&",
          "",
          "[Removed Lines]",
          "23551:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23453:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "23584:         Token * a;",
          "23585:         Token * newline_var;",
          "23586:         if (",
          "23588:             &&",
          "23589:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "23590:             &&",
          "",
          "[Removed Lines]",
          "23587:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23489:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "23640:         expr_ty expression_var;",
          "23641:         Token * newline_var;",
          "23642:         if (",
          "23644:             &&",
          "23645:             (_literal = _PyPegen_expect_token(p, 16))  // token='*'",
          "23646:             &&",
          "",
          "[Removed Lines]",
          "23643:             (a = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "23545:             (a = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "23879:         if (",
          "23880:             (or_pattern_var = or_pattern_rule(p))  // or_pattern",
          "23881:             &&",
          "23883:             &&",
          "23884:             (a = _PyPegen_expect_soft_keyword(p, \"_\"))  // soft_keyword='\"_\"'",
          "23885:         )",
          "",
          "[Removed Lines]",
          "23882:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "23784:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "23909:         if (",
          "23910:             (or_pattern_var = or_pattern_rule(p))  // or_pattern",
          "23911:             &&",
          "23913:             &&",
          "23914:             _PyPegen_lookahead_with_name(0, _PyPegen_name_token, p)",
          "23915:             &&",
          "",
          "[Removed Lines]",
          "23912:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "23814:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "24063:         expr_ty named_expression_var;",
          "24064:         Token * newline_var;",
          "24065:         if (",
          "24067:             &&",
          "24068:             (named_expression_var = named_expression_rule(p))  // named_expression",
          "24069:             &&",
          "",
          "[Removed Lines]",
          "24066:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "23968:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "24094:         expr_ty a_1;",
          "24095:         Token * newline_var;",
          "24096:         if (",
          "24098:             &&",
          "24099:             (a_1 = named_expression_rule(p))  // named_expression",
          "24100:             &&",
          "",
          "[Removed Lines]",
          "24097:             (a = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "23999:             (a = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "24149:         expr_ty named_expression_var;",
          "24150:         Token * newline_var;",
          "24151:         if (",
          "24153:             &&",
          "24154:             (named_expression_var = named_expression_rule(p))  // named_expression",
          "24155:             &&",
          "",
          "[Removed Lines]",
          "24152:             (_keyword = _PyPegen_expect_token(p, 664))  // token='elif'",
          "",
          "[Added Lines]",
          "24054:             (_keyword = _PyPegen_expect_token(p, 662))  // token='elif'",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "24180:         expr_ty named_expression_var;",
          "24181:         Token * newline_var;",
          "24182:         if (",
          "24184:             &&",
          "24185:             (named_expression_var = named_expression_rule(p))  // named_expression",
          "24186:             &&",
          "",
          "[Removed Lines]",
          "24183:             (a = _PyPegen_expect_token(p, 664))  // token='elif'",
          "",
          "[Added Lines]",
          "24085:             (a = _PyPegen_expect_token(p, 662))  // token='elif'",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "24233:         Token * a;",
          "24234:         Token * newline_var;",
          "24235:         if (",
          "24237:             &&",
          "24238:             (_literal = _PyPegen_expect_token(p, 11))  // token=':'",
          "24239:             &&",
          "",
          "[Removed Lines]",
          "24236:             (a = _PyPegen_expect_token(p, 665))  // token='else'",
          "",
          "[Added Lines]",
          "24138:             (a = _PyPegen_expect_token(p, 663))  // token='else'",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "24286:         expr_ty named_expression_var;",
          "24287:         Token * newline_var;",
          "24288:         if (",
          "24290:             &&",
          "24291:             (named_expression_var = named_expression_rule(p))  // named_expression",
          "24292:             &&",
          "",
          "[Removed Lines]",
          "24289:             (_keyword = _PyPegen_expect_token(p, 667))  // token='while'",
          "",
          "[Added Lines]",
          "24191:             (_keyword = _PyPegen_expect_token(p, 665))  // token='while'",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "24317:         expr_ty named_expression_var;",
          "24318:         Token * newline_var;",
          "24319:         if (",
          "24321:             &&",
          "24322:             (named_expression_var = named_expression_rule(p))  // named_expression",
          "24323:             &&",
          "",
          "[Removed Lines]",
          "24320:             (a = _PyPegen_expect_token(p, 667))  // token='while'",
          "",
          "[Added Lines]",
          "24222:             (a = _PyPegen_expect_token(p, 665))  // token='while'",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "24376:         expr_ty star_expressions_var;",
          "24377:         expr_ty star_targets_var;",
          "24378:         if (",
          "24380:             &&",
          "24382:             &&",
          "24383:             (star_targets_var = star_targets_rule(p))  // star_targets",
          "24384:             &&",
          "24386:             &&",
          "24387:             (star_expressions_var = star_expressions_rule(p))  // star_expressions",
          "24388:             &&",
          "",
          "[Removed Lines]",
          "24379:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "24381:             (_keyword = _PyPegen_expect_token(p, 672))  // token='for'",
          "24385:             (_keyword_1 = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "24281:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "24283:             (_keyword = _PyPegen_expect_token(p, 670))  // token='for'",
          "24287:             (_keyword_1 = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "24417:         expr_ty star_expressions_var;",
          "24418:         expr_ty star_targets_var;",
          "24419:         if (",
          "24421:             &&",
          "24423:             &&",
          "24424:             (star_targets_var = star_targets_rule(p))  // star_targets",
          "24425:             &&",
          "24427:             &&",
          "24428:             (star_expressions_var = star_expressions_rule(p))  // star_expressions",
          "24429:             &&",
          "",
          "[Removed Lines]",
          "24420:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "24422:             (a = _PyPegen_expect_token(p, 672))  // token='for'",
          "24426:             (_keyword = _PyPegen_expect_token(p, 673))  // token='in'",
          "",
          "[Added Lines]",
          "24322:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "24324:             (a = _PyPegen_expect_token(p, 670))  // token='for'",
          "24328:             (_keyword = _PyPegen_expect_token(p, 671))  // token='in'",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "24489:         expr_ty name_var;",
          "24490:         Token * newline_var;",
          "24491:         if (",
          "24493:             &&",
          "24495:             &&",
          "24496:             (name_var = _PyPegen_name_token(p))  // NAME",
          "24497:             &&",
          "",
          "[Removed Lines]",
          "24492:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "24494:             (a = _PyPegen_expect_token(p, 677))  // token='def'",
          "",
          "[Added Lines]",
          "24394:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "24396:             (a = _PyPegen_expect_token(p, 675))  // token='def'",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "24548:         asdl_stmt_seq* block_var;",
          "24549:         expr_ty name_var;",
          "24550:         if (",
          "24552:             &&",
          "24554:             &&",
          "24555:             (name_var = _PyPegen_name_token(p))  // NAME",
          "24556:             &&",
          "",
          "[Removed Lines]",
          "24551:             (_opt_var = _PyPegen_expect_token(p, 676), !p->error_indicator)  // 'async'?",
          "24553:             (_keyword = _PyPegen_expect_token(p, 677))  // token='def'",
          "",
          "[Added Lines]",
          "24453:             (_opt_var = _PyPegen_expect_token(p, 674), !p->error_indicator)  // 'async'?",
          "24455:             (_keyword = _PyPegen_expect_token(p, 675))  // token='def'",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "24614:         expr_ty name_var;",
          "24615:         Token * newline_var;",
          "24616:         if (",
          "24618:             &&",
          "24619:             (name_var = _PyPegen_name_token(p))  // NAME",
          "24620:             &&",
          "",
          "[Removed Lines]",
          "24617:             (_keyword = _PyPegen_expect_token(p, 679))  // token='class'",
          "",
          "[Added Lines]",
          "24519:             (_keyword = _PyPegen_expect_token(p, 677))  // token='class'",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "24653:         expr_ty name_var;",
          "24654:         Token * newline_var;",
          "24655:         if (",
          "24657:             &&",
          "24658:             (name_var = _PyPegen_name_token(p))  // NAME",
          "24659:             &&",
          "",
          "[Removed Lines]",
          "24656:             (a = _PyPegen_expect_token(p, 679))  // token='class'",
          "",
          "[Added Lines]",
          "24558:             (a = _PyPegen_expect_token(p, 677))  // token='class'",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "25428:             &&",
          "25429:             (_tmp_243_var = _tmp_243_rule(p))  // '+' | '-' | '*' | '/' | '%' | '//' | '@'",
          "25430:             &&",
          "25432:             &&",
          "25433:             (b = inversion_rule(p))  // inversion",
          "25434:         )",
          "",
          "[Removed Lines]",
          "25431:             (a = _PyPegen_expect_token(p, 681))  // token='not'",
          "",
          "[Added Lines]",
          "25333:             (a = _PyPegen_expect_token(p, 679))  // token='not'",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "25477:         if (",
          "25478:             (_tmp_244_var = _tmp_244_rule(p))  // '+' | '-' | '~'",
          "25479:             &&",
          "25481:             &&",
          "25482:             (b = factor_rule(p))  // factor",
          "25483:         )",
          "",
          "[Removed Lines]",
          "25480:             (a = _PyPegen_expect_token(p, 681))  // token='not'",
          "",
          "[Added Lines]",
          "25382:             (a = _PyPegen_expect_token(p, 679))  // token='not'",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "25948:         D(fprintf(stderr, \"%*c> _tmp_7[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'def'\"));",
          "25949:         Token * _keyword;",
          "25950:         if (",
          "25952:         )",
          "25953:         {",
          "25954:             D(fprintf(stderr, \"%*c+ _tmp_7[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'def'\"));",
          "",
          "[Removed Lines]",
          "25951:             (_keyword = _PyPegen_expect_token(p, 677))  // token='def'",
          "",
          "[Added Lines]",
          "25853:             (_keyword = _PyPegen_expect_token(p, 675))  // token='def'",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "25986:         D(fprintf(stderr, \"%*c> _tmp_7[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'async'\"));",
          "25987:         Token * _keyword;",
          "25988:         if (",
          "25990:         )",
          "25991:         {",
          "25992:             D(fprintf(stderr, \"%*c+ _tmp_7[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'async'\"));",
          "",
          "[Removed Lines]",
          "25989:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "",
          "[Added Lines]",
          "25891:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "26024:         D(fprintf(stderr, \"%*c> _tmp_8[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'class'\"));",
          "26025:         Token * _keyword;",
          "26026:         if (",
          "26028:         )",
          "26029:         {",
          "26030:             D(fprintf(stderr, \"%*c+ _tmp_8[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'class'\"));",
          "",
          "[Removed Lines]",
          "26027:             (_keyword = _PyPegen_expect_token(p, 679))  // token='class'",
          "",
          "[Added Lines]",
          "25929:             (_keyword = _PyPegen_expect_token(p, 677))  // token='class'",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "26081:         D(fprintf(stderr, \"%*c> _tmp_9[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'with'\"));",
          "26082:         Token * _keyword;",
          "26083:         if (",
          "26085:         )",
          "26086:         {",
          "26087:             D(fprintf(stderr, \"%*c+ _tmp_9[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'with'\"));",
          "",
          "[Removed Lines]",
          "26084:             (_keyword = _PyPegen_expect_token(p, 635))  // token='with'",
          "",
          "[Added Lines]",
          "25986:             (_keyword = _PyPegen_expect_token(p, 633))  // token='with'",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "26100:         D(fprintf(stderr, \"%*c> _tmp_9[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'async'\"));",
          "26101:         Token * _keyword;",
          "26102:         if (",
          "26104:         )",
          "26105:         {",
          "26106:             D(fprintf(stderr, \"%*c+ _tmp_9[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'async'\"));",
          "",
          "[Removed Lines]",
          "26103:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "",
          "[Added Lines]",
          "26005:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "26138:         D(fprintf(stderr, \"%*c> _tmp_10[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'for'\"));",
          "26139:         Token * _keyword;",
          "26140:         if (",
          "26142:         )",
          "26143:         {",
          "26144:             D(fprintf(stderr, \"%*c+ _tmp_10[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'for'\"));",
          "",
          "[Removed Lines]",
          "26141:             (_keyword = _PyPegen_expect_token(p, 672))  // token='for'",
          "",
          "[Added Lines]",
          "26043:             (_keyword = _PyPegen_expect_token(p, 670))  // token='for'",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "26157:         D(fprintf(stderr, \"%*c> _tmp_10[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'async'\"));",
          "26158:         Token * _keyword;",
          "26159:         if (",
          "26161:         )",
          "26162:         {",
          "26163:             D(fprintf(stderr, \"%*c+ _tmp_10[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'async'\"));",
          "",
          "[Removed Lines]",
          "26160:             (_keyword = _PyPegen_expect_token(p, 676))  // token='async'",
          "",
          "[Added Lines]",
          "26062:             (_keyword = _PyPegen_expect_token(p, 674))  // token='async'",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "27181:         Token * _keyword;",
          "27182:         expr_ty z;",
          "27183:         if (",
          "27185:             &&",
          "27186:             (z = _PyPegen_name_token(p))  // NAME",
          "27187:         )",
          "",
          "[Removed Lines]",
          "27184:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "27086:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "27344:         Token * _keyword;",
          "27345:         expr_ty z;",
          "27346:         if (",
          "27348:             &&",
          "27349:             (z = _PyPegen_name_token(p))  // NAME",
          "27350:         )",
          "",
          "[Removed Lines]",
          "27347:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "27249:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "29331:         Token * _keyword;",
          "29332:         expr_ty z;",
          "29333:         if (",
          "29335:             &&",
          "29336:             (z = _PyPegen_name_token(p))  // NAME",
          "29337:         )",
          "",
          "[Removed Lines]",
          "29334:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "29236:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "29377:         Token * _keyword;",
          "29378:         expr_ty z;",
          "29379:         if (",
          "29381:             &&",
          "29382:             (z = _PyPegen_name_token(p))  // NAME",
          "29383:         )",
          "",
          "[Removed Lines]",
          "29380:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "29282:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "35264:         D(fprintf(stderr, \"%*c> _tmp_159[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'else'\"));",
          "35265:         Token * _keyword;",
          "35266:         if (",
          "35268:         )",
          "35269:         {",
          "35270:             D(fprintf(stderr, \"%*c+ _tmp_159[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'else'\"));",
          "",
          "[Removed Lines]",
          "35267:             (_keyword = _PyPegen_expect_token(p, 665))  // token='else'",
          "",
          "[Added Lines]",
          "35169:             (_keyword = _PyPegen_expect_token(p, 663))  // token='else'",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "38800:         D(fprintf(stderr, \"%*c> _tmp_214[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'except'\"));",
          "38801:         Token * _keyword;",
          "38802:         if (",
          "38804:         )",
          "38805:         {",
          "38806:             D(fprintf(stderr, \"%*c+ _tmp_214[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'except'\"));",
          "",
          "[Removed Lines]",
          "38803:             (_keyword = _PyPegen_expect_token(p, 657))  // token='except'",
          "",
          "[Added Lines]",
          "38705:             (_keyword = _PyPegen_expect_token(p, 655))  // token='except'",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "38819:         D(fprintf(stderr, \"%*c> _tmp_214[%d-%d]: %s\\n\", p->level, ' ', _mark, p->mark, \"'finally'\"));",
          "38820:         Token * _keyword;",
          "38821:         if (",
          "38823:         )",
          "38824:         {",
          "38825:             D(fprintf(stderr, \"%*c+ _tmp_214[%d-%d]: %s succeeded!\\n\", p->level, ' ', _mark, p->mark, \"'finally'\"));",
          "",
          "[Removed Lines]",
          "38822:             (_keyword = _PyPegen_expect_token(p, 653))  // token='finally'",
          "",
          "[Added Lines]",
          "38724:             (_keyword = _PyPegen_expect_token(p, 651))  // token='finally'",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "38997:         Token * _keyword;",
          "38998:         expr_ty name_var;",
          "38999:         if (",
          "39001:             &&",
          "39002:             (name_var = _PyPegen_name_token(p))  // NAME",
          "39003:         )",
          "",
          "[Removed Lines]",
          "39000:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "38902:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "39219:         Token * _keyword;",
          "39220:         expr_ty name_var;",
          "39221:         if (",
          "39223:             &&",
          "39224:             (name_var = _PyPegen_name_token(p))  // NAME",
          "39225:         )",
          "",
          "[Removed Lines]",
          "39222:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "39124:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "39260:         Token * _keyword;",
          "39261:         expr_ty name_var;",
          "39262:         if (",
          "39264:             &&",
          "39265:             (name_var = _PyPegen_name_token(p))  // NAME",
          "39266:         )",
          "",
          "[Removed Lines]",
          "39263:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "39165:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "39358:         Token * _keyword;",
          "39359:         expr_ty name_var;",
          "39360:         if (",
          "39362:             &&",
          "39363:             (name_var = _PyPegen_name_token(p))  // NAME",
          "39364:         )",
          "",
          "[Removed Lines]",
          "39361:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "39263:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "39399:         Token * _keyword;",
          "39400:         expr_ty name_var;",
          "39401:         if (",
          "39403:             &&",
          "39404:             (name_var = _PyPegen_name_token(p))  // NAME",
          "39405:         )",
          "",
          "[Removed Lines]",
          "39402:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "39304:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "41094:         Token * _keyword;",
          "41095:         expr_ty z;",
          "41096:         if (",
          "41098:             &&",
          "41099:             (z = disjunction_rule(p))  // disjunction",
          "41100:         )",
          "",
          "[Removed Lines]",
          "41097:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "40999:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "41140:         Token * _keyword;",
          "41141:         expr_ty z;",
          "41142:         if (",
          "41144:             &&",
          "41145:             (z = disjunction_rule(p))  // disjunction",
          "41146:         )",
          "",
          "[Removed Lines]",
          "41143:             (_keyword = _PyPegen_expect_token(p, 662))  // token='if'",
          "",
          "[Added Lines]",
          "41045:             (_keyword = _PyPegen_expect_token(p, 660))  // token='if'",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "41853:         Token * _keyword;",
          "41854:         expr_ty name_var;",
          "41855:         if (",
          "41857:             &&",
          "41858:             (name_var = _PyPegen_name_token(p))  // NAME",
          "41859:         )",
          "",
          "[Removed Lines]",
          "41856:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "41758:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "42112:         Token * _keyword;",
          "42113:         expr_ty star_target_var;",
          "42114:         if (",
          "42116:             &&",
          "42117:             (star_target_var = star_target_rule(p))  // star_target",
          "42118:         )",
          "",
          "[Removed Lines]",
          "42115:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "42017:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "42153:         Token * _keyword;",
          "42154:         expr_ty star_target_var;",
          "42155:         if (",
          "42157:             &&",
          "42158:             (star_target_var = star_target_rule(p))  // star_target",
          "42159:         )",
          "",
          "[Removed Lines]",
          "42156:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "42058:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "42194:         Token * _keyword;",
          "42195:         expr_ty star_target_var;",
          "42196:         if (",
          "42198:             &&",
          "42199:             (star_target_var = star_target_rule(p))  // star_target",
          "42200:         )",
          "",
          "[Removed Lines]",
          "42197:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "42099:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "42235:         Token * _keyword;",
          "42236:         expr_ty star_target_var;",
          "42237:         if (",
          "42239:             &&",
          "42240:             (star_target_var = star_target_rule(p))  // star_target",
          "42241:         )",
          "",
          "[Removed Lines]",
          "42238:             (_keyword = _PyPegen_expect_token(p, 660))  // token='as'",
          "",
          "[Added Lines]",
          "42140:             (_keyword = _PyPegen_expect_token(p, 658))  // token='as'",
          "",
          "---------------"
        ]
      }
    }
  ]
}