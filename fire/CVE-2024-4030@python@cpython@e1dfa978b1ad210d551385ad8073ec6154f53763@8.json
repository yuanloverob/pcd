{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7edc6bd6276ae857928ee7b0e84817c78292939f",
      "candidate_info": {
        "commit_hash": "7edc6bd6276ae857928ee7b0e84817c78292939f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7edc6bd6276ae857928ee7b0e84817c78292939f",
        "files": [
          "Lib/test/test_logging.py"
        ],
        "message": "[3.13] gh-119819: Update test to skip if _multiprocessing is unavailable. (GH-120067) (GH-120072)\n\n(cherry picked from commit 109e1082ea92f89d42cd70f2cc7ca6fba6be9bab)",
        "before_after_code_files": [
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3926:             msg = str(ctx.exception)",
          "3927:             self.assertEqual(msg, \"Unable to configure handler 'ah'\")",
          "3930:     def test_multiprocessing_queues(self):",
          "3931:         # See gh-119819",
          "3932:         cd = copy.deepcopy(self.config_queue_handler)",
          "3933:         from multiprocessing import Queue as MQ, Manager as MM",
          "3934:         q1 = MQ()  # this can't be pickled",
          "",
          "[Removed Lines]",
          "3929:     @unittest.skipIf(support.is_wasi, \"WASI does not have multiprocessing.\")",
          "",
          "[Added Lines]",
          "3931:         import_helper.import_module('_multiprocessing')  # will skip test if it's not available",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fabbf97735ea6d91b32011fb7413d3909b082a0",
      "candidate_info": {
        "commit_hash": "4fabbf97735ea6d91b32011fb7413d3909b082a0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4fabbf97735ea6d91b32011fb7413d3909b082a0",
        "files": [
          "Lib/test/test_tcl.py",
          "Lib/test/test_tkinter/test_geometry_managers.py",
          "Lib/test/test_tkinter/test_variables.py",
          "Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_tkinter/widget_tests.py",
          "Lib/test/test_ttk/test_widgets.py"
        ],
        "message": "[3.13] gh-104855: Update Tkinter tests for Tcl/Tk 8.7 and 9.0 (GH-120824) (GH-120864)\n\nThe tests are now passed with the current version of Tcl/Tk under\ndevelopment (8.7b1+ and 9.0b3+).\n\nThe following changes were also made to make the tests more flexible:\n\n* Helper methods like checkParam() now interpret the expected error message\n  as a regular expression instead of a literal.\n* Add support of new arguments in checkEnumParam():\n  - allow_empty=True skips testing with empty string;\n  - fullname= specifies the name for error message if it differs from the\n    option name;\n  - sort=True sorts values for error message.\n* Add support of the allow_empty argument in checkReliefParam():\n  allow_empty=True adds an empty string to the list of accepted values.\n* Attributes _clip_highlightthickness, _clip_pad and  _clip_borderwidth\n  specify how negative values of options -highlightthickness, -padx, -pady\n  and -borderwidth are handled.\n* Use global variables for some common error messages.\n\n(cherry picked from commit 6ad26de6e8ab61b035e7ecfff9791c2b349c3ad0)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>\nCo-authored-by: Terry Jan Reedy <tjreedy@udel.edu>",
        "before_after_code_files": [
          "Lib/test/test_tcl.py||Lib/test/test_tcl.py",
          "Lib/test/test_tkinter/test_geometry_managers.py||Lib/test/test_tkinter/test_geometry_managers.py",
          "Lib/test/test_tkinter/test_variables.py||Lib/test/test_tkinter/test_variables.py",
          "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_tkinter/widget_tests.py||Lib/test/test_tkinter/widget_tests.py",
          "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tcl.py||Lib/test/test_tcl.py": [
          "File: Lib/test/test_tcl.py -> Lib/test/test_tcl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:         with open(filename, 'wb') as f:",
          "220:             f.write(b\"\"\"",
          "221:             set a \"<\\xed\\xa0\\xbd\\xed\\xb2\\xbb>\"",
          "222:             set b \"<\\\\ud83d\\\\udcbb>\"",
          "223:             \"\"\")",
          "224:         tcl.evalfile(filename)",
          "226:         self.assertEqual(tcl.eval('set b'), '<\\U0001f4bb>')",
          "228:     def testEvalFileException(self):",
          "",
          "[Removed Lines]",
          "225:         self.assertEqual(tcl.eval('set a'), '<\\U0001f4bb>')",
          "",
          "[Added Lines]",
          "222:             \"\"\")",
          "223:         if tcl_version >= (9, 0):",
          "224:             self.assertRaises(TclError, tcl.evalfile, filename)",
          "225:         else:",
          "226:             tcl.evalfile(filename)",
          "227:             self.assertEqual(tcl.eval('set a'), '<\\U0001f4bb>')",
          "229:         with open(filename, 'wb') as f:",
          "230:             f.write(b\"\"\"",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/test_geometry_managers.py||Lib/test/test_tkinter/test_geometry_managers.py": [
          "File: Lib/test/test_tkinter/test_geometry_managers.py -> Lib/test/test_tkinter/test_geometry_managers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: requires('gui')",
          "13: class PackTest(AbstractWidgetTest, unittest.TestCase):",
          "15:     test_keys = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: EXPECTED_FLOAT_ERRMSG = 'expected floating-point number but got \"{}\"'",
          "14: EXPECTED_FLOAT_OR_EMPTY_ERRMSG = 'expected floating-point number (or \"\" )?but got \"{}\"'",
          "15: EXPECTED_SCREEN_DISTANCE_ERRMSG = '(bad|expected) screen distance (but got )?\"{}\"'",
          "16: EXPECTED_SCREEN_DISTANCE_OR_EMPTY_ERRMSG = '(bad|expected) screen distance (or \"\" but got )?\"{}\"'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:         self.assertEqual(f2.place_info()['x'], '-10')",
          "318:         self.root.update()",
          "319:         self.assertEqual(f2.winfo_x(), 190)",
          "321:             f2.place_configure(in_=f, x='spam')",
          "323:     def test_place_configure_y(self):",
          "",
          "[Removed Lines]",
          "320:         with self.assertRaisesRegex(TclError, 'bad screen distance \"spam\"'):",
          "",
          "[Added Lines]",
          "325:         with self.assertRaisesRegex(TclError,",
          "326:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('spam')):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:         self.assertEqual(f2.place_info()['y'], '-10')",
          "335:         self.root.update()",
          "336:         self.assertEqual(f2.winfo_y(), 110)",
          "338:             f2.place_configure(in_=f, y='spam')",
          "340:     def test_place_configure_relx(self):",
          "",
          "[Removed Lines]",
          "337:         with self.assertRaisesRegex(TclError, 'bad screen distance \"spam\"'):",
          "",
          "[Added Lines]",
          "343:         with self.assertRaisesRegex(TclError,",
          "344:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('spam')):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:         self.assertEqual(f2.place_info()['relx'], '1')",
          "352:         self.root.update()",
          "353:         self.assertEqual(f2.winfo_x(), 200)",
          "356:             f2.place_configure(in_=f, relx='spam')",
          "358:     def test_place_configure_rely(self):",
          "",
          "[Removed Lines]",
          "354:         with self.assertRaisesRegex(TclError, 'expected floating-point number '",
          "355:                                     'but got \"spam\"'):",
          "",
          "[Added Lines]",
          "361:         with self.assertRaisesRegex(TclError, EXPECTED_FLOAT_ERRMSG.format('spam')):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:         self.assertEqual(f2.place_info()['rely'], '1')",
          "370:         self.root.update()",
          "371:         self.assertEqual(f2.winfo_y(), 120)",
          "374:             f2.place_configure(in_=f, rely='spam')",
          "376:     def test_place_configure_anchor(self):",
          "",
          "[Removed Lines]",
          "372:         with self.assertRaisesRegex(TclError, 'expected floating-point number '",
          "373:                                     'but got \"spam\"'):",
          "",
          "[Added Lines]",
          "378:         with self.assertRaisesRegex(TclError, EXPECTED_FLOAT_ERRMSG.format('spam')):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "391:         f2.place_configure(width='')",
          "392:         self.root.update()",
          "393:         self.assertEqual(f2.winfo_width(), 30)",
          "395:             f2.place_configure(width='abcd')",
          "397:     def test_place_configure_height(self):",
          "",
          "[Removed Lines]",
          "394:         with self.assertRaisesRegex(TclError, 'bad screen distance \"abcd\"'):",
          "",
          "[Added Lines]",
          "399:         with self.assertRaisesRegex(TclError,",
          "400:                 EXPECTED_SCREEN_DISTANCE_OR_EMPTY_ERRMSG.format('abcd')):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "402:         f2.place_configure(height='')",
          "403:         self.root.update()",
          "404:         self.assertEqual(f2.winfo_height(), 60)",
          "406:             f2.place_configure(height='abcd')",
          "408:     def test_place_configure_relwidth(self):",
          "",
          "[Removed Lines]",
          "405:         with self.assertRaisesRegex(TclError, 'bad screen distance \"abcd\"'):",
          "",
          "[Added Lines]",
          "411:         with self.assertRaisesRegex(TclError,",
          "412:                 EXPECTED_SCREEN_DISTANCE_OR_EMPTY_ERRMSG.format('abcd')):",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "413:         f2.place_configure(relwidth='')",
          "414:         self.root.update()",
          "415:         self.assertEqual(f2.winfo_width(), 30)",
          "418:             f2.place_configure(relwidth='abcd')",
          "420:     def test_place_configure_relheight(self):",
          "",
          "[Removed Lines]",
          "416:         with self.assertRaisesRegex(TclError, 'expected floating-point number '",
          "417:                                     'but got \"abcd\"'):",
          "",
          "[Added Lines]",
          "423:         with self.assertRaisesRegex(TclError, EXPECTED_FLOAT_OR_EMPTY_ERRMSG.format('abcd')):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "425:         f2.place_configure(relheight='')",
          "426:         self.root.update()",
          "427:         self.assertEqual(f2.winfo_height(), 60)",
          "430:             f2.place_configure(relheight='abcd')",
          "432:     def test_place_configure_bordermode(self):",
          "",
          "[Removed Lines]",
          "428:         with self.assertRaisesRegex(TclError, 'expected floating-point number '",
          "429:                                     'but got \"abcd\"'):",
          "",
          "[Added Lines]",
          "434:         with self.assertRaisesRegex(TclError, EXPECTED_FLOAT_OR_EMPTY_ERRMSG.format('abcd')):",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "629:         self.assertEqual(self.root.grid_columnconfigure(0, 'weight'), 4)",
          "631:     def test_grid_columnconfigure_minsize(self):",
          "633:             self.root.grid_columnconfigure(0, minsize='foo')",
          "634:         self.root.grid_columnconfigure(0, minsize=10)",
          "635:         self.assertEqual(self.root.grid_columnconfigure(0, 'minsize'), 10)",
          "",
          "[Removed Lines]",
          "632:         with self.assertRaisesRegex(TclError, 'bad screen distance \"foo\"'):",
          "",
          "[Added Lines]",
          "637:         with self.assertRaisesRegex(TclError,",
          "638:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('foo')):",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "646:         self.assertEqual(self.root.grid_columnconfigure(0)['weight'], 3)",
          "648:     def test_grid_columnconfigure_pad(self):",
          "650:             self.root.grid_columnconfigure(0, pad='foo')",
          "651:         with self.assertRaisesRegex(TclError, 'invalid arg \"-pad\": '",
          "652:                                     'should be non-negative'):",
          "",
          "[Removed Lines]",
          "649:         with self.assertRaisesRegex(TclError, 'bad screen distance \"foo\"'):",
          "",
          "[Added Lines]",
          "655:         with self.assertRaisesRegex(TclError,",
          "656:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('foo')):",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "683:         self.assertEqual(self.root.grid_rowconfigure(0, 'weight'), 4)",
          "685:     def test_grid_rowconfigure_minsize(self):",
          "687:             self.root.grid_rowconfigure(0, minsize='foo')",
          "688:         self.root.grid_rowconfigure(0, minsize=10)",
          "689:         self.assertEqual(self.root.grid_rowconfigure(0, 'minsize'), 10)",
          "",
          "[Removed Lines]",
          "686:         with self.assertRaisesRegex(TclError, 'bad screen distance \"foo\"'):",
          "",
          "[Added Lines]",
          "693:         with self.assertRaisesRegex(TclError,",
          "694:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('foo')):",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "700:         self.assertEqual(self.root.grid_rowconfigure(0)['weight'], 3)",
          "702:     def test_grid_rowconfigure_pad(self):",
          "704:             self.root.grid_rowconfigure(0, pad='foo')",
          "705:         with self.assertRaisesRegex(TclError, 'invalid arg \"-pad\": '",
          "706:                                     'should be non-negative'):",
          "",
          "[Removed Lines]",
          "703:         with self.assertRaisesRegex(TclError, 'bad screen distance \"foo\"'):",
          "",
          "[Added Lines]",
          "711:         with self.assertRaisesRegex(TclError,",
          "712:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('foo')):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "818:             self.root.grid_location(0)",
          "819:         with self.assertRaises(TypeError):",
          "820:             self.root.grid_location(0, 0, 0)",
          "822:             self.root.grid_location('x', 'y')",
          "824:             self.root.grid_location('1c', 'y')",
          "825:         t = self.root",
          "826:         # de-maximize",
          "",
          "[Removed Lines]",
          "821:         with self.assertRaisesRegex(TclError, 'bad screen distance \"x\"'):",
          "823:         with self.assertRaisesRegex(TclError, 'bad screen distance \"y\"'):",
          "",
          "[Added Lines]",
          "830:         with self.assertRaisesRegex(TclError,",
          "831:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('x')):",
          "833:         with self.assertRaisesRegex(TclError,",
          "834:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('y')):",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/test_variables.py||Lib/test/test_tkinter/test_variables.py": [
          "File: Lib/test/test_tkinter/test_variables.py -> Lib/test/test_tkinter/test_variables.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from tkinter import (Variable, StringVar, IntVar, DoubleVar, BooleanVar, Tcl,",
          "7:                      TclError)",
          "8: from test.support import ALWAYS_EQ",
          "12: class Var(Variable):",
          "",
          "[Removed Lines]",
          "9: from test.test_tkinter.support import AbstractDefaultRootTest",
          "",
          "[Added Lines]",
          "9: from test.test_tkinter.support import AbstractDefaultRootTest, tcl_version",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:         self.assertTrue(v.side_effect)",
          "114:     def test_trace_old(self):",
          "115:         # Old interface",
          "116:         v = Variable(self.root)",
          "117:         vname = str(v)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:         if tcl_version >= (9, 0):",
          "116:             self.skipTest('requires Tcl version < 9.0')",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py": [
          "File: Lib/test/test_tkinter/test_widgets.py -> Lib/test/test_tkinter/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import os",
          "5: from test.support import requires",
          "8:                                   get_tk_patchlevel, widget_eq,",
          "9:                                   AbstractDefaultRootTest)",
          "10: from test.test_tkinter.widget_tests import (",
          "",
          "[Removed Lines]",
          "7: from test.test_tkinter.support import (requires_tk,",
          "",
          "[Added Lines]",
          "7: from test.test_tkinter.support import (requires_tk, tk_version,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: requires('gui')",
          "17: def float_round(x):",
          "18:     return float(round(x))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: EXPECTED_SCREEN_DISTANCE_ERRMSG = '(bad|expected) screen distance (but got )?\"{}\"'",
          "18: EXPECTED_SCREEN_DISTANCE_OR_EMPTY_ERRMSG = '(bad|expected) screen distance (or \"\" but got )?\"{}\"'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142: class AbstractLabelTest(AbstractWidgetTest, IntegerSizeTests):",
          "143:     _conv_pixels = False",
          "151: @add_standard_options(StandardOptionsTests)",
          "",
          "[Removed Lines]",
          "145:     def test_configure_highlightthickness(self):",
          "146:         widget = self.create()",
          "147:         self.checkPixelsParam(widget, 'highlightthickness',",
          "148:                               0, 1.3, 2.6, 6, -2, '10p')",
          "",
          "[Added Lines]",
          "147:     _clip_highlightthickness = tk_version >= (8, 7)",
          "148:     _clip_pad = tk_version >= (8, 7)",
          "149:     _clip_borderwidth = tk_version >= (8, 7)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277:         'underline', 'width', 'wraplength',",
          "278:     )",
          "279:     _conv_pixels = round",
          "281:     def create(self, **kwargs):",
          "282:         return tkinter.Menubutton(self.root, **kwargs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:     _clip_highlightthickness = True",
          "282:     _clip_pad = True",
          "283:     _clip_borderwidth = False",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:         widget = self.create()",
          "291:         self.checkIntegerParam(widget, 'height', 100, -100, 0, conv=str)",
          "296:     def test_configure_image(self):",
          "297:         widget = self.create()",
          "298:         image = tkinter.PhotoImage(master=self.root, name='image1')",
          "",
          "[Removed Lines]",
          "293:     test_configure_highlightthickness = \\",
          "294:         StandardOptionsTests.test_configure_highlightthickness",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "313:         self.checkParam(widget, 'menu', menu, eq=widget_eq)",
          "314:         menu.destroy()",
          "326:     def test_configure_width(self):",
          "327:         widget = self.create()",
          "328:         self.checkIntegerParam(widget, 'width', 402, -402, 0, conv=str)",
          "",
          "[Removed Lines]",
          "316:     def test_configure_padx(self):",
          "317:         widget = self.create()",
          "318:         self.checkPixelsParam(widget, 'padx', 3, 4.4, 5.6, '12m')",
          "319:         self.checkParam(widget, 'padx', -2, expected=0)",
          "321:     def test_configure_pady(self):",
          "322:         widget = self.create()",
          "323:         self.checkPixelsParam(widget, 'pady', 3, 4.4, 5.6, '12m')",
          "324:         self.checkParam(widget, 'pady', -2, expected=0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "489:         widget = self.create()",
          "490:         self.checkParam(widget, 'to', 100.0)",
          "491:         self.checkFloatParam(widget, 'from', -10, 10.2, 11.7)",
          "495:     def test_configure_increment(self):",
          "496:         widget = self.create()",
          "",
          "[Removed Lines]",
          "492:         self.checkInvalidParam(widget, 'from', 200,",
          "493:                 errmsg='-to value must be greater than -from value')",
          "",
          "[Added Lines]",
          "483:         if tk_version >= (8, 7):",
          "484:             self.checkFloatParam(widget, 'from', 200, expected=100)",
          "485:         else:",
          "486:             self.checkInvalidParam(",
          "487:                     widget, 'from', 200,",
          "488:                     errmsg='-to value must be greater than -from value')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "500:         widget = self.create()",
          "501:         self.checkParam(widget, 'from', -100.0)",
          "502:         self.checkFloatParam(widget, 'to', -10, 10.2, 11.7)",
          "506:     def test_configure_values(self):",
          "507:         # XXX",
          "",
          "[Removed Lines]",
          "503:         self.checkInvalidParam(widget, 'to', -200,",
          "504:                 errmsg='-to value must be greater than -from value')",
          "",
          "[Added Lines]",
          "498:         if tk_version >= (8, 7):",
          "499:             self.checkFloatParam(widget, 'to', -200, expected=-100)",
          "500:         else:",
          "501:             self.checkInvalidParam(",
          "502:                     widget, 'to', -200,",
          "503:                     errmsg='-to value must be greater than -from value')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "666:         self.checkParam(widget, 'tabs', '2c left 4c 6c center',",
          "667:                         expected=('2c', 'left', '4c', '6c', 'center'))",
          "668:         self.checkInvalidParam(widget, 'tabs', 'spam',",
          "671:     def test_configure_tabstyle(self):",
          "672:         widget = self.create()",
          "",
          "[Removed Lines]",
          "669:                                errmsg='bad screen distance \"spam\"')",
          "",
          "[Added Lines]",
          "668:                 errmsg=EXPECTED_SCREEN_DISTANCE_ERRMSG.format('spam'))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "861:     def test_create_polygon(self):",
          "862:         c = self.create()",
          "864:         self.assertEqual(c.coords(i1), [20.0, 30.0, 40.0, 50.0, 60.0, 10.0])",
          "866:         self.assertEqual(c.itemcget(i1, 'joinstyle'), 'round')",
          "867:         self.assertEqual(c.itemcget(i1, 'smooth'), '0')",
          "868:         self.assertEqual(c.itemcget(i1, 'splinestep'), '12')",
          "871:         self.assertEqual(c.coords(i2), [21.0, 31.0, 41.0, 51.0, 61.0, 11.0])",
          "875:         self.assertEqual(c.coords(i3), [22.0, 32.0, 42.0, 52.0, 62.0, 12.0])",
          "879:         self.assertEqual(c.coords(i4), [23.0, 33.0, 43.0, 53.0, 63.0, 13.0])",
          "882:         self.assertRaises(TclError, c.create_polygon, 20, 30, 60)",
          "883:         self.assertRaises(TclError, c.create_polygon, [20, 30, 60])",
          "",
          "[Removed Lines]",
          "863:         i1 = c.create_polygon(20, 30, 40, 50, 60, 10)",
          "865:         self.assertEqual(c.bbox(i1), (19, 9, 61, 51))",
          "870:         i2 = c.create_polygon([21, 31, 41, 51, 61, 11])",
          "872:         self.assertEqual(c.bbox(i2), (20, 10, 62, 52))",
          "874:         i3 = c.create_polygon((22, 32), (42, 52), (62, 12))",
          "876:         self.assertEqual(c.bbox(i3), (21, 11, 63, 53))",
          "878:         i4 = c.create_polygon([(23, 33), (43, 53), (63, 13)])",
          "880:         self.assertEqual(c.bbox(i4), (22, 12, 64, 54))",
          "",
          "[Added Lines]",
          "862:         tk87 = tk_version >= (8, 7)",
          "863:         # In Tk < 8.7 polygons are filled, but has no outline by default.",
          "864:         # This affects its size, so always explicitly specify outline.",
          "865:         i1 = c.create_polygon(20, 30, 40, 50, 60, 10, outline='red')",
          "867:         self.assertEqual(c.bbox(i1), (18, 8, 62, 52))",
          "872:         i2 = c.create_polygon([21, 31, 41, 51, 61, 11], outline='red')",
          "874:         self.assertEqual(c.bbox(i2), (19, 9, 63, 53))",
          "876:         i3 = c.create_polygon((22, 32), (42, 52), (62, 12), outline='red')",
          "878:         self.assertEqual(c.bbox(i3), (20, 10, 64, 54))",
          "880:         i4 = c.create_polygon([(23, 33), (43, 53), (63, 13)], outline='red')",
          "882:         self.assertEqual(c.bbox(i4), (21, 11, 65, 55))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1181:     def test_configure_elementborderwidth(self):",
          "1182:         widget = self.create()",
          "1185:     def test_configure_orient(self):",
          "1186:         widget = self.create()",
          "1187:         self.checkEnumParam(widget, 'orient', 'vertical', 'horizontal',",
          "1190:     def test_activate(self):",
          "1191:         sb = self.create()",
          "",
          "[Removed Lines]",
          "1183:         self.checkPixelsParam(widget, 'elementborderwidth', 4.3, 5.6, -2, '1m')",
          "1188:                 errmsg='bad orientation \"{}\": must be vertical or horizontal')",
          "",
          "[Added Lines]",
          "1185:         self.checkPixelsParam(widget, 'elementborderwidth', 4.3, 5.6, '1m')",
          "1186:         expected = self._default_pixels if tk_version >= (8, 7) else -2",
          "1187:         self.checkParam(widget, 'elementborderwidth', -2, expected=expected)",
          "1192:                             fullname='orientation', allow_empty=True)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1256:     @requires_tk(8, 6, 5)",
          "1257:     def test_configure_proxyrelief(self):",
          "1258:         widget = self.create()",
          "1261:     def test_configure_sashcursor(self):",
          "1262:         widget = self.create()",
          "",
          "[Removed Lines]",
          "1259:         self.checkReliefParam(widget, 'proxyrelief')",
          "",
          "[Added Lines]",
          "1263:         self.checkReliefParam(widget, 'proxyrelief',",
          "1264:                               allow_empty=(tk_version >= (8, 7)))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1329:         p, b, c = self.create2()",
          "1330:         self.check_paneconfigure(p, b, 'height', 10, 10)",
          "1331:         self.check_paneconfigure_bad(p, b, 'height',",
          "1334:     def test_paneconfigure_hide(self):",
          "1335:         p, b, c = self.create2()",
          "",
          "[Removed Lines]",
          "1332:                                      'bad screen distance \"badValue\"')",
          "",
          "[Added Lines]",
          "1337:                 EXPECTED_SCREEN_DISTANCE_OR_EMPTY_ERRMSG.format('badValue'))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1341:         p, b, c = self.create2()",
          "1342:         self.check_paneconfigure(p, b, 'minsize', 10, 10)",
          "1343:         self.check_paneconfigure_bad(p, b, 'minsize',",
          "1346:     def test_paneconfigure_padx(self):",
          "1347:         p, b, c = self.create2()",
          "1348:         self.check_paneconfigure(p, b, 'padx', 1.3, 1)",
          "1349:         self.check_paneconfigure_bad(p, b, 'padx',",
          "1352:     def test_paneconfigure_pady(self):",
          "1353:         p, b, c = self.create2()",
          "1354:         self.check_paneconfigure(p, b, 'pady', 1.3, 1)",
          "1355:         self.check_paneconfigure_bad(p, b, 'pady',",
          "1358:     def test_paneconfigure_sticky(self):",
          "1359:         p, b, c = self.create2()",
          "",
          "[Removed Lines]",
          "1344:                                      'bad screen distance \"badValue\"')",
          "1350:                                      'bad screen distance \"badValue\"')",
          "1356:                                      'bad screen distance \"badValue\"')",
          "",
          "[Added Lines]",
          "1349:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('badValue'))",
          "1355:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('badValue'))",
          "1361:                 EXPECTED_SCREEN_DISTANCE_ERRMSG.format('badValue'))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1374:         p, b, c = self.create2()",
          "1375:         self.check_paneconfigure(p, b, 'width', 10, 10)",
          "1376:         self.check_paneconfigure_bad(p, b, 'width',",
          "1380: @add_standard_options(StandardOptionsTests)",
          "",
          "[Removed Lines]",
          "1377:                                      'bad screen distance \"badValue\"')",
          "",
          "[Added Lines]",
          "1382:                 EXPECTED_SCREEN_DISTANCE_OR_EMPTY_ERRMSG.format('badValue'))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1415:     def test_configure_type(self):",
          "1416:         widget = self.create()",
          "1426:     def test_entryconfigure(self):",
          "1427:         m1 = self.create()",
          "",
          "[Removed Lines]",
          "1417:         opts = ('normal, tearoff, or menubar'",
          "1418:                 if widget.info_patchlevel() < (8, 7) else",
          "1419:                 'menubar, normal, or tearoff')",
          "1420:         self.checkEnumParam(",
          "1421:             widget, 'type',",
          "1422:             'normal', 'tearoff', 'menubar',",
          "1423:             errmsg='bad type \"{}\": must be ' + opts,",
          "1424:             )",
          "",
          "[Added Lines]",
          "1422:         values = ('normal', 'tearoff', 'menubar')",
          "1423:         self.checkEnumParam(widget, 'type', *values,",
          "1424:                             allow_empty=tk_version < (8, 7),",
          "1425:                             sort=tk_version >= (8, 7))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1467:         'takefocus', 'text', 'textvariable', 'width',",
          "1468:     )",
          "1469:     _conv_pad_pixels = False",
          "1471:     def create(self, **kwargs):",
          "1472:         return tkinter.Message(self.root, **kwargs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1471:     if tk_version >= (8, 7):",
          "1472:         _conv_pixels = False",
          "1473:     _clip_pad = tk_version >= (8, 7)",
          "1474:     _clip_borderwidth = tk_version >= (8, 7)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1475:         widget = self.create()",
          "1476:         self.checkIntegerParam(widget, 'aspect', 250, 0, -300)",
          "1479: class DefaultRootTest(AbstractDefaultRootTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1483:     def test_configure_padx(self):",
          "1484:         widget = self.create()",
          "1485:         self.checkPixelsParam(widget, 'padx', 3, 4.4, 5.6, '12m',",
          "1486:                               conv=self._conv_pad_pixels)",
          "1487:         expected = self._default_pixels if self._clip_pad else -2",
          "1488:         self.checkParam(widget, 'padx', -2, expected=expected)",
          "1490:     def test_configure_pady(self):",
          "1491:         widget = self.create()",
          "1492:         self.checkPixelsParam(widget, 'pady', 3, 4.4, 5.6, '12m',",
          "1493:                               conv=self._conv_pad_pixels)",
          "1494:         expected = self._default_pixels if self._clip_pad else -2",
          "1495:         self.checkParam(widget, 'pady', -2, expected=expected)",
          "1497:     def test_configure_width(self):",
          "1498:         widget = self.create()",
          "1499:         self.checkPixelsParam(widget, 'width', 402, 403.4, 404.6, 0, '5i')",
          "1500:         expected = 0 if tk_version >= (8, 7) else -402",
          "1501:         self.checkParam(widget, 'width', -402, expected=expected)",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/widget_tests.py||Lib/test/test_tkinter/widget_tests.py": [
          "File: Lib/test/test_tkinter/widget_tests.py -> Lib/test/test_tkinter/widget_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Common tests for test_tkinter/test_widgets.py and test_ttk/test_widgets.py",
          "3: import tkinter",
          "4: from test.test_tkinter.support import (AbstractTkTest, tk_version,",
          "5:                                   pixels_conv, tcl_obj_eq)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import re",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: _sentinel = object()",
          "11: class AbstractWidgetTest(AbstractTkTest):",
          "12:     _conv_pixels = round",
          "13:     _conv_pad_pixels = None",
          "14:     _stringify = False",
          "16:     @property",
          "17:     def scaling(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     _default_pixels = '' if tk_version >= (9, 0) else -1 if tk_version >= (8, 7) else ''",
          "17:     _clip_highlightthickness = True",
          "18:     _clip_pad = False",
          "19:     _clip_borderwidth = False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     def checkInvalidParam(self, widget, name, value, errmsg=None):",
          "57:         orig = widget[name]",
          "58:         if errmsg is not None:",
          "61:             widget[name] = value",
          "64:         self.assertEqual(widget[name], orig)",
          "66:             widget.configure({name: value})",
          "69:         self.assertEqual(widget[name], orig)",
          "71:     def checkParams(self, widget, name, *values, **kwargs):",
          "",
          "[Removed Lines]",
          "59:             errmsg = errmsg.format(value)",
          "60:         with self.assertRaises(tkinter.TclError) as cm:",
          "62:         if errmsg is not None:",
          "63:             self.assertEqual(str(cm.exception), errmsg)",
          "65:         with self.assertRaises(tkinter.TclError) as cm:",
          "67:         if errmsg is not None:",
          "68:             self.assertEqual(str(cm.exception), errmsg)",
          "",
          "[Added Lines]",
          "64:             errmsg = errmsg.format(re.escape(str(value)))",
          "65:             errmsg = fr'\\A{errmsg}\\Z'",
          "66:         with self.assertRaisesRegex(tkinter.TclError, errmsg or ''):",
          "69:         with self.assertRaisesRegex(tkinter.TclError, errmsg or ''):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:     def checkIntegerParam(self, widget, name, *values, **kwargs):",
          "76:         self.checkParams(widget, name, *values, **kwargs)",
          "84:     def checkFloatParam(self, widget, name, *values, conv=float, **kwargs):",
          "85:         for value in values:",
          "86:             self.checkParam(widget, name, value, conv=conv, **kwargs)",
          "92:     def checkBooleanParam(self, widget, name):",
          "93:         for value in (False, 0, 'false', 'no', 'off'):",
          "94:             self.checkParam(widget, name, value, expected=0)",
          "95:         for value in (True, 1, 'true', 'yes', 'on'):",
          "96:             self.checkParam(widget, name, value, expected=1)",
          "102:     def checkColorParam(self, widget, name, *, allow_empty=None, **kwargs):",
          "103:         self.checkParams(widget, name,",
          "",
          "[Removed Lines]",
          "77:         self.checkInvalidParam(widget, name, '',",
          "78:                 errmsg='expected integer but got \"\"')",
          "79:         self.checkInvalidParam(widget, name, '10p',",
          "80:                 errmsg='expected integer but got \"10p\"')",
          "81:         self.checkInvalidParam(widget, name, 3.2,",
          "82:                 errmsg='expected integer but got \"3.2\"')",
          "87:         self.checkInvalidParam(widget, name, '',",
          "88:                 errmsg='expected floating-point number but got \"\"')",
          "89:         self.checkInvalidParam(widget, name, 'spam',",
          "90:                 errmsg='expected floating-point number but got \"spam\"')",
          "97:         self.checkInvalidParam(widget, name, '',",
          "98:                 errmsg='expected boolean value but got \"\"')",
          "99:         self.checkInvalidParam(widget, name, 'spam',",
          "100:                 errmsg='expected boolean value but got \"spam\"')",
          "",
          "[Added Lines]",
          "79:         errmsg = 'expected integer but got \"{}\"'",
          "80:         self.checkInvalidParam(widget, name, '', errmsg=errmsg)",
          "81:         self.checkInvalidParam(widget, name, '10p', errmsg=errmsg)",
          "82:         self.checkInvalidParam(widget, name, 3.2, errmsg=errmsg)",
          "87:         errmsg = 'expected floating-point number but got \"{}\"'",
          "88:         self.checkInvalidParam(widget, name, '', errmsg=errmsg)",
          "89:         self.checkInvalidParam(widget, name, 'spam', errmsg=errmsg)",
          "96:         errmsg = 'expected boolean value but got \"{}\"'",
          "97:         self.checkInvalidParam(widget, name, '', errmsg=errmsg)",
          "98:         self.checkInvalidParam(widget, name, 'spam', errmsg=errmsg)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:         self.assertTrue(widget[name])",
          "121:         self.checkParams(widget, name, '')",
          "124:         self.checkParams(widget, name, *values, **kwargs)",
          "125:         if errmsg is None:",
          "126:             errmsg2 = ' %s \"{}\": must be %s%s or %s' % (",
          "128:                     ', '.join(values[:-1]),",
          "129:                     ',' if len(values) > 2 else '',",
          "133:             errmsg = 'bad' + errmsg2",
          "134:         self.checkInvalidParam(widget, name, 'spam', errmsg=errmsg)",
          "",
          "[Removed Lines]",
          "123:     def checkEnumParam(self, widget, name, *values, errmsg=None, **kwargs):",
          "127:                     name,",
          "130:                     values[-1])",
          "131:             self.checkInvalidParam(widget, name, '',",
          "132:                                    errmsg='ambiguous' + errmsg2)",
          "",
          "[Added Lines]",
          "121:     def checkEnumParam(self, widget, name, *values,",
          "122:                        errmsg=None, allow_empty=False, fullname=None,",
          "123:                        sort=False, **kwargs):",
          "126:             if sort:",
          "127:                 if values[-1]:",
          "128:                     values = tuple(sorted(values))",
          "129:                 else:",
          "130:                     values = tuple(sorted(values[:-1])) + ('',)",
          "132:                     fullname or name,",
          "135:                     values[-1] or '\"\"')",
          "136:             if '' not in values and not allow_empty:",
          "137:                 self.checkInvalidParam(widget, name, '',",
          "138:                                        errmsg='ambiguous' + errmsg2)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "146:                     conv1 = round",
          "147:             self.checkParam(widget, name, value, expected=expected,",
          "148:                             conv=conv1, **kwargs)",
          "159:         if tk_version < (8, 6):",
          "160:             errmsg = None",
          "164:     def checkImageParam(self, widget, name):",
          "165:         image = tkinter.PhotoImage(master=self.root, name='image1')",
          "",
          "[Removed Lines]",
          "149:         self.checkInvalidParam(widget, name, '6x',",
          "150:                 errmsg='bad screen distance \"6x\"')",
          "151:         self.checkInvalidParam(widget, name, 'spam',",
          "152:                 errmsg='bad screen distance \"spam\"')",
          "154:     def checkReliefParam(self, widget, name):",
          "155:         self.checkParams(widget, name,",
          "156:                          'flat', 'groove', 'raised', 'ridge', 'solid', 'sunken')",
          "157:         errmsg='bad relief \"spam\": must be '\\",
          "158:                'flat, groove, raised, ridge, solid, or sunken'",
          "161:         self.checkInvalidParam(widget, name, 'spam',",
          "162:                 errmsg=errmsg)",
          "",
          "[Added Lines]",
          "155:         errmsg = '(bad|expected) screen distance ((or \"\" )?but got )?\"{}\"'",
          "156:         self.checkInvalidParam(widget, name, '6x', errmsg=errmsg)",
          "157:         self.checkInvalidParam(widget, name, 'spam', errmsg=errmsg)",
          "159:     def checkReliefParam(self, widget, name, *, allow_empty=False):",
          "160:         values = ('flat', 'groove', 'raised', 'ridge', 'solid', 'sunken')",
          "161:         if allow_empty:",
          "162:             values += ('',)",
          "163:         self.checkParams(widget, name, *values)",
          "164:         errmsg = 'bad relief \"{}\": must be %s, or %s' % (",
          "165:                 ', '.join(values[:-1]),",
          "166:                 values[-1] or '\"\"')",
          "169:         self.checkInvalidParam(widget, name, 'spam', errmsg=errmsg)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "262:     def test_configure_borderwidth(self):",
          "263:         widget = self.create()",
          "264:         self.checkPixelsParam(widget, 'borderwidth',",
          "266:         if 'bd' in self.OPTIONS:",
          "269:     def test_configure_compound(self):",
          "270:         widget = self.create()",
          "",
          "[Removed Lines]",
          "265:                               0, 1.3, 2.6, 6, -2, '10p')",
          "267:             self.checkPixelsParam(widget, 'bd', 0, 1.3, 2.6, 6, -2, '10p')",
          "",
          "[Added Lines]",
          "272:                               0, 1.3, 2.6, 6, '10p')",
          "273:         expected = 0 if self._clip_borderwidth else -2",
          "274:         self.checkParam(widget, 'borderwidth', -2, expected=expected,",
          "275:                         conv=self._conv_pixels)",
          "277:             self.checkPixelsParam(widget, 'bd', 0, 1.3, 2.6, 6, '10p')",
          "278:             self.checkParam(widget, 'bd', -2, expected=expected,",
          "279:                             conv=self._conv_pixels)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "308:         widget = self.create()",
          "309:         self.checkPixelsParam(widget, 'highlightthickness',",
          "310:                               0, 1.3, 2.6, 6, '10p')",
          "312:                         conv=self._conv_pixels)",
          "314:     def test_configure_image(self):",
          "",
          "[Removed Lines]",
          "311:         self.checkParam(widget, 'highlightthickness', -2, expected=0,",
          "",
          "[Added Lines]",
          "323:         expected = 0 if self._clip_highlightthickness else -2",
          "324:         self.checkParam(widget, 'highlightthickness', -2, expected=expected,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "343:     def test_configure_justify(self):",
          "344:         widget = self.create()",
          "345:         self.checkEnumParam(widget, 'justify', 'left', 'right', 'center',",
          "352:     def test_configure_orient(self):",
          "353:         widget = self.create()",
          "",
          "[Removed Lines]",
          "346:                 errmsg='bad justification \"{}\": must be '",
          "347:                        'left, right, or center')",
          "348:         self.checkInvalidParam(widget, 'justify', '',",
          "349:                 errmsg='ambiguous justification \"\": must be '",
          "350:                        'left, right, or center')",
          "",
          "[Added Lines]",
          "359:                             fullname='justification')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "357:     def test_configure_padx(self):",
          "358:         widget = self.create()",
          "360:                               conv=self._conv_pad_pixels)",
          "362:     def test_configure_pady(self):",
          "363:         widget = self.create()",
          "365:                               conv=self._conv_pad_pixels)",
          "367:     def test_configure_relief(self):",
          "368:         widget = self.create()",
          "",
          "[Removed Lines]",
          "359:         self.checkPixelsParam(widget, 'padx', 3, 4.4, 5.6, -2, '12m',",
          "364:         self.checkPixelsParam(widget, 'pady', 3, 4.4, 5.6, -2, '12m',",
          "",
          "[Added Lines]",
          "368:         self.checkPixelsParam(widget, 'padx', 3, 4.4, 5.6, '12m',",
          "370:         expected = 0 if self._clip_pad else -2",
          "371:         self.checkParam(widget, 'padx', -2, expected=expected,",
          "372:                         conv=self._conv_pad_pixels)",
          "376:         self.checkPixelsParam(widget, 'pady', 3, 4.4, 5.6, '12m',",
          "378:         expected = 0 if self._clip_pad else -2",
          "379:         self.checkParam(widget, 'pady', -2, expected=expected,",
          "380:                         conv=self._conv_pad_pixels)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "416:     def test_configure_underline(self):",
          "417:         widget = self.create()",
          "420:     def test_configure_wraplength(self):",
          "421:         widget = self.create()",
          "",
          "[Removed Lines]",
          "418:         self.checkIntegerParam(widget, 'underline', 0, 1, 10)",
          "",
          "[Added Lines]",
          "433:         self.checkParams(widget, 'underline', 0, 1, 10)",
          "434:         if tk_version >= (8, 7):",
          "435:             is_ttk = widget.__class__.__module__ == 'tkinter.ttk'",
          "436:             self.checkParam(widget, 'underline', '',",
          "437:                             expected='' if is_ttk else self._default_pixels)",
          "438:             self.checkParam(widget, 'underline', '5+2',",
          "439:                             expected='5+2' if is_ttk else 7)",
          "440:             self.checkParam(widget, 'underline', '5-2',",
          "441:                             expected='5-2' if is_ttk else 3)",
          "442:             self.checkParam(widget, 'underline', 'end', expected='end')",
          "443:             self.checkParam(widget, 'underline', 'end-2', expected='end-2')",
          "444:             errmsg = (r'bad index \"{}\": must be integer\\?\\[\\+-\\]integer\\?, '",
          "445:                       r'end\\?\\[\\+-\\]integer\\?, or \"\"')",
          "446:         else:",
          "447:             errmsg = 'expected integer but got \"{}\"'",
          "448:             self.checkInvalidParam(widget, 'underline', '', errmsg=errmsg)",
          "449:         self.checkInvalidParam(widget, 'underline', '10p', errmsg=errmsg)",
          "450:         self.checkInvalidParam(widget, 'underline', 3.2, errmsg=errmsg)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "446:     def test_configure_overrelief(self):",
          "447:         widget = self.create()",
          "450:     def test_configure_selectcolor(self):",
          "451:         widget = self.create()",
          "",
          "[Removed Lines]",
          "448:         self.checkReliefParam(widget, 'overrelief')",
          "",
          "[Added Lines]",
          "480:         self.checkReliefParam(widget, 'overrelief',",
          "481:                               allow_empty=(tk_version >= (8, 7)))",
          "",
          "---------------"
        ],
        "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py": [
          "File: Lib/test/test_ttk/test_widgets.py -> Lib/test/test_ttk/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         self.assertEqual(widget2['class'], 'Foo')",
          "58:         # XXX",
          "61: class WidgetTest(AbstractTkTest, unittest.TestCase):",
          "62:     \"\"\"Tests methods available in every ttk widget.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     def test_configure_relief(self):",
          "61:         widget = self.create()",
          "62:         self.checkReliefParam(widget, 'relief',",
          "63:                               allow_empty=(tk_version >= (8, 7)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:                 errmsg='image \"spam\" doesn\\'t exist')",
          "174:     def test_configure_compound(self):",
          "180:         widget = self.create()",
          "183:     def test_configure_state(self):",
          "184:         widget = self.create()",
          "",
          "[Removed Lines]",
          "175:         options = 'none text image center top bottom left right'.split()",
          "176:         errmsg = (",
          "177:             'bad compound \"{}\": must be'",
          "178:             f' {\", \".join(options[:-1])}, or {options[-1]}'",
          "179:             )",
          "181:         self.checkEnumParam(widget, 'compound', *options, errmsg=errmsg)",
          "",
          "[Added Lines]",
          "180:         values = ('none', 'text', 'image', 'center', 'top', 'bottom', 'left', 'right')",
          "181:         if tk_version >= (8, 7):",
          "182:             values += ('',)",
          "184:         self.checkEnumParam(widget, 'compound', *values, allow_empty=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:         self.checkParam(widget, 'font',",
          "209:                         '-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*')",
          "212: @add_standard_options(StandardTtkOptionsTests)",
          "213: class ButtonTest(AbstractLabelTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     def test_configure_justify(self):",
          "215:         widget = self.create()",
          "216:         values = ('left', 'right', 'center')",
          "217:         if tk_version >= (8, 7):",
          "218:             values += ('',)",
          "219:         self.checkEnumParam(widget, 'justify', *values,",
          "220:                             fullname='justification')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:     def test_configure_default(self):",
          "225:         widget = self.create()",
          "228:     def test_invoke(self):",
          "229:         success = []",
          "",
          "[Removed Lines]",
          "226:         self.checkEnumParam(widget, 'default', 'normal', 'active', 'disabled')",
          "",
          "[Added Lines]",
          "236:         values = ('normal', 'active', 'disabled')",
          "237:         self.checkEnumParam(widget, 'default', *values,",
          "238:                             sort=tk_version >= (8, 7))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:         cbtn['command'] = ''",
          "277:         res = cbtn.invoke()",
          "279:         self.assertLessEqual(len(success), 1)",
          "280:         self.assertEqual(cbtn['offvalue'],",
          "281:             cbtn.tk.globalgetvar(cbtn['variable']))",
          "",
          "[Removed Lines]",
          "278:         self.assertFalse(str(res))",
          "",
          "[Added Lines]",
          "290:         if tk_version >= (8, 7) and self.wantobjects:",
          "291:             self.assertEqual(res, ())",
          "292:         else:",
          "293:             self.assertEqual(str(res), '')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "513:             self.assertEqual(self.combo.get(), getval)",
          "514:             self.assertEqual(self.combo.current(), currval)",
          "517:         check_get_current('', -1)",
          "519:         self.checkParam(self.combo, 'values', 'mon tue wed thur',",
          "",
          "[Removed Lines]",
          "516:         self.assertEqual(self.combo['values'], '')",
          "",
          "[Added Lines]",
          "531:         self.assertIn(self.combo['values'], ((), ''))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "638:         child2 = ttk.Label(self.root)",
          "639:         child3 = ttk.Label(self.root)",
          "643:         self.paned.insert('end', child2)",
          "644:         self.paned.insert(0, child)",
          "645:         self.assertEqual(self.paned.panes(), (str(child), str(child2)))",
          "",
          "[Removed Lines]",
          "641:         self.assertRaises(tkinter.TclError, self.paned.insert, 0, child)",
          "",
          "[Added Lines]",
          "656:         if tk_version >= (8, 7):",
          "657:             self.paned.insert(0, child)",
          "658:             self.assertEqual(self.paned.panes(), (str(child),))",
          "659:             self.paned.forget(0)",
          "660:         else:",
          "661:             self.assertRaises(tkinter.TclError, self.paned.insert, 0, child)",
          "663:         self.assertEqual(self.paned.panes(), ())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "743:         cbtn2['command'] = ''",
          "744:         res = cbtn2.invoke()",
          "746:         self.assertLessEqual(len(success), 1)",
          "747:         self.assertEqual(conv(cbtn2['value']), myvar.get())",
          "748:         self.assertEqual(myvar.get(),",
          "",
          "[Removed Lines]",
          "745:         self.assertEqual(str(res), '')",
          "",
          "[Added Lines]",
          "766:         if tk_version >= (8, 7) and self.wantobjects:",
          "767:             self.assertEqual(res, ())",
          "768:         else:",
          "769:             self.assertEqual(str(res), '')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "762:     def create(self, **kwargs):",
          "763:         return ttk.Menubutton(self.root, **kwargs)",
          "766:         widget = self.create()",
          "770:     def test_configure_menu(self):",
          "771:         widget = self.create()",
          "",
          "[Removed Lines]",
          "765:     def test_direction(self):",
          "767:         self.checkEnumParam(widget, 'direction',",
          "768:                 'above', 'below', 'left', 'right', 'flush')",
          "",
          "[Added Lines]",
          "789:     def test_configure_direction(self):",
          "791:         values = ('above', 'below', 'left', 'right', 'flush')",
          "792:         self.checkEnumParam(widget, 'direction', *values,",
          "793:                             sort=tk_version >= (8, 7))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "928:         return ttk.Scrollbar(self.root, **kwargs)",
          "932: class NotebookTest(AbstractWidgetTest, unittest.TestCase):",
          "933:     OPTIONS = (",
          "934:         'class', 'cursor', 'height', 'padding', 'style', 'takefocus', 'width',",
          "935:     )",
          "937:     def setUp(self):",
          "938:         super().setUp()",
          "",
          "[Removed Lines]",
          "931: @add_standard_options(IntegerSizeTests, StandardTtkOptionsTests)",
          "",
          "[Added Lines]",
          "956: @add_standard_options(PixelSizeTests if tk_version >= (8, 7) else IntegerSizeTests,",
          "957:                       StandardTtkOptionsTests)",
          "962:     if tk_version >= (8, 7):",
          "963:         _conv_pixels = False",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1051:         self.nb.insert(self.child1, child3)",
          "1052:         self.assertEqual(self.nb.tabs(), (str(child3), ) + tabs)",
          "1053:         self.nb.forget(child3)",
          "1055:         self.assertRaises(tkinter.TclError, self.nb.insert, -1, child3)",
          "1057:         # bad inserts",
          "",
          "[Removed Lines]",
          "1054:         self.assertRaises(tkinter.TclError, self.nb.insert, 2, child3)",
          "",
          "[Added Lines]",
          "1082:         if tk_version >= (8, 7):",
          "1083:             self.nb.insert(2, child3)",
          "1084:             self.assertEqual(self.nb.tabs(), (*tabs, str(child3)))",
          "1085:         else:",
          "1086:             self.assertRaises(tkinter.TclError, self.nb.insert, 2, child3)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1333:         self.checkParam(widget, 'columns', 'a b c',",
          "1334:                         expected=('a', 'b', 'c'))",
          "1335:         self.checkParam(widget, 'columns', ('a', 'b', 'c'))",
          "1338:     def test_configure_displaycolumns(self):",
          "1339:         widget = self.create()",
          "",
          "[Removed Lines]",
          "1336:         self.checkParam(widget, 'columns', '')",
          "",
          "[Added Lines]",
          "1368:         self.checkParam(widget, 'columns', '',",
          "1369:                         expected=() if tk_version >= (8, 7) else '')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1345:                         expected=('#all',))",
          "1346:         self.checkParam(widget, 'displaycolumns', (2, 1, 0))",
          "1347:         self.checkInvalidParam(widget, 'displaycolumns', ('a', 'b', 'd'),",
          "1349:         self.checkInvalidParam(widget, 'displaycolumns', (1, 2, 3),",
          "1351:         self.checkInvalidParam(widget, 'displaycolumns', (1, -2),",
          "1354:     def test_configure_height(self):",
          "1355:         widget = self.create()",
          "",
          "[Removed Lines]",
          "1348:                                errmsg='Invalid column index d')",
          "1350:                                errmsg='Column index 3 out of bounds')",
          "1352:                                errmsg='Column index -2 out of bounds')",
          "",
          "[Added Lines]",
          "1381:                                errmsg='Invalid column index \"?d\"?')",
          "1382:         errmsg = 'Column index \"?{}\"? out of bounds'",
          "1384:                                errmsg=errmsg.format(3))",
          "1386:                                errmsg=errmsg.format(-2))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50ea6408b8cb31d39a91f3d08b2e7a0e97d9424e",
      "candidate_info": {
        "commit_hash": "50ea6408b8cb31d39a91f3d08b2e7a0e97d9424e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/50ea6408b8cb31d39a91f3d08b2e7a0e97d9424e",
        "files": [
          "Modules/_pickle.c"
        ],
        "message": "[3.13] gh-121137: Add missing Py_DECREF calls for ADDITEMS opcode of _pickle.c (GH-121136) (#121139)\n\ngh-121137: Add missing Py_DECREF calls for ADDITEMS opcode of _pickle.c (GH-121136)\n\nPyObject_GetAttr returns a new reference, but this reference is never decremented using Py_DECREF, so Py_DECREF calls to this referece are added\n(cherry picked from commit 92893fd8dc803ed7cdde55d29d25f84ccb5e3ef0)\n\nCo-authored-by: Justin Applegate <70449145+Legoclones@users.noreply.github.com>",
        "before_after_code_files": [
          "Modules/_pickle.c||Modules/_pickle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_pickle.c||Modules/_pickle.c": [
          "File: Modules/_pickle.c -> Modules/_pickle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6524:             if (result == NULL) {",
          "6525:                 Pdata_clear(self->stack, i + 1);",
          "6526:                 Py_SET_SIZE(self->stack, mark);",
          "6527:                 return -1;",
          "6528:             }",
          "6529:             Py_DECREF(result);",
          "6530:         }",
          "6531:         Py_SET_SIZE(self->stack, mark);",
          "6532:     }",
          "6534:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6527:                 Py_DECREF(add_func);",
          "6533:         Py_DECREF(add_func);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9435124d4ae0c223fa144c638838ac3e2dd1c836",
      "candidate_info": {
        "commit_hash": "9435124d4ae0c223fa144c638838ac3e2dd1c836",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9435124d4ae0c223fa144c638838ac3e2dd1c836",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-111201: auto-indentation in _pyrepl (GH-119348) (#119427)\n\n(cherry picked from commit cd516cd1f5e94dba887353f421513fd172efadf3)\n\nCo-authored-by: Arnon Yaari <wiggin15@yahoo.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     # Instance fields",
          "100:     config: ReadlineConfig",
          "101:     more_lines: MoreLinesCallable | None = None",
          "103:     def __post_init__(self) -> None:",
          "104:         super().__post_init__()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     last_used_indentation: str | None = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             cut = 0",
          "158:         return self.history[cut:]",
          "160:     # --- simplified support for reading multiline Python statements ---",
          "162:     def collect_keymap(self) -> tuple[tuple[KeySpec, CommandName], ...]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     def update_last_used_indentation(self) -> None:",
          "162:         indentation = _get_first_indentation(self.buffer)",
          "163:         if indentation is not None:",
          "164:             self.last_used_indentation = indentation",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:     return prevlinestart, indent",
          "214: class maybe_accept(commands.Command):",
          "215:     def do(self) -> None:",
          "216:         r: ReadlineAlikeReader",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: def _get_first_indentation(buffer: list[str]) -> str | None:",
          "221:     indented_line_start = None",
          "222:     for i in range(len(buffer)):",
          "223:         if (i < len(buffer) - 1",
          "224:             and buffer[i] == \"\\n\"",
          "225:             and buffer[i + 1] in \" \\t\"",
          "226:         ):",
          "227:             indented_line_start = i + 1",
          "228:         elif indented_line_start is not None and buffer[i] not in \" \\t\\n\":",
          "229:             return ''.join(buffer[indented_line_start : i])",
          "230:     return None",
          "233: def _is_last_char_colon(buffer: list[str]) -> bool:",
          "234:     i = len(buffer)",
          "235:     while i > 0:",
          "236:         i -= 1",
          "237:         if buffer[i] not in \" \\t\\n\":  # ignore whitespaces",
          "238:             return buffer[i] == \":\"",
          "239:     return False",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:             # auto-indent the next line like the previous line",
          "228:             prevlinestart, indent = _get_previous_line_indent(r.buffer, r.pos)",
          "229:             r.insert(\"\\n\")",
          "233:         elif not self.reader.paste_mode:",
          "234:             self.finish = True",
          "235:         else:",
          "",
          "[Removed Lines]",
          "230:             if not self.reader.paste_mode and indent:",
          "231:                 for i in range(prevlinestart, prevlinestart + indent):",
          "232:                     r.insert(r.buffer[i])",
          "",
          "[Added Lines]",
          "258:             if not self.reader.paste_mode:",
          "259:                 if indent:",
          "260:                     for i in range(prevlinestart, prevlinestart + indent):",
          "261:                         r.insert(r.buffer[i])",
          "262:                 r.update_last_used_indentation()",
          "263:                 if _is_last_char_colon(r.buffer):",
          "264:                     if r.last_used_indentation is not None:",
          "265:                         indentation = r.last_used_indentation",
          "266:                     else:",
          "267:                         # default",
          "268:                         indentation = \" \" * 4",
          "269:                     r.insert(indentation)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from unittest import TestCase",
          "6: from unittest.mock import patch",
          "10: from _pyrepl.console import Event",
          "11: from _pyrepl.readline import ReadlineAlikeReader, ReadlineConfig",
          "12: from _pyrepl.readline import multiline_input as readline_multiline_input",
          "15: class TestCursorPosition(TestCase):",
          "16:     def test_up_arrow_simple(self):",
          "17:         # fmt: off",
          "18:         code = (",
          "21:         )",
          "22:         # fmt: on",
          "23:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "8: from .support import FakeConsole, handle_all_events, handle_events_narrow_console",
          "9: from .support import more_lines, multiline_input, code_to_events",
          "19:             'def f():\\n'",
          "20:             '  ...\\n'",
          "",
          "[Added Lines]",
          "8: from .support import (",
          "9:     FakeConsole,",
          "10:     handle_all_events,",
          "11:     handle_events_narrow_console,",
          "12:     more_lines,",
          "13:     multiline_input,",
          "14:     code_to_events,",
          "15: )",
          "22:     def prepare_reader(self, events):",
          "23:         console = FakeConsole(events)",
          "24:         config = ReadlineConfig(readline_completer=None)",
          "25:         reader = ReadlineAlikeReader(console=console, config=config)",
          "26:         return reader",
          "31:             \"def f():\\n\"",
          "32:             \"  ...\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     def test_down_arrow_end_of_input(self):",
          "35:         # fmt: off",
          "36:         code = (",
          "39:         )",
          "40:         # fmt: on",
          "41:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "37:             'def f():\\n'",
          "38:             '  ...\\n'",
          "",
          "[Added Lines]",
          "49:             \"def f():\\n\"",
          "50:             \"  ...\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:         self.assertEqual(reader.pos, 10)",
          "301:         self.assertEqual(reader.cxy, (1, 1))",
          "304: class TestPyReplOutput(TestCase):",
          "305:     def prepare_reader(self, events):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:     def test_auto_indent_default(self):",
          "316:         # fmt: off",
          "317:         input_code = (",
          "318:             \"def f():\\n\"",
          "319:                 \"pass\\n\\n\"",
          "320:         )",
          "322:         output_code = (",
          "323:             \"def f():\\n\"",
          "324:             \"    pass\\n\"",
          "325:             \"    \"",
          "326:         )",
          "327:         # fmt: on",
          "329:     def test_auto_indent_continuation(self):",
          "330:         # auto indenting according to previous user indentation",
          "331:         # fmt: off",
          "332:         events = itertools.chain(",
          "333:             code_to_events(\"def f():\\n\"),",
          "334:             # add backspace to delete default auto-indent",
          "335:             [",
          "336:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "337:             ],",
          "338:             code_to_events(",
          "339:                 \"  pass\\n\"",
          "340:                   \"pass\\n\\n\"",
          "341:             ),",
          "342:         )",
          "344:         output_code = (",
          "345:             \"def f():\\n\"",
          "346:             \"  pass\\n\"",
          "347:             \"  pass\\n\"",
          "348:             \"  \"",
          "349:         )",
          "350:         # fmt: on",
          "352:         reader = self.prepare_reader(events)",
          "353:         output = multiline_input(reader)",
          "354:         self.assertEqual(output, output_code)",
          "356:     def test_auto_indent_prev_block(self):",
          "357:         # auto indenting according to indentation in different block",
          "358:         # fmt: off",
          "359:         events = itertools.chain(",
          "360:             code_to_events(\"def f():\\n\"),",
          "361:             # add backspace to delete default auto-indent",
          "362:             [",
          "363:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "364:             ],",
          "365:             code_to_events(",
          "366:                 \"  pass\\n\"",
          "367:                 \"pass\\n\\n\"",
          "368:             ),",
          "369:             code_to_events(",
          "370:                 \"def g():\\n\"",
          "371:                   \"pass\\n\\n\"",
          "372:             ),",
          "373:         )",
          "376:         output_code = (",
          "377:             \"def g():\\n\"",
          "378:             \"  pass\\n\"",
          "379:             \"  \"",
          "380:         )",
          "381:         # fmt: on",
          "383:         reader = self.prepare_reader(events)",
          "384:         output1 = multiline_input(reader)",
          "385:         output2 = multiline_input(reader)",
          "386:         self.assertEqual(output2, output_code)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:     def test_multiline_edit(self):",
          "318:         events = itertools.chain(",
          "320:             [",
          "321:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "322:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "323:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "324:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "327:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "328:                 Event(evt=\"key\", data=\"g\", raw=bytearray(b\"g\")),",
          "329:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "",
          "[Removed Lines]",
          "319:             code_to_events(\"def f():\\n  ...\\n\\n\"),",
          "325:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "326:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "",
          "[Added Lines]",
          "404:             code_to_events(\"def f():\\n...\\n\\n\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:         reader = self.prepare_reader(events)",
          "336:         output = multiline_input(reader)",
          "338:         output = multiline_input(reader)",
          "341:     def test_history_navigation_with_up_arrow(self):",
          "342:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "337:         self.assertEqual(output, \"def f():\\n  ...\\n  \")",
          "339:         self.assertEqual(output, \"def g():\\n  ...\\n  \")",
          "",
          "[Added Lines]",
          "420:         self.assertEqual(output, \"def f():\\n    ...\\n    \")",
          "422:         self.assertEqual(output, \"def g():\\n    ...\\n    \")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "508:     def test_paste(self):",
          "509:         # fmt: off",
          "510:         code = (",
          "517:         )",
          "518:         # fmt: on",
          "",
          "[Removed Lines]",
          "511:             'def a():\\n'",
          "512:             '  for x in range(10):\\n'",
          "513:             '    if x%2:\\n'",
          "514:             '      print(x)\\n'",
          "515:             '    else:\\n'",
          "516:             '      pass\\n'",
          "",
          "[Added Lines]",
          "595:             \"def a():\\n\"",
          "596:             \"  for x in range(10):\\n\"",
          "597:             \"    if x%2:\\n\"",
          "598:             \"      print(x)\\n\"",
          "599:             \"    else:\\n\"",
          "600:             \"      pass\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "534:     def test_paste_mid_newlines(self):",
          "535:         # fmt: off",
          "536:         code = (",
          "541:         )",
          "542:         # fmt: on",
          "",
          "[Removed Lines]",
          "537:             'def f():\\n'",
          "538:             '  x = y\\n'",
          "539:             '  \\n'",
          "540:             '  y = z\\n'",
          "",
          "[Added Lines]",
          "621:             \"def f():\\n\"",
          "622:             \"  x = y\\n\"",
          "623:             \"  \\n\"",
          "624:             \"  y = z\\n\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "558:     def test_paste_mid_newlines_not_in_paste_mode(self):",
          "559:         # fmt: off",
          "560:         code = (",
          "565:         )",
          "567:         expected = (",
          "571:         )",
          "572:         # fmt: on",
          "",
          "[Removed Lines]",
          "561:             'def f():\\n'",
          "562:             '  x = y\\n'",
          "563:             '  \\n'",
          "564:             '  y = z\\n\\n'",
          "568:             'def f():\\n'",
          "569:             '  x = y\\n'",
          "570:             '    '",
          "",
          "[Added Lines]",
          "645:             \"def f():\\n\"",
          "646:                 \"x = y\\n\"",
          "647:                 \"\\n\"",
          "648:                 \"y = z\\n\\n\"",
          "652:             \"def f():\\n\"",
          "653:             \"    x = y\\n\"",
          "654:             \"    \"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "579:     def test_paste_not_in_paste_mode(self):",
          "580:         # fmt: off",
          "581:         input_code = (",
          "588:         )",
          "590:         output_code = (",
          "596:         )",
          "597:         # fmt: on",
          "",
          "[Removed Lines]",
          "582:             'def a():\\n'",
          "583:             '  for x in range(10):\\n'",
          "584:             '    if x%2:\\n'",
          "585:             '      print(x)\\n'",
          "586:             '    else:\\n'",
          "587:             '      pass\\n\\n'",
          "591:             'def a():\\n'",
          "592:             '  for x in range(10):\\n'",
          "593:             '      if x%2:\\n'",
          "594:             '            print(x)\\n'",
          "595:             '                else:'",
          "",
          "[Added Lines]",
          "666:             \"def a():\\n\"",
          "667:                 \"for x in range(10):\\n\"",
          "668:                     \"if x%2:\\n\"",
          "669:                         \"print(x)\\n\"",
          "670:                     \"else:\\n\"",
          "671:                         \"pass\\n\\n\"",
          "675:             \"def a():\\n\"",
          "676:             \"    for x in range(10):\\n\"",
          "677:             \"        if x%2:\\n\"",
          "678:             \"            print(x)\\n\"",
          "679:             \"            else:\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "605:         \"\"\"Test that bracketed paste using \\x1b[200~ and \\x1b[201~ works.\"\"\"",
          "606:         # fmt: off",
          "607:         input_code = (",
          "616:         )",
          "618:         output_code = (",
          "627:         )",
          "628:         # fmt: on",
          "",
          "[Removed Lines]",
          "608:             'def a():\\n'",
          "609:             '  for x in range(10):\\n'",
          "610:             '\\n'",
          "611:             '    if x%2:\\n'",
          "612:             '      print(x)\\n'",
          "613:             '\\n'",
          "614:             '    else:\\n'",
          "615:             '      pass\\n'",
          "619:             'def a():\\n'",
          "620:             '  for x in range(10):\\n'",
          "621:             '\\n'",
          "622:             '    if x%2:\\n'",
          "623:             '      print(x)\\n'",
          "624:             '\\n'",
          "625:             '    else:\\n'",
          "626:             '      pass\\n'",
          "",
          "[Added Lines]",
          "692:             \"def a():\\n\"",
          "693:             \"  for x in range(10):\\n\"",
          "694:             \"\\n\"",
          "695:             \"    if x%2:\\n\"",
          "696:             \"      print(x)\\n\"",
          "697:             \"\\n\"",
          "698:             \"    else:\\n\"",
          "699:             \"      pass\\n\"",
          "703:             \"def a():\\n\"",
          "704:             \"  for x in range(10):\\n\"",
          "705:             \"\\n\"",
          "706:             \"    if x%2:\\n\"",
          "707:             \"      print(x)\\n\"",
          "708:             \"\\n\"",
          "709:             \"    else:\\n\"",
          "710:             \"      pass\\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3fc3a2db84886f13bf020d7a1ec7f6b9ef1b775",
      "candidate_info": {
        "commit_hash": "c3fc3a2db84886f13bf020d7a1ec7f6b9ef1b775",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c3fc3a2db84886f13bf020d7a1ec7f6b9ef1b775",
        "files": [
          "Lib/pydoc.py"
        ],
        "message": "[3.13] gh-119856: Support exiting help() with just \"exit\" (GH-119858) (#119967)\n\ngh-119856: Support exiting help() with just \"exit\" (GH-119858)\n(cherry picked from commit 4223f1d828d3a3e1c8d803e3fdd420afd7d85faf)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/pydoc.py||Lib/pydoc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pydoc.py||Lib/pydoc.py": [
          "File: Lib/pydoc.py -> Lib/pydoc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2008:             if (len(request) > 2 and request[0] == request[-1] in (\"'\", '\"')",
          "2009:                     and request[0] not in request[1:-1]):",
          "2010:                 request = request[1:-1]",
          "2012:             if request == 'help':",
          "2013:                 self.intro()",
          "2014:             else:",
          "",
          "[Removed Lines]",
          "2011:             if request.lower() in ('q', 'quit'): break",
          "",
          "[Added Lines]",
          "2011:             if request.lower() in ('q', 'quit', 'exit'): break",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2060: enter \"modules spam\".",
          "2062: To quit this help utility and return to the interpreter,",
          "2064: '''.format('%d.%d' % sys.version_info[:2]))",
          "2066:     def list(self, items, columns=4, width=80):",
          "",
          "[Removed Lines]",
          "2063: enter \"q\" or \"quit\".",
          "",
          "[Added Lines]",
          "2063: enter \"q\", \"quit\" or \"exit\".",
          "",
          "---------------"
        ]
      }
    }
  ]
}