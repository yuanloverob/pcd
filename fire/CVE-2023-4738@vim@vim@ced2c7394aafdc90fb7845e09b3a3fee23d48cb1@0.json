{
  "cve_id": "CVE-2023-4738",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.1848.",
  "repo": "vim/vim",
  "patch_hash": "ced2c7394aafdc90fb7845e09b3a3fee23d48cb1",
  "patch_info": {
    "commit_hash": "ced2c7394aafdc90fb7845e09b3a3fee23d48cb1",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/ced2c7394aafdc90fb7845e09b3a3fee23d48cb1",
    "files": [
      "src/ex_cmds.c",
      "src/regexp.c",
      "src/testdir/crash/vim_regsub_both",
      "src/testdir/test_crash.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.1848: [security] buffer-overflow in vim_regsub_both()\n\nProblem:  buffer-overflow in vim_regsub_both()\nSolution: Check remaining space\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/ex_cmds.c||src/ex_cmds.c",
      "src/regexp.c||src/regexp.c",
      "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_cmds.c||src/ex_cmds.c": [
      "File: src/ex_cmds.c -> src/ex_cmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4651:   mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);",
      "4652:   new_end += copy_len;",
      "4654: #ifdef FEAT_EVAL",
      "4655:   ++textlock;",
      "4656: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4654:   if (new_start_len - copy_len < sublen)",
      "4655:       sublen = new_start_len - copy_len - 1;",
      "",
      "---------------"
    ],
    "src/regexp.c||src/regexp.c": [
      "File: src/regexp.c -> src/regexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2052:  if (copy)",
      "2053:  {",
      "2055:      {",
      "2056:   STRCPY(dest, eval_result[nested]);",
      "2057:   dst += STRLEN(eval_result[nested]);",
      "",
      "[Removed Lines]",
      "2054:      if (eval_result[nested] != NULL)",
      "",
      "[Added Lines]",
      "2054:      if (eval_result[nested] != NULL &&",
      "2055:       STRLEN(eval_result[nested]) < destlen)",
      "",
      "---------------"
    ],
    "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
      "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: func Test_crash1()",
      "8:   \" The following used to crash Vim",
      "10:   let args = ' -u NONE -i NONE -n -e -s -S '",
      "11:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf1', opts)",
      "12:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
      "",
      "[Removed Lines]",
      "9:   let opts = #{wait_for_ruler: 0}",
      "",
      "[Added Lines]",
      "9:   let opts = #{wait_for_ruler: 0, rows: 20}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: endfunc",
      "25: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: func Test_crash2()",
      "26:   \" The following used to crash Vim",
      "27:   let opts = #{wait_for_ruler: 0, rows: 20}",
      "28:   let args = ' -u NONE -i NONE -n -e -s -S '",
      "29:   let buf = RunVimInTerminal(args .. ' crash/vim_regsub_both', opts)",
      "30:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
      "31:   exe buf .. \"bw!\"",
      "32: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700: static int included_patches[] =",
      "703:     1847,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     1848,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8a034210f043639f27b6f346c5a9933f17e7159",
      "candidate_info": {
        "commit_hash": "c8a034210f043639f27b6f346c5a9933f17e7159",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c8a034210f043639f27b6f346c5a9933f17e7159",
        "files": [
          "src/ex_cmds.c",
          "src/version.c"
        ],
        "message": "patch 9.0.1849: CI error on different signedness in ex_cmds.c\n\nProblem:  CI error on different signedness\nSolution: cast unsigned to int\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4651:   mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);",
          "4652:   new_end += copy_len;",
          "4655:       sublen = new_start_len - copy_len - 1;",
          "4657: #ifdef FEAT_EVAL",
          "",
          "[Removed Lines]",
          "4654:   if (new_start_len - copy_len < sublen)",
          "",
          "[Added Lines]",
          "4654:   if ((int)new_start_len - copy_len < sublen)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1848,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1849,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1dc9a627536304bc4f738c21e909ad9fcf3974c",
      "candidate_info": {
        "commit_hash": "e1dc9a627536304bc4f738c21e909ad9fcf3974c",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/e1dc9a627536304bc4f738c21e909ad9fcf3974c",
        "files": [
          "src/ex_cmds.c",
          "src/testdir/Make_all.mak",
          "src/testdir/crash/poc_huaf1",
          "src/testdir/crash/poc_huaf2",
          "src/testdir/crash/poc_huaf3",
          "src/testdir/dumps/Test_crash_01.dump",
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1840: [security] use-after-free in do_ecmd\n\nProblem:  use-after-free in do_ecmd\nSolution: Verify oldwin pointer after reset_VIsual()\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/testdir/Make_all.mak||src/testdir/Make_all.mak",
          "src/testdir/dumps/Test_crash_01.dump||src/testdir/dumps/Test_crash_01.dump",
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2646:  goto theend;",
          "2647:     }",
          "2653:     reset_VIsual();",
          "2655: #if defined(FEAT_EVAL)",
          "2656:     if ((command != NULL || newlnum > (linenr_T)0)",
          "2657:      && *get_vim_var_str(VV_SWAPCOMMAND) == NUL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2658:     if (oldwin != NULL && !win_valid(oldwin))",
          "2659:  oldwin = NULL;",
          "",
          "---------------"
        ],
        "src/testdir/Make_all.mak||src/testdir/Make_all.mak": [
          "File: src/testdir/Make_all.mak -> src/testdir/Make_all.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  test_conceal \\",
          "106:  test_const \\",
          "107:  test_cpoptions \\",
          "108:  test_crypt \\",
          "109:  test_cscope \\",
          "110:  test_cursor_func \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:  test_crash \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:  test_conceal.res \\",
          "370:  test_const.res \\",
          "371:  test_cpoptions.res \\",
          "372:  test_crypt.res \\",
          "373:  test_cscope.res \\",
          "374:  test_cursor_func.res \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:  test_crash.res \\",
          "",
          "---------------"
        ],
        "src/testdir/dumps/Test_crash_01.dump||src/testdir/dumps/Test_crash_01.dump": [
          "File: src/testdir/dumps/Test_crash_01.dump -> src/testdir/dumps/Test_crash_01.dump",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: > +0&#ffffff0@74",
          "2: @75",
          "3: @75",
          "4: @75",
          "5: @75",
          "6: @75",
          "7: @75",
          "8: @75",
          "9: @75",
          "10: @75",
          "11: @75",
          "12: @75",
          "13: @75",
          "14: @75",
          "15: @75",
          "16: @75",
          "17: @75",
          "18: @75",
          "19: @75",
          "20: @75",
          "",
          "---------------"
        ],
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \" Some tests, that used to crash Vim",
          "2: source check.vim",
          "3: source screendump.vim",
          "5: CheckScreendump",
          "7: func Test_crash1()",
          "8:   \" The following used to crash Vim",
          "9:   let opts = #{wait_for_ruler: 0}",
          "10:   let args = ' -u NONE -i NONE -n -e -s -S '",
          "11:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf1', opts)",
          "12:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "13:   exe buf .. \"bw!\"",
          "15:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf2', opts)",
          "16:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "17:   exe buf .. \"bw!\"",
          "19:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf3', opts)",
          "20:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "21:   exe buf .. \"bw!\"",
          "23: endfunc",
          "25: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1839,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1840,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15cbaae31382f17c96a4519e334dd7ba4a90ecba",
      "candidate_info": {
        "commit_hash": "15cbaae31382f17c96a4519e334dd7ba4a90ecba",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/15cbaae31382f17c96a4519e334dd7ba4a90ecba",
        "files": [
          "src/regexp.c",
          "src/version.c"
        ],
        "message": "patch 9.0.1853: CI error on different signedness in regexp.c\n\nProblem:  CI error on different signedness in regexp.c\n          (after patch 9.0.1848)\nSolution: Cast strlen() call to int\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/regexp.c||src/regexp.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/regexp.c||src/regexp.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/regexp.c||src/regexp.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/regexp.c||src/regexp.c": [
          "File: src/regexp.c -> src/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052:  if (copy)",
          "2053:  {",
          "2054:      if (eval_result[nested] != NULL &&",
          "2056:      {",
          "2057:   STRCPY(dest, eval_result[nested]);",
          "2058:   dst += STRLEN(eval_result[nested]);",
          "",
          "[Removed Lines]",
          "2055:       STRLEN(eval_result[nested]) < destlen)",
          "",
          "[Added Lines]",
          "2055:       (int)STRLEN(eval_result[nested]) < destlen)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1852,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1853,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db510ca8052884fd260f425025bacf44f6c92fa9",
      "candidate_info": {
        "commit_hash": "db510ca8052884fd260f425025bacf44f6c92fa9",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/db510ca8052884fd260f425025bacf44f6c92fa9",
        "files": [
          "src/testdir/test_crash.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.1854: test_crash1() fails on CI\n\nProblem:  test_crash1() fails on CI\nSolution: don't run Screendump test, verify that it doesn't crash\n          by running it through a shell command line, testing\n          the exit value and concatenating success cmd using '&&'\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_crash.vim||src/testdir/test_crash.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_crash.vim||src/testdir/test_crash.vim": [
          "File: src/testdir/test_crash.vim -> src/testdir/test_crash.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: func Test_crash1()",
          "8:   \" The following used to crash Vim",
          "21:   exe buf .. \"bw!\"",
          "23: endfunc",
          "25: func Test_crash2()",
          "",
          "[Removed Lines]",
          "9:   let opts = #{wait_for_ruler: 0, rows: 20}",
          "10:   let args = ' -u NONE -i NONE -n -e -s -S '",
          "11:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf1', opts)",
          "12:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "13:   exe buf .. \"bw!\"",
          "15:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf2', opts)",
          "16:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "17:   exe buf .. \"bw!\"",
          "19:   let buf = RunVimInTerminal(args .. ' crash/poc_huaf3', opts)",
          "20:   call VerifyScreenDump(buf, 'Test_crash_01', {})",
          "",
          "[Added Lines]",
          "9:   \" let opts = #{wait_for_ruler: 0, rows: 20, cmd: 'sh'}",
          "10:   let opts = #{cmd: 'sh'}",
          "11:   let args = 'bash'",
          "12:   let vim  = GetVimProg()",
          "14:   let buf = RunVimInTerminal(args, opts)",
          "16:   let file = 'crash/poc_huaf1'",
          "17:   let cmn_args = \"%s -u NONE -i NONE -n -e -s -S %s -c ':qa!'\"",
          "18:   let args = printf(cmn_args, vim, file)",
          "19:   call term_sendkeys(buf, args ..",
          "20:     \\ '  && echo \"crash 1: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "22:   let file = 'crash/poc_huaf2'",
          "23:   let args = printf(cmn_args, vim, file)",
          "24:   call term_sendkeys(buf, args ..",
          "25:     \\ '  && echo \"crash 2: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "27:   let file = 'crash/poc_huaf3'",
          "28:   let args = printf(cmn_args, vim, file)",
          "29:   call term_sendkeys(buf, args ..",
          "30:     \\ '  && echo \"crash 3: [OK]\" >> X_crash1_result.txt' .. \"\\<cr>\")",
          "32:   call TermWait(buf, 50)",
          "34:   \" clean up",
          "37:   sp X_crash1_result.txt",
          "38:   call assert_equal(['crash 1: [OK]', 'crash 2: [OK]', 'crash 3: [OK]'],",
          "39:     \\ getline(1, '$'))",
          "40:   bw!",
          "42:   call delete('X_crash1_result.txt')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     1853,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     1854,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82792db6315f7c7b0e299cdde1566f2932a463f8",
      "candidate_info": {
        "commit_hash": "82792db6315f7c7b0e299cdde1566f2932a463f8",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/82792db6315f7c7b0e299cdde1566f2932a463f8",
        "files": [
          "src/regexp.c",
          "src/regexp_bt.c",
          "src/regexp_nfa.c",
          "src/version.c"
        ],
        "message": "patch 9.1.0409: too many strlen() calls in the regexp engine\n\nProblem:  too many strlen() calls in the regexp engine\nSolution: refactor code to retrieve strlen differently, make use\n          of bsearch() for getting the character class\n          (John Marriott)\n\ncloses: #14648\n\nSigned-off-by: John Marriott <basilisk@internode.on.net>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/regexp.c||src/regexp.c",
          "src/regexp_bt.c||src/regexp_bt.c",
          "src/regexp_nfa.c||src/regexp_nfa.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/regexp.c||src/regexp.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/regexp.c||src/regexp.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/regexp.c||src/regexp.c": [
          "File: src/regexp.c -> src/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: }",
          "163: static char_u  *reg_prev_sub = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: static size_t  reg_prev_sublen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:     return c;",
          "198: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: enum",
          "202: {",
          "203:     CLASS_ALNUM = 0,",
          "204:     CLASS_ALPHA,",
          "205:     CLASS_BLANK,",
          "206:     CLASS_CNTRL,",
          "207:     CLASS_DIGIT,",
          "208:     CLASS_GRAPH,",
          "209:     CLASS_LOWER,",
          "210:     CLASS_PRINT,",
          "211:     CLASS_PUNCT,",
          "212:     CLASS_SPACE,",
          "213:     CLASS_UPPER,",
          "214:     CLASS_XDIGIT,",
          "215:     CLASS_TAB,",
          "216:     CLASS_RETURN,",
          "217:     CLASS_BACKSPACE,",
          "218:     CLASS_ESCAPE,",
          "219:     CLASS_IDENT,",
          "220:     CLASS_KEYWORD,",
          "221:     CLASS_FNAME,",
          "222:     CLASS_NONE = 99",
          "223: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:     static int",
          "206: get_char_class(char_u **pp)",
          "207: {",
          "209:     {",
          "248:     };",
          "253:     {",
          "260:     }",
          "261:     return CLASS_NONE;",
          "262: }",
          "",
          "[Removed Lines]",
          "208:     static const char *(class_names[]) =",
          "210:  \"alnum:]\",",
          "211: #define CLASS_ALNUM 0",
          "212:  \"alpha:]\",",
          "213: #define CLASS_ALPHA 1",
          "214:  \"blank:]\",",
          "215: #define CLASS_BLANK 2",
          "216:  \"cntrl:]\",",
          "217: #define CLASS_CNTRL 3",
          "218:  \"digit:]\",",
          "219: #define CLASS_DIGIT 4",
          "220:  \"graph:]\",",
          "221: #define CLASS_GRAPH 5",
          "222:  \"lower:]\",",
          "223: #define CLASS_LOWER 6",
          "224:  \"print:]\",",
          "225: #define CLASS_PRINT 7",
          "226:  \"punct:]\",",
          "227: #define CLASS_PUNCT 8",
          "228:  \"space:]\",",
          "229: #define CLASS_SPACE 9",
          "230:  \"upper:]\",",
          "231: #define CLASS_UPPER 10",
          "232:  \"xdigit:]\",",
          "233: #define CLASS_XDIGIT 11",
          "234:  \"tab:]\",",
          "235: #define CLASS_TAB 12",
          "236:  \"return:]\",",
          "237: #define CLASS_RETURN 13",
          "238:  \"backspace:]\",",
          "239: #define CLASS_BACKSPACE 14",
          "240:  \"escape:]\",",
          "241: #define CLASS_ESCAPE 15",
          "242:  \"ident:]\",",
          "243: #define CLASS_IDENT 16",
          "244:  \"keyword:]\",",
          "245: #define CLASS_KEYWORD 17",
          "246:  \"fname:]\",",
          "247: #define CLASS_FNAME 18",
          "249: #define CLASS_NONE 99",
          "250:     int i;",
          "252:     if ((*pp)[1] == ':')",
          "254:  for (i = 0; i < (int)ARRAY_LENGTH(class_names); ++i)",
          "255:      if (STRNCMP(*pp + 2, class_names[i], STRLEN(class_names[i])) == 0)",
          "256:      {",
          "258:   return i;",
          "259:      }",
          "",
          "[Added Lines]",
          "234:     static keyvalue_T char_class_tab[] =",
          "236:  KEYVALUE_ENTRY(CLASS_ALNUM, \"alnum:]\"),",
          "237:  KEYVALUE_ENTRY(CLASS_ALPHA, \"alpha:]\"),",
          "238:  KEYVALUE_ENTRY(CLASS_BACKSPACE, \"backspace:]\"),",
          "239:  KEYVALUE_ENTRY(CLASS_BLANK, \"blank:]\"),",
          "240:  KEYVALUE_ENTRY(CLASS_CNTRL, \"cntrl:]\"),",
          "241:  KEYVALUE_ENTRY(CLASS_DIGIT, \"digit:]\"),",
          "242:  KEYVALUE_ENTRY(CLASS_ESCAPE, \"escape:]\"),",
          "243:  KEYVALUE_ENTRY(CLASS_FNAME, \"fname:]\"),",
          "244:  KEYVALUE_ENTRY(CLASS_GRAPH, \"graph:]\"),",
          "245:  KEYVALUE_ENTRY(CLASS_IDENT, \"ident:]\"),",
          "246:  KEYVALUE_ENTRY(CLASS_KEYWORD, \"keyword:]\"),",
          "247:  KEYVALUE_ENTRY(CLASS_LOWER, \"lower:]\"),",
          "248:  KEYVALUE_ENTRY(CLASS_PRINT, \"print:]\"),",
          "249:  KEYVALUE_ENTRY(CLASS_PUNCT, \"punct:]\"),",
          "250:  KEYVALUE_ENTRY(CLASS_RETURN, \"return:]\"),",
          "251:  KEYVALUE_ENTRY(CLASS_SPACE, \"space:]\"),",
          "252:  KEYVALUE_ENTRY(CLASS_TAB, \"tab:]\"),",
          "253:  KEYVALUE_ENTRY(CLASS_UPPER, \"upper:]\"),",
          "254:  KEYVALUE_ENTRY(CLASS_XDIGIT, \"xdigit:]\")",
          "258:     if ((*pp)[1] == ':' && ASCII_ISLOWER((*pp)[2])",
          "259:    && ASCII_ISLOWER((*pp)[3]) && ASCII_ISLOWER((*pp)[4]))",
          "261:  keyvalue_T target;",
          "262:  keyvalue_T *entry;",
          "265:  static keyvalue_T *last_entry = NULL;",
          "267:  target.key = 0;",
          "268:  target.value = (char *)*pp + 2;",
          "269:  target.length = 0;      // not used, see cmp_keyvalue_value_n()",
          "271:  if (last_entry != NULL && cmp_keyvalue_value_n(&target, last_entry) == 0)",
          "272:      entry = last_entry;",
          "273:  else",
          "274:      entry = (keyvalue_T *)bsearch(&target, &char_class_tab,",
          "275:      ARRAY_LENGTH(char_class_tab),",
          "276:      sizeof(char_class_tab[0]), cmp_keyvalue_value_n);",
          "277:  if (entry != NULL)",
          "278:  {",
          "279:      last_entry = entry;",
          "281:      return entry->key;",
          "282:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "619:  {",
          "620:      if (dirc == '?' && newp != NULL && p[1] == '?')",
          "621:      {",
          "623:   if (*newp == NULL)",
          "624:   {",
          "626:       if (*newp != NULL)",
          "627:    p = *newp + (p - startp);",
          "628:   }",
          "629:   if (dropped != NULL)",
          "630:       ++*dropped;",
          "631:   if (*newp != NULL)",
          "633:   else",
          "634:       ++p;",
          "635:      }",
          "",
          "[Removed Lines]",
          "632:       STRMOVE(p, p + 1);",
          "",
          "[Added Lines]",
          "645:   size_t startplen;",
          "650:       startplen = STRLEN(startp);",
          "658:       mch_memmove(p, p + 1, (startplen - ((p + 1) - *newp)) + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1189:     return vim_iswordc_buf(c, rex.reg_buf);",
          "1190: }",
          "1195:     static char_u *",
          "1196: reg_getline(linenr_T lnum)",
          "1197: {",
          "1206: }",
          "1208: #ifdef FEAT_SYN_HL",
          "",
          "[Removed Lines]",
          "1200:     if (rex.reg_firstlnum + lnum < 1)",
          "1201:  return NULL;",
          "1202:     if (lnum > rex.reg_maxline)",
          "1204:  return (char_u *)\"\";",
          "1205:     return ml_get_buf(rex.reg_buf, rex.reg_firstlnum + lnum, FALSE);",
          "",
          "[Added Lines]",
          "1218: #ifdef FEAT_EVAL",
          "1219: static int can_f_submatch = FALSE; // TRUE when submatch() can be used",
          "1224: typedef struct {",
          "1225:     regmatch_T *sm_match;",
          "1226:     regmmatch_T *sm_mmatch;",
          "1227:     linenr_T sm_firstlnum;",
          "1228:     linenr_T sm_maxline;",
          "1229:     int  sm_line_lbr;",
          "1230: } regsubmatch_T;",
          "1232: static regsubmatch_T rsm;  // can only be used when can_f_submatch is TRUE",
          "1233: #endif",
          "1235: typedef enum",
          "1236: {",
          "1237:     RGLF_LINE = 0x01,",
          "1238:     RGLF_LENGTH = 0x02",
          "1239: #ifdef FEAT_EVAL",
          "1240:     ,",
          "1241:     RGLF_SUBMATCH = 0x04",
          "1242: #endif",
          "1243: } reg_getline_flags_T;",
          "1252:     static void",
          "1253: reg_getline_common(linenr_T lnum, reg_getline_flags_T flags, char_u **line, colnr_T *length)",
          "1254: {",
          "1255:     int get_line = flags & RGLF_LINE;",
          "1256:     int get_length = flags & RGLF_LENGTH;",
          "1257:     linenr_T firstlnum;",
          "1258:     linenr_T maxline;",
          "1260: #ifdef FEAT_EVAL",
          "1261:     if (flags & RGLF_SUBMATCH)",
          "1262:     {",
          "1263:  firstlnum = rsm.sm_firstlnum + lnum;",
          "1264:  maxline = rsm.sm_maxline;",
          "1265:     }",
          "1266:     else",
          "1267: #endif",
          "1268:     {",
          "1269:  firstlnum = rex.reg_firstlnum + lnum;",
          "1270:  maxline = rex.reg_maxline;",
          "1271:     }",
          "1275:     if (firstlnum < 1)",
          "1276:     {",
          "1277:  if (get_line)",
          "1279:  if (get_length)",
          "1282:  return;",
          "1283:     }",
          "1285:     if (lnum > maxline)",
          "1286:     {",
          "1288:  if (get_line)",
          "1290:  if (get_length)",
          "1293:  return;",
          "1294:     }",
          "1296:     if (get_line)",
          "1298:     if (get_length)",
          "1300: }",
          "1308:     char_u *line;",
          "1310:     reg_getline_common(lnum, RGLF_LINE, &line, NULL);",
          "1312:     return line;",
          "1313: }",
          "1318:     static colnr_T",
          "1319: reg_getline_len(linenr_T lnum)",
          "1320: {",
          "1321:     colnr_T length;",
          "1323:     reg_getline_common(lnum, RGLF_LENGTH, NULL, &length);",
          "1325:     return length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1484:  if (clnum == end_lnum)",
          "1485:      len = end_col - ccol;",
          "1486:  else",
          "1489:  if (cstrncmp(p + ccol, rex.input, &len) != 0)",
          "1490:      return RA_NOMATCH;  // doesn't match",
          "",
          "[Removed Lines]",
          "1487:      len = (int)STRLEN(p + ccol);",
          "",
          "[Added Lines]",
          "1607:      len = (int)reg_getline_len(clnum) - ccol;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1745: {",
          "1746:     char_u *newsub = source;",
          "1747:     char_u *p;",
          "1749:     for (p = newsub; *p; ++p)",
          "1750:     {",
          "1752:  {",
          "1754:      {",
          "1762:   {",
          "1763:       emsg(_(e_resulting_text_too_long));",
          "1764:       break;",
          "1765:   }",
          "1769:   {",
          "1785:   }",
          "1786:      }",
          "1789:      else",
          "1791:      --p;",
          "1792:  }",
          "1793:  else",
          "",
          "[Removed Lines]",
          "1751:  if ((*p == '~' && magic) || (*p == '\\\\' && *(p + 1) == '~' && !magic))",
          "1753:      if (reg_prev_sub != NULL)",
          "1758:   size_t prevsublen = STRLEN(reg_prev_sub);",
          "1759:   size_t  newsublen = STRLEN(newsub);",
          "1760:   if (prevsublen > MAXCOL || newsublen > MAXCOL",
          "1761:          || newsublen + prevsublen > MAXCOL)",
          "1767:   char_u *tmpsub = alloc(newsublen + prevsublen);",
          "1768:   if (tmpsub != NULL)",
          "1771:       size_t prefixlen = p - newsub; // not including ~",
          "1772:       mch_memmove(tmpsub, newsub, prefixlen);",
          "1774:       mch_memmove(tmpsub + prefixlen, reg_prev_sub,",
          "1775:               prevsublen);",
          "1777:       if (!magic)",
          "1778:    ++p;   // back off backslash",
          "1779:       STRCPY(tmpsub + prefixlen + prevsublen, p + 1);",
          "1781:       if (newsub != source) // allocated newsub before",
          "1782:    vim_free(newsub);",
          "1783:       newsub = tmpsub;",
          "1784:       p = newsub + prefixlen + prevsublen;",
          "1787:      else if (magic)",
          "1788:   STRMOVE(p, p + 1); // remove '~'",
          "1790:   STRMOVE(p, p + 2); // remove '\\~'",
          "",
          "[Added Lines]",
          "1868:     size_t newsublen = 0;",
          "1869:     char_u tilde[3] = {'~', NUL, NUL};",
          "1870:     size_t tildelen = 1;",
          "1871:     int  error = FALSE;",
          "1873:     if (!magic)",
          "1874:     {",
          "1875:  tilde[0] = '\\\\';",
          "1876:  tilde[1] = '~';",
          "1877:  tilde[2] = NUL;",
          "1878:  tildelen = 2;",
          "1879:     }",
          "1883:  if (STRNCMP(p, tilde, tildelen) == 0)",
          "1885:      size_t prefixlen = p - newsub;  // not including the tilde",
          "1886:      char_u *postfix = p + tildelen;",
          "1887:      size_t postfixlen;",
          "1888:      size_t tmpsublen;",
          "1890:      if (newsublen == 0)",
          "1891:   newsublen = STRLEN(newsub);",
          "1892:      newsublen -= tildelen;",
          "1893:      postfixlen = newsublen - prefixlen;",
          "1894:      tmpsublen = prefixlen + reg_prev_sublen + postfixlen;",
          "1896:      if (tmpsublen > 0 && reg_prev_sub != NULL)",
          "1898:   char_u *tmpsub;",
          "1902:   if (tmpsublen > MAXCOL)",
          "1905:       error = TRUE;",
          "1909:   tmpsub = alloc(tmpsublen + 1);",
          "1910:   if (tmpsub == NULL)",
          "1912:       emsg(_(e_out_of_memory));",
          "1913:       error = TRUE;",
          "1914:       break;",
          "1918:   mch_memmove(tmpsub, newsub, prefixlen);",
          "1920:   mch_memmove(tmpsub + prefixlen, reg_prev_sub, reg_prev_sublen);",
          "1922:   STRCPY(tmpsub + prefixlen + reg_prev_sublen, postfix);",
          "1924:   if (newsub != source) // allocated newsub before",
          "1925:       vim_free(newsub);",
          "1926:   newsub = tmpsub;",
          "1927:   newsublen = tmpsublen;",
          "1928:   p = newsub + prefixlen + reg_prev_sublen;",
          "1931:   mch_memmove(p, postfix, postfixlen + 1); // remove the tilde (+1 for the NUL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1799:  }",
          "1800:     }",
          "1807:     return newsub;",
          "1808: }",
          "1827: #ifdef FEAT_EVAL",
          "",
          "[Removed Lines]",
          "1804:     vim_free(reg_prev_sub);",
          "1805:     reg_prev_sub = vim_strsave(newsub);",
          "1810: #ifdef FEAT_EVAL",
          "1811: static int can_f_submatch = FALSE; // TRUE when submatch() can be used",
          "1816: typedef struct {",
          "1817:     regmatch_T *sm_match;",
          "1818:     regmmatch_T *sm_mmatch;",
          "1819:     linenr_T sm_firstlnum;",
          "1820:     linenr_T sm_maxline;",
          "1821:     int  sm_line_lbr;",
          "1822: } regsubmatch_T;",
          "1824: static regsubmatch_T rsm;  // can only be used when can_f_submatch is TRUE",
          "1825: #endif",
          "",
          "[Added Lines]",
          "1944:     if (error)",
          "1945:     {",
          "1946:  if (newsub != source)",
          "1947:      vim_free(newsub);",
          "1948:  return source;",
          "1949:     }",
          "1954:     newsublen = p - newsub;",
          "1955:     if (newsublen == 0)",
          "1956:  VIM_CLEAR(reg_prev_sub);",
          "1957:     else",
          "1958:     {",
          "1959:  vim_free(reg_prev_sub);",
          "1960:  reg_prev_sub = vim_strnsave(newsub, newsublen);",
          "1961:     }",
          "1963:     if (reg_prev_sub == NULL)",
          "1964:  reg_prev_sublen = 0;",
          "1965:     else",
          "1966:  reg_prev_sublen = newsublen;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2029:  if (copy)",
          "2030:  {",
          "2033:      {",
          "2037:      }",
          "2038:  }",
          "2039:  else",
          "",
          "[Removed Lines]",
          "2031:      if (eval_result[nested] != NULL &&",
          "2032:       (int)STRLEN(eval_result[nested]) < destlen)",
          "2034:   STRCPY(dest, eval_result[nested]);",
          "2035:   dst += STRLEN(eval_result[nested]);",
          "2036:   VIM_CLEAR(eval_result[nested]);",
          "",
          "[Added Lines]",
          "2175:      if (eval_result[nested] != NULL)",
          "2177:   int eval_len = (int)STRLEN(eval_result[nested]);",
          "2179:   if (eval_len < destlen)",
          "2180:   {",
          "2181:       STRCPY(dest, eval_result[nested]);",
          "2182:       dst += eval_len;",
          "2183:       VIM_CLEAR(eval_result[nested]);",
          "2184:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2325:    len = rex.reg_mmatch->endpos[no].col",
          "2326:          - rex.reg_mmatch->startpos[no].col;",
          "2327:       else",
          "2329:   }",
          "2330:      }",
          "2331:      else",
          "",
          "[Removed Lines]",
          "2328:    len = (int)STRLEN(s);",
          "",
          "[Added Lines]",
          "2476:    len = (int)reg_getline_len(clnum) - rex.reg_mmatch->startpos[no].col;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2360:        if (rex.reg_mmatch->endpos[no].lnum == clnum)",
          "2361:     len = rex.reg_mmatch->endpos[no].col;",
          "2362:        else",
          "2364:    }",
          "2365:    else",
          "2366:        break;",
          "",
          "[Removed Lines]",
          "2363:     len = (int)STRLEN(s);",
          "",
          "[Added Lines]",
          "2511:     len = (int)reg_getline_len(clnum);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2465: }",
          "2467: #ifdef FEAT_EVAL",
          "2473:     static char_u *",
          "2474: reg_getline_submatch(linenr_T lnum)",
          "2475: {",
          "2488: }",
          "",
          "[Removed Lines]",
          "2476:     char_u *s;",
          "2477:     linenr_T save_first = rex.reg_firstlnum;",
          "2478:     linenr_T save_max = rex.reg_maxline;",
          "2480:     rex.reg_firstlnum = rsm.sm_firstlnum;",
          "2481:     rex.reg_maxline = rsm.sm_maxline;",
          "2483:     s = reg_getline(lnum);",
          "2485:     rex.reg_firstlnum = save_first;",
          "2486:     rex.reg_maxline = save_max;",
          "2487:     return s;",
          "",
          "[Added Lines]",
          "2620:     char_u *line;",
          "2622:     reg_getline_common(lnum, RGLF_LINE | RGLF_SUBMATCH, &line, NULL);",
          "2624:     return line;",
          "2625: }",
          "2627:     static colnr_T",
          "2628: reg_getline_submatch_len(linenr_T lnum)",
          "2629: {",
          "2630:     colnr_T length;",
          "2632:     reg_getline_common(lnum, RGLF_LENGTH | RGLF_SUBMATCH, NULL, &length);",
          "2634:     return length;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2533:      {",
          "2537:   if (round == 2)",
          "2538:   {",
          "2539:       STRCPY(retval, s);",
          "",
          "[Removed Lines]",
          "2536:   len = (int)STRLEN(s);",
          "",
          "[Added Lines]",
          "2683:   len = (int)reg_getline_submatch_len(lnum) - rsm.sm_mmatch->startpos[no].col;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2543:   ++lnum;",
          "2544:   while (lnum < rsm.sm_mmatch->endpos[no].lnum)",
          "2545:   {",
          "2547:       if (round == 2)",
          "2548:    STRCPY(retval + len, s);",
          "2550:       if (round == 2)",
          "2551:    retval[len] = '\\n';",
          "2552:       ++len;",
          "2553:   }",
          "2554:   if (round == 2)",
          "2555:       STRNCPY(retval + len, reg_getline_submatch(lnum),",
          "",
          "[Removed Lines]",
          "2546:       s = reg_getline_submatch(lnum++);",
          "2549:       len += (int)STRLEN(s);",
          "",
          "[Added Lines]",
          "2693:       s = reg_getline_submatch(lnum);",
          "2696:       len += (int)reg_getline_submatch_len(lnum);",
          "2700:       ++lnum;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2624:  }",
          "2625:  else",
          "2626:  {",
          "2627:      if (list_append_string(list, s, -1) == FAIL)",
          "2628:   error = TRUE;",
          "2630:      {",
          "2631:   s = reg_getline_submatch(slnum + i);",
          "2632:   if (list_append_string(list, s, -1) == FAIL)",
          "",
          "[Removed Lines]",
          "2629:      for (i = 1; i < elnum - slnum; i++)",
          "",
          "[Added Lines]",
          "2775:      int max_lnum = elnum - slnum;",
          "2779:      for (i = 1; i < max_lnum; i++)",
          "",
          "---------------"
        ],
        "src/regexp_bt.c||src/regexp_bt.c": [
          "File: src/regexp_bt.c -> src/regexp_bt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2564:  if ((flags & SPSTART || OP(scan) == BOW || OP(scan) == EOW)",
          "2565:          && !(flags & HASNL))",
          "2566:  {",
          "2567:      longest = NULL;",
          "2568:      len = 0;",
          "2569:      for (; scan != NULL; scan = regnext(scan))",
          "2571:   {",
          "2574:   }",
          "2575:      r->regmust = longest;",
          "2576:      r->regmlen = len;",
          "2577:  }",
          "",
          "[Removed Lines]",
          "2570:   if (OP(scan) == EXACTLY && STRLEN(OPERAND(scan)) >= (size_t)len)",
          "2572:       longest = OPERAND(scan);",
          "2573:       len = (int)STRLEN(OPERAND(scan));",
          "",
          "[Added Lines]",
          "2567:      size_t  scanlen;",
          "2572:      {",
          "2573:   if (OP(scan) == EXACTLY)",
          "2575:       scanlen = STRLEN(OPERAND(scan));",
          "2576:       if (scanlen >= (size_t)len)",
          "2577:       {",
          "2578:    longest = OPERAND(scan);",
          "2579:    len = (int)scanlen;",
          "2580:       }",
          "2582:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3406:   {",
          "3407:       colnr_T pos_col = pos->lnum == rex.lnum + rex.reg_firstlnum",
          "3408:          && pos->col == MAXCOL",
          "3411:           : pos->col;",
          "3413:       if ((pos->lnum == rex.lnum + rex.reg_firstlnum",
          "",
          "[Removed Lines]",
          "3409:           ? (colnr_T)STRLEN(reg_getline(",
          "3410:       pos->lnum - rex.reg_firstlnum))",
          "",
          "[Added Lines]",
          "3417:           ? reg_getline_len(pos->lnum - rex.reg_firstlnum)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4696:     if (rex.line == NULL)",
          "4697:         break;",
          "4699:     fast_breakcheck();",
          "4700:        }",
          "4701:        else",
          "",
          "[Removed Lines]",
          "4698:     rex.input = rex.line + STRLEN(rex.line);",
          "",
          "[Added Lines]",
          "4705:     rex.input = rex.line + reg_getline_len(rex.lnum);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5249: {",
          "5250:     char     *p;",
          "5251:     static char     buf[50];",
          "5253:     STRCPY(buf, \":\");",
          "5255:     switch ((int) OP(op))",
          "5256:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5259:     static size_t   buflen = 0;",
          "5262:     buflen = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5491:       case MOPEN + 7:",
          "5492:       case MOPEN + 8:",
          "5493:       case MOPEN + 9:",
          "5495:  p = NULL;",
          "5496:  break;",
          "5497:       case MCLOSE + 0:",
          "",
          "[Removed Lines]",
          "5494:  sprintf(buf + STRLEN(buf), \"MOPEN%d\", OP(op) - MOPEN);",
          "",
          "[Added Lines]",
          "5503:  buflen += sprintf(buf + buflen, \"MOPEN%d\", OP(op) - MOPEN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5506:       case MCLOSE + 7:",
          "5507:       case MCLOSE + 8:",
          "5508:       case MCLOSE + 9:",
          "5510:  p = NULL;",
          "5511:  break;",
          "5512:       case BACKREF + 1:",
          "",
          "[Removed Lines]",
          "5509:  sprintf(buf + STRLEN(buf), \"MCLOSE%d\", OP(op) - MCLOSE);",
          "",
          "[Added Lines]",
          "5518:  buflen += sprintf(buf + buflen, \"MCLOSE%d\", OP(op) - MCLOSE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5518:       case BACKREF + 7:",
          "5519:       case BACKREF + 8:",
          "5520:       case BACKREF + 9:",
          "5522:  p = NULL;",
          "5523:  break;",
          "5524:       case NOPEN:",
          "",
          "[Removed Lines]",
          "5521:  sprintf(buf + STRLEN(buf), \"BACKREF%d\", OP(op) - BACKREF);",
          "",
          "[Added Lines]",
          "5530:  buflen += sprintf(buf + buflen, \"BACKREF%d\", OP(op) - BACKREF);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5537:       case ZOPEN + 7:",
          "5538:       case ZOPEN + 8:",
          "5539:       case ZOPEN + 9:",
          "5541:  p = NULL;",
          "5542:  break;",
          "5543:       case ZCLOSE + 1:",
          "",
          "[Removed Lines]",
          "5540:  sprintf(buf + STRLEN(buf), \"ZOPEN%d\", OP(op) - ZOPEN);",
          "",
          "[Added Lines]",
          "5549:  buflen += sprintf(buf + buflen, \"ZOPEN%d\", OP(op) - ZOPEN);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5549:       case ZCLOSE + 7:",
          "5550:       case ZCLOSE + 8:",
          "5551:       case ZCLOSE + 9:",
          "5553:  p = NULL;",
          "5554:  break;",
          "5555:       case ZREF + 1:",
          "",
          "[Removed Lines]",
          "5552:  sprintf(buf + STRLEN(buf), \"ZCLOSE%d\", OP(op) - ZCLOSE);",
          "",
          "[Added Lines]",
          "5561:  buflen += sprintf(buf + buflen, \"ZCLOSE%d\", OP(op) - ZCLOSE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5561:       case ZREF + 7:",
          "5562:       case ZREF + 8:",
          "5563:       case ZREF + 9:",
          "5565:  p = NULL;",
          "5566:  break;",
          "5567: #endif",
          "",
          "[Removed Lines]",
          "5564:  sprintf(buf + STRLEN(buf), \"ZREF%d\", OP(op) - ZREF);",
          "",
          "[Added Lines]",
          "5573:  bulen += sprintf(buf + buflen, \"ZREF%d\", OP(op) - ZREF);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5602:       case BRACE_COMPLEX + 7:",
          "5603:       case BRACE_COMPLEX + 8:",
          "5604:       case BRACE_COMPLEX + 9:",
          "5606:  p = NULL;",
          "5607:  break;",
          "5608:       case MULTIBYTECODE:",
          "",
          "[Removed Lines]",
          "5605:  sprintf(buf + STRLEN(buf), \"BRACE_COMPLEX%d\", OP(op) - BRACE_COMPLEX);",
          "",
          "[Added Lines]",
          "5614:  buflen += sprintf(buf + buflen, \"BRACE_COMPLEX%d\", OP(op) - BRACE_COMPLEX);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5612:  p = \"NEWL\";",
          "5613:  break;",
          "5614:       default:",
          "5616:  p = NULL;",
          "5617:  break;",
          "5618:     }",
          "5619:     if (p != NULL)",
          "5621:     return (char_u *)buf;",
          "5622: }",
          "5623: #endif     // DEBUG",
          "",
          "[Removed Lines]",
          "5615:  sprintf(buf + STRLEN(buf), \"corrupt %d\", OP(op));",
          "5620:  STRCAT(buf, p);",
          "",
          "[Added Lines]",
          "5624:  buflen += sprintf(buf + buflen, \"corrupt %d\", OP(op));",
          "5629:  STRCPY(buf + buflen, p);",
          "",
          "---------------"
        ],
        "src/regexp_nfa.c||src/regexp_nfa.c": [
          "File: src/regexp_nfa.c -> src/regexp_nfa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5387:       rex.input = rex.line;",
          "5388:   }",
          "5389:   else",
          "5391:      }",
          "5392:      if ((int)(rex.input - rex.line) >= state->val)",
          "5393:      {",
          "",
          "[Removed Lines]",
          "5390:       rex.input = rex.line + STRLEN(rex.line);",
          "",
          "[Added Lines]",
          "5390:       rex.input = rex.line + reg_getline_len(rex.lnum);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6937:   {",
          "6938:       colnr_T pos_col = pos->lnum == rex.lnum + rex.reg_firstlnum",
          "6939:          && pos->col == MAXCOL",
          "6942:           : pos->col;",
          "6944:       result = (pos->lnum == rex.lnum + rex.reg_firstlnum",
          "",
          "[Removed Lines]",
          "6940:           ? (colnr_T)STRLEN(reg_getline(",
          "6941:       pos->lnum - rex.reg_firstlnum))",
          "",
          "[Added Lines]",
          "6940:           ? reg_getline_len(pos->lnum - rex.reg_firstlnum)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     408,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     409,",
          "",
          "---------------"
        ]
      }
    }
  ]
}