{
  "cve_id": "CVE-2023-32233",
  "cve_desc": "In the Linux kernel through 6.3.1, a use-after-free in Netfilter nf_tables when processing batch requests can be abused to perform arbitrary read and write operations on kernel memory. Unprivileged local users can obtain root privileges. This occurs because anonymous sets are mishandled.",
  "repo": "torvalds/linux",
  "patch_hash": "c1592a89942e9678f7d9c8030efa777c0d57edab",
  "patch_info": {
    "commit_hash": "c1592a89942e9678f7d9c8030efa777c0d57edab",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c1592a89942e9678f7d9c8030efa777c0d57edab",
    "files": [
      "include/net/netfilter/nf_tables.h",
      "net/netfilter/nf_tables_api.c",
      "net/netfilter/nft_dynset.c",
      "net/netfilter/nft_lookup.c",
      "net/netfilter/nft_objref.c"
    ],
    "message": "netfilter: nf_tables: deactivate anonymous set from preparation phase\n\nToggle deleted anonymous sets as inactive in the next generation, so\nusers cannot perform any update on it. Clear the generation bitmask\nin case the transaction is aborted.\n\nThe following KASAN splat shows a set element deletion for a bound\nanonymous set that has been already removed in the same transaction.\n\n[   64.921510] ==================================================================\n[   64.923123] BUG: KASAN: wild-memory-access in nf_tables_commit+0xa24/0x1490 [nf_tables]\n[   64.924745] Write of size 8 at addr dead000000000122 by task test/890\n[   64.927903] CPU: 3 PID: 890 Comm: test Not tainted 6.3.0+ #253\n[   64.931120] Call Trace:\n[   64.932699]  <TASK>\n[   64.934292]  dump_stack_lvl+0x33/0x50\n[   64.935908]  ? nf_tables_commit+0xa24/0x1490 [nf_tables]\n[   64.937551]  kasan_report+0xda/0x120\n[   64.939186]  ? nf_tables_commit+0xa24/0x1490 [nf_tables]\n[   64.940814]  nf_tables_commit+0xa24/0x1490 [nf_tables]\n[   64.942452]  ? __kasan_slab_alloc+0x2d/0x60\n[   64.944070]  ? nf_tables_setelem_notify+0x190/0x190 [nf_tables]\n[   64.945710]  ? kasan_set_track+0x21/0x30\n[   64.947323]  nfnetlink_rcv_batch+0x709/0xd90 [nfnetlink]\n[   64.948898]  ? nfnetlink_rcv_msg+0x480/0x480 [nfnetlink]\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
    "before_after_code_files": [
      "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
      "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
      "net/netfilter/nft_dynset.c||net/netfilter/nft_dynset.c",
      "net/netfilter/nft_lookup.c||net/netfilter/nft_lookup.c",
      "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c"
    ]
  },
  "patch_diff": {
    "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h": [
      "File: include/net/netfilter/nf_tables.h -> include/net/netfilter/nf_tables.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "619: };",
      "621: enum nft_trans_phase;",
      "622: void nf_tables_deactivate_set(const struct nft_ctx *ctx, struct nft_set *set,",
      "623:          struct nft_set_binding *binding,",
      "624:          enum nft_trans_phase phase);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "622: void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set);",
      "",
      "---------------"
    ],
    "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c": [
      "File: net/netfilter/nf_tables_api.c -> net/netfilter/nf_tables_api.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5127:  }",
      "5128: }",
      "5130: void nf_tables_deactivate_set(const struct nft_ctx *ctx, struct nft_set *set,",
      "5131:          struct nft_set_binding *binding,",
      "5132:          enum nft_trans_phase phase)",
      "5133: {",
      "5134:  switch (phase) {",
      "5135:  case NFT_TRANS_PREPARE:",
      "5136:   set->use--;",
      "5137:   return;",
      "5138:  case NFT_TRANS_ABORT:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5130: void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set)",
      "5131: {",
      "5132:  if (nft_set_is_anonymous(set))",
      "5133:   nft_clear(ctx->net, set);",
      "5135:  set->use++;",
      "5136: }",
      "5137: EXPORT_SYMBOL_GPL(nf_tables_activate_set);",
      "5145:   if (nft_set_is_anonymous(set))",
      "5146:    nft_deactivate_next(ctx->net, set);",
      "",
      "---------------"
    ],
    "net/netfilter/nft_dynset.c||net/netfilter/nft_dynset.c": [
      "File: net/netfilter/nft_dynset.c -> net/netfilter/nft_dynset.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "342: {",
      "343:  struct nft_dynset *priv = nft_expr_priv(expr);",
      "346: }",
      "348: static void nft_dynset_destroy(const struct nft_ctx *ctx,",
      "",
      "[Removed Lines]",
      "345:  priv->set->use++;",
      "",
      "[Added Lines]",
      "345:  nf_tables_activate_set(ctx, priv->set);",
      "",
      "---------------"
    ],
    "net/netfilter/nft_lookup.c||net/netfilter/nft_lookup.c": [
      "File: net/netfilter/nft_lookup.c -> net/netfilter/nft_lookup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "167: {",
      "168:  struct nft_lookup *priv = nft_expr_priv(expr);",
      "171: }",
      "173: static void nft_lookup_destroy(const struct nft_ctx *ctx,",
      "",
      "[Removed Lines]",
      "170:  priv->set->use++;",
      "",
      "[Added Lines]",
      "170:  nf_tables_activate_set(ctx, priv->set);",
      "",
      "---------------"
    ],
    "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c": [
      "File: net/netfilter/nft_objref.c -> net/netfilter/nft_objref.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "185: {",
      "186:  struct nft_objref_map *priv = nft_expr_priv(expr);",
      "189: }",
      "191: static void nft_objref_map_destroy(const struct nft_ctx *ctx,",
      "",
      "[Removed Lines]",
      "188:  priv->set->use++;",
      "",
      "[Added Lines]",
      "188:  nf_tables_activate_set(ctx, priv->set);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "628bd3e49cba1c066228e23d71a852c23e26da73",
      "candidate_info": {
        "commit_hash": "628bd3e49cba1c066228e23d71a852c23e26da73",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/628bd3e49cba1c066228e23d71a852c23e26da73",
        "files": [
          "include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_set_bitmap.c",
          "net/netfilter/nft_set_hash.c",
          "net/netfilter/nft_set_pipapo.c",
          "net/netfilter/nft_set_rbtree.c"
        ],
        "message": "netfilter: nf_tables: drop map element references from preparation phase\n\nset .destroy callback releases the references to other objects in maps.\nThis is very late and it results in spurious EBUSY errors. Drop refcount\nfrom the preparation phase instead, update set backend not to drop\nreference counter from set .destroy path.\n\nExceptions: NFT_TRANS_PREPARE_ERROR does not require to drop the\nreference counter because the transaction abort path releases the map\nreferences for each element since the set is unbound. The abort path\nalso deals with releasing reference counter for new elements added to\nunbound sets.\n\nFixes: 591054469b3e (\"netfilter: nf_tables: revisit chain/object refcounting from elements\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_set_bitmap.c||net/netfilter/nft_set_bitmap.c",
          "net/netfilter/nft_set_hash.c||net/netfilter/nft_set_hash.c",
          "net/netfilter/nft_set_pipapo.c||net/netfilter/nft_set_pipapo.c",
          "net/netfilter/nft_set_rbtree.c||net/netfilter/nft_set_rbtree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c"
          ],
          "candidate": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h": [
          "File: include/net/netfilter/nf_tables.h -> include/net/netfilter/nf_tables.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "472:  int    (*init)(const struct nft_set *set,",
          "473:       const struct nft_set_desc *desc,",
          "474:       const struct nlattr * const nla[]);",
          "476:  void    (*gc_init)(const struct nft_set *set);",
          "478:  unsigned int   elemsize;",
          "",
          "[Removed Lines]",
          "475:  void    (*destroy)(const struct nft_set *set);",
          "",
          "[Added Lines]",
          "475:  void    (*destroy)(const struct nft_ctx *ctx,",
          "476:          const struct nft_set *set);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:        struct nft_expr *expr_array[]);",
          "810: void nft_set_elem_destroy(const struct nft_set *set, void *elem,",
          "811:      bool destroy_expr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813: void nf_tables_set_elem_destroy(const struct nft_ctx *ctx,",
          "814:     const struct nft_set *set, void *elem);",
          "",
          "---------------"
        ],
        "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c": [
          "File: net/netfilter/nf_tables_api.c -> net/netfilter/nf_tables_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:  return __nft_trans_set_add(ctx, msg_type, set, NULL);",
          "560: }",
          "562: static int nft_delset(const struct nft_ctx *ctx, struct nft_set *set)",
          "563: {",
          "564:  int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562: static void nft_setelem_data_deactivate(const struct net *net,",
          "563:      const struct nft_set *set,",
          "564:      struct nft_set_elem *elem);",
          "566: static int nft_mapelem_deactivate(const struct nft_ctx *ctx,",
          "567:       struct nft_set *set,",
          "568:       const struct nft_set_iter *iter,",
          "569:       struct nft_set_elem *elem)",
          "570: {",
          "571:  nft_setelem_data_deactivate(ctx->net, set, elem);",
          "573:  return 0;",
          "574: }",
          "576: struct nft_set_elem_catchall {",
          "577:  struct list_head list;",
          "578:  struct rcu_head  rcu;",
          "579:  void   *elem;",
          "580: };",
          "582: static void nft_map_catchall_deactivate(const struct nft_ctx *ctx,",
          "583:      struct nft_set *set)",
          "584: {",
          "585:  u8 genmask = nft_genmask_next(ctx->net);",
          "586:  struct nft_set_elem_catchall *catchall;",
          "587:  struct nft_set_elem elem;",
          "588:  struct nft_set_ext *ext;",
          "590:  list_for_each_entry(catchall, &set->catchall_list, list) {",
          "591:   ext = nft_set_elem_ext(set, catchall->elem);",
          "592:   if (!nft_set_elem_active(ext, genmask))",
          "593:    continue;",
          "595:   elem.priv = catchall->elem;",
          "596:   nft_setelem_data_deactivate(ctx->net, set, &elem);",
          "597:   break;",
          "598:  }",
          "599: }",
          "601: static void nft_map_deactivate(const struct nft_ctx *ctx, struct nft_set *set)",
          "602: {",
          "603:  struct nft_set_iter iter = {",
          "604:   .genmask = nft_genmask_next(ctx->net),",
          "605:   .fn  = nft_mapelem_deactivate,",
          "606:  };",
          "608:  set->ops->walk(ctx, set, &iter);",
          "609:  WARN_ON_ONCE(iter.err);",
          "611:  nft_map_catchall_deactivate(ctx, set);",
          "612: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:  if (err < 0)",
          "568:   return err;",
          "570:  nft_deactivate_next(ctx->net, set);",
          "571:  ctx->table->use--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "622:  if (set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "623:   nft_map_deactivate(ctx, set);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3659:  return 0;",
          "3660: }",
          "3668: int nft_set_catchall_validate(const struct nft_ctx *ctx, struct nft_set *set)",
          "3669: {",
          "3670:  u8 genmask = nft_genmask_next(ctx->net);",
          "",
          "[Removed Lines]",
          "3662: struct nft_set_elem_catchall {",
          "3663:  struct list_head list;",
          "3664:  struct rcu_head  rcu;",
          "3665:  void   *elem;",
          "3666: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4997:  for (i = 0; i < set->num_exprs; i++)",
          "4998:   nft_expr_destroy(&ctx, set->exprs[i]);",
          "4999: err_set_destroy:",
          "5001: err_set_init:",
          "5002:  kfree(set->name);",
          "5003: err_set_name:",
          "",
          "[Removed Lines]",
          "5000:  ops->destroy(set);",
          "",
          "[Added Lines]",
          "5049:  ops->destroy(&ctx, set);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5013:  list_for_each_entry_safe(catchall, next, &set->catchall_list, list) {",
          "5014:   list_del_rcu(&catchall->list);",
          "5016:   kfree_rcu(catchall, rcu);",
          "5017:  }",
          "5018: }",
          "",
          "[Removed Lines]",
          "5015:   nft_set_elem_destroy(set, catchall->elem, true);",
          "",
          "[Added Lines]",
          "5064:   nf_tables_set_elem_destroy(ctx, set, catchall->elem);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5027:  for (i = 0; i < set->num_exprs; i++)",
          "5028:   nft_expr_destroy(ctx, set->exprs[i]);",
          "5031:  nft_set_catchall_destroy(ctx, set);",
          "5032:  kfree(set->name);",
          "5033:  kvfree(set);",
          "",
          "[Removed Lines]",
          "5030:  set->ops->destroy(set);",
          "",
          "[Added Lines]",
          "5079:  set->ops->destroy(ctx, set);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5192:  }",
          "5193: }",
          "5195: void nf_tables_activate_set(const struct nft_ctx *ctx, struct nft_set *set)",
          "5196: {",
          "5198:   nft_clear(ctx->net, set);",
          "5200:  set->use++;",
          "5201: }",
          "",
          "[Removed Lines]",
          "5197:  if (nft_set_is_anonymous(set))",
          "",
          "[Added Lines]",
          "5244: static void nft_setelem_data_activate(const struct net *net,",
          "5245:           const struct nft_set *set,",
          "5246:           struct nft_set_elem *elem);",
          "5248: static int nft_mapelem_activate(const struct nft_ctx *ctx,",
          "5249:     struct nft_set *set,",
          "5250:     const struct nft_set_iter *iter,",
          "5251:     struct nft_set_elem *elem)",
          "5252: {",
          "5253:  nft_setelem_data_activate(ctx->net, set, elem);",
          "5255:  return 0;",
          "5256: }",
          "5258: static void nft_map_catchall_activate(const struct nft_ctx *ctx,",
          "5259:           struct nft_set *set)",
          "5260: {",
          "5261:  u8 genmask = nft_genmask_next(ctx->net);",
          "5262:  struct nft_set_elem_catchall *catchall;",
          "5263:  struct nft_set_elem elem;",
          "5264:  struct nft_set_ext *ext;",
          "5266:  list_for_each_entry(catchall, &set->catchall_list, list) {",
          "5267:   ext = nft_set_elem_ext(set, catchall->elem);",
          "5268:   if (!nft_set_elem_active(ext, genmask))",
          "5269:    continue;",
          "5271:   elem.priv = catchall->elem;",
          "5272:   nft_setelem_data_activate(ctx->net, set, &elem);",
          "5273:   break;",
          "5274:  }",
          "5275: }",
          "5277: static void nft_map_activate(const struct nft_ctx *ctx, struct nft_set *set)",
          "5278: {",
          "5279:  struct nft_set_iter iter = {",
          "5280:   .genmask = nft_genmask_next(ctx->net),",
          "5281:   .fn  = nft_mapelem_activate,",
          "5282:  };",
          "5284:  set->ops->walk(ctx, set, &iter);",
          "5285:  WARN_ON_ONCE(iter.err);",
          "5287:  nft_map_catchall_activate(ctx, set);",
          "5288: }",
          "5292:  if (nft_set_is_anonymous(set)) {",
          "5293:   if (set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "5294:    nft_map_activate(ctx, set);",
          "5297:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5214:   set->use--;",
          "5215:   break;",
          "5216:  case NFT_TRANS_PREPARE:",
          "5220:   set->use--;",
          "5221:   return;",
          "5222:  case NFT_TRANS_ABORT:",
          "5223:  case NFT_TRANS_RELEASE:",
          "5224:   set->use--;",
          "5225:   fallthrough;",
          "5226:  default:",
          "",
          "[Removed Lines]",
          "5217:   if (nft_set_is_anonymous(set))",
          "5218:    nft_deactivate_next(ctx->net, set);",
          "",
          "[Added Lines]",
          "5316:   if (nft_set_is_anonymous(set)) {",
          "5317:    if (set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "5318:     nft_map_deactivate(ctx, set);",
          "5320:    nft_deactivate_next(ctx->net, set);",
          "5321:   }",
          "5326:   if (nft_set_is_anonymous(set) &&",
          "5327:       set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "5328:    nft_map_deactivate(ctx, set);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5994: }",
          "5995: EXPORT_SYMBOL_GPL(nft_set_elem_destroy);",
          "6002: {",
          "6003:  struct nft_set_ext *ext = nft_set_elem_ext(set, elem);",
          "",
          "[Removed Lines]",
          "6000: static void nf_tables_set_elem_destroy(const struct nft_ctx *ctx,",
          "6001:            const struct nft_set *set, void *elem)",
          "",
          "[Added Lines]",
          "6107: void nf_tables_set_elem_destroy(const struct nft_ctx *ctx,",
          "6108:     const struct nft_set *set, void *elem)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6631:  if (obj)",
          "6632:   obj->use--;",
          "6633: err_elem_userdata:",
          "6635: err_parse_data:",
          "6636:  if (nla[NFTA_SET_ELEM_DATA] != NULL)",
          "6637:   nft_data_release(&elem.data.val, desc.type);",
          "",
          "[Removed Lines]",
          "6634:  nf_tables_set_elem_destroy(ctx, set, elem.priv);",
          "",
          "[Added Lines]",
          "6741:  nft_set_elem_destroy(set, elem.priv, true);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9799:   case NFT_MSG_DESTROYSET:",
          "9800:    trans->ctx.table->use++;",
          "9801:    nft_clear(trans->ctx.net, nft_trans_set(trans));",
          "9802:    nft_trans_destroy(trans);",
          "9803:    break;",
          "9804:   case NFT_MSG_NEWSETELEM:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9909:    if (nft_trans_set(trans)->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "9910:     nft_map_activate(&trans->ctx, nft_trans_set(trans));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10568:  list_for_each_entry_safe(set, ns, &table->sets, list) {",
          "10569:   list_del(&set->list);",
          "10570:   table->use--;",
          "10571:   nft_set_destroy(&ctx, set);",
          "10572:  }",
          "10573:  list_for_each_entry_safe(obj, ne, &table->objects, list) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10681:   if (set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "10682:    nft_map_deactivate(&ctx, set);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_set_bitmap.c||net/netfilter/nft_set_bitmap.c": [
          "File: net/netfilter/nft_set_bitmap.c -> net/netfilter/nft_set_bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:  return 0;",
          "272: }",
          "275: {",
          "276:  struct nft_bitmap *priv = nft_set_priv(set);",
          "277:  struct nft_bitmap_elem *be, *n;",
          "279:  list_for_each_entry_safe(be, n, &priv->list, head)",
          "281: }",
          "283: static bool nft_bitmap_estimate(const struct nft_set_desc *desc, u32 features,",
          "",
          "[Removed Lines]",
          "274: static void nft_bitmap_destroy(const struct nft_set *set)",
          "280:   nft_set_elem_destroy(set, be, true);",
          "",
          "[Added Lines]",
          "274: static void nft_bitmap_destroy(const struct nft_ctx *ctx,",
          "275:           const struct nft_set *set)",
          "281:   nf_tables_set_elem_destroy(ctx, set, be);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_set_hash.c||net/netfilter/nft_set_hash.c": [
          "File: net/netfilter/nft_set_hash.c -> net/netfilter/nft_set_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  return 0;",
          "401: }",
          "403: static void nft_rhash_elem_destroy(void *ptr, void *arg)",
          "404: {",
          "406: }",
          "409: {",
          "410:  struct nft_rhash *priv = nft_set_priv(set);",
          "412:  cancel_delayed_work_sync(&priv->gc_work);",
          "413:  rcu_barrier();",
          "414:  rhashtable_free_and_destroy(&priv->ht, nft_rhash_elem_destroy,",
          "416: }",
          "",
          "[Removed Lines]",
          "405:  nft_set_elem_destroy(arg, ptr, true);",
          "408: static void nft_rhash_destroy(const struct nft_set *set)",
          "415:         (void *)set);",
          "",
          "[Added Lines]",
          "403: struct nft_rhash_ctx {",
          "404:  const struct nft_ctx ctx;",
          "405:  const struct nft_set *set;",
          "406: };",
          "410:  struct nft_rhash_ctx *rhash_ctx = arg;",
          "412:  nf_tables_set_elem_destroy(&rhash_ctx->ctx, rhash_ctx->set, ptr);",
          "415: static void nft_rhash_destroy(const struct nft_ctx *ctx,",
          "416:          const struct nft_set *set)",
          "419:  struct nft_rhash_ctx rhash_ctx = {",
          "420:   .ctx = *ctx,",
          "421:   .set = set,",
          "422:  };",
          "427:         (void *)&rhash_ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "643:  return 0;",
          "644: }",
          "647: {",
          "648:  struct nft_hash *priv = nft_set_priv(set);",
          "649:  struct nft_hash_elem *he;",
          "",
          "[Removed Lines]",
          "646: static void nft_hash_destroy(const struct nft_set *set)",
          "",
          "[Added Lines]",
          "658: static void nft_hash_destroy(const struct nft_ctx *ctx,",
          "659:         const struct nft_set *set)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "653:  for (i = 0; i < priv->buckets; i++) {",
          "654:   hlist_for_each_entry_safe(he, next, &priv->table[i], node) {",
          "655:    hlist_del_rcu(&he->node);",
          "657:   }",
          "658:  }",
          "659: }",
          "",
          "[Removed Lines]",
          "656:    nft_set_elem_destroy(set, he, true);",
          "",
          "[Added Lines]",
          "669:    nf_tables_set_elem_destroy(ctx, set, he);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_set_pipapo.c||net/netfilter/nft_set_pipapo.c": [
          "File: net/netfilter/nft_set_pipapo.c -> net/netfilter/nft_set_pipapo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2155:       struct nft_pipapo_match *m)",
          "2156: {",
          "2157:  struct nft_pipapo_field *f;",
          "",
          "[Removed Lines]",
          "2154: static void nft_set_pipapo_match_destroy(const struct nft_set *set,",
          "",
          "[Added Lines]",
          "2155: static void nft_set_pipapo_match_destroy(const struct nft_ctx *ctx,",
          "2156:       const struct nft_set *set,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2169:   e = f->mt[r].e;",
          "2172:  }",
          "2173: }",
          "2180: {",
          "2181:  struct nft_pipapo *priv = nft_set_priv(set);",
          "2182:  struct nft_pipapo_match *m;",
          "",
          "[Removed Lines]",
          "2171:   nft_set_elem_destroy(set, e, true);",
          "2179: static void nft_pipapo_destroy(const struct nft_set *set)",
          "",
          "[Added Lines]",
          "2173:   nf_tables_set_elem_destroy(ctx, set, e);",
          "2182: static void nft_pipapo_destroy(const struct nft_ctx *ctx,",
          "2183:           const struct nft_set *set)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2186:  if (m) {",
          "2187:   rcu_barrier();",
          "2191: #ifdef NFT_PIPAPO_ALIGN",
          "2192:   free_percpu(m->scratch_aligned);",
          "",
          "[Removed Lines]",
          "2189:   nft_set_pipapo_match_destroy(set, m);",
          "",
          "[Added Lines]",
          "2193:   nft_set_pipapo_match_destroy(ctx, set, m);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2203:   m = priv->clone;",
          "2205:   if (priv->dirty)",
          "2208: #ifdef NFT_PIPAPO_ALIGN",
          "2209:   free_percpu(priv->clone->scratch_aligned);",
          "",
          "[Removed Lines]",
          "2206:    nft_set_pipapo_match_destroy(set, m);",
          "",
          "[Added Lines]",
          "2210:    nft_set_pipapo_match_destroy(ctx, set, m);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_set_rbtree.c||net/netfilter/nft_set_rbtree.c": [
          "File: net/netfilter/nft_set_rbtree.c -> net/netfilter/nft_set_rbtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:  return 0;",
          "665: }",
          "668: {",
          "669:  struct nft_rbtree *priv = nft_set_priv(set);",
          "670:  struct nft_rbtree_elem *rbe;",
          "",
          "[Removed Lines]",
          "667: static void nft_rbtree_destroy(const struct nft_set *set)",
          "",
          "[Added Lines]",
          "667: static void nft_rbtree_destroy(const struct nft_ctx *ctx,",
          "668:           const struct nft_set *set)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "675:  while ((node = priv->root.rb_node) != NULL) {",
          "676:   rb_erase(node, &priv->root);",
          "677:   rbe = rb_entry(node, struct nft_rbtree_elem, node);",
          "679:  }",
          "680: }",
          "",
          "[Removed Lines]",
          "678:   nft_set_elem_destroy(set, rbe, true);",
          "",
          "[Added Lines]",
          "679:   nf_tables_set_elem_destroy(ctx, set, rbe);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1689f25924ada8fe14a4a82c38925d04994c7142",
      "candidate_info": {
        "commit_hash": "1689f25924ada8fe14a4a82c38925d04994c7142",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1689f25924ada8fe14a4a82c38925d04994c7142",
        "files": [
          "include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_flow_offload.c",
          "net/netfilter/nft_immediate.c",
          "net/netfilter/nft_objref.c"
        ],
        "message": "netfilter: nf_tables: report use refcount overflow\n\nOverflow use refcount checks are not complete.\n\nAdd helper function to deal with object reference counter tracking.\nReport -EMFILE in case UINT_MAX is reached.\n\nnft_use_dec() splats in case that reference counter underflows,\nwhich should not ever happen.\n\nAdd nft_use_inc_restore() and nft_use_dec_restore() which are used\nto restore reference counter from error and abort paths.\n\nUse u32 in nft_flowtable and nft_object since helper functions cannot\nwork on bitfields.\n\nRemove the few early incomplete checks now that the helper functions\nare in place and used to check for refcount overflow.\n\nFixes: 96518518cc41 (\"netfilter: add nftables\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_flow_offload.c||net/netfilter/nft_flow_offload.c",
          "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c",
          "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
            "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c"
          ],
          "candidate": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
            "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h": [
          "File: include/net/netfilter/nf_tables.h -> include/net/netfilter/nf_tables.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212: unsigned int nft_do_chain(struct nft_pktinfo *pkt, void *priv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: static inline bool nft_use_inc(u32 *use)",
          "1215: {",
          "1216:  if (*use == UINT_MAX)",
          "1217:   return false;",
          "1219:  (*use)++;",
          "1221:  return true;",
          "1222: }",
          "1224: static inline void nft_use_dec(u32 *use)",
          "1225: {",
          "1226:  WARN_ON_ONCE((*use)-- == 0);",
          "1227: }",
          "1230: static inline void nft_use_inc_restore(u32 *use)",
          "1231: {",
          "1232:  WARN_ON_ONCE(!nft_use_inc(use));",
          "1233: }",
          "1235: #define nft_use_dec_restore nft_use_dec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:  struct list_head  list;",
          "1297:  struct rhlist_head  rhlhead;",
          "1298:  struct nft_object_hash_key key;",
          "1301:  u64    handle;",
          "1302:  u16    udlen;",
          "1303:  u8    *udata;",
          "",
          "[Removed Lines]",
          "1299:  u32    genmask:2,",
          "1300:      use:30;",
          "",
          "[Added Lines]",
          "1322:  u32    genmask:2;",
          "1323:  u32    use;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1399:  char    *name;",
          "1400:  int    hooknum;",
          "1401:  int    ops_len;",
          "1404:  u64    handle;",
          "1406:  struct list_head  hook_list ____cacheline_aligned;",
          "",
          "[Removed Lines]",
          "1402:  u32    genmask:2,",
          "1403:      use:30;",
          "",
          "[Added Lines]",
          "1425:  u32    genmask:2;",
          "1426:  u32    use;",
          "",
          "---------------"
        ],
        "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c": [
          "File: net/netfilter/nf_tables_api.c -> net/netfilter/nf_tables_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:  if (chain->bound)",
          "254:   return -EBUSY;",
          "256:  chain->bound = true;",
          "258:  nft_chain_trans_bind(ctx, chain);",
          "260:  return 0;",
          "",
          "[Removed Lines]",
          "257:  chain->use++;",
          "",
          "[Added Lines]",
          "256:  if (!nft_use_inc(&chain->use))",
          "257:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:  if (IS_ERR(trans))",
          "438:   return PTR_ERR(trans);",
          "441:  nft_deactivate_next(ctx->net, ctx->chain);",
          "443:  return 0;",
          "",
          "[Removed Lines]",
          "440:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "442:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "477:  if (nft_is_active_next(ctx->net, rule)) {",
          "478:   nft_deactivate_next(ctx->net, rule);",
          "480:   return 0;",
          "481:  }",
          "482:  return -ENOENT;",
          "",
          "[Removed Lines]",
          "479:   ctx->chain->use--;",
          "",
          "[Added Lines]",
          "481:   nft_use_dec(&ctx->chain->use);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "644:   nft_map_deactivate(ctx, set);",
          "646:  nft_deactivate_next(ctx->net, set);",
          "649:  return err;",
          "650: }",
          "",
          "[Removed Lines]",
          "647:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "649:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "676:   return err;",
          "678:  nft_deactivate_next(ctx->net, obj);",
          "681:  return err;",
          "682: }",
          "",
          "[Removed Lines]",
          "679:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "681:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "711:   return err;",
          "713:  nft_deactivate_next(ctx->net, flowtable);",
          "716:  return err;",
          "717: }",
          "",
          "[Removed Lines]",
          "714:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "716:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2396:  struct nft_chain *chain;",
          "2397:  int err;",
          "2402:  if (nla[NFTA_CHAIN_HOOK]) {",
          "2403:   struct nft_stats __percpu *stats = NULL;",
          "2404:   struct nft_chain_hook hook = {};",
          "",
          "[Removed Lines]",
          "2399:  if (table->use == UINT_MAX)",
          "2400:   return -EOVERFLOW;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2494:  if (err < 0)",
          "2495:   goto err_destroy_chain;",
          "2497:  trans = nft_trans_chain_add(ctx, NFT_MSG_NEWCHAIN);",
          "2498:  if (IS_ERR(trans)) {",
          "2499:   err = PTR_ERR(trans);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2496:  if (!nft_use_inc(&table->use)) {",
          "2497:   err = -EMFILE;",
          "2498:   goto err_use;",
          "2499:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2510:   goto err_unregister_hook;",
          "2511:  }",
          "2515:  return 0;",
          "2516: err_unregister_hook:",
          "2517:  nf_tables_unregister_hook(net, table, chain);",
          "2518: err_destroy_chain:",
          "2519:  nf_tables_chain_destroy(ctx);",
          "",
          "[Removed Lines]",
          "2513:  table->use++;",
          "",
          "[Added Lines]",
          "2520:  nft_use_dec_restore(&table->use);",
          "2521: err_use:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3840:    return -EINVAL;",
          "3841:   handle = nf_tables_alloc_handle(table);",
          "3846:   if (nla[NFTA_RULE_POSITION]) {",
          "3847:    pos_handle = be64_to_cpu(nla_get_be64(nla[NFTA_RULE_POSITION]));",
          "3848:    old_rule = __nft_rule_lookup(chain, pos_handle);",
          "",
          "[Removed Lines]",
          "3843:   if (chain->use == UINT_MAX)",
          "3844:    return -EOVERFLOW;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3936:   }",
          "3937:  }",
          "3939:  if (info->nlh->nlmsg_flags & NLM_F_REPLACE) {",
          "3940:   err = nft_delrule(&ctx, old_rule);",
          "3941:   if (err < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3941:  if (!nft_use_inc(&chain->use)) {",
          "3942:   err = -EMFILE;",
          "3943:   goto err_release_rule;",
          "3944:  }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3967:   }",
          "3968:  }",
          "3969:  kvfree(expr_info);",
          "3972:  if (flow)",
          "3973:   nft_trans_flow_rule(trans) = flow;",
          "",
          "[Removed Lines]",
          "3970:  chain->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3978:  return 0;",
          "3980: err_destroy_flow_rule:",
          "3981:  if (flow)",
          "3982:   nft_flow_rule_destroy(flow);",
          "3983: err_release_rule:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3987:  nft_use_dec_restore(&chain->use);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5014:  alloc_size = sizeof(*set) + size + udlen;",
          "5015:  if (alloc_size < size || alloc_size > INT_MAX)",
          "5016:   return -ENOMEM;",
          "5017:  set = kvzalloc(alloc_size, GFP_KERNEL_ACCOUNT);",
          "5021:  name = nla_strdup(nla[NFTA_SET_NAME], GFP_KERNEL_ACCOUNT);",
          "5022:  if (!name) {",
          "",
          "[Removed Lines]",
          "5018:  if (!set)",
          "5019:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "5025:  if (!nft_use_inc(&table->use))",
          "5026:   return -EMFILE;",
          "5029:  if (!set) {",
          "5030:   err = -ENOMEM;",
          "5031:   goto err_alloc;",
          "5032:  }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5074:   goto err_set_expr_alloc;",
          "5076:  list_add_tail_rcu(&set->list, &table->sets);",
          "5078:  return 0;",
          "5080: err_set_expr_alloc:",
          "",
          "[Removed Lines]",
          "5077:  table->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5086:  kfree(set->name);",
          "5087: err_set_name:",
          "5088:  kvfree(set);",
          "5089:  return err;",
          "5090: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5102: err_alloc:",
          "5103:  nft_use_dec_restore(&table->use);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5224:  struct nft_set_binding *i;",
          "5225:  struct nft_set_iter iter;",
          "5230:  if (!list_empty(&set->bindings) && nft_set_is_anonymous(set))",
          "5231:   return -EBUSY;",
          "",
          "[Removed Lines]",
          "5227:  if (set->use == UINT_MAX)",
          "5228:   return -EOVERFLOW;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5254:    return iter.err;",
          "5255:  }",
          "5256: bind:",
          "5257:  binding->chain = ctx->chain;",
          "5258:  list_add_tail_rcu(&binding->list, &set->bindings);",
          "5259:  nft_set_trans_bind(ctx, set);",
          "5262:  return 0;",
          "5263: }",
          "",
          "[Removed Lines]",
          "5260:  set->use++;",
          "",
          "[Added Lines]",
          "5270:  if (!nft_use_inc(&set->use))",
          "5271:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5331:   nft_clear(ctx->net, set);",
          "5332:  }",
          "5335: }",
          "5336: EXPORT_SYMBOL_GPL(nf_tables_activate_set);",
          "",
          "[Removed Lines]",
          "5334:  set->use++;",
          "",
          "[Added Lines]",
          "5349:  nft_use_inc_restore(&set->use);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5347:   else",
          "5348:    list_del_rcu(&binding->list);",
          "5351:   break;",
          "5352:  case NFT_TRANS_PREPARE:",
          "5353:   if (nft_set_is_anonymous(set)) {",
          "",
          "[Removed Lines]",
          "5350:   set->use--;",
          "",
          "[Added Lines]",
          "5365:   nft_use_dec(&set->use);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5357:    nft_deactivate_next(ctx->net, set);",
          "5358:   }",
          "5360:   return;",
          "5361:  case NFT_TRANS_ABORT:",
          "5362:  case NFT_TRANS_RELEASE:",
          "",
          "[Removed Lines]",
          "5359:   set->use--;",
          "",
          "[Added Lines]",
          "5374:   nft_use_dec(&set->use);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5364:       set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "5365:    nft_map_deactivate(ctx, set);",
          "5368:   fallthrough;",
          "5369:  default:",
          "5370:   nf_tables_unbind_set(ctx, set, binding,",
          "",
          "[Removed Lines]",
          "5367:   set->use--;",
          "",
          "[Added Lines]",
          "5382:   nft_use_dec(&set->use);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6155:   nft_set_elem_expr_destroy(&ctx, nft_set_ext_expr(ext));",
          "6157:  if (nft_set_ext_exists(ext, NFT_SET_EXT_OBJREF))",
          "6159:  kfree(elem);",
          "6160: }",
          "6161: EXPORT_SYMBOL_GPL(nft_set_elem_destroy);",
          "",
          "[Removed Lines]",
          "6158:   (*nft_set_ext_obj(ext))->use--;",
          "",
          "[Added Lines]",
          "6173:   nft_use_dec(&(*nft_set_ext_obj(ext))->use);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6657:          set->objtype, genmask);",
          "6658:   if (IS_ERR(obj)) {",
          "6659:    err = PTR_ERR(obj);",
          "6660:    goto err_parse_key_end;",
          "6661:   }",
          "6662:   err = nft_set_ext_add(&tmpl, NFT_SET_EXT_OBJREF);",
          "6663:   if (err < 0)",
          "6664:    goto err_parse_key_end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6675:    obj = NULL;",
          "6679:   if (!nft_use_inc(&obj->use)) {",
          "6680:    err = -EMFILE;",
          "6681:    obj = NULL;",
          "6682:    goto err_parse_key_end;",
          "6683:   }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6727:  if (flags)",
          "6734:  if (ulen > 0) {",
          "6735:   if (nft_set_ext_check(&tmpl, NFT_SET_EXT_USERDATA, ulen) < 0) {",
          "6736:    err = -EINVAL;",
          "",
          "[Removed Lines]",
          "6730:  if (obj) {",
          "6732:   obj->use++;",
          "6733:  }",
          "",
          "[Added Lines]",
          "6753:  if (obj)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6798:  kfree(trans);",
          "6799: err_elem_free:",
          "6800:  nf_tables_set_elem_destroy(ctx, set, elem.priv);",
          "6803: err_parse_data:",
          "6804:  if (nla[NFTA_SET_ELEM_DATA] != NULL)",
          "6805:   nft_data_release(&elem.data.val, desc.type);",
          "6806: err_parse_key_end:",
          "6807:  nft_data_release(&elem.key_end.val, NFT_DATA_VALUE);",
          "6808: err_parse_key:",
          "6809:  nft_data_release(&elem.key.val, NFT_DATA_VALUE);",
          "",
          "[Removed Lines]",
          "6801:  if (obj)",
          "6802:   obj->use--;",
          "",
          "[Added Lines]",
          "6827:  if (obj)",
          "6828:   nft_use_dec_restore(&obj->use);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6883:   case NFT_JUMP:",
          "6884:   case NFT_GOTO:",
          "6885:    chain = data->verdict.chain;",
          "6887:    break;",
          "6888:   }",
          "6889:  }",
          "",
          "[Removed Lines]",
          "6886:    chain->use++;",
          "",
          "[Added Lines]",
          "6909:    nft_use_inc_restore(&chain->use);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6898:  if (nft_set_ext_exists(ext, NFT_SET_EXT_DATA))",
          "6899:   nft_data_hold(nft_set_ext_data(ext), set->dtype);",
          "6900:  if (nft_set_ext_exists(ext, NFT_SET_EXT_OBJREF))",
          "6902: }",
          "6904: static void nft_setelem_data_deactivate(const struct net *net,",
          "",
          "[Removed Lines]",
          "6901:   (*nft_set_ext_obj(ext))->use++;",
          "",
          "[Added Lines]",
          "6924:   nft_use_inc_restore(&(*nft_set_ext_obj(ext))->use);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6910:  if (nft_set_ext_exists(ext, NFT_SET_EXT_DATA))",
          "6911:   nft_data_release(nft_set_ext_data(ext), set->dtype);",
          "6912:  if (nft_set_ext_exists(ext, NFT_SET_EXT_OBJREF))",
          "6914: }",
          "6916: static int nft_del_setelem(struct nft_ctx *ctx, struct nft_set *set,",
          "",
          "[Removed Lines]",
          "6913:   (*nft_set_ext_obj(ext))->use--;",
          "",
          "[Added Lines]",
          "6936:   nft_use_dec(&(*nft_set_ext_obj(ext))->use);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7454:  nft_ctx_init(&ctx, net, skb, info->nlh, family, table, NULL, nla);",
          "7456:  type = nft_obj_type_get(net, objtype);",
          "7460:  obj = nft_obj_init(&ctx, type, nla[NFTA_OBJ_DATA]);",
          "7461:  if (IS_ERR(obj)) {",
          "",
          "[Removed Lines]",
          "7457:  if (IS_ERR(type))",
          "7458:   return PTR_ERR(type);",
          "",
          "[Added Lines]",
          "7479:  if (!nft_use_inc(&table->use))",
          "7480:   return -EMFILE;",
          "7483:  if (IS_ERR(type)) {",
          "7484:   err = PTR_ERR(type);",
          "7485:   goto err_type;",
          "7486:  }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7489:   goto err_obj_ht;",
          "7491:  list_add_tail_rcu(&obj->list, &table->objects);",
          "7493:  return 0;",
          "7494: err_obj_ht:",
          "",
          "[Removed Lines]",
          "7492:  table->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7505:  kfree(obj);",
          "7506: err_init:",
          "7507:  module_put(type->owner);",
          "7508:  return err;",
          "7509: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7536: err_type:",
          "7537:  nft_use_dec_restore(&table->use);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7906:  case NFT_TRANS_PREPARE:",
          "7907:  case NFT_TRANS_ABORT:",
          "7908:  case NFT_TRANS_RELEASE:",
          "7910:   fallthrough;",
          "7911:  default:",
          "7912:   return;",
          "",
          "[Removed Lines]",
          "7909:   flowtable->use--;",
          "",
          "[Added Lines]",
          "7940:   nft_use_dec(&flowtable->use);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "8261:  nft_ctx_init(&ctx, net, skb, info->nlh, family, table, NULL, nla);",
          "8263:  flowtable = kzalloc(sizeof(*flowtable), GFP_KERNEL_ACCOUNT);",
          "8267:  flowtable->table = table;",
          "8268:  flowtable->handle = nf_tables_alloc_handle(table);",
          "",
          "[Removed Lines]",
          "8264:  if (!flowtable)",
          "8265:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "8294:  if (!nft_use_inc(&table->use))",
          "8295:   return -EMFILE;",
          "8298:  if (!flowtable) {",
          "8299:   err = -ENOMEM;",
          "8300:   goto flowtable_alloc;",
          "8301:  }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "8317:   goto err5;",
          "8319:  list_add_tail_rcu(&flowtable->list, &table->flowtables);",
          "8322:  return 0;",
          "8323: err5:",
          "",
          "[Removed Lines]",
          "8320:  table->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "8334:  kfree(flowtable->name);",
          "8335: err1:",
          "8336:  kfree(flowtable);",
          "8337:  return err;",
          "8338: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8372: flowtable_alloc:",
          "8373:  nft_use_dec_restore(&table->use);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "9714:     if (nft_set_is_anonymous(nft_trans_set(trans)) &&",
          "9715:         !list_empty(&nft_trans_set(trans)->bindings))",
          "9717:    }",
          "9718:    nf_tables_set_notify(&trans->ctx, nft_trans_set(trans),",
          "9719:           NFT_MSG_NEWSET, GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "9716:      trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "9754:      nft_use_dec(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "9943:      nft_trans_destroy(trans);",
          "9944:      break;",
          "9945:     }",
          "9947:     nft_chain_del(trans->ctx.chain);",
          "9948:     nf_tables_unregister_hook(trans->ctx.net,",
          "9949:          trans->ctx.table,",
          "",
          "[Removed Lines]",
          "9946:     trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "9984:     nft_use_dec_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "9956:     list_splice(&nft_trans_chain_hooks(trans),",
          "9957:          &nft_trans_basechain(trans)->hook_list);",
          "9958:    } else {",
          "9960:     nft_clear(trans->ctx.net, trans->ctx.chain);",
          "9961:    }",
          "9962:    nft_trans_destroy(trans);",
          "",
          "[Removed Lines]",
          "9959:     trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "9997:     nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "9966:     nft_trans_destroy(trans);",
          "9967:     break;",
          "9968:    }",
          "9970:    list_del_rcu(&nft_trans_rule(trans)->list);",
          "9971:    nft_rule_expr_deactivate(&trans->ctx,",
          "9972:        nft_trans_rule(trans),",
          "",
          "[Removed Lines]",
          "9969:    trans->ctx.chain->use--;",
          "",
          "[Added Lines]",
          "10007:    nft_use_dec_restore(&trans->ctx.chain->use);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "9976:    break;",
          "9977:   case NFT_MSG_DELRULE:",
          "9978:   case NFT_MSG_DESTROYRULE:",
          "9980:    nft_clear(trans->ctx.net, nft_trans_rule(trans));",
          "9981:    nft_rule_expr_activate(&trans->ctx, nft_trans_rule(trans));",
          "9982:    if (trans->ctx.chain->flags & NFT_CHAIN_HW_OFFLOAD)",
          "",
          "[Removed Lines]",
          "9979:    trans->ctx.chain->use++;",
          "",
          "[Added Lines]",
          "10017:    nft_use_inc_restore(&trans->ctx.chain->use);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "9989:     nft_trans_destroy(trans);",
          "9990:     break;",
          "9991:    }",
          "9993:    if (nft_trans_set_bound(trans)) {",
          "9994:     nft_trans_destroy(trans);",
          "9995:     break;",
          "",
          "[Removed Lines]",
          "9992:    trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "10030:    nft_use_dec_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "9998:    break;",
          "9999:   case NFT_MSG_DELSET:",
          "10000:   case NFT_MSG_DESTROYSET:",
          "10002:    nft_clear(trans->ctx.net, nft_trans_set(trans));",
          "10003:    if (nft_trans_set(trans)->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "10004:     nft_map_activate(&trans->ctx, nft_trans_set(trans));",
          "",
          "[Removed Lines]",
          "10001:    trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "10039:    nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "10042:     nft_obj_destroy(&trans->ctx, nft_trans_obj_newobj(trans));",
          "10043:     nft_trans_destroy(trans);",
          "10044:    } else {",
          "10046:     nft_obj_del(nft_trans_obj(trans));",
          "10047:    }",
          "10048:    break;",
          "10049:   case NFT_MSG_DELOBJ:",
          "10050:   case NFT_MSG_DESTROYOBJ:",
          "10052:    nft_clear(trans->ctx.net, nft_trans_obj(trans));",
          "10053:    nft_trans_destroy(trans);",
          "10054:    break;",
          "",
          "[Removed Lines]",
          "10045:     trans->ctx.table->use--;",
          "10051:    trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "10083:     nft_use_dec_restore(&trans->ctx.table->use);",
          "10089:    nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "10057:     nft_unregister_flowtable_net_hooks(net,",
          "10058:       &nft_trans_flowtable_hooks(trans));",
          "10059:    } else {",
          "10061:     list_del_rcu(&nft_trans_flowtable(trans)->list);",
          "10062:     nft_unregister_flowtable_net_hooks(net,",
          "10063:       &nft_trans_flowtable(trans)->hook_list);",
          "",
          "[Removed Lines]",
          "10060:     trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "10098:     nft_use_dec_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "10069:     list_splice(&nft_trans_flowtable_hooks(trans),",
          "10070:          &nft_trans_flowtable(trans)->hook_list);",
          "10071:    } else {",
          "10073:     nft_clear(trans->ctx.net, nft_trans_flowtable(trans));",
          "10074:    }",
          "10075:    nft_trans_destroy(trans);",
          "",
          "[Removed Lines]",
          "10072:     trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "10110:     nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "10518:   if (desc->flags & NFT_DATA_DESC_SETELEM &&",
          "10519:       chain->flags & NFT_CHAIN_BINDING)",
          "10520:    return -EINVAL;",
          "10523:   data->verdict.chain = chain;",
          "10524:   break;",
          "10525:  }",
          "",
          "[Removed Lines]",
          "10522:   chain->use++;",
          "",
          "[Added Lines]",
          "10559:   if (!nft_use_inc(&chain->use))",
          "10560:    return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "10537:  case NFT_JUMP:",
          "10538:  case NFT_GOTO:",
          "10539:   chain = data->verdict.chain;",
          "10541:   break;",
          "10542:  }",
          "10543: }",
          "",
          "[Removed Lines]",
          "10540:   chain->use--;",
          "",
          "[Added Lines]",
          "10579:   nft_use_dec(&chain->use);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "10706:  nf_tables_unregister_hook(ctx->net, ctx->chain->table, ctx->chain);",
          "10707:  list_for_each_entry_safe(rule, nr, &ctx->chain->rules, list) {",
          "10708:   list_del(&rule->list);",
          "10710:   nf_tables_rule_release(ctx, rule);",
          "10711:  }",
          "10712:  nft_chain_del(ctx->chain);",
          "10714:  nf_tables_chain_destroy(ctx);",
          "10716:  return 0;",
          "",
          "[Removed Lines]",
          "10709:   ctx->chain->use--;",
          "10713:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "10748:   nft_use_dec(&ctx->chain->use);",
          "10752:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "10760:   ctx.chain = chain;",
          "10761:   list_for_each_entry_safe(rule, nr, &chain->rules, list) {",
          "10762:    list_del(&rule->list);",
          "10764:    nf_tables_rule_release(&ctx, rule);",
          "10765:   }",
          "10766:  }",
          "10767:  list_for_each_entry_safe(flowtable, nf, &table->flowtables, list) {",
          "10768:   list_del(&flowtable->list);",
          "10770:   nf_tables_flowtable_destroy(flowtable);",
          "10771:  }",
          "10772:  list_for_each_entry_safe(set, ns, &table->sets, list) {",
          "10773:   list_del(&set->list);",
          "10775:   if (set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "10776:    nft_map_deactivate(&ctx, set);",
          "",
          "[Removed Lines]",
          "10763:    chain->use--;",
          "10769:   table->use--;",
          "10774:   table->use--;",
          "",
          "[Added Lines]",
          "10802:    nft_use_dec(&chain->use);",
          "10808:   nft_use_dec(&table->use);",
          "10813:   nft_use_dec(&table->use);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "10779:  }",
          "10780:  list_for_each_entry_safe(obj, ne, &table->objects, list) {",
          "10781:   nft_obj_del(obj);",
          "10783:   nft_obj_destroy(&ctx, obj);",
          "10784:  }",
          "10785:  list_for_each_entry_safe(chain, nc, &table->chains, list) {",
          "10786:   ctx.chain = chain;",
          "10787:   nft_chain_del(chain);",
          "10789:   nf_tables_chain_destroy(&ctx);",
          "10790:  }",
          "10791:  nf_tables_table_destroy(&ctx);",
          "",
          "[Removed Lines]",
          "10782:   table->use--;",
          "10788:   table->use--;",
          "",
          "[Added Lines]",
          "10821:   nft_use_dec(&table->use);",
          "10827:   nft_use_dec(&table->use);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_flow_offload.c||net/netfilter/nft_flow_offload.c": [
          "File: net/netfilter/nft_flow_offload.c -> net/netfilter/nft_flow_offload.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:  if (IS_ERR(flowtable))",
          "409:   return PTR_ERR(flowtable);",
          "411:  priv->flowtable = flowtable;",
          "414:  return nf_ct_netns_get(ctx->net, ctx->family);",
          "415: }",
          "",
          "[Removed Lines]",
          "412:  flowtable->use++;",
          "",
          "[Added Lines]",
          "411:  if (!nft_use_inc(&flowtable->use))",
          "412:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428: {",
          "429:  struct nft_flow_offload *priv = nft_expr_priv(expr);",
          "432: }",
          "434: static void nft_flow_offload_destroy(const struct nft_ctx *ctx,",
          "",
          "[Removed Lines]",
          "431:  priv->flowtable->use++;",
          "",
          "[Added Lines]",
          "433:  nft_use_inc_restore(&priv->flowtable->use);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c": [
          "File: net/netfilter/nft_immediate.c -> net/netfilter/nft_immediate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:    default:",
          "160:     nft_chain_del(chain);",
          "161:     chain->bound = false;",
          "163:     break;",
          "164:    }",
          "165:    break;",
          "",
          "[Removed Lines]",
          "162:     chain->table->use--;",
          "",
          "[Added Lines]",
          "162:     nft_use_dec(&chain->table->use);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   if (chain->bound) {",
          "202:    break;",
          "203:   }",
          "",
          "[Removed Lines]",
          "201:    chain->use--;",
          "",
          "[Added Lines]",
          "201:    nft_use_dec(&chain->use);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   chain_ctx = *ctx;",
          "207:   chain_ctx.chain = chain;",
          "210:   list_for_each_entry_safe(rule, n, &chain->rules, list) {",
          "212:    list_del(&rule->list);",
          "213:    nf_tables_rule_destroy(&chain_ctx, rule);",
          "214:   }",
          "",
          "[Removed Lines]",
          "209:   chain->use--;",
          "211:    chain->use--;",
          "",
          "[Added Lines]",
          "209:   nft_use_dec(&chain->use);",
          "211:    nft_use_dec(&chain->use);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c": [
          "File: net/netfilter/nft_objref.c -> net/netfilter/nft_objref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  if (IS_ERR(obj))",
          "42:   return -ENOENT;",
          "44:  nft_objref_priv(expr) = obj;",
          "47:  return 0;",
          "48: }",
          "",
          "[Removed Lines]",
          "45:  obj->use++;",
          "",
          "[Added Lines]",
          "44:  if (!nft_use_inc(&obj->use))",
          "45:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:  if (phase == NFT_TRANS_COMMIT)",
          "73:   return;",
          "76: }",
          "78: static void nft_objref_activate(const struct nft_ctx *ctx,",
          "",
          "[Removed Lines]",
          "75:  obj->use--;",
          "",
          "[Added Lines]",
          "77:  nft_use_dec(&obj->use);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80: {",
          "81:  struct nft_object *obj = nft_objref_priv(expr);",
          "84: }",
          "86: static const struct nft_expr_ops nft_objref_ops = {",
          "",
          "[Removed Lines]",
          "83:  obj->use++;",
          "",
          "[Added Lines]",
          "85:  nft_use_inc_restore(&obj->use);",
          "",
          "---------------"
        ]
      }
    }
  ]
}