{
  "cve_id": "CVE-2019-1010292",
  "cve_desc": "Linaro/OP-TEE OP-TEE Prior to version v3.4.0 is affected by: Boundary checks. The impact is: This could lead to corruption of any memory which the TA can access. The component is: optee_os. The fixed version is: v3.4.0.",
  "repo": "OP-TEE/optee_os",
  "patch_hash": "e3adcf566cb278444830e7badfdcc3983e334fd1",
  "patch_info": {
    "commit_hash": "e3adcf566cb278444830e7badfdcc3983e334fd1",
    "repo": "OP-TEE/optee_os",
    "commit_url": "https://github.com/OP-TEE/optee_os/commit/e3adcf566cb278444830e7badfdcc3983e334fd1",
    "files": [
      "core/arch/arm/tee/entry_std.c"
    ],
    "message": "core: ensure that supplied range matches MOBJ\n\nIn set_rmem_param() if the MOBJ is found by the cookie it's verified to\nrepresent non-secure shared memory. Prior to this patch the supplied\nsub-range to be used of the MOBJ was not checked here and relied on\nlater checks further down the chain. Those checks seems to be enough\nfor user TAs, but not for pseudo TAs where the size isn't checked.\n\nThis patch adds a check for offset and size to see that they remain\ninside the memory covered by the MOBJ.\n\nFixes: OP-TEE-2018-0004: \"Unchecked parameters are passed through from\nREE\".\n\nSigned-off-by: Jens Wiklander <jens.wiklander@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
    "before_after_code_files": [
      "core/arch/arm/tee/entry_std.c||core/arch/arm/tee/entry_std.c"
    ]
  },
  "patch_diff": {
    "core/arch/arm/tee/entry_std.c||core/arch/arm/tee/entry_std.c": [
      "File: core/arch/arm/tee/entry_std.c -> core/arch/arm/tee/entry_std.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "101: static TEE_Result set_rmem_param(const struct optee_msg_param_rmem *rmem,",
      "102:      struct param_mem *mem)",
      "103: {",
      "104:  uint64_t shm_ref = READ_ONCE(rmem->shm_ref);",
      "106:  mem->mobj = mobj_reg_shm_get_by_cookie(shm_ref);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104:  size_t req_size = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:  mem->offs = READ_ONCE(rmem->offs);",
      "111:  mem->size = READ_ONCE(rmem->size);",
      "113:  return TEE_SUCCESS;",
      "114: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:  if (ADD_OVERFLOW(mem->offs, mem->size, &req_size) ||",
      "119:      mem->mobj->size < req_size)",
      "120:   return TEE_ERROR_SECURITY;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ca89f5f94e9e21c3b07b93ad1c2fe3831463507",
      "candidate_info": {
        "commit_hash": "4ca89f5f94e9e21c3b07b93ad1c2fe3831463507",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/4ca89f5f94e9e21c3b07b93ad1c2fe3831463507",
        "files": [
          "core/arch/arm/kernel/secstor_ta.c"
        ],
        "message": "tadb: set error condition on TA size mismatch\n\nIf tee_tadb_ta_read(..) is successful in secstor_ta_open(..), then we\nmust set an error code manually if the size check right after fails.\n\nFixes: \"Loading from secure storage returns success with uninitialized\npointer\" as reported by Riscure.\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/arch/arm/kernel/secstor_ta.c||core/arch/arm/kernel/secstor_ta.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/arch/arm/kernel/secstor_ta.c||core/arch/arm/kernel/secstor_ta.c": [
          "File: core/arch/arm/kernel/secstor_ta.c -> core/arch/arm/kernel/secstor_ta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  res = tee_tadb_ta_read(ta, NULL, &l);",
          "26:  if (res)",
          "27:   goto err;",
          "29:   goto err;",
          "",
          "[Removed Lines]",
          "28:  if (l != prop->custom_size)",
          "",
          "[Added Lines]",
          "28:  if (l != prop->custom_size) {",
          "29:   res = TEE_ERROR_CORRUPT_OBJECT;",
          "31:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95f36d661f2b75887772ea28baaad904bde96970",
      "candidate_info": {
        "commit_hash": "95f36d661f2b75887772ea28baaad904bde96970",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/95f36d661f2b75887772ea28baaad904bde96970",
        "files": [
          "core/arch/arm/mm/tee_mmu.c"
        ],
        "message": "core: tee_mmu_check_access_rights() check all pages\n\nPrior to this patch tee_mmu_check_access_rights() checks an address in\neach page of a supplied range. If both the start and length of that\nrange is unaligned the last page in the range is sometimes not checked.\nWith this patch the first address of each page in the range is checked\nto simplify the logic of checking each page and the range and also to\ncover the last page under all circumstances.\n\nFixes: OP-TEE-2018-0005: \"tee_mmu_check_access_rights does not check\nfinal page of TA buffer\"\n\nSigned-off-by: Jens Wiklander <jens.wiklander@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/arch/arm/mm/tee_mmu.c||core/arch/arm/mm/tee_mmu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/arch/arm/mm/tee_mmu.c||core/arch/arm/mm/tee_mmu.c": [
          "File: core/arch/arm/mm/tee_mmu.c -> core/arch/arm/mm/tee_mmu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:            size_t len)",
          "758: {",
          "759:  uaddr_t a;",
          "760:  size_t addr_incr = MIN(CORE_MMU_USER_CODE_SIZE,",
          "761:           CORE_MMU_USER_PARAM_SIZE);",
          "764:   return TEE_ERROR_ACCESS_DENIED;",
          "766:  if ((flags & TEE_MEMORY_ACCESS_NONSECURE) &&",
          "",
          "[Removed Lines]",
          "763:  if (ADD_OVERFLOW(uaddr, len, &a))",
          "",
          "[Added Lines]",
          "760:  uaddr_t end_addr = 0;",
          "764:  if (ADD_OVERFLOW(uaddr, len, &end_addr))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775:     !tee_mmu_is_vbuf_inside_ta_private(utc, (void *)uaddr, len))",
          "776:   return TEE_ERROR_ACCESS_DENIED;",
          "779:   uint32_t attr;",
          "780:   TEE_Result res;",
          "",
          "[Removed Lines]",
          "778:  for (a = uaddr; a < (uaddr + len); a += addr_incr) {",
          "",
          "[Added Lines]",
          "779:  for (a = ROUNDDOWN(uaddr, addr_incr); a < end_addr; a += addr_incr) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a637243270fc1faae16de059091795c32d86e65e",
      "candidate_info": {
        "commit_hash": "a637243270fc1faae16de059091795c32d86e65e",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/a637243270fc1faae16de059091795c32d86e65e",
        "files": [
          "core/tee/tee_svc_cryp.c"
        ],
        "message": "svc: check for allocation overflow in crypto calls\n\nWithout checking for overflow there is a risk of allocating a buffer\nwith size smaller than anticipated and as a consequence of that it might\nlead to a heap based overflow with attacker controlled data written\noutside the boundaries of the buffer.\n\nFixes: OP-TEE-2018-0010: \"Integer overflow in crypto system calls (x2)\"\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c": [
          "File: core/tee/tee_svc_cryp.c -> core/tee/tee_svc_cryp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1759:  if (key_size > type_props->max_size)",
          "1760:   return TEE_ERROR_NOT_SUPPORTED;",
          "1763:  if (!params)",
          "1764:   return TEE_ERROR_OUT_OF_MEMORY;",
          "1765:  res = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_params, param_count,",
          "",
          "[Removed Lines]",
          "1762:  params = malloc(sizeof(TEE_Attribute) * param_count);",
          "",
          "[Added Lines]",
          "1762:  size_t alloc_size = 0;",
          "1764:  if (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))",
          "1765:   return TEE_ERROR_OVERFLOW;",
          "1767:  params = malloc(alloc_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2668:  if (res != TEE_SUCCESS)",
          "2669:   return res;",
          "2672:  if (!params)",
          "2673:   return TEE_ERROR_OUT_OF_MEMORY;",
          "2674:  res = copy_in_attrs(utc, usr_params, param_count, params);",
          "",
          "[Removed Lines]",
          "2671:  params = malloc(sizeof(TEE_Attribute) * param_count);",
          "",
          "[Added Lines]",
          "2676:  size_t alloc_size = 0;",
          "2678:  if (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))",
          "2679:   return TEE_ERROR_OVERFLOW;",
          "2681:  params = malloc(alloc_size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b60e1cee406a1ff521145ab9534370dfb85dd592",
      "candidate_info": {
        "commit_hash": "b60e1cee406a1ff521145ab9534370dfb85dd592",
        "repo": "OP-TEE/optee_os",
        "commit_url": "https://github.com/OP-TEE/optee_os/commit/b60e1cee406a1ff521145ab9534370dfb85dd592",
        "files": [
          "core/tee/tee_svc_cryp.c"
        ],
        "message": "svc: check for allocation overflow in syscall_cryp_obj_populate\n\nWithout checking for overflow there is a risk of allocating a buffer\nwith size smaller than anticipated and as a consequence of that it might\nlead to a heap based overflow with attacker controlled data written\noutside the boundaries of the buffer.\n\nFixes: OP-TEE-2018-0009: \"Integer overflow in crypto system calls\"\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
        "before_after_code_files": [
          "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OP-TEE/optee_os/pull/2745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/tee/tee_svc_cryp.c||core/tee/tee_svc_cryp.c": [
          "File: core/tee/tee_svc_cryp.c -> core/tee/tee_svc_cryp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <assert.h>",
          "7: #include <crypto/crypto.h>",
          "8: #include <kernel/tee_ta_manager.h>",
          "9: #include <mm/tee_mmu.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include <compiler.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1547:  if (!type_props)",
          "1548:   return TEE_ERROR_NOT_IMPLEMENTED;",
          "1551:  if (!attrs)",
          "1552:   return TEE_ERROR_OUT_OF_MEMORY;",
          "1553:  res = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_attrs, attr_count,",
          "1554:        attrs);",
          "1555:  if (res != TEE_SUCCESS)",
          "",
          "[Removed Lines]",
          "1550:  attrs = malloc(sizeof(TEE_Attribute) * attr_count);",
          "",
          "[Added Lines]",
          "1551:  size_t alloc_size = 0;",
          "1553:  if (MUL_OVERFLOW(sizeof(TEE_Attribute), attr_count, &alloc_size))",
          "1554:   return TEE_ERROR_OVERFLOW;",
          "1556:  attrs = malloc(alloc_size);",
          "",
          "---------------"
        ]
      }
    }
  ]
}