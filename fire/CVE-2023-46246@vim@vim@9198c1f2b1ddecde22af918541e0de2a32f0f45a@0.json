{
  "cve_id": "CVE-2023-46246",
  "cve_desc": "Vim is an improved version of the good old UNIX editor Vi. Heap-use-after-free in memory allocated in the function `ga_grow_inner` in in the file `src/alloc.c` at line 748, which is freed in the file `src/ex_docmd.c` in the function `do_cmdline` at line 1010 and then used again in `src/cmdhist.c` at line 759. When using the `:history` command, it's possible that the provided argument overflows the accepted value. Causing an Integer Overflow and potentially later an use-after-free. This vulnerability has been patched in version 9.0.2068.",
  "repo": "vim/vim",
  "patch_hash": "9198c1f2b1ddecde22af918541e0de2a32f0f45a",
  "patch_info": {
    "commit_hash": "9198c1f2b1ddecde22af918541e0de2a32f0f45a",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/9198c1f2b1ddecde22af918541e0de2a32f0f45a",
    "files": [
      "src/cmdhist.c",
      "src/errors.h",
      "src/ex_getln.c",
      "src/testdir/test_history.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.2068: [security] overflow in :history\n\nProblem:  [security] overflow in :history\nSolution: Check that value fits into int\n\nThe get_list_range() function, used to parse numbers for the :history\nand :clist command internally uses long variables to store the numbers.\nHowever function arguments are integer pointers, which can then\noverflow.\n\nCheck that the return value from the vim_str2nr() function is not larger\nthan INT_MAX and if yes, bail out with an error. I guess nobody uses a\ncmdline/clist history that needs so many entries... (famous last words).\n\nIt is only a moderate vulnerability, so impact should be low.\n\nGithub Advisory:\nhttps://github.com/vim/vim/security/advisories/GHSA-q22m-h7m2-9mgm\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/cmdhist.c||src/cmdhist.c",
      "src/errors.h||src/errors.h",
      "src/ex_getln.c||src/ex_getln.c",
      "src/testdir/test_history.vim||src/testdir/test_history.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/cmdhist.c||src/cmdhist.c": [
      "File: src/cmdhist.c -> src/cmdhist.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "742:  end = arg;",
      "743:     if (!get_list_range(&end, &hisidx1, &hisidx2) || *end != NUL)",
      "744:     {",
      "746:  return;",
      "747:     }",
      "",
      "[Removed Lines]",
      "745:  semsg(_(e_trailing_characters_str), end);",
      "",
      "[Added Lines]",
      "745:  if (*end != NUL)",
      "746:      semsg(_(e_trailing_characters_str), end);",
      "747:  else",
      "748:      semsg(_(e_val_too_large), arg);",
      "",
      "---------------"
    ],
    "src/errors.h||src/errors.h": [
      "File: src/errors.h -> src/errors.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3560:  INIT(= N_(\"E1508: Size of the extended attribute value is larger than the maximum size allowed\"));",
      "3561: EXTERN char e_xattr_other[]",
      "3562:  INIT(= N_(\"E1509: Error occurred when reading or writing extended attribute\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3563: EXTERN char e_val_too_large[]",
      "3564:  INIT(= N_(\"E1510: Value too large: %s\"));",
      "",
      "---------------"
    ],
    "src/ex_getln.c||src/ex_getln.c": [
      "File: src/ex_getln.c -> src/ex_getln.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4377:     {",
      "4378:  vim_str2nr(*str, NULL, &len, 0, &num, NULL, 0, FALSE, NULL);",
      "4381:  first = TRUE;",
      "4382:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4381:  if (num > INT_MAX)",
      "4382:      return FAIL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4387:  vim_str2nr(*str, NULL, &len, 0, &num, NULL, 0, FALSE, NULL);",
      "4388:  if (len > 0)",
      "4389:  {",
      "4392:  }",
      "4393:  else if (!first)  // no number given at all",
      "4394:      return FAIL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4396:      if (num > INT_MAX)",
      "4397:   return FAIL;",
      "",
      "---------------"
    ],
    "src/testdir/test_history.vim||src/testdir/test_history.vim": [
      "File: src/testdir/test_history.vim -> src/testdir/test_history.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "254:   set key& bs& ts&",
      "255: endfunc",
      "257: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257: \" The following used to overflow and causing an use-after-free",
      "258: func Test_history_max_val()",
      "260:   set history=10",
      "261:   call assert_fails(':history 2147483648', 'E1510:')",
      "262:   set history&",
      "263: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "705: static int included_patches[] =",
      "708:     2067,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     2068,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c029c131ea7822514d67edb9be2de76d076aa267",
      "candidate_info": {
        "commit_hash": "c029c131ea7822514d67edb9be2de76d076aa267",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/c029c131ea7822514d67edb9be2de76d076aa267",
        "files": [
          "src/misc1.c",
          "src/testdir/test_buffer.vim",
          "src/testdir/test_history.vim",
          "src/testdir/test_ins_complete.vim",
          "src/testdir/test_mksession.vim",
          "src/testdir/test_recover.vim",
          "src/testdir/test_regexp_latin.vim",
          "src/testdir/test_vim9_script.vim",
          "src/testdir/test_visual.vim",
          "src/version.c",
          "src/vim9class.c"
        ],
        "message": "patch 9.1.0220: Few typos in source and test files\n\nProblem:  Typos in code and tests.\nSolution: Fix typos (zeertzjq).\n\ncloses: #14321\n\nSigned-off-by: zeertzjq <zeertzjq@outlook.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/misc1.c||src/misc1.c",
          "src/testdir/test_buffer.vim||src/testdir/test_buffer.vim",
          "src/testdir/test_history.vim||src/testdir/test_history.vim",
          "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
          "src/testdir/test_mksession.vim||src/testdir/test_mksession.vim",
          "src/testdir/test_recover.vim||src/testdir/test_recover.vim",
          "src/testdir/test_regexp_latin.vim||src/testdir/test_regexp_latin.vim",
          "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
          "src/testdir/test_visual.vim||src/testdir/test_visual.vim",
          "src/version.c||src/version.c",
          "src/vim9class.c||src/vim9class.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_history.vim||src/testdir/test_history.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_history.vim||src/testdir/test_history.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c"
        ],
        "src/testdir/test_buffer.vim||src/testdir/test_buffer.vim": [
          "File: src/testdir/test_buffer.vim -> src/testdir/test_buffer.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   call assert_fails('1,1bdelete 1 2', 'E488:')",
          "134:   call assert_fails('bdelete \\)', 'E55:')",
          "137:   edit Xbdelfile1",
          "138:   let bnr = bufnr()",
          "139:   set nobuflisted",
          "",
          "[Removed Lines]",
          "136:   \" Deleting a unlisted and unloaded buffer",
          "",
          "[Added Lines]",
          "136:   \" Deleting an unlisted and unloaded buffer",
          "",
          "---------------"
        ],
        "src/testdir/test_history.vim||src/testdir/test_history.vim": [
          "File: src/testdir/test_history.vim -> src/testdir/test_history.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:   set key& bs& ts&",
          "255: endfunc",
          "258: func Test_history_max_val()",
          "260:   set history=10",
          "",
          "[Removed Lines]",
          "257: \" The following used to overflow and causing an use-after-free",
          "",
          "[Added Lines]",
          "257: \" The following used to overflow and causing a use-after-free",
          "",
          "---------------"
        ],
        "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim": [
          "File: src/testdir/test_ins_complete.vim -> src/testdir/test_ins_complete.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1130:   edit Xfile1",
          "1131:   enew",
          "1132:   set complete=U",
          "1134:   exe \"normal! ia\\<C-X>\\<C-L>\\<C-P>\"",
          "1135:   call assert_equal('a', getline(1))",
          "1136:   %d",
          "",
          "[Removed Lines]",
          "1133:   \" completing from a unloaded buffer should fail",
          "",
          "[Added Lines]",
          "1133:   \" completing from an unloaded buffer should fail",
          "",
          "---------------"
        ],
        "src/testdir/test_mksession.vim||src/testdir/test_mksession.vim": [
          "File: src/testdir/test_mksession.vim -> src/testdir/test_mksession.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "709: func Test_mkview_no_file_name()",
          "710:   new",
          "712:   call assert_fails('mkview', 'E32:')",
          "713:   call assert_fails('mkview 1', 'E32:')",
          "716:   mkview Xview",
          "717:   help",
          "718:   source Xview",
          "",
          "[Removed Lines]",
          "711:   \" :mkview or :mkview {nr} should fail in a unnamed buffer.",
          "715:   \" :mkview {file} should succeed in a unnamed buffer.",
          "",
          "[Added Lines]",
          "711:   \" :mkview or :mkview {nr} should fail in an unnamed buffer.",
          "715:   \" :mkview {file} should succeed in an unnamed buffer.",
          "",
          "---------------"
        ],
        "src/testdir/test_recover.vim||src/testdir/test_recover.vim": [
          "File: src/testdir/test_recover.vim -> src/testdir/test_recover.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:   call delete('Xfile1')",
          "381: endfunc",
          "384: func Test_recover_unreadable_swap_file()",
          "385:   CheckUnix",
          "386:   CheckNotRoot",
          "",
          "[Removed Lines]",
          "383: \" Test for :recover using a unreadable swap file",
          "",
          "[Added Lines]",
          "383: \" Test for :recover using an unreadable swap file",
          "",
          "---------------"
        ],
        "src/testdir/test_regexp_latin.vim||src/testdir/test_regexp_latin.vim": [
          "File: src/testdir/test_regexp_latin.vim -> src/testdir/test_regexp_latin.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:   %d",
          "875: endfunc",
          "878: func Regex_Mark_Verymagic()",
          "879:   call append(0, ['', '', '', 'Marks:', 'asdfSasdfsadfEasdf', 'asdfSas',",
          "880:         \\ 'dfsadfEasdf', '', '', '', '', ''])",
          "",
          "[Removed Lines]",
          "877: \" Same test as abobe, but use verymagic",
          "",
          "[Added Lines]",
          "877: \" Same test as above, but use verymagic",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim": [
          "File: src/testdir/test_vim9_script.vim -> src/testdir/test_vim9_script.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "4906:   v9.CheckSourceFailure(lines, 'E1059: No white space allowed before colon: :number in range(10)', 2)",
          "4907: enddef",
          "4910: def Test_for_empty_line_after_lambda()",
          "4911:   var lines =<< trim END",
          "4912:     vim9script",
          "",
          "[Removed Lines]",
          "4909: \" This test used to cause an use-after-free memory access",
          "",
          "[Added Lines]",
          "4909: \" This test used to cause a use-after-free memory access",
          "",
          "---------------"
        ],
        "src/testdir/test_visual.vim||src/testdir/test_visual.vim": [
          "File: src/testdir/test_visual.vim -> src/testdir/test_visual.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1149:   \" try to select non-existing inner block",
          "1150:   call cursor(5, 1)",
          "1151:   call assert_beeps('normal ViBiBiB')",
          "1153:   8,9d",
          "1154:   call cursor(5, 1)",
          "1155:   call assert_beeps('normal ViBiB')",
          "",
          "[Removed Lines]",
          "1152:   \" try to select a unclosed inner block",
          "",
          "[Added Lines]",
          "1152:   \" try to select an unclosed inner block",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     219,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     220,",
          "",
          "---------------"
        ],
        "src/vim9class.c||src/vim9class.c": [
          "File: src/vim9class.c -> src/vim9class.c"
        ]
      }
    }
  ]
}