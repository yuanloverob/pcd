{
  "cve_id": "CVE-2022-41911",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash. The issue has been patched in GitHub commit `1be74370327`. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1, TensorFlow 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "1be743703279782a357adbf9b77dcb994fe8b508",
  "patch_info": {
    "commit_hash": "1be743703279782a357adbf9b77dcb994fe8b508",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/1be743703279782a357adbf9b77dcb994fe8b508",
    "files": [
      "tensorflow/core/framework/tensor.cc"
    ],
    "message": "Resolve a sanitizer issue with invalid char -> bool conversion.\n\nWhen printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\nTo fix, we're creating a mutable `char` array to convert the chars to 0/1, according to bool rules.\n\nDiscovered via internal fuzzing.\n\nPiperOrigin-RevId: 482297563",
    "before_after_code_files": [
      "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
      "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include \"tensorflow/core/framework/tensor.h\"",
      "32: #include <utility>",
      "34: #include \"absl/strings/escaping.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include <memory>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1183: }",
      "1185: template <typename T>",
      "1189:   string ret;",
      "1192:   const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();",
      "1193:   if (shape.empty()) {",
      "1194:     for (int64_t i = 0; i < limit; ++i) {",
      "",
      "[Removed Lines]",
      "1186: string SummarizeArray(int64_t limit, int64_t num_elts,",
      "1187:                       const TensorShape& tensor_shape, const char* data,",
      "1188:                       const bool print_v2) {",
      "1190:   const T* array = reinterpret_cast<const T*>(data);",
      "",
      "[Added Lines]",
      "1187: string SummarizeArrayInternal(int64_t limit, int64_t num_elts,",
      "1188:                               const TensorShape& tensor_shape, const T* array,",
      "1189:                               const bool print_v2) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1212:   return ret;",
      "1213: }",
      "1214: }  // namespace",
      "1216: string Tensor::SummarizeValue(int64_t max_entries, bool print_v2) const {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1214: template <typename T>",
      "1215: string SummarizeArray(int64_t limit, int64_t num_elts,",
      "1216:                       const TensorShape& tensor_shape, const char* data,",
      "1217:                       const bool print_v2) {",
      "1218:   const T* array = reinterpret_cast<const T*>(data);",
      "1219:   return SummarizeArrayInternal<T>(limit, num_elts, tensor_shape, array,",
      "1220:                                    print_v2);",
      "1221: }",
      "1223: template <>",
      "1224: string SummarizeArray<bool>(int64_t limit, int64_t num_elts,",
      "1225:                             const TensorShape& tensor_shape, const char* data,",
      "1226:                             const bool print_v2) {",
      "1229:   auto mutable_data = std::unique_ptr<char[]>(new char[num_elts]);",
      "1230:   for (int64_t i = 0; i < num_elts; ++i)",
      "1231:     mutable_data.get()[i] = data[i] ? 1 : 0;",
      "1232:   bool* array = reinterpret_cast<bool*>(mutable_data.get());",
      "1233:   return SummarizeArrayInternal<bool>(limit, num_elts, tensor_shape, array,",
      "1234:                                       print_v2);",
      "1235: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ddb64cfd971e02ea0f7a7522319c9610fb07ebfd",
      "candidate_info": {
        "commit_hash": "ddb64cfd971e02ea0f7a7522319c9610fb07ebfd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ddb64cfd971e02ea0f7a7522319c9610fb07ebfd",
        "files": [
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Resolve a sanitizer issue with invalid char -> bool conversion.\n\nWhen printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\nTo fix, we're creating a mutable `char` array to convert the chars to 0/1, according to bool rules.\n\nDiscovered via internal fuzzing.\n\nPiperOrigin-RevId: 482087076",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183: }",
          "1185: template <typename T>",
          "1189:   string ret;",
          "1190:   const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();",
          "1191:   if (shape.empty()) {",
          "1192:     for (int64_t i = 0; i < limit; ++i) {",
          "",
          "[Removed Lines]",
          "1186: string SummarizeArrayInternal(int64_t limit, int64_t num_elts,",
          "1187:                               const TensorShape& tensor_shape, const T* array,",
          "1188:                               const bool print_v2) {",
          "",
          "[Added Lines]",
          "1186: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1187:                       const TensorShape& tensor_shape, const char* data,",
          "1188:                       const bool print_v2) {",
          "1190:   const T* array = reinterpret_cast<const T*>(data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1210:   return ret;",
          "1211: }",
          "1234: }  // namespace",
          "1236: string Tensor::SummarizeValue(int64_t max_entries, bool print_v2) const {",
          "",
          "[Removed Lines]",
          "1213: template <typename T>",
          "1214: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1215:                       const TensorShape& tensor_shape, const char* data,",
          "1216:                       const bool print_v2) {",
          "1217:   const T* array = reinterpret_cast<const T*>(data);",
          "1218:   return SummarizeArrayInternal<T>(limit, num_elts, tensor_shape, array,",
          "1219:                                    print_v2);",
          "1220: }",
          "1222: template <>",
          "1223: string SummarizeArray<bool>(int64_t limit, int64_t num_elts,",
          "1224:                             const TensorShape& tensor_shape, const char* data,",
          "1225:                             const bool print_v2) {",
          "1228:   char* mutable_data = const_cast<char*>(data);",
          "1229:   for (int64_t i = 0; i < limit; ++i) mutable_data[i] = !!mutable_data[i];",
          "1230:   bool* array = reinterpret_cast<bool*>(mutable_data);",
          "1231:   return SummarizeArrayInternal<bool>(limit, num_elts, tensor_shape, array,",
          "1232:                                       print_v2);",
          "1233: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8d5d1cf684a21d64d050be608272baca39eb944",
      "candidate_info": {
        "commit_hash": "c8d5d1cf684a21d64d050be608272baca39eb944",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c8d5d1cf684a21d64d050be608272baca39eb944",
        "files": [
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Resolve a sanitizer issue with invalid char -> bool conversion.\n\nWhen printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\nTo fix, we're creating a mutable `char` array to convert the chars to 0/1, according to bool rules.\n\nDiscovered via internal fuzzing.\n\nPiperOrigin-RevId: 482078850",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183: }",
          "1185: template <typename T>",
          "1189:   string ret;",
          "1192:   const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();",
          "1193:   if (shape.empty()) {",
          "1194:     for (int64_t i = 0; i < limit; ++i) {",
          "",
          "[Removed Lines]",
          "1186: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1187:                       const TensorShape& tensor_shape, const char* data,",
          "1188:                       const bool print_v2) {",
          "1190:   const T* array = reinterpret_cast<const T*>(data);",
          "",
          "[Added Lines]",
          "1186: string SummarizeArrayInternal(int64_t limit, int64_t num_elts,",
          "1187:                               const TensorShape& tensor_shape, const T* array,",
          "1188:                               const bool print_v2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1212:   return ret;",
          "1213: }",
          "1214: }  // namespace",
          "1216: string Tensor::SummarizeValue(int64_t max_entries, bool print_v2) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1213: template <typename T>",
          "1214: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1215:                       const TensorShape& tensor_shape, const char* data,",
          "1216:                       const bool print_v2) {",
          "1217:   const T* array = reinterpret_cast<const T*>(data);",
          "1218:   return SummarizeArrayInternal<T>(limit, num_elts, tensor_shape, array,",
          "1219:                                    print_v2);",
          "1220: }",
          "1222: template <>",
          "1223: string SummarizeArray<bool>(int64_t limit, int64_t num_elts,",
          "1224:                             const TensorShape& tensor_shape, const char* data,",
          "1225:                             const bool print_v2) {",
          "1228:   char* mutable_data = const_cast<char*>(data);",
          "1229:   for (int64_t i = 0; i < limit; ++i) mutable_data[i] = !!mutable_data[i];",
          "1230:   bool* array = reinterpret_cast<bool*>(mutable_data);",
          "1231:   return SummarizeArrayInternal<bool>(limit, num_elts, tensor_shape, array,",
          "1232:                                       print_v2);",
          "1233: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "288cc53de7d06174be2412022da6bd52f7f1f70f",
      "candidate_info": {
        "commit_hash": "288cc53de7d06174be2412022da6bd52f7f1f70f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/288cc53de7d06174be2412022da6bd52f7f1f70f",
        "files": [
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Resolve a sanitizer issue with invalid char -> bool conversion.\n\nWhen printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\nTo fix, we're creating a mutable `char` array to convert the chars to 0/1, according to bool rules.\n\nDiscovered via internal fuzzing.\n\nPiperOrigin-RevId: 482297563",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"tensorflow/core/framework/tensor.h\"",
          "32: #include <utility>",
          "34: #include \"absl/strings/escaping.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <memory>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183: }",
          "1185: template <typename T>",
          "1189:   string ret;",
          "1192:   const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();",
          "1193:   if (shape.empty()) {",
          "1194:     for (int64_t i = 0; i < limit; ++i) {",
          "",
          "[Removed Lines]",
          "1186: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1187:                       const TensorShape& tensor_shape, const char* data,",
          "1188:                       const bool print_v2) {",
          "1190:   const T* array = reinterpret_cast<const T*>(data);",
          "",
          "[Added Lines]",
          "1187: string SummarizeArrayInternal(int64_t limit, int64_t num_elts,",
          "1188:                               const TensorShape& tensor_shape, const T* array,",
          "1189:                               const bool print_v2) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1212:   return ret;",
          "1213: }",
          "1214: }  // namespace",
          "1216: string Tensor::SummarizeValue(int64_t max_entries, bool print_v2) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: template <typename T>",
          "1215: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1216:                       const TensorShape& tensor_shape, const char* data,",
          "1217:                       const bool print_v2) {",
          "1218:   const T* array = reinterpret_cast<const T*>(data);",
          "1219:   return SummarizeArrayInternal<T>(limit, num_elts, tensor_shape, array,",
          "1220:                                    print_v2);",
          "1221: }",
          "1223: template <>",
          "1224: string SummarizeArray<bool>(int64_t limit, int64_t num_elts,",
          "1225:                             const TensorShape& tensor_shape, const char* data,",
          "1226:                             const bool print_v2) {",
          "1229:   auto mutable_data = std::unique_ptr<char[]>(new char[num_elts]);",
          "1230:   for (int64_t i = 0; i < num_elts; ++i)",
          "1231:     mutable_data.get()[i] = data[i] ? 1 : 0;",
          "1232:   bool* array = reinterpret_cast<bool*>(mutable_data.get());",
          "1233:   return SummarizeArrayInternal<bool>(limit, num_elts, tensor_shape, array,",
          "1234:                                       print_v2);",
          "1235: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e435225b4334a8e39226c9067425f2aab7f9fc31",
      "candidate_info": {
        "commit_hash": "e435225b4334a8e39226c9067425f2aab7f9fc31",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e435225b4334a8e39226c9067425f2aab7f9fc31",
        "files": [
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Resolve a sanitizer issue with invalid char -> bool conversion.\n\nWhen printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\nTo fix, we're creating a mutable `char` array to convert the chars to 0/1, according to bool rules.\n\nDiscovered via internal fuzzing.\n\nPiperOrigin-RevId: 482297563",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"tensorflow/core/framework/tensor.h\"",
          "32: #include <utility>",
          "34: #include \"absl/strings/escaping.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <memory>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1176: }",
          "1178: template <typename T>",
          "1182:   string ret;",
          "1185:   const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();",
          "1186:   if (shape.empty()) {",
          "1187:     for (int64_t i = 0; i < limit; ++i) {",
          "",
          "[Removed Lines]",
          "1179: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1180:                       const TensorShape& tensor_shape, const char* data,",
          "1181:                       const bool print_v2) {",
          "1183:   const T* array = reinterpret_cast<const T*>(data);",
          "",
          "[Added Lines]",
          "1180: string SummarizeArrayInternal(int64_t limit, int64_t num_elts,",
          "1181:                               const TensorShape& tensor_shape, const T* array,",
          "1182:                               const bool print_v2) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1205:   return ret;",
          "1206: }",
          "1207: }  // namespace",
          "1209: string Tensor::SummarizeValue(int64_t max_entries, bool print_v2) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1207: template <typename T>",
          "1208: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1209:                       const TensorShape& tensor_shape, const char* data,",
          "1210:                       const bool print_v2) {",
          "1211:   const T* array = reinterpret_cast<const T*>(data);",
          "1212:   return SummarizeArrayInternal<T>(limit, num_elts, tensor_shape, array,",
          "1213:                                    print_v2);",
          "1214: }",
          "1216: template <>",
          "1217: string SummarizeArray<bool>(int64_t limit, int64_t num_elts,",
          "1218:                             const TensorShape& tensor_shape, const char* data,",
          "1219:                             const bool print_v2) {",
          "1222:   auto mutable_data = std::unique_ptr<char[]>(new char[num_elts]);",
          "1223:   for (int64_t i = 0; i < num_elts; ++i)",
          "1224:     mutable_data.get()[i] = data[i] ? 1 : 0;",
          "1225:   bool* array = reinterpret_cast<bool*>(mutable_data.get());",
          "1226:   return SummarizeArrayInternal<bool>(limit, num_elts, tensor_shape, array,",
          "1227:                                       print_v2);",
          "1228: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb11273652b3bfb08ca3a67fd3f8417d011ec869",
      "candidate_info": {
        "commit_hash": "cb11273652b3bfb08ca3a67fd3f8417d011ec869",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cb11273652b3bfb08ca3a67fd3f8417d011ec869",
        "files": [
          "tensorflow/core/framework/tensor.cc"
        ],
        "message": "Resolve a sanitizer issue with invalid char -> bool conversion.\n\nWhen printing a tensor, we get it's data as a `const char*` array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\nTo fix, we're creating a mutable `char` array to convert the chars to 0/1, according to bool rules.\n\nDiscovered via internal fuzzing.\n\nPiperOrigin-RevId: 482297563",
        "before_after_code_files": [
          "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/tensor.cc||tensorflow/core/framework/tensor.cc": [
          "File: tensorflow/core/framework/tensor.cc -> tensorflow/core/framework/tensor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"tensorflow/core/framework/tensor.h\"",
          "32: #include <utility>",
          "34: #include \"absl/strings/escaping.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <memory>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183: }",
          "1185: template <typename T>",
          "1189:   string ret;",
          "1192:   const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();",
          "1193:   if (shape.empty()) {",
          "1194:     for (int64_t i = 0; i < limit; ++i) {",
          "",
          "[Removed Lines]",
          "1186: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1187:                       const TensorShape& tensor_shape, const char* data,",
          "1188:                       const bool print_v2) {",
          "1190:   const T* array = reinterpret_cast<const T*>(data);",
          "",
          "[Added Lines]",
          "1187: string SummarizeArrayInternal(int64_t limit, int64_t num_elts,",
          "1188:                               const TensorShape& tensor_shape, const T* array,",
          "1189:                               const bool print_v2) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1212:   return ret;",
          "1213: }",
          "1214: }  // namespace",
          "1216: string Tensor::SummarizeValue(int64_t max_entries, bool print_v2) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: template <typename T>",
          "1215: string SummarizeArray(int64_t limit, int64_t num_elts,",
          "1216:                       const TensorShape& tensor_shape, const char* data,",
          "1217:                       const bool print_v2) {",
          "1218:   const T* array = reinterpret_cast<const T*>(data);",
          "1219:   return SummarizeArrayInternal<T>(limit, num_elts, tensor_shape, array,",
          "1220:                                    print_v2);",
          "1221: }",
          "1223: template <>",
          "1224: string SummarizeArray<bool>(int64_t limit, int64_t num_elts,",
          "1225:                             const TensorShape& tensor_shape, const char* data,",
          "1226:                             const bool print_v2) {",
          "1229:   auto mutable_data = std::unique_ptr<char[]>(new char[num_elts]);",
          "1230:   for (int64_t i = 0; i < num_elts; ++i)",
          "1231:     mutable_data.get()[i] = data[i] ? 1 : 0;",
          "1232:   bool* array = reinterpret_cast<bool*>(mutable_data.get());",
          "1233:   return SummarizeArrayInternal<bool>(limit, num_elts, tensor_shape, array,",
          "1234:                                       print_v2);",
          "1235: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}