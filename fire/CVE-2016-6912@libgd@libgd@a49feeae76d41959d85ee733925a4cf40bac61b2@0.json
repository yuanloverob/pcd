{
  "cve_id": "CVE-2016-6912",
  "cve_desc": "Double free vulnerability in the gdImageWebPtr function in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to have unspecified impact via large width and height values.",
  "repo": "libgd/libgd",
  "patch_hash": "a49feeae76d41959d85ee733925a4cf40bac61b2",
  "patch_info": {
    "commit_hash": "a49feeae76d41959d85ee733925a4cf40bac61b2",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/a49feeae76d41959d85ee733925a4cf40bac61b2",
    "files": [
      "src/gd_webp.c",
      "tests/webp/.gitignore",
      "tests/webp/CMakeLists.txt",
      "tests/webp/Makemodule.am",
      "tests/webp/bug_double_free.c",
      "tests/webp/bug_double_free.jpg"
    ],
    "message": "Fix double-free in gdImageWebPtr()\n\nThe issue is that gdImageWebpCtx() (which is called by gdImageWebpPtr() and\nthe other WebP output functions to do the real work) does not return whether\nit succeeded or failed, so this is not checked in gdImageWebpPtr() and the\nfunction wrongly assumes everything is okay, which is not, in this case,\nbecause there is a size limitation for WebP, namely that the width and\nheight must by less than 16383.\n\nWe can't change the signature of gdImageWebpCtx() for API compatibility\nreasons, so we introduce the static helper _gdImageWebpCtx() which returns\nsuccess respective failure, so gdImageWebpPtr() and gdImageWebpPtrEx() can\ncheck the return value. We leave it solely to libwebp for now to report\nwarnings regarding the failing write.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org.\n\nCVE-2016-6912",
    "before_after_code_files": [
      "src/gd_webp.c||src/gd_webp.c",
      "tests/webp/Makemodule.am||tests/webp/Makemodule.am",
      "tests/webp/bug_double_free.c||tests/webp/bug_double_free.c"
    ]
  },
  "patch_diff": {
    "src/gd_webp.c||src/gd_webp.c": [
      "File: src/gd_webp.c -> src/gd_webp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:  return im;",
      "163: }",
      "182: {",
      "183:  uint8_t *argb;",
      "184:  int x, y;",
      "185:  uint8_t *p;",
      "186:  uint8_t *out;",
      "187:  size_t out_size;",
      "189:  if (im == NULL) {",
      "191:  }",
      "193:  if (!gdImageTrueColor(im)) {",
      "196:  }",
      "198:  if (quality == -1) {",
      "",
      "[Removed Lines]",
      "166:   Function: gdImageWebpCtx",
      "168:     Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>",
      "169:     for more details.",
      "171:   Parameters:",
      "173:     im      - The image to write.",
      "174:     outfile - The output sink.",
      "175:     quality - Image quality.",
      "177:   Returns:",
      "179:     Nothing.",
      "181: BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
      "190:   return;",
      "194:   gd_error(\"Paletter image not supported by webp\");",
      "195:   return;",
      "",
      "[Added Lines]",
      "167: static int _gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
      "174:     int ret = 0;",
      "177:   return 1;",
      "181:   gd_error(\"Palette image not supported by webp\");",
      "182:   return 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "200:  }",
      "202:  if (overflow2(gdImageSX(im), 4)) {",
      "204:  }",
      "206:  if (overflow2(gdImageSX(im) * 4, gdImageSY(im))) {",
      "208:  }",
      "210:  argb = (uint8_t *)gdMalloc(gdImageSX(im) * 4 * gdImageSY(im));",
      "211:  if (!argb) {",
      "213:  }",
      "214:  p = argb;",
      "215:  for (y = 0; y < gdImageSY(im); y++) {",
      "",
      "[Removed Lines]",
      "203:   return;",
      "207:   return;",
      "212:   return;",
      "",
      "[Added Lines]",
      "190:   return 1;",
      "194:   return 1;",
      "199:   return 1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "232:  out_size = WebPEncodeRGBA(argb, gdImageSX(im), gdImageSY(im), gdImageSX(im) * 4, quality, &out);",
      "233:  if (out_size == 0) {",
      "234:   gd_error(\"gd-webp encoding failed\");",
      "235:   goto freeargb;",
      "236:  }",
      "237:  gdPutBuf(out, out_size, outfile);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:         ret = 1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "240: freeargb:",
      "241:  gdFree(argb);",
      "242: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "231:     return ret;",
      "232: }",
      "236:   Function: gdImageWebpCtx",
      "238:     Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>",
      "239:     for more details.",
      "241:   Parameters:",
      "243:     im      - The image to write.",
      "244:     outfile - The output sink.",
      "245:     quality - Image quality.",
      "247:   Returns:",
      "249:     Nothing.",
      "251: BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
      "252: {",
      "253:  _gdImageWebpCtx(im, outfile, quality);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "278:  if (out == NULL) {",
      "279:   return;",
      "280:  }",
      "282:  out->gd_free(out);",
      "283: }",
      "",
      "[Removed Lines]",
      "281:  gdImageWebpCtx(im, out, quality);",
      "",
      "[Added Lines]",
      "293:  _gdImageWebpCtx(im, out, quality);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "302:  if (out == NULL) {",
      "303:   return;",
      "304:  }",
      "306:  out->gd_free(out);",
      "307: }",
      "",
      "[Removed Lines]",
      "305:  gdImageWebpCtx(im, out, -1);",
      "",
      "[Added Lines]",
      "317:  _gdImageWebpCtx(im, out, -1);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "318:  if (out == NULL) {",
      "319:   return NULL;",
      "320:  }",
      "323:  out->gd_free(out);",
      "325:  return rv;",
      "",
      "[Removed Lines]",
      "321:  gdImageWebpCtx(im, out, -1);",
      "322:  rv = gdDPExtractData(out, size);",
      "",
      "[Added Lines]",
      "333:  if (_gdImageWebpCtx(im, out, -1)) {",
      "334:   rv = NULL;",
      "335:  } else {",
      "336:   rv = gdDPExtractData(out, size);",
      "337:  }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "337:  if (out == NULL) {",
      "338:   return NULL;",
      "339:  }",
      "342:  out->gd_free(out);",
      "343:  return rv;",
      "344: }",
      "",
      "[Removed Lines]",
      "340:  gdImageWebpCtx(im, out, quality);",
      "341:  rv = gdDPExtractData(out, size);",
      "",
      "[Added Lines]",
      "355:  if (_gdImageWebpCtx(im, out, quality)) {",
      "356:         rv = NULL;",
      "357:     } else {",
      "358:         rv = gdDPExtractData(out, size);",
      "359:     }",
      "",
      "---------------"
    ],
    "tests/webp/Makemodule.am||tests/webp/Makemodule.am": [
      "File: tests/webp/Makemodule.am -> tests/webp/Makemodule.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: if HAVE_LIBWEBP",
      "2: libgd_test_programs += \\",
      "4: endif",
      "6: EXTRA_DIST += \\",
      "",
      "[Removed Lines]",
      "3:  webp/bug00111",
      "7:  webp/CMakeLists.txt",
      "",
      "[Added Lines]",
      "3:  webp/bug00111 \\",
      "4:  webp/bug_double_free",
      "8:  webp/CMakeLists.txt \\",
      "9:  webp/bug_double_free.jpg",
      "",
      "---------------"
    ],
    "tests/webp/bug_double_free.c||tests/webp/bug_double_free.c": [
      "File: tests/webp/bug_double_free.c -> tests/webp/bug_double_free.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #include \"gd.h\"",
      "8: #include \"gdtest.h\"",
      "11: int main()",
      "12: {",
      "13:     gdImagePtr im1, im2;",
      "14:     FILE *fp;",
      "15:     int size;",
      "17:     fp = gdTestFileOpen2(\"webp\", \"bug_double_free.jpg\");",
      "18:     gdTestAssert(fp != NULL);",
      "19:     im1 = gdImageCreateFromJpeg(fp);",
      "20:     gdTestAssert(im1 != NULL);",
      "21:     fclose(fp);",
      "23:     im2 = gdImageWebpPtr(im1, &size);",
      "24:     gdTestAssert(im2 == NULL);",
      "26:     gdImageDestroy(im1);",
      "28:     return gdNumFailures();",
      "29: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ca64fcb9168b47312fb15bc8060ec63529d0be3",
      "candidate_info": {
        "commit_hash": "0ca64fcb9168b47312fb15bc8060ec63529d0be3",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/0ca64fcb9168b47312fb15bc8060ec63529d0be3",
        "files": [
          "src/gd_webp.c",
          "tests/webp/.gitignore",
          "tests/webp/CMakeLists.txt",
          "tests/webp/Makemodule.am",
          "tests/webp/bug_double_free.c",
          "tests/webp/bug_double_free.jpg"
        ],
        "message": "Fix double-free in gdImageWebPtr()\n\nThe issue is that gdImageWebpCtx() (which is called by gdImageWebpPtr() and\nthe other WebP output functions to do the real work) does not return whether\nit succeeded or failed, so this is not checked in gdImageWebpPtr() and the\nfunction wrongly assumes everything is okay, which is not, in this case,\nbecause there is a size limitation for WebP, namely that the width and\nheight must by less than 16383.\n\nWe can't change the signature of gdImageWebpCtx() for API compatibility\nreasons, so we introduce the static helper _gdImageWebpCtx() which returns\nsuccess respective failure, so gdImageWebpPtr() and gdImageWebpPtrEx() can\ncheck the return value. We leave it solely to libwebp for now to report\nwarnings regarding the failing write.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org.\n\nCVE-2016-6912",
        "before_after_code_files": [
          "src/gd_webp.c||src/gd_webp.c",
          "tests/webp/Makemodule.am||tests/webp/Makemodule.am",
          "tests/webp/bug_double_free.c||tests/webp/bug_double_free.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_webp.c||src/gd_webp.c",
            "tests/webp/Makemodule.am||tests/webp/Makemodule.am",
            "tests/webp/bug_double_free.c||tests/webp/bug_double_free.c"
          ],
          "candidate": [
            "src/gd_webp.c||src/gd_webp.c",
            "tests/webp/Makemodule.am||tests/webp/Makemodule.am",
            "tests/webp/bug_double_free.c||tests/webp/bug_double_free.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_webp.c||src/gd_webp.c": [
          "File: src/gd_webp.c -> src/gd_webp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:  return im;",
          "163: }",
          "182: {",
          "183:  uint8_t *argb;",
          "184:  int x, y;",
          "185:  uint8_t *p;",
          "186:  uint8_t *out;",
          "187:  size_t out_size;",
          "189:  if (im == NULL) {",
          "191:  }",
          "193:  if (!gdImageTrueColor(im)) {",
          "196:  }",
          "198:  if (quality == -1) {",
          "",
          "[Removed Lines]",
          "166:   Function: gdImageWebpCtx",
          "168:     Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>",
          "169:     for more details.",
          "171:   Parameters:",
          "173:     im      - The image to write.",
          "174:     outfile - The output sink.",
          "175:     quality - Image quality.",
          "177:   Returns:",
          "179:     Nothing.",
          "181: BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
          "190:   return;",
          "194:   gd_error(\"Paletter image not supported by webp\");",
          "195:   return;",
          "",
          "[Added Lines]",
          "167: static int _gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
          "174:     int ret = 0;",
          "177:   return 1;",
          "181:   gd_error(\"Palette image not supported by webp\");",
          "182:   return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:  }",
          "202:  if (overflow2(gdImageSX(im), 4)) {",
          "204:  }",
          "206:  if (overflow2(gdImageSX(im) * 4, gdImageSY(im))) {",
          "208:  }",
          "210:  argb = (uint8_t *)gdMalloc(gdImageSX(im) * 4 * gdImageSY(im));",
          "211:  if (!argb) {",
          "213:  }",
          "214:  p = argb;",
          "215:  for (y = 0; y < gdImageSY(im); y++) {",
          "",
          "[Removed Lines]",
          "203:   return;",
          "207:   return;",
          "212:   return;",
          "",
          "[Added Lines]",
          "190:   return 1;",
          "194:   return 1;",
          "199:   return 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:  out_size = WebPEncodeRGBA(argb, gdImageSX(im), gdImageSY(im), gdImageSX(im) * 4, quality, &out);",
          "233:  if (out_size == 0) {",
          "234:   gd_error(\"gd-webp encoding failed\");",
          "235:   goto freeargb;",
          "236:  }",
          "237:  gdPutBuf(out, out_size, outfile);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:         ret = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240: freeargb:",
          "241:  gdFree(argb);",
          "242: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:     return ret;",
          "232: }",
          "236:   Function: gdImageWebpCtx",
          "238:     Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>",
          "239:     for more details.",
          "241:   Parameters:",
          "243:     im      - The image to write.",
          "244:     outfile - The output sink.",
          "245:     quality - Image quality.",
          "247:   Returns:",
          "249:     Nothing.",
          "251: BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
          "252: {",
          "253:  _gdImageWebpCtx(im, outfile, quality);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:  if (out == NULL) {",
          "279:   return;",
          "280:  }",
          "282:  out->gd_free(out);",
          "283: }",
          "",
          "[Removed Lines]",
          "281:  gdImageWebpCtx(im, out, quality);",
          "",
          "[Added Lines]",
          "293:  _gdImageWebpCtx(im, out, quality);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "302:  if (out == NULL) {",
          "303:   return;",
          "304:  }",
          "306:  out->gd_free(out);",
          "307: }",
          "",
          "[Removed Lines]",
          "305:  gdImageWebpCtx(im, out, -1);",
          "",
          "[Added Lines]",
          "317:  _gdImageWebpCtx(im, out, -1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "318:  if (out == NULL) {",
          "319:   return NULL;",
          "320:  }",
          "323:  out->gd_free(out);",
          "325:  return rv;",
          "",
          "[Removed Lines]",
          "321:  gdImageWebpCtx(im, out, -1);",
          "322:  rv = gdDPExtractData(out, size);",
          "",
          "[Added Lines]",
          "333:  if (_gdImageWebpCtx(im, out, -1)) {",
          "334:   rv = NULL;",
          "335:  } else {",
          "336:   rv = gdDPExtractData(out, size);",
          "337:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "337:  if (out == NULL) {",
          "338:   return NULL;",
          "339:  }",
          "342:  out->gd_free(out);",
          "343:  return rv;",
          "344: }",
          "",
          "[Removed Lines]",
          "340:  gdImageWebpCtx(im, out, quality);",
          "341:  rv = gdDPExtractData(out, size);",
          "",
          "[Added Lines]",
          "355:  if (_gdImageWebpCtx(im, out, quality)) {",
          "356:         rv = NULL;",
          "357:     } else {",
          "358:         rv = gdDPExtractData(out, size);",
          "359:     }",
          "",
          "---------------"
        ],
        "tests/webp/Makemodule.am||tests/webp/Makemodule.am": [
          "File: tests/webp/Makemodule.am -> tests/webp/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: if HAVE_LIBWEBP",
          "2: libgd_test_programs += \\",
          "4: endif",
          "6: EXTRA_DIST += \\",
          "",
          "[Removed Lines]",
          "3:  webp/bug00111",
          "7:  webp/CMakeLists.txt",
          "",
          "[Added Lines]",
          "3:  webp/bug00111 \\",
          "4:  webp/bug_double_free",
          "8:  webp/CMakeLists.txt \\",
          "9:  webp/bug_double_free.jpg",
          "",
          "---------------"
        ],
        "tests/webp/bug_double_free.c||tests/webp/bug_double_free.c": [
          "File: tests/webp/bug_double_free.c -> tests/webp/bug_double_free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"gd.h\"",
          "8: #include \"gdtest.h\"",
          "11: int main()",
          "12: {",
          "13:     gdImagePtr im1, im2;",
          "14:     FILE *fp;",
          "15:     int size;",
          "17:     fp = gdTestFileOpen2(\"webp\", \"bug_double_free.jpg\");",
          "18:     gdTestAssert(fp != NULL);",
          "19:     im1 = gdImageCreateFromJpeg(fp);",
          "20:     gdTestAssert(im1 != NULL);",
          "21:     fclose(fp);",
          "23:     im2 = gdImageWebpPtr(im1, &size);",
          "24:     gdTestAssert(im2 == NULL);",
          "26:     gdImageDestroy(im1);",
          "28:     return gdNumFailures();",
          "29: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}