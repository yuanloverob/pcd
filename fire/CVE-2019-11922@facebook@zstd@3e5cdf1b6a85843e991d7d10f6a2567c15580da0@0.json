{
  "cve_id": "CVE-2019-11922",
  "cve_desc": "A race condition in the one-pass compression functions of Zstandard prior to version 1.3.8 could allow an attacker to write bytes out of bounds if an output buffer smaller than the recommended size was used.",
  "repo": "facebook/zstd",
  "patch_hash": "3e5cdf1b6a85843e991d7d10f6a2567c15580da0",
  "patch_info": {
    "commit_hash": "3e5cdf1b6a85843e991d7d10f6a2567c15580da0",
    "repo": "facebook/zstd",
    "commit_url": "https://github.com/facebook/zstd/pull/1404/commits/3e5cdf1b6a85843e991d7d10f6a2567c15580da0",
    "files": [
      "lib/compress/zstd_compress.c",
      "tests/fuzzer.c"
    ],
    "message": "fixed T36302429",
    "before_after_code_files": [
      "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c",
      "tests/fuzzer.c||tests/fuzzer.c"
    ]
  },
  "patch_diff": {
    "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c": [
      "File: lib/compress/zstd_compress.c -> lib/compress/zstd_compress.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2008: {",
      "2009:     BYTE* op = (BYTE*)dst;",
      "2010:     const BYTE* const oend = op + dstCapacity;",
      "2012:     switch (type) {",
      "2013:     case set_rle:",
      "2015:         CHECK_F(FSE_buildCTable_rle(nextCTable, (BYTE)max));",
      "2016:         return 1;",
      "2017:     case set_repeat:",
      "2018:         memcpy(nextCTable, prevCTable, prevCTableSize);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2011:     DEBUGLOG(6, \"ZSTD_buildCTable (dstCapacity=%u)\", (unsigned)dstCapacity);",
      "2016:         if (dstCapacity==0) return ERROR(dstSize_tooSmall);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2054:     FSE_CState_t  stateLitLength;",
      "2059:     FSE_initCState2(&stateMatchLength, CTable_MatchLength, mlCodeTable[nbSeq-1]);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2059:     DEBUGLOG(6, \"available space for bitstream : %i  (dstCapacity=%u)\",",
      "2060:                 (int)(blockStream.endPtr - blockStream.startPtr),",
      "2061:                 (unsigned)dstCapacity);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2114:             }",
      "2116:     }   }",
      "2118:     DEBUGLOG(6, \"ZSTD_encodeSequences: flushing ML state with %u bits\", stateMatchLength.stateLog);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2121:             DEBUGLOG(7, \"remaining space : %i\", (int)(blockStream.endPtr - blockStream.ptr));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2170:             FSE_CTable const* CTable_LitLength, BYTE const* llCodeTable,",
      "2171:             seqDef const* sequences, size_t nbSeq, int longOffsets, int bmi2)",
      "2172: {",
      "2173: #if DYNAMIC_BMI2",
      "2174:     if (bmi2) {",
      "2175:         return ZSTD_encodeSequences_bmi2(dst, dstCapacity,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2179:     DEBUGLOG(5, \"ZSTD_encodeSequences: dstCapacity = %u\", (unsigned)dstCapacity);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2291:     {   U32 max = MaxML;",
      "2294:         nextEntropy->fse.matchlength_repeatMode = prevEntropy->fse.matchlength_repeatMode;",
      "2295:         MLtype = ZSTD_selectEncodingType(&nextEntropy->fse.matchlength_repeatMode, count, max, mostFrequent, nbSeq, MLFSELog, prevEntropy->fse.matchlengthCTable, ML_defaultNorm, ML_defaultNormLog, ZSTD_defaultAllowed, strategy);",
      "",
      "[Removed Lines]",
      "2293:         DEBUGLOG(5, \"Building ML table\");",
      "",
      "[Added Lines]",
      "2300:         DEBUGLOG(5, \"Building ML table (remaining space : %i)\", (int)(oend-op));",
      "",
      "---------------"
    ],
    "tests/fuzzer.c||tests/fuzzer.c": [
      "File: tests/fuzzer.c -> tests/fuzzer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1742:             CHECK(ZSTD_isError(cSize), \"ZSTD_compressCCtx failed : %s\", ZSTD_getErrorName(cSize));",
      "1747:                 const size_t tooSmallSize = cSize - missing;",
      "1748:                 const U32 endMark = 0x4DC2B1A9;",
      "1749:                 memcpy(dstBuffer+tooSmallSize, &endMark, 4);",
      "1750:                 { size_t const errorCode = ZSTD_compressCCtx(ctx, dstBuffer, tooSmallSize, sampleBuffer, sampleSize, cLevel);",
      "1751:                   CHECK(!ZSTD_isError(errorCode), \"ZSTD_compressCCtx should have failed ! (buffer too small : %u < %u)\", (U32)tooSmallSize, (U32)cSize); }",
      "1752:                 { U32 endCheck; memcpy(&endCheck, dstBuffer+tooSmallSize, 4);",
      "1754:         }   }",
      "",
      "[Removed Lines]",
      "1745:             if (cSize > 3) {",
      "1753:                   CHECK(endCheck != endMark, \"ZSTD_compressCCtx : dst buffer overflow\"); }",
      "",
      "[Added Lines]",
      "1745:             assert(cSize > 3);",
      "1746:             {   const size_t missing = (FUZ_rand(&lseed) % (cSize-2)) + 1;",
      "1750:                 DISPLAYLEVEL(5, \"fuzzer t%u: compress into too small buffer of size %u (missing %u bytes) \\n\",",
      "1751:                             testNb, (unsigned)tooSmallSize, (unsigned)missing);",
      "1755:                   CHECK(endCheck != endMark, \"ZSTD_compressCCtx : dst buffer overflow  (check.%08X != %08X.mark)\", endCheck, endMark); }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cafc3b1bcbba548cff44543ff40fdc4f090c6534",
      "candidate_info": {
        "commit_hash": "cafc3b1bcbba548cff44543ff40fdc4f090c6534",
        "repo": "facebook/zstd",
        "commit_url": "https://github.com/facebook/zstd/commit/cafc3b1bcbba548cff44543ff40fdc4f090c6534",
        "files": [
          "lib/compress/zstd_compress.c"
        ],
        "message": "Also Convert zstd_compress.c",
        "before_after_code_files": [
          "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c"
          ],
          "candidate": [
            "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c": [
          "File: lib/compress/zstd_compress.c -> lib/compress/zstd_compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: size_t ZSTD_freeCCtx(ZSTD_CCtx* cctx)",
          "118: {",
          "121:     ZSTD_freeCCtxContent(cctx);",
          "122:     ZSTD_free(cctx, cctx->customMem);",
          "123:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     RETURN_ERROR_IF(cctx->staticSize, memory_allocation,",
          "121:                     \"not compatible with static CCtx\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195: }",
          "197: size_t ZSTD_CCtxParams_init(ZSTD_CCtx_params* cctxParams, int compressionLevel) {",
          "199:     memset(cctxParams, 0, sizeof(*cctxParams));",
          "200:     cctxParams->compressionLevel = compressionLevel;",
          "201:     cctxParams->fParams.contentSizeFlag = 1;",
          "",
          "[Removed Lines]",
          "198:     if (!cctxParams) { return ERROR(GENERIC); }",
          "",
          "[Added Lines]",
          "199:     RETURN_ERROR_IF(!cctxParams, GENERIC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205: size_t ZSTD_CCtxParams_init_advanced(ZSTD_CCtx_params* cctxParams, ZSTD_parameters params)",
          "206: {",
          "209:     memset(cctxParams, 0, sizeof(*cctxParams));",
          "210:     cctxParams->cParams = params.cParams;",
          "211:     cctxParams->fParams = params.fParams;",
          "",
          "[Removed Lines]",
          "207:     if (!cctxParams) { return ERROR(GENERIC); }",
          "208:     CHECK_F( ZSTD_checkCParams(params.cParams) );",
          "",
          "[Added Lines]",
          "208:     RETURN_ERROR_IF(!cctxParams, GENERIC);",
          "209:     FORWARD_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:     return 1;",
          "379: }",
          "387: static int ZSTD_isUpdateAuthorized(ZSTD_cParameter param)",
          "",
          "[Removed Lines]",
          "381: #define BOUNDCHECK(cParam, val) {                  \\",
          "382:     if (!ZSTD_cParam_withinBounds(cParam,val)) {   \\",
          "383:         return ERROR(parameter_outOfBound);        \\",
          "384: }   }",
          "",
          "[Added Lines]",
          "382: #define BOUNDCHECK(cParam, val) { \\",
          "383:     RETURN_ERROR_IF(!ZSTD_cParam_withinBounds(cParam,val), \\",
          "384:                     parameter_outOfBound); \\",
          "385: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425:         if (ZSTD_isUpdateAuthorized(param)) {",
          "426:             cctx->cParamsChanged = 1;",
          "427:         } else {",
          "429:     }   }",
          "431:     switch(param)",
          "",
          "[Removed Lines]",
          "428:             return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "429:             RETURN_ERROR(stage_wrong);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "434:         return ZSTD_CCtxParam_setParameter(&cctx->requestedParams, param, value);",
          "436:     case ZSTD_c_compressionLevel:",
          "438:         return ZSTD_CCtxParam_setParameter(&cctx->requestedParams, param, value);",
          "440:     case ZSTD_c_windowLog:",
          "",
          "[Removed Lines]",
          "437:         if (cctx->cdict) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "438:         RETURN_ERROR_IF(cctx->cdict, stage_wrong,",
          "439:                         \"compression level is configured in cdict\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "444:     case ZSTD_c_minMatch:",
          "445:     case ZSTD_c_targetLength:",
          "446:     case ZSTD_c_strategy:",
          "448:         return ZSTD_CCtxParam_setParameter(&cctx->requestedParams, param, value);",
          "450:     case ZSTD_c_contentSizeFlag:",
          "",
          "[Removed Lines]",
          "447:         if (cctx->cdict) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "449:         RETURN_ERROR_IF(cctx->cdict, stage_wrong,",
          "450:                         \"cparams are configured in cdict\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "461:         return ZSTD_CCtxParam_setParameter(&cctx->requestedParams, param, value);",
          "463:     case ZSTD_c_nbWorkers:",
          "467:         return ZSTD_CCtxParam_setParameter(&cctx->requestedParams, param, value);",
          "469:     case ZSTD_c_jobSize:",
          "",
          "[Removed Lines]",
          "464:         if ((value!=0) && cctx->staticSize) {",
          "466:         }",
          "",
          "[Added Lines]",
          "467:         RETURN_ERROR_IF((value!=0) && cctx->staticSize, parameter_unsupported,",
          "468:                         \"MT not compatible with static alloc\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "476:     case ZSTD_c_ldmMinMatch:",
          "477:     case ZSTD_c_ldmBucketSizeLog:",
          "478:     case ZSTD_c_ldmHashRateLog:",
          "480:         return ZSTD_CCtxParam_setParameter(&cctx->requestedParams, param, value);",
          "483:     }",
          "484: }",
          "",
          "[Removed Lines]",
          "479:         if (cctx->cdict) return ERROR(stage_wrong);",
          "482:     default: return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "481:         RETURN_ERROR_IF(cctx->cdict, stage_wrong);",
          "484:     default: RETURN_ERROR(parameter_unsupported);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "576:     case ZSTD_c_nbWorkers :",
          "577: #ifndef ZSTD_MULTITHREAD",
          "579:         return 0;",
          "580: #else",
          "581:         return ZSTDMT_CCtxParam_setNbWorkers(CCtxParams, value);",
          "",
          "[Removed Lines]",
          "578:         if (value!=0) return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "580:         RETURN_ERROR_IF(value!=0, parameter_unsupported, \"not compiled with multithreading\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "584:     case ZSTD_c_jobSize :",
          "585: #ifndef ZSTD_MULTITHREAD",
          "587: #else",
          "588:         return ZSTDMT_CCtxParam_setMTCtxParameter(CCtxParams, ZSTDMT_p_jobSize, value);",
          "589: #endif",
          "591:     case ZSTD_c_overlapLog :",
          "592: #ifndef ZSTD_MULTITHREAD",
          "594: #else",
          "595:         return ZSTDMT_CCtxParam_setMTCtxParameter(CCtxParams, ZSTDMT_p_overlapLog, value);",
          "596: #endif",
          "598:     case ZSTD_c_rsyncable :",
          "599: #ifndef ZSTD_MULTITHREAD",
          "601: #else",
          "602:         return ZSTDMT_CCtxParam_setMTCtxParameter(CCtxParams, ZSTDMT_p_rsyncable, value);",
          "603: #endif",
          "",
          "[Removed Lines]",
          "586:         return ERROR(parameter_unsupported);",
          "593:         return ERROR(parameter_unsupported);",
          "600:         return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "588:         RETURN_ERROR(parameter_unsupported, \"not compiled with multithreading\");",
          "595:         RETURN_ERROR(parameter_unsupported, \"not compiled with multithreading\");",
          "602:         RETURN_ERROR(parameter_unsupported, \"not compiled with multithreading\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "625:         return CCtxParams->ldmParams.bucketSizeLog;",
          "627:     case ZSTD_c_ldmHashRateLog :",
          "630:         CCtxParams->ldmParams.hashRateLog = value;",
          "631:         return CCtxParams->ldmParams.hashRateLog;",
          "634:     }",
          "635: }",
          "",
          "[Removed Lines]",
          "628:         if (value > ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN)",
          "629:             return ERROR(parameter_outOfBound);",
          "633:     default: return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "630:         RETURN_ERROR_IF(value > ZSTD_WINDOWLOG_MAX - ZSTD_HASHLOG_MIN,",
          "631:                         parameter_outOfBound);",
          "635:     default: RETURN_ERROR(parameter_unsupported, \"unknown parameter\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "694:         break;",
          "695:     case ZSTD_c_jobSize :",
          "696: #ifndef ZSTD_MULTITHREAD",
          "698: #else",
          "699:         assert(CCtxParams->jobSize <= INT_MAX);",
          "",
          "[Removed Lines]",
          "697:         return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "699:         RETURN_ERROR(parameter_unsupported, \"not compiled with multithreading\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "702: #endif",
          "703:     case ZSTD_c_overlapLog :",
          "704: #ifndef ZSTD_MULTITHREAD",
          "706: #else",
          "708:         break;",
          "709: #endif",
          "710:     case ZSTD_c_rsyncable :",
          "711: #ifndef ZSTD_MULTITHREAD",
          "713: #else",
          "715:         break;",
          "",
          "[Removed Lines]",
          "705:         return ERROR(parameter_unsupported);",
          "712:         return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "707:         RETURN_ERROR(parameter_unsupported, \"not compiled with multithreading\");",
          "714:         RETURN_ERROR(parameter_unsupported, \"not compiled with multithreading\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "729:     case ZSTD_c_ldmHashRateLog :",
          "731:         break;",
          "733:     }",
          "734:     return 0;",
          "735: }",
          "",
          "[Removed Lines]",
          "732:     default: return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "734:     default: RETURN_ERROR(parameter_unsupported, \"unknown parameter\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "745:         ZSTD_CCtx* cctx, const ZSTD_CCtx_params* params)",
          "746: {",
          "747:     DEBUGLOG(4, \"ZSTD_CCtx_setParametersUsingCCtxParams\");",
          "751:     cctx->requestedParams = *params;",
          "752:     return 0;",
          "",
          "[Removed Lines]",
          "748:     if (cctx->streamStage != zcss_init) return ERROR(stage_wrong);",
          "749:     if (cctx->cdict) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "750:     RETURN_ERROR_IF(cctx->streamStage != zcss_init, stage_wrong);",
          "751:     RETURN_ERROR_IF(cctx->cdict, stage_wrong);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "755: ZSTDLIB_API size_t ZSTD_CCtx_setPledgedSrcSize(ZSTD_CCtx* cctx, unsigned long long pledgedSrcSize)",
          "756: {",
          "757:     DEBUGLOG(4, \"ZSTD_CCtx_setPledgedSrcSize to %u bytes\", (U32)pledgedSrcSize);",
          "759:     cctx->pledgedSrcSizePlusOne = pledgedSrcSize+1;",
          "760:     return 0;",
          "761: }",
          "",
          "[Removed Lines]",
          "758:     if (cctx->streamStage != zcss_init) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "760:     RETURN_ERROR_IF(cctx->streamStage != zcss_init, stage_wrong);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "764:         ZSTD_CCtx* cctx, const void* dict, size_t dictSize,",
          "765:         ZSTD_dictLoadMethod_e dictLoadMethod, ZSTD_dictContentType_e dictContentType)",
          "766: {",
          "769:     DEBUGLOG(4, \"ZSTD_CCtx_loadDictionary_advanced (size: %u)\", (U32)dictSize);",
          "",
          "[Removed Lines]",
          "767:     if (cctx->streamStage != zcss_init) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "769:     RETURN_ERROR_IF(cctx->streamStage != zcss_init, stage_wrong);",
          "770:     RETURN_ERROR_IF(cctx->staticSize, memory_allocation,",
          "771:                     \"no malloc for static CCtx\");",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "779:                                 dictLoadMethod, dictContentType,",
          "780:                                 cParams, cctx->customMem);",
          "781:         cctx->cdict = cctx->cdictLocal;",
          "784:     }",
          "785:     return 0;",
          "786: }",
          "",
          "[Removed Lines]",
          "782:         if (cctx->cdictLocal == NULL)",
          "783:             return ERROR(memory_allocation);",
          "",
          "[Added Lines]",
          "785:         RETURN_ERROR_IF(cctx->cdictLocal == NULL, memory_allocation);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "802: size_t ZSTD_CCtx_refCDict(ZSTD_CCtx* cctx, const ZSTD_CDict* cdict)",
          "803: {",
          "805:     cctx->cdict = cdict;",
          "807:     return 0;",
          "",
          "[Removed Lines]",
          "804:     if (cctx->streamStage != zcss_init) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "806:     RETURN_ERROR_IF(cctx->streamStage != zcss_init, stage_wrong);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "815: size_t ZSTD_CCtx_refPrefix_advanced(",
          "816:         ZSTD_CCtx* cctx, const void* prefix, size_t prefixSize, ZSTD_dictContentType_e dictContentType)",
          "817: {",
          "820:     cctx->prefixDict.dict = prefix;",
          "821:     cctx->prefixDict.dictSize = prefixSize;",
          "",
          "[Removed Lines]",
          "818:     if (cctx->streamStage != zcss_init) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "820:     RETURN_ERROR_IF(cctx->streamStage != zcss_init, stage_wrong);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "834:     }",
          "835:     if ( (reset == ZSTD_reset_parameters)",
          "836:       || (reset == ZSTD_reset_session_and_parameters) ) {",
          "838:         cctx->cdict = NULL;",
          "839:         return ZSTD_CCtxParams_reset(&cctx->requestedParams);",
          "840:     }",
          "",
          "[Removed Lines]",
          "837:         if (cctx->streamStage != zcss_init) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "839:         RETURN_ERROR_IF(cctx->streamStage != zcss_init, stage_wrong);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "975: size_t ZSTD_estimateCCtxSize_usingCCtxParams(const ZSTD_CCtx_params* params)",
          "976: {",
          "979:     {   ZSTD_compressionParameters const cParams =",
          "980:                 ZSTD_getCParamsFromCCtxParams(params, 0, 0);",
          "981:         size_t const blockSize = MIN(ZSTD_BLOCKSIZE_MAX, (size_t)1 << cParams.windowLog);",
          "",
          "[Removed Lines]",
          "978:     if (params->nbWorkers > 0) { return ERROR(GENERIC); }",
          "",
          "[Added Lines]",
          "979:     RETURN_ERROR_IF(params->nbWorkers > 0, GENERIC, \"Estimate CCtx size is supported for single-threaded compression only.\");",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1024: size_t ZSTD_estimateCStreamSize_usingCCtxParams(const ZSTD_CCtx_params* params)",
          "1025: {",
          "1027:     {   size_t const CCtxSize = ZSTD_estimateCCtxSize_usingCCtxParams(params);",
          "1028:         size_t const blockSize = MIN(ZSTD_BLOCKSIZE_MAX, (size_t)1 << params->cParams.windowLog);",
          "1029:         size_t const inBuffSize = ((size_t)1 << params->cParams.windowLog) + blockSize;",
          "",
          "[Removed Lines]",
          "1026:     if (params->nbWorkers > 0) { return ERROR(GENERIC); }",
          "",
          "[Added Lines]",
          "1027:     RETURN_ERROR_IF(params->nbWorkers > 0, GENERIC, \"Estimate CCtx size is supported for single-threaded compression only.\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1368:                 DEBUGLOG(4, \"Need to resize workSpaceSize from %zuKB to %zuKB\",",
          "1369:                             zc->workSpaceSize >> 10,",
          "1370:                             neededSpace >> 10);",
          "1374:                 zc->workSpaceSize = 0;",
          "1375:                 ZSTD_free(zc->workSpace, zc->customMem);",
          "1376:                 zc->workSpace = ZSTD_malloc(neededSpace, zc->customMem);",
          "1378:                 zc->workSpaceSize = neededSpace;",
          "1379:                 zc->workSpaceOversizedDuration = 0;",
          "",
          "[Removed Lines]",
          "1372:                 if (zc->staticSize) return ERROR(memory_allocation);",
          "1377:                 if (zc->workSpace == NULL) return ERROR(memory_allocation);",
          "",
          "[Added Lines]",
          "1373:                 RETURN_ERROR_IF(zc->staticSize, memory_allocation, \"static cctx : no resize\");",
          "1378:                 RETURN_ERROR_IF(zc->workSpace == NULL, memory_allocation);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1645:                             ZSTD_buffered_policy_e zbuff)",
          "1646: {",
          "1647:     DEBUGLOG(5, \"ZSTD_copyCCtx_internal\");",
          "1650:     memcpy(&dstCCtx->customMem, &srcCCtx->customMem, sizeof(ZSTD_customMem));",
          "1651:     {   ZSTD_CCtx_params params = dstCCtx->requestedParams;",
          "",
          "[Removed Lines]",
          "1648:     if (srcCCtx->stage!=ZSTDcs_init) return ERROR(stage_wrong);",
          "",
          "[Added Lines]",
          "1649:     RETURN_ERROR_IF(srcCCtx->stage!=ZSTDcs_init, stage_wrong);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1778: static size_t ZSTD_noCompressBlock (void* dst, size_t dstCapacity, const void* src, size_t srcSize, U32 lastBlock)",
          "1779: {",
          "1780:     U32 const cBlockHeader24 = lastBlock + (((U32)bt_raw)<<1) + (U32)(srcSize << 3);",
          "1782:     MEM_writeLE24(dst, cBlockHeader24);",
          "1783:     memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);",
          "1784:     return ZSTD_blockHeaderSize + srcSize;",
          "",
          "[Removed Lines]",
          "1781:     if (srcSize + ZSTD_blockHeaderSize > dstCapacity) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "1782:     RETURN_ERROR_IF(srcSize + ZSTD_blockHeaderSize > dstCapacity,",
          "1783:                     dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1789:     BYTE* const ostart = (BYTE* const)dst;",
          "1790:     U32   const flSize = 1 + (srcSize>31) + (srcSize>4095);",
          "1794:     switch(flSize)",
          "1795:     {",
          "",
          "[Removed Lines]",
          "1792:     if (srcSize + flSize > dstCapacity) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "1794:     RETURN_ERROR_IF(srcSize + flSize > dstCapacity, dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1879:         if (srcSize <= minLitSize) return ZSTD_noCompressLiterals(dst, dstCapacity, src, srcSize);",
          "1880:     }",
          "1883:     {   HUF_repeat repeat = prevHuf->repeatMode;",
          "1884:         int const preferRepeat = strategy < ZSTD_lazy ? srcSize <= 1024 : 0;",
          "1885:         if (repeat == HUF_repeat_valid && lhSize == 3) singleStream = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1884:     RETURN_ERROR_IF(dstCapacity < lhSize+1, dstSize_tooSmall, \"not enough space for compression\");",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2051:     unsigned s;",
          "2052:     FSE_CState_t cstate;",
          "2053:     FSE_initCState(&cstate, ctable);",
          "2056:                     ZSTD_getFSEMaxSymbolValue(ctable), max);",
          "2059:     for (s = 0; s <= max; ++s) {",
          "2060:         unsigned const tableLog = cstate.stateLog;",
          "2061:         unsigned const badCost = (tableLog + 1) << kAccuracyLog;",
          "2062:         unsigned const bitCost = FSE_bitCost(cstate.symbolTT, tableLog, s, kAccuracyLog);",
          "2063:         if (count[s] == 0)",
          "2064:             continue;",
          "2069:         cost += count[s] * bitCost;",
          "2070:     }",
          "2071:     return cost >> kAccuracyLog;",
          "",
          "[Removed Lines]",
          "2054:     if (ZSTD_getFSEMaxSymbolValue(ctable) < max) {",
          "2055:         DEBUGLOG(5, \"Repeat FSE_CTable has maxSymbolValue %u < %u\",",
          "2057:         return ERROR(GENERIC);",
          "2058:     }",
          "2065:         if (bitCost >= badCost) {",
          "2066:             DEBUGLOG(5, \"Repeat FSE_CTable has Prob[%u] == 0\", s);",
          "2067:             return ERROR(GENERIC);",
          "2068:         }",
          "",
          "[Added Lines]",
          "2056:     RETURN_ERROR_IF(ZSTD_getFSEMaxSymbolValue(ctable) < max, GENERIC,",
          "2057:                     \"Repeat FSE_CTable has maxSymbolValue %u < %u\",",
          "2065:         RETURN_ERROR_IF(bitCost >= badCost, GENERIC,",
          "2066:                         \"Repeat FSE_CTable has Prob[%u] == 0\", s);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2081:     BYTE wksp[FSE_NCOUNTBOUND];",
          "2082:     S16 norm[MaxSeq + 1];",
          "2083:     const U32 tableLog = FSE_optimalTableLog(FSELog, nbSeq, max);",
          "2085:     return FSE_writeNCount(wksp, sizeof(wksp), norm, max, tableLog);",
          "2086: }",
          "",
          "[Removed Lines]",
          "2084:     CHECK_F(FSE_normalizeCount(norm, tableLog, count, nbSeq, max));",
          "",
          "[Added Lines]",
          "2082:     FORWARD_ERROR(FSE_normalizeCount(norm, tableLog, count, nbSeq, max));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2188:     switch (type) {",
          "2189:     case set_rle:",
          "2193:         return 1;",
          "2194:     case set_repeat:",
          "2195:         memcpy(nextCTable, prevCTable, prevCTableSize);",
          "2196:         return 0;",
          "2197:     case set_basic:",
          "2199:         return 0;",
          "2200:     case set_compressed: {",
          "2201:         S16 norm[MaxSeq + 1];",
          "",
          "[Removed Lines]",
          "2190:         CHECK_F(FSE_buildCTable_rle(nextCTable, (BYTE)max));",
          "2191:         if (dstCapacity==0) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "2188:         FORWARD_ERROR(FSE_buildCTable_rle(nextCTable, (BYTE)max));",
          "2189:         RETURN_ERROR_IF(dstCapacity==0, dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2206:             nbSeq_1--;",
          "2207:         }",
          "2208:         assert(nbSeq_1 > 1);",
          "2213:             return NCountSize;",
          "2214:         }",
          "2215:     }",
          "2217:     }",
          "2218: }",
          "",
          "[Removed Lines]",
          "2209:         CHECK_F(FSE_normalizeCount(norm, tableLog, count, nbSeq_1, max));",
          "2211:             if (FSE_isError(NCountSize)) return NCountSize;",
          "2212:             CHECK_F(FSE_buildCTable_wksp(nextCTable, norm, max, tableLog, workspace, workspaceSize));",
          "2216:     default: return assert(0), ERROR(GENERIC);",
          "",
          "[Added Lines]",
          "2207:         FORWARD_ERROR(FSE_normalizeCount(norm, tableLog, count, nbSeq_1, max));",
          "2209:             FORWARD_ERROR(NCountSize);",
          "2210:             FORWARD_ERROR(FSE_buildCTable_wksp(nextCTable, norm, max, tableLog, workspace, workspaceSize));",
          "2214:     default: assert(0); RETURN_ERROR(GENERIC);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2304:     FSE_flushCState(&blockStream, &stateLitLength);",
          "2306:     {   size_t const streamSize = BIT_closeCStream(&blockStream);",
          "2308:         return streamSize;",
          "2309:     }",
          "2310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2305:         RETURN_ERROR_IF(streamSize==0, dstSize_tooSmall, \"not enough space\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2412:                                     literals, litSize,",
          "2413:                                     workspace, wkspSize,",
          "2414:                                     bmi2);",
          "2417:         assert(cSize <= dstCapacity);",
          "2418:         op += cSize;",
          "2419:     }",
          "2423:     if (nbSeq < 0x7F)",
          "2425:     else if (nbSeq < LONGNBSEQ)",
          "",
          "[Removed Lines]",
          "2415:         if (ZSTD_isError(cSize))",
          "2416:           return cSize;",
          "2422:     if ((oend-op) < 3 /*max nbSeq Size*/ + 1 /*seqHead*/) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "2413:         FORWARD_ERROR(cSize);",
          "2419:     RETURN_ERROR_IF((oend-op) < 3 /*max nbSeq Size*/ + 1 /*seqHead*/,",
          "2420:                     dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2453:                                                     count, max, llCodeTable, nbSeq, LL_defaultNorm, LL_defaultNormLog, MaxLL,",
          "2454:                                                     prevEntropy->fse.litlengthCTable, sizeof(prevEntropy->fse.litlengthCTable),",
          "2455:                                                     workspace, wkspSize);",
          "2457:             if (LLtype == set_compressed)",
          "2458:                 lastNCount = op;",
          "2459:             op += countSize;",
          "",
          "[Removed Lines]",
          "2456:             if (ZSTD_isError(countSize)) return countSize;",
          "",
          "[Added Lines]",
          "2454:             FORWARD_ERROR(countSize);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2475:                                                     count, max, ofCodeTable, nbSeq, OF_defaultNorm, OF_defaultNormLog, DefaultMaxOff,",
          "2476:                                                     prevEntropy->fse.offcodeCTable, sizeof(prevEntropy->fse.offcodeCTable),",
          "2477:                                                     workspace, wkspSize);",
          "2479:             if (Offtype == set_compressed)",
          "2480:                 lastNCount = op;",
          "2481:             op += countSize;",
          "",
          "[Removed Lines]",
          "2478:             if (ZSTD_isError(countSize)) return countSize;",
          "",
          "[Added Lines]",
          "2476:             FORWARD_ERROR(countSize);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2495:                                                     count, max, mlCodeTable, nbSeq, ML_defaultNorm, ML_defaultNormLog, MaxML,",
          "2496:                                                     prevEntropy->fse.matchlengthCTable, sizeof(prevEntropy->fse.matchlengthCTable),",
          "2497:                                                     workspace, wkspSize);",
          "2499:             if (MLtype == set_compressed)",
          "2500:                 lastNCount = op;",
          "2501:             op += countSize;",
          "",
          "[Removed Lines]",
          "2498:             if (ZSTD_isError(countSize)) return countSize;",
          "",
          "[Added Lines]",
          "2496:             FORWARD_ERROR(countSize);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2510:                                         CTable_LitLength, llCodeTable,",
          "2511:                                         sequences, nbSeq,",
          "2512:                                         longOffsets, bmi2);",
          "2514:         op += bitstreamSize;",
          "",
          "[Removed Lines]",
          "2513:         if (ZSTD_isError(bitstreamSize)) return bitstreamSize;",
          "",
          "[Added Lines]",
          "2511:         FORWARD_ERROR(bitstreamSize);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2554:     if ((cSize == ERROR(dstSize_tooSmall)) & (srcSize <= dstCapacity))",
          "2559:     {   size_t const maxCSize = srcSize - ZSTD_minGain(srcSize, cctxParams->cParams.strategy);",
          "",
          "[Removed Lines]",
          "2556:     if (ZSTD_isError(cSize)) return cSize;",
          "",
          "[Added Lines]",
          "2554:     FORWARD_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2680:             ldmSeqStore.seq = zc->ldmSequences;",
          "2681:             ldmSeqStore.capacity = zc->maxNbLdmSequences;",
          "2684:                                                &zc->appliedParams.ldmParams,",
          "2685:                                                src, srcSize));",
          "",
          "[Removed Lines]",
          "2683:             CHECK_F(ZSTD_ldm_generateSequences(&zc->ldmState, &ldmSeqStore,",
          "",
          "[Added Lines]",
          "2681:             FORWARD_ERROR(ZSTD_ldm_generateSequences(&zc->ldmState, &ldmSeqStore,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2753:         ZSTD_matchState_t* const ms = &cctx->blockState.matchState;",
          "2754:         U32 const lastBlock = lastFrameChunk & (blockSize >= remaining);",
          "2758:         if (remaining < blockSize) blockSize = remaining;",
          "2760:         if (ZSTD_window_needOverflowCorrection(ms->window, ip + blockSize)) {",
          "",
          "[Removed Lines]",
          "2756:         if (dstCapacity < ZSTD_blockHeaderSize + MIN_CBLOCK_SIZE)",
          "",
          "[Added Lines]",
          "2754:         RETURN_ERROR_IF(dstCapacity < ZSTD_blockHeaderSize + MIN_CBLOCK_SIZE,",
          "2755:                         dstSize_tooSmall,",
          "2756:                         \"not enough space to store compressed block\");",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2775:         {   size_t cSize = ZSTD_compressBlock_internal(cctx,",
          "2776:                                 op+ZSTD_blockHeaderSize, dstCapacity-ZSTD_blockHeaderSize,",
          "2777:                                 ip, blockSize);",
          "2781:                 cSize = ZSTD_noCompressBlock(op, dstCapacity, ip, blockSize, lastBlock);",
          "2783:             } else {",
          "2784:                 U32 const cBlockHeader24 = lastBlock + (((U32)bt_compressed)<<1) + (U32)(cSize << 3);",
          "2785:                 MEM_writeLE24(op, cBlockHeader24);",
          "",
          "[Removed Lines]",
          "2778:             if (ZSTD_isError(cSize)) return cSize;",
          "2782:                 if (ZSTD_isError(cSize)) return cSize;",
          "",
          "[Added Lines]",
          "2777:             FORWARD_ERROR(cSize);",
          "2781:                 FORWARD_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2816:     size_t pos=0;",
          "2818:     assert(!(params.fParams.contentSizeFlag && pledgedSrcSize == ZSTD_CONTENTSIZE_UNKNOWN));",
          "2820:     DEBUGLOG(4, \"ZSTD_writeFrameHeader : dictIDFlag : %u ; dictID : %u ; dictIDSizeCode : %u\",",
          "2821:                 !params.fParams.noDictIDFlag, (unsigned)dictID, (unsigned)dictIDSizeCode);",
          "",
          "[Removed Lines]",
          "2819:     if (dstCapacity < ZSTD_FRAMEHEADERSIZE_MAX) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "2818:     RETURN_ERROR_IF(dstCapacity < ZSTD_FRAMEHEADERSIZE_MAX, dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2853: size_t ZSTD_writeLastEmptyBlock(void* dst, size_t dstCapacity)",
          "2854: {",
          "2857:         MEM_writeLE24(dst, cBlockHeader24);",
          "2858:         return ZSTD_blockHeaderSize;",
          "",
          "[Removed Lines]",
          "2855:     if (dstCapacity < ZSTD_blockHeaderSize) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "2854:     RETURN_ERROR_IF(dstCapacity < ZSTD_blockHeaderSize, dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2862: size_t ZSTD_referenceExternalSequences(ZSTD_CCtx* cctx, rawSeq* seq, size_t nbSeq)",
          "2863: {",
          "2868:     cctx->externSeqStore.seq = seq;",
          "2869:     cctx->externSeqStore.size = nbSeq;",
          "2870:     cctx->externSeqStore.capacity = nbSeq;",
          "",
          "[Removed Lines]",
          "2864:     if (cctx->stage != ZSTDcs_init)",
          "2865:         return ERROR(stage_wrong);",
          "2866:     if (cctx->appliedParams.ldmParams.enableLdm)",
          "2867:         return ERROR(parameter_unsupported);",
          "",
          "[Added Lines]",
          "2863:     RETURN_ERROR_IF(cctx->stage != ZSTDcs_init, stage_wrong);",
          "2864:     RETURN_ERROR_IF(cctx->appliedParams.ldmParams.enableLdm,",
          "2865:                     parameter_unsupported);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2884:     DEBUGLOG(5, \"ZSTD_compressContinue_internal, stage: %u, srcSize: %u\",",
          "2885:                 cctx->stage, (unsigned)srcSize);",
          "2888:     if (frame && (cctx->stage==ZSTDcs_init)) {",
          "2889:         fhSize = ZSTD_writeFrameHeader(dst, dstCapacity, cctx->appliedParams,",
          "2890:                                        cctx->pledgedSrcSizePlusOne-1, cctx->dictID);",
          "2892:         dstCapacity -= fhSize;",
          "2893:         dst = (char*)dst + fhSize;",
          "2894:         cctx->stage = ZSTDcs_ongoing;",
          "",
          "[Removed Lines]",
          "2891:         if (ZSTD_isError(fhSize)) return fhSize;",
          "",
          "[Added Lines]",
          "2884:     RETURN_ERROR_IF(cctx->stage==ZSTDcs_created, stage_wrong,",
          "2885:                     \"missing init (ZSTD_compressBegin)\");",
          "2890:         FORWARD_ERROR(fhSize);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2923:     {   size_t const cSize = frame ?",
          "2924:                              ZSTD_compress_frameChunk (cctx, dst, dstCapacity, src, srcSize, lastFrameChunk) :",
          "2925:                              ZSTD_compressBlock_internal (cctx, dst, dstCapacity, src, srcSize);",
          "2927:         cctx->consumedSrcSize += srcSize;",
          "2928:         cctx->producedCSize += (cSize + fhSize);",
          "2929:         assert(!(cctx->appliedParams.fParams.contentSizeFlag && cctx->pledgedSrcSizePlusOne == 0));",
          "2931:             ZSTD_STATIC_ASSERT(ZSTD_CONTENTSIZE_UNKNOWN == (unsigned long long)-1);",
          "2937:         }",
          "2938:         return cSize + fhSize;",
          "2939:     }",
          "",
          "[Removed Lines]",
          "2926:         if (ZSTD_isError(cSize)) return cSize;",
          "2932:             if (cctx->consumedSrcSize+1 > cctx->pledgedSrcSizePlusOne) {",
          "2933:                 DEBUGLOG(4, \"error : pledgedSrcSize = %u, while realSrcSize >= %u\",",
          "2934:                     (unsigned)cctx->pledgedSrcSizePlusOne-1, (unsigned)cctx->consumedSrcSize);",
          "2935:                 return ERROR(srcSize_wrong);",
          "2936:             }",
          "",
          "[Added Lines]",
          "2925:         FORWARD_ERROR(cSize);",
          "2931:             RETURN_ERROR_IF(",
          "2932:                 cctx->consumedSrcSize+1 > cctx->pledgedSrcSizePlusOne,",
          "2933:                 srcSize_wrong,",
          "2934:                 \"error : pledgedSrcSize = %u, while realSrcSize >= %u\",",
          "2935:                 (unsigned)cctx->pledgedSrcSizePlusOne-1,",
          "2936:                 (unsigned)cctx->consumedSrcSize);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2958: size_t ZSTD_compressBlock(ZSTD_CCtx* cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)",
          "2959: {",
          "2960:     size_t const blockSizeMax = ZSTD_getBlockSize(cctx);",
          "2963:     return ZSTD_compressContinue_internal(cctx, dst, dstCapacity, src, srcSize, 0 /* frame mode */, 0 /* last chunk */);",
          "2964: }",
          "",
          "[Removed Lines]",
          "2961:     if (srcSize > blockSizeMax) return ERROR(srcSize_wrong);",
          "",
          "[Added Lines]",
          "2961:     RETURN_ERROR_IF(srcSize > blockSizeMax, srcSize_wrong);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3022: static size_t ZSTD_checkDictNCount(short* normalizedCounter, unsigned dictMaxSymbolValue, unsigned maxSymbolValue) {",
          "3023:     U32 s;",
          "3025:     for (s = 0; s <= maxSymbolValue; ++s) {",
          "3027:     }",
          "3028:     return 0;",
          "3029: }",
          "",
          "[Removed Lines]",
          "3024:     if (dictMaxSymbolValue < maxSymbolValue) return ERROR(dictionary_corrupted);",
          "3026:         if (normalizedCounter[s] == 0) return ERROR(dictionary_corrupted);",
          "",
          "[Added Lines]",
          "3024:     RETURN_ERROR_IF(dictMaxSymbolValue < maxSymbolValue, dictionary_corrupted);",
          "3026:         RETURN_ERROR_IF(normalizedCounter[s] == 0, dictionary_corrupted);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3062:     {   unsigned maxSymbolValue = 255;",
          "3063:         size_t const hufHeaderSize = HUF_readCTable((HUF_CElt*)bs->entropy.huf.CTable, &maxSymbolValue, dictPtr, dictEnd-dictPtr);",
          "3066:         dictPtr += hufHeaderSize;",
          "3067:     }",
          "3069:     {   unsigned offcodeLog;",
          "3070:         size_t const offcodeHeaderSize = FSE_readNCount(offcodeNCount, &offcodeMaxValue, &offcodeLog, dictPtr, dictEnd-dictPtr);",
          "3075:         CHECK_E( FSE_buildCTable_wksp(bs->entropy.fse.offcodeCTable,",
          "",
          "[Removed Lines]",
          "3064:         if (HUF_isError(hufHeaderSize)) return ERROR(dictionary_corrupted);",
          "3065:         if (maxSymbolValue < 255) return ERROR(dictionary_corrupted);",
          "3071:         if (FSE_isError(offcodeHeaderSize)) return ERROR(dictionary_corrupted);",
          "3072:         if (offcodeLog > OffFSELog) return ERROR(dictionary_corrupted);",
          "",
          "[Added Lines]",
          "3064:         RETURN_ERROR_IF(HUF_isError(hufHeaderSize), dictionary_corrupted);",
          "3065:         RETURN_ERROR_IF(maxSymbolValue < 255, dictionary_corrupted);",
          "3071:         RETURN_ERROR_IF(FSE_isError(offcodeHeaderSize), dictionary_corrupted);",
          "3072:         RETURN_ERROR_IF(offcodeLog > OffFSELog, dictionary_corrupted);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3082:     {   short matchlengthNCount[MaxML+1];",
          "3083:         unsigned matchlengthMaxValue = MaxML, matchlengthLog;",
          "3084:         size_t const matchlengthHeaderSize = FSE_readNCount(matchlengthNCount, &matchlengthMaxValue, &matchlengthLog, dictPtr, dictEnd-dictPtr);",
          "3089:         CHECK_E( FSE_buildCTable_wksp(bs->entropy.fse.matchlengthCTable,",
          "3090:                                     matchlengthNCount, matchlengthMaxValue, matchlengthLog,",
          "3091:                                     workspace, HUF_WORKSPACE_SIZE),",
          "",
          "[Removed Lines]",
          "3085:         if (FSE_isError(matchlengthHeaderSize)) return ERROR(dictionary_corrupted);",
          "3086:         if (matchlengthLog > MLFSELog) return ERROR(dictionary_corrupted);",
          "3088:         CHECK_F( ZSTD_checkDictNCount(matchlengthNCount, matchlengthMaxValue, MaxML));",
          "",
          "[Added Lines]",
          "3085:         RETURN_ERROR_IF(FSE_isError(matchlengthHeaderSize), dictionary_corrupted);",
          "3086:         RETURN_ERROR_IF(matchlengthLog > MLFSELog, dictionary_corrupted);",
          "3088:         FORWARD_ERROR( ZSTD_checkDictNCount(matchlengthNCount, matchlengthMaxValue, MaxML));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3096:     {   short litlengthNCount[MaxLL+1];",
          "3097:         unsigned litlengthMaxValue = MaxLL, litlengthLog;",
          "3098:         size_t const litlengthHeaderSize = FSE_readNCount(litlengthNCount, &litlengthMaxValue, &litlengthLog, dictPtr, dictEnd-dictPtr);",
          "3103:         CHECK_E( FSE_buildCTable_wksp(bs->entropy.fse.litlengthCTable,",
          "3104:                                     litlengthNCount, litlengthMaxValue, litlengthLog,",
          "3105:                                     workspace, HUF_WORKSPACE_SIZE),",
          "",
          "[Removed Lines]",
          "3099:         if (FSE_isError(litlengthHeaderSize)) return ERROR(dictionary_corrupted);",
          "3100:         if (litlengthLog > LLFSELog) return ERROR(dictionary_corrupted);",
          "3102:         CHECK_F( ZSTD_checkDictNCount(litlengthNCount, litlengthMaxValue, MaxLL));",
          "",
          "[Added Lines]",
          "3099:         RETURN_ERROR_IF(FSE_isError(litlengthHeaderSize), dictionary_corrupted);",
          "3100:         RETURN_ERROR_IF(litlengthLog > LLFSELog, dictionary_corrupted);",
          "3102:         FORWARD_ERROR( ZSTD_checkDictNCount(litlengthNCount, litlengthMaxValue, MaxLL));",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3107:         dictPtr += litlengthHeaderSize;",
          "3108:     }",
          "3111:     bs->rep[0] = MEM_readLE32(dictPtr+0);",
          "3112:     bs->rep[1] = MEM_readLE32(dictPtr+4);",
          "3113:     bs->rep[2] = MEM_readLE32(dictPtr+8);",
          "",
          "[Removed Lines]",
          "3110:     if (dictPtr+12 > dictEnd) return ERROR(dictionary_corrupted);",
          "",
          "[Added Lines]",
          "3110:     RETURN_ERROR_IF(dictPtr+12 > dictEnd, dictionary_corrupted);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3121:         }",
          "3125:         {   U32 u;",
          "3126:             for (u=0; u<3; u++) {",
          "3129:         }   }",
          "3131:         bs->entropy.huf.repeatMode = HUF_repeat_valid;",
          "3132:         bs->entropy.fse.offcode_repeatMode = FSE_repeat_valid;",
          "3133:         bs->entropy.fse.matchlength_repeatMode = FSE_repeat_valid;",
          "3134:         bs->entropy.fse.litlength_repeatMode = FSE_repeat_valid;",
          "3136:         return dictID;",
          "3137:     }",
          "3138: }",
          "",
          "[Removed Lines]",
          "3123:         CHECK_F (ZSTD_checkDictNCount(offcodeNCount, offcodeMaxValue, MIN(offcodeMax, MaxOff)));",
          "3127:                 if (bs->rep[u] == 0) return ERROR(dictionary_corrupted);",
          "3128:                 if (bs->rep[u] > dictContentSize) return ERROR(dictionary_corrupted);",
          "3135:         CHECK_F(ZSTD_loadDictionaryContent(ms, params, dictPtr, dictContentSize, dtlm));",
          "",
          "[Added Lines]",
          "3123:         FORWARD_ERROR(ZSTD_checkDictNCount(offcodeNCount, offcodeMaxValue, MIN(offcodeMax, MaxOff)));",
          "3127:                 RETURN_ERROR_IF(bs->rep[u] == 0, dictionary_corrupted);",
          "3128:                 RETURN_ERROR_IF(bs->rep[u] > dictContentSize, dictionary_corrupted);",
          "3135:         FORWARD_ERROR(ZSTD_loadDictionaryContent(ms, params, dictPtr, dictContentSize, dtlm));",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3162:             DEBUGLOG(4, \"raw content dictionary detected\");",
          "3163:             return ZSTD_loadDictionaryContent(ms, params, dict, dictSize, dtlm);",
          "3164:         }",
          "3168:     }",
          "",
          "[Removed Lines]",
          "3165:         if (dictContentType == ZSTD_dct_fullDict)",
          "3166:             return ERROR(dictionary_wrong);",
          "",
          "[Added Lines]",
          "3165:         RETURN_ERROR_IF(dictContentType == ZSTD_dct_fullDict, dictionary_wrong);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3190:         return ZSTD_resetCCtx_usingCDict(cctx, cdict, params, pledgedSrcSize, zbuff);",
          "3191:     }",
          "3194:                                      ZSTDcrp_continue, zbuff) );",
          "3195:     {",
          "3196:         size_t const dictID = ZSTD_compress_insertDictionary(",
          "3197:                 cctx->blockState.prevCBlock, &cctx->blockState.matchState,",
          "3198:                 &params, dict, dictSize, dictContentType, dtlm, cctx->entropyWorkspace);",
          "3200:         assert(dictID <= (size_t)(U32)-1);",
          "3201:         cctx->dictID = (U32)dictID;",
          "3202:     }",
          "",
          "[Removed Lines]",
          "3193:     CHECK_F( ZSTD_resetCCtx_internal(cctx, params, pledgedSrcSize,",
          "3199:         if (ZSTD_isError(dictID)) return dictID;",
          "",
          "[Added Lines]",
          "3192:     FORWARD_ERROR( ZSTD_resetCCtx_internal(cctx, params, pledgedSrcSize,",
          "3198:         FORWARD_ERROR(dictID);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3213: {",
          "3214:     DEBUGLOG(4, \"ZSTD_compressBegin_advanced_internal: wlog=%u\", params.cParams.windowLog);",
          "3217:     return ZSTD_compressBegin_internal(cctx,",
          "3218:                                        dict, dictSize, dictContentType, dtlm,",
          "3219:                                        cdict,",
          "",
          "[Removed Lines]",
          "3216:     CHECK_F( ZSTD_checkCParams(params.cParams) );",
          "",
          "[Added Lines]",
          "3215:     FORWARD_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3261:     size_t fhSize = 0;",
          "3263:     DEBUGLOG(4, \"ZSTD_writeEpilogue\");",
          "3267:     if (cctx->stage == ZSTDcs_init) {",
          "3268:         fhSize = ZSTD_writeFrameHeader(dst, dstCapacity, cctx->appliedParams, 0, 0);",
          "3270:         dstCapacity -= fhSize;",
          "3271:         op += fhSize;",
          "3272:         cctx->stage = ZSTDcs_ongoing;",
          "",
          "[Removed Lines]",
          "3269:         if (ZSTD_isError(fhSize)) return fhSize;",
          "",
          "[Added Lines]",
          "3263:     RETURN_ERROR_IF(cctx->stage == ZSTDcs_created, stage_wrong, \"init missing\");",
          "3268:         FORWARD_ERROR(fhSize);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3275:     if (cctx->stage != ZSTDcs_ending) {",
          "3277:         U32 const cBlockHeader24 = 1 /* last block */ + (((U32)bt_raw)<<1) + 0;",
          "3279:         MEM_writeLE32(op, cBlockHeader24);",
          "3280:         op += ZSTD_blockHeaderSize;",
          "3281:         dstCapacity -= ZSTD_blockHeaderSize;",
          "",
          "[Removed Lines]",
          "3278:         if (dstCapacity<4) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "3277:         RETURN_ERROR_IF(dstCapacity<4, dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3284:     if (cctx->appliedParams.fParams.checksumFlag) {",
          "3285:         U32 const checksum = (U32) XXH64_digest(&cctx->xxhState);",
          "3287:         DEBUGLOG(4, \"ZSTD_writeEpilogue: write checksum : %08X\", (unsigned)checksum);",
          "3288:         MEM_writeLE32(op, checksum);",
          "3289:         op += 4;",
          "",
          "[Removed Lines]",
          "3286:         if (dstCapacity<4) return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "3285:         RETURN_ERROR_IF(dstCapacity<4, dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3301:     size_t const cSize = ZSTD_compressContinue_internal(cctx,",
          "3302:                                 dst, dstCapacity, src, srcSize,",
          "3303:                                 1 /* frame mode */, 1 /* last chunk */);",
          "3305:     endResult = ZSTD_writeEpilogue(cctx, (char*)dst + cSize, dstCapacity-cSize);",
          "3307:     assert(!(cctx->appliedParams.fParams.contentSizeFlag && cctx->pledgedSrcSizePlusOne == 0));",
          "3309:         ZSTD_STATIC_ASSERT(ZSTD_CONTENTSIZE_UNKNOWN == (unsigned long long)-1);",
          "3310:         DEBUGLOG(4, \"end of frame : controlling src size\");",
          "3316:     return cSize + endResult;",
          "3317: }",
          "",
          "[Removed Lines]",
          "3304:     if (ZSTD_isError(cSize)) return cSize;",
          "3306:     if (ZSTD_isError(endResult)) return endResult;",
          "3311:         if (cctx->pledgedSrcSizePlusOne != cctx->consumedSrcSize+1) {",
          "3312:             DEBUGLOG(4, \"error : pledgedSrcSize = %u, while realSrcSize = %u\",",
          "3313:                 (unsigned)cctx->pledgedSrcSizePlusOne-1, (unsigned)cctx->consumedSrcSize);",
          "3314:             return ERROR(srcSize_wrong);",
          "3315:     }   }",
          "",
          "[Added Lines]",
          "3303:     FORWARD_ERROR(cSize);",
          "3305:     FORWARD_ERROR(endResult);",
          "3310:         RETURN_ERROR_IF(",
          "3311:             cctx->pledgedSrcSizePlusOne != cctx->consumedSrcSize+1,",
          "3312:             srcSize_wrong,",
          "3313:              \"error : pledgedSrcSize = %u, while realSrcSize = %u\",",
          "3314:             (unsigned)cctx->pledgedSrcSizePlusOne-1,",
          "3315:             (unsigned)cctx->consumedSrcSize);",
          "3316:     }",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3340:                                ZSTD_parameters params)",
          "3341: {",
          "3342:     DEBUGLOG(4, \"ZSTD_compress_advanced\");",
          "3344:     return ZSTD_compress_internal(cctx,",
          "3345:                                   dst, dstCapacity,",
          "3346:                                   src, srcSize,",
          "",
          "[Removed Lines]",
          "3343:     CHECK_F(ZSTD_checkCParams(params.cParams));",
          "",
          "[Added Lines]",
          "3344:     FORWARD_ERROR(ZSTD_checkCParams(params.cParams));",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3357:         ZSTD_CCtx_params params)",
          "3358: {",
          "3359:     DEBUGLOG(4, \"ZSTD_compress_advanced_internal (srcSize:%u)\", (unsigned)srcSize);",
          "3361:                          dict, dictSize, ZSTD_dct_auto, ZSTD_dtlm_fast, NULL,",
          "3362:                          params, srcSize, ZSTDb_not_buffered) );",
          "3363:     return ZSTD_compressEnd(cctx, dst, dstCapacity, src, srcSize);",
          "",
          "[Removed Lines]",
          "3360:     CHECK_F( ZSTD_compressBegin_internal(cctx,",
          "",
          "[Added Lines]",
          "3361:     FORWARD_ERROR( ZSTD_compressBegin_internal(cctx,",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3441:         void* const internalBuffer = ZSTD_malloc(dictSize, cdict->customMem);",
          "3442:         cdict->dictBuffer = internalBuffer;",
          "3443:         cdict->dictContent = internalBuffer;",
          "3445:         memcpy(internalBuffer, dictBuffer, dictSize);",
          "3446:     }",
          "3447:     cdict->dictContentSize = dictSize;",
          "",
          "[Removed Lines]",
          "3444:         if (!internalBuffer) return ERROR(memory_allocation);",
          "",
          "[Added Lines]",
          "3445:         RETURN_ERROR_IF(!internalBuffer, memory_allocation);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3467:                     &cdict->cBlockState, &cdict->matchState, &params,",
          "3468:                     cdict->dictContent, cdict->dictContentSize,",
          "3469:                     dictContentType, ZSTD_dtlm_full, cdict->workspace);",
          "3471:             assert(dictID <= (size_t)(U32)-1);",
          "3472:             cdict->dictID = (U32)dictID;",
          "3473:         }",
          "",
          "[Removed Lines]",
          "3470:             if (ZSTD_isError(dictID)) return dictID;",
          "",
          "[Added Lines]",
          "3471:             FORWARD_ERROR(dictID);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3597:     ZSTD_frameParameters const fParams, unsigned long long const pledgedSrcSize)",
          "3598: {",
          "3599:     DEBUGLOG(4, \"ZSTD_compressBegin_usingCDict_advanced\");",
          "3601:     {   ZSTD_CCtx_params params = cctx->requestedParams;",
          "3602:         params.cParams = ZSTD_getCParamsFromCDict(cdict);",
          "",
          "[Removed Lines]",
          "3600:     if (cdict==NULL) return ERROR(dictionary_wrong);",
          "",
          "[Added Lines]",
          "3601:     RETURN_ERROR_IF(cdict==NULL, dictionary_wrong);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3701:     assert(!ZSTD_isError(ZSTD_checkCParams(params.cParams)));",
          "3705:                                          dict, dictSize, dictContentType, ZSTD_dtlm_fast,",
          "3706:                                          cdict,",
          "3707:                                          params, pledgedSrcSize,",
          "",
          "[Removed Lines]",
          "3704:     CHECK_F( ZSTD_compressBegin_internal(cctx,",
          "",
          "[Added Lines]",
          "3705:     FORWARD_ERROR( ZSTD_compressBegin_internal(cctx,",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3744:     if (dict && dictSize >= 8) {",
          "3745:         DEBUGLOG(4, \"loading dictionary of size %u\", (unsigned)dictSize);",
          "3750:         ZSTD_freeCDict(zcs->cdictLocal);",
          "3751:         zcs->cdictLocal = ZSTD_createCDict_advanced(dict, dictSize,",
          "3752:                                             ZSTD_dlm_byCopy, ZSTD_dct_auto,",
          "3753:                                             params.cParams, zcs->customMem);",
          "3754:         zcs->cdict = zcs->cdictLocal;",
          "3756:     } else {",
          "3757:         if (cdict) {",
          "",
          "[Removed Lines]",
          "3748:             return ERROR(memory_allocation);",
          "3749:         }",
          "3755:         if (zcs->cdictLocal == NULL) return ERROR(memory_allocation);",
          "",
          "[Added Lines]",
          "3747:         RETURN_ERROR_IF(",
          "3748:             zcs->staticSize, memory_allocation,",
          "3749:             \"static CCtx: incompatible with internal cdict creation\");",
          "3755:         RETURN_ERROR_IF(zcs->cdictLocal == NULL, memory_allocation);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3773:                                             unsigned long long pledgedSrcSize)",
          "3774: {",
          "3775:     DEBUGLOG(4, \"ZSTD_initCStream_usingCDict_advanced\");",
          "3777:     {   ZSTD_CCtx_params params = zcs->requestedParams;",
          "3778:         params.cParams = ZSTD_getCParamsFromCDict(cdict);",
          "3779:         params.fParams = fParams;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3776:     RETURN_ERROR_IF(!cdict, dictionary_wrong,",
          "3777:                     \"cannot handle NULL cdict (does not know what to do)\");",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3802: {",
          "3803:     DEBUGLOG(4, \"ZSTD_initCStream_advanced: pledgedSrcSize=%u, flag=%u\",",
          "3804:                 (unsigned)pledgedSrcSize, params.fParams.contentSizeFlag);",
          "3807:     zcs->requestedParams = ZSTD_assignParamsToCCtxParams(zcs->requestedParams, params);",
          "3808:     return ZSTD_initCStream_internal(zcs, dict, dictSize, NULL /*cdict*/, zcs->requestedParams, pledgedSrcSize);",
          "",
          "[Removed Lines]",
          "3805:     CHECK_F( ZSTD_checkCParams(params.cParams) );",
          "",
          "[Added Lines]",
          "3806:     FORWARD_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3874:         switch(zcs->streamStage)",
          "3875:         {",
          "3876:         case zcss_init:",
          "3880:         case zcss_load:",
          "3881:             if ( (flushMode == ZSTD_e_end)",
          "",
          "[Removed Lines]",
          "3878:             return ERROR(init_missing);",
          "",
          "[Added Lines]",
          "3878:             RETURN_ERROR(init_missing, \"call ZSTD_initCStream() first!\");",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3885:                 size_t const cSize = ZSTD_compressEnd(zcs,",
          "3886:                                                 op, oend-op, ip, iend-ip);",
          "3887:                 DEBUGLOG(4, \"ZSTD_compressEnd : cSize=%u\", (unsigned)cSize);",
          "3889:                 ip = iend;",
          "3890:                 op += cSize;",
          "3891:                 zcs->frameEnded = 1;",
          "",
          "[Removed Lines]",
          "3888:                 if (ZSTD_isError(cSize)) return cSize;",
          "",
          "[Added Lines]",
          "3888:                 FORWARD_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3926:                                     zcs->inBuff + zcs->inToCompress, iSize) :",
          "3927:                         ZSTD_compressContinue(zcs, cDst, oSize,",
          "3928:                                     zcs->inBuff + zcs->inToCompress, iSize);",
          "3930:                 zcs->frameEnded = lastBlock;",
          "3932:                 zcs->inBuffTarget = zcs->inBuffPos + zcs->blockSize;",
          "",
          "[Removed Lines]",
          "3929:                 if (ZSTD_isError(cSize)) return cSize;",
          "",
          "[Added Lines]",
          "3929:                 FORWARD_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4003: size_t ZSTD_compressStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output, ZSTD_inBuffer* input)",
          "4004: {",
          "4006:     return ZSTD_nextInputSizeHint_MTorST(zcs);",
          "4007: }",
          "",
          "[Removed Lines]",
          "4005:     CHECK_F( ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue) );",
          "",
          "[Added Lines]",
          "4005:     FORWARD_ERROR( ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue) );",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4014: {",
          "4015:     DEBUGLOG(5, \"ZSTD_compressStream2, endOp=%u \", (unsigned)endOp);",
          "4019:     assert(cctx!=NULL);",
          "",
          "[Removed Lines]",
          "4017:     if (output->pos > output->size) return ERROR(GENERIC);",
          "4018:     if (input->pos  > input->size)  return ERROR(GENERIC);",
          "",
          "[Added Lines]",
          "4017:     RETURN_ERROR_IF(output->pos > output->size, GENERIC);",
          "4018:     RETURN_ERROR_IF(input->pos  > input->size, GENERIC);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4040:                 DEBUGLOG(4, \"ZSTD_compressStream2: creating new mtctx for nbWorkers=%u\",",
          "4041:                             params.nbWorkers);",
          "4042:                 cctx->mtctx = ZSTDMT_createCCtx_advanced(params.nbWorkers, cctx->customMem);",
          "4044:             }",
          "4046:             DEBUGLOG(4, \"call ZSTDMT_initCStream_internal as nbWorkers=%u\", params.nbWorkers);",
          "4048:                         cctx->mtctx,",
          "4049:                         prefixDict.dict, prefixDict.dictSize, ZSTD_dct_rawContent,",
          "4050:                         cctx->cdict, params, cctx->pledgedSrcSizePlusOne-1) );",
          "",
          "[Removed Lines]",
          "4043:                 if (cctx->mtctx == NULL) return ERROR(memory_allocation);",
          "4047:             CHECK_F( ZSTDMT_initCStream_internal(",
          "",
          "[Added Lines]",
          "4043:                 RETURN_ERROR_IF(cctx->mtctx == NULL, memory_allocation);",
          "4047:             FORWARD_ERROR( ZSTDMT_initCStream_internal(",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4052:             cctx->appliedParams.nbWorkers = params.nbWorkers;",
          "4053:         } else",
          "4054: #endif",
          "4056:                             prefixDict.dict, prefixDict.dictSize, prefixDict.dictContentType,",
          "4057:                             cctx->cdict,",
          "4058:                             params, cctx->pledgedSrcSizePlusOne-1) );",
          "",
          "[Removed Lines]",
          "4055:         {   CHECK_F( ZSTD_resetCStream_internal(cctx,",
          "",
          "[Added Lines]",
          "4055:         {   FORWARD_ERROR( ZSTD_resetCStream_internal(cctx,",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4077:             return flushMin;",
          "4078:     }   }",
          "4079: #endif",
          "4081:     DEBUGLOG(5, \"completed ZSTD_compressStream2\");",
          "4083: }",
          "",
          "[Removed Lines]",
          "4080:     CHECK_F( ZSTD_compressStream_generic(cctx, output, input, endOp) );",
          "",
          "[Added Lines]",
          "4080:     FORWARD_ERROR( ZSTD_compressStream_generic(cctx, output, input, endOp) );",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4108:                                         dst, dstCapacity, &oPos,",
          "4109:                                         src, srcSize, &iPos,",
          "4110:                                         ZSTD_e_end);",
          "4113:             assert(oPos == dstCapacity);",
          "4115:         }",
          "4117:         return oPos;",
          "",
          "[Removed Lines]",
          "4111:         if (ZSTD_isError(result)) return result;",
          "4114:             return ERROR(dstSize_tooSmall);",
          "",
          "[Added Lines]",
          "4111:         FORWARD_ERROR(result);",
          "4114:             RETURN_ERROR(dstSize_tooSmall);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "4133: {",
          "4134:     ZSTD_inBuffer input = { NULL, 0, 0 };",
          "4135:     size_t const remainingToFlush = ZSTD_compressStream2(zcs, output, &input, ZSTD_e_end);",
          "4139:     {   size_t const lastBlockSize = zcs->frameEnded ? 0 : ZSTD_BLOCKHEADERSIZE;",
          "",
          "[Removed Lines]",
          "4136:     CHECK_F( remainingToFlush );",
          "",
          "[Added Lines]",
          "4136:     FORWARD_ERROR( remainingToFlush );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "501eb25102a8590988b9933ad8c2924dddf31c4f",
      "candidate_info": {
        "commit_hash": "501eb25102a8590988b9933ad8c2924dddf31c4f",
        "repo": "facebook/zstd",
        "commit_url": "https://github.com/facebook/zstd/commit/501eb25102a8590988b9933ad8c2924dddf31c4f",
        "files": [
          "lib/common/zstd_internal.h",
          "lib/compress/zstd_compress.c",
          "lib/compress/zstdmt_compress.c",
          "lib/decompress/zstd_ddict.c",
          "lib/decompress/zstd_decompress.c"
        ],
        "message": "Rename FORWARD_ERROR -> FORWARD_IF_ERROR",
        "before_after_code_files": [
          "lib/common/zstd_internal.h||lib/common/zstd_internal.h",
          "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c",
          "lib/compress/zstdmt_compress.c||lib/compress/zstdmt_compress.c",
          "lib/decompress/zstd_ddict.c||lib/decompress/zstd_ddict.c",
          "lib/decompress/zstd_decompress.c||lib/decompress/zstd_decompress.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c"
          ],
          "candidate": [
            "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/common/zstd_internal.h||lib/common/zstd_internal.h": [
          "File: lib/common/zstd_internal.h -> lib/common/zstd_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   do { \\",
          "92:     size_t const err_code = (err); \\",
          "93:     if (ERR_isError(err_code)) { \\",
          "",
          "[Removed Lines]",
          "90: #define FORWARD_ERROR(err, ...) \\",
          "",
          "[Added Lines]",
          "90: #define FORWARD_IF_ERROR(err, ...) \\",
          "",
          "---------------"
        ],
        "lib/compress/zstd_compress.c||lib/compress/zstd_compress.c": [
          "File: lib/compress/zstd_compress.c -> lib/compress/zstd_compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: size_t ZSTD_CCtxParams_init_advanced(ZSTD_CCtx_params* cctxParams, ZSTD_parameters params)",
          "207: {",
          "208:     RETURN_ERROR_IF(!cctxParams, GENERIC);",
          "210:     memset(cctxParams, 0, sizeof(*cctxParams));",
          "211:     cctxParams->cParams = params.cParams;",
          "212:     cctxParams->fParams = params.fParams;",
          "",
          "[Removed Lines]",
          "209:     FORWARD_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "[Added Lines]",
          "209:     FORWARD_IF_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2079:     BYTE wksp[FSE_NCOUNTBOUND];",
          "2080:     S16 norm[MaxSeq + 1];",
          "2081:     const U32 tableLog = FSE_optimalTableLog(FSELog, nbSeq, max);",
          "2083:     return FSE_writeNCount(wksp, sizeof(wksp), norm, max, tableLog);",
          "2084: }",
          "",
          "[Removed Lines]",
          "2082:     FORWARD_ERROR(FSE_normalizeCount(norm, tableLog, count, nbSeq, max));",
          "",
          "[Added Lines]",
          "2082:     FORWARD_IF_ERROR(FSE_normalizeCount(norm, tableLog, count, nbSeq, max));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2186:     switch (type) {",
          "2187:     case set_rle:",
          "2189:         RETURN_ERROR_IF(dstCapacity==0, dstSize_tooSmall);",
          "2191:         return 1;",
          "",
          "[Removed Lines]",
          "2188:         FORWARD_ERROR(FSE_buildCTable_rle(nextCTable, (BYTE)max));",
          "",
          "[Added Lines]",
          "2188:         FORWARD_IF_ERROR(FSE_buildCTable_rle(nextCTable, (BYTE)max));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2204:             nbSeq_1--;",
          "2205:         }",
          "2206:         assert(nbSeq_1 > 1);",
          "2211:             return NCountSize;",
          "2212:         }",
          "2213:     }",
          "",
          "[Removed Lines]",
          "2207:         FORWARD_ERROR(FSE_normalizeCount(norm, tableLog, count, nbSeq_1, max));",
          "2209:             FORWARD_ERROR(NCountSize);",
          "2210:             FORWARD_ERROR(FSE_buildCTable_wksp(nextCTable, norm, max, tableLog, workspace, workspaceSize));",
          "",
          "[Added Lines]",
          "2207:         FORWARD_IF_ERROR(FSE_normalizeCount(norm, tableLog, count, nbSeq_1, max));",
          "2209:             FORWARD_IF_ERROR(NCountSize);",
          "2210:             FORWARD_IF_ERROR(FSE_buildCTable_wksp(nextCTable, norm, max, tableLog, workspace, workspaceSize));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2412:                                     literals, litSize,",
          "2413:                                     workspace, wkspSize,",
          "2414:                                     bmi2);",
          "2416:         assert(cSize <= dstCapacity);",
          "2417:         op += cSize;",
          "2418:     }",
          "",
          "[Removed Lines]",
          "2415:         FORWARD_ERROR(cSize);",
          "",
          "[Added Lines]",
          "2415:         FORWARD_IF_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2453:                                                     count, max, llCodeTable, nbSeq, LL_defaultNorm, LL_defaultNormLog, MaxLL,",
          "2454:                                                     prevEntropy->fse.litlengthCTable, sizeof(prevEntropy->fse.litlengthCTable),",
          "2455:                                                     workspace, wkspSize);",
          "2457:             if (LLtype == set_compressed)",
          "2458:                 lastNCount = op;",
          "2459:             op += countSize;",
          "",
          "[Removed Lines]",
          "2456:             FORWARD_ERROR(countSize);",
          "",
          "[Added Lines]",
          "2456:             FORWARD_IF_ERROR(countSize);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2475:                                                     count, max, ofCodeTable, nbSeq, OF_defaultNorm, OF_defaultNormLog, DefaultMaxOff,",
          "2476:                                                     prevEntropy->fse.offcodeCTable, sizeof(prevEntropy->fse.offcodeCTable),",
          "2477:                                                     workspace, wkspSize);",
          "2479:             if (Offtype == set_compressed)",
          "2480:                 lastNCount = op;",
          "2481:             op += countSize;",
          "",
          "[Removed Lines]",
          "2478:             FORWARD_ERROR(countSize);",
          "",
          "[Added Lines]",
          "2478:             FORWARD_IF_ERROR(countSize);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2495:                                                     count, max, mlCodeTable, nbSeq, ML_defaultNorm, ML_defaultNormLog, MaxML,",
          "2496:                                                     prevEntropy->fse.matchlengthCTable, sizeof(prevEntropy->fse.matchlengthCTable),",
          "2497:                                                     workspace, wkspSize);",
          "2499:             if (MLtype == set_compressed)",
          "2500:                 lastNCount = op;",
          "2501:             op += countSize;",
          "",
          "[Removed Lines]",
          "2498:             FORWARD_ERROR(countSize);",
          "",
          "[Added Lines]",
          "2498:             FORWARD_IF_ERROR(countSize);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2510:                                         CTable_LitLength, llCodeTable,",
          "2511:                                         sequences, nbSeq,",
          "2512:                                         longOffsets, bmi2);",
          "2514:         op += bitstreamSize;",
          "",
          "[Removed Lines]",
          "2513:         FORWARD_ERROR(bitstreamSize);",
          "",
          "[Added Lines]",
          "2513:         FORWARD_IF_ERROR(bitstreamSize);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2554:     if ((cSize == ERROR(dstSize_tooSmall)) & (srcSize <= dstCapacity))",
          "2559:     {   size_t const maxCSize = srcSize - ZSTD_minGain(srcSize, cctxParams->cParams.strategy);",
          "",
          "[Removed Lines]",
          "2556:     FORWARD_ERROR(cSize);",
          "",
          "[Added Lines]",
          "2556:     FORWARD_IF_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2680:             ldmSeqStore.seq = zc->ldmSequences;",
          "2681:             ldmSeqStore.capacity = zc->maxNbLdmSequences;",
          "2684:                                                &zc->appliedParams.ldmParams,",
          "2685:                                                src, srcSize));",
          "",
          "[Removed Lines]",
          "2683:             FORWARD_ERROR(ZSTD_ldm_generateSequences(&zc->ldmState, &ldmSeqStore,",
          "",
          "[Added Lines]",
          "2683:             FORWARD_IF_ERROR(ZSTD_ldm_generateSequences(&zc->ldmState, &ldmSeqStore,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2776:         {   size_t cSize = ZSTD_compressBlock_internal(cctx,",
          "2777:                                 op+ZSTD_blockHeaderSize, dstCapacity-ZSTD_blockHeaderSize,",
          "2778:                                 ip, blockSize);",
          "2782:                 cSize = ZSTD_noCompressBlock(op, dstCapacity, ip, blockSize, lastBlock);",
          "2784:             } else {",
          "2785:                 U32 const cBlockHeader24 = lastBlock + (((U32)bt_compressed)<<1) + (U32)(cSize << 3);",
          "2786:                 MEM_writeLE24(op, cBlockHeader24);",
          "",
          "[Removed Lines]",
          "2779:             FORWARD_ERROR(cSize);",
          "2783:                 FORWARD_ERROR(cSize);",
          "",
          "[Added Lines]",
          "2779:             FORWARD_IF_ERROR(cSize);",
          "2783:                 FORWARD_IF_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2889:     if (frame && (cctx->stage==ZSTDcs_init)) {",
          "2890:         fhSize = ZSTD_writeFrameHeader(dst, dstCapacity, cctx->appliedParams,",
          "2891:                                        cctx->pledgedSrcSizePlusOne-1, cctx->dictID);",
          "2893:         dstCapacity -= fhSize;",
          "2894:         dst = (char*)dst + fhSize;",
          "2895:         cctx->stage = ZSTDcs_ongoing;",
          "",
          "[Removed Lines]",
          "2892:         FORWARD_ERROR(fhSize);",
          "",
          "[Added Lines]",
          "2892:         FORWARD_IF_ERROR(fhSize);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2924:     {   size_t const cSize = frame ?",
          "2925:                              ZSTD_compress_frameChunk (cctx, dst, dstCapacity, src, srcSize, lastFrameChunk) :",
          "2926:                              ZSTD_compressBlock_internal (cctx, dst, dstCapacity, src, srcSize);",
          "2928:         cctx->consumedSrcSize += srcSize;",
          "2929:         cctx->producedCSize += (cSize + fhSize);",
          "2930:         assert(!(cctx->appliedParams.fParams.contentSizeFlag && cctx->pledgedSrcSizePlusOne == 0));",
          "",
          "[Removed Lines]",
          "2927:         FORWARD_ERROR(cSize);",
          "",
          "[Added Lines]",
          "2927:         FORWARD_IF_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3088:         RETURN_ERROR_IF(FSE_isError(matchlengthHeaderSize), dictionary_corrupted);",
          "3089:         RETURN_ERROR_IF(matchlengthLog > MLFSELog, dictionary_corrupted);",
          "3092:         RETURN_ERROR_IF(FSE_isError(FSE_buildCTable_wksp(",
          "3093:                 bs->entropy.fse.matchlengthCTable,",
          "3094:                 matchlengthNCount, matchlengthMaxValue, matchlengthLog,",
          "",
          "[Removed Lines]",
          "3091:         FORWARD_ERROR( ZSTD_checkDictNCount(matchlengthNCount, matchlengthMaxValue, MaxML));",
          "",
          "[Added Lines]",
          "3091:         FORWARD_IF_ERROR( ZSTD_checkDictNCount(matchlengthNCount, matchlengthMaxValue, MaxML));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3103:         RETURN_ERROR_IF(FSE_isError(litlengthHeaderSize), dictionary_corrupted);",
          "3104:         RETURN_ERROR_IF(litlengthLog > LLFSELog, dictionary_corrupted);",
          "3107:         RETURN_ERROR_IF(FSE_isError(FSE_buildCTable_wksp(",
          "3108:                 bs->entropy.fse.litlengthCTable,",
          "3109:                 litlengthNCount, litlengthMaxValue, litlengthLog,",
          "",
          "[Removed Lines]",
          "3106:         FORWARD_ERROR( ZSTD_checkDictNCount(litlengthNCount, litlengthMaxValue, MaxLL));",
          "",
          "[Added Lines]",
          "3106:         FORWARD_IF_ERROR( ZSTD_checkDictNCount(litlengthNCount, litlengthMaxValue, MaxLL));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3126:         }",
          "3130:         {   U32 u;",
          "3131:             for (u=0; u<3; u++) {",
          "",
          "[Removed Lines]",
          "3128:         FORWARD_ERROR(ZSTD_checkDictNCount(offcodeNCount, offcodeMaxValue, MIN(offcodeMax, MaxOff)));",
          "",
          "[Added Lines]",
          "3128:         FORWARD_IF_ERROR(ZSTD_checkDictNCount(offcodeNCount, offcodeMaxValue, MIN(offcodeMax, MaxOff)));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3137:         bs->entropy.fse.offcode_repeatMode = FSE_repeat_valid;",
          "3138:         bs->entropy.fse.matchlength_repeatMode = FSE_repeat_valid;",
          "3139:         bs->entropy.fse.litlength_repeatMode = FSE_repeat_valid;",
          "3141:         return dictID;",
          "3142:     }",
          "3143: }",
          "",
          "[Removed Lines]",
          "3140:         FORWARD_ERROR(ZSTD_loadDictionaryContent(ms, params, dictPtr, dictContentSize, dtlm));",
          "",
          "[Added Lines]",
          "3140:         FORWARD_IF_ERROR(ZSTD_loadDictionaryContent(ms, params, dictPtr, dictContentSize, dtlm));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3194:         return ZSTD_resetCCtx_usingCDict(cctx, cdict, params, pledgedSrcSize, zbuff);",
          "3195:     }",
          "3198:                                      ZSTDcrp_continue, zbuff) );",
          "3199:     {",
          "3200:         size_t const dictID = ZSTD_compress_insertDictionary(",
          "3201:                 cctx->blockState.prevCBlock, &cctx->blockState.matchState,",
          "3202:                 &params, dict, dictSize, dictContentType, dtlm, cctx->entropyWorkspace);",
          "3204:         assert(dictID <= (size_t)(U32)-1);",
          "3205:         cctx->dictID = (U32)dictID;",
          "3206:     }",
          "",
          "[Removed Lines]",
          "3197:     FORWARD_ERROR( ZSTD_resetCCtx_internal(cctx, params, pledgedSrcSize,",
          "3203:         FORWARD_ERROR(dictID);",
          "",
          "[Added Lines]",
          "3197:     FORWARD_IF_ERROR( ZSTD_resetCCtx_internal(cctx, params, pledgedSrcSize,",
          "3203:         FORWARD_IF_ERROR(dictID);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3217: {",
          "3218:     DEBUGLOG(4, \"ZSTD_compressBegin_advanced_internal: wlog=%u\", params.cParams.windowLog);",
          "3221:     return ZSTD_compressBegin_internal(cctx,",
          "3222:                                        dict, dictSize, dictContentType, dtlm,",
          "3223:                                        cdict,",
          "",
          "[Removed Lines]",
          "3220:     FORWARD_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "[Added Lines]",
          "3220:     FORWARD_IF_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3271:     if (cctx->stage == ZSTDcs_init) {",
          "3272:         fhSize = ZSTD_writeFrameHeader(dst, dstCapacity, cctx->appliedParams, 0, 0);",
          "3274:         dstCapacity -= fhSize;",
          "3275:         op += fhSize;",
          "3276:         cctx->stage = ZSTDcs_ongoing;",
          "",
          "[Removed Lines]",
          "3273:         FORWARD_ERROR(fhSize);",
          "",
          "[Added Lines]",
          "3273:         FORWARD_IF_ERROR(fhSize);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3305:     size_t const cSize = ZSTD_compressContinue_internal(cctx,",
          "3306:                                 dst, dstCapacity, src, srcSize,",
          "3307:                                 1 /* frame mode */, 1 /* last chunk */);",
          "3309:     endResult = ZSTD_writeEpilogue(cctx, (char*)dst + cSize, dstCapacity-cSize);",
          "3311:     assert(!(cctx->appliedParams.fParams.contentSizeFlag && cctx->pledgedSrcSizePlusOne == 0));",
          "3313:         ZSTD_STATIC_ASSERT(ZSTD_CONTENTSIZE_UNKNOWN == (unsigned long long)-1);",
          "",
          "[Removed Lines]",
          "3308:     FORWARD_ERROR(cSize);",
          "3310:     FORWARD_ERROR(endResult);",
          "",
          "[Added Lines]",
          "3308:     FORWARD_IF_ERROR(cSize);",
          "3310:     FORWARD_IF_ERROR(endResult);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3346:                                ZSTD_parameters params)",
          "3347: {",
          "3348:     DEBUGLOG(4, \"ZSTD_compress_advanced\");",
          "3350:     return ZSTD_compress_internal(cctx,",
          "3351:                                   dst, dstCapacity,",
          "3352:                                   src, srcSize,",
          "",
          "[Removed Lines]",
          "3349:     FORWARD_ERROR(ZSTD_checkCParams(params.cParams));",
          "",
          "[Added Lines]",
          "3349:     FORWARD_IF_ERROR(ZSTD_checkCParams(params.cParams));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3363:         ZSTD_CCtx_params params)",
          "3364: {",
          "3365:     DEBUGLOG(4, \"ZSTD_compress_advanced_internal (srcSize:%u)\", (unsigned)srcSize);",
          "3367:                          dict, dictSize, ZSTD_dct_auto, ZSTD_dtlm_fast, NULL,",
          "3368:                          params, srcSize, ZSTDb_not_buffered) );",
          "3369:     return ZSTD_compressEnd(cctx, dst, dstCapacity, src, srcSize);",
          "",
          "[Removed Lines]",
          "3366:     FORWARD_ERROR( ZSTD_compressBegin_internal(cctx,",
          "",
          "[Added Lines]",
          "3366:     FORWARD_IF_ERROR( ZSTD_compressBegin_internal(cctx,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3473:                     &cdict->cBlockState, &cdict->matchState, &params,",
          "3474:                     cdict->dictContent, cdict->dictContentSize,",
          "3475:                     dictContentType, ZSTD_dtlm_full, cdict->workspace);",
          "3477:             assert(dictID <= (size_t)(U32)-1);",
          "3478:             cdict->dictID = (U32)dictID;",
          "3479:         }",
          "",
          "[Removed Lines]",
          "3476:             FORWARD_ERROR(dictID);",
          "",
          "[Added Lines]",
          "3476:             FORWARD_IF_ERROR(dictID);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3707:     assert(!ZSTD_isError(ZSTD_checkCParams(params.cParams)));",
          "3711:                                          dict, dictSize, dictContentType, ZSTD_dtlm_fast,",
          "3712:                                          cdict,",
          "3713:                                          params, pledgedSrcSize,",
          "",
          "[Removed Lines]",
          "3710:     FORWARD_ERROR( ZSTD_compressBegin_internal(cctx,",
          "",
          "[Added Lines]",
          "3710:     FORWARD_IF_ERROR( ZSTD_compressBegin_internal(cctx,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3808: {",
          "3809:     DEBUGLOG(4, \"ZSTD_initCStream_advanced: pledgedSrcSize=%u, flag=%u\",",
          "3810:                 (unsigned)pledgedSrcSize, params.fParams.contentSizeFlag);",
          "3813:     zcs->requestedParams = ZSTD_assignParamsToCCtxParams(zcs->requestedParams, params);",
          "3814:     return ZSTD_initCStream_internal(zcs, dict, dictSize, NULL /*cdict*/, zcs->requestedParams, pledgedSrcSize);",
          "",
          "[Removed Lines]",
          "3811:     FORWARD_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "[Added Lines]",
          "3811:     FORWARD_IF_ERROR( ZSTD_checkCParams(params.cParams) );",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3890:                 size_t const cSize = ZSTD_compressEnd(zcs,",
          "3891:                                                 op, oend-op, ip, iend-ip);",
          "3892:                 DEBUGLOG(4, \"ZSTD_compressEnd : cSize=%u\", (unsigned)cSize);",
          "3894:                 ip = iend;",
          "3895:                 op += cSize;",
          "3896:                 zcs->frameEnded = 1;",
          "",
          "[Removed Lines]",
          "3893:                 FORWARD_ERROR(cSize);",
          "",
          "[Added Lines]",
          "3893:                 FORWARD_IF_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3931:                                     zcs->inBuff + zcs->inToCompress, iSize) :",
          "3932:                         ZSTD_compressContinue(zcs, cDst, oSize,",
          "3933:                                     zcs->inBuff + zcs->inToCompress, iSize);",
          "3935:                 zcs->frameEnded = lastBlock;",
          "3937:                 zcs->inBuffTarget = zcs->inBuffPos + zcs->blockSize;",
          "",
          "[Removed Lines]",
          "3934:                 FORWARD_ERROR(cSize);",
          "",
          "[Added Lines]",
          "3934:                 FORWARD_IF_ERROR(cSize);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4008: size_t ZSTD_compressStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output, ZSTD_inBuffer* input)",
          "4009: {",
          "4011:     return ZSTD_nextInputSizeHint_MTorST(zcs);",
          "4012: }",
          "",
          "[Removed Lines]",
          "4010:     FORWARD_ERROR( ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue) );",
          "",
          "[Added Lines]",
          "4010:     FORWARD_IF_ERROR( ZSTD_compressStream2(zcs, output, input, ZSTD_e_continue) );",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4049:             }",
          "4051:             DEBUGLOG(4, \"call ZSTDMT_initCStream_internal as nbWorkers=%u\", params.nbWorkers);",
          "4053:                         cctx->mtctx,",
          "4054:                         prefixDict.dict, prefixDict.dictSize, ZSTD_dct_rawContent,",
          "4055:                         cctx->cdict, params, cctx->pledgedSrcSizePlusOne-1) );",
          "",
          "[Removed Lines]",
          "4052:             FORWARD_ERROR( ZSTDMT_initCStream_internal(",
          "",
          "[Added Lines]",
          "4052:             FORWARD_IF_ERROR( ZSTDMT_initCStream_internal(",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4057:             cctx->appliedParams.nbWorkers = params.nbWorkers;",
          "4058:         } else",
          "4059: #endif",
          "4061:                             prefixDict.dict, prefixDict.dictSize, prefixDict.dictContentType,",
          "4062:                             cctx->cdict,",
          "4063:                             params, cctx->pledgedSrcSizePlusOne-1) );",
          "",
          "[Removed Lines]",
          "4060:         {   FORWARD_ERROR( ZSTD_resetCStream_internal(cctx,",
          "",
          "[Added Lines]",
          "4060:         {   FORWARD_IF_ERROR( ZSTD_resetCStream_internal(cctx,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4082:             return flushMin;",
          "4083:     }   }",
          "4084: #endif",
          "4086:     DEBUGLOG(5, \"completed ZSTD_compressStream2\");",
          "4088: }",
          "",
          "[Removed Lines]",
          "4085:     FORWARD_ERROR( ZSTD_compressStream_generic(cctx, output, input, endOp) );",
          "",
          "[Added Lines]",
          "4085:     FORWARD_IF_ERROR( ZSTD_compressStream_generic(cctx, output, input, endOp) );",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4113:                                         dst, dstCapacity, &oPos,",
          "4114:                                         src, srcSize, &iPos,",
          "4115:                                         ZSTD_e_end);",
          "4118:             assert(oPos == dstCapacity);",
          "4119:             RETURN_ERROR(dstSize_tooSmall);",
          "",
          "[Removed Lines]",
          "4116:         FORWARD_ERROR(result);",
          "",
          "[Added Lines]",
          "4116:         FORWARD_IF_ERROR(result);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4138: {",
          "4139:     ZSTD_inBuffer input = { NULL, 0, 0 };",
          "4140:     size_t const remainingToFlush = ZSTD_compressStream2(zcs, output, &input, ZSTD_e_end);",
          "4144:     {   size_t const lastBlockSize = zcs->frameEnded ? 0 : ZSTD_BLOCKHEADERSIZE;",
          "",
          "[Removed Lines]",
          "4141:     FORWARD_ERROR( remainingToFlush );",
          "",
          "[Added Lines]",
          "4141:     FORWARD_IF_ERROR( remainingToFlush );",
          "",
          "---------------"
        ],
        "lib/compress/zstdmt_compress.c||lib/compress/zstdmt_compress.c": [
          "File: lib/compress/zstdmt_compress.c -> lib/compress/zstdmt_compress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056: static size_t ZSTDMT_resize(ZSTDMT_CCtx* mtctx, unsigned nbWorkers)",
          "1057: {",
          "1058:     if (POOL_resize(mtctx->factory, nbWorkers)) return ERROR(memory_allocation);",
          "1060:     mtctx->bufPool = ZSTDMT_expandBufferPool(mtctx->bufPool, nbWorkers);",
          "1061:     if (mtctx->bufPool == NULL) return ERROR(memory_allocation);",
          "1062:     mtctx->cctxPool = ZSTDMT_expandCCtxPool(mtctx->cctxPool, nbWorkers);",
          "",
          "[Removed Lines]",
          "1059:     FORWARD_ERROR( ZSTDMT_expandJobsTable(mtctx, nbWorkers) );",
          "",
          "[Added Lines]",
          "1059:     FORWARD_IF_ERROR( ZSTDMT_expandJobsTable(mtctx, nbWorkers) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1398:     if (params.nbWorkers != mtctx->params.nbWorkers)",
          "1401:     if (params.jobSize != 0 && params.jobSize < ZSTDMT_JOBSIZE_MIN) params.jobSize = ZSTDMT_JOBSIZE_MIN;",
          "1402:     if (params.jobSize > (size_t)ZSTDMT_JOBSIZE_MAX) params.jobSize = ZSTDMT_JOBSIZE_MAX;",
          "",
          "[Removed Lines]",
          "1399:         FORWARD_ERROR( ZSTDMT_resize(mtctx, params.nbWorkers) );",
          "",
          "[Added Lines]",
          "1399:         FORWARD_IF_ERROR( ZSTDMT_resize(mtctx, params.nbWorkers) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2052:         size_t const jobSize = mtctx->inBuff.filled;",
          "2053:         assert(mtctx->inBuff.filled <= mtctx->targetSectionSize);",
          "2055:     }",
          "",
          "[Removed Lines]",
          "2054:         FORWARD_ERROR( ZSTDMT_createCompressionJob(mtctx, jobSize, endOp) );",
          "",
          "[Added Lines]",
          "2054:         FORWARD_IF_ERROR( ZSTDMT_createCompressionJob(mtctx, jobSize, endOp) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2066: size_t ZSTDMT_compressStream(ZSTDMT_CCtx* mtctx, ZSTD_outBuffer* output, ZSTD_inBuffer* input)",
          "2067: {",
          "",
          "[Removed Lines]",
          "2068:     FORWARD_ERROR( ZSTDMT_compressStream_generic(mtctx, output, input, ZSTD_e_continue) );",
          "",
          "[Added Lines]",
          "2068:     FORWARD_IF_ERROR( ZSTDMT_compressStream_generic(mtctx, output, input, ZSTD_e_continue) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2083:            DEBUGLOG(5, \"ZSTDMT_flushStream_internal : create a new job (%u bytes, end:%u)\",",
          "2084:                         (U32)srcSize, (U32)endFrame);",
          "2086:     }",
          "",
          "[Removed Lines]",
          "2085:         FORWARD_ERROR( ZSTDMT_createCompressionJob(mtctx, srcSize, endFrame) );",
          "",
          "[Added Lines]",
          "2085:         FORWARD_IF_ERROR( ZSTDMT_createCompressionJob(mtctx, srcSize, endFrame) );",
          "",
          "---------------"
        ],
        "lib/decompress/zstd_ddict.c||lib/decompress/zstd_ddict.c": [
          "File: lib/decompress/zstd_ddict.c -> lib/decompress/zstd_ddict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     return 0;",
          "139: }",
          "",
          "[Removed Lines]",
          "136:     FORWARD_ERROR( ZSTD_loadEntropy_intoDDict(ddict, dictContentType) );",
          "",
          "[Added Lines]",
          "136:     FORWARD_IF_ERROR( ZSTD_loadEntropy_intoDDict(ddict, dictContentType) );",
          "",
          "---------------"
        ],
        "lib/decompress/zstd_decompress.c||lib/decompress/zstd_decompress.c": [
          "File: lib/decompress/zstd_decompress.c -> lib/decompress/zstd_decompress.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:         if (ZSTD_isError(frameHeaderSize)) return frameHeaderSize;",
          "568:         RETURN_ERROR_IF(remainingSrcSize < frameHeaderSize+ZSTD_blockHeaderSize,",
          "569:                         srcSize_wrong);",
          "571:         ip += frameHeaderSize; remainingSrcSize -= frameHeaderSize;",
          "572:     }",
          "",
          "[Removed Lines]",
          "570:         FORWARD_ERROR( ZSTD_decodeFrameHeader(dctx, ip, frameHeaderSize) );",
          "",
          "[Added Lines]",
          "570:         FORWARD_IF_ERROR( ZSTD_decodeFrameHeader(dctx, ip, frameHeaderSize) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685:         if (ddict) {",
          "688:         } else {",
          "692:         }",
          "693:         ZSTD_checkContinuity(dctx, dst);",
          "",
          "[Removed Lines]",
          "687:             FORWARD_ERROR(ZSTD_decompressBegin_usingDDict(dctx, ddict));",
          "691:             FORWARD_ERROR(ZSTD_decompressBegin_usingDict(dctx, dict, dictSize));",
          "",
          "[Added Lines]",
          "687:             FORWARD_IF_ERROR(ZSTD_decompressBegin_usingDDict(dctx, ddict));",
          "691:             FORWARD_IF_ERROR(ZSTD_decompressBegin_usingDict(dctx, dict, dictSize));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "815:     case ZSTDds_decodeFrameHeader:",
          "816:         assert(src != NULL);",
          "817:         memcpy(dctx->headerBuffer + (dctx->headerSize - srcSize), src, srcSize);",
          "819:         dctx->expected = ZSTD_blockHeaderSize;",
          "820:         dctx->stage = ZSTDds_decodeBlockHeader;",
          "821:         return 0;",
          "",
          "[Removed Lines]",
          "818:         FORWARD_ERROR(ZSTD_decodeFrameHeader(dctx, dctx->headerBuffer, dctx->headerSize));",
          "",
          "[Added Lines]",
          "818:         FORWARD_IF_ERROR(ZSTD_decodeFrameHeader(dctx, dctx->headerBuffer, dctx->headerSize));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1064: size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx* dctx, const void* dict, size_t dictSize)",
          "1065: {",
          "1067:     if (dict && dictSize)",
          "1068:         RETURN_ERROR_IF(",
          "1069:             ZSTD_isError(ZSTD_decompress_insertDictionary(dctx, dict, dictSize)),",
          "",
          "[Removed Lines]",
          "1066:     FORWARD_ERROR( ZSTD_decompressBegin(dctx) );",
          "",
          "[Added Lines]",
          "1066:     FORWARD_IF_ERROR( ZSTD_decompressBegin(dctx) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1086:         DEBUGLOG(4, \"DDict is %s\",",
          "1087:                     dctx->ddictIsCold ? \"~cold~\" : \"hot!\");",
          "1088:     }",
          "1091:         ZSTD_copyDDictParameters(dctx, ddict);",
          "1092:     }",
          "",
          "[Removed Lines]",
          "1089:     FORWARD_ERROR( ZSTD_decompressBegin(dctx) );",
          "",
          "[Added Lines]",
          "1089:     FORWARD_IF_ERROR( ZSTD_decompressBegin(dctx) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1218:     DEBUGLOG(4, \"ZSTD_initDStream_usingDict\");",
          "1219:     zds->streamStage = zdss_init;",
          "1220:     zds->noForwardProgress = 0;",
          "1222:     return ZSTD_FRAMEHEADERSIZE_PREFIX;",
          "1223: }",
          "",
          "[Removed Lines]",
          "1221:     FORWARD_ERROR( ZSTD_DCtx_loadDictionary(zds, dict, dictSize) );",
          "",
          "[Added Lines]",
          "1221:     FORWARD_IF_ERROR( ZSTD_DCtx_loadDictionary(zds, dict, dictSize) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1448:                         DEBUGLOG(5, \"ZSTD_decompressStream: detected legacy version v0.%u\", legacyVersion);",
          "1449:                         RETURN_ERROR_IF(zds->staticSize, memory_allocation,",
          "1450:                             \"legacy support is incompatible with static dctx\");",
          "1452:                                     zds->previousLegacyVersion, legacyVersion,",
          "1453:                                     dict, dictSize));",
          "1454:                         zds->legacyVersion = zds->previousLegacyVersion = legacyVersion;",
          "",
          "[Removed Lines]",
          "1451:                         FORWARD_ERROR(ZSTD_initLegacyStream(&zds->legacyContext,",
          "",
          "[Added Lines]",
          "1451:                         FORWARD_IF_ERROR(ZSTD_initLegacyStream(&zds->legacyContext,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1497:             DEBUGLOG(4, \"Consume header\");",
          "1501:                 zds->expected = MEM_readLE32(zds->headerBuffer + ZSTD_FRAMEIDSIZE);",
          "1502:                 zds->stage = ZSTDds_skipFrame;",
          "1503:             } else {",
          "1505:                 zds->expected = ZSTD_blockHeaderSize;",
          "1506:                 zds->stage = ZSTDds_decodeBlockHeader;",
          "1507:             }",
          "",
          "[Removed Lines]",
          "1498:             FORWARD_ERROR(ZSTD_decompressBegin_usingDDict(zds, zds->ddict));",
          "1504:                 FORWARD_ERROR(ZSTD_decodeFrameHeader(zds, zds->headerBuffer, zds->lhSize));",
          "",
          "[Added Lines]",
          "1498:             FORWARD_IF_ERROR(ZSTD_decompressBegin_usingDDict(zds, zds->ddict));",
          "1504:                 FORWARD_IF_ERROR(ZSTD_decodeFrameHeader(zds, zds->headerBuffer, zds->lhSize));",
          "",
          "---------------"
        ]
      }
    }
  ]
}