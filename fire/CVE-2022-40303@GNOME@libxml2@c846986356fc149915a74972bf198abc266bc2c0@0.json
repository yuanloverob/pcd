{
  "cve_id": "CVE-2022-40303",
  "cve_desc": "An issue was discovered in libxml2 before 2.10.3. When parsing a multi-gigabyte XML document with the XML_PARSE_HUGE parser option enabled, several integer counters can overflow. This results in an attempt to access an array at a negative 2GB offset, typically leading to a segmentation fault.",
  "repo": "GNOME/libxml2",
  "patch_hash": "c846986356fc149915a74972bf198abc266bc2c0",
  "patch_info": {
    "commit_hash": "c846986356fc149915a74972bf198abc266bc2c0",
    "repo": "GNOME/libxml2",
    "commit_url": "https://github.com/GNOME/libxml2/commit/c846986356fc149915a74972bf198abc266bc2c0",
    "files": [
      "parser.c"
    ],
    "message": "[CVE-2022-40303] Fix integer overflows with XML_PARSE_HUGE\n\nAlso impose size limits when XML_PARSE_HUGE is set. Limit size of names\nto XML_MAX_TEXT_LENGTH (10 million bytes) and other content to\nXML_MAX_HUGE_LENGTH (1 billion bytes).\n\nMove some the length checks to the end of the respective loop to make\nthem strict.\n\nxmlParseEntityValue didn't have a length limitation at all. But without\nXML_PARSE_HUGE, this should eventually trigger an error in xmlGROW.\n\nThanks to Maddie Stone working with Google Project Zero for the report!",
    "before_after_code_files": [
      "parser.c||parser.c"
    ]
  },
  "patch_diff": {
    "parser.c||parser.c": [
      "File: parser.c -> parser.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "105: #define XML_PARSER_BIG_ENTITY 1000",
      "106: #define XML_PARSER_LOT_ENTITY 5000",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105: #define XML_MAX_HUGE_LENGTH 1000000000",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "552:             errmsg = \"Malformed declaration expecting version\";",
      "553:             break;",
      "554:         case XML_ERR_NAME_TOO_LONG:",
      "556:             break;",
      "557: #if 0",
      "558:         case:",
      "",
      "[Removed Lines]",
      "555:             errmsg = \"Name too long use XML_PARSE_HUGE option\";",
      "",
      "[Added Lines]",
      "557:             errmsg = \"Name too long\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3202:     int len = 0, l;",
      "3203:     int c;",
      "3204:     int count = 0;",
      "3206: #ifdef DEBUG",
      "3207:     nbParseNameComplex++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3207:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3208:                     XML_MAX_TEXT_LENGTH :",
      "3209:                     XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3267:                 if (ctxt->instate == XML_PARSER_EOF)",
      "3268:                     return(NULL);",
      "3269:      }",
      "3271:      NEXTL(l);",
      "3272:      c = CUR_CHAR(l);",
      "3273:  }",
      "",
      "[Removed Lines]",
      "3270:      len += l;",
      "",
      "[Added Lines]",
      "3275:             if (len <= INT_MAX - l)",
      "3276:          len += l;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3293:                 if (ctxt->instate == XML_PARSER_EOF)",
      "3294:                     return(NULL);",
      "3295:      }",
      "3297:      NEXTL(l);",
      "3298:      c = CUR_CHAR(l);",
      "3299:  }",
      "3300:     }",
      "3303:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Name\");",
      "3304:         return(NULL);",
      "3305:     }",
      "",
      "[Removed Lines]",
      "3296:      len += l;",
      "3301:     if ((len > XML_MAX_NAME_LENGTH) &&",
      "3302:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "3302:             if (len <= INT_MAX - l)",
      "3303:          len += l;",
      "3308:     if (len > maxLength) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3338: xmlParseName(xmlParserCtxtPtr ctxt) {",
      "3339:     const xmlChar *in;",
      "3340:     const xmlChar *ret;",
      "3343:     GROW;",
      "",
      "[Removed Lines]",
      "3341:     int count = 0;",
      "",
      "[Added Lines]",
      "3347:     size_t count = 0;",
      "3348:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3349:                        XML_MAX_TEXT_LENGTH :",
      "3350:                        XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3362:      in++;",
      "3363:  if ((*in > 0) && (*in < 0x80)) {",
      "3364:      count = in - ctxt->input->cur;",
      "3367:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Name\");",
      "3368:                 return(NULL);",
      "3369:             }",
      "",
      "[Removed Lines]",
      "3365:             if ((count > XML_MAX_NAME_LENGTH) &&",
      "3366:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "3374:             if (count > maxLength) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3384:     int len = 0, l;",
      "3385:     int c;",
      "3386:     int count = 0;",
      "3387:     size_t startPosition = 0;",
      "3389: #ifdef DEBUG",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3395:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3396:                     XML_MAX_TEXT_LENGTH :",
      "3397:                     XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3405:     (xmlIsNameChar(ctxt, c) && (c != ':'))) {",
      "3406:  if (count++ > XML_PARSER_CHUNK_SIZE) {",
      "3412:      count = 0;",
      "3413:      GROW;",
      "3414:             if (ctxt->instate == XML_PARSER_EOF)",
      "3415:                 return(NULL);",
      "3416:  }",
      "3418:  NEXTL(l);",
      "3419:  c = CUR_CHAR(l);",
      "3420:  if (c == 0) {",
      "",
      "[Removed Lines]",
      "3407:             if ((len > XML_MAX_NAME_LENGTH) &&",
      "3408:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "3409:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
      "3410:                 return(NULL);",
      "3411:             }",
      "3417:  len += l;",
      "",
      "[Added Lines]",
      "3423:         if (len <= INT_MAX - l)",
      "3424:      len += l;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "3432:      c = CUR_CHAR(l);",
      "3433:  }",
      "3434:     }",
      "3437:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
      "3438:         return(NULL);",
      "3439:     }",
      "",
      "[Removed Lines]",
      "3435:     if ((len > XML_MAX_NAME_LENGTH) &&",
      "3436:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "3442:     if (len > maxLength) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "3459: xmlParseNCName(xmlParserCtxtPtr ctxt) {",
      "3460:     const xmlChar *in, *e;",
      "3461:     const xmlChar *ret;",
      "3464: #ifdef DEBUG",
      "3465:     nbParseNCName++;",
      "",
      "[Removed Lines]",
      "3462:     int count = 0;",
      "",
      "[Added Lines]",
      "3468:     size_t count = 0;",
      "3469:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3470:                        XML_MAX_TEXT_LENGTH :",
      "3471:                        XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "3484:      goto complex;",
      "3485:  if ((*in > 0) && (*in < 0x80)) {",
      "3486:      count = in - ctxt->input->cur;",
      "3489:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
      "3490:                 return(NULL);",
      "3491:             }",
      "",
      "[Removed Lines]",
      "3487:             if ((count > XML_MAX_NAME_LENGTH) &&",
      "3488:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "3496:             if (count > maxLength) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "3567:     const xmlChar *cur = *str;",
      "3568:     int len = 0, l;",
      "3569:     int c;",
      "3571: #ifdef DEBUG",
      "3572:     nbParseStringName++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3578:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3579:                     XML_MAX_TEXT_LENGTH :",
      "3580:                     XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3602:   if (len + 10 > max) {",
      "3603:       xmlChar *tmp;",
      "3611:       max *= 2;",
      "3612:       tmp = (xmlChar *) xmlRealloc(buffer,",
      "3613:                                max * sizeof(xmlChar));",
      "",
      "[Removed Lines]",
      "3605:                     if ((len > XML_MAX_NAME_LENGTH) &&",
      "3606:                         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "3607:                         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
      "3608:    xmlFree(buffer);",
      "3609:                         return(NULL);",
      "3610:                     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "3621:   COPY_BUF(l,buffer,len,c);",
      "3622:   cur += l;",
      "3623:   c = CUR_SCHAR(cur, l);",
      "3624:      }",
      "3625:      buffer[len] = 0;",
      "3627:      return(buffer);",
      "3628:  }",
      "3629:     }",
      "3632:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
      "3633:         return(NULL);",
      "3634:     }",
      "",
      "[Removed Lines]",
      "3630:     if ((len > XML_MAX_NAME_LENGTH) &&",
      "3631:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "3629:                 if (len > maxLength) {",
      "3630:                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
      "3631:                     xmlFree(buffer);",
      "3632:                     return(NULL);",
      "3633:                 }",
      "3640:     if (len > maxLength) {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "3655:     int len = 0, l;",
      "3656:     int c;",
      "3657:     int count = 0;",
      "3659: #ifdef DEBUG",
      "3660:     nbParseNmToken++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3667:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3668:                     XML_MAX_TEXT_LENGTH :",
      "3669:                     XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "3706:   if (len + 10 > max) {",
      "3707:       xmlChar *tmp;",
      "3715:       max *= 2;",
      "3716:       tmp = (xmlChar *) xmlRealloc(buffer,",
      "3717:                                max * sizeof(xmlChar));",
      "",
      "[Removed Lines]",
      "3709:                     if ((max > XML_MAX_NAME_LENGTH) &&",
      "3710:                         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "3711:                         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NmToken\");",
      "3712:                         xmlFree(buffer);",
      "3713:                         return(NULL);",
      "3714:                     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "3725:   COPY_BUF(l,buffer,len,c);",
      "3726:   NEXTL(l);",
      "3727:   c = CUR_CHAR(l);",
      "3728:      }",
      "3729:      buffer[len] = 0;",
      "3730:      return(buffer);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3734:                 if (len > maxLength) {",
      "3735:                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NmToken\");",
      "3736:                     xmlFree(buffer);",
      "3737:                     return(NULL);",
      "3738:                 }",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "3732:     }",
      "3733:     if (len == 0)",
      "3734:         return(NULL);",
      "3737:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NmToken\");",
      "3738:         return(NULL);",
      "3739:     }",
      "",
      "[Removed Lines]",
      "3735:     if ((len > XML_MAX_NAME_LENGTH) &&",
      "3736:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "3746:     if (len > maxLength) {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "3759:     int len = 0;",
      "3760:     int size = XML_PARSER_BUFFER_SIZE;",
      "3761:     int c, l;",
      "3762:     xmlChar stop;",
      "3763:     xmlChar *ret = NULL;",
      "3764:     const xmlChar *cur = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3772:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3773:                     XML_MAX_HUGE_LENGTH :",
      "3774:                     XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "3818:      GROW;",
      "3819:      c = CUR_CHAR(l);",
      "3820:  }",
      "3821:     }",
      "3822:     buf[len] = 0;",
      "3823:     if (ctxt->instate == XML_PARSER_EOF)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3835:         if (len > maxLength) {",
      "3836:             xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_NOT_FINISHED,",
      "3837:                            \"entity value too long\\n\");",
      "3838:             goto error;",
      "3839:         }",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "3905:     xmlChar *rep = NULL;",
      "3906:     size_t len = 0;",
      "3907:     size_t buf_size = 0;",
      "3908:     int c, l, in_space = 0;",
      "3909:     xmlChar *current = NULL;",
      "3910:     xmlEntityPtr ent;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3927:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "3928:                        XML_MAX_HUGE_LENGTH :",
      "3929:                        XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "3937:             (IS_CHAR(c)) && (c != '<')) &&",
      "3938:             (ctxt->instate != XML_PARSER_EOF)) {",
      "3949:  if (c == '&') {",
      "3950:      in_space = 0;",
      "3951:      if (NXT(1) == '#') {",
      "",
      "[Removed Lines]",
      "3943:         if ((len > XML_MAX_TEXT_LENGTH) &&",
      "3944:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "3945:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "3946:                            \"AttValue length too long\\n\");",
      "3947:             goto mem_error;",
      "3948:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "4093:  }",
      "4094:  GROW;",
      "4095:  c = CUR_CHAR(l);",
      "4096:     }",
      "4097:     if (ctxt->instate == XML_PARSER_EOF)",
      "4098:         goto error;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4108:         if (len > maxLength) {",
      "4109:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "4110:                            \"AttValue length too long\\n\");",
      "4111:             goto mem_error;",
      "4112:         }",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "4114:     } else",
      "4115:  NEXT;",
      "4127:     if (attlen != NULL) *attlen = (int) len;",
      "4128:     return(buf);",
      "",
      "[Removed Lines]",
      "4121:     if (len >= INT_MAX) {",
      "4122:         xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "4123:                        \"AttValue length too long\\n\");",
      "4124:         goto mem_error;",
      "4125:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "4194:     int len = 0;",
      "4195:     int size = XML_PARSER_BUFFER_SIZE;",
      "4196:     int cur, l;",
      "4197:     xmlChar stop;",
      "4198:     int state = ctxt->instate;",
      "4199:     int count = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4204:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "4205:                     XML_MAX_TEXT_LENGTH :",
      "4206:                     XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "4221:  if (len + 5 >= size) {",
      "4222:      xmlChar *tmp;",
      "4231:      size *= 2;",
      "4232:      tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));",
      "4233:      if (tmp == NULL) {",
      "",
      "[Removed Lines]",
      "4224:             if ((size > XML_MAX_NAME_LENGTH) &&",
      "4225:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "4226:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"SystemLiteral\");",
      "4227:                 xmlFree(buf);",
      "4228:   ctxt->instate = (xmlParserInputState) state;",
      "4229:                 return(NULL);",
      "4230:             }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "4256:      SHRINK;",
      "4257:      cur = CUR_CHAR(l);",
      "4258:  }",
      "4259:     }",
      "4260:     buf[len] = 0;",
      "4261:     ctxt->instate = (xmlParserInputState) state;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4262:         if (len > maxLength) {",
      "4263:             xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"SystemLiteral\");",
      "4264:             xmlFree(buf);",
      "4265:             ctxt->instate = (xmlParserInputState) state;",
      "4266:             return(NULL);",
      "4267:         }",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "4283:     xmlChar *buf = NULL;",
      "4284:     int len = 0;",
      "4285:     int size = XML_PARSER_BUFFER_SIZE;",
      "4286:     xmlChar cur;",
      "4287:     xmlChar stop;",
      "4288:     int count = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4295:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "4296:                     XML_MAX_TEXT_LENGTH :",
      "4297:                     XML_MAX_NAME_LENGTH;",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "4310:  if (len + 1 >= size) {",
      "4311:      xmlChar *tmp;",
      "4319:      size *= 2;",
      "4320:      tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));",
      "4321:      if (tmp == NULL) {",
      "",
      "[Removed Lines]",
      "4313:             if ((size > XML_MAX_NAME_LENGTH) &&",
      "4314:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "4315:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Public ID\");",
      "4316:                 xmlFree(buf);",
      "4317:                 return(NULL);",
      "4318:             }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "4343:      SHRINK;",
      "4344:      cur = CUR;",
      "4345:  }",
      "4346:     }",
      "4347:     buf[len] = 0;",
      "4348:     if (cur != stop) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4352:         if (len > maxLength) {",
      "4353:             xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Public ID\");",
      "4354:             xmlFree(buf);",
      "4355:             return(NULL);",
      "4356:         }",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "4742:     int r, rl;",
      "4743:     int cur, l;",
      "4744:     size_t count = 0;",
      "4745:     int inputid;",
      "4747:     inputid = ctxt->input->id;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4756:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "4757:                        XML_MAX_HUGE_LENGTH :",
      "4758:                        XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "4787:  if ((r == '-') && (q == '-')) {",
      "4788:      xmlFatalErr(ctxt, XML_ERR_HYPHEN_IN_COMMENT, NULL);",
      "4789:  }",
      "4797:  if (len + 5 >= size) {",
      "4798:      xmlChar *new_buf;",
      "4799:             size_t new_size;",
      "",
      "[Removed Lines]",
      "4790:         if ((len > XML_MAX_TEXT_LENGTH) &&",
      "4791:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "4792:             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,",
      "4793:                          \"Comment too big found\", NULL);",
      "4794:             xmlFree (buf);",
      "4795:             return;",
      "4796:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "4831:      GROW;",
      "4832:      cur = CUR_CHAR(l);",
      "4833:  }",
      "4834:     }",
      "4835:     buf[len] = 0;",
      "4836:     if (cur == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4842:         if (len > maxLength) {",
      "4843:             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,",
      "4844:                          \"Comment too big found\", NULL);",
      "4845:             xmlFree (buf);",
      "4846:             return;",
      "4847:         }",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "4875:     xmlChar *buf = NULL;",
      "4876:     size_t size = XML_PARSER_BUFFER_SIZE;",
      "4877:     size_t len = 0;",
      "4878:     xmlParserInputState state;",
      "4879:     const xmlChar *in;",
      "4880:     size_t nbchar = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4892:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "4893:                        XML_MAX_HUGE_LENGTH :",
      "4894:                        XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "4958:   buf[len] = 0;",
      "4959:      }",
      "4960:  }",
      "4963:             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,",
      "4964:                          \"Comment too big found\", NULL);",
      "4965:             xmlFree (buf);",
      "",
      "[Removed Lines]",
      "4961:         if ((len > XML_MAX_TEXT_LENGTH) &&",
      "4962:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "4978:         if (len > maxLength) {",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "5159:     xmlChar *buf = NULL;",
      "5160:     size_t len = 0;",
      "5161:     size_t size = XML_PARSER_BUFFER_SIZE;",
      "5162:     int cur, l;",
      "5163:     const xmlChar *target;",
      "5164:     xmlParserInputState state;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5178:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "5179:                        XML_MAX_HUGE_LENGTH :",
      "5180:                        XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "5234:                         return;",
      "5235:                     }",
      "5236:       count = 0;",
      "5245:   }",
      "5246:   COPY_BUF(l,buf,len,cur);",
      "5247:   NEXTL(l);",
      "",
      "[Removed Lines]",
      "5237:                     if ((len > XML_MAX_TEXT_LENGTH) &&",
      "5238:                         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "5239:                         xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
      "5240:                                           \"PI %s too big found\", target);",
      "5241:                         xmlFree(buf);",
      "5242:                         ctxt->instate = state;",
      "5243:                         return;",
      "5244:                     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "5251:       GROW;",
      "5252:       cur = CUR_CHAR(l);",
      "5253:   }",
      "5254:      }",
      "5263:      buf[len] = 0;",
      "5264:      if (cur != '?') {",
      "5265:   xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
      "",
      "[Removed Lines]",
      "5255:             if ((len > XML_MAX_TEXT_LENGTH) &&",
      "5256:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "5257:                 xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
      "5258:                                   \"PI %s too big found\", target);",
      "5259:                 xmlFree(buf);",
      "5260:                 ctxt->instate = state;",
      "5261:                 return;",
      "5262:             }",
      "",
      "[Added Lines]",
      "5265:                 if (len > maxLength) {",
      "5266:                     xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
      "5267:                                       \"PI %s too big found\", target);",
      "5268:                     xmlFree(buf);",
      "5269:                     ctxt->instate = state;",
      "5270:                     return;",
      "5271:                 }",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "8954:     const xmlChar *in = NULL, *start, *end, *last;",
      "8955:     xmlChar *ret = NULL;",
      "8956:     int line, col;",
      "8958:     GROW;",
      "8959:     in = (xmlChar *) CUR_PTR;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8967:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "8968:                     XML_MAX_HUGE_LENGTH :",
      "8969:                     XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "8993:      start = in;",
      "8994:      if (in >= end) {",
      "8995:                 GROW_PARSE_ATT_VALUE_INTERNAL(ctxt, in, start, end)",
      "8998:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "8999:                                    \"AttValue length too long\\n\");",
      "9000:                     return(NULL);",
      "",
      "[Removed Lines]",
      "8996:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
      "8997:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "9009:                 if ((in - start) > maxLength) {",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "9007:      if ((*in++ == 0x20) && (*in == 0x20)) break;",
      "9008:      if (in >= end) {",
      "9009:                 GROW_PARSE_ATT_VALUE_INTERNAL(ctxt, in, start, end)",
      "9012:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "9013:                                    \"AttValue length too long\\n\");",
      "9014:                     return(NULL);",
      "",
      "[Removed Lines]",
      "9010:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
      "9011:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "9022:                 if ((in - start) > maxLength) {",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "9041:       last = last + delta;",
      "9042:   }",
      "9043:   end = ctxt->input->end;",
      "9046:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "9047:                                    \"AttValue length too long\\n\");",
      "9048:                     return(NULL);",
      "9049:                 }",
      "9050:      }",
      "9051:  }",
      "9054:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "9055:                            \"AttValue length too long\\n\");",
      "9056:             return(NULL);",
      "",
      "[Removed Lines]",
      "9044:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
      "9045:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "9052:         if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
      "9053:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "9055:                 if ((in - start) > maxLength) {",
      "9062:         if ((in - start) > maxLength) {",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "9063:      col++;",
      "9064:      if (in >= end) {",
      "9065:                 GROW_PARSE_ATT_VALUE_INTERNAL(ctxt, in, start, end)",
      "9068:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "9069:                                    \"AttValue length too long\\n\");",
      "9070:                     return(NULL);",
      "",
      "[Removed Lines]",
      "9066:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
      "9067:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "9075:                 if ((in - start) > maxLength) {",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "9072:      }",
      "9073:  }",
      "9074:  last = in;",
      "9077:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
      "9078:                            \"AttValue length too long\\n\");",
      "9079:             return(NULL);",
      "",
      "[Removed Lines]",
      "9075:         if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
      "9076:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "",
      "[Added Lines]",
      "9083:         if ((in - start) > maxLength) {",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "9763:     int s, sl;",
      "9764:     int cur, l;",
      "9765:     int count = 0;",
      "9768:     if (CMP9(CUR_PTR, '<', '!', '[', 'C', 'D', 'A', 'T', 'A', '[')) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9773:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
      "9774:                     XML_MAX_HUGE_LENGTH :",
      "9775:                     XML_MAX_TEXT_LENGTH;",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "9796:  if (len + 5 >= size) {",
      "9797:      xmlChar *tmp;",
      "9806:      tmp = (xmlChar *) xmlRealloc(buf, size * 2 * sizeof(xmlChar));",
      "9807:      if (tmp == NULL) {",
      "9808:          xmlFree(buf);",
      "",
      "[Removed Lines]",
      "9799:             if ((size > XML_MAX_TEXT_LENGTH) &&",
      "9800:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
      "9801:                 xmlFatalErrMsgStr(ctxt, XML_ERR_CDATA_NOT_FINISHED,",
      "9802:                              \"CData section too big found\", NULL);",
      "9803:                 xmlFree (buf);",
      "9804:                 return;",
      "9805:             }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "9829:  }",
      "9830:  NEXTL(l);",
      "9831:  cur = CUR_CHAR(l);",
      "9832:     }",
      "9833:     buf[len] = 0;",
      "9834:     ctxt->instate = XML_PARSER_CONTENT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9835:         if (len > maxLength) {",
      "9836:             xmlFatalErrMsg(ctxt, XML_ERR_CDATA_NOT_FINISHED,",
      "9837:                            \"CData section too big found\\n\");",
      "9838:             xmlFree(buf);",
      "9839:             return;",
      "9840:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ffaec75809a315457891a0e54f8828bc6e056067",
      "candidate_info": {
        "commit_hash": "ffaec75809a315457891a0e54f8828bc6e056067",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/ffaec75809a315457891a0e54f8828bc6e056067",
        "files": [
          "parser.c"
        ],
        "message": "Fix integer overflows with XML_PARSE_HUGE\n\nAlso impose size limits when XML_PARSE_HUGE is set. Limit size of names\nto XML_MAX_TEXT_LENGTH (10 million bytes) and other content to\nXML_MAX_HUGE_LENGTH (1 billion bytes).\n\nMove some the length checks to the end of the respective loop to make\nthem strict.\n\nxmlParseEntityValue didn't have a length limitation at all. But without\nXML_PARSE_HUGE, this should eventually trigger an error in xmlGROW.\n\nThanks to Maddie Stone working with Google Project Zero for the report!",
        "before_after_code_files": [
          "parser.c||parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "parser.c||parser.c"
          ],
          "candidate": [
            "parser.c||parser.c"
          ]
        }
      },
      "candidate_diff": {
        "parser.c||parser.c": [
          "File: parser.c -> parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: #define XML_PARSER_BIG_ENTITY 1000",
          "116: #define XML_PARSER_LOT_ENTITY 5000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #define XML_MAX_HUGE_LENGTH 1000000000",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "562:             errmsg = \"Malformed declaration expecting version\";",
          "563:             break;",
          "564:         case XML_ERR_NAME_TOO_LONG:",
          "566:             break;",
          "567: #if 0",
          "568:         case:",
          "",
          "[Removed Lines]",
          "565:             errmsg = \"Name too long use XML_PARSE_HUGE option\";",
          "",
          "[Added Lines]",
          "567:             errmsg = \"Name too long\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3208:     int len = 0, l;",
          "3209:     int c;",
          "3210:     int count = 0;",
          "3212: #ifdef DEBUG",
          "3213:     nbParseNameComplex++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3213:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3214:                     XML_MAX_TEXT_LENGTH :",
          "3215:                     XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3273:                 if (ctxt->instate == XML_PARSER_EOF)",
          "3274:                     return(NULL);",
          "3275:      }",
          "3277:      NEXTL(l);",
          "3278:      c = CUR_CHAR(l);",
          "3279:  }",
          "",
          "[Removed Lines]",
          "3276:      len += l;",
          "",
          "[Added Lines]",
          "3281:             if (len <= INT_MAX - l)",
          "3282:          len += l;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3299:                 if (ctxt->instate == XML_PARSER_EOF)",
          "3300:                     return(NULL);",
          "3301:      }",
          "3303:      NEXTL(l);",
          "3304:      c = CUR_CHAR(l);",
          "3305:  }",
          "3306:     }",
          "3309:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Name\");",
          "3310:         return(NULL);",
          "3311:     }",
          "",
          "[Removed Lines]",
          "3302:      len += l;",
          "3307:     if ((len > XML_MAX_NAME_LENGTH) &&",
          "3308:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "3308:             if (len <= INT_MAX - l)",
          "3309:          len += l;",
          "3314:     if (len > maxLength) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3346: xmlParseName(xmlParserCtxtPtr ctxt) {",
          "3347:     const xmlChar *in;",
          "3348:     const xmlChar *ret;",
          "3351:     GROW;",
          "",
          "[Removed Lines]",
          "3349:     int count = 0;",
          "",
          "[Added Lines]",
          "3355:     size_t count = 0;",
          "3356:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3357:                        XML_MAX_TEXT_LENGTH :",
          "3358:                        XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3370:      in++;",
          "3371:  if ((*in > 0) && (*in < 0x80)) {",
          "3372:      count = in - ctxt->input->cur;",
          "3375:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Name\");",
          "3376:                 return(NULL);",
          "3377:             }",
          "",
          "[Removed Lines]",
          "3373:             if ((count > XML_MAX_NAME_LENGTH) &&",
          "3374:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "3382:             if (count > maxLength) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3392:     int len = 0, l;",
          "3393:     int c;",
          "3394:     int count = 0;",
          "3395:     size_t startPosition = 0;",
          "3397: #ifdef DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3403:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3404:                     XML_MAX_TEXT_LENGTH :",
          "3405:                     XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3413:     (xmlIsNameChar(ctxt, c) && (c != ':'))) {",
          "3414:  if (count++ > XML_PARSER_CHUNK_SIZE) {",
          "3420:      count = 0;",
          "3421:      GROW;",
          "3422:             if (ctxt->instate == XML_PARSER_EOF)",
          "3423:                 return(NULL);",
          "3424:  }",
          "3426:  NEXTL(l);",
          "3427:  c = CUR_CHAR(l);",
          "3428:  if (c == 0) {",
          "",
          "[Removed Lines]",
          "3415:             if ((len > XML_MAX_NAME_LENGTH) &&",
          "3416:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "3417:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
          "3418:                 return(NULL);",
          "3419:             }",
          "3425:  len += l;",
          "",
          "[Added Lines]",
          "3431:         if (len <= INT_MAX - l)",
          "3432:      len += l;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3440:      c = CUR_CHAR(l);",
          "3441:  }",
          "3442:     }",
          "3445:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
          "3446:         return(NULL);",
          "3447:     }",
          "",
          "[Removed Lines]",
          "3443:     if ((len > XML_MAX_NAME_LENGTH) &&",
          "3444:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "3450:     if (len > maxLength) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3467: xmlParseNCName(xmlParserCtxtPtr ctxt) {",
          "3468:     const xmlChar *in, *e;",
          "3469:     const xmlChar *ret;",
          "3472: #ifdef DEBUG",
          "3473:     nbParseNCName++;",
          "",
          "[Removed Lines]",
          "3470:     int count = 0;",
          "",
          "[Added Lines]",
          "3476:     size_t count = 0;",
          "3477:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3478:                        XML_MAX_TEXT_LENGTH :",
          "3479:                        XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3492:      goto complex;",
          "3493:  if ((*in > 0) && (*in < 0x80)) {",
          "3494:      count = in - ctxt->input->cur;",
          "3497:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
          "3498:                 return(NULL);",
          "3499:             }",
          "",
          "[Removed Lines]",
          "3495:             if ((count > XML_MAX_NAME_LENGTH) &&",
          "3496:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "3504:             if (count > maxLength) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3575:     const xmlChar *cur = *str;",
          "3576:     int len = 0, l;",
          "3577:     int c;",
          "3579: #ifdef DEBUG",
          "3580:     nbParseStringName++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3586:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3587:                     XML_MAX_TEXT_LENGTH :",
          "3588:                     XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3610:   if (len + 10 > max) {",
          "3611:       xmlChar *tmp;",
          "3619:       max *= 2;",
          "3620:       tmp = (xmlChar *) xmlRealloc(buffer, max);",
          "3621:       if (tmp == NULL) {",
          "",
          "[Removed Lines]",
          "3613:                     if ((len > XML_MAX_NAME_LENGTH) &&",
          "3614:                         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "3615:                         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
          "3616:    xmlFree(buffer);",
          "3617:                         return(NULL);",
          "3618:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3628:   COPY_BUF(l,buffer,len,c);",
          "3629:   cur += l;",
          "3630:   c = CUR_SCHAR(cur, l);",
          "3631:      }",
          "3632:      buffer[len] = 0;",
          "3634:      return(buffer);",
          "3635:  }",
          "3636:     }",
          "3639:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
          "3640:         return(NULL);",
          "3641:     }",
          "",
          "[Removed Lines]",
          "3637:     if ((len > XML_MAX_NAME_LENGTH) &&",
          "3638:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "3636:                 if (len > maxLength) {",
          "3637:                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NCName\");",
          "3638:                     xmlFree(buffer);",
          "3639:                     return(NULL);",
          "3640:                 }",
          "3647:     if (len > maxLength) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3664:     int len = 0, l;",
          "3665:     int c;",
          "3666:     int count = 0;",
          "3668: #ifdef DEBUG",
          "3669:     nbParseNmToken++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3676:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3677:                     XML_MAX_TEXT_LENGTH :",
          "3678:                     XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3715:   if (len + 10 > max) {",
          "3716:       xmlChar *tmp;",
          "3724:       max *= 2;",
          "3725:       tmp = (xmlChar *) xmlRealloc(buffer, max);",
          "3726:       if (tmp == NULL) {",
          "",
          "[Removed Lines]",
          "3718:                     if ((max > XML_MAX_NAME_LENGTH) &&",
          "3719:                         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "3720:                         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NmToken\");",
          "3721:                         xmlFree(buffer);",
          "3722:                         return(NULL);",
          "3723:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3733:   COPY_BUF(l,buffer,len,c);",
          "3734:   NEXTL(l);",
          "3735:   c = CUR_CHAR(l);",
          "3736:      }",
          "3737:      buffer[len] = 0;",
          "3738:      return(buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3742:                 if (len > maxLength) {",
          "3743:                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NmToken\");",
          "3744:                     xmlFree(buffer);",
          "3745:                     return(NULL);",
          "3746:                 }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3740:     }",
          "3741:     if (len == 0)",
          "3742:         return(NULL);",
          "3745:         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"NmToken\");",
          "3746:         return(NULL);",
          "3747:     }",
          "",
          "[Removed Lines]",
          "3743:     if ((len > XML_MAX_NAME_LENGTH) &&",
          "3744:         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "3754:     if (len > maxLength) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3769:     int len = 0;",
          "3770:     int size = XML_PARSER_BUFFER_SIZE;",
          "3771:     int c, l;",
          "3772:     xmlChar stop;",
          "3773:     xmlChar *ret = NULL;",
          "3774:     const xmlChar *cur = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3782:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3783:                     XML_MAX_HUGE_LENGTH :",
          "3784:                     XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3828:      GROW;",
          "3829:      c = CUR_CHAR(l);",
          "3830:  }",
          "3831:     }",
          "3832:     buf[len] = 0;",
          "3833:     if (ctxt->instate == XML_PARSER_EOF)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3845:         if (len > maxLength) {",
          "3846:             xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_NOT_FINISHED,",
          "3847:                            \"entity value too long\\n\");",
          "3848:             goto error;",
          "3849:         }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3915:     xmlChar *rep = NULL;",
          "3916:     size_t len = 0;",
          "3917:     size_t buf_size = 0;",
          "3918:     int c, l, in_space = 0;",
          "3919:     xmlChar *current = NULL;",
          "3920:     xmlEntityPtr ent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3937:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "3938:                        XML_MAX_HUGE_LENGTH :",
          "3939:                        XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3947:             (IS_CHAR(c)) && (c != '<')) &&",
          "3948:             (ctxt->instate != XML_PARSER_EOF)) {",
          "3959:  if (c == '&') {",
          "3960:      in_space = 0;",
          "3961:      if (NXT(1) == '#') {",
          "",
          "[Removed Lines]",
          "3953:         if ((len > XML_MAX_TEXT_LENGTH) &&",
          "3954:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "3955:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "3956:                            \"AttValue length too long\\n\");",
          "3957:             goto mem_error;",
          "3958:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4103:  }",
          "4104:  GROW;",
          "4105:  c = CUR_CHAR(l);",
          "4106:     }",
          "4107:     if (ctxt->instate == XML_PARSER_EOF)",
          "4108:         goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4118:         if (len > maxLength) {",
          "4119:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "4120:                            \"AttValue length too long\\n\");",
          "4121:             goto mem_error;",
          "4122:         }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4124:     } else",
          "4125:  NEXT;",
          "4137:     if (attlen != NULL) *attlen = len;",
          "4138:     return(buf);",
          "",
          "[Removed Lines]",
          "4131:     if (len >= INT_MAX) {",
          "4132:         xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "4133:                        \"AttValue length too long\\n\");",
          "4134:         goto mem_error;",
          "4135:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4208:     int len = 0;",
          "4209:     int size = XML_PARSER_BUFFER_SIZE;",
          "4210:     int cur, l;",
          "4211:     xmlChar stop;",
          "4212:     int state = ctxt->instate;",
          "4213:     int count = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4218:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "4219:                     XML_MAX_TEXT_LENGTH :",
          "4220:                     XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4235:  if (len + 5 >= size) {",
          "4236:      xmlChar *tmp;",
          "4245:      size *= 2;",
          "4246:      tmp = (xmlChar *) xmlRealloc(buf, size);",
          "4247:      if (tmp == NULL) {",
          "",
          "[Removed Lines]",
          "4238:             if ((size > XML_MAX_NAME_LENGTH) &&",
          "4239:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "4240:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"SystemLiteral\");",
          "4241:                 xmlFree(buf);",
          "4242:   ctxt->instate = (xmlParserInputState) state;",
          "4243:                 return(NULL);",
          "4244:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4270:      SHRINK;",
          "4271:      cur = CUR_CHAR(l);",
          "4272:  }",
          "4273:     }",
          "4274:     buf[len] = 0;",
          "4275:     ctxt->instate = (xmlParserInputState) state;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4276:         if (len > maxLength) {",
          "4277:             xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"SystemLiteral\");",
          "4278:             xmlFree(buf);",
          "4279:             ctxt->instate = (xmlParserInputState) state;",
          "4280:             return(NULL);",
          "4281:         }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4299:     xmlChar *buf = NULL;",
          "4300:     int len = 0;",
          "4301:     int size = XML_PARSER_BUFFER_SIZE;",
          "4302:     xmlChar cur;",
          "4303:     xmlChar stop;",
          "4304:     int count = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4311:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "4312:                     XML_MAX_TEXT_LENGTH :",
          "4313:                     XML_MAX_NAME_LENGTH;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4326:  if (len + 1 >= size) {",
          "4327:      xmlChar *tmp;",
          "4335:      size *= 2;",
          "4336:      tmp = (xmlChar *) xmlRealloc(buf, size);",
          "4337:      if (tmp == NULL) {",
          "",
          "[Removed Lines]",
          "4329:             if ((size > XML_MAX_NAME_LENGTH) &&",
          "4330:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "4331:                 xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Public ID\");",
          "4332:                 xmlFree(buf);",
          "4333:                 return(NULL);",
          "4334:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4359:      SHRINK;",
          "4360:      cur = CUR;",
          "4361:  }",
          "4362:     }",
          "4363:     buf[len] = 0;",
          "4364:     if (cur != stop) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4368:         if (len > maxLength) {",
          "4369:             xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, \"Public ID\");",
          "4370:             xmlFree(buf);",
          "4371:             return(NULL);",
          "4372:         }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4762:     int r, rl;",
          "4763:     int cur, l;",
          "4764:     size_t count = 0;",
          "4765:     int inputid;",
          "4767:     inputid = ctxt->input->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4776:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "4777:                        XML_MAX_HUGE_LENGTH :",
          "4778:                        XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4807:  if ((r == '-') && (q == '-')) {",
          "4808:      xmlFatalErr(ctxt, XML_ERR_HYPHEN_IN_COMMENT, NULL);",
          "4809:  }",
          "4817:  if (len + 5 >= size) {",
          "4818:      xmlChar *new_buf;",
          "4819:             size_t new_size;",
          "",
          "[Removed Lines]",
          "4810:         if ((len > XML_MAX_TEXT_LENGTH) &&",
          "4811:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "4812:             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,",
          "4813:                          \"Comment too big found\", NULL);",
          "4814:             xmlFree (buf);",
          "4815:             return;",
          "4816:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4851:      GROW;",
          "4852:      cur = CUR_CHAR(l);",
          "4853:  }",
          "4854:     }",
          "4855:     buf[len] = 0;",
          "4856:     if (cur == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4862:         if (len > maxLength) {",
          "4863:             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,",
          "4864:                          \"Comment too big found\", NULL);",
          "4865:             xmlFree (buf);",
          "4866:             return;",
          "4867:         }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4897:     xmlChar *buf = NULL;",
          "4898:     size_t size = XML_PARSER_BUFFER_SIZE;",
          "4899:     size_t len = 0;",
          "4900:     xmlParserInputState state;",
          "4901:     const xmlChar *in;",
          "4902:     size_t nbchar = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4914:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "4915:                        XML_MAX_HUGE_LENGTH :",
          "4916:                        XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4979:   buf[len] = 0;",
          "4980:      }",
          "4981:  }",
          "4984:             xmlFatalErrMsgStr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,",
          "4985:                          \"Comment too big found\", NULL);",
          "4986:             xmlFree (buf);",
          "",
          "[Removed Lines]",
          "4982:         if ((len > XML_MAX_TEXT_LENGTH) &&",
          "4983:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "4999:         if (len > maxLength) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5184:     xmlChar *buf = NULL;",
          "5185:     size_t len = 0;",
          "5186:     size_t size = XML_PARSER_BUFFER_SIZE;",
          "5187:     int cur, l;",
          "5188:     const xmlChar *target;",
          "5189:     xmlParserInputState state;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5203:     size_t maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "5204:                        XML_MAX_HUGE_LENGTH :",
          "5205:                        XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "5259:                         return;",
          "5260:                     }",
          "5261:       count = 0;",
          "5270:   }",
          "5271:   COPY_BUF(l,buf,len,cur);",
          "5272:   NEXTL(l);",
          "",
          "[Removed Lines]",
          "5262:                     if ((len > XML_MAX_TEXT_LENGTH) &&",
          "5263:                         ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "5264:                         xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
          "5265:                                           \"PI %s too big found\", target);",
          "5266:                         xmlFree(buf);",
          "5267:                         ctxt->instate = state;",
          "5268:                         return;",
          "5269:                     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5276:       GROW;",
          "5277:       cur = CUR_CHAR(l);",
          "5278:   }",
          "5279:      }",
          "5288:      buf[len] = 0;",
          "5289:      if (cur != '?') {",
          "5290:   xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
          "",
          "[Removed Lines]",
          "5280:             if ((len > XML_MAX_TEXT_LENGTH) &&",
          "5281:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "5282:                 xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
          "5283:                                   \"PI %s too big found\", target);",
          "5284:                 xmlFree(buf);",
          "5285:                 ctxt->instate = state;",
          "5286:                 return;",
          "5287:             }",
          "",
          "[Added Lines]",
          "5290:                 if (len > maxLength) {",
          "5291:                     xmlFatalErrMsgStr(ctxt, XML_ERR_PI_NOT_FINISHED,",
          "5292:                                       \"PI %s too big found\", target);",
          "5293:                     xmlFree(buf);",
          "5294:                     ctxt->instate = state;",
          "5295:                     return;",
          "5296:                 }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "9026:     const xmlChar *in = NULL, *start, *end, *last;",
          "9027:     xmlChar *ret = NULL;",
          "9028:     int line, col;",
          "9030:     GROW;",
          "9031:     in = (xmlChar *) CUR_PTR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9039:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "9040:                     XML_MAX_HUGE_LENGTH :",
          "9041:                     XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "9065:      start = in;",
          "9066:      if (in >= end) {",
          "9067:                 GROW_PARSE_ATT_VALUE_INTERNAL(ctxt, in, start, end)",
          "9070:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "9071:                                    \"AttValue length too long\\n\");",
          "9072:                     return(NULL);",
          "",
          "[Removed Lines]",
          "9068:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
          "9069:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "9081:                 if ((in - start) > maxLength) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "9079:      if ((*in++ == 0x20) && (*in == 0x20)) break;",
          "9080:      if (in >= end) {",
          "9081:                 GROW_PARSE_ATT_VALUE_INTERNAL(ctxt, in, start, end)",
          "9084:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "9085:                                    \"AttValue length too long\\n\");",
          "9086:                     return(NULL);",
          "",
          "[Removed Lines]",
          "9082:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
          "9083:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "9094:                 if ((in - start) > maxLength) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "9113:       last = last + delta;",
          "9114:   }",
          "9115:   end = ctxt->input->end;",
          "9118:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "9119:                                    \"AttValue length too long\\n\");",
          "9120:                     return(NULL);",
          "9121:                 }",
          "9122:      }",
          "9123:  }",
          "9126:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "9127:                            \"AttValue length too long\\n\");",
          "9128:             return(NULL);",
          "",
          "[Removed Lines]",
          "9116:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
          "9117:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "9124:         if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
          "9125:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "9127:                 if ((in - start) > maxLength) {",
          "9134:         if ((in - start) > maxLength) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "9135:      col++;",
          "9136:      if (in >= end) {",
          "9137:                 GROW_PARSE_ATT_VALUE_INTERNAL(ctxt, in, start, end)",
          "9140:                     xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "9141:                                    \"AttValue length too long\\n\");",
          "9142:                     return(NULL);",
          "",
          "[Removed Lines]",
          "9138:                 if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
          "9139:                     ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "9147:                 if ((in - start) > maxLength) {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "9144:      }",
          "9145:  }",
          "9146:  last = in;",
          "9149:             xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,",
          "9150:                            \"AttValue length too long\\n\");",
          "9151:             return(NULL);",
          "",
          "[Removed Lines]",
          "9147:         if (((in - start) > XML_MAX_TEXT_LENGTH) &&",
          "9148:             ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "",
          "[Added Lines]",
          "9155:         if ((in - start) > maxLength) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "9837:     int s, sl;",
          "9838:     int cur, l;",
          "9839:     int count = 0;",
          "9842:     if (CMP9(CUR_PTR, '<', '!', '[', 'C', 'D', 'A', 'T', 'A', '[')) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9847:     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?",
          "9848:                     XML_MAX_HUGE_LENGTH :",
          "9849:                     XML_MAX_TEXT_LENGTH;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "9870:  if (len + 5 >= size) {",
          "9871:      xmlChar *tmp;",
          "9880:      tmp = (xmlChar *) xmlRealloc(buf, size * 2);",
          "9881:      if (tmp == NULL) {",
          "9882:          xmlFree(buf);",
          "",
          "[Removed Lines]",
          "9873:             if ((size > XML_MAX_TEXT_LENGTH) &&",
          "9874:                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {",
          "9875:                 xmlFatalErrMsgStr(ctxt, XML_ERR_CDATA_NOT_FINISHED,",
          "9876:                              \"CData section too big found\", NULL);",
          "9877:                 xmlFree (buf);",
          "9878:                 return;",
          "9879:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "9903:  }",
          "9904:  NEXTL(l);",
          "9905:  cur = CUR_CHAR(l);",
          "9906:     }",
          "9907:     buf[len] = 0;",
          "9908:     ctxt->instate = XML_PARSER_CONTENT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9909:         if (len > maxLength) {",
          "9910:             xmlFatalErrMsg(ctxt, XML_ERR_CDATA_NOT_FINISHED,",
          "9911:                            \"CData section too big found\\n\");",
          "9912:             xmlFree(buf);",
          "9913:             return;",
          "9914:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}