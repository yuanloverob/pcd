{
  "cve_id": "CVE-2023-28095",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Versions prior to 3.1.7 and 3.2.4 have a potential issue in `msg_translator.c:2628` which might lead to a server crash. This issue was found while fuzzing the function `build_res_buf_from_sip_req` but could not be reproduced against a running instance of OpenSIPS. This issue could not be exploited against a running instance of OpenSIPS since no public function was found to make use of this vulnerable code. Even in the case of exploitation through unknown vectors, it is highly unlikely that this issue would lead to anything other than Denial of Service. This issue has been fixed in versions 3.1.7 and 3.2.4.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "9cf3dd3398719dd91207495f76d7726701c5145c",
  "patch_info": {
    "commit_hash": "9cf3dd3398719dd91207495f76d7726701c5145c",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/9cf3dd3398719dd91207495f76d7726701c5145c",
    "files": [
      "msg_translator.c"
    ],
    "message": "[core] build_res_buf_from_sip_req(): fix hdr correlation\n\nIssue discovered during OpenSIPS Security Audit 2021,\n        by Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-7pf3-24qg-8v9h",
    "before_after_code_files": [
      "msg_translator.c||msg_translator.c"
    ]
  },
  "patch_diff": {
    "msg_translator.c||msg_translator.c": [
      "File: msg_translator.c -> msg_translator.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "134:   (_dest) += (_len) ;\\",
      "135:  }while(0);",
      "140: extern char version[];",
      "141: extern int version_len;",
      "",
      "[Removed Lines]",
      "137: #define append_str_trans(_dest,_src,_len,_msg) \\",
      "138:  append_str( (_dest), (_src), (_len) );",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2490:  len += SIP_VERSION_LEN + 1/*space*/ + 3/*code*/ + 1/*space*/ +",
      "2491:   text->len + CRLF_LEN/*new line*/;",
      "2523:   }",
      "2524:  }",
      "2526:  for(lump=msg->reply_lump;lump;lump=lump->next) {",
      "2527:   len += lump->text.len;",
      "",
      "[Removed Lines]",
      "2493:  for ( hdr=msg->headers ; hdr ; hdr=hdr->next ) {",
      "2494:   switch (hdr->type) {",
      "2495:    case HDR_TO_T:",
      "2496:     if (new_tag && new_tag->len) {",
      "2497:      to_tag=get_to(msg)->tag_value;",
      "2498:      if (to_tag.len )",
      "2499:       len+=new_tag->len-to_tag.len;",
      "2500:      else",
      "2501:       len+=new_tag->len+TOTAG_TOKEN_LEN/*\";tag=\"*/;",
      "2502:     }",
      "2503:     len += hdr->len;",
      "2504:     break;",
      "2505:    case HDR_VIA_T:",
      "2507:     len+=(hdr->body.s+hdr->body.len)-hdr->name.s+CRLF_LEN;",
      "2508:     if (hdr==msg->h_via1) len += received_len+rport_len;",
      "2509:     break;",
      "2510:    case HDR_RECORDROUTE_T:",
      "2512:     if (code<180 || code>=300)",
      "2513:      break;",
      "2514:    case HDR_FROM_T:",
      "2515:    case HDR_CALLID_T:",
      "2516:    case HDR_CSEQ_T:",
      "2518:     len += hdr->len;",
      "2519:     break;",
      "2520:    default:",
      "2522:     ;",
      "",
      "[Added Lines]",
      "2490:  if (msg->to) {",
      "2491:   if (new_tag && new_tag->len) {",
      "2492:    to_tag=get_to(msg)->tag_value;",
      "2493:    if (to_tag.len )",
      "2494:     len+=new_tag->len-to_tag.len;",
      "2495:    else",
      "2496:     len+=new_tag->len+TOTAG_TOKEN_LEN/*\";tag=\"*/;",
      "2498:   len += msg->to->len;",
      "2499:  }",
      "2502:  for( hdr=msg->h_via1 ; hdr ; hdr=hdr->sibling) {",
      "2504:   len+=(hdr->body.s+hdr->body.len)-hdr->name.s+CRLF_LEN;",
      "2505:   if (hdr==msg->h_via1) len += received_len+rport_len;",
      "2508:  for( hdr=msg->record_route ; hdr ; hdr=hdr->sibling) {",
      "2510:   if (code>=180 && code<300)",
      "2511:    len += hdr->len;",
      "2512:  }",
      "2514:  if (msg->from)",
      "2515:   len += msg->from->len;",
      "2517:  if (msg->callid)",
      "2518:   len += msg->callid->len;",
      "2520:  if (msg->cseq)",
      "2521:   len += msg->cseq->len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2570:  p += text->len;",
      "2571:  memcpy( p, CRLF, CRLF_LEN );",
      "2572:  p+=CRLF_LEN;",
      "2668:  for(lump=msg->reply_lump;lump;lump=lump->next)",
      "2669:   if (lump->flags&LUMP_RPL_HDR){",
      "",
      "[Removed Lines]",
      "2574:  for ( hdr=msg->headers ; hdr ; hdr=hdr->next ) {",
      "2575:   switch (hdr->type)",
      "2576:   {",
      "2577:    case HDR_VIA_T:",
      "2578:     if (hdr==msg->h_via1){",
      "2579:      i = 0;",
      "2580:      if (received_buf) {",
      "2581:       i = msg->via1->host.s - msg->via1->hdr.s +",
      "2582:        msg->via1->host.len + (msg->via1->port?",
      "2583:        msg->via1->port_str.len + 1 : 0);",
      "2585:       append_str( p, hdr->name.s, i);",
      "2587:       append_str( p, received_buf, received_len);",
      "2588:      }",
      "2589:      if (rport_buf){",
      "2592:        append_str_trans( p, hdr->name.s+i ,",
      "2593:         msg->via1->rport->start-hdr->name.s-1-i,msg);",
      "2595:        append_str(p, rport_buf, rport_len);",
      "2597:        append_str_trans(p, msg->via1->rport->start+",
      "2598:             msg->via1->rport->size,",
      "2599:             hdr->body.s+hdr->body.len-",
      "2600:             msg->via1->rport->start-",
      "2601:             msg->via1->rport->size, msg);",
      "2603:        append_str(p, rport_buf, rport_len);",
      "2604:        append_str_trans( p, hdr->name.s+i ,",
      "2605:         (hdr->body.s+hdr->body.len)-hdr->name.s-i,msg);",
      "2606:       }",
      "2607:      }else{",
      "2609:       append_str_trans( p, hdr->name.s+i ,",
      "2610:        (hdr->body.s+hdr->body.len)-hdr->name.s-i, msg);",
      "2611:      }",
      "2612:     }else{",
      "2614:      append_str_trans( p, hdr->name.s,",
      "2615:        (hdr->body.s+hdr->body.len)-hdr->name.s, msg);",
      "2616:     }",
      "2617:     append_str( p, CRLF,CRLF_LEN);",
      "2618:     break;",
      "2619:    case HDR_RECORDROUTE_T:",
      "2621:     if (code<180 || code>=300) break;",
      "2622:     append_str(p, hdr->name.s, hdr->len);",
      "2623:     break;",
      "2624:    case HDR_TO_T:",
      "2625:     if (new_tag && new_tag->len){",
      "2628:       append_str( p, hdr->name.s, to_tag.s-hdr->name.s);",
      "2630:       bmark->to_tag_val.s=p;",
      "2631:       bmark->to_tag_val.len=new_tag->len;",
      "2632:       append_str( p, new_tag->s,new_tag->len);",
      "2634:       append_str( p, to_tag.s+to_tag.len,",
      "2635:        hdr->name.s+hdr->len-(to_tag.s+to_tag.len));",
      "2637:       after_body=hdr->body.s+hdr->body.len;",
      "2638:       append_str( p, hdr->name.s, after_body-hdr->name.s);",
      "2639:       append_str(p, TOTAG_TOKEN, TOTAG_TOKEN_LEN);",
      "2640:       bmark->to_tag_val.s=p;",
      "2641:       bmark->to_tag_val.len=new_tag->len;",
      "2642:       append_str( p, new_tag->s,new_tag->len);",
      "2643:       append_str( p, after_body,",
      "2644:           hdr->name.s+hdr->len-after_body);",
      "2645:      }",
      "2646:      break;",
      "2648:     totags=((struct to_body*)(hdr->parsed))->tag_value.s;",
      "2649:     if (totags) {",
      "2650:      bmark->to_tag_val.s=p+(totags-hdr->name.s);",
      "2651:      bmark->to_tag_val.len=",
      "2652:        ((struct to_body*)(hdr->parsed))->tag_value.len;",
      "2653:     } else {",
      "2654:      bmark->to_tag_val.s = NULL;",
      "2655:      bmark->to_tag_val.len = 0;",
      "2656:     }",
      "2657:    case HDR_FROM_T:",
      "2658:    case HDR_CALLID_T:",
      "2659:    case HDR_CSEQ_T:",
      "2660:      append_str(p, hdr->name.s, hdr->len);",
      "2661:      break;",
      "2662:    default:",
      "2664:     ;",
      "",
      "[Added Lines]",
      "2572:  if ( (hdr=msg->h_via1)!=NULL ) {",
      "2574:   i = 0;",
      "2575:   if (received_buf) {",
      "2576:    i = msg->via1->host.s - msg->via1->hdr.s +",
      "2577:     msg->via1->host.len + (msg->via1->port?",
      "2578:     msg->via1->port_str.len + 1 : 0);",
      "2580:    append_str( p, hdr->name.s, i);",
      "2582:    append_str( p, received_buf, received_len);",
      "2583:   }",
      "2584:   if (rport_buf){",
      "2587:     append_str( p, hdr->name.s+i ,",
      "2588:      msg->via1->rport->start-hdr->name.s-1-i);",
      "2590:     append_str(p, rport_buf, rport_len);",
      "2592:     append_str(p, msg->via1->rport->start+",
      "2593:          msg->via1->rport->size,",
      "2594:          hdr->body.s+hdr->body.len-",
      "2595:          msg->via1->rport->start-",
      "2596:          msg->via1->rport->size);",
      "2598:     append_str(p, rport_buf, rport_len);",
      "2599:     append_str( p, hdr->name.s+i ,",
      "2600:      (hdr->body.s+hdr->body.len)-hdr->name.s-i);",
      "2601:    }",
      "2602:   }else{",
      "2604:    append_str( p, hdr->name.s+i ,",
      "2605:     (hdr->body.s+hdr->body.len)-hdr->name.s-i);",
      "2606:   }",
      "2607:   append_str( p, CRLF,CRLF_LEN);",
      "2609:   for( hdr=hdr->sibling ; hdr ; hdr=hdr->sibling) {",
      "2611:    append_str( p, hdr->name.s,",
      "2612:      (hdr->body.s+hdr->body.len)-hdr->name.s);",
      "2613:    append_str( p, CRLF,CRLF_LEN);",
      "2614:   }",
      "2615:  }",
      "2617:  for( hdr=msg->record_route ; hdr ; hdr=hdr->sibling) {",
      "2619:   if (code>=180 && code<300)",
      "2620:    append_str(p, hdr->name.s, hdr->len);",
      "2621:  }",
      "2623:  if ( (hdr=msg->to)!=NULL ) {",
      "2624:   if (new_tag && new_tag->len){",
      "2627:     append_str( p, hdr->name.s, to_tag.s-hdr->name.s);",
      "2629:     bmark->to_tag_val.s=p;",
      "2630:     bmark->to_tag_val.len=new_tag->len;",
      "2631:     append_str( p, new_tag->s,new_tag->len);",
      "2633:     append_str( p, to_tag.s+to_tag.len,",
      "2634:      hdr->name.s+hdr->len-(to_tag.s+to_tag.len));",
      "2636:     after_body=hdr->body.s+hdr->body.len;",
      "2637:     append_str( p, hdr->name.s, after_body-hdr->name.s);",
      "2638:     append_str(p, TOTAG_TOKEN, TOTAG_TOKEN_LEN);",
      "2639:     bmark->to_tag_val.s=p;",
      "2640:     bmark->to_tag_val.len=new_tag->len;",
      "2641:     append_str( p, new_tag->s,new_tag->len);",
      "2642:     append_str( p, after_body,",
      "2643:         hdr->name.s+hdr->len-after_body);",
      "2644:    }",
      "2645:   } else {",
      "2647:    totags=((struct to_body*)(hdr->parsed))->tag_value.s;",
      "2648:    if (totags) {",
      "2649:     bmark->to_tag_val.s=p+(totags-hdr->name.s);",
      "2650:     bmark->to_tag_val.len=",
      "2651:      ((struct to_body*)(hdr->parsed))->tag_value.len;",
      "2652:    } else {",
      "2653:     bmark->to_tag_val.s = NULL;",
      "2654:     bmark->to_tag_val.len = 0;",
      "2655:    }",
      "2656:    append_str(p, hdr->name.s, hdr->len);",
      "2657:   }",
      "2658:  }",
      "2660:  if (msg->from)",
      "2661:   append_str(p, msg->from->name.s, msg->from->len);",
      "2663:  if (msg->callid)",
      "2664:   append_str(p, msg->callid->name.s, msg->callid->len);",
      "2666:  if (msg->cseq)",
      "2667:   append_str(p, msg->cseq->name.s, msg->cseq->len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "107dcba5b0d54875b0ddbcfe232bdd9f5d405d33",
      "candidate_info": {
        "commit_hash": "107dcba5b0d54875b0ddbcfe232bdd9f5d405d33",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/107dcba5b0d54875b0ddbcfe232bdd9f5d405d33",
        "files": [
          "msg_translator.c"
        ],
        "message": "[core] build_res_buf_from_sip_req(): fix hdr correlation\n\nIssue discovered during OpenSIPS Security Audit 2021,\n        by Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-7pf3-24qg-8v9h\n(cherry picked from commit 9cf3dd3398719dd91207495f76d7726701c5145c)",
        "before_after_code_files": [
          "msg_translator.c||msg_translator.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "msg_translator.c||msg_translator.c"
          ],
          "candidate": [
            "msg_translator.c||msg_translator.c"
          ]
        }
      },
      "candidate_diff": {
        "msg_translator.c||msg_translator.c": [
          "File: msg_translator.c -> msg_translator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   (_dest) += (_len) ;\\",
          "135:  }while(0);",
          "140: extern char version[];",
          "141: extern int version_len;",
          "",
          "[Removed Lines]",
          "137: #define append_str_trans(_dest,_src,_len,_msg) \\",
          "138:  append_str( (_dest), (_src), (_len) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2490:  len += SIP_VERSION_LEN + 1/*space*/ + 3/*code*/ + 1/*space*/ +",
          "2491:   text->len + CRLF_LEN/*new line*/;",
          "2523:   }",
          "2524:  }",
          "2526:  for(lump=msg->reply_lump;lump;lump=lump->next) {",
          "2527:   len += lump->text.len;",
          "",
          "[Removed Lines]",
          "2493:  for ( hdr=msg->headers ; hdr ; hdr=hdr->next ) {",
          "2494:   switch (hdr->type) {",
          "2495:    case HDR_TO_T:",
          "2496:     if (new_tag && new_tag->len) {",
          "2497:      to_tag=get_to(msg)->tag_value;",
          "2498:      if (to_tag.len )",
          "2499:       len+=new_tag->len-to_tag.len;",
          "2500:      else",
          "2501:       len+=new_tag->len+TOTAG_TOKEN_LEN/*\";tag=\"*/;",
          "2502:     }",
          "2503:     len += hdr->len;",
          "2504:     break;",
          "2505:    case HDR_VIA_T:",
          "2507:     len+=(hdr->body.s+hdr->body.len)-hdr->name.s+CRLF_LEN;",
          "2508:     if (hdr==msg->h_via1) len += received_len+rport_len;",
          "2509:     break;",
          "2510:    case HDR_RECORDROUTE_T:",
          "2512:     if (code<180 || code>=300)",
          "2513:      break;",
          "2514:    case HDR_FROM_T:",
          "2515:    case HDR_CALLID_T:",
          "2516:    case HDR_CSEQ_T:",
          "2518:     len += hdr->len;",
          "2519:     break;",
          "2520:    default:",
          "2522:     ;",
          "",
          "[Added Lines]",
          "2490:  if (msg->to) {",
          "2491:   if (new_tag && new_tag->len) {",
          "2492:    to_tag=get_to(msg)->tag_value;",
          "2493:    if (to_tag.len )",
          "2494:     len+=new_tag->len-to_tag.len;",
          "2495:    else",
          "2496:     len+=new_tag->len+TOTAG_TOKEN_LEN/*\";tag=\"*/;",
          "2498:   len += msg->to->len;",
          "2499:  }",
          "2502:  for( hdr=msg->h_via1 ; hdr ; hdr=hdr->sibling) {",
          "2504:   len+=(hdr->body.s+hdr->body.len)-hdr->name.s+CRLF_LEN;",
          "2505:   if (hdr==msg->h_via1) len += received_len+rport_len;",
          "2508:  for( hdr=msg->record_route ; hdr ; hdr=hdr->sibling) {",
          "2510:   if (code>=180 && code<300)",
          "2511:    len += hdr->len;",
          "2512:  }",
          "2514:  if (msg->from)",
          "2515:   len += msg->from->len;",
          "2517:  if (msg->callid)",
          "2518:   len += msg->callid->len;",
          "2520:  if (msg->cseq)",
          "2521:   len += msg->cseq->len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2570:  p += text->len;",
          "2571:  memcpy( p, CRLF, CRLF_LEN );",
          "2572:  p+=CRLF_LEN;",
          "2668:  for(lump=msg->reply_lump;lump;lump=lump->next)",
          "2669:   if (lump->flags&LUMP_RPL_HDR){",
          "",
          "[Removed Lines]",
          "2574:  for ( hdr=msg->headers ; hdr ; hdr=hdr->next ) {",
          "2575:   switch (hdr->type)",
          "2576:   {",
          "2577:    case HDR_VIA_T:",
          "2578:     if (hdr==msg->h_via1){",
          "2579:      i = 0;",
          "2580:      if (received_buf) {",
          "2581:       i = msg->via1->host.s - msg->via1->hdr.s +",
          "2582:        msg->via1->host.len + (msg->via1->port?",
          "2583:        msg->via1->port_str.len + 1 : 0);",
          "2585:       append_str( p, hdr->name.s, i);",
          "2587:       append_str( p, received_buf, received_len);",
          "2588:      }",
          "2589:      if (rport_buf){",
          "2592:        append_str_trans( p, hdr->name.s+i ,",
          "2593:         msg->via1->rport->start-hdr->name.s-1-i,msg);",
          "2595:        append_str(p, rport_buf, rport_len);",
          "2597:        append_str_trans(p, msg->via1->rport->start+",
          "2598:             msg->via1->rport->size,",
          "2599:             hdr->body.s+hdr->body.len-",
          "2600:             msg->via1->rport->start-",
          "2601:             msg->via1->rport->size, msg);",
          "2603:        append_str(p, rport_buf, rport_len);",
          "2604:        append_str_trans( p, hdr->name.s+i ,",
          "2605:         (hdr->body.s+hdr->body.len)-hdr->name.s-i,msg);",
          "2606:       }",
          "2607:      }else{",
          "2609:       append_str_trans( p, hdr->name.s+i ,",
          "2610:        (hdr->body.s+hdr->body.len)-hdr->name.s-i, msg);",
          "2611:      }",
          "2612:     }else{",
          "2614:      append_str_trans( p, hdr->name.s,",
          "2615:        (hdr->body.s+hdr->body.len)-hdr->name.s, msg);",
          "2616:     }",
          "2617:     append_str( p, CRLF,CRLF_LEN);",
          "2618:     break;",
          "2619:    case HDR_RECORDROUTE_T:",
          "2621:     if (code<180 || code>=300) break;",
          "2622:     append_str(p, hdr->name.s, hdr->len);",
          "2623:     break;",
          "2624:    case HDR_TO_T:",
          "2625:     if (new_tag && new_tag->len){",
          "2628:       append_str( p, hdr->name.s, to_tag.s-hdr->name.s);",
          "2630:       bmark->to_tag_val.s=p;",
          "2631:       bmark->to_tag_val.len=new_tag->len;",
          "2632:       append_str( p, new_tag->s,new_tag->len);",
          "2634:       append_str( p, to_tag.s+to_tag.len,",
          "2635:        hdr->name.s+hdr->len-(to_tag.s+to_tag.len));",
          "2637:       after_body=hdr->body.s+hdr->body.len;",
          "2638:       append_str( p, hdr->name.s, after_body-hdr->name.s);",
          "2639:       append_str(p, TOTAG_TOKEN, TOTAG_TOKEN_LEN);",
          "2640:       bmark->to_tag_val.s=p;",
          "2641:       bmark->to_tag_val.len=new_tag->len;",
          "2642:       append_str( p, new_tag->s,new_tag->len);",
          "2643:       append_str( p, after_body,",
          "2644:           hdr->name.s+hdr->len-after_body);",
          "2645:      }",
          "2646:      break;",
          "2648:     totags=((struct to_body*)(hdr->parsed))->tag_value.s;",
          "2649:     if (totags) {",
          "2650:      bmark->to_tag_val.s=p+(totags-hdr->name.s);",
          "2651:      bmark->to_tag_val.len=",
          "2652:        ((struct to_body*)(hdr->parsed))->tag_value.len;",
          "2653:     } else {",
          "2654:      bmark->to_tag_val.s = NULL;",
          "2655:      bmark->to_tag_val.len = 0;",
          "2656:     }",
          "2657:    case HDR_FROM_T:",
          "2658:    case HDR_CALLID_T:",
          "2659:    case HDR_CSEQ_T:",
          "2660:      append_str(p, hdr->name.s, hdr->len);",
          "2661:      break;",
          "2662:    default:",
          "2664:     ;",
          "",
          "[Added Lines]",
          "2572:  if ( (hdr=msg->h_via1)!=NULL ) {",
          "2574:   i = 0;",
          "2575:   if (received_buf) {",
          "2576:    i = msg->via1->host.s - msg->via1->hdr.s +",
          "2577:     msg->via1->host.len + (msg->via1->port?",
          "2578:     msg->via1->port_str.len + 1 : 0);",
          "2580:    append_str( p, hdr->name.s, i);",
          "2582:    append_str( p, received_buf, received_len);",
          "2583:   }",
          "2584:   if (rport_buf){",
          "2587:     append_str( p, hdr->name.s+i ,",
          "2588:      msg->via1->rport->start-hdr->name.s-1-i);",
          "2590:     append_str(p, rport_buf, rport_len);",
          "2592:     append_str(p, msg->via1->rport->start+",
          "2593:          msg->via1->rport->size,",
          "2594:          hdr->body.s+hdr->body.len-",
          "2595:          msg->via1->rport->start-",
          "2596:          msg->via1->rport->size);",
          "2598:     append_str(p, rport_buf, rport_len);",
          "2599:     append_str( p, hdr->name.s+i ,",
          "2600:      (hdr->body.s+hdr->body.len)-hdr->name.s-i);",
          "2601:    }",
          "2602:   }else{",
          "2604:    append_str( p, hdr->name.s+i ,",
          "2605:     (hdr->body.s+hdr->body.len)-hdr->name.s-i);",
          "2606:   }",
          "2607:   append_str( p, CRLF,CRLF_LEN);",
          "2609:   for( hdr=hdr->sibling ; hdr ; hdr=hdr->sibling) {",
          "2611:    append_str( p, hdr->name.s,",
          "2612:      (hdr->body.s+hdr->body.len)-hdr->name.s);",
          "2613:    append_str( p, CRLF,CRLF_LEN);",
          "2614:   }",
          "2615:  }",
          "2617:  for( hdr=msg->record_route ; hdr ; hdr=hdr->sibling) {",
          "2619:   if (code>=180 && code<300)",
          "2620:    append_str(p, hdr->name.s, hdr->len);",
          "2621:  }",
          "2623:  if ( (hdr=msg->to)!=NULL ) {",
          "2624:   if (new_tag && new_tag->len){",
          "2627:     append_str( p, hdr->name.s, to_tag.s-hdr->name.s);",
          "2629:     bmark->to_tag_val.s=p;",
          "2630:     bmark->to_tag_val.len=new_tag->len;",
          "2631:     append_str( p, new_tag->s,new_tag->len);",
          "2633:     append_str( p, to_tag.s+to_tag.len,",
          "2634:      hdr->name.s+hdr->len-(to_tag.s+to_tag.len));",
          "2636:     after_body=hdr->body.s+hdr->body.len;",
          "2637:     append_str( p, hdr->name.s, after_body-hdr->name.s);",
          "2638:     append_str(p, TOTAG_TOKEN, TOTAG_TOKEN_LEN);",
          "2639:     bmark->to_tag_val.s=p;",
          "2640:     bmark->to_tag_val.len=new_tag->len;",
          "2641:     append_str( p, new_tag->s,new_tag->len);",
          "2642:     append_str( p, after_body,",
          "2643:         hdr->name.s+hdr->len-after_body);",
          "2644:    }",
          "2645:   } else {",
          "2647:    totags=((struct to_body*)(hdr->parsed))->tag_value.s;",
          "2648:    if (totags) {",
          "2649:     bmark->to_tag_val.s=p+(totags-hdr->name.s);",
          "2650:     bmark->to_tag_val.len=",
          "2651:      ((struct to_body*)(hdr->parsed))->tag_value.len;",
          "2652:    } else {",
          "2653:     bmark->to_tag_val.s = NULL;",
          "2654:     bmark->to_tag_val.len = 0;",
          "2655:    }",
          "2656:    append_str(p, hdr->name.s, hdr->len);",
          "2657:   }",
          "2658:  }",
          "2660:  if (msg->from)",
          "2661:   append_str(p, msg->from->name.s, msg->from->len);",
          "2663:  if (msg->callid)",
          "2664:   append_str(p, msg->callid->name.s, msg->callid->len);",
          "2666:  if (msg->cseq)",
          "2667:   append_str(p, msg->cseq->name.s, msg->cseq->len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b84ad085c79d616e5d5dfb9154042f9e3c7cb97",
      "candidate_info": {
        "commit_hash": "2b84ad085c79d616e5d5dfb9154042f9e3c7cb97",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/2b84ad085c79d616e5d5dfb9154042f9e3c7cb97",
        "files": [
          "msg_translator.c"
        ],
        "message": "[core] build_res_buf_from_sip_req(): fix hdr correlation\n\nIssue discovered during OpenSIPS Security Audit 2021,\n        by Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-7pf3-24qg-8v9h\n(cherry picked from commit 9cf3dd3398719dd91207495f76d7726701c5145c)",
        "before_after_code_files": [
          "msg_translator.c||msg_translator.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "msg_translator.c||msg_translator.c"
          ],
          "candidate": [
            "msg_translator.c||msg_translator.c"
          ]
        }
      },
      "candidate_diff": {
        "msg_translator.c||msg_translator.c": [
          "File: msg_translator.c -> msg_translator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   (_dest) += (_len) ;\\",
          "135:  }while(0);",
          "140: extern char version[];",
          "141: extern int version_len;",
          "",
          "[Removed Lines]",
          "137: #define append_str_trans(_dest,_src,_len,_msg) \\",
          "138:  append_str( (_dest), (_src), (_len) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2490:  len += SIP_VERSION_LEN + 1/*space*/ + 3/*code*/ + 1/*space*/ +",
          "2491:   text->len + CRLF_LEN/*new line*/;",
          "2523:   }",
          "2524:  }",
          "2526:  for(lump=msg->reply_lump;lump;lump=lump->next) {",
          "2527:   len += lump->text.len;",
          "",
          "[Removed Lines]",
          "2493:  for ( hdr=msg->headers ; hdr ; hdr=hdr->next ) {",
          "2494:   switch (hdr->type) {",
          "2495:    case HDR_TO_T:",
          "2496:     if (new_tag && new_tag->len) {",
          "2497:      to_tag=get_to(msg)->tag_value;",
          "2498:      if (to_tag.len )",
          "2499:       len+=new_tag->len-to_tag.len;",
          "2500:      else",
          "2501:       len+=new_tag->len+TOTAG_TOKEN_LEN/*\";tag=\"*/;",
          "2502:     }",
          "2503:     len += hdr->len;",
          "2504:     break;",
          "2505:    case HDR_VIA_T:",
          "2507:     len+=(hdr->body.s+hdr->body.len)-hdr->name.s+CRLF_LEN;",
          "2508:     if (hdr==msg->h_via1) len += received_len+rport_len;",
          "2509:     break;",
          "2510:    case HDR_RECORDROUTE_T:",
          "2512:     if (code<180 || code>=300)",
          "2513:      break;",
          "2514:    case HDR_FROM_T:",
          "2515:    case HDR_CALLID_T:",
          "2516:    case HDR_CSEQ_T:",
          "2518:     len += hdr->len;",
          "2519:     break;",
          "2520:    default:",
          "2522:     ;",
          "",
          "[Added Lines]",
          "2490:  if (msg->to) {",
          "2491:   if (new_tag && new_tag->len) {",
          "2492:    to_tag=get_to(msg)->tag_value;",
          "2493:    if (to_tag.len )",
          "2494:     len+=new_tag->len-to_tag.len;",
          "2495:    else",
          "2496:     len+=new_tag->len+TOTAG_TOKEN_LEN/*\";tag=\"*/;",
          "2498:   len += msg->to->len;",
          "2499:  }",
          "2502:  for( hdr=msg->h_via1 ; hdr ; hdr=hdr->sibling) {",
          "2504:   len+=(hdr->body.s+hdr->body.len)-hdr->name.s+CRLF_LEN;",
          "2505:   if (hdr==msg->h_via1) len += received_len+rport_len;",
          "2508:  for( hdr=msg->record_route ; hdr ; hdr=hdr->sibling) {",
          "2510:   if (code>=180 && code<300)",
          "2511:    len += hdr->len;",
          "2512:  }",
          "2514:  if (msg->from)",
          "2515:   len += msg->from->len;",
          "2517:  if (msg->callid)",
          "2518:   len += msg->callid->len;",
          "2520:  if (msg->cseq)",
          "2521:   len += msg->cseq->len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2570:  p += text->len;",
          "2571:  memcpy( p, CRLF, CRLF_LEN );",
          "2572:  p+=CRLF_LEN;",
          "2668:  for(lump=msg->reply_lump;lump;lump=lump->next)",
          "2669:   if (lump->flags&LUMP_RPL_HDR){",
          "",
          "[Removed Lines]",
          "2574:  for ( hdr=msg->headers ; hdr ; hdr=hdr->next ) {",
          "2575:   switch (hdr->type)",
          "2576:   {",
          "2577:    case HDR_VIA_T:",
          "2578:     if (hdr==msg->h_via1){",
          "2579:      i = 0;",
          "2580:      if (received_buf) {",
          "2581:       i = msg->via1->host.s - msg->via1->hdr.s +",
          "2582:        msg->via1->host.len + (msg->via1->port?",
          "2583:        msg->via1->port_str.len + 1 : 0);",
          "2585:       append_str( p, hdr->name.s, i);",
          "2587:       append_str( p, received_buf, received_len);",
          "2588:      }",
          "2589:      if (rport_buf){",
          "2592:        append_str_trans( p, hdr->name.s+i ,",
          "2593:         msg->via1->rport->start-hdr->name.s-1-i,msg);",
          "2595:        append_str(p, rport_buf, rport_len);",
          "2597:        append_str_trans(p, msg->via1->rport->start+",
          "2598:             msg->via1->rport->size,",
          "2599:             hdr->body.s+hdr->body.len-",
          "2600:             msg->via1->rport->start-",
          "2601:             msg->via1->rport->size, msg);",
          "2603:        append_str(p, rport_buf, rport_len);",
          "2604:        append_str_trans( p, hdr->name.s+i ,",
          "2605:         (hdr->body.s+hdr->body.len)-hdr->name.s-i,msg);",
          "2606:       }",
          "2607:      }else{",
          "2609:       append_str_trans( p, hdr->name.s+i ,",
          "2610:        (hdr->body.s+hdr->body.len)-hdr->name.s-i, msg);",
          "2611:      }",
          "2612:     }else{",
          "2614:      append_str_trans( p, hdr->name.s,",
          "2615:        (hdr->body.s+hdr->body.len)-hdr->name.s, msg);",
          "2616:     }",
          "2617:     append_str( p, CRLF,CRLF_LEN);",
          "2618:     break;",
          "2619:    case HDR_RECORDROUTE_T:",
          "2621:     if (code<180 || code>=300) break;",
          "2622:     append_str(p, hdr->name.s, hdr->len);",
          "2623:     break;",
          "2624:    case HDR_TO_T:",
          "2625:     if (new_tag && new_tag->len){",
          "2628:       append_str( p, hdr->name.s, to_tag.s-hdr->name.s);",
          "2630:       bmark->to_tag_val.s=p;",
          "2631:       bmark->to_tag_val.len=new_tag->len;",
          "2632:       append_str( p, new_tag->s,new_tag->len);",
          "2634:       append_str( p, to_tag.s+to_tag.len,",
          "2635:        hdr->name.s+hdr->len-(to_tag.s+to_tag.len));",
          "2637:       after_body=hdr->body.s+hdr->body.len;",
          "2638:       append_str( p, hdr->name.s, after_body-hdr->name.s);",
          "2639:       append_str(p, TOTAG_TOKEN, TOTAG_TOKEN_LEN);",
          "2640:       bmark->to_tag_val.s=p;",
          "2641:       bmark->to_tag_val.len=new_tag->len;",
          "2642:       append_str( p, new_tag->s,new_tag->len);",
          "2643:       append_str( p, after_body,",
          "2644:           hdr->name.s+hdr->len-after_body);",
          "2645:      }",
          "2646:      break;",
          "2648:     totags=((struct to_body*)(hdr->parsed))->tag_value.s;",
          "2649:     if (totags) {",
          "2650:      bmark->to_tag_val.s=p+(totags-hdr->name.s);",
          "2651:      bmark->to_tag_val.len=",
          "2652:        ((struct to_body*)(hdr->parsed))->tag_value.len;",
          "2653:     } else {",
          "2654:      bmark->to_tag_val.s = NULL;",
          "2655:      bmark->to_tag_val.len = 0;",
          "2656:     }",
          "2657:    case HDR_FROM_T:",
          "2658:    case HDR_CALLID_T:",
          "2659:    case HDR_CSEQ_T:",
          "2660:      append_str(p, hdr->name.s, hdr->len);",
          "2661:      break;",
          "2662:    default:",
          "2664:     ;",
          "",
          "[Added Lines]",
          "2572:  if ( (hdr=msg->h_via1)!=NULL ) {",
          "2574:   i = 0;",
          "2575:   if (received_buf) {",
          "2576:    i = msg->via1->host.s - msg->via1->hdr.s +",
          "2577:     msg->via1->host.len + (msg->via1->port?",
          "2578:     msg->via1->port_str.len + 1 : 0);",
          "2580:    append_str( p, hdr->name.s, i);",
          "2582:    append_str( p, received_buf, received_len);",
          "2583:   }",
          "2584:   if (rport_buf){",
          "2587:     append_str( p, hdr->name.s+i ,",
          "2588:      msg->via1->rport->start-hdr->name.s-1-i);",
          "2590:     append_str(p, rport_buf, rport_len);",
          "2592:     append_str(p, msg->via1->rport->start+",
          "2593:          msg->via1->rport->size,",
          "2594:          hdr->body.s+hdr->body.len-",
          "2595:          msg->via1->rport->start-",
          "2596:          msg->via1->rport->size);",
          "2598:     append_str(p, rport_buf, rport_len);",
          "2599:     append_str( p, hdr->name.s+i ,",
          "2600:      (hdr->body.s+hdr->body.len)-hdr->name.s-i);",
          "2601:    }",
          "2602:   }else{",
          "2604:    append_str( p, hdr->name.s+i ,",
          "2605:     (hdr->body.s+hdr->body.len)-hdr->name.s-i);",
          "2606:   }",
          "2607:   append_str( p, CRLF,CRLF_LEN);",
          "2609:   for( hdr=hdr->sibling ; hdr ; hdr=hdr->sibling) {",
          "2611:    append_str( p, hdr->name.s,",
          "2612:      (hdr->body.s+hdr->body.len)-hdr->name.s);",
          "2613:    append_str( p, CRLF,CRLF_LEN);",
          "2614:   }",
          "2615:  }",
          "2617:  for( hdr=msg->record_route ; hdr ; hdr=hdr->sibling) {",
          "2619:   if (code>=180 && code<300)",
          "2620:    append_str(p, hdr->name.s, hdr->len);",
          "2621:  }",
          "2623:  if ( (hdr=msg->to)!=NULL ) {",
          "2624:   if (new_tag && new_tag->len){",
          "2627:     append_str( p, hdr->name.s, to_tag.s-hdr->name.s);",
          "2629:     bmark->to_tag_val.s=p;",
          "2630:     bmark->to_tag_val.len=new_tag->len;",
          "2631:     append_str( p, new_tag->s,new_tag->len);",
          "2633:     append_str( p, to_tag.s+to_tag.len,",
          "2634:      hdr->name.s+hdr->len-(to_tag.s+to_tag.len));",
          "2636:     after_body=hdr->body.s+hdr->body.len;",
          "2637:     append_str( p, hdr->name.s, after_body-hdr->name.s);",
          "2638:     append_str(p, TOTAG_TOKEN, TOTAG_TOKEN_LEN);",
          "2639:     bmark->to_tag_val.s=p;",
          "2640:     bmark->to_tag_val.len=new_tag->len;",
          "2641:     append_str( p, new_tag->s,new_tag->len);",
          "2642:     append_str( p, after_body,",
          "2643:         hdr->name.s+hdr->len-after_body);",
          "2644:    }",
          "2645:   } else {",
          "2647:    totags=((struct to_body*)(hdr->parsed))->tag_value.s;",
          "2648:    if (totags) {",
          "2649:     bmark->to_tag_val.s=p+(totags-hdr->name.s);",
          "2650:     bmark->to_tag_val.len=",
          "2651:      ((struct to_body*)(hdr->parsed))->tag_value.len;",
          "2652:    } else {",
          "2653:     bmark->to_tag_val.s = NULL;",
          "2654:     bmark->to_tag_val.len = 0;",
          "2655:    }",
          "2656:    append_str(p, hdr->name.s, hdr->len);",
          "2657:   }",
          "2658:  }",
          "2660:  if (msg->from)",
          "2661:   append_str(p, msg->from->name.s, msg->from->len);",
          "2663:  if (msg->callid)",
          "2664:   append_str(p, msg->callid->name.s, msg->callid->len);",
          "2666:  if (msg->cseq)",
          "2667:   append_str(p, msg->cseq->name.s, msg->cseq->len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}