{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "0a77058b7971ba140c1f9db443e536ea5f1d71aa",
      "candidate_info": {
        "commit_hash": "0a77058b7971ba140c1f9db443e536ea5f1d71aa",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0a77058b7971ba140c1f9db443e536ea5f1d71aa",
        "files": [
          "Doc/c-api/dict.rst",
          "Doc/howto/free-threading-extensions.rst",
          "Misc/NEWS.d/next/C API/2024-06-21-16-41-21.gh-issue-120858.Z5_-Mn.rst",
          "Objects/dictobject.c"
        ],
        "message": "[3.13] gh-120858: PyDict_Next should not lock the dict (GH-120859) (#120964)\n\nPyDict_Next no longer locks the dictionary in the free-threaded build. Locking\naround individual PyDict_Next calls is not sufficient because the function\nreturns borrowed references and because it allows concurrent modifications\nduring the iteraiton loop.\n\nThe internal locking also interferes with correct external synchronization\nbecause it may suspend outer critical sections created by the caller.\n(cherry picked from commit 375b723d5873f948696c7e85a97f4778d9e00ff0)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Objects/dictobject.c||Objects/dictobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/dictobject.c||Objects/dictobject.c": [
          "File: Objects/dictobject.c -> Objects/dictobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2801:     if (!PyDict_Check(op))",
          "2802:         return 0;",
          "2806:     mp = (PyDictObject *)op;",
          "2807:     i = *ppos;",
          "2808:     if (_PyDict_HasSplitTable(mp)) {",
          "",
          "[Removed Lines]",
          "2804:     ASSERT_DICT_LOCKED(op);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2875: int",
          "2876: PyDict_Next(PyObject *op, Py_ssize_t *ppos, PyObject **pkey, PyObject **pvalue)",
          "2877: {",
          "2883: }",
          "",
          "[Removed Lines]",
          "2878:     int res;",
          "2879:     Py_BEGIN_CRITICAL_SECTION(op);",
          "2880:     res = _PyDict_Next(op, ppos, pkey, pvalue, NULL);",
          "2881:     Py_END_CRITICAL_SECTION();",
          "2882:     return res;",
          "",
          "[Added Lines]",
          "2876:     return _PyDict_Next(op, ppos, pkey, pvalue, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ee68fbf9ba6ae79ec6691517c245690fb60bab2",
      "candidate_info": {
        "commit_hash": "6ee68fbf9ba6ae79ec6691517c245690fb60bab2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6ee68fbf9ba6ae79ec6691517c245690fb60bab2",
        "files": [
          "Modules/_testinternalcapi/test_critical_sections.c"
        ],
        "message": "[3.13] gh-120584: Fix \"unused thread_critical_sections\" warning in `test_critical_sections` (GH-120585) (#120592)\n\ngh-120584: Fix \"unused thread_critical_sections\" warning in `test_critical_sections` (GH-120585)\n(cherry picked from commit b337aefd3e44f5c8e38cd282273359d07cce6126)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Modules/_testinternalcapi/test_critical_sections.c||Modules/_testinternalcapi/test_critical_sections.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_testinternalcapi/test_critical_sections.c||Modules/_testinternalcapi/test_critical_sections.c": [
          "File: Modules/_testinternalcapi/test_critical_sections.c -> Modules/_testinternalcapi/test_critical_sections.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     Py_RETURN_NONE;",
          "131: }",
          "133: struct test_data {",
          "134:     PyObject *obj1;",
          "135:     PyObject *obj2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: #ifdef Py_CAN_START_THREADS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:     }",
          "171: }",
          "174: static PyObject *",
          "175: test_critical_sections_threads(PyObject *self, PyObject *Py_UNUSED(args))",
          "176: {",
          "",
          "[Removed Lines]",
          "173: #ifdef Py_CAN_START_THREADS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27b61c17a1d32d4773bb91f31c31e05a54b3b3df",
      "candidate_info": {
        "commit_hash": "27b61c17a1d32d4773bb91f31c31e05a54b3b3df",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/27b61c17a1d32d4773bb91f31c31e05a54b3b3df",
        "files": [
          "Lib/pathlib/_abc.py",
          "Lib/test/test_pathlib/test_pathlib_abc.py",
          "Misc/NEWS.d/next/Library/2024-05-17-17-32-12.gh-issue-119113.kEv1Ll.rst"
        ],
        "message": "[3.13] GH-119113: Raise `TypeError` from `pathlib.PurePath.with_suffix(None)` (GH-119124) (#119183)\n\nRestore behaviour from 3.12 when `path.with_suffix(None)` is called.\n(cherry picked from commit 3c28510b984392b8dac87a17dfc5887366d5c4ab)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>",
        "before_after_code_files": [
          "Lib/pathlib/_abc.py||Lib/pathlib/_abc.py",
          "Lib/test/test_pathlib/test_pathlib_abc.py||Lib/test/test_pathlib/test_pathlib_abc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pathlib/_abc.py||Lib/pathlib/_abc.py": [
          "File: Lib/pathlib/_abc.py -> Lib/pathlib/_abc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:         string, remove the suffix from the path.",
          "226:         \"\"\"",
          "227:         stem = self.stem",
          "231:             # If the stem is empty, we can't make the suffix non-empty.",
          "232:             raise ValueError(f\"{self!r} has an empty name\")",
          "236:             raise ValueError(f\"Invalid suffix {suffix!r}\")",
          "238:     def relative_to(self, other, *, walk_up=False):",
          "239:         \"\"\"Return the relative path to another path identified by the passed",
          "",
          "[Removed Lines]",
          "228:         if not suffix:",
          "229:             return self.with_name(stem)",
          "230:         elif not stem:",
          "233:         elif suffix.startswith('.') and len(suffix) > 1:",
          "234:             return self.with_name(stem + suffix)",
          "235:         else:",
          "",
          "[Added Lines]",
          "228:         if not stem:",
          "231:         elif suffix and not (suffix.startswith('.') and len(suffix) > 1):",
          "233:         else:",
          "234:             return self.with_name(stem + suffix)",
          "",
          "---------------"
        ],
        "Lib/test/test_pathlib/test_pathlib_abc.py||Lib/test/test_pathlib/test_pathlib_abc.py": [
          "File: Lib/test/test_pathlib/test_pathlib_abc.py -> Lib/test/test_pathlib/test_pathlib_abc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:         self.assertRaises(ValueError, P('c:a/b').with_suffix, 'c\\\\d')",
          "1000:         self.assertRaises(ValueError, P('c:a/b').with_suffix, '.c/d')",
          "1001:         self.assertRaises(ValueError, P('c:a/b').with_suffix, '.c\\\\d')",
          "1003:     def test_with_suffix_empty(self):",
          "1004:         P = self.cls",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:         self.assertRaises(TypeError, P('c:a/b').with_suffix, None)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006:         self.assertRaises(ValueError, P('').with_suffix, '.gz')",
          "1007:         self.assertRaises(ValueError, P('/').with_suffix, '.gz')",
          "1010:         P = self.cls",
          "1011:         # Invalid suffix.",
          "1012:         self.assertRaises(ValueError, P('a/b').with_suffix, 'gz')",
          "",
          "[Removed Lines]",
          "1009:     def test_with_suffix_seps(self):",
          "",
          "[Added Lines]",
          "1010:     def test_with_suffix_invalid(self):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1017:         self.assertRaises(ValueError, P('a/b').with_suffix, '.c/.d')",
          "1018:         self.assertRaises(ValueError, P('a/b').with_suffix, './.d')",
          "1019:         self.assertRaises(ValueError, P('a/b').with_suffix, '.d/.')",
          "1021:     def test_relative_to_common(self):",
          "1022:         P = self.cls",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:         self.assertRaises(TypeError, P('a/b').with_suffix, None)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff358616ddb5da18c79ceffabb55c3806a345383",
      "candidate_info": {
        "commit_hash": "ff358616ddb5da18c79ceffabb55c3806a345383",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ff358616ddb5da18c79ceffabb55c3806a345383",
        "files": [
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-118908: Protect the REPL subprocess with a timeout in tests (GH-120408) (#120430)\n\n(cherry picked from commit 3453362183f083e37ea866a7ae1b34147ffaf81d)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from unittest import TestCase, skipUnless",
          "9: from unittest.mock import patch",
          "10: from test.support import force_not_colorized",
          "12: from .support import (",
          "13:     FakeConsole,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from test.support import SHORT_TIMEOUT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:         os.close(master_fd)",
          "887:         os.close(slave_fd)",
          "889:         return \"\\n\".join(output), exit_code",
          "",
          "[Removed Lines]",
          "888:         exit_code = process.wait()",
          "",
          "[Added Lines]",
          "889:         try:",
          "890:             exit_code = process.wait(timeout=SHORT_TIMEOUT)",
          "891:         except subprocess.TimeoutExpired:",
          "892:             process.kill()",
          "893:             exit_code = process.returncode",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4c6948340463e4da629822394b84921ff48c24f",
      "candidate_info": {
        "commit_hash": "d4c6948340463e4da629822394b84921ff48c24f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d4c6948340463e4da629822394b84921ff48c24f",
        "files": [
          "Lib/test/test_ordered_dict.py",
          "Lib/test/test_struct.py"
        ],
        "message": "[3.13] gh-118846: Fix PGO tests in free-threaded build (GH-118862) (#118867)\n\nAvoid immortalizing objects in tests that verify garbage collection of\nclasses or modules.\n\nThis fixes test_ordered_dict and test_struct.\n(cherry picked from commit 1b1db2fd9a531e26b79b34667bccfb938c4d184d)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_ordered_dict.py||Lib/test/test_ordered_dict.py",
          "Lib/test/test_struct.py||Lib/test/test_struct.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_ordered_dict.py||Lib/test/test_ordered_dict.py": [
          "File: Lib/test/test_ordered_dict.py -> Lib/test/test_ordered_dict.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import weakref",
          "11: from collections.abc import MutableMapping",
          "12: from test import mapping_tests, support",
          "16: py_coll = import_helper.import_fresh_module('collections',",
          "",
          "[Removed Lines]",
          "13: from test.support import import_helper",
          "",
          "[Added Lines]",
          "13: from test.support import import_helper, suppress_immortalization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "667:         dict.update(od, [('spam', 1)])",
          "668:         self.assertNotIn('NULL', repr(od))",
          "670:     def test_reference_loop(self):",
          "671:         # Issue 25935",
          "672:         OrderedDict = self.OrderedDict",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:     @suppress_immortalization()",
          "",
          "---------------"
        ],
        "Lib/test/test_struct.py||Lib/test/test_struct.py": [
          "File: Lib/test/test_struct.py -> Lib/test/test_struct.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import weakref",
          "11: from test import support",
          "13: from test.support.script_helper import assert_python_ok",
          "15: ISBIGENDIAN = sys.byteorder == \"big\"",
          "",
          "[Removed Lines]",
          "12: from test.support import import_helper",
          "",
          "[Added Lines]",
          "12: from test.support import import_helper, suppress_immortalization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "674:         self.assertIn(b\"Exception ignored in:\", stderr)",
          "675:         self.assertIn(b\"C.__del__\", stderr)",
          "677:     def test__struct_reference_cycle_cleaned_up(self):",
          "678:         # Regression test for python/cpython#94207.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:     @suppress_immortalization()",
          "",
          "---------------"
        ]
      }
    }
  ]
}