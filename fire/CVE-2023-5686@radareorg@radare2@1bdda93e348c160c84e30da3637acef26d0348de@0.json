{
  "cve_id": "CVE-2023-5686",
  "cve_desc": "Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.9.0.",
  "repo": "radareorg/radare2",
  "patch_hash": "1bdda93e348c160c84e30da3637acef26d0348de",
  "patch_info": {
    "commit_hash": "1bdda93e348c160c84e30da3637acef26d0348de",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/1bdda93e348c160c84e30da3637acef26d0348de",
    "files": [
      "shlr/java/code.c"
    ],
    "message": "Fix oobread in the java disassembler ##asan\n\n* Causes UB when performing analysis, not exploitable\n* https://huntr.com/bounties/bbfe1f76-8fa1-4a8c-909d-65b16e970be0/\n* Reported by @gandalf4a",
    "before_after_code_files": [
      "shlr/java/code.c||shlr/java/code.c"
    ]
  },
  "patch_diff": {
    "shlr/java/code.c||shlr/java/code.c": [
      "File: shlr/java/code.c -> shlr/java/code.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "206:  case 0xa6: // if_acmpne",
      "207:  case 0xa7: // goto",
      "208:  case 0xa8: // jsr",
      "212:    output[outlen - 1] = 0;",
      "213:    return update_bytes_consumed (JAVA_OPS[idx].size);",
      "214:   }",
      "",
      "[Removed Lines]",
      "209:   if (len > 1) {",
      "210:    snprintf (output, outlen, \"%s 0x%04\"PFMT64x, JAVA_OPS[idx].name,",
      "211:      (addr + (short)USHORT (bytes, 1)));",
      "",
      "[Added Lines]",
      "209:   if (len > 3) {",
      "210:    const short delta = USHORT (bytes, 1);",
      "211:    snprintf (output, outlen, \"%s 0x%04\"PFMT64x, JAVA_OPS[idx].name, addr + delta);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d026503bf7263dd6ac8e0d8bbf94085bd39d7439",
      "candidate_info": {
        "commit_hash": "d026503bf7263dd6ac8e0d8bbf94085bd39d7439",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/d026503bf7263dd6ac8e0d8bbf94085bd39d7439",
        "files": [
          "libr/arch/p/java/plugin.c"
        ],
        "message": "Fix sign underflow not fitting in cast for java (UB)",
        "before_after_code_files": [
          "libr/arch/p/java/plugin.c||libr/arch/p/java/plugin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/radareorg/radare2/pull/22331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libr/arch/p/java/plugin.c||libr/arch/p/java/plugin.c": [
          "File: libr/arch/p/java/plugin.c -> libr/arch/p/java/plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   if (pos + 8 + 8 > len) {",
          "24:    return op->size;",
          "25:   }",
          "29:   ut32 default_loc = (ut32) (UINT (data, pos)), cur_case = 0;",
          "30:   op->switch_op = r_anal_switch_op_new (addr, min_val, max_val, default_loc);",
          "31:   pos += 12;",
          "34:    for (cur_case = 0; cur_case <= max_val - min_val; pos += 4, cur_case++) {",
          "",
          "[Removed Lines]",
          "26:   const int min_val = (ut32)(UINT (data, pos + 4));",
          "27:   const int max_val = (ut32)(UINT (data, pos + 8));",
          "32:   if (max_val > min_val && ((max_val - min_val)<(UT16_MAX/4))) {",
          "",
          "[Added Lines]",
          "26:   const ut32 min_val = (ut32)(UINT (data, pos + 4));",
          "27:   const ut32 max_val = (ut32)(UINT (data, pos + 8));",
          "32:   if (max_val > min_val && ((max_val - min_val) < (UT16_MAX / 4))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "697f50e96b5872e0656086f69a976f6a4049c105",
      "candidate_info": {
        "commit_hash": "697f50e96b5872e0656086f69a976f6a4049c105",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/697f50e96b5872e0656086f69a976f6a4049c105",
        "files": [
          "shlr/java/code.c"
        ],
        "message": "off by one check",
        "before_after_code_files": [
          "shlr/java/code.c||shlr/java/code.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "shlr/java/code.c||shlr/java/code.c"
          ],
          "candidate": [
            "shlr/java/code.c||shlr/java/code.c"
          ]
        }
      },
      "candidate_diff": {
        "shlr/java/code.c||shlr/java/code.c": [
          "File: shlr/java/code.c -> shlr/java/code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  case 0xa6: // if_acmpne",
          "207:  case 0xa7: // goto",
          "208:  case 0xa8: // jsr",
          "210:    const short delta = USHORT (bytes, 1);",
          "211:    snprintf (output, outlen, \"%s 0x%04\"PFMT64x, JAVA_OPS[idx].name, addr + delta);",
          "212:    output[outlen - 1] = 0;",
          "",
          "[Removed Lines]",
          "209:   if (len > 3) {",
          "",
          "[Added Lines]",
          "209:   if (len > 2) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}