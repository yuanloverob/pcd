{
  "cve_id": "CVE-2020-36316",
  "cve_desc": "In RELIC before 2021-04-03, there is a buffer overflow in PKCS#1 v1.5 signature verification because garbage bytes can be present.",
  "repo": "relic-toolkit/relic",
  "patch_hash": "76c9a1fdf19d9e92e566a77376673e522aae9f80",
  "patch_info": {
    "commit_hash": "76c9a1fdf19d9e92e566a77376673e522aae9f80",
    "repo": "relic-toolkit/relic",
    "commit_url": "https://github.com/relic-toolkit/relic/commit/76c9a1fdf19d9e92e566a77376673e522aae9f80",
    "files": [
      "src/cp/relic_cp_rsa.c"
    ],
    "message": "Fix #154 and #155 by inverting the padding check logic and being more rigorous.",
    "before_after_code_files": [
      "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
    ]
  },
  "patch_diff": {
    "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c": [
      "File: src/cp/relic_cp_rsa.c -> src/cp/relic_cp_rsa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: static int pad_basic(bn_t m, int *p_len, int m_len, int k_len, int operation) {",
      "131:  uint8_t pad = 0;",
      "133:  bn_t t;",
      "135:  RLC_TRY {",
      "",
      "[Removed Lines]",
      "132:  int result = RLC_OK;",
      "",
      "[Added Lines]",
      "132:  int result = RLC_ERR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:     bn_add_dig(m, m, RSA_PAD);",
      "148:     bn_lsh(m, m, m_len * 8);",
      "149:     break;",
      "150:    case RSA_DEC:",
      "151:    case RSA_VER:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "149:     result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "154:     m_len = k_len - 1;",
      "155:     bn_rsh(t, m, 8 * m_len);",
      "168:     }",
      "170:     break;",
      "171:   }",
      "172:  }",
      "",
      "[Removed Lines]",
      "156:     if (!bn_is_zero(t)) {",
      "157:      result = RLC_ERR;",
      "158:     }",
      "160:     do {",
      "161:      (*p_len)++;",
      "162:      m_len--;",
      "163:      bn_rsh(t, m, 8 * m_len);",
      "164:      pad = (uint8_t)t->dp[0];",
      "165:     } while (pad == 0 && m_len > 0);",
      "166:     if (pad != RSA_PAD) {",
      "167:      result = RLC_ERR;",
      "169:     bn_mod_2b(m, m, (k_len - *p_len) * 8);",
      "",
      "[Added Lines]",
      "157:     if (bn_is_zero(t)) {",
      "159:      do {",
      "160:       (*p_len)++;",
      "161:       m_len--;",
      "162:       bn_rsh(t, m, 8 * m_len);",
      "163:       pad = (uint8_t)t->dp[0];",
      "164:      } while (pad == 0 && m_len > 0);",
      "165:      if (pad == RSA_PAD) {",
      "166:       result = RLC_OK;",
      "167:      }",
      "168:      bn_mod_2b(m, m, (k_len - *p_len) * 8);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "252: static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {",
      "253:  uint8_t *id, pad = 0;",
      "255:  bn_t t;",
      "257:  bn_null(t);",
      "",
      "[Removed Lines]",
      "254:  int len, result = RLC_OK;",
      "",
      "[Added Lines]",
      "254:  int len, result = RLC_ERR;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "278:     bn_add_dig(m, m, 0);",
      "280:     bn_lsh(m, m, m_len * 8);",
      "281:     break;",
      "282:    case RSA_DEC:",
      "283:     m_len = k_len - 1;",
      "284:     bn_rsh(t, m, 8 * m_len);",
      "297:      m_len--;",
      "298:      bn_rsh(t, m, 8 * m_len);",
      "299:      pad = (uint8_t)t->dp[0];",
      "304:     break;",
      "305:    case RSA_SIG:",
      "",
      "[Removed Lines]",
      "285:     if (!bn_is_zero(t)) {",
      "286:      result = RLC_ERR;",
      "287:     }",
      "290:     m_len--;",
      "291:     bn_rsh(t, m, 8 * m_len);",
      "292:     pad = (uint8_t)t->dp[0];",
      "293:     if (pad != RSA_PUB) {",
      "294:      result = RLC_ERR;",
      "295:     }",
      "296:     do {",
      "300:     } while (pad != 0 && m_len > 0);",
      "303:     bn_mod_2b(m, m, (k_len - *p_len) * 8);",
      "",
      "[Added Lines]",
      "281:     result = RLC_OK;",
      "286:     if (bn_is_zero(t)) {",
      "291:      if (pad == RSA_PUB) {",
      "292:       do {",
      "293:        m_len--;",
      "294:        bn_rsh(t, m, 8 * m_len);",
      "295:        pad = (uint8_t)t->dp[0];",
      "296:       } while (pad != 0 && m_len > 0);",
      "299:       bn_mod_2b(m, m, (k_len - *p_len) * 8);",
      "300:       result = (m_len > 0 ? RLC_OK : RLC_ERR);",
      "301:      }",
      "302:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "321:     bn_add(m, m, t);",
      "323:     bn_lsh(m, m, m_len * 8);",
      "324:     break;",
      "325:    case RSA_SIG_HASH:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:     result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "337:     bn_add_dig(m, m, 0);",
      "339:     bn_lsh(m, m, m_len * 8);",
      "340:     break;",
      "341:    case RSA_VER:",
      "342:     m_len = k_len - 1;",
      "343:     bn_rsh(t, m, 8 * m_len);",
      "354:      m_len--;",
      "355:      bn_rsh(t, m, 8 * m_len);",
      "356:      pad = (uint8_t)t->dp[0];",
      "371:     }",
      "375:     break;",
      "376:    case RSA_VER_HASH:",
      "377:     m_len = k_len - 1;",
      "378:     bn_rsh(t, m, 8 * m_len);",
      "389:      m_len--;",
      "390:      bn_rsh(t, m, 8 * m_len);",
      "391:      pad = (uint8_t)t->dp[0];",
      "395:     }",
      "399:     break;",
      "400:   }",
      "401:  }",
      "",
      "[Removed Lines]",
      "344:     if (!bn_is_zero(t)) {",
      "345:      result = RLC_ERR;",
      "346:     }",
      "347:     m_len--;",
      "348:     bn_rsh(t, m, 8 * m_len);",
      "349:     pad = (uint8_t)t->dp[0];",
      "350:     if (pad != RSA_PRV) {",
      "351:      result = RLC_ERR;",
      "352:     }",
      "353:     do {",
      "357:     } while (pad != 0 && m_len > 0);",
      "358:     if (m_len == 0) {",
      "359:      result = RLC_ERR;",
      "360:     }",
      "362:     id = hash_id(MD_MAP, &len);",
      "363:     m_len -= len;",
      "365:     bn_rsh(t, m, m_len * 8);",
      "366:     int r = 0;",
      "367:     for (int i = 0; i < len; i++) {",
      "368:      pad = (uint8_t)t->dp[0];",
      "369:      r |= pad - id[len - i - 1];",
      "370:      bn_rsh(t, t, 8);",
      "373:     bn_mod_2b(m, m, m_len * 8);",
      "374:     result = (r == 0 ? RLC_OK : RLC_ERR);",
      "379:     if (!bn_is_zero(t)) {",
      "380:      result = RLC_ERR;",
      "381:     }",
      "382:     m_len--;",
      "383:     bn_rsh(t, m, 8 * m_len);",
      "384:     pad = (uint8_t)t->dp[0];",
      "385:     if (pad != RSA_PRV) {",
      "386:      result = RLC_ERR;",
      "387:     }",
      "388:     do {",
      "392:     } while (pad != 0 && m_len > 0);",
      "393:     if (m_len == 0) {",
      "394:      result = RLC_ERR;",
      "398:     bn_mod_2b(m, m, m_len * 8);",
      "",
      "[Added Lines]",
      "340:     result = RLC_OK;",
      "345:     if (bn_is_zero(t)) {",
      "349:      if (pad == RSA_PRV) {",
      "350:       int counter = 0;",
      "351:       do {",
      "352:        counter++;",
      "353:        m_len--;",
      "354:        bn_rsh(t, m, 8 * m_len);",
      "355:        pad = (uint8_t)t->dp[0];",
      "356:       } while (pad == RSA_PAD && m_len > 0);",
      "358:       id = hash_id(MD_MAP, &len);",
      "359:       m_len -= len;",
      "361:       bn_rsh(t, m, m_len * 8);",
      "362:       int r = 0;",
      "363:       for (int i = 0; i < len; i++) {",
      "364:        pad = (uint8_t)t->dp[0];",
      "365:        r |= pad ^ id[len - i - 1];",
      "366:        bn_rsh(t, t, 8);",
      "367:       }",
      "369:       bn_mod_2b(m, m, m_len * 8);",
      "370:       if (r && m_len > 0 && counter >= 8) {",
      "371:        result = RLC_OK;",
      "372:       }",
      "373:      }",
      "379:     if (bn_is_zero(t)) {",
      "383:      if (pad == RSA_PRV) {",
      "384:       int counter = 0;",
      "385:       do {",
      "386:        counter++;",
      "387:        m_len--;",
      "388:        bn_rsh(t, m, 8 * m_len);",
      "389:        pad = (uint8_t)t->dp[0];",
      "390:       } while (pad == RSA_PAD && m_len > 0);",
      "393:       bn_mod_2b(m, m, m_len * 8);",
      "394:       if (m_len > 0 && counter >= 8) {",
      "395:        result = RLC_OK;",
      "396:       }",
      "397:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "426:         uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];",
      "428:         uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);",
      "430:  bn_t t;",
      "432:  bn_null(t);",
      "",
      "[Removed Lines]",
      "429:  int result = RLC_OK;",
      "",
      "[Added Lines]",
      "429:  int result = RLC_ERR;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "445:     bn_add_dig(m, m, 0x01);",
      "447:     bn_lsh(m, m, m_len * 8);",
      "448:     break;",
      "449:    case RSA_ENC_FIN:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:     result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "463:     bn_lsh(t, t, 8 * (k_len - RLC_MD_LEN - 1));",
      "464:     bn_add(t, t, m);",
      "465:     bn_copy(m, t);",
      "466:     break;",
      "467:    case RSA_DEC:",
      "468:     m_len = k_len - 1;",
      "469:     bn_rsh(t, m, 8 * m_len);",
      "504:     }",
      "507:     break;",
      "508:    case RSA_SIG:",
      "509:    case RSA_SIG_HASH:",
      "",
      "[Removed Lines]",
      "470:     if (!bn_is_zero(t)) {",
      "471:      result = RLC_ERR;",
      "472:     }",
      "473:     m_len -= RLC_MD_LEN;",
      "474:     bn_rsh(t, m, 8 * m_len);",
      "475:     bn_write_bin(h1, RLC_MD_LEN, t);",
      "476:     bn_mod_2b(m, m, 8 * m_len);",
      "477:     bn_write_bin(mask, m_len, m);",
      "478:     md_mgf(h2, RLC_MD_LEN, mask, m_len);",
      "479:     for (int i = 0; i < RLC_MD_LEN; i++) {",
      "480:      h1[i] ^= h2[i];",
      "481:     }",
      "482:     md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);",
      "483:     bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);",
      "484:     for (int i = 0; i < t->used; i++) {",
      "485:      m->dp[i] ^= t->dp[i];",
      "486:     }",
      "487:     m_len -= RLC_MD_LEN;",
      "488:     bn_rsh(t, m, 8 * m_len);",
      "489:     bn_write_bin(h2, RLC_MD_LEN, t);",
      "490:     md_map(h1, NULL, 0);",
      "491:     pad = 0;",
      "492:     for (int i = 0; i < RLC_MD_LEN; i++) {",
      "493:      pad |= h1[i] - h2[i];",
      "494:     }",
      "495:     if (result == RLC_OK) {",
      "496:      result = (pad ? RLC_ERR : RLC_OK);",
      "497:     }",
      "498:     bn_mod_2b(m, m, 8 * m_len);",
      "500:     (*p_len)--;",
      "501:     bn_rsh(t, m, *p_len * 8);",
      "502:     if (bn_cmp_dig(t, 1) != RLC_EQ) {",
      "503:      result = RLC_ERR;",
      "505:     bn_mod_2b(m, m, *p_len * 8);",
      "",
      "[Added Lines]",
      "467:     result = RLC_OK;",
      "472:     if (bn_is_zero(t)) {",
      "473:      m_len -= RLC_MD_LEN;",
      "474:      bn_rsh(t, m, 8 * m_len);",
      "475:      bn_write_bin(h1, RLC_MD_LEN, t);",
      "476:      bn_mod_2b(m, m, 8 * m_len);",
      "477:      bn_write_bin(mask, m_len, m);",
      "478:      md_mgf(h2, RLC_MD_LEN, mask, m_len);",
      "479:      for (int i = 0; i < RLC_MD_LEN; i++) {",
      "480:       h1[i] ^= h2[i];",
      "481:      }",
      "482:      md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);",
      "483:      bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);",
      "484:      for (int i = 0; i < t->used; i++) {",
      "485:       m->dp[i] ^= t->dp[i];",
      "486:      }",
      "487:      m_len -= RLC_MD_LEN;",
      "488:      bn_rsh(t, m, 8 * m_len);",
      "489:      bn_write_bin(h2, RLC_MD_LEN, t);",
      "490:      md_map(h1, NULL, 0);",
      "491:      pad = 0;",
      "492:      for (int i = 0; i < RLC_MD_LEN; i++) {",
      "493:       pad |= h1[i] ^ h2[i];",
      "494:      }",
      "495:      bn_mod_2b(m, m, 8 * m_len);",
      "497:      (*p_len)--;",
      "498:      bn_rsh(t, m, *p_len * 8);",
      "499:      if (pad == 0 && bn_cmp_dig(t, 1) == RLC_EQ) {",
      "500:       result = RLC_OK;",
      "501:      }",
      "502:      bn_mod_2b(m, m, *p_len * 8);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "512:     bn_lsh(m, m, 64);",
      "514:     bn_lsh(m, m, RLC_MD_LEN * 8);",
      "515:     break;",
      "516:    case RSA_SIG_FIN:",
      "517:     memset(mask, 0, 8);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "513:     result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "529:     for (int i = m_len - 1; i < 8 * k_len; i++) {",
      "530:      bn_set_bit(m, i, 0);",
      "531:     }",
      "532:     break;",
      "533:    case RSA_VER:",
      "534:    case RSA_VER_HASH:",
      "535:     bn_mod_2b(t, m, 8);",
      "539:      for (int i = m_len; i < 8 * k_len; i++) {",
      "540:       if (bn_get_bit(m, i) != 0) {",
      "542:       }",
      "543:      }",
      "544:      bn_rsh(m, m, 8);",
      "",
      "[Removed Lines]",
      "536:     if (bn_cmp_dig(t, RSA_PSS) != RLC_EQ) {",
      "537:      result = RLC_ERR;",
      "538:     } else {",
      "541:        result = RLC_ERR;",
      "",
      "[Added Lines]",
      "531:     result = RLC_OK;",
      "536:     pad = (uint8_t)t->dp[0];",
      "537:     if (pad == RSA_PSS) {",
      "538:      int r = 1;",
      "541:        r = 0;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "555:      for (int i = m_len - 1; i < 8 * k_len; i++) {",
      "556:       bn_set_bit(m, i - ((RLC_MD_LEN + 1) * 8), 0);",
      "557:      }",
      "560:      }",
      "561:      bn_read_bin(m, h2, RLC_MD_LEN);",
      "",
      "[Removed Lines]",
      "558:      if (!bn_is_zero(m)) {",
      "559:       result = RLC_ERR;",
      "",
      "[Added Lines]",
      "558:      if (r == 1 && bn_is_zero(m)) {",
      "559:       result = RLC_OK;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1c9ea9ed6a5f4fef648eb8700f2924bb21ad10c2",
      "candidate_info": {
        "commit_hash": "1c9ea9ed6a5f4fef648eb8700f2924bb21ad10c2",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/1c9ea9ed6a5f4fef648eb8700f2924bb21ad10c2",
        "files": [
          "src/cp/relic_cp_rsa.c"
        ],
        "message": "Fix further problems with padding in PKCS #1.5 (no surprise).",
        "before_after_code_files": [
          "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
          ],
          "candidate": [
            "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c": [
          "File: src/cp/relic_cp_rsa.c -> src/cp/relic_cp_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252: static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {",
          "253:  uint8_t *id, pad = 0;",
          "254:  int len, result = RLC_ERR;",
          "257:  bn_null(t);",
          "259:  RLC_TRY {",
          "260:   bn_new(t);",
          "",
          "[Removed Lines]",
          "255:  bn_t t;",
          "",
          "[Added Lines]",
          "255:  bn_t t, u;",
          "258:  bn_null(u);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:      } while (pad == 0);",
          "275:      bn_add_dig(m, m, pad);",
          "276:     }",
          "281:     result = RLC_OK;",
          "282:     break;",
          "283:    case RSA_DEC:",
          "",
          "[Removed Lines]",
          "277:     bn_lsh(m, m, 8);",
          "278:     bn_add_dig(m, m, 0);",
          "280:     bn_lsh(m, m, m_len * 8);",
          "",
          "[Added Lines]",
          "279:     bn_lsh(m, m, (m_len + 1) * 8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:      bn_lsh(m, m, 8);",
          "314:      bn_add_dig(m, m, RSA_PAD);",
          "315:     }",
          "319:     bn_read_bin(t, id, len);",
          "320:     bn_add(m, m, t);",
          "",
          "[Removed Lines]",
          "316:     bn_lsh(m, m, 8);",
          "317:     bn_add_dig(m, m, 0);",
          "318:     bn_lsh(m, m, 8 * len);",
          "",
          "[Added Lines]",
          "316:     bn_lsh(m, m, 8 * (len + 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:      bn_lsh(m, m, 8);",
          "334:      bn_add_dig(m, m, RSA_PAD);",
          "335:     }",
          "340:     result = RLC_OK;",
          "341:     break;",
          "342:    case RSA_VER:",
          "",
          "[Removed Lines]",
          "336:     bn_lsh(m, m, 8);",
          "337:     bn_add_dig(m, m, 0);",
          "339:     bn_lsh(m, m, m_len * 8);",
          "",
          "[Added Lines]",
          "335:     bn_lsh(m, m, 8 * (m_len + 1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "356:       } while (pad == RSA_PAD && m_len > 0);",
          "358:       id = hash_id(MD_MAP, &len);",
          "372:       }",
          "373:      }",
          "374:     }",
          "",
          "[Removed Lines]",
          "359:       m_len -= len;",
          "361:       bn_rsh(t, m, m_len * 8);",
          "362:       int r = 0;",
          "363:       for (int i = 0; i < len; i++) {",
          "364:        pad = (uint8_t)t->dp[0];",
          "365:        r |= pad ^ id[len - i - 1];",
          "366:        bn_rsh(t, t, 8);",
          "367:       }",
          "369:       bn_mod_2b(m, m, m_len * 8);",
          "370:       if (r == 0 && m_len > 0 && counter >= 8) {",
          "371:        result = RLC_OK;",
          "",
          "[Added Lines]",
          "355:       bn_rsh(t, m, 8 * m_len);",
          "356:       bn_mod_2b(t, t, 8);",
          "357:       if (bn_is_zero(t)) {",
          "358:        m_len -= len;",
          "359:        bn_rsh(t, m, m_len * 8);",
          "360:        int r = 0;",
          "361:        for (int i = 0; i < len; i++) {",
          "362:         pad = (uint8_t)t->dp[0];",
          "363:         r |= pad ^ id[len - i - 1];",
          "364:         bn_rsh(t, t, 8);",
          "365:        }",
          "367:        bn_mod_2b(m, m, m_len * 8);",
          "368:        if (r == 0 && m_len == RLC_MD_LEN && counter >= 8) {",
          "369:         result = RLC_OK;",
          "370:        }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "390:       } while (pad == RSA_PAD && m_len > 0);",
          "396:       }",
          "397:      }",
          "398:     }",
          "",
          "[Removed Lines]",
          "393:       bn_mod_2b(m, m, m_len * 8);",
          "394:       if (m_len > 0 && counter >= 8) {",
          "395:        result = RLC_OK;",
          "",
          "[Added Lines]",
          "392:       bn_rsh(t, m, 8 * m_len);",
          "393:       bn_mod_2b(t, t, 8);",
          "394:       if (bn_is_zero(t)) {",
          "395:        bn_mod_2b(m, m, m_len * 8);",
          "396:        if (m_len == RLC_MD_LEN && counter >= 8) {",
          "397:         result = RLC_OK;",
          "398:        }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "404:  }",
          "405:  RLC_FINALLY {",
          "406:   bn_free(t);",
          "407:  }",
          "408:  return result;",
          "409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:   bn_free(u);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7efde00ecc7382f94ea8c14bfbf1aab8f0eacb3",
      "candidate_info": {
        "commit_hash": "c7efde00ecc7382f94ea8c14bfbf1aab8f0eacb3",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/c7efde00ecc7382f94ea8c14bfbf1aab8f0eacb3",
        "files": [
          "src/cp/relic_cp_rsa.c"
        ],
        "message": "Minor tweak.",
        "before_after_code_files": [
          "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
          ],
          "candidate": [
            "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c": [
          "File: src/cp/relic_cp_rsa.c -> src/cp/relic_cp_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:       bn_mod_2b(t, t, 8);",
          "357:       if (bn_is_zero(t)) {",
          "358:        m_len -= len;",
          "360:        int r = 0;",
          "361:        for (int i = 0; i < len; i++) {",
          "362:         pad = (uint8_t)t->dp[0];",
          "",
          "[Removed Lines]",
          "359:        bn_rsh(t, m, m_len * 8);",
          "",
          "[Added Lines]",
          "359:        bn_rsh(t, m, 8 * m_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e02f61196911c7d0df388cce3a8419520a0dffc",
      "candidate_info": {
        "commit_hash": "2e02f61196911c7d0df388cce3a8419520a0dffc",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/2e02f61196911c7d0df388cce3a8419520a0dffc",
        "files": [
          "src/cp/relic_cp_rsa.c"
        ],
        "message": "Fix problem with RSA signature verification rejecting correct IDs.",
        "before_after_code_files": [
          "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
          ],
          "candidate": [
            "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c": [
          "File: src/cp/relic_cp_rsa.c -> src/cp/relic_cp_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:       }",
          "369:       bn_mod_2b(m, m, m_len * 8);",
          "371:        result = RLC_OK;",
          "372:       }",
          "373:      }",
          "",
          "[Removed Lines]",
          "370:       if (r && m_len > 0 && counter >= 8) {",
          "",
          "[Added Lines]",
          "370:       if (r == 0 && m_len > 0 && counter >= 8) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}