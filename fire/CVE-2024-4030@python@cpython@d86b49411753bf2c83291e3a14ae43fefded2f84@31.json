{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "10821ccf0671a5d660ab5df7b5d4bfa0e9c8d112",
      "candidate_info": {
        "commit_hash": "10821ccf0671a5d660ab5df7b5d4bfa0e9c8d112",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/10821ccf0671a5d660ab5df7b5d4bfa0e9c8d112",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/_pyrepl/simple_interact.py"
        ],
        "message": "[3.13] gh-118908: Fix completions after namespace change in REPL (GH-120370) (#120392)\n\n(cherry picked from commit 02e74c356223feb0771759286d24d1dbac01d4ca)\n\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: from collections.abc import Callable, Collection",
          "56: from .types import Callback, Completer, KeySpec, CommandName",
          "59: MoreLinesCallable = Callable[[str], bool]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: TYPE_CHECKING = False",
          "60: if TYPE_CHECKING:",
          "61:     from typing import Any",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: @dataclass",
          "94: class ReadlineConfig:",
          "96:     completer_delims: frozenset[str] = frozenset(\" \\t\\n`~!@#$%^&*()-=+[{]}\\\\|;:'\\\",<>/?\")",
          "",
          "[Removed Lines]",
          "95:     readline_completer: Completer | None = RLCompleter().complete",
          "",
          "[Added Lines]",
          "100:     readline_completer: Completer | None = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554: # ____________________________________________________________",
          "558:     global raw_input",
          "559:     if raw_input is not None:",
          "560:         return  # don't run _setup twice",
          "",
          "[Removed Lines]",
          "557: def _setup() -> None:",
          "",
          "[Added Lines]",
          "562: def _setup(namespace: dict[str, Any]) -> None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "570:     _wrapper.f_in = f_in",
          "571:     _wrapper.f_out = f_out",
          "573:     # this is not really what readline.c does.  Better than nothing I guess",
          "574:     import builtins",
          "576:     raw_input = builtins.input",
          "577:     builtins.input = _wrapper.input",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:     # set up namespace in rlcompleter",
          "579:     _wrapper.config.readline_completer = RLCompleter(namespace).complete",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     console: code.InteractiveConsole | None = None,",
          "97: ) -> None:",
          "98:     from .readline import _setup",
          "101:     namespace = mainmodule.__dict__ if mainmodule else DEFAULT_NAMESPACE",
          "102:     if console is None:",
          "103:         console = InteractiveColoredConsole(",
          "104:             namespace, filename=\"<stdin>\"",
          "",
          "[Removed Lines]",
          "99:     _setup()",
          "",
          "[Added Lines]",
          "100:     _setup(namespace)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58a3c3c0ad1f691810054fbc0feb8d9260e55fc2",
      "candidate_info": {
        "commit_hash": "58a3c3c0ad1f691810054fbc0feb8d9260e55fc2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/58a3c3c0ad1f691810054fbc0feb8d9260e55fc2",
        "files": [
          "Doc/c-api/long.rst",
          "Include/cpython/longobject.h",
          "Lib/test/test_capi/test_long.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-28-10-02-58.gh-issue-121115.EeSLfc.rst",
          "Objects/longobject.c"
        ],
        "message": "gh-121115: Skip __index__ in PyLong_AsNativeBytes by default (GH-121118)\n\n(cherry picked from commit 2894aa14f22430e9b6d4676afead6da7c79209ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Include/cpython/longobject.h||Include/cpython/longobject.h",
          "Lib/test/test_capi/test_long.py||Lib/test/test_capi/test_long.py",
          "Objects/longobject.c||Objects/longobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/cpython/longobject.h||Include/cpython/longobject.h": [
          "File: Include/cpython/longobject.h -> Include/cpython/longobject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define Py_ASNATIVEBYTES_NATIVE_ENDIAN 3",
          "11: #define Py_ASNATIVEBYTES_UNSIGNED_BUFFER 4",
          "12: #define Py_ASNATIVEBYTES_REJECT_NEGATIVE 8",
          "15:    buffer points to the first byte of the variable.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #define Py_ASNATIVEBYTES_ALLOW_INDEX 16",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:    Big endian mode will write the most significant byte into the address",
          "26:    directly referenced by buffer; little endian will write the least significant",
          "27:    byte into that address.",
          "",
          "[Removed Lines]",
          "23:    If flags is -1 (all bits set), native endian is used and value truncation",
          "24:    behaves most like C (allows negative inputs and allow MSB set).",
          "",
          "[Added Lines]",
          "25:    If flags is -1 (all bits set), native endian is used, value truncation",
          "26:    behaves most like C (allows negative inputs and allow MSB set), and non-int",
          "27:    objects will raise a TypeError.",
          "",
          "---------------"
        ],
        "Lib/test/test_capi/test_long.py||Lib/test/test_capi/test_long.py": [
          "File: Lib/test/test_capi/test_long.py -> Lib/test/test_capi/test_long.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:                     \"PyLong_AsNativeBytes(v, <unknown>, 0, -1)\")",
          "497:                 self.assertEqual(buffer, b\"\\x5a\",",
          "498:                     \"buffer overwritten when it should not have been\")",
          "501:                     \"PyLong_AsNativeBytes(Index(v), <unknown>, 0, -1)\")",
          "502:                 self.assertEqual(buffer, b\"\\x5a\",",
          "503:                     \"buffer overwritten when it should not have been\")",
          "",
          "[Removed Lines]",
          "499:                 # Also check via the __index__ path",
          "500:                 self.assertEqual(expect, asnativebytes(Index(v), buffer, 0, -1),",
          "",
          "[Added Lines]",
          "499:                 # Also check via the __index__ path.",
          "500:                 # We pass Py_ASNATIVEBYTES_NATIVE_ENDIAN | ALLOW_INDEX",
          "501:                 self.assertEqual(expect, asnativebytes(Index(v), buffer, 0, 3 | 16),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:         with self.assertRaises(ValueError):",
          "608:             asnativebytes(-1, buffer, 0, 8)",
          "610:         # Check a few error conditions. These are validated in code, but are",
          "611:         # unspecified in docs, so if we make changes to the implementation, it's",
          "612:         # fine to just update these tests rather than preserve the behaviour.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611:         # Ensure omitting Py_ASNATIVEBYTES_ALLOW_INDEX raises on __index__ value",
          "612:         with self.assertRaises(TypeError):",
          "613:             asnativebytes(Index(1), buffer, 0, -1)",
          "614:         with self.assertRaises(TypeError):",
          "615:             asnativebytes(Index(1), buffer, 0, 3)",
          "",
          "---------------"
        ],
        "Objects/longobject.c||Objects/longobject.c": [
          "File: Objects/longobject.c -> Objects/longobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1116:     if (PyLong_Check(vv)) {",
          "1117:         v = (PyLongObject *)vv;",
          "1118:     }",
          "1120:         v = (PyLongObject *)_PyNumber_Index(vv);",
          "1121:         if (v == NULL) {",
          "1122:             return -1;",
          "1123:         }",
          "1124:         do_decref = 1;",
          "1125:     }",
          "1127:     if ((flags != -1 && (flags & Py_ASNATIVEBYTES_REJECT_NEGATIVE))",
          "1128:         && _PyLong_IsNegative(v)) {",
          "",
          "[Removed Lines]",
          "1119:     else {",
          "",
          "[Added Lines]",
          "1119:     else if (flags != -1 && (flags & Py_ASNATIVEBYTES_ALLOW_INDEX)) {",
          "1126:     else {",
          "1127:         PyErr_Format(PyExc_TypeError, \"expect int, got %T\", vv);",
          "1128:         return -1;",
          "1129:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a52ed7e6d9c09e1e22bea50b7cf83eb2a7d165c5",
      "candidate_info": {
        "commit_hash": "a52ed7e6d9c09e1e22bea50b7cf83eb2a7d165c5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a52ed7e6d9c09e1e22bea50b7cf83eb2a7d165c5",
        "files": [
          "Lib/_pyrepl/pager.py"
        ],
        "message": "[3.13] gh-119185: Fix typo in `_pyrepl.pager`: `tempfilepager` should be `tempfile_pager` (GH-118881) (#119211)\n\nFix typo in `_pyrepl.pager`: `tempfilepager` should be `tempfile_pager`\n\nThe name with no underscore doesn't exist.\n(cherry picked from commit 05e1dce76d7669e90ab73e7e682360d83b8a0d02)\n\nCo-authored-by: Thanos <111999343+Sachaa-Thanasius@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/pager.py||Lib/_pyrepl/pager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/pager.py||Lib/_pyrepl/pager.py": [
          "File: Lib/_pyrepl/pager.py -> Lib/_pyrepl/pager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     if os.environ.get('TERM') in ('dumb', 'emacs'):",
          "36:         return plain_pager",
          "37:     if sys.platform == 'win32':",
          "39:     if hasattr(os, 'system') and os.system('(less) 2>/dev/null') == 0:",
          "40:         return lambda text, title='': pipe_pager(text, 'less', title)",
          "",
          "[Removed Lines]",
          "38:         return lambda text, title='': tempfilepager(plain(text), 'more <')",
          "",
          "[Added Lines]",
          "38:         return lambda text, title='': tempfile_pager(plain(text), 'more <')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7237284b9c1768e6feb19abfad1ec54ac44ad87",
      "candidate_info": {
        "commit_hash": "f7237284b9c1768e6feb19abfad1ec54ac44ad87",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f7237284b9c1768e6feb19abfad1ec54ac44ad87",
        "files": [
          "Lib/test/test_tools/test_makefile.py"
        ],
        "message": "[3.13] gh-120418: Don't assume wheeldata is deleted if `WHEEL_PKG_DIR` is set (GH-120419) (#120432)\n\ngh-120418: Don't assume wheeldata is deleted if `WHEEL_PKG_DIR` is set (GH-120419)\n\nRemove wheeldata from both sides of the `assertEqual`, so that we're\n*actually* ignoring it from the test set.\n\nThis test is only making assertions about the source tree, no code is\nbeing executed that would do anything different based on the value of\n`WHEEL_PKG_DIR`.\n(cherry picked from commit 030b452e34bbb0096acacb70a31915b9590c8186)\n\nCo-authored-by: Stefano Rivera <stefano@rivera.za.net>",
        "before_after_code_files": [
          "Lib/test/test_tools/test_makefile.py||Lib/test/test_tools/test_makefile.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tools/test_makefile.py||Lib/test/test_tools/test_makefile.py": [
          "File: Lib/test/test_tools/test_makefile.py -> Lib/test/test_tools/test_makefile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         idle_test = 'idlelib/idle_test'",
          "42:         self.assertIn(idle_test, test_dirs)",
          "45:         for dirpath, dirs, files in os.walk(support.TEST_HOME_DIR):",
          "46:             dirname = os.path.basename(dirpath)",
          "47:             # Skip temporary dirs:",
          "",
          "[Removed Lines]",
          "44:         used = [idle_test]",
          "",
          "[Added Lines]",
          "44:         used = set([idle_test])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:                         \"of test directories to install\"",
          "66:                     )",
          "67:                 )",
          "70:         # Don't check the wheel dir when Python is built --with-wheel-pkg-dir",
          "71:         if sysconfig.get_config_var('WHEEL_PKG_DIR'):",
          "72:             test_dirs.remove('test/wheeldata')",
          "74:         # Check that there are no extra entries:",
          "75:         unique_test_dirs = set(test_dirs)",
          "77:         self.assertEqual(len(test_dirs), len(unique_test_dirs))",
          "",
          "[Removed Lines]",
          "68:                 used.append(relpath)",
          "76:         self.assertSetEqual(unique_test_dirs, set(used))",
          "",
          "[Added Lines]",
          "68:                 used.add(relpath)",
          "73:             used.discard('test/wheeldata')",
          "77:         self.assertSetEqual(unique_test_dirs, used)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b62cb5234be2f43833e52063bf32bff5b2cffc98",
      "candidate_info": {
        "commit_hash": "b62cb5234be2f43833e52063bf32bff5b2cffc98",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b62cb5234be2f43833e52063bf32bff5b2cffc98",
        "files": [
          "Include/internal/pycore_critical_section.h",
          "Modules/_testinternalcapi/test_critical_sections.c"
        ],
        "message": "[3.13] Revert \"gh-115432: Add critical section variant that handles a NULL object (GH-115433)\" (GH-118861) (#118872)\n\nThis reverts commit ad4f909e0e7890e027c4ae7fea74586667242ad3.\n\nThe API ended up not being used.\n(cherry picked from commit 46c808172fd3148e3397234b23674bf70734fb55)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h",
          "Modules/_testinternalcapi/test_critical_sections.c||Modules/_testinternalcapi/test_critical_sections.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_critical_section.h||Include/internal/pycore_critical_section.h": [
          "File: Include/internal/pycore_critical_section.h -> Include/internal/pycore_critical_section.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         _PyCriticalSection_End(&_cs);                                   \\",
          "100:     }",
          "111: # define Py_BEGIN_CRITICAL_SECTION2(a, b)                               \\",
          "112:     {                                                                   \\",
          "113:         _PyCriticalSection2 _cs2;                                       \\",
          "",
          "[Removed Lines]",
          "102: # define Py_XBEGIN_CRITICAL_SECTION(op)                                 \\",
          "103:     {                                                                   \\",
          "104:         _PyCriticalSection _cs_opt = {0};                               \\",
          "105:         _PyCriticalSection_XBegin(&_cs_opt, _PyObject_CAST(op))",
          "107: # define Py_XEND_CRITICAL_SECTION()                                     \\",
          "108:         _PyCriticalSection_XEnd(&_cs_opt);                              \\",
          "109:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: # define Py_BEGIN_CRITICAL_SECTION_MUT(mut)",
          "145: # define Py_BEGIN_CRITICAL_SECTION(op)",
          "146: # define Py_END_CRITICAL_SECTION()",
          "149: # define Py_BEGIN_CRITICAL_SECTION2(a, b)",
          "150: # define Py_END_CRITICAL_SECTION2()",
          "151: # define _Py_CRITICAL_SECTION_ASSERT_MUTEX_LOCKED(mutex)",
          "",
          "[Removed Lines]",
          "147: # define Py_XBEGIN_CRITICAL_SECTION(op)",
          "148: # define Py_XEND_CRITICAL_SECTION()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:     }",
          "203: }",
          "",
          "[Removed Lines]",
          "205: static inline void",
          "206: _PyCriticalSection_XBegin(_PyCriticalSection *c, PyObject *op)",
          "207: {",
          "208: #ifdef Py_GIL_DISABLED",
          "209:     if (op != NULL) {",
          "210:         _PyCriticalSection_Begin(c, &_PyObject_CAST(op)->ob_mutex);",
          "211:     }",
          "212: #endif",
          "213: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:     _PyCriticalSection_Pop(c);",
          "235: }",
          "245: static inline void",
          "246: _PyCriticalSection2_Begin(_PyCriticalSection2 *c, PyMutex *m1, PyMutex *m2)",
          "247: {",
          "",
          "[Removed Lines]",
          "237: static inline void",
          "238: _PyCriticalSection_XEnd(_PyCriticalSection *c)",
          "239: {",
          "240:     if (c->mutex) {",
          "241:         _PyCriticalSection_End(c);",
          "242:     }",
          "243: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Modules/_testinternalcapi/test_critical_sections.c||Modules/_testinternalcapi/test_critical_sections.c": [
          "File: Modules/_testinternalcapi/test_critical_sections.c -> Modules/_testinternalcapi/test_critical_sections.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     Py_END_CRITICAL_SECTION2();",
          "50:     assert_nogil(!PyMutex_IsLocked(&d2->ob_mutex));",
          "61:     Py_DECREF(d2);",
          "62:     Py_DECREF(d1);",
          "63:     Py_RETURN_NONE;",
          "",
          "[Removed Lines]",
          "53:     Py_XBEGIN_CRITICAL_SECTION(d1);",
          "54:     assert_nogil(PyMutex_IsLocked(&d1->ob_mutex));",
          "55:     Py_XEND_CRITICAL_SECTION();",
          "58:     Py_XBEGIN_CRITICAL_SECTION(NULL);",
          "59:     Py_XEND_CRITICAL_SECTION();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}