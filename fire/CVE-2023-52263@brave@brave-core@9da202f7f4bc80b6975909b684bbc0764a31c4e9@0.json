{
  "cve_id": "CVE-2023-52263",
  "cve_desc": "Brave Browser before 1.59.40 does not properly restrict the schema for WebUI factory and redirect. This is related to browser/brave_content_browser_client.cc and browser/ui/webui/brave_web_ui_controller_factory.cc.",
  "repo": "brave/brave-core",
  "patch_hash": "9da202f7f4bc80b6975909b684bbc0764a31c4e9",
  "patch_info": {
    "commit_hash": "9da202f7f4bc80b6975909b684bbc0764a31c4e9",
    "repo": "brave/brave-core",
    "commit_url": "https://github.com/brave/brave-core/pull/19820/commits/9da202f7f4bc80b6975909b684bbc0764a31c4e9",
    "files": [
      "browser/brave_content_browser_client.cc",
      "browser/ui/webui/brave_web_ui_controller_factory.cc"
    ],
    "message": "Further restrict the schema for WebUI factory and redirect\n\nFixes https://github.com/brave/brave-browser/issues/32449\nContains follow up feedback for https://girave-browser/issthub.com/brave/bues/32425",
    "before_after_code_files": [
      "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
      "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
    ]
  },
  "patch_diff": {
    "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc": [
      "File: browser/brave_content_browser_client.cc -> browser/brave_content_browser_client.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1017: bool BraveContentBrowserClient::HandleURLOverrideRewrite(",
      "1018:     GURL* url,",
      "1019:     content::BrowserContext* browser_context) {",
      "1020:   if (url->host() == chrome::kChromeUISyncHost) {",
      "1021:     GURL::Replacements replacements;",
      "1022:     replacements.SetSchemeStr(content::kChromeUIScheme);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1026:   if (!url->SchemeIs(content::kBraveUIScheme) &&",
      "1027:       !url->SchemeIs(content::kChromeUIScheme)) {",
      "1028:     return false;",
      "1029:   }",
      "",
      "---------------"
    ],
    "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc": [
      "File: browser/ui/webui/brave_web_ui_controller_factory.cc -> browser/ui/webui/brave_web_ui_controller_factory.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:                                              const GURL& url) {",
      "202:     return nullptr;",
      "203:   }",
      "",
      "[Removed Lines]",
      "201:   if (!content::HasWebUIScheme(url)) {",
      "",
      "[Added Lines]",
      "204:   if (!url.SchemeIs(content::kBraveUIScheme) &&",
      "205:       !url.SchemeIs(content::kChromeUIScheme)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9c495302067d721fefd6157efb103c7efcd2489",
      "candidate_info": {
        "commit_hash": "b9c495302067d721fefd6157efb103c7efcd2489",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/b9c495302067d721fefd6157efb103c7efcd2489",
        "files": [
          "browser/ui/brave_browser_browsertest.cc",
          "browser/ui/webui/brave_web_ui_controller_factory.cc"
        ],
        "message": "Check url's scheme before binding with WebUI\n\nfix https://github.com/brave/brave-browser/issues/32425",
        "before_after_code_files": [
          "browser/ui/brave_browser_browsertest.cc||browser/ui/brave_browser_browsertest.cc",
          "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
          ],
          "candidate": [
            "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/ui/brave_browser_browsertest.cc||browser/ui/brave_browser_browsertest.cc": [
          "File: browser/ui/brave_browser_browsertest.cc -> browser/ui/brave_browser_browsertest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:       browser()->ShouldDisplayFavicon(tab_model->GetActiveWebContents()));",
          "42: }",
          "44: IN_PROC_BROWSER_TEST_F(BraveBrowserBrowserTest, OpenNewTabWhenTabStripIsEmpty) {",
          "45:   ASSERT_TRUE(embedded_test_server()->Start());",
          "46:   Browser* new_browser = OpenNewBrowser(browser()->profile());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: IN_PROC_BROWSER_TEST_F(BraveBrowserBrowserTest, LoadWebUIURLWithBadSchemeTest) {",
          "45:   ASSERT_TRUE(",
          "46:       ui_test_utils::NavigateToURL(browser(), GURL(\"http://settings/\")));",
          "47: }",
          "",
          "---------------"
        ],
        "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc": [
          "File: browser/ui/webui/brave_web_ui_controller_factory.cc -> browser/ui/webui/brave_web_ui_controller_factory.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"chrome/common/url_constants.h\"",
          "33: #include \"components/prefs/pref_service.h\"",
          "34: #include \"content/public/browser/web_contents.h\"",
          "35: #include \"url/gurl.h\"",
          "37: #if !BUILDFLAG(IS_ANDROID)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"content/public/common/url_utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195: WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,",
          "196:                                              Profile* profile,",
          "197:                                              const GURL& url) {",
          "198:   if (url.host_piece() == kAdblockHost ||",
          "199:       url.host_piece() == kAdblockInternalsHost ||",
          "200:       url.host_piece() == kWebcompatReporterHost ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:   if (!content::HasWebUIScheme(url)) {",
          "202:     return nullptr;",
          "203:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d02e11a1f3e3b19863567f6287b589799c86391d",
      "candidate_info": {
        "commit_hash": "d02e11a1f3e3b19863567f6287b589799c86391d",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/d02e11a1f3e3b19863567f6287b589799c86391d",
        "files": [
          "browser/brave_content_browser_client.cc",
          "browser/ui/brave_browser_browsertest.cc",
          "browser/ui/webui/brave_web_ui_controller_factory.cc"
        ],
        "message": "Check url's scheme before binding with WebUI (uplift to 1.58.x) (#19810)\n\n* Uplift of #19806 (squashed) to beta\n\n* Merge pull request #19820 from brave/bsc-crash-follow-up\n\nFurther restrict the schema for WebUI factory and redirect\n\n---------\n\nCo-authored-by: Brian Clifton <brian@clifton.me>",
        "before_after_code_files": [
          "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
          "browser/ui/brave_browser_browsertest.cc||browser/ui/brave_browser_browsertest.cc",
          "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
            "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
          ],
          "candidate": [
            "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
            "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc": [
          "File: browser/brave_content_browser_client.cc -> browser/brave_content_browser_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001: bool BraveContentBrowserClient::HandleURLOverrideRewrite(",
          "1002:     GURL* url,",
          "1003:     content::BrowserContext* browser_context) {",
          "1004:   if (url->host() == chrome::kChromeUISyncHost) {",
          "1005:     GURL::Replacements replacements;",
          "1006:     replacements.SetSchemeStr(content::kChromeUIScheme);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:   if (!url->SchemeIs(content::kBraveUIScheme) &&",
          "1011:       !url->SchemeIs(content::kChromeUIScheme)) {",
          "1012:     return false;",
          "1013:   }",
          "",
          "---------------"
        ],
        "browser/ui/brave_browser_browsertest.cc||browser/ui/brave_browser_browsertest.cc": [
          "File: browser/ui/brave_browser_browsertest.cc -> browser/ui/brave_browser_browsertest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:       browser()->ShouldDisplayFavicon(tab_model->GetActiveWebContents()));",
          "42: }",
          "44: IN_PROC_BROWSER_TEST_F(BraveBrowserBrowserTest, OpenNewTabWhenTabStripIsEmpty) {",
          "45:   ASSERT_TRUE(embedded_test_server()->Start());",
          "46:   Browser* new_browser = OpenNewBrowser(browser()->profile());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: IN_PROC_BROWSER_TEST_F(BraveBrowserBrowserTest, LoadWebUIURLWithBadSchemeTest) {",
          "45:   ASSERT_TRUE(",
          "46:       ui_test_utils::NavigateToURL(browser(), GURL(\"http://settings/\")));",
          "47: }",
          "",
          "---------------"
        ],
        "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc": [
          "File: browser/ui/webui/brave_web_ui_controller_factory.cc -> browser/ui/webui/brave_web_ui_controller_factory.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"chrome/common/url_constants.h\"",
          "33: #include \"components/prefs/pref_service.h\"",
          "34: #include \"content/public/browser/web_contents.h\"",
          "35: #include \"url/gurl.h\"",
          "37: #if !BUILDFLAG(IS_ANDROID)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"content/public/common/url_utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,",
          "190:                                              Profile* profile,",
          "191:                                              const GURL& url) {",
          "192:   if (url.host_piece() == kAdblockHost ||",
          "193:       url.host_piece() == kAdblockInternalsHost ||",
          "194:       url.host_piece() == kWebcompatReporterHost ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:   if (!url.SchemeIs(content::kBraveUIScheme) &&",
          "199:       !url.SchemeIs(content::kChromeUIScheme)) {",
          "200:     return nullptr;",
          "201:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94c89073b3c36701de12af995718b0795df2eac0",
      "candidate_info": {
        "commit_hash": "94c89073b3c36701de12af995718b0795df2eac0",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/94c89073b3c36701de12af995718b0795df2eac0",
        "files": [
          "browser/brave_content_browser_client.cc",
          "browser/ui/brave_browser_browsertest.cc",
          "browser/ui/webui/brave_web_ui_controller_factory.cc"
        ],
        "message": "Check url's scheme before binding with WebUI (uplift to 1.57.x) (#19809)\n\n* Uplift of #19806 (squashed) to release\n\n* Merge pull request #19820 from brave/bsc-crash-follow-up\n\nFurther restrict the schema for WebUI factory and redirect\n\n---------\n\nCo-authored-by: Brian Clifton <brian@clifton.me>",
        "before_after_code_files": [
          "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
          "browser/ui/brave_browser_browsertest.cc||browser/ui/brave_browser_browsertest.cc",
          "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
            "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
          ],
          "candidate": [
            "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc",
            "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/brave_content_browser_client.cc||browser/brave_content_browser_client.cc": [
          "File: browser/brave_content_browser_client.cc -> browser/brave_content_browser_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "993: bool BraveContentBrowserClient::HandleURLOverrideRewrite(",
          "994:     GURL* url,",
          "995:     content::BrowserContext* browser_context) {",
          "996:   if (url->host() == chrome::kChromeUISyncHost) {",
          "997:     GURL::Replacements replacements;",
          "998:     replacements.SetSchemeStr(content::kChromeUIScheme);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:   if (!url->SchemeIs(content::kBraveUIScheme) &&",
          "1003:       !url->SchemeIs(content::kChromeUIScheme)) {",
          "1004:     return false;",
          "1005:   }",
          "",
          "---------------"
        ],
        "browser/ui/brave_browser_browsertest.cc||browser/ui/brave_browser_browsertest.cc": [
          "File: browser/ui/brave_browser_browsertest.cc -> browser/ui/brave_browser_browsertest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:       browser()->ShouldDisplayFavicon(tab_model->GetActiveWebContents()));",
          "42: }",
          "44: IN_PROC_BROWSER_TEST_F(BraveBrowserBrowserTest, OpenNewTabWhenTabStripIsEmpty) {",
          "45:   ASSERT_TRUE(embedded_test_server()->Start());",
          "46:   Browser* new_browser = OpenNewBrowser(browser()->profile());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: IN_PROC_BROWSER_TEST_F(BraveBrowserBrowserTest, LoadWebUIURLWithBadSchemeTest) {",
          "45:   ASSERT_TRUE(",
          "46:       ui_test_utils::NavigateToURL(browser(), GURL(\"http://settings/\")));",
          "47: }",
          "",
          "---------------"
        ],
        "browser/ui/webui/brave_web_ui_controller_factory.cc||browser/ui/webui/brave_web_ui_controller_factory.cc": [
          "File: browser/ui/webui/brave_web_ui_controller_factory.cc -> browser/ui/webui/brave_web_ui_controller_factory.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"chrome/common/url_constants.h\"",
          "32: #include \"components/prefs/pref_service.h\"",
          "33: #include \"content/public/browser/web_contents.h\"",
          "34: #include \"url/gurl.h\"",
          "36: #if !BUILDFLAG(IS_ANDROID)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"content/public/common/url_utils.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,",
          "192:                                              Profile* profile,",
          "193:                                              const GURL& url) {",
          "194:   if (url.host_piece() == kAdblockHost ||",
          "195:       url.host_piece() == kAdblockInternalsHost ||",
          "196:       url.host_piece() == kWebcompatReporterHost ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:   if (!url.SchemeIs(content::kBraveUIScheme) &&",
          "201:       !url.SchemeIs(content::kChromeUIScheme)) {",
          "202:     return nullptr;",
          "203:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}