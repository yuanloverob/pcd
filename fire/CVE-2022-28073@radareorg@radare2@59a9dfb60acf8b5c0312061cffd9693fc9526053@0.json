{
  "cve_id": "CVE-2022-28073",
  "cve_desc": "A use after free in r_reg_set_value function in radare2 5.4.2 and 5.4.0.",
  "repo": "radareorg/radare2",
  "patch_hash": "59a9dfb60acf8b5c0312061cffd9693fc9526053",
  "patch_info": {
    "commit_hash": "59a9dfb60acf8b5c0312061cffd9693fc9526053",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053",
    "files": [
      "libr/core/anal_tp.c",
      "libr/core/cmd_anal.c",
      "libr/reg/rvalue.c"
    ],
    "message": "Fix uaf crash in aaft (tests_64927) ##crash\n\nReported by giantbranch of NSFOCUS TIANJI Lab",
    "before_after_code_files": [
      "libr/core/anal_tp.c||libr/core/anal_tp.c",
      "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
      "libr/reg/rvalue.c||libr/reg/rvalue.c"
    ]
  },
  "patch_diff": {
    "libr/core/anal_tp.c||libr/core/anal_tp.c": [
      "File: libr/core/anal_tp.c -> libr/core/anal_tp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "510:   return;",
      "511:  }",
      "512:  char *pc = strdup (_pc);",
      "518:  r_cons_break_push (NULL, NULL);",
      "519:  r_list_sort (fcn->bbs, bb_cmpaddr); // TODO: The algorithm can be more accurate if blocks are followed by their jmp/fail, not just by address",
      "520:  r_list_foreach (fcn->bbs, it, bb) {",
      "521:   ut64 addr = bb->addr;",
      "522:   int i = 0;",
      "523:   r_reg_set_value (core->dbg->reg, r, addr);",
      "524:   while (1) {",
      "525:    if (r_cons_is_breaked ()) {",
      "",
      "[Removed Lines]",
      "513:  RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);",
      "514:  if (!r) {",
      "515:   free (buf);",
      "516:   return;",
      "517:  }",
      "",
      "[Added Lines]",
      "518:   RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);",
      "519:   if (!r) {",
      "520:    free (buf);",
      "521:    return;",
      "522:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "549:    }",
      "550:    sdb_num_set (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), loop_count + 1, 0);",
      "551:    if (r_anal_op_nonlinear (aop.type)) {   // skip the instr",
      "552:     r_reg_set_value (core->dbg->reg, r, addr + ret);",
      "553:    } else {",
      "554:     r_core_esil_step (core, UT64_MAX, NULL, NULL, false);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "552:     RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);",
      "553:     if (!r) {",
      "554:      free (buf);",
      "555:      return;",
      "556:     }",
      "",
      "---------------"
    ],
    "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
      "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4766:  int size = 0, i, type = R_REG_TYPE_GPR;",
      "4767:  int bits = (core->anal->bits & R_SYS_BITS_64)? 64: 32;",
      "4768:  int use_colors = r_config_get_i (core->config, \"scr.color\");",
      "4770:  const char *use_color;",
      "4771:  const char *name;",
      "4772:  char *arg;",
      "",
      "[Removed Lines]",
      "4769:  RRegItem *r;",
      "",
      "[Added Lines]",
      "4769:  RRegItem *r = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5098:   arg = strchr (str + 1, '=');",
      "5099:   if (arg) {",
      "5101:    char *ostr = r_str_trim_dup (str + 1);",
      "5102:    char *regname = r_str_trim_nc (ostr);",
      "5103:    r = r_reg_get (core->dbg->reg, regname, -1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5101:    ut64 n = r_num_math (core->num, arg + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5113:    if (r) {",
      "5118:     r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);",
      "",
      "[Removed Lines]",
      "5116:     r_reg_set_value (core->dbg->reg, r,",
      "5117:       r_num_math (core->num, arg + 1));",
      "",
      "[Added Lines]",
      "5117:     r_reg_set_value (core->dbg->reg, r, n);",
      "",
      "---------------"
    ],
    "libr/reg/rvalue.c||libr/reg/rvalue.c": [
      "File: libr/reg/rvalue.c -> libr/reg/rvalue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141: }",
      "143: R_API bool r_reg_set_value(RReg *reg, RRegItem *item, ut64 value) {",
      "144:  ut8 bytes[12];",
      "145:  ut8 *src = bytes;",
      "148:  if (r_reg_is_readonly (reg, item)) {",
      "149:   return true;",
      "",
      "[Removed Lines]",
      "146:  r_return_val_if_fail (reg && item, false);",
      "",
      "[Added Lines]",
      "144:  r_return_val_if_fail (reg && item, false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4aff1bb00224de4f5bc118f987dfd5d2fe3450d0",
      "candidate_info": {
        "commit_hash": "4aff1bb00224de4f5bc118f987dfd5d2fe3450d0",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/4aff1bb00224de4f5bc118f987dfd5d2fe3450d0",
        "files": [
          "libr/core/canal.c"
        ],
        "message": "Fix oobread crash in the analysis loop with corrupted ELFs (tests_64928) ##crash\n\nReported by giantbranch of NSFOCUS TIANJI Lab",
        "before_after_code_files": [
          "libr/core/canal.c||libr/core/canal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/radareorg/radare2/pull/19343"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "831:      const RList *syms = r_bin_get_symbols (core->bin);",
          "832:      ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");",
          "833:      r_list_foreach (syms, iter, sym) {",
          "835:        free (new_name);",
          "836:        new_name = r_str_newf (\"sym.%s\", sym->name);",
          "837:        break;",
          "",
          "[Removed Lines]",
          "834:       if ((sym->paddr + baddr) == fcn->addr && !strcmp (sym->type, R_BIN_TYPE_FUNC_STR)) {",
          "",
          "[Added Lines]",
          "834:       if (sym->type && (sym->paddr + baddr) == fcn->addr && !strcmp (sym->type, R_BIN_TYPE_FUNC_STR)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84886304781e0d1bad61a26300cee5e2d98cafcf",
      "candidate_info": {
        "commit_hash": "84886304781e0d1bad61a26300cee5e2d98cafcf",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/84886304781e0d1bad61a26300cee5e2d98cafcf",
        "files": [
          "libr/core/cmd_anal.c"
        ],
        "message": "Fix R_LOG lint",
        "before_after_code_files": [
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ],
          "candidate": [
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5489:    char *ostr = r_str_trim_dup (str + 1);",
          "5490:    char *regname = r_str_trim_nc (ostr);",
          "5491:    if (!reg_name_roll_set (core, regname, n)) {",
          "5493:    }",
          "5494:    free (ostr);",
          "5495:    return;",
          "",
          "[Removed Lines]",
          "5492:     R_LOG_ERROR (\"ar: Unknown register '%s'\\n\", regname);",
          "",
          "[Added Lines]",
          "5492:     R_LOG_ERROR (\"ar: Unknown register '%s'\", regname);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd261aa787bff3895e76b7dacc82d19db9103c5b",
      "candidate_info": {
        "commit_hash": "cd261aa787bff3895e76b7dacc82d19db9103c5b",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/cd261aa787bff3895e76b7dacc82d19db9103c5b",
        "files": [
          "libr/core/cmd_anal.c"
        ],
        "message": "Refactor `ar` set command to static func ##anal",
        "before_after_code_files": [
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ],
          "candidate": [
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5110:  core->dbg->reg = hack;",
          "5111: }",
          "5114: void cmd_anal_reg(RCore *core, const char *str) {",
          "5115: #if 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5113: static RRegItem *reg_by_name_role(RCore *core, const char *n) {",
          "5114:  RRegItem *r = r_reg_get (core->anal->reg, n, -1);",
          "5115:  if (!r) {",
          "5116:   int role = r_reg_get_name_idx (n);",
          "5117:   if (role != -1) {",
          "5118:    const char *alias = r_reg_get_name (core->anal->reg, role);",
          "5119:    if (alias) {",
          "5120:     r = r_reg_get (core->anal->reg, alias, -1);",
          "5121:    }",
          "5122:   }",
          "5123:  }",
          "5124:  return r;",
          "5125: }",
          "5127: static bool reg_name_roll_set(RCore *core, const char *name, ut64 n) {",
          "5128:  RRegItem *r = reg_by_name_role (core, name);",
          "5129:  if (r) {",
          "5130:   r_reg_set_value (core->anal->reg, r, n);",
          "5131:   r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);",
          "5132:   r_core_cmdf (core, \".dr*%d\", core->anal->config->bits); // XXX: replace in future",
          "5133:   return true;",
          "5134:  }",
          "5135:  return false;",
          "5136: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5126: #endif",
          "5127:  int size = 0, i, type = R_REG_TYPE_GPR;",
          "5128:  int use_colors = r_config_get_i (core->config, \"scr.color\");",
          "5130:  const char *use_color;",
          "5131:  const char *name;",
          "5132:  char *arg;",
          "",
          "[Removed Lines]",
          "5129:  RRegItem *r = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5464:    ut64 n = r_num_math (core->num, arg + 1);",
          "5465:    char *ostr = r_str_trim_dup (str + 1);",
          "5466:    char *regname = r_str_trim_nc (ostr);",
          "5487:    }",
          "5488:    free (ostr);",
          "5489:    return;",
          "",
          "[Removed Lines]",
          "5467:    r = r_reg_get (core->anal->reg, regname, -1);",
          "5468:    if (!r) {",
          "5469:     int role = r_reg_get_name_idx (regname);",
          "5470:     if (role != -1) {",
          "5471:      const char *alias = r_reg_get_name (core->anal->reg, role);",
          "5472:      if (alias) {",
          "5473:       r = r_reg_get (core->anal->reg, alias, -1);",
          "5474:      }",
          "5475:     }",
          "5476:    }",
          "5477:    if (r) {",
          "5480:     r_reg_set_value (core->anal->reg, r, n);",
          "5481:     r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);",
          "5484:     r_core_cmdf (core, \".dr*%d\", core->anal->config->bits);",
          "5485:    } else {",
          "5486:     eprintf (\"ar: Unknown register '%s'\\n\", regname);",
          "",
          "[Added Lines]",
          "5491:    if (!reg_name_roll_set (core, regname, n)) {",
          "5492:     R_LOG_ERROR (\"ar: Unknown register '%s'\\n\", regname);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7057:   case 'c': // \"aepc\"",
          "7058:    if (input[2] == ' ' || input[2] == '=') {",
          "7061:     r_core_cmd0 (core, \".ar*\");",
          "7062:    } else {",
          "7063:     eprintf (\"Usage: aepc [address]  # same as 'ar PC=..'\\n\");",
          "",
          "[Removed Lines]",
          "7060:     r_core_cmdf (core, \"ar PC=%s\", r_str_trim_head_ro (input + 3));",
          "",
          "[Added Lines]",
          "7066:     reg_name_roll_set (core, \"PC\", r_num_math (core->num, input + 3));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7389:    cmd_esil_mem (core, input + 2);",
          "7390:    break;",
          "7391:   case 'p': // \"aeip\" // initialize pc = $$",
          "7393:    break;",
          "7394:   case '?':",
          "7395:    r_core_cmd_help (core, help_msg_aei);",
          "",
          "[Removed Lines]",
          "7392:    r_core_cmd0 (core, \"ar PC=$$\");",
          "",
          "[Added Lines]",
          "7398:    reg_name_roll_set (core, \"PC\", core->offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7408:    {",
          "7409:     const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);",
          "7410:     if (pc && r_reg_getv (core->anal->reg, pc) == 0LL) {",
          "7412:     }",
          "7413:    }",
          "7414:    if (!(esil = core->anal->esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {",
          "",
          "[Removed Lines]",
          "7411:      r_core_cmd0 (core, \"ar PC=$$\");",
          "",
          "[Added Lines]",
          "7417:      reg_name_roll_set (core, \"PC\", core->offset);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3a95d26a60dc15ae8d5d3a0fe1895ebb6c21bbd",
      "candidate_info": {
        "commit_hash": "a3a95d26a60dc15ae8d5d3a0fe1895ebb6c21bbd",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/a3a95d26a60dc15ae8d5d3a0fe1895ebb6c21bbd",
        "files": [
          "libr/cons/dietline.c",
          "libr/cons/grep.c",
          "libr/cons/pal.c",
          "libr/core/anal_tp.c",
          "libr/core/cmd_anal.c",
          "libr/include/r_anal.h",
          "libr/parse/c/tccgen.c",
          "libr/parse/c/tccpp.c"
        ],
        "message": "Deshadow some variables, in progress for the full -Wshadow cleanup ##build",
        "before_after_code_files": [
          "libr/cons/dietline.c||libr/cons/dietline.c",
          "libr/cons/grep.c||libr/cons/grep.c",
          "libr/cons/pal.c||libr/cons/pal.c",
          "libr/core/anal_tp.c||libr/core/anal_tp.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/include/r_anal.h||libr/include/r_anal.h",
          "libr/parse/c/tccgen.c||libr/parse/c/tccgen.c",
          "libr/parse/c/tccpp.c||libr/parse/c/tccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/anal_tp.c||libr/core/anal_tp.c",
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ],
          "candidate": [
            "libr/core/anal_tp.c||libr/core/anal_tp.c",
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/cons/dietline.c||libr/cons/dietline.c": [
          "File: libr/cons/dietline.c -> libr/cons/dietline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:   return -1;",
          "246:  }",
          "247:  for (i = 1; i < len; i++) {",
          "249:   if (ch != -1) {",
          "250:    s[i] = ch;",
          "251:   }",
          "",
          "[Removed Lines]",
          "248:   int ch = r_cons_readchar ();",
          "",
          "[Added Lines]",
          "248:   ch = r_cons_readchar ();",
          "",
          "---------------"
        ],
        "libr/cons/grep.c||libr/cons/grep.c": [
          "File: libr/cons/grep.c -> libr/cons/grep.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:   return;",
          "512:  }",
          "513:  if (grep->code) {",
          "517:    char *nres = r_print_json_indent (res, I(context->color_mode), \"  \", NULL);",
          "518:    free (res);",
          "519:    res = r_str_newf (\"%s\\n\", nres);",
          "520:    free (nres);",
          "522:    if (res) {",
          "523:     cons->context->buffer_len = strlen (res);",
          "524:     cons->context->buffer_sz = cons->context->buffer_len;",
          "",
          "[Removed Lines]",
          "514:   char *buf = r_str_ndup (cons->context->buffer, cons->context->buffer_len);",
          "515:   if (buf) {",
          "516:    char *res = r_str_tokenize_json (buf);",
          "521:    free (buf);",
          "",
          "[Added Lines]",
          "514:   char *sbuf = r_str_ndup (cons->context->buffer, cons->context->buffer_len);",
          "515:   if (sbuf) {",
          "516:    char *res = r_str_tokenize_json (sbuf);",
          "521:    free (sbuf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:   return;",
          "542:  }",
          "543:  if (grep->ascart) {",
          "547:   free (cons->context->buffer);",
          "549:   cons->context->buffer = out;",
          "550:   cons->context->buffer_len = strlen (out);",
          "551:   cons->context->buffer_sz = cons->context->buffer_len;",
          "552:   return;",
          "553:  }",
          "554:  if (grep->zoom) {",
          "557:   char *out = r_str_scale (in, grep->zoom * 2, grep->zoomy?grep->zoomy:grep->zoom);",
          "558:   if (out) {",
          "559:    free (cons->context->buffer);",
          "",
          "[Removed Lines]",
          "544:   char *buf = strdup (cons->context->buffer);",
          "545:   r_str_ansi_filter (buf, NULL, NULL, -1);",
          "546:   char *out = r_str_ss (buf, NULL, 0);",
          "548:   free (buf);",
          "555:   char *in = calloc (cons->context->buffer_len + 2, 4);",
          "556:   strcpy (in, cons->context->buffer);",
          "",
          "[Added Lines]",
          "544:   char *sbuf = strdup (cons->context->buffer);",
          "545:   r_str_ansi_filter (sbuf, NULL, NULL, -1);",
          "546:   char *out = r_str_ss (sbuf, NULL, 0);",
          "548:   free (sbuf);",
          "555:   char *sin = calloc (cons->context->buffer_len + 2, 4);",
          "556:   strcpy (sin, cons->context->buffer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "563:   }",
          "564:   grep->zoom = 0;",
          "565:   grep->zoomy = 0;",
          "567:   return;",
          "568:  }",
          "569:  if (grep->json) {",
          "",
          "[Removed Lines]",
          "566:   free (in);",
          "",
          "[Added Lines]",
          "566:   free (sin);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "766: #define INSERT_LINES(list)\\",
          "767:   do {\\",
          "768:    r_list_foreach (list, iter, str) {\\",
          "773:     nl++;\\",
          "774:    }\\",
          "775:   }\\",
          "",
          "[Removed Lines]",
          "769:     int len = strlen (str);\\",
          "770:     memcpy (ptr, str, len);\\",
          "771:     memcpy (ptr + len, \"\\n\", 2);\\",
          "772:     ptr += len + 1;\\",
          "",
          "[Added Lines]",
          "769:     int slen = strlen (str);\\",
          "770:     memcpy (ptr, str, slen);\\",
          "771:     memcpy (ptr + slen, \"\\n\", 2);\\",
          "772:     ptr += slen + 1;\\",
          "",
          "---------------"
        ],
        "libr/cons/pal.c||libr/cons/pal.c": [
          "File: libr/cons/pal.c -> libr/cons/pal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:    }",
          "554:    hasnext = (keys[i + 1].name) ? \"\\n\" : \"\";",
          "558:    for (j = 0; j < len; j++) {",
          "561:     }",
          "562:    }",
          "563:    r_cons_printf (\".%s%s { color: rgb(%d, %d, %d); }%s\",",
          "566:    }",
          "567:    break;",
          "568:   case 'h':",
          "",
          "[Removed Lines]",
          "556:    char *name = strdup (keys[i].name);",
          "557:    int j, len = strlen (name);",
          "559:     if (name[j] == '.') {",
          "560:      name[j] = '_';",
          "564:     prefix, name, rcolor->r, rcolor->g, rcolor->b, hasnext);",
          "565:    free (name);",
          "",
          "[Added Lines]",
          "556:    char *sname = strdup (keys[i].name);",
          "557:    int j, len = strlen (sname);",
          "559:     if (sname[j] == '.') {",
          "560:      sname[j] = '_';",
          "564:     prefix, sname, rcolor->r, rcolor->g, rcolor->b, hasnext);",
          "565:    free (sname);",
          "",
          "---------------"
        ],
        "libr/core/anal_tp.c||libr/core/anal_tp.c": [
          "File: libr/core/anal_tp.c -> libr/core/anal_tp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:  size_t bblist_size = r_list_length (fcn->bbs);",
          "577:  ut64 *bblist = calloc (sizeof (ut64), bblist_size + 1);",
          "579:  r_list_foreach (fcn->bbs, it, bb) {",
          "581:  }",
          "584:   if (!bb) {",
          "586:    retries--;",
          "587:    free (bblist);",
          "588:    goto repeat;",
          "",
          "[Removed Lines]",
          "578:  int i = 0;",
          "580:   bblist[i++] = bb->addr;",
          "582:  for (i = 0; i < bblist_size; i++) {",
          "583:   bb = r_anal_get_block_at (core->anal, bblist[i]);",
          "585:    eprintf (\"Warning: basic block at 0x%08\"PFMT64x\" was removed during analysis.\\n\", bblist[i]);",
          "",
          "[Added Lines]",
          "578:  int j = 0;",
          "580:   bblist[j++] = bb->addr;",
          "582:  for (j = 0; j < bblist_size; j++) {",
          "583:   bb = r_anal_get_block_at (core->anal, bblist[j]);",
          "585:    eprintf (\"Warning: basic block at 0x%08\"PFMT64x\" was removed during analysis.\\n\", bblist[j]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:       RAnalOp *mop = r_core_anal_op (core, mov_addr, R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_BASIC);",
          "699:       if (mop) {",
          "700:        RAnalVar *mopvar = r_anal_get_used_function_var (anal, mop->addr);",
          "703:         __var_rename (anal, mopvar, \"canary\", addr);",
          "704:        }",
          "705:       }",
          "",
          "[Removed Lines]",
          "701:        ut32 type = mop->type & R_ANAL_OP_TYPE_MASK;",
          "702:        if (type == R_ANAL_OP_TYPE_MOV) {",
          "",
          "[Added Lines]",
          "701:        ut32 vt = mop->type & R_ANAL_OP_TYPE_MASK;",
          "702:        if (vt == R_ANAL_OP_TYPE_MOV) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "812:    case R_ANAL_OP_TYPE_LOAD:",
          "813:     if (aop.ptr && aop.refptr && aop.ptr != UT64_MAX) {",
          "814:      if (type == R_ANAL_OP_TYPE_LOAD) {",
          "818:       if (ptr && ptr != UT64_MAX) {",
          "819:        RFlagItem *f = r_flag_get_by_spaces (core->flags, ptr, R_FLAGS_FS_STRINGS, NULL);",
          "820:        if (f) {",
          "",
          "[Removed Lines]",
          "815:       ut8 buf[256] = {0};",
          "816:       r_io_read_at (core->io, aop.ptr, buf, sizeof (buf) - 1);",
          "817:       ut64 ptr = r_read_ble (buf, core->print->big_endian, aop.refptr * 8);",
          "",
          "[Added Lines]",
          "815:       ut8 sbuf[256] = {0};",
          "816:       r_io_read_at (core->io, aop.ptr, sbuf, sizeof (sbuf) - 1);",
          "817:       ut64 ptr = r_read_ble (sbuf, core->print->big_endian, aop.refptr * 8);",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5127:  }",
          "5128: #endif",
          "5129:  int size = 0, i, type = R_REG_TYPE_GPR;",
          "5131:  int use_colors = r_config_get_i (core->config, \"scr.color\");",
          "5132:  RRegItem *r = NULL;",
          "5133:  const char *use_color;",
          "",
          "[Removed Lines]",
          "5130:  int bits = core->anal->config->bits;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5389:   break;",
          "5390:  case 'n': // \"arn\"",
          "5391:   if (*(str + 1) == '\\0') {",
          "5393:    break;",
          "5394:   }",
          "5395:   name = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (str + 2));",
          "5396:   if (name && *name) {",
          "5397:    r_cons_println (name);",
          "5398:   } else {",
          "5400:   }",
          "5401:   break;",
          "5402:  case 'd': // \"ard\"",
          "5404:   break;",
          "5405:  case 'o': // \"aro\"",
          "5406:   r_reg_arena_swap (core->dbg->reg, false);",
          "5408:   r_reg_arena_swap (core->dbg->reg, false);",
          "5409:   break;",
          "5410:  case '=': // \"ar=\"",
          "5411:   {",
          "5412:    char *p = NULL;",
          "5414:    if (str[1]) {",
          "5415:     p = strdup (str + 1);",
          "5416:     if (str[1] != ':') {",
          "5421:       if (sz > 0) {",
          "5422:        size = sz;",
          "5423:       }",
          "",
          "[Removed Lines]",
          "5392:    eprintf (\"Oops. try arn [PC|SP|BP|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");",
          "5399:    eprintf (\"Oops. try arn [PC|SP|BP|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");",
          "5403:   r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, NULL, 3, use_color); // XXX detect which one is current usage",
          "5407:   r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, NULL, 0, use_color); // XXX detect which one is current usage",
          "5413:    char *bits = NULL;",
          "5418:      bits = strtok (p, \":\");",
          "5419:      if (r_str_isnumber (bits)) {",
          "5420:       st64 sz = r_num_math (core->num, bits);",
          "",
          "[Added Lines]",
          "5391:    eprintf (\"Oops. try arn [PC|SP|BP|SN|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");",
          "5398:    eprintf (\"Oops. try arn [PC|SP|BP|SN|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");",
          "5402:   r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, core->anal->config->bits,",
          "5403:    NULL, 3, use_color); // XXX detect which one is current usage",
          "5407:   r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, core->anal->config->bits,",
          "5408:    NULL, 0, use_color); // XXX detect which one is current usage",
          "5414:    char *bitstr = NULL;",
          "5419:      bitstr = strtok (p, \":\");",
          "5420:      if (r_str_isnumber (bitstr)) {",
          "5421:       st64 sz = r_num_math (core->num, bitstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5426:       break;",
          "5427:      }",
          "5428:     }",
          "5430:     if (str[len + 1] == ':') {",
          "5433:      char *reg = strtok (regs, \" \");",
          "5434:      RList *q_regs = r_list_new ();",
          "5435:      if (q_regs) {",
          "",
          "[Removed Lines]",
          "5429:     int len = bits ? strlen (bits) : 0;",
          "5432:      char *regs = bits ? strtok (NULL, \":\") : strtok ((char *)str + 1, \":\");",
          "",
          "[Added Lines]",
          "5430:     int len = bitstr ? strlen (bitstr) : 0;",
          "5433:      char *regs = bitstr ? strtok (NULL, \":\") : strtok ((char *)str + 1, \":\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5482:     r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);",
          "5486:    } else {",
          "5487:     eprintf (\"ar: Unknown register '%s'\\n\", regname);",
          "5488:    }",
          "",
          "[Removed Lines]",
          "5485:     r_core_cmdf (core, \".dr*%d\", bits);",
          "",
          "[Added Lines]",
          "5486:     r_core_cmdf (core, \".dr*%d\", core->anal->config->bits);",
          "",
          "---------------"
        ],
        "libr/include/r_anal.h||libr/include/r_anal.h": [
          "File: libr/include/r_anal.h -> libr/include/r_anal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:  char *name;",
          "220:  char *type;",
          "221:  size_t offset; // in bytes",
          "223: } RAnalStructMember;",
          "225: typedef struct r_anal_union_member_t {",
          "226:  char *name;",
          "227:  char *type;",
          "228:  size_t offset; // in bytes",
          "230: } RAnalUnionMember;",
          "232: typedef enum {",
          "",
          "[Removed Lines]",
          "222:  size_t size; // in bits?",
          "229:  size_t size; // in bits?",
          "",
          "[Added Lines]",
          "222:  size_t size; // in bits? rename to 'bitsize'",
          "229:  size_t size; // in bits? TODO rename to 'bitsize'",
          "",
          "---------------"
        ],
        "libr/parse/c/tccgen.c||libr/parse/c/tccgen.c": [
          "File: libr/parse/c/tccgen.c -> libr/parse/c/tccgen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1975:  case TOK_builtin_frame_address:",
          "1976:  {",
          "1977:   int level;",
          "1979:   next (s1);",
          "1980:   skip (s1, '(');",
          "1981:   if (s1->tok != TOK_CINT || s1->tokc.i < 0) {",
          "",
          "[Removed Lines]",
          "1978:   CType type = { 0  };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2012:  case TOK_builtin_va_arg_types:",
          "2013:   if (!(!strncmp (s1->arch, \"x86\", 3) && s1->bits == 64 &&",
          "2014:         !strncmp (s1->os, \"windows\", 7))) {",
          "2016:    next (s1);",
          "2017:    skip (s1, '(');",
          "2018:    parse_type (s1, &type);",
          "",
          "[Removed Lines]",
          "2015:    CType type = { 0  };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/parse/c/tccpp.c||libr/parse/c/tccpp.c": [
          "File: libr/parse/c/tccpp.c -> libr/parse/c/tccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2765:     while (is_space (s1->ch) || s1->ch == '\\n' || s1->ch == '/') {",
          "2766:      if (s1->ch == '/') {",
          "2767:       int c;",
          "2770:       if (c == '*') {",
          "2773:       } else if (c == '/') {",
          "2776:       } else {",
          "2777:        break;",
          "2778:       }",
          "",
          "[Removed Lines]",
          "2768:       uint8_t *p = s1->file->buf_ptr;",
          "2769:       PEEKC (s1, c, p);",
          "2771:        p = parse_comment (s1, p);",
          "2772:        s1->file->buf_ptr = p - 1;",
          "2774:        p = parse_line_comment (s1, p);",
          "2775:        s1->file->buf_ptr = p - 1;",
          "",
          "[Added Lines]",
          "2768:       uint8_t *sp = s1->file->buf_ptr;",
          "2769:       PEEKC (s1, c, sp);",
          "2771:        sp = parse_comment (s1, sp);",
          "2772:        s1->file->buf_ptr = sp - 1;",
          "2774:        p = (int*)parse_line_comment (s1, sp);",
          "2775:        s1->file->buf_ptr = sp - 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd1c5bd07ef9f1ae9dde356a652c09dce360ea4e",
      "candidate_info": {
        "commit_hash": "fd1c5bd07ef9f1ae9dde356a652c09dce360ea4e",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/fd1c5bd07ef9f1ae9dde356a652c09dce360ea4e",
        "files": [
          "libr/core/cmd_anal.c"
        ],
        "message": "ar command using ->anal, otherwise for non-debug builds that fails ##analysis",
        "before_after_code_files": [
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ],
          "candidate": [
            "libr/core/cmd_anal.c||libr/core/cmd_anal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5384:    ut64 n = r_num_math (core->num, arg + 1);",
          "5385:    char *ostr = r_str_trim_dup (str + 1);",
          "5386:    char *regname = r_str_trim_nc (ostr);",
          "5388:    if (!r) {",
          "5389:     int role = r_reg_get_name_idx (regname);",
          "5390:     if (role != -1) {",
          "5392:      if (alias) {",
          "5394:      }",
          "5395:     }",
          "5396:    }",
          "5397:    if (r) {",
          "5401:     r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);",
          "",
          "[Removed Lines]",
          "5387:    r = r_reg_get (core->dbg->reg, regname, -1);",
          "5391:      const char *alias = r_reg_get_name (core->dbg->reg, role);",
          "5393:       r = r_reg_get (core->dbg->reg, alias, -1);",
          "5400:     r_reg_set_value (core->dbg->reg, r, n);",
          "",
          "[Added Lines]",
          "5387:    r = r_reg_get (core->anal->reg, regname, -1);",
          "5391:      const char *alias = r_reg_get_name (core->anal->reg, role);",
          "5393:       r = r_reg_get (core->anal->reg, alias, -1);",
          "5400:     r_reg_set_value (core->anal->reg, r, n);",
          "",
          "---------------"
        ]
      }
    }
  ]
}