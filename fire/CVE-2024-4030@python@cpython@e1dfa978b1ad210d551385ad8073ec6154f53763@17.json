{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "27b61c17a1d32d4773bb91f31c31e05a54b3b3df",
      "candidate_info": {
        "commit_hash": "27b61c17a1d32d4773bb91f31c31e05a54b3b3df",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/27b61c17a1d32d4773bb91f31c31e05a54b3b3df",
        "files": [
          "Lib/pathlib/_abc.py",
          "Lib/test/test_pathlib/test_pathlib_abc.py",
          "Misc/NEWS.d/next/Library/2024-05-17-17-32-12.gh-issue-119113.kEv1Ll.rst"
        ],
        "message": "[3.13] GH-119113: Raise `TypeError` from `pathlib.PurePath.with_suffix(None)` (GH-119124) (#119183)\n\nRestore behaviour from 3.12 when `path.with_suffix(None)` is called.\n(cherry picked from commit 3c28510b984392b8dac87a17dfc5887366d5c4ab)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>",
        "before_after_code_files": [
          "Lib/pathlib/_abc.py||Lib/pathlib/_abc.py",
          "Lib/test/test_pathlib/test_pathlib_abc.py||Lib/test/test_pathlib/test_pathlib_abc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pathlib/_abc.py||Lib/pathlib/_abc.py": [
          "File: Lib/pathlib/_abc.py -> Lib/pathlib/_abc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:         string, remove the suffix from the path.",
          "226:         \"\"\"",
          "227:         stem = self.stem",
          "231:             # If the stem is empty, we can't make the suffix non-empty.",
          "232:             raise ValueError(f\"{self!r} has an empty name\")",
          "236:             raise ValueError(f\"Invalid suffix {suffix!r}\")",
          "238:     def relative_to(self, other, *, walk_up=False):",
          "239:         \"\"\"Return the relative path to another path identified by the passed",
          "",
          "[Removed Lines]",
          "228:         if not suffix:",
          "229:             return self.with_name(stem)",
          "230:         elif not stem:",
          "233:         elif suffix.startswith('.') and len(suffix) > 1:",
          "234:             return self.with_name(stem + suffix)",
          "235:         else:",
          "",
          "[Added Lines]",
          "228:         if not stem:",
          "231:         elif suffix and not (suffix.startswith('.') and len(suffix) > 1):",
          "233:         else:",
          "234:             return self.with_name(stem + suffix)",
          "",
          "---------------"
        ],
        "Lib/test/test_pathlib/test_pathlib_abc.py||Lib/test/test_pathlib/test_pathlib_abc.py": [
          "File: Lib/test/test_pathlib/test_pathlib_abc.py -> Lib/test/test_pathlib/test_pathlib_abc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "999:         self.assertRaises(ValueError, P('c:a/b').with_suffix, 'c\\\\d')",
          "1000:         self.assertRaises(ValueError, P('c:a/b').with_suffix, '.c/d')",
          "1001:         self.assertRaises(ValueError, P('c:a/b').with_suffix, '.c\\\\d')",
          "1003:     def test_with_suffix_empty(self):",
          "1004:         P = self.cls",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1002:         self.assertRaises(TypeError, P('c:a/b').with_suffix, None)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1006:         self.assertRaises(ValueError, P('').with_suffix, '.gz')",
          "1007:         self.assertRaises(ValueError, P('/').with_suffix, '.gz')",
          "1010:         P = self.cls",
          "1011:         # Invalid suffix.",
          "1012:         self.assertRaises(ValueError, P('a/b').with_suffix, 'gz')",
          "",
          "[Removed Lines]",
          "1009:     def test_with_suffix_seps(self):",
          "",
          "[Added Lines]",
          "1010:     def test_with_suffix_invalid(self):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1017:         self.assertRaises(ValueError, P('a/b').with_suffix, '.c/.d')",
          "1018:         self.assertRaises(ValueError, P('a/b').with_suffix, './.d')",
          "1019:         self.assertRaises(ValueError, P('a/b').with_suffix, '.d/.')",
          "1021:     def test_relative_to_common(self):",
          "1022:         P = self.cls",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:         self.assertRaises(TypeError, P('a/b').with_suffix, None)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff358616ddb5da18c79ceffabb55c3806a345383",
      "candidate_info": {
        "commit_hash": "ff358616ddb5da18c79ceffabb55c3806a345383",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ff358616ddb5da18c79ceffabb55c3806a345383",
        "files": [
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-118908: Protect the REPL subprocess with a timeout in tests (GH-120408) (#120430)\n\n(cherry picked from commit 3453362183f083e37ea866a7ae1b34147ffaf81d)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from unittest import TestCase, skipUnless",
          "9: from unittest.mock import patch",
          "10: from test.support import force_not_colorized",
          "12: from .support import (",
          "13:     FakeConsole,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from test.support import SHORT_TIMEOUT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:         os.close(master_fd)",
          "887:         os.close(slave_fd)",
          "889:         return \"\\n\".join(output), exit_code",
          "",
          "[Removed Lines]",
          "888:         exit_code = process.wait()",
          "",
          "[Added Lines]",
          "889:         try:",
          "890:             exit_code = process.wait(timeout=SHORT_TIMEOUT)",
          "891:         except subprocess.TimeoutExpired:",
          "892:             process.kill()",
          "893:             exit_code = process.returncode",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13a5082afea155b8558c700156e3832548d78b3a",
      "candidate_info": {
        "commit_hash": "13a5082afea155b8558c700156e3832548d78b3a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/13a5082afea155b8558c700156e3832548d78b3a",
        "files": [
          "Lib/test/test_inspect/inspect_stringized_annotations_pep695.py",
          "Lib/test/test_inspect/test_inspect.py"
        ],
        "message": "[3.13] Add some more edge-case tests for `inspect.get_annotations` with `eval_str=True` (GH-120550) (#120551)\n\nCo-authored-by: Alex Waygood <Alex.Waygood@Gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_inspect/inspect_stringized_annotations_pep695.py||Lib/test/test_inspect/inspect_stringized_annotations_pep695.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_inspect/inspect_stringized_annotations_pep695.py||Lib/test/test_inspect/inspect_stringized_annotations_pep695.py": [
          "File: Lib/test/test_inspect/inspect_stringized_annotations_pep695.py -> Lib/test/test_inspect/inspect_stringized_annotations_pep695.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     def generic_method_2[Eggs, **Spam](self, x: Eggs, y: Spam): pass",
          "48: def nested():",
          "49:     from types import SimpleNamespace",
          "50:     from inspect import get_annotations",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: # Eggs is `int` in globals, a TypeVar in type_params, and `str` in locals:",
          "49: class E[Eggs]:",
          "50:     Eggs = str",
          "51:     x: Eggs",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     Spam = memoryview",
          "57:         x: Eggs",
          "58:         y: Spam",
          "",
          "[Removed Lines]",
          "56:     class E[Eggs, **Spam]:",
          "",
          "[Added Lines]",
          "63:     class F[Eggs, **Spam]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     def generic_function[Eggs, **Spam](x: Eggs, y: Spam): pass",
          "66:     return SimpleNamespace(",
          "70:         generic_func=generic_function,",
          "71:         generic_func_annotations=get_annotations(generic_function, eval_str=True)",
          "72:     )",
          "",
          "[Removed Lines]",
          "67:         E=E,",
          "68:         E_annotations=get_annotations(E, eval_str=True),",
          "69:         E_meth_annotations=get_annotations(E.generic_method, eval_str=True),",
          "",
          "[Added Lines]",
          "73:     # Eggs is `int` in globals, `bytes` in the function scope,",
          "74:     # a TypeVar in the type_params, and `str` in locals:",
          "75:     class G[Eggs]:",
          "76:         Eggs = str",
          "77:         x: Eggs",
          "81:         F=F,",
          "82:         F_annotations=get_annotations(F, eval_str=True),",
          "83:         F_meth_annotations=get_annotations(F.generic_method, eval_str=True),",
          "84:         G_annotations=get_annotations(G, eval_str=True),",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1770:             )",
          "1771:         )",
          "1773:     def test_pep_695_generics_with_future_annotations_nested_in_function(self):",
          "1774:         results = inspect_stringized_annotations_pep695.nested()",
          "1776:         self.assertEqual(",
          "1779:         )",
          "1780:         self.assertEqual(",
          "1783:         )",
          "1784:         self.assertNotEqual(",
          "1787:         )",
          "1788:         self.assertEqual(",
          "1790:             set()",
          "1791:         )",
          "1793:         self.assertEqual(",
          "1794:             set(results.generic_func_annotations.values()),",
          "1795:             set(results.generic_func.__type_params__)",
          "",
          "[Removed Lines]",
          "1777:             set(results.E_annotations.values()),",
          "1778:             set(results.E.__type_params__)",
          "1781:             set(results.E_meth_annotations.values()),",
          "1782:             set(results.E.generic_method.__type_params__)",
          "1785:             set(results.E_meth_annotations.values()),",
          "1786:             set(results.E.__type_params__)",
          "1789:             set(results.E_meth_annotations.values()).intersection(results.E.__type_params__),",
          "",
          "[Added Lines]",
          "1773:     def test_pep_695_generic_method_with_future_annotations_name_clash_with_global_and_local_vars(self):",
          "1774:         self.assertEqual(",
          "1775:             inspect.get_annotations(",
          "1776:                 inspect_stringized_annotations_pep695.E, eval_str=True",
          "1777:             ),",
          "1778:             {\"x\": str},",
          "1779:         )",
          "1785:             set(results.F_annotations.values()),",
          "1786:             set(results.F.__type_params__)",
          "1789:             set(results.F_meth_annotations.values()),",
          "1790:             set(results.F.generic_method.__type_params__)",
          "1793:             set(results.F_meth_annotations.values()),",
          "1794:             set(results.F.__type_params__)",
          "1797:             set(results.F_meth_annotations.values()).intersection(results.F.__type_params__),",
          "1801:         self.assertEqual(results.G_annotations, {\"x\": str})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c88898a696785fb4872a271d7c90f6505178fd7",
      "candidate_info": {
        "commit_hash": "3c88898a696785fb4872a271d7c90f6505178fd7",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3c88898a696785fb4872a271d7c90f6505178fd7",
        "files": [
          "Lib/test/test_logging.py"
        ],
        "message": "[3.13] gh-119819: Conditional skip of logging tests that require multiprocessing subprocess support (GH-120476) (#120531)\n\ngh-119819: Conditional skip of logging tests that require multiprocessing subprocess support (GH-120476)\n\nSkip tests that require multiprocessing subprocess support.\n(cherry picked from commit 92f6d400f76b6a04dddd944568870f689c8fab5f)\n\nCo-authored-by: Russell Keith-Magee <russell@keith-magee.com>",
        "before_after_code_files": [
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3898:                 self.addCleanup(os.remove, fn)",
          "3900:     @threading_helper.requires_working_threading()",
          "3901:     def test_config_queue_handler(self):",
          "3902:         q = CustomQueue()",
          "3903:         dq = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3901:     @support.requires_subprocess()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3926:             msg = str(ctx.exception)",
          "3927:             self.assertEqual(msg, \"Unable to configure handler 'ah'\")",
          "3929:     def test_multiprocessing_queues(self):",
          "3930:         # See gh-119819",
          "3935:         cd = copy.deepcopy(self.config_queue_handler)",
          "3936:         from multiprocessing import Queue as MQ, Manager as MM",
          "3937:         q1 = MQ()  # this can't be pickled",
          "",
          "[Removed Lines]",
          "3932:         # will skip test if it's not available",
          "3933:         import_helper.import_module('_multiprocessing')",
          "",
          "[Added Lines]",
          "3930:     @support.requires_subprocess()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbcb5265bfaf80af386faa8858359bb6f15cb77d",
      "candidate_info": {
        "commit_hash": "cbcb5265bfaf80af386faa8858359bb6f15cb77d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cbcb5265bfaf80af386faa8858359bb6f15cb77d",
        "files": [
          "Include/object.h",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-117657: Make PyType_HasFeature (exported version) atomic (GH-120484) (#120554)\n\ngh-117657: Make PyType_HasFeature (exported version) atomic (GH-120484)\n\nMake PyType_HasFeature (exported version) atomic\n(cherry picked from commit 6f63dfff6f493b405f3422210a168369e1e7a35d)\n\nCo-authored-by: Ken Jin <kenjin@python.org>",
        "before_after_code_files": [
          "Include/object.h||Include/object.h",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/object.h||Include/object.h": [
          "File: Include/object.h -> Include/object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:     flags = PyType_GetFlags(type);",
          "1240: #else",
          "1242: #endif",
          "1243:     return ((flags & feature) != 0);",
          "1244: }",
          "",
          "[Removed Lines]",
          "1241:     flags = type->tp_flags;",
          "",
          "[Added Lines]",
          "1241: #   ifdef Py_GIL_DISABLED",
          "1242:         flags = _Py_atomic_load_ulong_relaxed(&type->tp_flags);",
          "1243: #   else",
          "1244:         flags = type->tp_flags;",
          "1245: #   endif",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3435: unsigned long",
          "3436: PyType_GetFlags(PyTypeObject *type)",
          "3437: {",
          "3439: }",
          "",
          "[Removed Lines]",
          "3438:     return type->tp_flags;",
          "",
          "[Added Lines]",
          "3438:     return FT_ATOMIC_LOAD_ULONG_RELAXED(type->tp_flags);",
          "",
          "---------------"
        ]
      }
    }
  ]
}