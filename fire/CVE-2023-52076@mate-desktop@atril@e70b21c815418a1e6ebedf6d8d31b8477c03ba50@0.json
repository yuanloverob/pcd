{
  "cve_id": "CVE-2023-52076",
  "cve_desc": "Atril Document Viewer is the default document reader of the MATE desktop environment for Linux. A path traversal and arbitrary file write vulnerability exists in versions of Atril prior to 1.26.2. This vulnerability is capable of writing arbitrary files anywhere on the filesystem to which the user opening a crafted document has access. The only limitation is that this vulnerability cannot be exploited to overwrite existing files, but that doesn't stop an attacker from achieving Remote Command Execution on the target system. Version 1.26.2 of Atril contains a patch for this vulnerability.",
  "repo": "mate-desktop/atril",
  "patch_hash": "e70b21c815418a1e6ebedf6d8d31b8477c03ba50",
  "patch_info": {
    "commit_hash": "e70b21c815418a1e6ebedf6d8d31b8477c03ba50",
    "repo": "mate-desktop/atril",
    "commit_url": "https://github.com/mate-desktop/atril/commit/e70b21c815418a1e6ebedf6d8d31b8477c03ba50",
    "files": [
      "backend/epub/epub-document.c"
    ],
    "message": "epub: Prevent path traversal when extracting files\n\nTest each file's resolved path against the temporary directory\nbefore extracting.",
    "before_after_code_files": [
      "backend/epub/epub-document.c||backend/epub/epub-document.c"
    ]
  },
  "patch_diff": {
    "backend/epub/epub-document.c||backend/epub/epub-document.c": [
      "File: backend/epub/epub-document.c -> backend/epub/epub-document.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "635:         for (i = 0; i < g_strv_length (mimetypes); i++) {",
      "636:            if (strcmp(mimeFromFile, mimetypes[i]) == 0)",
      "637:                 return TRUE;",
      "641:         if (strcmp (mimeFromFile, \"application/zip\") == 0)",
      "",
      "[Removed Lines]",
      "638:  }",
      "",
      "[Added Lines]",
      "638:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "671: }",
      "673: static gboolean",
      "675: {",
      "676:     GFile * outfile ;",
      "677:     gsize writesize = 0;",
      "",
      "[Removed Lines]",
      "674: extract_one_file(EpubDocument* epub_document,GError ** error)",
      "",
      "[Added Lines]",
      "674: extract_one_file(EpubDocument* epub_document, GFile *tmp_gfile, GError ** error)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "698:     gfilepath = g_string_new(epub_document->tmp_archive_dir) ;",
      "699:     g_string_append_printf(gfilepath,\"/%s\",(gchar*)currentfilename);",
      "702:     if (directory != NULL && *directory == '\\0')",
      "703:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "701:     outfile = g_file_new_for_path (gfilepath->str);",
      "702:     g_autofree gchar *rpath = g_file_get_relative_path (tmp_gfile, outfile);",
      "704:     if (rpath == NULL)",
      "705:     {",
      "706:         g_set_error_literal (error,",
      "707:                              EV_DOCUMENT_ERROR,",
      "708:                              EV_DOCUMENT_ERROR_INVALID,",
      "709:                              _(\"epub file is invalid or corrupt\"));",
      "710:         g_critical (\"Invalid filename in Epub container - '%s'\", (gchar *) currentfilename);",
      "711:         result = FALSE;",
      "712:         goto out;",
      "713:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "725:         g_string_free(dir_create,TRUE);",
      "726:     }",
      "729:     outstream = g_file_create(outfile,G_FILE_CREATE_PRIVATE,NULL,error);",
      "730:     gpointer buffer = g_malloc0(512);",
      "731:     while ( (writesize = unzReadCurrentFile(epub_document->epubDocument,buffer,512) ) != 0 )",
      "",
      "[Removed Lines]",
      "728:     outfile = g_file_new_for_path(gfilepath->str);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "738:     }",
      "739:     g_free(buffer);",
      "740:     g_output_stream_close((GOutputStream*)outstream,NULL,error);",
      "744: out:",
      "745:     unzCloseCurrentFile (epub_document->epubDocument) ;",
      "746:     g_string_free(gfilepath,TRUE);",
      "747:     g_free(currentfilename);",
      "",
      "[Removed Lines]",
      "741:     g_object_unref(outfile) ;",
      "742:     g_object_unref(outstream) ;",
      "",
      "[Added Lines]",
      "754:     g_object_unref(outstream);",
      "757:     g_object_unref(outfile);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "753:                              EpubDocument *epub_document,",
      "754:                              GError ** error)",
      "755: {",
      "756:     GError *err = NULL;",
      "757:     epub_document->archivename = g_filename_from_uri(uri,NULL,error);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769:     GFile *tmp_gfile = NULL;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "814:         goto out;",
      "815:     }",
      "817:     while ( TRUE )",
      "818:     {",
      "820:         {",
      "821:             if (err) {",
      "822:                 g_propagate_error (error, err);",
      "",
      "[Removed Lines]",
      "819:         if ( extract_one_file(epub_document,&err) == FALSE )",
      "",
      "[Added Lines]",
      "831:     tmp_gfile = g_file_new_for_path (epub_document->tmp_archive_dir);",
      "834:         if ( extract_one_file(epub_document, tmp_gfile, &err) == FALSE )",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "837:     }",
      "839: out:",
      "840:     unzClose(epub_document->epubDocument);",
      "841:     return result;",
      "842: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:     g_clear_object (&tmp_gfile);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24f197791e9f666d2437a00229515c233b885821",
      "candidate_info": {
        "commit_hash": "24f197791e9f666d2437a00229515c233b885821",
        "repo": "mate-desktop/atril",
        "commit_url": "https://github.com/mate-desktop/atril/commit/24f197791e9f666d2437a00229515c233b885821",
        "files": [
          "backend/epub/epub-document.c"
        ],
        "message": "epub: Prevent path traversal when extracting files\n\nTest each file's resolved path against the temporary directory\nbefore extracting.",
        "before_after_code_files": [
          "backend/epub/epub-document.c||backend/epub/epub-document.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "backend/epub/epub-document.c||backend/epub/epub-document.c"
          ],
          "candidate": [
            "backend/epub/epub-document.c||backend/epub/epub-document.c"
          ]
        }
      },
      "candidate_diff": {
        "backend/epub/epub-document.c||backend/epub/epub-document.c": [
          "File: backend/epub/epub-document.c -> backend/epub/epub-document.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:         for (i = 0; i < g_strv_length (mimetypes); i++) {",
          "636:            if (strcmp(mimeFromFile, mimetypes[i]) == 0)",
          "637:                 return TRUE;",
          "641:         if (strcmp (mimeFromFile, \"application/zip\") == 0)",
          "",
          "[Removed Lines]",
          "638:  }",
          "",
          "[Added Lines]",
          "638:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671: }",
          "673: static gboolean",
          "675: {",
          "676:     GFile * outfile ;",
          "677:     gsize writesize = 0;",
          "",
          "[Removed Lines]",
          "674: extract_one_file(EpubDocument* epub_document,GError ** error)",
          "",
          "[Added Lines]",
          "674: extract_one_file(EpubDocument* epub_document, GFile *tmp_gfile, GError ** error)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "698:     gfilepath = g_string_new(epub_document->tmp_archive_dir) ;",
          "699:     g_string_append_printf(gfilepath,\"/%s\",(gchar*)currentfilename);",
          "702:     if (directory != NULL && *directory == '\\0')",
          "703:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701:     outfile = g_file_new_for_path (gfilepath->str);",
          "702:     g_autofree gchar *rpath = g_file_get_relative_path (tmp_gfile, outfile);",
          "704:     if (rpath == NULL)",
          "705:     {",
          "706:         g_set_error_literal (error,",
          "707:                              EV_DOCUMENT_ERROR,",
          "708:                              EV_DOCUMENT_ERROR_INVALID,",
          "709:                              _(\"epub file is invalid or corrupt\"));",
          "710:         g_critical (\"Invalid filename in Epub container - '%s'\", (gchar *) currentfilename);",
          "711:         result = FALSE;",
          "712:         goto out;",
          "713:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "725:         g_string_free(dir_create,TRUE);",
          "726:     }",
          "729:     outstream = g_file_create(outfile,G_FILE_CREATE_PRIVATE,NULL,error);",
          "730:     gpointer buffer = g_malloc0(512);",
          "731:     while ( (writesize = unzReadCurrentFile(epub_document->epubDocument,buffer,512) ) != 0 )",
          "",
          "[Removed Lines]",
          "728:     outfile = g_file_new_for_path(gfilepath->str);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "738:     }",
          "739:     g_free(buffer);",
          "740:     g_output_stream_close((GOutputStream*)outstream,NULL,error);",
          "744: out:",
          "745:     unzCloseCurrentFile (epub_document->epubDocument) ;",
          "746:     g_string_free(gfilepath,TRUE);",
          "747:     g_free(currentfilename);",
          "",
          "[Removed Lines]",
          "741:     g_object_unref(outfile) ;",
          "742:     g_object_unref(outstream) ;",
          "",
          "[Added Lines]",
          "754:     g_object_unref(outstream);",
          "757:     g_object_unref(outfile);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "753:                              EpubDocument *epub_document,",
          "754:                              GError ** error)",
          "755: {",
          "756:     GError *err = NULL;",
          "757:     epub_document->archivename = g_filename_from_uri(uri,NULL,error);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "769:     GFile *tmp_gfile = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "814:         goto out;",
          "815:     }",
          "817:     while ( TRUE )",
          "818:     {",
          "820:         {",
          "821:             if (err) {",
          "822:                 g_propagate_error (error, err);",
          "",
          "[Removed Lines]",
          "819:         if ( extract_one_file(epub_document,&err) == FALSE )",
          "",
          "[Added Lines]",
          "831:     tmp_gfile = g_file_new_for_path (epub_document->tmp_archive_dir);",
          "834:         if ( extract_one_file(epub_document, tmp_gfile, &err) == FALSE )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "837:     }",
          "839: out:",
          "840:     unzClose(epub_document->epubDocument);",
          "841:     return result;",
          "842: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:     g_clear_object (&tmp_gfile);",
          "",
          "---------------"
        ]
      }
    }
  ]
}