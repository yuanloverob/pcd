{
  "cve_id": "CVE-2019-3804",
  "cve_desc": "It was found that cockpit before version 184 used glib's base64 decode functionality incorrectly resulting in a denial of service attack. An unauthenticated attacker could send a specially crafted request with an invalid base64-encoded cookie which could cause the web service to crash.",
  "repo": "cockpit-project/cockpit",
  "patch_hash": "c51f6177576d7e12614c64d316cf0b67addd17c9",
  "patch_info": {
    "commit_hash": "c51f6177576d7e12614c64d316cf0b67addd17c9",
    "repo": "cockpit-project/cockpit",
    "commit_url": "https://github.com/cockpit-project/cockpit/commit/c51f6177576d7e12",
    "files": [
      "src/ws/cockpitauth.c",
      "src/ws/test-auth.c"
    ],
    "message": "ws: Fix bug parsing invalid base64 headers\n\nThe len parameter to g_base64_decode_inplace() is a inout\nparameter, and needs to be initialized. Lets just use\nthe simpler g_base64_decode() function. This fixes a segfault.\n\nCloses #10819",
    "before_after_code_files": [
      "src/ws/cockpitauth.c||src/ws/cockpitauth.c",
      "src/ws/test-auth.c||src/ws/test-auth.c"
    ]
  },
  "patch_diff": {
    "src/ws/cockpitauth.c||src/ws/cockpitauth.c": [
      "File: src/ws/cockpitauth.c -> src/ws/cockpitauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1190:   cockpit_authorize_logger (authorize_logger, 0);",
      "1191: }",
      "1194: base64_decode_string (const char *enc)",
      "1195: {",
      "1196:   if (enc == NULL)",
      "1197:     return NULL;",
      "1203:   return dec;",
      "1204: }",
      "",
      "[Removed Lines]",
      "1193: static char *",
      "1199:   char *dec = g_strdup (enc);",
      "1200:   gsize len;",
      "1201:   g_base64_decode_inplace (dec, &len);",
      "1202:   dec[len] = '\\0';",
      "",
      "[Added Lines]",
      "1193: static gchar *",
      "1196:   gchar *dec;",
      "1197:   gsize len;",
      "1202:   dec = (gchar *)g_base64_decode (enc, &len);",
      "1203:   if (dec)",
      "1204:     dec[len] = '\\0';",
      "",
      "---------------"
    ],
    "src/ws/test-auth.c||src/ws/test-auth.c": [
      "File: src/ws/test-auth.c -> src/ws/test-auth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "286:   if (cockpit_auth_check_cookie (test->auth, \"/cockpit\", headers))",
      "287:       g_assert_not_reached ();",
      "289:   g_hash_table_destroy (headers);",
      "290: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "290:   g_hash_table_remove_all (headers);",
      "291:   g_hash_table_insert (headers, g_strdup (\"Cookie\"), g_strdup (\"cockpit=d\"));",
      "292:   if (cockpit_auth_check_cookie (test->auth, \"/cockpit\", headers))",
      "293:       g_assert_not_reached ();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b84079c20dca0f0d1a7974c30a589ddccc4b592",
      "candidate_info": {
        "commit_hash": "3b84079c20dca0f0d1a7974c30a589ddccc4b592",
        "repo": "cockpit-project/cockpit",
        "commit_url": "https://github.com/cockpit-project/cockpit/commit/3b84079c20dca0f0d1a7974c30a589ddccc4b592",
        "files": [
          "src/ws/cockpitauth.c",
          "src/ws/test-auth.c"
        ],
        "message": "ws: Fix bug parsing invalid base64 headers\n\nThe len parameter to g_base64_decode_inplace() is a inout\nparameter, and needs to be initialized. Lets just use\nthe simpler g_base64_decode() function. This fixes a segfault.\n\nCherry-picked from master commit c51f6177576d\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1659542\n\nCloses #10906",
        "before_after_code_files": [
          "src/ws/cockpitauth.c||src/ws/cockpitauth.c",
          "src/ws/test-auth.c||src/ws/test-auth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/ws/cockpitauth.c||src/ws/cockpitauth.c",
            "src/ws/test-auth.c||src/ws/test-auth.c"
          ],
          "candidate": [
            "src/ws/cockpitauth.c||src/ws/cockpitauth.c",
            "src/ws/test-auth.c||src/ws/test-auth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ws/cockpitauth.c||src/ws/cockpitauth.c": [
          "File: src/ws/cockpitauth.c -> src/ws/cockpitauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1174:   cockpit_authorize_logger (authorize_logger, 0);",
          "1175: }",
          "1178: base64_decode_string (const char *enc)",
          "1179: {",
          "1180:   if (enc == NULL)",
          "1181:     return NULL;",
          "1187:   return dec;",
          "1188: }",
          "",
          "[Removed Lines]",
          "1177: static char *",
          "1183:   char *dec = g_strdup (enc);",
          "1184:   gsize len;",
          "1185:   g_base64_decode_inplace (dec, &len);",
          "1186:   dec[len] = '\\0';",
          "",
          "[Added Lines]",
          "1177: static gchar *",
          "1180:   gchar *dec;",
          "1181:   gsize len;",
          "1186:   dec = (gchar *)g_base64_decode (enc, &len);",
          "1187:   if (dec)",
          "1188:     dec[len] = '\\0';",
          "",
          "---------------"
        ],
        "src/ws/test-auth.c||src/ws/test-auth.c": [
          "File: src/ws/test-auth.c -> src/ws/test-auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   if (cockpit_auth_check_cookie (test->auth, \"/cockpit\", headers))",
          "287:       g_assert_not_reached ();",
          "289:   g_hash_table_destroy (headers);",
          "290: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:   g_hash_table_remove_all (headers);",
          "291:   g_hash_table_insert (headers, g_strdup (\"Cookie\"), g_strdup (\"cockpit=d\"));",
          "292:   if (cockpit_auth_check_cookie (test->auth, \"/cockpit\", headers))",
          "293:       g_assert_not_reached ();",
          "",
          "---------------"
        ]
      }
    }
  ]
}