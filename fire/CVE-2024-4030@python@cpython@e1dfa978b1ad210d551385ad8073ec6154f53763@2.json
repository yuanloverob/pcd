{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "767c955544fa79486e3e874ed9d74e8991b1060b",
      "candidate_info": {
        "commit_hash": "767c955544fa79486e3e874ed9d74e8991b1060b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/767c955544fa79486e3e874ed9d74e8991b1060b",
        "files": [
          "Lib/test/test_exceptions.py",
          "Lib/test/test_unittest/test_case.py"
        ],
        "message": "[3.13] gh-120544: Add `else: fail()` to tests where exception is expected (GH-120545) (#120546)\n\ngh-120544: Add `else: fail()` to tests where exception is expected (GH-120545)\n(cherry picked from commit 42ebdd83bb194f054fe5a10b3caa0c3a95be3679)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_exceptions.py||Lib/test/test_exceptions.py",
          "Lib/test/test_unittest/test_case.py||Lib/test/test_unittest/test_case.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_exceptions.py||Lib/test/test_exceptions.py": [
          "File: Lib/test/test_exceptions.py -> Lib/test/test_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         except self.failureException:",
          "1837:             with support.captured_stderr() as err:",
          "1838:                 sys.__excepthook__(*sys.exc_info())",
          "1840:         self.assertIn(\"aab\", err.getvalue())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:         else:",
          "1840:             self.fail(\"assertRaisesRegex should have failed.\")",
          "",
          "---------------"
        ],
        "Lib/test/test_unittest/test_case.py||Lib/test/test_unittest/test_case.py": [
          "File: Lib/test/test_unittest/test_case.py -> Lib/test/test_unittest/test_case.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1132:             # need to remove the first line of the error message",
          "1133:             error = str(e).split('\\n', 1)[1]",
          "1134:             self.assertEqual(sample_text_error, error)",
          "1136:     def testAssertEqualSingleLine(self):",
          "1137:         sample_text = \"laden swallows fly slowly\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1135:         else:",
          "1136:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1148:             # need to remove the first line of the error message",
          "1149:             error = str(e).split('\\n', 1)[1]",
          "1150:             self.assertEqual(sample_text_error, error)",
          "1152:     def testAssertEqualwithEmptyString(self):",
          "1153:         '''Verify when there is an empty string involved, the diff output",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1153:         else:",
          "1154:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1165:             # need to remove the first line of the error message",
          "1166:             error = str(e).split('\\n', 1)[1]",
          "1167:             self.assertEqual(sample_text_error, error)",
          "1169:     def testAssertEqualMultipleLinesMissingNewlineTerminator(self):",
          "1170:         '''Verifying format of diff output from assertEqual involving strings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1172:         else:",
          "1173:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1185:             # need to remove the first line of the error message",
          "1186:             error = str(e).split('\\n', 1)[1]",
          "1187:             self.assertEqual(sample_text_error, error)",
          "1189:     def testAssertEqualMultipleLinesMismatchedNewlinesTerminators(self):",
          "1190:         '''Verifying format of diff output from assertEqual involving strings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:         else:",
          "1195:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1208:             # need to remove the first line of the error message",
          "1209:             error = str(e).split('\\n', 1)[1]",
          "1210:             self.assertEqual(sample_text_error, error)",
          "1212:     def testEqualityBytesWarning(self):",
          "1213:         if sys.flags.bytes_warning:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1219:         else:",
          "1220:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a22eb2f2666c6f0a0ddef7b918222936c71c1ee5",
      "candidate_info": {
        "commit_hash": "a22eb2f2666c6f0a0ddef7b918222936c71c1ee5",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a22eb2f2666c6f0a0ddef7b918222936c71c1ee5",
        "files": [
          "Lib/turtledemo/__main__.py",
          "Misc/NEWS.d/next/Library/2024-06-17-20-04-13.gh-issue-120633.kZC5wt.rst"
        ],
        "message": "[3.13] gh-120633: Move scrollbar and remove tear-off menus in turtledemo (GH-120634) (#120725)\n\ngh-120633: Move scrollbar and remove tear-off menus in turtledemo (GH-120634)\n(cherry picked from commit 89f7208f672be635e923f04c19a7480eb8eb414c)\n\nCo-authored-by: Wulian233 <71213467+Wulian233@users.noreply.github.com>\nCo-authored-by: Terry Jan Reedy <tjreedy@udel.edu>",
        "before_after_code_files": [
          "Lib/turtledemo/__main__.py||Lib/turtledemo/__main__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/turtledemo/__main__.py||Lib/turtledemo/__main__.py": [
          "File: Lib/turtledemo/__main__.py -> Lib/turtledemo/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:         self.vbar = vbar = Scrollbar(text_frame, name='vbar')",
          "220:         vbar['command'] = text.yview",
          "222:         self.hbar = hbar = Scrollbar(text_frame, name='hbar', orient=HORIZONTAL)",
          "223:         hbar['command'] = text.xview",
          "224:         hbar.pack(side=BOTTOM, fill=X)",
          "",
          "[Removed Lines]",
          "221:         vbar.pack(side=LEFT, fill=Y)",
          "",
          "[Added Lines]",
          "221:         vbar.pack(side=RIGHT, fill=Y)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:         self.output_lbl.config(text=txt, fg=color)",
          "296:     def makeLoadDemoMenu(self, master):",
          "299:         for entry in getExampleEntries():",
          "300:             def load(entry=entry):",
          "",
          "[Removed Lines]",
          "297:         menu = Menu(master)",
          "",
          "[Added Lines]",
          "297:         menu = Menu(master, tearoff=1)  # TJR: leave this one.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:         return menu",
          "306:     def makeFontMenu(self, master):",
          "308:         menu.add_command(label=\"Decrease (C-'-')\", command=self.decrease_size,",
          "309:                          font=menufont)",
          "310:         menu.add_command(label=\"Increase (C-'+')\", command=self.increase_size,",
          "",
          "[Removed Lines]",
          "307:         menu = Menu(master)",
          "",
          "[Added Lines]",
          "307:         menu = Menu(master, tearoff=0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:         return menu",
          "321:     def makeHelpMenu(self, master):",
          "324:         for help_label, help_file in help_entries:",
          "325:             def show(help_label=help_label, help_file=help_file):",
          "",
          "[Removed Lines]",
          "322:         menu = Menu(master)",
          "",
          "[Added Lines]",
          "322:         menu = Menu(master, tearoff=0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a9534f595ccd9f2bdea5ceeecb837a82e44c620",
      "candidate_info": {
        "commit_hash": "7a9534f595ccd9f2bdea5ceeecb837a82e44c620",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7a9534f595ccd9f2bdea5ceeecb837a82e44c620",
        "files": [
          "Python/Python-tokenize.c"
        ],
        "message": "[3.13] gh-119704: Fix reference leak in the ``Python/Python-tokenize.c`` (GH-119705) (#119707)",
        "before_after_code_files": [
          "Python/Python-tokenize.c||Python/Python-tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/Python-tokenize.c||Python/Python-tokenize.c": [
          "File: Python/Python-tokenize.c -> Python/Python-tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: tokenizeriter_dealloc(tokenizeriterobject *it)",
          "312: {",
          "313:     PyTypeObject *tp = Py_TYPE(it);",
          "314:     _PyTokenizer_Free(it->tok);",
          "315:     tp->tp_free(it);",
          "316:     Py_DECREF(tp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:     Py_XDECREF(it->last_line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bca4e58af2e8cf6ce78151d3ae73bd254a4e64c",
      "candidate_info": {
        "commit_hash": "4bca4e58af2e8cf6ce78151d3ae73bd254a4e64c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/4bca4e58af2e8cf6ce78151d3ae73bd254a4e64c",
        "files": [
          "Lib/concurrent/futures/__init__.py",
          "Misc/NEWS.d/next/Library/2024-06-05-16-30-28.gh-issue-120121.9dz8i7.rst"
        ],
        "message": "[3.13] gh-120121: Add InvalidStateError to concurrent.futures.__all__ (GH-120123) (#120273)\n\ngh-120121: Add InvalidStateError to concurrent.futures.__all__ (GH-120123)\n(cherry picked from commit 5d59b870effa0f576acf7264cfcbfca2b36e34e3)\n\nCo-authored-by: AN Long <aisk@users.noreply.github.com>\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/concurrent/futures/__init__.py||Lib/concurrent/futures/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/concurrent/futures/__init__.py||Lib/concurrent/futures/__init__.py": [
          "File: Lib/concurrent/futures/__init__.py -> Lib/concurrent/futures/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     'ALL_COMPLETED',",
          "24:     'CancelledError',",
          "25:     'TimeoutError',",
          "26:     'BrokenExecutor',",
          "27:     'Future',",
          "28:     'Executor',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     'InvalidStateError',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3cfc04a736111cb61883cef08469ea46f86d9ce",
      "candidate_info": {
        "commit_hash": "c3cfc04a736111cb61883cef08469ea46f86d9ce",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c3cfc04a736111cb61883cef08469ea46f86d9ce",
        "files": [
          "Lib/test/test_launcher.py",
          "Misc/NEWS.d/next/Windows/2024-05-22-19-43-29.gh-issue-119070._enton.rst",
          "PC/launcher2.c"
        ],
        "message": "gh-119070: Fix py.exe handling of /usr/bin/env commands missing extension (GH-119426)\n\n(cherry picked from commit df93f5d4bf9d70036d485666d4dd4f009d37f8b9)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "Lib/test/test_launcher.py||Lib/test/test_launcher.py",
          "PC/launcher2.c||PC/launcher2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_launcher.py||Lib/test/test_launcher.py": [
          "File: Lib/test/test_launcher.py -> Lib/test/test_launcher.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:             with self.script(f'#! /usr/bin/env {exe.stem} arg1') as script:",
          "765:                 data = self.run_py([script], env=env)",
          "766:             self.assertEqual(data[\"stdout\"].strip(), f\"{quote(exe)} arg1 {quote(script)}\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:     def test_shebang_executable_extension(self):",
          "769:         with self.script('#! /usr/bin/env python3.12') as script:",
          "770:             data = self.run_py([script])",
          "771:         expect = \"# Search PATH for python3.12.exe\"",
          "772:         actual = [line.strip() for line in data[\"stderr\"].splitlines()",
          "773:                   if line.startswith(\"# Search PATH\")]",
          "774:         self.assertEqual([expect], actual)",
          "",
          "---------------"
        ],
        "PC/launcher2.c||PC/launcher2.c": [
          "File: PC/launcher2.c -> PC/launcher2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "853:     }",
          "855:     wchar_t filename[MAXLEN];",
          "857:         return RC_BAD_VIRTUAL_PATH;",
          "858:     }",
          "",
          "[Removed Lines]",
          "856:     if (wcsncpy_s(filename, MAXLEN, command, lastDot)) {",
          "",
          "[Added Lines]",
          "856:     if (wcsncpy_s(filename, MAXLEN, command, commandLength)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}