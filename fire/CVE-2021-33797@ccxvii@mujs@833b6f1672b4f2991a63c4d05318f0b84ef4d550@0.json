{
  "cve_id": "CVE-2021-33797",
  "cve_desc": "Buffer-overflow in jsdtoa.c in Artifex MuJS in versions 1.0.1 to 1.1.1. An integer overflow happens when js_strtod() reads in floating point exponent, which leads to a buffer overflow in the pointer *d.",
  "repo": "ccxvii/mujs",
  "patch_hash": "833b6f1672b4f2991a63c4d05318f0b84ef4d550",
  "patch_info": {
    "commit_hash": "833b6f1672b4f2991a63c4d05318f0b84ef4d550",
    "repo": "ccxvii/mujs",
    "commit_url": "https://github.com/ccxvii/mujs/commit/833b6f1672b4f2991a63c4d05318f0b84ef4d550",
    "files": [
      "jsdtoa.c"
    ],
    "message": "Issue #148: Check for overflow when reading floating point exponent.\n\nGCC with -O2 optimizes away the if(exp<-maxExponent) branch completely,\nso we don't end up with the expected '512' value for overflowing\nexponents. Limit the exponent parsing to MAX_INT instead to prevent\nsigned overflow from tripping up over-eager optimizing compilers.",
    "before_after_code_files": [
      "jsdtoa.c||jsdtoa.c"
    ]
  },
  "patch_diff": {
    "jsdtoa.c||jsdtoa.c": [
      "File: jsdtoa.c -> jsdtoa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "691:    }",
      "692:    expSign = FALSE;",
      "693:   }",
      "695:    exp = exp * 10 + (*p - '0');",
      "696:    p += 1;",
      "697:   }",
      "698:  }",
      "699:  if (expSign) {",
      "700:   exp = fracExp - exp;",
      "",
      "[Removed Lines]",
      "694:   while ((*p >= '0') && (*p <= '9')) {",
      "",
      "[Added Lines]",
      "694:   while ((*p >= '0') && (*p <= '9') && exp < INT_MAX/10) {",
      "698:   while ((*p >= '0') && (*p <= '9'))",
      "699:    p += 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e38bff1f68b17b98364764ec70cb0f06405759c5",
      "candidate_info": {
        "commit_hash": "e38bff1f68b17b98364764ec70cb0f06405759c5",
        "repo": "ccxvii/mujs",
        "commit_url": "https://github.com/ccxvii/mujs/commit/e38bff1f68b17b98364764ec70cb0f06405759c5",
        "files": [
          "jsdtoa.c"
        ],
        "message": "... and leave a bit of margin.",
        "before_after_code_files": [
          "jsdtoa.c||jsdtoa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "jsdtoa.c||jsdtoa.c"
          ],
          "candidate": [
            "jsdtoa.c||jsdtoa.c"
          ]
        }
      },
      "candidate_diff": {
        "jsdtoa.c||jsdtoa.c": [
          "File: jsdtoa.c -> jsdtoa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:    }",
          "692:    expSign = FALSE;",
          "693:   }",
          "695:    exp = exp * 10 + (*p - '0');",
          "696:    p += 1;",
          "697:   }",
          "",
          "[Removed Lines]",
          "694:   while ((*p >= '0') && (*p <= '9') && exp < INT_MAX/10) {",
          "",
          "[Added Lines]",
          "694:   while ((*p >= '0') && (*p <= '9') && exp < INT_MAX/100) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}