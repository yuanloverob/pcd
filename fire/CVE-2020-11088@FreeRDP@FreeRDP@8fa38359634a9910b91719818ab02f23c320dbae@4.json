{
  "cve_id": "CVE-2020-11088",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_NegotiateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
  "patch_info": {
    "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_NegotiateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   return SEC_E_INVALID_TOKEN;",
      "220:  }",
      "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:  if (Stream_GetRemainingLength(s) < 4)",
      "223:  {",
      "224:   Stream_Free(s, FALSE);",
      "225:   return SEC_E_INVALID_TOKEN;",
      "226:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "66d3b77d88326fc72bc000249b4ae351d2c07482",
      "candidate_info": {
        "commit_hash": "66d3b77d88326fc72bc000249b4ae351d2c07482",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/66d3b77d88326fc72bc000249b4ae351d2c07482",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "update_decompress_brush: explicit output length checks\n\nThe output length was just assumed to be >= 256 bytes, with this\ncommit it is explicitly checked.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2496:  return TRUE;",
          "2497: }",
          "2499: {",
          "2501:  UINT32 x, y, k;",
          "2502:  BYTE byte = 0;",
          "2509:   return FALSE;",
          "2511:  for (y = 7; y >= 0; y--)",
          "2512:  {",
          "2513:   for (x = 0; x < 8; x++)",
          "2514:   {",
          "2515:    if ((x % 4) == 0)",
          "2516:     Stream_Read_UINT8(s, byte);",
          "",
          "[Removed Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, BYTE bpp)",
          "2500:  UINT32 index;",
          "2503:  BYTE* palette;",
          "2504:  UINT32 bytesPerPixel;",
          "2505:  palette = Stream_Pointer(s) + 16;",
          "2506:  bytesPerPixel = ((bpp + 1) / 8);",
          "2508:  if (Stream_GetRemainingLength(s) < 16 + 7 * bytesPerPixel) // 64 / 4",
          "",
          "[Added Lines]",
          "2498: static BOOL update_decompress_brush(wStream* s, BYTE* output, size_t outSize, BYTE bpp)",
          "2502:  const BYTE* palette = Stream_Pointer(s) + 16;",
          "2503:  const UINT32 bytesPerPixel = ((bpp + 1) / 8);",
          "2505:  if (!Stream_SafeSeek(s, 16ULL + 7ULL * bytesPerPixel)) // 64 / 4",
          "2512:    UINT32 index;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2520:    for (k = 0; k < bytesPerPixel; k++)",
          "2521:    {",
          "2523:    }",
          "2524:   }",
          "2525:  }",
          "2530:  return TRUE;",
          "2531: }",
          "2532: static BOOL update_compress_brush(wStream* s, const BYTE* input, BYTE bpp)",
          "",
          "[Removed Lines]",
          "2522:     output[((y * 8 + x) * bytesPerPixel) + k] = palette[(index * bytesPerPixel) + k];",
          "2528:  Stream_Seek(s, 7 * bytesPerPixel);",
          "",
          "[Added Lines]",
          "2520:     const size_t dstIndex = ((y * 8 + x) * bytesPerPixel) + k;",
          "2521:     const size_t srcIndex = (index * bytesPerPixel) + k;",
          "2522:     if (dstIndex >= outSize)",
          "2523:      return FALSE;",
          "2524:     output[dstIndex] = palette[srcIndex];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2590:    if (compressed != FALSE)",
          "2591:    {",
          "2594:      goto fail;",
          "2595:    }",
          "2596:    else",
          "",
          "[Removed Lines]",
          "2593:     if (!update_decompress_brush(s, cache_brush->data, cache_brush->bpp))",
          "",
          "[Added Lines]",
          "2592:     if (!update_decompress_brush(s, cache_brush->data, sizeof(cache_brush->data),",
          "2593:                                  cache_brush->bpp))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52dd312e11b7376db62eabda244b481386d28c86",
      "candidate_info": {
        "commit_hash": "52dd312e11b7376db62eabda244b481386d28c86",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/52dd312e11b7376db62eabda244b481386d28c86",
        "files": [
          "channels/urbdrc/client/data_transfer.c"
        ],
        "message": "Fixed various input buffer length checks in URBDRC\n\nThanks to hac425 CVE-2020-11039",
        "before_after_code_files": [
          "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/data_transfer.c||channels/urbdrc/client/data_transfer.c": [
          "File: channels/urbdrc/client/data_transfer.c -> channels/urbdrc/client/data_transfer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:  Stream_Read_UINT32(s, IoControlCode);",
          "235:  Stream_Read_UINT32(s, InputBufferSize);",
          "238:   return ERROR_INVALID_DATA;",
          "241:  Stream_Read_UINT32(s, OutputBufferSize);",
          "242:  Stream_Read_UINT32(s, RequestId);",
          "243:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "",
          "[Removed Lines]",
          "237:  if (Stream_GetRemainingLength(s) < InputBufferSize + 8)",
          "240:  Stream_Seek(s, InputBufferSize);",
          "",
          "[Added Lines]",
          "237:  if (!Stream_SafeSeek(s, InputBufferSize))",
          "238:   return ERROR_INVALID_DATA;",
          "239:  if (Stream_GetRemainingLength(s) < 8ULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:  Stream_Read_UINT32(s, IoControlCode);",
          "316:  Stream_Read_UINT32(s, InputBufferSize);",
          "319:   return ERROR_INVALID_DATA;",
          "322:  Stream_Read_UINT32(s, OutputBufferSize);",
          "323:  Stream_Read_UINT32(s, RequestId);",
          "324:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "",
          "[Removed Lines]",
          "318:  if (Stream_GetRemainingLength(s) < InputBufferSize + 8)",
          "321:  Stream_Seek(s, InputBufferSize);",
          "",
          "[Added Lines]",
          "319:  if (!Stream_SafeSeek(s, InputBufferSize))",
          "320:   return ERROR_INVALID_DATA;",
          "321:  if (Stream_GetRemainingLength(s) < 8ULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:                                      int transferDir)",
          "399: {",
          "400:  MSUSB_CONFIG_DESCRIPTOR* MsConfig = NULL;",
          "402:  BYTE ConfigurationDescriptorIsValid;",
          "403:  wStream* out;",
          "404:  int MsOutSize = 0;",
          "",
          "[Removed Lines]",
          "401:  UINT32 out_size, InterfaceId, NumInterfaces, usbd_status = 0;",
          "",
          "[Added Lines]",
          "402:  size_t out_size;",
          "403:  UINT32 InterfaceId, NumInterfaces, usbd_status = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:  if (MsConfig)",
          "453:   MsOutSize = MsConfig->MsOutSize;",
          "455:  if (MsOutSize > 0)",
          "456:   out_size = 36 + MsOutSize;",
          "457:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:  if (MsOutSize > SIZE_MAX - 36)",
          "458:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "807:                                            wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "808:                                            IUDEVMAN* udevman, BYTE func_recipient, int transferDir)",
          "809: {",
          "811:  BYTE bmRequestType, desc_index, desc_type;",
          "812:  UINT16 langId;",
          "813:  wStream* out;",
          "",
          "[Removed Lines]",
          "810:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "815:  size_t out_size;",
          "816:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "831:  Stream_Read_UINT8(s, desc_type);",
          "832:  Stream_Read_UINT16(s, langId);",
          "833:  Stream_Read_UINT32(s, OutputBufferSize);",
          "835:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "836:  {",
          "837:   if (Stream_GetRemainingLength(s) < OutputBufferSize)",
          "838:    return ERROR_INVALID_DATA;",
          "839:  }",
          "842:  out = Stream_New(NULL, out_size);",
          "844:  if (!out)",
          "",
          "[Removed Lines]",
          "841:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "840:  if (OutputBufferSize > UINT32_MAX - 36)",
          "841:   return ERROR_INVALID_DATA;",
          "848:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "885:                                            wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "886:                                            IUDEVMAN* udevman, BYTE func_recipient, int transferDir)",
          "887: {",
          "889:  UINT16 Index;",
          "890:  BYTE bmRequestType;",
          "891:  wStream* out;",
          "",
          "[Removed Lines]",
          "888:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "895:  size_t out_size;",
          "896:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "916:  Stream_Seek(s, 2);",
          "917:  Stream_Read_UINT32(s, OutputBufferSize);",
          "919:  out = Stream_New(NULL, out_size);",
          "921:  if (!out)",
          "",
          "[Removed Lines]",
          "918:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "926:  if (OutputBufferSize > UINT32_MAX - 36)",
          "927:   return ERROR_INVALID_DATA;",
          "928:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "972:  Stream_Read_UINT32(s, OutputBufferSize);",
          "974:  if (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
          "975:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:  if (OutputBufferSize > UINT32_MAX - 36)",
          "984:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "977:    return ERROR_INVALID_DATA;",
          "978:  }",
          "981:  out = Stream_New(NULL, out_size);",
          "983:  if (!out)",
          "",
          "[Removed Lines]",
          "980:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "992:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1022:                                               wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1023:                                               IUDEVMAN* udevman, int transferDir)",
          "1024: {",
          "1026:  BYTE Recipient, InterfaceNumber, Ms_PageIndex;",
          "1027:  UINT16 Ms_featureDescIndex;",
          "1028:  wStream* out;",
          "",
          "[Removed Lines]",
          "1025:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1037:  size_t out_size;",
          "1038:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1052:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1054:  switch (transferDir)",
          "1055:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1067:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1064:  }",
          "1066:  InterfaceId = ((STREAM_ID_PROXY << 30) | pdev->get_ReqCompletion(pdev));",
          "1068:  out = Stream_New(NULL, out_size);",
          "1070:  if (!out)",
          "",
          "[Removed Lines]",
          "1067:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1082:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1245:                                                   wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1246:                                                   IUDEVMAN* udevman, int transferDir)",
          "1247: {",
          "1249:  wStream* out;",
          "1250:  URBDRC_PLUGIN* urbdrc;",
          "1251:  const BOOL noAck = (RequestField & 0x80000000U) != 0;",
          "",
          "[Removed Lines]",
          "1248:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1263:  size_t out_size;",
          "1264:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1271:   return ERROR_INVALID_DATA;",
          "1273:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1275:  out = Stream_New(NULL, out_size);",
          "1277:  if (!out)",
          "",
          "[Removed Lines]",
          "1274:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1290:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1291:   return ERROR_INVALID_DATA;",
          "1292:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1298:                                               wStream* s, UINT32 RequestField, UINT32 MessageId,",
          "1299:                                               IUDEVMAN* udevman, int transferDir)",
          "1300: {",
          "1302:  UINT16 interface;",
          "1303:  wStream* out;",
          "1304:  URBDRC_PLUGIN* urbdrc;",
          "",
          "[Removed Lines]",
          "1301:  UINT32 out_size, InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "[Added Lines]",
          "1319:  size_t out_size;",
          "1320:  UINT32 InterfaceId, OutputBufferSize, usbd_status;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1327:  Stream_Read_UINT16(s, interface);",
          "1328:  Stream_Seek(s, 2);",
          "1329:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1331:  out = Stream_New(NULL, out_size);",
          "1333:  if (!out)",
          "",
          "[Removed Lines]",
          "1330:  out_size = 36 + OutputBufferSize;",
          "",
          "[Added Lines]",
          "1349:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1350:   return ERROR_INVALID_DATA;",
          "1351:  out_size = 36ULL + OutputBufferSize;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1376:  Stream_Read_UINT16(s, FeatureSelector);",
          "1377:  Stream_Read_UINT16(s, Index);",
          "1378:  Stream_Read_UINT32(s, OutputBufferSize);",
          "1380:  switch (transferDir)",
          "1381:  {",
          "1382:   case USBD_TRANSFER_DIRECTION_OUT:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:  if (OutputBufferSize > UINT32_MAX - 36)",
          "1401:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1389:    break;",
          "1390:  }",
          "1394:  if (!out)",
          "1395:   return ERROR_OUTOFMEMORY;",
          "",
          "[Removed Lines]",
          "1392:  out = Stream_New(NULL, 36 + OutputBufferSize);",
          "",
          "[Added Lines]",
          "1414:  out = Stream_New(NULL, 36ULL + OutputBufferSize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af79aafbba3c0380fccbaf0ff03223966811f173",
      "candidate_info": {
        "commit_hash": "af79aafbba3c0380fccbaf0ff03223966811f173",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/af79aafbba3c0380fccbaf0ff03223966811f173",
        "files": [
          "channels/smartcard/client/smartcard_pack.c"
        ],
        "message": "Fixed int overflow in smartcard_ndr_read\n\nThanks to hac425",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_pack.c||channels/smartcard/client/smartcard_pack.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_pack.c||channels/smartcard/client/smartcard_pack.c": [
          "File: channels/smartcard/client/smartcard_pack.c -> channels/smartcard/client/smartcard_pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: static LONG smartcard_ndr_read(wStream* s, BYTE** data, size_t min, size_t elementSize,",
          "102:                                ndr_ptr_t type)",
          "103: {",
          "105:  void* r;",
          "106:  size_t required;",
          "",
          "[Removed Lines]",
          "104:  UINT32 len, offset, len2;",
          "",
          "[Added Lines]",
          "104:  size_t len, offset, len2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:            min, len);",
          "164:   return STATUS_DATA_ERROR;",
          "165:  }",
          "169:  {",
          "170:   WLog_ERR(TAG,",
          "171:            \"Short data while trying to read data from NDR pointer, expected %\" PRIu32",
          "",
          "[Removed Lines]",
          "166:  len *= elementSize;",
          "168:  if (Stream_GetRemainingLength(s) < len)",
          "",
          "[Added Lines]",
          "167:  if (len > SIZE_MAX / 2)",
          "168:   return STATUS_BUFFER_TOO_SMALL;",
          "170:  if (Stream_GetRemainingLength(s) / elementSize < len)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:            len, Stream_GetRemainingLength(s));",
          "174:   return STATUS_BUFFER_TOO_SMALL;",
          "175:  }",
          "177:  r = calloc(len + 1, sizeof(CHAR));",
          "178:  if (!r)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:  len *= elementSize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
      "candidate_info": {
        "commit_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed oob read in ntlm_read_AuthenticateMessage",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [
            "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
          ],
          "candidate": [
            "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
          ]
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682: SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
          "683: {",
          "684:  wStream* s;",
          "685:  size_t length;",
          "688:  UINT32 PayloadBufferOffset;",
          "689:  NTLM_AUTHENTICATE_MESSAGE* message;",
          "690:  SSPI_CREDENTIALS* credentials = context->credentials;",
          "693:  message = &context->AUTHENTICATE_MESSAGE;",
          "694:  ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));",
          "695:  s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "686:  UINT32 flags;",
          "687:  NTLM_AV_PAIR* AvFlags;",
          "691:  flags = 0;",
          "692:  AvFlags = NULL;",
          "",
          "[Added Lines]",
          "684:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
          "687:  UINT32 flags = 0;",
          "688:  NTLM_AV_PAIR* AvFlags = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:   return SEC_E_INTERNAL_ERROR;",
          "700:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
          "706:  if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)",
          "712:  if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <",
          "719:  if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <",
          "744:  if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <",
          "752:  context->NegotiateKeyExchange =",
          "753:      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;",
          "755:  if ((context->NegotiateKeyExchange && !message->EncryptedRandomSessionKey.Len) ||",
          "756:      (!context->NegotiateKeyExchange && message->EncryptedRandomSessionKey.Len))",
          "762:  if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
          "763:  {",
          "769:  }",
          "771:  PayloadBufferOffset = Stream_GetPosition(s);",
          "791:  if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <",
          "798:  if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <",
          "805:  if (message->NtChallengeResponse.Len > 0)",
          "806:  {",
          "807:   size_t cbAvFlags;",
          "808:   wStream* snt =",
          "809:       Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);",
          "811:   if (!snt)",
          "824:   Stream_Free(snt, FALSE);",
          "825:   context->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;",
          "826:   context->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;",
          "827:   sspi_SecBufferFree(&(context->ChallengeTargetInfo));",
          "",
          "[Removed Lines]",
          "701:  {",
          "702:   Stream_Free(s, FALSE);",
          "703:   return SEC_E_INVALID_TOKEN;",
          "704:  }",
          "707:  {",
          "708:   Stream_Free(s, FALSE);",
          "709:   return SEC_E_INVALID_TOKEN;",
          "710:  }",
          "714:  {",
          "715:   Stream_Free(s, FALSE);",
          "716:   return SEC_E_INVALID_TOKEN;",
          "717:  }",
          "721:  {",
          "722:   Stream_Free(s, FALSE);",
          "723:   return SEC_E_INVALID_TOKEN;",
          "724:  }",
          "727:  {",
          "728:   Stream_Free(s, FALSE);",
          "729:   return SEC_E_INVALID_TOKEN;",
          "730:  }",
          "733:  {",
          "734:   Stream_Free(s, FALSE);",
          "735:   return SEC_E_INVALID_TOKEN;",
          "736:  }",
          "739:  {",
          "740:   Stream_Free(s, FALSE);",
          "741:   return SEC_E_INVALID_TOKEN;",
          "742:  }",
          "746:  {",
          "747:   Stream_Free(s, FALSE);",
          "748:   return SEC_E_INVALID_TOKEN;",
          "749:  }",
          "757:  {",
          "758:   Stream_Free(s, FALSE);",
          "759:   return SEC_E_INVALID_TOKEN;",
          "760:  }",
          "765:   {",
          "766:    Stream_Free(s, FALSE);",
          "767:    return SEC_E_INVALID_TOKEN;",
          "768:   }",
          "774:  {",
          "775:   Stream_Free(s, FALSE);",
          "776:   return SEC_E_INTERNAL_ERROR;",
          "777:  }",
          "780:  {",
          "781:   Stream_Free(s, FALSE);",
          "782:   return SEC_E_INTERNAL_ERROR;",
          "783:  }",
          "786:  {",
          "787:   Stream_Free(s, FALSE);",
          "788:   return SEC_E_INTERNAL_ERROR;",
          "789:  }",
          "793:  {",
          "794:   Stream_Free(s, FALSE);",
          "795:   return SEC_E_INTERNAL_ERROR;",
          "796:  }",
          "800:  {",
          "801:   Stream_Free(s, FALSE);",
          "802:   return SEC_E_INTERNAL_ERROR;",
          "803:  }",
          "812:   {",
          "813:    Stream_Free(s, FALSE);",
          "814:    return SEC_E_INTERNAL_ERROR;",
          "815:   }",
          "817:   if (ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)) < 0)",
          "818:   {",
          "819:    Stream_Free(s, FALSE);",
          "820:    Stream_Free(snt, FALSE);",
          "821:    return SEC_E_INVALID_TOKEN;",
          "822:   }",
          "",
          "[Added Lines]",
          "701:   goto fail;",
          "704:   goto fail;",
          "708:   goto fail;",
          "712:   goto fail;",
          "715:   goto fail;",
          "718:   goto fail;",
          "721:   goto fail;",
          "725:   goto fail;",
          "727:  if (Stream_GetRemainingLength(s) < 4)",
          "728:   goto fail;",
          "735:   goto fail;",
          "740:    goto fail;",
          "745:  status = SEC_E_INTERNAL_ERROR;",
          "747:   goto fail;",
          "750:   goto fail;",
          "753:   goto fail;",
          "757:   goto fail;",
          "761:   goto fail;",
          "765:   int rc;",
          "771:    goto fail;",
          "773:   status = SEC_E_INVALID_TOKEN;",
          "774:   rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));",
          "776:   if (rc < 0)",
          "777:    goto fail;",
          "778:   status = SEC_E_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:  if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <",
          "846:  if (message->EncryptedRandomSessionKey.Len > 0)",
          "847:  {",
          "848:   if (message->EncryptedRandomSessionKey.Len != 16)",
          "854:   CopyMemory(context->EncryptedRandomSessionKey, message->EncryptedRandomSessionKey.Buffer,",
          "855:              16);",
          "",
          "[Removed Lines]",
          "841:  {",
          "842:   Stream_Free(s, FALSE);",
          "843:   return SEC_E_INTERNAL_ERROR;",
          "844:  }",
          "849:   {",
          "850:    Stream_Free(s, FALSE);",
          "851:    return SEC_E_INVALID_TOKEN;",
          "852:   }",
          "",
          "[Added Lines]",
          "796:   goto fail;",
          "801:    goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "858:  length = Stream_GetPosition(s);",
          "860:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
          "866:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
          "867:  buffer->cbBuffer = length;",
          "",
          "[Removed Lines]",
          "861:  {",
          "862:   Stream_Free(s, FALSE);",
          "863:   return SEC_E_INTERNAL_ERROR;",
          "864:  }",
          "",
          "[Added Lines]",
          "810:   goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "871:  {",
          "872:   context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);",
          "874:   if (Stream_GetRemainingLength(s) < 16)",
          "880:   Stream_Read(s, message->MessageIntegrityCheck, 16);",
          "881:  }",
          "883: #ifdef WITH_DEBUG_NTLM",
          "884:  WLog_DBG(TAG, \"AUTHENTICATE_MESSAGE (length = %\" PRIu32 \")\",",
          "885:           context->AuthenticateMessage.cbBuffer);",
          "",
          "[Removed Lines]",
          "875:   {",
          "876:    Stream_Free(s, FALSE);",
          "877:    return SEC_E_INVALID_TOKEN;",
          "878:   }",
          "",
          "[Added Lines]",
          "820:   status = SEC_E_INVALID_TOKEN;",
          "822:    goto fail;",
          "827:  status = SEC_E_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911:   credentials->identity.User = (UINT16*)malloc(message->UserName.Len);",
          "913:   if (!credentials->identity.User)",
          "919:   CopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);",
          "920:   credentials->identity.UserLength = message->UserName.Len / 2;",
          "",
          "[Removed Lines]",
          "914:   {",
          "915:    Stream_Free(s, FALSE);",
          "916:    return SEC_E_INTERNAL_ERROR;",
          "917:   }",
          "",
          "[Added Lines]",
          "860:    goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "925:   credentials->identity.Domain = (UINT16*)malloc(message->DomainName.Len);",
          "927:   if (!credentials->identity.Domain)",
          "933:   CopyMemory(credentials->identity.Domain, message->DomainName.Buffer,",
          "934:              message->DomainName.Len);",
          "",
          "[Removed Lines]",
          "928:   {",
          "929:    Stream_Free(s, FALSE);",
          "930:    return SEC_E_INTERNAL_ERROR;",
          "931:   }",
          "",
          "[Added Lines]",
          "871:    goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "940:  context->state = NTLM_STATE_COMPLETION;",
          "941:  return SEC_I_COMPLETE_NEEDED;",
          "942: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883: fail:",
          "884:  Stream_Free(s, FALSE);",
          "885:  return status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
      "candidate_info": {
        "commit_hash": "afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/afdffac4b5a9faef40e74f4ee4fc2e5b03a830af",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ],
        "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
          "125: {",
          "126:  size_t size;",
          "127:  Stream_Read_UINT8(s, challenge->RespType);",
          "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
          "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  if (Stream_GetRemainingLength(s) < 28)",
          "128:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
          "165: {",
          "166:  Stream_Read(s, response->Response, 16);",
          "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  if (Stream_GetRemainingLength(s) < 16)",
          "170:   return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}