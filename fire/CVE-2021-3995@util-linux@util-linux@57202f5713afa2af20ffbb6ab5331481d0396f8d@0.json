{
  "cve_id": "CVE-2021-3995",
  "cve_desc": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows an unprivileged local attacker to unmount FUSE filesystems that belong to certain other users who have a UID that is a prefix of the UID of the attacker in its string form. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
  "repo": "util-linux/util-linux",
  "patch_hash": "57202f5713afa2af20ffbb6ab5331481d0396f8d",
  "patch_info": {
    "commit_hash": "57202f5713afa2af20ffbb6ab5331481d0396f8d",
    "repo": "util-linux/util-linux",
    "commit_url": "https://github.com/util-linux/util-linux/commit/57202f5713afa2af20ffbb6ab5331481d0396f8d",
    "files": [
      "libmount/src/context_umount.c",
      "libmount/src/mountP.h",
      "libmount/src/optstr.c"
    ],
    "message": "libmount: fix UID check for FUSE umount [CVE-2021-3995]\n\nImproper UID check allows an unprivileged user to unmount FUSE\nfilesystems of users with similar UID.\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
    "before_after_code_files": [
      "libmount/src/context_umount.c||libmount/src/context_umount.c",
      "libmount/src/mountP.h||libmount/src/mountP.h",
      "libmount/src/optstr.c||libmount/src/optstr.c"
    ]
  },
  "patch_diff": {
    "libmount/src/context_umount.c||libmount/src/context_umount.c": [
      "File: libmount/src/context_umount.c -> libmount/src/context_umount.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "452:  struct libmnt_ns *ns_old;",
      "453:  const char *type = mnt_fs_get_fstype(cxt->fs);",
      "454:  const char *optstr;",
      "",
      "[Removed Lines]",
      "455:  char *user_id = NULL;",
      "456:  size_t sz;",
      "457:  uid_t uid;",
      "458:  char uidstr[sizeof(stringify_value(ULONG_MAX))];",
      "",
      "[Added Lines]",
      "455:  uid_t uid, entry_uid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472:  optstr = mnt_fs_get_fs_options(cxt->fs);",
      "473:  if (!optstr)",
      "474:   return 0;",
      "480:   return 0;",
      "",
      "[Removed Lines]",
      "476:  if (mnt_optstr_get_option(optstr, \"user_id\", &user_id, &sz) != 0)",
      "477:   return 0;",
      "479:  if (sz == 0 || user_id == NULL)",
      "",
      "[Added Lines]",
      "472:  if (mnt_optstr_get_uid(optstr, \"user_id\", &entry_uid) != 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "493:   return 0;",
      "494:  }",
      "498: }",
      "",
      "[Removed Lines]",
      "496:  snprintf(uidstr, sizeof(uidstr), \"%lu\", (unsigned long) uid);",
      "497:  return strncmp(user_id, uidstr, sz) == 0;",
      "",
      "[Added Lines]",
      "489:  return uid == entry_uid;",
      "",
      "---------------"
    ],
    "libmount/src/mountP.h||libmount/src/mountP.h": [
      "File: libmount/src/mountP.h -> libmount/src/mountP.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "399:         const struct libmnt_optmap **mapent);",
      "402: extern int mnt_optstr_remove_option_at(char **optstr, char *begin, char *end);",
      "403: extern int mnt_optstr_fix_gid(char **optstr, char *value, size_t valsz, char **next);",
      "404: extern int mnt_optstr_fix_uid(char **optstr, char *value, size_t valsz, char **next);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "402: extern int mnt_optstr_get_uid(const char *optstr, const char *name, uid_t *uid);",
      "",
      "---------------"
    ],
    "libmount/src/optstr.c||libmount/src/optstr.c": [
      "File: libmount/src/optstr.c -> libmount/src/optstr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1083:  return rc;",
      "1084: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1091: int mnt_optstr_get_uid(const char *optstr, const char *name, uid_t *uid)",
      "1092: {",
      "1093:  char *value = NULL;",
      "1094:  size_t valsz = 0;",
      "1095:  char buf[sizeof(stringify_value(UINT64_MAX))];",
      "1096:  int rc;",
      "1097:  uint64_t num;",
      "1099:  assert(optstr);",
      "1100:  assert(name);",
      "1101:  assert(uid);",
      "1103:  rc = mnt_optstr_get_option(optstr, name, &value, &valsz);",
      "1104:  if (rc != 0)",
      "1105:   goto fail;",
      "1107:  if (valsz > sizeof(buf) - 1) {",
      "1108:   rc = -ERANGE;",
      "1109:   goto fail;",
      "1110:  }",
      "1111:  mem2strcpy(buf, value, valsz, sizeof(buf));",
      "1113:  rc = ul_strtou64(buf, &num, 10);",
      "1114:  if (rc != 0)",
      "1115:   goto fail;",
      "1116:  if (num > ULONG_MAX || (uid_t) num != num) {",
      "1117:   rc = -ERANGE;",
      "1118:   goto fail;",
      "1119:  }",
      "1122:  return 0;",
      "1123: fail:",
      "1124:  DBG(UTILS, ul_debug(\"failed to convert '%s'= to number [rc=%d]\", name, rc));",
      "1125:  return rc;",
      "1126: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24d5759fc10f52ae868a29ead4d4dd04c47ccf96",
      "candidate_info": {
        "commit_hash": "24d5759fc10f52ae868a29ead4d4dd04c47ccf96",
        "repo": "util-linux/util-linux",
        "commit_url": "https://github.com/util-linux/util-linux/commit/24d5759fc10f52ae868a29ead4d4dd04c47ccf96",
        "files": [
          "libmount/src/context_umount.c"
        ],
        "message": "libmount: (umount) use optlist to keep options\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "libmount/src/context_umount.c||libmount/src/context_umount.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libmount/src/context_umount.c||libmount/src/context_umount.c"
          ],
          "candidate": [
            "libmount/src/context_umount.c||libmount/src/context_umount.c"
          ]
        }
      },
      "candidate_diff": {
        "libmount/src/context_umount.c||libmount/src/context_umount.c": [
          "File: libmount/src/context_umount.c -> libmount/src/context_umount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:  rc = lookup_umount_fs_by_statfs(cxt, tgt);",
          "372:  if (rc <= 0)",
          "376:  rc = lookup_umount_fs_by_mountinfo(cxt, tgt);",
          "377:  if (rc <= 0)",
          "380:  DBG(CXT, ul_debugobj(cxt, \" cannot find '%s'\", tgt));",
          "382: }",
          "",
          "[Removed Lines]",
          "373:   return rc;",
          "378:   return rc;",
          "",
          "[Added Lines]",
          "373:   goto done;",
          "378:   goto done;",
          "383: done:",
          "384:  if (rc == 0 && cxt->fs) {",
          "385:   struct libmnt_optlist *ol = mnt_context_get_optlist(cxt);",
          "387:   if (!ol)",
          "388:    return -ENOMEM;",
          "390:   rc = mnt_optlist_set_optstr(ol, mnt_fs_get_options(cxt->fs), NULL);",
          "391:  }",
          "392:  DBG(CXT, ul_debugobj(cxt, \"  lookup done [rc=%d]\", rc));",
          "393:  return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:  return loopdev_is_used(devname, src, offset, 0, flags);",
          "415: }",
          "418:            const char *name)",
          "419: {",
          "425:  if (mnt_context_is_nohelpers(cxt))",
          "426:   return 0;",
          "433:   return 0;",
          "439:  DBG(CXT, ul_debugobj(cxt, \"umount: umount.%s %s requested\", suffix, name));",
          "445: }",
          "447: static int is_fuse_usermount(struct libmnt_context *cxt, int *errsv)",
          "448: {",
          "449:  struct libmnt_ns *ns_old;",
          "450:  const char *type = mnt_fs_get_fstype(cxt->fs);",
          "452:  uid_t uid, entry_uid;",
          "",
          "[Removed Lines]",
          "417: static int prepare_helper_from_options(struct libmnt_context *cxt,",
          "420:  char *suffix = NULL;",
          "421:  const char *opts;",
          "422:  size_t valsz;",
          "423:  int rc;",
          "428:  opts = mnt_fs_get_user_options(cxt->fs);",
          "429:  if (!opts)",
          "430:   return 0;",
          "432:  if (mnt_optstr_get_option(opts, name, &suffix, &valsz))",
          "435:  suffix = strndup(suffix, valsz);",
          "436:  if (!suffix)",
          "437:   return -ENOMEM;",
          "441:  rc = mnt_context_prepare_helper(cxt, \"umount\", suffix);",
          "442:  free(suffix);",
          "444:  return rc;",
          "451:  const char *optstr;",
          "",
          "[Added Lines]",
          "429: static int prepare_helper_from_option(struct libmnt_context *cxt,",
          "432:  struct libmnt_optlist *ol;",
          "433:  struct libmnt_opt *opt;",
          "434:  const char *suffix;",
          "438:  ol = mnt_context_get_optlist(cxt);",
          "439:  if (!ol)",
          "440:   return -ENOMEM;",
          "442:  opt = mnt_optlist_get_named(ol, name, cxt->map_userspace);",
          "443:  if (!opt || !mnt_opt_has_value(opt))",
          "446:  suffix = mnt_opt_get_value(opt);",
          "449:  return mnt_context_prepare_helper(cxt, \"umount\", suffix);",
          "455:  struct libmnt_optlist *ol;",
          "456:  struct libmnt_opt *opt;",
          "458:  const char *val = NULL;;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:      strncmp(type, \"fuseblk.\", 8) != 0)",
          "463:   return 0;",
          "468:   return 0;",
          "470:   return 0;",
          "",
          "[Removed Lines]",
          "466:  optstr = mnt_fs_get_fs_options(cxt->fs);",
          "467:  if (!optstr)",
          "469:  if (mnt_optstr_get_uid(optstr, \"user_id\", &entry_uid) != 0)",
          "",
          "[Added Lines]",
          "472:  ol = mnt_context_get_optlist(cxt);",
          "473:  if (!ol)",
          "476:  opt = mnt_optlist_get_named(ol, \"user_id\", NULL);",
          "477:  if (opt)",
          "478:   val = mnt_opt_get_value(opt);",
          "479:  if (!val || mnt_opt_get_map(opt))",
          "480:   return 0;",
          "482:  if (mnt_parse_uid(val, strlen(val), &entry_uid) != 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "516:  if (cxt->user_mountflags & MNT_MS_UHELPER) {",
          "519:   if (rc)",
          "520:    return rc;",
          "521:   if (cxt->helper)",
          "",
          "[Removed Lines]",
          "518:   rc = prepare_helper_from_options(cxt, \"uhelper\");",
          "",
          "[Added Lines]",
          "531:   rc = prepare_helper_from_option(cxt, \"uhelper\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "949:   rc = evaluate_permissions(cxt);",
          "951:  if (!rc && !cxt->helper) {",
          "953:   if (cxt->user_mountflags & MNT_MS_HELPER)",
          "957:   if (!rc && !cxt->helper)",
          "",
          "[Removed Lines]",
          "955:    rc = prepare_helper_from_options(cxt, \"helper\");",
          "",
          "[Added Lines]",
          "967:    rc = prepare_helper_from_option(cxt, \"helper\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "722c96974dd4009a334e4aee556eedaab5fb94b4",
      "candidate_info": {
        "commit_hash": "722c96974dd4009a334e4aee556eedaab5fb94b4",
        "repo": "util-linux/util-linux",
        "commit_url": "https://github.com/util-linux/util-linux/commit/722c96974dd4009a334e4aee556eedaab5fb94b4",
        "files": [
          "libmount/src/context.c",
          "libmount/src/context_mount.c",
          "libmount/src/libmount.h.in",
          "libmount/src/mountP.h",
          "libmount/src/optstr.c",
          "libmount/src/utils.c",
          "sys-utils/mount.8.adoc",
          "tests/expected/mount/set_ugid_mode",
          "tests/ts/mount/set_ugid_mode"
        ],
        "message": "libmount: accept X-mount.{owner,group,mode}=\n\nWhich take a user, group, and mode, respectively, and set them on the\ntarget after mounting\n\nThis is vaguely similar to tmpfs(5)'s [ug]id= and mode= options,\nbut we POSIX-parse the user- and group names\n\nOft requested in systemd/zram-generator, since a common use-case\nis to use it to create /tmp or an equivalent directory that needs\nto be a=rwx,o+t (or a user's private temp that needs to be owned\nby them) \u2012 this is impossible without terrible hacks, cf.\nhttps://github.com/systemd/zram-generator/issues/150,\nhttps://github.com/systemd/zram-generator/issues/146, &c.\n\nThis started off as a Set{User,Group,Mode}= systemd mount unit,\nbut was poetterung into libmount options:\nhttps://github.com/systemd/systemd/pull/22889\n\nSigned-off-by: Ahelenia Ziemia\u0144ska <nabijaczleweli@nabijaczleweli.xyz>\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "libmount/src/context.c||libmount/src/context.c",
          "libmount/src/context_mount.c||libmount/src/context_mount.c",
          "libmount/src/libmount.h.in||libmount/src/libmount.h.in",
          "libmount/src/mountP.h||libmount/src/mountP.h",
          "libmount/src/optstr.c||libmount/src/optstr.c",
          "libmount/src/utils.c||libmount/src/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libmount/src/mountP.h||libmount/src/mountP.h",
            "libmount/src/optstr.c||libmount/src/optstr.c"
          ],
          "candidate": [
            "libmount/src/mountP.h||libmount/src/mountP.h",
            "libmount/src/optstr.c||libmount/src/optstr.c"
          ]
        }
      },
      "candidate_diff": {
        "libmount/src/context.c||libmount/src/context.c": [
          "File: libmount/src/context.c -> libmount/src/context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  if (!cxt)",
          "58:   return NULL;",
          "60:  INIT_LIST_HEAD(&cxt->addmounts);",
          "62:  ruid = getuid();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:  cxt->tgt_owner = (uid_t) -1;",
          "61:  cxt->tgt_group = (gid_t) -1;",
          "62:  cxt->tgt_mode = (mode_t) -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  free(cxt->orig_user);",
          "156:  free(cxt->subdir);",
          "158:  cxt->fs = NULL;",
          "159:  cxt->mtab = NULL;",
          "160:  cxt->utab = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:  cxt->tgt_owner = (uid_t) -1;",
          "161:  cxt->tgt_group = (gid_t) -1;",
          "162:  cxt->tgt_mode = (mode_t) -1;",
          "",
          "---------------"
        ],
        "libmount/src/context_mount.c||libmount/src/context_mount.c": [
          "File: libmount/src/context_mount.c -> libmount/src/context_mount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:   cxt->syscall_status = 0;",
          "839:   DBG(CXT, ul_debugobj(cxt, \"FAKE mount(2) \"",
          "841:     \" mountflags=0x%08lx, mountdata=%s]\",",
          "842:     src, target, type,",
          "843:     flags, cxt->mountdata ? \"yes\" : \"<none>\"));",
          "",
          "[Removed Lines]",
          "840:     \"[source=%s, target=%s, type=%s, \"",
          "",
          "[Added Lines]",
          "840:     \"[source=%s, target=%s, type=%s,\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "862:   }",
          "864:   DBG(CXT, ul_debugobj(cxt, \"mount(2) \"",
          "866:    \" mountflags=0x%08lx, mountdata=%s]\",",
          "867:    src, target, type,",
          "868:    flags, cxt->mountdata ? \"yes\" : \"<none>\"));",
          "",
          "[Removed Lines]",
          "865:    \"[source=%s, target=%s, type=%s, \"",
          "",
          "[Added Lines]",
          "865:    \"[source=%s, target=%s, type=%s,\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1020:  return rc;",
          "1021: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1026: static int parse_ownership_mode(struct libmnt_context *cxt)",
          "1027: {",
          "1028:  int rc;",
          "1029:  char *value;",
          "1030:  size_t valsz;",
          "1032:  const char *o = mnt_fs_get_user_options(cxt->fs);",
          "1033:  if (!o)",
          "1034:   return 0;",
          "1036:  if ((rc = mnt_optstr_get_option(o, \"X-mount.owner\", &value, &valsz)) < 0)",
          "1037:   return -MNT_ERR_MOUNTOPT;",
          "1038:  if (!rc) {",
          "1039:   if (!valsz)",
          "1040:    return errno = EINVAL, -MNT_ERR_MOUNTOPT;",
          "1042:   if (mnt_parse_uid(value, valsz, &cxt->tgt_owner))",
          "1043:    return -MNT_ERR_MOUNTOPT;",
          "1044:  }",
          "1046:  if ((rc = mnt_optstr_get_option(o, \"X-mount.group\", &value, &valsz)) < 0)",
          "1047:   return -MNT_ERR_MOUNTOPT;",
          "1048:  if (!rc) {",
          "1049:   if (!valsz)",
          "1050:    return errno = EINVAL, -MNT_ERR_MOUNTOPT;",
          "1052:   if (mnt_parse_gid(value, valsz, &cxt->tgt_group))",
          "1053:    return -MNT_ERR_MOUNTOPT;",
          "1054:  }",
          "1056:  if ((rc = mnt_optstr_get_option(o, \"X-mount.mode\", &value, &valsz)) < 0)",
          "1057:   return -MNT_ERR_MOUNTOPT;",
          "1058:  if (!rc) {",
          "1059:   if (!valsz)",
          "1060:    return errno = EINVAL, -MNT_ERR_MOUNTOPT;",
          "1062:   if ((rc = mnt_parse_mode(value, valsz, &cxt->tgt_mode)))",
          "1063:    return -MNT_ERR_MOUNTOPT;",
          "1064:  }",
          "1066:  DBG(CXT, ul_debugobj(cxt, \"ownership %d:%d, mode %04o\", cxt->tgt_owner, cxt->tgt_group, cxt->tgt_mode));",
          "1068:  return 0;",
          "1069: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1064:   rc = mnt_context_guess_fstype(cxt);",
          "1065:  if (!rc)",
          "1066:   rc = mnt_context_prepare_target(cxt);",
          "1067:  if (!rc)",
          "1068:   rc = mnt_context_prepare_helper(cxt, \"mount\", NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115:  if (!rc)",
          "1116:   rc = parse_ownership_mode(cxt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1089:  return rc;",
          "1090: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1142: static int set_ownership_mode(struct libmnt_context *cxt)",
          "1143: {",
          "1144:  const char *target = mnt_fs_get_target(cxt->fs);",
          "1146:  if (cxt->tgt_owner != (uid_t) -1 || cxt->tgt_group != (uid_t) -1) {",
          "1147:   DBG(CXT, ul_debugobj(cxt, \"mount: lchown(%s, %u, %u)\", target, cxt->tgt_owner, cxt->tgt_group));",
          "1148:   if (lchown(target, cxt->tgt_owner, cxt->tgt_group) == -1)",
          "1149:    return -MNT_ERR_CHOWN;",
          "1150:  }",
          "1152:  if (cxt->tgt_mode != (mode_t) -1) {",
          "1153:   DBG(CXT, ul_debugobj(cxt, \"mount: chmod(%s, %04o)\", target, cxt->tgt_mode));",
          "1154:   if (chmod(target, cxt->tgt_mode) == -1)",
          "1155:    return -MNT_ERR_CHMOD;",
          "1156:  }",
          "1158:  return 0;",
          "1159: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1191:  if (mnt_context_is_veritydev(cxt))",
          "1192:   mnt_context_deferred_delete_veritydev(cxt);",
          "1194:  if (!mnt_context_switch_ns(cxt, ns_old))",
          "1195:   return -MNT_ERR_NAMESPACE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1263:  if (!res)",
          "1264:   res = set_ownership_mode(cxt);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1841:    if (buf)",
          "1842:     snprintf(buf, bufsz, _(\"filesystem was mounted, but failed to switch namespace back\"));",
          "1843:    return MNT_EX_SYSERR;",
          "1845:   }",
          "1847:   if (rc < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1916:   }",
          "1918:   if (rc == -MNT_ERR_CHOWN) {",
          "1919:    if (buf)",
          "1920:     snprintf(buf, bufsz, _(\"filesystem was mounted, but failed to change ownership to %u:%u: %m\"), cxt->tgt_owner, cxt->tgt_group);",
          "1921:    return MNT_EX_SYSERR;",
          "1922:   }",
          "1924:   if (rc == -MNT_ERR_CHMOD) {",
          "1925:    if (buf)",
          "1926:     snprintf(buf, bufsz, _(\"filesystem was mounted, but failed to change mode to %04o: %m\"), cxt->tgt_mode);",
          "1927:    return MNT_EX_SYSERR;",
          "",
          "---------------"
        ],
        "libmount/src/libmount.h.in||libmount/src/libmount.h.in": [
          "File: libmount/src/libmount.h.in -> libmount/src/libmount.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "222: #define MNT_ERR_ONLYONCE    5010",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: #define MNT_ERR_CHOWN    5011",
          "234: #define MNT_ERR_CHMOD    5012",
          "",
          "---------------"
        ],
        "libmount/src/mountP.h||libmount/src/mountP.h": [
          "File: libmount/src/mountP.h -> libmount/src/mountP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: extern char *mnt_get_username(const uid_t uid);",
          "110: extern int mnt_get_uid(const char *username, uid_t *uid);",
          "111: extern int mnt_get_gid(const char *groupname, gid_t *gid);",
          "112: extern int mnt_in_group(gid_t gid);",
          "114: extern int mnt_open_uniq_filename(const char *filename, char **name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: extern int mnt_parse_uid(const char *user, size_t user_len, uid_t *gid);",
          "113: extern int mnt_parse_gid(const char *group, size_t group_len, gid_t *gid);",
          "114: extern int mnt_parse_mode(const char *mode, size_t mode_len, mode_t *gid);",
          "",
          "---------------"
        ],
        "libmount/src/optstr.c||libmount/src/optstr.c": [
          "File: libmount/src/optstr.c -> libmount/src/optstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1024: int mnt_optstr_get_uid(const char *optstr, const char *name, uid_t *uid)",
          "1025: {",
          "1026:  char *value = NULL;",
          "1027:  size_t valsz = 0;",
          "1029:  int rc;",
          "1032:  assert(optstr);",
          "1033:  assert(name);",
          "",
          "[Removed Lines]",
          "1028:  char buf[sizeof(stringify_value(UINT64_MAX))];",
          "1030:  uint64_t num;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1037:  if (rc != 0)",
          "1038:   goto fail;",
          "1042:   goto fail;",
          "1043:  }",
          "1055:  return 0;",
          "1056: fail:",
          "",
          "[Removed Lines]",
          "1040:  if (valsz > sizeof(buf) - 1) {",
          "1041:   rc = -ERANGE;",
          "1044:  mem2strcpy(buf, value, valsz, sizeof(buf));",
          "1046:  rc = ul_strtou64(buf, &num, 10);",
          "1047:  if (rc != 0)",
          "1048:   goto fail;",
          "1049:  if (num > ULONG_MAX || (uid_t) num != num) {",
          "1050:   rc = -ERANGE;",
          "1051:   goto fail;",
          "1052:  }",
          "",
          "[Added Lines]",
          "1038:  rc = mnt_parse_uid(value, valsz, uid);",
          "1039:  if (rc != 0) {",
          "1040:   rc = -errno;",
          "",
          "---------------"
        ],
        "libmount/src/utils.c||libmount/src/utils.c": [
          "File: libmount/src/utils.c -> libmount/src/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:  return rc;",
          "636: }",
          "638: int mnt_in_group(gid_t gid)",
          "639: {",
          "640:  int rc = 0, n, i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638: static int parse_uid_numeric(const char *value, size_t valsz, uid_t *uid)",
          "639: {",
          "640:  uint64_t num;",
          "642:  assert(value);",
          "643:  assert(uid);",
          "645:  if (valsz > sizeof(stringify_value(UINT64_MAX)) - 1) {",
          "646:   errno = ERANGE;",
          "647:   goto fail;",
          "648:  }",
          "650:  if (ul_strtou64(value, &num, 10) != 0) {",
          "651:   errno = ENOENT;",
          "652:   goto fail;",
          "653:  }",
          "654:  if (num > ULONG_MAX || (uid_t) num != num) {",
          "655:   errno = ERANGE;",
          "656:   goto fail;",
          "657:  }",
          "660:  return 0;",
          "661: fail:",
          "662:  DBG(UTILS, ul_debug(\"failed to convert '%s' to number [errno=%d]\", value, errno));",
          "663:  return -1;",
          "664: }",
          "667: int mnt_parse_uid(const char *user, size_t user_len, uid_t *uid)",
          "668: {",
          "669:  char *user_tofree = NULL;",
          "670:  int rc;",
          "672:  if (user[user_len]) {",
          "673:   user = user_tofree = strndup(user, user_len);",
          "674:   if (!user)",
          "675:    return -1;",
          "676:  }",
          "678:  rc = mnt_get_uid(user, uid);",
          "679:  if (rc != 0 && isdigit(*user))",
          "680:   rc = parse_uid_numeric(user, user_len, uid);",
          "682:  free(user_tofree);",
          "683:  return rc;",
          "684: }",
          "686: static int parse_gid_numeric(const char *value, size_t valsz, gid_t *gid)",
          "687: {",
          "688:  uint64_t num;",
          "690:  assert(value);",
          "691:  assert(gid);",
          "693:  if (valsz > sizeof(stringify_value(UINT64_MAX)) - 1) {",
          "694:   errno = ERANGE;",
          "695:   goto fail;",
          "696:  }",
          "698:  if (ul_strtou64(value, &num, 10) != 0) {",
          "699:   errno = ENOENT;",
          "700:   goto fail;",
          "701:  }",
          "702:  if (num > ULONG_MAX || (gid_t) num != num) {",
          "703:   errno = ERANGE;",
          "704:   goto fail;",
          "705:  }",
          "708:  return 0;",
          "709: fail:",
          "710:  DBG(UTILS, ul_debug(\"failed to convert '%s' to number [errno=%d]\", value, errno));",
          "711:  return -1;",
          "712: }",
          "715: int mnt_parse_gid(const char *group, size_t group_len, gid_t *gid)",
          "716: {",
          "717:  char *group_tofree = NULL;",
          "718:  int rc;",
          "720:  if (group[group_len]) {",
          "721:   group = group_tofree = strndup(group, group_len);",
          "722:   if (!group)",
          "723:    return -1;",
          "724:  }",
          "726:  rc = mnt_get_gid(group, gid);",
          "727:  if (rc != 0 && isdigit(*group))",
          "728:   rc = parse_gid_numeric(group, group_len, gid);",
          "730:  free(group_tofree);",
          "731:  return rc;",
          "732: }",
          "734: int mnt_parse_mode(const char *mode, size_t mode_len, mode_t *uid)",
          "735: {",
          "736:  char buf[sizeof(stringify_value(UINT32_MAX))];",
          "737:  uint32_t num;",
          "739:  assert(mode);",
          "740:  assert(uid);",
          "742:  if (mode_len > sizeof(buf) - 1) {",
          "743:   errno = ERANGE;",
          "744:   goto fail;",
          "745:  }",
          "746:  mem2strcpy(buf, mode, mode_len, sizeof(buf));",
          "748:  if (ul_strtou32(buf, &num, 8) != 0) {",
          "749:   errno = EINVAL;",
          "750:   goto fail;",
          "751:  }",
          "752:  if (num > 07777) {",
          "753:   errno = ERANGE;",
          "754:   goto fail;",
          "755:  }",
          "758:  return 0;",
          "759: fail:",
          "760:  DBG(UTILS, ul_debug(\"failed to convert '%.*s' to mode [errno=%d]\", (int) mode_len, mode, errno));",
          "761:  return -1;",
          "762: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3db9bd609494099f0c1b95231c5dfe383346929",
      "candidate_info": {
        "commit_hash": "f3db9bd609494099f0c1b95231c5dfe383346929",
        "repo": "util-linux/util-linux",
        "commit_url": "https://github.com/util-linux/util-linux/commit/f3db9bd609494099f0c1b95231c5dfe383346929",
        "files": [
          "include/strutils.h",
          "libmount/src/context_umount.c",
          "libmount/src/mountP.h",
          "libmount/src/optstr.c"
        ],
        "message": "libmount: fix UID check for FUSE umount [CVE-2021-3995]\n\nImproper UID check allows an unprivileged user to unmount FUSE\nfilesystems of users with similar UID.\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "include/strutils.h||include/strutils.h",
          "libmount/src/context_umount.c||libmount/src/context_umount.c",
          "libmount/src/mountP.h||libmount/src/mountP.h",
          "libmount/src/optstr.c||libmount/src/optstr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libmount/src/context_umount.c||libmount/src/context_umount.c",
            "libmount/src/mountP.h||libmount/src/mountP.h",
            "libmount/src/optstr.c||libmount/src/optstr.c"
          ],
          "candidate": [
            "libmount/src/context_umount.c||libmount/src/context_umount.c",
            "libmount/src/mountP.h||libmount/src/mountP.h",
            "libmount/src/optstr.c||libmount/src/optstr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/strutils.h||include/strutils.h": [
          "File: include/strutils.h -> include/strutils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  if (n + 1 > nmax)",
          "107:   n = nmax - 1;",
          "109:  memcpy(dest, src, n);",
          "111:  return dest;",
          "112: }",
          "",
          "[Removed Lines]",
          "110:  dest[nmax-1] = '\\0';",
          "",
          "[Added Lines]",
          "109:  memset(dest, '\\0', nmax);",
          "",
          "---------------"
        ],
        "libmount/src/context_umount.c||libmount/src/context_umount.c": [
          "File: libmount/src/context_umount.c -> libmount/src/context_umount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:  struct libmnt_ns *ns_old;",
          "454:  const char *type = mnt_fs_get_fstype(cxt->fs);",
          "455:  const char *optstr;",
          "",
          "[Removed Lines]",
          "456:  char *user_id = NULL;",
          "457:  size_t sz;",
          "458:  uid_t uid;",
          "459:  char uidstr[sizeof(stringify_value(ULONG_MAX))];",
          "",
          "[Added Lines]",
          "456:  uid_t uid, entry_uid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:  optstr = mnt_fs_get_fs_options(cxt->fs);",
          "474:  if (!optstr)",
          "475:   return 0;",
          "481:   return 0;",
          "",
          "[Removed Lines]",
          "477:  if (mnt_optstr_get_option(optstr, \"user_id\", &user_id, &sz) != 0)",
          "478:   return 0;",
          "480:  if (sz == 0 || user_id == NULL)",
          "",
          "[Added Lines]",
          "473:  if (mnt_optstr_get_uid(optstr, \"user_id\", &entry_uid) != 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:   return 0;",
          "495:  }",
          "499: }",
          "",
          "[Removed Lines]",
          "497:  snprintf(uidstr, sizeof(uidstr), \"%lu\", (unsigned long) uid);",
          "498:  return strncmp(user_id, uidstr, sz) == 0;",
          "",
          "[Added Lines]",
          "490:  return uid == entry_uid;",
          "",
          "---------------"
        ],
        "libmount/src/mountP.h||libmount/src/mountP.h": [
          "File: libmount/src/mountP.h -> libmount/src/mountP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:         const struct libmnt_optmap **mapent);",
          "402: extern int mnt_optstr_remove_option_at(char **optstr, char *begin, char *end);",
          "403: extern int mnt_optstr_fix_gid(char **optstr, char *value, size_t valsz, char **next);",
          "404: extern int mnt_optstr_fix_uid(char **optstr, char *value, size_t valsz, char **next);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: extern int mnt_optstr_get_uid(const char *optstr, const char *name, uid_t *uid);",
          "",
          "---------------"
        ],
        "libmount/src/optstr.c||libmount/src/optstr.c": [
          "File: libmount/src/optstr.c -> libmount/src/optstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:  return rc;",
          "1077: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: int mnt_optstr_get_uid(const char *optstr, const char *name, uid_t *uid)",
          "1085: {",
          "1086:  char *value = NULL;",
          "1087:  size_t valsz = 0;",
          "1088:  char buf[sizeof(stringify_value(UINT64_MAX))];",
          "1089:  int rc;",
          "1090:  uint64_t num;",
          "1092:  assert(optstr);",
          "1093:  assert(name);",
          "1094:  assert(uid);",
          "1096:  rc = mnt_optstr_get_option(optstr, name, &value, &valsz);",
          "1097:  if (rc != 0)",
          "1098:   goto fail;",
          "1100:  if (valsz > sizeof(buf) - 1) {",
          "1101:   rc = -ERANGE;",
          "1102:   goto fail;",
          "1103:  }",
          "1104:  mem2strcpy(buf, value, valsz, sizeof(buf));",
          "1106:  rc = ul_strtou64(buf, &num, 10);",
          "1107:  if (rc != 0)",
          "1108:   goto fail;",
          "1109:  if (num > ULONG_MAX || (uid_t) num != num) {",
          "1110:   rc = -ERANGE;",
          "1111:   goto fail;",
          "1112:  }",
          "1115:  return 0;",
          "1116: fail:",
          "1117:  DBG(UTILS, ul_debug(\"failed to convert '%s'= to number [rc=%d]\", name, rc));",
          "1118:  return rc;",
          "1119: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}