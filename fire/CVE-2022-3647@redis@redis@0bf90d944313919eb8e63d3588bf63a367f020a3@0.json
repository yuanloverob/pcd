{
  "cve_id": "CVE-2022-3647",
  "cve_desc": "** DISPUTED ** A vulnerability, which was classified as problematic, was found in Redis up to 6.2.7/7.0.5. Affected is the function sigsegvHandler of the file debug.c of the component Crash Report. The manipulation leads to denial of service. The complexity of an attack is rather high. The exploitability is told to be difficult. The real existence of this vulnerability is still doubted at the moment. Upgrading to version 6.2.8 and 7.0.6 is able to address this issue. The patch is identified as 0bf90d944313919eb8e63d3588bf63a367f020a3. It is recommended to apply a patch to fix this issue. VDB-211962 is the identifier assigned to this vulnerability. NOTE: The vendor claims that this is not a DoS because it applies to the crash logging mechanism which is triggered after a crash has occurred.",
  "repo": "redis/redis",
  "patch_hash": "0bf90d944313919eb8e63d3588bf63a367f020a3",
  "patch_info": {
    "commit_hash": "0bf90d944313919eb8e63d3588bf63a367f020a3",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/0bf90d944313919eb8e63d3588bf63a367f020a3",
    "files": [
      "src/debug.c"
    ],
    "message": "Avoid crash on crash report when a bad function pointer was called (#11298)\n\nIf Redis crashes due to calling an invalid function pointer,\nthe `backtrace` function will try to dereference this invalid pointer\nwhich will cause a crash inside the crash report and will kill\nthe processes without having all the crash report information.\n\nExample:\n\n```\n=== REDIS BUG REPORT START: Cut & paste starting from here ===\n198672:M 19 Sep 2022 18:06:12.936 # Redis 255.255.255 crashed by signal: 11, si_code: 1\n198672:M 19 Sep 2022 18:06:12.936 # Accessing address: 0x1\n198672:M 19 Sep 2022 18:06:12.936 # Crashed running the instruction at: 0x1\n// here the processes is crashing\n```\n\nThis PR tries to fix this crash be:\n1. Identify the issue when it happened.\n2. Replace the invalid pointer with a pointer to some dummy function\n   so that `backtrace` will not crash.\n\nI identification is done by comparing `eip` to `info->si_addr`, if they\nare the same we know that the crash happened on the same address it tries to\naccesses and we can conclude that it tries to call and invalid function pointer.\n\nTo replace the invalid pointer we introduce a new function, `setMcontextEip`,\nwhich is very similar to `getMcontextEip` and it knows to set the Eip for the\ndifferent supported OS's. After printing the trace we retrieve the old `Eip` value.",
    "before_after_code_files": [
      "src/debug.c||src/debug.c"
    ]
  },
  "patch_diff": {
    "src/debug.c||src/debug.c": [
      "File: src/debug.c -> src/debug.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123: }",
      "1125: #ifdef HAVE_BACKTRACE",
      "1127: #define NOT_SUPPORTED() do {\\",
      "1128:     UNUSED(uc);\\",
      "1129:     return NULL;\\",
      "1130: } while(0)",
      "1131: #if defined(__APPLE__) && !defined(MAC_OS_X_VERSION_10_6)",
      "1133:     #if defined(__x86_64__)",
      "1135:     #elif defined(__i386__)",
      "1137:     #else",
      "1139:     #endif",
      "1140: #elif defined(__APPLE__) && defined(MAC_OS_X_VERSION_10_6)",
      "1142:     #if defined(_STRUCT_X86_THREAD_STATE64) && !defined(__i386__)",
      "1144:     #elif defined(__i386__)",
      "1146:     #else",
      "1149:     #endif",
      "1150: #elif defined(__linux__)",
      "1152:     #if defined(__i386__) || ((defined(__X86_64__) || defined(__x86_64__)) && defined(__ILP32__))",
      "1154:     #elif defined(__X86_64__) || defined(__x86_64__)",
      "1162:     #else",
      "1163:     NOT_SUPPORTED();",
      "1164:     #endif",
      "1165: #elif defined(__FreeBSD__)",
      "1167:     #if defined(__i386__)",
      "1169:     #elif defined(__x86_64__)",
      "1171:     #else",
      "1172:     NOT_SUPPORTED();",
      "1173:     #endif",
      "1174: #elif defined(__OpenBSD__)",
      "1176:     #if defined(__i386__)",
      "1178:     #elif defined(__x86_64__)",
      "1180:     #else",
      "1181:     NOT_SUPPORTED();",
      "1182:     #endif",
      "1183: #elif defined(__NetBSD__)",
      "1184:     #if defined(__i386__)",
      "1186:     #elif defined(__x86_64__)",
      "1188:     #else",
      "1189:     NOT_SUPPORTED();",
      "1190:     #endif",
      "1191: #elif defined(__DragonFly__)",
      "1193: #else",
      "1194:     NOT_SUPPORTED();",
      "1195: #endif",
      "",
      "[Removed Lines]",
      "1126: static void *getMcontextEip(ucontext_t *uc) {",
      "1134:     return (void*) uc->uc_mcontext->__ss.__rip;",
      "1136:     return (void*) uc->uc_mcontext->__ss.__eip;",
      "1138:     return (void*) uc->uc_mcontext->__ss.__srr0;",
      "1143:     return (void*) uc->uc_mcontext->__ss.__rip;",
      "1145:     return (void*) uc->uc_mcontext->__ss.__eip;",
      "1148:     return (void*) arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
      "1157:     return (void*) uc->uc_mcontext.sc_ip;",
      "1159:     return (void*) uc->uc_mcontext.arm_pc;",
      "1161:     return (void*) uc->uc_mcontext.pc;",
      "1168:     return (void*) uc->uc_mcontext.mc_eip;",
      "1170:     return (void*) uc->uc_mcontext.mc_rip;",
      "1177:     return (void*) uc->sc_eip;",
      "1179:     return (void*) uc->sc_rip;",
      "1185:     return (void*) uc->uc_mcontext.__gregs[_REG_EIP];",
      "1187:     return (void*) uc->uc_mcontext.__gregs[_REG_RIP];",
      "1192:     return (void*) uc->uc_mcontext.mc_rip;",
      "",
      "[Added Lines]",
      "1128: static void* getAndSetMcontextEip(ucontext_t *uc, void *eip) {",
      "1131:     UNUSED(eip);\\",
      "1134: #define GET_SET_RETURN(target_var, new_val) do {\\",
      "1135:     void *old_val = (void*)target_var; \\",
      "1136:     if (new_val) { \\",
      "1137:         void **temp = (void**)&target_var; \\",
      "1139:     } \\",
      "1140:     return old_val; \\",
      "1141: } while(0)",
      "1145:     GET_SET_RETURN(uc->uc_mcontext->__ss.__rip, eip);",
      "1147:     GET_SET_RETURN(uc->uc_mcontext->__ss.__eip, eip);",
      "1149:     GET_SET_RETURN(uc->uc_mcontext->__ss.__srr0, eip);",
      "1154:     GET_SET_RETURN(uc->uc_mcontext->__ss.__rip, eip);",
      "1156:     GET_SET_RETURN(uc->uc_mcontext->__ss.__eip, eip);",
      "1159:     void *old_val = (void*)arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
      "1160:     if (eip) {",
      "1161:         arm_thread_state64_set_pc_fptr(uc->uc_mcontext->__ss, eip);",
      "1162:     }",
      "1163:     return old_val;",
      "1168:     GET_SET_RETURN(uc->uc_mcontext.gregs[14], eip);",
      "1170:     GET_SET_RETURN(uc->uc_mcontext.gregs[16], eip);",
      "1172:     GET_SET_RETURN(uc->uc_mcontext.sc_ip, eip);",
      "1174:     GET_SET_RETURN(uc->uc_mcontext.arm_pc, eip);",
      "1176:     GET_SET_RETURN(uc->uc_mcontext.pc, eip);",
      "1183:     GET_SET_RETURN(uc->uc_mcontext.mc_eip, eip);",
      "1185:     GET_SET_RETURN(uc->uc_mcontext.mc_rip, eip);",
      "1192:     GET_SET_RETURN(uc->sc_eip, eip);",
      "1194:     GET_SET_RETURN(uc->sc_rip, eip);",
      "1200:     GET_SET_RETURN(uc->uc_mcontext.__gregs[_REG_EIP], eip);",
      "1202:     GET_SET_RETURN(uc->uc_mcontext.__gregs[_REG_RIP], eip);",
      "1207:     GET_SET_RETURN(uc->uc_mcontext.mc_rip, eip);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1951:     }",
      "1952: }",
      "1954: void sigsegvHandler(int sig, siginfo_t *info, void *secret) {",
      "1955:     UNUSED(secret);",
      "1956:     UNUSED(info);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1969: void invalidFunctionWasCalled() {}",
      "1971: typedef void (*invalidFunctionWasCalledType)();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1969: #ifdef HAVE_BACKTRACE",
      "1970:     ucontext_t *uc = (ucontext_t*) secret;",
      "1972:     if (eip != NULL) {",
      "1973:         serverLog(LL_WARNING,",
      "1974:         \"Crashed running the instruction at: %p\", eip);",
      "1975:     }",
      "1979:     logRegisters(uc);",
      "1980: #endif",
      "",
      "[Removed Lines]",
      "1971:     void *eip = getMcontextEip(uc);",
      "1977:     logStackTrace(getMcontextEip(uc), 1);",
      "",
      "[Added Lines]",
      "1990:     void *eip = getAndSetMcontextEip(uc, NULL);",
      "1996:     if (eip == info->si_addr) {",
      "2002:         void *ptr;",
      "2003:         invalidFunctionWasCalledType *ptr_ptr = (invalidFunctionWasCalledType*)&ptr;",
      "2005:         getAndSetMcontextEip(uc, ptr);",
      "2006:     }",
      "2008:     logStackTrace(eip, 1);",
      "2010:     if (eip == info->si_addr) {",
      "2012:         getAndSetMcontextEip(uc, eip);",
      "2013:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2080:     serverLogFromHandler(LL_WARNING,\"\\n--- WATCHDOG TIMER EXPIRED ---\");",
      "2081: #ifdef HAVE_BACKTRACE",
      "2083: #else",
      "2084:     serverLogFromHandler(LL_WARNING,\"Sorry: no support for backtrace().\");",
      "2085: #endif",
      "",
      "[Removed Lines]",
      "2082:     logStackTrace(getMcontextEip(uc), 1);",
      "",
      "[Added Lines]",
      "2118:     logStackTrace(getAndSetMcontextEip(uc, NULL), 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8102f5ff887e5e004a0cc2a86efd5ff7b3bbf12",
      "candidate_info": {
        "commit_hash": "d8102f5ff887e5e004a0cc2a86efd5ff7b3bbf12",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/d8102f5ff887e5e004a0cc2a86efd5ff7b3bbf12",
        "files": [
          "src/debug.c"
        ],
        "message": "Avoid crash on crash report when a bad function pointer was called (#11298)\n\nIf Redis crashes due to calling an invalid function pointer,\nthe `backtrace` function will try to dereference this invalid pointer\nwhich will cause a crash inside the crash report and will kill\nthe processes without having all the crash report information.\n\nExample:\n\n```\n=== REDIS BUG REPORT START: Cut & paste starting from here ===\n198672:M 19 Sep 2022 18:06:12.936 # Redis 255.255.255 crashed by signal: 11, si_code: 1\n198672:M 19 Sep 2022 18:06:12.936 # Accessing address: 0x1\n198672:M 19 Sep 2022 18:06:12.936 # Crashed running the instruction at: 0x1\n// here the processes is crashing\n```\n\nThis PR tries to fix this crash be:\n1. Identify the issue when it happened.\n2. Replace the invalid pointer with a pointer to some dummy function\n   so that `backtrace` will not crash.\n\nI identification is done by comparing `eip` to `info->si_addr`, if they\nare the same we know that the crash happened on the same address it tries to\naccesses and we can conclude that it tries to call and invalid function pointer.\n\nTo replace the invalid pointer we introduce a new function, `setMcontextEip`,\nwhich is very similar to `getMcontextEip` and it knows to set the Eip for the\ndifferent supported OS's. After printing the trace we retrieve the old `Eip` value.\n\n(cherry picked from commit 0bf90d944313919eb8e63d3588bf63a367f020a3)",
        "before_after_code_files": [
          "src/debug.c||src/debug.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/debug.c||src/debug.c"
          ],
          "candidate": [
            "src/debug.c||src/debug.c"
          ]
        }
      },
      "candidate_diff": {
        "src/debug.c||src/debug.c": [
          "File: src/debug.c -> src/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1019: }",
          "1021: #ifdef HAVE_BACKTRACE",
          "1023: #if defined(__APPLE__) && !defined(MAC_OS_X_VERSION_10_6)",
          "1025:     #if defined(__x86_64__)",
          "1027:     #elif defined(__i386__)",
          "1029:     #else",
          "1031:     #endif",
          "1032: #elif defined(__APPLE__) && defined(MAC_OS_X_VERSION_10_6)",
          "1034:     #if defined(_STRUCT_X86_THREAD_STATE64) && !defined(__i386__)",
          "1036:     #elif defined(__i386__)",
          "1038:     #else",
          "1041:     #endif",
          "1042: #elif defined(__linux__)",
          "1044:     #if defined(__i386__) || ((defined(__X86_64__) || defined(__x86_64__)) && defined(__ILP32__))",
          "1046:     #elif defined(__X86_64__) || defined(__x86_64__)",
          "1054:     #endif",
          "1055: #elif defined(__FreeBSD__)",
          "1057:     #if defined(__i386__)",
          "1059:     #elif defined(__x86_64__)",
          "1061:     #endif",
          "1062: #elif defined(__OpenBSD__)",
          "1064:     #if defined(__i386__)",
          "1066:     #elif defined(__x86_64__)",
          "1068:     #endif",
          "1069: #elif defined(__NetBSD__)",
          "1070:     #if defined(__i386__)",
          "1072:     #elif defined(__x86_64__)",
          "1074:     #endif",
          "1075: #elif defined(__DragonFly__)",
          "1077: #else",
          "1078:     return NULL;",
          "1079: #endif",
          "",
          "[Removed Lines]",
          "1022: static void *getMcontextEip(ucontext_t *uc) {",
          "1026:     return (void*) uc->uc_mcontext->__ss.__rip;",
          "1028:     return (void*) uc->uc_mcontext->__ss.__eip;",
          "1030:     return (void*) uc->uc_mcontext->__ss.__srr0;",
          "1035:     return (void*) uc->uc_mcontext->__ss.__rip;",
          "1037:     return (void*) uc->uc_mcontext->__ss.__eip;",
          "1040:     return (void*) arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
          "1049:     return (void*) uc->uc_mcontext.sc_ip;",
          "1051:     return (void*) uc->uc_mcontext.arm_pc;",
          "1053:     return (void*) uc->uc_mcontext.pc;",
          "1058:     return (void*) uc->uc_mcontext.mc_eip;",
          "1060:     return (void*) uc->uc_mcontext.mc_rip;",
          "1065:     return (void*) uc->sc_eip;",
          "1067:     return (void*) uc->sc_rip;",
          "1071:     return (void*) uc->uc_mcontext.__gregs[_REG_EIP];",
          "1073:     return (void*) uc->uc_mcontext.__gregs[_REG_RIP];",
          "1076:     return (void*) uc->uc_mcontext.mc_rip;",
          "",
          "[Added Lines]",
          "1024: static void* getAndSetMcontextEip(ucontext_t *uc, void *eip) {",
          "1025: #define GET_SET_RETURN(target_var, new_val) do {\\",
          "1026:     void *old_val = (void*)target_var; \\",
          "1027:     if (new_val) { \\",
          "1028:         void **temp = (void**)&target_var; \\",
          "1030:     } \\",
          "1031:     return old_val; \\",
          "1032: } while(0)",
          "1036:     GET_SET_RETURN(uc->uc_mcontext->__ss.__rip, eip);",
          "1038:     GET_SET_RETURN(uc->uc_mcontext->__ss.__eip, eip);",
          "1040:     GET_SET_RETURN(uc->uc_mcontext->__ss.__srr0, eip);",
          "1045:     GET_SET_RETURN(uc->uc_mcontext->__ss.__rip, eip);",
          "1047:     GET_SET_RETURN(uc->uc_mcontext->__ss.__eip, eip);",
          "1050:     void *old_val = (void*)arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
          "1051:     if (eip) {",
          "1052:         arm_thread_state64_set_pc_fptr(uc->uc_mcontext->__ss, eip);",
          "1053:     }",
          "1054:     return old_val;",
          "1059:     GET_SET_RETURN(uc->uc_mcontext.gregs[14], eip);",
          "1061:     GET_SET_RETURN(uc->uc_mcontext.gregs[16], eip);",
          "1063:     GET_SET_RETURN(uc->uc_mcontext.sc_ip, eip);",
          "1065:     GET_SET_RETURN(uc->uc_mcontext.arm_pc, eip);",
          "1067:     GET_SET_RETURN(uc->uc_mcontext.pc, eip);",
          "1072:     GET_SET_RETURN(uc->uc_mcontext.mc_eip, eip);",
          "1074:     GET_SET_RETURN(uc->uc_mcontext.mc_rip, eip);",
          "1079:     GET_SET_RETURN(uc->sc_eip, eip);",
          "1081:     GET_SET_RETURN(uc->sc_rip, eip);",
          "1085:     GET_SET_RETURN(uc->uc_mcontext.__gregs[_REG_EIP], eip);",
          "1087:     GET_SET_RETURN(uc->uc_mcontext.__gregs[_REG_RIP], eip);",
          "1090:     GET_SET_RETURN(uc->uc_mcontext.mc_rip, eip);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1800:     }",
          "1801: }",
          "1803: void sigsegvHandler(int sig, siginfo_t *info, void *secret) {",
          "1804:     UNUSED(secret);",
          "1805:     UNUSED(info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1817: void invalidFunctionWasCalled() {}",
          "1819: typedef void (*invalidFunctionWasCalledType)();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1818: #ifdef HAVE_BACKTRACE",
          "1819:     ucontext_t *uc = (ucontext_t*) secret;",
          "1821:     if (eip != NULL) {",
          "1822:         serverLog(LL_WARNING,",
          "1823:         \"Crashed running the instruction at: %p\", eip);",
          "1824:     }",
          "1828:     logRegisters(uc);",
          "1829: #endif",
          "",
          "[Removed Lines]",
          "1820:     void *eip = getMcontextEip(uc);",
          "1826:     logStackTrace(getMcontextEip(uc), 1);",
          "",
          "[Added Lines]",
          "1838:     void *eip = getAndSetMcontextEip(uc, NULL);",
          "1844:     if (eip == info->si_addr) {",
          "1850:         void *ptr;",
          "1851:         invalidFunctionWasCalledType *ptr_ptr = (invalidFunctionWasCalledType*)&ptr;",
          "1853:         getAndSetMcontextEip(uc, ptr);",
          "1854:     }",
          "1856:     logStackTrace(eip, 1);",
          "1858:     if (eip == info->si_addr) {",
          "1860:         getAndSetMcontextEip(uc, eip);",
          "1861:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1921:     serverLogFromHandler(LL_WARNING,\"\\n--- WATCHDOG TIMER EXPIRED ---\");",
          "1922: #ifdef HAVE_BACKTRACE",
          "1924: #else",
          "1925:     serverLogFromHandler(LL_WARNING,\"Sorry: no support for backtrace().\");",
          "1926: #endif",
          "",
          "[Removed Lines]",
          "1923:     logStackTrace(getMcontextEip(uc), 1);",
          "",
          "[Added Lines]",
          "1958:     logStackTrace(getAndSetMcontextEip(uc, NULL), 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1ede2120ae51d3288aa133348bfda94f8542d4c",
      "candidate_info": {
        "commit_hash": "b1ede2120ae51d3288aa133348bfda94f8542d4c",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/b1ede2120ae51d3288aa133348bfda94f8542d4c",
        "files": [
          "src/debug.c"
        ],
        "message": "Avoid crash on crash report when a bad function pointer was called (#11298)\n\nIf Redis crashes due to calling an invalid function pointer,\nthe `backtrace` function will try to dereference this invalid pointer\nwhich will cause a crash inside the crash report and will kill\nthe processes without having all the crash report information.\n\nExample:\n\n```\n=== REDIS BUG REPORT START: Cut & paste starting from here ===\n198672:M 19 Sep 2022 18:06:12.936 # Redis 255.255.255 crashed by signal: 11, si_code: 1\n198672:M 19 Sep 2022 18:06:12.936 # Accessing address: 0x1\n198672:M 19 Sep 2022 18:06:12.936 # Crashed running the instruction at: 0x1\n// here the processes is crashing\n```\n\nThis PR tries to fix this crash be:\n1. Identify the issue when it happened.\n2. Replace the invalid pointer with a pointer to some dummy function\n   so that `backtrace` will not crash.\n\nI identification is done by comparing `eip` to `info->si_addr`, if they\nare the same we know that the crash happened on the same address it tries to\naccesses and we can conclude that it tries to call and invalid function pointer.\n\nTo replace the invalid pointer we introduce a new function, `setMcontextEip`,\nwhich is very similar to `getMcontextEip` and it knows to set the Eip for the\ndifferent supported OS's. After printing the trace we retrieve the old `Eip` value.\n\n(cherry picked from commit 0bf90d944313919eb8e63d3588bf63a367f020a3)",
        "before_after_code_files": [
          "src/debug.c||src/debug.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/debug.c||src/debug.c"
          ],
          "candidate": [
            "src/debug.c||src/debug.c"
          ]
        }
      },
      "candidate_diff": {
        "src/debug.c||src/debug.c": [
          "File: src/debug.c -> src/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123: }",
          "1125: #ifdef HAVE_BACKTRACE",
          "1127: #define NOT_SUPPORTED() do {\\",
          "1128:     UNUSED(uc);\\",
          "1129:     return NULL;\\",
          "1130: } while(0)",
          "1131: #if defined(__APPLE__) && !defined(MAC_OS_X_VERSION_10_6)",
          "1133:     #if defined(__x86_64__)",
          "1135:     #elif defined(__i386__)",
          "1137:     #else",
          "1139:     #endif",
          "1140: #elif defined(__APPLE__) && defined(MAC_OS_X_VERSION_10_6)",
          "1142:     #if defined(_STRUCT_X86_THREAD_STATE64) && !defined(__i386__)",
          "1144:     #elif defined(__i386__)",
          "1146:     #else",
          "1149:     #endif",
          "1150: #elif defined(__linux__)",
          "1152:     #if defined(__i386__) || ((defined(__X86_64__) || defined(__x86_64__)) && defined(__ILP32__))",
          "1154:     #elif defined(__X86_64__) || defined(__x86_64__)",
          "1162:     #else",
          "1163:     NOT_SUPPORTED();",
          "1164:     #endif",
          "1165: #elif defined(__FreeBSD__)",
          "1167:     #if defined(__i386__)",
          "1169:     #elif defined(__x86_64__)",
          "1171:     #else",
          "1172:     NOT_SUPPORTED();",
          "1173:     #endif",
          "1174: #elif defined(__OpenBSD__)",
          "1176:     #if defined(__i386__)",
          "1178:     #elif defined(__x86_64__)",
          "1180:     #else",
          "1181:     NOT_SUPPORTED();",
          "1182:     #endif",
          "1183: #elif defined(__NetBSD__)",
          "1184:     #if defined(__i386__)",
          "1186:     #elif defined(__x86_64__)",
          "1188:     #else",
          "1189:     NOT_SUPPORTED();",
          "1190:     #endif",
          "1191: #elif defined(__DragonFly__)",
          "1193: #else",
          "1194:     NOT_SUPPORTED();",
          "1195: #endif",
          "",
          "[Removed Lines]",
          "1126: static void *getMcontextEip(ucontext_t *uc) {",
          "1134:     return (void*) uc->uc_mcontext->__ss.__rip;",
          "1136:     return (void*) uc->uc_mcontext->__ss.__eip;",
          "1138:     return (void*) uc->uc_mcontext->__ss.__srr0;",
          "1143:     return (void*) uc->uc_mcontext->__ss.__rip;",
          "1145:     return (void*) uc->uc_mcontext->__ss.__eip;",
          "1148:     return (void*) arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
          "1157:     return (void*) uc->uc_mcontext.sc_ip;",
          "1159:     return (void*) uc->uc_mcontext.arm_pc;",
          "1161:     return (void*) uc->uc_mcontext.pc;",
          "1168:     return (void*) uc->uc_mcontext.mc_eip;",
          "1170:     return (void*) uc->uc_mcontext.mc_rip;",
          "1177:     return (void*) uc->sc_eip;",
          "1179:     return (void*) uc->sc_rip;",
          "1185:     return (void*) uc->uc_mcontext.__gregs[_REG_EIP];",
          "1187:     return (void*) uc->uc_mcontext.__gregs[_REG_RIP];",
          "1192:     return (void*) uc->uc_mcontext.mc_rip;",
          "",
          "[Added Lines]",
          "1128: static void* getAndSetMcontextEip(ucontext_t *uc, void *eip) {",
          "1131:     UNUSED(eip);\\",
          "1134: #define GET_SET_RETURN(target_var, new_val) do {\\",
          "1135:     void *old_val = (void*)target_var; \\",
          "1136:     if (new_val) { \\",
          "1137:         void **temp = (void**)&target_var; \\",
          "1139:     } \\",
          "1140:     return old_val; \\",
          "1141: } while(0)",
          "1145:     GET_SET_RETURN(uc->uc_mcontext->__ss.__rip, eip);",
          "1147:     GET_SET_RETURN(uc->uc_mcontext->__ss.__eip, eip);",
          "1149:     GET_SET_RETURN(uc->uc_mcontext->__ss.__srr0, eip);",
          "1154:     GET_SET_RETURN(uc->uc_mcontext->__ss.__rip, eip);",
          "1156:     GET_SET_RETURN(uc->uc_mcontext->__ss.__eip, eip);",
          "1159:     void *old_val = (void*)arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
          "1160:     if (eip) {",
          "1161:         arm_thread_state64_set_pc_fptr(uc->uc_mcontext->__ss, eip);",
          "1162:     }",
          "1163:     return old_val;",
          "1168:     GET_SET_RETURN(uc->uc_mcontext.gregs[14], eip);",
          "1170:     GET_SET_RETURN(uc->uc_mcontext.gregs[16], eip);",
          "1172:     GET_SET_RETURN(uc->uc_mcontext.sc_ip, eip);",
          "1174:     GET_SET_RETURN(uc->uc_mcontext.arm_pc, eip);",
          "1176:     GET_SET_RETURN(uc->uc_mcontext.pc, eip);",
          "1183:     GET_SET_RETURN(uc->uc_mcontext.mc_eip, eip);",
          "1185:     GET_SET_RETURN(uc->uc_mcontext.mc_rip, eip);",
          "1192:     GET_SET_RETURN(uc->sc_eip, eip);",
          "1194:     GET_SET_RETURN(uc->sc_rip, eip);",
          "1200:     GET_SET_RETURN(uc->uc_mcontext.__gregs[_REG_EIP], eip);",
          "1202:     GET_SET_RETURN(uc->uc_mcontext.__gregs[_REG_RIP], eip);",
          "1207:     GET_SET_RETURN(uc->uc_mcontext.mc_rip, eip);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1951:     }",
          "1952: }",
          "1954: void sigsegvHandler(int sig, siginfo_t *info, void *secret) {",
          "1955:     UNUSED(secret);",
          "1956:     UNUSED(info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1969: void invalidFunctionWasCalled() {}",
          "1971: typedef void (*invalidFunctionWasCalledType)();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1969: #ifdef HAVE_BACKTRACE",
          "1970:     ucontext_t *uc = (ucontext_t*) secret;",
          "1972:     if (eip != NULL) {",
          "1973:         serverLog(LL_WARNING,",
          "1974:         \"Crashed running the instruction at: %p\", eip);",
          "1975:     }",
          "1979:     logRegisters(uc);",
          "1980: #endif",
          "",
          "[Removed Lines]",
          "1971:     void *eip = getMcontextEip(uc);",
          "1977:     logStackTrace(getMcontextEip(uc), 1);",
          "",
          "[Added Lines]",
          "1990:     void *eip = getAndSetMcontextEip(uc, NULL);",
          "1996:     if (eip == info->si_addr) {",
          "2002:         void *ptr;",
          "2003:         invalidFunctionWasCalledType *ptr_ptr = (invalidFunctionWasCalledType*)&ptr;",
          "2005:         getAndSetMcontextEip(uc, ptr);",
          "2006:     }",
          "2008:     logStackTrace(eip, 1);",
          "2010:     if (eip == info->si_addr) {",
          "2012:         getAndSetMcontextEip(uc, eip);",
          "2013:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2080:     serverLogFromHandler(LL_WARNING,\"\\n--- WATCHDOG TIMER EXPIRED ---\");",
          "2081: #ifdef HAVE_BACKTRACE",
          "2083: #else",
          "2084:     serverLogFromHandler(LL_WARNING,\"Sorry: no support for backtrace().\");",
          "2085: #endif",
          "",
          "[Removed Lines]",
          "2082:     logStackTrace(getMcontextEip(uc), 1);",
          "",
          "[Added Lines]",
          "2118:     logStackTrace(getAndSetMcontextEip(uc, NULL), 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}