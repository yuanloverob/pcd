{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "91e3669e01245185569d09e9e6e11641282971ee",
  "patch_info": {
    "commit_hash": "91e3669e01245185569d09e9e6e11641282971ee",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/91e3669e01245185569d09e9e6e11641282971ee",
    "files": [
      "Doc/library/os.rst",
      "Doc/whatsnew/3.8.rst",
      "Lib/test/test_os.py",
      "Lib/test/test_tempfile.py",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst",
      "Modules/posixmodule.c"
    ],
    "message": "[3.8] gh-118486: Support mkdir(mode=0o700) on Windows (GH-118488) (GH-118742)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1380:         self.assertRaises(OSError, os.makedirs, path, exist_ok=True)",
      "1381:         os.remove(path)",
      "1383:     def tearDown(self):",
      "1384:         path = os.path.join(support.TESTFN, 'dir1', 'dir2', 'dir3',",
      "1385:                             'dir4', 'dir5', 'dir6')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1383:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1384:     def test_win32_mkdir_700(self):",
      "1385:         base = support.TESTFN",
      "1386:         path = os.path.abspath(os.path.join(support.TESTFN, 'dir'))",
      "1387:         os.mkdir(path, mode=0o700)",
      "1388:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1389:         os.rmdir(path)",
      "1390:         self.assertEqual(",
      "1391:             out.strip(),",
      "1392:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1393:         )",
      "",
      "---------------"
    ],
    "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py": [
      "File: Lib/test/test_tempfile.py -> Lib/test/test_tempfile.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import contextlib",
      "12: import stat",
      "13: import weakref",
      "14: from unittest import mock",
      "16: import unittest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import subprocess",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "760:         finally:",
      "761:             os.rmdir(dir)",
      "763:     def test_collision_with_existing_file(self):",
      "764:         # mkdtemp tries another name when a file with",
      "765:         # the chosen name already exists",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "764:     @unittest.skipUnless(os.name == \"nt\", \"Only on Windows.\")",
      "765:     def test_mode_win32(self):",
      "766:         # Use icacls.exe to extract the users with some level of access",
      "767:         # Main thing we are testing is that the BUILTIN\\Users group has",
      "768:         # no access. The exact ACL is going to vary based on which user",
      "769:         # is running the test.",
      "770:         dir = self.do_create()",
      "771:         try:",
      "772:             out = subprocess.check_output([\"icacls.exe\", dir], encoding=\"oem\").casefold()",
      "773:         finally:",
      "774:             os.rmdir(dir)",
      "776:         dir = dir.casefold()",
      "777:         users = set()",
      "778:         found_user = False",
      "779:         for line in out.strip().splitlines():",
      "780:             acl = None",
      "781:             # First line of result includes our directory",
      "782:             if line.startswith(dir):",
      "783:                 acl = line[len(dir):].strip()",
      "784:             elif line and line[:1].isspace():",
      "785:                 acl = line.strip()",
      "786:             if acl:",
      "787:                 users.add(acl.partition(\":\")[0])",
      "789:         self.assertNotIn(r\"BUILTIN\\Users\".casefold(), users)",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #include \"pythread.h\"",
      "42: #include \"structmember.h\"",
      "43: #ifndef MS_WINDOWS",
      "44: #  include \"posixmodule.h\"",
      "45: #else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #ifdef MS_WINDOWS",
      "45: #  include <aclapi.h>             // SetEntriesInAcl",
      "46: #  include <sddl.h>               // SDDL_REVISION_1",
      "47: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4152: {",
      "4153:     int result;",
      "4155:     if (PySys_Audit(\"os.mkdir\", \"Oii\", path->object, mode,",
      "4156:                     dir_fd == DEFAULT_DIR_FD ? -1 : dir_fd) < 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4159: #ifdef MS_WINDOWS",
      "4160:     int error = 0;",
      "4161:     int pathError = 0;",
      "4162:     SECURITY_ATTRIBUTES secAttr = { sizeof(secAttr) };",
      "4163:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
      "4164: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4160: #ifdef MS_WINDOWS",
      "4161:     Py_BEGIN_ALLOW_THREADS",
      "4163:     Py_END_ALLOW_THREADS",
      "4166:         return path_error(path);",
      "4167: #else",
      "4168:     Py_BEGIN_ALLOW_THREADS",
      "4169: #if HAVE_MKDIRAT",
      "",
      "[Removed Lines]",
      "4162:     result = CreateDirectoryW(path->wide, NULL);",
      "4165:     if (!result)",
      "",
      "[Added Lines]",
      "4173:     if (mode == 0700 /* 0o700 */) {",
      "4174:         ULONG sdSize;",
      "4175:         pSecAttr = &secAttr;",
      "4179:         if (!ConvertStringSecurityDescriptorToSecurityDescriptorW(",
      "4180:             L\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\",",
      "4181:             SDDL_REVISION_1,",
      "4182:             &secAttr.lpSecurityDescriptor,",
      "4183:             &sdSize",
      "4184:         )) {",
      "4185:             error = GetLastError();",
      "4186:         }",
      "4187:     }",
      "4188:     if (!error) {",
      "4189:         result = CreateDirectoryW(path->wide, pSecAttr);",
      "4190:         if (secAttr.lpSecurityDescriptor &&",
      "4193:             LocalFree(secAttr.lpSecurityDescriptor)) {",
      "4194:             error = GetLastError();",
      "4195:         }",
      "4196:     }",
      "4199:     if (error) {",
      "4200:         return PyErr_SetFromWindowsErr(error);",
      "4201:     }",
      "4202:     if (!result) {",
      "4204:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91e3669e01245185569d09e9e6e11641282971ee",
      "candidate_info": {
        "commit_hash": "91e3669e01245185569d09e9e6e11641282971ee",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/91e3669e01245185569d09e9e6e11641282971ee",
        "files": [
          "Doc/library/os.rst",
          "Doc/whatsnew/3.8.rst",
          "Lib/test/test_os.py",
          "Lib/test/test_tempfile.py",
          "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst",
          "Modules/posixmodule.c"
        ],
        "message": "[3.8] gh-118486: Support mkdir(mode=0o700) on Windows (GH-118488) (GH-118742)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/test/test_os.py||Lib/test/test_os.py",
          "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py",
          "Modules/posixmodule.c||Modules/posixmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ],
          "candidate": [
            "Lib/test/test_os.py||Lib/test/test_os.py",
            "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py",
            "Modules/posixmodule.c||Modules/posixmodule.c"
          ]
        }
      },
      "candidate_diff": {
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1380:         self.assertRaises(OSError, os.makedirs, path, exist_ok=True)",
          "1381:         os.remove(path)",
          "1383:     def tearDown(self):",
          "1384:         path = os.path.join(support.TESTFN, 'dir1', 'dir2', 'dir3',",
          "1385:                             'dir4', 'dir5', 'dir6')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1383:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
          "1384:     def test_win32_mkdir_700(self):",
          "1385:         base = support.TESTFN",
          "1386:         path = os.path.abspath(os.path.join(support.TESTFN, 'dir'))",
          "1387:         os.mkdir(path, mode=0o700)",
          "1388:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
          "1389:         os.rmdir(path)",
          "1390:         self.assertEqual(",
          "1391:             out.strip(),",
          "1392:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
          "1393:         )",
          "",
          "---------------"
        ],
        "Lib/test/test_tempfile.py||Lib/test/test_tempfile.py": [
          "File: Lib/test/test_tempfile.py -> Lib/test/test_tempfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import contextlib",
          "12: import stat",
          "13: import weakref",
          "14: from unittest import mock",
          "16: import unittest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import subprocess",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "760:         finally:",
          "761:             os.rmdir(dir)",
          "763:     def test_collision_with_existing_file(self):",
          "764:         # mkdtemp tries another name when a file with",
          "765:         # the chosen name already exists",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:     @unittest.skipUnless(os.name == \"nt\", \"Only on Windows.\")",
          "765:     def test_mode_win32(self):",
          "766:         # Use icacls.exe to extract the users with some level of access",
          "767:         # Main thing we are testing is that the BUILTIN\\Users group has",
          "768:         # no access. The exact ACL is going to vary based on which user",
          "769:         # is running the test.",
          "770:         dir = self.do_create()",
          "771:         try:",
          "772:             out = subprocess.check_output([\"icacls.exe\", dir], encoding=\"oem\").casefold()",
          "773:         finally:",
          "774:             os.rmdir(dir)",
          "776:         dir = dir.casefold()",
          "777:         users = set()",
          "778:         found_user = False",
          "779:         for line in out.strip().splitlines():",
          "780:             acl = None",
          "781:             # First line of result includes our directory",
          "782:             if line.startswith(dir):",
          "783:                 acl = line[len(dir):].strip()",
          "784:             elif line and line[:1].isspace():",
          "785:                 acl = line.strip()",
          "786:             if acl:",
          "787:                 users.add(acl.partition(\":\")[0])",
          "789:         self.assertNotIn(r\"BUILTIN\\Users\".casefold(), users)",
          "",
          "---------------"
        ],
        "Modules/posixmodule.c||Modules/posixmodule.c": [
          "File: Modules/posixmodule.c -> Modules/posixmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"pythread.h\"",
          "42: #include \"structmember.h\"",
          "43: #ifndef MS_WINDOWS",
          "44: #  include \"posixmodule.h\"",
          "45: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #ifdef MS_WINDOWS",
          "45: #  include <aclapi.h>             // SetEntriesInAcl",
          "46: #  include <sddl.h>               // SDDL_REVISION_1",
          "47: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4152: {",
          "4153:     int result;",
          "4155:     if (PySys_Audit(\"os.mkdir\", \"Oii\", path->object, mode,",
          "4156:                     dir_fd == DEFAULT_DIR_FD ? -1 : dir_fd) < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4159: #ifdef MS_WINDOWS",
          "4160:     int error = 0;",
          "4161:     int pathError = 0;",
          "4162:     SECURITY_ATTRIBUTES secAttr = { sizeof(secAttr) };",
          "4163:     SECURITY_ATTRIBUTES *pSecAttr = NULL;",
          "4164: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4160: #ifdef MS_WINDOWS",
          "4161:     Py_BEGIN_ALLOW_THREADS",
          "4163:     Py_END_ALLOW_THREADS",
          "4166:         return path_error(path);",
          "4167: #else",
          "4168:     Py_BEGIN_ALLOW_THREADS",
          "4169: #if HAVE_MKDIRAT",
          "",
          "[Removed Lines]",
          "4162:     result = CreateDirectoryW(path->wide, NULL);",
          "4165:     if (!result)",
          "",
          "[Added Lines]",
          "4173:     if (mode == 0700 /* 0o700 */) {",
          "4174:         ULONG sdSize;",
          "4175:         pSecAttr = &secAttr;",
          "4179:         if (!ConvertStringSecurityDescriptorToSecurityDescriptorW(",
          "4180:             L\"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\",",
          "4181:             SDDL_REVISION_1,",
          "4182:             &secAttr.lpSecurityDescriptor,",
          "4183:             &sdSize",
          "4184:         )) {",
          "4185:             error = GetLastError();",
          "4186:         }",
          "4187:     }",
          "4188:     if (!error) {",
          "4189:         result = CreateDirectoryW(path->wide, pSecAttr);",
          "4190:         if (secAttr.lpSecurityDescriptor &&",
          "4193:             LocalFree(secAttr.lpSecurityDescriptor)) {",
          "4194:             error = GetLastError();",
          "4195:         }",
          "4196:     }",
          "4199:     if (error) {",
          "4200:         return PyErr_SetFromWindowsErr(error);",
          "4201:     }",
          "4202:     if (!result) {",
          "4204:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}