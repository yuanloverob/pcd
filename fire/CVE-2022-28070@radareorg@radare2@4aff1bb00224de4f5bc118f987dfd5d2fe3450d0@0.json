{
  "cve_id": "CVE-2022-28070",
  "cve_desc": "A null pointer deference in __core_anal_fcn function in radare2 5.4.2 and 5.4.0.",
  "repo": "radareorg/radare2",
  "patch_hash": "4aff1bb00224de4f5bc118f987dfd5d2fe3450d0",
  "patch_info": {
    "commit_hash": "4aff1bb00224de4f5bc118f987dfd5d2fe3450d0",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/4aff1bb00224de4f5bc118f987dfd5d2fe3450d0",
    "files": [
      "libr/core/canal.c"
    ],
    "message": "Fix oobread crash in the analysis loop with corrupted ELFs (tests_64928) ##crash\n\nReported by giantbranch of NSFOCUS TIANJI Lab",
    "before_after_code_files": [
      "libr/core/canal.c||libr/core/canal.c"
    ]
  },
  "patch_diff": {
    "libr/core/canal.c||libr/core/canal.c": [
      "File: libr/core/canal.c -> libr/core/canal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "831:      const RList *syms = r_bin_get_symbols (core->bin);",
      "832:      ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");",
      "833:      r_list_foreach (syms, iter, sym) {",
      "835:        free (new_name);",
      "836:        new_name = r_str_newf (\"sym.%s\", sym->name);",
      "837:        break;",
      "",
      "[Removed Lines]",
      "834:       if ((sym->paddr + baddr) == fcn->addr && !strcmp (sym->type, R_BIN_TYPE_FUNC_STR)) {",
      "",
      "[Added Lines]",
      "834:       if (sym->type && (sym->paddr + baddr) == fcn->addr && !strcmp (sym->type, R_BIN_TYPE_FUNC_STR)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59a9dfb60acf8b5c0312061cffd9693fc9526053",
      "candidate_info": {
        "commit_hash": "59a9dfb60acf8b5c0312061cffd9693fc9526053",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053",
        "files": [
          "libr/core/anal_tp.c",
          "libr/core/cmd_anal.c",
          "libr/reg/rvalue.c"
        ],
        "message": "Fix uaf crash in aaft (tests_64927) ##crash\n\nReported by giantbranch of NSFOCUS TIANJI Lab",
        "before_after_code_files": [
          "libr/core/anal_tp.c||libr/core/anal_tp.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/reg/rvalue.c||libr/reg/rvalue.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/radareorg/radare2/pull/19343"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libr/core/anal_tp.c||libr/core/anal_tp.c": [
          "File: libr/core/anal_tp.c -> libr/core/anal_tp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   return;",
          "511:  }",
          "512:  char *pc = strdup (_pc);",
          "518:  r_cons_break_push (NULL, NULL);",
          "519:  r_list_sort (fcn->bbs, bb_cmpaddr); // TODO: The algorithm can be more accurate if blocks are followed by their jmp/fail, not just by address",
          "520:  r_list_foreach (fcn->bbs, it, bb) {",
          "521:   ut64 addr = bb->addr;",
          "522:   int i = 0;",
          "523:   r_reg_set_value (core->dbg->reg, r, addr);",
          "524:   while (1) {",
          "525:    if (r_cons_is_breaked ()) {",
          "",
          "[Removed Lines]",
          "513:  RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);",
          "514:  if (!r) {",
          "515:   free (buf);",
          "516:   return;",
          "517:  }",
          "",
          "[Added Lines]",
          "518:   RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);",
          "519:   if (!r) {",
          "520:    free (buf);",
          "521:    return;",
          "522:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:    }",
          "550:    sdb_num_set (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), loop_count + 1, 0);",
          "551:    if (r_anal_op_nonlinear (aop.type)) {   // skip the instr",
          "552:     r_reg_set_value (core->dbg->reg, r, addr + ret);",
          "553:    } else {",
          "554:     r_core_esil_step (core, UT64_MAX, NULL, NULL, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:     RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);",
          "553:     if (!r) {",
          "554:      free (buf);",
          "555:      return;",
          "556:     }",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4766:  int size = 0, i, type = R_REG_TYPE_GPR;",
          "4767:  int bits = (core->anal->bits & R_SYS_BITS_64)? 64: 32;",
          "4768:  int use_colors = r_config_get_i (core->config, \"scr.color\");",
          "4770:  const char *use_color;",
          "4771:  const char *name;",
          "4772:  char *arg;",
          "",
          "[Removed Lines]",
          "4769:  RRegItem *r;",
          "",
          "[Added Lines]",
          "4769:  RRegItem *r = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5098:   arg = strchr (str + 1, '=');",
          "5099:   if (arg) {",
          "5101:    char *ostr = r_str_trim_dup (str + 1);",
          "5102:    char *regname = r_str_trim_nc (ostr);",
          "5103:    r = r_reg_get (core->dbg->reg, regname, -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5101:    ut64 n = r_num_math (core->num, arg + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5113:    if (r) {",
          "5118:     r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);",
          "",
          "[Removed Lines]",
          "5116:     r_reg_set_value (core->dbg->reg, r,",
          "5117:       r_num_math (core->num, arg + 1));",
          "",
          "[Added Lines]",
          "5117:     r_reg_set_value (core->dbg->reg, r, n);",
          "",
          "---------------"
        ],
        "libr/reg/rvalue.c||libr/reg/rvalue.c": [
          "File: libr/reg/rvalue.c -> libr/reg/rvalue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: }",
          "143: R_API bool r_reg_set_value(RReg *reg, RRegItem *item, ut64 value) {",
          "144:  ut8 bytes[12];",
          "145:  ut8 *src = bytes;",
          "148:  if (r_reg_is_readonly (reg, item)) {",
          "149:   return true;",
          "",
          "[Removed Lines]",
          "146:  r_return_val_if_fail (reg && item, false);",
          "",
          "[Added Lines]",
          "144:  r_return_val_if_fail (reg && item, false);",
          "",
          "---------------"
        ]
      }
    }
  ]
}