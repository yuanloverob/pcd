{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c73823095d2a6a81244c0a96b0df9d3697c7dc49",
      "candidate_info": {
        "commit_hash": "c73823095d2a6a81244c0a96b0df9d3697c7dc49",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/c73823095d2a6a81244c0a96b0df9d3697c7dc49",
        "files": [
          "components/bt/host/bluedroid/Kconfig.in"
        ],
        "message": "fix(ble/bluedroid): Update maximum BLE reconnection attempts configuration",
        "before_after_code_files": [
          "components/bt/host/bluedroid/Kconfig.in||components/bt/host/bluedroid/Kconfig.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/Kconfig.in||components/bt/host/bluedroid/Kconfig.in": [
          "File: components/bt/host/bluedroid/Kconfig.in -> components/bt/host/bluedroid/Kconfig.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: config BT_GATTC_CONNECT_RETRY_COUNT",
          "260:     int \"The number of attempts to reconnect if the connection establishment failed\"",
          "261:     depends on BT_GATTC_ENABLE",
          "263:     default 3",
          "264:     help",
          "265:         The number of attempts to reconnect if the connection establishment failed",
          "",
          "[Removed Lines]",
          "262:     range 0 7",
          "",
          "[Added Lines]",
          "262:     range 0 255",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e818c42e1c546523cdbd8383f92949bf43852f56",
      "candidate_info": {
        "commit_hash": "e818c42e1c546523cdbd8383f92949bf43852f56",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/e818c42e1c546523cdbd8383f92949bf43852f56",
        "files": [
          "components/nvs_flash/src/nvs_storage.cpp",
          "components/nvs_flash/src/nvs_storage.hpp"
        ],
        "message": "fix(nvs): added check and erase of mismatched BLOB_DATA on init",
        "before_after_code_files": [
          "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp",
          "components/nvs_flash/src/nvs_storage.hpp||components/nvs_flash/src/nvs_storage.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp": [
          "File: components/nvs_flash/src/nvs_storage.cpp -> components/nvs_flash/src/nvs_storage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #endif",
          "17: #endif // !ESP_PLATFORM",
          "19: namespace nvs",
          "20: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include \"esp_log.h\"",
          "20: #define TAG \"nvs_storage\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:             entry->nsIndex = item.nsIndex;",
          "50:             entry->chunkStart = item.blobIndex.chunkStart;",
          "51:             entry->chunkCount = item.blobIndex.chunkCount;",
          "53:             blobIdxList.push_back(entry);",
          "54:             itemIndex += item.span;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:             entry->dataSize = item.blobIndex.dataSize;",
          "56:             entry->observedDataSize = 0;",
          "57:             entry->observedChunkCount = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     return ESP_OK;",
          "59: }",
          "61: void Storage::eraseOrphanDataBlobs(TBlobIndexList& blobIdxList)",
          "62: {",
          "63:     for (auto it = mPageManager.begin(); it != mPageManager.end(); ++it) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: void Storage::eraseMismatchedBlobIndexes(TBlobIndexList& blobIdxList)",
          "74: {",
          "75:     for (auto it = mPageManager.begin(); it != mPageManager.end(); ++it) {",
          "76:         Page& p = *it;",
          "77:         size_t itemIndex = 0;",
          "78:         Item item;",
          "84:         while (p.findItem(Page::NS_ANY, ItemType::BLOB_DATA, nullptr, itemIndex, item) == ESP_OK) {",
          "86:             auto iter = std::find_if(blobIdxList.begin(),",
          "87:                     blobIdxList.end(),",
          "88:                     [=] (const BlobIndexNode& e) -> bool",
          "89:                     {return (strncmp(item.key, e.key, sizeof(e.key) - 1) == 0)",
          "90:                             && (item.nsIndex == e.nsIndex)",
          "91:                             && (item.chunkIndex >=  static_cast<uint8_t> (e.chunkStart))",
          "92:                             && (item.chunkIndex < static_cast<uint8_t> ((e.chunkStart == nvs::VerOffset::VER_0_OFFSET) ? nvs::VerOffset::VER_1_OFFSET : nvs::VerOffset::VER_ANY));});",
          "93:             if (iter != std::end(blobIdxList)) {",
          "95:                 iter->observedDataSize += item.varLength.dataSize;",
          "96:                 iter->observedChunkCount++;",
          "97:             }",
          "98:             itemIndex += item.span;",
          "99:         }",
          "100:     }",
          "102:     auto iter = blobIdxList.begin();",
          "103:     while (iter != blobIdxList.end())",
          "104:     {",
          "105:         if ( (iter->observedDataSize != iter->dataSize) || (iter->observedChunkCount != iter->chunkCount) )",
          "106:         {",
          "109:             for (auto it = mPageManager.begin(); it != mPageManager.end(); ++it) {",
          "111:                 if (it->state() == nvs::Page::PageState::CORRUPT",
          "112:                     || it->state() == nvs::Page::PageState::INVALID",
          "113:                     || it->state() == nvs::Page::PageState::UNINITIALIZED){",
          "114:                     continue;",
          "115:                 }",
          "117:                 Page& p = *it;",
          "118:                 if(p.eraseItem(iter->nsIndex, nvs::ItemType::BLOB_IDX, iter->key, 255, iter->chunkStart) == ESP_OK){",
          "119:                     break;",
          "120:                 }",
          "121:             }",
          "124:             auto tmp = iter;",
          "125:             ++iter;",
          "126:             blobIdxList.erase(tmp);",
          "127:             delete (nvs::Storage::BlobIndexNode*)tmp;",
          "128:         }",
          "129:         else",
          "130:         {",
          "132:             ++iter;",
          "133:         }",
          "134:     }",
          "135: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:         return ESP_ERR_NO_MEM;",
          "138:     }",
          "141:     eraseOrphanDataBlobs(blobIdxList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     eraseMismatchedBlobIndexes(blobIdxList);",
          "",
          "---------------"
        ],
        "components/nvs_flash/src/nvs_storage.hpp||components/nvs_flash/src/nvs_storage.hpp": [
          "File: components/nvs_flash/src/nvs_storage.hpp -> components/nvs_flash/src/nvs_storage.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             uint8_t nsIndex;",
          "49:             uint8_t chunkCount;",
          "50:             VerOffset chunkStart;",
          "51:     };",
          "53:     typedef intrusive_list<BlobIndexNode> TBlobIndexList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:             size_t dataSize;",
          "52:             size_t observedDataSize;",
          "53:             size_t observedChunkCount;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     esp_err_t populateBlobIndices(TBlobIndexList&);",
          "143:     void eraseOrphanDataBlobs(TBlobIndexList&);",
          "145:     void fillEntryInfo(Item &item, nvs_entry_info_t &info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     void eraseMismatchedBlobIndexes(TBlobIndexList&);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "871534b64b29d3464b77b6bbe6641419925f5a08",
      "candidate_info": {
        "commit_hash": "871534b64b29d3464b77b6bbe6641419925f5a08",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/871534b64b29d3464b77b6bbe6641419925f5a08",
        "files": [
          "components/nvs_flash/src/nvs_page.hpp",
          "components/nvs_flash/src/nvs_storage.cpp"
        ],
        "message": "fix(nvs): eraseMultiPageBlob to robustly delete all related BLOB_DATA records and respect VER_ANY",
        "before_after_code_files": [
          "components/nvs_flash/src/nvs_page.hpp||components/nvs_flash/src/nvs_page.hpp",
          "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/nvs_flash/src/nvs_page.hpp||components/nvs_flash/src/nvs_page.hpp": [
          "File: components/nvs_flash/src/nvs_page.hpp -> components/nvs_flash/src/nvs_page.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     esp_err_t findItem(uint8_t nsIndex, ItemType datatype, const char* key, size_t &itemIndex, Item& item, uint8_t chunkIdx = CHUNK_ANY, VerOffset chunkStart = VerOffset::VER_ANY);",
          "101:     template<typename T>",
          "102:     esp_err_t writeItem(uint8_t nsIndex, const char* key, const T& value)",
          "103:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     esp_err_t eraseEntryAndSpan(size_t index);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:     esp_err_t writeEntryData(const uint8_t* data, size_t size);",
          "193:     esp_err_t updateFirstUsedEntry(size_t index, size_t span);",
          "195:     static constexpr size_t getAlignmentForType(ItemType type)",
          "",
          "[Removed Lines]",
          "191:     esp_err_t eraseEntryAndSpan(size_t index);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp": [
          "File: components/nvs_flash/src/nvs_storage.cpp -> components/nvs_flash/src/nvs_storage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:     if (err != ESP_OK) {",
          "660:         return err;",
          "661:     }",
          "663:     err = findPage->eraseItem(nsIndex, ItemType::BLOB_IDX, key, Page::CHUNK_ANY, chunkStart);",
          "664:     if (err != ESP_OK) {",
          "665:         return err;",
          "666:     }",
          "674:     }",
          "690:     }",
          "692:     return ESP_OK;",
          "",
          "[Removed Lines]",
          "668:     uint8_t chunkCount = item.blobIndex.chunkCount;",
          "670:     if (chunkStart == VerOffset::VER_ANY) {",
          "671:         chunkStart = item.blobIndex.chunkStart;",
          "672:     } else {",
          "673:         NVS_ASSERT_OR_RETURN(chunkStart == item.blobIndex.chunkStart, ESP_FAIL);",
          "677:     for (uint8_t chunkNum = 0; chunkNum < chunkCount; chunkNum++) {",
          "678:         err = findItem(nsIndex, ItemType::BLOB_DATA, key, findPage, item, static_cast<uint8_t> (chunkStart) + chunkNum);",
          "680:         if (err != ESP_OK && err != ESP_ERR_NVS_NOT_FOUND) {",
          "681:             return err;",
          "682:         } else if (err == ESP_ERR_NVS_NOT_FOUND) {",
          "683:             continue; // Keep erasing other chunks",
          "684:         }",
          "685:         err = findPage->eraseItem(nsIndex, ItemType::BLOB_DATA, key, static_cast<uint8_t> (chunkStart) + chunkNum);",
          "686:         if (err != ESP_OK) {",
          "687:             return err;",
          "688:         }",
          "",
          "[Added Lines]",
          "671:     if(chunkStart == VerOffset::VER_ANY)",
          "672:     {",
          "673:         err = findItem(nsIndex, ItemType::BLOB_IDX, key, findPage, item, Page::CHUNK_ANY, chunkStart);",
          "674:         if (err == ESP_OK) {",
          "675:             err = findPage->eraseItem(nsIndex, ItemType::BLOB_IDX, key, Page::CHUNK_ANY, chunkStart);",
          "676:             if (err != ESP_OK) {",
          "677:                 return err;",
          "678:             }",
          "679:         } else if (err != ESP_ERR_NVS_NOT_FOUND) {",
          "680:             return err;",
          "681:         }",
          "685:     uint8_t minChunkIndex = (uint8_t) VerOffset::VER_0_OFFSET;",
          "686:     uint8_t maxChunkIndex = (uint8_t) VerOffset::VER_ANY;",
          "688:     if(chunkStart == VerOffset::VER_0_OFFSET) {",
          "689:         maxChunkIndex = (uint8_t) VerOffset::VER_1_OFFSET;",
          "690:     } else if (chunkStart == VerOffset::VER_1_OFFSET) {",
          "691:         minChunkIndex = (uint8_t) VerOffset::VER_1_OFFSET;",
          "692:     }",
          "694:     for (auto it = std::begin(mPageManager); it != std::end(mPageManager); ++it) {",
          "695:         size_t itemIndex = 0;",
          "696:         do {",
          "697:             err = it->findItem(nsIndex, ItemType::BLOB_DATA, key, itemIndex, item);",
          "698:             if (err == ESP_ERR_NVS_NOT_FOUND) {",
          "699:                 break;",
          "700:             } else if (err == ESP_OK) {",
          "702:                 if((item.chunkIndex >= minChunkIndex) && (item.chunkIndex < maxChunkIndex)) {",
          "703:                     err = it->eraseEntryAndSpan(itemIndex);",
          "704:                 }",
          "707:                 itemIndex += item.span;",
          "708:             }",
          "709:             if(err != ESP_OK) {",
          "710:                 return err;",
          "711:             }",
          "712:         } while (err == ESP_OK && itemIndex < Page::ENTRY_COUNT);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "285bffbffdcf1eeab6e525b4123f6ea5b31415f7",
      "candidate_info": {
        "commit_hash": "285bffbffdcf1eeab6e525b4123f6ea5b31415f7",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/285bffbffdcf1eeab6e525b4123f6ea5b31415f7",
        "files": [
          "components/bt/host/bluedroid/btc/core/btc_main.c",
          "components/bt/host/bluedroid/btc/include/btc/btc_main.h",
          "components/bt/host/bluedroid/stack/btm/btm_ble.c",
          "components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c",
          "components/bt/host/bluedroid/stack/btm/btm_main.c"
        ],
        "message": "feat(bt/bluedroid): Add ext adv and privacy status check",
        "before_after_code_files": [
          "components/bt/host/bluedroid/btc/core/btc_main.c||components/bt/host/bluedroid/btc/core/btc_main.c",
          "components/bt/host/bluedroid/btc/include/btc/btc_main.h||components/bt/host/bluedroid/btc/include/btc/btc_main.h",
          "components/bt/host/bluedroid/stack/btm/btm_ble.c||components/bt/host/bluedroid/stack/btm/btm_ble.c",
          "components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c||components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c",
          "components/bt/host/bluedroid/stack/btm/btm_main.c||components/bt/host/bluedroid/stack/btm/btm_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/host/bluedroid/btc/core/btc_main.c||components/bt/host/bluedroid/btc/core/btc_main.c": [
          "File: components/bt/host/bluedroid/btc/core/btc_main.c -> components/bt/host/bluedroid/btc/core/btc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     }",
          "143:     #if (SMP_INCLUDED == TRUE)",
          "145:     if (btc_storage_get_num_ble_bond_devices()) {",
          "146:         status |= BIT(BTC_BLE_STATUS_BOND);",
          "147:     }",
          "148:     #endif",
          "149:     #endif",
          "155:     }",
          "158:     extern uint8_t btm_acl_active_count(void);",
          "",
          "[Removed Lines]",
          "152:     extern uint8_t btdm_sec_dev_active_count(void);",
          "153:     if (btdm_sec_dev_active_count()) {",
          "154:         status |= BIT(BTC_BLE_STATUS_DEV);",
          "",
          "[Added Lines]",
          "145:     extern uint8_t btm_ble_sec_dev_active_count(void);",
          "146:     if (btm_ble_sec_dev_active_count()) {",
          "147:         status |= BIT(BTC_BLE_STATUS_KEYS);",
          "148:     }",
          "156:     #if (BLE_PRIVACY_SPT == TRUE)",
          "158:     extern uint8_t btm_ble_privacy_is_enabled(void);",
          "159:     if (btm_ble_privacy_is_enabled()) {",
          "160:         status |= BIT(BTC_BLE_STATUS_PRIVACY);",
          "161:     }",
          "162:     #endif",
          "165:     #if (BLE_50_FEATURE_SUPPORT == TRUE)",
          "167:     extern uint8_t btm_ble_ext_adv_active_count(void);",
          "168:     if (btm_ble_ext_adv_active_count()) {",
          "169:         status |= BIT(BTC_BLE_STATUS_EXT_ADV);",
          "171:     #endif",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/btc/include/btc/btc_main.h||components/bt/host/bluedroid/btc/include/btc/btc_main.h": [
          "File: components/bt/host/bluedroid/btc/include/btc/btc_main.h -> components/bt/host/bluedroid/btc/include/btc/btc_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define BTC_BLE_STATUS_IDLE 0",
          "32: typedef enum {",
          "33:     BTC_BLE_STATUS_ADV = 0,     // Advertising exist",
          "34:     BTC_BLE_STATUS_SCAN,        // Scanning exist",
          "35:     BTC_BLE_STATUS_CONN,        // Connection exist",
          "37:     BTC_BLE_STATUS_BOND,        // Bond info exist",
          "38:     BTC_BLE_STATUS_GATTC_CACHE, // GATTC cache exist",
          "39:     BTC_BLE_STATUS_GATTC_APP,   // GATTC application exist",
          "40:     BTC_BLE_STATUS_GATTS_SRVC,  // GATTS service exist",
          "41: } tBTC_BLE_STATUS;",
          "43: future_t **btc_main_get_future_p(btc_main_future_type_t type);",
          "",
          "[Removed Lines]",
          "36:     BTC_BLE_STATUS_DEV,         // Device record exist",
          "",
          "[Added Lines]",
          "34:     BTC_BLE_STATUS_EXT_ADV,     // Extended advertising exist",
          "37:     BTC_BLE_STATUS_KEYS,        // Device keys record exist",
          "42:     BTC_BLE_STATUS_PRIVACY,     // Privacy enabled",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/stack/btm/btm_ble.c||components/bt/host/bluedroid/stack/btm/btm_ble.c": [
          "File: components/bt/host/bluedroid/stack/btm/btm_ble.c -> components/bt/host/bluedroid/stack/btm/btm_ble.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2931:     return count;",
          "2932: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2934: #if (SMP_INCLUDED == TRUE)",
          "2935: uint8_t btm_ble_sec_dev_active_count(void)",
          "2936: {",
          "2937:     tBTM_SEC_DEV_REC *p_dev_rec = NULL;",
          "2938:     list_node_t *p_node = NULL;",
          "2939:     uint8_t count = 0;",
          "2942:     for (p_node = list_begin(btm_cb.p_sec_dev_rec_list); p_node; p_node = list_next(p_node)) {",
          "2943:         p_dev_rec = list_node(p_node);",
          "2944:         if (p_dev_rec && (p_dev_rec->sec_flags & BTM_SEC_IN_USE) && (p_dev_rec->ble.key_type != BTM_LE_KEY_NONE)) {",
          "2945:             count++;",
          "2946:         }",
          "2947:     }",
          "2949:     return count;",
          "2950: }",
          "2951: #endif",
          "2953: #if (BLE_PRIVACY_SPT == TRUE)",
          "2954: uint8_t btm_ble_privacy_is_enabled(void)",
          "2955: {",
          "2956:     tBTM_BLE_CB *p_cb = &btm_cb.ble_ctr_cb;",
          "2957:     return (p_cb->privacy_mode != BTM_PRIVACY_NONE);",
          "2958: }",
          "2959: #endif",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c||components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c": [
          "File: components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c -> components/bt/host/bluedroid/stack/btm/btm_ble_5_gap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: typedef struct {",
          "35:     uint16_t ter_con_handle;",
          "36:     bool invalid;",
          "37:     UINT8 instance;",
          "38:     int duration;",
          "39:     int max_events;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     bool enabled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545:             for (uint8_t i = 0; i < MAX_BLE_ADV_INSTANCE; i++)",
          "546:             {",
          "547:                 adv_record[i].invalid = false;",
          "548:                 adv_record[i].instance = INVALID_VALUE;",
          "549:                 adv_record[i].duration = INVALID_VALUE;",
          "550:                 adv_record[i].max_events = INVALID_VALUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:                 adv_record[i].enabled = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:             {",
          "556:                 uint8_t index = ext_adv[i].instance;",
          "557:                 adv_record[index].invalid = false;",
          "558:                 adv_record[index].instance = INVALID_VALUE;",
          "559:                 adv_record[index].duration = INVALID_VALUE;",
          "560:                 adv_record[index].max_events = INVALID_VALUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:                 adv_record[index].enabled = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568:         {",
          "569:             uint8_t index = ext_adv[i].instance;",
          "570:             adv_record[index].invalid = true;",
          "571:             adv_record[index].instance = ext_adv[i].instance;",
          "572:             adv_record[index].duration = ext_adv[i].duration;",
          "573:             adv_record[index].max_events = ext_adv[i].max_events;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:             adv_record[index].enabled = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1183:         adv_record[params->adv_handle].ter_con_handle = INVALID_VALUE;",
          "1184:         adv_record[params->adv_handle].invalid = false;",
          "1185:     }",
          "1187:     memcpy(&cb_params.adv_term, params, sizeof(tBTM_BLE_ADV_TERMINAT));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190:     adv_record[params->adv_handle].enabled = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1299: }",
          "1301: #endif // #if (BLE_50_FEATURE_SUPPORT == TRUE)",
          "1303: #if (BLE_FEAT_PERIODIC_ADV_SYNC_TRANSFER == TRUE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306: uint8_t btm_ble_ext_adv_active_count(void)",
          "1307: {",
          "1308:     uint8_t count = 0;",
          "1310:     for (uint8_t i = 0; i < MAX_BLE_ADV_INSTANCE; i++) {",
          "1311:         if (adv_record[i].enabled == true) {",
          "1312:             count++;",
          "1313:         }",
          "1314:     }",
          "1316:     return count;",
          "1317: }",
          "",
          "---------------"
        ],
        "components/bt/host/bluedroid/stack/btm/btm_main.c||components/bt/host/bluedroid/stack/btm/btm_main.c": [
          "File: components/bt/host/bluedroid/stack/btm/btm_main.c -> components/bt/host/bluedroid/stack/btm/btm_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     return count;",
          "135: }",
          "",
          "[Removed Lines]",
          "137: uint8_t btdm_sec_dev_active_count(void)",
          "138: {",
          "139:     tBTM_SEC_DEV_REC *p_dev_rec = NULL;",
          "140:     list_node_t *p_node = NULL;",
          "141:     uint8_t count = 0;",
          "144:     for (p_node = list_begin(btm_cb.p_sec_dev_rec_list); p_node; p_node = list_next(p_node)) {",
          "145:         p_dev_rec = list_node(p_node);",
          "146:         if (p_dev_rec && (p_dev_rec->sec_flags & BTM_SEC_IN_USE)) {",
          "147:             count++;",
          "148:         }",
          "149:     }",
          "151:     return count;",
          "152: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fac48f089f0882d1db6e6baa799d6ad5cd45fef",
      "candidate_info": {
        "commit_hash": "9fac48f089f0882d1db6e6baa799d6ad5cd45fef",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/9fac48f089f0882d1db6e6baa799d6ad5cd45fef",
        "files": [
          "components/bt/controller/esp32/bt.c",
          "components/bt/controller/lib_esp32"
        ],
        "message": "change(bt/bluedroid): Redirect app functions in controller based on the bluetooth mode",
        "before_after_code_files": [
          "components/bt/controller/esp32/bt.c||components/bt/controller/esp32/bt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/controller/esp32/bt.c||components/bt/controller/esp32/bt.c": [
          "File: components/bt/controller/esp32/bt.c -> components/bt/controller/esp32/bt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: } while(0)",
          "90: #define OSI_FUNCS_TIME_BLOCKING  0xffffffff",
          "92: #define OSI_MAGIC_VALUE          0xFADEBEAD",
          "",
          "[Removed Lines]",
          "91: #define OSI_VERSION              0x00010004",
          "",
          "[Added Lines]",
          "91: #define OSI_VERSION              0x00010005",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     void (*_interrupt_l3_restore)(void);",
          "177:     void *(* _customer_queue_create)(uint32_t queue_len, uint32_t item_size);",
          "178:     int (* _coex_version_get)(unsigned int *major, unsigned int *minor, unsigned int *patch);",
          "179:     uint32_t _magic;",
          "180: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:     void (* _patch_apply)(void);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257: extern uint32_t _btdm_data_start;",
          "258: extern uint32_t _btdm_data_end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: extern void config_bt_funcs_reset(void);",
          "262: extern void config_ble_funcs_reset(void);",
          "263: extern void config_btdm_funcs_reset(void);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329: static void IRAM_ATTR interrupt_l3_disable(void);",
          "330: static void IRAM_ATTR interrupt_l3_restore(void);",
          "331: static void bt_controller_deinit_internal(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: static void patch_apply(void);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416:     ._customer_queue_create = NULL,",
          "418:     ._coex_version_get = coex_version_get_wrapper,",
          "419:     ._magic = OSI_MAGIC_VALUE,",
          "420: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425:     ._patch_apply = patch_apply,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1698:     return;",
          "1699: }",
          "1702: esp_err_t esp_bt_controller_enable(esp_bt_mode_t mode)",
          "1703: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1708: static void patch_apply(void)",
          "1709: {",
          "1710:     config_btdm_funcs_reset();",
          "1712: #ifndef CONFIG_BTDM_CTRL_MODE_BLE_ONLY",
          "1713:     config_bt_funcs_reset();",
          "1714: #endif",
          "1716: #ifndef CONFIG_BTDM_CTRL_MODE_BR_EDR_ONLY",
          "1717:     config_ble_funcs_reset();",
          "1718: #endif",
          "1719: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}