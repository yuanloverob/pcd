{
  "cve_id": "CVE-2020-26117",
  "cve_desc": "In rfb/CSecurityTLS.cxx and rfb/CSecurityTLS.java in TigerVNC before 1.11.0, viewers mishandle TLS certificate exceptions. They store the certificates as authorities, meaning that the owner of a certificate could impersonate any server after a client had added an exception.",
  "repo": "TigerVNC/tigervnc",
  "patch_hash": "b30f10c681ec87720cff85d490f67098568a9cba",
  "patch_info": {
    "commit_hash": "b30f10c681ec87720cff85d490f67098568a9cba",
    "repo": "TigerVNC/tigervnc",
    "commit_url": "https://github.com/TigerVNC/tigervnc/commit/b30f10c681ec87720cff85d490f67098568a9cba",
    "files": [
      "common/rfb/CSecurityTLS.cxx"
    ],
    "message": "Properly store certificate exceptions\n\nThe previous method stored the certificates as authorities, meaning that\nthe owner of that certificate could impersonate any server it wanted\nafter a client had added an exception.\n\nHandle this more properly by only storing exceptions for specific\nhostname/certificate combinations, the same way browsers or SSH does\nthings.",
    "before_after_code_files": [
      "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx"
    ]
  },
  "patch_diff": {
    "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx": [
      "File: common/rfb/CSecurityTLS.cxx -> common/rfb/CSecurityTLS.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "250:     if (*cafile && gnutls_certificate_set_x509_trust_file(cert_cred,cafile,GNUTLS_X509_FMT_PEM) < 0)",
      "251:       throw AuthFailureException(\"load of CA cert failed\");",
      "269:     if (*crlfile && gnutls_certificate_set_x509_crl_file(cert_cred,crlfile,GNUTLS_X509_FMT_PEM) < 0)",
      "270:       throw AuthFailureException(\"load of CRL failed\");",
      "",
      "[Removed Lines]",
      "254:     char *homeDir = NULL;",
      "255:     int err;",
      "256:     if (getvnchomedir(&homeDir) == -1)",
      "257:       vlog.error(\"Could not obtain VNC home directory path\");",
      "258:     else {",
      "259:       CharArray caSave(strlen(homeDir) + 19 + 1);",
      "260:       sprintf(caSave.buf, \"%sx509_savedcerts.pem\", homeDir);",
      "261:       delete [] homeDir;",
      "263:       err = gnutls_certificate_set_x509_trust_file(cert_cred, caSave.buf,",
      "264:                                                    GNUTLS_X509_FMT_PEM);",
      "265:       if (err < 0)",
      "266:         vlog.debug(\"Failed to load saved server certificates from %s\", caSave.buf);",
      "267:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "290:   const gnutls_datum_t *cert_list;",
      "291:   unsigned int cert_list_size = 0;",
      "292:   int err;",
      "293:   gnutls_datum_t info;",
      "295:   if (anon)",
      "296:     return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "278:   char *homeDir;",
      "280:   size_t len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "333:     throw AuthFailureException(\"decoding of certificate failed\");",
      "335:   if (gnutls_x509_crt_check_hostname(crt, client->getServerName()) == 0) {",
      "337:     vlog.debug(\"hostname mismatch\");",
      "343:   }",
      "345:   if (status == 0) {",
      "",
      "[Removed Lines]",
      "336:     char buf[255];",
      "338:     snprintf(buf, sizeof(buf), \"Hostname (%s) does not match any certificate, \"",
      "339:           \"do you want to continue?\", client->getServerName());",
      "340:     buf[sizeof(buf) - 1] = '\\0';",
      "341:     if (!msg->showMsgBox(UserMsgBox::M_YESNO, \"hostname mismatch\", buf))",
      "342:       throw AuthFailureException(\"hostname mismatch\");",
      "",
      "[Added Lines]",
      "323:     CharArray text;",
      "325:     text.format(\"Hostname (%s) does not match the server certificate, \"",
      "326:                 \"do you want to continue?\", client->getServerName());",
      "327:     if (!msg->showMsgBox(UserMsgBox::M_YESNO,",
      "328:                          \"Certificate hostname mismatch\", text.buf))",
      "329:       throw AuthFailureException(\"Certificate hostname mismatch\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "364:     throw AuthFailureException(\"Invalid status of server certificate verification\");",
      "365:   }",
      "381:   }",
      "412:   }",
      "444:   }",
      "448:   gnutls_x509_crt_deinit(crt);",
      "",
      "[Removed Lines]",
      "367:   vlog.debug(\"Saved server certificates don't match\");",
      "369:   if (gnutls_x509_crt_print(crt, GNUTLS_CRT_PRINT_ONELINE, &info)) {",
      "375: #if WIN32",
      "376:     free(info.data);",
      "377: #else",
      "378:     gnutls_free(info.data);",
      "379: #endif",
      "380:     throw AuthFailureException(\"Could not find certificate to display\");",
      "383:   size_t out_size = 0;",
      "384:   char *out_buf = NULL;",
      "385:   char *certinfo = NULL;",
      "386:   int len = 0;",
      "388:   vlog.debug(\"certificate issuer unknown\");",
      "390:   len = snprintf(NULL, 0, \"This certificate has been signed by an unknown \"",
      "391:                           \"authority:\\n\\n%s\\n\\nDo you want to save it and \"",
      "392:                           \"continue?\\n \", info.data);",
      "393:   if (len < 0)",
      "394:     throw AuthFailureException(\"certificate decoding error\");",
      "396:   vlog.debug(\"%s\", info.data);",
      "398:   certinfo = new char[len];",
      "400:   snprintf(certinfo, len, \"This certificate has been signed by an unknown \"",
      "401:                           \"authority:\\n\\n%s\\n\\nDo you want to save it and \"",
      "402:                           \"continue? \", info.data);",
      "404:   for (int i = 0; i < len - 1; i++)",
      "405:     if (certinfo[i] == ',' && certinfo[i + 1] == ' ')",
      "406:       certinfo[i] = '\\n';",
      "408:   if (!msg->showMsgBox(UserMsgBox::M_YESNO, \"certificate issuer unknown\",",
      "409:          certinfo)) {",
      "410:     delete [] certinfo;",
      "411:     throw AuthFailureException(\"certificate issuer unknown\");",
      "414:   delete [] certinfo;",
      "416:   if (gnutls_x509_crt_export(crt, GNUTLS_X509_FMT_PEM, NULL, &out_size)",
      "417:       != GNUTLS_E_SHORT_MEMORY_BUFFER)",
      "418:     throw AuthFailureException(\"certificate issuer unknown, and certificate \"",
      "419:                                \"export failed\");",
      "422:   out_buf =  new char[out_size];",
      "424:   if (gnutls_x509_crt_export(crt, GNUTLS_X509_FMT_PEM, out_buf, &out_size) < 0)",
      "425:     throw AuthFailureException(\"certificate issuer unknown, and certificate \"",
      "426:                                \"export failed\");",
      "428:   char *homeDir = NULL;",
      "429:   if (getvnchomedir(&homeDir) == -1)",
      "430:     vlog.error(\"Could not obtain VNC home directory path\");",
      "431:   else {",
      "432:     FILE *f;",
      "433:     CharArray caSave(strlen(homeDir) + 1 + 19);",
      "434:     sprintf(caSave.buf, \"%sx509_savedcerts.pem\", homeDir);",
      "435:     delete [] homeDir;",
      "436:     f = fopen(caSave.buf, \"a+\");",
      "437:     if (!f)",
      "438:       msg->showMsgBox(UserMsgBox::M_OK, \"certificate save failed\",",
      "439:                       \"Could not save the certificate\");",
      "440:     else {",
      "441:       fprintf(f, \"%s\\n\", out_buf);",
      "442:       fclose(f);",
      "443:     }",
      "446:   delete [] out_buf;",
      "",
      "[Added Lines]",
      "356:   homeDir = NULL;",
      "357:   if (getvnchomedir(&homeDir) == -1) {",
      "358:     throw AuthFailureException(\"Could not obtain VNC home directory \"",
      "359:                                \"path for known hosts storage\");",
      "362:   CharArray dbPath(strlen(homeDir) + 16 + 1);",
      "363:   sprintf(dbPath.buf, \"%sx509_known_hosts\", homeDir);",
      "364:   delete [] homeDir;",
      "366:   err = gnutls_verify_stored_pubkey(dbPath.buf, NULL,",
      "367:                                     client->getServerName(), NULL,",
      "368:                                     GNUTLS_CRT_X509, &cert_list[0], 0);",
      "371:   if (err == GNUTLS_E_SUCCESS) {",
      "372:     vlog.debug(\"Server certificate found in known hosts file\");",
      "373:     gnutls_x509_crt_deinit(crt);",
      "374:     return;",
      "377:   if ((err != GNUTLS_E_NO_CERTIFICATE_FOUND) &&",
      "378:       (err != GNUTLS_E_CERTIFICATE_KEY_MISMATCH)) {",
      "379:     throw AuthFailureException(\"Could not load known hosts database\");",
      "380:   }",
      "382:   if (gnutls_x509_crt_print(crt, GNUTLS_CRT_PRINT_ONELINE, &info))",
      "383:     throw AuthFailureException(\"Could not find certificate to display\");",
      "385:   len = strlen((char*)info.data);",
      "386:   for (size_t i = 0; i < len - 1; i++) {",
      "387:     if (info.data[i] == ',' && info.data[i + 1] == ' ')",
      "388:       info.data[i] = '\\n';",
      "389:   }",
      "392:   if (err == GNUTLS_E_NO_CERTIFICATE_FOUND) {",
      "393:     CharArray text;",
      "395:     vlog.debug(\"Server host not previously known\");",
      "396:     vlog.debug(\"%s\", info.data);",
      "398:     text.format(\"This certificate has been signed by an unknown \"",
      "399:                 \"authority:\\n\\n%s\\n\\nSomeone could be trying to \"",
      "400:                 \"impersonate the site and you should not \"",
      "401:                 \"continue.\\n\\nDo you want to make an exception \"",
      "402:                 \"for this server?\", info.data);",
      "404:     if (!msg->showMsgBox(UserMsgBox::M_YESNO,",
      "405:                          \"Unknown certificate issuer\",",
      "406:                          text.buf))",
      "407:       throw AuthFailureException(\"Unknown certificate issuer\");",
      "408:   } else if (err == GNUTLS_E_CERTIFICATE_KEY_MISMATCH) {",
      "409:     CharArray text;",
      "411:     vlog.debug(\"Server host key mismatch\");",
      "412:     vlog.debug(\"%s\", info.data);",
      "414:     text.format(\"This host is previously known with a different \"",
      "415:                 \"certificate, and the new certificate has been \"",
      "416:                 \"signed by an unknown authority:\\n\\n%s\\n\\nSomeone \"",
      "417:                 \"could be trying to impersonate the site and you \"",
      "418:                 \"should not continue.\\n\\nDo you want to make an \"",
      "419:                 \"exception for this server?\", info.data);",
      "421:     if (!msg->showMsgBox(UserMsgBox::M_YESNO,",
      "422:                          \"Unexpected server certificate\",",
      "423:                          text.buf))",
      "424:       throw AuthFailureException(\"Unexpected server certificate\");",
      "427:   if (gnutls_store_pubkey(dbPath.buf, NULL, client->getServerName(),",
      "428:                           NULL, GNUTLS_CRT_X509, &cert_list[0], 0, 0))",
      "429:     vlog.error(\"Failed to store server certificate to known hosts database\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7399eab79a4365434d26494fa1628ce1eb91562b",
      "candidate_info": {
        "commit_hash": "7399eab79a4365434d26494fa1628ce1eb91562b",
        "repo": "TigerVNC/tigervnc",
        "commit_url": "https://github.com/TigerVNC/tigervnc/commit/7399eab79a4365434d26494fa1628ce1eb91562b",
        "files": [
          "common/rfb/CSecurityTLS.cxx"
        ],
        "message": "Properly store certificate exceptions\n\nThe previous method stored the certificates as authorities, meaning that\nthe owner of that certificate could impersonate any server it wanted\nafter a client had added an exception.\n\nHandle this more properly by only storing exceptions for specific\nhostname/certificate combinations, the same way browsers or SSH does\nthings.\n\n(cherry picked from commit b30f10c681ec87720cff85d490f67098568a9cba)",
        "before_after_code_files": [
          "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx"
          ],
          "candidate": [
            "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx"
          ]
        }
      },
      "candidate_diff": {
        "common/rfb/CSecurityTLS.cxx||common/rfb/CSecurityTLS.cxx": [
          "File: common/rfb/CSecurityTLS.cxx -> common/rfb/CSecurityTLS.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:     if (*cafile && gnutls_certificate_set_x509_trust_file(cert_cred,cafile,GNUTLS_X509_FMT_PEM) < 0)",
          "251:       throw AuthFailureException(\"load of CA cert failed\");",
          "269:     if (*crlfile && gnutls_certificate_set_x509_crl_file(cert_cred,crlfile,GNUTLS_X509_FMT_PEM) < 0)",
          "270:       throw AuthFailureException(\"load of CRL failed\");",
          "",
          "[Removed Lines]",
          "254:     char *homeDir = NULL;",
          "255:     int err;",
          "256:     if (getvnchomedir(&homeDir) == -1)",
          "257:       vlog.error(\"Could not obtain VNC home directory path\");",
          "258:     else {",
          "259:       CharArray caSave(strlen(homeDir) + 19 + 1);",
          "260:       sprintf(caSave.buf, \"%sx509_savedcerts.pem\", homeDir);",
          "261:       delete [] homeDir;",
          "263:       err = gnutls_certificate_set_x509_trust_file(cert_cred, caSave.buf,",
          "264:                                                    GNUTLS_X509_FMT_PEM);",
          "265:       if (err < 0)",
          "266:         vlog.debug(\"Failed to load saved server certificates from %s\", caSave.buf);",
          "267:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:   const gnutls_datum_t *cert_list;",
          "291:   unsigned int cert_list_size = 0;",
          "292:   int err;",
          "293:   gnutls_datum_t info;",
          "295:   if (anon)",
          "296:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   char *homeDir;",
          "280:   size_t len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:     throw AuthFailureException(\"decoding of certificate failed\");",
          "335:   if (gnutls_x509_crt_check_hostname(crt, client->getServerName()) == 0) {",
          "337:     vlog.debug(\"hostname mismatch\");",
          "343:   }",
          "345:   if (status == 0) {",
          "",
          "[Removed Lines]",
          "336:     char buf[255];",
          "338:     snprintf(buf, sizeof(buf), \"Hostname (%s) does not match any certificate, \"",
          "339:           \"do you want to continue?\", client->getServerName());",
          "340:     buf[sizeof(buf) - 1] = '\\0';",
          "341:     if (!msg->showMsgBox(UserMsgBox::M_YESNO, \"hostname mismatch\", buf))",
          "342:       throw AuthFailureException(\"hostname mismatch\");",
          "",
          "[Added Lines]",
          "323:     CharArray text;",
          "325:     text.format(\"Hostname (%s) does not match the server certificate, \"",
          "326:                 \"do you want to continue?\", client->getServerName());",
          "327:     if (!msg->showMsgBox(UserMsgBox::M_YESNO,",
          "328:                          \"Certificate hostname mismatch\", text.buf))",
          "329:       throw AuthFailureException(\"Certificate hostname mismatch\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:     throw AuthFailureException(\"Invalid status of server certificate verification\");",
          "365:   }",
          "381:   }",
          "412:   }",
          "444:   }",
          "448:   gnutls_x509_crt_deinit(crt);",
          "",
          "[Removed Lines]",
          "367:   vlog.debug(\"Saved server certificates don't match\");",
          "369:   if (gnutls_x509_crt_print(crt, GNUTLS_CRT_PRINT_ONELINE, &info)) {",
          "375: #if WIN32",
          "376:     free(info.data);",
          "377: #else",
          "378:     gnutls_free(info.data);",
          "379: #endif",
          "380:     throw AuthFailureException(\"Could not find certificate to display\");",
          "383:   size_t out_size = 0;",
          "384:   char *out_buf = NULL;",
          "385:   char *certinfo = NULL;",
          "386:   int len = 0;",
          "388:   vlog.debug(\"certificate issuer unknown\");",
          "390:   len = snprintf(NULL, 0, \"This certificate has been signed by an unknown \"",
          "391:                           \"authority:\\n\\n%s\\n\\nDo you want to save it and \"",
          "392:                           \"continue?\\n \", info.data);",
          "393:   if (len < 0)",
          "394:     throw AuthFailureException(\"certificate decoding error\");",
          "396:   vlog.debug(\"%s\", info.data);",
          "398:   certinfo = new char[len];",
          "400:   snprintf(certinfo, len, \"This certificate has been signed by an unknown \"",
          "401:                           \"authority:\\n\\n%s\\n\\nDo you want to save it and \"",
          "402:                           \"continue? \", info.data);",
          "404:   for (int i = 0; i < len - 1; i++)",
          "405:     if (certinfo[i] == ',' && certinfo[i + 1] == ' ')",
          "406:       certinfo[i] = '\\n';",
          "408:   if (!msg->showMsgBox(UserMsgBox::M_YESNO, \"certificate issuer unknown\",",
          "409:          certinfo)) {",
          "410:     delete [] certinfo;",
          "411:     throw AuthFailureException(\"certificate issuer unknown\");",
          "414:   delete [] certinfo;",
          "416:   if (gnutls_x509_crt_export(crt, GNUTLS_X509_FMT_PEM, NULL, &out_size)",
          "417:       != GNUTLS_E_SHORT_MEMORY_BUFFER)",
          "418:     throw AuthFailureException(\"certificate issuer unknown, and certificate \"",
          "419:                                \"export failed\");",
          "422:   out_buf =  new char[out_size];",
          "424:   if (gnutls_x509_crt_export(crt, GNUTLS_X509_FMT_PEM, out_buf, &out_size) < 0)",
          "425:     throw AuthFailureException(\"certificate issuer unknown, and certificate \"",
          "426:                                \"export failed\");",
          "428:   char *homeDir = NULL;",
          "429:   if (getvnchomedir(&homeDir) == -1)",
          "430:     vlog.error(\"Could not obtain VNC home directory path\");",
          "431:   else {",
          "432:     FILE *f;",
          "433:     CharArray caSave(strlen(homeDir) + 1 + 19);",
          "434:     sprintf(caSave.buf, \"%sx509_savedcerts.pem\", homeDir);",
          "435:     delete [] homeDir;",
          "436:     f = fopen(caSave.buf, \"a+\");",
          "437:     if (!f)",
          "438:       msg->showMsgBox(UserMsgBox::M_OK, \"certificate save failed\",",
          "439:                       \"Could not save the certificate\");",
          "440:     else {",
          "441:       fprintf(f, \"%s\\n\", out_buf);",
          "442:       fclose(f);",
          "443:     }",
          "446:   delete [] out_buf;",
          "",
          "[Added Lines]",
          "356:   homeDir = NULL;",
          "357:   if (getvnchomedir(&homeDir) == -1) {",
          "358:     throw AuthFailureException(\"Could not obtain VNC home directory \"",
          "359:                                \"path for known hosts storage\");",
          "362:   CharArray dbPath(strlen(homeDir) + 16 + 1);",
          "363:   sprintf(dbPath.buf, \"%sx509_known_hosts\", homeDir);",
          "364:   delete [] homeDir;",
          "366:   err = gnutls_verify_stored_pubkey(dbPath.buf, NULL,",
          "367:                                     client->getServerName(), NULL,",
          "368:                                     GNUTLS_CRT_X509, &cert_list[0], 0);",
          "371:   if (err == GNUTLS_E_SUCCESS) {",
          "372:     vlog.debug(\"Server certificate found in known hosts file\");",
          "373:     gnutls_x509_crt_deinit(crt);",
          "374:     return;",
          "377:   if ((err != GNUTLS_E_NO_CERTIFICATE_FOUND) &&",
          "378:       (err != GNUTLS_E_CERTIFICATE_KEY_MISMATCH)) {",
          "379:     throw AuthFailureException(\"Could not load known hosts database\");",
          "380:   }",
          "382:   if (gnutls_x509_crt_print(crt, GNUTLS_CRT_PRINT_ONELINE, &info))",
          "383:     throw AuthFailureException(\"Could not find certificate to display\");",
          "385:   len = strlen((char*)info.data);",
          "386:   for (size_t i = 0; i < len - 1; i++) {",
          "387:     if (info.data[i] == ',' && info.data[i + 1] == ' ')",
          "388:       info.data[i] = '\\n';",
          "389:   }",
          "392:   if (err == GNUTLS_E_NO_CERTIFICATE_FOUND) {",
          "393:     CharArray text;",
          "395:     vlog.debug(\"Server host not previously known\");",
          "396:     vlog.debug(\"%s\", info.data);",
          "398:     text.format(\"This certificate has been signed by an unknown \"",
          "399:                 \"authority:\\n\\n%s\\n\\nSomeone could be trying to \"",
          "400:                 \"impersonate the site and you should not \"",
          "401:                 \"continue.\\n\\nDo you want to make an exception \"",
          "402:                 \"for this server?\", info.data);",
          "404:     if (!msg->showMsgBox(UserMsgBox::M_YESNO,",
          "405:                          \"Unknown certificate issuer\",",
          "406:                          text.buf))",
          "407:       throw AuthFailureException(\"Unknown certificate issuer\");",
          "408:   } else if (err == GNUTLS_E_CERTIFICATE_KEY_MISMATCH) {",
          "409:     CharArray text;",
          "411:     vlog.debug(\"Server host key mismatch\");",
          "412:     vlog.debug(\"%s\", info.data);",
          "414:     text.format(\"This host is previously known with a different \"",
          "415:                 \"certificate, and the new certificate has been \"",
          "416:                 \"signed by an unknown authority:\\n\\n%s\\n\\nSomeone \"",
          "417:                 \"could be trying to impersonate the site and you \"",
          "418:                 \"should not continue.\\n\\nDo you want to make an \"",
          "419:                 \"exception for this server?\", info.data);",
          "421:     if (!msg->showMsgBox(UserMsgBox::M_YESNO,",
          "422:                          \"Unexpected server certificate\",",
          "423:                          text.buf))",
          "424:       throw AuthFailureException(\"Unexpected server certificate\");",
          "427:   if (gnutls_store_pubkey(dbPath.buf, NULL, client->getServerName(),",
          "428:                           NULL, GNUTLS_CRT_X509, &cert_list[0], 0, 0))",
          "429:     vlog.error(\"Failed to store server certificate to known hosts database\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}