{
  "cve_id": "CVE-2024-23322",
  "cve_desc": "Envoy is a high-performance edge/middle/service proxy. Envoy will crash when certain timeouts happen within the same interval. The crash occurs when the following are true: 1. hedge_on_per_try_timeout is enabled, 2. per_try_idle_timeout is enabled (it can only be done in configuration), 3. per-try-timeout is enabled, either through headers or configuration and its value is equal, or within the backoff interval of the per_try_idle_timeout. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "843f9e6a123ed47ce139b421c14e7126f2ac685e",
  "patch_info": {
    "commit_hash": "843f9e6a123ed47ce139b421c14e7126f2ac685e",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/843f9e6a123ed47ce139b421c14e7126f2ac685e",
    "files": [
      "changelogs/current.yaml",
      "source/common/router/router.cc",
      "source/common/router/upstream_request.cc",
      "test/integration/http_timeout_integration_test.cc"
    ],
    "message": "Fix crash when idle and request per try timeouts occur within backoff interval\n\nFix [CVE-2024-23322](https://github.com/envoyproxy/envoy/security/advisories/GHSA-6p83-mfmh-qv38)\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>\n\nSigned-off-by: yanavlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/router/router.cc||source/common/router/router.cc",
      "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
      "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1117: void Filter::onSoftPerTryTimeout(UpstreamRequest& upstream_request) {",
      "1120:   updateOutlierDetection(Upstream::Outlier::Result::LocalOriginTimeout, upstream_request,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1118:   ASSERT(!upstream_request.retried());",
      "",
      "---------------"
    ],
    "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc": [
      "File: source/common/router/upstream_request.cc -> source/common/router/upstream_request.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "511: void UpstreamRequest::onPerTryIdleTimeout() {",
      "512:   ENVOY_STREAM_LOG(debug, \"upstream per try idle timeout\", *parent_.callbacks());",
      "513:   stream_info_.setResponseFlag(StreamInfo::CoreResponseFlag::StreamIdleTimeout);",
      "514:   parent_.onPerTryIdleTimeout(*this);",
      "515: }",
      "517: void UpstreamRequest::onPerTryTimeout() {",
      "520:   if (!parent_.downstreamResponseStarted()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "513:   if (per_try_timeout_) {",
      "515:     per_try_timeout_->disableTimer();",
      "516:   }",
      "522:   if (per_try_idle_timeout_) {",
      "525:     per_try_idle_timeout_.reset();",
      "526:   }",
      "",
      "---------------"
    ],
    "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc": [
      "File: test/integration/http_timeout_integration_test.cc -> test/integration/http_timeout_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "631:   EXPECT_THAT(response, AllOf(HasSubstr(\"408\"), HasSubstr(\"header\")));",
      "632: }",
      "634: } // namespace Envoy",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636: TEST_P(HttpTimeoutIntegrationTest, OriginalRequestCompletesBeforeBackoffTimer) {",
      "637:   auto host = config_helper_.createVirtualHost(\"example.com\", \"/test_retry\");",
      "638:   host.set_include_is_timeout_retry_header(true);",
      "639:   config_helper_.addVirtualHost(host);",
      "640:   config_helper_.addConfigModifier(",
      "641:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "642:               hcm) -> void {",
      "643:         auto* route_config = hcm.mutable_route_config();",
      "644:         auto* virtual_host = route_config->mutable_virtual_hosts(1);",
      "645:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
      "646:         auto* retry_policy = route->mutable_retry_policy();",
      "647:         retry_policy->mutable_per_try_idle_timeout()->set_seconds(0);",
      "649:         retry_policy->mutable_per_try_idle_timeout()->set_nanos(400 * 1000 * 1000);",
      "650:       });",
      "651:   initialize();",
      "653:   codec_client_ = makeHttpConnection(makeClientConnection(lookupPort(\"http\")));",
      "654:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
      "655:       {\":method\", \"POST\"},",
      "656:       {\":path\", \"/test_retry\"},",
      "657:       {\":scheme\", \"http\"},",
      "658:       {\":authority\", \"example.com\"},",
      "659:       {\"x-forwarded-for\", \"10.0.0.1\"},",
      "660:       {\"x-envoy-retry-on\", \"5xx\"},",
      "662:       {\"x-envoy-hedge-on-per-try-timeout\", \"true\"},",
      "663:       {\"x-envoy-upstream-rq-timeout-ms\", \"500\"},",
      "666:       {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"400\"}});",
      "667:   auto response = std::move(encoder_decoder.second);",
      "668:   request_encoder_ = &encoder_decoder.first;",
      "670:   ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));",
      "671:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
      "672:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
      "673:   codec_client_->sendData(*request_encoder_, 0, true);",
      "675:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
      "679:   timeSystem().advanceTimeWait(std::chrono::milliseconds(400));",
      "682:   timeSystem().advanceTimeWait(std::chrono::milliseconds(26));",
      "685:   FakeStreamPtr upstream_request2;",
      "687:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request2));",
      "689:   ASSERT_TRUE(upstream_request2->waitForHeadersComplete());",
      "693:   EXPECT_EQ(upstream_request2->headers().getEnvoyIsTimeoutRetryValue(), \"true\");",
      "695:   ASSERT_TRUE(upstream_request2->waitForEndStream(*dispatcher_));",
      "697:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
      "700:   upstream_request2->encodeHeaders(response_headers, true);",
      "701:   ASSERT_TRUE(response->waitForEndStream());",
      "704:   ASSERT_TRUE(upstream_request_->waitForReset(std::chrono::seconds(15)));",
      "706:   codec_client_->close();",
      "707:   EXPECT_TRUE(response->complete());",
      "708:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
      "709: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "29ad9c1f805de6130c2a484a4599625e1959b014",
      "candidate_info": {
        "commit_hash": "29ad9c1f805de6130c2a484a4599625e1959b014",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/29ad9c1f805de6130c2a484a4599625e1959b014",
        "files": [
          "changelogs/current.yaml",
          "source/common/router/router.cc",
          "source/common/router/upstream_request.cc",
          "test/integration/http_timeout_integration_test.cc"
        ],
        "message": "Fix crash when idle and per try timeouts occurs within backoff interval\n\nFix [CVE-2024-23322](https://github.com/envoyproxy/envoy/security/advisories/GHSA-6p83-mfmh-qv38)\n\nSigned-off-by: yavlasov <yavlasov@google.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>\n\nSigned-off-by: yanavlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
          "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
            "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
            "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109: void Filter::onSoftPerTryTimeout(UpstreamRequest& upstream_request) {",
          "1112:   updateOutlierDetection(Upstream::Outlier::Result::LocalOriginTimeout, upstream_request,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1110:   ASSERT(!upstream_request.retried());",
          "",
          "---------------"
        ],
        "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc": [
          "File: source/common/router/upstream_request.cc -> source/common/router/upstream_request.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "505: void UpstreamRequest::onPerTryIdleTimeout() {",
          "506:   ENVOY_STREAM_LOG(debug, \"upstream per try idle timeout\", *parent_.callbacks());",
          "507:   stream_info_.setResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout);",
          "508:   parent_.onPerTryIdleTimeout(*this);",
          "509: }",
          "511: void UpstreamRequest::onPerTryTimeout() {",
          "514:   if (!parent_.downstreamResponseStarted()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:   if (per_try_timeout_) {",
          "509:     per_try_timeout_->disableTimer();",
          "510:   }",
          "516:   if (per_try_idle_timeout_) {",
          "519:     per_try_idle_timeout_.reset();",
          "520:   }",
          "",
          "---------------"
        ],
        "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc": [
          "File: test/integration/http_timeout_integration_test.cc -> test/integration/http_timeout_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:   EXPECT_THAT(response, AllOf(HasSubstr(\"408\"), HasSubstr(\"header\")));",
          "632: }",
          "634: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636: TEST_P(HttpTimeoutIntegrationTest, OriginalRequestCompletesBeforeBackoffTimer) {",
          "637:   auto host = config_helper_.createVirtualHost(\"example.com\", \"/test_retry\");",
          "638:   host.set_include_is_timeout_retry_header(true);",
          "639:   config_helper_.addVirtualHost(host);",
          "640:   config_helper_.addConfigModifier(",
          "641:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "642:               hcm) -> void {",
          "643:         auto* route_config = hcm.mutable_route_config();",
          "644:         auto* virtual_host = route_config->mutable_virtual_hosts(1);",
          "645:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
          "646:         auto* retry_policy = route->mutable_retry_policy();",
          "647:         retry_policy->mutable_per_try_idle_timeout()->set_seconds(0);",
          "649:         retry_policy->mutable_per_try_idle_timeout()->set_nanos(400 * 1000 * 1000);",
          "650:       });",
          "651:   initialize();",
          "653:   codec_client_ = makeHttpConnection(makeClientConnection(lookupPort(\"http\")));",
          "654:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "655:       {\":method\", \"POST\"},",
          "656:       {\":path\", \"/test_retry\"},",
          "657:       {\":scheme\", \"http\"},",
          "658:       {\":authority\", \"example.com\"},",
          "659:       {\"x-forwarded-for\", \"10.0.0.1\"},",
          "660:       {\"x-envoy-retry-on\", \"5xx\"},",
          "662:       {\"x-envoy-hedge-on-per-try-timeout\", \"true\"},",
          "663:       {\"x-envoy-upstream-rq-timeout-ms\", \"500\"},",
          "666:       {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"400\"}});",
          "667:   auto response = std::move(encoder_decoder.second);",
          "668:   request_encoder_ = &encoder_decoder.first;",
          "670:   ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));",
          "671:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "672:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "673:   codec_client_->sendData(*request_encoder_, 0, true);",
          "675:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "679:   timeSystem().advanceTimeWait(std::chrono::milliseconds(400));",
          "682:   timeSystem().advanceTimeWait(std::chrono::milliseconds(26));",
          "685:   FakeStreamPtr upstream_request2;",
          "687:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request2));",
          "689:   ASSERT_TRUE(upstream_request2->waitForHeadersComplete());",
          "693:   EXPECT_EQ(upstream_request2->headers().getEnvoyIsTimeoutRetryValue(), \"true\");",
          "695:   ASSERT_TRUE(upstream_request2->waitForEndStream(*dispatcher_));",
          "697:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "700:   upstream_request2->encodeHeaders(response_headers, true);",
          "701:   ASSERT_TRUE(response->waitForEndStream());",
          "704:   ASSERT_TRUE(upstream_request_->waitForReset(std::chrono::seconds(15)));",
          "706:   codec_client_->close();",
          "707:   EXPECT_TRUE(response->complete());",
          "708:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "709: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84ffb386f99c79ea7700017e314a8294735c8b2d",
      "candidate_info": {
        "commit_hash": "84ffb386f99c79ea7700017e314a8294735c8b2d",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/84ffb386f99c79ea7700017e314a8294735c8b2d",
        "files": [
          "changelogs/current.yaml",
          "source/common/router/router.cc",
          "source/common/router/upstream_request.cc",
          "test/integration/http_timeout_integration_test.cc"
        ],
        "message": "Fix crash when idle and per try timeouts occurs within backoff interval\n\nFix [CVE-2024-23322](https://github.com/envoyproxy/envoy/security/advisories/GHSA-6p83-mfmh-qv38)\n\nSigned-off-by: yavlasov <yavlasov@google.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>\n\nSigned-off-by: yanavlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
          "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
            "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc",
            "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067: void Filter::onSoftPerTryTimeout(UpstreamRequest& upstream_request) {",
          "1070:   updateOutlierDetection(Upstream::Outlier::Result::LocalOriginTimeout, upstream_request,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:   ASSERT(!upstream_request.retried());",
          "",
          "---------------"
        ],
        "source/common/router/upstream_request.cc||source/common/router/upstream_request.cc": [
          "File: source/common/router/upstream_request.cc -> source/common/router/upstream_request.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "504: void UpstreamRequest::onPerTryIdleTimeout() {",
          "505:   ENVOY_STREAM_LOG(debug, \"upstream per try idle timeout\", *parent_.callbacks());",
          "506:   stream_info_.setResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout);",
          "507:   parent_.onPerTryIdleTimeout(*this);",
          "508: }",
          "510: void UpstreamRequest::onPerTryTimeout() {",
          "513:   if (!parent_.downstreamResponseStarted()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:   if (per_try_timeout_) {",
          "508:     per_try_timeout_->disableTimer();",
          "509:   }",
          "515:   if (per_try_idle_timeout_) {",
          "518:     per_try_idle_timeout_.reset();",
          "519:   }",
          "",
          "---------------"
        ],
        "test/integration/http_timeout_integration_test.cc||test/integration/http_timeout_integration_test.cc": [
          "File: test/integration/http_timeout_integration_test.cc -> test/integration/http_timeout_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:   EXPECT_THAT(response, AllOf(HasSubstr(\"408\"), HasSubstr(\"header\")));",
          "626: }",
          "628: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630: TEST_P(HttpTimeoutIntegrationTest, OriginalRequestCompletesBeforeBackoffTimer) {",
          "631:   auto host = config_helper_.createVirtualHost(\"example.com\", \"/test_retry\");",
          "632:   host.set_include_is_timeout_retry_header(true);",
          "633:   config_helper_.addVirtualHost(host);",
          "634:   config_helper_.addConfigModifier(",
          "635:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "636:               hcm) -> void {",
          "637:         auto* route_config = hcm.mutable_route_config();",
          "638:         auto* virtual_host = route_config->mutable_virtual_hosts(1);",
          "639:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
          "640:         auto* retry_policy = route->mutable_retry_policy();",
          "641:         retry_policy->mutable_per_try_idle_timeout()->set_seconds(0);",
          "643:         retry_policy->mutable_per_try_idle_timeout()->set_nanos(400 * 1000 * 1000);",
          "644:       });",
          "645:   initialize();",
          "647:   codec_client_ = makeHttpConnection(makeClientConnection(lookupPort(\"http\")));",
          "648:   auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{",
          "649:       {\":method\", \"POST\"},",
          "650:       {\":path\", \"/test_retry\"},",
          "651:       {\":scheme\", \"http\"},",
          "652:       {\":authority\", \"example.com\"},",
          "653:       {\"x-forwarded-for\", \"10.0.0.1\"},",
          "654:       {\"x-envoy-retry-on\", \"5xx\"},",
          "656:       {\"x-envoy-hedge-on-per-try-timeout\", \"true\"},",
          "657:       {\"x-envoy-upstream-rq-timeout-ms\", \"500\"},",
          "660:       {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"400\"}});",
          "661:   auto response = std::move(encoder_decoder.second);",
          "662:   request_encoder_ = &encoder_decoder.first;",
          "664:   ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));",
          "665:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "666:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "667:   codec_client_->sendData(*request_encoder_, 0, true);",
          "669:   ASSERT_TRUE(upstream_request_->waitForEndStream(*dispatcher_));",
          "673:   timeSystem().advanceTimeWait(std::chrono::milliseconds(400));",
          "676:   timeSystem().advanceTimeWait(std::chrono::milliseconds(26));",
          "679:   FakeStreamPtr upstream_request2;",
          "681:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request2));",
          "683:   ASSERT_TRUE(upstream_request2->waitForHeadersComplete());",
          "687:   EXPECT_EQ(upstream_request2->headers().getEnvoyIsTimeoutRetryValue(), \"true\");",
          "689:   ASSERT_TRUE(upstream_request2->waitForEndStream(*dispatcher_));",
          "691:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "694:   upstream_request2->encodeHeaders(response_headers, true);",
          "695:   ASSERT_TRUE(response->waitForEndStream());",
          "698:   ASSERT_TRUE(upstream_request_->waitForReset(std::chrono::seconds(15)));",
          "700:   codec_client_->close();",
          "701:   EXPECT_TRUE(response->complete());",
          "702:   EXPECT_EQ(\"200\", response->headers().getStatusValue());",
          "703: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}