{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df06245c7d80f13d670522fd2a7aacb031ce0bbf",
      "candidate_info": {
        "commit_hash": "df06245c7d80f13d670522fd2a7aacb031ce0bbf",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/df06245c7d80f13d670522fd2a7aacb031ce0bbf",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add a helper for finishing the dir tracking iteration",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "792:     return fi;",
          "793: }",
          "795: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
          "796:               rpmpsm psm, char ** failedFile)",
          "797: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795: static rpmfi fsmIterFini(rpmfi fi, struct diriter_s *di)",
          "796: {",
          "797:     close(di->dirfd);",
          "798:     di->dirfd = -1;",
          "799:     return rpmfiFree(fi);",
          "800: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:      rpmpsmNotify(psm, RPMCALLBACK_INST_PROGRESS, rpmfiArchiveTell(fi));",
          "954:  fp->stage = FILE_UNPACK;",
          "955:     }",
          "960:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
          "961:  rc = fx;",
          "",
          "[Removed Lines]",
          "956:     fi = rpmfiFree(fi);",
          "957:     close(di.dirfd);",
          "958:     di.dirfd = -1;",
          "",
          "[Added Lines]",
          "963:     fi = fsmIterFini(fi, &di);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca243dc5f38213b027dace0ee9a0783cd29dd1cf",
      "candidate_info": {
        "commit_hash": "ca243dc5f38213b027dace0ee9a0783cd29dd1cf",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ca243dc5f38213b027dace0ee9a0783cd29dd1cf",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Fix possible descriptor leak in fsmOpenat()\n\nFor the very unlikely case when openat() succeeded but fstatat()\ndoesn't, the directory descriptor may be leaved opened. Rearrange\nthe code a bit to ensure it'll always get closed when appropriate.\n\nSuggested-by: Pavel Kopylov <pkopylov@cloudlinux.com>\nSuggested-by: Dmitry Antipov <dantipov@cloudlinux.com>\n(cherry picked from commit af08077fb4c60dee516948ce7bf9bed91de62119)",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
          "315:  int ffd = openat(dirfd, path, flags);",
          "322:   }",
          "323:      }",
          "324:  }",
          "325:     }",
          "",
          "[Removed Lines]",
          "316:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
          "317:      if (fstat(ffd, &sb) == 0) {",
          "318:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
          "319:       fd = ffd;",
          "320:   } else {",
          "321:       close(ffd);",
          "",
          "[Added Lines]",
          "316:  if (ffd >= 0) {",
          "317:      if (fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
          "318:   if (fstat(ffd, &sb) == 0) {",
          "319:       if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
          "320:    fd = ffd;",
          "321:       }",
          "324:      if (ffd != fd)",
          "325:   close(ffd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41edce3d6213878659630b25fc2372035c84ba6c",
      "candidate_info": {
        "commit_hash": "41edce3d6213878659630b25fc2372035c84ba6c",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/41edce3d6213878659630b25fc2372035c84ba6c",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert fsmRemove() and helpers to unlinkat() based operation",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "585:    [], [AC_MSG_ERROR([function required by rpm])])",
          "587: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat ],",
          "",
          "[Added Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     return rc;",
          "254: }",
          "257: {",
          "259:     if (_fsm_debug)",
          "262:     if (rc < 0)",
          "263:  switch (errno) {",
          "264:  case ENOENT:        rc = RPMERR_ENOENT;    break;",
          "",
          "[Removed Lines]",
          "256: static int fsmRmdir(const char *path)",
          "258:     int rc = rmdir(path);",
          "260:  rpmlog(RPMLOG_DEBUG, \" %8s (%s) %s\\n\", __func__,",
          "261:         path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "256: static int fsmRmdir(int dirfd, const char *path)",
          "258:     int rc = unlinkat(dirfd, path, AT_REMOVEDIR);",
          "260:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s) %s\\n\", __func__,",
          "261:         dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:     return rc;",
          "468: }",
          "471: {",
          "472:     int rc = 0;",
          "473:     removeSBITS(path);",
          "475:     if (_fsm_debug)",
          "478:     if (rc < 0)",
          "479:  rc = (errno == ENOENT ? RPMERR_ENOENT : RPMERR_UNLINK_FAILED);",
          "480:     return rc;",
          "",
          "[Removed Lines]",
          "470: static int fsmUnlink(const char *path)",
          "474:     rc = unlink(path);",
          "476:  rpmlog(RPMLOG_DEBUG, \" %8s (%s) %s\\n\", __func__,",
          "477:         path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "470: static int fsmUnlink(int dirfd, const char *path)",
          "474:     rc = unlinkat(dirfd, path, 0);",
          "476:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s) %s\\n\", __func__,",
          "477:         dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:     return rc;",
          "503: }",
          "506: {",
          "508: }",
          "510: static int fsmChown(const char *path, mode_t mode, uid_t uid, gid_t gid)",
          "",
          "[Removed Lines]",
          "505: static int fsmRemove(const char *path, mode_t mode)",
          "507:     return S_ISDIR(mode) ? fsmRmdir(path) : fsmUnlink(path);",
          "",
          "[Added Lines]",
          "505: static int fsmRemove(int dirfd, const char *path, mode_t mode)",
          "507:     return S_ISDIR(mode) ? fsmRmdir(dirfd, path) : fsmUnlink(dirfd, path);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581:  rc = fsmRename(path, rmpath);",
          "583:  if (!rc)",
          "585:  else",
          "586:      rc = RPMERR_UNLINK_FAILED;",
          "587:  free(rmpath);",
          "",
          "[Removed Lines]",
          "584:      (void) fsmUnlink(rmpath);",
          "",
          "[Added Lines]",
          "584:      (void) fsmUnlink(dirfd, rmpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "616:         if (S_ISSOCK(dsb.st_mode)) return 0;",
          "617:     }",
          "620:     if (rc == 0) rc = RPMERR_ENOENT;",
          "622: }",
          "",
          "[Removed Lines]",
          "619:     rc = fsmUnlink(path);",
          "",
          "[Added Lines]",
          "619:     rc = fsmUnlink(dirfd, path);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1003:   continue;",
          "1005:      if (fp->stage > FILE_NONE && !fp->skip) {",
          "1007:      }",
          "1008:  }",
          "1009:     }",
          "",
          "[Removed Lines]",
          "1006:   (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "",
          "[Added Lines]",
          "1006:   (void) fsmRemove(di.dirfd, fp->fpath, fp->sb.st_mode);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1061:         if (fp->action == FA_ERASE) {",
          "1062:      int missingok = (rpmfiFFlags(fi) & (RPMFILE_MISSINGOK | RPMFILE_GHOST));",
          "",
          "[Removed Lines]",
          "1064:      rc = fsmRemove(fp->fpath, fp->sb.st_mode);",
          "",
          "[Added Lines]",
          "1064:      rc = fsmRemove(di.dirfd, fp->fpath, fp->sb.st_mode);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b599e28112ce5cee98b9ffa7bd96886ec5155e9c",
      "candidate_info": {
        "commit_hash": "b599e28112ce5cee98b9ffa7bd96886ec5155e9c",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/b599e28112ce5cee98b9ffa7bd96886ec5155e9c",
        "files": [
          "configure.ac",
          "lib/fsm.c"
        ],
        "message": "Convert the file creation steps the *at() family of calls\n\nSupposedly no functional changes here, we just need all these things\nconverted before we can swap over to relative paths.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: AC_CHECK_FUNCS(",
          "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "583:     utimes getline localtime_r statvfs getaddrinfo \\",
          "585:    [], [AC_MSG_ERROR([function required by rpm])])",
          "587: AC_LIBOBJ(fnmatch)",
          "",
          "[Removed Lines]",
          "584:     openat mkdirat fstatat ],",
          "",
          "[Added Lines]",
          "584:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat ],",
          "",
          "---------------"
        ],
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     return rstrscat(NULL, rpmfiDN(fi), rpmfiBN(fi), suffix ? suffix : \"\", NULL);",
          "78: }",
          "81: {",
          "84:     if (_fsm_debug) {",
          "87:     }",
          "89:     if (rc < 0)",
          "",
          "[Removed Lines]",
          "80: static int fsmLink(const char *opath, const char *path)",
          "82:     int rc = link(opath, path);",
          "85:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "86:         opath, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "80: static int fsmLink(int odirfd, const char *opath, int dirfd, const char *path)",
          "82:     int rc = linkat(odirfd, opath, dirfd, path, 0);",
          "85:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, %d %s) %s\\n\", __func__,",
          "86:         odirfd, opath, dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     return rc;",
          "140: }",
          "143: {",
          "144:     int rc = 0;",
          "150:     }",
          "153:  rc = RPMERR_OPEN_FAILED;",
          "155:     if (_fsm_debug) {",
          "",
          "[Removed Lines]",
          "142: static int fsmOpen(FD_t *wfdp, const char *dest)",
          "146:     {",
          "147:  mode_t old_umask = umask(0577);",
          "149:  umask(old_umask);",
          "152:     if (Ferror(*wfdp))",
          "",
          "[Added Lines]",
          "142: static int fsmOpen(FD_t *wfdp, int dirfd, const char *dest)",
          "146:     int fd = openat(dirfd, dest, O_WRONLY|O_EXCL|O_CREAT, 0200);",
          "148:     if (fd >= 0) {",
          "150:  close(fd);",
          "153:     if (fd < 0 || Ferror(*wfdp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     return rc;",
          "175: }",
          "178:        rpmpsm psm, int nodigest,",
          "179:        struct filedata_s ** firstlink, FD_t *firstlinkfile)",
          "180: {",
          "",
          "[Removed Lines]",
          "177: static int fsmMkfile(rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "",
          "[Added Lines]",
          "178: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:     if (*firstlink == NULL) {",
          "188:  if (fp->sb.st_nlink > 1) {",
          "",
          "[Removed Lines]",
          "186:  rc = fsmOpen(&fd, fp->fpath);",
          "",
          "[Added Lines]",
          "187:  rc = fsmOpen(&fd, dirfd, fp->fpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     } else {",
          "194:  if (*firstlink != fp) {",
          "196:  }",
          "197:  fd = *firstlinkfile;",
          "198:     }",
          "",
          "[Removed Lines]",
          "195:      rc = fsmLink((*firstlink)->fpath, fp->fpath);",
          "",
          "[Added Lines]",
          "196:      rc = fsmLink(dirfd, (*firstlink)->fpath, dirfd, fp->fpath);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "382:     return dirfd;",
          "383: }",
          "386: {",
          "389:     if (_fsm_debug) {",
          "392:         (rc < 0 ? strerror(errno) : \"\"));",
          "393:     }",
          "",
          "[Removed Lines]",
          "385: static int fsmMkfifo(const char *path, mode_t mode)",
          "387:     int rc = mkfifo(path, (mode & 07777));",
          "390:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\",",
          "391:         __func__, path, (unsigned)(mode & 07777),",
          "",
          "[Added Lines]",
          "386: static int fsmMkfifo(int dirfd, const char *path, mode_t mode)",
          "388:     int rc = mkfifoat(dirfd, path, (mode & 07777));",
          "391:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\",",
          "392:         __func__, dirfd, path, (unsigned)(mode & 07777),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "398:     return rc;",
          "399: }",
          "402: {",
          "406:     if (_fsm_debug) {",
          "409:         (unsigned)dev, (rc < 0 ? strerror(errno) : \"\"));",
          "410:     }",
          "",
          "[Removed Lines]",
          "401: static int fsmMknod(const char *path, mode_t mode, dev_t dev)",
          "404:     int rc = mknod(path, (mode & ~07777), dev);",
          "407:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%o, 0x%x) %s\\n\",",
          "408:         __func__, path, (unsigned)(mode & ~07777),",
          "",
          "[Added Lines]",
          "402: static int fsmMknod(int dirfd, const char *path, mode_t mode, dev_t dev)",
          "405:     int rc = mknodat(dirfd, path, (mode & ~07777), dev);",
          "408:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%o, 0x%x) %s\\n\",",
          "409:         __func__, dirfd, path, (unsigned)(mode & ~07777),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "440:      (fpath ? fpath : \"\"));",
          "441: }",
          "444: {",
          "447:     if (_fsm_debug) {",
          "450:     }",
          "452:     if (rc < 0)",
          "",
          "[Removed Lines]",
          "443: static int fsmSymlink(const char *opath, const char *path)",
          "445:     int rc = symlink(opath, path);",
          "448:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %s) %s\\n\", __func__,",
          "449:         opath, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "444: static int fsmSymlink(const char *opath, int dirfd, const char *path)",
          "446:     int rc = symlinkat(opath, dirfd, path);",
          "449:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, %d %s) %s\\n\", __func__,",
          "450:         opath, dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "885:             if (S_ISREG(fp->sb.st_mode)) {",
          "886:   if (rc == RPMERR_ENOENT) {",
          "888:        &firstlink, &firstlinkfile);",
          "889:   }",
          "890:             } else if (S_ISDIR(fp->sb.st_mode)) {",
          "",
          "[Removed Lines]",
          "887:       rc = fsmMkfile(fi, fp, files, psm, nodigest,",
          "",
          "[Added Lines]",
          "888:       rc = fsmMkfile(di.dirfd, fi, fp, files, psm, nodigest,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "896:                 }",
          "897:             } else if (S_ISLNK(fp->sb.st_mode)) {",
          "898:   if (rc == RPMERR_ENOENT) {",
          "900:   }",
          "901:             } else if (S_ISFIFO(fp->sb.st_mode)) {",
          "903:                 if (rc == RPMERR_ENOENT) {",
          "905:                 }",
          "906:             } else if (S_ISCHR(fp->sb.st_mode) ||",
          "907:                        S_ISBLK(fp->sb.st_mode) ||",
          "908:                        S_ISSOCK(fp->sb.st_mode))",
          "909:             {",
          "910:                 if (rc == RPMERR_ENOENT) {",
          "912:                 }",
          "913:             } else {",
          "",
          "[Removed Lines]",
          "899:       rc = fsmSymlink(rpmfiFLink(fi), fp->fpath);",
          "904:                     rc = fsmMkfifo(fp->fpath, 0000);",
          "911:                     rc = fsmMknod(fp->fpath, fp->sb.st_mode, fp->sb.st_rdev);",
          "",
          "[Added Lines]",
          "900:       rc = fsmSymlink(rpmfiFLink(fi), di.dirfd, fp->fpath);",
          "905:                     rc = fsmMkfifo(di.dirfd, fp->fpath, 0000);",
          "912:                     rc = fsmMknod(di.dirfd, fp->fpath, fp->sb.st_mode, fp->sb.st_rdev);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "610209ecb4bfe8127a2557e29c08719ffc007c0d",
      "candidate_info": {
        "commit_hash": "610209ecb4bfe8127a2557e29c08719ffc007c0d",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/610209ecb4bfe8127a2557e29c08719ffc007c0d",
        "files": [
          "configure.ac",
          "misc/Makefile.am",
          "misc/stpcpy.c",
          "misc/stpncpy.c",
          "system.h"
        ],
        "message": "Drop now redundant bundled copies of stpcpy() and stpncpy()\n\nstpcpy() and stpncpy() got added to POSIX-1.2008 (surprisingly if you\nask me), and as that's the version we require now since commit\n96ec957e281220f8e137a2d5eb23b83a6377d556, we don't need to carry this\ndusty stuff (only touched once since -98...)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "misc/Makefile.am||misc/Makefile.am",
          "misc/stpcpy.c||misc/stpcpy.c",
          "misc/stpncpy.c||misc/stpncpy.c",
          "system.h||system.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:     AC_MSG_RESULT([yes]),",
          "603:     AC_MSG_RESULT([no]))",
          "607: AC_CHECK_FUNCS([secure_getenv __secure_getenv])",
          "609: AC_CHECK_FUNCS(",
          "610:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
          "611:     utimes getline localtime_r statvfs getaddrinfo \\",
          "612:     openat mkdirat fstatat linkat symlinkat mkfifoat mknodat unlinkat \\",
          "614:    [], [AC_MSG_ERROR([function required by rpm])])",
          "616: dnl check if python is requested",
          "",
          "[Removed Lines]",
          "605: AC_REPLACE_FUNCS(stpcpy stpncpy)",
          "613:     renameat utimensat fchmodat fchownat ],",
          "",
          "[Added Lines]",
          "611:     renameat utimensat fchmodat fchownat stpcpy stpncpy ],",
          "",
          "---------------"
        ],
        "misc/Makefile.am||misc/Makefile.am": [
          "File: misc/Makefile.am -> misc/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AM_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir) -I$(top_srcdir)/include",
          "4: AM_CPPFLAGS += -I$(top_srcdir)/misc",
          "9: noinst_LTLIBRARIES = libmisc.la",
          "11: libmisc_la_SOURCES = fts.c rpmfts.h",
          "",
          "[Removed Lines]",
          "6: EXTRA_DIST = \\",
          "7:  stpcpy.c stpncpy.c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "misc/stpcpy.c||misc/stpcpy.c": [
          "File: misc/stpcpy.c -> misc/stpcpy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "misc/stpncpy.c||misc/stpncpy.c": [
          "File: misc/stpncpy.c -> misc/stpncpy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "system.h||system.h": [
          "File: system.h -> system.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #endif",
          "30: #endif",
          "40: #if HAVE_SECURE_GETENV",
          "41: #define getenv(_s) secure_getenv(_s)",
          "42: #elif HAVE___SECURE_GETENV",
          "",
          "[Removed Lines]",
          "32: #if !defined(HAVE_STPCPY)",
          "33: char * stpcpy(char * dest, const char * src);",
          "34: #endif",
          "36: #if !defined(HAVE_STPNCPY)",
          "37: char * stpncpy(char * dest, const char * src, size_t n);",
          "38: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}