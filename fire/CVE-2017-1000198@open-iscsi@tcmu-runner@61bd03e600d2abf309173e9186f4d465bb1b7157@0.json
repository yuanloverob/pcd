{
  "cve_id": "CVE-2017-1000198",
  "cve_desc": "tcmu-runner daemon version 0.9.0 to 1.2.0 is vulnerable to invalid memory references in the handler_glfs.so handler resulting in denial of service",
  "repo": "open-iscsi/tcmu-runner",
  "patch_hash": "61bd03e600d2abf309173e9186f4d465bb1b7157",
  "patch_info": {
    "commit_hash": "61bd03e600d2abf309173e9186f4d465bb1b7157",
    "repo": "open-iscsi/tcmu-runner",
    "commit_url": "https://github.com/open-iscsi/tcmu-runner/commit/61bd03e600d2abf309173e9186f4d465bb1b7157",
    "files": [
      "glfs.c"
    ],
    "message": "glfs: discard glfs_check_config\n\nSigned-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>",
    "before_after_code_files": [
      "glfs.c||glfs.c"
    ]
  },
  "patch_diff": {
    "glfs.c||glfs.c": [
      "File: glfs.c -> glfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "430:  return config;",
      "431: }",
      "485: static int tcmu_glfs_open(struct tcmu_device *dev)",
      "486: {",
      "487:  struct glfs_state *gfsp;",
      "",
      "[Removed Lines]",
      "434: static bool glfs_check_config(const char *cfgstring, char **reason)",
      "435: {",
      "436:  char *path;",
      "437:  glfs_t *fs = NULL;",
      "438:  glfs_fd_t *gfd = NULL;",
      "440:  bool result = true;",
      "442:  path = strchr(cfgstring, '/');",
      "443:  if (!path) {",
      "444:   if (asprintf(reason, \"No path found\") == -1)",
      "446:   result = false;",
      "447:   goto done;",
      "448:  }",
      "451:  fs = tcmu_create_glfs_object(path, &hosts);",
      "452:  if (!fs) {",
      "453:   tcmu_err(\"tcmu_create_glfs_object failed\\n\");",
      "454:   goto done;",
      "455:  }",
      "457:  gfd = glfs_open(fs, hosts->path, ALLOWED_BSOFLAGS);",
      "458:  if (!gfd) {",
      "459:   if (asprintf(reason, \"glfs_open failed: %m\") == -1)",
      "461:   result = false;",
      "462:   goto unref;",
      "463:  }",
      "465:  if (glfs_access(fs, hosts->path, R_OK|W_OK) == -1) {",
      "466:   if (asprintf(reason, \"glfs_access file not present, or not writable\") == -1)",
      "468:   result = false;",
      "469:   goto unref;",
      "470:  }",
      "472:  goto done;",
      "474: unref:",
      "475:  gluster_cache_refresh(fs, path);",
      "477: done:",
      "478:  if (gfd)",
      "479:   glfs_close(gfd);",
      "480:  gluster_free_server(&hosts);",
      "482:  return result;",
      "483: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "681:  .subtype  = \"glfs\",",
      "682:  .cfg_desc = glfs_cfg_desc,",
      "686:  .open   = tcmu_glfs_open,",
      "687:  .close   = tcmu_glfs_close,",
      "688:  .read   = tcmu_glfs_read,",
      "",
      "[Removed Lines]",
      "684:  .check_config  = glfs_check_config,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a0869fe12a770a14e7224f5644426b03ebd9faa",
      "candidate_info": {
        "commit_hash": "4a0869fe12a770a14e7224f5644426b03ebd9faa",
        "repo": "open-iscsi/tcmu-runner",
        "commit_url": "https://github.com/open-iscsi/tcmu-runner/commit/4a0869fe12a770a14e7224f5644426b03ebd9faa",
        "files": [
          "glfs.c"
        ],
        "message": "glfs: convert tcmu_err to tcmu_dev_err\n\nSigned-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>",
        "before_after_code_files": [
          "glfs.c||glfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-iscsi/tcmu-runner/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "glfs.c||glfs.c"
          ],
          "candidate": [
            "glfs.c||glfs.c"
          ]
        }
      },
      "candidate_diff": {
        "glfs.c||glfs.c": [
          "File: glfs.c -> glfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: } glfs_cbk_cookie;",
          "95: struct gluster_cacheconn {",
          "97:  gluster_hostdef *server;",
          "98:  glfs_t *fs;",
          "99:  darray(char *) cfgstring;",
          "",
          "[Removed Lines]",
          "96:     char *volname;",
          "",
          "[Added Lines]",
          "96:  char *volname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:  return -1;",
          "351: }",
          "354: {",
          "355:  gluster_server *entry = NULL;",
          "356:  char logfilepath[PATH_MAX];",
          "360:  if (parse_imagepath(config, hosts) == -1) {",
          "362:   goto fail;",
          "363:  }",
          "364:  entry = *hosts;",
          "",
          "[Removed Lines]",
          "353: static glfs_t* tcmu_create_glfs_object(char *config, gluster_server **hosts)",
          "357:     glfs_t *fs =  NULL;",
          "358:     int ret = -1;",
          "361:   tcmu_err(\"hostaddr, volname, or path missing\\n\");",
          "",
          "[Added Lines]",
          "353: static glfs_t* tcmu_create_glfs_object(struct tcmu_device *dev,",
          "354:                                        char *config, gluster_server **hosts)",
          "358:  glfs_t *fs =  NULL;",
          "359:  int ret = -1;",
          "362:   tcmu_dev_err(dev, \"hostaddr, volname, or path missing\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:  fs = glfs_new(entry->volname);",
          "371:  if (!fs) {",
          "373:   goto fail;",
          "374:  }",
          "376:  ret = gluster_cache_add(entry, fs, config);",
          "377:  if (ret) {",
          "379:   goto fail;",
          "380:  }",
          "",
          "[Removed Lines]",
          "372:   tcmu_err(\"glfs_new failed\\n\");",
          "378:   tcmu_err(\"gluster_cache_add failed: %m\\n\");",
          "",
          "[Added Lines]",
          "373:   tcmu_dev_err(dev, \"glfs_new failed\\n\");",
          "379:   tcmu_dev_err(dev, \"gluster_cache_add failed: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "384:     entry->server->u.inet.addr,",
          "385:     atoi(entry->server->u.inet.port));",
          "386:  if (ret) {",
          "388:   goto unref;",
          "389:  }",
          "391:  ret = tcmu_make_absolute_logfile(logfilepath, TCMU_GLFS_LOG_FILENAME);",
          "392:  if (ret < 0) {",
          "394:   goto unref;",
          "395:  }",
          "397:  ret = glfs_set_logging(fs, logfilepath, TCMU_GLFS_DEBUG_LEVEL);",
          "398:  if (ret < 0) {",
          "400:   goto unref;",
          "401:  }",
          "403:  ret = glfs_init(fs);",
          "404:  if (ret) {",
          "406:   goto unref;",
          "407:  }",
          "",
          "[Removed Lines]",
          "387:   tcmu_err(\"glfs_set_volfile_server failed: %m\\n\");",
          "393:   tcmu_err(\"tcmu_make_absolute_logfile failed: %m\\n\");",
          "399:   tcmu_err(\"glfs_set_logging failed: %m\\n\");",
          "405:   tcmu_err(\"glfs_init failed: %m\\n\");",
          "",
          "[Added Lines]",
          "388:   tcmu_dev_err(dev, \"glfs_set_volfile_server failed: %m\\n\");",
          "394:   tcmu_dev_err(dev, \"tcmu_make_absolute_logfile failed: %m\\n\");",
          "400:   tcmu_dev_err(dev, \"glfs_set_logging failed: %m\\n\");",
          "406:   tcmu_dev_err(dev, \"glfs_init failed: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "423:  config = strchr(tcmu_get_dev_cfgstring(dev), '/');",
          "424:  if (!config) {",
          "426:   return NULL;",
          "427:  }",
          "",
          "[Removed Lines]",
          "425:   tcmu_err(\"no configuration found in cfgstring\\n\");",
          "",
          "[Added Lines]",
          "426:   tcmu_dev_err(dev, \"no configuration found in cfgstring\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "448:   goto fail;",
          "449:  }",
          "452:  if (!gfsp->fs) {",
          "454:   goto fail;",
          "455:  }",
          "457:  gfsp->gfd = glfs_open(gfsp->fs, gfsp->hosts->path, ALLOWED_BSOFLAGS);",
          "458:  if (!gfsp->gfd) {",
          "460:   goto unref;",
          "461:  }",
          "463:  ret = glfs_lstat(gfsp->fs, gfsp->hosts->path, &st);",
          "464:  if (ret) {",
          "466:   goto unref;",
          "467:  }",
          "469:  if (st.st_size != tcmu_get_device_size(dev)) {",
          "474:   goto unref;",
          "475:  }",
          "",
          "[Removed Lines]",
          "451:  gfsp->fs = tcmu_create_glfs_object(config, &gfsp->hosts);",
          "453:   tcmu_err(\"tcmu_create_glfs_object failed\\n\");",
          "459:   tcmu_err(\"glfs_open failed: %m\\n\");",
          "465:   tcmu_err(\"glfs_lstat failed: %m\\n\");",
          "470:   tcmu_err(\"device size and backing size disagree: \"",
          "471:          \"device %lld backing %lld\\n\",",
          "472:          tcmu_get_device_size(dev),",
          "473:          (long long) st.st_size);",
          "",
          "[Added Lines]",
          "452:  gfsp->fs = tcmu_create_glfs_object(dev, config, &gfsp->hosts);",
          "454:   tcmu_dev_err(dev, \"tcmu_create_glfs_object failed\\n\");",
          "460:   tcmu_dev_err(dev, \"glfs_open failed: %m\\n\");",
          "466:   tcmu_dev_err(dev, \"glfs_lstat failed: %m\\n\");",
          "471:   tcmu_dev_err(dev,",
          "472:                \"device size and backing size disagree: \"",
          "473:                \"device %lld backing %lld\\n\",",
          "474:                tcmu_get_device_size(dev),",
          "475:                (long long) st.st_size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "537:  cookie = calloc(1, sizeof(*cookie));",
          "538:  if (!cookie) {",
          "540:   goto out;",
          "541:  }",
          "542:  cookie->dev = dev;",
          "",
          "[Removed Lines]",
          "539:   tcmu_err(\"Could not allocate cookie: %m\\n\");",
          "",
          "[Added Lines]",
          "541:   tcmu_dev_err(dev, \"Could not allocate cookie: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "547:  if (glfs_preadv_async(state->gfd, iov, iov_cnt, offset, SEEK_SET,",
          "548:                        glfs_async_cbk, cookie) < 0) {",
          "550:   goto out;",
          "551:  }",
          "",
          "[Removed Lines]",
          "549:   tcmu_err(\"glfs_preadv_async failed: %m\\n\");",
          "",
          "[Added Lines]",
          "551:   tcmu_dev_err(dev, \"glfs_preadv_async failed: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "568:  cookie = calloc(1, sizeof(*cookie));",
          "569:  if (!cookie) {",
          "571:   goto out;",
          "572:  }",
          "573:  cookie->dev = dev;",
          "",
          "[Removed Lines]",
          "570:   tcmu_err(\"Could not allocate cookie: %m\\n\");",
          "",
          "[Added Lines]",
          "572:   tcmu_dev_err(dev, \"Could not allocate cookie: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "578:  if (glfs_pwritev_async(state->gfd, iov, iov_cnt, offset,",
          "579:                         ALLOWED_BSOFLAGS, glfs_async_cbk, cookie) < 0) {",
          "581:   goto out;",
          "582:  }",
          "",
          "[Removed Lines]",
          "580:   tcmu_err(\"glfs_pwritev_async failed: %m\\n\");",
          "",
          "[Added Lines]",
          "582:   tcmu_dev_err(dev, \"glfs_pwritev_async failed: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "597:  cookie = calloc(1, sizeof(*cookie));",
          "598:  if (!cookie) {",
          "600:   goto out;",
          "601:  }",
          "602:  cookie->dev = dev;",
          "",
          "[Removed Lines]",
          "599:   tcmu_err(\"Could not allocate cookie: %m\\n\");",
          "",
          "[Added Lines]",
          "601:   tcmu_dev_err(dev, \"Could not allocate cookie: %m\\n\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "605:  cookie->op = TCMU_GLFS_FLUSH;",
          "607:  if (glfs_fdatasync_async(state->gfd, glfs_async_cbk, cookie) < 0) {",
          "609:   goto out;",
          "610:  }",
          "",
          "[Removed Lines]",
          "608:   tcmu_err(\"glfs_fdatasync_async failed: %m\\n\");",
          "",
          "[Added Lines]",
          "610:   tcmu_dev_err(dev, \"glfs_fdatasync_async failed: %m\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fdfb64b113bed8d7f83346ab5bcaf6947b667c7",
      "candidate_info": {
        "commit_hash": "4fdfb64b113bed8d7f83346ab5bcaf6947b667c7",
        "repo": "open-iscsi/tcmu-runner",
        "commit_url": "https://github.com/open-iscsi/tcmu-runner/commit/4fdfb64b113bed8d7f83346ab5bcaf6947b667c7",
        "files": [
          "glfs.c"
        ],
        "message": "glfs: update the glfs config descritions and add usage of creation\n\nSigned-off-by: Xiubo Li <lixiubo@cmss.chinamobile.com>",
        "before_after_code_files": [
          "glfs.c||glfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "glfs.c||glfs.c"
          ],
          "candidate": [
            "glfs.c||glfs.c"
          ]
        }
      },
      "candidate_diff": {
        "glfs.c||glfs.c": [
          "File: glfs.c -> glfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "699:  return SAM_STAT_TASK_SET_FULL;",
          "700: }",
          "702: static const char glfs_cfg_desc[] =",
          "703:  \"glfs config string is of the form:\\n\"",
          "705:  \"where:\\n\"",
          "706:  \"  volume:    The volume on the Gluster server\\n\"",
          "707:  \"  hostname:  The server's hostname\\n\"",
          "710: struct tcmur_handler glfs_handler = {",
          "713:  .cfg_desc = glfs_cfg_desc,",
          "718:  .write  = tcmu_glfs_write,",
          "719:  .reconfig       = tcmu_glfs_reconfig,",
          "720:  .flush  = tcmu_glfs_flush,",
          "",
          "[Removed Lines]",
          "704:  \"\\\"volume@hostname/filename\\\"\\n\"",
          "708:  \"  filename:  The backing file\";",
          "711:  .name   = \"Gluster glfs handler\",",
          "712:  .subtype  = \"glfs\",",
          "715:  .open   = tcmu_glfs_open,",
          "716:  .close   = tcmu_glfs_close,",
          "717:  .read   = tcmu_glfs_read,",
          "",
          "[Added Lines]",
          "716:  \"\\\"$volume@$hostname/$filepath\\\"\\n\"",
          "720:  \"  filepath:  The path of the backing file\";",
          "723:  .name  = \"Gluster glfs handler\",",
          "724:  .subtype = \"glfs\",",
          "727:  .open  = tcmu_glfs_open,",
          "728:  .close  = tcmu_glfs_close,",
          "729:  .read  = tcmu_glfs_read,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "811f74e5393fc1f351895a454bb963c9ff797d53",
      "candidate_info": {
        "commit_hash": "811f74e5393fc1f351895a454bb963c9ff797d53",
        "repo": "open-iscsi/tcmu-runner",
        "commit_url": "https://github.com/open-iscsi/tcmu-runner/commit/811f74e5393fc1f351895a454bb963c9ff797d53",
        "files": [
          "glfs.c"
        ],
        "message": "glfs: remove size checks in handler\n\nLet glusterfs tools handle size checks\n\nSigned-off-by: Prasanna Kumar Kalever <prasanna.kalever@redhat.com>",
        "before_after_code_files": [
          "glfs.c||glfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "glfs.c||glfs.c"
          ],
          "candidate": [
            "glfs.c||glfs.c"
          ]
        }
      },
      "candidate_diff": {
        "glfs.c||glfs.c": [
          "File: glfs.c -> glfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "479: static int tcmu_glfs_open(struct tcmu_device *dev)",
          "480: {",
          "481:  struct glfs_state *gfsp;",
          "483:  char *config;",
          "486:  gfsp = calloc(1, sizeof(*gfsp));",
          "487:  if (!gfsp)",
          "",
          "[Removed Lines]",
          "482:  int ret = 0;",
          "484:  struct stat st;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:   goto unref;",
          "508:  }",
          "525:  return 0;",
          "527: unref:",
          "528:  gluster_cache_refresh(gfsp->fs, tcmu_get_path(dev));",
          "533:  gluster_free_server(&gfsp->hosts);",
          "534:  free(gfsp);",
          "536:  return -EIO;",
          "",
          "[Removed Lines]",
          "510:  ret = glfs_lstat(gfsp->fs, gfsp->hosts->path, &st);",
          "511:  if (ret) {",
          "512:   tcmu_dev_err(dev, \"glfs_lstat failed: %m\\n\");",
          "513:   goto unref;",
          "514:  }",
          "516:  if (st.st_size != tcmu_get_device_size(dev)) {",
          "517:   tcmu_dev_err(dev,",
          "518:                \"device size and backing size disagree: \"",
          "519:                \"device %lld backing %lld\\n\",",
          "520:                tcmu_get_device_size(dev),",
          "521:                (long long) st.st_size);",
          "522:   goto unref;",
          "523:  }",
          "530: fail:",
          "531:  if (gfsp->gfd)",
          "532:   glfs_close(gfsp->gfd);",
          "",
          "[Added Lines]",
          "513: fail:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "636:  return SAM_STAT_TASK_SET_FULL;",
          "637: }",
          "661: static int tcmu_glfs_reconfig(struct tcmu_device *dev,",
          "662:                               struct tcmulib_cfg_info *cfg)",
          "663: {",
          "664:  switch (cfg->type) {",
          "665:  case TCMULIB_CFG_DEV_SIZE:",
          "667:  case TCMULIB_CFG_DEV_CFGSTR:",
          "668:  case TCMULIB_CFG_WRITE_CACHE:",
          "669:  default:",
          "",
          "[Removed Lines]",
          "639: static int tcmu_glfs_get_image_size(struct tcmu_device *dev,",
          "640:                                     uint64_t new_size)",
          "641: {",
          "642:  struct glfs_state *gfsp = tcmu_get_dev_private(dev);",
          "643:  struct stat st;",
          "644:  int ret;",
          "646:  ret = glfs_lstat(gfsp->fs, gfsp->hosts->path, &st);",
          "647:  if (ret) {",
          "648:   tcmu_dev_err(dev, \"glfs_lstat failed: %m\\n\");",
          "649:   return ret;",
          "650:  }",
          "652:  if (st.st_size != new_size) {",
          "653:   tcmu_dev_err(dev, \"Mismatched sizes. glfs image size %lld. Requested new size %\" PRIu64 \".\\n\",",
          "654:                     (long long) st.st_size, new_size);",
          "655:   return -EINVAL;",
          "656:  }",
          "658:  return 0;",
          "659: }",
          "666:   return tcmu_glfs_get_image_size(dev, cfg->data.dev_size);",
          "",
          "[Added Lines]",
          "627:   return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "720:  \"  filepath:  The path of the backing file\";",
          "722: struct tcmur_handler glfs_handler = {",
          "731:  .reconfig       = tcmu_glfs_reconfig,",
          "733: };",
          "",
          "[Removed Lines]",
          "723:  .name  = \"Gluster glfs handler\",",
          "724:  .subtype = \"glfs\",",
          "725:  .cfg_desc = glfs_cfg_desc,",
          "727:  .open  = tcmu_glfs_open,",
          "728:  .close  = tcmu_glfs_close,",
          "729:  .read  = tcmu_glfs_read,",
          "730:  .write  = tcmu_glfs_write,",
          "732:  .flush  = tcmu_glfs_flush,",
          "",
          "[Added Lines]",
          "684:  .name           = \"Gluster glfs handler\",",
          "685:  .subtype        = \"glfs\",",
          "686:  .cfg_desc       = glfs_cfg_desc,",
          "688:  .open           = tcmu_glfs_open,",
          "689:  .close          = tcmu_glfs_close,",
          "690:  .read           = tcmu_glfs_read,",
          "691:  .write          = tcmu_glfs_write,",
          "693:  .flush          = tcmu_glfs_flush,",
          "",
          "---------------"
        ]
      }
    }
  ]
}