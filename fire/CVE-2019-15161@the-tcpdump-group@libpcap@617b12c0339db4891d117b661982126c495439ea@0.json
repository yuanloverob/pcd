{
  "cve_id": "CVE-2019-15161",
  "cve_desc": "rpcapd/daemon.c in libpcap before 1.9.1 mishandles certain length values because of reuse of a variable. This may open up an attack vector involving extra data at the end of a request.",
  "repo": "the-tcpdump-group/libpcap",
  "patch_hash": "617b12c0339db4891d117b661982126c495439ea",
  "patch_info": {
    "commit_hash": "617b12c0339db4891d117b661982126c495439ea",
    "repo": "the-tcpdump-group/libpcap",
    "commit_url": "https://github.com/the-tcpdump-group/libpcap/commit/617b12c0339db4891d117b661982126c495439ea",
    "files": [
      "rpcapd/daemon.c"
    ],
    "message": "Calculate the reply payload length in a local variable.\n\nUsing the same variable for the remaining request length and the reply\nlength is confusing at best and can cause errors at worst (if the\nrequest had extra stuff at the end, so that the variable is non-zero).\n\nThis addresses Include Security issue I8: [libpcap] Remote Packet\nCapture Daemon Parameter Reuse.",
    "before_after_code_files": [
      "rpcapd/daemon.c||rpcapd/daemon.c"
    ]
  },
  "patch_diff": {
    "rpcapd/daemon.c||rpcapd/daemon.c": [
      "File: rpcapd/daemon.c -> rpcapd/daemon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1335:  pcap_if_t *d;    // temp pointer needed to scan the interface chain",
      "1336:  struct pcap_addr *address;  // pcap structure that keeps a network address of an interface",
      "1337:  struct rpcap_findalldevs_if *findalldevs_if;// rpcap structure that packet all the data of an interface together",
      "1338:  uint16 nif = 0;    // counts the number of interface listed",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1338:  uint32 replylen;   // length of reply payload",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361:   return 0;",
      "1362:  }",
      "1365:  for (d = alldevs; d != NULL; d = d->next)",
      "1366:  {",
      "1367:   nif++;",
      "1369:   if (d->description)",
      "1371:   if (d->name)",
      "1376:   for (address = d->addresses; address != NULL; address = address->next)",
      "1377:   {",
      "",
      "[Removed Lines]",
      "1370:    plen+= strlen(d->description);",
      "1372:    plen+= strlen(d->name);",
      "1374:   plen+= sizeof(struct rpcap_findalldevs_if);",
      "",
      "[Added Lines]",
      "1367:  replylen = 0;",
      "1373:    replylen += strlen(d->description);",
      "1375:    replylen += strlen(d->name);",
      "1377:   replylen += sizeof(struct rpcap_findalldevs_if);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1384: #ifdef AF_INET6",
      "1385:    case AF_INET6:",
      "1386: #endif",
      "1388:     break;",
      "1390:    default:",
      "",
      "[Removed Lines]",
      "1387:     plen+= (sizeof(struct rpcap_sockaddr) * 4);",
      "",
      "[Added Lines]",
      "1390:     replylen += (sizeof(struct rpcap_sockaddr) * 4);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1400:   goto error;",
      "1402:  rpcap_createhdr((struct rpcap_header *) sendbuf, ver,",
      "1406:  for (d = alldevs; d != NULL; d = d->next)",
      "",
      "[Removed Lines]",
      "1403:      RPCAP_MSG_FINDALLIF_REPLY, nif, plen);",
      "",
      "[Added Lines]",
      "1406:      RPCAP_MSG_FINDALLIF_REPLY, nif, replylen);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c68aab726105d65920c2de8ccdb323a935de6a87",
      "candidate_info": {
        "commit_hash": "c68aab726105d65920c2de8ccdb323a935de6a87",
        "repo": "the-tcpdump-group/libpcap",
        "commit_url": "https://github.com/the-tcpdump-group/libpcap/commit/c68aab726105d65920c2de8ccdb323a935de6a87",
        "files": [
          "rpcapd/daemon.c"
        ],
        "message": "Check that values fit in findallif replies.\n\nFail if a name or description string's length doesn't fit in 16 bits, if\nthe count of interfaces doesn't fit in 16 bits, or if the entire reply\nlength doesn't fit in 32 bits.\n\n(cherry picked from commit 12455a9c0e9cd92b5f2d069331b4a0ed33092dea)",
        "before_after_code_files": [
          "rpcapd/daemon.c||rpcapd/daemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rpcapd/daemon.c||rpcapd/daemon.c"
          ],
          "candidate": [
            "rpcapd/daemon.c||rpcapd/daemon.c"
          ]
        }
      },
      "candidate_diff": {
        "rpcapd/daemon.c||rpcapd/daemon.c": [
          "File: rpcapd/daemon.c -> rpcapd/daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: static int is_url(const char *source);",
          "161: int",
          "162: daemon_serviceloop(SOCKET sockctrl, int isactive, char *passiveClients,",
          "163:     int nullAuthAllowed)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: #ifndef UINT16_MAX",
          "165: #define UINT16_MAX 65535U",
          "166: #endif",
          "168: #ifndef UINT32_MAX",
          "169: #define UINT32_MAX 4294967295U",
          "170: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1325: }",
          "1327: static int",
          "1328: daemon_msg_findallif_req(uint8 ver, struct daemon_slpars *pars, uint32 plen)",
          "1329: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1342: #define CHECK_AND_INCREASE_REPLY_LEN(itemlen) \\",
          "1343:  if (replylen + (itemlen) < replylen) { \\",
          "1344:   pcap_strlcpy(errmsgbuf, \"Reply length doesn't fit in 32 bits\", \\",
          "1345:       sizeof (errmsgbuf)); \\",
          "1346:   goto error; \\",
          "1347:  } \\",
          "1348:  replylen += (uint32)itemlen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1369:  {",
          "1370:   nif++;",
          "1379:   for (address = d->addresses; address != NULL; address = address->next)",
          "1380:   {",
          "",
          "[Removed Lines]",
          "1372:   if (d->description)",
          "1373:    replylen += strlen(d->description);",
          "1374:   if (d->name)",
          "1375:    replylen += strlen(d->name);",
          "1377:   replylen += sizeof(struct rpcap_findalldevs_if);",
          "",
          "[Added Lines]",
          "1395:   if (d->description) {",
          "1396:    size_t stringlen = strlen(d->description);",
          "1397:    if (stringlen > UINT16_MAX) {",
          "1398:     pcap_strlcpy(errmsgbuf,",
          "1399:         \"Description length doesn't fit in 16 bits\",",
          "1400:         sizeof (errmsgbuf));",
          "1401:     goto error;",
          "1402:    }",
          "1403:    CHECK_AND_INCREASE_REPLY_LEN(stringlen);",
          "1404:   }",
          "1405:   if (d->name) {",
          "1406:    size_t stringlen = strlen(d->name);",
          "1407:    if (stringlen > UINT16_MAX) {",
          "1408:     pcap_strlcpy(errmsgbuf,",
          "1409:         \"Name length doesn't fit in 16 bits\",",
          "1410:         sizeof (errmsgbuf));",
          "1411:     goto error;",
          "1412:    }",
          "1413:    CHECK_AND_INCREASE_REPLY_LEN(stringlen);",
          "1414:   }",
          "1416:   CHECK_AND_INCREASE_REPLY_LEN(sizeof(struct rpcap_findalldevs_if));",
          "1418:   uint16_t naddrs = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1387: #ifdef AF_INET6",
          "1388:    case AF_INET6:",
          "1389: #endif",
          "1391:     break;",
          "1393:    default:",
          "",
          "[Removed Lines]",
          "1390:     replylen += (sizeof(struct rpcap_sockaddr) * 4);",
          "",
          "[Added Lines]",
          "1430:     CHECK_AND_INCREASE_REPLY_LEN(sizeof(struct rpcap_sockaddr) * 4);",
          "1431:     if (naddrs == UINT16_MAX) {",
          "1432:      pcap_strlcpy(errmsgbuf,",
          "1433:          \"Number of interfaces doesn't fit in 16 bits\",",
          "1434:          sizeof (errmsgbuf));",
          "1435:      goto error;",
          "1436:     }",
          "1437:     naddrs++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1419:   memset(findalldevs_if, 0, sizeof(struct rpcap_findalldevs_if));",
          "1426:   findalldevs_if->desclen = htons(ldescr);",
          "1427:   findalldevs_if->namelen = htons(lname);",
          "",
          "[Removed Lines]",
          "1421:   if (d->description) ldescr = (short) strlen(d->description);",
          "1422:   else ldescr = 0;",
          "1423:   if (d->name) lname = (short) strlen(d->name);",
          "1424:   else lname = 0;",
          "",
          "[Added Lines]",
          "1472:   if (d->description)",
          "1473:    ldescr = (uint16) strlen(d->description);",
          "1474:   else",
          "1475:    ldescr = 0;",
          "1476:   if (d->name)",
          "1477:    lname = (uint16) strlen(d->name);",
          "1478:   else",
          "1479:    lname = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "080c59b49fccd2a1d5cd1a2525afde1d27454188",
      "candidate_info": {
        "commit_hash": "080c59b49fccd2a1d5cd1a2525afde1d27454188",
        "repo": "the-tcpdump-group/libpcap",
        "commit_url": "https://github.com/the-tcpdump-group/libpcap/commit/080c59b49fccd2a1d5cd1a2525afde1d27454188",
        "files": [
          "rpcapd/daemon.c"
        ],
        "message": "Calculate the reply payload length in a local variable.\n\nUsing the same variable for the remaining request length and the reply\nlength is confusing at best and can cause errors at worst (if the\nrequest had extra stuff at the end, so that the variable is non-zero).\n\nThis addresses Include Security issue I8: [libpcap] Remote Packet\nCapture Daemon Parameter Reuse.",
        "before_after_code_files": [
          "rpcapd/daemon.c||rpcapd/daemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rpcapd/daemon.c||rpcapd/daemon.c"
          ],
          "candidate": [
            "rpcapd/daemon.c||rpcapd/daemon.c"
          ]
        }
      },
      "candidate_diff": {
        "rpcapd/daemon.c||rpcapd/daemon.c": [
          "File: rpcapd/daemon.c -> rpcapd/daemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1571:  pcap_if_t *d;    // temp pointer needed to scan the interface chain",
          "1572:  struct pcap_addr *address;  // pcap structure that keeps a network address of an interface",
          "1573:  struct rpcap_findalldevs_if *findalldevs_if;// rpcap structure that packet all the data of an interface together",
          "1574:  uint16 nif = 0;    // counts the number of interface listed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1574:  uint32 replylen;   // length of reply payload",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1598:   return 0;",
          "1599:  }",
          "1602:  for (d = alldevs; d != NULL; d = d->next)",
          "1603:  {",
          "1604:   nif++;",
          "1606:   if (d->description)",
          "1608:   if (d->name)",
          "1613:   for (address = d->addresses; address != NULL; address = address->next)",
          "1614:   {",
          "",
          "[Removed Lines]",
          "1607:    plen+= strlen(d->description);",
          "1609:    plen+= strlen(d->name);",
          "1611:   plen+= sizeof(struct rpcap_findalldevs_if);",
          "",
          "[Added Lines]",
          "1604:  replylen = 0;",
          "1610:    replylen += strlen(d->description);",
          "1612:    replylen += strlen(d->name);",
          "1614:   replylen += sizeof(struct rpcap_findalldevs_if);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1621: #ifdef AF_INET6",
          "1622:    case AF_INET6:",
          "1623: #endif",
          "1625:     break;",
          "1627:    default:",
          "",
          "[Removed Lines]",
          "1624:     plen+= (sizeof(struct rpcap_sockaddr) * 4);",
          "",
          "[Added Lines]",
          "1627:     replylen += (sizeof(struct rpcap_sockaddr) * 4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1637:   goto error;",
          "1639:  rpcap_createhdr((struct rpcap_header *) sendbuf, ver,",
          "1643:  for (d = alldevs; d != NULL; d = d->next)",
          "",
          "[Removed Lines]",
          "1640:      RPCAP_MSG_FINDALLIF_REPLY, nif, plen);",
          "",
          "[Added Lines]",
          "1643:      RPCAP_MSG_FINDALLIF_REPLY, nif, replylen);",
          "",
          "---------------"
        ]
      }
    }
  ]
}