{
  "cve_id": "CVE-2017-13725",
  "cve_desc": "The IPv6 routing header parser in tcpdump before 4.9.2 has a buffer over-read in print-rt6.c:rt6_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "3c4d7c0ee30a30e5abff3d6d9586a3753101faf5",
  "patch_info": {
    "commit_hash": "3c4d7c0ee30a30e5abff3d6d9586a3753101faf5",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3c4d7c0ee30a30e5abff3d6d9586a3753101faf5",
    "files": [
      "print-rt6.c"
    ],
    "message": "CVE-2017-13725/IPv6 R.H.: Check for the existence of all fields before fetching them.\n\nDon't fetch the length field from the header until after we've checked\nfor the existence of a field at or after that field.\n\n(Found by code inspection, not by a capture.)",
    "before_after_code_files": [
      "print-rt6.c||print-rt6.c"
    ]
  },
  "patch_diff": {
    "print-rt6.c||print-rt6.c": [
      "File: print-rt6.c -> print-rt6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:  register const struct in6_addr *addr;",
      "47:  dp = (const struct ip6_rthdr *)bp;",
      "51:  ep = ndo->ndo_snapend;",
      "53:  ND_TCHECK(dp->ip6r_segleft);",
      "56:  ND_PRINT((ndo, \", type=%d\", dp->ip6r_type));",
      "57:  ND_PRINT((ndo, \", segleft=%d\", dp->ip6r_segleft));",
      "",
      "[Removed Lines]",
      "48:  len = dp->ip6r_len;",
      "",
      "[Added Lines]",
      "54:  len = dp->ip6r_len;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a95802aa0d8731412a9b5e621692e594046605bd",
      "candidate_info": {
        "commit_hash": "a95802aa0d8731412a9b5e621692e594046605bd",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/a95802aa0d8731412a9b5e621692e594046605bd",
        "files": [
          "ip6.h",
          "print-icmp6.c",
          "print-ip6.c",
          "print-ip6opts.c",
          "print-pgm.c",
          "print-rt6.c",
          "print-tcp.c",
          "print-udp.c"
        ],
        "message": "Use nd_ types in the IPv6 structures.\n\nAnd add the EXTRACT_U_1() calls as needed.\n\nChange some other EXTRACT_ calls that no longer need an & operator.",
        "before_after_code_files": [
          "ip6.h||ip6.h",
          "print-icmp6.c||print-icmp6.c",
          "print-ip6.c||print-ip6.c",
          "print-ip6opts.c||print-ip6opts.c",
          "print-pgm.c||print-pgm.c",
          "print-rt6.c||print-rt6.c",
          "print-tcp.c||print-tcp.c",
          "print-udp.c||print-udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-rt6.c||print-rt6.c"
          ],
          "candidate": [
            "print-rt6.c||print-rt6.c"
          ]
        }
      },
      "candidate_diff": {
        "ip6.h||ip6.h": [
          "File: ip6.h -> ip6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: struct ip6_hdr {",
          "77:  union {",
          "78:   struct ip6_hdrctl {",
          "83:   } ip6_un1;",
          "85:  } ip6_ctlun;",
          "88: } UNALIGNED;",
          "90: #define ip6_vfc  ip6_ctlun.ip6_un2_vfc",
          "92: #define ip6_flow ip6_ctlun.ip6_un1.ip6_un1_flow",
          "93: #define ip6_plen ip6_ctlun.ip6_un1.ip6_un1_plen",
          "94: #define ip6_nxt  ip6_ctlun.ip6_un1.ip6_un1_nxt",
          "",
          "[Removed Lines]",
          "91: #define IP6_VERSION(ip6_hdr) (((ip6_hdr)->ip6_vfc & 0xf0) >> 4)",
          "",
          "[Added Lines]",
          "91: #define IP6_VERSION(ip6_hdr) ((EXTRACT_U_1((ip6_hdr)->ip6_vfc) & 0xf0) >> 4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: struct ip6_ext {",
          "114: } UNALIGNED;",
          "117: struct ip6_hbh {",
          "121: } UNALIGNED;",
          "124: struct ip6_dest {",
          "128: } UNALIGNED;",
          "",
          "[Removed Lines]",
          "112:  uint8_t ip6e_nxt;",
          "113:  uint8_t ip6e_len;",
          "",
          "[Added Lines]",
          "112:  nd_uint8_t ip6e_nxt;",
          "113:  nd_uint8_t ip6e_len;",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "875:  const struct ip6_hdr *ip;",
          "876:  const struct ip6_hdr *oip;",
          "877:  const struct udphdr *ouh;",
          "879:  const u_char *ep;",
          "880:  u_int prot;",
          "",
          "[Removed Lines]",
          "878:  int dport;",
          "",
          "[Added Lines]",
          "878:  u_int dport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "935:        == NULL)",
          "936:     goto trunc;",
          "939:    switch (prot) {",
          "940:    case IPPROTO_TCP:",
          "941:     ND_PRINT((ndo,\", %s tcp port %s\",",
          "",
          "[Removed Lines]",
          "938:    dport = EXTRACT_BE_U_2(&ouh->uh_dport);",
          "",
          "[Added Lines]",
          "938:    dport = EXTRACT_BE_U_2(ouh->uh_dport);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:                                           udpport_string(ndo, dport)));",
          "949:     break;",
          "950:    default:",
          "952:      ip6addr_string(ndo, &oip->ip6_dst),",
          "954:     break;",
          "955:    }",
          "956:    break;",
          "",
          "[Removed Lines]",
          "951:     ND_PRINT((ndo,\", %s protocol %d port %d unreachable\",",
          "953:                                           oip->ip6_nxt, dport));",
          "",
          "[Added Lines]",
          "951:     ND_PRINT((ndo,\", %s protocol %u port %u unreachable\",",
          "953:                                           prot, dport));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1179:  if (!ND_TTEST(ip6->ip6_nxt))",
          "1180:   return NULL;",
          "1183:  hlen = sizeof(struct ip6_hdr);",
          "1185:  while (bp < ep) {",
          "",
          "[Removed Lines]",
          "1182:  nh = ip6->ip6_nxt;",
          "",
          "[Added Lines]",
          "1182:  nh = EXTRACT_U_1(ip6->ip6_nxt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1203:    hbh = (const struct ip6_hbh *)bp;",
          "1204:    if (!ND_TTEST(hbh->ip6h_len))",
          "1205:     return(NULL);",
          "1208:    break;",
          "",
          "[Removed Lines]",
          "1206:    nh = hbh->ip6h_nxt;",
          "1207:    hlen = (hbh->ip6h_len + 1) << 3;",
          "",
          "[Added Lines]",
          "1206:    nh = EXTRACT_U_1(hbh->ip6h_nxt);",
          "1207:    hlen = (EXTRACT_U_1(hbh->ip6h_len) + 1) << 3;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1212:    if (!ND_TTEST(fragh->ip6f_offlg))",
          "1213:     return(NULL);",
          "1216:     return(NULL);",
          "1218:    hlen = sizeof(struct ip6_frag);",
          "1219:    break;",
          "",
          "[Removed Lines]",
          "1215:    if ((EXTRACT_BE_U_2(&fragh->ip6f_offlg) & IP6F_OFF_MASK) != 0)",
          "1217:    nh = fragh->ip6f_nxt;",
          "",
          "[Added Lines]",
          "1215:    if ((EXTRACT_BE_U_2(fragh->ip6f_offlg) & IP6F_OFF_MASK) != 0)",
          "1217:    nh = EXTRACT_U_1(fragh->ip6f_nxt);",
          "",
          "---------------"
        ],
        "print-ip6.c||print-ip6.c": [
          "File: print-ip6.c -> print-ip6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  cp = (const u_char *)ip6;",
          "60:  advance = sizeof(struct ip6_hdr);",
          "62:  dst_addr = (const void *)&ip6->ip6_dst;",
          "64:  while (cp < ndo->ndo_snapend) {",
          "",
          "[Removed Lines]",
          "61:  nh = ip6->ip6_nxt;",
          "",
          "[Added Lines]",
          "61:  nh = EXTRACT_U_1(ip6->ip6_nxt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:    dp = (const struct ip6_rthdr *)cp;",
          "100:    ND_TCHECK(*dp);",
          "104:    case IPV6_RTHDR_TYPE_0:",
          "",
          "[Removed Lines]",
          "101:    len = dp->ip6r_len;",
          "102:    switch (dp->ip6r_type) {",
          "",
          "[Added Lines]",
          "101:    len = EXTRACT_U_1(dp->ip6r_len);",
          "102:    switch (EXTRACT_U_1(dp->ip6r_type)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:                 uint8_t        ph_nxt;",
          "173:         } ph;",
          "174:         struct cksum_vec vec[2];",
          "177:         memset(&ph, 0, sizeof(ph));",
          "178:         UNALIGNED_MEMCPY(&ph.ph_src, &ip6->ip6_src, sizeof (struct in6_addr));",
          "181:         case IPPROTO_HOPOPTS:",
          "182:         case IPPROTO_DSTOPTS:",
          "",
          "[Removed Lines]",
          "179:         switch (ip6->ip6_nxt) {",
          "",
          "[Added Lines]",
          "175:         u_int nh;",
          "180:         nh = EXTRACT_U_1(ip6->ip6_nxt);",
          "181:         switch (nh) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:           return;",
          "240:  }",
          "243:  len = payload_len + sizeof(struct ip6_hdr);",
          "244:  if (length < len)",
          "245:   ND_PRINT((ndo, \"truncated-ip6 - %u bytes missing!\",",
          "246:    len - length));",
          "248:         if (ndo->ndo_vflag) {",
          "250:             ND_PRINT((ndo, \"(\"));",
          "251: #if 0",
          "",
          "[Removed Lines]",
          "242:  payload_len = EXTRACT_BE_U_2(&ip6->ip6_plen);",
          "249:             flow = EXTRACT_BE_U_4(&ip6->ip6_flow);",
          "",
          "[Added Lines]",
          "244:  payload_len = EXTRACT_BE_U_2(ip6->ip6_plen);",
          "250:         nh = EXTRACT_U_1(ip6->ip6_nxt);",
          "252:             flow = EXTRACT_BE_U_4(ip6->ip6_flow);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "263: #endif",
          "265:             ND_PRINT((ndo, \"hlim %u, next-header %s (%u) payload length: %u) \",",
          "269:                          payload_len));",
          "270:         }",
          "",
          "[Removed Lines]",
          "266:                          ip6->ip6_hlim,",
          "267:                          tok2str(ipproto_values,\"unknown\",ip6->ip6_nxt),",
          "268:                          ip6->ip6_nxt,",
          "",
          "[Added Lines]",
          "269:                          EXTRACT_U_1(ip6->ip6_hlim),",
          "270:                          tok2str(ipproto_values,\"unknown\",nh),",
          "271:                          nh,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "279:  cp = (const u_char *)ip6;",
          "280:  advance = sizeof(struct ip6_hdr);",
          "282:  while (cp < ndo->ndo_snapend && advance > 0) {",
          "283:   if (len < (u_int)advance)",
          "284:    goto trunc;",
          "",
          "[Removed Lines]",
          "281:  nh = ip6->ip6_nxt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "print-ip6opts.c||print-ip6opts.c": [
          "File: print-ip6opts.c -> print-ip6opts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     u_int hbhlen = 0;",
          "179:     ND_TCHECK(dp->ip6h_len);",
          "181:     ND_TCHECK_LEN(dp, hbhlen);",
          "182:     ND_PRINT((ndo, \"HBH \"));",
          "183:     if (ndo->ndo_vflag)",
          "",
          "[Removed Lines]",
          "180:     hbhlen = (dp->ip6h_len + 1) << 3;",
          "",
          "[Added Lines]",
          "180:     hbhlen = (EXTRACT_U_1(dp->ip6h_len) + 1) << 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:     u_int dstoptlen = 0;",
          "199:     ND_TCHECK(dp->ip6d_len);",
          "201:     ND_TCHECK_LEN(dp, dstoptlen);",
          "202:     ND_PRINT((ndo, \"DSTOPT \"));",
          "203:     if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "200:     dstoptlen = (dp->ip6d_len + 1) << 3;",
          "",
          "[Added Lines]",
          "200:     dstoptlen = (EXTRACT_U_1(dp->ip6d_len) + 1) << 3;",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  dport = EXTRACT_BE_U_2(&pgm->pgm_dport);",
          "183:  if (ip6) {",
          "185:    ND_PRINT((ndo, \"%s.%s > %s.%s: \",",
          "186:     ip6addr_string(ndo, &ip6->ip6_src),",
          "187:     tcpport_string(ndo, sport),",
          "",
          "[Removed Lines]",
          "184:   if (ip6->ip6_nxt == IPPROTO_PGM) {",
          "",
          "[Added Lines]",
          "184:   if (EXTRACT_U_1(ip6->ip6_nxt) == IPPROTO_PGM) {",
          "",
          "---------------"
        ],
        "print-rt6.c||print-rt6.c": [
          "File: print-rt6.c -> print-rt6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  register const struct ip6_rthdr *dp;",
          "42:  register const struct ip6_rthdr0 *dp0;",
          "43:  register const u_char *ep;",
          "45:  register const struct in6_addr *addr;",
          "47:  dp = (const struct ip6_rthdr *)bp;",
          "",
          "[Removed Lines]",
          "44:  int i, len;",
          "",
          "[Added Lines]",
          "44:  u_int i, len, type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  ND_TCHECK(dp->ip6r_segleft);",
          "60:  case IPV6_RTHDR_TYPE_0:",
          "62:   dp0 = (const struct ip6_rthdr0 *)dp;",
          "",
          "[Removed Lines]",
          "54:  len = dp->ip6r_len;",
          "56:  ND_PRINT((ndo, \", type=%d\", dp->ip6r_type));",
          "57:  ND_PRINT((ndo, \", segleft=%d\", dp->ip6r_segleft));",
          "59:  switch (dp->ip6r_type) {",
          "",
          "[Added Lines]",
          "54:  len = EXTRACT_U_1(dp->ip6r_len);",
          "56:  type = EXTRACT_U_1(dp->ip6r_type);",
          "57:  ND_PRINT((ndo, \", type=%u\", type));",
          "58:  ND_PRINT((ndo, \", segleft=%u\", EXTRACT_U_1(dp->ip6r_segleft)));",
          "60:  switch (type) {",
          "",
          "---------------"
        ],
        "print-tcp.c||print-tcp.c": [
          "File: print-tcp.c -> print-tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:                 return;",
          "188:         }",
          "193:         if (ip6) {",
          "195:                         ND_PRINT((ndo, \"%s.%s > %s.%s: \",",
          "196:                                      ip6addr_string(ndo, &ip6->ip6_src),",
          "197:                                      tcpport_string(ndo, sport),",
          "",
          "[Removed Lines]",
          "190:         sport = EXTRACT_BE_U_2(&tp->th_sport);",
          "191:         dport = EXTRACT_BE_U_2(&tp->th_dport);",
          "194:                 if (ip6->ip6_nxt == IPPROTO_TCP) {",
          "",
          "[Added Lines]",
          "190:         sport = EXTRACT_BE_U_2(tp->th_sport);",
          "191:         dport = EXTRACT_BE_U_2(tp->th_dport);",
          "194:                 if (EXTRACT_U_1(ip6->ip6_nxt) == IPPROTO_TCP) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:                 return;",
          "225:         }",
          "232:         if (ndo->ndo_qflag) {",
          "233:                 ND_PRINT((ndo, \"tcp %d\", length - hlen));",
          "",
          "[Removed Lines]",
          "227:         seq = EXTRACT_BE_U_4(&tp->th_seq);",
          "228:         ack = EXTRACT_BE_U_4(&tp->th_ack);",
          "229:         win = EXTRACT_BE_U_2(&tp->th_win);",
          "230:         urp = EXTRACT_BE_U_2(&tp->th_urp);",
          "",
          "[Added Lines]",
          "227:         seq = EXTRACT_BE_U_4(tp->th_seq);",
          "228:         ack = EXTRACT_BE_U_4(tp->th_ack);",
          "229:         win = EXTRACT_BE_U_2(tp->th_win);",
          "230:         urp = EXTRACT_BE_U_2(tp->th_urp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:                 if (IP_V(ip) == 4) {",
          "373:                         if (ND_TTEST2(tp->th_sport, length)) {",
          "374:                                 sum = tcp_cksum(ndo, ip, tp, length);",
          "377:                                 ND_PRINT((ndo, \", cksum 0x%04x\", tcp_sum));",
          "378:                                 if (sum != 0)",
          "",
          "[Removed Lines]",
          "375:                                 tcp_sum = EXTRACT_BE_U_2(&tp->th_sum);",
          "",
          "[Added Lines]",
          "375:                                 tcp_sum = EXTRACT_BE_U_2(tp->th_sum);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "384:                 } else if (IP_V(ip) == 6 && ip6->ip6_plen) {",
          "385:                         if (ND_TTEST2(tp->th_sport, length)) {",
          "386:                                 sum = tcp6_cksum(ndo, ip6, tp, length);",
          "389:                                 ND_PRINT((ndo, \", cksum 0x%04x\", tcp_sum));",
          "390:                                 if (sum != 0)",
          "",
          "[Removed Lines]",
          "387:                                 tcp_sum = EXTRACT_BE_U_2(&tp->th_sum);",
          "",
          "[Added Lines]",
          "387:                                 tcp_sum = EXTRACT_BE_U_2(tp->th_sum);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "871:                 MD5_Update(&ctx, (const char *)&ip->ip_dst, sizeof(ip->ip_dst));",
          "872:                 MD5_Update(&ctx, (const char *)&zero_proto, sizeof(zero_proto));",
          "873:                 MD5_Update(&ctx, (const char *)&ip->ip_p, sizeof(ip->ip_p));",
          "875:                 tlen = htons(tlen);",
          "876:                 MD5_Update(&ctx, (const char *)&tlen, sizeof(tlen));",
          "877:         } else if (IP_V(ip) == 6) {",
          "878:                 ip6 = (const struct ip6_hdr *)ip;",
          "879:                 MD5_Update(&ctx, (const char *)&ip6->ip6_src, sizeof(ip6->ip6_src));",
          "880:                 MD5_Update(&ctx, (const char *)&ip6->ip6_dst, sizeof(ip6->ip6_dst));",
          "882:                 MD5_Update(&ctx, (const char *)&len32, sizeof(len32));",
          "883:                 nxt = 0;",
          "884:                 MD5_Update(&ctx, (const char *)&nxt, sizeof(nxt));",
          "",
          "[Removed Lines]",
          "874:                 tlen = EXTRACT_BE_U_2(&ip->ip_len) - IP_HL(ip) * 4;",
          "881:                 len32 = htonl(EXTRACT_BE_U_2(&ip6->ip6_plen));",
          "",
          "[Added Lines]",
          "874:                 tlen = EXTRACT_BE_U_2(ip->ip_len) - IP_HL(ip) * 4;",
          "881:                 len32 = htonl(EXTRACT_BE_U_2(ip6->ip6_plen));",
          "",
          "---------------"
        ],
        "print-udp.c||print-udp.c": [
          "File: print-udp.c -> print-udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:   ip6 = NULL;",
          "326:  if (ip6) {",
          "328:    if (sport == -1) {",
          "329:     ND_PRINT((ndo, \"%s > %s: \",",
          "330:      ip6addr_string(ndo, &ip6->ip6_src),",
          "",
          "[Removed Lines]",
          "327:   if (ip6->ip6_nxt == IPPROTO_UDP) {",
          "",
          "[Added Lines]",
          "327:   if (EXTRACT_U_1(ip6->ip6_nxt) == IPPROTO_UDP) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}