{
  "cve_id": "CVE-2023-48795",
  "cve_desc": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
  "repo": "connectbot/sshlib",
  "patch_hash": "5c8b534f6e97db7ac0e0e579331213aa25c173ab",
  "patch_info": {
    "commit_hash": "5c8b534f6e97db7ac0e0e579331213aa25c173ab",
    "repo": "connectbot/sshlib",
    "commit_url": "https://github.com/connectbot/sshlib/commit/5c8b534f6e97db7ac0e0e579331213aa25c173ab",
    "files": [
      "src/main/java/com/trilead/ssh2/transport/KexManager.java",
      "src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java",
      "src/main/java/com/trilead/ssh2/transport/TransportConnection.java",
      "src/main/java/com/trilead/ssh2/transport/TransportManager.java"
    ],
    "message": "Implement kex-strict from OpenSSH\n\nImplement's OpenSSH's mitigation for the Terrapin attack.",
    "before_after_code_files": [
      "src/main/java/com/trilead/ssh2/transport/KexManager.java||src/main/java/com/trilead/ssh2/transport/KexManager.java",
      "src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java||src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java",
      "src/main/java/com/trilead/ssh2/transport/TransportConnection.java||src/main/java/com/trilead/ssh2/transport/TransportConnection.java",
      "src/main/java/com/trilead/ssh2/transport/TransportManager.java||src/main/java/com/trilead/ssh2/transport/TransportManager.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/trilead/ssh2/transport/KexManager.java||src/main/java/com/trilead/ssh2/transport/KexManager.java": [
      "File: src/main/java/com/trilead/ssh2/transport/KexManager.java -> src/main/java/com/trilead/ssh2/transport/KexManager.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:  private static final String EXT_INFO_C = \"ext-info-c\";",
      "106:  private KexState kxs;",
      "107:  private int kexCount = 0;",
      "108:  private KeyMaterial km;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:  private static final String KEX_STRICT_C_OPENSSH = \"kex-strict-c-v00@openssh.com\";",
      "107:  private static final String KEX_STRICT_S_OPENSSH = \"kex-strict-s-v00@openssh.com\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "193:   return (a[0].equals(b[0]));",
      "194:  }",
      "196:  private boolean isGuessOK(KexParameters cpar, KexParameters spar)",
      "197:  {",
      "198:   if (cpar == null || spar == null)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199:  private boolean containsAlgo(String[] algos, String targetAlgo)",
      "200:  {",
      "201:   if (algos == null || targetAlgo == null)",
      "202:    return false;",
      "204:   for (String algo : algos) {",
      "205:    if (targetAlgo.equals(algo))",
      "206:     return true;",
      "207:   }",
      "209:   return false;",
      "210:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "214:   {",
      "215:    np.kex_algo = getFirstMatch(client.kex_algorithms, server.kex_algorithms);",
      "217:    log.log(20, \"kex_algo=\" + np.kex_algo);",
      "219:    np.server_host_key_algo = getFirstMatch(client.server_host_key_algorithms,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "233:    np.isStrictKex = containsAlgo(server.kex_algorithms, KEX_STRICT_S_OPENSSH);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "305:  private static void addExtraKexAlgorithms(CryptoWishList cwl) {",
      "306:   String[] oldKexAlgorithms = cwl.kexAlgorithms;",
      "308:   for (String algo : oldKexAlgorithms)",
      "309:   {",
      "311:     kexAlgorithms.add(algo);",
      "312:   }",
      "313:   kexAlgorithms.add(EXT_INFO_C);",
      "314:   cwl.kexAlgorithms = kexAlgorithms.toArray(new String[0]);",
      "315:  }",
      "",
      "[Removed Lines]",
      "307:   List<String> kexAlgorithms = new ArrayList<>(oldKexAlgorithms.length + 1);",
      "310:    if (!algo.equals(EXT_INFO_C))",
      "",
      "[Added Lines]",
      "325:   List<String> kexAlgorithms = new ArrayList<>(oldKexAlgorithms.length + 2);",
      "328:    if (!algo.equals(EXT_INFO_C) && !algo.equals(KEX_STRICT_C_OPENSSH))",
      "332:   kexAlgorithms.add(KEX_STRICT_C_OPENSSH);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "747:   throw new IllegalStateException(\"Unkown KEX method! (\" + kxs.np.kex_algo + \")\");",
      "748:  }",
      "749: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769:  public boolean isStrictKex() {",
      "770:   return kxs.np.isStrictKex;",
      "771:  }",
      "",
      "---------------"
    ],
    "src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java||src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java": [
      "File: src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java -> src/main/java/com/trilead/ssh2/transport/NegotiatedParameters.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: public class NegotiatedParameters",
      "10: {",
      "11:  public boolean guessOK;",
      "12:  public String kex_algo;",
      "13:  public String server_host_key_algo;",
      "14:  public String enc_algo_client_to_server;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:  public boolean isStrictKex;",
      "",
      "---------------"
    ],
    "src/main/java/com/trilead/ssh2/transport/TransportConnection.java||src/main/java/com/trilead/ssh2/transport/TransportConnection.java": [
      "File: src/main/java/com/trilead/ssh2/transport/TransportConnection.java -> src/main/java/com/trilead/ssh2/transport/TransportConnection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "361:   can_recv_compress = true;",
      "362:   can_send_compress = true;",
      "363:  }",
      "364: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "368:  public void resetSendSequenceNumber() {",
      "369:   send_seq_number = 0;",
      "370:  }",
      "375:  public void resetReceiveSequenceNumber() {",
      "376:   recv_seq_number = 0;",
      "377:  }",
      "",
      "---------------"
    ],
    "src/main/java/com/trilead/ssh2/transport/TransportManager.java||src/main/java/com/trilead/ssh2/transport/TransportManager.java": [
      "File: src/main/java/com/trilead/ssh2/transport/TransportManager.java -> src/main/java/com/trilead/ssh2/transport/TransportManager.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:  int port;",
      "123:  Socket sock;",
      "127:  boolean flagKexOngoing = false;",
      "128:  boolean connectionClosed = false;",
      "130:  Throwable reasonClosedCause = null;",
      "",
      "[Removed Lines]",
      "125:  Object connectionSemaphore = new Object();",
      "",
      "[Added Lines]",
      "125:  private final Object connectionSemaphore = new Object();",
      "129:  boolean firstKexFinished = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "404:  }",
      "406:  public void kexFinished() {",
      "407:   synchronized (connectionSemaphore)",
      "408:   {",
      "409:    flagKexOngoing = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408:   firstKexFinished = true;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "419:  public void changeRecvCipher(BlockCipher bc, MAC mac)",
      "420:  {",
      "421:   tc.changeRecvCipher(bc, mac);",
      "422:  }",
      "424:  public void changeSendCipher(BlockCipher bc, MAC mac)",
      "425:  {",
      "426:   tc.changeSendCipher(bc, mac);",
      "427:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:   if (km.isStrictKex())",
      "426:    tc.resetReceiveSequenceNumber();",
      "432:   if (km.isStrictKex())",
      "433:    tc.resetSendSequenceNumber();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "532:    int type = msg[0] & 0xff;",
      "566:    if (type == Packets.SSH_MSG_DISCONNECT)",
      "567:    {",
      "568:     TypesReader tr = new TypesReader(msg, 0, msglen);",
      "",
      "[Removed Lines]",
      "534:    if (type == Packets.SSH_MSG_IGNORE)",
      "535:     continue;",
      "537:    if (type == Packets.SSH_MSG_DEBUG)",
      "538:    {",
      "539:     if (log.isEnabled())",
      "540:     {",
      "541:      TypesReader tr = new TypesReader(msg, 0, msglen);",
      "542:      tr.readByte();",
      "543:      tr.readBoolean();",
      "544:      StringBuffer debugMessageBuffer = new StringBuffer();",
      "545:      debugMessageBuffer.append(tr.readString(\"UTF-8\"));",
      "547:      for (int i = 0; i < debugMessageBuffer.length(); i++)",
      "548:      {",
      "549:       char c = debugMessageBuffer.charAt(i);",
      "551:       if ((c >= 32) && (c <= 126))",
      "552:        continue;",
      "553:       debugMessageBuffer.setCharAt(i, '\\uFFFD');",
      "554:      }",
      "556:      log.log(50, \"DEBUG Message from remote: '\" + debugMessageBuffer.toString() + \"'\");",
      "557:     }",
      "558:     continue;",
      "559:    }",
      "561:    if (type == Packets.SSH_MSG_UNIMPLEMENTED)",
      "562:    {",
      "563:     throw new IOException(\"Peer sent UNIMPLEMENTED message, that should not happen.\");",
      "564:    }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "615:     continue;",
      "616:    }",
      "618:    if (type == Packets.SSH_MSG_USERAUTH_SUCCESS) {",
      "619:     tc.startCompression();",
      "620:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:    if (!firstKexFinished && km.isStrictKex())",
      "597:    {",
      "598:     throw new IOException(\"Unexpected packet received when kex-strict enabled\");",
      "599:    }",
      "601:    if (type == Packets.SSH_MSG_IGNORE)",
      "602:     continue;",
      "604:    if (type == Packets.SSH_MSG_DEBUG)",
      "605:    {",
      "606:     if (log.isEnabled())",
      "607:     {",
      "608:      TypesReader tr = new TypesReader(msg, 0, msglen);",
      "609:      tr.readByte();",
      "610:      tr.readBoolean();",
      "611:      StringBuffer debugMessageBuffer = new StringBuffer();",
      "612:      debugMessageBuffer.append(tr.readString(\"UTF-8\"));",
      "614:      for (int i = 0; i < debugMessageBuffer.length(); i++)",
      "615:      {",
      "616:       char c = debugMessageBuffer.charAt(i);",
      "618:       if ((c >= 32) && (c <= 126))",
      "619:        continue;",
      "620:       debugMessageBuffer.setCharAt(i, '\\uFFFD');",
      "621:      }",
      "623:      log.log(50, \"DEBUG Message from remote: '\" + debugMessageBuffer.toString() + \"'\");",
      "624:     }",
      "625:     continue;",
      "626:    }",
      "628:    if (type == Packets.SSH_MSG_UNIMPLEMENTED)",
      "629:    {",
      "630:     throw new IOException(\"Peer sent UNIMPLEMENTED message, that should not happen.\");",
      "631:    }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0b43bbffedc3f8c32914c1b49670a2f8fb2d47a",
      "candidate_info": {
        "commit_hash": "b0b43bbffedc3f8c32914c1b49670a2f8fb2d47a",
        "repo": "connectbot/sshlib",
        "commit_url": "https://github.com/connectbot/sshlib/commit/b0b43bbffedc3f8c32914c1b49670a2f8fb2d47a",
        "files": [
          "src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java"
        ],
        "message": "ext-info: add upper limit check for compat\n\nThis matches what OpenSSH does.",
        "before_after_code_files": [
          "src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java||src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/connectbot/sshlib/pull/295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java||src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java": [
          "File: src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java -> src/main/java/com/trilead/ssh2/packets/PacketExtInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   int numExtensions = tr.readUINT32();",
          "57:   Map<String, String> extNameToValue_ = new HashMap<>(numExtensions);",
          "58:   for (int i = 0; i < numExtensions; i++)",
          "59:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   if (numExtensions >= 1024) {",
          "58:    throw new IOException(\"Too many entries in ext info packet\");",
          "59:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09f32b3577e867a1ffa0ac0032b72b1828b64dd3",
      "candidate_info": {
        "commit_hash": "09f32b3577e867a1ffa0ac0032b72b1828b64dd3",
        "repo": "connectbot/sshlib",
        "commit_url": "https://github.com/connectbot/sshlib/commit/09f32b3577e867a1ffa0ac0032b72b1828b64dd3",
        "files": [
          "src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java",
          "src/main/java/com/trilead/ssh2/transport/KexManager.java"
        ],
        "message": "Clone CryptoWishList when filtering\n\nTo avoid overwriting the original CryptoWishList, clone it before\nmodifying it. Additionally move the \"ext-info-c\" into the filtering\nstage so that even custom lists of algorithms have it included.",
        "before_after_code_files": [
          "src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java||src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java",
          "src/main/java/com/trilead/ssh2/transport/KexManager.java||src/main/java/com/trilead/ssh2/transport/KexManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/connectbot/sshlib/pull/295"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/com/trilead/ssh2/transport/KexManager.java||src/main/java/com/trilead/ssh2/transport/KexManager.java"
          ],
          "candidate": [
            "src/main/java/com/trilead/ssh2/transport/KexManager.java||src/main/java/com/trilead/ssh2/transport/KexManager.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java||src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java": [
          "File: src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java -> src/main/java/com/trilead/ssh2/crypto/CryptoWishList.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: {",
          "26: }",
          "",
          "[Removed Lines]",
          "16: public class CryptoWishList",
          "18:  public String[] kexAlgorithms = KexManager.getDefaultKexAlgorithmList();",
          "19:  public String[] serverHostKeyAlgorithms = KexManager.getDefaultServerHostkeyAlgorithmList();",
          "20:  public String[] c2s_enc_algos = BlockCipherFactory.getDefaultCipherList();",
          "21:  public String[] s2c_enc_algos = BlockCipherFactory.getDefaultCipherList();",
          "22:  public String[] c2s_mac_algos = MACs.getMacList();",
          "23:  public String[] s2c_mac_algos = MACs.getMacList();",
          "24:  public String[] c2s_comp_algos = CompressionFactory.getDefaultCompressorList();",
          "25:  public String[] s2c_comp_algos = CompressionFactory.getDefaultCompressorList();",
          "",
          "[Added Lines]",
          "16: public class CryptoWishList implements Cloneable",
          "18:  public CryptoWishList() {",
          "19:   kexAlgorithms = KexManager.getDefaultKexAlgorithmList();",
          "20:   serverHostKeyAlgorithms = KexManager.getDefaultServerHostkeyAlgorithmList();",
          "21:   c2s_enc_algos = BlockCipherFactory.getDefaultCipherList();",
          "22:   s2c_enc_algos = BlockCipherFactory.getDefaultCipherList();",
          "23:   c2s_mac_algos = MACs.getMacList();",
          "24:   s2c_mac_algos = MACs.getMacList();",
          "25:   c2s_comp_algos = CompressionFactory.getDefaultCompressorList();",
          "26:   s2c_comp_algos = CompressionFactory.getDefaultCompressorList();",
          "27:  }",
          "29:  public CryptoWishList(CryptoWishList other) {",
          "30:   kexAlgorithms = other.kexAlgorithms.clone();",
          "31:   serverHostKeyAlgorithms = other.serverHostKeyAlgorithms.clone();",
          "32:   c2s_enc_algos = other.c2s_enc_algos.clone();",
          "33:   s2c_enc_algos = other.s2c_enc_algos.clone();",
          "34:   c2s_mac_algos = other.c2s_mac_algos.clone();",
          "35:   s2c_mac_algos = other.s2c_mac_algos.clone();",
          "36:   c2s_comp_algos = other.c2s_comp_algos.clone();",
          "37:   s2c_comp_algos = other.s2c_comp_algos.clone();",
          "38:  }",
          "40:  public String[] kexAlgorithms;",
          "41:  public String[] serverHostKeyAlgorithms;",
          "42:  public String[] c2s_enc_algos;",
          "43:  public String[] s2c_enc_algos;",
          "44:  public String[] c2s_mac_algos;",
          "45:  public String[] s2c_mac_algos;",
          "46:  public String[] c2s_comp_algos;",
          "47:  public String[] s2c_comp_algos;",
          "49:  @Override",
          "50:  public CryptoWishList clone() {",
          "51:   return new CryptoWishList(this);",
          "52:  }",
          "",
          "---------------"
        ],
        "src/main/java/com/trilead/ssh2/transport/KexManager.java||src/main/java/com/trilead/ssh2/transport/KexManager.java": [
          "File: src/main/java/com/trilead/ssh2/transport/KexManager.java -> src/main/java/com/trilead/ssh2/transport/KexManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   KEX_ALGS.add(\"diffie-hellman-group-exchange-sha1\");",
          "99:   KEX_ALGS.add(\"diffie-hellman-group14-sha1\");",
          "100:   KEX_ALGS.add(\"diffie-hellman-group1-sha1\");",
          "104:  }",
          "106:  private KexState kxs;",
          "107:  private int kexCount = 0;",
          "108:  private KeyMaterial km;",
          "",
          "[Removed Lines]",
          "103:   KEX_ALGS.add(\"ext-info-c\");",
          "",
          "[Added Lines]",
          "104:  private static final String EXT_INFO_C = \"ext-info-c\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:  public synchronized void initiateKEX(CryptoWishList cwl, DHGexParameters dhgex) throws IOException",
          "281:  {",
          "283:   filterHostKeyTypes(nextKEXcryptoWishList);",
          "285:   nextKEXdhgexParameters = dhgex;",
          "",
          "[Removed Lines]",
          "282:   nextKEXcryptoWishList = cwl;",
          "",
          "[Added Lines]",
          "282:   nextKEXcryptoWishList = cwl.clone();",
          "284:   addExtraKexAlgorithms(nextKEXcryptoWishList);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:   }",
          "296:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:  private static void addExtraKexAlgorithms(CryptoWishList cwl) {",
          "306:   String[] oldKexAlgorithms = cwl.kexAlgorithms;",
          "307:   List<String> kexAlgorithms = new ArrayList<>(oldKexAlgorithms.length + 1);",
          "308:   for (String algo : oldKexAlgorithms)",
          "309:   {",
          "310:    if (!algo.equals(EXT_INFO_C))",
          "311:     kexAlgorithms.add(algo);",
          "312:   }",
          "313:   kexAlgorithms.add(EXT_INFO_C);",
          "314:   cwl.kexAlgorithms = kexAlgorithms.toArray(new String[0]);",
          "315:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}