{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "0dfb437a32f9b9a8a0ae61d8c43c47417651f44e",
      "candidate_info": {
        "commit_hash": "0dfb437a32f9b9a8a0ae61d8c43c47417651f44e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0dfb437a32f9b9a8a0ae61d8c43c47417651f44e",
        "files": [
          "Doc/library/urllib.parse.rst",
          "Doc/using/configure.rst",
          "Doc/using/ios.rst",
          "Doc/using/mac.rst",
          "Mac/Resources/app-store-compliance.patch",
          "Makefile.pre.in",
          "Misc/NEWS.d/next/Build/2024-06-25-15-29-27.gh-issue-120522.5_n515.rst",
          "configure",
          "configure.ac"
        ],
        "message": "[3.13] gh-120522: Add a `--with-app-store-compliance` configure option to patch out problematic code (GH-120984) (#121173)\n\ngh-120522: Add a `--with-app-store-compliance` configure option to patch out problematic code (GH-120984)\n\n* Add --app-store-compliance configuration option.\n\n* Added blurb.\n\n* Correct tab-vs-spaces formatting issue.\n\n* Correct source file name in docs.\n\n\n\n* Correct source code reference in Mac docs\n\n\n\n* Only apply the patch forward, and ensure the working directory is correct.\n\n* Make patching reslient to multiple builds.\n\n* Documentation fixes found during review\n\n\n\n* Documentation and configure.ac syntax improvements\n\n\n\n* Regenerate configure script.\n\n* Silence the patch echo output.\n\n---------\n\n(cherry picked from commit 48cd104b0cf05dad8958efa9cb9666c029ef9201)\n\nCo-authored-by: Russell Keith-Magee <russell@keith-magee.com>\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>\nCo-authored-by: Erlend E. Aasland <erlend.aasland@protonmail.com>",
        "before_after_code_files": [
          "Makefile.pre.in||Makefile.pre.in",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.pre.in||Makefile.pre.in": [
          "File: Makefile.pre.in -> Makefile.pre.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: EXE=  @EXEEXT@",
          "179: BUILDEXE= @BUILDEXEEXT@",
          "181: # Short name and location for Mac OS X Python framework",
          "182: UNIVERSALSDK=@UNIVERSALSDK@",
          "183: PYTHONFRAMEWORK= @PYTHONFRAMEWORK@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # Name of the patch file to apply for app store compliance",
          "182: APP_STORE_COMPLIANCE_PATCH=@APP_STORE_COMPLIANCE_PATCH@",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "691:  @grep -E '^[A-Za-z][-A-Za-z0-9]+:' Makefile | awk -F : '{print $$1}'",
          "693: .PHONY: build_all",
          "695:   gdbhooks Programs/_testembed scripts checksharedmods rundsymutil",
          "697: .PHONY: build_wasm",
          "",
          "[Removed Lines]",
          "694: build_all: check-clean-src $(BUILDPYTHON) platform sharedmods \\",
          "",
          "[Added Lines]",
          "697: build_all: check-clean-src @APP_STORE_COMPLIANCE_PATCH_TARGET@ $(BUILDPYTHON) platform sharedmods \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "927: $(BUILDPYTHON)-gdb.py: $(SRC_GDB_HOOKS)",
          "928:  $(INSTALL_DATA) $(SRC_GDB_HOOKS) $(BUILDPYTHON)-gdb.py",
          "930: # This rule is here for OPENSTEP/Rhapsody/MacOSX. It builds a temporary",
          "931: # minimal framework (not including the Lib directory and such) in the current",
          "932: # directory.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933: # Compliance with app stores (such as iOS and macOS) sometimes requires making",
          "934: # modifications to the Python standard library. If enabled, apply the patch of",
          "935: # known modifications to the source tree before building. The patch will be",
          "936: # applied in a dry-run mode (validating, but not applying the patch) on builds",
          "937: # that *have* a compliance patch, but where compliance has not been enabled.",
          "938: build/app-store-compliant:",
          "939:  patch @APP_STORE_COMPLIANCE_PATCH_FLAGS@ --forward --strip=1 --directory=\"$(srcdir)\" --input \"$(APP_STORE_COMPLIANCE_PATCH)\"",
          "940:  @if test \"@APP_STORE_COMPLIANCE_PATCH_FLAGS@\" == \"\"; then \\",
          "941:   mkdir -p build ; \\",
          "942:   echo \"$(APP_STORE_COMPLIANCE_PATCH)\" > build/app-store-compliant ; \\",
          "943:  fi",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: AC_DEFINE_UNQUOTED([_PYTHONFRAMEWORK], [\"${PYTHONFRAMEWORK}\"],",
          "696:                    [framework name])",
          "698: AC_SUBST([_PYTHON_HOST_PLATFORM])",
          "699: if test \"$cross_compiling\" = yes; then",
          "700:  case \"$host\" in",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: dnl quadrigraphs \"@<:@\" and \"@:>@\" produce \"[\" and \"]\" in the output",
          "699: AC_MSG_CHECKING([for --with-app-store-compliance])",
          "700: AC_ARG_WITH(",
          "701:   [app_store_compliance],",
          "702:   [AS_HELP_STRING(",
          "703:     [--with-app-store-compliance=@<:@PATCH-FILE@:>@],",
          "704:     [Enable any patches required for compiliance with app stores.",
          "705:      Optional PATCH-FILE specifies the custom patch to apply.]",
          "706:   )],[",
          "707:     case \"$withval\" in",
          "708:     yes)",
          "709:       case $ac_sys_system in",
          "710:         Darwin|iOS)",
          "711:           # iOS is able to share the macOS patch",
          "712:           APP_STORE_COMPLIANCE_PATCH=\"Mac/Resources/app-store-compliance.patch\"",
          "713:           APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "714:           APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "715:           ;;",
          "717:       esac",
          "718:       AC_MSG_RESULT([applying default app store compliance patch])",
          "719:       ;;",
          "721:       APP_STORE_COMPLIANCE_PATCH=\"${withval}\"",
          "722:       APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "723:       APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "724:       AC_MSG_RESULT([applying custom app store compliance patch])",
          "725:       ;;",
          "726:     esac",
          "727:   ],[",
          "728:     case $ac_sys_system in",
          "729:       iOS)",
          "730:         # Always apply the compliance patch on iOS; we can use the macOS patch",
          "731:         APP_STORE_COMPLIANCE_PATCH=\"Mac/Resources/app-store-compliance.patch\"",
          "732:         APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "733:         APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "734:         AC_MSG_RESULT([applying default app store compliance patch])",
          "735:         ;;",
          "736:       Darwin)",
          "737:         # Always *check* the compliance patch on macOS",
          "738:         APP_STORE_COMPLIANCE_PATCH=\"Mac/Resources/app-store-compliance.patch\"",
          "739:         APP_STORE_COMPLIANCE_PATCH_TARGET=\"build/app-store-compliant\"",
          "740:         APP_STORE_COMPLIANCE_PATCH_FLAGS=\"--dry-run\"",
          "741:         AC_MSG_RESULT([checking (not applying) default app store compliance patch])",
          "742:         ;;",
          "744:         # No app compliance patching on any other platform",
          "745:         APP_STORE_COMPLIANCE_PATCH=",
          "746:         APP_STORE_COMPLIANCE_PATCH_TARGET=",
          "747:         APP_STORE_COMPLIANCE_PATCH_FLAGS=",
          "748:         AC_MSG_RESULT([not patching for app store compliance])",
          "749:         ;;",
          "750:     esac",
          "751: ])",
          "752: AC_SUBST([APP_STORE_COMPLIANCE_PATCH])",
          "753: AC_SUBST([APP_STORE_COMPLIANCE_PATCH_TARGET])",
          "754: AC_SUBST([APP_STORE_COMPLIANCE_PATCH_FLAGS])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38bf39cb4be279cce6c97da26afcc60859a01571",
      "candidate_info": {
        "commit_hash": "38bf39cb4be279cce6c97da26afcc60859a01571",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/38bf39cb4be279cce6c97da26afcc60859a01571",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py"
        ],
        "message": "[3.13] gh-111201: Improve pyrepl auto indentation (GH-119606) (GH-119833)\n\n- auto-indent when editing multi-line block\n- ignore comments\n\n(cherry picked from commit dae0375bd97f3821c5db1602a0653a3c5dc53c5b)\n\nCo-authored-by: Arnon Yaari <wiggin15@yahoo.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     return None",
          "242: class maybe_accept(commands.Command):",
          "",
          "[Removed Lines]",
          "233: def _is_last_char_colon(buffer: list[str]) -> bool:",
          "234:     i = len(buffer)",
          "235:     while i > 0:",
          "236:         i -= 1",
          "237:         if buffer[i] not in \" \\t\\n\":  # ignore whitespaces",
          "238:             return buffer[i] == \":\"",
          "239:     return False",
          "",
          "[Added Lines]",
          "233: def _should_auto_indent(buffer: list[str], pos: int) -> bool:",
          "234:     # check if last character before \"pos\" is a colon, ignoring",
          "235:     # whitespaces and comments.",
          "236:     last_char = None",
          "237:     while pos > 0:",
          "238:         pos -= 1",
          "239:         if last_char is None:",
          "240:             if buffer[pos] not in \" \\t\\n\":  # ignore whitespaces",
          "241:                 last_char = buffer[pos]",
          "242:         else:",
          "243:             # even if we found a non-whitespace character before",
          "244:             # original pos, we keep going back until newline is reached",
          "245:             # to make sure we ignore comments",
          "246:             if buffer[pos] == \"\\n\":",
          "247:                 break",
          "248:             if buffer[pos] == \"#\":",
          "249:                 last_char = None",
          "250:     return last_char == \":\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:                     for i in range(prevlinestart, prevlinestart + indent):",
          "274:                         r.insert(r.buffer[i])",
          "275:                 r.update_last_used_indentation()",
          "277:                     if r.last_used_indentation is not None:",
          "278:                         indentation = r.last_used_indentation",
          "279:                     else:",
          "",
          "[Removed Lines]",
          "276:                 if _is_last_char_colon(r.buffer):",
          "",
          "[Added Lines]",
          "287:                 if _should_auto_indent(r.buffer, r.pos):",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:         self.assertEqual(reader.pos, 10)",
          "313:         self.assertEqual(reader.cxy, (1, 1))",
          "315:     def test_auto_indent_default(self):",
          "316:         # fmt: off",
          "317:         input_code = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316: class TestPyReplAutoindent(TestCase):",
          "317:     def prepare_reader(self, events):",
          "318:         console = FakeConsole(events)",
          "319:         config = ReadlineConfig(readline_completer=None)",
          "320:         reader = ReadlineAlikeReader(console=console, config=config)",
          "321:         return reader",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:         output2 = multiline_input(reader)",
          "386:         self.assertEqual(output2, output_code)",
          "389: class TestPyReplOutput(TestCase):",
          "390:     def prepare_reader(self, events):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     def test_auto_indent_multiline(self):",
          "396:         # fmt: off",
          "397:         events = itertools.chain(",
          "398:             code_to_events(",
          "399:                 \"def f():\\n\"",
          "400:                     \"pass\"",
          "401:             ),",
          "402:             [",
          "403:                 # go to the end of the first line",
          "404:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "405:                 Event(evt=\"key\", data=\"\\x05\", raw=bytearray(b\"\\x1bO5\")),",
          "406:                 # new line should be autoindented",
          "407:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "408:             ],",
          "409:             code_to_events(",
          "410:                 \"pass\"",
          "411:             ),",
          "412:             [",
          "413:                 # go to end of last line",
          "414:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "415:                 Event(evt=\"key\", data=\"\\x05\", raw=bytearray(b\"\\x1bO5\")),",
          "416:                 # double newline to terminate the block",
          "417:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "418:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "419:             ],",
          "420:         )",
          "422:         output_code = (",
          "423:             \"def f():\\n\"",
          "424:             \"    pass\\n\"",
          "425:             \"    pass\\n\"",
          "426:             \"    \"",
          "427:         )",
          "428:         # fmt: on",
          "430:         reader = self.prepare_reader(events)",
          "431:         output = multiline_input(reader)",
          "432:         self.assertEqual(output, output_code)",
          "434:     def test_auto_indent_with_comment(self):",
          "435:         # fmt: off",
          "436:         events = code_to_events(",
          "437:             \"def f():  # foo\\n\"",
          "438:                 \"pass\\n\\n\"",
          "439:         )",
          "441:         output_code = (",
          "442:             \"def f():  # foo\\n\"",
          "443:             \"    pass\\n\"",
          "444:             \"    \"",
          "445:         )",
          "446:         # fmt: on",
          "448:         reader = self.prepare_reader(events)",
          "449:         output = multiline_input(reader)",
          "450:         self.assertEqual(output, output_code)",
          "452:     def test_auto_indent_ignore_comments(self):",
          "453:         # fmt: off",
          "454:         events = code_to_events(",
          "455:             \"pass  #:\\n\"",
          "456:         )",
          "458:         output_code = (",
          "459:             \"pass  #:\"",
          "460:         )",
          "461:         # fmt: on",
          "463:         reader = self.prepare_reader(events)",
          "464:         output = multiline_input(reader)",
          "465:         self.assertEqual(output, output_code)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         expected = (",
          "170:             \"def foo():\\n\"",
          "173:             \"    a = 1\\n\"",
          "174:             \"    \\n\"",
          "175:             \"    \"    # HistoricalReader will trim trailing whitespace",
          "",
          "[Removed Lines]",
          "171:             \"\\n\"",
          "172:             \"\\n\"",
          "",
          "[Added Lines]",
          "171:             \"    \\n\"",
          "172:             \"    \\n\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e57bd01e00d40dfe7c9344d0b528d9059b1fa93",
      "candidate_info": {
        "commit_hash": "6e57bd01e00d40dfe7c9344d0b528d9059b1fa93",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6e57bd01e00d40dfe7c9344d0b528d9059b1fa93",
        "files": [
          "Misc/NEWS.d/next/Windows/2024-03-19-19-04-56.gh-issue-116145.srVT3d.rst",
          "Misc/externals.spdx.json",
          "PCbuild/get_externals.bat",
          "PCbuild/tcltk.props"
        ],
        "message": "gh-116145: Updated bundled Tcl/Tk on Windows to 8.6.14 (GH-117030)\n\n(cherry picked from commit 0e8d35b931f41210483cc51c4169e9a943c7f166)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "PCbuild/get_externals.bat||PCbuild/get_externals.bat",
          "PCbuild/tcltk.props||PCbuild/tcltk.props"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "PCbuild/get_externals.bat||PCbuild/get_externals.bat": [
          "File: PCbuild/get_externals.bat -> PCbuild/get_externals.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: if NOT \"%IncludeSSLSrc%\"==\"false\" set libraries=%libraries%     openssl-3.0.13",
          "57: set libraries=%libraries%                                       mpdecimal-4.0.0",
          "58: set libraries=%libraries%                                       sqlite-3.45.3.0",
          "61: set libraries=%libraries%                                       xz-5.2.5",
          "62: set libraries=%libraries%                                       zlib-1.3.1",
          "",
          "[Removed Lines]",
          "59: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tcl-core-8.6.13.1",
          "60: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tk-8.6.13.1",
          "",
          "[Added Lines]",
          "59: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tcl-core-8.6.14.0",
          "60: if NOT \"%IncludeTkinterSrc%\"==\"false\" set libraries=%libraries% tk-8.6.14.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: set binaries=",
          "79: if NOT \"%IncludeLibffi%\"==\"false\"  set binaries=%binaries% libffi-3.4.4",
          "80: if NOT \"%IncludeSSL%\"==\"false\"     set binaries=%binaries% openssl-bin-3.0.13",
          "82: if NOT \"%IncludeSSLSrc%\"==\"false\"  set binaries=%binaries% nasm-2.11.06",
          "84: for %%b in (%binaries%) do (",
          "",
          "[Removed Lines]",
          "81: if NOT \"%IncludeTkinter%\"==\"false\" set binaries=%binaries% tcltk-8.6.13.1",
          "",
          "[Added Lines]",
          "81: if NOT \"%IncludeTkinter%\"==\"false\" set binaries=%binaries% tcltk-8.6.14.0",
          "",
          "---------------"
        ],
        "PCbuild/tcltk.props||PCbuild/tcltk.props": [
          "File: PCbuild/tcltk.props -> PCbuild/tcltk.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">",
          "3:   <Import Project=\"pyproject.props\" Condition=\"$(__PyProject_Props_Imported) != 'true'\" />",
          "4:   <PropertyGroup>",
          "6:     <TkVersion Condition=\"$(TkVersion) == ''\">$(TclVersion)</TkVersion>",
          "7:     <TclMajorVersion>$([System.Version]::Parse($(TclVersion)).Major)</TclMajorVersion>",
          "8:     <TclMinorVersion>$([System.Version]::Parse($(TclVersion)).Minor)</TclMinorVersion>",
          "",
          "[Removed Lines]",
          "5:     <TclVersion Condition=\"$(TclVersion) == ''\">8.6.13.1</TclVersion>",
          "",
          "[Added Lines]",
          "5:     <TclVersion Condition=\"$(TclVersion) == ''\">8.6.14.0</TclVersion>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44995aab499b09a550de26fd2927d481d4695e44",
      "candidate_info": {
        "commit_hash": "44995aab499b09a550de26fd2927d481d4695e44",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/44995aab499b09a550de26fd2927d481d4695e44",
        "files": [
          "PC/layout/main.py"
        ],
        "message": "gh-118876: Ensure PC/layout sets ns.temp before using it (GH-118880)\n\nFixes an AttributeError that occurs when checking if ns.temp is an absolute path during building from source on Windows.\n(cherry picked from commit d8a82cca12e12a6b22bfe6691e9b222f6d276f0a)\n\nCo-authored-by: I-Shen Leong <i-shenl@activestate.com>",
        "before_after_code_files": [
          "PC/layout/main.py||PC/layout/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "PC/layout/main.py||PC/layout/main.py": [
          "File: PC/layout/main.py -> PC/layout/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:     ns.source = ns.source or (Path(__file__).resolve().parent.parent.parent)",
          "600:     ns.build = ns.build or Path(sys.executable).parent",
          "601:     ns.doc_build = ns.doc_build or (ns.source / \"Doc\" / \"build\")",
          "602:     if not ns.source.is_absolute():",
          "603:         ns.source = (Path.cwd() / ns.source).resolve()",
          "604:     if not ns.build.is_absolute():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:     if ns.copy and not ns.copy.is_absolute():",
          "603:         ns.copy = (Path.cwd() / ns.copy).resolve()",
          "604:     if not ns.temp:",
          "605:         # Put temp on a Dev Drive for speed if we're copying to one.",
          "606:         # If not, the regular temp dir will have to do.",
          "607:         if ns.copy and getattr(os.path, \"isdevdrive\", lambda d: False)(ns.copy):",
          "608:             ns.temp = ns.copy.with_name(ns.copy.name + \"_temp\")",
          "609:         else:",
          "610:             ns.temp = Path(tempfile.mkdtemp())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:         else:",
          "618:             ns.arch = \"amd64\"",
          "622:     if ns.zip and not ns.zip.is_absolute():",
          "623:         ns.zip = (Path.cwd() / ns.zip).resolve()",
          "624:     if ns.catalog and not ns.catalog.is_absolute():",
          "625:         ns.catalog = (Path.cwd() / ns.catalog).resolve()",
          "635:     configure_logger(ns)",
          "637:     log_info(",
          "",
          "[Removed Lines]",
          "620:     if ns.copy and not ns.copy.is_absolute():",
          "621:         ns.copy = (Path.cwd() / ns.copy).resolve()",
          "627:     if not ns.temp:",
          "628:         # Put temp on a Dev Drive for speed if we're copying to one.",
          "629:         # If not, the regular temp dir will have to do.",
          "630:         if ns.copy and getattr(os.path, \"isdevdrive\", lambda d: False)(ns.copy):",
          "631:             ns.temp = ns.copy.with_name(ns.copy.name + \"_temp\")",
          "632:         else:",
          "633:             ns.temp = Path(tempfile.mkdtemp())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "720a44d414b68943c766716145d7c6d15ea213de",
      "candidate_info": {
        "commit_hash": "720a44d414b68943c766716145d7c6d15ea213de",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/720a44d414b68943c766716145d7c6d15ea213de",
        "files": [
          "Lib/logging/config.py",
          "Lib/test/test_logging.py",
          "Misc/NEWS.d/next/Library/2024-06-04-12-23-01.gh-issue-119819.WKKrYh.rst"
        ],
        "message": "[3.13] gh-119819: Fix regression to allow logging configuration with multipr\u2026 (GH-120030) (GH-120035)\n\n(cherry picked from commit 99d945c0c006e3246ac00338e37c443c6e08fc5c)",
        "before_after_code_files": [
          "Lib/logging/config.py||Lib/logging/config.py",
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/logging/config.py||Lib/logging/config.py": [
          "File: Lib/logging/config.py -> Lib/logging/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:                     # raise ValueError('No handlers specified for a QueueHandler')",
          "782:                 if 'queue' in config:",
          "783:                     from multiprocessing.queues import Queue as MPQueue",
          "784:                     qspec = config['queue']",
          "786:                         if isinstance(qspec, str):",
          "787:                             q = self.resolve(qspec)",
          "788:                             if not callable(q):",
          "",
          "[Removed Lines]",
          "785:                     if not isinstance(qspec, (queue.Queue, MPQueue)):",
          "",
          "[Added Lines]",
          "784:                     from multiprocessing import Manager as MM",
          "785:                     proxy_queue = MM().Queue()",
          "787:                     if not isinstance(qspec, (queue.Queue, MPQueue, type(proxy_queue))):",
          "",
          "---------------"
        ],
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3926:             msg = str(ctx.exception)",
          "3927:             self.assertEqual(msg, \"Unable to configure handler 'ah'\")",
          "3929:     def test_90195(self):",
          "3930:         # See gh-90195",
          "3931:         config = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3929:     @unittest.skipIf(support.is_wasi, \"WASI does not have multiprocessing.\")",
          "3930:     def test_multiprocessing_queues(self):",
          "3931:         # See gh-119819",
          "3932:         cd = copy.deepcopy(self.config_queue_handler)",
          "3933:         from multiprocessing import Queue as MQ, Manager as MM",
          "3934:         q1 = MQ()  # this can't be pickled",
          "3935:         q2 = MM().Queue()  # a proxy queue for use when pickling is needed",
          "3936:         for qspec in (q1, q2):",
          "3937:             fn = make_temp_file('.log', 'test_logging-cmpqh-')",
          "3938:             cd['handlers']['h1']['filename'] = fn",
          "3939:             cd['handlers']['ah']['queue'] = qspec",
          "3940:             qh = None",
          "3941:             try:",
          "3942:                 self.apply_config(cd)",
          "3943:                 qh = logging.getHandlerByName('ah')",
          "3944:                 self.assertEqual(sorted(logging.getHandlerNames()), ['ah', 'h1'])",
          "3945:                 self.assertIsNotNone(qh.listener)",
          "3946:                 self.assertIs(qh.queue, qspec)",
          "3947:                 self.assertIs(qh.listener.queue, qspec)",
          "3948:             finally:",
          "3949:                 h = logging.getHandlerByName('h1')",
          "3950:                 if h:",
          "3951:                     self.addCleanup(closeFileHandler, h, fn)",
          "3952:                 else:",
          "3953:                     self.addCleanup(os.remove, fn)",
          "",
          "---------------"
        ]
      }
    }
  ]
}