{
  "cve_id": "CVE-2023-25672",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The function `tf.raw_ops.LookupTableImportV2` cannot handle scalars in the `values` parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.\n",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "980b22536abcbbe1b4a5642fc940af33d8c19b69",
  "patch_info": {
    "commit_hash": "980b22536abcbbe1b4a5642fc940af33d8c19b69",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/980b22536abcbbe1b4a5642fc940af33d8c19b69",
    "files": [
      "tensorflow/core/ops/lookup_ops.cc",
      "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py"
    ],
    "message": "Fixes shape inference of LookupTableImportV2 to handle scalar values.\n\nPiperOrigin-RevId: 506126405",
    "before_after_code_files": [
      "tensorflow/core/ops/lookup_ops.cc||tensorflow/core/ops/lookup_ops.cc",
      "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py||tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/ops/lookup_ops.cc||tensorflow/core/ops/lookup_ops.cc": [
      "File: tensorflow/core/ops/lookup_ops.cc -> tensorflow/core/ops/lookup_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "310:       ShapeHandle keys;",
      "311:       TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &keys));",
      "312:       DimensionHandle unused;",
      "315:       return OkStatus();",
      "316:     });",
      "",
      "[Removed Lines]",
      "313:       TF_RETURN_IF_ERROR(",
      "314:           c->Merge(c->Dim(keys, 0), c->Dim(c->input(2), 0), &unused));",
      "",
      "[Added Lines]",
      "312:       ShapeHandle values;",
      "313:       TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(2), 1, &values));",
      "315:       TF_RETURN_IF_ERROR(c->Merge(c->Dim(keys, 0), c->Dim(values, 0), &unused));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py||tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py": [
      "File: tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py -> tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: from tensorflow.python.framework import test_util",
      "42: from tensorflow.python.ops import array_ops",
      "43: from tensorflow.python.ops import control_flow_ops",
      "44: from tensorflow.python.ops import lookup_ops",
      "45: from tensorflow.python.ops import map_fn",
      "46: from tensorflow.python.ops import variables",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: from tensorflow.python.ops import gen_lookup_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "573:     self.evaluate(lookup_ops.tables_initializer())",
      "574:     self.assertAllEqual(grad, -10.)",
      "576:   def testExportShapeInference(self, is_anonymous):",
      "577:     table = self.getHashTable()(",
      "578:         lookup_ops.KeyValueTensorInitializer(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "577:   def testImportShapeInference(self, is_anonymous):",
      "578:     v = variables.Variable(1)",
      "580:     @def_function.function(jit_compile=True)",
      "581:     def foo():",
      "582:       return gen_lookup_ops.lookup_table_import_v2(",
      "583:           table_handle=v.handle, keys=[1.1, 2.2], values=1",
      "584:       )",
      "586:     with self.assertRaisesRegex(",
      "587:         ValueError, r\"Shape must be at least rank 1 but is rank 0\"",
      "588:     ):",
      "589:       foo()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6f0416e1cc042c4f23cac112da43c5573db6c20",
      "candidate_info": {
        "commit_hash": "d6f0416e1cc042c4f23cac112da43c5573db6c20",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d6f0416e1cc042c4f23cac112da43c5573db6c20",
        "files": [
          "tensorflow/core/ops/lookup_ops.cc",
          "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py"
        ],
        "message": "Fixes shape inference of LookupTableImportV2 to handle scalar values.\n\nPiperOrigin-RevId: 506126405",
        "before_after_code_files": [
          "tensorflow/core/ops/lookup_ops.cc||tensorflow/core/ops/lookup_ops.cc",
          "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py||tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/ops/lookup_ops.cc||tensorflow/core/ops/lookup_ops.cc",
            "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py||tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/ops/lookup_ops.cc||tensorflow/core/ops/lookup_ops.cc",
            "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py||tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/ops/lookup_ops.cc||tensorflow/core/ops/lookup_ops.cc": [
          "File: tensorflow/core/ops/lookup_ops.cc -> tensorflow/core/ops/lookup_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:       ShapeHandle keys;",
          "311:       TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &keys));",
          "312:       DimensionHandle unused;",
          "315:       return OkStatus();",
          "316:     });",
          "",
          "[Removed Lines]",
          "313:       TF_RETURN_IF_ERROR(",
          "314:           c->Merge(c->Dim(keys, 0), c->Dim(c->input(2), 0), &unused));",
          "",
          "[Added Lines]",
          "312:       ShapeHandle values;",
          "313:       TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(2), 1, &values));",
          "315:       TF_RETURN_IF_ERROR(c->Merge(c->Dim(keys, 0), c->Dim(values, 0), &unused));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py||tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py -> tensorflow/python/kernel_tests/data_structures/lookup_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: from tensorflow.python.framework import test_util",
          "43: from tensorflow.python.ops import array_ops",
          "44: from tensorflow.python.ops import control_flow_ops",
          "45: from tensorflow.python.ops import lookup_ops",
          "46: from tensorflow.python.ops import map_fn",
          "47: from tensorflow.python.ops import variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: from tensorflow.python.ops import gen_lookup_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "574:     self.evaluate(lookup_ops.tables_initializer())",
          "575:     self.assertAllEqual(grad, -10.)",
          "577:   def testExportShapeInference(self, is_anonymous):",
          "578:     table = self.getHashTable()(",
          "579:         lookup_ops.KeyValueTensorInitializer(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:   def testImportShapeInference(self, is_anonymous):",
          "579:     v = variables.Variable(1)",
          "581:     @def_function.function(jit_compile=True)",
          "582:     def foo():",
          "583:       return gen_lookup_ops.lookup_table_import_v2(",
          "584:           table_handle=v.handle, keys=[1.1, 2.2], values=1",
          "585:       )",
          "587:     with self.assertRaisesRegex(",
          "588:         ValueError, r\"Shape must be at least rank 1 but is rank 0\"",
          "589:     ):",
          "590:       foo()",
          "",
          "---------------"
        ]
      }
    }
  ]
}