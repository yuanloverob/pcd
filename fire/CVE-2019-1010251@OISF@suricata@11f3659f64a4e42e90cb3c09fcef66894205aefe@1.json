{
  "cve_id": "CVE-2019-1010251",
  "cve_desc": "Open Information Security Foundation Suricata prior to version 4.1.2 is affected by: Denial of Service - DNS detection bypass. The impact is: An attacker can evade a signature detection with a specialy formed network packet. The component is: app-layer-detect-proto.c, decode.c, decode-teredo.c and decode-ipv6.c (https://github.com/OISF/suricata/pull/3590/commits/11f3659f64a4e42e90cb3c09fcef66894205aefe, https://github.com/OISF/suricata/pull/3590/commits/8357ef3f8ffc7d99ef6571350724160de356158b). The attack vector is: An attacker can trigger the vulnerability by sending a specifically crafted network request. The fixed version is: 4.1.2.",
  "repo": "OISF/suricata",
  "patch_hash": "11f3659f64a4e42e90cb3c09fcef66894205aefe",
  "patch_info": {
    "commit_hash": "11f3659f64a4e42e90cb3c09fcef66894205aefe",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/pull/3590/commits/11f3659f64a4e42e90cb3c09fcef66894205aefe",
    "files": [
      "src/decode-ipv6.c",
      "src/decode-teredo.c",
      "src/decode.c",
      "src/decode.h"
    ],
    "message": "teredo: be stricter on what to consider valid teredo\n\nInvalid Teredo can lead to valid DNS traffic (or other UDP traffic)\nbeing misdetected as Teredo. This leads to false negatives in the\nUDP payload inspection.\n\nMake the teredo code only consider a packet teredo if the encapsulated\ndata was decoded without any 'invalid' events being set.\n\nBug #2736.",
    "before_after_code_files": [
      "src/decode-ipv6.c||src/decode-ipv6.c",
      "src/decode-teredo.c||src/decode-teredo.c",
      "src/decode.c||src/decode.c",
      "src/decode.h||src/decode.h"
    ]
  },
  "patch_diff": {
    "src/decode-ipv6.c||src/decode-ipv6.c": [
      "File: src/decode-ipv6.c -> src/decode-ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:     SCEnter();",
      "152:     uint8_t *orig_pkt = pkt;",
      "154:     uint16_t hdrextlen = 0;",
      "156:     char dstopts = 0;",
      "157:     char exthdr_fh_done = 0;",
      "158:     int hh = 0;",
      "",
      "[Removed Lines]",
      "155:     uint16_t plen;",
      "",
      "[Added Lines]",
      "155:     uint16_t plen = len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     int eh = 0;",
      "161:     int ah = 0;",
      "166:     while(1)",
      "167:     {",
      "171:             SCReturn;",
      "172:         }",
      "175:             SCReturn;",
      "176:         }",
      "",
      "[Removed Lines]",
      "163:     nh = IPV6_GET_NH(p);",
      "164:     plen = len;",
      "169:         if (nh == IPPROTO_NONE && plen > 0) {",
      "170:             ENGINE_SET_EVENT(p, IPV6_DATA_AFTER_NONE_HEADER);",
      "",
      "[Added Lines]",
      "165:         if (nh == IPPROTO_NONE) {",
      "166:             if (plen > 0) {",
      "168:                 ENGINE_SET_EVENT(p, IPV6_DATA_AFTER_NONE_HEADER);",
      "169:             }",
      "174:             ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "204:                 SCLogDebug(\"hdrextlen %\"PRIu8, hdrextlen);",
      "206:                 if (hdrextlen > plen) {",
      "208:                     SCReturn;",
      "209:                 }",
      "",
      "[Removed Lines]",
      "207:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "207:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "243:                 IPV6_SET_L4PROTO(p,nh);",
      "244:                 hdrextlen =  (*(pkt+1) + 1) << 3;",
      "245:                 if (hdrextlen > plen) {",
      "247:                     SCReturn;",
      "248:                 }",
      "",
      "[Removed Lines]",
      "246:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "246:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "288:                 if (optslen > plen) {",
      "294:                     nh = *pkt;",
      "",
      "[Removed Lines]",
      "291:                     ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "291:                     ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "311:                     }",
      "313:                     if (offset + 1 >= optslen) {",
      "315:                         break;",
      "316:                     }",
      "",
      "[Removed Lines]",
      "314:                         ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "314:                         ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "322:                     if ((offset + 1 + ip6_optlen) > optslen) {",
      "324:                         break;",
      "325:                     }",
      "",
      "[Removed Lines]",
      "323:                         ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "323:                         ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "339:                         ra->ip6ra_len  = ip6_optlen;",
      "341:                         if (ip6_optlen < sizeof(ra->ip6ra_value)) {",
      "343:                             break;",
      "344:                         }",
      "",
      "[Removed Lines]",
      "342:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "342:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "355:                         jumbo->ip6j_len  = ip6_optlen;",
      "357:                         if (ip6_optlen < sizeof(jumbo->ip6j_payload_len)) {",
      "359:                             break;",
      "360:                         }",
      "",
      "[Removed Lines]",
      "358:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "358:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "370:                         hao->ip6hao_len  = ip6_optlen;",
      "372:                         if (ip6_optlen < sizeof(hao->ip6hao_hoa)) {",
      "374:                             break;",
      "375:                         }",
      "",
      "[Removed Lines]",
      "373:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "[Added Lines]",
      "373:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "422:                 uint16_t prev_hdrextlen = hdrextlen;",
      "423:                 hdrextlen = sizeof(IPV6FragHdr);",
      "424:                 if (hdrextlen > plen) {",
      "426:                     SCReturn;",
      "427:                 }",
      "",
      "[Removed Lines]",
      "425:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "425:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "468:                 IPV6_SET_L4PROTO(p,nh);",
      "469:                 hdrextlen = sizeof(IPV6EspHdr);",
      "470:                 if (hdrextlen > plen) {",
      "472:                     SCReturn;",
      "473:                 }",
      "",
      "[Removed Lines]",
      "471:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "471:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "497:                 SCLogDebug(\"hdrextlen %\"PRIu8, hdrextlen);",
      "499:                 if (hdrextlen > plen) {",
      "501:                     SCReturn;",
      "502:                 }",
      "",
      "[Removed Lines]",
      "500:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "500:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "538:             case IPPROTO_SHIM6:",
      "540:                 if (hdrextlen > plen) {",
      "542:                     SCReturn;",
      "543:                 }",
      "544:                 nh = *pkt;",
      "",
      "[Removed Lines]",
      "541:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "[Added Lines]",
      "541:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
      "",
      "---------------"
    ],
    "src/decode-teredo.c||src/decode-teredo.c": [
      "File: src/decode-teredo.c -> src/decode-teredo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:     if (IP_GET_RAW_VER(start) == 6) {",
      "105:         IPV6Hdr *thdr = (IPV6Hdr *)start;",
      "106:         if (len ==  IPV6_HEADER_LEN +",
      "107:                 IPV6_GET_RAW_PLEN(thdr) + (start - pkt)) {",
      "108:             if (pq != NULL) {",
      "109:                 int blen = len - (start - pkt);",
      "111:                 Packet *tp = PacketTunnelPktSetup(tv, dtv, p, start, blen,",
      "113:                 if (tp != NULL) {",
      "114:                     PKT_SET_SRC(tp, PKT_SRC_DECODER_TEREDO);",
      "",
      "[Removed Lines]",
      "112:                                                   DECODE_TUNNEL_IPV6, pq);",
      "",
      "[Added Lines]",
      "113:         if (IPV6_GET_RAW_HLIM(thdr) == 0)",
      "114:             return TM_ECODE_FAILED;",
      "117:         if (IPV6_GET_RAW_NH(thdr) == 0 && IPV6_GET_RAW_PLEN(thdr) < 8)",
      "118:             return TM_ECODE_FAILED;",
      "126:                                                   DECODE_TUNNEL_IPV6_TEREDO, pq);",
      "",
      "---------------"
    ],
    "src/decode.c||src/decode.c": [
      "File: src/decode.c -> src/decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:         case DECODE_TUNNEL_IPV4:",
      "80:             return DecodeIPV4(tv, dtv, p, pkt, len, pq);",
      "81:         case DECODE_TUNNEL_IPV6:",
      "82:             return DecodeIPV6(tv, dtv, p, pkt, len, pq);",
      "83:         case DECODE_TUNNEL_VLAN:",
      "84:             return DecodeVLAN(tv, dtv, p, pkt, len, pq);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         case DECODE_TUNNEL_IPV6_TEREDO:",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:         case DECODE_TUNNEL_ERSPAN:",
      "88:             return DecodeERSPAN(tv, dtv, p, pkt, len, pq);",
      "89:         default:",
      "91:             break;",
      "92:     }",
      "93:     return TM_ECODE_OK;",
      "",
      "[Removed Lines]",
      "90:             SCLogInfo(\"FIXME: DecodeTunnel: protocol %\" PRIu32 \" not supported.\", proto);",
      "",
      "[Added Lines]",
      "91:             SCLogDebug(\"FIXME: DecodeTunnel: protocol %\" PRIu32 \" not supported.\", proto);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:     ret = DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),",
      "304:                        GET_PKT_LEN(p), pq, proto);",
      "308:         p->root = NULL;",
      "309:         UNSET_TUNNEL_PKT(p);",
      "310:         TmqhOutputPacketpool(tv, p);",
      "",
      "[Removed Lines]",
      "306:     if (unlikely(ret != TM_ECODE_OK)) {",
      "",
      "[Added Lines]",
      "307:     if (unlikely(ret != TM_ECODE_OK) ||",
      "308:             (proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID)))",
      "309:     {",
      "311:         SCLogDebug(\"tunnel packet is invalid\");",
      "",
      "---------------"
    ],
    "src/decode.h||src/decode.h": [
      "File: src/decode.h -> src/decode.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18551df3078300db3356dd3e6ac1f110f6e1c264",
      "candidate_info": {
        "commit_hash": "18551df3078300db3356dd3e6ac1f110f6e1c264",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/18551df3078300db3356dd3e6ac1f110f6e1c264",
        "files": [
          "src/decode-ipv6.c",
          "src/decode-teredo.c",
          "src/decode.c",
          "src/decode.h"
        ],
        "message": "teredo: be stricter on what to consider valid teredo\n\nInvalid Teredo can lead to valid DNS traffic (or other UDP traffic)\nbeing misdetected as Teredo. This leads to false negatives in the\nUDP payload inspection.\n\nMake the teredo code only consider a packet teredo if the encapsulated\ndata was decoded without any 'invalid' events being set.\n\nBug #2736.",
        "before_after_code_files": [
          "src/decode-ipv6.c||src/decode-ipv6.c",
          "src/decode-teredo.c||src/decode-teredo.c",
          "src/decode.c||src/decode.c",
          "src/decode.h||src/decode.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/decode-ipv6.c||src/decode-ipv6.c",
            "src/decode-teredo.c||src/decode-teredo.c",
            "src/decode.c||src/decode.c",
            "src/decode.h||src/decode.h"
          ],
          "candidate": [
            "src/decode-ipv6.c||src/decode-ipv6.c",
            "src/decode-teredo.c||src/decode-teredo.c",
            "src/decode.c||src/decode.c",
            "src/decode.h||src/decode.h"
          ]
        }
      },
      "candidate_diff": {
        "src/decode-ipv6.c||src/decode-ipv6.c": [
          "File: src/decode-ipv6.c -> src/decode-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     SCEnter();",
          "152:     uint8_t *orig_pkt = pkt;",
          "154:     uint16_t hdrextlen = 0;",
          "156:     char dstopts = 0;",
          "157:     char exthdr_fh_done = 0;",
          "158:     int hh = 0;",
          "",
          "[Removed Lines]",
          "155:     uint16_t plen;",
          "",
          "[Added Lines]",
          "155:     uint16_t plen = len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     int eh = 0;",
          "161:     int ah = 0;",
          "166:     while(1)",
          "167:     {",
          "171:             SCReturn;",
          "172:         }",
          "175:             SCReturn;",
          "176:         }",
          "",
          "[Removed Lines]",
          "163:     nh = IPV6_GET_NH(p);",
          "164:     plen = len;",
          "169:         if (nh == IPPROTO_NONE && plen > 0) {",
          "170:             ENGINE_SET_EVENT(p, IPV6_DATA_AFTER_NONE_HEADER);",
          "",
          "[Added Lines]",
          "165:         if (nh == IPPROTO_NONE) {",
          "166:             if (plen > 0) {",
          "168:                 ENGINE_SET_EVENT(p, IPV6_DATA_AFTER_NONE_HEADER);",
          "169:             }",
          "174:             ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:                 SCLogDebug(\"hdrextlen %\"PRIu8, hdrextlen);",
          "206:                 if (hdrextlen > plen) {",
          "208:                     SCReturn;",
          "209:                 }",
          "",
          "[Removed Lines]",
          "207:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "[Added Lines]",
          "207:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:                 IPV6_SET_L4PROTO(p,nh);",
          "244:                 hdrextlen =  (*(pkt+1) + 1) << 3;",
          "245:                 if (hdrextlen > plen) {",
          "247:                     SCReturn;",
          "248:                 }",
          "",
          "[Removed Lines]",
          "246:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "[Added Lines]",
          "246:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:                 if (optslen > plen) {",
          "294:                     nh = *pkt;",
          "",
          "[Removed Lines]",
          "291:                     ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "[Added Lines]",
          "291:                     ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "311:                     }",
          "313:                     if (offset + 1 >= optslen) {",
          "315:                         break;",
          "316:                     }",
          "",
          "[Removed Lines]",
          "314:                         ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "[Added Lines]",
          "314:                         ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "322:                     if ((offset + 1 + ip6_optlen) > optslen) {",
          "324:                         break;",
          "325:                     }",
          "",
          "[Removed Lines]",
          "323:                         ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "[Added Lines]",
          "323:                         ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "339:                         ra->ip6ra_len  = ip6_optlen;",
          "341:                         if (ip6_optlen < sizeof(ra->ip6ra_value)) {",
          "343:                             break;",
          "344:                         }",
          "",
          "[Removed Lines]",
          "342:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "[Added Lines]",
          "342:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "355:                         jumbo->ip6j_len  = ip6_optlen;",
          "357:                         if (ip6_optlen < sizeof(jumbo->ip6j_payload_len)) {",
          "359:                             break;",
          "360:                         }",
          "",
          "[Removed Lines]",
          "358:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "[Added Lines]",
          "358:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "370:                         hao->ip6hao_len  = ip6_optlen;",
          "372:                         if (ip6_optlen < sizeof(hao->ip6hao_hoa)) {",
          "374:                             break;",
          "375:                         }",
          "",
          "[Removed Lines]",
          "373:                             ENGINE_SET_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "[Added Lines]",
          "373:                             ENGINE_SET_INVALID_EVENT(p, IPV6_EXTHDR_INVALID_OPTLEN);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "422:                 uint16_t prev_hdrextlen = hdrextlen;",
          "423:                 hdrextlen = sizeof(IPV6FragHdr);",
          "424:                 if (hdrextlen > plen) {",
          "426:                     SCReturn;",
          "427:                 }",
          "",
          "[Removed Lines]",
          "425:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "[Added Lines]",
          "425:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "468:                 IPV6_SET_L4PROTO(p,nh);",
          "469:                 hdrextlen = sizeof(IPV6EspHdr);",
          "470:                 if (hdrextlen > plen) {",
          "472:                     SCReturn;",
          "473:                 }",
          "",
          "[Removed Lines]",
          "471:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "[Added Lines]",
          "471:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "497:                 SCLogDebug(\"hdrextlen %\"PRIu8, hdrextlen);",
          "499:                 if (hdrextlen > plen) {",
          "501:                     SCReturn;",
          "502:                 }",
          "",
          "[Removed Lines]",
          "500:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "[Added Lines]",
          "500:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "538:             case IPPROTO_SHIM6:",
          "540:                 if (hdrextlen > plen) {",
          "542:                     SCReturn;",
          "543:                 }",
          "544:                 nh = *pkt;",
          "",
          "[Removed Lines]",
          "541:                     ENGINE_SET_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "[Added Lines]",
          "541:                     ENGINE_SET_INVALID_EVENT(p, IPV6_TRUNC_EXTHDR);",
          "",
          "---------------"
        ],
        "src/decode-teredo.c||src/decode-teredo.c": [
          "File: src/decode-teredo.c -> src/decode-teredo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     if (IP_GET_RAW_VER(start) == 6) {",
          "105:         IPV6Hdr *thdr = (IPV6Hdr *)start;",
          "106:         if (len ==  IPV6_HEADER_LEN +",
          "107:                 IPV6_GET_RAW_PLEN(thdr) + (start - pkt)) {",
          "108:             if (pq != NULL) {",
          "109:                 int blen = len - (start - pkt);",
          "111:                 Packet *tp = PacketTunnelPktSetup(tv, dtv, p, start, blen,",
          "113:                 if (tp != NULL) {",
          "114:                     PKT_SET_SRC(tp, PKT_SRC_DECODER_TEREDO);",
          "",
          "[Removed Lines]",
          "112:                                                   DECODE_TUNNEL_IPV6, pq);",
          "",
          "[Added Lines]",
          "113:         if (IPV6_GET_RAW_HLIM(thdr) == 0)",
          "114:             return TM_ECODE_FAILED;",
          "117:         if (IPV6_GET_RAW_NH(thdr) == 0 && IPV6_GET_RAW_PLEN(thdr) < 8)",
          "118:             return TM_ECODE_FAILED;",
          "126:                                                   DECODE_TUNNEL_IPV6_TEREDO, pq);",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         case DECODE_TUNNEL_IPV4:",
          "77:             return DecodeIPV4(tv, dtv, p, pkt, len, pq);",
          "78:         case DECODE_TUNNEL_IPV6:",
          "79:             return DecodeIPV6(tv, dtv, p, pkt, len, pq);",
          "80:         case DECODE_TUNNEL_VLAN:",
          "81:             return DecodeVLAN(tv, dtv, p, pkt, len, pq);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         case DECODE_TUNNEL_IPV6_TEREDO:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         case DECODE_TUNNEL_ERSPAN:",
          "85:             return DecodeERSPAN(tv, dtv, p, pkt, len, pq);",
          "86:         default:",
          "88:             break;",
          "89:     }",
          "90:     return TM_ECODE_OK;",
          "",
          "[Removed Lines]",
          "87:             SCLogInfo(\"FIXME: DecodeTunnel: protocol %\" PRIu32 \" not supported.\", proto);",
          "",
          "[Added Lines]",
          "88:             SCLogDebug(\"FIXME: DecodeTunnel: protocol %\" PRIu32 \" not supported.\", proto);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:     ret = DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),",
          "296:                        GET_PKT_LEN(p), pq, proto);",
          "300:         p->root = NULL;",
          "301:         UNSET_TUNNEL_PKT(p);",
          "302:         TmqhOutputPacketpool(tv, p);",
          "",
          "[Removed Lines]",
          "298:     if (unlikely(ret != TM_ECODE_OK)) {",
          "",
          "[Added Lines]",
          "299:     if (unlikely(ret != TM_ECODE_OK) ||",
          "300:             (proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID)))",
          "301:     {",
          "303:         SCLogDebug(\"tunnel packet is invalid\");",
          "",
          "---------------"
        ],
        "src/decode.h||src/decode.h": [
          "File: src/decode.h -> src/decode.h"
        ]
      }
    }
  ]
}