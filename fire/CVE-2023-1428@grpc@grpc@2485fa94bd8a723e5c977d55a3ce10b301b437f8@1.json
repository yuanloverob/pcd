{
  "cve_id": "CVE-2023-1428",
  "cve_desc": "There exists an vulnerability causing an abort() to be called in gRPC.\u00a0\nThe following headers cause gRPC's C++ implementation to abort() when called via http2:\n\nte: x (x != trailers)\n\n:scheme: x (x != http, https)\n\ngrpclb_client_stats: x (x == anything)\n\nOn top of sending one of those headers, a later header must be sent that gets the total header size past 8KB. We recommend upgrading past git commit\u00a02485fa94bd8a723e5c977d55a3ce10b301b437f8 or v1.53 and above.\n\n",
  "repo": "grpc/grpc",
  "patch_hash": "2485fa94bd8a723e5c977d55a3ce10b301b437f8",
  "patch_info": {
    "commit_hash": "2485fa94bd8a723e5c977d55a3ce10b301b437f8",
    "repo": "grpc/grpc",
    "commit_url": "https://github.com/grpc/grpc/commit/2485fa94bd8a723e5c977d55a3ce10b301b437f8",
    "files": [
      "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
      "src/core/lib/transport/metadata_batch.cc",
      "src/core/lib/transport/metadata_batch.h",
      "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4859070937169920"
    ],
    "message": "[chttp2] Fix fuzzer found bug (#32507)\n\n<!--\n\nIf you know who should review your pull request, please assign it to\nthat\nperson, otherwise the pull request would get assigned randomly.\n\nIf your pull request is for a specific language, please add the\nappropriate\nlang label.\n\n-->",
    "before_after_code_files": [
      "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
      "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
      "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
    ]
  },
  "patch_diff": {
    "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
      "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "804:     template <typename Key, typename Value>",
      "805:     void Encode(Key, const Value& value) {",
      "807:     }",
      "809:    private:",
      "",
      "[Removed Lines]",
      "806:       AddToSummary(Key::key(), Key::Encode(value).size());",
      "",
      "[Added Lines]",
      "806:       AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
      "",
      "---------------"
    ],
    "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc": [
      "File: src/core/lib/transport/metadata_batch.cc -> src/core/lib/transport/metadata_batch.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:   }",
      "169: }",
      "171: const char* HttpSchemeMetadata::DisplayValue(ValueType content_type) {",
      "172:   switch (content_type) {",
      "173:     case kHttp:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x) {",
      "172:   switch (x) {",
      "173:     case HttpSchemeMetadata::kHttp:",
      "174:       return 4;",
      "175:     case HttpSchemeMetadata::kHttps:",
      "176:       return 5;",
      "177:     default:",
      "178:       return 0;",
      "179:   }",
      "180: }",
      "",
      "---------------"
    ],
    "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h": [
      "File: src/core/lib/transport/metadata_batch.h -> src/core/lib/transport/metadata_batch.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: namespace grpc_core {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: template <typename Key>",
      "58: size_t EncodedSizeOfKey(Key, const typename Key::ValueType& value) {",
      "59:   return Key::Encode(value).size();",
      "60: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:   static const char* DisplayMemento(MementoType te) { return DisplayValue(te); }",
      "91: };",
      "94: struct ContentTypeMetadata {",
      "95:   static constexpr bool kRepeatable = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: inline size_t EncodedSizeOfKey(TeMetadata, TeMetadata::ValueType x) {",
      "104:   return x == TeMetadata::kTrailers ? 8 : 0;",
      "105: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140:   }",
      "141: };",
      "144: struct HttpMethodMetadata {",
      "145:   static constexpr bool kRepeatable = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "362:   }",
      "363: };",
      "366: struct LbTokenMetadata : public SimpleSliceBasedMetadata {",
      "367:   static constexpr bool kRepeatable = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "381: inline size_t EncodedSizeOfKey(GrpcLbClientStatsMetadata,",
      "382:                                GrpcLbClientStatsMetadata::ValueType) {",
      "383:   return 0;",
      "384: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eb8baea70fff91a8a88a24b63354b5eaf83d4605",
      "candidate_info": {
        "commit_hash": "eb8baea70fff91a8a88a24b63354b5eaf83d4605",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/eb8baea70fff91a8a88a24b63354b5eaf83d4605",
        "files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/lib/transport/metadata_batch.cc",
          "src/core/lib/transport/metadata_batch.h",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4859070937169920"
        ],
        "message": "[chttp2] Fix fuzzer found bug (#32507)\n\n<!--\n\nIf you know who should review your pull request, please assign it to\nthat\nperson, otherwise the pull request would get assigned randomly.\n\nIf your pull request is for a specific language, please add the\nappropriate\nlang label.\n\n-->",
        "before_after_code_files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
          "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
            "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
            "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
            "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
            "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
          ]
        }
      },
      "candidate_diff": {
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:     template <typename Key, typename Value>",
          "805:     void Encode(Key, const Value& value) {",
          "807:     }",
          "809:    private:",
          "",
          "[Removed Lines]",
          "806:       AddToSummary(Key::key(), Key::Encode(value).size());",
          "",
          "[Added Lines]",
          "806:       AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "",
          "---------------"
        ],
        "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc": [
          "File: src/core/lib/transport/metadata_batch.cc -> src/core/lib/transport/metadata_batch.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   }",
          "169: }",
          "171: const char* HttpSchemeMetadata::DisplayValue(ValueType content_type) {",
          "172:   switch (content_type) {",
          "173:     case kHttp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x) {",
          "172:   switch (x) {",
          "173:     case HttpSchemeMetadata::kHttp:",
          "174:       return 4;",
          "175:     case HttpSchemeMetadata::kHttps:",
          "176:       return 5;",
          "177:     default:",
          "178:       return 0;",
          "179:   }",
          "180: }",
          "",
          "---------------"
        ],
        "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h": [
          "File: src/core/lib/transport/metadata_batch.h -> src/core/lib/transport/metadata_batch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: namespace grpc_core {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: template <typename Key>",
          "58: size_t EncodedSizeOfKey(Key, const typename Key::ValueType& value) {",
          "59:   return Key::Encode(value).size();",
          "60: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   static const char* DisplayMemento(MementoType te) { return DisplayValue(te); }",
          "91: };",
          "94: struct ContentTypeMetadata {",
          "95:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: inline size_t EncodedSizeOfKey(TeMetadata, TeMetadata::ValueType x) {",
          "104:   return x == TeMetadata::kTrailers ? 8 : 0;",
          "105: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:   }",
          "141: };",
          "144: struct HttpMethodMetadata {",
          "145:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:   }",
          "363: };",
          "366: struct LbTokenMetadata : public SimpleSliceBasedMetadata {",
          "367:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381: inline size_t EncodedSizeOfKey(GrpcLbClientStatsMetadata,",
          "382:                                GrpcLbClientStatsMetadata::ValueType) {",
          "383:   return 0;",
          "384: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1412fa12e3ad4735890815b4dd4936c595a345",
      "candidate_info": {
        "commit_hash": "7a1412fa12e3ad4735890815b4dd4936c595a345",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/7a1412fa12e3ad4735890815b4dd4936c595a345",
        "files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/lib/transport/metadata_batch.cc",
          "src/core/lib/transport/metadata_batch.h",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4859070937169920"
        ],
        "message": "Fuzzer fix backport to v1.52 (#32510)\n\nCo-authored-by: Craig Tiller <ctiller@google.com>",
        "before_after_code_files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
          "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
            "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
            "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
            "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
            "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
          ]
        }
      },
      "candidate_diff": {
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1199:     template <typename Key, typename Value>",
          "1200:     void Encode(Key, const Value& value) {",
          "1202:     }",
          "1204:    private:",
          "",
          "[Removed Lines]",
          "1201:       AddToSummary(Key::key(), Key::Encode(value).size());",
          "",
          "[Added Lines]",
          "1201:       AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "",
          "---------------"
        ],
        "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc": [
          "File: src/core/lib/transport/metadata_batch.cc -> src/core/lib/transport/metadata_batch.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   }",
          "169: }",
          "171: const char* HttpSchemeMetadata::DisplayValue(MementoType content_type) {",
          "172:   switch (content_type) {",
          "173:     case kHttp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x) {",
          "172:   switch (x) {",
          "173:     case HttpSchemeMetadata::kHttp:",
          "174:       return 4;",
          "175:     case HttpSchemeMetadata::kHttps:",
          "176:       return 5;",
          "177:     default:",
          "178:       return 0;",
          "179:   }",
          "180: }",
          "",
          "---------------"
        ],
        "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h": [
          "File: src/core/lib/transport/metadata_batch.h -> src/core/lib/transport/metadata_batch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: namespace grpc_core {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: template <typename Key>",
          "58: size_t EncodedSizeOfKey(Key, const typename Key::ValueType& value) {",
          "59:   return Key::Encode(value).size();",
          "60: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   static const char* DisplayValue(MementoType te);",
          "89: };",
          "92: struct ContentTypeMetadata {",
          "93:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: inline size_t EncodedSizeOfKey(TeMetadata, TeMetadata::ValueType x) {",
          "102:   return x == TeMetadata::kTrailers ? 8 : 0;",
          "103: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   static const char* DisplayValue(MementoType content_type);",
          "133: };",
          "136: struct HttpMethodMetadata {",
          "137:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:   }",
          "340: };",
          "343: struct LbTokenMetadata : public SimpleSliceBasedMetadata {",
          "344:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: inline size_t EncodedSizeOfKey(GrpcLbClientStatsMetadata,",
          "359:                                GrpcLbClientStatsMetadata::ValueType) {",
          "360:   return 0;",
          "361: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f93c1667280e6f11a1eb35cccfb8c81c698bee5",
      "candidate_info": {
        "commit_hash": "3f93c1667280e6f11a1eb35cccfb8c81c698bee5",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/3f93c1667280e6f11a1eb35cccfb8c81c698bee5",
        "files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/lib/transport/metadata_batch.cc",
          "src/core/lib/transport/metadata_batch.h",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4859070937169920"
        ],
        "message": "Fuzzer fix backport to v1.53 (#32511)\n\nCo-authored-by: Craig Tiller <ctiller@google.com>",
        "before_after_code_files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
          "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
            "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
            "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
            "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
            "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
          ]
        }
      },
      "candidate_diff": {
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:     template <typename Key, typename Value>",
          "805:     void Encode(Key, const Value& value) {",
          "807:     }",
          "809:    private:",
          "",
          "[Removed Lines]",
          "806:       AddToSummary(Key::key(), Key::Encode(value).size());",
          "",
          "[Added Lines]",
          "806:       AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "",
          "---------------"
        ],
        "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc": [
          "File: src/core/lib/transport/metadata_batch.cc -> src/core/lib/transport/metadata_batch.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   }",
          "169: }",
          "171: const char* HttpSchemeMetadata::DisplayValue(MementoType content_type) {",
          "172:   switch (content_type) {",
          "173:     case kHttp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x) {",
          "172:   switch (x) {",
          "173:     case HttpSchemeMetadata::kHttp:",
          "174:       return 4;",
          "175:     case HttpSchemeMetadata::kHttps:",
          "176:       return 5;",
          "177:     default:",
          "178:       return 0;",
          "179:   }",
          "180: }",
          "",
          "---------------"
        ],
        "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h": [
          "File: src/core/lib/transport/metadata_batch.h -> src/core/lib/transport/metadata_batch.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: namespace grpc_core {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: template <typename Key>",
          "58: size_t EncodedSizeOfKey(Key, const typename Key::ValueType& value) {",
          "59:   return Key::Encode(value).size();",
          "60: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   static const char* DisplayValue(MementoType te);",
          "89: };",
          "92: struct ContentTypeMetadata {",
          "93:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: inline size_t EncodedSizeOfKey(TeMetadata, TeMetadata::ValueType x) {",
          "102:   return x == TeMetadata::kTrailers ? 8 : 0;",
          "103: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   static const char* DisplayValue(MementoType content_type);",
          "133: };",
          "136: struct HttpMethodMetadata {",
          "137:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:   }",
          "340: };",
          "343: struct LbTokenMetadata : public SimpleSliceBasedMetadata {",
          "344:   static constexpr bool kRepeatable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358: inline size_t EncodedSizeOfKey(GrpcLbClientStatsMetadata,",
          "359:                                GrpcLbClientStatsMetadata::ValueType) {",
          "360:   return 0;",
          "361: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}