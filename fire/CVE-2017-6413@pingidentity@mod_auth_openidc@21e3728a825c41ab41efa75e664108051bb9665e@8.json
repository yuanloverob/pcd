{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e821f5e928ab7c2141d2379a645533d127266110",
      "candidate_info": {
        "commit_hash": "e821f5e928ab7c2141d2379a645533d127266110",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/e821f5e928ab7c2141d2379a645533d127266110",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "doc endpoint auth commit; bump to 2.3.1rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1961d6df3cc4726c14ef41753f86b1f44d5d93b9",
      "candidate_info": {
        "commit_hash": "1961d6df3cc4726c14ef41753f86b1f44d5d93b9",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/1961d6df3cc4726c14ef41753f86b1f44d5d93b9",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release version 2.3.2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a6b609e1a9b7fb02a11c4bed9f07b59a29b173b",
      "candidate_info": {
        "commit_hash": "1a6b609e1a9b7fb02a11c4bed9f07b59a29b173b",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/1a6b609e1a9b7fb02a11c4bed9f07b59a29b173b",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/cache.h",
          "src/cache/common.c",
          "src/cache/shm.c",
          "src/config.c"
        ],
        "message": "fix \"graceful\" restart for shm/redis cache backends; see #296\n\nbump to 2.3.2rc8\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/cache.h||src/cache/cache.h",
          "src/cache/common.c||src/cache/common.c",
          "src/cache/shm.c||src/cache/shm.c",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/cache.h||src/cache/cache.h": [
          "File: src/cache/cache.h -> src/cache/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #define _MOD_AUTH_OPENIDC_CACHE_H_",
          "56: #include \"apr_global_mutex.h\"",
          "58: typedef void * (*oidc_cache_cfg_create)(apr_pool_t *pool);",
          "59: typedef int (*oidc_cache_post_config_function)(server_rec *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"apr_shm.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: typedef struct oidc_cache_mutex_t {",
          "79:  apr_global_mutex_t *mutex;",
          "80:  char *mutex_filename;",
          "81: } oidc_cache_mutex_t;",
          "83: oidc_cache_mutex_t *oidc_cache_mutex_create(apr_pool_t *pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  apr_shm_t *shm;",
          "83:  int *sema;",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  oidc_cache_mutex_t *ctx = apr_pcalloc(pool, sizeof(oidc_cache_mutex_t));",
          "80:  ctx->mutex = NULL;",
          "81:  ctx->mutex_filename = NULL;",
          "82:  return ctx;",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  ctx->shm = NULL;",
          "83:  ctx->sema = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:  }",
          "130: #endif",
          "132:  return TRUE;",
          "133: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:  rv = apr_shm_create(&m->shm, sizeof(int), NULL, s->process->pool);",
          "135:  if (rv != APR_SUCCESS) {",
          "136:   oidc_serror(s, \"apr_shm_create failed to create shared memory segment\");",
          "137:   return FALSE;",
          "138:  }",
          "140:  m->sema = apr_shm_baseaddr_get(m->shm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:   oidc_serror(s,",
          "147:     \"apr_global_mutex_child_init failed to reopen mutex on file %s: %s (%d)\",",
          "148:     m->mutex_filename, oidc_cache_status2str(rv), rv);",
          "149:  }",
          "151:  return rv;",
          "152: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:  } else {",
          "161:   apr_global_mutex_lock(m->mutex);",
          "162:   m->sema = apr_shm_baseaddr_get(m->shm);",
          "163:   (*m->sema)++;",
          "164:   apr_global_mutex_unlock(m->mutex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:  apr_status_t rv = APR_SUCCESS;",
          "189:  if (m->mutex != NULL) {",
          "195:  }",
          "197:  return rv;",
          "",
          "[Removed Lines]",
          "190:   rv = apr_global_mutex_destroy(m->mutex);",
          "191:   if (rv != APR_SUCCESS)",
          "192:    oidc_swarn(s, \"apr_global_mutex_destroy failed: %s (%d)\",",
          "193:      oidc_cache_status2str(rv), rv);",
          "194:   m->mutex = NULL;",
          "",
          "[Added Lines]",
          "209:   apr_global_mutex_lock(m->mutex);",
          "210:   (*m->sema)--;",
          "212:   apr_global_mutex_unlock(m->mutex);",
          "214:   if ((m->shm != NULL) && (*m->sema == 0)) {",
          "216:    rv = apr_global_mutex_destroy(m->mutex);",
          "217:    oidc_sdebug(s, \"apr_global_mutex_destroy returned :%d\", rv);",
          "218:    m->mutex = NULL;",
          "220:    rv = apr_shm_destroy(m->shm);",
          "221:    oidc_sdebug(s, \"apr_shm_destroy for semaphore returned: %d\", rv);",
          "222:    m->shm = NULL;",
          "224:    rv = APR_SUCCESS;",
          "225:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "511:   const char *key) {",
          "512:  char *input = apr_psprintf(r->pool, \"%s:%s\", passphrase, key);",
          "513:  char *output = NULL;",
          "516:   oidc_error(r,",
          "517:     \"oidc_util_hash_string_and_base64url_encode returned an error\");",
          "518:   return NULL;",
          "",
          "[Removed Lines]",
          "514:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256, input,",
          "515:    &output) == FALSE) {",
          "",
          "[Added Lines]",
          "545:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256,",
          "546:    input, &output) == FALSE) {",
          "",
          "---------------"
        ],
        "src/cache/shm.c||src/cache/shm.c": [
          "File: src/cache/shm.c -> src/cache/shm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:  apr_status_t rv = APR_SUCCESS;",
          "333:  if (context->shm) {",
          "336:   context->shm = NULL;",
          "337:  }",
          "339:  oidc_cache_mutex_destroy(s, context->mutex);",
          "",
          "[Removed Lines]",
          "334:   rv = apr_shm_destroy(context->shm);",
          "335:   oidc_sdebug(s, \"apr_shm_destroy returned: %d\", rv);",
          "",
          "[Added Lines]",
          "334:   apr_global_mutex_lock(context->mutex->mutex);",
          "335:   if (*context->mutex->sema == 1) {",
          "336:    rv = apr_shm_destroy(context->shm);",
          "337:    oidc_sdebug(s, \"apr_shm_destroy returned: %d\", rv);",
          "338:   }",
          "340:   apr_global_mutex_unlock(context->mutex->mutex);",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1977:  server_rec *sp = (server_rec *) data;",
          "1978:  while (sp != NULL) {",
          "1979:   oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(sp->module_config,",
          "",
          "[Removed Lines]",
          "1975: static apr_status_t oidc_cleanup(void *data) {",
          "",
          "[Added Lines]",
          "1975: static apr_status_t oidc_cleanup_child(void *data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1994:   sp = sp->next;",
          "1995:  }",
          "1997: #if (defined (OPENSSL_THREADS) && APR_HAS_THREADS)",
          "1998:  if (CRYPTO_get_locking_callback() == oidc_ssl_locking_callback)",
          "1999:   CRYPTO_set_locking_callback(NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1996:  return APR_SUCCESS;",
          "1997: }",
          "1999: static apr_status_t oidc_cleanup_parent(void *data) {",
          "2001:  oidc_cleanup_child(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2081:  }",
          "2086:  server_rec *sp = s;",
          "2087:  while (sp != NULL) {",
          "",
          "[Removed Lines]",
          "2084:  apr_pool_cleanup_register(pool, s, oidc_cleanup, apr_pool_cleanup_null);",
          "",
          "[Added Lines]",
          "2090:  apr_pool_cleanup_register(pool, s, oidc_cleanup_parent, apr_pool_cleanup_null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2134: static void oidc_child_init(apr_pool_t *p, server_rec *s) {",
          "2137:     &auth_openidc_module);",
          "2138:   if (cfg->cache->child_init != NULL) {",
          "2141:    }",
          "2142:   }",
          "2144:  }",
          "2145: }",
          "",
          "[Removed Lines]",
          "2135:  while (s != NULL) {",
          "2136:   oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(s->module_config,",
          "2139:    if (cfg->cache->child_init(p, s) != APR_SUCCESS) {",
          "2140:     oidc_serror(s, \"cfg->cache->child_init failed\");",
          "2143:   s = s->next;",
          "",
          "[Added Lines]",
          "2141:  server_rec *sp = s;",
          "2142:  while (sp != NULL) {",
          "2143:   oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(sp->module_config,",
          "2146:    if (cfg->cache->child_init(p, sp) != APR_SUCCESS) {",
          "2147:     oidc_serror(sp, \"cfg->cache->child_init failed\");",
          "2150:   sp = sp->next;",
          "2152:     apr_pool_cleanup_register(p, s, oidc_cleanup_child, apr_pool_cleanup_null);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58e86f10ae460c1554b6091cc2cbf7b7b242acb2",
      "candidate_info": {
        "commit_hash": "58e86f10ae460c1554b6091cc2cbf7b7b242acb2",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/58e86f10ae460c1554b6091cc2cbf7b7b242acb2",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "Revert \"fix crash on prefork process exit when used with Redis cache; see #256\"\n\nThis reverts commit 51d8c7839840990d99c87ba00a8b3458516d1585.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: #define OIDC_CACHE_REDIS_CONTEXT \"oidc_cache_redis_context\"",
          "183:   oidc_cache_cfg_redis_t *context) {",
          "188:    r->server->process->pool);",
          "200:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\",",
          "202:    return NULL;",
          "203:   }",
          "211:   oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "212:     context->host_str, context->port);",
          "213:  }",
          "216: }",
          "",
          "[Removed Lines]",
          "163: typedef struct {",
          "164:  redisContext *ctx;",
          "165: } oidc_cache_redis_ctx_t;",
          "170: static apr_status_t oidc_cache_redis_free(void *ptr) {",
          "171:  oidc_cache_redis_ctx_t *rctx = (oidc_cache_redis_ctx_t *) ptr;",
          "172:  if (rctx->ctx != NULL) {",
          "173:   redisFree(rctx->ctx);",
          "174:   rctx->ctx = NULL;",
          "175:  }",
          "176:  return APR_SUCCESS;",
          "177: }",
          "182: static oidc_cache_redis_ctx_t * oidc_cache_redis_connect(request_rec *r,",
          "186:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "187:  apr_pool_userdata_get((void **) &rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "190:  if (rctx == NULL) {",
          "192:   rctx = apr_pcalloc(r->server->process->pool,",
          "193:     sizeof(oidc_cache_redis_ctx_t));",
          "196:   rctx->ctx = redisConnect(context->host_str, context->port);",
          "199:   if ((rctx->ctx == NULL) || (rctx->ctx->err != 0)) {",
          "201:      context->host_str, context->port, rctx->ctx->errstr);",
          "206:   apr_pool_userdata_set(rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "207:     (apr_status_t (*)(void *)) oidc_cache_redis_free,",
          "208:     r->server->process->pool);",
          "215:  return rctx;",
          "",
          "[Added Lines]",
          "163: static redisContext * oidc_cache_redis_connect(request_rec *r,",
          "167:  redisContext *ctx = NULL;",
          "168:  apr_pool_userdata_get((void **) &ctx, OIDC_CACHE_REDIS_CONTEXT,",
          "171:  if (ctx == NULL) {",
          "174:   ctx = redisConnect(context->host_str, context->port);",
          "177:   if ((ctx == NULL) || (ctx->err != 0)) {",
          "179:      context->host_str, context->port, ctx->errstr);",
          "184:   apr_pool_userdata_set(ctx, OIDC_CACHE_REDIS_CONTEXT,",
          "185:     (apr_status_t (*)(void *)) redisFree, r->server->process->pool);",
          "192:  return ctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "222:   oidc_cache_cfg_redis_t *context, const char *format, ...) {",
          "225:  redisReply *reply = NULL;",
          "226:  int i = 0;",
          "",
          "[Removed Lines]",
          "224:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "",
          "[Added Lines]",
          "201:  redisContext *ctx = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:  for (i = 0; i < 2; i++) {",
          "234:    break;",
          "236:   if (context->passwd != NULL) {",
          "238:      apr_psprintf(r->pool, \"AUTH %s\", context->passwd));",
          "239:   }",
          "242:   va_list args;",
          "243:   va_start(args, format);",
          "245:   va_end(args);",
          "247:   if (context->passwd != NULL) {",
          "250:    if (reply == NULL) {",
          "251:     oidc_error(r,",
          "252:       \"authentication to the Redis server (%s:%d) failed, reply == NULL\",",
          "",
          "[Removed Lines]",
          "232:   rctx = oidc_cache_redis_connect(r, context);",
          "233:   if ((rctx == NULL) || (rctx->ctx == NULL))",
          "237:    redisAppendCommand(rctx->ctx,",
          "244:   redisvAppendCommand(rctx->ctx, format, args);",
          "249:    redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "209:   ctx = oidc_cache_redis_connect(r, context);",
          "210:   if (ctx == NULL)",
          "214:    redisAppendCommand(ctx,",
          "221:   redisvAppendCommand(ctx, format, args);",
          "226:    redisGetReply(ctx, (void **) &reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262:   reply = NULL;",
          "266:   if (reply != NULL) {",
          "",
          "[Removed Lines]",
          "263:   redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "240:   redisGetReply(ctx, (void **) &reply);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "276:   oidc_error(r,",
          "277:     \"redisvAppendCommand/redisGetReply (%d) failed, disconnecting: '%s'\",",
          "282:  }",
          "284:  return reply;",
          "",
          "[Removed Lines]",
          "278:     i, rctx->ctx->errstr);",
          "281:   oidc_cache_redis_free(rctx);",
          "",
          "[Added Lines]",
          "255:     i, ctx->errstr);",
          "258:   redisFree(ctx);",
          "259:   apr_pool_userdata_set(NULL, OIDC_CACHE_REDIS_CONTEXT,",
          "260:     apr_pool_cleanup_null, r->server->process->pool);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0777be42d2d9b64a6801b0eb841cfa133efe3a3",
      "candidate_info": {
        "commit_hash": "c0777be42d2d9b64a6801b0eb841cfa133efe3a3",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/c0777be42d2d9b64a6801b0eb841cfa133efe3a3",
        "files": [
          ".travis.yml",
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.3.0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    }
  ]
}