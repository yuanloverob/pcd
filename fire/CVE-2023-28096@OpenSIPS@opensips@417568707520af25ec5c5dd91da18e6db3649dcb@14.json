{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3dacc35a733b45af280da7be6ca2f84a1606901",
      "candidate_info": {
        "commit_hash": "f3dacc35a733b45af280da7be6ca2f84a1606901",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/f3dacc35a733b45af280da7be6ca2f84a1606901",
        "files": [
          "modules/ldap/ldap_api_fn.c",
          "modules/ldap/ldap_connect.c",
          "modules/ldap/ldap_connect.h",
          "modules/ldap/ldap_mod.c"
        ],
        "message": "Merge pull request #2779 from ppisar/openldap-2.6.1\n\nRename an ldap_connect() to opensips_ldap_connect()\n\n(cherry picked from commit 457111cebc2010225dffa668edd8155fdca6a62a)",
        "before_after_code_files": [
          "modules/ldap/ldap_api_fn.c||modules/ldap/ldap_api_fn.c",
          "modules/ldap/ldap_connect.c||modules/ldap/ldap_connect.c",
          "modules/ldap/ldap_connect.h||modules/ldap/ldap_connect.h",
          "modules/ldap/ldap_mod.c||modules/ldap/ldap_mod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/ldap/ldap_api_fn.c||modules/ldap/ldap_api_fn.c": [
          "File: modules/ldap/ldap_api_fn.c -> modules/ldap/ldap_api_fn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   return NULL;",
          "119:  }",
          "122:    LM_ERR(\"failed to create new ldap connection!\\n\");",
          "123:    return NULL;",
          "124:  }",
          "",
          "[Removed Lines]",
          "121:  if (ldap_connect(lds->name, NULL) < 0) {",
          "",
          "[Added Lines]",
          "121:  if (opensips_ldap_connect(lds->name, NULL) < 0) {",
          "",
          "---------------"
        ],
        "modules/ldap/ldap_connect.c||modules/ldap/ldap_connect.c": [
          "File: modules/ldap/ldap_connect.c -> modules/ldap/ldap_connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: }",
          "117: {",
          "118:  int rc;",
          "119:  int ldap_proto_version;",
          "",
          "[Removed Lines]",
          "116: int ldap_connect(char* _ld_name, struct ld_conn* conn)",
          "",
          "[Added Lines]",
          "116: int opensips_ldap_connect(char* _ld_name, struct ld_conn* conn)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:   return -1;",
          "412:  }",
          "415:  {",
          "416:   LM_ERR(\"[%s]: reconnect failed\\n\",",
          "417:     _ld_name);",
          "",
          "[Removed Lines]",
          "414:  if ((rc = ldap_connect(_ld_name, conn)) != 0)",
          "",
          "[Added Lines]",
          "414:  if ((rc = opensips_ldap_connect(_ld_name, conn)) != 0)",
          "",
          "---------------"
        ],
        "modules/ldap/ldap_connect.h||modules/ldap/ldap_connect.h": [
          "File: modules/ldap/ldap_connect.h -> modules/ldap/ldap_connect.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: struct ld_conn;",
          "47: extern int ldap_disconnect(char* _ld_name, struct ld_conn* conn);",
          "48: extern int ldap_reconnect(char* _ld_name, struct ld_conn* conn);",
          "49: extern int ldap_get_vendor_version(char** _version);",
          "",
          "[Removed Lines]",
          "46: extern int ldap_connect(char* _ld_name, struct ld_conn* conn);",
          "",
          "[Added Lines]",
          "46: extern int opensips_ldap_connect(char* _ld_name, struct ld_conn* conn);",
          "",
          "---------------"
        ],
        "modules/ldap/ldap_mod.c||modules/ldap/ldap_mod.c": [
          "File: modules/ldap/ldap_mod.c -> modules/ldap/ldap_mod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   }",
          "190:   {",
          "191:    LM_ERR(\"[%s]: failed to connect to LDAP host(s)\\n\", ld_name);",
          "192:    ldap_disconnect(ld_name, NULL);",
          "",
          "[Removed Lines]",
          "189:   if (ldap_connect(ld_name, &get_ld_session(ld_name)->conn_s) != 0)",
          "",
          "[Added Lines]",
          "189:   if (opensips_ldap_connect(ld_name, &get_ld_session(ld_name)->conn_s) != 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccfdb699bdb2e43979a780ead5baad31e2120a00",
      "candidate_info": {
        "commit_hash": "ccfdb699bdb2e43979a780ead5baad31e2120a00",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/ccfdb699bdb2e43979a780ead5baad31e2120a00",
        "files": [
          "modules/clusterer/sharing_tags.c"
        ],
        "message": "clusterer: Always broadcast a packet after shtag activation\n\nDue to network outages, it is currently possible for both sharing tags\nof an Active/Backup pair to end up in ACTIVE state.  This patch makes it\nso a \"cluster_shtag_set_active\" MI command always broadcasts (forces)\nthe ACTIVE state onto all neighbours, thus fixing the incorrect,\npost-outage state of the tags.\n\nCredits to @bogdan-iancu and @rvlad-patrascu for their contributions to\nthis fix!\n\n(cherry picked from commit 77c24e2122ea6f66f251349e05984cfbdef9166c)",
        "before_after_code_files": [
          "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/sharing_tags.c||modules/clusterer/sharing_tags.c": [
          "File: modules/clusterer/sharing_tags.c -> modules/clusterer/sharing_tags.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:  }",
          "585:  ret = (tag==NULL)? -1 : tag->state ;",
          "622:     lock_switch_write(shtags_lock, lock_old_flag);",
          "624:     lock_switch_read(shtags_lock, lock_old_flag);",
          "625:    }",
          "626:   }",
          "631:   shtag_run_callbacks( tag_name, SHTAG_STATE_ACTIVE, cluster_id);",
          "635:  return ret;",
          "636: }",
          "",
          "[Removed Lines]",
          "588:  if (ret==SHTAG_STATE_ACTIVE && old_state!=SHTAG_STATE_ACTIVE) {",
          "590:   cl = get_cluster_by_id(cluster_id);",
          "591:   if (!cl) {",
          "592:    LM_ERR(\"Bad cluster id: %d\\n\", cluster_id);",
          "593:    lock_stop_sw_read(shtags_lock);",
          "594:    return ret;",
          "595:   }",
          "598:   for (node = cl->node_list; node; node = node->next) {",
          "599:    if (tag->send_active_msg)",
          "600:     for (ni = tag->active_msgs_sent;",
          "601:      ni && ni->node_id != node->node_id; ni = ni->next) ;",
          "602:    if (!tag->send_active_msg || !ni) {",
          "603:     if (shtag_send_active_info(cluster_id,&tag->name,node->node_id)<0){",
          "604:      LM_ERR(\"Failed to send message about tag [%.*s/%d] \"",
          "605:       \"going active to node: %d\\n\", tag_name->len, tag_name->s,",
          "606:       cluster_id, node->node_id);",
          "608:      lock_switch_write(shtags_lock, lock_old_flag);",
          "609:      tag->send_active_msg = 1;",
          "610:      lock_switch_read(shtags_lock, lock_old_flag);",
          "612:      continue;",
          "613:     }",
          "614:     ni = shm_malloc(sizeof *ni);",
          "615:     if (!ni) {",
          "616:      LM_ERR(\"No more shm memory!\\n\");",
          "617:      lock_stop_sw_read(shtags_lock);",
          "618:      return ret;",
          "619:     }",
          "620:     ni->node_id = node->node_id;",
          "621:     ni->next = tag->active_msgs_sent;",
          "623:     tag->active_msgs_sent = ni;",
          "628:   lock_stop_sw_read(shtags_lock);",
          "632:  } else",
          "633:   lock_stop_sw_read(shtags_lock);",
          "",
          "[Added Lines]",
          "587:  cl = get_cluster_by_id(cluster_id);",
          "588:  if (!cl) {",
          "589:   LM_ERR(\"Bad cluster id: %d\\n\", cluster_id);",
          "590:   lock_stop_sw_read(shtags_lock);",
          "591:   return ret;",
          "592:  }",
          "595:  for (node = cl->node_list; node; node = node->next) {",
          "596:   if (tag->send_active_msg)",
          "597:    for (ni = tag->active_msgs_sent;",
          "598:     ni && ni->node_id != node->node_id; ni = ni->next) ;",
          "599:   if (!tag->send_active_msg || !ni) {",
          "600:    if (shtag_send_active_info(cluster_id,&tag->name,node->node_id)<0){",
          "601:     LM_ERR(\"Failed to send message about tag [%.*s/%d] \"",
          "602:      \"going active to node: %d\\n\", tag_name->len, tag_name->s,",
          "603:      cluster_id, node->node_id);",
          "606:     tag->send_active_msg = 1;",
          "609:     continue;",
          "610:    }",
          "611:    ni = shm_malloc(sizeof *ni);",
          "612:    if (!ni) {",
          "613:     LM_ERR(\"No more shm memory!\\n\");",
          "614:     lock_stop_sw_read(shtags_lock);",
          "615:     return ret;",
          "617:    ni->node_id = node->node_id;",
          "618:    ni->next = tag->active_msgs_sent;",
          "619:    lock_switch_write(shtags_lock, lock_old_flag);",
          "620:    tag->active_msgs_sent = ni;",
          "621:    lock_switch_read(shtags_lock, lock_old_flag);",
          "623:  }",
          "625:  lock_stop_sw_read(shtags_lock);",
          "628:  if (ret==SHTAG_STATE_ACTIVE && old_state!=SHTAG_STATE_ACTIVE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7a5f41754c03fa20921e86a7ff25d2f0b0abf76",
      "candidate_info": {
        "commit_hash": "c7a5f41754c03fa20921e86a7ff25d2f0b0abf76",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c7a5f41754c03fa20921e86a7ff25d2f0b0abf76",
        "files": [
          "modules/b2b_entities/dlg.c"
        ],
        "message": "b2b_entities: fix possible shm memory leaks\n\nFix leaking transactions when deleting an entity without sending a final reply.\n\nThanks to David Escartin from Sonoc for reporting.",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1763: void b2b_delete_record(b2b_dlg_t* dlg, b2b_table htable, unsigned int hash_index)",
          "1764: {",
          "1765:  if(dlg->prev == NULL)",
          "1766:  {",
          "1767:   htable[hash_index].first = dlg->next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1765:  str reply_text = str_init(\"Request Timeout\");",
          "1766:  struct to_body *pto;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:  if(dlg->uac_tran)",
          "1783:   tmb.unref_cell(dlg->uac_tran);",
          "1786:   tmb.unref_cell(dlg->uas_tran);",
          "1788:  if(dlg->ack_sdp.s)",
          "1789:   shm_free(dlg->ack_sdp.s);",
          "",
          "[Removed Lines]",
          "1785:  if(dlg->uas_tran)",
          "",
          "[Added Lines]",
          "1788:  if(dlg->uas_tran) {",
          "1791:   pto = get_to(dlg->uas_tran->uas.request);",
          "1792:   if (pto == NULL || pto->error != PARSE_OK) {",
          "1793:    LM_ERR(\"'To' header COULD NOT be parsed\\n\");",
          "1794:   } else {",
          "1795:    if (tmb.t_reply_with_body(dlg->uas_tran, 408, &reply_text, 0, 0,",
          "1796:     &pto->tag_value) < 0)",
          "1797:     LM_ERR(\"Failed to send 408 reply\\n\");",
          "1798:   }",
          "1799:  }",
          "1801:  if (dlg->update_tran) {",
          "1802:   tmb.unref_cell(dlg->update_tran);",
          "1804:   pto = get_to(dlg->update_tran->uas.request);",
          "1805:   if (pto == NULL || pto->error != PARSE_OK) {",
          "1806:    LM_ERR(\"'To' header COULD NOT be parsed\\n\");",
          "1807:   } else {",
          "1808:    if (tmb.t_reply_with_body(dlg->update_tran, 408, &reply_text, 0, 0,",
          "1809:     &pto->tag_value) < 0)",
          "1810:     LM_ERR(\"Failed to send 408 reply\\n\");",
          "1811:   }",
          "1812:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
      "candidate_info": {
        "commit_hash": "c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/c46af85cadd91a05cbb52687ab27f94ae79b3aa6",
        "files": [
          "parser/parse_uri.c"
        ],
        "message": "parse_uri: Complete the fix for undefined bitwise left-shift (OSS-Fuzz)\n\nThe default auto-cast to (int) is not enough, as a value such as\n255 << 24 can still overflow the 31 value bits...\n\nFixes OSS-Fuzz#51542\n\n(cherry picked from commit e0d90ec107484051e6c769056036447361c5724d)",
        "before_after_code_files": [
          "parser/parse_uri.c||parser/parse_uri.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_uri.c||parser/parse_uri.c": [
          "File: parser/parse_uri.c -> parser/parse_uri.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:  if (len<5) goto error_too_short;",
          "664:  scheme|=0x20202020;",
          "665:  if (scheme==SIP_SCH){",
          "666:   uri->type=SIP_URI_T;",
          "",
          "[Removed Lines]",
          "662:  scheme=(unsigned char)buf[0]+((unsigned char)buf[1]<<8)+",
          "663:    ((unsigned char)buf[2]<<16)+((unsigned char)buf[3]<<24);",
          "",
          "[Added Lines]",
          "662:  scheme=(unsigned)(unsigned char)buf[0]",
          "663:    + (((unsigned)(unsigned char)buf[1])<<8)",
          "664:    + (((unsigned)(unsigned char)buf[2])<<16)",
          "665:    + (((unsigned)(unsigned char)buf[3])<<24);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9c092ede40af311c9b27317a3029f785f0eb14c",
      "candidate_info": {
        "commit_hash": "b9c092ede40af311c9b27317a3029f785f0eb14c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b9c092ede40af311c9b27317a3029f785f0eb14c",
        "files": [
          "modules/b2b_entities/b2be_db.c"
        ],
        "message": "b2b_entities: fix the right number of rows when leg is missing\n\nThanks go to Norm Brandinger from Five9 for reporting, testing and\nproviding all the help to pinpoint this issue!\n\n(cherry picked from commit b005a3795f9a762011f488cb403f2e9bd7a7ade1)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_db.c||modules/b2b_entities/b2be_db.c": [
          "File: modules/b2b_entities/b2be_db.c -> modules/b2b_entities/b2be_db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:  int i;",
          "280:  dlg_leg_t* leg;",
          "281:  b2b_dlg_t* dlg;",
          "283:  if (!b2be_dbf.init)",
          "284:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:  int cols_no = DB_COLS_NO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:    qvals[20].val.int_val = dlg->last_invite_cseq;",
          "347:    qvals[21].val.str_val = dlg->contact[0];",
          "348:    qvals[22].val.str_val = dlg->contact[1];",
          "350:    leg = dlg->legs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:    cols_no = 23;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354:     qvals[24].val.int_val= leg->cseq;",
          "355:     qvals[25].val.str_val= leg->contact;",
          "356:     qvals[26].val.str_val= leg->route_set;",
          "357:    }",
          "359:    if(dlg->db_flag == INSERTDB_FLAG)",
          "360:    {",
          "363:     {",
          "364:      LM_ERR(\"Sql insert failed\\n\");",
          "365:      if(!no_lock)",
          "",
          "[Removed Lines]",
          "362:     if(b2be_dbf.insert(b2be_db, qcols, qvals, DB_COLS_NO)< 0)",
          "",
          "[Added Lines]",
          "359:     cols_no = 27;",
          "365:     if(b2be_dbf.insert(b2be_db, qcols, qvals, cols_no)< 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "371:    {",
          "372:     if(b2be_dbf.update(b2be_db, qcols, 0, qvals,",
          "373:        qcols+n_start_update, qvals+n_start_update,",
          "375:     {",
          "376:      LM_ERR(\"Sql update failed\\n\");",
          "377:      if(!no_lock)",
          "",
          "[Removed Lines]",
          "374:        n_query_update, DB_COLS_NO-n_start_update)< 0)",
          "",
          "[Added Lines]",
          "377:        n_query_update, cols_no-n_start_update)< 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}