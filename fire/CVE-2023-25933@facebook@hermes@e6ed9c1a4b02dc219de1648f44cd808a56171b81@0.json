{
  "cve_id": "CVE-2023-25933",
  "cve_desc": "A type confusion bug in TypedArray prior to commit e6ed9c1a4b02dc219de1648f44cd808a56171b81 could have been used by a malicious attacker to execute arbitrary code via untrusted JavaScript. Note that this is only exploitable in cases where Hermes is used to execute untrusted JavaScript. Hence, most React Native applications are not affected.",
  "repo": "facebook/hermes",
  "patch_hash": "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
  "patch_info": {
    "commit_hash": "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
    "repo": "facebook/hermes",
    "commit_url": "https://github.com/facebook/hermes/commit/e6ed9c1a4b02dc219de1648f44cd808a56171b81",
    "files": [
      "include/hermes/VM/HermesValue.h",
      "lib/Optimizer/Scalar/TypeInference.cpp",
      "lib/VM/JSLib/TypedArray.cpp",
      "test/BCGen/HBC/arguments.js",
      "test/Optimizer/type_infer.js",
      "test/hermes/regress-bigint-type-inference.js",
      "test/hermes/regress-typed-array-at-nan.js"
    ],
    "message": "Re-sync with internal repository (#960)\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
    "before_after_code_files": [
      "include/hermes/VM/HermesValue.h||include/hermes/VM/HermesValue.h",
      "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
      "lib/VM/JSLib/TypedArray.cpp||lib/VM/JSLib/TypedArray.cpp",
      "test/BCGen/HBC/arguments.js||test/BCGen/HBC/arguments.js",
      "test/Optimizer/type_infer.js||test/Optimizer/type_infer.js",
      "test/hermes/regress-bigint-type-inference.js||test/hermes/regress-bigint-type-inference.js",
      "test/hermes/regress-typed-array-at-nan.js||test/hermes/regress-typed-array-at-nan.js"
    ]
  },
  "patch_diff": {
    "include/hermes/VM/HermesValue.h||include/hermes/VM/HermesValue.h": [
      "File: include/hermes/VM/HermesValue.h -> include/hermes/VM/HermesValue.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "353:     return encodeDoubleValue((double)num);",
      "354:   }",
      "356:   static HermesValue encodeNaNValue() {",
      "357:     return HermesValue(",
      "358:         llvh::DoubleToBits(std::numeric_limits<double>::quiet_NaN()));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "360:   inline static HermesValue encodeUntrustedNumberValue(double num) {",
      "361:     return encodeUntrustedDoubleValue(num);",
      "362:   }",
      "368:   template <typename T>",
      "369:   inline static",
      "370:       typename std::enable_if<std::is_integral<T>::value, HermesValue>::type",
      "371:       encodeUntrustedNumberValue(T num) {",
      "372:     assert((double)num == num && \"value not representable as double\");",
      "373:     return encodeUntrustedDoubleValue((double)num);",
      "374:   }",
      "",
      "---------------"
    ],
    "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp": [
      "File: lib/Optimizer/Scalar/TypeInference.cpp -> lib/Optimizer/Scalar/TypeInference.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:   bool runOnModule(Module *M);",
      "61: };",
      "63: static bool inferUnaryArith(UnaryOperatorInst *UOI, Type numberResultType) {",
      "64:   Value *op = UOI->getSingleOperand();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: static bool isBigIntOrObject(Type type) {",
      "66:   return type.canBeBigInt() || type.canBeObject();",
      "67: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:     return true;",
      "74:   }",
      "80:   UOI->setType(Type::unionTy(numberResultType, mayBeBigInt));",
      "81:   return true;",
      "82: }",
      "",
      "[Removed Lines]",
      "76:   Type mayBeBigInt =",
      "77:       op->getType().canBeBigInt() ? Type::createBigInt() : Type::createNoType();",
      "",
      "[Added Lines]",
      "82:   Type mayBeBigInt = isBigIntOrObject(op->getType()) ? Type::createBigInt()",
      "83:                                                      : Type::createNoType();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "298:     return true;",
      "299:   }",
      "302:       ? Type::createBigInt()",
      "303:       : Type::createNoType();",
      "307:   BOI->setType(Type::unionTy(numberType, mayBeBigInt));",
      "308:   return true;",
      "309: }",
      "",
      "[Removed Lines]",
      "301:   Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()",
      "",
      "[Added Lines]",
      "308:   Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "312:   Type LeftTy = BOI->getLeftHandSide()->getType();",
      "313:   Type RightTy = BOI->getRightHandSide()->getType();",
      "316:       ? Type::createBigInt()",
      "317:       : Type::createNoType();",
      "321:   BOI->setType(Type::unionTy(Type::createInt32(), mayBeBigInt));",
      "322:   return true;",
      "323: }",
      "",
      "[Removed Lines]",
      "315:   Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()",
      "",
      "[Added Lines]",
      "322:   Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "395:           ? Type::createBigInt()",
      "396:           : Type::createNoType();",
      "",
      "[Removed Lines]",
      "394:       Type mayBeBigInt = (LeftTy.canBeBigInt() && RightTy.canBeBigInt())",
      "",
      "[Added Lines]",
      "401:       Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
      "",
      "---------------"
    ],
    "lib/VM/JSLib/TypedArray.cpp||lib/VM/JSLib/TypedArray.cpp": [
      "File: lib/VM/JSLib/TypedArray.cpp -> lib/VM/JSLib/TypedArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "817:     if (!arr->attached(runtime)) {                                         \\",
      "818:       return runtime.raiseTypeError(\"Underlying ArrayBuffer detached\");    \\",
      "819:     }                                                                      \\",
      "821:   }",
      "822:   switch (O->getKind()) {",
      "823: #include \"hermes/VM/TypedArrays.def\"",
      "",
      "[Removed Lines]",
      "820:     return HermesValue::encodeNumberValue(arr->at(runtime, k));            \\",
      "",
      "[Added Lines]",
      "820:     return HermesValue::encodeUntrustedNumberValue(arr->at(runtime, k));   \\",
      "",
      "---------------"
    ],
    "test/BCGen/HBC/arguments.js||test/BCGen/HBC/arguments.js": [
      "File: test/BCGen/HBC/arguments.js -> test/BCGen/HBC/arguments.js"
    ],
    "test/Optimizer/type_infer.js||test/Optimizer/type_infer.js": [
      "File: test/Optimizer/type_infer.js -> test/Optimizer/type_infer.js"
    ],
    "test/hermes/regress-bigint-type-inference.js||test/hermes/regress-bigint-type-inference.js": [
      "File: test/hermes/regress-bigint-type-inference.js -> test/hermes/regress-bigint-type-inference.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: function test() {",
      "12:     var o = { valueOf() { return 1n; } }",
      "13:     var bigint = 1n;",
      "14:     var result;",
      "16:     (() => result = o + bigint)();",
      "17:     print(result);",
      "22:     (() => result = o - bigint)();",
      "23:     print(result);",
      "28:     (() => result = o * bigint)();",
      "29:     print(result);",
      "34:     (() => result = o / bigint)();",
      "35:     print(result);",
      "40:     (() => result = o % bigint)();",
      "41:     print(result);",
      "46:     (() => result = o << bigint)();",
      "47:     print(result);",
      "52:     (() => result = o >> bigint)();",
      "53:     print(result);",
      "58:     (() => result = o | bigint)();",
      "59:     print(result);",
      "64:     (() => result = o ^ bigint)();",
      "65:     print(result);",
      "70:     (() => result = o & bigint)();",
      "71:     print(result);",
      "76:     (() => result = - bigint)();",
      "77:     print(result);",
      "82:     (() => result = ~ bigint)();",
      "83:     print(result);",
      "88:     (() => result = o++)();",
      "89:     print(result);",
      "94:     (() => result = o--)();",
      "95:     print(result);",
      "100:     (() => result = ++o)();",
      "101:     print(result);",
      "106:     (() => result = --o)();",
      "107:     print(result);",
      "111: }",
      "113: test();",
      "",
      "---------------"
    ],
    "test/hermes/regress-typed-array-at-nan.js||test/hermes/regress-typed-array-at-nan.js": [
      "File: test/hermes/regress-typed-array-at-nan.js -> test/hermes/regress-typed-array-at-nan.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: print(\"typed-array-at-nan\");",
      "14: let ab = new ArrayBuffer(8);",
      "15: let i32a = new Int32Array(ab);",
      "17: i32a[0] = 0xcafebabe;",
      "18: i32a[1] = 0xffff0000;",
      "20: let f32a = new Float64Array(ab);",
      "21: var shouldBeNan = f32a.at(0)",
      "22: print(shouldBeNan);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c380c982038c5158c6a6780a47b695d0559041c7",
      "candidate_info": {
        "commit_hash": "c380c982038c5158c6a6780a47b695d0559041c7",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/c380c982038c5158c6a6780a47b695d0559041c7",
        "files": [
          "lib/Optimizer/Scalar/TypeInference.cpp",
          "test/hermes/regress-bigint-type-inference.js"
        ],
        "message": "Object subtypes can also result in bigint\n\nSummary:\nThis is a follow up for D43848883 -- Object subclasses as operands to arithmetic operations should\nalso be considered as possibly yielding BigInt.\n\nReviewed By: tmikov\n\nDifferential Revision: D44811177\n\nfbshipit-source-id: b0f60dd4201e521fbd7c8346ce27f342363408c4",
        "before_after_code_files": [
          "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
          "test/hermes/regress-bigint-type-inference.js||test/hermes/regress-bigint-type-inference.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
            "test/hermes/regress-bigint-type-inference.js||test/hermes/regress-bigint-type-inference.js"
          ],
          "candidate": [
            "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
            "test/hermes/regress-bigint-type-inference.js||test/hermes/regress-bigint-type-inference.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp": [
          "File: lib/Optimizer/Scalar/TypeInference.cpp -> lib/Optimizer/Scalar/TypeInference.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   bool runOnModule(Module *M);",
          "61: };",
          "65: static bool isBigIntOrObject(Type type) {",
          "67: }",
          "69: static bool inferUnaryArith(UnaryOperatorInst *UOI, Type numberResultType) {",
          "",
          "[Removed Lines]",
          "66:   return type.canBeBigInt() || type.canBeObject();",
          "",
          "[Added Lines]",
          "67:   return type.canBeBigInt() || type.canBeObjectSubtype();",
          "",
          "---------------"
        ],
        "test/hermes/regress-bigint-type-inference.js||test/hermes/regress-bigint-type-inference.js": [
          "File: test/hermes/regress-bigint-type-inference.js -> test/hermes/regress-bigint-type-inference.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     var result;",
          "17:     print(result);",
          "23:     print(result);",
          "29:     print(result);",
          "35:     print(result);",
          "41:     print(result);",
          "47:     print(result);",
          "53:     print(result);",
          "59:     print(result);",
          "65:     print(result);",
          "71:     print(result);",
          "77:     print(result);",
          "83:     print(result);",
          "89:     print(result);",
          "95:     print(result);",
          "101:     print(result);",
          "107:     print(result);",
          "",
          "[Removed Lines]",
          "11: function test() {",
          "12:     var o = { valueOf() { return 1n; } }",
          "13:     var bigint = 1n;",
          "16:     (() => result = o + bigint)();",
          "22:     (() => result = o - bigint)();",
          "28:     (() => result = o * bigint)();",
          "34:     (() => result = o / bigint)();",
          "40:     (() => result = o % bigint)();",
          "46:     (() => result = o << bigint)();",
          "52:     (() => result = o >> bigint)();",
          "58:     (() => result = o | bigint)();",
          "64:     (() => result = o ^ bigint)();",
          "70:     (() => result = o & bigint)();",
          "76:     (() => result = - bigint)();",
          "82:     (() => result = ~ bigint)();",
          "88:     (() => result = o++)();",
          "94:     (() => result = o--)();",
          "100:     (() => result = ++o)();",
          "106:     (() => result = --o)();",
          "111: }",
          "113: test();",
          "",
          "[Added Lines]",
          "12: (function testObject() {",
          "13:     var o = { valueOf: function() { return 1n; } };",
          "16:     (() => result = o + 1n)();",
          "22:     (() => result = o - 1n)();",
          "28:     (() => result = o * 1n)();",
          "34:     (() => result = o / 1n)();",
          "40:     (() => result = o % 1n)();",
          "46:     (() => result = o << 1n)();",
          "52:     (() => result = o >> 1n)();",
          "58:     (() => result = o | 1n)();",
          "64:     (() => result = o ^ 1n)();",
          "70:     (() => result = o & 1n)();",
          "76:     (() => result = - o)();",
          "82:     (() => result = ~ o)();",
          "88:     var o1 = { valueOf: function() { return 1n; } };",
          "89:     (() => result = o1++)();",
          "95:     var o2 = { valueOf: function() { return 1n; } };",
          "96:     (() => result = o2--)();",
          "102:     var o3 = { valueOf: function() { return 1n; } };",
          "103:     (() => result = ++o3)();",
          "104:     print(result);",
          "109:     var o4 = { valueOf: function() { return 1n; } };",
          "110:     (() => result = --o4)();",
          "111:     print(result);",
          "115: })();",
          "118: (function testRegex() {",
          "119:     var o = /a/; o.valueOf = function() { return 1n; };",
          "120:     var result;",
          "122:     (() => result = o + 1n)();",
          "123:     print(result);",
          "128:     (() => result = o - 1n)();",
          "129:     print(result);",
          "134:     (() => result = o * 1n)();",
          "135:     print(result);",
          "140:     (() => result = o / 1n)();",
          "141:     print(result);",
          "146:     (() => result = o % 1n)();",
          "147:     print(result);",
          "152:     (() => result = o << 1n)();",
          "153:     print(result);",
          "158:     (() => result = o >> 1n)();",
          "159:     print(result);",
          "164:     (() => result = o | 1n)();",
          "165:     print(result);",
          "170:     (() => result = o ^ 1n)();",
          "171:     print(result);",
          "176:     (() => result = o & 1n)();",
          "177:     print(result);",
          "182:     (() => result = - o)();",
          "183:     print(result);",
          "188:     (() => result = ~ o)();",
          "189:     print(result);",
          "194:     var o1 = /a/; o1.valueOf = function() { return 1n; };",
          "195:     (() => result = o1++)();",
          "196:     print(result);",
          "201:     var o2 = /a/; o2.valueOf = function() { return 1n; };",
          "202:     (() => result = o2--)();",
          "203:     print(result);",
          "208:     var o3 = /a/; o3.valueOf = function() { return 1n; };",
          "209:     (() => result = ++o3)();",
          "215:     var o4 = /a/; o4.valueOf = function() { return 1n; };",
          "216:     (() => result = --o4)();",
          "221:  })();",
          "224:  (function testClosure() {",
          "225:     var o = _ => o; o.valueOf = function() { return 1n; };",
          "226:     var result;",
          "228:     (() => result = o + 1n)();",
          "229:     print(result);",
          "234:     (() => result = o - 1n)();",
          "235:     print(result);",
          "240:     (() => result = o * 1n)();",
          "241:     print(result);",
          "246:     (() => result = o / 1n)();",
          "247:     print(result);",
          "252:     (() => result = o % 1n)();",
          "253:     print(result);",
          "258:     (() => result = o << 1n)();",
          "259:     print(result);",
          "264:     (() => result = o >> 1n)();",
          "265:     print(result);",
          "270:     (() => result = o | 1n)();",
          "271:     print(result);",
          "276:     (() => result = o ^ 1n)();",
          "277:     print(result);",
          "282:     (() => result = o & 1n)();",
          "283:     print(result);",
          "288:     (() => result = - o)();",
          "289:     print(result);",
          "294:     (() => result = ~ o)();",
          "295:     print(result);",
          "300:     var o1 = _ => o1; o1.valueOf = function() { return 1n; };",
          "301:     (() => result = o1++)();",
          "302:     print(result);",
          "307:     var o2 = _ => o2; o2.valueOf = function() { return 1n; };",
          "308:     (() => result = o2--)();",
          "309:     print(result);",
          "314:     var o3 = _ => o3; o3.valueOf = function() { return 1n; };",
          "315:     (() => result = ++o3)();",
          "316:     print(result);",
          "321:     var o4 = _ => o4; o4.valueOf = function() { return 1n; };",
          "322:     (() => result = --o4)();",
          "323:     print(result);",
          "327: })();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4ee86321f715c2967327fa04fde99ce78e9d98f",
      "candidate_info": {
        "commit_hash": "a4ee86321f715c2967327fa04fde99ce78e9d98f",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/a4ee86321f715c2967327fa04fde99ce78e9d98f",
        "files": [
          "include/hermes/VM/HermesValue.h",
          "lib/VM/JSLib/TypedArray.cpp",
          "test/hermes/regress-typed-array-at-nan.js"
        ],
        "message": "Fix type confusion in typedArrayPrototypeAt\n\nSummary:\nOriginal Author: fbmal7\nOriginal Git:\n\nCheck for NaN when extracting a value out of a TypedArray.\nFixes CVE-2023-25933\n\nOriginal Reviewed By: jpporto\n\nOriginal Revision: D43366813\n\nReviewed By: tmikov\n\nDifferential Revision: D44771021\n\nfbshipit-source-id: 08b517ff34e54069abc357996b916273d6945c51",
        "before_after_code_files": [
          "include/hermes/VM/HermesValue.h||include/hermes/VM/HermesValue.h",
          "lib/VM/JSLib/TypedArray.cpp||lib/VM/JSLib/TypedArray.cpp",
          "test/hermes/regress-typed-array-at-nan.js||test/hermes/regress-typed-array-at-nan.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "include/hermes/VM/HermesValue.h||include/hermes/VM/HermesValue.h",
            "lib/VM/JSLib/TypedArray.cpp||lib/VM/JSLib/TypedArray.cpp",
            "test/hermes/regress-typed-array-at-nan.js||test/hermes/regress-typed-array-at-nan.js"
          ],
          "candidate": [
            "include/hermes/VM/HermesValue.h||include/hermes/VM/HermesValue.h",
            "lib/VM/JSLib/TypedArray.cpp||lib/VM/JSLib/TypedArray.cpp",
            "test/hermes/regress-typed-array-at-nan.js||test/hermes/regress-typed-array-at-nan.js"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/VM/HermesValue.h||include/hermes/VM/HermesValue.h": [
          "File: include/hermes/VM/HermesValue.h -> include/hermes/VM/HermesValue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:     return encodeDoubleValue((double)num);",
          "259:   }",
          "261:   static HermesValue encodeNaNValue() {",
          "262:     return HermesValue(",
          "263:         llvh::DoubleToBits(std::numeric_limits<double>::quiet_NaN()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   inline static HermesValue encodeUntrustedNumberValue(double num) {",
          "266:     return encodeUntrustedDoubleValue(num);",
          "267:   }",
          "273:   template <typename T>",
          "274:   inline static",
          "275:       typename std::enable_if<std::is_integral<T>::value, HermesValue>::type",
          "276:       encodeUntrustedNumberValue(T num) {",
          "277:     assert((double)num == num && \"value not representable as double\");",
          "278:     return encodeDoubleValue((double)num);",
          "279:   }",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/TypedArray.cpp||lib/VM/JSLib/TypedArray.cpp": [
          "File: lib/VM/JSLib/TypedArray.cpp -> lib/VM/JSLib/TypedArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "812:     if (!arr->attached(runtime)) {                                         \\",
          "813:       return runtime.raiseTypeError(\"Underlying ArrayBuffer detached\");    \\",
          "814:     }                                                                      \\",
          "816:   }",
          "817:   switch (O->getKind()) {",
          "818: #include \"hermes/VM/TypedArrays.def\"",
          "",
          "[Removed Lines]",
          "815:     return HermesValue::encodeNumberValue(arr->at(runtime, k));            \\",
          "",
          "[Added Lines]",
          "815:     return HermesValue::encodeUntrustedNumberValue(arr->at(runtime, k));   \\",
          "",
          "---------------"
        ],
        "test/hermes/regress-typed-array-at-nan.js||test/hermes/regress-typed-array-at-nan.js": [
          "File: test/hermes/regress-typed-array-at-nan.js -> test/hermes/regress-typed-array-at-nan.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: print(\"typed-array-at-nan\");",
          "14: let ab = new ArrayBuffer(8);",
          "15: let i32a = new Int32Array(ab);",
          "17: i32a[0] = 0xcafebabe;",
          "18: i32a[1] = 0xffff0000;",
          "20: let f32a = new Float64Array(ab);",
          "21: var shouldBeNan = f32a.at(0)",
          "22: print(shouldBeNan);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc614e21c89d42dbf7c96722b5c2416ee0b5decb",
      "candidate_info": {
        "commit_hash": "cc614e21c89d42dbf7c96722b5c2416ee0b5decb",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/cc614e21c89d42dbf7c96722b5c2416ee0b5decb",
        "files": [
          "lib/Optimizer/Scalar/TypeInference.cpp",
          "test/Optimizer/regress-bigint-type-inference.js",
          "test/Optimizer/type_infer.js",
          "test/shermes/regress-bigint-type-inference.js"
        ],
        "message": "Relax the rules for inferring bigint\n\nSummary:\nRelax the rules in TypeInference so unary/binary operations return\nBigInt in more cases.\n\nPort of D43848883.\n\nReviewed By: tmikov\n\nDifferential Revision: D44804020\n\nfbshipit-source-id: 05dfad1fee68568c1c83f5ce76a384d147aae86c",
        "before_after_code_files": [
          "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
          "test/Optimizer/regress-bigint-type-inference.js||test/Optimizer/regress-bigint-type-inference.js",
          "test/Optimizer/type_infer.js||test/Optimizer/type_infer.js",
          "test/shermes/regress-bigint-type-inference.js||test/shermes/regress-bigint-type-inference.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
            "test/Optimizer/type_infer.js||test/Optimizer/type_infer.js"
          ],
          "candidate": [
            "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp",
            "test/Optimizer/type_infer.js||test/Optimizer/type_infer.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/Optimizer/Scalar/TypeInference.cpp||lib/Optimizer/Scalar/TypeInference.cpp": [
          "File: lib/Optimizer/Scalar/TypeInference.cpp -> lib/Optimizer/Scalar/TypeInference.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: namespace {",
          "36: static Type inferUnaryArith(UnaryOperatorInst *UOI, Type numberResultType) {",
          "37:   Value *op = UOI->getSingleOperand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: static bool isBigIntOrObject(Type type) {",
          "39:   return type.canBeBigInt() || type.canBeObject();",
          "40: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     return Type::createBigInt();",
          "45:   }",
          "51:   return Type::unionTy(numberResultType, mayBeBigInt);",
          "52: }",
          "",
          "[Removed Lines]",
          "47:   Type mayBeBigInt =",
          "48:       op->getType().canBeBigInt() ? Type::createBigInt() : Type::createNoType();",
          "",
          "[Added Lines]",
          "53:   Type mayBeBigInt = isBigIntOrObject(op->getType()) ? Type::createBigInt()",
          "54:                                                      : Type::createNoType();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:     return Type::createBigInt();",
          "162:   }",
          "165:       ? Type::createBigInt()",
          "166:       : Type::createNoType();",
          "170:   return Type::unionTy(numberType, mayBeBigInt);",
          "171: }",
          "",
          "[Removed Lines]",
          "164:   Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()",
          "",
          "[Added Lines]",
          "171:   Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:           ? Type::createBigInt()",
          "253:           : Type::createNoType();",
          "",
          "[Removed Lines]",
          "251:       Type mayBeBigInt = (LeftTy.canBeBigInt() && RightTy.canBeBigInt())",
          "",
          "[Added Lines]",
          "258:       Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
          "",
          "---------------"
        ],
        "test/Optimizer/regress-bigint-type-inference.js||test/Optimizer/regress-bigint-type-inference.js": [
          "File: test/Optimizer/regress-bigint-type-inference.js -> test/Optimizer/regress-bigint-type-inference.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: (function() {",
          "14:   function foo() {",
          "15:     function o() {}",
          "16:     o.valueOf = () => 10n;",
          "17:     return -o;",
          "18:   }",
          "20:   var v = foo();",
          "22:   print(typeof v, v);",
          "23: })();",
          "",
          "---------------"
        ],
        "test/Optimizer/type_infer.js||test/Optimizer/type_infer.js": [
          "File: test/Optimizer/type_infer.js -> test/Optimizer/type_infer.js"
        ],
        "test/shermes/regress-bigint-type-inference.js||test/shermes/regress-bigint-type-inference.js": [
          "File: test/shermes/regress-bigint-type-inference.js -> test/shermes/regress-bigint-type-inference.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: function test() {",
          "11:     var o = { valueOf() { return 1n; } }",
          "12:     var bigint = 1n;",
          "13:     var result;",
          "15:     (() => result = o + bigint)();",
          "16:     print(result);",
          "19:     (() => result = o - bigint)();",
          "20:     print(result);",
          "23:     (() => result = o * bigint)();",
          "24:     print(result);",
          "27:     (() => result = o / bigint)();",
          "28:     print(result);",
          "31:     (() => result = o % bigint)();",
          "32:     print(result);",
          "35:     (() => result = o << bigint)();",
          "36:     print(result);",
          "39:     (() => result = o >> bigint)();",
          "40:     print(result);",
          "43:     (() => result = o | bigint)();",
          "44:     print(result);",
          "47:     (() => result = o ^ bigint)();",
          "48:     print(result);",
          "51:     (() => result = o & bigint)();",
          "52:     print(result);",
          "55:     (() => result = - bigint)();",
          "56:     print(result);",
          "59:     (() => result = ~ bigint)();",
          "60:     print(result);",
          "63:     (() => result = o++)();",
          "64:     print(result);",
          "67:     (() => result = o--)();",
          "68:     print(result);",
          "71:     (() => result = ++o)();",
          "72:     print(result);",
          "75:     (() => result = --o)();",
          "76:     print(result);",
          "79:     var o = function() {};",
          "80:     o.valueOf = function() { return 1n; };",
          "82:     (() => result = o + bigint)();",
          "83:     print(result);",
          "86: }",
          "88: test();",
          "90: (function() {",
          "91:   function foo() {",
          "92:     function o() {}",
          "93:     o.valueOf = () => 10n;",
          "94:     return -o;",
          "95:   }",
          "97:   var v = foo();",
          "98:   print(typeof v, v);",
          "100: })();",
          "",
          "---------------"
        ]
      }
    }
  ]
}