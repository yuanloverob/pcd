{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44995aab499b09a550de26fd2927d481d4695e44",
      "candidate_info": {
        "commit_hash": "44995aab499b09a550de26fd2927d481d4695e44",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/44995aab499b09a550de26fd2927d481d4695e44",
        "files": [
          "PC/layout/main.py"
        ],
        "message": "gh-118876: Ensure PC/layout sets ns.temp before using it (GH-118880)\n\nFixes an AttributeError that occurs when checking if ns.temp is an absolute path during building from source on Windows.\n(cherry picked from commit d8a82cca12e12a6b22bfe6691e9b222f6d276f0a)\n\nCo-authored-by: I-Shen Leong <i-shenl@activestate.com>",
        "before_after_code_files": [
          "PC/layout/main.py||PC/layout/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "PC/layout/main.py||PC/layout/main.py": [
          "File: PC/layout/main.py -> PC/layout/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:     ns.source = ns.source or (Path(__file__).resolve().parent.parent.parent)",
          "600:     ns.build = ns.build or Path(sys.executable).parent",
          "601:     ns.doc_build = ns.doc_build or (ns.source / \"Doc\" / \"build\")",
          "602:     if not ns.source.is_absolute():",
          "603:         ns.source = (Path.cwd() / ns.source).resolve()",
          "604:     if not ns.build.is_absolute():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:     if ns.copy and not ns.copy.is_absolute():",
          "603:         ns.copy = (Path.cwd() / ns.copy).resolve()",
          "604:     if not ns.temp:",
          "605:         # Put temp on a Dev Drive for speed if we're copying to one.",
          "606:         # If not, the regular temp dir will have to do.",
          "607:         if ns.copy and getattr(os.path, \"isdevdrive\", lambda d: False)(ns.copy):",
          "608:             ns.temp = ns.copy.with_name(ns.copy.name + \"_temp\")",
          "609:         else:",
          "610:             ns.temp = Path(tempfile.mkdtemp())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:         else:",
          "618:             ns.arch = \"amd64\"",
          "622:     if ns.zip and not ns.zip.is_absolute():",
          "623:         ns.zip = (Path.cwd() / ns.zip).resolve()",
          "624:     if ns.catalog and not ns.catalog.is_absolute():",
          "625:         ns.catalog = (Path.cwd() / ns.catalog).resolve()",
          "635:     configure_logger(ns)",
          "637:     log_info(",
          "",
          "[Removed Lines]",
          "620:     if ns.copy and not ns.copy.is_absolute():",
          "621:         ns.copy = (Path.cwd() / ns.copy).resolve()",
          "627:     if not ns.temp:",
          "628:         # Put temp on a Dev Drive for speed if we're copying to one.",
          "629:         # If not, the regular temp dir will have to do.",
          "630:         if ns.copy and getattr(os.path, \"isdevdrive\", lambda d: False)(ns.copy):",
          "631:             ns.temp = ns.copy.with_name(ns.copy.name + \"_temp\")",
          "632:         else:",
          "633:             ns.temp = Path(tempfile.mkdtemp())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "720a44d414b68943c766716145d7c6d15ea213de",
      "candidate_info": {
        "commit_hash": "720a44d414b68943c766716145d7c6d15ea213de",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/720a44d414b68943c766716145d7c6d15ea213de",
        "files": [
          "Lib/logging/config.py",
          "Lib/test/test_logging.py",
          "Misc/NEWS.d/next/Library/2024-06-04-12-23-01.gh-issue-119819.WKKrYh.rst"
        ],
        "message": "[3.13] gh-119819: Fix regression to allow logging configuration with multipr\u2026 (GH-120030) (GH-120035)\n\n(cherry picked from commit 99d945c0c006e3246ac00338e37c443c6e08fc5c)",
        "before_after_code_files": [
          "Lib/logging/config.py||Lib/logging/config.py",
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/logging/config.py||Lib/logging/config.py": [
          "File: Lib/logging/config.py -> Lib/logging/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:                     # raise ValueError('No handlers specified for a QueueHandler')",
          "782:                 if 'queue' in config:",
          "783:                     from multiprocessing.queues import Queue as MPQueue",
          "784:                     qspec = config['queue']",
          "786:                         if isinstance(qspec, str):",
          "787:                             q = self.resolve(qspec)",
          "788:                             if not callable(q):",
          "",
          "[Removed Lines]",
          "785:                     if not isinstance(qspec, (queue.Queue, MPQueue)):",
          "",
          "[Added Lines]",
          "784:                     from multiprocessing import Manager as MM",
          "785:                     proxy_queue = MM().Queue()",
          "787:                     if not isinstance(qspec, (queue.Queue, MPQueue, type(proxy_queue))):",
          "",
          "---------------"
        ],
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3926:             msg = str(ctx.exception)",
          "3927:             self.assertEqual(msg, \"Unable to configure handler 'ah'\")",
          "3929:     def test_90195(self):",
          "3930:         # See gh-90195",
          "3931:         config = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3929:     @unittest.skipIf(support.is_wasi, \"WASI does not have multiprocessing.\")",
          "3930:     def test_multiprocessing_queues(self):",
          "3931:         # See gh-119819",
          "3932:         cd = copy.deepcopy(self.config_queue_handler)",
          "3933:         from multiprocessing import Queue as MQ, Manager as MM",
          "3934:         q1 = MQ()  # this can't be pickled",
          "3935:         q2 = MM().Queue()  # a proxy queue for use when pickling is needed",
          "3936:         for qspec in (q1, q2):",
          "3937:             fn = make_temp_file('.log', 'test_logging-cmpqh-')",
          "3938:             cd['handlers']['h1']['filename'] = fn",
          "3939:             cd['handlers']['ah']['queue'] = qspec",
          "3940:             qh = None",
          "3941:             try:",
          "3942:                 self.apply_config(cd)",
          "3943:                 qh = logging.getHandlerByName('ah')",
          "3944:                 self.assertEqual(sorted(logging.getHandlerNames()), ['ah', 'h1'])",
          "3945:                 self.assertIsNotNone(qh.listener)",
          "3946:                 self.assertIs(qh.queue, qspec)",
          "3947:                 self.assertIs(qh.listener.queue, qspec)",
          "3948:             finally:",
          "3949:                 h = logging.getHandlerByName('h1')",
          "3950:                 if h:",
          "3951:                     self.addCleanup(closeFileHandler, h, fn)",
          "3952:                 else:",
          "3953:                     self.addCleanup(os.remove, fn)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae04b6f63640606a3212c9da21b87ebc374136e1",
      "candidate_info": {
        "commit_hash": "ae04b6f63640606a3212c9da21b87ebc374136e1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ae04b6f63640606a3212c9da21b87ebc374136e1",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-06-19-01-58-54.gh-issue-120437.nCkIoI.rst",
          "Python/optimizer_bytecodes.c",
          "Python/optimizer_cases.c.h"
        ],
        "message": "[3.13] gh-120437: Fix `_CHECK_STACK_SPACE` optimization problems introduced in gh-118322 (GH-120712) (#120747)\n\n[3.13] gh-120437: Fix `_CHECK_STACK_SPACE` optimization problems introduced in gh-118322 (GH-120712)\n\nSigned-off-by: Manjusaka <me@manjusaka.me>\nCo-authored-by: Ken Jin <kenjin4096@gmail.com>",
        "before_after_code_files": [
          "Python/optimizer_bytecodes.c||Python/optimizer_bytecodes.c",
          "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/optimizer_bytecodes.c||Python/optimizer_bytecodes.c": [
          "File: Python/optimizer_bytecodes.c -> Python/optimizer_bytecodes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:         (void)callable;",
          "635:         (void)self_or_null;",
          "636:         (void)args;",
          "638:         goto done;",
          "639:     }",
          "",
          "[Removed Lines]",
          "637:         first_valid_check_stack = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h": [
          "File: Python/optimizer_cases.c.h -> Python/optimizer_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:             (void)callable;",
          "1566:             (void)self_or_null;",
          "1567:             (void)args;",
          "1569:             goto done;",
          "1570:             stack_pointer[-2 - oparg] = (_Py_UopsSymbol *)new_frame;",
          "1571:             stack_pointer += -1 - oparg;",
          "",
          "[Removed Lines]",
          "1568:             first_valid_check_stack = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cffead81fae34aa678ef2f89dff4a0175a619c85",
      "candidate_info": {
        "commit_hash": "cffead81fae34aa678ef2f89dff4a0175a619c85",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cffead81fae34aa678ef2f89dff4a0175a619c85",
        "files": [
          "Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_tkinter/widget_tests.py",
          "Lib/test/test_ttk/test_widgets.py"
        ],
        "message": "[3.13] gh-120873: Add tests for new widget options in Tk 8.7 (GH-120877) (GH-120879)\n\n(cherry picked from commit a046c848c1df0cf98092e9696594d3fb836e3530)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_tkinter/widget_tests.py||Lib/test/test_tkinter/widget_tests.py",
          "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py": [
          "File: Lib/test/test_tkinter/test_widgets.py -> Lib/test/test_tkinter/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: @add_standard_options(StandardOptionsTests)",
          "62: class ToplevelTest(AbstractToplevelTest, unittest.TestCase):",
          "63:     OPTIONS = (",
          "65:         'class', 'colormap', 'container', 'cursor', 'height',",
          "66:         'highlightbackground', 'highlightcolor', 'highlightthickness',",
          "67:         'menu', 'padx', 'pady', 'relief', 'screen',",
          "69:     )",
          "71:     def create(self, **kwargs):",
          "",
          "[Removed Lines]",
          "64:         'background', 'borderwidth',",
          "68:         'takefocus', 'use', 'visual', 'width',",
          "",
          "[Added Lines]",
          "64:         'background', 'backgroundimage', 'borderwidth',",
          "68:         'takefocus', 'tile', 'use', 'visual', 'width',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: @add_standard_options(StandardOptionsTests)",
          "105: class FrameTest(AbstractToplevelTest, unittest.TestCase):",
          "106:     OPTIONS = (",
          "108:         'class', 'colormap', 'container', 'cursor', 'height',",
          "109:         'highlightbackground', 'highlightcolor', 'highlightthickness',",
          "111:     )",
          "113:     def create(self, **kwargs):",
          "",
          "[Removed Lines]",
          "107:         'background', 'borderwidth',",
          "110:         'padx', 'pady', 'relief', 'takefocus', 'visual', 'width',",
          "",
          "[Added Lines]",
          "107:         'background', 'backgroundimage', 'borderwidth',",
          "110:         'padx', 'pady', 'relief', 'takefocus', 'tile', 'visual', 'width',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338:         'highlightbackground', 'highlightcolor', 'highlightthickness',",
          "339:         'insertbackground', 'insertborderwidth',",
          "340:         'insertofftime', 'insertontime', 'insertwidth',",
          "342:         'selectbackground', 'selectborderwidth', 'selectforeground',",
          "343:         'show', 'state', 'takefocus', 'textvariable',",
          "344:         'validate', 'validatecommand', 'width', 'xscrollcommand',",
          "",
          "[Removed Lines]",
          "341:         'invalidcommand', 'justify', 'readonlybackground', 'relief',",
          "",
          "[Added Lines]",
          "341:         'invalidcommand', 'justify', 'placeholder', 'placeholderforeground',",
          "342:         'readonlybackground', 'relief',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "432:         'increment',",
          "433:         'insertbackground', 'insertborderwidth',",
          "434:         'insertofftime', 'insertontime', 'insertwidth',",
          "437:         'selectbackground', 'selectborderwidth', 'selectforeground',",
          "438:         'state', 'takefocus', 'textvariable', 'to',",
          "439:         'validate', 'validatecommand', 'values',",
          "",
          "[Removed Lines]",
          "435:         'invalidcommand', 'justify', 'relief', 'readonlybackground',",
          "436:         'repeatdelay', 'repeatinterval',",
          "",
          "[Added Lines]",
          "436:         'invalidcommand', 'justify', 'placeholder', 'placeholderforeground',",
          "437:         'relief', 'readonlybackground', 'repeatdelay', 'repeatinterval',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1176:     def create(self, **kwargs):",
          "1177:         return tkinter.Scrollbar(self.root, **kwargs)",
          "1183:     def test_configure_elementborderwidth(self):",
          "1184:         widget = self.create()",
          "1185:         self.checkPixelsParam(widget, 'elementborderwidth', 4.3, 5.6, '1m')",
          "",
          "[Removed Lines]",
          "1179:     def test_configure_activerelief(self):",
          "1180:         widget = self.create()",
          "1181:         self.checkReliefParam(widget, 'activerelief')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1386: class MenuTest(AbstractWidgetTest, unittest.TestCase):",
          "1387:     OPTIONS = (",
          "1388:         'activebackground', 'activeborderwidth', 'activeforeground',",
          "1389:         'background', 'borderwidth', 'cursor',",
          "1390:         'disabledforeground', 'font', 'foreground',",
          "1391:         'postcommand', 'relief', 'selectcolor', 'takefocus',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1386:         'activerelief',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1401:         i = widget.index('none')",
          "1402:         self.assertIsNone(i)",
          "1404:     def test_configure_postcommand(self):",
          "1405:         widget = self.create()",
          "1406:         self.checkCommandParam(widget, 'postcommand')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1402:     test_configure_activerelief = requires_tk(8, 7)(StandardOptionsTests.test_configure_activerelief)",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/widget_tests.py||Lib/test/test_tkinter/widget_tests.py": [
          "File: Lib/test/test_tkinter/widget_tests.py -> Lib/test/test_tkinter/widget_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import re",
          "4: import tkinter",
          "6:                                   pixels_conv, tcl_obj_eq)",
          "7: import test.support",
          "",
          "[Removed Lines]",
          "5: from test.test_tkinter.support import (AbstractTkTest, tk_version,",
          "",
          "[Added Lines]",
          "5: from test.test_tkinter.support import (AbstractTkTest, requires_tk, tk_version,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     _clip_highlightthickness = True",
          "18:     _clip_pad = False",
          "19:     _clip_borderwidth = False",
          "21:     @property",
          "22:     def scaling(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:     _allow_empty_justify = False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:             aliases = {",
          "201:                 'bd': 'borderwidth',",
          "202:                 'bg': 'background',",
          "203:                 'fg': 'foreground',",
          "204:                 'invcmd': 'invalidcommand',",
          "205:                 'vcmd': 'validatecommand',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:                 'bgimg': 'backgroundimage',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:         widget = self.create()",
          "243:         self.checkColorParam(widget, 'activeforeground')",
          "245:     def test_configure_anchor(self):",
          "246:         widget = self.create()",
          "247:         self.checkEnumParam(widget, 'anchor',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     def test_configure_activerelief(self):",
          "248:         widget = self.create()",
          "249:         self.checkReliefParam(widget, 'activerelief')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:         if 'bg' in self.OPTIONS:",
          "254:             self.checkColorParam(widget, 'bg')",
          "256:     def test_configure_bitmap(self):",
          "257:         widget = self.create()",
          "258:         self.checkParam(widget, 'bitmap', 'questhead')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     @requires_tk(8, 7)",
          "263:     def test_configure_backgroundimage(self):",
          "264:         widget = self.create()",
          "265:         self.checkImageParam(widget, 'backgroundimage')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "299:         widget = self.create()",
          "300:         self.checkParam(widget, 'font',",
          "301:                         '-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*')",
          "305:     def test_configure_foreground(self):",
          "306:         widget = self.create()",
          "",
          "[Removed Lines]",
          "302:         self.checkInvalidParam(widget, 'font', '',",
          "303:                                errmsg='font \"\" doesn\\'t exist')",
          "",
          "[Added Lines]",
          "313:         is_ttk = widget.__class__.__module__ == 'tkinter.ttk'",
          "314:         if not is_ttk:",
          "315:             self.checkInvalidParam(widget, 'font', '',",
          "316:                                    errmsg='font \"\" doesn\\'t exist')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:     def test_configure_justify(self):",
          "357:         widget = self.create()",
          "359:                             fullname='justification')",
          "361:     def test_configure_orient(self):",
          "",
          "[Removed Lines]",
          "358:         self.checkEnumParam(widget, 'justify', 'left', 'right', 'center',",
          "",
          "[Added Lines]",
          "371:         values = ('left', 'right', 'center')",
          "372:         if self._allow_empty_justify:",
          "373:             values += ('',)",
          "374:         self.checkEnumParam(widget, 'justify', *values,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "379:         self.checkParam(widget, 'pady', -2, expected=expected,",
          "380:                         conv=self._conv_pad_pixels)",
          "382:     def test_configure_relief(self):",
          "383:         widget = self.create()",
          "384:         self.checkReliefParam(widget, 'relief')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     @requires_tk(8, 7)",
          "399:     def test_configure_placeholder(self):",
          "400:         widget = self.create()",
          "401:         self.checkParam(widget, 'placeholder', 'xxx')",
          "403:     @requires_tk(8, 7)",
          "404:     def test_configure_placeholderforeground(self):",
          "405:         widget = self.create()",
          "406:         self.checkColorParam(widget, 'placeholderforeground')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "424:         var = tkinter.StringVar(self.root)",
          "425:         self.checkVariableParam(widget, 'textvariable', var)",
          "427:     def test_configure_troughcolor(self):",
          "428:         widget = self.create()",
          "429:         self.checkColorParam(widget, 'troughcolor')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:     @requires_tk(8, 7)",
          "454:     def test_configure_tile(self):",
          "455:         widget = self.create()",
          "456:         self.checkBooleanParam(widget, 'tile')",
          "",
          "---------------"
        ],
        "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py": [
          "File: Lib/test/test_ttk/test_widgets.py -> Lib/test/test_ttk/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: class AbstractLabelTest(AbstractWidgetTest):",
          "171:     def checkImageParam(self, widget, name):",
          "172:         image = tkinter.PhotoImage(master=self.root, name='image1')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     _allow_empty_justify = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         widget = self.create()",
          "189:         self.checkEnumParam(widget, 'compound', *values, allow_empty=True)",
          "191:     def test_configure_width(self):",
          "192:         widget = self.create()",
          "193:         self.checkParams(widget, 'width', 402, -402, 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:     test_configure_justify = requires_tk(8, 7)(StandardOptionsTests.test_configure_justify)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:         'underline', 'width', 'wraplength',",
          "204:     )",
          "205:     _conv_pixels = False",
          "207:     def create(self, **kwargs):",
          "208:         return ttk.Label(self.root, **kwargs)",
          "223: @add_standard_options(StandardTtkOptionsTests)",
          "224: class ButtonTest(AbstractLabelTest, unittest.TestCase):",
          "225:     OPTIONS = (",
          "226:         'class', 'command', 'compound', 'cursor', 'default',",
          "228:         'takefocus', 'text', 'textvariable',",
          "229:         'underline', 'width',",
          "230:     )",
          "",
          "[Removed Lines]",
          "210:     def test_configure_font(self):",
          "211:         widget = self.create()",
          "212:         self.checkParam(widget, 'font',",
          "213:                         '-Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*')",
          "215:     def test_configure_justify(self):",
          "216:         widget = self.create()",
          "217:         values = ('left', 'right', 'center')",
          "218:         if tk_version >= (8, 7):",
          "219:             values += ('',)",
          "220:         self.checkEnumParam(widget, 'justify', *values,",
          "221:                             fullname='justification')",
          "227:         'image', 'padding', 'state', 'style',",
          "",
          "[Added Lines]",
          "209:     _allow_empty_justify = tk_version >= (8, 7)",
          "214:     test_configure_justify = StandardOptionsTests.test_configure_justify",
          "221:         'image', 'justify', 'padding', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "249: class CheckbuttonTest(AbstractLabelTest, unittest.TestCase):",
          "250:     OPTIONS = (",
          "251:         'class', 'command', 'compound', 'cursor',",
          "253:         'offvalue', 'onvalue',",
          "254:         'padding', 'state', 'style',",
          "255:         'takefocus', 'text', 'textvariable',",
          "",
          "[Removed Lines]",
          "252:         'image',",
          "",
          "[Added Lines]",
          "246:         'image', 'justify',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:         'background', 'class', 'cursor',",
          "339:         'exportselection', 'font', 'foreground',",
          "340:         'invalidcommand', 'justify',",
          "341:         'show', 'state', 'style', 'takefocus', 'textvariable',",
          "342:         'validate', 'validatecommand', 'width', 'xscrollcommand',",
          "343:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:         'placeholder', 'placeholderforeground',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460:     OPTIONS = (",
          "461:         'background', 'class', 'cursor', 'exportselection',",
          "462:         'font', 'foreground', 'height', 'invalidcommand',",
          "464:         'takefocus', 'textvariable',",
          "465:         'validate', 'validatecommand', 'values',",
          "466:         'width', 'xscrollcommand',",
          "",
          "[Removed Lines]",
          "463:         'justify', 'postcommand', 'show', 'state', 'style',",
          "",
          "[Added Lines]",
          "458:         'justify', 'placeholder', 'placeholderforeground', 'postcommand',",
          "459:         'show', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "720: class RadiobuttonTest(AbstractLabelTest, unittest.TestCase):",
          "721:     OPTIONS = (",
          "722:         'class', 'command', 'compound', 'cursor',",
          "724:         'padding', 'state', 'style',",
          "725:         'takefocus', 'text', 'textvariable',",
          "726:         'underline', 'value', 'variable', 'width',",
          "",
          "[Removed Lines]",
          "723:         'image',",
          "",
          "[Added Lines]",
          "719:         'image', 'justify',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "774: class MenubuttonTest(AbstractLabelTest, unittest.TestCase):",
          "775:     OPTIONS = (",
          "776:         'class', 'compound', 'cursor', 'direction',",
          "778:         'takefocus', 'text', 'textvariable',",
          "779:         'underline', 'width',",
          "780:     )",
          "",
          "[Removed Lines]",
          "777:         'image', 'menu', 'padding', 'state', 'style',",
          "",
          "[Added Lines]",
          "773:         'image', 'justify', 'menu', 'padding', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "906: @add_standard_options(StandardTtkOptionsTests)",
          "907: class ProgressbarTest(AbstractWidgetTest, unittest.TestCase):",
          "908:     OPTIONS = (",
          "911:         'style', 'takefocus', 'value', 'variable',",
          "912:     )",
          "913:     _conv_pixels = False",
          "914:     default_orient = 'horizontal'",
          "916:     def create(self, **kwargs):",
          "917:         return ttk.Progressbar(self.root, **kwargs)",
          "919:     def test_configure_length(self):",
          "920:         widget = self.create()",
          "921:         self.checkPixelsParam(widget, 'length', 100.1, 56.7, '2i')",
          "",
          "[Removed Lines]",
          "909:         'class', 'cursor', 'orient', 'length',",
          "910:         'mode', 'maximum', 'phase',",
          "",
          "[Added Lines]",
          "905:         'anchor', 'class', 'cursor', 'font', 'foreground', 'justify',",
          "906:         'orient', 'length',",
          "907:         'mode', 'maximum', 'phase', 'text', 'wraplength',",
          "911:     _allow_empty_justify = True",
          "917:     @requires_tk(8, 7)",
          "918:     def test_configure_anchor(self):",
          "919:         widget = self.create()",
          "920:         self.checkEnumParam(widget, 'anchor',",
          "921:                 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'center', '')",
          "923:     test_configure_font = requires_tk(8, 7)(StandardOptionsTests.test_configure_font)",
          "924:     test_configure_foreground = requires_tk(8, 7)(StandardOptionsTests.test_configure_foreground)",
          "925:     test_configure_justify = requires_tk(8, 7)(StandardTtkOptionsTests.test_configure_justify)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "932:         # XXX",
          "933:         pass",
          "935:     def test_configure_value(self):",
          "936:         widget = self.create()",
          "937:         self.checkFloatParam(widget, 'value', 150.2, 77.7, 0, -10,",
          "938:                              conv=False)",
          "941: @unittest.skipIf(sys.platform == 'darwin',",
          "942:                  'ttk.Scrollbar is special on MacOSX')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "943:     test_configure_text = requires_tk(8, 7)(StandardOptionsTests.test_configure_text)",
          "950:     test_configure_wraplength = requires_tk(8, 7)(StandardOptionsTests.test_configure_wraplength)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1173:     OPTIONS = (",
          "1174:         'background', 'class', 'command', 'cursor', 'exportselection',",
          "1175:         'font', 'foreground', 'format', 'from',  'increment',",
          "1177:         'takefocus', 'textvariable', 'to', 'validate', 'validatecommand',",
          "1178:         'values', 'width', 'wrap', 'xscrollcommand',",
          "1179:     )",
          "",
          "[Removed Lines]",
          "1176:         'invalidcommand', 'justify', 'show', 'state', 'style',",
          "",
          "[Added Lines]",
          "1188:         'invalidcommand', 'justify',",
          "1189:         'placeholder', 'placeholderforeground',",
          "1190:         'show', 'state', 'style',",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1347: class TreeviewTest(AbstractWidgetTest, unittest.TestCase):",
          "1348:     OPTIONS = (",
          "1349:         'class', 'columns', 'cursor', 'displaycolumns',",
          "1352:     )",
          "1354:     def setUp(self):",
          "",
          "[Removed Lines]",
          "1350:         'height', 'padding', 'selectmode', 'show',",
          "1351:         'style', 'takefocus', 'xscrollcommand', 'yscrollcommand',",
          "",
          "[Added Lines]",
          "1364:         'height', 'padding', 'selectmode', 'selecttype', 'show', 'striped',",
          "1365:         'style', 'takefocus', 'titlecolumns', 'titleitems',",
          "1366:         'xscrollcommand', 'yscrollcommand',",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1393:         self.checkEnumParam(widget, 'selectmode',",
          "1394:                             'none', 'browse', 'extended')",
          "1396:     def test_configure_show(self):",
          "1397:         widget = self.create()",
          "1398:         self.checkParam(widget, 'show', 'tree headings',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1411:     @requires_tk(8, 7)",
          "1412:     def test_configure_selecttype(self):",
          "1413:         widget = self.create()",
          "1414:         self.checkEnumParam(widget, 'selecttype', 'item', 'cell')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1402:         self.checkParam(widget, 'show', 'tree', expected=('tree',))",
          "1403:         self.checkParam(widget, 'show', 'headings', expected=('headings',))",
          "1405:     def test_bbox(self):",
          "1406:         self.tv.pack()",
          "1407:         self.assertEqual(self.tv.bbox(''), '')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1425:     @requires_tk(8, 7)",
          "1426:     def test_configure_striped(self):",
          "1427:         widget = self.create()",
          "1428:         self.checkBooleanParam(widget, 'striped')",
          "1430:     @requires_tk(8, 7)",
          "1431:     def test_configure_titlecolumns(self):",
          "1432:         widget = self.create()",
          "1433:         self.checkIntegerParam(widget, 'titlecolumns', 0, 1, 5)",
          "1434:         self.checkInvalidParam(widget, 'titlecolumns', -2)",
          "1436:     @requires_tk(8, 7)",
          "1437:     def test_configure_titleitems(self):",
          "1438:         widget = self.create()",
          "1439:         self.checkIntegerParam(widget, 'titleitems', 0, 1, 5)",
          "1440:         self.checkInvalidParam(widget, 'titleitems', -2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b714d545f5ae7712c9246b6083c9573ad24257d",
      "candidate_info": {
        "commit_hash": "6b714d545f5ae7712c9246b6083c9573ad24257d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6b714d545f5ae7712c9246b6083c9573ad24257d",
        "files": [
          "Misc/NEWS.d/next/Build/2024-06-19-21-05-15.gh-issue-120602.UyDARz.rst",
          "Tools/jit/_llvm.py"
        ],
        "message": "[3.13] GH-120602: Support LLVM_VERSION_SUFFIX for JIT builds (GH-120768)\n\n(cherry picked from commit 285f42c850da0d8ca31850088eb7b9247cbbbc71)\n\nCo-authored-by: Xarblu <xarblu@protonmail.com>",
        "before_after_code_files": [
          "Tools/jit/_llvm.py||Tools/jit/_llvm.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tools/jit/_llvm.py||Tools/jit/_llvm.py": [
          "File: Tools/jit/_llvm.py -> Tools/jit/_llvm.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import typing",
          "11: _LLVM_VERSION = 18",
          "14: _P = typing.ParamSpec(\"_P\")",
          "15: _R = typing.TypeVar(\"_R\")",
          "",
          "[Removed Lines]",
          "12: _LLVM_VERSION_PATTERN = re.compile(rf\"version\\s+{_LLVM_VERSION}\\.\\d+\\.\\d+\\s+\")",
          "",
          "[Added Lines]",
          "12: _LLVM_VERSION_PATTERN = re.compile(rf\"version\\s+{_LLVM_VERSION}\\.\\d+\\.\\d+\\S*\\s+\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}