{
  "cve_id": "CVE-2023-1428",
  "cve_desc": "There exists an vulnerability causing an abort() to be called in gRPC.\u00a0\nThe following headers cause gRPC's C++ implementation to abort() when called via http2:\n\nte: x (x != trailers)\n\n:scheme: x (x != http, https)\n\ngrpclb_client_stats: x (x == anything)\n\nOn top of sending one of those headers, a later header must be sent that gets the total header size past 8KB. We recommend upgrading past git commit\u00a02485fa94bd8a723e5c977d55a3ce10b301b437f8 or v1.53 and above.\n\n",
  "repo": "grpc/grpc",
  "patch_hash": "2485fa94bd8a723e5c977d55a3ce10b301b437f8",
  "patch_info": {
    "commit_hash": "2485fa94bd8a723e5c977d55a3ce10b301b437f8",
    "repo": "grpc/grpc",
    "commit_url": "https://github.com/grpc/grpc/commit/2485fa94bd8a723e5c977d55a3ce10b301b437f8",
    "files": [
      "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
      "src/core/lib/transport/metadata_batch.cc",
      "src/core/lib/transport/metadata_batch.h",
      "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4859070937169920"
    ],
    "message": "[chttp2] Fix fuzzer found bug (#32507)\n\n<!--\n\nIf you know who should review your pull request, please assign it to\nthat\nperson, otherwise the pull request would get assigned randomly.\n\nIf your pull request is for a specific language, please add the\nappropriate\nlang label.\n\n-->",
    "before_after_code_files": [
      "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
      "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc",
      "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h"
    ]
  },
  "patch_diff": {
    "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
      "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "804:     template <typename Key, typename Value>",
      "805:     void Encode(Key, const Value& value) {",
      "807:     }",
      "809:    private:",
      "",
      "[Removed Lines]",
      "806:       AddToSummary(Key::key(), Key::Encode(value).size());",
      "",
      "[Added Lines]",
      "806:       AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
      "",
      "---------------"
    ],
    "src/core/lib/transport/metadata_batch.cc||src/core/lib/transport/metadata_batch.cc": [
      "File: src/core/lib/transport/metadata_batch.cc -> src/core/lib/transport/metadata_batch.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:   }",
      "169: }",
      "171: const char* HttpSchemeMetadata::DisplayValue(ValueType content_type) {",
      "172:   switch (content_type) {",
      "173:     case kHttp:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x) {",
      "172:   switch (x) {",
      "173:     case HttpSchemeMetadata::kHttp:",
      "174:       return 4;",
      "175:     case HttpSchemeMetadata::kHttps:",
      "176:       return 5;",
      "177:     default:",
      "178:       return 0;",
      "179:   }",
      "180: }",
      "",
      "---------------"
    ],
    "src/core/lib/transport/metadata_batch.h||src/core/lib/transport/metadata_batch.h": [
      "File: src/core/lib/transport/metadata_batch.h -> src/core/lib/transport/metadata_batch.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: namespace grpc_core {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: template <typename Key>",
      "58: size_t EncodedSizeOfKey(Key, const typename Key::ValueType& value) {",
      "59:   return Key::Encode(value).size();",
      "60: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:   static const char* DisplayMemento(MementoType te) { return DisplayValue(te); }",
      "91: };",
      "94: struct ContentTypeMetadata {",
      "95:   static constexpr bool kRepeatable = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: inline size_t EncodedSizeOfKey(TeMetadata, TeMetadata::ValueType x) {",
      "104:   return x == TeMetadata::kTrailers ? 8 : 0;",
      "105: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140:   }",
      "141: };",
      "144: struct HttpMethodMetadata {",
      "145:   static constexpr bool kRepeatable = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157: size_t EncodedSizeOfKey(HttpSchemeMetadata, HttpSchemeMetadata::ValueType x);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "362:   }",
      "363: };",
      "366: struct LbTokenMetadata : public SimpleSliceBasedMetadata {",
      "367:   static constexpr bool kRepeatable = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "381: inline size_t EncodedSizeOfKey(GrpcLbClientStatsMetadata,",
      "382:                                GrpcLbClientStatsMetadata::ValueType) {",
      "383:   return 0;",
      "384: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aeb96e91663f61e512180b4bf709d273a4b3a670",
      "candidate_info": {
        "commit_hash": "aeb96e91663f61e512180b4bf709d273a4b3a670",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/aeb96e91663f61e512180b4bf709d273a4b3a670",
        "files": [
          "BUILD",
          "CMakeLists.txt",
          "Makefile",
          "Package.swift",
          "build_autogenerated.yaml",
          "config.m4",
          "config.w32",
          "gRPC-C++.podspec",
          "gRPC-Core.podspec",
          "grpc.gemspec",
          "grpc.gyp",
          "package.xml",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h",
          "src/core/lib/surface/validate_metadata.cc",
          "src/core/lib/surface/validate_metadata.h",
          "src/python/grpcio/grpc_core_dependencies.py",
          "test/core/transport/chttp2/BUILD",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4865932715229184",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-5365031688536064",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-06c4093ab80184d59150773f5c19e8e3851aa584",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-073bba832e73c8f524714e179236756e4854e08f",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-0865baf4eceb5220cdf0528cff5520f97ed7fbf8",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-1082c8e03fb43912053db34d510246ffe6aab388",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-1bda156d5b247fec3b19381d40519e65bdde40de",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-24437bf259f238cb404aad47b93345a4d5161a37",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-4271e5059b58be25d0845678c8b1c3f12c0040c3",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-592efde536e0c000a56776eeb180ae3b6f8ebe70",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-659b65287a1437d74ef1f334b0148102a461a430",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-6c53549fc13aab69e2ddf334275ebeb4bdab4234",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-90dcc8d762ca0b68b8ff7900e0b4856ac19de75f",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-9d380436e8412e3d4f8f2bc9b6a008c57b777afe",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-afc9191b4dce8c40516945fb5dc2c98b628a2430",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-c5c7476698873398f29a0ba0b7cdc7b85fa63173",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-c88faaa07f7f4fbaf734b9be038ec7daa0bf92fb",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-d47bb8c8c9640faf351068480844e1be20cfdbb7",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-d72bb43a581e489916a85216cb6c4fbb3ad844e2",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-ff4557ffdb266e8c086c05f3da8f7a1bddd6f906",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/clusterfuzz-testcase-minimized-hpack_parser_input_size_fuzzer-4883111703609344",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/crash-2af1d6b2934f168a7dc4768b93e447802f9ecedf",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/crash-81591b690179358fd403e4730b601c5c0b427491",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-015113bc4dd37f528f1cb0c820660d4011960dab",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-03de8592bf6baa2a62e5542fa96ac2d6ee69b6b9",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-058e8ece1a01b9087308f12521c1109f9d30e573",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-07558bf39768c209ce786612c724f889d1e8891b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0ab36d0cfe24b0ddbd4c583c74882df16c3b9627",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0b09f05105d317412b7c827d3686f5fa32bebf49",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0ca5bea44d2bc9166b4734e0716b8b6da5ec2029",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0efc2b21ea49b7721ce2b20e13effe7c96c64498",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-123f67a0e63101e7898f2a8d23d2f588ebde4a98",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1298ff90dade093f5481f6bc80777326938cf4b4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-135681321b796d8f765261672da373db518d538b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-152f69bc17f458569744172a8c3d6971ac66dff8",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1bd14ffddb4215b0c81272d73d78e4d444a851ee",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1ec7975001ad03530af0b84e6527752b863ad594",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1f3013b5c089a3affcae856ec1b0a0f70d217740",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1f9c5fcdcf7348d5c165eb9a8b9755da60e7da5c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-20bff712090e0c110511522a6aec43f50ced4da9",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-20c88a592c8cb36ab342c77a75c23964dd9ac09e",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-214ef1f403047786f5aae50aae0bef64243ea423",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-245a90a2668df8a643d9b8922dbc34825f3e5569",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-31bc6369c08034fde2683229bc30fd15bb767158",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-3b2fb306d57d5e9f7bcd0bcb1cbf34fcec88a30b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-41fb06b30a8237efa627ed4eb0afaa3221ac4abe",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-44af09a92eeb9143f1055d66a3a98d7e89b65e07",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-4b54c31cc4232038a9561c0c52dcf4f99317bab5",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-4cd819b2b070f7cd5c287d4f1a6d04ea466e15ae",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-51d2744484cadc664760e331a4c91e7a4c43feb1",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-57702140b51ec7c39b73e68519c5dc235e79098c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-588c49bc604a6231b9638ad628626a0665f3d3ba",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-5a12ad90db4e144bd286002fe5f9f862afb7a429",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-5f2ae06e8068c973de09d9bbff0b83deddbf654c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-60118614a0ee78fe56eb10631d11fd04a6e54348",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6148d1287ad4f3612a69e27f00c23ca5bd76a2e4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6b3d64423a6fedf8fd0da585e3ef259793575e0a",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6fca8b6d71567434d128919f5e5b087a95e8dc36",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-79f273f547f27661fb507887e2de99fb846a38d3",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-7bccb0c6f828e36f42e92dc95e7bc1194c2e384f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-829cb6b69fd6874ba62b1d9e81c1db4f2810578c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8b9927241b1f8cd86bf7aa947c22a38ac1a02822",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8c0937c405509b25e563d9eedcf6a8cf1ae6e7e7",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8e319a9f1aaa99eb12086568efbcb8fe9d4f45c4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8f05e81342c302bcb97a31c93d42c690deda4f2d",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8f419c102e129ebbfc7093b88f9da53e41672100",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9baf490049fb6d5374dcf2a21d89589c07b50c85",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9ea07de715a1deafee30c3ae13b7882d13adc133",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9fbf404499c65b338e66fbdbb7f392eee25b58d8",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-a49f0308e5ca8aa2eeb640a9d4b3a9b38200200c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-b00a8d8fe0c4f5f624fee74404eadf3fcc8506b5",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-b592ca99a4503d5e148bc434d22e2bb8c54fa67f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-baa7a814fc03b9d814fb62d6faf3b6f878ef8ed2",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-c10a17f4b8404e97ea04d5f80ec6f0c854e6c722",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-cc8fd4207cf949f1508099c4f292e641fc016fcb",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-d2e48419f9f6ebebd2674ba6df9e4a1ca2d71f70",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-da53cd6077598148d2d8bb6f01701b295d9fdf5f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-dcf1675a3a20b1774aa21ea5cca5af8a879c7e6d",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e1d9c9de7bab42422728004d98ce7b75950eba48",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e7558bd9ec494634446a1aeb7d5381d0212f25a7",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e9325a522c7c7450599f6c1a4a8fb41c31001788",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-ec72b4c4ca87666be770098d1bec2ac2c7934610",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-f737513dded2e82540ad6a199fb45d929957380f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-f9c899c69ad72bdad745ae100359d4ce5e22f833",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-fceca15b45635f1b0e63b75f6da116b1ef8c2d14",
          "test/core/transport/chttp2/hpack_parser_table_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-211c8a4a9c4831aa2d5599b7847ab45ced2216a4",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-aa01fe395fe67c36bb66f282341865fbe7eae2d7",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-da39a3ee5e6b4b0d3255bfef95601890afd80709",
          "tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal"
        ],
        "message": "[Core] Backport:1.55 Improve HPACK (#33604)\n\nCherry-pick https://github.com/grpc/grpc/pull/33597",
        "before_after_code_files": [
          "Package.swift||Package.swift",
          "config.m4||config.m4",
          "config.w32||config.w32",
          "gRPC-C++.podspec||gRPC-C++.podspec",
          "gRPC-Core.podspec||gRPC-Core.podspec",
          "grpc.gemspec||grpc.gemspec",
          "grpc.gyp||grpc.gyp",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc||src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.h||src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc||src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.h||src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h",
          "src/core/lib/surface/validate_metadata.cc||src/core/lib/surface/validate_metadata.cc",
          "src/core/lib/surface/validate_metadata.h||src/core/lib/surface/validate_metadata.h",
          "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_table_test.cc||test/core/transport/chttp2/hpack_parser_table_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc",
          "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "Package.swift||Package.swift": [
          "File: Package.swift -> Package.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         \"third_party/upb/upb/msg_test.cc\",",
          "59:       ],",
          "60:       sources: [",
          "61:         \"src/core/ext/filters/\",",
          "62:         \"src/core/ext/transport/\",",
          "63:         \"src/core/ext/upb-generated/\",",
          "64:         \"src/core/ext/upbdefs-generated/\",",
          "65:         \"src/core/ext/xds/\",",
          "66:         \"src/core/lib/\",",
          "67:         \"src/core/plugin_registry/grpc_plugin_registry.cc\",",
          "68:         \"src/core/tsi/\",",
          "69:         \"third_party/re2/re2/\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: <<<<<<< HEAD",
          "68: =======",
          "69:         \"include/grpc/byte_buffer.h\",",
          "70:         \"include/grpc/byte_buffer_reader.h\",",
          "71:         \"include/grpc/census.h\",",
          "72:         \"include/grpc/compression.h\",",
          "73:         \"include/grpc/event_engine/endpoint_config.h\",",
          "74:         \"include/grpc/event_engine/event_engine.h\",",
          "75:         \"include/grpc/event_engine/internal/memory_allocator_impl.h\",",
          "76:         \"include/grpc/event_engine/internal/slice_cast.h\",",
          "77:         \"include/grpc/event_engine/memory_allocator.h\",",
          "78:         \"include/grpc/event_engine/memory_request.h\",",
          "79:         \"include/grpc/event_engine/port.h\",",
          "80:         \"include/grpc/event_engine/slice.h\",",
          "81:         \"include/grpc/event_engine/slice_buffer.h\",",
          "82:         \"include/grpc/fork.h\",",
          "83:         \"include/grpc/grpc.h\",",
          "84:         \"include/grpc/grpc_audit_logging.h\",",
          "85:         \"include/grpc/grpc_posix.h\",",
          "86:         \"include/grpc/grpc_security.h\",",
          "87:         \"include/grpc/grpc_security_constants.h\",",
          "88:         \"include/grpc/impl/codegen/atm.h\",",
          "89:         \"include/grpc/impl/codegen/atm_gcc_atomic.h\",",
          "90:         \"include/grpc/impl/codegen/atm_gcc_sync.h\",",
          "91:         \"include/grpc/impl/codegen/atm_windows.h\",",
          "92:         \"include/grpc/impl/codegen/byte_buffer.h\",",
          "93:         \"include/grpc/impl/codegen/byte_buffer_reader.h\",",
          "94:         \"include/grpc/impl/codegen/compression_types.h\",",
          "95:         \"include/grpc/impl/codegen/connectivity_state.h\",",
          "96:         \"include/grpc/impl/codegen/fork.h\",",
          "97:         \"include/grpc/impl/codegen/gpr_types.h\",",
          "98:         \"include/grpc/impl/codegen/grpc_types.h\",",
          "99:         \"include/grpc/impl/codegen/log.h\",",
          "100:         \"include/grpc/impl/codegen/port_platform.h\",",
          "101:         \"include/grpc/impl/codegen/propagation_bits.h\",",
          "102:         \"include/grpc/impl/codegen/slice.h\",",
          "103:         \"include/grpc/impl/codegen/status.h\",",
          "104:         \"include/grpc/impl/codegen/sync.h\",",
          "105:         \"include/grpc/impl/codegen/sync_abseil.h\",",
          "106:         \"include/grpc/impl/codegen/sync_custom.h\",",
          "107:         \"include/grpc/impl/codegen/sync_generic.h\",",
          "108:         \"include/grpc/impl/codegen/sync_posix.h\",",
          "109:         \"include/grpc/impl/codegen/sync_windows.h\",",
          "110:         \"include/grpc/impl/compression_types.h\",",
          "111:         \"include/grpc/impl/connectivity_state.h\",",
          "112:         \"include/grpc/impl/grpc_types.h\",",
          "113:         \"include/grpc/impl/propagation_bits.h\",",
          "114:         \"include/grpc/impl/slice_type.h\",",
          "115:         \"include/grpc/load_reporting.h\",",
          "116:         \"include/grpc/slice.h\",",
          "117:         \"include/grpc/slice_buffer.h\",",
          "118:         \"include/grpc/status.h\",",
          "119:         \"include/grpc/support/alloc.h\",",
          "120:         \"include/grpc/support/atm.h\",",
          "121:         \"include/grpc/support/atm_gcc_atomic.h\",",
          "122:         \"include/grpc/support/atm_gcc_sync.h\",",
          "123:         \"include/grpc/support/atm_windows.h\",",
          "124:         \"include/grpc/support/cpu.h\",",
          "125:         \"include/grpc/support/json.h\",",
          "126:         \"include/grpc/support/log.h\",",
          "127:         \"include/grpc/support/log_windows.h\",",
          "128:         \"include/grpc/support/port_platform.h\",",
          "129:         \"include/grpc/support/string_util.h\",",
          "130:         \"include/grpc/support/sync.h\",",
          "131:         \"include/grpc/support/sync_abseil.h\",",
          "132:         \"include/grpc/support/sync_custom.h\",",
          "133:         \"include/grpc/support/sync_generic.h\",",
          "134:         \"include/grpc/support/sync_posix.h\",",
          "135:         \"include/grpc/support/sync_windows.h\",",
          "136:         \"include/grpc/support/thd_id.h\",",
          "137:         \"include/grpc/support/time.h\",",
          "138:         \"include/grpc/support/workaround_list.h\",",
          "139:         \"src/core/ext/filters/backend_metrics/backend_metric_filter.cc\",",
          "140:         \"src/core/ext/filters/backend_metrics/backend_metric_filter.h\",",
          "141:         \"src/core/ext/filters/backend_metrics/backend_metric_provider.h\",",
          "142:         \"src/core/ext/filters/census/grpc_context.cc\",",
          "143:         \"src/core/ext/filters/channel_idle/channel_idle_filter.cc\",",
          "144:         \"src/core/ext/filters/channel_idle/channel_idle_filter.h\",",
          "145:         \"src/core/ext/filters/channel_idle/idle_filter_state.cc\",",
          "146:         \"src/core/ext/filters/channel_idle/idle_filter_state.h\",",
          "147:         \"src/core/ext/filters/client_channel/backend_metric.cc\",",
          "148:         \"src/core/ext/filters/client_channel/backend_metric.h\",",
          "149:         \"src/core/ext/filters/client_channel/backup_poller.cc\",",
          "150:         \"src/core/ext/filters/client_channel/backup_poller.h\",",
          "151:         \"src/core/ext/filters/client_channel/channel_connectivity.cc\",",
          "152:         \"src/core/ext/filters/client_channel/client_channel.cc\",",
          "153:         \"src/core/ext/filters/client_channel/client_channel.h\",",
          "154:         \"src/core/ext/filters/client_channel/client_channel_channelz.cc\",",
          "155:         \"src/core/ext/filters/client_channel/client_channel_channelz.h\",",
          "156:         \"src/core/ext/filters/client_channel/client_channel_factory.cc\",",
          "157:         \"src/core/ext/filters/client_channel/client_channel_factory.h\",",
          "158:         \"src/core/ext/filters/client_channel/client_channel_internal.h\",",
          "159:         \"src/core/ext/filters/client_channel/client_channel_plugin.cc\",",
          "160:         \"src/core/ext/filters/client_channel/client_channel_service_config.cc\",",
          "161:         \"src/core/ext/filters/client_channel/client_channel_service_config.h\",",
          "162:         \"src/core/ext/filters/client_channel/config_selector.cc\",",
          "163:         \"src/core/ext/filters/client_channel/config_selector.h\",",
          "164:         \"src/core/ext/filters/client_channel/connector.h\",",
          "165:         \"src/core/ext/filters/client_channel/dynamic_filters.cc\",",
          "166:         \"src/core/ext/filters/client_channel/dynamic_filters.h\",",
          "167:         \"src/core/ext/filters/client_channel/global_subchannel_pool.cc\",",
          "168:         \"src/core/ext/filters/client_channel/global_subchannel_pool.h\",",
          "169:         \"src/core/ext/filters/client_channel/http_proxy.cc\",",
          "170:         \"src/core/ext/filters/client_channel/http_proxy.h\",",
          "171:         \"src/core/ext/filters/client_channel/lb_policy/address_filtering.cc\",",
          "172:         \"src/core/ext/filters/client_channel/lb_policy/address_filtering.h\",",
          "173:         \"src/core/ext/filters/client_channel/lb_policy/backend_metric_data.h\",",
          "174:         \"src/core/ext/filters/client_channel/lb_policy/child_policy_handler.cc\",",
          "175:         \"src/core/ext/filters/client_channel/lb_policy/child_policy_handler.h\",",
          "176:         \"src/core/ext/filters/client_channel/lb_policy/endpoint_list.cc\",",
          "177:         \"src/core/ext/filters/client_channel/lb_policy/endpoint_list.h\",",
          "178:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/client_load_reporting_filter.cc\",",
          "179:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/client_load_reporting_filter.h\",",
          "180:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc\",",
          "181:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.h\",",
          "182:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_balancer_addresses.cc\",",
          "183:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_balancer_addresses.h\",",
          "184:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_client_stats.cc\",",
          "185:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_client_stats.h\",",
          "186:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/load_balancer_api.cc\",",
          "187:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/load_balancer_api.h\",",
          "188:         \"src/core/ext/filters/client_channel/lb_policy/health_check_client.cc\",",
          "189:         \"src/core/ext/filters/client_channel/lb_policy/health_check_client.h\",",
          "190:         \"src/core/ext/filters/client_channel/lb_policy/health_check_client_internal.h\",",
          "191:         \"src/core/ext/filters/client_channel/lb_policy/oob_backend_metric.cc\",",
          "192:         \"src/core/ext/filters/client_channel/lb_policy/oob_backend_metric.h\",",
          "193:         \"src/core/ext/filters/client_channel/lb_policy/oob_backend_metric_internal.h\",",
          "194:         \"src/core/ext/filters/client_channel/lb_policy/outlier_detection/outlier_detection.cc\",",
          "195:         \"src/core/ext/filters/client_channel/lb_policy/outlier_detection/outlier_detection.h\",",
          "196:         \"src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc\",",
          "197:         \"src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.h\",",
          "198:         \"src/core/ext/filters/client_channel/lb_policy/priority/priority.cc\",",
          "199:         \"src/core/ext/filters/client_channel/lb_policy/ring_hash/ring_hash.cc\",",
          "200:         \"src/core/ext/filters/client_channel/lb_policy/ring_hash/ring_hash.h\",",
          "201:         \"src/core/ext/filters/client_channel/lb_policy/rls/rls.cc\",",
          "202:         \"src/core/ext/filters/client_channel/lb_policy/round_robin/round_robin.cc\",",
          "203:         \"src/core/ext/filters/client_channel/lb_policy/weighted_round_robin/static_stride_scheduler.cc\",",
          "204:         \"src/core/ext/filters/client_channel/lb_policy/weighted_round_robin/static_stride_scheduler.h\",",
          "205:         \"src/core/ext/filters/client_channel/lb_policy/weighted_round_robin/weighted_round_robin.cc\",",
          "206:         \"src/core/ext/filters/client_channel/lb_policy/weighted_target/weighted_target.cc\",",
          "207:         \"src/core/ext/filters/client_channel/lb_policy/xds/cds.cc\",",
          "208:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_channel_args.h\",",
          "209:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_impl.cc\",",
          "210:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_manager.cc\",",
          "211:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_resolver.cc\",",
          "212:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_override_host.cc\",",
          "213:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_override_host.h\",",
          "214:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_wrr_locality.cc\",",
          "215:         \"src/core/ext/filters/client_channel/local_subchannel_pool.cc\",",
          "216:         \"src/core/ext/filters/client_channel/local_subchannel_pool.h\",",
          "217:         \"src/core/ext/filters/client_channel/resolver/binder/binder_resolver.cc\",",
          "218:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.cc\",",
          "219:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.h\",",
          "220:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver.h\",",
          "221:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_posix.cc\",",
          "222:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_windows.cc\",",
          "223:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.cc\",",
          "224:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.h\",",
          "225:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_posix.cc\",",
          "226:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_windows.cc\",",
          "227:         \"src/core/ext/filters/client_channel/resolver/dns/dns_resolver_plugin.cc\",",
          "228:         \"src/core/ext/filters/client_channel/resolver/dns/dns_resolver_plugin.h\",",
          "229:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/event_engine_client_channel_resolver.cc\",",
          "230:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/event_engine_client_channel_resolver.h\",",
          "231:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/service_config_helper.cc\",",
          "232:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/service_config_helper.h\",",
          "233:         \"src/core/ext/filters/client_channel/resolver/dns/native/dns_resolver.cc\",",
          "234:         \"src/core/ext/filters/client_channel/resolver/dns/native/dns_resolver.h\",",
          "235:         \"src/core/ext/filters/client_channel/resolver/fake/fake_resolver.cc\",",
          "236:         \"src/core/ext/filters/client_channel/resolver/fake/fake_resolver.h\",",
          "237:         \"src/core/ext/filters/client_channel/resolver/google_c2p/google_c2p_resolver.cc\",",
          "238:         \"src/core/ext/filters/client_channel/resolver/polling_resolver.cc\",",
          "239:         \"src/core/ext/filters/client_channel/resolver/polling_resolver.h\",",
          "240:         \"src/core/ext/filters/client_channel/resolver/sockaddr/sockaddr_resolver.cc\",",
          "241:         \"src/core/ext/filters/client_channel/resolver/xds/xds_resolver.cc\",",
          "242:         \"src/core/ext/filters/client_channel/resolver/xds/xds_resolver.h\",",
          "243:         \"src/core/ext/filters/client_channel/retry_filter.cc\",",
          "244:         \"src/core/ext/filters/client_channel/retry_filter.h\",",
          "245:         \"src/core/ext/filters/client_channel/retry_service_config.cc\",",
          "246:         \"src/core/ext/filters/client_channel/retry_service_config.h\",",
          "247:         \"src/core/ext/filters/client_channel/retry_throttle.cc\",",
          "248:         \"src/core/ext/filters/client_channel/retry_throttle.h\",",
          "249:         \"src/core/ext/filters/client_channel/service_config_channel_arg_filter.cc\",",
          "250:         \"src/core/ext/filters/client_channel/subchannel.cc\",",
          "251:         \"src/core/ext/filters/client_channel/subchannel.h\",",
          "252:         \"src/core/ext/filters/client_channel/subchannel_interface_internal.h\",",
          "253:         \"src/core/ext/filters/client_channel/subchannel_pool_interface.cc\",",
          "254:         \"src/core/ext/filters/client_channel/subchannel_pool_interface.h\",",
          "255:         \"src/core/ext/filters/client_channel/subchannel_stream_client.cc\",",
          "256:         \"src/core/ext/filters/client_channel/subchannel_stream_client.h\",",
          "257:         \"src/core/ext/filters/deadline/deadline_filter.cc\",",
          "258:         \"src/core/ext/filters/deadline/deadline_filter.h\",",
          "259:         \"src/core/ext/filters/fault_injection/fault_injection_filter.cc\",",
          "260:         \"src/core/ext/filters/fault_injection/fault_injection_filter.h\",",
          "261:         \"src/core/ext/filters/fault_injection/fault_injection_service_config_parser.cc\",",
          "262:         \"src/core/ext/filters/fault_injection/fault_injection_service_config_parser.h\",",
          "263:         \"src/core/ext/filters/http/client/http_client_filter.cc\",",
          "264:         \"src/core/ext/filters/http/client/http_client_filter.h\",",
          "265:         \"src/core/ext/filters/http/client_authority_filter.cc\",",
          "266:         \"src/core/ext/filters/http/client_authority_filter.h\",",
          "267:         \"src/core/ext/filters/http/http_filters_plugin.cc\",",
          "268:         \"src/core/ext/filters/http/message_compress/compression_filter.cc\",",
          "269:         \"src/core/ext/filters/http/message_compress/compression_filter.h\",",
          "270:         \"src/core/ext/filters/http/server/http_server_filter.cc\",",
          "271:         \"src/core/ext/filters/http/server/http_server_filter.h\",",
          "272:         \"src/core/ext/filters/message_size/message_size_filter.cc\",",
          "273:         \"src/core/ext/filters/message_size/message_size_filter.h\",",
          "274:         \"src/core/ext/filters/rbac/rbac_filter.cc\",",
          "275:         \"src/core/ext/filters/rbac/rbac_filter.h\",",
          "276:         \"src/core/ext/filters/rbac/rbac_service_config_parser.cc\",",
          "277:         \"src/core/ext/filters/rbac/rbac_service_config_parser.h\",",
          "278:         \"src/core/ext/filters/server_config_selector/server_config_selector.h\",",
          "279:         \"src/core/ext/filters/server_config_selector/server_config_selector_filter.cc\",",
          "280:         \"src/core/ext/filters/server_config_selector/server_config_selector_filter.h\",",
          "281:         \"src/core/ext/filters/stateful_session/stateful_session_filter.cc\",",
          "282:         \"src/core/ext/filters/stateful_session/stateful_session_filter.h\",",
          "283:         \"src/core/ext/filters/stateful_session/stateful_session_service_config_parser.cc\",",
          "284:         \"src/core/ext/filters/stateful_session/stateful_session_service_config_parser.h\",",
          "285:         \"src/core/ext/gcp/metadata_query.cc\",",
          "286:         \"src/core/ext/gcp/metadata_query.h\",",
          "287:         \"src/core/ext/transport/chttp2/alpn/alpn.cc\",",
          "288:         \"src/core/ext/transport/chttp2/alpn/alpn.h\",",
          "289:         \"src/core/ext/transport/chttp2/client/chttp2_connector.cc\",",
          "290:         \"src/core/ext/transport/chttp2/client/chttp2_connector.h\",",
          "291:         \"src/core/ext/transport/chttp2/server/chttp2_server.cc\",",
          "292:         \"src/core/ext/transport/chttp2/server/chttp2_server.h\",",
          "293:         \"src/core/ext/transport/chttp2/transport/bin_decoder.cc\",",
          "294:         \"src/core/ext/transport/chttp2/transport/bin_decoder.h\",",
          "295:         \"src/core/ext/transport/chttp2/transport/bin_encoder.cc\",",
          "296:         \"src/core/ext/transport/chttp2/transport/bin_encoder.h\",",
          "297:         \"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",",
          "298:         \"src/core/ext/transport/chttp2/transport/chttp2_transport.h\",",
          "299:         \"src/core/ext/transport/chttp2/transport/context_list_entry.h\",",
          "300:         \"src/core/ext/transport/chttp2/transport/decode_huff.cc\",",
          "301:         \"src/core/ext/transport/chttp2/transport/decode_huff.h\",",
          "302:         \"src/core/ext/transport/chttp2/transport/flow_control.cc\",",
          "303:         \"src/core/ext/transport/chttp2/transport/flow_control.h\",",
          "304:         \"src/core/ext/transport/chttp2/transport/frame.h\",",
          "305:         \"src/core/ext/transport/chttp2/transport/frame_data.cc\",",
          "306:         \"src/core/ext/transport/chttp2/transport/frame_data.h\",",
          "307:         \"src/core/ext/transport/chttp2/transport/frame_goaway.cc\",",
          "308:         \"src/core/ext/transport/chttp2/transport/frame_goaway.h\",",
          "309:         \"src/core/ext/transport/chttp2/transport/frame_ping.cc\",",
          "310:         \"src/core/ext/transport/chttp2/transport/frame_ping.h\",",
          "311:         \"src/core/ext/transport/chttp2/transport/frame_rst_stream.cc\",",
          "312:         \"src/core/ext/transport/chttp2/transport/frame_rst_stream.h\",",
          "313:         \"src/core/ext/transport/chttp2/transport/frame_settings.cc\",",
          "314:         \"src/core/ext/transport/chttp2/transport/frame_settings.h\",",
          "315:         \"src/core/ext/transport/chttp2/transport/frame_window_update.cc\",",
          "316:         \"src/core/ext/transport/chttp2/transport/frame_window_update.h\",",
          "317:         \"src/core/ext/transport/chttp2/transport/hpack_constants.h\",",
          "318:         \"src/core/ext/transport/chttp2/transport/hpack_encoder.cc\",",
          "319:         \"src/core/ext/transport/chttp2/transport/hpack_encoder.h\",",
          "320:         \"src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc\",",
          "321:         \"src/core/ext/transport/chttp2/transport/hpack_encoder_table.h\",",
          "322:         \"src/core/ext/transport/chttp2/transport/hpack_parse_result.cc\",",
          "323:         \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\",",
          "324:         \"src/core/ext/transport/chttp2/transport/hpack_parser.cc\",",
          "325:         \"src/core/ext/transport/chttp2/transport/hpack_parser.h\",",
          "326:         \"src/core/ext/transport/chttp2/transport/hpack_parser_table.cc\",",
          "327:         \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\",",
          "328:         \"src/core/ext/transport/chttp2/transport/http2_settings.cc\",",
          "329:         \"src/core/ext/transport/chttp2/transport/http2_settings.h\",",
          "330:         \"src/core/ext/transport/chttp2/transport/http_trace.cc\",",
          "331:         \"src/core/ext/transport/chttp2/transport/http_trace.h\",",
          "332:         \"src/core/ext/transport/chttp2/transport/huffsyms.cc\",",
          "333:         \"src/core/ext/transport/chttp2/transport/huffsyms.h\",",
          "334:         \"src/core/ext/transport/chttp2/transport/internal.h\",",
          "335:         \"src/core/ext/transport/chttp2/transport/parsing.cc\",",
          "336:         \"src/core/ext/transport/chttp2/transport/stream_lists.cc\",",
          "337:         \"src/core/ext/transport/chttp2/transport/stream_map.cc\",",
          "338:         \"src/core/ext/transport/chttp2/transport/stream_map.h\",",
          "339:         \"src/core/ext/transport/chttp2/transport/varint.cc\",",
          "340:         \"src/core/ext/transport/chttp2/transport/varint.h\",",
          "341:         \"src/core/ext/transport/chttp2/transport/writing.cc\",",
          "342:         \"src/core/ext/transport/inproc/inproc_plugin.cc\",",
          "343:         \"src/core/ext/transport/inproc/inproc_transport.cc\",",
          "344:         \"src/core/ext/transport/inproc/inproc_transport.h\",",
          "345:         \"src/core/ext/upb-generated/envoy/admin/v3/certs.upb.c\",",
          "346:         \"src/core/ext/upb-generated/envoy/admin/v3/certs.upb.h\",",
          "347:         \"src/core/ext/upb-generated/envoy/admin/v3/clusters.upb.c\",",
          "348:         \"src/core/ext/upb-generated/envoy/admin/v3/clusters.upb.h\",",
          "349:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump.upb.c\",",
          "350:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump.upb.h\",",
          "351:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump_shared.upb.c\",",
          "352:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump_shared.upb.h\",",
          "353:         \"src/core/ext/upb-generated/envoy/admin/v3/init_dump.upb.c\",",
          "354:         \"src/core/ext/upb-generated/envoy/admin/v3/init_dump.upb.h\",",
          "355:         \"src/core/ext/upb-generated/envoy/admin/v3/listeners.upb.c\",",
          "356:         \"src/core/ext/upb-generated/envoy/admin/v3/listeners.upb.h\",",
          "357:         \"src/core/ext/upb-generated/envoy/admin/v3/memory.upb.c\",",
          "358:         \"src/core/ext/upb-generated/envoy/admin/v3/memory.upb.h\",",
          "359:         \"src/core/ext/upb-generated/envoy/admin/v3/metrics.upb.c\",",
          "360:         \"src/core/ext/upb-generated/envoy/admin/v3/metrics.upb.h\",",
          "361:         \"src/core/ext/upb-generated/envoy/admin/v3/mutex_stats.upb.c\",",
          "362:         \"src/core/ext/upb-generated/envoy/admin/v3/mutex_stats.upb.h\",",
          "363:         \"src/core/ext/upb-generated/envoy/admin/v3/server_info.upb.c\",",
          "364:         \"src/core/ext/upb-generated/envoy/admin/v3/server_info.upb.h\",",
          "365:         \"src/core/ext/upb-generated/envoy/admin/v3/tap.upb.c\",",
          "366:         \"src/core/ext/upb-generated/envoy/admin/v3/tap.upb.h\",",
          "367:         \"src/core/ext/upb-generated/envoy/annotations/deprecation.upb.c\",",
          "368:         \"src/core/ext/upb-generated/envoy/annotations/deprecation.upb.h\",",
          "369:         \"src/core/ext/upb-generated/envoy/annotations/resource.upb.c\",",
          "370:         \"src/core/ext/upb-generated/envoy/annotations/resource.upb.h\",",
          "371:         \"src/core/ext/upb-generated/envoy/config/accesslog/v3/accesslog.upb.c\",",
          "372:         \"src/core/ext/upb-generated/envoy/config/accesslog/v3/accesslog.upb.h\",",
          "373:         \"src/core/ext/upb-generated/envoy/config/bootstrap/v3/bootstrap.upb.c\",",
          "374:         \"src/core/ext/upb-generated/envoy/config/bootstrap/v3/bootstrap.upb.h\",",
          "375:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/circuit_breaker.upb.c\",",
          "376:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/circuit_breaker.upb.h\",",
          "377:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/cluster.upb.c\",",
          "378:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/cluster.upb.h\",",
          "379:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/filter.upb.c\",",
          "380:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/filter.upb.h\",",
          "381:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/outlier_detection.upb.c\",",
          "382:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/outlier_detection.upb.h\",",
          "383:         \"src/core/ext/upb-generated/envoy/config/common/matcher/v3/matcher.upb.c\",",
          "384:         \"src/core/ext/upb-generated/envoy/config/common/matcher/v3/matcher.upb.h\",",
          "385:         \"src/core/ext/upb-generated/envoy/config/core/v3/address.upb.c\",",
          "386:         \"src/core/ext/upb-generated/envoy/config/core/v3/address.upb.h\",",
          "387:         \"src/core/ext/upb-generated/envoy/config/core/v3/backoff.upb.c\",",
          "388:         \"src/core/ext/upb-generated/envoy/config/core/v3/backoff.upb.h\",",
          "389:         \"src/core/ext/upb-generated/envoy/config/core/v3/base.upb.c\",",
          "390:         \"src/core/ext/upb-generated/envoy/config/core/v3/base.upb.h\",",
          "391:         \"src/core/ext/upb-generated/envoy/config/core/v3/config_source.upb.c\",",
          "392:         \"src/core/ext/upb-generated/envoy/config/core/v3/config_source.upb.h\",",
          "393:         \"src/core/ext/upb-generated/envoy/config/core/v3/event_service_config.upb.c\",",
          "394:         \"src/core/ext/upb-generated/envoy/config/core/v3/event_service_config.upb.h\",",
          "395:         \"src/core/ext/upb-generated/envoy/config/core/v3/extension.upb.c\",",
          "396:         \"src/core/ext/upb-generated/envoy/config/core/v3/extension.upb.h\",",
          "397:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_method_list.upb.c\",",
          "398:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_method_list.upb.h\",",
          "399:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_service.upb.c\",",
          "400:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_service.upb.h\",",
          "401:         \"src/core/ext/upb-generated/envoy/config/core/v3/health_check.upb.c\",",
          "402:         \"src/core/ext/upb-generated/envoy/config/core/v3/health_check.upb.h\",",
          "403:         \"src/core/ext/upb-generated/envoy/config/core/v3/http_uri.upb.c\",",
          "404:         \"src/core/ext/upb-generated/envoy/config/core/v3/http_uri.upb.h\",",
          "405:         \"src/core/ext/upb-generated/envoy/config/core/v3/protocol.upb.c\",",
          "406:         \"src/core/ext/upb-generated/envoy/config/core/v3/protocol.upb.h\",",
          "407:         \"src/core/ext/upb-generated/envoy/config/core/v3/proxy_protocol.upb.c\",",
          "408:         \"src/core/ext/upb-generated/envoy/config/core/v3/proxy_protocol.upb.h\",",
          "409:         \"src/core/ext/upb-generated/envoy/config/core/v3/resolver.upb.c\",",
          "410:         \"src/core/ext/upb-generated/envoy/config/core/v3/resolver.upb.h\",",
          "411:         \"src/core/ext/upb-generated/envoy/config/core/v3/socket_option.upb.c\",",
          "412:         \"src/core/ext/upb-generated/envoy/config/core/v3/socket_option.upb.h\",",
          "413:         \"src/core/ext/upb-generated/envoy/config/core/v3/substitution_format_string.upb.c\",",
          "414:         \"src/core/ext/upb-generated/envoy/config/core/v3/substitution_format_string.upb.h\",",
          "415:         \"src/core/ext/upb-generated/envoy/config/core/v3/udp_socket_config.upb.c\",",
          "416:         \"src/core/ext/upb-generated/envoy/config/core/v3/udp_socket_config.upb.h\",",
          "417:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint.upb.c\",",
          "418:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint.upb.h\",",
          "419:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint_components.upb.c\",",
          "420:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint_components.upb.h\",",
          "421:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/load_report.upb.c\",",
          "422:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/load_report.upb.h\",",
          "423:         \"src/core/ext/upb-generated/envoy/config/listener/v3/api_listener.upb.c\",",
          "424:         \"src/core/ext/upb-generated/envoy/config/listener/v3/api_listener.upb.h\",",
          "425:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener.upb.c\",",
          "426:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener.upb.h\",",
          "427:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener_components.upb.c\",",
          "428:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener_components.upb.h\",",
          "429:         \"src/core/ext/upb-generated/envoy/config/listener/v3/quic_config.upb.c\",",
          "430:         \"src/core/ext/upb-generated/envoy/config/listener/v3/quic_config.upb.h\",",
          "431:         \"src/core/ext/upb-generated/envoy/config/listener/v3/udp_listener_config.upb.c\",",
          "432:         \"src/core/ext/upb-generated/envoy/config/listener/v3/udp_listener_config.upb.h\",",
          "433:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/metrics_service.upb.c\",",
          "434:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/metrics_service.upb.h\",",
          "435:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/stats.upb.c\",",
          "436:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/stats.upb.h\",",
          "437:         \"src/core/ext/upb-generated/envoy/config/overload/v3/overload.upb.c\",",
          "438:         \"src/core/ext/upb-generated/envoy/config/overload/v3/overload.upb.h\",",
          "439:         \"src/core/ext/upb-generated/envoy/config/rbac/v3/rbac.upb.c\",",
          "440:         \"src/core/ext/upb-generated/envoy/config/rbac/v3/rbac.upb.h\",",
          "441:         \"src/core/ext/upb-generated/envoy/config/route/v3/route.upb.c\",",
          "442:         \"src/core/ext/upb-generated/envoy/config/route/v3/route.upb.h\",",
          "443:         \"src/core/ext/upb-generated/envoy/config/route/v3/route_components.upb.c\",",
          "444:         \"src/core/ext/upb-generated/envoy/config/route/v3/route_components.upb.h\",",
          "445:         \"src/core/ext/upb-generated/envoy/config/route/v3/scoped_route.upb.c\",",
          "446:         \"src/core/ext/upb-generated/envoy/config/route/v3/scoped_route.upb.h\",",
          "447:         \"src/core/ext/upb-generated/envoy/config/tap/v3/common.upb.c\",",
          "448:         \"src/core/ext/upb-generated/envoy/config/tap/v3/common.upb.h\",",
          "449:         \"src/core/ext/upb-generated/envoy/config/trace/v3/datadog.upb.c\",",
          "450:         \"src/core/ext/upb-generated/envoy/config/trace/v3/datadog.upb.h\",",
          "451:         \"src/core/ext/upb-generated/envoy/config/trace/v3/dynamic_ot.upb.c\",",
          "452:         \"src/core/ext/upb-generated/envoy/config/trace/v3/dynamic_ot.upb.h\",",
          "453:         \"src/core/ext/upb-generated/envoy/config/trace/v3/http_tracer.upb.c\",",
          "454:         \"src/core/ext/upb-generated/envoy/config/trace/v3/http_tracer.upb.h\",",
          "455:         \"src/core/ext/upb-generated/envoy/config/trace/v3/lightstep.upb.c\",",
          "456:         \"src/core/ext/upb-generated/envoy/config/trace/v3/lightstep.upb.h\",",
          "457:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opencensus.upb.c\",",
          "458:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opencensus.upb.h\",",
          "459:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opentelemetry.upb.c\",",
          "460:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opentelemetry.upb.h\",",
          "461:         \"src/core/ext/upb-generated/envoy/config/trace/v3/service.upb.c\",",
          "462:         \"src/core/ext/upb-generated/envoy/config/trace/v3/service.upb.h\",",
          "463:         \"src/core/ext/upb-generated/envoy/config/trace/v3/skywalking.upb.c\",",
          "464:         \"src/core/ext/upb-generated/envoy/config/trace/v3/skywalking.upb.h\",",
          "465:         \"src/core/ext/upb-generated/envoy/config/trace/v3/trace.upb.c\",",
          "466:         \"src/core/ext/upb-generated/envoy/config/trace/v3/trace.upb.h\",",
          "467:         \"src/core/ext/upb-generated/envoy/config/trace/v3/xray.upb.c\",",
          "468:         \"src/core/ext/upb-generated/envoy/config/trace/v3/xray.upb.h\",",
          "469:         \"src/core/ext/upb-generated/envoy/config/trace/v3/zipkin.upb.c\",",
          "470:         \"src/core/ext/upb-generated/envoy/config/trace/v3/zipkin.upb.h\",",
          "471:         \"src/core/ext/upb-generated/envoy/data/accesslog/v3/accesslog.upb.c\",",
          "472:         \"src/core/ext/upb-generated/envoy/data/accesslog/v3/accesslog.upb.h\",",
          "473:         \"src/core/ext/upb-generated/envoy/extensions/clusters/aggregate/v3/cluster.upb.c\",",
          "474:         \"src/core/ext/upb-generated/envoy/extensions/clusters/aggregate/v3/cluster.upb.h\",",
          "475:         \"src/core/ext/upb-generated/envoy/extensions/filters/common/fault/v3/fault.upb.c\",",
          "476:         \"src/core/ext/upb-generated/envoy/extensions/filters/common/fault/v3/fault.upb.h\",",
          "477:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/fault/v3/fault.upb.c\",",
          "478:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/fault/v3/fault.upb.h\",",
          "479:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/rbac/v3/rbac.upb.c\",",
          "480:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/rbac/v3/rbac.upb.h\",",
          "481:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/router/v3/router.upb.c\",",
          "482:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/router/v3/router.upb.h\",",
          "483:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upb.c\",",
          "484:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upb.h\",",
          "485:         \"src/core/ext/upb-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upb.c\",",
          "486:         \"src/core/ext/upb-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upb.h\",",
          "487:         \"src/core/ext/upb-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upb.c\",",
          "488:         \"src/core/ext/upb-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upb.h\",",
          "489:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/client_side_weighted_round_robin/v3/client_side_weighted_round_robin.upb.c\",",
          "490:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/client_side_weighted_round_robin/v3/client_side_weighted_round_robin.upb.h\",",
          "491:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/common/v3/common.upb.c\",",
          "492:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/common/v3/common.upb.h\",",
          "493:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.upb.c\",",
          "494:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.upb.h\",",
          "495:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.upb.c\",",
          "496:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.upb.h\",",
          "497:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/wrr_locality/v3/wrr_locality.upb.c\",",
          "498:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/wrr_locality/v3/wrr_locality.upb.h\",",
          "499:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/cert.upb.c\",",
          "500:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/cert.upb.h\",",
          "501:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/common.upb.c\",",
          "502:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/common.upb.h\",",
          "503:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/secret.upb.c\",",
          "504:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/secret.upb.h\",",
          "505:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls.upb.c\",",
          "506:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls.upb.h\",",
          "507:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upb.c\",",
          "508:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upb.h\",",
          "509:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/ads.upb.c\",",
          "510:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/ads.upb.h\",",
          "511:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/discovery.upb.c\",",
          "512:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/discovery.upb.h\",",
          "513:         \"src/core/ext/upb-generated/envoy/service/load_stats/v3/lrs.upb.c\",",
          "514:         \"src/core/ext/upb-generated/envoy/service/load_stats/v3/lrs.upb.h\",",
          "515:         \"src/core/ext/upb-generated/envoy/service/status/v3/csds.upb.c\",",
          "516:         \"src/core/ext/upb-generated/envoy/service/status/v3/csds.upb.h\",",
          "517:         \"src/core/ext/upb-generated/envoy/type/http/v3/cookie.upb.c\",",
          "518:         \"src/core/ext/upb-generated/envoy/type/http/v3/cookie.upb.h\",",
          "519:         \"src/core/ext/upb-generated/envoy/type/http/v3/path_transformation.upb.c\",",
          "520:         \"src/core/ext/upb-generated/envoy/type/http/v3/path_transformation.upb.h\",",
          "521:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/filter_state.upb.c\",",
          "522:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/filter_state.upb.h\",",
          "523:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/http_inputs.upb.c\",",
          "524:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/http_inputs.upb.h\",",
          "525:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/metadata.upb.c\",",
          "526:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/metadata.upb.h\",",
          "527:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/node.upb.c\",",
          "528:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/node.upb.h\",",
          "529:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/number.upb.c\",",
          "530:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/number.upb.h\",",
          "531:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/path.upb.c\",",
          "532:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/path.upb.h\",",
          "533:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/regex.upb.c\",",
          "534:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/regex.upb.h\",",
          "535:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/status_code_input.upb.c\",",
          "536:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/status_code_input.upb.h\",",
          "537:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/string.upb.c\",",
          "538:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/string.upb.h\",",
          "539:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/struct.upb.c\",",
          "540:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/struct.upb.h\",",
          "541:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/value.upb.c\",",
          "542:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/value.upb.h\",",
          "543:         \"src/core/ext/upb-generated/envoy/type/metadata/v3/metadata.upb.c\",",
          "544:         \"src/core/ext/upb-generated/envoy/type/metadata/v3/metadata.upb.h\",",
          "545:         \"src/core/ext/upb-generated/envoy/type/tracing/v3/custom_tag.upb.c\",",
          "546:         \"src/core/ext/upb-generated/envoy/type/tracing/v3/custom_tag.upb.h\",",
          "547:         \"src/core/ext/upb-generated/envoy/type/v3/hash_policy.upb.c\",",
          "548:         \"src/core/ext/upb-generated/envoy/type/v3/hash_policy.upb.h\",",
          "549:         \"src/core/ext/upb-generated/envoy/type/v3/http.upb.c\",",
          "550:         \"src/core/ext/upb-generated/envoy/type/v3/http.upb.h\",",
          "551:         \"src/core/ext/upb-generated/envoy/type/v3/http_status.upb.c\",",
          "552:         \"src/core/ext/upb-generated/envoy/type/v3/http_status.upb.h\",",
          "553:         \"src/core/ext/upb-generated/envoy/type/v3/percent.upb.c\",",
          "554:         \"src/core/ext/upb-generated/envoy/type/v3/percent.upb.h\",",
          "555:         \"src/core/ext/upb-generated/envoy/type/v3/range.upb.c\",",
          "556:         \"src/core/ext/upb-generated/envoy/type/v3/range.upb.h\",",
          "557:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_strategy.upb.c\",",
          "558:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_strategy.upb.h\",",
          "559:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_unit.upb.c\",",
          "560:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_unit.upb.h\",",
          "561:         \"src/core/ext/upb-generated/envoy/type/v3/semantic_version.upb.c\",",
          "562:         \"src/core/ext/upb-generated/envoy/type/v3/semantic_version.upb.h\",",
          "563:         \"src/core/ext/upb-generated/envoy/type/v3/token_bucket.upb.c\",",
          "564:         \"src/core/ext/upb-generated/envoy/type/v3/token_bucket.upb.h\",",
          "565:         \"src/core/ext/upb-generated/google/api/annotations.upb.c\",",
          "566:         \"src/core/ext/upb-generated/google/api/annotations.upb.h\",",
          "567:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/checked.upb.c\",",
          "568:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/checked.upb.h\",",
          "569:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/syntax.upb.c\",",
          "570:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/syntax.upb.h\",",
          "571:         \"src/core/ext/upb-generated/google/api/http.upb.c\",",
          "572:         \"src/core/ext/upb-generated/google/api/http.upb.h\",",
          "573:         \"src/core/ext/upb-generated/google/api/httpbody.upb.c\",",
          "574:         \"src/core/ext/upb-generated/google/api/httpbody.upb.h\",",
          "575:         \"src/core/ext/upb-generated/google/protobuf/any.upb.c\",",
          "576:         \"src/core/ext/upb-generated/google/protobuf/any.upb.h\",",
          "577:         \"src/core/ext/upb-generated/google/protobuf/descriptor.upb.c\",",
          "578:         \"src/core/ext/upb-generated/google/protobuf/descriptor.upb.h\",",
          "579:         \"src/core/ext/upb-generated/google/protobuf/duration.upb.c\",",
          "580:         \"src/core/ext/upb-generated/google/protobuf/duration.upb.h\",",
          "581:         \"src/core/ext/upb-generated/google/protobuf/empty.upb.c\",",
          "582:         \"src/core/ext/upb-generated/google/protobuf/empty.upb.h\",",
          "583:         \"src/core/ext/upb-generated/google/protobuf/struct.upb.c\",",
          "584:         \"src/core/ext/upb-generated/google/protobuf/struct.upb.h\",",
          "585:         \"src/core/ext/upb-generated/google/protobuf/timestamp.upb.c\",",
          "586:         \"src/core/ext/upb-generated/google/protobuf/timestamp.upb.h\",",
          "587:         \"src/core/ext/upb-generated/google/protobuf/wrappers.upb.c\",",
          "588:         \"src/core/ext/upb-generated/google/protobuf/wrappers.upb.h\",",
          "589:         \"src/core/ext/upb-generated/google/rpc/status.upb.c\",",
          "590:         \"src/core/ext/upb-generated/google/rpc/status.upb.h\",",
          "591:         \"src/core/ext/upb-generated/opencensus/proto/trace/v1/trace_config.upb.c\",",
          "592:         \"src/core/ext/upb-generated/opencensus/proto/trace/v1/trace_config.upb.h\",",
          "593:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/altscontext.upb.c\",",
          "594:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/altscontext.upb.h\",",
          "595:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/handshaker.upb.c\",",
          "596:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/handshaker.upb.h\",",
          "597:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/transport_security_common.upb.c\",",
          "598:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/transport_security_common.upb.h\",",
          "599:         \"src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.c\",",
          "600:         \"src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.h\",",
          "601:         \"src/core/ext/upb-generated/src/proto/grpc/lb/v1/load_balancer.upb.c\",",
          "602:         \"src/core/ext/upb-generated/src/proto/grpc/lb/v1/load_balancer.upb.h\",",
          "603:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls.upb.c\",",
          "604:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls.upb.h\",",
          "605:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls_config.upb.c\",",
          "606:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls_config.upb.h\",",
          "607:         \"src/core/ext/upb-generated/udpa/annotations/migrate.upb.c\",",
          "608:         \"src/core/ext/upb-generated/udpa/annotations/migrate.upb.h\",",
          "609:         \"src/core/ext/upb-generated/udpa/annotations/security.upb.c\",",
          "610:         \"src/core/ext/upb-generated/udpa/annotations/security.upb.h\",",
          "611:         \"src/core/ext/upb-generated/udpa/annotations/sensitive.upb.c\",",
          "612:         \"src/core/ext/upb-generated/udpa/annotations/sensitive.upb.h\",",
          "613:         \"src/core/ext/upb-generated/udpa/annotations/status.upb.c\",",
          "614:         \"src/core/ext/upb-generated/udpa/annotations/status.upb.h\",",
          "615:         \"src/core/ext/upb-generated/udpa/annotations/versioning.upb.c\",",
          "616:         \"src/core/ext/upb-generated/udpa/annotations/versioning.upb.h\",",
          "617:         \"src/core/ext/upb-generated/validate/validate.upb.c\",",
          "618:         \"src/core/ext/upb-generated/validate/validate.upb.h\",",
          "619:         \"src/core/ext/upb-generated/xds/annotations/v3/migrate.upb.c\",",
          "620:         \"src/core/ext/upb-generated/xds/annotations/v3/migrate.upb.h\",",
          "621:         \"src/core/ext/upb-generated/xds/annotations/v3/security.upb.c\",",
          "622:         \"src/core/ext/upb-generated/xds/annotations/v3/security.upb.h\",",
          "623:         \"src/core/ext/upb-generated/xds/annotations/v3/sensitive.upb.c\",",
          "624:         \"src/core/ext/upb-generated/xds/annotations/v3/sensitive.upb.h\",",
          "625:         \"src/core/ext/upb-generated/xds/annotations/v3/status.upb.c\",",
          "626:         \"src/core/ext/upb-generated/xds/annotations/v3/status.upb.h\",",
          "627:         \"src/core/ext/upb-generated/xds/annotations/v3/versioning.upb.c\",",
          "628:         \"src/core/ext/upb-generated/xds/annotations/v3/versioning.upb.h\",",
          "629:         \"src/core/ext/upb-generated/xds/core/v3/authority.upb.c\",",
          "630:         \"src/core/ext/upb-generated/xds/core/v3/authority.upb.h\",",
          "631:         \"src/core/ext/upb-generated/xds/core/v3/cidr.upb.c\",",
          "632:         \"src/core/ext/upb-generated/xds/core/v3/cidr.upb.h\",",
          "633:         \"src/core/ext/upb-generated/xds/core/v3/collection_entry.upb.c\",",
          "634:         \"src/core/ext/upb-generated/xds/core/v3/collection_entry.upb.h\",",
          "635:         \"src/core/ext/upb-generated/xds/core/v3/context_params.upb.c\",",
          "636:         \"src/core/ext/upb-generated/xds/core/v3/context_params.upb.h\",",
          "637:         \"src/core/ext/upb-generated/xds/core/v3/extension.upb.c\",",
          "638:         \"src/core/ext/upb-generated/xds/core/v3/extension.upb.h\",",
          "639:         \"src/core/ext/upb-generated/xds/core/v3/resource.upb.c\",",
          "640:         \"src/core/ext/upb-generated/xds/core/v3/resource.upb.h\",",
          "641:         \"src/core/ext/upb-generated/xds/core/v3/resource_locator.upb.c\",",
          "642:         \"src/core/ext/upb-generated/xds/core/v3/resource_locator.upb.h\",",
          "643:         \"src/core/ext/upb-generated/xds/core/v3/resource_name.upb.c\",",
          "644:         \"src/core/ext/upb-generated/xds/core/v3/resource_name.upb.h\",",
          "645:         \"src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.c\",",
          "646:         \"src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.h\",",
          "647:         \"src/core/ext/upb-generated/xds/service/orca/v3/orca.upb.c\",",
          "648:         \"src/core/ext/upb-generated/xds/service/orca/v3/orca.upb.h\",",
          "649:         \"src/core/ext/upb-generated/xds/type/matcher/v3/cel.upb.c\",",
          "650:         \"src/core/ext/upb-generated/xds/type/matcher/v3/cel.upb.h\",",
          "651:         \"src/core/ext/upb-generated/xds/type/matcher/v3/domain.upb.c\",",
          "652:         \"src/core/ext/upb-generated/xds/type/matcher/v3/domain.upb.h\",",
          "653:         \"src/core/ext/upb-generated/xds/type/matcher/v3/http_inputs.upb.c\",",
          "654:         \"src/core/ext/upb-generated/xds/type/matcher/v3/http_inputs.upb.h\",",
          "655:         \"src/core/ext/upb-generated/xds/type/matcher/v3/ip.upb.c\",",
          "656:         \"src/core/ext/upb-generated/xds/type/matcher/v3/ip.upb.h\",",
          "657:         \"src/core/ext/upb-generated/xds/type/matcher/v3/matcher.upb.c\",",
          "658:         \"src/core/ext/upb-generated/xds/type/matcher/v3/matcher.upb.h\",",
          "659:         \"src/core/ext/upb-generated/xds/type/matcher/v3/range.upb.c\",",
          "660:         \"src/core/ext/upb-generated/xds/type/matcher/v3/range.upb.h\",",
          "661:         \"src/core/ext/upb-generated/xds/type/matcher/v3/regex.upb.c\",",
          "662:         \"src/core/ext/upb-generated/xds/type/matcher/v3/regex.upb.h\",",
          "663:         \"src/core/ext/upb-generated/xds/type/matcher/v3/string.upb.c\",",
          "664:         \"src/core/ext/upb-generated/xds/type/matcher/v3/string.upb.h\",",
          "665:         \"src/core/ext/upb-generated/xds/type/v3/cel.upb.c\",",
          "666:         \"src/core/ext/upb-generated/xds/type/v3/cel.upb.h\",",
          "667:         \"src/core/ext/upb-generated/xds/type/v3/range.upb.c\",",
          "668:         \"src/core/ext/upb-generated/xds/type/v3/range.upb.h\",",
          "669:         \"src/core/ext/upb-generated/xds/type/v3/typed_struct.upb.c\",",
          "670:         \"src/core/ext/upb-generated/xds/type/v3/typed_struct.upb.h\",",
          "671:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/certs.upbdefs.c\",",
          "672:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/certs.upbdefs.h\",",
          "673:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/clusters.upbdefs.c\",",
          "674:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/clusters.upbdefs.h\",",
          "675:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump.upbdefs.c\",",
          "676:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump.upbdefs.h\",",
          "677:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump_shared.upbdefs.c\",",
          "678:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump_shared.upbdefs.h\",",
          "679:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/init_dump.upbdefs.c\",",
          "680:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/init_dump.upbdefs.h\",",
          "681:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/listeners.upbdefs.c\",",
          "682:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/listeners.upbdefs.h\",",
          "683:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/memory.upbdefs.c\",",
          "684:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/memory.upbdefs.h\",",
          "685:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/metrics.upbdefs.c\",",
          "686:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/metrics.upbdefs.h\",",
          "687:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/mutex_stats.upbdefs.c\",",
          "688:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/mutex_stats.upbdefs.h\",",
          "689:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/server_info.upbdefs.c\",",
          "690:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/server_info.upbdefs.h\",",
          "691:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/tap.upbdefs.c\",",
          "692:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/tap.upbdefs.h\",",
          "693:         \"src/core/ext/upbdefs-generated/envoy/annotations/deprecation.upbdefs.c\",",
          "694:         \"src/core/ext/upbdefs-generated/envoy/annotations/deprecation.upbdefs.h\",",
          "695:         \"src/core/ext/upbdefs-generated/envoy/annotations/resource.upbdefs.c\",",
          "696:         \"src/core/ext/upbdefs-generated/envoy/annotations/resource.upbdefs.h\",",
          "697:         \"src/core/ext/upbdefs-generated/envoy/config/accesslog/v3/accesslog.upbdefs.c\",",
          "698:         \"src/core/ext/upbdefs-generated/envoy/config/accesslog/v3/accesslog.upbdefs.h\",",
          "699:         \"src/core/ext/upbdefs-generated/envoy/config/bootstrap/v3/bootstrap.upbdefs.c\",",
          "700:         \"src/core/ext/upbdefs-generated/envoy/config/bootstrap/v3/bootstrap.upbdefs.h\",",
          "701:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/circuit_breaker.upbdefs.c\",",
          "702:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/circuit_breaker.upbdefs.h\",",
          "703:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/cluster.upbdefs.c\",",
          "704:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/cluster.upbdefs.h\",",
          "705:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/filter.upbdefs.c\",",
          "706:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/filter.upbdefs.h\",",
          "707:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/outlier_detection.upbdefs.c\",",
          "708:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/outlier_detection.upbdefs.h\",",
          "709:         \"src/core/ext/upbdefs-generated/envoy/config/common/matcher/v3/matcher.upbdefs.c\",",
          "710:         \"src/core/ext/upbdefs-generated/envoy/config/common/matcher/v3/matcher.upbdefs.h\",",
          "711:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/address.upbdefs.c\",",
          "712:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/address.upbdefs.h\",",
          "713:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/backoff.upbdefs.c\",",
          "714:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/backoff.upbdefs.h\",",
          "715:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/base.upbdefs.c\",",
          "716:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/base.upbdefs.h\",",
          "717:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/config_source.upbdefs.c\",",
          "718:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/config_source.upbdefs.h\",",
          "719:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/event_service_config.upbdefs.c\",",
          "720:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/event_service_config.upbdefs.h\",",
          "721:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/extension.upbdefs.c\",",
          "722:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/extension.upbdefs.h\",",
          "723:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_method_list.upbdefs.c\",",
          "724:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_method_list.upbdefs.h\",",
          "725:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_service.upbdefs.c\",",
          "726:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_service.upbdefs.h\",",
          "727:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/health_check.upbdefs.c\",",
          "728:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/health_check.upbdefs.h\",",
          "729:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/http_uri.upbdefs.c\",",
          "730:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/http_uri.upbdefs.h\",",
          "731:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/protocol.upbdefs.c\",",
          "732:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/protocol.upbdefs.h\",",
          "733:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/proxy_protocol.upbdefs.c\",",
          "734:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/proxy_protocol.upbdefs.h\",",
          "735:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/resolver.upbdefs.c\",",
          "736:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/resolver.upbdefs.h\",",
          "737:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/socket_option.upbdefs.c\",",
          "738:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/socket_option.upbdefs.h\",",
          "739:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/substitution_format_string.upbdefs.c\",",
          "740:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/substitution_format_string.upbdefs.h\",",
          "741:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/udp_socket_config.upbdefs.c\",",
          "742:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/udp_socket_config.upbdefs.h\",",
          "743:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint.upbdefs.c\",",
          "744:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint.upbdefs.h\",",
          "745:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint_components.upbdefs.c\",",
          "746:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint_components.upbdefs.h\",",
          "747:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/load_report.upbdefs.c\",",
          "748:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/load_report.upbdefs.h\",",
          "749:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/api_listener.upbdefs.c\",",
          "750:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/api_listener.upbdefs.h\",",
          "751:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener.upbdefs.c\",",
          "752:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener.upbdefs.h\",",
          "753:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener_components.upbdefs.c\",",
          "754:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener_components.upbdefs.h\",",
          "755:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/quic_config.upbdefs.c\",",
          "756:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/quic_config.upbdefs.h\",",
          "757:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/udp_listener_config.upbdefs.c\",",
          "758:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/udp_listener_config.upbdefs.h\",",
          "759:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/metrics_service.upbdefs.c\",",
          "760:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/metrics_service.upbdefs.h\",",
          "761:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/stats.upbdefs.c\",",
          "762:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/stats.upbdefs.h\",",
          "763:         \"src/core/ext/upbdefs-generated/envoy/config/overload/v3/overload.upbdefs.c\",",
          "764:         \"src/core/ext/upbdefs-generated/envoy/config/overload/v3/overload.upbdefs.h\",",
          "765:         \"src/core/ext/upbdefs-generated/envoy/config/rbac/v3/rbac.upbdefs.c\",",
          "766:         \"src/core/ext/upbdefs-generated/envoy/config/rbac/v3/rbac.upbdefs.h\",",
          "767:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route.upbdefs.c\",",
          "768:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route.upbdefs.h\",",
          "769:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route_components.upbdefs.c\",",
          "770:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route_components.upbdefs.h\",",
          "771:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/scoped_route.upbdefs.c\",",
          "772:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/scoped_route.upbdefs.h\",",
          "773:         \"src/core/ext/upbdefs-generated/envoy/config/tap/v3/common.upbdefs.c\",",
          "774:         \"src/core/ext/upbdefs-generated/envoy/config/tap/v3/common.upbdefs.h\",",
          "775:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/datadog.upbdefs.c\",",
          "776:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/datadog.upbdefs.h\",",
          "777:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/dynamic_ot.upbdefs.c\",",
          "778:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/dynamic_ot.upbdefs.h\",",
          "779:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/http_tracer.upbdefs.c\",",
          "780:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/http_tracer.upbdefs.h\",",
          "781:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/lightstep.upbdefs.c\",",
          "782:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/lightstep.upbdefs.h\",",
          "783:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opencensus.upbdefs.c\",",
          "784:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opencensus.upbdefs.h\",",
          "785:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opentelemetry.upbdefs.c\",",
          "786:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opentelemetry.upbdefs.h\",",
          "787:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/service.upbdefs.c\",",
          "788:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/service.upbdefs.h\",",
          "789:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/skywalking.upbdefs.c\",",
          "790:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/skywalking.upbdefs.h\",",
          "791:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/trace.upbdefs.c\",",
          "792:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/trace.upbdefs.h\",",
          "793:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/xray.upbdefs.c\",",
          "794:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/xray.upbdefs.h\",",
          "795:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/zipkin.upbdefs.c\",",
          "796:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/zipkin.upbdefs.h\",",
          "797:         \"src/core/ext/upbdefs-generated/envoy/data/accesslog/v3/accesslog.upbdefs.c\",",
          "798:         \"src/core/ext/upbdefs-generated/envoy/data/accesslog/v3/accesslog.upbdefs.h\",",
          "799:         \"src/core/ext/upbdefs-generated/envoy/extensions/clusters/aggregate/v3/cluster.upbdefs.c\",",
          "800:         \"src/core/ext/upbdefs-generated/envoy/extensions/clusters/aggregate/v3/cluster.upbdefs.h\",",
          "801:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/common/fault/v3/fault.upbdefs.c\",",
          "802:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/common/fault/v3/fault.upbdefs.h\",",
          "803:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/fault/v3/fault.upbdefs.c\",",
          "804:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/fault/v3/fault.upbdefs.h\",",
          "805:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/rbac/v3/rbac.upbdefs.c\",",
          "806:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/rbac/v3/rbac.upbdefs.h\",",
          "807:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/router/v3/router.upbdefs.c\",",
          "808:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/router/v3/router.upbdefs.h\",",
          "809:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upbdefs.c\",",
          "810:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upbdefs.h\",",
          "811:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upbdefs.c\",",
          "812:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upbdefs.h\",",
          "813:         \"src/core/ext/upbdefs-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upbdefs.c\",",
          "814:         \"src/core/ext/upbdefs-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upbdefs.h\",",
          "815:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/cert.upbdefs.c\",",
          "816:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/cert.upbdefs.h\",",
          "817:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/common.upbdefs.c\",",
          "818:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/common.upbdefs.h\",",
          "819:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/secret.upbdefs.c\",",
          "820:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/secret.upbdefs.h\",",
          "821:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls.upbdefs.c\",",
          "822:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls.upbdefs.h\",",
          "823:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upbdefs.c\",",
          "824:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upbdefs.h\",",
          "825:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/ads.upbdefs.c\",",
          "826:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/ads.upbdefs.h\",",
          "827:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/discovery.upbdefs.c\",",
          "828:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/discovery.upbdefs.h\",",
          "829:         \"src/core/ext/upbdefs-generated/envoy/service/load_stats/v3/lrs.upbdefs.c\",",
          "830:         \"src/core/ext/upbdefs-generated/envoy/service/load_stats/v3/lrs.upbdefs.h\",",
          "831:         \"src/core/ext/upbdefs-generated/envoy/service/status/v3/csds.upbdefs.c\",",
          "832:         \"src/core/ext/upbdefs-generated/envoy/service/status/v3/csds.upbdefs.h\",",
          "833:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/cookie.upbdefs.c\",",
          "834:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/cookie.upbdefs.h\",",
          "835:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/path_transformation.upbdefs.c\",",
          "836:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/path_transformation.upbdefs.h\",",
          "837:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/filter_state.upbdefs.c\",",
          "838:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/filter_state.upbdefs.h\",",
          "839:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/http_inputs.upbdefs.c\",",
          "840:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/http_inputs.upbdefs.h\",",
          "841:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/metadata.upbdefs.c\",",
          "842:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/metadata.upbdefs.h\",",
          "843:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/node.upbdefs.c\",",
          "844:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/node.upbdefs.h\",",
          "845:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/number.upbdefs.c\",",
          "846:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/number.upbdefs.h\",",
          "847:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/path.upbdefs.c\",",
          "848:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/path.upbdefs.h\",",
          "849:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/regex.upbdefs.c\",",
          "850:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/regex.upbdefs.h\",",
          "851:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/status_code_input.upbdefs.c\",",
          "852:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/status_code_input.upbdefs.h\",",
          "853:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/string.upbdefs.c\",",
          "854:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/string.upbdefs.h\",",
          "855:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/struct.upbdefs.c\",",
          "856:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/struct.upbdefs.h\",",
          "857:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/value.upbdefs.c\",",
          "858:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/value.upbdefs.h\",",
          "859:         \"src/core/ext/upbdefs-generated/envoy/type/metadata/v3/metadata.upbdefs.c\",",
          "860:         \"src/core/ext/upbdefs-generated/envoy/type/metadata/v3/metadata.upbdefs.h\",",
          "861:         \"src/core/ext/upbdefs-generated/envoy/type/tracing/v3/custom_tag.upbdefs.c\",",
          "862:         \"src/core/ext/upbdefs-generated/envoy/type/tracing/v3/custom_tag.upbdefs.h\",",
          "863:         \"src/core/ext/upbdefs-generated/envoy/type/v3/hash_policy.upbdefs.c\",",
          "864:         \"src/core/ext/upbdefs-generated/envoy/type/v3/hash_policy.upbdefs.h\",",
          "865:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http.upbdefs.c\",",
          "866:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http.upbdefs.h\",",
          "867:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http_status.upbdefs.c\",",
          "868:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http_status.upbdefs.h\",",
          "869:         \"src/core/ext/upbdefs-generated/envoy/type/v3/percent.upbdefs.c\",",
          "870:         \"src/core/ext/upbdefs-generated/envoy/type/v3/percent.upbdefs.h\",",
          "871:         \"src/core/ext/upbdefs-generated/envoy/type/v3/range.upbdefs.c\",",
          "872:         \"src/core/ext/upbdefs-generated/envoy/type/v3/range.upbdefs.h\",",
          "873:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_strategy.upbdefs.c\",",
          "874:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_strategy.upbdefs.h\",",
          "875:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_unit.upbdefs.c\",",
          "876:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_unit.upbdefs.h\",",
          "877:         \"src/core/ext/upbdefs-generated/envoy/type/v3/semantic_version.upbdefs.c\",",
          "878:         \"src/core/ext/upbdefs-generated/envoy/type/v3/semantic_version.upbdefs.h\",",
          "879:         \"src/core/ext/upbdefs-generated/envoy/type/v3/token_bucket.upbdefs.c\",",
          "880:         \"src/core/ext/upbdefs-generated/envoy/type/v3/token_bucket.upbdefs.h\",",
          "881:         \"src/core/ext/upbdefs-generated/google/api/annotations.upbdefs.c\",",
          "882:         \"src/core/ext/upbdefs-generated/google/api/annotations.upbdefs.h\",",
          "883:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/checked.upbdefs.c\",",
          "884:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/checked.upbdefs.h\",",
          "885:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/syntax.upbdefs.c\",",
          "886:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/syntax.upbdefs.h\",",
          "887:         \"src/core/ext/upbdefs-generated/google/api/http.upbdefs.c\",",
          "888:         \"src/core/ext/upbdefs-generated/google/api/http.upbdefs.h\",",
          "889:         \"src/core/ext/upbdefs-generated/google/api/httpbody.upbdefs.c\",",
          "890:         \"src/core/ext/upbdefs-generated/google/api/httpbody.upbdefs.h\",",
          "891:         \"src/core/ext/upbdefs-generated/google/protobuf/any.upbdefs.c\",",
          "892:         \"src/core/ext/upbdefs-generated/google/protobuf/any.upbdefs.h\",",
          "893:         \"src/core/ext/upbdefs-generated/google/protobuf/descriptor.upbdefs.c\",",
          "894:         \"src/core/ext/upbdefs-generated/google/protobuf/descriptor.upbdefs.h\",",
          "895:         \"src/core/ext/upbdefs-generated/google/protobuf/duration.upbdefs.c\",",
          "896:         \"src/core/ext/upbdefs-generated/google/protobuf/duration.upbdefs.h\",",
          "897:         \"src/core/ext/upbdefs-generated/google/protobuf/empty.upbdefs.c\",",
          "898:         \"src/core/ext/upbdefs-generated/google/protobuf/empty.upbdefs.h\",",
          "899:         \"src/core/ext/upbdefs-generated/google/protobuf/struct.upbdefs.c\",",
          "900:         \"src/core/ext/upbdefs-generated/google/protobuf/struct.upbdefs.h\",",
          "901:         \"src/core/ext/upbdefs-generated/google/protobuf/timestamp.upbdefs.c\",",
          "902:         \"src/core/ext/upbdefs-generated/google/protobuf/timestamp.upbdefs.h\",",
          "903:         \"src/core/ext/upbdefs-generated/google/protobuf/wrappers.upbdefs.c\",",
          "904:         \"src/core/ext/upbdefs-generated/google/protobuf/wrappers.upbdefs.h\",",
          "905:         \"src/core/ext/upbdefs-generated/google/rpc/status.upbdefs.c\",",
          "906:         \"src/core/ext/upbdefs-generated/google/rpc/status.upbdefs.h\",",
          "907:         \"src/core/ext/upbdefs-generated/opencensus/proto/trace/v1/trace_config.upbdefs.c\",",
          "908:         \"src/core/ext/upbdefs-generated/opencensus/proto/trace/v1/trace_config.upbdefs.h\",",
          "909:         \"src/core/ext/upbdefs-generated/src/proto/grpc/lookup/v1/rls_config.upbdefs.c\",",
          "910:         \"src/core/ext/upbdefs-generated/src/proto/grpc/lookup/v1/rls_config.upbdefs.h\",",
          "911:         \"src/core/ext/upbdefs-generated/udpa/annotations/migrate.upbdefs.c\",",
          "912:         \"src/core/ext/upbdefs-generated/udpa/annotations/migrate.upbdefs.h\",",
          "913:         \"src/core/ext/upbdefs-generated/udpa/annotations/security.upbdefs.c\",",
          "914:         \"src/core/ext/upbdefs-generated/udpa/annotations/security.upbdefs.h\",",
          "915:         \"src/core/ext/upbdefs-generated/udpa/annotations/sensitive.upbdefs.c\",",
          "916:         \"src/core/ext/upbdefs-generated/udpa/annotations/sensitive.upbdefs.h\",",
          "917:         \"src/core/ext/upbdefs-generated/udpa/annotations/status.upbdefs.c\",",
          "918:         \"src/core/ext/upbdefs-generated/udpa/annotations/status.upbdefs.h\",",
          "919:         \"src/core/ext/upbdefs-generated/udpa/annotations/versioning.upbdefs.c\",",
          "920:         \"src/core/ext/upbdefs-generated/udpa/annotations/versioning.upbdefs.h\",",
          "921:         \"src/core/ext/upbdefs-generated/validate/validate.upbdefs.c\",",
          "922:         \"src/core/ext/upbdefs-generated/validate/validate.upbdefs.h\",",
          "923:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/migrate.upbdefs.c\",",
          "924:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/migrate.upbdefs.h\",",
          "925:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/security.upbdefs.c\",",
          "926:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/security.upbdefs.h\",",
          "927:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/sensitive.upbdefs.c\",",
          "928:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/sensitive.upbdefs.h\",",
          "929:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/status.upbdefs.c\",",
          "930:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/status.upbdefs.h\",",
          "931:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/versioning.upbdefs.c\",",
          "932:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/versioning.upbdefs.h\",",
          "933:         \"src/core/ext/upbdefs-generated/xds/core/v3/authority.upbdefs.c\",",
          "934:         \"src/core/ext/upbdefs-generated/xds/core/v3/authority.upbdefs.h\",",
          "935:         \"src/core/ext/upbdefs-generated/xds/core/v3/cidr.upbdefs.c\",",
          "936:         \"src/core/ext/upbdefs-generated/xds/core/v3/cidr.upbdefs.h\",",
          "937:         \"src/core/ext/upbdefs-generated/xds/core/v3/collection_entry.upbdefs.c\",",
          "938:         \"src/core/ext/upbdefs-generated/xds/core/v3/collection_entry.upbdefs.h\",",
          "939:         \"src/core/ext/upbdefs-generated/xds/core/v3/context_params.upbdefs.c\",",
          "940:         \"src/core/ext/upbdefs-generated/xds/core/v3/context_params.upbdefs.h\",",
          "941:         \"src/core/ext/upbdefs-generated/xds/core/v3/extension.upbdefs.c\",",
          "942:         \"src/core/ext/upbdefs-generated/xds/core/v3/extension.upbdefs.h\",",
          "943:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource.upbdefs.c\",",
          "944:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource.upbdefs.h\",",
          "945:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_locator.upbdefs.c\",",
          "946:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_locator.upbdefs.h\",",
          "947:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_name.upbdefs.c\",",
          "948:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_name.upbdefs.h\",",
          "949:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/cel.upbdefs.c\",",
          "950:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/cel.upbdefs.h\",",
          "951:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/domain.upbdefs.c\",",
          "952:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/domain.upbdefs.h\",",
          "953:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/http_inputs.upbdefs.c\",",
          "954:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/http_inputs.upbdefs.h\",",
          "955:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/ip.upbdefs.c\",",
          "956:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/ip.upbdefs.h\",",
          "957:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/matcher.upbdefs.c\",",
          "958:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/matcher.upbdefs.h\",",
          "959:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/range.upbdefs.c\",",
          "960:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/range.upbdefs.h\",",
          "961:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/regex.upbdefs.c\",",
          "962:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/regex.upbdefs.h\",",
          "963:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/string.upbdefs.c\",",
          "964:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/string.upbdefs.h\",",
          "965:         \"src/core/ext/upbdefs-generated/xds/type/v3/cel.upbdefs.c\",",
          "966:         \"src/core/ext/upbdefs-generated/xds/type/v3/cel.upbdefs.h\",",
          "967:         \"src/core/ext/upbdefs-generated/xds/type/v3/range.upbdefs.c\",",
          "968:         \"src/core/ext/upbdefs-generated/xds/type/v3/range.upbdefs.h\",",
          "969:         \"src/core/ext/upbdefs-generated/xds/type/v3/typed_struct.upbdefs.c\",",
          "970:         \"src/core/ext/upbdefs-generated/xds/type/v3/typed_struct.upbdefs.h\",",
          "971:         \"src/core/ext/xds/certificate_provider_store.cc\",",
          "972:         \"src/core/ext/xds/certificate_provider_store.h\",",
          "973:         \"src/core/ext/xds/file_watcher_certificate_provider_factory.cc\",",
          "974:         \"src/core/ext/xds/file_watcher_certificate_provider_factory.h\",",
          "975:         \"src/core/ext/xds/upb_utils.h\",",
          "976:         \"src/core/ext/xds/xds_api.cc\",",
          "977:         \"src/core/ext/xds/xds_api.h\",",
          "978:         \"src/core/ext/xds/xds_audit_logger_registry.cc\",",
          "979:         \"src/core/ext/xds/xds_audit_logger_registry.h\",",
          "980:         \"src/core/ext/xds/xds_bootstrap.cc\",",
          "981:         \"src/core/ext/xds/xds_bootstrap.h\",",
          "982:         \"src/core/ext/xds/xds_bootstrap_grpc.cc\",",
          "983:         \"src/core/ext/xds/xds_bootstrap_grpc.h\",",
          "984:         \"src/core/ext/xds/xds_certificate_provider.cc\",",
          "985:         \"src/core/ext/xds/xds_certificate_provider.h\",",
          "986:         \"src/core/ext/xds/xds_channel_args.h\",",
          "987:         \"src/core/ext/xds/xds_channel_stack_modifier.cc\",",
          "988:         \"src/core/ext/xds/xds_channel_stack_modifier.h\",",
          "989:         \"src/core/ext/xds/xds_client.cc\",",
          "990:         \"src/core/ext/xds/xds_client.h\",",
          "991:         \"src/core/ext/xds/xds_client_grpc.cc\",",
          "992:         \"src/core/ext/xds/xds_client_grpc.h\",",
          "993:         \"src/core/ext/xds/xds_client_stats.cc\",",
          "994:         \"src/core/ext/xds/xds_client_stats.h\",",
          "995:         \"src/core/ext/xds/xds_cluster.cc\",",
          "996:         \"src/core/ext/xds/xds_cluster.h\",",
          "997:         \"src/core/ext/xds/xds_cluster_specifier_plugin.cc\",",
          "998:         \"src/core/ext/xds/xds_cluster_specifier_plugin.h\",",
          "999:         \"src/core/ext/xds/xds_common_types.cc\",",
          "1000:         \"src/core/ext/xds/xds_common_types.h\",",
          "1001:         \"src/core/ext/xds/xds_endpoint.cc\",",
          "1002:         \"src/core/ext/xds/xds_endpoint.h\",",
          "1003:         \"src/core/ext/xds/xds_health_status.cc\",",
          "1004:         \"src/core/ext/xds/xds_health_status.h\",",
          "1005:         \"src/core/ext/xds/xds_http_fault_filter.cc\",",
          "1006:         \"src/core/ext/xds/xds_http_fault_filter.h\",",
          "1007:         \"src/core/ext/xds/xds_http_filters.cc\",",
          "1008:         \"src/core/ext/xds/xds_http_filters.h\",",
          "1009:         \"src/core/ext/xds/xds_http_rbac_filter.cc\",",
          "1010:         \"src/core/ext/xds/xds_http_rbac_filter.h\",",
          "1011:         \"src/core/ext/xds/xds_http_stateful_session_filter.cc\",",
          "1012:         \"src/core/ext/xds/xds_http_stateful_session_filter.h\",",
          "1013:         \"src/core/ext/xds/xds_lb_policy_registry.cc\",",
          "1014:         \"src/core/ext/xds/xds_lb_policy_registry.h\",",
          "1015:         \"src/core/ext/xds/xds_listener.cc\",",
          "1016:         \"src/core/ext/xds/xds_listener.h\",",
          "1017:         \"src/core/ext/xds/xds_resource_type.h\",",
          "1018:         \"src/core/ext/xds/xds_resource_type_impl.h\",",
          "1019:         \"src/core/ext/xds/xds_route_config.cc\",",
          "1020:         \"src/core/ext/xds/xds_route_config.h\",",
          "1021:         \"src/core/ext/xds/xds_routing.cc\",",
          "1022:         \"src/core/ext/xds/xds_routing.h\",",
          "1023:         \"src/core/ext/xds/xds_server_config_fetcher.cc\",",
          "1024:         \"src/core/ext/xds/xds_transport.h\",",
          "1025:         \"src/core/ext/xds/xds_transport_grpc.cc\",",
          "1026:         \"src/core/ext/xds/xds_transport_grpc.h\",",
          "1027:         \"src/core/lib/address_utils/parse_address.cc\",",
          "1028:         \"src/core/lib/address_utils/parse_address.h\",",
          "1029:         \"src/core/lib/address_utils/sockaddr_utils.cc\",",
          "1030:         \"src/core/lib/address_utils/sockaddr_utils.h\",",
          "1031:         \"src/core/lib/avl/avl.h\",",
          "1032:         \"src/core/lib/backoff/backoff.cc\",",
          "1033:         \"src/core/lib/backoff/backoff.h\",",
          "1034:         \"src/core/lib/backoff/random_early_detection.cc\",",
          "1035:         \"src/core/lib/backoff/random_early_detection.h\",",
          "1036:         \"src/core/lib/channel/call_finalization.h\",",
          "1037:         \"src/core/lib/channel/call_tracer.cc\",",
          "1038:         \"src/core/lib/channel/call_tracer.h\",",
          "1039:         \"src/core/lib/channel/channel_args.cc\",",
          "1040:         \"src/core/lib/channel/channel_args.h\",",
          "1041:         \"src/core/lib/channel/channel_args_preconditioning.cc\",",
          "1042:         \"src/core/lib/channel/channel_args_preconditioning.h\",",
          "1043:         \"src/core/lib/channel/channel_fwd.h\",",
          "1044:         \"src/core/lib/channel/channel_stack.cc\",",
          "1045:         \"src/core/lib/channel/channel_stack.h\",",
          "1046:         \"src/core/lib/channel/channel_stack_builder.cc\",",
          "1047:         \"src/core/lib/channel/channel_stack_builder.h\",",
          "1048:         \"src/core/lib/channel/channel_stack_builder_impl.cc\",",
          "1049:         \"src/core/lib/channel/channel_stack_builder_impl.h\",",
          "1050:         \"src/core/lib/channel/channel_trace.cc\",",
          "1051:         \"src/core/lib/channel/channel_trace.h\",",
          "1052:         \"src/core/lib/channel/channelz.cc\",",
          "1053:         \"src/core/lib/channel/channelz.h\",",
          "1054:         \"src/core/lib/channel/channelz_registry.cc\",",
          "1055:         \"src/core/lib/channel/channelz_registry.h\",",
          "1056:         \"src/core/lib/channel/connected_channel.cc\",",
          "1057:         \"src/core/lib/channel/connected_channel.h\",",
          "1058:         \"src/core/lib/channel/context.h\",",
          "1059:         \"src/core/lib/channel/promise_based_filter.cc\",",
          "1060:         \"src/core/lib/channel/promise_based_filter.h\",",
          "1061:         \"src/core/lib/channel/server_call_tracer_filter.cc\",",
          "1062:         \"src/core/lib/channel/status_util.cc\",",
          "1063:         \"src/core/lib/channel/status_util.h\",",
          "1064:         \"src/core/lib/compression/compression.cc\",",
          "1065:         \"src/core/lib/compression/compression_internal.cc\",",
          "1066:         \"src/core/lib/compression/compression_internal.h\",",
          "1067:         \"src/core/lib/compression/message_compress.cc\",",
          "1068:         \"src/core/lib/compression/message_compress.h\",",
          "1069:         \"src/core/lib/config/config_vars.cc\",",
          "1070:         \"src/core/lib/config/config_vars.h\",",
          "1071:         \"src/core/lib/config/config_vars_non_generated.cc\",",
          "1072:         \"src/core/lib/config/core_configuration.cc\",",
          "1073:         \"src/core/lib/config/core_configuration.h\",",
          "1074:         \"src/core/lib/config/load_config.cc\",",
          "1075:         \"src/core/lib/config/load_config.h\",",
          "1076:         \"src/core/lib/debug/event_log.cc\",",
          "1077:         \"src/core/lib/debug/event_log.h\",",
          "1078:         \"src/core/lib/debug/histogram_view.cc\",",
          "1079:         \"src/core/lib/debug/histogram_view.h\",",
          "1080:         \"src/core/lib/debug/stats.cc\",",
          "1081:         \"src/core/lib/debug/stats.h\",",
          "1082:         \"src/core/lib/debug/stats_data.cc\",",
          "1083:         \"src/core/lib/debug/stats_data.h\",",
          "1084:         \"src/core/lib/debug/trace.cc\",",
          "1085:         \"src/core/lib/debug/trace.h\",",
          "1086:         \"src/core/lib/event_engine/cf_engine/cf_engine.cc\",",
          "1087:         \"src/core/lib/event_engine/cf_engine/cf_engine.h\",",
          "1088:         \"src/core/lib/event_engine/cf_engine/cfstream_endpoint.cc\",",
          "1089:         \"src/core/lib/event_engine/cf_engine/cfstream_endpoint.h\",",
          "1090:         \"src/core/lib/event_engine/cf_engine/cftype_unique_ref.h\",",
          "1091:         \"src/core/lib/event_engine/channel_args_endpoint_config.cc\",",
          "1092:         \"src/core/lib/event_engine/channel_args_endpoint_config.h\",",
          "1093:         \"src/core/lib/event_engine/common_closures.h\",",
          "1094:         \"src/core/lib/event_engine/default_event_engine.cc\",",
          "1095:         \"src/core/lib/event_engine/default_event_engine.h\",",
          "1096:         \"src/core/lib/event_engine/default_event_engine_factory.cc\",",
          "1097:         \"src/core/lib/event_engine/default_event_engine_factory.h\",",
          "1098:         \"src/core/lib/event_engine/event_engine.cc\",",
          "1099:         \"src/core/lib/event_engine/forkable.cc\",",
          "1100:         \"src/core/lib/event_engine/forkable.h\",",
          "1101:         \"src/core/lib/event_engine/handle_containers.h\",",
          "1102:         \"src/core/lib/event_engine/memory_allocator.cc\",",
          "1103:         \"src/core/lib/event_engine/memory_allocator_factory.h\",",
          "1104:         \"src/core/lib/event_engine/poller.h\",",
          "1105:         \"src/core/lib/event_engine/posix.h\",",
          "1106:         \"src/core/lib/event_engine/posix_engine/ev_epoll1_linux.cc\",",
          "1107:         \"src/core/lib/event_engine/posix_engine/ev_epoll1_linux.h\",",
          "1108:         \"src/core/lib/event_engine/posix_engine/ev_poll_posix.cc\",",
          "1109:         \"src/core/lib/event_engine/posix_engine/ev_poll_posix.h\",",
          "1110:         \"src/core/lib/event_engine/posix_engine/event_poller.h\",",
          "1111:         \"src/core/lib/event_engine/posix_engine/event_poller_posix_default.cc\",",
          "1112:         \"src/core/lib/event_engine/posix_engine/event_poller_posix_default.h\",",
          "1113:         \"src/core/lib/event_engine/posix_engine/internal_errqueue.cc\",",
          "1114:         \"src/core/lib/event_engine/posix_engine/internal_errqueue.h\",",
          "1115:         \"src/core/lib/event_engine/posix_engine/lockfree_event.cc\",",
          "1116:         \"src/core/lib/event_engine/posix_engine/lockfree_event.h\",",
          "1117:         \"src/core/lib/event_engine/posix_engine/posix_endpoint.cc\",",
          "1118:         \"src/core/lib/event_engine/posix_engine/posix_endpoint.h\",",
          "1119:         \"src/core/lib/event_engine/posix_engine/posix_engine.cc\",",
          "1120:         \"src/core/lib/event_engine/posix_engine/posix_engine.h\",",
          "1121:         \"src/core/lib/event_engine/posix_engine/posix_engine_closure.h\",",
          "1122:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener.cc\",",
          "1123:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener.h\",",
          "1124:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener_utils.cc\",",
          "1125:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener_utils.h\",",
          "1126:         \"src/core/lib/event_engine/posix_engine/tcp_socket_utils.cc\",",
          "1127:         \"src/core/lib/event_engine/posix_engine/tcp_socket_utils.h\",",
          "1128:         \"src/core/lib/event_engine/posix_engine/timer.cc\",",
          "1129:         \"src/core/lib/event_engine/posix_engine/timer.h\",",
          "1130:         \"src/core/lib/event_engine/posix_engine/timer_heap.cc\",",
          "1131:         \"src/core/lib/event_engine/posix_engine/timer_heap.h\",",
          "1132:         \"src/core/lib/event_engine/posix_engine/timer_manager.cc\",",
          "1133:         \"src/core/lib/event_engine/posix_engine/timer_manager.h\",",
          "1134:         \"src/core/lib/event_engine/posix_engine/traced_buffer_list.cc\",",
          "1135:         \"src/core/lib/event_engine/posix_engine/traced_buffer_list.h\",",
          "1136:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_eventfd.cc\",",
          "1137:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_eventfd.h\",",
          "1138:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_pipe.cc\",",
          "1139:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_pipe.h\",",
          "1140:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_posix.h\",",
          "1141:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_posix_default.cc\",",
          "1142:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_posix_default.h\",",
          "1143:         \"src/core/lib/event_engine/resolved_address.cc\",",
          "1144:         \"src/core/lib/event_engine/resolved_address_internal.h\",",
          "1145:         \"src/core/lib/event_engine/shim.cc\",",
          "1146:         \"src/core/lib/event_engine/shim.h\",",
          "1147:         \"src/core/lib/event_engine/slice.cc\",",
          "1148:         \"src/core/lib/event_engine/slice_buffer.cc\",",
          "1149:         \"src/core/lib/event_engine/tcp_socket_utils.cc\",",
          "1150:         \"src/core/lib/event_engine/tcp_socket_utils.h\",",
          "1151:         \"src/core/lib/event_engine/thread_local.cc\",",
          "1152:         \"src/core/lib/event_engine/thread_local.h\",",
          "1153:         \"src/core/lib/event_engine/thread_pool/original_thread_pool.cc\",",
          "1154:         \"src/core/lib/event_engine/thread_pool/original_thread_pool.h\",",
          "1155:         \"src/core/lib/event_engine/thread_pool/thread_pool.h\",",
          "1156:         \"src/core/lib/event_engine/thread_pool/thread_pool_factory.cc\",",
          "1157:         \"src/core/lib/event_engine/thread_pool/work_stealing_thread_pool.cc\",",
          "1158:         \"src/core/lib/event_engine/thread_pool/work_stealing_thread_pool.h\",",
          "1159:         \"src/core/lib/event_engine/thready_event_engine/thready_event_engine.cc\",",
          "1160:         \"src/core/lib/event_engine/thready_event_engine/thready_event_engine.h\",",
          "1161:         \"src/core/lib/event_engine/time_util.cc\",",
          "1162:         \"src/core/lib/event_engine/time_util.h\",",
          "1163:         \"src/core/lib/event_engine/trace.cc\",",
          "1164:         \"src/core/lib/event_engine/trace.h\",",
          "1165:         \"src/core/lib/event_engine/utils.cc\",",
          "1166:         \"src/core/lib/event_engine/utils.h\",",
          "1167:         \"src/core/lib/event_engine/windows/iocp.cc\",",
          "1168:         \"src/core/lib/event_engine/windows/iocp.h\",",
          "1169:         \"src/core/lib/event_engine/windows/win_socket.cc\",",
          "1170:         \"src/core/lib/event_engine/windows/win_socket.h\",",
          "1171:         \"src/core/lib/event_engine/windows/windows_endpoint.cc\",",
          "1172:         \"src/core/lib/event_engine/windows/windows_endpoint.h\",",
          "1173:         \"src/core/lib/event_engine/windows/windows_engine.cc\",",
          "1174:         \"src/core/lib/event_engine/windows/windows_engine.h\",",
          "1175:         \"src/core/lib/event_engine/windows/windows_listener.cc\",",
          "1176:         \"src/core/lib/event_engine/windows/windows_listener.h\",",
          "1177:         \"src/core/lib/event_engine/work_queue/basic_work_queue.cc\",",
          "1178:         \"src/core/lib/event_engine/work_queue/basic_work_queue.h\",",
          "1179:         \"src/core/lib/event_engine/work_queue/work_queue.h\",",
          "1180:         \"src/core/lib/experiments/config.cc\",",
          "1181:         \"src/core/lib/experiments/config.h\",",
          "1182:         \"src/core/lib/experiments/experiments.cc\",",
          "1183:         \"src/core/lib/experiments/experiments.h\",",
          "1184:         \"src/core/lib/gpr/alloc.cc\",",
          "1185:         \"src/core/lib/gpr/alloc.h\",",
          "1186:         \"src/core/lib/gpr/android/log.cc\",",
          "1187:         \"src/core/lib/gpr/atm.cc\",",
          "1188:         \"src/core/lib/gpr/iphone/cpu.cc\",",
          "1189:         \"src/core/lib/gpr/linux/cpu.cc\",",
          "1190:         \"src/core/lib/gpr/linux/log.cc\",",
          "1191:         \"src/core/lib/gpr/log.cc\",",
          "1192:         \"src/core/lib/gpr/log_internal.h\",",
          "1193:         \"src/core/lib/gpr/msys/tmpfile.cc\",",
          "1194:         \"src/core/lib/gpr/posix/cpu.cc\",",
          "1195:         \"src/core/lib/gpr/posix/log.cc\",",
          "1196:         \"src/core/lib/gpr/posix/string.cc\",",
          "1197:         \"src/core/lib/gpr/posix/sync.cc\",",
          "1198:         \"src/core/lib/gpr/posix/time.cc\",",
          "1199:         \"src/core/lib/gpr/posix/tmpfile.cc\",",
          "1200:         \"src/core/lib/gpr/spinlock.h\",",
          "1201:         \"src/core/lib/gpr/string.cc\",",
          "1202:         \"src/core/lib/gpr/string.h\",",
          "1203:         \"src/core/lib/gpr/sync.cc\",",
          "1204:         \"src/core/lib/gpr/sync_abseil.cc\",",
          "1205:         \"src/core/lib/gpr/time.cc\",",
          "1206:         \"src/core/lib/gpr/time_precise.cc\",",
          "1207:         \"src/core/lib/gpr/time_precise.h\",",
          "1208:         \"src/core/lib/gpr/tmpfile.h\",",
          "1209:         \"src/core/lib/gpr/useful.h\",",
          "1210:         \"src/core/lib/gpr/windows/cpu.cc\",",
          "1211:         \"src/core/lib/gpr/windows/log.cc\",",
          "1212:         \"src/core/lib/gpr/windows/string.cc\",",
          "1213:         \"src/core/lib/gpr/windows/string_util.cc\",",
          "1214:         \"src/core/lib/gpr/windows/sync.cc\",",
          "1215:         \"src/core/lib/gpr/windows/time.cc\",",
          "1216:         \"src/core/lib/gpr/windows/tmpfile.cc\",",
          "1217:         \"src/core/lib/gpr/wrap_memcpy.cc\",",
          "1218:         \"src/core/lib/gprpp/atomic_utils.h\",",
          "1219:         \"src/core/lib/gprpp/bitset.h\",",
          "1220:         \"src/core/lib/gprpp/chunked_vector.h\",",
          "1221:         \"src/core/lib/gprpp/construct_destruct.h\",",
          "1222:         \"src/core/lib/gprpp/cpp_impl_of.h\",",
          "1223:         \"src/core/lib/gprpp/crash.cc\",",
          "1224:         \"src/core/lib/gprpp/crash.h\",",
          "1225:         \"src/core/lib/gprpp/debug_location.h\",",
          "1226:         \"src/core/lib/gprpp/dual_ref_counted.h\",",
          "1227:         \"src/core/lib/gprpp/env.h\",",
          "1228:         \"src/core/lib/gprpp/examine_stack.cc\",",
          "1229:         \"src/core/lib/gprpp/examine_stack.h\",",
          "1230:         \"src/core/lib/gprpp/fork.cc\",",
          "1231:         \"src/core/lib/gprpp/fork.h\",",
          "1232:         \"src/core/lib/gprpp/host_port.cc\",",
          "1233:         \"src/core/lib/gprpp/host_port.h\",",
          "1234:         \"src/core/lib/gprpp/if_list.h\",",
          "1235:         \"src/core/lib/gprpp/linux/env.cc\",",
          "1236:         \"src/core/lib/gprpp/load_file.cc\",",
          "1237:         \"src/core/lib/gprpp/load_file.h\",",
          "1238:         \"src/core/lib/gprpp/manual_constructor.h\",",
          "1239:         \"src/core/lib/gprpp/match.h\",",
          "1240:         \"src/core/lib/gprpp/memory.h\",",
          "1241:         \"src/core/lib/gprpp/mpscq.cc\",",
          "1242:         \"src/core/lib/gprpp/mpscq.h\",",
          "1243:         \"src/core/lib/gprpp/no_destruct.h\",",
          "1244:         \"src/core/lib/gprpp/notification.h\",",
          "1245:         \"src/core/lib/gprpp/orphanable.h\",",
          "1246:         \"src/core/lib/gprpp/overload.h\",",
          "1247:         \"src/core/lib/gprpp/packed_table.h\",",
          "1248:         \"src/core/lib/gprpp/per_cpu.cc\",",
          "1249:         \"src/core/lib/gprpp/per_cpu.h\",",
          "1250:         \"src/core/lib/gprpp/posix/env.cc\",",
          "1251:         \"src/core/lib/gprpp/posix/stat.cc\",",
          "1252:         \"src/core/lib/gprpp/posix/thd.cc\",",
          "1253:         \"src/core/lib/gprpp/ref_counted.h\",",
          "1254:         \"src/core/lib/gprpp/ref_counted_ptr.h\",",
          "1255:         \"src/core/lib/gprpp/single_set_ptr.h\",",
          "1256:         \"src/core/lib/gprpp/sorted_pack.h\",",
          "1257:         \"src/core/lib/gprpp/stat.h\",",
          "1258:         \"src/core/lib/gprpp/status_helper.cc\",",
          "1259:         \"src/core/lib/gprpp/status_helper.h\",",
          "1260:         \"src/core/lib/gprpp/strerror.cc\",",
          "1261:         \"src/core/lib/gprpp/strerror.h\",",
          "1262:         \"src/core/lib/gprpp/sync.h\",",
          "1263:         \"src/core/lib/gprpp/table.h\",",
          "1264:         \"src/core/lib/gprpp/tchar.cc\",",
          "1265:         \"src/core/lib/gprpp/tchar.h\",",
          "1266:         \"src/core/lib/gprpp/thd.h\",",
          "1267:         \"src/core/lib/gprpp/time.cc\",",
          "1268:         \"src/core/lib/gprpp/time.h\",",
          "1269:         \"src/core/lib/gprpp/time_averaged_stats.cc\",",
          "1270:         \"src/core/lib/gprpp/time_averaged_stats.h\",",
          "1271:         \"src/core/lib/gprpp/time_util.cc\",",
          "1272:         \"src/core/lib/gprpp/time_util.h\",",
          "1273:         \"src/core/lib/gprpp/type_list.h\",",
          "1274:         \"src/core/lib/gprpp/unique_type_name.h\",",
          "1275:         \"src/core/lib/gprpp/validation_errors.cc\",",
          "1276:         \"src/core/lib/gprpp/validation_errors.h\",",
          "1277:         \"src/core/lib/gprpp/windows/env.cc\",",
          "1278:         \"src/core/lib/gprpp/windows/stat.cc\",",
          "1279:         \"src/core/lib/gprpp/windows/thd.cc\",",
          "1280:         \"src/core/lib/gprpp/work_serializer.cc\",",
          "1281:         \"src/core/lib/gprpp/work_serializer.h\",",
          "1282:         \"src/core/lib/handshaker/proxy_mapper.h\",",
          "1283:         \"src/core/lib/handshaker/proxy_mapper_registry.cc\",",
          "1284:         \"src/core/lib/handshaker/proxy_mapper_registry.h\",",
          "1285:         \"src/core/lib/http/format_request.cc\",",
          "1286:         \"src/core/lib/http/format_request.h\",",
          "1287:         \"src/core/lib/http/httpcli.cc\",",
          "1288:         \"src/core/lib/http/httpcli.h\",",
          "1289:         \"src/core/lib/http/httpcli_security_connector.cc\",",
          "1290:         \"src/core/lib/http/httpcli_ssl_credentials.h\",",
          "1291:         \"src/core/lib/http/parser.cc\",",
          "1292:         \"src/core/lib/http/parser.h\",",
          "1293:         \"src/core/lib/iomgr/block_annotate.h\",",
          "1294:         \"src/core/lib/iomgr/buffer_list.cc\",",
          "1295:         \"src/core/lib/iomgr/buffer_list.h\",",
          "1296:         \"src/core/lib/iomgr/call_combiner.cc\",",
          "1297:         \"src/core/lib/iomgr/call_combiner.h\",",
          "1298:         \"src/core/lib/iomgr/cfstream_handle.cc\",",
          "1299:         \"src/core/lib/iomgr/cfstream_handle.h\",",
          "1300:         \"src/core/lib/iomgr/closure.cc\",",
          "1301:         \"src/core/lib/iomgr/closure.h\",",
          "1302:         \"src/core/lib/iomgr/combiner.cc\",",
          "1303:         \"src/core/lib/iomgr/combiner.h\",",
          "1304:         \"src/core/lib/iomgr/dualstack_socket_posix.cc\",",
          "1305:         \"src/core/lib/iomgr/dynamic_annotations.h\",",
          "1306:         \"src/core/lib/iomgr/endpoint.cc\",",
          "1307:         \"src/core/lib/iomgr/endpoint.h\",",
          "1308:         \"src/core/lib/iomgr/endpoint_cfstream.cc\",",
          "1309:         \"src/core/lib/iomgr/endpoint_cfstream.h\",",
          "1310:         \"src/core/lib/iomgr/endpoint_pair.h\",",
          "1311:         \"src/core/lib/iomgr/endpoint_pair_posix.cc\",",
          "1312:         \"src/core/lib/iomgr/endpoint_pair_windows.cc\",",
          "1313:         \"src/core/lib/iomgr/error.cc\",",
          "1314:         \"src/core/lib/iomgr/error.h\",",
          "1315:         \"src/core/lib/iomgr/error_cfstream.cc\",",
          "1316:         \"src/core/lib/iomgr/error_cfstream.h\",",
          "1317:         \"src/core/lib/iomgr/ev_apple.cc\",",
          "1318:         \"src/core/lib/iomgr/ev_apple.h\",",
          "1319:         \"src/core/lib/iomgr/ev_epoll1_linux.cc\",",
          "1320:         \"src/core/lib/iomgr/ev_epoll1_linux.h\",",
          "1321:         \"src/core/lib/iomgr/ev_poll_posix.cc\",",
          "1322:         \"src/core/lib/iomgr/ev_poll_posix.h\",",
          "1323:         \"src/core/lib/iomgr/ev_posix.cc\",",
          "1324:         \"src/core/lib/iomgr/ev_posix.h\",",
          "1325:         \"src/core/lib/iomgr/ev_windows.cc\",",
          "1326:         \"src/core/lib/iomgr/event_engine_shims/closure.cc\",",
          "1327:         \"src/core/lib/iomgr/event_engine_shims/closure.h\",",
          "1328:         \"src/core/lib/iomgr/event_engine_shims/endpoint.cc\",",
          "1329:         \"src/core/lib/iomgr/event_engine_shims/endpoint.h\",",
          "1330:         \"src/core/lib/iomgr/event_engine_shims/tcp_client.cc\",",
          "1331:         \"src/core/lib/iomgr/event_engine_shims/tcp_client.h\",",
          "1332:         \"src/core/lib/iomgr/exec_ctx.cc\",",
          "1333:         \"src/core/lib/iomgr/exec_ctx.h\",",
          "1334:         \"src/core/lib/iomgr/executor.cc\",",
          "1335:         \"src/core/lib/iomgr/executor.h\",",
          "1336:         \"src/core/lib/iomgr/fork_posix.cc\",",
          "1337:         \"src/core/lib/iomgr/fork_windows.cc\",",
          "1338:         \"src/core/lib/iomgr/gethostname.h\",",
          "1339:         \"src/core/lib/iomgr/gethostname_fallback.cc\",",
          "1340:         \"src/core/lib/iomgr/gethostname_host_name_max.cc\",",
          "1341:         \"src/core/lib/iomgr/gethostname_sysconf.cc\",",
          "1342:         \"src/core/lib/iomgr/grpc_if_nametoindex.h\",",
          "1343:         \"src/core/lib/iomgr/grpc_if_nametoindex_posix.cc\",",
          "1344:         \"src/core/lib/iomgr/grpc_if_nametoindex_unsupported.cc\",",
          "1345:         \"src/core/lib/iomgr/internal_errqueue.cc\",",
          "1346:         \"src/core/lib/iomgr/internal_errqueue.h\",",
          "1347:         \"src/core/lib/iomgr/iocp_windows.cc\",",
          "1348:         \"src/core/lib/iomgr/iocp_windows.h\",",
          "1349:         \"src/core/lib/iomgr/iomgr.cc\",",
          "1350:         \"src/core/lib/iomgr/iomgr.h\",",
          "1351:         \"src/core/lib/iomgr/iomgr_fwd.h\",",
          "1352:         \"src/core/lib/iomgr/iomgr_internal.cc\",",
          "1353:         \"src/core/lib/iomgr/iomgr_internal.h\",",
          "1354:         \"src/core/lib/iomgr/iomgr_posix.cc\",",
          "1355:         \"src/core/lib/iomgr/iomgr_posix_cfstream.cc\",",
          "1356:         \"src/core/lib/iomgr/iomgr_windows.cc\",",
          "1357:         \"src/core/lib/iomgr/load_file.cc\",",
          "1358:         \"src/core/lib/iomgr/load_file.h\",",
          "1359:         \"src/core/lib/iomgr/lockfree_event.cc\",",
          "1360:         \"src/core/lib/iomgr/lockfree_event.h\",",
          "1361:         \"src/core/lib/iomgr/nameser.h\",",
          "1362:         \"src/core/lib/iomgr/polling_entity.cc\",",
          "1363:         \"src/core/lib/iomgr/polling_entity.h\",",
          "1364:         \"src/core/lib/iomgr/pollset.cc\",",
          "1365:         \"src/core/lib/iomgr/pollset.h\",",
          "1366:         \"src/core/lib/iomgr/pollset_set.cc\",",
          "1367:         \"src/core/lib/iomgr/pollset_set.h\",",
          "1368:         \"src/core/lib/iomgr/pollset_set_windows.cc\",",
          "1369:         \"src/core/lib/iomgr/pollset_set_windows.h\",",
          "1370:         \"src/core/lib/iomgr/pollset_windows.cc\",",
          "1371:         \"src/core/lib/iomgr/pollset_windows.h\",",
          "1372:         \"src/core/lib/iomgr/port.h\",",
          "1373:         \"src/core/lib/iomgr/python_util.h\",",
          "1374:         \"src/core/lib/iomgr/resolve_address.cc\",",
          "1375:         \"src/core/lib/iomgr/resolve_address.h\",",
          "1376:         \"src/core/lib/iomgr/resolve_address_impl.h\",",
          "1377:         \"src/core/lib/iomgr/resolve_address_posix.cc\",",
          "1378:         \"src/core/lib/iomgr/resolve_address_posix.h\",",
          "1379:         \"src/core/lib/iomgr/resolve_address_windows.cc\",",
          "1380:         \"src/core/lib/iomgr/resolve_address_windows.h\",",
          "1381:         \"src/core/lib/iomgr/resolved_address.h\",",
          "1382:         \"src/core/lib/iomgr/sockaddr.h\",",
          "1383:         \"src/core/lib/iomgr/sockaddr_posix.h\",",
          "1384:         \"src/core/lib/iomgr/sockaddr_utils_posix.cc\",",
          "1385:         \"src/core/lib/iomgr/sockaddr_windows.h\",",
          "1386:         \"src/core/lib/iomgr/socket_factory_posix.cc\",",
          "1387:         \"src/core/lib/iomgr/socket_factory_posix.h\",",
          "1388:         \"src/core/lib/iomgr/socket_mutator.cc\",",
          "1389:         \"src/core/lib/iomgr/socket_mutator.h\",",
          "1390:         \"src/core/lib/iomgr/socket_utils.h\",",
          "1391:         \"src/core/lib/iomgr/socket_utils_common_posix.cc\",",
          "1392:         \"src/core/lib/iomgr/socket_utils_linux.cc\",",
          "1393:         \"src/core/lib/iomgr/socket_utils_posix.cc\",",
          "1394:         \"src/core/lib/iomgr/socket_utils_posix.h\",",
          "1395:         \"src/core/lib/iomgr/socket_utils_windows.cc\",",
          "1396:         \"src/core/lib/iomgr/socket_windows.cc\",",
          "1397:         \"src/core/lib/iomgr/socket_windows.h\",",
          "1398:         \"src/core/lib/iomgr/systemd_utils.cc\",",
          "1399:         \"src/core/lib/iomgr/systemd_utils.h\",",
          "1400:         \"src/core/lib/iomgr/tcp_client.cc\",",
          "1401:         \"src/core/lib/iomgr/tcp_client.h\",",
          "1402:         \"src/core/lib/iomgr/tcp_client_cfstream.cc\",",
          "1403:         \"src/core/lib/iomgr/tcp_client_posix.cc\",",
          "1404:         \"src/core/lib/iomgr/tcp_client_posix.h\",",
          "1405:         \"src/core/lib/iomgr/tcp_client_windows.cc\",",
          "1406:         \"src/core/lib/iomgr/tcp_posix.cc\",",
          "1407:         \"src/core/lib/iomgr/tcp_posix.h\",",
          "1408:         \"src/core/lib/iomgr/tcp_server.cc\",",
          "1409:         \"src/core/lib/iomgr/tcp_server.h\",",
          "1410:         \"src/core/lib/iomgr/tcp_server_posix.cc\",",
          "1411:         \"src/core/lib/iomgr/tcp_server_utils_posix.h\",",
          "1412:         \"src/core/lib/iomgr/tcp_server_utils_posix_common.cc\",",
          "1413:         \"src/core/lib/iomgr/tcp_server_utils_posix_ifaddrs.cc\",",
          "1414:         \"src/core/lib/iomgr/tcp_server_utils_posix_noifaddrs.cc\",",
          "1415:         \"src/core/lib/iomgr/tcp_server_windows.cc\",",
          "1416:         \"src/core/lib/iomgr/tcp_windows.cc\",",
          "1417:         \"src/core/lib/iomgr/tcp_windows.h\",",
          "1418:         \"src/core/lib/iomgr/timer.cc\",",
          "1419:         \"src/core/lib/iomgr/timer.h\",",
          "1420:         \"src/core/lib/iomgr/timer_generic.cc\",",
          "1421:         \"src/core/lib/iomgr/timer_generic.h\",",
          "1422:         \"src/core/lib/iomgr/timer_heap.cc\",",
          "1423:         \"src/core/lib/iomgr/timer_heap.h\",",
          "1424:         \"src/core/lib/iomgr/timer_manager.cc\",",
          "1425:         \"src/core/lib/iomgr/timer_manager.h\",",
          "1426:         \"src/core/lib/iomgr/unix_sockets_posix.cc\",",
          "1427:         \"src/core/lib/iomgr/unix_sockets_posix.h\",",
          "1428:         \"src/core/lib/iomgr/unix_sockets_posix_noop.cc\",",
          "1429:         \"src/core/lib/iomgr/vsock.cc\",",
          "1430:         \"src/core/lib/iomgr/vsock.h\",",
          "1431:         \"src/core/lib/iomgr/wakeup_fd_eventfd.cc\",",
          "1432:         \"src/core/lib/iomgr/wakeup_fd_nospecial.cc\",",
          "1433:         \"src/core/lib/iomgr/wakeup_fd_pipe.cc\",",
          "1434:         \"src/core/lib/iomgr/wakeup_fd_pipe.h\",",
          "1435:         \"src/core/lib/iomgr/wakeup_fd_posix.cc\",",
          "1436:         \"src/core/lib/iomgr/wakeup_fd_posix.h\",",
          "1437:         \"src/core/lib/json/json.h\",",
          "1438:         \"src/core/lib/json/json_args.h\",",
          "1439:         \"src/core/lib/json/json_channel_args.h\",",
          "1440:         \"src/core/lib/json/json_object_loader.cc\",",
          "1441:         \"src/core/lib/json/json_object_loader.h\",",
          "1442:         \"src/core/lib/json/json_reader.cc\",",
          "1443:         \"src/core/lib/json/json_reader.h\",",
          "1444:         \"src/core/lib/json/json_util.cc\",",
          "1445:         \"src/core/lib/json/json_util.h\",",
          "1446:         \"src/core/lib/json/json_writer.cc\",",
          "1447:         \"src/core/lib/json/json_writer.h\",",
          "1448:         \"src/core/lib/load_balancing/delegating_helper.h\",",
          "1449:         \"src/core/lib/load_balancing/lb_policy.cc\",",
          "1450:         \"src/core/lib/load_balancing/lb_policy.h\",",
          "1451:         \"src/core/lib/load_balancing/lb_policy_factory.h\",",
          "1452:         \"src/core/lib/load_balancing/lb_policy_registry.cc\",",
          "1453:         \"src/core/lib/load_balancing/lb_policy_registry.h\",",
          "1454:         \"src/core/lib/load_balancing/subchannel_interface.h\",",
          "1455:         \"src/core/lib/matchers/matchers.cc\",",
          "1456:         \"src/core/lib/matchers/matchers.h\",",
          "1457:         \"src/core/lib/promise/activity.cc\",",
          "1458:         \"src/core/lib/promise/activity.h\",",
          "1459:         \"src/core/lib/promise/arena_promise.h\",",
          "1460:         \"src/core/lib/promise/cancel_callback.h\",",
          "1461:         \"src/core/lib/promise/context.h\",",
          "1462:         \"src/core/lib/promise/detail/basic_join.h\",",
          "1463:         \"src/core/lib/promise/detail/basic_seq.h\",",
          "1464:         \"src/core/lib/promise/detail/promise_factory.h\",",
          "1465:         \"src/core/lib/promise/detail/promise_like.h\",",
          "1466:         \"src/core/lib/promise/detail/status.h\",",
          "1467:         \"src/core/lib/promise/detail/switch.h\",",
          "1468:         \"src/core/lib/promise/exec_ctx_wakeup_scheduler.h\",",
          "1469:         \"src/core/lib/promise/for_each.h\",",
          "1470:         \"src/core/lib/promise/if.h\",",
          "1471:         \"src/core/lib/promise/interceptor_list.h\",",
          "1472:         \"src/core/lib/promise/latch.h\",",
          "1473:         \"src/core/lib/promise/loop.h\",",
          "1474:         \"src/core/lib/promise/map.h\",",
          "1475:         \"src/core/lib/promise/party.cc\",",
          "1476:         \"src/core/lib/promise/party.h\",",
          "1477:         \"src/core/lib/promise/pipe.h\",",
          "1478:         \"src/core/lib/promise/poll.h\",",
          "1479:         \"src/core/lib/promise/prioritized_race.h\",",
          "1480:         \"src/core/lib/promise/promise.h\",",
          "1481:         \"src/core/lib/promise/race.h\",",
          "1482:         \"src/core/lib/promise/seq.h\",",
          "1483:         \"src/core/lib/promise/sleep.cc\",",
          "1484:         \"src/core/lib/promise/sleep.h\",",
          "1485:         \"src/core/lib/promise/trace.cc\",",
          "1486:         \"src/core/lib/promise/trace.h\",",
          "1487:         \"src/core/lib/promise/try_join.h\",",
          "1488:         \"src/core/lib/promise/try_seq.h\",",
          "1489:         \"src/core/lib/resolver/resolver.cc\",",
          "1490:         \"src/core/lib/resolver/resolver.h\",",
          "1491:         \"src/core/lib/resolver/resolver_factory.h\",",
          "1492:         \"src/core/lib/resolver/resolver_registry.cc\",",
          "1493:         \"src/core/lib/resolver/resolver_registry.h\",",
          "1494:         \"src/core/lib/resolver/server_address.cc\",",
          "1495:         \"src/core/lib/resolver/server_address.h\",",
          "1496:         \"src/core/lib/resource_quota/api.cc\",",
          "1497:         \"src/core/lib/resource_quota/api.h\",",
          "1498:         \"src/core/lib/resource_quota/arena.cc\",",
          "1499:         \"src/core/lib/resource_quota/arena.h\",",
          "1500:         \"src/core/lib/resource_quota/memory_quota.cc\",",
          "1501:         \"src/core/lib/resource_quota/memory_quota.h\",",
          "1502:         \"src/core/lib/resource_quota/periodic_update.cc\",",
          "1503:         \"src/core/lib/resource_quota/periodic_update.h\",",
          "1504:         \"src/core/lib/resource_quota/resource_quota.cc\",",
          "1505:         \"src/core/lib/resource_quota/resource_quota.h\",",
          "1506:         \"src/core/lib/resource_quota/thread_quota.cc\",",
          "1507:         \"src/core/lib/resource_quota/thread_quota.h\",",
          "1508:         \"src/core/lib/resource_quota/trace.cc\",",
          "1509:         \"src/core/lib/resource_quota/trace.h\",",
          "1510:         \"src/core/lib/security/authorization/audit_logging.cc\",",
          "1511:         \"src/core/lib/security/authorization/audit_logging.h\",",
          "1512:         \"src/core/lib/security/authorization/authorization_engine.h\",",
          "1513:         \"src/core/lib/security/authorization/authorization_policy_provider.h\",",
          "1514:         \"src/core/lib/security/authorization/authorization_policy_provider_vtable.cc\",",
          "1515:         \"src/core/lib/security/authorization/evaluate_args.cc\",",
          "1516:         \"src/core/lib/security/authorization/evaluate_args.h\",",
          "1517:         \"src/core/lib/security/authorization/grpc_authorization_engine.cc\",",
          "1518:         \"src/core/lib/security/authorization/grpc_authorization_engine.h\",",
          "1519:         \"src/core/lib/security/authorization/grpc_authorization_policy_provider.cc\",",
          "1520:         \"src/core/lib/security/authorization/grpc_authorization_policy_provider.h\",",
          "1521:         \"src/core/lib/security/authorization/grpc_server_authz_filter.cc\",",
          "1522:         \"src/core/lib/security/authorization/grpc_server_authz_filter.h\",",
          "1523:         \"src/core/lib/security/authorization/matchers.cc\",",
          "1524:         \"src/core/lib/security/authorization/matchers.h\",",
          "1525:         \"src/core/lib/security/authorization/rbac_policy.cc\",",
          "1526:         \"src/core/lib/security/authorization/rbac_policy.h\",",
          "1527:         \"src/core/lib/security/authorization/rbac_translator.cc\",",
          "1528:         \"src/core/lib/security/authorization/rbac_translator.h\",",
          "1529:         \"src/core/lib/security/authorization/stdout_logger.cc\",",
          "1530:         \"src/core/lib/security/authorization/stdout_logger.h\",",
          "1531:         \"src/core/lib/security/certificate_provider/certificate_provider_factory.h\",",
          "1532:         \"src/core/lib/security/certificate_provider/certificate_provider_registry.cc\",",
          "1533:         \"src/core/lib/security/certificate_provider/certificate_provider_registry.h\",",
          "1534:         \"src/core/lib/security/context/security_context.cc\",",
          "1535:         \"src/core/lib/security/context/security_context.h\",",
          "1536:         \"src/core/lib/security/credentials/alts/alts_credentials.cc\",",
          "1537:         \"src/core/lib/security/credentials/alts/alts_credentials.h\",",
          "1538:         \"src/core/lib/security/credentials/alts/check_gcp_environment.cc\",",
          "1539:         \"src/core/lib/security/credentials/alts/check_gcp_environment.h\",",
          "1540:         \"src/core/lib/security/credentials/alts/check_gcp_environment_linux.cc\",",
          "1541:         \"src/core/lib/security/credentials/alts/check_gcp_environment_no_op.cc\",",
          "1542:         \"src/core/lib/security/credentials/alts/check_gcp_environment_windows.cc\",",
          "1543:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_client_options.cc\",",
          "1544:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_options.cc\",",
          "1545:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_options.h\",",
          "1546:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_server_options.cc\",",
          "1547:         \"src/core/lib/security/credentials/call_creds_util.cc\",",
          "1548:         \"src/core/lib/security/credentials/call_creds_util.h\",",
          "1549:         \"src/core/lib/security/credentials/channel_creds_registry.h\",",
          "1550:         \"src/core/lib/security/credentials/channel_creds_registry_init.cc\",",
          "1551:         \"src/core/lib/security/credentials/composite/composite_credentials.cc\",",
          "1552:         \"src/core/lib/security/credentials/composite/composite_credentials.h\",",
          "1553:         \"src/core/lib/security/credentials/credentials.cc\",",
          "1554:         \"src/core/lib/security/credentials/credentials.h\",",
          "1555:         \"src/core/lib/security/credentials/external/aws_external_account_credentials.cc\",",
          "1556:         \"src/core/lib/security/credentials/external/aws_external_account_credentials.h\",",
          "1557:         \"src/core/lib/security/credentials/external/aws_request_signer.cc\",",
          "1558:         \"src/core/lib/security/credentials/external/aws_request_signer.h\",",
          "1559:         \"src/core/lib/security/credentials/external/external_account_credentials.cc\",",
          "1560:         \"src/core/lib/security/credentials/external/external_account_credentials.h\",",
          "1561:         \"src/core/lib/security/credentials/external/file_external_account_credentials.cc\",",
          "1562:         \"src/core/lib/security/credentials/external/file_external_account_credentials.h\",",
          "1563:         \"src/core/lib/security/credentials/external/url_external_account_credentials.cc\",",
          "1564:         \"src/core/lib/security/credentials/external/url_external_account_credentials.h\",",
          "1565:         \"src/core/lib/security/credentials/fake/fake_credentials.cc\",",
          "1566:         \"src/core/lib/security/credentials/fake/fake_credentials.h\",",
          "1567:         \"src/core/lib/security/credentials/google_default/credentials_generic.cc\",",
          "1568:         \"src/core/lib/security/credentials/google_default/google_default_credentials.cc\",",
          "1569:         \"src/core/lib/security/credentials/google_default/google_default_credentials.h\",",
          "1570:         \"src/core/lib/security/credentials/iam/iam_credentials.cc\",",
          "1571:         \"src/core/lib/security/credentials/iam/iam_credentials.h\",",
          "1572:         \"src/core/lib/security/credentials/insecure/insecure_credentials.cc\",",
          "1573:         \"src/core/lib/security/credentials/insecure/insecure_credentials.h\",",
          "1574:         \"src/core/lib/security/credentials/jwt/json_token.cc\",",
          "1575:         \"src/core/lib/security/credentials/jwt/json_token.h\",",
          "1576:         \"src/core/lib/security/credentials/jwt/jwt_credentials.cc\",",
          "1577:         \"src/core/lib/security/credentials/jwt/jwt_credentials.h\",",
          "1578:         \"src/core/lib/security/credentials/jwt/jwt_verifier.cc\",",
          "1579:         \"src/core/lib/security/credentials/jwt/jwt_verifier.h\",",
          "1580:         \"src/core/lib/security/credentials/local/local_credentials.cc\",",
          "1581:         \"src/core/lib/security/credentials/local/local_credentials.h\",",
          "1582:         \"src/core/lib/security/credentials/oauth2/oauth2_credentials.cc\",",
          "1583:         \"src/core/lib/security/credentials/oauth2/oauth2_credentials.h\",",
          "1584:         \"src/core/lib/security/credentials/plugin/plugin_credentials.cc\",",
          "1585:         \"src/core/lib/security/credentials/plugin/plugin_credentials.h\",",
          "1586:         \"src/core/lib/security/credentials/ssl/ssl_credentials.cc\",",
          "1587:         \"src/core/lib/security/credentials/ssl/ssl_credentials.h\",",
          "1588:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_distributor.cc\",",
          "1589:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_distributor.h\",",
          "1590:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.cc\",",
          "1591:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.h\",",
          "1592:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_verifier.cc\",",
          "1593:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_verifier.h\",",
          "1594:         \"src/core/lib/security/credentials/tls/grpc_tls_credentials_options.cc\",",
          "1595:         \"src/core/lib/security/credentials/tls/grpc_tls_credentials_options.h\",",
          "1596:         \"src/core/lib/security/credentials/tls/tls_credentials.cc\",",
          "1597:         \"src/core/lib/security/credentials/tls/tls_credentials.h\",",
          "1598:         \"src/core/lib/security/credentials/tls/tls_utils.cc\",",
          "1599:         \"src/core/lib/security/credentials/tls/tls_utils.h\",",
          "1600:         \"src/core/lib/security/credentials/xds/xds_credentials.cc\",",
          "1601:         \"src/core/lib/security/credentials/xds/xds_credentials.h\",",
          "1602:         \"src/core/lib/security/security_connector/alts/alts_security_connector.cc\",",
          "1603:         \"src/core/lib/security/security_connector/alts/alts_security_connector.h\",",
          "1604:         \"src/core/lib/security/security_connector/fake/fake_security_connector.cc\",",
          "1605:         \"src/core/lib/security/security_connector/fake/fake_security_connector.h\",",
          "1606:         \"src/core/lib/security/security_connector/insecure/insecure_security_connector.cc\",",
          "1607:         \"src/core/lib/security/security_connector/insecure/insecure_security_connector.h\",",
          "1608:         \"src/core/lib/security/security_connector/load_system_roots.h\",",
          "1609:         \"src/core/lib/security/security_connector/load_system_roots_fallback.cc\",",
          "1610:         \"src/core/lib/security/security_connector/load_system_roots_supported.cc\",",
          "1611:         \"src/core/lib/security/security_connector/load_system_roots_supported.h\",",
          "1612:         \"src/core/lib/security/security_connector/local/local_security_connector.cc\",",
          "1613:         \"src/core/lib/security/security_connector/local/local_security_connector.h\",",
          "1614:         \"src/core/lib/security/security_connector/security_connector.cc\",",
          "1615:         \"src/core/lib/security/security_connector/security_connector.h\",",
          "1616:         \"src/core/lib/security/security_connector/ssl/ssl_security_connector.cc\",",
          "1617:         \"src/core/lib/security/security_connector/ssl/ssl_security_connector.h\",",
          "1618:         \"src/core/lib/security/security_connector/ssl_utils.cc\",",
          "1619:         \"src/core/lib/security/security_connector/ssl_utils.h\",",
          "1620:         \"src/core/lib/security/security_connector/tls/tls_security_connector.cc\",",
          "1621:         \"src/core/lib/security/security_connector/tls/tls_security_connector.h\",",
          "1622:         \"src/core/lib/security/transport/auth_filters.h\",",
          "1623:         \"src/core/lib/security/transport/client_auth_filter.cc\",",
          "1624:         \"src/core/lib/security/transport/secure_endpoint.cc\",",
          "1625:         \"src/core/lib/security/transport/secure_endpoint.h\",",
          "1626:         \"src/core/lib/security/transport/security_handshaker.cc\",",
          "1627:         \"src/core/lib/security/transport/security_handshaker.h\",",
          "1628:         \"src/core/lib/security/transport/server_auth_filter.cc\",",
          "1629:         \"src/core/lib/security/transport/tsi_error.cc\",",
          "1630:         \"src/core/lib/security/transport/tsi_error.h\",",
          "1631:         \"src/core/lib/security/util/json_util.cc\",",
          "1632:         \"src/core/lib/security/util/json_util.h\",",
          "1633:         \"src/core/lib/service_config/service_config.h\",",
          "1634:         \"src/core/lib/service_config/service_config_call_data.h\",",
          "1635:         \"src/core/lib/service_config/service_config_impl.cc\",",
          "1636:         \"src/core/lib/service_config/service_config_impl.h\",",
          "1637:         \"src/core/lib/service_config/service_config_parser.cc\",",
          "1638:         \"src/core/lib/service_config/service_config_parser.h\",",
          "1639:         \"src/core/lib/slice/b64.cc\",",
          "1640:         \"src/core/lib/slice/b64.h\",",
          "1641:         \"src/core/lib/slice/percent_encoding.cc\",",
          "1642:         \"src/core/lib/slice/percent_encoding.h\",",
          "1643:         \"src/core/lib/slice/slice.cc\",",
          "1644:         \"src/core/lib/slice/slice.h\",",
          "1645:         \"src/core/lib/slice/slice_buffer.cc\",",
          "1646:         \"src/core/lib/slice/slice_buffer.h\",",
          "1647:         \"src/core/lib/slice/slice_internal.h\",",
          "1648:         \"src/core/lib/slice/slice_refcount.cc\",",
          "1649:         \"src/core/lib/slice/slice_refcount.h\",",
          "1650:         \"src/core/lib/slice/slice_string_helpers.cc\",",
          "1651:         \"src/core/lib/slice/slice_string_helpers.h\",",
          "1652:         \"src/core/lib/surface/api_trace.cc\",",
          "1653:         \"src/core/lib/surface/api_trace.h\",",
          "1654:         \"src/core/lib/surface/builtins.cc\",",
          "1655:         \"src/core/lib/surface/builtins.h\",",
          "1656:         \"src/core/lib/surface/byte_buffer.cc\",",
          "1657:         \"src/core/lib/surface/byte_buffer_reader.cc\",",
          "1658:         \"src/core/lib/surface/call.cc\",",
          "1659:         \"src/core/lib/surface/call.h\",",
          "1660:         \"src/core/lib/surface/call_details.cc\",",
          "1661:         \"src/core/lib/surface/call_log_batch.cc\",",
          "1662:         \"src/core/lib/surface/call_test_only.h\",",
          "1663:         \"src/core/lib/surface/call_trace.cc\",",
          "1664:         \"src/core/lib/surface/call_trace.h\",",
          "1665:         \"src/core/lib/surface/channel.cc\",",
          "1666:         \"src/core/lib/surface/channel.h\",",
          "1667:         \"src/core/lib/surface/channel_init.cc\",",
          "1668:         \"src/core/lib/surface/channel_init.h\",",
          "1669:         \"src/core/lib/surface/channel_ping.cc\",",
          "1670:         \"src/core/lib/surface/channel_stack_type.cc\",",
          "1671:         \"src/core/lib/surface/channel_stack_type.h\",",
          "1672:         \"src/core/lib/surface/completion_queue.cc\",",
          "1673:         \"src/core/lib/surface/completion_queue.h\",",
          "1674:         \"src/core/lib/surface/completion_queue_factory.cc\",",
          "1675:         \"src/core/lib/surface/completion_queue_factory.h\",",
          "1676:         \"src/core/lib/surface/event_string.cc\",",
          "1677:         \"src/core/lib/surface/event_string.h\",",
          "1678:         \"src/core/lib/surface/init.cc\",",
          "1679:         \"src/core/lib/surface/init.h\",",
          "1680:         \"src/core/lib/surface/init_internally.cc\",",
          "1681:         \"src/core/lib/surface/init_internally.h\",",
          "1682:         \"src/core/lib/surface/lame_client.cc\",",
          "1683:         \"src/core/lib/surface/lame_client.h\",",
          "1684:         \"src/core/lib/surface/metadata_array.cc\",",
          "1685:         \"src/core/lib/surface/server.cc\",",
          "1686:         \"src/core/lib/surface/server.h\",",
          "1687:         \"src/core/lib/surface/validate_metadata.cc\",",
          "1688:         \"src/core/lib/surface/validate_metadata.h\",",
          "1689:         \"src/core/lib/surface/version.cc\",",
          "1690:         \"src/core/lib/transport/batch_builder.cc\",",
          "1691:         \"src/core/lib/transport/batch_builder.h\",",
          "1692:         \"src/core/lib/transport/bdp_estimator.cc\",",
          "1693:         \"src/core/lib/transport/bdp_estimator.h\",",
          "1694:         \"src/core/lib/transport/connectivity_state.cc\",",
          "1695:         \"src/core/lib/transport/connectivity_state.h\",",
          "1696:         \"src/core/lib/transport/custom_metadata.h\",",
          "1697:         \"src/core/lib/transport/error_utils.cc\",",
          "1698:         \"src/core/lib/transport/error_utils.h\",",
          "1699:         \"src/core/lib/transport/handshaker.cc\",",
          "1700:         \"src/core/lib/transport/handshaker.h\",",
          "1701:         \"src/core/lib/transport/handshaker_factory.h\",",
          "1702:         \"src/core/lib/transport/handshaker_registry.cc\",",
          "1703:         \"src/core/lib/transport/handshaker_registry.h\",",
          "1704:         \"src/core/lib/transport/http2_errors.h\",",
          "1705:         \"src/core/lib/transport/http_connect_handshaker.cc\",",
          "1706:         \"src/core/lib/transport/http_connect_handshaker.h\",",
          "1707:         \"src/core/lib/transport/metadata_batch.cc\",",
          "1708:         \"src/core/lib/transport/metadata_batch.h\",",
          "1709:         \"src/core/lib/transport/metadata_compression_traits.h\",",
          "1710:         \"src/core/lib/transport/parsed_metadata.cc\",",
          "1711:         \"src/core/lib/transport/parsed_metadata.h\",",
          "1712:         \"src/core/lib/transport/pid_controller.cc\",",
          "1713:         \"src/core/lib/transport/pid_controller.h\",",
          "1714:         \"src/core/lib/transport/simple_slice_based_metadata.h\",",
          "1715:         \"src/core/lib/transport/status_conversion.cc\",",
          "1716:         \"src/core/lib/transport/status_conversion.h\",",
          "1717:         \"src/core/lib/transport/tcp_connect_handshaker.cc\",",
          "1718:         \"src/core/lib/transport/tcp_connect_handshaker.h\",",
          "1719:         \"src/core/lib/transport/timeout_encoding.cc\",",
          "1720:         \"src/core/lib/transport/timeout_encoding.h\",",
          "1721:         \"src/core/lib/transport/transport.cc\",",
          "1722:         \"src/core/lib/transport/transport.h\",",
          "1723:         \"src/core/lib/transport/transport_fwd.h\",",
          "1724:         \"src/core/lib/transport/transport_impl.h\",",
          "1725:         \"src/core/lib/transport/transport_op_string.cc\",",
          "1726:         \"src/core/lib/uri/uri_parser.cc\",",
          "1727:         \"src/core/lib/uri/uri_parser.h\",",
          "1728: >>>>>>> 415f2f9ee3 ([Core] Improve HPACK (#33597))",
          "",
          "---------------"
        ],
        "config.m4||config.m4": [
          "File: config.m4 -> config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     src/core/ext/transport/chttp2/transport/frame_window_update.cc \\",
          "138:     src/core/ext/transport/chttp2/transport/hpack_encoder.cc \\",
          "139:     src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "140:     src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "141:     src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "142:     src/core/ext/transport/chttp2/transport/http2_settings.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "",
          "---------------"
        ],
        "config.w32||config.w32": [
          "File: config.w32 -> config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\frame_window_update.cc \" +",
          "103:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_encoder.cc \" +",
          "104:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_encoder_table.cc \" +",
          "105:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parser.cc \" +",
          "106:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parser_table.cc \" +",
          "107:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\http2_settings.cc \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parse_result.cc \" +",
          "",
          "---------------"
        ],
        "gRPC-C++.podspec||gRPC-C++.podspec": [
          "File: gRPC-C++.podspec -> gRPC-C++.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:                       'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "366:                       'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "367:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "368:                       'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "369:                       'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "370:                       'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1390:                               'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "1391:                               'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "1392:                               'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "1393:                               'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "1394:                               'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "1395:                               'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394:                               'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------"
        ],
        "gRPC-Core.podspec||gRPC-Core.podspec": [
          "File: gRPC-Core.podspec -> gRPC-Core.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:                       'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "392:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "393:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "394:                       'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "395:                       'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "396:                       'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "395:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2107:                               'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "2108:                               'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "2109:                               'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "2110:                               'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "2111:                               'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "2112:                               'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2112:                               'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------"
        ],
        "grpc.gemspec||grpc.gemspec": [
          "File: grpc.gemspec -> grpc.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder.h )",
          "298:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc )",
          "299:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder_table.h )",
          "300:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser.cc )",
          "301:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser.h )",
          "302:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser_table.cc )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parse_result.cc )",
          "301:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parse_result.h )",
          "",
          "---------------"
        ],
        "grpc.gyp||grpc.gyp": [
          "File: grpc.gyp -> grpc.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:         'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "362:         'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "363:         'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "364:         'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "365:         'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "366:         'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:         'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1164:         'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "1165:         'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "1166:         'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "1167:         'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "1168:         'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "1169:         'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1168:         'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc||src/core/ext/transport/chttp2/transport/hpack_parse_result.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc -> src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <grpc/support/port_platform.h>",
          "17: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "19: #include <stddef.h>",
          "21: #include <initializer_list>",
          "23: #include \"absl/strings/str_format.h\"",
          "25: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "26: #include \"src/core/lib/gprpp/status_helper.h\"",
          "27: #include \"src/core/lib/iomgr/error.h\"",
          "28: #include \"src/core/lib/slice/slice.h\"",
          "30: namespace grpc_core {",
          "32: namespace {",
          "33: class MetadataSizeLimitExceededEncoder {",
          "34:  public:",
          "35:   explicit MetadataSizeLimitExceededEncoder(std::string& summary)",
          "36:       : summary_(summary) {}",
          "38:   void Encode(const Slice& key, const Slice& value) {",
          "39:     AddToSummary(key.as_string_view(), value.size());",
          "40:   }",
          "42:   template <typename Key, typename Value>",
          "43:   void Encode(Key, const Value& value) {",
          "44:     AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "45:   }",
          "47:  private:",
          "48:   void AddToSummary(absl::string_view key,",
          "49:                     size_t value_length) GPR_ATTRIBUTE_NOINLINE {",
          "50:     absl::StrAppend(&summary_, \" \", key, \":\",",
          "51:                     hpack_constants::SizeForEntry(key.size(), value_length),",
          "52:                     \"B\");",
          "53:   }",
          "54:   std::string& summary_;",
          "55: };",
          "57: absl::Status MakeStreamError(absl::Status error) {",
          "58:   GPR_DEBUG_ASSERT(!error.ok());",
          "59:   return grpc_error_set_int(std::move(error), StatusIntProperty::kStreamId, 0);",
          "60: }",
          "61: }  // namespace",
          "63: absl::Status HpackParseResult::Materialize() const {",
          "64:   if (materialized_status_.has_value()) return *materialized_status_;",
          "65:   materialized_status_ = BuildMaterialized();",
          "66:   return *materialized_status_;",
          "67: }",
          "69: absl::Status HpackParseResult::BuildMaterialized() const {",
          "70:   switch (status_.get()) {",
          "71:     case HpackParseStatus::kOk:",
          "72:       return absl::OkStatus();",
          "73:     case HpackParseStatus::kEof:",
          "74:       Crash(\"Materialize() called on EOF\");",
          "75:       break;",
          "76:     case HpackParseStatus::kMovedFrom:",
          "77:       Crash(\"Materialize() called on moved-from object\");",
          "78:       break;",
          "79:     case HpackParseStatus::kInvalidMetadata:",
          "80:       if (key_.empty()) {",
          "81:         return MakeStreamError(absl::InternalError(",
          "82:             ValidateMetadataResultToString(validate_metadata_result_)));",
          "83:       } else {",
          "84:         return MakeStreamError(absl::InternalError(absl::StrCat(",
          "85:             ValidateMetadataResultToString(validate_metadata_result_), \": \",",
          "86:             key_)));",
          "87:       }",
          "88:     case HpackParseStatus::kSoftMetadataLimitExceeded:",
          "89:     case HpackParseStatus::kHardMetadataLimitExceeded: {",
          "90:       const auto& e = metadata_limit_exceeded_;",
          "93:       std::string summary;",
          "94:       if (e.prior != nullptr) {",
          "95:         MetadataSizeLimitExceededEncoder encoder(summary);",
          "96:         e.prior->Encode(&encoder);",
          "97:       }",
          "98:       return MakeStreamError(absl::ResourceExhaustedError(absl::StrCat(",
          "99:           \"received metadata size exceeds \",",
          "100:           status_.get() == HpackParseStatus::kSoftMetadataLimitExceeded",
          "101:               ? \"soft\"",
          "102:               : \"hard\",",
          "103:           \" limit (\", e.frame_length, \" vs. \", e.limit, \")\",",
          "104:           summary.empty() ? \"\" : \"; \", summary)));",
          "105:     }",
          "106:     case HpackParseStatus::kHardMetadataLimitExceededByKey: {",
          "107:       const auto& e = metadata_limit_exceeded_by_atom_;",
          "108:       return MakeStreamError(absl::ResourceExhaustedError(",
          "109:           absl::StrCat(\"received metadata size exceeds hard limit (key length \",",
          "110:                        e.atom_length, \" vs. \", e.limit, \")\")));",
          "111:     }",
          "112:     case HpackParseStatus::kHardMetadataLimitExceededByValue: {",
          "113:       const auto& e = metadata_limit_exceeded_by_atom_;",
          "114:       return MakeStreamError(absl::ResourceExhaustedError(absl::StrCat(",
          "115:           \"received metadata size exceeds hard limit (value length \",",
          "116:           e.atom_length, \" vs. \", e.limit, \")\")));",
          "117:     }",
          "118:     case HpackParseStatus::kMetadataParseError:",
          "119:       if (!key_.empty()) {",
          "120:         return MakeStreamError(absl::InternalError(",
          "121:             absl::StrCat(\"Error parsing '\", key_, \"' metadata\")));",
          "122:       } else {",
          "123:         return MakeStreamError(absl::InternalError(\"Error parsing metadata\"));",
          "124:       }",
          "125:     case HpackParseStatus::kUnbase64Failed:",
          "126:       if (!key_.empty()) {",
          "127:         return MakeStreamError(absl::InternalError(absl::StrCat(",
          "128:             \"Error parsing '\", key_, \"' metadata: illegal base64 encoding\")));",
          "129:       } else {",
          "130:         return MakeStreamError(absl::InternalError(",
          "131:             absl::StrCat(\"Failed base64 decoding metadata\")));",
          "132:       }",
          "133:     case HpackParseStatus::kIncompleteHeaderAtBoundary:",
          "134:       return absl::InternalError(",
          "135:           \"Incomplete header at the end of a header/continuation sequence\");",
          "136:     case HpackParseStatus::kVarintOutOfRange:",
          "137:       return absl::InternalError(absl::StrFormat(",
          "138:           \"integer overflow in hpack integer decoding: have 0x%08x, \"",
          "139:           \"got byte 0x%02x\",",
          "140:           varint_out_of_range_.value, varint_out_of_range_.last_byte));",
          "141:     case HpackParseStatus::kIllegalTableSizeChange:",
          "142:       return absl::InternalError(absl::StrCat(",
          "143:           \"Attempt to make hpack table \", illegal_table_size_change_.new_size,",
          "144:           \" bytes when max is \", illegal_table_size_change_.max_size,",
          "145:           \" bytes\"));",
          "146:     case HpackParseStatus::kAddBeforeTableSizeUpdated:",
          "147:       return absl::InternalError(",
          "148:           absl::StrCat(\"HPACK max table size reduced to \",",
          "149:                        illegal_table_size_change_.new_size,",
          "150:                        \" but not reflected by hpack stream (still at \",",
          "151:                        illegal_table_size_change_.max_size, \")\"));",
          "152:     case HpackParseStatus::kParseHuffFailed:",
          "153:       if (!key_.empty()) {",
          "154:         return absl::InternalError(",
          "155:             absl::StrCat(\"Failed huffman decoding '\", key_, \"' metadata\"));",
          "156:       } else {",
          "157:         return absl::InternalError(",
          "158:             absl::StrCat(\"Failed huffman decoding metadata\"));",
          "159:       }",
          "160:       break;",
          "161:     case HpackParseStatus::kTooManyDynamicTableSizeChanges:",
          "162:       return absl::InternalError(",
          "163:           \"More than two max table size changes in a single frame\");",
          "164:     case HpackParseStatus::kMaliciousVarintEncoding:",
          "165:       return absl::InternalError(",
          "166:           \"Malicious varint encoding detected in HPACK stream\");",
          "167:     case HpackParseStatus::kInvalidHpackIndex:",
          "168:       return absl::InternalError(absl::StrFormat(",
          "169:           \"Invalid HPACK index received (%d)\", invalid_hpack_index_));",
          "170:     case HpackParseStatus::kIllegalHpackOpCode:",
          "171:       return absl::InternalError(\"Illegal hpack op code\");",
          "172:   }",
          "173:   GPR_UNREACHABLE_CODE(return absl::UnknownError(\"Should never reach here\"));",
          "174: }",
          "176: }  // namespace grpc_core",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parse_result.h||src/core/ext/transport/chttp2/transport/hpack_parse_result.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parse_result.h -> src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #ifndef GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "16: #define GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "18: #include <grpc/support/port_platform.h>",
          "20: #include <stdint.h>",
          "22: #include <string>",
          "23: #include <utility>",
          "25: #include \"absl/status/status.h\"",
          "26: #include \"absl/strings/str_cat.h\"",
          "27: #include \"absl/strings/string_view.h\"",
          "28: #include \"absl/types/optional.h\"",
          "30: #include <grpc/support/log.h>",
          "32: #include \"src/core/lib/gprpp/crash.h\"",
          "33: #include \"src/core/lib/surface/validate_metadata.h\"",
          "34: #include \"src/core/lib/transport/metadata_batch.h\"",
          "36: namespace grpc_core {",
          "40: enum class HpackParseStatus : uint8_t {",
          "45:   kOk,",
          "47:   kEof,",
          "50:   kMovedFrom,",
          "60:   kFirstStreamError,",
          "61:   kInvalidMetadata = kFirstStreamError,",
          "63:   kHardMetadataLimitExceeded,",
          "64:   kSoftMetadataLimitExceeded,",
          "66:   kHardMetadataLimitExceededByKey,",
          "68:   kHardMetadataLimitExceededByValue,",
          "69:   kMetadataParseError,",
          "71:   kUnbase64Failed,",
          "80:   kFirstConnectionError,",
          "82:   kIncompleteHeaderAtBoundary = kFirstConnectionError,",
          "84:   kVarintOutOfRange,",
          "86:   kInvalidHpackIndex,",
          "88:   kIllegalTableSizeChange,",
          "90:   kAddBeforeTableSizeUpdated,",
          "92:   kParseHuffFailed,",
          "94:   kTooManyDynamicTableSizeChanges,",
          "102:   kMaliciousVarintEncoding,",
          "104:   kIllegalHpackOpCode,",
          "105: };",
          "107: inline bool IsStreamError(HpackParseStatus status) {",
          "108:   return status >= HpackParseStatus::kFirstStreamError &&",
          "109:          status < HpackParseStatus::kFirstConnectionError;",
          "110: }",
          "112: inline bool IsConnectionError(HpackParseStatus status) {",
          "113:   return status >= HpackParseStatus::kFirstConnectionError;",
          "114: }",
          "116: inline bool IsEphemeralError(HpackParseStatus status) {",
          "117:   switch (status) {",
          "118:     case HpackParseStatus::kSoftMetadataLimitExceeded:",
          "119:     case HpackParseStatus::kHardMetadataLimitExceeded:",
          "120:       return true;",
          "121:     default:",
          "122:       return false;",
          "123:   }",
          "124: }",
          "126: class HpackParseResult {",
          "127:  public:",
          "128:   HpackParseResult() : HpackParseResult{HpackParseStatus::kOk} {}",
          "130:   bool ok() const { return status_.get() == HpackParseStatus::kOk; }",
          "131:   bool stream_error() const { return IsStreamError(status_.get()); }",
          "132:   bool connection_error() const { return IsConnectionError(status_.get()); }",
          "133:   bool ephemeral() const { return IsEphemeralError(status_.get()); }",
          "135:   HpackParseResult PersistentStreamErrorOrOk() const {",
          "136:     if (connection_error() || ephemeral()) return HpackParseResult();",
          "137:     return *this;",
          "138:   }",
          "140:   static HpackParseResult FromStatus(HpackParseStatus status) {",
          "143:     switch (status) {",
          "144:       case HpackParseStatus::kUnbase64Failed:",
          "145:       case HpackParseStatus::kParseHuffFailed:",
          "146:         return HpackParseResult{status};",
          "147:       default:",
          "148:         Crash(",
          "149:             absl::StrCat(\"Invalid HpackParseStatus for FromStatus: \", status));",
          "150:     }",
          "151:   }",
          "153:   static HpackParseResult FromStatusWithKey(HpackParseStatus status,",
          "154:                                             absl::string_view key) {",
          "155:     auto r = FromStatus(status);",
          "156:     r.key_ = std::string(key);",
          "157:     return r;",
          "158:   }",
          "160:   static HpackParseResult MetadataParseError(absl::string_view key) {",
          "161:     HpackParseResult r{HpackParseStatus::kMetadataParseError};",
          "162:     r.key_ = std::string(key);",
          "163:     return r;",
          "164:   }",
          "166:   static HpackParseResult AddBeforeTableSizeUpdated(uint32_t current_size,",
          "167:                                                     uint32_t max_size) {",
          "168:     HpackParseResult p{HpackParseStatus::kAddBeforeTableSizeUpdated};",
          "169:     p.illegal_table_size_change_ =",
          "170:         IllegalTableSizeChange{current_size, max_size};",
          "171:     return p;",
          "172:   }",
          "174:   static HpackParseResult MaliciousVarintEncodingError() {",
          "175:     return HpackParseResult{HpackParseStatus::kMaliciousVarintEncoding};",
          "176:   }",
          "178:   static HpackParseResult IllegalHpackOpCode() {",
          "179:     return HpackParseResult{HpackParseStatus::kIllegalHpackOpCode};",
          "180:   }",
          "182:   static HpackParseResult InvalidMetadataError(ValidateMetadataResult result,",
          "183:                                                absl::string_view key) {",
          "184:     GPR_DEBUG_ASSERT(result != ValidateMetadataResult::kOk);",
          "185:     HpackParseResult p{HpackParseStatus::kInvalidMetadata};",
          "186:     p.key_ = std::string(key);",
          "187:     p.validate_metadata_result_ = result;",
          "188:     return p;",
          "189:   }",
          "191:   static HpackParseResult IncompleteHeaderAtBoundaryError() {",
          "192:     return HpackParseResult{HpackParseStatus::kIncompleteHeaderAtBoundary};",
          "193:   }",
          "195:   static HpackParseResult VarintOutOfRangeError(uint32_t value,",
          "196:                                                 uint8_t last_byte) {",
          "197:     HpackParseResult p{HpackParseStatus::kVarintOutOfRange};",
          "198:     p.varint_out_of_range_ = VarintOutOfRange{last_byte, value};",
          "199:     return p;",
          "200:   }",
          "202:   static HpackParseResult InvalidHpackIndexError(uint32_t index) {",
          "203:     HpackParseResult p{HpackParseStatus::kInvalidHpackIndex};",
          "204:     p.invalid_hpack_index_ = index;",
          "205:     return p;",
          "206:   }",
          "208:   static HpackParseResult IllegalTableSizeChangeError(uint32_t new_size,",
          "209:                                                       uint32_t max_size) {",
          "210:     HpackParseResult p{HpackParseStatus::kIllegalTableSizeChange};",
          "211:     p.illegal_table_size_change_ = IllegalTableSizeChange{new_size, max_size};",
          "212:     return p;",
          "213:   }",
          "215:   static HpackParseResult TooManyDynamicTableSizeChangesError() {",
          "216:     return HpackParseResult{HpackParseStatus::kTooManyDynamicTableSizeChanges};",
          "217:   }",
          "219:   static HpackParseResult SoftMetadataLimitExceededError(",
          "220:       grpc_metadata_batch* metadata, uint32_t frame_length, uint32_t limit) {",
          "221:     HpackParseResult p{HpackParseStatus::kSoftMetadataLimitExceeded};",
          "222:     p.metadata_limit_exceeded_ =",
          "223:         MetadataLimitExceeded{frame_length, limit, metadata};",
          "224:     return p;",
          "225:   }",
          "227:   static HpackParseResult HardMetadataLimitExceededError(",
          "228:       grpc_metadata_batch* metadata, uint32_t frame_length, uint32_t limit) {",
          "229:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceeded};",
          "230:     p.metadata_limit_exceeded_ =",
          "231:         MetadataLimitExceeded{frame_length, limit, metadata};",
          "232:     return p;",
          "233:   }",
          "235:   static HpackParseResult HardMetadataLimitExceededByKeyError(",
          "236:       uint32_t key_length, uint32_t limit) {",
          "237:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceededByKey};",
          "238:     p.metadata_limit_exceeded_by_atom_ =",
          "239:         MetadataLimitExceededByAtom{key_length, limit};",
          "240:     return p;",
          "241:   }",
          "243:   static HpackParseResult HardMetadataLimitExceededByValueError(",
          "244:       absl::string_view key, uint32_t value_length, uint32_t limit) {",
          "245:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceededByValue};",
          "246:     p.metadata_limit_exceeded_by_atom_ =",
          "247:         MetadataLimitExceededByAtom{value_length, limit};",
          "248:     p.key_ = std::string(key);",
          "249:     return p;",
          "250:   }",
          "254:   absl::Status Materialize() const;",
          "256:  private:",
          "257:   explicit HpackParseResult(HpackParseStatus status) : status_(status) {}",
          "258:   absl::Status BuildMaterialized() const;",
          "260:   struct VarintOutOfRange {",
          "261:     uint8_t last_byte;",
          "262:     uint32_t value;",
          "263:   };",
          "265:   struct MetadataLimitExceeded {",
          "266:     uint32_t frame_length;",
          "267:     uint32_t limit;",
          "268:     grpc_metadata_batch* prior;",
          "269:   };",
          "273:   struct MetadataLimitExceededByAtom {",
          "274:     uint32_t atom_length;",
          "275:     uint32_t limit;",
          "276:   };",
          "278:   struct IllegalTableSizeChange {",
          "279:     uint32_t new_size;",
          "280:     uint32_t max_size;",
          "281:   };",
          "283:   class StatusWrapper {",
          "284:    public:",
          "285:     explicit StatusWrapper(HpackParseStatus status) : status_(status) {}",
          "287:     StatusWrapper(const StatusWrapper&) = default;",
          "288:     StatusWrapper& operator=(const StatusWrapper&) = default;",
          "289:     StatusWrapper(StatusWrapper&& other) noexcept",
          "290:         : status_(std::exchange(other.status_, HpackParseStatus::kMovedFrom)) {}",
          "291:     StatusWrapper& operator=(StatusWrapper&& other) noexcept {",
          "292:       status_ = std::exchange(other.status_, HpackParseStatus::kMovedFrom);",
          "293:       return *this;",
          "294:     }",
          "296:     HpackParseStatus get() const { return status_; }",
          "298:    private:",
          "299:     HpackParseStatus status_;",
          "300:   };",
          "302:   StatusWrapper status_;",
          "303:   union {",
          "305:     ValidateMetadataResult validate_metadata_result_;",
          "307:     VarintOutOfRange varint_out_of_range_;",
          "309:     uint32_t invalid_hpack_index_;",
          "312:     MetadataLimitExceeded metadata_limit_exceeded_;",
          "315:     MetadataLimitExceededByAtom metadata_limit_exceeded_by_atom_;",
          "317:     IllegalTableSizeChange illegal_table_size_change_;",
          "318:   };",
          "319:   std::string key_;",
          "320:   mutable absl::optional<absl::Status> materialized_status_;",
          "321: };",
          "323: }  // namespace grpc_core",
          "325: #endif  // GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdlib.h>",
          "26: #include <algorithm>",
          "28: #include <string>",
          "29: #include <utility>",
          "",
          "[Removed Lines]",
          "27: #include <initializer_list>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"absl/status/status.h\"",
          "33: #include \"absl/strings/match.h\"",
          "34: #include \"absl/strings/str_cat.h\"",
          "36: #include \"absl/strings/string_view.h\"",
          "37: #include \"absl/types/optional.h\"",
          "38: #include \"absl/types/span.h\"",
          "39: #include \"absl/types/variant.h\"",
          "41: #include <grpc/support/log.h>",
          "43: #include \"src/core/ext/transport/chttp2/transport/decode_huff.h\"",
          "44: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "45: #include \"src/core/lib/debug/stats.h\"",
          "46: #include \"src/core/lib/debug/stats_data.h\"",
          "47: #include \"src/core/lib/debug/trace.h\"",
          "50: #include \"src/core/lib/slice/slice.h\"",
          "51: #include \"src/core/lib/slice/slice_refcount.h\"",
          "52: #include \"src/core/lib/surface/validate_metadata.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"absl/strings/str_format.h\"",
          "48: #include \"src/core/lib/gprpp/crash.h\"",
          "49: #include \"src/core/lib/gprpp/status_helper.h\"",
          "",
          "[Added Lines]",
          "39: #include <grpc/slice.h>",
          "44: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "45: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "49: #include \"src/core/lib/gprpp/match.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: constexpr Base64InverseTable kBase64InverseTable;",
          "118: }  // namespace",
          "",
          "[Removed Lines]",
          "85: absl::Status EnsureStreamError(absl::Status error) {",
          "86:   if (error.ok()) return error;",
          "87:   return grpc_error_set_int(std::move(error), StatusIntProperty::kStreamId, 0);",
          "88: }",
          "90: bool IsStreamError(const absl::Status& status) {",
          "91:   intptr_t stream_id;",
          "92:   return grpc_error_get_int(status, StatusIntProperty::kStreamId, &stream_id);",
          "93: }",
          "95: class MetadataSizeLimitExceededEncoder {",
          "96:  public:",
          "97:   explicit MetadataSizeLimitExceededEncoder(std::string& summary)",
          "98:       : summary_(summary) {}",
          "100:   void Encode(const Slice& key, const Slice& value) {",
          "101:     AddToSummary(key.as_string_view(), value.size());",
          "102:   }",
          "104:   template <typename Key, typename Value>",
          "105:   void Encode(Key, const Value& value) {",
          "106:     AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "107:   }",
          "109:  private:",
          "110:   void AddToSummary(absl::string_view key,",
          "111:                     size_t value_length) GPR_ATTRIBUTE_NOINLINE {",
          "112:     absl::StrAppend(&summary_, \" \", key, \":\",",
          "113:                     hpack_constants::SizeForEntry(key.size(), value_length),",
          "114:                     \"B\");",
          "115:   }",
          "116:   std::string& summary_;",
          "117: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122: class HPackParser::Input {",
          "123:  public:",
          "124:   Input(grpc_slice_refcount* current_slice_refcount, const uint8_t* begin,",
          "126:       : current_slice_refcount_(current_slice_refcount),",
          "127:         begin_(begin),",
          "128:         end_(end),",
          "",
          "[Removed Lines]",
          "125:         const uint8_t* end)",
          "129:         frontier_(begin) {}",
          "",
          "[Added Lines]",
          "92:         const uint8_t* end, HpackParseResult& error)",
          "96:         frontier_(begin),",
          "97:         error_(error) {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:   absl::optional<uint8_t> Next() {",
          "158:     if (end_of_stream()) {",
          "160:       return absl::optional<uint8_t>();",
          "161:     }",
          "162:     return *begin_++;",
          "",
          "[Removed Lines]",
          "159:       UnexpectedEOF();",
          "",
          "[Added Lines]",
          "127:       UnexpectedEOF(/*min_progress_size=*/1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:     do {",
          "206:       cur = Next();",
          "207:       if (!cur.has_value()) return {};",
          "208:     } while (*cur == 0x80);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     int num_redundant_0x80 = 0;",
          "179:       ++num_redundant_0x80;",
          "180:       if (num_redundant_0x80 == 16) {",
          "181:         return ParseVarintMaliciousEncoding();",
          "182:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:     return ParseVarintOutOfRange(value, *cur);",
          "213:   }",
          "224:   absl::optional<StringPrefix> ParseStringPrefix() {",
          "225:     auto cur = Next();",
          "",
          "[Removed Lines]",
          "216:   struct StringPrefix {",
          "218:     uint32_t length;",
          "220:     bool huff;",
          "221:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243:     return StringPrefix{strlen, huff};",
          "244:   }",
          "247:   bool eof_error() const {",
          "249:   }",
          "258:   bool has_error() const { return !error_.ok(); }",
          "",
          "[Removed Lines]",
          "248:     return eof_error_ || (!error_.ok() && !IsStreamError(error_));",
          "252:   grpc_error_handle TakeError() {",
          "253:     grpc_error_handle out = error_;",
          "254:     error_ = absl::OkStatus();",
          "255:     return out;",
          "256:   }",
          "",
          "[Added Lines]",
          "215:     return min_progress_size_ != 0 || error_.connection_error();",
          "219:   size_t min_progress_size() const { return min_progress_size_; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "270:   }",
          "277:     SetError(std::move(error));",
          "278:     begin_ = end_;",
          "279:   }",
          "285:   }",
          "291:   const uint8_t* frontier() const { return frontier_; }",
          "",
          "[Removed Lines]",
          "264:   GPR_ATTRIBUTE_NOINLINE void SetErrorAndContinueParsing(",
          "265:       grpc_error_handle error) {",
          "266:     GPR_ASSERT(!error.ok());",
          "269:     SetError(EnsureStreamError(std::move(error)));",
          "275:   GPR_ATTRIBUTE_NOINLINE void SetErrorAndStopParsing(grpc_error_handle error) {",
          "276:     GPR_ASSERT(!error.ok());",
          "282:   void UnexpectedEOF() {",
          "283:     if (!error_.ok() && !IsStreamError(error_)) return;",
          "284:     eof_error_ = true;",
          "288:   void UpdateFrontier() { frontier_ = begin_; }",
          "",
          "[Added Lines]",
          "227:   void SetErrorAndContinueParsing(HpackParseResult error) {",
          "228:     GPR_DEBUG_ASSERT(error.stream_error());",
          "229:     SetError(std::move(error));",
          "235:   void SetErrorAndStopParsing(HpackParseResult error) {",
          "236:     GPR_DEBUG_ASSERT(error.connection_error());",
          "244:   void UnexpectedEOF(size_t min_progress_size) {",
          "245:     GPR_ASSERT(min_progress_size > 0);",
          "246:     if (min_progress_size_ != 0 || error_.connection_error()) {",
          "247:       GPR_DEBUG_ASSERT(eof_error());",
          "248:       return;",
          "249:     }",
          "252:     min_progress_size_ = min_progress_size + (begin_ - frontier_);",
          "253:     GPR_DEBUG_ASSERT(eof_error());",
          "257:   void UpdateFrontier() {",
          "258:     GPR_DEBUG_ASSERT(skip_bytes_ == 0);",
          "259:     frontier_ = begin_;",
          "260:   }",
          "262:   void UpdateFrontierAndSkipBytes(size_t skip_bytes) {",
          "263:     UpdateFrontier();",
          "264:     size_t remaining = end_ - begin_;",
          "265:     if (skip_bytes >= remaining) {",
          "269:       skip_bytes_ = skip_bytes - remaining;",
          "270:       frontier_ = end_;",
          "271:     } else {",
          "273:       frontier_ += skip_bytes_;",
          "274:     }",
          "275:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295:   absl::optional<uint32_t> ParseVarintOutOfRange(uint32_t value,",
          "296:                                                  uint8_t last_byte) {",
          "301:     return absl::optional<uint32_t>();",
          "302:   }",
          "310:         error_ = std::move(error);  // connection errors dominate",
          "311:       }",
          "312:       return;",
          "",
          "[Removed Lines]",
          "297:     SetErrorAndStopParsing(absl::InternalError(absl::StrFormat(",
          "298:         \"integer overflow in hpack integer decoding: have 0x%08x, \"",
          "299:         \"got byte 0x%02x on byte 5\",",
          "300:         value, last_byte)));",
          "307:   void SetError(grpc_error_handle error) {",
          "308:     if (!error_.ok() || eof_error_) {",
          "309:       if (!IsStreamError(error) && IsStreamError(error_)) {",
          "",
          "[Added Lines]",
          "284:     SetErrorAndStopParsing(",
          "285:         HpackParseResult::VarintOutOfRangeError(value, last_byte));",
          "286:     return absl::optional<uint32_t>();",
          "287:   }",
          "290:   absl::optional<uint32_t> ParseVarintMaliciousEncoding() {",
          "291:     SetErrorAndStopParsing(HpackParseResult::MaliciousVarintEncodingError());",
          "298:   void SetError(HpackParseResult error) {",
          "299:     if (!error_.ok() || min_progress_size_ > 0) {",
          "300:       if (error.connection_error() && !error_.connection_error()) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:   const uint8_t* frontier_;",
          "329: };",
          "359:   }",
          "376:   }",
          "407:   }",
          "421:     }",
          "428:       uint32_t bits = kBase64InverseTable.table[*cur];",
          "429:       if (bits > 63) return {};",
          "430:       uint32_t buffer = bits << 18;",
          "433:       bits = kBase64InverseTable.table[*cur];",
          "434:       if (bits > 63) return {};",
          "435:       buffer |= bits << 12;",
          "438:       bits = kBase64InverseTable.table[*cur];",
          "439:       if (bits > 63) return {};",
          "440:       buffer |= bits << 6;",
          "446:       ++cur;",
          "451:     }",
          "496:   }",
          "528: }",
          "531:   absl::optional<std::vector<uint8_t>> result;",
          "532:   if (auto* p = absl::get_if<Slice>(&s.value_)) {",
          "533:     result = Unbase64Loop(p->begin(), p->end());",
          "",
          "[Removed Lines]",
          "326:   grpc_error_handle error_;",
          "328:   bool eof_error_ = false;",
          "333: class HPackParser::String {",
          "334:  public:",
          "336:   struct ParseResult;",
          "338:   enum class ParseStatus {",
          "340:     kOk,",
          "342:     kEof,",
          "344:     kParseHuffFailed,",
          "346:     kUnbase64Failed,",
          "347:   };",
          "349:   String() : value_(absl::Span<const uint8_t>()) {}",
          "350:   String(const String&) = delete;",
          "351:   String& operator=(const String&) = delete;",
          "352:   String(String&& other) noexcept : value_(std::move(other.value_)) {",
          "353:     other.value_ = absl::Span<const uint8_t>();",
          "354:   }",
          "355:   String& operator=(String&& other) noexcept {",
          "356:     value_ = std::move(other.value_);",
          "357:     other.value_ = absl::Span<const uint8_t>();",
          "358:     return *this;",
          "362:   Slice Take();",
          "365:   absl::string_view string_view() const {",
          "366:     if (auto* p = absl::get_if<Slice>(&value_)) {",
          "367:       return p->as_string_view();",
          "368:     } else if (auto* p = absl::get_if<absl::Span<const uint8_t>>(&value_)) {",
          "369:       return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "370:                                p->size());",
          "371:     } else if (auto* p = absl::get_if<std::vector<uint8_t>>(&value_)) {",
          "372:       return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "373:                                p->size());",
          "374:     }",
          "375:     GPR_UNREACHABLE_CODE(return absl::string_view());",
          "379:   static ParseResult Parse(Input* input);",
          "382:   static ParseResult ParseBinary(Input* input);",
          "384:  private:",
          "385:   void AppendBytes(const uint8_t* data, size_t length);",
          "386:   explicit String(std::vector<uint8_t> v) : value_(std::move(v)) {}",
          "387:   explicit String(absl::Span<const uint8_t> v) : value_(v) {}",
          "388:   String(grpc_slice_refcount* r, const uint8_t* begin, const uint8_t* end)",
          "389:       : value_(Slice::FromRefcountAndBytes(r, begin, end)) {}",
          "393:   template <typename Out>",
          "394:   static ParseStatus ParseHuff(Input* input, uint32_t length, Out output) {",
          "396:     if (input->remaining() < length) {",
          "397:       input->UnexpectedEOF();",
          "398:       GPR_DEBUG_ASSERT(input->eof_error());",
          "399:       return ParseStatus::kEof;",
          "400:     }",
          "402:     const uint8_t* p = input->cur_ptr();",
          "403:     input->Advance(length);",
          "404:     return HuffDecoder<Out>(output, p, p + length).Run()",
          "405:                ? ParseStatus::kOk",
          "406:                : ParseStatus::kParseHuffFailed;",
          "410:   static ParseResult ParseUncompressed(Input* input, uint32_t length,",
          "411:                                        uint32_t wire_size);",
          "414:   static ParseResult Unbase64(String s);",
          "417:   static absl::optional<std::vector<uint8_t>> Unbase64Loop(const uint8_t* cur,",
          "418:                                                            const uint8_t* end) {",
          "419:     while (cur != end && end[-1] == '=') {",
          "420:       --end;",
          "423:     std::vector<uint8_t> out;",
          "424:     out.reserve(3 * (end - cur) / 4 + 3);",
          "427:     while (end - cur >= 4) {",
          "431:       ++cur;",
          "436:       ++cur;",
          "441:       ++cur;",
          "443:       bits = kBase64InverseTable.table[*cur];",
          "444:       if (bits > 63) return {};",
          "445:       buffer |= bits;",
          "448:       out.insert(out.end(), {static_cast<uint8_t>(buffer >> 16),",
          "449:                              static_cast<uint8_t>(buffer >> 8),",
          "450:                              static_cast<uint8_t>(buffer)});",
          "453:     switch (end - cur) {",
          "454:       case 0:",
          "455:         return out;",
          "456:       case 1:",
          "457:         return {};",
          "458:       case 2: {",
          "459:         uint32_t bits = kBase64InverseTable.table[*cur];",
          "460:         if (bits > 63) return {};",
          "461:         uint32_t buffer = bits << 18;",
          "463:         ++cur;",
          "464:         bits = kBase64InverseTable.table[*cur];",
          "465:         if (bits > 63) return {};",
          "466:         buffer |= bits << 12;",
          "468:         if (buffer & 0xffff) return {};",
          "469:         out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "470:         return out;",
          "471:       }",
          "472:       case 3: {",
          "473:         uint32_t bits = kBase64InverseTable.table[*cur];",
          "474:         if (bits > 63) return {};",
          "475:         uint32_t buffer = bits << 18;",
          "477:         ++cur;",
          "478:         bits = kBase64InverseTable.table[*cur];",
          "479:         if (bits > 63) return {};",
          "480:         buffer |= bits << 12;",
          "482:         ++cur;",
          "483:         bits = kBase64InverseTable.table[*cur];",
          "484:         if (bits > 63) return {};",
          "485:         buffer |= bits << 6;",
          "487:         ++cur;",
          "488:         if (buffer & 0xff) return {};",
          "489:         out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "490:         out.push_back(static_cast<uint8_t>(buffer >> 8));",
          "491:         return out;",
          "492:       }",
          "493:     }",
          "495:     GPR_UNREACHABLE_CODE(return out;);",
          "498:   absl::variant<Slice, absl::Span<const uint8_t>, std::vector<uint8_t>> value_;",
          "499: };",
          "501: struct HPackParser::String::ParseResult {",
          "502:   ParseResult() = delete;",
          "503:   ParseResult(ParseStatus status, size_t wire_size, String value)",
          "504:       : status(status), wire_size(wire_size), value(std::move(value)) {}",
          "505:   ParseStatus status;",
          "506:   size_t wire_size;",
          "507:   String value;",
          "508: };",
          "510: HPackParser::String::ParseResult HPackParser::String::ParseUncompressed(",
          "511:     Input* input, uint32_t length, uint32_t wire_size) {",
          "513:   if (input->remaining() < length) {",
          "514:     input->UnexpectedEOF();",
          "515:     GPR_DEBUG_ASSERT(input->eof_error());",
          "516:     return ParseResult{ParseStatus::kEof, wire_size, String{}};",
          "517:   }",
          "518:   auto* refcount = input->slice_refcount();",
          "519:   auto* p = input->cur_ptr();",
          "520:   input->Advance(length);",
          "521:   if (refcount != nullptr) {",
          "522:     return ParseResult{ParseStatus::kOk, wire_size,",
          "523:                        String(refcount, p, p + length)};",
          "524:   } else {",
          "525:     return ParseResult{ParseStatus::kOk, wire_size,",
          "526:                        String(absl::Span<const uint8_t>(p, length))};",
          "527:   }",
          "530: HPackParser::String::ParseResult HPackParser::String::Unbase64(String s) {",
          "",
          "[Added Lines]",
          "317:   HpackParseResult& error_;",
          "320:   size_t min_progress_size_ = 0;",
          "324:   size_t skip_bytes_ = 0;",
          "327: absl::string_view HPackParser::String::string_view() const {",
          "328:   if (auto* p = absl::get_if<Slice>(&value_)) {",
          "329:     return p->as_string_view();",
          "330:   } else if (auto* p = absl::get_if<absl::Span<const uint8_t>>(&value_)) {",
          "331:     return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "332:                              p->size());",
          "333:   } else if (auto* p = absl::get_if<std::vector<uint8_t>>(&value_)) {",
          "334:     return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "335:                              p->size());",
          "337:   GPR_UNREACHABLE_CODE(return absl::string_view());",
          "338: }",
          "340: template <typename Out>",
          "341: HpackParseStatus HPackParser::String::ParseHuff(Input* input, uint32_t length,",
          "342:                                                 Out output) {",
          "344:   if (input->remaining() < length) {",
          "345:     input->UnexpectedEOF(/*min_progress_size=*/length);",
          "346:     return HpackParseStatus::kEof;",
          "349:   const uint8_t* p = input->cur_ptr();",
          "350:   input->Advance(length);",
          "351:   return HuffDecoder<Out>(output, p, p + length).Run()",
          "352:              ? HpackParseStatus::kOk",
          "353:              : HpackParseStatus::kParseHuffFailed;",
          "354: }",
          "356: struct HPackParser::String::StringResult {",
          "357:   StringResult() = delete;",
          "358:   StringResult(HpackParseStatus status, size_t wire_size, String value)",
          "359:       : status(status), wire_size(wire_size), value(std::move(value)) {}",
          "360:   HpackParseStatus status;",
          "361:   size_t wire_size;",
          "362:   String value;",
          "363: };",
          "365: HPackParser::String::StringResult HPackParser::String::ParseUncompressed(",
          "366:     Input* input, uint32_t length, uint32_t wire_size) {",
          "368:   if (input->remaining() < length) {",
          "369:     input->UnexpectedEOF(/*min_progress_size=*/length);",
          "370:     GPR_DEBUG_ASSERT(input->eof_error());",
          "371:     return StringResult{HpackParseStatus::kEof, wire_size, String{}};",
          "372:   }",
          "373:   auto* refcount = input->slice_refcount();",
          "374:   auto* p = input->cur_ptr();",
          "375:   input->Advance(length);",
          "376:   if (refcount != nullptr) {",
          "377:     return StringResult{HpackParseStatus::kOk, wire_size,",
          "378:                         String(refcount, p, p + length)};",
          "379:   } else {",
          "380:     return StringResult{HpackParseStatus::kOk, wire_size,",
          "381:                         String(absl::Span<const uint8_t>(p, length))};",
          "382:   }",
          "383: }",
          "385: absl::optional<std::vector<uint8_t>> HPackParser::String::Unbase64Loop(",
          "386:     const uint8_t* cur, const uint8_t* end) {",
          "387:   while (cur != end && end[-1] == '=') {",
          "388:     --end;",
          "391:   std::vector<uint8_t> out;",
          "392:   out.reserve(3 * (end - cur) / 4 + 3);",
          "395:   while (end - cur >= 4) {",
          "396:     uint32_t bits = kBase64InverseTable.table[*cur];",
          "397:     if (bits > 63) return {};",
          "398:     uint32_t buffer = bits << 18;",
          "399:     ++cur;",
          "401:     bits = kBase64InverseTable.table[*cur];",
          "402:     if (bits > 63) return {};",
          "403:     buffer |= bits << 12;",
          "404:     ++cur;",
          "406:     bits = kBase64InverseTable.table[*cur];",
          "407:     if (bits > 63) return {};",
          "408:     buffer |= bits << 6;",
          "409:     ++cur;",
          "411:     bits = kBase64InverseTable.table[*cur];",
          "412:     if (bits > 63) return {};",
          "413:     buffer |= bits;",
          "414:     ++cur;",
          "416:     out.insert(out.end(), {static_cast<uint8_t>(buffer >> 16),",
          "417:                            static_cast<uint8_t>(buffer >> 8),",
          "418:                            static_cast<uint8_t>(buffer)});",
          "419:   }",
          "421:   switch (end - cur) {",
          "422:     case 0:",
          "423:       return out;",
          "424:     case 1:",
          "425:       return {};",
          "426:     case 2: {",
          "427:       uint32_t bits = kBase64InverseTable.table[*cur];",
          "428:       if (bits > 63) return {};",
          "429:       uint32_t buffer = bits << 18;",
          "431:       ++cur;",
          "432:       bits = kBase64InverseTable.table[*cur];",
          "433:       if (bits > 63) return {};",
          "434:       buffer |= bits << 12;",
          "436:       if (buffer & 0xffff) return {};",
          "437:       out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "438:       return out;",
          "440:     case 3: {",
          "445:       ++cur;",
          "450:       ++cur;",
          "456:       if (buffer & 0xff) return {};",
          "457:       out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "458:       out.push_back(static_cast<uint8_t>(buffer >> 8));",
          "459:       return out;",
          "463:   GPR_UNREACHABLE_CODE(return out;);",
          "466: HPackParser::String::StringResult HPackParser::String::Unbase64(String s) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "539:     result = Unbase64Loop(p->data(), p->data() + p->size());",
          "540:   }",
          "541:   if (!result.has_value()) {",
          "544:   }",
          "547: }",
          "557:     std::vector<uint8_t> output;",
          "560:     size_t wire_len = output.size();",
          "562:   }",
          "564: }",
          "576:       input->Advance(1);",
          "578:     }",
          "582:     return Unbase64(std::move(base64.value));",
          "583:   } else {",
          "",
          "[Removed Lines]",
          "542:     return ParseResult{ParseStatus::kUnbase64Failed, s.string_view().length(),",
          "543:                        String{}};",
          "545:   return ParseResult{ParseStatus::kOk, s.string_view().length(),",
          "546:                      String(std::move(*result))};",
          "549: HPackParser::String::ParseResult HPackParser::String::Parse(Input* input) {",
          "550:   auto pfx = input->ParseStringPrefix();",
          "551:   if (!pfx.has_value()) {",
          "552:     GPR_DEBUG_ASSERT(input->eof_error());",
          "553:     return ParseResult{ParseStatus::kEof, 0, String{}};",
          "554:   }",
          "555:   if (pfx->huff) {",
          "558:     ParseStatus sts = ParseHuff(input, pfx->length,",
          "559:                                 [&output](uint8_t c) { output.push_back(c); });",
          "561:     return ParseResult{sts, wire_len, String(std::move(output))};",
          "563:   return ParseUncompressed(input, pfx->length, pfx->length);",
          "566: HPackParser::String::ParseResult HPackParser::String::ParseBinary(",
          "567:     Input* input) {",
          "568:   auto pfx = input->ParseStringPrefix();",
          "569:   if (!pfx.has_value()) {",
          "570:     GPR_DEBUG_ASSERT(input->eof_error());",
          "571:     return ParseResult{ParseStatus::kEof, 0, String{}};",
          "572:   }",
          "573:   if (!pfx->huff) {",
          "574:     if (pfx->length > 0 && input->peek() == 0) {",
          "577:       return ParseUncompressed(input, pfx->length - 1, pfx->length);",
          "580:     auto base64 = ParseUncompressed(input, pfx->length, pfx->length);",
          "581:     if (base64.status != ParseStatus::kOk) return base64;",
          "",
          "[Added Lines]",
          "478:     return StringResult{HpackParseStatus::kUnbase64Failed,",
          "479:                         s.string_view().length(), String{}};",
          "481:   return StringResult{HpackParseStatus::kOk, s.string_view().length(),",
          "482:                       String(std::move(*result))};",
          "485: HPackParser::String::StringResult HPackParser::String::Parse(Input* input,",
          "486:                                                              bool is_huff,",
          "487:                                                              size_t length) {",
          "488:   if (is_huff) {",
          "491:     HpackParseStatus sts =",
          "492:         ParseHuff(input, length, [&output](uint8_t c) { output.push_back(c); });",
          "494:     return StringResult{sts, wire_len, String(std::move(output))};",
          "496:   return ParseUncompressed(input, length, length);",
          "499: HPackParser::String::StringResult HPackParser::String::ParseBinary(",
          "500:     Input* input, bool is_huff, size_t length) {",
          "501:   if (!is_huff) {",
          "502:     if (length > 0 && input->peek() == 0) {",
          "505:       return ParseUncompressed(input, length - 1, length);",
          "508:     auto base64 = ParseUncompressed(input, length, length);",
          "509:     if (base64.status != HpackParseStatus::kOk) return base64;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "588:     enum class State { kUnsure, kBinary, kBase64 };",
          "589:     State state = State::kUnsure;",
          "608:     }",
          "609:     switch (state) {",
          "610:       case State::kUnsure:",
          "614:       case State::kBinary:",
          "616:         {",
          "617:           size_t wire_len = decompressed.size();",
          "620:         }",
          "621:       case State::kBase64:",
          "",
          "[Removed Lines]",
          "590:     auto sts =",
          "591:         ParseHuff(input, pfx->length, [&state, &decompressed](uint8_t c) {",
          "592:           if (state == State::kUnsure) {",
          "594:             if (c == 0) {",
          "596:               state = State::kBinary;",
          "597:               return;",
          "598:             } else {",
          "600:               state = State::kBase64;",
          "601:             }",
          "602:           }",
          "604:           decompressed.push_back(c);",
          "605:         });",
          "606:     if (sts != ParseStatus::kOk) {",
          "607:       return ParseResult{sts, 0, String{}};",
          "612:         return ParseResult{ParseStatus::kOk, 0,",
          "613:                            String(absl::Span<const uint8_t>())};",
          "618:           return ParseResult{ParseStatus::kOk, wire_len,",
          "619:                              String(std::move(decompressed))};",
          "",
          "[Added Lines]",
          "518:     auto sts = ParseHuff(input, length, [&state, &decompressed](uint8_t c) {",
          "519:       if (state == State::kUnsure) {",
          "521:         if (c == 0) {",
          "523:           state = State::kBinary;",
          "524:           return;",
          "525:         } else {",
          "527:           state = State::kBase64;",
          "528:         }",
          "529:       }",
          "531:       decompressed.push_back(c);",
          "532:     });",
          "533:     if (sts != HpackParseStatus::kOk) {",
          "534:       return StringResult{sts, 0, String{}};",
          "539:         return StringResult{HpackParseStatus::kOk, 0,",
          "540:                             String(absl::Span<const uint8_t>())};",
          "545:           return StringResult{HpackParseStatus::kOk, wire_len,",
          "546:                               String(std::move(decompressed))};",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "630: class HPackParser::Parser {",
          "631:  public:",
          "635:       : input_(input),",
          "636:         metadata_buffer_(metadata_buffer),",
          "641:         log_info_(log_info) {}",
          "648:     }",
          "651:   }",
          "654:     auto cur = *input_->Next();",
          "655:     switch (cur >> 4) {",
          "",
          "[Removed Lines]",
          "632:   Parser(Input* input, grpc_metadata_batch* metadata_buffer, HPackTable* table,",
          "633:          uint8_t* dynamic_table_updates_allowed, uint32_t* frame_length,",
          "634:          RandomEarlyDetection* metadata_early_detection, LogInfo log_info)",
          "637:         table_(table),",
          "638:         dynamic_table_updates_allowed_(dynamic_table_updates_allowed),",
          "639:         frame_length_(frame_length),",
          "640:         metadata_early_detection_(metadata_early_detection),",
          "644:   bool SkipPriority() {",
          "645:     if (input_->remaining() < 5) {",
          "646:       input_->UnexpectedEOF();",
          "647:       return false;",
          "649:     input_->Advance(5);",
          "650:     return true;",
          "653:   bool Parse() {",
          "",
          "[Added Lines]",
          "559:   Parser(Input* input, grpc_metadata_batch*& metadata_buffer,",
          "560:          InterSliceState& state, LogInfo log_info)",
          "563:         state_(state),",
          "566:   bool Parse() {",
          "567:     switch (state_.parse_state) {",
          "568:       case ParseState::kTop:",
          "569:         return ParseTop();",
          "570:       case ParseState::kParsingKeyLength:",
          "571:         return ParseKeyLength();",
          "572:       case ParseState::kParsingKeyBody:",
          "573:         return ParseKeyBody();",
          "574:       case ParseState::kSkippingKeyBody:",
          "575:         return SkipKeyBody();",
          "576:       case ParseState::kParsingValueLength:",
          "577:         return ParseValueLength();",
          "578:       case ParseState::kParsingValueBody:",
          "579:         return ParseValueBody();",
          "580:       case ParseState::kSkippingValueLength:",
          "581:         return SkipValueLength();",
          "582:       case ParseState::kSkippingValueBody:",
          "583:         return SkipValueBody();",
          "585:     GPR_UNREACHABLE_CODE(return false);",
          "588:  private:",
          "589:   bool ParseTop() {",
          "590:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "663:       case 1:",
          "664:         switch (cur & 0xf) {",
          "665:           case 0:  // literal key",
          "667:           case 0xf:  // varint encoded key index",
          "669:           default:  // inline encoded key index",
          "671:         }",
          "",
          "[Removed Lines]",
          "666:             return FinishHeaderOmitFromTable(ParseLiteralKey());",
          "668:             return FinishHeaderOmitFromTable(ParseVarIdxKey(0xf));",
          "670:             return FinishHeaderOmitFromTable(ParseIdxKey(cur & 0xf));",
          "",
          "[Added Lines]",
          "603:             return StartParseLiteralKey(false);",
          "605:             return StartVarIdxKey(0xf, false);",
          "607:             return StartIdxKey(cur & 0xf, false);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "694:       case 4:",
          "695:         if (cur == 0x40) {",
          "698:         }",
          "699:         ABSL_FALLTHROUGH_INTENDED;",
          "700:       case 5:",
          "701:       case 6:",
          "704:       case 7:",
          "705:         if (cur == 0x7f) {",
          "708:         } else {",
          "711:         }",
          "",
          "[Removed Lines]",
          "697:           return FinishHeaderAndAddToTable(ParseLiteralKey());",
          "703:         return FinishHeaderAndAddToTable(ParseIdxKey(cur & 0x3f));",
          "707:           return FinishHeaderAndAddToTable(ParseVarIdxKey(0x3f));",
          "710:           return FinishHeaderAndAddToTable(ParseIdxKey(cur & 0x3f));",
          "",
          "[Added Lines]",
          "634:           return StartParseLiteralKey(true);",
          "640:         return StartIdxKey(cur & 0x3f, true);",
          "644:           return StartVarIdxKey(0x3f, true);",
          "647:           return StartIdxKey(cur & 0x3f, true);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "719:         if (cur == 0x80) {",
          "721:           input_->SetErrorAndStopParsing(",
          "723:           return false;",
          "724:         }",
          "725:         ABSL_FALLTHROUGH_INTENDED;",
          "",
          "[Removed Lines]",
          "722:               absl::InternalError(\"Illegal hpack op code\"));",
          "",
          "[Added Lines]",
          "659:               HpackParseResult::IllegalHpackOpCode());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "743:     GPR_UNREACHABLE_CODE(abort());",
          "744:   }",
          "747:   void GPR_ATTRIBUTE_NOINLINE LogHeader(const HPackTable::Memento& memento) {",
          "748:     const char* type;",
          "749:     switch (log_info_.type) {",
          "",
          "[Removed Lines]",
          "746:  private:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "757:         type = \"???\";",
          "758:         break;",
          "759:     }",
          "768:   }",
          "770:   void EmitHeader(const HPackTable::Memento& md) {",
          "778:     if (!md.parse_status.ok()) {",
          "781:     }",
          "782:     if (GPR_LIKELY(metadata_buffer_ != nullptr)) {",
          "783:       metadata_buffer_->Set(md.md);",
          "784:     }",
          "785:   }",
          "791:     if (GRPC_TRACE_FLAG_ENABLED(grpc_trace_chttp2_hpack_parser)) {",
          "793:     }",
          "800:       return false;",
          "801:     };",
          "802:     return true;",
          "",
          "[Removed Lines]",
          "760:     gpr_log(GPR_DEBUG, \"HTTP:%d:%s:%s: %s%s\", log_info_.stream_id, type,",
          "761:             log_info_.is_client ? \"CLI\" : \"SVR\",",
          "762:             memento.md.DebugString().c_str(),",
          "763:             memento.parse_status.ok()",
          "764:                 ? \"\"",
          "765:                 : absl::StrCat(",
          "766:                       \" (parse error: \", memento.parse_status.ToString(), \")\")",
          "767:                       .c_str());",
          "773:     if (!input_->has_error() &&",
          "774:         metadata_early_detection_->MustReject(*frame_length_)) {",
          "776:       HandleMetadataHardSizeLimitExceeded(md);",
          "777:     }",
          "780:       HandleMetadataParseError(md.parse_status);",
          "787:   bool FinishHeaderAndAddToTable(absl::optional<HPackTable::Memento> md) {",
          "789:     if (!md.has_value()) return false;",
          "792:       LogHeader(*md);",
          "795:     EmitHeader(*md);",
          "797:     grpc_error_handle err = table_->Add(std::move(*md));",
          "798:     if (GPR_UNLIKELY(!err.ok())) {",
          "799:       input_->SetErrorAndStopParsing(std::move(err));",
          "",
          "[Added Lines]",
          "696:     gpr_log(",
          "697:         GPR_DEBUG, \"HTTP:%d:%s:%s: %s%s\", log_info_.stream_id, type,",
          "698:         log_info_.is_client ? \"CLI\" : \"SVR\", memento.md.DebugString().c_str(),",
          "699:         memento.parse_status.ok()",
          "700:             ? \"\"",
          "701:             : absl::StrCat(\" (parse error: \",",
          "702:                            memento.parse_status.Materialize().ToString(), \")\")",
          "703:                   .c_str());",
          "708:     state_.frame_length += md.md.transport_size();",
          "711:       input_->SetErrorAndContinueParsing(md.parse_status);",
          "716:     if (state_.metadata_early_detection.MustReject(state_.frame_length)) {",
          "718:       input_->SetErrorAndContinueParsing(",
          "719:           HpackParseResult::HardMetadataLimitExceededError(",
          "720:               std::exchange(metadata_buffer_, nullptr), state_.frame_length,",
          "721:               state_.metadata_early_detection.hard_limit()));",
          "722:     }",
          "725:   bool FinishHeaderAndAddToTable(HPackTable::Memento md) {",
          "728:       LogHeader(md);",
          "731:     EmitHeader(md);",
          "733:     if (GPR_UNLIKELY(!state_.hpack_table.Add(std::move(md)))) {",
          "734:       input_->SetErrorAndStopParsing(",
          "735:           HpackParseResult::AddBeforeTableSizeUpdated(",
          "736:               state_.hpack_table.current_table_bytes(),",
          "737:               state_.hpack_table.max_bytes()));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "817:     EmitHeader(md);",
          "818:   }",
          "838:     }",
          "880:     switch (key.status) {",
          "882:         break;",
          "890:         GPR_DEBUG_ASSERT(input_->eof_error());",
          "892:     }",
          "904:   }",
          "911:     }",
          "913:   }",
          "921:     }",
          "934:   }",
          "940:     } else {",
          "942:     }",
          "943:   }",
          "946:   bool FinishIndexed(absl::optional<uint32_t> index) {",
          "948:     if (!index.has_value()) return false;",
          "950:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "951:       InvalidHPackIndexError(*index);",
          "952:       return false;",
          "",
          "[Removed Lines]",
          "822:   class MementoBuilder {",
          "823:    public:",
          "824:     explicit MementoBuilder(Input* input, absl::string_view key_string,",
          "825:                             absl::Status status = absl::OkStatus())",
          "826:         : input_(input), key_string_(key_string), status_(std::move(status)) {}",
          "828:     auto ErrorHandler() {",
          "829:       return [this](absl::string_view error, const Slice&) {",
          "830:         auto message =",
          "831:             absl::StrCat(\"Error parsing '\", key_string_,",
          "832:                          \"' metadata: error=\", error, \" key=\", key_string_);",
          "833:         gpr_log(GPR_ERROR, \"%s\", message.c_str());",
          "834:         if (status_.ok()) {",
          "835:           status_ = absl::InternalError(message);",
          "836:         }",
          "837:       };",
          "840:     HPackTable::Memento Build(ParsedMetadata<grpc_metadata_batch> memento) {",
          "841:       return HPackTable::Memento{std::move(memento), std::move(status_)};",
          "842:     }",
          "847:     bool HandleParseResult(String::ParseStatus status) {",
          "848:       auto continuable = [this](absl::string_view error) {",
          "849:         auto this_error = absl::InternalError(absl::StrCat(",
          "850:             \"Error parsing '\", key_string_, \"' metadata: error=\", error));",
          "851:         if (status_.ok()) status_ = this_error;",
          "852:         input_->SetErrorAndContinueParsing(std::move(this_error));",
          "853:       };",
          "854:       switch (status) {",
          "855:         case String::ParseStatus::kOk:",
          "856:           return true;",
          "857:         case String::ParseStatus::kParseHuffFailed:",
          "858:           input_->SetErrorAndStopParsing(",
          "859:               absl::InternalError(\"Huffman decoding failed\"));",
          "860:           return false;",
          "861:         case String::ParseStatus::kUnbase64Failed:",
          "862:           continuable(\"illegal base64 encoding\");",
          "863:           return true;",
          "864:         case String::ParseStatus::kEof:",
          "865:           GPR_DEBUG_ASSERT(input_->eof_error());",
          "866:           return false;",
          "867:       }",
          "868:       GPR_UNREACHABLE_CODE(return false);",
          "869:     }",
          "871:    private:",
          "872:     Input* input_;",
          "873:     absl::string_view key_string_;",
          "874:     absl::Status status_;",
          "875:   };",
          "878:   absl::optional<HPackTable::Memento> ParseLiteralKey() {",
          "879:     auto key = String::Parse(input_);",
          "881:       case String::ParseStatus::kOk:",
          "883:       case String::ParseStatus::kParseHuffFailed:",
          "884:         input_->SetErrorAndStopParsing(",
          "885:             absl::InternalError(\"Huffman decoding failed\"));",
          "886:         return absl::nullopt;",
          "887:       case String::ParseStatus::kUnbase64Failed:",
          "888:         Crash(\"unreachable\");",
          "889:       case String::ParseStatus::kEof:",
          "891:         return absl::nullopt;",
          "893:     auto key_string = key.value.string_view();",
          "894:     auto value = ParseValueString(absl::EndsWith(key_string, \"-bin\"));",
          "895:     MementoBuilder builder(input_, key_string,",
          "896:                            EnsureStreamError(ValidateKey(key_string)));",
          "897:     if (!builder.HandleParseResult(value.status)) return absl::nullopt;",
          "898:     auto value_slice = value.value.Take();",
          "899:     const auto transport_size =",
          "900:         key_string.size() + value.wire_size + hpack_constants::kEntryOverhead;",
          "901:     return builder.Build(",
          "902:         grpc_metadata_batch::Parse(key_string, std::move(value_slice),",
          "903:                                    transport_size, builder.ErrorHandler()));",
          "906:   absl::Status ValidateKey(absl::string_view key) {",
          "907:     if (key == HttpSchemeMetadata::key() || key == HttpMethodMetadata::key() ||",
          "908:         key == HttpAuthorityMetadata::key() || key == HttpPathMetadata::key() ||",
          "909:         key == HttpStatusMetadata::key()) {",
          "910:       return absl::OkStatus();",
          "912:     return ValidateHeaderKeyIsLegal(key);",
          "916:   absl::optional<HPackTable::Memento> ParseIdxKey(uint32_t index) {",
          "917:     const auto* elem = table_->Lookup(index);",
          "918:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "919:       InvalidHPackIndexError(index);",
          "920:       return absl::optional<HPackTable::Memento>();",
          "922:     MementoBuilder builder(input_, elem->md.key(), elem->parse_status);",
          "923:     auto value = ParseValueString(elem->md.is_binary_header());",
          "924:     if (!builder.HandleParseResult(value.status)) return absl::nullopt;",
          "925:     return builder.Build(elem->md.WithNewValue(",
          "926:         value.value.Take(), value.wire_size, builder.ErrorHandler()));",
          "927:   };",
          "930:   absl::optional<HPackTable::Memento> ParseVarIdxKey(uint32_t offset) {",
          "931:     auto index = input_->ParseVarint(offset);",
          "932:     if (GPR_UNLIKELY(!index.has_value())) return absl::nullopt;",
          "933:     return ParseIdxKey(*index);",
          "937:   String::ParseResult ParseValueString(bool is_binary) {",
          "938:     if (is_binary) {",
          "939:       return String::ParseBinary(input_);",
          "941:       return String::Parse(input_);",
          "949:     const auto* elem = table_->Lookup(*index);",
          "",
          "[Added Lines]",
          "759:   bool StartIdxKey(uint32_t index, bool add_to_table) {",
          "760:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "761:     input_->UpdateFrontier();",
          "762:     const auto* elem = state_.hpack_table.Lookup(index);",
          "763:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "764:       InvalidHPackIndexError(index);",
          "765:       return false;",
          "767:     state_.parse_state = ParseState::kParsingValueLength;",
          "768:     state_.is_binary_header = elem->md.is_binary_header();",
          "769:     state_.key.emplace<const HPackTable::Memento*>(elem);",
          "770:     state_.add_to_table = add_to_table;",
          "771:     return ParseValueLength();",
          "772:   };",
          "775:   bool StartVarIdxKey(uint32_t offset, bool add_to_table) {",
          "776:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "777:     auto index = input_->ParseVarint(offset);",
          "778:     if (GPR_UNLIKELY(!index.has_value())) return false;",
          "779:     return StartIdxKey(*index, add_to_table);",
          "780:   }",
          "782:   bool StartParseLiteralKey(bool add_to_table) {",
          "783:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "784:     state_.add_to_table = add_to_table;",
          "785:     state_.parse_state = ParseState::kParsingKeyLength;",
          "786:     input_->UpdateFrontier();",
          "787:     return ParseKeyLength();",
          "788:   }",
          "790:   bool ShouldSkipParsingString(uint64_t string_length) const {",
          "812:     return string_length > state_.hpack_table.current_table_size() &&",
          "813:            state_.metadata_early_detection.MustReject(",
          "814:                string_length + hpack_constants::kEntryOverhead);",
          "815:   }",
          "817:   bool ParseKeyLength() {",
          "818:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingKeyLength);",
          "819:     auto pfx = input_->ParseStringPrefix();",
          "820:     if (!pfx.has_value()) return false;",
          "821:     state_.is_string_huff_compressed = pfx->huff;",
          "822:     state_.string_length = pfx->length;",
          "823:     input_->UpdateFrontier();",
          "824:     if (ShouldSkipParsingString(state_.string_length)) {",
          "825:       input_->SetErrorAndContinueParsing(",
          "826:           HpackParseResult::HardMetadataLimitExceededByKeyError(",
          "827:               state_.string_length,",
          "828:               state_.metadata_early_detection.hard_limit()));",
          "829:       metadata_buffer_ = nullptr;",
          "830:       state_.parse_state = ParseState::kSkippingKeyBody;",
          "831:       return SkipKeyBody();",
          "832:     } else {",
          "833:       state_.parse_state = ParseState::kParsingKeyBody;",
          "834:       return ParseKeyBody();",
          "835:     }",
          "836:   }",
          "838:   bool ParseKeyBody() {",
          "839:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingKeyBody);",
          "840:     auto key = String::Parse(input_, state_.is_string_huff_compressed,",
          "841:                              state_.string_length);",
          "843:       case HpackParseStatus::kOk:",
          "845:       case HpackParseStatus::kEof:",
          "847:         return false;",
          "848:       default:",
          "849:         input_->SetErrorAndStopParsing(",
          "850:             HpackParseResult::FromStatus(key.status));",
          "851:         return false;",
          "853:     input_->UpdateFrontier();",
          "854:     state_.parse_state = ParseState::kParsingValueLength;",
          "855:     state_.is_binary_header = absl::EndsWith(key.value.string_view(), \"-bin\");",
          "856:     state_.key.emplace<Slice>(key.value.Take());",
          "857:     return ParseValueLength();",
          "860:   bool SkipStringBody() {",
          "861:     auto remaining = input_->remaining();",
          "862:     if (remaining >= state_.string_length) {",
          "863:       input_->Advance(state_.string_length);",
          "864:       return true;",
          "865:     } else {",
          "866:       input_->Advance(remaining);",
          "867:       input_->UpdateFrontier();",
          "868:       state_.string_length -= remaining;",
          "879:       input_->UnexpectedEOF(",
          "881:       return false;",
          "885:   bool SkipKeyBody() {",
          "886:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingKeyBody);",
          "887:     if (!SkipStringBody()) return false;",
          "888:     input_->UpdateFrontier();",
          "889:     state_.parse_state = ParseState::kSkippingValueLength;",
          "890:     return SkipValueLength();",
          "891:   }",
          "893:   bool SkipValueLength() {",
          "894:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingValueLength);",
          "895:     auto pfx = input_->ParseStringPrefix();",
          "896:     if (!pfx.has_value()) return false;",
          "897:     state_.string_length = pfx->length;",
          "898:     input_->UpdateFrontier();",
          "899:     state_.parse_state = ParseState::kSkippingValueBody;",
          "900:     return SkipValueBody();",
          "901:   }",
          "903:   bool SkipValueBody() {",
          "904:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingValueBody);",
          "905:     if (!SkipStringBody()) return false;",
          "906:     input_->UpdateFrontier();",
          "907:     state_.parse_state = ParseState::kTop;",
          "908:     if (state_.add_to_table) {",
          "909:       state_.hpack_table.AddLargerThanCurrentTableSize();",
          "911:     return true;",
          "912:   }",
          "914:   bool ParseValueLength() {",
          "915:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingValueLength);",
          "916:     auto pfx = input_->ParseStringPrefix();",
          "917:     if (!pfx.has_value()) return false;",
          "918:     state_.is_string_huff_compressed = pfx->huff;",
          "919:     state_.string_length = pfx->length;",
          "920:     input_->UpdateFrontier();",
          "921:     if (ShouldSkipParsingString(state_.string_length)) {",
          "922:       input_->SetErrorAndContinueParsing(",
          "923:           HpackParseResult::HardMetadataLimitExceededByValueError(",
          "924:               Match(",
          "925:                   state_.key, [](const Slice& s) { return s.as_string_view(); },",
          "926:                   [](const HPackTable::Memento* m) { return m->md.key(); }),",
          "927:               state_.string_length,",
          "928:               state_.metadata_early_detection.hard_limit()));",
          "929:       metadata_buffer_ = nullptr;",
          "930:       state_.parse_state = ParseState::kSkippingValueBody;",
          "931:       return SkipValueBody();",
          "932:     } else {",
          "933:       state_.parse_state = ParseState::kParsingValueBody;",
          "934:       return ParseValueBody();",
          "935:     }",
          "938:   bool ParseValueBody() {",
          "939:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingValueBody);",
          "940:     auto value =",
          "941:         state_.is_binary_header",
          "942:             ? String::ParseBinary(input_, state_.is_string_huff_compressed,",
          "943:                                   state_.string_length)",
          "944:             : String::Parse(input_, state_.is_string_huff_compressed,",
          "945:                             state_.string_length);",
          "946:     HpackParseResult& status = state_.frame_error;",
          "947:     absl::string_view key_string;",
          "948:     if (auto* s = absl::get_if<Slice>(&state_.key)) {",
          "949:       key_string = s->as_string_view();",
          "950:       if (status.ok()) {",
          "951:         auto r = ValidateKey(key_string);",
          "952:         if (r != ValidateMetadataResult::kOk) {",
          "953:           input_->SetErrorAndContinueParsing(",
          "954:               HpackParseResult::InvalidMetadataError(r, key_string));",
          "955:         }",
          "956:       }",
          "958:       const auto* memento = absl::get<const HPackTable::Memento*>(state_.key);",
          "959:       key_string = memento->md.key();",
          "960:       if (status.ok() && !memento->parse_status.ok()) {",
          "961:         input_->SetErrorAndContinueParsing(memento->parse_status);",
          "962:       }",
          "963:     }",
          "964:     switch (value.status) {",
          "965:       case HpackParseStatus::kOk:",
          "966:         break;",
          "967:       case HpackParseStatus::kEof:",
          "968:         GPR_DEBUG_ASSERT(input_->eof_error());",
          "969:         return false;",
          "970:       default: {",
          "971:         auto result =",
          "972:             HpackParseResult::FromStatusWithKey(value.status, key_string);",
          "973:         if (result.stream_error()) {",
          "974:           input_->SetErrorAndContinueParsing(std::move(result));",
          "975:           break;",
          "976:         } else {",
          "977:           input_->SetErrorAndStopParsing(std::move(result));",
          "978:           return false;",
          "979:         }",
          "980:       }",
          "981:     }",
          "982:     auto value_slice = value.value.Take();",
          "983:     const auto transport_size =",
          "984:         key_string.size() + value.wire_size + hpack_constants::kEntryOverhead;",
          "985:     auto md = grpc_metadata_batch::Parse(",
          "986:         key_string, std::move(value_slice), transport_size,",
          "987:         [key_string, &status, this](absl::string_view message, const Slice&) {",
          "988:           if (!status.ok()) return;",
          "989:           input_->SetErrorAndContinueParsing(",
          "990:               HpackParseResult::MetadataParseError(key_string));",
          "991:           gpr_log(GPR_ERROR, \"Error parsing '%s' metadata: %s\",",
          "992:                   std::string(key_string).c_str(),",
          "993:                   std::string(message).c_str());",
          "994:         });",
          "995:     HPackTable::Memento memento{std::move(md),",
          "996:                                 status.PersistentStreamErrorOrOk()};",
          "997:     input_->UpdateFrontier();",
          "998:     state_.parse_state = ParseState::kTop;",
          "999:     if (state_.add_to_table) {",
          "1000:       return FinishHeaderAndAddToTable(std::move(memento));",
          "1001:     } else {",
          "1002:       FinishHeaderOmitFromTable(memento);",
          "1003:       return true;",
          "1007:   ValidateMetadataResult ValidateKey(absl::string_view key) {",
          "1008:     if (key == HttpSchemeMetadata::key() || key == HttpMethodMetadata::key() ||",
          "1009:         key == HttpAuthorityMetadata::key() || key == HttpPathMetadata::key() ||",
          "1010:         key == HttpStatusMetadata::key()) {",
          "1011:       return ValidateMetadataResult::kOk;",
          "1012:     }",
          "1013:     return ValidateHeaderKeyIsLegal(key);",
          "1014:   }",
          "1018:     state_.dynamic_table_updates_allowed = 0;",
          "1020:     const auto* elem = state_.hpack_table.Lookup(*index);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "959:   bool FinishMaxTableSize(absl::optional<uint32_t> size) {",
          "960:     if (!size.has_value()) return false;",
          "964:       return false;",
          "965:     }",
          "970:       return false;",
          "971:     }",
          "972:     return true;",
          "",
          "[Removed Lines]",
          "961:     if (*dynamic_table_updates_allowed_ == 0) {",
          "962:       input_->SetErrorAndStopParsing(absl::InternalError(",
          "963:           \"More than two max table size changes in a single frame\"));",
          "966:     (*dynamic_table_updates_allowed_)--;",
          "967:     grpc_error_handle err = table_->SetCurrentTableSize(*size);",
          "968:     if (!err.ok()) {",
          "969:       input_->SetErrorAndStopParsing(std::move(err));",
          "",
          "[Added Lines]",
          "1032:     if (state_.dynamic_table_updates_allowed == 0) {",
          "1033:       input_->SetErrorAndStopParsing(",
          "1034:           HpackParseResult::TooManyDynamicTableSizeChangesError());",
          "1037:     state_.dynamic_table_updates_allowed--;",
          "1038:     if (!state_.hpack_table.SetCurrentTableSize(*size)) {",
          "1039:       input_->SetErrorAndStopParsing(",
          "1040:           HpackParseResult::IllegalTableSizeChangeError(",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "977:   void InvalidHPackIndexError(uint32_t index) {",
          "1014:   }",
          "1016:   Input* const input_;",
          "1023:   const LogInfo log_info_;",
          "1024: };",
          "",
          "[Removed Lines]",
          "978:     input_->SetErrorAndStopParsing(grpc_error_set_int(",
          "979:         grpc_error_set_int(absl::InternalError(\"Invalid HPACK index received\"),",
          "980:                            StatusIntProperty::kIndex,",
          "981:                            static_cast<intptr_t>(index)),",
          "982:         StatusIntProperty::kSize,",
          "983:         static_cast<intptr_t>(this->table_->num_entries())));",
          "984:   }",
          "986:   GPR_ATTRIBUTE_NOINLINE",
          "987:   void HandleMetadataParseError(const absl::Status& status) {",
          "988:     if (metadata_buffer_ != nullptr) {",
          "989:       metadata_buffer_->Clear();",
          "990:       metadata_buffer_ = nullptr;",
          "991:     }",
          "994:     input_->SetErrorAndContinueParsing(status);",
          "995:   }",
          "997:   GPR_ATTRIBUTE_NOINLINE",
          "998:   void HandleMetadataHardSizeLimitExceeded(const HPackTable::Memento& md) {",
          "1001:     std::string summary;",
          "1002:     std::string error_message;",
          "1003:     if (metadata_buffer_ != nullptr) {",
          "1004:       MetadataSizeLimitExceededEncoder encoder(summary);",
          "1005:       metadata_buffer_->Encode(&encoder);",
          "1006:     }",
          "1007:     summary = absl::StrCat(\"; adding \", md.md.key(), \" (length \",",
          "1008:                            md.md.transport_size(), \"B)\",",
          "1009:                            summary.empty() ? \"\" : \" to \", summary);",
          "1010:     error_message = absl::StrCat(",
          "1011:         \"received metadata size exceeds hard limit (\", *frame_length_, \" vs. \",",
          "1012:         metadata_early_detection_->hard_limit(), \")\", summary);",
          "1013:     HandleMetadataParseError(absl::ResourceExhaustedError(error_message));",
          "1017:   grpc_metadata_batch* metadata_buffer_;",
          "1018:   HPackTable* const table_;",
          "1019:   uint8_t* const dynamic_table_updates_allowed_;",
          "1020:   uint32_t* const frame_length_;",
          "1022:   RandomEarlyDetection* metadata_early_detection_;",
          "",
          "[Added Lines]",
          "1050:     input_->SetErrorAndStopParsing(",
          "1051:         HpackParseResult::InvalidHpackIndexError(index));",
          "1055:   grpc_metadata_batch*& metadata_buffer_;",
          "1056:   InterSliceState& state_;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1051:   }",
          "1052:   boundary_ = boundary;",
          "1053:   priority_ = priority;",
          "1059:   log_info_ = log_info;",
          "",
          "[Removed Lines]",
          "1054:   dynamic_table_updates_allowed_ = 2;",
          "1055:   frame_length_ = 0;",
          "1056:   metadata_early_detection_ = RandomEarlyDetection(",
          "",
          "[Added Lines]",
          "1088:   state_.dynamic_table_updates_allowed = 2;",
          "1089:   state_.metadata_early_detection.SetLimits(",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1062: grpc_error_handle HPackParser::Parse(const grpc_slice& slice, bool is_last) {",
          "1063:   if (GPR_UNLIKELY(!unparsed_bytes_.empty())) {",
          "1064:     std::vector<uint8_t> buffer = std::move(unparsed_bytes_);",
          "1069:   }",
          "1070:   return ParseInput(Input(slice.refcount, GRPC_SLICE_START_PTR(slice),",
          "1072:                     is_last);",
          "1073: }",
          "1075: grpc_error_handle HPackParser::ParseInput(Input input, bool is_last) {",
          "1076:   ParseInputInner(&input);",
          "1079:       HandleMetadataSoftSizeLimitExceeded(&input);",
          "1080:     }",
          "1089:     }",
          "1092:   }",
          "1094: }",
          "1096: void HPackParser::ParseInputInner(Input* input) {",
          "",
          "[Removed Lines]",
          "1065:     buffer.insert(buffer.end(), GRPC_SLICE_START_PTR(slice),",
          "1066:                   GRPC_SLICE_END_PTR(slice));",
          "1067:     return ParseInput(",
          "1068:         Input(nullptr, buffer.data(), buffer.data() + buffer.size()), is_last);",
          "1071:                           GRPC_SLICE_END_PTR(slice)),",
          "1077:   if (is_last) {",
          "1078:     if (metadata_early_detection_.Reject(frame_length_)) {",
          "1081:     global_stats().IncrementHttp2MetadataSize(frame_length_);",
          "1082:   }",
          "1083:   if (input.eof_error()) {",
          "1084:     if (GPR_UNLIKELY(is_last && is_boundary())) {",
          "1085:       auto err = input.TakeError();",
          "1086:       if (!err.ok() && !IsStreamError(err)) return err;",
          "1087:       return absl::InternalError(",
          "1088:           \"Incomplete header at the end of a header/continuation sequence\");",
          "1090:     unparsed_bytes_ = std::vector<uint8_t>(input.frontier(), input.end_ptr());",
          "1091:     return input.TakeError();",
          "1093:   return input.TakeError();",
          "",
          "[Added Lines]",
          "1097:     unparsed_bytes_.insert(unparsed_bytes_.end(), GRPC_SLICE_START_PTR(slice),",
          "1098:                            GRPC_SLICE_END_PTR(slice));",
          "1099:     if (!(is_last && is_boundary()) &&",
          "1100:         unparsed_bytes_.size() < min_progress_size_) {",
          "1102:       return absl::OkStatus();",
          "1103:     }",
          "1105:     return ParseInput(Input(nullptr, buffer.data(),",
          "1106:                             buffer.data() + buffer.size(), state_.frame_error),",
          "1107:                       is_last);",
          "1110:                           GRPC_SLICE_END_PTR(slice), state_.frame_error),",
          "1116:   if (is_last && is_boundary()) {",
          "1117:     if (state_.metadata_early_detection.Reject(state_.frame_length)) {",
          "1120:     global_stats().IncrementHttp2MetadataSize(state_.frame_length);",
          "1121:     if (!state_.frame_error.connection_error() &&",
          "1122:         (input.eof_error() || state_.parse_state != ParseState::kTop)) {",
          "1123:       state_.frame_error = HpackParseResult::IncompleteHeaderAtBoundaryError();",
          "1124:     }",
          "1125:     state_.frame_length = 0;",
          "1126:     return std::exchange(state_.frame_error, HpackParseResult()).Materialize();",
          "1127:   } else {",
          "1128:     if (input.eof_error() && !state_.frame_error.connection_error()) {",
          "1129:       unparsed_bytes_ = std::vector<uint8_t>(input.frontier(), input.end_ptr());",
          "1130:       min_progress_size_ = input.min_progress_size();",
          "1132:     return state_.frame_error.Materialize();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1099:       break;",
          "1100:     case Priority::Included: {",
          "1101:       if (input->remaining() < 5) {",
          "1103:         return;",
          "1104:       }",
          "1105:       input->Advance(5);",
          "",
          "[Removed Lines]",
          "1102:         input->UnexpectedEOF();",
          "",
          "[Added Lines]",
          "1142:         input->UnexpectedEOF(/*min_progress_size=*/5);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1108:     }",
          "1109:   }",
          "1110:   while (!input->end_of_stream()) {",
          "1115:       return;",
          "1116:     }",
          "1117:     input->UpdateFrontier();",
          "",
          "[Removed Lines]",
          "1111:     if (GPR_UNLIKELY(!Parser(input, metadata_buffer_, &table_,",
          "1112:                              &dynamic_table_updates_allowed_, &frame_length_,",
          "1113:                              &metadata_early_detection_, log_info_)",
          "1114:                           .Parse())) {",
          "",
          "[Added Lines]",
          "1151:     if (GPR_UNLIKELY(",
          "1152:             !Parser(input, metadata_buffer_, state_, log_info_).Parse())) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1121: void HPackParser::FinishFrame() { metadata_buffer_ = nullptr; }",
          "1123: void HPackParser::HandleMetadataSoftSizeLimitExceeded(Input* input) {",
          "1140:   input->SetErrorAndContinueParsing(",
          "1142: }",
          "1144: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "1126:   std::string summary;",
          "1127:   std::string error_message;",
          "1128:   if (metadata_buffer_ != nullptr) {",
          "1129:     MetadataSizeLimitExceededEncoder encoder(summary);",
          "1130:     metadata_buffer_->Encode(&encoder);",
          "1131:   }",
          "1132:   error_message = absl::StrCat(",
          "1133:       \"received metadata size exceeds soft limit (\", frame_length_, \" vs. \",",
          "1134:       metadata_early_detection_.soft_limit(),",
          "1135:       \"), rejecting requests with some random probability\", summary);",
          "1136:   if (metadata_buffer_ != nullptr) {",
          "1137:     metadata_buffer_->Clear();",
          "1138:     metadata_buffer_ = nullptr;",
          "1139:   }",
          "1141:       absl::ResourceExhaustedError(error_message));",
          "",
          "[Added Lines]",
          "1163:       HpackParseResult::SoftMetadataLimitExceededError(",
          "1164:           std::exchange(metadata_buffer_, nullptr), state_.frame_length,",
          "1165:           state_.metadata_early_detection.soft_limit()));",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.h -> src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <grpc/support/port_platform.h>",
          "24: #include <stdint.h>",
          "26: #include <vector>",
          "28: #include <grpc/slice.h>",
          "30: #include \"src/core/ext/transport/chttp2/transport/frame.h\"",
          "31: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "32: #include \"src/core/lib/backoff/random_early_detection.h\"",
          "33: #include \"src/core/lib/iomgr/error.h\"",
          "34: #include \"src/core/lib/transport/metadata_batch.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <stddef.h>",
          "27: #include <string>",
          "28: #include <utility>",
          "31: #include \"absl/strings/str_cat.h\"",
          "32: #include \"absl/strings/string_view.h\"",
          "33: #include \"absl/types/optional.h\"",
          "34: #include \"absl/types/span.h\"",
          "35: #include \"absl/types/variant.h\"",
          "40: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "44: #include \"src/core/lib/slice/slice.h\"",
          "45: #include \"src/core/lib/slice/slice_refcount.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   void FinishFrame();",
          "97:   bool is_boundary() const { return boundary_ != Boundary::None; }",
          "99:   bool is_eof() const { return boundary_ == Boundary::EndOfStream; }",
          "101:  private:",
          "103:   class Parser;",
          "104:   class Input;",
          "107:   grpc_error_handle ParseInput(Input input, bool is_last);",
          "108:   void ParseInputInner(Input* input);",
          "",
          "[Removed Lines]",
          "95:   HPackTable* hpack_table() { return &table_; }",
          "105:   class String;",
          "",
          "[Added Lines]",
          "107:   HPackTable* hpack_table() { return &state_.hpack_table; }",
          "114:   size_t buffered_bytes() const { return unparsed_bytes_.size(); }",
          "123:   class String {",
          "124:    public:",
          "126:     struct StringResult;",
          "128:     String() : value_(absl::Span<const uint8_t>()) {}",
          "129:     String(const String&) = delete;",
          "130:     String& operator=(const String&) = delete;",
          "131:     String(String&& other) noexcept : value_(std::move(other.value_)) {",
          "132:       other.value_ = absl::Span<const uint8_t>();",
          "133:     }",
          "134:     String& operator=(String&& other) noexcept {",
          "135:       value_ = std::move(other.value_);",
          "136:       other.value_ = absl::Span<const uint8_t>();",
          "137:       return *this;",
          "138:     }",
          "141:     Slice Take();",
          "144:     absl::string_view string_view() const;",
          "147:     static StringResult Parse(Input* input, bool is_huff, size_t length);",
          "150:     static StringResult ParseBinary(Input* input, bool is_huff, size_t length);",
          "152:    private:",
          "153:     void AppendBytes(const uint8_t* data, size_t length);",
          "154:     explicit String(std::vector<uint8_t> v) : value_(std::move(v)) {}",
          "155:     explicit String(absl::Span<const uint8_t> v) : value_(v) {}",
          "156:     String(grpc_slice_refcount* r, const uint8_t* begin, const uint8_t* end)",
          "157:         : value_(Slice::FromRefcountAndBytes(r, begin, end)) {}",
          "161:     template <typename Out>",
          "162:     static HpackParseStatus ParseHuff(Input* input, uint32_t length,",
          "163:                                       Out output);",
          "166:     static StringResult ParseUncompressed(Input* input, uint32_t length,",
          "167:                                           uint32_t wire_size);",
          "170:     static StringResult Unbase64(String s);",
          "173:     static absl::optional<std::vector<uint8_t>> Unbase64Loop(",
          "174:         const uint8_t* cur, const uint8_t* end);",
          "176:     absl::variant<Slice, absl::Span<const uint8_t>, std::vector<uint8_t>>",
          "177:         value_;",
          "178:   };",
          "181:   struct StringPrefix {",
          "183:     uint32_t length;",
          "185:     bool huff;",
          "187:     std::string ToString() const {",
          "188:       return absl::StrCat(length, \" bytes \",",
          "189:                           huff ? \"huffman compressed\" : \"uncompressed\");",
          "190:     }",
          "191:   };",
          "209:   enum class ParseState : uint8_t {",
          "211:     kTop,",
          "213:     kParsingKeyLength,",
          "215:     kParsingKeyBody,",
          "217:     kSkippingKeyBody,",
          "219:     kParsingValueLength,",
          "221:     kParsingValueBody,",
          "223:     kSkippingValueLength,",
          "225:     kSkippingValueBody,",
          "226:   };",
          "229:   struct InterSliceState {",
          "230:     HPackTable hpack_table;",
          "232:     HpackParseResult frame_error;",
          "234:     uint32_t frame_length = 0;",
          "236:     uint32_t string_length;",
          "238:     uint8_t dynamic_table_updates_allowed;",
          "240:     ParseState parse_state = ParseState::kTop;",
          "242:     RandomEarlyDetection metadata_early_detection;",
          "244:     bool add_to_table;",
          "246:     bool is_string_huff_compressed;",
          "248:     bool is_binary_header;",
          "249:     absl::variant<const HPackTable::Memento*, Slice> key;",
          "250:   };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   std::vector<uint8_t> unparsed_bytes_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:   size_t min_progress_size_ = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:   Priority priority_;",
          "130:   LogInfo log_info_;",
          "134: };",
          "136: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "125:   uint8_t dynamic_table_updates_allowed_;",
          "127:   uint32_t frame_length_;",
          "128:   RandomEarlyDetection metadata_early_detection_;",
          "133:   HPackTable table_;",
          "",
          "[Added Lines]",
          "274:   InterSliceState state_;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc||src/core/ext/transport/chttp2/transport/hpack_parser_table.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc -> src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <algorithm>",
          "26: #include <cstddef>",
          "27: #include <cstring>",
          "29: #include <utility>",
          "31: #include \"absl/status/status.h\"",
          "33: #include \"absl/strings/string_view.h\"",
          "35: #include <grpc/support/log.h>",
          "37: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "38: #include \"src/core/ext/transport/chttp2/transport/http_trace.h\"",
          "39: #include \"src/core/lib/debug/trace.h\"",
          "40: #include \"src/core/lib/slice/slice.h\"",
          "",
          "[Removed Lines]",
          "28: #include <initializer_list>",
          "32: #include \"absl/strings/str_format.h\"",
          "",
          "[Added Lines]",
          "31: #include \"absl/strings/str_cat.h\"",
          "37: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   entries_.swap(entries);",
          "81: }",
          "84: void HPackTable::EvictOne() {",
          "85:   auto first_entry = entries_.PopOne();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: void HPackTable::MementoRingBuffer::ForEach(",
          "84:     absl::FunctionRef<void(uint32_t, const Memento&)> f) const {",
          "85:   uint32_t index = 0;",
          "86:   while (auto* m = Lookup(index++)) {",
          "87:     f(index, *m);",
          "88:   }",
          "89: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   max_bytes_ = max_bytes;",
          "101: }",
          "112:   if (GRPC_TRACE_FLAG_ENABLED(grpc_http_trace)) {",
          "113:     gpr_log(GPR_INFO, \"Update hpack parser table size to %d\", bytes);",
          "114:   }",
          "",
          "[Removed Lines]",
          "103: grpc_error_handle HPackTable::SetCurrentTableSize(uint32_t bytes) {",
          "104:   if (current_table_bytes_ == bytes) {",
          "105:     return absl::OkStatus();",
          "106:   }",
          "107:   if (bytes > max_bytes_) {",
          "108:     return absl::InternalError(absl::StrFormat(",
          "109:         \"Attempt to make hpack table %d bytes when max is %d bytes\", bytes,",
          "110:         max_bytes_));",
          "111:   }",
          "",
          "[Added Lines]",
          "111: bool HPackTable::SetCurrentTableSize(uint32_t bytes) {",
          "112:   if (current_table_bytes_ == bytes) return true;",
          "113:   if (bytes > max_bytes_) return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   uint32_t new_cap = std::max(hpack_constants::EntriesForBytes(bytes),",
          "120:                               hpack_constants::kInitialTableEntries);",
          "121:   entries_.Rebuild(new_cap);",
          "123: }",
          "134:   if (md.md.transport_size() > current_table_bytes_) {",
          "146:   }",
          "",
          "[Removed Lines]",
          "122:   return absl::OkStatus();",
          "125: grpc_error_handle HPackTable::Add(Memento md) {",
          "126:   if (current_table_bytes_ > max_bytes_) {",
          "127:     return GRPC_ERROR_CREATE(absl::StrFormat(",
          "128:         \"HPACK max table size reduced to %d but not reflected by hpack \"",
          "129:         \"stream (still at %d)\",",
          "130:         max_bytes_, current_table_bytes_));",
          "131:   }",
          "142:     while (entries_.num_entries()) {",
          "143:       EvictOne();",
          "144:     }",
          "145:     return absl::OkStatus();",
          "",
          "[Added Lines]",
          "124:   return true;",
          "127: bool HPackTable::Add(Memento md) {",
          "128:   if (current_table_bytes_ > max_bytes_) return false;",
          "132:     AddLargerThanCurrentTableSize();",
          "133:     return true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:   mem_used_ += md.md.transport_size();",
          "156:   entries_.Put(std::move(md));",
          "158: }",
          "160: namespace {",
          "",
          "[Removed Lines]",
          "157:   return absl::OkStatus();",
          "",
          "[Added Lines]",
          "145:   return true;",
          "146: }",
          "148: void HPackTable::AddLargerThanCurrentTableSize() {",
          "156:   while (entries_.num_entries()) {",
          "157:     EvictOne();",
          "158:   }",
          "159: }",
          "161: std::string HPackTable::TestOnlyDynamicTableAsString() const {",
          "162:   std::string out;",
          "163:   entries_.ForEach([&out](uint32_t i, const Memento& m) {",
          "164:     if (m.parse_status.ok()) {",
          "165:       absl::StrAppend(&out, i, \": \", m.md.DebugString(), \"\\n\");",
          "166:     } else {",
          "167:       absl::StrAppend(&out, i, \": \", m.parse_status.Materialize().ToString(),",
          "168:                       \"\\n\");",
          "169:     }",
          "170:   });",
          "171:   return out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:           [](absl::string_view, const Slice&) {",
          "237:             abort();  // not expecting to see this",
          "238:           }),",
          "240: }",
          "242: }  // namespace",
          "",
          "[Removed Lines]",
          "239:       absl::OkStatus()};",
          "",
          "[Added Lines]",
          "253:       HpackParseResult()};",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser_table.h||src/core/ext/transport/chttp2/transport/hpack_parser_table.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser_table.h -> src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdint.h>",
          "26: #include <vector>",
          "30: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "31: #include \"src/core/lib/gprpp/no_destruct.h\"",
          "33: #include \"src/core/lib/transport/metadata_batch.h\"",
          "34: #include \"src/core/lib/transport/parsed_metadata.h\"",
          "",
          "[Removed Lines]",
          "28: #include \"absl/status/status.h\"",
          "32: #include \"src/core/lib/iomgr/error.h\"",
          "",
          "[Added Lines]",
          "26: #include <string>",
          "29: #include \"absl/functional/function_ref.h\"",
          "32: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   HPackTable& operator=(const HPackTable&) = delete;",
          "47:   void SetMaxBytes(uint32_t max_bytes);",
          "50:   struct Memento {",
          "51:     ParsedMetadata<grpc_metadata_batch> md;",
          "53:   };",
          "",
          "[Removed Lines]",
          "48:   grpc_error_handle SetCurrentTableSize(uint32_t bytes);",
          "52:     absl::Status parse_status;",
          "",
          "[Added Lines]",
          "49:   bool SetCurrentTableSize(uint32_t bytes);",
          "50:   uint32_t current_table_size() { return current_table_bytes_; }",
          "54:     HpackParseResult parse_status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   }",
          "74:   uint32_t num_entries() const { return entries_.num_entries(); }",
          "",
          "[Removed Lines]",
          "71:   grpc_error_handle Add(Memento md) GRPC_MUST_USE_RESULT;",
          "",
          "[Added Lines]",
          "73:   bool Add(Memento md) GRPC_MUST_USE_RESULT;",
          "74:   void AddLargerThanCurrentTableSize();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   uint32_t test_only_table_size() const { return mem_used_; }",
          "79:  private:",
          "80:   struct StaticMementos {",
          "81:     StaticMementos();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   uint32_t max_bytes() const { return max_bytes_; }",
          "84:   uint32_t current_table_bytes() const { return current_table_bytes_; }",
          "87:   std::string TestOnlyDynamicTableAsString() const;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:     const Memento* Lookup(uint32_t index) const;",
          "101:     uint32_t max_entries() const { return max_entries_; }",
          "102:     uint32_t num_entries() const { return num_entries_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     void ForEach(absl::FunctionRef<void(uint32_t dynamic_index, const Memento&)>",
          "112:                      f) const;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc": [
          "File: src/core/ext/transport/chttp2/transport/parsing.cc -> src/core/ext/transport/chttp2/transport/parsing.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <initializer_list>",
          "25: #include <string>",
          "28: #include \"absl/base/attributes.h\"",
          "29: #include \"absl/status/status.h\"",
          "",
          "[Removed Lines]",
          "26: #include <utility>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: }",
          "472: static grpc_error_handle init_header_skip_frame_parser(",
          "475:   t->parser = grpc_chttp2_transport::Parser{",
          "476:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "477:   t->hpack_parser.BeginFrame(",
          "",
          "[Removed Lines]",
          "473:     grpc_chttp2_transport* t, HPackParser::Priority priority_type) {",
          "474:   bool is_eoh = t->expect_continuation_stream_id != 0;",
          "",
          "[Added Lines]",
          "472:     grpc_chttp2_transport* t, HPackParser::Priority priority_type,",
          "473:     bool is_eoh) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "595:       GRPC_CHTTP2_IF_TRACING(",
          "596:           gpr_log(GPR_ERROR,",
          "597:                   \"grpc_chttp2_stream disbanded before CONTINUATION received\"));",
          "599:     }",
          "600:     if (t->is_client) {",
          "601:       if (GPR_LIKELY((t->incoming_stream_id & 1) &&",
          "",
          "[Removed Lines]",
          "598:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "597:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:         GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "606:             GPR_ERROR, \"ignoring new grpc_chttp2_stream creation on client\"));",
          "607:       }",
          "609:     } else if (GPR_UNLIKELY(t->last_new_stream_id >= t->incoming_stream_id)) {",
          "610:       GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "611:           GPR_ERROR,",
          "",
          "[Removed Lines]",
          "608:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "607:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "613:           \"last grpc_chttp2_stream \"",
          "614:           \"id=%d, new grpc_chttp2_stream id=%d\",",
          "615:           t->last_new_stream_id, t->incoming_stream_id));",
          "617:     } else if (GPR_UNLIKELY((t->incoming_stream_id & 1) == 0)) {",
          "618:       GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "619:           GPR_ERROR,",
          "620:           \"ignoring grpc_chttp2_stream with non-client generated index %d\",",
          "621:           t->incoming_stream_id));",
          "623:     } else if (GPR_UNLIKELY(",
          "624:                    grpc_chttp2_stream_map_size(&t->stream_map) >=",
          "625:                    t->settings[GRPC_ACKED_SETTINGS]",
          "",
          "[Removed Lines]",
          "616:       return init_header_skip_frame_parser(t, priority_type);",
          "622:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "615:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "621:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "632:           \"grpc_chttp2_stream request id=%d, last grpc_chttp2_stream id=%d\",",
          "633:           t, std::string(t->peer_string.as_string_view()).c_str(),",
          "634:           t->incoming_stream_id, t->last_new_stream_id));",
          "636:     }",
          "637:     t->last_new_stream_id = t->incoming_stream_id;",
          "638:     s = t->incoming_stream =",
          "",
          "[Removed Lines]",
          "635:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "634:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "640:     if (GPR_UNLIKELY(s == nullptr)) {",
          "641:       GRPC_CHTTP2_IF_TRACING(",
          "642:           gpr_log(GPR_ERROR, \"grpc_chttp2_stream not accepted\"));",
          "644:     }",
          "645:     if (t->channelz_socket != nullptr) {",
          "646:       t->channelz_socket->RecordStreamStartedFromRemote();",
          "",
          "[Removed Lines]",
          "643:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "642:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "654:     GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "655:         GPR_ERROR, \"skipping already closed grpc_chttp2_stream header\"));",
          "656:     t->incoming_stream = nullptr;",
          "658:   }",
          "659:   t->parser = grpc_chttp2_transport::Parser{",
          "660:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "",
          "[Removed Lines]",
          "657:     return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "656:     return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "687:       break;",
          "688:     case 2:",
          "689:       gpr_log(GPR_ERROR, \"too many header frames received\");",
          "691:   }",
          "692:   if (frame_type == HPackParser::LogInfo::kTrailers && !t->header_eof) {",
          "693:     return GRPC_ERROR_CREATE(",
          "",
          "[Removed Lines]",
          "690:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "689:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "815:                          &unused)) {",
          "816:     grpc_chttp2_parsing_become_skip_parser(t);",
          "817:     if (s) {",
          "819:     }",
          "820:   }",
          "821:   return err;",
          "822: }",
          "",
          "[Removed Lines]",
          "818:       grpc_chttp2_cancel_stream(t, s, std::exchange(err, absl::OkStatus()));",
          "",
          "[Added Lines]",
          "817:       grpc_chttp2_cancel_stream(t, s, err);",
          "819:     return absl::OkStatus();",
          "",
          "---------------"
        ],
        "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h": [
          "File: src/core/lib/backoff/random_early_detection.h -> src/core/lib/backoff/random_early_detection.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   uint64_t soft_limit() const { return soft_limit_; }",
          "44:   uint64_t hard_limit() const { return hard_limit_; }",
          "46:  private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   void SetLimits(uint64_t soft_limit, uint64_t hard_limit) {",
          "47:     soft_limit_ = soft_limit;",
          "48:     hard_limit_ = hard_limit;",
          "49:   }",
          "",
          "---------------"
        ],
        "src/core/lib/surface/validate_metadata.cc||src/core/lib/surface/validate_metadata.cc": [
          "File: src/core/lib/surface/validate_metadata.cc -> src/core/lib/surface/validate_metadata.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"src/core/lib/surface/validate_metadata.h\"",
          "23: #include \"absl/status/status.h\"",
          "26: #include \"absl/strings/string_view.h\"",
          "28: #include <grpc/grpc.h>",
          "",
          "[Removed Lines]",
          "24: #include \"absl/strings/escaping.h\"",
          "25: #include \"absl/strings/str_cat.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: };",
          "47: constexpr LegalHeaderKeyBits g_legal_header_key_bits;",
          "57:   for (uint8_t c : x) {",
          "58:     if (!legal_bits.is_set(c)) {",
          "60:     }",
          "61:   }",
          "63: }",
          "64: }  // namespace",
          "67:   if (key.empty()) {",
          "69:   }",
          "70:   if (key.size() > UINT32_MAX) {",
          "73:   }",
          "75: }",
          "77: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "49: GPR_ATTRIBUTE_NOINLINE",
          "50: absl::Status DoesNotConformTo(absl::string_view x, const char* err_desc) {",
          "51:   return absl::InternalError(absl::StrCat(err_desc, \": \", x, \" (hex \",",
          "52:                                           absl::BytesToHexString(x), \")\"));",
          "53: }",
          "55: absl::Status ConformsTo(absl::string_view x, const BitSet<256>& legal_bits,",
          "56:                         const char* err_desc) {",
          "59:       return DoesNotConformTo(x, err_desc);",
          "62:   return absl::OkStatus();",
          "66: absl::Status ValidateHeaderKeyIsLegal(absl::string_view key) {",
          "68:     return absl::InternalError(\"Metadata keys cannot be zero length\");",
          "71:     return absl::InternalError(",
          "72:         \"Metadata keys cannot be larger than UINT32_MAX\");",
          "74:   return ConformsTo(key, g_legal_header_key_bits, \"Illegal header key\");",
          "",
          "[Added Lines]",
          "47: ValidateMetadataResult ConformsTo(absl::string_view x,",
          "48:                                   const BitSet<256>& legal_bits,",
          "49:                                   ValidateMetadataResult error) {",
          "52:       return error;",
          "55:   return ValidateMetadataResult::kOk;",
          "56: }",
          "58: absl::Status UpgradeToStatus(ValidateMetadataResult result) {",
          "59:   if (result == ValidateMetadataResult::kOk) return absl::OkStatus();",
          "60:   return absl::InternalError(ValidateMetadataResultToString(result));",
          "65: ValidateMetadataResult ValidateHeaderKeyIsLegal(absl::string_view key) {",
          "67:     return ValidateMetadataResult::kCannotBeZeroLength;",
          "70:     return ValidateMetadataResult::kTooLong;",
          "71:   }",
          "72:   return ConformsTo(key, g_legal_header_key_bits,",
          "73:                     ValidateMetadataResult::kIllegalHeaderKey);",
          "74: }",
          "76: const char* ValidateMetadataResultToString(ValidateMetadataResult result) {",
          "77:   switch (result) {",
          "78:     case ValidateMetadataResult::kOk:",
          "79:       return \"Ok\";",
          "80:     case ValidateMetadataResult::kCannotBeZeroLength:",
          "81:       return \"Metadata keys cannot be zero length\";",
          "82:     case ValidateMetadataResult::kTooLong:",
          "83:       return \"Metadata keys cannot be larger than UINT32_MAX\";",
          "84:     case ValidateMetadataResult::kIllegalHeaderKey:",
          "85:       return \"Illegal header key\";",
          "86:     case ValidateMetadataResult::kIllegalHeaderValue:",
          "87:       return \"Illegal header value\";",
          "89:   GPR_UNREACHABLE_CODE(return \"Unknown\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: }",
          "84: grpc_error_handle grpc_validate_header_key_is_legal(const grpc_slice& slice) {",
          "87: }",
          "89: int grpc_header_key_is_legal(grpc_slice slice) {",
          "",
          "[Removed Lines]",
          "85:   return grpc_core::ValidateHeaderKeyIsLegal(",
          "86:       grpc_core::StringViewFromSlice(slice));",
          "",
          "[Added Lines]",
          "100:   return grpc_core::UpgradeToStatus(grpc_core::ValidateHeaderKeyIsLegal(",
          "101:       grpc_core::StringViewFromSlice(slice)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105: grpc_error_handle grpc_validate_header_nonbin_value_is_legal(",
          "106:     const grpc_slice& slice) {",
          "110: }",
          "112: int grpc_header_nonbin_value_is_legal(grpc_slice slice) {",
          "",
          "[Removed Lines]",
          "107:   return grpc_core::ConformsTo(grpc_core::StringViewFromSlice(slice),",
          "108:                                g_legal_header_non_bin_value_bits,",
          "109:                                \"Illegal header value\");",
          "",
          "[Added Lines]",
          "122:   return grpc_core::UpgradeToStatus(grpc_core::ConformsTo(",
          "123:       grpc_core::StringViewFromSlice(slice), g_legal_header_non_bin_value_bits,",
          "124:       grpc_core::ValidateMetadataResult::kIllegalHeaderValue));",
          "",
          "---------------"
        ],
        "src/core/lib/surface/validate_metadata.h||src/core/lib/surface/validate_metadata.h": [
          "File: src/core/lib/surface/validate_metadata.h -> src/core/lib/surface/validate_metadata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <cstring>",
          "29: #include \"absl/strings/string_view.h\"",
          "31: #include <grpc/slice.h>",
          "",
          "[Removed Lines]",
          "28: #include \"absl/status/status.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: namespace grpc_core {",
          "42: grpc_error_handle grpc_validate_header_key_is_legal(const grpc_slice& slice);",
          "43: grpc_error_handle grpc_validate_header_nonbin_value_is_legal(",
          "",
          "[Removed Lines]",
          "38: absl::Status ValidateHeaderKeyIsLegal(absl::string_view key);",
          "40: }",
          "",
          "[Added Lines]",
          "37: enum class ValidateMetadataResult : uint8_t {",
          "38:   kOk,",
          "39:   kCannotBeZeroLength,",
          "40:   kTooLong,",
          "41:   kIllegalHeaderKey,",
          "42:   kIllegalHeaderValue",
          "43: };",
          "45: const char* ValidateMetadataResultToString(ValidateMetadataResult result);",
          "48: ValidateMetadataResult ValidateHeaderKeyIsLegal(absl::string_view key);",
          "50: }  // namespace grpc_core",
          "",
          "---------------"
        ],
        "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py": [
          "File: src/python/grpcio/grpc_core_dependencies.py -> src/python/grpcio/grpc_core_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "112:     'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "113:     'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "114:     'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "115:     'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "116:     'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_fuzzer_test.cc -> test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <string>",
          "22: #include <utility>",
          "24: #include <grpc/grpc.h>",
          "25: #include <grpc/slice.h>",
          "26: #include <grpc/support/log.h>",
          "28: #include \"src/core/ext/transport/chttp2/transport/hpack_parser.h\"",
          "29: #include \"src/core/lib/gprpp/ref_counted_ptr.h\"",
          "30: #include \"src/core/lib/iomgr/exec_ctx.h\"",
          "31: #include \"src/core/lib/resource_quota/arena.h\"",
          "32: #include \"src/core/lib/resource_quota/memory_quota.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdint.h>",
          "26: #include \"absl/cleanup/cleanup.h\"",
          "34: #include \"src/core/lib/gprpp/status_helper.h\"",
          "35: #include \"src/core/lib/iomgr/error.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: DEFINE_PROTO_FUZZER(const hpack_parser_fuzzer::Msg& msg) {",
          "46:   if (squelch) gpr_set_log_function(dont_log);",
          "47:   grpc_init();",
          "48:   auto memory_allocator = grpc_core::ResourceQuota::Default()",
          "49:                               ->memory_quota()",
          "50:                               ->CreateMemoryAllocator(\"test-allocator\");",
          "51:   {",
          "52:     std::unique_ptr<grpc_core::HPackParser> parser(new grpc_core::HPackParser);",
          "53:     for (int i = 0; i < msg.frames_size(); i++) {",
          "54:       auto arena = grpc_core::MakeScopedArena(1024, &memory_allocator);",
          "55:       grpc_core::ExecCtx exec_ctx;",
          "56:       grpc_metadata_batch b(arena.get());",
          "58:       const auto& frame = msg.frames(i);",
          "59:       grpc_core::HPackParser::Boundary boundary =",
          "60:           grpc_core::HPackParser::Boundary::None;",
          "61:       if (frame.end_of_headers()) {",
          "62:         boundary = grpc_core::HPackParser::Boundary::EndOfHeaders;",
          "63:       }",
          "64:       if (frame.end_of_stream()) {",
          "65:         boundary = grpc_core::HPackParser::Boundary::EndOfStream;",
          "82:       }",
          "84:       parser->BeginFrame(",
          "",
          "[Removed Lines]",
          "66:       }",
          "67:       grpc_core::HPackParser::Priority priority =",
          "68:           grpc_core::HPackParser::Priority::None;",
          "69:       if (frame.priority()) {",
          "70:         priority = grpc_core::HPackParser::Priority::Included;",
          "71:       }",
          "72:       int max_length = 1024;",
          "73:       int absolute_max_length = 1024;",
          "74:       if (absolute_max_length < max_length) {",
          "75:         std::swap(absolute_max_length, max_length);",
          "76:       }",
          "77:       if (frame.max_metadata_length() != 0) {",
          "78:         max_length = frame.max_metadata_length();",
          "79:       }",
          "80:       if (frame.absolute_max_metadata_length() != 0) {",
          "81:         absolute_max_length = frame.absolute_max_metadata_length();",
          "",
          "[Added Lines]",
          "54:   auto cleanup = absl::MakeCleanup(grpc_shutdown);",
          "60:     int max_length = 1024;",
          "61:     int absolute_max_length = 1024;",
          "62:     bool can_update_max_length = true;",
          "63:     bool can_add_priority = true;",
          "69:       if (frame.parse_size() == 0) continue;",
          "73:       if (can_update_max_length) {",
          "74:         if (frame.max_metadata_length() != 0) {",
          "75:           max_length = std::max(0, frame.max_metadata_length());",
          "76:         }",
          "77:         if (frame.absolute_max_metadata_length() != 0) {",
          "78:           absolute_max_length =",
          "79:               std::max(0, frame.absolute_max_metadata_length());",
          "80:         }",
          "81:         if (absolute_max_length < max_length) {",
          "82:           std::swap(absolute_max_length, max_length);",
          "83:         }",
          "84:       }",
          "86:       grpc_core::HPackParser::Priority priority =",
          "87:           grpc_core::HPackParser::Priority::None;",
          "88:       if (can_add_priority && frame.priority()) {",
          "89:         priority = grpc_core::HPackParser::Priority::Included;",
          "90:       }",
          "93:       can_update_max_length = false;",
          "94:       can_add_priority = false;",
          "97:         can_update_max_length = true;",
          "101:         can_update_max_length = true;",
          "102:         can_add_priority = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:               1, grpc_core::HPackParser::LogInfo::kHeaders, false});",
          "88:       int stop_buffering_ctr =",
          "89:           std::max(-1, frame.stop_buffering_after_segments());",
          "91:         grpc_slice buffer =",
          "92:             grpc_slice_from_copied_buffer(parse.data(), parse.size());",
          "94:         grpc_slice_unref(buffer);",
          "95:         stop_buffering_ctr--;",
          "96:         if (0 == stop_buffering_ctr) parser->StopBufferingFrame();",
          "97:       }",
          "98:       parser->FinishFrame();",
          "99:     }",
          "100:   }",
          "102: }",
          "",
          "[Removed Lines]",
          "90:       for (const auto& parse : frame.parse()) {",
          "93:         (void)parser->Parse(buffer, i == msg.frames_size() - 1);",
          "101:   grpc_shutdown();",
          "",
          "[Added Lines]",
          "111:       for (int idx = 0; idx < frame.parse_size(); idx++) {",
          "112:         const auto& parse = frame.parse(idx);",
          "115:         auto err = parser->Parse(buffer, idx == frame.parse_size() - 1);",
          "124:         GPR_ASSERT(static_cast<int>(parser->buffered_bytes() / 4) <",
          "125:                    std::max(1024, absolute_max_length));",
          "126:         if (!err.ok()) {",
          "127:           intptr_t unused;",
          "128:           if (grpc_error_get_int(err, grpc_core::StatusIntProperty::kStreamId,",
          "129:                                  &unused)) {",
          "131:           } else {",
          "133:             return;",
          "134:           }",
          "135:         }",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_table_test.cc||test/core/transport/chttp2/hpack_parser_table_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_table_test.cc -> test/core/transport/chttp2/hpack_parser_table_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "25: #include \"absl/strings/str_cat.h\"",
          "26: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"absl/status/status.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:             ParsedMetadata<grpc_metadata_batch>::FromSlicePair{},",
          "125:             std::move(key_slice), std::move(value_slice),",
          "126:             key.length() + value.length() + 32),",
          "130:     AssertIndex(&tbl, 1 + hpack_constants::kLastStaticEntry, key.c_str(),",
          "131:                 value.c_str());",
          "132:     if (i) {",
          "",
          "[Removed Lines]",
          "127:         absl::OkStatus()};",
          "128:     auto add_err = tbl.Add(std::move(memento));",
          "129:     ASSERT_EQ(add_err, absl::OkStatus());",
          "",
          "[Added Lines]",
          "126:         HpackParseResult()};",
          "127:     ASSERT_TRUE(tbl.Add(std::move(memento)));",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_test.cc -> test/core/transport/chttp2/hpack_parser_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"src/core/ext/transport/chttp2/transport/hpack_parser.h\"",
          "23: #include <memory>",
          "24: #include <string>",
          "",
          "[Removed Lines]",
          "21: #include <stdlib.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: #include \"absl/status/status.h\"",
          "28: #include \"absl/status/statusor.h\"",
          "29: #include \"absl/strings/str_cat.h\"",
          "31: #include \"absl/types/optional.h\"",
          "32: #include \"gmock/gmock.h\"",
          "33: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "30: #include \"absl/strings/string_view.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: const uint32_t kEndOfHeaders = 8;",
          "62: struct TestInput {",
          "65:   uint32_t flags;",
          "66: };",
          "68: struct Test {",
          "69:   absl::optional<size_t> table_size;",
          "70:   absl::optional<size_t> max_metadata_size;",
          "71:   std::vector<TestInput> inputs;",
          "72: };",
          "74: class ParseTest : public ::testing::TestWithParam<Test> {",
          "75:  public:",
          "76:   ParseTest() { grpc_init(); }",
          "",
          "[Removed Lines]",
          "63:   absl::string_view input;",
          "64:   absl::StatusOr<absl::string_view> expected_parse;",
          "",
          "[Added Lines]",
          "60:   std::string input;",
          "61:   absl::StatusOr<std::string> expected_parse;",
          "66:   std::string name;",
          "73: inline const char* NameFromConfig(",
          "74:     const ::testing::TestParamInfo<Test>& config) {",
          "75:   return config.param.name.c_str();",
          "76: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     parser_ = std::make_unique<HPackParser>();",
          "89:     if (GetParam().table_size.has_value()) {",
          "90:       parser_->hpack_table()->SetMaxBytes(GetParam().table_size.value());",
          "94:     }",
          "95:   }",
          "",
          "[Removed Lines]",
          "91:       EXPECT_EQ(parser_->hpack_table()->SetCurrentTableSize(",
          "92:                     GetParam().table_size.value()),",
          "93:                 absl::OkStatus());",
          "",
          "[Added Lines]",
          "95:       EXPECT_TRUE(parser_->hpack_table()->SetCurrentTableSize(",
          "96:           GetParam().table_size.value()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:   void TestVector(grpc_slice_split_mode mode,",
          "103:                   absl::optional<size_t> max_metadata_size,",
          "106:     MemoryAllocator memory_allocator = MemoryAllocator(",
          "107:         ResourceQuota::Default()->memory_quota()->CreateMemoryAllocator(",
          "108:             \"test\"));",
          "",
          "[Removed Lines]",
          "104:                   absl::string_view hexstring,",
          "105:                   absl::StatusOr<absl::string_view> expect, uint32_t flags) {",
          "",
          "[Added Lines]",
          "107:                   std::string hexstring, absl::StatusOr<std::string> expect,",
          "108:                   uint32_t flags) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:         grpc_error_get_status(err, Timestamp::InfFuture(), &code, &message,",
          "153:                               nullptr, nullptr);",
          "154:         EXPECT_EQ(code, static_cast<grpc_status_code>(expect.status().code()))",
          "156:         EXPECT_THAT(message, ::testing::HasSubstr(expect.status().message()))",
          "158:         saw_error = true;",
          "159:         if (flags & kFailureIsConnectionError) return;",
          "160:       }",
          "",
          "[Removed Lines]",
          "155:             << err;",
          "157:             << err;",
          "",
          "[Added Lines]",
          "158:             << err << \" slice[\" << i << \"]; input: \" << hexstring",
          "159:             << \"\\nTABLE:\\n\"",
          "160:             << parser_->hpack_table()->TestOnlyDynamicTableAsString();",
          "162:             << err << \" slice[\" << i << \"]; input: \" << hexstring",
          "163:             << \"\\nTABLE:\\n\"",
          "164:             << parser_->hpack_table()->TestOnlyDynamicTableAsString();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211: INSTANTIATE_TEST_SUITE_P(",
          "212:     ParseTest, ParseTest,",
          "213:     ::testing::Values(",
          "215:              {},",
          "216:              {",
          "",
          "[Removed Lines]",
          "214:         Test{{},",
          "",
          "[Added Lines]",
          "221:         Test{\"RfcTestD2\",",
          "222:              {},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:                  {\"82\", \":method: GET\\n\", 0},",
          "230:              }},",
          "232:              {},",
          "233:              {",
          "",
          "[Removed Lines]",
          "231:         Test{{},",
          "",
          "[Added Lines]",
          "239:         Test{\"RfcTestD3\",",
          "240:              {},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:                   \"custom-key: custom-value\\n\",",
          "258:                   0},",
          "259:              }},",
          "261:              {},",
          "262:              {",
          "",
          "[Removed Lines]",
          "260:         Test{{},",
          "",
          "[Added Lines]",
          "269:         Test{\"RfcTestD4\",",
          "270:              {},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:                   \"custom-key: custom-value\\n\",",
          "287:                   0},",
          "288:              }},",
          "290:              {},",
          "291:              {",
          "",
          "[Removed Lines]",
          "289:         Test{{256},",
          "",
          "[Added Lines]",
          "299:         Test{\"RfcTestD5\",",
          "300:              {256},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:                   \"version=1\\n\",",
          "325:                   0},",
          "326:              }},",
          "328:              {},",
          "329:              {",
          "",
          "[Removed Lines]",
          "327:         Test{{256},",
          "",
          "[Added Lines]",
          "338:         Test{\"RfcTestD6\",",
          "339:              {256},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "359:                   \"version=1\\n\",",
          "360:                   0},",
          "361:              }},",
          "363:              {1024},",
          "364:              {{\"3fc43fc4\", absl::InternalError(\"Attempt to make hpack table\"),",
          "365:                kFailureIsConnectionError}}},",
          "367:              {},",
          "368:              {{\"3ba4a41007f0a40f2d62696e8b632a5b29a40fa4a4281007f0\",",
          "369:                absl::InternalError(\"Invalid HPACK index received\"),",
          "370:                kFailureIsConnectionError}}},",
          "372:              {},",
          "373:              {{\"2aa41007f0a40f2d62696e8163a41f1f00275bf0692862a4dbf0f00963\",",
          "374:                absl::InternalError(",
          "375:                    \"More than two max table size changes in a single frame\"),",
          "376:                kFailureIsConnectionError}}},",
          "378:              {},",
          "379:              {{\"2aa41007f0a40f2d62696e8363271f00275bf06928626e2d213fa40fdbf0212\"",
          "380:                \"8215cf00963\",",
          "383:              {},",
          "384:              {{\"a4a41007f0a40f2d62696e8b635b29282d2762696e3b0921213fa41fdbf0211\"",
          "385:                \"007f07b282d62696ef009215c0921e51fe91b3b3f47ed5b282821215cf0\",",
          "",
          "[Removed Lines]",
          "362:         Test{{},",
          "366:         Test{{},",
          "371:         Test{{},",
          "377:         Test{{},",
          "381:                absl::InternalError(\"illegal base64 encoding\"), 0}}},",
          "382:         Test{{},",
          "",
          "[Added Lines]",
          "374:         Test{\"IllegalHpackTableGrowth\",",
          "375:              {},",
          "379:         Test{\"FuzzerFoundInvalidHpackIndexFuzzerFound1\",",
          "380:              {},",
          "385:         Test{\"FuzzerFoundMultipleTableSizeChanges1\",",
          "386:              {},",
          "392:         Test{\"FuzzerFoundIllegalHeaderKey1\",",
          "393:              {},",
          "397:                absl::InternalError(\"Illegal header key\"), 0}}},",
          "398:         Test{\"FuzzerFoundMultipleTableSizeChanges2\",",
          "399:              {},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "387:                    \"More than two max table size changes in a single frame\"),",
          "388:                kFailureIsConnectionError}}},",
          "389:         Test{",
          "390:             {},",
          "391:             {},",
          "392:             {{\"696969696969696969696969696969696969696969696969696969696969696\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:             \"FuzzerFoundInterOverflow1\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "398:               \"ffffffffffff632a5b29a428a42d0fdbf027f0628363696e092121\",",
          "399:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "400:               kEndOfHeaders | kFailureIsConnectionError}}},",
          "402:              {},",
          "403:              {{\"0e 00 00 df\",",
          "408:              {},",
          "409:              {",
          "",
          "[Removed Lines]",
          "401:         Test{{},",
          "404:                absl::InternalError(",
          "405:                    \"Error parsing ':status' metadata: error=not an integer\"),",
          "406:                0}}},",
          "407:         Test{{},",
          "",
          "[Added Lines]",
          "419:         Test{\"StatusIsAnInteger\",",
          "420:              {},",
          "423:                absl::InternalError(\"Error parsing ':status' metadata\"), 0}}},",
          "424:         Test{\"BinaryMetadataFromBase64\",",
          "425:              {},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "415:                   \"4d 51 3d 3d\",",
          "416:                   \"a.b.c-bin: omg2021\\n\", 0},",
          "417:              }},",
          "419:              {},",
          "420:              {// Binary metadata: created using:",
          "",
          "[Removed Lines]",
          "418:         Test{{},",
          "",
          "[Added Lines]",
          "436:         Test{\"Base64LegalEncoding\",",
          "437:              {},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "424:               {\"4009612e622e632d62696e1c6c75636b696c7920666f722075732c206974\"",
          "425:                \"27732074756573646179\",",
          "426:                absl::InternalError(\"Error parsing 'a.b.c-bin' metadata: \"",
          "428:                0},",
          "429:               {\"be\",",
          "430:                absl::InternalError(\"Error parsing 'a.b.c-bin' metadata: \"",
          "432:                0}}},",
          "434:              {},",
          "435:              {// created using:",
          "",
          "[Removed Lines]",
          "427:                                    \"error=illegal base64 encoding\"),",
          "431:                                    \"error=illegal base64 encoding\"),",
          "433:         Test{{},",
          "",
          "[Added Lines]",
          "446:                                    \"illegal base64 encoding\"),",
          "450:                                    \"illegal base64 encoding\"),",
          "452:         Test{\"TeIsTrailers\",",
          "453:              {},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "439:               {\"400274650767617262616765\",",
          "440:                absl::InternalError(\"Error parsing 'te' metadata\"), 0},",
          "441:               {\"be\", absl::InternalError(\"Error parsing 'te' metadata\"), 0}}},",
          "443:              128,",
          "444:              {",
          "445:                  {// Generated with: tools/codegen/core/gen_header_frame.py",
          "",
          "[Removed Lines]",
          "442:         Test{{},",
          "",
          "[Added Lines]",
          "462:         Test{\"MetadataSizeLimitCheck\",",
          "463:              {},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "450:                   \"616e67656c6963610762616767696e73\",",
          "451:                   absl::ResourceExhaustedError(",
          "452:                       \"received metadata size exceeds hard limit\"),",
          "462:                  {\"bebfc0c1\",",
          "",
          "[Removed Lines]",
          "453:                   0},",
          "456:                  {\"be\", \"angelica: baggins\\n\", 0},",
          "457:                  {\"bf\", \"amaranth: brandybuck\\n\", 0},",
          "458:                  {\"c0\", \"adalgrim: took\\n\", 0},",
          "459:                  {\"c1\", \"adaldrida: brandybuck\\n\", 0},",
          "",
          "[Added Lines]",
          "474:                   kEndOfHeaders},",
          "477:                  {\"be\", \"angelica: baggins\\n\", kEndOfHeaders},",
          "478:                  {\"bf\", \"amaranth: brandybuck\\n\", kEndOfHeaders},",
          "479:                  {\"c0\", \"adalgrim: took\\n\", kEndOfHeaders},",
          "480:                  {\"c1\", \"adaldrida: brandybuck\\n\", kEndOfHeaders},",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "465:                   0},",
          "466:              }},",
          "467:         Test{",
          "468:             {},",
          "469:             {},",
          "470:             {{\"be\", absl::InternalError(\"Invalid HPACK index received\"),",
          "471:               kFailureIsConnectionError}},",
          "472:         },",
          "473:         Test{",
          "474:             {},",
          "475:             {},",
          "476:             {{\"80\", absl::InternalError(\"Illegal hpack op code\"),",
          "477:               kFailureIsConnectionError}},",
          "478:         },",
          "479:         Test{",
          "480:             {},",
          "481:             {},",
          "482:             {{\"29\", \"\", kFailureIsConnectionError}},",
          "483:         },",
          "484:         Test{",
          "485:             {},",
          "486:             {},",
          "487:             {{\"\", \"\", kWithPriority}},",
          "488:         },",
          "489:         Test{",
          "490:             {},",
          "491:             {},",
          "492:             {{\"f5\", absl::InternalError(\"Invalid HPACK index received\"),",
          "493:               kFailureIsConnectionError}},",
          "494:         },",
          "495:         Test{",
          "496:             {},",
          "497:             {},",
          "498:             {{\"0f\", \"\", 0}},",
          "499:         },",
          "500:         Test{",
          "501:             {},",
          "502:             {},",
          "503:             {{\"7f\", \"\", 0}},",
          "504:         },",
          "505:         Test{",
          "506:             {},",
          "507:             {},",
          "509:         },",
          "510:         Test{",
          "511:             {},",
          "512:             {},",
          "513:             {{\"ffffffffff00ff\",",
          "",
          "[Removed Lines]",
          "508:             {{\"1bffffff7c1b\", \"\", 0}},",
          "",
          "[Added Lines]",
          "489:             \"SingleByteBE\",",
          "496:             \"SingleByte80\",",
          "503:             \"SingleByte29\",",
          "509:             \"EmptyWithPriority\",",
          "515:             \"SingleByteF5\",",
          "522:             \"SingleByte0f\",",
          "528:             \"SingleByte7f\",",
          "534:             \"FuzzerCoverage1bffffff7c1b\",",
          "537:             {{\"1bffffff7c1b\",",
          "538:               absl::ResourceExhaustedError(",
          "539:                   \"received metadata size exceeds hard limit\"),",
          "540:               0}},",
          "543:             \"FuzzerCoverageffffffffff00ff\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "515:               kFailureIsConnectionError}},",
          "516:         },",
          "517:         Test{",
          "518:             {},",
          "519:             {},",
          "520:             {{\"ff8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:             \"FuzzerCoverageIntegerOverflow2\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "524:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "525:               kFailureIsConnectionError}}},",
          "526:         Test{",
          "527:             {},",
          "528:             {9},",
          "529:             {{\"3f6672616d6573207ba2020656e645f6f665f686561646572733a2074727565a\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:             \"FuzzerCoverageMetadataLimits\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "535:               absl::ResourceExhaustedError(",
          "536:                   \"received metadata size exceeds hard limit\"),",
          "537:               kWithPriority}}},",
          "539:              {},",
          "540:              {{\"52046772706300073a737461747573033230300e7f\",",
          "541:                \":status: 200\\naccept-ranges: grpc\\n\", 0}}},",
          "543:              {},",
          "544:              {{\"a4a41007f0a40f2d62696e8beda42d5b63272129a410626907\",",
          "546:         Test{",
          "",
          "[Removed Lines]",
          "538:         Test{{},",
          "542:         Test{{},",
          "545:                absl::InternalError(\"illegal base64 encoding\"), 0}}},",
          "",
          "[Added Lines]",
          "573:         Test{\"FuzzerCoverage52046772706300073a737461747573033230300e7f\",",
          "574:              {},",
          "578:         Test{\"FuzzerCoveragea4a41007f0a40f2d62696e8beda42d5b63272129a410626907\",",
          "579:              {},",
          "582:                absl::InternalError(\"Illegal header key\"), 0}}},",
          "584:             \"HpackTableSizeWithBase64\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "601:                  kFailureIsConnectionError},",
          "602:             }},",
          "603:         Test{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:             \"HpackTableSizeWithBase64AndHuffman\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "657:                 {\"c0\", absl::InternalError(\"Invalid HPACK index received\"),",
          "658:                  kFailureIsConnectionError},",
          "659:             }},",
          "662:              {},",
          "663:              {{\"60\",",
          "664:                absl::InternalError(\"Incomplete header at the end of a \"",
          "665:                                    \"header/continuation sequence\"),",
          "666:                kEndOfStream | kFailureIsConnectionError}}},",
          "668:              {},",
          "669:              {{\"89\", \":status: 204\\n\", 0},",
          "670:               {\"89\", \":status: 204\\n\", 0},",
          "",
          "[Removed Lines]",
          "660:         Test{{}, {}, {{\"7a\", \"\", 0}}},",
          "661:         Test{{},",
          "667:         Test{{},",
          "",
          "[Added Lines]",
          "699:         Test{\"SingleByte7a\", {}, {}, {{\"7a\", \"\", 0}}},",
          "700:         Test{\"SingleByte60\",",
          "701:              {},",
          "707:         Test{\"FuzzerFoundMultipleTableSizeChanges3\",",
          "708:              {},",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "672:                absl::InternalError(",
          "673:                    \"More than two max table size changes in a single frame\"),",
          "674:                kFailureIsConnectionError}}},",
          "676:              {},",
          "677:              {{\"4005782d62696edbd94e1f7fbbf983267e36a313fd47c9bab54d5e592f5d\",",
          "678:                \"\", 0}}},",
          "681:         Test{",
          "682:             {},",
          "683:             {},",
          "684:             {{// Generated with: tools/codegen/core/gen_header_frame.py",
          "",
          "[Removed Lines]",
          "675:         Test{{},",
          "679:         Test{{}, {}, {{\"72656672657368\", \"\", 0}}},",
          "680:         Test{{}, {}, {{\"66e6645f74\", \"\", 0}, {\"66645f74\", \"\", 0}}},",
          "",
          "[Added Lines]",
          "716:         Test{\"FuzzerCoverage4005782d62696edbd94e1f7etc\",",
          "717:              {},",
          "721:         Test{\"FuzzerCoverage72656672657368\",",
          "722:              {},",
          "723:              {},",
          "724:              {{\"72656672657368\", \"\", 0}}},",
          "725:         Test{\"FuzzerCoverage66e6645f74Then66645f74\",",
          "726:              {},",
          "727:              {},",
          "728:              {{\"66e6645f74\", \"\", 0}, {\"66645f74\", \"\", 0}}},",
          "730:             \"MixedCaseHeadersAreStreamErrors\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "691:               \"be\", absl::InternalError(\"Illegal header key: MiXeD-CaSe\"), 0}}},",
          "692:         Test{",
          "693:             {},",
          "694:             {},",
          "695:             {{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",",
          "696:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "697:               kFailureIsConnectionError}}},",
          "699:              {},",
          "700:              {{\"dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad\"",
          "701:                \"adadadadadadadadadadadadadadadadadadadadadadadadadadadadadadada\"",
          "702:                \"dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad\"",
          "703:                \"adadadadadadadadadadadadadadadadadadada\",",
          "704:                absl::InternalError(\"Invalid HPACK index received\"),",
          "707: }  // namespace",
          "708: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "698:         Test{{},",
          "705:                kWithPriority | kFailureIsConnectionError}}}));",
          "",
          "[Added Lines]",
          "742:             \"FuzzerCoverageIntegerOverflow3\",",
          "748:         Test{\"Dadadadadada\",",
          "749:              {},",
          "756:                kWithPriority | kFailureIsConnectionError}}},",
          "757:         Test{\"MaliciousVarintEncoding\",",
          "758:              {},",
          "759:              {},",
          "760:              {{\"1f80808080808080808080808080808080808080808080808080808080\",",
          "761:                absl::InternalError(",
          "762:                    \"Malicious varint encoding detected in HPACK stream\"),",
          "763:                kFailureIsConnectionError}}}),",
          "764:     NameFromConfig);",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal": [
          "File: tools/doxygen/Doxyfile.c++.internal -> tools/doxygen/Doxyfile.c++.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292: src/core/ext/transport/chttp2/transport/hpack_encoder.h \\",
          "1293: src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "1294: src/core/ext/transport/chttp2/transport/hpack_encoder_table.h \\",
          "1295: src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "1296: src/core/ext/transport/chttp2/transport/hpack_parser.h \\",
          "1297: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "1296: src/core/ext/transport/chttp2/transport/hpack_parse_result.h \\",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal": [
          "File: tools/doxygen/Doxyfile.core.internal -> tools/doxygen/Doxyfile.core.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1069: src/core/ext/transport/chttp2/transport/hpack_encoder.h \\",
          "1070: src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "1071: src/core/ext/transport/chttp2/transport/hpack_encoder_table.h \\",
          "1072: src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "1073: src/core/ext/transport/chttp2/transport/hpack_parser.h \\",
          "1074: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1072: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "1073: src/core/ext/transport/chttp2/transport/hpack_parse_result.h \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19d06a78ec026d9ab34e9cb789786d145ade8237",
      "candidate_info": {
        "commit_hash": "19d06a78ec026d9ab34e9cb789786d145ade8237",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/19d06a78ec026d9ab34e9cb789786d145ade8237",
        "files": [
          "BUILD",
          "CMakeLists.txt",
          "Makefile",
          "build_autogenerated.yaml",
          "config.m4",
          "config.w32",
          "gRPC-C++.podspec",
          "gRPC-Core.podspec",
          "grpc.gemspec",
          "grpc.gyp",
          "include/grpc/impl/grpc_types.h",
          "package.xml",
          "src/core/ext/transport/chaotic_good/frame.cc",
          "src/core/ext/transport/chttp2/transport/chttp2_transport.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/internal.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h",
          "src/python/grpcio/grpc_core_dependencies.py",
          "test/core/end2end/tests/large_metadata.cc",
          "test/core/transport/chttp2/hpack_parser_fuzzer.proto",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc",
          "test/cpp/microbenchmarks/bm_chttp2_hpack.cc",
          "tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal"
        ],
        "message": "Add random early rejection for metadata (#32600)\n\n(hopefully last try)\n\nAdd new channel arg GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE as hard limit\nfor metadata. Change GRPC_ARG_MAX_METADATA_SIZE to be a soft limit.\nBehavior is as follows:\n\nHard limit\n(1) if hard limit is explicitly set, this will be used.\n(2) if hard limit is not explicitly set, maximum of default and soft\nlimit * 1.25 (if soft limit is set) will be used.\n\nSoft limit\n(1) if soft limit is explicitly set, this will be used.\n(2) if soft limit is not explicitly set, maximum of default and hard\nlimit * 0.8 (if hard limit is set) will be used.\n\nRequests between soft and hard limit will be rejected randomly, requests\nabove hard limit will be rejected.",
        "before_after_code_files": [
          "config.m4||config.m4",
          "config.w32||config.w32",
          "gRPC-C++.podspec||gRPC-C++.podspec",
          "gRPC-Core.podspec||gRPC-Core.podspec",
          "grpc.gemspec||grpc.gemspec",
          "grpc.gyp||grpc.gyp",
          "include/grpc/impl/grpc_types.h||include/grpc/impl/grpc_types.h",
          "src/core/ext/transport/chaotic_good/frame.cc||src/core/ext/transport/chaotic_good/frame.cc",
          "src/core/ext/transport/chttp2/transport/chttp2_transport.cc||src/core/ext/transport/chttp2/transport/chttp2_transport.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/internal.h||src/core/ext/transport/chttp2/transport/internal.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h",
          "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py",
          "test/core/end2end/tests/large_metadata.cc||test/core/end2end/tests/large_metadata.cc",
          "test/core/transport/chttp2/hpack_parser_fuzzer.proto||test/core/transport/chttp2/hpack_parser_fuzzer.proto",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc",
          "test/cpp/microbenchmarks/bm_chttp2_hpack.cc||test/cpp/microbenchmarks/bm_chttp2_hpack.cc",
          "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "config.m4||config.m4": [
          "File: config.m4 -> config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:     src/core/lib/address_utils/parse_address.cc \\",
          "486:     src/core/lib/address_utils/sockaddr_utils.cc \\",
          "487:     src/core/lib/backoff/backoff.cc \\",
          "488:     src/core/lib/channel/call_tracer.cc \\",
          "489:     src/core/lib/channel/channel_args.cc \\",
          "490:     src/core/lib/channel/channel_args_preconditioning.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:     src/core/lib/backoff/random_early_detection.cc \\",
          "",
          "---------------"
        ],
        "config.w32||config.w32": [
          "File: config.w32 -> config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     \"src\\\\core\\\\lib\\\\address_utils\\\\parse_address.cc \" +",
          "452:     \"src\\\\core\\\\lib\\\\address_utils\\\\sockaddr_utils.cc \" +",
          "453:     \"src\\\\core\\\\lib\\\\backoff\\\\backoff.cc \" +",
          "454:     \"src\\\\core\\\\lib\\\\channel\\\\call_tracer.cc \" +",
          "455:     \"src\\\\core\\\\lib\\\\channel\\\\channel_args.cc \" +",
          "456:     \"src\\\\core\\\\lib\\\\channel\\\\channel_args_preconditioning.cc \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     \"src\\\\core\\\\lib\\\\backoff\\\\random_early_detection.cc \" +",
          "",
          "---------------"
        ],
        "gRPC-C++.podspec||gRPC-C++.podspec": [
          "File: gRPC-C++.podspec -> gRPC-C++.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:                       'src/core/lib/address_utils/sockaddr_utils.h',",
          "712:                       'src/core/lib/avl/avl.h',",
          "713:                       'src/core/lib/backoff/backoff.h',",
          "714:                       'src/core/lib/channel/call_finalization.h',",
          "715:                       'src/core/lib/channel/call_tracer.h',",
          "716:                       'src/core/lib/channel/channel_args.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "714:                       'src/core/lib/backoff/random_early_detection.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1651:                               'src/core/lib/address_utils/sockaddr_utils.h',",
          "1652:                               'src/core/lib/avl/avl.h',",
          "1653:                               'src/core/lib/backoff/backoff.h',",
          "1654:                               'src/core/lib/channel/call_finalization.h',",
          "1655:                               'src/core/lib/channel/call_tracer.h',",
          "1656:                               'src/core/lib/channel/channel_args.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1655:                               'src/core/lib/backoff/random_early_detection.h',",
          "",
          "---------------"
        ],
        "gRPC-Core.podspec||gRPC-Core.podspec": [
          "File: gRPC-Core.podspec -> gRPC-Core.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085:                       'src/core/lib/avl/avl.h',",
          "1086:                       'src/core/lib/backoff/backoff.cc',",
          "1087:                       'src/core/lib/backoff/backoff.h',",
          "1088:                       'src/core/lib/channel/call_finalization.h',",
          "1089:                       'src/core/lib/channel/call_tracer.cc',",
          "1090:                       'src/core/lib/channel/call_tracer.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1088:                       'src/core/lib/backoff/random_early_detection.cc',",
          "1089:                       'src/core/lib/backoff/random_early_detection.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2340:                               'src/core/lib/address_utils/sockaddr_utils.h',",
          "2341:                               'src/core/lib/avl/avl.h',",
          "2342:                               'src/core/lib/backoff/backoff.h',",
          "2343:                               'src/core/lib/channel/call_finalization.h',",
          "2344:                               'src/core/lib/channel/call_tracer.h',",
          "2345:                               'src/core/lib/channel/channel_args.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2345:                               'src/core/lib/backoff/random_early_detection.h',",
          "",
          "---------------"
        ],
        "grpc.gemspec||grpc.gemspec": [
          "File: grpc.gemspec -> grpc.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:   s.files += %w( src/core/lib/avl/avl.h )",
          "995:   s.files += %w( src/core/lib/backoff/backoff.cc )",
          "996:   s.files += %w( src/core/lib/backoff/backoff.h )",
          "997:   s.files += %w( src/core/lib/channel/call_finalization.h )",
          "998:   s.files += %w( src/core/lib/channel/call_tracer.cc )",
          "999:   s.files += %w( src/core/lib/channel/call_tracer.h )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:   s.files += %w( src/core/lib/backoff/random_early_detection.cc )",
          "998:   s.files += %w( src/core/lib/backoff/random_early_detection.h )",
          "",
          "---------------"
        ],
        "grpc.gyp||grpc.gyp": [
          "File: grpc.gyp -> grpc.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "817:         'src/core/lib/address_utils/parse_address.cc',",
          "818:         'src/core/lib/address_utils/sockaddr_utils.cc',",
          "819:         'src/core/lib/backoff/backoff.cc',",
          "820:         'src/core/lib/channel/call_tracer.cc',",
          "821:         'src/core/lib/channel/channel_args.cc',",
          "822:         'src/core/lib/channel/channel_args_preconditioning.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:         'src/core/lib/backoff/random_early_detection.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:         'src/core/lib/address_utils/parse_address.cc',",
          "1304:         'src/core/lib/address_utils/sockaddr_utils.cc',",
          "1305:         'src/core/lib/backoff/backoff.cc',",
          "1306:         'src/core/lib/channel/call_tracer.cc',",
          "1307:         'src/core/lib/channel/channel_args.cc',",
          "1308:         'src/core/lib/channel/channel_args_preconditioning.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1307:         'src/core/lib/backoff/random_early_detection.cc',",
          "",
          "---------------"
        ],
        "include/grpc/impl/grpc_types.h||include/grpc/impl/grpc_types.h": [
          "File: include/grpc/impl/grpc_types.h -> include/grpc/impl/grpc_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "295: #define GRPC_ARG_TSI_MAX_FRAME_SIZE \"grpc.tsi.max_frame_size\"",
          "298: #define GRPC_ARG_MAX_METADATA_SIZE \"grpc.max_metadata_size\"",
          "300: #define GRPC_ARG_ALLOW_REUSEPORT \"grpc.so_reuseport\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:    max sum of all metadata key-value entries in a batch of headers. Some random",
          "298:    sample of requests between this limit and",
          "299:    `GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE` will be rejected. Defaults to maximum",
          "300:    of 8 KB and `GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE` * 0.8 (if set).",
          "304:    max sum of all metadata key-value entries in a batch of headers. All requests",
          "305:    exceeding this limit will be rejected. Defaults to maximum of 16 KB and",
          "307: #define GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE \"grpc.absolute_max_metadata_size\"",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chaotic_good/frame.cc||src/core/ext/transport/chaotic_good/frame.cc": [
          "File: src/core/ext/transport/chaotic_good/frame.cc -> src/core/ext/transport/chaotic_good/frame.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   Arena::PoolPtr<Metadata> metadata;",
          "157:   parser->BeginFrame(",
          "158:       metadata.get(), std::numeric_limits<uint32_t>::max(),",
          "159:       is_header ? HPackParser::Boundary::EndOfHeaders",
          "160:                 : HPackParser::Boundary::EndOfStream,",
          "161:       HPackParser::Priority::None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:       std::numeric_limits<uint32_t>::max(),",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/chttp2_transport.cc||src/core/ext/transport/chttp2/transport/chttp2_transport.cc": [
          "File: src/core/ext/transport/chttp2/transport/chttp2_transport.cc -> src/core/ext/transport/chttp2/transport/chttp2_transport.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: #define DEFAULT_CONNECTION_WINDOW_TARGET (1024 * 1024)",
          "104: #define MAX_WINDOW 0x7fffffffu",
          "105: #define MAX_WRITE_BUFFER_SIZE (64 * 1024 * 1024)",
          "108: #define DEFAULT_CLIENT_KEEPALIVE_TIME_MS INT_MAX",
          "109: #define DEFAULT_CLIENT_KEEPALIVE_TIMEOUT_MS 20000  // 20 seconds",
          "",
          "[Removed Lines]",
          "106: #define DEFAULT_MAX_HEADER_LIST_SIZE (8 * 1024)",
          "",
          "[Added Lines]",
          "106: #define DEFAULT_MAX_HEADER_LIST_SIZE (16 * 1024)",
          "107: #define DEFAULT_MAX_HEADER_LIST_SIZE_SOFT_LIMIT (8 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:                 .GetObjectRef<grpc_core::channelz::SocketNode::Security>());",
          "370:   }",
          "372:   static const struct {",
          "373:     absl::string_view channel_arg_name;",
          "374:     grpc_chttp2_setting_id setting_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:   const int soft_limit =",
          "374:       channel_args.GetInt(GRPC_ARG_MAX_METADATA_SIZE).value_or(-1);",
          "375:   if (soft_limit < 0) {",
          "379:     t->max_header_list_size_soft_limit = std::max(",
          "380:         DEFAULT_MAX_HEADER_LIST_SIZE_SOFT_LIMIT,",
          "381:         static_cast<int>(",
          "382:             0.8 * channel_args.GetInt(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE)",
          "383:                       .value_or(-1)));",
          "384:   } else {",
          "385:     t->max_header_list_size_soft_limit = soft_limit;",
          "386:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:                        0,",
          "389:                        INT32_MAX,",
          "390:                        {true, true}},",
          "392:                        GRPC_CHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE,",
          "393:                        -1,",
          "394:                        0,",
          "",
          "[Removed Lines]",
          "391:                       {GRPC_ARG_MAX_METADATA_SIZE,",
          "",
          "[Added Lines]",
          "407:                       {GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421:       if (value >= 0) {",
          "422:         queue_setting_update(t, setting.setting_id,",
          "423:                              grpc_core::Clamp(value, setting.min, setting.max));",
          "424:       }",
          "425:     } else if (channel_args.Contains(setting.channel_arg_name)) {",
          "426:       gpr_log(GPR_DEBUG, \"%s is not available on %s\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:       } else if (setting.setting_id ==",
          "441:                  GRPC_CHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE) {",
          "445:         const int soft_limit = channel_args.GetInt(GRPC_ARG_MAX_METADATA_SIZE)",
          "446:                                    .value_or(setting.default_value);",
          "447:         const int value = (soft_limit < (INT_MAX / 1.25))",
          "448:                               ? static_cast<int>(soft_limit * 1.25)",
          "449:                               : soft_limit;",
          "450:         if (value > DEFAULT_MAX_HEADER_LIST_SIZE) {",
          "451:           queue_setting_update(",
          "452:               t, setting.setting_id,",
          "453:               grpc_core::Clamp(value, setting.min, setting.max));",
          "454:         }",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "523: class HPackParser::Parser {",
          "524:  public:",
          "527:          uint8_t* dynamic_table_updates_allowed, uint32_t* frame_length,",
          "528:          LogInfo log_info)",
          "529:       : input_(input),",
          "530:         metadata_buffer_(metadata_buffer),",
          "531:         table_(table),",
          "532:         dynamic_table_updates_allowed_(dynamic_table_updates_allowed),",
          "533:         frame_length_(frame_length),",
          "535:         log_info_(log_info) {}",
          "",
          "[Removed Lines]",
          "525:   Parser(Input* input, grpc_metadata_batch* metadata_buffer,",
          "526:          uint32_t metadata_size_limit, HPackTable* table,",
          "534:         metadata_size_limit_(metadata_size_limit),",
          "",
          "[Added Lines]",
          "525:   Parser(Input* input, grpc_metadata_batch* metadata_buffer, HPackTable* table,",
          "527:          RandomEarlyDetection* metadata_early_detection, bool is_last,",
          "534:         metadata_early_detection_(metadata_early_detection),",
          "535:         is_last_(is_last),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "656:     if (GPR_UNLIKELY(metadata_buffer_ == nullptr)) return true;",
          "660:     }",
          "662:     metadata_buffer_->Set(md);",
          "",
          "[Removed Lines]",
          "658:     if (GPR_UNLIKELY(*frame_length_ > metadata_size_limit_)) {",
          "659:       return HandleMetadataSizeLimitExceeded(md);",
          "",
          "[Added Lines]",
          "659:     if (metadata_early_detection_->MustReject(*frame_length_)) {",
          "661:       return HandleMetadataSizeLimitExceeded(md, /*exceeded_hard_limit=*/true);",
          "662:     } else if (is_last_ && metadata_early_detection_->Reject(*frame_length_)) {",
          "664:       return HandleMetadataSizeLimitExceeded(md, /*exceeded_hard_limit=*/false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "817:   };",
          "819:   GPR_ATTRIBUTE_NOINLINE",
          "823:     std::string summary;",
          "824:     if (metadata_buffer_ != nullptr) {",
          "825:       MetadataSizeLimitExceededEncoder encoder(summary);",
          "826:       metadata_buffer_->Encode(&encoder);",
          "",
          "[Removed Lines]",
          "820:   bool HandleMetadataSizeLimitExceeded(const HPackTable::Memento& md) {",
          "",
          "[Added Lines]",
          "825:   bool HandleMetadataSizeLimitExceeded(const HPackTable::Memento& md,",
          "826:                                        bool exceeded_hard_limit) {",
          "830:     std::string error_message;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "828:     summary =",
          "829:         absl::StrCat(\"; adding \", md.key(), \" (length \", md.transport_size(),",
          "830:                      \"B)\", summary.empty() ? \"\" : \" to \", summary);",
          "831:     if (metadata_buffer_ != nullptr) metadata_buffer_->Clear();",
          "834:     return input_->MaybeSetErrorAndReturn(",
          "836:           return grpc_error_set_int(",
          "844:               StatusIntProperty::kStreamId, 0);",
          "845:         },",
          "846:         false);",
          "",
          "[Removed Lines]",
          "835:         [this, summary = std::move(summary)] {",
          "837:               grpc_error_set_int(",
          "838:                   GRPC_ERROR_CREATE(absl::StrCat(",
          "839:                       \"received initial metadata size exceeds limit (\",",
          "841:                       summary)),",
          "842:                   StatusIntProperty::kRpcStatus,",
          "843:                   GRPC_STATUS_RESOURCE_EXHAUSTED),",
          "",
          "[Added Lines]",
          "838:     if (exceeded_hard_limit) {",
          "839:       error_message = absl::StrCat(",
          "840:           \"received initial metadata size exceeds hard limit (\", *frame_length_,",
          "841:           \" vs. \", metadata_early_detection_->hard_limit(), \")\", summary);",
          "842:     } else {",
          "843:       error_message = absl::StrCat(",
          "844:           \"received initial metadata size exceeds soft limit (\", *frame_length_,",
          "845:           \" vs. \", metadata_early_detection_->soft_limit(),",
          "846:           \"), rejecting requests with some random probability\", summary);",
          "847:     }",
          "852:         [error_message = std::move(error_message)] {",
          "854:               grpc_error_set_int(GRPC_ERROR_CREATE(error_message),",
          "855:                                  StatusIntProperty::kRpcStatus,",
          "856:                                  GRPC_STATUS_RESOURCE_EXHAUSTED),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "859:   HPackTable* const table_;",
          "860:   uint8_t* const dynamic_table_updates_allowed_;",
          "861:   uint32_t* const frame_length_;",
          "863:   const LogInfo log_info_;",
          "864: };",
          "",
          "[Removed Lines]",
          "862:   const uint32_t metadata_size_limit_;",
          "",
          "[Added Lines]",
          "876:   RandomEarlyDetection* metadata_early_detection_;",
          "877:   bool is_last_;  // Whether this is the last frame.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "881: HPackParser::~HPackParser() = default;",
          "883: void HPackParser::BeginFrame(grpc_metadata_batch* metadata_buffer,",
          "886:   metadata_buffer_ = metadata_buffer;",
          "887:   if (metadata_buffer != nullptr) {",
          "888:     metadata_buffer->Set(GrpcStatusFromWire(), true);",
          "",
          "[Removed Lines]",
          "884:                              uint32_t metadata_size_limit, Boundary boundary,",
          "885:                              Priority priority, LogInfo log_info) {",
          "",
          "[Added Lines]",
          "899:                              uint32_t metadata_size_soft_limit,",
          "900:                              uint32_t metadata_size_hard_limit,",
          "901:                              Boundary boundary, Priority priority,",
          "902:                              LogInfo log_info) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "891:   priority_ = priority;",
          "892:   dynamic_table_updates_allowed_ = 2;",
          "893:   frame_length_ = 0;",
          "895:   log_info_ = log_info;",
          "896: }",
          "",
          "[Removed Lines]",
          "894:   metadata_size_limit_ = metadata_size_limit;",
          "",
          "[Added Lines]",
          "911:   metadata_early_detection_ = RandomEarlyDetection(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "909: }",
          "911: grpc_error_handle HPackParser::ParseInput(Input input, bool is_last) {",
          "913:   if (is_last) global_stats().IncrementHttp2MetadataSize(frame_length_);",
          "914:   if (parsed_ok) return absl::OkStatus();",
          "915:   if (input.eof_error()) {",
          "",
          "[Removed Lines]",
          "912:   bool parsed_ok = ParseInputInner(&input);",
          "",
          "[Added Lines]",
          "931:   bool parsed_ok = ParseInputInner(&input, is_last);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "923:   return input.TakeError();",
          "924: }",
          "927:   switch (priority_) {",
          "928:     case Priority::None:",
          "929:       break;",
          "",
          "[Removed Lines]",
          "926: bool HPackParser::ParseInputInner(Input* input) {",
          "",
          "[Added Lines]",
          "945: bool HPackParser::ParseInputInner(Input* input, bool is_last) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "935:     }",
          "936:   }",
          "937:   while (!input->end_of_stream()) {",
          "941:                           .Parse())) {",
          "942:       return false;",
          "943:     }",
          "",
          "[Removed Lines]",
          "938:     if (GPR_UNLIKELY(!Parser(input, metadata_buffer_, metadata_size_limit_,",
          "939:                              &table_, &dynamic_table_updates_allowed_,",
          "940:                              &frame_length_, log_info_)",
          "",
          "[Added Lines]",
          "957:     if (GPR_UNLIKELY(!Parser(input, metadata_buffer_, &table_,",
          "958:                              &dynamic_table_updates_allowed_, &frame_length_,",
          "959:                              &metadata_early_detection_, is_last, log_info_)",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.h -> src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"src/core/ext/transport/chttp2/transport/frame.h\"",
          "31: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "32: #include \"src/core/lib/iomgr/error.h\"",
          "33: #include \"src/core/lib/transport/metadata_batch.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"src/core/lib/backoff/random_early_detection.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   void BeginFrame(grpc_metadata_batch* metadata_buffer,",
          "84:                   Priority priority, LogInfo log_info);",
          "86:   void StopBufferingFrame() { metadata_buffer_ = nullptr; }",
          "",
          "[Removed Lines]",
          "83:                   uint32_t metadata_size_limit, Boundary boundary,",
          "",
          "[Added Lines]",
          "84:                   uint32_t metadata_size_soft_limit,",
          "85:                   uint32_t metadata_size_hard_limit, Boundary boundary,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   class String;",
          "105:   grpc_error_handle ParseInput(Input input, bool is_last);",
          "109:   grpc_metadata_batch* metadata_buffer_ = nullptr;",
          "",
          "[Removed Lines]",
          "106:   bool ParseInputInner(Input* input);",
          "",
          "[Added Lines]",
          "108:   bool ParseInputInner(Input* input, bool is_last);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:   uint8_t dynamic_table_updates_allowed_;",
          "123:   uint32_t frame_length_;",
          "126:   LogInfo log_info_;",
          "",
          "[Removed Lines]",
          "124:   uint32_t metadata_size_limit_;",
          "",
          "[Added Lines]",
          "126:   RandomEarlyDetection metadata_early_detection_;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/internal.h||src/core/ext/transport/chttp2/transport/internal.h": [
          "File: src/core/ext/transport/chttp2/transport/internal.h -> src/core/ext/transport/chttp2/transport/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   bool keepalive_ping_started = false;",
          "467:   grpc_chttp2_keepalive_state keepalive_state;",
          "468:   grpc_core::ContextList* cl = nullptr;",
          "469:   grpc_core::RefCountedPtr<grpc_core::channelz::SocketNode> channelz_socket;",
          "470:   uint32_t num_messages_in_next_write = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469:   uint32_t max_header_list_size_soft_limit = 0;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc": [
          "File: src/core/ext/transport/chttp2/transport/parsing.cc -> src/core/ext/transport/chttp2/transport/parsing.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "477:   t->hpack_parser.BeginFrame(",
          "478:       nullptr,",
          "479:       t->settings[GRPC_ACKED_SETTINGS]",
          "480:                  [GRPC_CHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE],",
          "481:       hpack_boundary_type(t, is_eoh), priority_type,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:       t->max_header_list_size_soft_limit,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:   }",
          "693:   t->hpack_parser.BeginFrame(",
          "694:       incoming_metadata_buffer,",
          "695:       t->settings[GRPC_ACKED_SETTINGS]",
          "696:                  [GRPC_CHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE],",
          "697:       hpack_boundary_type(t, is_eoh), priority_type,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:       t->max_header_list_size_soft_limit,",
          "",
          "---------------"
        ],
        "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h": [
          "File: src/core/lib/backoff/random_early_detection.h -> src/core/lib/backoff/random_early_detection.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <grpc/support/port_platform.h>",
          "20: #include <cstdint>",
          "22: #include \"absl/random/random.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: class RandomEarlyDetection {",
          "29:  public:",
          "30:   RandomEarlyDetection(uint64_t soft_limit, uint64_t hard_limit)",
          "31:       : soft_limit_(soft_limit), hard_limit_(hard_limit) {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   RandomEarlyDetection() : soft_limit_(INT_MAX), hard_limit_(INT_MAX) {}",
          "",
          "---------------"
        ],
        "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py": [
          "File: src/python/grpcio/grpc_core_dependencies.py -> src/python/grpcio/grpc_core_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "460:     'src/core/lib/address_utils/parse_address.cc',",
          "461:     'src/core/lib/address_utils/sockaddr_utils.cc',",
          "462:     'src/core/lib/backoff/backoff.cc',",
          "463:     'src/core/lib/channel/call_tracer.cc',",
          "464:     'src/core/lib/channel/channel_args.cc',",
          "465:     'src/core/lib/channel/channel_args_preconditioning.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     'src/core/lib/backoff/random_early_detection.cc',",
          "",
          "---------------"
        ],
        "test/core/end2end/tests/large_metadata.cc||test/core/end2end/tests/large_metadata.cc": [
          "File: test/core/end2end/tests/large_metadata.cc -> test/core/end2end/tests/large_metadata.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <stdio.h>",
          "20: #include <string.h>",
          "22: #include <functional>",
          "23: #include <memory>",
          "26: #include <grpc/grpc.h>",
          "27: #include <grpc/impl/propagation_bits.h>",
          "28: #include <grpc/slice.h>",
          "",
          "[Removed Lines]",
          "25: #include <grpc/byte_buffer.h>",
          "",
          "[Added Lines]",
          "20: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #include <grpc/support/time.h>",
          "33: #include \"src/core/lib/channel/channel_args.h\"",
          "34: #include \"test/core/end2end/cq_verifier.h\"",
          "35: #include \"test/core/end2end/end2end_tests.h\"",
          "36: #include \"test/core/util/test_config.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"src/core/lib/gpr/useful.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:   return f;",
          "47: }",
          "52:   grpc_call* c;",
          "53:   grpc_call* s;",
          "58:   grpc_metadata meta;",
          "67:   grpc_op ops[6];",
          "68:   grpc_op* op;",
          "69:   grpc_metadata_array initial_metadata_recv;",
          "70:   grpc_metadata_array trailing_metadata_recv;",
          "71:   grpc_metadata_array request_metadata_recv;",
          "73:   grpc_call_details call_details;",
          "74:   grpc_status_code status;",
          "75:   grpc_call_error error;",
          "77:   int was_cancelled = 2;",
          "79:   gpr_timespec deadline = grpc_timeout_seconds_to_deadline(5);",
          "80:   c = grpc_channel_create_call(f->client(), nullptr, GRPC_PROPAGATE_DEFAULTS,",
          "81:                                f->cq(), grpc_slice_from_static_string(\"/foo\"),",
          "82:                                nullptr, deadline, nullptr);",
          "83:   GPR_ASSERT(c);",
          "85:   meta.key = grpc_slice_from_static_string(\"key\");",
          "89:   grpc_metadata_array_init(&initial_metadata_recv);",
          "90:   grpc_metadata_array_init(&trailing_metadata_recv);",
          "",
          "[Removed Lines]",
          "50: static void test_request_with_large_metadata(",
          "51:     const CoreTestConfiguration& config) {",
          "54:   grpc_slice request_payload_slice =",
          "55:       grpc_slice_from_copied_string(\"hello world\");",
          "56:   grpc_byte_buffer* request_payload =",
          "57:       grpc_raw_byte_buffer_create(&request_payload_slice, 1);",
          "59:   const size_t large_size = 64 * 1024;",
          "60:   grpc_arg arg;",
          "61:   arg.type = GRPC_ARG_INTEGER;",
          "62:   arg.key = const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE);",
          "63:   arg.value.integer = static_cast<int>(large_size) + 1024;",
          "64:   grpc_channel_args args = {1, &arg};",
          "65:   auto f = begin_test(config, \"test_request_with_large_metadata\", &args, &args);",
          "66:   grpc_core::CqVerifier cqv(f->cq());",
          "72:   grpc_byte_buffer* request_payload_recv = nullptr;",
          "76:   grpc_slice details;",
          "86:   meta.value = grpc_slice_malloc(large_size);",
          "87:   memset(GRPC_SLICE_START_PTR(meta.value), 'a', large_size);",
          "",
          "[Added Lines]",
          "50: static grpc_status_code send_metadata(CoreTestFixture* f,",
          "51:                                       const size_t metadata_size,",
          "52:                                       grpc_slice* client_details) {",
          "53:   grpc_core::CqVerifier cqv(f->cq());",
          "74:   meta.value = grpc_slice_malloc(metadata_size);",
          "75:   memset(GRPC_SLICE_START_PTR(meta.value), 'a', metadata_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:   grpc_call_details_init(&call_details);",
          "94:   memset(ops, 0, sizeof(ops));",
          "96:   op = ops;",
          "97:   op->op = GRPC_OP_SEND_INITIAL_METADATA;",
          "105:   op->flags = 0;",
          "106:   op->reserved = nullptr;",
          "107:   op++;",
          "",
          "[Removed Lines]",
          "98:   op->data.send_initial_metadata.count = 1;",
          "99:   op->data.send_initial_metadata.metadata = &meta;",
          "100:   op->flags = 0;",
          "101:   op->reserved = nullptr;",
          "102:   op++;",
          "103:   op->op = GRPC_OP_SEND_MESSAGE;",
          "104:   op->data.send_message.send_message = request_payload;",
          "",
          "[Added Lines]",
          "86:   op->data.send_initial_metadata.count = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:   op->op = GRPC_OP_RECV_STATUS_ON_CLIENT;",
          "118:   op->data.recv_status_on_client.trailing_metadata = &trailing_metadata_recv;",
          "119:   op->data.recv_status_on_client.status = &status;",
          "121:   op->flags = 0;",
          "122:   op->reserved = nullptr;",
          "123:   op++;",
          "",
          "[Removed Lines]",
          "120:   op->data.recv_status_on_client.status_details = &details;",
          "",
          "[Added Lines]",
          "102:   op->data.recv_status_on_client.status_details = client_details;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:   cqv.Verify();",
          "136:   memset(ops, 0, sizeof(ops));",
          "138:   op = ops;",
          "139:   op->op = GRPC_OP_SEND_INITIAL_METADATA;",
          "146:   op->flags = 0;",
          "147:   op->reserved = nullptr;",
          "148:   op++;",
          "160:   op->op = GRPC_OP_RECV_CLOSE_ON_SERVER;",
          "161:   op->data.recv_close_on_server.cancelled = &was_cancelled;",
          "162:   op->flags = 0;",
          "",
          "[Removed Lines]",
          "140:   op->data.send_initial_metadata.count = 0;",
          "141:   op->flags = 0;",
          "142:   op->reserved = nullptr;",
          "143:   op++;",
          "144:   op->op = GRPC_OP_RECV_MESSAGE;",
          "145:   op->data.recv_message.recv_message = &request_payload_recv;",
          "149:   error = grpc_call_start_batch(s, ops, static_cast<size_t>(op - ops),",
          "150:                                 grpc_core::CqVerifier::tag(102), nullptr);",
          "151:   GPR_ASSERT(GRPC_CALL_OK == error);",
          "153:   cqv.Expect(grpc_core::CqVerifier::tag(102), true);",
          "154:   cqv.Verify();",
          "156:   memset(ops, 0, sizeof(ops));",
          "159:   op = ops;",
          "",
          "[Added Lines]",
          "122:   op->data.send_initial_metadata.count = 1;",
          "123:   op->data.send_initial_metadata.metadata = &meta;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:   op->reserved = nullptr;",
          "172:   op++;",
          "173:   error = grpc_call_start_batch(s, ops, static_cast<size_t>(op - ops),",
          "175:   GPR_ASSERT(GRPC_CALL_OK == error);",
          "178:   cqv.Expect(grpc_core::CqVerifier::tag(1), true);",
          "179:   cqv.Verify();",
          "191:   grpc_metadata_array_destroy(&initial_metadata_recv);",
          "192:   grpc_metadata_array_destroy(&trailing_metadata_recv);",
          "193:   grpc_metadata_array_destroy(&request_metadata_recv);",
          "",
          "[Removed Lines]",
          "174:                                 grpc_core::CqVerifier::tag(103), nullptr);",
          "177:   cqv.Expect(grpc_core::CqVerifier::tag(103), true);",
          "181:   GPR_ASSERT(status == GRPC_STATUS_OK);",
          "182:   GPR_ASSERT(0 == grpc_slice_str_cmp(details, \"xyz\"));",
          "183:   GPR_ASSERT(0 == grpc_slice_str_cmp(call_details.method, \"/foo\"));",
          "184:   GPR_ASSERT(was_cancelled == 0);",
          "185:   GPR_ASSERT(byte_buffer_eq_string(request_payload_recv, \"hello world\"));",
          "186:   GPR_ASSERT(contains_metadata_slices(&request_metadata_recv,",
          "187:                                       grpc_slice_from_static_string(\"key\"),",
          "188:                                       meta.value));",
          "190:   grpc_slice_unref(details);",
          "",
          "[Added Lines]",
          "141:                                 grpc_core::CqVerifier::tag(102), nullptr);",
          "143:   cqv.Expect(grpc_core::CqVerifier::tag(102), true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "196:   grpc_call_unref(c);",
          "197:   grpc_call_unref(s);",
          "202:   grpc_slice_unref(meta.value);",
          "203: }",
          "207:     const CoreTestConfiguration& config) {",
          "314:     GPR_ASSERT(status == GRPC_STATUS_RESOURCE_EXHAUSTED);",
          "316:     grpc_slice actual_error =",
          "318:     GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "321:     grpc_slice_unref(actual_error);",
          "332:   }",
          "333: }",
          "335: void large_metadata(const CoreTestConfiguration& config) {",
          "338:   if (strcmp(config.name, \"inproc\") != 0) {",
          "340:   }",
          "341: }",
          "",
          "[Removed Lines]",
          "199:   grpc_byte_buffer_destroy(request_payload);",
          "200:   grpc_byte_buffer_destroy(request_payload_recv);",
          "206: static void test_request_with_bad_large_metadata_response(",
          "208:   grpc_arg arg;",
          "209:   arg.type = GRPC_ARG_INTEGER;",
          "210:   arg.key = const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE);",
          "211:   arg.value.integer = 1024;",
          "212:   grpc_channel_args args = {1, &arg};",
          "213:   auto f = begin_test(config, \"test_request_with_bad_large_metadata_response\",",
          "214:                       &args, &args);",
          "215:   grpc_core::CqVerifier cqv(f->cq());",
          "217:   for (int i = 0; i < 10; i++) {",
          "218:     grpc_call* c;",
          "219:     grpc_call* s;",
          "220:     grpc_metadata meta;",
          "221:     const size_t large_size = 64 * 1024;",
          "222:     grpc_op ops[6];",
          "223:     grpc_op* op;",
          "224:     grpc_metadata_array initial_metadata_recv;",
          "225:     grpc_metadata_array trailing_metadata_recv;",
          "226:     grpc_metadata_array request_metadata_recv;",
          "227:     grpc_call_details call_details;",
          "228:     grpc_status_code status;",
          "229:     grpc_call_error error;",
          "230:     grpc_slice details;",
          "231:     int was_cancelled = 2;",
          "233:     gpr_timespec deadline = grpc_timeout_seconds_to_deadline(5);",
          "234:     c = grpc_channel_create_call(f->client(), nullptr, GRPC_PROPAGATE_DEFAULTS,",
          "235:                                  f->cq(), grpc_slice_from_static_string(\"/foo\"),",
          "236:                                  nullptr, deadline, nullptr);",
          "237:     GPR_ASSERT(c);",
          "239:     meta.key = grpc_slice_from_static_string(\"key\");",
          "240:     meta.value = grpc_slice_malloc(large_size);",
          "241:     memset(GRPC_SLICE_START_PTR(meta.value), 'a', large_size);",
          "243:     grpc_metadata_array_init(&initial_metadata_recv);",
          "244:     grpc_metadata_array_init(&trailing_metadata_recv);",
          "245:     grpc_metadata_array_init(&request_metadata_recv);",
          "246:     grpc_call_details_init(&call_details);",
          "248:     memset(ops, 0, sizeof(ops));",
          "250:     op = ops;",
          "251:     op->op = GRPC_OP_SEND_INITIAL_METADATA;",
          "252:     op->data.send_initial_metadata.count = 0;",
          "253:     op->flags = 0;",
          "254:     op->reserved = nullptr;",
          "255:     op++;",
          "256:     op->op = GRPC_OP_SEND_CLOSE_FROM_CLIENT;",
          "257:     op->flags = 0;",
          "258:     op->reserved = nullptr;",
          "259:     op++;",
          "260:     op->op = GRPC_OP_RECV_INITIAL_METADATA;",
          "261:     op->data.recv_initial_metadata.recv_initial_metadata =",
          "262:         &initial_metadata_recv;",
          "263:     op->flags = 0;",
          "264:     op->reserved = nullptr;",
          "265:     op++;",
          "266:     op->op = GRPC_OP_RECV_STATUS_ON_CLIENT;",
          "267:     op->data.recv_status_on_client.trailing_metadata = &trailing_metadata_recv;",
          "268:     op->data.recv_status_on_client.status = &status;",
          "269:     op->data.recv_status_on_client.status_details = &details;",
          "270:     op->flags = 0;",
          "271:     op->reserved = nullptr;",
          "272:     op++;",
          "273:     error = grpc_call_start_batch(c, ops, static_cast<size_t>(op - ops),",
          "274:                                   grpc_core::CqVerifier::tag(1), nullptr);",
          "275:     GPR_ASSERT(GRPC_CALL_OK == error);",
          "277:     error = grpc_server_request_call(f->server(), &s, &call_details,",
          "278:                                      &request_metadata_recv, f->cq(), f->cq(),",
          "279:                                      grpc_core::CqVerifier::tag(101));",
          "280:     GPR_ASSERT(GRPC_CALL_OK == error);",
          "282:     cqv.Expect(grpc_core::CqVerifier::tag(101), true);",
          "283:     cqv.Verify();",
          "285:     memset(ops, 0, sizeof(ops));",
          "287:     op = ops;",
          "288:     op->op = GRPC_OP_SEND_INITIAL_METADATA;",
          "289:     op->data.send_initial_metadata.count = 1;",
          "290:     op->data.send_initial_metadata.metadata = &meta;",
          "291:     op->flags = 0;",
          "292:     op->reserved = nullptr;",
          "293:     op++;",
          "294:     op->op = GRPC_OP_RECV_CLOSE_ON_SERVER;",
          "295:     op->data.recv_close_on_server.cancelled = &was_cancelled;",
          "296:     op->flags = 0;",
          "297:     op->reserved = nullptr;",
          "298:     op++;",
          "299:     op->op = GRPC_OP_SEND_STATUS_FROM_SERVER;",
          "300:     op->data.send_status_from_server.trailing_metadata_count = 0;",
          "301:     op->data.send_status_from_server.status = GRPC_STATUS_OK;",
          "302:     grpc_slice status_details = grpc_slice_from_static_string(\"xyz\");",
          "303:     op->data.send_status_from_server.status_details = &status_details;",
          "304:     op->flags = 0;",
          "305:     op->reserved = nullptr;",
          "306:     op++;",
          "307:     error = grpc_call_start_batch(s, ops, static_cast<size_t>(op - ops),",
          "308:                                   grpc_core::CqVerifier::tag(102), nullptr);",
          "309:     GPR_ASSERT(GRPC_CALL_OK == error);",
          "310:     cqv.Expect(grpc_core::CqVerifier::tag(102), true);",
          "311:     cqv.Expect(grpc_core::CqVerifier::tag(1), true);",
          "312:     cqv.Verify();",
          "315:     const char* expected_error = \"received initial metadata size exceeds limit\";",
          "317:         grpc_slice_split_head(&details, strlen(expected_error));",
          "319:     GPR_ASSERT(0 == grpc_slice_str_cmp(call_details.method, \"/foo\"));",
          "322:     grpc_slice_unref(details);",
          "323:     grpc_metadata_array_destroy(&initial_metadata_recv);",
          "324:     grpc_metadata_array_destroy(&trailing_metadata_recv);",
          "325:     grpc_metadata_array_destroy(&request_metadata_recv);",
          "326:     grpc_call_details_destroy(&call_details);",
          "328:     grpc_call_unref(c);",
          "329:     grpc_call_unref(s);",
          "331:     grpc_slice_unref(meta.value);",
          "336:   test_request_with_large_metadata(config);",
          "339:     test_request_with_bad_large_metadata_response(config);",
          "",
          "[Added Lines]",
          "157:   return status;",
          "162: static void test_request_with_large_metadata_under_soft_limit(",
          "164:   const size_t soft_limit = 32 * 1024;",
          "165:   const size_t hard_limit = 45 * 1024;",
          "166:   const size_t metadata_size = soft_limit;",
          "167:   grpc_arg arg[] = {",
          "168:       grpc_channel_arg_integer_create(",
          "169:           const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE), soft_limit + 1024),",
          "170:       grpc_channel_arg_integer_create(",
          "171:           const_cast<char*>(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE),",
          "172:           hard_limit + 1024)};",
          "173:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "174:   auto f =",
          "175:       begin_test(config, \"test_request_with_large_metadata_under_soft_limit\",",
          "176:                  &args, &args);",
          "177:   for (int i = 0; i < 100; i++) {",
          "178:     grpc_slice client_details;",
          "179:     auto status = send_metadata(f.get(), metadata_size, &client_details);",
          "180:     GPR_ASSERT(status == GRPC_STATUS_OK);",
          "181:     GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "182:     grpc_slice_unref(client_details);",
          "183:   }",
          "184: }",
          "188: static void test_request_with_large_metadata_between_soft_and_hard_limits(",
          "189:     const CoreTestConfiguration& config) {",
          "190:   const size_t soft_limit = 32 * 1024;",
          "191:   const size_t hard_limit = 45 * 1024;",
          "192:   const size_t metadata_size = (soft_limit + hard_limit) / 2;",
          "193:   grpc_arg arg[] = {",
          "194:       grpc_channel_arg_integer_create(",
          "195:           const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE), soft_limit + 1024),",
          "196:       grpc_channel_arg_integer_create(",
          "197:           const_cast<char*>(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE),",
          "198:           hard_limit + 1024)};",
          "199:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "200:   auto f = begin_test(",
          "201:       config, \"test_request_with_large_metadata_between_soft_and_hard_limits\",",
          "202:       &args, &args);",
          "204:   int num_requests_rejected = 0;",
          "205:   for (int i = 0; i < 100; i++) {",
          "206:     grpc_slice client_details;",
          "207:     auto status = send_metadata(f.get(), metadata_size, &client_details);",
          "208:     if (status == GRPC_STATUS_RESOURCE_EXHAUSTED) {",
          "209:       num_requests_rejected++;",
          "210:       const char* expected_error =",
          "211:           \"received initial metadata size exceeds soft limit\";",
          "212:       grpc_slice actual_error =",
          "213:           grpc_slice_split_head(&client_details, strlen(expected_error));",
          "214:       GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "215:       grpc_slice_unref(actual_error);",
          "216:     } else {",
          "217:       GPR_ASSERT(status == GRPC_STATUS_OK);",
          "218:       GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "219:     }",
          "220:     grpc_slice_unref(client_details);",
          "221:   }",
          "224:   GPR_ASSERT(abs(num_requests_rejected - 50) <= 45);",
          "225: }",
          "229: static void test_request_with_large_metadata_above_hard_limit(",
          "230:     const CoreTestConfiguration& config) {",
          "231:   const size_t soft_limit = 32 * 1024;",
          "232:   const size_t hard_limit = 45 * 1024;",
          "233:   const size_t metadata_size = hard_limit * 1.5;",
          "234:   grpc_arg arg[] = {",
          "235:       grpc_channel_arg_integer_create(",
          "236:           const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE), soft_limit + 1024),",
          "237:       grpc_channel_arg_integer_create(",
          "238:           const_cast<char*>(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE),",
          "239:           hard_limit + 1024)};",
          "240:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "241:   auto f =",
          "242:       begin_test(config, \"test_request_with_large_metadata_above_hard_limit\",",
          "243:                  &args, &args);",
          "245:   for (int i = 0; i < 100; i++) {",
          "246:     grpc_slice client_details;",
          "247:     auto status = send_metadata(f.get(), metadata_size, &client_details);",
          "249:     const char* expected_error =",
          "250:         \"received initial metadata size exceeds hard limit\";",
          "252:         grpc_slice_split_head(&client_details, strlen(expected_error));",
          "254:     grpc_slice_unref(actual_error);",
          "255:     grpc_slice_unref(client_details);",
          "256:   }",
          "257: }",
          "262: static void test_request_with_large_metadata_soft_limit_above_hard_limit(",
          "263:     const CoreTestConfiguration& config) {",
          "264:   const size_t soft_limit = 64 * 1024;",
          "265:   const size_t hard_limit = 32 * 1024;",
          "266:   const size_t metadata_size_below_hard_limit = hard_limit;",
          "267:   const size_t metadata_size_above_hard_limit = hard_limit * 2;",
          "268:   grpc_arg arg[] = {",
          "269:       grpc_channel_arg_integer_create(",
          "270:           const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE), soft_limit + 1024),",
          "271:       grpc_channel_arg_integer_create(",
          "272:           const_cast<char*>(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE),",
          "273:           hard_limit + 1024)};",
          "274:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "275:   auto f = begin_test(",
          "276:       config, \"test_request_with_large_metadata_soft_limit_above_hard_limit\",",
          "277:       &args, &args);",
          "280:   for (int i = 0; i < 50; i++) {",
          "281:     grpc_slice client_details;",
          "282:     auto status =",
          "283:         send_metadata(f.get(), metadata_size_below_hard_limit, &client_details);",
          "284:     GPR_ASSERT(status == GRPC_STATUS_OK);",
          "285:     GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "286:     grpc_slice_unref(client_details);",
          "287:   }",
          "290:   for (int i = 0; i < 50; i++) {",
          "291:     grpc_slice client_details;",
          "292:     auto status =",
          "293:         send_metadata(f.get(), metadata_size_above_hard_limit, &client_details);",
          "294:     GPR_ASSERT(status == GRPC_STATUS_RESOURCE_EXHAUSTED);",
          "295:     const char* expected_error =",
          "296:         \"received initial metadata size exceeds hard limit\";",
          "297:     grpc_slice actual_error =",
          "298:         grpc_slice_split_head(&client_details, strlen(expected_error));",
          "299:     GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "300:     grpc_slice_unref(actual_error);",
          "301:     grpc_slice_unref(client_details);",
          "302:   }",
          "303: }",
          "307: static void test_request_with_large_metadata_soft_limit_overrides_default_hard(",
          "308:     const CoreTestConfiguration& config) {",
          "309:   const size_t soft_limit = 64 * 1024;",
          "310:   const size_t metadata_size_below_soft_limit = soft_limit;",
          "311:   const size_t metadata_size_above_hard_limit = soft_limit * 1.5;",
          "312:   const size_t metadata_size_between_limits =",
          "313:       (soft_limit + soft_limit * 1.25) / 2;",
          "314:   grpc_arg arg[] = {grpc_channel_arg_integer_create(",
          "315:       const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE), soft_limit + 1024)};",
          "316:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "317:   auto f = begin_test(",
          "318:       config,",
          "319:       \"test_request_with_large_metadata_soft_limit_overrides_default_hard\",",
          "320:       &args, &args);",
          "323:   for (int i = 0; i < 50; i++) {",
          "324:     grpc_slice client_details;",
          "325:     auto status =",
          "326:         send_metadata(f.get(), metadata_size_below_soft_limit, &client_details);",
          "327:     GPR_ASSERT(status == GRPC_STATUS_OK);",
          "328:     GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "329:     grpc_slice_unref(client_details);",
          "330:   }",
          "333:   int num_requests_rejected = 0;",
          "334:   for (int i = 0; i < 100; i++) {",
          "335:     grpc_slice client_details;",
          "336:     auto status =",
          "337:         send_metadata(f.get(), metadata_size_between_limits, &client_details);",
          "338:     if (status == GRPC_STATUS_RESOURCE_EXHAUSTED) {",
          "339:       num_requests_rejected++;",
          "340:       const char* expected_error =",
          "341:           \"received initial metadata size exceeds soft limit\";",
          "342:       grpc_slice actual_error =",
          "343:           grpc_slice_split_head(&client_details, strlen(expected_error));",
          "344:       GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "345:       grpc_slice_unref(actual_error);",
          "346:     } else {",
          "347:       GPR_ASSERT(status == GRPC_STATUS_OK);",
          "348:       GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "349:     }",
          "350:     grpc_slice_unref(client_details);",
          "351:   }",
          "353:   GPR_ASSERT(abs(num_requests_rejected - 50) <= 45);",
          "356:   for (int i = 0; i < 50; i++) {",
          "357:     grpc_slice client_details;",
          "358:     auto status =",
          "359:         send_metadata(f.get(), metadata_size_above_hard_limit, &client_details);",
          "360:     GPR_ASSERT(status == GRPC_STATUS_RESOURCE_EXHAUSTED);",
          "361:     const char* expected_error =",
          "362:         \"received initial metadata size exceeds hard limit\";",
          "363:     grpc_slice actual_error =",
          "364:         grpc_slice_split_head(&client_details, strlen(expected_error));",
          "365:     GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "366:     grpc_slice_unref(actual_error);",
          "367:     grpc_slice_unref(client_details);",
          "368:   }",
          "369: }",
          "373: static void test_request_with_large_metadata_hard_limit_overrides_default_soft(",
          "374:     const CoreTestConfiguration& config) {",
          "375:   const size_t hard_limit = 45 * 1024;",
          "376:   const size_t metadata_size_below_soft_limit = hard_limit * 0.5;",
          "377:   const size_t metadata_size_above_hard_limit = hard_limit * 1.5;",
          "378:   const size_t metadata_size_between_limits =",
          "379:       (hard_limit * 0.8 + hard_limit) / 2;",
          "380:   grpc_arg arg[] = {grpc_channel_arg_integer_create(",
          "381:       const_cast<char*>(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE),",
          "382:       hard_limit + 1024)};",
          "383:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "384:   auto f = begin_test(",
          "385:       config,",
          "386:       \"test_request_with_large_metadata_hard_limit_overrides_default_soft\",",
          "387:       &args, &args);",
          "390:   for (int i = 0; i < 50; i++) {",
          "391:     grpc_slice client_details;",
          "392:     auto status =",
          "393:         send_metadata(f.get(), metadata_size_below_soft_limit, &client_details);",
          "394:     GPR_ASSERT(status == GRPC_STATUS_OK);",
          "395:     GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "396:     grpc_slice_unref(client_details);",
          "397:   }",
          "400:   int num_requests_rejected = 0;",
          "401:   for (int i = 0; i < 100; i++) {",
          "402:     grpc_slice client_details;",
          "403:     auto status =",
          "404:         send_metadata(f.get(), metadata_size_between_limits, &client_details);",
          "405:     if (status == GRPC_STATUS_RESOURCE_EXHAUSTED) {",
          "406:       num_requests_rejected++;",
          "407:       const char* expected_error =",
          "408:           \"received initial metadata size exceeds soft limit\";",
          "409:       grpc_slice actual_error =",
          "410:           grpc_slice_split_head(&client_details, strlen(expected_error));",
          "411:       GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "412:       grpc_slice_unref(actual_error);",
          "413:     } else {",
          "414:       GPR_ASSERT(status == GRPC_STATUS_OK);",
          "415:       GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "416:     }",
          "417:     grpc_slice_unref(client_details);",
          "418:   }",
          "420:   GPR_ASSERT(abs(num_requests_rejected - 50) <= 45);",
          "423:   for (int i = 0; i < 50; i++) {",
          "424:     grpc_slice client_details;",
          "425:     auto status =",
          "426:         send_metadata(f.get(), metadata_size_above_hard_limit, &client_details);",
          "427:     GPR_ASSERT(status == GRPC_STATUS_RESOURCE_EXHAUSTED);",
          "428:     const char* expected_error =",
          "429:         \"received initial metadata size exceeds hard limit\";",
          "430:     grpc_slice actual_error =",
          "431:         grpc_slice_split_head(&client_details, strlen(expected_error));",
          "432:     GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "433:     grpc_slice_unref(actual_error);",
          "434:     grpc_slice_unref(client_details);",
          "435:   }",
          "436: }",
          "441: static void test_request_with_large_metadata_hard_limit_below_default_hard(",
          "442:     const CoreTestConfiguration& config) {",
          "443:   const size_t hard_limit = 4 * 1024;",
          "444:   const size_t metadata_size_below_hard_limit = hard_limit;",
          "445:   const size_t metadata_size_above_hard_limit = hard_limit * 2;",
          "446:   grpc_arg arg[] = {grpc_channel_arg_integer_create(",
          "447:       const_cast<char*>(GRPC_ARG_ABSOLUTE_MAX_METADATA_SIZE),",
          "448:       hard_limit + 1024)};",
          "449:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "450:   auto f = begin_test(",
          "451:       config, \"test_request_with_large_metadata_hard_limit_below_default_hard\",",
          "452:       &args, &args);",
          "455:   for (int i = 0; i < 50; i++) {",
          "456:     grpc_slice client_details;",
          "457:     auto status =",
          "458:         send_metadata(f.get(), metadata_size_below_hard_limit, &client_details);",
          "459:     GPR_ASSERT(status == GRPC_STATUS_OK);",
          "460:     GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "461:     grpc_slice_unref(client_details);",
          "462:   }",
          "465:   for (int i = 0; i < 50; i++) {",
          "466:     grpc_slice client_details;",
          "467:     auto status =",
          "468:         send_metadata(f.get(), metadata_size_above_hard_limit, &client_details);",
          "469:     GPR_ASSERT(status == GRPC_STATUS_RESOURCE_EXHAUSTED);",
          "470:     const char* expected_error =",
          "471:         \"received initial metadata size exceeds hard limit\";",
          "472:     grpc_slice actual_error =",
          "473:         grpc_slice_split_head(&client_details, strlen(expected_error));",
          "474:     GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "476:     grpc_slice_unref(client_details);",
          "477:   }",
          "478: }",
          "483: static void test_request_with_large_metadata_soft_limit_below_default_soft(",
          "484:     const CoreTestConfiguration& config) {",
          "485:   const size_t soft_limit = 1 * 1024;",
          "486:   const size_t metadata_size_below_soft_limit = soft_limit;",
          "488:   const size_t metadata_size_between_limits = 10 * 1024;",
          "489:   const size_t metadata_size_above_hard_limit = 75 * 1024;",
          "490:   grpc_arg arg[] = {grpc_channel_arg_integer_create(",
          "491:       const_cast<char*>(GRPC_ARG_MAX_METADATA_SIZE), soft_limit + 1024)};",
          "492:   grpc_channel_args args = {GPR_ARRAY_SIZE(arg), arg};",
          "493:   auto f = begin_test(",
          "494:       config, \"test_request_with_large_metadata_soft_limit_below_default_soft\",",
          "495:       &args, &args);",
          "498:   for (int i = 0; i < 50; i++) {",
          "499:     grpc_slice client_details;",
          "500:     auto status =",
          "501:         send_metadata(f.get(), metadata_size_below_soft_limit, &client_details);",
          "502:     GPR_ASSERT(status == GRPC_STATUS_OK);",
          "503:     GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "504:     grpc_slice_unref(client_details);",
          "505:   }",
          "508:   int num_requests_rejected = 0;",
          "509:   for (int i = 0; i < 100; i++) {",
          "510:     grpc_slice client_details;",
          "511:     auto status =",
          "512:         send_metadata(f.get(), metadata_size_between_limits, &client_details);",
          "513:     if (status == GRPC_STATUS_RESOURCE_EXHAUSTED) {",
          "514:       num_requests_rejected++;",
          "515:       const char* expected_error =",
          "516:           \"received initial metadata size exceeds soft limit\";",
          "517:       grpc_slice actual_error =",
          "518:           grpc_slice_split_head(&client_details, strlen(expected_error));",
          "519:       GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "520:       grpc_slice_unref(actual_error);",
          "521:     } else {",
          "522:       GPR_ASSERT(status == GRPC_STATUS_OK);",
          "523:       GPR_ASSERT(0 == grpc_slice_str_cmp(client_details, \"xyz\"));",
          "524:     }",
          "525:     grpc_slice_unref(client_details);",
          "526:   }",
          "528:   GPR_ASSERT((abs(num_requests_rejected - 50) <= 49));",
          "531:   for (int i = 0; i < 50; i++) {",
          "532:     grpc_slice client_details;",
          "533:     auto status =",
          "534:         send_metadata(f.get(), metadata_size_above_hard_limit, &client_details);",
          "535:     GPR_ASSERT(status == GRPC_STATUS_RESOURCE_EXHAUSTED);",
          "536:     const char* expected_error =",
          "537:         \"received initial metadata size exceeds hard limit\";",
          "538:     grpc_slice actual_error =",
          "539:         grpc_slice_split_head(&client_details, strlen(expected_error));",
          "540:     GPR_ASSERT(0 == grpc_slice_str_cmp(actual_error, expected_error));",
          "541:     grpc_slice_unref(actual_error);",
          "542:     grpc_slice_unref(client_details);",
          "547:   test_request_with_large_metadata_under_soft_limit(config);",
          "550:     test_request_with_large_metadata_between_soft_and_hard_limits(config);",
          "551:     test_request_with_large_metadata_above_hard_limit(config);",
          "552:     test_request_with_large_metadata_soft_limit_above_hard_limit(config);",
          "553:     test_request_with_large_metadata_soft_limit_overrides_default_hard(config);",
          "554:     test_request_with_large_metadata_hard_limit_overrides_default_soft(config);",
          "555:     test_request_with_large_metadata_hard_limit_below_default_hard(config);",
          "556:     test_request_with_large_metadata_soft_limit_below_default_soft(config);",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_fuzzer.proto||test/core/transport/chttp2/hpack_parser_fuzzer.proto": [
          "File: test/core/transport/chttp2/hpack_parser_fuzzer.proto -> test/core/transport/chttp2/hpack_parser_fuzzer.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   int32 stop_buffering_after_segments = 4;",
          "26:   int32 max_metadata_length = 5;",
          "27:   repeated bytes parse = 6;",
          "28: }",
          "30: message Msg {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:   int32 absolute_max_metadata_length = 7;",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_fuzzer_test.cc -> test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <string>",
          "23: #include <grpc/grpc.h>",
          "24: #include <grpc/slice.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <utility>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         priority = grpc_core::HPackParser::Priority::Included;",
          "70:       }",
          "71:       int max_length = 1024;",
          "72:       if (frame.max_metadata_length() != 0) {",
          "73:         max_length = frame.max_metadata_length();",
          "74:       }",
          "76:       parser->BeginFrame(",
          "78:           grpc_core::HPackParser::LogInfo{",
          "79:               1, grpc_core::HPackParser::LogInfo::kHeaders, false});",
          "80:       int stop_buffering_ctr =",
          "",
          "[Removed Lines]",
          "77:           &b, max_length, boundary, priority,",
          "",
          "[Added Lines]",
          "73:       int absolute_max_length = 1024;",
          "74:       if (absolute_max_length < max_length) {",
          "75:         std::swap(absolute_max_length, max_length);",
          "76:       }",
          "80:       if (frame.absolute_max_metadata_length() != 0) {",
          "81:         absolute_max_length = frame.absolute_max_metadata_length();",
          "82:       }",
          "85:           &b, max_length, absolute_max_length, boundary, priority,",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_test.cc -> test/core/transport/chttp2/hpack_parser_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     grpc_metadata_batch b(arena.get());",
          "100:     parser_->BeginFrame(",
          "102:         grpc_core::HPackParser::Priority::None,",
          "103:         grpc_core::HPackParser::LogInfo{",
          "104:             1, grpc_core::HPackParser::LogInfo::kHeaders, false});",
          "",
          "[Removed Lines]",
          "101:         &b, 4096, grpc_core::HPackParser::Boundary::None,",
          "",
          "[Added Lines]",
          "101:         &b, 4096, 4096, grpc_core::HPackParser::Boundary::None,",
          "",
          "---------------"
        ],
        "test/cpp/microbenchmarks/bm_chttp2_hpack.cc||test/cpp/microbenchmarks/bm_chttp2_hpack.cc": [
          "File: test/cpp/microbenchmarks/bm_chttp2_hpack.cc -> test/cpp/microbenchmarks/bm_chttp2_hpack.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:   grpc_core::ManualConstructor<grpc_metadata_batch> b;",
          "350:   b.Init(arena);",
          "351:   p.BeginFrame(&*b, std::numeric_limits<uint32_t>::max(),",
          "352:                grpc_core::HPackParser::Boundary::None,",
          "353:                grpc_core::HPackParser::Priority::None,",
          "354:                grpc_core::HPackParser::LogInfo{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:                std::numeric_limits<uint32_t>::max(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371:       arena = grpc_core::Arena::Create(kArenaSize, &memory_allocator);",
          "372:       b.Init(arena);",
          "373:       p.BeginFrame(&*b, std::numeric_limits<uint32_t>::max(),",
          "374:                    grpc_core::HPackParser::Boundary::None,",
          "375:                    grpc_core::HPackParser::Priority::None,",
          "376:                    grpc_core::HPackParser::LogInfo{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:                    std::numeric_limits<uint32_t>::max(),",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal": [
          "File: tools/doxygen/Doxyfile.c++.internal -> tools/doxygen/Doxyfile.c++.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1989: src/core/lib/avl/avl.h \\",
          "1990: src/core/lib/backoff/backoff.cc \\",
          "1991: src/core/lib/backoff/backoff.h \\",
          "1992: src/core/lib/channel/call_finalization.h \\",
          "1993: src/core/lib/channel/call_tracer.cc \\",
          "1994: src/core/lib/channel/call_tracer.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1992: src/core/lib/backoff/random_early_detection.cc \\",
          "1993: src/core/lib/backoff/random_early_detection.h \\",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal": [
          "File: tools/doxygen/Doxyfile.core.internal -> tools/doxygen/Doxyfile.core.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1766: src/core/lib/avl/avl.h \\",
          "1767: src/core/lib/backoff/backoff.cc \\",
          "1768: src/core/lib/backoff/backoff.h \\",
          "1769: src/core/lib/channel/README.md \\",
          "1770: src/core/lib/channel/call_finalization.h \\",
          "1771: src/core/lib/channel/call_tracer.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1769: src/core/lib/backoff/random_early_detection.cc \\",
          "1770: src/core/lib/backoff/random_early_detection.h \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e46dda5c7d1e0ff83bf366a581f2c0c3971e6e99",
      "candidate_info": {
        "commit_hash": "e46dda5c7d1e0ff83bf366a581f2c0c3971e6e99",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/e46dda5c7d1e0ff83bf366a581f2c0c3971e6e99",
        "files": [
          "BUILD",
          "CMakeLists.txt",
          "Makefile",
          "Package.swift",
          "build_autogenerated.yaml",
          "config.m4",
          "config.w32",
          "gRPC-C++.podspec",
          "gRPC-Core.podspec",
          "grpc.gemspec",
          "grpc.gyp",
          "package.xml",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h",
          "src/core/lib/surface/validate_metadata.cc",
          "src/core/lib/surface/validate_metadata.h",
          "src/python/grpcio/grpc_core_dependencies.py",
          "test/core/transport/chttp2/BUILD",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4865932715229184",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-5365031688536064",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-06c4093ab80184d59150773f5c19e8e3851aa584",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-073bba832e73c8f524714e179236756e4854e08f",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-0865baf4eceb5220cdf0528cff5520f97ed7fbf8",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-1082c8e03fb43912053db34d510246ffe6aab388",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-1bda156d5b247fec3b19381d40519e65bdde40de",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-24437bf259f238cb404aad47b93345a4d5161a37",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-4271e5059b58be25d0845678c8b1c3f12c0040c3",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-592efde536e0c000a56776eeb180ae3b6f8ebe70",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-659b65287a1437d74ef1f334b0148102a461a430",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-6c53549fc13aab69e2ddf334275ebeb4bdab4234",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-90dcc8d762ca0b68b8ff7900e0b4856ac19de75f",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-9d380436e8412e3d4f8f2bc9b6a008c57b777afe",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-afc9191b4dce8c40516945fb5dc2c98b628a2430",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-c5c7476698873398f29a0ba0b7cdc7b85fa63173",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-c88faaa07f7f4fbaf734b9be038ec7daa0bf92fb",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-d47bb8c8c9640faf351068480844e1be20cfdbb7",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-d72bb43a581e489916a85216cb6c4fbb3ad844e2",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-ff4557ffdb266e8c086c05f3da8f7a1bddd6f906",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/clusterfuzz-testcase-minimized-hpack_parser_input_size_fuzzer-4883111703609344",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/crash-2af1d6b2934f168a7dc4768b93e447802f9ecedf",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/crash-81591b690179358fd403e4730b601c5c0b427491",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-015113bc4dd37f528f1cb0c820660d4011960dab",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-03de8592bf6baa2a62e5542fa96ac2d6ee69b6b9",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-058e8ece1a01b9087308f12521c1109f9d30e573",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-07558bf39768c209ce786612c724f889d1e8891b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0ab36d0cfe24b0ddbd4c583c74882df16c3b9627",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0b09f05105d317412b7c827d3686f5fa32bebf49",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0ca5bea44d2bc9166b4734e0716b8b6da5ec2029",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0efc2b21ea49b7721ce2b20e13effe7c96c64498",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-123f67a0e63101e7898f2a8d23d2f588ebde4a98",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1298ff90dade093f5481f6bc80777326938cf4b4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-135681321b796d8f765261672da373db518d538b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-152f69bc17f458569744172a8c3d6971ac66dff8",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1bd14ffddb4215b0c81272d73d78e4d444a851ee",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1ec7975001ad03530af0b84e6527752b863ad594",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1f3013b5c089a3affcae856ec1b0a0f70d217740",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1f9c5fcdcf7348d5c165eb9a8b9755da60e7da5c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-20bff712090e0c110511522a6aec43f50ced4da9",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-20c88a592c8cb36ab342c77a75c23964dd9ac09e",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-214ef1f403047786f5aae50aae0bef64243ea423",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-245a90a2668df8a643d9b8922dbc34825f3e5569",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-31bc6369c08034fde2683229bc30fd15bb767158",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-3b2fb306d57d5e9f7bcd0bcb1cbf34fcec88a30b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-41fb06b30a8237efa627ed4eb0afaa3221ac4abe",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-44af09a92eeb9143f1055d66a3a98d7e89b65e07",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-4b54c31cc4232038a9561c0c52dcf4f99317bab5",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-4cd819b2b070f7cd5c287d4f1a6d04ea466e15ae",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-51d2744484cadc664760e331a4c91e7a4c43feb1",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-57702140b51ec7c39b73e68519c5dc235e79098c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-588c49bc604a6231b9638ad628626a0665f3d3ba",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-5a12ad90db4e144bd286002fe5f9f862afb7a429",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-5f2ae06e8068c973de09d9bbff0b83deddbf654c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-60118614a0ee78fe56eb10631d11fd04a6e54348",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6148d1287ad4f3612a69e27f00c23ca5bd76a2e4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6b3d64423a6fedf8fd0da585e3ef259793575e0a",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6fca8b6d71567434d128919f5e5b087a95e8dc36",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-79f273f547f27661fb507887e2de99fb846a38d3",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-7bccb0c6f828e36f42e92dc95e7bc1194c2e384f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-829cb6b69fd6874ba62b1d9e81c1db4f2810578c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8b9927241b1f8cd86bf7aa947c22a38ac1a02822",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8c0937c405509b25e563d9eedcf6a8cf1ae6e7e7",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8e319a9f1aaa99eb12086568efbcb8fe9d4f45c4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8f05e81342c302bcb97a31c93d42c690deda4f2d",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8f419c102e129ebbfc7093b88f9da53e41672100",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9baf490049fb6d5374dcf2a21d89589c07b50c85",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9ea07de715a1deafee30c3ae13b7882d13adc133",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9fbf404499c65b338e66fbdbb7f392eee25b58d8",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-a49f0308e5ca8aa2eeb640a9d4b3a9b38200200c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-b00a8d8fe0c4f5f624fee74404eadf3fcc8506b5",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-b592ca99a4503d5e148bc434d22e2bb8c54fa67f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-baa7a814fc03b9d814fb62d6faf3b6f878ef8ed2",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-c10a17f4b8404e97ea04d5f80ec6f0c854e6c722",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-cc8fd4207cf949f1508099c4f292e641fc016fcb",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-d2e48419f9f6ebebd2674ba6df9e4a1ca2d71f70",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-da53cd6077598148d2d8bb6f01701b295d9fdf5f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-dcf1675a3a20b1774aa21ea5cca5af8a879c7e6d",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e1d9c9de7bab42422728004d98ce7b75950eba48",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e7558bd9ec494634446a1aeb7d5381d0212f25a7",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e9325a522c7c7450599f6c1a4a8fb41c31001788",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-ec72b4c4ca87666be770098d1bec2ac2c7934610",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-f737513dded2e82540ad6a199fb45d929957380f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-f9c899c69ad72bdad745ae100359d4ce5e22f833",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-fceca15b45635f1b0e63b75f6da116b1ef8c2d14",
          "test/core/transport/chttp2/hpack_parser_table_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-211c8a4a9c4831aa2d5599b7847ab45ced2216a4",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-aa01fe395fe67c36bb66f282341865fbe7eae2d7",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-da39a3ee5e6b4b0d3255bfef95601890afd80709",
          "tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal"
        ],
        "message": "[Core] Backport:1.56 Improve HPACK (#33603)\n\nCherry-pick https://github.com/grpc/grpc/pull/33597",
        "before_after_code_files": [
          "Package.swift||Package.swift",
          "config.m4||config.m4",
          "config.w32||config.w32",
          "gRPC-C++.podspec||gRPC-C++.podspec",
          "gRPC-Core.podspec||gRPC-Core.podspec",
          "grpc.gemspec||grpc.gemspec",
          "grpc.gyp||grpc.gyp",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc||src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.h||src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc||src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.h||src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h",
          "src/core/lib/surface/validate_metadata.cc||src/core/lib/surface/validate_metadata.cc",
          "src/core/lib/surface/validate_metadata.h||src/core/lib/surface/validate_metadata.h",
          "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_table_test.cc||test/core/transport/chttp2/hpack_parser_table_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc",
          "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "Package.swift||Package.swift": [
          "File: Package.swift -> Package.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         \"third_party/upb/upb/msg_test.cc\",",
          "59:       ],",
          "60:       sources: [",
          "61:         \"src/core/ext/filters/\",",
          "62:         \"src/core/ext/transport/\",",
          "63:         \"src/core/ext/upb-generated/\",",
          "64:         \"src/core/ext/upbdefs-generated/\",",
          "65:         \"src/core/ext/xds/\",",
          "66:         \"src/core/lib/\",",
          "67:         \"src/core/plugin_registry/grpc_plugin_registry.cc\",",
          "68:         \"src/core/tsi/\",",
          "69:         \"third_party/re2/re2/\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: <<<<<<< HEAD",
          "68: =======",
          "69:         \"include/grpc/byte_buffer.h\",",
          "70:         \"include/grpc/byte_buffer_reader.h\",",
          "71:         \"include/grpc/census.h\",",
          "72:         \"include/grpc/compression.h\",",
          "73:         \"include/grpc/event_engine/endpoint_config.h\",",
          "74:         \"include/grpc/event_engine/event_engine.h\",",
          "75:         \"include/grpc/event_engine/internal/memory_allocator_impl.h\",",
          "76:         \"include/grpc/event_engine/internal/slice_cast.h\",",
          "77:         \"include/grpc/event_engine/memory_allocator.h\",",
          "78:         \"include/grpc/event_engine/memory_request.h\",",
          "79:         \"include/grpc/event_engine/port.h\",",
          "80:         \"include/grpc/event_engine/slice.h\",",
          "81:         \"include/grpc/event_engine/slice_buffer.h\",",
          "82:         \"include/grpc/fork.h\",",
          "83:         \"include/grpc/grpc.h\",",
          "84:         \"include/grpc/grpc_audit_logging.h\",",
          "85:         \"include/grpc/grpc_posix.h\",",
          "86:         \"include/grpc/grpc_security.h\",",
          "87:         \"include/grpc/grpc_security_constants.h\",",
          "88:         \"include/grpc/impl/codegen/atm.h\",",
          "89:         \"include/grpc/impl/codegen/atm_gcc_atomic.h\",",
          "90:         \"include/grpc/impl/codegen/atm_gcc_sync.h\",",
          "91:         \"include/grpc/impl/codegen/atm_windows.h\",",
          "92:         \"include/grpc/impl/codegen/byte_buffer.h\",",
          "93:         \"include/grpc/impl/codegen/byte_buffer_reader.h\",",
          "94:         \"include/grpc/impl/codegen/compression_types.h\",",
          "95:         \"include/grpc/impl/codegen/connectivity_state.h\",",
          "96:         \"include/grpc/impl/codegen/fork.h\",",
          "97:         \"include/grpc/impl/codegen/gpr_types.h\",",
          "98:         \"include/grpc/impl/codegen/grpc_types.h\",",
          "99:         \"include/grpc/impl/codegen/log.h\",",
          "100:         \"include/grpc/impl/codegen/port_platform.h\",",
          "101:         \"include/grpc/impl/codegen/propagation_bits.h\",",
          "102:         \"include/grpc/impl/codegen/slice.h\",",
          "103:         \"include/grpc/impl/codegen/status.h\",",
          "104:         \"include/grpc/impl/codegen/sync.h\",",
          "105:         \"include/grpc/impl/codegen/sync_abseil.h\",",
          "106:         \"include/grpc/impl/codegen/sync_custom.h\",",
          "107:         \"include/grpc/impl/codegen/sync_generic.h\",",
          "108:         \"include/grpc/impl/codegen/sync_posix.h\",",
          "109:         \"include/grpc/impl/codegen/sync_windows.h\",",
          "110:         \"include/grpc/impl/compression_types.h\",",
          "111:         \"include/grpc/impl/connectivity_state.h\",",
          "112:         \"include/grpc/impl/grpc_types.h\",",
          "113:         \"include/grpc/impl/propagation_bits.h\",",
          "114:         \"include/grpc/impl/slice_type.h\",",
          "115:         \"include/grpc/load_reporting.h\",",
          "116:         \"include/grpc/slice.h\",",
          "117:         \"include/grpc/slice_buffer.h\",",
          "118:         \"include/grpc/status.h\",",
          "119:         \"include/grpc/support/alloc.h\",",
          "120:         \"include/grpc/support/atm.h\",",
          "121:         \"include/grpc/support/atm_gcc_atomic.h\",",
          "122:         \"include/grpc/support/atm_gcc_sync.h\",",
          "123:         \"include/grpc/support/atm_windows.h\",",
          "124:         \"include/grpc/support/cpu.h\",",
          "125:         \"include/grpc/support/json.h\",",
          "126:         \"include/grpc/support/log.h\",",
          "127:         \"include/grpc/support/log_windows.h\",",
          "128:         \"include/grpc/support/port_platform.h\",",
          "129:         \"include/grpc/support/string_util.h\",",
          "130:         \"include/grpc/support/sync.h\",",
          "131:         \"include/grpc/support/sync_abseil.h\",",
          "132:         \"include/grpc/support/sync_custom.h\",",
          "133:         \"include/grpc/support/sync_generic.h\",",
          "134:         \"include/grpc/support/sync_posix.h\",",
          "135:         \"include/grpc/support/sync_windows.h\",",
          "136:         \"include/grpc/support/thd_id.h\",",
          "137:         \"include/grpc/support/time.h\",",
          "138:         \"include/grpc/support/workaround_list.h\",",
          "139:         \"src/core/ext/filters/backend_metrics/backend_metric_filter.cc\",",
          "140:         \"src/core/ext/filters/backend_metrics/backend_metric_filter.h\",",
          "141:         \"src/core/ext/filters/backend_metrics/backend_metric_provider.h\",",
          "142:         \"src/core/ext/filters/census/grpc_context.cc\",",
          "143:         \"src/core/ext/filters/channel_idle/channel_idle_filter.cc\",",
          "144:         \"src/core/ext/filters/channel_idle/channel_idle_filter.h\",",
          "145:         \"src/core/ext/filters/channel_idle/idle_filter_state.cc\",",
          "146:         \"src/core/ext/filters/channel_idle/idle_filter_state.h\",",
          "147:         \"src/core/ext/filters/client_channel/backend_metric.cc\",",
          "148:         \"src/core/ext/filters/client_channel/backend_metric.h\",",
          "149:         \"src/core/ext/filters/client_channel/backup_poller.cc\",",
          "150:         \"src/core/ext/filters/client_channel/backup_poller.h\",",
          "151:         \"src/core/ext/filters/client_channel/channel_connectivity.cc\",",
          "152:         \"src/core/ext/filters/client_channel/client_channel.cc\",",
          "153:         \"src/core/ext/filters/client_channel/client_channel.h\",",
          "154:         \"src/core/ext/filters/client_channel/client_channel_channelz.cc\",",
          "155:         \"src/core/ext/filters/client_channel/client_channel_channelz.h\",",
          "156:         \"src/core/ext/filters/client_channel/client_channel_factory.cc\",",
          "157:         \"src/core/ext/filters/client_channel/client_channel_factory.h\",",
          "158:         \"src/core/ext/filters/client_channel/client_channel_internal.h\",",
          "159:         \"src/core/ext/filters/client_channel/client_channel_plugin.cc\",",
          "160:         \"src/core/ext/filters/client_channel/client_channel_service_config.cc\",",
          "161:         \"src/core/ext/filters/client_channel/client_channel_service_config.h\",",
          "162:         \"src/core/ext/filters/client_channel/config_selector.cc\",",
          "163:         \"src/core/ext/filters/client_channel/config_selector.h\",",
          "164:         \"src/core/ext/filters/client_channel/connector.h\",",
          "165:         \"src/core/ext/filters/client_channel/dynamic_filters.cc\",",
          "166:         \"src/core/ext/filters/client_channel/dynamic_filters.h\",",
          "167:         \"src/core/ext/filters/client_channel/global_subchannel_pool.cc\",",
          "168:         \"src/core/ext/filters/client_channel/global_subchannel_pool.h\",",
          "169:         \"src/core/ext/filters/client_channel/http_proxy.cc\",",
          "170:         \"src/core/ext/filters/client_channel/http_proxy.h\",",
          "171:         \"src/core/ext/filters/client_channel/lb_policy/address_filtering.cc\",",
          "172:         \"src/core/ext/filters/client_channel/lb_policy/address_filtering.h\",",
          "173:         \"src/core/ext/filters/client_channel/lb_policy/backend_metric_data.h\",",
          "174:         \"src/core/ext/filters/client_channel/lb_policy/child_policy_handler.cc\",",
          "175:         \"src/core/ext/filters/client_channel/lb_policy/child_policy_handler.h\",",
          "176:         \"src/core/ext/filters/client_channel/lb_policy/endpoint_list.cc\",",
          "177:         \"src/core/ext/filters/client_channel/lb_policy/endpoint_list.h\",",
          "178:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/client_load_reporting_filter.cc\",",
          "179:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/client_load_reporting_filter.h\",",
          "180:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.cc\",",
          "181:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb.h\",",
          "182:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_balancer_addresses.cc\",",
          "183:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_balancer_addresses.h\",",
          "184:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_client_stats.cc\",",
          "185:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_client_stats.h\",",
          "186:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/load_balancer_api.cc\",",
          "187:         \"src/core/ext/filters/client_channel/lb_policy/grpclb/load_balancer_api.h\",",
          "188:         \"src/core/ext/filters/client_channel/lb_policy/health_check_client.cc\",",
          "189:         \"src/core/ext/filters/client_channel/lb_policy/health_check_client.h\",",
          "190:         \"src/core/ext/filters/client_channel/lb_policy/health_check_client_internal.h\",",
          "191:         \"src/core/ext/filters/client_channel/lb_policy/oob_backend_metric.cc\",",
          "192:         \"src/core/ext/filters/client_channel/lb_policy/oob_backend_metric.h\",",
          "193:         \"src/core/ext/filters/client_channel/lb_policy/oob_backend_metric_internal.h\",",
          "194:         \"src/core/ext/filters/client_channel/lb_policy/outlier_detection/outlier_detection.cc\",",
          "195:         \"src/core/ext/filters/client_channel/lb_policy/outlier_detection/outlier_detection.h\",",
          "196:         \"src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.cc\",",
          "197:         \"src/core/ext/filters/client_channel/lb_policy/pick_first/pick_first.h\",",
          "198:         \"src/core/ext/filters/client_channel/lb_policy/priority/priority.cc\",",
          "199:         \"src/core/ext/filters/client_channel/lb_policy/ring_hash/ring_hash.cc\",",
          "200:         \"src/core/ext/filters/client_channel/lb_policy/ring_hash/ring_hash.h\",",
          "201:         \"src/core/ext/filters/client_channel/lb_policy/rls/rls.cc\",",
          "202:         \"src/core/ext/filters/client_channel/lb_policy/round_robin/round_robin.cc\",",
          "203:         \"src/core/ext/filters/client_channel/lb_policy/weighted_round_robin/static_stride_scheduler.cc\",",
          "204:         \"src/core/ext/filters/client_channel/lb_policy/weighted_round_robin/static_stride_scheduler.h\",",
          "205:         \"src/core/ext/filters/client_channel/lb_policy/weighted_round_robin/weighted_round_robin.cc\",",
          "206:         \"src/core/ext/filters/client_channel/lb_policy/weighted_target/weighted_target.cc\",",
          "207:         \"src/core/ext/filters/client_channel/lb_policy/xds/cds.cc\",",
          "208:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_channel_args.h\",",
          "209:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_impl.cc\",",
          "210:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_manager.cc\",",
          "211:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_cluster_resolver.cc\",",
          "212:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_override_host.cc\",",
          "213:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_override_host.h\",",
          "214:         \"src/core/ext/filters/client_channel/lb_policy/xds/xds_wrr_locality.cc\",",
          "215:         \"src/core/ext/filters/client_channel/local_subchannel_pool.cc\",",
          "216:         \"src/core/ext/filters/client_channel/local_subchannel_pool.h\",",
          "217:         \"src/core/ext/filters/client_channel/resolver/binder/binder_resolver.cc\",",
          "218:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.cc\",",
          "219:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.h\",",
          "220:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver.h\",",
          "221:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_posix.cc\",",
          "222:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_windows.cc\",",
          "223:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.cc\",",
          "224:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.h\",",
          "225:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_posix.cc\",",
          "226:         \"src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_windows.cc\",",
          "227:         \"src/core/ext/filters/client_channel/resolver/dns/dns_resolver_plugin.cc\",",
          "228:         \"src/core/ext/filters/client_channel/resolver/dns/dns_resolver_plugin.h\",",
          "229:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/event_engine_client_channel_resolver.cc\",",
          "230:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/event_engine_client_channel_resolver.h\",",
          "231:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/service_config_helper.cc\",",
          "232:         \"src/core/ext/filters/client_channel/resolver/dns/event_engine/service_config_helper.h\",",
          "233:         \"src/core/ext/filters/client_channel/resolver/dns/native/dns_resolver.cc\",",
          "234:         \"src/core/ext/filters/client_channel/resolver/dns/native/dns_resolver.h\",",
          "235:         \"src/core/ext/filters/client_channel/resolver/fake/fake_resolver.cc\",",
          "236:         \"src/core/ext/filters/client_channel/resolver/fake/fake_resolver.h\",",
          "237:         \"src/core/ext/filters/client_channel/resolver/google_c2p/google_c2p_resolver.cc\",",
          "238:         \"src/core/ext/filters/client_channel/resolver/polling_resolver.cc\",",
          "239:         \"src/core/ext/filters/client_channel/resolver/polling_resolver.h\",",
          "240:         \"src/core/ext/filters/client_channel/resolver/sockaddr/sockaddr_resolver.cc\",",
          "241:         \"src/core/ext/filters/client_channel/resolver/xds/xds_resolver.cc\",",
          "242:         \"src/core/ext/filters/client_channel/resolver/xds/xds_resolver.h\",",
          "243:         \"src/core/ext/filters/client_channel/retry_filter.cc\",",
          "244:         \"src/core/ext/filters/client_channel/retry_filter.h\",",
          "245:         \"src/core/ext/filters/client_channel/retry_service_config.cc\",",
          "246:         \"src/core/ext/filters/client_channel/retry_service_config.h\",",
          "247:         \"src/core/ext/filters/client_channel/retry_throttle.cc\",",
          "248:         \"src/core/ext/filters/client_channel/retry_throttle.h\",",
          "249:         \"src/core/ext/filters/client_channel/service_config_channel_arg_filter.cc\",",
          "250:         \"src/core/ext/filters/client_channel/subchannel.cc\",",
          "251:         \"src/core/ext/filters/client_channel/subchannel.h\",",
          "252:         \"src/core/ext/filters/client_channel/subchannel_interface_internal.h\",",
          "253:         \"src/core/ext/filters/client_channel/subchannel_pool_interface.cc\",",
          "254:         \"src/core/ext/filters/client_channel/subchannel_pool_interface.h\",",
          "255:         \"src/core/ext/filters/client_channel/subchannel_stream_client.cc\",",
          "256:         \"src/core/ext/filters/client_channel/subchannel_stream_client.h\",",
          "257:         \"src/core/ext/filters/deadline/deadline_filter.cc\",",
          "258:         \"src/core/ext/filters/deadline/deadline_filter.h\",",
          "259:         \"src/core/ext/filters/fault_injection/fault_injection_filter.cc\",",
          "260:         \"src/core/ext/filters/fault_injection/fault_injection_filter.h\",",
          "261:         \"src/core/ext/filters/fault_injection/fault_injection_service_config_parser.cc\",",
          "262:         \"src/core/ext/filters/fault_injection/fault_injection_service_config_parser.h\",",
          "263:         \"src/core/ext/filters/http/client/http_client_filter.cc\",",
          "264:         \"src/core/ext/filters/http/client/http_client_filter.h\",",
          "265:         \"src/core/ext/filters/http/client_authority_filter.cc\",",
          "266:         \"src/core/ext/filters/http/client_authority_filter.h\",",
          "267:         \"src/core/ext/filters/http/http_filters_plugin.cc\",",
          "268:         \"src/core/ext/filters/http/message_compress/compression_filter.cc\",",
          "269:         \"src/core/ext/filters/http/message_compress/compression_filter.h\",",
          "270:         \"src/core/ext/filters/http/server/http_server_filter.cc\",",
          "271:         \"src/core/ext/filters/http/server/http_server_filter.h\",",
          "272:         \"src/core/ext/filters/message_size/message_size_filter.cc\",",
          "273:         \"src/core/ext/filters/message_size/message_size_filter.h\",",
          "274:         \"src/core/ext/filters/rbac/rbac_filter.cc\",",
          "275:         \"src/core/ext/filters/rbac/rbac_filter.h\",",
          "276:         \"src/core/ext/filters/rbac/rbac_service_config_parser.cc\",",
          "277:         \"src/core/ext/filters/rbac/rbac_service_config_parser.h\",",
          "278:         \"src/core/ext/filters/server_config_selector/server_config_selector.h\",",
          "279:         \"src/core/ext/filters/server_config_selector/server_config_selector_filter.cc\",",
          "280:         \"src/core/ext/filters/server_config_selector/server_config_selector_filter.h\",",
          "281:         \"src/core/ext/filters/stateful_session/stateful_session_filter.cc\",",
          "282:         \"src/core/ext/filters/stateful_session/stateful_session_filter.h\",",
          "283:         \"src/core/ext/filters/stateful_session/stateful_session_service_config_parser.cc\",",
          "284:         \"src/core/ext/filters/stateful_session/stateful_session_service_config_parser.h\",",
          "285:         \"src/core/ext/gcp/metadata_query.cc\",",
          "286:         \"src/core/ext/gcp/metadata_query.h\",",
          "287:         \"src/core/ext/transport/chttp2/alpn/alpn.cc\",",
          "288:         \"src/core/ext/transport/chttp2/alpn/alpn.h\",",
          "289:         \"src/core/ext/transport/chttp2/client/chttp2_connector.cc\",",
          "290:         \"src/core/ext/transport/chttp2/client/chttp2_connector.h\",",
          "291:         \"src/core/ext/transport/chttp2/server/chttp2_server.cc\",",
          "292:         \"src/core/ext/transport/chttp2/server/chttp2_server.h\",",
          "293:         \"src/core/ext/transport/chttp2/transport/bin_decoder.cc\",",
          "294:         \"src/core/ext/transport/chttp2/transport/bin_decoder.h\",",
          "295:         \"src/core/ext/transport/chttp2/transport/bin_encoder.cc\",",
          "296:         \"src/core/ext/transport/chttp2/transport/bin_encoder.h\",",
          "297:         \"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",",
          "298:         \"src/core/ext/transport/chttp2/transport/chttp2_transport.h\",",
          "299:         \"src/core/ext/transport/chttp2/transport/context_list_entry.h\",",
          "300:         \"src/core/ext/transport/chttp2/transport/decode_huff.cc\",",
          "301:         \"src/core/ext/transport/chttp2/transport/decode_huff.h\",",
          "302:         \"src/core/ext/transport/chttp2/transport/flow_control.cc\",",
          "303:         \"src/core/ext/transport/chttp2/transport/flow_control.h\",",
          "304:         \"src/core/ext/transport/chttp2/transport/frame.h\",",
          "305:         \"src/core/ext/transport/chttp2/transport/frame_data.cc\",",
          "306:         \"src/core/ext/transport/chttp2/transport/frame_data.h\",",
          "307:         \"src/core/ext/transport/chttp2/transport/frame_goaway.cc\",",
          "308:         \"src/core/ext/transport/chttp2/transport/frame_goaway.h\",",
          "309:         \"src/core/ext/transport/chttp2/transport/frame_ping.cc\",",
          "310:         \"src/core/ext/transport/chttp2/transport/frame_ping.h\",",
          "311:         \"src/core/ext/transport/chttp2/transport/frame_rst_stream.cc\",",
          "312:         \"src/core/ext/transport/chttp2/transport/frame_rst_stream.h\",",
          "313:         \"src/core/ext/transport/chttp2/transport/frame_settings.cc\",",
          "314:         \"src/core/ext/transport/chttp2/transport/frame_settings.h\",",
          "315:         \"src/core/ext/transport/chttp2/transport/frame_window_update.cc\",",
          "316:         \"src/core/ext/transport/chttp2/transport/frame_window_update.h\",",
          "317:         \"src/core/ext/transport/chttp2/transport/hpack_constants.h\",",
          "318:         \"src/core/ext/transport/chttp2/transport/hpack_encoder.cc\",",
          "319:         \"src/core/ext/transport/chttp2/transport/hpack_encoder.h\",",
          "320:         \"src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc\",",
          "321:         \"src/core/ext/transport/chttp2/transport/hpack_encoder_table.h\",",
          "322:         \"src/core/ext/transport/chttp2/transport/hpack_parse_result.cc\",",
          "323:         \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\",",
          "324:         \"src/core/ext/transport/chttp2/transport/hpack_parser.cc\",",
          "325:         \"src/core/ext/transport/chttp2/transport/hpack_parser.h\",",
          "326:         \"src/core/ext/transport/chttp2/transport/hpack_parser_table.cc\",",
          "327:         \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\",",
          "328:         \"src/core/ext/transport/chttp2/transport/http2_settings.cc\",",
          "329:         \"src/core/ext/transport/chttp2/transport/http2_settings.h\",",
          "330:         \"src/core/ext/transport/chttp2/transport/http_trace.cc\",",
          "331:         \"src/core/ext/transport/chttp2/transport/http_trace.h\",",
          "332:         \"src/core/ext/transport/chttp2/transport/huffsyms.cc\",",
          "333:         \"src/core/ext/transport/chttp2/transport/huffsyms.h\",",
          "334:         \"src/core/ext/transport/chttp2/transport/internal.h\",",
          "335:         \"src/core/ext/transport/chttp2/transport/parsing.cc\",",
          "336:         \"src/core/ext/transport/chttp2/transport/stream_lists.cc\",",
          "337:         \"src/core/ext/transport/chttp2/transport/stream_map.cc\",",
          "338:         \"src/core/ext/transport/chttp2/transport/stream_map.h\",",
          "339:         \"src/core/ext/transport/chttp2/transport/varint.cc\",",
          "340:         \"src/core/ext/transport/chttp2/transport/varint.h\",",
          "341:         \"src/core/ext/transport/chttp2/transport/writing.cc\",",
          "342:         \"src/core/ext/transport/inproc/inproc_plugin.cc\",",
          "343:         \"src/core/ext/transport/inproc/inproc_transport.cc\",",
          "344:         \"src/core/ext/transport/inproc/inproc_transport.h\",",
          "345:         \"src/core/ext/upb-generated/envoy/admin/v3/certs.upb.c\",",
          "346:         \"src/core/ext/upb-generated/envoy/admin/v3/certs.upb.h\",",
          "347:         \"src/core/ext/upb-generated/envoy/admin/v3/clusters.upb.c\",",
          "348:         \"src/core/ext/upb-generated/envoy/admin/v3/clusters.upb.h\",",
          "349:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump.upb.c\",",
          "350:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump.upb.h\",",
          "351:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump_shared.upb.c\",",
          "352:         \"src/core/ext/upb-generated/envoy/admin/v3/config_dump_shared.upb.h\",",
          "353:         \"src/core/ext/upb-generated/envoy/admin/v3/init_dump.upb.c\",",
          "354:         \"src/core/ext/upb-generated/envoy/admin/v3/init_dump.upb.h\",",
          "355:         \"src/core/ext/upb-generated/envoy/admin/v3/listeners.upb.c\",",
          "356:         \"src/core/ext/upb-generated/envoy/admin/v3/listeners.upb.h\",",
          "357:         \"src/core/ext/upb-generated/envoy/admin/v3/memory.upb.c\",",
          "358:         \"src/core/ext/upb-generated/envoy/admin/v3/memory.upb.h\",",
          "359:         \"src/core/ext/upb-generated/envoy/admin/v3/metrics.upb.c\",",
          "360:         \"src/core/ext/upb-generated/envoy/admin/v3/metrics.upb.h\",",
          "361:         \"src/core/ext/upb-generated/envoy/admin/v3/mutex_stats.upb.c\",",
          "362:         \"src/core/ext/upb-generated/envoy/admin/v3/mutex_stats.upb.h\",",
          "363:         \"src/core/ext/upb-generated/envoy/admin/v3/server_info.upb.c\",",
          "364:         \"src/core/ext/upb-generated/envoy/admin/v3/server_info.upb.h\",",
          "365:         \"src/core/ext/upb-generated/envoy/admin/v3/tap.upb.c\",",
          "366:         \"src/core/ext/upb-generated/envoy/admin/v3/tap.upb.h\",",
          "367:         \"src/core/ext/upb-generated/envoy/annotations/deprecation.upb.c\",",
          "368:         \"src/core/ext/upb-generated/envoy/annotations/deprecation.upb.h\",",
          "369:         \"src/core/ext/upb-generated/envoy/annotations/resource.upb.c\",",
          "370:         \"src/core/ext/upb-generated/envoy/annotations/resource.upb.h\",",
          "371:         \"src/core/ext/upb-generated/envoy/config/accesslog/v3/accesslog.upb.c\",",
          "372:         \"src/core/ext/upb-generated/envoy/config/accesslog/v3/accesslog.upb.h\",",
          "373:         \"src/core/ext/upb-generated/envoy/config/bootstrap/v3/bootstrap.upb.c\",",
          "374:         \"src/core/ext/upb-generated/envoy/config/bootstrap/v3/bootstrap.upb.h\",",
          "375:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/circuit_breaker.upb.c\",",
          "376:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/circuit_breaker.upb.h\",",
          "377:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/cluster.upb.c\",",
          "378:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/cluster.upb.h\",",
          "379:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/filter.upb.c\",",
          "380:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/filter.upb.h\",",
          "381:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/outlier_detection.upb.c\",",
          "382:         \"src/core/ext/upb-generated/envoy/config/cluster/v3/outlier_detection.upb.h\",",
          "383:         \"src/core/ext/upb-generated/envoy/config/common/matcher/v3/matcher.upb.c\",",
          "384:         \"src/core/ext/upb-generated/envoy/config/common/matcher/v3/matcher.upb.h\",",
          "385:         \"src/core/ext/upb-generated/envoy/config/core/v3/address.upb.c\",",
          "386:         \"src/core/ext/upb-generated/envoy/config/core/v3/address.upb.h\",",
          "387:         \"src/core/ext/upb-generated/envoy/config/core/v3/backoff.upb.c\",",
          "388:         \"src/core/ext/upb-generated/envoy/config/core/v3/backoff.upb.h\",",
          "389:         \"src/core/ext/upb-generated/envoy/config/core/v3/base.upb.c\",",
          "390:         \"src/core/ext/upb-generated/envoy/config/core/v3/base.upb.h\",",
          "391:         \"src/core/ext/upb-generated/envoy/config/core/v3/config_source.upb.c\",",
          "392:         \"src/core/ext/upb-generated/envoy/config/core/v3/config_source.upb.h\",",
          "393:         \"src/core/ext/upb-generated/envoy/config/core/v3/event_service_config.upb.c\",",
          "394:         \"src/core/ext/upb-generated/envoy/config/core/v3/event_service_config.upb.h\",",
          "395:         \"src/core/ext/upb-generated/envoy/config/core/v3/extension.upb.c\",",
          "396:         \"src/core/ext/upb-generated/envoy/config/core/v3/extension.upb.h\",",
          "397:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_method_list.upb.c\",",
          "398:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_method_list.upb.h\",",
          "399:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_service.upb.c\",",
          "400:         \"src/core/ext/upb-generated/envoy/config/core/v3/grpc_service.upb.h\",",
          "401:         \"src/core/ext/upb-generated/envoy/config/core/v3/health_check.upb.c\",",
          "402:         \"src/core/ext/upb-generated/envoy/config/core/v3/health_check.upb.h\",",
          "403:         \"src/core/ext/upb-generated/envoy/config/core/v3/http_uri.upb.c\",",
          "404:         \"src/core/ext/upb-generated/envoy/config/core/v3/http_uri.upb.h\",",
          "405:         \"src/core/ext/upb-generated/envoy/config/core/v3/protocol.upb.c\",",
          "406:         \"src/core/ext/upb-generated/envoy/config/core/v3/protocol.upb.h\",",
          "407:         \"src/core/ext/upb-generated/envoy/config/core/v3/proxy_protocol.upb.c\",",
          "408:         \"src/core/ext/upb-generated/envoy/config/core/v3/proxy_protocol.upb.h\",",
          "409:         \"src/core/ext/upb-generated/envoy/config/core/v3/resolver.upb.c\",",
          "410:         \"src/core/ext/upb-generated/envoy/config/core/v3/resolver.upb.h\",",
          "411:         \"src/core/ext/upb-generated/envoy/config/core/v3/socket_option.upb.c\",",
          "412:         \"src/core/ext/upb-generated/envoy/config/core/v3/socket_option.upb.h\",",
          "413:         \"src/core/ext/upb-generated/envoy/config/core/v3/substitution_format_string.upb.c\",",
          "414:         \"src/core/ext/upb-generated/envoy/config/core/v3/substitution_format_string.upb.h\",",
          "415:         \"src/core/ext/upb-generated/envoy/config/core/v3/udp_socket_config.upb.c\",",
          "416:         \"src/core/ext/upb-generated/envoy/config/core/v3/udp_socket_config.upb.h\",",
          "417:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint.upb.c\",",
          "418:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint.upb.h\",",
          "419:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint_components.upb.c\",",
          "420:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/endpoint_components.upb.h\",",
          "421:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/load_report.upb.c\",",
          "422:         \"src/core/ext/upb-generated/envoy/config/endpoint/v3/load_report.upb.h\",",
          "423:         \"src/core/ext/upb-generated/envoy/config/listener/v3/api_listener.upb.c\",",
          "424:         \"src/core/ext/upb-generated/envoy/config/listener/v3/api_listener.upb.h\",",
          "425:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener.upb.c\",",
          "426:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener.upb.h\",",
          "427:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener_components.upb.c\",",
          "428:         \"src/core/ext/upb-generated/envoy/config/listener/v3/listener_components.upb.h\",",
          "429:         \"src/core/ext/upb-generated/envoy/config/listener/v3/quic_config.upb.c\",",
          "430:         \"src/core/ext/upb-generated/envoy/config/listener/v3/quic_config.upb.h\",",
          "431:         \"src/core/ext/upb-generated/envoy/config/listener/v3/udp_listener_config.upb.c\",",
          "432:         \"src/core/ext/upb-generated/envoy/config/listener/v3/udp_listener_config.upb.h\",",
          "433:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/metrics_service.upb.c\",",
          "434:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/metrics_service.upb.h\",",
          "435:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/stats.upb.c\",",
          "436:         \"src/core/ext/upb-generated/envoy/config/metrics/v3/stats.upb.h\",",
          "437:         \"src/core/ext/upb-generated/envoy/config/overload/v3/overload.upb.c\",",
          "438:         \"src/core/ext/upb-generated/envoy/config/overload/v3/overload.upb.h\",",
          "439:         \"src/core/ext/upb-generated/envoy/config/rbac/v3/rbac.upb.c\",",
          "440:         \"src/core/ext/upb-generated/envoy/config/rbac/v3/rbac.upb.h\",",
          "441:         \"src/core/ext/upb-generated/envoy/config/route/v3/route.upb.c\",",
          "442:         \"src/core/ext/upb-generated/envoy/config/route/v3/route.upb.h\",",
          "443:         \"src/core/ext/upb-generated/envoy/config/route/v3/route_components.upb.c\",",
          "444:         \"src/core/ext/upb-generated/envoy/config/route/v3/route_components.upb.h\",",
          "445:         \"src/core/ext/upb-generated/envoy/config/route/v3/scoped_route.upb.c\",",
          "446:         \"src/core/ext/upb-generated/envoy/config/route/v3/scoped_route.upb.h\",",
          "447:         \"src/core/ext/upb-generated/envoy/config/tap/v3/common.upb.c\",",
          "448:         \"src/core/ext/upb-generated/envoy/config/tap/v3/common.upb.h\",",
          "449:         \"src/core/ext/upb-generated/envoy/config/trace/v3/datadog.upb.c\",",
          "450:         \"src/core/ext/upb-generated/envoy/config/trace/v3/datadog.upb.h\",",
          "451:         \"src/core/ext/upb-generated/envoy/config/trace/v3/dynamic_ot.upb.c\",",
          "452:         \"src/core/ext/upb-generated/envoy/config/trace/v3/dynamic_ot.upb.h\",",
          "453:         \"src/core/ext/upb-generated/envoy/config/trace/v3/http_tracer.upb.c\",",
          "454:         \"src/core/ext/upb-generated/envoy/config/trace/v3/http_tracer.upb.h\",",
          "455:         \"src/core/ext/upb-generated/envoy/config/trace/v3/lightstep.upb.c\",",
          "456:         \"src/core/ext/upb-generated/envoy/config/trace/v3/lightstep.upb.h\",",
          "457:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opencensus.upb.c\",",
          "458:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opencensus.upb.h\",",
          "459:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opentelemetry.upb.c\",",
          "460:         \"src/core/ext/upb-generated/envoy/config/trace/v3/opentelemetry.upb.h\",",
          "461:         \"src/core/ext/upb-generated/envoy/config/trace/v3/service.upb.c\",",
          "462:         \"src/core/ext/upb-generated/envoy/config/trace/v3/service.upb.h\",",
          "463:         \"src/core/ext/upb-generated/envoy/config/trace/v3/skywalking.upb.c\",",
          "464:         \"src/core/ext/upb-generated/envoy/config/trace/v3/skywalking.upb.h\",",
          "465:         \"src/core/ext/upb-generated/envoy/config/trace/v3/trace.upb.c\",",
          "466:         \"src/core/ext/upb-generated/envoy/config/trace/v3/trace.upb.h\",",
          "467:         \"src/core/ext/upb-generated/envoy/config/trace/v3/xray.upb.c\",",
          "468:         \"src/core/ext/upb-generated/envoy/config/trace/v3/xray.upb.h\",",
          "469:         \"src/core/ext/upb-generated/envoy/config/trace/v3/zipkin.upb.c\",",
          "470:         \"src/core/ext/upb-generated/envoy/config/trace/v3/zipkin.upb.h\",",
          "471:         \"src/core/ext/upb-generated/envoy/data/accesslog/v3/accesslog.upb.c\",",
          "472:         \"src/core/ext/upb-generated/envoy/data/accesslog/v3/accesslog.upb.h\",",
          "473:         \"src/core/ext/upb-generated/envoy/extensions/clusters/aggregate/v3/cluster.upb.c\",",
          "474:         \"src/core/ext/upb-generated/envoy/extensions/clusters/aggregate/v3/cluster.upb.h\",",
          "475:         \"src/core/ext/upb-generated/envoy/extensions/filters/common/fault/v3/fault.upb.c\",",
          "476:         \"src/core/ext/upb-generated/envoy/extensions/filters/common/fault/v3/fault.upb.h\",",
          "477:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/fault/v3/fault.upb.c\",",
          "478:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/fault/v3/fault.upb.h\",",
          "479:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/rbac/v3/rbac.upb.c\",",
          "480:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/rbac/v3/rbac.upb.h\",",
          "481:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/router/v3/router.upb.c\",",
          "482:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/router/v3/router.upb.h\",",
          "483:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upb.c\",",
          "484:         \"src/core/ext/upb-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upb.h\",",
          "485:         \"src/core/ext/upb-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upb.c\",",
          "486:         \"src/core/ext/upb-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upb.h\",",
          "487:         \"src/core/ext/upb-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upb.c\",",
          "488:         \"src/core/ext/upb-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upb.h\",",
          "489:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/client_side_weighted_round_robin/v3/client_side_weighted_round_robin.upb.c\",",
          "490:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/client_side_weighted_round_robin/v3/client_side_weighted_round_robin.upb.h\",",
          "491:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/common/v3/common.upb.c\",",
          "492:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/common/v3/common.upb.h\",",
          "493:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.upb.c\",",
          "494:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.upb.h\",",
          "495:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.upb.c\",",
          "496:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.upb.h\",",
          "497:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/wrr_locality/v3/wrr_locality.upb.c\",",
          "498:         \"src/core/ext/upb-generated/envoy/extensions/load_balancing_policies/wrr_locality/v3/wrr_locality.upb.h\",",
          "499:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/cert.upb.c\",",
          "500:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/cert.upb.h\",",
          "501:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/common.upb.c\",",
          "502:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/common.upb.h\",",
          "503:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/secret.upb.c\",",
          "504:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/secret.upb.h\",",
          "505:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls.upb.c\",",
          "506:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls.upb.h\",",
          "507:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upb.c\",",
          "508:         \"src/core/ext/upb-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upb.h\",",
          "509:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/ads.upb.c\",",
          "510:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/ads.upb.h\",",
          "511:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/discovery.upb.c\",",
          "512:         \"src/core/ext/upb-generated/envoy/service/discovery/v3/discovery.upb.h\",",
          "513:         \"src/core/ext/upb-generated/envoy/service/load_stats/v3/lrs.upb.c\",",
          "514:         \"src/core/ext/upb-generated/envoy/service/load_stats/v3/lrs.upb.h\",",
          "515:         \"src/core/ext/upb-generated/envoy/service/status/v3/csds.upb.c\",",
          "516:         \"src/core/ext/upb-generated/envoy/service/status/v3/csds.upb.h\",",
          "517:         \"src/core/ext/upb-generated/envoy/type/http/v3/cookie.upb.c\",",
          "518:         \"src/core/ext/upb-generated/envoy/type/http/v3/cookie.upb.h\",",
          "519:         \"src/core/ext/upb-generated/envoy/type/http/v3/path_transformation.upb.c\",",
          "520:         \"src/core/ext/upb-generated/envoy/type/http/v3/path_transformation.upb.h\",",
          "521:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/filter_state.upb.c\",",
          "522:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/filter_state.upb.h\",",
          "523:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/http_inputs.upb.c\",",
          "524:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/http_inputs.upb.h\",",
          "525:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/metadata.upb.c\",",
          "526:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/metadata.upb.h\",",
          "527:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/node.upb.c\",",
          "528:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/node.upb.h\",",
          "529:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/number.upb.c\",",
          "530:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/number.upb.h\",",
          "531:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/path.upb.c\",",
          "532:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/path.upb.h\",",
          "533:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/regex.upb.c\",",
          "534:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/regex.upb.h\",",
          "535:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/status_code_input.upb.c\",",
          "536:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/status_code_input.upb.h\",",
          "537:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/string.upb.c\",",
          "538:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/string.upb.h\",",
          "539:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/struct.upb.c\",",
          "540:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/struct.upb.h\",",
          "541:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/value.upb.c\",",
          "542:         \"src/core/ext/upb-generated/envoy/type/matcher/v3/value.upb.h\",",
          "543:         \"src/core/ext/upb-generated/envoy/type/metadata/v3/metadata.upb.c\",",
          "544:         \"src/core/ext/upb-generated/envoy/type/metadata/v3/metadata.upb.h\",",
          "545:         \"src/core/ext/upb-generated/envoy/type/tracing/v3/custom_tag.upb.c\",",
          "546:         \"src/core/ext/upb-generated/envoy/type/tracing/v3/custom_tag.upb.h\",",
          "547:         \"src/core/ext/upb-generated/envoy/type/v3/hash_policy.upb.c\",",
          "548:         \"src/core/ext/upb-generated/envoy/type/v3/hash_policy.upb.h\",",
          "549:         \"src/core/ext/upb-generated/envoy/type/v3/http.upb.c\",",
          "550:         \"src/core/ext/upb-generated/envoy/type/v3/http.upb.h\",",
          "551:         \"src/core/ext/upb-generated/envoy/type/v3/http_status.upb.c\",",
          "552:         \"src/core/ext/upb-generated/envoy/type/v3/http_status.upb.h\",",
          "553:         \"src/core/ext/upb-generated/envoy/type/v3/percent.upb.c\",",
          "554:         \"src/core/ext/upb-generated/envoy/type/v3/percent.upb.h\",",
          "555:         \"src/core/ext/upb-generated/envoy/type/v3/range.upb.c\",",
          "556:         \"src/core/ext/upb-generated/envoy/type/v3/range.upb.h\",",
          "557:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_strategy.upb.c\",",
          "558:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_strategy.upb.h\",",
          "559:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_unit.upb.c\",",
          "560:         \"src/core/ext/upb-generated/envoy/type/v3/ratelimit_unit.upb.h\",",
          "561:         \"src/core/ext/upb-generated/envoy/type/v3/semantic_version.upb.c\",",
          "562:         \"src/core/ext/upb-generated/envoy/type/v3/semantic_version.upb.h\",",
          "563:         \"src/core/ext/upb-generated/envoy/type/v3/token_bucket.upb.c\",",
          "564:         \"src/core/ext/upb-generated/envoy/type/v3/token_bucket.upb.h\",",
          "565:         \"src/core/ext/upb-generated/google/api/annotations.upb.c\",",
          "566:         \"src/core/ext/upb-generated/google/api/annotations.upb.h\",",
          "567:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/checked.upb.c\",",
          "568:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/checked.upb.h\",",
          "569:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/syntax.upb.c\",",
          "570:         \"src/core/ext/upb-generated/google/api/expr/v1alpha1/syntax.upb.h\",",
          "571:         \"src/core/ext/upb-generated/google/api/http.upb.c\",",
          "572:         \"src/core/ext/upb-generated/google/api/http.upb.h\",",
          "573:         \"src/core/ext/upb-generated/google/api/httpbody.upb.c\",",
          "574:         \"src/core/ext/upb-generated/google/api/httpbody.upb.h\",",
          "575:         \"src/core/ext/upb-generated/google/protobuf/any.upb.c\",",
          "576:         \"src/core/ext/upb-generated/google/protobuf/any.upb.h\",",
          "577:         \"src/core/ext/upb-generated/google/protobuf/descriptor.upb.c\",",
          "578:         \"src/core/ext/upb-generated/google/protobuf/descriptor.upb.h\",",
          "579:         \"src/core/ext/upb-generated/google/protobuf/duration.upb.c\",",
          "580:         \"src/core/ext/upb-generated/google/protobuf/duration.upb.h\",",
          "581:         \"src/core/ext/upb-generated/google/protobuf/empty.upb.c\",",
          "582:         \"src/core/ext/upb-generated/google/protobuf/empty.upb.h\",",
          "583:         \"src/core/ext/upb-generated/google/protobuf/struct.upb.c\",",
          "584:         \"src/core/ext/upb-generated/google/protobuf/struct.upb.h\",",
          "585:         \"src/core/ext/upb-generated/google/protobuf/timestamp.upb.c\",",
          "586:         \"src/core/ext/upb-generated/google/protobuf/timestamp.upb.h\",",
          "587:         \"src/core/ext/upb-generated/google/protobuf/wrappers.upb.c\",",
          "588:         \"src/core/ext/upb-generated/google/protobuf/wrappers.upb.h\",",
          "589:         \"src/core/ext/upb-generated/google/rpc/status.upb.c\",",
          "590:         \"src/core/ext/upb-generated/google/rpc/status.upb.h\",",
          "591:         \"src/core/ext/upb-generated/opencensus/proto/trace/v1/trace_config.upb.c\",",
          "592:         \"src/core/ext/upb-generated/opencensus/proto/trace/v1/trace_config.upb.h\",",
          "593:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/altscontext.upb.c\",",
          "594:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/altscontext.upb.h\",",
          "595:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/handshaker.upb.c\",",
          "596:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/handshaker.upb.h\",",
          "597:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/transport_security_common.upb.c\",",
          "598:         \"src/core/ext/upb-generated/src/proto/grpc/gcp/transport_security_common.upb.h\",",
          "599:         \"src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.c\",",
          "600:         \"src/core/ext/upb-generated/src/proto/grpc/health/v1/health.upb.h\",",
          "601:         \"src/core/ext/upb-generated/src/proto/grpc/lb/v1/load_balancer.upb.c\",",
          "602:         \"src/core/ext/upb-generated/src/proto/grpc/lb/v1/load_balancer.upb.h\",",
          "603:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls.upb.c\",",
          "604:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls.upb.h\",",
          "605:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls_config.upb.c\",",
          "606:         \"src/core/ext/upb-generated/src/proto/grpc/lookup/v1/rls_config.upb.h\",",
          "607:         \"src/core/ext/upb-generated/udpa/annotations/migrate.upb.c\",",
          "608:         \"src/core/ext/upb-generated/udpa/annotations/migrate.upb.h\",",
          "609:         \"src/core/ext/upb-generated/udpa/annotations/security.upb.c\",",
          "610:         \"src/core/ext/upb-generated/udpa/annotations/security.upb.h\",",
          "611:         \"src/core/ext/upb-generated/udpa/annotations/sensitive.upb.c\",",
          "612:         \"src/core/ext/upb-generated/udpa/annotations/sensitive.upb.h\",",
          "613:         \"src/core/ext/upb-generated/udpa/annotations/status.upb.c\",",
          "614:         \"src/core/ext/upb-generated/udpa/annotations/status.upb.h\",",
          "615:         \"src/core/ext/upb-generated/udpa/annotations/versioning.upb.c\",",
          "616:         \"src/core/ext/upb-generated/udpa/annotations/versioning.upb.h\",",
          "617:         \"src/core/ext/upb-generated/validate/validate.upb.c\",",
          "618:         \"src/core/ext/upb-generated/validate/validate.upb.h\",",
          "619:         \"src/core/ext/upb-generated/xds/annotations/v3/migrate.upb.c\",",
          "620:         \"src/core/ext/upb-generated/xds/annotations/v3/migrate.upb.h\",",
          "621:         \"src/core/ext/upb-generated/xds/annotations/v3/security.upb.c\",",
          "622:         \"src/core/ext/upb-generated/xds/annotations/v3/security.upb.h\",",
          "623:         \"src/core/ext/upb-generated/xds/annotations/v3/sensitive.upb.c\",",
          "624:         \"src/core/ext/upb-generated/xds/annotations/v3/sensitive.upb.h\",",
          "625:         \"src/core/ext/upb-generated/xds/annotations/v3/status.upb.c\",",
          "626:         \"src/core/ext/upb-generated/xds/annotations/v3/status.upb.h\",",
          "627:         \"src/core/ext/upb-generated/xds/annotations/v3/versioning.upb.c\",",
          "628:         \"src/core/ext/upb-generated/xds/annotations/v3/versioning.upb.h\",",
          "629:         \"src/core/ext/upb-generated/xds/core/v3/authority.upb.c\",",
          "630:         \"src/core/ext/upb-generated/xds/core/v3/authority.upb.h\",",
          "631:         \"src/core/ext/upb-generated/xds/core/v3/cidr.upb.c\",",
          "632:         \"src/core/ext/upb-generated/xds/core/v3/cidr.upb.h\",",
          "633:         \"src/core/ext/upb-generated/xds/core/v3/collection_entry.upb.c\",",
          "634:         \"src/core/ext/upb-generated/xds/core/v3/collection_entry.upb.h\",",
          "635:         \"src/core/ext/upb-generated/xds/core/v3/context_params.upb.c\",",
          "636:         \"src/core/ext/upb-generated/xds/core/v3/context_params.upb.h\",",
          "637:         \"src/core/ext/upb-generated/xds/core/v3/extension.upb.c\",",
          "638:         \"src/core/ext/upb-generated/xds/core/v3/extension.upb.h\",",
          "639:         \"src/core/ext/upb-generated/xds/core/v3/resource.upb.c\",",
          "640:         \"src/core/ext/upb-generated/xds/core/v3/resource.upb.h\",",
          "641:         \"src/core/ext/upb-generated/xds/core/v3/resource_locator.upb.c\",",
          "642:         \"src/core/ext/upb-generated/xds/core/v3/resource_locator.upb.h\",",
          "643:         \"src/core/ext/upb-generated/xds/core/v3/resource_name.upb.c\",",
          "644:         \"src/core/ext/upb-generated/xds/core/v3/resource_name.upb.h\",",
          "645:         \"src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.c\",",
          "646:         \"src/core/ext/upb-generated/xds/data/orca/v3/orca_load_report.upb.h\",",
          "647:         \"src/core/ext/upb-generated/xds/service/orca/v3/orca.upb.c\",",
          "648:         \"src/core/ext/upb-generated/xds/service/orca/v3/orca.upb.h\",",
          "649:         \"src/core/ext/upb-generated/xds/type/matcher/v3/cel.upb.c\",",
          "650:         \"src/core/ext/upb-generated/xds/type/matcher/v3/cel.upb.h\",",
          "651:         \"src/core/ext/upb-generated/xds/type/matcher/v3/domain.upb.c\",",
          "652:         \"src/core/ext/upb-generated/xds/type/matcher/v3/domain.upb.h\",",
          "653:         \"src/core/ext/upb-generated/xds/type/matcher/v3/http_inputs.upb.c\",",
          "654:         \"src/core/ext/upb-generated/xds/type/matcher/v3/http_inputs.upb.h\",",
          "655:         \"src/core/ext/upb-generated/xds/type/matcher/v3/ip.upb.c\",",
          "656:         \"src/core/ext/upb-generated/xds/type/matcher/v3/ip.upb.h\",",
          "657:         \"src/core/ext/upb-generated/xds/type/matcher/v3/matcher.upb.c\",",
          "658:         \"src/core/ext/upb-generated/xds/type/matcher/v3/matcher.upb.h\",",
          "659:         \"src/core/ext/upb-generated/xds/type/matcher/v3/range.upb.c\",",
          "660:         \"src/core/ext/upb-generated/xds/type/matcher/v3/range.upb.h\",",
          "661:         \"src/core/ext/upb-generated/xds/type/matcher/v3/regex.upb.c\",",
          "662:         \"src/core/ext/upb-generated/xds/type/matcher/v3/regex.upb.h\",",
          "663:         \"src/core/ext/upb-generated/xds/type/matcher/v3/string.upb.c\",",
          "664:         \"src/core/ext/upb-generated/xds/type/matcher/v3/string.upb.h\",",
          "665:         \"src/core/ext/upb-generated/xds/type/v3/cel.upb.c\",",
          "666:         \"src/core/ext/upb-generated/xds/type/v3/cel.upb.h\",",
          "667:         \"src/core/ext/upb-generated/xds/type/v3/range.upb.c\",",
          "668:         \"src/core/ext/upb-generated/xds/type/v3/range.upb.h\",",
          "669:         \"src/core/ext/upb-generated/xds/type/v3/typed_struct.upb.c\",",
          "670:         \"src/core/ext/upb-generated/xds/type/v3/typed_struct.upb.h\",",
          "671:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/certs.upbdefs.c\",",
          "672:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/certs.upbdefs.h\",",
          "673:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/clusters.upbdefs.c\",",
          "674:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/clusters.upbdefs.h\",",
          "675:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump.upbdefs.c\",",
          "676:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump.upbdefs.h\",",
          "677:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump_shared.upbdefs.c\",",
          "678:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/config_dump_shared.upbdefs.h\",",
          "679:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/init_dump.upbdefs.c\",",
          "680:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/init_dump.upbdefs.h\",",
          "681:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/listeners.upbdefs.c\",",
          "682:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/listeners.upbdefs.h\",",
          "683:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/memory.upbdefs.c\",",
          "684:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/memory.upbdefs.h\",",
          "685:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/metrics.upbdefs.c\",",
          "686:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/metrics.upbdefs.h\",",
          "687:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/mutex_stats.upbdefs.c\",",
          "688:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/mutex_stats.upbdefs.h\",",
          "689:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/server_info.upbdefs.c\",",
          "690:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/server_info.upbdefs.h\",",
          "691:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/tap.upbdefs.c\",",
          "692:         \"src/core/ext/upbdefs-generated/envoy/admin/v3/tap.upbdefs.h\",",
          "693:         \"src/core/ext/upbdefs-generated/envoy/annotations/deprecation.upbdefs.c\",",
          "694:         \"src/core/ext/upbdefs-generated/envoy/annotations/deprecation.upbdefs.h\",",
          "695:         \"src/core/ext/upbdefs-generated/envoy/annotations/resource.upbdefs.c\",",
          "696:         \"src/core/ext/upbdefs-generated/envoy/annotations/resource.upbdefs.h\",",
          "697:         \"src/core/ext/upbdefs-generated/envoy/config/accesslog/v3/accesslog.upbdefs.c\",",
          "698:         \"src/core/ext/upbdefs-generated/envoy/config/accesslog/v3/accesslog.upbdefs.h\",",
          "699:         \"src/core/ext/upbdefs-generated/envoy/config/bootstrap/v3/bootstrap.upbdefs.c\",",
          "700:         \"src/core/ext/upbdefs-generated/envoy/config/bootstrap/v3/bootstrap.upbdefs.h\",",
          "701:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/circuit_breaker.upbdefs.c\",",
          "702:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/circuit_breaker.upbdefs.h\",",
          "703:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/cluster.upbdefs.c\",",
          "704:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/cluster.upbdefs.h\",",
          "705:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/filter.upbdefs.c\",",
          "706:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/filter.upbdefs.h\",",
          "707:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/outlier_detection.upbdefs.c\",",
          "708:         \"src/core/ext/upbdefs-generated/envoy/config/cluster/v3/outlier_detection.upbdefs.h\",",
          "709:         \"src/core/ext/upbdefs-generated/envoy/config/common/matcher/v3/matcher.upbdefs.c\",",
          "710:         \"src/core/ext/upbdefs-generated/envoy/config/common/matcher/v3/matcher.upbdefs.h\",",
          "711:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/address.upbdefs.c\",",
          "712:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/address.upbdefs.h\",",
          "713:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/backoff.upbdefs.c\",",
          "714:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/backoff.upbdefs.h\",",
          "715:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/base.upbdefs.c\",",
          "716:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/base.upbdefs.h\",",
          "717:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/config_source.upbdefs.c\",",
          "718:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/config_source.upbdefs.h\",",
          "719:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/event_service_config.upbdefs.c\",",
          "720:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/event_service_config.upbdefs.h\",",
          "721:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/extension.upbdefs.c\",",
          "722:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/extension.upbdefs.h\",",
          "723:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_method_list.upbdefs.c\",",
          "724:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_method_list.upbdefs.h\",",
          "725:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_service.upbdefs.c\",",
          "726:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/grpc_service.upbdefs.h\",",
          "727:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/health_check.upbdefs.c\",",
          "728:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/health_check.upbdefs.h\",",
          "729:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/http_uri.upbdefs.c\",",
          "730:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/http_uri.upbdefs.h\",",
          "731:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/protocol.upbdefs.c\",",
          "732:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/protocol.upbdefs.h\",",
          "733:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/proxy_protocol.upbdefs.c\",",
          "734:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/proxy_protocol.upbdefs.h\",",
          "735:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/resolver.upbdefs.c\",",
          "736:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/resolver.upbdefs.h\",",
          "737:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/socket_option.upbdefs.c\",",
          "738:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/socket_option.upbdefs.h\",",
          "739:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/substitution_format_string.upbdefs.c\",",
          "740:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/substitution_format_string.upbdefs.h\",",
          "741:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/udp_socket_config.upbdefs.c\",",
          "742:         \"src/core/ext/upbdefs-generated/envoy/config/core/v3/udp_socket_config.upbdefs.h\",",
          "743:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint.upbdefs.c\",",
          "744:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint.upbdefs.h\",",
          "745:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint_components.upbdefs.c\",",
          "746:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/endpoint_components.upbdefs.h\",",
          "747:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/load_report.upbdefs.c\",",
          "748:         \"src/core/ext/upbdefs-generated/envoy/config/endpoint/v3/load_report.upbdefs.h\",",
          "749:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/api_listener.upbdefs.c\",",
          "750:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/api_listener.upbdefs.h\",",
          "751:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener.upbdefs.c\",",
          "752:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener.upbdefs.h\",",
          "753:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener_components.upbdefs.c\",",
          "754:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/listener_components.upbdefs.h\",",
          "755:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/quic_config.upbdefs.c\",",
          "756:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/quic_config.upbdefs.h\",",
          "757:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/udp_listener_config.upbdefs.c\",",
          "758:         \"src/core/ext/upbdefs-generated/envoy/config/listener/v3/udp_listener_config.upbdefs.h\",",
          "759:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/metrics_service.upbdefs.c\",",
          "760:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/metrics_service.upbdefs.h\",",
          "761:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/stats.upbdefs.c\",",
          "762:         \"src/core/ext/upbdefs-generated/envoy/config/metrics/v3/stats.upbdefs.h\",",
          "763:         \"src/core/ext/upbdefs-generated/envoy/config/overload/v3/overload.upbdefs.c\",",
          "764:         \"src/core/ext/upbdefs-generated/envoy/config/overload/v3/overload.upbdefs.h\",",
          "765:         \"src/core/ext/upbdefs-generated/envoy/config/rbac/v3/rbac.upbdefs.c\",",
          "766:         \"src/core/ext/upbdefs-generated/envoy/config/rbac/v3/rbac.upbdefs.h\",",
          "767:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route.upbdefs.c\",",
          "768:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route.upbdefs.h\",",
          "769:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route_components.upbdefs.c\",",
          "770:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/route_components.upbdefs.h\",",
          "771:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/scoped_route.upbdefs.c\",",
          "772:         \"src/core/ext/upbdefs-generated/envoy/config/route/v3/scoped_route.upbdefs.h\",",
          "773:         \"src/core/ext/upbdefs-generated/envoy/config/tap/v3/common.upbdefs.c\",",
          "774:         \"src/core/ext/upbdefs-generated/envoy/config/tap/v3/common.upbdefs.h\",",
          "775:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/datadog.upbdefs.c\",",
          "776:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/datadog.upbdefs.h\",",
          "777:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/dynamic_ot.upbdefs.c\",",
          "778:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/dynamic_ot.upbdefs.h\",",
          "779:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/http_tracer.upbdefs.c\",",
          "780:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/http_tracer.upbdefs.h\",",
          "781:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/lightstep.upbdefs.c\",",
          "782:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/lightstep.upbdefs.h\",",
          "783:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opencensus.upbdefs.c\",",
          "784:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opencensus.upbdefs.h\",",
          "785:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opentelemetry.upbdefs.c\",",
          "786:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/opentelemetry.upbdefs.h\",",
          "787:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/service.upbdefs.c\",",
          "788:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/service.upbdefs.h\",",
          "789:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/skywalking.upbdefs.c\",",
          "790:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/skywalking.upbdefs.h\",",
          "791:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/trace.upbdefs.c\",",
          "792:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/trace.upbdefs.h\",",
          "793:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/xray.upbdefs.c\",",
          "794:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/xray.upbdefs.h\",",
          "795:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/zipkin.upbdefs.c\",",
          "796:         \"src/core/ext/upbdefs-generated/envoy/config/trace/v3/zipkin.upbdefs.h\",",
          "797:         \"src/core/ext/upbdefs-generated/envoy/data/accesslog/v3/accesslog.upbdefs.c\",",
          "798:         \"src/core/ext/upbdefs-generated/envoy/data/accesslog/v3/accesslog.upbdefs.h\",",
          "799:         \"src/core/ext/upbdefs-generated/envoy/extensions/clusters/aggregate/v3/cluster.upbdefs.c\",",
          "800:         \"src/core/ext/upbdefs-generated/envoy/extensions/clusters/aggregate/v3/cluster.upbdefs.h\",",
          "801:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/common/fault/v3/fault.upbdefs.c\",",
          "802:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/common/fault/v3/fault.upbdefs.h\",",
          "803:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/fault/v3/fault.upbdefs.c\",",
          "804:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/fault/v3/fault.upbdefs.h\",",
          "805:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/rbac/v3/rbac.upbdefs.c\",",
          "806:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/rbac/v3/rbac.upbdefs.h\",",
          "807:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/router/v3/router.upbdefs.c\",",
          "808:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/router/v3/router.upbdefs.h\",",
          "809:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upbdefs.c\",",
          "810:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/http/stateful_session/v3/stateful_session.upbdefs.h\",",
          "811:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upbdefs.c\",",
          "812:         \"src/core/ext/upbdefs-generated/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.upbdefs.h\",",
          "813:         \"src/core/ext/upbdefs-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upbdefs.c\",",
          "814:         \"src/core/ext/upbdefs-generated/envoy/extensions/http/stateful_session/cookie/v3/cookie.upbdefs.h\",",
          "815:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/cert.upbdefs.c\",",
          "816:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/cert.upbdefs.h\",",
          "817:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/common.upbdefs.c\",",
          "818:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/common.upbdefs.h\",",
          "819:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/secret.upbdefs.c\",",
          "820:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/secret.upbdefs.h\",",
          "821:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls.upbdefs.c\",",
          "822:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls.upbdefs.h\",",
          "823:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upbdefs.c\",",
          "824:         \"src/core/ext/upbdefs-generated/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.upbdefs.h\",",
          "825:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/ads.upbdefs.c\",",
          "826:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/ads.upbdefs.h\",",
          "827:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/discovery.upbdefs.c\",",
          "828:         \"src/core/ext/upbdefs-generated/envoy/service/discovery/v3/discovery.upbdefs.h\",",
          "829:         \"src/core/ext/upbdefs-generated/envoy/service/load_stats/v3/lrs.upbdefs.c\",",
          "830:         \"src/core/ext/upbdefs-generated/envoy/service/load_stats/v3/lrs.upbdefs.h\",",
          "831:         \"src/core/ext/upbdefs-generated/envoy/service/status/v3/csds.upbdefs.c\",",
          "832:         \"src/core/ext/upbdefs-generated/envoy/service/status/v3/csds.upbdefs.h\",",
          "833:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/cookie.upbdefs.c\",",
          "834:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/cookie.upbdefs.h\",",
          "835:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/path_transformation.upbdefs.c\",",
          "836:         \"src/core/ext/upbdefs-generated/envoy/type/http/v3/path_transformation.upbdefs.h\",",
          "837:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/filter_state.upbdefs.c\",",
          "838:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/filter_state.upbdefs.h\",",
          "839:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/http_inputs.upbdefs.c\",",
          "840:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/http_inputs.upbdefs.h\",",
          "841:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/metadata.upbdefs.c\",",
          "842:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/metadata.upbdefs.h\",",
          "843:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/node.upbdefs.c\",",
          "844:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/node.upbdefs.h\",",
          "845:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/number.upbdefs.c\",",
          "846:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/number.upbdefs.h\",",
          "847:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/path.upbdefs.c\",",
          "848:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/path.upbdefs.h\",",
          "849:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/regex.upbdefs.c\",",
          "850:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/regex.upbdefs.h\",",
          "851:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/status_code_input.upbdefs.c\",",
          "852:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/status_code_input.upbdefs.h\",",
          "853:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/string.upbdefs.c\",",
          "854:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/string.upbdefs.h\",",
          "855:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/struct.upbdefs.c\",",
          "856:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/struct.upbdefs.h\",",
          "857:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/value.upbdefs.c\",",
          "858:         \"src/core/ext/upbdefs-generated/envoy/type/matcher/v3/value.upbdefs.h\",",
          "859:         \"src/core/ext/upbdefs-generated/envoy/type/metadata/v3/metadata.upbdefs.c\",",
          "860:         \"src/core/ext/upbdefs-generated/envoy/type/metadata/v3/metadata.upbdefs.h\",",
          "861:         \"src/core/ext/upbdefs-generated/envoy/type/tracing/v3/custom_tag.upbdefs.c\",",
          "862:         \"src/core/ext/upbdefs-generated/envoy/type/tracing/v3/custom_tag.upbdefs.h\",",
          "863:         \"src/core/ext/upbdefs-generated/envoy/type/v3/hash_policy.upbdefs.c\",",
          "864:         \"src/core/ext/upbdefs-generated/envoy/type/v3/hash_policy.upbdefs.h\",",
          "865:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http.upbdefs.c\",",
          "866:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http.upbdefs.h\",",
          "867:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http_status.upbdefs.c\",",
          "868:         \"src/core/ext/upbdefs-generated/envoy/type/v3/http_status.upbdefs.h\",",
          "869:         \"src/core/ext/upbdefs-generated/envoy/type/v3/percent.upbdefs.c\",",
          "870:         \"src/core/ext/upbdefs-generated/envoy/type/v3/percent.upbdefs.h\",",
          "871:         \"src/core/ext/upbdefs-generated/envoy/type/v3/range.upbdefs.c\",",
          "872:         \"src/core/ext/upbdefs-generated/envoy/type/v3/range.upbdefs.h\",",
          "873:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_strategy.upbdefs.c\",",
          "874:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_strategy.upbdefs.h\",",
          "875:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_unit.upbdefs.c\",",
          "876:         \"src/core/ext/upbdefs-generated/envoy/type/v3/ratelimit_unit.upbdefs.h\",",
          "877:         \"src/core/ext/upbdefs-generated/envoy/type/v3/semantic_version.upbdefs.c\",",
          "878:         \"src/core/ext/upbdefs-generated/envoy/type/v3/semantic_version.upbdefs.h\",",
          "879:         \"src/core/ext/upbdefs-generated/envoy/type/v3/token_bucket.upbdefs.c\",",
          "880:         \"src/core/ext/upbdefs-generated/envoy/type/v3/token_bucket.upbdefs.h\",",
          "881:         \"src/core/ext/upbdefs-generated/google/api/annotations.upbdefs.c\",",
          "882:         \"src/core/ext/upbdefs-generated/google/api/annotations.upbdefs.h\",",
          "883:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/checked.upbdefs.c\",",
          "884:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/checked.upbdefs.h\",",
          "885:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/syntax.upbdefs.c\",",
          "886:         \"src/core/ext/upbdefs-generated/google/api/expr/v1alpha1/syntax.upbdefs.h\",",
          "887:         \"src/core/ext/upbdefs-generated/google/api/http.upbdefs.c\",",
          "888:         \"src/core/ext/upbdefs-generated/google/api/http.upbdefs.h\",",
          "889:         \"src/core/ext/upbdefs-generated/google/api/httpbody.upbdefs.c\",",
          "890:         \"src/core/ext/upbdefs-generated/google/api/httpbody.upbdefs.h\",",
          "891:         \"src/core/ext/upbdefs-generated/google/protobuf/any.upbdefs.c\",",
          "892:         \"src/core/ext/upbdefs-generated/google/protobuf/any.upbdefs.h\",",
          "893:         \"src/core/ext/upbdefs-generated/google/protobuf/descriptor.upbdefs.c\",",
          "894:         \"src/core/ext/upbdefs-generated/google/protobuf/descriptor.upbdefs.h\",",
          "895:         \"src/core/ext/upbdefs-generated/google/protobuf/duration.upbdefs.c\",",
          "896:         \"src/core/ext/upbdefs-generated/google/protobuf/duration.upbdefs.h\",",
          "897:         \"src/core/ext/upbdefs-generated/google/protobuf/empty.upbdefs.c\",",
          "898:         \"src/core/ext/upbdefs-generated/google/protobuf/empty.upbdefs.h\",",
          "899:         \"src/core/ext/upbdefs-generated/google/protobuf/struct.upbdefs.c\",",
          "900:         \"src/core/ext/upbdefs-generated/google/protobuf/struct.upbdefs.h\",",
          "901:         \"src/core/ext/upbdefs-generated/google/protobuf/timestamp.upbdefs.c\",",
          "902:         \"src/core/ext/upbdefs-generated/google/protobuf/timestamp.upbdefs.h\",",
          "903:         \"src/core/ext/upbdefs-generated/google/protobuf/wrappers.upbdefs.c\",",
          "904:         \"src/core/ext/upbdefs-generated/google/protobuf/wrappers.upbdefs.h\",",
          "905:         \"src/core/ext/upbdefs-generated/google/rpc/status.upbdefs.c\",",
          "906:         \"src/core/ext/upbdefs-generated/google/rpc/status.upbdefs.h\",",
          "907:         \"src/core/ext/upbdefs-generated/opencensus/proto/trace/v1/trace_config.upbdefs.c\",",
          "908:         \"src/core/ext/upbdefs-generated/opencensus/proto/trace/v1/trace_config.upbdefs.h\",",
          "909:         \"src/core/ext/upbdefs-generated/src/proto/grpc/lookup/v1/rls_config.upbdefs.c\",",
          "910:         \"src/core/ext/upbdefs-generated/src/proto/grpc/lookup/v1/rls_config.upbdefs.h\",",
          "911:         \"src/core/ext/upbdefs-generated/udpa/annotations/migrate.upbdefs.c\",",
          "912:         \"src/core/ext/upbdefs-generated/udpa/annotations/migrate.upbdefs.h\",",
          "913:         \"src/core/ext/upbdefs-generated/udpa/annotations/security.upbdefs.c\",",
          "914:         \"src/core/ext/upbdefs-generated/udpa/annotations/security.upbdefs.h\",",
          "915:         \"src/core/ext/upbdefs-generated/udpa/annotations/sensitive.upbdefs.c\",",
          "916:         \"src/core/ext/upbdefs-generated/udpa/annotations/sensitive.upbdefs.h\",",
          "917:         \"src/core/ext/upbdefs-generated/udpa/annotations/status.upbdefs.c\",",
          "918:         \"src/core/ext/upbdefs-generated/udpa/annotations/status.upbdefs.h\",",
          "919:         \"src/core/ext/upbdefs-generated/udpa/annotations/versioning.upbdefs.c\",",
          "920:         \"src/core/ext/upbdefs-generated/udpa/annotations/versioning.upbdefs.h\",",
          "921:         \"src/core/ext/upbdefs-generated/validate/validate.upbdefs.c\",",
          "922:         \"src/core/ext/upbdefs-generated/validate/validate.upbdefs.h\",",
          "923:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/migrate.upbdefs.c\",",
          "924:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/migrate.upbdefs.h\",",
          "925:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/security.upbdefs.c\",",
          "926:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/security.upbdefs.h\",",
          "927:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/sensitive.upbdefs.c\",",
          "928:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/sensitive.upbdefs.h\",",
          "929:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/status.upbdefs.c\",",
          "930:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/status.upbdefs.h\",",
          "931:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/versioning.upbdefs.c\",",
          "932:         \"src/core/ext/upbdefs-generated/xds/annotations/v3/versioning.upbdefs.h\",",
          "933:         \"src/core/ext/upbdefs-generated/xds/core/v3/authority.upbdefs.c\",",
          "934:         \"src/core/ext/upbdefs-generated/xds/core/v3/authority.upbdefs.h\",",
          "935:         \"src/core/ext/upbdefs-generated/xds/core/v3/cidr.upbdefs.c\",",
          "936:         \"src/core/ext/upbdefs-generated/xds/core/v3/cidr.upbdefs.h\",",
          "937:         \"src/core/ext/upbdefs-generated/xds/core/v3/collection_entry.upbdefs.c\",",
          "938:         \"src/core/ext/upbdefs-generated/xds/core/v3/collection_entry.upbdefs.h\",",
          "939:         \"src/core/ext/upbdefs-generated/xds/core/v3/context_params.upbdefs.c\",",
          "940:         \"src/core/ext/upbdefs-generated/xds/core/v3/context_params.upbdefs.h\",",
          "941:         \"src/core/ext/upbdefs-generated/xds/core/v3/extension.upbdefs.c\",",
          "942:         \"src/core/ext/upbdefs-generated/xds/core/v3/extension.upbdefs.h\",",
          "943:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource.upbdefs.c\",",
          "944:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource.upbdefs.h\",",
          "945:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_locator.upbdefs.c\",",
          "946:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_locator.upbdefs.h\",",
          "947:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_name.upbdefs.c\",",
          "948:         \"src/core/ext/upbdefs-generated/xds/core/v3/resource_name.upbdefs.h\",",
          "949:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/cel.upbdefs.c\",",
          "950:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/cel.upbdefs.h\",",
          "951:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/domain.upbdefs.c\",",
          "952:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/domain.upbdefs.h\",",
          "953:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/http_inputs.upbdefs.c\",",
          "954:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/http_inputs.upbdefs.h\",",
          "955:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/ip.upbdefs.c\",",
          "956:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/ip.upbdefs.h\",",
          "957:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/matcher.upbdefs.c\",",
          "958:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/matcher.upbdefs.h\",",
          "959:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/range.upbdefs.c\",",
          "960:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/range.upbdefs.h\",",
          "961:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/regex.upbdefs.c\",",
          "962:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/regex.upbdefs.h\",",
          "963:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/string.upbdefs.c\",",
          "964:         \"src/core/ext/upbdefs-generated/xds/type/matcher/v3/string.upbdefs.h\",",
          "965:         \"src/core/ext/upbdefs-generated/xds/type/v3/cel.upbdefs.c\",",
          "966:         \"src/core/ext/upbdefs-generated/xds/type/v3/cel.upbdefs.h\",",
          "967:         \"src/core/ext/upbdefs-generated/xds/type/v3/range.upbdefs.c\",",
          "968:         \"src/core/ext/upbdefs-generated/xds/type/v3/range.upbdefs.h\",",
          "969:         \"src/core/ext/upbdefs-generated/xds/type/v3/typed_struct.upbdefs.c\",",
          "970:         \"src/core/ext/upbdefs-generated/xds/type/v3/typed_struct.upbdefs.h\",",
          "971:         \"src/core/ext/xds/certificate_provider_store.cc\",",
          "972:         \"src/core/ext/xds/certificate_provider_store.h\",",
          "973:         \"src/core/ext/xds/file_watcher_certificate_provider_factory.cc\",",
          "974:         \"src/core/ext/xds/file_watcher_certificate_provider_factory.h\",",
          "975:         \"src/core/ext/xds/upb_utils.h\",",
          "976:         \"src/core/ext/xds/xds_api.cc\",",
          "977:         \"src/core/ext/xds/xds_api.h\",",
          "978:         \"src/core/ext/xds/xds_audit_logger_registry.cc\",",
          "979:         \"src/core/ext/xds/xds_audit_logger_registry.h\",",
          "980:         \"src/core/ext/xds/xds_bootstrap.cc\",",
          "981:         \"src/core/ext/xds/xds_bootstrap.h\",",
          "982:         \"src/core/ext/xds/xds_bootstrap_grpc.cc\",",
          "983:         \"src/core/ext/xds/xds_bootstrap_grpc.h\",",
          "984:         \"src/core/ext/xds/xds_certificate_provider.cc\",",
          "985:         \"src/core/ext/xds/xds_certificate_provider.h\",",
          "986:         \"src/core/ext/xds/xds_channel_args.h\",",
          "987:         \"src/core/ext/xds/xds_channel_stack_modifier.cc\",",
          "988:         \"src/core/ext/xds/xds_channel_stack_modifier.h\",",
          "989:         \"src/core/ext/xds/xds_client.cc\",",
          "990:         \"src/core/ext/xds/xds_client.h\",",
          "991:         \"src/core/ext/xds/xds_client_grpc.cc\",",
          "992:         \"src/core/ext/xds/xds_client_grpc.h\",",
          "993:         \"src/core/ext/xds/xds_client_stats.cc\",",
          "994:         \"src/core/ext/xds/xds_client_stats.h\",",
          "995:         \"src/core/ext/xds/xds_cluster.cc\",",
          "996:         \"src/core/ext/xds/xds_cluster.h\",",
          "997:         \"src/core/ext/xds/xds_cluster_specifier_plugin.cc\",",
          "998:         \"src/core/ext/xds/xds_cluster_specifier_plugin.h\",",
          "999:         \"src/core/ext/xds/xds_common_types.cc\",",
          "1000:         \"src/core/ext/xds/xds_common_types.h\",",
          "1001:         \"src/core/ext/xds/xds_endpoint.cc\",",
          "1002:         \"src/core/ext/xds/xds_endpoint.h\",",
          "1003:         \"src/core/ext/xds/xds_health_status.cc\",",
          "1004:         \"src/core/ext/xds/xds_health_status.h\",",
          "1005:         \"src/core/ext/xds/xds_http_fault_filter.cc\",",
          "1006:         \"src/core/ext/xds/xds_http_fault_filter.h\",",
          "1007:         \"src/core/ext/xds/xds_http_filters.cc\",",
          "1008:         \"src/core/ext/xds/xds_http_filters.h\",",
          "1009:         \"src/core/ext/xds/xds_http_rbac_filter.cc\",",
          "1010:         \"src/core/ext/xds/xds_http_rbac_filter.h\",",
          "1011:         \"src/core/ext/xds/xds_http_stateful_session_filter.cc\",",
          "1012:         \"src/core/ext/xds/xds_http_stateful_session_filter.h\",",
          "1013:         \"src/core/ext/xds/xds_lb_policy_registry.cc\",",
          "1014:         \"src/core/ext/xds/xds_lb_policy_registry.h\",",
          "1015:         \"src/core/ext/xds/xds_listener.cc\",",
          "1016:         \"src/core/ext/xds/xds_listener.h\",",
          "1017:         \"src/core/ext/xds/xds_resource_type.h\",",
          "1018:         \"src/core/ext/xds/xds_resource_type_impl.h\",",
          "1019:         \"src/core/ext/xds/xds_route_config.cc\",",
          "1020:         \"src/core/ext/xds/xds_route_config.h\",",
          "1021:         \"src/core/ext/xds/xds_routing.cc\",",
          "1022:         \"src/core/ext/xds/xds_routing.h\",",
          "1023:         \"src/core/ext/xds/xds_server_config_fetcher.cc\",",
          "1024:         \"src/core/ext/xds/xds_transport.h\",",
          "1025:         \"src/core/ext/xds/xds_transport_grpc.cc\",",
          "1026:         \"src/core/ext/xds/xds_transport_grpc.h\",",
          "1027:         \"src/core/lib/address_utils/parse_address.cc\",",
          "1028:         \"src/core/lib/address_utils/parse_address.h\",",
          "1029:         \"src/core/lib/address_utils/sockaddr_utils.cc\",",
          "1030:         \"src/core/lib/address_utils/sockaddr_utils.h\",",
          "1031:         \"src/core/lib/avl/avl.h\",",
          "1032:         \"src/core/lib/backoff/backoff.cc\",",
          "1033:         \"src/core/lib/backoff/backoff.h\",",
          "1034:         \"src/core/lib/backoff/random_early_detection.cc\",",
          "1035:         \"src/core/lib/backoff/random_early_detection.h\",",
          "1036:         \"src/core/lib/channel/call_finalization.h\",",
          "1037:         \"src/core/lib/channel/call_tracer.cc\",",
          "1038:         \"src/core/lib/channel/call_tracer.h\",",
          "1039:         \"src/core/lib/channel/channel_args.cc\",",
          "1040:         \"src/core/lib/channel/channel_args.h\",",
          "1041:         \"src/core/lib/channel/channel_args_preconditioning.cc\",",
          "1042:         \"src/core/lib/channel/channel_args_preconditioning.h\",",
          "1043:         \"src/core/lib/channel/channel_fwd.h\",",
          "1044:         \"src/core/lib/channel/channel_stack.cc\",",
          "1045:         \"src/core/lib/channel/channel_stack.h\",",
          "1046:         \"src/core/lib/channel/channel_stack_builder.cc\",",
          "1047:         \"src/core/lib/channel/channel_stack_builder.h\",",
          "1048:         \"src/core/lib/channel/channel_stack_builder_impl.cc\",",
          "1049:         \"src/core/lib/channel/channel_stack_builder_impl.h\",",
          "1050:         \"src/core/lib/channel/channel_trace.cc\",",
          "1051:         \"src/core/lib/channel/channel_trace.h\",",
          "1052:         \"src/core/lib/channel/channelz.cc\",",
          "1053:         \"src/core/lib/channel/channelz.h\",",
          "1054:         \"src/core/lib/channel/channelz_registry.cc\",",
          "1055:         \"src/core/lib/channel/channelz_registry.h\",",
          "1056:         \"src/core/lib/channel/connected_channel.cc\",",
          "1057:         \"src/core/lib/channel/connected_channel.h\",",
          "1058:         \"src/core/lib/channel/context.h\",",
          "1059:         \"src/core/lib/channel/promise_based_filter.cc\",",
          "1060:         \"src/core/lib/channel/promise_based_filter.h\",",
          "1061:         \"src/core/lib/channel/server_call_tracer_filter.cc\",",
          "1062:         \"src/core/lib/channel/status_util.cc\",",
          "1063:         \"src/core/lib/channel/status_util.h\",",
          "1064:         \"src/core/lib/compression/compression.cc\",",
          "1065:         \"src/core/lib/compression/compression_internal.cc\",",
          "1066:         \"src/core/lib/compression/compression_internal.h\",",
          "1067:         \"src/core/lib/compression/message_compress.cc\",",
          "1068:         \"src/core/lib/compression/message_compress.h\",",
          "1069:         \"src/core/lib/config/config_vars.cc\",",
          "1070:         \"src/core/lib/config/config_vars.h\",",
          "1071:         \"src/core/lib/config/config_vars_non_generated.cc\",",
          "1072:         \"src/core/lib/config/core_configuration.cc\",",
          "1073:         \"src/core/lib/config/core_configuration.h\",",
          "1074:         \"src/core/lib/config/load_config.cc\",",
          "1075:         \"src/core/lib/config/load_config.h\",",
          "1076:         \"src/core/lib/debug/event_log.cc\",",
          "1077:         \"src/core/lib/debug/event_log.h\",",
          "1078:         \"src/core/lib/debug/histogram_view.cc\",",
          "1079:         \"src/core/lib/debug/histogram_view.h\",",
          "1080:         \"src/core/lib/debug/stats.cc\",",
          "1081:         \"src/core/lib/debug/stats.h\",",
          "1082:         \"src/core/lib/debug/stats_data.cc\",",
          "1083:         \"src/core/lib/debug/stats_data.h\",",
          "1084:         \"src/core/lib/debug/trace.cc\",",
          "1085:         \"src/core/lib/debug/trace.h\",",
          "1086:         \"src/core/lib/event_engine/cf_engine/cf_engine.cc\",",
          "1087:         \"src/core/lib/event_engine/cf_engine/cf_engine.h\",",
          "1088:         \"src/core/lib/event_engine/cf_engine/cfstream_endpoint.cc\",",
          "1089:         \"src/core/lib/event_engine/cf_engine/cfstream_endpoint.h\",",
          "1090:         \"src/core/lib/event_engine/cf_engine/cftype_unique_ref.h\",",
          "1091:         \"src/core/lib/event_engine/channel_args_endpoint_config.cc\",",
          "1092:         \"src/core/lib/event_engine/channel_args_endpoint_config.h\",",
          "1093:         \"src/core/lib/event_engine/common_closures.h\",",
          "1094:         \"src/core/lib/event_engine/default_event_engine.cc\",",
          "1095:         \"src/core/lib/event_engine/default_event_engine.h\",",
          "1096:         \"src/core/lib/event_engine/default_event_engine_factory.cc\",",
          "1097:         \"src/core/lib/event_engine/default_event_engine_factory.h\",",
          "1098:         \"src/core/lib/event_engine/event_engine.cc\",",
          "1099:         \"src/core/lib/event_engine/forkable.cc\",",
          "1100:         \"src/core/lib/event_engine/forkable.h\",",
          "1101:         \"src/core/lib/event_engine/handle_containers.h\",",
          "1102:         \"src/core/lib/event_engine/memory_allocator.cc\",",
          "1103:         \"src/core/lib/event_engine/memory_allocator_factory.h\",",
          "1104:         \"src/core/lib/event_engine/poller.h\",",
          "1105:         \"src/core/lib/event_engine/posix.h\",",
          "1106:         \"src/core/lib/event_engine/posix_engine/ev_epoll1_linux.cc\",",
          "1107:         \"src/core/lib/event_engine/posix_engine/ev_epoll1_linux.h\",",
          "1108:         \"src/core/lib/event_engine/posix_engine/ev_poll_posix.cc\",",
          "1109:         \"src/core/lib/event_engine/posix_engine/ev_poll_posix.h\",",
          "1110:         \"src/core/lib/event_engine/posix_engine/event_poller.h\",",
          "1111:         \"src/core/lib/event_engine/posix_engine/event_poller_posix_default.cc\",",
          "1112:         \"src/core/lib/event_engine/posix_engine/event_poller_posix_default.h\",",
          "1113:         \"src/core/lib/event_engine/posix_engine/internal_errqueue.cc\",",
          "1114:         \"src/core/lib/event_engine/posix_engine/internal_errqueue.h\",",
          "1115:         \"src/core/lib/event_engine/posix_engine/lockfree_event.cc\",",
          "1116:         \"src/core/lib/event_engine/posix_engine/lockfree_event.h\",",
          "1117:         \"src/core/lib/event_engine/posix_engine/posix_endpoint.cc\",",
          "1118:         \"src/core/lib/event_engine/posix_engine/posix_endpoint.h\",",
          "1119:         \"src/core/lib/event_engine/posix_engine/posix_engine.cc\",",
          "1120:         \"src/core/lib/event_engine/posix_engine/posix_engine.h\",",
          "1121:         \"src/core/lib/event_engine/posix_engine/posix_engine_closure.h\",",
          "1122:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener.cc\",",
          "1123:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener.h\",",
          "1124:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener_utils.cc\",",
          "1125:         \"src/core/lib/event_engine/posix_engine/posix_engine_listener_utils.h\",",
          "1126:         \"src/core/lib/event_engine/posix_engine/tcp_socket_utils.cc\",",
          "1127:         \"src/core/lib/event_engine/posix_engine/tcp_socket_utils.h\",",
          "1128:         \"src/core/lib/event_engine/posix_engine/timer.cc\",",
          "1129:         \"src/core/lib/event_engine/posix_engine/timer.h\",",
          "1130:         \"src/core/lib/event_engine/posix_engine/timer_heap.cc\",",
          "1131:         \"src/core/lib/event_engine/posix_engine/timer_heap.h\",",
          "1132:         \"src/core/lib/event_engine/posix_engine/timer_manager.cc\",",
          "1133:         \"src/core/lib/event_engine/posix_engine/timer_manager.h\",",
          "1134:         \"src/core/lib/event_engine/posix_engine/traced_buffer_list.cc\",",
          "1135:         \"src/core/lib/event_engine/posix_engine/traced_buffer_list.h\",",
          "1136:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_eventfd.cc\",",
          "1137:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_eventfd.h\",",
          "1138:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_pipe.cc\",",
          "1139:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_pipe.h\",",
          "1140:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_posix.h\",",
          "1141:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_posix_default.cc\",",
          "1142:         \"src/core/lib/event_engine/posix_engine/wakeup_fd_posix_default.h\",",
          "1143:         \"src/core/lib/event_engine/resolved_address.cc\",",
          "1144:         \"src/core/lib/event_engine/resolved_address_internal.h\",",
          "1145:         \"src/core/lib/event_engine/shim.cc\",",
          "1146:         \"src/core/lib/event_engine/shim.h\",",
          "1147:         \"src/core/lib/event_engine/slice.cc\",",
          "1148:         \"src/core/lib/event_engine/slice_buffer.cc\",",
          "1149:         \"src/core/lib/event_engine/tcp_socket_utils.cc\",",
          "1150:         \"src/core/lib/event_engine/tcp_socket_utils.h\",",
          "1151:         \"src/core/lib/event_engine/thread_local.cc\",",
          "1152:         \"src/core/lib/event_engine/thread_local.h\",",
          "1153:         \"src/core/lib/event_engine/thread_pool/original_thread_pool.cc\",",
          "1154:         \"src/core/lib/event_engine/thread_pool/original_thread_pool.h\",",
          "1155:         \"src/core/lib/event_engine/thread_pool/thread_pool.h\",",
          "1156:         \"src/core/lib/event_engine/thread_pool/thread_pool_factory.cc\",",
          "1157:         \"src/core/lib/event_engine/thread_pool/work_stealing_thread_pool.cc\",",
          "1158:         \"src/core/lib/event_engine/thread_pool/work_stealing_thread_pool.h\",",
          "1159:         \"src/core/lib/event_engine/thready_event_engine/thready_event_engine.cc\",",
          "1160:         \"src/core/lib/event_engine/thready_event_engine/thready_event_engine.h\",",
          "1161:         \"src/core/lib/event_engine/time_util.cc\",",
          "1162:         \"src/core/lib/event_engine/time_util.h\",",
          "1163:         \"src/core/lib/event_engine/trace.cc\",",
          "1164:         \"src/core/lib/event_engine/trace.h\",",
          "1165:         \"src/core/lib/event_engine/utils.cc\",",
          "1166:         \"src/core/lib/event_engine/utils.h\",",
          "1167:         \"src/core/lib/event_engine/windows/iocp.cc\",",
          "1168:         \"src/core/lib/event_engine/windows/iocp.h\",",
          "1169:         \"src/core/lib/event_engine/windows/win_socket.cc\",",
          "1170:         \"src/core/lib/event_engine/windows/win_socket.h\",",
          "1171:         \"src/core/lib/event_engine/windows/windows_endpoint.cc\",",
          "1172:         \"src/core/lib/event_engine/windows/windows_endpoint.h\",",
          "1173:         \"src/core/lib/event_engine/windows/windows_engine.cc\",",
          "1174:         \"src/core/lib/event_engine/windows/windows_engine.h\",",
          "1175:         \"src/core/lib/event_engine/windows/windows_listener.cc\",",
          "1176:         \"src/core/lib/event_engine/windows/windows_listener.h\",",
          "1177:         \"src/core/lib/event_engine/work_queue/basic_work_queue.cc\",",
          "1178:         \"src/core/lib/event_engine/work_queue/basic_work_queue.h\",",
          "1179:         \"src/core/lib/event_engine/work_queue/work_queue.h\",",
          "1180:         \"src/core/lib/experiments/config.cc\",",
          "1181:         \"src/core/lib/experiments/config.h\",",
          "1182:         \"src/core/lib/experiments/experiments.cc\",",
          "1183:         \"src/core/lib/experiments/experiments.h\",",
          "1184:         \"src/core/lib/gpr/alloc.cc\",",
          "1185:         \"src/core/lib/gpr/alloc.h\",",
          "1186:         \"src/core/lib/gpr/android/log.cc\",",
          "1187:         \"src/core/lib/gpr/atm.cc\",",
          "1188:         \"src/core/lib/gpr/iphone/cpu.cc\",",
          "1189:         \"src/core/lib/gpr/linux/cpu.cc\",",
          "1190:         \"src/core/lib/gpr/linux/log.cc\",",
          "1191:         \"src/core/lib/gpr/log.cc\",",
          "1192:         \"src/core/lib/gpr/log_internal.h\",",
          "1193:         \"src/core/lib/gpr/msys/tmpfile.cc\",",
          "1194:         \"src/core/lib/gpr/posix/cpu.cc\",",
          "1195:         \"src/core/lib/gpr/posix/log.cc\",",
          "1196:         \"src/core/lib/gpr/posix/string.cc\",",
          "1197:         \"src/core/lib/gpr/posix/sync.cc\",",
          "1198:         \"src/core/lib/gpr/posix/time.cc\",",
          "1199:         \"src/core/lib/gpr/posix/tmpfile.cc\",",
          "1200:         \"src/core/lib/gpr/spinlock.h\",",
          "1201:         \"src/core/lib/gpr/string.cc\",",
          "1202:         \"src/core/lib/gpr/string.h\",",
          "1203:         \"src/core/lib/gpr/sync.cc\",",
          "1204:         \"src/core/lib/gpr/sync_abseil.cc\",",
          "1205:         \"src/core/lib/gpr/time.cc\",",
          "1206:         \"src/core/lib/gpr/time_precise.cc\",",
          "1207:         \"src/core/lib/gpr/time_precise.h\",",
          "1208:         \"src/core/lib/gpr/tmpfile.h\",",
          "1209:         \"src/core/lib/gpr/useful.h\",",
          "1210:         \"src/core/lib/gpr/windows/cpu.cc\",",
          "1211:         \"src/core/lib/gpr/windows/log.cc\",",
          "1212:         \"src/core/lib/gpr/windows/string.cc\",",
          "1213:         \"src/core/lib/gpr/windows/string_util.cc\",",
          "1214:         \"src/core/lib/gpr/windows/sync.cc\",",
          "1215:         \"src/core/lib/gpr/windows/time.cc\",",
          "1216:         \"src/core/lib/gpr/windows/tmpfile.cc\",",
          "1217:         \"src/core/lib/gpr/wrap_memcpy.cc\",",
          "1218:         \"src/core/lib/gprpp/atomic_utils.h\",",
          "1219:         \"src/core/lib/gprpp/bitset.h\",",
          "1220:         \"src/core/lib/gprpp/chunked_vector.h\",",
          "1221:         \"src/core/lib/gprpp/construct_destruct.h\",",
          "1222:         \"src/core/lib/gprpp/cpp_impl_of.h\",",
          "1223:         \"src/core/lib/gprpp/crash.cc\",",
          "1224:         \"src/core/lib/gprpp/crash.h\",",
          "1225:         \"src/core/lib/gprpp/debug_location.h\",",
          "1226:         \"src/core/lib/gprpp/dual_ref_counted.h\",",
          "1227:         \"src/core/lib/gprpp/env.h\",",
          "1228:         \"src/core/lib/gprpp/examine_stack.cc\",",
          "1229:         \"src/core/lib/gprpp/examine_stack.h\",",
          "1230:         \"src/core/lib/gprpp/fork.cc\",",
          "1231:         \"src/core/lib/gprpp/fork.h\",",
          "1232:         \"src/core/lib/gprpp/host_port.cc\",",
          "1233:         \"src/core/lib/gprpp/host_port.h\",",
          "1234:         \"src/core/lib/gprpp/if_list.h\",",
          "1235:         \"src/core/lib/gprpp/linux/env.cc\",",
          "1236:         \"src/core/lib/gprpp/load_file.cc\",",
          "1237:         \"src/core/lib/gprpp/load_file.h\",",
          "1238:         \"src/core/lib/gprpp/manual_constructor.h\",",
          "1239:         \"src/core/lib/gprpp/match.h\",",
          "1240:         \"src/core/lib/gprpp/memory.h\",",
          "1241:         \"src/core/lib/gprpp/mpscq.cc\",",
          "1242:         \"src/core/lib/gprpp/mpscq.h\",",
          "1243:         \"src/core/lib/gprpp/no_destruct.h\",",
          "1244:         \"src/core/lib/gprpp/notification.h\",",
          "1245:         \"src/core/lib/gprpp/orphanable.h\",",
          "1246:         \"src/core/lib/gprpp/overload.h\",",
          "1247:         \"src/core/lib/gprpp/packed_table.h\",",
          "1248:         \"src/core/lib/gprpp/per_cpu.cc\",",
          "1249:         \"src/core/lib/gprpp/per_cpu.h\",",
          "1250:         \"src/core/lib/gprpp/posix/env.cc\",",
          "1251:         \"src/core/lib/gprpp/posix/stat.cc\",",
          "1252:         \"src/core/lib/gprpp/posix/thd.cc\",",
          "1253:         \"src/core/lib/gprpp/ref_counted.h\",",
          "1254:         \"src/core/lib/gprpp/ref_counted_ptr.h\",",
          "1255:         \"src/core/lib/gprpp/single_set_ptr.h\",",
          "1256:         \"src/core/lib/gprpp/sorted_pack.h\",",
          "1257:         \"src/core/lib/gprpp/stat.h\",",
          "1258:         \"src/core/lib/gprpp/status_helper.cc\",",
          "1259:         \"src/core/lib/gprpp/status_helper.h\",",
          "1260:         \"src/core/lib/gprpp/strerror.cc\",",
          "1261:         \"src/core/lib/gprpp/strerror.h\",",
          "1262:         \"src/core/lib/gprpp/sync.h\",",
          "1263:         \"src/core/lib/gprpp/table.h\",",
          "1264:         \"src/core/lib/gprpp/tchar.cc\",",
          "1265:         \"src/core/lib/gprpp/tchar.h\",",
          "1266:         \"src/core/lib/gprpp/thd.h\",",
          "1267:         \"src/core/lib/gprpp/time.cc\",",
          "1268:         \"src/core/lib/gprpp/time.h\",",
          "1269:         \"src/core/lib/gprpp/time_averaged_stats.cc\",",
          "1270:         \"src/core/lib/gprpp/time_averaged_stats.h\",",
          "1271:         \"src/core/lib/gprpp/time_util.cc\",",
          "1272:         \"src/core/lib/gprpp/time_util.h\",",
          "1273:         \"src/core/lib/gprpp/type_list.h\",",
          "1274:         \"src/core/lib/gprpp/unique_type_name.h\",",
          "1275:         \"src/core/lib/gprpp/validation_errors.cc\",",
          "1276:         \"src/core/lib/gprpp/validation_errors.h\",",
          "1277:         \"src/core/lib/gprpp/windows/env.cc\",",
          "1278:         \"src/core/lib/gprpp/windows/stat.cc\",",
          "1279:         \"src/core/lib/gprpp/windows/thd.cc\",",
          "1280:         \"src/core/lib/gprpp/work_serializer.cc\",",
          "1281:         \"src/core/lib/gprpp/work_serializer.h\",",
          "1282:         \"src/core/lib/handshaker/proxy_mapper.h\",",
          "1283:         \"src/core/lib/handshaker/proxy_mapper_registry.cc\",",
          "1284:         \"src/core/lib/handshaker/proxy_mapper_registry.h\",",
          "1285:         \"src/core/lib/http/format_request.cc\",",
          "1286:         \"src/core/lib/http/format_request.h\",",
          "1287:         \"src/core/lib/http/httpcli.cc\",",
          "1288:         \"src/core/lib/http/httpcli.h\",",
          "1289:         \"src/core/lib/http/httpcli_security_connector.cc\",",
          "1290:         \"src/core/lib/http/httpcli_ssl_credentials.h\",",
          "1291:         \"src/core/lib/http/parser.cc\",",
          "1292:         \"src/core/lib/http/parser.h\",",
          "1293:         \"src/core/lib/iomgr/block_annotate.h\",",
          "1294:         \"src/core/lib/iomgr/buffer_list.cc\",",
          "1295:         \"src/core/lib/iomgr/buffer_list.h\",",
          "1296:         \"src/core/lib/iomgr/call_combiner.cc\",",
          "1297:         \"src/core/lib/iomgr/call_combiner.h\",",
          "1298:         \"src/core/lib/iomgr/cfstream_handle.cc\",",
          "1299:         \"src/core/lib/iomgr/cfstream_handle.h\",",
          "1300:         \"src/core/lib/iomgr/closure.cc\",",
          "1301:         \"src/core/lib/iomgr/closure.h\",",
          "1302:         \"src/core/lib/iomgr/combiner.cc\",",
          "1303:         \"src/core/lib/iomgr/combiner.h\",",
          "1304:         \"src/core/lib/iomgr/dualstack_socket_posix.cc\",",
          "1305:         \"src/core/lib/iomgr/dynamic_annotations.h\",",
          "1306:         \"src/core/lib/iomgr/endpoint.cc\",",
          "1307:         \"src/core/lib/iomgr/endpoint.h\",",
          "1308:         \"src/core/lib/iomgr/endpoint_cfstream.cc\",",
          "1309:         \"src/core/lib/iomgr/endpoint_cfstream.h\",",
          "1310:         \"src/core/lib/iomgr/endpoint_pair.h\",",
          "1311:         \"src/core/lib/iomgr/endpoint_pair_posix.cc\",",
          "1312:         \"src/core/lib/iomgr/endpoint_pair_windows.cc\",",
          "1313:         \"src/core/lib/iomgr/error.cc\",",
          "1314:         \"src/core/lib/iomgr/error.h\",",
          "1315:         \"src/core/lib/iomgr/error_cfstream.cc\",",
          "1316:         \"src/core/lib/iomgr/error_cfstream.h\",",
          "1317:         \"src/core/lib/iomgr/ev_apple.cc\",",
          "1318:         \"src/core/lib/iomgr/ev_apple.h\",",
          "1319:         \"src/core/lib/iomgr/ev_epoll1_linux.cc\",",
          "1320:         \"src/core/lib/iomgr/ev_epoll1_linux.h\",",
          "1321:         \"src/core/lib/iomgr/ev_poll_posix.cc\",",
          "1322:         \"src/core/lib/iomgr/ev_poll_posix.h\",",
          "1323:         \"src/core/lib/iomgr/ev_posix.cc\",",
          "1324:         \"src/core/lib/iomgr/ev_posix.h\",",
          "1325:         \"src/core/lib/iomgr/ev_windows.cc\",",
          "1326:         \"src/core/lib/iomgr/event_engine_shims/closure.cc\",",
          "1327:         \"src/core/lib/iomgr/event_engine_shims/closure.h\",",
          "1328:         \"src/core/lib/iomgr/event_engine_shims/endpoint.cc\",",
          "1329:         \"src/core/lib/iomgr/event_engine_shims/endpoint.h\",",
          "1330:         \"src/core/lib/iomgr/event_engine_shims/tcp_client.cc\",",
          "1331:         \"src/core/lib/iomgr/event_engine_shims/tcp_client.h\",",
          "1332:         \"src/core/lib/iomgr/exec_ctx.cc\",",
          "1333:         \"src/core/lib/iomgr/exec_ctx.h\",",
          "1334:         \"src/core/lib/iomgr/executor.cc\",",
          "1335:         \"src/core/lib/iomgr/executor.h\",",
          "1336:         \"src/core/lib/iomgr/fork_posix.cc\",",
          "1337:         \"src/core/lib/iomgr/fork_windows.cc\",",
          "1338:         \"src/core/lib/iomgr/gethostname.h\",",
          "1339:         \"src/core/lib/iomgr/gethostname_fallback.cc\",",
          "1340:         \"src/core/lib/iomgr/gethostname_host_name_max.cc\",",
          "1341:         \"src/core/lib/iomgr/gethostname_sysconf.cc\",",
          "1342:         \"src/core/lib/iomgr/grpc_if_nametoindex.h\",",
          "1343:         \"src/core/lib/iomgr/grpc_if_nametoindex_posix.cc\",",
          "1344:         \"src/core/lib/iomgr/grpc_if_nametoindex_unsupported.cc\",",
          "1345:         \"src/core/lib/iomgr/internal_errqueue.cc\",",
          "1346:         \"src/core/lib/iomgr/internal_errqueue.h\",",
          "1347:         \"src/core/lib/iomgr/iocp_windows.cc\",",
          "1348:         \"src/core/lib/iomgr/iocp_windows.h\",",
          "1349:         \"src/core/lib/iomgr/iomgr.cc\",",
          "1350:         \"src/core/lib/iomgr/iomgr.h\",",
          "1351:         \"src/core/lib/iomgr/iomgr_fwd.h\",",
          "1352:         \"src/core/lib/iomgr/iomgr_internal.cc\",",
          "1353:         \"src/core/lib/iomgr/iomgr_internal.h\",",
          "1354:         \"src/core/lib/iomgr/iomgr_posix.cc\",",
          "1355:         \"src/core/lib/iomgr/iomgr_posix_cfstream.cc\",",
          "1356:         \"src/core/lib/iomgr/iomgr_windows.cc\",",
          "1357:         \"src/core/lib/iomgr/load_file.cc\",",
          "1358:         \"src/core/lib/iomgr/load_file.h\",",
          "1359:         \"src/core/lib/iomgr/lockfree_event.cc\",",
          "1360:         \"src/core/lib/iomgr/lockfree_event.h\",",
          "1361:         \"src/core/lib/iomgr/nameser.h\",",
          "1362:         \"src/core/lib/iomgr/polling_entity.cc\",",
          "1363:         \"src/core/lib/iomgr/polling_entity.h\",",
          "1364:         \"src/core/lib/iomgr/pollset.cc\",",
          "1365:         \"src/core/lib/iomgr/pollset.h\",",
          "1366:         \"src/core/lib/iomgr/pollset_set.cc\",",
          "1367:         \"src/core/lib/iomgr/pollset_set.h\",",
          "1368:         \"src/core/lib/iomgr/pollset_set_windows.cc\",",
          "1369:         \"src/core/lib/iomgr/pollset_set_windows.h\",",
          "1370:         \"src/core/lib/iomgr/pollset_windows.cc\",",
          "1371:         \"src/core/lib/iomgr/pollset_windows.h\",",
          "1372:         \"src/core/lib/iomgr/port.h\",",
          "1373:         \"src/core/lib/iomgr/python_util.h\",",
          "1374:         \"src/core/lib/iomgr/resolve_address.cc\",",
          "1375:         \"src/core/lib/iomgr/resolve_address.h\",",
          "1376:         \"src/core/lib/iomgr/resolve_address_impl.h\",",
          "1377:         \"src/core/lib/iomgr/resolve_address_posix.cc\",",
          "1378:         \"src/core/lib/iomgr/resolve_address_posix.h\",",
          "1379:         \"src/core/lib/iomgr/resolve_address_windows.cc\",",
          "1380:         \"src/core/lib/iomgr/resolve_address_windows.h\",",
          "1381:         \"src/core/lib/iomgr/resolved_address.h\",",
          "1382:         \"src/core/lib/iomgr/sockaddr.h\",",
          "1383:         \"src/core/lib/iomgr/sockaddr_posix.h\",",
          "1384:         \"src/core/lib/iomgr/sockaddr_utils_posix.cc\",",
          "1385:         \"src/core/lib/iomgr/sockaddr_windows.h\",",
          "1386:         \"src/core/lib/iomgr/socket_factory_posix.cc\",",
          "1387:         \"src/core/lib/iomgr/socket_factory_posix.h\",",
          "1388:         \"src/core/lib/iomgr/socket_mutator.cc\",",
          "1389:         \"src/core/lib/iomgr/socket_mutator.h\",",
          "1390:         \"src/core/lib/iomgr/socket_utils.h\",",
          "1391:         \"src/core/lib/iomgr/socket_utils_common_posix.cc\",",
          "1392:         \"src/core/lib/iomgr/socket_utils_linux.cc\",",
          "1393:         \"src/core/lib/iomgr/socket_utils_posix.cc\",",
          "1394:         \"src/core/lib/iomgr/socket_utils_posix.h\",",
          "1395:         \"src/core/lib/iomgr/socket_utils_windows.cc\",",
          "1396:         \"src/core/lib/iomgr/socket_windows.cc\",",
          "1397:         \"src/core/lib/iomgr/socket_windows.h\",",
          "1398:         \"src/core/lib/iomgr/systemd_utils.cc\",",
          "1399:         \"src/core/lib/iomgr/systemd_utils.h\",",
          "1400:         \"src/core/lib/iomgr/tcp_client.cc\",",
          "1401:         \"src/core/lib/iomgr/tcp_client.h\",",
          "1402:         \"src/core/lib/iomgr/tcp_client_cfstream.cc\",",
          "1403:         \"src/core/lib/iomgr/tcp_client_posix.cc\",",
          "1404:         \"src/core/lib/iomgr/tcp_client_posix.h\",",
          "1405:         \"src/core/lib/iomgr/tcp_client_windows.cc\",",
          "1406:         \"src/core/lib/iomgr/tcp_posix.cc\",",
          "1407:         \"src/core/lib/iomgr/tcp_posix.h\",",
          "1408:         \"src/core/lib/iomgr/tcp_server.cc\",",
          "1409:         \"src/core/lib/iomgr/tcp_server.h\",",
          "1410:         \"src/core/lib/iomgr/tcp_server_posix.cc\",",
          "1411:         \"src/core/lib/iomgr/tcp_server_utils_posix.h\",",
          "1412:         \"src/core/lib/iomgr/tcp_server_utils_posix_common.cc\",",
          "1413:         \"src/core/lib/iomgr/tcp_server_utils_posix_ifaddrs.cc\",",
          "1414:         \"src/core/lib/iomgr/tcp_server_utils_posix_noifaddrs.cc\",",
          "1415:         \"src/core/lib/iomgr/tcp_server_windows.cc\",",
          "1416:         \"src/core/lib/iomgr/tcp_windows.cc\",",
          "1417:         \"src/core/lib/iomgr/tcp_windows.h\",",
          "1418:         \"src/core/lib/iomgr/timer.cc\",",
          "1419:         \"src/core/lib/iomgr/timer.h\",",
          "1420:         \"src/core/lib/iomgr/timer_generic.cc\",",
          "1421:         \"src/core/lib/iomgr/timer_generic.h\",",
          "1422:         \"src/core/lib/iomgr/timer_heap.cc\",",
          "1423:         \"src/core/lib/iomgr/timer_heap.h\",",
          "1424:         \"src/core/lib/iomgr/timer_manager.cc\",",
          "1425:         \"src/core/lib/iomgr/timer_manager.h\",",
          "1426:         \"src/core/lib/iomgr/unix_sockets_posix.cc\",",
          "1427:         \"src/core/lib/iomgr/unix_sockets_posix.h\",",
          "1428:         \"src/core/lib/iomgr/unix_sockets_posix_noop.cc\",",
          "1429:         \"src/core/lib/iomgr/vsock.cc\",",
          "1430:         \"src/core/lib/iomgr/vsock.h\",",
          "1431:         \"src/core/lib/iomgr/wakeup_fd_eventfd.cc\",",
          "1432:         \"src/core/lib/iomgr/wakeup_fd_nospecial.cc\",",
          "1433:         \"src/core/lib/iomgr/wakeup_fd_pipe.cc\",",
          "1434:         \"src/core/lib/iomgr/wakeup_fd_pipe.h\",",
          "1435:         \"src/core/lib/iomgr/wakeup_fd_posix.cc\",",
          "1436:         \"src/core/lib/iomgr/wakeup_fd_posix.h\",",
          "1437:         \"src/core/lib/json/json.h\",",
          "1438:         \"src/core/lib/json/json_args.h\",",
          "1439:         \"src/core/lib/json/json_channel_args.h\",",
          "1440:         \"src/core/lib/json/json_object_loader.cc\",",
          "1441:         \"src/core/lib/json/json_object_loader.h\",",
          "1442:         \"src/core/lib/json/json_reader.cc\",",
          "1443:         \"src/core/lib/json/json_reader.h\",",
          "1444:         \"src/core/lib/json/json_util.cc\",",
          "1445:         \"src/core/lib/json/json_util.h\",",
          "1446:         \"src/core/lib/json/json_writer.cc\",",
          "1447:         \"src/core/lib/json/json_writer.h\",",
          "1448:         \"src/core/lib/load_balancing/delegating_helper.h\",",
          "1449:         \"src/core/lib/load_balancing/lb_policy.cc\",",
          "1450:         \"src/core/lib/load_balancing/lb_policy.h\",",
          "1451:         \"src/core/lib/load_balancing/lb_policy_factory.h\",",
          "1452:         \"src/core/lib/load_balancing/lb_policy_registry.cc\",",
          "1453:         \"src/core/lib/load_balancing/lb_policy_registry.h\",",
          "1454:         \"src/core/lib/load_balancing/subchannel_interface.h\",",
          "1455:         \"src/core/lib/matchers/matchers.cc\",",
          "1456:         \"src/core/lib/matchers/matchers.h\",",
          "1457:         \"src/core/lib/promise/activity.cc\",",
          "1458:         \"src/core/lib/promise/activity.h\",",
          "1459:         \"src/core/lib/promise/arena_promise.h\",",
          "1460:         \"src/core/lib/promise/cancel_callback.h\",",
          "1461:         \"src/core/lib/promise/context.h\",",
          "1462:         \"src/core/lib/promise/detail/basic_join.h\",",
          "1463:         \"src/core/lib/promise/detail/basic_seq.h\",",
          "1464:         \"src/core/lib/promise/detail/promise_factory.h\",",
          "1465:         \"src/core/lib/promise/detail/promise_like.h\",",
          "1466:         \"src/core/lib/promise/detail/status.h\",",
          "1467:         \"src/core/lib/promise/detail/switch.h\",",
          "1468:         \"src/core/lib/promise/exec_ctx_wakeup_scheduler.h\",",
          "1469:         \"src/core/lib/promise/for_each.h\",",
          "1470:         \"src/core/lib/promise/if.h\",",
          "1471:         \"src/core/lib/promise/interceptor_list.h\",",
          "1472:         \"src/core/lib/promise/latch.h\",",
          "1473:         \"src/core/lib/promise/loop.h\",",
          "1474:         \"src/core/lib/promise/map.h\",",
          "1475:         \"src/core/lib/promise/party.cc\",",
          "1476:         \"src/core/lib/promise/party.h\",",
          "1477:         \"src/core/lib/promise/pipe.h\",",
          "1478:         \"src/core/lib/promise/poll.h\",",
          "1479:         \"src/core/lib/promise/prioritized_race.h\",",
          "1480:         \"src/core/lib/promise/promise.h\",",
          "1481:         \"src/core/lib/promise/race.h\",",
          "1482:         \"src/core/lib/promise/seq.h\",",
          "1483:         \"src/core/lib/promise/sleep.cc\",",
          "1484:         \"src/core/lib/promise/sleep.h\",",
          "1485:         \"src/core/lib/promise/trace.cc\",",
          "1486:         \"src/core/lib/promise/trace.h\",",
          "1487:         \"src/core/lib/promise/try_join.h\",",
          "1488:         \"src/core/lib/promise/try_seq.h\",",
          "1489:         \"src/core/lib/resolver/resolver.cc\",",
          "1490:         \"src/core/lib/resolver/resolver.h\",",
          "1491:         \"src/core/lib/resolver/resolver_factory.h\",",
          "1492:         \"src/core/lib/resolver/resolver_registry.cc\",",
          "1493:         \"src/core/lib/resolver/resolver_registry.h\",",
          "1494:         \"src/core/lib/resolver/server_address.cc\",",
          "1495:         \"src/core/lib/resolver/server_address.h\",",
          "1496:         \"src/core/lib/resource_quota/api.cc\",",
          "1497:         \"src/core/lib/resource_quota/api.h\",",
          "1498:         \"src/core/lib/resource_quota/arena.cc\",",
          "1499:         \"src/core/lib/resource_quota/arena.h\",",
          "1500:         \"src/core/lib/resource_quota/memory_quota.cc\",",
          "1501:         \"src/core/lib/resource_quota/memory_quota.h\",",
          "1502:         \"src/core/lib/resource_quota/periodic_update.cc\",",
          "1503:         \"src/core/lib/resource_quota/periodic_update.h\",",
          "1504:         \"src/core/lib/resource_quota/resource_quota.cc\",",
          "1505:         \"src/core/lib/resource_quota/resource_quota.h\",",
          "1506:         \"src/core/lib/resource_quota/thread_quota.cc\",",
          "1507:         \"src/core/lib/resource_quota/thread_quota.h\",",
          "1508:         \"src/core/lib/resource_quota/trace.cc\",",
          "1509:         \"src/core/lib/resource_quota/trace.h\",",
          "1510:         \"src/core/lib/security/authorization/audit_logging.cc\",",
          "1511:         \"src/core/lib/security/authorization/audit_logging.h\",",
          "1512:         \"src/core/lib/security/authorization/authorization_engine.h\",",
          "1513:         \"src/core/lib/security/authorization/authorization_policy_provider.h\",",
          "1514:         \"src/core/lib/security/authorization/authorization_policy_provider_vtable.cc\",",
          "1515:         \"src/core/lib/security/authorization/evaluate_args.cc\",",
          "1516:         \"src/core/lib/security/authorization/evaluate_args.h\",",
          "1517:         \"src/core/lib/security/authorization/grpc_authorization_engine.cc\",",
          "1518:         \"src/core/lib/security/authorization/grpc_authorization_engine.h\",",
          "1519:         \"src/core/lib/security/authorization/grpc_authorization_policy_provider.cc\",",
          "1520:         \"src/core/lib/security/authorization/grpc_authorization_policy_provider.h\",",
          "1521:         \"src/core/lib/security/authorization/grpc_server_authz_filter.cc\",",
          "1522:         \"src/core/lib/security/authorization/grpc_server_authz_filter.h\",",
          "1523:         \"src/core/lib/security/authorization/matchers.cc\",",
          "1524:         \"src/core/lib/security/authorization/matchers.h\",",
          "1525:         \"src/core/lib/security/authorization/rbac_policy.cc\",",
          "1526:         \"src/core/lib/security/authorization/rbac_policy.h\",",
          "1527:         \"src/core/lib/security/authorization/rbac_translator.cc\",",
          "1528:         \"src/core/lib/security/authorization/rbac_translator.h\",",
          "1529:         \"src/core/lib/security/authorization/stdout_logger.cc\",",
          "1530:         \"src/core/lib/security/authorization/stdout_logger.h\",",
          "1531:         \"src/core/lib/security/certificate_provider/certificate_provider_factory.h\",",
          "1532:         \"src/core/lib/security/certificate_provider/certificate_provider_registry.cc\",",
          "1533:         \"src/core/lib/security/certificate_provider/certificate_provider_registry.h\",",
          "1534:         \"src/core/lib/security/context/security_context.cc\",",
          "1535:         \"src/core/lib/security/context/security_context.h\",",
          "1536:         \"src/core/lib/security/credentials/alts/alts_credentials.cc\",",
          "1537:         \"src/core/lib/security/credentials/alts/alts_credentials.h\",",
          "1538:         \"src/core/lib/security/credentials/alts/check_gcp_environment.cc\",",
          "1539:         \"src/core/lib/security/credentials/alts/check_gcp_environment.h\",",
          "1540:         \"src/core/lib/security/credentials/alts/check_gcp_environment_linux.cc\",",
          "1541:         \"src/core/lib/security/credentials/alts/check_gcp_environment_no_op.cc\",",
          "1542:         \"src/core/lib/security/credentials/alts/check_gcp_environment_windows.cc\",",
          "1543:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_client_options.cc\",",
          "1544:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_options.cc\",",
          "1545:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_options.h\",",
          "1546:         \"src/core/lib/security/credentials/alts/grpc_alts_credentials_server_options.cc\",",
          "1547:         \"src/core/lib/security/credentials/call_creds_util.cc\",",
          "1548:         \"src/core/lib/security/credentials/call_creds_util.h\",",
          "1549:         \"src/core/lib/security/credentials/channel_creds_registry.h\",",
          "1550:         \"src/core/lib/security/credentials/channel_creds_registry_init.cc\",",
          "1551:         \"src/core/lib/security/credentials/composite/composite_credentials.cc\",",
          "1552:         \"src/core/lib/security/credentials/composite/composite_credentials.h\",",
          "1553:         \"src/core/lib/security/credentials/credentials.cc\",",
          "1554:         \"src/core/lib/security/credentials/credentials.h\",",
          "1555:         \"src/core/lib/security/credentials/external/aws_external_account_credentials.cc\",",
          "1556:         \"src/core/lib/security/credentials/external/aws_external_account_credentials.h\",",
          "1557:         \"src/core/lib/security/credentials/external/aws_request_signer.cc\",",
          "1558:         \"src/core/lib/security/credentials/external/aws_request_signer.h\",",
          "1559:         \"src/core/lib/security/credentials/external/external_account_credentials.cc\",",
          "1560:         \"src/core/lib/security/credentials/external/external_account_credentials.h\",",
          "1561:         \"src/core/lib/security/credentials/external/file_external_account_credentials.cc\",",
          "1562:         \"src/core/lib/security/credentials/external/file_external_account_credentials.h\",",
          "1563:         \"src/core/lib/security/credentials/external/url_external_account_credentials.cc\",",
          "1564:         \"src/core/lib/security/credentials/external/url_external_account_credentials.h\",",
          "1565:         \"src/core/lib/security/credentials/fake/fake_credentials.cc\",",
          "1566:         \"src/core/lib/security/credentials/fake/fake_credentials.h\",",
          "1567:         \"src/core/lib/security/credentials/google_default/credentials_generic.cc\",",
          "1568:         \"src/core/lib/security/credentials/google_default/google_default_credentials.cc\",",
          "1569:         \"src/core/lib/security/credentials/google_default/google_default_credentials.h\",",
          "1570:         \"src/core/lib/security/credentials/iam/iam_credentials.cc\",",
          "1571:         \"src/core/lib/security/credentials/iam/iam_credentials.h\",",
          "1572:         \"src/core/lib/security/credentials/insecure/insecure_credentials.cc\",",
          "1573:         \"src/core/lib/security/credentials/insecure/insecure_credentials.h\",",
          "1574:         \"src/core/lib/security/credentials/jwt/json_token.cc\",",
          "1575:         \"src/core/lib/security/credentials/jwt/json_token.h\",",
          "1576:         \"src/core/lib/security/credentials/jwt/jwt_credentials.cc\",",
          "1577:         \"src/core/lib/security/credentials/jwt/jwt_credentials.h\",",
          "1578:         \"src/core/lib/security/credentials/jwt/jwt_verifier.cc\",",
          "1579:         \"src/core/lib/security/credentials/jwt/jwt_verifier.h\",",
          "1580:         \"src/core/lib/security/credentials/local/local_credentials.cc\",",
          "1581:         \"src/core/lib/security/credentials/local/local_credentials.h\",",
          "1582:         \"src/core/lib/security/credentials/oauth2/oauth2_credentials.cc\",",
          "1583:         \"src/core/lib/security/credentials/oauth2/oauth2_credentials.h\",",
          "1584:         \"src/core/lib/security/credentials/plugin/plugin_credentials.cc\",",
          "1585:         \"src/core/lib/security/credentials/plugin/plugin_credentials.h\",",
          "1586:         \"src/core/lib/security/credentials/ssl/ssl_credentials.cc\",",
          "1587:         \"src/core/lib/security/credentials/ssl/ssl_credentials.h\",",
          "1588:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_distributor.cc\",",
          "1589:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_distributor.h\",",
          "1590:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.cc\",",
          "1591:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_provider.h\",",
          "1592:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_verifier.cc\",",
          "1593:         \"src/core/lib/security/credentials/tls/grpc_tls_certificate_verifier.h\",",
          "1594:         \"src/core/lib/security/credentials/tls/grpc_tls_credentials_options.cc\",",
          "1595:         \"src/core/lib/security/credentials/tls/grpc_tls_credentials_options.h\",",
          "1596:         \"src/core/lib/security/credentials/tls/tls_credentials.cc\",",
          "1597:         \"src/core/lib/security/credentials/tls/tls_credentials.h\",",
          "1598:         \"src/core/lib/security/credentials/tls/tls_utils.cc\",",
          "1599:         \"src/core/lib/security/credentials/tls/tls_utils.h\",",
          "1600:         \"src/core/lib/security/credentials/xds/xds_credentials.cc\",",
          "1601:         \"src/core/lib/security/credentials/xds/xds_credentials.h\",",
          "1602:         \"src/core/lib/security/security_connector/alts/alts_security_connector.cc\",",
          "1603:         \"src/core/lib/security/security_connector/alts/alts_security_connector.h\",",
          "1604:         \"src/core/lib/security/security_connector/fake/fake_security_connector.cc\",",
          "1605:         \"src/core/lib/security/security_connector/fake/fake_security_connector.h\",",
          "1606:         \"src/core/lib/security/security_connector/insecure/insecure_security_connector.cc\",",
          "1607:         \"src/core/lib/security/security_connector/insecure/insecure_security_connector.h\",",
          "1608:         \"src/core/lib/security/security_connector/load_system_roots.h\",",
          "1609:         \"src/core/lib/security/security_connector/load_system_roots_fallback.cc\",",
          "1610:         \"src/core/lib/security/security_connector/load_system_roots_supported.cc\",",
          "1611:         \"src/core/lib/security/security_connector/load_system_roots_supported.h\",",
          "1612:         \"src/core/lib/security/security_connector/local/local_security_connector.cc\",",
          "1613:         \"src/core/lib/security/security_connector/local/local_security_connector.h\",",
          "1614:         \"src/core/lib/security/security_connector/security_connector.cc\",",
          "1615:         \"src/core/lib/security/security_connector/security_connector.h\",",
          "1616:         \"src/core/lib/security/security_connector/ssl/ssl_security_connector.cc\",",
          "1617:         \"src/core/lib/security/security_connector/ssl/ssl_security_connector.h\",",
          "1618:         \"src/core/lib/security/security_connector/ssl_utils.cc\",",
          "1619:         \"src/core/lib/security/security_connector/ssl_utils.h\",",
          "1620:         \"src/core/lib/security/security_connector/tls/tls_security_connector.cc\",",
          "1621:         \"src/core/lib/security/security_connector/tls/tls_security_connector.h\",",
          "1622:         \"src/core/lib/security/transport/auth_filters.h\",",
          "1623:         \"src/core/lib/security/transport/client_auth_filter.cc\",",
          "1624:         \"src/core/lib/security/transport/secure_endpoint.cc\",",
          "1625:         \"src/core/lib/security/transport/secure_endpoint.h\",",
          "1626:         \"src/core/lib/security/transport/security_handshaker.cc\",",
          "1627:         \"src/core/lib/security/transport/security_handshaker.h\",",
          "1628:         \"src/core/lib/security/transport/server_auth_filter.cc\",",
          "1629:         \"src/core/lib/security/transport/tsi_error.cc\",",
          "1630:         \"src/core/lib/security/transport/tsi_error.h\",",
          "1631:         \"src/core/lib/security/util/json_util.cc\",",
          "1632:         \"src/core/lib/security/util/json_util.h\",",
          "1633:         \"src/core/lib/service_config/service_config.h\",",
          "1634:         \"src/core/lib/service_config/service_config_call_data.h\",",
          "1635:         \"src/core/lib/service_config/service_config_impl.cc\",",
          "1636:         \"src/core/lib/service_config/service_config_impl.h\",",
          "1637:         \"src/core/lib/service_config/service_config_parser.cc\",",
          "1638:         \"src/core/lib/service_config/service_config_parser.h\",",
          "1639:         \"src/core/lib/slice/b64.cc\",",
          "1640:         \"src/core/lib/slice/b64.h\",",
          "1641:         \"src/core/lib/slice/percent_encoding.cc\",",
          "1642:         \"src/core/lib/slice/percent_encoding.h\",",
          "1643:         \"src/core/lib/slice/slice.cc\",",
          "1644:         \"src/core/lib/slice/slice.h\",",
          "1645:         \"src/core/lib/slice/slice_buffer.cc\",",
          "1646:         \"src/core/lib/slice/slice_buffer.h\",",
          "1647:         \"src/core/lib/slice/slice_internal.h\",",
          "1648:         \"src/core/lib/slice/slice_refcount.cc\",",
          "1649:         \"src/core/lib/slice/slice_refcount.h\",",
          "1650:         \"src/core/lib/slice/slice_string_helpers.cc\",",
          "1651:         \"src/core/lib/slice/slice_string_helpers.h\",",
          "1652:         \"src/core/lib/surface/api_trace.cc\",",
          "1653:         \"src/core/lib/surface/api_trace.h\",",
          "1654:         \"src/core/lib/surface/builtins.cc\",",
          "1655:         \"src/core/lib/surface/builtins.h\",",
          "1656:         \"src/core/lib/surface/byte_buffer.cc\",",
          "1657:         \"src/core/lib/surface/byte_buffer_reader.cc\",",
          "1658:         \"src/core/lib/surface/call.cc\",",
          "1659:         \"src/core/lib/surface/call.h\",",
          "1660:         \"src/core/lib/surface/call_details.cc\",",
          "1661:         \"src/core/lib/surface/call_log_batch.cc\",",
          "1662:         \"src/core/lib/surface/call_test_only.h\",",
          "1663:         \"src/core/lib/surface/call_trace.cc\",",
          "1664:         \"src/core/lib/surface/call_trace.h\",",
          "1665:         \"src/core/lib/surface/channel.cc\",",
          "1666:         \"src/core/lib/surface/channel.h\",",
          "1667:         \"src/core/lib/surface/channel_init.cc\",",
          "1668:         \"src/core/lib/surface/channel_init.h\",",
          "1669:         \"src/core/lib/surface/channel_ping.cc\",",
          "1670:         \"src/core/lib/surface/channel_stack_type.cc\",",
          "1671:         \"src/core/lib/surface/channel_stack_type.h\",",
          "1672:         \"src/core/lib/surface/completion_queue.cc\",",
          "1673:         \"src/core/lib/surface/completion_queue.h\",",
          "1674:         \"src/core/lib/surface/completion_queue_factory.cc\",",
          "1675:         \"src/core/lib/surface/completion_queue_factory.h\",",
          "1676:         \"src/core/lib/surface/event_string.cc\",",
          "1677:         \"src/core/lib/surface/event_string.h\",",
          "1678:         \"src/core/lib/surface/init.cc\",",
          "1679:         \"src/core/lib/surface/init.h\",",
          "1680:         \"src/core/lib/surface/init_internally.cc\",",
          "1681:         \"src/core/lib/surface/init_internally.h\",",
          "1682:         \"src/core/lib/surface/lame_client.cc\",",
          "1683:         \"src/core/lib/surface/lame_client.h\",",
          "1684:         \"src/core/lib/surface/metadata_array.cc\",",
          "1685:         \"src/core/lib/surface/server.cc\",",
          "1686:         \"src/core/lib/surface/server.h\",",
          "1687:         \"src/core/lib/surface/validate_metadata.cc\",",
          "1688:         \"src/core/lib/surface/validate_metadata.h\",",
          "1689:         \"src/core/lib/surface/version.cc\",",
          "1690:         \"src/core/lib/transport/batch_builder.cc\",",
          "1691:         \"src/core/lib/transport/batch_builder.h\",",
          "1692:         \"src/core/lib/transport/bdp_estimator.cc\",",
          "1693:         \"src/core/lib/transport/bdp_estimator.h\",",
          "1694:         \"src/core/lib/transport/connectivity_state.cc\",",
          "1695:         \"src/core/lib/transport/connectivity_state.h\",",
          "1696:         \"src/core/lib/transport/custom_metadata.h\",",
          "1697:         \"src/core/lib/transport/error_utils.cc\",",
          "1698:         \"src/core/lib/transport/error_utils.h\",",
          "1699:         \"src/core/lib/transport/handshaker.cc\",",
          "1700:         \"src/core/lib/transport/handshaker.h\",",
          "1701:         \"src/core/lib/transport/handshaker_factory.h\",",
          "1702:         \"src/core/lib/transport/handshaker_registry.cc\",",
          "1703:         \"src/core/lib/transport/handshaker_registry.h\",",
          "1704:         \"src/core/lib/transport/http2_errors.h\",",
          "1705:         \"src/core/lib/transport/http_connect_handshaker.cc\",",
          "1706:         \"src/core/lib/transport/http_connect_handshaker.h\",",
          "1707:         \"src/core/lib/transport/metadata_batch.cc\",",
          "1708:         \"src/core/lib/transport/metadata_batch.h\",",
          "1709:         \"src/core/lib/transport/metadata_compression_traits.h\",",
          "1710:         \"src/core/lib/transport/parsed_metadata.cc\",",
          "1711:         \"src/core/lib/transport/parsed_metadata.h\",",
          "1712:         \"src/core/lib/transport/pid_controller.cc\",",
          "1713:         \"src/core/lib/transport/pid_controller.h\",",
          "1714:         \"src/core/lib/transport/simple_slice_based_metadata.h\",",
          "1715:         \"src/core/lib/transport/status_conversion.cc\",",
          "1716:         \"src/core/lib/transport/status_conversion.h\",",
          "1717:         \"src/core/lib/transport/tcp_connect_handshaker.cc\",",
          "1718:         \"src/core/lib/transport/tcp_connect_handshaker.h\",",
          "1719:         \"src/core/lib/transport/timeout_encoding.cc\",",
          "1720:         \"src/core/lib/transport/timeout_encoding.h\",",
          "1721:         \"src/core/lib/transport/transport.cc\",",
          "1722:         \"src/core/lib/transport/transport.h\",",
          "1723:         \"src/core/lib/transport/transport_fwd.h\",",
          "1724:         \"src/core/lib/transport/transport_impl.h\",",
          "1725:         \"src/core/lib/transport/transport_op_string.cc\",",
          "1726:         \"src/core/lib/uri/uri_parser.cc\",",
          "1727:         \"src/core/lib/uri/uri_parser.h\",",
          "1728: >>>>>>> 415f2f9ee3 ([Core] Improve HPACK (#33597))",
          "",
          "---------------"
        ],
        "config.m4||config.m4": [
          "File: config.m4 -> config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     src/core/ext/transport/chttp2/transport/frame_window_update.cc \\",
          "138:     src/core/ext/transport/chttp2/transport/hpack_encoder.cc \\",
          "139:     src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "140:     src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "141:     src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "142:     src/core/ext/transport/chttp2/transport/http2_settings.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "",
          "---------------"
        ],
        "config.w32||config.w32": [
          "File: config.w32 -> config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\frame_window_update.cc \" +",
          "103:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_encoder.cc \" +",
          "104:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_encoder_table.cc \" +",
          "105:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parser.cc \" +",
          "106:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parser_table.cc \" +",
          "107:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\http2_settings.cc \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parse_result.cc \" +",
          "",
          "---------------"
        ],
        "gRPC-C++.podspec||gRPC-C++.podspec": [
          "File: gRPC-C++.podspec -> gRPC-C++.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:                       'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "369:                       'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "370:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "371:                       'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "372:                       'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "373:                       'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1406:                               'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "1407:                               'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "1408:                               'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "1409:                               'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "1410:                               'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "1411:                               'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1410:                               'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------"
        ],
        "gRPC-Core.podspec||gRPC-Core.podspec": [
          "File: gRPC-Core.podspec -> gRPC-Core.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:                       'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "395:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "396:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "397:                       'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "398:                       'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "399:                       'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "398:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2133:                               'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "2134:                               'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "2135:                               'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "2136:                               'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "2137:                               'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "2138:                               'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2138:                               'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------"
        ],
        "grpc.gemspec||grpc.gemspec": [
          "File: grpc.gemspec -> grpc.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder.h )",
          "301:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc )",
          "302:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder_table.h )",
          "303:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser.cc )",
          "304:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser.h )",
          "305:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser_table.cc )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parse_result.cc )",
          "304:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parse_result.h )",
          "",
          "---------------"
        ],
        "grpc.gyp||grpc.gyp": [
          "File: grpc.gyp -> grpc.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:         'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "362:         'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "363:         'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "364:         'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "365:         'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "366:         'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:         'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1173:         'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "1174:         'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "1175:         'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "1176:         'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "1177:         'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "1178:         'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1177:         'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc||src/core/ext/transport/chttp2/transport/hpack_parse_result.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc -> src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <grpc/support/port_platform.h>",
          "17: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "19: #include <stddef.h>",
          "21: #include <initializer_list>",
          "23: #include \"absl/strings/str_format.h\"",
          "25: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "26: #include \"src/core/lib/gprpp/status_helper.h\"",
          "27: #include \"src/core/lib/iomgr/error.h\"",
          "28: #include \"src/core/lib/slice/slice.h\"",
          "30: namespace grpc_core {",
          "32: namespace {",
          "33: class MetadataSizeLimitExceededEncoder {",
          "34:  public:",
          "35:   explicit MetadataSizeLimitExceededEncoder(std::string& summary)",
          "36:       : summary_(summary) {}",
          "38:   void Encode(const Slice& key, const Slice& value) {",
          "39:     AddToSummary(key.as_string_view(), value.size());",
          "40:   }",
          "42:   template <typename Key, typename Value>",
          "43:   void Encode(Key, const Value& value) {",
          "44:     AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "45:   }",
          "47:  private:",
          "48:   void AddToSummary(absl::string_view key,",
          "49:                     size_t value_length) GPR_ATTRIBUTE_NOINLINE {",
          "50:     absl::StrAppend(&summary_, \" \", key, \":\",",
          "51:                     hpack_constants::SizeForEntry(key.size(), value_length),",
          "52:                     \"B\");",
          "53:   }",
          "54:   std::string& summary_;",
          "55: };",
          "57: absl::Status MakeStreamError(absl::Status error) {",
          "58:   GPR_DEBUG_ASSERT(!error.ok());",
          "59:   return grpc_error_set_int(std::move(error), StatusIntProperty::kStreamId, 0);",
          "60: }",
          "61: }  // namespace",
          "63: absl::Status HpackParseResult::Materialize() const {",
          "64:   if (materialized_status_.has_value()) return *materialized_status_;",
          "65:   materialized_status_ = BuildMaterialized();",
          "66:   return *materialized_status_;",
          "67: }",
          "69: absl::Status HpackParseResult::BuildMaterialized() const {",
          "70:   switch (status_.get()) {",
          "71:     case HpackParseStatus::kOk:",
          "72:       return absl::OkStatus();",
          "73:     case HpackParseStatus::kEof:",
          "74:       Crash(\"Materialize() called on EOF\");",
          "75:       break;",
          "76:     case HpackParseStatus::kMovedFrom:",
          "77:       Crash(\"Materialize() called on moved-from object\");",
          "78:       break;",
          "79:     case HpackParseStatus::kInvalidMetadata:",
          "80:       if (key_.empty()) {",
          "81:         return MakeStreamError(absl::InternalError(",
          "82:             ValidateMetadataResultToString(validate_metadata_result_)));",
          "83:       } else {",
          "84:         return MakeStreamError(absl::InternalError(absl::StrCat(",
          "85:             ValidateMetadataResultToString(validate_metadata_result_), \": \",",
          "86:             key_)));",
          "87:       }",
          "88:     case HpackParseStatus::kSoftMetadataLimitExceeded:",
          "89:     case HpackParseStatus::kHardMetadataLimitExceeded: {",
          "90:       const auto& e = metadata_limit_exceeded_;",
          "93:       std::string summary;",
          "94:       if (e.prior != nullptr) {",
          "95:         MetadataSizeLimitExceededEncoder encoder(summary);",
          "96:         e.prior->Encode(&encoder);",
          "97:       }",
          "98:       return MakeStreamError(absl::ResourceExhaustedError(absl::StrCat(",
          "99:           \"received metadata size exceeds \",",
          "100:           status_.get() == HpackParseStatus::kSoftMetadataLimitExceeded",
          "101:               ? \"soft\"",
          "102:               : \"hard\",",
          "103:           \" limit (\", e.frame_length, \" vs. \", e.limit, \")\",",
          "104:           summary.empty() ? \"\" : \"; \", summary)));",
          "105:     }",
          "106:     case HpackParseStatus::kHardMetadataLimitExceededByKey: {",
          "107:       const auto& e = metadata_limit_exceeded_by_atom_;",
          "108:       return MakeStreamError(absl::ResourceExhaustedError(",
          "109:           absl::StrCat(\"received metadata size exceeds hard limit (key length \",",
          "110:                        e.atom_length, \" vs. \", e.limit, \")\")));",
          "111:     }",
          "112:     case HpackParseStatus::kHardMetadataLimitExceededByValue: {",
          "113:       const auto& e = metadata_limit_exceeded_by_atom_;",
          "114:       return MakeStreamError(absl::ResourceExhaustedError(absl::StrCat(",
          "115:           \"received metadata size exceeds hard limit (value length \",",
          "116:           e.atom_length, \" vs. \", e.limit, \")\")));",
          "117:     }",
          "118:     case HpackParseStatus::kMetadataParseError:",
          "119:       if (!key_.empty()) {",
          "120:         return MakeStreamError(absl::InternalError(",
          "121:             absl::StrCat(\"Error parsing '\", key_, \"' metadata\")));",
          "122:       } else {",
          "123:         return MakeStreamError(absl::InternalError(\"Error parsing metadata\"));",
          "124:       }",
          "125:     case HpackParseStatus::kUnbase64Failed:",
          "126:       if (!key_.empty()) {",
          "127:         return MakeStreamError(absl::InternalError(absl::StrCat(",
          "128:             \"Error parsing '\", key_, \"' metadata: illegal base64 encoding\")));",
          "129:       } else {",
          "130:         return MakeStreamError(absl::InternalError(",
          "131:             absl::StrCat(\"Failed base64 decoding metadata\")));",
          "132:       }",
          "133:     case HpackParseStatus::kIncompleteHeaderAtBoundary:",
          "134:       return absl::InternalError(",
          "135:           \"Incomplete header at the end of a header/continuation sequence\");",
          "136:     case HpackParseStatus::kVarintOutOfRange:",
          "137:       return absl::InternalError(absl::StrFormat(",
          "138:           \"integer overflow in hpack integer decoding: have 0x%08x, \"",
          "139:           \"got byte 0x%02x\",",
          "140:           varint_out_of_range_.value, varint_out_of_range_.last_byte));",
          "141:     case HpackParseStatus::kIllegalTableSizeChange:",
          "142:       return absl::InternalError(absl::StrCat(",
          "143:           \"Attempt to make hpack table \", illegal_table_size_change_.new_size,",
          "144:           \" bytes when max is \", illegal_table_size_change_.max_size,",
          "145:           \" bytes\"));",
          "146:     case HpackParseStatus::kAddBeforeTableSizeUpdated:",
          "147:       return absl::InternalError(",
          "148:           absl::StrCat(\"HPACK max table size reduced to \",",
          "149:                        illegal_table_size_change_.new_size,",
          "150:                        \" but not reflected by hpack stream (still at \",",
          "151:                        illegal_table_size_change_.max_size, \")\"));",
          "152:     case HpackParseStatus::kParseHuffFailed:",
          "153:       if (!key_.empty()) {",
          "154:         return absl::InternalError(",
          "155:             absl::StrCat(\"Failed huffman decoding '\", key_, \"' metadata\"));",
          "156:       } else {",
          "157:         return absl::InternalError(",
          "158:             absl::StrCat(\"Failed huffman decoding metadata\"));",
          "159:       }",
          "160:       break;",
          "161:     case HpackParseStatus::kTooManyDynamicTableSizeChanges:",
          "162:       return absl::InternalError(",
          "163:           \"More than two max table size changes in a single frame\");",
          "164:     case HpackParseStatus::kMaliciousVarintEncoding:",
          "165:       return absl::InternalError(",
          "166:           \"Malicious varint encoding detected in HPACK stream\");",
          "167:     case HpackParseStatus::kInvalidHpackIndex:",
          "168:       return absl::InternalError(absl::StrFormat(",
          "169:           \"Invalid HPACK index received (%d)\", invalid_hpack_index_));",
          "170:     case HpackParseStatus::kIllegalHpackOpCode:",
          "171:       return absl::InternalError(\"Illegal hpack op code\");",
          "172:   }",
          "173:   GPR_UNREACHABLE_CODE(return absl::UnknownError(\"Should never reach here\"));",
          "174: }",
          "176: }  // namespace grpc_core",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parse_result.h||src/core/ext/transport/chttp2/transport/hpack_parse_result.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parse_result.h -> src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #ifndef GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "16: #define GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "18: #include <grpc/support/port_platform.h>",
          "20: #include <stdint.h>",
          "22: #include <string>",
          "23: #include <utility>",
          "25: #include \"absl/status/status.h\"",
          "26: #include \"absl/strings/str_cat.h\"",
          "27: #include \"absl/strings/string_view.h\"",
          "28: #include \"absl/types/optional.h\"",
          "30: #include <grpc/support/log.h>",
          "32: #include \"src/core/lib/gprpp/crash.h\"",
          "33: #include \"src/core/lib/surface/validate_metadata.h\"",
          "34: #include \"src/core/lib/transport/metadata_batch.h\"",
          "36: namespace grpc_core {",
          "40: enum class HpackParseStatus : uint8_t {",
          "45:   kOk,",
          "47:   kEof,",
          "50:   kMovedFrom,",
          "60:   kFirstStreamError,",
          "61:   kInvalidMetadata = kFirstStreamError,",
          "63:   kHardMetadataLimitExceeded,",
          "64:   kSoftMetadataLimitExceeded,",
          "66:   kHardMetadataLimitExceededByKey,",
          "68:   kHardMetadataLimitExceededByValue,",
          "69:   kMetadataParseError,",
          "71:   kUnbase64Failed,",
          "80:   kFirstConnectionError,",
          "82:   kIncompleteHeaderAtBoundary = kFirstConnectionError,",
          "84:   kVarintOutOfRange,",
          "86:   kInvalidHpackIndex,",
          "88:   kIllegalTableSizeChange,",
          "90:   kAddBeforeTableSizeUpdated,",
          "92:   kParseHuffFailed,",
          "94:   kTooManyDynamicTableSizeChanges,",
          "102:   kMaliciousVarintEncoding,",
          "104:   kIllegalHpackOpCode,",
          "105: };",
          "107: inline bool IsStreamError(HpackParseStatus status) {",
          "108:   return status >= HpackParseStatus::kFirstStreamError &&",
          "109:          status < HpackParseStatus::kFirstConnectionError;",
          "110: }",
          "112: inline bool IsConnectionError(HpackParseStatus status) {",
          "113:   return status >= HpackParseStatus::kFirstConnectionError;",
          "114: }",
          "116: inline bool IsEphemeralError(HpackParseStatus status) {",
          "117:   switch (status) {",
          "118:     case HpackParseStatus::kSoftMetadataLimitExceeded:",
          "119:     case HpackParseStatus::kHardMetadataLimitExceeded:",
          "120:       return true;",
          "121:     default:",
          "122:       return false;",
          "123:   }",
          "124: }",
          "126: class HpackParseResult {",
          "127:  public:",
          "128:   HpackParseResult() : HpackParseResult{HpackParseStatus::kOk} {}",
          "130:   bool ok() const { return status_.get() == HpackParseStatus::kOk; }",
          "131:   bool stream_error() const { return IsStreamError(status_.get()); }",
          "132:   bool connection_error() const { return IsConnectionError(status_.get()); }",
          "133:   bool ephemeral() const { return IsEphemeralError(status_.get()); }",
          "135:   HpackParseResult PersistentStreamErrorOrOk() const {",
          "136:     if (connection_error() || ephemeral()) return HpackParseResult();",
          "137:     return *this;",
          "138:   }",
          "140:   static HpackParseResult FromStatus(HpackParseStatus status) {",
          "143:     switch (status) {",
          "144:       case HpackParseStatus::kUnbase64Failed:",
          "145:       case HpackParseStatus::kParseHuffFailed:",
          "146:         return HpackParseResult{status};",
          "147:       default:",
          "148:         Crash(",
          "149:             absl::StrCat(\"Invalid HpackParseStatus for FromStatus: \", status));",
          "150:     }",
          "151:   }",
          "153:   static HpackParseResult FromStatusWithKey(HpackParseStatus status,",
          "154:                                             absl::string_view key) {",
          "155:     auto r = FromStatus(status);",
          "156:     r.key_ = std::string(key);",
          "157:     return r;",
          "158:   }",
          "160:   static HpackParseResult MetadataParseError(absl::string_view key) {",
          "161:     HpackParseResult r{HpackParseStatus::kMetadataParseError};",
          "162:     r.key_ = std::string(key);",
          "163:     return r;",
          "164:   }",
          "166:   static HpackParseResult AddBeforeTableSizeUpdated(uint32_t current_size,",
          "167:                                                     uint32_t max_size) {",
          "168:     HpackParseResult p{HpackParseStatus::kAddBeforeTableSizeUpdated};",
          "169:     p.illegal_table_size_change_ =",
          "170:         IllegalTableSizeChange{current_size, max_size};",
          "171:     return p;",
          "172:   }",
          "174:   static HpackParseResult MaliciousVarintEncodingError() {",
          "175:     return HpackParseResult{HpackParseStatus::kMaliciousVarintEncoding};",
          "176:   }",
          "178:   static HpackParseResult IllegalHpackOpCode() {",
          "179:     return HpackParseResult{HpackParseStatus::kIllegalHpackOpCode};",
          "180:   }",
          "182:   static HpackParseResult InvalidMetadataError(ValidateMetadataResult result,",
          "183:                                                absl::string_view key) {",
          "184:     GPR_DEBUG_ASSERT(result != ValidateMetadataResult::kOk);",
          "185:     HpackParseResult p{HpackParseStatus::kInvalidMetadata};",
          "186:     p.key_ = std::string(key);",
          "187:     p.validate_metadata_result_ = result;",
          "188:     return p;",
          "189:   }",
          "191:   static HpackParseResult IncompleteHeaderAtBoundaryError() {",
          "192:     return HpackParseResult{HpackParseStatus::kIncompleteHeaderAtBoundary};",
          "193:   }",
          "195:   static HpackParseResult VarintOutOfRangeError(uint32_t value,",
          "196:                                                 uint8_t last_byte) {",
          "197:     HpackParseResult p{HpackParseStatus::kVarintOutOfRange};",
          "198:     p.varint_out_of_range_ = VarintOutOfRange{last_byte, value};",
          "199:     return p;",
          "200:   }",
          "202:   static HpackParseResult InvalidHpackIndexError(uint32_t index) {",
          "203:     HpackParseResult p{HpackParseStatus::kInvalidHpackIndex};",
          "204:     p.invalid_hpack_index_ = index;",
          "205:     return p;",
          "206:   }",
          "208:   static HpackParseResult IllegalTableSizeChangeError(uint32_t new_size,",
          "209:                                                       uint32_t max_size) {",
          "210:     HpackParseResult p{HpackParseStatus::kIllegalTableSizeChange};",
          "211:     p.illegal_table_size_change_ = IllegalTableSizeChange{new_size, max_size};",
          "212:     return p;",
          "213:   }",
          "215:   static HpackParseResult TooManyDynamicTableSizeChangesError() {",
          "216:     return HpackParseResult{HpackParseStatus::kTooManyDynamicTableSizeChanges};",
          "217:   }",
          "219:   static HpackParseResult SoftMetadataLimitExceededError(",
          "220:       grpc_metadata_batch* metadata, uint32_t frame_length, uint32_t limit) {",
          "221:     HpackParseResult p{HpackParseStatus::kSoftMetadataLimitExceeded};",
          "222:     p.metadata_limit_exceeded_ =",
          "223:         MetadataLimitExceeded{frame_length, limit, metadata};",
          "224:     return p;",
          "225:   }",
          "227:   static HpackParseResult HardMetadataLimitExceededError(",
          "228:       grpc_metadata_batch* metadata, uint32_t frame_length, uint32_t limit) {",
          "229:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceeded};",
          "230:     p.metadata_limit_exceeded_ =",
          "231:         MetadataLimitExceeded{frame_length, limit, metadata};",
          "232:     return p;",
          "233:   }",
          "235:   static HpackParseResult HardMetadataLimitExceededByKeyError(",
          "236:       uint32_t key_length, uint32_t limit) {",
          "237:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceededByKey};",
          "238:     p.metadata_limit_exceeded_by_atom_ =",
          "239:         MetadataLimitExceededByAtom{key_length, limit};",
          "240:     return p;",
          "241:   }",
          "243:   static HpackParseResult HardMetadataLimitExceededByValueError(",
          "244:       absl::string_view key, uint32_t value_length, uint32_t limit) {",
          "245:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceededByValue};",
          "246:     p.metadata_limit_exceeded_by_atom_ =",
          "247:         MetadataLimitExceededByAtom{value_length, limit};",
          "248:     p.key_ = std::string(key);",
          "249:     return p;",
          "250:   }",
          "254:   absl::Status Materialize() const;",
          "256:  private:",
          "257:   explicit HpackParseResult(HpackParseStatus status) : status_(status) {}",
          "258:   absl::Status BuildMaterialized() const;",
          "260:   struct VarintOutOfRange {",
          "261:     uint8_t last_byte;",
          "262:     uint32_t value;",
          "263:   };",
          "265:   struct MetadataLimitExceeded {",
          "266:     uint32_t frame_length;",
          "267:     uint32_t limit;",
          "268:     grpc_metadata_batch* prior;",
          "269:   };",
          "273:   struct MetadataLimitExceededByAtom {",
          "274:     uint32_t atom_length;",
          "275:     uint32_t limit;",
          "276:   };",
          "278:   struct IllegalTableSizeChange {",
          "279:     uint32_t new_size;",
          "280:     uint32_t max_size;",
          "281:   };",
          "283:   class StatusWrapper {",
          "284:    public:",
          "285:     explicit StatusWrapper(HpackParseStatus status) : status_(status) {}",
          "287:     StatusWrapper(const StatusWrapper&) = default;",
          "288:     StatusWrapper& operator=(const StatusWrapper&) = default;",
          "289:     StatusWrapper(StatusWrapper&& other) noexcept",
          "290:         : status_(std::exchange(other.status_, HpackParseStatus::kMovedFrom)) {}",
          "291:     StatusWrapper& operator=(StatusWrapper&& other) noexcept {",
          "292:       status_ = std::exchange(other.status_, HpackParseStatus::kMovedFrom);",
          "293:       return *this;",
          "294:     }",
          "296:     HpackParseStatus get() const { return status_; }",
          "298:    private:",
          "299:     HpackParseStatus status_;",
          "300:   };",
          "302:   StatusWrapper status_;",
          "303:   union {",
          "305:     ValidateMetadataResult validate_metadata_result_;",
          "307:     VarintOutOfRange varint_out_of_range_;",
          "309:     uint32_t invalid_hpack_index_;",
          "312:     MetadataLimitExceeded metadata_limit_exceeded_;",
          "315:     MetadataLimitExceededByAtom metadata_limit_exceeded_by_atom_;",
          "317:     IllegalTableSizeChange illegal_table_size_change_;",
          "318:   };",
          "319:   std::string key_;",
          "320:   mutable absl::optional<absl::Status> materialized_status_;",
          "321: };",
          "323: }  // namespace grpc_core",
          "325: #endif  // GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdlib.h>",
          "26: #include <algorithm>",
          "28: #include <string>",
          "29: #include <utility>",
          "",
          "[Removed Lines]",
          "27: #include <initializer_list>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"absl/status/status.h\"",
          "33: #include \"absl/strings/match.h\"",
          "34: #include \"absl/strings/str_cat.h\"",
          "36: #include \"absl/strings/string_view.h\"",
          "37: #include \"absl/types/optional.h\"",
          "38: #include \"absl/types/span.h\"",
          "39: #include \"absl/types/variant.h\"",
          "41: #include <grpc/support/log.h>",
          "43: #include \"src/core/ext/transport/chttp2/transport/decode_huff.h\"",
          "44: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "45: #include \"src/core/lib/debug/stats.h\"",
          "46: #include \"src/core/lib/debug/stats_data.h\"",
          "47: #include \"src/core/lib/debug/trace.h\"",
          "50: #include \"src/core/lib/slice/slice.h\"",
          "51: #include \"src/core/lib/slice/slice_refcount.h\"",
          "52: #include \"src/core/lib/surface/validate_metadata.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"absl/strings/str_format.h\"",
          "48: #include \"src/core/lib/gprpp/crash.h\"",
          "49: #include \"src/core/lib/gprpp/status_helper.h\"",
          "",
          "[Added Lines]",
          "39: #include <grpc/slice.h>",
          "44: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "45: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "49: #include \"src/core/lib/gprpp/match.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: constexpr Base64InverseTable kBase64InverseTable;",
          "118: }  // namespace",
          "",
          "[Removed Lines]",
          "85: absl::Status EnsureStreamError(absl::Status error) {",
          "86:   if (error.ok()) return error;",
          "87:   return grpc_error_set_int(std::move(error), StatusIntProperty::kStreamId, 0);",
          "88: }",
          "90: bool IsStreamError(const absl::Status& status) {",
          "91:   intptr_t stream_id;",
          "92:   return grpc_error_get_int(status, StatusIntProperty::kStreamId, &stream_id);",
          "93: }",
          "95: class MetadataSizeLimitExceededEncoder {",
          "96:  public:",
          "97:   explicit MetadataSizeLimitExceededEncoder(std::string& summary)",
          "98:       : summary_(summary) {}",
          "100:   void Encode(const Slice& key, const Slice& value) {",
          "101:     AddToSummary(key.as_string_view(), value.size());",
          "102:   }",
          "104:   template <typename Key, typename Value>",
          "105:   void Encode(Key, const Value& value) {",
          "106:     AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "107:   }",
          "109:  private:",
          "110:   void AddToSummary(absl::string_view key,",
          "111:                     size_t value_length) GPR_ATTRIBUTE_NOINLINE {",
          "112:     absl::StrAppend(&summary_, \" \", key, \":\",",
          "113:                     hpack_constants::SizeForEntry(key.size(), value_length),",
          "114:                     \"B\");",
          "115:   }",
          "116:   std::string& summary_;",
          "117: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122: class HPackParser::Input {",
          "123:  public:",
          "124:   Input(grpc_slice_refcount* current_slice_refcount, const uint8_t* begin,",
          "126:       : current_slice_refcount_(current_slice_refcount),",
          "127:         begin_(begin),",
          "128:         end_(end),",
          "",
          "[Removed Lines]",
          "125:         const uint8_t* end)",
          "129:         frontier_(begin) {}",
          "",
          "[Added Lines]",
          "92:         const uint8_t* end, HpackParseResult& error)",
          "96:         frontier_(begin),",
          "97:         error_(error) {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:   absl::optional<uint8_t> Next() {",
          "158:     if (end_of_stream()) {",
          "160:       return absl::optional<uint8_t>();",
          "161:     }",
          "162:     return *begin_++;",
          "",
          "[Removed Lines]",
          "159:       UnexpectedEOF();",
          "",
          "[Added Lines]",
          "127:       UnexpectedEOF(/*min_progress_size=*/1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:     do {",
          "206:       cur = Next();",
          "207:       if (!cur.has_value()) return {};",
          "208:     } while (*cur == 0x80);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     int num_redundant_0x80 = 0;",
          "179:       ++num_redundant_0x80;",
          "180:       if (num_redundant_0x80 == 16) {",
          "181:         return ParseVarintMaliciousEncoding();",
          "182:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:     return ParseVarintOutOfRange(value, *cur);",
          "213:   }",
          "224:   absl::optional<StringPrefix> ParseStringPrefix() {",
          "225:     auto cur = Next();",
          "",
          "[Removed Lines]",
          "216:   struct StringPrefix {",
          "218:     uint32_t length;",
          "220:     bool huff;",
          "221:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243:     return StringPrefix{strlen, huff};",
          "244:   }",
          "247:   bool eof_error() const {",
          "249:   }",
          "258:   bool has_error() const { return !error_.ok(); }",
          "",
          "[Removed Lines]",
          "248:     return eof_error_ || (!error_.ok() && !IsStreamError(error_));",
          "252:   grpc_error_handle TakeError() {",
          "253:     grpc_error_handle out = error_;",
          "254:     error_ = absl::OkStatus();",
          "255:     return out;",
          "256:   }",
          "",
          "[Added Lines]",
          "215:     return min_progress_size_ != 0 || error_.connection_error();",
          "219:   size_t min_progress_size() const { return min_progress_size_; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "270:   }",
          "277:     SetError(std::move(error));",
          "278:     begin_ = end_;",
          "279:   }",
          "285:   }",
          "291:   const uint8_t* frontier() const { return frontier_; }",
          "",
          "[Removed Lines]",
          "264:   GPR_ATTRIBUTE_NOINLINE void SetErrorAndContinueParsing(",
          "265:       grpc_error_handle error) {",
          "266:     GPR_ASSERT(!error.ok());",
          "269:     SetError(EnsureStreamError(std::move(error)));",
          "275:   GPR_ATTRIBUTE_NOINLINE void SetErrorAndStopParsing(grpc_error_handle error) {",
          "276:     GPR_ASSERT(!error.ok());",
          "282:   void UnexpectedEOF() {",
          "283:     if (!error_.ok() && !IsStreamError(error_)) return;",
          "284:     eof_error_ = true;",
          "288:   void UpdateFrontier() { frontier_ = begin_; }",
          "",
          "[Added Lines]",
          "227:   void SetErrorAndContinueParsing(HpackParseResult error) {",
          "228:     GPR_DEBUG_ASSERT(error.stream_error());",
          "229:     SetError(std::move(error));",
          "235:   void SetErrorAndStopParsing(HpackParseResult error) {",
          "236:     GPR_DEBUG_ASSERT(error.connection_error());",
          "244:   void UnexpectedEOF(size_t min_progress_size) {",
          "245:     GPR_ASSERT(min_progress_size > 0);",
          "246:     if (min_progress_size_ != 0 || error_.connection_error()) {",
          "247:       GPR_DEBUG_ASSERT(eof_error());",
          "248:       return;",
          "249:     }",
          "252:     min_progress_size_ = min_progress_size + (begin_ - frontier_);",
          "253:     GPR_DEBUG_ASSERT(eof_error());",
          "257:   void UpdateFrontier() {",
          "258:     GPR_DEBUG_ASSERT(skip_bytes_ == 0);",
          "259:     frontier_ = begin_;",
          "260:   }",
          "262:   void UpdateFrontierAndSkipBytes(size_t skip_bytes) {",
          "263:     UpdateFrontier();",
          "264:     size_t remaining = end_ - begin_;",
          "265:     if (skip_bytes >= remaining) {",
          "269:       skip_bytes_ = skip_bytes - remaining;",
          "270:       frontier_ = end_;",
          "271:     } else {",
          "273:       frontier_ += skip_bytes_;",
          "274:     }",
          "275:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295:   absl::optional<uint32_t> ParseVarintOutOfRange(uint32_t value,",
          "296:                                                  uint8_t last_byte) {",
          "301:     return absl::optional<uint32_t>();",
          "302:   }",
          "310:         error_ = std::move(error);  // connection errors dominate",
          "311:       }",
          "312:       return;",
          "",
          "[Removed Lines]",
          "297:     SetErrorAndStopParsing(absl::InternalError(absl::StrFormat(",
          "298:         \"integer overflow in hpack integer decoding: have 0x%08x, \"",
          "299:         \"got byte 0x%02x on byte 5\",",
          "300:         value, last_byte)));",
          "307:   void SetError(grpc_error_handle error) {",
          "308:     if (!error_.ok() || eof_error_) {",
          "309:       if (!IsStreamError(error) && IsStreamError(error_)) {",
          "",
          "[Added Lines]",
          "284:     SetErrorAndStopParsing(",
          "285:         HpackParseResult::VarintOutOfRangeError(value, last_byte));",
          "286:     return absl::optional<uint32_t>();",
          "287:   }",
          "290:   absl::optional<uint32_t> ParseVarintMaliciousEncoding() {",
          "291:     SetErrorAndStopParsing(HpackParseResult::MaliciousVarintEncodingError());",
          "298:   void SetError(HpackParseResult error) {",
          "299:     if (!error_.ok() || min_progress_size_ > 0) {",
          "300:       if (error.connection_error() && !error_.connection_error()) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:   const uint8_t* frontier_;",
          "329: };",
          "359:   }",
          "376:   }",
          "407:   }",
          "421:     }",
          "428:       uint32_t bits = kBase64InverseTable.table[*cur];",
          "429:       if (bits > 63) return {};",
          "430:       uint32_t buffer = bits << 18;",
          "433:       bits = kBase64InverseTable.table[*cur];",
          "434:       if (bits > 63) return {};",
          "435:       buffer |= bits << 12;",
          "438:       bits = kBase64InverseTable.table[*cur];",
          "439:       if (bits > 63) return {};",
          "440:       buffer |= bits << 6;",
          "446:       ++cur;",
          "451:     }",
          "496:   }",
          "528: }",
          "531:   absl::optional<std::vector<uint8_t>> result;",
          "532:   if (auto* p = absl::get_if<Slice>(&s.value_)) {",
          "533:     result = Unbase64Loop(p->begin(), p->end());",
          "",
          "[Removed Lines]",
          "326:   grpc_error_handle error_;",
          "328:   bool eof_error_ = false;",
          "333: class HPackParser::String {",
          "334:  public:",
          "336:   struct ParseResult;",
          "338:   enum class ParseStatus {",
          "340:     kOk,",
          "342:     kEof,",
          "344:     kParseHuffFailed,",
          "346:     kUnbase64Failed,",
          "347:   };",
          "349:   String() : value_(absl::Span<const uint8_t>()) {}",
          "350:   String(const String&) = delete;",
          "351:   String& operator=(const String&) = delete;",
          "352:   String(String&& other) noexcept : value_(std::move(other.value_)) {",
          "353:     other.value_ = absl::Span<const uint8_t>();",
          "354:   }",
          "355:   String& operator=(String&& other) noexcept {",
          "356:     value_ = std::move(other.value_);",
          "357:     other.value_ = absl::Span<const uint8_t>();",
          "358:     return *this;",
          "362:   Slice Take();",
          "365:   absl::string_view string_view() const {",
          "366:     if (auto* p = absl::get_if<Slice>(&value_)) {",
          "367:       return p->as_string_view();",
          "368:     } else if (auto* p = absl::get_if<absl::Span<const uint8_t>>(&value_)) {",
          "369:       return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "370:                                p->size());",
          "371:     } else if (auto* p = absl::get_if<std::vector<uint8_t>>(&value_)) {",
          "372:       return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "373:                                p->size());",
          "374:     }",
          "375:     GPR_UNREACHABLE_CODE(return absl::string_view());",
          "379:   static ParseResult Parse(Input* input);",
          "382:   static ParseResult ParseBinary(Input* input);",
          "384:  private:",
          "385:   void AppendBytes(const uint8_t* data, size_t length);",
          "386:   explicit String(std::vector<uint8_t> v) : value_(std::move(v)) {}",
          "387:   explicit String(absl::Span<const uint8_t> v) : value_(v) {}",
          "388:   String(grpc_slice_refcount* r, const uint8_t* begin, const uint8_t* end)",
          "389:       : value_(Slice::FromRefcountAndBytes(r, begin, end)) {}",
          "393:   template <typename Out>",
          "394:   static ParseStatus ParseHuff(Input* input, uint32_t length, Out output) {",
          "396:     if (input->remaining() < length) {",
          "397:       input->UnexpectedEOF();",
          "398:       GPR_DEBUG_ASSERT(input->eof_error());",
          "399:       return ParseStatus::kEof;",
          "400:     }",
          "402:     const uint8_t* p = input->cur_ptr();",
          "403:     input->Advance(length);",
          "404:     return HuffDecoder<Out>(output, p, p + length).Run()",
          "405:                ? ParseStatus::kOk",
          "406:                : ParseStatus::kParseHuffFailed;",
          "410:   static ParseResult ParseUncompressed(Input* input, uint32_t length,",
          "411:                                        uint32_t wire_size);",
          "414:   static ParseResult Unbase64(String s);",
          "417:   static absl::optional<std::vector<uint8_t>> Unbase64Loop(const uint8_t* cur,",
          "418:                                                            const uint8_t* end) {",
          "419:     while (cur != end && end[-1] == '=') {",
          "420:       --end;",
          "423:     std::vector<uint8_t> out;",
          "424:     out.reserve(3 * (end - cur) / 4 + 3);",
          "427:     while (end - cur >= 4) {",
          "431:       ++cur;",
          "436:       ++cur;",
          "441:       ++cur;",
          "443:       bits = kBase64InverseTable.table[*cur];",
          "444:       if (bits > 63) return {};",
          "445:       buffer |= bits;",
          "448:       out.insert(out.end(), {static_cast<uint8_t>(buffer >> 16),",
          "449:                              static_cast<uint8_t>(buffer >> 8),",
          "450:                              static_cast<uint8_t>(buffer)});",
          "453:     switch (end - cur) {",
          "454:       case 0:",
          "455:         return out;",
          "456:       case 1:",
          "457:         return {};",
          "458:       case 2: {",
          "459:         uint32_t bits = kBase64InverseTable.table[*cur];",
          "460:         if (bits > 63) return {};",
          "461:         uint32_t buffer = bits << 18;",
          "463:         ++cur;",
          "464:         bits = kBase64InverseTable.table[*cur];",
          "465:         if (bits > 63) return {};",
          "466:         buffer |= bits << 12;",
          "468:         if (buffer & 0xffff) return {};",
          "469:         out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "470:         return out;",
          "471:       }",
          "472:       case 3: {",
          "473:         uint32_t bits = kBase64InverseTable.table[*cur];",
          "474:         if (bits > 63) return {};",
          "475:         uint32_t buffer = bits << 18;",
          "477:         ++cur;",
          "478:         bits = kBase64InverseTable.table[*cur];",
          "479:         if (bits > 63) return {};",
          "480:         buffer |= bits << 12;",
          "482:         ++cur;",
          "483:         bits = kBase64InverseTable.table[*cur];",
          "484:         if (bits > 63) return {};",
          "485:         buffer |= bits << 6;",
          "487:         ++cur;",
          "488:         if (buffer & 0xff) return {};",
          "489:         out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "490:         out.push_back(static_cast<uint8_t>(buffer >> 8));",
          "491:         return out;",
          "492:       }",
          "493:     }",
          "495:     GPR_UNREACHABLE_CODE(return out;);",
          "498:   absl::variant<Slice, absl::Span<const uint8_t>, std::vector<uint8_t>> value_;",
          "499: };",
          "501: struct HPackParser::String::ParseResult {",
          "502:   ParseResult() = delete;",
          "503:   ParseResult(ParseStatus status, size_t wire_size, String value)",
          "504:       : status(status), wire_size(wire_size), value(std::move(value)) {}",
          "505:   ParseStatus status;",
          "506:   size_t wire_size;",
          "507:   String value;",
          "508: };",
          "510: HPackParser::String::ParseResult HPackParser::String::ParseUncompressed(",
          "511:     Input* input, uint32_t length, uint32_t wire_size) {",
          "513:   if (input->remaining() < length) {",
          "514:     input->UnexpectedEOF();",
          "515:     GPR_DEBUG_ASSERT(input->eof_error());",
          "516:     return ParseResult{ParseStatus::kEof, wire_size, String{}};",
          "517:   }",
          "518:   auto* refcount = input->slice_refcount();",
          "519:   auto* p = input->cur_ptr();",
          "520:   input->Advance(length);",
          "521:   if (refcount != nullptr) {",
          "522:     return ParseResult{ParseStatus::kOk, wire_size,",
          "523:                        String(refcount, p, p + length)};",
          "524:   } else {",
          "525:     return ParseResult{ParseStatus::kOk, wire_size,",
          "526:                        String(absl::Span<const uint8_t>(p, length))};",
          "527:   }",
          "530: HPackParser::String::ParseResult HPackParser::String::Unbase64(String s) {",
          "",
          "[Added Lines]",
          "317:   HpackParseResult& error_;",
          "320:   size_t min_progress_size_ = 0;",
          "324:   size_t skip_bytes_ = 0;",
          "327: absl::string_view HPackParser::String::string_view() const {",
          "328:   if (auto* p = absl::get_if<Slice>(&value_)) {",
          "329:     return p->as_string_view();",
          "330:   } else if (auto* p = absl::get_if<absl::Span<const uint8_t>>(&value_)) {",
          "331:     return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "332:                              p->size());",
          "333:   } else if (auto* p = absl::get_if<std::vector<uint8_t>>(&value_)) {",
          "334:     return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "335:                              p->size());",
          "337:   GPR_UNREACHABLE_CODE(return absl::string_view());",
          "338: }",
          "340: template <typename Out>",
          "341: HpackParseStatus HPackParser::String::ParseHuff(Input* input, uint32_t length,",
          "342:                                                 Out output) {",
          "344:   if (input->remaining() < length) {",
          "345:     input->UnexpectedEOF(/*min_progress_size=*/length);",
          "346:     return HpackParseStatus::kEof;",
          "349:   const uint8_t* p = input->cur_ptr();",
          "350:   input->Advance(length);",
          "351:   return HuffDecoder<Out>(output, p, p + length).Run()",
          "352:              ? HpackParseStatus::kOk",
          "353:              : HpackParseStatus::kParseHuffFailed;",
          "354: }",
          "356: struct HPackParser::String::StringResult {",
          "357:   StringResult() = delete;",
          "358:   StringResult(HpackParseStatus status, size_t wire_size, String value)",
          "359:       : status(status), wire_size(wire_size), value(std::move(value)) {}",
          "360:   HpackParseStatus status;",
          "361:   size_t wire_size;",
          "362:   String value;",
          "363: };",
          "365: HPackParser::String::StringResult HPackParser::String::ParseUncompressed(",
          "366:     Input* input, uint32_t length, uint32_t wire_size) {",
          "368:   if (input->remaining() < length) {",
          "369:     input->UnexpectedEOF(/*min_progress_size=*/length);",
          "370:     GPR_DEBUG_ASSERT(input->eof_error());",
          "371:     return StringResult{HpackParseStatus::kEof, wire_size, String{}};",
          "372:   }",
          "373:   auto* refcount = input->slice_refcount();",
          "374:   auto* p = input->cur_ptr();",
          "375:   input->Advance(length);",
          "376:   if (refcount != nullptr) {",
          "377:     return StringResult{HpackParseStatus::kOk, wire_size,",
          "378:                         String(refcount, p, p + length)};",
          "379:   } else {",
          "380:     return StringResult{HpackParseStatus::kOk, wire_size,",
          "381:                         String(absl::Span<const uint8_t>(p, length))};",
          "382:   }",
          "383: }",
          "385: absl::optional<std::vector<uint8_t>> HPackParser::String::Unbase64Loop(",
          "386:     const uint8_t* cur, const uint8_t* end) {",
          "387:   while (cur != end && end[-1] == '=') {",
          "388:     --end;",
          "391:   std::vector<uint8_t> out;",
          "392:   out.reserve(3 * (end - cur) / 4 + 3);",
          "395:   while (end - cur >= 4) {",
          "396:     uint32_t bits = kBase64InverseTable.table[*cur];",
          "397:     if (bits > 63) return {};",
          "398:     uint32_t buffer = bits << 18;",
          "399:     ++cur;",
          "401:     bits = kBase64InverseTable.table[*cur];",
          "402:     if (bits > 63) return {};",
          "403:     buffer |= bits << 12;",
          "404:     ++cur;",
          "406:     bits = kBase64InverseTable.table[*cur];",
          "407:     if (bits > 63) return {};",
          "408:     buffer |= bits << 6;",
          "409:     ++cur;",
          "411:     bits = kBase64InverseTable.table[*cur];",
          "412:     if (bits > 63) return {};",
          "413:     buffer |= bits;",
          "414:     ++cur;",
          "416:     out.insert(out.end(), {static_cast<uint8_t>(buffer >> 16),",
          "417:                            static_cast<uint8_t>(buffer >> 8),",
          "418:                            static_cast<uint8_t>(buffer)});",
          "419:   }",
          "421:   switch (end - cur) {",
          "422:     case 0:",
          "423:       return out;",
          "424:     case 1:",
          "425:       return {};",
          "426:     case 2: {",
          "427:       uint32_t bits = kBase64InverseTable.table[*cur];",
          "428:       if (bits > 63) return {};",
          "429:       uint32_t buffer = bits << 18;",
          "431:       ++cur;",
          "432:       bits = kBase64InverseTable.table[*cur];",
          "433:       if (bits > 63) return {};",
          "434:       buffer |= bits << 12;",
          "436:       if (buffer & 0xffff) return {};",
          "437:       out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "438:       return out;",
          "440:     case 3: {",
          "445:       ++cur;",
          "450:       ++cur;",
          "456:       if (buffer & 0xff) return {};",
          "457:       out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "458:       out.push_back(static_cast<uint8_t>(buffer >> 8));",
          "459:       return out;",
          "463:   GPR_UNREACHABLE_CODE(return out;);",
          "466: HPackParser::String::StringResult HPackParser::String::Unbase64(String s) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "539:     result = Unbase64Loop(p->data(), p->data() + p->size());",
          "540:   }",
          "541:   if (!result.has_value()) {",
          "544:   }",
          "547: }",
          "557:     std::vector<uint8_t> output;",
          "560:     size_t wire_len = output.size();",
          "562:   }",
          "564: }",
          "576:       input->Advance(1);",
          "578:     }",
          "582:     return Unbase64(std::move(base64.value));",
          "583:   } else {",
          "",
          "[Removed Lines]",
          "542:     return ParseResult{ParseStatus::kUnbase64Failed, s.string_view().length(),",
          "543:                        String{}};",
          "545:   return ParseResult{ParseStatus::kOk, s.string_view().length(),",
          "546:                      String(std::move(*result))};",
          "549: HPackParser::String::ParseResult HPackParser::String::Parse(Input* input) {",
          "550:   auto pfx = input->ParseStringPrefix();",
          "551:   if (!pfx.has_value()) {",
          "552:     GPR_DEBUG_ASSERT(input->eof_error());",
          "553:     return ParseResult{ParseStatus::kEof, 0, String{}};",
          "554:   }",
          "555:   if (pfx->huff) {",
          "558:     ParseStatus sts = ParseHuff(input, pfx->length,",
          "559:                                 [&output](uint8_t c) { output.push_back(c); });",
          "561:     return ParseResult{sts, wire_len, String(std::move(output))};",
          "563:   return ParseUncompressed(input, pfx->length, pfx->length);",
          "566: HPackParser::String::ParseResult HPackParser::String::ParseBinary(",
          "567:     Input* input) {",
          "568:   auto pfx = input->ParseStringPrefix();",
          "569:   if (!pfx.has_value()) {",
          "570:     GPR_DEBUG_ASSERT(input->eof_error());",
          "571:     return ParseResult{ParseStatus::kEof, 0, String{}};",
          "572:   }",
          "573:   if (!pfx->huff) {",
          "574:     if (pfx->length > 0 && input->peek() == 0) {",
          "577:       return ParseUncompressed(input, pfx->length - 1, pfx->length);",
          "580:     auto base64 = ParseUncompressed(input, pfx->length, pfx->length);",
          "581:     if (base64.status != ParseStatus::kOk) return base64;",
          "",
          "[Added Lines]",
          "478:     return StringResult{HpackParseStatus::kUnbase64Failed,",
          "479:                         s.string_view().length(), String{}};",
          "481:   return StringResult{HpackParseStatus::kOk, s.string_view().length(),",
          "482:                       String(std::move(*result))};",
          "485: HPackParser::String::StringResult HPackParser::String::Parse(Input* input,",
          "486:                                                              bool is_huff,",
          "487:                                                              size_t length) {",
          "488:   if (is_huff) {",
          "491:     HpackParseStatus sts =",
          "492:         ParseHuff(input, length, [&output](uint8_t c) { output.push_back(c); });",
          "494:     return StringResult{sts, wire_len, String(std::move(output))};",
          "496:   return ParseUncompressed(input, length, length);",
          "499: HPackParser::String::StringResult HPackParser::String::ParseBinary(",
          "500:     Input* input, bool is_huff, size_t length) {",
          "501:   if (!is_huff) {",
          "502:     if (length > 0 && input->peek() == 0) {",
          "505:       return ParseUncompressed(input, length - 1, length);",
          "508:     auto base64 = ParseUncompressed(input, length, length);",
          "509:     if (base64.status != HpackParseStatus::kOk) return base64;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "588:     enum class State { kUnsure, kBinary, kBase64 };",
          "589:     State state = State::kUnsure;",
          "608:     }",
          "609:     switch (state) {",
          "610:       case State::kUnsure:",
          "614:       case State::kBinary:",
          "616:         {",
          "617:           size_t wire_len = decompressed.size();",
          "620:         }",
          "621:       case State::kBase64:",
          "",
          "[Removed Lines]",
          "590:     auto sts =",
          "591:         ParseHuff(input, pfx->length, [&state, &decompressed](uint8_t c) {",
          "592:           if (state == State::kUnsure) {",
          "594:             if (c == 0) {",
          "596:               state = State::kBinary;",
          "597:               return;",
          "598:             } else {",
          "600:               state = State::kBase64;",
          "601:             }",
          "602:           }",
          "604:           decompressed.push_back(c);",
          "605:         });",
          "606:     if (sts != ParseStatus::kOk) {",
          "607:       return ParseResult{sts, 0, String{}};",
          "612:         return ParseResult{ParseStatus::kOk, 0,",
          "613:                            String(absl::Span<const uint8_t>())};",
          "618:           return ParseResult{ParseStatus::kOk, wire_len,",
          "619:                              String(std::move(decompressed))};",
          "",
          "[Added Lines]",
          "518:     auto sts = ParseHuff(input, length, [&state, &decompressed](uint8_t c) {",
          "519:       if (state == State::kUnsure) {",
          "521:         if (c == 0) {",
          "523:           state = State::kBinary;",
          "524:           return;",
          "525:         } else {",
          "527:           state = State::kBase64;",
          "528:         }",
          "529:       }",
          "531:       decompressed.push_back(c);",
          "532:     });",
          "533:     if (sts != HpackParseStatus::kOk) {",
          "534:       return StringResult{sts, 0, String{}};",
          "539:         return StringResult{HpackParseStatus::kOk, 0,",
          "540:                             String(absl::Span<const uint8_t>())};",
          "545:           return StringResult{HpackParseStatus::kOk, wire_len,",
          "546:                               String(std::move(decompressed))};",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "630: class HPackParser::Parser {",
          "631:  public:",
          "635:       : input_(input),",
          "636:         metadata_buffer_(metadata_buffer),",
          "641:         log_info_(log_info) {}",
          "648:     }",
          "651:   }",
          "654:     auto cur = *input_->Next();",
          "655:     switch (cur >> 4) {",
          "",
          "[Removed Lines]",
          "632:   Parser(Input* input, grpc_metadata_batch* metadata_buffer, HPackTable* table,",
          "633:          uint8_t* dynamic_table_updates_allowed, uint32_t* frame_length,",
          "634:          RandomEarlyDetection* metadata_early_detection, LogInfo log_info)",
          "637:         table_(table),",
          "638:         dynamic_table_updates_allowed_(dynamic_table_updates_allowed),",
          "639:         frame_length_(frame_length),",
          "640:         metadata_early_detection_(metadata_early_detection),",
          "644:   bool SkipPriority() {",
          "645:     if (input_->remaining() < 5) {",
          "646:       input_->UnexpectedEOF();",
          "647:       return false;",
          "649:     input_->Advance(5);",
          "650:     return true;",
          "653:   bool Parse() {",
          "",
          "[Added Lines]",
          "559:   Parser(Input* input, grpc_metadata_batch*& metadata_buffer,",
          "560:          InterSliceState& state, LogInfo log_info)",
          "563:         state_(state),",
          "566:   bool Parse() {",
          "567:     switch (state_.parse_state) {",
          "568:       case ParseState::kTop:",
          "569:         return ParseTop();",
          "570:       case ParseState::kParsingKeyLength:",
          "571:         return ParseKeyLength();",
          "572:       case ParseState::kParsingKeyBody:",
          "573:         return ParseKeyBody();",
          "574:       case ParseState::kSkippingKeyBody:",
          "575:         return SkipKeyBody();",
          "576:       case ParseState::kParsingValueLength:",
          "577:         return ParseValueLength();",
          "578:       case ParseState::kParsingValueBody:",
          "579:         return ParseValueBody();",
          "580:       case ParseState::kSkippingValueLength:",
          "581:         return SkipValueLength();",
          "582:       case ParseState::kSkippingValueBody:",
          "583:         return SkipValueBody();",
          "585:     GPR_UNREACHABLE_CODE(return false);",
          "588:  private:",
          "589:   bool ParseTop() {",
          "590:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "663:       case 1:",
          "664:         switch (cur & 0xf) {",
          "665:           case 0:  // literal key",
          "667:           case 0xf:  // varint encoded key index",
          "669:           default:  // inline encoded key index",
          "671:         }",
          "",
          "[Removed Lines]",
          "666:             return FinishHeaderOmitFromTable(ParseLiteralKey());",
          "668:             return FinishHeaderOmitFromTable(ParseVarIdxKey(0xf));",
          "670:             return FinishHeaderOmitFromTable(ParseIdxKey(cur & 0xf));",
          "",
          "[Added Lines]",
          "603:             return StartParseLiteralKey(false);",
          "605:             return StartVarIdxKey(0xf, false);",
          "607:             return StartIdxKey(cur & 0xf, false);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "694:       case 4:",
          "695:         if (cur == 0x40) {",
          "698:         }",
          "699:         ABSL_FALLTHROUGH_INTENDED;",
          "700:       case 5:",
          "701:       case 6:",
          "704:       case 7:",
          "705:         if (cur == 0x7f) {",
          "708:         } else {",
          "711:         }",
          "",
          "[Removed Lines]",
          "697:           return FinishHeaderAndAddToTable(ParseLiteralKey());",
          "703:         return FinishHeaderAndAddToTable(ParseIdxKey(cur & 0x3f));",
          "707:           return FinishHeaderAndAddToTable(ParseVarIdxKey(0x3f));",
          "710:           return FinishHeaderAndAddToTable(ParseIdxKey(cur & 0x3f));",
          "",
          "[Added Lines]",
          "634:           return StartParseLiteralKey(true);",
          "640:         return StartIdxKey(cur & 0x3f, true);",
          "644:           return StartVarIdxKey(0x3f, true);",
          "647:           return StartIdxKey(cur & 0x3f, true);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "719:         if (cur == 0x80) {",
          "721:           input_->SetErrorAndStopParsing(",
          "723:           return false;",
          "724:         }",
          "725:         ABSL_FALLTHROUGH_INTENDED;",
          "",
          "[Removed Lines]",
          "722:               absl::InternalError(\"Illegal hpack op code\"));",
          "",
          "[Added Lines]",
          "659:               HpackParseResult::IllegalHpackOpCode());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "743:     GPR_UNREACHABLE_CODE(abort());",
          "744:   }",
          "747:   void GPR_ATTRIBUTE_NOINLINE LogHeader(const HPackTable::Memento& memento) {",
          "748:     const char* type;",
          "749:     switch (log_info_.type) {",
          "",
          "[Removed Lines]",
          "746:  private:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "757:         type = \"???\";",
          "758:         break;",
          "759:     }",
          "768:   }",
          "770:   void EmitHeader(const HPackTable::Memento& md) {",
          "778:     if (!md.parse_status.ok()) {",
          "781:     }",
          "782:     if (GPR_LIKELY(metadata_buffer_ != nullptr)) {",
          "783:       metadata_buffer_->Set(md.md);",
          "784:     }",
          "785:   }",
          "791:     if (GRPC_TRACE_FLAG_ENABLED(grpc_trace_chttp2_hpack_parser)) {",
          "793:     }",
          "800:       return false;",
          "801:     };",
          "802:     return true;",
          "",
          "[Removed Lines]",
          "760:     gpr_log(GPR_DEBUG, \"HTTP:%d:%s:%s: %s%s\", log_info_.stream_id, type,",
          "761:             log_info_.is_client ? \"CLI\" : \"SVR\",",
          "762:             memento.md.DebugString().c_str(),",
          "763:             memento.parse_status.ok()",
          "764:                 ? \"\"",
          "765:                 : absl::StrCat(",
          "766:                       \" (parse error: \", memento.parse_status.ToString(), \")\")",
          "767:                       .c_str());",
          "773:     if (!input_->has_error() &&",
          "774:         metadata_early_detection_->MustReject(*frame_length_)) {",
          "776:       HandleMetadataHardSizeLimitExceeded(md);",
          "777:     }",
          "780:       HandleMetadataParseError(md.parse_status);",
          "787:   bool FinishHeaderAndAddToTable(absl::optional<HPackTable::Memento> md) {",
          "789:     if (!md.has_value()) return false;",
          "792:       LogHeader(*md);",
          "795:     EmitHeader(*md);",
          "797:     grpc_error_handle err = table_->Add(std::move(*md));",
          "798:     if (GPR_UNLIKELY(!err.ok())) {",
          "799:       input_->SetErrorAndStopParsing(std::move(err));",
          "",
          "[Added Lines]",
          "696:     gpr_log(",
          "697:         GPR_DEBUG, \"HTTP:%d:%s:%s: %s%s\", log_info_.stream_id, type,",
          "698:         log_info_.is_client ? \"CLI\" : \"SVR\", memento.md.DebugString().c_str(),",
          "699:         memento.parse_status.ok()",
          "700:             ? \"\"",
          "701:             : absl::StrCat(\" (parse error: \",",
          "702:                            memento.parse_status.Materialize().ToString(), \")\")",
          "703:                   .c_str());",
          "708:     state_.frame_length += md.md.transport_size();",
          "711:       input_->SetErrorAndContinueParsing(md.parse_status);",
          "716:     if (state_.metadata_early_detection.MustReject(state_.frame_length)) {",
          "718:       input_->SetErrorAndContinueParsing(",
          "719:           HpackParseResult::HardMetadataLimitExceededError(",
          "720:               std::exchange(metadata_buffer_, nullptr), state_.frame_length,",
          "721:               state_.metadata_early_detection.hard_limit()));",
          "722:     }",
          "725:   bool FinishHeaderAndAddToTable(HPackTable::Memento md) {",
          "728:       LogHeader(md);",
          "731:     EmitHeader(md);",
          "733:     if (GPR_UNLIKELY(!state_.hpack_table.Add(std::move(md)))) {",
          "734:       input_->SetErrorAndStopParsing(",
          "735:           HpackParseResult::AddBeforeTableSizeUpdated(",
          "736:               state_.hpack_table.current_table_bytes(),",
          "737:               state_.hpack_table.max_bytes()));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "817:     EmitHeader(md);",
          "818:   }",
          "838:     }",
          "880:     switch (key.status) {",
          "882:         break;",
          "890:         GPR_DEBUG_ASSERT(input_->eof_error());",
          "892:     }",
          "904:   }",
          "911:     }",
          "913:   }",
          "921:     }",
          "934:   }",
          "940:     } else {",
          "942:     }",
          "943:   }",
          "946:   bool FinishIndexed(absl::optional<uint32_t> index) {",
          "948:     if (!index.has_value()) return false;",
          "950:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "951:       InvalidHPackIndexError(*index);",
          "952:       return false;",
          "",
          "[Removed Lines]",
          "822:   class MementoBuilder {",
          "823:    public:",
          "824:     explicit MementoBuilder(Input* input, absl::string_view key_string,",
          "825:                             absl::Status status = absl::OkStatus())",
          "826:         : input_(input), key_string_(key_string), status_(std::move(status)) {}",
          "828:     auto ErrorHandler() {",
          "829:       return [this](absl::string_view error, const Slice&) {",
          "830:         auto message =",
          "831:             absl::StrCat(\"Error parsing '\", key_string_,",
          "832:                          \"' metadata: error=\", error, \" key=\", key_string_);",
          "833:         gpr_log(GPR_ERROR, \"%s\", message.c_str());",
          "834:         if (status_.ok()) {",
          "835:           status_ = absl::InternalError(message);",
          "836:         }",
          "837:       };",
          "840:     HPackTable::Memento Build(ParsedMetadata<grpc_metadata_batch> memento) {",
          "841:       return HPackTable::Memento{std::move(memento), std::move(status_)};",
          "842:     }",
          "847:     bool HandleParseResult(String::ParseStatus status) {",
          "848:       auto continuable = [this](absl::string_view error) {",
          "849:         auto this_error = absl::InternalError(absl::StrCat(",
          "850:             \"Error parsing '\", key_string_, \"' metadata: error=\", error));",
          "851:         if (status_.ok()) status_ = this_error;",
          "852:         input_->SetErrorAndContinueParsing(std::move(this_error));",
          "853:       };",
          "854:       switch (status) {",
          "855:         case String::ParseStatus::kOk:",
          "856:           return true;",
          "857:         case String::ParseStatus::kParseHuffFailed:",
          "858:           input_->SetErrorAndStopParsing(",
          "859:               absl::InternalError(\"Huffman decoding failed\"));",
          "860:           return false;",
          "861:         case String::ParseStatus::kUnbase64Failed:",
          "862:           continuable(\"illegal base64 encoding\");",
          "863:           return true;",
          "864:         case String::ParseStatus::kEof:",
          "865:           GPR_DEBUG_ASSERT(input_->eof_error());",
          "866:           return false;",
          "867:       }",
          "868:       GPR_UNREACHABLE_CODE(return false);",
          "869:     }",
          "871:    private:",
          "872:     Input* input_;",
          "873:     absl::string_view key_string_;",
          "874:     absl::Status status_;",
          "875:   };",
          "878:   absl::optional<HPackTable::Memento> ParseLiteralKey() {",
          "879:     auto key = String::Parse(input_);",
          "881:       case String::ParseStatus::kOk:",
          "883:       case String::ParseStatus::kParseHuffFailed:",
          "884:         input_->SetErrorAndStopParsing(",
          "885:             absl::InternalError(\"Huffman decoding failed\"));",
          "886:         return absl::nullopt;",
          "887:       case String::ParseStatus::kUnbase64Failed:",
          "888:         Crash(\"unreachable\");",
          "889:       case String::ParseStatus::kEof:",
          "891:         return absl::nullopt;",
          "893:     auto key_string = key.value.string_view();",
          "894:     auto value = ParseValueString(absl::EndsWith(key_string, \"-bin\"));",
          "895:     MementoBuilder builder(input_, key_string,",
          "896:                            EnsureStreamError(ValidateKey(key_string)));",
          "897:     if (!builder.HandleParseResult(value.status)) return absl::nullopt;",
          "898:     auto value_slice = value.value.Take();",
          "899:     const auto transport_size =",
          "900:         key_string.size() + value.wire_size + hpack_constants::kEntryOverhead;",
          "901:     return builder.Build(",
          "902:         grpc_metadata_batch::Parse(key_string, std::move(value_slice),",
          "903:                                    transport_size, builder.ErrorHandler()));",
          "906:   absl::Status ValidateKey(absl::string_view key) {",
          "907:     if (key == HttpSchemeMetadata::key() || key == HttpMethodMetadata::key() ||",
          "908:         key == HttpAuthorityMetadata::key() || key == HttpPathMetadata::key() ||",
          "909:         key == HttpStatusMetadata::key()) {",
          "910:       return absl::OkStatus();",
          "912:     return ValidateHeaderKeyIsLegal(key);",
          "916:   absl::optional<HPackTable::Memento> ParseIdxKey(uint32_t index) {",
          "917:     const auto* elem = table_->Lookup(index);",
          "918:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "919:       InvalidHPackIndexError(index);",
          "920:       return absl::optional<HPackTable::Memento>();",
          "922:     MementoBuilder builder(input_, elem->md.key(), elem->parse_status);",
          "923:     auto value = ParseValueString(elem->md.is_binary_header());",
          "924:     if (!builder.HandleParseResult(value.status)) return absl::nullopt;",
          "925:     return builder.Build(elem->md.WithNewValue(",
          "926:         value.value.Take(), value.wire_size, builder.ErrorHandler()));",
          "927:   };",
          "930:   absl::optional<HPackTable::Memento> ParseVarIdxKey(uint32_t offset) {",
          "931:     auto index = input_->ParseVarint(offset);",
          "932:     if (GPR_UNLIKELY(!index.has_value())) return absl::nullopt;",
          "933:     return ParseIdxKey(*index);",
          "937:   String::ParseResult ParseValueString(bool is_binary) {",
          "938:     if (is_binary) {",
          "939:       return String::ParseBinary(input_);",
          "941:       return String::Parse(input_);",
          "949:     const auto* elem = table_->Lookup(*index);",
          "",
          "[Added Lines]",
          "759:   bool StartIdxKey(uint32_t index, bool add_to_table) {",
          "760:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "761:     input_->UpdateFrontier();",
          "762:     const auto* elem = state_.hpack_table.Lookup(index);",
          "763:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "764:       InvalidHPackIndexError(index);",
          "765:       return false;",
          "767:     state_.parse_state = ParseState::kParsingValueLength;",
          "768:     state_.is_binary_header = elem->md.is_binary_header();",
          "769:     state_.key.emplace<const HPackTable::Memento*>(elem);",
          "770:     state_.add_to_table = add_to_table;",
          "771:     return ParseValueLength();",
          "772:   };",
          "775:   bool StartVarIdxKey(uint32_t offset, bool add_to_table) {",
          "776:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "777:     auto index = input_->ParseVarint(offset);",
          "778:     if (GPR_UNLIKELY(!index.has_value())) return false;",
          "779:     return StartIdxKey(*index, add_to_table);",
          "780:   }",
          "782:   bool StartParseLiteralKey(bool add_to_table) {",
          "783:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "784:     state_.add_to_table = add_to_table;",
          "785:     state_.parse_state = ParseState::kParsingKeyLength;",
          "786:     input_->UpdateFrontier();",
          "787:     return ParseKeyLength();",
          "788:   }",
          "790:   bool ShouldSkipParsingString(uint64_t string_length) const {",
          "812:     return string_length > state_.hpack_table.current_table_size() &&",
          "813:            state_.metadata_early_detection.MustReject(",
          "814:                string_length + hpack_constants::kEntryOverhead);",
          "815:   }",
          "817:   bool ParseKeyLength() {",
          "818:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingKeyLength);",
          "819:     auto pfx = input_->ParseStringPrefix();",
          "820:     if (!pfx.has_value()) return false;",
          "821:     state_.is_string_huff_compressed = pfx->huff;",
          "822:     state_.string_length = pfx->length;",
          "823:     input_->UpdateFrontier();",
          "824:     if (ShouldSkipParsingString(state_.string_length)) {",
          "825:       input_->SetErrorAndContinueParsing(",
          "826:           HpackParseResult::HardMetadataLimitExceededByKeyError(",
          "827:               state_.string_length,",
          "828:               state_.metadata_early_detection.hard_limit()));",
          "829:       metadata_buffer_ = nullptr;",
          "830:       state_.parse_state = ParseState::kSkippingKeyBody;",
          "831:       return SkipKeyBody();",
          "832:     } else {",
          "833:       state_.parse_state = ParseState::kParsingKeyBody;",
          "834:       return ParseKeyBody();",
          "835:     }",
          "836:   }",
          "838:   bool ParseKeyBody() {",
          "839:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingKeyBody);",
          "840:     auto key = String::Parse(input_, state_.is_string_huff_compressed,",
          "841:                              state_.string_length);",
          "843:       case HpackParseStatus::kOk:",
          "845:       case HpackParseStatus::kEof:",
          "847:         return false;",
          "848:       default:",
          "849:         input_->SetErrorAndStopParsing(",
          "850:             HpackParseResult::FromStatus(key.status));",
          "851:         return false;",
          "853:     input_->UpdateFrontier();",
          "854:     state_.parse_state = ParseState::kParsingValueLength;",
          "855:     state_.is_binary_header = absl::EndsWith(key.value.string_view(), \"-bin\");",
          "856:     state_.key.emplace<Slice>(key.value.Take());",
          "857:     return ParseValueLength();",
          "860:   bool SkipStringBody() {",
          "861:     auto remaining = input_->remaining();",
          "862:     if (remaining >= state_.string_length) {",
          "863:       input_->Advance(state_.string_length);",
          "864:       return true;",
          "865:     } else {",
          "866:       input_->Advance(remaining);",
          "867:       input_->UpdateFrontier();",
          "868:       state_.string_length -= remaining;",
          "879:       input_->UnexpectedEOF(",
          "881:       return false;",
          "885:   bool SkipKeyBody() {",
          "886:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingKeyBody);",
          "887:     if (!SkipStringBody()) return false;",
          "888:     input_->UpdateFrontier();",
          "889:     state_.parse_state = ParseState::kSkippingValueLength;",
          "890:     return SkipValueLength();",
          "891:   }",
          "893:   bool SkipValueLength() {",
          "894:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingValueLength);",
          "895:     auto pfx = input_->ParseStringPrefix();",
          "896:     if (!pfx.has_value()) return false;",
          "897:     state_.string_length = pfx->length;",
          "898:     input_->UpdateFrontier();",
          "899:     state_.parse_state = ParseState::kSkippingValueBody;",
          "900:     return SkipValueBody();",
          "901:   }",
          "903:   bool SkipValueBody() {",
          "904:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingValueBody);",
          "905:     if (!SkipStringBody()) return false;",
          "906:     input_->UpdateFrontier();",
          "907:     state_.parse_state = ParseState::kTop;",
          "908:     if (state_.add_to_table) {",
          "909:       state_.hpack_table.AddLargerThanCurrentTableSize();",
          "911:     return true;",
          "912:   }",
          "914:   bool ParseValueLength() {",
          "915:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingValueLength);",
          "916:     auto pfx = input_->ParseStringPrefix();",
          "917:     if (!pfx.has_value()) return false;",
          "918:     state_.is_string_huff_compressed = pfx->huff;",
          "919:     state_.string_length = pfx->length;",
          "920:     input_->UpdateFrontier();",
          "921:     if (ShouldSkipParsingString(state_.string_length)) {",
          "922:       input_->SetErrorAndContinueParsing(",
          "923:           HpackParseResult::HardMetadataLimitExceededByValueError(",
          "924:               Match(",
          "925:                   state_.key, [](const Slice& s) { return s.as_string_view(); },",
          "926:                   [](const HPackTable::Memento* m) { return m->md.key(); }),",
          "927:               state_.string_length,",
          "928:               state_.metadata_early_detection.hard_limit()));",
          "929:       metadata_buffer_ = nullptr;",
          "930:       state_.parse_state = ParseState::kSkippingValueBody;",
          "931:       return SkipValueBody();",
          "932:     } else {",
          "933:       state_.parse_state = ParseState::kParsingValueBody;",
          "934:       return ParseValueBody();",
          "935:     }",
          "938:   bool ParseValueBody() {",
          "939:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingValueBody);",
          "940:     auto value =",
          "941:         state_.is_binary_header",
          "942:             ? String::ParseBinary(input_, state_.is_string_huff_compressed,",
          "943:                                   state_.string_length)",
          "944:             : String::Parse(input_, state_.is_string_huff_compressed,",
          "945:                             state_.string_length);",
          "946:     HpackParseResult& status = state_.frame_error;",
          "947:     absl::string_view key_string;",
          "948:     if (auto* s = absl::get_if<Slice>(&state_.key)) {",
          "949:       key_string = s->as_string_view();",
          "950:       if (status.ok()) {",
          "951:         auto r = ValidateKey(key_string);",
          "952:         if (r != ValidateMetadataResult::kOk) {",
          "953:           input_->SetErrorAndContinueParsing(",
          "954:               HpackParseResult::InvalidMetadataError(r, key_string));",
          "955:         }",
          "956:       }",
          "958:       const auto* memento = absl::get<const HPackTable::Memento*>(state_.key);",
          "959:       key_string = memento->md.key();",
          "960:       if (status.ok() && !memento->parse_status.ok()) {",
          "961:         input_->SetErrorAndContinueParsing(memento->parse_status);",
          "962:       }",
          "963:     }",
          "964:     switch (value.status) {",
          "965:       case HpackParseStatus::kOk:",
          "966:         break;",
          "967:       case HpackParseStatus::kEof:",
          "968:         GPR_DEBUG_ASSERT(input_->eof_error());",
          "969:         return false;",
          "970:       default: {",
          "971:         auto result =",
          "972:             HpackParseResult::FromStatusWithKey(value.status, key_string);",
          "973:         if (result.stream_error()) {",
          "974:           input_->SetErrorAndContinueParsing(std::move(result));",
          "975:           break;",
          "976:         } else {",
          "977:           input_->SetErrorAndStopParsing(std::move(result));",
          "978:           return false;",
          "979:         }",
          "980:       }",
          "981:     }",
          "982:     auto value_slice = value.value.Take();",
          "983:     const auto transport_size =",
          "984:         key_string.size() + value.wire_size + hpack_constants::kEntryOverhead;",
          "985:     auto md = grpc_metadata_batch::Parse(",
          "986:         key_string, std::move(value_slice), transport_size,",
          "987:         [key_string, &status, this](absl::string_view message, const Slice&) {",
          "988:           if (!status.ok()) return;",
          "989:           input_->SetErrorAndContinueParsing(",
          "990:               HpackParseResult::MetadataParseError(key_string));",
          "991:           gpr_log(GPR_ERROR, \"Error parsing '%s' metadata: %s\",",
          "992:                   std::string(key_string).c_str(),",
          "993:                   std::string(message).c_str());",
          "994:         });",
          "995:     HPackTable::Memento memento{std::move(md),",
          "996:                                 status.PersistentStreamErrorOrOk()};",
          "997:     input_->UpdateFrontier();",
          "998:     state_.parse_state = ParseState::kTop;",
          "999:     if (state_.add_to_table) {",
          "1000:       return FinishHeaderAndAddToTable(std::move(memento));",
          "1001:     } else {",
          "1002:       FinishHeaderOmitFromTable(memento);",
          "1003:       return true;",
          "1007:   ValidateMetadataResult ValidateKey(absl::string_view key) {",
          "1008:     if (key == HttpSchemeMetadata::key() || key == HttpMethodMetadata::key() ||",
          "1009:         key == HttpAuthorityMetadata::key() || key == HttpPathMetadata::key() ||",
          "1010:         key == HttpStatusMetadata::key()) {",
          "1011:       return ValidateMetadataResult::kOk;",
          "1012:     }",
          "1013:     return ValidateHeaderKeyIsLegal(key);",
          "1014:   }",
          "1018:     state_.dynamic_table_updates_allowed = 0;",
          "1020:     const auto* elem = state_.hpack_table.Lookup(*index);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "959:   bool FinishMaxTableSize(absl::optional<uint32_t> size) {",
          "960:     if (!size.has_value()) return false;",
          "964:       return false;",
          "965:     }",
          "970:       return false;",
          "971:     }",
          "972:     return true;",
          "",
          "[Removed Lines]",
          "961:     if (*dynamic_table_updates_allowed_ == 0) {",
          "962:       input_->SetErrorAndStopParsing(absl::InternalError(",
          "963:           \"More than two max table size changes in a single frame\"));",
          "966:     (*dynamic_table_updates_allowed_)--;",
          "967:     grpc_error_handle err = table_->SetCurrentTableSize(*size);",
          "968:     if (!err.ok()) {",
          "969:       input_->SetErrorAndStopParsing(std::move(err));",
          "",
          "[Added Lines]",
          "1032:     if (state_.dynamic_table_updates_allowed == 0) {",
          "1033:       input_->SetErrorAndStopParsing(",
          "1034:           HpackParseResult::TooManyDynamicTableSizeChangesError());",
          "1037:     state_.dynamic_table_updates_allowed--;",
          "1038:     if (!state_.hpack_table.SetCurrentTableSize(*size)) {",
          "1039:       input_->SetErrorAndStopParsing(",
          "1040:           HpackParseResult::IllegalTableSizeChangeError(",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "977:   void InvalidHPackIndexError(uint32_t index) {",
          "1014:   }",
          "1016:   Input* const input_;",
          "1023:   const LogInfo log_info_;",
          "1024: };",
          "",
          "[Removed Lines]",
          "978:     input_->SetErrorAndStopParsing(grpc_error_set_int(",
          "979:         grpc_error_set_int(absl::InternalError(\"Invalid HPACK index received\"),",
          "980:                            StatusIntProperty::kIndex,",
          "981:                            static_cast<intptr_t>(index)),",
          "982:         StatusIntProperty::kSize,",
          "983:         static_cast<intptr_t>(this->table_->num_entries())));",
          "984:   }",
          "986:   GPR_ATTRIBUTE_NOINLINE",
          "987:   void HandleMetadataParseError(const absl::Status& status) {",
          "988:     if (metadata_buffer_ != nullptr) {",
          "989:       metadata_buffer_->Clear();",
          "990:       metadata_buffer_ = nullptr;",
          "991:     }",
          "994:     input_->SetErrorAndContinueParsing(status);",
          "995:   }",
          "997:   GPR_ATTRIBUTE_NOINLINE",
          "998:   void HandleMetadataHardSizeLimitExceeded(const HPackTable::Memento& md) {",
          "1001:     std::string summary;",
          "1002:     std::string error_message;",
          "1003:     if (metadata_buffer_ != nullptr) {",
          "1004:       MetadataSizeLimitExceededEncoder encoder(summary);",
          "1005:       metadata_buffer_->Encode(&encoder);",
          "1006:     }",
          "1007:     summary = absl::StrCat(\"; adding \", md.md.key(), \" (length \",",
          "1008:                            md.md.transport_size(), \"B)\",",
          "1009:                            summary.empty() ? \"\" : \" to \", summary);",
          "1010:     error_message = absl::StrCat(",
          "1011:         \"received metadata size exceeds hard limit (\", *frame_length_, \" vs. \",",
          "1012:         metadata_early_detection_->hard_limit(), \")\", summary);",
          "1013:     HandleMetadataParseError(absl::ResourceExhaustedError(error_message));",
          "1017:   grpc_metadata_batch* metadata_buffer_;",
          "1018:   HPackTable* const table_;",
          "1019:   uint8_t* const dynamic_table_updates_allowed_;",
          "1020:   uint32_t* const frame_length_;",
          "1022:   RandomEarlyDetection* metadata_early_detection_;",
          "",
          "[Added Lines]",
          "1050:     input_->SetErrorAndStopParsing(",
          "1051:         HpackParseResult::InvalidHpackIndexError(index));",
          "1055:   grpc_metadata_batch*& metadata_buffer_;",
          "1056:   InterSliceState& state_;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1051:   }",
          "1052:   boundary_ = boundary;",
          "1053:   priority_ = priority;",
          "1059:   log_info_ = log_info;",
          "",
          "[Removed Lines]",
          "1054:   dynamic_table_updates_allowed_ = 2;",
          "1055:   frame_length_ = 0;",
          "1056:   metadata_early_detection_ = RandomEarlyDetection(",
          "",
          "[Added Lines]",
          "1088:   state_.dynamic_table_updates_allowed = 2;",
          "1089:   state_.metadata_early_detection.SetLimits(",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1062: grpc_error_handle HPackParser::Parse(const grpc_slice& slice, bool is_last) {",
          "1063:   if (GPR_UNLIKELY(!unparsed_bytes_.empty())) {",
          "1064:     std::vector<uint8_t> buffer = std::move(unparsed_bytes_);",
          "1069:   }",
          "1070:   return ParseInput(Input(slice.refcount, GRPC_SLICE_START_PTR(slice),",
          "1072:                     is_last);",
          "1073: }",
          "1075: grpc_error_handle HPackParser::ParseInput(Input input, bool is_last) {",
          "1076:   ParseInputInner(&input);",
          "1079:       HandleMetadataSoftSizeLimitExceeded(&input);",
          "1080:     }",
          "1089:     }",
          "1092:   }",
          "1094: }",
          "1096: void HPackParser::ParseInputInner(Input* input) {",
          "",
          "[Removed Lines]",
          "1065:     buffer.insert(buffer.end(), GRPC_SLICE_START_PTR(slice),",
          "1066:                   GRPC_SLICE_END_PTR(slice));",
          "1067:     return ParseInput(",
          "1068:         Input(nullptr, buffer.data(), buffer.data() + buffer.size()), is_last);",
          "1071:                           GRPC_SLICE_END_PTR(slice)),",
          "1077:   if (is_last) {",
          "1078:     if (metadata_early_detection_.Reject(frame_length_)) {",
          "1081:     global_stats().IncrementHttp2MetadataSize(frame_length_);",
          "1082:   }",
          "1083:   if (input.eof_error()) {",
          "1084:     if (GPR_UNLIKELY(is_last && is_boundary())) {",
          "1085:       auto err = input.TakeError();",
          "1086:       if (!err.ok() && !IsStreamError(err)) return err;",
          "1087:       return absl::InternalError(",
          "1088:           \"Incomplete header at the end of a header/continuation sequence\");",
          "1090:     unparsed_bytes_ = std::vector<uint8_t>(input.frontier(), input.end_ptr());",
          "1091:     return input.TakeError();",
          "1093:   return input.TakeError();",
          "",
          "[Added Lines]",
          "1097:     unparsed_bytes_.insert(unparsed_bytes_.end(), GRPC_SLICE_START_PTR(slice),",
          "1098:                            GRPC_SLICE_END_PTR(slice));",
          "1099:     if (!(is_last && is_boundary()) &&",
          "1100:         unparsed_bytes_.size() < min_progress_size_) {",
          "1102:       return absl::OkStatus();",
          "1103:     }",
          "1105:     return ParseInput(Input(nullptr, buffer.data(),",
          "1106:                             buffer.data() + buffer.size(), state_.frame_error),",
          "1107:                       is_last);",
          "1110:                           GRPC_SLICE_END_PTR(slice), state_.frame_error),",
          "1116:   if (is_last && is_boundary()) {",
          "1117:     if (state_.metadata_early_detection.Reject(state_.frame_length)) {",
          "1120:     global_stats().IncrementHttp2MetadataSize(state_.frame_length);",
          "1121:     if (!state_.frame_error.connection_error() &&",
          "1122:         (input.eof_error() || state_.parse_state != ParseState::kTop)) {",
          "1123:       state_.frame_error = HpackParseResult::IncompleteHeaderAtBoundaryError();",
          "1124:     }",
          "1125:     state_.frame_length = 0;",
          "1126:     return std::exchange(state_.frame_error, HpackParseResult()).Materialize();",
          "1127:   } else {",
          "1128:     if (input.eof_error() && !state_.frame_error.connection_error()) {",
          "1129:       unparsed_bytes_ = std::vector<uint8_t>(input.frontier(), input.end_ptr());",
          "1130:       min_progress_size_ = input.min_progress_size();",
          "1132:     return state_.frame_error.Materialize();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1099:       break;",
          "1100:     case Priority::Included: {",
          "1101:       if (input->remaining() < 5) {",
          "1103:         return;",
          "1104:       }",
          "1105:       input->Advance(5);",
          "",
          "[Removed Lines]",
          "1102:         input->UnexpectedEOF();",
          "",
          "[Added Lines]",
          "1142:         input->UnexpectedEOF(/*min_progress_size=*/5);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1108:     }",
          "1109:   }",
          "1110:   while (!input->end_of_stream()) {",
          "1115:       return;",
          "1116:     }",
          "1117:     input->UpdateFrontier();",
          "",
          "[Removed Lines]",
          "1111:     if (GPR_UNLIKELY(!Parser(input, metadata_buffer_, &table_,",
          "1112:                              &dynamic_table_updates_allowed_, &frame_length_,",
          "1113:                              &metadata_early_detection_, log_info_)",
          "1114:                           .Parse())) {",
          "",
          "[Added Lines]",
          "1151:     if (GPR_UNLIKELY(",
          "1152:             !Parser(input, metadata_buffer_, state_, log_info_).Parse())) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1121: void HPackParser::FinishFrame() { metadata_buffer_ = nullptr; }",
          "1123: void HPackParser::HandleMetadataSoftSizeLimitExceeded(Input* input) {",
          "1140:   input->SetErrorAndContinueParsing(",
          "1142: }",
          "1144: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "1126:   std::string summary;",
          "1127:   std::string error_message;",
          "1128:   if (metadata_buffer_ != nullptr) {",
          "1129:     MetadataSizeLimitExceededEncoder encoder(summary);",
          "1130:     metadata_buffer_->Encode(&encoder);",
          "1131:   }",
          "1132:   error_message = absl::StrCat(",
          "1133:       \"received metadata size exceeds soft limit (\", frame_length_, \" vs. \",",
          "1134:       metadata_early_detection_.soft_limit(),",
          "1135:       \"), rejecting requests with some random probability\", summary);",
          "1136:   if (metadata_buffer_ != nullptr) {",
          "1137:     metadata_buffer_->Clear();",
          "1138:     metadata_buffer_ = nullptr;",
          "1139:   }",
          "1141:       absl::ResourceExhaustedError(error_message));",
          "",
          "[Added Lines]",
          "1163:       HpackParseResult::SoftMetadataLimitExceededError(",
          "1164:           std::exchange(metadata_buffer_, nullptr), state_.frame_length,",
          "1165:           state_.metadata_early_detection.soft_limit()));",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.h -> src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <grpc/support/port_platform.h>",
          "24: #include <stdint.h>",
          "26: #include <vector>",
          "28: #include <grpc/slice.h>",
          "30: #include \"src/core/ext/transport/chttp2/transport/frame.h\"",
          "31: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "32: #include \"src/core/lib/backoff/random_early_detection.h\"",
          "33: #include \"src/core/lib/iomgr/error.h\"",
          "34: #include \"src/core/lib/transport/metadata_batch.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <stddef.h>",
          "27: #include <string>",
          "28: #include <utility>",
          "31: #include \"absl/strings/str_cat.h\"",
          "32: #include \"absl/strings/string_view.h\"",
          "33: #include \"absl/types/optional.h\"",
          "34: #include \"absl/types/span.h\"",
          "35: #include \"absl/types/variant.h\"",
          "40: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "44: #include \"src/core/lib/slice/slice.h\"",
          "45: #include \"src/core/lib/slice/slice_refcount.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   void FinishFrame();",
          "97:   bool is_boundary() const { return boundary_ != Boundary::None; }",
          "99:   bool is_eof() const { return boundary_ == Boundary::EndOfStream; }",
          "101:  private:",
          "103:   class Parser;",
          "104:   class Input;",
          "107:   grpc_error_handle ParseInput(Input input, bool is_last);",
          "108:   void ParseInputInner(Input* input);",
          "",
          "[Removed Lines]",
          "95:   HPackTable* hpack_table() { return &table_; }",
          "105:   class String;",
          "",
          "[Added Lines]",
          "107:   HPackTable* hpack_table() { return &state_.hpack_table; }",
          "114:   size_t buffered_bytes() const { return unparsed_bytes_.size(); }",
          "123:   class String {",
          "124:    public:",
          "126:     struct StringResult;",
          "128:     String() : value_(absl::Span<const uint8_t>()) {}",
          "129:     String(const String&) = delete;",
          "130:     String& operator=(const String&) = delete;",
          "131:     String(String&& other) noexcept : value_(std::move(other.value_)) {",
          "132:       other.value_ = absl::Span<const uint8_t>();",
          "133:     }",
          "134:     String& operator=(String&& other) noexcept {",
          "135:       value_ = std::move(other.value_);",
          "136:       other.value_ = absl::Span<const uint8_t>();",
          "137:       return *this;",
          "138:     }",
          "141:     Slice Take();",
          "144:     absl::string_view string_view() const;",
          "147:     static StringResult Parse(Input* input, bool is_huff, size_t length);",
          "150:     static StringResult ParseBinary(Input* input, bool is_huff, size_t length);",
          "152:    private:",
          "153:     void AppendBytes(const uint8_t* data, size_t length);",
          "154:     explicit String(std::vector<uint8_t> v) : value_(std::move(v)) {}",
          "155:     explicit String(absl::Span<const uint8_t> v) : value_(v) {}",
          "156:     String(grpc_slice_refcount* r, const uint8_t* begin, const uint8_t* end)",
          "157:         : value_(Slice::FromRefcountAndBytes(r, begin, end)) {}",
          "161:     template <typename Out>",
          "162:     static HpackParseStatus ParseHuff(Input* input, uint32_t length,",
          "163:                                       Out output);",
          "166:     static StringResult ParseUncompressed(Input* input, uint32_t length,",
          "167:                                           uint32_t wire_size);",
          "170:     static StringResult Unbase64(String s);",
          "173:     static absl::optional<std::vector<uint8_t>> Unbase64Loop(",
          "174:         const uint8_t* cur, const uint8_t* end);",
          "176:     absl::variant<Slice, absl::Span<const uint8_t>, std::vector<uint8_t>>",
          "177:         value_;",
          "178:   };",
          "181:   struct StringPrefix {",
          "183:     uint32_t length;",
          "185:     bool huff;",
          "187:     std::string ToString() const {",
          "188:       return absl::StrCat(length, \" bytes \",",
          "189:                           huff ? \"huffman compressed\" : \"uncompressed\");",
          "190:     }",
          "191:   };",
          "209:   enum class ParseState : uint8_t {",
          "211:     kTop,",
          "213:     kParsingKeyLength,",
          "215:     kParsingKeyBody,",
          "217:     kSkippingKeyBody,",
          "219:     kParsingValueLength,",
          "221:     kParsingValueBody,",
          "223:     kSkippingValueLength,",
          "225:     kSkippingValueBody,",
          "226:   };",
          "229:   struct InterSliceState {",
          "230:     HPackTable hpack_table;",
          "232:     HpackParseResult frame_error;",
          "234:     uint32_t frame_length = 0;",
          "236:     uint32_t string_length;",
          "238:     uint8_t dynamic_table_updates_allowed;",
          "240:     ParseState parse_state = ParseState::kTop;",
          "242:     RandomEarlyDetection metadata_early_detection;",
          "244:     bool add_to_table;",
          "246:     bool is_string_huff_compressed;",
          "248:     bool is_binary_header;",
          "249:     absl::variant<const HPackTable::Memento*, Slice> key;",
          "250:   };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   std::vector<uint8_t> unparsed_bytes_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:   size_t min_progress_size_ = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:   Priority priority_;",
          "130:   LogInfo log_info_;",
          "134: };",
          "136: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "125:   uint8_t dynamic_table_updates_allowed_;",
          "127:   uint32_t frame_length_;",
          "128:   RandomEarlyDetection metadata_early_detection_;",
          "133:   HPackTable table_;",
          "",
          "[Added Lines]",
          "274:   InterSliceState state_;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc||src/core/ext/transport/chttp2/transport/hpack_parser_table.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc -> src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <algorithm>",
          "26: #include <cstddef>",
          "27: #include <cstring>",
          "29: #include <utility>",
          "31: #include \"absl/status/status.h\"",
          "33: #include \"absl/strings/string_view.h\"",
          "35: #include <grpc/support/log.h>",
          "37: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "38: #include \"src/core/ext/transport/chttp2/transport/http_trace.h\"",
          "39: #include \"src/core/lib/debug/trace.h\"",
          "40: #include \"src/core/lib/slice/slice.h\"",
          "",
          "[Removed Lines]",
          "28: #include <initializer_list>",
          "32: #include \"absl/strings/str_format.h\"",
          "",
          "[Added Lines]",
          "31: #include \"absl/strings/str_cat.h\"",
          "37: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   entries_.swap(entries);",
          "81: }",
          "84: void HPackTable::EvictOne() {",
          "85:   auto first_entry = entries_.PopOne();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: void HPackTable::MementoRingBuffer::ForEach(",
          "84:     absl::FunctionRef<void(uint32_t, const Memento&)> f) const {",
          "85:   uint32_t index = 0;",
          "86:   while (auto* m = Lookup(index++)) {",
          "87:     f(index, *m);",
          "88:   }",
          "89: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   max_bytes_ = max_bytes;",
          "101: }",
          "112:   if (GRPC_TRACE_FLAG_ENABLED(grpc_http_trace)) {",
          "113:     gpr_log(GPR_INFO, \"Update hpack parser table size to %d\", bytes);",
          "114:   }",
          "",
          "[Removed Lines]",
          "103: grpc_error_handle HPackTable::SetCurrentTableSize(uint32_t bytes) {",
          "104:   if (current_table_bytes_ == bytes) {",
          "105:     return absl::OkStatus();",
          "106:   }",
          "107:   if (bytes > max_bytes_) {",
          "108:     return absl::InternalError(absl::StrFormat(",
          "109:         \"Attempt to make hpack table %d bytes when max is %d bytes\", bytes,",
          "110:         max_bytes_));",
          "111:   }",
          "",
          "[Added Lines]",
          "111: bool HPackTable::SetCurrentTableSize(uint32_t bytes) {",
          "112:   if (current_table_bytes_ == bytes) return true;",
          "113:   if (bytes > max_bytes_) return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   uint32_t new_cap = std::max(hpack_constants::EntriesForBytes(bytes),",
          "120:                               hpack_constants::kInitialTableEntries);",
          "121:   entries_.Rebuild(new_cap);",
          "123: }",
          "134:   if (md.md.transport_size() > current_table_bytes_) {",
          "146:   }",
          "",
          "[Removed Lines]",
          "122:   return absl::OkStatus();",
          "125: grpc_error_handle HPackTable::Add(Memento md) {",
          "126:   if (current_table_bytes_ > max_bytes_) {",
          "127:     return GRPC_ERROR_CREATE(absl::StrFormat(",
          "128:         \"HPACK max table size reduced to %d but not reflected by hpack \"",
          "129:         \"stream (still at %d)\",",
          "130:         max_bytes_, current_table_bytes_));",
          "131:   }",
          "142:     while (entries_.num_entries()) {",
          "143:       EvictOne();",
          "144:     }",
          "145:     return absl::OkStatus();",
          "",
          "[Added Lines]",
          "124:   return true;",
          "127: bool HPackTable::Add(Memento md) {",
          "128:   if (current_table_bytes_ > max_bytes_) return false;",
          "132:     AddLargerThanCurrentTableSize();",
          "133:     return true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:   mem_used_ += md.md.transport_size();",
          "156:   entries_.Put(std::move(md));",
          "158: }",
          "160: namespace {",
          "",
          "[Removed Lines]",
          "157:   return absl::OkStatus();",
          "",
          "[Added Lines]",
          "145:   return true;",
          "146: }",
          "148: void HPackTable::AddLargerThanCurrentTableSize() {",
          "156:   while (entries_.num_entries()) {",
          "157:     EvictOne();",
          "158:   }",
          "159: }",
          "161: std::string HPackTable::TestOnlyDynamicTableAsString() const {",
          "162:   std::string out;",
          "163:   entries_.ForEach([&out](uint32_t i, const Memento& m) {",
          "164:     if (m.parse_status.ok()) {",
          "165:       absl::StrAppend(&out, i, \": \", m.md.DebugString(), \"\\n\");",
          "166:     } else {",
          "167:       absl::StrAppend(&out, i, \": \", m.parse_status.Materialize().ToString(),",
          "168:                       \"\\n\");",
          "169:     }",
          "170:   });",
          "171:   return out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:           [](absl::string_view, const Slice&) {",
          "237:             abort();  // not expecting to see this",
          "238:           }),",
          "240: }",
          "242: }  // namespace",
          "",
          "[Removed Lines]",
          "239:       absl::OkStatus()};",
          "",
          "[Added Lines]",
          "253:       HpackParseResult()};",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser_table.h||src/core/ext/transport/chttp2/transport/hpack_parser_table.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser_table.h -> src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdint.h>",
          "26: #include <vector>",
          "30: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "31: #include \"src/core/lib/gprpp/no_destruct.h\"",
          "33: #include \"src/core/lib/transport/metadata_batch.h\"",
          "34: #include \"src/core/lib/transport/parsed_metadata.h\"",
          "",
          "[Removed Lines]",
          "28: #include \"absl/status/status.h\"",
          "32: #include \"src/core/lib/iomgr/error.h\"",
          "",
          "[Added Lines]",
          "26: #include <string>",
          "29: #include \"absl/functional/function_ref.h\"",
          "32: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   HPackTable& operator=(const HPackTable&) = delete;",
          "47:   void SetMaxBytes(uint32_t max_bytes);",
          "50:   struct Memento {",
          "51:     ParsedMetadata<grpc_metadata_batch> md;",
          "53:   };",
          "",
          "[Removed Lines]",
          "48:   grpc_error_handle SetCurrentTableSize(uint32_t bytes);",
          "52:     absl::Status parse_status;",
          "",
          "[Added Lines]",
          "49:   bool SetCurrentTableSize(uint32_t bytes);",
          "50:   uint32_t current_table_size() { return current_table_bytes_; }",
          "54:     HpackParseResult parse_status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   }",
          "74:   uint32_t num_entries() const { return entries_.num_entries(); }",
          "",
          "[Removed Lines]",
          "71:   grpc_error_handle Add(Memento md) GRPC_MUST_USE_RESULT;",
          "",
          "[Added Lines]",
          "73:   bool Add(Memento md) GRPC_MUST_USE_RESULT;",
          "74:   void AddLargerThanCurrentTableSize();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   uint32_t test_only_table_size() const { return mem_used_; }",
          "79:  private:",
          "80:   struct StaticMementos {",
          "81:     StaticMementos();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   uint32_t max_bytes() const { return max_bytes_; }",
          "84:   uint32_t current_table_bytes() const { return current_table_bytes_; }",
          "87:   std::string TestOnlyDynamicTableAsString() const;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:     const Memento* Lookup(uint32_t index) const;",
          "101:     uint32_t max_entries() const { return max_entries_; }",
          "102:     uint32_t num_entries() const { return num_entries_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     void ForEach(absl::FunctionRef<void(uint32_t dynamic_index, const Memento&)>",
          "112:                      f) const;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc": [
          "File: src/core/ext/transport/chttp2/transport/parsing.cc -> src/core/ext/transport/chttp2/transport/parsing.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <initializer_list>",
          "25: #include <string>",
          "28: #include \"absl/base/attributes.h\"",
          "29: #include \"absl/status/status.h\"",
          "",
          "[Removed Lines]",
          "26: #include <utility>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: }",
          "472: static grpc_error_handle init_header_skip_frame_parser(",
          "475:   t->parser = grpc_chttp2_transport::Parser{",
          "476:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "477:   t->hpack_parser.BeginFrame(",
          "",
          "[Removed Lines]",
          "473:     grpc_chttp2_transport* t, HPackParser::Priority priority_type) {",
          "474:   bool is_eoh = t->expect_continuation_stream_id != 0;",
          "",
          "[Added Lines]",
          "472:     grpc_chttp2_transport* t, HPackParser::Priority priority_type,",
          "473:     bool is_eoh) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "595:       GRPC_CHTTP2_IF_TRACING(",
          "596:           gpr_log(GPR_ERROR,",
          "597:                   \"grpc_chttp2_stream disbanded before CONTINUATION received\"));",
          "599:     }",
          "600:     if (t->is_client) {",
          "601:       if (GPR_LIKELY((t->incoming_stream_id & 1) &&",
          "",
          "[Removed Lines]",
          "598:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "597:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:         GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "606:             GPR_ERROR, \"ignoring new grpc_chttp2_stream creation on client\"));",
          "607:       }",
          "609:     } else if (GPR_UNLIKELY(t->last_new_stream_id >= t->incoming_stream_id)) {",
          "610:       GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "611:           GPR_ERROR,",
          "",
          "[Removed Lines]",
          "608:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "607:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "613:           \"last grpc_chttp2_stream \"",
          "614:           \"id=%d, new grpc_chttp2_stream id=%d\",",
          "615:           t->last_new_stream_id, t->incoming_stream_id));",
          "617:     } else if (GPR_UNLIKELY((t->incoming_stream_id & 1) == 0)) {",
          "618:       GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "619:           GPR_ERROR,",
          "620:           \"ignoring grpc_chttp2_stream with non-client generated index %d\",",
          "621:           t->incoming_stream_id));",
          "623:     } else if (GPR_UNLIKELY(",
          "624:                    grpc_chttp2_stream_map_size(&t->stream_map) >=",
          "625:                    t->settings[GRPC_ACKED_SETTINGS]",
          "",
          "[Removed Lines]",
          "616:       return init_header_skip_frame_parser(t, priority_type);",
          "622:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "615:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "621:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "632:           \"grpc_chttp2_stream request id=%d, last grpc_chttp2_stream id=%d\",",
          "633:           t, std::string(t->peer_string.as_string_view()).c_str(),",
          "634:           t->incoming_stream_id, t->last_new_stream_id));",
          "636:     }",
          "637:     t->last_new_stream_id = t->incoming_stream_id;",
          "638:     s = t->incoming_stream =",
          "",
          "[Removed Lines]",
          "635:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "634:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "640:     if (GPR_UNLIKELY(s == nullptr)) {",
          "641:       GRPC_CHTTP2_IF_TRACING(",
          "642:           gpr_log(GPR_ERROR, \"grpc_chttp2_stream not accepted\"));",
          "644:     }",
          "645:     if (t->channelz_socket != nullptr) {",
          "646:       t->channelz_socket->RecordStreamStartedFromRemote();",
          "",
          "[Removed Lines]",
          "643:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "642:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "654:     GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "655:         GPR_ERROR, \"skipping already closed grpc_chttp2_stream header\"));",
          "656:     t->incoming_stream = nullptr;",
          "658:   }",
          "659:   t->parser = grpc_chttp2_transport::Parser{",
          "660:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "",
          "[Removed Lines]",
          "657:     return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "656:     return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "687:       break;",
          "688:     case 2:",
          "689:       gpr_log(GPR_ERROR, \"too many header frames received\");",
          "691:   }",
          "692:   if (frame_type == HPackParser::LogInfo::kTrailers && !t->header_eof) {",
          "693:     return GRPC_ERROR_CREATE(",
          "",
          "[Removed Lines]",
          "690:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "689:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "815:                          &unused)) {",
          "816:     grpc_chttp2_parsing_become_skip_parser(t);",
          "817:     if (s) {",
          "819:     }",
          "820:   }",
          "821:   return err;",
          "822: }",
          "",
          "[Removed Lines]",
          "818:       grpc_chttp2_cancel_stream(t, s, std::exchange(err, absl::OkStatus()));",
          "",
          "[Added Lines]",
          "817:       grpc_chttp2_cancel_stream(t, s, err);",
          "819:     return absl::OkStatus();",
          "",
          "---------------"
        ],
        "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h": [
          "File: src/core/lib/backoff/random_early_detection.h -> src/core/lib/backoff/random_early_detection.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   uint64_t soft_limit() const { return soft_limit_; }",
          "44:   uint64_t hard_limit() const { return hard_limit_; }",
          "46:  private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   void SetLimits(uint64_t soft_limit, uint64_t hard_limit) {",
          "47:     soft_limit_ = soft_limit;",
          "48:     hard_limit_ = hard_limit;",
          "49:   }",
          "",
          "---------------"
        ],
        "src/core/lib/surface/validate_metadata.cc||src/core/lib/surface/validate_metadata.cc": [
          "File: src/core/lib/surface/validate_metadata.cc -> src/core/lib/surface/validate_metadata.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"src/core/lib/surface/validate_metadata.h\"",
          "23: #include \"absl/status/status.h\"",
          "26: #include \"absl/strings/string_view.h\"",
          "28: #include <grpc/grpc.h>",
          "",
          "[Removed Lines]",
          "24: #include \"absl/strings/escaping.h\"",
          "25: #include \"absl/strings/str_cat.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: };",
          "47: constexpr LegalHeaderKeyBits g_legal_header_key_bits;",
          "57:   for (uint8_t c : x) {",
          "58:     if (!legal_bits.is_set(c)) {",
          "60:     }",
          "61:   }",
          "63: }",
          "64: }  // namespace",
          "67:   if (key.empty()) {",
          "69:   }",
          "70:   if (key.size() > UINT32_MAX) {",
          "73:   }",
          "75: }",
          "77: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "49: GPR_ATTRIBUTE_NOINLINE",
          "50: absl::Status DoesNotConformTo(absl::string_view x, const char* err_desc) {",
          "51:   return absl::InternalError(absl::StrCat(err_desc, \": \", x, \" (hex \",",
          "52:                                           absl::BytesToHexString(x), \")\"));",
          "53: }",
          "55: absl::Status ConformsTo(absl::string_view x, const BitSet<256>& legal_bits,",
          "56:                         const char* err_desc) {",
          "59:       return DoesNotConformTo(x, err_desc);",
          "62:   return absl::OkStatus();",
          "66: absl::Status ValidateHeaderKeyIsLegal(absl::string_view key) {",
          "68:     return absl::InternalError(\"Metadata keys cannot be zero length\");",
          "71:     return absl::InternalError(",
          "72:         \"Metadata keys cannot be larger than UINT32_MAX\");",
          "74:   return ConformsTo(key, g_legal_header_key_bits, \"Illegal header key\");",
          "",
          "[Added Lines]",
          "47: ValidateMetadataResult ConformsTo(absl::string_view x,",
          "48:                                   const BitSet<256>& legal_bits,",
          "49:                                   ValidateMetadataResult error) {",
          "52:       return error;",
          "55:   return ValidateMetadataResult::kOk;",
          "56: }",
          "58: absl::Status UpgradeToStatus(ValidateMetadataResult result) {",
          "59:   if (result == ValidateMetadataResult::kOk) return absl::OkStatus();",
          "60:   return absl::InternalError(ValidateMetadataResultToString(result));",
          "65: ValidateMetadataResult ValidateHeaderKeyIsLegal(absl::string_view key) {",
          "67:     return ValidateMetadataResult::kCannotBeZeroLength;",
          "70:     return ValidateMetadataResult::kTooLong;",
          "71:   }",
          "72:   return ConformsTo(key, g_legal_header_key_bits,",
          "73:                     ValidateMetadataResult::kIllegalHeaderKey);",
          "74: }",
          "76: const char* ValidateMetadataResultToString(ValidateMetadataResult result) {",
          "77:   switch (result) {",
          "78:     case ValidateMetadataResult::kOk:",
          "79:       return \"Ok\";",
          "80:     case ValidateMetadataResult::kCannotBeZeroLength:",
          "81:       return \"Metadata keys cannot be zero length\";",
          "82:     case ValidateMetadataResult::kTooLong:",
          "83:       return \"Metadata keys cannot be larger than UINT32_MAX\";",
          "84:     case ValidateMetadataResult::kIllegalHeaderKey:",
          "85:       return \"Illegal header key\";",
          "86:     case ValidateMetadataResult::kIllegalHeaderValue:",
          "87:       return \"Illegal header value\";",
          "89:   GPR_UNREACHABLE_CODE(return \"Unknown\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: }",
          "84: grpc_error_handle grpc_validate_header_key_is_legal(const grpc_slice& slice) {",
          "87: }",
          "89: int grpc_header_key_is_legal(grpc_slice slice) {",
          "",
          "[Removed Lines]",
          "85:   return grpc_core::ValidateHeaderKeyIsLegal(",
          "86:       grpc_core::StringViewFromSlice(slice));",
          "",
          "[Added Lines]",
          "100:   return grpc_core::UpgradeToStatus(grpc_core::ValidateHeaderKeyIsLegal(",
          "101:       grpc_core::StringViewFromSlice(slice)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105: grpc_error_handle grpc_validate_header_nonbin_value_is_legal(",
          "106:     const grpc_slice& slice) {",
          "110: }",
          "112: int grpc_header_nonbin_value_is_legal(grpc_slice slice) {",
          "",
          "[Removed Lines]",
          "107:   return grpc_core::ConformsTo(grpc_core::StringViewFromSlice(slice),",
          "108:                                g_legal_header_non_bin_value_bits,",
          "109:                                \"Illegal header value\");",
          "",
          "[Added Lines]",
          "122:   return grpc_core::UpgradeToStatus(grpc_core::ConformsTo(",
          "123:       grpc_core::StringViewFromSlice(slice), g_legal_header_non_bin_value_bits,",
          "124:       grpc_core::ValidateMetadataResult::kIllegalHeaderValue));",
          "",
          "---------------"
        ],
        "src/core/lib/surface/validate_metadata.h||src/core/lib/surface/validate_metadata.h": [
          "File: src/core/lib/surface/validate_metadata.h -> src/core/lib/surface/validate_metadata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <cstring>",
          "29: #include \"absl/strings/string_view.h\"",
          "31: #include <grpc/slice.h>",
          "",
          "[Removed Lines]",
          "28: #include \"absl/status/status.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: namespace grpc_core {",
          "42: grpc_error_handle grpc_validate_header_key_is_legal(const grpc_slice& slice);",
          "43: grpc_error_handle grpc_validate_header_nonbin_value_is_legal(",
          "",
          "[Removed Lines]",
          "38: absl::Status ValidateHeaderKeyIsLegal(absl::string_view key);",
          "40: }",
          "",
          "[Added Lines]",
          "37: enum class ValidateMetadataResult : uint8_t {",
          "38:   kOk,",
          "39:   kCannotBeZeroLength,",
          "40:   kTooLong,",
          "41:   kIllegalHeaderKey,",
          "42:   kIllegalHeaderValue",
          "43: };",
          "45: const char* ValidateMetadataResultToString(ValidateMetadataResult result);",
          "48: ValidateMetadataResult ValidateHeaderKeyIsLegal(absl::string_view key);",
          "50: }  // namespace grpc_core",
          "",
          "---------------"
        ],
        "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py": [
          "File: src/python/grpcio/grpc_core_dependencies.py -> src/python/grpcio/grpc_core_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "112:     'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "113:     'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "114:     'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "115:     'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "116:     'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_fuzzer_test.cc -> test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <string>",
          "22: #include <utility>",
          "24: #include <grpc/grpc.h>",
          "25: #include <grpc/slice.h>",
          "26: #include <grpc/support/log.h>",
          "28: #include \"src/core/ext/transport/chttp2/transport/hpack_parser.h\"",
          "29: #include \"src/core/lib/gprpp/ref_counted_ptr.h\"",
          "30: #include \"src/core/lib/iomgr/exec_ctx.h\"",
          "31: #include \"src/core/lib/resource_quota/arena.h\"",
          "32: #include \"src/core/lib/resource_quota/memory_quota.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdint.h>",
          "26: #include \"absl/cleanup/cleanup.h\"",
          "34: #include \"src/core/lib/gprpp/status_helper.h\"",
          "35: #include \"src/core/lib/iomgr/error.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: DEFINE_PROTO_FUZZER(const hpack_parser_fuzzer::Msg& msg) {",
          "46:   if (squelch) gpr_set_log_function(dont_log);",
          "47:   grpc_init();",
          "48:   auto memory_allocator = grpc_core::ResourceQuota::Default()",
          "49:                               ->memory_quota()",
          "50:                               ->CreateMemoryAllocator(\"test-allocator\");",
          "51:   {",
          "52:     std::unique_ptr<grpc_core::HPackParser> parser(new grpc_core::HPackParser);",
          "53:     for (int i = 0; i < msg.frames_size(); i++) {",
          "54:       auto arena = grpc_core::MakeScopedArena(1024, &memory_allocator);",
          "55:       grpc_core::ExecCtx exec_ctx;",
          "56:       grpc_metadata_batch b(arena.get());",
          "58:       const auto& frame = msg.frames(i);",
          "59:       grpc_core::HPackParser::Boundary boundary =",
          "60:           grpc_core::HPackParser::Boundary::None;",
          "61:       if (frame.end_of_headers()) {",
          "62:         boundary = grpc_core::HPackParser::Boundary::EndOfHeaders;",
          "63:       }",
          "64:       if (frame.end_of_stream()) {",
          "65:         boundary = grpc_core::HPackParser::Boundary::EndOfStream;",
          "82:       }",
          "84:       parser->BeginFrame(",
          "",
          "[Removed Lines]",
          "66:       }",
          "67:       grpc_core::HPackParser::Priority priority =",
          "68:           grpc_core::HPackParser::Priority::None;",
          "69:       if (frame.priority()) {",
          "70:         priority = grpc_core::HPackParser::Priority::Included;",
          "71:       }",
          "72:       int max_length = 1024;",
          "73:       int absolute_max_length = 1024;",
          "74:       if (absolute_max_length < max_length) {",
          "75:         std::swap(absolute_max_length, max_length);",
          "76:       }",
          "77:       if (frame.max_metadata_length() != 0) {",
          "78:         max_length = frame.max_metadata_length();",
          "79:       }",
          "80:       if (frame.absolute_max_metadata_length() != 0) {",
          "81:         absolute_max_length = frame.absolute_max_metadata_length();",
          "",
          "[Added Lines]",
          "54:   auto cleanup = absl::MakeCleanup(grpc_shutdown);",
          "60:     int max_length = 1024;",
          "61:     int absolute_max_length = 1024;",
          "62:     bool can_update_max_length = true;",
          "63:     bool can_add_priority = true;",
          "69:       if (frame.parse_size() == 0) continue;",
          "73:       if (can_update_max_length) {",
          "74:         if (frame.max_metadata_length() != 0) {",
          "75:           max_length = std::max(0, frame.max_metadata_length());",
          "76:         }",
          "77:         if (frame.absolute_max_metadata_length() != 0) {",
          "78:           absolute_max_length =",
          "79:               std::max(0, frame.absolute_max_metadata_length());",
          "80:         }",
          "81:         if (absolute_max_length < max_length) {",
          "82:           std::swap(absolute_max_length, max_length);",
          "83:         }",
          "84:       }",
          "86:       grpc_core::HPackParser::Priority priority =",
          "87:           grpc_core::HPackParser::Priority::None;",
          "88:       if (can_add_priority && frame.priority()) {",
          "89:         priority = grpc_core::HPackParser::Priority::Included;",
          "90:       }",
          "93:       can_update_max_length = false;",
          "94:       can_add_priority = false;",
          "97:         can_update_max_length = true;",
          "101:         can_update_max_length = true;",
          "102:         can_add_priority = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:               1, grpc_core::HPackParser::LogInfo::kHeaders, false});",
          "88:       int stop_buffering_ctr =",
          "89:           std::max(-1, frame.stop_buffering_after_segments());",
          "91:         grpc_slice buffer =",
          "92:             grpc_slice_from_copied_buffer(parse.data(), parse.size());",
          "94:         grpc_slice_unref(buffer);",
          "95:         stop_buffering_ctr--;",
          "96:         if (0 == stop_buffering_ctr) parser->StopBufferingFrame();",
          "97:       }",
          "98:       parser->FinishFrame();",
          "99:     }",
          "100:   }",
          "102: }",
          "",
          "[Removed Lines]",
          "90:       for (const auto& parse : frame.parse()) {",
          "93:         (void)parser->Parse(buffer, i == msg.frames_size() - 1);",
          "101:   grpc_shutdown();",
          "",
          "[Added Lines]",
          "111:       for (int idx = 0; idx < frame.parse_size(); idx++) {",
          "112:         const auto& parse = frame.parse(idx);",
          "115:         auto err = parser->Parse(buffer, idx == frame.parse_size() - 1);",
          "124:         GPR_ASSERT(static_cast<int>(parser->buffered_bytes() / 4) <",
          "125:                    std::max(1024, absolute_max_length));",
          "126:         if (!err.ok()) {",
          "127:           intptr_t unused;",
          "128:           if (grpc_error_get_int(err, grpc_core::StatusIntProperty::kStreamId,",
          "129:                                  &unused)) {",
          "131:           } else {",
          "133:             return;",
          "134:           }",
          "135:         }",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_table_test.cc||test/core/transport/chttp2/hpack_parser_table_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_table_test.cc -> test/core/transport/chttp2/hpack_parser_table_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "25: #include \"absl/strings/str_cat.h\"",
          "26: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"absl/status/status.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:             ParsedMetadata<grpc_metadata_batch>::FromSlicePair{},",
          "125:             std::move(key_slice), std::move(value_slice),",
          "126:             key.length() + value.length() + 32),",
          "130:     AssertIndex(&tbl, 1 + hpack_constants::kLastStaticEntry, key.c_str(),",
          "131:                 value.c_str());",
          "132:     if (i) {",
          "",
          "[Removed Lines]",
          "127:         absl::OkStatus()};",
          "128:     auto add_err = tbl.Add(std::move(memento));",
          "129:     ASSERT_EQ(add_err, absl::OkStatus());",
          "",
          "[Added Lines]",
          "126:         HpackParseResult()};",
          "127:     ASSERT_TRUE(tbl.Add(std::move(memento)));",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_test.cc -> test/core/transport/chttp2/hpack_parser_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"src/core/ext/transport/chttp2/transport/hpack_parser.h\"",
          "23: #include <memory>",
          "24: #include <string>",
          "",
          "[Removed Lines]",
          "21: #include <stdlib.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: #include \"absl/status/status.h\"",
          "28: #include \"absl/status/statusor.h\"",
          "29: #include \"absl/strings/str_cat.h\"",
          "31: #include \"absl/types/optional.h\"",
          "32: #include \"gmock/gmock.h\"",
          "33: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "30: #include \"absl/strings/string_view.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: const uint32_t kEndOfHeaders = 8;",
          "62: struct TestInput {",
          "65:   uint32_t flags;",
          "66: };",
          "68: struct Test {",
          "69:   absl::optional<size_t> table_size;",
          "70:   absl::optional<size_t> max_metadata_size;",
          "71:   std::vector<TestInput> inputs;",
          "72: };",
          "74: class ParseTest : public ::testing::TestWithParam<Test> {",
          "75:  public:",
          "76:   ParseTest() { grpc_init(); }",
          "",
          "[Removed Lines]",
          "63:   absl::string_view input;",
          "64:   absl::StatusOr<absl::string_view> expected_parse;",
          "",
          "[Added Lines]",
          "60:   std::string input;",
          "61:   absl::StatusOr<std::string> expected_parse;",
          "66:   std::string name;",
          "73: inline const char* NameFromConfig(",
          "74:     const ::testing::TestParamInfo<Test>& config) {",
          "75:   return config.param.name.c_str();",
          "76: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     parser_ = std::make_unique<HPackParser>();",
          "89:     if (GetParam().table_size.has_value()) {",
          "90:       parser_->hpack_table()->SetMaxBytes(GetParam().table_size.value());",
          "94:     }",
          "95:   }",
          "",
          "[Removed Lines]",
          "91:       EXPECT_EQ(parser_->hpack_table()->SetCurrentTableSize(",
          "92:                     GetParam().table_size.value()),",
          "93:                 absl::OkStatus());",
          "",
          "[Added Lines]",
          "95:       EXPECT_TRUE(parser_->hpack_table()->SetCurrentTableSize(",
          "96:           GetParam().table_size.value()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:   void TestVector(grpc_slice_split_mode mode,",
          "103:                   absl::optional<size_t> max_metadata_size,",
          "106:     MemoryAllocator memory_allocator = MemoryAllocator(",
          "107:         ResourceQuota::Default()->memory_quota()->CreateMemoryAllocator(",
          "108:             \"test\"));",
          "",
          "[Removed Lines]",
          "104:                   absl::string_view hexstring,",
          "105:                   absl::StatusOr<absl::string_view> expect, uint32_t flags) {",
          "",
          "[Added Lines]",
          "107:                   std::string hexstring, absl::StatusOr<std::string> expect,",
          "108:                   uint32_t flags) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:         grpc_error_get_status(err, Timestamp::InfFuture(), &code, &message,",
          "153:                               nullptr, nullptr);",
          "154:         EXPECT_EQ(code, static_cast<grpc_status_code>(expect.status().code()))",
          "156:         EXPECT_THAT(message, ::testing::HasSubstr(expect.status().message()))",
          "158:         saw_error = true;",
          "159:         if (flags & kFailureIsConnectionError) return;",
          "160:       }",
          "",
          "[Removed Lines]",
          "155:             << err;",
          "157:             << err;",
          "",
          "[Added Lines]",
          "158:             << err << \" slice[\" << i << \"]; input: \" << hexstring",
          "159:             << \"\\nTABLE:\\n\"",
          "160:             << parser_->hpack_table()->TestOnlyDynamicTableAsString();",
          "162:             << err << \" slice[\" << i << \"]; input: \" << hexstring",
          "163:             << \"\\nTABLE:\\n\"",
          "164:             << parser_->hpack_table()->TestOnlyDynamicTableAsString();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211: INSTANTIATE_TEST_SUITE_P(",
          "212:     ParseTest, ParseTest,",
          "213:     ::testing::Values(",
          "215:              {},",
          "216:              {",
          "",
          "[Removed Lines]",
          "214:         Test{{},",
          "",
          "[Added Lines]",
          "221:         Test{\"RfcTestD2\",",
          "222:              {},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:                  {\"82\", \":method: GET\\n\", 0},",
          "230:              }},",
          "232:              {},",
          "233:              {",
          "",
          "[Removed Lines]",
          "231:         Test{{},",
          "",
          "[Added Lines]",
          "239:         Test{\"RfcTestD3\",",
          "240:              {},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:                   \"custom-key: custom-value\\n\",",
          "258:                   0},",
          "259:              }},",
          "261:              {},",
          "262:              {",
          "",
          "[Removed Lines]",
          "260:         Test{{},",
          "",
          "[Added Lines]",
          "269:         Test{\"RfcTestD4\",",
          "270:              {},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:                   \"custom-key: custom-value\\n\",",
          "287:                   0},",
          "288:              }},",
          "290:              {},",
          "291:              {",
          "",
          "[Removed Lines]",
          "289:         Test{{256},",
          "",
          "[Added Lines]",
          "299:         Test{\"RfcTestD5\",",
          "300:              {256},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:                   \"version=1\\n\",",
          "325:                   0},",
          "326:              }},",
          "328:              {},",
          "329:              {",
          "",
          "[Removed Lines]",
          "327:         Test{{256},",
          "",
          "[Added Lines]",
          "338:         Test{\"RfcTestD6\",",
          "339:              {256},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "359:                   \"version=1\\n\",",
          "360:                   0},",
          "361:              }},",
          "363:              {1024},",
          "364:              {{\"3fc43fc4\", absl::InternalError(\"Attempt to make hpack table\"),",
          "365:                kFailureIsConnectionError}}},",
          "367:              {},",
          "368:              {{\"3ba4a41007f0a40f2d62696e8b632a5b29a40fa4a4281007f0\",",
          "369:                absl::InternalError(\"Invalid HPACK index received\"),",
          "370:                kFailureIsConnectionError}}},",
          "372:              {},",
          "373:              {{\"2aa41007f0a40f2d62696e8163a41f1f00275bf0692862a4dbf0f00963\",",
          "374:                absl::InternalError(",
          "375:                    \"More than two max table size changes in a single frame\"),",
          "376:                kFailureIsConnectionError}}},",
          "378:              {},",
          "379:              {{\"2aa41007f0a40f2d62696e8363271f00275bf06928626e2d213fa40fdbf0212\"",
          "380:                \"8215cf00963\",",
          "383:              {},",
          "384:              {{\"a4a41007f0a40f2d62696e8b635b29282d2762696e3b0921213fa41fdbf0211\"",
          "385:                \"007f07b282d62696ef009215c0921e51fe91b3b3f47ed5b282821215cf0\",",
          "",
          "[Removed Lines]",
          "362:         Test{{},",
          "366:         Test{{},",
          "371:         Test{{},",
          "377:         Test{{},",
          "381:                absl::InternalError(\"illegal base64 encoding\"), 0}}},",
          "382:         Test{{},",
          "",
          "[Added Lines]",
          "374:         Test{\"IllegalHpackTableGrowth\",",
          "375:              {},",
          "379:         Test{\"FuzzerFoundInvalidHpackIndexFuzzerFound1\",",
          "380:              {},",
          "385:         Test{\"FuzzerFoundMultipleTableSizeChanges1\",",
          "386:              {},",
          "392:         Test{\"FuzzerFoundIllegalHeaderKey1\",",
          "393:              {},",
          "397:                absl::InternalError(\"Illegal header key\"), 0}}},",
          "398:         Test{\"FuzzerFoundMultipleTableSizeChanges2\",",
          "399:              {},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "387:                    \"More than two max table size changes in a single frame\"),",
          "388:                kFailureIsConnectionError}}},",
          "389:         Test{",
          "390:             {},",
          "391:             {},",
          "392:             {{\"696969696969696969696969696969696969696969696969696969696969696\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:             \"FuzzerFoundInterOverflow1\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "398:               \"ffffffffffff632a5b29a428a42d0fdbf027f0628363696e092121\",",
          "399:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "400:               kEndOfHeaders | kFailureIsConnectionError}}},",
          "402:              {},",
          "403:              {{\"0e 00 00 df\",",
          "408:              {},",
          "409:              {",
          "",
          "[Removed Lines]",
          "401:         Test{{},",
          "404:                absl::InternalError(",
          "405:                    \"Error parsing ':status' metadata: error=not an integer\"),",
          "406:                0}}},",
          "407:         Test{{},",
          "",
          "[Added Lines]",
          "419:         Test{\"StatusIsAnInteger\",",
          "420:              {},",
          "423:                absl::InternalError(\"Error parsing ':status' metadata\"), 0}}},",
          "424:         Test{\"BinaryMetadataFromBase64\",",
          "425:              {},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "415:                   \"4d 51 3d 3d\",",
          "416:                   \"a.b.c-bin: omg2021\\n\", 0},",
          "417:              }},",
          "419:              {},",
          "420:              {// Binary metadata: created using:",
          "",
          "[Removed Lines]",
          "418:         Test{{},",
          "",
          "[Added Lines]",
          "436:         Test{\"Base64LegalEncoding\",",
          "437:              {},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "424:               {\"4009612e622e632d62696e1c6c75636b696c7920666f722075732c206974\"",
          "425:                \"27732074756573646179\",",
          "426:                absl::InternalError(\"Error parsing 'a.b.c-bin' metadata: \"",
          "428:                0},",
          "429:               {\"be\",",
          "430:                absl::InternalError(\"Error parsing 'a.b.c-bin' metadata: \"",
          "432:                0}}},",
          "434:              {},",
          "435:              {// created using:",
          "",
          "[Removed Lines]",
          "427:                                    \"error=illegal base64 encoding\"),",
          "431:                                    \"error=illegal base64 encoding\"),",
          "433:         Test{{},",
          "",
          "[Added Lines]",
          "446:                                    \"illegal base64 encoding\"),",
          "450:                                    \"illegal base64 encoding\"),",
          "452:         Test{\"TeIsTrailers\",",
          "453:              {},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "439:               {\"400274650767617262616765\",",
          "440:                absl::InternalError(\"Error parsing 'te' metadata\"), 0},",
          "441:               {\"be\", absl::InternalError(\"Error parsing 'te' metadata\"), 0}}},",
          "443:              128,",
          "444:              {",
          "445:                  {// Generated with: tools/codegen/core/gen_header_frame.py",
          "",
          "[Removed Lines]",
          "442:         Test{{},",
          "",
          "[Added Lines]",
          "462:         Test{\"MetadataSizeLimitCheck\",",
          "463:              {},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "450:                   \"616e67656c6963610762616767696e73\",",
          "451:                   absl::ResourceExhaustedError(",
          "452:                       \"received metadata size exceeds hard limit\"),",
          "462:                  {\"bebfc0c1\",",
          "",
          "[Removed Lines]",
          "453:                   0},",
          "456:                  {\"be\", \"angelica: baggins\\n\", 0},",
          "457:                  {\"bf\", \"amaranth: brandybuck\\n\", 0},",
          "458:                  {\"c0\", \"adalgrim: took\\n\", 0},",
          "459:                  {\"c1\", \"adaldrida: brandybuck\\n\", 0},",
          "",
          "[Added Lines]",
          "474:                   kEndOfHeaders},",
          "477:                  {\"be\", \"angelica: baggins\\n\", kEndOfHeaders},",
          "478:                  {\"bf\", \"amaranth: brandybuck\\n\", kEndOfHeaders},",
          "479:                  {\"c0\", \"adalgrim: took\\n\", kEndOfHeaders},",
          "480:                  {\"c1\", \"adaldrida: brandybuck\\n\", kEndOfHeaders},",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "465:                   0},",
          "466:              }},",
          "467:         Test{",
          "468:             {},",
          "469:             {},",
          "470:             {{\"be\", absl::InternalError(\"Invalid HPACK index received\"),",
          "471:               kFailureIsConnectionError}},",
          "472:         },",
          "473:         Test{",
          "474:             {},",
          "475:             {},",
          "476:             {{\"80\", absl::InternalError(\"Illegal hpack op code\"),",
          "477:               kFailureIsConnectionError}},",
          "478:         },",
          "479:         Test{",
          "480:             {},",
          "481:             {},",
          "482:             {{\"29\", \"\", kFailureIsConnectionError}},",
          "483:         },",
          "484:         Test{",
          "485:             {},",
          "486:             {},",
          "487:             {{\"\", \"\", kWithPriority}},",
          "488:         },",
          "489:         Test{",
          "490:             {},",
          "491:             {},",
          "492:             {{\"f5\", absl::InternalError(\"Invalid HPACK index received\"),",
          "493:               kFailureIsConnectionError}},",
          "494:         },",
          "495:         Test{",
          "496:             {},",
          "497:             {},",
          "498:             {{\"0f\", \"\", 0}},",
          "499:         },",
          "500:         Test{",
          "501:             {},",
          "502:             {},",
          "503:             {{\"7f\", \"\", 0}},",
          "504:         },",
          "505:         Test{",
          "506:             {},",
          "507:             {},",
          "509:         },",
          "510:         Test{",
          "511:             {},",
          "512:             {},",
          "513:             {{\"ffffffffff00ff\",",
          "",
          "[Removed Lines]",
          "508:             {{\"1bffffff7c1b\", \"\", 0}},",
          "",
          "[Added Lines]",
          "489:             \"SingleByteBE\",",
          "496:             \"SingleByte80\",",
          "503:             \"SingleByte29\",",
          "509:             \"EmptyWithPriority\",",
          "515:             \"SingleByteF5\",",
          "522:             \"SingleByte0f\",",
          "528:             \"SingleByte7f\",",
          "534:             \"FuzzerCoverage1bffffff7c1b\",",
          "537:             {{\"1bffffff7c1b\",",
          "538:               absl::ResourceExhaustedError(",
          "539:                   \"received metadata size exceeds hard limit\"),",
          "540:               0}},",
          "543:             \"FuzzerCoverageffffffffff00ff\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "515:               kFailureIsConnectionError}},",
          "516:         },",
          "517:         Test{",
          "518:             {},",
          "519:             {},",
          "520:             {{\"ff8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:             \"FuzzerCoverageIntegerOverflow2\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "524:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "525:               kFailureIsConnectionError}}},",
          "526:         Test{",
          "527:             {},",
          "528:             {9},",
          "529:             {{\"3f6672616d6573207ba2020656e645f6f665f686561646572733a2074727565a\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:             \"FuzzerCoverageMetadataLimits\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "535:               absl::ResourceExhaustedError(",
          "536:                   \"received metadata size exceeds hard limit\"),",
          "537:               kWithPriority}}},",
          "539:              {},",
          "540:              {{\"52046772706300073a737461747573033230300e7f\",",
          "541:                \":status: 200\\naccept-ranges: grpc\\n\", 0}}},",
          "543:              {},",
          "544:              {{\"a4a41007f0a40f2d62696e8beda42d5b63272129a410626907\",",
          "546:         Test{",
          "",
          "[Removed Lines]",
          "538:         Test{{},",
          "542:         Test{{},",
          "545:                absl::InternalError(\"illegal base64 encoding\"), 0}}},",
          "",
          "[Added Lines]",
          "573:         Test{\"FuzzerCoverage52046772706300073a737461747573033230300e7f\",",
          "574:              {},",
          "578:         Test{\"FuzzerCoveragea4a41007f0a40f2d62696e8beda42d5b63272129a410626907\",",
          "579:              {},",
          "582:                absl::InternalError(\"Illegal header key\"), 0}}},",
          "584:             \"HpackTableSizeWithBase64\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "601:                  kFailureIsConnectionError},",
          "602:             }},",
          "603:         Test{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:             \"HpackTableSizeWithBase64AndHuffman\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "657:                 {\"c0\", absl::InternalError(\"Invalid HPACK index received\"),",
          "658:                  kFailureIsConnectionError},",
          "659:             }},",
          "662:              {},",
          "663:              {{\"60\",",
          "664:                absl::InternalError(\"Incomplete header at the end of a \"",
          "665:                                    \"header/continuation sequence\"),",
          "666:                kEndOfStream | kFailureIsConnectionError}}},",
          "668:              {},",
          "669:              {{\"89\", \":status: 204\\n\", 0},",
          "670:               {\"89\", \":status: 204\\n\", 0},",
          "",
          "[Removed Lines]",
          "660:         Test{{}, {}, {{\"7a\", \"\", 0}}},",
          "661:         Test{{},",
          "667:         Test{{},",
          "",
          "[Added Lines]",
          "699:         Test{\"SingleByte7a\", {}, {}, {{\"7a\", \"\", 0}}},",
          "700:         Test{\"SingleByte60\",",
          "701:              {},",
          "707:         Test{\"FuzzerFoundMultipleTableSizeChanges3\",",
          "708:              {},",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "672:                absl::InternalError(",
          "673:                    \"More than two max table size changes in a single frame\"),",
          "674:                kFailureIsConnectionError}}},",
          "676:              {},",
          "677:              {{\"4005782d62696edbd94e1f7fbbf983267e36a313fd47c9bab54d5e592f5d\",",
          "678:                \"\", 0}}},",
          "681:         Test{",
          "682:             {},",
          "683:             {},",
          "684:             {{// Generated with: tools/codegen/core/gen_header_frame.py",
          "",
          "[Removed Lines]",
          "675:         Test{{},",
          "679:         Test{{}, {}, {{\"72656672657368\", \"\", 0}}},",
          "680:         Test{{}, {}, {{\"66e6645f74\", \"\", 0}, {\"66645f74\", \"\", 0}}},",
          "",
          "[Added Lines]",
          "716:         Test{\"FuzzerCoverage4005782d62696edbd94e1f7etc\",",
          "717:              {},",
          "721:         Test{\"FuzzerCoverage72656672657368\",",
          "722:              {},",
          "723:              {},",
          "724:              {{\"72656672657368\", \"\", 0}}},",
          "725:         Test{\"FuzzerCoverage66e6645f74Then66645f74\",",
          "726:              {},",
          "727:              {},",
          "728:              {{\"66e6645f74\", \"\", 0}, {\"66645f74\", \"\", 0}}},",
          "730:             \"MixedCaseHeadersAreStreamErrors\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "691:               \"be\", absl::InternalError(\"Illegal header key: MiXeD-CaSe\"), 0}}},",
          "692:         Test{",
          "693:             {},",
          "694:             {},",
          "695:             {{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",",
          "696:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "697:               kFailureIsConnectionError}}},",
          "699:              {},",
          "700:              {{\"dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad\"",
          "701:                \"adadadadadadadadadadadadadadadadadadadadadadadadadadadadadadada\"",
          "702:                \"dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad\"",
          "703:                \"adadadadadadadadadadadadadadadadadadada\",",
          "704:                absl::InternalError(\"Invalid HPACK index received\"),",
          "707: }  // namespace",
          "708: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "698:         Test{{},",
          "705:                kWithPriority | kFailureIsConnectionError}}}));",
          "",
          "[Added Lines]",
          "742:             \"FuzzerCoverageIntegerOverflow3\",",
          "748:         Test{\"Dadadadadada\",",
          "749:              {},",
          "756:                kWithPriority | kFailureIsConnectionError}}},",
          "757:         Test{\"MaliciousVarintEncoding\",",
          "758:              {},",
          "759:              {},",
          "760:              {{\"1f80808080808080808080808080808080808080808080808080808080\",",
          "761:                absl::InternalError(",
          "762:                    \"Malicious varint encoding detected in HPACK stream\"),",
          "763:                kFailureIsConnectionError}}}),",
          "764:     NameFromConfig);",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal": [
          "File: tools/doxygen/Doxyfile.c++.internal -> tools/doxygen/Doxyfile.c++.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1296: src/core/ext/transport/chttp2/transport/hpack_encoder.h \\",
          "1297: src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "1298: src/core/ext/transport/chttp2/transport/hpack_encoder_table.h \\",
          "1299: src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "1300: src/core/ext/transport/chttp2/transport/hpack_parser.h \\",
          "1301: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1299: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "1300: src/core/ext/transport/chttp2/transport/hpack_parse_result.h \\",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal": [
          "File: tools/doxygen/Doxyfile.core.internal -> tools/doxygen/Doxyfile.core.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1072: src/core/ext/transport/chttp2/transport/hpack_encoder.h \\",
          "1073: src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "1074: src/core/ext/transport/chttp2/transport/hpack_encoder_table.h \\",
          "1075: src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "1076: src/core/ext/transport/chttp2/transport/hpack_parser.h \\",
          "1077: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "1076: src/core/ext/transport/chttp2/transport/hpack_parse_result.h \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "415f2f9ee3a2d381d35f641d6b6760ad593745ac",
      "candidate_info": {
        "commit_hash": "415f2f9ee3a2d381d35f641d6b6760ad593745ac",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/415f2f9ee3a2d381d35f641d6b6760ad593745ac",
        "files": [
          "BUILD",
          "CMakeLists.txt",
          "Makefile",
          "Package.swift",
          "build_autogenerated.yaml",
          "config.m4",
          "config.w32",
          "gRPC-C++.podspec",
          "gRPC-Core.podspec",
          "grpc.gemspec",
          "grpc.gyp",
          "package.xml",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h",
          "src/core/lib/surface/validate_metadata.cc",
          "src/core/lib/surface/validate_metadata.h",
          "src/python/grpcio/grpc_core_dependencies.py",
          "test/core/transport/chttp2/BUILD",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-4865932715229184",
          "test/core/transport/chttp2/hpack_parser_corpus/clusterfuzz-testcase-minimized-hpack_parser_fuzzer-5365031688536064",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-06c4093ab80184d59150773f5c19e8e3851aa584",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-073bba832e73c8f524714e179236756e4854e08f",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-0865baf4eceb5220cdf0528cff5520f97ed7fbf8",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-1082c8e03fb43912053db34d510246ffe6aab388",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-1bda156d5b247fec3b19381d40519e65bdde40de",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-24437bf259f238cb404aad47b93345a4d5161a37",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-4271e5059b58be25d0845678c8b1c3f12c0040c3",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-592efde536e0c000a56776eeb180ae3b6f8ebe70",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-659b65287a1437d74ef1f334b0148102a461a430",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-6c53549fc13aab69e2ddf334275ebeb4bdab4234",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-90dcc8d762ca0b68b8ff7900e0b4856ac19de75f",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-9d380436e8412e3d4f8f2bc9b6a008c57b777afe",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-afc9191b4dce8c40516945fb5dc2c98b628a2430",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-c5c7476698873398f29a0ba0b7cdc7b85fa63173",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-c88faaa07f7f4fbaf734b9be038ec7daa0bf92fb",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-d47bb8c8c9640faf351068480844e1be20cfdbb7",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-d72bb43a581e489916a85216cb6c4fbb3ad844e2",
          "test/core/transport/chttp2/hpack_parser_corpus/crash-ff4557ffdb266e8c086c05f3da8f7a1bddd6f906",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/clusterfuzz-testcase-minimized-hpack_parser_input_size_fuzzer-4883111703609344",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/crash-2af1d6b2934f168a7dc4768b93e447802f9ecedf",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/crash-81591b690179358fd403e4730b601c5c0b427491",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-015113bc4dd37f528f1cb0c820660d4011960dab",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-03de8592bf6baa2a62e5542fa96ac2d6ee69b6b9",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-058e8ece1a01b9087308f12521c1109f9d30e573",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-07558bf39768c209ce786612c724f889d1e8891b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0ab36d0cfe24b0ddbd4c583c74882df16c3b9627",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0b09f05105d317412b7c827d3686f5fa32bebf49",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0ca5bea44d2bc9166b4734e0716b8b6da5ec2029",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-0efc2b21ea49b7721ce2b20e13effe7c96c64498",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-123f67a0e63101e7898f2a8d23d2f588ebde4a98",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1298ff90dade093f5481f6bc80777326938cf4b4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-135681321b796d8f765261672da373db518d538b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-152f69bc17f458569744172a8c3d6971ac66dff8",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1bd14ffddb4215b0c81272d73d78e4d444a851ee",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1ec7975001ad03530af0b84e6527752b863ad594",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1f3013b5c089a3affcae856ec1b0a0f70d217740",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-1f9c5fcdcf7348d5c165eb9a8b9755da60e7da5c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-20bff712090e0c110511522a6aec43f50ced4da9",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-20c88a592c8cb36ab342c77a75c23964dd9ac09e",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-214ef1f403047786f5aae50aae0bef64243ea423",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-245a90a2668df8a643d9b8922dbc34825f3e5569",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-31bc6369c08034fde2683229bc30fd15bb767158",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-3b2fb306d57d5e9f7bcd0bcb1cbf34fcec88a30b",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-41fb06b30a8237efa627ed4eb0afaa3221ac4abe",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-44af09a92eeb9143f1055d66a3a98d7e89b65e07",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-4b54c31cc4232038a9561c0c52dcf4f99317bab5",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-4cd819b2b070f7cd5c287d4f1a6d04ea466e15ae",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-51d2744484cadc664760e331a4c91e7a4c43feb1",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-57702140b51ec7c39b73e68519c5dc235e79098c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-588c49bc604a6231b9638ad628626a0665f3d3ba",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-5a12ad90db4e144bd286002fe5f9f862afb7a429",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-5f2ae06e8068c973de09d9bbff0b83deddbf654c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-60118614a0ee78fe56eb10631d11fd04a6e54348",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6148d1287ad4f3612a69e27f00c23ca5bd76a2e4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6b3d64423a6fedf8fd0da585e3ef259793575e0a",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-6fca8b6d71567434d128919f5e5b087a95e8dc36",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-79f273f547f27661fb507887e2de99fb846a38d3",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-7bccb0c6f828e36f42e92dc95e7bc1194c2e384f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-829cb6b69fd6874ba62b1d9e81c1db4f2810578c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8b9927241b1f8cd86bf7aa947c22a38ac1a02822",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8c0937c405509b25e563d9eedcf6a8cf1ae6e7e7",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8e319a9f1aaa99eb12086568efbcb8fe9d4f45c4",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8f05e81342c302bcb97a31c93d42c690deda4f2d",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-8f419c102e129ebbfc7093b88f9da53e41672100",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9baf490049fb6d5374dcf2a21d89589c07b50c85",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9ea07de715a1deafee30c3ae13b7882d13adc133",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-9fbf404499c65b338e66fbdbb7f392eee25b58d8",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-a49f0308e5ca8aa2eeb640a9d4b3a9b38200200c",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-b00a8d8fe0c4f5f624fee74404eadf3fcc8506b5",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-b592ca99a4503d5e148bc434d22e2bb8c54fa67f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-baa7a814fc03b9d814fb62d6faf3b6f878ef8ed2",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-c10a17f4b8404e97ea04d5f80ec6f0c854e6c722",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-cc8fd4207cf949f1508099c4f292e641fc016fcb",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-d2e48419f9f6ebebd2674ba6df9e4a1ca2d71f70",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-da53cd6077598148d2d8bb6f01701b295d9fdf5f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-dcf1675a3a20b1774aa21ea5cca5af8a879c7e6d",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e1d9c9de7bab42422728004d98ce7b75950eba48",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e7558bd9ec494634446a1aeb7d5381d0212f25a7",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-e9325a522c7c7450599f6c1a4a8fb41c31001788",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-ec72b4c4ca87666be770098d1bec2ac2c7934610",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-f737513dded2e82540ad6a199fb45d929957380f",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-f9c899c69ad72bdad745ae100359d4ce5e22f833",
          "test/core/transport/chttp2/hpack_parser_input_size_corpus/slow-unit-fceca15b45635f1b0e63b75f6da116b1ef8c2d14",
          "test/core/transport/chttp2/hpack_parser_table_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-211c8a4a9c4831aa2d5599b7847ab45ced2216a4",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-aa01fe395fe67c36bb66f282341865fbe7eae2d7",
          "test/core/transport/chttp2/hpack_sync_corpus/crash-da39a3ee5e6b4b0d3255bfef95601890afd80709",
          "tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal"
        ],
        "message": "[Core] Improve HPACK (#33597)",
        "before_after_code_files": [
          "Package.swift||Package.swift",
          "config.m4||config.m4",
          "config.w32||config.w32",
          "gRPC-C++.podspec||gRPC-C++.podspec",
          "gRPC-Core.podspec||gRPC-Core.podspec",
          "grpc.gemspec||grpc.gemspec",
          "grpc.gyp||grpc.gyp",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc||src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parse_result.h||src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc||src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "src/core/ext/transport/chttp2/transport/hpack_parser_table.h||src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc",
          "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h",
          "src/core/lib/surface/validate_metadata.cc||src/core/lib/surface/validate_metadata.cc",
          "src/core/lib/surface/validate_metadata.h||src/core/lib/surface/validate_metadata.h",
          "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py",
          "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "test/core/transport/chttp2/hpack_parser_table_test.cc||test/core/transport/chttp2/hpack_parser_table_test.cc",
          "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc",
          "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal",
          "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "Package.swift||Package.swift": [
          "File: Package.swift -> Package.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:         \"src/core/ext/transport/chttp2/transport/hpack_encoder.h\",",
          "295:         \"src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc\",",
          "296:         \"src/core/ext/transport/chttp2/transport/hpack_encoder_table.h\",",
          "297:         \"src/core/ext/transport/chttp2/transport/hpack_parser.cc\",",
          "298:         \"src/core/ext/transport/chttp2/transport/hpack_parser.h\",",
          "299:         \"src/core/ext/transport/chttp2/transport/hpack_parser_table.cc\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:         \"src/core/ext/transport/chttp2/transport/hpack_parse_result.cc\",",
          "298:         \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\",",
          "",
          "---------------"
        ],
        "config.m4||config.m4": [
          "File: config.m4 -> config.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     src/core/ext/transport/chttp2/transport/frame_window_update.cc \\",
          "138:     src/core/ext/transport/chttp2/transport/hpack_encoder.cc \\",
          "139:     src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "140:     src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "141:     src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "142:     src/core/ext/transport/chttp2/transport/http2_settings.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "",
          "---------------"
        ],
        "config.w32||config.w32": [
          "File: config.w32 -> config.w32",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\frame_window_update.cc \" +",
          "103:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_encoder.cc \" +",
          "104:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_encoder_table.cc \" +",
          "105:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parser.cc \" +",
          "106:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parser_table.cc \" +",
          "107:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\http2_settings.cc \" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     \"src\\\\core\\\\ext\\\\transport\\\\chttp2\\\\transport\\\\hpack_parse_result.cc \" +",
          "",
          "---------------"
        ],
        "gRPC-C++.podspec||gRPC-C++.podspec": [
          "File: gRPC-C++.podspec -> gRPC-C++.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:                       'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "370:                       'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "371:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "372:                       'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "373:                       'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "374:                       'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1414:                               'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "1415:                               'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "1416:                               'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "1417:                               'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "1418:                               'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "1419:                               'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1418:                               'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------"
        ],
        "gRPC-Core.podspec||gRPC-Core.podspec": [
          "File: gRPC-Core.podspec -> gRPC-Core.podspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:                       'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "396:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "397:                       'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "398:                       'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "399:                       'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "400:                       'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "399:                       'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2145:                               'src/core/ext/transport/chttp2/transport/hpack_constants.h',",
          "2146:                               'src/core/ext/transport/chttp2/transport/hpack_encoder.h',",
          "2147:                               'src/core/ext/transport/chttp2/transport/hpack_encoder_table.h',",
          "2148:                               'src/core/ext/transport/chttp2/transport/hpack_parser.h',",
          "2149:                               'src/core/ext/transport/chttp2/transport/hpack_parser_table.h',",
          "2150:                               'src/core/ext/transport/chttp2/transport/http2_settings.h',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2150:                               'src/core/ext/transport/chttp2/transport/hpack_parse_result.h',",
          "",
          "---------------"
        ],
        "grpc.gemspec||grpc.gemspec": [
          "File: grpc.gemspec -> grpc.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder.h )",
          "301:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc )",
          "302:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_encoder_table.h )",
          "303:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser.cc )",
          "304:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser.h )",
          "305:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parser_table.cc )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parse_result.cc )",
          "304:   s.files += %w( src/core/ext/transport/chttp2/transport/hpack_parse_result.h )",
          "",
          "---------------"
        ],
        "grpc.gyp||grpc.gyp": [
          "File: grpc.gyp -> grpc.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:         'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "363:         'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "364:         'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "365:         'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "366:         'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "367:         'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:         'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1180:         'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "1181:         'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "1182:         'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "1183:         'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "1184:         'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "1185:         'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1184:         'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parse_result.cc||src/core/ext/transport/chttp2/transport/hpack_parse_result.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc -> src/core/ext/transport/chttp2/transport/hpack_parse_result.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <grpc/support/port_platform.h>",
          "17: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "19: #include <stddef.h>",
          "21: #include <initializer_list>",
          "23: #include \"absl/strings/str_format.h\"",
          "25: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "26: #include \"src/core/lib/gprpp/status_helper.h\"",
          "27: #include \"src/core/lib/iomgr/error.h\"",
          "28: #include \"src/core/lib/slice/slice.h\"",
          "30: namespace grpc_core {",
          "32: namespace {",
          "33: class MetadataSizeLimitExceededEncoder {",
          "34:  public:",
          "35:   explicit MetadataSizeLimitExceededEncoder(std::string& summary)",
          "36:       : summary_(summary) {}",
          "38:   void Encode(const Slice& key, const Slice& value) {",
          "39:     AddToSummary(key.as_string_view(), value.size());",
          "40:   }",
          "42:   template <typename Key, typename Value>",
          "43:   void Encode(Key, const Value& value) {",
          "44:     AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "45:   }",
          "47:  private:",
          "48:   void AddToSummary(absl::string_view key,",
          "49:                     size_t value_length) GPR_ATTRIBUTE_NOINLINE {",
          "50:     absl::StrAppend(&summary_, \" \", key, \":\",",
          "51:                     hpack_constants::SizeForEntry(key.size(), value_length),",
          "52:                     \"B\");",
          "53:   }",
          "54:   std::string& summary_;",
          "55: };",
          "57: absl::Status MakeStreamError(absl::Status error) {",
          "58:   GPR_DEBUG_ASSERT(!error.ok());",
          "59:   return grpc_error_set_int(std::move(error), StatusIntProperty::kStreamId, 0);",
          "60: }",
          "61: }  // namespace",
          "63: absl::Status HpackParseResult::Materialize() const {",
          "64:   if (materialized_status_.has_value()) return *materialized_status_;",
          "65:   materialized_status_ = BuildMaterialized();",
          "66:   return *materialized_status_;",
          "67: }",
          "69: absl::Status HpackParseResult::BuildMaterialized() const {",
          "70:   switch (status_.get()) {",
          "71:     case HpackParseStatus::kOk:",
          "72:       return absl::OkStatus();",
          "73:     case HpackParseStatus::kEof:",
          "74:       Crash(\"Materialize() called on EOF\");",
          "75:       break;",
          "76:     case HpackParseStatus::kMovedFrom:",
          "77:       Crash(\"Materialize() called on moved-from object\");",
          "78:       break;",
          "79:     case HpackParseStatus::kInvalidMetadata:",
          "80:       if (key_.empty()) {",
          "81:         return MakeStreamError(absl::InternalError(",
          "82:             ValidateMetadataResultToString(validate_metadata_result_)));",
          "83:       } else {",
          "84:         return MakeStreamError(absl::InternalError(absl::StrCat(",
          "85:             ValidateMetadataResultToString(validate_metadata_result_), \": \",",
          "86:             key_)));",
          "87:       }",
          "88:     case HpackParseStatus::kSoftMetadataLimitExceeded:",
          "89:     case HpackParseStatus::kHardMetadataLimitExceeded: {",
          "90:       const auto& e = metadata_limit_exceeded_;",
          "93:       std::string summary;",
          "94:       if (e.prior != nullptr) {",
          "95:         MetadataSizeLimitExceededEncoder encoder(summary);",
          "96:         e.prior->Encode(&encoder);",
          "97:       }",
          "98:       return MakeStreamError(absl::ResourceExhaustedError(absl::StrCat(",
          "99:           \"received metadata size exceeds \",",
          "100:           status_.get() == HpackParseStatus::kSoftMetadataLimitExceeded",
          "101:               ? \"soft\"",
          "102:               : \"hard\",",
          "103:           \" limit (\", e.frame_length, \" vs. \", e.limit, \")\",",
          "104:           summary.empty() ? \"\" : \"; \", summary)));",
          "105:     }",
          "106:     case HpackParseStatus::kHardMetadataLimitExceededByKey: {",
          "107:       const auto& e = metadata_limit_exceeded_by_atom_;",
          "108:       return MakeStreamError(absl::ResourceExhaustedError(",
          "109:           absl::StrCat(\"received metadata size exceeds hard limit (key length \",",
          "110:                        e.atom_length, \" vs. \", e.limit, \")\")));",
          "111:     }",
          "112:     case HpackParseStatus::kHardMetadataLimitExceededByValue: {",
          "113:       const auto& e = metadata_limit_exceeded_by_atom_;",
          "114:       return MakeStreamError(absl::ResourceExhaustedError(absl::StrCat(",
          "115:           \"received metadata size exceeds hard limit (value length \",",
          "116:           e.atom_length, \" vs. \", e.limit, \")\")));",
          "117:     }",
          "118:     case HpackParseStatus::kMetadataParseError:",
          "119:       if (!key_.empty()) {",
          "120:         return MakeStreamError(absl::InternalError(",
          "121:             absl::StrCat(\"Error parsing '\", key_, \"' metadata\")));",
          "122:       } else {",
          "123:         return MakeStreamError(absl::InternalError(\"Error parsing metadata\"));",
          "124:       }",
          "125:     case HpackParseStatus::kUnbase64Failed:",
          "126:       if (!key_.empty()) {",
          "127:         return MakeStreamError(absl::InternalError(absl::StrCat(",
          "128:             \"Error parsing '\", key_, \"' metadata: illegal base64 encoding\")));",
          "129:       } else {",
          "130:         return MakeStreamError(absl::InternalError(",
          "131:             absl::StrCat(\"Failed base64 decoding metadata\")));",
          "132:       }",
          "133:     case HpackParseStatus::kIncompleteHeaderAtBoundary:",
          "134:       return absl::InternalError(",
          "135:           \"Incomplete header at the end of a header/continuation sequence\");",
          "136:     case HpackParseStatus::kVarintOutOfRange:",
          "137:       return absl::InternalError(absl::StrFormat(",
          "138:           \"integer overflow in hpack integer decoding: have 0x%08x, \"",
          "139:           \"got byte 0x%02x\",",
          "140:           varint_out_of_range_.value, varint_out_of_range_.last_byte));",
          "141:     case HpackParseStatus::kIllegalTableSizeChange:",
          "142:       return absl::InternalError(absl::StrCat(",
          "143:           \"Attempt to make hpack table \", illegal_table_size_change_.new_size,",
          "144:           \" bytes when max is \", illegal_table_size_change_.max_size,",
          "145:           \" bytes\"));",
          "146:     case HpackParseStatus::kAddBeforeTableSizeUpdated:",
          "147:       return absl::InternalError(",
          "148:           absl::StrCat(\"HPACK max table size reduced to \",",
          "149:                        illegal_table_size_change_.new_size,",
          "150:                        \" but not reflected by hpack stream (still at \",",
          "151:                        illegal_table_size_change_.max_size, \")\"));",
          "152:     case HpackParseStatus::kParseHuffFailed:",
          "153:       if (!key_.empty()) {",
          "154:         return absl::InternalError(",
          "155:             absl::StrCat(\"Failed huffman decoding '\", key_, \"' metadata\"));",
          "156:       } else {",
          "157:         return absl::InternalError(",
          "158:             absl::StrCat(\"Failed huffman decoding metadata\"));",
          "159:       }",
          "160:       break;",
          "161:     case HpackParseStatus::kTooManyDynamicTableSizeChanges:",
          "162:       return absl::InternalError(",
          "163:           \"More than two max table size changes in a single frame\");",
          "164:     case HpackParseStatus::kMaliciousVarintEncoding:",
          "165:       return absl::InternalError(",
          "166:           \"Malicious varint encoding detected in HPACK stream\");",
          "167:     case HpackParseStatus::kInvalidHpackIndex:",
          "168:       return absl::InternalError(absl::StrFormat(",
          "169:           \"Invalid HPACK index received (%d)\", invalid_hpack_index_));",
          "170:     case HpackParseStatus::kIllegalHpackOpCode:",
          "171:       return absl::InternalError(\"Illegal hpack op code\");",
          "172:   }",
          "173:   GPR_UNREACHABLE_CODE(return absl::UnknownError(\"Should never reach here\"));",
          "174: }",
          "176: }  // namespace grpc_core",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parse_result.h||src/core/ext/transport/chttp2/transport/hpack_parse_result.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parse_result.h -> src/core/ext/transport/chttp2/transport/hpack_parse_result.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #ifndef GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "16: #define GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "18: #include <grpc/support/port_platform.h>",
          "20: #include <stdint.h>",
          "22: #include <string>",
          "23: #include <utility>",
          "25: #include \"absl/status/status.h\"",
          "26: #include \"absl/strings/str_cat.h\"",
          "27: #include \"absl/strings/string_view.h\"",
          "28: #include \"absl/types/optional.h\"",
          "30: #include <grpc/support/log.h>",
          "32: #include \"src/core/lib/gprpp/crash.h\"",
          "33: #include \"src/core/lib/surface/validate_metadata.h\"",
          "34: #include \"src/core/lib/transport/metadata_batch.h\"",
          "36: namespace grpc_core {",
          "40: enum class HpackParseStatus : uint8_t {",
          "45:   kOk,",
          "47:   kEof,",
          "50:   kMovedFrom,",
          "60:   kFirstStreamError,",
          "61:   kInvalidMetadata = kFirstStreamError,",
          "63:   kHardMetadataLimitExceeded,",
          "64:   kSoftMetadataLimitExceeded,",
          "66:   kHardMetadataLimitExceededByKey,",
          "68:   kHardMetadataLimitExceededByValue,",
          "69:   kMetadataParseError,",
          "71:   kUnbase64Failed,",
          "80:   kFirstConnectionError,",
          "82:   kIncompleteHeaderAtBoundary = kFirstConnectionError,",
          "84:   kVarintOutOfRange,",
          "86:   kInvalidHpackIndex,",
          "88:   kIllegalTableSizeChange,",
          "90:   kAddBeforeTableSizeUpdated,",
          "92:   kParseHuffFailed,",
          "94:   kTooManyDynamicTableSizeChanges,",
          "102:   kMaliciousVarintEncoding,",
          "104:   kIllegalHpackOpCode,",
          "105: };",
          "107: inline bool IsStreamError(HpackParseStatus status) {",
          "108:   return status >= HpackParseStatus::kFirstStreamError &&",
          "109:          status < HpackParseStatus::kFirstConnectionError;",
          "110: }",
          "112: inline bool IsConnectionError(HpackParseStatus status) {",
          "113:   return status >= HpackParseStatus::kFirstConnectionError;",
          "114: }",
          "116: inline bool IsEphemeralError(HpackParseStatus status) {",
          "117:   switch (status) {",
          "118:     case HpackParseStatus::kSoftMetadataLimitExceeded:",
          "119:     case HpackParseStatus::kHardMetadataLimitExceeded:",
          "120:       return true;",
          "121:     default:",
          "122:       return false;",
          "123:   }",
          "124: }",
          "126: class HpackParseResult {",
          "127:  public:",
          "128:   HpackParseResult() : HpackParseResult{HpackParseStatus::kOk} {}",
          "130:   bool ok() const { return status_.get() == HpackParseStatus::kOk; }",
          "131:   bool stream_error() const { return IsStreamError(status_.get()); }",
          "132:   bool connection_error() const { return IsConnectionError(status_.get()); }",
          "133:   bool ephemeral() const { return IsEphemeralError(status_.get()); }",
          "135:   HpackParseResult PersistentStreamErrorOrOk() const {",
          "136:     if (connection_error() || ephemeral()) return HpackParseResult();",
          "137:     return *this;",
          "138:   }",
          "140:   static HpackParseResult FromStatus(HpackParseStatus status) {",
          "143:     switch (status) {",
          "144:       case HpackParseStatus::kUnbase64Failed:",
          "145:       case HpackParseStatus::kParseHuffFailed:",
          "146:         return HpackParseResult{status};",
          "147:       default:",
          "148:         Crash(",
          "149:             absl::StrCat(\"Invalid HpackParseStatus for FromStatus: \", status));",
          "150:     }",
          "151:   }",
          "153:   static HpackParseResult FromStatusWithKey(HpackParseStatus status,",
          "154:                                             absl::string_view key) {",
          "155:     auto r = FromStatus(status);",
          "156:     r.key_ = std::string(key);",
          "157:     return r;",
          "158:   }",
          "160:   static HpackParseResult MetadataParseError(absl::string_view key) {",
          "161:     HpackParseResult r{HpackParseStatus::kMetadataParseError};",
          "162:     r.key_ = std::string(key);",
          "163:     return r;",
          "164:   }",
          "166:   static HpackParseResult AddBeforeTableSizeUpdated(uint32_t current_size,",
          "167:                                                     uint32_t max_size) {",
          "168:     HpackParseResult p{HpackParseStatus::kAddBeforeTableSizeUpdated};",
          "169:     p.illegal_table_size_change_ =",
          "170:         IllegalTableSizeChange{current_size, max_size};",
          "171:     return p;",
          "172:   }",
          "174:   static HpackParseResult MaliciousVarintEncodingError() {",
          "175:     return HpackParseResult{HpackParseStatus::kMaliciousVarintEncoding};",
          "176:   }",
          "178:   static HpackParseResult IllegalHpackOpCode() {",
          "179:     return HpackParseResult{HpackParseStatus::kIllegalHpackOpCode};",
          "180:   }",
          "182:   static HpackParseResult InvalidMetadataError(ValidateMetadataResult result,",
          "183:                                                absl::string_view key) {",
          "184:     GPR_DEBUG_ASSERT(result != ValidateMetadataResult::kOk);",
          "185:     HpackParseResult p{HpackParseStatus::kInvalidMetadata};",
          "186:     p.key_ = std::string(key);",
          "187:     p.validate_metadata_result_ = result;",
          "188:     return p;",
          "189:   }",
          "191:   static HpackParseResult IncompleteHeaderAtBoundaryError() {",
          "192:     return HpackParseResult{HpackParseStatus::kIncompleteHeaderAtBoundary};",
          "193:   }",
          "195:   static HpackParseResult VarintOutOfRangeError(uint32_t value,",
          "196:                                                 uint8_t last_byte) {",
          "197:     HpackParseResult p{HpackParseStatus::kVarintOutOfRange};",
          "198:     p.varint_out_of_range_ = VarintOutOfRange{last_byte, value};",
          "199:     return p;",
          "200:   }",
          "202:   static HpackParseResult InvalidHpackIndexError(uint32_t index) {",
          "203:     HpackParseResult p{HpackParseStatus::kInvalidHpackIndex};",
          "204:     p.invalid_hpack_index_ = index;",
          "205:     return p;",
          "206:   }",
          "208:   static HpackParseResult IllegalTableSizeChangeError(uint32_t new_size,",
          "209:                                                       uint32_t max_size) {",
          "210:     HpackParseResult p{HpackParseStatus::kIllegalTableSizeChange};",
          "211:     p.illegal_table_size_change_ = IllegalTableSizeChange{new_size, max_size};",
          "212:     return p;",
          "213:   }",
          "215:   static HpackParseResult TooManyDynamicTableSizeChangesError() {",
          "216:     return HpackParseResult{HpackParseStatus::kTooManyDynamicTableSizeChanges};",
          "217:   }",
          "219:   static HpackParseResult SoftMetadataLimitExceededError(",
          "220:       grpc_metadata_batch* metadata, uint32_t frame_length, uint32_t limit) {",
          "221:     HpackParseResult p{HpackParseStatus::kSoftMetadataLimitExceeded};",
          "222:     p.metadata_limit_exceeded_ =",
          "223:         MetadataLimitExceeded{frame_length, limit, metadata};",
          "224:     return p;",
          "225:   }",
          "227:   static HpackParseResult HardMetadataLimitExceededError(",
          "228:       grpc_metadata_batch* metadata, uint32_t frame_length, uint32_t limit) {",
          "229:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceeded};",
          "230:     p.metadata_limit_exceeded_ =",
          "231:         MetadataLimitExceeded{frame_length, limit, metadata};",
          "232:     return p;",
          "233:   }",
          "235:   static HpackParseResult HardMetadataLimitExceededByKeyError(",
          "236:       uint32_t key_length, uint32_t limit) {",
          "237:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceededByKey};",
          "238:     p.metadata_limit_exceeded_by_atom_ =",
          "239:         MetadataLimitExceededByAtom{key_length, limit};",
          "240:     return p;",
          "241:   }",
          "243:   static HpackParseResult HardMetadataLimitExceededByValueError(",
          "244:       absl::string_view key, uint32_t value_length, uint32_t limit) {",
          "245:     HpackParseResult p{HpackParseStatus::kHardMetadataLimitExceededByValue};",
          "246:     p.metadata_limit_exceeded_by_atom_ =",
          "247:         MetadataLimitExceededByAtom{value_length, limit};",
          "248:     p.key_ = std::string(key);",
          "249:     return p;",
          "250:   }",
          "254:   absl::Status Materialize() const;",
          "256:  private:",
          "257:   explicit HpackParseResult(HpackParseStatus status) : status_(status) {}",
          "258:   absl::Status BuildMaterialized() const;",
          "260:   struct VarintOutOfRange {",
          "261:     uint8_t last_byte;",
          "262:     uint32_t value;",
          "263:   };",
          "265:   struct MetadataLimitExceeded {",
          "266:     uint32_t frame_length;",
          "267:     uint32_t limit;",
          "268:     grpc_metadata_batch* prior;",
          "269:   };",
          "273:   struct MetadataLimitExceededByAtom {",
          "274:     uint32_t atom_length;",
          "275:     uint32_t limit;",
          "276:   };",
          "278:   struct IllegalTableSizeChange {",
          "279:     uint32_t new_size;",
          "280:     uint32_t max_size;",
          "281:   };",
          "283:   class StatusWrapper {",
          "284:    public:",
          "285:     explicit StatusWrapper(HpackParseStatus status) : status_(status) {}",
          "287:     StatusWrapper(const StatusWrapper&) = default;",
          "288:     StatusWrapper& operator=(const StatusWrapper&) = default;",
          "289:     StatusWrapper(StatusWrapper&& other) noexcept",
          "290:         : status_(std::exchange(other.status_, HpackParseStatus::kMovedFrom)) {}",
          "291:     StatusWrapper& operator=(StatusWrapper&& other) noexcept {",
          "292:       status_ = std::exchange(other.status_, HpackParseStatus::kMovedFrom);",
          "293:       return *this;",
          "294:     }",
          "296:     HpackParseStatus get() const { return status_; }",
          "298:    private:",
          "299:     HpackParseStatus status_;",
          "300:   };",
          "302:   StatusWrapper status_;",
          "303:   union {",
          "305:     ValidateMetadataResult validate_metadata_result_;",
          "307:     VarintOutOfRange varint_out_of_range_;",
          "309:     uint32_t invalid_hpack_index_;",
          "312:     MetadataLimitExceeded metadata_limit_exceeded_;",
          "315:     MetadataLimitExceededByAtom metadata_limit_exceeded_by_atom_;",
          "317:     IllegalTableSizeChange illegal_table_size_change_;",
          "318:   };",
          "319:   std::string key_;",
          "320:   mutable absl::optional<absl::Status> materialized_status_;",
          "321: };",
          "323: }  // namespace grpc_core",
          "325: #endif  // GRPC_SRC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HPACK_PARSE_RESULT_H",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdlib.h>",
          "26: #include <algorithm>",
          "28: #include <string>",
          "29: #include <utility>",
          "",
          "[Removed Lines]",
          "27: #include <initializer_list>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: #include \"absl/status/status.h\"",
          "33: #include \"absl/strings/match.h\"",
          "34: #include \"absl/strings/str_cat.h\"",
          "36: #include \"absl/strings/string_view.h\"",
          "37: #include \"absl/types/optional.h\"",
          "38: #include \"absl/types/span.h\"",
          "39: #include \"absl/types/variant.h\"",
          "41: #include <grpc/support/log.h>",
          "43: #include \"src/core/ext/transport/chttp2/transport/decode_huff.h\"",
          "44: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "45: #include \"src/core/lib/debug/stats.h\"",
          "46: #include \"src/core/lib/debug/stats_data.h\"",
          "47: #include \"src/core/lib/debug/trace.h\"",
          "50: #include \"src/core/lib/slice/slice.h\"",
          "51: #include \"src/core/lib/slice/slice_refcount.h\"",
          "52: #include \"src/core/lib/surface/validate_metadata.h\"",
          "",
          "[Removed Lines]",
          "35: #include \"absl/strings/str_format.h\"",
          "48: #include \"src/core/lib/gprpp/crash.h\"",
          "49: #include \"src/core/lib/gprpp/status_helper.h\"",
          "",
          "[Added Lines]",
          "39: #include <grpc/slice.h>",
          "44: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "45: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "49: #include \"src/core/lib/gprpp/match.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: constexpr Base64InverseTable kBase64InverseTable;",
          "118: }  // namespace",
          "",
          "[Removed Lines]",
          "85: absl::Status EnsureStreamError(absl::Status error) {",
          "86:   if (error.ok()) return error;",
          "87:   return grpc_error_set_int(std::move(error), StatusIntProperty::kStreamId, 0);",
          "88: }",
          "90: bool IsStreamError(const absl::Status& status) {",
          "91:   intptr_t stream_id;",
          "92:   return grpc_error_get_int(status, StatusIntProperty::kStreamId, &stream_id);",
          "93: }",
          "95: class MetadataSizeLimitExceededEncoder {",
          "96:  public:",
          "97:   explicit MetadataSizeLimitExceededEncoder(std::string& summary)",
          "98:       : summary_(summary) {}",
          "100:   void Encode(const Slice& key, const Slice& value) {",
          "101:     AddToSummary(key.as_string_view(), value.size());",
          "102:   }",
          "104:   template <typename Key, typename Value>",
          "105:   void Encode(Key, const Value& value) {",
          "106:     AddToSummary(Key::key(), EncodedSizeOfKey(Key(), value));",
          "107:   }",
          "109:  private:",
          "110:   void AddToSummary(absl::string_view key,",
          "111:                     size_t value_length) GPR_ATTRIBUTE_NOINLINE {",
          "112:     absl::StrAppend(&summary_, \" \", key, \":\",",
          "113:                     hpack_constants::SizeForEntry(key.size(), value_length),",
          "114:                     \"B\");",
          "115:   }",
          "116:   std::string& summary_;",
          "117: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122: class HPackParser::Input {",
          "123:  public:",
          "124:   Input(grpc_slice_refcount* current_slice_refcount, const uint8_t* begin,",
          "126:       : current_slice_refcount_(current_slice_refcount),",
          "127:         begin_(begin),",
          "128:         end_(end),",
          "",
          "[Removed Lines]",
          "125:         const uint8_t* end)",
          "129:         frontier_(begin) {}",
          "",
          "[Added Lines]",
          "92:         const uint8_t* end, HpackParseResult& error)",
          "96:         frontier_(begin),",
          "97:         error_(error) {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:   absl::optional<uint8_t> Next() {",
          "158:     if (end_of_stream()) {",
          "160:       return absl::optional<uint8_t>();",
          "161:     }",
          "162:     return *begin_++;",
          "",
          "[Removed Lines]",
          "159:       UnexpectedEOF();",
          "",
          "[Added Lines]",
          "127:       UnexpectedEOF(/*min_progress_size=*/1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:     do {",
          "206:       cur = Next();",
          "207:       if (!cur.has_value()) return {};",
          "208:     } while (*cur == 0x80);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     int num_redundant_0x80 = 0;",
          "179:       ++num_redundant_0x80;",
          "180:       if (num_redundant_0x80 == 16) {",
          "181:         return ParseVarintMaliciousEncoding();",
          "182:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:     return ParseVarintOutOfRange(value, *cur);",
          "213:   }",
          "224:   absl::optional<StringPrefix> ParseStringPrefix() {",
          "225:     auto cur = Next();",
          "",
          "[Removed Lines]",
          "216:   struct StringPrefix {",
          "218:     uint32_t length;",
          "220:     bool huff;",
          "221:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "243:     return StringPrefix{strlen, huff};",
          "244:   }",
          "247:   bool eof_error() const {",
          "249:   }",
          "258:   bool has_error() const { return !error_.ok(); }",
          "",
          "[Removed Lines]",
          "248:     return eof_error_ || (!error_.ok() && !IsStreamError(error_));",
          "252:   grpc_error_handle TakeError() {",
          "253:     grpc_error_handle out = error_;",
          "254:     error_ = absl::OkStatus();",
          "255:     return out;",
          "256:   }",
          "",
          "[Added Lines]",
          "215:     return min_progress_size_ != 0 || error_.connection_error();",
          "219:   size_t min_progress_size() const { return min_progress_size_; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "270:   }",
          "277:     SetError(std::move(error));",
          "278:     begin_ = end_;",
          "279:   }",
          "285:   }",
          "291:   const uint8_t* frontier() const { return frontier_; }",
          "",
          "[Removed Lines]",
          "264:   GPR_ATTRIBUTE_NOINLINE void SetErrorAndContinueParsing(",
          "265:       grpc_error_handle error) {",
          "266:     GPR_ASSERT(!error.ok());",
          "269:     SetError(EnsureStreamError(std::move(error)));",
          "275:   GPR_ATTRIBUTE_NOINLINE void SetErrorAndStopParsing(grpc_error_handle error) {",
          "276:     GPR_ASSERT(!error.ok());",
          "282:   void UnexpectedEOF() {",
          "283:     if (!error_.ok() && !IsStreamError(error_)) return;",
          "284:     eof_error_ = true;",
          "288:   void UpdateFrontier() { frontier_ = begin_; }",
          "",
          "[Added Lines]",
          "227:   void SetErrorAndContinueParsing(HpackParseResult error) {",
          "228:     GPR_DEBUG_ASSERT(error.stream_error());",
          "229:     SetError(std::move(error));",
          "235:   void SetErrorAndStopParsing(HpackParseResult error) {",
          "236:     GPR_DEBUG_ASSERT(error.connection_error());",
          "244:   void UnexpectedEOF(size_t min_progress_size) {",
          "245:     GPR_ASSERT(min_progress_size > 0);",
          "246:     if (min_progress_size_ != 0 || error_.connection_error()) {",
          "247:       GPR_DEBUG_ASSERT(eof_error());",
          "248:       return;",
          "249:     }",
          "252:     min_progress_size_ = min_progress_size + (begin_ - frontier_);",
          "253:     GPR_DEBUG_ASSERT(eof_error());",
          "257:   void UpdateFrontier() {",
          "258:     GPR_DEBUG_ASSERT(skip_bytes_ == 0);",
          "259:     frontier_ = begin_;",
          "260:   }",
          "262:   void UpdateFrontierAndSkipBytes(size_t skip_bytes) {",
          "263:     UpdateFrontier();",
          "264:     size_t remaining = end_ - begin_;",
          "265:     if (skip_bytes >= remaining) {",
          "269:       skip_bytes_ = skip_bytes - remaining;",
          "270:       frontier_ = end_;",
          "271:     } else {",
          "273:       frontier_ += skip_bytes_;",
          "274:     }",
          "275:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295:   absl::optional<uint32_t> ParseVarintOutOfRange(uint32_t value,",
          "296:                                                  uint8_t last_byte) {",
          "301:     return absl::optional<uint32_t>();",
          "302:   }",
          "310:         error_ = std::move(error);  // connection errors dominate",
          "311:       }",
          "312:       return;",
          "",
          "[Removed Lines]",
          "297:     SetErrorAndStopParsing(absl::InternalError(absl::StrFormat(",
          "298:         \"integer overflow in hpack integer decoding: have 0x%08x, \"",
          "299:         \"got byte 0x%02x on byte 5\",",
          "300:         value, last_byte)));",
          "307:   void SetError(grpc_error_handle error) {",
          "308:     if (!error_.ok() || eof_error_) {",
          "309:       if (!IsStreamError(error) && IsStreamError(error_)) {",
          "",
          "[Added Lines]",
          "284:     SetErrorAndStopParsing(",
          "285:         HpackParseResult::VarintOutOfRangeError(value, last_byte));",
          "286:     return absl::optional<uint32_t>();",
          "287:   }",
          "290:   absl::optional<uint32_t> ParseVarintMaliciousEncoding() {",
          "291:     SetErrorAndStopParsing(HpackParseResult::MaliciousVarintEncodingError());",
          "298:   void SetError(HpackParseResult error) {",
          "299:     if (!error_.ok() || min_progress_size_ > 0) {",
          "300:       if (error.connection_error() && !error_.connection_error()) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:   const uint8_t* frontier_;",
          "329: };",
          "359:   }",
          "376:   }",
          "407:   }",
          "421:     }",
          "428:       uint32_t bits = kBase64InverseTable.table[*cur];",
          "429:       if (bits > 63) return {};",
          "430:       uint32_t buffer = bits << 18;",
          "433:       bits = kBase64InverseTable.table[*cur];",
          "434:       if (bits > 63) return {};",
          "435:       buffer |= bits << 12;",
          "438:       bits = kBase64InverseTable.table[*cur];",
          "439:       if (bits > 63) return {};",
          "440:       buffer |= bits << 6;",
          "446:       ++cur;",
          "451:     }",
          "496:   }",
          "528: }",
          "531:   absl::optional<std::vector<uint8_t>> result;",
          "532:   if (auto* p = absl::get_if<Slice>(&s.value_)) {",
          "533:     result = Unbase64Loop(p->begin(), p->end());",
          "",
          "[Removed Lines]",
          "326:   grpc_error_handle error_;",
          "328:   bool eof_error_ = false;",
          "333: class HPackParser::String {",
          "334:  public:",
          "336:   struct ParseResult;",
          "338:   enum class ParseStatus {",
          "340:     kOk,",
          "342:     kEof,",
          "344:     kParseHuffFailed,",
          "346:     kUnbase64Failed,",
          "347:   };",
          "349:   String() : value_(absl::Span<const uint8_t>()) {}",
          "350:   String(const String&) = delete;",
          "351:   String& operator=(const String&) = delete;",
          "352:   String(String&& other) noexcept : value_(std::move(other.value_)) {",
          "353:     other.value_ = absl::Span<const uint8_t>();",
          "354:   }",
          "355:   String& operator=(String&& other) noexcept {",
          "356:     value_ = std::move(other.value_);",
          "357:     other.value_ = absl::Span<const uint8_t>();",
          "358:     return *this;",
          "362:   Slice Take();",
          "365:   absl::string_view string_view() const {",
          "366:     if (auto* p = absl::get_if<Slice>(&value_)) {",
          "367:       return p->as_string_view();",
          "368:     } else if (auto* p = absl::get_if<absl::Span<const uint8_t>>(&value_)) {",
          "369:       return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "370:                                p->size());",
          "371:     } else if (auto* p = absl::get_if<std::vector<uint8_t>>(&value_)) {",
          "372:       return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "373:                                p->size());",
          "374:     }",
          "375:     GPR_UNREACHABLE_CODE(return absl::string_view());",
          "379:   static ParseResult Parse(Input* input);",
          "382:   static ParseResult ParseBinary(Input* input);",
          "384:  private:",
          "385:   void AppendBytes(const uint8_t* data, size_t length);",
          "386:   explicit String(std::vector<uint8_t> v) : value_(std::move(v)) {}",
          "387:   explicit String(absl::Span<const uint8_t> v) : value_(v) {}",
          "388:   String(grpc_slice_refcount* r, const uint8_t* begin, const uint8_t* end)",
          "389:       : value_(Slice::FromRefcountAndBytes(r, begin, end)) {}",
          "393:   template <typename Out>",
          "394:   static ParseStatus ParseHuff(Input* input, uint32_t length, Out output) {",
          "396:     if (input->remaining() < length) {",
          "397:       input->UnexpectedEOF();",
          "398:       GPR_DEBUG_ASSERT(input->eof_error());",
          "399:       return ParseStatus::kEof;",
          "400:     }",
          "402:     const uint8_t* p = input->cur_ptr();",
          "403:     input->Advance(length);",
          "404:     return HuffDecoder<Out>(output, p, p + length).Run()",
          "405:                ? ParseStatus::kOk",
          "406:                : ParseStatus::kParseHuffFailed;",
          "410:   static ParseResult ParseUncompressed(Input* input, uint32_t length,",
          "411:                                        uint32_t wire_size);",
          "414:   static ParseResult Unbase64(String s);",
          "417:   static absl::optional<std::vector<uint8_t>> Unbase64Loop(const uint8_t* cur,",
          "418:                                                            const uint8_t* end) {",
          "419:     while (cur != end && end[-1] == '=') {",
          "420:       --end;",
          "423:     std::vector<uint8_t> out;",
          "424:     out.reserve(3 * (end - cur) / 4 + 3);",
          "427:     while (end - cur >= 4) {",
          "431:       ++cur;",
          "436:       ++cur;",
          "441:       ++cur;",
          "443:       bits = kBase64InverseTable.table[*cur];",
          "444:       if (bits > 63) return {};",
          "445:       buffer |= bits;",
          "448:       out.insert(out.end(), {static_cast<uint8_t>(buffer >> 16),",
          "449:                              static_cast<uint8_t>(buffer >> 8),",
          "450:                              static_cast<uint8_t>(buffer)});",
          "453:     switch (end - cur) {",
          "454:       case 0:",
          "455:         return out;",
          "456:       case 1:",
          "457:         return {};",
          "458:       case 2: {",
          "459:         uint32_t bits = kBase64InverseTable.table[*cur];",
          "460:         if (bits > 63) return {};",
          "461:         uint32_t buffer = bits << 18;",
          "463:         ++cur;",
          "464:         bits = kBase64InverseTable.table[*cur];",
          "465:         if (bits > 63) return {};",
          "466:         buffer |= bits << 12;",
          "468:         if (buffer & 0xffff) return {};",
          "469:         out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "470:         return out;",
          "471:       }",
          "472:       case 3: {",
          "473:         uint32_t bits = kBase64InverseTable.table[*cur];",
          "474:         if (bits > 63) return {};",
          "475:         uint32_t buffer = bits << 18;",
          "477:         ++cur;",
          "478:         bits = kBase64InverseTable.table[*cur];",
          "479:         if (bits > 63) return {};",
          "480:         buffer |= bits << 12;",
          "482:         ++cur;",
          "483:         bits = kBase64InverseTable.table[*cur];",
          "484:         if (bits > 63) return {};",
          "485:         buffer |= bits << 6;",
          "487:         ++cur;",
          "488:         if (buffer & 0xff) return {};",
          "489:         out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "490:         out.push_back(static_cast<uint8_t>(buffer >> 8));",
          "491:         return out;",
          "492:       }",
          "493:     }",
          "495:     GPR_UNREACHABLE_CODE(return out;);",
          "498:   absl::variant<Slice, absl::Span<const uint8_t>, std::vector<uint8_t>> value_;",
          "499: };",
          "501: struct HPackParser::String::ParseResult {",
          "502:   ParseResult() = delete;",
          "503:   ParseResult(ParseStatus status, size_t wire_size, String value)",
          "504:       : status(status), wire_size(wire_size), value(std::move(value)) {}",
          "505:   ParseStatus status;",
          "506:   size_t wire_size;",
          "507:   String value;",
          "508: };",
          "510: HPackParser::String::ParseResult HPackParser::String::ParseUncompressed(",
          "511:     Input* input, uint32_t length, uint32_t wire_size) {",
          "513:   if (input->remaining() < length) {",
          "514:     input->UnexpectedEOF();",
          "515:     GPR_DEBUG_ASSERT(input->eof_error());",
          "516:     return ParseResult{ParseStatus::kEof, wire_size, String{}};",
          "517:   }",
          "518:   auto* refcount = input->slice_refcount();",
          "519:   auto* p = input->cur_ptr();",
          "520:   input->Advance(length);",
          "521:   if (refcount != nullptr) {",
          "522:     return ParseResult{ParseStatus::kOk, wire_size,",
          "523:                        String(refcount, p, p + length)};",
          "524:   } else {",
          "525:     return ParseResult{ParseStatus::kOk, wire_size,",
          "526:                        String(absl::Span<const uint8_t>(p, length))};",
          "527:   }",
          "530: HPackParser::String::ParseResult HPackParser::String::Unbase64(String s) {",
          "",
          "[Added Lines]",
          "317:   HpackParseResult& error_;",
          "320:   size_t min_progress_size_ = 0;",
          "324:   size_t skip_bytes_ = 0;",
          "327: absl::string_view HPackParser::String::string_view() const {",
          "328:   if (auto* p = absl::get_if<Slice>(&value_)) {",
          "329:     return p->as_string_view();",
          "330:   } else if (auto* p = absl::get_if<absl::Span<const uint8_t>>(&value_)) {",
          "331:     return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "332:                              p->size());",
          "333:   } else if (auto* p = absl::get_if<std::vector<uint8_t>>(&value_)) {",
          "334:     return absl::string_view(reinterpret_cast<const char*>(p->data()),",
          "335:                              p->size());",
          "337:   GPR_UNREACHABLE_CODE(return absl::string_view());",
          "338: }",
          "340: template <typename Out>",
          "341: HpackParseStatus HPackParser::String::ParseHuff(Input* input, uint32_t length,",
          "342:                                                 Out output) {",
          "344:   if (input->remaining() < length) {",
          "345:     input->UnexpectedEOF(/*min_progress_size=*/length);",
          "346:     return HpackParseStatus::kEof;",
          "349:   const uint8_t* p = input->cur_ptr();",
          "350:   input->Advance(length);",
          "351:   return HuffDecoder<Out>(output, p, p + length).Run()",
          "352:              ? HpackParseStatus::kOk",
          "353:              : HpackParseStatus::kParseHuffFailed;",
          "354: }",
          "356: struct HPackParser::String::StringResult {",
          "357:   StringResult() = delete;",
          "358:   StringResult(HpackParseStatus status, size_t wire_size, String value)",
          "359:       : status(status), wire_size(wire_size), value(std::move(value)) {}",
          "360:   HpackParseStatus status;",
          "361:   size_t wire_size;",
          "362:   String value;",
          "363: };",
          "365: HPackParser::String::StringResult HPackParser::String::ParseUncompressed(",
          "366:     Input* input, uint32_t length, uint32_t wire_size) {",
          "368:   if (input->remaining() < length) {",
          "369:     input->UnexpectedEOF(/*min_progress_size=*/length);",
          "370:     GPR_DEBUG_ASSERT(input->eof_error());",
          "371:     return StringResult{HpackParseStatus::kEof, wire_size, String{}};",
          "372:   }",
          "373:   auto* refcount = input->slice_refcount();",
          "374:   auto* p = input->cur_ptr();",
          "375:   input->Advance(length);",
          "376:   if (refcount != nullptr) {",
          "377:     return StringResult{HpackParseStatus::kOk, wire_size,",
          "378:                         String(refcount, p, p + length)};",
          "379:   } else {",
          "380:     return StringResult{HpackParseStatus::kOk, wire_size,",
          "381:                         String(absl::Span<const uint8_t>(p, length))};",
          "382:   }",
          "383: }",
          "385: absl::optional<std::vector<uint8_t>> HPackParser::String::Unbase64Loop(",
          "386:     const uint8_t* cur, const uint8_t* end) {",
          "387:   while (cur != end && end[-1] == '=') {",
          "388:     --end;",
          "391:   std::vector<uint8_t> out;",
          "392:   out.reserve(3 * (end - cur) / 4 + 3);",
          "395:   while (end - cur >= 4) {",
          "396:     uint32_t bits = kBase64InverseTable.table[*cur];",
          "397:     if (bits > 63) return {};",
          "398:     uint32_t buffer = bits << 18;",
          "399:     ++cur;",
          "401:     bits = kBase64InverseTable.table[*cur];",
          "402:     if (bits > 63) return {};",
          "403:     buffer |= bits << 12;",
          "404:     ++cur;",
          "406:     bits = kBase64InverseTable.table[*cur];",
          "407:     if (bits > 63) return {};",
          "408:     buffer |= bits << 6;",
          "409:     ++cur;",
          "411:     bits = kBase64InverseTable.table[*cur];",
          "412:     if (bits > 63) return {};",
          "413:     buffer |= bits;",
          "414:     ++cur;",
          "416:     out.insert(out.end(), {static_cast<uint8_t>(buffer >> 16),",
          "417:                            static_cast<uint8_t>(buffer >> 8),",
          "418:                            static_cast<uint8_t>(buffer)});",
          "419:   }",
          "421:   switch (end - cur) {",
          "422:     case 0:",
          "423:       return out;",
          "424:     case 1:",
          "425:       return {};",
          "426:     case 2: {",
          "427:       uint32_t bits = kBase64InverseTable.table[*cur];",
          "428:       if (bits > 63) return {};",
          "429:       uint32_t buffer = bits << 18;",
          "431:       ++cur;",
          "432:       bits = kBase64InverseTable.table[*cur];",
          "433:       if (bits > 63) return {};",
          "434:       buffer |= bits << 12;",
          "436:       if (buffer & 0xffff) return {};",
          "437:       out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "438:       return out;",
          "440:     case 3: {",
          "445:       ++cur;",
          "450:       ++cur;",
          "456:       if (buffer & 0xff) return {};",
          "457:       out.push_back(static_cast<uint8_t>(buffer >> 16));",
          "458:       out.push_back(static_cast<uint8_t>(buffer >> 8));",
          "459:       return out;",
          "463:   GPR_UNREACHABLE_CODE(return out;);",
          "466: HPackParser::String::StringResult HPackParser::String::Unbase64(String s) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "539:     result = Unbase64Loop(p->data(), p->data() + p->size());",
          "540:   }",
          "541:   if (!result.has_value()) {",
          "544:   }",
          "547: }",
          "557:     std::vector<uint8_t> output;",
          "560:     size_t wire_len = output.size();",
          "562:   }",
          "564: }",
          "576:       input->Advance(1);",
          "578:     }",
          "582:     return Unbase64(std::move(base64.value));",
          "583:   } else {",
          "",
          "[Removed Lines]",
          "542:     return ParseResult{ParseStatus::kUnbase64Failed, s.string_view().length(),",
          "543:                        String{}};",
          "545:   return ParseResult{ParseStatus::kOk, s.string_view().length(),",
          "546:                      String(std::move(*result))};",
          "549: HPackParser::String::ParseResult HPackParser::String::Parse(Input* input) {",
          "550:   auto pfx = input->ParseStringPrefix();",
          "551:   if (!pfx.has_value()) {",
          "552:     GPR_DEBUG_ASSERT(input->eof_error());",
          "553:     return ParseResult{ParseStatus::kEof, 0, String{}};",
          "554:   }",
          "555:   if (pfx->huff) {",
          "558:     ParseStatus sts = ParseHuff(input, pfx->length,",
          "559:                                 [&output](uint8_t c) { output.push_back(c); });",
          "561:     return ParseResult{sts, wire_len, String(std::move(output))};",
          "563:   return ParseUncompressed(input, pfx->length, pfx->length);",
          "566: HPackParser::String::ParseResult HPackParser::String::ParseBinary(",
          "567:     Input* input) {",
          "568:   auto pfx = input->ParseStringPrefix();",
          "569:   if (!pfx.has_value()) {",
          "570:     GPR_DEBUG_ASSERT(input->eof_error());",
          "571:     return ParseResult{ParseStatus::kEof, 0, String{}};",
          "572:   }",
          "573:   if (!pfx->huff) {",
          "574:     if (pfx->length > 0 && input->peek() == 0) {",
          "577:       return ParseUncompressed(input, pfx->length - 1, pfx->length);",
          "580:     auto base64 = ParseUncompressed(input, pfx->length, pfx->length);",
          "581:     if (base64.status != ParseStatus::kOk) return base64;",
          "",
          "[Added Lines]",
          "478:     return StringResult{HpackParseStatus::kUnbase64Failed,",
          "479:                         s.string_view().length(), String{}};",
          "481:   return StringResult{HpackParseStatus::kOk, s.string_view().length(),",
          "482:                       String(std::move(*result))};",
          "485: HPackParser::String::StringResult HPackParser::String::Parse(Input* input,",
          "486:                                                              bool is_huff,",
          "487:                                                              size_t length) {",
          "488:   if (is_huff) {",
          "491:     HpackParseStatus sts =",
          "492:         ParseHuff(input, length, [&output](uint8_t c) { output.push_back(c); });",
          "494:     return StringResult{sts, wire_len, String(std::move(output))};",
          "496:   return ParseUncompressed(input, length, length);",
          "499: HPackParser::String::StringResult HPackParser::String::ParseBinary(",
          "500:     Input* input, bool is_huff, size_t length) {",
          "501:   if (!is_huff) {",
          "502:     if (length > 0 && input->peek() == 0) {",
          "505:       return ParseUncompressed(input, length - 1, length);",
          "508:     auto base64 = ParseUncompressed(input, length, length);",
          "509:     if (base64.status != HpackParseStatus::kOk) return base64;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "588:     enum class State { kUnsure, kBinary, kBase64 };",
          "589:     State state = State::kUnsure;",
          "608:     }",
          "609:     switch (state) {",
          "610:       case State::kUnsure:",
          "614:       case State::kBinary:",
          "616:         {",
          "617:           size_t wire_len = decompressed.size();",
          "620:         }",
          "621:       case State::kBase64:",
          "",
          "[Removed Lines]",
          "590:     auto sts =",
          "591:         ParseHuff(input, pfx->length, [&state, &decompressed](uint8_t c) {",
          "592:           if (state == State::kUnsure) {",
          "594:             if (c == 0) {",
          "596:               state = State::kBinary;",
          "597:               return;",
          "598:             } else {",
          "600:               state = State::kBase64;",
          "601:             }",
          "602:           }",
          "604:           decompressed.push_back(c);",
          "605:         });",
          "606:     if (sts != ParseStatus::kOk) {",
          "607:       return ParseResult{sts, 0, String{}};",
          "612:         return ParseResult{ParseStatus::kOk, 0,",
          "613:                            String(absl::Span<const uint8_t>())};",
          "618:           return ParseResult{ParseStatus::kOk, wire_len,",
          "619:                              String(std::move(decompressed))};",
          "",
          "[Added Lines]",
          "518:     auto sts = ParseHuff(input, length, [&state, &decompressed](uint8_t c) {",
          "519:       if (state == State::kUnsure) {",
          "521:         if (c == 0) {",
          "523:           state = State::kBinary;",
          "524:           return;",
          "525:         } else {",
          "527:           state = State::kBase64;",
          "528:         }",
          "529:       }",
          "531:       decompressed.push_back(c);",
          "532:     });",
          "533:     if (sts != HpackParseStatus::kOk) {",
          "534:       return StringResult{sts, 0, String{}};",
          "539:         return StringResult{HpackParseStatus::kOk, 0,",
          "540:                             String(absl::Span<const uint8_t>())};",
          "545:           return StringResult{HpackParseStatus::kOk, wire_len,",
          "546:                               String(std::move(decompressed))};",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "630: class HPackParser::Parser {",
          "631:  public:",
          "635:       : input_(input),",
          "636:         metadata_buffer_(metadata_buffer),",
          "641:         log_info_(log_info) {}",
          "648:     }",
          "651:   }",
          "654:     auto cur = *input_->Next();",
          "655:     switch (cur >> 4) {",
          "",
          "[Removed Lines]",
          "632:   Parser(Input* input, grpc_metadata_batch* metadata_buffer, HPackTable* table,",
          "633:          uint8_t* dynamic_table_updates_allowed, uint32_t* frame_length,",
          "634:          RandomEarlyDetection* metadata_early_detection, LogInfo log_info)",
          "637:         table_(table),",
          "638:         dynamic_table_updates_allowed_(dynamic_table_updates_allowed),",
          "639:         frame_length_(frame_length),",
          "640:         metadata_early_detection_(metadata_early_detection),",
          "644:   bool SkipPriority() {",
          "645:     if (input_->remaining() < 5) {",
          "646:       input_->UnexpectedEOF();",
          "647:       return false;",
          "649:     input_->Advance(5);",
          "650:     return true;",
          "653:   bool Parse() {",
          "",
          "[Added Lines]",
          "559:   Parser(Input* input, grpc_metadata_batch*& metadata_buffer,",
          "560:          InterSliceState& state, LogInfo log_info)",
          "563:         state_(state),",
          "566:   bool Parse() {",
          "567:     switch (state_.parse_state) {",
          "568:       case ParseState::kTop:",
          "569:         return ParseTop();",
          "570:       case ParseState::kParsingKeyLength:",
          "571:         return ParseKeyLength();",
          "572:       case ParseState::kParsingKeyBody:",
          "573:         return ParseKeyBody();",
          "574:       case ParseState::kSkippingKeyBody:",
          "575:         return SkipKeyBody();",
          "576:       case ParseState::kParsingValueLength:",
          "577:         return ParseValueLength();",
          "578:       case ParseState::kParsingValueBody:",
          "579:         return ParseValueBody();",
          "580:       case ParseState::kSkippingValueLength:",
          "581:         return SkipValueLength();",
          "582:       case ParseState::kSkippingValueBody:",
          "583:         return SkipValueBody();",
          "585:     GPR_UNREACHABLE_CODE(return false);",
          "588:  private:",
          "589:   bool ParseTop() {",
          "590:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "663:       case 1:",
          "664:         switch (cur & 0xf) {",
          "665:           case 0:  // literal key",
          "667:           case 0xf:  // varint encoded key index",
          "669:           default:  // inline encoded key index",
          "671:         }",
          "",
          "[Removed Lines]",
          "666:             return FinishHeaderOmitFromTable(ParseLiteralKey());",
          "668:             return FinishHeaderOmitFromTable(ParseVarIdxKey(0xf));",
          "670:             return FinishHeaderOmitFromTable(ParseIdxKey(cur & 0xf));",
          "",
          "[Added Lines]",
          "603:             return StartParseLiteralKey(false);",
          "605:             return StartVarIdxKey(0xf, false);",
          "607:             return StartIdxKey(cur & 0xf, false);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "694:       case 4:",
          "695:         if (cur == 0x40) {",
          "698:         }",
          "699:         ABSL_FALLTHROUGH_INTENDED;",
          "700:       case 5:",
          "701:       case 6:",
          "704:       case 7:",
          "705:         if (cur == 0x7f) {",
          "708:         } else {",
          "711:         }",
          "",
          "[Removed Lines]",
          "697:           return FinishHeaderAndAddToTable(ParseLiteralKey());",
          "703:         return FinishHeaderAndAddToTable(ParseIdxKey(cur & 0x3f));",
          "707:           return FinishHeaderAndAddToTable(ParseVarIdxKey(0x3f));",
          "710:           return FinishHeaderAndAddToTable(ParseIdxKey(cur & 0x3f));",
          "",
          "[Added Lines]",
          "634:           return StartParseLiteralKey(true);",
          "640:         return StartIdxKey(cur & 0x3f, true);",
          "644:           return StartVarIdxKey(0x3f, true);",
          "647:           return StartIdxKey(cur & 0x3f, true);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "719:         if (cur == 0x80) {",
          "721:           input_->SetErrorAndStopParsing(",
          "723:           return false;",
          "724:         }",
          "725:         ABSL_FALLTHROUGH_INTENDED;",
          "",
          "[Removed Lines]",
          "722:               absl::InternalError(\"Illegal hpack op code\"));",
          "",
          "[Added Lines]",
          "659:               HpackParseResult::IllegalHpackOpCode());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "743:     GPR_UNREACHABLE_CODE(abort());",
          "744:   }",
          "747:   void GPR_ATTRIBUTE_NOINLINE LogHeader(const HPackTable::Memento& memento) {",
          "748:     const char* type;",
          "749:     switch (log_info_.type) {",
          "",
          "[Removed Lines]",
          "746:  private:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "757:         type = \"???\";",
          "758:         break;",
          "759:     }",
          "768:   }",
          "770:   void EmitHeader(const HPackTable::Memento& md) {",
          "778:     if (!md.parse_status.ok()) {",
          "781:     }",
          "782:     if (GPR_LIKELY(metadata_buffer_ != nullptr)) {",
          "783:       metadata_buffer_->Set(md.md);",
          "784:     }",
          "785:   }",
          "791:     if (GRPC_TRACE_FLAG_ENABLED(grpc_trace_chttp2_hpack_parser)) {",
          "793:     }",
          "800:       return false;",
          "801:     };",
          "802:     return true;",
          "",
          "[Removed Lines]",
          "760:     gpr_log(GPR_DEBUG, \"HTTP:%d:%s:%s: %s%s\", log_info_.stream_id, type,",
          "761:             log_info_.is_client ? \"CLI\" : \"SVR\",",
          "762:             memento.md.DebugString().c_str(),",
          "763:             memento.parse_status.ok()",
          "764:                 ? \"\"",
          "765:                 : absl::StrCat(",
          "766:                       \" (parse error: \", memento.parse_status.ToString(), \")\")",
          "767:                       .c_str());",
          "773:     if (!input_->has_error() &&",
          "774:         metadata_early_detection_->MustReject(*frame_length_)) {",
          "776:       HandleMetadataHardSizeLimitExceeded(md);",
          "777:     }",
          "780:       HandleMetadataParseError(md.parse_status);",
          "787:   bool FinishHeaderAndAddToTable(absl::optional<HPackTable::Memento> md) {",
          "789:     if (!md.has_value()) return false;",
          "792:       LogHeader(*md);",
          "795:     EmitHeader(*md);",
          "797:     grpc_error_handle err = table_->Add(std::move(*md));",
          "798:     if (GPR_UNLIKELY(!err.ok())) {",
          "799:       input_->SetErrorAndStopParsing(std::move(err));",
          "",
          "[Added Lines]",
          "696:     gpr_log(",
          "697:         GPR_DEBUG, \"HTTP:%d:%s:%s: %s%s\", log_info_.stream_id, type,",
          "698:         log_info_.is_client ? \"CLI\" : \"SVR\", memento.md.DebugString().c_str(),",
          "699:         memento.parse_status.ok()",
          "700:             ? \"\"",
          "701:             : absl::StrCat(\" (parse error: \",",
          "702:                            memento.parse_status.Materialize().ToString(), \")\")",
          "703:                   .c_str());",
          "708:     state_.frame_length += md.md.transport_size();",
          "711:       input_->SetErrorAndContinueParsing(md.parse_status);",
          "716:     if (state_.metadata_early_detection.MustReject(state_.frame_length)) {",
          "718:       input_->SetErrorAndContinueParsing(",
          "719:           HpackParseResult::HardMetadataLimitExceededError(",
          "720:               std::exchange(metadata_buffer_, nullptr), state_.frame_length,",
          "721:               state_.metadata_early_detection.hard_limit()));",
          "722:     }",
          "725:   bool FinishHeaderAndAddToTable(HPackTable::Memento md) {",
          "728:       LogHeader(md);",
          "731:     EmitHeader(md);",
          "733:     if (GPR_UNLIKELY(!state_.hpack_table.Add(std::move(md)))) {",
          "734:       input_->SetErrorAndStopParsing(",
          "735:           HpackParseResult::AddBeforeTableSizeUpdated(",
          "736:               state_.hpack_table.current_table_bytes(),",
          "737:               state_.hpack_table.max_bytes()));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "817:     EmitHeader(md);",
          "818:   }",
          "838:     }",
          "880:     switch (key.status) {",
          "882:         break;",
          "890:         GPR_DEBUG_ASSERT(input_->eof_error());",
          "892:     }",
          "904:   }",
          "911:     }",
          "913:   }",
          "921:     }",
          "934:   }",
          "940:     } else {",
          "942:     }",
          "943:   }",
          "946:   bool FinishIndexed(absl::optional<uint32_t> index) {",
          "948:     if (!index.has_value()) return false;",
          "950:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "951:       InvalidHPackIndexError(*index);",
          "952:       return false;",
          "",
          "[Removed Lines]",
          "822:   class MementoBuilder {",
          "823:    public:",
          "824:     explicit MementoBuilder(Input* input, absl::string_view key_string,",
          "825:                             absl::Status status = absl::OkStatus())",
          "826:         : input_(input), key_string_(key_string), status_(std::move(status)) {}",
          "828:     auto ErrorHandler() {",
          "829:       return [this](absl::string_view error, const Slice&) {",
          "830:         auto message =",
          "831:             absl::StrCat(\"Error parsing '\", key_string_,",
          "832:                          \"' metadata: error=\", error, \" key=\", key_string_);",
          "833:         gpr_log(GPR_ERROR, \"%s\", message.c_str());",
          "834:         if (status_.ok()) {",
          "835:           status_ = absl::InternalError(message);",
          "836:         }",
          "837:       };",
          "840:     HPackTable::Memento Build(ParsedMetadata<grpc_metadata_batch> memento) {",
          "841:       return HPackTable::Memento{std::move(memento), std::move(status_)};",
          "842:     }",
          "847:     bool HandleParseResult(String::ParseStatus status) {",
          "848:       auto continuable = [this](absl::string_view error) {",
          "849:         auto this_error = absl::InternalError(absl::StrCat(",
          "850:             \"Error parsing '\", key_string_, \"' metadata: error=\", error));",
          "851:         if (status_.ok()) status_ = this_error;",
          "852:         input_->SetErrorAndContinueParsing(std::move(this_error));",
          "853:       };",
          "854:       switch (status) {",
          "855:         case String::ParseStatus::kOk:",
          "856:           return true;",
          "857:         case String::ParseStatus::kParseHuffFailed:",
          "858:           input_->SetErrorAndStopParsing(",
          "859:               absl::InternalError(\"Huffman decoding failed\"));",
          "860:           return false;",
          "861:         case String::ParseStatus::kUnbase64Failed:",
          "862:           continuable(\"illegal base64 encoding\");",
          "863:           return true;",
          "864:         case String::ParseStatus::kEof:",
          "865:           GPR_DEBUG_ASSERT(input_->eof_error());",
          "866:           return false;",
          "867:       }",
          "868:       GPR_UNREACHABLE_CODE(return false);",
          "869:     }",
          "871:    private:",
          "872:     Input* input_;",
          "873:     absl::string_view key_string_;",
          "874:     absl::Status status_;",
          "875:   };",
          "878:   absl::optional<HPackTable::Memento> ParseLiteralKey() {",
          "879:     auto key = String::Parse(input_);",
          "881:       case String::ParseStatus::kOk:",
          "883:       case String::ParseStatus::kParseHuffFailed:",
          "884:         input_->SetErrorAndStopParsing(",
          "885:             absl::InternalError(\"Huffman decoding failed\"));",
          "886:         return absl::nullopt;",
          "887:       case String::ParseStatus::kUnbase64Failed:",
          "888:         Crash(\"unreachable\");",
          "889:       case String::ParseStatus::kEof:",
          "891:         return absl::nullopt;",
          "893:     auto key_string = key.value.string_view();",
          "894:     auto value = ParseValueString(absl::EndsWith(key_string, \"-bin\"));",
          "895:     MementoBuilder builder(input_, key_string,",
          "896:                            EnsureStreamError(ValidateKey(key_string)));",
          "897:     if (!builder.HandleParseResult(value.status)) return absl::nullopt;",
          "898:     auto value_slice = value.value.Take();",
          "899:     const auto transport_size =",
          "900:         key_string.size() + value.wire_size + hpack_constants::kEntryOverhead;",
          "901:     return builder.Build(",
          "902:         grpc_metadata_batch::Parse(key_string, std::move(value_slice),",
          "903:                                    transport_size, builder.ErrorHandler()));",
          "906:   absl::Status ValidateKey(absl::string_view key) {",
          "907:     if (key == HttpSchemeMetadata::key() || key == HttpMethodMetadata::key() ||",
          "908:         key == HttpAuthorityMetadata::key() || key == HttpPathMetadata::key() ||",
          "909:         key == HttpStatusMetadata::key()) {",
          "910:       return absl::OkStatus();",
          "912:     return ValidateHeaderKeyIsLegal(key);",
          "916:   absl::optional<HPackTable::Memento> ParseIdxKey(uint32_t index) {",
          "917:     const auto* elem = table_->Lookup(index);",
          "918:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "919:       InvalidHPackIndexError(index);",
          "920:       return absl::optional<HPackTable::Memento>();",
          "922:     MementoBuilder builder(input_, elem->md.key(), elem->parse_status);",
          "923:     auto value = ParseValueString(elem->md.is_binary_header());",
          "924:     if (!builder.HandleParseResult(value.status)) return absl::nullopt;",
          "925:     return builder.Build(elem->md.WithNewValue(",
          "926:         value.value.Take(), value.wire_size, builder.ErrorHandler()));",
          "927:   };",
          "930:   absl::optional<HPackTable::Memento> ParseVarIdxKey(uint32_t offset) {",
          "931:     auto index = input_->ParseVarint(offset);",
          "932:     if (GPR_UNLIKELY(!index.has_value())) return absl::nullopt;",
          "933:     return ParseIdxKey(*index);",
          "937:   String::ParseResult ParseValueString(bool is_binary) {",
          "938:     if (is_binary) {",
          "939:       return String::ParseBinary(input_);",
          "941:       return String::Parse(input_);",
          "949:     const auto* elem = table_->Lookup(*index);",
          "",
          "[Added Lines]",
          "759:   bool StartIdxKey(uint32_t index, bool add_to_table) {",
          "760:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "761:     input_->UpdateFrontier();",
          "762:     const auto* elem = state_.hpack_table.Lookup(index);",
          "763:     if (GPR_UNLIKELY(elem == nullptr)) {",
          "764:       InvalidHPackIndexError(index);",
          "765:       return false;",
          "767:     state_.parse_state = ParseState::kParsingValueLength;",
          "768:     state_.is_binary_header = elem->md.is_binary_header();",
          "769:     state_.key.emplace<const HPackTable::Memento*>(elem);",
          "770:     state_.add_to_table = add_to_table;",
          "771:     return ParseValueLength();",
          "772:   };",
          "775:   bool StartVarIdxKey(uint32_t offset, bool add_to_table) {",
          "776:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "777:     auto index = input_->ParseVarint(offset);",
          "778:     if (GPR_UNLIKELY(!index.has_value())) return false;",
          "779:     return StartIdxKey(*index, add_to_table);",
          "780:   }",
          "782:   bool StartParseLiteralKey(bool add_to_table) {",
          "783:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kTop);",
          "784:     state_.add_to_table = add_to_table;",
          "785:     state_.parse_state = ParseState::kParsingKeyLength;",
          "786:     input_->UpdateFrontier();",
          "787:     return ParseKeyLength();",
          "788:   }",
          "790:   bool ShouldSkipParsingString(uint64_t string_length) const {",
          "812:     return string_length > state_.hpack_table.current_table_size() &&",
          "813:            state_.metadata_early_detection.MustReject(",
          "814:                string_length + hpack_constants::kEntryOverhead);",
          "815:   }",
          "817:   bool ParseKeyLength() {",
          "818:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingKeyLength);",
          "819:     auto pfx = input_->ParseStringPrefix();",
          "820:     if (!pfx.has_value()) return false;",
          "821:     state_.is_string_huff_compressed = pfx->huff;",
          "822:     state_.string_length = pfx->length;",
          "823:     input_->UpdateFrontier();",
          "824:     if (ShouldSkipParsingString(state_.string_length)) {",
          "825:       input_->SetErrorAndContinueParsing(",
          "826:           HpackParseResult::HardMetadataLimitExceededByKeyError(",
          "827:               state_.string_length,",
          "828:               state_.metadata_early_detection.hard_limit()));",
          "829:       metadata_buffer_ = nullptr;",
          "830:       state_.parse_state = ParseState::kSkippingKeyBody;",
          "831:       return SkipKeyBody();",
          "832:     } else {",
          "833:       state_.parse_state = ParseState::kParsingKeyBody;",
          "834:       return ParseKeyBody();",
          "835:     }",
          "836:   }",
          "838:   bool ParseKeyBody() {",
          "839:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingKeyBody);",
          "840:     auto key = String::Parse(input_, state_.is_string_huff_compressed,",
          "841:                              state_.string_length);",
          "843:       case HpackParseStatus::kOk:",
          "845:       case HpackParseStatus::kEof:",
          "847:         return false;",
          "848:       default:",
          "849:         input_->SetErrorAndStopParsing(",
          "850:             HpackParseResult::FromStatus(key.status));",
          "851:         return false;",
          "853:     input_->UpdateFrontier();",
          "854:     state_.parse_state = ParseState::kParsingValueLength;",
          "855:     state_.is_binary_header = absl::EndsWith(key.value.string_view(), \"-bin\");",
          "856:     state_.key.emplace<Slice>(key.value.Take());",
          "857:     return ParseValueLength();",
          "860:   bool SkipStringBody() {",
          "861:     auto remaining = input_->remaining();",
          "862:     if (remaining >= state_.string_length) {",
          "863:       input_->Advance(state_.string_length);",
          "864:       return true;",
          "865:     } else {",
          "866:       input_->Advance(remaining);",
          "867:       input_->UpdateFrontier();",
          "868:       state_.string_length -= remaining;",
          "879:       input_->UnexpectedEOF(",
          "881:       return false;",
          "885:   bool SkipKeyBody() {",
          "886:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingKeyBody);",
          "887:     if (!SkipStringBody()) return false;",
          "888:     input_->UpdateFrontier();",
          "889:     state_.parse_state = ParseState::kSkippingValueLength;",
          "890:     return SkipValueLength();",
          "891:   }",
          "893:   bool SkipValueLength() {",
          "894:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingValueLength);",
          "895:     auto pfx = input_->ParseStringPrefix();",
          "896:     if (!pfx.has_value()) return false;",
          "897:     state_.string_length = pfx->length;",
          "898:     input_->UpdateFrontier();",
          "899:     state_.parse_state = ParseState::kSkippingValueBody;",
          "900:     return SkipValueBody();",
          "901:   }",
          "903:   bool SkipValueBody() {",
          "904:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kSkippingValueBody);",
          "905:     if (!SkipStringBody()) return false;",
          "906:     input_->UpdateFrontier();",
          "907:     state_.parse_state = ParseState::kTop;",
          "908:     if (state_.add_to_table) {",
          "909:       state_.hpack_table.AddLargerThanCurrentTableSize();",
          "911:     return true;",
          "912:   }",
          "914:   bool ParseValueLength() {",
          "915:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingValueLength);",
          "916:     auto pfx = input_->ParseStringPrefix();",
          "917:     if (!pfx.has_value()) return false;",
          "918:     state_.is_string_huff_compressed = pfx->huff;",
          "919:     state_.string_length = pfx->length;",
          "920:     input_->UpdateFrontier();",
          "921:     if (ShouldSkipParsingString(state_.string_length)) {",
          "922:       input_->SetErrorAndContinueParsing(",
          "923:           HpackParseResult::HardMetadataLimitExceededByValueError(",
          "924:               Match(",
          "925:                   state_.key, [](const Slice& s) { return s.as_string_view(); },",
          "926:                   [](const HPackTable::Memento* m) { return m->md.key(); }),",
          "927:               state_.string_length,",
          "928:               state_.metadata_early_detection.hard_limit()));",
          "929:       metadata_buffer_ = nullptr;",
          "930:       state_.parse_state = ParseState::kSkippingValueBody;",
          "931:       return SkipValueBody();",
          "932:     } else {",
          "933:       state_.parse_state = ParseState::kParsingValueBody;",
          "934:       return ParseValueBody();",
          "935:     }",
          "938:   bool ParseValueBody() {",
          "939:     GPR_DEBUG_ASSERT(state_.parse_state == ParseState::kParsingValueBody);",
          "940:     auto value =",
          "941:         state_.is_binary_header",
          "942:             ? String::ParseBinary(input_, state_.is_string_huff_compressed,",
          "943:                                   state_.string_length)",
          "944:             : String::Parse(input_, state_.is_string_huff_compressed,",
          "945:                             state_.string_length);",
          "946:     HpackParseResult& status = state_.frame_error;",
          "947:     absl::string_view key_string;",
          "948:     if (auto* s = absl::get_if<Slice>(&state_.key)) {",
          "949:       key_string = s->as_string_view();",
          "950:       if (status.ok()) {",
          "951:         auto r = ValidateKey(key_string);",
          "952:         if (r != ValidateMetadataResult::kOk) {",
          "953:           input_->SetErrorAndContinueParsing(",
          "954:               HpackParseResult::InvalidMetadataError(r, key_string));",
          "955:         }",
          "956:       }",
          "958:       const auto* memento = absl::get<const HPackTable::Memento*>(state_.key);",
          "959:       key_string = memento->md.key();",
          "960:       if (status.ok() && !memento->parse_status.ok()) {",
          "961:         input_->SetErrorAndContinueParsing(memento->parse_status);",
          "962:       }",
          "963:     }",
          "964:     switch (value.status) {",
          "965:       case HpackParseStatus::kOk:",
          "966:         break;",
          "967:       case HpackParseStatus::kEof:",
          "968:         GPR_DEBUG_ASSERT(input_->eof_error());",
          "969:         return false;",
          "970:       default: {",
          "971:         auto result =",
          "972:             HpackParseResult::FromStatusWithKey(value.status, key_string);",
          "973:         if (result.stream_error()) {",
          "974:           input_->SetErrorAndContinueParsing(std::move(result));",
          "975:           break;",
          "976:         } else {",
          "977:           input_->SetErrorAndStopParsing(std::move(result));",
          "978:           return false;",
          "979:         }",
          "980:       }",
          "981:     }",
          "982:     auto value_slice = value.value.Take();",
          "983:     const auto transport_size =",
          "984:         key_string.size() + value.wire_size + hpack_constants::kEntryOverhead;",
          "985:     auto md = grpc_metadata_batch::Parse(",
          "986:         key_string, std::move(value_slice), transport_size,",
          "987:         [key_string, &status, this](absl::string_view message, const Slice&) {",
          "988:           if (!status.ok()) return;",
          "989:           input_->SetErrorAndContinueParsing(",
          "990:               HpackParseResult::MetadataParseError(key_string));",
          "991:           gpr_log(GPR_ERROR, \"Error parsing '%s' metadata: %s\",",
          "992:                   std::string(key_string).c_str(),",
          "993:                   std::string(message).c_str());",
          "994:         });",
          "995:     HPackTable::Memento memento{std::move(md),",
          "996:                                 status.PersistentStreamErrorOrOk()};",
          "997:     input_->UpdateFrontier();",
          "998:     state_.parse_state = ParseState::kTop;",
          "999:     if (state_.add_to_table) {",
          "1000:       return FinishHeaderAndAddToTable(std::move(memento));",
          "1001:     } else {",
          "1002:       FinishHeaderOmitFromTable(memento);",
          "1003:       return true;",
          "1007:   ValidateMetadataResult ValidateKey(absl::string_view key) {",
          "1008:     if (key == HttpSchemeMetadata::key() || key == HttpMethodMetadata::key() ||",
          "1009:         key == HttpAuthorityMetadata::key() || key == HttpPathMetadata::key() ||",
          "1010:         key == HttpStatusMetadata::key()) {",
          "1011:       return ValidateMetadataResult::kOk;",
          "1012:     }",
          "1013:     return ValidateHeaderKeyIsLegal(key);",
          "1014:   }",
          "1018:     state_.dynamic_table_updates_allowed = 0;",
          "1020:     const auto* elem = state_.hpack_table.Lookup(*index);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "959:   bool FinishMaxTableSize(absl::optional<uint32_t> size) {",
          "960:     if (!size.has_value()) return false;",
          "964:       return false;",
          "965:     }",
          "970:       return false;",
          "971:     }",
          "972:     return true;",
          "",
          "[Removed Lines]",
          "961:     if (*dynamic_table_updates_allowed_ == 0) {",
          "962:       input_->SetErrorAndStopParsing(absl::InternalError(",
          "963:           \"More than two max table size changes in a single frame\"));",
          "966:     (*dynamic_table_updates_allowed_)--;",
          "967:     grpc_error_handle err = table_->SetCurrentTableSize(*size);",
          "968:     if (!err.ok()) {",
          "969:       input_->SetErrorAndStopParsing(std::move(err));",
          "",
          "[Added Lines]",
          "1032:     if (state_.dynamic_table_updates_allowed == 0) {",
          "1033:       input_->SetErrorAndStopParsing(",
          "1034:           HpackParseResult::TooManyDynamicTableSizeChangesError());",
          "1037:     state_.dynamic_table_updates_allowed--;",
          "1038:     if (!state_.hpack_table.SetCurrentTableSize(*size)) {",
          "1039:       input_->SetErrorAndStopParsing(",
          "1040:           HpackParseResult::IllegalTableSizeChangeError(",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "977:   void InvalidHPackIndexError(uint32_t index) {",
          "1014:   }",
          "1016:   Input* const input_;",
          "1023:   const LogInfo log_info_;",
          "1024: };",
          "",
          "[Removed Lines]",
          "978:     input_->SetErrorAndStopParsing(grpc_error_set_int(",
          "979:         grpc_error_set_int(absl::InternalError(\"Invalid HPACK index received\"),",
          "980:                            StatusIntProperty::kIndex,",
          "981:                            static_cast<intptr_t>(index)),",
          "982:         StatusIntProperty::kSize,",
          "983:         static_cast<intptr_t>(this->table_->num_entries())));",
          "984:   }",
          "986:   GPR_ATTRIBUTE_NOINLINE",
          "987:   void HandleMetadataParseError(const absl::Status& status) {",
          "988:     if (metadata_buffer_ != nullptr) {",
          "989:       metadata_buffer_->Clear();",
          "990:       metadata_buffer_ = nullptr;",
          "991:     }",
          "994:     input_->SetErrorAndContinueParsing(status);",
          "995:   }",
          "997:   GPR_ATTRIBUTE_NOINLINE",
          "998:   void HandleMetadataHardSizeLimitExceeded(const HPackTable::Memento& md) {",
          "1001:     std::string summary;",
          "1002:     std::string error_message;",
          "1003:     if (metadata_buffer_ != nullptr) {",
          "1004:       MetadataSizeLimitExceededEncoder encoder(summary);",
          "1005:       metadata_buffer_->Encode(&encoder);",
          "1006:     }",
          "1007:     summary = absl::StrCat(\"; adding \", md.md.key(), \" (length \",",
          "1008:                            md.md.transport_size(), \"B)\",",
          "1009:                            summary.empty() ? \"\" : \" to \", summary);",
          "1010:     error_message = absl::StrCat(",
          "1011:         \"received metadata size exceeds hard limit (\", *frame_length_, \" vs. \",",
          "1012:         metadata_early_detection_->hard_limit(), \")\", summary);",
          "1013:     HandleMetadataParseError(absl::ResourceExhaustedError(error_message));",
          "1017:   grpc_metadata_batch* metadata_buffer_;",
          "1018:   HPackTable* const table_;",
          "1019:   uint8_t* const dynamic_table_updates_allowed_;",
          "1020:   uint32_t* const frame_length_;",
          "1022:   RandomEarlyDetection* metadata_early_detection_;",
          "",
          "[Added Lines]",
          "1050:     input_->SetErrorAndStopParsing(",
          "1051:         HpackParseResult::InvalidHpackIndexError(index));",
          "1055:   grpc_metadata_batch*& metadata_buffer_;",
          "1056:   InterSliceState& state_;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1051:   }",
          "1052:   boundary_ = boundary;",
          "1053:   priority_ = priority;",
          "1059:   log_info_ = log_info;",
          "",
          "[Removed Lines]",
          "1054:   dynamic_table_updates_allowed_ = 2;",
          "1055:   frame_length_ = 0;",
          "1056:   metadata_early_detection_ = RandomEarlyDetection(",
          "",
          "[Added Lines]",
          "1088:   state_.dynamic_table_updates_allowed = 2;",
          "1089:   state_.metadata_early_detection.SetLimits(",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1062: grpc_error_handle HPackParser::Parse(const grpc_slice& slice, bool is_last) {",
          "1063:   if (GPR_UNLIKELY(!unparsed_bytes_.empty())) {",
          "1064:     std::vector<uint8_t> buffer = std::move(unparsed_bytes_);",
          "1069:   }",
          "1070:   return ParseInput(Input(slice.refcount, GRPC_SLICE_START_PTR(slice),",
          "1072:                     is_last);",
          "1073: }",
          "1075: grpc_error_handle HPackParser::ParseInput(Input input, bool is_last) {",
          "1076:   ParseInputInner(&input);",
          "1079:       HandleMetadataSoftSizeLimitExceeded(&input);",
          "1080:     }",
          "1089:     }",
          "1092:   }",
          "1094: }",
          "1096: void HPackParser::ParseInputInner(Input* input) {",
          "",
          "[Removed Lines]",
          "1065:     buffer.insert(buffer.end(), GRPC_SLICE_START_PTR(slice),",
          "1066:                   GRPC_SLICE_END_PTR(slice));",
          "1067:     return ParseInput(",
          "1068:         Input(nullptr, buffer.data(), buffer.data() + buffer.size()), is_last);",
          "1071:                           GRPC_SLICE_END_PTR(slice)),",
          "1077:   if (is_last) {",
          "1078:     if (metadata_early_detection_.Reject(frame_length_)) {",
          "1081:     global_stats().IncrementHttp2MetadataSize(frame_length_);",
          "1082:   }",
          "1083:   if (input.eof_error()) {",
          "1084:     if (GPR_UNLIKELY(is_last && is_boundary())) {",
          "1085:       auto err = input.TakeError();",
          "1086:       if (!err.ok() && !IsStreamError(err)) return err;",
          "1087:       return absl::InternalError(",
          "1088:           \"Incomplete header at the end of a header/continuation sequence\");",
          "1090:     unparsed_bytes_ = std::vector<uint8_t>(input.frontier(), input.end_ptr());",
          "1091:     return input.TakeError();",
          "1093:   return input.TakeError();",
          "",
          "[Added Lines]",
          "1097:     unparsed_bytes_.insert(unparsed_bytes_.end(), GRPC_SLICE_START_PTR(slice),",
          "1098:                            GRPC_SLICE_END_PTR(slice));",
          "1099:     if (!(is_last && is_boundary()) &&",
          "1100:         unparsed_bytes_.size() < min_progress_size_) {",
          "1102:       return absl::OkStatus();",
          "1103:     }",
          "1105:     return ParseInput(Input(nullptr, buffer.data(),",
          "1106:                             buffer.data() + buffer.size(), state_.frame_error),",
          "1107:                       is_last);",
          "1110:                           GRPC_SLICE_END_PTR(slice), state_.frame_error),",
          "1116:   if (is_last && is_boundary()) {",
          "1117:     if (state_.metadata_early_detection.Reject(state_.frame_length)) {",
          "1120:     global_stats().IncrementHttp2MetadataSize(state_.frame_length);",
          "1121:     if (!state_.frame_error.connection_error() &&",
          "1122:         (input.eof_error() || state_.parse_state != ParseState::kTop)) {",
          "1123:       state_.frame_error = HpackParseResult::IncompleteHeaderAtBoundaryError();",
          "1124:     }",
          "1125:     state_.frame_length = 0;",
          "1126:     return std::exchange(state_.frame_error, HpackParseResult()).Materialize();",
          "1127:   } else {",
          "1128:     if (input.eof_error() && !state_.frame_error.connection_error()) {",
          "1129:       unparsed_bytes_ = std::vector<uint8_t>(input.frontier(), input.end_ptr());",
          "1130:       min_progress_size_ = input.min_progress_size();",
          "1132:     return state_.frame_error.Materialize();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1099:       break;",
          "1100:     case Priority::Included: {",
          "1101:       if (input->remaining() < 5) {",
          "1103:         return;",
          "1104:       }",
          "1105:       input->Advance(5);",
          "",
          "[Removed Lines]",
          "1102:         input->UnexpectedEOF();",
          "",
          "[Added Lines]",
          "1142:         input->UnexpectedEOF(/*min_progress_size=*/5);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1108:     }",
          "1109:   }",
          "1110:   while (!input->end_of_stream()) {",
          "1115:       return;",
          "1116:     }",
          "1117:     input->UpdateFrontier();",
          "",
          "[Removed Lines]",
          "1111:     if (GPR_UNLIKELY(!Parser(input, metadata_buffer_, &table_,",
          "1112:                              &dynamic_table_updates_allowed_, &frame_length_,",
          "1113:                              &metadata_early_detection_, log_info_)",
          "1114:                           .Parse())) {",
          "",
          "[Added Lines]",
          "1151:     if (GPR_UNLIKELY(",
          "1152:             !Parser(input, metadata_buffer_, state_, log_info_).Parse())) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1121: void HPackParser::FinishFrame() { metadata_buffer_ = nullptr; }",
          "1123: void HPackParser::HandleMetadataSoftSizeLimitExceeded(Input* input) {",
          "1140:   input->SetErrorAndContinueParsing(",
          "1142: }",
          "1144: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "1126:   std::string summary;",
          "1127:   std::string error_message;",
          "1128:   if (metadata_buffer_ != nullptr) {",
          "1129:     MetadataSizeLimitExceededEncoder encoder(summary);",
          "1130:     metadata_buffer_->Encode(&encoder);",
          "1131:   }",
          "1132:   error_message = absl::StrCat(",
          "1133:       \"received metadata size exceeds soft limit (\", frame_length_, \" vs. \",",
          "1134:       metadata_early_detection_.soft_limit(),",
          "1135:       \"), rejecting requests with some random probability\", summary);",
          "1136:   if (metadata_buffer_ != nullptr) {",
          "1137:     metadata_buffer_->Clear();",
          "1138:     metadata_buffer_ = nullptr;",
          "1139:   }",
          "1141:       absl::ResourceExhaustedError(error_message));",
          "",
          "[Added Lines]",
          "1163:       HpackParseResult::SoftMetadataLimitExceededError(",
          "1164:           std::exchange(metadata_buffer_, nullptr), state_.frame_length,",
          "1165:           state_.metadata_early_detection.soft_limit()));",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser.h||src/core/ext/transport/chttp2/transport/hpack_parser.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.h -> src/core/ext/transport/chttp2/transport/hpack_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <grpc/support/port_platform.h>",
          "24: #include <stdint.h>",
          "26: #include <vector>",
          "28: #include <grpc/slice.h>",
          "30: #include \"src/core/ext/transport/chttp2/transport/frame.h\"",
          "31: #include \"src/core/ext/transport/chttp2/transport/hpack_parser_table.h\"",
          "32: #include \"src/core/lib/backoff/random_early_detection.h\"",
          "33: #include \"src/core/lib/iomgr/error.h\"",
          "34: #include \"src/core/lib/transport/metadata_batch.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <stddef.h>",
          "27: #include <string>",
          "28: #include <utility>",
          "31: #include \"absl/strings/str_cat.h\"",
          "32: #include \"absl/strings/string_view.h\"",
          "33: #include \"absl/types/optional.h\"",
          "34: #include \"absl/types/span.h\"",
          "35: #include \"absl/types/variant.h\"",
          "40: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "44: #include \"src/core/lib/slice/slice.h\"",
          "45: #include \"src/core/lib/slice/slice_refcount.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:   void FinishFrame();",
          "97:   bool is_boundary() const { return boundary_ != Boundary::None; }",
          "99:   bool is_eof() const { return boundary_ == Boundary::EndOfStream; }",
          "101:  private:",
          "103:   class Parser;",
          "104:   class Input;",
          "107:   grpc_error_handle ParseInput(Input input, bool is_last);",
          "108:   void ParseInputInner(Input* input);",
          "",
          "[Removed Lines]",
          "95:   HPackTable* hpack_table() { return &table_; }",
          "105:   class String;",
          "",
          "[Added Lines]",
          "107:   HPackTable* hpack_table() { return &state_.hpack_table; }",
          "114:   size_t buffered_bytes() const { return unparsed_bytes_.size(); }",
          "123:   class String {",
          "124:    public:",
          "126:     struct StringResult;",
          "128:     String() : value_(absl::Span<const uint8_t>()) {}",
          "129:     String(const String&) = delete;",
          "130:     String& operator=(const String&) = delete;",
          "131:     String(String&& other) noexcept : value_(std::move(other.value_)) {",
          "132:       other.value_ = absl::Span<const uint8_t>();",
          "133:     }",
          "134:     String& operator=(String&& other) noexcept {",
          "135:       value_ = std::move(other.value_);",
          "136:       other.value_ = absl::Span<const uint8_t>();",
          "137:       return *this;",
          "138:     }",
          "141:     Slice Take();",
          "144:     absl::string_view string_view() const;",
          "147:     static StringResult Parse(Input* input, bool is_huff, size_t length);",
          "150:     static StringResult ParseBinary(Input* input, bool is_huff, size_t length);",
          "152:    private:",
          "153:     void AppendBytes(const uint8_t* data, size_t length);",
          "154:     explicit String(std::vector<uint8_t> v) : value_(std::move(v)) {}",
          "155:     explicit String(absl::Span<const uint8_t> v) : value_(v) {}",
          "156:     String(grpc_slice_refcount* r, const uint8_t* begin, const uint8_t* end)",
          "157:         : value_(Slice::FromRefcountAndBytes(r, begin, end)) {}",
          "161:     template <typename Out>",
          "162:     static HpackParseStatus ParseHuff(Input* input, uint32_t length,",
          "163:                                       Out output);",
          "166:     static StringResult ParseUncompressed(Input* input, uint32_t length,",
          "167:                                           uint32_t wire_size);",
          "170:     static StringResult Unbase64(String s);",
          "173:     static absl::optional<std::vector<uint8_t>> Unbase64Loop(",
          "174:         const uint8_t* cur, const uint8_t* end);",
          "176:     absl::variant<Slice, absl::Span<const uint8_t>, std::vector<uint8_t>>",
          "177:         value_;",
          "178:   };",
          "181:   struct StringPrefix {",
          "183:     uint32_t length;",
          "185:     bool huff;",
          "187:     std::string ToString() const {",
          "188:       return absl::StrCat(length, \" bytes \",",
          "189:                           huff ? \"huffman compressed\" : \"uncompressed\");",
          "190:     }",
          "191:   };",
          "209:   enum class ParseState : uint8_t {",
          "211:     kTop,",
          "213:     kParsingKeyLength,",
          "215:     kParsingKeyBody,",
          "217:     kSkippingKeyBody,",
          "219:     kParsingValueLength,",
          "221:     kParsingValueBody,",
          "223:     kSkippingValueLength,",
          "225:     kSkippingValueBody,",
          "226:   };",
          "229:   struct InterSliceState {",
          "230:     HPackTable hpack_table;",
          "232:     HpackParseResult frame_error;",
          "234:     uint32_t frame_length = 0;",
          "236:     uint32_t string_length;",
          "238:     uint8_t dynamic_table_updates_allowed;",
          "240:     ParseState parse_state = ParseState::kTop;",
          "242:     RandomEarlyDetection metadata_early_detection;",
          "244:     bool add_to_table;",
          "246:     bool is_string_huff_compressed;",
          "248:     bool is_binary_header;",
          "249:     absl::variant<const HPackTable::Memento*, Slice> key;",
          "250:   };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:   std::vector<uint8_t> unparsed_bytes_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:   size_t min_progress_size_ = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:   Priority priority_;",
          "130:   LogInfo log_info_;",
          "134: };",
          "136: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "125:   uint8_t dynamic_table_updates_allowed_;",
          "127:   uint32_t frame_length_;",
          "128:   RandomEarlyDetection metadata_early_detection_;",
          "133:   HPackTable table_;",
          "",
          "[Added Lines]",
          "274:   InterSliceState state_;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser_table.cc||src/core/ext/transport/chttp2/transport/hpack_parser_table.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc -> src/core/ext/transport/chttp2/transport/hpack_parser_table.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <algorithm>",
          "26: #include <cstddef>",
          "27: #include <cstring>",
          "29: #include <utility>",
          "31: #include \"absl/status/status.h\"",
          "33: #include \"absl/strings/string_view.h\"",
          "35: #include <grpc/support/log.h>",
          "37: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "38: #include \"src/core/ext/transport/chttp2/transport/http_trace.h\"",
          "39: #include \"src/core/lib/debug/trace.h\"",
          "40: #include \"src/core/lib/slice/slice.h\"",
          "",
          "[Removed Lines]",
          "28: #include <initializer_list>",
          "32: #include \"absl/strings/str_format.h\"",
          "",
          "[Added Lines]",
          "31: #include \"absl/strings/str_cat.h\"",
          "37: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   entries_.swap(entries);",
          "81: }",
          "84: void HPackTable::EvictOne() {",
          "85:   auto first_entry = entries_.PopOne();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: void HPackTable::MementoRingBuffer::ForEach(",
          "84:     absl::FunctionRef<void(uint32_t, const Memento&)> f) const {",
          "85:   uint32_t index = 0;",
          "86:   while (auto* m = Lookup(index++)) {",
          "87:     f(index, *m);",
          "88:   }",
          "89: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   max_bytes_ = max_bytes;",
          "101: }",
          "112:   if (GRPC_TRACE_FLAG_ENABLED(grpc_http_trace)) {",
          "113:     gpr_log(GPR_INFO, \"Update hpack parser table size to %d\", bytes);",
          "114:   }",
          "",
          "[Removed Lines]",
          "103: grpc_error_handle HPackTable::SetCurrentTableSize(uint32_t bytes) {",
          "104:   if (current_table_bytes_ == bytes) {",
          "105:     return absl::OkStatus();",
          "106:   }",
          "107:   if (bytes > max_bytes_) {",
          "108:     return absl::InternalError(absl::StrFormat(",
          "109:         \"Attempt to make hpack table %d bytes when max is %d bytes\", bytes,",
          "110:         max_bytes_));",
          "111:   }",
          "",
          "[Added Lines]",
          "111: bool HPackTable::SetCurrentTableSize(uint32_t bytes) {",
          "112:   if (current_table_bytes_ == bytes) return true;",
          "113:   if (bytes > max_bytes_) return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   uint32_t new_cap = std::max(hpack_constants::EntriesForBytes(bytes),",
          "120:                               hpack_constants::kInitialTableEntries);",
          "121:   entries_.Rebuild(new_cap);",
          "123: }",
          "134:   if (md.md.transport_size() > current_table_bytes_) {",
          "146:   }",
          "",
          "[Removed Lines]",
          "122:   return absl::OkStatus();",
          "125: grpc_error_handle HPackTable::Add(Memento md) {",
          "126:   if (current_table_bytes_ > max_bytes_) {",
          "127:     return GRPC_ERROR_CREATE(absl::StrFormat(",
          "128:         \"HPACK max table size reduced to %d but not reflected by hpack \"",
          "129:         \"stream (still at %d)\",",
          "130:         max_bytes_, current_table_bytes_));",
          "131:   }",
          "142:     while (entries_.num_entries()) {",
          "143:       EvictOne();",
          "144:     }",
          "145:     return absl::OkStatus();",
          "",
          "[Added Lines]",
          "124:   return true;",
          "127: bool HPackTable::Add(Memento md) {",
          "128:   if (current_table_bytes_ > max_bytes_) return false;",
          "132:     AddLargerThanCurrentTableSize();",
          "133:     return true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:   mem_used_ += md.md.transport_size();",
          "156:   entries_.Put(std::move(md));",
          "158: }",
          "160: namespace {",
          "",
          "[Removed Lines]",
          "157:   return absl::OkStatus();",
          "",
          "[Added Lines]",
          "145:   return true;",
          "146: }",
          "148: void HPackTable::AddLargerThanCurrentTableSize() {",
          "156:   while (entries_.num_entries()) {",
          "157:     EvictOne();",
          "158:   }",
          "159: }",
          "161: std::string HPackTable::TestOnlyDynamicTableAsString() const {",
          "162:   std::string out;",
          "163:   entries_.ForEach([&out](uint32_t i, const Memento& m) {",
          "164:     if (m.parse_status.ok()) {",
          "165:       absl::StrAppend(&out, i, \": \", m.md.DebugString(), \"\\n\");",
          "166:     } else {",
          "167:       absl::StrAppend(&out, i, \": \", m.parse_status.Materialize().ToString(),",
          "168:                       \"\\n\");",
          "169:     }",
          "170:   });",
          "171:   return out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:           [](absl::string_view, const Slice&) {",
          "237:             abort();  // not expecting to see this",
          "238:           }),",
          "240: }",
          "242: }  // namespace",
          "",
          "[Removed Lines]",
          "239:       absl::OkStatus()};",
          "",
          "[Added Lines]",
          "253:       HpackParseResult()};",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/hpack_parser_table.h||src/core/ext/transport/chttp2/transport/hpack_parser_table.h": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser_table.h -> src/core/ext/transport/chttp2/transport/hpack_parser_table.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdint.h>",
          "26: #include <vector>",
          "30: #include \"src/core/ext/transport/chttp2/transport/hpack_constants.h\"",
          "31: #include \"src/core/lib/gprpp/no_destruct.h\"",
          "33: #include \"src/core/lib/transport/metadata_batch.h\"",
          "34: #include \"src/core/lib/transport/parsed_metadata.h\"",
          "",
          "[Removed Lines]",
          "28: #include \"absl/status/status.h\"",
          "32: #include \"src/core/lib/iomgr/error.h\"",
          "",
          "[Added Lines]",
          "26: #include <string>",
          "29: #include \"absl/functional/function_ref.h\"",
          "32: #include \"src/core/ext/transport/chttp2/transport/hpack_parse_result.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   HPackTable& operator=(const HPackTable&) = delete;",
          "47:   void SetMaxBytes(uint32_t max_bytes);",
          "50:   struct Memento {",
          "51:     ParsedMetadata<grpc_metadata_batch> md;",
          "53:   };",
          "",
          "[Removed Lines]",
          "48:   grpc_error_handle SetCurrentTableSize(uint32_t bytes);",
          "52:     absl::Status parse_status;",
          "",
          "[Added Lines]",
          "49:   bool SetCurrentTableSize(uint32_t bytes);",
          "50:   uint32_t current_table_size() { return current_table_bytes_; }",
          "54:     HpackParseResult parse_status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   }",
          "74:   uint32_t num_entries() const { return entries_.num_entries(); }",
          "",
          "[Removed Lines]",
          "71:   grpc_error_handle Add(Memento md) GRPC_MUST_USE_RESULT;",
          "",
          "[Added Lines]",
          "73:   bool Add(Memento md) GRPC_MUST_USE_RESULT;",
          "74:   void AddLargerThanCurrentTableSize();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   uint32_t test_only_table_size() const { return mem_used_; }",
          "79:  private:",
          "80:   struct StaticMementos {",
          "81:     StaticMementos();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   uint32_t max_bytes() const { return max_bytes_; }",
          "84:   uint32_t current_table_bytes() const { return current_table_bytes_; }",
          "87:   std::string TestOnlyDynamicTableAsString() const;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:     const Memento* Lookup(uint32_t index) const;",
          "101:     uint32_t max_entries() const { return max_entries_; }",
          "102:     uint32_t num_entries() const { return num_entries_; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     void ForEach(absl::FunctionRef<void(uint32_t dynamic_index, const Memento&)>",
          "112:                      f) const;",
          "",
          "---------------"
        ],
        "src/core/ext/transport/chttp2/transport/parsing.cc||src/core/ext/transport/chttp2/transport/parsing.cc": [
          "File: src/core/ext/transport/chttp2/transport/parsing.cc -> src/core/ext/transport/chttp2/transport/parsing.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <initializer_list>",
          "25: #include <string>",
          "28: #include \"absl/base/attributes.h\"",
          "29: #include \"absl/status/status.h\"",
          "",
          "[Removed Lines]",
          "26: #include <utility>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473: }",
          "475: static grpc_error_handle init_header_skip_frame_parser(",
          "478:   t->parser = grpc_chttp2_transport::Parser{",
          "479:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "480:   t->hpack_parser.BeginFrame(",
          "",
          "[Removed Lines]",
          "476:     grpc_chttp2_transport* t, HPackParser::Priority priority_type) {",
          "477:   bool is_eoh = t->expect_continuation_stream_id != 0;",
          "",
          "[Added Lines]",
          "475:     grpc_chttp2_transport* t, HPackParser::Priority priority_type,",
          "476:     bool is_eoh) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "598:       GRPC_CHTTP2_IF_TRACING(",
          "599:           gpr_log(GPR_ERROR,",
          "600:                   \"grpc_chttp2_stream disbanded before CONTINUATION received\"));",
          "602:     }",
          "603:     if (t->is_client) {",
          "604:       if (GPR_LIKELY((t->incoming_stream_id & 1) &&",
          "",
          "[Removed Lines]",
          "601:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "600:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "608:         GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "609:             GPR_ERROR, \"ignoring new grpc_chttp2_stream creation on client\"));",
          "610:       }",
          "612:     } else if (GPR_UNLIKELY(t->last_new_stream_id >= t->incoming_stream_id)) {",
          "613:       GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "614:           GPR_ERROR,",
          "",
          "[Removed Lines]",
          "611:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "610:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "616:           \"last grpc_chttp2_stream \"",
          "617:           \"id=%d, new grpc_chttp2_stream id=%d\",",
          "618:           t->last_new_stream_id, t->incoming_stream_id));",
          "620:     } else if (GPR_UNLIKELY((t->incoming_stream_id & 1) == 0)) {",
          "621:       GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "622:           GPR_ERROR,",
          "623:           \"ignoring grpc_chttp2_stream with non-client generated index %d\",",
          "624:           t->incoming_stream_id));",
          "626:     } else if (GPR_UNLIKELY(",
          "627:                    grpc_chttp2_stream_map_size(&t->stream_map) >=",
          "628:                    t->settings[GRPC_ACKED_SETTINGS]",
          "",
          "[Removed Lines]",
          "619:       return init_header_skip_frame_parser(t, priority_type);",
          "625:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "618:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "624:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "637:           \"grpc_chttp2_stream request id=%d, last grpc_chttp2_stream id=%d\",",
          "638:           t, std::string(t->peer_string.as_string_view()).c_str(),",
          "639:           t->incoming_stream_id, t->last_new_stream_id));",
          "641:     }",
          "642:     t->last_new_stream_id = t->incoming_stream_id;",
          "643:     s = t->incoming_stream =",
          "",
          "[Removed Lines]",
          "640:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "639:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "645:     if (GPR_UNLIKELY(s == nullptr)) {",
          "646:       GRPC_CHTTP2_IF_TRACING(",
          "647:           gpr_log(GPR_ERROR, \"grpc_chttp2_stream not accepted\"));",
          "649:     }",
          "650:     if (GRPC_TRACE_FLAG_ENABLED(grpc_http_trace) ||",
          "651:         GRPC_TRACE_FLAG_ENABLED(grpc_trace_chttp2_new_stream)) {",
          "",
          "[Removed Lines]",
          "648:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "647:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "665:     GRPC_CHTTP2_IF_TRACING(gpr_log(",
          "666:         GPR_ERROR, \"skipping already closed grpc_chttp2_stream header\"));",
          "667:     t->incoming_stream = nullptr;",
          "669:   }",
          "670:   t->parser = grpc_chttp2_transport::Parser{",
          "671:       \"header\", grpc_chttp2_header_parser_parse, &t->hpack_parser};",
          "",
          "[Removed Lines]",
          "668:     return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "667:     return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "698:       break;",
          "699:     case 2:",
          "700:       gpr_log(GPR_ERROR, \"too many header frames received\");",
          "702:   }",
          "703:   if (frame_type == HPackParser::LogInfo::kTrailers && !t->header_eof) {",
          "704:     return GRPC_ERROR_CREATE(",
          "",
          "[Removed Lines]",
          "701:       return init_header_skip_frame_parser(t, priority_type);",
          "",
          "[Added Lines]",
          "700:       return init_header_skip_frame_parser(t, priority_type, is_eoh);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "826:                          &unused)) {",
          "827:     grpc_chttp2_parsing_become_skip_parser(t);",
          "828:     if (s) {",
          "830:     }",
          "831:   }",
          "832:   return err;",
          "833: }",
          "",
          "[Removed Lines]",
          "829:       grpc_chttp2_cancel_stream(t, s, std::exchange(err, absl::OkStatus()));",
          "",
          "[Added Lines]",
          "828:       grpc_chttp2_cancel_stream(t, s, err);",
          "830:     return absl::OkStatus();",
          "",
          "---------------"
        ],
        "src/core/lib/backoff/random_early_detection.h||src/core/lib/backoff/random_early_detection.h": [
          "File: src/core/lib/backoff/random_early_detection.h -> src/core/lib/backoff/random_early_detection.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   uint64_t soft_limit() const { return soft_limit_; }",
          "44:   uint64_t hard_limit() const { return hard_limit_; }",
          "46:  private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   void SetLimits(uint64_t soft_limit, uint64_t hard_limit) {",
          "47:     soft_limit_ = soft_limit;",
          "48:     hard_limit_ = hard_limit;",
          "49:   }",
          "",
          "---------------"
        ],
        "src/core/lib/surface/validate_metadata.cc||src/core/lib/surface/validate_metadata.cc": [
          "File: src/core/lib/surface/validate_metadata.cc -> src/core/lib/surface/validate_metadata.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"src/core/lib/surface/validate_metadata.h\"",
          "23: #include \"absl/status/status.h\"",
          "26: #include \"absl/strings/string_view.h\"",
          "28: #include <grpc/grpc.h>",
          "",
          "[Removed Lines]",
          "24: #include \"absl/strings/escaping.h\"",
          "25: #include \"absl/strings/str_cat.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: };",
          "47: constexpr LegalHeaderKeyBits g_legal_header_key_bits;",
          "57:   for (uint8_t c : x) {",
          "58:     if (!legal_bits.is_set(c)) {",
          "60:     }",
          "61:   }",
          "63: }",
          "64: }  // namespace",
          "67:   if (key.empty()) {",
          "69:   }",
          "70:   if (key.size() > UINT32_MAX) {",
          "73:   }",
          "75: }",
          "77: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "49: GPR_ATTRIBUTE_NOINLINE",
          "50: absl::Status DoesNotConformTo(absl::string_view x, const char* err_desc) {",
          "51:   return absl::InternalError(absl::StrCat(err_desc, \": \", x, \" (hex \",",
          "52:                                           absl::BytesToHexString(x), \")\"));",
          "53: }",
          "55: absl::Status ConformsTo(absl::string_view x, const BitSet<256>& legal_bits,",
          "56:                         const char* err_desc) {",
          "59:       return DoesNotConformTo(x, err_desc);",
          "62:   return absl::OkStatus();",
          "66: absl::Status ValidateHeaderKeyIsLegal(absl::string_view key) {",
          "68:     return absl::InternalError(\"Metadata keys cannot be zero length\");",
          "71:     return absl::InternalError(",
          "72:         \"Metadata keys cannot be larger than UINT32_MAX\");",
          "74:   return ConformsTo(key, g_legal_header_key_bits, \"Illegal header key\");",
          "",
          "[Added Lines]",
          "47: ValidateMetadataResult ConformsTo(absl::string_view x,",
          "48:                                   const BitSet<256>& legal_bits,",
          "49:                                   ValidateMetadataResult error) {",
          "52:       return error;",
          "55:   return ValidateMetadataResult::kOk;",
          "56: }",
          "58: absl::Status UpgradeToStatus(ValidateMetadataResult result) {",
          "59:   if (result == ValidateMetadataResult::kOk) return absl::OkStatus();",
          "60:   return absl::InternalError(ValidateMetadataResultToString(result));",
          "65: ValidateMetadataResult ValidateHeaderKeyIsLegal(absl::string_view key) {",
          "67:     return ValidateMetadataResult::kCannotBeZeroLength;",
          "70:     return ValidateMetadataResult::kTooLong;",
          "71:   }",
          "72:   return ConformsTo(key, g_legal_header_key_bits,",
          "73:                     ValidateMetadataResult::kIllegalHeaderKey);",
          "74: }",
          "76: const char* ValidateMetadataResultToString(ValidateMetadataResult result) {",
          "77:   switch (result) {",
          "78:     case ValidateMetadataResult::kOk:",
          "79:       return \"Ok\";",
          "80:     case ValidateMetadataResult::kCannotBeZeroLength:",
          "81:       return \"Metadata keys cannot be zero length\";",
          "82:     case ValidateMetadataResult::kTooLong:",
          "83:       return \"Metadata keys cannot be larger than UINT32_MAX\";",
          "84:     case ValidateMetadataResult::kIllegalHeaderKey:",
          "85:       return \"Illegal header key\";",
          "86:     case ValidateMetadataResult::kIllegalHeaderValue:",
          "87:       return \"Illegal header value\";",
          "89:   GPR_UNREACHABLE_CODE(return \"Unknown\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: }",
          "84: grpc_error_handle grpc_validate_header_key_is_legal(const grpc_slice& slice) {",
          "87: }",
          "89: int grpc_header_key_is_legal(grpc_slice slice) {",
          "",
          "[Removed Lines]",
          "85:   return grpc_core::ValidateHeaderKeyIsLegal(",
          "86:       grpc_core::StringViewFromSlice(slice));",
          "",
          "[Added Lines]",
          "100:   return grpc_core::UpgradeToStatus(grpc_core::ValidateHeaderKeyIsLegal(",
          "101:       grpc_core::StringViewFromSlice(slice)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105: grpc_error_handle grpc_validate_header_nonbin_value_is_legal(",
          "106:     const grpc_slice& slice) {",
          "110: }",
          "112: int grpc_header_nonbin_value_is_legal(grpc_slice slice) {",
          "",
          "[Removed Lines]",
          "107:   return grpc_core::ConformsTo(grpc_core::StringViewFromSlice(slice),",
          "108:                                g_legal_header_non_bin_value_bits,",
          "109:                                \"Illegal header value\");",
          "",
          "[Added Lines]",
          "122:   return grpc_core::UpgradeToStatus(grpc_core::ConformsTo(",
          "123:       grpc_core::StringViewFromSlice(slice), g_legal_header_non_bin_value_bits,",
          "124:       grpc_core::ValidateMetadataResult::kIllegalHeaderValue));",
          "",
          "---------------"
        ],
        "src/core/lib/surface/validate_metadata.h||src/core/lib/surface/validate_metadata.h": [
          "File: src/core/lib/surface/validate_metadata.h -> src/core/lib/surface/validate_metadata.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <cstring>",
          "29: #include \"absl/strings/string_view.h\"",
          "31: #include <grpc/slice.h>",
          "",
          "[Removed Lines]",
          "28: #include \"absl/status/status.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: namespace grpc_core {",
          "42: grpc_error_handle grpc_validate_header_key_is_legal(const grpc_slice& slice);",
          "43: grpc_error_handle grpc_validate_header_nonbin_value_is_legal(",
          "",
          "[Removed Lines]",
          "38: absl::Status ValidateHeaderKeyIsLegal(absl::string_view key);",
          "40: }",
          "",
          "[Added Lines]",
          "37: enum class ValidateMetadataResult : uint8_t {",
          "38:   kOk,",
          "39:   kCannotBeZeroLength,",
          "40:   kTooLong,",
          "41:   kIllegalHeaderKey,",
          "42:   kIllegalHeaderValue",
          "43: };",
          "45: const char* ValidateMetadataResultToString(ValidateMetadataResult result);",
          "48: ValidateMetadataResult ValidateHeaderKeyIsLegal(absl::string_view key);",
          "50: }  // namespace grpc_core",
          "",
          "---------------"
        ],
        "src/python/grpcio/grpc_core_dependencies.py||src/python/grpcio/grpc_core_dependencies.py": [
          "File: src/python/grpcio/grpc_core_dependencies.py -> src/python/grpcio/grpc_core_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     'src/core/ext/transport/chttp2/transport/frame_window_update.cc',",
          "112:     'src/core/ext/transport/chttp2/transport/hpack_encoder.cc',",
          "113:     'src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc',",
          "114:     'src/core/ext/transport/chttp2/transport/hpack_parser.cc',",
          "115:     'src/core/ext/transport/chttp2/transport/hpack_parser_table.cc',",
          "116:     'src/core/ext/transport/chttp2/transport/http2_settings.cc',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     'src/core/ext/transport/chttp2/transport/hpack_parse_result.cc',",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_fuzzer_test.cc||test/core/transport/chttp2/hpack_parser_fuzzer_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_fuzzer_test.cc -> test/core/transport/chttp2/hpack_parser_fuzzer_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <algorithm>",
          "20: #include <memory>",
          "21: #include <string>",
          "22: #include <utility>",
          "24: #include <grpc/grpc.h>",
          "25: #include <grpc/slice.h>",
          "26: #include <grpc/support/log.h>",
          "28: #include \"src/core/ext/transport/chttp2/transport/hpack_parser.h\"",
          "29: #include \"src/core/lib/gprpp/ref_counted_ptr.h\"",
          "30: #include \"src/core/lib/iomgr/exec_ctx.h\"",
          "31: #include \"src/core/lib/resource_quota/arena.h\"",
          "32: #include \"src/core/lib/resource_quota/memory_quota.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdint.h>",
          "26: #include \"absl/cleanup/cleanup.h\"",
          "34: #include \"src/core/lib/gprpp/status_helper.h\"",
          "35: #include \"src/core/lib/iomgr/error.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: DEFINE_PROTO_FUZZER(const hpack_parser_fuzzer::Msg& msg) {",
          "46:   if (squelch) gpr_set_log_function(dont_log);",
          "47:   grpc_init();",
          "48:   auto memory_allocator = grpc_core::ResourceQuota::Default()",
          "49:                               ->memory_quota()",
          "50:                               ->CreateMemoryAllocator(\"test-allocator\");",
          "51:   {",
          "52:     std::unique_ptr<grpc_core::HPackParser> parser(new grpc_core::HPackParser);",
          "53:     for (int i = 0; i < msg.frames_size(); i++) {",
          "54:       auto arena = grpc_core::MakeScopedArena(1024, &memory_allocator);",
          "55:       grpc_core::ExecCtx exec_ctx;",
          "56:       grpc_metadata_batch b(arena.get());",
          "58:       const auto& frame = msg.frames(i);",
          "59:       grpc_core::HPackParser::Boundary boundary =",
          "60:           grpc_core::HPackParser::Boundary::None;",
          "61:       if (frame.end_of_headers()) {",
          "62:         boundary = grpc_core::HPackParser::Boundary::EndOfHeaders;",
          "63:       }",
          "64:       if (frame.end_of_stream()) {",
          "65:         boundary = grpc_core::HPackParser::Boundary::EndOfStream;",
          "82:       }",
          "84:       parser->BeginFrame(",
          "",
          "[Removed Lines]",
          "66:       }",
          "67:       grpc_core::HPackParser::Priority priority =",
          "68:           grpc_core::HPackParser::Priority::None;",
          "69:       if (frame.priority()) {",
          "70:         priority = grpc_core::HPackParser::Priority::Included;",
          "71:       }",
          "72:       int max_length = 1024;",
          "73:       int absolute_max_length = 1024;",
          "74:       if (absolute_max_length < max_length) {",
          "75:         std::swap(absolute_max_length, max_length);",
          "76:       }",
          "77:       if (frame.max_metadata_length() != 0) {",
          "78:         max_length = frame.max_metadata_length();",
          "79:       }",
          "80:       if (frame.absolute_max_metadata_length() != 0) {",
          "81:         absolute_max_length = frame.absolute_max_metadata_length();",
          "",
          "[Added Lines]",
          "54:   auto cleanup = absl::MakeCleanup(grpc_shutdown);",
          "60:     int max_length = 1024;",
          "61:     int absolute_max_length = 1024;",
          "62:     bool can_update_max_length = true;",
          "63:     bool can_add_priority = true;",
          "69:       if (frame.parse_size() == 0) continue;",
          "73:       if (can_update_max_length) {",
          "74:         if (frame.max_metadata_length() != 0) {",
          "75:           max_length = std::max(0, frame.max_metadata_length());",
          "76:         }",
          "77:         if (frame.absolute_max_metadata_length() != 0) {",
          "78:           absolute_max_length =",
          "79:               std::max(0, frame.absolute_max_metadata_length());",
          "80:         }",
          "81:         if (absolute_max_length < max_length) {",
          "82:           std::swap(absolute_max_length, max_length);",
          "83:         }",
          "84:       }",
          "86:       grpc_core::HPackParser::Priority priority =",
          "87:           grpc_core::HPackParser::Priority::None;",
          "88:       if (can_add_priority && frame.priority()) {",
          "89:         priority = grpc_core::HPackParser::Priority::Included;",
          "90:       }",
          "93:       can_update_max_length = false;",
          "94:       can_add_priority = false;",
          "97:         can_update_max_length = true;",
          "101:         can_update_max_length = true;",
          "102:         can_add_priority = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:               1, grpc_core::HPackParser::LogInfo::kHeaders, false});",
          "88:       int stop_buffering_ctr =",
          "89:           std::max(-1, frame.stop_buffering_after_segments());",
          "91:         grpc_slice buffer =",
          "92:             grpc_slice_from_copied_buffer(parse.data(), parse.size());",
          "94:         grpc_slice_unref(buffer);",
          "95:         stop_buffering_ctr--;",
          "96:         if (0 == stop_buffering_ctr) parser->StopBufferingFrame();",
          "97:       }",
          "98:       parser->FinishFrame();",
          "99:     }",
          "100:   }",
          "102: }",
          "",
          "[Removed Lines]",
          "90:       for (const auto& parse : frame.parse()) {",
          "93:         (void)parser->Parse(buffer, i == msg.frames_size() - 1);",
          "101:   grpc_shutdown();",
          "",
          "[Added Lines]",
          "111:       for (int idx = 0; idx < frame.parse_size(); idx++) {",
          "112:         const auto& parse = frame.parse(idx);",
          "115:         auto err = parser->Parse(buffer, idx == frame.parse_size() - 1);",
          "124:         GPR_ASSERT(static_cast<int>(parser->buffered_bytes() / 4) <",
          "125:                    std::max(1024, absolute_max_length));",
          "126:         if (!err.ok()) {",
          "127:           intptr_t unused;",
          "128:           if (grpc_error_get_int(err, grpc_core::StatusIntProperty::kStreamId,",
          "129:                                  &unused)) {",
          "131:           } else {",
          "133:             return;",
          "134:           }",
          "135:         }",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_table_test.cc||test/core/transport/chttp2/hpack_parser_table_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_table_test.cc -> test/core/transport/chttp2/hpack_parser_table_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string>",
          "22: #include <utility>",
          "25: #include \"absl/strings/str_cat.h\"",
          "26: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "24: #include \"absl/status/status.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:             ParsedMetadata<grpc_metadata_batch>::FromSlicePair{},",
          "125:             std::move(key_slice), std::move(value_slice),",
          "126:             key.length() + value.length() + 32),",
          "130:     AssertIndex(&tbl, 1 + hpack_constants::kLastStaticEntry, key.c_str(),",
          "131:                 value.c_str());",
          "132:     if (i) {",
          "",
          "[Removed Lines]",
          "127:         absl::OkStatus()};",
          "128:     auto add_err = tbl.Add(std::move(memento));",
          "129:     ASSERT_EQ(add_err, absl::OkStatus());",
          "",
          "[Added Lines]",
          "126:         HpackParseResult()};",
          "127:     ASSERT_TRUE(tbl.Add(std::move(memento)));",
          "",
          "---------------"
        ],
        "test/core/transport/chttp2/hpack_parser_test.cc||test/core/transport/chttp2/hpack_parser_test.cc": [
          "File: test/core/transport/chttp2/hpack_parser_test.cc -> test/core/transport/chttp2/hpack_parser_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include \"src/core/ext/transport/chttp2/transport/hpack_parser.h\"",
          "23: #include <memory>",
          "24: #include <string>",
          "",
          "[Removed Lines]",
          "21: #include <stdlib.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: #include \"absl/status/status.h\"",
          "28: #include \"absl/status/statusor.h\"",
          "29: #include \"absl/strings/str_cat.h\"",
          "31: #include \"absl/types/optional.h\"",
          "32: #include \"gmock/gmock.h\"",
          "33: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "30: #include \"absl/strings/string_view.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: const uint32_t kEndOfHeaders = 8;",
          "62: struct TestInput {",
          "65:   uint32_t flags;",
          "66: };",
          "68: struct Test {",
          "69:   absl::optional<size_t> table_size;",
          "70:   absl::optional<size_t> max_metadata_size;",
          "71:   std::vector<TestInput> inputs;",
          "72: };",
          "74: class ParseTest : public ::testing::TestWithParam<Test> {",
          "75:  public:",
          "76:   ParseTest() { grpc_init(); }",
          "",
          "[Removed Lines]",
          "63:   absl::string_view input;",
          "64:   absl::StatusOr<absl::string_view> expected_parse;",
          "",
          "[Added Lines]",
          "60:   std::string input;",
          "61:   absl::StatusOr<std::string> expected_parse;",
          "66:   std::string name;",
          "73: inline const char* NameFromConfig(",
          "74:     const ::testing::TestParamInfo<Test>& config) {",
          "75:   return config.param.name.c_str();",
          "76: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     parser_ = std::make_unique<HPackParser>();",
          "89:     if (GetParam().table_size.has_value()) {",
          "90:       parser_->hpack_table()->SetMaxBytes(GetParam().table_size.value());",
          "94:     }",
          "95:   }",
          "",
          "[Removed Lines]",
          "91:       EXPECT_EQ(parser_->hpack_table()->SetCurrentTableSize(",
          "92:                     GetParam().table_size.value()),",
          "93:                 absl::OkStatus());",
          "",
          "[Added Lines]",
          "95:       EXPECT_TRUE(parser_->hpack_table()->SetCurrentTableSize(",
          "96:           GetParam().table_size.value()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:   void TestVector(grpc_slice_split_mode mode,",
          "103:                   absl::optional<size_t> max_metadata_size,",
          "106:     MemoryAllocator memory_allocator = MemoryAllocator(",
          "107:         ResourceQuota::Default()->memory_quota()->CreateMemoryAllocator(",
          "108:             \"test\"));",
          "",
          "[Removed Lines]",
          "104:                   absl::string_view hexstring,",
          "105:                   absl::StatusOr<absl::string_view> expect, uint32_t flags) {",
          "",
          "[Added Lines]",
          "107:                   std::string hexstring, absl::StatusOr<std::string> expect,",
          "108:                   uint32_t flags) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:         grpc_error_get_status(err, Timestamp::InfFuture(), &code, &message,",
          "153:                               nullptr, nullptr);",
          "154:         EXPECT_EQ(code, static_cast<grpc_status_code>(expect.status().code()))",
          "156:         EXPECT_THAT(message, ::testing::HasSubstr(expect.status().message()))",
          "158:         saw_error = true;",
          "159:         if (flags & kFailureIsConnectionError) return;",
          "160:       }",
          "",
          "[Removed Lines]",
          "155:             << err;",
          "157:             << err;",
          "",
          "[Added Lines]",
          "158:             << err << \" slice[\" << i << \"]; input: \" << hexstring",
          "159:             << \"\\nTABLE:\\n\"",
          "160:             << parser_->hpack_table()->TestOnlyDynamicTableAsString();",
          "162:             << err << \" slice[\" << i << \"]; input: \" << hexstring",
          "163:             << \"\\nTABLE:\\n\"",
          "164:             << parser_->hpack_table()->TestOnlyDynamicTableAsString();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "211: INSTANTIATE_TEST_SUITE_P(",
          "212:     ParseTest, ParseTest,",
          "213:     ::testing::Values(",
          "215:              {},",
          "216:              {",
          "",
          "[Removed Lines]",
          "214:         Test{{},",
          "",
          "[Added Lines]",
          "221:         Test{\"RfcTestD2\",",
          "222:              {},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "229:                  {\"82\", \":method: GET\\n\", 0},",
          "230:              }},",
          "232:              {},",
          "233:              {",
          "",
          "[Removed Lines]",
          "231:         Test{{},",
          "",
          "[Added Lines]",
          "239:         Test{\"RfcTestD3\",",
          "240:              {},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:                   \"custom-key: custom-value\\n\",",
          "258:                   0},",
          "259:              }},",
          "261:              {},",
          "262:              {",
          "",
          "[Removed Lines]",
          "260:         Test{{},",
          "",
          "[Added Lines]",
          "269:         Test{\"RfcTestD4\",",
          "270:              {},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:                   \"custom-key: custom-value\\n\",",
          "287:                   0},",
          "288:              }},",
          "290:              {},",
          "291:              {",
          "",
          "[Removed Lines]",
          "289:         Test{{256},",
          "",
          "[Added Lines]",
          "299:         Test{\"RfcTestD5\",",
          "300:              {256},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "324:                   \"version=1\\n\",",
          "325:                   0},",
          "326:              }},",
          "328:              {},",
          "329:              {",
          "",
          "[Removed Lines]",
          "327:         Test{{256},",
          "",
          "[Added Lines]",
          "338:         Test{\"RfcTestD6\",",
          "339:              {256},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "359:                   \"version=1\\n\",",
          "360:                   0},",
          "361:              }},",
          "363:              {1024},",
          "364:              {{\"3fc43fc4\", absl::InternalError(\"Attempt to make hpack table\"),",
          "365:                kFailureIsConnectionError}}},",
          "367:              {},",
          "368:              {{\"3ba4a41007f0a40f2d62696e8b632a5b29a40fa4a4281007f0\",",
          "369:                absl::InternalError(\"Invalid HPACK index received\"),",
          "370:                kFailureIsConnectionError}}},",
          "372:              {},",
          "373:              {{\"2aa41007f0a40f2d62696e8163a41f1f00275bf0692862a4dbf0f00963\",",
          "374:                absl::InternalError(",
          "375:                    \"More than two max table size changes in a single frame\"),",
          "376:                kFailureIsConnectionError}}},",
          "378:              {},",
          "379:              {{\"2aa41007f0a40f2d62696e8363271f00275bf06928626e2d213fa40fdbf0212\"",
          "380:                \"8215cf00963\",",
          "383:              {},",
          "384:              {{\"a4a41007f0a40f2d62696e8b635b29282d2762696e3b0921213fa41fdbf0211\"",
          "385:                \"007f07b282d62696ef009215c0921e51fe91b3b3f47ed5b282821215cf0\",",
          "",
          "[Removed Lines]",
          "362:         Test{{},",
          "366:         Test{{},",
          "371:         Test{{},",
          "377:         Test{{},",
          "381:                absl::InternalError(\"illegal base64 encoding\"), 0}}},",
          "382:         Test{{},",
          "",
          "[Added Lines]",
          "374:         Test{\"IllegalHpackTableGrowth\",",
          "375:              {},",
          "379:         Test{\"FuzzerFoundInvalidHpackIndexFuzzerFound1\",",
          "380:              {},",
          "385:         Test{\"FuzzerFoundMultipleTableSizeChanges1\",",
          "386:              {},",
          "392:         Test{\"FuzzerFoundIllegalHeaderKey1\",",
          "393:              {},",
          "397:                absl::InternalError(\"Illegal header key\"), 0}}},",
          "398:         Test{\"FuzzerFoundMultipleTableSizeChanges2\",",
          "399:              {},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "387:                    \"More than two max table size changes in a single frame\"),",
          "388:                kFailureIsConnectionError}}},",
          "389:         Test{",
          "390:             {},",
          "391:             {},",
          "392:             {{\"696969696969696969696969696969696969696969696969696969696969696\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:             \"FuzzerFoundInterOverflow1\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "398:               \"ffffffffffff632a5b29a428a42d0fdbf027f0628363696e092121\",",
          "399:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "400:               kEndOfHeaders | kFailureIsConnectionError}}},",
          "402:              {},",
          "403:              {{\"0e 00 00 df\",",
          "408:              {},",
          "409:              {",
          "",
          "[Removed Lines]",
          "401:         Test{{},",
          "404:                absl::InternalError(",
          "405:                    \"Error parsing ':status' metadata: error=not an integer\"),",
          "406:                0}}},",
          "407:         Test{{},",
          "",
          "[Added Lines]",
          "419:         Test{\"StatusIsAnInteger\",",
          "420:              {},",
          "423:                absl::InternalError(\"Error parsing ':status' metadata\"), 0}}},",
          "424:         Test{\"BinaryMetadataFromBase64\",",
          "425:              {},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "415:                   \"4d 51 3d 3d\",",
          "416:                   \"a.b.c-bin: omg2021\\n\", 0},",
          "417:              }},",
          "419:              {},",
          "420:              {// Binary metadata: created using:",
          "",
          "[Removed Lines]",
          "418:         Test{{},",
          "",
          "[Added Lines]",
          "436:         Test{\"Base64LegalEncoding\",",
          "437:              {},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "424:               {\"4009612e622e632d62696e1c6c75636b696c7920666f722075732c206974\"",
          "425:                \"27732074756573646179\",",
          "426:                absl::InternalError(\"Error parsing 'a.b.c-bin' metadata: \"",
          "428:                0},",
          "429:               {\"be\",",
          "430:                absl::InternalError(\"Error parsing 'a.b.c-bin' metadata: \"",
          "432:                0}}},",
          "434:              {},",
          "435:              {// created using:",
          "",
          "[Removed Lines]",
          "427:                                    \"error=illegal base64 encoding\"),",
          "431:                                    \"error=illegal base64 encoding\"),",
          "433:         Test{{},",
          "",
          "[Added Lines]",
          "446:                                    \"illegal base64 encoding\"),",
          "450:                                    \"illegal base64 encoding\"),",
          "452:         Test{\"TeIsTrailers\",",
          "453:              {},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "439:               {\"400274650767617262616765\",",
          "440:                absl::InternalError(\"Error parsing 'te' metadata\"), 0},",
          "441:               {\"be\", absl::InternalError(\"Error parsing 'te' metadata\"), 0}}},",
          "443:              128,",
          "444:              {",
          "445:                  {// Generated with: tools/codegen/core/gen_header_frame.py",
          "",
          "[Removed Lines]",
          "442:         Test{{},",
          "",
          "[Added Lines]",
          "462:         Test{\"MetadataSizeLimitCheck\",",
          "463:              {},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "450:                   \"616e67656c6963610762616767696e73\",",
          "451:                   absl::ResourceExhaustedError(",
          "452:                       \"received metadata size exceeds hard limit\"),",
          "462:                  {\"bebfc0c1\",",
          "",
          "[Removed Lines]",
          "453:                   0},",
          "456:                  {\"be\", \"angelica: baggins\\n\", 0},",
          "457:                  {\"bf\", \"amaranth: brandybuck\\n\", 0},",
          "458:                  {\"c0\", \"adalgrim: took\\n\", 0},",
          "459:                  {\"c1\", \"adaldrida: brandybuck\\n\", 0},",
          "",
          "[Added Lines]",
          "474:                   kEndOfHeaders},",
          "477:                  {\"be\", \"angelica: baggins\\n\", kEndOfHeaders},",
          "478:                  {\"bf\", \"amaranth: brandybuck\\n\", kEndOfHeaders},",
          "479:                  {\"c0\", \"adalgrim: took\\n\", kEndOfHeaders},",
          "480:                  {\"c1\", \"adaldrida: brandybuck\\n\", kEndOfHeaders},",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "465:                   0},",
          "466:              }},",
          "467:         Test{",
          "468:             {},",
          "469:             {},",
          "470:             {{\"be\", absl::InternalError(\"Invalid HPACK index received\"),",
          "471:               kFailureIsConnectionError}},",
          "472:         },",
          "473:         Test{",
          "474:             {},",
          "475:             {},",
          "476:             {{\"80\", absl::InternalError(\"Illegal hpack op code\"),",
          "477:               kFailureIsConnectionError}},",
          "478:         },",
          "479:         Test{",
          "480:             {},",
          "481:             {},",
          "482:             {{\"29\", \"\", kFailureIsConnectionError}},",
          "483:         },",
          "484:         Test{",
          "485:             {},",
          "486:             {},",
          "487:             {{\"\", \"\", kWithPriority}},",
          "488:         },",
          "489:         Test{",
          "490:             {},",
          "491:             {},",
          "492:             {{\"f5\", absl::InternalError(\"Invalid HPACK index received\"),",
          "493:               kFailureIsConnectionError}},",
          "494:         },",
          "495:         Test{",
          "496:             {},",
          "497:             {},",
          "498:             {{\"0f\", \"\", 0}},",
          "499:         },",
          "500:         Test{",
          "501:             {},",
          "502:             {},",
          "503:             {{\"7f\", \"\", 0}},",
          "504:         },",
          "505:         Test{",
          "506:             {},",
          "507:             {},",
          "509:         },",
          "510:         Test{",
          "511:             {},",
          "512:             {},",
          "513:             {{\"ffffffffff00ff\",",
          "",
          "[Removed Lines]",
          "508:             {{\"1bffffff7c1b\", \"\", 0}},",
          "",
          "[Added Lines]",
          "489:             \"SingleByteBE\",",
          "496:             \"SingleByte80\",",
          "503:             \"SingleByte29\",",
          "509:             \"EmptyWithPriority\",",
          "515:             \"SingleByteF5\",",
          "522:             \"SingleByte0f\",",
          "528:             \"SingleByte7f\",",
          "534:             \"FuzzerCoverage1bffffff7c1b\",",
          "537:             {{\"1bffffff7c1b\",",
          "538:               absl::ResourceExhaustedError(",
          "539:                   \"received metadata size exceeds hard limit\"),",
          "540:               0}},",
          "543:             \"FuzzerCoverageffffffffff00ff\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "515:               kFailureIsConnectionError}},",
          "516:         },",
          "517:         Test{",
          "518:             {},",
          "519:             {},",
          "520:             {{\"ff8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:             \"FuzzerCoverageIntegerOverflow2\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "524:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "525:               kFailureIsConnectionError}}},",
          "526:         Test{",
          "527:             {},",
          "528:             {9},",
          "529:             {{\"3f6672616d6573207ba2020656e645f6f665f686561646572733a2074727565a\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:             \"FuzzerCoverageMetadataLimits\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "535:               absl::ResourceExhaustedError(",
          "536:                   \"received metadata size exceeds hard limit\"),",
          "537:               kWithPriority}}},",
          "539:              {},",
          "540:              {{\"52046772706300073a737461747573033230300e7f\",",
          "541:                \":status: 200\\naccept-ranges: grpc\\n\", 0}}},",
          "543:              {},",
          "544:              {{\"a4a41007f0a40f2d62696e8beda42d5b63272129a410626907\",",
          "546:         Test{",
          "",
          "[Removed Lines]",
          "538:         Test{{},",
          "542:         Test{{},",
          "545:                absl::InternalError(\"illegal base64 encoding\"), 0}}},",
          "",
          "[Added Lines]",
          "573:         Test{\"FuzzerCoverage52046772706300073a737461747573033230300e7f\",",
          "574:              {},",
          "578:         Test{\"FuzzerCoveragea4a41007f0a40f2d62696e8beda42d5b63272129a410626907\",",
          "579:              {},",
          "582:                absl::InternalError(\"Illegal header key\"), 0}}},",
          "584:             \"HpackTableSizeWithBase64\",",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "601:                  kFailureIsConnectionError},",
          "602:             }},",
          "603:         Test{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:             \"HpackTableSizeWithBase64AndHuffman\",",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "657:                 {\"c0\", absl::InternalError(\"Invalid HPACK index received\"),",
          "658:                  kFailureIsConnectionError},",
          "659:             }},",
          "662:              {},",
          "663:              {{\"60\",",
          "664:                absl::InternalError(\"Incomplete header at the end of a \"",
          "665:                                    \"header/continuation sequence\"),",
          "666:                kEndOfStream | kFailureIsConnectionError}}},",
          "668:              {},",
          "669:              {{\"89\", \":status: 204\\n\", 0},",
          "670:               {\"89\", \":status: 204\\n\", 0},",
          "",
          "[Removed Lines]",
          "660:         Test{{}, {}, {{\"7a\", \"\", 0}}},",
          "661:         Test{{},",
          "667:         Test{{},",
          "",
          "[Added Lines]",
          "699:         Test{\"SingleByte7a\", {}, {}, {{\"7a\", \"\", 0}}},",
          "700:         Test{\"SingleByte60\",",
          "701:              {},",
          "707:         Test{\"FuzzerFoundMultipleTableSizeChanges3\",",
          "708:              {},",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "672:                absl::InternalError(",
          "673:                    \"More than two max table size changes in a single frame\"),",
          "674:                kFailureIsConnectionError}}},",
          "676:              {},",
          "677:              {{\"4005782d62696edbd94e1f7fbbf983267e36a313fd47c9bab54d5e592f5d\",",
          "678:                \"\", 0}}},",
          "681:         Test{",
          "682:             {},",
          "683:             {},",
          "684:             {{// Generated with: tools/codegen/core/gen_header_frame.py",
          "",
          "[Removed Lines]",
          "675:         Test{{},",
          "679:         Test{{}, {}, {{\"72656672657368\", \"\", 0}}},",
          "680:         Test{{}, {}, {{\"66e6645f74\", \"\", 0}, {\"66645f74\", \"\", 0}}},",
          "",
          "[Added Lines]",
          "716:         Test{\"FuzzerCoverage4005782d62696edbd94e1f7etc\",",
          "717:              {},",
          "721:         Test{\"FuzzerCoverage72656672657368\",",
          "722:              {},",
          "723:              {},",
          "724:              {{\"72656672657368\", \"\", 0}}},",
          "725:         Test{\"FuzzerCoverage66e6645f74Then66645f74\",",
          "726:              {},",
          "727:              {},",
          "728:              {{\"66e6645f74\", \"\", 0}, {\"66645f74\", \"\", 0}}},",
          "730:             \"MixedCaseHeadersAreStreamErrors\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "691:               \"be\", absl::InternalError(\"Illegal header key: MiXeD-CaSe\"), 0}}},",
          "692:         Test{",
          "693:             {},",
          "694:             {},",
          "695:             {{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",",
          "696:               absl::InternalError(\"integer overflow in hpack integer decoding\"),",
          "697:               kFailureIsConnectionError}}},",
          "699:              {},",
          "700:              {{\"dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad\"",
          "701:                \"adadadadadadadadadadadadadadadadadadadadadadadadadadadadadadada\"",
          "702:                \"dadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadad\"",
          "703:                \"adadadadadadadadadadadadadadadadadadada\",",
          "704:                absl::InternalError(\"Invalid HPACK index received\"),",
          "707: }  // namespace",
          "708: }  // namespace grpc_core",
          "",
          "[Removed Lines]",
          "698:         Test{{},",
          "705:                kWithPriority | kFailureIsConnectionError}}}));",
          "",
          "[Added Lines]",
          "742:             \"FuzzerCoverageIntegerOverflow3\",",
          "748:         Test{\"Dadadadadada\",",
          "749:              {},",
          "756:                kWithPriority | kFailureIsConnectionError}}},",
          "757:         Test{\"MaliciousVarintEncoding\",",
          "758:              {},",
          "759:              {},",
          "760:              {{\"1f80808080808080808080808080808080808080808080808080808080\",",
          "761:                absl::InternalError(",
          "762:                    \"Malicious varint encoding detected in HPACK stream\"),",
          "763:                kFailureIsConnectionError}}}),",
          "764:     NameFromConfig);",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.c++.internal||tools/doxygen/Doxyfile.c++.internal": [
          "File: tools/doxygen/Doxyfile.c++.internal -> tools/doxygen/Doxyfile.c++.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297: src/core/ext/transport/chttp2/transport/hpack_encoder.h \\",
          "1298: src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "1299: src/core/ext/transport/chttp2/transport/hpack_encoder_table.h \\",
          "1300: src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "1301: src/core/ext/transport/chttp2/transport/hpack_parser.h \\",
          "1302: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "1301: src/core/ext/transport/chttp2/transport/hpack_parse_result.h \\",
          "",
          "---------------"
        ],
        "tools/doxygen/Doxyfile.core.internal||tools/doxygen/Doxyfile.core.internal": [
          "File: tools/doxygen/Doxyfile.core.internal -> tools/doxygen/Doxyfile.core.internal",
          "--- Hunk 1 ---",
          "[Context before]",
          "1073: src/core/ext/transport/chttp2/transport/hpack_encoder.h \\",
          "1074: src/core/ext/transport/chttp2/transport/hpack_encoder_table.cc \\",
          "1075: src/core/ext/transport/chttp2/transport/hpack_encoder_table.h \\",
          "1076: src/core/ext/transport/chttp2/transport/hpack_parser.cc \\",
          "1077: src/core/ext/transport/chttp2/transport/hpack_parser.h \\",
          "1078: src/core/ext/transport/chttp2/transport/hpack_parser_table.cc \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1076: src/core/ext/transport/chttp2/transport/hpack_parse_result.cc \\",
          "1077: src/core/ext/transport/chttp2/transport/hpack_parse_result.h \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afddf1a70c891d70f46d6fc5e7829ee12223ab3a",
      "candidate_info": {
        "commit_hash": "afddf1a70c891d70f46d6fc5e7829ee12223ab3a",
        "repo": "grpc/grpc",
        "commit_url": "https://github.com/grpc/grpc/commit/afddf1a70c891d70f46d6fc5e7829ee12223ab3a",
        "files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "test/core/end2end/tests/large_metadata.cc"
        ],
        "message": "[chttp2] Better error message on metadata size exceeded message (#32809)\n\nThis error can trigger for either initial or trailing metadata (and\nwe've had outages where the latter was the cause).\n\nI don't think we know at this layer if we're parsing initial or trailing\n- though it'd be a good exercise to plumb that through.\n\nFor now remove the word initial because it's better to give less\ninformation than wrong information.\n\n<!--\n\nIf you know who should review your pull request, please assign it to\nthat\nperson, otherwise the pull request would get assigned randomly.\n\nIf your pull request is for a specific language, please add the\nappropriate\nlang label.\n\n-->",
        "before_after_code_files": [
          "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "test/core/end2end/tests/large_metadata.cc||test/core/end2end/tests/large_metadata.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ],
          "candidate": [
            "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/core/ext/transport/chttp2/transport/hpack_parser.cc||src/core/ext/transport/chttp2/transport/hpack_parser.cc": [
          "File: src/core/ext/transport/chttp2/transport/hpack_parser.cc -> src/core/ext/transport/chttp2/transport/hpack_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:                      \"B)\", summary.empty() ? \"\" : \" to \", summary);",
          "838:     if (exceeded_hard_limit) {",
          "839:       error_message = absl::StrCat(",
          "841:           \" vs. \", metadata_early_detection_->hard_limit(), \")\", summary);",
          "842:     } else {",
          "843:       error_message = absl::StrCat(",
          "845:           \" vs. \", metadata_early_detection_->soft_limit(),",
          "846:           \"), rejecting requests with some random probability\", summary);",
          "847:     }",
          "",
          "[Removed Lines]",
          "840:           \"received initial metadata size exceeds hard limit (\", *frame_length_,",
          "844:           \"received initial metadata size exceeds soft limit (\", *frame_length_,",
          "",
          "[Added Lines]",
          "840:           \"received metadata size exceeds hard limit (\", *frame_length_,",
          "844:           \"received metadata size exceeds soft limit (\", *frame_length_,",
          "",
          "---------------"
        ],
        "test/core/end2end/tests/large_metadata.cc||test/core/end2end/tests/large_metadata.cc": [
          "File: test/core/end2end/tests/large_metadata.cc -> test/core/end2end/tests/large_metadata.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     for (int i = 0; i < count; ++i) {",
          "48:       auto status = PerformOneRequest(metadata_size);",
          "49:       if (status.status() == GRPC_STATUS_RESOURCE_EXHAUSTED) {",
          "53:       } else {",
          "54:         num_requests_accepted++;",
          "55:         EXPECT_EQ(status.status(), GRPC_STATUS_OK);",
          "",
          "[Removed Lines]",
          "50:         EXPECT_THAT(",
          "51:             status.message(),",
          "52:             ::testing::StartsWith(\"received initial metadata size exceeds\"));",
          "",
          "[Added Lines]",
          "50:         EXPECT_THAT(status.message(),",
          "51:                     ::testing::StartsWith(\"received metadata size exceeds\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}