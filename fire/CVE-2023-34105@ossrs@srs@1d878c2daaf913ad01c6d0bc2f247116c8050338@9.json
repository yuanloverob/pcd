{
  "cve_id": "CVE-2023-34105",
  "cve_desc": "SRS is a real-time video server supporting RTMP, WebRTC, HLS, HTTP-FLV, SRT, MPEG-DASH, and GB28181. Prior to versions 5.0.157, 5.0-b1, and 6.0.48, SRS's `api-server` server is vulnerable to a drive-by command injection. An attacker may send a request to the `/api/v1/snapshots` endpoint containing any commands to be executed as part of the body of the POST request. This issue may lead to Remote Code Execution (RCE). Versions 5.0.157, 5.0-b1, and 6.0.48 contain a fix.",
  "repo": "ossrs/srs",
  "patch_hash": "1d878c2daaf913ad01c6d0bc2f247116c8050338",
  "patch_info": {
    "commit_hash": "1d878c2daaf913ad01c6d0bc2f247116c8050338",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/1d878c2daaf913ad01c6d0bc2f247116c8050338",
    "files": [
      "trunk/doc/CHANGELOG.md",
      "trunk/research/api-server/server.go",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp"
    ],
    "message": "Fix command injection in api-server for HTTP callback. v5.0.157, v6.0.48",
    "before_after_code_files": [
      "trunk/research/api-server/server.go||trunk/research/api-server/server.go",
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
    ]
  },
  "patch_diff": {
    "trunk/research/api-server/server.go||trunk/research/api-server/server.go": [
      "File: trunk/research/api-server/server.go -> trunk/research/api-server/server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  normalPicPath := path.Join(outputPicDir, fmt.Sprintf(\"%v\", v.Stream)+\"-%03d.png\")",
      "401:  bestPng := path.Join(outputPicDir, fmt.Sprintf(\"%v-best.png\", v.Stream))",
      "405:  timeoutCtx, _ := context.WithTimeout(v.cancelCtx, v.timeout)",
      "407:  if err = cmd.Run(); err != nil {",
      "408:   log.Println(fmt.Sprintf(\"run snapshot %v cmd failed, err is %v\", v.Tag(), err))",
      "409:   return",
      "",
      "[Removed Lines]",
      "403:  param := fmt.Sprintf(\"%v -i %v -vf fps=1 -vcodec png -f image2 -an -y -vframes %v -y %v\", ffmpegPath, inputUrl, v.vframes, normalPicPath)",
      "404:  log.Println(fmt.Sprintf(\"start snapshot, cmd param=%v\", param))",
      "406:  cmd := exec.CommandContext(timeoutCtx, \"/bin/bash\", \"-c\", param)",
      "",
      "[Added Lines]",
      "403:  params := []string{",
      "404:   \"-i\", inputUrl,",
      "405:   \"-vf\", \"fps=1\",",
      "406:   \"-vcodec\", \"png\",",
      "407:   \"-f\", \"image2\",",
      "408:   \"-an\",",
      "409:   \"-vframes\", strconv.Itoa(v.vframes),",
      "410:   \"-y\", normalPicPath,",
      "411:  }",
      "412:  log.Println(fmt.Sprintf(\"start snapshot, cmd param=%v %v\", ffmpegPath, strings.Join(params, \" \")))",
      "414:  cmd := exec.CommandContext(timeoutCtx, ffmpegPath, params...)",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    156",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    157",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    47",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    48",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15601b4b2a8be563470d84c4026ebc6c28fe92b8",
      "candidate_info": {
        "commit_hash": "15601b4b2a8be563470d84c4026ebc6c28fe92b8",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/15601b4b2a8be563470d84c4026ebc6c28fe92b8",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "RTC: Support OPUS stereo SDP option. v5.0.203 v6.0.105 (#3910)\n\nIn an SDK that supports RTC Opus stereo, the parameter \"stereo=1\" may\nappear. SRS (Spatial Reference System) needs to handle this correctly\nand return an answer to enable WebRTC stereo support.\n\n\n\n---------\n\n`TRANS_BY_GPT4`",
        "before_after_code_files": [
          "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp": [
          "File: trunk/src/app/srs_app_rtc_source.cpp -> trunk/src/app/srs_app_rtc_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1968:     channel_ = channel;",
          "1969:     opus_param_.minptime = 0;",
          "1970:     opus_param_.use_inband_fec = false;",
          "1971:     opus_param_.usedtx = false;",
          "1972: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1971:     opus_param_.stereo = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2009:     if (opus_param_.use_inband_fec) {",
          "2010:         format_specific_param << \";useinbandfec=1\";",
          "2011:     }",
          "2012:     if (opus_param_.usedtx) {",
          "2013:         format_specific_param << \";usedtx=1\";",
          "2014:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2013:     if (opus_param_.stereo) {",
          "2014:         format_specific_param << \";stereo=1\";",
          "2015:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2028:                 opus_param_.minptime = (int)::atol(kv[1].c_str());",
          "2029:             } else if (kv[0] == \"useinbandfec\") {",
          "2030:                 opus_param_.use_inband_fec = (kv[1] == \"1\") ? true : false;",
          "2031:             } else if (kv[0] == \"usedtx\") {",
          "2032:                 opus_param_.usedtx = (kv[1] == \"1\") ? true : false;",
          "2033:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2035:             } else if (kv[0] == \"stereo\") {",
          "2036:                 opus_param_.stereo = (kv[1] == \"1\") ? true : false;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.hpp||trunk/src/app/srs_app_rtc_source.hpp": [
          "File: trunk/src/app/srs_app_rtc_source.hpp -> trunk/src/app/srs_app_rtc_source.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:     {",
          "390:         int minptime;",
          "391:         bool use_inband_fec;",
          "392:         bool usedtx;",
          "394:         SrsOpusParameter() {",
          "395:             minptime = 0;",
          "396:             use_inband_fec = false;",
          "397:             usedtx = false;",
          "398:         }",
          "399:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:         bool stereo;",
          "398:             stereo = false;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    202",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    203",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    104",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    105",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa5ec87fcbc1e30968b90ddb41a3420a6346b0e2",
      "candidate_info": {
        "commit_hash": "aa5ec87fcbc1e30968b90ddb41a3420a6346b0e2",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/aa5ec87fcbc1e30968b90ddb41a3420a6346b0e2",
        "files": [
          "Dockerfile",
          "trunk/conf/full.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Support HTTP-API for fetching reload result. v5.0.176 v6.0.71 (#3779)\n\n## Reload Error Ignore\n\nDuring a Reload, several stages will be passed through:\n1. Parsing new configurations: Parse.\n2. Transforming configurations: Transform.\n3. Applying configurations: Apply.\n\nPreviously, any error at any stage would result in a direct exit, making\nthe system completely dependent on configuration checks:\n\n```bash\n./objs/srs -c conf/srs.conf -t\necho $?\n#0\n```\n\nOptimized to: If an error occurs before applying the configuration, it\ncan be ignored. If an error occurs during the application of the\nconfiguration, some of the configuration may have already taken effect,\nleading to unpredictable behavior, so SRS will exit directly.\n\n## Reload Fetch API\n\nAdded a new HTTP API to query the result of the reload.\n\n```nginx\nhttp_api {\n    enabled         on;\n    raw_api {\n        enabled on;\n        allow_reload on;\n    }\n}\n```\n\n```bash\ncurl http://localhost:1985/api/v1/raw?rpc=reload-fetch\n```\n\n```json\n{\n  \"code\": 0,\n  \"data\": {\n    \"err\": 0,\n    \"msg\": \"Success\",\n    \"state\": 0,\n    \"rid\": \"0s6y0n9\"\n  }\n}\n\n{\n  \"code\": 0,\n  \"data\": {\n    \"err\": 1023,\n    \"msg\": \"code=1023(ConfigInvalid) : parse file : parse buffer containers/conf/srs.release-local.conf : root parse : parse dir : parse include buffer containers/data/config/srs.vhost.conf : read token, line=0, state=0 : line 3: unexpected end of file, expecting ; or \\\"}\\\"\",\n    \"state\": 1,\n    \"rid\": \"0g4z471\"\n  }\n}\n```\n\nThis way, you can know if the last reload of the system was successful.\n\n---------\n\nCo-authored-by: Haibo Chen <495810242@qq.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp",
          "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:     # The available variables:",
          "652:     #           [stream] The video channel codec ID.",
          "653:     output rtmp://127.0.0.1/live/[stream];",
          "656:     # @remark We always enable bundle for media streams at this port.",
          "657:     listen 9000;",
          "658:     # SIP server for GB28181. Please note that this is only a demonstrated SIP server, please never use it in your",
          "",
          "[Removed Lines]",
          "654:     # The listen TCP/UDP port for stream converter.",
          "655:     #       For gb28181 converter, listen at TCP/UDP port. for example, 9000.",
          "",
          "[Added Lines]",
          "654:     # The listen TCP port for stream converter.",
          "655:     #       For gb28181 converter, listen at TCP port. for example, 9000.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "662:         # Whether enable embedded SIP server.",
          "663:         # Default: on",
          "664:         enabled on;",
          "666:         # Default: 5060",
          "667:         listen 5060;",
          "668:         # The SIP or media transport timeout in seconds.",
          "",
          "[Removed Lines]",
          "665:         # The SIP listen port, for both TCP and UDP protocol.",
          "",
          "[Added Lines]",
          "665:         # The SIP listen port, for TCP protocol.",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1333: }",
          "1337: {",
          "1338:     srs_error_t err = srs_success;",
          "1340:     SrsConfig conf;",
          "1342:     if ((err = conf.parse_file(config_file.c_str())) != srs_success) {",
          "1343:         return srs_error_wrap(err, \"parse file\");",
          "1344:     }",
          "1345:     srs_info(\"config reloader parse file success.\");",
          "1348:     if ((err = srs_config_transform_vhost(conf.root)) != srs_success) {",
          "1349:         return srs_error_wrap(err, \"transform config\");",
          "1350:     }",
          "",
          "[Removed Lines]",
          "1336: srs_error_t SrsConfig::reload()",
          "",
          "[Added Lines]",
          "1336: srs_error_t SrsConfig::reload(SrsReloadState *pstate)",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.hpp||trunk/src/app/srs_app_config.hpp": [
          "File: trunk/src/app/srs_app_config.hpp -> trunk/src/app/srs_app_config.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:     virtual srs_error_t read_token(srs_internal::SrsConfigBuffer* buffer, std::vector<std::string>& args, int& line_start, SrsDirectiveState& state);",
          "257: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: enum SrsReloadState {",
          "261:     SrsReloadStateInit = 0,",
          "263:     SrsReloadStateParsing = 10,",
          "265:     SrsReloadStateTransforming = 20,",
          "267:     SrsReloadStateApplying = 30,",
          "269:     SrsReloadStateFinished = 90,",
          "270: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     virtual void unsubscribe(ISrsReloadHandler* handler);",
          "312: private:",
          "314:     virtual srs_error_t reload_vhost(SrsConfDirective* old_root);",
          "",
          "[Removed Lines]",
          "311:     virtual srs_error_t reload();",
          "",
          "[Added Lines]",
          "324:     virtual srs_error_t reload(SrsReloadState *pstate);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp": [
          "File: trunk/src/app/srs_app_http_api.cpp -> trunk/src/app/srs_app_http_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "863:             }",
          "864:         } else {",
          "865:             SrsJsonObject* data = SrsJsonAny::object();",
          "868:             if ((err = client->dumps(data)) != srs_success) {",
          "869:                 int code = srs_error_code(err);",
          "",
          "[Removed Lines]",
          "866:             obj->set(\"client\", data);;",
          "",
          "[Added Lines]",
          "866:             obj->set(\"client\", data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "907:     _srs_config->unsubscribe(this);",
          "908: }",
          "910: srs_error_t SrsGoApiRaw::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "911: {",
          "912:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910: extern srs_error_t _srs_reload_err;",
          "911: extern SrsReloadState _srs_reload_state;",
          "912: extern std::string _srs_reload_id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "942:         return srs_api_response_code(w, r, ERROR_SYSTEM_CONFIG_RAW);",
          "943:     }",
          "",
          "[Removed Lines]",
          "941:     if (rpc.empty() || rpc != \"reload\") {",
          "",
          "[Added Lines]",
          "945:     if (rpc.empty() || (rpc != \"reload\" && rpc != \"reload-fetch\")) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "951:         server->on_signal(SRS_SIGNAL_RELOAD);",
          "952:         return srs_api_response_code(w, r, ERROR_SUCCESS);",
          "953:     }",
          "955:     return err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:     } else if (rpc == \"reload-fetch\") {",
          "958:         SrsJsonObject* data = SrsJsonAny::object();",
          "959:         obj->set(\"data\", data);",
          "961:         data->set(\"err\", SrsJsonAny::integer(srs_error_code(_srs_reload_err)));",
          "962:         data->set(\"msg\", SrsJsonAny::str(srs_error_summary(_srs_reload_err).c_str()));",
          "963:         data->set(\"state\", SrsJsonAny::integer(_srs_reload_state));",
          "964:         data->set(\"rid\", SrsJsonAny::str(_srs_reload_id.c_str()));",
          "966:         return srs_api_response(w, r, obj->dumps());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:     }",
          "876:     wg_->done();",
          "",
          "[Removed Lines]",
          "873:      err = do_cycle();",
          "",
          "[Added Lines]",
          "873:     if ((err = do_cycle()) != srs_success) {",
          "874:         srs_error(\"server err %s\", srs_error_desc(err).c_str());",
          "875:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "942:     }",
          "943: }",
          "945: srs_error_t SrsServer::do_cycle()",
          "946: {",
          "947:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "947: srs_error_t _srs_reload_err;",
          "948: SrsReloadState _srs_reload_state;",
          "949: std::string _srs_reload_id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "992:         if (signal_reload) {",
          "993:             signal_reload = false;",
          "998:             }",
          "1000:         }",
          "1002:         srs_usleep(1 * SRS_UTIME_SECONDS);",
          "",
          "[Removed Lines]",
          "994:             srs_info(\"get signal to reload the config.\");",
          "996:             if ((err = _srs_config->reload()) != srs_success) {",
          "997:                 return srs_error_wrap(err, \"config reload\");",
          "999:             srs_trace(\"reload config success.\");",
          "",
          "[Added Lines]",
          "1000:             srs_trace(\"starting reload config.\");",
          "1002:             SrsReloadState state = SrsReloadStateInit;",
          "1003:             _srs_reload_state = SrsReloadStateInit; srs_freep(_srs_reload_err); _srs_reload_id = srs_random_str(7);",
          "1004:             err = _srs_config->reload(&state);",
          "1005:             _srs_reload_state = state; _srs_reload_err = srs_error_copy(err);",
          "1006:             if (err != srs_success) {",
          "1012:                 if (state == SrsReloadStateApplying) {",
          "1013:                     return srs_error_wrap(err, \"reload fatal error state=%d\", state);",
          "1014:                 }",
          "1016:                 srs_warn(\"reload failed, state=%d, err %s\", state, srs_error_desc(err).c_str());",
          "1017:                 srs_freep(err);",
          "1018:             } else {",
          "1019:                 srs_trace(\"reload config success, state=%d.\", state);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp": [
          "File: trunk/src/app/srs_app_threads.cpp -> trunk/src/app/srs_app_threads.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "295: SrsCircuitBreaker* _srs_circuit_breaker = NULL;",
          "296: SrsAsyncCallWorker* _srs_dvr_async = NULL;",
          "298: srs_error_t srs_global_initialize()",
          "299: {",
          "300:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298: extern srs_error_t _srs_reload_err;",
          "299: extern SrsReloadState _srs_reload_state;",
          "300: extern std::string _srs_reload_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "446:     _srs_apm = new SrsApmClient();",
          "447: #endif",
          "449:     return err;",
          "450: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:     _srs_reload_err = srs_success;",
          "454:     _srs_reload_state = SrsReloadStateInit;",
          "455:     _srs_reload_id = srs_random_str(7);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    175",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    176",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    70",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    71",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03d1d91f2f781fe96cf508c47e6e89a88e53324f",
      "candidate_info": {
        "commit_hash": "03d1d91f2f781fe96cf508c47e6e89a88e53324f",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/03d1d91f2f781fe96cf508c47e6e89a88e53324f",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest.cpp"
        ],
        "message": "Prevent the output of srt logs in utest. v5.0.181 v6.0.79 (#3807)\n\nPrevent the output of srt logs in utest.\n\n---------\n\nCo-authored-by: chundonglinlin <chundonglinlin@163.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest.cpp||trunk/src/utest/srs_utest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    180",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    181",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    78",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    79",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest.cpp||trunk/src/utest/srs_utest.cpp": [
          "File: trunk/src/utest/srs_utest.cpp -> trunk/src/utest/srs_utest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <sys/mman.h>",
          "23: #ifdef SRS_SRT",
          "24: #include <srs_app_srt_server.hpp>",
          "25: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <srt/srt.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: #include <srs_app_st.hpp>",
          "49: srs_error_t prepare_main() {",
          "50:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #ifdef SRS_SRT",
          "50: static void srs_srt_utest_null_log_handler(void* opaque, int level, const char* file, int line,",
          "51:                                            const char* area, const char* message)",
          "52: {",
          "54: }",
          "55: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         return srs_error_wrap(err, \"srt log initialize\");",
          "73:     }",
          "75:     _srt_eventloop = new SrsSrtEventLoop();",
          "76:     if ((err = _srt_eventloop->initialize()) != srs_success) {",
          "77:         return srs_error_wrap(err, \"srt poller initialize\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     srt_setloghandler(NULL, srs_srt_utest_null_log_handler);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c678898608ee38cd5c401aa2f7069bd76ae3c0a",
      "candidate_info": {
        "commit_hash": "8c678898608ee38cd5c401aa2f7069bd76ae3c0a",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/8c678898608ee38cd5c401aa2f7069bd76ae3c0a",
        "files": [
          "trunk/3rdparty/patches/srt/api.cpp-01.patch",
          "trunk/auto/depends.sh",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "SRT: Log level to debug when no socket to accept. v5.0.180 v6.0.78 (#3696)",
        "before_after_code_files": [
          "trunk/auto/depends.sh||trunk/auto/depends.sh",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/auto/depends.sh||trunk/auto/depends.sh": [
          "File: trunk/auto/depends.sh -> trunk/auto/depends.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:         echo \"Build srt-1-fit\" &&",
          "690:         rm -rf ${SRS_OBJS}/${SRS_PLATFORM}/srt-1-fit ${SRS_OBJS}/${SRS_PLATFORM}/3rdparty/srt ${SRS_OBJS}/srt &&",
          "691:         cp -rf ${SRS_WORKDIR}/3rdparty/srt-1-fit ${SRS_OBJS}/${SRS_PLATFORM}/ &&",
          "692:         (",
          "693:             cd ${SRS_OBJS}/${SRS_PLATFORM}/srt-1-fit &&",
          "694:             env PKG_CONFIG_PATH=${SRS_DEPENDS_LIBS}/openssl/lib/pkgconfig \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "692:         patch -p0 -R ${SRS_OBJS}/${SRS_PLATFORM}/srt-1-fit/srtcore/api.cpp ${SRS_WORKDIR}/3rdparty/patches/srt/api.cpp-01.patch &&",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    179",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    180",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    77",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    78",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "add0f369c598568acded6cbf6aa8e8b443e0d44a",
      "candidate_info": {
        "commit_hash": "add0f369c598568acded6cbf6aa8e8b443e0d44a",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/add0f369c598568acded6cbf6aa8e8b443e0d44a",
        "files": [
          "trunk/conf/full.conf",
          "trunk/conf/security.deny.publish.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_codec.cpp",
          "trunk/src/utest/srs_utest_kernel.cpp",
          "trunk/src/utest/srs_utest_kernel.hpp",
          "trunk/src/utest/srs_utest_kernel2.cpp"
        ],
        "message": "Fix RBSP issue, where 0x03 should be removed. v5.0.178 v6.0.75 (#3597)\n\nISO_IEC_14496-10-AVC-2012.pdf, page 65\n7.4.1.1 Encapsulation of an SODB within an RBSP (informative)\n\n... 00 00 03 xx, the 03 byte should be drop where xx represents any 2\nbit pattern: 00, 01, 10, or 11.\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>\nCo-authored-by: chundonglinlin <chundonglinlin@163.com>\nCo-authored-by: winlin <winlin@vip.126.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/conf/security.deny.publish.conf||trunk/conf/security.deny.publish.conf",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/kernel/srs_kernel_codec.cpp||trunk/src/kernel/srs_kernel_codec.cpp",
          "trunk/src/utest/srs_utest_kernel.cpp||trunk/src/utest/srs_utest_kernel.cpp",
          "trunk/src/utest/srs_utest_kernel.hpp||trunk/src/utest/srs_utest_kernel.hpp",
          "trunk/src/utest/srs_utest_kernel2.cpp||trunk/src/utest/srs_utest_kernel2.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328: vhost publish.srs.com {",
          "1329:     # the config for FMLE/Flash publisher, which push RTMP to SRS.",
          "1330:     publish {",
          "1332:         # when enabled the mr, SRS will read as large as possible.",
          "1333:         # Overwrite by env SRS_VHOST_PUBLISH_MR for all vhosts.",
          "1334:         # default: off",
          "",
          "[Removed Lines]",
          "1331:         # about MR, read https://github.com/ossrs/srs/issues/241",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1401: # the security to allow or deny clients.",
          "1402: vhost security.srs.com {",
          "1403:     # security for host to allow or deny clients.",
          "1405:     security {",
          "1406:         # whether enable the security for vhost.",
          "1407:         # default: off",
          "",
          "[Removed Lines]",
          "1404:     # @see https://github.com/ossrs/srs/issues/211",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1781:         # the hls m3u8 target duration ratio,",
          "1782:         #   EXT-X-TARGETDURATION = hls_td_ratio * hls_fragment // init",
          "1783:         #   EXT-X-TARGETDURATION = max(ts_duration, EXT-X-TARGETDURATION) // for each ts",
          "1785:         # Overwrite by env SRS_VHOST_HLS_HLS_TD_RATIO for all vhosts.",
          "1786:         # default: 1.5",
          "1787:         hls_td_ratio 1.5;",
          "",
          "[Removed Lines]",
          "1784:         # @see https://github.com/ossrs/srs/issues/304#issuecomment-74000081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1800:         #       ignore, disable the hls.",
          "1801:         #       disconnect, require encoder republish.",
          "1802:         #       continue, ignore failed try to continue output hls.",
          "1804:         # Overwrite by env SRS_VHOST_HLS_HLS_ON_ERROR for all vhosts.",
          "1805:         # default: continue",
          "1806:         hls_on_error continue;",
          "",
          "[Removed Lines]",
          "1803:         # @see https://github.com/ossrs/srs/issues/264",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/conf/security.deny.publish.conf||trunk/conf/security.deny.publish.conf": [
          "File: trunk/conf/security.deny.publish.conf -> trunk/conf/security.deny.publish.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # security config for srs, allow play and deny publish.",
          "3: # @see full.conf for detail config.",
          "5: listen              1935;",
          "",
          "[Removed Lines]",
          "2: # @see https://github.com/ossrs/srs/issues/211#issuecomment-68507035",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    177",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    178",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    74",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    75",
          "",
          "---------------"
        ],
        "trunk/src/kernel/srs_kernel_codec.cpp||trunk/src/kernel/srs_kernel_codec.cpp": [
          "File: trunk/src/kernel/srs_kernel_codec.cpp -> trunk/src/kernel/srs_kernel_codec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "867:         && video && video->avc_packet_type == SrsVideoAvcFrameTraitSequenceHeader;",
          "868: }",
          "870: srs_error_t SrsFormat::video_avc_demux(SrsBuffer* stream, int64_t timestamp)",
          "871: {",
          "872:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "871: int srs_rbsp_remove_emulation_bytes(SrsBuffer* stream, std::vector<uint8_t>& rbsp)",
          "872: {",
          "873:     int nb_rbsp = 0;",
          "874:     while (!stream->empty()) {",
          "875:         rbsp[nb_rbsp] = stream->read_1bytes();",
          "879:         if (nb_rbsp >= 2 && rbsp[nb_rbsp - 2] == 0 && rbsp[nb_rbsp - 1] == 0 && rbsp[nb_rbsp] == 3) {",
          "881:             if (stream->empty()) {",
          "882:                 nb_rbsp++;",
          "883:                 break;",
          "884:             }",
          "895:             uint8_t ev = stream->read_1bytes();",
          "896:             if (ev > 3) {",
          "897:                 nb_rbsp++;",
          "898:             }",
          "899:             rbsp[nb_rbsp] = ev;",
          "900:         }",
          "902:         nb_rbsp++;",
          "903:     }",
          "905:     return nb_rbsp;",
          "906: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:     return hevc_demux_vps_rbsp((char*)&rbsp[0], nb_rbsp);",
          "1249: }",
          "",
          "[Removed Lines]",
          "1227:     std::vector<int8_t> rbsp(stream->size());",
          "1229:     int nb_rbsp = 0;",
          "1230:     while (!stream->empty()) {",
          "1231:         rbsp[nb_rbsp] = stream->read_1bytes();",
          "1234:         if (nb_rbsp > 2 && rbsp[nb_rbsp - 2] == 0 && rbsp[nb_rbsp - 1] == 0 && rbsp[nb_rbsp] == 3) {",
          "1236:             if (stream->empty()) {",
          "1237:                 break;",
          "1238:             }",
          "1239:             rbsp[nb_rbsp] = stream->read_1bytes();",
          "1240:             nb_rbsp++;",
          "1242:             continue;",
          "1243:         }",
          "1245:         nb_rbsp++;",
          "1246:     }",
          "",
          "[Added Lines]",
          "1265:     std::vector<uint8_t> rbsp(stream->size());",
          "1267:     int nb_rbsp = srs_rbsp_remove_emulation_bytes(stream, rbsp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1394:     return hevc_demux_sps_rbsp((char*)&rbsp[0], nb_rbsp);",
          "1395: }",
          "",
          "[Removed Lines]",
          "1373:     std::vector<int8_t> rbsp(stream->size());",
          "1375:     int nb_rbsp = 0;",
          "1376:     while (!stream->empty()) {",
          "1377:         rbsp[nb_rbsp] = stream->read_1bytes();",
          "1380:         if (nb_rbsp > 2 && rbsp[nb_rbsp - 2] == 0 && rbsp[nb_rbsp - 1] == 0 && rbsp[nb_rbsp] == 3) {",
          "1382:             if (stream->empty()) {",
          "1383:                 break;",
          "1384:             }",
          "1385:             rbsp[nb_rbsp] = stream->read_1bytes();",
          "1386:             nb_rbsp++;",
          "1388:             continue;",
          "1389:         }",
          "1391:         nb_rbsp++;",
          "1392:     }",
          "",
          "[Added Lines]",
          "1394:     std::vector<uint8_t> rbsp(stream->size());",
          "1396:     int nb_rbsp = srs_rbsp_remove_emulation_bytes(stream, rbsp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1572:     stream->skip(1);",
          "1597:     return hevc_demux_pps_rbsp((char*)&rbsp[0], nb_rbsp);",
          "1598: }",
          "",
          "[Removed Lines]",
          "1576:     std::vector<int8_t> rbsp(stream->size());",
          "1578:     int nb_rbsp = 0;",
          "1579:     while (!stream->empty()) {",
          "1580:         rbsp[nb_rbsp] = stream->read_1bytes();",
          "1583:         if (nb_rbsp > 2 && rbsp[nb_rbsp - 2] == 0 && rbsp[nb_rbsp - 1] == 0 && rbsp[nb_rbsp] == 3) {",
          "1585:             if (stream->empty()) {",
          "1586:                 break;",
          "1587:             }",
          "1588:             rbsp[nb_rbsp] = stream->read_1bytes();",
          "1589:             nb_rbsp++;",
          "1591:             continue;",
          "1592:         }",
          "1594:         nb_rbsp++;",
          "1595:     }",
          "",
          "[Added Lines]",
          "1580:     std::vector<uint8_t> rbsp(stream->size());",
          "1582:     int nb_rbsp = srs_rbsp_remove_emulation_bytes(stream, rbsp);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2294:     return avc_demux_sps_rbsp((char*)&rbsp[0], nb_rbsp);",
          "2295: }",
          "2298: srs_error_t SrsFormat::avc_demux_sps_rbsp(char* rbsp, int nb_rbsp)",
          "2299: {",
          "2300:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "2273:     std::vector<int8_t> rbsp(vcodec->sequenceParameterSetNALUnit.size());",
          "2275:     int nb_rbsp = 0;",
          "2276:     while (!stream.empty()) {",
          "2277:         rbsp[nb_rbsp] = stream.read_1bytes();",
          "2280:         if (nb_rbsp > 2 && rbsp[nb_rbsp - 2] == 0 && rbsp[nb_rbsp - 1] == 0 && rbsp[nb_rbsp] == 3) {",
          "2282:             if (stream.empty()) {",
          "2283:                 break;",
          "2284:             }",
          "2285:             rbsp[nb_rbsp] = stream.read_1bytes();",
          "2286:             nb_rbsp++;",
          "2288:             continue;",
          "2289:         }",
          "2291:         nb_rbsp++;",
          "2292:     }",
          "",
          "[Added Lines]",
          "2260:     std::vector<uint8_t> rbsp(vcodec->sequenceParameterSetNALUnit.size());",
          "2262:     int nb_rbsp = srs_rbsp_remove_emulation_bytes(&stream, rbsp);",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_kernel.cpp||trunk/src/utest/srs_utest_kernel.cpp": [
          "File: trunk/src/utest/srs_utest_kernel.cpp -> trunk/src/utest/srs_utest_kernel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3887:     }",
          "3888: }",
          "3890: VOID TEST(KernelCodecTest, VideoFormat)",
          "3891: {",
          "3892:  srs_error_t err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3890: VOID TEST(KernelCoecTest, VideoFormatRbspData)",
          "3891: {",
          "3892:     if (true) {",
          "3893:         vector<uint8_t> nalu = {",
          "3894:                 0x25, 0x00, 0x1f, 0xe2, 0x22, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0xab, 0xff",
          "3895:         };",
          "3897:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "3898:         vector<uint8_t> rbsp(nalu.size());",
          "3899:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "3901:         ASSERT_EQ(nb_rbsp, (int)nalu.size());",
          "3902:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), nalu.data(), nb_rbsp));",
          "3903:     }",
          "3905:     if (true) {",
          "3906:         SrsFormat f;",
          "3907:         vector<uint8_t> nalu = {",
          "3908:                 0x25, 0x00, 0x1f, 0xe2, 0x22, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x80, 0xab, 0xff",
          "3909:         };",
          "3910:         vector<uint8_t> expect = {",
          "3911:                 0x25, 0x00, 0x1f, 0xe2, 0x22, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0xab, 0xff",
          "3912:         };",
          "3922:         for (int i = 0; i <= 3; ++i) {",
          "3923:             nalu[8] = uint8_t(i);",
          "3924:             expect[7] = uint8_t(i);",
          "3926:             SrsBuffer b((char*)nalu.data(), nalu.size());",
          "3927:             vector<uint8_t> rbsp(nalu.size());",
          "3928:             int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "3930:             ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "3931:             EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "3932:         }",
          "3935:         for (int i = 4; i <= 0xff; ++i) {",
          "3936:             nalu[8] = uint8_t(i);",
          "3938:             SrsBuffer b((char*)nalu.data(), nalu.size());",
          "3939:             vector<uint8_t> rbsp(nalu.size());",
          "3940:             int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "3942:             ASSERT_EQ(nb_rbsp, (int)nalu.size());",
          "3943:             EXPECT_TRUE(srs_bytes_equals(rbsp.data(), nalu.data(), nb_rbsp));",
          "3944:         }",
          "3945:     }",
          "3947:     if (true) {",
          "3948:         vector<uint8_t> nalu = {",
          "3949:                 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x04",
          "3950:         };",
          "3951:         vector<uint8_t> expect = {",
          "3952:                 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04",
          "3953:         };",
          "3955:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "3956:         vector<uint8_t> rbsp(nalu.size());",
          "3957:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "3959:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "3960:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "3961:     }",
          "3962: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6346:         HELPER_EXPECT_FAILED(srs_av_base64_decode(\"YWRtaW46YWRtaW\", plaintext));",
          "6347:         EXPECT_STRNE(\"admin:admin\", plaintext.c_str());",
          "6348:     }",
          "",
          "[Removed Lines]",
          "6349: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_kernel.hpp||trunk/src/utest/srs_utest_kernel.hpp": [
          "File: trunk/src/utest/srs_utest_kernel.hpp -> trunk/src/utest/srs_utest_kernel.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <srs_kernel_ts.hpp>",
          "22: #include <srs_kernel_ps.hpp>",
          "23: #include <srs_kernel_stream.hpp>",
          "25: class MockSrsFile",
          "26: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <srs_kernel_utility.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:     MockPsHandler* clear();",
          "156: };",
          "158: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: extern int srs_rbsp_remove_emulation_bytes(SrsBuffer* stream, std::vector<uint8_t>& rbsp);",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_kernel2.cpp||trunk/src/utest/srs_utest_kernel2.cpp": [
          "File: trunk/src/utest/srs_utest_kernel2.cpp -> trunk/src/utest/srs_utest_kernel2.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:     memcpy(data, \"\\x27\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", sizeof(data));",
          "527:     HELPER_EXPECT_SUCCESS(f.on_video(0, data, sizeof(data)));",
          "528: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: VOID TEST(KernelCodecTest, VideoFormatRbspSimple)",
          "531: {",
          "541:     if (true) {",
          "542:         vector<uint8_t> nalu = {0x00, 0x00, 0x03, 0x00};",
          "543:         vector<uint8_t> expect = {0x00, 0x00, 0x00};",
          "545:         vector<uint8_t> rbsp(nalu.size());",
          "546:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "547:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "549:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "550:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "551:     }",
          "553:     if (true) {",
          "554:         vector<uint8_t> nalu = {0x00, 0x00, 0x03, 0x01};",
          "555:         vector<uint8_t> expect = {0x00, 0x00, 0x01};",
          "557:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "558:         vector<uint8_t> rbsp(nalu.size());",
          "559:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "561:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "562:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "563:     }",
          "565:     if (true) {",
          "566:         vector<uint8_t> nalu = {0x00, 0x00, 0x03, 0x02};",
          "567:         vector<uint8_t> expect = {0x00, 0x00, 0x02};",
          "569:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "570:         vector<uint8_t> rbsp(nalu.size());",
          "571:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "573:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "574:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "575:     }",
          "577:     if (true) {",
          "578:         vector<uint8_t> nalu = {0x00, 0x00, 0x03, 0x03};",
          "579:         vector<uint8_t> expect = {0x00, 0x00, 0x03};",
          "581:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "582:         vector<uint8_t> rbsp(nalu.size());",
          "583:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "585:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "586:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "587:     }",
          "589:     if (true) {",
          "590:         vector<uint8_t> nalu = {0x00, 0x00, 0x03, 0x04};",
          "591:         vector<uint8_t> expect = {0x00, 0x00, 0x03, 0x04};",
          "593:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "594:         vector<uint8_t> rbsp(nalu.size());",
          "595:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "597:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "598:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "599:     }",
          "601:     if (true) {",
          "602:         vector<uint8_t> nalu = {0x00, 0x00, 0x03, 0xff};",
          "603:         vector<uint8_t> expect = {0x00, 0x00, 0x03, 0xff};",
          "605:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "606:         vector<uint8_t> rbsp(nalu.size());",
          "607:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "609:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "610:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "611:     }",
          "612: }",
          "614: VOID TEST(KernelCodecTest, VideoFormatRbspEdge)",
          "615: {",
          "616:     if (true) {",
          "617:         vector<uint8_t> nalu = {0x00, 0x00, 0x03};",
          "618:         vector<uint8_t> expect = {0x00, 0x00, 0x03};",
          "620:         vector<uint8_t> rbsp(nalu.size());",
          "621:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "622:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "624:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "625:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "626:     }",
          "628:     if (true) {",
          "629:         vector<uint8_t> nalu = {0xff, 0x00, 0x00, 0x03};",
          "630:         vector<uint8_t> expect = {0xff, 0x00, 0x00, 0x03};",
          "632:         vector<uint8_t> rbsp(nalu.size());",
          "633:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "634:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "636:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "637:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "638:     }",
          "640:     for (uint16_t v = 0x01; v <= 0xff; v++) {",
          "641:         vector<uint8_t> nalu = {(uint8_t)v, 0x00, 0x00, 0x03};",
          "642:         vector<uint8_t> expect = {(uint8_t)v, 0x00, 0x00, 0x03};",
          "644:         vector<uint8_t> rbsp(nalu.size());",
          "645:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "646:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "648:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "649:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "650:     }",
          "651: }",
          "653: VOID TEST(KernelCodecTest, VideoFormatRbspNormal)",
          "654: {",
          "655:     for (uint16_t v = 0x01; v <= 0xff; v++) {",
          "656:         vector<uint8_t> nalu = {0x00, (uint8_t)v, 0x03, 0x00};",
          "657:         vector<uint8_t> expect = {0x00, (uint8_t)v, 0x03, 0x00};",
          "659:         vector<uint8_t> rbsp(nalu.size());",
          "660:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "661:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "663:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "664:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "665:     }",
          "667:     for (uint16_t v = 0x01; v <= 0xff; v++) {",
          "668:         vector<uint8_t> nalu = {(uint8_t)v, 0x00, 0x03, 0x00};",
          "669:         vector<uint8_t> expect = {(uint8_t)v, 0x00, 0x03, 0x00};",
          "671:         vector<uint8_t> rbsp(nalu.size());",
          "672:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "673:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "675:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "676:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "677:     }",
          "679:     for (uint16_t v = 0x00; v <= 0xff; v++) {",
          "680:         vector<uint8_t> nalu = {0x00, 0x00, (uint8_t)v};",
          "681:         vector<uint8_t> expect = {0x00, 0x00, (uint8_t)v};",
          "683:         vector<uint8_t> rbsp(nalu.size());",
          "684:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "685:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "687:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "688:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "689:     }",
          "691:     for (uint16_t v = 0x00; v <= 0xff; v++) {",
          "692:         vector<uint8_t> nalu = {0x00, (uint8_t)v};",
          "693:         vector<uint8_t> expect = {0x00, (uint8_t)v};",
          "695:         vector<uint8_t> rbsp(nalu.size());",
          "696:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "697:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "699:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "700:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "701:     }",
          "703:     for (uint16_t v = 0x00; v <= 0xff; v++) {",
          "704:         vector<uint8_t> nalu = {(uint8_t)v};",
          "705:         vector<uint8_t> expect = {(uint8_t)v};",
          "707:         vector<uint8_t> rbsp(nalu.size());",
          "708:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "709:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "711:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "712:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "713:     }",
          "715:     for (uint16_t v = 0x00; v <= 0xff; v++) {",
          "716:         vector<uint8_t> nalu = {(uint8_t)v, (uint8_t)v};",
          "717:         vector<uint8_t> expect = {(uint8_t)v, (uint8_t)v};",
          "719:         vector<uint8_t> rbsp(nalu.size());",
          "720:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "721:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "723:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "724:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "725:     }",
          "727:     for (uint16_t v = 0x00; v <= 0xff; v++) {",
          "728:         vector<uint8_t> nalu = {(uint8_t)v, (uint8_t)v, (uint8_t)v};",
          "729:         vector<uint8_t> expect = {(uint8_t)v, (uint8_t)v, (uint8_t)v};",
          "731:         vector<uint8_t> rbsp(nalu.size());",
          "732:         SrsBuffer b((char*)nalu.data(), nalu.size());",
          "733:         int nb_rbsp = srs_rbsp_remove_emulation_bytes(&b, rbsp);",
          "735:         ASSERT_EQ(nb_rbsp, (int)expect.size());",
          "736:         EXPECT_TRUE(srs_bytes_equals(rbsp.data(), expect.data(), nb_rbsp));",
          "737:     }",
          "738: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}