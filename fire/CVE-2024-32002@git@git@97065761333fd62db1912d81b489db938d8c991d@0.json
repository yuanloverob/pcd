{
  "cve_id": "CVE-2024-32002",
  "cve_desc": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, repositories with submodules can be crafted in a way that exploits a bug in Git whereby it can be fooled into writing files not into the submodule's worktree but into a `.git/` directory. This allows writing a hook that will be executed while the clone operation is still running, giving the user no opportunity to inspect the code that is being executed. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. If symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. As always, it is best to avoid cloning repositories from untrusted sources.",
  "repo": "git/git",
  "patch_hash": "97065761333fd62db1912d81b489db938d8c991d",
  "patch_info": {
    "commit_hash": "97065761333fd62db1912d81b489db938d8c991d",
    "repo": "git/git",
    "commit_url": "https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d",
    "files": [
      "builtin/submodule--helper.c",
      "t/t7406-submodule-update.sh"
    ],
    "message": "submodules: submodule paths must not contain symlinks\n\nWhen creating a submodule path, we must be careful not to follow\nsymbolic links. Otherwise we may follow a symbolic link pointing to\na gitdir (which are valid symbolic links!) e.g. while cloning.\n\nOn case-insensitive filesystems, however, we blindly replace a directory\nthat has been created as part of the `clone` operation with a symlink\nwhen the path to the latter differs only in case from the former's path.\n\nLet's simply avoid this situation by expecting not ever having to\noverwrite any existing file/directory/symlink upon cloning. That way, we\nwon't even replace a directory that we just created.\n\nThis addresses CVE-2024-32002.\n\nReported-by: Filip Hejsek <filip.hejsek@gmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
    "before_after_code_files": [
      "builtin/submodule--helper.c||builtin/submodule--helper.c",
      "t/t7406-submodule-update.sh||t/t7406-submodule-update.sh"
    ]
  },
  "patch_diff": {
    "builtin/submodule--helper.c||builtin/submodule--helper.c": [
      "File: builtin/submodule--helper.c -> builtin/submodule--helper.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1641:  return sm_gitdir;",
      "1642: }",
      "1644: static int clone_submodule(const struct module_clone_data *clone_data,",
      "1645:       struct string_list *reference)",
      "1646: {",
      "1647:  char *p;",
      "1648:  char *sm_gitdir = clone_submodule_sm_gitdir(clone_data->name);",
      "1649:  char *sm_alternate = NULL, *error_strategy = NULL;",
      "1650:  struct child_process cp = CHILD_PROCESS_INIT;",
      "1651:  const char *clone_data_path = clone_data->path;",
      "1652:  char *to_free = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1644: static int dir_contains_only_dotgit(const char *path)",
      "1645: {",
      "1646:  DIR *dir = opendir(path);",
      "1647:  struct dirent *e;",
      "1648:  int ret = 1;",
      "1650:  if (!dir)",
      "1651:   return 0;",
      "1653:  e = readdir_skip_dot_and_dotdot(dir);",
      "1654:  if (!e)",
      "1655:   ret = 0;",
      "1656:  else if (strcmp(DEFAULT_GIT_DIR_ENVIRONMENT, e->d_name) ||",
      "1657:    (e = readdir_skip_dot_and_dotdot(dir))) {",
      "1658:   error(\"unexpected item '%s' in '%s'\", e->d_name, path);",
      "1659:   ret = 0;",
      "1660:  }",
      "1662:  closedir(dir);",
      "1663:  return ret;",
      "1664: }",
      "1672:  struct stat st;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1660:         \"git dir\"), sm_gitdir);",
      "1662:  if (!file_exists(sm_gitdir)) {",
      "1663:   if (safe_create_leading_directories_const(sm_gitdir) < 0)",
      "1664:    die(_(\"could not create directory '%s'\"), sm_gitdir);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1686:   if (clone_data->require_init && !stat(clone_data_path, &st) &&",
      "1687:       !is_empty_dir(clone_data_path))",
      "1688:    die(_(\"directory not empty: '%s'\"), clone_data_path);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1704:   if(run_command(&cp))",
      "1705:    die(_(\"clone of '%s' into submodule path '%s' failed\"),",
      "1706:        clone_data->url, clone_data_path);",
      "1707:  } else {",
      "1708:   char *path;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1735:   if (clone_data->require_init && !stat(clone_data_path, &st) &&",
      "1736:       !dir_contains_only_dotgit(clone_data_path)) {",
      "1737:    char *dot_git = xstrfmt(\"%s/.git\", clone_data_path);",
      "1738:    unlink(dot_git);",
      "1739:    free(dot_git);",
      "1740:    die(_(\"directory not empty: '%s'\"), clone_data_path);",
      "1741:   }",
      "",
      "---------------"
    ],
    "t/t7406-submodule-update.sh||t/t7406-submodule-update.sh": [
      "File: t/t7406-submodule-update.sh -> t/t7406-submodule-update.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "1179:  test_cmp expect.err actual.err",
      "1180: '",
      "1182: test_done",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1182: test_expect_success CASE_INSENSITIVE_FS,SYMLINKS \\",
      "1183:  'submodule paths must not follow symlinks' '",
      "1185:  # This is only needed because we want to run this in a self-contained",
      "1186:  # test without having to spin up an HTTP server; However, it would not",
      "1187:  # be needed in a real-world scenario where the submodule is simply",
      "1188:  # hosted on a public site.",
      "1189:  test_config_global protocol.file.allow always &&",
      "1191:  # Make sure that Git tries to use symlinks on Windows",
      "1192:  test_config_global core.symlinks true &&",
      "1194:  tell_tale_path=\"$PWD/tell.tale\" &&",
      "1195:  git init hook &&",
      "1196:  (",
      "1197:   cd hook &&",
      "1198:   mkdir -p y/hooks &&",
      "1199:   write_script y/hooks/post-checkout <<-EOF &&",
      "1200:   echo HOOK-RUN >&2",
      "1201:   echo hook-run >\"$tell_tale_path\"",
      "1202:   EOF",
      "1203:   git add y/hooks/post-checkout &&",
      "1204:   test_tick &&",
      "1205:   git commit -m post-checkout",
      "1206:  ) &&",
      "1208:  hook_repo_path=\"$(pwd)/hook\" &&",
      "1209:  git init captain &&",
      "1210:  (",
      "1211:   cd captain &&",
      "1212:   git submodule add --name x/y \"$hook_repo_path\" A/modules/x &&",
      "1213:   test_tick &&",
      "1214:   git commit -m add-submodule &&",
      "1216:   printf .git >dotgit.txt &&",
      "1217:   git hash-object -w --stdin <dotgit.txt >dot-git.hash &&",
      "1218:   printf \"120000 %s 0\\ta\\n\" \"$(cat dot-git.hash)\" >index.info &&",
      "1219:   git update-index --index-info <index.info &&",
      "1220:   test_tick &&",
      "1221:   git commit -m add-symlink",
      "1222:  ) &&",
      "1224:  test_path_is_missing \"$tell_tale_path\" &&",
      "1225:  test_must_fail git clone --recursive captain hooked 2>err &&",
      "1226:  grep \"directory not empty\" err &&",
      "1227:  test_path_is_missing \"$tell_tale_path\"",
      "1228: '",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31572dc420afee36db8fbbbe060dd78c9a48778c",
      "candidate_info": {
        "commit_hash": "31572dc420afee36db8fbbbe060dd78c9a48778c",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/31572dc420afee36db8fbbbe060dd78c9a48778c",
        "files": [
          "entry.c",
          "t/t5601-clone.sh",
          "t/t7406-submodule-update.sh"
        ],
        "message": "clone: when symbolic links collide with directories, keep the latter\n\nWhen recursively cloning a repository with submodules, we must ensure\nthat the submodules paths do not suddenly contain symbolic links that\nwould let Git write into unintended locations. We just plugged that\nvulnerability, but let's add some more defense-in-depth.\n\nSince we can only keep one item on disk if multiple index entries' paths\ncollide, we may just as well avoid keeping a symbolic link (because that\nwould allow attack vectors where Git follows those links by mistake).\n\nTechnically, we handle more situations than cloning submodules into\npaths that were (partially) replaced by symbolic links. This provides\ndefense-in-depth in case someone finds a case-folding confusion\nvulnerability in the future that does not even involve submodules.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "entry.c||entry.c",
          "t/t5601-clone.sh||t/t5601-clone.sh",
          "t/t7406-submodule-update.sh||t/t7406-submodule-update.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "t/t7406-submodule-update.sh||t/t7406-submodule-update.sh"
          ],
          "candidate": [
            "t/t7406-submodule-update.sh||t/t7406-submodule-update.sh"
          ]
        }
      },
      "candidate_diff": {
        "entry.c||entry.c": [
          "File: entry.c -> entry.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:    if (S_ISGITLINK(ce->ce_mode))",
          "543:     return 0;",
          "544:    remove_subtree(&path);",
          "545:   } else if (unlink(path.buf))",
          "546:    return error_errno(\"unable to unlink old '%s'\", path.buf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:    if (state->clone && S_ISLNK(ce->ce_mode))",
          "557:     return 0;",
          "",
          "---------------"
        ],
        "t/t5601-clone.sh||t/t5601-clone.sh": [
          "File: t/t5601-clone.sh -> t/t5601-clone.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:  test_i18ngrep \"the following paths have collided\" icasefs/warning",
          "634: '",
          "636: test_expect_success 'clone with GIT_DEFAULT_HASH' '",
          "637:  (",
          "638:   sane_unset GIT_DEFAULT_HASH &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636: test_expect_success CASE_INSENSITIVE_FS,SYMLINKS \\",
          "637:   'colliding symlink/directory keeps directory' '",
          "638:  git init icasefs-colliding-symlink &&",
          "639:  (",
          "640:   cd icasefs-colliding-symlink &&",
          "641:   a=$(printf a | git hash-object -w --stdin) &&",
          "642:   printf \"100644 %s 0\\tA/dir/b\\n120000 %s 0\\ta\\n\" $a $a >idx &&",
          "643:   git update-index --index-info <idx &&",
          "644:   test_tick &&",
          "645:   git commit -m initial",
          "646:  ) &&",
          "647:  git clone icasefs-colliding-symlink icasefs-colliding-symlink-clone &&",
          "648:  test_file_not_empty icasefs-colliding-symlink-clone/A/dir/b",
          "649: '",
          "",
          "---------------"
        ],
        "t/t7406-submodule-update.sh||t/t7406-submodule-update.sh": [
          "File: t/t7406-submodule-update.sh -> t/t7406-submodule-update.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1222:  ) &&",
          "1224:  test_path_is_missing \"$tell_tale_path\" &&",
          "1227:  test_path_is_missing \"$tell_tale_path\"",
          "1228: '",
          "",
          "[Removed Lines]",
          "1225:  test_must_fail git clone --recursive captain hooked 2>err &&",
          "1226:  grep \"directory not empty\" err &&",
          "",
          "[Added Lines]",
          "1225:  git clone --recursive captain hooked 2>err &&",
          "1226:  ! grep HOOK-RUN err &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}