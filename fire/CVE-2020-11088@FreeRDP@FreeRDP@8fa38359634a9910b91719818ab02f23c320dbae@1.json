{
  "cve_id": "CVE-2020-11088",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_NegotiateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
  "patch_info": {
    "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_NegotiateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   return SEC_E_INVALID_TOKEN;",
      "220:  }",
      "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:  if (Stream_GetRemainingLength(s) < 4)",
      "223:  {",
      "224:   Stream_Free(s, FALSE);",
      "225:   return SEC_E_INVALID_TOKEN;",
      "226:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "06c32f170093a6ecde93e3bc07fed6a706bfbeb3",
      "candidate_info": {
        "commit_hash": "06c32f170093a6ecde93e3bc07fed6a706bfbeb3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/06c32f170093a6ecde93e3bc07fed6a706bfbeb3",
        "files": [
          "channels/video/client/video_main.c"
        ],
        "message": "Fixed int overflow in PresentationContext_new\n\nThanks to hac425 CVE-2020-11038",
        "before_after_code_files": [
          "channels/video/client/video_main.c||channels/video/client/video_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/video/client/video_main.c||channels/video/client/video_main.c": [
          "File: channels/video/client/video_main.c -> channels/video/client/video_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220: static PresentationContext* PresentationContext_new(VideoClientContext* video, BYTE PresentationId,",
          "221:                                                     UINT32 x, UINT32 y, UINT32 width, UINT32 height)",
          "222: {",
          "223:  VideoClientContextPriv* priv = video->priv;",
          "225:  if (!ret)",
          "226:   return NULL;",
          "",
          "[Removed Lines]",
          "224:  PresentationContext* ret = calloc(1, sizeof(*ret));",
          "",
          "[Added Lines]",
          "223:  size_t s;",
          "225:  PresentationContext* ret;",
          "226:  s = width * height * 4ULL;",
          "227:  if (s > INT32_MAX)",
          "228:   return NULL;",
          "230:  ret = calloc(1, sizeof(*ret));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   goto error_currentSample;",
          "244:  }",
          "247:  if (!ret->surfaceData)",
          "248:  {",
          "249:   WLog_ERR(TAG, \"unable to allocate surfaceData\");",
          "",
          "[Removed Lines]",
          "246:  ret->surfaceData = BufferPool_Take(priv->surfacePool, width * height * 4);",
          "",
          "[Added Lines]",
          "252:  ret->surfaceData = BufferPool_Take(priv->surfacePool, s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dffd893dc5874b63c99777d7df147e37c770fc92",
      "candidate_info": {
        "commit_hash": "dffd893dc5874b63c99777d7df147e37c770fc92",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/dffd893dc5874b63c99777d7df147e37c770fc92",
        "files": [
          "winpr/libwinpr/utils/image.c"
        ],
        "message": "Fixed integer overflow in winpr_image_bitmap_read_buffer\n\nThanks to hac425",
        "before_after_code_files": [
          "winpr/libwinpr/utils/image.c||winpr/libwinpr/utils/image.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/image.c||winpr/libwinpr/utils/image.c": [
          "File: winpr/libwinpr/utils/image.c -> winpr/libwinpr/utils/image.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  image->type = WINPR_IMAGE_BITMAP;",
          "343:   goto fail;",
          "346:  image->width = bi.biWidth;",
          "348:  if (bi.biHeight < 0)",
          "",
          "[Removed Lines]",
          "342:  if (Stream_Capacity(s) < bf.bfOffBits + bi.biSizeImage)",
          "345:  Stream_SetPosition(s, bf.bfOffBits);",
          "",
          "[Added Lines]",
          "342:  if (Stream_GetPosition(s) > bf.bfOffBits)",
          "343:   goto fail;",
          "344:  if (!Stream_SafeSeek(s, bf.bfOffBits - Stream_GetPosition(s)))",
          "345:   goto fail;",
          "346:  if (Stream_GetRemainingCapacity(s) < bi.biSizeImage)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a06ce058f690b7fc1edad2f352c453376c2ebfe",
      "candidate_info": {
        "commit_hash": "3a06ce058f690b7fc1edad2f352c453376c2ebfe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3a06ce058f690b7fc1edad2f352c453376c2ebfe",
        "files": [
          "libfreerdp/codec/rfx.c"
        ],
        "message": "Fixed oob read in rfx_process_message_tileset\n\nCheck input data length\nThanks to hac425 CVE-2020-11043",
        "before_after_code_files": [
          "libfreerdp/codec/rfx.c||libfreerdp/codec/rfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/rfx.c||libfreerdp/codec/rfx.c": [
          "File: libfreerdp/codec/rfx.c -> libfreerdp/codec/rfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752: {",
          "753:  BOOL rc;",
          "754:  int i, close_cnt;",
          "756:  BYTE quant;",
          "757:  RFX_TILE* tile;",
          "758:  RFX_TILE** tmpTiles;",
          "",
          "[Removed Lines]",
          "755:  size_t pos;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:  for (i = 0; i < message->numTiles; i++)",
          "887:  {",
          "888:   if (!(tile = (RFX_TILE*)ObjectPool_Take(context->priv->TilePool)))",
          "889:   {",
          "890:    WLog_ERR(TAG, \"RfxMessageTileSet failed to get tile from object pool\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:   wStream sub;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "903:    break;",
          "904:   }",
          "911:   {",
          "912:    WLog_ERR(TAG,",
          "913:             \"RfxMessageTileSet not enough bytes to read tile %d/%\" PRIu16",
          "",
          "[Removed Lines]",
          "906:   Stream_Read_UINT16(s,",
          "910:   if (Stream_GetRemainingLength(s) < blockLen - 6)",
          "",
          "[Added Lines]",
          "906:   Stream_StaticInit(&sub, Stream_Pointer(s), Stream_GetRemainingLength(s));",
          "907:   Stream_Read_UINT16(&sub,",
          "911:   if (!Stream_SafeSeek(s, blockLen))",
          "912:   {",
          "913:    rc = FALSE;",
          "914:    break;",
          "915:   }",
          "916:   if ((blockLen < 6 + 13) || (Stream_GetRemainingLength(&sub) < blockLen - 6))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "917:    break;",
          "918:   }",
          "922:   if (blockType != CBT_TILE)",
          "923:   {",
          "924:    WLog_ERR(TAG, \"unknown block type 0x%\" PRIX32 \", expected CBT_TILE (0xCAC3).\",",
          "",
          "[Removed Lines]",
          "920:   pos = Stream_GetPosition(s) - 6 + blockLen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927:    break;",
          "928:   }",
          "944:   tile->x = tile->xIdx * 64;",
          "945:   tile->y = tile->yIdx * 64;",
          "",
          "[Removed Lines]",
          "938:   Stream_GetPointer(s, tile->YData);",
          "939:   Stream_Seek(s, tile->YLen);",
          "940:   Stream_GetPointer(s, tile->CbData);",
          "941:   Stream_Seek(s, tile->CbLen);",
          "942:   Stream_GetPointer(s, tile->CrData);",
          "943:   Stream_Seek(s, tile->CrLen);",
          "",
          "[Added Lines]",
          "942:   Stream_GetPointer(&sub, tile->YData);",
          "943:   if (!Stream_SafeSeek(&sub, tile->YLen))",
          "944:   {",
          "945:    rc = FALSE;",
          "946:    break;",
          "947:   }",
          "948:   Stream_GetPointer(&sub, tile->CbData);",
          "949:   if (!Stream_SafeSeek(&sub, tile->CbLen))",
          "950:   {",
          "951:    rc = FALSE;",
          "952:    break;",
          "953:   }",
          "954:   Stream_GetPointer(&sub, tile->CrData);",
          "955:   if (!Stream_SafeSeek(&sub, tile->CrLen))",
          "956:   {",
          "957:    rc = FALSE;",
          "958:    break;",
          "959:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "971:   {",
          "972:    rfx_decode_rgb(context, tile, tile->data, 64 * 4);",
          "973:   }",
          "976:  }",
          "978:  if (context->priv->UseThreads)",
          "",
          "[Removed Lines]",
          "975:   Stream_SetPosition(s, pos);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "363d7046dfec4003b91aecf7867e3b05905f3843",
      "candidate_info": {
        "commit_hash": "363d7046dfec4003b91aecf7867e3b05905f3843",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/363d7046dfec4003b91aecf7867e3b05905f3843",
        "files": [
          "libfreerdp/codec/clear.c"
        ],
        "message": "Fixed oob read in clear_decompress_subcode_rlex\n\nFixed length checks before stream read.\nThanks to hac425 CVE-2020-11040",
        "before_after_code_files": [
          "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c": [
          "File: libfreerdp/codec/clear.c -> libfreerdp/codec/clear.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  UINT32 i;",
          "131:  UINT32 pixelCount;",
          "132:  UINT32 bitmapDataOffset;",
          "134:  UINT32 numBits;",
          "135:  BYTE startIndex;",
          "136:  BYTE stopIndex;",
          "",
          "[Removed Lines]",
          "133:  UINT32 pixelIndex;",
          "",
          "[Added Lines]",
          "133:  size_t pixelIndex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:   return FALSE;",
          "147:  }",
          "149:  Stream_Read_UINT8(s, paletteCount);",
          "150:  bitmapDataOffset = 1 + (paletteCount * 3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:  if (Stream_GetRemainingLength(s) < 1)",
          "150:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:   return FALSE;",
          "156:  }",
          "158:  for (i = 0; i < paletteCount; i++)",
          "159:  {",
          "160:   BYTE r, g, b;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:  if (Stream_GetRemainingLength(s) < 3ULL * paletteCount)",
          "161:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:  if (pixelIndex != pixelCount)",
          "301:  {",
          "303:   return FALSE;",
          "304:  }",
          "",
          "[Removed Lines]",
          "302:   WLog_ERR(TAG, \"pixelIndex %\" PRIu32 \" != pixelCount %\" PRIu32 \"\", pixelIndex, pixelCount);",
          "",
          "[Added Lines]",
          "307:   WLog_ERR(TAG, \"pixelIndex %\" PRIdz \" != pixelCount %\" PRIu32 \"\", pixelIndex, pixelCount);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c31eb24baeeafa8f337d0930bef903bcd5545ba1",
      "candidate_info": {
        "commit_hash": "c31eb24baeeafa8f337d0930bef903bcd5545ba1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c31eb24baeeafa8f337d0930bef903bcd5545ba1",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed wrong error return from drdynvc_write_data\n\nWhen the channel was closed a wrong error code was returned.",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}