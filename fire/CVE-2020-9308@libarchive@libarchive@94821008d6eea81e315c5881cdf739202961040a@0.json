{
  "cve_id": "CVE-2020-9308",
  "cve_desc": "archive_read_support_format_rar5.c in libarchive before 3.4.2 attempts to unpack a RAR5 file with an invalid or corrupted header (such as a header size of zero), leading to a SIGSEGV or possibly unspecified other impact.",
  "repo": "libarchive/libarchive",
  "patch_hash": "94821008d6eea81e315c5881cdf739202961040a",
  "patch_info": {
    "commit_hash": "94821008d6eea81e315c5881cdf739202961040a",
    "repo": "libarchive/libarchive",
    "commit_url": "https://github.com/libarchive/libarchive/commit/94821008d6eea81e315c5881cdf739202961040a",
    "files": [
      "Makefile.am",
      "libarchive/archive_read_support_format_rar5.c",
      "libarchive/test/test_read_format_rar5.c",
      "libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu"
    ],
    "message": "RAR5 reader: reject files that declare invalid header flags\n\nOne of the fields in RAR5's base block structure is the size of the\nheader. Some invalid files declare a 0 header size setting, which can\nconfuse the unpacker. Minimum header size for RAR5 base blocks is 7\nbytes (4 bytes for CRC, and 3 bytes for the rest), so block size of 0\nbytes should be rejected at header parsing stage.\n\nThe fix adds an error condition if header size of 0 bytes is detected.\nIn this case, the unpacker will not attempt to unpack the file, as the\nheader is corrupted.\n\nThe commit also adds OSSFuzz #20459 sample to test further regressions\nin this area.",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "libarchive/archive_read_support_format_rar5.c||libarchive/archive_read_support_format_rar5.c",
      "libarchive/test/test_read_format_rar5.c||libarchive/test/test_read_format_rar5.c",
      "libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu||libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "877:  libarchive/test/test_read_format_rar5_win32.rar.uu \\",
      "878:  libarchive/test/test_read_format_rar5_arm_filter_on_window_boundary.rar.uu \\",
      "879:  libarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu \\",
      "880:  libarchive/test/test_read_format_raw.bufr.uu \\",
      "881:  libarchive/test/test_read_format_raw.data.gz.uu \\",
      "882:  libarchive/test/test_read_format_raw.data.Z.uu \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "880:  libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu \\",
      "",
      "---------------"
    ],
    "libarchive/archive_read_support_format_rar5.c||libarchive/archive_read_support_format_rar5.c": [
      "File: libarchive/archive_read_support_format_rar5.c -> libarchive/archive_read_support_format_rar5.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2085: static int process_base_block(struct archive_read* a,",
      "2086:     struct archive_entry* entry)",
      "2087: {",
      "2088:  struct rar5* rar = get_context(a);",
      "2089:  uint32_t hdr_crc, computed_crc;",
      "2090:  size_t raw_hdr_size = 0, hdr_size_len, hdr_size;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2088:  const size_t SMALLEST_RAR5_BLOCK_SIZE = 3;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2114:   return ARCHIVE_EOF;",
      "2115:  }",
      "2119:   archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
      "2120:       \"Base block header is too large\");",
      "2122:   return ARCHIVE_FATAL;",
      "2123:  }",
      "",
      "[Removed Lines]",
      "2118:  if(raw_hdr_size > (2 * 1024 * 1024)) {",
      "2125:  hdr_size = raw_hdr_size + hdr_size_len;",
      "",
      "[Added Lines]",
      "2119:  hdr_size = raw_hdr_size + hdr_size_len;",
      "2122:  if(hdr_size > (2 * 1024 * 1024)) {",
      "2130:  if(raw_hdr_size == 0 || hdr_size_len == 0 ||",
      "2131:   hdr_size < SMALLEST_RAR5_BLOCK_SIZE)",
      "2132:  {",
      "2133:   archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
      "2134:       \"Too small block encountered (%ld bytes)\",",
      "2135:       raw_hdr_size);",
      "2137:   return ARCHIVE_FATAL;",
      "2138:  }",
      "",
      "---------------"
    ],
    "libarchive/test/test_read_format_rar5.c||libarchive/test/test_read_format_rar5.c": [
      "File: libarchive/test/test_read_format_rar5.c -> libarchive/test/test_read_format_rar5.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1257:  EPILOGUE();",
      "1258: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1260: DEFINE_TEST(test_read_format_rar5_block_size_is_too_small)",
      "1261: {",
      "1262:  char buf[4096];",
      "1263:  PROLOGUE(\"test_read_format_rar5_block_size_is_too_small.rar\");",
      "1269:  assertA(archive_read_next_header(a, &ae) != ARCHIVE_OK);",
      "1270:  assertA(archive_read_data(a, buf, sizeof(buf)) <= 0);",
      "1272:  EPILOGUE();",
      "1273: }",
      "",
      "---------------"
    ],
    "libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu||libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu": [
      "File: libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu -> libarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: begin 644 test_read_format_rar5_block_size_is_too_small.rar",
      "2: M4F%R(1H'`0\"-[P+2``+'(!P,(\"`@N`,!`B`@(\"`@(\"`@(\"`@(\"`@(\"#_(\"`@",
      "3: M(\"`@(\"`@(\"`@((:Q;2!4-'-^4B`!((WO`M(``O\\@$/\\@-R`@(\"`@(\"`@(\"`@",
      "4: M``X@(\"`@(\"`@____(\"`@(\"`@(/\\@(\"`@(\"`@(\"`@(\"#_(+6U,2\"UM;6UM[CU",
      "5: M)B`@*(0G(`!.`#D\\3R``(/__(,+_````-0#_($&%*/HE=C+N`\"```\"```\"`D",
      "6: J`)$#(\"#_(\"#__P`@__\\@_R#_(\"`@(\"`@(\"#_(\"#__R`@(/__(\"#__R`\"",
      "7: `",
      "8: end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd69e1672d4027b16d2ab1c49a0556d7504ff283",
      "candidate_info": {
        "commit_hash": "cd69e1672d4027b16d2ab1c49a0556d7504ff283",
        "repo": "libarchive/libarchive",
        "commit_url": "https://github.com/libarchive/libarchive/commit/cd69e1672d4027b16d2ab1c49a0556d7504ff283",
        "files": [
          "libarchive/archive_read_support_format_rar5.c"
        ],
        "message": "RAR5 reader: use %zu to sprintf() size_t",
        "before_after_code_files": [
          "libarchive/archive_read_support_format_rar5.c||libarchive/archive_read_support_format_rar5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libarchive/archive_read_support_format_rar5.c||libarchive/archive_read_support_format_rar5.c"
          ],
          "candidate": [
            "libarchive/archive_read_support_format_rar5.c||libarchive/archive_read_support_format_rar5.c"
          ]
        }
      },
      "candidate_diff": {
        "libarchive/archive_read_support_format_rar5.c||libarchive/archive_read_support_format_rar5.c": [
          "File: libarchive/archive_read_support_format_rar5.c -> libarchive/archive_read_support_format_rar5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2134:   hdr_size < SMALLEST_RAR5_BLOCK_SIZE)",
          "2135:  {",
          "2136:   archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
          "2138:       raw_hdr_size);",
          "2140:   return ARCHIVE_FATAL;",
          "",
          "[Removed Lines]",
          "2137:       \"Too small block encountered (%ld bytes)\",",
          "",
          "[Added Lines]",
          "2137:       \"Too small block encountered (%zu bytes)\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}