{
  "cve_id": "CVE-2021-37492",
  "cve_desc": "An issue discovered in src/wallet/wallet.cpp in Ravencoin Core 4.3.2.1 and earlier allows attackers to view sensitive information via CWallet::CreateTransactionAll() function.",
  "repo": "bitcoin/bitcoin",
  "patch_hash": "2fb9c1e6681370478e24a19172ed6d78d95d50d3",
  "patch_info": {
    "commit_hash": "2fb9c1e6681370478e24a19172ed6d78d95d50d3",
    "repo": "bitcoin/bitcoin",
    "commit_url": "https://github.com/bitcoin/bitcoin/commit/2fb9c1e6681370478e24a19172ed6d78d95d50d3",
    "files": [
      "src/wallet/wallet.cpp"
    ],
    "message": "shuffle selected coins before transaction finalization",
    "before_after_code_files": [
      "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
    ]
  },
  "patch_diff": {
    "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
      "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "2889:                     nChangePosInOut = -1;",
      "2890:                 }",
      "2907:                 nBytes = CalculateMaximumSignedTxSize(txNew, this);",
      "2908:                 if (nBytes < 0) {",
      "",
      "[Removed Lines]",
      "2902:                 const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);",
      "2903:                 for (const auto& coin : setCoins)",
      "2904:                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),",
      "2905:                                               nSequence));",
      "",
      "[Added Lines]",
      "2894:                 for (const auto& coin : setCoins) {",
      "2895:                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));",
      "2896:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2993:         if (nChangePosInOut == -1) reservekey.ReturnKey(); // Return any reserved key if we don't have change",
      "2995:         if (sign)",
      "2996:         {",
      "2997:             CTransaction txNewConst(txNew);",
      "2998:             int nIn = 0;",
      "3000:             {",
      "3001:                 const CScript& scriptPubKey = coin.txout.scriptPubKey;",
      "3002:                 SignatureData sigdata;",
      "",
      "[Removed Lines]",
      "2999:             for (const auto& coin : setCoins)",
      "",
      "[Added Lines]",
      "2987:         txNew.vin.clear();",
      "2988:         std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());",
      "2989:         std::shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());",
      "2999:         const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);",
      "3000:         for (const auto& coin : selected_coins) {",
      "3001:             txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));",
      "3002:         }",
      "3008:             for (const auto& coin : selected_coins)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3db746beb407f7cdd9cd6a605a195bef1254b4c0",
      "candidate_info": {
        "commit_hash": "3db746beb407f7cdd9cd6a605a195bef1254b4c0",
        "repo": "bitcoin/bitcoin",
        "commit_url": "https://github.com/bitcoin/bitcoin/commit/3db746beb407f7cdd9cd6a605a195bef1254b4c0",
        "files": [
          "src/random.h",
          "src/test/random_tests.cpp",
          "src/wallet/coinselection.cpp",
          "src/wallet/wallet.cpp"
        ],
        "message": "Introduce a Shuffle for FastRandomContext and use it in wallet and coinselection",
        "before_after_code_files": [
          "src/random.h||src/random.h",
          "src/test/random_tests.cpp||src/test/random_tests.cpp",
          "src/wallet/coinselection.cpp||src/wallet/coinselection.cpp",
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
          ],
          "candidate": [
            "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/random.h||src/random.h": [
          "File: src/random.h -> src/random.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     inline uint64_t operator()() { return rand64(); }",
          "131: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: template<typename I, typename R>",
          "144: void Shuffle(I first, I last, R&& rng)",
          "145: {",
          "146:     while (first != last) {",
          "147:         size_t j = rng.randrange(last - first);",
          "148:         if (j) {",
          "149:             using std::swap;",
          "150:             swap(*first, *(first + j));",
          "151:         }",
          "152:         ++first;",
          "153:     }",
          "154: }",
          "",
          "---------------"
        ],
        "src/test/random_tests.cpp||src/test/random_tests.cpp": [
          "File: src/test/random_tests.cpp -> src/test/random_tests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         for (int j = 1; j <= 10; ++j) {",
          "76:             BOOST_CHECK(std::find(test.begin(), test.end(), j) != test.end());",
          "77:         }",
          "78:     }",
          "80: }",
          "82: BOOST_AUTO_TEST_SUITE_END()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         Shuffle(test.begin(), test.end(), ctx);",
          "79:         for (int j = 1; j <= 10; ++j) {",
          "80:             BOOST_CHECK(std::find(test.begin(), test.end(), j) != test.end());",
          "81:         }",
          "87: BOOST_AUTO_TEST_CASE(shuffle_stat_test)",
          "88: {",
          "89:     FastRandomContext ctx(true);",
          "90:     uint32_t counts[5 * 5 * 5 * 5 * 5] = {0};",
          "91:     for (int i = 0; i < 12000; ++i) {",
          "92:         int data[5] = {0, 1, 2, 3, 4};",
          "93:         Shuffle(std::begin(data), std::end(data), ctx);",
          "94:         int pos = data[0] + data[1] * 5 + data[2] * 25 + data[3] * 125 + data[4] * 625;",
          "95:         ++counts[pos];",
          "96:     }",
          "97:     unsigned int sum = 0;",
          "98:     double chi_score = 0.0;",
          "99:     for (int i = 0; i < 5 * 5 * 5 * 5 * 5; ++i) {",
          "100:         int i1 = i % 5, i2 = (i / 5) % 5, i3 = (i / 25) % 5, i4 = (i / 125) % 5, i5 = i / 625;",
          "101:         uint32_t count = counts[i];",
          "102:         if (i1 == i2 || i1 == i3 || i1 == i4 || i1 == i5 || i2 == i3 || i2 == i4 || i2 == i5 || i3 == i4 || i3 == i5 || i4 == i5) {",
          "103:             BOOST_CHECK(count == 0);",
          "104:         } else {",
          "105:             chi_score += ((count - 100.0) * (count - 100.0)) / 100.0;",
          "106:             BOOST_CHECK(count > 50);",
          "107:             BOOST_CHECK(count < 150);",
          "108:             sum += count;",
          "109:         }",
          "110:     }",
          "111:     BOOST_CHECK(chi_score > 58.1411); // 99.9999% confidence interval",
          "112:     BOOST_CHECK(chi_score < 210.275);",
          "113:     BOOST_CHECK_EQUAL(sum, 12000);",
          "114: }",
          "",
          "---------------"
        ],
        "src/wallet/coinselection.cpp||src/wallet/coinselection.cpp": [
          "File: src/wallet/coinselection.cpp -> src/wallet/coinselection.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     std::vector<OutputGroup> applicable_groups;",
          "224:     CAmount nTotalLower = 0;",
          "228:     for (const OutputGroup& group : groups) {",
          "229:         if (group.m_value == nTargetValue) {",
          "",
          "[Removed Lines]",
          "226:     random_shuffle(groups.begin(), groups.end(), GetRandInt);",
          "",
          "[Added Lines]",
          "226:     Shuffle(groups.begin(), groups.end(), FastRandomContext());",
          "",
          "---------------"
        ],
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2466:     }",
          "2467:     std::vector<OutputGroup> groups = GroupOutputs(vCoins, !coin_control.m_avoid_partial_spends);",
          "",
          "[Removed Lines]",
          "2465:         std::shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());",
          "",
          "[Added Lines]",
          "2465:         Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2923:         txNew.vin.clear();",
          "2924:         std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());",
          "",
          "[Removed Lines]",
          "2925:         std::shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());",
          "",
          "[Added Lines]",
          "2925:         Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
      "candidate_info": {
        "commit_hash": "fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "repo": "bitcoin/bitcoin",
        "commit_url": "https://github.com/bitcoin/bitcoin/commit/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "files": [
          "src/interfaces/node.cpp",
          "src/interfaces/node.h",
          "src/interfaces/wallet.cpp",
          "src/interfaces/wallet.h",
          "src/qt/coincontroldialog.cpp",
          "src/qt/sendcoinsdialog.cpp",
          "src/qt/walletmodel.cpp",
          "src/wallet/coincontrol.h",
          "src/wallet/feebumper.cpp",
          "src/wallet/fees.cpp",
          "src/wallet/fees.h",
          "src/wallet/init.cpp",
          "src/wallet/rpcwallet.cpp",
          "src/wallet/wallet.cpp",
          "src/wallet/wallet.h",
          "test/functional/wallet_multiwallet.py"
        ],
        "message": "wallet: Make fee settings non-static members",
        "before_after_code_files": [
          "src/interfaces/node.cpp||src/interfaces/node.cpp",
          "src/interfaces/node.h||src/interfaces/node.h",
          "src/interfaces/wallet.cpp||src/interfaces/wallet.cpp",
          "src/interfaces/wallet.h||src/interfaces/wallet.h",
          "src/qt/coincontroldialog.cpp||src/qt/coincontroldialog.cpp",
          "src/qt/sendcoinsdialog.cpp||src/qt/sendcoinsdialog.cpp",
          "src/qt/walletmodel.cpp||src/qt/walletmodel.cpp",
          "src/wallet/coincontrol.h||src/wallet/coincontrol.h",
          "src/wallet/feebumper.cpp||src/wallet/feebumper.cpp",
          "src/wallet/fees.cpp||src/wallet/fees.cpp",
          "src/wallet/fees.h||src/wallet/fees.h",
          "src/wallet/init.cpp||src/wallet/init.cpp",
          "src/wallet/rpcwallet.cpp||src/wallet/rpcwallet.cpp",
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp",
          "src/wallet/wallet.h||src/wallet/wallet.h",
          "test/functional/wallet_multiwallet.py||test/functional/wallet_multiwallet.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
          ],
          "candidate": [
            "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/interfaces/node.cpp||src/interfaces/node.cpp": [
          "File: src/interfaces/node.cpp -> src/interfaces/node.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:         }",
          "192:     }",
          "193:     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }",
          "208:     CAmount getMaxTxFee() override { return ::maxTxFee; }",
          "209:     CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override",
          "210:     {",
          "",
          "[Removed Lines]",
          "194:     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }",
          "195:     CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }",
          "196:     CAmount getMinimumFee(unsigned int tx_bytes,",
          "197:         const CCoinControl& coin_control,",
          "198:         int* returned_target,",
          "199:         FeeReason* reason) override",
          "200:     {",
          "201:         FeeCalculation fee_calc;",
          "202:         CAmount result;",
          "203:         CHECK_WALLET(result = GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));",
          "204:         if (returned_target) *returned_target = fee_calc.returnedTarget;",
          "205:         if (reason) *reason = fee_calc.reason;",
          "206:         return result;",
          "207:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/interfaces/node.h||src/interfaces/node.h": [
          "File: src/interfaces/node.h -> src/interfaces/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: class RPCTimerInterface;",
          "27: class UniValue;",
          "28: class proxyType;",
          "30: struct CNodeStateStats;",
          "32: namespace interfaces {",
          "34: class Handler;",
          "35: class Wallet;",
          "",
          "[Removed Lines]",
          "29: enum class FeeReason;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     virtual bool getNetworkActive() = 0;",
          "168:     virtual CAmount getMaxTxFee() = 0;",
          "",
          "[Removed Lines]",
          "156:     virtual unsigned int getTxConfirmTarget() = 0;",
          "159:     virtual CAmount getRequiredFee(unsigned int tx_bytes) = 0;",
          "162:     virtual CAmount getMinimumFee(unsigned int tx_bytes,",
          "163:         const CCoinControl& coin_control,",
          "164:         int* returned_target,",
          "165:         FeeReason* reason) = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/interfaces/wallet.cpp||src/interfaces/wallet.cpp": [
          "File: src/interfaces/wallet.cpp -> src/interfaces/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <consensus/validation.h>",
          "10: #include <interfaces/handler.h>",
          "11: #include <net.h>",
          "12: #include <policy/policy.h>",
          "13: #include <primitives/transaction.h>",
          "14: #include <script/ismine.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include <policy/feerate.h>",
          "13: #include <policy/fees.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: #include <uint256.h>",
          "21: #include <validation.h>",
          "22: #include <wallet/feebumper.h>",
          "23: #include <wallet/wallet.h>",
          "25: namespace interfaces {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <wallet/fees.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403:         }",
          "404:         return result;",
          "405:     }",
          "406:     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }",
          "407:     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }",
          "408:     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:     CAmount getRequiredFee(unsigned int tx_bytes) override { return GetRequiredFee(m_wallet, tx_bytes); }",
          "410:     CAmount getMinimumFee(unsigned int tx_bytes,",
          "411:         const CCoinControl& coin_control,",
          "412:         int* returned_target,",
          "413:         FeeReason* reason) override",
          "414:     {",
          "415:         FeeCalculation fee_calc;",
          "416:         CAmount result;",
          "417:         result = GetMinimumFee(m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);",
          "418:         if (returned_target) *returned_target = fee_calc.returnedTarget;",
          "419:         if (reason) *reason = fee_calc.reason;",
          "420:         return result;",
          "421:     }",
          "422:     unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }",
          "",
          "---------------"
        ],
        "src/interfaces/wallet.h||src/interfaces/wallet.h": [
          "File: src/interfaces/wallet.h -> src/interfaces/wallet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <vector>",
          "24: class CCoinControl;",
          "25: class CKey;",
          "26: class CWallet;",
          "27: enum class OutputType;",
          "28: struct CRecipient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: class CFeeRate;",
          "28: enum class FeeReason;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     virtual std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) = 0;",
          "222:     virtual bool hdEnabled() = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:     virtual CAmount getRequiredFee(unsigned int tx_bytes) = 0;",
          "227:     virtual CAmount getMinimumFee(unsigned int tx_bytes,",
          "228:         const CCoinControl& coin_control,",
          "229:         int* returned_target,",
          "230:         FeeReason* reason) = 0;",
          "233:     virtual unsigned int getConfirmTarget() = 0;",
          "",
          "---------------"
        ],
        "src/qt/coincontroldialog.cpp||src/qt/coincontroldialog.cpp": [
          "File: src/qt/coincontroldialog.cpp -> src/qt/coincontroldialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "509:                 nBytes -= 34;",
          "514:         if (nPayAmount > 0)",
          "515:         {",
          "",
          "[Removed Lines]",
          "512:         nPayFee = model->node().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);",
          "",
          "[Added Lines]",
          "512:         nPayFee = model->wallet().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);",
          "",
          "---------------"
        ],
        "src/qt/sendcoinsdialog.cpp||src/qt/sendcoinsdialog.cpp": [
          "File: src/qt/sendcoinsdialog.cpp -> src/qt/sendcoinsdialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:     if (!settings.contains(\"nSmartFeeSliderPosition\"))",
          "115:         settings.setValue(\"nSmartFeeSliderPosition\", 0);",
          "116:     if (!settings.contains(\"nTransactionFee\"))",
          "118:     if (!settings.contains(\"fPayOnlyMinFee\"))",
          "119:         settings.setValue(\"fPayOnlyMinFee\", false);",
          "120:     ui->groupFee->setId(ui->radioSmartFee, 0);",
          "",
          "[Removed Lines]",
          "117:         settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_TRANSACTION_FEE);",
          "",
          "[Added Lines]",
          "117:         settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_PAY_TX_FEE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));",
          "176:         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));",
          "177:         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));",
          "179:         updateFeeSectionControls();",
          "180:         updateMinFeeLabel();",
          "181:         updateSmartFeeLabel();",
          "",
          "[Removed Lines]",
          "178:         ui->customFee->setSingleStep(model->node().getRequiredFee(1000));",
          "",
          "[Added Lines]",
          "178:         ui->customFee->setSingleStep(model->wallet().getRequiredFee(1000));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "193:             settings.remove(\"nSmartFeeSliderPosition\");",
          "194:         }",
          "195:         if (settings.value(\"nConfTarget\").toInt() == 0)",
          "197:         else",
          "198:             ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(settings.value(\"nConfTarget\").toInt()));",
          "199:     }",
          "",
          "[Removed Lines]",
          "196:             ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->node().getTxConfirmTarget()));",
          "",
          "[Added Lines]",
          "196:             ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->wallet().getConfirmTarget()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "630: void SendCoinsDialog::setMinimumFee()",
          "631: {",
          "633: }",
          "635: void SendCoinsDialog::updateFeeSectionControls()",
          "",
          "[Removed Lines]",
          "632:     ui->customFee->setValue(model->node().getRequiredFee(1000));",
          "",
          "[Added Lines]",
          "632:     ui->customFee->setValue(model->wallet().getRequiredFee(1000));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "661: {",
          "662:     if (model && model->getOptionsModel())",
          "663:         ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(",
          "665:         );",
          "666: }",
          "",
          "[Removed Lines]",
          "664:             BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->node().getRequiredFee(1000)) + \"/kB\")",
          "",
          "[Added Lines]",
          "664:             BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->wallet().getRequiredFee(1000)) + \"/kB\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "677:     ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());",
          "679: }",
          "681: void SendCoinsDialog::updateSmartFeeLabel()",
          "",
          "[Removed Lines]",
          "678:     ctrl.signalRbf = ui->optInRBF->isChecked();",
          "",
          "[Added Lines]",
          "678:     ctrl.m_signal_bip125_rbf = ui->optInRBF->isChecked();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "687:     coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels",
          "688:     int returned_target;",
          "689:     FeeReason reason;",
          "692:     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");",
          "",
          "[Removed Lines]",
          "690:     CFeeRate feeRate = CFeeRate(model->node().getMinimumFee(1000, coin_control, &returned_target, &reason));",
          "",
          "[Added Lines]",
          "690:     CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, coin_control, &returned_target, &reason));",
          "",
          "---------------"
        ],
        "src/qt/walletmodel.cpp||src/qt/walletmodel.cpp": [
          "File: src/qt/walletmodel.cpp -> src/qt/walletmodel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: bool WalletModel::bumpFee(uint256 hash)",
          "487: {",
          "488:     CCoinControl coin_control;",
          "490:     std::vector<std::string> errors;",
          "491:     CAmount old_fee;",
          "492:     CAmount new_fee;",
          "",
          "[Removed Lines]",
          "489:     coin_control.signalRbf = true;",
          "",
          "[Added Lines]",
          "489:     coin_control.m_signal_bip125_rbf = true;",
          "",
          "---------------"
        ],
        "src/wallet/coincontrol.h||src/wallet/coincontrol.h": [
          "File: src/wallet/coincontrol.h -> src/wallet/coincontrol.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     bool fAllowWatchOnly;",
          "28:     bool fOverrideFeeRate;",
          "30:     boost::optional<CFeeRate> m_feerate;",
          "32:     boost::optional<unsigned int> m_confirm_target;",
          "36:     FeeEstimateMode m_fee_mode;",
          "",
          "[Removed Lines]",
          "34:     bool signalRbf;",
          "",
          "[Added Lines]",
          "34:     boost::optional<bool> m_signal_bip125_rbf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         m_feerate.reset();",
          "51:         fOverrideFeeRate = false;",
          "52:         m_confirm_target.reset();",
          "54:         m_fee_mode = FeeEstimateMode::UNSET;",
          "55:     }",
          "",
          "[Removed Lines]",
          "53:         signalRbf = fWalletRbf;",
          "",
          "[Added Lines]",
          "53:         m_signal_bip125_rbf.reset();",
          "",
          "---------------"
        ],
        "src/wallet/feebumper.cpp||src/wallet/feebumper.cpp": [
          "File: src/wallet/feebumper.cpp -> src/wallet/feebumper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));",
          "135:             return Result::INVALID_PARAMETER;",
          "136:         }",
          "138:         if (total_fee < requiredFee) {",
          "139:             errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",",
          "140:                                                                 FormatMoney(requiredFee)));",
          "",
          "[Removed Lines]",
          "137:         CAmount requiredFee = GetRequiredFee(maxNewTxSize);",
          "",
          "[Added Lines]",
          "137:         CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:         new_fee = total_fee;",
          "144:         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);",
          "145:     } else {",
          "147:         nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);",
          "",
          "[Removed Lines]",
          "146:         new_fee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);",
          "",
          "[Added Lines]",
          "146:         new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     poutput->nValue -= nDelta;",
          "198:         LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");",
          "199:         new_fee += poutput->nValue;",
          "200:         mtx.vout.erase(mtx.vout.begin() + nOutput);",
          "201:     }",
          "205:         for (auto& input : mtx.vin) {",
          "206:             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;",
          "207:         }",
          "",
          "[Removed Lines]",
          "197:     if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(::feeEstimator))) {",
          "204:     if (!coin_control.signalRbf) {",
          "",
          "[Added Lines]",
          "197:     if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet, ::feeEstimator))) {",
          "204:     if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet->m_signal_rbf)) {",
          "",
          "---------------"
        ],
        "src/wallet/fees.cpp||src/wallet/fees.cpp": [
          "File: src/wallet/fees.cpp -> src/wallet/fees.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <wallet/wallet.h>",
          "17: {",
          "19: }",
          "23: {",
          "26:     if (fee_needed > maxTxFee) {",
          "27:         fee_needed = maxTxFee;",
          "",
          "[Removed Lines]",
          "16: CAmount GetRequiredFee(unsigned int nTxBytes)",
          "18:     return std::max(CWallet::minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));",
          "22: CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)",
          "24:     CAmount fee_needed = GetMinimumFeeRate(coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);",
          "",
          "[Added Lines]",
          "16: CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)",
          "18:     return GetRequiredFeeRate(wallet).GetFee(nTxBytes);",
          "22: CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)",
          "24:     CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     return fee_needed;",
          "31: }",
          "34: {",
          "36: }",
          "39: {",
          "41:        1. coin_control.m_feerate",
          "42:        2. coin_control.m_confirm_target",
          "45:        The first parameter that is set is used.",
          "48:     if (coin_control.m_feerate) { // 1.",
          "49:         feerate_needed = *(coin_control.m_feerate);",
          "50:         if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;",
          "52:         if (coin_control.fOverrideFeeRate) return feerate_needed;",
          "53:     }",
          "56:         if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;",
          "57:     }",
          "58:     else { // 2. or 4.",
          "64:         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;",
          "65:         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;",
          "67:         feerate_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate);",
          "68:         if (feerate_needed == CFeeRate(0)) {",
          "71:             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;",
          "75:         }",
          "77:         CFeeRate min_mempool_feerate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);",
          "",
          "[Removed Lines]",
          "33: CFeeRate GetRequiredFeeRate()",
          "35:     return std::max(CWallet::minTxFee, ::minRelayTxFee);",
          "38: CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)",
          "43:        3. payTxFee (user-set global variable)",
          "44:        4. nTxConfirmTarget (user-set global variable)",
          "47:     CFeeRate feerate_needed ;",
          "54:     else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee",
          "55:         feerate_needed = ::payTxFee;",
          "60:         unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;",
          "62:         bool conservative_estimate = !coin_control.signalRbf;",
          "70:             feerate_needed = CWallet::fallbackFee;",
          "74:             if (CWallet::fallbackFee == CFeeRate(0)) return feerate_needed;",
          "",
          "[Added Lines]",
          "33: CFeeRate GetRequiredFeeRate(const CWallet& wallet)",
          "35:     return std::max(wallet.m_min_fee, ::minRelayTxFee);",
          "38: CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)",
          "43:        3. m_pay_tx_fee (user-set member variable of wallet)",
          "44:        4. m_confirm_target (user-set member variable of wallet)",
          "47:     CFeeRate feerate_needed;",
          "54:     else if (!coin_control.m_confirm_target && wallet.m_pay_tx_fee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for wallet member m_pay_tx_fee",
          "55:         feerate_needed = wallet.m_pay_tx_fee;",
          "60:         unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : wallet.m_confirm_target;",
          "62:         bool conservative_estimate = !coin_control.m_signal_bip125_rbf.get_value_or(wallet.m_signal_rbf);",
          "70:             feerate_needed = wallet.m_fallback_fee;",
          "74:             if (wallet.m_fallback_fee == CFeeRate(0)) return feerate_needed;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         }",
          "82:     }",
          "86:     if (required_feerate > feerate_needed) {",
          "87:         feerate_needed = required_feerate;",
          "88:         if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;",
          "",
          "[Removed Lines]",
          "85:     CFeeRate required_feerate = GetRequiredFeeRate();",
          "",
          "[Added Lines]",
          "85:     CFeeRate required_feerate = GetRequiredFeeRate(wallet);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     return feerate_needed;",
          "91: }",
          "94: {",
          "95:     unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);",
          "96:     CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);",
          "100:     discard_rate = std::max(discard_rate, ::dustRelayFee);",
          "101:     return discard_rate;",
          "",
          "[Removed Lines]",
          "93: CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)",
          "98:     discard_rate = (discard_rate == CFeeRate(0)) ? CWallet::m_discard_rate : std::min(discard_rate, CWallet::m_discard_rate);",
          "",
          "[Added Lines]",
          "93: CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator)",
          "98:     discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);",
          "",
          "---------------"
        ],
        "src/wallet/fees.h||src/wallet/fees.h": [
          "File: src/wallet/fees.h -> src/wallet/fees.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: class CCoinControl;",
          "13: class CFeeRate;",
          "14: class CTxMemPool;",
          "15: struct FeeCalculation;",
          "46: #endif // BITCOIN_WALLET_FEES_H",
          "",
          "[Removed Lines]",
          "21: CAmount GetRequiredFee(unsigned int nTxBytes);",
          "27: CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);",
          "33: CFeeRate GetRequiredFeeRate();",
          "39: CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);",
          "44: CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator);",
          "",
          "[Added Lines]",
          "15: class CWallet;",
          "22: CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes);",
          "28: CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);",
          "34: CFeeRate GetRequiredFeeRate(const CWallet& wallet);",
          "40: CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);",
          "45: CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator);",
          "",
          "---------------"
        ],
        "src/wallet/init.cpp||src/wallet/init.cpp": [
          "File: src/wallet/init.cpp -> src/wallet/init.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),",
          "65:                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));",
          "66:     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),",
          "68:     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));",
          "69:     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));",
          "70:     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));",
          "",
          "[Removed Lines]",
          "67:                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));",
          "",
          "[Added Lines]",
          "67:                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +",
          "150:                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));",
          "201:     if (gArgs.IsArgSet(\"-maxtxfee\"))",
          "202:     {",
          "203:         CAmount nMaxFee = 0;",
          "",
          "[Removed Lines]",
          "152:     if (gArgs.IsArgSet(\"-mintxfee\"))",
          "153:     {",
          "154:         CAmount n = 0;",
          "155:         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n)",
          "156:             return InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));",
          "157:         if (n > HIGH_TX_FEE_PER_KB)",
          "158:             InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +",
          "159:                         _(\"This is the minimum transaction fee you pay on every transaction.\"));",
          "160:         CWallet::minTxFee = CFeeRate(n);",
          "161:     }",
          "163:     g_wallet_allow_fallback_fee = Params().IsFallbackFeeEnabled();",
          "164:     if (gArgs.IsArgSet(\"-fallbackfee\"))",
          "165:     {",
          "166:         CAmount nFeePerK = 0;",
          "167:         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK))",
          "168:             return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));",
          "169:         if (nFeePerK > HIGH_TX_FEE_PER_KB)",
          "170:             InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +",
          "171:                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));",
          "172:         CWallet::fallbackFee = CFeeRate(nFeePerK);",
          "173:         g_wallet_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value",
          "174:     }",
          "175:     if (gArgs.IsArgSet(\"-discardfee\"))",
          "176:     {",
          "177:         CAmount nFeePerK = 0;",
          "178:         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK))",
          "179:             return InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));",
          "180:         if (nFeePerK > HIGH_TX_FEE_PER_KB)",
          "181:             InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +",
          "182:                         _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));",
          "183:         CWallet::m_discard_rate = CFeeRate(nFeePerK);",
          "184:     }",
          "185:     if (gArgs.IsArgSet(\"-paytxfee\"))",
          "186:     {",
          "187:         CAmount nFeePerK = 0;",
          "188:         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK))",
          "189:             return InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));",
          "190:         if (nFeePerK > HIGH_TX_FEE_PER_KB)",
          "191:             InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +",
          "192:                         _(\"This is the transaction fee you will pay if you send a transaction.\"));",
          "194:         payTxFee = CFeeRate(nFeePerK, 1000);",
          "195:         if (payTxFee < ::minRelayTxFee)",
          "196:         {",
          "197:             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),",
          "198:                                        gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));",
          "199:         }",
          "200:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:                                        gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));",
          "213:         }",
          "214:     }",
          "219:     return true;",
          "220: }",
          "",
          "[Removed Lines]",
          "215:     nTxConfirmTarget = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);",
          "216:     bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);",
          "217:     fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wallet/rpcwallet.cpp||src/wallet/rpcwallet.cpp": [
          "File: src/wallet/rpcwallet.cpp -> src/wallet/rpcwallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     CCoinControl coin_control;",
          "531:     if (!request.params[5].isNull()) {",
          "533:     }",
          "535:     if (!request.params[6].isNull()) {",
          "",
          "[Removed Lines]",
          "532:         coin_control.signalRbf = request.params[5].get_bool();",
          "",
          "[Added Lines]",
          "532:         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1109:     CCoinControl coin_control;",
          "1110:     if (!request.params[5].isNull()) {",
          "1112:     }",
          "1114:     if (!request.params[6].isNull()) {",
          "",
          "[Removed Lines]",
          "1111:         coin_control.signalRbf = request.params[5].get_bool();",
          "",
          "[Added Lines]",
          "1111:         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2757:         return NullUniValue;",
          "2758:     }",
          "2761:         throw std::runtime_error(",
          "2762:             \"settxfee amount\\n\"",
          "2764:             \"\\nArguments:\\n\"",
          "2765:             \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"",
          "2766:             \"\\nResult\\n\"",
          "",
          "[Removed Lines]",
          "2760:     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)",
          "2763:             \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"",
          "",
          "[Added Lines]",
          "2760:     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1) {",
          "2763:             \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2769:             + HelpExampleCli(\"settxfee\", \"0.00001\")",
          "2770:             + HelpExampleRpc(\"settxfee\", \"0.00001\")",
          "2771:         );",
          "2773:     LOCK2(cs_main, pwallet->cs_wallet);",
          "2776:     CAmount nAmount = AmountFromValue(request.params[0]);",
          "2779:     return true;",
          "2780: }",
          "",
          "[Removed Lines]",
          "2778:     payTxFee = CFeeRate(nAmount, 1000);",
          "",
          "[Added Lines]",
          "2772:     }",
          "2778:     pwallet->m_pay_tx_fee = CFeeRate(nAmount, 1000);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2836:     if (pwallet->IsCrypted()) {",
          "2837:         obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);",
          "2838:     }",
          "2840:     if (!masterKeyID.IsNull())",
          "2842:     return obj;",
          "2843: }",
          "",
          "[Removed Lines]",
          "2839:     obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));",
          "2841:          obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());",
          "",
          "[Added Lines]",
          "2839:     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));",
          "2841:         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3217:             subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();",
          "3219:         if (options.exists(\"replaceable\")) {",
          "3221:         }",
          "3222:         if (options.exists(\"conf_target\")) {",
          "3223:             if (options.exists(\"feeRate\")) {",
          "",
          "[Removed Lines]",
          "3220:             coinControl.signalRbf = options[\"replaceable\"].get_bool();",
          "",
          "[Added Lines]",
          "3220:             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3407:     CAmount totalFee = 0;",
          "3408:     CCoinControl coin_control;",
          "3410:     if (!request.params[1].isNull()) {",
          "3411:         UniValue options = request.params[1];",
          "3412:         RPCTypeCheckObj(options,",
          "",
          "[Removed Lines]",
          "3409:     coin_control.signalRbf = true;",
          "",
          "[Added Lines]",
          "3409:     coin_control.m_signal_bip125_rbf = true;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3430:         }",
          "3432:         if (options.exists(\"replaceable\")) {",
          "3434:         }",
          "3435:         if (options.exists(\"estimate_mode\")) {",
          "3436:             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {",
          "",
          "[Removed Lines]",
          "3433:             coin_control.signalRbf = options[\"replaceable\"].get_bool();",
          "",
          "[Added Lines]",
          "3433:             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();",
          "",
          "---------------"
        ],
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     return nullptr;",
          "73: }",
          "82: const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;",
          "98: const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));",
          "",
          "[Removed Lines]",
          "76: CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);",
          "77: unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;",
          "78: bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;",
          "79: bool fWalletRbf = DEFAULT_WALLET_RBF;",
          "80: bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams",
          "88: CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);",
          "94: CFeeRate CWallet::fallbackFee = CFeeRate(DEFAULT_FALLBACK_FEE);",
          "96: CFeeRate CWallet::m_discard_rate = CFeeRate(DEFAULT_DISCARD_FEE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2054:         return true;",
          "2055:     if (nDepth < 0)",
          "2056:         return false;",
          "2058:         return false;",
          "",
          "[Removed Lines]",
          "2057:     if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit",
          "",
          "[Added Lines]",
          "2036:     if (!pwallet->m_spend_zero_conf_change || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2490:         FeeCalculation feeCalc;",
          "2491:         CCoinControl temp;",
          "2492:         temp.m_confirm_target = 1008;",
          "2499:         for (const COutput &output : vCoins)",
          "",
          "[Removed Lines]",
          "2493:         CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);",
          "2496:         CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);",
          "",
          "[Added Lines]",
          "2472:         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, ::mempool, ::feeEstimator, &feeCalc);",
          "2475:         CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2590:     bool res = nTargetValue <= nValueFromPresetInputs ||",
          "2591:         SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||",
          "2592:         SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||",
          "2600:     setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());",
          "",
          "[Removed Lines]",
          "2593:         (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2594:         (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, nMaxChainLength/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2595:         (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2596:         (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2597:         (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));",
          "",
          "[Added Lines]",
          "2572:         (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2573:         (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, nMaxChainLength/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2574:         (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2575:         (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
          "2576:         (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2813:             CTxOut change_prototype_txout(0, scriptChange);",
          "2814:             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);",
          "2821:             nFeeRet = 0;",
          "2822:             bool pick_new_inputs = true;",
          "",
          "[Removed Lines]",
          "2816:             CFeeRate discard_rate = GetDiscardRate(::feeEstimator);",
          "2819:             CFeeRate nFeeRateNeeded = GetMinimumFeeRate(coin_control, ::mempool, ::feeEstimator, &feeCalc);",
          "",
          "[Added Lines]",
          "2795:             CFeeRate discard_rate = GetDiscardRate(*this, ::feeEstimator);",
          "2798:             CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, ::mempool, ::feeEstimator, &feeCalc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2940:                     return false;",
          "2941:                 }",
          "2946:                     strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");",
          "2947:                     return false;",
          "",
          "[Removed Lines]",
          "2943:                 nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);",
          "2944:                 if (feeCalc.reason == FeeReason::FALLBACK && !g_wallet_allow_fallback_fee) {",
          "",
          "[Added Lines]",
          "2922:                 nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);",
          "2923:                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2969:                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {",
          "2970:                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size",
          "2972:                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);",
          "2973:                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {",
          "2974:                             pick_new_inputs = false;",
          "",
          "[Removed Lines]",
          "2971:                         CAmount fee_needed_with_change = GetMinimumFee(tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);",
          "",
          "[Added Lines]",
          "2950:                         CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3039:         for (const auto& coin : selected_coins) {",
          "3040:             txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));",
          "3041:         }",
          "",
          "[Removed Lines]",
          "3038:         const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);",
          "",
          "[Added Lines]",
          "3017:         const uint32_t nSequence = coin_control.m_signal_bip125_rbf.get_value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4080:         return nullptr;",
          "4081:     }",
          "4083:     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4062:     if (gArgs.IsArgSet(\"-mintxfee\")) {",
          "4063:         CAmount n = 0;",
          "4064:         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {",
          "4065:             InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));",
          "4066:             return nullptr;",
          "4067:         }",
          "4068:         if (n > HIGH_TX_FEE_PER_KB) {",
          "4069:             InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +",
          "4070:                         _(\"This is the minimum transaction fee you pay on every transaction.\"));",
          "4071:         }",
          "4072:         walletInstance->m_min_fee = CFeeRate(n);",
          "4073:     }",
          "4075:     walletInstance->m_allow_fallback_fee = Params().IsFallbackFeeEnabled();",
          "4076:     if (gArgs.IsArgSet(\"-fallbackfee\")) {",
          "4077:         CAmount nFeePerK = 0;",
          "4078:         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {",
          "4079:             InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));",
          "4080:             return nullptr;",
          "4081:         }",
          "4082:         if (nFeePerK > HIGH_TX_FEE_PER_KB) {",
          "4083:             InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +",
          "4084:                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));",
          "4085:         }",
          "4086:         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);",
          "4087:         walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value",
          "4088:     }",
          "4089:     if (gArgs.IsArgSet(\"-discardfee\")) {",
          "4090:         CAmount nFeePerK = 0;",
          "4091:         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {",
          "4092:             InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));",
          "4093:             return nullptr;",
          "4094:         }",
          "4095:         if (nFeePerK > HIGH_TX_FEE_PER_KB) {",
          "4096:             InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +",
          "4097:                         _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));",
          "4098:         }",
          "4099:         walletInstance->m_discard_rate = CFeeRate(nFeePerK);",
          "4100:     }",
          "4101:     if (gArgs.IsArgSet(\"-paytxfee\")) {",
          "4102:         CAmount nFeePerK = 0;",
          "4103:         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {",
          "4104:             InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));",
          "4105:             return nullptr;",
          "4106:         }",
          "4107:         if (nFeePerK > HIGH_TX_FEE_PER_KB) {",
          "4108:             InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +",
          "4109:                         _(\"This is the transaction fee you will pay if you send a transaction.\"));",
          "4110:         }",
          "4111:         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);",
          "4112:         if (walletInstance->m_pay_tx_fee < ::minRelayTxFee) {",
          "4113:             InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),",
          "4114:                 gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));",
          "4115:             return nullptr;",
          "4116:         }",
          "4117:     }",
          "4118:     walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);",
          "4119:     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);",
          "4120:     walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);",
          "",
          "---------------"
        ],
        "src/wallet/wallet.h||src/wallet/wallet.h": [
          "File: src/wallet/wallet.h -> src/wallet/wallet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: std::vector<CWallet*> GetWallets();",
          "39: CWallet* GetWallet(const std::string& name);",
          "51: static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;",
          "55: static const CAmount DEFAULT_FALLBACK_FEE = 20000;",
          "57: static const CAmount DEFAULT_DISCARD_FEE = 10000;",
          "59: static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;",
          "",
          "[Removed Lines]",
          "44: extern CFeeRate payTxFee;",
          "45: extern unsigned int nTxConfirmTarget;",
          "46: extern bool bSpendZeroConfChange;",
          "47: extern bool fWalletRbf;",
          "48: extern bool g_wallet_allow_fallback_fee;",
          "53: static const CAmount DEFAULT_TRANSACTION_FEE = 0;",
          "",
          "[Added Lines]",
          "44: constexpr CAmount DEFAULT_PAY_TX_FEE = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "968:     bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const;",
          "969:     bool DummySignInput(CTxIn &tx_in, const CTxOut &txout) const;",
          "974:     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};",
          "975:     OutputType m_default_change_type{OutputType::NONE}; // Default to OutputType::NONE if not set by -changetype",
          "",
          "[Removed Lines]",
          "971:     static CFeeRate minTxFee;",
          "972:     static CFeeRate fallbackFee;",
          "973:     static CFeeRate m_discard_rate;",
          "",
          "[Added Lines]",
          "962:     CFeeRate m_pay_tx_fee{DEFAULT_PAY_TX_FEE};",
          "963:     unsigned int m_confirm_target{DEFAULT_TX_CONFIRM_TARGET};",
          "964:     bool m_spend_zero_conf_change{DEFAULT_SPEND_ZEROCONF_CHANGE};",
          "965:     bool m_signal_rbf{DEFAULT_WALLET_RBF};",
          "966:     bool m_allow_fallback_fee{true}; //<! will be defined via chainparams",
          "967:     CFeeRate m_min_fee{DEFAULT_TRANSACTION_MINFEE}; //!< Override with -mintxfee",
          "973:     CFeeRate m_fallback_fee{DEFAULT_FALLBACK_FEE};",
          "974:     CFeeRate m_discard_rate{DEFAULT_DISCARD_FEE};",
          "",
          "---------------"
        ],
        "test/functional/wallet_multiwallet.py||test/functional/wallet_multiwallet.py": [
          "File: test/functional/wallet_multiwallet.py -> test/functional/wallet_multiwallet.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")",
          "151:         assert_equal(batch[1][\"result\"][\"walletname\"], \"w1\")",
          "153: if __name__ == '__main__':",
          "154:     MultiWalletTest().main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:         self.log.info('Check for per-wallet settxfee call')",
          "154:         assert_equal(w1.getwalletinfo()['paytxfee'], 0)",
          "155:         assert_equal(w2.getwalletinfo()['paytxfee'], 0)",
          "156:         w2.settxfee(4.0)",
          "157:         assert_equal(w1.getwalletinfo()['paytxfee'], 0)",
          "158:         assert_equal(w2.getwalletinfo()['paytxfee'], 4.0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}