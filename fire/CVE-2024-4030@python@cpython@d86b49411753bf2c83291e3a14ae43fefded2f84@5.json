{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "060d846f436027c0169fc8e2d3a0a7b9bc9afee8",
      "candidate_info": {
        "commit_hash": "060d846f436027c0169fc8e2d3a0a7b9bc9afee8",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/060d846f436027c0169fc8e2d3a0a7b9bc9afee8",
        "files": [
          ".github/workflows/build.yml",
          "Lib/test/test_pyrepl/test_unix_console.py",
          "Lib/test/test_pyrepl/test_windows_console.py"
        ],
        "message": "[3.13] Use Cirrus M1 macOS runners for CI (GH-119979) (GH-119986)\n\n(cherry picked from commit 6acb32fac3511c1d5500cac66f1d6397dcdab835)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\nCo-authored-by: Ee Durbin <ee@python.org>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py",
          "Lib/test/test_pyrepl/test_windows_console.py||Lib/test/test_pyrepl/test_windows_console.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py": [
          "File: Lib/test/test_pyrepl/test_unix_console.py -> Lib/test/test_pyrepl/test_unix_console.py"
        ],
        "Lib/test/test_pyrepl/test_windows_console.py||Lib/test/test_pyrepl/test_windows_console.py": [
          "File: Lib/test/test_pyrepl/test_windows_console.py -> Lib/test/test_pyrepl/test_windows_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import sys",
          "2: import unittest",
          "5:     raise unittest.SkipTest(\"test only relevant on win32\")",
          "",
          "[Removed Lines]",
          "4: if sys.platform != 'win32':",
          "",
          "[Added Lines]",
          "4: if sys.platform != \"win32\":",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18359f202de00d7fabf27605528c77a619b7b13d",
      "candidate_info": {
        "commit_hash": "18359f202de00d7fabf27605528c77a619b7b13d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/18359f202de00d7fabf27605528c77a619b7b13d",
        "files": [
          "Lib/test/test_unpack_ex.py"
        ],
        "message": "[3.13] gh-94808: Add test coverage for \"starred kind\" in _PyPegen_set_expr_context (GH-119222) (GH-119263)\n\ngh-94808: Add test coverage for \"starred kind\" in _PyPegen_set_expr_context (GH-119222)\n\nAdd test coverage for \"starred kind\" in _PyPegen_set_expr_context\n(cherry picked from commit 8231a24454c854ea22590fd74733d29e4274122d)\n\nCo-authored-by: Mark Jason Dominus (\u9676\u654f\u4fee) <mjd@pobox.com>",
        "before_after_code_files": [
          "Lib/test/test_unpack_ex.py||Lib/test/test_unpack_ex.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_unpack_ex.py||Lib/test/test_unpack_ex.py": [
          "File: Lib/test/test_unpack_ex.py -> Lib/test/test_unpack_ex.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     >>> a == [7, 8, 9]",
          "27:     True",
          "29: Unpack string... fun!",
          "31:     >>> a, *b = 'one'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: Unpack nested implied tuple",
          "31:     >>> [*[*a]] = [[7,8,9]]",
          "32:     >>> a == [[7,8,9]]",
          "33:     True",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a19bb261a327e1008f219b62f6465941c981899b",
      "candidate_info": {
        "commit_hash": "a19bb261a327e1008f219b62f6465941c981899b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a19bb261a327e1008f219b62f6465941c981899b",
        "files": [
          "Doc/library/gzip.rst",
          "Lib/gzip.py",
          "Lib/test/test_gzip.py",
          "Misc/NEWS.d/next/Library/2024-06-12-10-00-31.gh-issue-90425.5CfkKG.rst"
        ],
        "message": "[3.13] gh-112346: Always set OS byte to 255, simpler gzip.compress function. (GH-120486) (#120563)\n\ngh-112346: Always set OS byte to 255, simpler gzip.compress function. (GH-120486)\n\nThis matches the output behavior in 3.10 and earlier; the optimization in 3.11 allowed the zlib library's \"os\" value to be filled in instead in the circumstance when mtime was 0.  this keeps things consistent.\n(cherry picked from commit 08d09cf5ba041c9c5c3860200b56bab66fd44a23)\n\nCo-authored-by: Ruben Vorderman <r.h.p.vorderman@lumc.nl>",
        "before_after_code_files": [
          "Lib/gzip.py||Lib/gzip.py",
          "Lib/test/test_gzip.py||Lib/test/test_gzip.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/gzip.py||Lib/gzip.py": [
          "File: Lib/gzip.py -> Lib/gzip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580:         self._new_member = True",
          "604: def compress(data, compresslevel=_COMPRESS_LEVEL_BEST, *, mtime=None):",
          "605:     \"\"\"Compress data in one shot and return the compressed string.",
          "",
          "[Removed Lines]",
          "583: def _create_simple_gzip_header(compresslevel: int,",
          "584:                                mtime = None) -> bytes:",
          "585:     \"\"\"",
          "586:     Write a simple gzip header with no extra fields.",
          "587:     :param compresslevel: Compresslevel used to determine the xfl bytes.",
          "588:     :param mtime: The mtime (must support conversion to a 32-bit integer).",
          "589:     :return: A bytes object representing the gzip header.",
          "590:     \"\"\"",
          "591:     if mtime is None:",
          "592:         mtime = time.time()",
          "593:     if compresslevel == _COMPRESS_LEVEL_BEST:",
          "594:         xfl = 2",
          "595:     elif compresslevel == _COMPRESS_LEVEL_FAST:",
          "596:         xfl = 4",
          "597:     else:",
          "598:         xfl = 0",
          "599:     # Pack ID1 and ID2 magic bytes, method (8=deflate), header flags (no extra",
          "600:     # fields added to header), mtime, xfl and os (255 for unknown OS).",
          "601:     return struct.pack(\"<BBBBLBB\", 0x1f, 0x8b, 8, 0, int(mtime), xfl, 255)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:     mtime can be used to set the modification time. The modification time is",
          "609:     set to the current time by default.",
          "610:     \"\"\"",
          "622: def decompress(data):",
          "",
          "[Removed Lines]",
          "611:     if mtime == 0:",
          "612:         # Use zlib as it creates the header with 0 mtime by default.",
          "613:         # This is faster and with less overhead.",
          "614:         return zlib.compress(data, level=compresslevel, wbits=31)",
          "615:     header = _create_simple_gzip_header(compresslevel, mtime)",
          "616:     trailer = struct.pack(\"<LL\", zlib.crc32(data), (len(data) & 0xffffffff))",
          "617:     # Wbits=-15 creates a raw deflate block.",
          "618:     return (header + zlib.compress(data, level=compresslevel, wbits=-15) +",
          "619:             trailer)",
          "",
          "[Added Lines]",
          "590:     # Wbits=31 automatically includes a gzip header and trailer.",
          "591:     gzip_data = zlib.compress(data, level=compresslevel, wbits=31)",
          "592:     if mtime is None:",
          "593:         mtime = time.time()",
          "594:     # Reuse gzip header created by zlib, replace mtime and OS byte for",
          "595:     # consistency.",
          "596:     header = struct.pack(\"<4sLBB\", gzip_data, int(mtime), gzip_data[8], 255)",
          "597:     return header + gzip_data[10:]",
          "",
          "---------------"
        ],
        "Lib/test/test_gzip.py||Lib/test/test_gzip.py": [
          "File: Lib/test/test_gzip.py -> Lib/test/test_gzip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:                         self.assertEqual(f.mtime, mtime)",
          "716:     def test_compress_correct_level(self):",
          "718:         for mtime in (0, 42):",
          "719:             with self.subTest(mtime=mtime):",
          "720:                 nocompress = gzip.compress(data1, compresslevel=0, mtime=mtime)",
          "",
          "[Removed Lines]",
          "717:         # gzip.compress calls with mtime == 0 take a different code path.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "722:                 self.assertIn(data1, nocompress)",
          "723:                 self.assertNotIn(data1, yescompress)",
          "725:     def test_decompress(self):",
          "726:         for data in (data1, data2):",
          "727:             buf = io.BytesIO()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:     def test_issue112346(self):",
          "725:         # The OS byte should be 255, this should not change between Python versions.",
          "726:         for mtime in (0, 42):",
          "727:             with self.subTest(mtime=mtime):",
          "728:                 compress = gzip.compress(data1, compresslevel=1, mtime=mtime)",
          "729:                 self.assertEqual(",
          "730:                     struct.unpack(\"<IxB\", compress[4:10]),",
          "731:                     (mtime, 255),",
          "732:                     \"Gzip header does not properly set either mtime or OS byte.\"",
          "733:                 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "497047606d6349b0596a53c6db1a1616ef0f0d80",
      "candidate_info": {
        "commit_hash": "497047606d6349b0596a53c6db1a1616ef0f0d80",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/497047606d6349b0596a53c6db1a1616ef0f0d80",
        "files": [
          "Misc/valgrind-python.supp"
        ],
        "message": "[3.13] gh-121096: Ignore dlopen() leaks in Valgrind suppression file (GH-121097) (#121122)\n\ngh-121096: Ignore dlopen() leaks in Valgrind suppression file (GH-121097)\n(cherry picked from commit 6e63d84e43fdce3a5bdb899b024cf947d4e48900)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Misc/valgrind-python.supp||Misc/valgrind-python.supp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Misc/valgrind-python.supp||Misc/valgrind-python.supp": [
          "File: Misc/valgrind-python.supp -> Misc/valgrind-python.supp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:    fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING",
          "96: }",
          "98: #",
          "99: # Non-python specific leaks",
          "100: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #",
          "99: # Leaks: dlopen() called without dlclose()",
          "100: #",
          "102: {",
          "103:    dlopen() called without dlclose()",
          "104:    Memcheck:Leak",
          "105:    fun:malloc",
          "106:    fun:malloc",
          "107:    fun:strdup",
          "108:    fun:_dl_load_cache_lookup",
          "109: }",
          "110: {",
          "111:    dlopen() called without dlclose()",
          "112:    Memcheck:Leak",
          "113:    fun:malloc",
          "114:    fun:malloc",
          "115:    fun:strdup",
          "116:    fun:_dl_map_object",
          "117: }",
          "118: {",
          "119:    dlopen() called without dlclose()",
          "120:    Memcheck:Leak",
          "121:    fun:malloc",
          "122:    fun:*",
          "123:    fun:_dl_new_object",
          "124: }",
          "125: {",
          "126:    dlopen() called without dlclose()",
          "127:    Memcheck:Leak",
          "128:    fun:calloc",
          "129:    fun:*",
          "130:    fun:_dl_new_object",
          "131: }",
          "132: {",
          "133:    dlopen() called without dlclose()",
          "134:    Memcheck:Leak",
          "135:    fun:calloc",
          "136:    fun:*",
          "137:    fun:_dl_check_map_versions",
          "138: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4b853f2a5a4601806f503f1833dce3a4e8d2b58",
      "candidate_info": {
        "commit_hash": "c4b853f2a5a4601806f503f1833dce3a4e8d2b58",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c4b853f2a5a4601806f503f1833dce3a4e8d2b58",
        "files": [
          "Lib/test/test_trace.py",
          "Lib/trace.py",
          "Misc/NEWS.d/next/Library/2023-04-28-09-54-15.gh-issue-103956.EyLDPS.rst"
        ],
        "message": "[3.13] gh-103956: Fix `trace` output in case of missing source line (GH-103958) (GH-118834)\n\nPrint only filename with lineno if linecache.getline() returns an empty string.\n(cherry picked from commit 7c87ce777b3fd9055b118a58ec8614901ecb45e9)\n\nCo-authored-by: Radislav Chugunov <52372310+chgnrdv@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/test_trace.py||Lib/test/test_trace.py",
          "Lib/trace.py||Lib/trace.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_trace.py||Lib/test/test_trace.py": [
          "File: Lib/test/test_trace.py -> Lib/test/test_trace.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from test.support.script_helper import assert_python_ok, assert_python_failure",
          "7: import textwrap",
          "8: import unittest",
          "10: import trace",
          "11: from trace import Trace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from types import FunctionType",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:         assert_python_failure('-m', 'trace', '-l', '--module', 'not_a_module_zzz')",
          "562: if __name__ == '__main__':",
          "563:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563: class TestTrace(unittest.TestCase):",
          "564:     def setUp(self):",
          "565:         self.addCleanup(sys.settrace, sys.gettrace())",
          "566:         self.tracer = Trace(count=0, trace=1)",
          "567:         self.filemod = my_file_and_modname()",
          "569:     def test_no_source_file(self):",
          "570:         filename = \"<unknown>\"",
          "571:         co = traced_func_linear.__code__",
          "572:         co = co.replace(co_filename=filename)",
          "573:         f = FunctionType(co, globals())",
          "575:         with captured_stdout() as out:",
          "576:             self.tracer.runfunc(f, 2, 3)",
          "578:         out = out.getvalue().splitlines()",
          "579:         firstlineno = get_firstlineno(f)",
          "580:         self.assertIn(f\" --- modulename: {self.filemod[1]}, funcname: {f.__code__.co_name}\", out[0])",
          "581:         self.assertIn(f\"{filename}({firstlineno + 1})\", out[1])",
          "582:         self.assertIn(f\"{filename}({firstlineno + 2})\", out[2])",
          "583:         self.assertIn(f\"{filename}({firstlineno + 3})\", out[3])",
          "584:         self.assertIn(f\"{filename}({firstlineno + 4})\", out[4])",
          "",
          "---------------"
        ],
        "Lib/trace.py||Lib/trace.py": [
          "File: Lib/trace.py -> Lib/trace.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "565:             if self.start_time:",
          "566:                 print('%.2f' % (_time() - self.start_time), end=' ')",
          "567:             bname = os.path.basename(filename)",
          "570:         return self.localtrace",
          "572:     def localtrace_trace(self, frame, why, arg):",
          "",
          "[Removed Lines]",
          "568:             print(\"%s(%d): %s\" % (bname, lineno,",
          "569:                                   linecache.getline(filename, lineno)), end='')",
          "",
          "[Added Lines]",
          "568:             line = linecache.getline(filename, lineno)",
          "569:             print(\"%s(%d)\" % (bname, lineno), end='')",
          "570:             if line:",
          "571:                 print(\": \", line, end='')",
          "572:             else:",
          "573:                 print()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:             if self.start_time:",
          "579:                 print('%.2f' % (_time() - self.start_time), end=' ')",
          "580:             bname = os.path.basename(filename)",
          "583:         return self.localtrace",
          "585:     def localtrace_count(self, frame, why, arg):",
          "",
          "[Removed Lines]",
          "581:             print(\"%s(%d): %s\" % (bname, lineno,",
          "582:                                   linecache.getline(filename, lineno)), end='')",
          "",
          "[Added Lines]",
          "585:             line = linecache.getline(filename, lineno)",
          "586:             print(\"%s(%d)\" % (bname, lineno), end='')",
          "587:             if line:",
          "588:                 print(\": \", line, end='')",
          "589:             else:",
          "590:                 print()",
          "",
          "---------------"
        ]
      }
    }
  ]
}