{
  "cve_id": "CVE-2023-30186",
  "cve_desc": "A use after free issue discovered in ONLYOFFICE DocumentServer 4.0.3 through 7.3.2 allows remote attackers to run arbitrary code via crafted JavaScript file.",
  "repo": "ONLYOFFICE/core",
  "patch_hash": "2b6ad83b36afd9845085b536969d366d1d61150a",
  "patch_info": {
    "commit_hash": "2b6ad83b36afd9845085b536969d366d1d61150a",
    "repo": "ONLYOFFICE/core",
    "commit_url": "https://github.com/ONLYOFFICE/core/commit/2b6ad83b36afd9845085b536969d366d1d61150a",
    "files": [
      "DesktopEditor/doctrenderer/docbuilder_p.cpp",
      "DesktopEditor/doctrenderer/docbuilder_p.h",
      "DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm",
      "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
      "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
      "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
    ],
    "message": "Fix bug 60433",
    "before_after_code_files": [
      "DesktopEditor/doctrenderer/docbuilder_p.cpp||DesktopEditor/doctrenderer/docbuilder_p.cpp",
      "DesktopEditor/doctrenderer/docbuilder_p.h||DesktopEditor/doctrenderer/docbuilder_p.h",
      "DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm||DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm",
      "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
      "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
      "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
    ]
  },
  "patch_diff": {
    "DesktopEditor/doctrenderer/docbuilder_p.cpp||DesktopEditor/doctrenderer/docbuilder_p.cpp": [
      "File: DesktopEditor/doctrenderer/docbuilder_p.cpp -> DesktopEditor/doctrenderer/docbuilder_p.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: {",
      "77:  LOGGER_SPEED_START",
      "82:  std::string commandA = U_TO_UTF8(command);",
      "",
      "[Removed Lines]",
      "79:    if (retValue)",
      "80:    retValue->Clear();",
      "",
      "[Added Lines]",
      "79:  if (retValue)",
      "80:   retValue->Clear();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:  LOGGER_SPEED_LAP(\"compile_command\")",
      "91:  if(try_catch->Check())",
      "92:   return false;",
      "",
      "[Removed Lines]",
      "90:    JSSmart<CJSValue> retNativeVal = m_context->runScript(commandA, try_catch);",
      "",
      "[Added Lines]",
      "90:  JSSmart<CJSValue> retNativeVal = m_context->runScript(commandA, try_catch);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:  LOGGER_SPEED_LAP(\"run_command\")",
      "104: }",
      "106: std::string CV8RealTimeWorker::GetGlobalVariable()",
      "",
      "[Removed Lines]",
      "103:    return true;",
      "",
      "[Added Lines]",
      "103:  return true;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "139: {",
      "140:  LOGGER_SPEED_START",
      "143:  JSSmart<CJSTryCatch>         try_catch = m_context->GetExceptions();",
      "145:  LOGGER_SPEED_LAP(\"compile\");",
      "",
      "[Removed Lines]",
      "142:    JSSmart<CJSContextScope> context_scope = m_context->CreateContextScope();",
      "",
      "[Added Lines]",
      "142:  JSSmart<CJSContextScope> context_scope = m_context->CreateContextScope();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "151:  LOGGER_SPEED_LAP(\"run\")",
      "154:  {",
      "155:   std::string sArg = m_sUtf8ArgumentJSON;",
      "156:   if (sArg.empty())",
      "",
      "[Removed Lines]",
      "153:    if (true)",
      "",
      "[Added Lines]",
      "153:  if (true)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "250:  LOGGER_SPEED_LAP(\"open\")",
      "253: }",
      "255: bool CV8RealTimeWorker::SaveFileWithChanges(int type, const std::wstring& _path, const std::wstring& sJsonParams)",
      "",
      "[Removed Lines]",
      "252:    return !bIsBreak;",
      "",
      "[Added Lines]",
      "252:  return !bIsBreak;",
      "",
      "---------------"
    ],
    "DesktopEditor/doctrenderer/docbuilder_p.h||DesktopEditor/doctrenderer/docbuilder_p.h": [
      "File: DesktopEditor/doctrenderer/docbuilder_p.h -> DesktopEditor/doctrenderer/docbuilder_p.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "891:    LOGGER_SPEED_START",
      "894:    NSDirectory::CreateDirectory(m_sFileDir + L\"/changes\");",
      "896:    std::wstring sExtCopy = GetFileCopyExt(path);",
      "",
      "[Removed Lines]",
      "893:      CheckFileDir();",
      "",
      "[Added Lines]",
      "893:    CheckFileDir();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "913:    LOGGER_SPEED_LAP(\"open_convert\")",
      "918:    NSDirectory::DeleteDirectory(m_sFileDir);",
      "919:    m_sFileDir = L\"\";",
      "",
      "[Removed Lines]",
      "915:      if (0 == nReturnCode)",
      "916:      return 0;",
      "",
      "[Added Lines]",
      "915:    if (0 == nReturnCode)",
      "916:     return 0;",
      "",
      "---------------"
    ],
    "DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm||DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm": [
      "File: DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm -> DesktopEditor/doctrenderer/embed/jsc/jsc_NativeControl.mm",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: -(JSValue*) CheckNextChange;",
      "15: -(JSValue*) GetCountChanges;",
      "16: -(JSValue*) GetChangesFile : (JSValue*)index;",
      "19: -(JSValue*) Save_End : (JSValue*)pos : (JSValue*)len;",
      "20: -(JSValue*) AddImageInChanges : (JSValue*)img;",
      "21: -(JSValue*) ConsoleLog : (JSValue*)message;",
      "",
      "[Removed Lines]",
      "17: -(JSValue*) Save_AllocNative : (JSValue*)len;",
      "18: -(JSValue*) Save_ReAllocNative : (JSValue*)pos : (JSValue*)len;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: FUNCTION_WRAPPER_JS(CheckNextChange, CheckNextChange)",
      "55: FUNCTION_WRAPPER_JS(GetCountChanges, GetCountChanges)",
      "56: FUNCTION_WRAPPER_JS_1(GetChangesFile, GetChangesFile)",
      "59: FUNCTION_WRAPPER_JS_2(Save_End, Save_End)",
      "60: FUNCTION_WRAPPER_JS_1(AddImageInChanges, AddImageInChanges)",
      "61: FUNCTION_WRAPPER_JS_1(ConsoleLog, ConsoleLog)",
      "",
      "[Removed Lines]",
      "57: FUNCTION_WRAPPER_JS_1(Save_AllocNative, Save_AllocNative)",
      "58: FUNCTION_WRAPPER_JS_2(Save_ReAllocNative, Save_ReAllocNative)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp": [
      "File: DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: namespace NSNativeControl",
      "5: {",
      "137: }",
      "139: void CNativeControlEmbed::CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context)",
      "140: {",
      "143: }",
      "145: void CNativeControlEmbed::CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context)",
      "146: {",
      "149: }",
      "",
      "[Removed Lines]",
      "6:     #define CURRENTWRAPPER CNativeControlEmbed",
      "8:     FUNCTION_WRAPPER_V8(_GetFilePath, GetFilePath)",
      "9:     FUNCTION_WRAPPER_V8_1(_SetFilePath, SetFilePath)",
      "10:     FUNCTION_WRAPPER_V8(_GetFileId, GetFileId)",
      "11:     FUNCTION_WRAPPER_V8_1(_SetFileId, SetFileId)",
      "12:     FUNCTION_WRAPPER_V8_1(_GetFileArrayBuffer, GetFileBinary)",
      "13:     FUNCTION_WRAPPER_V8_1(_GetFontArrayBuffer, GetFontBinary)",
      "14:     FUNCTION_WRAPPER_V8(_GetFontsDirectory, GetFontsDirectory)",
      "15:     FUNCTION_WRAPPER_V8_1(_GetFileString, GetFileString)",
      "16:     FUNCTION_WRAPPER_V8(_GetEditorType, GetEditorType)",
      "17:     FUNCTION_WRAPPER_V8(_CheckNextChange, CheckNextChange)",
      "18:     FUNCTION_WRAPPER_V8(_GetChangesCount, GetCountChanges)",
      "19:     FUNCTION_WRAPPER_V8_1(_GetChangesFile, GetChangesFile)",
      "20:     FUNCTION_WRAPPER_V8_1(_Save_AllocNative, Save_AllocNative)",
      "21:     FUNCTION_WRAPPER_V8_2(_Save_ReAllocNative, Save_ReAllocNative)",
      "22:     FUNCTION_WRAPPER_V8_2(_Save_End, Save_End)",
      "23:     FUNCTION_WRAPPER_V8_1(_AddImageInChanges, AddImageInChanges)",
      "24:     FUNCTION_WRAPPER_V8_1(_ConsoleLog, ConsoleLog)",
      "25:     FUNCTION_WRAPPER_V8_3(_SaveChanges, SaveChanges)",
      "26:     FUNCTION_WRAPPER_V8_1(_zipOpenFile, zipOpenFile)",
      "27:     FUNCTION_WRAPPER_V8_1(_zipOpenFileBase64, zipOpenFileBase64)",
      "28:     FUNCTION_WRAPPER_V8_1(_zipGetFileAsString, zipGetFileAsString)",
      "29:     FUNCTION_WRAPPER_V8_1(_zipGetFileAsBinary, zipGetFileAsBinary)",
      "30:     FUNCTION_WRAPPER_V8(_zipCloseFile, zipCloseFile)",
      "31:     FUNCTION_WRAPPER_V8_1(_GetImageUrl, GetImageUrl)",
      "32:     FUNCTION_WRAPPER_V8_1(_GetImageOriginalSize, GetImageOriginalSize)",
      "33:     FUNCTION_WRAPPER_V8(_GetImagesPath, GetImagesPath)",
      "35:     v8::Handle<v8::ObjectTemplate> CreateNativeControlTemplate(v8::Isolate* isolate)",
      "36:     {",
      "37:         v8::EscapableHandleScope handle_scope(isolate);",
      "39:         v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(V8IsolateOneArg);",
      "40:         result->SetInternalFieldCount(1);",
      "42:         NSV8Objects::Template_Set(result, \"SetFilePath\",        _SetFilePath);",
      "43:         NSV8Objects::Template_Set(result, \"GetFilePath\",        _GetFilePath);",
      "44:         NSV8Objects::Template_Set(result, \"SetFileId\",          _SetFileId);",
      "45:         NSV8Objects::Template_Set(result, \"GetFileId\",          _GetFileId);",
      "46:         NSV8Objects::Template_Set(result, \"GetFileBinary\",      _GetFileArrayBuffer);",
      "47:         NSV8Objects::Template_Set(result, \"GetFontBinary\",      _GetFontArrayBuffer);",
      "48:         NSV8Objects::Template_Set(result, \"GetFontsDirectory\",  _GetFontsDirectory);",
      "49:         NSV8Objects::Template_Set(result, \"GetFileString\",      _GetFileString);",
      "50:         NSV8Objects::Template_Set(result, \"GetEditorType\",      _GetEditorType);",
      "51:         NSV8Objects::Template_Set(result, \"CheckNextChange\",    _CheckNextChange);",
      "52:         NSV8Objects::Template_Set(result, \"GetCountChanges\",    _GetChangesCount);",
      "53:         NSV8Objects::Template_Set(result, \"GetChangesFile\",     _GetChangesFile);",
      "54:         NSV8Objects::Template_Set(result, \"Save_AllocNative\",   _Save_AllocNative);",
      "55:         NSV8Objects::Template_Set(result, \"Save_ReAllocNative\", _Save_ReAllocNative);",
      "56:         NSV8Objects::Template_Set(result, \"Save_End\",           _Save_End);",
      "57:         NSV8Objects::Template_Set(result, \"AddImageInChanges\",  _AddImageInChanges);",
      "58:         NSV8Objects::Template_Set(result, \"ConsoleLog\",         _ConsoleLog);",
      "59:         NSV8Objects::Template_Set(result, \"SaveChanges\",        _SaveChanges);",
      "60:         NSV8Objects::Template_Set(result, \"ZipOpen\",            _zipOpenFile);",
      "61:         NSV8Objects::Template_Set(result, \"ZipOpenBase64\",      _zipOpenFileBase64);",
      "62:         NSV8Objects::Template_Set(result, \"ZipFileAsString\",    _zipGetFileAsString);",
      "63:         NSV8Objects::Template_Set(result, \"ZipFileAsBinary\",    _zipGetFileAsBinary);",
      "64:         NSV8Objects::Template_Set(result, \"ZipClose\",           _zipCloseFile);",
      "65:         NSV8Objects::Template_Set(result, \"getImageUrl\",        _GetImageUrl);",
      "66:         NSV8Objects::Template_Set(result, \"getImagesDirectory\", _GetImagesPath);",
      "67:         NSV8Objects::Template_Set(result, \"GetImageOriginalSize\", _GetImageOriginalSize);",
      "69:         return handle_scope.Escape(result);",
      "70:     }",
      "73:     v8::Handle<v8::ObjectTemplate> CreateNativeControlTemplateBuilder(v8::Isolate* isolate)",
      "74:     {",
      "75:         v8::EscapableHandleScope handle_scope(isolate);",
      "77:         v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(V8IsolateOneArg);",
      "78:         result->SetInternalFieldCount(1);",
      "80:         NSV8Objects::Template_Set(result, \"SetFilePath\",        _SetFilePath);",
      "81:         NSV8Objects::Template_Set(result, \"GetFilePath\",        _GetFilePath);",
      "82:         NSV8Objects::Template_Set(result, \"SetFileId\",          _SetFileId);",
      "83:         NSV8Objects::Template_Set(result, \"GetFileId\",          _GetFileId);",
      "84:         NSV8Objects::Template_Set(result, \"GetFileBinary\",      _GetFileArrayBuffer);",
      "85:         NSV8Objects::Template_Set(result, \"GetFontBinary\",      _GetFontArrayBuffer);",
      "86:         NSV8Objects::Template_Set(result, \"GetFontsDirectory\",  _GetFontsDirectory);",
      "87:         NSV8Objects::Template_Set(result, \"GetFileString\",      _GetFileString);",
      "88:         NSV8Objects::Template_Set(result, \"GetEditorType\",      _GetEditorType);",
      "89:         NSV8Objects::Template_Set(result, \"CheckNextChange\",    _CheckNextChange);",
      "90:         NSV8Objects::Template_Set(result, \"GetCountChanges\",    _GetChangesCount);",
      "91:         NSV8Objects::Template_Set(result, \"GetChangesFile\",     _GetChangesFile);",
      "92:         NSV8Objects::Template_Set(result, \"Save_AllocNative\",   _Save_AllocNative);",
      "93:         NSV8Objects::Template_Set(result, \"Save_ReAllocNative\", _Save_ReAllocNative);",
      "94:         NSV8Objects::Template_Set(result, \"Save_End\",           _Save_End);",
      "95:         NSV8Objects::Template_Set(result, \"AddImageInChanges\",  _AddImageInChanges);",
      "96:         NSV8Objects::Template_Set(result, \"ConsoleLog\",         _ConsoleLog);",
      "97:         NSV8Objects::Template_Set(result, \"ZipOpen\",            _zipOpenFile);",
      "98:         NSV8Objects::Template_Set(result, \"ZipOpenBase64\",      _zipOpenFileBase64);",
      "99:         NSV8Objects::Template_Set(result, \"ZipFileAsString\",    _zipGetFileAsString);",
      "100:         NSV8Objects::Template_Set(result, \"ZipFileAsBinary\",    _zipGetFileAsBinary);",
      "101:         NSV8Objects::Template_Set(result, \"ZipClose\",           _zipCloseFile);",
      "102:         NSV8Objects::Template_Set(result, \"getImageUrl\",        _GetImageUrl);",
      "103:         NSV8Objects::Template_Set(result, \"getImagesDirectory\", _GetImagesPath);",
      "104:         NSV8Objects::Template_Set(result, \"GetImageOriginalSize\", _GetImageOriginalSize);",
      "106:         return handle_scope.Escape(result);",
      "107:     }",
      "109:     void CreateNativeObject(const v8::FunctionCallbackInfo<v8::Value>& args)",
      "110:     {",
      "111:         v8::Isolate* isolate = args.GetIsolate();",
      "112:         v8::HandleScope scope(isolate);",
      "114:         v8::Handle<v8::ObjectTemplate> NativeObjectTemplate = CreateNativeControlTemplate(isolate);",
      "115:         CNativeControlEmbed* pNativeObject = new CNativeControlEmbed();",
      "117:         v8::Local<v8::Object> obj = NativeObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
      "118:         obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObject));",
      "120:         args.GetReturnValue().Set(obj);",
      "121:     }",
      "124:     void CreateNativeObjectBuilder(const v8::FunctionCallbackInfo<v8::Value>& args)",
      "125:     {",
      "126:         v8::Isolate* isolate = args.GetIsolate();",
      "127:         v8::HandleScope scope(isolate);",
      "129:         v8::Handle<v8::ObjectTemplate> NativeObjectTemplate = CreateNativeControlTemplateBuilder(isolate);",
      "130:         CNativeControlEmbed* pNativeObject = new CNativeControlEmbed();",
      "132:         v8::Local<v8::Object> obj = NativeObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
      "133:         obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObject));",
      "135:         args.GetReturnValue().Set(obj);",
      "136:     }",
      "141:     v8::Isolate* current = CV8Worker::GetCurrent();",
      "142:     context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObject));",
      "147:     v8::Isolate* current = CV8Worker::GetCurrent();",
      "148:     context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));",
      "",
      "[Added Lines]",
      "6: #define CURRENTWRAPPER CNativeControlEmbed",
      "8:  FUNCTION_WRAPPER_V8(_GetFilePath, GetFilePath)",
      "9:  FUNCTION_WRAPPER_V8_1(_SetFilePath, SetFilePath)",
      "10:  FUNCTION_WRAPPER_V8(_GetFileId, GetFileId)",
      "11:  FUNCTION_WRAPPER_V8_1(_SetFileId, SetFileId)",
      "12:  FUNCTION_WRAPPER_V8_1(_GetFileArrayBuffer, GetFileBinary)",
      "13:  FUNCTION_WRAPPER_V8_1(_GetFontArrayBuffer, GetFontBinary)",
      "14:  FUNCTION_WRAPPER_V8(_GetFontsDirectory, GetFontsDirectory)",
      "15:  FUNCTION_WRAPPER_V8_1(_GetFileString, GetFileString)",
      "16:  FUNCTION_WRAPPER_V8(_GetEditorType, GetEditorType)",
      "17:  FUNCTION_WRAPPER_V8(_CheckNextChange, CheckNextChange)",
      "18:  FUNCTION_WRAPPER_V8(_GetChangesCount, GetCountChanges)",
      "19:  FUNCTION_WRAPPER_V8_1(_GetChangesFile, GetChangesFile)",
      "20:  FUNCTION_WRAPPER_V8_1(_Save_AllocNative, Save_AllocNative)",
      "21:  FUNCTION_WRAPPER_V8_2(_Save_ReAllocNative, Save_ReAllocNative)",
      "22:  FUNCTION_WRAPPER_V8_2(_Save_End, Save_End)",
      "23:  FUNCTION_WRAPPER_V8_1(_AddImageInChanges, AddImageInChanges)",
      "24:  FUNCTION_WRAPPER_V8_1(_ConsoleLog, ConsoleLog)",
      "25:  FUNCTION_WRAPPER_V8_3(_SaveChanges, SaveChanges)",
      "26:  FUNCTION_WRAPPER_V8_1(_zipOpenFile, zipOpenFile)",
      "27:  FUNCTION_WRAPPER_V8_1(_zipOpenFileBase64, zipOpenFileBase64)",
      "28:  FUNCTION_WRAPPER_V8_1(_zipGetFileAsString, zipGetFileAsString)",
      "29:  FUNCTION_WRAPPER_V8_1(_zipGetFileAsBinary, zipGetFileAsBinary)",
      "30:  FUNCTION_WRAPPER_V8(_zipCloseFile, zipCloseFile)",
      "31:  FUNCTION_WRAPPER_V8_1(_GetImageUrl, GetImageUrl)",
      "32:  FUNCTION_WRAPPER_V8_1(_GetImageOriginalSize, GetImageOriginalSize)",
      "33:  FUNCTION_WRAPPER_V8(_GetImagesPath, GetImagesPath)",
      "35:  v8::Handle<v8::ObjectTemplate> CreateNativeControlTemplate(v8::Isolate* isolate)",
      "36:  {",
      "37:   v8::EscapableHandleScope handle_scope(isolate);",
      "39:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(V8IsolateOneArg);",
      "40:   result->SetInternalFieldCount(1);",
      "42:   NSV8Objects::Template_Set(result, \"SetFilePath\",        _SetFilePath);",
      "43:   NSV8Objects::Template_Set(result, \"GetFilePath\",        _GetFilePath);",
      "44:   NSV8Objects::Template_Set(result, \"SetFileId\",          _SetFileId);",
      "45:   NSV8Objects::Template_Set(result, \"GetFileId\",          _GetFileId);",
      "46:   NSV8Objects::Template_Set(result, \"GetFileBinary\",      _GetFileArrayBuffer);",
      "47:   NSV8Objects::Template_Set(result, \"GetFontBinary\",      _GetFontArrayBuffer);",
      "48:   NSV8Objects::Template_Set(result, \"GetFontsDirectory\",  _GetFontsDirectory);",
      "49:   NSV8Objects::Template_Set(result, \"GetFileString\",      _GetFileString);",
      "50:   NSV8Objects::Template_Set(result, \"GetEditorType\",      _GetEditorType);",
      "51:   NSV8Objects::Template_Set(result, \"CheckNextChange\",    _CheckNextChange);",
      "52:   NSV8Objects::Template_Set(result, \"GetCountChanges\",    _GetChangesCount);",
      "53:   NSV8Objects::Template_Set(result, \"GetChangesFile\",     _GetChangesFile);",
      "56:   NSV8Objects::Template_Set(result, \"Save_End\",           _Save_End);",
      "57:   NSV8Objects::Template_Set(result, \"AddImageInChanges\",  _AddImageInChanges);",
      "58:   NSV8Objects::Template_Set(result, \"ConsoleLog\",         _ConsoleLog);",
      "59:   NSV8Objects::Template_Set(result, \"SaveChanges\",        _SaveChanges);",
      "60:   NSV8Objects::Template_Set(result, \"ZipOpen\",            _zipOpenFile);",
      "61:   NSV8Objects::Template_Set(result, \"ZipOpenBase64\",      _zipOpenFileBase64);",
      "62:   NSV8Objects::Template_Set(result, \"ZipFileAsString\",    _zipGetFileAsString);",
      "63:   NSV8Objects::Template_Set(result, \"ZipFileAsBinary\",    _zipGetFileAsBinary);",
      "64:   NSV8Objects::Template_Set(result, \"ZipClose\",           _zipCloseFile);",
      "65:   NSV8Objects::Template_Set(result, \"getImageUrl\",        _GetImageUrl);",
      "66:   NSV8Objects::Template_Set(result, \"getImagesDirectory\", _GetImagesPath);",
      "67:   NSV8Objects::Template_Set(result, \"GetImageOriginalSize\", _GetImageOriginalSize);",
      "69:   return handle_scope.Escape(result);",
      "70:  }",
      "73:  v8::Handle<v8::ObjectTemplate> CreateNativeControlTemplateBuilder(v8::Isolate* isolate)",
      "74:  {",
      "75:   v8::EscapableHandleScope handle_scope(isolate);",
      "77:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(V8IsolateOneArg);",
      "78:   result->SetInternalFieldCount(1);",
      "80:   NSV8Objects::Template_Set(result, \"SetFilePath\",        _SetFilePath);",
      "81:   NSV8Objects::Template_Set(result, \"GetFilePath\",        _GetFilePath);",
      "82:   NSV8Objects::Template_Set(result, \"SetFileId\",          _SetFileId);",
      "83:   NSV8Objects::Template_Set(result, \"GetFileId\",          _GetFileId);",
      "84:   NSV8Objects::Template_Set(result, \"GetFileBinary\",      _GetFileArrayBuffer);",
      "85:   NSV8Objects::Template_Set(result, \"GetFontBinary\",      _GetFontArrayBuffer);",
      "86:   NSV8Objects::Template_Set(result, \"GetFontsDirectory\",  _GetFontsDirectory);",
      "87:   NSV8Objects::Template_Set(result, \"GetFileString\",      _GetFileString);",
      "88:   NSV8Objects::Template_Set(result, \"GetEditorType\",      _GetEditorType);",
      "89:   NSV8Objects::Template_Set(result, \"CheckNextChange\",    _CheckNextChange);",
      "90:   NSV8Objects::Template_Set(result, \"GetCountChanges\",    _GetChangesCount);",
      "91:   NSV8Objects::Template_Set(result, \"GetChangesFile\",     _GetChangesFile);",
      "94:   NSV8Objects::Template_Set(result, \"Save_End\",           _Save_End);",
      "95:   NSV8Objects::Template_Set(result, \"AddImageInChanges\",  _AddImageInChanges);",
      "96:   NSV8Objects::Template_Set(result, \"ConsoleLog\",         _ConsoleLog);",
      "97:   NSV8Objects::Template_Set(result, \"ZipOpen\",            _zipOpenFile);",
      "98:   NSV8Objects::Template_Set(result, \"ZipOpenBase64\",      _zipOpenFileBase64);",
      "99:   NSV8Objects::Template_Set(result, \"ZipFileAsString\",    _zipGetFileAsString);",
      "100:   NSV8Objects::Template_Set(result, \"ZipFileAsBinary\",    _zipGetFileAsBinary);",
      "101:   NSV8Objects::Template_Set(result, \"ZipClose\",           _zipCloseFile);",
      "102:   NSV8Objects::Template_Set(result, \"getImageUrl\",        _GetImageUrl);",
      "103:   NSV8Objects::Template_Set(result, \"getImagesDirectory\", _GetImagesPath);",
      "104:   NSV8Objects::Template_Set(result, \"GetImageOriginalSize\", _GetImageOriginalSize);",
      "106:   return handle_scope.Escape(result);",
      "107:  }",
      "109:  void CreateNativeObject(const v8::FunctionCallbackInfo<v8::Value>& args)",
      "110:  {",
      "111:   v8::Isolate* isolate = args.GetIsolate();",
      "112:   v8::HandleScope scope(isolate);",
      "114:   if (CIsolateAdditionalData::CheckSingletonType(isolate, CIsolateAdditionalData::iadtSingletonNative))",
      "115:   {",
      "116:    args.GetReturnValue().Set(v8::Undefined(isolate));",
      "117:    return;",
      "118:   }",
      "120:   v8::Handle<v8::ObjectTemplate> NativeObjectTemplate = CreateNativeControlTemplate(isolate);",
      "121:   CNativeControlEmbed* pNativeObject = new CNativeControlEmbed();",
      "123:   v8::Local<v8::Object> obj = NativeObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
      "124:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObject));",
      "126:   args.GetReturnValue().Set(obj);",
      "127:  }",
      "130:  void CreateNativeObjectBuilder(const v8::FunctionCallbackInfo<v8::Value>& args)",
      "131:  {",
      "132:   v8::Isolate* isolate = args.GetIsolate();",
      "133:   v8::HandleScope scope(isolate);",
      "135:   if (CIsolateAdditionalData::CheckSingletonType(isolate, CIsolateAdditionalData::iadtSingletonNative))",
      "136:   {",
      "137:    args.GetReturnValue().Set(v8::Undefined(isolate));",
      "138:    return;",
      "139:   }",
      "141:   v8::Handle<v8::ObjectTemplate> NativeObjectTemplate = CreateNativeControlTemplateBuilder(isolate);",
      "142:   CNativeControlEmbed* pNativeObject = new CNativeControlEmbed();",
      "144:   v8::Local<v8::Object> obj = NativeObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
      "145:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObject));",
      "147:   args.GetReturnValue().Set(obj);",
      "148:  }",
      "153:  v8::Isolate* current = CV8Worker::GetCurrent();",
      "154:  context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObject));",
      "159:  v8::Isolate* current = CV8Worker::GetCurrent();",
      "160:  context->m_internal->m_global->Set(current, name.c_str(), v8::FunctionTemplate::New(current, NSNativeControl::CreateNativeObjectBuilder));",
      "",
      "---------------"
    ],
    "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp": [
      "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "219: #ifdef V8_INSPECTOR",
      "220:   v8_debug::disposeInspector(m_internal->m_context);",
      "221: #endif",
      "222:   m_internal->m_isolate->Dispose();",
      "223:   m_internal->m_isolate = NULL;",
      "224:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:   unsigned int nEmbedDataCount = m_internal->m_isolate->GetNumberOfDataSlots();",
      "223:   for (unsigned int i = 0; i < nEmbedDataCount; ++i)",
      "224:   {",
      "225:    CIsolateAdditionalData* pAdditionData = (CIsolateAdditionalData*)m_internal->m_isolate->GetData(i);",
      "226:    delete pAdditionData;",
      "227:   }",
      "",
      "---------------"
    ],
    "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h": [
      "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.h -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "72: };",
      "73: #endif",
      "75: class CV8Initializer",
      "76: {",
      "77: private:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75: class CIsolateAdditionalData",
      "76: {",
      "77: public:",
      "78:  enum IsolateAdditionlDataType {",
      "79:   iadtSingletonNative = 0,",
      "80:   iadtUndefined = 255",
      "81:  };",
      "83:  IsolateAdditionlDataType m_eType;",
      "84: public:",
      "85:  CIsolateAdditionalData(const IsolateAdditionlDataType& type = iadtUndefined) { m_eType = type; }",
      "86:  virtual ~CIsolateAdditionalData() {}",
      "88:  static bool CheckSingletonType(v8::Isolate* isolate, const IsolateAdditionlDataType& type, const bool& isAdd = true)",
      "89:  {",
      "90:   unsigned int nCount = isolate->GetNumberOfDataSlots();",
      "91:   for (unsigned int i = 0; i < nCount; ++i)",
      "92:   {",
      "93:    CIsolateAdditionalData* pData = (CIsolateAdditionalData*)isolate->GetData(i);",
      "94:    if (pData->m_eType == type)",
      "95:     return true;",
      "96:   }",
      "98:   if (isAdd)",
      "99:   {",
      "100:    isolate->SetData(nCount, (void*)(new CIsolateAdditionalData(type)));",
      "101:   }",
      "103:   return false;",
      "104:  }",
      "105: };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "608b04ca26be47c0c231a4419617e032bb21ae2e",
      "candidate_info": {
        "commit_hash": "608b04ca26be47c0c231a4419617e032bb21ae2e",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/608b04ca26be47c0c231a4419617e032bb21ae2e",
        "files": [
          "DesktopEditor/graphics/Graphics.cpp",
          "DesktopEditor/graphics/Graphics.h",
          "DesktopEditor/graphics/GraphicsRenderer.cpp",
          "DesktopEditor/graphics/IRenderer.h",
          "PdfFile/PdfFile.cpp"
        ],
        "message": "For bug 61014",
        "before_after_code_files": [
          "DesktopEditor/graphics/Graphics.cpp||DesktopEditor/graphics/Graphics.cpp",
          "DesktopEditor/graphics/Graphics.h||DesktopEditor/graphics/Graphics.h",
          "DesktopEditor/graphics/GraphicsRenderer.cpp||DesktopEditor/graphics/GraphicsRenderer.cpp",
          "DesktopEditor/graphics/IRenderer.h||DesktopEditor/graphics/IRenderer.h",
          "PdfFile/PdfFile.cpp||PdfFile/PdfFile.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ONLYOFFICE/core/pull/1136"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "DesktopEditor/graphics/Graphics.cpp||DesktopEditor/graphics/Graphics.cpp": [
          "File: DesktopEditor/graphics/Graphics.cpp -> DesktopEditor/graphics/Graphics.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   m_nTextRenderMode = FT_RENDER_MODE_NORMAL;",
          "71:   m_nBlendMode = agg::comp_op_src_over;",
          "72:  }",
          "74:  CGraphics::CGraphics(int dwWidth, int dwHeight, int stride, BYTE* pBuffer) : m_dwConfigFlags(0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   m_bIs0PenWidthAs1px = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   m_nTextRenderMode = FT_RENDER_MODE_NORMAL;",
          "105:   m_nBlendMode = agg::comp_op_src_over;",
          "106:  }",
          "108:  CGraphics::CGraphics(CImage* pImage) : m_dwConfigFlags(0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   m_bIs0PenWidthAs1px = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:   m_nTextRenderMode = FT_RENDER_MODE_NORMAL;",
          "144:   m_nBlendMode = agg::comp_op_src_over;",
          "145:  }",
          "147:  CGraphics::~CGraphics()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   m_bIs0PenWidthAs1px = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "610:   if ((0 == dWidth && !m_bIntegerGrid) || dWidth < dWidthMinSize)",
          "611:   {",
          "613:   }",
          "615:   double dblMiterLimit = pPen->MiterLimit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618:    if (m_bIs0PenWidthAs1px)",
          "619:     dWidth = dWidthMinSize;",
          "",
          "---------------"
        ],
        "DesktopEditor/graphics/Graphics.h||DesktopEditor/graphics/Graphics.h": [
          "File: DesktopEditor/graphics/Graphics.h -> DesktopEditor/graphics/Graphics.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:  int m_nTextRenderMode;",
          "310:  unsigned int m_nBlendMode;",
          "312: public:",
          "314:  CGraphics();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:  bool m_bIs0PenWidthAs1px;",
          "",
          "---------------"
        ],
        "DesktopEditor/graphics/GraphicsRenderer.cpp||DesktopEditor/graphics/GraphicsRenderer.cpp": [
          "File: DesktopEditor/graphics/GraphicsRenderer.cpp -> DesktopEditor/graphics/GraphicsRenderer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1158:         m_pRenderer->m_bIsDarkMode = (1 == lCommand);",
          "1159:  if (c_nUseDictionaryFonts == lType && m_pFontManager)",
          "1160:   m_pFontManager->SetUseCorrentFontByName((1 == lCommand) ? true : false);",
          "1161:  return S_OK;",
          "1162: }",
          "1163: HRESULT CGraphicsRenderer::CommandDouble(const LONG& lType, const double& dCommand)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:  if (c_nPenWidth0As1px == lType && m_pRenderer)",
          "1162:   m_pRenderer->m_bIs0PenWidthAs1px = (1 == lCommand) ? true : false;",
          "",
          "---------------"
        ],
        "DesktopEditor/graphics/IRenderer.h||DesktopEditor/graphics/IRenderer.h": [
          "File: DesktopEditor/graphics/IRenderer.h -> DesktopEditor/graphics/IRenderer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: const long c_nFlipNextRotate = 0x0004;",
          "108: const long c_nDarkMode          = 0x0008;",
          "109: const long c_nUseDictionaryFonts = 0x0010;",
          "112: const long c_nUnknownRenderer   = 0x0000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: const long c_nPenWidth0As1px = 0x0020;",
          "",
          "---------------"
        ],
        "PdfFile/PdfFile.cpp||PdfFile/PdfFile.cpp": [
          "File: PdfFile/PdfFile.cpp -> PdfFile/PdfFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "789: {",
          "790:     if (!m_pInternal->pReader)",
          "791:         return;",
          "792:     m_pInternal->pReader->DrawPageOnRenderer(pRenderer, nPageIndex, pBreak);",
          "793: }",
          "794: std::wstring CPdfFile::GetInfo()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "792:  pRenderer->CommandLong(c_nPenWidth0As1px, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85ab308f80822c21b78c4b3aa1aa4b56605b6d09",
      "candidate_info": {
        "commit_hash": "85ab308f80822c21b78c4b3aa1aa4b56605b6d09",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/85ab308f80822c21b78c4b3aa1aa4b56605b6d09",
        "files": [
          "DesktopEditor/doctrenderer/docbuilder_p.cpp",
          "DesktopEditor/doctrenderer/docbuilder_p.h",
          "DesktopEditor/doctrenderer/doctrenderer.cpp",
          "DesktopEditor/doctrenderer/embed/Default.cpp",
          "DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/GraphicsEmbed.h",
          "DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h",
          "DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h",
          "DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/NativeControlEmbed.h",
          "DesktopEditor/doctrenderer/embed/PointerEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/PointerEmbed.h",
          "DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h",
          "DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.h",
          "DesktopEditor/doctrenderer/js_internal/js_logger.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_logger.h",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "DesktopEditor/doctrenderer/nativecontrol.h"
        ],
        "message": "Refactoring",
        "before_after_code_files": [
          "DesktopEditor/doctrenderer/docbuilder_p.cpp||DesktopEditor/doctrenderer/docbuilder_p.cpp",
          "DesktopEditor/doctrenderer/docbuilder_p.h||DesktopEditor/doctrenderer/docbuilder_p.h",
          "DesktopEditor/doctrenderer/doctrenderer.cpp||DesktopEditor/doctrenderer/doctrenderer.cpp",
          "DesktopEditor/doctrenderer/embed/Default.cpp||DesktopEditor/doctrenderer/embed/Default.cpp",
          "DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp||DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/GraphicsEmbed.h||DesktopEditor/doctrenderer/embed/GraphicsEmbed.h",
          "DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp||DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h||DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h",
          "DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp||DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h||DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h",
          "DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp||DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/NativeControlEmbed.h||DesktopEditor/doctrenderer/embed/NativeControlEmbed.h",
          "DesktopEditor/doctrenderer/embed/PointerEmbed.cpp||DesktopEditor/doctrenderer/embed/PointerEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/PointerEmbed.h||DesktopEditor/doctrenderer/embed/PointerEmbed.h",
          "DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp||DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp",
          "DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h||DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h",
          "DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp||DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp||DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp",
          "DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.h||DesktopEditor/doctrenderer/js_internal/js_base.h",
          "DesktopEditor/doctrenderer/js_internal/js_logger.cpp||DesktopEditor/doctrenderer/js_internal/js_logger.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_logger.h||DesktopEditor/doctrenderer/js_internal/js_logger.h",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "DesktopEditor/doctrenderer/nativecontrol.h||DesktopEditor/doctrenderer/nativecontrol.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/doctrenderer/docbuilder_p.cpp||DesktopEditor/doctrenderer/docbuilder_p.cpp",
            "DesktopEditor/doctrenderer/docbuilder_p.h||DesktopEditor/doctrenderer/docbuilder_p.h",
            "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ],
          "candidate": [
            "DesktopEditor/doctrenderer/docbuilder_p.cpp||DesktopEditor/doctrenderer/docbuilder_p.cpp",
            "DesktopEditor/doctrenderer/docbuilder_p.h||DesktopEditor/doctrenderer/docbuilder_p.h",
            "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/doctrenderer/docbuilder_p.cpp||DesktopEditor/doctrenderer/docbuilder_p.cpp": [
          "File: DesktopEditor/doctrenderer/docbuilder_p.cpp -> DesktopEditor/doctrenderer/docbuilder_p.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: bool CV8RealTimeWorker::ExecuteCommand(const std::wstring& command, NSDoctRenderer::CDocBuilderValue* retValue)",
          "69: {",
          "72:  if (retValue)",
          "73:   retValue->Clear();",
          "",
          "[Removed Lines]",
          "70:  LOGGER_SPEED_START",
          "",
          "[Added Lines]",
          "70:  LOGGER_SPEED_START();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:  CJSContextScope scope(m_context);",
          "79:  JSSmart<CJSTryCatch> try_catch = m_context->GetExceptions();",
          "83:  JSSmart<CJSValue> retNativeVal = m_context->runScript(commandA, try_catch);",
          "84:  if(try_catch->Check())",
          "",
          "[Removed Lines]",
          "81:  LOGGER_SPEED_LAP(\"compile_command\")",
          "",
          "[Added Lines]",
          "81:  LOGGER_SPEED_LAP(\"compile_command\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   privateRet->m_value = retNativeVal;",
          "92:  }",
          "96:  return true;",
          "97: }",
          "",
          "[Removed Lines]",
          "94:  LOGGER_SPEED_LAP(\"run_command\")",
          "",
          "[Added Lines]",
          "94:  LOGGER_SPEED_LAP(\"run_command\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131: bool CV8RealTimeWorker::OpenFile(const std::wstring& sBasePath, const std::wstring& path, const std::string& sString, const std::wstring& sCachePath, CV8Params* pParams)",
          "132: {",
          "135:  CJSContextScope scope(m_context);",
          "138:  LOGGER_SPEED_LAP(\"compile\");",
          "",
          "[Removed Lines]",
          "133:  LOGGER_SPEED_START",
          "136:  JSSmart<CJSTryCatch>         try_catch = m_context->GetExceptions();",
          "",
          "[Added Lines]",
          "133:  LOGGER_SPEED_START();",
          "136:  JSSmart<CJSTryCatch> try_catch = m_context->GetExceptions();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:  if(try_catch->Check())",
          "142:   return false;",
          "146:  if (true)",
          "147:  {",
          "",
          "[Removed Lines]",
          "144:  LOGGER_SPEED_LAP(\"run\")",
          "",
          "[Added Lines]",
          "144:  LOGGER_SPEED_LAP(\"run\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "240:  if (!bIsBreak)",
          "241:   bIsBreak = !this->ExecuteCommand(L\"Api.asc_SetSilentMode(true);\");",
          "245:  return !bIsBreak;",
          "246: }",
          "",
          "[Removed Lines]",
          "243:  LOGGER_SPEED_LAP(\"open\")",
          "",
          "[Added Lines]",
          "243:  LOGGER_SPEED_LAP(\"open\");",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/docbuilder_p.h||DesktopEditor/doctrenderer/docbuilder_p.h": [
          "File: DesktopEditor/doctrenderer/docbuilder_p.h -> DesktopEditor/doctrenderer/docbuilder_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "886:   {",
          "887:    Init();",
          "891:    CheckFileDir();",
          "892:    NSDirectory::CreateDirectory(m_sFileDir + L\"/changes\");",
          "",
          "[Removed Lines]",
          "889:    LOGGER_SPEED_START",
          "",
          "[Added Lines]",
          "889:    LOGGER_SPEED_START();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "909:    int nReturnCode = ConvertToInternalFormat(m_sFileDir, sFileCopy, params);",
          "913:    if (0 == nReturnCode)",
          "914:     return 0;",
          "",
          "[Removed Lines]",
          "911:    LOGGER_SPEED_LAP(\"open_convert\")",
          "",
          "[Added Lines]",
          "911:    LOGGER_SPEED_LAP(\"open_convert\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "966:     return 1;",
          "967:    }",
          "972:    if (NULL != params)",
          "973:    {",
          "974:     sConvertionParams = std::wstring(params);",
          "",
          "[Removed Lines]",
          "969:    LOGGER_SPEED_START",
          "971:      std::wstring sConvertionParams = L\"\";",
          "",
          "[Added Lines]",
          "969:    LOGGER_SPEED_START();",
          "971:    std::wstring sConvertionParams = L\"\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1162:    NSDirectory::DeleteDirectory(sDstTmpDir);",
          "1163:    NSFile::CFileBinary::Remove(sTempFileForParams);",
          "1170:    std::wstring sErrorLog = L\"save file error (\" + std::to_wstring(nReturnCode) + L\")\";",
          "1171:    CV8RealTimeWorker::_LOGGING_ERROR_(L\"error: \", sErrorLog);",
          "",
          "[Removed Lines]",
          "1165:    LOGGER_SPEED_LAP(\"save_convert\")",
          "1167:      if (0 == nReturnCode)",
          "1168:      return 0;",
          "",
          "[Added Lines]",
          "1165:    LOGGER_SPEED_LAP(\"save_convert\");",
          "1167:    if (0 == nReturnCode)",
          "1168:     return 0;",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/doctrenderer.cpp||DesktopEditor/doctrenderer/doctrenderer.cpp": [
          "File: DesktopEditor/doctrenderer/doctrenderer.cpp -> DesktopEditor/doctrenderer/doctrenderer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:   bool ExecuteScript(const std::string& strScript, const std::wstring& sCachePath, std::wstring& strError, std::wstring& strReturnParams)",
          "537:   {",
          "541:    JSSmart<CJSContext> context = new CJSContext();",
          "543:    if (true)",
          "",
          "[Removed Lines]",
          "538:    LOGGER_SPEED_START",
          "540:      bool bIsBreak = false;",
          "",
          "[Added Lines]",
          "538:    LOGGER_SPEED_START();",
          "540:    bool bIsBreak = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:     JSSmart<CJSTryCatch>         try_catch = context->GetExceptions();",
          "556:     if(try_catch->Check())",
          "557:     {",
          "558:      strError = L\"code=\\\"run\\\"\";",
          "559:      bIsBreak = true;",
          "560:     }",
          "566:     JSSmart<CJSValue> args[1];",
          "567:     args[0] = CJSContext::createInt(0);",
          "",
          "[Removed Lines]",
          "553:     LOGGER_SPEED_LAP(\"compile\")",
          "555:       JSSmart<CJSValue> res = context->runScript(strScript, try_catch, sCachePath);",
          "562:     LOGGER_SPEED_LAP(\"run\")",
          "565:       JSSmart<CJSObject> global_js = context->GetGlobal();",
          "",
          "[Added Lines]",
          "553:     LOGGER_SPEED_LAP(\"compile\");",
          "555:     JSSmart<CJSValue> res = context->runScript(strScript, try_catch, sCachePath);",
          "562:     LOGGER_SPEED_LAP(\"run\");",
          "565:     JSSmart<CJSObject> global_js = context->GetGlobal();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "648:      }",
          "649:     }",
          "655:     {",
          "656:      if (m_oParams.m_arChanges.size() != 0)",
          "657:      {",
          "",
          "[Removed Lines]",
          "651:     LOGGER_SPEED_LAP(\"open\")",
          "654:       if (!bIsBreak)",
          "",
          "[Added Lines]",
          "651:     LOGGER_SPEED_LAP(\"open\");",
          "654:     if (!bIsBreak)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "699:      }",
          "700:     }",
          "705:     if (!m_oParams.m_strMailMergeDatabasePath.empty() &&",
          "706:       m_oParams.m_nMailMergeIndexEnd >= m_oParams.m_nMailMergeIndexStart &&",
          "707:       m_oParams.m_nMailMergeIndexEnd >= 0)",
          "",
          "[Removed Lines]",
          "702:     LOGGER_SPEED_LAP(\"changes\")",
          "704:       bool bIsMailMerge = false;",
          "",
          "[Added Lines]",
          "702:     LOGGER_SPEED_LAP(\"changes\");",
          "704:     bool bIsMailMerge = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:      bIsBreak = Doct_renderer_SaveFile(&m_oParams, pNative, context, args, strError, js_objectApi);",
          "821:     }",
          "824:    }",
          "826:    context->Dispose();",
          "",
          "[Removed Lines]",
          "823:     LOGGER_SPEED_LAP(\"save\")",
          "",
          "[Added Lines]",
          "823:     LOGGER_SPEED_LAP(\"save\");",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/Default.cpp||DesktopEditor/doctrenderer/embed/Default.cpp": [
          "File: DesktopEditor/doctrenderer/embed/Default.cpp -> DesktopEditor/doctrenderer/embed/Default.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: namespace NSJSBase",
          "8: {",
          "10:   CZipEmbed::CreateObjectInContext(\"CreateNativeZip\", context);",
          "11:   CTextMeasurerEmbed::CreateObjectInContext(\"CreateNativeTextMeasurer\", context);",
          "12:   CMemoryStreamEmbed::CreateObjectInContext(\"CreateNativeMemoryStream\", context);",
          "",
          "[Removed Lines]",
          "9:  void CreateDefaults(JSSmart<CJSContext>& context) {",
          "",
          "[Added Lines]",
          "9:  void CreateDefaults(JSSmart<CJSContext>& context)",
          "10:  {",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp||DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp": [
          "File: DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp -> DesktopEditor/doctrenderer/embed/GraphicsEmbed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: JSSmart<CJSValue> CGraphicsEmbed::init(JSSmart<CJSValue> Native, JSSmart<CJSValue> width_px, JSSmart<CJSValue> height_px, JSSmart<CJSValue> width_mm, JSSmart<CJSValue> height_mm)",
          "4: {",
          "7: }",
          "8: JSSmart<CJSValue> CGraphicsEmbed::Destroy()",
          "9: {",
          "12: }",
          "13: JSSmart<CJSValue> CGraphicsEmbed::EndDraw()",
          "14: {",
          "17: }",
          "18: JSSmart<CJSValue> CGraphicsEmbed::put_GlobalAlpha(JSSmart<CJSValue> enable, JSSmart<CJSValue> globalAlpha)",
          "19: {",
          "22: }",
          "23: JSSmart<CJSValue> CGraphicsEmbed::Start_GlobalAlpha()",
          "24: {",
          "27: }",
          "28: JSSmart<CJSValue> CGraphicsEmbed::End_GlobalAlpha()",
          "29: {",
          "32: }",
          "33: JSSmart<CJSValue> CGraphicsEmbed::p_color(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a)",
          "34: {",
          "37: }",
          "38: JSSmart<CJSValue> CGraphicsEmbed::p_width(JSSmart<CJSValue> w)",
          "39: {",
          "42: }",
          "43: JSSmart<CJSValue> CGraphicsEmbed::p_dash(JSSmart<CJSValue> params)",
          "44: {",
          "55: }",
          "56: JSSmart<CJSValue> CGraphicsEmbed::b_color1(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a)",
          "57: {",
          "60: }",
          "61: JSSmart<CJSValue> CGraphicsEmbed::b_color2(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a)",
          "62: {",
          "65: }",
          "66: JSSmart<CJSValue> CGraphicsEmbed::transform(JSSmart<CJSValue> sx, JSSmart<CJSValue> shy, JSSmart<CJSValue> shx, JSSmart<CJSValue> sy, JSSmart<CJSValue> tx, JSSmart<CJSValue> ty)",
          "67: {",
          "70: }",
          "71: JSSmart<CJSValue> CGraphicsEmbed::CalculateFullTransform(JSSmart<CJSValue> isInvertNeed)",
          "72: {",
          "75: }",
          "76: JSSmart<CJSValue> CGraphicsEmbed::_s()",
          "77: {",
          "80: }",
          "81: JSSmart<CJSValue> CGraphicsEmbed::_e()",
          "82: {",
          "85: }",
          "86: JSSmart<CJSValue> CGraphicsEmbed::_z()",
          "87: {",
          "90: }",
          "91: JSSmart<CJSValue> CGraphicsEmbed::_m (JSSmart<CJSValue> x,  JSSmart<CJSValue> y)",
          "92: {",
          "95: }",
          "96: JSSmart<CJSValue> CGraphicsEmbed::_l (JSSmart<CJSValue> x,  JSSmart<CJSValue> y)",
          "97: {",
          "100: }",
          "101: JSSmart<CJSValue> CGraphicsEmbed::_c (JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2, JSSmart<CJSValue> x3, JSSmart<CJSValue> y3)",
          "102: {",
          "105: }",
          "106: JSSmart<CJSValue> CGraphicsEmbed::_c2(JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2)",
          "107: {",
          "110: }",
          "111: JSSmart<CJSValue> CGraphicsEmbed::ds()",
          "112: {",
          "115: }",
          "116: JSSmart<CJSValue> CGraphicsEmbed::df()",
          "117: {",
          "120: }",
          "121: JSSmart<CJSValue> CGraphicsEmbed::save()",
          "122: {",
          "125: }",
          "126: JSSmart<CJSValue> CGraphicsEmbed::restore()",
          "127: {",
          "130: }",
          "131: JSSmart<CJSValue> CGraphicsEmbed::clip()",
          "132: {",
          "135: }",
          "136: JSSmart<CJSValue> CGraphicsEmbed::reset()",
          "137: {",
          "140: }",
          "141: JSSmart<CJSValue> CGraphicsEmbed::FreeFont()",
          "142: {",
          "145: }",
          "146: JSSmart<CJSValue> CGraphicsEmbed::ClearLastFont()",
          "147: {",
          "150: }",
          "151: JSSmart<CJSValue> CGraphicsEmbed::drawImage2(JSSmart<CJSValue> img, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h, JSSmart<CJSValue> alpha, JSSmart<CJSValue> srcRect)",
          "152: {",
          "155: }",
          "156: JSSmart<CJSValue> CGraphicsEmbed::drawImage (JSSmart<CJSValue> img, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h, JSSmart<CJSValue> alpha, JSSmart<CJSValue> srcRect, JSSmart<CJSValue> nativeImage)",
          "157: {",
          "160: }",
          "161: JSSmart<CJSValue> CGraphicsEmbed::GetFont()",
          "162: {",
          "164: }",
          "165: JSSmart<CJSValue> CGraphicsEmbed::font(JSSmart<CJSValue> font_id, JSSmart<CJSValue> font_size)",
          "166: {",
          "169: }",
          "170: JSSmart<CJSValue> CGraphicsEmbed::SetFont(JSSmart<CJSValue> path, JSSmart<CJSValue> face, JSSmart<CJSValue> size, JSSmart<CJSValue> style)",
          "171: {",
          "174: }",
          "175: JSSmart<CJSValue> CGraphicsEmbed::GetTextPr()",
          "176: {",
          "179: }",
          "180: JSSmart<CJSValue> CGraphicsEmbed::FillText(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> text)",
          "181: {",
          "184: }",
          "185: JSSmart<CJSValue> CGraphicsEmbed::t(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> _arr)",
          "186: {",
          "189: }",
          "190: JSSmart<CJSValue> CGraphicsEmbed::FillText2(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> text, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW)",
          "191: {",
          "194: }",
          "195: JSSmart<CJSValue> CGraphicsEmbed::t2(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> _arr, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW)",
          "196: {",
          "199: }",
          "200: JSSmart<CJSValue> CGraphicsEmbed::FillTextCode(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> lUnicode)",
          "201: {",
          "204: }",
          "205: JSSmart<CJSValue> CGraphicsEmbed::tg(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y)",
          "206: {",
          "209: }",
          "210: JSSmart<CJSValue> CGraphicsEmbed::charspace(JSSmart<CJSValue> space)",
          "211: {",
          "214: }",
          "215: JSSmart<CJSValue> CGraphicsEmbed::private_FillGlyph (JSSmart<CJSValue> pGlyph, JSSmart<CJSValue> _bounds)",
          "216: {",
          "219: }",
          "220: JSSmart<CJSValue> CGraphicsEmbed::private_FillGlyphC(JSSmart<CJSValue> pGlyph, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW)",
          "221: {",
          "224: }",
          "225: JSSmart<CJSValue> CGraphicsEmbed::private_FillGlyph2(JSSmart<CJSValue> pGlyph)",
          "226: {",
          "229: }",
          "230: JSSmart<CJSValue> CGraphicsEmbed::SetIntegerGrid(JSSmart<CJSValue> param)",
          "231: {",
          "234: }",
          "235: JSSmart<CJSValue> CGraphicsEmbed::GetIntegerGrid()",
          "236: {",
          "238: }",
          "239: JSSmart<CJSValue> CGraphicsEmbed::DrawStringASCII (JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y)",
          "240: {",
          "243: }",
          "244: JSSmart<CJSValue> CGraphicsEmbed::DrawStringASCII2(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y)",
          "245: {",
          "248: }",
          "249: JSSmart<CJSValue> CGraphicsEmbed::DrawHeaderEdit(JSSmart<CJSValue> yPos, JSSmart<CJSValue> lock_type, JSSmart<CJSValue> sectionNum, JSSmart<CJSValue> bIsRepeat, JSSmart<CJSValue> type)",
          "250: {",
          "253: }",
          "254: JSSmart<CJSValue> CGraphicsEmbed::DrawFooterEdit(JSSmart<CJSValue> yPos, JSSmart<CJSValue> lock_type, JSSmart<CJSValue> sectionNum, JSSmart<CJSValue> bIsRepeat, JSSmart<CJSValue> type)",
          "255: {",
          "258: }",
          "259: JSSmart<CJSValue> CGraphicsEmbed::DrawLockParagraph (JSSmart<CJSValue> x, JSSmart<CJSValue> y1, JSSmart<CJSValue> y2)",
          "260: {",
          "263: }",
          "264: JSSmart<CJSValue> CGraphicsEmbed::DrawLockObjectRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y,  JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "265: {",
          "268: }",
          "269: JSSmart<CJSValue> CGraphicsEmbed::DrawEmptyTableLine(JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2)",
          "270: {",
          "273: }",
          "274: JSSmart<CJSValue> CGraphicsEmbed::DrawSpellingLine  (JSSmart<CJSValue> y0, JSSmart<CJSValue> x0, JSSmart<CJSValue> x1, JSSmart<CJSValue> w)",
          "275: {",
          "278: }",
          "279: JSSmart<CJSValue> CGraphicsEmbed::drawHorLine (JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW)",
          "280: {",
          "283: }",
          "284: JSSmart<CJSValue> CGraphicsEmbed::drawHorLine2(JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW)",
          "285: {",
          "288: }",
          "289: JSSmart<CJSValue> CGraphicsEmbed::drawVerLine (JSSmart<CJSValue> align, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> b, JSSmart<CJSValue> penW)",
          "290: {",
          "293: }",
          "294: JSSmart<CJSValue> CGraphicsEmbed::drawHorLineExt(JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW, JSSmart<CJSValue> leftMW, JSSmart<CJSValue> rightMW)",
          "295: {",
          "298: }",
          "299: JSSmart<CJSValue> CGraphicsEmbed::rect     (JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "300: {",
          "303: }",
          "304: JSSmart<CJSValue> CGraphicsEmbed::TableRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "305: {",
          "308: }",
          "309: JSSmart<CJSValue> CGraphicsEmbed::AddClipRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "310: {",
          "313: }",
          "314: JSSmart<CJSValue> CGraphicsEmbed::RemoveClipRect()",
          "315: {",
          "318: }",
          "319: JSSmart<CJSValue> CGraphicsEmbed::SetClip(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "320: {",
          "323: }",
          "324: JSSmart<CJSValue> CGraphicsEmbed::RemoveClip()",
          "325: {",
          "328: }",
          "329: JSSmart<CJSValue> CGraphicsEmbed::drawMailMergeField(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "330: {",
          "333: }",
          "334: JSSmart<CJSValue> CGraphicsEmbed::drawSearchResult  (JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "335: {",
          "338: }",
          "339: JSSmart<CJSValue> CGraphicsEmbed::drawFlowAnchor    (JSSmart<CJSValue> x, JSSmart<CJSValue> y)",
          "340: {",
          "342: }",
          "343: JSSmart<CJSValue> CGraphicsEmbed::SavePen()",
          "344: {",
          "347: }",
          "348: JSSmart<CJSValue> CGraphicsEmbed::RestorePen()",
          "349: {",
          "352: }",
          "353: JSSmart<CJSValue> CGraphicsEmbed::SaveBrush()",
          "354: {",
          "357: }",
          "358: JSSmart<CJSValue> CGraphicsEmbed::RestoreBrush()",
          "359: {",
          "362: }",
          "363: JSSmart<CJSValue> CGraphicsEmbed::SavePenBrush()",
          "364: {",
          "367: }",
          "368: JSSmart<CJSValue> CGraphicsEmbed::RestorePenBrush()",
          "369: {",
          "372: }",
          "373: JSSmart<CJSValue> CGraphicsEmbed::SaveGrState()",
          "374: {",
          "377: }",
          "378: JSSmart<CJSValue> CGraphicsEmbed::RestoreGrState()",
          "379: {",
          "382: }",
          "383: JSSmart<CJSValue> CGraphicsEmbed::StartClipPath()",
          "384: {",
          "387: }",
          "388: JSSmart<CJSValue> CGraphicsEmbed::EndClipPath()",
          "389: {",
          "392: }",
          "393: JSSmart<CJSValue> CGraphicsEmbed::StartCheckTableDraw()",
          "394: {",
          "396: }",
          "397: JSSmart<CJSValue> CGraphicsEmbed::SetTextClipRect(JSSmart<CJSValue> _l, JSSmart<CJSValue> _t, JSSmart<CJSValue> _r, JSSmart<CJSValue> _b)",
          "398: {",
          "401: }",
          "402: JSSmart<CJSValue> CGraphicsEmbed::AddSmartRect   (JSSmart<CJSValue> x,  JSSmart<CJSValue> y,  JSSmart<CJSValue> w,  JSSmart<CJSValue> h, JSSmart<CJSValue> pen_w)",
          "403: {",
          "406: }",
          "407: JSSmart<CJSValue> CGraphicsEmbed::CheckUseFonts2 (JSSmart<CJSValue> _transform)",
          "408: {",
          "410: }",
          "411: JSSmart<CJSValue> CGraphicsEmbed::UncheckUseFonts2()",
          "412: {",
          "414: }",
          "415: JSSmart<CJSValue> CGraphicsEmbed::Drawing_StartCheckBounds(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "416: {",
          "418: }",
          "419: JSSmart<CJSValue> CGraphicsEmbed::Drawing_EndCheckBounds()",
          "420: {",
          "422: }",
          "423: JSSmart<CJSValue> CGraphicsEmbed::DrawPresentationComment(JSSmart<CJSValue> type, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "424: {",
          "426: }",
          "427: JSSmart<CJSValue> CGraphicsEmbed::DrawPolygon(JSSmart<CJSValue> oPath, JSSmart<CJSValue> lineWidth, JSSmart<CJSValue> shift)",
          "428: {",
          "430: }",
          "431: JSSmart<CJSValue> CGraphicsEmbed::DrawFootnoteRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "432: {",
          "435: }",
          "436: JSSmart<CJSValue> CGraphicsEmbed::toDataURL(JSSmart<CJSValue> type)",
          "437: {",
          "439: }",
          "440: JSSmart<CJSValue> CGraphicsEmbed::GetPenColor()",
          "441: {",
          "449: }",
          "450: JSSmart<CJSValue> CGraphicsEmbed::GetBrushColor()",
          "451: {",
          "459: }",
          "460: JSSmart<CJSValue> CGraphicsEmbed::put_brushTexture(JSSmart<CJSValue> src, JSSmart<CJSValue> type)",
          "461: {",
          "464: }",
          "465: JSSmart<CJSValue> CGraphicsEmbed::put_brushTextureMode(JSSmart<CJSValue> mode)",
          "466: {",
          "469: }",
          "470: JSSmart<CJSValue> CGraphicsEmbed::put_BrushTextureAlpha(JSSmart<CJSValue> a)",
          "471: {",
          "474: }",
          "475: JSSmart<CJSValue> CGraphicsEmbed::put_BrushGradient(JSSmart<CJSValue> colors, JSSmart<CJSValue> transparent, JSSmart<CJSValue> x0, JSSmart<CJSValue> y0, JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> r0, JSSmart<CJSValue> r1)",
          "476: {",
          "518: }",
          "519: JSSmart<CJSValue> CGraphicsEmbed::TransformPointX(JSSmart<CJSValue> x, JSSmart<CJSValue> y)",
          "520: {",
          "522: }",
          "523: JSSmart<CJSValue> CGraphicsEmbed::TransformPointY(JSSmart<CJSValue> x, JSSmart<CJSValue> y)",
          "524: {",
          "526: }",
          "527: JSSmart<CJSValue> CGraphicsEmbed::put_LineJoin(JSSmart<CJSValue> join)",
          "528: {",
          "531: }",
          "532: JSSmart<CJSValue> CGraphicsEmbed::get_LineJoin()",
          "533: {",
          "535: }",
          "536: JSSmart<CJSValue> CGraphicsEmbed::put_TextureBounds(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h)",
          "537: {",
          "540: }",
          "541: JSSmart<CJSValue> CGraphicsEmbed::GetlineWidth()",
          "542: {",
          "544: }",
          "545: JSSmart<CJSValue> CGraphicsEmbed::DrawPath(JSSmart<CJSValue> path)",
          "546: {",
          "549: }",
          "550: JSSmart<CJSValue> CGraphicsEmbed::CoordTransformOffset(JSSmart<CJSValue> tx, JSSmart<CJSValue> ty)",
          "551: {",
          "554: }",
          "555: JSSmart<CJSValue> CGraphicsEmbed::GetTransform()",
          "556: {",
          "566: }",
          "",
          "[Removed Lines]",
          "5:     m_pInternal->init((NSNativeControl::CNativeControl*)Native->toObjectSmart()->getNative()->getObject(), width_px->toDouble(), height_px->toDouble(), width_mm->toDouble(), height_mm->toDouble());",
          "6:     return NULL;",
          "10:     m_pInternal->Destroy();",
          "11:     return NULL;",
          "15:     m_pInternal->EndDraw();",
          "16:     return NULL;",
          "20:     m_pInternal->put_GlobalAlpha(enable->toBool(), globalAlpha->toDouble());",
          "21:     return NULL;",
          "25:     m_pInternal->Start_GlobalAlpha();",
          "26:     return NULL;",
          "30:     m_pInternal->End_GlobalAlpha();",
          "31:     return NULL;",
          "35:     m_pInternal->p_color(r->toInt32(), g->toInt32(), b->toInt32(), a->toInt32());",
          "36:     return NULL;",
          "40:     m_pInternal->p_width(w->toDouble());",
          "41:     return NULL;",
          "45:     JSSmart<CJSArray> items = params->toArray();",
          "46:     size_t length = items->getCount();",
          "47:     double* dash = NULL;",
          "48:     if(length > 0)",
          "49:         dash = new double[length];",
          "50:     for(size_t i = 0; i < length; i++)",
          "51:         dash[i] = items->get(i)->toDouble();",
          "52:     m_pInternal->p_dash(length, dash);",
          "53:     RELEASEARRAYOBJECTS(dash);",
          "54:     return NULL;",
          "58:     m_pInternal->b_color1(r->toInt32(), g->toInt32(), b->toInt32(), a->toInt32());",
          "59:     return NULL;",
          "63:     m_pInternal->b_color2(r->toInt32(), g->toInt32(), b->toInt32(), a->toInt32());",
          "64:     return NULL;",
          "68:     m_pInternal->transform(sx->toDouble(), shy->toDouble(), shx->toDouble(), sy->toDouble(), tx->toDouble(), ty->toDouble());",
          "69:     return NULL;",
          "73:     m_pInternal->CalculateFullTransform();",
          "74:     return NULL;",
          "78:     m_pInternal->_s();",
          "79:     return NULL;",
          "83:     m_pInternal->_e();",
          "84:     return NULL;",
          "88:     m_pInternal->_z();",
          "89:     return NULL;",
          "93:     m_pInternal->_m(x->toDouble(), y->toDouble());",
          "94:     return NULL;",
          "98:     m_pInternal->_l(x->toDouble(), y->toDouble());",
          "99:     return NULL;",
          "103:     m_pInternal->_c(x1->toDouble(), y1->toDouble(), x2->toDouble(), y2->toDouble(), x3->toDouble(), y3->toDouble());",
          "104:     return NULL;",
          "108:     m_pInternal->_c2(x1->toDouble(), y1->toDouble(), x2->toDouble(), y2->toDouble());",
          "109:     return NULL;",
          "113:     m_pInternal->ds();",
          "114:     return NULL;",
          "118:     m_pInternal->df();",
          "119:     return NULL;",
          "123:     m_pInternal->save();",
          "124:     return NULL;",
          "128:     m_pInternal->restore();",
          "129:     return NULL;",
          "133:     m_pInternal->clip();",
          "134:     return NULL;",
          "138:     m_pInternal->reset();",
          "139:     return NULL;",
          "143:     m_pInternal->FreeFont();",
          "144:     return NULL;",
          "148:     m_pInternal->ClearLastFont();",
          "149:     return NULL;",
          "153:     m_pInternal->drawImage(img->toStringW(), x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble(), alpha->toInt32());",
          "154:     return NULL;",
          "158:     m_pInternal->drawImage(img->toStringW(), x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble(), alpha->toInt32());",
          "159:     return NULL;",
          "163:     return CJSContext::createString(m_pInternal->GetFont());",
          "167:     m_pInternal->font();",
          "168:     return NULL;",
          "172:     m_pInternal->SetFont(path->toStringW(), face->toInt32(), size->toDouble(), style->toInt32());",
          "173:     return NULL;",
          "177:     m_pInternal->GetTextPr();",
          "178:     return NULL;",
          "182:     m_pInternal->FillText(x->toDouble(), y->toDouble(), text->toInt32());",
          "183:     return NULL;",
          "187:     m_pInternal->t(x->toDouble(), y->toDouble(), _arr->toStringW());",
          "188:     return NULL;",
          "192:     m_pInternal->FillText(x->toDouble(), y->toDouble(), text->toInt32());",
          "193:     return NULL;",
          "197:     m_pInternal->t(x->toDouble(), y->toDouble(), _arr->toStringW());",
          "198:     return NULL;",
          "202:     m_pInternal->FillText(x->toDouble(), y->toDouble(), lUnicode->toInt32());",
          "203:     return NULL;",
          "207:     m_pInternal->tg(text->toInt32(), x->toDouble(), y->toDouble());",
          "208:     return NULL;",
          "212:     m_pInternal->charspace();",
          "213:     return NULL;",
          "217:     m_pInternal->private_FillGlyph();",
          "218:     return NULL;",
          "222:     m_pInternal->private_FillGlyphC();",
          "223:     return NULL;",
          "227:     m_pInternal->private_FillGlyph2();",
          "228:     return NULL;",
          "232:     m_pInternal->SetIntegerGrid(param->toBool());",
          "233:     return NULL;",
          "237:     return CJSContext::createBool(m_pInternal->GetIntegerGrid());",
          "241:     m_pInternal->DrawStringASCII(text->toStringW(), x->toDouble(), y->toDouble());",
          "242:     return NULL;",
          "246:     m_pInternal->DrawStringASCII(text->toStringW(), x->toDouble(), y->toDouble());",
          "247:     return NULL;",
          "251:     m_pInternal->DrawHeaderEdit(yPos->toDouble());",
          "252:     return NULL;",
          "256:     m_pInternal->DrawFooterEdit(yPos->toDouble());",
          "257:     return NULL;",
          "261:     m_pInternal->DrawLockParagraph(x->toDouble(), y1->toDouble(), y2->toDouble());",
          "262:     return NULL;",
          "266:     m_pInternal->DrawLockObjectRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "267:     return NULL;",
          "271:     m_pInternal->DrawEmptyTableLine(x1->toDouble(), y1->toDouble(), x2->toDouble(), y2->toDouble());",
          "272:     return NULL;",
          "276:     m_pInternal->DrawSpellingLine(y0->toDouble(), x0->toDouble(), x1->toDouble(), w->toDouble());",
          "277:     return NULL;",
          "281:     m_pInternal->drawHorLine(align->toInt32(), y->toDouble(), x->toDouble(), r->toDouble(), penW->toDouble());",
          "282:     return NULL;",
          "286:     m_pInternal->drawHorLine2(align->toInt32(), y->toDouble(), x->toDouble(), r->toDouble(), penW->toDouble());",
          "287:     return NULL;",
          "291:     m_pInternal->drawVerLine(align->toInt32(), x->toDouble(), y->toDouble(), b->toDouble(), penW->toDouble());",
          "292:     return NULL;",
          "296:     m_pInternal->drawHorLineExt(align->toInt32(), y->toDouble(), x->toDouble(), r->toDouble(), penW->toDouble(), leftMW->toDouble(), rightMW->toDouble());",
          "297:     return NULL;",
          "301:     m_pInternal->rect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "302:     return NULL;",
          "306:     m_pInternal->TableRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "307:     return NULL;",
          "311:     m_pInternal->AddClipRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "312:     return NULL;",
          "316:     m_pInternal->RemoveClipRect();",
          "317:     return NULL;",
          "321:     m_pInternal->SetClip(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "322:     return NULL;",
          "326:     m_pInternal->restore();",
          "327:     return NULL;",
          "331:     m_pInternal->drawMailMergeField(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "332:     return NULL;",
          "336:     m_pInternal->drawSearchResult(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "337:     return NULL;",
          "341:     return NULL;",
          "345:     m_pInternal->SavePen();",
          "346:     return NULL;",
          "350:     m_pInternal->RestorePen();",
          "351:     return NULL;",
          "355:     m_pInternal->SaveBrush();",
          "356:     return NULL;",
          "360:     m_pInternal->RestoreBrush();",
          "361:     return NULL;",
          "365:     m_pInternal->SavePenBrush();",
          "366:     return NULL;",
          "370:     m_pInternal->RestorePenBrush();",
          "371:     return NULL;",
          "375:     m_pInternal->SaveGrState();",
          "376:     return NULL;",
          "380:     m_pInternal->RestoreGrState();",
          "381:     return NULL;",
          "385:     m_pInternal->StartClipPath();",
          "386:     return NULL;",
          "390:     m_pInternal->EndClipPath();",
          "391:     return NULL;",
          "395:     return CJSContext::createBool(m_pInternal->StartCheckTableDraw());",
          "399:     m_pInternal->SetTextClipRect(_l->toDouble(), _t->toDouble(), _r->toDouble(), _b->toDouble());",
          "400:     return NULL;",
          "404:     m_pInternal->rect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "405:     return NULL;",
          "409:     return NULL;",
          "413:     return NULL;",
          "417:     return NULL;",
          "421:     return NULL;",
          "425:     return NULL;",
          "429:     return NULL;",
          "433:     m_pInternal->DrawFootnoteRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "434:     return NULL;",
          "438:     return CJSContext::createString(m_pInternal->toDataURL(type->toStringW()));",
          "442:     JSSmart<CJSObject> e = CJSContext::createObject();",
          "443:     NSGraphics::CColor res = m_pInternal->GetPenColor();",
          "444:     e->set(\"R\", res.r);",
          "445:     e->set(\"G\", res.g);",
          "446:     e->set(\"B\", res.b);",
          "447:     e->set(\"A\", res.a);",
          "448:     return e->toValue();",
          "452:     JSSmart<CJSObject> e = CJSContext::createObject();",
          "453:     NSGraphics::CColor res = m_pInternal->GetBrushColor();",
          "454:     e->set(\"R\", res.r);",
          "455:     e->set(\"G\", res.g);",
          "456:     e->set(\"B\", res.b);",
          "457:     e->set(\"A\", res.a);",
          "458:     return e->toValue();",
          "462:     m_pInternal->put_brushTexture(src->toStringW(), type->toInt32());",
          "463:     return NULL;",
          "467:     m_pInternal->put_brushTextureMode(mode->toInt32());",
          "468:     return NULL;",
          "472:     m_pInternal->put_BrushTextureAlpha(a->toInt32());",
          "473:     return NULL;",
          "477:     JSSmart<CJSArray> items = colors->toArray();",
          "478:     size_t length = items->getCount() / 5;",
          "479:     LONG* color = NULL;",
          "480:     double* pos = NULL;",
          "481:     if (length > 0)",
          "482:     {",
          "483:         color = new LONG[length];",
          "484:         pos = new double[length];",
          "485:     }",
          "486:     LONG R, G, B, A;",
          "487:     for (size_t i = 0; i < 5 * length; i++)",
          "488:     {",
          "489:         JSSmart<CJSValue> item = items->get(i);",
          "490:         size_t nDel = i % 5;",
          "491:         switch (nDel)",
          "492:         {",
          "493:         case 0: pos[i / 5] = item->toDouble() / 100000.0; break;",
          "494:         case 1: R = item->toInt32(); break;",
          "495:         case 2: G = item->toInt32(); break;",
          "496:         case 3: B = item->toInt32(); break;",
          "497:         case 4:",
          "498:             A = item->toInt32();",
          "499:             if (!transparent->isNull())",
          "500:                 A = transparent->toInt32();",
          "501:             color[i / 5] = R | (G << 8) | (B << 16) | (A << 24);",
          "502:             break;",
          "503:         }",
          "504:     }",
          "506:     double _x0 = x0->toDouble() / 100000.0;",
          "507:     double _y0 = y0->toDouble() / 100000.0;",
          "508:     double _x1 = x1->toDouble() / 100000.0;",
          "509:     double _y1 = y1->toDouble() / 100000.0;",
          "510:     double _r0 = r0->toDouble() / 100000.0;",
          "511:     double _r1 = r1->toDouble() / 100000.0;",
          "513:     m_pInternal->put_BrushGradient(color, pos, length, _x0, _y0, _x1, _y1, _r0, _r1);",
          "515:     RELEASEARRAYOBJECTS(color);",
          "516:     RELEASEARRAYOBJECTS(pos);",
          "517:     return NULL;",
          "521:     return CJSContext::createDouble(m_pInternal->TransformPointX(x->toDouble(), y->toDouble()));",
          "525:     return CJSContext::createDouble(m_pInternal->TransformPointY(x->toDouble(), y->toDouble()));",
          "529:     m_pInternal->put_LineJoin(join->toInt32());",
          "530:     return NULL;",
          "534:     return CJSContext::createInt(m_pInternal->GetLineJoin());",
          "538:     m_pInternal->put_TextureBounds(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "539:     return NULL;",
          "543:     return CJSContext::createDouble(m_pInternal->GetlineWidth());",
          "547:     m_pInternal->DrawPath(path->toInt32());",
          "548:     return NULL;",
          "552:     m_pInternal->CoordTransformOffset(tx->toDouble(), ty->toDouble());",
          "553:     return NULL;",
          "557:     JSSmart<CJSObject> e = CJSContext::createObject();",
          "558:     NSGraphics::CTransform res = m_pInternal->GetTransform();",
          "559:     e->set(\"sx\",  res.sx);",
          "560:     e->set(\"shx\", res.shx);",
          "561:     e->set(\"shy\", res.shy);",
          "562:     e->set(\"sy\",  res.sy);",
          "563:     e->set(\"tx\",  res.tx);",
          "564:     e->set(\"ty\",  res.ty);",
          "565:     return e->toValue();",
          "",
          "[Added Lines]",
          "5:  m_pInternal->init((NSNativeControl::CNativeControl*)Native->toObjectSmart()->getNative()->getObject(), width_px->toDouble(), height_px->toDouble(), width_mm->toDouble(), height_mm->toDouble());",
          "6:  return NULL;",
          "10:  m_pInternal->Destroy();",
          "11:  return NULL;",
          "15:  m_pInternal->EndDraw();",
          "16:  return NULL;",
          "20:  m_pInternal->put_GlobalAlpha(enable->toBool(), globalAlpha->toDouble());",
          "21:  return NULL;",
          "25:  m_pInternal->Start_GlobalAlpha();",
          "26:  return NULL;",
          "30:  m_pInternal->End_GlobalAlpha();",
          "31:  return NULL;",
          "35:  m_pInternal->p_color(r->toInt32(), g->toInt32(), b->toInt32(), a->toInt32());",
          "36:  return NULL;",
          "40:  m_pInternal->p_width(w->toDouble());",
          "41:  return NULL;",
          "45:  JSSmart<CJSArray> items = params->toArray();",
          "46:  size_t length = items->getCount();",
          "47:  double* dash = NULL;",
          "48:  if(length > 0)",
          "49:   dash = new double[length];",
          "50:  for(size_t i = 0; i < length; i++)",
          "51:   dash[i] = items->get(i)->toDouble();",
          "52:  m_pInternal->p_dash(length, dash);",
          "53:  RELEASEARRAYOBJECTS(dash);",
          "54:  return NULL;",
          "58:  m_pInternal->b_color1(r->toInt32(), g->toInt32(), b->toInt32(), a->toInt32());",
          "59:  return NULL;",
          "63:  m_pInternal->b_color2(r->toInt32(), g->toInt32(), b->toInt32(), a->toInt32());",
          "64:  return NULL;",
          "68:  m_pInternal->transform(sx->toDouble(), shy->toDouble(), shx->toDouble(), sy->toDouble(), tx->toDouble(), ty->toDouble());",
          "69:  return NULL;",
          "73:  m_pInternal->CalculateFullTransform();",
          "74:  return NULL;",
          "78:  m_pInternal->_s();",
          "79:  return NULL;",
          "83:  m_pInternal->_e();",
          "84:  return NULL;",
          "88:  m_pInternal->_z();",
          "89:  return NULL;",
          "93:  m_pInternal->_m(x->toDouble(), y->toDouble());",
          "94:  return NULL;",
          "98:  m_pInternal->_l(x->toDouble(), y->toDouble());",
          "99:  return NULL;",
          "103:  m_pInternal->_c(x1->toDouble(), y1->toDouble(), x2->toDouble(), y2->toDouble(), x3->toDouble(), y3->toDouble());",
          "104:  return NULL;",
          "108:  m_pInternal->_c2(x1->toDouble(), y1->toDouble(), x2->toDouble(), y2->toDouble());",
          "109:  return NULL;",
          "113:  m_pInternal->ds();",
          "114:  return NULL;",
          "118:  m_pInternal->df();",
          "119:  return NULL;",
          "123:  m_pInternal->save();",
          "124:  return NULL;",
          "128:  m_pInternal->restore();",
          "129:  return NULL;",
          "133:  m_pInternal->clip();",
          "134:  return NULL;",
          "138:  m_pInternal->reset();",
          "139:  return NULL;",
          "143:  m_pInternal->FreeFont();",
          "144:  return NULL;",
          "148:  m_pInternal->ClearLastFont();",
          "149:  return NULL;",
          "153:  m_pInternal->drawImage(img->toStringW(), x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble(), alpha->toInt32());",
          "154:  return NULL;",
          "158:  m_pInternal->drawImage(img->toStringW(), x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble(), alpha->toInt32());",
          "159:  return NULL;",
          "163:  return CJSContext::createString(m_pInternal->GetFont());",
          "167:  m_pInternal->font();",
          "168:  return NULL;",
          "172:  m_pInternal->SetFont(path->toStringW(), face->toInt32(), size->toDouble(), style->toInt32());",
          "173:  return NULL;",
          "177:  m_pInternal->GetTextPr();",
          "178:  return NULL;",
          "182:  m_pInternal->FillText(x->toDouble(), y->toDouble(), text->toInt32());",
          "183:  return NULL;",
          "187:  m_pInternal->t(x->toDouble(), y->toDouble(), _arr->toStringW());",
          "188:  return NULL;",
          "192:  m_pInternal->FillText(x->toDouble(), y->toDouble(), text->toInt32());",
          "193:  return NULL;",
          "197:  m_pInternal->t(x->toDouble(), y->toDouble(), _arr->toStringW());",
          "198:  return NULL;",
          "202:  m_pInternal->FillText(x->toDouble(), y->toDouble(), lUnicode->toInt32());",
          "203:  return NULL;",
          "207:  m_pInternal->tg(text->toInt32(), x->toDouble(), y->toDouble());",
          "208:  return NULL;",
          "212:  m_pInternal->charspace();",
          "213:  return NULL;",
          "217:  m_pInternal->private_FillGlyph();",
          "218:  return NULL;",
          "222:  m_pInternal->private_FillGlyphC();",
          "223:  return NULL;",
          "227:  m_pInternal->private_FillGlyph2();",
          "228:  return NULL;",
          "232:  m_pInternal->SetIntegerGrid(param->toBool());",
          "233:  return NULL;",
          "237:  return CJSContext::createBool(m_pInternal->GetIntegerGrid());",
          "241:  m_pInternal->DrawStringASCII(text->toStringW(), x->toDouble(), y->toDouble());",
          "242:  return NULL;",
          "246:  m_pInternal->DrawStringASCII(text->toStringW(), x->toDouble(), y->toDouble());",
          "247:  return NULL;",
          "251:  m_pInternal->DrawHeaderEdit(yPos->toDouble());",
          "252:  return NULL;",
          "256:  m_pInternal->DrawFooterEdit(yPos->toDouble());",
          "257:  return NULL;",
          "261:  m_pInternal->DrawLockParagraph(x->toDouble(), y1->toDouble(), y2->toDouble());",
          "262:  return NULL;",
          "266:  m_pInternal->DrawLockObjectRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "267:  return NULL;",
          "271:  m_pInternal->DrawEmptyTableLine(x1->toDouble(), y1->toDouble(), x2->toDouble(), y2->toDouble());",
          "272:  return NULL;",
          "276:  m_pInternal->DrawSpellingLine(y0->toDouble(), x0->toDouble(), x1->toDouble(), w->toDouble());",
          "277:  return NULL;",
          "281:  m_pInternal->drawHorLine(align->toInt32(), y->toDouble(), x->toDouble(), r->toDouble(), penW->toDouble());",
          "282:  return NULL;",
          "286:  m_pInternal->drawHorLine2(align->toInt32(), y->toDouble(), x->toDouble(), r->toDouble(), penW->toDouble());",
          "287:  return NULL;",
          "291:  m_pInternal->drawVerLine(align->toInt32(), x->toDouble(), y->toDouble(), b->toDouble(), penW->toDouble());",
          "292:  return NULL;",
          "296:  m_pInternal->drawHorLineExt(align->toInt32(), y->toDouble(), x->toDouble(), r->toDouble(), penW->toDouble(), leftMW->toDouble(), rightMW->toDouble());",
          "297:  return NULL;",
          "301:  m_pInternal->rect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "302:  return NULL;",
          "306:  m_pInternal->TableRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "307:  return NULL;",
          "311:  m_pInternal->AddClipRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "312:  return NULL;",
          "316:  m_pInternal->RemoveClipRect();",
          "317:  return NULL;",
          "321:  m_pInternal->SetClip(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "322:  return NULL;",
          "326:  m_pInternal->restore();",
          "327:  return NULL;",
          "331:  m_pInternal->drawMailMergeField(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "332:  return NULL;",
          "336:  m_pInternal->drawSearchResult(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "337:  return NULL;",
          "341:  return NULL;",
          "345:  m_pInternal->SavePen();",
          "346:  return NULL;",
          "350:  m_pInternal->RestorePen();",
          "351:  return NULL;",
          "355:  m_pInternal->SaveBrush();",
          "356:  return NULL;",
          "360:  m_pInternal->RestoreBrush();",
          "361:  return NULL;",
          "365:  m_pInternal->SavePenBrush();",
          "366:  return NULL;",
          "370:  m_pInternal->RestorePenBrush();",
          "371:  return NULL;",
          "375:  m_pInternal->SaveGrState();",
          "376:  return NULL;",
          "380:  m_pInternal->RestoreGrState();",
          "381:  return NULL;",
          "385:  m_pInternal->StartClipPath();",
          "386:  return NULL;",
          "390:  m_pInternal->EndClipPath();",
          "391:  return NULL;",
          "395:  return CJSContext::createBool(m_pInternal->StartCheckTableDraw());",
          "399:  m_pInternal->SetTextClipRect(_l->toDouble(), _t->toDouble(), _r->toDouble(), _b->toDouble());",
          "400:  return NULL;",
          "404:  m_pInternal->rect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "405:  return NULL;",
          "409:  return NULL;",
          "413:  return NULL;",
          "417:  return NULL;",
          "421:  return NULL;",
          "425:  return NULL;",
          "429:  return NULL;",
          "433:  m_pInternal->DrawFootnoteRect(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "434:  return NULL;",
          "438:  return CJSContext::createString(m_pInternal->toDataURL(type->toStringW()));",
          "442:  JSSmart<CJSObject> e = CJSContext::createObject();",
          "443:  NSGraphics::CColor res = m_pInternal->GetPenColor();",
          "444:  e->set(\"R\", res.r);",
          "445:  e->set(\"G\", res.g);",
          "446:  e->set(\"B\", res.b);",
          "447:  e->set(\"A\", res.a);",
          "448:  return e->toValue();",
          "452:  JSSmart<CJSObject> e = CJSContext::createObject();",
          "453:  NSGraphics::CColor res = m_pInternal->GetBrushColor();",
          "454:  e->set(\"R\", res.r);",
          "455:  e->set(\"G\", res.g);",
          "456:  e->set(\"B\", res.b);",
          "457:  e->set(\"A\", res.a);",
          "458:  return e->toValue();",
          "462:  m_pInternal->put_brushTexture(src->toStringW(), type->toInt32());",
          "463:  return NULL;",
          "467:  m_pInternal->put_brushTextureMode(mode->toInt32());",
          "468:  return NULL;",
          "472:  m_pInternal->put_BrushTextureAlpha(a->toInt32());",
          "473:  return NULL;",
          "477:  JSSmart<CJSArray> items = colors->toArray();",
          "478:  size_t length = items->getCount() / 5;",
          "479:  LONG* color = NULL;",
          "480:  double* pos = NULL;",
          "481:  if (length > 0)",
          "482:  {",
          "483:   color = new LONG[length];",
          "484:   pos = new double[length];",
          "485:  }",
          "486:  LONG R, G, B, A;",
          "487:  for (size_t i = 0; i < 5 * length; i++)",
          "488:  {",
          "489:   JSSmart<CJSValue> item = items->get(i);",
          "490:   size_t nDel = i % 5;",
          "491:   switch (nDel)",
          "492:   {",
          "493:   case 0: pos[i / 5] = item->toDouble() / 100000.0; break;",
          "494:   case 1: R = item->toInt32(); break;",
          "495:   case 2: G = item->toInt32(); break;",
          "496:   case 3: B = item->toInt32(); break;",
          "497:   case 4:",
          "498:    A = item->toInt32();",
          "499:    if (!transparent->isNull())",
          "500:     A = transparent->toInt32();",
          "501:    color[i / 5] = R | (G << 8) | (B << 16) | (A << 24);",
          "502:    break;",
          "503:   }",
          "504:  }",
          "506:  double _x0 = x0->toDouble() / 100000.0;",
          "507:  double _y0 = y0->toDouble() / 100000.0;",
          "508:  double _x1 = x1->toDouble() / 100000.0;",
          "509:  double _y1 = y1->toDouble() / 100000.0;",
          "510:  double _r0 = r0->toDouble() / 100000.0;",
          "511:  double _r1 = r1->toDouble() / 100000.0;",
          "513:  m_pInternal->put_BrushGradient(color, pos, length, _x0, _y0, _x1, _y1, _r0, _r1);",
          "515:  RELEASEARRAYOBJECTS(color);",
          "516:  RELEASEARRAYOBJECTS(pos);",
          "517:  return NULL;",
          "521:  return CJSContext::createDouble(m_pInternal->TransformPointX(x->toDouble(), y->toDouble()));",
          "525:  return CJSContext::createDouble(m_pInternal->TransformPointY(x->toDouble(), y->toDouble()));",
          "529:  m_pInternal->put_LineJoin(join->toInt32());",
          "530:  return NULL;",
          "534:  return CJSContext::createInt(m_pInternal->GetLineJoin());",
          "538:  m_pInternal->put_TextureBounds(x->toDouble(), y->toDouble(), w->toDouble(), h->toDouble());",
          "539:  return NULL;",
          "543:  return CJSContext::createDouble(m_pInternal->GetlineWidth());",
          "547:  m_pInternal->DrawPath(path->toInt32());",
          "548:  return NULL;",
          "552:  m_pInternal->CoordTransformOffset(tx->toDouble(), ty->toDouble());",
          "553:  return NULL;",
          "557:  JSSmart<CJSObject> e = CJSContext::createObject();",
          "558:  NSGraphics::CTransform res = m_pInternal->GetTransform();",
          "559:  e->set(\"sx\",  res.sx);",
          "560:  e->set(\"shx\", res.shx);",
          "561:  e->set(\"shy\", res.shy);",
          "562:  e->set(\"sy\",  res.sy);",
          "563:  e->set(\"tx\",  res.tx);",
          "564:  e->set(\"ty\",  res.ty);",
          "565:  return e->toValue();",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/GraphicsEmbed.h||DesktopEditor/doctrenderer/embed/GraphicsEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/GraphicsEmbed.h -> DesktopEditor/doctrenderer/embed/GraphicsEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: class CGraphicsEmbed : public CJSEmbedObject",
          "9: {",
          "10: public:",
          "13: public:",
          "19: public:",
          "136: };",
          "138: #endif // _BUILD_NATIVE_GRAPHICS_EMBED_H_",
          "",
          "[Removed Lines]",
          "11:     NSGraphics::CGraphics* m_pInternal;",
          "14:     CGraphicsEmbed() : m_pInternal(new NSGraphics::CGraphics()) {}",
          "15:     ~CGraphicsEmbed() { RELEASEOBJECT(m_pInternal); }",
          "17:     virtual void* getObject() override { return (void*)m_pInternal; }",
          "20:     JSSmart<CJSValue> init(JSSmart<CJSValue> Native, JSSmart<CJSValue> width_px, JSSmart<CJSValue> height_px, JSSmart<CJSValue> width_mm, JSSmart<CJSValue> height_mm);",
          "21:     JSSmart<CJSValue> Destroy();",
          "22:     JSSmart<CJSValue> EndDraw();",
          "23:     JSSmart<CJSValue> put_GlobalAlpha(JSSmart<CJSValue> enable, JSSmart<CJSValue> globalAlpha);",
          "24:     JSSmart<CJSValue> Start_GlobalAlpha();",
          "25:     JSSmart<CJSValue> End_GlobalAlpha();",
          "27:     JSSmart<CJSValue> p_color(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a);",
          "28:     JSSmart<CJSValue> p_width(JSSmart<CJSValue> w);",
          "29:     JSSmart<CJSValue> p_dash(JSSmart<CJSValue> params);",
          "31:     JSSmart<CJSValue> b_color1(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a);",
          "32:     JSSmart<CJSValue> b_color2(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a);",
          "33:     JSSmart<CJSValue> transform(JSSmart<CJSValue> sx, JSSmart<CJSValue> shy, JSSmart<CJSValue> shx, JSSmart<CJSValue> sy, JSSmart<CJSValue> tx, JSSmart<CJSValue> ty);",
          "34:     JSSmart<CJSValue> CalculateFullTransform(JSSmart<CJSValue> isInvertNeed);",
          "36:     JSSmart<CJSValue> _s();",
          "37:     JSSmart<CJSValue> _e();",
          "38:     JSSmart<CJSValue> _z();",
          "39:     JSSmart<CJSValue> _m (JSSmart<CJSValue> x,  JSSmart<CJSValue> y);",
          "40:     JSSmart<CJSValue> _l (JSSmart<CJSValue> x,  JSSmart<CJSValue> y);",
          "41:     JSSmart<CJSValue> _c (JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2, JSSmart<CJSValue> x3, JSSmart<CJSValue> y3);",
          "42:     JSSmart<CJSValue> _c2(JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2);",
          "43:     JSSmart<CJSValue> ds();",
          "44:     JSSmart<CJSValue> df();",
          "46:     JSSmart<CJSValue> save();",
          "47:     JSSmart<CJSValue> restore();",
          "48:     JSSmart<CJSValue> clip();",
          "49:     JSSmart<CJSValue> reset();",
          "50:     JSSmart<CJSValue> FreeFont();",
          "51:     JSSmart<CJSValue> ClearLastFont();",
          "53:     JSSmart<CJSValue> drawImage2(JSSmart<CJSValue> img, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h, JSSmart<CJSValue> alpha, JSSmart<CJSValue> srcRect);",
          "54:     JSSmart<CJSValue> drawImage (JSSmart<CJSValue> img, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h, JSSmart<CJSValue> alpha, JSSmart<CJSValue> srcRect, JSSmart<CJSValue> nativeImage);",
          "56:     JSSmart<CJSValue> GetFont();",
          "57:     JSSmart<CJSValue> font(JSSmart<CJSValue> font_id, JSSmart<CJSValue> font_size);",
          "58:     JSSmart<CJSValue> SetFont(JSSmart<CJSValue> path, JSSmart<CJSValue> face, JSSmart<CJSValue> size, JSSmart<CJSValue> style);",
          "59:     JSSmart<CJSValue> GetTextPr();",
          "60:     JSSmart<CJSValue> FillText(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> text);",
          "61:     JSSmart<CJSValue> t(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> _arr);",
          "62:     JSSmart<CJSValue> FillText2(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> text, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW);",
          "63:     JSSmart<CJSValue> t2(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW);",
          "64:     JSSmart<CJSValue> FillTextCode(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> lUnicode);",
          "65:     JSSmart<CJSValue> tg(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "66:     JSSmart<CJSValue> charspace(JSSmart<CJSValue> space);",
          "68:     JSSmart<CJSValue> private_FillGlyph (JSSmart<CJSValue> pGlyph, JSSmart<CJSValue> _bounds);",
          "69:     JSSmart<CJSValue> private_FillGlyphC(JSSmart<CJSValue> pGlyph, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW);",
          "70:     JSSmart<CJSValue> private_FillGlyph2(JSSmart<CJSValue> pGlyph);",
          "71:     JSSmart<CJSValue> SetIntegerGrid(JSSmart<CJSValue> param);",
          "72:     JSSmart<CJSValue> GetIntegerGrid();",
          "73:     JSSmart<CJSValue> DrawStringASCII (JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "74:     JSSmart<CJSValue> DrawStringASCII2(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "75:     JSSmart<CJSValue> DrawHeaderEdit(JSSmart<CJSValue> yPos, JSSmart<CJSValue> lock_type, JSSmart<CJSValue> sectionNum, JSSmart<CJSValue> bIsRepeat, JSSmart<CJSValue> type);",
          "76:     JSSmart<CJSValue> DrawFooterEdit(JSSmart<CJSValue> yPos, JSSmart<CJSValue> lock_type, JSSmart<CJSValue> sectionNum, JSSmart<CJSValue> bIsRepeat, JSSmart<CJSValue> type);",
          "77:     JSSmart<CJSValue> DrawLockParagraph (JSSmart<CJSValue> x, JSSmart<CJSValue> y1, JSSmart<CJSValue> y2);",
          "78:     JSSmart<CJSValue> DrawLockObjectRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y,  JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "79:     JSSmart<CJSValue> DrawEmptyTableLine(JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2);",
          "80:     JSSmart<CJSValue> DrawSpellingLine  (JSSmart<CJSValue> y0, JSSmart<CJSValue> x0, JSSmart<CJSValue> x1, JSSmart<CJSValue> w);",
          "82:     JSSmart<CJSValue> drawHorLine (JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW);",
          "83:     JSSmart<CJSValue> drawHorLine2(JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW);",
          "84:     JSSmart<CJSValue> drawVerLine (JSSmart<CJSValue> align, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> b, JSSmart<CJSValue> penW);",
          "86:     JSSmart<CJSValue> drawHorLineExt(JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW, JSSmart<CJSValue> leftMW, JSSmart<CJSValue> rightMW);",
          "87:     JSSmart<CJSValue> rect     (JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "88:     JSSmart<CJSValue> TableRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "90:     JSSmart<CJSValue> AddClipRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "91:     JSSmart<CJSValue> RemoveClipRect();",
          "92:     JSSmart<CJSValue> SetClip(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "93:     JSSmart<CJSValue> RemoveClip();",
          "94:     JSSmart<CJSValue> drawMailMergeField(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "95:     JSSmart<CJSValue> drawSearchResult  (JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "96:     JSSmart<CJSValue> drawFlowAnchor    (JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "97:     JSSmart<CJSValue> SavePen();",
          "98:     JSSmart<CJSValue> RestorePen();",
          "99:     JSSmart<CJSValue> SaveBrush();",
          "100:     JSSmart<CJSValue> RestoreBrush();",
          "101:     JSSmart<CJSValue> SavePenBrush();",
          "102:     JSSmart<CJSValue> RestorePenBrush();",
          "103:     JSSmart<CJSValue> SaveGrState();",
          "104:     JSSmart<CJSValue> RestoreGrState();",
          "105:     JSSmart<CJSValue> StartClipPath();",
          "106:     JSSmart<CJSValue> EndClipPath();",
          "107:     JSSmart<CJSValue> StartCheckTableDraw();",
          "108:     JSSmart<CJSValue> SetTextClipRect(JSSmart<CJSValue> _l, JSSmart<CJSValue> _t, JSSmart<CJSValue> _r, JSSmart<CJSValue> _b);",
          "109:     JSSmart<CJSValue> AddSmartRect   (JSSmart<CJSValue> x,  JSSmart<CJSValue> y,  JSSmart<CJSValue> w,  JSSmart<CJSValue> h, JSSmart<CJSValue> pen_w);",
          "110:     JSSmart<CJSValue> CheckUseFonts2 (JSSmart<CJSValue> _transform);",
          "111:     JSSmart<CJSValue> UncheckUseFonts2();",
          "112:     JSSmart<CJSValue> Drawing_StartCheckBounds(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "113:     JSSmart<CJSValue> Drawing_EndCheckBounds();",
          "114:     JSSmart<CJSValue> DrawPresentationComment(JSSmart<CJSValue> type, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "115:     JSSmart<CJSValue> DrawPolygon(JSSmart<CJSValue> oPath, JSSmart<CJSValue> lineWidth, JSSmart<CJSValue> shift);",
          "116:     JSSmart<CJSValue> DrawFootnoteRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "118:     JSSmart<CJSValue> toDataURL(JSSmart<CJSValue> type);",
          "119:     JSSmart<CJSValue> GetPenColor();",
          "120:     JSSmart<CJSValue> GetBrushColor();",
          "121:     JSSmart<CJSValue> put_brushTexture(JSSmart<CJSValue> src, JSSmart<CJSValue> type);",
          "122:     JSSmart<CJSValue> put_brushTextureMode(JSSmart<CJSValue> mode);",
          "123:     JSSmart<CJSValue> put_BrushTextureAlpha(JSSmart<CJSValue> a);",
          "124:     JSSmart<CJSValue> put_BrushGradient(JSSmart<CJSValue> colors, JSSmart<CJSValue> n, JSSmart<CJSValue> x0, JSSmart<CJSValue> y0, JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> r0, JSSmart<CJSValue> r1);",
          "125:     JSSmart<CJSValue> TransformPointX(JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "126:     JSSmart<CJSValue> TransformPointY(JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "127:     JSSmart<CJSValue> put_LineJoin(JSSmart<CJSValue> join);",
          "128:     JSSmart<CJSValue> get_LineJoin();",
          "129:     JSSmart<CJSValue> put_TextureBounds(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "130:     JSSmart<CJSValue> GetlineWidth();",
          "131:     JSSmart<CJSValue> DrawPath(JSSmart<CJSValue> path);",
          "132:     JSSmart<CJSValue> CoordTransformOffset(JSSmart<CJSValue> tx, JSSmart<CJSValue> ty);",
          "133:     JSSmart<CJSValue> GetTransform();",
          "135:     static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "[Added Lines]",
          "11:  NSGraphics::CGraphics* m_pInternal;",
          "14:  CGraphicsEmbed() : m_pInternal(new NSGraphics::CGraphics()) {}",
          "15:  ~CGraphicsEmbed() { RELEASEOBJECT(m_pInternal); }",
          "17:  virtual void* getObject() override { return (void*)m_pInternal; }",
          "20:  JSSmart<CJSValue> init(JSSmart<CJSValue> Native, JSSmart<CJSValue> width_px, JSSmart<CJSValue> height_px, JSSmart<CJSValue> width_mm, JSSmart<CJSValue> height_mm);",
          "21:  JSSmart<CJSValue> Destroy();",
          "22:  JSSmart<CJSValue> EndDraw();",
          "23:  JSSmart<CJSValue> put_GlobalAlpha(JSSmart<CJSValue> enable, JSSmart<CJSValue> globalAlpha);",
          "24:  JSSmart<CJSValue> Start_GlobalAlpha();",
          "25:  JSSmart<CJSValue> End_GlobalAlpha();",
          "27:  JSSmart<CJSValue> p_color(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a);",
          "28:  JSSmart<CJSValue> p_width(JSSmart<CJSValue> w);",
          "29:  JSSmart<CJSValue> p_dash(JSSmart<CJSValue> params);",
          "31:  JSSmart<CJSValue> b_color1(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a);",
          "32:  JSSmart<CJSValue> b_color2(JSSmart<CJSValue> r, JSSmart<CJSValue> g, JSSmart<CJSValue> b, JSSmart<CJSValue> a);",
          "33:  JSSmart<CJSValue> transform(JSSmart<CJSValue> sx, JSSmart<CJSValue> shy, JSSmart<CJSValue> shx, JSSmart<CJSValue> sy, JSSmart<CJSValue> tx, JSSmart<CJSValue> ty);",
          "34:  JSSmart<CJSValue> CalculateFullTransform(JSSmart<CJSValue> isInvertNeed);",
          "36:  JSSmart<CJSValue> _s();",
          "37:  JSSmart<CJSValue> _e();",
          "38:  JSSmart<CJSValue> _z();",
          "39:  JSSmart<CJSValue> _m (JSSmart<CJSValue> x,  JSSmart<CJSValue> y);",
          "40:  JSSmart<CJSValue> _l (JSSmart<CJSValue> x,  JSSmart<CJSValue> y);",
          "41:  JSSmart<CJSValue> _c (JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2, JSSmart<CJSValue> x3, JSSmart<CJSValue> y3);",
          "42:  JSSmart<CJSValue> _c2(JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2);",
          "43:  JSSmart<CJSValue> ds();",
          "44:  JSSmart<CJSValue> df();",
          "46:  JSSmart<CJSValue> save();",
          "47:  JSSmart<CJSValue> restore();",
          "48:  JSSmart<CJSValue> clip();",
          "49:  JSSmart<CJSValue> reset();",
          "50:  JSSmart<CJSValue> FreeFont();",
          "51:  JSSmart<CJSValue> ClearLastFont();",
          "53:  JSSmart<CJSValue> drawImage2(JSSmart<CJSValue> img, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h, JSSmart<CJSValue> alpha, JSSmart<CJSValue> srcRect);",
          "54:  JSSmart<CJSValue> drawImage (JSSmart<CJSValue> img, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h, JSSmart<CJSValue> alpha, JSSmart<CJSValue> srcRect, JSSmart<CJSValue> nativeImage);",
          "56:  JSSmart<CJSValue> GetFont();",
          "57:  JSSmart<CJSValue> font(JSSmart<CJSValue> font_id, JSSmart<CJSValue> font_size);",
          "58:  JSSmart<CJSValue> SetFont(JSSmart<CJSValue> path, JSSmart<CJSValue> face, JSSmart<CJSValue> size, JSSmart<CJSValue> style);",
          "59:  JSSmart<CJSValue> GetTextPr();",
          "60:  JSSmart<CJSValue> FillText(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> text);",
          "61:  JSSmart<CJSValue> t(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> _arr);",
          "62:  JSSmart<CJSValue> FillText2(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> text, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW);",
          "63:  JSSmart<CJSValue> t2(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW);",
          "64:  JSSmart<CJSValue> FillTextCode(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> lUnicode);",
          "65:  JSSmart<CJSValue> tg(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "66:  JSSmart<CJSValue> charspace(JSSmart<CJSValue> space);",
          "68:  JSSmart<CJSValue> private_FillGlyph (JSSmart<CJSValue> pGlyph, JSSmart<CJSValue> _bounds);",
          "69:  JSSmart<CJSValue> private_FillGlyphC(JSSmart<CJSValue> pGlyph, JSSmart<CJSValue> cropX, JSSmart<CJSValue> cropW);",
          "70:  JSSmart<CJSValue> private_FillGlyph2(JSSmart<CJSValue> pGlyph);",
          "71:  JSSmart<CJSValue> SetIntegerGrid(JSSmart<CJSValue> param);",
          "72:  JSSmart<CJSValue> GetIntegerGrid();",
          "73:  JSSmart<CJSValue> DrawStringASCII (JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "74:  JSSmart<CJSValue> DrawStringASCII2(JSSmart<CJSValue> text, JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "75:  JSSmart<CJSValue> DrawHeaderEdit(JSSmart<CJSValue> yPos, JSSmart<CJSValue> lock_type, JSSmart<CJSValue> sectionNum, JSSmart<CJSValue> bIsRepeat, JSSmart<CJSValue> type);",
          "76:  JSSmart<CJSValue> DrawFooterEdit(JSSmart<CJSValue> yPos, JSSmart<CJSValue> lock_type, JSSmart<CJSValue> sectionNum, JSSmart<CJSValue> bIsRepeat, JSSmart<CJSValue> type);",
          "77:  JSSmart<CJSValue> DrawLockParagraph (JSSmart<CJSValue> x, JSSmart<CJSValue> y1, JSSmart<CJSValue> y2);",
          "78:  JSSmart<CJSValue> DrawLockObjectRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y,  JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "79:  JSSmart<CJSValue> DrawEmptyTableLine(JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> x2, JSSmart<CJSValue> y2);",
          "80:  JSSmart<CJSValue> DrawSpellingLine  (JSSmart<CJSValue> y0, JSSmart<CJSValue> x0, JSSmart<CJSValue> x1, JSSmart<CJSValue> w);",
          "82:  JSSmart<CJSValue> drawHorLine (JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW);",
          "83:  JSSmart<CJSValue> drawHorLine2(JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW);",
          "84:  JSSmart<CJSValue> drawVerLine (JSSmart<CJSValue> align, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> b, JSSmart<CJSValue> penW);",
          "86:  JSSmart<CJSValue> drawHorLineExt(JSSmart<CJSValue> align, JSSmart<CJSValue> y, JSSmart<CJSValue> x, JSSmart<CJSValue> r, JSSmart<CJSValue> penW, JSSmart<CJSValue> leftMW, JSSmart<CJSValue> rightMW);",
          "87:  JSSmart<CJSValue> rect     (JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "88:  JSSmart<CJSValue> TableRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "90:  JSSmart<CJSValue> AddClipRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "91:  JSSmart<CJSValue> RemoveClipRect();",
          "92:  JSSmart<CJSValue> SetClip(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "93:  JSSmart<CJSValue> RemoveClip();",
          "94:  JSSmart<CJSValue> drawMailMergeField(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "95:  JSSmart<CJSValue> drawSearchResult  (JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "96:  JSSmart<CJSValue> drawFlowAnchor    (JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "97:  JSSmart<CJSValue> SavePen();",
          "98:  JSSmart<CJSValue> RestorePen();",
          "99:  JSSmart<CJSValue> SaveBrush();",
          "100:  JSSmart<CJSValue> RestoreBrush();",
          "101:  JSSmart<CJSValue> SavePenBrush();",
          "102:  JSSmart<CJSValue> RestorePenBrush();",
          "103:  JSSmart<CJSValue> SaveGrState();",
          "104:  JSSmart<CJSValue> RestoreGrState();",
          "105:  JSSmart<CJSValue> StartClipPath();",
          "106:  JSSmart<CJSValue> EndClipPath();",
          "107:  JSSmart<CJSValue> StartCheckTableDraw();",
          "108:  JSSmart<CJSValue> SetTextClipRect(JSSmart<CJSValue> _l, JSSmart<CJSValue> _t, JSSmart<CJSValue> _r, JSSmart<CJSValue> _b);",
          "109:  JSSmart<CJSValue> AddSmartRect   (JSSmart<CJSValue> x,  JSSmart<CJSValue> y,  JSSmart<CJSValue> w,  JSSmart<CJSValue> h, JSSmart<CJSValue> pen_w);",
          "110:  JSSmart<CJSValue> CheckUseFonts2 (JSSmart<CJSValue> _transform);",
          "111:  JSSmart<CJSValue> UncheckUseFonts2();",
          "112:  JSSmart<CJSValue> Drawing_StartCheckBounds(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "113:  JSSmart<CJSValue> Drawing_EndCheckBounds();",
          "114:  JSSmart<CJSValue> DrawPresentationComment(JSSmart<CJSValue> type, JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "115:  JSSmart<CJSValue> DrawPolygon(JSSmart<CJSValue> oPath, JSSmart<CJSValue> lineWidth, JSSmart<CJSValue> shift);",
          "116:  JSSmart<CJSValue> DrawFootnoteRect(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "118:  JSSmart<CJSValue> toDataURL(JSSmart<CJSValue> type);",
          "119:  JSSmart<CJSValue> GetPenColor();",
          "120:  JSSmart<CJSValue> GetBrushColor();",
          "121:  JSSmart<CJSValue> put_brushTexture(JSSmart<CJSValue> src, JSSmart<CJSValue> type);",
          "122:  JSSmart<CJSValue> put_brushTextureMode(JSSmart<CJSValue> mode);",
          "123:  JSSmart<CJSValue> put_BrushTextureAlpha(JSSmart<CJSValue> a);",
          "124:  JSSmart<CJSValue> put_BrushGradient(JSSmart<CJSValue> colors, JSSmart<CJSValue> n, JSSmart<CJSValue> x0, JSSmart<CJSValue> y0, JSSmart<CJSValue> x1, JSSmart<CJSValue> y1, JSSmart<CJSValue> r0, JSSmart<CJSValue> r1);",
          "125:  JSSmart<CJSValue> TransformPointX(JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "126:  JSSmart<CJSValue> TransformPointY(JSSmart<CJSValue> x, JSSmart<CJSValue> y);",
          "127:  JSSmart<CJSValue> put_LineJoin(JSSmart<CJSValue> join);",
          "128:  JSSmart<CJSValue> get_LineJoin();",
          "129:  JSSmart<CJSValue> put_TextureBounds(JSSmart<CJSValue> x, JSSmart<CJSValue> y, JSSmart<CJSValue> w, JSSmart<CJSValue> h);",
          "130:  JSSmart<CJSValue> GetlineWidth();",
          "131:  JSSmart<CJSValue> DrawPath(JSSmart<CJSValue> path);",
          "132:  JSSmart<CJSValue> CoordTransformOffset(JSSmart<CJSValue> tx, JSSmart<CJSValue> ty);",
          "133:  JSSmart<CJSValue> GetTransform();",
          "135:  static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp||DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp": [
          "File: DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp -> DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: JSSmart<CJSValue> CMemoryStreamEmbed::Copy(JSSmart<CJSValue> stream, JSSmart<CJSValue> pos, JSSmart<CJSValue> len)",
          "4: {",
          "9: }",
          "11: JSSmart<CJSValue> CMemoryStreamEmbed::ClearNoAttack()",
          "12: {",
          "15: }",
          "17: JSSmart<CJSValue> CMemoryStreamEmbed::WriteByte(JSSmart<CJSValue> value)",
          "18: {",
          "21: }",
          "23: JSSmart<CJSValue> CMemoryStreamEmbed::WriteBool(JSSmart<CJSValue> value)",
          "24: {",
          "27: }",
          "29: JSSmart<CJSValue> CMemoryStreamEmbed::WriteLong(JSSmart<CJSValue> value)",
          "30: {",
          "33: }",
          "35: JSSmart<CJSValue> CMemoryStreamEmbed::WriteDouble(JSSmart<CJSValue> value)",
          "36: {",
          "39: }",
          "41: JSSmart<CJSValue> CMemoryStreamEmbed::WriteDouble2(JSSmart<CJSValue> value)",
          "42: {",
          "45: }",
          "47: JSSmart<CJSValue> CMemoryStreamEmbed::WriteStringA(JSSmart<CJSValue> value)",
          "48: {",
          "52: }",
          "54: JSSmart<CJSValue> CMemoryStreamEmbed::WriteString(JSSmart<CJSValue> value)",
          "55: {",
          "59: }",
          "61: JSSmart<CJSValue> CMemoryStreamEmbed::WriteString2(JSSmart<CJSValue> value)",
          "62: {",
          "66: }",
          "",
          "[Removed Lines]",
          "5:     JSSmart<CJSObject> _obj = stream->toObject();",
          "6:     NSMemoryStream::CMemoryStream* pStream = (NSMemoryStream::CMemoryStream*)(_obj->getNative());",
          "7:     m_pInternal->Copy(pStream, pos->toInt32(), len->toInt32());",
          "8:     return NULL;",
          "13:     m_pInternal->ClearNoAttack();",
          "14:     return NULL;",
          "19:     m_pInternal->WriteBYTE((BYTE)value->toInt32());",
          "20:     return NULL;",
          "25:     m_pInternal->WriteBYTE(value->toBool() ? 1 : 0);",
          "26:     return NULL;",
          "31:     m_pInternal->WriteLONG((LONG)value->toInt32());",
          "32:     return NULL;",
          "37:     m_pInternal->WriteLONG((LONG)(value->toDouble() * 100000));",
          "38:     return NULL;",
          "43:     m_pInternal->WriteDouble(value->toDouble());",
          "44:     return NULL;",
          "49:     std::string param = value->toStringA();",
          "50:     m_pInternal->WriteStringA2(param.c_str(), (int)param.length());",
          "51:     return NULL;",
          "56:     std::wstring param = value->toStringW();",
          "57:     m_pInternal->WriteString(param.c_str(), (int)param.length());",
          "58:     return NULL;",
          "63:     std::wstring param = value->toStringW();",
          "64:     m_pInternal->WriteString2(param.c_str(), (int)param.length());",
          "65:     return NULL;",
          "",
          "[Added Lines]",
          "5:  JSSmart<CJSObject> _obj = stream->toObject();",
          "6:  NSMemoryStream::CMemoryStream* pStream = (NSMemoryStream::CMemoryStream*)(_obj->getNative());",
          "7:  m_pInternal->Copy(pStream, pos->toInt32(), len->toInt32());",
          "8:  return NULL;",
          "13:  m_pInternal->ClearNoAttack();",
          "14:  return NULL;",
          "19:  m_pInternal->WriteBYTE((BYTE)value->toInt32());",
          "20:  return NULL;",
          "25:  m_pInternal->WriteBYTE(value->toBool() ? 1 : 0);",
          "26:  return NULL;",
          "31:  m_pInternal->WriteLONG((LONG)value->toInt32());",
          "32:  return NULL;",
          "37:  m_pInternal->WriteLONG((LONG)(value->toDouble() * 100000));",
          "38:  return NULL;",
          "43:  m_pInternal->WriteDouble(value->toDouble());",
          "44:  return NULL;",
          "49:  std::string param = value->toStringA();",
          "50:  m_pInternal->WriteStringA2(param.c_str(), (int)param.length());",
          "51:  return NULL;",
          "56:  std::wstring param = value->toStringW();",
          "57:  m_pInternal->WriteString(param.c_str(), (int)param.length());",
          "58:  return NULL;",
          "63:  std::wstring param = value->toStringW();",
          "64:  m_pInternal->WriteString2(param.c_str(), (int)param.length());",
          "65:  return NULL;",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h||DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h -> DesktopEditor/doctrenderer/embed/MemoryStreamEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: class CMemoryStreamEmbed : public CJSEmbedObject",
          "9: {",
          "10: public:",
          "13: public:",
          "19: public:",
          "33: };",
          "35: #endif // _BUILD_NATIVE_MEMORYSTREAM_EMBED_H_",
          "",
          "[Removed Lines]",
          "11:     NSMemoryStream::CMemoryStream* m_pInternal;",
          "14:     CMemoryStreamEmbed() : m_pInternal(new NSMemoryStream::CMemoryStream()) {}",
          "15:     ~CMemoryStreamEmbed() { RELEASEOBJECT(m_pInternal); }",
          "17:     virtual void* getObject() override { return (void*)m_pInternal; }",
          "20:     JSSmart<CJSValue> Copy(JSSmart<CJSValue> stream, JSSmart<CJSValue> pos, JSSmart<CJSValue> len);",
          "21:     JSSmart<CJSValue> ClearNoAttack();",
          "23:     JSSmart<CJSValue> WriteByte(JSSmart<CJSValue> value);",
          "24:     JSSmart<CJSValue> WriteBool(JSSmart<CJSValue> value);",
          "25:     JSSmart<CJSValue> WriteLong(JSSmart<CJSValue> value);",
          "26:     JSSmart<CJSValue> WriteDouble(JSSmart<CJSValue> value);",
          "27:     JSSmart<CJSValue> WriteDouble2(JSSmart<CJSValue> value);",
          "28:     JSSmart<CJSValue> WriteStringA(JSSmart<CJSValue> value);",
          "29:     JSSmart<CJSValue> WriteString(JSSmart<CJSValue> value);",
          "30:     JSSmart<CJSValue> WriteString2(JSSmart<CJSValue> value);",
          "32:     static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "[Added Lines]",
          "11:  NSMemoryStream::CMemoryStream* m_pInternal;",
          "14:  CMemoryStreamEmbed() : m_pInternal(new NSMemoryStream::CMemoryStream()) {}",
          "15:  ~CMemoryStreamEmbed() { RELEASEOBJECT(m_pInternal); }",
          "17:  virtual void* getObject() override { return (void*)m_pInternal; }",
          "20:  JSSmart<CJSValue> Copy(JSSmart<CJSValue> stream, JSSmart<CJSValue> pos, JSSmart<CJSValue> len);",
          "21:  JSSmart<CJSValue> ClearNoAttack();",
          "23:  JSSmart<CJSValue> WriteByte(JSSmart<CJSValue> value);",
          "24:  JSSmart<CJSValue> WriteBool(JSSmart<CJSValue> value);",
          "25:  JSSmart<CJSValue> WriteLong(JSSmart<CJSValue> value);",
          "26:  JSSmart<CJSValue> WriteDouble(JSSmart<CJSValue> value);",
          "27:  JSSmart<CJSValue> WriteDouble2(JSSmart<CJSValue> value);",
          "28:  JSSmart<CJSValue> WriteStringA(JSSmart<CJSValue> value);",
          "29:  JSSmart<CJSValue> WriteString(JSSmart<CJSValue> value);",
          "30:  JSSmart<CJSValue> WriteString2(JSSmart<CJSValue> value);",
          "32:  static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp||DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp": [
          "File: DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp -> DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: JSSmart<CJSValue> CBuilderEmbed::builder_OpenFile(JSSmart<CJSValue> sPath, JSSmart<CJSValue> sParams)",
          "7: {",
          "12: }",
          "13: JSSmart<CJSValue> CBuilderEmbed::builder_CreateFile(JSSmart<CJSValue> type)",
          "14: {",
          "23: }",
          "24: JSSmart<CJSValue> CBuilderEmbed::builder_SetTmpFolder(JSSmart<CJSValue> path)",
          "25: {",
          "29: }",
          "30: JSSmart<CJSValue> CBuilderEmbed::builder_SaveFile(JSSmart<CJSValue> type, JSSmart<CJSValue> path, JSSmart<CJSValue> params)",
          "31: {",
          "42: }",
          "43: JSSmart<CJSValue> CBuilderEmbed::builder_CloseFile()",
          "44: {",
          "47: }",
          "50: JSSmart<CJSValue> CBuilderDocumentEmbed::builder_doc_IsValid()",
          "51: {",
          "53: }",
          "54: JSSmart<CJSValue> CBuilderDocumentEmbed::builder_doc_GetBinary()",
          "55: {",
          "57: }",
          "58: JSSmart<CJSValue> CBuilderDocumentEmbed::builder_doc_GetFolder()",
          "59: {",
          "61: }",
          "62: JSSmart<CJSValue> CBuilderDocumentEmbed::builder_doc_CloseFile()",
          "63: {",
          "66: }",
          "67: JSSmart<CJSValue> CBuilderDocumentEmbed::builder_doc_GetImageMap()",
          "68: {",
          "82: }",
          "84: void CBuilderDocumentEmbed::OpenFile(const std::wstring& sFile, const std::wstring& sParams)",
          "85: {",
          "112: }",
          "113: void CBuilderDocumentEmbed::CloseFile()",
          "114: {",
          "119: }",
          "",
          "[Removed Lines]",
          "8:     std::wstring Path = sPath->toStringW();",
          "9:     std::wstring Params = sParams->toStringW();",
          "10:     int ret = m_pBuilder->OpenFile(Path.c_str(), Params.c_str());",
          "11:     return CJSContext::createInt(ret);",
          "15:     int nFormat = AVS_OFFICESTUDIO_FILE_DOCUMENT_DOCX;",
          "16:     if (type->isString())",
          "17:         nFormat = NSDoctRenderer::GetFormatByTexExtention(type->toStringW());",
          "18:     else",
          "19:         nFormat = type->toInt32();",
          "21:     bool ret = m_pBuilder->CreateFile(nFormat);",
          "22:     return CJSContext::createBool(ret);",
          "26:     std::wstring sPath = path->toStringW();",
          "27:     m_pBuilder->SetTmpFolder(sPath.c_str());",
          "28:     return NULL;",
          "32:     int nFormat = AVS_OFFICESTUDIO_FILE_DOCUMENT_DOCX;",
          "33:     if (type->isString())",
          "34:         nFormat = NSDoctRenderer::GetFormatByTexExtention(type->toStringW());",
          "35:     else",
          "36:         nFormat = type->toInt32();",
          "38:     std::wstring sPath = path->toStringW();",
          "39:     std::wstring sParams = params->toStringW();",
          "40:     int ret = m_pBuilder->SaveFile(nFormat, sPath.c_str(), sParams.empty() ? NULL : sParams.c_str());",
          "41:     return CJSContext::createInt(ret);",
          "45:     m_pBuilder->CloseFile();",
          "46:     return NULL;",
          "52:     return CJSContext::createBool(m_bIsValid);",
          "56:     return CJSContext::createUint8Array(m_sFolder + L\"/Editor.bin\");",
          "60:     return CJSContext::createString(m_sFolder);",
          "64:     CloseFile();",
          "65:     return NULL;",
          "69:     std::vector<std::wstring> files = NSDirectory::GetFiles(m_sFolder + L\"/media\");",
          "71:     JSSmart<CJSObject> obj = CJSContext::createObject();",
          "72:     for (std::vector<std::wstring>::iterator i = files.begin(); i != files.end(); i++)",
          "73:     {",
          "74:         std::wstring sFile = *i;",
          "75:         NSStringUtils::string_replace(sFile, L\"\\\\\", L\"/\");",
          "76:         std::wstring sName = L\"media/\" + NSFile::GetFileName(sFile);",
          "78:         obj->set(U_TO_UTF8(sName).c_str(), CJSContext::createString(sFile));",
          "79:     }",
          "81:     return obj->toValue();",
          "86:     NSDoctRenderer::CDocBuilder_Private* pBuilder = GetPrivate(m_pBuilder);",
          "88:     std::wstring sTmpDir = pBuilder->m_sTmpFolder;",
          "90:     m_sFolder = NSFile::CFileBinary::CreateTempFileWithUniqueName(sTmpDir, L\"DE_\");",
          "91:     if (NSFile::CFileBinary::Exists(m_sFolder))",
          "92:         NSFile::CFileBinary::Remove(m_sFolder);",
          "94:     NSStringUtils::string_replace(m_sFolder, L\"\\\\\", L\"/\");",
          "96:     std::wstring::size_type nPosPoint = m_sFolder.rfind('.');",
          "97:     if (nPosPoint != std::wstring::npos && nPosPoint > sTmpDir.length())",
          "98:     {",
          "99:         m_sFolder = m_sFolder.substr(0, nPosPoint);",
          "100:     }",
          "102:     NSDirectory::CreateDirectory(m_sFolder);",
          "104:     std::wstring sExtCopy = pBuilder->GetFileCopyExt(sFile);",
          "105:     std::wstring sFileCopy = m_sFolder + L\"/origin.\" + sExtCopy;",
          "107:     pBuilder->MoveFileOpen(sFile, sFileCopy);",
          "108:     int nConvertResult = pBuilder->ConvertToInternalFormat(m_sFolder, sFileCopy, sParams);",
          "110:     if (0 == nConvertResult)",
          "111:         m_bIsValid = true;",
          "115:     if (!m_sFolder.empty())",
          "116:         NSDirectory::DeleteDirectory(m_sFolder);",
          "117:     m_bIsValid = false;",
          "118:     m_sFolder = L\"\";",
          "",
          "[Added Lines]",
          "8:  std::wstring Path = sPath->toStringW();",
          "9:  std::wstring Params = sParams->toStringW();",
          "10:  int ret = m_pBuilder->OpenFile(Path.c_str(), Params.c_str());",
          "11:  return CJSContext::createInt(ret);",
          "15:  int nFormat = AVS_OFFICESTUDIO_FILE_DOCUMENT_DOCX;",
          "16:  if (type->isString())",
          "17:   nFormat = NSDoctRenderer::GetFormatByTexExtention(type->toStringW());",
          "18:  else",
          "19:   nFormat = type->toInt32();",
          "21:  bool ret = m_pBuilder->CreateFile(nFormat);",
          "22:  return CJSContext::createBool(ret);",
          "26:  std::wstring sPath = path->toStringW();",
          "27:  m_pBuilder->SetTmpFolder(sPath.c_str());",
          "28:  return NULL;",
          "32:  int nFormat = AVS_OFFICESTUDIO_FILE_DOCUMENT_DOCX;",
          "33:  if (type->isString())",
          "34:   nFormat = NSDoctRenderer::GetFormatByTexExtention(type->toStringW());",
          "35:  else",
          "36:   nFormat = type->toInt32();",
          "38:  std::wstring sPath = path->toStringW();",
          "39:  std::wstring sParams = params->toStringW();",
          "40:  int ret = m_pBuilder->SaveFile(nFormat, sPath.c_str(), sParams.empty() ? NULL : sParams.c_str());",
          "41:  return CJSContext::createInt(ret);",
          "45:  m_pBuilder->CloseFile();",
          "46:  return NULL;",
          "52:  return CJSContext::createBool(m_bIsValid);",
          "56:  return CJSContext::createUint8Array(m_sFolder + L\"/Editor.bin\");",
          "60:  return CJSContext::createString(m_sFolder);",
          "64:  CloseFile();",
          "65:  return NULL;",
          "69:  std::vector<std::wstring> files = NSDirectory::GetFiles(m_sFolder + L\"/media\");",
          "71:  JSSmart<CJSObject> obj = CJSContext::createObject();",
          "72:  for (std::vector<std::wstring>::iterator i = files.begin(); i != files.end(); i++)",
          "73:  {",
          "74:   std::wstring sFile = *i;",
          "75:   NSStringUtils::string_replace(sFile, L\"\\\\\", L\"/\");",
          "76:   std::wstring sName = L\"media/\" + NSFile::GetFileName(sFile);",
          "78:   obj->set(U_TO_UTF8(sName).c_str(), CJSContext::createString(sFile));",
          "79:  }",
          "81:  return obj->toValue();",
          "86:  NSDoctRenderer::CDocBuilder_Private* pBuilder = GetPrivate(m_pBuilder);",
          "88:  std::wstring sTmpDir = pBuilder->m_sTmpFolder;",
          "90:  m_sFolder = NSFile::CFileBinary::CreateTempFileWithUniqueName(sTmpDir, L\"DE_\");",
          "91:  if (NSFile::CFileBinary::Exists(m_sFolder))",
          "92:   NSFile::CFileBinary::Remove(m_sFolder);",
          "94:  NSStringUtils::string_replace(m_sFolder, L\"\\\\\", L\"/\");",
          "96:  std::wstring::size_type nPosPoint = m_sFolder.rfind('.');",
          "97:  if (nPosPoint != std::wstring::npos && nPosPoint > sTmpDir.length())",
          "98:  {",
          "99:   m_sFolder = m_sFolder.substr(0, nPosPoint);",
          "100:  }",
          "102:  NSDirectory::CreateDirectory(m_sFolder);",
          "104:  std::wstring sExtCopy = pBuilder->GetFileCopyExt(sFile);",
          "105:  std::wstring sFileCopy = m_sFolder + L\"/origin.\" + sExtCopy;",
          "107:  pBuilder->MoveFileOpen(sFile, sFileCopy);",
          "108:  int nConvertResult = pBuilder->ConvertToInternalFormat(m_sFolder, sFileCopy, sParams);",
          "110:  if (0 == nConvertResult)",
          "111:   m_bIsValid = true;",
          "115:  if (!m_sFolder.empty())",
          "116:   NSDirectory::DeleteDirectory(m_sFolder);",
          "117:  m_bIsValid = false;",
          "118:  m_sFolder = L\"\";",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h||DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h -> DesktopEditor/doctrenderer/embed/NativeBuilderEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: class CBuilderEmbed : public CJSEmbedObject",
          "40: {",
          "41: public:",
          "49: public:",
          "56: };",
          "58: class CBuilderDocumentEmbed : public CJSEmbedObject",
          "59: {",
          "60: public:",
          "65: public:",
          "72: public:",
          "76: public:",
          "82: };",
          "84: void builder_CreateNative(const std::string& name, JSSmart<CJSContext> context, NSDoctRenderer::CDocBuilder* builder);",
          "",
          "[Removed Lines]",
          "42:     NSDoctRenderer::CDocBuilder* m_pBuilder;",
          "44:     CBuilderEmbed() : m_pBuilder(NULL) {}",
          "45:     ~CBuilderEmbed() { if(m_pBuilder) RELEASEOBJECT(m_pBuilder); }",
          "47:     virtual void* getObject() { return (void*)m_pBuilder; }",
          "50:     JSSmart<CJSValue> builder_OpenFile(JSSmart<CJSValue> sPath, JSSmart<CJSValue> sParams);",
          "51:     JSSmart<CJSValue> builder_CreateFile(JSSmart<CJSValue> type);",
          "52:     JSSmart<CJSValue> builder_SetTmpFolder(JSSmart<CJSValue> path);",
          "53:     JSSmart<CJSValue> builder_SaveFile(JSSmart<CJSValue> type, JSSmart<CJSValue> path, JSSmart<CJSValue> params);",
          "54:     JSSmart<CJSValue> builder_CloseFile();",
          "55:     JSSmart<CJSValue> builder_OpenTmpFile(JSSmart<CJSValue> path, JSSmart<CJSValue> params);",
          "61:     NSDoctRenderer::CDocBuilder* m_pBuilder;",
          "62:     bool m_bIsValid;",
          "63:     std::wstring m_sFolder;",
          "66:     CBuilderDocumentEmbed() : m_pBuilder(NULL), m_bIsValid(false) {}",
          "67:     ~CBuilderDocumentEmbed() { if(m_pBuilder) RELEASEOBJECT(m_pBuilder); }",
          "69:     virtual void* getObject() { return (void*)m_pBuilder; }",
          "70:     NSDoctRenderer::CDocBuilder_Private* GetPrivate(NSDoctRenderer::CDocBuilder* pBuilder) { return pBuilder->GetPrivate(); }",
          "73:     void OpenFile(const std::wstring& sFile, const std::wstring& sParams);",
          "74:     void CloseFile();",
          "77:     JSSmart<CJSValue> builder_doc_IsValid();",
          "78:     JSSmart<CJSValue> builder_doc_GetBinary();",
          "79:     JSSmart<CJSValue> builder_doc_GetFolder();",
          "80:     JSSmart<CJSValue> builder_doc_CloseFile();",
          "81:     JSSmart<CJSValue> builder_doc_GetImageMap();",
          "",
          "[Added Lines]",
          "42:  NSDoctRenderer::CDocBuilder* m_pBuilder;",
          "44:  CBuilderEmbed() : m_pBuilder(NULL) {}",
          "45:  ~CBuilderEmbed() { if(m_pBuilder) RELEASEOBJECT(m_pBuilder); }",
          "47:  virtual void* getObject() { return (void*)m_pBuilder; }",
          "50:  JSSmart<CJSValue> builder_OpenFile(JSSmart<CJSValue> sPath, JSSmart<CJSValue> sParams);",
          "51:  JSSmart<CJSValue> builder_CreateFile(JSSmart<CJSValue> type);",
          "52:  JSSmart<CJSValue> builder_SetTmpFolder(JSSmart<CJSValue> path);",
          "53:  JSSmart<CJSValue> builder_SaveFile(JSSmart<CJSValue> type, JSSmart<CJSValue> path, JSSmart<CJSValue> params);",
          "54:  JSSmart<CJSValue> builder_CloseFile();",
          "55:  JSSmart<CJSValue> builder_OpenTmpFile(JSSmart<CJSValue> path, JSSmart<CJSValue> params);",
          "61:  NSDoctRenderer::CDocBuilder* m_pBuilder;",
          "62:  bool m_bIsValid;",
          "63:  std::wstring m_sFolder;",
          "66:  CBuilderDocumentEmbed() : m_pBuilder(NULL), m_bIsValid(false) {}",
          "67:  ~CBuilderDocumentEmbed() { if(m_pBuilder) RELEASEOBJECT(m_pBuilder); }",
          "69:  virtual void* getObject() { return (void*)m_pBuilder; }",
          "70:  NSDoctRenderer::CDocBuilder_Private* GetPrivate(NSDoctRenderer::CDocBuilder* pBuilder) { return pBuilder->GetPrivate(); }",
          "73:  void OpenFile(const std::wstring& sFile, const std::wstring& sParams);",
          "74:  void CloseFile();",
          "77:  JSSmart<CJSValue> builder_doc_IsValid();",
          "78:  JSSmart<CJSValue> builder_doc_GetBinary();",
          "79:  JSSmart<CJSValue> builder_doc_GetFolder();",
          "80:  JSSmart<CJSValue> builder_doc_CloseFile();",
          "81:  JSSmart<CJSValue> builder_doc_GetImageMap();",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp||DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp": [
          "File: DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp -> DesktopEditor/doctrenderer/embed/NativeControlEmbed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: JSSmart<CJSValue> CNativeControlEmbed::SetFilePath(JSSmart<CJSValue> path)",
          "4: {",
          "7: }",
          "9: JSSmart<CJSValue> CNativeControlEmbed::GetFilePath()",
          "10: {",
          "12: }",
          "14: JSSmart<CJSValue> CNativeControlEmbed::SetFileId(JSSmart<CJSValue> fileId)",
          "15: {",
          "18: }",
          "20: JSSmart<CJSValue> CNativeControlEmbed::GetFileId()",
          "21: {",
          "23: }",
          "25: JSSmart<CJSValue> CNativeControlEmbed::GetFileBinary(JSSmart<CJSValue> file)",
          "26: {",
          "28: }",
          "30: JSSmart<CJSValue> CNativeControlEmbed::GetFontBinary(JSSmart<CJSValue> file)",
          "31: {",
          "53: }",
          "55: JSSmart<CJSValue> CNativeControlEmbed::GetFontsDirectory()",
          "56: {",
          "58: }",
          "60: JSSmart<CJSValue> CNativeControlEmbed::GetFileString(JSSmart<CJSValue> file)",
          "61: {",
          "63: }",
          "65: JSSmart<CJSValue> CNativeControlEmbed::GetEditorType()",
          "66: {",
          "68: }",
          "70: JSSmart<CJSValue> CNativeControlEmbed::CheckNextChange()",
          "71: {",
          "81: }",
          "83: JSSmart<CJSValue> CNativeControlEmbed::GetCountChanges()",
          "84: {",
          "92: }",
          "94: JSSmart<CJSValue> CNativeControlEmbed::GetChangesFile(JSSmart<CJSValue> index)",
          "95: {",
          "101: }",
          "103: JSSmart<CJSValue> CNativeControlEmbed::Save_AllocNative(JSSmart<CJSValue> nLen)",
          "104: {",
          "108: }",
          "110: JSSmart<CJSValue> CNativeControlEmbed::Save_ReAllocNative(JSSmart<CJSValue> pos, JSSmart<CJSValue> len)",
          "111: {",
          "116: }",
          "118: JSSmart<CJSValue> CNativeControlEmbed::Save_End(JSSmart<CJSValue> pos, JSSmart<CJSValue> len)",
          "119: {",
          "124: }",
          "126: JSSmart<CJSValue> CNativeControlEmbed::AddImageInChanges(JSSmart<CJSValue> img)",
          "127: {",
          "136: }",
          "138: JSSmart<CJSValue> CNativeControlEmbed::ConsoleLog(JSSmart<CJSValue> message)",
          "139: {",
          "142: }",
          "144: JSSmart<CJSValue> CNativeControlEmbed::SaveChanges(JSSmart<CJSValue> sParam, JSSmart<CJSValue> nDeleteIndex, JSSmart<CJSValue> nCount)",
          "145: {",
          "148: }",
          "150: JSSmart<CJSValue> CNativeControlEmbed::zipOpenFile(JSSmart<CJSValue> name)",
          "151: {",
          "164: }",
          "166: JSSmart<CJSValue> CNativeControlEmbed::zipOpenFileBase64(JSSmart<CJSValue> name)",
          "167: {",
          "180: }",
          "182: JSSmart<CJSValue> CNativeControlEmbed::zipGetFileAsString(JSSmart<CJSValue> name)",
          "183: {",
          "188: }",
          "190: JSSmart<CJSValue> CNativeControlEmbed::zipGetFileAsBinary(JSSmart<CJSValue> name)",
          "191: {",
          "193: }",
          "195: JSSmart<CJSValue> CNativeControlEmbed::zipCloseFile()",
          "196: {",
          "199: }",
          "201: JSSmart<CJSValue> CNativeControlEmbed::GetImageUrl(JSSmart<CJSValue> sUrl)",
          "202: {",
          "211: }",
          "213: JSSmart<CJSValue> CNativeControlEmbed::GetImagesPath()",
          "214: {",
          "216: }",
          "218: #include \"./../../graphics/MetafileToRenderer.h\"",
          "",
          "[Removed Lines]",
          "5:     m_pInternal->SetFilePath(path->toStringW());",
          "6:     return NULL;",
          "11:     return CJSContext::createString(m_pInternal->GetFilePath());",
          "16:     m_pInternal->SetFileId(fileId->toStringW());",
          "17:     return NULL;",
          "22:     return CJSContext::createString(m_pInternal->GetFileId());",
          "27:     return CJSContext::createUint8Array(file->toStringW());",
          "36:     std::wstring sFile = file->toStringW();",
          "37:     bool bIsFullFilePath = (std::wstring::npos != sFile.find('\\\\') || std::wstring::npos != sFile.find('/'));",
          "38:     if (bIsFullFilePath)",
          "39:     {",
          "40:         bIsFullFilePath = NSFile::CFileBinary::Exists(sFile);",
          "41:     }",
          "43:     if (!bIsFullFilePath)",
          "44:     {",
          "45:         std::map<std::wstring, std::wstring>::iterator pair = m_pInternal->m_map_fonts.find(sFile);",
          "46:         if (pair != m_pInternal->m_map_fonts.end())",
          "47:             sFile = pair->second;",
          "48:         else",
          "49:             sFile = m_pInternal->m_sDefaultFont;",
          "50:     }",
          "52:     return CJSContext::createUint8Array(sFile);",
          "57:     return CJSContext::createString(m_pInternal->m_strFontsDirectory);",
          "62:     return CJSContext::createUint8Array(file->toStringW());",
          "67:     return CJSContext::createString(m_pInternal->m_strEditorType);",
          "72:     m_pInternal->m_nCurrentChangesNumber++;",
          "73:     if (-1 != m_pInternal->m_nMaxChangesNumber)",
          "74:     {",
          "75:         if (m_pInternal->m_nCurrentChangesNumber >= m_pInternal->m_nMaxChangesNumber)",
          "76:         {",
          "77:             return CJSContext::createBool(false);",
          "78:         }",
          "79:     }",
          "80:     return CJSContext::createBool(true);",
          "85:     int nCount = 0;",
          "86:     if (m_pInternal->m_pChanges != NULL)",
          "87:     {",
          "88:         nCount = (int)m_pInternal->m_pChanges->size();",
          "89:     }",
          "91:     return CJSContext::createInt(nCount);",
          "96:     int nIndex = index->toInt32();",
          "97:     std::wstring strFile = L\"\";",
          "98:     if (m_pInternal->m_pChanges != NULL)",
          "99:         strFile = (*m_pInternal->m_pChanges)[nIndex];",
          "100:     return CJSContext::createString(strFile);",
          "105:     int Len = nLen->toInt32();",
          "106:     m_pInternal->Save_Alloc(Len);",
          "107:     return CJSContext::createUint8Array(m_pInternal->m_pSaveBinary, m_pInternal->m_nSaveLen, true);",
          "112:     int _pos = pos->toInt32();",
          "113:     int _len = len->toInt32();",
          "114:     m_pInternal->Save_ReAlloc(_pos, _len);",
          "115:     return CJSContext::createUint8Array(m_pInternal->m_pSaveBinary, m_pInternal->m_nSaveLen, true);",
          "120:     std::string sHeader = pos->toStringA();",
          "121:     int _len = len->toInt32();",
          "122:     m_pInternal->Save_End(sHeader, _len);",
          "123:     return NULL;",
          "128:     std::wstring sImage = img->toStringW();",
          "129:     if (sImage.empty())",
          "130:         return NULL;",
          "132:     std::map<std::wstring, bool>::const_iterator iter = m_pInternal->m_mapImagesInChanges.find(sImage);",
          "133:     if (iter == m_pInternal->m_mapImagesInChanges.end())",
          "134:         m_pInternal->m_mapImagesInChanges.insert(std::pair<std::wstring, bool>(sImage, true));",
          "135:     return NULL;",
          "140:     m_pInternal->ConsoleLog(message->toStringA());",
          "141:     return NULL;",
          "146:     m_pInternal->DumpChanges(sParam->toStringA(), nDeleteIndex->toInt32(), nCount->toInt32());",
          "147:     return NULL;",
          "152:     bool bIsOpen = m_pInternal->m_oZipWorker.Open(name->toStringW());",
          "153:     if (!bIsOpen)",
          "154:         return CJSContext::createNull();",
          "156:     JSSmart<CJSObject> obj = CJSContext::createObject();",
          "157:     for (std::vector<std::wstring>::iterator i = m_pInternal->m_oZipWorker.m_arFiles.begin(); i != m_pInternal->m_oZipWorker.m_arFiles.end(); i++)",
          "158:     {",
          "159:         std::string sFile = NSFile::CUtf8Converter::GetUtf8StringFromUnicode(*i);",
          "160:         obj->set(sFile.c_str(), CJSContext::createString(sFile));",
          "161:     }",
          "163:     return obj->toValue();",
          "168:     bool bIsOpen = m_pInternal->m_oZipWorker.OpenBase64(name->toStringA());",
          "169:     if (!bIsOpen)",
          "170:         return CJSContext::createNull();",
          "172:     JSSmart<CJSObject> obj = CJSContext::createObject();",
          "173:     for (std::vector<std::wstring>::iterator i = m_pInternal->m_oZipWorker.m_arFiles.begin(); i != m_pInternal->m_oZipWorker.m_arFiles.end(); i++)",
          "174:     {",
          "175:         std::string sFile = NSFile::CUtf8Converter::GetUtf8StringFromUnicode(*i);",
          "176:         obj->set(sFile.c_str(), CJSContext::createString(sFile));",
          "177:     }",
          "179:     return obj->toValue();",
          "184:     BYTE* pData = NULL;",
          "185:     DWORD len = 0;",
          "186:     m_pInternal->m_oZipWorker.GetFileData(name->toStringW(), pData, len);",
          "187:     return  CJSContext::createString((char*)pData, len);",
          "192:     return CJSContext::createUint8Array(m_pInternal->m_oZipWorker.m_sTmpFolder + L\"/\" + name->toStringW());",
          "197:     m_pInternal->m_oZipWorker.Close();",
          "198:     return NULL;",
          "203:     std::wstring Url = sUrl->toStringW();",
          "205:     if (!m_pInternal->m_pWorker)",
          "206:         m_pInternal->m_pWorker = new CImagesWorker(m_pInternal->m_strImagesDirectory);",
          "208:     std::wstring sRet = m_pInternal->m_pWorker->GetImage(Url);",
          "210:     return CJSContext::createString(sRet);",
          "215:     return CJSContext::createString(m_pInternal->m_strImagesDirectory);",
          "",
          "[Added Lines]",
          "5:  m_pInternal->SetFilePath(path->toStringW());",
          "6:  return NULL;",
          "11:  return CJSContext::createString(m_pInternal->GetFilePath());",
          "16:  m_pInternal->SetFileId(fileId->toStringW());",
          "17:  return NULL;",
          "22:  return CJSContext::createString(m_pInternal->GetFileId());",
          "27:  return CJSContext::createUint8Array(file->toStringW());",
          "36:  std::wstring sFile = file->toStringW();",
          "37:  bool bIsFullFilePath = (std::wstring::npos != sFile.find('\\\\') || std::wstring::npos != sFile.find('/'));",
          "38:  if (bIsFullFilePath)",
          "39:  {",
          "40:   bIsFullFilePath = NSFile::CFileBinary::Exists(sFile);",
          "41:  }",
          "43:  if (!bIsFullFilePath)",
          "44:  {",
          "45:   std::map<std::wstring, std::wstring>::iterator pair = m_pInternal->m_map_fonts.find(sFile);",
          "46:   if (pair != m_pInternal->m_map_fonts.end())",
          "47:    sFile = pair->second;",
          "48:   else",
          "49:    sFile = m_pInternal->m_sDefaultFont;",
          "50:  }",
          "52:  return CJSContext::createUint8Array(sFile);",
          "57:  return CJSContext::createString(m_pInternal->m_strFontsDirectory);",
          "62:  return CJSContext::createUint8Array(file->toStringW());",
          "67:  return CJSContext::createString(m_pInternal->m_strEditorType);",
          "72:  m_pInternal->m_nCurrentChangesNumber++;",
          "73:  if (-1 != m_pInternal->m_nMaxChangesNumber)",
          "74:  {",
          "75:   if (m_pInternal->m_nCurrentChangesNumber >= m_pInternal->m_nMaxChangesNumber)",
          "76:   {",
          "77:    return CJSContext::createBool(false);",
          "78:   }",
          "79:  }",
          "80:  return CJSContext::createBool(true);",
          "85:  int nCount = 0;",
          "86:  if (m_pInternal->m_pChanges != NULL)",
          "87:  {",
          "88:   nCount = (int)m_pInternal->m_pChanges->size();",
          "89:  }",
          "91:  return CJSContext::createInt(nCount);",
          "96:  int nIndex = index->toInt32();",
          "97:  std::wstring strFile = L\"\";",
          "98:  if (m_pInternal->m_pChanges != NULL)",
          "99:   strFile = (*m_pInternal->m_pChanges)[nIndex];",
          "100:  return CJSContext::createString(strFile);",
          "105:  int Len = nLen->toInt32();",
          "106:  m_pInternal->Save_Alloc(Len);",
          "107:  return CJSContext::createUint8Array(m_pInternal->m_pSaveBinary, m_pInternal->m_nSaveLen, true);",
          "112:  int _pos = pos->toInt32();",
          "113:  int _len = len->toInt32();",
          "114:  m_pInternal->Save_ReAlloc(_pos, _len);",
          "115:  return CJSContext::createUint8Array(m_pInternal->m_pSaveBinary, m_pInternal->m_nSaveLen, true);",
          "120:  std::string sHeader = pos->toStringA();",
          "121:  int _len = len->toInt32();",
          "122:  m_pInternal->Save_End(sHeader, _len);",
          "123:  return NULL;",
          "128:  std::wstring sImage = img->toStringW();",
          "129:  if (sImage.empty())",
          "130:   return NULL;",
          "132:  std::map<std::wstring, bool>::const_iterator iter = m_pInternal->m_mapImagesInChanges.find(sImage);",
          "133:  if (iter == m_pInternal->m_mapImagesInChanges.end())",
          "134:   m_pInternal->m_mapImagesInChanges.insert(std::pair<std::wstring, bool>(sImage, true));",
          "135:  return NULL;",
          "140:  m_pInternal->ConsoleLog(message->toStringA());",
          "141:  return NULL;",
          "146:  m_pInternal->DumpChanges(sParam->toStringA(), nDeleteIndex->toInt32(), nCount->toInt32());",
          "147:  return NULL;",
          "152:  bool bIsOpen = m_pInternal->m_oZipWorker.Open(name->toStringW());",
          "153:  if (!bIsOpen)",
          "154:   return CJSContext::createNull();",
          "156:  JSSmart<CJSObject> obj = CJSContext::createObject();",
          "157:  for (std::vector<std::wstring>::iterator i = m_pInternal->m_oZipWorker.m_arFiles.begin(); i != m_pInternal->m_oZipWorker.m_arFiles.end(); i++)",
          "158:  {",
          "159:   std::string sFile = NSFile::CUtf8Converter::GetUtf8StringFromUnicode(*i);",
          "160:   obj->set(sFile.c_str(), CJSContext::createString(sFile));",
          "161:  }",
          "163:  return obj->toValue();",
          "168:  bool bIsOpen = m_pInternal->m_oZipWorker.OpenBase64(name->toStringA());",
          "169:  if (!bIsOpen)",
          "170:   return CJSContext::createNull();",
          "172:  JSSmart<CJSObject> obj = CJSContext::createObject();",
          "173:  for (std::vector<std::wstring>::iterator i = m_pInternal->m_oZipWorker.m_arFiles.begin(); i != m_pInternal->m_oZipWorker.m_arFiles.end(); i++)",
          "174:  {",
          "175:   std::string sFile = NSFile::CUtf8Converter::GetUtf8StringFromUnicode(*i);",
          "176:   obj->set(sFile.c_str(), CJSContext::createString(sFile));",
          "177:  }",
          "179:  return obj->toValue();",
          "184:  BYTE* pData = NULL;",
          "185:  DWORD len = 0;",
          "186:  m_pInternal->m_oZipWorker.GetFileData(name->toStringW(), pData, len);",
          "187:  return  CJSContext::createString((char*)pData, len);",
          "192:  return CJSContext::createUint8Array(m_pInternal->m_oZipWorker.m_sTmpFolder + L\"/\" + name->toStringW());",
          "197:  m_pInternal->m_oZipWorker.Close();",
          "198:  return NULL;",
          "203:  std::wstring Url = sUrl->toStringW();",
          "205:  if (!m_pInternal->m_pWorker)",
          "206:   m_pInternal->m_pWorker = new CImagesWorker(m_pInternal->m_strImagesDirectory);",
          "208:  std::wstring sRet = m_pInternal->m_pWorker->GetImage(Url);",
          "210:  return CJSContext::createString(sRet);",
          "215:  return CJSContext::createString(m_pInternal->m_strImagesDirectory);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/NativeControlEmbed.h||DesktopEditor/doctrenderer/embed/NativeControlEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/NativeControlEmbed.h -> DesktopEditor/doctrenderer/embed/NativeControlEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: class CNativeControlEmbed : public CJSEmbedObject",
          "9: {",
          "10: public:",
          "13: public:",
          "19: public:",
          "46:  JSSmart<CJSValue> GetImageOriginalSize(JSSmart<CJSValue> sUrl);",
          "50: };",
          "52: #endif // _BUILD_NATIVE_NATIVECONTROL_EMBED_H_",
          "",
          "[Removed Lines]",
          "11:     NSNativeControl::CNativeControl* m_pInternal;",
          "12:     CZipWorker m_oZipWorker;",
          "14:     CNativeControlEmbed() : m_pInternal(new NSNativeControl::CNativeControl()) {}",
          "15:     ~CNativeControlEmbed() { RELEASEOBJECT(m_pInternal); }",
          "17:     virtual void* getObject() override { return (void*)m_pInternal; }",
          "21:     JSSmart<CJSValue> SetFilePath(JSSmart<CJSValue> path);",
          "22:     JSSmart<CJSValue> GetFilePath();",
          "23:     JSSmart<CJSValue> SetFileId(JSSmart<CJSValue> fileId);",
          "24:     JSSmart<CJSValue> GetFileId();",
          "25:     JSSmart<CJSValue> GetFileBinary(JSSmart<CJSValue> file);",
          "26:     JSSmart<CJSValue> GetFontBinary(JSSmart<CJSValue> file);",
          "27:     JSSmart<CJSValue> GetFontsDirectory();",
          "28:     JSSmart<CJSValue> GetFileString(JSSmart<CJSValue> file);",
          "29:     JSSmart<CJSValue> GetEditorType();",
          "30:     JSSmart<CJSValue> CheckNextChange();",
          "31:     JSSmart<CJSValue> GetCountChanges();",
          "32:     JSSmart<CJSValue> GetChangesFile(JSSmart<CJSValue> index);",
          "33:     JSSmart<CJSValue> Save_AllocNative(JSSmart<CJSValue> nLen);",
          "34:     JSSmart<CJSValue> Save_ReAllocNative(JSSmart<CJSValue> pos, JSSmart<CJSValue> len);",
          "35:     JSSmart<CJSValue> Save_End(JSSmart<CJSValue> pos, JSSmart<CJSValue> len);",
          "36:     JSSmart<CJSValue> AddImageInChanges(JSSmart<CJSValue> img);",
          "37:     JSSmart<CJSValue> ConsoleLog(JSSmart<CJSValue> message);",
          "38:     JSSmart<CJSValue> SaveChanges(JSSmart<CJSValue> sParam, JSSmart<CJSValue> nDeleteIndex, JSSmart<CJSValue> nCount);",
          "39:     JSSmart<CJSValue> zipOpenFile(JSSmart<CJSValue> name);",
          "40:     JSSmart<CJSValue> zipOpenFileBase64(JSSmart<CJSValue> name);",
          "41:     JSSmart<CJSValue> zipGetFileAsString(JSSmart<CJSValue> name);",
          "42:     JSSmart<CJSValue> zipGetFileAsBinary(JSSmart<CJSValue> name);",
          "43:     JSSmart<CJSValue> zipCloseFile();",
          "44:     JSSmart<CJSValue> GetImageUrl(JSSmart<CJSValue> sUrl);",
          "45:     JSSmart<CJSValue> GetImagesPath();",
          "48:     static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "49:     static void CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "[Added Lines]",
          "11:  NSNativeControl::CNativeControl* m_pInternal;",
          "12:  CZipWorker m_oZipWorker;",
          "14:  CNativeControlEmbed() : m_pInternal(new NSNativeControl::CNativeControl()) {}",
          "15:  ~CNativeControlEmbed() { RELEASEOBJECT(m_pInternal); }",
          "17:  virtual void* getObject() override { return (void*)m_pInternal; }",
          "21:  JSSmart<CJSValue> SetFilePath(JSSmart<CJSValue> path);",
          "22:  JSSmart<CJSValue> GetFilePath();",
          "23:  JSSmart<CJSValue> SetFileId(JSSmart<CJSValue> fileId);",
          "24:  JSSmart<CJSValue> GetFileId();",
          "25:  JSSmart<CJSValue> GetFileBinary(JSSmart<CJSValue> file);",
          "26:  JSSmart<CJSValue> GetFontBinary(JSSmart<CJSValue> file);",
          "27:  JSSmart<CJSValue> GetFontsDirectory();",
          "28:  JSSmart<CJSValue> GetFileString(JSSmart<CJSValue> file);",
          "29:  JSSmart<CJSValue> GetEditorType();",
          "30:  JSSmart<CJSValue> CheckNextChange();",
          "31:  JSSmart<CJSValue> GetCountChanges();",
          "32:  JSSmart<CJSValue> GetChangesFile(JSSmart<CJSValue> index);",
          "33:  JSSmart<CJSValue> Save_AllocNative(JSSmart<CJSValue> nLen);",
          "34:  JSSmart<CJSValue> Save_ReAllocNative(JSSmart<CJSValue> pos, JSSmart<CJSValue> len);",
          "35:  JSSmart<CJSValue> Save_End(JSSmart<CJSValue> pos, JSSmart<CJSValue> len);",
          "36:  JSSmart<CJSValue> AddImageInChanges(JSSmart<CJSValue> img);",
          "37:  JSSmart<CJSValue> ConsoleLog(JSSmart<CJSValue> message);",
          "38:  JSSmart<CJSValue> SaveChanges(JSSmart<CJSValue> sParam, JSSmart<CJSValue> nDeleteIndex, JSSmart<CJSValue> nCount);",
          "39:  JSSmart<CJSValue> zipOpenFile(JSSmart<CJSValue> name);",
          "40:  JSSmart<CJSValue> zipOpenFileBase64(JSSmart<CJSValue> name);",
          "41:  JSSmart<CJSValue> zipGetFileAsString(JSSmart<CJSValue> name);",
          "42:  JSSmart<CJSValue> zipGetFileAsBinary(JSSmart<CJSValue> name);",
          "43:  JSSmart<CJSValue> zipCloseFile();",
          "44:  JSSmart<CJSValue> GetImageUrl(JSSmart<CJSValue> sUrl);",
          "45:  JSSmart<CJSValue> GetImagesPath();",
          "48:  static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "49:  static void CreateObjectBuilderInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/PointerEmbed.cpp||DesktopEditor/doctrenderer/embed/PointerEmbed.cpp": [
          "File: DesktopEditor/doctrenderer/embed/PointerEmbed.cpp -> DesktopEditor/doctrenderer/embed/PointerEmbed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: namespace NSPointerObjectDeleters",
          "5: {",
          "14: }",
          "16: CPointerEmbedObject::CPointerEmbedObject(void* data, NSPointerObjectDeleters::PointerObjectDeleter deleter)",
          "17: {",
          "20: }",
          "22: void CPointerEmbedObject::Free()",
          "23: {",
          "27: }",
          "29: CPointerEmbedObject::~CPointerEmbedObject()",
          "30: {",
          "32: }",
          "",
          "[Removed Lines]",
          "6:     void EmptyDeleter(void* data)",
          "7:     {",
          "9:     }",
          "10:     void FreeDeleter(void* data)",
          "11:     {",
          "12:         free(data);",
          "13:     }",
          "18:     Data = data;",
          "19:     Deleter = deleter;",
          "24:     if (Data && Deleter)",
          "25:         Deleter(Data);",
          "26:     Data = nullptr;",
          "31:     Free();",
          "",
          "[Added Lines]",
          "6:  void EmptyDeleter(void* data)",
          "7:  {",
          "9:  }",
          "10:  void FreeDeleter(void* data)",
          "11:  {",
          "12:   free(data);",
          "13:  }",
          "18:  Data = data;",
          "19:  Deleter = deleter;",
          "24:  if (Data && Deleter)",
          "25:   Deleter(Data);",
          "26:  Data = nullptr;",
          "31:  Free();",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/PointerEmbed.h||DesktopEditor/doctrenderer/embed/PointerEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/PointerEmbed.h -> DesktopEditor/doctrenderer/embed/PointerEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: namespace NSPointerObjectDeleters",
          "7: {",
          "12: }",
          "14: #define POINTER_DELETER(CLASS_NAME, NAME) void NAME(void* data) { CLASS_NAME* p = (CLASS_NAME*)data; delete data; }",
          "",
          "[Removed Lines]",
          "8:     using PointerObjectDeleter = void (*)(void* data);",
          "10:     void EmptyDeleter(void* data);",
          "11:     void FreeDeleter(void* data);",
          "",
          "[Added Lines]",
          "8:  using PointerObjectDeleter = void (*)(void* data);",
          "10:  void EmptyDeleter(void* data);",
          "11:  void FreeDeleter(void* data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: class CPointerEmbedObject : public CJSEmbedObject",
          "18: {",
          "19: public:",
          "22: private:",
          "25: public:",
          "33: };",
          "35: #endif // _BUILD_NATIVE_POINTER_EMBED_H_",
          "",
          "[Removed Lines]",
          "20:     void* Data;",
          "23:     NSPointerObjectDeleters::PointerObjectDeleter Deleter;",
          "26:     CPointerEmbedObject(void* data, NSPointerObjectDeleters::PointerObjectDeleter = nullptr);",
          "27:     void Free();",
          "28:     virtual ~CPointerEmbedObject();",
          "30:     virtual void* getObject() { return Data; }",
          "32:     JSSmart<CJSValue> createObject();",
          "",
          "[Added Lines]",
          "20:  void* Data;",
          "23:  NSPointerObjectDeleters::PointerObjectDeleter Deleter;",
          "26:  CPointerEmbedObject(void* data, NSPointerObjectDeleters::PointerObjectDeleter = nullptr);",
          "27:  void Free();",
          "28:  virtual ~CPointerEmbedObject();",
          "30:  virtual void* getObject() { return Data; }",
          "32:  JSSmart<CJSValue> createObject();",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp||DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp": [
          "File: DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp -> DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: class CExternalPointerJS : public NSShaper::CExternalPointer",
          "13: {",
          "14: public:",
          "18: public:",
          "29: };",
          "31: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Malloc(JSSmart<CJSValue> typed_array_or_len)",
          "32: {",
          "54: }",
          "55: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Free(JSSmart<CJSValue> pointer)",
          "56: {",
          "60: }",
          "62: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Init()",
          "63: {",
          "66: }",
          "67: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Set_TrueType_HintProp(JSSmart<CJSValue> library, JSSmart<CJSValue> tt_interpreter)",
          "68: {",
          "70: }",
          "72: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Open_Face(JSSmart<CJSValue> library, JSSmart<CJSValue> memory, JSSmart<CJSValue> size, JSSmart<CJSValue> face_index)",
          "73: {",
          "80: }",
          "81: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Open_Face2(JSSmart<CJSValue> library, JSSmart<CJSValue> array, JSSmart<CJSValue> face_index)",
          "82: {",
          "91: }",
          "92: JSSmart<CJSValue> CTextMeasurerEmbed::FT_GetFaceInfo(JSSmart<CJSValue> face)",
          "93: {",
          "99: }",
          "101: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Load_Glyph(JSSmart<CJSValue> face, JSSmart<CJSValue> gid, JSSmart<CJSValue> mode)",
          "102: {",
          "104: }",
          "105: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Get_Glyph_Measure_Params(JSSmart<CJSValue> face, JSSmart<CJSValue> is_vector)",
          "106: {",
          "112: }",
          "113: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Get_Glyph_Render_Params(JSSmart<CJSValue> face, JSSmart<CJSValue> render_mode)",
          "114: {",
          "120: }",
          "121: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Get_Glyph_Render_Buffer(JSSmart<CJSValue> face, JSSmart<CJSValue> size)",
          "122: {",
          "125: }",
          "127: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Set_Transform(JSSmart<CJSValue> face, JSSmart<CJSValue> xx, JSSmart<CJSValue> yx, JSSmart<CJSValue> xy, JSSmart<CJSValue> yy)",
          "128: {",
          "131: }",
          "132: JSSmart<CJSValue> CTextMeasurerEmbed::FT_Set_Char_Size(JSSmart<CJSValue> face, JSSmart<CJSValue> char_width, JSSmart<CJSValue> char_height, JSSmart<CJSValue> hres, JSSmart<CJSValue> vres)",
          "133: {",
          "135: }",
          "136: JSSmart<CJSValue> CTextMeasurerEmbed::FT_SetCMapForCharCode(JSSmart<CJSValue> face, JSSmart<CJSValue> unicode)",
          "137: {",
          "139: }",
          "140: JSSmart<CJSValue> CTextMeasurerEmbed::FT_GetKerningX(JSSmart<CJSValue> face, JSSmart<CJSValue> gid1, JSSmart<CJSValue> gid2)",
          "141: {",
          "143: }",
          "144: JSSmart<CJSValue> CTextMeasurerEmbed::FT_GetFaceMaxAdvanceX(JSSmart<CJSValue> face)",
          "145: {",
          "147: }",
          "149: #ifdef SUPPORT_HARFBUZZ_SHAPER",
          "150: JSSmart<CJSValue> CTextMeasurerEmbed::HB_LanguageFromString(JSSmart<CJSValue> language_bcp_47)",
          "151: {",
          "155: }",
          "157: JSSmart<CJSValue> CTextMeasurerEmbed::HB_ShapeText(JSSmart<CJSValue> face, JSSmart<CJSValue> font, JSSmart<CJSValue> text,",
          "159: {",
          "179: }",
          "181: JSSmart<CJSValue> CTextMeasurerEmbed::HB_FontMalloc()",
          "182: {",
          "185: }",
          "187: JSSmart<CJSValue> CTextMeasurerEmbed::HB_FontFree(JSSmart<CJSValue> font)",
          "188: {",
          "192: }",
          "193: #endif",
          "",
          "[Removed Lines]",
          "15:     CExternalPointerJS() : NSShaper::CExternalPointer() {}",
          "16:     virtual ~CExternalPointerJS() {}",
          "19:     virtual void Alloc(const unsigned int& len)",
          "20:     {",
          "21:         Len = len;",
          "22:         Data = NSAllocator::Alloc((size_t)Len);",
          "23:     }",
          "24:     virtual void Free()",
          "25:     {",
          "26:         if (Data)",
          "27:             NSAllocator::Free(Data, (size_t)Len);",
          "28:     }",
          "33:     void* pData = NULL;",
          "34:     size_t len = 0;",
          "36:     if (typed_array_or_len->isNumber())",
          "37:     {",
          "38:         len = (size_t)typed_array_or_len->toInt32();",
          "39:         if (0 != len)",
          "40:             pData = malloc((size_t)len);",
          "41:     }",
          "42:     else",
          "43:     {",
          "44:         JSSmart<CJSTypedArray> typedArray = typed_array_or_len->toTypedArray();",
          "45:         CJSDataBuffer pBuffer = typedArray->getData();",
          "46:         pData = malloc(pBuffer.Len);",
          "47:         memcpy(pData, pBuffer.Data, pBuffer.Len);",
          "48:         if (pBuffer.IsExternalize)",
          "49:             pBuffer.Free();",
          "50:     }",
          "52:     CPointerEmbedObject* pObject = new CPointerEmbedObject(pData, NSPointerObjectDeleters::FreeDeleter);",
          "53:     return pObject->createObject();",
          "57:     CPointerEmbedObject* pEmbed = (CPointerEmbedObject*)pointer->toObjectSmart()->getNative();",
          "58:     pEmbed->Free();",
          "59:     return CJSContext::createUndefined();",
          "64:     CPointerEmbedObject* pointer = new CPointerEmbedObject(NSShaper::FT_Library_Init(), [](void* data) { NSShaper::FT_Library_UnReference(data); });",
          "65:     return pointer->createObject();",
          "69:     return CJSContext::createInt(NSShaper::FT_Set_TrueType_HintProp(RAW_POINTER(library), tt_interpreter->toUInt32()));",
          "74:     void* ftlibrary = RAW_POINTER(library);",
          "75:     void* face = NSShaper::FT_Open_Face(ftlibrary, (unsigned char*)RAW_POINTER(memory), size->toUInt32(), face_index->toInt32());",
          "76:     if (NULL != face)",
          "77:         NSShaper::FT_Library_Reference(ftlibrary);",
          "78:     CPointerEmbedObject* pointer = new CPointerEmbedObject(face, [](void* data) { NSShaper::FT_Done_Face_With_Library(data); });",
          "79:     return pointer->createObject();",
          "83:     void* ftlibrary = RAW_POINTER(library);",
          "84:     JSSmart<CJSTypedArray> typedArray = array->toTypedArray();",
          "85:     CJSDataBuffer buffer = typedArray->getData();",
          "86:     void* face = NSShaper::FT_Open_Face(ftlibrary, (unsigned char*)buffer.Data, (unsigned int)buffer.Len, face_index->toInt32());",
          "87:     if (NULL != face)",
          "88:         NSShaper::FT_Library_Reference(ftlibrary);",
          "89:     CPointerEmbedObject* pointer = new CPointerEmbedObject(face, [](void* data) { NSShaper::FT_Done_Face_With_Library(data); });",
          "90:     return pointer->createObject();",
          "94:     CExternalPointerJS result;",
          "95:     if (!NSShaper::FT_GetFaceInfo(RAW_POINTER(face), &result))",
          "96:         return CJSContext::createNull();",
          "98:     return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "103:     return CJSContext::createInt(NSShaper::FT_Load_Glyph(RAW_POINTER(face), gid->toUInt32(), mode->toInt32()));",
          "107:     CExternalPointerJS result;",
          "108:     if (!NSShaper::FT_Get_Glyph_Measure_Params(RAW_POINTER(face), is_vector->toBool(), &result))",
          "109:         return CJSContext::createNull();",
          "111:     return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "115:     CExternalPointerJS result;",
          "116:     if (!NSShaper::FT_Get_Glyph_Render_Params(RAW_POINTER(face), render_mode->toInt32(), &result))",
          "117:         return CJSContext::createNull();",
          "119:     return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "123:     void* Data = NSShaper::FT_Get_Glyph_Render_Buffer(RAW_POINTER(face));",
          "124:     return CJSContext::createUint8Array((unsigned char*)Data, size->toInt32(), true);",
          "129:     NSShaper::FT_Set_Transform(RAW_POINTER(face), xx->toInt32(), yx->toInt32(), xy->toInt32(), yy->toInt32());",
          "130:     return CJSContext::createUndefined();",
          "134:     return CJSContext::createInt(NSShaper::FT_Set_Char_Size(RAW_POINTER(face), char_width->toInt32(), char_height->toInt32(), hres->toUInt32(), vres->toUInt32()));",
          "138:     return CJSContext::createUInt(NSShaper::FT_SetCMapForCharCode(RAW_POINTER(face), unicode->toUInt32()));",
          "142:     return CJSContext::createInt(NSShaper::FT_GetKerningX(RAW_POINTER(face), gid1->toUInt32(), gid2->toUInt32()));",
          "146:     return CJSContext::createInt(NSShaper::FT_GetFaceMaxAdvanceX(RAW_POINTER(face)));",
          "152:     void* Data = NSShaper::HB_LanguageFromString(language_bcp_47->toStringA());",
          "153:     CPointerEmbedObject* pObject = new CPointerEmbedObject(Data, NSPointerObjectDeleters::EmptyDeleter);",
          "154:     return pObject->createObject();",
          "158:     JSSmart<CJSValue> nFeatures, JSSmart<CJSValue> nScript, JSSmart<CJSValue> nDirection, JSSmart<CJSValue> nLanguage)",
          "160:     CPointerEmbedObject* pFont = POINTER_OBJECT(font);",
          "161:     CExternalPointerJS result;",
          "163:     JSSmart<CJSTypedArray> typedArray = text->toTypedArray();",
          "164:     CJSDataBuffer buffer = typedArray->getData();",
          "166:     char* pText = (char*)buffer.Data;",
          "168:     NSShaper::HB_ShapeText(RAW_POINTER(face), pFont->Data, pText,",
          "169:                            nFeatures->toUInt32(), nScript->toUInt32(), nDirection->toUInt32(), RAW_POINTER(nLanguage),",
          "170:                            &result, true);",
          "172:     if (buffer.IsExternalize)",
          "173:         buffer.Free();",
          "175:     if (NULL == result.Data)",
          "176:         return CJSContext::createNull();",
          "178:     return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "183:     CPointerEmbedObject* pObject = new CPointerEmbedObject(NULL, [](void* data) { NSShaper::HB_FontFree(data); });",
          "184:     return pObject->createObject();",
          "189:     CPointerEmbedObject* pFont = POINTER_OBJECT(font);",
          "190:     pFont->Free();",
          "191:     return CJSContext::createUndefined();",
          "",
          "[Added Lines]",
          "15:  CExternalPointerJS() : NSShaper::CExternalPointer() {}",
          "16:  virtual ~CExternalPointerJS() {}",
          "19:  virtual void Alloc(const unsigned int& len)",
          "20:  {",
          "21:   Len = len;",
          "22:   Data = NSAllocator::Alloc((size_t)Len);",
          "23:  }",
          "24:  virtual void Free()",
          "25:  {",
          "26:   if (Data)",
          "27:    NSAllocator::Free(Data, (size_t)Len);",
          "28:  }",
          "33:  void* pData = NULL;",
          "34:  size_t len = 0;",
          "36:  if (typed_array_or_len->isNumber())",
          "37:  {",
          "38:   len = (size_t)typed_array_or_len->toInt32();",
          "39:   if (0 != len)",
          "40:    pData = malloc((size_t)len);",
          "41:  }",
          "42:  else",
          "43:  {",
          "44:   JSSmart<CJSTypedArray> typedArray = typed_array_or_len->toTypedArray();",
          "45:   CJSDataBuffer pBuffer = typedArray->getData();",
          "46:   pData = malloc(pBuffer.Len);",
          "47:   memcpy(pData, pBuffer.Data, pBuffer.Len);",
          "48:   if (pBuffer.IsExternalize)",
          "49:    pBuffer.Free();",
          "50:  }",
          "52:  CPointerEmbedObject* pObject = new CPointerEmbedObject(pData, NSPointerObjectDeleters::FreeDeleter);",
          "53:  return pObject->createObject();",
          "57:  CPointerEmbedObject* pEmbed = (CPointerEmbedObject*)pointer->toObjectSmart()->getNative();",
          "58:  pEmbed->Free();",
          "59:  return CJSContext::createUndefined();",
          "64:  CPointerEmbedObject* pointer = new CPointerEmbedObject(NSShaper::FT_Library_Init(), [](void* data) { NSShaper::FT_Library_UnReference(data); });",
          "65:  return pointer->createObject();",
          "69:  return CJSContext::createInt(NSShaper::FT_Set_TrueType_HintProp(RAW_POINTER(library), tt_interpreter->toUInt32()));",
          "74:  void* ftlibrary = RAW_POINTER(library);",
          "75:  void* face = NSShaper::FT_Open_Face(ftlibrary, (unsigned char*)RAW_POINTER(memory), size->toUInt32(), face_index->toInt32());",
          "76:  if (NULL != face)",
          "77:   NSShaper::FT_Library_Reference(ftlibrary);",
          "78:  CPointerEmbedObject* pointer = new CPointerEmbedObject(face, [](void* data) { NSShaper::FT_Done_Face_With_Library(data); });",
          "79:  return pointer->createObject();",
          "83:  void* ftlibrary = RAW_POINTER(library);",
          "84:  JSSmart<CJSTypedArray> typedArray = array->toTypedArray();",
          "85:  CJSDataBuffer buffer = typedArray->getData();",
          "86:  void* face = NSShaper::FT_Open_Face(ftlibrary, (unsigned char*)buffer.Data, (unsigned int)buffer.Len, face_index->toInt32());",
          "87:  if (NULL != face)",
          "88:   NSShaper::FT_Library_Reference(ftlibrary);",
          "89:  CPointerEmbedObject* pointer = new CPointerEmbedObject(face, [](void* data) { NSShaper::FT_Done_Face_With_Library(data); });",
          "90:  return pointer->createObject();",
          "94:  CExternalPointerJS result;",
          "95:  if (!NSShaper::FT_GetFaceInfo(RAW_POINTER(face), &result))",
          "96:   return CJSContext::createNull();",
          "98:  return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "103:  return CJSContext::createInt(NSShaper::FT_Load_Glyph(RAW_POINTER(face), gid->toUInt32(), mode->toInt32()));",
          "107:  CExternalPointerJS result;",
          "108:  if (!NSShaper::FT_Get_Glyph_Measure_Params(RAW_POINTER(face), is_vector->toBool(), &result))",
          "109:   return CJSContext::createNull();",
          "111:  return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "115:  CExternalPointerJS result;",
          "116:  if (!NSShaper::FT_Get_Glyph_Render_Params(RAW_POINTER(face), render_mode->toInt32(), &result))",
          "117:   return CJSContext::createNull();",
          "119:  return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "123:  void* Data = NSShaper::FT_Get_Glyph_Render_Buffer(RAW_POINTER(face));",
          "124:  return CJSContext::createUint8Array((unsigned char*)Data, size->toInt32(), true);",
          "129:  NSShaper::FT_Set_Transform(RAW_POINTER(face), xx->toInt32(), yx->toInt32(), xy->toInt32(), yy->toInt32());",
          "130:  return CJSContext::createUndefined();",
          "134:  return CJSContext::createInt(NSShaper::FT_Set_Char_Size(RAW_POINTER(face), char_width->toInt32(), char_height->toInt32(), hres->toUInt32(), vres->toUInt32()));",
          "138:  return CJSContext::createUInt(NSShaper::FT_SetCMapForCharCode(RAW_POINTER(face), unicode->toUInt32()));",
          "142:  return CJSContext::createInt(NSShaper::FT_GetKerningX(RAW_POINTER(face), gid1->toUInt32(), gid2->toUInt32()));",
          "146:  return CJSContext::createInt(NSShaper::FT_GetFaceMaxAdvanceX(RAW_POINTER(face)));",
          "152:  void* Data = NSShaper::HB_LanguageFromString(language_bcp_47->toStringA());",
          "153:  CPointerEmbedObject* pObject = new CPointerEmbedObject(Data, NSPointerObjectDeleters::EmptyDeleter);",
          "154:  return pObject->createObject();",
          "158:                JSSmart<CJSValue> nFeatures, JSSmart<CJSValue> nScript, JSSmart<CJSValue> nDirection, JSSmart<CJSValue> nLanguage)",
          "160:  CPointerEmbedObject* pFont = POINTER_OBJECT(font);",
          "161:  CExternalPointerJS result;",
          "163:  JSSmart<CJSTypedArray> typedArray = text->toTypedArray();",
          "164:  CJSDataBuffer buffer = typedArray->getData();",
          "166:  char* pText = (char*)buffer.Data;",
          "168:  NSShaper::HB_ShapeText(RAW_POINTER(face), pFont->Data, pText,",
          "169:          nFeatures->toUInt32(), nScript->toUInt32(), nDirection->toUInt32(), RAW_POINTER(nLanguage),",
          "170:          &result, true);",
          "172:  if (buffer.IsExternalize)",
          "173:   buffer.Free();",
          "175:  if (NULL == result.Data)",
          "176:   return CJSContext::createNull();",
          "178:  return CJSContext::createUint8Array(result.Data, result.Len, false);",
          "183:  CPointerEmbedObject* pObject = new CPointerEmbedObject(NULL, [](void* data) { NSShaper::HB_FontFree(data); });",
          "184:  return pObject->createObject();",
          "189:  CPointerEmbedObject* pFont = POINTER_OBJECT(font);",
          "190:  pFont->Free();",
          "191:  return CJSContext::createUndefined();",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h||DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h -> DesktopEditor/doctrenderer/embed/TextMeasurerEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: class CTextMeasurerEmbed : public CJSEmbedObject",
          "13: {",
          "14: public:",
          "22: public:",
          "44: #ifdef SUPPORT_HARFBUZZ_SHAPER",
          "52: #endif",
          "55: };",
          "57: #endif // _BUILD_NATIVE_TEXT_MEASURER_EMBED_H_",
          "",
          "[Removed Lines]",
          "15:     CTextMeasurerEmbed()",
          "16:     {",
          "17:     }",
          "18:     ~CTextMeasurerEmbed()",
          "19:     {",
          "20:     }",
          "23:     JSSmart<CJSValue> FT_Malloc(JSSmart<CJSValue> typed_array_or_len);",
          "24:     JSSmart<CJSValue> FT_Free(JSSmart<CJSValue> pointer);",
          "26:     JSSmart<CJSValue> FT_Init();",
          "27:     JSSmart<CJSValue> FT_Set_TrueType_HintProp(JSSmart<CJSValue> library, JSSmart<CJSValue> tt_interpreter);",
          "29:     JSSmart<CJSValue> FT_Open_Face(JSSmart<CJSValue> library, JSSmart<CJSValue> memory, JSSmart<CJSValue> size, JSSmart<CJSValue> face_index);",
          "30:     JSSmart<CJSValue> FT_Open_Face2(JSSmart<CJSValue> library, JSSmart<CJSValue> array, JSSmart<CJSValue> face_index);",
          "31:     JSSmart<CJSValue> FT_GetFaceInfo(JSSmart<CJSValue> face);",
          "33:     JSSmart<CJSValue> FT_Load_Glyph(JSSmart<CJSValue> face, JSSmart<CJSValue> gid, JSSmart<CJSValue> mode);",
          "34:     JSSmart<CJSValue> FT_Get_Glyph_Measure_Params(JSSmart<CJSValue> face, JSSmart<CJSValue> is_vector);",
          "35:     JSSmart<CJSValue> FT_Get_Glyph_Render_Params(JSSmart<CJSValue> face, JSSmart<CJSValue> render_mode);",
          "36:     JSSmart<CJSValue> FT_Get_Glyph_Render_Buffer(JSSmart<CJSValue> face, JSSmart<CJSValue> size);",
          "38:     JSSmart<CJSValue> FT_Set_Transform(JSSmart<CJSValue> face, JSSmart<CJSValue> xx, JSSmart<CJSValue> yx, JSSmart<CJSValue> xy, JSSmart<CJSValue> yy);",
          "39:     JSSmart<CJSValue> FT_Set_Char_Size(JSSmart<CJSValue> face, JSSmart<CJSValue> char_width, JSSmart<CJSValue> char_height, JSSmart<CJSValue> hres, JSSmart<CJSValue> vres);",
          "40:     JSSmart<CJSValue> FT_SetCMapForCharCode(JSSmart<CJSValue> face, JSSmart<CJSValue> unicode);",
          "41:     JSSmart<CJSValue> FT_GetKerningX(JSSmart<CJSValue> face, JSSmart<CJSValue> gid1, JSSmart<CJSValue> gid2);",
          "42:     JSSmart<CJSValue> FT_GetFaceMaxAdvanceX(JSSmart<CJSValue> face);",
          "45:     JSSmart<CJSValue> HB_LanguageFromString(JSSmart<CJSValue> language_bcp_47);",
          "47:     JSSmart<CJSValue> HB_ShapeText(JSSmart<CJSValue> face, JSSmart<CJSValue> font, JSSmart<CJSValue> text,",
          "48:                                    JSSmart<CJSValue> nFeatures, JSSmart<CJSValue> nScript, JSSmart<CJSValue> nDirection, JSSmart<CJSValue> nLanguage);",
          "50:     JSSmart<CJSValue> HB_FontMalloc();",
          "51:     JSSmart<CJSValue> HB_FontFree(JSSmart<CJSValue> font);",
          "54:     static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "[Added Lines]",
          "15:  CTextMeasurerEmbed()",
          "16:  {",
          "17:  }",
          "18:  ~CTextMeasurerEmbed()",
          "19:  {",
          "20:  }",
          "23:  JSSmart<CJSValue> FT_Malloc(JSSmart<CJSValue> typed_array_or_len);",
          "24:  JSSmart<CJSValue> FT_Free(JSSmart<CJSValue> pointer);",
          "26:  JSSmart<CJSValue> FT_Init();",
          "27:  JSSmart<CJSValue> FT_Set_TrueType_HintProp(JSSmart<CJSValue> library, JSSmart<CJSValue> tt_interpreter);",
          "29:  JSSmart<CJSValue> FT_Open_Face(JSSmart<CJSValue> library, JSSmart<CJSValue> memory, JSSmart<CJSValue> size, JSSmart<CJSValue> face_index);",
          "30:  JSSmart<CJSValue> FT_Open_Face2(JSSmart<CJSValue> library, JSSmart<CJSValue> array, JSSmart<CJSValue> face_index);",
          "31:  JSSmart<CJSValue> FT_GetFaceInfo(JSSmart<CJSValue> face);",
          "33:  JSSmart<CJSValue> FT_Load_Glyph(JSSmart<CJSValue> face, JSSmart<CJSValue> gid, JSSmart<CJSValue> mode);",
          "34:  JSSmart<CJSValue> FT_Get_Glyph_Measure_Params(JSSmart<CJSValue> face, JSSmart<CJSValue> is_vector);",
          "35:  JSSmart<CJSValue> FT_Get_Glyph_Render_Params(JSSmart<CJSValue> face, JSSmart<CJSValue> render_mode);",
          "36:  JSSmart<CJSValue> FT_Get_Glyph_Render_Buffer(JSSmart<CJSValue> face, JSSmart<CJSValue> size);",
          "38:  JSSmart<CJSValue> FT_Set_Transform(JSSmart<CJSValue> face, JSSmart<CJSValue> xx, JSSmart<CJSValue> yx, JSSmart<CJSValue> xy, JSSmart<CJSValue> yy);",
          "39:  JSSmart<CJSValue> FT_Set_Char_Size(JSSmart<CJSValue> face, JSSmart<CJSValue> char_width, JSSmart<CJSValue> char_height, JSSmart<CJSValue> hres, JSSmart<CJSValue> vres);",
          "40:  JSSmart<CJSValue> FT_SetCMapForCharCode(JSSmart<CJSValue> face, JSSmart<CJSValue> unicode);",
          "41:  JSSmart<CJSValue> FT_GetKerningX(JSSmart<CJSValue> face, JSSmart<CJSValue> gid1, JSSmart<CJSValue> gid2);",
          "42:  JSSmart<CJSValue> FT_GetFaceMaxAdvanceX(JSSmart<CJSValue> face);",
          "45:  JSSmart<CJSValue> HB_LanguageFromString(JSSmart<CJSValue> language_bcp_47);",
          "47:  JSSmart<CJSValue> HB_ShapeText(JSSmart<CJSValue> face, JSSmart<CJSValue> font, JSSmart<CJSValue> text,",
          "48:            JSSmart<CJSValue> nFeatures, JSSmart<CJSValue> nScript, JSSmart<CJSValue> nDirection, JSSmart<CJSValue> nLanguage);",
          "50:  JSSmart<CJSValue> HB_FontMalloc();",
          "51:  JSSmart<CJSValue> HB_FontFree(JSSmart<CJSValue> font);",
          "54:  static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_Graphics.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: namespace NSGraphics",
          "5: {",
          "256: }",
          "258: void CGraphicsEmbed::CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context)",
          "",
          "[Removed Lines]",
          "6:     #define CURRENTWRAPPER CGraphicsEmbed",
          "9:     FUNCTION_WRAPPER_V8_5(_init,              init)",
          "10:     FUNCTION_WRAPPER_V8  (_destroy,           Destroy)",
          "11:     FUNCTION_WRAPPER_V8  (_EndDraw,           EndDraw)",
          "12:     FUNCTION_WRAPPER_V8_2(_put_GlobalAlpha,   put_GlobalAlpha)",
          "13:     FUNCTION_WRAPPER_V8  (_Start_GlobalAlpha, Start_GlobalAlpha)",
          "14:     FUNCTION_WRAPPER_V8  (_End_GlobalAlpha,   End_GlobalAlpha)",
          "16:     FUNCTION_WRAPPER_V8_4(_p_color, p_color)",
          "17:     FUNCTION_WRAPPER_V8_1(_p_width, p_width)",
          "18:     FUNCTION_WRAPPER_V8_1(_p_dash,  p_dash)",
          "20:     FUNCTION_WRAPPER_V8_4(_b_color1,               b_color1)",
          "21:     FUNCTION_WRAPPER_V8_4(_b_color2,               b_color2)",
          "22:     FUNCTION_WRAPPER_V8_6(_transform,              transform)",
          "23:     FUNCTION_WRAPPER_V8_1(_CalculateFullTransform, CalculateFullTransform)",
          "25:     FUNCTION_WRAPPER_V8  (__s,  _s)",
          "26:     FUNCTION_WRAPPER_V8  (__e,  _e)",
          "27:     FUNCTION_WRAPPER_V8  (__z,  _z)",
          "28:     FUNCTION_WRAPPER_V8_2(__m,  _m)",
          "29:     FUNCTION_WRAPPER_V8_2(__l,  _l)",
          "30:     FUNCTION_WRAPPER_V8_6(__c,  _c)",
          "31:     FUNCTION_WRAPPER_V8_4(__c2, _c2)",
          "32:     FUNCTION_WRAPPER_V8  (_ds,  ds)",
          "33:     FUNCTION_WRAPPER_V8  (_df,  df)",
          "35:     FUNCTION_WRAPPER_V8  (_save,          save)",
          "36:     FUNCTION_WRAPPER_V8  (_restore,       restore)",
          "37:     FUNCTION_WRAPPER_V8  (_clip,          clip)",
          "38:     FUNCTION_WRAPPER_V8  (_reset,         reset)",
          "39:     FUNCTION_WRAPPER_V8  (_FreeFont,      FreeFont)",
          "40:     FUNCTION_WRAPPER_V8  (_ClearLastFont, ClearLastFont)",
          "42:     FUNCTION_WRAPPER_V8_7(_drawImage2, drawImage2)",
          "43:     FUNCTION_WRAPPER_V8_8(_drawImage,  drawImage)",
          "45:     FUNCTION_WRAPPER_V8  (_GetFont,      GetFont)",
          "46:     FUNCTION_WRAPPER_V8_2(_font,         font)",
          "47:     FUNCTION_WRAPPER_V8_4(_SetFont,      SetFont)",
          "48:     FUNCTION_WRAPPER_V8  (_GetTextPr,    GetTextPr)",
          "49:     FUNCTION_WRAPPER_V8_3(_FillText,     FillText)",
          "50:     FUNCTION_WRAPPER_V8_3(_t,            t)",
          "51:     FUNCTION_WRAPPER_V8_5(_FillText2,    FillText2)",
          "52:     FUNCTION_WRAPPER_V8_5(_t2,           t2)",
          "53:     FUNCTION_WRAPPER_V8_3(_FillTextCode, FillTextCode)",
          "54:     FUNCTION_WRAPPER_V8_3(_tg,           tg)",
          "55:     FUNCTION_WRAPPER_V8_1(_charspace,    charspace)",
          "57:     FUNCTION_WRAPPER_V8_2(_private_FillGlyph,  private_FillGlyph)",
          "58:     FUNCTION_WRAPPER_V8_3(_private_FillGlyphC, private_FillGlyphC)",
          "59:     FUNCTION_WRAPPER_V8_1(_private_FillGlyph2, private_FillGlyph2)",
          "60:     FUNCTION_WRAPPER_V8_1(_SetIntegerGrid,     SetIntegerGrid)",
          "61:     FUNCTION_WRAPPER_V8  (_GetIntegerGrid,     GetIntegerGrid)",
          "62:     FUNCTION_WRAPPER_V8_3(_DrawStringASCII,    DrawStringASCII)",
          "63:     FUNCTION_WRAPPER_V8_3(_DrawStringASCII2,   DrawStringASCII2)",
          "64:     FUNCTION_WRAPPER_V8_5(_DrawHeaderEdit,     DrawHeaderEdit)",
          "65:     FUNCTION_WRAPPER_V8_5(_DrawFooterEdit,     DrawFooterEdit)",
          "66:     FUNCTION_WRAPPER_V8_3(_DrawLockParagraph,  DrawLockParagraph)",
          "67:     FUNCTION_WRAPPER_V8_4(_DrawLockObjectRect, DrawLockObjectRect)",
          "68:     FUNCTION_WRAPPER_V8_4(_DrawEmptyTableLine, DrawEmptyTableLine)",
          "69:     FUNCTION_WRAPPER_V8_4(_DrawSpellingLine,   DrawSpellingLine)",
          "71:     FUNCTION_WRAPPER_V8_5(_drawHorLine,  drawHorLine)",
          "72:     FUNCTION_WRAPPER_V8_5(_drawHorLine2, drawHorLine2)",
          "73:     FUNCTION_WRAPPER_V8_5(_drawVerLine,  drawVerLine)",
          "75:     FUNCTION_WRAPPER_V8_7(_drawHorLineExt, drawHorLineExt)",
          "76:     FUNCTION_WRAPPER_V8_4(_rect,           rect)",
          "77:     FUNCTION_WRAPPER_V8_4(_TableRect,      TableRect)",
          "79:     FUNCTION_WRAPPER_V8_4(_AddClipRect,              AddClipRect)",
          "80:     FUNCTION_WRAPPER_V8  (_RemoveClipRect,           RemoveClipRect)",
          "81:     FUNCTION_WRAPPER_V8_4(_SetClip,                  SetClip)",
          "82:     FUNCTION_WRAPPER_V8  (_RemoveClip,               RemoveClip)",
          "83:     FUNCTION_WRAPPER_V8_4(_drawMailMergeField,       drawMailMergeField)",
          "84:     FUNCTION_WRAPPER_V8_4(_drawSearchResult,         drawSearchResult)",
          "85:     FUNCTION_WRAPPER_V8_2(_drawFlowAnchor,           drawFlowAnchor)",
          "86:     FUNCTION_WRAPPER_V8  (_SavePen,                  SavePen)",
          "87:     FUNCTION_WRAPPER_V8  (_RestorePen,               RestorePen)",
          "88:     FUNCTION_WRAPPER_V8  (_SaveBrush,                SaveBrush)",
          "89:     FUNCTION_WRAPPER_V8  (_RestoreBrush,             RestoreBrush)",
          "90:     FUNCTION_WRAPPER_V8  (_SavePenBrush,             SavePenBrush)",
          "91:     FUNCTION_WRAPPER_V8  (_RestorePenBrush,          RestorePenBrush)",
          "92:     FUNCTION_WRAPPER_V8  (_SaveGrState,              SaveGrState)",
          "93:     FUNCTION_WRAPPER_V8  (_RestoreGrState,           RestoreGrState)",
          "94:     FUNCTION_WRAPPER_V8  (_StartClipPath,            StartClipPath)",
          "95:     FUNCTION_WRAPPER_V8  (_EndClipPath,              EndClipPath)",
          "96:     FUNCTION_WRAPPER_V8  (_StartCheckTableDraw,      StartCheckTableDraw)",
          "97:     FUNCTION_WRAPPER_V8_4(_SetTextClipRect,          SetTextClipRect)",
          "98:     FUNCTION_WRAPPER_V8_5(_AddSmartRect,             AddSmartRect)",
          "99:     FUNCTION_WRAPPER_V8_1(_CheckUseFonts2,           CheckUseFonts2)",
          "100:     FUNCTION_WRAPPER_V8  (_UncheckUseFonts2,         UncheckUseFonts2)",
          "101:     FUNCTION_WRAPPER_V8_4(_Drawing_StartCheckBounds, Drawing_StartCheckBounds)",
          "102:     FUNCTION_WRAPPER_V8  (_Drawing_EndCheckBounds,   Drawing_EndCheckBounds)",
          "103:     FUNCTION_WRAPPER_V8_5(_DrawPresentationComment,  DrawPresentationComment)",
          "104:     FUNCTION_WRAPPER_V8_3(_DrawPolygon,              DrawPolygon)",
          "105:     FUNCTION_WRAPPER_V8_4(_DrawFootnoteRect,         DrawFootnoteRect)",
          "107:     FUNCTION_WRAPPER_V8_1(_toDataURL,             toDataURL)",
          "108:     FUNCTION_WRAPPER_V8  (_GetPenColor,           GetPenColor)",
          "109:     FUNCTION_WRAPPER_V8  (_GetBrushColor,         GetBrushColor)",
          "110:     FUNCTION_WRAPPER_V8_2(_put_brushTexture,      put_brushTexture)",
          "111:     FUNCTION_WRAPPER_V8_1(_put_brushTextureMode,  put_brushTextureMode)",
          "112:     FUNCTION_WRAPPER_V8_1(_put_BrushTextureAlpha, put_BrushTextureAlpha)",
          "113:     FUNCTION_WRAPPER_V8_8(_put_BrushGradient,     put_BrushGradient)",
          "114:     FUNCTION_WRAPPER_V8_2(_TransformPointX,       TransformPointX)",
          "115:     FUNCTION_WRAPPER_V8_2(_TransformPointY,       TransformPointY)",
          "116:     FUNCTION_WRAPPER_V8_1(_put_LineJoin,          put_LineJoin)",
          "117:     FUNCTION_WRAPPER_V8  (_get_LineJoin,          get_LineJoin)",
          "118:     FUNCTION_WRAPPER_V8_4(_put_TextureBounds,     put_TextureBounds)",
          "119:     FUNCTION_WRAPPER_V8  (_GetlineWidth,          GetlineWidth)",
          "120:     FUNCTION_WRAPPER_V8_1(_DrawPath,              DrawPath)",
          "121:     FUNCTION_WRAPPER_V8_2(_CoordTransformOffset,  CoordTransformOffset)",
          "122:     FUNCTION_WRAPPER_V8  (_GetTransform,          GetTransform)",
          "124:     v8::Handle<v8::ObjectTemplate> CreateGraphicsTemplate(v8::Isolate* isolate)",
          "125:     {",
          "126:         v8::EscapableHandleScope handle_scope(isolate);",
          "128:         v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "129:         result->SetInternalFieldCount(1);",
          "131:         v8::Isolate* current = v8::Isolate::GetCurrent();",
          "134:         NSV8Objects::Template_Set(result, \"create\",                   _init);",
          "135:         NSV8Objects::Template_Set(result, \"Destroy\",                  _destroy);",
          "136:         NSV8Objects::Template_Set(result, \"EndDraw\",                  _EndDraw);",
          "137:         NSV8Objects::Template_Set(result, \"put_GlobalAlpha\",          _put_GlobalAlpha);",
          "138:         NSV8Objects::Template_Set(result, \"Start_GlobalAlpha\",        _Start_GlobalAlpha);",
          "139:         NSV8Objects::Template_Set(result, \"End_GlobalAlpha\",          _End_GlobalAlpha);",
          "140:         NSV8Objects::Template_Set(result, \"p_color\",                  _p_color);",
          "141:         NSV8Objects::Template_Set(result, \"p_width\",                  _p_width);",
          "142:         NSV8Objects::Template_Set(result, \"p_dash\",                   _p_dash);",
          "143:         NSV8Objects::Template_Set(result, \"b_color1\",                 _b_color1);",
          "144:         NSV8Objects::Template_Set(result, \"b_color2\",                 _b_color2);",
          "145:         NSV8Objects::Template_Set(result, \"transform\",                _transform);",
          "146:         NSV8Objects::Template_Set(result, \"CalculateFullTransform\",   _CalculateFullTransform);",
          "147:         NSV8Objects::Template_Set(result, \"_s\",                       __s);",
          "148:         NSV8Objects::Template_Set(result, \"_e\",                       __e);",
          "149:         NSV8Objects::Template_Set(result, \"_z\",                       __z);",
          "150:         NSV8Objects::Template_Set(result, \"_m\",                       __m);",
          "151:         NSV8Objects::Template_Set(result, \"_l\",                       __l);",
          "152:         NSV8Objects::Template_Set(result, \"_c\",                       __c);",
          "153:         NSV8Objects::Template_Set(result, \"_c2\",                      __c2);",
          "154:         NSV8Objects::Template_Set(result, \"ds\",                       _ds);",
          "155:         NSV8Objects::Template_Set(result, \"df\",                       _df);",
          "156:         NSV8Objects::Template_Set(result, \"save\",                     _save);",
          "157:         NSV8Objects::Template_Set(result, \"restore\",                  _restore);",
          "158:         NSV8Objects::Template_Set(result, \"clip\",                     _clip);",
          "159:         NSV8Objects::Template_Set(result, \"reset\",                    _reset);",
          "160:         NSV8Objects::Template_Set(result, \"FreeFont\",                 _FreeFont);",
          "161:         NSV8Objects::Template_Set(result, \"ClearLastFont\",            _ClearLastFont);",
          "162:         NSV8Objects::Template_Set(result, \"drawImage2\",               _drawImage2);",
          "163:         NSV8Objects::Template_Set(result, \"drawImage\",                _drawImage);",
          "164:         NSV8Objects::Template_Set(result, \"GetFont\",                  _GetFont);",
          "165:         NSV8Objects::Template_Set(result, \"font\",                     _font);",
          "166:         NSV8Objects::Template_Set(result, \"SetFont\",                  _SetFont);",
          "167:         NSV8Objects::Template_Set(result, \"GetTextPr\",                _GetTextPr);",
          "168:         NSV8Objects::Template_Set(result, \"FillText\",                 _FillText);",
          "169:         NSV8Objects::Template_Set(result, \"t\",                        _t);",
          "170:         NSV8Objects::Template_Set(result, \"FillText2\",                _FillText2);",
          "171:         NSV8Objects::Template_Set(result, \"t2\",                       _t2);",
          "172:         NSV8Objects::Template_Set(result, \"FillTextCode\",             _FillTextCode);",
          "173:         NSV8Objects::Template_Set(result, \"tg\",                       _tg);",
          "174:         NSV8Objects::Template_Set(result, \"charspace\",                _charspace);",
          "175:         NSV8Objects::Template_Set(result, \"private_FillGlyph\",        _private_FillGlyph);",
          "176:         NSV8Objects::Template_Set(result, \"private_FillGlyphC\",       _private_FillGlyphC);",
          "177:         NSV8Objects::Template_Set(result, \"private_FillGlyph2\",       _private_FillGlyph2);",
          "178:         NSV8Objects::Template_Set(result, \"SetIntegerGrid\",           _SetIntegerGrid);",
          "179:         NSV8Objects::Template_Set(result, \"GetIntegerGrid\",           _GetIntegerGrid);",
          "180:         NSV8Objects::Template_Set(result, \"DrawStringASCII\",          _DrawStringASCII);",
          "181:         NSV8Objects::Template_Set(result, \"DrawStringASCII2\",         _DrawStringASCII2);",
          "182:         NSV8Objects::Template_Set(result, \"DrawHeaderEdit\",           _DrawHeaderEdit);",
          "183:         NSV8Objects::Template_Set(result, \"DrawFooterEdit\",           _DrawFooterEdit);",
          "184:         NSV8Objects::Template_Set(result, \"DrawLockParagraph\",        _DrawLockParagraph);",
          "185:         NSV8Objects::Template_Set(result, \"DrawLockObjectRect\",       _DrawLockObjectRect);",
          "186:         NSV8Objects::Template_Set(result, \"DrawEmptyTableLine\",       _DrawEmptyTableLine);",
          "187:         NSV8Objects::Template_Set(result, \"DrawSpellingLine\",         _DrawSpellingLine);",
          "188:         NSV8Objects::Template_Set(result, \"drawHorLine\",              _drawHorLine);",
          "189:         NSV8Objects::Template_Set(result, \"drawHorLine2\",             _drawHorLine2);",
          "190:         NSV8Objects::Template_Set(result, \"drawVerLine\",              _drawVerLine);",
          "191:         NSV8Objects::Template_Set(result, \"drawHorLineExt\",           _drawHorLineExt);",
          "192:         NSV8Objects::Template_Set(result, \"rect\",                     _rect);",
          "193:         NSV8Objects::Template_Set(result, \"TableRect\",                _TableRect);",
          "194:         NSV8Objects::Template_Set(result, \"AddClipRect\",              _AddClipRect);",
          "195:         NSV8Objects::Template_Set(result, \"RemoveClipRect\",           _RemoveClipRect);",
          "196:         NSV8Objects::Template_Set(result, \"SetClip\",                  _SetClip);",
          "197:         NSV8Objects::Template_Set(result, \"RemoveClip\",               _RemoveClip);",
          "198:         NSV8Objects::Template_Set(result, \"drawMailMergeField\",       _drawMailMergeField);",
          "199:         NSV8Objects::Template_Set(result, \"drawSearchResult\",         _drawSearchResult);",
          "200:         NSV8Objects::Template_Set(result, \"drawFlowAnchor\",           _drawFlowAnchor);",
          "201:         NSV8Objects::Template_Set(result, \"SavePen\",                  _SavePen);",
          "202:         NSV8Objects::Template_Set(result, \"RestorePen\",               _RestorePen);",
          "203:         NSV8Objects::Template_Set(result, \"SaveBrush\",                _SaveBrush);",
          "204:         NSV8Objects::Template_Set(result, \"RestoreBrush\",             _RestoreBrush);",
          "205:         NSV8Objects::Template_Set(result, \"SavePenBrush\",             _SavePenBrush);",
          "206:         NSV8Objects::Template_Set(result, \"RestorePenBrush\",          _RestorePenBrush);",
          "207:         NSV8Objects::Template_Set(result, \"SaveGrState\",              _SaveGrState);",
          "208:         NSV8Objects::Template_Set(result, \"RestoreGrState\",           _RestoreGrState);",
          "209:         NSV8Objects::Template_Set(result, \"StartClipPath\",            _StartClipPath);",
          "210:         NSV8Objects::Template_Set(result, \"EndClipPath\",              _EndClipPath);",
          "211:         NSV8Objects::Template_Set(result, \"StartCheckTableDraw\",      _StartCheckTableDraw);",
          "212:         NSV8Objects::Template_Set(result, \"SetTextClipRect\",          _SetTextClipRect);",
          "213:         NSV8Objects::Template_Set(result, \"AddSmartRect\",             _AddSmartRect);",
          "214:         NSV8Objects::Template_Set(result, \"CheckUseFonts2\",           _CheckUseFonts2);",
          "215:         NSV8Objects::Template_Set(result, \"UncheckUseFonts2\",         _UncheckUseFonts2);",
          "216:         NSV8Objects::Template_Set(result, \"Drawing_StartCheckBounds\", _Drawing_StartCheckBounds);",
          "217:         NSV8Objects::Template_Set(result, \"Drawing_EndCheckBounds\",   _Drawing_EndCheckBounds);",
          "218:         NSV8Objects::Template_Set(result, \"DrawPresentationComment\",  _DrawPresentationComment);",
          "219:         NSV8Objects::Template_Set(result, \"DrawPolygon\",              _DrawPolygon);",
          "220:         NSV8Objects::Template_Set(result, \"DrawFootnoteRect\",         _DrawFootnoteRect);",
          "221:         NSV8Objects::Template_Set(result, \"toDataURL\",                _toDataURL);",
          "222:         NSV8Objects::Template_Set(result, \"GetPenColor\",              _GetPenColor);",
          "223:         NSV8Objects::Template_Set(result, \"GetBrushColor\",            _GetBrushColor);",
          "224:         NSV8Objects::Template_Set(result, \"put_brushTexture\",         _put_brushTexture);",
          "225:         NSV8Objects::Template_Set(result, \"put_brushTextureMode\",     _put_brushTextureMode);",
          "226:         NSV8Objects::Template_Set(result, \"put_BrushTextureAlpha\",    _put_BrushTextureAlpha);",
          "227:         NSV8Objects::Template_Set(result, \"put_BrushGradient\",        _put_BrushGradient);",
          "228:         NSV8Objects::Template_Set(result, \"TransformPointX\",          _TransformPointX);",
          "229:         NSV8Objects::Template_Set(result, \"TransformPointY\",          _TransformPointY);",
          "230:         NSV8Objects::Template_Set(result, \"put_LineJoin\",             _put_LineJoin);",
          "231:         NSV8Objects::Template_Set(result, \"get_LineJoin\",             _get_LineJoin);",
          "232:         NSV8Objects::Template_Set(result, \"put_TextureBounds\",        _put_TextureBounds);",
          "233:         NSV8Objects::Template_Set(result, \"GetlineWidth\",             _GetlineWidth);",
          "234:         NSV8Objects::Template_Set(result, \"DrawPath\",                 _DrawPath);",
          "235:         NSV8Objects::Template_Set(result, \"CoordTransformOffset\",     _CoordTransformOffset);",
          "236:         NSV8Objects::Template_Set(result, \"GetTransform\",             _GetTransform);",
          "238:         return handle_scope.Escape(result);",
          "239:     }",
          "241:     void CreateNativeGraphics(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "242:     {",
          "243:         v8::Isolate* isolate = args.GetIsolate();",
          "244:         v8::HandleScope scope(isolate);",
          "246:         v8::Handle<v8::ObjectTemplate> GraphicsTemplate = NSGraphics::CreateGraphicsTemplate(isolate);",
          "247:         CGraphicsEmbed* pGraphics = new CGraphicsEmbed();",
          "249:         v8::Local<v8::Object> obj = GraphicsTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "250:         obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pGraphics));",
          "252:   NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "254:         args.GetReturnValue().Set(obj);",
          "255:     }",
          "",
          "[Added Lines]",
          "6: #define CURRENTWRAPPER CGraphicsEmbed",
          "9:  FUNCTION_WRAPPER_V8_5(_init,              init)",
          "10:  FUNCTION_WRAPPER_V8  (_destroy,           Destroy)",
          "11:  FUNCTION_WRAPPER_V8  (_EndDraw,           EndDraw)",
          "12:  FUNCTION_WRAPPER_V8_2(_put_GlobalAlpha,   put_GlobalAlpha)",
          "13:  FUNCTION_WRAPPER_V8  (_Start_GlobalAlpha, Start_GlobalAlpha)",
          "14:  FUNCTION_WRAPPER_V8  (_End_GlobalAlpha,   End_GlobalAlpha)",
          "16:  FUNCTION_WRAPPER_V8_4(_p_color, p_color)",
          "17:  FUNCTION_WRAPPER_V8_1(_p_width, p_width)",
          "18:  FUNCTION_WRAPPER_V8_1(_p_dash,  p_dash)",
          "20:  FUNCTION_WRAPPER_V8_4(_b_color1,               b_color1)",
          "21:  FUNCTION_WRAPPER_V8_4(_b_color2,               b_color2)",
          "22:  FUNCTION_WRAPPER_V8_6(_transform,              transform)",
          "23:  FUNCTION_WRAPPER_V8_1(_CalculateFullTransform, CalculateFullTransform)",
          "25:  FUNCTION_WRAPPER_V8  (__s,  _s)",
          "26:  FUNCTION_WRAPPER_V8  (__e,  _e)",
          "27:  FUNCTION_WRAPPER_V8  (__z,  _z)",
          "28:  FUNCTION_WRAPPER_V8_2(__m,  _m)",
          "29:  FUNCTION_WRAPPER_V8_2(__l,  _l)",
          "30:  FUNCTION_WRAPPER_V8_6(__c,  _c)",
          "31:  FUNCTION_WRAPPER_V8_4(__c2, _c2)",
          "32:  FUNCTION_WRAPPER_V8  (_ds,  ds)",
          "33:  FUNCTION_WRAPPER_V8  (_df,  df)",
          "35:  FUNCTION_WRAPPER_V8  (_save,          save)",
          "36:  FUNCTION_WRAPPER_V8  (_restore,       restore)",
          "37:  FUNCTION_WRAPPER_V8  (_clip,          clip)",
          "38:  FUNCTION_WRAPPER_V8  (_reset,         reset)",
          "39:  FUNCTION_WRAPPER_V8  (_FreeFont,      FreeFont)",
          "40:  FUNCTION_WRAPPER_V8  (_ClearLastFont, ClearLastFont)",
          "42:  FUNCTION_WRAPPER_V8_7(_drawImage2, drawImage2)",
          "43:  FUNCTION_WRAPPER_V8_8(_drawImage,  drawImage)",
          "45:  FUNCTION_WRAPPER_V8  (_GetFont,      GetFont)",
          "46:  FUNCTION_WRAPPER_V8_2(_font,         font)",
          "47:  FUNCTION_WRAPPER_V8_4(_SetFont,      SetFont)",
          "48:  FUNCTION_WRAPPER_V8  (_GetTextPr,    GetTextPr)",
          "49:  FUNCTION_WRAPPER_V8_3(_FillText,     FillText)",
          "50:  FUNCTION_WRAPPER_V8_3(_t,            t)",
          "51:  FUNCTION_WRAPPER_V8_5(_FillText2,    FillText2)",
          "52:  FUNCTION_WRAPPER_V8_5(_t2,           t2)",
          "53:  FUNCTION_WRAPPER_V8_3(_FillTextCode, FillTextCode)",
          "54:  FUNCTION_WRAPPER_V8_3(_tg,           tg)",
          "55:  FUNCTION_WRAPPER_V8_1(_charspace,    charspace)",
          "57:  FUNCTION_WRAPPER_V8_2(_private_FillGlyph,  private_FillGlyph)",
          "58:  FUNCTION_WRAPPER_V8_3(_private_FillGlyphC, private_FillGlyphC)",
          "59:  FUNCTION_WRAPPER_V8_1(_private_FillGlyph2, private_FillGlyph2)",
          "60:  FUNCTION_WRAPPER_V8_1(_SetIntegerGrid,     SetIntegerGrid)",
          "61:  FUNCTION_WRAPPER_V8  (_GetIntegerGrid,     GetIntegerGrid)",
          "62:  FUNCTION_WRAPPER_V8_3(_DrawStringASCII,    DrawStringASCII)",
          "63:  FUNCTION_WRAPPER_V8_3(_DrawStringASCII2,   DrawStringASCII2)",
          "64:  FUNCTION_WRAPPER_V8_5(_DrawHeaderEdit,     DrawHeaderEdit)",
          "65:  FUNCTION_WRAPPER_V8_5(_DrawFooterEdit,     DrawFooterEdit)",
          "66:  FUNCTION_WRAPPER_V8_3(_DrawLockParagraph,  DrawLockParagraph)",
          "67:  FUNCTION_WRAPPER_V8_4(_DrawLockObjectRect, DrawLockObjectRect)",
          "68:  FUNCTION_WRAPPER_V8_4(_DrawEmptyTableLine, DrawEmptyTableLine)",
          "69:  FUNCTION_WRAPPER_V8_4(_DrawSpellingLine,   DrawSpellingLine)",
          "71:  FUNCTION_WRAPPER_V8_5(_drawHorLine,  drawHorLine)",
          "72:  FUNCTION_WRAPPER_V8_5(_drawHorLine2, drawHorLine2)",
          "73:  FUNCTION_WRAPPER_V8_5(_drawVerLine,  drawVerLine)",
          "75:  FUNCTION_WRAPPER_V8_7(_drawHorLineExt, drawHorLineExt)",
          "76:  FUNCTION_WRAPPER_V8_4(_rect,           rect)",
          "77:  FUNCTION_WRAPPER_V8_4(_TableRect,      TableRect)",
          "79:  FUNCTION_WRAPPER_V8_4(_AddClipRect,              AddClipRect)",
          "80:  FUNCTION_WRAPPER_V8  (_RemoveClipRect,           RemoveClipRect)",
          "81:  FUNCTION_WRAPPER_V8_4(_SetClip,                  SetClip)",
          "82:  FUNCTION_WRAPPER_V8  (_RemoveClip,               RemoveClip)",
          "83:  FUNCTION_WRAPPER_V8_4(_drawMailMergeField,       drawMailMergeField)",
          "84:  FUNCTION_WRAPPER_V8_4(_drawSearchResult,         drawSearchResult)",
          "85:  FUNCTION_WRAPPER_V8_2(_drawFlowAnchor,           drawFlowAnchor)",
          "86:  FUNCTION_WRAPPER_V8  (_SavePen,                  SavePen)",
          "87:  FUNCTION_WRAPPER_V8  (_RestorePen,               RestorePen)",
          "88:  FUNCTION_WRAPPER_V8  (_SaveBrush,                SaveBrush)",
          "89:  FUNCTION_WRAPPER_V8  (_RestoreBrush,             RestoreBrush)",
          "90:  FUNCTION_WRAPPER_V8  (_SavePenBrush,             SavePenBrush)",
          "91:  FUNCTION_WRAPPER_V8  (_RestorePenBrush,          RestorePenBrush)",
          "92:  FUNCTION_WRAPPER_V8  (_SaveGrState,              SaveGrState)",
          "93:  FUNCTION_WRAPPER_V8  (_RestoreGrState,           RestoreGrState)",
          "94:  FUNCTION_WRAPPER_V8  (_StartClipPath,            StartClipPath)",
          "95:  FUNCTION_WRAPPER_V8  (_EndClipPath,              EndClipPath)",
          "96:  FUNCTION_WRAPPER_V8  (_StartCheckTableDraw,      StartCheckTableDraw)",
          "97:  FUNCTION_WRAPPER_V8_4(_SetTextClipRect,          SetTextClipRect)",
          "98:  FUNCTION_WRAPPER_V8_5(_AddSmartRect,             AddSmartRect)",
          "99:  FUNCTION_WRAPPER_V8_1(_CheckUseFonts2,           CheckUseFonts2)",
          "100:  FUNCTION_WRAPPER_V8  (_UncheckUseFonts2,         UncheckUseFonts2)",
          "101:  FUNCTION_WRAPPER_V8_4(_Drawing_StartCheckBounds, Drawing_StartCheckBounds)",
          "102:  FUNCTION_WRAPPER_V8  (_Drawing_EndCheckBounds,   Drawing_EndCheckBounds)",
          "103:  FUNCTION_WRAPPER_V8_5(_DrawPresentationComment,  DrawPresentationComment)",
          "104:  FUNCTION_WRAPPER_V8_3(_DrawPolygon,              DrawPolygon)",
          "105:  FUNCTION_WRAPPER_V8_4(_DrawFootnoteRect,         DrawFootnoteRect)",
          "107:  FUNCTION_WRAPPER_V8_1(_toDataURL,             toDataURL)",
          "108:  FUNCTION_WRAPPER_V8  (_GetPenColor,           GetPenColor)",
          "109:  FUNCTION_WRAPPER_V8  (_GetBrushColor,         GetBrushColor)",
          "110:  FUNCTION_WRAPPER_V8_2(_put_brushTexture,      put_brushTexture)",
          "111:  FUNCTION_WRAPPER_V8_1(_put_brushTextureMode,  put_brushTextureMode)",
          "112:  FUNCTION_WRAPPER_V8_1(_put_BrushTextureAlpha, put_BrushTextureAlpha)",
          "113:  FUNCTION_WRAPPER_V8_8(_put_BrushGradient,     put_BrushGradient)",
          "114:  FUNCTION_WRAPPER_V8_2(_TransformPointX,       TransformPointX)",
          "115:  FUNCTION_WRAPPER_V8_2(_TransformPointY,       TransformPointY)",
          "116:  FUNCTION_WRAPPER_V8_1(_put_LineJoin,          put_LineJoin)",
          "117:  FUNCTION_WRAPPER_V8  (_get_LineJoin,          get_LineJoin)",
          "118:  FUNCTION_WRAPPER_V8_4(_put_TextureBounds,     put_TextureBounds)",
          "119:  FUNCTION_WRAPPER_V8  (_GetlineWidth,          GetlineWidth)",
          "120:  FUNCTION_WRAPPER_V8_1(_DrawPath,              DrawPath)",
          "121:  FUNCTION_WRAPPER_V8_2(_CoordTransformOffset,  CoordTransformOffset)",
          "122:  FUNCTION_WRAPPER_V8  (_GetTransform,          GetTransform)",
          "124:  v8::Handle<v8::ObjectTemplate> CreateGraphicsTemplate(v8::Isolate* isolate)",
          "125:  {",
          "126:   v8::EscapableHandleScope handle_scope(isolate);",
          "128:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "129:   result->SetInternalFieldCount(1);",
          "131:   v8::Isolate* current = v8::Isolate::GetCurrent();",
          "134:   NSV8Objects::Template_Set(result, \"create\",                   _init);",
          "135:   NSV8Objects::Template_Set(result, \"Destroy\",                  _destroy);",
          "136:   NSV8Objects::Template_Set(result, \"EndDraw\",                  _EndDraw);",
          "137:   NSV8Objects::Template_Set(result, \"put_GlobalAlpha\",          _put_GlobalAlpha);",
          "138:   NSV8Objects::Template_Set(result, \"Start_GlobalAlpha\",        _Start_GlobalAlpha);",
          "139:   NSV8Objects::Template_Set(result, \"End_GlobalAlpha\",          _End_GlobalAlpha);",
          "140:   NSV8Objects::Template_Set(result, \"p_color\",                  _p_color);",
          "141:   NSV8Objects::Template_Set(result, \"p_width\",                  _p_width);",
          "142:   NSV8Objects::Template_Set(result, \"p_dash\",                   _p_dash);",
          "143:   NSV8Objects::Template_Set(result, \"b_color1\",                 _b_color1);",
          "144:   NSV8Objects::Template_Set(result, \"b_color2\",                 _b_color2);",
          "145:   NSV8Objects::Template_Set(result, \"transform\",                _transform);",
          "146:   NSV8Objects::Template_Set(result, \"CalculateFullTransform\",   _CalculateFullTransform);",
          "147:   NSV8Objects::Template_Set(result, \"_s\",                       __s);",
          "148:   NSV8Objects::Template_Set(result, \"_e\",                       __e);",
          "149:   NSV8Objects::Template_Set(result, \"_z\",                       __z);",
          "150:   NSV8Objects::Template_Set(result, \"_m\",                       __m);",
          "151:   NSV8Objects::Template_Set(result, \"_l\",                       __l);",
          "152:   NSV8Objects::Template_Set(result, \"_c\",                       __c);",
          "153:   NSV8Objects::Template_Set(result, \"_c2\",                      __c2);",
          "154:   NSV8Objects::Template_Set(result, \"ds\",                       _ds);",
          "155:   NSV8Objects::Template_Set(result, \"df\",                       _df);",
          "156:   NSV8Objects::Template_Set(result, \"save\",                     _save);",
          "157:   NSV8Objects::Template_Set(result, \"restore\",                  _restore);",
          "158:   NSV8Objects::Template_Set(result, \"clip\",                     _clip);",
          "159:   NSV8Objects::Template_Set(result, \"reset\",                    _reset);",
          "160:   NSV8Objects::Template_Set(result, \"FreeFont\",                 _FreeFont);",
          "161:   NSV8Objects::Template_Set(result, \"ClearLastFont\",            _ClearLastFont);",
          "162:   NSV8Objects::Template_Set(result, \"drawImage2\",               _drawImage2);",
          "163:   NSV8Objects::Template_Set(result, \"drawImage\",                _drawImage);",
          "164:   NSV8Objects::Template_Set(result, \"GetFont\",                  _GetFont);",
          "165:   NSV8Objects::Template_Set(result, \"font\",                     _font);",
          "166:   NSV8Objects::Template_Set(result, \"SetFont\",                  _SetFont);",
          "167:   NSV8Objects::Template_Set(result, \"GetTextPr\",                _GetTextPr);",
          "168:   NSV8Objects::Template_Set(result, \"FillText\",                 _FillText);",
          "169:   NSV8Objects::Template_Set(result, \"t\",                        _t);",
          "170:   NSV8Objects::Template_Set(result, \"FillText2\",                _FillText2);",
          "171:   NSV8Objects::Template_Set(result, \"t2\",                       _t2);",
          "172:   NSV8Objects::Template_Set(result, \"FillTextCode\",             _FillTextCode);",
          "173:   NSV8Objects::Template_Set(result, \"tg\",                       _tg);",
          "174:   NSV8Objects::Template_Set(result, \"charspace\",                _charspace);",
          "175:   NSV8Objects::Template_Set(result, \"private_FillGlyph\",        _private_FillGlyph);",
          "176:   NSV8Objects::Template_Set(result, \"private_FillGlyphC\",       _private_FillGlyphC);",
          "177:   NSV8Objects::Template_Set(result, \"private_FillGlyph2\",       _private_FillGlyph2);",
          "178:   NSV8Objects::Template_Set(result, \"SetIntegerGrid\",           _SetIntegerGrid);",
          "179:   NSV8Objects::Template_Set(result, \"GetIntegerGrid\",           _GetIntegerGrid);",
          "180:   NSV8Objects::Template_Set(result, \"DrawStringASCII\",          _DrawStringASCII);",
          "181:   NSV8Objects::Template_Set(result, \"DrawStringASCII2\",         _DrawStringASCII2);",
          "182:   NSV8Objects::Template_Set(result, \"DrawHeaderEdit\",           _DrawHeaderEdit);",
          "183:   NSV8Objects::Template_Set(result, \"DrawFooterEdit\",           _DrawFooterEdit);",
          "184:   NSV8Objects::Template_Set(result, \"DrawLockParagraph\",        _DrawLockParagraph);",
          "185:   NSV8Objects::Template_Set(result, \"DrawLockObjectRect\",       _DrawLockObjectRect);",
          "186:   NSV8Objects::Template_Set(result, \"DrawEmptyTableLine\",       _DrawEmptyTableLine);",
          "187:   NSV8Objects::Template_Set(result, \"DrawSpellingLine\",         _DrawSpellingLine);",
          "188:   NSV8Objects::Template_Set(result, \"drawHorLine\",              _drawHorLine);",
          "189:   NSV8Objects::Template_Set(result, \"drawHorLine2\",             _drawHorLine2);",
          "190:   NSV8Objects::Template_Set(result, \"drawVerLine\",              _drawVerLine);",
          "191:   NSV8Objects::Template_Set(result, \"drawHorLineExt\",           _drawHorLineExt);",
          "192:   NSV8Objects::Template_Set(result, \"rect\",                     _rect);",
          "193:   NSV8Objects::Template_Set(result, \"TableRect\",                _TableRect);",
          "194:   NSV8Objects::Template_Set(result, \"AddClipRect\",              _AddClipRect);",
          "195:   NSV8Objects::Template_Set(result, \"RemoveClipRect\",           _RemoveClipRect);",
          "196:   NSV8Objects::Template_Set(result, \"SetClip\",                  _SetClip);",
          "197:   NSV8Objects::Template_Set(result, \"RemoveClip\",               _RemoveClip);",
          "198:   NSV8Objects::Template_Set(result, \"drawMailMergeField\",       _drawMailMergeField);",
          "199:   NSV8Objects::Template_Set(result, \"drawSearchResult\",         _drawSearchResult);",
          "200:   NSV8Objects::Template_Set(result, \"drawFlowAnchor\",           _drawFlowAnchor);",
          "201:   NSV8Objects::Template_Set(result, \"SavePen\",                  _SavePen);",
          "202:   NSV8Objects::Template_Set(result, \"RestorePen\",               _RestorePen);",
          "203:   NSV8Objects::Template_Set(result, \"SaveBrush\",                _SaveBrush);",
          "204:   NSV8Objects::Template_Set(result, \"RestoreBrush\",             _RestoreBrush);",
          "205:   NSV8Objects::Template_Set(result, \"SavePenBrush\",             _SavePenBrush);",
          "206:   NSV8Objects::Template_Set(result, \"RestorePenBrush\",          _RestorePenBrush);",
          "207:   NSV8Objects::Template_Set(result, \"SaveGrState\",              _SaveGrState);",
          "208:   NSV8Objects::Template_Set(result, \"RestoreGrState\",           _RestoreGrState);",
          "209:   NSV8Objects::Template_Set(result, \"StartClipPath\",            _StartClipPath);",
          "210:   NSV8Objects::Template_Set(result, \"EndClipPath\",              _EndClipPath);",
          "211:   NSV8Objects::Template_Set(result, \"StartCheckTableDraw\",      _StartCheckTableDraw);",
          "212:   NSV8Objects::Template_Set(result, \"SetTextClipRect\",          _SetTextClipRect);",
          "213:   NSV8Objects::Template_Set(result, \"AddSmartRect\",             _AddSmartRect);",
          "214:   NSV8Objects::Template_Set(result, \"CheckUseFonts2\",           _CheckUseFonts2);",
          "215:   NSV8Objects::Template_Set(result, \"UncheckUseFonts2\",         _UncheckUseFonts2);",
          "216:   NSV8Objects::Template_Set(result, \"Drawing_StartCheckBounds\", _Drawing_StartCheckBounds);",
          "217:   NSV8Objects::Template_Set(result, \"Drawing_EndCheckBounds\",   _Drawing_EndCheckBounds);",
          "218:   NSV8Objects::Template_Set(result, \"DrawPresentationComment\",  _DrawPresentationComment);",
          "219:   NSV8Objects::Template_Set(result, \"DrawPolygon\",              _DrawPolygon);",
          "220:   NSV8Objects::Template_Set(result, \"DrawFootnoteRect\",         _DrawFootnoteRect);",
          "221:   NSV8Objects::Template_Set(result, \"toDataURL\",                _toDataURL);",
          "222:   NSV8Objects::Template_Set(result, \"GetPenColor\",              _GetPenColor);",
          "223:   NSV8Objects::Template_Set(result, \"GetBrushColor\",            _GetBrushColor);",
          "224:   NSV8Objects::Template_Set(result, \"put_brushTexture\",         _put_brushTexture);",
          "225:   NSV8Objects::Template_Set(result, \"put_brushTextureMode\",     _put_brushTextureMode);",
          "226:   NSV8Objects::Template_Set(result, \"put_BrushTextureAlpha\",    _put_BrushTextureAlpha);",
          "227:   NSV8Objects::Template_Set(result, \"put_BrushGradient\",        _put_BrushGradient);",
          "228:   NSV8Objects::Template_Set(result, \"TransformPointX\",          _TransformPointX);",
          "229:   NSV8Objects::Template_Set(result, \"TransformPointY\",          _TransformPointY);",
          "230:   NSV8Objects::Template_Set(result, \"put_LineJoin\",             _put_LineJoin);",
          "231:   NSV8Objects::Template_Set(result, \"get_LineJoin\",             _get_LineJoin);",
          "232:   NSV8Objects::Template_Set(result, \"put_TextureBounds\",        _put_TextureBounds);",
          "233:   NSV8Objects::Template_Set(result, \"GetlineWidth\",             _GetlineWidth);",
          "234:   NSV8Objects::Template_Set(result, \"DrawPath\",                 _DrawPath);",
          "235:   NSV8Objects::Template_Set(result, \"CoordTransformOffset\",     _CoordTransformOffset);",
          "236:   NSV8Objects::Template_Set(result, \"GetTransform\",             _GetTransform);",
          "238:   return handle_scope.Escape(result);",
          "239:  }",
          "241:  void CreateNativeGraphics(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "242:  {",
          "243:   CreateNativeInternalField(new CGraphicsEmbed(), NSGraphics::CreateGraphicsTemplate, args);",
          "244:  }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp||DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_MemoryStream.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: namespace NSMemoryStream",
          "5: {",
          "66: void CMemoryStreamEmbed::CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context)",
          "67: {",
          "",
          "[Removed Lines]",
          "6:     #define CURRENTWRAPPER CMemoryStreamEmbed",
          "8:     FUNCTION_WRAPPER_V8_1(_ms_write_byte, WriteByte)",
          "9:     FUNCTION_WRAPPER_V8_1(_ms_write_bool, WriteBool)",
          "10:     FUNCTION_WRAPPER_V8_1(_ms_write_long, WriteLong)",
          "11:     FUNCTION_WRAPPER_V8_1(_ms_write_double, WriteDouble)",
          "12:     FUNCTION_WRAPPER_V8_1(_ms_write_double2, WriteDouble2)",
          "13:     FUNCTION_WRAPPER_V8_1(_ms_writestringA, WriteStringA)",
          "14:     FUNCTION_WRAPPER_V8_1(_ms_writestring1, WriteString)",
          "15:     FUNCTION_WRAPPER_V8_1(_ms_writestring2, WriteString2)",
          "16:     FUNCTION_WRAPPER_V8_3(_ms_copy, Copy)",
          "17:     FUNCTION_WRAPPER_V8(_ms_clearnoattack, ClearNoAttack)",
          "19:     void _ms_pos(v8::Local<v8::String> name, const v8::PropertyCallbackInfo<v8::Value>& args)",
          "20:     {",
          "21:         CMemoryStreamEmbed* _this = (CMemoryStreamEmbed*)unwrap_native(args.This());",
          "22:         args.GetReturnValue().Set(v8::Integer::New(CV8Worker::GetCurrent(), _this->m_pInternal->GetSize()));",
          "23:     }",
          "25:     v8::Handle<v8::ObjectTemplate> CreateMemoryStreamTemplate(v8::Isolate* isolate)",
          "26:     {",
          "27:         v8::EscapableHandleScope handle_scope(isolate);",
          "29:         v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(V8IsolateOneArg);",
          "30:         result->SetInternalFieldCount(1);",
          "33:         result->SetAccessor(CreateV8String(CV8Worker::GetCurrent(), \"pos\"), _ms_pos);",
          "35:         NSV8Objects::Template_Set(result, \"Copy\",   _ms_copy);",
          "36:         NSV8Objects::Template_Set(result, \"ClearNoAttack\",  _ms_clearnoattack);",
          "37:         NSV8Objects::Template_Set(result, \"WriteByte\",  _ms_write_byte);",
          "38:         NSV8Objects::Template_Set(result, \"WriteBool\",  _ms_write_bool);",
          "39:         NSV8Objects::Template_Set(result, \"WriteLong\",  _ms_write_long);",
          "40:         NSV8Objects::Template_Set(result, \"WriteDouble\", _ms_write_double);",
          "41:         NSV8Objects::Template_Set(result, \"WriteDouble2\", _ms_write_double2);",
          "42:         NSV8Objects::Template_Set(result, \"WriteStringA\", _ms_writestringA);",
          "43:         NSV8Objects::Template_Set(result, \"WriteString\", _ms_writestring1);",
          "44:         NSV8Objects::Template_Set(result, \"WriteString2\", _ms_writestring2);",
          "46:         return handle_scope.Escape(result);",
          "47:     }",
          "49:     void CreateNativeMemoryStream(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "50:     {",
          "51:         v8::Isolate* isolate = args.GetIsolate();",
          "52:         v8::HandleScope scope(isolate);",
          "54:         v8::Handle<v8::ObjectTemplate> MemoryObjectTemplate = NSMemoryStream::CreateMemoryStreamTemplate(isolate);",
          "55:         CMemoryStreamEmbed* pMemoryObject = new CMemoryStreamEmbed();",
          "57:         v8::Local<v8::Object> obj = MemoryObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "58:         obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pMemoryObject));",
          "60:         NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "62:         args.GetReturnValue().Set(obj);",
          "63:     }",
          "64:   }",
          "",
          "[Added Lines]",
          "6: #define CURRENTWRAPPER CMemoryStreamEmbed",
          "8:  FUNCTION_WRAPPER_V8_1(_ms_write_byte, WriteByte)",
          "9:  FUNCTION_WRAPPER_V8_1(_ms_write_bool, WriteBool)",
          "10:  FUNCTION_WRAPPER_V8_1(_ms_write_long, WriteLong)",
          "11:  FUNCTION_WRAPPER_V8_1(_ms_write_double, WriteDouble)",
          "12:  FUNCTION_WRAPPER_V8_1(_ms_write_double2, WriteDouble2)",
          "13:  FUNCTION_WRAPPER_V8_1(_ms_writestringA, WriteStringA)",
          "14:  FUNCTION_WRAPPER_V8_1(_ms_writestring1, WriteString)",
          "15:  FUNCTION_WRAPPER_V8_1(_ms_writestring2, WriteString2)",
          "16:  FUNCTION_WRAPPER_V8_3(_ms_copy, Copy)",
          "17:  FUNCTION_WRAPPER_V8(_ms_clearnoattack, ClearNoAttack)",
          "19:  void _ms_pos(v8::Local<v8::String> name, const v8::PropertyCallbackInfo<v8::Value>& args)",
          "20:  {",
          "21:   CMemoryStreamEmbed* _this = (CMemoryStreamEmbed*)unwrap_native(args.This());",
          "22:   args.GetReturnValue().Set(v8::Integer::New(CV8Worker::GetCurrent(), _this->m_pInternal->GetSize()));",
          "23:  }",
          "25:  v8::Handle<v8::ObjectTemplate> CreateMemoryStreamTemplate(v8::Isolate* isolate)",
          "26:  {",
          "27:   v8::EscapableHandleScope handle_scope(isolate);",
          "29:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(V8IsolateOneArg);",
          "30:   result->SetInternalFieldCount(1);",
          "33:   result->SetAccessor(CreateV8String(CV8Worker::GetCurrent(), \"pos\"), _ms_pos);",
          "35:   NSV8Objects::Template_Set(result, \"Copy\",   _ms_copy);",
          "36:   NSV8Objects::Template_Set(result, \"ClearNoAttack\",  _ms_clearnoattack);",
          "37:   NSV8Objects::Template_Set(result, \"WriteByte\",  _ms_write_byte);",
          "38:   NSV8Objects::Template_Set(result, \"WriteBool\",  _ms_write_bool);",
          "39:   NSV8Objects::Template_Set(result, \"WriteLong\",  _ms_write_long);",
          "40:   NSV8Objects::Template_Set(result, \"WriteDouble\", _ms_write_double);",
          "41:   NSV8Objects::Template_Set(result, \"WriteDouble2\", _ms_write_double2);",
          "42:   NSV8Objects::Template_Set(result, \"WriteStringA\", _ms_writestringA);",
          "43:   NSV8Objects::Template_Set(result, \"WriteString\", _ms_writestring1);",
          "44:   NSV8Objects::Template_Set(result, \"WriteString2\", _ms_writestring2);",
          "46:   return handle_scope.Escape(result);",
          "47:  }",
          "49:  void CreateNativeMemoryStream(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "50:  {",
          "51:   CreateNativeInternalField(new CMemoryStreamEmbed(), NSMemoryStream::CreateMemoryStreamTemplate, args);",
          "52:  }",
          "53: }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_NativeBuilder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: v8::Local<v8::Value> _builder_CreateNativeTmpDoc(v8::Isolate* isolate, NSDoctRenderer::CDocBuilder* pBuilder, const std::wstring& sFile, const std::wstring& sParams)",
          "55: {",
          "73: }",
          "74: v8::Local<v8::Value> _builder_CreateNative(v8::Isolate* isolate, NSDoctRenderer::CDocBuilder* builder)",
          "75: {",
          "93: }",
          "95: void builder_CreateNativeTmpDoc(const std::string& name, JSSmart<CJSContext> context, NSDoctRenderer::CDocBuilder* builder, const std::wstring& sFile, const std::wstring& sParams)",
          "96: {",
          "99: }",
          "100: void builder_CreateNative      (const std::string& name, JSSmart<CJSContext> context, NSDoctRenderer::CDocBuilder* builder)",
          "101: {",
          "104: }",
          "106: JSSmart<CJSValue> CBuilderEmbed::builder_OpenTmpFile(JSSmart<CJSValue> path, JSSmart<CJSValue> params)",
          "107: {",
          "114: }",
          "",
          "[Removed Lines]",
          "56:     v8::Local<v8::ObjectTemplate> _template = v8::ObjectTemplate::New(isolate);",
          "57:     _template->SetInternalFieldCount(1); // \u043e\u0442\u0432\u043e\u0434\u0438\u043c \u0432 \u043d\u0435\u043c \u043c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f CNativeControl",
          "59:     NSV8Objects::Template_Set(_template, \"IsValid\",     _builder_doc_IsValid);",
          "60:     NSV8Objects::Template_Set(_template, \"GetBinary\",   _builder_doc_GetBinary);",
          "61:     NSV8Objects::Template_Set(_template, \"GetFolder\",   _builder_doc_GetFolder);",
          "62:     NSV8Objects::Template_Set(_template, \"Close\",       _builder_doc_CloseFile);",
          "63:     NSV8Objects::Template_Set(_template, \"GetImageMap\", _builder_doc_GetImageMap);",
          "65:     CBuilderDocumentEmbed* _embed = new CBuilderDocumentEmbed();",
          "66:     _embed->m_pBuilder = pBuilder;",
          "67:     _embed->OpenFile(sFile, sParams);",
          "69:     v8::Local<v8::Object> obj = _template->NewInstance(V8ContextOneArg).ToLocalChecked();",
          "70:     obj->SetInternalField(0, v8::External::New(isolate, _embed));",
          "72:     return obj;",
          "76:     v8::Local<v8::ObjectTemplate> _template = v8::ObjectTemplate::New(isolate);",
          "77:     _template->SetInternalFieldCount(1);",
          "79:     NSV8Objects::Template_Set(_template, \"OpenFile\",     _builder_OpenFile);",
          "80:     NSV8Objects::Template_Set(_template, \"CreateFile\",   _builder_CreateFile);",
          "81:     NSV8Objects::Template_Set(_template, \"SetTmpFolder\", _builder_SetTmpFolder);",
          "82:     NSV8Objects::Template_Set(_template, \"SaveFile\",     _builder_SaveFile);",
          "83:     NSV8Objects::Template_Set(_template, \"CloseFile\",    _builder_CloseFile);",
          "84:     NSV8Objects::Template_Set(_template, \"OpenTmpFile\",  _builder_OpenTmpFile);",
          "86:     CBuilderEmbed* _embed = new CBuilderEmbed();",
          "87:     _embed->m_pBuilder = builder;",
          "89:     v8::Local<v8::Object> obj = _template->NewInstance(V8ContextOneArg).ToLocalChecked();",
          "90:     obj->SetInternalField(0, v8::External::New(isolate, _embed));",
          "92:     return obj;",
          "97:     v8::Isolate* current = CV8Worker::GetCurrent();",
          "98:     context->m_internal->m_context->Global()->Set(context->m_internal->m_context, CreateV8String(current, name.c_str()), _builder_CreateNativeTmpDoc(current, builder, sFile, sParams));",
          "102:     v8::Isolate* current = CV8Worker::GetCurrent();",
          "103:     context->m_internal->m_context->Global()->Set(context->m_internal->m_context, CreateV8String(current, name.c_str()), _builder_CreateNative(current, builder));",
          "108:     std::wstring sPath = path->toStringW();",
          "109:     std::wstring sParams = params->toStringW();",
          "110:     v8::Local<v8::Value> obj = _builder_CreateNativeTmpDoc(CV8Worker::GetCurrent(), m_pBuilder, sPath, sParams);",
          "111:     CJSValueV8* res = new CJSValueV8();",
          "112:     res->value = obj;",
          "113:     return res;",
          "",
          "[Added Lines]",
          "56:  v8::Local<v8::ObjectTemplate> _template = v8::ObjectTemplate::New(isolate);",
          "57:  _template->SetInternalFieldCount(1); // \u043e\u0442\u0432\u043e\u0434\u0438\u043c \u0432 \u043d\u0435\u043c \u043c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f CNativeControl",
          "59:  NSV8Objects::Template_Set(_template, \"IsValid\",     _builder_doc_IsValid);",
          "60:  NSV8Objects::Template_Set(_template, \"GetBinary\",   _builder_doc_GetBinary);",
          "61:  NSV8Objects::Template_Set(_template, \"GetFolder\",   _builder_doc_GetFolder);",
          "62:  NSV8Objects::Template_Set(_template, \"Close\",       _builder_doc_CloseFile);",
          "63:  NSV8Objects::Template_Set(_template, \"GetImageMap\", _builder_doc_GetImageMap);",
          "65:  CBuilderDocumentEmbed* _embed = new CBuilderDocumentEmbed();",
          "66:  _embed->m_pBuilder = pBuilder;",
          "67:  _embed->OpenFile(sFile, sParams);",
          "69:  v8::Local<v8::Object> obj = _template->NewInstance(V8ContextOneArg).ToLocalChecked();",
          "70:  obj->SetInternalField(0, v8::External::New(isolate, _embed));",
          "72:  return obj;",
          "76:  v8::Local<v8::ObjectTemplate> _template = v8::ObjectTemplate::New(isolate);",
          "77:  _template->SetInternalFieldCount(1);",
          "79:  NSV8Objects::Template_Set(_template, \"OpenFile\",     _builder_OpenFile);",
          "80:  NSV8Objects::Template_Set(_template, \"CreateFile\",   _builder_CreateFile);",
          "81:  NSV8Objects::Template_Set(_template, \"SetTmpFolder\", _builder_SetTmpFolder);",
          "82:  NSV8Objects::Template_Set(_template, \"SaveFile\",     _builder_SaveFile);",
          "83:  NSV8Objects::Template_Set(_template, \"CloseFile\",    _builder_CloseFile);",
          "84:  NSV8Objects::Template_Set(_template, \"OpenTmpFile\",  _builder_OpenTmpFile);",
          "86:  CBuilderEmbed* _embed = new CBuilderEmbed();",
          "87:  _embed->m_pBuilder = builder;",
          "89:  v8::Local<v8::Object> obj = _template->NewInstance(V8ContextOneArg).ToLocalChecked();",
          "90:  obj->SetInternalField(0, v8::External::New(isolate, _embed));",
          "92:  return obj;",
          "97:  v8::Isolate* current = CV8Worker::GetCurrent();",
          "98:  context->m_internal->m_context->Global()->Set(context->m_internal->m_context, CreateV8String(current, name.c_str()), _builder_CreateNativeTmpDoc(current, builder, sFile, sParams));",
          "102:  v8::Isolate* current = CV8Worker::GetCurrent();",
          "103:  context->m_internal->m_context->Global()->Set(context->m_internal->m_context, CreateV8String(current, name.c_str()), _builder_CreateNative(current, builder));",
          "108:  std::wstring sPath = path->toStringW();",
          "109:  std::wstring sParams = params->toStringW();",
          "110:  v8::Local<v8::Value> obj = _builder_CreateNativeTmpDoc(CV8Worker::GetCurrent(), m_pBuilder, sPath, sParams);",
          "111:  CJSValueV8* res = new CJSValueV8();",
          "112:  res->value = obj;",
          "113:  return res;",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  void CreateNativeObject(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "110:  {",
          "127:  }",
          "130:  void CreateNativeObjectBuilder(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "131:  {",
          "148:  }",
          "149: }",
          "",
          "[Removed Lines]",
          "111:   v8::Isolate* isolate = args.GetIsolate();",
          "112:   v8::HandleScope scope(isolate);",
          "114:   if (CIsolateAdditionalData::CheckSingletonType(isolate, CIsolateAdditionalData::iadtSingletonNative))",
          "115:   {",
          "116:    args.GetReturnValue().Set(v8::Undefined(isolate));",
          "117:    return;",
          "118:   }",
          "120:   v8::Handle<v8::ObjectTemplate> NativeObjectTemplate = CreateNativeControlTemplate(isolate);",
          "121:   CNativeControlEmbed* pNativeObject = new CNativeControlEmbed();",
          "123:   v8::Local<v8::Object> obj = NativeObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "124:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObject));",
          "126:   args.GetReturnValue().Set(obj);",
          "132:   v8::Isolate* isolate = args.GetIsolate();",
          "133:   v8::HandleScope scope(isolate);",
          "135:   if (CIsolateAdditionalData::CheckSingletonType(isolate, CIsolateAdditionalData::iadtSingletonNative))",
          "136:   {",
          "137:    args.GetReturnValue().Set(v8::Undefined(isolate));",
          "138:    return;",
          "139:   }",
          "141:   v8::Handle<v8::ObjectTemplate> NativeObjectTemplate = CreateNativeControlTemplateBuilder(isolate);",
          "142:   CNativeControlEmbed* pNativeObject = new CNativeControlEmbed();",
          "144:   v8::Local<v8::Object> obj = NativeObjectTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "145:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObject));",
          "147:   args.GetReturnValue().Set(obj);",
          "",
          "[Added Lines]",
          "111:   CreateNativeInternalField(new CNativeControlEmbed(), CreateNativeControlTemplate, args, CIsolateAdditionalData::iadtSingletonNative);",
          "117:   CreateNativeInternalField(new CNativeControlEmbed(), CreateNativeControlTemplateBuilder, args, CIsolateAdditionalData::iadtSingletonNative);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_Pointer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: v8::Handle<v8::ObjectTemplate> CreatePointerTemplate(v8::Isolate* isolate)",
          "5: {",
          "12: }",
          "14: JSSmart<CJSValue> CPointerEmbedObject::createObject()",
          "15: {",
          "32: }",
          "",
          "[Removed Lines]",
          "6:     v8::EscapableHandleScope handle_scope(isolate);",
          "8:     v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "9:     result->SetInternalFieldCount(1);",
          "11:     return handle_scope.Escape(result);",
          "16:     v8::Isolate* isolate = CV8Worker::GetCurrent();",
          "19:     v8::Handle<v8::ObjectTemplate> pointerTemplate = v8::ObjectTemplate::New(isolate);",
          "20:     pointerTemplate->SetInternalFieldCount(1);",
          "22:     v8::Local<v8::Object> obj = pointerTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "23:     obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), this));",
          "25:     NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "27:     CJSValueV8* returnValue = new CJSValueV8();",
          "28:     returnValue->value = obj;",
          "30:     JSSmart<CJSValue> ret = returnValue;",
          "31:     return ret;",
          "",
          "[Added Lines]",
          "6:  v8::EscapableHandleScope handle_scope(isolate);",
          "8:  v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "9:  result->SetInternalFieldCount(1);",
          "11:  return handle_scope.Escape(result);",
          "16:  v8::Isolate* isolate = CV8Worker::GetCurrent();",
          "19:  v8::Handle<v8::ObjectTemplate> pointerTemplate = v8::ObjectTemplate::New(isolate);",
          "20:  pointerTemplate->SetInternalFieldCount(1);",
          "22:  v8::Local<v8::Object> obj = pointerTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "23:  obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), this));",
          "25:  NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "27:  CJSValueV8* returnValue = new CJSValueV8();",
          "28:  returnValue->value = obj;",
          "30:  JSSmart<CJSValue> ret = returnValue;",
          "31:  return ret;",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp||DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_TextMeasurer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: namespace NSMeasurer",
          "5: {",
          "29: #ifdef SUPPORT_HARFBUZZ_SHAPER",
          "34: #endif",
          "65: #ifdef SUPPORT_HARFBUZZ_SHAPER",
          "70: #endif",
          "90: }",
          "92: void CTextMeasurerEmbed::CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context)",
          "",
          "[Removed Lines]",
          "6:     #define CURRENTWRAPPER CTextMeasurerEmbed",
          "8:     FUNCTION_WRAPPER_V8_1(_FT_Malloc, FT_Malloc)",
          "9:     FUNCTION_WRAPPER_V8_1(_FT_Free, FT_Free)",
          "11:     FUNCTION_WRAPPER_V8  (_FT_Init, FT_Init)",
          "12:     FUNCTION_WRAPPER_V8_2(_FT_Set_TrueType_HintProp, FT_Set_TrueType_HintProp)",
          "14:     FUNCTION_WRAPPER_V8_4(_FT_Open_Face, FT_Open_Face)",
          "15:     FUNCTION_WRAPPER_V8_3(_FT_Open_Face2, FT_Open_Face2)",
          "16:     FUNCTION_WRAPPER_V8_1(_FT_GetFaceInfo, FT_GetFaceInfo)",
          "18:     FUNCTION_WRAPPER_V8_3(_FT_Load_Glyph, FT_Load_Glyph)",
          "19:     FUNCTION_WRAPPER_V8_2(_FT_Get_Glyph_Measure_Params, FT_Get_Glyph_Measure_Params)",
          "20:     FUNCTION_WRAPPER_V8_2(_FT_Get_Glyph_Render_Params, FT_Get_Glyph_Render_Params)",
          "21:     FUNCTION_WRAPPER_V8_2(_FT_Get_Glyph_Render_Buffer, FT_Get_Glyph_Render_Buffer)",
          "23:     FUNCTION_WRAPPER_V8_5(_FT_Set_Transform, FT_Set_Transform)",
          "24:     FUNCTION_WRAPPER_V8_5(_FT_Set_Char_Size, FT_Set_Char_Size)",
          "25:     FUNCTION_WRAPPER_V8_2(_FT_SetCMapForCharCode, FT_SetCMapForCharCode)",
          "26:     FUNCTION_WRAPPER_V8_3(_FT_GetKerningX, FT_GetKerningX)",
          "27:     FUNCTION_WRAPPER_V8_1(_FT_GetFaceMaxAdvanceX, FT_GetFaceMaxAdvanceX)",
          "30:     FUNCTION_WRAPPER_V8_1(_HB_LanguageFromString, HB_LanguageFromString)",
          "31:     FUNCTION_WRAPPER_V8_7(_HB_ShapeText, HB_ShapeText)",
          "32:     FUNCTION_WRAPPER_V8  (_HB_FontMalloc, HB_FontMalloc)",
          "33:     FUNCTION_WRAPPER_V8_1(_HB_FontFree, HB_FontFree)",
          "36:     v8::Handle<v8::ObjectTemplate> CreateMeasurerTemplate(v8::Isolate* isolate)",
          "37:     {",
          "38:         v8::EscapableHandleScope handle_scope(isolate);",
          "40:         v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "41:         result->SetInternalFieldCount(1);",
          "44:         NSV8Objects::Template_Set(result, \"FT_Malloc\",                  _FT_Malloc);",
          "45:         NSV8Objects::Template_Set(result, \"FT_Free\",                    _FT_Free);",
          "47:         NSV8Objects::Template_Set(result, \"FT_Init\",                    _FT_Init);",
          "48:         NSV8Objects::Template_Set(result, \"FT_Set_TrueType_HintProp\",   _FT_Set_TrueType_HintProp);",
          "50:         NSV8Objects::Template_Set(result, \"FT_Open_Face\",               _FT_Open_Face);",
          "51:         NSV8Objects::Template_Set(result, \"FT_Open_Face2\",              _FT_Open_Face2);",
          "52:         NSV8Objects::Template_Set(result, \"FT_GetFaceInfo\",             _FT_GetFaceInfo);",
          "54:         NSV8Objects::Template_Set(result, \"FT_Load_Glyph\",              _FT_Load_Glyph);",
          "55:         NSV8Objects::Template_Set(result, \"FT_Get_Glyph_Measure_Params\",_FT_Get_Glyph_Measure_Params);",
          "56:         NSV8Objects::Template_Set(result, \"FT_Get_Glyph_Render_Params\", _FT_Get_Glyph_Render_Params);",
          "57:         NSV8Objects::Template_Set(result, \"FT_Get_Glyph_Render_Buffer\", _FT_Get_Glyph_Render_Buffer);",
          "59:         NSV8Objects::Template_Set(result, \"FT_Set_Transform\",           _FT_Set_Transform);",
          "60:         NSV8Objects::Template_Set(result, \"FT_Set_Char_Size\",           _FT_Set_Char_Size);",
          "61:         NSV8Objects::Template_Set(result, \"FT_SetCMapForCharCode\",      _FT_SetCMapForCharCode);",
          "62:         NSV8Objects::Template_Set(result, \"FT_GetKerningX\",             _FT_GetKerningX);",
          "63:         NSV8Objects::Template_Set(result, \"FT_GetFaceMaxAdvanceX\",      _FT_GetFaceMaxAdvanceX);",
          "66:         NSV8Objects::Template_Set(result, \"HB_LanguageFromString\",      _HB_LanguageFromString);",
          "67:         NSV8Objects::Template_Set(result, \"HB_ShapeText\",               _HB_ShapeText);",
          "68:         NSV8Objects::Template_Set(result, \"HB_FontMalloc\",              _HB_FontMalloc);",
          "69:         NSV8Objects::Template_Set(result, \"HB_FontFree\",                _HB_FontFree);",
          "72:         return handle_scope.Escape(result);",
          "73:     }",
          "75:     void CreateNativeMeasurer(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "76:     {",
          "77:         v8::Isolate* isolate = args.GetIsolate();",
          "78:         v8::HandleScope scope(isolate);",
          "80:         v8::Handle<v8::ObjectTemplate> MeasurerTemplate = CreateMeasurerTemplate(isolate);",
          "81:         CTextMeasurerEmbed* pMeasurer = new CTextMeasurerEmbed();",
          "83:         v8::Local<v8::Object> obj = MeasurerTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "84:         obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pMeasurer));",
          "86:         NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "88:         args.GetReturnValue().Set(obj);",
          "89:     }",
          "",
          "[Added Lines]",
          "6: #define CURRENTWRAPPER CTextMeasurerEmbed",
          "8:  FUNCTION_WRAPPER_V8_1(_FT_Malloc, FT_Malloc)",
          "9:  FUNCTION_WRAPPER_V8_1(_FT_Free, FT_Free)",
          "11:  FUNCTION_WRAPPER_V8  (_FT_Init, FT_Init)",
          "12:  FUNCTION_WRAPPER_V8_2(_FT_Set_TrueType_HintProp, FT_Set_TrueType_HintProp)",
          "14:  FUNCTION_WRAPPER_V8_4(_FT_Open_Face, FT_Open_Face)",
          "15:  FUNCTION_WRAPPER_V8_3(_FT_Open_Face2, FT_Open_Face2)",
          "16:  FUNCTION_WRAPPER_V8_1(_FT_GetFaceInfo, FT_GetFaceInfo)",
          "18:  FUNCTION_WRAPPER_V8_3(_FT_Load_Glyph, FT_Load_Glyph)",
          "19:  FUNCTION_WRAPPER_V8_2(_FT_Get_Glyph_Measure_Params, FT_Get_Glyph_Measure_Params)",
          "20:  FUNCTION_WRAPPER_V8_2(_FT_Get_Glyph_Render_Params, FT_Get_Glyph_Render_Params)",
          "21:  FUNCTION_WRAPPER_V8_2(_FT_Get_Glyph_Render_Buffer, FT_Get_Glyph_Render_Buffer)",
          "23:  FUNCTION_WRAPPER_V8_5(_FT_Set_Transform, FT_Set_Transform)",
          "24:  FUNCTION_WRAPPER_V8_5(_FT_Set_Char_Size, FT_Set_Char_Size)",
          "25:  FUNCTION_WRAPPER_V8_2(_FT_SetCMapForCharCode, FT_SetCMapForCharCode)",
          "26:  FUNCTION_WRAPPER_V8_3(_FT_GetKerningX, FT_GetKerningX)",
          "27:  FUNCTION_WRAPPER_V8_1(_FT_GetFaceMaxAdvanceX, FT_GetFaceMaxAdvanceX)",
          "30:  FUNCTION_WRAPPER_V8_1(_HB_LanguageFromString, HB_LanguageFromString)",
          "31:  FUNCTION_WRAPPER_V8_7(_HB_ShapeText, HB_ShapeText)",
          "32:  FUNCTION_WRAPPER_V8  (_HB_FontMalloc, HB_FontMalloc)",
          "33:  FUNCTION_WRAPPER_V8_1(_HB_FontFree, HB_FontFree)",
          "36:  v8::Handle<v8::ObjectTemplate> CreateMeasurerTemplate(v8::Isolate* isolate)",
          "37:  {",
          "38:   v8::EscapableHandleScope handle_scope(isolate);",
          "40:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "41:   result->SetInternalFieldCount(1);",
          "44:   NSV8Objects::Template_Set(result, \"FT_Malloc\",                  _FT_Malloc);",
          "45:   NSV8Objects::Template_Set(result, \"FT_Free\",                    _FT_Free);",
          "47:   NSV8Objects::Template_Set(result, \"FT_Init\",                    _FT_Init);",
          "48:   NSV8Objects::Template_Set(result, \"FT_Set_TrueType_HintProp\",   _FT_Set_TrueType_HintProp);",
          "50:   NSV8Objects::Template_Set(result, \"FT_Open_Face\",               _FT_Open_Face);",
          "51:   NSV8Objects::Template_Set(result, \"FT_Open_Face2\",              _FT_Open_Face2);",
          "52:   NSV8Objects::Template_Set(result, \"FT_GetFaceInfo\",             _FT_GetFaceInfo);",
          "54:   NSV8Objects::Template_Set(result, \"FT_Load_Glyph\",              _FT_Load_Glyph);",
          "55:   NSV8Objects::Template_Set(result, \"FT_Get_Glyph_Measure_Params\",_FT_Get_Glyph_Measure_Params);",
          "56:   NSV8Objects::Template_Set(result, \"FT_Get_Glyph_Render_Params\", _FT_Get_Glyph_Render_Params);",
          "57:   NSV8Objects::Template_Set(result, \"FT_Get_Glyph_Render_Buffer\", _FT_Get_Glyph_Render_Buffer);",
          "59:   NSV8Objects::Template_Set(result, \"FT_Set_Transform\",           _FT_Set_Transform);",
          "60:   NSV8Objects::Template_Set(result, \"FT_Set_Char_Size\",           _FT_Set_Char_Size);",
          "61:   NSV8Objects::Template_Set(result, \"FT_SetCMapForCharCode\",      _FT_SetCMapForCharCode);",
          "62:   NSV8Objects::Template_Set(result, \"FT_GetKerningX\",             _FT_GetKerningX);",
          "63:   NSV8Objects::Template_Set(result, \"FT_GetFaceMaxAdvanceX\",      _FT_GetFaceMaxAdvanceX);",
          "66:   NSV8Objects::Template_Set(result, \"HB_LanguageFromString\",      _HB_LanguageFromString);",
          "67:   NSV8Objects::Template_Set(result, \"HB_ShapeText\",               _HB_ShapeText);",
          "68:   NSV8Objects::Template_Set(result, \"HB_FontMalloc\",              _HB_FontMalloc);",
          "69:   NSV8Objects::Template_Set(result, \"HB_FontFree\",                _HB_FontFree);",
          "72:   return handle_scope.Escape(result);",
          "73:  }",
          "75:  void CreateNativeMeasurer(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "76:  {",
          "77:   CreateNativeInternalField(new CTextMeasurerEmbed(), CreateMeasurerTemplate, args);",
          "78:  }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_Zip.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  void CreateNativeZip(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "48:  {",
          "61:  }",
          "62: }",
          "",
          "[Removed Lines]",
          "49:   v8::Isolate* isolate = args.GetIsolate();",
          "50:   v8::HandleScope scope(isolate);",
          "52:   v8::Handle<v8::ObjectTemplate> ZipTemplate = NSZip::CreateZipTemplate(isolate);",
          "53:   CZipEmbed* pZip = new CZipEmbed();",
          "55:   v8::Local<v8::Object> obj = ZipTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "56:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pZip));",
          "58:   NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "60:   args.GetReturnValue().Set(obj);",
          "",
          "[Added Lines]",
          "49:   CreateNativeInternalField(new CZipEmbed(), NSZip::CreateZipTemplate, args);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base.h||DesktopEditor/doctrenderer/js_internal/js_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base.h -> DesktopEditor/doctrenderer/js_internal/js_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: namespace NSJSBase",
          "16: {",
          "22:  class Q_DECL_EXPORT CJSValue",
          "25:   CJSValue();",
          "26:   virtual ~CJSValue();",
          "54:   virtual JSSmart<CJSObject> toObjectSmart();",
          "57:  class Q_DECL_EXPORT CJSEmbedObjectPrivateBase",
          "60:   CJSEmbedObjectPrivateBase();",
          "61:   virtual ~CJSEmbedObjectPrivateBase();",
          "64:  class Q_DECL_EXPORT CJSEmbedObject",
          "67:   CJSEmbedObject();",
          "68:   virtual ~CJSEmbedObject();",
          "71:   virtual void* getObject();",
          "80:  class Q_DECL_EXPORT CJSObject : public CJSValue",
          "83:   CJSObject();",
          "84:   virtual ~CJSObject();",
          "98:  class Q_DECL_EXPORT CJSArray : public CJSValue",
          "101:   CJSArray();",
          "102:   virtual ~CJSArray();",
          "129:  class Q_DECL_EXPORT CJSDataBuffer",
          "138:   BYTE* Copy();",
          "139:   CJSDataBuffer();",
          "140:   void Free();",
          "143:  class Q_DECL_EXPORT CJSTypedArray : public CJSValue",
          "146:   CJSTypedArray(BYTE* data = NULL, int count = 0);",
          "147:   virtual ~CJSTypedArray();",
          "154:  class Q_DECL_EXPORT CJSFunction : public CJSValue",
          "157:   CJSFunction();",
          "158:   virtual ~CJSFunction();",
          "163:  class Q_DECL_EXPORT CJSTryCatch",
          "166:   CJSTryCatch();",
          "167:   virtual ~CJSTryCatch();",
          "172:  class Q_DECL_EXPORT CJSContext",
          "178:   CJSContext(const bool& bIsInitialize = true);",
          "190:   void Enter();",
          "191:   void Exit();",
          "215:   static CJSValue* createUint8Array(const std::wstring& sFilePath);",
          "218:   static JSSmart<CJSContext> GetCurrent();",
          "226:  class CJSLocalScopePrivate;",
          "227:  class Q_DECL_EXPORT CJSLocalScope",
          "",
          "[Removed Lines]",
          "17:     class CJSObject;",
          "18:     class CJSArray;",
          "19:     class CJSTypedArray;",
          "20:     class CJSFunction;",
          "23:     {",
          "24:     public:",
          "28:         virtual bool isUndefined()          = 0;",
          "29:         virtual bool isNull()               = 0;",
          "30:         virtual bool isBool()               = 0;",
          "31:         virtual bool isNumber()             = 0;",
          "32:         virtual bool isString()             = 0;",
          "33:         virtual bool isArray()              = 0;",
          "34:         virtual bool isTypedArray()         = 0;",
          "35:         virtual bool isObject()             = 0;",
          "36:         virtual bool isFunction()           = 0;",
          "37:         virtual bool isEmpty()              = 0;",
          "39:         virtual void doUndefined()          = 0;",
          "40:         virtual void doNull()               = 0;",
          "42:         virtual bool toBool()               = 0;",
          "43:         virtual int toInt32()               = 0;",
          "44:         virtual unsigned int toUInt32()     = 0;",
          "45:         virtual double toDouble()           = 0;",
          "46:         virtual std::string toStringA()     = 0;",
          "47:         virtual std::wstring toStringW()    = 0;",
          "49:         virtual CJSObject* toObject()       = 0;",
          "50:         virtual CJSArray* toArray()         = 0;",
          "51:         virtual CJSTypedArray* toTypedArray() = 0;",
          "52:         virtual CJSFunction* toFunction()   = 0;",
          "55:     };",
          "58:     {",
          "59:     public:",
          "62:     };",
          "65:     {",
          "66:     public:",
          "70:     public:",
          "73:     protected:",
          "74:         CJSEmbedObjectPrivateBase* embed_native_internal;",
          "76:         friend class CJSEmbedObjectPrivateBase;",
          "77:         friend class CJSEmbedObjectPrivate;",
          "78:     };",
          "81:     {",
          "82:     public:",
          "86:         virtual CJSValue* get(const char* name)                 = 0;",
          "87:         virtual void set(const char* name, CJSValue* value)     = 0;",
          "89:         virtual void set(const char* name, const int& value)    = 0;",
          "90:         virtual void set(const char* name, const double& value) = 0;",
          "92:         virtual CJSEmbedObject* getNative()                     = 0;",
          "94:         virtual JSSmart<CJSValue> call_func(const char* name, const int argc = 0, JSSmart<CJSValue> argv[] = NULL) = 0;",
          "95:         virtual JSSmart<CJSValue> toValue()                     = 0;",
          "96:     };",
          "99:     {",
          "100:     public:",
          "104:         virtual int getCount()                                  = 0;",
          "105:         virtual JSSmart<CJSValue> get(const int& index)         = 0;",
          "106:         virtual void set(const int& index, CJSValue* value)     = 0;",
          "107:         virtual void set(const int& index, const bool& value)   = 0;",
          "108:         virtual void set(const int& index, const int& value)    = 0;",
          "109:         virtual void set(const int& index, const double& value) = 0;",
          "111:         virtual void add(CJSValue* value)                       = 0;",
          "112:         virtual void add_null()                                 = 0;",
          "113:         virtual void add_undefined()                            = 0;",
          "114:         virtual void add_bool(const bool& value)                = 0;",
          "115:         virtual void add_byte(const BYTE& value)                = 0;",
          "116:         virtual void add_int(const int& value)                  = 0;",
          "117:         virtual void add_double(const double& value)            = 0;",
          "118:         virtual void add_stringa(const std::string& value)      = 0;",
          "119:         virtual void add_string(const std::wstring& value)      = 0;",
          "120:         virtual JSSmart<CJSValue> toValue()                     = 0;",
          "121:     };",
          "123:     namespace NSAllocator",
          "124:     {",
          "125:         unsigned char* Alloc(const size_t& size);",
          "126:         void Free(unsigned char* data, const size_t& size);",
          "127:     }",
          "130:     {",
          "131:     public:",
          "132:         BYTE* Data;",
          "133:         size_t Len;",
          "135:         bool IsExternalize;",
          "137:     public:",
          "141:     };",
          "144:     {",
          "145:     public:",
          "149:         virtual int getCount()          = 0;",
          "150:         virtual CJSDataBuffer getData() = 0;",
          "151:         virtual JSSmart<CJSValue> toValue() = 0;",
          "152:     };",
          "155:     {",
          "156:     public:",
          "160:         virtual CJSValue* Call(CJSValue* recv, int argc, JSSmart<CJSValue> argv[]) = 0;",
          "161:     };",
          "164:     {",
          "165:     public:",
          "168:         virtual bool Check() = 0;",
          "169:     };",
          "171:     class CJSContextPrivate;",
          "173:     {",
          "174:     public:",
          "175:         CJSContextPrivate* m_internal;",
          "177:     public:",
          "179:         ~CJSContext();",
          "181:         void Initialize();",
          "182:         void Dispose();",
          "184:         CJSTryCatch* GetExceptions();",
          "186:         void CreateContext();",
          "187:         CJSObject* GetGlobal();",
          "193:         JSSmart<CJSValue> runScript(const std::string& script, JSSmart<CJSTryCatch> exception = NULL, const std::wstring& scriptPath = std::wstring(L\"\"));",
          "194:         CJSValue* JSON_Parse(const char* json_content);",
          "195:         void MoveToThread(ASC_THREAD_ID* id = NULL);",
          "197:     public:",
          "198:         static CJSValue* createUndefined();",
          "199:         static CJSValue* createNull();",
          "200:         static CJSValue* createBool(const bool& value);",
          "201:         static CJSValue* createInt(const int& value);",
          "202:         static CJSValue* createUInt(const unsigned int& value);",
          "203:         static CJSValue* createDouble(const double& value);",
          "204:         static CJSValue* createString(const char* value, const int& length = -1);",
          "205:         static CJSValue* createString(const wchar_t* value, const int& length = -1);",
          "206:         static CJSValue* createString(const std::string& value);",
          "207:         static CJSValue* createString(const std::wstring& value);",
          "209:         static CJSObject* createObject();",
          "211:         static CJSArray* createArray(const int& count);",
          "213:         static CJSTypedArray* createUint8Array(BYTE* data = NULL, int count = 0, const bool& isExternalize = true);",
          "217:     public:",
          "220:     public:",
          "221:         static void ExternalInitialize(const std::wstring& sDirectory);",
          "222:         static void ExternalDispose();",
          "223:         static bool IsSupportNativeTypedArrays();",
          "224:     };",
          "",
          "[Added Lines]",
          "17:  class CJSObject;",
          "18:  class CJSArray;",
          "19:  class CJSTypedArray;",
          "20:  class CJSFunction;",
          "23:  {",
          "24:  public:",
          "28:   virtual bool isUndefined()          = 0;",
          "29:   virtual bool isNull()               = 0;",
          "30:   virtual bool isBool()               = 0;",
          "31:   virtual bool isNumber()             = 0;",
          "32:   virtual bool isString()             = 0;",
          "33:   virtual bool isArray()              = 0;",
          "34:   virtual bool isTypedArray()         = 0;",
          "35:   virtual bool isObject()             = 0;",
          "36:   virtual bool isFunction()           = 0;",
          "37:   virtual bool isEmpty()              = 0;",
          "39:   virtual void doUndefined()          = 0;",
          "40:   virtual void doNull()               = 0;",
          "42:   virtual bool toBool()               = 0;",
          "43:   virtual int toInt32()               = 0;",
          "44:   virtual unsigned int toUInt32()     = 0;",
          "45:   virtual double toDouble()           = 0;",
          "46:   virtual std::string toStringA()     = 0;",
          "47:   virtual std::wstring toStringW()    = 0;",
          "49:   virtual CJSObject* toObject()       = 0;",
          "50:   virtual CJSArray* toArray()         = 0;",
          "51:   virtual CJSTypedArray* toTypedArray() = 0;",
          "52:   virtual CJSFunction* toFunction()   = 0;",
          "55:  };",
          "58:  {",
          "59:  public:",
          "62:  };",
          "65:  {",
          "66:  public:",
          "70:  public:",
          "73:  protected:",
          "74:   CJSEmbedObjectPrivateBase* embed_native_internal;",
          "76:   friend class CJSEmbedObjectPrivateBase;",
          "77:   friend class CJSEmbedObjectPrivate;",
          "78:  };",
          "81:  {",
          "82:  public:",
          "86:   virtual CJSValue* get(const char* name)                 = 0;",
          "87:   virtual void set(const char* name, CJSValue* value)     = 0;",
          "89:   virtual void set(const char* name, const int& value)    = 0;",
          "90:   virtual void set(const char* name, const double& value) = 0;",
          "92:   virtual CJSEmbedObject* getNative()                     = 0;",
          "94:   virtual JSSmart<CJSValue> call_func(const char* name, const int argc = 0, JSSmart<CJSValue> argv[] = NULL) = 0;",
          "95:   virtual JSSmart<CJSValue> toValue()                     = 0;",
          "96:  };",
          "99:  {",
          "100:  public:",
          "104:   virtual int getCount()                                  = 0;",
          "105:   virtual JSSmart<CJSValue> get(const int& index)         = 0;",
          "106:   virtual void set(const int& index, CJSValue* value)     = 0;",
          "107:   virtual void set(const int& index, const bool& value)   = 0;",
          "108:   virtual void set(const int& index, const int& value)    = 0;",
          "109:   virtual void set(const int& index, const double& value) = 0;",
          "111:   virtual void add(CJSValue* value)                       = 0;",
          "112:   virtual void add_null()                                 = 0;",
          "113:   virtual void add_undefined()                            = 0;",
          "114:   virtual void add_bool(const bool& value)                = 0;",
          "115:   virtual void add_byte(const BYTE& value)                = 0;",
          "116:   virtual void add_int(const int& value)                  = 0;",
          "117:   virtual void add_double(const double& value)            = 0;",
          "118:   virtual void add_stringa(const std::string& value)      = 0;",
          "119:   virtual void add_string(const std::wstring& value)      = 0;",
          "120:   virtual JSSmart<CJSValue> toValue()                     = 0;",
          "121:  };",
          "123:  namespace NSAllocator",
          "124:  {",
          "125:   unsigned char* Alloc(const size_t& size);",
          "126:   void Free(unsigned char* data, const size_t& size);",
          "127:  }",
          "130:  {",
          "131:  public:",
          "132:   BYTE* Data;",
          "133:   size_t Len;",
          "135:   bool IsExternalize;",
          "137:  public:",
          "141:  };",
          "144:  {",
          "145:  public:",
          "149:   virtual int getCount()          = 0;",
          "150:   virtual CJSDataBuffer getData() = 0;",
          "151:   virtual JSSmart<CJSValue> toValue() = 0;",
          "152:  };",
          "155:  {",
          "156:  public:",
          "160:   virtual CJSValue* Call(CJSValue* recv, int argc, JSSmart<CJSValue> argv[]) = 0;",
          "161:  };",
          "164:  {",
          "165:  public:",
          "168:   virtual bool Check() = 0;",
          "169:  };",
          "171:  class CJSContextPrivate;",
          "173:  {",
          "174:  public:",
          "175:   CJSContextPrivate* m_internal;",
          "177:  public:",
          "179:   ~CJSContext();",
          "181:   void Initialize();",
          "182:   void Dispose();",
          "184:   CJSTryCatch* GetExceptions();",
          "186:   void CreateContext();",
          "187:   CJSObject* GetGlobal();",
          "193:   JSSmart<CJSValue> runScript(const std::string& script, JSSmart<CJSTryCatch> exception = NULL, const std::wstring& scriptPath = std::wstring(L\"\"));",
          "194:   CJSValue* JSON_Parse(const char* json_content);",
          "195:   void MoveToThread(ASC_THREAD_ID* id = NULL);",
          "197:  public:",
          "198:   static CJSValue* createUndefined();",
          "199:   static CJSValue* createNull();",
          "200:   static CJSValue* createBool(const bool& value);",
          "201:   static CJSValue* createInt(const int& value);",
          "202:   static CJSValue* createUInt(const unsigned int& value);",
          "203:   static CJSValue* createDouble(const double& value);",
          "204:   static CJSValue* createString(const char* value, const int& length = -1);",
          "205:   static CJSValue* createString(const wchar_t* value, const int& length = -1);",
          "206:   static CJSValue* createString(const std::string& value);",
          "207:   static CJSValue* createString(const std::wstring& value);",
          "209:   static CJSObject* createObject();",
          "211:   static CJSArray* createArray(const int& count);",
          "213:   static CJSTypedArray* createUint8Array(BYTE* data = NULL, int count = 0, const bool& isExternalize = true);",
          "217:  public:",
          "220:  public:",
          "221:   static void ExternalInitialize(const std::wstring& sDirectory);",
          "222:   static void ExternalDispose();",
          "223:   static bool IsSupportNativeTypedArrays();",
          "224:  };",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_logger.cpp||DesktopEditor/doctrenderer/js_internal/js_logger.cpp": [
          "File: DesktopEditor/doctrenderer/js_internal/js_logger.cpp -> DesktopEditor/doctrenderer/js_internal/js_logger.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: namespace NSJSBase",
          "7: {",
          "35: }",
          "",
          "[Removed Lines]",
          "8:     std::string g_logger_file = NSSystemUtils::GetEnvVariableA(L\"js_speed\");",
          "9:     bool g_logger_enabled = g_logger_file.empty() ? false : true;",
          "10:     unsigned long g_logger_time = 0;",
          "12:     void LOGGER_START_FUNC()",
          "13:     {",
          "14:         g_logger_time = NSTimers::GetTickCount();",
          "15:     }",
          "16:     void LOGGER_LAP_FUNC(const char* details)",
          "17:     {",
          "18:         if (!g_logger_enabled)",
          "19:             return;",
          "20:         unsigned long dwCur = (unsigned long)NSTimers::GetTickCount();",
          "22:         if (g_logger_file.length() == 1)",
          "23:         {",
          "24:             printf(details);",
          "25:             printf(\": %d\\n\", (int)(dwCur - g_logger_time));",
          "26:         }",
          "27:         else",
          "28:         {",
          "29:             FILE* f = fopen(g_logger_file.c_str(), \"a+\");",
          "30:             fprintf(f, \"%s: %d\\n\", details, (int)(dwCur - g_logger_time));",
          "31:             fclose(f);",
          "32:         }",
          "33:         g_logger_time = dwCur;",
          "34:     }",
          "",
          "[Added Lines]",
          "8:  std::string g_logger_file = NSSystemUtils::GetEnvVariableA(L\"js_speed\");",
          "9:  bool g_logger_enabled = g_logger_file.empty() ? false : true;",
          "10:  unsigned long g_logger_time = 0;",
          "12:  void LOGGER_START_FUNC()",
          "13:  {",
          "14:   g_logger_time = NSTimers::GetTickCount();",
          "15:  }",
          "16:  void LOGGER_LAP_FUNC(const char* details)",
          "17:  {",
          "18:   if (!g_logger_enabled)",
          "19:    return;",
          "20:   unsigned long dwCur = (unsigned long)NSTimers::GetTickCount();",
          "22:   if (g_logger_file.length() == 1)",
          "23:   {",
          "24:    printf(details);",
          "25:    printf(\": %d\\n\", (int)(dwCur - g_logger_time));",
          "26:   }",
          "27:   else",
          "28:   {",
          "29:    FILE* f = fopen(g_logger_file.c_str(), \"a+\");",
          "30:    fprintf(f, \"%s: %d\\n\", details, (int)(dwCur - g_logger_time));",
          "31:    fclose(f);",
          "32:   }",
          "33:   g_logger_time = dwCur;",
          "34:  }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_logger.h||DesktopEditor/doctrenderer/js_internal/js_logger.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_logger.h -> DesktopEditor/doctrenderer/js_internal/js_logger.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: namespace NSJSBase",
          "7: {",
          "10: }",
          "12: #if 1",
          "",
          "[Removed Lines]",
          "8:     void LOGGER_START_FUNC();",
          "9:     void LOGGER_LAP_FUNC(const char* details);",
          "",
          "[Added Lines]",
          "8:  void LOGGER_START_FUNC();",
          "9:  void LOGGER_LAP_FUNC(const char* details);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.h -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:  v8::Isolate* current = CV8Worker::GetCurrent();",
          "1037:  v8::Local<v8::Context> localContext = context->m_internal->m_context;",
          "1038:  v8::Local<v8::FunctionTemplate> templ = v8::FunctionTemplate::New(current, creator);",
          "1040: }",
          "1042: #endif // _BUILD_NATIVE_CONTROL_V8_BASE_H_",
          "",
          "[Removed Lines]",
          "1039:  localContext->Global()->Set(localContext, CreateV8String(current, name.c_str()), templ->GetFunction(localContext).ToLocalChecked());",
          "",
          "[Added Lines]",
          "1039:  v8::MaybeLocal<v8::Function> oFuncMaybeLocal = templ->GetFunction(localContext);",
          "1040:  v8::Maybe<bool> oResultMayBe = localContext->Global()->Set(localContext, CreateV8String(current, name.c_str()), oFuncMaybeLocal.ToLocalChecked());",
          "1041: }",
          "1043: using FunctionCreateTemplate = v8::Handle<v8::ObjectTemplate> (*)(v8::Isolate* isolate);",
          "1044: static void CreateNativeInternalField(void* native, FunctionCreateTemplate creator, const v8::FunctionCallbackInfo<v8::Value>& args,",
          "1045:            const CIsolateAdditionalData::IsolateAdditionlDataType& type = CIsolateAdditionalData::iadtUndefined)",
          "1046: {",
          "1047:  v8::Isolate* isolate = args.GetIsolate();",
          "1048:  v8::HandleScope scope(isolate);",
          "1050:  if (CIsolateAdditionalData::iadtUndefined != type)",
          "1051:  {",
          "1052:   if (CIsolateAdditionalData::CheckSingletonType(isolate, type))",
          "1053:   {",
          "1054:    args.GetReturnValue().Set(v8::Undefined(isolate));",
          "1055:    return;",
          "1056:   }",
          "1057:  }",
          "1059:  v8::Handle<v8::ObjectTemplate> oCurTemplate = creator(isolate);",
          "1060:  v8::MaybeLocal<v8::Object> oTemplateMayBe = oCurTemplate->NewInstance(isolate->GetCurrentContext());",
          "1061:  v8::Local<v8::Object> obj = oTemplateMayBe.ToLocalChecked();",
          "1062:  obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), native));",
          "1064:  NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "1065:  args.GetReturnValue().Set(obj);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/nativecontrol.h||DesktopEditor/doctrenderer/nativecontrol.h": [
          "File: DesktopEditor/doctrenderer/nativecontrol.h -> DesktopEditor/doctrenderer/nativecontrol.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1031:  }",
          "1032: };",
          "1036: #else",
          "1038: #define LOGGER_SPEED_LAP(__logger_param)",
          "1039: #endif",
          "",
          "[Removed Lines]",
          "1034: #define LOGGER_SPEED_START CLoggerSpeed __logger_speed;",
          "1035: #define LOGGER_SPEED_LAP(__logger_param) __logger_speed.Lap(#__logger_param);",
          "1037: #define LOGGER_SPEED_START",
          "",
          "[Added Lines]",
          "1034: #define LOGGER_SPEED_START() CLoggerSpeed __logger_speed",
          "1035: #define LOGGER_SPEED_LAP(__logger_param) __logger_speed.Lap(#__logger_param)",
          "1037: #define LOGGER_SPEED_START()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52071831de317b19bad21119e6b573dfc26ff170",
      "candidate_info": {
        "commit_hash": "52071831de317b19bad21119e6b573dfc26ff170",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/52071831de317b19bad21119e6b573dfc26ff170",
        "files": [
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
        ],
        "message": "Fix crash on using emdedder data in isolates",
        "before_after_code_files": [
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ],
          "candidate": [
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   v8_debug::disposeInspector(m_internal->m_context);",
          "221: #endif",
          "222:   unsigned int nEmbedDataCount = m_internal->m_isolate->GetNumberOfDataSlots();",
          "224:   {",
          "227:   }",
          "229:   m_internal->m_isolate->Dispose();",
          "",
          "[Removed Lines]",
          "223:   for (unsigned int i = 0; i < nEmbedDataCount; ++i)",
          "225:    CIsolateAdditionalData* pAdditionData = (CIsolateAdditionalData*)m_internal->m_isolate->GetData(i);",
          "226:    delete pAdditionData;",
          "",
          "[Added Lines]",
          "223:   if (nEmbedDataCount > 0)",
          "225:    void* pSingletonData = m_internal->m_isolate->GetData(0);",
          "226:    if (NULL != pSingletonData)",
          "227:    {",
          "228:     CIsolateAdditionalData* pData = (CIsolateAdditionalData*)pSingletonData;",
          "229:     delete pData;",
          "230:    }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.h -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  static bool CheckSingletonType(v8::Isolate* isolate, const IsolateAdditionlDataType& type, const bool& isAdd = true)",
          "89:  {",
          "90:   unsigned int nCount = isolate->GetNumberOfDataSlots();",
          "92:   {",
          "94:    if (pData->m_eType == type)",
          "95:     return true;",
          "96:   }",
          "98:   if (isAdd)",
          "99:   {",
          "101:   }",
          "103:   return false;",
          "",
          "[Removed Lines]",
          "91:   for (unsigned int i = 0; i < nCount; ++i)",
          "93:    CIsolateAdditionalData* pData = (CIsolateAdditionalData*)isolate->GetData(i);",
          "100:    isolate->SetData(nCount, (void*)(new CIsolateAdditionalData(type)));",
          "",
          "[Added Lines]",
          "91:   if (nCount == 0)",
          "92:    return false;",
          "94:   void* pSingletonData = isolate->GetData(0);",
          "95:   if (NULL != pSingletonData)",
          "97:    CIsolateAdditionalData* pData = (CIsolateAdditionalData*)pSingletonData;",
          "101:    return false;",
          "106:    isolate->SetData(0, (void*)(new CIsolateAdditionalData(type)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afc6a72b14ba85cca25d8286977e94a967782e66",
      "candidate_info": {
        "commit_hash": "afc6a72b14ba85cca25d8286977e94a967782e66",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/afc6a72b14ba85cca25d8286977e94a967782e66",
        "files": [
          "DesktopEditor/doctrenderer/doctrenderer.pro",
          "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.h",
          "DesktopEditor/doctrenderer/js_internal/js_base_p.h",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "DesktopEditor/doctrenderer/test/internal/Embed.h",
          "DesktopEditor/doctrenderer/test/internal/main.cpp"
        ],
        "message": "Add variant for external objects",
        "before_after_code_files": [
          "DesktopEditor/doctrenderer/doctrenderer.pro||DesktopEditor/doctrenderer/doctrenderer.pro",
          "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.cpp||DesktopEditor/doctrenderer/js_internal/js_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.h||DesktopEditor/doctrenderer/js_internal/js_base.h",
          "DesktopEditor/doctrenderer/js_internal/js_base_p.h||DesktopEditor/doctrenderer/js_internal/js_base_p.h",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "DesktopEditor/doctrenderer/test/internal/Embed.h||DesktopEditor/doctrenderer/test/internal/Embed.h",
          "DesktopEditor/doctrenderer/test/internal/main.cpp||DesktopEditor/doctrenderer/test/internal/main.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ],
          "candidate": [
            "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/doctrenderer/doctrenderer.pro||DesktopEditor/doctrenderer/doctrenderer.pro": [
          "File: DesktopEditor/doctrenderer/doctrenderer.pro -> DesktopEditor/doctrenderer/doctrenderer.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: include(../../Common/base.pri)",
          "15: DEFINES += DOCTRENDERER_USE_DYNAMIC_LIBRARY_BUILDING",
          "16: ADD_DEPENDENCY(graphics, kernel, UnicodeConverter, kernel_network)",
          "18: #CONFIG += build_xp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: DEFINES += JSBASE_USE_DYNAMIC_LIBRARY_BUILDING",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp||DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_NativeControl.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  void CreateNativeObject(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "110:  {",
          "112:  }",
          "115:  void CreateNativeObjectBuilder(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "116:  {",
          "118:  }",
          "119: }",
          "",
          "[Removed Lines]",
          "111:   CreateNativeInternalField(new CNativeControlEmbed(), CreateNativeControlTemplate, args, CIsolateAdditionalData::iadtSingletonNative);",
          "117:   CreateNativeInternalField(new CNativeControlEmbed(), CreateNativeControlTemplateBuilder, args, CIsolateAdditionalData::iadtSingletonNative);",
          "",
          "[Added Lines]",
          "111:   CreateNativeInternalField(new CNativeControlEmbed(), CreateNativeControlTemplate, args, NSJSBase::iadtSingletonNative);",
          "117:   CreateNativeInternalField(new CNativeControlEmbed(), CreateNativeControlTemplateBuilder, args, NSJSBase::iadtSingletonNative);",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base.cpp||DesktopEditor/doctrenderer/js_internal/js_base.cpp": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base.cpp -> DesktopEditor/doctrenderer/js_internal/js_base.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   return NULL;",
          "39:  }",
          "41:  CJSObject::CJSObject()",
          "42:  {",
          "43:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  JSSmart<CJSValue> CJSEmbedObject::Call(const int& index, CJSFunctionArguments* args)",
          "42:  {",
          "43:   return NULL;",
          "44:  }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base.h||DesktopEditor/doctrenderer/js_internal/js_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base.h -> DesktopEditor/doctrenderer/js_internal/js_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"../../graphics/BaseThread.h\"",
          "12: #ifdef JSBASE_NO_USE_DYNAMIC_LIBRARY",
          "13: #define JS_DECL",
          "",
          "[Removed Lines]",
          "10: #define JSBASE_NO_USE_DYNAMIC_LIBRARY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   virtual ~CJSEmbedObjectPrivateBase();",
          "76:  };",
          "79:  {",
          "80:  public:",
          "81:   CJSEmbedObject();",
          "",
          "[Removed Lines]",
          "78:     class JS_DECL CJSEmbedObject",
          "",
          "[Added Lines]",
          "78:  class JS_DECL CJSFunctionArguments",
          "79:  {",
          "80:  public:",
          "81:   virtual int GetCount() = 0;",
          "82:   virtual JSSmart<CJSValue> Get(const int& index) = 0;",
          "83:  };",
          "85:  class JS_DECL CJSEmbedObject",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:  public:",
          "85:   virtual void* getObject();",
          "87:  protected:",
          "88:   CJSEmbedObjectPrivateBase* embed_native_internal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   virtual JSSmart<CJSValue> Call(const int& index, CJSFunctionArguments* args);",
          "95:   JSSmart<CJSValue> createObject();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:   virtual bool Check() = 0;",
          "183:  };",
          "185:  class CJSContextPrivate;",
          "186:  class JS_DECL CJSContext",
          "187:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:  using EmbedObjectCreator = CJSEmbedObject* (*)();",
          "197:  enum IsolateAdditionlDataType {",
          "198:   iadtSingletonNative = 0,",
          "199:   iadtUndefined = 255",
          "200:  };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208:   CJSValue* JSON_Parse(const char* json_content);",
          "209:   void MoveToThread(ASC_THREAD_ID* id = NULL);",
          "211:  public:",
          "212:   static CJSValue* createUndefined();",
          "213:   static CJSValue* createNull();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   static void AddEmbedCreator(const std::string& name, EmbedObjectCreator creator, const IsolateAdditionlDataType& type = iadtUndefined);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "248:   ~CJSLocalScope();",
          "249:  };",
          "252:  {",
          "253:  public:",
          "254:   JSSmart<CJSContext> m_context;",
          "",
          "[Removed Lines]",
          "251:     class JS_DECL CJSContextScope",
          "",
          "[Added Lines]",
          "270:  class JS_DECL CJSContextScope",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:   CJSContextScope(JSSmart<CJSContext> context);",
          "258:   ~CJSContextScope();",
          "259:  };",
          "260: }",
          "262: #endif // _CORE_EXT_JS_BASE_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:  template<typename T>",
          "281:  void EmbedToContext(JSSmart<CJSContext>& context, const IsolateAdditionlDataType& type = iadtUndefined)",
          "282:  {",
          "284:   context->AddEmbedCreator(T::getName(), T::getCreator, type);",
          "285:   context->runScript(T::getScript());",
          "286:  }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base_p.h||DesktopEditor/doctrenderer/js_internal/js_base_p.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base_p.h -> DesktopEditor/doctrenderer/js_internal/js_base_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _CORE_EXT_JS_BASE_P_H_",
          "2: #define _CORE_EXT_JS_BASE_P_H_",
          "4: #include \"./js_base.h\"",
          "5: #include <map>",
          "7: class CEmbedObjectRegistrator",
          "8: {",
          "9: public:",
          "10:  class CEmdedClassInfo",
          "11:  {",
          "12:  public:",
          "13:   NSJSBase::EmbedObjectCreator m_creator;",
          "14:   NSJSBase::IsolateAdditionlDataType m_type;",
          "16:   CEmdedClassInfo(NSJSBase::EmbedObjectCreator creator, const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined)",
          "17:   {",
          "18:    m_creator = creator;",
          "19:    m_type = type;",
          "20:   }",
          "21:  };",
          "23: public:",
          "24:  std::map<std::string, CEmdedClassInfo> m_infos;",
          "26: public:",
          "27:  void Register(const std::string& name,",
          "28:       NSJSBase::EmbedObjectCreator creator,",
          "29:       const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined)",
          "30:  {",
          "31:   m_infos.insert(std::pair<std::string, CEmdedClassInfo>(name, CEmdedClassInfo(creator, type)));",
          "32:  }",
          "33: };",
          "35: #endif // _CORE_EXT_JS_BASE_P_H_",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:   CV8Worker::getInitializer().getAllocator()->Free(data, size);",
          "460:  }",
          "461: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464: namespace NSJSBase",
          "465: {",
          "466:  JSSmart<CJSValue> CJSEmbedObject::createObject()",
          "467:  {",
          "468:   v8::Isolate* isolate = CV8Worker::GetCurrent();",
          "471:   v8::Handle<v8::ObjectTemplate> pointerTemplate = v8::ObjectTemplate::New(isolate);",
          "472:   pointerTemplate->SetInternalFieldCount(1);",
          "474:   v8::Local<v8::Object> obj = pointerTemplate->NewInstance(isolate->GetCurrentContext()).ToLocalChecked();",
          "475:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), this));",
          "477:   NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "479:   CJSValueV8* returnValue = new CJSValueV8();",
          "480:   returnValue->value = obj;",
          "482:   JSSmart<CJSValue> ret = returnValue;",
          "483:   return ret;",
          "484:  }",
          "486:  class CJSFunctionArgumentsV8 : public CJSFunctionArguments",
          "487:  {",
          "488:   const v8::FunctionCallbackInfo<v8::Value>* m_args;",
          "489:   int m_count;",
          "490:  public:",
          "491:   CJSFunctionArgumentsV8(const v8::FunctionCallbackInfo<v8::Value>* args)",
          "492:   {",
          "493:    m_args = args;",
          "494:    m_count = m_args->Length() - 1;",
          "495:   }",
          "496:  public:",
          "497:   virtual int GetCount() override",
          "498:   {",
          "499:    return m_count;",
          "500:   }",
          "501:   virtual JSSmart<CJSValue> Get(const int& index) override",
          "502:   {",
          "503:    if (index < m_count)",
          "504:     return js_value(m_args->operator[](index + 1));",
          "505:    return js_value(v8::Undefined(m_args->GetIsolate()));",
          "506:   }",
          "507:  };",
          "509:  void _Call(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "510:  {",
          "511:   CJSEmbedObject* _this = (CJSEmbedObject*)unwrap_native(args.Holder());",
          "512:   CJSFunctionArgumentsV8 _args(&args);",
          "513:   JSSmart<CJSValue> funcIndex = js_value(args[0]);",
          "514:   JSSmart<CJSValue> ret = _this->Call(funcIndex->toInt32(), &_args);",
          "515:   js_return(args, ret);",
          "516:  }",
          "518:  v8::Handle<v8::ObjectTemplate> CreateEmbedObjectTemplate(v8::Isolate* isolate)",
          "519:  {",
          "520:   v8::EscapableHandleScope handle_scope(isolate);",
          "522:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "523:   result->SetInternalFieldCount(1);",
          "525:   NSV8Objects::Template_Set(result, \"Call\", _Call);",
          "527:   return handle_scope.Escape(result);",
          "528:  }",
          "530:  void CreateEmbedNativeObject(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "531:  {",
          "532:   v8::Isolate* isolate = args.GetIsolate();",
          "533:   v8::HandleScope scope(isolate);",
          "535:   if (args.Length() != 1)",
          "536:   {",
          "537:    args.GetReturnValue().Set(v8::Undefined(isolate));",
          "538:    return;",
          "539:   }",
          "541:   std::string sName;",
          "542:   v8::String::Utf8Value data(V8IsolateFirstArg args[0]);",
          "543:   if (NULL != *data)",
          "544:    sName = std::string((char*)*data, data.length());",
          "546:   CEmbedObjectRegistrator& oRegistrator = CJSContextPrivate::getEmbedRegistrator();",
          "547:   std::map<std::string, CEmbedObjectRegistrator::CEmdedClassInfo>::iterator find = oRegistrator.m_infos.find(sName);",
          "548:   if (find == oRegistrator.m_infos.end())",
          "549:   {",
          "550:    args.GetReturnValue().Set(v8::Undefined(isolate));",
          "551:    return;",
          "552:   }",
          "554:   CEmbedObjectRegistrator::CEmdedClassInfo& oInfo = find->second;",
          "556:   if (NSJSBase::iadtUndefined != oInfo.m_type)",
          "557:   {",
          "558:    if (CIsolateAdditionalData::CheckSingletonType(isolate, oInfo.m_type))",
          "559:    {",
          "560:     args.GetReturnValue().Set(v8::Undefined(isolate));",
          "561:     return;",
          "562:    }",
          "563:   }",
          "565:   v8::Handle<v8::ObjectTemplate> oCurTemplate = CreateEmbedObjectTemplate(isolate);",
          "566:   v8::MaybeLocal<v8::Object> oTemplateMayBe = oCurTemplate->NewInstance(isolate->GetCurrentContext());",
          "567:   v8::Local<v8::Object> obj = oTemplateMayBe.ToLocalChecked();",
          "568:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), oInfo.m_creator()));",
          "570:   NSJSBase::CJSEmbedObjectPrivate::CreateWeaker(obj);",
          "571:   args.GetReturnValue().Set(obj);",
          "572:  }",
          "574:  void CJSContext::AddEmbedCreator(const std::string& name,",
          "575:           EmbedObjectCreator creator,",
          "576:           const IsolateAdditionlDataType& type)",
          "577:  {",
          "578:   CEmbedObjectRegistrator& oRegistrator = CJSContextPrivate::getEmbedRegistrator();",
          "579:   if (0 == oRegistrator.m_infos.size())",
          "580:   {",
          "581:    JSSmart<CJSContext> context = CJSContext::GetCurrent();",
          "582:    InsertToGlobal(\"CreateEmbedObject\", context, CreateEmbedNativeObject);",
          "583:   }",
          "585:   oRegistrator.Register(name, creator, type);",
          "586:  }",
          "587: }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.h -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #endif",
          "8: #include \"../js_base.h\"",
          "9: #include \"../js_logger.h\"",
          "10: #include <iostream>",
          "11: #include <stack>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include \"../js_base_p.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: class CIsolateAdditionalData",
          "79: {",
          "80: public:",
          "87: public:",
          "89:  virtual ~CIsolateAdditionalData() {}",
          "92:  {",
          "93:   unsigned int nCount = isolate->GetNumberOfDataSlots();",
          "94:   if (nCount == 0)",
          "",
          "[Removed Lines]",
          "81:  enum IsolateAdditionlDataType {",
          "82:   iadtSingletonNative = 0,",
          "83:   iadtUndefined = 255",
          "84:  };",
          "86:  IsolateAdditionlDataType m_eType;",
          "88:  CIsolateAdditionalData(const IsolateAdditionlDataType& type = iadtUndefined) { m_eType = type; }",
          "91:  static bool CheckSingletonType(v8::Isolate* isolate, const IsolateAdditionlDataType& type, const bool& isAdd = true)",
          "",
          "[Added Lines]",
          "82:  NSJSBase::IsolateAdditionlDataType m_eType;",
          "84:  CIsolateAdditionalData(const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined) { m_eType = type; }",
          "87:  static bool CheckSingletonType(v8::Isolate* isolate, const NSJSBase::IsolateAdditionlDataType& type, const bool& isAdd = true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "821:   v8::Persistent<v8::Context>     m_contextPersistent;",
          "822:   v8::Local<v8::Context>   m_context;",
          "824:  public:",
          "825:   CJSContextPrivate() : m_oWorker(), m_isolate(NULL)",
          "826:   {",
          "827:   }",
          "828:  };",
          "829: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:   static CEmbedObjectRegistrator m_oRegistrator;",
          "827:   static CEmbedObjectRegistrator& getEmbedRegistrator()",
          "828:   {",
          "829:    static CEmbedObjectRegistrator oRegistrator;",
          "830:    return oRegistrator;",
          "831:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1039: using FunctionCreateTemplate = v8::Handle<v8::ObjectTemplate> (*)(v8::Isolate* isolate);",
          "1040: static void CreateNativeInternalField(void* native, FunctionCreateTemplate creator, const v8::FunctionCallbackInfo<v8::Value>& args,",
          "1042: {",
          "1043:  v8::Isolate* isolate = args.GetIsolate();",
          "1044:  v8::HandleScope scope(isolate);",
          "1047:  {",
          "1048:   if (CIsolateAdditionalData::CheckSingletonType(isolate, type))",
          "1049:   {",
          "",
          "[Removed Lines]",
          "1041:            const CIsolateAdditionalData::IsolateAdditionlDataType& type = CIsolateAdditionalData::iadtUndefined)",
          "1046:  if (CIsolateAdditionalData::iadtUndefined != type)",
          "",
          "[Added Lines]",
          "1045:            const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined)",
          "1050:  if (NSJSBase::iadtUndefined != type)",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/test/internal/Embed.h||DesktopEditor/doctrenderer/test/internal/Embed.h": [
          "File: DesktopEditor/doctrenderer/test/internal/Embed.h -> DesktopEditor/doctrenderer/test/internal/Embed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _BUILD_NATIVE_HASH_EMBED_H_",
          "2: #define _BUILD_NATIVE_HASH_EMBED_H_",
          "4: #include \"../../js_internal/js_base.h\"",
          "6: using namespace NSJSBase;",
          "7: class CTestEmbed : public CJSEmbedObject",
          "8: {",
          "9: public:",
          "10:  CTestEmbed()",
          "11:  {",
          "12:  }",
          "14:  ~CTestEmbed()",
          "15:  {",
          "16:  }",
          "18:  virtual void* getObject() override { return NULL; }",
          "20:  JSSmart<CJSValue> FunctionSum(JSSmart<CJSValue> param1, JSSmart<CJSValue> param2)",
          "21:  {",
          "22:   int n1 = param1->toInt32();",
          "23:   int n2 = param2->toInt32();",
          "24:   return CJSContext::createInt(n1 + n2);",
          "25:  }",
          "27: public:",
          "28:  static std::string getName() { return \"CTestEmbed\"; }",
          "29:  static std::string getScript()",
          "30:  {",
          "31:   return \"function CTestEmbed(){ this.native = CreateEmbedObject(\\\"CTestEmbed\\\"); }\\",
          "32: CTestEmbed.prototype.FunctionSum = function(a, b) { return this.native.Call(0, a, b); }\";",
          "33:  }",
          "34:  static CJSEmbedObject* getCreator()",
          "35:  {",
          "36:   return new CTestEmbed();",
          "37:  }",
          "39:  virtual JSSmart<CJSValue> Call(const int& index, CJSFunctionArguments* args) override",
          "40:  {",
          "41:   switch (index)",
          "42:   {",
          "43:   case 0:",
          "44:   {",
          "45:    return FunctionSum(args->Get(0), args->Get(1));",
          "46:   }",
          "47:   default:",
          "48:    break;",
          "49:   }",
          "50:   return NULL;",
          "51:  }",
          "52: };",
          "54: #endif // _BUILD_NATIVE_HASH_EMBED_H_",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/test/internal/main.cpp||DesktopEditor/doctrenderer/test/internal/main.cpp": [
          "File: DesktopEditor/doctrenderer/test/internal/main.cpp -> DesktopEditor/doctrenderer/test/internal/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"embed/Default.h\"",
          "36: #include \"js_internal/js_base.h\"",
          "38: using namespace NSJSBase;",
          "39: int main(int argc, char *argv[])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"./Embed.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   CJSLocalScope local_scope;",
          "62:   JSSmart<CJSValue> oResLocal = oContext1->runScript(\"function f() { return 'Local scope test'; }; f();\");",
          "63:   std::cout << oResLocal->toStringA() << std::endl;",
          "64:  }",
          "65:  JSSmart<CJSObject> oGlobal1 = oContext1->GetGlobal();",
          "66:  JSSmart<CJSValue> oVar2 = oContext1->createString(\"Hel\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   EmbedToContext<CTestEmbed>(oContext1);",
          "68:   JSSmart<CJSValue> oResTestEmbed = oContext1->runScript(\"(function() { var value = new CTestEmbed(); return value.FunctionSum(1, 2); })();\");",
          "69:   std::cout << oResTestEmbed->toInt32() << std::endl;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4895fe0352cd1e9222b7e7b863bb2bddb2de6ef",
      "candidate_info": {
        "commit_hash": "e4895fe0352cd1e9222b7e7b863bb2bddb2de6ef",
        "repo": "ONLYOFFICE/core",
        "commit_url": "https://github.com/ONLYOFFICE/core/commit/e4895fe0352cd1e9222b7e7b863bb2bddb2de6ef",
        "files": [
          "DesktopEditor/doctrenderer/embed/Default.cpp",
          "DesktopEditor/doctrenderer/embed/HashEmbed.h",
          "DesktopEditor/doctrenderer/embed/embed.py",
          "DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.h",
          "DesktopEditor/doctrenderer/js_internal/js_base_embed.pri",
          "DesktopEditor/doctrenderer/js_internal/js_base_p.h",
          "DesktopEditor/doctrenderer/js_internal/js_embed.h",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp",
          "DesktopEditor/doctrenderer/test/internal/main.cpp"
        ],
        "message": "Added option for internal embed in V8",
        "before_after_code_files": [
          "DesktopEditor/doctrenderer/embed/Default.cpp||DesktopEditor/doctrenderer/embed/Default.cpp",
          "DesktopEditor/doctrenderer/embed/HashEmbed.h||DesktopEditor/doctrenderer/embed/HashEmbed.h",
          "DesktopEditor/doctrenderer/embed/embed.py||DesktopEditor/doctrenderer/embed/embed.py",
          "DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.cpp||DesktopEditor/doctrenderer/js_internal/js_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/js_base.h||DesktopEditor/doctrenderer/js_internal/js_base.h",
          "DesktopEditor/doctrenderer/js_internal/js_base_embed.pri||DesktopEditor/doctrenderer/js_internal/js_base_embed.pri",
          "DesktopEditor/doctrenderer/js_internal/js_base_p.h||DesktopEditor/doctrenderer/js_internal/js_base_p.h",
          "DesktopEditor/doctrenderer/js_internal/js_embed.h||DesktopEditor/doctrenderer/js_internal/js_embed.h",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp||DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp",
          "DesktopEditor/doctrenderer/test/internal/main.cpp||DesktopEditor/doctrenderer/test/internal/main.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ],
          "candidate": [
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
            "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h"
          ]
        }
      },
      "candidate_diff": {
        "DesktopEditor/doctrenderer/embed/Default.cpp||DesktopEditor/doctrenderer/embed/Default.cpp": [
          "File: DesktopEditor/doctrenderer/embed/Default.cpp -> DesktopEditor/doctrenderer/embed/Default.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"Default.h\"",
          "6: #include \"./HashEmbed.h\"",
          "8: namespace NSJSBase",
          "9: {",
          "10:  void CreateDefaults(JSSmart<CJSContext>& context)",
          "11:  {",
          "16:  }",
          "17: }",
          "",
          "[Removed Lines]",
          "3: #include \"./ZipEmbed.h\"",
          "4: #include \"./TextMeasurerEmbed.h\"",
          "5: #include \"./MemoryStreamEmbed.h\"",
          "12:   CZipEmbed::CreateObjectInContext(\"CreateNativeZip\", context);",
          "13:   CTextMeasurerEmbed::CreateObjectInContext(\"CreateNativeTextMeasurer\", context);",
          "14:   CMemoryStreamEmbed::CreateObjectInContext(\"CreateNativeMemoryStream\", context);",
          "15:   CHashEmbed::CreateObjectInContext(\"CreateNativeHash\", context);",
          "",
          "[Added Lines]",
          "15:   context->Embed<CHashEmbed>();",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/HashEmbed.h||DesktopEditor/doctrenderer/embed/HashEmbed.h": [
          "File: DesktopEditor/doctrenderer/embed/HashEmbed.h -> DesktopEditor/doctrenderer/embed/HashEmbed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  JSSmart<CJSValue> hash(JSSmart<CJSValue> data, JSSmart<CJSValue> size, JSSmart<CJSValue> alg);",
          "25:  JSSmart<CJSValue> hash2(JSSmart<CJSValue> password, JSSmart<CJSValue> salt, JSSmart<CJSValue> spinCount, JSSmart<CJSValue> alg);",
          "29: };",
          "31: #endif // _BUILD_NATIVE_HASH_EMBED_H_",
          "",
          "[Removed Lines]",
          "27: public:",
          "28:  static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context);",
          "",
          "[Added Lines]",
          "27:  DECLARE_EMBED_METHODS",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/embed.py||DesktopEditor/doctrenderer/embed/embed.py": [
          "File: DesktopEditor/doctrenderer/embed/embed.py -> DesktopEditor/doctrenderer/embed/embed.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import sys",
          "2: import re",
          "3: import os",
          "5: class MethodInfo:",
          "6:  def __init__(self, name, args):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import argparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   print(\"\\t\" + file_name)",
          "127: # MAIN",
          "134: if header_file[-2:] != \".h\":",
          "135:  print(\"Argument must be a header file with \\\".h\\\" extension!\")",
          "136:  sys.exit(1);",
          "",
          "[Removed Lines]",
          "129: if len(sys.argv) < 2:",
          "130:  print(\"Usage: python embed.py YourEmbedClass.h\")",
          "131:  sys.exit(1);",
          "133: header_file = sys.argv[1];",
          "",
          "[Added Lines]",
          "129: parser = argparse.ArgumentParser(description='Generate some code for embeding your class into JS')",
          "130: parser.add_argument('filename', help='the .h file with class you want to embed');",
          "131: parser.add_argument('-i', '--internal', action='store_true', help='for internal library usage')",
          "133: # if filename wasn't specified the programm will stop here",
          "134: args = parser.parse_args()",
          "136: header_file = args.filename;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:  print(\"Proper class was not found in specified header file.\")",
          "143:  sys.exit(1)",
          "",
          "[Removed Lines]",
          "145: if not os.path.exists(\"embed\"):",
          "146:  os.mkdir(\"embed\")",
          "148: print(\"Generated code was written to:\")",
          "149: code_common = generateCommonCode(class_name, methods, header_file)",
          "150: writeToFile(\"embed/common_\" + header_base_name + \".cpp\", code_common)",
          "151: code_jsc = generateJSCCode(class_name, methods, header_file)",
          "152: writeToFile(\"embed/jsc_\" + header_base_name + \".mm\", code_jsc)",
          "153: # TODO: generateV8Code",
          "",
          "[Added Lines]",
          "149:  print(\"Internal generation\")",
          "150: else:",
          "151:  if not os.path.exists(\"embed\"):",
          "152:   os.mkdir(\"embed\")",
          "154:  print(\"Generated code was written to:\")",
          "155:  code_common = generateCommonCode(class_name, methods, header_file)",
          "156:  writeToFile(\"embed/common_\" + header_base_name + \".cpp\", code_common)",
          "157:  code_jsc = generateJSCCode(class_name, methods, header_file)",
          "158:  writeToFile(\"embed/jsc_\" + header_base_name + \".mm\", code_jsc)",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp||DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp": [
          "File: DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp -> DesktopEditor/doctrenderer/embed/v8/v8_Hash.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   return handle_scope.Escape(result);",
          "23:  }",
          "29: }",
          "32: {",
          "34: }",
          "",
          "[Removed Lines]",
          "25:  void CreateNativeHash(const v8::FunctionCallbackInfo<v8::Value>& args)",
          "26:  {",
          "27:   CreateNativeInternalField(new CHashEmbed(), NSHash::CreateHashTemplate, args);",
          "28:  }",
          "31: void CHashEmbed::CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context)",
          "33:  InsertToGlobal(name, context, NSHash::CreateNativeHash);",
          "",
          "[Added Lines]",
          "24: }",
          "26: std::string CHashEmbed::getName() { return \"CHashEmbed\"; }",
          "28: CJSEmbedObject* CHashEmbed::getCreator()",
          "29: {",
          "30:  return new CHashEmbed();",
          "31: }",
          "33: void* CHashEmbed::GetDataForEmbedObject(void* data)",
          "34: {",
          "35:  v8::Isolate* isolate = reinterpret_cast<v8::Isolate*>(data);",
          "36:  v8::Local<v8::ObjectTemplate>* internalTemplate = new v8::Local<v8::ObjectTemplate>(NSHash::CreateHashTemplate(isolate));",
          "37:  return reinterpret_cast<void*>(internalTemplate);",
          "38: }",
          "40: std::vector<std::string> CHashEmbed::getMethodNames()",
          "41: {",
          "42:  return std::vector<std::string>();",
          "45: void CHashEmbed::initFunctions()",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base.cpp||DesktopEditor/doctrenderer/js_internal/js_base.cpp": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base.cpp -> DesktopEditor/doctrenderer/js_internal/js_base.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  {",
          "48:  }",
          "50:  JSSmart<CJSValue> CJSEmbedObject::Call(const int& index, CJSFunctionArguments* args)",
          "51:  {",
          "52:   return m_functions[index](args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  void* CJSEmbedObject::GetDataForEmbedObject(void* data)",
          "51:  {",
          "52:   return NULL;",
          "53:  }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base.h||DesktopEditor/doctrenderer/js_internal/js_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base.h -> DesktopEditor/doctrenderer/js_internal/js_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   virtual void* getObject();",
          "98:         virtual std::vector<std::string> getMethodNames();",
          "99:   virtual void initFunctions();",
          "101:   JSSmart<CJSValue> Call(const int& index, CJSFunctionArguments* args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   virtual void* GetDataForEmbedObject(void* data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  using EmbedObjectCreator = CJSEmbedObject* (*)();",
          "205:   iadtSingletonNative = 0,",
          "206:   iadtUndefined = 255",
          "207:  };",
          "",
          "[Removed Lines]",
          "204:  enum IsolateAdditionlDataType {",
          "",
          "[Added Lines]",
          "205:  enum IsolateAdditionalDataType {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   template<typename T>",
          "234:   {",
          "235:    AddEmbedCreator(T::getName(), T::getCreator, type);",
          "236:   }",
          "",
          "[Removed Lines]",
          "233:   void Embed(const IsolateAdditionlDataType& type = iadtUndefined)",
          "",
          "[Added Lines]",
          "234:   void Embed(const IsolateAdditionalDataType& type = iadtUndefined)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:   CJSValue* JSON_Parse(const char* json_content);",
          "240:   void MoveToThread(ASC_THREAD_ID* id = NULL);",
          "244:  public:",
          "245:   static CJSValue* createUndefined();",
          "",
          "[Removed Lines]",
          "242:   static void AddEmbedCreator(const std::string& name, EmbedObjectCreator creator, const IsolateAdditionlDataType& type = iadtUndefined);",
          "",
          "[Added Lines]",
          "243:   static void AddEmbedCreator(const std::string& name, EmbedObjectCreator creator, const IsolateAdditionalDataType& type = iadtUndefined);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:   ~CJSContextScope();",
          "292:  };",
          "302: #ifdef JS_ENGINE_JAVASCRIPTCORE",
          "303:  JS_DECL JSSmart<NSJSBase::CJSValue> Native2Value(void* jsValue);",
          "304:  JS_DECL void* Value2Native(JSSmart<NSJSBase::CJSValue> smartValue);",
          "",
          "[Removed Lines]",
          "294: #ifndef JS_ENGINE_JAVASCRIPTCORE",
          "295:  JS_DECL JSSmart<CJSValue> _Native2Value(const void* jsValue);",
          "296:  JS_DECL void _ReturnJSValue(const void* args, JSSmart<CJSValue>& value);",
          "297:  JS_DECL void _TemplateSet(void* obj, const char* name, void* callback);",
          "298:  JS_DECL void _InsertToGlobal(const std::string& name, JSSmart<CJSContext>& context, void* creator);",
          "299:  JS_DECL void _CreateNativeInternalField(void* native, void* creator, const void* args, IsolateAdditionlDataType type = iadtUndefined);",
          "300: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309: #ifndef JS_ENGINE_JAVASCRIPTCORE",
          "314: #else",
          "315: #define _DECLARE_EMBED_EXTRA_METHODS",
          "316: #endif",
          "321:  _DECLARE_EMBED_EXTRA_METHODS",
          "323: #endif // _CORE_EXT_JS_BASE_H_",
          "",
          "[Removed Lines]",
          "310: #define _DECLARE_EMBED_EXTRA_METHODS               \\",
          "311:  virtual std::vector<std::string> getMethodNames() override;         \\",
          "312:  void initFunctions() override;                \\",
          "313:  static void CreateObjectInContext(const std::string& name, JSSmart<CJSContext> context); // do we need this ???",
          "318: #define DECLARE_EMBED_METHODS    \\",
          "319:  static std::string getName();   \\",
          "320:  static CJSEmbedObject* getCreator(); \\",
          "",
          "[Added Lines]",
          "303: #define _DECLARE_EMBED_EXTRA_METHODS        \\",
          "304:  virtual std::vector<std::string> getMethodNames() override;  \\",
          "305:  void initFunctions() override;",
          "310: #define DECLARE_EMBED_METHODS          \\",
          "311:  static std::string getName();         \\",
          "312:  static CJSEmbedObject* getCreator();       \\",
          "313:  virtual void* GetDataForEmbedObject(void* data) override;  \\",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base_embed.pri||DesktopEditor/doctrenderer/js_internal/js_base_embed.pri": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base_embed.pri -> DesktopEditor/doctrenderer/js_internal/js_base_embed.pri",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: INCLUDEPATH += $$PWD",
          "20: use_javascript_core {",
          "21:     QMAKE_OBJECTIVE_CFLAGS += -fobjc-arc -fobjc-weak",
          "",
          "[Removed Lines]",
          "10: !use_javascript_core {",
          "11:     core_android:CONFIG += v8_version_60",
          "12:     !build_xp {",
          "13:         include($$PWD/../../../Common/3dParty/v8/v8.pri)",
          "14:     } else {",
          "15:         DEFINES += V8_OS_XP",
          "16:         include($$PWD/../../../Common/3dParty/v8/v8_xp/v8.pri)",
          "17:     }",
          "18: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_base_p.h||DesktopEditor/doctrenderer/js_internal/js_base_p.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_base_p.h -> DesktopEditor/doctrenderer/js_internal/js_base_p.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  {",
          "12:  public:",
          "13:   NSJSBase::EmbedObjectCreator m_creator;",
          "17:   {",
          "18:    m_creator = creator;",
          "19:    m_type = type;",
          "",
          "[Removed Lines]",
          "14:   NSJSBase::IsolateAdditionlDataType m_type;",
          "16:   CEmdedClassInfo(NSJSBase::EmbedObjectCreator creator, const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined)",
          "",
          "[Added Lines]",
          "14:   NSJSBase::IsolateAdditionalDataType m_type;",
          "16:   CEmdedClassInfo(NSJSBase::EmbedObjectCreator creator, const NSJSBase::IsolateAdditionalDataType& type = NSJSBase::iadtUndefined)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: public:",
          "27:  void Register(const std::string& name,",
          "28:       NSJSBase::EmbedObjectCreator creator,",
          "30:  {",
          "31:   m_infos.insert(std::pair<std::string, CEmdedClassInfo>(name, CEmdedClassInfo(creator, type)));",
          "32:  }",
          "",
          "[Removed Lines]",
          "29:       const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined)",
          "",
          "[Added Lines]",
          "29:       const NSJSBase::IsolateAdditionalDataType& type = NSJSBase::iadtUndefined)",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/js_embed.h||DesktopEditor/doctrenderer/js_internal/js_embed.h": [
          "File: DesktopEditor/doctrenderer/js_internal/js_embed.h -> DesktopEditor/doctrenderer/js_internal/js_embed.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"./js_base.h\"",
          "18: #ifdef JS_ENGINE_JAVASCRIPTCORE",
          "20: #import <Foundation/Foundation.h>",
          "",
          "[Removed Lines]",
          "6: #ifndef JS_ENGINE_JAVASCRIPTCORE",
          "8: #include \"v8.h\"",
          "10: inline NSJSBase::CJSEmbedObject* unwrap_native(const v8::Local<v8::Object>& value)",
          "11: {",
          "12:  v8::Handle<v8::External> field = v8::Handle<v8::External>::Cast(value->GetInternalField(0));",
          "13:  return (NSJSBase::CJSEmbedObject*)field->Value();",
          "14: }",
          "16: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp||DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:   v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);",
          "507:   result->SetInternalFieldCount(1);",
          "509:   std::vector<std::string> arNames = pNativeObj->getMethodNames();",
          "510:   for (int i = 0, len = arNames.size(); i < len; ++i)",
          "511:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:   pNativeObj->initFunctions();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:    sName = std::string((char*)*data, data.length());",
          "535:   CEmbedObjectRegistrator& oRegistrator = CJSContextPrivate::getEmbedRegistrator();",
          "538:   {",
          "539:    args.GetReturnValue().Set(v8::Undefined(isolate));",
          "540:    return;",
          "541:   }",
          "545:   if (NSJSBase::iadtUndefined != oInfo.m_type)",
          "546:   {",
          "",
          "[Removed Lines]",
          "536:   std::map<std::string, CEmbedObjectRegistrator::CEmdedClassInfo>::iterator find = oRegistrator.m_infos.find(sName);",
          "537:   if (find == oRegistrator.m_infos.end())",
          "543:   CEmbedObjectRegistrator::CEmdedClassInfo& oInfo = find->second;",
          "",
          "[Added Lines]",
          "537:   std::map<std::string, CEmbedObjectRegistrator::CEmdedClassInfo>::iterator itFound = oRegistrator.m_infos.find(sName);",
          "538:   if (itFound == oRegistrator.m_infos.end())",
          "544:   const CEmbedObjectRegistrator::CEmdedClassInfo& oInfo = itFound->second;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "552:   }",
          "554:   CJSEmbedObject* pNativeObj = oInfo.m_creator();",
          "557:   v8::MaybeLocal<v8::Object> oTemplateMayBe = oCurTemplate->NewInstance(isolate->GetCurrentContext());",
          "558:   v8::Local<v8::Object> obj = oTemplateMayBe.ToLocalChecked();",
          "559:   obj->SetInternalField(0, v8::External::New(CV8Worker::GetCurrent(), pNativeObj));",
          "",
          "[Removed Lines]",
          "555:   pNativeObj->initFunctions();",
          "556:   v8::Handle<v8::ObjectTemplate> oCurTemplate = CreateEmbedObjectTemplate(isolate, pNativeObj);",
          "",
          "[Added Lines]",
          "556:   v8::Handle<v8::ObjectTemplate> oCurTemplate;",
          "557:   void* pInternalTemplate = pNativeObj->GetDataForEmbedObject((void*)isolate);",
          "558:   if (pInternalTemplate)",
          "559:   {",
          "560:    oCurTemplate = *reinterpret_cast<v8::Local<v8::ObjectTemplate>*>(pInternalTemplate);",
          "561:    delete pInternalTemplate;",
          "562:   }",
          "563:   else",
          "564:   {",
          "565:    oCurTemplate = CreateEmbedObjectTemplate(isolate, pNativeObj);",
          "566:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "565:  void CJSContext::AddEmbedCreator(const std::string& name,",
          "566:           EmbedObjectCreator creator,",
          "568:  {",
          "569:   CEmbedObjectRegistrator& oRegistrator = CJSContextPrivate::getEmbedRegistrator();",
          "570:   if (0 == oRegistrator.m_infos.size())",
          "",
          "[Removed Lines]",
          "567:           const IsolateAdditionlDataType& type)",
          "",
          "[Added Lines]",
          "577:           const IsolateAdditionalDataType& type)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "576:   oRegistrator.Register(name, creator, type);",
          "577:  }",
          "604: }",
          "",
          "[Removed Lines]",
          "579:  JSSmart<CJSValue> _Native2Value(const void* jsValue)",
          "580:  {",
          "581:   return js_value(*reinterpret_cast<const v8::Local<v8::Value>*>(jsValue));",
          "582:  }",
          "584:  void _ReturnJSValue(const void* args, JSSmart<CJSValue>& value)",
          "585:  {",
          "586:   js_return(*reinterpret_cast<const v8::FunctionCallbackInfo<v8::Value>*>(args), value);",
          "587:  }",
          "589:  void _TemplateSet(void* obj, const char* name, void* callback)",
          "590:  {",
          "591:   NSV8Objects::Template_Set(*reinterpret_cast<v8::Local<v8::ObjectTemplate>*>(obj), name, reinterpret_cast<v8::FunctionCallback>(callback));",
          "592:  }",
          "594:  void _InsertToGlobal(const std::string& name, JSSmart<CJSContext>& context, void* creator)",
          "595:  {",
          "596:   InsertToGlobal(name, context, reinterpret_cast<v8::FunctionCallback>(creator));",
          "597:  }",
          "599:  void _CreateNativeInternalField(void* native, void* creator, const void* args, IsolateAdditionlDataType type)",
          "600:  {",
          "601:   CreateNativeInternalField(native, reinterpret_cast<FunctionCreateTemplate>(creator),",
          "603:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/js_internal/v8/v8_base.h||DesktopEditor/doctrenderer/js_internal/v8/v8_base.h": [
          "File: DesktopEditor/doctrenderer/js_internal/v8/v8_base.h -> DesktopEditor/doctrenderer/js_internal/v8/v8_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #endif",
          "20: #endif",
          "23: #include \"libplatform/libplatform.h\"",
          "25: #ifndef DISABLE_MEMORY_LIMITATION",
          "",
          "[Removed Lines]",
          "22: #include \"js_embed.h\"",
          "",
          "[Added Lines]",
          "22: #include \"v8.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: class CIsolateAdditionalData",
          "80: {",
          "81: public:",
          "83: public:",
          "85:  virtual ~CIsolateAdditionalData() {}",
          "88:  {",
          "89:   unsigned int nCount = isolate->GetNumberOfDataSlots();",
          "90:   if (nCount == 0)",
          "",
          "[Removed Lines]",
          "82:  NSJSBase::IsolateAdditionlDataType m_eType;",
          "84:  CIsolateAdditionalData(const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined) { m_eType = type; }",
          "87:  static bool CheckSingletonType(v8::Isolate* isolate, const NSJSBase::IsolateAdditionlDataType& type, const bool& isAdd = true)",
          "",
          "[Added Lines]",
          "82:  NSJSBase::IsolateAdditionalDataType m_eType;",
          "84:  CIsolateAdditionalData(const NSJSBase::IsolateAdditionalDataType& type = NSJSBase::iadtUndefined) { m_eType = type; }",
          "87:  static bool CheckSingletonType(v8::Isolate* isolate, const NSJSBase::IsolateAdditionalDataType& type, const bool& isAdd = true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "890:  }",
          "891: }",
          "893: inline NSJSBase::CJSEmbedObject* unwrap_native2(const v8::Local<v8::Value>& value)",
          "894: {",
          "895:  v8::Local<v8::Object> _obj = value->ToObject(V8ContextOneArg).ToLocalChecked();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893: inline NSJSBase::CJSEmbedObject* unwrap_native(const v8::Local<v8::Object>& value)",
          "894: {",
          "895:  v8::Handle<v8::External> field = v8::Handle<v8::External>::Cast(value->GetInternalField(0));",
          "896:  return (NSJSBase::CJSEmbedObject*)field->Value();",
          "897: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1036: using FunctionCreateTemplate = v8::Handle<v8::ObjectTemplate> (*)(v8::Isolate* isolate);",
          "1037: static void CreateNativeInternalField(void* native, FunctionCreateTemplate creator, const v8::FunctionCallbackInfo<v8::Value>& args,",
          "1039: {",
          "1040:  v8::Isolate* isolate = args.GetIsolate();",
          "1041:  v8::HandleScope scope(isolate);",
          "",
          "[Removed Lines]",
          "1038:            const NSJSBase::IsolateAdditionlDataType& type = NSJSBase::iadtUndefined)",
          "",
          "[Added Lines]",
          "1044:            const NSJSBase::IsolateAdditionalDataType& type = NSJSBase::iadtUndefined)",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp||DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp": [
          "File: DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp -> DesktopEditor/doctrenderer/test/internal/embed/common_Embed.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  return new CTestEmbed();",
          "11: }",
          "13: #ifndef JS_ENGINE_JAVASCRIPTCORE",
          "14: std::vector<std::string> CTestEmbed::getMethodNames()",
          "15: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: void* CTestEmbed::GetDataForEmbedObject(void* data)",
          "14: {",
          "15:  return nullptr;",
          "16: }",
          "",
          "---------------"
        ],
        "DesktopEditor/doctrenderer/test/internal/main.cpp||DesktopEditor/doctrenderer/test/internal/main.cpp": [
          "File: DesktopEditor/doctrenderer/test/internal/main.cpp -> DesktopEditor/doctrenderer/test/internal/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: #endif",
          "108:  JSSmart<CJSContext> oContext1 = new CJSContext;",
          "",
          "[Removed Lines]",
          "105: #if 1",
          "",
          "[Added Lines]",
          "105: #if 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  CJSContextScope scope(oContext1);",
          "116:  oContext1->Embed<CTestEmbed>();",
          "118:  JSSmart<CJSValue> oResTestEmbed1 = oContext1->runScript(\"(function() { var value = CreateEmbedObject('CTestEmbed'); return value.FunctionSum(10, 5); })();\");",
          "",
          "[Removed Lines]",
          "115: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:  JSSmart<CJSValue> oResTestEmbed4 = oContext1->runScript(\"(function() { var value = CreateEmbedObject('CTestEmbed'); return value.FunctionGet(); })();\");",
          "128:  std::cout << \"FunctionGet() = \" << oResTestEmbed4->toInt32() << std::endl;",
          "148: #endif",
          "",
          "[Removed Lines]",
          "129: #endif",
          "130: #if 1",
          "132:  CTestEmbed::CreateObjectInContext(\"CreateTestEmbed\", oContext1);",
          "134:  JSSmart<CJSValue> oResTestEmbed1 = oContext1->runScript(\"(function() { var value = CreateTestEmbed(); return value.FunctionSum(10, 5); })();\");",
          "135:  std::cout << \"FunctionSum(10, 5) = \" << oResTestEmbed1->toInt32() << std::endl;",
          "137:  JSSmart<CJSValue> oResTestEmbed2 = oContext1->runScript(\"(function() { var value = CreateTestEmbed(); return value.FunctionSquare(4); })();\");",
          "138:  std::cout << \"FunctionSquare(4) = \" << oResTestEmbed2->toInt32() << std::endl;",
          "140:  JSSmart<CJSValue> oResTestEmbed3 = oContext1->runScript(\"(function() { var value = CreateTestEmbed(); return value.FunctionDel(30, 3); })();\");",
          "141:  std::cout << \"FunctionDel(30, 3) = \" << oResTestEmbed3->toInt32() << std::endl;",
          "143:  JSSmart<CJSValue> oResTestEmbed4 = oContext1->runScript(\"(function() { var value = CreateTestEmbed(); return value.FunctionGet(); })();\");",
          "144:  std::cout << \"FunctionGet() = \" << oResTestEmbed4->toInt32() << std::endl;",
          "146: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203: #endif",
          "208:  JSSmart<CJSContext> oContext1 = new CJSContext;",
          "",
          "[Removed Lines]",
          "205: #if 0",
          "",
          "[Added Lines]",
          "186: #if 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:  CJSContextScope scope(oContext1);",
          "215:  CreateDefaults(oContext1);",
          "216:  JSSmart<CJSValue> oRes1 = oContext1->runScript(",
          "218:   \"var str = 'test';\\n\"",
          "219:   \"var hash = oHash.hash(str, str.length, 0);\");",
          "",
          "[Removed Lines]",
          "217:   \"var oHash = new CreateNativeHash;\\n\"",
          "",
          "[Added Lines]",
          "198:   \"var oHash = CreateEmbedObject('CHashEmbed');\\n\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}