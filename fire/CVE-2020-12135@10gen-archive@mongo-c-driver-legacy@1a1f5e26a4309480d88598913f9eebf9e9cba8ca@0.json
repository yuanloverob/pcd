{
  "cve_id": "CVE-2020-12135",
  "cve_desc": "bson before 0.8 incorrectly uses int rather than size_t for many variables, parameters, and return values. In particular, the bson_ensure_space() parameter bytesNeeded could have an integer overflow via properly constructed bson input.",
  "repo": "10gen-archive/mongo-c-driver-legacy",
  "patch_hash": "1a1f5e26a4309480d88598913f9eebf9e9cba8ca",
  "patch_info": {
    "commit_hash": "1a1f5e26a4309480d88598913f9eebf9e9cba8ca",
    "repo": "10gen-archive/mongo-c-driver-legacy",
    "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/1a1f5e26a4309480d88598913f9eebf9e9cba8ca#diff-f7d29a680148f52d6601f59ed787f577",
    "files": [
      "src/bcon.c",
      "src/bson.c",
      "src/bson.h",
      "src/encoding.c",
      "src/encoding.h",
      "src/env.c",
      "src/env.h",
      "src/gridfs.c",
      "src/gridfs.h",
      "src/mongo.c"
    ],
    "message": "don't mix up int and size_t (first pass to fix that)",
    "before_after_code_files": [
      "src/bcon.c||src/bcon.c",
      "src/bson.c||src/bson.c",
      "src/bson.h||src/bson.h",
      "src/encoding.c||src/encoding.c",
      "src/encoding.h||src/encoding.h",
      "src/env.c||src/env.c",
      "src/env.h||src/env.h",
      "src/gridfs.c||src/gridfs.c",
      "src/gridfs.h||src/gridfs.h",
      "src/mongo.c||src/mongo.c"
    ]
  },
  "patch_diff": {
    "src/bcon.c||src/bcon.c": [
      "File: src/bcon.c -> src/bcon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:     unsigned char doc_stack[DOC_STACK_SIZE];",
      "173:     size_t doc_stack_pointer = 0;",
      "174:     size_t array_index = 0;",
      "176:     size_t array_index_stack_pointer = 0;",
      "178:     int end_of_data;",
      "",
      "[Removed Lines]",
      "175:     unsigned int array_index_stack[ARRAY_INDEX_STACK_SIZE];",
      "",
      "[Added Lines]",
      "175:     size_t array_index_stack[ARRAY_INDEX_STACK_SIZE];",
      "",
      "---------------"
    ],
    "src/bson.c||src/bson.c": [
      "File: src/bson.c -> src/bson.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:     return i;",
      "107: }",
      "110:     return (b->cur - b->data + 1);",
      "111: }",
      "",
      "[Removed Lines]",
      "109: MONGO_EXPORT int bson_buffer_size( const bson *b ) {",
      "",
      "[Added Lines]",
      "109: MONGO_EXPORT size_t bson_buffer_size( const bson *b ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "306: }",
      "308: MONGO_EXPORT bson_type bson_iterator_next( bson_iterator *i ) {",
      "311:     if ( i->first ) {",
      "312:         i->first = 0;",
      "",
      "[Removed Lines]",
      "309:     int ds;",
      "",
      "[Added Lines]",
      "309:     size_t ds;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "420:     case BSON_INT:",
      "421:         return bson_iterator_int_raw( i );",
      "422:     case BSON_LONG:",
      "424:     case BSON_DOUBLE:",
      "425:         return bson_iterator_double_raw( i );",
      "426:     default:",
      "",
      "[Removed Lines]",
      "423:         return bson_iterator_long_raw( i );",
      "",
      "[Added Lines]",
      "423:         return ( int )bson_iterator_long_raw( i );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "604:     b->cur++;",
      "605: }",
      "608:     memcpy( b->cur , data , len );",
      "609:     b->cur += len;",
      "610: }",
      "",
      "[Removed Lines]",
      "607: static void bson_append( bson *b, const void *data, int len ) {",
      "",
      "[Added Lines]",
      "607: static void bson_append( bson *b, const void *data, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "614:     b->cur += 4;",
      "615: }",
      "617: static void bson_append64( bson *b, const void *data ) {",
      "618:     bson_little_endian64( b->cur, data );",
      "619:     b->cur += 8;",
      "620: }",
      "623:     int pos = b->cur - b->data;",
      "624:     char *orig = b->data;",
      "625:     int new_size;",
      "",
      "[Removed Lines]",
      "622: int bson_ensure_space( bson *b, const int bytesNeeded ) {",
      "",
      "[Added Lines]",
      "617: static void bson_append32_as_int( bson *b, int data ) {",
      "618:     bson_little_endian32( b->cur, &data );",
      "619:     b->cur += 4;",
      "620: }",
      "627: int bson_ensure_space( bson *b, const size_t bytesNeeded ) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "657:     if ( ! b->finished ) {",
      "658:         if ( bson_ensure_space( b, 1 ) == BSON_ERROR ) return BSON_ERROR;",
      "659:         bson_append_byte( b, 0 );",
      "661:         bson_little_endian32( b->data, &i );",
      "662:         b->finished = 1;",
      "663:     }",
      "",
      "[Removed Lines]",
      "660:         i = b->cur - b->data;",
      "",
      "[Added Lines]",
      "665:         i = ( int )( b->cur - b->data );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "675:     }",
      "676: }",
      "679:     const int len = strlen( name ) + 1;",
      "681:     if ( b->finished ) {",
      "",
      "[Removed Lines]",
      "678: static int bson_append_estart( bson *b, int type, const char *name, const int dataSize ) {",
      "",
      "[Added Lines]",
      "683: static int bson_append_estart( bson *b, int type, const char *name, const size_t dataSize ) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "742: }",
      "744: static int bson_append_string_base( bson *b, const char *name,",
      "748:     if ( bson_check_string( b, ( const char * )value, sl - 1 ) == BSON_ERROR )",
      "749:         return BSON_ERROR;",
      "750:     if ( bson_append_estart( b, type, name, 4 + sl ) == BSON_ERROR ) {",
      "751:         return BSON_ERROR;",
      "752:     }",
      "754:     bson_append( b , value , sl - 1 );",
      "755:     bson_append( b , \"\\0\" , 1 );",
      "756:     return BSON_OK;",
      "",
      "[Removed Lines]",
      "745:                                     const char *value, int len, bson_type type ) {",
      "747:     int sl = len + 1;",
      "753:     bson_append32( b , &sl );",
      "",
      "[Added Lines]",
      "750:                                     const char *value, size_t len, bson_type type ) {",
      "752:     size_t sl = len + 1;",
      "758:     bson_append32_as_int( b , ( int )sl );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "768:     return bson_append_string_base( b, name, value, strlen ( value ), BSON_CODE );",
      "769: }",
      "772:     return bson_append_string_base( b, name, value, len, BSON_STRING );",
      "773: }",
      "776:     return bson_append_string_base( b, name, value, len, BSON_SYMBOL );",
      "777: }",
      "780:     return bson_append_string_base( b, name, value, len, BSON_CODE );",
      "781: }",
      "783: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name,",
      "787:     if ( !scope ) return BSON_ERROR;",
      "788:     sl = len + 1;",
      "789:     size = 4 + 4 + sl + bson_size( scope );",
      "790:     if ( bson_append_estart( b, BSON_CODEWSCOPE, name, size ) == BSON_ERROR )",
      "791:         return BSON_ERROR;",
      "793:     bson_append32( b, &sl );",
      "794:     bson_append( b, code, sl );",
      "795:     bson_append( b, scope->data, bson_size( scope ) );",
      "",
      "[Removed Lines]",
      "771: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, int len ) {",
      "775: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *value, int len ) {",
      "779: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *value, int len ) {",
      "784:         const char *code, int len, const bson *scope ) {",
      "786:     int sl, size;",
      "792:     bson_append32( b, &size );",
      "",
      "[Added Lines]",
      "776: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, size_t len ) {",
      "780: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *value, size_t len ) {",
      "784: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *value, size_t len ) {",
      "789:         const char *code, size_t len, const bson *scope ) {",
      "791:     size_t sl, size;",
      "797:     bson_append32_as_int( b, ( int )size );",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "800:     return bson_append_code_w_scope_n( b, name, code, strlen ( code ), scope );",
      "801: }",
      "804:     if ( type == BSON_BIN_BINARY_OLD ) {",
      "805:         int subtwolen = len + 4;",
      "806:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+4+len ) == BSON_ERROR )",
      "807:             return BSON_ERROR;",
      "809:         bson_append_byte( b, type );",
      "811:         bson_append( b, str, len );",
      "812:     }",
      "813:     else {",
      "814:         if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+len ) == BSON_ERROR )",
      "815:             return BSON_ERROR;",
      "817:         bson_append_byte( b, type );",
      "818:         bson_append( b, str, len );",
      "819:     }",
      "",
      "[Removed Lines]",
      "803: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len ) {",
      "808:         bson_append32( b, &subtwolen );",
      "810:         bson_append32( b, &len );",
      "816:         bson_append32( b, &len );",
      "",
      "[Added Lines]",
      "808: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len ) {",
      "813:         bson_append32_as_int( b, ( int )subtwolen );",
      "815:         bson_append32_as_int( b, ( int )len );",
      "821:         bson_append32_as_int( b, ( int )len );",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "834: }",
      "836: MONGO_EXPORT int bson_append_regex( bson *b, const char *name, const char *pattern, const char *opts ) {",
      "839:     if ( bson_append_estart( b, BSON_REGEX, name, plen + olen ) == BSON_ERROR )",
      "840:         return BSON_ERROR;",
      "841:     if ( bson_check_string( b, pattern, plen - 1 ) == BSON_ERROR )",
      "",
      "[Removed Lines]",
      "837:     const int plen = strlen( pattern )+1;",
      "838:     const int olen = strlen( opts )+1;",
      "",
      "[Added Lines]",
      "842:     const size_t plen = strlen( pattern )+1;",
      "843:     const size_t olen = strlen( opts )+1;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "856: MONGO_EXPORT int bson_append_element( bson *b, const char *name_or_null, const bson_iterator *elem ) {",
      "857:     bson_iterator next = *elem;",
      "860:     bson_iterator_next( &next );",
      "861:     size = next.cur - elem->cur;",
      "",
      "[Removed Lines]",
      "858:     int size;",
      "",
      "[Added Lines]",
      "863:     size_t size;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "866:         bson_append( b, elem->cur, size );",
      "867:     }",
      "868:     else {",
      "870:         bson_append_estart( b, elem->cur[0], name_or_null, data_size );",
      "871:         bson_append( b, bson_iterator_value( elem ), data_size );",
      "872:     }",
      "",
      "[Removed Lines]",
      "869:         int data_size = size - 2 - strlen( bson_iterator_key( elem ) );",
      "",
      "[Added Lines]",
      "874:         size_t data_size = size - 2 - strlen( bson_iterator_key( elem ) );",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "922:     bson_append_byte( b , 0 );",
      "924:     start = b->data + b->stack[ --b->stackPos ];",
      "926:     bson_little_endian32( start, &i );",
      "928:     return BSON_OK;",
      "",
      "[Removed Lines]",
      "925:     i = b->cur - start;",
      "",
      "[Added Lines]",
      "930:     i = ( int )( b->cur - start );",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "950:     bson_free_func( ptr );",
      "951: }",
      "954:     void *p;",
      "955:     p = bson_malloc_func( size );",
      "956:     bson_fatal_msg( !!p, \"malloc() failed\" );",
      "957:     return p;",
      "958: }",
      "961:     void *p;",
      "962:     p = bson_realloc_func( ptr, size );",
      "963:     bson_fatal_msg( !!p, \"realloc() failed\" );",
      "",
      "[Removed Lines]",
      "953: MONGO_EXPORT void *bson_malloc( int size ) {",
      "960: void *bson_realloc( void *ptr, int size ) {",
      "",
      "[Added Lines]",
      "958: MONGO_EXPORT void *bson_malloc( size_t size ) {",
      "965: void *bson_realloc( void *ptr, size_t size ) {",
      "",
      "---------------"
    ],
    "src/bson.h||src/bson.h": [
      "File: src/bson.h -> src/bson.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "172: MONGO_EXPORT int bson_size( const bson *b );",
      "",
      "[Removed Lines]",
      "173: MONGO_EXPORT int bson_buffer_size( const bson *b );",
      "",
      "[Added Lines]",
      "173: MONGO_EXPORT size_t bson_buffer_size( const bson *b );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "605: int bson_ensure_space( bson *b, const int bytesNeeded );",
      "",
      "[Added Lines]",
      "605: int bson_ensure_space( bson *b, const size_t bytesNeeded );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "720: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "720: MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "743: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "743: MONGO_EXPORT int bson_append_symbol_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "767: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *str, int len );",
      "",
      "[Added Lines]",
      "767: MONGO_EXPORT int bson_append_code_n( bson *b, const char *name, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "792: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, int size, const bson *scope );",
      "",
      "[Added Lines]",
      "792: MONGO_EXPORT int bson_append_code_w_scope_n( bson *b, const char *name, const char *code, size_t size, const bson *scope );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "805: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len );",
      "",
      "[Added Lines]",
      "805: MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, size_t len );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "980: MONGO_EXPORT void *bson_malloc( int size );",
      "",
      "[Added Lines]",
      "980: MONGO_EXPORT void *bson_malloc( size_t size );",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "993: void *bson_realloc( void *ptr, int size );",
      "",
      "[Added Lines]",
      "993: void *bson_realloc( void *ptr, size_t size );",
      "",
      "---------------"
    ],
    "src/encoding.c||src/encoding.c": [
      "File: src/encoding.c -> src/encoding.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102: }",
      "106:     int result = 0;",
      "108:     if( length >= 4 ) {",
      "",
      "[Removed Lines]",
      "105: static int bson_string_is_db_ref( const unsigned char *string, const int length ) {",
      "",
      "[Added Lines]",
      "105: static int bson_string_is_db_ref( const unsigned char *string, const size_t length ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120: }",
      "122: static int bson_validate_string( bson *b, const unsigned char *string,",
      "124:                                  const char check_dollar ) {",
      "127:     int sequence_length = 1;",
      "129:     if( check_dollar && string[0] == '$' ) {",
      "",
      "[Removed Lines]",
      "123:                                  const int length, const char check_utf8, const char check_dot,",
      "126:     int position = 0;",
      "",
      "[Added Lines]",
      "123:                                  const size_t length, const char check_utf8, const char check_dot,",
      "126:     size_t position = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "157: int bson_check_string( bson *b, const char *string,",
      "160:     return bson_validate_string( b, ( const unsigned char * )string, length, 1, 0, 0 );",
      "161: }",
      "163: int bson_check_field_name( bson *b, const char *string,",
      "166:     return bson_validate_string( b, ( const unsigned char * )string, length, 1, 1, 1 );",
      "167: }",
      "",
      "[Removed Lines]",
      "158:                        const int length ) {",
      "164:                            const int length ) {",
      "",
      "[Added Lines]",
      "158:                        const size_t length ) {",
      "164:                            const size_t length ) {",
      "",
      "---------------"
    ],
    "src/encoding.h||src/encoding.h": [
      "File: src/encoding.h -> src/encoding.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: int bson_check_field_name( bson *b, const char *string,",
      "",
      "[Removed Lines]",
      "38:                            const int length );",
      "",
      "[Added Lines]",
      "38:                            const size_t length );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50: bson_bool_t bson_check_string( bson *b, const char *string,",
      "53: MONGO_EXTERN_C_END",
      "54: #endif",
      "",
      "[Removed Lines]",
      "51:                                const int length );",
      "",
      "[Added Lines]",
      "51:                                const size_t length );",
      "",
      "---------------"
    ],
    "src/env.c||src/env.c": [
      "File: src/env.c -> src/env.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     return closesocket( socket );",
      "39: }",
      "42:     const char *cbuf = buf;",
      "43:     int flags = 0;",
      "45:     while ( len ) {",
      "47:         if ( sent == -1 ) {",
      "48:             __mongo_set_error( conn, MONGO_IO_ERROR, NULL, WSAGetLastError() );",
      "49:             conn->connected = 0;",
      "",
      "[Removed Lines]",
      "41: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "46:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "41: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "46:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     return MONGO_OK;",
      "57: }",
      "60:     char *cbuf = buf;",
      "62:     while ( len ) {",
      "64:         if ( sent == 0 || sent == -1 ) {",
      "65:             __mongo_set_error( conn, MONGO_IO_ERROR, NULL, WSAGetLastError() );",
      "66:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "59: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "63:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "59: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "63:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "225:     return 0;",
      "226: }",
      "229:     const char *cbuf = buf;",
      "230: #ifdef __APPLE__",
      "231:     int flags = 0;",
      "",
      "[Removed Lines]",
      "228: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "",
      "[Added Lines]",
      "228: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "234: #endif",
      "236:     while ( len ) {",
      "238:         if ( sent == -1 ) {",
      "239:             if (errno == EPIPE)",
      "240:                 conn->connected = 0;",
      "",
      "[Removed Lines]",
      "237:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "237:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "248:     return MONGO_OK;",
      "249: }",
      "252:     char *cbuf = buf;",
      "253:     while ( len ) {",
      "255:         if ( sent == 0 || sent == -1 ) {",
      "256:             __mongo_set_error( conn, MONGO_IO_ERROR, strerror( errno ), errno );",
      "257:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "251: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "254:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "251: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "254:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "443: #endif",
      "444: }",
      "447:     const char *cbuf = buf;",
      "448: #ifdef _WIN32",
      "449:     int flags = 0;",
      "",
      "[Removed Lines]",
      "446: int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {",
      "",
      "[Added Lines]",
      "446: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len ) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "456: #endif",
      "458:     while ( len ) {",
      "460:         if ( sent == -1 ) {",
      "461:             if (errno == EPIPE)",
      "462:                 conn->connected = 0;",
      "",
      "[Removed Lines]",
      "459:         int sent = send( conn->sock, cbuf, len, flags );",
      "",
      "[Added Lines]",
      "459:         size_t sent = send( conn->sock, cbuf, len, flags );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "470:     return MONGO_OK;",
      "471: }",
      "474:     char *cbuf = buf;",
      "475:     while ( len ) {",
      "477:         if ( sent == 0 || sent == -1 ) {",
      "478:             conn->err = MONGO_IO_ERROR;",
      "479:             return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "473: int mongo_env_read_socket( mongo *conn, void *buf, int len ) {",
      "476:         int sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "[Added Lines]",
      "473: int mongo_env_read_socket( mongo *conn, void *buf, size_t len ) {",
      "476:         size_t sent = recv( conn->sock, cbuf, len, 0 );",
      "",
      "---------------"
    ],
    "src/env.h||src/env.h": [
      "File: src/env.h -> src/env.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: int mongo_env_set_socket_op_timeout( mongo *conn, int millis );",
      "30: int mongo_env_socket_connect( mongo *conn, const char *host, int port );",
      "",
      "[Removed Lines]",
      "28: int mongo_env_read_socket( mongo *conn, void *buf, int len );",
      "29: int mongo_env_write_socket( mongo *conn, const void *buf, int len );",
      "",
      "[Added Lines]",
      "28: int mongo_env_read_socket( mongo *conn, void *buf, size_t len );",
      "29: int mongo_env_write_socket( mongo *conn, const void *buf, size_t len );",
      "",
      "---------------"
    ],
    "src/gridfs.c||src/gridfs.c": [
      "File: src/gridfs.c -> src/gridfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "228: MONGO_EXPORT void gridfile_write_buffer( gridfile *gfile, const char *data,",
      "229:         gridfs_offset length ) {",
      "234:     char *buffer;",
      "235:     bson *oChunk;",
      "236:     gridfs_offset to_write = length + gfile->pending_len;",
      "",
      "[Removed Lines]",
      "231:     int bytes_left = 0;",
      "232:     int data_partial_len = 0;",
      "233:     int chunks_to_write = 0;",
      "",
      "[Added Lines]",
      "231:     size_t bytes_left = 0;",
      "232:     size_t data_partial_len = 0;",
      "233:     size_t chunks_to_write = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "590:     }",
      "591: }",
      "594:     bson_iterator it;",
      "595:     bson_oid_t id;",
      "596:     bson gte;",
      "",
      "[Removed Lines]",
      "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, int size ) {",
      "",
      "[Added Lines]",
      "593: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size ) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "605:     bson_init( &query );",
      "606:     bson_append_oid( &query, \"files_id\", &id );",
      "607:     if ( size == 1 ) {",
      "609:     }",
      "610:     else {",
      "611:         bson_init( &gte );",
      "613:         bson_finish( &gte );",
      "614:         bson_append_bson( &query, \"n\", &gte );",
      "615:         bson_destroy( &gte );",
      "",
      "[Removed Lines]",
      "608:         bson_append_int( &query, \"n\", start );",
      "612:         bson_append_int( &gte, \"$gte\", start );",
      "",
      "[Added Lines]",
      "608:         bson_append_int( &query, \"n\", (int)start );",
      "612:         bson_append_int( &gte, \"$gte\", (int)start );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "626:     bson_finish( &command );",
      "628:     cursor = mongo_find( gfile->gfs->client, gfile->gfs->chunks_ns,",
      "631:     bson_destroy( &command );",
      "632:     bson_destroy( &query );",
      "",
      "[Removed Lines]",
      "629:                          &command, NULL, size, 0, 0 );",
      "",
      "[Added Lines]",
      "629:                          &command, NULL, (int)size, 0, 0 );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659:     mongo_cursor *chunks;",
      "660:     bson chunk;",
      "665:     gridfs_offset chunksize;",
      "666:     gridfs_offset contentlength;",
      "667:     gridfs_offset bytes_left;",
      "",
      "[Removed Lines]",
      "662:     int first_chunk;",
      "663:     int last_chunk;",
      "664:     int total_chunks;",
      "",
      "[Added Lines]",
      "662:     size_t first_chunk;",
      "663:     size_t last_chunk;",
      "664:     size_t total_chunks;",
      "",
      "---------------"
    ],
    "src/gridfs.h||src/gridfs.h": [
      "File: src/gridfs.h -> src/gridfs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, int size );",
      "",
      "[Added Lines]",
      "296: MONGO_EXPORT mongo_cursor *gridfile_get_chunks( gridfile *gfile, int start, size_t size );",
      "",
      "---------------"
    ],
    "src/mongo.c||src/mongo.c": [
      "File: src/mongo.c -> src/mongo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113: MONGO_EXPORT void __mongo_set_error( mongo *conn, mongo_error_t err, const char *str,",
      "114:                                      int errcode ) {",
      "117:     conn->err = err;",
      "118:     conn->errcode = errcode;",
      "",
      "[Removed Lines]",
      "115:     int errstr_size, str_size;",
      "",
      "[Added Lines]",
      "115:     size_t errstr_size, str_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "266: static const int ZERO = 0;",
      "267: static const int ONE = 1;",
      "269:     mongo_message *mm = ( mongo_message * )bson_malloc( len );",
      "271:     if ( !id )",
      "272:         id = rand();",
      "276:     mm->head.id = id;",
      "277:     mm->head.responseTo = responseTo;",
      "278:     mm->head.op = op;",
      "",
      "[Removed Lines]",
      "268: static mongo_message *mongo_message_create( int len , int id , int responseTo , int op ) {",
      "275:     mm->head.len = len;",
      "",
      "[Added Lines]",
      "268: static mongo_message *mongo_message_create( size_t len , int id , int responseTo , int op ) {",
      "275:     mm->head.len = ( int )len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "344: }",
      "348:     memcpy( start , data , len );",
      "349:     return start + len;",
      "350: }",
      "",
      "[Removed Lines]",
      "347: static char *mongo_data_append( char *start , const void *data , int len ) {",
      "",
      "[Added Lines]",
      "347: static char *mongo_data_append( char *start , const void *data , size_t len ) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "900:     mongo_write_concern *write_concern = NULL;",
      "901:     int i;",
      "902:     char *data;",
      "906:     if( mongo_validate_ns( conn, ns ) != MONGO_OK )",
      "907:         return MONGO_ERROR;",
      "",
      "[Removed Lines]",
      "903:     int overhead =  16 + 4 + strlen( ns ) + 1;",
      "904:     int size = overhead;",
      "",
      "[Added Lines]",
      "903:     size_t overhead =  16 + 4 + strlen( ns ) + 1;",
      "904:     size_t size = overhead;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1204:     }",
      "1205:     else {",
      "1206:         char *data;",
      "1208:         int limit = 0;",
      "1209:         mongo_message *mm;",
      "",
      "[Removed Lines]",
      "1207:         int sl = strlen( cursor->ns )+1;",
      "",
      "[Added Lines]",
      "1207:         size_t sl = strlen( cursor->ns )+1;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1516:     int ret = MONGO_OK;",
      "1517:     bson response = {NULL, 0};",
      "1518:     bson fields;",
      "1521:     int res, success = 0;",
      "",
      "[Removed Lines]",
      "1519:     int sl = strlen( db );",
      "",
      "[Added Lines]",
      "1519:     size_t sl = strlen( db );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1674:     mongo_md5_byte_t digest[16];",
      "1676:     mongo_md5_init( &st );",
      "1678:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )\":mongo:\", 7 );",
      "1680:     mongo_md5_finish( &st, digest );",
      "1681:     digest2hex( digest, hex_digest );",
      "1682: }",
      "",
      "[Removed Lines]",
      "1677:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );",
      "1679:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, strlen( pass ) );",
      "",
      "[Added Lines]",
      "1677:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, ( int )strlen( user ) );",
      "1679:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, ( int )strlen( pass ) );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1734:     mongo_pass_digest( user, pass, hex_digest );",
      "1736:     mongo_md5_init( &st );",
      "1739:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )hex_digest, 32 );",
      "1740:     mongo_md5_finish( &st, digest );",
      "1741:     digest2hex( digest, hex_digest );",
      "",
      "[Removed Lines]",
      "1737:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )nonce, strlen( nonce ) );",
      "1738:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );",
      "",
      "[Added Lines]",
      "1737:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )nonce, ( int )strlen( nonce ) );",
      "1738:     mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, ( int )strlen( user ) );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01ddaffe7c320ecbb5e411432b49962a5e56b755",
      "candidate_info": {
        "commit_hash": "01ddaffe7c320ecbb5e411432b49962a5e56b755",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/01ddaffe7c320ecbb5e411432b49962a5e56b755",
        "files": [
          "src/gridfs.c",
          "src/gridfs.h"
        ],
        "message": "Refactored methods which dealed directly with gridfile contents instead of using gridfile object. This refactoring is needed in order to later refactore pre and post processing of chunks logic to optimize buffer allocation and prepare the ground for effective usage of pre and post processing for encryption, which requires keeping a context between calls",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302: }",
          "304: MONGO_EXPORT int gridfs_store_buffer(gridfs *gfs, const char *data, gridfs_offset length, const char *remotename, const char *contenttype, int flags ) {",
          "335: }",
          "337: MONGO_EXPORT int gridfs_store_file(gridfs *gfs, const char *filename, const char *remotename, const char *contenttype, int flags ) {",
          "339:   char buffer[DEFAULT_CHUNK_SIZE];",
          "349:   if (strcmp(filename, \"-\") == 0) {",
          "",
          "[Removed Lines]",
          "306:   char const *end = data + length;",
          "307:   const char *data_ptr = data;",
          "308:   void* targetBuf = NULL;",
          "309:   bson_oid_t id;",
          "310:   int chunkNumber = 0;",
          "311:   int chunkLen;",
          "312:   bson *oChunk;",
          "313:   int memAllocated = 0;",
          "316:   bson_oid_gen(&id);",
          "319:   while (data_ptr < end) {",
          "320:     chunkLen = DEFAULT_CHUNK_SIZE < (unsigned int)(end - data_ptr) ? DEFAULT_CHUNK_SIZE: (unsigned int)(end - data_ptr);",
          "321:     oChunk = chunk_new(id, chunkNumber, &targetBuf, (void*)data_ptr, chunkLen, flags );",
          "322:     memAllocated = targetBuf != data_ptr;",
          "323:     mongo_insert(gfs->client, gfs->chunks_ns, oChunk, NULL);",
          "324:     chunk_free(oChunk);",
          "325:     chunkNumber++;",
          "326:     data_ptr += chunkLen;",
          "327:   }",
          "329:   if( memAllocated ) {",
          "330:     bson_free( targetBuf );",
          "331:   }",
          "334:   return gridfs_insert_file(gfs, remotename, id, length, contenttype, flags, DEFAULT_CHUNK_SIZE);",
          "340:   FILE *fd;",
          "341:   bson_oid_t id;",
          "342:   int chunkNumber = 0;",
          "343:   gridfs_offset length = 0;",
          "344:   gridfs_offset chunkLen = 0;",
          "345:   bson *oChunk;",
          "346:   void* targetBuf = NULL;",
          "",
          "[Added Lines]",
          "303:   gridfile gfile = INIT_GRIDFILE;",
          "304:   gridfs_offset bytes_written;",
          "306:   gridfile_init( gfs, NULL, &gfile );",
          "307:   gridfile_writer_init( &gfile, gfs, remotename, contenttype, flags );",
          "309:   bytes_written = gridfile_write_buffer( &gfile, data, length );",
          "311:   gridfile_writer_done( &gfile );",
          "312:   gridfile_destroy( &gfile );",
          "314:   return bytes_written == length ? MONGO_OK : MONGO_ERROR;",
          "319:   FILE *fd;",
          "320:   gridfs_offset chunkLen;",
          "321:   gridfile gfile = INIT_GRIDFILE;",
          "322:   gridfs_offset bytes_written = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:     }",
          "356:   }",
          "378:   if (remotename == NULL ||  *remotename == '\\0') {",
          "379:     remotename = filename;",
          "380:   }",
          "384:   }",
          "388: }",
          "390: MONGO_EXPORT void gridfs_remove_filename(gridfs *gfs, const char *filename) {",
          "",
          "[Removed Lines]",
          "359:   bson_oid_gen(&id);",
          "362:   chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "363:   do {",
          "364:     oChunk = chunk_new(id, chunkNumber, &targetBuf, (void*)buffer, (size_t)chunkLen, flags );",
          "365:     mongo_insert(gfs->client, gfs->chunks_ns, oChunk, NULL);",
          "366:     chunk_free(oChunk);",
          "367:     length += chunkLen;",
          "368:     chunkNumber++;",
          "369:     chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "370:   } while (chunkLen != 0);",
          "373:   if (fd != stdin) {",
          "374:     fclose(fd);",
          "375:   }",
          "382:   if( targetBuf && targetBuf != buffer ) {",
          "383:     bson_free( targetBuf );",
          "387:   return gridfs_insert_file(gfs, remotename, id, length, contenttype, flags, DEFAULT_CHUNK_SIZE );",
          "",
          "[Added Lines]",
          "339:   gridfile_init( gfs, NULL, &gfile );",
          "340:   gridfile_writer_init( &gfile, gfs, remotename, contenttype, flags );",
          "342:   chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "343:   while( chunkLen != 0 ) {",
          "344:     bytes_written = gridfile_write_buffer( &gfile, buffer, chunkLen );",
          "345:     if( bytes_written != chunkLen ) break;",
          "346:     chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "349:   gridfile_writer_done( &gfile );",
          "350:   gridfile_destroy( &gfile );",
          "353:   if ( fd != stdin ) {",
          "354:     fclose( fd );",
          "355:   }",
          "356:   return ( chunkLen == 0) || ( bytes_written == chunkLen ) ? MONGO_OK : MONGO_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "464:   }",
          "465: }",
          "470:   bson query = INIT_BSON;",
          "471:   int i;",
          "472:   char *upperName = NULL;",
          "",
          "[Removed Lines]",
          "467: MONGO_EXPORT int gridfs_find_filename(gridfs *gfs, const char *filename, gridfile *gfile)",
          "469:  {",
          "",
          "[Added Lines]",
          "435: MONGO_EXPORT int gridfs_find_filename(gridfs *gfs, const char *filename, gridfile *gfile){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "854:   return;",
          "855: }",
          "859:   bson *oChunk;",
          "860:   bson q = INIT_BSON;",
          "",
          "[Removed Lines]",
          "857: MONGO_EXPORT void gridfile_write_buffer(gridfile *gfile, const char *data, gridfs_offset length) {",
          "",
          "[Added Lines]",
          "823: MONGO_EXPORT gridfs_offset gridfile_write_buffer(gridfile *gfile, const char *data, gridfs_offset length) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "922:   if( memAllocated ){",
          "923:     bson_free( targetBuf );",
          "924:   }",
          "925: }",
          "927: MONGO_EXPORT void gridfile_get_chunk(gridfile *gfile, int n, bson *out) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891:   return length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1115: }",
          "1117: MONGO_EXPORT gridfs_offset gridfile_write_file(gridfile *gfile, FILE *stream) {",
          "1143: }",
          "1145: static void gridfile_remove_chunks( gridfile *gfile, int deleteFromChunk){",
          "",
          "[Removed Lines]",
          "1118:   int i;",
          "1119:   size_t len;",
          "1120:   bson chunk = INIT_BSON;",
          "1121:   bson_iterator it = INIT_ITERATOR;",
          "1122:   const char *data = NULL;",
          "1123:   void* targetBuf = NULL;",
          "1124:   size_t targetBufLen = 0;",
          "1125:   int num;",
          "1127:   num = gridfile_get_numchunks(gfile);",
          "1129:   for (i = 0; i < num; i++) {",
          "1130:     gridfile_get_chunk(gfile, i, &chunk);",
          "1131:     bson_find(&it, &chunk, \"data\");",
          "1132:     len = bson_iterator_bin_len(&it);",
          "1133:     data = bson_iterator_bin_data(&it);",
          "1134:     postProcessChunk( &targetBuf, &targetBufLen, (void*)data, (size_t)len, gfile->flags );",
          "1135:     fwrite(targetBuf, sizeof(char), targetBufLen, stream);",
          "1136:     bson_destroy(&chunk);",
          "1137:   }",
          "1139:   if( targetBuf && targetBuf != data ) {",
          "1140:     bson_free( targetBuf );",
          "1141:   }",
          "1142:   return gridfile_get_contentlength(gfile);",
          "",
          "[Added Lines]",
          "1085:   char buffer[DEFAULT_CHUNK_SIZE];",
          "1086:   size_t data_read, data_written;",
          "1087:   gridfs_offset total_written = 0;",
          "1089:   do {",
          "1090:     data_read = (size_t)gridfile_read( gfile, DEFAULT_CHUNK_SIZE, buffer );",
          "1091:     if( data_read > 0 ){",
          "1092:       data_written = fwrite( buffer, sizeof(char), data_read, stream );",
          "1093:       total_written += data_written;",
          "1094:     }",
          "1095:   } while(( data_read > 0 ) && ( data_written == data_read ));",
          "1097:   return total_written;",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: MONGO_EXPORT void gridfs_destroy( gridfs *gfs );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: MONGO_EXPORT int gridfile_init( gridfs *gfs, bson *meta, gridfile *gfile );",
          "115: MONGO_EXPORT void gridfile_destroy( gridfile *gfile );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:         gridfs_offset length );",
          "",
          "[Removed Lines]",
          "117: MONGO_EXPORT void gridfile_write_buffer( gridfile *gfile, const char *data,",
          "",
          "[Added Lines]",
          "134: MONGO_EXPORT gridfs_offset gridfile_write_buffer( gridfile *gfile, const char *data,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183: MONGO_EXPORT int gridfs_find_filename( gridfs *gfs, const char *filename, gridfile *gfile );",
          "",
          "[Removed Lines]",
          "193: MONGO_EXPORT int gridfile_init( gridfs *gfs, bson *meta, gridfile *gfile );",
          "200: MONGO_EXPORT void gridfile_destroy( gridfile *gfile );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e668199514da4cfaa35159f6bdd9015701a8492b",
      "candidate_info": {
        "commit_hash": "e668199514da4cfaa35159f6bdd9015701a8492b",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/e668199514da4cfaa35159f6bdd9015701a8492b",
        "files": [
          "src/gridfs.c",
          "src/gridfs.h"
        ],
        "message": "GridFS to compile on non-MSC (_strupr, _strlwr, _unlink)",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #endif",
          "23: #include \"gridfs.h\"",
          "",
          "[Removed Lines]",
          "19: #if _MSC_VER && ! _CRT_SECURE_NO_WARNINGS",
          "20:   #define _CRT_SECURE_NO_WARNINGS",
          "",
          "[Added Lines]",
          "19: #if _MSC_VER && ! _CRT_SECURE_NO_WARNINGS",
          "20:   #define _CRT_SECURE_NO_WARNINGS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: #include <string.h>",
          "27: #include <assert.h>",
          "30: MONGO_EXPORT gridfs *gridfs_create( void ) {",
          "31:   gridfs* GridFs = (gridfs*)bson_malloc(sizeof(gridfs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #ifndef _MSC_VER",
          "30: char *_strupr(char *str)",
          "31: {",
          "32:    char *s = str;",
          "33:    while (*s)",
          "35:    return str;",
          "36: }",
          "37: char *_strlwr(char *str)",
          "38: {",
          "39:    char *s = str;",
          "40:    while (*s)",
          "42:    return str;",
          "43: }",
          "44: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:   int deleteFromChunk;",
          "1144:     return gridfile_seek( gfile, gridfile_get_contentlength( gfile ) );",
          "1145:   }",
          "1146:   if( newSize > 0 ) {",
          "",
          "[Removed Lines]",
          "1141:   if( newSize < 0 ) {",
          "1142:     newSize = 0;",
          "1143:   } else if ( newSize > gridfile_get_contentlength( gfile ) ) {",
          "",
          "[Added Lines]",
          "1158:   if ( newSize > gridfile_get_contentlength( gfile ) ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:   void* buf;",
          "1174:   fileSize = gridfile_get_contentlength( gfile );",
          "1179:   newSize = fileSize + bytesToExpand;",
          "1180:   curPos = fileSize;",
          "1181:   bufSize = gridfile_get_chunksize ( gfile );",
          "",
          "[Removed Lines]",
          "1175:   if( bytesToExpand < 0 ) {",
          "1176:     gridfile_seek( gfile, fileSize );",
          "1177:     return fileSize;",
          "1178:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #define INIT_GRIDFILE  {NULL}",
          "62: typedef int ( *gridfs_preProcessingFunc )( void** targetBuf, size_t* targetLen, void* srcBuf, size_t srcLen, int flags );",
          "63: typedef int ( *gridfs_postProcessingFunc )( void** targetBuf, size_t* targetLen, void* srcData, size_t srcLen, int flags );",
          "64: typedef size_t ( *gridfs_pendingDataNeededSizeFunc ) (int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #ifndef _MSC_VER",
          "63: #include <ctype.h>",
          "64: char *_strupr(char *str);",
          "65: char *_strlwr(char *str);",
          "66: #define _unlink unlink",
          "67: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7187c8f88cb551eab035547d34d46b6343892a1",
      "candidate_info": {
        "commit_hash": "b7187c8f88cb551eab035547d34d46b6343892a1",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/b7187c8f88cb551eab035547d34d46b6343892a1",
        "files": [
          "src/gridfs.c",
          "src/gridfs.h"
        ],
        "message": "GridFS: Rename pre- and post-processing funcs\n\n -  Rename `preProcessingFunc` to `readFilter` and `postProcessingFunc` to `writeFilter`\n -  Consolidate duplicate typedefs\n -  Make `srcData` parameter const\n -  Change binary data buffers from void* to char* for consistency with rest of driver",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: }",
          "78:   return 0;",
          "79: }",
          "88:   return DEFAULT_CHUNK_SIZE;",
          "89: }",
          "97:   bson *b = bson_alloc();",
          "98:   size_t dataBufLen = 0;",
          "101:     return NULL;",
          "102:   }",
          "103:   bson_init(b);",
          "104:   bson_append_oid(b, \"files_id\", &id);",
          "105:   bson_append_int(b, \"n\", chunkNumber);",
          "107:   bson_finish(b);",
          "108:   return b;",
          "109: }",
          "",
          "[Removed Lines]",
          "75: static int defaultPreProcessChunk(void** targetBuf, size_t* targetLen, void* srcBuf, size_t srcLen, int flags) {",
          "81: static int defaultPostProcessChunk(void** targetBuf, size_t* targetLen, void* srcData, size_t srcLen, int flags) {",
          "84:   return 0;",
          "85: }",
          "87: static size_t defaultDendingDataNeededSize (int flags) {",
          "92: static gridfs_preProcessingFunc preProcessChunk = defaultPreProcessChunk;",
          "93: static gridfs_postProcessingFunc postProcessChunk = defaultPostProcessChunk;",
          "94: static gridfs_pendingDataNeededSizeFunc pendingDataNeededSize = defaultDendingDataNeededSize;",
          "96: static bson *chunk_new(bson_oid_t id, int chunkNumber, void** dataBuf, void* srcData, size_t len, int flags ) {",
          "100:   if( preProcessChunk( dataBuf, &dataBufLen, srcData, len, flags) != 0 ) {",
          "106:   bson_append_binary(b, \"data\", BSON_BIN_BINARY, (char*)(*dataBuf), (int)dataBufLen);",
          "",
          "[Added Lines]",
          "75: static int gridfs_default_chunk_filter(char** targetBuf, size_t* targetLen, const char* srcData, size_t srcLen, int flags) {",
          "81: static size_t gridfs_default_pending_data_size (int flags) {",
          "86: static gridfs_chunk_filter_func gridfs_write_filter = gridfs_default_chunk_filter;",
          "87: static gridfs_chunk_filter_func gridfs_read_filter = gridfs_default_chunk_filter;",
          "88: static gridfs_pending_data_size_func gridfs_pending_data_size = gridfs_default_pending_data_size;",
          "90: MONGO_EXPORT void gridfs_set_chunk_filter_funcs(gridfs_chunk_filter_func writeFilter, gridfs_chunk_filter_func readFilter, gridfs_pending_data_size_func pendingDataNeededSize) {",
          "91:   gridfs_write_filter = writeFilter;",
          "92:   gridfs_read_filter = readFilter;",
          "93:   gridfs_pending_data_size = pendingDataNeededSize;",
          "94: }",
          "96: static bson *chunk_new(bson_oid_t id, int chunkNumber, char** dataBuf, const char* srcData, size_t len, int flags ) {",
          "100:   if( gridfs_write_filter( dataBuf, &dataBufLen, srcData, len, flags) != 0 ) {",
          "106:   bson_append_binary(b, \"data\", BSON_BIN_BINARY, *dataBuf, (int)dataBufLen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: }",
          "",
          "[Removed Lines]",
          "119: MONGO_EXPORT void setBufferProcessingProcs(gridfs_preProcessingFunc preProcessFunc, gridfs_postProcessingFunc postProcessFunc, gridfs_pendingDataNeededSizeFunc pendingDataNeededSizeFunc){",
          "120:   preProcessChunk = preProcessFunc;",
          "121:   postProcessChunk = postProcessFunc;",
          "122:   pendingDataNeededSize = pendingDataNeededSizeFunc;",
          "123: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:   char const *end = data + length;",
          "307:   const char *data_ptr = data;",
          "309:   bson_oid_t id;",
          "310:   int chunkNumber = 0;",
          "311:   int chunkLen;",
          "",
          "[Removed Lines]",
          "308:   void* targetBuf = NULL;",
          "",
          "[Added Lines]",
          "302:   char* targetBuf = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:   while (data_ptr < end) {",
          "320:     chunkLen = DEFAULT_CHUNK_SIZE < (unsigned int)(end - data_ptr) ? DEFAULT_CHUNK_SIZE: (unsigned int)(end - data_ptr);",
          "322:     memAllocated = targetBuf != data_ptr;",
          "323:     mongo_insert(gfs->client, gfs->chunks_ns, oChunk, NULL);",
          "324:     chunk_free(oChunk);",
          "",
          "[Removed Lines]",
          "321:     oChunk = chunk_new(id, chunkNumber, &targetBuf, (void*)data_ptr, chunkLen, flags );",
          "",
          "[Added Lines]",
          "315:     oChunk = chunk_new(id, chunkNumber, &targetBuf, data_ptr, chunkLen, flags );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:   gridfs_offset length = 0;",
          "344:   gridfs_offset chunkLen = 0;",
          "345:   bson *oChunk;",
          "349:   if (strcmp(filename, \"-\") == 0) {",
          "",
          "[Removed Lines]",
          "346:   void* targetBuf = NULL;",
          "",
          "[Added Lines]",
          "340:   char* targetBuf = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "362:   chunkLen = fread(buffer, 1, DEFAULT_CHUNK_SIZE, fd);",
          "363:   do {",
          "365:     mongo_insert(gfs->client, gfs->chunks_ns, oChunk, NULL);",
          "366:     chunk_free(oChunk);",
          "367:     length += chunkLen;",
          "",
          "[Removed Lines]",
          "364:     oChunk = chunk_new(id, chunkNumber, &targetBuf, (void*)buffer, (size_t)chunkLen, flags );",
          "",
          "[Added Lines]",
          "358:     oChunk = chunk_new(id, chunkNumber, &targetBuf, buffer, (size_t)chunkLen, flags );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "631:   gfile->pending_len = 0;",
          "635: }",
          "637: MONGO_EXPORT void gridfile_destroy(gridfile *gfile)",
          "",
          "[Removed Lines]",
          "634:   gfile->pending_data = (char*) bson_malloc((int)pendingDataNeededSize(gfile->flags));",
          "",
          "[Added Lines]",
          "628:   gfile->pending_data = (char*) bson_malloc((int)gridfs_pending_data_size(gfile->flags));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "800: static void gridfile_flush_pendingchunk(gridfile *gfile) {",
          "801:   bson *oChunk;",
          "802:   bson q = INIT_BSON;",
          "805:   if (gfile->pending_len) {",
          "806:     size_t finish_position_after_flush;",
          "808:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num );",
          "809:     mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "810:     bson_destroy(&q);",
          "",
          "[Removed Lines]",
          "803:   void* targetBuf = NULL;",
          "807:     oChunk = chunk_new(gfile->id, gfile->chunk_num, &targetBuf, (void*)gfile->pending_data, gfile->pending_len, gfile->flags );",
          "",
          "[Added Lines]",
          "797:   char* targetBuf = NULL;",
          "801:     oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, gfile->pending_data, gfile->pending_len, gfile->flags );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "826:   const char *chunk_data;",
          "827:   bson_iterator it = INIT_ITERATOR;",
          "828:   bson chk = INIT_BSON;",
          "830:   size_t targetBufferLen = 0;",
          "832:   chk.dataSize = 0;",
          "",
          "[Removed Lines]",
          "829:   void* targetBuffer = NULL;",
          "",
          "[Added Lines]",
          "823:   char* targetBuffer = NULL;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "841:   bson_find(&it, &chk, \"data\");",
          "842:   chunk_len = bson_iterator_bin_len(&it);",
          "843:   chunk_data = bson_iterator_bin_data(&it);",
          "845:   gfile->pending_len = (int)targetBufferLen;",
          "846:   gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "847:   if( targetBufferLen ) {",
          "",
          "[Removed Lines]",
          "844:   postProcessChunk( &targetBuffer, &targetBufferLen, (void*)chunk_data, (size_t)chunk_len, gfile->flags );",
          "",
          "[Added Lines]",
          "838:   gridfs_read_filter( &targetBuffer, &targetBufferLen, chunk_data, (size_t)chunk_len, gfile->flags );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "860:   bson q = INIT_BSON;",
          "861:   size_t buf_pos, buf_bytes_to_write;",
          "862:   gridfs_offset bytes_left = length;",
          "864:   int memAllocated = 0;",
          "866:   gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "",
          "[Removed Lines]",
          "863:   void* targetBuf = NULL;",
          "",
          "[Added Lines]",
          "857:   char* targetBuf = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "890:   while( bytes_left >= DEFAULT_CHUNK_SIZE ) {",
          "892:     memAllocated = targetBuf != data;",
          "893:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num);",
          "894:     mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "",
          "[Removed Lines]",
          "891:     oChunk = chunk_new(gfile->id, gfile->chunk_num, &targetBuf, (void*)data, DEFAULT_CHUNK_SIZE, gfile->flags );",
          "",
          "[Added Lines]",
          "885:     oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, data, DEFAULT_CHUNK_SIZE, gfile->flags );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "991:   return cursor;",
          "992: }",
          "995: static gridfs_offset gridfile_load_from_chunks(gridfile *gfile, int total_chunks, gridfs_offset chunksize, mongo_cursor *chunks, char* buf,",
          "996:                                                gridfs_offset bytes_left);",
          "",
          "[Removed Lines]",
          "994: static gridfs_offset gridfile_read_from_pending_buffer(gridfile *gfile, gridfs_offset totalBytesToRead, void* buf, int *first_chunk);",
          "",
          "[Added Lines]",
          "988: static gridfs_offset gridfile_read_from_pending_buffer(gridfile *gfile, gridfs_offset totalBytesToRead, char* buf, int *first_chunk);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1032:   return realSize;",
          "1033: }",
          "1036:                                                        int *first_chunk){",
          "1037:   gridfs_offset realSize = 0;",
          "1038:   if( gfile->pending_len > 0 && *first_chunk == gfile->chunk_num) {",
          "",
          "[Removed Lines]",
          "1035: static gridfs_offset gridfile_read_from_pending_buffer(gridfile *gfile, gridfs_offset totalBytesToRead, void* buf,",
          "",
          "[Added Lines]",
          "1029: static gridfs_offset gridfile_read_from_pending_buffer(gridfile *gfile, gridfs_offset totalBytesToRead, char* buf,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1047:   return realSize;",
          "1048: }",
          "1053: static gridfs_offset gridfile_load_from_chunks(gridfile *gfile, int total_chunks, gridfs_offset chunksize, mongo_cursor *chunks, char* buf,",
          "1054:                                                gridfs_offset bytes_left){",
          "1055:   int i;",
          "1057:   size_t targetBufLen = 0;",
          "1058:   int allocatedMem = 0;",
          "1059:   gridfs_offset realSize = 0;",
          "",
          "[Removed Lines]",
          "1050: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, void **targetBuf,",
          "1051:                                          size_t *targetBufLen, gridfs_offset *bytes_left, int chunkNo);",
          "1056:   void* targetBuf = NULL;",
          "",
          "[Added Lines]",
          "1044: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, const bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, char **targetBuf,",
          "1045:                                                   size_t *targetBufLen, gridfs_offset *bytes_left, int chunkNo);",
          "1050:   char* targetBuf = NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1070:   return realSize;",
          "1071: }",
          "1074:                                                   size_t *targetBufLen, gridfs_offset *bytes_left, int chunkNo){",
          "1075:   bson_iterator it = INIT_ITERATOR;",
          "1076:   gridfs_offset chunk_len;",
          "1079:   bson_find(&it, chunk, \"data\");",
          "1080:   chunk_len = bson_iterator_bin_len(&it);",
          "1085:   if (chunkNo == 0) {",
          "1086:     chunk_data += (gfile->pos) % chunksize;",
          "",
          "[Removed Lines]",
          "1073: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, void **targetBuf,",
          "1077:   char *chunk_data;",
          "1081:   chunk_data = (char*)bson_iterator_bin_data(&it);",
          "1082:   postProcessChunk( targetBuf, targetBufLen, (void*)(chunk_data), (size_t)chunk_len, gfile->flags );",
          "1084:   chunk_data = (char*)(*targetBuf);",
          "",
          "[Added Lines]",
          "1067: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, const bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, char **targetBuf,",
          "1071:   const char *chunk_data;",
          "1075:   chunk_data = bson_iterator_bin_data(&it);",
          "1076:   gridfs_read_filter( targetBuf, targetBufLen, chunk_data, (size_t)chunk_len, gfile->flags );",
          "1078:   chunk_data = *targetBuf;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1120:   bson chunk = INIT_BSON;",
          "1121:   bson_iterator it = INIT_ITERATOR;",
          "1122:   const char *data = NULL;",
          "1124:   size_t targetBufLen = 0;",
          "1125:   int num;",
          "",
          "[Removed Lines]",
          "1123:   void* targetBuf = NULL;",
          "",
          "[Added Lines]",
          "1117:   char* targetBuf = NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1131:     bson_find(&it, &chunk, \"data\");",
          "1132:     len = bson_iterator_bin_len(&it);",
          "1133:     data = bson_iterator_bin_data(&it);",
          "1135:     fwrite(targetBuf, sizeof(char), targetBufLen, stream);",
          "1136:     bson_destroy(&chunk);",
          "1137:   }",
          "",
          "[Removed Lines]",
          "1134:     postProcessChunk( &targetBuf, &targetBufLen, (void*)data, (size_t)len, gfile->flags );",
          "",
          "[Added Lines]",
          "1128:     gridfs_read_filter( &targetBuf, &targetBufLen, data, (size_t)len, gfile->flags );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1190: MONGO_EXPORT gridfs_offset gridfile_expand(gridfile *gfile, gridfs_offset bytesToExpand){",
          "1191:   gridfs_offset fileSize, newSize, curPos, toWrite, bufSize;",
          "1195:   fileSize = gridfile_get_contentlength( gfile );",
          "1196:   newSize = fileSize + bytesToExpand;",
          "",
          "[Removed Lines]",
          "1193:   void* buf;",
          "",
          "[Added Lines]",
          "1187:   char* buf;",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #define _unlink unlink",
          "67: #endif",
          "73: MONGO_EXPORT gridfs* gridfs_alloc( void );",
          "74: MONGO_EXPORT void gridfs_dealloc(gridfs* gfs);",
          "75: MONGO_EXPORT gridfile* gridfile_create( void );",
          "76: MONGO_EXPORT void gridfile_dealloc(gridfile* gf);",
          "77: MONGO_EXPORT void gridfile_get_descriptor(gridfile* gf, bson* out);",
          "",
          "[Removed Lines]",
          "69: typedef int ( *gridfs_preProcessingFunc )( void** targetBuf, size_t* targetLen, void* srcBuf, size_t srcLen, int flags );",
          "70: typedef int ( *gridfs_postProcessingFunc )( void** targetBuf, size_t* targetLen, void* srcData, size_t srcLen, int flags );",
          "71: typedef size_t ( *gridfs_pendingDataNeededSizeFunc ) (int flags);",
          "78: MONGO_EXPORT void setBufferProcessingProcs(gridfs_preProcessingFunc preProcessFunc, gridfs_postProcessingFunc postProcessFunc, gridfs_pendingDataNeededSizeFunc pendingDataNeededSizeFunc);",
          "",
          "[Added Lines]",
          "69: typedef int ( *gridfs_chunk_filter_func )( char** targetBuf, size_t* targetLen, const char* srcBuf, size_t srcLen, int flags );",
          "70: typedef size_t ( *gridfs_pending_data_size_func ) (int flags);",
          "77: MONGO_EXPORT void gridfs_set_chunk_filter_funcs(gridfs_chunk_filter_func writeFilter, gridfs_chunk_filter_func readFilter, gridfs_pending_data_size_func pendingDataNeededSize);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb1f7ac532660378014b45588ac263c75b530c7e",
      "candidate_info": {
        "commit_hash": "fb1f7ac532660378014b45588ac263c75b530c7e",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/fb1f7ac532660378014b45588ac263c75b530c7e",
        "files": [
          "src/gridfs.c",
          "src/gridfs.h",
          "test/gridfs_test.c"
        ],
        "message": "Changed name of function gridfile_read to gridfile_read_buffer and changed parameter order to make it consistent with gridfile_write_buffer",
        "before_after_code_files": [
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h",
          "test/gridfs_test.c||test/gridfs_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ],
          "candidate": [
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h"
          ]
        }
      },
      "candidate_diff": {
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "939: static gridfs_offset gridfile_load_from_chunks(gridfile *gfile, int total_chunks, gridfs_offset chunksize, mongo_cursor *chunks, char* buf,",
          "940:                                                gridfs_offset bytes_left);",
          "943:   mongo_cursor *chunks;",
          "945:   int first_chunk;",
          "",
          "[Removed Lines]",
          "942: MONGO_EXPORT gridfs_offset gridfile_read(gridfile *gfile, gridfs_offset size, char *buf) {",
          "",
          "[Added Lines]",
          "942: MONGO_EXPORT gridfs_offset gridfile_read_buffer( gridfile *gfile, char *buf, gridfs_offset size ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1064:   gridfs_offset total_written = 0;",
          "1066:   do {",
          "1068:     if( data_read > 0 ){",
          "1069:       data_written = fwrite( buffer, sizeof(char), data_read, stream );",
          "1070:       total_written += data_written;",
          "",
          "[Removed Lines]",
          "1067:     data_read = (size_t)gridfile_read( gfile, DEFAULT_CHUNK_SIZE, buffer );",
          "",
          "[Added Lines]",
          "1067:     data_read = (size_t)gridfile_read_buffer( gfile, buffer, DEFAULT_CHUNK_SIZE );",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "137: MONGO_EXPORT gridfs_offset gridfile_write_buffer( gridfile *gfile, const char *data,",
          "138:         gridfs_offset length );",
          "",
          "[Added Lines]",
          "137: MONGO_EXPORT gridfs_offset gridfile_write_buffer( gridfile *gfile, const char *data, gridfs_offset length );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "397: MONGO_EXPORT gridfs_offset gridfile_read( gridfile *gfile, gridfs_offset size, char *buf );",
          "",
          "[Added Lines]",
          "396: MONGO_EXPORT gridfs_offset gridfile_read_buffer( gridfile *gfile, char *buf, gridfs_offset size );",
          "",
          "---------------"
        ],
        "test/gridfs_test.c||test/gridfs_test.c": [
          "File: test/gridfs_test.c -> test/gridfs_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     fclose( stream );",
          "75:     ASSERT( memcmp( data_before, data_after, (size_t)length ) == 0 );",
          "78:     ASSERT( memcmp( data_before, data_after, (size_t)length ) == 0 );",
          "80:     lowerName = (char*) bson_malloc( (int)strlen( filename ) + 1);",
          "",
          "[Removed Lines]",
          "77:     gridfile_read( gfile, length, data_after );",
          "",
          "[Added Lines]",
          "77:     gridfile_read_buffer( gfile, data_after, length );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     gridfile_seek(gfile, 0);",
          "118:     ASSERT( gridfile_get_contentlength( gfile ) == (size_t)(length - truncBytes) );",
          "120:     ASSERT( memcmp( data_before, data_after, (size_t)(length - truncBytes) ) == 0 );",
          "122:     gridfile_writer_init( gfile, gfs, filename, content_type, GRIDFILE_DEFAULT);",
          "",
          "[Removed Lines]",
          "119:     ASSERT( gridfile_read( gfile, length, data_after ) ==  (size_t)(length - truncBytes));",
          "",
          "[Added Lines]",
          "119:     ASSERT( gridfile_read_buffer( gfile, data_after, length ) ==  (size_t)(length - truncBytes));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     gridfile_writer_done( gfile );",
          "126:     ASSERT( gridfile_get_contentlength( gfile ) == 0 );",
          "129:     gridfile_destroy( gfile );",
          "130:     ASSERT( gridfs_remove_filename( gfs, filename ) == MONGO_OK );",
          "",
          "[Removed Lines]",
          "127:     ASSERT( gridfile_read( gfile, length, data_after ) == 0 );",
          "",
          "[Added Lines]",
          "127:     ASSERT( gridfile_read_buffer( gfile, data_after, length ) == 0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:         }",
          "299:         ASSERT( gridfile_write_buffer(gfile, &random_data[bytes_to_write_first], n - bytes_to_write_first) == n - bytes_to_write_first ); // Try to write to the existing GridFS file on the position given by j",
          "300:         gridfile_seek(gfile, j);",
          "302:         ASSERT(memcmp( buf, &data_before[j], n) == 0);",
          "304:         gridfile_writer_done(gfile);",
          "",
          "[Removed Lines]",
          "301:         gridfile_read( gfile, n, buf );",
          "",
          "[Added Lines]",
          "301:         gridfile_read_buffer( gfile, buf, n );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "439:     fd = fopen( \"bigfile\", \"r\" );",
          "441:     while( ( n = fread( buffer, 1, MEDIUM, fd ) ) != 0 ) {",
          "443:       ASSERT( memcmp( buffer, read_buf, n ) == 0 );",
          "444:     }",
          "",
          "[Removed Lines]",
          "442:       ASSERT( gridfile_read( gfile, MEDIUM, read_buf ) == n );",
          "",
          "[Added Lines]",
          "442:       ASSERT( gridfile_read_buffer( gfile, read_buf, MEDIUM ) == n );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c203b7eb92169666fc87a6c69d936c98bb752bed",
      "candidate_info": {
        "commit_hash": "c203b7eb92169666fc87a6c69d936c98bb752bed",
        "repo": "10gen-archive/mongo-c-driver-legacy",
        "commit_url": "https://github.com/10gen-archive/mongo-c-driver-legacy/commit/c203b7eb92169666fc87a6c69d936c98bb752bed",
        "files": [
          "src/bson.c",
          "src/bson.h",
          "src/gridfs.c",
          "src/gridfs.h",
          "src/mongo.c",
          "src/mongo.h",
          "test/write_concern_test.c"
        ],
        "message": "Address initialization problems. Syntax fixes as I went.",
        "before_after_code_files": [
          "src/bson.c||src/bson.c",
          "src/bson.h||src/bson.h",
          "src/gridfs.c||src/gridfs.c",
          "src/gridfs.h||src/gridfs.h",
          "src/mongo.c||src/mongo.c",
          "src/mongo.h||src/mongo.h",
          "test/write_concern_test.c||test/write_concern_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/bson.c||src/bson.c",
            "src/bson.h||src/bson.h",
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h",
            "src/mongo.c||src/mongo.c"
          ],
          "candidate": [
            "src/bson.c||src/bson.c",
            "src/bson.h||src/bson.h",
            "src/gridfs.c||src/gridfs.c",
            "src/gridfs.h||src/gridfs.h",
            "src/mongo.c||src/mongo.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bson.c||src/bson.c": [
          "File: src/bson.c -> src/bson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:    READING",
          "65: MONGO_EXPORT bson* bson_alloc( void ) {",
          "66:     return ( bson* )bson_malloc( sizeof( bson ) );",
          "67: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: MONGO_EXPORT void bson_init_zero(bson* b) {",
          "66:     memset(b, 0, sizeof(bson) - sizeof(b->stack));",
          "67: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: }",
          "102: MONGO_EXPORT const bson *bson_shared_empty( void ) {",
          "104:     return &shared_empty;",
          "105: }",
          "",
          "[Removed Lines]",
          "103:     static const bson shared_empty = { bson_shared_empty_data, bson_shared_empty_data, 128, 1, 0, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, 0, 0, 0, 0 };",
          "",
          "[Added Lines]",
          "107:     static const bson shared_empty = { bson_shared_empty_data, bson_shared_empty_data, 128, 1, 0 };",
          "",
          "---------------"
        ],
        "src/bson.h||src/bson.h": [
          "File: src/bson.h -> src/bson.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     bson_bool_t first;",
          "134: } bson_iterator;",
          "138: typedef struct {",
          "149: } bson;",
          "153: #pragma pack(1)",
          "154: typedef union {",
          "155:     char bytes[12];",
          "",
          "[Removed Lines]",
          "136: #define INIT_ITERATOR {NULL, 0}",
          "151: #define INIT_BSON {NULL, NULL}",
          "",
          "[Added Lines]",
          "146:     size_t stack[32];     /**< A stack used to keep track of nested BSON elements.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:    READING",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: MONGO_EXPORT void bson_init_zero( bson *b );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248: MONGO_EXPORT const char *bson_data( const bson *b );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268: MONGO_EXPORT int bson_has_data( const bson *b );",
          "",
          "---------------"
        ],
        "src/gridfs.c||src/gridfs.c": [
          "File: src/gridfs.c -> src/gridfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: MONGO_EXPORT int gridfs_init(mongo *client, const char *dbname, const char *prefix, gridfs *gfs) {",
          "136:   gfs->caseInsensitive = 0;",
          "137:   gfs->client = client;",
          "",
          "[Removed Lines]",
          "134:   bson b = INIT_BSON;",
          "",
          "[Added Lines]",
          "134:   bson b;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232: }",
          "234: static int gridfs_insert_file(gridfs *gfs, const char *name, const bson_oid_t id, gridfs_offset length, const char *contenttype, int flags, int chunkSize) {",
          "240:   int result;",
          "241:   int64_t d;",
          "244:   if( !( flags & GRIDFILE_NOMD5 ) ) {",
          "253:       return result;",
          "255:   }",
          "260:   if (name != NULL &&  *name != '\\0') {",
          "262:   }",
          "265:   d = (bson_date_t)1000 * time(NULL);",
          "267:   if( !( flags & GRIDFILE_NOMD5 ) ) {",
          "271:   } else {",
          "273:   }",
          "274:   if (contenttype != NULL &&  *contenttype != '\\0') {",
          "276:   }",
          "277:   if ( gfs->caseInsensitive ) {",
          "279:   }",
          "292:   return result;",
          "293: }",
          "295: MONGO_EXPORT int gridfs_store_buffer(gridfs *gfs, const char *data, gridfs_offset length, const char *remotename, const char *contenttype, int flags ) {",
          "297:   gridfs_offset bytes_written;",
          "299:   gridfile_init( gfs, NULL, &gfile );",
          "",
          "[Removed Lines]",
          "235:   bson command = INIT_BSON;",
          "236:   bson ret = INIT_BSON;",
          "237:   bson res = INIT_BSON;",
          "238:   bson_iterator it = INIT_ITERATOR;",
          "239:   bson q = INIT_BSON;",
          "246:     bson_init(&command);",
          "247:     bson_append_oid(&command, \"filemd5\", &id);",
          "248:     bson_append_string(&command, \"root\", gfs->prefix);",
          "249:     bson_finish(&command);",
          "250:     result = mongo_run_command(gfs->client, gfs->dbname, &command, &res);",
          "251:     bson_destroy(&command);",
          "252:     if (result != MONGO_OK) {",
          "254:     }",
          "258:   bson_init(&ret);",
          "259:   bson_append_oid(&ret, \"_id\", &id);",
          "261:     bson_append_string_uppercase( &ret, \"filename\", name, gfs->caseInsensitive );",
          "263:   bson_append_long(&ret, \"length\", length);",
          "264:   bson_append_int(&ret, \"chunkSize\", chunkSize);",
          "266:   bson_append_date(&ret, \"uploadDate\", d);",
          "268:     bson_find(&it, &res, \"md5\");",
          "269:     bson_append_string(&ret, \"md5\", bson_iterator_string(&it));",
          "270:     bson_destroy(&res);",
          "272:     bson_append_string(&ret, \"md5\", \"\");",
          "275:     bson_append_string(&ret, \"contentType\", contenttype);",
          "278:     bson_append_string(&ret, \"realFilename\", name);",
          "280:   bson_append_int(&ret, \"flags\", flags);",
          "281:   bson_finish(&ret);",
          "283:   bson_init(&q);",
          "284:   bson_append_oid(&q, \"_id\", &id);",
          "285:   bson_finish(&q);",
          "287:   result = mongo_update(gfs->client, gfs->files_ns, &q, &ret, MONGO_UPDATE_UPSERT, NULL);",
          "289:   bson_destroy(&ret);",
          "290:   bson_destroy(&q);",
          "296:   gridfile gfile = INIT_GRIDFILE;",
          "",
          "[Added Lines]",
          "235:   bson command[1];",
          "236:   bson ret[1];",
          "237:   bson res[1];",
          "238:   bson_iterator it[1];",
          "239:   bson q[1];",
          "246:     bson_init(command);",
          "247:     bson_append_oid(command, \"filemd5\", &id);",
          "248:     bson_append_string(command, \"root\", gfs->prefix);",
          "249:     bson_finish(command);",
          "250:     result = mongo_run_command(gfs->client, gfs->dbname, command, res);",
          "251:     bson_destroy(command);",
          "252:     if (result != MONGO_OK)",
          "257:   bson_init(ret);",
          "258:   bson_append_oid(ret, \"_id\", &id);",
          "260:     bson_append_string_uppercase( ret, \"filename\", name, gfs->caseInsensitive );",
          "262:   bson_append_long(ret, \"length\", length);",
          "263:   bson_append_int(ret, \"chunkSize\", chunkSize);",
          "265:   bson_append_date(ret, \"uploadDate\", d);",
          "267:     bson_find(it, res, \"md5\");",
          "268:     bson_append_string(ret, \"md5\", bson_iterator_string(it));",
          "269:     bson_destroy(res);",
          "271:     bson_append_string(ret, \"md5\", \"\");",
          "274:     bson_append_string(ret, \"contentType\", contenttype);",
          "277:     bson_append_string(ret, \"realFilename\", name);",
          "279:   bson_append_int(ret, \"flags\", flags);",
          "280:   bson_finish(ret);",
          "282:   bson_init(q);",
          "283:   bson_append_oid(q, \"_id\", &id);",
          "284:   bson_finish(q);",
          "286:   result = mongo_update(gfs->client, gfs->files_ns, q, ret, MONGO_UPDATE_UPSERT, NULL);",
          "288:   bson_destroy(ret);",
          "289:   bson_destroy(q);",
          "295:   gridfile gfile;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:   char buffer[DEFAULT_CHUNK_SIZE];",
          "312:   FILE *fd;",
          "313:   gridfs_offset chunkLen;",
          "315:   gridfs_offset bytes_written = 0;",
          "",
          "[Removed Lines]",
          "314:   gridfile gfile = INIT_GRIDFILE;",
          "",
          "[Added Lines]",
          "313:   gridfile gfile;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353: }",
          "355: MONGO_EXPORT int gridfs_remove_filename(gridfs *gfs, const char *filename) {",
          "357:   mongo_cursor *files;",
          "360:   bson_oid_t id;",
          "362:   int ret = MONGO_ERROR;",
          "371:   if ( files == NULL ) return MONGO_ERROR;",
          "374:   while (mongo_cursor_next(files) == MONGO_OK) {",
          "392:   }",
          "394:   mongo_cursor_destroy(files);",
          "",
          "[Removed Lines]",
          "356:   bson query = INIT_BSON;",
          "358:   bson file = INIT_BSON;",
          "359:   bson_iterator it = INIT_ITERATOR;",
          "361:   bson b = INIT_BSON;",
          "364:   bson_init(&query);",
          "365:   bson_append_string_uppercase( &query, \"filename\", filename, gfs->caseInsensitive );",
          "366:   bson_finish(&query);",
          "367:   files = mongo_find(gfs->client, gfs->files_ns, &query, NULL, 0, 0, 0);",
          "368:   bson_destroy(&query);",
          "375:     file = files->current;",
          "376:     bson_find(&it, &file, \"_id\");",
          "377:     id =  *bson_iterator_oid(&it);",
          "380:     bson_init(&b);",
          "381:     bson_append_oid(&b, \"_id\", &id);",
          "382:     bson_finish(&b);",
          "383:     mongo_remove(gfs->client, gfs->files_ns, &b, NULL);",
          "384:     bson_destroy(&b);",
          "387:     bson_init(&b);",
          "388:     bson_append_oid(&b, \"files_id\", &id);",
          "389:     bson_finish(&b);",
          "390:     ret = mongo_remove(gfs->client, gfs->chunks_ns, &b, NULL);",
          "391:     bson_destroy(&b);",
          "",
          "[Added Lines]",
          "355:   bson query[1];",
          "357:   bson file[1];",
          "358:   bson_iterator it[1];",
          "360:   bson b[1];",
          "363:   bson_init(query);",
          "364:   bson_append_string_uppercase( query, \"filename\", filename, gfs->caseInsensitive );",
          "365:   bson_finish(query);",
          "366:   files = mongo_find(gfs->client, gfs->files_ns, query, NULL, 0, 0, 0);",
          "367:   bson_destroy(query);",
          "375:     bson_find(it, file, \"_id\");",
          "376:     id =  *bson_iterator_oid(it);",
          "379:     bson_init(b);",
          "380:     bson_append_oid(b, \"_id\", &id);",
          "381:     bson_finish(b);",
          "382:     mongo_remove(gfs->client, gfs->files_ns, b, NULL);",
          "383:     bson_destroy(b);",
          "386:     bson_init(b);",
          "387:     bson_append_oid(b, \"files_id\", &id);",
          "388:     bson_finish(b);",
          "389:     ret = mongo_remove(gfs->client, gfs->chunks_ns, b, NULL);",
          "390:     bson_destroy(b);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398: MONGO_EXPORT int gridfs_find_query( gridfs *gfs, const bson *query, gridfile *gfile ) {",
          "403:   int i;",
          "417:   if (!i) {",
          "418:     return MONGO_ERROR;",
          "419:   } else {",
          "422:     return MONGO_OK;",
          "423:   }",
          "424: }",
          "426: MONGO_EXPORT int gridfs_find_filename(gridfs *gfs, const char *filename, gridfile *gfile){",
          "428:   int res;",
          "435:   return res;",
          "436: }",
          "",
          "[Removed Lines]",
          "400:   bson uploadDate = INIT_BSON;",
          "401:   bson finalQuery = INIT_BSON;",
          "402:   bson out = INIT_BSON;",
          "405:   bson_init(&uploadDate);",
          "406:   bson_append_int(&uploadDate, \"uploadDate\",  - 1);",
          "407:   bson_finish(&uploadDate);",
          "409:   bson_init(&finalQuery);",
          "410:   bson_append_bson(&finalQuery, \"query\", query);",
          "411:   bson_append_bson(&finalQuery, \"orderby\", &uploadDate);",
          "412:   bson_finish(&finalQuery);",
          "414:   i = (mongo_find_one(gfs->client, gfs->files_ns,  &finalQuery, NULL, &out) == MONGO_OK);",
          "415:   bson_destroy(&uploadDate);",
          "416:   bson_destroy(&finalQuery);",
          "420:     gridfile_init(gfs, &out, gfile);",
          "421:     bson_destroy(&out);",
          "427:   bson query = INIT_BSON;",
          "430:   bson_init(&query);",
          "431:   bson_append_string_uppercase( &query, \"filename\", filename, gfs->caseInsensitive );",
          "432:   bson_finish(&query);",
          "433:   res = gridfs_find_query(gfs, &query, gfile);",
          "434:   bson_destroy(&query);",
          "",
          "[Added Lines]",
          "399:   bson uploadDate[1];",
          "400:   bson finalQuery[1];",
          "401:   bson out[1];",
          "404:   bson_init(uploadDate);",
          "405:   bson_append_int(uploadDate, \"uploadDate\",  - 1);",
          "406:   bson_finish(uploadDate);",
          "408:   bson_init(finalQuery);",
          "409:   bson_append_bson(finalQuery, \"query\", query);",
          "410:   bson_append_bson(finalQuery, \"orderby\", uploadDate);",
          "411:   bson_finish(finalQuery);",
          "413:   i = (mongo_find_one(gfs->client, gfs->files_ns,  finalQuery, NULL, out) == MONGO_OK);",
          "414:   bson_destroy(uploadDate);",
          "415:   bson_destroy(finalQuery);",
          "419:     gridfile_init(gfs, out, gfile);",
          "420:     bson_destroy(out);",
          "426:   bson query[1];",
          "429:   bson_init(query);",
          "430:   bson_append_string_uppercase( query, \"filename\", filename, gfs->caseInsensitive );",
          "431:   bson_finish(query);",
          "432:   res = gridfs_find_query(gfs, query, gfile);",
          "433:   bson_destroy(query);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "495: }",
          "497: static void gridfile_init_chunkSize(gridfile *gfile){",
          "509: }",
          "511: static void gridfile_init_length(gridfile *gfile) {",
          "523: }",
          "525: static void gridfile_init_flags(gridfile *gfile) {",
          "531:     gfile->flags = 0;",
          "533: }",
          "535: MONGO_EXPORT int gridfile_writer_init(gridfile *gfile, gridfs *gfs, const char *remote_name, const char *content_type, int flags ) {",
          "538:   gfile->gfs = gfs;",
          "539:   if (gridfs_find_filename(gfs, remote_name, &tmpFile) == MONGO_OK) {",
          "",
          "[Removed Lines]",
          "498:   bson_iterator it = INIT_ITERATOR;",
          "500:   if( bson_find(&it, gfile->meta, \"chunkSize\") != BSON_EOO ) {",
          "501:     if (bson_iterator_type(&it) == BSON_INT) {",
          "502:       gfile->chunkSize = bson_iterator_int(&it);",
          "503:     } else {",
          "504:       gfile->chunkSize = (int)bson_iterator_long(&it);",
          "505:     }",
          "506:   } else {",
          "507:     gfile->chunkSize = DEFAULT_CHUNK_SIZE;",
          "508:   }",
          "512:   bson_iterator it = INIT_ITERATOR;",
          "514:   if( bson_find(&it, gfile->meta, \"length\") != BSON_EOO ) {",
          "515:     if (bson_iterator_type(&it) == BSON_INT) {",
          "516:       gfile->length = (gridfs_offset)bson_iterator_int(&it);",
          "517:     } else {",
          "518:       gfile->length = (gridfs_offset)bson_iterator_long(&it);",
          "519:     }",
          "520:   } else {",
          "521:     gfile->length = 0;",
          "522:   }",
          "526:   bson_iterator it = INIT_ITERATOR;",
          "528:   if( bson_find(&it, gfile->meta, \"flags\") != BSON_EOO ) {",
          "529:     gfile->flags = bson_iterator_int(&it);",
          "530:   } else {",
          "532:   }",
          "536:   gridfile tmpFile = INIT_GRIDFILE;",
          "",
          "[Added Lines]",
          "497:     bson_iterator it[1];",
          "499:     if (bson_find(it, gfile->meta, \"chunkSize\") != BSON_EOO)",
          "500:         if (bson_iterator_type(it) == BSON_INT)",
          "501:             gfile->chunkSize = bson_iterator_int(it);",
          "502:         else",
          "503:             gfile->chunkSize = (int)bson_iterator_long(it);",
          "504:     else",
          "505:         gfile->chunkSize = DEFAULT_CHUNK_SIZE;",
          "509:     bson_iterator it[1];",
          "511:     if (bson_find(it, gfile->meta, \"length\") != BSON_EOO)",
          "512:         if (bson_iterator_type(it) == BSON_INT)",
          "513:             gfile->length = (gridfs_offset)bson_iterator_int(it);",
          "514:         else",
          "515:             gfile->length = (gridfs_offset)bson_iterator_long(it);",
          "516:     else",
          "517:         gfile->length = 0;",
          "521:   bson_iterator it[1];",
          "523:   if( bson_find(it, gfile->meta, \"flags\") != BSON_EOO )",
          "524:     gfile->flags = bson_iterator_int(it);",
          "525:   else",
          "530:   gridfile tmpFile;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "592: MONGO_EXPORT bson_oid_t gridfile_get_id( const gridfile *gfile ) {",
          "604: }",
          "606: MONGO_EXPORT bson_bool_t gridfile_exists( const gridfile *gfile ) {",
          "",
          "[Removed Lines]",
          "593:   bson_iterator it = INIT_ITERATOR;",
          "595:   if( bson_find(&it, gfile->meta, \"_id\") != BSON_EOO) {",
          "596:     if (bson_iterator_type(&it) == BSON_OID) {",
          "597:       return *bson_iterator_oid(&it);",
          "598:     } else {",
          "599:       return gfile->id;",
          "600:     }",
          "601:   } else {",
          "602:     return gfile->id;",
          "603:   }",
          "",
          "[Added Lines]",
          "587:   bson_iterator it[1];",
          "589:     if (bson_find(it, gfile->meta, \"_id\") != BSON_EOO)",
          "590:         if (bson_iterator_type(it) == BSON_OID)",
          "591:             return *bson_iterator_oid(it);",
          "592:         else",
          "593:             return gfile->id;",
          "594:     else",
          "595:         return gfile->id;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "609: }",
          "611: MONGO_EXPORT const char *gridfile_get_filename( const gridfile *gfile ) {",
          "622: }",
          "624: MONGO_EXPORT int gridfile_get_chunksize( const gridfile *gfile ) {",
          "635:         return DEFAULT_CHUNK_SIZE;",
          "641: }",
          "643: MONGO_EXPORT gridfs_offset gridfile_get_contentlength( const gridfile *gfile ) {",
          "",
          "[Removed Lines]",
          "612:   bson_iterator it = INIT_ITERATOR;",
          "614:   if( gfile->gfs->caseInsensitive && bson_find( &it, gfile->meta, \"realFilename\" ) != BSON_EOO ) {",
          "615:     return bson_iterator_string(&it);",
          "616:   }",
          "617:   if( bson_find(&it, gfile->meta, \"filename\") != BSON_EOO) {",
          "618:     return bson_iterator_string(&it);",
          "619:   } else {",
          "620:     return gfile->remote_name;",
          "621:   }",
          "625:   bson_iterator it = INIT_ITERATOR;",
          "627:   if( gfile->chunkSize ) {",
          "628:     return gfile->chunkSize;",
          "629:   } else {",
          "630:     if( bson_find(&it, gfile->meta, \"chunkSize\") != BSON_EOO ) {",
          "631:       int size = bson_iterator_int(&it);",
          "632:       if(size) {",
          "633:         return size;",
          "634:       } else {",
          "636:       }",
          "637:     } else {",
          "638:       return DEFAULT_CHUNK_SIZE;",
          "639:     }",
          "640:   }",
          "",
          "[Added Lines]",
          "604:     bson_iterator it[1];",
          "606:     if (gfile->gfs->caseInsensitive && bson_find( it, gfile->meta, \"realFilename\" ) != BSON_EOO)",
          "607:         return bson_iterator_string(it);",
          "608:     if (bson_find(it, gfile->meta, \"filename\") != BSON_EOO)",
          "609:         return bson_iterator_string(it);",
          "610:     else",
          "611:         return gfile->remote_name;",
          "615:     bson_iterator it[1];",
          "617:     if (gfile->chunkSize)",
          "618:         return gfile->chunkSize;",
          "619:     else if (bson_find(it, gfile->meta, \"chunkSize\") != BSON_EOO)",
          "620:         return bson_iterator_int(it);",
          "621:     else",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "647: }",
          "649: MONGO_EXPORT const char *gridfile_get_contenttype( const gridfile *gfile ) {",
          "657: }",
          "659: MONGO_EXPORT bson_date_t gridfile_get_uploaddate( const gridfile *gfile ) {",
          "667: }",
          "669: MONGO_EXPORT const char *gridfile_get_md5( const gridfile *gfile ) {",
          "677: }",
          "681: }",
          "683: MONGO_EXPORT int gridfile_get_flags( const gridfile *gfile ) {",
          "",
          "[Removed Lines]",
          "650:   bson_iterator it = INIT_ITERATOR;",
          "652:   if ( bson_find(&it, gfile->meta, \"contentType\") != BSON_EOO ) {",
          "653:     return bson_iterator_string(&it);",
          "654:   } else {",
          "655:     return NULL;",
          "656:   }",
          "660:   bson_iterator it = INIT_ITERATOR;",
          "662:   if( bson_find(&it, gfile->meta, \"uploadDate\") != BSON_EOO) {",
          "663:     return bson_iterator_date(&it);",
          "664:   } else {",
          "665:     return 0;",
          "666:   }",
          "670:   bson_iterator it = INIT_ITERATOR;",
          "672:   if( bson_find(&it, gfile->meta, \"md5\") != BSON_EOO ) {",
          "673:     return bson_iterator_string(&it);",
          "674:   } else {",
          "675:     return NULL;",
          "676:   }",
          "679: MONGO_EXPORT void gridfile_set_flags(gridfile *gfile, int flags){",
          "680:   gfile->flags = flags;",
          "",
          "[Added Lines]",
          "632:     bson_iterator it[1];",
          "634:     if ( bson_find(it, gfile->meta, \"contentType\") != BSON_EOO )",
          "635:         return bson_iterator_string(it);",
          "636:     else",
          "637:         return NULL;",
          "641:     bson_iterator it[1];",
          "643:     if (bson_find(it, gfile->meta, \"uploadDate\") != BSON_EOO)",
          "644:         return bson_iterator_date(it);",
          "645:     else",
          "646:         return 0;",
          "650:     bson_iterator it[1];",
          "652:     if (bson_find(it, gfile->meta, \"md5\") != BSON_EOO )",
          "653:         return bson_iterator_string(it);",
          "654:     else",
          "655:         return NULL;",
          "658: MONGO_EXPORT void gridfile_set_flags(gridfile *gfile, int flags) {",
          "659:     gfile->flags = flags;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "685: }",
          "687: MONGO_EXPORT const char *gridfile_get_field(gridfile *gfile, const char *name) {",
          "695: }",
          "697: MONGO_EXPORT bson_bool_t gridfile_get_boolean( const gridfile *gfile, const char *name ) {",
          "705: }",
          "707: MONGO_EXPORT void gridfile_get_metadata( const gridfile *gfile, bson *out, bson_bool_t copyData ) {",
          "715: }",
          "",
          "[Removed Lines]",
          "688:   bson_iterator it = INIT_ITERATOR;",
          "690:   if( bson_find(&it, gfile->meta, name) != BSON_EOO) {",
          "691:     return bson_iterator_value(&it);",
          "692:   } else {",
          "693:     return NULL;",
          "694:   }",
          "698:   bson_iterator it = INIT_ITERATOR;",
          "700:   if( bson_find(&it, gfile->meta, name) != BSON_EOO) {",
          "701:     return bson_iterator_bool(&it);",
          "702:   } else {",
          "703:     return 0;",
          "704:   }",
          "708:   bson_iterator it = INIT_ITERATOR;",
          "710:   if( bson_find(&it, gfile->meta, \"metadata\") != BSON_EOO ) {",
          "711:     bson_iterator_subobject_init(&it, out, copyData);",
          "712:   } else {",
          "713:     bson_init_empty(out);",
          "714:   }",
          "",
          "[Added Lines]",
          "667:     bson_iterator it[1];",
          "669:     if (bson_find(it, gfile->meta, name) != BSON_EOO)",
          "670:         return bson_iterator_value(it);",
          "671:     else",
          "672:         return NULL;",
          "676:     bson_iterator it[1];",
          "678:     if (bson_find(it, gfile->meta, name) != BSON_EOO)",
          "679:         return bson_iterator_bool(it);",
          "680:     else",
          "681:         return 0;",
          "685:     bson_iterator it[1];",
          "687:     if (bson_find(it, gfile->meta, \"metadata\") != BSON_EOO)",
          "688:         bson_iterator_subobject_init(it, out, copyData);",
          "689:     else",
          "690:         bson_init_empty(out);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "721: MONGO_EXPORT int gridfile_get_numchunks( const gridfile *gfile ) {",
          "739: }",
          "741: static void gridfile_prepare_chunk_key_bson(bson *q, bson_oid_t *id, int chunk_num) {",
          "",
          "[Removed Lines]",
          "722:   bson_iterator it = INIT_ITERATOR;",
          "723:   gridfs_offset length;",
          "724:   gridfs_offset chunkSize;",
          "725:   double numchunks;",
          "727:   bson_find(&it, gfile->meta, \"length\");",
          "729:   if ( bson_iterator_type(&it) == BSON_INT ) {",
          "730:     length = (gridfs_offset)bson_iterator_int(&it);",
          "731:   } else {",
          "732:     length = (gridfs_offset)bson_iterator_long(&it);",
          "733:   }",
          "735:   bson_find(&it, gfile->meta, \"chunkSize\");",
          "736:   chunkSize = bson_iterator_int(&it);",
          "737:   numchunks = ((double)length / (double)chunkSize);",
          "738:   return (numchunks - (int)numchunks > 0) ? (int)(numchunks + 1): (int)(numchunks);",
          "",
          "[Added Lines]",
          "698:     bson_iterator it[1];",
          "699:     gridfs_offset length;",
          "700:     gridfs_offset chunkSize;",
          "701:     double numchunks;",
          "703:     bson_find(it, gfile->meta, \"length\");",
          "705:     if (bson_iterator_type(it) == BSON_INT)",
          "706:         length = (gridfs_offset)bson_iterator_int(it);",
          "707:     else",
          "708:         length = (gridfs_offset)bson_iterator_long(it);",
          "710:     bson_find(it, gfile->meta, \"chunkSize\");",
          "711:     chunkSize = bson_iterator_int(it);",
          "712:     numchunks = ((double)length / (double)chunkSize);",
          "713:     return (numchunks - (int)numchunks > 0) ? (int)(numchunks + 1): (int)(numchunks);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "746: }",
          "748: static int gridfile_flush_pendingchunk(gridfile *gfile) {",
          "768:     }",
          "774: }",
          "776: static int gridfile_load_pending_data_with_pos_chunk(gridfile *gfile) {",
          "777:   int chunk_len;",
          "778:   const char *chunk_data;",
          "781:   char* targetBuffer = NULL;",
          "782:   size_t targetBufferLen = 0;",
          "784:   chk.dataSize = 0;",
          "785:   gridfile_get_chunk(gfile, (int)(gfile->pos / DEFAULT_CHUNK_SIZE), &chk);",
          "786:   if (chk.dataSize <= 5) {",
          "791:   }",
          "795:     gridfs_read_filter( &targetBuffer, &targetBufferLen, chunk_data, (size_t)chunk_len, gfile->flags );",
          "796:     gfile->pending_len = (int)targetBufferLen;",
          "797:     gfile->chunk_num = (int)(gfile->pos / DEFAULT_CHUNK_SIZE);",
          "",
          "[Removed Lines]",
          "749:   bson *oChunk;",
          "750:   bson q = INIT_BSON;",
          "751:   char* targetBuf = NULL;",
          "752:   int res = MONGO_OK;",
          "754:   if (gfile->pending_len) {",
          "755:     size_t finish_position_after_flush;",
          "756:     oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, gfile->pending_data, gfile->pending_len, gfile->flags );",
          "757:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num );",
          "758:     res = mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "759:     bson_destroy(&q);",
          "760:     chunk_free(oChunk);",
          "761:     if( res == MONGO_OK ){",
          "762:       finish_position_after_flush = (gfile->chunk_num * gfile->chunkSize) + gfile->pending_len;",
          "763:       if(finish_position_after_flush > gfile->length) {",
          "764:         gfile->length = finish_position_after_flush;",
          "765:       }",
          "766:       gfile->chunk_num++;",
          "767:       gfile->pending_len = 0;",
          "769:   }",
          "770:   if( targetBuf && targetBuf != gfile->pending_data ) {",
          "771:     bson_free( targetBuf );",
          "772:   }",
          "773:   return res;",
          "779:   bson_iterator it = INIT_ITERATOR;",
          "780:   bson chk = INIT_BSON;",
          "787:     if( chk.data ) {",
          "788:       bson_destroy( &chk );",
          "789:     }",
          "790:     return MONGO_ERROR;",
          "792:   if( bson_find(&it, &chk, \"data\") != BSON_EOO){",
          "793:     chunk_len = bson_iterator_bin_len(&it);",
          "794:     chunk_data = bson_iterator_bin_data(&it);",
          "",
          "[Added Lines]",
          "724:     bson *oChunk;",
          "725:     bson q[1];",
          "726:     char* targetBuf = NULL;",
          "727:     int res = MONGO_OK;",
          "729:     if (gfile->pending_len) {",
          "730:         size_t finish_position_after_flush;",
          "731:         oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, gfile->pending_data, gfile->pending_len, gfile->flags );",
          "732:         gridfile_prepare_chunk_key_bson( q, &gfile->id, gfile->chunk_num );",
          "733:         res = mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "734:         bson_destroy(q);",
          "735:         chunk_free(oChunk);",
          "736:         if( res == MONGO_OK ){",
          "737:             finish_position_after_flush = (gfile->chunk_num * gfile->chunkSize) + gfile->pending_len;",
          "738:             if (finish_position_after_flush > gfile->length)",
          "739:                 gfile->length = finish_position_after_flush;",
          "740:             gfile->chunk_num++;",
          "741:             gfile->pending_len = 0;",
          "742:         }",
          "744:     if (targetBuf && targetBuf != gfile->pending_data)",
          "745:         bson_free( targetBuf );",
          "746:     return res;",
          "752:   bson_iterator it[1];",
          "753:   bson chk;",
          "760:         if( chk.data ) {",
          "761:             bson_destroy( &chk );",
          "762:         }",
          "763:         return MONGO_ERROR;",
          "765:   if( bson_find(it, &chk, \"data\") != BSON_EOO){",
          "766:     chunk_len = bson_iterator_bin_len(it);",
          "767:     chunk_data = bson_iterator_bin_data(it);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "803:     return MONGO_ERROR;",
          "804:   }",
          "805:   bson_destroy( &chk );",
          "807:     bson_free( targetBuffer );",
          "809:   return MONGO_OK;",
          "810: }",
          "812: MONGO_EXPORT gridfs_offset gridfile_write_buffer(gridfile *gfile, const char *data, gridfs_offset length) {",
          "814:   bson *oChunk;",
          "816:   size_t buf_pos, buf_bytes_to_write;",
          "817:   gridfs_offset bytes_left = length;",
          "818:   char* targetBuf = NULL;",
          "",
          "[Removed Lines]",
          "806:   if( targetBuffer && targetBuffer != chunk_data ) {",
          "808:   }",
          "815:   bson q = INIT_BSON;",
          "",
          "[Added Lines]",
          "779:   if( targetBuffer && targetBuffer != chunk_data )",
          "787:   bson q[1];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "842:     int res;",
          "843:     if( (oChunk = chunk_new( gfile->id, gfile->chunk_num, &targetBuf, data, DEFAULT_CHUNK_SIZE, gfile->flags )) == NULL) return length - bytes_left;",
          "844:     memAllocated = targetBuf != data;",
          "848:     chunk_free(oChunk);",
          "849:     if( res != MONGO_OK ) return length - bytes_left;",
          "850:     bytes_left -= DEFAULT_CHUNK_SIZE;",
          "",
          "[Removed Lines]",
          "845:     gridfile_prepare_chunk_key_bson( &q, &gfile->id, gfile->chunk_num);",
          "846:     res = mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, &q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "847:     bson_destroy( &q );",
          "",
          "[Added Lines]",
          "817:     gridfile_prepare_chunk_key_bson(q, &gfile->id, gfile->chunk_num);",
          "818:     res = mongo_update(gfile->gfs->client, gfile->gfs->chunks_ns, q, oChunk, MONGO_UPDATE_UPSERT, NULL);",
          "819:     bson_destroy(q );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "865:     if( !gfile->pending_len && gfile->pos + bytes_left < gfile->length && gridfile_load_pending_data_with_pos_chunk( gfile ) != MONGO_OK )",
          "866:       return length - bytes_left;",
          "867:     memcpy( gfile->pending_data, data, (size_t) bytes_left );",
          "869:       gfile->pending_len = (int) bytes_left;",
          "871:     gfile->pos += bytes_left;",
          "872:   }",
          "",
          "[Removed Lines]",
          "868:     if(  bytes_left > gfile->pending_len ) {",
          "870:     }",
          "",
          "[Added Lines]",
          "840:     if(  bytes_left > gfile->pending_len )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "878: }",
          "880: MONGO_EXPORT void gridfile_get_chunk(gridfile *gfile, int n, bson *out) {",
          "883:   bson_oid_t id;",
          "884:   int result;",
          "887:   id = gridfile_get_id( gfile );",
          "899: }",
          "901: MONGO_EXPORT mongo_cursor *gridfile_get_chunks(gridfile *gfile, size_t start, size_t size) {",
          "903:   bson_oid_t id;",
          "908:   mongo_cursor *cursor;",
          "913:     id = gfile->id;",
          "918:   if (size == 1) {",
          "920:   } else {",
          "926:   }",
          "944:   return cursor;",
          "945: }",
          "",
          "[Removed Lines]",
          "881:   bson query = INIT_BSON;",
          "886:   bson_init(&query);",
          "888:   bson_append_oid(&query, \"files_id\", &id);",
          "889:   bson_append_int(&query, \"n\", n);",
          "890:   bson_finish(&query);",
          "892:   result = (mongo_find_one(gfile->gfs->client, gfile->gfs->chunks_ns, &query, NULL, out) == MONGO_OK);",
          "893:   bson_destroy(&query);",
          "894:   if (!result) {",
          "895:     bson empty = INIT_BSON;",
          "896:     bson_init_empty(&empty);",
          "897:     bson_copy(out, &empty);",
          "898:   }",
          "902:   bson_iterator it = INIT_ITERATOR;",
          "904:   bson gte = INIT_BSON;",
          "905:   bson query = INIT_BSON;",
          "906:   bson orderby = INIT_BSON;",
          "907:   bson command = INIT_BSON;",
          "910:   if( bson_find(&it, gfile->meta, \"_id\") != BSON_EOO) {",
          "911:     id =  *bson_iterator_oid(&it);",
          "912:   } else {",
          "914:   }",
          "916:   bson_init(&query);",
          "917:   bson_append_oid(&query, \"files_id\", &id);",
          "919:     bson_append_int(&query, \"n\", (int)start);",
          "921:     bson_init(&gte);",
          "922:     bson_append_int(&gte, \"$gte\", (int)start);",
          "923:     bson_finish(&gte);",
          "924:     bson_append_bson(&query, \"n\", &gte);",
          "925:     bson_destroy(&gte);",
          "927:   bson_finish(&query);",
          "929:   bson_init(&orderby);",
          "930:   bson_append_int(&orderby, \"n\", 1);",
          "931:   bson_finish(&orderby);",
          "933:   bson_init(&command);",
          "934:   bson_append_bson(&command, \"query\", &query);",
          "935:   bson_append_bson(&command, \"orderby\", &orderby);",
          "936:   bson_finish(&command);",
          "938:   cursor = mongo_find(gfile->gfs->client, gfile->gfs->chunks_ns,  &command, NULL, (int)size, 0, 0);",
          "940:   bson_destroy(&command);",
          "941:   bson_destroy(&query);",
          "942:   bson_destroy(&orderby);",
          "",
          "[Added Lines]",
          "852:   bson query[1];",
          "857:   bson_init(query);",
          "859:   bson_append_oid(query, \"files_id\", &id);",
          "860:   bson_append_int(query, \"n\", n);",
          "861:   bson_finish(query);",
          "863:   result = (mongo_find_one(gfile->gfs->client, gfile->gfs->chunks_ns, query, NULL, out) == MONGO_OK);",
          "864:   bson_destroy(query);",
          "865:   if (!result)",
          "866:     bson_copy(out, bson_shared_empty());",
          "870:   bson_iterator it[1];",
          "872:   bson gte[1];",
          "873:   bson query[1];",
          "874:   bson orderby[1];",
          "875:   bson command[1];",
          "878:   if( bson_find(it, gfile->meta, \"_id\") != BSON_EOO)",
          "879:     id =  *bson_iterator_oid(it);",
          "880:   else",
          "883:   bson_init(query);",
          "884:   bson_append_oid(query, \"files_id\", &id);",
          "886:     bson_append_int(query, \"n\", (int)start);",
          "888:     bson_init(gte);",
          "889:     bson_append_int(gte, \"$gte\", (int)start);",
          "890:     bson_finish(gte);",
          "891:     bson_append_bson(query, \"n\", gte);",
          "892:     bson_destroy(gte);",
          "894:   bson_finish(query);",
          "896:   bson_init(orderby);",
          "897:   bson_append_int(orderby, \"n\", 1);",
          "898:   bson_finish(orderby);",
          "900:   bson_init(command);",
          "901:   bson_append_bson(command, \"query\", query);",
          "902:   bson_append_bson(command, \"orderby\", orderby);",
          "903:   bson_finish(command);",
          "905:   cursor = mongo_find(gfile->gfs->client, gfile->gfs->chunks_ns,  command, NULL, (int)size, 0, 0);",
          "907:   bson_destroy(command);",
          "908:   bson_destroy(query);",
          "909:   bson_destroy(orderby);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1029: static gridfs_offset gridfile_fill_buf_from_chunk(gridfile *gfile, const bson *chunk, gridfs_offset chunksize, char **buf, int *allocatedMem, char **targetBuf,",
          "1030:                                                   size_t *targetBufLen, gridfs_offset *bytes_left, int chunkNo){",
          "1032:   gridfs_offset chunk_len;",
          "1033:   const char *chunk_data;",
          "1038:     if( gridfs_read_filter( targetBuf, targetBufLen, chunk_data, (size_t)chunk_len, gfile->flags ) != 0) return 0;",
          "1040:     chunk_data = *targetBuf;",
          "",
          "[Removed Lines]",
          "1031:   bson_iterator it = INIT_ITERATOR;",
          "1035:   if( bson_find(&it, chunk, \"data\") != BSON_EOO ) {",
          "1036:     chunk_len = bson_iterator_bin_len(&it);",
          "1037:     chunk_data = bson_iterator_bin_data(&it);",
          "",
          "[Added Lines]",
          "998:   bson_iterator it[1];",
          "1002:   if( bson_find(it, chunk, \"data\") != BSON_EOO ) {",
          "1003:     chunk_len = bson_iterator_bin_len(it);",
          "1004:     chunk_data = bson_iterator_bin_data(it);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1090: }",
          "1092: static int gridfile_remove_chunks( gridfile *gfile, int deleteFromChunk){",
          "1094:   bson_oid_t id = gridfile_get_id( gfile );",
          "1095:   int res;",
          "1099:   if( deleteFromChunk >= 0 ) {",
          "1103:   }",
          "1107:   return res;",
          "1108: }",
          "",
          "[Removed Lines]",
          "1093:   bson q = INIT_BSON;",
          "1097:   bson_init( &q );",
          "1098:   bson_append_oid(&q, \"files_id\", &id);",
          "1100:     bson_append_start_object( &q, \"n\" );",
          "1101:     bson_append_int( &q, \"$gte\", deleteFromChunk );",
          "1102:     bson_append_finish_object( &q );",
          "1104:   bson_finish( &q );",
          "1105:   res = mongo_remove( gfile->gfs->client, gfile->gfs->chunks_ns, &q, NULL);",
          "1106:   bson_destroy( &q );",
          "",
          "[Added Lines]",
          "1060:   bson q[1];",
          "1064:   bson_init( q );",
          "1065:   bson_append_oid(q, \"files_id\", &id);",
          "1067:     bson_append_start_object( q, \"n\" );",
          "1068:     bson_append_int( q, \"$gte\", deleteFromChunk );",
          "1069:     bson_append_finish_object( q );",
          "1071:   bson_finish( q );",
          "1072:   res = mongo_remove( gfile->gfs->client, gfile->gfs->chunks_ns, q, NULL);",
          "1073:   bson_destroy( q );",
          "",
          "---------------"
        ],
        "src/gridfs.h||src/gridfs.h": [
          "File: src/gridfs.h -> src/gridfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     GRIDFILE_NOMD5 = ( 1<<0 )",
          "60: };",
          "64: #ifndef _MSC_VER",
          "65: char *_strupr(char *str);",
          "66: char *_strlwr(char *str);",
          "",
          "[Removed Lines]",
          "62: #define INIT_GRIDFILE  {NULL}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mongo.c||src/mongo.c": [
          "File: src/mongo.c -> src/mongo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: MONGO_EXPORT void __mongo_set_error( mongo *conn, mongo_error_t err, const char *str,",
          "128:                                      int errcode ) {",
          "131:     conn->err = err;",
          "132:     conn->errcode = errcode;",
          "134:     if( str ) {",
          "135:         str_size = strlen( str ) + 1;",
          "139:     }",
          "140: }",
          "142: MONGO_EXPORT void mongo_clear_errors( mongo *conn ) {",
          "144:     conn->errcode = 0;",
          "145:     conn->lasterrcode = 0;",
          "148: }",
          "",
          "[Removed Lines]",
          "129:     size_t errstr_size, str_size;",
          "136:         errstr_size = str_size > MONGO_ERR_LEN ? MONGO_ERR_LEN : str_size;",
          "137:         memcpy( conn->errstr, str, errstr_size );",
          "138:         conn->errstr[errstr_size-1] = '\\0';",
          "143:     conn->err = 0;",
          "146:     memset( conn->errstr, 0, MONGO_ERR_LEN );",
          "147:     memset( conn->lasterrstr, 0, MONGO_ERR_LEN );",
          "",
          "[Added Lines]",
          "129:     size_t str_size = 1;",
          "134:         if (str_size > MONGO_ERR_LEN) str_size = MONGO_ERR_LEN;",
          "135:         memcpy( conn->errstr, str, str_size );",
          "137:     conn->errstr[str_size-1] = '\\0';",
          "141:     conn->err = MONGO_CONN_SUCCESS;",
          "144:     conn->errstr[0] = 0;",
          "145:     conn->lasterrstr[0] = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268: }",
          "270: static void mongo_set_last_error( mongo *conn, bson_iterator *it, bson *obj ) {",
          "271:     int result_len = bson_iterator_string_len( it );",
          "272:     const char *result_string = bson_iterator_string( it );",
          "273:     int len = result_len < MONGO_ERR_LEN ? result_len : MONGO_ERR_LEN;",
          "274:     memcpy( conn->lasterrstr, result_string, len );",
          "278: }",
          "280: static const int ZERO = 0;",
          "",
          "[Removed Lines]",
          "276:     if( bson_find( it, obj, \"code\" ) != BSON_NULL )",
          "277:         conn->lasterrcode = bson_iterator_int( it );",
          "",
          "[Added Lines]",
          "269:     bson_iterator iter[1];",
          "274:     iter[0] = *it;  // no side effects on the passed iter",
          "275:     if( bson_find( iter, obj, \"code\" ) != BSON_NULL )",
          "276:         conn->lasterrcode = bson_iterator_int( iter );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:     bson_bool_t ismaster = 0;",
          "395:     int max_bson_size = MONGO_DEFAULT_MAX_BSON_SIZE;",
          "399:     if ( mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, &out ) != MONGO_OK )",
          "400:         return MONGO_ERROR;",
          "",
          "[Removed Lines]",
          "397:     out.data = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "423: static char WC1_data[] = {23,0,0,0,16,103,101,116,108,97,115,116,101,114,114,111,114,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0};",
          "424: static bson WC1_cmd = {",
          "426: };",
          "",
          "[Removed Lines]",
          "425:     WC1_data, WC1_data, 128, 1, 0, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, 0, 0, 0, 0",
          "",
          "[Added Lines]",
          "422:     WC1_data, WC1_data, 128, 1, 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "538: }",
          "540: static void mongo_replica_set_check_seed( mongo *conn ) {",
          "542:     const char *data;",
          "545:     const char *host_string;",
          "546:     mongo_host_port *host_port = NULL;",
          "560:                 host_port = (mongo_host_port*)bson_malloc( sizeof( mongo_host_port ) );",
          "",
          "[Removed Lines]",
          "541:     bson out;",
          "543:     bson_iterator it;",
          "544:     bson_iterator it_sub;",
          "548:     out.data = NULL;",
          "549:     if( mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, &out ) == MONGO_OK ) {",
          "551:         if( bson_find( &it, &out, \"hosts\" ) ) {",
          "552:             data = bson_iterator_value( &it );",
          "553:             bson_iterator_from_buffer( &it_sub, data );",
          "557:             while( bson_iterator_next( &it_sub ) ) {",
          "558:                 host_string = bson_iterator_string( &it_sub );",
          "",
          "[Added Lines]",
          "538:     bson out[1];",
          "540:     bson_iterator it[1];",
          "541:     bson_iterator it_sub[1];",
          "545:     if( mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, out ) == MONGO_OK ) {",
          "547:         if( bson_find( it, out, \"hosts\" ) ) {",
          "548:             data = bson_iterator_value( it );",
          "549:             bson_iterator_from_buffer( it_sub, data );",
          "553:             while( bson_iterator_next( it_sub ) ) {",
          "554:                 host_string = bson_iterator_string( it_sub );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:         }",
          "572:     }",
          "575:     mongo_env_close_socket( conn->sock );",
          "576:     conn->sock = 0;",
          "577:     conn->connected = 0;",
          "579: }",
          "",
          "[Removed Lines]",
          "574:     bson_destroy( &out );",
          "",
          "[Added Lines]",
          "570:     bson_destroy(out);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "584: static int mongo_replica_set_check_host( mongo *conn ) {",
          "588:     bson_bool_t ismaster = 0;",
          "589:     const char *set_name;",
          "590:     int max_bson_size = MONGO_DEFAULT_MAX_BSON_SIZE;",
          "600:         conn->max_bson_size = max_bson_size;",
          "604:             if( strcmp( set_name, conn->replica_set->name ) != 0 ) {",
          "606:                 conn->err = MONGO_CONN_BAD_SET_NAME;",
          "607:                 return MONGO_ERROR;",
          "608:             }",
          "609:         }",
          "610:     }",
          "614:     if( ismaster ) {",
          "615:         conn->replica_set->primary_connected = 1;",
          "",
          "[Removed Lines]",
          "586:     bson out;",
          "587:     bson_iterator it;",
          "592:     out.data = NULL;",
          "594:     if ( mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, &out ) == MONGO_OK ) {",
          "595:         if( bson_find( &it, &out, \"ismaster\" ) )",
          "596:             ismaster = bson_iterator_bool( &it );",
          "598:         if( bson_find( &it, &out, \"maxBsonObjectSize\" ) )",
          "599:             max_bson_size = bson_iterator_int( &it );",
          "602:         if( bson_find( &it, &out, \"setName\" ) ) {",
          "603:             set_name = bson_iterator_string( &it );",
          "605:                 bson_destroy( &out );",
          "612:     bson_destroy( &out );",
          "",
          "[Added Lines]",
          "581:     bson out[1];",
          "582:     bson_iterator it[1];",
          "587:     if ( mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, out ) == MONGO_OK ) {",
          "588:         if( bson_find( it, out, \"ismaster\" ) )",
          "589:             ismaster = bson_iterator_bool( it );",
          "591:         if( bson_find( it, out, \"maxBsonObjectSize\" ) )",
          "592:             max_bson_size = bson_iterator_int( it );",
          "595:         if( bson_find( it, out, \"setName\" ) ) {",
          "596:             set_name = bson_iterator_string( it );",
          "598:                 bson_destroy( out );",
          "605:     bson_destroy( out );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "783:         }",
          "784:     }",
          "788:     return MONGO_OK;",
          "789: }",
          "",
          "[Removed Lines]",
          "786:     conn->err = 0;",
          "",
          "[Added Lines]",
          "779:     conn->err = MONGO_CONN_SUCCESS;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "808: static int mongo_check_last_error( mongo *conn, const char *ns,",
          "809:                                    mongo_write_concern *write_concern ) {",
          "812:     int res = 0;",
          "813:     char *cmd_ns = mongo_ns_to_cmd_db( ns );",
          "816:     bson_free( cmd_ns );",
          "824:         __mongo_set_error( conn, MONGO_WRITE_ERROR,",
          "825:                            \"See conn->lasterrstr for details.\", 0 );",
          "829:     }",
          "833: }",
          "835: static int mongo_choose_write_concern( mongo *conn,",
          "",
          "[Removed Lines]",
          "810:     bson response = {NULL, 0};",
          "811:     bson_iterator it;",
          "815:     res = mongo_find_one( conn, cmd_ns, write_concern->cmd, bson_shared_empty( ), &response );",
          "818:     if ( res != MONGO_OK )",
          "819:         return MONGO_ERROR;",
          "821:     if( ( bson_find( &it, &response, \"$err\" ) == BSON_STRING ) ||",
          "822:             ( bson_find( &it, &response, \"err\" ) == BSON_STRING ) ) {",
          "826:         mongo_set_last_error( conn, &it, &response );",
          "827:         bson_destroy( &response );",
          "828:         return MONGO_ERROR;",
          "831:     bson_destroy( &response );",
          "832:     return MONGO_OK;",
          "",
          "[Added Lines]",
          "803:     bson response[1];",
          "804:     bson_iterator it[1];",
          "808:     res = mongo_find_one( conn, cmd_ns, write_concern->cmd, bson_shared_empty( ), response );",
          "811:     if (res == MONGO_OK &&",
          "812:         (bson_find( it, response, \"$err\" ) == BSON_STRING ||",
          "813:          bson_find( it, response, \"err\" ) == BSON_STRING)) {",
          "817:         mongo_set_last_error( conn, it, response );",
          "818:         res = MONGO_ERROR;",
          "821:     bson_destroy( response );",
          "822:     return res;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1312: MONGO_EXPORT int mongo_find_one( mongo *conn, const char *ns, const bson *query,",
          "1313:                                  const bson *fields, bson *out ) {",
          "1315:     mongo_cursor cursor[1];",
          "1316:     mongo_cursor_init( cursor, conn, ns );",
          "1317:     mongo_cursor_set_query( cursor, query );",
          "1318:     mongo_cursor_set_fields( cursor, fields );",
          "1319:     mongo_cursor_set_limit( cursor, 1 );",
          "1331:     mongo_cursor_destroy( cursor );",
          "1333: }",
          "1335: MONGO_EXPORT void mongo_cursor_init( mongo_cursor *cursor, mongo *conn, const char *ns ) {",
          "",
          "[Removed Lines]",
          "1321:     if( mongo_cursor_next( cursor ) != MONGO_OK ) {",
          "1322:         mongo_cursor_destroy( cursor );",
          "1323:         return MONGO_ERROR;",
          "1324:     }",
          "1326:     if( out && bson_copy( out, &cursor->current ) != MONGO_OK ) {",
          "1327:         mongo_cursor_destroy( cursor );",
          "1328:         return MONGO_ERROR;",
          "1329:     }",
          "1332:     return MONGO_OK;",
          "",
          "[Added Lines]",
          "1304:     int ret;",
          "1311:     ret = mongo_cursor_next(cursor);",
          "1312:     if (ret == MONGO_OK && out)",
          "1313:         ret = bson_copy(out, &cursor->current);",
          "1314:     if (ret != MONGO_OK && out)",
          "1315:         bson_init_zero(out);",
          "1318:     return ret;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1520: }",
          "1522: MONGO_EXPORT bson_bool_t mongo_create_simple_index( mongo *conn, const char *ns, const char *field, int options, bson *out ) {",
          "1524:     bson_bool_t success;",
          "1532:     return success;",
          "1533: }",
          "1535: MONGO_EXPORT int mongo_create_capped_collection( mongo *conn, const char *db,",
          "1536:         const char *collection, int size, int max, bson *out ) {",
          "1539:     int result;",
          "1545:     if( max > 0 )",
          "1553:     return result;",
          "1554: }",
          "1556: MONGO_EXPORT double mongo_count( mongo *conn, const char *db, const char *coll, const bson *query ) {",
          "1579:     }",
          "1580: }",
          "1582: MONGO_EXPORT int mongo_run_command( mongo *conn, const char *db, const bson *command,",
          "1583:                                     bson *out ) {",
          "1586:     size_t sl = strlen( db );",
          "1588:     int res = 0;",
          "1590:     strcpy( ns, db );",
          "1591:     strcpy( ns+sl, \".$cmd\" );",
          "1594:     bson_free( ns );",
          "1601:         conn->err = MONGO_COMMAND_FAILED;",
          "1604:     }",
          "1612: }",
          "1614: MONGO_EXPORT int mongo_simple_int_command( mongo *conn, const char *db,",
          "1615:         const char *cmdstr, int arg, bson *out ) {",
          "1618:     int result;",
          "1628:     return result;",
          "1629: }",
          "",
          "[Removed Lines]",
          "1523:     bson b;",
          "1526:     bson_init( &b );",
          "1527:     bson_append_int( &b, field, 1 );",
          "1528:     bson_finish( &b );",
          "1530:     success = mongo_create_index( conn, ns, &b, NULL, options, out );",
          "1531:     bson_destroy( &b );",
          "1538:     bson b;",
          "1541:     bson_init( &b );",
          "1542:     bson_append_string( &b, \"create\", collection );",
          "1543:     bson_append_bool( &b, \"capped\", 1 );",
          "1544:     bson_append_int( &b, \"size\", size );",
          "1546:         bson_append_int( &b, \"max\", size );",
          "1547:     bson_finish( &b );",
          "1549:     result = mongo_run_command( conn, db, &b, out );",
          "1551:     bson_destroy( &b );",
          "1557:     bson cmd;",
          "1558:     bson out = {NULL, 0};",
          "1559:     double count = -1;",
          "1561:     bson_init( &cmd );",
          "1562:     bson_append_string( &cmd, \"count\", coll );",
          "1564:         bson_append_bson( &cmd, \"query\", query );",
          "1565:     bson_finish( &cmd );",
          "1567:     if( mongo_run_command( conn, db, &cmd, &out ) == MONGO_OK ) {",
          "1568:         bson_iterator it;",
          "1569:         if( bson_find( &it, &out, \"n\" ) )",
          "1570:             count = bson_iterator_double( &it );",
          "1571:         bson_destroy( &cmd );",
          "1572:         bson_destroy( &out );",
          "1573:         return count;",
          "1574:     }",
          "1575:     else {",
          "1576:         bson_destroy( &out );",
          "1577:         bson_destroy( &cmd );",
          "1578:         return MONGO_ERROR;",
          "1584:     bson response = {NULL, 0};",
          "1585:     bson_iterator it;",
          "1593:     res = mongo_find_one( conn, ns, command, bson_shared_empty( ), &response );",
          "1596:     if( res != MONGO_OK )",
          "1597:         return MONGO_ERROR;",
          "1599:     if( ! bson_find( &it, &response, \"ok\" ) ||",
          "1600:         ! bson_iterator_bool( &it ) ) {",
          "1602:         bson_destroy( &response );",
          "1603:         return MONGO_ERROR;",
          "1606:     if( out )",
          "1608:     else",
          "1609:         bson_destroy( &response );",
          "1611:     return MONGO_OK;",
          "1617:     bson cmd;",
          "1620:     bson_init( &cmd );",
          "1621:     bson_append_int( &cmd, cmdstr, arg );",
          "1622:     bson_finish( &cmd );",
          "1624:     result = mongo_run_command( conn, db, &cmd, out );",
          "1626:     bson_destroy( &cmd );",
          "",
          "[Added Lines]",
          "1509:     bson b[1];",
          "1512:     bson_init( b );",
          "1513:     bson_append_int( b, field, 1 );",
          "1514:     bson_finish( b );",
          "1516:     success = mongo_create_index( conn, ns, b, NULL, options, out );",
          "1517:     bson_destroy( b );",
          "1524:     bson b[1];",
          "1527:     bson_init( b );",
          "1528:     bson_append_string( b, \"create\", collection );",
          "1529:     bson_append_bool( b, \"capped\", 1 );",
          "1530:     bson_append_int( b, \"size\", size );",
          "1532:         bson_append_int( b, \"max\", size );",
          "1533:     bson_finish( b );",
          "1535:     result = mongo_run_command( conn, db, b, out );",
          "1537:     bson_destroy( b );",
          "1543:     bson cmd[1];",
          "1544:     bson out[1];",
          "1545:     double count = MONGO_ERROR;  // -1",
          "1547:     bson_init( cmd );",
          "1548:     bson_append_string( cmd, \"count\", coll );",
          "1550:         bson_append_bson( cmd, \"query\", query );",
          "1551:     bson_finish( cmd );",
          "1553:     if( mongo_run_command( conn, db, cmd, out ) == MONGO_OK ) {",
          "1554:         bson_iterator it[1];",
          "1555:         if( bson_find( it, out, \"n\" ) )",
          "1556:             count = bson_iterator_double( it );",
          "1558:     bson_destroy( out );",
          "1559:     bson_destroy( cmd );",
          "1560:     return count;",
          "1565:     bson response[1];",
          "1566:     bson_iterator it[1];",
          "1574:     res = mongo_find_one( conn, ns, command, bson_shared_empty( ), response );",
          "1577:     if (res == MONGO_OK && (!bson_find( it, response, \"ok\" ) || !bson_iterator_bool( it )) ) {",
          "1579:         bson_destroy( response );",
          "1580:         res = MONGO_ERROR;",
          "1583:     if (out)",
          "1584:         if (res == MONGO_OK)",
          "1586:         else",
          "1587:             bson_init_zero(out);",
          "1588:     else if (res == MONGO_OK)",
          "1589:         bson_destroy(response);",
          "1591:     return res;",
          "1597:     bson cmd[1];",
          "1600:     bson_init( cmd );",
          "1601:     bson_append_int( cmd, cmdstr, arg );",
          "1602:     bson_finish( cmd );",
          "1604:     result = mongo_run_command( conn, db, cmd, out );",
          "1606:     bson_destroy( cmd );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1659: static int mongo_cmd_get_error_helper( mongo *conn, const char *db,",
          "1660:                                        bson *realout, const char *cmdtype ) {",
          "1663:     bson_bool_t haserror = 0;",
          "1666:     mongo_clear_errors( conn );",
          "1673:     }",
          "1675:     if( realout )",
          "1677:     else",
          "1680:     if( haserror )",
          "1681:         return MONGO_ERROR;",
          "",
          "[Removed Lines]",
          "1662:     bson out = {NULL,0};",
          "1669:     if( mongo_simple_int_command( conn, db, cmdtype, 1, &out ) == MONGO_OK ) {",
          "1670:         bson_iterator it;",
          "1671:         haserror = ( bson_find( &it, &out, \"err\" ) != BSON_NULL );",
          "1672:         if( haserror ) mongo_set_last_error( conn, &it, &out );",
          "1678:         bson_destroy( &out );",
          "",
          "[Added Lines]",
          "1642:     bson out[1];",
          "1647:     bson_init_zero(out);",
          "1650:     if( mongo_simple_int_command( conn, db, cmdtype, 1, out ) == MONGO_OK ) {",
          "1651:         bson_iterator it[1];",
          "1652:         haserror = ( bson_find( it, out, \"err\" ) != BSON_NULL );",
          "1653:         if( haserror ) mongo_set_last_error( conn, it, out );",
          "1659:         bson_destroy( out );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1692: }",
          "1694: MONGO_EXPORT bson_bool_t mongo_cmd_ismaster( mongo *conn, bson *realout ) {",
          "1696:     bson_bool_t ismaster = 0;",
          "1709:     return ismaster;",
          "1710: }",
          "",
          "[Removed Lines]",
          "1695:     bson out = {NULL,0};",
          "1698:     if ( mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, &out ) == MONGO_OK ) {",
          "1699:         bson_iterator it;",
          "1700:         bson_find( &it, &out, \"ismaster\" );",
          "1701:         ismaster = bson_iterator_bool( &it );",
          "1702:     }",
          "1704:     if( realout )",
          "1706:     else",
          "1707:         bson_destroy( &out );",
          "",
          "[Added Lines]",
          "1676:     bson out[1];",
          "1679:     int res = mongo_simple_int_command( conn, \"admin\", \"ismaster\", 1, out );",
          "1680:     if (res == MONGO_OK) {",
          "1681:         bson_iterator it[1];",
          "1682:         bson_find( it, out, \"ismaster\" );",
          "1683:         ismaster = bson_iterator_bool( it );",
          "1684:         if (realout)",
          "1686:         else",
          "1687:             bson_destroy( out );",
          "1688:     } else if (realout)",
          "1689:         bson_init_zero(realout);",
          "",
          "---------------"
        ],
        "src/mongo.h||src/mongo.h": [
          "File: src/mongo.h -> src/mongo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #if !defined(MONGO_ENV_STANDARD) && (defined(__APPLE__) || defined(__linux) || defined(__unix) || defined(__posix))",
          "29:   typedef int SOCKET;",
          "30: #else",
          "31:   typedef size_t SOCKET; /* Defined socket as size_t to avoid coupling here with Winsock header files. It creates other issues in other files because",
          "",
          "[Removed Lines]",
          "21: #ifndef MONGO_H_",
          "22: #define MONGO_H_",
          "24: #include \"bson.h\"",
          "26: MONGO_EXTERN_C_START",
          "33: #endif",
          "35: #define MONGO_MAJOR 0",
          "36: #define MONGO_MINOR 7",
          "37: #define MONGO_PATCH 0",
          "39: #define MONGO_OK 0",
          "40: #define MONGO_ERROR -1",
          "42: #define MONGO_DEFAULT_PORT 27017",
          "44: #define MONGO_DEFAULT_MAX_BSON_SIZE 4 * 1024 * 1024",
          "46: #define MONGO_ERR_LEN 128",
          "48: #ifndef MAXHOSTNAMELEN",
          "49:     #define MAXHOSTNAMELEN 256",
          "50: #endif",
          "52: typedef enum mongo_error_t {",
          "71: } mongo_error_t;",
          "73: typedef enum mongo_cursor_error_t {",
          "77:     MONGO_CURSOR_QUERY_FAIL, /**< The server returned an '$err' object, indicating query failure.",
          "79:     MONGO_CURSOR_BSON_ERROR  /**< Something is wrong with the BSON provided. See conn->err",
          "81: } mongo_cursor_error_t;",
          "83: enum mongo_cursor_flags {",
          "86: };",
          "88: enum mongo_index_opts {",
          "89:     MONGO_INDEX_UNIQUE = ( 1<<0 ),",
          "90:     MONGO_INDEX_DROP_DUPS = ( 1<<2 ),",
          "91:     MONGO_INDEX_BACKGROUND = ( 1<<3 ),",
          "92:     MONGO_INDEX_SPARSE = ( 1<<4 )",
          "93: };",
          "95: enum mongo_update_opts {",
          "96:     MONGO_UPDATE_UPSERT = 0x1,",
          "97:     MONGO_UPDATE_MULTI = 0x2,",
          "98:     MONGO_UPDATE_BASIC = 0x4",
          "99: };",
          "101: enum mongo_insert_opts {",
          "102:     MONGO_CONTINUE_ON_ERROR = 0x1",
          "103: };",
          "105: enum mongo_cursor_opts {",
          "112: };",
          "114: enum mongo_operations {",
          "115:     MONGO_OP_MSG = 1000,",
          "116:     MONGO_OP_UPDATE = 2001,",
          "117:     MONGO_OP_INSERT = 2002,",
          "118:     MONGO_OP_QUERY = 2004,",
          "119:     MONGO_OP_GET_MORE = 2005,",
          "120:     MONGO_OP_DELETE = 2006,",
          "121:     MONGO_OP_KILL_CURSORS = 2007",
          "122: };",
          "124: #pragma pack(1)",
          "125: typedef struct {",
          "126:     int len;",
          "127:     int id;",
          "128:     int responseTo;",
          "129:     int op;",
          "130: } mongo_header;",
          "132: typedef struct {",
          "133:     mongo_header head;",
          "134:     char data;",
          "135: } mongo_message;",
          "137: typedef struct {",
          "139:     int64_t cursorID;",
          "140:     int start;",
          "141:     int num;",
          "142: } mongo_reply_fields;",
          "144: typedef struct {",
          "145:     mongo_header head;",
          "146:     mongo_reply_fields fields;",
          "147:     char objs;",
          "148: } mongo_reply;",
          "149: #pragma pack()",
          "151: typedef struct mongo_host_port {",
          "152:     char host[MAXHOSTNAMELEN];",
          "153:     int port;",
          "154:     struct mongo_host_port *next;",
          "155: } mongo_host_port;",
          "157: typedef struct mongo_write_concern {",
          "165: } mongo_write_concern;",
          "167: typedef struct {",
          "172: } mongo_replica_set;",
          "174: typedef struct mongo {",
          "190: } mongo;",
          "192: typedef struct {",
          "205: } mongo_cursor;",
          "208: Connection API",
          "213: MONGO_EXPORT void mongo_init_sockets( void );",
          "225: MONGO_EXPORT void mongo_init( mongo *conn );",
          "237: MONGO_EXPORT int mongo_client( mongo *conn , const char *host, int port );",
          "250: MONGO_EXPORT int mongo_connect( mongo *conn , const char *host, int port );",
          "259: MONGO_EXPORT void mongo_replica_set_init( mongo *conn, const char *name );",
          "269: MONGO_EXPORT void mongo_replset_init( mongo *conn, const char *name );",
          "280: MONGO_EXPORT void mongo_replica_set_add_seed( mongo *conn, const char *host, int port );",
          "292: MONGO_EXPORT void mongo_replset_add_seed( mongo *conn, const char *host, int port );",
          "301: void mongo_parse_host( const char *host_string, mongo_host_port *host_port );",
          "312: MONGO_EXPORT int mongo_validate_ns( mongo *conn, const char *ns );",
          "325: MONGO_EXPORT int mongo_replica_set_client( mongo *conn );",
          "339: MONGO_EXPORT int mongo_replset_connect( mongo *conn );",
          "351: MONGO_EXPORT int mongo_set_op_timeout( mongo *conn, int millis );",
          "361: MONGO_EXPORT int mongo_check_connection( mongo *conn );",
          "374: MONGO_EXPORT int mongo_reconnect( mongo *conn );",
          "383: MONGO_EXPORT void mongo_disconnect( mongo *conn );",
          "393: MONGO_EXPORT void mongo_destroy( mongo *conn );",
          "404: MONGO_EXPORT void mongo_set_write_concern( mongo *conn,",
          "405:         mongo_write_concern *write_concern );",
          "",
          "[Added Lines]",
          "21: #ifndef MONGO_H_",
          "22: #define MONGO_H_",
          "24: #include \"bson.h\"",
          "26: MONGO_EXTERN_C_START",
          "33: #endif",
          "35: #define MONGO_MAJOR 0",
          "36: #define MONGO_MINOR 7",
          "37: #define MONGO_PATCH 0",
          "39: #define MONGO_OK 0",
          "40: #define MONGO_ERROR -1",
          "42: #define MONGO_DEFAULT_PORT 27017",
          "44: #define MONGO_DEFAULT_MAX_BSON_SIZE 4 * 1024 * 1024",
          "46: #define MONGO_ERR_LEN 128",
          "48: #ifndef MAXHOSTNAMELEN",
          "49:     #define MAXHOSTNAMELEN 256",
          "50: #endif",
          "52: typedef enum mongo_error_t {",
          "71: } mongo_error_t;",
          "73: typedef enum mongo_cursor_error_t {",
          "77:     MONGO_CURSOR_QUERY_FAIL, /**< The server returned an '$err' object, indicating query failure.",
          "79:     MONGO_CURSOR_BSON_ERROR  /**< Something is wrong with the BSON provided. See conn->err",
          "81: } mongo_cursor_error_t;",
          "83: enum mongo_cursor_flags {",
          "86: };",
          "88: enum mongo_index_opts {",
          "89:     MONGO_INDEX_UNIQUE = ( 1<<0 ),",
          "90:     MONGO_INDEX_DROP_DUPS = ( 1<<2 ),",
          "91:     MONGO_INDEX_BACKGROUND = ( 1<<3 ),",
          "92:     MONGO_INDEX_SPARSE = ( 1<<4 )",
          "93: };",
          "95: enum mongo_update_opts {",
          "96:     MONGO_UPDATE_UPSERT = 0x1,",
          "97:     MONGO_UPDATE_MULTI = 0x2,",
          "98:     MONGO_UPDATE_BASIC = 0x4",
          "99: };",
          "101: enum mongo_insert_opts {",
          "102:     MONGO_CONTINUE_ON_ERROR = 0x1",
          "103: };",
          "105: enum mongo_cursor_opts {",
          "112: };",
          "114: enum mongo_operations {",
          "115:     MONGO_OP_MSG = 1000,",
          "116:     MONGO_OP_UPDATE = 2001,",
          "117:     MONGO_OP_INSERT = 2002,",
          "118:     MONGO_OP_QUERY = 2004,",
          "119:     MONGO_OP_GET_MORE = 2005,",
          "120:     MONGO_OP_DELETE = 2006,",
          "121:     MONGO_OP_KILL_CURSORS = 2007",
          "122: };",
          "124: #pragma pack(1)",
          "125: typedef struct {",
          "126:     int len;",
          "127:     int id;",
          "128:     int responseTo;",
          "129:     int op;",
          "130: } mongo_header;",
          "132: typedef struct {",
          "133:     mongo_header head;",
          "134:     char data;",
          "135: } mongo_message;",
          "137: typedef struct {",
          "139:     int64_t cursorID;",
          "140:     int start;",
          "141:     int num;",
          "142: } mongo_reply_fields;",
          "144: typedef struct {",
          "145:     mongo_header head;",
          "146:     mongo_reply_fields fields;",
          "147:     char objs;",
          "148: } mongo_reply;",
          "149: #pragma pack()",
          "151: typedef struct mongo_host_port {",
          "152:     char host[255];",
          "153:     int port;",
          "154:     struct mongo_host_port *next;",
          "155: } mongo_host_port;",
          "157: typedef struct mongo_write_concern {",
          "165: } mongo_write_concern;",
          "167: typedef struct {",
          "172: } mongo_replica_set;",
          "174: typedef struct mongo {",
          "190: } mongo;",
          "192: typedef struct {",
          "205: } mongo_cursor;",
          "208: Connection API",
          "213: MONGO_EXPORT void mongo_init_sockets( void );",
          "225: MONGO_EXPORT void mongo_init( mongo *conn );",
          "237: MONGO_EXPORT int mongo_client( mongo *conn , const char *host, int port );",
          "250: MONGO_EXPORT int mongo_connect( mongo *conn , const char *host, int port );",
          "259: MONGO_EXPORT void mongo_replica_set_init( mongo *conn, const char *name );",
          "269: MONGO_EXPORT void mongo_replset_init( mongo *conn, const char *name );",
          "280: MONGO_EXPORT void mongo_replica_set_add_seed( mongo *conn, const char *host, int port );",
          "292: MONGO_EXPORT void mongo_replset_add_seed( mongo *conn, const char *host, int port );",
          "301: void mongo_parse_host( const char *host_string, mongo_host_port *host_port );",
          "312: MONGO_EXPORT int mongo_validate_ns( mongo *conn, const char *ns );",
          "325: MONGO_EXPORT int mongo_replica_set_client( mongo *conn );",
          "339: MONGO_EXPORT int mongo_replset_connect( mongo *conn );",
          "351: MONGO_EXPORT int mongo_set_op_timeout( mongo *conn, int millis );",
          "361: MONGO_EXPORT int mongo_check_connection( mongo *conn );",
          "374: MONGO_EXPORT int mongo_reconnect( mongo *conn );",
          "383: MONGO_EXPORT void mongo_disconnect( mongo *conn );",
          "393: MONGO_EXPORT void mongo_destroy( mongo *conn );",
          "404: MONGO_EXPORT void mongo_set_write_concern( mongo *conn,",
          "405:         mongo_write_concern *write_concern );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423: MONGO_EXPORT void mongo_write_concern_set_wtimeout( mongo_write_concern *write_concern, int wtimeout );",
          "424: MONGO_EXPORT void mongo_write_concern_set_j( mongo_write_concern *write_concern, int j );",
          "425: MONGO_EXPORT void mongo_write_concern_set_fsync( mongo_write_concern *write_concern, int fsync );",
          "",
          "[Removed Lines]",
          "426: MONGO_EXPORT void mongo_write_concern_set_mode( mongo_write_concern *write_concern, const char* mode );",
          "429: CRUD API",
          "449: MONGO_EXPORT int mongo_insert( mongo *conn, const char *ns, const bson *data,",
          "450:                                mongo_write_concern *custom_write_concern );",
          "471: MONGO_EXPORT int mongo_insert_batch( mongo *conn, const char *ns,",
          "472:                                      const bson **data, int num, mongo_write_concern *custom_write_concern,",
          "473:                                      int flags );",
          "491: MONGO_EXPORT int mongo_update( mongo *conn, const char *ns, const bson *cond,",
          "492:                                const bson *op, int flags, mongo_write_concern *custom_write_concern );",
          "507: MONGO_EXPORT int mongo_remove( mongo *conn, const char *ns, const bson *cond,",
          "508:                                mongo_write_concern *custom_write_concern );",
          "512: Write Concern API",
          "519: MONGO_EXPORT void mongo_write_concern_init( mongo_write_concern *write_concern );",
          "528: MONGO_EXPORT int mongo_write_concern_finish( mongo_write_concern *write_concern );",
          "534: MONGO_EXPORT void mongo_write_concern_destroy( mongo_write_concern *write_concern );",
          "537: Cursor API",
          "555: MONGO_EXPORT mongo_cursor *mongo_find( mongo *conn, const char *ns, const bson *query,",
          "556:                                        const bson *fields, int limit, int skip, int options );",
          "565: MONGO_EXPORT void mongo_cursor_init( mongo_cursor *cursor, mongo *conn, const char *ns );",
          "578: MONGO_EXPORT void mongo_cursor_set_query( mongo_cursor *cursor, const bson *query );",
          "588: MONGO_EXPORT void mongo_cursor_set_fields( mongo_cursor *cursor, const bson *fields );",
          "596: MONGO_EXPORT void mongo_cursor_set_skip( mongo_cursor *cursor, int skip );",
          "604: MONGO_EXPORT void mongo_cursor_set_limit( mongo_cursor *cursor, int limit );",
          "613: MONGO_EXPORT void mongo_cursor_set_options( mongo_cursor *cursor, int options );",
          "621: MONGO_EXPORT const char *mongo_cursor_data( mongo_cursor *cursor );",
          "629: MONGO_EXPORT const bson *mongo_cursor_bson( mongo_cursor *cursor );",
          "640: MONGO_EXPORT int mongo_cursor_next( mongo_cursor *cursor );",
          "651: MONGO_EXPORT int mongo_cursor_destroy( mongo_cursor *cursor );",
          "664: MONGO_EXPORT int mongo_find_one( mongo *conn, const char *ns, const bson *query,",
          "665:                                  const bson *fields, bson *out );",
          "669: Command API and Helpers",
          "683: MONGO_EXPORT double mongo_count( mongo *conn, const char *db, const char *coll,",
          "684:                                  const bson *query );",
          "700: MONGO_EXPORT int mongo_create_index( mongo *conn, const char *ns, const bson *key,",
          "701:                                      const char *name, int options, bson *out );",
          "715: MONGO_EXPORT int mongo_create_capped_collection( mongo *conn, const char *db,",
          "716:         const char *collection, int size, int max, bson *out );",
          "729: MONGO_EXPORT bson_bool_t mongo_create_simple_index( mongo *conn, const char *ns,",
          "730:         const char *field, int options, bson *out );",
          "742: MONGO_EXPORT int mongo_run_command( mongo *conn, const char *db,",
          "743:                                     const bson *command, bson *out );",
          "757: MONGO_EXPORT int mongo_simple_int_command( mongo *conn, const char *db,",
          "758:         const char *cmd, int arg, bson *out );",
          "772: MONGO_EXPORT int mongo_simple_str_command( mongo *conn, const char *db,",
          "773:         const char *cmd, const char *arg, bson *out );",
          "783: MONGO_EXPORT int mongo_cmd_drop_db( mongo *conn, const char *db );",
          "795: MONGO_EXPORT int mongo_cmd_drop_collection( mongo *conn, const char *db,",
          "796:         const char *collection, bson *out );",
          "808: MONGO_EXPORT int mongo_cmd_add_user( mongo *conn, const char *db,",
          "809:                                      const char *user, const char *pass );",
          "821: MONGO_EXPORT int mongo_cmd_authenticate( mongo *conn, const char *db,",
          "822:         const char *user, const char *pass );",
          "833: MONGO_EXPORT bson_bool_t mongo_cmd_ismaster( mongo *conn, bson *out );",
          "845: MONGO_EXPORT int mongo_cmd_get_last_error( mongo *conn, const char *db, bson *out );",
          "857: MONGO_EXPORT int mongo_cmd_get_prev_error( mongo *conn, const char *db, bson *out );",
          "865: MONGO_EXPORT void mongo_cmd_reset_error( mongo *conn, const char *db );",
          "869: Utility API",
          "872: MONGO_EXPORT mongo* mongo_alloc( void );",
          "873: MONGO_EXPORT void mongo_dealloc(mongo* conn);",
          "874: MONGO_EXPORT int mongo_get_err(mongo* conn);",
          "875: MONGO_EXPORT int mongo_is_connected(mongo* conn);",
          "876: MONGO_EXPORT int mongo_get_op_timeout(mongo* conn);",
          "877: MONGO_EXPORT const char* mongo_get_primary(mongo* conn);",
          "878: MONGO_EXPORT SOCKET mongo_get_socket(mongo* conn) ;",
          "879: MONGO_EXPORT int mongo_get_host_count(mongo* conn);",
          "880: MONGO_EXPORT const char* mongo_get_host(mongo* conn, int i);",
          "881: MONGO_EXPORT mongo_write_concern* mongo_write_concern_alloc( void );",
          "882: MONGO_EXPORT void mongo_write_concern_dealloc(mongo_write_concern* write_concern);",
          "883: MONGO_EXPORT mongo_cursor* mongo_cursor_alloc( void );",
          "884: MONGO_EXPORT void mongo_cursor_dealloc(mongo_cursor* cursor);",
          "885: MONGO_EXPORT int  mongo_get_server_err(mongo* conn);",
          "886: MONGO_EXPORT const char*  mongo_get_server_err_string(mongo* conn);",
          "896: MONGO_EXPORT void __mongo_set_error( mongo *conn, mongo_error_t err,",
          "897:                                      const char *errstr, int errorcode );",
          "903: MONGO_EXPORT void mongo_clear_errors( mongo *conn );",
          "905: MONGO_EXTERN_C_END",
          "907: #endif",
          "",
          "[Added Lines]",
          "426: MONGO_EXPORT void mongo_write_concern_set_mode( mongo_write_concern *write_concern, const char* mode );",
          "429: CRUD API",
          "449: MONGO_EXPORT int mongo_insert( mongo *conn, const char *ns, const bson *data,",
          "450:                                mongo_write_concern *custom_write_concern );",
          "471: MONGO_EXPORT int mongo_insert_batch( mongo *conn, const char *ns,",
          "472:                                      const bson **data, int num, mongo_write_concern *custom_write_concern,",
          "473:                                      int flags );",
          "491: MONGO_EXPORT int mongo_update( mongo *conn, const char *ns, const bson *cond,",
          "492:                                const bson *op, int flags, mongo_write_concern *custom_write_concern );",
          "507: MONGO_EXPORT int mongo_remove( mongo *conn, const char *ns, const bson *cond,",
          "508:                                mongo_write_concern *custom_write_concern );",
          "512: Write Concern API",
          "519: MONGO_EXPORT void mongo_write_concern_init( mongo_write_concern *write_concern );",
          "528: MONGO_EXPORT int mongo_write_concern_finish( mongo_write_concern *write_concern );",
          "534: MONGO_EXPORT void mongo_write_concern_destroy( mongo_write_concern *write_concern );",
          "537: Cursor API",
          "555: MONGO_EXPORT mongo_cursor *mongo_find( mongo *conn, const char *ns, const bson *query,",
          "556:                                        const bson *fields, int limit, int skip, int options );",
          "565: MONGO_EXPORT void mongo_cursor_init( mongo_cursor *cursor, mongo *conn, const char *ns );",
          "578: MONGO_EXPORT void mongo_cursor_set_query( mongo_cursor *cursor, const bson *query );",
          "588: MONGO_EXPORT void mongo_cursor_set_fields( mongo_cursor *cursor, const bson *fields );",
          "596: MONGO_EXPORT void mongo_cursor_set_skip( mongo_cursor *cursor, int skip );",
          "604: MONGO_EXPORT void mongo_cursor_set_limit( mongo_cursor *cursor, int limit );",
          "613: MONGO_EXPORT void mongo_cursor_set_options( mongo_cursor *cursor, int options );",
          "621: MONGO_EXPORT const char *mongo_cursor_data( mongo_cursor *cursor );",
          "629: MONGO_EXPORT const bson *mongo_cursor_bson( mongo_cursor *cursor );",
          "640: MONGO_EXPORT int mongo_cursor_next( mongo_cursor *cursor );",
          "651: MONGO_EXPORT int mongo_cursor_destroy( mongo_cursor *cursor );",
          "664: MONGO_EXPORT int mongo_find_one( mongo *conn, const char *ns, const bson *query,",
          "665:                                  const bson *fields, bson *out );",
          "669: Command API and Helpers",
          "683: MONGO_EXPORT double mongo_count( mongo *conn, const char *db, const char *coll,",
          "684:                                  const bson *query );",
          "703: MONGO_EXPORT int mongo_create_index( mongo *conn, const char *ns, const bson *key,",
          "704:                                      const char *name, int options, bson *out );",
          "720: MONGO_EXPORT bson_bool_t mongo_create_simple_index( mongo *conn, const char *ns,",
          "721:         const char *field, int options, bson *out );",
          "735: MONGO_EXPORT int mongo_create_capped_collection( mongo *conn, const char *db,",
          "736:         const char *collection, int size, int max, bson *out );",
          "748: MONGO_EXPORT int mongo_run_command( mongo *conn, const char *db,",
          "749:                                     const bson *command, bson *out );",
          "763: MONGO_EXPORT int mongo_simple_int_command( mongo *conn, const char *db,",
          "764:         const char *cmd, int arg, bson *out );",
          "778: MONGO_EXPORT int mongo_simple_str_command( mongo *conn, const char *db,",
          "779:         const char *cmd, const char *arg, bson *out );",
          "789: MONGO_EXPORT int mongo_cmd_drop_db( mongo *conn, const char *db );",
          "801: MONGO_EXPORT int mongo_cmd_drop_collection( mongo *conn, const char *db,",
          "802:         const char *collection, bson *out );",
          "814: MONGO_EXPORT int mongo_cmd_add_user( mongo *conn, const char *db,",
          "815:                                      const char *user, const char *pass );",
          "827: MONGO_EXPORT int mongo_cmd_authenticate( mongo *conn, const char *db,",
          "828:         const char *user, const char *pass );",
          "839: MONGO_EXPORT bson_bool_t mongo_cmd_ismaster( mongo *conn, bson *out );",
          "854: MONGO_EXPORT int mongo_cmd_get_last_error( mongo *conn, const char *db, bson *out );",
          "869: MONGO_EXPORT int mongo_cmd_get_prev_error( mongo *conn, const char *db, bson *out );",
          "877: MONGO_EXPORT void mongo_cmd_reset_error( mongo *conn, const char *db );",
          "881: Utility API",
          "884: MONGO_EXPORT mongo* mongo_alloc( void );",
          "885: MONGO_EXPORT void mongo_dealloc(mongo* conn);",
          "886: MONGO_EXPORT int mongo_get_err(mongo* conn);",
          "887: MONGO_EXPORT int mongo_is_connected(mongo* conn);",
          "888: MONGO_EXPORT int mongo_get_op_timeout(mongo* conn);",
          "889: MONGO_EXPORT const char* mongo_get_primary(mongo* conn);",
          "890: MONGO_EXPORT SOCKET mongo_get_socket(mongo* conn) ;",
          "891: MONGO_EXPORT int mongo_get_host_count(mongo* conn);",
          "892: MONGO_EXPORT const char* mongo_get_host(mongo* conn, int i);",
          "893: MONGO_EXPORT mongo_write_concern* mongo_write_concern_alloc( void );",
          "894: MONGO_EXPORT void mongo_write_concern_dealloc(mongo_write_concern* write_concern);",
          "895: MONGO_EXPORT mongo_cursor* mongo_cursor_alloc( void );",
          "896: MONGO_EXPORT void mongo_cursor_dealloc(mongo_cursor* cursor);",
          "897: MONGO_EXPORT int  mongo_get_server_err(mongo* conn);",
          "898: MONGO_EXPORT const char*  mongo_get_server_err_string(mongo* conn);",
          "908: MONGO_EXPORT void __mongo_set_error( mongo *conn, mongo_error_t err,",
          "909:                                      const char *errstr, int errorcode );",
          "915: MONGO_EXPORT void mongo_clear_errors( mongo *conn );",
          "917: MONGO_EXTERN_C_END",
          "919: #endif",
          "",
          "---------------"
        ],
        "test/write_concern_test.c||test/write_concern_test.c": [
          "File: test/write_concern_test.c -> test/write_concern_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static char WC1_data[] = {23,0,0,0,16,103,101,116,108,97,115,116,101,114,114,111,114,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0};",
          "55: void test_write_concern_finish( void ) {",
          "",
          "[Removed Lines]",
          "50: static bson WC1_cmd = {",
          "51:     WC1_data, WC1_data, 128, 1, 0, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, 0, 0, 0, 0",
          "52: };",
          "",
          "[Added Lines]",
          "50: static bson WC1_cmd = { WC1_data, WC1_data, 128, 1, 0 };",
          "",
          "---------------"
        ]
      }
    }
  ]
}