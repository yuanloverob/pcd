{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bbc270d78fb361bd78eac9a9117070caeb537d4a",
      "candidate_info": {
        "commit_hash": "bbc270d78fb361bd78eac9a9117070caeb537d4a",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/bbc270d78fb361bd78eac9a9117070caeb537d4a",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Bury rpmio FD use to fsmUnpack()\n\nfsmUnpack() is the only place in FSM that needs to deal with rpmio FD\ntypes, everywhere else they are nothing but a hindrance that need to\nbe converted to OS level descriptors for use. Better deal with OS\nlevel descriptors to begin with.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     return rc;",
          "111: }",
          "114: {",
          "115:     int rc = 0;",
          "117:  int myerrno = errno;",
          "118:  static int oneshot = 0;",
          "119:  static int flush_io = 0;",
          "122:  if (!oneshot) {",
          "123:      flush_io = (rpmExpandNumeric(\"%{?_flush_io}\") > 0);",
          "",
          "[Removed Lines]",
          "113: static int fsmClose(FD_t *wfdp)",
          "116:     if (wfdp && *wfdp) {",
          "120:  int fdno = Fileno(*wfdp);",
          "",
          "[Added Lines]",
          "113: static int fsmClose(int *wfdp)",
          "116:     if (wfdp && *wfdp >= 0) {",
          "120:  int fdno = *wfdp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  if (flush_io) {",
          "127:      fsync(fdno);",
          "128:  }",
          "130:      rc = RPMERR_CLOSE_FAILED;",
          "132:  if (_fsm_debug) {",
          "133:      rpmlog(RPMLOG_DEBUG, \" %8s ([%d]) %s\\n\", __func__,",
          "134:      fdno, (rc < 0 ? strerror(errno) : \"\"));",
          "135:  }",
          "137:  errno = myerrno;",
          "138:     }",
          "139:     return rc;",
          "140: }",
          "143: {",
          "144:     int rc = 0;",
          "146:     int fd = openat(dirfd, dest, O_WRONLY|O_EXCL|O_CREAT, 0200);",
          "154:  rc = RPMERR_OPEN_FAILED;",
          "156:     if (_fsm_debug) {",
          "157:  rpmlog(RPMLOG_DEBUG, \" %8s (%s [%d]) %s\\n\", __func__,",
          "159:     }",
          "164:     return rc;",
          "165: }",
          "168: {",
          "169:     int rc = rpmfiArchiveReadToFilePsm(fi, fd, nodigest, psm);",
          "170:     if (_fsm_debug) {",
          "171:  rpmlog(RPMLOG_DEBUG, \" %8s (%s %\" PRIu64 \" bytes [%d]) %s\\n\", __func__,",
          "172:         rpmfiFN(fi), rpmfiFSize(fi), Fileno(fd),",
          "173:         (rc < 0 ? strerror(errno) : \"\"));",
          "174:     }",
          "175:     return rc;",
          "176: }",
          "178: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "179:        rpmpsm psm, int nodigest,",
          "181: {",
          "182:     int rc = 0;",
          "185:     if (*firstlink == NULL) {",
          "",
          "[Removed Lines]",
          "129:  if (Fclose(*wfdp))",
          "142: static int fsmOpen(FD_t *wfdp, int dirfd, const char *dest)",
          "148:     if (fd >= 0) {",
          "150:  close(fd);",
          "151:     }",
          "153:     if (fd < 0 || Ferror(*wfdp))",
          "158:         dest, Fileno(*wfdp), (rc < 0 ? strerror(errno) : \"\"));",
          "161:     if (rc)",
          "162:  fsmClose(wfdp);",
          "167: static int fsmUnpack(rpmfi fi, FD_t fd, rpmpsm psm, int nodigest)",
          "180:        struct filedata_s ** firstlink, FD_t *firstlinkfile)",
          "183:     FD_t fd = NULL;",
          "",
          "[Added Lines]",
          "129:  if (close(fdno))",
          "142: static int fsmOpen(int *wfdp, int dirfd, const char *dest)",
          "148:     if (fd < 0)",
          "153:         dest, fd, (rc < 0 ? strerror(errno) : \"\"));",
          "160: static int fsmUnpack(rpmfi fi, int fdno, rpmpsm psm, int nodigest)",
          "162:     FD_t fd = fdDup(fdno);",
          "169:     Fclose(fd);",
          "175:        struct filedata_s ** firstlink, int *firstlinkfile)",
          "178:     int fd = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "811:     int fc = rpmfilesFC(files);",
          "812:     int nodigest = (rpmtsFlags(ts) & RPMTRANS_FLAG_NOFILEDIGEST) ? 1 : 0;",
          "813:     int nofcaps = (rpmtsFlags(ts) & RPMTRANS_FLAG_NOCAPS) ? 1 : 0;",
          "815:     char *tid = NULL;",
          "816:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
          "817:     struct filedata_s *firstlink = NULL;",
          "",
          "[Removed Lines]",
          "814:     FD_t firstlinkfile = NULL;",
          "",
          "[Added Lines]",
          "809:     int firstlinkfile = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df06245c7d80f13d670522fd2a7aacb031ce0bbf",
      "candidate_info": {
        "commit_hash": "df06245c7d80f13d670522fd2a7aacb031ce0bbf",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/df06245c7d80f13d670522fd2a7aacb031ce0bbf",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add a helper for finishing the dir tracking iteration",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "792:     return fi;",
          "793: }",
          "795: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
          "796:               rpmpsm psm, char ** failedFile)",
          "797: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795: static rpmfi fsmIterFini(rpmfi fi, struct diriter_s *di)",
          "796: {",
          "797:     close(di->dirfd);",
          "798:     di->dirfd = -1;",
          "799:     return rpmfiFree(fi);",
          "800: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:      rpmpsmNotify(psm, RPMCALLBACK_INST_PROGRESS, rpmfiArchiveTell(fi));",
          "954:  fp->stage = FILE_UNPACK;",
          "955:     }",
          "960:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
          "961:  rc = fx;",
          "",
          "[Removed Lines]",
          "956:     fi = rpmfiFree(fi);",
          "957:     close(di.dirfd);",
          "958:     di.dirfd = -1;",
          "",
          "[Added Lines]",
          "963:     fi = fsmIterFini(fi, &di);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1eece34c996e53a632d41ccec9d25a7d4b7a1ce3",
      "candidate_info": {
        "commit_hash": "1eece34c996e53a632d41ccec9d25a7d4b7a1ce3",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/1eece34c996e53a632d41ccec9d25a7d4b7a1ce3",
        "files": [
          "lib/fsm.c"
        ],
        "message": "\"Factorize\" chdir-aware iterator creation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "767:     return 0;",
          "768: }",
          "770: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
          "771:               rpmpsm psm, char ** failedFile)",
          "772: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770: static rpmfi fsmIter(FD_t payload, rpmfiles files, rpmFileIter iter, void *data)",
          "771: {",
          "772:     rpmfi fi;",
          "773:     if (payload)",
          "774:  fi = rpmfiNewArchiveReader(payload, files, RPMFI_ITER_READ_ARCHIVE);",
          "775:     else",
          "776:  fi = rpmfilesIter(files, iter);",
          "777:     if (fi && data)",
          "778:  rpmfiSetOnChdir(fi, onChdir, data);",
          "779:     return fi;",
          "780: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:     if (rc)",
          "822:  goto exit;",
          "828:     if (fi == NULL) {",
          "829:         rc = RPMERR_BAD_MAGIC;",
          "830:         goto exit;",
          "831:     }",
          "835:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "",
          "[Removed Lines]",
          "824:     if (rpmteType(te) == TR_ADDED)",
          "825:  fi = rpmfiNewArchiveReader(payload, files, RPMFI_ITER_READ_ARCHIVE);",
          "826:     else",
          "827:  fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "832:     rpmfiSetOnChdir(fi, onChdir, &di);",
          "",
          "[Added Lines]",
          "836:     fi = fsmIter(payload, files,",
          "837:    payload ? RPMFI_ITER_READ_ARCHIVE : RPMFI_ITER_FWD, &di);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78cd8f559aa1ea0531e990daf7d902d123726a0f",
      "candidate_info": {
        "commit_hash": "78cd8f559aa1ea0531e990daf7d902d123726a0f",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/78cd8f559aa1ea0531e990daf7d902d123726a0f",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Refactor ensureDir() to return an error code separately from the fd",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     return rc;",
          "340: }",
          "343: {",
          "344:     char *path = xstrdup(p);",
          "345:     char *dp = path;",
          "346:     char *sp = NULL, *bn;",
          "347:     int oflags = O_RDONLY;",
          "349:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
          "",
          "[Removed Lines]",
          "342: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
          "",
          "[Added Lines]",
          "342: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create,",
          "343:       int *dirfdp)",
          "349:     int rc = 0;",
          "351:     if (*dirfdp >= 0)",
          "352:  return rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:  if (fd < 0 && errno == ENOENT && create) {",
          "357:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "359:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
          "361:  }",
          "363:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "367:  }",
          "369:  close(dirfd);",
          "370:  if (fd >= 0) {",
          "371:      dirfd = fd;",
          "372:  } else {",
          "374:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
          "375:     bn, p, strerror(errno));",
          "376:      break;",
          "377:  }",
          "379:  dp = NULL;",
          "380:     }",
          "382:     free(path);",
          "384: }",
          "386: static int fsmMkfifo(int dirfd, const char *path, mode_t mode)",
          "",
          "[Removed Lines]",
          "358:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
          "360:      }",
          "364:      close(fd);",
          "365:      errno = ENOTDIR;",
          "366:      fd = -1;",
          "373:      dirfd = -1;",
          "383:     return dirfd;",
          "",
          "[Added Lines]",
          "363:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode);",
          "364:      if (!rc)",
          "369:      rc = RPMERR_ENOTDIR;",
          "370:      break;",
          "379:      rc = RPMERR_OPEN_FAILED;",
          "386:     if (rc) {",
          "387:  close(fd);",
          "388:  close(dirfd);",
          "389:  dirfd = -1;",
          "390:     } else {",
          "391:  rc = 0;",
          "392:     }",
          "396:     return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:   rc = fsmBackup(fi, fp->action);",
          "861:      }",
          "870:      }",
          "873:      if (!fp->suffix) {",
          "874:   if (fp->action == FA_TOUCH) {",
          "",
          "[Removed Lines]",
          "863:      if (di.dirfd == -1) {",
          "864:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
          "865:         (fp->action == FA_CREATE));",
          "866:   if (di.dirfd == -1) {",
          "867:       rc = RPMERR_OPEN_FAILED;",
          "868:       break;",
          "869:   }",
          "",
          "[Added Lines]",
          "876:      if (!rc) {",
          "877:   rc = ensureDir(plugins, rpmfiDN(fi), 0,",
          "878:     (fp->action == FA_CREATE), &di.dirfd);",
          "881:      if (rc)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d33bd513d9512f87684083603e8b533a7ef9f3db",
      "candidate_info": {
        "commit_hash": "d33bd513d9512f87684083603e8b533a7ef9f3db",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/d33bd513d9512f87684083603e8b533a7ef9f3db",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Move file-pre plugin hook (back) to unpack stage\n\nIt doesn't make much sense to call plugins for files that wont be\nunpacked at all, and in particular it wont make much sense to do the\nentire directory dance just to be able to pass meaningful path values\nto plugins. So from now we'll only be calling file-pre for things that\nwe're about to lay down, which it how it used to be before splitting\nthe stages anyhow.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "836:  setFileState(fs, fx);",
          "837:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "842:  fp->stage = FILE_PRE;",
          "843:     }",
          "844:     fi = rpmfiFree(fi);",
          "",
          "[Removed Lines]",
          "840:  rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "841:           fp->sb.st_mode, fp->action);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "878:     (fp->action == FA_CREATE), &di.dirfd);",
          "879:      }",
          "881:      if (rc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:      rc = rpmpluginsCallFsmFilePre(plugins, fi, fp->fpath,",
          "880:        fp->sb.st_mode, fp->action);",
          "",
          "---------------"
        ]
      }
    }
  ]
}