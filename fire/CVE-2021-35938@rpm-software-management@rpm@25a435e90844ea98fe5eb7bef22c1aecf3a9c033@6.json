{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a7c8bc401a97f0ebf57bef3987a337129e4371f",
      "candidate_info": {
        "commit_hash": "3a7c8bc401a97f0ebf57bef3987a337129e4371f",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/3a7c8bc401a97f0ebf57bef3987a337129e4371f",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Explicitly specify O_RDONLY when opening files for setmeta\n\nOn Linux, this is a no-op as O_RDONLY is 0 but this may not be so on\nother platforms. Another 4.18 regression.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1019:      int mayopen = S_ISREG(fp->sb.st_mode) || S_ISDIR(fp->sb.st_mode);",
          "1020:      if (!rc && fd == -1 && mayopen) {",
          "1024:   if (fd < 0)",
          "1025:       rc = RPMERR_OPEN_FAILED;",
          "1026:      }",
          "",
          "[Removed Lines]",
          "1022:   fd = fsmOpenat(di.dirfd, fp->fpath,",
          "1023:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0, 0);",
          "",
          "[Added Lines]",
          "1021:   int flags = O_RDONLY;",
          "1023:   if (fp->suffix)",
          "1024:       flags |= AT_SYMLINK_NOFOLLOW;",
          "1025:   fd = fsmOpenat(di.dirfd, fp->fpath, flags, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28c92fd54c93371c3062664d8a938438a2be88d6",
      "candidate_info": {
        "commit_hash": "28c92fd54c93371c3062664d8a938438a2be88d6",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/28c92fd54c93371c3062664d8a938438a2be88d6",
        "files": [
          "lib/fsm.c",
          "tests/data/SPECS/fifo.spec",
          "tests/populate",
          "tests/rpmi.at"
        ],
        "message": "Fix install of block and character special files (#2195, #2275)\n\nWhile it's possible to open special files, they are, well, special and\nhave \"side-effects\" also known as, ahem, semantics. Opening a device\nfile in Unix means accessing that *device*, and FIFOs have their own\nsemantics.  In other words, for rpm's purposes, we should never EVER\nopen these files as a part of the install / permission setting etc.\nFix this major brainfart in 25a435e90844ea98fe5eb7bef22c1aecf3a9c033.\n\nOTOH this forces us back to the less secure path based operations for\nthese files, which is what we were trying to avoid in the first place.\nThere always was a tiny race between create + open for these (because\nthere's no atomic way to create + open anything but regular files) but\nthis opens up the window quite a bit.\nNobody should be placing device nodes in user-owned directories but\nFIFO's may be a different story.\n\nWe haven't had tests for device nodes because it requires privileges the\ntest-suite usually doesn't have, not testing FIFOs I have no excuse for.\nAdd that test now.\n\nFixes: #2195, #2275",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c",
          "tests/data/SPECS/fifo.spec||tests/data/SPECS/fifo.spec",
          "tests/rpmi.at||tests/rpmi.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1014:                     rc = RPMERR_UNKNOWN_FILETYPE;",
          "1015:             }",
          "1019:   fd = fsmOpenat(di.dirfd, fp->fpath,",
          "1020:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0, 0);",
          "",
          "[Removed Lines]",
          "1017:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
          "",
          "[Added Lines]",
          "1018:      int mayopen = S_ISREG(fp->sb.st_mode) || S_ISDIR(fp->sb.st_mode);",
          "1019:      if (!rc && fd == -1 && mayopen) {",
          "",
          "---------------"
        ],
        "tests/data/SPECS/fifo.spec||tests/data/SPECS/fifo.spec": [
          "File: tests/data/SPECS/fifo.spec -> tests/data/SPECS/fifo.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Name: fifo",
          "2: Version: 1.0",
          "3: Release: 1",
          "4: Group: Testing",
          "5: License: GPL",
          "6: Summary: Testing fifo behavior",
          "7: BuildArch: noarch",
          "9: %description",
          "10: %{summary}",
          "12: %install",
          "13: mknod ${RPM_BUILD_ROOT}/test-fifo p",
          "15: %files",
          "16: /test-fifo",
          "",
          "---------------"
        ],
        "tests/rpmi.at||tests/rpmi.at": [
          "File: tests/rpmi.at -> tests/rpmi.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "1389: [])",
          "1390: AT_CLEANUP",
          "1392: AT_SETUP([rpm -U with Obsoletes])",
          "1393: AT_KEYWORDS([install])",
          "1394: AT_CHECK([",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1392: AT_SETUP([rpm -U fifo])",
          "1393: AT_KEYWORDS([install])",
          "1394: AT_CHECK([",
          "1395: RPMDB_INIT",
          "1397: runroot rpmbuild -bb --quiet /data/SPECS/fifo.spec",
          "1398: runroot rpm -U --ignoreos /build/RPMS/noarch/fifo-1.0-1.noarch.rpm",
          "1399: runroot rpm -Vv --nouser --nogroup fifo",
          "1400: ],",
          "1401: [0],",
          "1402: [.........    /test-fifo",
          "1403: ],",
          "1404: [])",
          "1405: AT_CLEANUP",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dc45d932a3cfa033b5cdf30ebc7ee8dc9472ef3",
      "candidate_info": {
        "commit_hash": "7dc45d932a3cfa033b5cdf30ebc7ee8dc9472ef3",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/7dc45d932a3cfa033b5cdf30ebc7ee8dc9472ef3",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add O_DIRECTORY equivalent parameter to fsmOpenat(), use as relevant",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: static const char * fileActionString(rpmFileAction a);",
          "",
          "[Removed Lines]",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags);",
          "",
          "[Added Lines]",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags, int dir);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: static int cap_set_fileat(int dirfd, const char *path, cap_t fcaps)",
          "96: {",
          "97:     int rc = -1;",
          "99:     if (fd >= 0) {",
          "100:  rc = cap_set_fd(fd, fcaps);",
          "101:  close(fd);",
          "",
          "[Removed Lines]",
          "98:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW);",
          "",
          "[Added Lines]",
          "98:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:     return rc;",
          "293: }",
          "296: {",
          "297:     struct stat lsb, sb;",
          "298:     int sflags = flags | O_NOFOLLOW;",
          "",
          "[Removed Lines]",
          "295: static int fsmOpenat(int dirfd, const char *path, int flags)",
          "",
          "[Added Lines]",
          "295: static int fsmOpenat(int dirfd, const char *path, int flags, int dir)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:      }",
          "317:  }",
          "318:     }",
          "319:     return fd;",
          "320: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     if (dir && fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "322:  errno = ENOTDIR;",
          "323:  close(fd);",
          "324:  fd = -1;",
          "325:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:     if (*dirfdp >= 0)",
          "362:  return rc;",
          "367:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
          "371:  if (fd < 0 && errno == ENOENT && create) {",
          "372:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "373:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode);",
          "374:      if (!rc)",
          "381:  }",
          "383:  close(dirfd);",
          "",
          "[Removed Lines]",
          "364:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
          "368:  struct stat sb;",
          "369:  fd = fsmOpenat(dirfd, bn, oflags);",
          "375:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
          "376:  }",
          "378:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "379:      rc = RPMERR_ENOTDIR;",
          "380:      break;",
          "",
          "[Added Lines]",
          "371:     int dirfd = fsmOpenat(-1, \"/\", oflags, 1);",
          "375:  fd = fsmOpenat(dirfd, bn, oflags, 1);",
          "381:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW, 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "998:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
          "1000:   fd = fsmOpenat(di.dirfd, fp->fpath,",
          "1002:   if (fd < 0)",
          "1003:       rc = RPMERR_OPEN_FAILED;",
          "1004:      }",
          "",
          "[Removed Lines]",
          "1001:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
          "",
          "[Added Lines]",
          "1002:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccfca4146d3c0c7ac3a3be37b3ea501620954d2f",
      "candidate_info": {
        "commit_hash": "ccfca4146d3c0c7ac3a3be37b3ea501620954d2f",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/ccfca4146d3c0c7ac3a3be37b3ea501620954d2f",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Use our O_DIRECTORY equivalent when opening files for setmeta\n\nIe if we expect a directory, ensure we got one.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:   if (fp->suffix)",
          "1024:       flags |= AT_SYMLINK_NOFOLLOW;",
          "1026:   if (fd < 0)",
          "1027:       rc = RPMERR_OPEN_FAILED;",
          "1028:      }",
          "",
          "[Removed Lines]",
          "1025:   fd = fsmOpenat(di.dirfd, fp->fpath, flags, 0);",
          "",
          "[Added Lines]",
          "1025:   fd = fsmOpenat(di.dirfd, fp->fpath, flags,",
          "1026:     S_ISDIR(fp->sb.st_mode));",
          "",
          "---------------"
        ]
      }
    }
  ]
}