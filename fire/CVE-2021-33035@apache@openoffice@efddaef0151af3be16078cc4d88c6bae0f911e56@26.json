{
  "cve_id": "CVE-2021-33035",
  "cve_desc": "Apache OpenOffice opens dBase/DBF documents and shows the contents as spreadsheets. DBF are database files with data organized in fields. When reading DBF data the size of certain fields is not checked: the data is just copied into local variables. A carefully crafted document could overflow the allocated space, leading to the execution of arbitrary code by altering the contents of the program stack. This issue affects Apache OpenOffice up to and including version 4.1.10",
  "repo": "apache/openoffice",
  "patch_hash": "efddaef0151af3be16078cc4d88c6bae0f911e56",
  "patch_info": {
    "commit_hash": "efddaef0151af3be16078cc4d88c6bae0f911e56",
    "repo": "apache/openoffice",
    "commit_url": "https://github.com/apache/openoffice/commit/efddaef0151af3be16078cc4d88c6bae0f911e56#diff-ea66e734dd358922aba12ad4ba39c96bdc6cbde587d07dbc63d04daa0a30e90f",
    "files": [
      "main/connectivity/source/drivers/dbase/DTable.cxx"
    ],
    "message": "add useful checks",
    "before_after_code_files": [
      "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
    ]
  },
  "patch_diff": {
    "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx": [
      "File: main/connectivity/source/drivers/dbase/DTable.cxx -> main/connectivity/source/drivers/dbase/DTable.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "896:         else if ( DataType::TIMESTAMP == nType )",
      "897:         {",
      "898:             sal_Int32 nDate = 0,nTime = 0;",
      "899:    memcpy(&nDate, pData, 4);",
      "900:             memcpy(&nTime, pData+ 4, 4);",
      "901:             if ( !nDate && !nTime )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "899:             OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
      "900:             if (nLen != 8) {",
      "901:                 return false;",
      "902:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "911:         }",
      "912:         else if ( DataType::INTEGER == nType )",
      "913:         {",
      "914:             sal_Int32 nValue = 0;",
      "915:    memcpy(&nValue, pData, nLen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "918:             OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
      "919:             if (nLen != 4) {",
      "920:                 return false;",
      "921:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "918:         else if ( DataType::DOUBLE == nType )",
      "919:         {",
      "920:             double d = 0.0;",
      "921:             if (getBOOL((*aIter)->getPropertyValue(OMetaConnection::getPropMap().getNameByIndex(PROPERTY_ID_ISCURRENCY)))) // Currency wird gesondert behandelt",
      "922:             {",
      "923:                 sal_Int64 nValue = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "929:             OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
      "930:             if (nLen != 8) {",
      "931:                 return false;",
      "932:             }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "959:    {",
      "960:     case DataType::DATE:",
      "961:     {",
      "962:      if (aStr.Len() != nLen)",
      "963:      {",
      "964:       (_rRow->get())[i]->setNull();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "974:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
      "975:                     if (nLen != 8) {",
      "976:                         return false;",
      "977:                     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "978:     break;",
      "979:     case DataType::BIT:",
      "980:     {",
      "981:      sal_Bool b;",
      "982:      switch (* ((const char *)pData))",
      "983:      {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "997:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
      "998:                     if (nLen != 1) {",
      "999:                         return false;",
      "1000:                     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1873:    {",
      "1874:                 case DataType::TIMESTAMP:",
      "1875:                     {",
      "1876:                         sal_Int32 nJulianDate = 0, nJulianTime = 0;",
      "1877:                         lcl_CalcJulDate(nJulianDate,nJulianTime,rRow.get()[nPos]->getValue());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1896:                         OSL_ENSURE(nLen == 8, \"Invalid length for timestamp field\");",
      "1897:                         if (nLen != 8) {",
      "1898:                             bHadError = true;",
      "1899:                             break;",
      "1900:                         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1882:                     break;",
      "1883:     case DataType::DATE:",
      "1884:     {",
      "1885:      ::com::sun::star::util::Date aDate;",
      "1886:      if(rRow.get()[nPos]->getValue().getTypeKind() == DataType::DOUBLE)",
      "1887:       aDate = ::dbtools::DBTypeConversion::toDate(rRow.get()[nPos]->getValue().getDouble());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1910:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
      "1911:                     if (nLen != 8) {",
      "1912:                         bHadError = true;",
      "1913:                         break;",
      "1914:                     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1900:     } break;",
      "1901:                 case DataType::INTEGER:",
      "1902:                     {",
      "1903:                         sal_Int32 nValue = rRow.get()[nPos]->getValue();",
      "1904:                         memcpy(pData,&nValue,nLen);",
      "1905:                     }",
      "1906:                     break;",
      "1907:                 case DataType::DOUBLE:",
      "1908:                     {",
      "1909:                         const double d = rRow.get()[nPos]->getValue();",
      "1910:                         m_pColumns->getByIndex(i) >>= xCol;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1933:                         OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
      "1934:                         if (nLen != 4) {",
      "1935:                             bHadError = true;",
      "1936:                             break;",
      "1937:                         }",
      "1944:                         OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
      "1945:                         if (nLen != 8) {",
      "1946:                             bHadError = true;",
      "1947:                             break;",
      "1948:                         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1958:      }",
      "1959:     } break;",
      "1960:     case DataType::BIT:",
      "1962:      break;",
      "1963:                 case DataType::LONGVARBINARY:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2001:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
      "2002:                     if (nLen != 1) {",
      "2003:                         bHadError = true;",
      "2004:                         break;",
      "2005:                     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0eb5a88c5dee74030d5ab05ac5c35d761f3b7e7",
      "candidate_info": {
        "commit_hash": "b0eb5a88c5dee74030d5ab05ac5c35d761f3b7e7",
        "repo": "apache/openoffice",
        "commit_url": "https://github.com/apache/openoffice/commit/b0eb5a88c5dee74030d5ab05ac5c35d761f3b7e7",
        "files": [
          "main/connectivity/source/drivers/dbase/DTable.cxx"
        ],
        "message": "add useful checks",
        "before_after_code_files": [
          "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
          ],
          "candidate": [
            "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
          ]
        }
      },
      "candidate_diff": {
        "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx": [
          "File: main/connectivity/source/drivers/dbase/DTable.cxx -> main/connectivity/source/drivers/dbase/DTable.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "896:         else if ( DataType::TIMESTAMP == nType )",
          "897:         {",
          "898:             sal_Int32 nDate = 0,nTime = 0;",
          "899:    memcpy(&nDate, pData, 4);",
          "900:             memcpy(&nTime, pData+ 4, 4);",
          "901:             if ( !nDate && !nTime )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "899:             OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
          "900:             if (nLen != 8) {",
          "901:                 return false;",
          "902:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "911:         }",
          "912:         else if ( DataType::INTEGER == nType )",
          "913:         {",
          "914:             sal_Int32 nValue = 0;",
          "915:    memcpy(&nValue, pData, nLen);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "918:             OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
          "919:             if (nLen != 4) {",
          "920:                 return false;",
          "921:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "918:         else if ( DataType::DOUBLE == nType )",
          "919:         {",
          "920:             double d = 0.0;",
          "921:             if (getBOOL((*aIter)->getPropertyValue(OMetaConnection::getPropMap().getNameByIndex(PROPERTY_ID_ISCURRENCY)))) // Currency wird gesondert behandelt",
          "922:             {",
          "923:                 sal_Int64 nValue = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "929:             OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
          "930:             if (nLen != 8) {",
          "931:                 return false;",
          "932:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "959:    {",
          "960:     case DataType::DATE:",
          "961:     {",
          "962:      if (aStr.Len() != nLen)",
          "963:      {",
          "964:       (_rRow->get())[i]->setNull();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "974:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
          "975:                     if (nLen != 8) {",
          "976:                         return false;",
          "977:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "978:     break;",
          "979:     case DataType::BIT:",
          "980:     {",
          "981:      sal_Bool b;",
          "982:      switch (* ((const char *)pData))",
          "983:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "997:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
          "998:                     if (nLen != 1) {",
          "999:                         return false;",
          "1000:                     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1873:    {",
          "1874:                 case DataType::TIMESTAMP:",
          "1875:                     {",
          "1876:                         sal_Int32 nJulianDate = 0, nJulianTime = 0;",
          "1877:                         lcl_CalcJulDate(nJulianDate,nJulianTime,rRow.get()[nPos]->getValue());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1896:                         OSL_ENSURE(nLen == 8, \"Invalid length for timestamp field\");",
          "1897:                         if (nLen != 8) {",
          "1898:                             bHadError = true;",
          "1899:                             break;",
          "1900:                         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1882:                     break;",
          "1883:     case DataType::DATE:",
          "1884:     {",
          "1885:      ::com::sun::star::util::Date aDate;",
          "1886:      if(rRow.get()[nPos]->getValue().getTypeKind() == DataType::DOUBLE)",
          "1887:       aDate = ::dbtools::DBTypeConversion::toDate(rRow.get()[nPos]->getValue().getDouble());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1910:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
          "1911:                     if (nLen != 8) {",
          "1912:                         bHadError = true;",
          "1913:                         break;",
          "1914:                     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1900:     } break;",
          "1901:                 case DataType::INTEGER:",
          "1902:                     {",
          "1903:                         sal_Int32 nValue = rRow.get()[nPos]->getValue();",
          "1904:                         memcpy(pData,&nValue,nLen);",
          "1905:                     }",
          "1906:                     break;",
          "1907:                 case DataType::DOUBLE:",
          "1908:                     {",
          "1909:                         const double d = rRow.get()[nPos]->getValue();",
          "1910:                         m_pColumns->getByIndex(i) >>= xCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933:                         OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
          "1934:                         if (nLen != 4) {",
          "1935:                             bHadError = true;",
          "1936:                             break;",
          "1937:                         }",
          "1944:                         OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
          "1945:                         if (nLen != 8) {",
          "1946:                             bHadError = true;",
          "1947:                             break;",
          "1948:                         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1958:      }",
          "1959:     } break;",
          "1960:     case DataType::BIT:",
          "1962:      break;",
          "1963:                 case DataType::LONGVARBINARY:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2001:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
          "2002:                     if (nLen != 1) {",
          "2003:                         bHadError = true;",
          "2004:                         break;",
          "2005:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}