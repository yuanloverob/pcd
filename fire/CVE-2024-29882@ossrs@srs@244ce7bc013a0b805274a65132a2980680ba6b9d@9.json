{
  "cve_id": "CVE-2024-29882",
  "cve_desc": "SRS is a simple, high-efficiency, real-time video server. SRS's `/api/v1/vhosts/vid-<id>?callback=<payload>` endpoint didn't filter the callback function name which led to injecting malicious javascript payloads and executing XSS ( Cross-Site Scripting). This vulnerability is fixed in 5.0.210 and 6.0.121.",
  "repo": "ossrs/srs",
  "patch_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
  "patch_info": {
    "commit_hash": "244ce7bc013a0b805274a65132a2980680ba6b9d",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/244ce7bc013a0b805274a65132a2980680ba6b9d",
    "files": [
      "trunk/configure",
      "trunk/doc/CHANGELOG.md",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp"
    ],
    "message": "Merge pull request from GHSA-gv9r-qcjc-5hj7\n\n* Filter JSONP callback function name. v5.0.210,v6.0.121\n\n* Add utest.\n\n* Refine utest",
    "before_after_code_files": [
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
      "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp",
      "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp",
      "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp",
      "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp"
    ]
  },
  "patch_diff": {
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    209",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    210",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    120",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    121",
      "",
      "---------------"
    ],
    "trunk/src/kernel/srs_kernel_error.hpp||trunk/src/kernel/srs_kernel_error.hpp": [
      "File: trunk/src/kernel/srs_kernel_error.hpp -> trunk/src/kernel/srs_kernel_error.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     XX(ERROR_STREAM_CASTER_HEVC_VPS        , 4054, \"CasterTsHevcVps\", \"Invalid ts HEVC VPS for stream caster\") \\",
      "333:     XX(ERROR_STREAM_CASTER_HEVC_SPS        , 4055, \"CasterTsHevcSps\", \"Invalid ts HEVC SPS for stream caster\") \\",
      "334:     XX(ERROR_STREAM_CASTER_HEVC_PPS        , 4056, \"CasterTsHevcPps\", \"Invalid ts HEVC PPS for stream caster\") \\",
      "",
      "[Removed Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\")",
      "",
      "[Added Lines]",
      "335:     XX(ERROR_STREAM_CASTER_HEVC_FORMAT     , 4057, \"CasterTsHevcFormat\", \"Invalid ts HEVC Format for stream caster\") \\",
      "336:     XX(ERROR_HTTP_JSONP                    , 4058, \"HttpJsonp\", \"Invalid callback for JSONP\")",
      "",
      "---------------"
    ],
    "trunk/src/protocol/srs_protocol_http_conn.cpp||trunk/src/protocol/srs_protocol_http_conn.cpp": [
      "File: trunk/src/protocol/srs_protocol_http_conn.cpp -> trunk/src/protocol/srs_protocol_http_conn.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "332:     }",
      "333: }",
      "335: srs_error_t SrsHttpMessage::set_url(string url, bool allow_jsonp)",
      "336: {",
      "337:     srs_error_t err = srs_success;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336: bool srs_is_valid_jsonp_callback(std::string callback)",
      "337: {",
      "338:     for (int i = 0; i < (int)callback.length(); i++) {",
      "339:         char ch = callback.at(i);",
      "340:         bool is_alpha_beta = (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');",
      "341:         bool is_number = (ch >= '0' && ch <= '9');",
      "342:         if (!is_alpha_beta && !is_number && ch != '.' && ch != '_' && ch != '-') {",
      "343:             return false;",
      "344:         }",
      "345:     }",
      "346:     return true;",
      "347: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:     if (allow_jsonp) {",
      "379:         if (jsonp) {",
      "380:             jsonp_method = query_get(\"method\");",
      "381:         }",
      "382:     }",
      "384:     return err;",
      "",
      "[Removed Lines]",
      "376:         if (!query_get(\"callback\").empty()) {",
      "377:             jsonp = true;",
      "378:         }",
      "",
      "[Added Lines]",
      "390:         string callback= query_get(\"callback\");",
      "391:         jsonp = !callback.empty();",
      "397:         if (!srs_is_valid_jsonp_callback(callback)) {",
      "398:             return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());",
      "399:         }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.cpp||trunk/src/utest/srs_utest_protocol3.cpp": [
      "File: trunk/src/utest/srs_utest_protocol3.cpp -> trunk/src/utest/srs_utest_protocol3.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <srs_utest_protocol3.hpp>",
      "8: using namespace std;",
      "10: #include <srs_kernel_error.hpp>",
      "11: #include <srs_core_autofree.hpp>",
      "12: #include <srs_protocol_utility.hpp>",
      "13: #include <srs_protocol_rtmp_msg_array.hpp>",
      "14: #include <srs_protocol_rtmp_stack.hpp>",
      "15: #include <srs_kernel_utility.hpp>",
      "16: #include <srs_app_st.hpp>",
      "17: #include <srs_protocol_amf0.hpp>",
      "18: #include <srs_protocol_rtmp_stack.hpp>",
      "19: #include <srs_protocol_http_conn.hpp>",
      "20: #include <srs_protocol_protobuf.hpp>",
      "21: #include <srs_kernel_buffer.hpp>",
      "23: extern bool srs_is_valid_jsonp_callback(std::string callback);",
      "25: VOID TEST(ProtocolHttpTest, JsonpCallbackName)",
      "26: {",
      "27:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"\"));",
      "28:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"callback\"));",
      "29:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback\"));",
      "30:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890\"));",
      "31:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback-1234567890\"));",
      "32:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback_1234567890\"));",
      "33:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback.1234567890\"));",
      "34:     EXPECT_TRUE(srs_is_valid_jsonp_callback(\"Callback1234567890-_.\"));",
      "35:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback()//\"));",
      "36:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback!\"));",
      "37:     EXPECT_FALSE(srs_is_valid_jsonp_callback(\"callback;\"));",
      "38: }",
      "",
      "---------------"
    ],
    "trunk/src/utest/srs_utest_protocol3.hpp||trunk/src/utest/srs_utest_protocol3.hpp": [
      "File: trunk/src/utest/srs_utest_protocol3.hpp -> trunk/src/utest/srs_utest_protocol3.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #ifndef SRS_UTEST_PROTOCOL3_HPP",
      "8: #define SRS_UTEST_PROTOCOL3_HPP",
      "11: #include <srs_utest_protocol3.hpp>",
      "13: #include <srs_utest_protocol.hpp>",
      "15: #endif",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6834ec208d67fa47c21536d1f1041bb6d60c1834",
      "candidate_info": {
        "commit_hash": "6834ec208d67fa47c21536d1f1041bb6d60c1834",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/6834ec208d67fa47c21536d1f1041bb6d60c1834",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_conn.cpp",
          "trunk/src/app/srs_app_conn.hpp",
          "trunk/src/app/srs_app_gb28181.cpp",
          "trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_st.cpp",
          "trunk/src/app/srs_app_st.hpp",
          "trunk/src/app/srs_app_threads.cpp",
          "trunk/src/core/srs_core_autofree.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_conn.cpp",
          "trunk/src/protocol/srs_protocol_conn.hpp",
          "trunk/src/utest/srs_utest_core.cpp",
          "trunk/src/utest/srs_utest_core.hpp"
        ],
        "message": "SmartPtr: Use shared ptr to manage GB objects. v6.0.126 (#4080)\n\nThe object relations: \n\n![gb](https://github.com/ossrs/srs/assets/2777660/266e8a4e-3f1e-4805-8406-9008d6a63aa0)\n\nSession manages SIP and Media object using shared resource or shared\nptr. Note that I actually use SrsExecutorCoroutine to delete the object\nwhen each coroutine is done, because there is always a dedicate\ncoroutine for each object.\n\nFor SIP and Media object, they directly use the session by raw pointer,\nit's safe because session always live longer than session and media\nobject.\n\n---\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_conn.cpp||trunk/src/app/srs_app_conn.cpp",
          "trunk/src/app/srs_app_conn.hpp||trunk/src/app/srs_app_conn.hpp",
          "trunk/src/app/srs_app_gb28181.cpp||trunk/src/app/srs_app_gb28181.cpp",
          "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_st.cpp||trunk/src/app/srs_app_st.cpp",
          "trunk/src/app/srs_app_st.hpp||trunk/src/app/srs_app_st.hpp",
          "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp",
          "trunk/src/core/srs_core_autofree.hpp||trunk/src/core/srs_core_autofree.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_conn.cpp||trunk/src/protocol/srs_protocol_conn.cpp",
          "trunk/src/protocol/srs_protocol_conn.hpp||trunk/src/protocol/srs_protocol_conn.hpp",
          "trunk/src/utest/srs_utest_core.cpp||trunk/src/utest/srs_utest_core.cpp",
          "trunk/src/utest/srs_utest_core.hpp||trunk/src/utest/srs_utest_core.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_conn.cpp||trunk/src/app/srs_app_conn.cpp": [
          "File: trunk/src/app/srs_app_conn.cpp -> trunk/src/app/srs_app_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:     }",
          "414: }",
          "438: ISrsExpire::ISrsExpire()",
          "439: {",
          "440: }",
          "",
          "[Removed Lines]",
          "416: SrsLazySweepGc::SrsLazySweepGc()",
          "417: {",
          "418: }",
          "420: SrsLazySweepGc::~SrsLazySweepGc()",
          "421: {",
          "422: }",
          "424: srs_error_t SrsLazySweepGc::start()",
          "425: {",
          "426:     srs_error_t err = srs_success;",
          "427:     return err;",
          "428: }",
          "430: void SrsLazySweepGc::remove(SrsLazyObject* c)",
          "431: {",
          "433:     srs_freep(c);",
          "434: }",
          "436: ISrsLazyGc* _srs_gc = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_conn.hpp||trunk/src/app/srs_app_conn.hpp": [
          "File: trunk/src/app/srs_app_conn.hpp -> trunk/src/app/srs_app_conn.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <srs_protocol_kbps.hpp>",
          "21: #include <srs_app_reload.hpp>",
          "22: #include <srs_protocol_conn.hpp>",
          "24: class SrsWallClock;",
          "25: class SrsBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <srs_core_autofree.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     void dispose(ISrsResource* c);",
          "126: };",
          "183: template<typename T>",
          "185: {",
          "186: private:",
          "188: public:",
          "191:     }",
          "197:     }",
          "205:     }",
          "206: public:",
          "209:     }",
          "212:     }",
          "214: public:",
          "215:     virtual const SrsContextId& get_id() {",
          "217:     }",
          "218:     virtual std::string desc() {",
          "220:     }",
          "221: };",
          "",
          "[Removed Lines]",
          "129: class SrsLazySweepGc : public ISrsLazyGc",
          "130: {",
          "131: public:",
          "132:     SrsLazySweepGc();",
          "133:     virtual ~SrsLazySweepGc();",
          "134: public:",
          "135:     virtual srs_error_t start();",
          "136:     virtual void remove(SrsLazyObject* c);",
          "137: };",
          "139: extern ISrsLazyGc* _srs_gc;",
          "184: class SrsLazyObjectWrapper : public ISrsResource",
          "187:     T* resource_;",
          "189:     SrsLazyObjectWrapper() {",
          "190:         init(new T(this));",
          "192:     virtual ~SrsLazyObjectWrapper() {",
          "193:         resource_->gc_dispose();",
          "194:         if (resource_->gc_ref() == 0) {",
          "195:             _srs_gc->remove(resource_);",
          "196:         }",
          "198: private:",
          "199:     SrsLazyObjectWrapper(T* resource) {",
          "200:         init(resource);",
          "201:     }",
          "202:     void init(T* resource) {",
          "203:         resource_ = resource;",
          "204:         resource_->gc_use();",
          "207:     SrsLazyObjectWrapper<T>* copy() {",
          "208:         return new SrsLazyObjectWrapper<T>(resource_);",
          "210:     T* resource() {",
          "211:         return resource_;",
          "216:         return resource_->get_id();",
          "219:         return resource_->desc();",
          "",
          "[Added Lines]",
          "146: class SrsSharedResource : public ISrsResource",
          "149:     SrsSharedPtr<T> ptr_;",
          "151:     SrsSharedResource(T* ptr) : ptr_(ptr) {",
          "153:     SrsSharedResource(const SrsSharedResource<T>& cp) : ptr_(cp.ptr_) {",
          "155:     virtual ~SrsSharedResource() {",
          "159:     T* get() {",
          "160:         return ptr_.get();",
          "161:     }",
          "163:     T* operator->() {",
          "164:         return ptr_.operator->();",
          "165:     }",
          "167:     SrsSharedResource<T>& operator=(const SrsSharedResource<T>& cp) {",
          "168:         if (this != &cp) {",
          "169:             ptr_ = cp.ptr_;",
          "170:         }",
          "171:         return *this;",
          "172:     }",
          "173: private:",
          "175:     T& operator*() {",
          "176:         return ptr_.operator*();",
          "179:     operator bool() const {",
          "180:         return ptr_.operator bool();",
          "185:         return ptr_->get_id();",
          "188:         return ptr_->desc();",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_gb28181.cpp||trunk/src/app/srs_app_gb28181.cpp": [
          "File: trunk/src/app/srs_app_gb28181.cpp -> trunk/src/app/srs_app_gb28181.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return srs_fmt(\"%s->%s\", srs_gb_sip_state(ostate).c_str(), srs_gb_sip_state(state).c_str());",
          "71: }",
          "74: {",
          "78:     muxer_ = new SrsGbMuxer(this);",
          "79:     state_ = SrsGbSessionStateInit;",
          "",
          "[Removed Lines]",
          "73: SrsLazyGbSession::SrsLazyGbSession(SrsLazyObjectWrapper<SrsLazyGbSession>* wrapper_root)",
          "75:     wrapper_root_ = wrapper_root;",
          "76:     sip_ = new SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>();",
          "77:     media_ = new SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>();",
          "",
          "[Added Lines]",
          "73: SrsGbSession::SrsGbSession() : sip_(new SrsGbSipTcpConn()), media_(new SrsGbMediaTcpConn())",
          "75:     wrapper_ = NULL;",
          "76:     owner_coroutine_ = NULL;",
          "77:     owner_cid_ = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     cid_ = _srs_context->generate_id();",
          "104:     _srs_context->set_id(cid_); // Also change current coroutine cid as session's.",
          "106: }",
          "109: {",
          "113:     srs_freep(muxer_);",
          "114:     srs_freep(ppp_);",
          "115: }",
          "118: {",
          "121:     pip_ = candidate_ = _srs_config->get_stream_caster_sip_candidate(conf);",
          "122:     if (candidate_ == \"*\") {",
          "123:         pip_ = srs_get_public_internet_address(true);",
          "124:     }",
          "126:     std::string output = _srs_config->get_stream_caster_output(conf);",
          "131:     connecting_timeout_ = _srs_config->get_stream_caster_sip_timeout(conf);",
          "132:     reinvite_wait_ = _srs_config->get_stream_caster_sip_reinvite(conf);",
          "133:     srs_trace(\"Session: Start timeout=%dms, reinvite=%dms, candidate=%s, pip=%s, output=%s\", srsu2msi(connecting_timeout_),",
          "134:         srsu2msi(reinvite_wait_), candidate_.c_str(), pip_.c_str(), output.c_str());",
          "137: }",
          "140: {",
          "142:     if (media_id_ != ctx->media_id_) {",
          "",
          "[Removed Lines]",
          "105:     trd_ = new SrsSTCoroutine(\"GBS\", this, cid_);",
          "108: SrsLazyGbSession::~SrsLazyGbSession()",
          "110:     srs_freep(trd_);",
          "111:     srs_freep(sip_);",
          "112:     srs_freep(media_);",
          "117: srs_error_t SrsLazyGbSession::initialize(SrsConfDirective* conf)",
          "119:     srs_error_t err = srs_success;",
          "127:     if ((err = muxer_->initialize(output)) != srs_success) {",
          "128:         return srs_error_wrap(err, \"muxer\");",
          "129:     }",
          "136:     return err;",
          "139: void SrsLazyGbSession::on_ps_pack(SrsPackContext* ctx, SrsPsPacket* ps, const std::vector<SrsTsMessage*>& msgs)",
          "",
          "[Added Lines]",
          "108: SrsGbSession::~SrsGbSession()",
          "114: void SrsGbSession::setup(SrsConfDirective* conf)",
          "122:     muxer_->setup(output);",
          "128: }",
          "130: void SrsGbSession::setup_owner(SrsSharedResource<SrsGbSession>* wrapper, ISrsInterruptable* owner_coroutine, ISrsContextIdSetter* owner_cid)",
          "131: {",
          "132:     wrapper_ = wrapper;",
          "133:     owner_coroutine_ = owner_coroutine;",
          "134:     owner_cid_ = owner_cid;",
          "135: }",
          "137: void SrsGbSession::on_executor_done(ISrsInterruptable* executor)",
          "138: {",
          "139:     owner_coroutine_ = NULL;",
          "142: void SrsGbSession::on_ps_pack(SrsPackContext* ctx, SrsPsPacket* ps, const std::vector<SrsTsMessage*>& msgs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     }",
          "196: }",
          "199: {",
          "205: }",
          "208: {",
          "209:     return sip_;",
          "210: }",
          "213: {",
          "219: }",
          "222: {",
          "223:     return pip_;",
          "224: }",
          "227: {",
          "228:     srs_error_t err = srs_success;",
          "251:     if (err == srs_success) {",
          "",
          "[Removed Lines]",
          "198: void SrsLazyGbSession::on_sip_transport(SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* sip)",
          "200:     srs_freep(sip_);",
          "201:     sip_ = sip->copy();",
          "204:     sip_->resource()->set_cid(cid_);",
          "207: SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* SrsLazyGbSession::sip_transport()",
          "212: void SrsLazyGbSession::on_media_transport(SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* media)",
          "214:     srs_freep(media_);",
          "215:     media_ = media->copy();",
          "218:     media_->resource()->set_cid(cid_);",
          "221: std::string SrsLazyGbSession::pip()",
          "226: srs_error_t SrsLazyGbSession::start()",
          "230:     if ((err = trd_->start()) != srs_success) {",
          "231:         return srs_error_wrap(err, \"coroutine\");",
          "232:     }",
          "234:     return err;",
          "235: }",
          "237: srs_error_t SrsLazyGbSession::cycle()",
          "238: {",
          "239:     srs_error_t err = do_cycle();",
          "242:     sip_->resource()->interrupt();",
          "243:     media_->resource()->interrupt();",
          "246:     SrsLazyObjectWrapper<SrsLazyGbSession>* wrapper = wrapper_root_;",
          "247:     srs_assert(wrapper); // The creator wrapper MUST never be null, because we created it.",
          "248:     _srs_gb_manager->remove(wrapper);",
          "",
          "[Added Lines]",
          "201: void SrsGbSession::on_sip_transport(SrsSharedResource<SrsGbSipTcpConn> sip)",
          "203:     sip_ = sip;",
          "205:     sip_->set_cid(cid_);",
          "208: SrsSharedResource<SrsGbSipTcpConn> SrsGbSession::sip_transport()",
          "213: void SrsGbSession::on_media_transport(SrsSharedResource<SrsGbMediaTcpConn> media)",
          "215:     media_ = media;",
          "218:     media_->set_cid(cid_);",
          "221: std::string SrsGbSession::pip()",
          "226: srs_error_t SrsGbSession::cycle()",
          "231:     _srs_context->set_id(cid_);",
          "232:     owner_cid_->set_cid(cid_);",
          "233:     sip_->set_cid(cid_);",
          "234:     media_->set_cid(cid_);",
          "237:     err = do_cycle();",
          "240:     sip_->interrupt();",
          "241:     media_->interrupt();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:     return srs_success;",
          "275: }",
          "278: {",
          "279:     srs_error_t err = srs_success;",
          "281:     while (true) {",
          "283:             return srs_error_wrap(err, \"pull\");",
          "284:         }",
          "",
          "[Removed Lines]",
          "277: srs_error_t SrsLazyGbSession::do_cycle()",
          "282:         if ((err = trd_->pull()) != srs_success) {",
          "",
          "[Added Lines]",
          "270: srs_error_t SrsGbSession::do_cycle()",
          "275:         if (!owner_coroutine_) return err;",
          "276:         if ((err = owner_coroutine_->pull()) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "287:         srs_usleep(SRS_GB_SESSION_DRIVE_INTERVAL);",
          "291:             return err;",
          "292:         }",
          "",
          "[Removed Lines]",
          "290:         if (sip_->resource()->is_bye()) {",
          "",
          "[Added Lines]",
          "284:         if (sip_->is_bye()) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310:     return err;",
          "311: }",
          "314: {",
          "315:     srs_error_t err = srs_success;",
          "317:     #define SRS_GB_CHANGE_STATE_TO(state) { \\",
          "318:         SrsGbSessionState ostate = set_state(state); \\",
          "320:             srs_gb_state(ostate, state_).c_str()); \\",
          "321:     }",
          "323:     if (state_ == SrsGbSessionStateInit) {",
          "327:             SRS_GB_CHANGE_STATE_TO(SrsGbSessionStateConnecting);",
          "328:             connecting_starttime_ = srs_update_system_time();",
          "329:         }",
          "333:             uint32_t ssrc = 0;",
          "335:                 return srs_error_wrap(err, \"invite\");",
          "336:             }",
          "342:         }",
          "343:     }",
          "",
          "[Removed Lines]",
          "313: srs_error_t SrsLazyGbSession::drive_state()",
          "319:         srs_trace(\"Session: Change device=%s, state=%s\", sip_->resource()->device_id().c_str(), \\",
          "326:         if (sip_->resource()->is_registered()) {",
          "332:         if (sip_->resource()->is_registered() && !media_->resource()->is_connected()) {",
          "334:             if ((err = sip_->resource()->invite_request(&ssrc)) != srs_success) {",
          "339:             SrsLazyObjectWrapper<SrsLazyGbSession>* wrapper = wrapper_root_;",
          "340:             srs_assert(wrapper); // It MUST never be NULL, because this method is in the cycle of coroutine.",
          "341:             _srs_gb_manager->add_with_fast_id(ssrc, wrapper);",
          "",
          "[Added Lines]",
          "307: srs_error_t SrsGbSession::drive_state()",
          "313:         srs_trace(\"Session: Change device=%s, state=%s\", sip_->device_id().c_str(), \\",
          "320:         if (sip_->is_registered()) {",
          "326:         if (sip_->is_registered() && !media_->is_connected()) {",
          "328:             if ((err = sip_->invite_request(&ssrc)) != srs_success) {",
          "333:             _srs_gb_manager->add_with_fast_id(ssrc, wrapper_);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "349:             }",
          "351:             srs_trace(\"Session: Connecting timeout, nn=%d, state=%s, sip=%s, media=%d\", nn_timeout_, srs_gb_session_state(state_).c_str(),",
          "354:             SRS_GB_CHANGE_STATE_TO(SrsGbSessionStateInit);",
          "355:         }",
          "358:             SRS_GB_CHANGE_STATE_TO(SrsGbSessionStateEstablished);",
          "359:         }",
          "360:     }",
          "362:     if (state_ == SrsGbSessionStateEstablished) {",
          "364:             srs_trace(\"Session: Dispose for client bye\");",
          "365:             return err;",
          "366:         }",
          "370:             if (!reinviting_starttime_) {",
          "371:                 reinviting_starttime_ = srs_update_system_time();",
          "372:             }",
          "373:             if (srs_get_system_time() - reinviting_starttime_ > reinvite_wait_) {",
          "374:                 reinviting_starttime_ = 0;",
          "375:                 srs_trace(\"Session: Re-invite for disconnect, state=%s, sip=%s, media=%d\", srs_gb_session_state(state_).c_str(),",
          "378:                 SRS_GB_CHANGE_STATE_TO(SrsGbSessionStateInit);",
          "379:             }",
          "380:         }",
          "",
          "[Removed Lines]",
          "352:                 srs_gb_sip_state(sip_->resource()->state()).c_str(), media_->resource()->is_connected());",
          "353:             sip_->resource()->reset_to_register();",
          "357:         if (sip_->resource()->is_stable() && media_->resource()->is_connected()) {",
          "363:         if (sip_->resource()->is_bye()) {",
          "369:         if (!media_->resource()->is_connected()) {",
          "376:                     srs_gb_sip_state(sip_->resource()->state()).c_str(), media_->resource()->is_connected());",
          "377:                 sip_->resource()->reset_to_register();",
          "",
          "[Added Lines]",
          "344:                 srs_gb_sip_state(sip_->state()).c_str(), media_->is_connected());",
          "345:             sip_->reset_to_register();",
          "349:         if (sip_->is_stable() && media_->is_connected()) {",
          "355:         if (sip_->is_bye()) {",
          "361:         if (!media_->is_connected()) {",
          "368:                     srs_gb_sip_state(sip_->state()).c_str(), media_->is_connected());",
          "369:                 sip_->reset_to_register();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "383:     return err;",
          "384: }",
          "387: {",
          "388:     SrsGbSessionState state = state_;",
          "389:     state_ = v;",
          "390:     return state;",
          "391: }",
          "394: {",
          "395:     return cid_;",
          "396: }",
          "399: {",
          "400:     return \"GBS\";",
          "401: }",
          "",
          "[Removed Lines]",
          "386: SrsGbSessionState SrsLazyGbSession::set_state(SrsGbSessionState v)",
          "393: const SrsContextId& SrsLazyGbSession::get_id()",
          "398: std::string SrsLazyGbSession::desc()",
          "",
          "[Added Lines]",
          "378: SrsGbSessionState SrsGbSession::set_state(SrsGbSessionState v)",
          "385: const SrsContextId& SrsGbSession::get_id()",
          "390: std::string SrsGbSession::desc()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "465:     if (listener == sip_listener_) {",
          "472:             return srs_error_wrap(err, \"gb sip\");",
          "473:         }",
          "475:         _srs_gb_manager->add(conn, NULL);",
          "483:             return srs_error_wrap(err, \"gb media\");",
          "484:         }",
          "487:     } else {",
          "488:         srs_warn(\"GB: Ignore TCP client\");",
          "489:         srs_close_stfd(stfd);",
          "",
          "[Removed Lines]",
          "466:         SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* conn = new SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>();",
          "467:         SrsLazyGbSipTcpConn* resource = dynamic_cast<SrsLazyGbSipTcpConn*>(conn->resource());",
          "468:         resource->setup(conf_, sip_listener_, media_listener_, stfd);",
          "470:         if ((err = resource->start()) != srs_success) {",
          "471:             srs_freep(conn);",
          "476:     } else if (listener == media_listener_) {",
          "477:         SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* conn = new SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>();",
          "478:         SrsLazyGbMediaTcpConn* resource = dynamic_cast<SrsLazyGbMediaTcpConn*>(conn->resource());",
          "479:         resource->setup(stfd);",
          "481:         if ((err = resource->start()) != srs_success) {",
          "482:             srs_freep(conn);",
          "486:         _srs_gb_manager->add(conn, NULL);",
          "",
          "[Added Lines]",
          "458:         SrsGbSipTcpConn* raw_conn = new SrsGbSipTcpConn();",
          "459:         raw_conn->setup(conf_, sip_listener_, media_listener_, stfd);",
          "461:         SrsSharedResource<SrsGbSipTcpConn>* conn = new SrsSharedResource<SrsGbSipTcpConn>(raw_conn);",
          "462:         _srs_gb_manager->add(conn, NULL);",
          "464:         SrsExecutorCoroutine* executor = new SrsExecutorCoroutine(_srs_gb_manager, conn, raw_conn, raw_conn);",
          "465:         raw_conn->setup_owner(conn, executor, executor);",
          "467:         if ((err = executor->start()) != srs_success) {",
          "468:             srs_freep(executor);",
          "471:     } else if (listener == media_listener_) {",
          "472:         SrsGbMediaTcpConn* raw_conn = new SrsGbMediaTcpConn();",
          "473:         raw_conn->setup(stfd);",
          "475:         SrsSharedResource<SrsGbMediaTcpConn>* conn = new SrsSharedResource<SrsGbMediaTcpConn>(raw_conn);",
          "478:         SrsExecutorCoroutine* executor = new SrsExecutorCoroutine(_srs_gb_manager, conn, raw_conn, raw_conn);",
          "479:         raw_conn->setup_owner(conn, executor, executor);",
          "481:         if ((err = executor->start()) != srs_success) {",
          "482:             srs_freep(executor);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "492:     return err;",
          "493: }",
          "496: {",
          "498:     session_ = NULL;",
          "499:     state_ = SrsGbSipStateInit;",
          "500:     register_ = new SrsSipMessage();",
          "",
          "[Removed Lines]",
          "495: SrsLazyGbSipTcpConn::SrsLazyGbSipTcpConn(SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* wrapper_root)",
          "497:     wrapper_root_ = wrapper_root;",
          "",
          "[Added Lines]",
          "493: SrsGbSipTcpConn::SrsGbSipTcpConn()",
          "495:     wrapper_ = NULL;",
          "496:     owner_coroutine_ = NULL;",
          "497:     owner_cid_ = NULL;",
          "498:     cid_ = _srs_context->get_id();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "507:     conn_ = NULL;",
          "508:     receiver_ = NULL;",
          "509:     sender_ = NULL;",
          "512: }",
          "515: {",
          "517:     srs_freep(receiver_);",
          "518:     srs_freep(sender_);",
          "519:     srs_freep(conn_);",
          "521:     srs_freep(register_);",
          "522:     srs_freep(invite_ok_);",
          "523:     srs_freep(conf_);",
          "524: }",
          "527: {",
          "528:     srs_freep(conf_);",
          "529:     conf_ = conf->copy();",
          "532:     sip_listener_ = sip;",
          "533:     media_listener_ = media;",
          "534:     conn_ = new SrsTcpConnection(stfd);",
          "537: }",
          "540: {",
          "541:     return register_->device_id();",
          "542: }",
          "545: {",
          "547:     receiver_->set_cid(cid);",
          "548:     sender_->set_cid(cid);",
          "549: }",
          "552: {",
          "553:     if (sip) *sip = sip_listener_->port();",
          "554:     if (media) *media = media_listener_->port();",
          "555: }",
          "558: {",
          "559:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "511:     trd_ = new SrsSTCoroutine(\"sip\", this);",
          "514: SrsLazyGbSipTcpConn::~SrsLazyGbSipTcpConn()",
          "516:     srs_freep(trd_);",
          "520:     srs_freep(session_);",
          "526: void SrsLazyGbSipTcpConn::setup(SrsConfDirective* conf, SrsTcpListener* sip, SrsTcpListener* media, srs_netfd_t stfd)",
          "531:     session_ = NULL;",
          "535:     receiver_ = new SrsLazyGbSipTcpReceiver(this, conn_);",
          "536:     sender_ = new SrsLazyGbSipTcpSender(conn_);",
          "539: std::string SrsLazyGbSipTcpConn::device_id()",
          "544: void SrsLazyGbSipTcpConn::set_cid(const SrsContextId& cid)",
          "546:     trd_->set_cid(cid);",
          "551: void SrsLazyGbSipTcpConn::query_ports(int* sip, int* media)",
          "557: srs_error_t SrsLazyGbSipTcpConn::on_sip_message(SrsSipMessage* msg)",
          "",
          "[Added Lines]",
          "514: SrsGbSipTcpConn::~SrsGbSipTcpConn()",
          "524: void SrsGbSipTcpConn::setup(SrsConfDirective* conf, SrsTcpListener* sip, SrsTcpListener* media, srs_netfd_t stfd)",
          "532:     receiver_ = new SrsGbSipTcpReceiver(this, conn_);",
          "533:     sender_ = new SrsGbSipTcpSender(conn_);",
          "534: }",
          "536: void SrsGbSipTcpConn::setup_owner(SrsSharedResource<SrsGbSipTcpConn>* wrapper, ISrsInterruptable* owner_coroutine, ISrsContextIdSetter* owner_cid)",
          "537: {",
          "538:     wrapper_ = wrapper;",
          "539:     owner_coroutine_ = owner_coroutine;",
          "540:     owner_cid_ = owner_cid;",
          "543: void SrsGbSipTcpConn::on_executor_done(ISrsInterruptable* executor)",
          "544: {",
          "545:     owner_coroutine_ = NULL;",
          "546: }",
          "548: std::string SrsGbSipTcpConn::device_id()",
          "553: void SrsGbSipTcpConn::set_cid(const SrsContextId& cid)",
          "555:     if (owner_cid_) owner_cid_->set_cid(cid);",
          "558:     cid_ = cid;",
          "561: void SrsGbSipTcpConn::query_ports(int* sip, int* media)",
          "567: srs_error_t SrsGbSipTcpConn::on_sip_message(SrsSipMessage* msg)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "603:     return err;",
          "604: }",
          "607: {",
          "609:     drive_state(msg);",
          "",
          "[Removed Lines]",
          "606: void SrsLazyGbSipTcpConn::enqueue_sip_message(SrsSipMessage* msg)",
          "",
          "[Added Lines]",
          "616: void SrsGbSipTcpConn::enqueue_sip_message(SrsSipMessage* msg)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "612:     sender_->enqueue(msg);",
          "613: }",
          "616: {",
          "617:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "615: void SrsLazyGbSipTcpConn::drive_state(SrsSipMessage* msg)",
          "",
          "[Added Lines]",
          "625: void SrsGbSipTcpConn::drive_state(SrsSipMessage* msg)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "669:     }",
          "670: }",
          "673: {",
          "674:     SrsSipMessage* res = new SrsSipMessage();",
          "",
          "[Removed Lines]",
          "672: void SrsLazyGbSipTcpConn::register_response(SrsSipMessage* msg)",
          "",
          "[Added Lines]",
          "682: void SrsGbSipTcpConn::register_response(SrsSipMessage* msg)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "686:     enqueue_sip_message(res);",
          "687: }",
          "690: {",
          "691:     SrsSipMessage* res = new SrsSipMessage();",
          "",
          "[Removed Lines]",
          "689: void SrsLazyGbSipTcpConn::message_response(SrsSipMessage* msg, http_status status)",
          "",
          "[Added Lines]",
          "699: void SrsGbSipTcpConn::message_response(SrsSipMessage* msg, http_status status)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "701:     enqueue_sip_message(res);",
          "702: }",
          "705: {",
          "707:     int sip_port; query_ports(&sip_port, NULL);",
          "708:     string gb_device_id = srs_fmt(\"sip:%s@%s\", msg->to_address_user_.c_str(), msg->to_address_host_.c_str());",
          "709:     string branch = srs_random_str(6);",
          "",
          "[Removed Lines]",
          "704: void SrsLazyGbSipTcpConn::invite_ack(SrsSipMessage* msg)",
          "706:     string pip = session_->resource()->pip(); // Parse from CANDIDATE",
          "",
          "[Added Lines]",
          "714: void SrsGbSipTcpConn::invite_ack(SrsSipMessage* msg)",
          "716:     string pip = session_->pip(); // Parse from CANDIDATE",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "722:     enqueue_sip_message(req);",
          "723: }",
          "726: {",
          "727:     SrsSipMessage* res = new SrsSipMessage();",
          "",
          "[Removed Lines]",
          "725: void SrsLazyGbSipTcpConn::bye_response(SrsSipMessage* msg)",
          "",
          "[Added Lines]",
          "735: void SrsGbSipTcpConn::bye_response(SrsSipMessage* msg)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "737:     enqueue_sip_message(res);",
          "738: }",
          "741: {",
          "742:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "740: srs_error_t SrsLazyGbSipTcpConn::invite_request(uint32_t* pssrc)",
          "",
          "[Added Lines]",
          "750: srs_error_t SrsGbSipTcpConn::invite_request(uint32_t* pssrc)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "765:         if (pssrc) *pssrc = ssrc_v_;",
          "766:     }",
          "769:     int sip_port, media_port; query_ports(&sip_port, &media_port);",
          "770:     string srs_device_id = srs_fmt(\"sip:%s@%s\", register_->request_uri_user_.c_str(), register_->request_uri_host_.c_str());",
          "771:     string gb_device_id = srs_fmt(\"sip:%s@%s\", register_->from_address_user_.c_str(), register_->from_address_host_.c_str());",
          "",
          "[Removed Lines]",
          "768:     string pip = session_->resource()->pip(); // Parse from CANDIDATE",
          "",
          "[Added Lines]",
          "778:     string pip = session_->pip(); // Parse from CANDIDATE",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "834:     return err;",
          "835: }",
          "838: {",
          "839:     receiver_->interrupt();",
          "840:     sender_->interrupt();",
          "842: }",
          "845: {",
          "846:     return state_;",
          "847: }",
          "850: {",
          "851:     state_ = SrsGbSipStateRegistered;",
          "852: }",
          "855: {",
          "856:     return state_ >= SrsGbSipStateRegistered && state_ <= SrsGbSipStateStable;",
          "857: }",
          "860: {",
          "861:     return state_ == SrsGbSipStateStable;",
          "862: }",
          "865: {",
          "866:     return state_ == SrsGbSipStateBye;",
          "867: }",
          "870: {",
          "871:     SrsGbSipState state = state_;",
          "872:     state_ = v;",
          "873:     return state;",
          "874: }",
          "877: {",
          "879: }",
          "882: {",
          "883:     return \"GB-SIP-TCP\";",
          "884: }",
          "887: {",
          "888:     srs_error_t err = srs_success;",
          "894:     if ((err = receiver_->start()) != srs_success) {",
          "895:         return srs_error_wrap(err, \"receiver\");",
          "896:     }",
          "",
          "[Removed Lines]",
          "837: void SrsLazyGbSipTcpConn::interrupt()",
          "841:     trd_->interrupt();",
          "844: SrsGbSipState SrsLazyGbSipTcpConn::state()",
          "849: void SrsLazyGbSipTcpConn::reset_to_register()",
          "854: bool SrsLazyGbSipTcpConn::is_registered()",
          "859: bool SrsLazyGbSipTcpConn::is_stable()",
          "864: bool SrsLazyGbSipTcpConn::is_bye()",
          "869: SrsGbSipState SrsLazyGbSipTcpConn::set_state(SrsGbSipState v)",
          "876: const SrsContextId& SrsLazyGbSipTcpConn::get_id()",
          "878:     return trd_->cid();",
          "881: std::string SrsLazyGbSipTcpConn::desc()",
          "886: srs_error_t SrsLazyGbSipTcpConn::start()",
          "890:     if ((err = trd_->start()) != srs_success) {",
          "891:         return srs_error_wrap(err, \"sip\");",
          "892:     }",
          "",
          "[Added Lines]",
          "847: void SrsGbSipTcpConn::interrupt()",
          "851:     if (owner_coroutine_) owner_coroutine_->interrupt();",
          "854: SrsGbSipState SrsGbSipTcpConn::state()",
          "859: void SrsGbSipTcpConn::reset_to_register()",
          "864: bool SrsGbSipTcpConn::is_registered()",
          "869: bool SrsGbSipTcpConn::is_stable()",
          "874: bool SrsGbSipTcpConn::is_bye()",
          "879: SrsGbSipState SrsGbSipTcpConn::set_state(SrsGbSipState v)",
          "886: const SrsContextId& SrsGbSipTcpConn::get_id()",
          "888:     return cid_;",
          "891: std::string SrsGbSipTcpConn::desc()",
          "896: srs_error_t SrsGbSipTcpConn::cycle()",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "899:         return srs_error_wrap(err, \"sender\");",
          "900:     }",
          "910:     receiver_->interrupt();",
          "911:     sender_->interrupt();",
          "919:     if (err == srs_success) {",
          "920:         srs_trace(\"client finished.\");",
          "",
          "[Removed Lines]",
          "902:     return err;",
          "903: }",
          "905: srs_error_t SrsLazyGbSipTcpConn::cycle()",
          "906: {",
          "907:     srs_error_t err = do_cycle();",
          "914:     SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* wrapper = wrapper_root_;",
          "915:     srs_assert(wrapper); // The creator wrapper MUST never be null, because we created it.",
          "916:     _srs_gb_manager->remove(wrapper);",
          "",
          "[Added Lines]",
          "909:     err = do_cycle();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "942:     return srs_success;",
          "943: }",
          "946: {",
          "947:     srs_error_t err = srs_success;",
          "949:     while (true) {",
          "951:             return srs_error_wrap(err, \"pull\");",
          "952:         }",
          "955:         srs_usleep(SRS_UTIME_NO_TIMEOUT);",
          "956:     }",
          "958:     return err;",
          "959: }",
          "962: {",
          "963:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "945: srs_error_t SrsLazyGbSipTcpConn::do_cycle()",
          "950:         if ((err = trd_->pull()) != srs_success) {",
          "961: srs_error_t SrsLazyGbSipTcpConn::bind_session(SrsSipMessage* msg, SrsLazyObjectWrapper<SrsLazyGbSession>** psession)",
          "",
          "[Added Lines]",
          "942: srs_error_t SrsGbSipTcpConn::do_cycle()",
          "947:         if (!owner_coroutine_) return err;",
          "948:         if ((err = owner_coroutine_->pull()) != srs_success) {",
          "958: srs_error_t SrsGbSipTcpConn::bind_session(SrsSipMessage* msg, SrsGbSession** psession)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "969:     if (msg->type_ != HTTP_REQUEST || msg->method_ != HTTP_REGISTER) return err;",
          "977:     if (!session) {",
          "992:     }",
          "997:         state_ = pre->state_;",
          "998:         ssrc_str_ = pre->ssrc_str_;",
          "999:         ssrc_v_ = pre->ssrc_v_;",
          "",
          "[Removed Lines]",
          "972:     SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* wrapper = wrapper_root_;",
          "973:     srs_assert(wrapper); // It MUST never be NULL, because this method is in the cycle of coroutine of receiver.",
          "976:     SrsLazyObjectWrapper<SrsLazyGbSession>* session = dynamic_cast<SrsLazyObjectWrapper<SrsLazyGbSession>*>(_srs_gb_manager->find_by_id(device));",
          "979:         session = new SrsLazyObjectWrapper<SrsLazyGbSession>();",
          "981:         if ((err = session->resource()->initialize(conf_)) != srs_success) {",
          "982:             srs_freep(session);",
          "983:             return srs_error_wrap(err, \"initialize\");",
          "984:         }",
          "986:         if ((err = session->resource()->start()) != srs_success) {",
          "987:             srs_freep(session);",
          "988:             return srs_error_wrap(err, \"start\");",
          "989:         }",
          "991:         _srs_gb_manager->add_with_id(device, session);",
          "995:     SrsLazyGbSipTcpConn* pre = dynamic_cast<SrsLazyGbSipTcpConn*>(session->resource()->sip_transport()->resource());",
          "996:     if (pre) {",
          "",
          "[Added Lines]",
          "969:     SrsSharedResource<SrsGbSession>* session = dynamic_cast<SrsSharedResource<SrsGbSession>*>(_srs_gb_manager->find_by_id(device));",
          "970:     SrsGbSession* raw_session = session ? (*session).get() : NULL;",
          "973:         raw_session = new SrsGbSession();",
          "974:         raw_session->setup(conf_);",
          "976:         session = new SrsSharedResource<SrsGbSession>(raw_session);",
          "977:         _srs_gb_manager->add_with_id(device, session);",
          "979:         SrsExecutorCoroutine* executor = new SrsExecutorCoroutine(_srs_gb_manager, session, raw_session, raw_session);",
          "980:         raw_session->setup_owner(session, executor, executor);",
          "982:         if ((err = executor->start()) != srs_success) {",
          "983:             srs_freep(executor);",
          "984:             return srs_error_wrap(err, \"gb session\");",
          "985:         }",
          "989:     SrsSharedResource<SrsGbSipTcpConn> pre = raw_session->sip_transport();",
          "990:     if (pre.get() && pre.get() != this) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1001:         srs_freep(invite_ok_); invite_ok_ = pre->invite_ok_->copy();",
          "1002:     }",
          "1008:     return err;",
          "1009: }",
          "1012: {",
          "1013:     sip_ = sip;",
          "1014:     conn_ = conn;",
          "1015:     trd_ = new SrsSTCoroutine(\"sip-receiver\", this);",
          "1016: }",
          "1019: {",
          "1020:     srs_freep(trd_);",
          "1021: }",
          "1024: {",
          "1025:     trd_->interrupt();",
          "1026: }",
          "1029: {",
          "1030:     trd_->set_cid(cid);",
          "1031: }",
          "1034: {",
          "1035:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1005:     session->resource()->on_sip_transport(wrapper);",
          "1011: SrsLazyGbSipTcpReceiver::SrsLazyGbSipTcpReceiver(SrsLazyGbSipTcpConn* sip, SrsTcpConnection* conn)",
          "1018: SrsLazyGbSipTcpReceiver::~SrsLazyGbSipTcpReceiver()",
          "1023: void SrsLazyGbSipTcpReceiver::interrupt()",
          "1028: void SrsLazyGbSipTcpReceiver::set_cid(const SrsContextId& cid)",
          "1033: srs_error_t SrsLazyGbSipTcpReceiver::start()",
          "",
          "[Added Lines]",
          "999:     raw_session->on_sip_transport(*wrapper_);",
          "1005: SrsGbSipTcpReceiver::SrsGbSipTcpReceiver(SrsGbSipTcpConn* sip, SrsTcpConnection* conn)",
          "1012: SrsGbSipTcpReceiver::~SrsGbSipTcpReceiver()",
          "1017: void SrsGbSipTcpReceiver::interrupt()",
          "1022: void SrsGbSipTcpReceiver::set_cid(const SrsContextId& cid)",
          "1027: srs_error_t SrsGbSipTcpReceiver::start()",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1041:     return err;",
          "1042: }",
          "1045: {",
          "1046:     srs_error_t err = do_cycle();",
          "",
          "[Removed Lines]",
          "1044: srs_error_t SrsLazyGbSipTcpReceiver::cycle()",
          "",
          "[Added Lines]",
          "1038: srs_error_t SrsGbSipTcpReceiver::cycle()",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1053:     return err;",
          "1054: }",
          "1057: {",
          "1058:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1056: srs_error_t SrsLazyGbSipTcpReceiver::do_cycle()",
          "",
          "[Added Lines]",
          "1050: srs_error_t SrsGbSipTcpReceiver::do_cycle()",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1092:     return err;",
          "1093: }",
          "1096: {",
          "1097:     conn_ = conn;",
          "1098:     wait_ = srs_cond_new();",
          "1099:     trd_ = new SrsSTCoroutine(\"sip-sender\", this);",
          "1100: }",
          "1103: {",
          "1104:     srs_freep(trd_);",
          "1105:     srs_cond_destroy(wait_);",
          "",
          "[Removed Lines]",
          "1095: SrsLazyGbSipTcpSender::SrsLazyGbSipTcpSender(SrsTcpConnection* conn)",
          "1102: SrsLazyGbSipTcpSender::~SrsLazyGbSipTcpSender()",
          "",
          "[Added Lines]",
          "1089: SrsGbSipTcpSender::SrsGbSipTcpSender(SrsTcpConnection* conn)",
          "1096: SrsGbSipTcpSender::~SrsGbSipTcpSender()",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1110:     }",
          "1111: }",
          "1114: {",
          "1115:     msgs_.push_back(msg);",
          "1116:     srs_cond_signal(wait_);",
          "1117: }",
          "1120: {",
          "1121:     trd_->interrupt();",
          "1122: }",
          "1125: {",
          "1126:     trd_->set_cid(cid);",
          "1127: }",
          "1130: {",
          "1131:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1113: void SrsLazyGbSipTcpSender::enqueue(SrsSipMessage* msg)",
          "1119: void SrsLazyGbSipTcpSender::interrupt()",
          "1124: void SrsLazyGbSipTcpSender::set_cid(const SrsContextId& cid)",
          "1129: srs_error_t SrsLazyGbSipTcpSender::start()",
          "",
          "[Added Lines]",
          "1107: void SrsGbSipTcpSender::enqueue(SrsSipMessage* msg)",
          "1113: void SrsGbSipTcpSender::interrupt()",
          "1118: void SrsGbSipTcpSender::set_cid(const SrsContextId& cid)",
          "1123: srs_error_t SrsGbSipTcpSender::start()",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1137:     return err;",
          "1138: }",
          "1141: {",
          "1142:     srs_error_t err = do_cycle();",
          "",
          "[Removed Lines]",
          "1140: srs_error_t SrsLazyGbSipTcpSender::cycle()",
          "",
          "[Added Lines]",
          "1134: srs_error_t SrsGbSipTcpSender::cycle()",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1149:     return err;",
          "1150: }",
          "1153: {",
          "1154:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1152: srs_error_t SrsLazyGbSipTcpSender::do_cycle()",
          "",
          "[Added Lines]",
          "1146: srs_error_t SrsGbSipTcpSender::do_cycle()",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1219: {",
          "1220: }",
          "1223: {",
          "1225:     pack_ = new SrsPackContext(this);",
          "1227:     buffer_ = new uint8_t[65535];",
          "1228:     conn_ = NULL;",
          "1230:     session_ = NULL;",
          "1231:     connected_ = false;",
          "1232:     nn_rtcp_ = 0;",
          "1233: }",
          "1236: {",
          "1238:     srs_freep(conn_);",
          "1239:     srs_freepa(buffer_);",
          "1240:     srs_freep(pack_);",
          "1242: }",
          "1245: {",
          "1246:     srs_freep(conn_);",
          "1247:     conn_ = new SrsTcpConnection(stfd);",
          "1248: }",
          "1251: {",
          "1253: }",
          "1256: {",
          "1258: }",
          "1261: {",
          "1263: }",
          "1266: {",
          "1268: }",
          "1271: {",
          "1273: }",
          "1276: {",
          "1284: }",
          "1287: {",
          "1288:     srs_error_t err = do_cycle();",
          "",
          "[Removed Lines]",
          "1222: SrsLazyGbMediaTcpConn::SrsLazyGbMediaTcpConn(SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* wrapper_root)",
          "1224:     wrapper_root_ = wrapper_root;",
          "1226:     trd_ = new SrsSTCoroutine(\"media\", this);",
          "1235: SrsLazyGbMediaTcpConn::~SrsLazyGbMediaTcpConn()",
          "1237:     srs_freep(trd_);",
          "1241:     srs_freep(session_);",
          "1244: void SrsLazyGbMediaTcpConn::setup(srs_netfd_t stfd)",
          "1250: bool SrsLazyGbMediaTcpConn::is_connected()",
          "1252:     return connected_;",
          "1255: void SrsLazyGbMediaTcpConn::interrupt()",
          "1257:     trd_->interrupt();",
          "1260: void SrsLazyGbMediaTcpConn::set_cid(const SrsContextId& cid)",
          "1262:     trd_->set_cid(cid);",
          "1265: const SrsContextId& SrsLazyGbMediaTcpConn::get_id()",
          "1267:     return _srs_context->get_id();",
          "1270: std::string SrsLazyGbMediaTcpConn::desc()",
          "1272:     return \"GB-Media-TCP\";",
          "1275: srs_error_t SrsLazyGbMediaTcpConn::start()",
          "1277:     srs_error_t err = srs_success;",
          "1279:     if ((err = trd_->start()) != srs_success) {",
          "1280:         return srs_error_wrap(err, \"coroutine\");",
          "1281:     }",
          "1283:     return err;",
          "1286: srs_error_t SrsLazyGbMediaTcpConn::cycle()",
          "",
          "[Added Lines]",
          "1216: SrsGbMediaTcpConn::SrsGbMediaTcpConn()",
          "1222:     wrapper_ = NULL;",
          "1223:     owner_coroutine_ = NULL;",
          "1224:     owner_cid_ = NULL;",
          "1225:     cid_ = _srs_context->get_id();",
          "1232: SrsGbMediaTcpConn::~SrsGbMediaTcpConn()",
          "1239: void SrsGbMediaTcpConn::setup(srs_netfd_t stfd)",
          "1245: void SrsGbMediaTcpConn::setup_owner(SrsSharedResource<SrsGbMediaTcpConn>* wrapper, ISrsInterruptable* owner_coroutine, ISrsContextIdSetter* owner_cid)",
          "1247:     wrapper_ = wrapper;",
          "1248:     owner_coroutine_ = owner_coroutine;",
          "1249:     owner_cid_ = owner_cid;",
          "1252: void SrsGbMediaTcpConn::on_executor_done(ISrsInterruptable* executor)",
          "1254:     owner_coroutine_ = NULL;",
          "1257: bool SrsGbMediaTcpConn::is_connected()",
          "1259:     return connected_;",
          "1262: void SrsGbMediaTcpConn::interrupt()",
          "1264:     if (owner_coroutine_) owner_coroutine_->interrupt();",
          "1267: void SrsGbMediaTcpConn::set_cid(const SrsContextId& cid)",
          "1269:     if (owner_cid_) owner_cid_->set_cid(cid);",
          "1270:     cid_ = cid;",
          "1273: const SrsContextId& SrsGbMediaTcpConn::get_id()",
          "1275:     return cid_;",
          "1276: }",
          "1278: std::string SrsGbMediaTcpConn::desc()",
          "1279: {",
          "1280:     return \"GB-Media-TCP\";",
          "1283: srs_error_t SrsGbMediaTcpConn::cycle()",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1295:     connected_ = false;",
          "1296:     srs_trace(\"PS: Media disconnect, code=%d\", srs_error_code(err));",
          "1304:     if (err == srs_success) {",
          "1305:         srs_trace(\"client finished.\");",
          "",
          "[Removed Lines]",
          "1299:     SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* wrapper = wrapper_root_;",
          "1300:     srs_assert(wrapper); // The creator wrapper MUST never be null, because we created it.",
          "1301:     _srs_gb_manager->remove(wrapper);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1327:     return srs_success;",
          "1328: }",
          "1331: {",
          "1332:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1330: srs_error_t SrsLazyGbMediaTcpConn::do_cycle()",
          "",
          "[Added Lines]",
          "1322: srs_error_t SrsGbMediaTcpConn::do_cycle()",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1341:     uint32_t reserved = 0;",
          "1343:     for (;;) {",
          "1345:             return srs_error_wrap(err, \"pull\");",
          "1346:         }",
          "",
          "[Removed Lines]",
          "1344:         if ((err = trd_->pull()) != srs_success) {",
          "",
          "[Added Lines]",
          "1336:         if (!owner_coroutine_) return err;",
          "1337:         if ((err = owner_coroutine_->pull()) != srs_success) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1426:     return err;",
          "1427: }",
          "1430: {",
          "1431:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "1429: srs_error_t SrsLazyGbMediaTcpConn::on_ps_pack(SrsPsPacket* ps, const std::vector<SrsTsMessage*>& msgs)",
          "",
          "[Added Lines]",
          "1422: srs_error_t SrsGbMediaTcpConn::on_ps_pack(SrsPsPacket* ps, const std::vector<SrsTsMessage*>& msgs)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1437:     }",
          "",
          "[Removed Lines]",
          "1440:     session_->resource()->on_ps_pack(pack_, ps, msgs);",
          "",
          "[Added Lines]",
          "1433:     session_->on_ps_pack(pack_, ps, msgs);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1450:     return err;",
          "1451: }",
          "1454: {",
          "1455:     srs_error_t err = srs_success;",
          "1457:     if (!ssrc) return err;",
          "1465:     if (!session) return err;",
          "1471:     return err;",
          "1472: }",
          "",
          "[Removed Lines]",
          "1453: srs_error_t SrsLazyGbMediaTcpConn::bind_session(uint32_t ssrc, SrsLazyObjectWrapper<SrsLazyGbSession>** psession)",
          "1460:     SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* wrapper = wrapper_root_;",
          "1461:     srs_assert(wrapper); // It MUST never be NULL, because this method is in the cycle of coroutine.",
          "1464:     SrsLazyObjectWrapper<SrsLazyGbSession>* session = dynamic_cast<SrsLazyObjectWrapper<SrsLazyGbSession>*>(_srs_gb_manager->find_by_fast_id(ssrc));",
          "1467:     _srs_gb_manager->add_with_fast_id(ssrc, session);",
          "1468:     session->resource()->on_media_transport(wrapper);",
          "",
          "[Added Lines]",
          "1446: srs_error_t SrsGbMediaTcpConn::bind_session(uint32_t ssrc, SrsGbSession** psession)",
          "1453:     SrsSharedResource<SrsGbSession>* session = dynamic_cast<SrsSharedResource<SrsGbSession>*>(_srs_gb_manager->find_by_fast_id(ssrc));",
          "1456:     SrsGbSession* raw_session = (*session).get();",
          "1457:     srs_assert(raw_session);",
          "1460:     raw_session->on_media_transport(*wrapper_);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1545:     return NULL;",
          "1546: }",
          "1549: {",
          "1550:     sdk_ = NULL;",
          "1551:     session_ = session;",
          "",
          "[Removed Lines]",
          "1548: SrsGbMuxer::SrsGbMuxer(SrsLazyGbSession* session)",
          "",
          "[Added Lines]",
          "1540: SrsGbMuxer::SrsGbMuxer(SrsGbSession* session)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1580:     srs_freep(pprint_);",
          "1581: }",
          "1584: {",
          "1587:     output_ = output;",
          "1590: }",
          "1592: srs_error_t SrsGbMuxer::on_ts_message(SrsTsMessage* msg)",
          "",
          "[Removed Lines]",
          "1583: srs_error_t SrsGbMuxer::initialize(std::string output)",
          "1585:     srs_error_t err = srs_success;",
          "1589:     return err;",
          "",
          "[Added Lines]",
          "1575: void SrsGbMuxer::setup(std::string output)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2096:     close();",
          "2099:     srs_trace(\"Muxer: Convert GB to RTMP %s\", url.c_str());",
          "2101:     srs_utime_t cto = SRS_CONSTS_RTMP_TIMEOUT;",
          "",
          "[Removed Lines]",
          "2098:     string url = srs_string_replace(output_, \"[stream]\", session_->sip_transport()->resource()->device_id());",
          "",
          "[Added Lines]",
          "2086:     string url = srs_string_replace(output_, \"[stream]\", session_->sip_transport()->device_id());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp": [
          "File: trunk/src/app/srs_app_gb28181.hpp -> trunk/src/app/srs_app_gb28181.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: class SrsPackContext;",
          "27: class SrsBuffer;",
          "28: class SrsSipMessage;",
          "34: class SrsAlonePithyPrint;",
          "35: class SrsGbMuxer;",
          "36: class SrsSimpleRtmpClient;",
          "",
          "[Removed Lines]",
          "29: class SrsLazyGbSession;",
          "30: class SrsLazyGbSipTcpConn;",
          "31: class SrsLazyGbMediaTcpConn;",
          "32: class SrsLazyGbSipTcpReceiver;",
          "33: class SrsLazyGbSipTcpSender;",
          "",
          "[Added Lines]",
          "29: class SrsGbSession;",
          "30: class SrsGbSipTcpConn;",
          "31: class SrsGbMediaTcpConn;",
          "32: class SrsGbSipTcpReceiver;",
          "33: class SrsGbSipTcpSender;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: std::string srs_gb_sip_state(SrsGbSipState state);",
          "94: {",
          "95: private:",
          "97:     SrsContextId cid_;",
          "98: private:",
          "99:     SrsGbSessionState state_;",
          "103:     SrsGbMuxer* muxer_;",
          "104: private:",
          "",
          "[Removed Lines]",
          "93: class SrsLazyGbSession : public SrsLazyObject, public ISrsResource, public ISrsStartable, public ISrsCoroutineHandler",
          "96:     SrsCoroutine* trd_;",
          "100:     SrsLazyObjectWrapper<SrsLazyGbSession>* wrapper_root_;",
          "101:     SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* sip_;",
          "102:     SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* media_;",
          "",
          "[Added Lines]",
          "96: class SrsGbSession : public ISrsResource, public ISrsCoroutineHandler, public ISrsExecutorHandler",
          "100: private:",
          "102:     SrsSharedResource<SrsGbSession>* wrapper_;",
          "104:     ISrsInterruptable* owner_coroutine_;",
          "105:     ISrsContextIdSetter* owner_cid_;",
          "108:     SrsSharedResource<SrsGbSipTcpConn> sip_;",
          "109:     SrsSharedResource<SrsGbMediaTcpConn> media_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     uint64_t media_recovered_;",
          "133:     uint64_t media_msgs_dropped_;",
          "134:     uint64_t media_reserved_;",
          "138: public:",
          "140: public:",
          "144:     void on_ps_pack(SrsPackContext* ctx, SrsPsPacket* ps, const std::vector<SrsTsMessage*>& msgs);",
          "151:     std::string pip();",
          "156: public:",
          "157:     virtual srs_error_t cycle();",
          "",
          "[Removed Lines]",
          "135: private:",
          "136:     friend class SrsLazyObjectWrapper<SrsLazyGbSession>;",
          "137:     SrsLazyGbSession(SrsLazyObjectWrapper<SrsLazyGbSession>* wrapper_root);",
          "139:     virtual ~SrsLazyGbSession();",
          "142:     srs_error_t initialize(SrsConfDirective* conf);",
          "146:     void on_sip_transport(SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* sip);",
          "147:     SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* sip_transport();",
          "149:     void on_media_transport(SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* media);",
          "153: public:",
          "154:     virtual srs_error_t start();",
          "",
          "[Added Lines]",
          "143:     SrsGbSession();",
          "144:     virtual ~SrsGbSession();",
          "147:     void setup(SrsConfDirective* conf);",
          "149:     void setup_owner(SrsSharedResource<SrsGbSession>* wrapper, ISrsInterruptable* owner_coroutine, ISrsContextIdSetter* owner_cid);",
          "151: public:",
          "152:     virtual void on_executor_done(ISrsInterruptable* executor);",
          "153: public:",
          "157:     void on_sip_transport(SrsSharedResource<SrsGbSipTcpConn> sip);",
          "158:     SrsSharedResource<SrsGbSipTcpConn> sip_transport();",
          "160:     void on_media_transport(SrsSharedResource<SrsGbMediaTcpConn> media);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186: };",
          "190: {",
          "191: private:",
          "192:     SrsGbSipState state_;",
          "195:     SrsSipMessage* register_;",
          "196:     SrsSipMessage* invite_ok_;",
          "197: private:",
          "",
          "[Removed Lines]",
          "189: class SrsLazyGbSipTcpConn : public SrsLazyObject, public ISrsResource, public ISrsStartable, public ISrsCoroutineHandler",
          "193:     SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* wrapper_root_;",
          "194:     SrsLazyObjectWrapper<SrsLazyGbSession>* session_;",
          "",
          "[Added Lines]",
          "197: class SrsGbSipTcpConn : public ISrsResource, public ISrsCoroutineHandler, public ISrsExecutorHandler",
          "202:     SrsGbSession* session_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202:     SrsTcpListener* sip_listener_;",
          "203:     SrsTcpListener* media_listener_;",
          "204: private:",
          "209: private:",
          "212: public:",
          "214: public:",
          "216:     void setup(SrsConfDirective* conf, SrsTcpListener* sip, SrsTcpListener* media, srs_netfd_t stfd);",
          "218:     std::string device_id();",
          "",
          "[Removed Lines]",
          "205:     SrsTcpConnection* conn_;",
          "206:     SrsLazyGbSipTcpReceiver* receiver_;",
          "207:     SrsLazyGbSipTcpSender* sender_;",
          "208:     SrsCoroutine* trd_;",
          "210:     friend class SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>;",
          "211:     SrsLazyGbSipTcpConn(SrsLazyObjectWrapper<SrsLazyGbSipTcpConn>* wrapper_root);",
          "213:     virtual ~SrsLazyGbSipTcpConn();",
          "",
          "[Added Lines]",
          "214:     SrsSharedResource<SrsGbSipTcpConn>* wrapper_;",
          "216:     ISrsInterruptable* owner_coroutine_;",
          "217:     ISrsContextIdSetter* owner_cid_;",
          "218:     SrsContextId cid_;",
          "220:     SrsTcpConnection* conn_;",
          "221:     SrsGbSipTcpReceiver* receiver_;",
          "222:     SrsGbSipTcpSender* sender_;",
          "224:     SrsGbSipTcpConn();",
          "225:     virtual ~SrsGbSipTcpConn();",
          "230:     void setup_owner(SrsSharedResource<SrsGbSipTcpConn>* wrapper, ISrsInterruptable* owner_coroutine, ISrsContextIdSetter* owner_cid);",
          "232: public:",
          "233:     virtual void on_executor_done(ISrsInterruptable* executor);",
          "234: public:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253: public:",
          "254:     virtual const SrsContextId& get_id();",
          "255:     virtual std::string desc();",
          "260: public:",
          "261:     virtual srs_error_t cycle();",
          "262: private:",
          "264: private:",
          "267: };",
          "271: {",
          "272: private:",
          "273:     SrsCoroutine* trd_;",
          "274:     SrsTcpConnection* conn_;",
          "276: public:",
          "279: public:",
          "281:     void interrupt();",
          "",
          "[Removed Lines]",
          "257: public:",
          "258:     virtual srs_error_t start();",
          "263:     virtual srs_error_t do_cycle();",
          "266:     srs_error_t bind_session(SrsSipMessage* msg, SrsLazyObjectWrapper<SrsLazyGbSession>** psession);",
          "270: class SrsLazyGbSipTcpReceiver : public ISrsStartable, public ISrsCoroutineHandler",
          "275:     SrsLazyGbSipTcpConn* sip_;",
          "277:     SrsLazyGbSipTcpReceiver(SrsLazyGbSipTcpConn* sip, SrsTcpConnection* conn);",
          "278:     virtual ~SrsLazyGbSipTcpReceiver();",
          "",
          "[Added Lines]",
          "278:     srs_error_t do_cycle();",
          "281:     srs_error_t bind_session(SrsSipMessage* msg, SrsGbSession** psession);",
          "285: class SrsGbSipTcpReceiver : public ISrsStartable, public ISrsCoroutineHandler",
          "290:     SrsGbSipTcpConn* sip_;",
          "292:     SrsGbSipTcpReceiver(SrsGbSipTcpConn* sip, SrsTcpConnection* conn);",
          "293:     virtual ~SrsGbSipTcpReceiver();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "292: };",
          "296: {",
          "297: private:",
          "298:     SrsCoroutine* trd_;",
          "",
          "[Removed Lines]",
          "295: class SrsLazyGbSipTcpSender : public ISrsStartable, public ISrsCoroutineHandler",
          "",
          "[Added Lines]",
          "310: class SrsGbSipTcpSender : public ISrsStartable, public ISrsCoroutineHandler",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "301:     std::vector<SrsSipMessage*> msgs_;",
          "302:     srs_cond_t wait_;",
          "303: public:",
          "306: public:",
          "308:     void enqueue(SrsSipMessage* msg);",
          "",
          "[Removed Lines]",
          "304:     SrsLazyGbSipTcpSender(SrsTcpConnection* conn);",
          "305:     virtual ~SrsLazyGbSipTcpSender();",
          "",
          "[Added Lines]",
          "319:     SrsGbSipTcpSender(SrsTcpConnection* conn);",
          "320:     virtual ~SrsGbSipTcpSender();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "333: };",
          "338: {",
          "339: private:",
          "340:     bool connected_;",
          "343:     uint32_t nn_rtcp_;",
          "344: private:",
          "345:     SrsPackContext* pack_;",
          "346:     SrsTcpConnection* conn_;",
          "348:     uint8_t* buffer_;",
          "352: public:",
          "354: public:",
          "356:     void setup(srs_netfd_t stfd);",
          "358:     bool is_connected();",
          "",
          "[Removed Lines]",
          "336: class SrsLazyGbMediaTcpConn : public SrsLazyObject, public ISrsResource, public ISrsStartable, public ISrsCoroutineHandler",
          "337:     , public ISrsPsPackHandler",
          "341:     SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* wrapper_root_;",
          "342:     SrsLazyObjectWrapper<SrsLazyGbSession>* session_;",
          "347:     SrsCoroutine* trd_;",
          "349: private:",
          "350:     friend class SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>;",
          "351:     SrsLazyGbMediaTcpConn(SrsLazyObjectWrapper<SrsLazyGbMediaTcpConn>* wrapper_root);",
          "353:     virtual ~SrsLazyGbMediaTcpConn();",
          "",
          "[Added Lines]",
          "351: class SrsGbMediaTcpConn : public ISrsResource, public ISrsCoroutineHandler, public ISrsPsPackHandler, public ISrsExecutorHandler",
          "356:     SrsGbSession* session_;",
          "358: private:",
          "360:     SrsSharedResource<SrsGbMediaTcpConn>* wrapper_;",
          "362:     ISrsInterruptable* owner_coroutine_;",
          "363:     ISrsContextIdSetter* owner_cid_;",
          "364:     SrsContextId cid_;",
          "370:     SrsGbMediaTcpConn();",
          "371:     virtual ~SrsGbMediaTcpConn();",
          "376:     void setup_owner(SrsSharedResource<SrsGbMediaTcpConn>* wrapper, ISrsInterruptable* owner_coroutine, ISrsContextIdSetter* owner_cid);",
          "378: public:",
          "379:     virtual void on_executor_done(ISrsInterruptable* executor);",
          "380: public:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "364: public:",
          "365:     virtual const SrsContextId& get_id();",
          "366:     virtual std::string desc();",
          "371: public:",
          "372:     virtual srs_error_t cycle();",
          "",
          "[Removed Lines]",
          "368: public:",
          "369:     virtual srs_error_t start();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "377:     virtual srs_error_t on_ps_pack(SrsPsPacket* ps, const std::vector<SrsTsMessage*>& msgs);",
          "378: private:",
          "381: };",
          "",
          "[Removed Lines]",
          "380:     srs_error_t bind_session(uint32_t ssrc, SrsLazyObjectWrapper<SrsLazyGbSession>** psession);",
          "",
          "[Added Lines]",
          "401:     srs_error_t bind_session(uint32_t ssrc, SrsGbSession** psession);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "402: class SrsGbMuxer",
          "403: {",
          "404: private:",
          "406:     std::string output_;",
          "407:     SrsSimpleRtmpClient* sdk_;",
          "408: private:",
          "",
          "[Removed Lines]",
          "405:     SrsLazyGbSession* session_;",
          "",
          "[Added Lines]",
          "427:     SrsGbSession* session_;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "428:     SrsMpegpsQueue* queue_;",
          "429:     SrsPithyPrint* pprint_;",
          "430: public:",
          "432:     virtual ~SrsGbMuxer();",
          "433: public:",
          "435:     srs_error_t on_ts_message(SrsTsMessage* msg);",
          "436: private:",
          "437:     virtual srs_error_t on_ts_video(SrsTsMessage* msg, SrsBuffer* avs);",
          "",
          "[Removed Lines]",
          "431:     SrsGbMuxer(SrsLazyGbSession* session);",
          "434:     srs_error_t initialize(std::string output);",
          "",
          "[Added Lines]",
          "453:     SrsGbMuxer(SrsGbSession* session);",
          "456:     void setup(std::string output);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1369:     }",
          "1370: #endif",
          "1377:     return err;",
          "1378: }",
          "",
          "[Removed Lines]",
          "1372:     SrsLazySweepGc* gc = dynamic_cast<SrsLazySweepGc*>(_srs_gc);",
          "1373:     if ((err = gc->start()) != srs_success) {",
          "1374:         return srs_error_wrap(err, \"start gc\");",
          "1375:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_st.cpp||trunk/src/app/srs_app_st.cpp": [
          "File: trunk/src/app/srs_app_st.cpp -> trunk/src/app/srs_app_st.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: {",
          "31: }",
          "33: SrsCoroutine::SrsCoroutine()",
          "34: {",
          "35: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: ISrsInterruptable::ISrsInterruptable()",
          "34: {",
          "35: }",
          "37: ISrsInterruptable::~ISrsInterruptable()",
          "38: {",
          "39: }",
          "41: ISrsContextIdSetter::ISrsContextIdSetter()",
          "42: {",
          "43: }",
          "45: ISrsContextIdSetter::~ISrsContextIdSetter()",
          "46: {",
          "47: }",
          "49: ISrsContextIdGetter::ISrsContextIdGetter()",
          "50: {",
          "51: }",
          "53: ISrsContextIdGetter::~ISrsContextIdGetter()",
          "54: {",
          "55: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:     }",
          "343: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: ISrsExecutorHandler::ISrsExecutorHandler()",
          "370: {",
          "371: }",
          "373: ISrsExecutorHandler::~ISrsExecutorHandler()",
          "374: {",
          "375: }",
          "377: SrsExecutorCoroutine::SrsExecutorCoroutine(ISrsResourceManager* m, ISrsResource* r, ISrsCoroutineHandler* h, ISrsExecutorHandler* cb)",
          "378: {",
          "379:     resource_ = r;",
          "380:     handler_ = h;",
          "381:     manager_ = m;",
          "382:     callback_ = cb;",
          "383:     trd_ = new SrsSTCoroutine(\"ar\", this, resource_->get_id());",
          "384: }",
          "386: SrsExecutorCoroutine::~SrsExecutorCoroutine()",
          "387: {",
          "388:     manager_->remove(resource_);",
          "389:     srs_freep(trd_);",
          "390: }",
          "392: srs_error_t SrsExecutorCoroutine::start()",
          "393: {",
          "394:     return trd_->start();",
          "395: }",
          "397: void SrsExecutorCoroutine::interrupt()",
          "398: {",
          "399:     trd_->interrupt();",
          "400: }",
          "402: srs_error_t SrsExecutorCoroutine::pull()",
          "403: {",
          "404:     return trd_->pull();",
          "405: }",
          "407: const SrsContextId& SrsExecutorCoroutine::cid()",
          "408: {",
          "409:     return trd_->cid();",
          "410: }",
          "412: void SrsExecutorCoroutine::set_cid(const SrsContextId& cid)",
          "413: {",
          "414:     trd_->set_cid(cid);",
          "415: }",
          "417: srs_error_t SrsExecutorCoroutine::cycle()",
          "418: {",
          "419:     srs_error_t err = handler_->cycle();",
          "420:     if (callback_) callback_->on_executor_done(this);",
          "421:     manager_->remove(this);",
          "422:     return err;",
          "423: }",
          "425: const SrsContextId& SrsExecutorCoroutine::get_id()",
          "426: {",
          "427:     return resource_->get_id();",
          "428: }",
          "430: std::string SrsExecutorCoroutine::desc()",
          "431: {",
          "432:     return resource_->desc();",
          "433: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_st.hpp||trunk/src/app/srs_app_st.hpp": [
          "File: trunk/src/app/srs_app_st.hpp -> trunk/src/app/srs_app_st.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <srs_kernel_error.hpp>",
          "16: #include <srs_protocol_st.hpp>",
          "17: #include <srs_protocol_io.hpp>",
          "19: class SrsFastCoroutine;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <srs_protocol_conn.hpp>",
          "21: class SrsExecutorCoroutine;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     virtual srs_error_t start() = 0;",
          "65: };",
          "69: {",
          "70: public:",
          "73: public:",
          "75:     virtual void interrupt() = 0;",
          "78:     virtual srs_error_t pull() = 0;",
          "81:     virtual void set_cid(const SrsContextId& cid) = 0;",
          "82: };",
          "86: class SrsDummyCoroutine : public SrsCoroutine",
          "",
          "[Removed Lines]",
          "68: class SrsCoroutine : public ISrsStartable",
          "71:     SrsCoroutine();",
          "72:     virtual ~SrsCoroutine();",
          "74:     virtual void stop() = 0;",
          "80:     virtual const SrsContextId& cid() = 0;",
          "",
          "[Added Lines]",
          "70: class ISrsInterruptable",
          "73:     ISrsInterruptable();",
          "74:     virtual ~ISrsInterruptable();",
          "78: };",
          "81: class ISrsContextIdSetter",
          "82: {",
          "83: public:",
          "84:     ISrsContextIdSetter();",
          "85:     virtual ~ISrsContextIdSetter();",
          "86: public:",
          "91: class ISrsContextIdGetter",
          "92: {",
          "93: public:",
          "94:     ISrsContextIdGetter();",
          "95:     virtual ~ISrsContextIdGetter();",
          "96: public:",
          "97:     virtual const SrsContextId& cid() = 0;",
          "98: };",
          "101: class SrsCoroutine : public ISrsStartable, public ISrsInterruptable",
          "102:     , public ISrsContextIdSetter, public ISrsContextIdGetter",
          "103: {",
          "104: public:",
          "105:     SrsCoroutine();",
          "106:     virtual ~SrsCoroutine();",
          "107: public:",
          "108:     virtual void stop() = 0;",
          "109: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:     void add(int n);",
          "208:     void done();",
          "210:     void wait();",
          "211: };",
          "213: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: class ISrsExecutorHandler",
          "242: {",
          "243: public:",
          "244:     ISrsExecutorHandler();",
          "245:     virtual ~ISrsExecutorHandler();",
          "246: public:",
          "247:     virtual void on_executor_done(ISrsInterruptable* executor) = 0;",
          "248: };",
          "270: class SrsExecutorCoroutine : public ISrsResource, public ISrsStartable, public ISrsInterruptable",
          "271:     , public ISrsContextIdSetter, public ISrsContextIdGetter, public ISrsCoroutineHandler",
          "272: {",
          "273: private:",
          "274:     ISrsResourceManager* manager_;",
          "275:     ISrsResource* resource_;",
          "276:     ISrsCoroutineHandler* handler_;",
          "277:     ISrsExecutorHandler* callback_;",
          "278: private:",
          "279:     SrsCoroutine* trd_;",
          "280: public:",
          "281:     SrsExecutorCoroutine(ISrsResourceManager* m, ISrsResource* r, ISrsCoroutineHandler* h, ISrsExecutorHandler* cb);",
          "282:     virtual ~SrsExecutorCoroutine();",
          "284: public:",
          "285:     virtual srs_error_t start();",
          "287: public:",
          "288:     virtual void interrupt();",
          "289:     virtual srs_error_t pull();",
          "291: public:",
          "292:     virtual const SrsContextId& cid();",
          "293:     virtual void set_cid(const SrsContextId& cid);",
          "295: public:",
          "296:     virtual srs_error_t cycle();",
          "298: public:",
          "299:     virtual const SrsContextId& get_id();",
          "300:     virtual std::string desc();",
          "301: };",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_threads.cpp||trunk/src/app/srs_app_threads.cpp": [
          "File: trunk/src/app/srs_app_threads.cpp -> trunk/src/app/srs_app_threads.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "335: #ifdef SRS_GB28181",
          "336:     _srs_gb_manager = new SrsResourceManager(\"GB\", true);",
          "337: #endif",
          "341:     _srs_pps_ids = new SrsPps();",
          "",
          "[Removed Lines]",
          "338:     _srs_gc = new SrsLazySweepGc();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_autofree.hpp||trunk/src/core/srs_core_autofree.hpp": [
          "File: trunk/src/core/srs_core_autofree.hpp -> trunk/src/core/srs_core_autofree.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     }",
          "82: };",
          "84: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: template<class T>",
          "92: class SrsSharedPtr",
          "93: {",
          "94: private:",
          "96:     T* ptr_;",
          "98:     uint32_t* ref_count_;",
          "99: public:",
          "101:     SrsSharedPtr(T* ptr) {",
          "102:         ptr_ = ptr;",
          "103:         ref_count_ = new uint32_t(1);",
          "104:     }",
          "106:     SrsSharedPtr(const SrsSharedPtr<T>& cp) {",
          "107:         copy(cp);",
          "108:     }",
          "110:     virtual ~SrsSharedPtr() {",
          "111:         reset();",
          "112:     }",
          "113: private:",
          "115:     void reset() {",
          "116:         if (!ref_count_) return;",
          "118:         (*ref_count_)--;",
          "119:         if (*ref_count_ == 0) {",
          "120:             delete ptr_;",
          "121:             delete ref_count_;",
          "122:         }",
          "124:         ptr_ = NULL;",
          "125:         ref_count_ = NULL;",
          "126:     }",
          "128:     void copy(const SrsSharedPtr<T>& cp) {",
          "129:         ptr_ = cp.ptr_;",
          "130:         ref_count_ = cp.ref_count_;",
          "131:         if (ref_count_) (*ref_count_)++;",
          "132:     }",
          "134:     void move(SrsSharedPtr<T>& cp) {",
          "135:         ptr_ = cp.ptr_;",
          "136:         ref_count_ = cp.ref_count_;",
          "137:         cp.ptr_ = NULL;",
          "138:         cp.ref_count_ = NULL;",
          "139:     }",
          "140: public:",
          "142:     T* get() {",
          "143:         return ptr_;",
          "144:     }",
          "146:     T* operator->() {",
          "147:         return ptr_;",
          "148:     }",
          "150:     SrsSharedPtr<T>& operator=(const SrsSharedPtr<T>& cp) {",
          "151:         if (this != &cp) {",
          "152:             reset();",
          "153:             copy(cp);",
          "154:         }",
          "155:         return *this;",
          "156:     }",
          "157: private:",
          "159:     T& operator*() {",
          "160:         return *ptr_;",
          "161:     }",
          "163:     operator bool() const {",
          "164:         return ptr_ != NULL;",
          "165:     }",
          "166: #if __cplusplus >= 201103L // C++11",
          "167: public:",
          "169:     SrsSharedPtr(SrsSharedPtr<T>&& cp) {",
          "170:         move(cp);",
          "171:     };",
          "173:     SrsSharedPtr<T>& operator=(SrsSharedPtr<T>&& cp) {",
          "174:         if (this != &cp) {",
          "175:             reset();",
          "176:             move(cp);",
          "177:         }",
          "178:         return *this;",
          "179:     };",
          "180: #endif",
          "181: };",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    125",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    126",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_conn.cpp||trunk/src/protocol/srs_protocol_conn.cpp": [
          "File: trunk/src/protocol/srs_protocol_conn.cpp -> trunk/src/protocol/srs_protocol_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: {",
          "41: }",
          "",
          "[Removed Lines]",
          "43: SrsLazyObject::SrsLazyObject()",
          "44: {",
          "45:     gc_ref_ = 0;",
          "46: }",
          "48: SrsLazyObject::~SrsLazyObject()",
          "49: {",
          "50: }",
          "52: void SrsLazyObject::gc_use()",
          "53: {",
          "54:     gc_ref_++;",
          "55: }",
          "57: void SrsLazyObject::gc_dispose()",
          "58: {",
          "59:     gc_ref_--;",
          "60: }",
          "62: int32_t SrsLazyObject::gc_ref()",
          "63: {",
          "64:     return gc_ref_;",
          "65: }",
          "67: ISrsLazyGc::ISrsLazyGc()",
          "68: {",
          "69: }",
          "71: ISrsLazyGc::~ISrsLazyGc()",
          "72: {",
          "73: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_conn.hpp||trunk/src/protocol/srs_protocol_conn.hpp": [
          "File: trunk/src/protocol/srs_protocol_conn.hpp -> trunk/src/protocol/srs_protocol_conn.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     virtual std::string remote_ip() = 0;",
          "49: };",
          "82: #endif",
          "",
          "[Removed Lines]",
          "53: class SrsLazyObject",
          "54: {",
          "55: private:",
          "57:     int32_t gc_ref_;",
          "58: public:",
          "59:     SrsLazyObject();",
          "60:     virtual ~SrsLazyObject();",
          "61: public:",
          "63:     virtual void gc_use();",
          "65:     virtual void gc_dispose();",
          "67:     virtual int32_t gc_ref();",
          "68: };",
          "72: class ISrsLazyGc",
          "73: {",
          "74: public:",
          "75:     ISrsLazyGc();",
          "76:     virtual ~ISrsLazyGc();",
          "77: public:",
          "79:     virtual void remove(SrsLazyObject* c) = 0;",
          "80: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_core.cpp||trunk/src/utest/srs_utest_core.cpp": [
          "File: trunk/src/utest/srs_utest_core.cpp -> trunk/src/utest/srs_utest_core.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: using namespace std;",
          "10: #include <srs_core_autofree.hpp>",
          "12: VOID TEST(CoreAutoFreeTest, Free)",
          "13: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <srs_protocol_conn.hpp>",
          "12: #include <srs_app_conn.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     }",
          "87: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: VOID TEST(CoreLogger, SharedPtrTypical)",
          "92: {",
          "93:     if (true) {",
          "94:         SrsSharedPtr<int> p(new int(100));",
          "95:         EXPECT_TRUE(p);",
          "96:         EXPECT_EQ(100, *p);",
          "97:     }",
          "99:     if (true) {",
          "100:         SrsSharedPtr<int> p(new int(100));",
          "101:         SrsSharedPtr<int> q = p;",
          "102:         EXPECT_EQ(p.get(), q.get());",
          "103:     }",
          "105:     if (true) {",
          "106:         SrsSharedPtr<int> p(new int(100));",
          "107:         SrsSharedPtr<int> q(p);",
          "108:         EXPECT_EQ(p.get(), q.get());",
          "109:     }",
          "111:     if (true) {",
          "112:         SrsSharedPtr<int> p(new int(100));",
          "113:         SrsSharedPtr<int> q = p;",
          "114:         EXPECT_TRUE(p);",
          "115:         EXPECT_TRUE(q);",
          "116:         EXPECT_EQ(100, *p);",
          "117:         EXPECT_EQ(100, *q);",
          "118:     }",
          "119: }",
          "121: VOID TEST(CoreLogger, SharedPtrReset)",
          "122: {",
          "123:     if (true) {",
          "124:         SrsSharedPtr<int> p(new int(100));",
          "125:         SrsSharedPtr<int> q = p;",
          "126:         p.reset();",
          "127:         EXPECT_FALSE(p);",
          "128:         EXPECT_TRUE(q);",
          "129:         EXPECT_EQ(100, *q);",
          "130:     }",
          "132:     if (true) {",
          "133:         SrsSharedPtr<int> p(new int(100));",
          "134:         SrsSharedPtr<int> q = p;",
          "135:         q.reset();",
          "136:         EXPECT_TRUE(p);",
          "137:         EXPECT_FALSE(q);",
          "138:         EXPECT_EQ(100, *p);",
          "139:     }",
          "140: }",
          "142: VOID TEST(CoreLogger, SharedPtrObject)",
          "143: {",
          "144:     SrsSharedPtr<MyNormalObject> p(new MyNormalObject(100));",
          "145:     EXPECT_TRUE(p);",
          "146:     EXPECT_EQ(100, p->id());",
          "147: }",
          "149: VOID TEST(CoreLogger, SharedPtrNullptr)",
          "150: {",
          "151:     SrsSharedPtr<int> p(NULL);",
          "152:     EXPECT_FALSE(p);",
          "154:     p.reset();",
          "155:     EXPECT_FALSE(p);",
          "157:     SrsSharedPtr<int> q = p;",
          "158:     EXPECT_FALSE(q);",
          "159: }",
          "161: class MockWrapper",
          "162: {",
          "163: public:",
          "164:     int* ptr;",
          "165: public:",
          "166:     MockWrapper(int* p) {",
          "167:         ptr = p;",
          "169:     }",
          "170:     ~MockWrapper() {",
          "172:     }",
          "173: };",
          "175: VOID TEST(CoreLogger, SharedPtrWrapper)",
          "176: {",
          "177:     int* ptr = new int(100);",
          "178:     SrsAutoFree(int, ptr);",
          "179:     EXPECT_EQ(100, *ptr);",
          "181:     if (true) {",
          "182:         SrsSharedPtr<MockWrapper> p(new MockWrapper(ptr));",
          "183:         EXPECT_EQ(101, *ptr);",
          "184:         EXPECT_EQ(101, *p->ptr);",
          "186:         SrsSharedPtr<MockWrapper> q = p;",
          "187:         EXPECT_EQ(101, *ptr);",
          "188:         EXPECT_EQ(101, *p->ptr);",
          "189:         EXPECT_EQ(101, *q->ptr);",
          "191:         SrsSharedPtr<MockWrapper> r(new MockWrapper(ptr));",
          "192:         EXPECT_EQ(102, *ptr);",
          "193:         EXPECT_EQ(102, *p->ptr);",
          "194:         EXPECT_EQ(102, *q->ptr);",
          "195:         EXPECT_EQ(102, *r->ptr);",
          "197:         SrsSharedPtr<MockWrapper> s(new MockWrapper(ptr));",
          "198:         EXPECT_EQ(103, *ptr);",
          "199:         EXPECT_EQ(103, *p->ptr);",
          "200:         EXPECT_EQ(103, *q->ptr);",
          "201:         EXPECT_EQ(103, *r->ptr);",
          "202:         EXPECT_EQ(103, *s->ptr);",
          "203:     }",
          "204:     EXPECT_EQ(100, *ptr);",
          "206:     if (true) {",
          "207:         SrsSharedPtr<MockWrapper> p(new MockWrapper(ptr));",
          "208:         EXPECT_EQ(101, *ptr);",
          "209:         EXPECT_EQ(101, *p->ptr);",
          "210:     }",
          "211:     EXPECT_EQ(100, *ptr);",
          "212: }",
          "214: VOID TEST(CoreLogger, SharedPtrAssign)",
          "215: {",
          "216:     if (true) {",
          "217:         SrsSharedPtr<int> p(new int(100));",
          "218:         SrsSharedPtr<int> q(NULL);",
          "219:         q = p;",
          "220:         EXPECT_EQ(p.get(), q.get());",
          "221:     }",
          "223:     if (true) {",
          "224:         SrsSharedPtr<int> p(new int(100));",
          "225:         SrsSharedPtr<int> q(new int(101));",
          "227:         int* q0 = q.get();",
          "228:         q = p;",
          "229:         EXPECT_EQ(p.get(), q.get());",
          "230:         EXPECT_NE(q0, q.get());",
          "231:     }",
          "233:     int* ptr0 = new int(100);",
          "234:     SrsAutoFree(int, ptr0);",
          "235:     EXPECT_EQ(100, *ptr0);",
          "237:     int* ptr1 = new int(200);",
          "238:     SrsAutoFree(int, ptr1);",
          "239:     EXPECT_EQ(200, *ptr1);",
          "241:     if (true) {",
          "242:         SrsSharedPtr<MockWrapper> p(new MockWrapper(ptr0));",
          "243:         EXPECT_EQ(101, *ptr0);",
          "244:         EXPECT_EQ(101, *p->ptr);",
          "246:         SrsSharedPtr<MockWrapper> q(new MockWrapper(ptr1));",
          "247:         EXPECT_EQ(201, *ptr1);",
          "248:         EXPECT_EQ(201, *q->ptr);",
          "250:         q = p;",
          "251:         EXPECT_EQ(200, *ptr1);",
          "252:         EXPECT_EQ(101, *ptr0);",
          "253:         EXPECT_EQ(101, *p->ptr);",
          "254:         EXPECT_EQ(101, *q->ptr);",
          "255:     }",
          "257:     EXPECT_EQ(100, *ptr0);",
          "258:     EXPECT_EQ(200, *ptr1);",
          "259: }",
          "261: template<typename T>",
          "262: SrsSharedPtr<T> mock_shared_ptr_move_assign(SrsSharedPtr<T> p) {",
          "263:     SrsSharedPtr<T> q = p;",
          "264:     return q;",
          "265: }",
          "267: template<typename T>",
          "268: SrsSharedPtr<T> mock_shared_ptr_move_ctr(SrsSharedPtr<T> p) {",
          "269:     return p;",
          "270: }",
          "272: VOID TEST(CoreLogger, SharedPtrMove)",
          "273: {",
          "274:     if (true) {",
          "275:         SrsSharedPtr<int> p(new int(100));",
          "276:         SrsSharedPtr<int> q(new int(101));",
          "277:         q = mock_shared_ptr_move_ctr(p);",
          "278:         EXPECT_EQ(q.get(), p.get());",
          "279:     }",
          "281:     if (true) {",
          "282:         SrsSharedPtr<int> p(new int(100));",
          "283:         SrsSharedPtr<int> q(new int(101));",
          "284:         q = mock_shared_ptr_move_assign(p);",
          "285:         EXPECT_EQ(q.get(), p.get());",
          "286:     }",
          "288:     int* ptr = new int(100);",
          "289:     SrsAutoFree(int, ptr);",
          "290:     EXPECT_EQ(100, *ptr);",
          "292:     if (true) {",
          "293:         SrsSharedPtr<MockWrapper> p(new MockWrapper(ptr));",
          "294:         EXPECT_EQ(101, *ptr);",
          "295:         EXPECT_EQ(101, *p->ptr);",
          "297:         SrsSharedPtr<MockWrapper> q(new MockWrapper(ptr));",
          "298:         q = mock_shared_ptr_move_ctr(p);",
          "299:         EXPECT_EQ(101, *ptr);",
          "300:         EXPECT_EQ(101, *q->ptr);",
          "301:     }",
          "302:     EXPECT_EQ(100, *ptr);",
          "304:     if (true) {",
          "305:         SrsSharedPtr<MockWrapper> p(new MockWrapper(ptr));",
          "306:         EXPECT_EQ(101, *ptr);",
          "307:         EXPECT_EQ(101, *p->ptr);",
          "309:         SrsSharedPtr<MockWrapper> q(new MockWrapper(ptr));",
          "310:         q = mock_shared_ptr_move_assign(p);",
          "311:         EXPECT_EQ(101, *ptr);",
          "312:         EXPECT_EQ(101, *q->ptr);",
          "313:     }",
          "314:     EXPECT_EQ(100, *ptr);",
          "317:     if (true) {",
          "318:         SrsSharedPtr<int> p(new int(100));",
          "319:         SrsSharedPtr<int> q = mock_shared_ptr_move_assign(p);",
          "320:         EXPECT_EQ(q.get(), p.get());",
          "321:     }",
          "324:     if (true) {",
          "325:         SrsSharedPtr<int> p = SrsSharedPtr<int>(new int(100));",
          "326:         EXPECT_TRUE(p);",
          "327:         EXPECT_EQ(100, *p);",
          "328:     }",
          "329: }",
          "331: class MockIntResource : public ISrsResource",
          "332: {",
          "333: public:",
          "334:     SrsContextId id_;",
          "335:     int value_;",
          "336: public:",
          "337:     MockIntResource(int value) : value_(value) {",
          "338:     }",
          "339:     virtual ~MockIntResource() {",
          "340:     }",
          "341: public:",
          "342:     virtual const SrsContextId& get_id() {",
          "343:         return id_;",
          "344:     }",
          "345:     virtual std::string desc() {",
          "346:         return id_.c_str();",
          "347:     }",
          "348: };",
          "350: VOID TEST(CoreLogger, SharedResourceTypical)",
          "351: {",
          "352:     if (true) {",
          "353:         SrsSharedResource<MockIntResource>* p = new SrsSharedResource<MockIntResource>(new MockIntResource(100));",
          "354:         EXPECT_TRUE(*p);",
          "355:         EXPECT_EQ(100, (*p)->value_);",
          "356:         srs_freep(p);",
          "357:     }",
          "359:     if (true) {",
          "360:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "361:         EXPECT_TRUE(p);",
          "362:         EXPECT_EQ(100, p->value_);",
          "363:     }",
          "365:     if (true) {",
          "366:         SrsSharedResource<MockIntResource> p = SrsSharedResource<MockIntResource>(new MockIntResource(100));",
          "367:         EXPECT_TRUE(p);",
          "368:         EXPECT_EQ(100, p->value_);",
          "369:     }",
          "371:     if (true) {",
          "372:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "373:         SrsSharedResource<MockIntResource> q = p;",
          "374:         EXPECT_EQ(p.get(), q.get());",
          "375:     }",
          "377:     if (true) {",
          "378:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "379:         SrsSharedResource<MockIntResource> q(NULL);",
          "380:         q = p;",
          "381:         EXPECT_EQ(p.get(), q.get());",
          "382:     }",
          "384:     if (true) {",
          "385:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "386:         SrsSharedResource<MockIntResource> q(new MockIntResource(200));",
          "387:         q = p;",
          "388:         EXPECT_EQ(p.get(), q.get());",
          "389:     }",
          "391:     if (true) {",
          "392:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "393:         SrsSharedResource<MockIntResource> q = p;",
          "394:         EXPECT_TRUE(p);",
          "395:         EXPECT_TRUE(q);",
          "396:         EXPECT_EQ(100, p->value_);",
          "397:         EXPECT_EQ(100, q->value_);",
          "398:     }",
          "399: }",
          "401: template<typename T>",
          "402: SrsSharedResource<T> mock_shared_resource_move_assign(SrsSharedResource<T> p) {",
          "403:     SrsSharedResource<T> q = p;",
          "404:     return q;",
          "405: }",
          "407: template<typename T>",
          "408: SrsSharedResource<T> mock_shared_resource_move_ctr(SrsSharedResource<T> p) {",
          "409:     return p;",
          "410: }",
          "412: VOID TEST(CoreLogger, SharedResourceMove)",
          "413: {",
          "414:     if (true) {",
          "415:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "416:         SrsSharedResource<MockIntResource> q(new MockIntResource(101));",
          "417:         q = mock_shared_resource_move_ctr(p);",
          "418:         EXPECT_EQ(100, q->value_);",
          "419:         EXPECT_EQ(q.get(), p.get());",
          "420:     }",
          "422:     if (true) {",
          "423:         SrsSharedResource<MockIntResource> p(new MockIntResource(100));",
          "424:         SrsSharedResource<MockIntResource> q(new MockIntResource(101));",
          "425:         q = mock_shared_resource_move_assign(p);",
          "426:         EXPECT_EQ(100, q->value_);",
          "427:         EXPECT_EQ(q.get(), p.get());",
          "428:     }",
          "429: }",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_core.hpp||trunk/src/utest/srs_utest_core.hpp": [
          "File: trunk/src/utest/srs_utest_core.hpp -> trunk/src/utest/srs_utest_core.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <string>",
          "17: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: class MyNormalObject",
          "18: {",
          "19: private:",
          "20:     int id_;",
          "21: public:",
          "22:     MyNormalObject(int id) {",
          "23:         id_ = id;",
          "24:     }",
          "25:     int id() {",
          "26:         return id_;",
          "27:     }",
          "28: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "364bec264e3ecda3483aaff6c47afaa2d82fc754",
      "candidate_info": {
        "commit_hash": "364bec264e3ecda3483aaff6c47afaa2d82fc754",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/364bec264e3ecda3483aaff6c47afaa2d82fc754",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/research/players/js/srs.sdk.js",
          "trunk/research/players/whip.html",
          "trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "RTC2RTMP: Fix screen sharing stutter caused by packet loss. v6.0.157 (#4160)\n\n1. Refer this commit, which contains the web demo to capture screen as\nvideo stream through RTC.\n2. Copy the `trunk/research/players/whip.html` and\n`trunk/research/players/js/srs.sdk.js` to replace the `develop` branch\nsource code.\n3. `./configure && make`\n4. `./objs/srs -c conf/rtc2rtmp.conf`\n5. open `http://localhost:8080/players/whip.html?schema=http`\n6. check `Screen` radio option.\n7. click `publish`, then check the screen to share.\n8. play the rtmp live stream: `rtmp://localhost/live/livestream`\n9. check the video stuttering.\n\nWhen capture screen by the chrome web browser, which send RTP packet\nwith empty payload frequently, then all the cached RTP packets are\ndropped before next key frame arrive in this case.\n\nThe OBS screen stream and camera stream do not have such problem.\n\n><img width=\"581\" alt=\"Screenshot 2024-08-28 at 2 49 46\u202fPM\"\nsrc=\"https://github.com/user-attachments/assets/9557dbd2-c799-4dfd-b336-5bbf2e4f8fb8\">\n\n---------\n\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/research/players/js/srs.sdk.js||trunk/research/players/js/srs.sdk.js",
          "trunk/research/players/whip.html||trunk/research/players/whip.html",
          "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/research/players/js/srs.sdk.js||trunk/research/players/js/srs.sdk.js": [
          "File: trunk/research/players/js/srs.sdk.js -> trunk/research/players/js/srs.sdk.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:     self.publish = async function (url, options) {",
          "533:         if (url.indexOf('/whip/') === -1) throw new Error(`invalid WHIP url ${url}`);",
          "537:             self.pc.addTransceiver(\"audio\", {direction: \"sendonly\"});",
          "538:         } else {",
          "539:             self.constraints.audio = false;",
          "540:         }",
          "543:             self.pc.addTransceiver(\"video\", {direction: \"sendonly\"});",
          "545:             self.constraints.video = false;",
          "546:         }",
          "548:         if (!navigator.mediaDevices && window.location.protocol === 'http:' && window.location.hostname !== 'localhost') {",
          "549:             throw new SrsError('HttpsRequiredError', `Please use HTTPS or localhost to publish, read https://github.com/ossrs/srs/issues/2762#issuecomment-983147576`);",
          "550:         }",
          "561:         var offer = await self.pc.createOffer();",
          "562:         await self.pc.setLocalDescription(offer);",
          "",
          "[Removed Lines]",
          "534:         if (options?.videoOnly && options?.audioOnly) throw new Error(`The videoOnly and audioOnly in options can't be true at the same time`);",
          "536:         if (!options?.videoOnly) {",
          "542:         if (!options?.audioOnly) {",
          "544:         } else {",
          "551:         var stream = await navigator.mediaDevices.getUserMedia(self.constraints);",
          "554:         stream.getTracks().forEach(function (track) {",
          "555:             self.pc.addTrack(track);",
          "558:             self.ontrack && self.ontrack({track: track});",
          "559:         });",
          "",
          "[Added Lines]",
          "535:         const hasAudio = options?.audio ?? true;",
          "536:         const useCamera = options?.camera ?? true;",
          "537:         const useScreen = options?.screen ?? false;",
          "539:         if (!hasAudio && !useCamera && !useScreen) throw new Error(`The camera, screen and audio can't be false at the same time`);",
          "541:         if (hasAudio) {",
          "547:         if (useCamera || useScreen) {",
          "549:         }",
          "551:         if (!useCamera) {",
          "559:         if (useScreen) {",
          "560:             const displayStream = await navigator.mediaDevices.getDisplayMedia({",
          "561:                 video: true",
          "562:             });",
          "564:             displayStream.getTracks().forEach(function (track) {",
          "565:                 self.pc.addTrack(track);",
          "567:                 self.ontrack && self.ontrack({track: track});",
          "568:             });",
          "569:         }",
          "571:        if (useCamera || hasAudio) {",
          "572:             const userStream = await navigator.mediaDevices.getUserMedia(self.constraints);",
          "574:             userStream.getTracks().forEach(function (track) {",
          "575:                 self.pc.addTrack(track);",
          "577:                 self.ontrack && self.ontrack({track: track});",
          "578:             });",
          "579:        }",
          "",
          "---------------"
        ],
        "trunk/research/players/whip.html||trunk/research/players/whip.html": [
          "File: trunk/research/players/whip.html -> trunk/research/players/whip.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     <div class=\"form-inline\">",
          "63:         Controls:",
          "64:         <label>",
          "66:         </label>",
          "67:         <label>",
          "69:         </label>",
          "70:     </div>",
          "",
          "[Removed Lines]",
          "65:             <input type=\"checkbox\" id=\"ch_videoonly\" style=\"margin-bottom: 8px\"> Video Only",
          "68:             <input type=\"checkbox\" id=\"ch_audioonly\" style=\"margin-bottom: 8px\"> Audio Only",
          "",
          "[Added Lines]",
          "65:             <input type=\"radio\" id=\"ra_camera\" name=\"video\" value=\"Camera\" checked style=\"margin-bottom: 8px\"> Camera",
          "68:             <input type=\"radio\" id=\"ra_screen\" name=\"video\" value=\"Screen\" style=\"margin-bottom: 8px\"> Screen",
          "69:         </label>",
          "70:         <label>",
          "71:             <input type=\"radio\" id=\"ra_none\" name=\"video\" value=\"None\" style=\"margin-bottom: 8px\"> No Video",
          "72:         </label>",
          "73:         <label>",
          "74:             <input type=\"checkbox\" id=\"ch_audio\" checked style=\"margin-bottom: 8px\"> Audio",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         var url = $(\"#txt_url\").val();",
          "115:         sdk.publish(url, {",
          "118:         }).then(function(session){",
          "119:             $('#sessionid').html(session.sessionid);",
          "120:             $('#simulator-drop').attr('href', session.simulator + '?drop=1&username=' + session.sessionid);",
          "",
          "[Removed Lines]",
          "116:             videoOnly: $('#ch_videoonly').prop('checked'),",
          "117:             audioOnly: $('#ch_audioonly').prop('checked'),",
          "",
          "[Added Lines]",
          "122:             camera: $('#ra_camera').prop('checked'),",
          "123:             screen: $('#ra_screen').prop('checked'),",
          "124:             audio: $('#ch_audio').prop('checked')",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_source.cpp||trunk/src/app/srs_app_rtc_source.cpp": [
          "File: trunk/src/app/srs_app_rtc_source.cpp -> trunk/src/app/srs_app_rtc_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1776:     if (0 == nb_payload) {",
          "1777:         srs_warn(\"empty nalu\");",
          "1778:         return err;",
          "1779:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1782:         header_sn_ = end + 1;",
          "1783:         uint16_t tail_sn = 0;",
          "1784:         int sn = find_next_lost_sn(header_sn_, tail_sn);",
          "1785:         if (-1 == sn) {",
          "1786:             if (check_frame_complete(header_sn_, tail_sn)) {",
          "1787:                 err = packet_video_rtmp(header_sn_, tail_sn);",
          "1788:             }",
          "1789:         } else if (-2 == sn) {",
          "1790:             return srs_error_new(ERROR_RTC_RTP_MUXER, \"video cache is overflow\");",
          "1791:         } else {",
          "1792:             lost_sn_ = sn;",
          "1793:         }",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    215",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    216",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    156",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    157",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "464a0134f3468b0cff4736b84f07f089b2c4f44a",
      "candidate_info": {
        "commit_hash": "464a0134f3468b0cff4736b84f07f089b2c4f44a",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/464a0134f3468b0cff4736b84f07f089b2c4f44a",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "replace values with enums. v6.0.166 v7.0.28 (#4303)\n\n---------\n\nCo-authored-by: Haibo Chen <495810242@qq.com>\nCo-authored-by: john <hondaxiao@tencent.com>\nCo-authored-by: winlin <winlinvip@gmail.com>\n\n---------\n\nCo-authored-by: Haibo Chen(\u9648\u6d77\u535a) <495810242@qq.com>\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_rtmp_conn.cpp||trunk/src/app/srs_app_rtmp_conn.cpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.cpp -> trunk/src/app/srs_app_rtmp_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:         return srs_error_wrap(err, \"rtmp: set in window ack size\");",
          "410:     }",
          "413:         return srs_error_wrap(err, \"rtmp: set peer bandwidth\");",
          "414:     }",
          "",
          "[Removed Lines]",
          "412:     if ((err = rtmp->set_peer_bandwidth((int)(2.5 * 1000 * 1000), 2)) != srs_success) {",
          "",
          "[Added Lines]",
          "412:     if ((err = rtmp->set_peer_bandwidth((int)(2.5 * 1000 * 1000), SrsPeerBandwidthDynamic)) != srs_success) {",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    222",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    223",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    164",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    166",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    26",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    28",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41b3623296c2203acced1a9363c3ef7abd08a158",
      "candidate_info": {
        "commit_hash": "41b3623296c2203acced1a9363c3ef7abd08a158",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/41b3623296c2203acced1a9363c3ef7abd08a158",
        "files": [
          "trunk/auto/auto_headers.sh",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_http_conn.hpp",
          "trunk/src/app/srs_app_recv_thread.hpp",
          "trunk/src/app/srs_app_rtmp_conn.hpp",
          "trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_st.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "API: Support new HTTP API for VALGRIND. v6.0.149 (#4150)\n\nNew features for valgrind:\n\n1. ST: Support /api/v1/valgrind for leaking check.\n2. ST: Support /api/v1/valgrind?check=full|added|changed|new|quick\n\nTo use Valgrind to detect memory leaks in SRS, even though Valgrind\nhooks are supported in ST, there are still many false positives. A more\nreasonable approach is to have Valgrind report incremental memory leaks.\nThis way, global and static variables can be avoided, and detection can\nbe achieved without exiting the program. Follow these steps:\n\n1. Compile SRS with Valgrind support: `./configure --valgrind=on &&\nmake`\n2. Start SRS with memory leak detection enabled: `valgrind\n--leak-check=full ./objs/srs -c conf/console.conf`\n3. Trigger memory detection by using curl to access the API and generate\ncalibration data. There will still be many false positives, but these\ncan be ignored: `curl http://127.0.0.1:1985/api/v1/valgrind?check=added`\n4. Perform load testing or test the suspected leaking functionality,\nsuch as RTMP streaming: `ffmpeg -re -i doc/source.flv -c copy -f flv\nrtmp://127.0.0.1/live/livestream`\n5. Stop streaming and wait for SRS to clean up the Source memory,\napproximately 30 seconds.\n6. Perform incremental memory leak detection. The reported leaks will be\nvery accurate at this point: `curl\nhttp://127.0.0.1:1985/api/v1/valgrind?check=added`\n\n> Note: To avoid interference from the HTTP request itself on Valgrind,\nSRS uses a separate coroutine to perform periodic checks. Therefore,\nafter accessing the API, you may need to wait a few seconds for the\ndetection to be triggered.\n\n---------\n\nCo-authored-by: Jacob Su <suzp1984@gmail.com>",
        "before_after_code_files": [
          "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh",
          "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp",
          "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp",
          "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp",
          "trunk/src/app/srs_app_http_conn.hpp||trunk/src/app/srs_app_http_conn.hpp",
          "trunk/src/app/srs_app_recv_thread.hpp||trunk/src/app/srs_app_recv_thread.hpp",
          "trunk/src/app/srs_app_rtmp_conn.hpp||trunk/src/app/srs_app_rtmp_conn.hpp",
          "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp",
          "trunk/src/app/srs_app_st.hpp||trunk/src/app/srs_app_st.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/auto/auto_headers.sh||trunk/auto/auto_headers.sh": [
          "File: trunk/auto/auto_headers.sh -> trunk/auto/auto_headers.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: else",
          "172:     srs_undefine_macro \"SRS_SANITIZER_LOG\" $SRS_AUTO_HEADERS_H",
          "173: fi",
          "175: #####################################################################################",
          "176: # for embeded.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: if [ $SRS_VALGRIND == YES ]; then",
          "175:     srs_define_macro \"SRS_VALGRIND\" $SRS_AUTO_HEADERS_H",
          "176: else",
          "177:     srs_undefine_macro \"SRS_VALGRIND\" $SRS_AUTO_HEADERS_H",
          "178: fi",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_gb28181.hpp||trunk/src/app/srs_app_gb28181.hpp": [
          "File: trunk/src/app/srs_app_gb28181.hpp -> trunk/src/app/srs_app_gb28181.hpp"
        ],
        "trunk/src/app/srs_app_http_api.cpp||trunk/src/app/srs_app_http_api.cpp": [
          "File: trunk/src/app/srs_app_http_api.cpp -> trunk/src/app/srs_app_http_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <srs_protocol_utility.hpp>",
          "32: #include <srs_app_coworkers.hpp>",
          "34: #if defined(__linux__) || defined(SRS_OSX)",
          "35: #include <sys/utsname.h>",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #ifdef SRS_VALGRIND",
          "35: #include <valgrind/valgrind.h>",
          "36: #include <valgrind/memcheck.h>",
          "37: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     urls->set(\"clusters\", SrsJsonAny::str(\"origin cluster server API\"));",
          "268:     urls->set(\"perf\", SrsJsonAny::str(\"System performance stat\"));",
          "269:     urls->set(\"tcmalloc\", SrsJsonAny::str(\"tcmalloc api with params ?page=summary|api\"));",
          "271:     SrsJsonObject* tests = SrsJsonAny::object();",
          "272:     obj->set(\"tests\", tests);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     urls->set(\"valgrind\", SrsJsonAny::str(\"valgrind api with params ?check=full|added|changed|new|quick\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1090: }",
          "1091: #endif",
          "1094: SrsGoApiMetrics::SrsGoApiMetrics()",
          "1095: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1099: #ifdef SRS_VALGRIND",
          "1101: SrsGoApiValgrind::SrsGoApiValgrind()",
          "1102: {",
          "1103:     trd_ = NULL;",
          "1104: }",
          "1106: SrsGoApiValgrind::~SrsGoApiValgrind()",
          "1107: {",
          "1108:     srs_freep(trd_);",
          "1109: }",
          "1111: srs_error_t SrsGoApiValgrind::serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r)",
          "1112: {",
          "1113:     srs_error_t err = srs_success;",
          "1115:     if (!trd_) {",
          "1116:         trd_ = new SrsSTCoroutine(\"valgrind\", this, _srs_context->get_id());",
          "1117:         if ((err = trd_->start()) != srs_success) {",
          "1118:             return srs_error_wrap(err, \"start\");",
          "1119:         }",
          "1120:     }",
          "1122:     string check = r->query_get(\"check\");",
          "1123:     srs_trace(\"query check=%s\", check.c_str());",
          "1126:     if (check != \"full\" && check != \"added\" && check != \"changed\" && check != \"new\" && check != \"quick\") {",
          "1127:         srs_warn(\"force set check=%s to full\", check.c_str());",
          "1128:         check = \"full\";",
          "1129:     }",
          "1132:     SrsUniquePtr<SrsJsonObject> obj(SrsJsonAny::object());",
          "1134:     obj->set(\"code\", SrsJsonAny::integer(ERROR_SUCCESS));",
          "1136:     SrsJsonObject* res = SrsJsonAny::object();",
          "1137:     res->set(\"check\", SrsJsonAny::str(check.c_str()));",
          "1138:     res->set(\"help\", SrsJsonAny::str(\"?check=full|added|changed|new|quick\"));",
          "1139:     res->set(\"see\", SrsJsonAny::str(\"https://valgrind.org/docs/manual/mc-manual.html\"));",
          "1140:     obj->set(\"data\", res);",
          "1143:     if (check == \"full\") {",
          "1144:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_LEAK_CHECK\"));",
          "1145:     } else if (check == \"quick\") {",
          "1146:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_QUICK_LEAK_CHECK\"));",
          "1147:     } else if (check == \"added\") {",
          "1148:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_ADDED_LEAK_CHECK\"));",
          "1149:     } else if (check == \"changed\") {",
          "1150:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_CHANGED_LEAK_CHECK\"));",
          "1151:     } else if (check == \"new\") {",
          "1152:         res->set(\"call\", SrsJsonAny::str(\"VALGRIND_DO_NEW_LEAK_CHECK\"));",
          "1153:     }",
          "1154:     task_ = check;",
          "1156:     return srs_api_response(w, r, obj->dumps());",
          "1157: }",
          "1159: srs_error_t SrsGoApiValgrind::cycle()",
          "1160: {",
          "1161:     srs_error_t err = srs_success;",
          "1163:     while (true) {",
          "1164:         if ((err = trd_->pull()) != srs_success) {",
          "1165:             return srs_error_wrap(err, \"pull\");",
          "1166:         }",
          "1168:         std::string check = task_;",
          "1169:         task_ = \"\";",
          "1171:         if (!check.empty()) {",
          "1172:             srs_trace(\"do memory check=%s\", check.c_str());",
          "1173:         }",
          "1175:         if (check == \"full\") {",
          "1176:             VALGRIND_DO_LEAK_CHECK;",
          "1177:         } else if (check == \"quick\") {",
          "1178:             VALGRIND_DO_QUICK_LEAK_CHECK;",
          "1179:         } else if (check == \"added\") {",
          "1180:             VALGRIND_DO_ADDED_LEAK_CHECK;",
          "1181:         } else if (check == \"changed\") {",
          "1182:             VALGRIND_DO_CHANGED_LEAK_CHECK;",
          "1183:         } else if (check == \"new\") {",
          "1184:             VALGRIND_DO_NEW_LEAK_CHECK;",
          "1185:         }",
          "1187:         srs_usleep(3 * SRS_UTIME_SECONDS);",
          "1188:     }",
          "1190:     return err;",
          "1191: }",
          "1192: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_api.hpp||trunk/src/app/srs_app_http_api.hpp": [
          "File: trunk/src/app/srs_app_http_api.hpp -> trunk/src/app/srs_app_http_api.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "216: };",
          "217: #endif",
          "219: class SrsGoApiMetrics : public ISrsHttpHandler",
          "220: {",
          "221: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219: #ifdef SRS_VALGRIND",
          "220: class SrsGoApiValgrind : public ISrsHttpHandler, public ISrsCoroutineHandler",
          "221: {",
          "222: private:",
          "223:     SrsCoroutine* trd_;",
          "224:     std::string task_;",
          "225: public:",
          "226:     SrsGoApiValgrind();",
          "227:     virtual ~SrsGoApiValgrind();",
          "228: public:",
          "229:     virtual srs_error_t serve_http(ISrsHttpResponseWriter* w, ISrsHttpMessage* r);",
          "231: public:",
          "232:     virtual srs_error_t cycle();",
          "233: };",
          "234: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_http_conn.hpp||trunk/src/app/srs_app_http_conn.hpp": [
          "File: trunk/src/app/srs_app_http_conn.hpp -> trunk/src/app/srs_app_http_conn.hpp"
        ],
        "trunk/src/app/srs_app_recv_thread.hpp||trunk/src/app/srs_app_recv_thread.hpp": [
          "File: trunk/src/app/srs_app_recv_thread.hpp -> trunk/src/app/srs_app_recv_thread.hpp"
        ],
        "trunk/src/app/srs_app_rtmp_conn.hpp||trunk/src/app/srs_app_rtmp_conn.hpp": [
          "File: trunk/src/app/srs_app_rtmp_conn.hpp -> trunk/src/app/srs_app_rtmp_conn.hpp"
        ],
        "trunk/src/app/srs_app_server.cpp||trunk/src/app/srs_app_server.cpp": [
          "File: trunk/src/app/srs_app_server.cpp -> trunk/src/app/srs_app_server.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "775:     if ((err = http_api_mux->handle(\"/api/v1/tcmalloc\", new SrsGoApiTcmalloc())) != srs_success) {",
          "777:     }",
          "778: #endif",
          "780:     if ((err = http_api_mux->handle(\"/metrics\", new SrsGoApiMetrics())) != srs_success) {",
          "781:         return srs_error_wrap(err, \"handle tests errors\");",
          "",
          "[Removed Lines]",
          "776:         return srs_error_wrap(err, \"handle tests errors\");",
          "",
          "[Added Lines]",
          "776:         return srs_error_wrap(err, \"handle tcmalloc errors\");",
          "780: #ifdef SRS_VALGRIND",
          "782:     if ((err = http_api_mux->handle(\"/api/v1/valgrind\", new SrsGoApiValgrind())) != srs_success) {",
          "783:         return srs_error_wrap(err, \"handle valgrind errors\");",
          "784:     }",
          "785: #endif",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_st.hpp||trunk/src/app/srs_app_st.hpp": [
          "File: trunk/src/app/srs_app_st.hpp -> trunk/src/app/srs_app_st.hpp"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    148",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    149",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38417d9ccc67ac3eb251b42bef5708b39f889bba",
      "candidate_info": {
        "commit_hash": "38417d9ccc67ac3eb251b42bef5708b39f889bba",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/38417d9ccc67ac3eb251b42bef5708b39f889bba",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_source.cpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp"
        ],
        "message": "Live: Crash for invalid live stream state when unmount HTTP. v6.0.146 v7.0.3 (#4141)\n\nWhen unpublishing, the handler callback that will stop the coroutine:\n\n```cpp\n_can_publish = true;\nhandler->on_unpublish(req);\n```\n\nIn this handler, the `http_unmount` will be called:\n\n```cpp\nvoid SrsHttpStreamServer::http_unmount(SrsRequest* r)\n    cache->stop();\n```\n\nIn this `http_unmount` function, there could be context switching. In\nsuch a situation, a new connection might publish the stream while the\nunpublish process is freeing the stream, leading to a crash.\n\nTo prevent a new publisher, we should change the state only after all\nhandlers and hooks are completed.\n\n---------\n\nCo-authored-by: liumengte <liumengte@visionular.com>\nCo-authored-by: winlin <winlinvip@gmail.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_source.cpp||trunk/src/app/srs_app_source.cpp": [
          "File: trunk/src/app/srs_app_source.cpp -> trunk/src/app/srs_app_source.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2632:     meta->update_previous_ash();",
          "2634:     srs_trace(\"cleanup when unpublish\");",
          "2637:     if (!_source_id.empty()) {",
          "2638:         _pre_source_id = _source_id;",
          "2639:     }",
          "",
          "[Removed Lines]",
          "2636:     _can_publish = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2655:     if (consumers.empty()) {",
          "2656:         stream_die_at_ = srs_get_system_time();",
          "2657:     }",
          "2658: }",
          "2660: srs_error_t SrsLiveSource::create_consumer(SrsLiveConsumer*& consumer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2658:     _can_publish = true;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    145",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    146",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version7.hpp||trunk/src/core/srs_core_version7.hpp": [
          "File: trunk/src/core/srs_core_version7.hpp -> trunk/src/core/srs_core_version7.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       7",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    2",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    3",
          "",
          "---------------"
        ]
      }
    }
  ]
}