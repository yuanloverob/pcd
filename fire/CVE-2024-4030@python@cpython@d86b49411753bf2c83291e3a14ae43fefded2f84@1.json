{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "07145ddf19bc423e83d0290095833bc95861fc2f",
      "candidate_info": {
        "commit_hash": "07145ddf19bc423e83d0290095833bc95861fc2f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/07145ddf19bc423e83d0290095833bc95861fc2f",
        "files": [
          "Lib/test/test_interpreters/__init__.py"
        ],
        "message": "[3.13] gh-117953: Skip `test_interpreters` properly without GIL (gh-120707)\n\n(cherry picked from commit 1035fe0cfbeee23f61aed3332ebbae854e5da800, AKA gh-120689)\n\nCo-authored-by: Nice Zombies <nineteendo19d0@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_interpreters/__init__.py||Lib/test/test_interpreters/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_interpreters/__init__.py||Lib/test/test_interpreters/__init__.py": [
          "File: Lib/test/test_interpreters/__init__.py -> Lib/test/test_interpreters/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from test.support import load_package_tests, Py_GIL_DISABLED",
          "",
          "[Removed Lines]",
          "4: if not Py_GIL_DISABLED:",
          "5:     def load_tests(*args):",
          "6:         return load_package_tests(os.path.dirname(__file__), *args)",
          "",
          "[Added Lines]",
          "3: import unittest",
          "5: if Py_GIL_DISABLED:",
          "6:     raise unittest.SkipTest(\"GIL disabled\")",
          "8: def load_tests(*args):",
          "9:     return load_package_tests(os.path.dirname(__file__), *args)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8368b67d1b5db48807010936d9550e762fc8630d",
      "candidate_info": {
        "commit_hash": "8368b67d1b5db48807010936d9550e762fc8630d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8368b67d1b5db48807010936d9550e762fc8630d",
        "files": [
          "Lib/tkinter/ttk.py",
          "Misc/NEWS.d/next/Library/2024-06-07-13-21-11.gh-issue-120211.Rws_gf.rst"
        ],
        "message": "[3.13] gh-120211: Fix tkinter.ttk with Tcl/Tk 9.0 (GH-120213) (GH-120215)\n\n* Use new methods for tracing Tcl variable.\n* Fix Combobox.current() for empty combobox.\n(cherry picked from commit d68a22e7a68ae09f7db61d5a1a3bd9c0360cf3ee)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/tkinter/ttk.py||Lib/tkinter/ttk.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tkinter/ttk.py||Lib/tkinter/ttk.py": [
          "File: Lib/tkinter/ttk.py -> Lib/tkinter/ttk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:         returns the index of the current value in the list of values",
          "691:         or -1 if the current value does not appear in the list.\"\"\"",
          "692:         if newindex is None:",
          "694:         return self.tk.call(self._w, \"current\", newindex)",
          "",
          "[Removed Lines]",
          "693:             return self.tk.getint(self.tk.call(self._w, \"current\"))",
          "",
          "[Added Lines]",
          "693:             res = self.tk.call(self._w, \"current\")",
          "694:             if res == '':",
          "695:                 return -1",
          "696:             return self.tk.getint(res)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1522:         self.label.place(anchor='n' if label_side == 'top' else 's')",
          "1524:         # update the label as scale or variable changes",
          "1526:         self.bind('<Configure>', self._adjust)",
          "1527:         self.bind('<Map>', self._adjust)",
          "",
          "[Removed Lines]",
          "1525:         self.__tracecb = self._variable.trace_variable('w', self._adjust)",
          "",
          "[Added Lines]",
          "1528:         self.__tracecb = self._variable.trace_add('write', self._adjust)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1530:     def destroy(self):",
          "1531:         \"\"\"Destroy this widget and possibly its associated variable.\"\"\"",
          "1532:         try:",
          "1534:         except AttributeError:",
          "1535:             pass",
          "1536:         else:",
          "",
          "[Removed Lines]",
          "1533:             self._variable.trace_vdelete('w', self.__tracecb)",
          "",
          "[Added Lines]",
          "1536:             self._variable.trace_remove('write', self.__tracecb)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6be1048e27f1f2eb35c45d17f3bb8760ec694550",
      "candidate_info": {
        "commit_hash": "6be1048e27f1f2eb35c45d17f3bb8760ec694550",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6be1048e27f1f2eb35c45d17f3bb8760ec694550",
        "files": [
          "Lib/importlib/metadata/__init__.py",
          "Lib/test/test_importlib/metadata/fixtures.py",
          "Lib/test/test_importlib/metadata/test_api.py",
          "Misc/NEWS.d/next/Library/2024-06-23-11-21-27.gh-issue-120910.t0QXdB.rst"
        ],
        "message": "[3.13] gh-120910: Fix issue resolving relative paths outside site-packages. (GH-120911) (#120917)\n\ngh-120910: Fix issue resolving relative paths outside site-packages. (GH-120911)\n\nIncorporates changes from importlib_metadata 7.2.1.\n(cherry picked from commit 1ba0bb21ed4eb54023fdfccc9cb20be8fff946b1)\n\nCo-authored-by: Jason R. Coombs <jaraco@jaraco.com>",
        "before_after_code_files": [
          "Lib/importlib/metadata/__init__.py||Lib/importlib/metadata/__init__.py",
          "Lib/test/test_importlib/metadata/fixtures.py||Lib/test/test_importlib/metadata/fixtures.py",
          "Lib/test/test_importlib/metadata/test_api.py||Lib/test/test_importlib/metadata/test_api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/importlib/metadata/__init__.py||Lib/importlib/metadata/__init__.py": [
          "File: Lib/importlib/metadata/__init__.py -> Lib/importlib/metadata/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:         paths = (",
          "568:             (subdir / name)",
          "569:             .resolve()",
          "571:             .as_posix()",
          "572:             for name in text.splitlines()",
          "573:         )",
          "",
          "[Removed Lines]",
          "570:             .relative_to(self.locate_file('').resolve())",
          "",
          "[Added Lines]",
          "570:             .relative_to(self.locate_file('').resolve(), walk_up=True)",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/metadata/fixtures.py||Lib/test/test_importlib/metadata/fixtures.py": [
          "File: Lib/test/test_importlib/metadata/fixtures.py -> Lib/test/test_importlib/metadata/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     }",
          "256: class EggInfoPkgPipInstalledNoModules(OnSysPath, SiteBuilder):",
          "257:     files: FilesSpec = {",
          "258:         \"egg_with_no_modules_pkg.egg-info\": {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:     }",
          "256: class EggInfoPkgPipInstalledExternalDataFiles(OnSysPath, SiteBuilder):",
          "257:     files: FilesSpec = {",
          "258:         \"egg_with_module_pkg.egg-info\": {",
          "259:             \"PKG-INFO\": \"Name: egg_with_module-pkg\",",
          "260:             # SOURCES.txt is made from the source archive, and contains files",
          "261:             # (setup.py) that are not present after installation.",
          "262:             \"SOURCES.txt\": \"\"\"",
          "263:                 egg_with_module.py",
          "264:                 setup.py",
          "265:                 egg_with_module.json",
          "266:                 egg_with_module_pkg.egg-info/PKG-INFO",
          "267:                 egg_with_module_pkg.egg-info/SOURCES.txt",
          "268:                 egg_with_module_pkg.egg-info/top_level.txt",
          "269:             \"\"\",",
          "270:             # installed-files.txt is written by pip, and is a strictly more",
          "271:             # accurate source than SOURCES.txt as to the installed contents of",
          "272:             # the package.",
          "273:             \"installed-files.txt\": \"\"\"",
          "274:                 ../../../etc/jupyter/jupyter_notebook_config.d/relative.json",
          "275:                 /etc/jupyter/jupyter_notebook_config.d/absolute.json",
          "276:                 ../egg_with_module.py",
          "277:                 PKG-INFO",
          "278:                 SOURCES.txt",
          "279:                 top_level.txt",
          "280:             \"\"\",",
          "281:             # missing top_level.txt (to trigger fallback to installed-files.txt)",
          "",
          "---------------"
        ],
        "Lib/test/test_importlib/metadata/test_api.py||Lib/test/test_importlib/metadata/test_api.py": [
          "File: Lib/test/test_importlib/metadata/test_api.py -> Lib/test/test_importlib/metadata/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     fixtures.EggInfoPkg,",
          "30:     fixtures.EggInfoPkgPipInstalledNoToplevel,",
          "31:     fixtures.EggInfoPkgPipInstalledNoModules,",
          "32:     fixtures.EggInfoPkgSourcesFallback,",
          "33:     fixtures.DistInfoPkg,",
          "34:     fixtures.DistInfoPkgWithDot,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     fixtures.EggInfoPkgPipInstalledExternalDataFiles,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "899dfbaf0e62c71885eced4747d7d4c93b7bbd4f",
      "candidate_info": {
        "commit_hash": "899dfbaf0e62c71885eced4747d7d4c93b7bbd4f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/899dfbaf0e62c71885eced4747d7d4c93b7bbd4f",
        "files": [
          "Lib/test/test_ast.py",
          "Misc/NEWS.d/next/Library/2024-06-05-08-02-46.gh-issue-120108.4U9BL8.rst",
          "Parser/asdl_c.py",
          "Python/Python-ast.c"
        ],
        "message": "[3.13] gh-120108: Fix deepcopying of AST trees with .parent attributes (GH-120114) (#121000)\n\n(cherry picked from commit 42b2c9d78da7ebd6bd5925a4d4c78aec3c9e78e6)",
        "before_after_code_files": [
          "Lib/test/test_ast.py||Lib/test/test_ast.py",
          "Parser/asdl_c.py||Parser/asdl_c.py",
          "Python/Python-ast.c||Python/Python-ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_ast.py||Lib/test/test_ast.py": [
          "File: Lib/test/test_ast.py -> Lib/test/test_ast.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import ast",
          "2: import builtins",
          "3: import dis",
          "4: import enum",
          "5: import os",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import copy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: from test.support.ast_helper import ASTTestMixin",
          "25: def to_tuple(t):",
          "27:         return t",
          "28:     elif isinstance(t, list):",
          "29:         return [to_tuple(e) for e in t]",
          "",
          "[Removed Lines]",
          "26:     if t is None or isinstance(t, (str, int, complex)) or t is Ellipsis:",
          "",
          "[Added Lines]",
          "27:     if t is None or isinstance(t, (str, int, complex, float, bytes)) or t is Ellipsis:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "971:         x = ast.Sub()",
          "972:         self.assertEqual(x._fields, ())",
          "983:     def test_invalid_sum(self):",
          "984:         pos = dict(lineno=2, col_offset=3)",
          "985:         m = ast.Module([ast.Expr(ast.expr(**pos), **pos)], [])",
          "",
          "[Removed Lines]",
          "974:     def test_pickling(self):",
          "975:         import pickle",
          "977:         for protocol in range(pickle.HIGHEST_PROTOCOL + 1):",
          "978:             for ast in (compile(i, \"?\", \"exec\", 0x400) for i in exec_tests):",
          "979:                 with self.subTest(ast=ast, protocol=protocol):",
          "980:                     ast2 = pickle.loads(pickle.dumps(ast, protocol))",
          "981:                     self.assertEqual(to_tuple(ast2), to_tuple(ast))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1222:         for node, attr, source in tests:",
          "1223:             self.assert_none_check(node, attr, source)",
          "1225: class ASTHelpers_Test(unittest.TestCase):",
          "1226:     maxDiff = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218: class CopyTests(unittest.TestCase):",
          "1219:     \"\"\"Test copying and pickling AST nodes.\"\"\"",
          "1221:     def test_pickling(self):",
          "1222:         import pickle",
          "1224:         for protocol in range(pickle.HIGHEST_PROTOCOL + 1):",
          "1225:             for code in exec_tests:",
          "1226:                 with self.subTest(code=code, protocol=protocol):",
          "1227:                     tree = compile(code, \"?\", \"exec\", 0x400)",
          "1228:                     ast2 = pickle.loads(pickle.dumps(tree, protocol))",
          "1229:                     self.assertEqual(to_tuple(ast2), to_tuple(tree))",
          "1231:     def test_copy_with_parents(self):",
          "1232:         # gh-120108",
          "1233:         code = \"\"\"",
          "1234:         ('',)",
          "1235:         while i < n:",
          "1236:             if ch == '':",
          "1237:                 ch = format[i]",
          "1238:                 if ch == '':",
          "1239:                     if freplace is None:",
          "1240:                         '' % getattr(object)",
          "1241:                 elif ch == '':",
          "1242:                     if zreplace is None:",
          "1243:                         if hasattr:",
          "1244:                             offset = object.utcoffset()",
          "1245:                             if offset is not None:",
          "1246:                                 if offset.days < 0:",
          "1247:                                     offset = -offset",
          "1248:                                 h = divmod(timedelta(hours=0))",
          "1249:                                 if u:",
          "1250:                                     zreplace = '' % (sign,)",
          "1251:                                 elif s:",
          "1252:                                     zreplace = '' % (sign,)",
          "1253:                                 else:",
          "1254:                                     zreplace = '' % (sign,)",
          "1255:                 elif ch == '':",
          "1256:                     if Zreplace is None:",
          "1257:                         Zreplace = ''",
          "1258:                         if hasattr(object):",
          "1259:                             s = object.tzname()",
          "1260:                             if s is not None:",
          "1261:                                 Zreplace = s.replace('')",
          "1262:                     newformat.append(Zreplace)",
          "1263:                 else:",
          "1264:                     push('')",
          "1265:             else:",
          "1266:                 push(ch)",
          "1268:         \"\"\"",
          "1269:         tree = ast.parse(textwrap.dedent(code))",
          "1270:         for node in ast.walk(tree):",
          "1271:             for child in ast.iter_child_nodes(node):",
          "1272:                 child.parent = node",
          "1273:         try:",
          "1274:             with support.infinite_recursion(200):",
          "1275:                 tree2 = copy.deepcopy(tree)",
          "1276:         finally:",
          "1277:             # Singletons like ast.Load() are shared; make sure we don't",
          "1278:             # leave them mutated after this test.",
          "1279:             for node in ast.walk(tree):",
          "1280:                 if hasattr(node, \"parent\"):",
          "1281:                     del node.parent",
          "1283:         for node in ast.walk(tree2):",
          "1284:             for child in ast.iter_child_nodes(node):",
          "1285:                 if hasattr(child, \"parent\") and not isinstance(child, (",
          "1286:                     ast.expr_context, ast.boolop, ast.unaryop, ast.cmpop, ast.operator,",
          "1287:                 )):",
          "1288:                     self.assertEqual(to_tuple(child.parent), to_tuple(node))",
          "",
          "---------------"
        ],
        "Parser/asdl_c.py||Parser/asdl_c.py": [
          "File: Parser/asdl_c.py -> Parser/asdl_c.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1064:         return NULL;",
          "1065:     }",
          "1069:     if (PyObject_GetOptionalAttr(self, state->__dict__, &dict) < 0) {",
          "1070:         return NULL;",
          "1071:     }",
          "1072:     PyObject *result = NULL;",
          "1073:     if (dict) {",
          "1078:         if (PyObject_GetOptionalAttr((PyObject*)Py_TYPE(self), state->_fields, &fields) < 0) {",
          "1079:             goto cleanup;",
          "1080:         }",
          "",
          "[Removed Lines]",
          "1067:     PyObject *dict = NULL, *fields = NULL, *remaining_fields = NULL,",
          "",
          "[Added Lines]",
          "1067:     PyObject *dict = NULL, *fields = NULL, *positional_args = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1084:                 Py_DECREF(dict);",
          "1085:                 goto cleanup;",
          "1086:             }",
          "1092:             positional_args = PyList_New(0);",
          "1093:             if (!positional_args) {",
          "1094:                 goto cleanup;",
          "",
          "[Removed Lines]",
          "1087:             remaining_dict = PyDict_Copy(dict);",
          "1088:             Py_DECREF(dict);",
          "1089:             if (!remaining_dict) {",
          "1090:                 goto cleanup;",
          "1091:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1099:                     goto cleanup;",
          "1100:                 }",
          "1101:                 PyObject *value;",
          "1103:                 Py_DECREF(name);",
          "1104:                 if (rc < 0) {",
          "1105:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "1102:                 int rc = PyDict_Pop(remaining_dict, name, &value);",
          "",
          "[Added Lines]",
          "1102:                 int rc = PyDict_GetItemRef(dict, name, &value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1107:                 if (!value) {",
          "1108:                     break;",
          "1109:                 }",
          "1111:                 Py_DECREF(value);",
          "1112:                 if (rc < 0) {",
          "1113:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "1110:                 rc = PyList_Append(positional_args, value);",
          "",
          "[Added Lines]",
          "1110:                 rc = PyList_Append(positional_args, Py_None);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1117:             if (!args_tuple) {",
          "1118:                 goto cleanup;",
          "1119:             }",
          "1122:         }",
          "1123:         else {",
          "1124:             result = Py_BuildValue(\"O()N\", Py_TYPE(self), dict);",
          "",
          "[Removed Lines]",
          "1120:             result = Py_BuildValue(\"ONO\", Py_TYPE(self), args_tuple,",
          "1121:                                    remaining_dict);",
          "",
          "[Added Lines]",
          "1120:             result = Py_BuildValue(\"ONN\", Py_TYPE(self), args_tuple, dict);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1129:     }",
          "1130: cleanup:",
          "1131:     Py_XDECREF(fields);",
          "1134:     Py_XDECREF(positional_args);",
          "1135:     return result;",
          "1136: }",
          "",
          "[Removed Lines]",
          "1132:     Py_XDECREF(remaining_fields);",
          "1133:     Py_XDECREF(remaining_dict);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/Python-ast.c||Python/Python-ast.c": [
          "File: Python/Python-ast.c -> Python/Python-ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5263:         return NULL;",
          "5264:     }",
          "5268:     if (PyObject_GetOptionalAttr(self, state->__dict__, &dict) < 0) {",
          "5269:         return NULL;",
          "5270:     }",
          "5271:     PyObject *result = NULL;",
          "5272:     if (dict) {",
          "5277:         if (PyObject_GetOptionalAttr((PyObject*)Py_TYPE(self), state->_fields, &fields) < 0) {",
          "5278:             goto cleanup;",
          "5279:         }",
          "",
          "[Removed Lines]",
          "5266:     PyObject *dict = NULL, *fields = NULL, *remaining_fields = NULL,",
          "",
          "[Added Lines]",
          "5266:     PyObject *dict = NULL, *fields = NULL, *positional_args = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5283:                 Py_DECREF(dict);",
          "5284:                 goto cleanup;",
          "5285:             }",
          "5291:             positional_args = PyList_New(0);",
          "5292:             if (!positional_args) {",
          "5293:                 goto cleanup;",
          "",
          "[Removed Lines]",
          "5286:             remaining_dict = PyDict_Copy(dict);",
          "5287:             Py_DECREF(dict);",
          "5288:             if (!remaining_dict) {",
          "5289:                 goto cleanup;",
          "5290:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5298:                     goto cleanup;",
          "5299:                 }",
          "5300:                 PyObject *value;",
          "5302:                 Py_DECREF(name);",
          "5303:                 if (rc < 0) {",
          "5304:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "5301:                 int rc = PyDict_Pop(remaining_dict, name, &value);",
          "",
          "[Added Lines]",
          "5301:                 int rc = PyDict_GetItemRef(dict, name, &value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5306:                 if (!value) {",
          "5307:                     break;",
          "5308:                 }",
          "5310:                 Py_DECREF(value);",
          "5311:                 if (rc < 0) {",
          "5312:                     goto cleanup;",
          "",
          "[Removed Lines]",
          "5309:                 rc = PyList_Append(positional_args, value);",
          "",
          "[Added Lines]",
          "5309:                 rc = PyList_Append(positional_args, Py_None);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5316:             if (!args_tuple) {",
          "5317:                 goto cleanup;",
          "5318:             }",
          "5321:         }",
          "5322:         else {",
          "5323:             result = Py_BuildValue(\"O()N\", Py_TYPE(self), dict);",
          "",
          "[Removed Lines]",
          "5319:             result = Py_BuildValue(\"ONO\", Py_TYPE(self), args_tuple,",
          "5320:                                    remaining_dict);",
          "",
          "[Added Lines]",
          "5319:             result = Py_BuildValue(\"ONN\", Py_TYPE(self), args_tuple, dict);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5328:     }",
          "5329: cleanup:",
          "5330:     Py_XDECREF(fields);",
          "5333:     Py_XDECREF(positional_args);",
          "5334:     return result;",
          "5335: }",
          "",
          "[Removed Lines]",
          "5331:     Py_XDECREF(remaining_fields);",
          "5332:     Py_XDECREF(remaining_dict);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "767c955544fa79486e3e874ed9d74e8991b1060b",
      "candidate_info": {
        "commit_hash": "767c955544fa79486e3e874ed9d74e8991b1060b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/767c955544fa79486e3e874ed9d74e8991b1060b",
        "files": [
          "Lib/test/test_exceptions.py",
          "Lib/test/test_unittest/test_case.py"
        ],
        "message": "[3.13] gh-120544: Add `else: fail()` to tests where exception is expected (GH-120545) (#120546)\n\ngh-120544: Add `else: fail()` to tests where exception is expected (GH-120545)\n(cherry picked from commit 42ebdd83bb194f054fe5a10b3caa0c3a95be3679)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_exceptions.py||Lib/test/test_exceptions.py",
          "Lib/test/test_unittest/test_case.py||Lib/test/test_unittest/test_case.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_exceptions.py||Lib/test/test_exceptions.py": [
          "File: Lib/test/test_exceptions.py -> Lib/test/test_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         except self.failureException:",
          "1837:             with support.captured_stderr() as err:",
          "1838:                 sys.__excepthook__(*sys.exc_info())",
          "1840:         self.assertIn(\"aab\", err.getvalue())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:         else:",
          "1840:             self.fail(\"assertRaisesRegex should have failed.\")",
          "",
          "---------------"
        ],
        "Lib/test/test_unittest/test_case.py||Lib/test/test_unittest/test_case.py": [
          "File: Lib/test/test_unittest/test_case.py -> Lib/test/test_unittest/test_case.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1132:             # need to remove the first line of the error message",
          "1133:             error = str(e).split('\\n', 1)[1]",
          "1134:             self.assertEqual(sample_text_error, error)",
          "1136:     def testAssertEqualSingleLine(self):",
          "1137:         sample_text = \"laden swallows fly slowly\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1135:         else:",
          "1136:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1148:             # need to remove the first line of the error message",
          "1149:             error = str(e).split('\\n', 1)[1]",
          "1150:             self.assertEqual(sample_text_error, error)",
          "1152:     def testAssertEqualwithEmptyString(self):",
          "1153:         '''Verify when there is an empty string involved, the diff output",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1153:         else:",
          "1154:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1165:             # need to remove the first line of the error message",
          "1166:             error = str(e).split('\\n', 1)[1]",
          "1167:             self.assertEqual(sample_text_error, error)",
          "1169:     def testAssertEqualMultipleLinesMissingNewlineTerminator(self):",
          "1170:         '''Verifying format of diff output from assertEqual involving strings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1172:         else:",
          "1173:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1185:             # need to remove the first line of the error message",
          "1186:             error = str(e).split('\\n', 1)[1]",
          "1187:             self.assertEqual(sample_text_error, error)",
          "1189:     def testAssertEqualMultipleLinesMismatchedNewlinesTerminators(self):",
          "1190:         '''Verifying format of diff output from assertEqual involving strings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:         else:",
          "1195:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1208:             # need to remove the first line of the error message",
          "1209:             error = str(e).split('\\n', 1)[1]",
          "1210:             self.assertEqual(sample_text_error, error)",
          "1212:     def testEqualityBytesWarning(self):",
          "1213:         if sys.flags.bytes_warning:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1219:         else:",
          "1220:             self.fail(f'{self.failureException} not raised')",
          "",
          "---------------"
        ]
      }
    }
  ]
}