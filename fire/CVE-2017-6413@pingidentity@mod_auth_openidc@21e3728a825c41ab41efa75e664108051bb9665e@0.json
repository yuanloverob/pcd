{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f4629bf48cbc0e077f079c343b7a42b6143b35b",
      "candidate_info": {
        "commit_hash": "6f4629bf48cbc0e077f079c343b7a42b6143b35b",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/6f4629bf48cbc0e077f079c343b7a42b6143b35b",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "bump to 2.2.1rc6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa25a79f1f7623515dfc48f97c2f5cc6732ca717",
      "candidate_info": {
        "commit_hash": "aa25a79f1f7623515dfc48f97c2f5cc6732ca717",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/aa25a79f1f7623515dfc48f97c2f5cc6732ca717",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/proto.c",
          "src/util.c",
          "test/stub.c"
        ],
        "message": "support paths relative to Apache root for file directives; see #280\n\n- goes for OIDCHTMLErrorTemplate, OIDCPublicKeyFiles,\nOIDCPrivateKeyFiles, OIDCOAuthVerifyCertFiles,\nOIDCClientTokenEndpointCert, OIDCClientTokenEndpointKey,\nOIDCOAuthIntrospectionEndpointCert and OIDCOAuthIntrospectionEndpointKey\n- addresses\nhttps://github.com/pingidentity/mod_auth_openidc/issues/280#issuecomment-318333183\n- bump to 2.3.2rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c",
          "src/util.c||src/util.c",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:  if (rv != NULL)",
          "622:   return rv;",
          "624:  if (oidc_jwk_parse_rsa_public_key(cmd->pool, kid, fname, &jwk,",
          "625:    &err) == FALSE) {",
          "626:   return apr_psprintf(cmd->pool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624:  fname = oidc_util_get_full_path(cmd->pool, fname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:  if (rv != NULL)",
          "689:   return rv;",
          "691:  if (oidc_jwk_parse_rsa_private_key(cmd->pool, kid, fname, &jwk,",
          "692:    &err) == FALSE) {",
          "693:   return apr_psprintf(cmd->pool,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:  fname = oidc_util_get_full_path(cmd->pool, fname);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "718: apr_hash_t * oidc_util_merge_symmetric_key(apr_pool_t *pool, apr_hash_t *private_keys, oidc_jwk_t *jwk);",
          "719: const char *oidc_util_get_provided_token_binding_id(const request_rec *r);",
          "720: char *oidc_util_http_query_encoded_url(request_rec *r, const char *url, const apr_table_t *params);",
          "723: #define OIDC_HTTP_HDR_COOKIE       \"Cookie\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721: const char *oidc_util_get_full_path(apr_pool_t *pool, const char *abs_or_rel_filename);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:        basic_auth, NULL, c->oauth.ssl_validate_server, response,",
          "91:        c->http_timeout_long, c->outgoing_proxy,",
          "92:        oidc_dir_cfg_pass_cookies(r),",
          "95:        oidc_util_http_post_form(r, c->oauth.introspection_endpoint_url,",
          "96:          params, basic_auth, NULL, c->oauth.ssl_validate_server,",
          "97:          response, c->http_timeout_long, c->outgoing_proxy,",
          "98:          oidc_dir_cfg_pass_cookies(r),",
          "101: }",
          "",
          "[Removed Lines]",
          "93:        c->oauth.introspection_endpoint_tls_client_cert,",
          "94:        c->oauth.introspection_endpoint_tls_client_key) :",
          "99:          c->oauth.introspection_endpoint_tls_client_cert,",
          "100:          c->oauth.introspection_endpoint_tls_client_key);",
          "",
          "[Added Lines]",
          "93:        oidc_util_get_full_path(r->pool, c->oauth.introspection_endpoint_tls_client_cert),",
          "94:        oidc_util_get_full_path(r->pool, c->oauth.introspection_endpoint_tls_client_key)) :",
          "99:          oidc_util_get_full_path(r->pool, c->oauth.introspection_endpoint_tls_client_cert),",
          "100:          oidc_util_get_full_path(r->pool, c->oauth.introspection_endpoint_tls_client_key));",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1860:    basic_auth, NULL, provider->ssl_validate_server, &response,",
          "1861:    cfg->http_timeout_long, cfg->outgoing_proxy,",
          "1862:    oidc_dir_cfg_pass_cookies(r),",
          "1865:   oidc_warn(r, \"error when calling the token endpoint (%s)\",",
          "1866:     provider->token_endpoint_url);",
          "1867:   return FALSE;",
          "",
          "[Removed Lines]",
          "1863:    provider->token_endpoint_tls_client_cert,",
          "1864:    provider->token_endpoint_tls_client_key) == FALSE) {",
          "",
          "[Added Lines]",
          "1863:    oidc_util_get_full_path(r->pool, provider->token_endpoint_tls_client_cert),",
          "1864:    oidc_util_get_full_path(r->pool, provider->token_endpoint_tls_client_key)) == FALSE) {",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322: static char *html_error_template_contents = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328: const char *oidc_util_get_full_path(apr_pool_t *pool, const char *abs_or_rel_filename) {",
          "1329:  return (abs_or_rel_filename) ? ap_server_root_relative(pool, abs_or_rel_filename) : NULL;",
          "1330: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1332:  if (html_template != NULL) {",
          "1334:   if (html_error_template_contents == NULL) {",
          "1335:    int rc = oidc_util_file_read(r, html_template,",
          "1336:      r->server->process->pool, &html_error_template_contents);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1342:   html_template = oidc_util_get_full_path(r->pool, html_template);",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: AP_DECLARE(const char *) ap_get_server_name(request_rec *r) {",
          "177:  return \"www.example.com\";",
          "178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: AP_DECLARE(char *) ap_server_root_relative(apr_pool_t *p, const char *file) {",
          "181:  return \"\";",
          "182: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe45101c4ee8a3398aeb1be2cde0cb226eb1a824",
      "candidate_info": {
        "commit_hash": "fe45101c4ee8a3398aeb1be2cde0cb226eb1a824",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/fe45101c4ee8a3398aeb1be2cde0cb226eb1a824",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/file.c",
          "src/mod_auth_openidc.c"
        ],
        "message": "fix file-based caching of non-filename friendly keys; bump to 2.3.0rc3\n\nFixes caching of provider configuration metadata URLs and JWKs URIs when\nusing `OIDCCacheType file`.\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/file.c||src/cache/file.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/file.c||src/cache/file.c": [
          "File: src/cache/file.c -> src/cache/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: int oidc_cache_file_post_config(server_rec *s) {",
          "",
          "[Removed Lines]",
          "78: #define OIDC_CACHE_FILE_PREFIX \"mod-auth-connect-\"",
          "",
          "[Added Lines]",
          "78: #define OIDC_CACHE_FILE_PREFIX \"mod-auth-openidc-\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: static const char *oidc_cache_file_name(request_rec *r, const char *section,",
          "96:   const char *key) {",
          "97:  return apr_psprintf(r->pool, \"%s%s-%s\", OIDC_CACHE_FILE_PREFIX, section,",
          "99: }",
          "",
          "[Removed Lines]",
          "98:    key);",
          "",
          "[Added Lines]",
          "98:    oidc_util_escape_string(r, key));",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:    return FALSE;",
          "313:   }",
          "317:     apr_time_now() + (c->provider_metadata_refresh_interval <= 0 ? apr_time_from_sec( OIDC_CACHE_PROVIDER_METADATA_EXPIRY_DEFAULT) : c->provider_metadata_refresh_interval));",
          "319:  } else {",
          "",
          "[Removed Lines]",
          "315:   oidc_cache_set_provider(r,",
          "316:     oidc_util_escape_string(r, c->provider.metadata_url), s_json,",
          "",
          "[Added Lines]",
          "315:   oidc_cache_set_provider(r, c->provider.metadata_url, s_json,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1678738ca66de34e416868b86326f485bbdd45f",
      "candidate_info": {
        "commit_hash": "a1678738ca66de34e416868b86326f485bbdd45f",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/a1678738ca66de34e416868b86326f485bbdd45f",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/metadata.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/proto.c",
          "src/util.c"
        ],
        "message": "add option to pass issuer specific redirect URI; see #291\n\nused in multi-provider setups to mitigate the IDP mixup attack by\nsetting \"issuer_specific_redirect_uri\" in the .conf file; this will add\na parameter \"iss\" to the redirect URI with the url-encoded issuer value;\nthanks @remi-cc\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/proto.c||src/proto.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: #define OIDC_DEFAULT_PROVIDER_TOKEN_BINDING_POLICY OIDC_TOKEN_BINDING_POLICY_OPTIONAL",
          "161: #define OIDC_DEFAULT_AUTH_REQUEST_METHOD OIDC_AUTH_REQUEST_METHOD_GET",
          "163: #define OIDCProviderMetadataURL              \"OIDCProviderMetadataURL\"",
          "164: #define OIDCProviderIssuer                   \"OIDCProviderIssuer\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: #define OIDC_DEFAULT_PROVIDER_ISSUER_SPECIFIC_REDIRECT_URI 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1097:  c->black_listed_claims = NULL;",
          "1098:  c->white_listed_claims = NULL;",
          "1100:  return c;",
          "1101: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:  c->provider.issuer_specific_redirect_uri =",
          "1103:    OIDC_DEFAULT_PROVIDER_ISSUER_SPECIFIC_REDIRECT_URI;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1506:    add->white_listed_claims != NULL ?",
          "1507:      add->white_listed_claims : base->white_listed_claims;",
          "1509:  return c;",
          "1510: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1514:  c->provider.issuer_specific_redirect_uri =",
          "1515:    add->provider.issuer_specific_redirect_uri",
          "1516:    != OIDC_DEFAULT_PROVIDER_ISSUER_SPECIFIC_REDIRECT_URI ?",
          "1517:      add->provider.issuer_specific_redirect_uri :",
          "1518:      base->provider.issuer_specific_redirect_uri;",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: #define OIDC_METADATA_USERINFO_TOKEN_METHOD                 \"userinfo_token_method\"",
          "124: #define OIDC_METADATA_TOKEN_BINDING_POLICY                  \"token_binding_policy\"",
          "125: #define OIDC_METADATA_AUTH_REQUEST_METHOD                   \"auth_request_method\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126: #define OIDC_METADATA_ISSUER_SPECIFIC_REDIRECT_URI          \"issuer_specific_redirect_uri\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:  json_object_set_new(data, OIDC_METADATA_CLIENT_NAME,",
          "488:    json_string(provider->client_name));",
          "489:  json_object_set_new(data, OIDC_METADATA_REDIRECT_URIS,",
          "492:  json_t *response_types = json_array();",
          "493:  apr_array_header_t *flows = oidc_proto_supported_flows(r->pool);",
          "",
          "[Removed Lines]",
          "490:    json_pack(\"[s]\", oidc_get_redirect_uri(r, cfg)));",
          "",
          "[Added Lines]",
          "491:    json_pack(\"[s]\", oidc_get_redirect_uri_iss(r, cfg, provider)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1234:  else",
          "1235:   provider->auth_request_method = cfg->provider.auth_request_method;",
          "1237:  return TRUE;",
          "1238: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1239:  oidc_metadata_parse_boolean(r, j_conf,",
          "1240:    OIDC_METADATA_ISSUER_SPECIFIC_REDIRECT_URI,",
          "1241:    &provider->issuer_specific_redirect_uri,",
          "1242:    cfg->provider.issuer_specific_redirect_uri);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2219:  return oidc_proto_authorization_request(r, provider, login_hint,",
          "2222: }",
          "",
          "[Removed Lines]",
          "2220:    oidc_get_redirect_uri(r, c), state, proto_state, id_token_hint,",
          "2221:    code_challenge, auth_request_params, path_scope);",
          "",
          "[Added Lines]",
          "2220:    oidc_get_redirect_uri_iss(r, c, provider), state, proto_state,",
          "2221:    id_token_hint, code_challenge, auth_request_params, path_scope);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2771:    return oidc_authenticate_user(r, c, provider,",
          "2772:      apr_psprintf(r->pool, \"%s?session=iframe_rp\",",
          "2775:        oidc_dir_cfg_path_scope(r));",
          "2776:   }",
          "2777:   oidc_debug(r,",
          "",
          "[Removed Lines]",
          "2773:        oidc_get_redirect_uri(r, c)), NULL, id_token_hint,",
          "2774:        \"none\", oidc_dir_cfg_path_auth_request_params(r),",
          "",
          "[Added Lines]",
          "2773:        oidc_get_redirect_uri_iss(r, c, provider)), NULL,",
          "2774:        id_token_hint, \"none\",",
          "2775:        oidc_dir_cfg_path_auth_request_params(r),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:  char *request_object;",
          "278:  int auth_request_method;",
          "279:  int token_binding_policy;",
          "280: } oidc_provider_t ;",
          "282: typedef struct oidc_remote_user_claim_t {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:  int issuer_specific_redirect_uri;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673: const char *oidc_get_current_url_host(request_rec *r);",
          "674: char *oidc_get_current_url(request_rec *r);",
          "675: const char *oidc_get_redirect_uri(request_rec *r, oidc_cfg *c);",
          "676: char *oidc_url_encode(const request_rec *r, const char *str, const char *charsToEncode);",
          "677: char *oidc_normalize_header_name(const request_rec *r, const char *str);",
          "678: void oidc_util_set_cookie(request_rec *r, const char *cookieName, const char *cookieValue, apr_time_t expires, const char *ext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "678: const char *oidc_get_redirect_uri_iss(request_rec *r, oidc_cfg *c, oidc_provider_t *provider);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1937:    OIDC_PROTO_GRANT_TYPE_AUTHZ_CODE);",
          "1938:  apr_table_setn(params, OIDC_PROTO_CODE, code);",
          "1939:  apr_table_set(params, OIDC_PROTO_REDIRECT_URI,",
          "1942:  if (code_verifier)",
          "1943:   apr_table_setn(params, OIDC_PROTO_CODE_VERIFIER, code_verifier);",
          "",
          "[Removed Lines]",
          "1940:    oidc_get_redirect_uri(r, cfg));",
          "",
          "[Added Lines]",
          "1940:    oidc_get_redirect_uri_iss(r, cfg, provider));",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:  return redirect_uri;",
          "512: }",
          "515: typedef struct oidc_curl_buffer {",
          "516:  request_rec *r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517: const char *oidc_get_redirect_uri_iss(request_rec *r, oidc_cfg *cfg,",
          "518:   oidc_provider_t *provider) {",
          "519:  const char *redirect_uri = oidc_get_redirect_uri(r, cfg);",
          "520:  if (provider->issuer_specific_redirect_uri != 0) {",
          "521:   redirect_uri = apr_psprintf(r->pool, \"%s%s%s=%s\", redirect_uri,",
          "522:     strchr(redirect_uri, OIDC_CHAR_QUERY) != NULL ?",
          "523:       OIDC_STR_AMP :",
          "524:       OIDC_STR_QUERY,",
          "525:       OIDC_PROTO_ISS, oidc_util_escape_string(r, provider->issuer));",
          "528:   oidc_debug(r, \"determined issuer specific redirect uri: %s\",",
          "529:     redirect_uri);",
          "530:  }",
          "531:  return redirect_uri;",
          "532: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02d62858c3743a319209c1b26bb4f8f76df1edb0",
      "candidate_info": {
        "commit_hash": "02d62858c3743a319209c1b26bb4f8f76df1edb0",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/02d62858c3743a319209c1b26bb4f8f76df1edb0",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "2.2.1rc3: really fix Redis crash now (take nr. 3)\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: #define OIDC_CACHE_REDIS_CONTEXT \"oidc_cache_redis_context\"",
          "164:   oidc_cache_cfg_redis_t *context) {",
          "169:    r->server->process->pool);",
          "178:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\",",
          "185:   }",
          "194:  }",
          "197: }",
          "",
          "[Removed Lines]",
          "163: static redisContext * oidc_cache_redis_connect(request_rec *r,",
          "167:  redisContext *ctx = NULL;",
          "168:  apr_pool_userdata_get((void **) &ctx, OIDC_CACHE_REDIS_CONTEXT,",
          "171:  if (ctx == NULL) {",
          "174:   ctx = redisConnect(context->host_str, context->port);",
          "177:   if ((ctx == NULL) || (ctx->err != 0)) {",
          "179:      context->host_str, context->port, ctx->errstr);",
          "180:    if (ctx != NULL)",
          "181:     redisFree(ctx);",
          "182:    apr_pool_userdata_set(NULL, OIDC_CACHE_REDIS_CONTEXT,",
          "183:      apr_pool_cleanup_null, r->server->process->pool);",
          "184:    return NULL;",
          "188:   apr_pool_userdata_set(ctx, OIDC_CACHE_REDIS_CONTEXT,",
          "189:     (apr_status_t (*)(void *)) redisFree, r->server->process->pool);",
          "192:   oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "193:     context->host_str, context->port);",
          "196:  return ctx;",
          "",
          "[Added Lines]",
          "163: typedef struct {",
          "164:  redisContext *ctx;",
          "165: } oidc_cache_redis_ctx_t;",
          "170: static apr_status_t oidc_cache_redis_free(void *ptr) {",
          "171:  oidc_cache_redis_ctx_t *rctx = (oidc_cache_redis_ctx_t *) ptr;",
          "172:  if ((rctx != NULL) && (rctx->ctx != NULL)) {",
          "173:   redisFree(rctx->ctx);",
          "174:   rctx->ctx = NULL;",
          "175:  }",
          "176:  return APR_SUCCESS;",
          "177: }",
          "182: static oidc_cache_redis_ctx_t * oidc_cache_redis_connect(request_rec *r,",
          "186:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "188:  apr_pool_userdata_get((void **) &rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "191:  if (rctx == NULL) {",
          "192:   rctx = apr_pcalloc(r->server->process->pool, sizeof(oidc_cache_redis_ctx_t));",
          "193:   rctx->ctx = NULL;",
          "196:   apr_pool_userdata_set(rctx, OIDC_CACHE_REDIS_CONTEXT, oidc_cache_redis_free,",
          "197:     r->server->process->pool);",
          "198:  }",
          "200:  if (rctx->ctx == NULL) {",
          "203:   rctx->ctx = redisConnect(context->host_str, context->port);",
          "206:   if ((rctx->ctx == NULL) || (rctx->ctx->err != 0)) {",
          "208:      context->host_str, context->port, rctx->ctx != NULL ? rctx->ctx->errstr : \"\");",
          "209:    oidc_cache_redis_free(rctx);",
          "210:   } else {",
          "212:    oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "213:      context->host_str, context->port);",
          "217:  return rctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "203:   oidc_cache_cfg_redis_t *context, const char *format, ...) {",
          "206:  redisReply *reply = NULL;",
          "207:  int i = 0;",
          "",
          "[Removed Lines]",
          "205:  redisContext *ctx = NULL;",
          "",
          "[Added Lines]",
          "226:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:  for (i = 0; i < 2; i++) {",
          "215:    break;",
          "217:   if (context->passwd != NULL) {",
          "219:      apr_psprintf(r->pool, \"AUTH %s\", context->passwd));",
          "220:   }",
          "223:   va_list args;",
          "224:   va_start(args, format);",
          "226:   va_end(args);",
          "228:   if (context->passwd != NULL) {",
          "231:    if (reply == NULL) {",
          "232:     oidc_error(r,",
          "233:       \"authentication to the Redis server (%s:%d) failed, reply == NULL\",",
          "",
          "[Removed Lines]",
          "213:   ctx = oidc_cache_redis_connect(r, context);",
          "214:   if (ctx == NULL)",
          "218:    redisAppendCommand(ctx,",
          "225:   redisvAppendCommand(ctx, format, args);",
          "230:    redisGetReply(ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "234:   rctx = oidc_cache_redis_connect(r, context);",
          "235:   if ((rctx == NULL) || (rctx->ctx == NULL))",
          "239:    redisAppendCommand(rctx->ctx,",
          "246:   redisvAppendCommand(rctx->ctx, format, args);",
          "251:    redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "243:   reply = NULL;",
          "247:   if (reply != NULL) {",
          "",
          "[Removed Lines]",
          "244:   redisGetReply(ctx, (void **) &reply);",
          "",
          "[Added Lines]",
          "265:   redisGetReply(rctx->ctx, (void **) &reply);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "257:   oidc_error(r,",
          "258:     \"redisvAppendCommand/redisGetReply (%d) failed, disconnecting: '%s'\",",
          "265:  }",
          "267:  return reply;",
          "",
          "[Removed Lines]",
          "259:     i, ctx->errstr);",
          "262:   redisFree(ctx);",
          "263:   apr_pool_userdata_set(NULL, OIDC_CACHE_REDIS_CONTEXT,",
          "264:     apr_pool_cleanup_null, r->server->process->pool);",
          "",
          "[Added Lines]",
          "280:     i, rctx->ctx->errstr);",
          "283:   oidc_cache_redis_free(rctx);",
          "",
          "---------------"
        ]
      }
    }
  ]
}