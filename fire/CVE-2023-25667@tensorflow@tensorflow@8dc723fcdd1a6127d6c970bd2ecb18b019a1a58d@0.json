{
  "cve_id": "CVE-2023-25667",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when `2^31 <= num_frames * height * width * channels < 2^32`, for example Full HD screencast of at least 346 frames. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.\n",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
  "patch_info": {
    "commit_hash": "8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
    "files": [
      "tensorflow/core/kernels/image/decode_image_op.cc",
      "tensorflow/core/lib/gif/gif_io.cc",
      "tensorflow/core/lib/gif/gif_io_test.cc",
      "tensorflow/core/lib/gif/testdata/3g_multiframe.gif",
      "tensorflow/core/lib/gif/testdata/BUILD"
    ],
    "message": "Fix integer overflow for multiframe gifs.",
    "before_after_code_files": [
      "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
      "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
      "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
      "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "454:     Tensor* output = nullptr;",
      "456:     string error_string;",
      "457:     uint8* buffer = gif::Decode(",
      "458:         input.data(), input.size(),",
      "459:         [&](int num_frames, int width, int height, int channels) -> uint8* {",
      "462:           Status status;",
      "",
      "[Removed Lines]",
      "455:     int buffer_size = 0;",
      "460:           buffer_size = num_frames * height * width * channels;",
      "",
      "[Added Lines]",
      "455:     ptrdiff_t buffer_size = 0;",
      "460:           buffer_size = ptrdiff_t(num_frames) * height * width * channels;",
      "",
      "---------------"
    ],
    "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc": [
      "File: tensorflow/core/lib/gif/gif_io.cc -> tensorflow/core/lib/gif/gif_io.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   uint8* const dstdata =",
      "106:       allocate_output(target_num_frames, width, height, channel);",
      "107:   if (!dstdata) return nullptr;",
      "109:     uint8* this_dst = dstdata + k * width * channel * height;",
      "111:     SavedImage* this_image = &gif_file->SavedImages[k];",
      "",
      "[Removed Lines]",
      "108:   for (int k = 0; k < target_num_frames; k++) {",
      "",
      "[Added Lines]",
      "108:   for (ptrdiff_t k = 0; k < target_num_frames; k++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "126:     if (k > 0) {",
      "127:       uint8* last_dst = dstdata + (k - 1) * width * channel * height;",
      "129:         uint8* p_dst = this_dst + i * width * channel;",
      "130:         uint8* l_dst = last_dst + i * width * channel;",
      "132:           p_dst[j * channel + 0] = l_dst[j * channel + 0];",
      "133:           p_dst[j * channel + 1] = l_dst[j * channel + 1];",
      "134:           p_dst[j * channel + 2] = l_dst[j * channel + 2];",
      "",
      "[Removed Lines]",
      "128:       for (int i = 0; i < height; ++i) {",
      "131:         for (int j = 0; j < width; ++j) {",
      "",
      "[Added Lines]",
      "128:       for (ptrdiff_t i = 0; i < height; ++i) {",
      "131:         for (ptrdiff_t j = 0; j < width; ++j) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "143:       if (k == 0) {",
      "145:           uint8* p_dst = this_dst + i * width * channel;",
      "147:             p_dst[j * channel + 0] = 0;",
      "148:             p_dst[j * channel + 1] = 0;",
      "149:             p_dst[j * channel + 2] = 0;",
      "",
      "[Removed Lines]",
      "144:         for (int i = 0; i < height; ++i) {",
      "146:           for (int j = 0; j < width; ++j) {",
      "",
      "[Added Lines]",
      "144:         for (ptrdiff_t i = 0; i < height; ++i) {",
      "146:           for (ptrdiff_t j = 0; j < width; ++j) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "165:       return nullptr;",
      "166:     }",
      "169:       uint8* p_dst = this_dst + i * width * channel;",
      "171:         GifByteType color_index =",
      "172:             this_image->RasterBits[(i - img_desc->Top) * (img_desc->Width) +",
      "173:                                    (j - img_desc->Left)];",
      "",
      "[Removed Lines]",
      "168:     for (int i = imgTop; i < imgBottom; ++i) {",
      "170:       for (int j = imgLeft; j < imgRight; ++j) {",
      "",
      "[Added Lines]",
      "168:     for (ptrdiff_t i = imgTop; i < imgBottom; ++i) {",
      "170:       for (ptrdiff_t j = imgLeft; j < imgRight; ++j) {",
      "",
      "---------------"
    ],
    "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc": [
      "File: tensorflow/core/lib/gif/gif_io_test.cc -> tensorflow/core/lib/gif/gif_io_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:         w = width;",
      "53:         h = height;",
      "54:         c = channels;",
      "56:       },",
      "57:       &error_string));",
      "58:   ASSERT_NE(imgdata, nullptr);",
      "",
      "[Removed Lines]",
      "55:         return new uint8[frame_cnt * height * width * channels];",
      "",
      "[Added Lines]",
      "55:         return new uint8[ptrdiff_t(frame_cnt) * height * width * channels];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:        {testdata_path + \"optimized.gif\", 12, 20, 40, 3},",
      "73:        {testdata_path + \"red_black.gif\", 1, 16, 16, 3},",
      "74:        {testdata_path + \"scan.gif\", 12, 20, 40, 3},",
      "77:   for (const auto& tc : testcases) {",
      "78:     TestDecodeGif(env, tc);",
      "",
      "[Removed Lines]",
      "75:        {testdata_path + \"squares.gif\", 2, 16, 16, 3}});",
      "",
      "[Added Lines]",
      "75:        {testdata_path + \"squares.gif\", 2, 16, 16, 3},",
      "76:        {testdata_path + \"3g_multiframe.gif\", 519, 1920, 1080, 3}});",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "65e742fba0d33e92ab282fd8bb88d157a59161e2",
      "candidate_info": {
        "commit_hash": "65e742fba0d33e92ab282fd8bb88d157a59161e2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/65e742fba0d33e92ab282fd8bb88d157a59161e2",
        "files": [
          "tensorflow/core/lib/gif/gif_io_test.cc"
        ],
        "message": "Update tensorflow/core/lib/gif/gif_io_test.cc",
        "before_after_code_files": [
          "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
          ],
          "candidate": [
            "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc": [
          "File: tensorflow/core/lib/gif/gif_io_test.cc -> tensorflow/core/lib/gif/gif_io_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         w = width;",
          "53:         h = height;",
          "54:         c = channels;",
          "56:       },",
          "57:       &error_string));",
          "58:   ASSERT_NE(imgdata, nullptr);",
          "",
          "[Removed Lines]",
          "55:         return new uint8[int64_t(frame_cnt) * height * width * channels];",
          "",
          "[Added Lines]",
          "55:         return new uint8[static_cast<int64_t>(frame_cnt) * height * width * channels];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6965f231b8b1ab37f604fcb00816d79c0cb11302",
      "candidate_info": {
        "commit_hash": "6965f231b8b1ab37f604fcb00816d79c0cb11302",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6965f231b8b1ab37f604fcb00816d79c0cb11302",
        "files": [
          "tensorflow/core/kernels/image/decode_image_op.cc",
          "tensorflow/core/lib/gif/gif_io.cc",
          "tensorflow/core/lib/gif/gif_io_test.cc"
        ],
        "message": "Replace ptrdiff_t with int64_t.",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
          "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
          "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
            "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
            "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
            "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
            "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
          "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:     Tensor* output = nullptr;",
          "456:     string error_string;",
          "457:     uint8* buffer = gif::Decode(",
          "458:         input.data(), input.size(),",
          "459:         [&](int num_frames, int width, int height, int channels) -> uint8* {",
          "462:           Status status;",
          "",
          "[Removed Lines]",
          "455:     ptrdiff_t buffer_size = 0;",
          "460:           buffer_size = ptrdiff_t(num_frames) * height * width * channels;",
          "",
          "[Added Lines]",
          "455:     int64_t buffer_size = 0;",
          "460:           buffer_size = int64_t(num_frames) * height * width * channels;",
          "",
          "---------------"
        ],
        "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc": [
          "File: tensorflow/core/lib/gif/gif_io.cc -> tensorflow/core/lib/gif/gif_io.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   uint8* const dstdata =",
          "106:       allocate_output(target_num_frames, width, height, channel);",
          "107:   if (!dstdata) return nullptr;",
          "109:     uint8* this_dst = dstdata + k * width * channel * height;",
          "111:     SavedImage* this_image = &gif_file->SavedImages[k];",
          "",
          "[Removed Lines]",
          "108:   for (ptrdiff_t k = 0; k < target_num_frames; k++) {",
          "",
          "[Added Lines]",
          "108:   for (int64_t k = 0; k < target_num_frames; k++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     if (k > 0) {",
          "127:       uint8* last_dst = dstdata + (k - 1) * width * channel * height;",
          "129:         uint8* p_dst = this_dst + i * width * channel;",
          "130:         uint8* l_dst = last_dst + i * width * channel;",
          "132:           p_dst[j * channel + 0] = l_dst[j * channel + 0];",
          "133:           p_dst[j * channel + 1] = l_dst[j * channel + 1];",
          "134:           p_dst[j * channel + 2] = l_dst[j * channel + 2];",
          "",
          "[Removed Lines]",
          "128:       for (ptrdiff_t i = 0; i < height; ++i) {",
          "131:         for (ptrdiff_t j = 0; j < width; ++j) {",
          "",
          "[Added Lines]",
          "128:       for (int64_t i = 0; i < height; ++i) {",
          "131:         for (int64_t j = 0; j < width; ++j) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:       if (k == 0) {",
          "145:           uint8* p_dst = this_dst + i * width * channel;",
          "147:             p_dst[j * channel + 0] = 0;",
          "148:             p_dst[j * channel + 1] = 0;",
          "149:             p_dst[j * channel + 2] = 0;",
          "",
          "[Removed Lines]",
          "144:         for (ptrdiff_t i = 0; i < height; ++i) {",
          "146:           for (ptrdiff_t j = 0; j < width; ++j) {",
          "",
          "[Added Lines]",
          "144:         for (int64_t i = 0; i < height; ++i) {",
          "146:           for (int64_t j = 0; j < width; ++j) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:       return nullptr;",
          "166:     }",
          "169:       uint8* p_dst = this_dst + i * width * channel;",
          "171:         GifByteType color_index =",
          "172:             this_image->RasterBits[(i - img_desc->Top) * (img_desc->Width) +",
          "173:                                    (j - img_desc->Left)];",
          "",
          "[Removed Lines]",
          "168:     for (ptrdiff_t i = imgTop; i < imgBottom; ++i) {",
          "170:       for (ptrdiff_t j = imgLeft; j < imgRight; ++j) {",
          "",
          "[Added Lines]",
          "168:     for (int64_t i = imgTop; i < imgBottom; ++i) {",
          "170:       for (int64_t j = imgLeft; j < imgRight; ++j) {",
          "",
          "---------------"
        ],
        "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc": [
          "File: tensorflow/core/lib/gif/gif_io_test.cc -> tensorflow/core/lib/gif/gif_io_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         w = width;",
          "53:         h = height;",
          "54:         c = channels;",
          "56:       },",
          "57:       &error_string));",
          "58:   ASSERT_NE(imgdata, nullptr);",
          "",
          "[Removed Lines]",
          "55:         return new uint8[ptrdiff_t(frame_cnt) * height * width * channels];",
          "",
          "[Added Lines]",
          "55:         return new uint8[int64_t(frame_cnt) * height * width * channels];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b7c684b9e397b0c22e8e96c71d440ebe19bb90c",
      "candidate_info": {
        "commit_hash": "7b7c684b9e397b0c22e8e96c71d440ebe19bb90c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/7b7c684b9e397b0c22e8e96c71d440ebe19bb90c",
        "files": [
          "tensorflow/core/kernels/image/decode_image_op.cc"
        ],
        "message": "Update tensorflow/core/kernels/image/decode_image_op.cc",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
          "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "457:     uint8* buffer = gif::Decode(",
          "458:         input.data(), input.size(),",
          "459:         [&](int num_frames, int width, int height, int channels) -> uint8* {",
          "462:           Status status;",
          "",
          "[Removed Lines]",
          "460:           buffer_size = int64_t(num_frames) * height * width * channels;",
          "",
          "[Added Lines]",
          "460:           buffer_size = static_cast<int64_t>(num_frames) * height * width * channels;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5492d0394cdd0f7020f6b7054bc916617329b706",
      "candidate_info": {
        "commit_hash": "5492d0394cdd0f7020f6b7054bc916617329b706",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/5492d0394cdd0f7020f6b7054bc916617329b706",
        "files": [
          "tensorflow/core/kernels/image/decode_image_op.cc",
          "tensorflow/core/lib/gif/gif_io.cc",
          "tensorflow/core/lib/gif/gif_io_test.cc",
          "tensorflow/core/lib/gif/testdata/3g_multiframe.gif",
          "tensorflow/core/lib/gif/testdata/BUILD"
        ],
        "message": "Fix integer overflow for multiframe gifs.",
        "before_after_code_files": [
          "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
          "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
          "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
            "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
            "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc",
            "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc",
            "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/image/decode_image_op.cc||tensorflow/core/kernels/image/decode_image_op.cc": [
          "File: tensorflow/core/kernels/image/decode_image_op.cc -> tensorflow/core/kernels/image/decode_image_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:     Tensor* output = nullptr;",
          "456:     string error_string;",
          "457:     uint8* buffer = gif::Decode(",
          "458:         input.data(), input.size(),",
          "459:         [&](int num_frames, int width, int height, int channels) -> uint8* {",
          "462:           Status status;",
          "",
          "[Removed Lines]",
          "455:     int buffer_size = 0;",
          "460:           buffer_size = num_frames * height * width * channels;",
          "",
          "[Added Lines]",
          "455:     ptrdiff_t buffer_size = 0;",
          "460:           buffer_size = ptrdiff_t(num_frames) * height * width * channels;",
          "",
          "---------------"
        ],
        "tensorflow/core/lib/gif/gif_io.cc||tensorflow/core/lib/gif/gif_io.cc": [
          "File: tensorflow/core/lib/gif/gif_io.cc -> tensorflow/core/lib/gif/gif_io.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   uint8* const dstdata =",
          "106:       allocate_output(target_num_frames, width, height, channel);",
          "107:   if (!dstdata) return nullptr;",
          "109:     uint8* this_dst = dstdata + k * width * channel * height;",
          "111:     SavedImage* this_image = &gif_file->SavedImages[k];",
          "",
          "[Removed Lines]",
          "108:   for (int k = 0; k < target_num_frames; k++) {",
          "",
          "[Added Lines]",
          "108:   for (ptrdiff_t k = 0; k < target_num_frames; k++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     if (k > 0) {",
          "127:       uint8* last_dst = dstdata + (k - 1) * width * channel * height;",
          "129:         uint8* p_dst = this_dst + i * width * channel;",
          "130:         uint8* l_dst = last_dst + i * width * channel;",
          "132:           p_dst[j * channel + 0] = l_dst[j * channel + 0];",
          "133:           p_dst[j * channel + 1] = l_dst[j * channel + 1];",
          "134:           p_dst[j * channel + 2] = l_dst[j * channel + 2];",
          "",
          "[Removed Lines]",
          "128:       for (int i = 0; i < height; ++i) {",
          "131:         for (int j = 0; j < width; ++j) {",
          "",
          "[Added Lines]",
          "128:       for (ptrdiff_t i = 0; i < height; ++i) {",
          "131:         for (ptrdiff_t j = 0; j < width; ++j) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:       if (k == 0) {",
          "145:           uint8* p_dst = this_dst + i * width * channel;",
          "147:             p_dst[j * channel + 0] = 0;",
          "148:             p_dst[j * channel + 1] = 0;",
          "149:             p_dst[j * channel + 2] = 0;",
          "",
          "[Removed Lines]",
          "144:         for (int i = 0; i < height; ++i) {",
          "146:           for (int j = 0; j < width; ++j) {",
          "",
          "[Added Lines]",
          "144:         for (ptrdiff_t i = 0; i < height; ++i) {",
          "146:           for (ptrdiff_t j = 0; j < width; ++j) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:       return nullptr;",
          "166:     }",
          "169:       uint8* p_dst = this_dst + i * width * channel;",
          "171:         GifByteType color_index =",
          "172:             this_image->RasterBits[(i - img_desc->Top) * (img_desc->Width) +",
          "173:                                    (j - img_desc->Left)];",
          "",
          "[Removed Lines]",
          "168:     for (int i = imgTop; i < imgBottom; ++i) {",
          "170:       for (int j = imgLeft; j < imgRight; ++j) {",
          "",
          "[Added Lines]",
          "168:     for (ptrdiff_t i = imgTop; i < imgBottom; ++i) {",
          "170:       for (ptrdiff_t j = imgLeft; j < imgRight; ++j) {",
          "",
          "---------------"
        ],
        "tensorflow/core/lib/gif/gif_io_test.cc||tensorflow/core/lib/gif/gif_io_test.cc": [
          "File: tensorflow/core/lib/gif/gif_io_test.cc -> tensorflow/core/lib/gif/gif_io_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         w = width;",
          "53:         h = height;",
          "54:         c = channels;",
          "56:       },",
          "57:       &error_string));",
          "58:   ASSERT_NE(imgdata, nullptr);",
          "",
          "[Removed Lines]",
          "55:         return new uint8[frame_cnt * height * width * channels];",
          "",
          "[Added Lines]",
          "55:         return new uint8[ptrdiff_t(frame_cnt) * height * width * channels];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:        {testdata_path + \"optimized.gif\", 12, 20, 40, 3},",
          "73:        {testdata_path + \"red_black.gif\", 1, 16, 16, 3},",
          "74:        {testdata_path + \"scan.gif\", 12, 20, 40, 3},",
          "77:   for (const auto& tc : testcases) {",
          "78:     TestDecodeGif(env, tc);",
          "",
          "[Removed Lines]",
          "75:        {testdata_path + \"squares.gif\", 2, 16, 16, 3}});",
          "",
          "[Added Lines]",
          "75:        {testdata_path + \"squares.gif\", 2, 16, 16, 3},",
          "76:        {testdata_path + \"3g_multiframe.gif\", 519, 1920, 1080, 3}});",
          "",
          "---------------"
        ]
      }
    }
  ]
}