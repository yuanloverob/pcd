{
  "cve_id": "CVE-2020-12279",
  "cve_desc": "An issue was discovered in libgit2 before 0.28.4 and 0.9x before 0.99.0. checkout.c mishandles equivalent filenames that exist because of NTFS short names. This may allow remote code execution when cloning a repository. This issue is similar to CVE-2019-1353.",
  "repo": "libgit2/libgit2",
  "patch_hash": "64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
  "patch_info": {
    "commit_hash": "64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
    "repo": "libgit2/libgit2",
    "commit_url": "https://github.com/libgit2/libgit2/commit/64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
    "files": [
      "src/checkout.c",
      "tests/checkout/nasty.c"
    ],
    "message": "Protect against 8.3 \"short name\" attacks also on Linux/macOS\n\nThe Windows Subsystem for Linux (WSL) is getting increasingly popular,\nin particular because it makes it _so_ easy to run Linux software on\nWindows' files, via the auto-mounted Windows drives (`C:\\` is mapped to\n`/mnt/c/`, no need to set that up manually).\n\nUnfortunately, files/directories on the Windows drives can be accessed\nvia their _short names_, if that feature is enabled (which it is on the\n`C:` drive by default).\n\nWhich means that we have to safeguard even our Linux users against the\nshort name attacks.\n\nFurther, while the default options of CIFS/SMB-mounts seem to disallow\naccessing files on network shares via their short names on Linux/macOS,\nit _is_ possible to do so with the right options.\n\nSo let's just safe-guard against short name attacks _everywhere_.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
    "before_after_code_files": [
      "src/checkout.c||src/checkout.c",
      "tests/checkout/nasty.c||tests/checkout/nasty.c"
    ]
  },
  "patch_diff": {
    "src/checkout.c||src/checkout.c": [
      "File: src/checkout.c -> src/checkout.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1271:  int action,",
      "1272:  git_diff_delta *delta)",
      "1273: {",
      "1276:  if (action & CHECKOUT_ACTION__REMOVE) {",
      "1277:   if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
      "",
      "[Removed Lines]",
      "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;",
      "",
      "[Added Lines]",
      "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;",
      "",
      "---------------"
    ],
    "tests/checkout/nasty.c||tests/checkout/nasty.c": [
      "File: tests/checkout/nasty.c -> tests/checkout/nasty.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: void test_checkout_nasty__git_tilde1(void)",
      "208: {",
      "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \".git/foobar\");",
      "212: }",
      "",
      "[Removed Lines]",
      "209: #ifdef GIT_WIN32",
      "211: #endif",
      "",
      "[Added Lines]",
      "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \"git~1/foobar\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d9c0c9cf6827ba51458c54082f96f0bb1259425e",
      "candidate_info": {
        "commit_hash": "d9c0c9cf6827ba51458c54082f96f0bb1259425e",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/d9c0c9cf6827ba51458c54082f96f0bb1259425e",
        "files": [
          "tests/index/tests.c"
        ],
        "message": "test: ensure we can't add a protected path\n\nTest that when we enable core.protectNTFS that we cannot add\nplatform-specific invalid paths to the index.",
        "before_after_code_files": [
          "tests/index/tests.c||tests/index/tests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/index/tests.c||tests/index/tests.c": [
          "File: tests/index/tests.c -> tests/index/tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:  cl_fixture_cleanup(\"invalid\");",
          "591: }",
          "593: static void replace_char(char *str, char in, char out)",
          "594: {",
          "595:  char *c = str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: static void assert_add_fails(git_repository *repo, const char *fn)",
          "594: {",
          "595:  git_index *index;",
          "596:  git_buf path = GIT_BUF_INIT;",
          "597:  git_index_entry entry = {{0}};",
          "599:  cl_git_pass(git_repository_index(&index, repo));",
          "600:  cl_assert(git_index_entrycount(index) == 0);",
          "602:  entry.path = fn;",
          "603:  entry.mode = GIT_FILEMODE_BLOB;",
          "604:  cl_git_pass(git_oid_fromstr(&entry.id, \"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\"));",
          "606:  cl_git_fail(git_index_add(index, &entry));",
          "608:  cl_assert(git_index_entrycount(index) == 0);",
          "610:  git_buf_dispose(&path);",
          "611:  git_index_free(index);",
          "612: }",
          "618: void test_index_tests__cannot_add_protected_invalid_filename(void)",
          "619: {",
          "620:  git_repository *repo;",
          "621:  git_index *index;",
          "623:  cl_must_pass(p_mkdir(\"invalid\", 0700));",
          "625:  cl_git_pass(git_repository_init(&repo, \"./invalid\", 0));",
          "628:  cl_git_pass(git_repository_index(&index, repo));",
          "629:  cl_git_mkfile(\"invalid/dummy.txt\", \"\");",
          "630:  cl_git_pass(git_index_add_bypath(index, \"dummy.txt\"));",
          "631:  cl_must_pass(p_unlink(\"invalid/dummy.txt\"));",
          "632:  cl_git_pass(git_index_remove_bypath(index, \"dummy.txt\"));",
          "633:  git_index_free(index);",
          "635:  cl_repo_set_bool(repo, \"core.protectHFS\", true);",
          "636:  cl_repo_set_bool(repo, \"core.protectNTFS\", true);",
          "638:  assert_add_fails(repo, \".git./hello\");",
          "639:  assert_add_fails(repo, \".git\\xe2\\x80\\xad/hello\");",
          "640:  assert_add_fails(repo, \"git~1/hello\");",
          "641:  assert_add_fails(repo, \".git\\xe2\\x81\\xaf/hello\");",
          "642:  assert_add_fails(repo, \".git::$INDEX_ALLOCATION/dummy-file\");",
          "644:  git_repository_free(repo);",
          "646:  cl_fixture_cleanup(\"invalid\");",
          "647: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d29d4de2d8982a709e38490c699182a534812e26",
      "candidate_info": {
        "commit_hash": "d29d4de2d8982a709e38490c699182a534812e26",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/d29d4de2d8982a709e38490c699182a534812e26",
        "files": [
          "tests/clar_libgit2.h"
        ],
        "message": "cl_git_fail: do not report bogus error message\n\nWhen we expect a checkout operation to fail, but it succeeds, we\nactually do not want to see the error messages that were generated in\nthe meantime for errors that were handled gracefully by the code (e.g.\nwhen an object could not be found in a pack: in this case, the next\nbackend would have been given a chance to look up the object, and\nprobably would have found it because the checkout succeeded, after all).\n\nWhich means that in the specific case of `cl_git_fail()`, we actually\nwant to clear the global error state _after_ evaluating the command: we\nknow that any still-available error would be bogus, seeing as the\ncommand succeeded (unexpectedly).\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "tests/clar_libgit2.h||tests/clar_libgit2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libgit2/libgit2/pull/5331"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/clar_libgit2.h||tests/clar_libgit2.h": [
          "File: tests/clar_libgit2.h -> tests/clar_libgit2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define cl_git_fail(expr) do { \\",
          "33:  if ((expr) == 0) \\",
          "34:   cl_git_report_failure(0, 0, __FILE__, __LINE__, \"Function call succeeded: \" #expr); \\",
          "35:  } while (0)",
          "",
          "[Removed Lines]",
          "32:  git_error_clear(); \\",
          "",
          "[Added Lines]",
          "33:   git_error_clear(), \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4034dfa568b28651305364cd3367ac47cdc79d8",
      "candidate_info": {
        "commit_hash": "e4034dfa568b28651305364cd3367ac47cdc79d8",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/e4034dfa568b28651305364cd3367ac47cdc79d8",
        "files": [
          "src/checkout.c",
          "src/path.c",
          "src/repository.h",
          "tests/index/tests.c"
        ],
        "message": "path: protect NTFS everywhere\n\nEnable core.protectNTFS by default everywhere and in every codepath, not\njust on checkout.",
        "before_after_code_files": [
          "src/checkout.c||src/checkout.c",
          "src/path.c||src/path.c",
          "src/repository.h||src/repository.h",
          "tests/index/tests.c||tests/index/tests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/checkout.c||src/checkout.c"
          ],
          "candidate": [
            "src/checkout.c||src/checkout.c"
          ]
        }
      },
      "candidate_diff": {
        "src/checkout.c||src/checkout.c": [
          "File: src/checkout.c -> src/checkout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1271:  int action,",
          "1272:  git_diff_delta *delta)",
          "1273: {",
          "1276:  if (action & CHECKOUT_ACTION__REMOVE) {",
          "1277:   if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
          "",
          "[Removed Lines]",
          "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;",
          "",
          "[Added Lines]",
          "1274:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;",
          "",
          "---------------"
        ],
        "src/path.c||src/path.c": [
          "File: src/path.c -> src/path.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1832:  git_repository *repo,",
          "1833:  unsigned int flags)",
          "1834: {",
          "1836:  int error = 0;",
          "1838:  flags |= GIT_PATH_REJECT_DOT_GIT_LITERAL;",
          "",
          "[Removed Lines]",
          "1835:  int protectHFS = 0, protectNTFS = 0;",
          "",
          "[Added Lines]",
          "1835:  int protectHFS = 0, protectNTFS = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1841:  protectHFS = 1;",
          "1842: #endif",
          "1848:  if (repo && !protectHFS)",
          "1849:   error = git_repository__configmap_lookup(&protectHFS, repo, GIT_CONFIGMAP_PROTECTHFS);",
          "1850:  if (!error && protectHFS)",
          "1851:   flags |= GIT_PATH_REJECT_DOT_GIT_HFS;",
          "1854:   error = git_repository__configmap_lookup(&protectNTFS, repo, GIT_CONFIGMAP_PROTECTNTFS);",
          "1855:  if (!error && protectNTFS)",
          "1856:   flags |= GIT_PATH_REJECT_DOT_GIT_NTFS;",
          "",
          "[Removed Lines]",
          "1844: #ifdef GIT_WIN32",
          "1845:  protectNTFS = 1;",
          "1846: #endif",
          "1853:  if (repo && !protectNTFS)",
          "",
          "[Added Lines]",
          "1849:  if (repo)",
          "",
          "---------------"
        ],
        "src/repository.h||src/repository.h": [
          "File: src/repository.h -> src/repository.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  GIT_PROTECTHFS_DEFAULT = GIT_CONFIGMAP_FALSE,",
          "118:  GIT_FSYNCOBJECTFILES_DEFAULT = GIT_CONFIGMAP_FALSE,",
          "119: } git_configmap_value;",
          "",
          "[Removed Lines]",
          "116:  GIT_PROTECTNTFS_DEFAULT = GIT_CONFIGMAP_FALSE,",
          "",
          "[Added Lines]",
          "116:  GIT_PROTECTNTFS_DEFAULT = GIT_CONFIGMAP_TRUE,",
          "",
          "---------------"
        ],
        "tests/index/tests.c||tests/index/tests.c": [
          "File: tests/index/tests.c -> tests/index/tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "765:  cl_fixture_cleanup(\"invalid\");",
          "766: }",
          "768: void test_index_tests__remove_entry(void)",
          "769: {",
          "770:  git_repository *repo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768: void test_index_tests__protectntfs_on_by_default(void)",
          "769: {",
          "770:  git_repository *repo;",
          "772:  p_mkdir(\"invalid\", 0700);",
          "774:  cl_git_pass(git_repository_init(&repo, \"./invalid\", 0));",
          "775:  assert_write_fails(repo, \".git./hello\");",
          "776:  assert_write_fails(repo, \"git~1/hello\");",
          "778:  git_repository_free(repo);",
          "780:  cl_fixture_cleanup(\"invalid\");",
          "781: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca8a4cd363bff7c482bb434d018610ffaeb213bf",
      "candidate_info": {
        "commit_hash": "ca8a4cd363bff7c482bb434d018610ffaeb213bf",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/ca8a4cd363bff7c482bb434d018610ffaeb213bf",
        "files": [
          "src/checkout.c",
          "tests/checkout/nasty.c"
        ],
        "message": "Protect against 8.3 \"short name\" attacks also on Linux/macOS\n\nThe Windows Subsystem for Linux (WSL) is getting increasingly popular,\nin particular because it makes it _so_ easy to run Linux software on\nWindows' files, via the auto-mounted Windows drives (`C:\\` is mapped to\n`/mnt/c/`, no need to set that up manually).\n\nUnfortunately, files/directories on the Windows drives can be accessed\nvia their _short names_, if that feature is enabled (which it is on the\n`C:` drive by default).\n\nWhich means that we have to safeguard even our Linux users against the\nshort name attacks.\n\nFurther, while the default options of CIFS/SMB-mounts seem to disallow\naccessing files on network shares via their short names on Linux/macOS,\nit _is_ possible to do so with the right options.\n\nSo let's just safe-guard against short name attacks _everywhere_.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "src/checkout.c||src/checkout.c",
          "tests/checkout/nasty.c||tests/checkout/nasty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/checkout.c||src/checkout.c",
            "tests/checkout/nasty.c||tests/checkout/nasty.c"
          ],
          "candidate": [
            "src/checkout.c||src/checkout.c",
            "tests/checkout/nasty.c||tests/checkout/nasty.c"
          ]
        }
      },
      "candidate_diff": {
        "src/checkout.c||src/checkout.c": [
          "File: src/checkout.c -> src/checkout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:  int action,",
          "1274:  git_diff_delta *delta)",
          "1275: {",
          "1278:  if (action & CHECKOUT_ACTION__REMOVE) {",
          "1279:   if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
          "",
          "[Removed Lines]",
          "1276:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;",
          "",
          "[Added Lines]",
          "1276:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;",
          "",
          "---------------"
        ],
        "tests/checkout/nasty.c||tests/checkout/nasty.c": [
          "File: tests/checkout/nasty.c -> tests/checkout/nasty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: void test_checkout_nasty__git_tilde1(void)",
          "208: {",
          "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \".git/foobar\");",
          "212: }",
          "",
          "[Removed Lines]",
          "209: #ifdef GIT_WIN32",
          "211: #endif",
          "",
          "[Added Lines]",
          "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \"git~1/foobar\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bf80ab07bc8a7575dc7f972b7b5c7409355d210",
      "candidate_info": {
        "commit_hash": "7bf80ab07bc8a7575dc7f972b7b5c7409355d210",
        "repo": "libgit2/libgit2",
        "commit_url": "https://github.com/libgit2/libgit2/commit/7bf80ab07bc8a7575dc7f972b7b5c7409355d210",
        "files": [
          "src/checkout.c",
          "tests/checkout/nasty.c"
        ],
        "message": "Protect against 8.3 \"short name\" attacks also on Linux/macOS\n\nThe Windows Subsystem for Linux (WSL) is getting increasingly popular,\nin particular because it makes it _so_ easy to run Linux software on\nWindows' files, via the auto-mounted Windows drives (`C:\\` is mapped to\n`/mnt/c/`, no need to set that up manually).\n\nUnfortunately, files/directories on the Windows drives can be accessed\nvia their _short names_, if that feature is enabled (which it is on the\n`C:` drive by default).\n\nWhich means that we have to safeguard even our Linux users against the\nshort name attacks.\n\nFurther, while the default options of CIFS/SMB-mounts seem to disallow\naccessing files on network shares via their short names on Linux/macOS,\nit _is_ possible to do so with the right options.\n\nSo let's just safe-guard against short name attacks _everywhere_.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
        "before_after_code_files": [
          "src/checkout.c||src/checkout.c",
          "tests/checkout/nasty.c||tests/checkout/nasty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/checkout.c||src/checkout.c",
            "tests/checkout/nasty.c||tests/checkout/nasty.c"
          ],
          "candidate": [
            "src/checkout.c||src/checkout.c",
            "tests/checkout/nasty.c||tests/checkout/nasty.c"
          ]
        }
      },
      "candidate_diff": {
        "src/checkout.c||src/checkout.c": [
          "File: src/checkout.c -> src/checkout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:  int action,",
          "1274:  git_diff_delta *delta)",
          "1275: {",
          "1278:  if (action & CHECKOUT_ACTION__REMOVE) {",
          "1279:   if (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
          "",
          "[Removed Lines]",
          "1276:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;",
          "",
          "[Added Lines]",
          "1276:  unsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;",
          "",
          "---------------"
        ],
        "tests/checkout/nasty.c||tests/checkout/nasty.c": [
          "File: tests/checkout/nasty.c -> tests/checkout/nasty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: void test_checkout_nasty__git_tilde1(void)",
          "208: {",
          "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \".git/foobar\");",
          "212: }",
          "",
          "[Removed Lines]",
          "209: #ifdef GIT_WIN32",
          "211: #endif",
          "",
          "[Added Lines]",
          "210:  test_checkout_fails(\"refs/heads/git_tilde1\", \"git~1/foobar\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}