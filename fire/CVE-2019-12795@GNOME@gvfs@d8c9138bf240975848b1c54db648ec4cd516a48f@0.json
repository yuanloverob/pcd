{
  "cve_id": "CVE-2019-12795",
  "cve_desc": "daemon/gvfsdaemon.c in gvfsd from GNOME gvfs before 1.38.3, 1.40.x before 1.40.2, and 1.41.x before 1.41.3 opened a private D-Bus server socket without configuring an authorization rule. A local attacker could connect to this server socket and issue D-Bus method calls. (Note that the server socket only accepts a single connection, so the attacker would have to discover the server and connect to the socket before its owner does.)",
  "repo": "GNOME/gvfs",
  "patch_hash": "d8c9138bf240975848b1c54db648ec4cd516a48f",
  "patch_info": {
    "commit_hash": "d8c9138bf240975848b1c54db648ec4cd516a48f",
    "repo": "GNOME/gvfs",
    "commit_url": "https://github.com/GNOME/gvfs/commit/d8c9138bf240975848b1c54db648ec4cd516a48f",
    "files": [
      "daemon/gvfsdaemon.c"
    ],
    "message": "gvfsdaemon: Check that the connecting client is the same user\n\nOtherwise, an attacker who learns the abstract socket address from\nnetstat(8) or similar could connect to it and issue D-Bus method\ncalls.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
    "before_after_code_files": [
      "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
    ]
  },
  "patch_diff": {
    "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c": [
      "File: daemon/gvfsdaemon.c -> daemon/gvfsdaemon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:   gint mount_counter;",
      "82:   GDBusConnection *conn;",
      "83:   GVfsDBusDaemon *daemon_skeleton;",
      "84:   GVfsDBusMountable *mountable_skeleton;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:   GDBusAuthObserver *auth_observer;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:     }",
      "172:   if (daemon->conn != NULL)",
      "173:     g_object_unref (daemon->conn);",
      "175:   g_hash_table_destroy (daemon->registered_paths);",
      "176:   g_hash_table_destroy (daemon->client_connections);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:   if (daemon->auth_observer != NULL)",
      "176:     g_object_unref (daemon->auth_observer);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:   daemon->lost_main_daemon = TRUE;",
      "237: }",
      "239: static void",
      "240: g_vfs_daemon_init (GVfsDaemon *daemon)",
      "241: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "248: static gboolean",
      "249: authorize_authenticated_peer_cb (GDBusAuthObserver *observer,",
      "250:                                  G_GNUC_UNUSED GIOStream *stream,",
      "251:                                  GCredentials *credentials,",
      "252:                                  G_GNUC_UNUSED gpointer user_data)",
      "253: {",
      "254:   gboolean authorized = FALSE;",
      "256:   if (credentials != NULL)",
      "257:     {",
      "258:       GCredentials *own_credentials;",
      "260:       own_credentials = g_credentials_new ();",
      "262:       if (g_credentials_is_same_user (credentials, own_credentials, NULL))",
      "263:         authorized = TRUE;",
      "265:       g_object_unref (own_credentials);",
      "266:     }",
      "268:   return authorized;",
      "269: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "266:   daemon->conn = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);",
      "267:   g_assert (daemon->conn != NULL);",
      "269:   daemon->daemon_skeleton = gvfs_dbus_daemon_skeleton_new ();",
      "270:   g_signal_connect (daemon->daemon_skeleton, \"handle-get-connection\", G_CALLBACK (handle_get_connection), daemon);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "300:   daemon->auth_observer = g_dbus_auth_observer_new ();",
      "301:   g_signal_connect (daemon->auth_observer, \"authorize-authenticated-peer\", G_CALLBACK (authorize_authenticated_peer_cb), NULL);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "876:   server = g_dbus_server_new_sync (address1,",
      "877:                                    G_DBUS_SERVER_FLAGS_NONE,",
      "878:                                    guid,",
      "881:                                    &error);",
      "882:   g_free (guid);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "913:                                    daemon->auth_observer,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3808a1b4042761055b1d975333a8243d67b8bfe",
      "candidate_info": {
        "commit_hash": "e3808a1b4042761055b1d975333a8243d67b8bfe",
        "repo": "GNOME/gvfs",
        "commit_url": "https://github.com/GNOME/gvfs/commit/e3808a1b4042761055b1d975333a8243d67b8bfe",
        "files": [
          "daemon/gvfsdaemon.c"
        ],
        "message": "gvfsdaemon: Check that the connecting client is the same user\n\nOtherwise, an attacker who learns the abstract socket address from\nnetstat(8) or similar could connect to it and issue D-Bus method\ncalls.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
          ],
          "candidate": [
            "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
          ]
        }
      },
      "candidate_diff": {
        "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c": [
          "File: daemon/gvfsdaemon.c -> daemon/gvfsdaemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   gint mount_counter;",
          "82:   GDBusConnection *conn;",
          "83:   GVfsDBusDaemon *daemon_skeleton;",
          "84:   GVfsDBusMountable *mountable_skeleton;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   GDBusAuthObserver *auth_observer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     }",
          "172:   if (daemon->conn != NULL)",
          "173:     g_object_unref (daemon->conn);",
          "175:   g_hash_table_destroy (daemon->registered_paths);",
          "176:   g_hash_table_destroy (daemon->client_connections);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   if (daemon->auth_observer != NULL)",
          "176:     g_object_unref (daemon->auth_observer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:   daemon->lost_main_daemon = TRUE;",
          "237: }",
          "239: static void",
          "240: g_vfs_daemon_init (GVfsDaemon *daemon)",
          "241: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: static gboolean",
          "249: authorize_authenticated_peer_cb (GDBusAuthObserver *observer,",
          "250:                                  G_GNUC_UNUSED GIOStream *stream,",
          "251:                                  GCredentials *credentials,",
          "252:                                  G_GNUC_UNUSED gpointer user_data)",
          "253: {",
          "254:   gboolean authorized = FALSE;",
          "256:   if (credentials != NULL)",
          "257:     {",
          "258:       GCredentials *own_credentials;",
          "260:       own_credentials = g_credentials_new ();",
          "262:       if (g_credentials_is_same_user (credentials, own_credentials, NULL))",
          "263:         authorized = TRUE;",
          "265:       g_object_unref (own_credentials);",
          "266:     }",
          "268:   return authorized;",
          "269: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "266:   daemon->conn = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);",
          "267:   g_assert (daemon->conn != NULL);",
          "269:   daemon->daemon_skeleton = gvfs_dbus_daemon_skeleton_new ();",
          "270:   g_signal_connect (daemon->daemon_skeleton, \"handle-get-connection\", G_CALLBACK (handle_get_connection), daemon);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:   daemon->auth_observer = g_dbus_auth_observer_new ();",
          "301:   g_signal_connect (daemon->auth_observer, \"authorize-authenticated-peer\", G_CALLBACK (authorize_authenticated_peer_cb), NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "876:   server = g_dbus_server_new_sync (address1,",
          "877:                                    G_DBUS_SERVER_FLAGS_NONE,",
          "878:                                    guid,",
          "881:                                    &error);",
          "882:   g_free (guid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913:                                    daemon->auth_observer,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70dbfc68a79faac49bd3423e079cb6902522082a",
      "candidate_info": {
        "commit_hash": "70dbfc68a79faac49bd3423e079cb6902522082a",
        "repo": "GNOME/gvfs",
        "commit_url": "https://github.com/GNOME/gvfs/commit/70dbfc68a79faac49bd3423e079cb6902522082a",
        "files": [
          "daemon/gvfsdaemon.c"
        ],
        "message": "gvfsdaemon: Check that the connecting client is the same user\n\nOtherwise, an attacker who learns the abstract socket address from\nnetstat(8) or similar could connect to it and issue D-Bus method\ncalls.\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>",
        "before_after_code_files": [
          "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
          ],
          "candidate": [
            "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c"
          ]
        }
      },
      "candidate_diff": {
        "daemon/gvfsdaemon.c||daemon/gvfsdaemon.c": [
          "File: daemon/gvfsdaemon.c -> daemon/gvfsdaemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   gint mount_counter;",
          "82:   GDBusConnection *conn;",
          "83:   GVfsDBusDaemon *daemon_skeleton;",
          "84:   GVfsDBusMountable *mountable_skeleton;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   GDBusAuthObserver *auth_observer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     }",
          "172:   if (daemon->conn != NULL)",
          "173:     g_object_unref (daemon->conn);",
          "175:   g_hash_table_destroy (daemon->registered_paths);",
          "176:   g_hash_table_destroy (daemon->client_connections);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:   if (daemon->auth_observer != NULL)",
          "176:     g_object_unref (daemon->auth_observer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:   daemon->lost_main_daemon = TRUE;",
          "237: }",
          "239: static void",
          "240: g_vfs_daemon_init (GVfsDaemon *daemon)",
          "241: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: static gboolean",
          "249: authorize_authenticated_peer_cb (GDBusAuthObserver *observer,",
          "250:                                  G_GNUC_UNUSED GIOStream *stream,",
          "251:                                  GCredentials *credentials,",
          "252:                                  G_GNUC_UNUSED gpointer user_data)",
          "253: {",
          "254:   gboolean authorized = FALSE;",
          "256:   if (credentials != NULL)",
          "257:     {",
          "258:       GCredentials *own_credentials;",
          "260:       own_credentials = g_credentials_new ();",
          "262:       if (g_credentials_is_same_user (credentials, own_credentials, NULL))",
          "263:         authorized = TRUE;",
          "265:       g_object_unref (own_credentials);",
          "266:     }",
          "268:   return authorized;",
          "269: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "266:   daemon->conn = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);",
          "267:   g_assert (daemon->conn != NULL);",
          "269:   daemon->daemon_skeleton = gvfs_dbus_daemon_skeleton_new ();",
          "270:   g_signal_connect (daemon->daemon_skeleton, \"handle-get-connection\", G_CALLBACK (handle_get_connection), daemon);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:   daemon->auth_observer = g_dbus_auth_observer_new ();",
          "301:   g_signal_connect (daemon->auth_observer, \"authorize-authenticated-peer\", G_CALLBACK (authorize_authenticated_peer_cb), NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "876:   server = g_dbus_server_new_sync (address1,",
          "877:                                    G_DBUS_SERVER_FLAGS_NONE,",
          "878:                                    guid,",
          "881:                                    &error);",
          "882:   g_free (guid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913:                                    daemon->auth_observer,",
          "",
          "---------------"
        ]
      }
    }
  ]
}