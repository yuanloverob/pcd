{
  "cve_id": "CVE-2022-41887",
  "cve_desc": "TensorFlow is an open source platform for machine learning. `tf.keras.losses.poisson` receives a `y_pred` and `y_true` that are passed through `functor::mul` in `BinaryOp`. If the resulting dimensions overflow an `int32`, TensorFlow will crash due to a size mismatch during broadcast assignment. We have patched the issue in GitHub commit c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1 and 2.9.3, as these are also affected and still in supported range. However, we will not cherrypick this commit into TensorFlow 2.8.x, as it depends on Eigen behavior that changed between 2.8 and 2.9.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c",
  "patch_info": {
    "commit_hash": "c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c",
    "files": [
      "tensorflow/core/kernels/cwise_ops_common.h"
    ],
    "message": "Fix cwise dimension overflow issue again.\n\nIf resulting dimensions overflow an int32, we were seeing an overflow and\ncrash due to size mismatch during broadcast assignment.  The cause is a simple\ndimension type mismatch.\n\nNote that actual tests for this are currently impractical, since successful\noperations require more than 2^32 elements and OOM on most machines.\n\nPiperOrigin-RevId: 479336566",
    "before_after_code_files": [
      "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h": [
      "File: tensorflow/core/kernels/cwise_ops_common.h -> tensorflow/core/kernels/cwise_ops_common.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "450:     Assign(d, out, in.unaryExpr(Unary(scalar.data())));",
      "451:   }",
      "455:     ret.set(0, n);",
      "456:     return ret;",
      "457:   }",
      "460:     ret.set(1, m);",
      "461:     return ret;",
      "462:   }",
      "",
      "[Removed Lines]",
      "453:   inline Eigen::IndexList<int, Eigen::type2index<1>> NByOne(int n) {",
      "454:     Eigen::IndexList<int, Eigen::type2index<1>> ret;",
      "458:   inline Eigen::IndexList<Eigen::type2index<1>, int> OneByM(int m) {",
      "459:     Eigen::IndexList<Eigen::type2index<1>, int> ret;",
      "",
      "[Added Lines]",
      "453:   inline Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> NByOne(",
      "454:       Eigen::DenseIndex n) {",
      "455:     Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> ret;",
      "459:   inline Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> OneByM(",
      "460:       Eigen::DenseIndex m) {",
      "461:     Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> ret;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "494:       if ((a == 1) && (d == 1)) {",
      "495:         auto lhs = in0.reshape(OneByM(b)).broadcast(NByOne(c));",
      "496:         auto rhs = in1.reshape(NByOne(c)).broadcast(OneByM(b));",
      "",
      "[Removed Lines]",
      "490:       const int a = in0.dimension(0);  // in0 is shape [a, b]",
      "491:       const int b = in0.dimension(1);",
      "492:       const int c = in1.dimension(0);  // in1 is shape [c, d]",
      "493:       const int d = in1.dimension(1);",
      "",
      "[Added Lines]",
      "492:       const Eigen::DenseIndex a = in0.dimension(0);  // in0 is shape [a, b]",
      "493:       const Eigen::DenseIndex b = in0.dimension(1);",
      "494:       const Eigen::DenseIndex c = in1.dimension(0);  // in1 is shape [c, d]",
      "495:       const Eigen::DenseIndex d = in1.dimension(1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15879a873feb8b29895c96e1e03a23fe6e7bdaf5",
      "candidate_info": {
        "commit_hash": "15879a873feb8b29895c96e1e03a23fe6e7bdaf5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/15879a873feb8b29895c96e1e03a23fe6e7bdaf5",
        "files": [
          "tensorflow/core/kernels/cwise_ops_common.h"
        ],
        "message": "Fix cwise dimension overflow issue.\n\nIf resulting dimensions overflow an int32, we were seeing an overflow and\ncrash due to size mismatch during broadcast assignment.  The cause is a simple\ndimension type mismatch.\n\nNote that actual tests for this are currently impractical, since successful\noperations require more than 2^32 elements and OOM on most machines.\n\nPiperOrigin-RevId: 478914823",
        "before_after_code_files": [
          "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h": [
          "File: tensorflow/core/kernels/cwise_ops_common.h -> tensorflow/core/kernels/cwise_ops_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define EIGEN_USE_THREADS",
          "25: #include \"tensorflow/core/framework/op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/framework/tensor_types.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/platform/bfloat16.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:     Assign(d, out, in.unaryExpr(Unary(scalar.data())));",
          "448:   }",
          "453:     ret.set(0, n);",
          "454:     return ret;",
          "455:   }",
          "459:     ret.set(1, m);",
          "460:     return ret;",
          "461:   }",
          "",
          "[Removed Lines]",
          "450:   inline Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> NByOne(",
          "451:       Eigen::DenseIndex n) {",
          "452:     Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> ret;",
          "456:   inline Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> OneByM(",
          "457:       Eigen::DenseIndex m) {",
          "458:     Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> ret;",
          "",
          "[Added Lines]",
          "453:   inline Eigen::IndexList<int, Eigen::type2index<1>> NByOne(int n) {",
          "454:     Eigen::IndexList<int, Eigen::type2index<1>> ret;",
          "458:   inline Eigen::IndexList<Eigen::type2index<1>, int> OneByM(int m) {",
          "459:     Eigen::IndexList<Eigen::type2index<1>, int> ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:       if ((a == 1) && (d == 1)) {",
          "494:         auto lhs = in0.reshape(OneByM(b)).broadcast(NByOne(c));",
          "495:         auto rhs = in1.reshape(NByOne(c)).broadcast(OneByM(b));",
          "",
          "[Removed Lines]",
          "489:       const Eigen::DenseIndex a = in0.dimension(0);  // in0 is shape [a, b]",
          "490:       const Eigen::DenseIndex b = in0.dimension(1);",
          "491:       const Eigen::DenseIndex c = in1.dimension(0);  // in1 is shape [c, d]",
          "492:       const Eigen::DenseIndex d = in1.dimension(1);",
          "",
          "[Added Lines]",
          "490:       const int a = in0.dimension(0);  // in0 is shape [a, b]",
          "491:       const int b = in0.dimension(1);",
          "492:       const int c = in1.dimension(0);  // in1 is shape [c, d]",
          "493:       const int d = in1.dimension(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c667f4c59f84a923cef53d098783f36c6f223fb3",
      "candidate_info": {
        "commit_hash": "c667f4c59f84a923cef53d098783f36c6f223fb3",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c667f4c59f84a923cef53d098783f36c6f223fb3",
        "files": [
          "tensorflow/core/kernels/cwise_ops_common.h"
        ],
        "message": "Fix cwise dimension overflow issue.\n\nIf resulting dimensions overflow an int32, we were seeing an overflow and\ncrash due to size mismatch during broadcast assignment.  The cause is a simple\ndimension type mismatch.\n\nNote that actual tests for this are currently impractical, since successful\noperations require more than 2^32 elements and OOM on most machines.\n\nPiperOrigin-RevId: 478866203",
        "before_after_code_files": [
          "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h": [
          "File: tensorflow/core/kernels/cwise_ops_common.h -> tensorflow/core/kernels/cwise_ops_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define EIGEN_USE_THREADS",
          "28: #include \"tensorflow/core/framework/op.h\"",
          "29: #include \"tensorflow/core/framework/op_kernel.h\"",
          "30: #include \"tensorflow/core/framework/tensor_types.h\"",
          "",
          "[Removed Lines]",
          "25: #include \"tensorflow/core/platform/bfloat16.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:     Assign(d, out, in.unaryExpr(Unary(scalar.data())));",
          "451:   }",
          "455:     ret.set(0, n);",
          "456:     return ret;",
          "457:   }",
          "460:     ret.set(1, m);",
          "461:     return ret;",
          "462:   }",
          "",
          "[Removed Lines]",
          "453:   inline Eigen::IndexList<int, Eigen::type2index<1>> NByOne(int n) {",
          "454:     Eigen::IndexList<int, Eigen::type2index<1>> ret;",
          "458:   inline Eigen::IndexList<Eigen::type2index<1>, int> OneByM(int m) {",
          "459:     Eigen::IndexList<Eigen::type2index<1>, int> ret;",
          "",
          "[Added Lines]",
          "450:   inline Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> NByOne(",
          "451:       Eigen::DenseIndex n) {",
          "452:     Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> ret;",
          "456:   inline Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> OneByM(",
          "457:       Eigen::DenseIndex m) {",
          "458:     Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:       if ((a == 1) && (d == 1)) {",
          "495:         auto lhs = in0.reshape(OneByM(b)).broadcast(NByOne(c));",
          "496:         auto rhs = in1.reshape(NByOne(c)).broadcast(OneByM(b));",
          "",
          "[Removed Lines]",
          "490:       const int a = in0.dimension(0);  // in0 is shape [a, b]",
          "491:       const int b = in0.dimension(1);",
          "492:       const int c = in1.dimension(0);  // in1 is shape [c, d]",
          "493:       const int d = in1.dimension(1);",
          "",
          "[Added Lines]",
          "489:       const Eigen::DenseIndex a = in0.dimension(0);  // in0 is shape [a, b]",
          "490:       const Eigen::DenseIndex b = in0.dimension(1);",
          "491:       const Eigen::DenseIndex c = in1.dimension(0);  // in1 is shape [c, d]",
          "492:       const Eigen::DenseIndex d = in1.dimension(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0552149997f87278ee4862ab777960b8f8af88a5",
      "candidate_info": {
        "commit_hash": "0552149997f87278ee4862ab777960b8f8af88a5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0552149997f87278ee4862ab777960b8f8af88a5",
        "files": [
          "tensorflow/core/kernels/cwise_ops_common.h"
        ],
        "message": "Fix cwise dimension overflow issue again.\n\nIf resulting dimensions overflow an int32, we were seeing an overflow and\ncrash due to size mismatch during broadcast assignment.  The cause is a simple\ndimension type mismatch.\n\nNote that actual tests for this are currently impractical, since successful\noperations require more than 2^32 elements and OOM on most machines.\n\nPiperOrigin-RevId: 479336566",
        "before_after_code_files": [
          "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h": [
          "File: tensorflow/core/kernels/cwise_ops_common.h -> tensorflow/core/kernels/cwise_ops_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:     Assign(d, out, in.unaryExpr(Unary(scalar.data())));",
          "451:   }",
          "455:     ret.set(0, n);",
          "456:     return ret;",
          "457:   }",
          "460:     ret.set(1, m);",
          "461:     return ret;",
          "462:   }",
          "",
          "[Removed Lines]",
          "453:   inline Eigen::IndexList<int, Eigen::type2index<1>> NByOne(int n) {",
          "454:     Eigen::IndexList<int, Eigen::type2index<1>> ret;",
          "458:   inline Eigen::IndexList<Eigen::type2index<1>, int> OneByM(int m) {",
          "459:     Eigen::IndexList<Eigen::type2index<1>, int> ret;",
          "",
          "[Added Lines]",
          "453:   inline Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> NByOne(",
          "454:       Eigen::DenseIndex n) {",
          "455:     Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> ret;",
          "459:   inline Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> OneByM(",
          "460:       Eigen::DenseIndex m) {",
          "461:     Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:       if ((a == 1) && (d == 1)) {",
          "495:         auto lhs = in0.reshape(OneByM(b)).broadcast(NByOne(c));",
          "496:         auto rhs = in1.reshape(NByOne(c)).broadcast(OneByM(b));",
          "",
          "[Removed Lines]",
          "490:       const int a = in0.dimension(0);  // in0 is shape [a, b]",
          "491:       const int b = in0.dimension(1);",
          "492:       const int c = in1.dimension(0);  // in1 is shape [c, d]",
          "493:       const int d = in1.dimension(1);",
          "",
          "[Added Lines]",
          "492:       const Eigen::DenseIndex a = in0.dimension(0);  // in0 is shape [a, b]",
          "493:       const Eigen::DenseIndex b = in0.dimension(1);",
          "494:       const Eigen::DenseIndex c = in1.dimension(0);  // in1 is shape [c, d]",
          "495:       const Eigen::DenseIndex d = in1.dimension(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a8d8997da7cbd503478998666f8397839a55ee8",
      "candidate_info": {
        "commit_hash": "6a8d8997da7cbd503478998666f8397839a55ee8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6a8d8997da7cbd503478998666f8397839a55ee8",
        "files": [
          "tensorflow/core/kernels/cwise_ops_common.h"
        ],
        "message": "Fix cwise dimension overflow issue again.\n\nIf resulting dimensions overflow an int32, we were seeing an overflow and\ncrash due to size mismatch during broadcast assignment.  The cause is a simple\ndimension type mismatch.\n\nNote that actual tests for this are currently impractical, since successful\noperations require more than 2^32 elements and OOM on most machines.\n\nPiperOrigin-RevId: 479336566",
        "before_after_code_files": [
          "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/cwise_ops_common.h||tensorflow/core/kernels/cwise_ops_common.h": [
          "File: tensorflow/core/kernels/cwise_ops_common.h -> tensorflow/core/kernels/cwise_ops_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:     Assign(d, out, in.unaryExpr(Unary(scalar.data())));",
          "451:   }",
          "455:     ret.set(0, n);",
          "456:     return ret;",
          "457:   }",
          "460:     ret.set(1, m);",
          "461:     return ret;",
          "462:   }",
          "",
          "[Removed Lines]",
          "453:   inline Eigen::IndexList<int, Eigen::type2index<1>> NByOne(int n) {",
          "454:     Eigen::IndexList<int, Eigen::type2index<1>> ret;",
          "458:   inline Eigen::IndexList<Eigen::type2index<1>, int> OneByM(int m) {",
          "459:     Eigen::IndexList<Eigen::type2index<1>, int> ret;",
          "",
          "[Added Lines]",
          "453:   inline Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> NByOne(",
          "454:       Eigen::DenseIndex n) {",
          "455:     Eigen::IndexList<Eigen::DenseIndex, Eigen::type2index<1>> ret;",
          "459:   inline Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> OneByM(",
          "460:       Eigen::DenseIndex m) {",
          "461:     Eigen::IndexList<Eigen::type2index<1>, Eigen::DenseIndex> ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:       if ((a == 1) && (d == 1)) {",
          "495:         auto lhs = in0.reshape(OneByM(b)).broadcast(NByOne(c));",
          "496:         auto rhs = in1.reshape(NByOne(c)).broadcast(OneByM(b));",
          "",
          "[Removed Lines]",
          "490:       const int a = in0.dimension(0);  // in0 is shape [a, b]",
          "491:       const int b = in0.dimension(1);",
          "492:       const int c = in1.dimension(0);  // in1 is shape [c, d]",
          "493:       const int d = in1.dimension(1);",
          "",
          "[Added Lines]",
          "492:       const Eigen::DenseIndex a = in0.dimension(0);  // in0 is shape [a, b]",
          "493:       const Eigen::DenseIndex b = in0.dimension(1);",
          "494:       const Eigen::DenseIndex c = in1.dimension(0);  // in1 is shape [c, d]",
          "495:       const Eigen::DenseIndex d = in1.dimension(1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}