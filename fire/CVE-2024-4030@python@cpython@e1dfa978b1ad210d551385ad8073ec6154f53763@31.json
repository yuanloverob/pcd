{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99de20d729c14c9ea062c205b55925305ed797b6",
      "candidate_info": {
        "commit_hash": "99de20d729c14c9ea062c205b55925305ed797b6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/99de20d729c14c9ea062c205b55925305ed797b6",
        "files": [
          "Lib/argparse.py",
          "Lib/test/test_argparse.py",
          "Misc/NEWS.d/next/Library/2024-06-26-03-04-24.gh-issue-121018.clVSc4.rst"
        ],
        "message": "[3.13] gh-121018: Fix more cases of exiting in argparse when exit_on_error=False (GH-121056) (GH-121128)\n\n* parse_intermixed_args() now raises ArgumentError instead of calling\n  error() if exit_on_error is false.\n* Internal code now always raises ArgumentError instead of calling\n  error(). It is then caught at the higher level and error() is called if\n  exit_on_error is true.\n(cherry picked from commit 81a654a3425eaa05a51342509089533c1f623f1b)",
        "before_after_code_files": [
          "Lib/argparse.py||Lib/argparse.py",
          "Lib/test/test_argparse.py||Lib/test/test_argparse.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/argparse.py||Lib/argparse.py": [
          "File: Lib/argparse.py -> Lib/argparse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1819:     # ==================================",
          "1820:     def add_subparsers(self, **kwargs):",
          "1821:         if self._subparsers is not None:",
          "1824:         # add the parser class to the arguments if it's not present",
          "1825:         kwargs.setdefault('parser_class', type(self))",
          "",
          "[Removed Lines]",
          "1822:             self.error(_('cannot have multiple subparser arguments'))",
          "",
          "[Added Lines]",
          "1822:             raise ArgumentError(None, _('cannot have multiple subparser arguments'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1874:             msg = _('unrecognized arguments: %s') % ' '.join(argv)",
          "1875:             if self.exit_on_error:",
          "1876:                 self.error(msg)",
          "1878:         return args",
          "1880:     def parse_known_args(self, args=None, namespace=None):",
          "",
          "[Removed Lines]",
          "1877:             raise ArgumentError(None, msg)",
          "",
          "[Added Lines]",
          "1877:             else:",
          "1878:                 raise ArgumentError(None, msg)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2163:                                 self._get_value(action, action.default))",
          "2165:         if required_actions:",
          "2167:                        ', '.join(required_actions))",
          "2169:         # make sure all required groups had one option present",
          "",
          "[Removed Lines]",
          "2166:             self.error(_('the following arguments are required: %s') %",
          "",
          "[Added Lines]",
          "2167:             raise ArgumentError(None, _('the following arguments are required: %s') %",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2179:                              for action in group._group_actions",
          "2180:                              if action.help is not SUPPRESS]",
          "2181:                     msg = _('one of the arguments %s is required')",
          "2184:         # return the updated namespace and the extra arguments",
          "2185:         return namespace, extras",
          "",
          "[Removed Lines]",
          "2182:                     self.error(msg % ' '.join(names))",
          "",
          "[Added Lines]",
          "2183:                     raise ArgumentError(None, msg % ' '.join(names))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2206:                         arg_strings = self._read_args_from_files(arg_strings)",
          "2207:                         new_arg_strings.extend(arg_strings)",
          "2208:                 except OSError as err:",
          "2211:         # return the modified argument list",
          "2212:         return new_arg_strings",
          "",
          "[Removed Lines]",
          "2209:                     self.error(str(err))",
          "",
          "[Added Lines]",
          "2210:                     raise ArgumentError(None, str(err))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2286:                 for action, option_string, sep, explicit_arg in option_tuples])",
          "2287:             args = {'option': arg_string, 'matches': options}",
          "2288:             msg = _('ambiguous option: %(option)s could match %(matches)s')",
          "2291:         # if exactly one action matched, this segmentation is good,",
          "2292:         # so return the parsed action",
          "",
          "[Removed Lines]",
          "2289:             self.error(msg % args)",
          "",
          "[Added Lines]",
          "2290:             raise ArgumentError(None, msg % args)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2347:         # shouldn't ever get here",
          "2348:         else:",
          "2351:         # return the collected option tuples",
          "2352:         return result",
          "",
          "[Removed Lines]",
          "2349:             self.error(_('unexpected option string: %s') % option_string)",
          "",
          "[Added Lines]",
          "2350:             raise ArgumentError(None, _('unexpected option string: %s') % option_string)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2403:     def parse_intermixed_args(self, args=None, namespace=None):",
          "2404:         args, argv = self.parse_known_intermixed_args(args, namespace)",
          "2405:         if argv:",
          "2408:         return args",
          "2410:     def parse_known_intermixed_args(self, args=None, namespace=None):",
          "",
          "[Removed Lines]",
          "2406:             msg = _('unrecognized arguments: %s')",
          "2407:             self.error(msg % ' '.join(argv))",
          "",
          "[Added Lines]",
          "2407:             msg = _('unrecognized arguments: %s') % ' '.join(argv)",
          "2408:             if self.exit_on_error:",
          "2409:                 self.error(msg)",
          "2410:             else:",
          "2411:                 raise ArgumentError(None, msg)",
          "",
          "---------------"
        ],
        "Lib/test/test_argparse.py||Lib/test/test_argparse.py": [
          "File: Lib/test/test_argparse.py -> Lib/test/test_argparse.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2190:         else:",
          "2191:             subparsers_kwargs['help'] = 'command help'",
          "2192:         subparsers = parser.add_subparsers(**subparsers_kwargs)",
          "2195:         # add first sub-parser",
          "2196:         parser1_kwargs = dict(description='1 description')",
          "",
          "[Removed Lines]",
          "2193:         self.assertArgumentParserError(parser.add_subparsers)",
          "",
          "[Added Lines]",
          "2193:         self.assertRaisesRegex(argparse.ArgumentError,",
          "2194:                                'cannot have multiple subparser arguments',",
          "2195:                                parser.add_subparsers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6085: class TestExitOnError(TestCase):",
          "6087:     def setUp(self):",
          "6089:         self.parser.add_argument('--integers', metavar='N', type=int)",
          "6091:     def test_exit_on_error_with_good_args(self):",
          "",
          "[Removed Lines]",
          "6088:         self.parser = argparse.ArgumentParser(exit_on_error=False)",
          "",
          "[Added Lines]",
          "6090:         self.parser = argparse.ArgumentParser(exit_on_error=False,",
          "6091:                                               fromfile_prefix_chars='@')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6096:         with self.assertRaises(argparse.ArgumentError):",
          "6097:             self.parser.parse_args('--integers a'.split())",
          "6103: def tearDownModule():",
          "6104:     # Remove global references to avoid looking like we have refleaks.",
          "",
          "[Removed Lines]",
          "6099:     def test_exit_on_error_with_unrecognized_args(self):",
          "6100:         with self.assertRaises(argparse.ArgumentError):",
          "6101:             self.parser.parse_args('--foo bar'.split())",
          "",
          "[Added Lines]",
          "6102:     def test_unrecognized_args(self):",
          "6103:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6104:                                'unrecognized arguments: --foo bar',",
          "6105:                                self.parser.parse_args, '--foo bar'.split())",
          "6107:     def test_unrecognized_intermixed_args(self):",
          "6108:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6109:                                'unrecognized arguments: --foo bar',",
          "6110:                                self.parser.parse_intermixed_args, '--foo bar'.split())",
          "6112:     def test_required_args(self):",
          "6113:         self.parser.add_argument('bar')",
          "6114:         self.parser.add_argument('baz')",
          "6115:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6116:                                'the following arguments are required: bar, baz',",
          "6117:                                self.parser.parse_args, [])",
          "6119:     def test_required_mutually_exclusive_args(self):",
          "6120:         group = self.parser.add_mutually_exclusive_group(required=True)",
          "6121:         group.add_argument('--bar')",
          "6122:         group.add_argument('--baz')",
          "6123:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6124:                                'one of the arguments --bar --baz is required',",
          "6125:                                self.parser.parse_args, [])",
          "6127:     def test_ambiguous_option(self):",
          "6128:         self.parser.add_argument('--foobaz')",
          "6129:         self.parser.add_argument('--fooble', action='store_true')",
          "6130:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6131:                                \"ambiguous option: --foob could match --foobaz, --fooble\",",
          "6132:                                self.parser.parse_args, ['--foob'])",
          "6134:     def test_os_error(self):",
          "6135:         self.parser.add_argument('file')",
          "6136:         self.assertRaisesRegex(argparse.ArgumentError,",
          "6137:                                \"No such file or directory: 'no-such-file'\",",
          "6138:                                self.parser.parse_args, ['@no-such-file'])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49e5740135670e04ae6da7e6f52dbe380655e0f1",
      "candidate_info": {
        "commit_hash": "49e5740135670e04ae6da7e6f52dbe380655e0f1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/49e5740135670e04ae6da7e6f52dbe380655e0f1",
        "files": [
          "Doc/whatsnew/3.13.rst",
          "Lib/functools.py",
          "Lib/inspect.py",
          "Lib/test/test_functools.py",
          "Lib/test/test_inspect/test_inspect.py",
          "Misc/NEWS.d/next/Library/2024-06-27-13-47-14.gh-issue-121027.jh55EC.rst",
          "Modules/_functoolsmodule.c"
        ],
        "message": "[3.13] gh-121027: Add a future warning in functools.partial.__get__ (GH-121086) (#121092)\n\ngh-121027: Add a future warning in functools.partial.__get__ (GH-121086)\n(cherry picked from commit db96edd6d1a58045196a71aff565743f493b5fbb)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/functools.py||Lib/functools.py",
          "Lib/inspect.py||Lib/inspect.py",
          "Lib/test/test_functools.py||Lib/test/test_functools.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py",
          "Modules/_functoolsmodule.c||Modules/_functoolsmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/functools.py||Lib/functools.py": [
          "File: Lib/functools.py -> Lib/functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:         args.extend(f\"{k}={v!r}\" for (k, v) in self.keywords.items())",
          "312:         return f\"{module}.{qualname}({', '.join(args)})\"",
          "314:     def __reduce__(self):",
          "315:         return type(self), (self.func,), (self.func, self.args,",
          "316:                self.keywords or None, self.__dict__ or None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:     def __get__(self, obj, objtype=None):",
          "315:         if obj is None:",
          "316:             return self",
          "317:         import warnings",
          "318:         warnings.warn('functools.partial will be a method descriptor in '",
          "319:                       'future Python versions; wrap it in staticmethod() '",
          "320:                       'if you want to preserve the old behavior',",
          "321:                       FutureWarning, 2)",
          "322:         return self",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392:     def __get__(self, obj, cls=None):",
          "393:         get = getattr(self.func, \"__get__\", None)",
          "394:         result = None",
          "396:             new_func = get(obj, cls)",
          "397:             if new_func is not self.func:",
          "398:                 # Assume __get__ returning something new indicates the",
          "",
          "[Removed Lines]",
          "395:         if get is not None:",
          "",
          "[Added Lines]",
          "405:         if get is not None and not isinstance(self.func, partial):",
          "",
          "---------------"
        ],
        "Lib/inspect.py||Lib/inspect.py": [
          "File: Lib/inspect.py -> Lib/inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2556:                 new_params = (first_wrapped_param,) + sig_params",
          "2557:                 return sig.replace(parameters=new_params)",
          "2559:     if isfunction(obj) or _signature_is_functionlike(obj):",
          "2560:         # If it's a pure Python function, or an object that is duck type",
          "2561:         # of a Python function (Cython functions, for instance), then:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2559:     if isinstance(obj, functools.partial):",
          "2560:         wrapped_sig = _get_signature_of(obj.func)",
          "2561:         return _signature_get_partial(wrapped_sig, obj)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2567:         return _signature_from_builtin(sigcls, obj,",
          "2568:                                        skip_bound_arg=skip_bound_arg)",
          "2574:     if isinstance(obj, type):",
          "2575:         # obj is a class or a metaclass",
          "",
          "[Removed Lines]",
          "2570:     if isinstance(obj, functools.partial):",
          "2571:         wrapped_sig = _get_signature_of(obj.func)",
          "2572:         return _signature_get_partial(wrapped_sig, obj)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/test/test_functools.py||Lib/test/test_functools.py": [
          "File: Lib/test/test_functools.py -> Lib/test/test_functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:         f = self.partial(object)",
          "396:         self.assertRaises(TypeError, f.__setstate__, BadSequence())",
          "398: @unittest.skipUnless(c_functools, 'requires the C _functools module')",
          "399: class TestPartialC(TestPartial, unittest.TestCase):",
          "400:     if c_functools:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     def test_partial_as_method(self):",
          "399:         class A:",
          "400:             meth = self.partial(capture, 1, a=2)",
          "401:             cmeth = classmethod(self.partial(capture, 1, a=2))",
          "402:             smeth = staticmethod(self.partial(capture, 1, a=2))",
          "404:         a = A()",
          "405:         self.assertEqual(A.meth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "406:         self.assertEqual(A.cmeth(3, b=4), ((1, A, 3), {'a': 2, 'b': 4}))",
          "407:         self.assertEqual(A.smeth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "408:         with self.assertWarns(FutureWarning) as w:",
          "409:             self.assertEqual(a.meth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "410:         self.assertEqual(w.filename, __file__)",
          "411:         self.assertEqual(a.cmeth(3, b=4), ((1, A, 3), {'a': 2, 'b': 4}))",
          "412:         self.assertEqual(a.smeth(3, b=4), ((1, 3), {'a': 2, 'b': 4}))",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3873:                 def __init__(self, b):",
          "3874:                     pass",
          "3881:         with self.subTest('partialmethod'):",
          "3882:             class CM(type):",
          "",
          "[Removed Lines]",
          "3876:             self.assertEqual(C(1), (2, 1))",
          "3877:             self.assertEqual(self.signature(C),",
          "3878:                             ((('a', ..., ..., \"positional_or_keyword\"),),",
          "3879:                             ...))",
          "",
          "[Added Lines]",
          "3876:             with self.assertWarns(FutureWarning):",
          "3877:                 self.assertEqual(C(1), (2, 1))",
          "3878:             with self.assertWarns(FutureWarning):",
          "3879:                 self.assertEqual(self.signature(C),",
          "3880:                                 ((('a', ..., ..., \"positional_or_keyword\"),),",
          "3881:                                 ...))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4024:             class C:",
          "4025:                 __init__ = functools.partial(lambda x, a: None, 2)",
          "4032:         with self.subTest('partialmethod'):",
          "4033:             class C:",
          "",
          "[Removed Lines]",
          "4027:             C(1)  # does not raise",
          "4028:             self.assertEqual(self.signature(C),",
          "4029:                             ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4030:                             ...))",
          "",
          "[Added Lines]",
          "4029:             with self.assertWarns(FutureWarning):",
          "4030:                 C(1)  # does not raise",
          "4031:             with self.assertWarns(FutureWarning):",
          "4032:                 self.assertEqual(self.signature(C),",
          "4033:                                 ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4034:                                 ...))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4282:             class C:",
          "4283:                 __call__ = functools.partial(lambda x, a: (x, a), 2)",
          "4290:         with self.subTest('partialmethod'):",
          "4291:             class C:",
          "",
          "[Removed Lines]",
          "4285:             self.assertEqual(C()(1), (2, 1))",
          "4286:             self.assertEqual(self.signature(C()),",
          "4287:                             ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4288:                             ...))",
          "",
          "[Added Lines]",
          "4289:             c = C()",
          "4290:             with self.assertWarns(FutureWarning):",
          "4291:                 self.assertEqual(c(1), (2, 1))",
          "4292:             with self.assertWarns(FutureWarning):",
          "4293:                 self.assertEqual(self.signature(c),",
          "4294:                                 ((('a', ..., ..., \"positional_or_keyword\"),),",
          "4295:                                 ...))",
          "",
          "---------------"
        ],
        "Modules/_functoolsmodule.c||Modules/_functoolsmodule.c": [
          "File: Modules/_functoolsmodule.c -> Modules/_functoolsmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:     Py_DECREF(tp);",
          "198: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: static PyObject *",
          "201: partial_descr_get(PyObject *self, PyObject *obj, PyObject *type)",
          "202: {",
          "203:     if (obj == Py_None || obj == NULL) {",
          "204:         return Py_NewRef(self);",
          "205:     }",
          "206:     if (PyErr_WarnEx(PyExc_FutureWarning,",
          "207:                      \"functools.partial will be a method descriptor in \"",
          "208:                      \"future Python versions; wrap it in staticmethod() \"",
          "209:                      \"if you want to preserve the old behavior\", 1) < 0)",
          "210:     {",
          "211:         return NULL;",
          "212:     }",
          "213:     return Py_NewRef(self);",
          "214: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "514:     {Py_tp_methods, partial_methods},",
          "515:     {Py_tp_members, partial_memberlist},",
          "516:     {Py_tp_getset, partial_getsetlist},",
          "517:     {Py_tp_new, partial_new},",
          "518:     {Py_tp_free, PyObject_GC_Del},",
          "519:     {0, 0}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532:     {Py_tp_descr_get, (descrgetfunc)partial_descr_get},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c",
      "candidate_info": {
        "commit_hash": "d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d58ebf073c755c2f0f6e4ef2296b48a4c75e5f1c",
        "files": [
          "Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c"
        ],
        "message": "[3.13] gh-117398: Add multiphase support to _datetime (gh-119373) (gh-119636)\n\nThis is minimal support.  Subinterpreters are not supported yet.  That will be addressed in a later change.\n\n(cherry picked from commit 3e8b60905e97a4fe89bb24180063732214368938)\n\nCo-authored-by: Erlend E. Aasland <erlend@python.org>\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     pass",
          "48: #",
          "50: pickle_loads = {pickle.loads, pickle._loads}",
          "52: pickle_choices = [(pickle, pickle, proto)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: # This is copied from test_import/__init__.py.",
          "51: # XXX Move it to support/__init__.py.",
          "52: def no_rerun(reason):",
          "53:     \"\"\"Skip rerunning for a particular test.",
          "55:     WARNING: Use this decorator with care; skipping rerunning makes it",
          "56:     impossible to find reference leaks. Provide a clear reason for skipping the",
          "57:     test using the 'reason' parameter.",
          "58:     \"\"\"",
          "59:     def deco(func):",
          "60:         _has_run = False",
          "61:         def wrapper(self):",
          "62:             nonlocal _has_run",
          "63:             if _has_run:",
          "64:                 self.skipTest(reason)",
          "65:             func(self)",
          "66:             _has_run = True",
          "67:         return wrapper",
          "68:     return deco",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6385: @unittest.skipIf(_testcapi is None, 'need _testcapi module')",
          "6386: class CapiTest(unittest.TestCase):",
          "6387:     def setUp(self):",
          "6388:         # Since the C API is not present in the _Pure tests, skip all tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6406: @no_rerun(\"the encapsulated datetime C API does not support reloading\")",
          "",
          "---------------"
        ],
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6970: }",
          "6971: #undef DATETIME_ADD_MACRO",
          "6974:     .m_base = PyModuleDef_HEAD_INIT,",
          "6975:     .m_name = \"_datetime\",",
          "6976:     .m_doc = \"Fast implementation of the datetime type.\",",
          "6978:     .m_methods = module_methods,",
          "6979: };",
          "6981: PyMODINIT_FUNC",
          "6982: PyInit__datetime(void)",
          "6983: {",
          "6997: }",
          "",
          "[Removed Lines]",
          "6973: static struct PyModuleDef datetimemodule = {",
          "6977:     .m_size = -1,",
          "6984:     PyObject *mod = PyModule_Create(&datetimemodule);",
          "6985:     if (mod == NULL)",
          "6986:         return NULL;",
          "6987: #ifdef Py_GIL_DISABLED",
          "6988:     PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED);",
          "6989: #endif",
          "6991:     if (_datetime_exec(mod) < 0) {",
          "6992:         Py_DECREF(mod);",
          "6993:         return NULL;",
          "6994:     }",
          "6996:     return mod;",
          "",
          "[Added Lines]",
          "6973: static PyModuleDef_Slot module_slots[] = {",
          "6974:     {Py_mod_exec, _datetime_exec},",
          "6975:     {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},",
          "6976:     {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
          "6977:     {0, NULL},",
          "6978: };",
          "6980: static PyModuleDef datetimemodule = {",
          "6984:     .m_size = 0,",
          "6986:     .m_slots = module_slots,",
          "6992:     return PyModuleDef_Init(&datetimemodule);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71ad34d2190a1f16ac7dbc70b8bce8c6b2549109",
      "candidate_info": {
        "commit_hash": "71ad34d2190a1f16ac7dbc70b8bce8c6b2549109",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/71ad34d2190a1f16ac7dbc70b8bce8c6b2549109",
        "files": [
          "Lib/test/test_interpreters/test_stress.py",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-120524: Avoid a Race On _PyRuntime.types.managed_static.types[i].interp_count (gh-120657)\n\ngh-120182 added new global state (interp_count), but didn't add thread-safety for it.  This change eliminates the possible race.\n\n(cherry picked from commit 2c66318cdc0545da37e7046533dfe74bde129d91, AKA gh-120529)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_interpreters/test_stress.py||Lib/test/test_interpreters/test_stress.py",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_interpreters/test_stress.py||Lib/test/test_interpreters/test_stress.py": [
          "File: Lib/test/test_interpreters/test_stress.py -> Lib/test/test_interpreters/test_stress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:             interp = interpreters.create()",
          "23:             alive.append(interp)",
          "26:     @support.requires_resource('cpu')",
          "27:     def test_create_many_threaded(self):",
          "28:         alive = []",
          "",
          "[Removed Lines]",
          "25:     @unittest.skip('(temporary) gh-120524: there is a race that needs fixing')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     assert((initial == 1) ==",
          "248:             (_PyRuntime.types.managed_static.types[full_index].interp_count == 0));",
          "251:     if (initial) {",
          "252:         assert(_PyRuntime.types.managed_static.types[full_index].type == NULL);",
          "",
          "[Removed Lines]",
          "249:     _PyRuntime.types.managed_static.types[full_index].interp_count += 1;",
          "",
          "[Added Lines]",
          "249:     (void)_Py_atomic_add_int64(",
          "250:             &_PyRuntime.types.managed_static.types[full_index].interp_count, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     state->type = NULL;",
          "301:     assert(state->tp_weaklist == NULL);  // It was already cleared out.",
          "304:     if (final) {",
          "305:         assert(!_PyRuntime.types.managed_static.types[full_index].interp_count);",
          "306:         _PyRuntime.types.managed_static.types[full_index].type = NULL;",
          "",
          "[Removed Lines]",
          "303:     _PyRuntime.types.managed_static.types[full_index].interp_count -= 1;",
          "",
          "[Added Lines]",
          "304:     (void)_Py_atomic_add_int64(",
          "305:             &_PyRuntime.types.managed_static.types[full_index].interp_count, -1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac9163637b028fc4b457f83b1a49b2f7ffbff6e6",
      "candidate_info": {
        "commit_hash": "ac9163637b028fc4b457f83b1a49b2f7ffbff6e6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ac9163637b028fc4b457f83b1a49b2f7ffbff6e6",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/__init__.py",
          "Misc/NEWS.d/next/Library/2024-05-20-20-30-57.gh-issue-111201.DAA5lC.rst"
        ],
        "message": "[3.13] gh-111201: Remove readline dependency from the PyREPL (GH-119262) (#119403)\n\n(cherry picked from commit 561ff1fa710493dee8c6482f990bd17535b27040)",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/__init__.py||Lib/test/test_pyrepl/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: from dataclasses import dataclass, field",
          "33: import os",
          "35: from site import gethistoryfile   # type: ignore[attr-defined]",
          "36: import sys",
          "38: from . import commands, historical_reader",
          "39: from .completing_reader import CompletingReader",
          "",
          "[Removed Lines]",
          "34: import readline",
          "",
          "[Added Lines]",
          "36: from rlcompleter import Completer as RLCompleter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: @dataclass",
          "83: class ReadlineConfig:",
          "85:     completer_delims: frozenset[str] = frozenset(\" \\t\\n`~!@#$%^&*()-=+[{]}\\\\|;:'\\\",<>/?\")",
          "",
          "[Removed Lines]",
          "84:     readline_completer: Completer | None = readline.get_completer()",
          "",
          "[Added Lines]",
          "84:     readline_completer: Completer | None = RLCompleter().complete",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/__init__.py||Lib/test/test_pyrepl/__init__.py": [
          "File: Lib/test/test_pyrepl/__init__.py -> Lib/test/test_pyrepl/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: # option.  Additionally, we need to attempt to import curses and readline.",
          "8: requires(\"curses\")",
          "9: curses = import_module(\"curses\")",
          "13: def load_tests(*args):",
          "",
          "[Removed Lines]",
          "10: readline = import_module(\"readline\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}