{
  "cve_id": "CVE-2020-36619",
  "cve_desc": "A vulnerability was found in multimon-ng. It has been rated as critical. This issue affects the function add_ch of the file demod_flex.c. The manipulation of the argument ch leads to format string. Upgrading to version 1.2.0 is able to address this issue. The name of the patch is e5a51c508ef952e81a6da25b43034dd1ed023c07. It is recommended to upgrade the affected component. The identifier VDB-216269 was assigned to this vulnerability.",
  "repo": "EliasOenal/multimon-ng",
  "patch_hash": "e5a51c508ef952e81a6da25b43034dd1ed023c07",
  "patch_info": {
    "commit_hash": "e5a51c508ef952e81a6da25b43034dd1ed023c07",
    "repo": "EliasOenal/multimon-ng",
    "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/e5a51c508ef952e81a6da25b43034dd1ed023c07",
    "files": [
      "demod_flex.c"
    ],
    "message": "Remove uncontrolled format string vulnerability",
    "before_after_code_files": [
      "demod_flex.c||demod_flex.c"
    ]
  },
  "patch_diff": {
    "demod_flex.c||demod_flex.c": [
      "File: demod_flex.c -> demod_flex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "558:         buf[idx + 1] = 'r';",
      "559:         return 2;",
      "560:     }",
      "562:     if (ch >= 32 && ch <= 126) {",
      "563:         buf[idx] = ch;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "564:     if (ch == '%') {",
      "565:         if (idx < (MAX_ALN - 2)) {",
      "566:             buf[idx] = '%';",
      "567:             buf[idx + 1] = '%';",
      "568:             return 2;",
      "569:         }",
      "570:         return 0;",
      "571:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "500258464f7fc8ee04e9b70b0f0727320f7bde1e",
      "candidate_info": {
        "commit_hash": "500258464f7fc8ee04e9b70b0f0727320f7bde1e",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/500258464f7fc8ee04e9b70b0f0727320f7bde1e",
        "files": [
          "demod_flex.c"
        ],
        "message": "Unify FLEX print statements",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "906:     if (is_alphanumeric_page(flex)) {",
          "907:       verbprintf(0, \"ALN|\");",
          "908:       parse_alphanumeric(flex, phaseptr, mw1, len, frag, cont, flex_groupmessage, flex_groupbit);",
          "910:     else if (is_numeric_page(flex)) {",
          "911:       verbprintf(0, \"NUM|\");",
          "912:       parse_numeric(flex, phaseptr, j);",
          "914:     else if (is_tone_page(flex)) {",
          "915:       verbprintf(0, \"TON|\");",
          "916:       parse_tone_only(flex, phaseptr, j);",
          "918:     else {",
          "919:       verbprintf(0, \"UNK|\");",
          "920:       parse_unknown(flex, phaseptr, mw1, len);",
          "922:     verbprintf(0, \"\\n\");",
          "",
          "[Removed Lines]",
          "909:  }",
          "913:  }",
          "917:  }",
          "921:  }",
          "",
          "[Added Lines]",
          "909:     }",
          "913:     }",
          "917:     }",
          "921:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbe383a9b031a8f920ba25b9bcaf7c758751a169",
      "candidate_info": {
        "commit_hash": "fbe383a9b031a8f920ba25b9bcaf7c758751a169",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/fbe383a9b031a8f920ba25b9bcaf7c758751a169",
        "files": [
          "demod_flex.c"
        ],
        "message": "Remove commented out and duplicate code",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610:         }",
          "611:         message[currentChar] = '\\0';",
          "642:         static char pt_out[4096] = { 0 };",
          "643:         int pt_offset = sprintf(pt_out, \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c/%c|%02i.%03i|%010\" PRId64,",
          "",
          "[Removed Lines]",
          "614:         verbprintf(0,  \"FLEX: %04i-%02i-%02i %02i:%02i:%02i %i/%i/%c/%c %02i.%03i [%09lld] ALN \",",
          "615:             gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "616:                         flex->Sync.baud, flex->Sync.levels, frag_flag, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "618:         verbprintf(0, \"%s\\n\", message);",
          "620:         if(flex_groupmessage == 1) {",
          "621:                 int groupbit = flex->Decode.capcode-2029568;",
          "622:                 if(groupbit < 0) return;",
          "624:                 int endpoint = flex->GroupHandler.GroupCodes[groupbit][CAPCODES_INDEX];",
          "625:                 for(int g = 1; g <= endpoint;g++)",
          "626:                 {",
          "627:                         verbprintf(1, \"FLEX Group message output: Groupbit: %i Total Capcodes; %i; index %i; Capcode: [%09lld]\\n\", groupbit, endpoint, g, flex->GroupHandler.GroupCodes[groupbit][g]);",
          "629:                         verbprintf(0,  \"FLEX: %04i-%02i-%02i %02i:%02i:%02i %i/%i/%c/%c %02i.%03i [%09lld] ALN \", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "630:                                         flex->Sync.baud, flex->Sync.levels, frag_flag, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->GroupHandler.GroupCodes[groupbit][g]);",
          "632:                         verbprintf(0, \"%s\\n\", message);",
          "633:                 }",
          "635:                 flex->GroupHandler.GroupCodes[groupbit][CAPCODES_INDEX] = 0;",
          "636:     flex->GroupHandler.GroupFrame[groupbit] = -1;",
          "637:     flex->GroupHandler.GroupCycle[groupbit] = -1;",
          "638:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6980e906c3525529731fc6746411c51b3412b028",
      "candidate_info": {
        "commit_hash": "6980e906c3525529731fc6746411c51b3412b028",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/6980e906c3525529731fc6746411c51b3412b028",
        "files": [
          "demod_flex.c"
        ],
        "message": "Unify FLEX print statements",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "583: }",
          "587:         if (flex==NULL) return;",
          "594:         char frag_flag = '?';",
          "595:         if (cont == 0 && frag == 3) frag_flag = 'K'; // complete, ready to send",
          "596:         if (cont == 0 && frag != 3) frag_flag = 'C'; // incomplete until appended to 1 or more 'F's",
          "597:         if (cont == 1             ) frag_flag = 'F'; // incomplete until a 'C' fragment is appended",
          "599:         unsigned char message[MAX_ALN];",
          "600:         memset(message, '\\0', MAX_ALN);",
          "",
          "[Removed Lines]",
          "586: static void parse_alphanumeric(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, unsigned int mw1, unsigned int len, int frag, int cont, int flex_groupmessage, int flex_groupbit) {",
          "588:         verbprintf(3, \"FLEX: Parse Alpha Numeric %u %u\\n\", mw1, len);",
          "590:         verbprintf(1, \"FLEX: %i/%i/%c %02i.%03i %10\" PRId64 \" %c%c|%1d|%3d\\n\", flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode, (flex->Decode.long_address ? 'L' : 'S'), (flex_groupmessage ? 'G' : 'S'), frag, len);",
          "592:         time_t now=time(NULL);",
          "593:         struct tm * gmt=gmtime(&now);",
          "",
          "[Added Lines]",
          "586: static void parse_alphanumeric(struct Flex * flex, unsigned int * phaseptr, unsigned int mw1, unsigned int len, int frag, int cont, int flex_groupmessage, int flex_groupbit) {",
          "593:         verbprintf(0, \"%1d.%1d.%c|\", frag, cont, frag_flag);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "611:         message[currentChar] = '\\0';",
          "619:         if(flex_groupmessage == 1) {",
          "620:                 int endpoint = flex->GroupHandler.GroupCodes[flex_groupbit][CAPCODES_INDEX];",
          "621:                 for(int g = 1; g <= endpoint;g++)",
          "622:                 {",
          "623:                         verbprintf(1, \"FLEX Group message output: Groupbit: %i Total Capcodes; %i; index %i; Capcode: [%010\" PRId64 \"]\\n\", flex_groupbit, endpoint, g, flex->GroupHandler.GroupCodes[flex_groupbit][g]);",
          "625:                 }",
          "",
          "[Removed Lines]",
          "614:         static char pt_out[4096] = { 0 };",
          "615:         int pt_offset = sprintf(pt_out, \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c/%c|%02i.%03i|%010\" PRId64,",
          "616:                         gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "617:                         flex->Sync.baud, flex->Sync.levels, PhaseNo, frag_flag, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "624:                         pt_offset += sprintf(pt_out + pt_offset, \" %010\" PRId64, flex->GroupHandler.GroupCodes[flex_groupbit][g]);",
          "",
          "[Added Lines]",
          "615:                         verbprintf(0, \"%010\" PRId64 \"|\", flex->GroupHandler.GroupCodes[flex_groupbit][g]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "629:                 flex->GroupHandler.GroupFrame[flex_groupbit] = -1;",
          "630:                 flex->GroupHandler.GroupCycle[flex_groupbit] = -1;",
          "631:         }",
          "636: }",
          "639:   if (flex==NULL) return;",
          "640:   unsigned const char flex_bcd[17] = \"0123456789 U -][\";",
          "",
          "[Removed Lines]",
          "632:         if (message[0] != '\\0') {",
          "633:             pt_offset += sprintf(pt_out + pt_offset, \"|ALN|%s\\n\", message);",
          "634:             verbprintf(0, pt_out);",
          "635:         }",
          "638: static void parse_numeric(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, int j) {",
          "",
          "[Added Lines]",
          "623:     verbprintf(0, message);",
          "626: static void parse_numeric(struct Flex * flex, unsigned int * phaseptr, int j) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "644:   w1 = w1 & 0x7f;",
          "645:   w2 = (w2 & 0x07) + w1;  // numeric message is 7 words max",
          "654:   int dw;",
          "",
          "[Removed Lines]",
          "647:   time_t now=time(NULL);",
          "648:   struct tm * gmt=gmtime(&now);",
          "649:   verbprintf(0,  \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c  |%02i.%03i|%010\" PRId64 \"|NUM|\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "650:       flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "687:     }",
          "688:     dw = phaseptr[i];",
          "689:   }",
          "691: }",
          "703:   if (flex==NULL) return;",
          "704:   unsigned const char flex_bcd[17] = \"0123456789 U -][\";",
          "712:   int w1 = phaseptr[j] >> 7 & 0x03;",
          "",
          "[Removed Lines]",
          "690:   verbprintf(0, \"\\n\");",
          "702: static void parse_tone_only(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, int j) {",
          "706:   time_t now=time(NULL);",
          "707:   struct tm * gmt=gmtime(&now);",
          "708:   verbprintf(0,  \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c  |%02i.%03i|%010\" PRId64 \"|TON|\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec, flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "",
          "[Added Lines]",
          "676: static void parse_tone_only(struct Flex * flex, unsigned int * phaseptr, int j) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "729:       }",
          "730:     }",
          "731:   }",
          "733: }",
          "736:   if (flex==NULL) return;",
          "742:   for (unsigned int i = 0; i < len; i++) {",
          "744:   }",
          "746: }",
          "",
          "[Removed Lines]",
          "732:   verbprintf(0, \"\\n\");",
          "735: static void parse_unknown(struct Flex * flex, unsigned int * phaseptr, char PhaseNo, unsigned int mw1, unsigned int len) {",
          "737:   time_t now=time(NULL);",
          "738:   struct tm * gmt=gmtime(&now);",
          "739:   verbprintf(0,  \"FLEX|%04i-%02i-%02i %02i:%02i:%02i|%i/%i/%c  |%02i.%03i|%010\" PRId64 \"|UNK|\", gmt->tm_year+1900, gmt->tm_mon+1, gmt->tm_mday, gmt->tm_hour, gmt->tm_min, gmt->tm_sec,",
          "740:       flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode);",
          "743:     verbprintf(0, \" %08x\", phaseptr[mw1 + i]);",
          "745:   verbprintf(0, \"\\n\");",
          "",
          "[Added Lines]",
          "703: static void parse_unknown(struct Flex * flex, unsigned int * phaseptr, unsigned int mw1, unsigned int len) {",
          "706:     verbprintf(0, \"%08x\", phaseptr[mw1 + i]);",
          "707:     if (i < (len - 1))",
          "708:       verbprintf(0, \" \");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "937:     if (is_tone_page(flex))",
          "938:       mw1 = len = 0;",
          "951:     if (flex->Decode.long_address) {",
          "",
          "[Removed Lines]",
          "941:     if (is_alphanumeric_page(flex))",
          "942:       parse_alphanumeric(flex, phaseptr, PhaseNo, mw1, len, frag, cont, flex_groupmessage, flex_groupbit);",
          "943:     else if (is_numeric_page(flex))",
          "944:       parse_numeric(flex, phaseptr, PhaseNo, j);",
          "945:     else if (is_tone_page(flex))",
          "946:       parse_tone_only(flex, phaseptr, PhaseNo, j); // parse_tone_only(flex, PhaseNo);",
          "947:     else",
          "948:       parse_unknown(flex, phaseptr, PhaseNo, mw1, len);",
          "",
          "[Added Lines]",
          "904:     verbprintf(0, \"FLEX|%i/%i|%02i.%03i.%c|%010\" PRId64 \"|%c%c|%1d|\", flex->Sync.baud, flex->Sync.levels, flex->FIW.cycleno, flex->FIW.frameno, PhaseNo, flex->Decode.capcode, (flex->Decode.long_address ? 'L' : 'S'), (flex_groupmessage ? 'G' : 'S'), flex->Decode.type);",
          "906:     if (is_alphanumeric_page(flex)) {",
          "907:       verbprintf(0, \"ALN|\");",
          "908:       parse_alphanumeric(flex, phaseptr, mw1, len, frag, cont, flex_groupmessage, flex_groupbit);",
          "909:  }",
          "910:     else if (is_numeric_page(flex)) {",
          "911:       verbprintf(0, \"NUM|\");",
          "912:       parse_numeric(flex, phaseptr, j);",
          "913:  }",
          "914:     else if (is_tone_page(flex)) {",
          "915:       verbprintf(0, \"TON|\");",
          "916:       parse_tone_only(flex, phaseptr, j);",
          "917:  }",
          "918:     else {",
          "919:       verbprintf(0, \"UNK|\");",
          "920:       parse_unknown(flex, phaseptr, mw1, len);",
          "921:  }",
          "922:     verbprintf(0, \"\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3ae8d8cf1f5237be3a1eb59bd30bfbd8addabe7",
      "candidate_info": {
        "commit_hash": "d3ae8d8cf1f5237be3a1eb59bd30bfbd8addabe7",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/d3ae8d8cf1f5237be3a1eb59bd30bfbd8addabe7",
        "files": [
          "demod_flex.c"
        ],
        "message": "Add attribution/authorship per PR for distribution requirements",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c"
        ]
      }
    },
    {
      "candidate_hash": "d98c75b9f6e69600435c01cccfed365fb89e1491",
      "candidate_info": {
        "commit_hash": "d98c75b9f6e69600435c01cccfed365fb89e1491",
        "repo": "EliasOenal/multimon-ng",
        "commit_url": "https://github.com/EliasOenal/multimon-ng/commit/d98c75b9f6e69600435c01cccfed365fb89e1491",
        "files": [
          "demod_flex.c"
        ],
        "message": "Add debug printing to test VW offsets",
        "before_after_code_files": [
          "demod_flex.c||demod_flex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EliasOenal/multimon-ng/pull/160"
        ],
        "olp_code_files": {
          "patch": [
            "demod_flex.c||demod_flex.c"
          ],
          "candidate": [
            "demod_flex.c||demod_flex.c"
          ]
        }
      },
      "candidate_diff": {
        "demod_flex.c||demod_flex.c": [
          "File: demod_flex.c -> demod_flex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:         if (flex==NULL) return;",
          "572:         verbprintf(3, \"FLEX: Parse Alpha Numeric\\n\");",
          "574:         time_t now=time(NULL);",
          "575:         struct tm * gmt=gmtime(&now);",
          "577:         char frag_flag = '?';",
          "580:         if (cont == 0 && frag == 3) frag_flag = 'K'; // complete, ready to send",
          "581:         if (cont == 0 && frag != 3) frag_flag = 'C'; // incomplete until appended to 1 or more 'F's",
          "582:         if (cont == 1             ) frag_flag = 'F'; // incomplete until a 'C' fragment is appended",
          "584:         memset(message, '\\0', MAX_ALN);",
          "585:         int  currentChar = 0;",
          "",
          "[Removed Lines]",
          "576:         unsigned char message[MAX_ALN];",
          "",
          "[Added Lines]",
          "574:         verbprintf(1, \"FLEX: %i/%i/%c %02i.%03i %10\" PRId64 \" %c%c|%1d|%3d\\n\", flex->Sync.baud, flex->Sync.levels, PhaseNo, flex->FIW.cycleno, flex->FIW.frameno, flex->Decode.capcode, (flex->Decode.long_address ? 'L' : 'S'), (flex_groupmessage ? 'G' : 'S'), frag, len);",
          "583:         unsigned char message[MAX_ALN];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "805:       return;",
          "806:   }",
          "810:   int flex_groupmessage = 0;",
          "811:   int flex_groupbit = 0;",
          "",
          "[Removed Lines]",
          "808:   verbprintf(3, \"FLEX: BlockInfoWord: (Phase %c) BIW:%08X AW:%02i-%02i (up to %i pages)\\n\", PhaseNo, biw, aoffset, voffset, voffset-aoffset);",
          "",
          "[Added Lines]",
          "809:   verbprintf(3, \"FLEX: BlockInfoWord: (Phase %c) BIW:%08X AW:%02u VW:%02u (up to %u pages)\\n\", PhaseNo, biw, aoffset, voffset, voffset-aoffset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "888:     int frag = (int) (phaseptr[hdr] >> 11) & 0x3L;",
          "890:     int cont = (int) (phaseptr[hdr] >> 10) & 0x1L;;",
          "893:     if (flex->Decode.type == FLEX_PAGETYPE_SHORT_INSTRUCTION)",
          "894:                 {",
          "",
          "[Removed Lines]",
          "891:     verbprintf(3, \"FLEX: VIW: type:%d mw1:%u len:%u frag:%i\\n\", flex->Decode.type, mw1, len, frag);",
          "",
          "[Added Lines]",
          "892:     verbprintf(3, \"FLEX: VIW %u: type:%d mw1:%u len:%u frag:%i\\n\", j, flex->Decode.type, mw1, len, frag);",
          "",
          "---------------"
        ]
      }
    }
  ]
}