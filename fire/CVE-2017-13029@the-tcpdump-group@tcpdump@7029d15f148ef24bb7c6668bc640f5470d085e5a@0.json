{
  "cve_id": "CVE-2017-13029",
  "cve_desc": "The PPP parser in tcpdump before 4.9.2 has a buffer over-read in print-ppp.c:print_ccp_config_options().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "7029d15f148ef24bb7c6668bc640f5470d085e5a",
  "patch_info": {
    "commit_hash": "7029d15f148ef24bb7c6668bc640f5470d085e5a",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/7029d15f148ef24bb7c6668bc640f5470d085e5a",
    "files": [
      "print-ppp.c",
      "tests/TESTLIST",
      "tests/ppp_ccp_config_deflate_option_asan.out",
      "tests/ppp_ccp_config_deflate_option_asan.pcap"
    ],
    "message": "CVE-2017-13029/PPP: Fix a bounds check, and clean up other bounds checks.\n\nFor configuration protocol options, use ND_TCHECK() and\nND_TCHECK_nBITS() macros, passing them the appropriate pointer argument.\nThis fixes one case where the ND_TCHECK2() call they replace was not\nchecking enough bytes.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "before_after_code_files": [
      "print-ppp.c||print-ppp.c"
    ]
  },
  "patch_diff": {
    "print-ppp.c||print-ppp.c": [
      "File: print-ppp.c -> print-ppp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "611:    ND_PRINT((ndo, \" (length bogus, should be >= 6)\"));",
      "612:    return len;",
      "613:   }",
      "615:   ND_PRINT((ndo, \": Vendor: %s (%u)\",",
      "616:    tok2str(oui_values,\"Unknown\",EXTRACT_24BITS(p+2)),",
      "617:    EXTRACT_24BITS(p + 2)));",
      "",
      "[Removed Lines]",
      "614:   ND_TCHECK2(*(p + 2), 3);",
      "",
      "[Added Lines]",
      "614:   ND_TCHECK_24BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "630:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
      "631:    return len;",
      "632:   }",
      "634:   ND_PRINT((ndo, \": %u\", EXTRACT_16BITS(p + 2)));",
      "635:   break;",
      "636:  case LCPOPT_ACCM:",
      "",
      "[Removed Lines]",
      "633:   ND_TCHECK2(*(p + 2), 2);",
      "",
      "[Added Lines]",
      "633:   ND_TCHECK_16BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "638:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
      "639:    return len;",
      "640:   }",
      "642:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_32BITS(p + 2)));",
      "643:   break;",
      "644:  case LCPOPT_AP:",
      "",
      "[Removed Lines]",
      "641:   ND_TCHECK2(*(p + 2), 4);",
      "",
      "[Added Lines]",
      "641:   ND_TCHECK_32BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "646:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
      "647:    return len;",
      "648:   }",
      "650:   ND_PRINT((ndo, \": %s\", tok2str(ppptype2str, \"Unknown Auth Proto (0x04x)\", EXTRACT_16BITS(p + 2))));",
      "652:   switch (EXTRACT_16BITS(p+2)) {",
      "",
      "[Removed Lines]",
      "649:   ND_TCHECK2(*(p + 2), 2);",
      "",
      "[Added Lines]",
      "649:   ND_TCHECK_16BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "668:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
      "669:    return 0;",
      "670:   }",
      "672:   if (EXTRACT_16BITS(p+2) == PPP_LQM)",
      "673:    ND_PRINT((ndo, \": LQR\"));",
      "674:   else",
      "",
      "[Removed Lines]",
      "671:   ND_TCHECK2(*(p + 2), 2);",
      "",
      "[Added Lines]",
      "671:   ND_TCHECK_16BITS(p+2);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "679:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
      "680:    return 0;",
      "681:   }",
      "683:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_32BITS(p + 2)));",
      "684:   break;",
      "685:  case LCPOPT_PFC:",
      "",
      "[Removed Lines]",
      "682:   ND_TCHECK2(*(p + 2), 4);",
      "",
      "[Added Lines]",
      "682:   ND_TCHECK_32BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "691:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
      "692:    return 0;",
      "693:   }",
      "695:   ND_PRINT((ndo, \": 0x%04x\", EXTRACT_16BITS(p + 2)));",
      "696:   break;",
      "697:  case LCPOPT_CBACK:",
      "",
      "[Removed Lines]",
      "694:   ND_TCHECK2(*(p + 2), 2);",
      "",
      "[Added Lines]",
      "694:   ND_TCHECK_16BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "710:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
      "711:    return 0;",
      "712:   }",
      "714:   ND_PRINT((ndo, \": %u\", EXTRACT_16BITS(p + 2)));",
      "715:   break;",
      "716:  case LCPOPT_MLED:",
      "",
      "[Removed Lines]",
      "713:   ND_TCHECK2(*(p + 2), 2);",
      "",
      "[Added Lines]",
      "713:   ND_TCHECK_16BITS(p + 2);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1055:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
      "1056:    return 0;",
      "1057:   }",
      "1059:   compproto = EXTRACT_16BITS(p+2);",
      "1061:   ND_PRINT((ndo, \": %s (0x%02x):\",",
      "",
      "[Removed Lines]",
      "1058:   ND_TCHECK2(*(p + 2), 2);",
      "",
      "[Added Lines]",
      "1058:   ND_TCHECK_16BITS(p+2);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1241:    ND_PRINT((ndo, \" (length bogus, should be >= 3)\"));",
      "1242:    return len;",
      "1243:   }",
      "1245:   ND_PRINT((ndo, \": Version: %u, Dictionary Bits: %u\",",
      "1246:    p[2] >> 5, p[2] & 0x1f));",
      "1247:   break;",
      "",
      "[Removed Lines]",
      "1244:   ND_TCHECK2(*(p + 2), 1);",
      "",
      "[Added Lines]",
      "1244:   ND_TCHECK(p[2]);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1250:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
      "1251:    return len;",
      "1252:   }",
      "1254:   ND_PRINT((ndo, \": Features: %u, PxP: %s, History: %u, #CTX-ID: %u\",",
      "1255:     (p[2] & 0xc0) >> 6,",
      "1256:     (p[2] & 0x20) ? \"Enabled\" : \"Disabled\",",
      "",
      "[Removed Lines]",
      "1253:   ND_TCHECK2(*(p + 2), 1);",
      "",
      "[Added Lines]",
      "1253:   ND_TCHECK(p[3]);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1261:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
      "1262:    return len;",
      "1263:   }",
      "1265:   ND_PRINT((ndo, \": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u\",",
      "1266:    (p[2] & 0xf0) >> 4,",
      "1267:    ((p[2] & 0x0f) == 8) ? \"zlib\" : \"unknown\",",
      "",
      "[Removed Lines]",
      "1264:   ND_TCHECK2(*(p + 2), 1);",
      "",
      "[Added Lines]",
      "1264:   ND_TCHECK(p[3]);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1336:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
      "1337:    return len;",
      "1338:   }",
      "1340:   ND_PRINT((ndo, \": Magic-Num 0x%08x\", EXTRACT_32BITS(p + 2)));",
      "1341:   break;",
      "1342:  default:",
      "",
      "[Removed Lines]",
      "1339:   ND_TCHECK2(*(p + 2), 4);",
      "",
      "[Added Lines]",
      "1339:   ND_TCHECK_32BITS(p + 2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
      "candidate_info": {
        "commit_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "files": [
          "extract.h",
          "print-ah.c",
          "print-bgp.c",
          "print-bootp.c",
          "print-chdlc.c",
          "print-domain.c",
          "print-dvmrp.c",
          "print-eap.c",
          "print-fr.c",
          "print-icmp.c",
          "print-igmp.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ppp.c",
          "print-rpki-rtr.c",
          "print-rx.c",
          "print-smb.c",
          "print-stp.c",
          "print-tftp.c",
          "print-udp.c",
          "print-vtp.c"
        ],
        "message": "Rename ND_TCHECK_/ND_TTEST_ macros\n\nNow all the macros have a name meaning a count in bytes.\n\ne.g.:\nND_TCHECK_32BITS -> ND_TCHECK_4\nND_TTEST_32BITS -> ND_TTEST_4",
        "before_after_code_files": [
          "extract.h||extract.h",
          "print-ah.c||print-ah.c",
          "print-bgp.c||print-bgp.c",
          "print-bootp.c||print-bootp.c",
          "print-chdlc.c||print-chdlc.c",
          "print-domain.c||print-domain.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-eap.c||print-eap.c",
          "print-fr.c||print-fr.c",
          "print-icmp.c||print-icmp.c",
          "print-igmp.c||print-igmp.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ppp.c||print-ppp.c",
          "print-rpki-rtr.c||print-rpki-rtr.c",
          "print-rx.c||print-rx.c",
          "print-smb.c||print-smb.c",
          "print-stp.c||print-stp.c",
          "print-tftp.c||print-tftp.c",
          "print-udp.c||print-udp.c",
          "print-vtp.c||print-vtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ppp.c||print-ppp.c"
          ],
          "candidate": [
            "print-ppp.c||print-ppp.c"
          ]
        }
      },
      "candidate_diff": {
        "extract.h||extract.h": [
          "File: extract.h -> extract.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "392: #define ND_TTEST_8BITS(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_8BITS(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_16BITS(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_16BITS(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_24BITS(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_24BITS(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_32BITS(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_32BITS(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_40BITS(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_40BITS(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_48BITS(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_48BITS(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_56BITS(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_56BITS(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_64BITS(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_64BITS(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_128BITS(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_128BITS(p) ND_TCHECK2(*(p), 16)",
          "",
          "[Added Lines]",
          "392: #define ND_TTEST_1(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_1(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_2(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_2(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_3(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_3(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_4(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_4(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_5(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_5(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_6(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_6(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_7(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_7(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_8(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_8(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_16(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_16(p) ND_TCHECK2(*(p), 16)",
          "",
          "---------------"
        ],
        "print-ah.c||print-ah.c": [
          "File: print-ah.c -> print-ah.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  ND_PRINT((ndo, \"AH(spi=0x%08x\", EXTRACT_BE_32BITS(&ah->ah_spi)));",
          "50:  if (ndo->ndo_vflag)",
          "51:   ND_PRINT((ndo, \",sumlen=%d\", sumlen));",
          "53:  ND_PRINT((ndo, \",seq=0x%x\", EXTRACT_BE_32BITS(ah + 1)));",
          "54:  if (!ND_TTEST2(*bp, sizeof(struct ah) + sumlen)) {",
          "55:   ND_PRINT((ndo, \"[truncated]):\"));",
          "",
          "[Removed Lines]",
          "52:  ND_TCHECK_32BITS(ah + 1);",
          "",
          "[Added Lines]",
          "52:  ND_TCHECK_4(ah + 1);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     total_length = 0;",
          "684:     addr_length = EXTRACT_8BITS(pptr);",
          "685:     pptr++;",
          "",
          "[Removed Lines]",
          "683:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "683:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:     }",
          "699:     addr_length = EXTRACT_8BITS(pptr);",
          "700:     pptr++;",
          "",
          "[Removed Lines]",
          "698:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "698:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "784:   return -1;",
          "788:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_32BITS(pptr + 1));",
          "",
          "[Removed Lines]",
          "787:  ND_TCHECK_32BITS(pptr + 1);",
          "",
          "[Added Lines]",
          "787:  ND_TCHECK_4(pptr + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037: {",
          "1038:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1041:         plen=EXTRACT_BE_16BITS(pptr);",
          "1042:         tlen=plen;",
          "1043:         pptr+=2;",
          "",
          "[Removed Lines]",
          "1040:  ND_TCHECK_16BITS(pptr);",
          "",
          "[Added Lines]",
          "1040:  ND_TCHECK_2(pptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1458:   if (len != 4)",
          "1459:    ND_PRINT((ndo, \"invalid len\"));",
          "1460:   else {",
          "1462:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_32BITS(tptr)));",
          "1463:   }",
          "1464:   break;",
          "",
          "[Removed Lines]",
          "1461:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1461:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1504:   }",
          "1505:   while (tlen>0) {",
          "1506:    uint32_t comm;",
          "1508:    comm = EXTRACT_BE_32BITS(tptr);",
          "1509:    switch (comm) {",
          "1510:    case BGP_COMMUNITY_NO_EXPORT:",
          "",
          "[Removed Lines]",
          "1507:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1507:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2064:                 while (tlen>0) {",
          "2065:                     uint16_t extd_comm;",
          "2068:                     extd_comm=EXTRACT_BE_16BITS(tptr);",
          "2070:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "",
          "[Removed Lines]",
          "2067:                     ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2067:                     ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2250:   break;",
          "2251:  }",
          "2252:         case BGPTYPE_ATTR_SET:",
          "2254:                 if (len < 4)",
          "2255:                  goto trunc;",
          "2256:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "",
          "[Removed Lines]",
          "2253:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2253:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2516:  length -= BGP_SIZE;",
          "2520:  if (length < 2)",
          "2521:   goto trunc;",
          "2522:  withdrawn_routes_len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2519:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2519:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2536:   length -= withdrawn_routes_len;",
          "2537:  }",
          "2540:  if (length < 2)",
          "2541:   goto trunc;",
          "2542:  len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2539:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2539:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2716:   bgpn.bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2717:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2718:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2720:       shutdown_comm_length = EXTRACT_8BITS(tptr);",
          "2721:       remainder_offset = 0;",
          "",
          "[Removed Lines]",
          "2719:       ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2719:       ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-bootp.c||print-bootp.c": [
          "File: print-bootp.c -> print-bootp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:  bp += sizeof(int32_t);",
          "615:   tag = EXTRACT_8BITS(bp);",
          "616:   bp++;",
          "617:   if (tag == TAG_PAD && ndo->ndo_vflag < 3)",
          "",
          "[Removed Lines]",
          "614:  while (ND_TTEST_8BITS(bp)) {",
          "",
          "[Added Lines]",
          "614:  while (ND_TTEST_1(bp)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:   if (tag == TAG_END && ndo->ndo_vflag < 3)",
          "620:    return;",
          "621:   if (tag == TAG_EXTENDED_OPTION) {",
          "623:    tag = EXTRACT_BE_16BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "622:    ND_TCHECK_16BITS(bp + 1);",
          "",
          "[Added Lines]",
          "622:    ND_TCHECK_2(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634:    len = 0;",
          "635:   else {",
          "638:    len = EXTRACT_8BITS(bp);",
          "639:    bp++;",
          "640:   }",
          "",
          "[Removed Lines]",
          "637:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "637:    ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "645:   if (tag == TAG_PAD && ndo->ndo_vflag > 2) {",
          "646:    u_int ntag = 1;",
          "649:     bp++;",
          "650:     ntag++;",
          "651:    }",
          "",
          "[Removed Lines]",
          "647:    while (ND_TTEST_8BITS(bp) &&",
          "648:        EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "[Added Lines]",
          "647:    while (ND_TTEST_1(bp) &&",
          "648:           EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "---------------"
        ],
        "print-chdlc.c||print-chdlc.c": [
          "File: print-chdlc.c -> print-chdlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:                 if (length < 2)",
          "96:                     goto trunc;",
          "98:                 if (*(p+1) == NLPID_CLNP ||",
          "",
          "[Removed Lines]",
          "97:                 ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "97:                 ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: {",
          "57:  register u_char i;",
          "60:   return (NULL);",
          "61:  i = EXTRACT_8BITS(cp);",
          "62:  cp++;",
          "",
          "[Removed Lines]",
          "59:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "59:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:    if ((i & ~INDIR_MASK) != EDNS0_ELT_BITLABEL)",
          "72:     return (NULL);",
          "73:    if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "74:     bitlen = 256;",
          "",
          "[Removed Lines]",
          "71:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "71:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:    cp += bytelen;",
          "78:   } else",
          "79:    cp += i;",
          "81:    return (NULL);",
          "82:   i = EXTRACT_8BITS(cp);",
          "83:   cp++;",
          "",
          "[Removed Lines]",
          "80:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "80:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  const u_char *bitp, *lim;",
          "95:  char tc;",
          "98:   return(NULL);",
          "99:  if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "100:   bitlen = 256;",
          "",
          "[Removed Lines]",
          "97:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "97:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131: {",
          "132:  register u_int i;",
          "135:   return(-1);",
          "136:  i = EXTRACT_8BITS(cp);",
          "137:  if ((i & INDIR_MASK) == EDNS0_MASK) {",
          "",
          "[Removed Lines]",
          "134:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "134:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:    ND_PRINT((ndo, \"<ELT %d>\", elt));",
          "141:    return(-1);",
          "142:   }",
          "144:    return(-1);",
          "145:   if ((bitlen = EXTRACT_8BITS(cp + 1)) == 0)",
          "146:    bitlen = 256;",
          "",
          "[Removed Lines]",
          "143:   if (!ND_TTEST_8BITS(cp + 1))",
          "",
          "[Added Lines]",
          "143:   if (!ND_TTEST_1(cp + 1))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:  if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "163:   return(NULL);",
          "165:   return(NULL);",
          "166:  max_offset = (u_int)(cp - bp);",
          "167:  i = EXTRACT_8BITS(cp);",
          "",
          "[Removed Lines]",
          "164:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "164:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:      rp = cp + 1;",
          "179:      compress = 1;",
          "180:     }",
          "182:      return(NULL);",
          "183:     offset = (((i << 8) | EXTRACT_8BITS(cp)) & 0x3fff);",
          "",
          "[Removed Lines]",
          "181:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "181:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:     cp = bp + offset;",
          "200:     if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "201:      return(NULL);",
          "203:      return(NULL);",
          "204:     i = EXTRACT_8BITS(cp);",
          "205:     cp++;",
          "",
          "[Removed Lines]",
          "202:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "202:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:    ND_PRINT((ndo, \".\"));",
          "227:    if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "228:     return(NULL);",
          "230:     return(NULL);",
          "231:    i = EXTRACT_8BITS(cp);",
          "232:    cp++;",
          "",
          "[Removed Lines]",
          "229:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "229:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "245: {",
          "246:  register u_int i;",
          "249:   return (NULL);",
          "250:  i = EXTRACT_8BITS(cp);",
          "251:  cp++;",
          "",
          "[Removed Lines]",
          "248:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "248:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "512:   int pbit, pbyte;",
          "513:   char ntop_buf[INET6_ADDRSTRLEN];",
          "516:    return(NULL);",
          "517:   pbit = EXTRACT_8BITS(cp);",
          "518:   pbyte = (pbit & ~7) / 8;",
          "",
          "[Removed Lines]",
          "515:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "515:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "558:   if ((cp = ns_nprint(ndo, cp, bp)) == NULL)",
          "559:    return(NULL);",
          "560:   cp += 6;",
          "562:    return(NULL);",
          "563:   ND_PRINT((ndo, \" fudge=%u\", EXTRACT_BE_16BITS(cp)));",
          "564:   cp += 2;",
          "566:    return(NULL);",
          "567:   ND_PRINT((ndo, \" maclen=%u\", EXTRACT_BE_16BITS(cp)));",
          "568:   cp += 2 + EXTRACT_BE_16BITS(cp);",
          "570:    return(NULL);",
          "571:   ND_PRINT((ndo, \" origid=%u\", EXTRACT_BE_16BITS(cp)));",
          "572:   cp += 2;",
          "574:    return(NULL);",
          "575:   ND_PRINT((ndo, \" error=%u\", EXTRACT_BE_16BITS(cp)));",
          "576:   cp += 2;",
          "578:    return(NULL);",
          "579:   ND_PRINT((ndo, \" otherlen=%u\", EXTRACT_BE_16BITS(cp)));",
          "580:   cp += 2;",
          "",
          "[Removed Lines]",
          "561:   if (!ND_TTEST_16BITS(cp))",
          "565:   if (!ND_TTEST_16BITS(cp))",
          "569:   if (!ND_TTEST_16BITS(cp))",
          "573:   if (!ND_TTEST_16BITS(cp))",
          "577:   if (!ND_TTEST_16BITS(cp))",
          "",
          "[Added Lines]",
          "561:   if (!ND_TTEST_2(cp))",
          "565:   if (!ND_TTEST_2(cp))",
          "569:   if (!ND_TTEST_2(cp))",
          "573:   if (!ND_TTEST_2(cp))",
          "577:   if (!ND_TTEST_2(cp))",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  if (bp >= ep)",
          "78:   return;",
          "81:  type = EXTRACT_8BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "80:  ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "80:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:    }",
          "199:    origin = 0;",
          "200:    for (i = 0; i < width; ++i) {",
          "202:     origin = origin << 8 | EXTRACT_8BITS(bp);",
          "203:     bp++;",
          "204:    }",
          "205:    for ( ; i < 4; ++i)",
          "206:     origin <<= 8;",
          "209:    metric = EXTRACT_8BITS(bp);",
          "210:    bp++;",
          "211:    done = metric & 0x80;",
          "",
          "[Removed Lines]",
          "201:     ND_TCHECK_8BITS(bp);",
          "208:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "201:     ND_TCHECK_1(bp);",
          "208:    ND_TCHECK_1(bp);",
          "",
          "---------------"
        ],
        "print-eap.c||print-eap.c": [
          "File: print-eap.c -> print-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     switch (eap->type) {",
          "184:     case EAP_FRAME_TYPE_PACKET:",
          "186:         type = *(tptr);",
          "188:         len = EXTRACT_BE_16BITS(tptr + 2);",
          "189:         ND_PRINT((ndo, \", %s (%u), id %u, len %u\",",
          "190:                tok2str(eap_code_values, \"unknown\", type),",
          "",
          "[Removed Lines]",
          "185:         ND_TCHECK_8BITS(tptr);",
          "187:         ND_TCHECK_16BITS(tptr+2);",
          "",
          "[Added Lines]",
          "185:         ND_TCHECK_1(tptr);",
          "187:         ND_TCHECK_2(tptr + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         ND_TCHECK2(*tptr, len);",
          "199:             subtype = EXTRACT_8BITS(tptr + 4);",
          "200:             ND_PRINT((ndo, \"\\n\\t\\t Type %s (%u)\",",
          "201:                    tok2str(eap_type_values, \"unknown\", subtype),",
          "",
          "[Removed Lines]",
          "198:             ND_TCHECK_8BITS(tptr+4);",
          "",
          "[Added Lines]",
          "198:             ND_TCHECK_1(tptr + 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:                 while (count < len) {",
          "229:                     ND_PRINT((ndo, \" %s (%u),\",",
          "230:                            tok2str(eap_type_values, \"unknown\", EXTRACT_8BITS((tptr + count))),",
          "",
          "[Removed Lines]",
          "228:                     ND_TCHECK_8BITS(tptr+count);",
          "",
          "[Added Lines]",
          "228:                     ND_TCHECK_1(tptr + count);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:             case EAP_TYPE_TTLS:",
          "237:             case EAP_TYPE_TLS:",
          "239:                 if (subtype == EAP_TYPE_TTLS)",
          "240:                     ND_PRINT((ndo, \" TTLSv%u\",",
          "241:                            EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "",
          "[Removed Lines]",
          "238:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "238:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "248:       ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "249:                 }",
          "250:                 break;",
          "252:             case EAP_TYPE_FAST:",
          "254:                 ND_PRINT((ndo, \" FASTv%u\",",
          "255:                        EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "256:                 ND_PRINT((ndo, \" flags [%s] 0x%02x,\",",
          "",
          "[Removed Lines]",
          "247:                     ND_TCHECK_32BITS(tptr + 6);",
          "253:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "247:                     ND_TCHECK_4(tptr + 6);",
          "253:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "262:                     ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "263:                 }",
          "",
          "[Removed Lines]",
          "261:                     ND_TCHECK_32BITS(tptr + 6);",
          "",
          "[Added Lines]",
          "261:                     ND_TCHECK_4(tptr + 6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:             case EAP_TYPE_AKA:",
          "269:             case EAP_TYPE_SIM:",
          "271:                 ND_PRINT((ndo, \" subtype [%s] 0x%02x,\",",
          "272:                        tok2str(eap_aka_subtype_values, \"unknown\", EXTRACT_8BITS((tptr + 5))),",
          "",
          "[Removed Lines]",
          "270:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "270:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------"
        ],
        "print-fr.c||print-fr.c": [
          "File: print-fr.c -> print-fr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                            const u_char *p, u_int *dlci,",
          "103:                            u_int *addr_len, uint8_t *flags, u_int length)",
          "104: {",
          "106:   return -1;",
          "107:  if ((EXTRACT_8BITS(p) & FR_EA_BIT))",
          "108:   return 0;",
          "111:   return -1;",
          "",
          "[Removed Lines]",
          "105:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "110:  if (!ND_TTEST_8BITS(p+1) || length < 2)",
          "",
          "[Added Lines]",
          "105:  if (!ND_TTEST_1(p) || length < 1)",
          "110:  if (!ND_TTEST_1(p + 1) || length < 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  p += 2;",
          "124:  length -= 2;",
          "126:   return -1;",
          "128:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0) {",
          "",
          "[Removed Lines]",
          "125:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "125:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   length--;",
          "133:  }",
          "136:   return -1;",
          "137:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0)",
          "",
          "[Removed Lines]",
          "135:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "135:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   return 0;",
          "254:  }",
          "257:  if (length < addr_len + 1)",
          "258:   goto trunc;",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK_8BITS(p + addr_len);",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_1(p + addr_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:                         ND_PRINT((ndo, \"UI %02x! \", EXTRACT_8BITS(p + addr_len)));",
          "269:                 } else {",
          "",
          "[Removed Lines]",
          "266:   if (!ND_TTEST_16BITS(p + addr_len) || length < addr_len + 2) {",
          "",
          "[Added Lines]",
          "266:   if (!ND_TTEST_2(p + addr_len) || length < addr_len + 2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:                 }",
          "286:         }",
          "289:  if (length < addr_len + 2)",
          "290:   goto trunc;",
          "",
          "[Removed Lines]",
          "288:  ND_TCHECK_8BITS(p + addr_len + 1);",
          "",
          "[Added Lines]",
          "288:  ND_TCHECK_1(p + addr_len + 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "307:   hdr_len = addr_len + 1 /* UI */ + 1 /* NLPID */;",
          "308:  }",
          "311:  if (length < hdr_len)",
          "312:   goto trunc;",
          "313:  nlpid = EXTRACT_8BITS(p + hdr_len - 1);",
          "",
          "[Removed Lines]",
          "310:         ND_TCHECK_8BITS(p + hdr_len - 1);",
          "",
          "[Added Lines]",
          "310:         ND_TCHECK_1(p + hdr_len - 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "907:  ND_PRINT((ndo, \"%s, codeset %u\", is_ansi ? \"ANSI\" : \"CCITT\", codeset));",
          "909:  if (call_ref_length != 0) {",
          "911:   if (call_ref_length > 1 || EXTRACT_8BITS(p) != 0) {",
          "",
          "[Removed Lines]",
          "910:   ND_TCHECK_8BITS(p);",
          "",
          "[Added Lines]",
          "910:   ND_TCHECK_1(p);",
          "",
          "---------------"
        ],
        "print-icmp.c||print-icmp.c": [
          "File: print-icmp.c -> print-icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:   ND_PRINT((ndo, \"\\n\\t\"));",
          "582:   ip = (const struct ip *)bp;",
          "583:                 snapend_save = ndo->ndo_snapend;",
          "585:   ip_print(ndo, bp, EXTRACT_BE_16BITS(&ip->ip_len));",
          "586:                 ndo->ndo_snapend = snapend_save;",
          "587:  }",
          "",
          "[Removed Lines]",
          "584:   ND_TCHECK_16BITS(&ip->ip_len);",
          "",
          "[Added Lines]",
          "584:   ND_TCHECK_2(&ip->ip_len);",
          "",
          "---------------"
        ],
        "print-igmp.c||print-igmp.c": [
          "File: print-igmp.c -> print-igmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "159:  return;",
          "160:     }",
          "162:     ngroups = EXTRACT_BE_16BITS(bp + 6);",
          "163:     ND_PRINT((ndo, \", %d group record(s)\", ngroups));",
          "164:     if (ndo->ndo_vflag > 0) {",
          "",
          "[Removed Lines]",
          "161:     ND_TCHECK_16BITS(bp + 6);",
          "",
          "[Added Lines]",
          "161:     ND_TCHECK_2(bp + 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "216:  return;",
          "217:     }",
          "219:     mrc = EXTRACT_8BITS(bp + 1);",
          "220:     if (mrc < 128) {",
          "221:  mrt = mrc;",
          "",
          "[Removed Lines]",
          "218:     ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "218:     ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:         }",
          "232:  ND_PRINT((ndo, \"]\"));",
          "233:     }",
          "235:     if (EXTRACT_BE_32BITS(bp + 4) == 0)",
          "236:  return;",
          "237:     ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[4])));",
          "239:     nsrcs = EXTRACT_BE_16BITS(bp + 10);",
          "240:     if (nsrcs > 0) {",
          "241:  if (len < 12 + (nsrcs << 2))",
          "",
          "[Removed Lines]",
          "234:     ND_TCHECK_32BITS(bp + 4);",
          "238:     ND_TCHECK_16BITS(bp + 10);",
          "",
          "[Added Lines]",
          "234:     ND_TCHECK_4(bp + 4);",
          "238:     ND_TCHECK_2(bp + 10);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:         return;",
          "268:     }",
          "271:     switch (EXTRACT_8BITS(bp)) {",
          "272:     case 0x11:",
          "273:         ND_PRINT((ndo, \"igmp query\"));",
          "274:  if (len >= 12)",
          "275:      print_igmpv3_query(ndo, bp, len);",
          "276:  else {",
          "278:      if (EXTRACT_8BITS(bp + 1)) {",
          "279:   ND_PRINT((ndo, \" v2\"));",
          "280:   if (EXTRACT_8BITS(bp + 1) != 100)",
          "281:       ND_PRINT((ndo, \" [max resp time %u]\", EXTRACT_8BITS(bp + 1)));",
          "282:      } else",
          "283:   ND_PRINT((ndo, \" v1\"));",
          "285:      if (EXTRACT_BE_32BITS(bp + 4))",
          "286:                 ND_PRINT((ndo, \" [gaddr %s]\", ipaddr_string(ndo, &bp[4])));",
          "287:             if (len != 8)",
          "",
          "[Removed Lines]",
          "270:     ND_TCHECK_8BITS(bp);",
          "277:             ND_TCHECK_8BITS(bp + 1);",
          "284:             ND_TCHECK_32BITS(bp + 4);",
          "",
          "[Added Lines]",
          "270:     ND_TCHECK_1(bp);",
          "277:             ND_TCHECK_1(bp + 1);",
          "284:             ND_TCHECK_4(bp + 4);",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922:  if (p[0] & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "926:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "927:  }",
          "928:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "925:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "925:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   return ep2 + 1;",
          "931:  }",
          "934:  ND_PRINT((ndo,\"(\"));",
          "935:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "936:  if (map && t < nmap && map[t].type)",
          "",
          "[Removed Lines]",
          "933:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "933:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "940:  if (p[0] & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "943:   v = EXTRACT_BE_16BITS(p + 2);",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "",
          "[Removed Lines]",
          "942:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "942:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:  if (p[0] & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "977:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "978:  }",
          "979:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "976:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "976:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:   return ep2 + 1;",
          "982:  }",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Removed Lines]",
          "984:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "984:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:             case ESIS_OPTION_PROTOCOLS:",
          "1344:                 while (opli>0) {",
          "1346:                     ND_PRINT((ndo, \"%s (0x%02x)\",",
          "1347:                            tok2str(nlpid_values,",
          "1348:                                    \"unknown\",",
          "",
          "[Removed Lines]",
          "1345:                     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "1345:                     ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1625:           stlv_len = stlv_len - 8;",
          "1627:           while (stlv_len >= 4) {",
          "1629:             ND_PRINT((ndo, \"\\n\\t        T: %d, R: %d, RES: %d, ISID: %d\",",
          "1630:                     (EXTRACT_BE_32BITS(tptr) >> 31),",
          "1631:                     (EXTRACT_BE_32BITS(tptr) >> 30) & 0x01,",
          "",
          "[Removed Lines]",
          "1628:             ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1628:             ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2000:     tptr+=NODE_ID_LEN;",
          "2004:      return(0);",
          "2005:  ND_PRINT((ndo, \", Metric: %d\", EXTRACT_BE_24BITS(tptr)));",
          "2006:  tptr+=3;",
          "2007:     }",
          "2010:         return(0);",
          "2012:     tptr++;",
          "",
          "[Removed Lines]",
          "2009:     if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2009:     if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2041: isis_print_mtid(netdissect_options *ndo,",
          "2042:                 const uint8_t *tptr, const char *ident)",
          "2043: {",
          "2045:         return(0);",
          "2047:     ND_PRINT((ndo, \"%s%s\",",
          "",
          "[Removed Lines]",
          "2044:     if (!ND_TTEST_16BITS(tptr))",
          "",
          "[Added Lines]",
          "2044:     if (!ND_TTEST_2(tptr))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2073:     u_int metric, status_byte, bit_length, byte_length, sublen, processed, subtlvtype, subtlvlen;",
          "2076:         return (0);",
          "2077:     metric = EXTRACT_BE_32BITS(tptr);",
          "2078:     processed=4;",
          "2079:     tptr+=4;",
          "2081:     if (afi == AF_INET) {",
          "2083:             return (0);",
          "2084:         status_byte=EXTRACT_8BITS(tptr);",
          "2085:         tptr++;",
          "",
          "[Removed Lines]",
          "2075:     if (!ND_TTEST_32BITS(tptr))",
          "",
          "[Added Lines]",
          "2075:     if (!ND_TTEST_4(tptr))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2145:            than one subTLV - therefore the first byte must reflect",
          "2146:            the aggregate bytecount of the subTLVs for this prefix",
          "2149:             return (0);",
          "2150:         sublen=EXTRACT_8BITS(tptr);",
          "2151:         tptr++;",
          "",
          "[Removed Lines]",
          "2148:         if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2148:         if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2589:  switch (tlv_type) {",
          "2590:  case ISIS_TLV_AREA_ADDR:",
          "2592:      alen = EXTRACT_8BITS(tptr);",
          "2593:      tptr++;",
          "2594:      while (tmp && alen < tmp) {",
          "",
          "[Removed Lines]",
          "2591:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2591:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2600:   tmp -= alen + 1;",
          "2602:                     break;",
          "2604:   alen = EXTRACT_8BITS(tptr);",
          "2605:   tptr++;",
          "2606:      }",
          "",
          "[Removed Lines]",
          "2603:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2603:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2774:      }",
          "2775:      break;",
          "2776:  case ISIS_TLV_AUTH:",
          "2779:             ND_PRINT((ndo, \"\\n\\t      %s: \",",
          "2780:                    tok2str(isis_subtlv_auth_values,",
          "",
          "[Removed Lines]",
          "2777:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2777:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2788:   break;",
          "2789:      case ISIS_SUBTLV_AUTH_MD5:",
          "2790:   for(i=1;i<tlv_len;i++) {",
          "2792:       ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2793:   }",
          "2794:   if (tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN+1)",
          "",
          "[Removed Lines]",
          "2791:       ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2791:       ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2802:   break;",
          "2803:             case ISIS_SUBTLV_AUTH_GENERIC:",
          "2805:                 key_id = EXTRACT_BE_16BITS(tptr + 1);",
          "2806:                 ND_PRINT((ndo, \"%u, password: \", key_id));",
          "2807:                 for(i=1 + sizeof(uint16_t);i<tlv_len;i++) {",
          "2809:                     ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2810:                 }",
          "2811:                 break;",
          "",
          "[Removed Lines]",
          "2804:   ND_TCHECK_16BITS(tptr + 1);",
          "2808:                     ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2804:   ND_TCHECK_2(tptr + 1);",
          "2808:                     ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2820:  case ISIS_TLV_PTP_ADJ:",
          "2821:      tlv_ptp_adj = (const struct isis_tlv_ptp_adj *)tptr;",
          "2822:      if(tmp>=1) {",
          "2824:   ND_PRINT((ndo, \"\\n\\t      Adjacency State: %s (%u)\",",
          "2825:          tok2str(isis_ptp_adjancey_values, \"unknown\", EXTRACT_8BITS(tptr)),",
          "2826:          EXTRACT_8BITS(tptr)));",
          "",
          "[Removed Lines]",
          "2823:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2823:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2848:  case ISIS_TLV_PROTOCOLS:",
          "2849:      ND_PRINT((ndo, \"\\n\\t      NLPID(s): \"));",
          "2850:      while (tmp>0) {",
          "2852:   ND_PRINT((ndo, \"%s (0x%02x)\",",
          "2853:                        tok2str(nlpid_values,",
          "2854:                                \"unknown\",",
          "",
          "[Removed Lines]",
          "2851:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2851:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2864:     case ISIS_TLV_MT_PORT_CAP:",
          "2865:     {",
          "2868:       ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\",",
          "2869:               (EXTRACT_BE_16BITS(tptr) >> 12),",
          "",
          "[Removed Lines]",
          "2866:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2866:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2881:     case ISIS_TLV_MT_CAPABILITY:",
          "2885:       ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\",",
          "2886:                 (EXTRACT_BE_16BITS(tptr) >> 15) & 0x01,",
          "",
          "[Removed Lines]",
          "2883:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2883:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2926:      if (tmp < 1)",
          "2927:          break;",
          "2929:      ND_PRINT((ndo, \", Flags: [%s]\", ISIS_MASK_TLV_SHARED_RISK_GROUP(EXTRACT_8BITS(tptr)) ? \"numbered\" : \"unnumbered\"));",
          "2930:      tptr++;",
          "2931:      tmp--;",
          "",
          "[Removed Lines]",
          "2928:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2928:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2945:      tmp-=sizeof(struct in_addr);",
          "2947:      while (tmp>=4) {",
          "2949:                 ND_PRINT((ndo, \"\\n\\t      Link-ID: 0x%08x\", EXTRACT_BE_32BITS(tptr)));",
          "2950:                 tptr+=4;",
          "2951:                 tmp-=4;",
          "",
          "[Removed Lines]",
          "2948:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2948:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3095:             tmp-=sizeof(struct isis_metric_block);",
          "3097:             while(tmp>0) {",
          "3100:                 tptr++;",
          "3101:                 if (prefix_len < 2) {",
          "",
          "[Removed Lines]",
          "3098:                 ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "3098:                 ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1373:             l2info->proto = EXTRACT_BE_16BITS(p + l2info->cookie_len);",
          "1374:             break;",
          "1375:         }",
          "",
          "[Removed Lines]",
          "1372:             ND_TCHECK_16BITS(p+l2info->cookie_len);",
          "",
          "[Added Lines]",
          "1372:             ND_TCHECK_2(p + l2info->cookie_len);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     goto trunc;",
          "151:    }",
          "154:    ND_PRINT((ndo, \"(refresh: %u)\",",
          "155:     EXTRACT_BE_16BITS(bp + i + 2) << 2));",
          "156:    break;",
          "",
          "[Removed Lines]",
          "153:    ND_TCHECK_16BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "153:    ND_TCHECK_2(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     ND_PRINT((ndo, \"(altcoa: trunc)\"));",
          "160:     goto trunc;",
          "161:    }",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "",
          "[Removed Lines]",
          "162:    ND_TCHECK_128BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "162:    ND_TCHECK_16(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     ND_PRINT((ndo, \"(ni: trunc)\"));",
          "168:     goto trunc;",
          "169:    }",
          "172:    ND_PRINT((ndo, \"(ni: ho=0x%04x co=0x%04x)\",",
          "173:     EXTRACT_BE_16BITS(bp + i + 2),",
          "174:     EXTRACT_BE_16BITS(bp + i + 4)));",
          "",
          "[Removed Lines]",
          "170:    ND_TCHECK_16BITS(&bp[i+2]);",
          "171:    ND_TCHECK_16BITS(&bp[i+4]);",
          "",
          "[Added Lines]",
          "170:    ND_TCHECK_2(&bp[i + 2]);",
          "171:    ND_TCHECK_2(&bp[i + 4]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:  case IP6M_CAREOF_TEST_INIT:",
          "248:   hlen = IP6M_MINLEN;",
          "249:   if (ndo->ndo_vflag) {",
          "251:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "252:           type == IP6M_HOME_TEST_INIT ? \"Home\" : \"Care-of\",",
          "253:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "250:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "250:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   ND_PRINT((ndo, \" nonce id=0x%x\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "262:   hlen = IP6M_MINLEN;",
          "263:   if (ndo->ndo_vflag) {",
          "265:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "266:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "267:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "264:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "264:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:   }",
          "270:   hlen += 8;",
          "271:   if (ndo->ndo_vflag) {",
          "273:    ND_PRINT((ndo, \" %s Keygen Token=%08x:%08x\",",
          "274:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "275:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "272:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "272:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:   ND_TCHECK(mh->ip6m_data16[0]);",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "285:   if (bp[hlen] & 0xf0) {",
          "286:    ND_PRINT((ndo, \" \"));",
          "287:    if (bp[hlen] & 0x80)",
          "",
          "[Removed Lines]",
          "284:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "284:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   hlen += 1;",
          "299:   hlen += 1;",
          "302:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "303:   hlen += 2;",
          "",
          "[Removed Lines]",
          "300:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "300:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:    ND_PRINT((ndo, \" K\"));",
          "312:   hlen = IP6M_MINLEN;",
          "314:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(bp + hlen)));",
          "315:   hlen += 2;",
          "318:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "319:   hlen += 2;",
          "",
          "[Removed Lines]",
          "313:   ND_TCHECK_16BITS(&bp[hlen]);",
          "316:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "313:   ND_TCHECK_2(&bp[hlen]);",
          "316:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:  case OSPF_TYPE_HELLO: {",
          "738:   register const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "741:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "742:             bittok2str(ospf6_option_values, \"none\",",
          "743:             EXTRACT_BE_32BITS(&hellop->hello_options))));",
          "",
          "[Removed Lines]",
          "740:   ND_TCHECK_32BITS(&hellop->hello_options);",
          "",
          "[Added Lines]",
          "740:   ND_TCHECK_4(&hellop->hello_options);",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:      bp += (2 * sizeof(uint16_t));",
          "365:      switch (EXTRACT_BE_16BITS(bp)) {",
          "366:      case AFNUM_INET:",
          "367:   ND_TCHECK2(*bp, sizeof(struct in_addr));",
          "",
          "[Removed Lines]",
          "364:      ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "364:      ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:   if (len < 2)",
          "1024:    goto trunc;",
          "1026:   ND_PRINT((ndo, \" tag=%x\", EXTRACT_BE_16BITS(bp)));",
          "1027:   bp += 2;",
          "1028:   len -= 2;",
          "",
          "[Removed Lines]",
          "1025:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1025:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     if (len < 2)",
          "1081:      goto trunc;",
          "1083:     ND_PRINT((ndo, \",holdtime=\"));",
          "1084:     unsigned_relts_print(ndo,",
          "1085:            EXTRACT_BE_16BITS(bp));",
          "",
          "[Removed Lines]",
          "1082:     ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1082:     ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
          "1131:   if (len < 4)",
          "1132:    goto trunc;",
          "1134:   ND_PRINT((ndo, \" holdtime=\"));",
          "1135:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp + 2));",
          "1136:   bp += 4;",
          "",
          "[Removed Lines]",
          "1133:   ND_TCHECK_16BITS(&bp[2]);",
          "",
          "[Added Lines]",
          "1133:   ND_TCHECK_2(&bp[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:   len -= advance;",
          "1173:   if (len < 2)",
          "1174:    goto trunc;",
          "1176:   ND_PRINT((ndo, \" TUNR \"));",
          "1177:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp));",
          "1178:   break;",
          "",
          "[Removed Lines]",
          "1175:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1175:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:    ND_PRINT((ndo, \" (length bogus, should be >= 6)\"));",
          "614:    return len;",
          "615:   }",
          "617:   ND_PRINT((ndo, \": Vendor: %s (%u)\",",
          "618:    tok2str(oui_values,\"Unknown\",EXTRACT_BE_24BITS(p + 2)),",
          "619:    EXTRACT_BE_24BITS(p + 2)));",
          "",
          "[Removed Lines]",
          "616:   ND_TCHECK_24BITS(p + 2);",
          "",
          "[Added Lines]",
          "616:   ND_TCHECK_3(p + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "633:    return len;",
          "634:   }",
          "636:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "637:   break;",
          "638:  case LCPOPT_ACCM:",
          "",
          "[Removed Lines]",
          "635:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "635:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "641:    return len;",
          "642:   }",
          "644:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "645:   break;",
          "646:  case LCPOPT_AP:",
          "",
          "[Removed Lines]",
          "643:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "643:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "649:    return len;",
          "650:   }",
          "652:   ND_PRINT((ndo, \": %s\", tok2str(ppptype2str, \"Unknown Auth Proto (0x04x)\", EXTRACT_BE_16BITS(p + 2))));",
          "654:   switch (EXTRACT_BE_16BITS(p + 2)) {",
          "",
          "[Removed Lines]",
          "651:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "651:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "670:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "671:    return 0;",
          "672:   }",
          "674:   if (EXTRACT_BE_16BITS(p + 2) == PPP_LQM)",
          "675:    ND_PRINT((ndo, \": LQR\"));",
          "676:   else",
          "",
          "[Removed Lines]",
          "673:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "673:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "681:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "682:    return 0;",
          "683:   }",
          "685:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "686:   break;",
          "687:  case LCPOPT_PFC:",
          "",
          "[Removed Lines]",
          "684:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "684:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "694:    return 0;",
          "695:   }",
          "697:   ND_PRINT((ndo, \": 0x%04x\", EXTRACT_BE_16BITS(p + 2)));",
          "698:   break;",
          "699:  case LCPOPT_CBACK:",
          "",
          "[Removed Lines]",
          "696:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "696:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "713:    return 0;",
          "714:   }",
          "716:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "717:   break;",
          "718:  case LCPOPT_MLED:",
          "",
          "[Removed Lines]",
          "715:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "715:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "817:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "818:         return;",
          "819:     }",
          "821:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "822:         return;",
          "823:     }",
          "",
          "[Removed Lines]",
          "820:     if (!ND_TTEST_16BITS(p)) {",
          "",
          "[Added Lines]",
          "820:     if (!ND_TTEST_2(p)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1072:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "1073:    return 0;",
          "1074:   }",
          "1076:   compproto = EXTRACT_BE_16BITS(p + 2);",
          "1078:   ND_PRINT((ndo, \": %s (0x%02x):\",",
          "",
          "[Removed Lines]",
          "1075:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "1075:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1353:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "1354:    return len;",
          "1355:   }",
          "1357:   ND_PRINT((ndo, \": Magic-Num 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "1358:   break;",
          "1359:  default:",
          "",
          "[Removed Lines]",
          "1356:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "1356:   ND_TCHECK_4(p + 2);",
          "",
          "---------------"
        ],
        "print-rpki-rtr.c||print-rpki-rtr.c": [
          "File: print-rpki-rtr.c -> print-rpki-rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     const u_char *msg;",
          "186:     if (*tptr != 0) {",
          "",
          "[Removed Lines]",
          "185:     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "185:     ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-rx.c||print-rx.c": [
          "File: print-rx.c -> print-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:  struct rx_cache_entry *rxent;",
          "683:  const struct rx_header *rxh = (const struct rx_header *) bp;",
          "686:   return;",
          "688:  rxent = &rx_cache[rx_cache_next];",
          "",
          "[Removed Lines]",
          "685:  if (!ND_TTEST_32BITS(bp + sizeof(struct rx_header)))",
          "",
          "[Added Lines]",
          "685:  if (!ND_TTEST_4(bp + sizeof(struct rx_header)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:   }",
          "773: #define INTOUT() { int32_t _i; \\",
          "775:    _i = EXTRACT_BE_INT32(bp); \\",
          "776:    bp += sizeof(int32_t); \\",
          "777:    ND_PRINT((ndo, \" %d\", _i)); \\",
          "778:   }",
          "780: #define UINTOUT() { uint32_t _i; \\",
          "782:    _i = EXTRACT_BE_32BITS(bp); \\",
          "783:    bp += sizeof(uint32_t); \\",
          "784:    ND_PRINT((ndo, \" %u\", _i)); \\",
          "",
          "[Removed Lines]",
          "774:    ND_TCHECK_32BITS(bp); \\",
          "781:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "774:    ND_TCHECK_4(bp); \\",
          "781:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:   }",
          "794: #define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\",
          "796:    _t = (time_t) EXTRACT_BE_INT32(bp); \\",
          "797:    bp += sizeof(int32_t); \\",
          "798:    tm = localtime(&_t); \\",
          "",
          "[Removed Lines]",
          "795:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "795:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "900:  fs_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "902:  ND_PRINT((ndo, \" fs call %s\", tok2str(fs_req, \"op#%u\", fs_op)));",
          "",
          "[Removed Lines]",
          "899:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "899:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1006:   {",
          "1007:    uint32_t j;",
          "1009:    j = EXTRACT_BE_32BITS(bp);",
          "1010:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1008:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1008:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1082:   {",
          "1083:    char a[AFSOPAQUEMAX+1];",
          "1085:    i = EXTRACT_BE_32BITS(bp);",
          "1086:    bp += sizeof(uint32_t);",
          "1087:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1084:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1084:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1113:   int32_t errcode;",
          "1116:   errcode = EXTRACT_BE_INT32(bp);",
          "1117:   bp += sizeof(int32_t);",
          "",
          "[Removed Lines]",
          "1115:   ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1115:   ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1233:  cb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1235:  ND_PRINT((ndo, \" cb call %s\", tok2str(cb_req, \"op#%u\", cb_op)));",
          "",
          "[Removed Lines]",
          "1232:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1232:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1246:   {",
          "1247:    uint32_t j, t;",
          "1249:    j = EXTRACT_BE_32BITS(bp);",
          "1250:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1248:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1248:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1258:    if (j == 0)",
          "1259:     ND_PRINT((ndo, \" <none!>\"));",
          "1262:    j = EXTRACT_BE_32BITS(bp);",
          "1263:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1261:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1261:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1270:     INTOUT();",
          "1271:     ND_PRINT((ndo, \" expires\"));",
          "1272:     DATEOUT();",
          "1274:     t = EXTRACT_BE_32BITS(bp);",
          "1275:     bp += sizeof(uint32_t);",
          "1276:     tok2str(cb_types, \"type %u\", t);",
          "",
          "[Removed Lines]",
          "1273:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1273:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1364:  pt_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1366:  ND_PRINT((ndo, \" pt\"));",
          "",
          "[Removed Lines]",
          "1363:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1363:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1414:   {",
          "1415:    uint32_t j;",
          "1417:    j = EXTRACT_BE_32BITS(bp);",
          "1418:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1416:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1416:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1435:   {",
          "1436:    uint32_t j;",
          "1437:    ND_PRINT((ndo, \" ids:\"));",
          "1439:    i = EXTRACT_BE_32BITS(bp);",
          "1440:    bp += sizeof(uint32_t);",
          "1441:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1438:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1438:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1525:   {",
          "1526:    uint32_t j;",
          "1527:    ND_PRINT((ndo, \" ids:\"));",
          "1529:    i = EXTRACT_BE_32BITS(bp);",
          "1530:    bp += sizeof(uint32_t);",
          "1531:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1528:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1528:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1538:   {",
          "1539:    uint32_t j;",
          "1541:    j = EXTRACT_BE_32BITS(bp);",
          "1542:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1540:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1540:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1563:   {",
          "1564:    uint32_t j;",
          "1566:    j = EXTRACT_BE_32BITS(bp);",
          "1567:    bp += sizeof(uint32_t);",
          "1568:    for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "1565:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1565:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1618:  vldb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1620:  ND_PRINT((ndo, \" vldb\"));",
          "",
          "[Removed Lines]",
          "1617:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1617:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1645:    ND_PRINT((ndo, \" volid\"));",
          "1646:    INTOUT();",
          "1648:    i = EXTRACT_BE_32BITS(bp);",
          "1649:    bp += sizeof(uint32_t);",
          "1650:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1647:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1647:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1665:    ND_PRINT((ndo, \" volid\"));",
          "1666:    INTOUT();",
          "1668:    i = EXTRACT_BE_32BITS(bp);",
          "1669:    bp += sizeof(uint32_t);",
          "1670:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1667:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1667:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1735:   { uint32_t nservers, j;",
          "1736:    VECOUT(VLNAMEMAX);",
          "1738:    bp += sizeof(uint32_t);",
          "1739:    ND_PRINT((ndo, \" numservers\"));",
          "1741:    nservers = EXTRACT_BE_32BITS(bp);",
          "1742:    bp += sizeof(uint32_t);",
          "1743:    ND_PRINT((ndo, \" %u\", nservers));",
          "1744:    ND_PRINT((ndo, \" servers\"));",
          "1745:    for (i = 0; i < 8; i++) {",
          "1747:     if (i < nservers)",
          "1748:      ND_PRINT((ndo, \" %s\",",
          "1749:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1737:    ND_TCHECK_32BITS(bp);",
          "1740:    ND_TCHECK_32BITS(bp);",
          "1746:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1737:    ND_TCHECK_4(bp);",
          "1740:    ND_TCHECK_4(bp);",
          "1746:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1751:    }",
          "1752:    ND_PRINT((ndo, \" partitions\"));",
          "1753:    for (i = 0; i < 8; i++) {",
          "1755:     j = EXTRACT_BE_32BITS(bp);",
          "1756:     if (i < nservers && j <= 26)",
          "1757:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1754:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1754:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1784:   { uint32_t nservers, j;",
          "1785:    VECOUT(VLNAMEMAX);",
          "1786:    ND_PRINT((ndo, \" numservers\"));",
          "1788:    nservers = EXTRACT_BE_32BITS(bp);",
          "1789:    bp += sizeof(uint32_t);",
          "1790:    ND_PRINT((ndo, \" %u\", nservers));",
          "1791:    ND_PRINT((ndo, \" servers\"));",
          "1792:    for (i = 0; i < 13; i++) {",
          "1794:     if (i < nservers)",
          "1795:      ND_PRINT((ndo, \" %s\",",
          "1796:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1787:    ND_TCHECK_32BITS(bp);",
          "1793:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1787:    ND_TCHECK_4(bp);",
          "1793:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1798:    }",
          "1799:    ND_PRINT((ndo, \" partitions\"));",
          "1800:    for (i = 0; i < 13; i++) {",
          "1802:     j = EXTRACT_BE_32BITS(bp);",
          "1803:     if (i < nservers && j <= 26)",
          "1804:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1801:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1801:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1821:   { uint32_t nservers, j;",
          "1822:    VECOUT(VLNAMEMAX);",
          "1823:    ND_PRINT((ndo, \" numservers\"));",
          "1825:    nservers = EXTRACT_BE_32BITS(bp);",
          "1826:    bp += sizeof(uint32_t);",
          "1827:    ND_PRINT((ndo, \" %u\", nservers));",
          "",
          "[Removed Lines]",
          "1824:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1824:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1839:    bp += 4 * 13;",
          "1840:    ND_PRINT((ndo, \" partitions\"));",
          "1841:    for (i = 0; i < 13; i++) {",
          "1843:     j = EXTRACT_BE_32BITS(bp);",
          "1844:     if (i < nservers && j <= 26)",
          "1845:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1842:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1842:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1896:  kauth_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1898:  ND_PRINT((ndo, \" kauth\"));",
          "",
          "[Removed Lines]",
          "1895:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1895:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1934:    INTOUT();",
          "1935:    ND_PRINT((ndo, \" domain\"));",
          "1936:    STROUT(KANAMEMAX);",
          "1938:    i = EXTRACT_BE_32BITS(bp);",
          "1939:    bp += sizeof(uint32_t);",
          "1940:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1937:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1937:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2039:  vol_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2041:  ND_PRINT((ndo, \" vol call %s\", tok2str(vol_req, \"op#%u\", vol_op)));",
          "",
          "[Removed Lines]",
          "2038:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2038:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2187:    DATEOUT();",
          "2188:    {",
          "2189:     uint32_t i, j;",
          "2191:     j = EXTRACT_BE_32BITS(bp);",
          "2192:     bp += sizeof(uint32_t);",
          "2193:     for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2190:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2190:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2316:     {",
          "2317:      uint32_t i, j;",
          "2319:      j = EXTRACT_BE_32BITS(bp);",
          "2320:      bp += sizeof(uint32_t);",
          "2321:      for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2318:      ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2318:      ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2373:  bos_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2375:  ND_PRINT((ndo, \" bos call %s\", tok2str(bos_req, \"op#%u\", bos_op)));",
          "",
          "[Removed Lines]",
          "2372:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2372:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2532:  switch (ubik_op) {",
          "2535:    temp = EXTRACT_BE_32BITS(bp);",
          "2536:    bp += sizeof(uint32_t);",
          "2537:    ND_PRINT((ndo, \" syncsite %s\", temp ? \"yes\" : \"no\"));",
          "",
          "[Removed Lines]",
          "2534:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2534:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2563:    INTOUT();",
          "2564:    ND_PRINT((ndo, \" length\"));",
          "2565:    INTOUT();",
          "2567:    temp = EXTRACT_BE_32BITS(bp);",
          "2568:    bp += sizeof(uint32_t);",
          "2569:    tok2str(ubik_lock_types, \"type %u\", temp);",
          "",
          "[Removed Lines]",
          "2566:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2566:    ND_TCHECK_4(bp);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:     if (ndo->ndo_vflag < 2)",
          "821:  return;",
          "824:     flags2 = EXTRACT_LE_16BITS(buf + 10);",
          "825:     unicodestr = flags2 & 0x8000;",
          "826:     nterrcodes = flags2 & 0x4000;",
          "",
          "[Removed Lines]",
          "823:     ND_TCHECK_16BITS(&buf[10]);",
          "",
          "[Added Lines]",
          "823:     ND_TCHECK_2(&buf[10]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1167:      p = smb_fdata(ndo, p, \"Name=[n1]\\n#\", maxbuf, 0);",
          "1168:      if (p == NULL)",
          "1169:   goto out;",
          "1171:      restype = EXTRACT_BE_16BITS(p);",
          "1172:      p = smb_fdata(ndo, p, \"ResType=[rw]\\nResClass=[rw]\\nTTL=[rD]\\n\", p + 8, 0);",
          "1173:      if (p == NULL)",
          "1174:   goto out;",
          "1176:      rdlen = EXTRACT_BE_16BITS(p);",
          "1177:      ND_PRINT((ndo, \"ResourceLength=%d\\nResourceData=\\n\", rdlen));",
          "1178:      p += 2;",
          "",
          "[Removed Lines]",
          "1170:      ND_TCHECK_16BITS(p);",
          "1175:      ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "1170:      ND_TCHECK_2(p);",
          "1175:      ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-stp.c||print-stp.c": [
          "File: print-stp.c -> print-stp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:            (float) EXTRACT_BE_16BITS(&stp_bpdu->hello_time) / STP_TIME_BASE,",
          "282:            (float) EXTRACT_BE_16BITS(&stp_bpdu->forward_delay) / STP_TIME_BASE));",
          "285:     ND_PRINT((ndo, \"\\n\\tv3len %d, \", EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET)));",
          "287:     ND_PRINT((ndo, \"MCID Name \"));",
          "288:     if (fn_printzp(ndo, ptr + MST_BPDU_CONFIG_NAME_OFFSET, 32, ndo->ndo_snapend))",
          "289:  goto trunc;",
          "",
          "[Removed Lines]",
          "284:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "[Added Lines]",
          "284:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_4(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 8),",
          "296:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12)));",
          "299:     ND_PRINT((ndo, \"CIST int-root-pathcost %u,\",",
          "300:             EXTRACT_BE_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET)));",
          "",
          "[Removed Lines]",
          "298:     ND_TCHECK_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "[Added Lines]",
          "298:     ND_TCHECK_4(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:     ND_PRINT((ndo, \"CIST remaining-hops %d\", ptr[MST_BPDU_CIST_REMAIN_HOPS_OFFSET]));",
          "311:     v3len = EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "312:     if (v3len > MST_BPDU_CONFIG_INFO_LENGTH) {",
          "313:         len = v3len - MST_BPDU_CONFIG_INFO_LENGTH;",
          "",
          "[Removed Lines]",
          "310:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "310:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:     }",
          "357:     ptr = (const u_char *)stp_bpdu;",
          "360:     ND_PRINT((ndo, \"\\n\\tv4len %d, \", EXTRACT_BE_16BITS(ptr + offset)));",
          "361:     ND_PRINT((ndo, \"AUXMCID Name \"));",
          "",
          "[Removed Lines]",
          "358:     ND_TCHECK_32BITS(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "[Added Lines]",
          "358:     ND_TCHECK_4(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:             }",
          "466:             mstp_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "468:             if (length < (sizeof(struct stp_bpdu_) + mstp_len)) {",
          "",
          "[Removed Lines]",
          "465:             ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "465:             ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:             if (stp_bpdu->protocol_version == STP_PROTO_SPB)",
          "475:             {",
          "478:               spb_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "479:               spb_len += 2;",
          "480:               if (length < (sizeof(struct stp_bpdu_) + mstp_len + spb_len) ||",
          "",
          "[Removed Lines]",
          "477:               ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "[Added Lines]",
          "477:               ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "---------------"
        ],
        "print-tftp.c||print-tftp.c": [
          "File: print-tftp.c -> print-tftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  if (length < 2)",
          "103:   goto trunc;",
          "105:  opcode = EXTRACT_BE_16BITS(bp);",
          "106:  cp = tok2str(op2str, \"tftp-#%d\", opcode);",
          "107:  ND_PRINT((ndo, \" %s\", cp));",
          "",
          "[Removed Lines]",
          "104:  ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "104:  ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  case DATA:",
          "169:   if (length < 2)",
          "172:   ND_PRINT((ndo, \" block %d\", EXTRACT_BE_16BITS(bp)));",
          "173:   break;",
          "",
          "[Removed Lines]",
          "171:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "171:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   if (length < 2)",
          "180:   ND_PRINT((ndo, \" %s\", tok2str(err2str, \"tftp-err-#%d \\\"\",",
          "181:            EXTRACT_BE_16BITS(bp))));",
          "182:   bp += 2;",
          "",
          "[Removed Lines]",
          "179:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "179:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-udp.c||print-udp.c": [
          "File: print-udp.c -> print-udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  u_int ts;",
          "106:  ts = EXTRACT_BE_16BITS(hdr);",
          "107:  if ((ts & 0xf060) != 0) {",
          "110:   ND_PRINT((ndo, \"udp/vt %u %d / %d\",",
          "111:         (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up)),",
          "112:         ts & 0x3ff, ts >> 10));",
          "",
          "[Removed Lines]",
          "105:  ND_TCHECK_16BITS((const u_int *)hdr);",
          "109:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "105:  ND_TCHECK_2((const u_int *)hdr);",
          "109:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   uint32_t i0, i1;",
          "118:   i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "120:   i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "122:   ND_PRINT((ndo, \"udp/vat %u c%d %u%s\",",
          "123:    (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8),",
          "124:    i0 & 0xffff,",
          "",
          "[Removed Lines]",
          "117:   ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "117:   ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  uint32_t i0, i1;",
          "145:  const char * ptype;",
          "148:  i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "150:  i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "152:  dlen = EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8;",
          "153:  ip += 2;",
          "154:  len >>= 2;",
          "",
          "[Removed Lines]",
          "147:  ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "147:  ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:   i0 & 0xffff,",
          "181:   i1));",
          "182:  if (ndo->ndo_vflag) {",
          "184:   ND_PRINT((ndo, \" %u\", EXTRACT_BE_32BITS(&((const u_int *)hdr)[2])));",
          "185:   if (hasopt) {",
          "186:    u_int i2, optlen;",
          "187:    do {",
          "189:     i2 = EXTRACT_BE_32BITS(ip);",
          "190:     optlen = (i2 >> 16) & 0xff;",
          "191:     if (optlen == 0 || optlen > len) {",
          "",
          "[Removed Lines]",
          "183:   ND_TCHECK_32BITS(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "183:   ND_TCHECK_4(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:   }",
          "199:   if (hasext) {",
          "200:    u_int i2, extlen;",
          "202:    i2 = EXTRACT_BE_32BITS(ip);",
          "203:    extlen = (i2 & 0xffff) + 1;",
          "204:    if (extlen > len) {",
          "",
          "[Removed Lines]",
          "201:    ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "201:    ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:    }",
          "208:    ip += extlen;",
          "209:   }",
          "212:    ND_PRINT((ndo, \" 0x%04x\", EXTRACT_BE_32BITS(ip) >> 16));",
          "213:  }",
          "",
          "[Removed Lines]",
          "210:   ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "210:   ND_TCHECK_4(ip);",
          "",
          "---------------"
        ],
        "print-vtp.c||print-vtp.c": [
          "File: print-vtp.c -> print-vtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:  ND_PRINT((ndo, \", Config Rev %x\", EXTRACT_BE_32BITS(tptr)));",
          "",
          "[Removed Lines]",
          "225:  ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "225:  ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  tptr += 4;",
          "244:  while (tptr < (pptr+length)) {",
          "247:      len = *tptr;",
          "248:      if (len == 0)",
          "249:   break;",
          "",
          "[Removed Lines]",
          "246:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "246:      ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9dbcc9615275370677b7ae164417bf2f44f0c41",
      "candidate_info": {
        "commit_hash": "f9dbcc9615275370677b7ae164417bf2f44f0c41",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/f9dbcc9615275370677b7ae164417bf2f44f0c41",
        "files": [
          "print-ppp.c"
        ],
        "message": "More EXTRACT_U_1() and ND_TCHECK_n, clean up signedness, add length checks.\n\nAdd more EXTRACT_U_1() calls.\n\nUse ND_TCHECK_n() where appropriate.\n\nUse unsigned values wherever appropriate.\n\nMake sure the claimed length of a control protocol packet doesn't go\npast the claimed length of the on-the-wire packet.",
        "before_after_code_files": [
          "print-ppp.c||print-ppp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ppp.c||print-ppp.c"
          ],
          "candidate": [
            "print-ppp.c||print-ppp.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402: #define BAP_CSIND 7",
          "403: #define BAP_CSRES 8",
          "413: static void",
          "414: handle_ctrl_proto(netdissect_options *ndo,",
          "416: {",
          "417:  const char *typestr;",
          "418:  u_int code, len;",
          "421:         const u_char *tptr;",
          "423:         tptr=pptr;",
          "",
          "[Removed Lines]",
          "405: static int print_lcp_config_options(netdissect_options *, const u_char *p, int);",
          "406: static int print_ipcp_config_options(netdissect_options *, const u_char *p, int);",
          "407: static int print_ip6cp_config_options(netdissect_options *, const u_char *p, int);",
          "408: static int print_ccp_config_options(netdissect_options *, const u_char *p, int);",
          "409: static int print_bacp_config_options(netdissect_options *, const u_char *p, int);",
          "410: static void handle_ppp(netdissect_options *, u_int proto, const u_char *p, int length);",
          "415:                   u_int proto, const u_char *pptr, int length)",
          "419:  int (*pfunc)(netdissect_options *, const u_char *, int);",
          "420:  int x, j;",
          "",
          "[Added Lines]",
          "405: static u_int print_lcp_config_options(netdissect_options *, const u_char *p, u_int);",
          "406: static u_int print_ipcp_config_options(netdissect_options *, const u_char *p, u_int);",
          "407: static u_int print_ip6cp_config_options(netdissect_options *, const u_char *p, u_int);",
          "408: static u_int print_ccp_config_options(netdissect_options *, const u_char *p, u_int);",
          "409: static u_int print_bacp_config_options(netdissect_options *, const u_char *p, u_int);",
          "410: static void handle_ppp(netdissect_options *, u_int proto, const u_char *p, u_int length);",
          "415:                   u_int proto, const u_char *pptr, u_int length)",
          "419:  u_int (*pfunc)(netdissect_options *, const u_char *, u_int);",
          "420:  u_int x, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:  if (!ndo->ndo_vflag)",
          "443:   return;",
          "449:  len = EXTRACT_BE_U_2(tptr);",
          "450:  tptr += 2;",
          "452:  ND_PRINT((ndo, \"\\n\\tencoded length %u (=Option(s) length %u)\", len, len - 4));",
          "454:  if (ndo->ndo_vflag > 1)",
          "455:   print_unknown_data(ndo, pptr - 2, \"\\n\\t\", 6);",
          "",
          "[Removed Lines]",
          "445:  if (length <= 4)",
          "448:  ND_TCHECK2(*tptr, 2);",
          "",
          "[Added Lines]",
          "445:  ND_TCHECK_2(tptr);",
          "449:  if (len < 4) {",
          "450:   ND_PRINT((ndo, \"\\n\\tencoded length %u (< 4))\", len));",
          "451:   return;",
          "452:  }",
          "454:  if (len > length) {",
          "455:   ND_PRINT((ndo, \"\\n\\tencoded length %u (> packet length %u))\", len, length));",
          "456:   return;",
          "457:  }",
          "458:  length = len;",
          "462:  if (length == 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "459:  case CPCODES_VEXT:",
          "460:   if (length < 11)",
          "461:    break;",
          "463:   ND_PRINT((ndo, \"\\n\\t  Magic-Num 0x%08x\", EXTRACT_BE_U_4(tptr)));",
          "464:   tptr += 4;",
          "466:   ND_PRINT((ndo, \" Vendor: %s (%u)\",",
          "467:                        tok2str(oui_values,\"Unknown\",EXTRACT_BE_U_3(tptr)),",
          "468:                        EXTRACT_BE_U_3(tptr)));",
          "",
          "[Removed Lines]",
          "462:   ND_TCHECK2(*tptr, 4);",
          "465:   ND_TCHECK2(*tptr, 3);",
          "",
          "[Added Lines]",
          "473:   ND_TCHECK_4(tptr);",
          "476:   ND_TCHECK_3(tptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "506:     break;",
          "507:    x -= j;",
          "508:    tptr += j;",
          "510:   break;",
          "512:  case CPCODES_TERM_REQ:",
          "",
          "[Removed Lines]",
          "509:   } while (x > 0);",
          "",
          "[Added Lines]",
          "520:   } while (x != 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "519:  case CPCODES_PROT_REJ:",
          "520:   if (length < 6)",
          "521:    break;",
          "523:   ND_PRINT((ndo, \"\\n\\t  Rejected %s Protocol (0x%04x)\",",
          "524:          tok2str(ppptype2str,\"unknown\", EXTRACT_BE_U_2(tptr)),",
          "525:          EXTRACT_BE_U_2(tptr)));",
          "",
          "[Removed Lines]",
          "522:   ND_TCHECK2(*tptr, 2);",
          "",
          "[Added Lines]",
          "533:   ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "534:  case CPCODES_DISC_REQ:",
          "535:   if (length < 8)",
          "536:    break;",
          "538:   ND_PRINT((ndo, \"\\n\\t  Magic-Num 0x%08x\", EXTRACT_BE_U_4(tptr)));",
          "540:   if (len > 8) {",
          "",
          "[Removed Lines]",
          "537:   ND_TCHECK2(*tptr, 4);",
          "",
          "[Added Lines]",
          "548:   ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "546:  case CPCODES_ID:",
          "547:   if (length < 8)",
          "548:    break;",
          "550:   ND_PRINT((ndo, \"\\n\\t  Magic-Num 0x%08x\", EXTRACT_BE_U_4(tptr)));",
          "552:   if (len > 8) {",
          "",
          "[Removed Lines]",
          "549:   ND_TCHECK2(*tptr, 4);",
          "",
          "[Added Lines]",
          "560:   ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "558:  case CPCODES_TIME_REM:",
          "559:   if (length < 12)",
          "560:    break;",
          "562:   ND_PRINT((ndo, \"\\n\\t  Magic-Num 0x%08x\", EXTRACT_BE_U_4(tptr)));",
          "564:   ND_PRINT((ndo, \", Seconds-Remaining %us\", EXTRACT_BE_U_4(tptr + 4)));",
          "566:   break;",
          "",
          "[Removed Lines]",
          "561:   ND_TCHECK2(*tptr, 4);",
          "563:   ND_TCHECK2(*(tptr + 4), 4);",
          "",
          "[Added Lines]",
          "572:   ND_TCHECK_4(tptr);",
          "574:   ND_TCHECK_4(tptr + 4);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "579: }",
          "583: print_lcp_config_options(netdissect_options *ndo,",
          "585: {",
          "588:  if (length < 2)",
          "589:   return 0;",
          "590:  ND_TCHECK2(*p, 2);",
          "593:  if (length < len)",
          "594:   return 0;",
          "595:  if (len < 2) {",
          "",
          "[Removed Lines]",
          "582: static int",
          "584:                          const u_char *p, int length)",
          "586:  int len, opt;",
          "591:  len = p[1];",
          "592:  opt = p[0];",
          "",
          "[Added Lines]",
          "593: static u_int",
          "595:                          const u_char *p, u_int length)",
          "597:  u_int opt, len;",
          "602:  opt = EXTRACT_U_1(p);",
          "603:  len = EXTRACT_U_1(p + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "618:    tok2str(oui_values,\"Unknown\",EXTRACT_BE_U_3(p + 2)),",
          "619:    EXTRACT_BE_U_3(p + 2)));",
          "620: #if 0",
          "623:   ND_PRINT((ndo, \", Value: 0x\"));",
          "624:   for (i = 0; i < len - 6; i++) {",
          "627:   }",
          "628: #endif",
          "629:   break;",
          "",
          "[Removed Lines]",
          "621:   ND_TCHECK(p[5]);",
          "622:   ND_PRINT((ndo, \", kind: 0x%02x\", p[5]));",
          "625:    ND_TCHECK(p[6 + i]);",
          "626:    ND_PRINT((ndo, \"%02x\", p[6 + i]));",
          "",
          "[Added Lines]",
          "632:   ND_TCHECK_1(p + 5);",
          "633:   ND_PRINT((ndo, \", kind: 0x%02x\", EXTRACT_U_1(p + 5)));",
          "636:    ND_TCHECK_1(p + 6 + i);",
          "637:    ND_PRINT((ndo, \"%02x\", EXTRACT_U_1(p + 6 + i)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "654:   switch (EXTRACT_BE_U_2(p + 2)) {",
          "655:   case PPP_CHAP:",
          "657:    ND_PRINT((ndo, \", %s\", tok2str(authalg_values, \"Unknown Auth Alg %u\", EXTRACT_U_1(p + 4))));",
          "658:    break;",
          "",
          "[Removed Lines]",
          "656:    ND_TCHECK(p[4]);",
          "",
          "[Added Lines]",
          "667:    ND_TCHECK_1(p + 4);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "702:    return 0;",
          "703:   }",
          "704:   ND_PRINT((ndo, \": \"));",
          "706:   ND_PRINT((ndo, \": Callback Operation %s (%u)\",",
          "707:                        tok2str(ppp_callback_values, \"Unknown\", EXTRACT_U_1(p + 2)),",
          "709:   break;",
          "710:  case LCPOPT_MLMRRU:",
          "711:   if (len != 4) {",
          "",
          "[Removed Lines]",
          "705:   ND_TCHECK(p[2]);",
          "708:                        p[2]));",
          "",
          "[Added Lines]",
          "716:   ND_TCHECK_1(p + 2);",
          "719:                        EXTRACT_U_1(p + 2)));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "720:    ND_PRINT((ndo, \" (length bogus, should be >= 3)\"));",
          "721:    return 0;",
          "722:   }",
          "725:   case MEDCLASS_NULL:",
          "726:    ND_PRINT((ndo, \": Null\"));",
          "727:    break;",
          "",
          "[Removed Lines]",
          "723:   ND_TCHECK(p[2]);",
          "",
          "[Added Lines]",
          "734:   ND_TCHECK_1(p + 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "752:    break;",
          "753:   default:",
          "755:    break;",
          "756:   }",
          "757:   break;",
          "",
          "[Removed Lines]",
          "754:    ND_PRINT((ndo, \": Unknown class %u\", p[2]));",
          "",
          "[Added Lines]",
          "765:    ND_PRINT((ndo, \": Unknown class %u\", EXTRACT_U_1(p + 2)));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "787:   if (ndo->ndo_vflag < 2)",
          "789:   break;",
          "790:  }",
          "792:  if (ndo->ndo_vflag > 1)",
          "795:  return len;",
          "",
          "[Removed Lines]",
          "788:    print_unknown_data(ndo, &p[2], \"\\n\\t    \", len - 2);",
          "",
          "[Added Lines]",
          "799:    print_unknown_data(ndo, p + 2, \"\\n\\t    \", len - 2);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "809: static void",
          "810: handle_mlppp(netdissect_options *ndo,",
          "812: {",
          "813:     if (!ndo->ndo_eflag)",
          "814:         ND_PRINT((ndo, \"MLPPP, \"));",
          "",
          "[Removed Lines]",
          "811:              const u_char *p, int length)",
          "",
          "[Added Lines]",
          "822:              const u_char *p, u_int length)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "832: static void",
          "833: handle_chap(netdissect_options *ndo,",
          "835: {",
          "836:  u_int code, len;",
          "838:  const u_char *p0;",
          "841:  p0 = p;",
          "842:  if (length < 1) {",
          "843:   ND_PRINT((ndo, \"[|chap]\"));",
          "844:   return;",
          "845:  } else if (length < 4) {",
          "848:   return;",
          "849:  }",
          "853:  ND_PRINT((ndo, \"CHAP, %s (0x%02x)\",",
          "854:                tok2str(chapcode_values,\"unknown\",code),",
          "855:                code));",
          "856:  p++;",
          "860:  p++;",
          "863:  len = EXTRACT_BE_U_2(p);",
          "864:  p += 2;",
          "",
          "[Removed Lines]",
          "834:             const u_char *p, int length)",
          "837:  int val_size, name_size, msg_size;",
          "839:  int i;",
          "846:   ND_TCHECK(*p);",
          "847:   ND_PRINT((ndo, \"[|chap 0x%02x]\", *p));",
          "851:  ND_TCHECK(*p);",
          "852:  code = *p;",
          "858:  ND_TCHECK(*p);",
          "862:  ND_TCHECK2(*p, 2);",
          "",
          "[Added Lines]",
          "845:             const u_char *p, u_int length)",
          "848:  u_int val_size, name_size, msg_size;",
          "850:  u_int i;",
          "857:   ND_TCHECK_1(p);",
          "858:   ND_PRINT((ndo, \"[|chap 0x%02x]\", EXTRACT_U_1(p)));",
          "862:  ND_TCHECK_1(p);",
          "863:  code = EXTRACT_U_1(p);",
          "869:  ND_TCHECK_1(p);",
          "873:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "875:  case CHAP_RESP:",
          "876:   if (length - (p - p0) < 1)",
          "877:    return;",
          "880:   p++;",
          "881:   if (length - (p - p0) < val_size)",
          "882:    return;",
          "883:   ND_PRINT((ndo, \", Value \"));",
          "884:   for (i = 0; i < val_size; i++) {",
          "886:    ND_PRINT((ndo, \"%02x\", EXTRACT_U_1(p)));",
          "887:    p++;",
          "888:   }",
          "889:   name_size = len - (p - p0);",
          "890:   ND_PRINT((ndo, \", Name \"));",
          "891:   for (i = 0; i < name_size; i++) {",
          "893:    safeputchar(ndo, EXTRACT_U_1(p));",
          "894:    p++;",
          "895:   }",
          "",
          "[Removed Lines]",
          "878:   ND_TCHECK(*p);",
          "885:    ND_TCHECK(*p);",
          "892:    ND_TCHECK(*p);",
          "",
          "[Added Lines]",
          "889:   ND_TCHECK_1(p);",
          "896:    ND_TCHECK_1(p);",
          "903:    ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "899:   msg_size = len - (p - p0);",
          "900:   ND_PRINT((ndo, \", Msg \"));",
          "901:   for (i = 0; i< msg_size; i++) {",
          "903:    safeputchar(ndo, EXTRACT_U_1(p));",
          "904:    p++;",
          "905:   }",
          "",
          "[Removed Lines]",
          "902:    ND_TCHECK(*p);",
          "",
          "[Added Lines]",
          "913:    ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "915: static void",
          "916: handle_pap(netdissect_options *ndo,",
          "918: {",
          "919:  u_int code, len;",
          "921:  const u_char *p0;",
          "924:  p0 = p;",
          "925:  if (length < 1) {",
          "926:   ND_PRINT((ndo, \"[|pap]\"));",
          "927:   return;",
          "928:  } else if (length < 4) {",
          "931:   return;",
          "932:  }",
          "936:  ND_PRINT((ndo, \"PAP, %s (0x%02x)\",",
          "937:            tok2str(papcode_values, \"unknown\", code),",
          "938:            code));",
          "939:  p++;",
          "943:  p++;",
          "946:  len = EXTRACT_BE_U_2(p);",
          "947:  p += 2;",
          "950:   ND_PRINT((ndo, \", length %u > packet size\", len));",
          "951:   return;",
          "952:  }",
          "",
          "[Removed Lines]",
          "917:            const u_char *p, int length)",
          "920:  int peerid_len, passwd_len, msg_len;",
          "922:  int i;",
          "929:   ND_TCHECK(*p);",
          "930:   ND_PRINT((ndo, \"[|pap 0x%02x]\", *p));",
          "934:  ND_TCHECK(*p);",
          "935:  code = *p;",
          "941:  ND_TCHECK(*p);",
          "945:  ND_TCHECK2(*p, 2);",
          "949:  if ((int)len > length) {",
          "",
          "[Added Lines]",
          "928:            const u_char *p, u_int length)",
          "931:  u_int peerid_len, passwd_len, msg_len;",
          "933:  u_int i;",
          "940:   ND_TCHECK_1(p);",
          "941:   ND_PRINT((ndo, \"[|pap 0x%02x]\", EXTRACT_U_1(p)));",
          "945:  ND_TCHECK_1(p);",
          "946:  code = EXTRACT_U_1(p);",
          "952:  ND_TCHECK_1(p);",
          "956:  ND_TCHECK_2(p);",
          "960:  if (len > length) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "963:    goto trunc;",
          "964:   if (length - (p - p0) < 1)",
          "965:    return;",
          "968:   p++;",
          "969:   if (length - (p - p0) < peerid_len)",
          "970:    return;",
          "971:   ND_PRINT((ndo, \", Peer \"));",
          "972:   for (i = 0; i < peerid_len; i++) {",
          "974:    safeputchar(ndo, EXTRACT_U_1(p));",
          "975:    p++;",
          "976:   }",
          "978:   if (length - (p - p0) < 1)",
          "979:    return;",
          "982:   p++;",
          "983:   if (length - (p - p0) < passwd_len)",
          "984:    return;",
          "985:   ND_PRINT((ndo, \", Name \"));",
          "986:   for (i = 0; i < passwd_len; i++) {",
          "988:    safeputchar(ndo, EXTRACT_U_1(p));",
          "989:    p++;",
          "990:   }",
          "",
          "[Removed Lines]",
          "966:   ND_TCHECK(*p);",
          "973:    ND_TCHECK(*p);",
          "980:   ND_TCHECK(*p);",
          "987:    ND_TCHECK(*p);",
          "",
          "[Added Lines]",
          "977:   ND_TCHECK_1(p);",
          "984:    ND_TCHECK_1(p);",
          "991:   ND_TCHECK_1(p);",
          "998:    ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1000:    goto trunc;",
          "1001:   if (length - (p - p0) < 1)",
          "1002:    return;",
          "1005:   p++;",
          "1006:   if (length - (p - p0) < msg_len)",
          "1007:    return;",
          "1008:   ND_PRINT((ndo, \", Msg \"));",
          "1009:   for (i = 0; i< msg_len; i++) {",
          "1011:    safeputchar(ndo, EXTRACT_U_1(p));",
          "1012:    p++;",
          "1013:   }",
          "",
          "[Removed Lines]",
          "1003:   ND_TCHECK(*p);",
          "1010:    ND_TCHECK(*p);",
          "",
          "[Added Lines]",
          "1014:   ND_TCHECK_1(p);",
          "1021:    ND_TCHECK_1(p);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1023: static void",
          "1024: handle_bap(netdissect_options *ndo _U_,",
          "1026: {",
          "1028: }",
          "1033: print_ipcp_config_options(netdissect_options *ndo,",
          "1035: {",
          "1037:         u_int compproto, ipcomp_subopttotallen, ipcomp_subopt, ipcomp_suboptlen;",
          "1039:  if (length < 2)",
          "1040:   return 0;",
          "1041:  ND_TCHECK2(*p, 2);",
          "1044:  if (length < len)",
          "1045:   return 0;",
          "1046:  if (len < 2) {",
          "",
          "[Removed Lines]",
          "1025:            const u_char *p _U_, int length _U_)",
          "1032: static int",
          "1034:                           const u_char *p, int length)",
          "1036:  int len, opt;",
          "1042:  len = p[1];",
          "1043:  opt = p[0];",
          "",
          "[Added Lines]",
          "1036:            const u_char *p _U_, u_int length _U_)",
          "1043: static u_int",
          "1045:                           const u_char *p, u_int length)",
          "1047:  u_int opt, len;",
          "1053:  opt = EXTRACT_U_1(p);",
          "1054:  len = EXTRACT_U_1(p + 1);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1109:                                 while (ipcomp_subopttotallen >= 2) {",
          "1110:                                         ND_TCHECK2(*p, 2);",
          "1112:                                         ipcomp_suboptlen = EXTRACT_U_1(p + 1);",
          "",
          "[Removed Lines]",
          "1111:                                         ipcomp_subopt = *p;",
          "",
          "[Added Lines]",
          "1122:                                         ipcomp_subopt = EXTRACT_U_1(p);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1155:   if (ndo->ndo_vflag < 2)",
          "1157:   break;",
          "1158:  }",
          "1159:  if (ndo->ndo_vflag > 1)",
          "1161:  return len;",
          "1163: trunc:",
          "",
          "[Removed Lines]",
          "1156:    print_unknown_data(ndo, &p[2], \"\\n\\t    \", len - 2);",
          "",
          "[Added Lines]",
          "1167:    print_unknown_data(ndo, p + 2, \"\\n\\t    \", len - 2);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1166: }",
          "1170: print_ip6cp_config_options(netdissect_options *ndo,",
          "1172: {",
          "1175:  if (length < 2)",
          "1176:   return 0;",
          "1177:  ND_TCHECK2(*p, 2);",
          "1180:  if (length < len)",
          "1181:   return 0;",
          "1182:  if (len < 2) {",
          "",
          "[Removed Lines]",
          "1169: static int",
          "1171:                            const u_char *p, int length)",
          "1173:  int len, opt;",
          "1178:  len = p[1];",
          "1179:  opt = p[0];",
          "",
          "[Added Lines]",
          "1180: static u_int",
          "1182:                            const u_char *p, u_int length)",
          "1184:  u_int opt, len;",
          "1189:  opt = EXTRACT_U_1(p);",
          "1190:  len = EXTRACT_U_1(p + 1);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1213:   if (ndo->ndo_vflag < 2)",
          "1215:   break;",
          "1216:  }",
          "1217:  if (ndo->ndo_vflag > 1)",
          "1220:  return len;",
          "",
          "[Removed Lines]",
          "1214:    print_unknown_data(ndo, &p[2], \"\\n\\t    \", len - 2);",
          "",
          "[Added Lines]",
          "1225:    print_unknown_data(ndo, p + 2, \"\\n\\t    \", len - 2);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1230: print_ccp_config_options(netdissect_options *ndo,",
          "1232: {",
          "1235:  if (length < 2)",
          "1236:   return 0;",
          "1237:  ND_TCHECK2(*p, 2);",
          "1240:  if (length < len)",
          "1241:   return 0;",
          "1242:  if (len < 2) {",
          "",
          "[Removed Lines]",
          "1229: static int",
          "1231:                          const u_char *p, int length)",
          "1233:  int len, opt;",
          "1238:  len = p[1];",
          "1239:  opt = p[0];",
          "",
          "[Added Lines]",
          "1240: static u_int",
          "1242:                          const u_char *p, u_int length)",
          "1244:  u_int opt, len;",
          "1249:  opt = EXTRACT_U_1(p);",
          "1250:  len = EXTRACT_U_1(p + 1);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1258:    ND_PRINT((ndo, \" (length bogus, should be >= 3)\"));",
          "1259:    return len;",
          "1260:   }",
          "1262:   ND_PRINT((ndo, \": Version: %u, Dictionary Bits: %u\",",
          "1264:   break;",
          "1265:  case CCPOPT_MVRCA:",
          "1266:   if (len < 4) {",
          "1267:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "1268:    return len;",
          "1269:   }",
          "1271:   ND_PRINT((ndo, \": Features: %u, PxP: %s, History: %u, #CTX-ID: %u\",",
          "1275:   break;",
          "1276:  case CCPOPT_DEFLATE:",
          "1277:   if (len < 4) {",
          "1278:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "1279:    return len;",
          "1280:   }",
          "1282:   ND_PRINT((ndo, \": Window: %uK, Method: %s (0x%x), MBZ: %u, CHK: %u\",",
          "1286:   break;",
          "",
          "[Removed Lines]",
          "1261:   ND_TCHECK(p[2]);",
          "1263:    p[2] >> 5, p[2] & 0x1f));",
          "1270:   ND_TCHECK(p[3]);",
          "1272:     (p[2] & 0xc0) >> 6,",
          "1273:     (p[2] & 0x20) ? \"Enabled\" : \"Disabled\",",
          "1274:     p[2] & 0x1f, p[3]));",
          "1281:   ND_TCHECK(p[3]);",
          "1283:    (p[2] & 0xf0) >> 4,",
          "1284:    ((p[2] & 0x0f) == 8) ? \"zlib\" : \"unknown\",",
          "1285:    p[2] & 0x0f, (p[3] & 0xfc) >> 2, p[3] & 0x03));",
          "",
          "[Added Lines]",
          "1272:   ND_TCHECK_1(p + 2);",
          "1274:    EXTRACT_U_1(p + 2) >> 5,",
          "1275:    EXTRACT_U_1(p + 2) & 0x1f));",
          "1282:   ND_TCHECK_1(p + 3);",
          "1284:     (EXTRACT_U_1(p + 2) & 0xc0) >> 6,",
          "1285:     (EXTRACT_U_1(p + 2) & 0x20) ? \"Enabled\" : \"Disabled\",",
          "1286:     EXTRACT_U_1(p + 2) & 0x1f,",
          "1287:     EXTRACT_U_1(p + 3)));",
          "1294:   ND_TCHECK_1(p + 3);",
          "1296:    (EXTRACT_U_1(p + 2) & 0xf0) >> 4,",
          "1297:    ((EXTRACT_U_1(p + 2) & 0x0f) == 8) ? \"zlib\" : \"unknown\",",
          "1298:    EXTRACT_U_1(p + 2) & 0x0f,",
          "1299:    (EXTRACT_U_1(p + 3) & 0xfc) >> 2,",
          "1300:    EXTRACT_U_1(p + 3) & 0x03));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1309:   if (ndo->ndo_vflag < 2)",
          "1311:   break;",
          "1312:  }",
          "1313:  if (ndo->ndo_vflag > 1)",
          "1316:  return len;",
          "",
          "[Removed Lines]",
          "1310:    print_unknown_data(ndo, &p[2], \"\\n\\t    \", len - 2);",
          "",
          "[Added Lines]",
          "1325:    print_unknown_data(ndo, p + 2, \"\\n\\t    \", len - 2);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1321: }",
          "1325: print_bacp_config_options(netdissect_options *ndo,",
          "1327: {",
          "1330:  if (length < 2)",
          "1331:   return 0;",
          "1332:  ND_TCHECK2(*p, 2);",
          "1335:  if (length < len)",
          "1336:   return 0;",
          "1337:  if (len < 2) {",
          "",
          "[Removed Lines]",
          "1324: static int",
          "1326:                           const u_char *p, int length)",
          "1328:  int len, opt;",
          "1333:  len = p[1];",
          "1334:  opt = p[0];",
          "",
          "[Added Lines]",
          "1339: static u_int",
          "1341:                           const u_char *p, u_int length)",
          "1343:  u_int opt, len;",
          "1348:  opt = EXTRACT_U_1(p);",
          "1349:  len = EXTRACT_U_1(p + 1);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1364:   if (ndo->ndo_vflag < 2)",
          "1366:   break;",
          "1367:  }",
          "1368:  if (ndo->ndo_vflag > 1)",
          "1371:  return len;",
          "",
          "[Removed Lines]",
          "1365:    print_unknown_data(ndo, &p[2], \"\\n\\t    \", len - 2);",
          "",
          "[Added Lines]",
          "1380:    print_unknown_data(ndo, p + 2, \"\\n\\t    \", len - 2);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1378: static void",
          "1379: ppp_hdlc(netdissect_options *ndo,",
          "1381: {",
          "1382:  u_char *b, *t, c;",
          "1383:  const u_char *s;",
          "1385:  const void *se;",
          "1388:                 return;",
          "1390:  b = (u_char *)malloc(length);",
          "",
          "[Removed Lines]",
          "1380:          const u_char *p, int length)",
          "1384:  int i, proto;",
          "1387:         if (length <= 0)",
          "",
          "[Added Lines]",
          "1395:          const u_char *p, u_int length)",
          "1399:  u_int i, proto;",
          "1402:         if (length == 0)",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1400:   c = EXTRACT_U_1(s);",
          "1401:   s++;",
          "1402:   if (c == 0x7d) {",
          "1404:     break;",
          "1405:    i--;",
          "1406:    c = EXTRACT_U_1(s) ^ 0x20;",
          "",
          "[Removed Lines]",
          "1399:  for (s = p, t = b, i = length; i > 0 && ND_TTEST(*s); i--) {",
          "1403:    if (i <= 1 || !ND_TTEST(*s))",
          "",
          "[Added Lines]",
          "1414:  for (s = p, t = b, i = length; i != 0 && ND_TTEST(*s); i--) {",
          "1418:    if (i <= 1 || !ND_TTEST_1(s))",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1461: static void",
          "1462: handle_ppp(netdissect_options *ndo,",
          "1464: {",
          "1466:   ppp_hdlc(ndo, p - 1, length);",
          "",
          "[Removed Lines]",
          "1463:            u_int proto, const u_char *p, int length)",
          "",
          "[Added Lines]",
          "1481:            u_int proto, const u_char *p, u_int length)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1535:  if (length < 2)",
          "1536:   goto trunc;",
          "1538:         ppp_header = EXTRACT_BE_U_2(p);",
          "1540:         switch(ppp_header) {",
          "",
          "[Removed Lines]",
          "1537:  ND_TCHECK2(*p, 2);",
          "",
          "[Added Lines]",
          "1555:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1563:  if (length < 2)",
          "1564:   goto trunc;",
          "1568:   p++;",
          "1569:   length--;",
          "1570:   hdr_len++;",
          "1571:  } else {",
          "1573:   proto = EXTRACT_BE_U_2(p);",
          "1574:   p += 2;",
          "1575:   length -= 2;",
          "",
          "[Removed Lines]",
          "1565:  ND_TCHECK(*p);",
          "1566:  if (*p % 2) {",
          "1572:   ND_TCHECK2(*p, 2);",
          "",
          "[Added Lines]",
          "1583:  ND_TCHECK_1(p);",
          "1584:  if (EXTRACT_U_1(p) % 2) {",
          "1590:   ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1643:  if (ndo->ndo_eflag)",
          "1645: #endif",
          "1647:  ppp_print(ndo, p, length);",
          "",
          "[Removed Lines]",
          "1644:   ND_PRINT((ndo, \"%c %4d %02x \", p[0] ? 'O' : 'I', length, p[1]));",
          "",
          "[Added Lines]",
          "1662:   ND_PRINT((ndo, \"%c %4d %02x \", EXTRACT_U_1(p) ? 'O' : 'I',",
          "1663:       length, EXTRACT_U_1(p + 1)));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1672:   return (caplen);",
          "1673:  }",
          "1677:  case PPP_ADDRESS:",
          "1679:    ND_PRINT((ndo, \"[|ppp]\"));",
          "1680:    return (caplen);",
          "1681:   }",
          "1683:   if (ndo->ndo_eflag)",
          "1685:   p += 2;",
          "1686:   length -= 2;",
          "1687:   hdrlen += 2;",
          "",
          "[Removed Lines]",
          "1675:  switch (p[0]) {",
          "1678:   if (caplen < 4) {",
          "1684:    ND_PRINT((ndo, \"%02x %02x %d \", p[0], p[1], length));",
          "",
          "[Added Lines]",
          "1694:  switch (EXTRACT_U_1(p)) {",
          "1697:   if (caplen < 4 || length < 4) {",
          "1703:    ND_PRINT((ndo, \"%02x %02x %u \", EXTRACT_U_1(p),",
          "1704:        EXTRACT_U_1(p + 1), length));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1706:   }",
          "1708:   if (ndo->ndo_eflag)",
          "1710:   p += 2;",
          "1711:   hdrlen += 2;",
          "",
          "[Removed Lines]",
          "1709:    ND_PRINT((ndo, \"%02x %02x %d \", p[0], p[1], length));",
          "",
          "[Added Lines]",
          "1729:    ND_PRINT((ndo, \"%02x %02x %d \", EXTRACT_U_1(p),",
          "1730:        EXTRACT_U_1(p + 1), length));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1719:   break;",
          "1720:  }",
          "",
          "[Removed Lines]",
          "1718:   ND_PRINT((ndo, \"unknown addr %02x; ctrl %02x\", p[0], p[1]));",
          "",
          "[Added Lines]",
          "1739:   ND_PRINT((ndo, \"unknown addr %02x; ctrl %02x\", EXTRACT_U_1(p),",
          "1740:       EXTRACT_U_1(p + 1)));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1729: ppp_bsdos_if_print(netdissect_options *ndo _U_,",
          "1730:                    const struct pcap_pkthdr *h _U_, register const u_char *p _U_)",
          "1731: {",
          "1733: #ifdef __bsdi__",
          "1734:  register u_int length = h->len;",
          "1735:  register u_int caplen = h->caplen;",
          "1736:  uint16_t ptype;",
          "1737:  const u_char *q;",
          "1740:  if (caplen < PPP_BSDI_HDRLEN) {",
          "1741:   ND_PRINT((ndo, \"[|ppp]\"));",
          "",
          "[Removed Lines]",
          "1732:  register int hdrlength;",
          "1738:  int i;",
          "",
          "[Added Lines]",
          "1754:  register u_int hdrlength;",
          "1759:  uint8_t llhl;",
          "1761:  u_int i;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1745:  hdrlength = 0;",
          "1747: #if 0",
          "1749:   if (ndo->ndo_eflag)",
          "1751:   p += 2;",
          "1752:   hdrlength = 2;",
          "1753:  }",
          "",
          "[Removed Lines]",
          "1748:  if (p[0] == PPP_ADDRESS && p[1] == PPP_CONTROL) {",
          "1750:    ND_PRINT((ndo, \"%02x %02x \", p[0], p[1]));",
          "",
          "[Added Lines]",
          "1771:  if (EXTRACT_U_1(p) == PPP_ADDRESS &&",
          "1772:      EXTRACT_U_1(p + 1) == PPP_CONTROL) {",
          "1774:    ND_PRINT((ndo, \"%02x %02x \", EXTRACT_U_1(p),",
          "1775:        EXTRACT_U_1(p + 1)));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1755:  if (ndo->ndo_eflag)",
          "1756:   ND_PRINT((ndo, \"%d \", length));",
          "1761:   if (ndo->ndo_eflag)",
          "1762:    ND_PRINT((ndo, \"%02x \", ptype));",
          "1763:   p++;",
          "",
          "[Removed Lines]",
          "1758:  if (*p & 01) {",
          "1760:   ptype = *p;",
          "",
          "[Added Lines]",
          "1783:  if (EXTRACT_U_1(p) & 01) {",
          "1785:   ptype = EXTRACT_U_1(p);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1773: #else",
          "1775:  if (ndo->ndo_eflag)",
          "1779:   struct ppp_header *ph;",
          "",
          "[Removed Lines]",
          "1776:   ND_PRINT((ndo, \"%c \", p[SLC_DIR] ? 'O' : 'I'));",
          "1777:  if (p[SLC_LLHL]) {",
          "",
          "[Added Lines]",
          "1801:   ND_PRINT((ndo, \"%c \", EXTRACT_U_1(p + SLC_DIR) ? 'O' : 'I'));",
          "1802:  llhl = EXTRACT_U_1(p + SLC_LLHL);",
          "1803:  if (llhl) {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1783:   if (ph->phdr_addr == PPP_ADDRESS",
          "1784:    && ph->phdr_ctl == PPP_CONTROL) {",
          "1785:    if (ndo->ndo_eflag)",
          "1787:    ptype = EXTRACT_BE_U_2(&ph->phdr_type);",
          "1788:    if (ndo->ndo_eflag && (ptype == PPP_VJC || ptype == PPP_VJNC)) {",
          "1789:     ND_PRINT((ndo, \"%s \", tok2str(ppptype2str,",
          "",
          "[Removed Lines]",
          "1786:     ND_PRINT((ndo, \"%02x %02x \", q[0], q[1]));",
          "",
          "[Added Lines]",
          "1812:     ND_PRINT((ndo, \"%02x %02x \", EXTRACT_U_1(q),",
          "1813:         EXTRACT_U_1(q + 1)));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1792:   } else {",
          "1793:    if (ndo->ndo_eflag) {",
          "1794:     ND_PRINT((ndo, \"LLH=[\"));",
          "1797:     ND_PRINT((ndo, \"] \"));",
          "1798:    }",
          "1799:   }",
          "1800:  }",
          "1801:  if (ndo->ndo_eflag)",
          "1802:   ND_PRINT((ndo, \"%d \", length));",
          "1806:   switch (ptype) {",
          "1807:   case PPP_VJC:",
          "",
          "[Removed Lines]",
          "1795:     for (i = 0; i < p[SLC_LLHL]; i++)",
          "1796:      ND_PRINT((ndo, \"%02x\", q[i]));",
          "1803:  if (p[SLC_CHL]) {",
          "1804:   q = p + SLC_BPFHDRLEN + p[SLC_LLHL];",
          "",
          "[Added Lines]",
          "1822:     for (i = 0; i < llhl; i++)",
          "1823:      ND_PRINT((ndo, \"%02x\", EXTRACT_U_1(q + i)));",
          "1830:  if (EXTRACT_U_1(p + SLC_CHL)) {",
          "1831:   q = p + SLC_BPFHDRLEN + llhl;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1841:   default:",
          "1842:    if (ndo->ndo_eflag) {",
          "1843:     ND_PRINT((ndo, \"CH=[\"));",
          "1846:     ND_PRINT((ndo, \"] \"));",
          "1847:    }",
          "1848:    break;",
          "",
          "[Removed Lines]",
          "1844:     for (i = 0; i < p[SLC_LLHL]; i++)",
          "1845:      ND_PRINT((ndo, \"%02x\", q[i]));",
          "",
          "[Added Lines]",
          "1871:     for (i = 0; i < llhl; i++)",
          "1872:      ND_PRINT((ndo, \"%02x\",",
          "1873:          EXTRACT_U_1(q + i)));",
          "",
          "---------------"
        ]
      }
    }
  ]
}