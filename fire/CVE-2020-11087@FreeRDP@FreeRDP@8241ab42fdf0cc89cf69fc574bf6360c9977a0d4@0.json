{
  "cve_id": "CVE-2020-11087",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_AuthenticateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
  "patch_info": {
    "commit_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_AuthenticateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "682: SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "683: {",
      "684:  wStream* s;",
      "685:  size_t length;",
      "688:  UINT32 PayloadBufferOffset;",
      "689:  NTLM_AUTHENTICATE_MESSAGE* message;",
      "690:  SSPI_CREDENTIALS* credentials = context->credentials;",
      "693:  message = &context->AUTHENTICATE_MESSAGE;",
      "694:  ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));",
      "695:  s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);",
      "",
      "[Removed Lines]",
      "686:  UINT32 flags;",
      "687:  NTLM_AV_PAIR* AvFlags;",
      "691:  flags = 0;",
      "692:  AvFlags = NULL;",
      "",
      "[Added Lines]",
      "684:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "687:  UINT32 flags = 0;",
      "688:  NTLM_AV_PAIR* AvFlags = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "698:   return SEC_E_INTERNAL_ERROR;",
      "700:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "706:  if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)",
      "712:  if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <",
      "719:  if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <",
      "744:  if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <",
      "752:  context->NegotiateKeyExchange =",
      "753:      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;",
      "755:  if ((context->NegotiateKeyExchange && !message->EncryptedRandomSessionKey.Len) ||",
      "756:      (!context->NegotiateKeyExchange && message->EncryptedRandomSessionKey.Len))",
      "762:  if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "763:  {",
      "769:  }",
      "771:  PayloadBufferOffset = Stream_GetPosition(s);",
      "791:  if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <",
      "798:  if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <",
      "805:  if (message->NtChallengeResponse.Len > 0)",
      "806:  {",
      "807:   size_t cbAvFlags;",
      "808:   wStream* snt =",
      "809:       Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);",
      "811:   if (!snt)",
      "824:   Stream_Free(snt, FALSE);",
      "825:   context->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;",
      "826:   context->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;",
      "827:   sspi_SecBufferFree(&(context->ChallengeTargetInfo));",
      "",
      "[Removed Lines]",
      "701:  {",
      "702:   Stream_Free(s, FALSE);",
      "703:   return SEC_E_INVALID_TOKEN;",
      "704:  }",
      "707:  {",
      "708:   Stream_Free(s, FALSE);",
      "709:   return SEC_E_INVALID_TOKEN;",
      "710:  }",
      "714:  {",
      "715:   Stream_Free(s, FALSE);",
      "716:   return SEC_E_INVALID_TOKEN;",
      "717:  }",
      "721:  {",
      "722:   Stream_Free(s, FALSE);",
      "723:   return SEC_E_INVALID_TOKEN;",
      "724:  }",
      "727:  {",
      "728:   Stream_Free(s, FALSE);",
      "729:   return SEC_E_INVALID_TOKEN;",
      "730:  }",
      "733:  {",
      "734:   Stream_Free(s, FALSE);",
      "735:   return SEC_E_INVALID_TOKEN;",
      "736:  }",
      "739:  {",
      "740:   Stream_Free(s, FALSE);",
      "741:   return SEC_E_INVALID_TOKEN;",
      "742:  }",
      "746:  {",
      "747:   Stream_Free(s, FALSE);",
      "748:   return SEC_E_INVALID_TOKEN;",
      "749:  }",
      "757:  {",
      "758:   Stream_Free(s, FALSE);",
      "759:   return SEC_E_INVALID_TOKEN;",
      "760:  }",
      "765:   {",
      "766:    Stream_Free(s, FALSE);",
      "767:    return SEC_E_INVALID_TOKEN;",
      "768:   }",
      "774:  {",
      "775:   Stream_Free(s, FALSE);",
      "776:   return SEC_E_INTERNAL_ERROR;",
      "777:  }",
      "780:  {",
      "781:   Stream_Free(s, FALSE);",
      "782:   return SEC_E_INTERNAL_ERROR;",
      "783:  }",
      "786:  {",
      "787:   Stream_Free(s, FALSE);",
      "788:   return SEC_E_INTERNAL_ERROR;",
      "789:  }",
      "793:  {",
      "794:   Stream_Free(s, FALSE);",
      "795:   return SEC_E_INTERNAL_ERROR;",
      "796:  }",
      "800:  {",
      "801:   Stream_Free(s, FALSE);",
      "802:   return SEC_E_INTERNAL_ERROR;",
      "803:  }",
      "812:   {",
      "813:    Stream_Free(s, FALSE);",
      "814:    return SEC_E_INTERNAL_ERROR;",
      "815:   }",
      "817:   if (ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)) < 0)",
      "818:   {",
      "819:    Stream_Free(s, FALSE);",
      "820:    Stream_Free(snt, FALSE);",
      "821:    return SEC_E_INVALID_TOKEN;",
      "822:   }",
      "",
      "[Added Lines]",
      "701:   goto fail;",
      "704:   goto fail;",
      "708:   goto fail;",
      "712:   goto fail;",
      "715:   goto fail;",
      "718:   goto fail;",
      "721:   goto fail;",
      "725:   goto fail;",
      "727:  if (Stream_GetRemainingLength(s) < 4)",
      "728:   goto fail;",
      "735:   goto fail;",
      "740:    goto fail;",
      "745:  status = SEC_E_INTERNAL_ERROR;",
      "747:   goto fail;",
      "750:   goto fail;",
      "753:   goto fail;",
      "757:   goto fail;",
      "761:   goto fail;",
      "765:   int rc;",
      "771:    goto fail;",
      "773:   status = SEC_E_INVALID_TOKEN;",
      "774:   rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));",
      "776:   if (rc < 0)",
      "777:    goto fail;",
      "778:   status = SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "839:  if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <",
      "846:  if (message->EncryptedRandomSessionKey.Len > 0)",
      "847:  {",
      "848:   if (message->EncryptedRandomSessionKey.Len != 16)",
      "854:   CopyMemory(context->EncryptedRandomSessionKey, message->EncryptedRandomSessionKey.Buffer,",
      "855:              16);",
      "",
      "[Removed Lines]",
      "841:  {",
      "842:   Stream_Free(s, FALSE);",
      "843:   return SEC_E_INTERNAL_ERROR;",
      "844:  }",
      "849:   {",
      "850:    Stream_Free(s, FALSE);",
      "851:    return SEC_E_INVALID_TOKEN;",
      "852:   }",
      "",
      "[Added Lines]",
      "796:   goto fail;",
      "801:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "858:  length = Stream_GetPosition(s);",
      "860:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
      "866:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
      "867:  buffer->cbBuffer = length;",
      "",
      "[Removed Lines]",
      "861:  {",
      "862:   Stream_Free(s, FALSE);",
      "863:   return SEC_E_INTERNAL_ERROR;",
      "864:  }",
      "",
      "[Added Lines]",
      "810:   goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "871:  {",
      "872:   context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);",
      "874:   if (Stream_GetRemainingLength(s) < 16)",
      "880:   Stream_Read(s, message->MessageIntegrityCheck, 16);",
      "881:  }",
      "883: #ifdef WITH_DEBUG_NTLM",
      "884:  WLog_DBG(TAG, \"AUTHENTICATE_MESSAGE (length = %\" PRIu32 \")\",",
      "885:           context->AuthenticateMessage.cbBuffer);",
      "",
      "[Removed Lines]",
      "875:   {",
      "876:    Stream_Free(s, FALSE);",
      "877:    return SEC_E_INVALID_TOKEN;",
      "878:   }",
      "",
      "[Added Lines]",
      "820:   status = SEC_E_INVALID_TOKEN;",
      "822:    goto fail;",
      "827:  status = SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:   credentials->identity.User = (UINT16*)malloc(message->UserName.Len);",
      "913:   if (!credentials->identity.User)",
      "919:   CopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);",
      "920:   credentials->identity.UserLength = message->UserName.Len / 2;",
      "",
      "[Removed Lines]",
      "914:   {",
      "915:    Stream_Free(s, FALSE);",
      "916:    return SEC_E_INTERNAL_ERROR;",
      "917:   }",
      "",
      "[Added Lines]",
      "860:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "925:   credentials->identity.Domain = (UINT16*)malloc(message->DomainName.Len);",
      "927:   if (!credentials->identity.Domain)",
      "933:   CopyMemory(credentials->identity.Domain, message->DomainName.Buffer,",
      "934:              message->DomainName.Len);",
      "",
      "[Removed Lines]",
      "928:   {",
      "929:    Stream_Free(s, FALSE);",
      "930:    return SEC_E_INTERNAL_ERROR;",
      "931:   }",
      "",
      "[Added Lines]",
      "871:    goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "940:  context->state = NTLM_STATE_COMPLETION;",
      "941:  return SEC_I_COMPLETE_NEEDED;",
      "942: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "883: fail:",
      "884:  Stream_Free(s, FALSE);",
      "885:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "daf4e1132477a4dab8ce9797422406c090a3b103",
      "candidate_info": {
        "commit_hash": "daf4e1132477a4dab8ce9797422406c090a3b103",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/daf4e1132477a4dab8ce9797422406c090a3b103",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Silence valgrind in rdp_read_header\n\nIf a disconnect message is received, we returned success but did\nnot initialize the return arguments.",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c"
        ]
      }
    },
    {
      "candidate_hash": "feb7d4f362b4c65af783cf09cd0d578d5485f245",
      "candidate_info": {
        "commit_hash": "feb7d4f362b4c65af783cf09cd0d578d5485f245",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/feb7d4f362b4c65af783cf09cd0d578d5485f245",
        "files": [
          "channels/smartcard/client/smartcard_operations.c"
        ],
        "message": "Changed smartcard no reader log message level to info",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c": [
          "File: channels/smartcard/client/smartcard_operations.c -> channels/smartcard/client/smartcard_operations.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:    case SCARD_E_TIMEOUT:",
          "50:     level = WLOG_DEBUG;",
          "51:     break;",
          "52:    default:",
          "53:     break;",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:    case SCARD_E_NO_READERS_AVAILABLE:",
          "53:     level = WLOG_INFO;",
          "54:     break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
      "candidate_info": {
        "commit_hash": "b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
        "files": [
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fixed oob read in cliprdr_read_format_list",
        "before_after_code_files": [
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  int formatNameLength;",
          "401:  char* szFormatName;",
          "402:  WCHAR* wszFormatName;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "405:  UINT error = CHANNEL_RC_OK;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "409:  index = 0;",
          "410:  formatList->numFormats = 0;",
          "413:  if (!formatList->dataLen)",
          "414:  {",
          "418:  }",
          "419:  else if (!useLongFormatNames)",
          "420:  {",
          "424:   {",
          "426:    return ERROR_INTERNAL_ERROR;",
          "427:   }",
          "",
          "[Removed Lines]",
          "403:  UINT32 dataLen = formatList->dataLen;",
          "411:  position = Stream_GetPosition(s);",
          "416:   formatList->formats = NULL;",
          "417:   formatList->numFormats = 0;",
          "421:   formatList->numFormats = (dataLen / 36);",
          "423:   if ((formatList->numFormats * 36) != dataLen)",
          "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
          "",
          "[Added Lines]",
          "403:  wStream sub1, sub2;",
          "411:  formatList->formats = NULL;",
          "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
          "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
          "416:   return ERROR_INVALID_DATA;",
          "423:   const size_t cap = Stream_Capacity(&sub1);",
          "424:   formatList->numFormats = (cap / 36);",
          "426:   if ((formatList->numFormats * 36) != cap)",
          "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:   formatList->formats = formats;",
          "441:   {",
          "445:    formats[index].formatName = NULL;",
          "",
          "[Removed Lines]",
          "440:   while (dataLen)",
          "443:    dataLen -= 4;",
          "",
          "[Added Lines]",
          "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:    if (asciiNames)",
          "456:    {",
          "459:     if (szFormatName[0])",
          "460:     {",
          "",
          "[Removed Lines]",
          "457:     szFormatName = (char*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
          "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "459:    if (!Stream_SafeSeek(&sub1, 32))",
          "460:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:    }",
          "473:    else",
          "474:    {",
          "477:     if (wszFormatName[0])",
          "478:     {",
          "",
          "[Removed Lines]",
          "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "489:     }",
          "490:    }",
          "494:    index++;",
          "495:   }",
          "496:  }",
          "497:  else",
          "498:  {",
          "500:   {",
          "514:    formatList->numFormats++;",
          "515:   }",
          "520:   if (formatList->numFormats)",
          "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
          "",
          "[Removed Lines]",
          "492:    Stream_Seek(s, 32);",
          "493:    dataLen -= 32;",
          "499:   while (dataLen)",
          "502:    dataLen -= 4;",
          "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "506:    if (!wszFormatName[0])",
          "507:     formatNameLength = 0;",
          "508:    else",
          "509:     formatNameLength = _wcslen(wszFormatName);",
          "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "512:    dataLen -= ((formatNameLength + 1) * 2);",
          "517:   dataLen = formatList->dataLen;",
          "518:   Stream_SetPosition(s, position);",
          "",
          "[Added Lines]",
          "499:   sub2 = sub1;",
          "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
          "502:    size_t rest;",
          "504:     goto error_out;",
          "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "507:    rest = Stream_GetRemainingLength(&sub1);",
          "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
          "511:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   formatList->formats = formats;",
          "532:   {",
          "536:    formats[index].formatName = NULL;",
          "545:    if (formatNameLength)",
          "546:    {",
          "549:     {",
          "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
          "551:      error = ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "531:   while (dataLen)",
          "534:    dataLen -= 4;",
          "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "540:    if (!wszFormatName[0])",
          "541:     formatNameLength = 0;",
          "542:    else",
          "543:     formatNameLength = _wcslen(wszFormatName);",
          "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
          "548:                            0, NULL, NULL) < 1)",
          "",
          "[Added Lines]",
          "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
          "528:    size_t rest;",
          "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
          "534:    rest = Stream_GetRemainingLength(&sub2);",
          "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
          "537:     goto error_out;",
          "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
          "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "553:     }",
          "554:    }",
          "559:    index++;",
          "560:   }",
          "561:  }",
          "",
          "[Removed Lines]",
          "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "557:    dataLen -= ((formatNameLength + 1) * 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582:   }",
          "584:   free(formatList->formats);",
          "585:  }",
          "586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:   formatList->formats = NULL;",
          "577:   formatList->numFormats = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "917daa8b560903690cf73b1da6cefe9604e75816",
      "candidate_info": {
        "commit_hash": "917daa8b560903690cf73b1da6cefe9604e75816",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/917daa8b560903690cf73b1da6cefe9604e75816",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_write",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  UINT32 Length;",
          "202:  UINT64 Offset;",
          "203:  ssize_t status;",
          "204:  Stream_Read_UINT32(irp->input, Length);",
          "205:  Stream_Read_UINT64(irp->input, Offset);",
          "207:  len = Length;",
          "209:  while (len > 0)",
          "210:  {",
          "213:   if (status < 0)",
          "214:   {",
          "",
          "[Removed Lines]",
          "211:   status = write(parallel->file, Stream_Pointer(irp->input), len);",
          "",
          "[Added Lines]",
          "204:  void* ptr;",
          "205:  if (Stream_GetRemainingLength(irp->input) > 12)",
          "206:   return ERROR_INVALID_DATA;",
          "211:   return ERROR_INVALID_DATA;",
          "212:  ptr = Stream_Pointer(irp->input);",
          "213:  if (!Stream_SafeSeek(irp->input, Length))",
          "214:   return ERROR_INVALID_DATA;",
          "219:   status = write(parallel->file, ptr, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "873ed92a8461b363ccf7e1e1d1e9cc4c75f3a63d",
      "candidate_info": {
        "commit_hash": "873ed92a8461b363ccf7e1e1d1e9cc4c75f3a63d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/873ed92a8461b363ccf7e1e1d1e9cc4c75f3a63d",
        "files": [
          "libfreerdp/core/server.c"
        ],
        "message": "Remove unnecessary cast.",
        "before_after_code_files": [
          "libfreerdp/core/server.c||libfreerdp/core/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/server.c||libfreerdp/core/server.c": [
          "File: libfreerdp/core/server.c -> libfreerdp/core/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:  Stream_SetPosition(channel->receiveData, 0);",
          "199:   return FALSE;",
          "201:  Stream_Write(channel->receiveData, Stream_Pointer(s), length);",
          "",
          "[Removed Lines]",
          "198:  if (!Stream_EnsureRemainingCapacity(channel->receiveData, (int)channel->dvc_total_length))",
          "",
          "[Added Lines]",
          "198:  if (!Stream_EnsureRemainingCapacity(channel->receiveData, channel->dvc_total_length))",
          "",
          "---------------"
        ]
      }
    }
  ]
}