{
  "cve_id": "CVE-2023-45897",
  "cve_desc": "exfatprogs before 1.2.2 allows out-of-bounds memory access, such as in read_file_dentry_set.",
  "repo": "exfatprogs/exfatprogs",
  "patch_hash": "22d0e43e8d24119cbfc6efafabb0dec6517a86c4",
  "patch_info": {
    "commit_hash": "22d0e43e8d24119cbfc6efafabb0dec6517a86c4",
    "repo": "exfatprogs/exfatprogs",
    "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/22d0e43e8d24119cbfc6efafabb0dec6517a86c4",
    "files": [
      "fsck/fsck.c"
    ],
    "message": "fsck: fix out-of-bounds memory access\n\nThe size of utf16_name is ENTRY_NAME_MAX, we should pass\nENTRY_NAME_MAX to exfat_utf16_len(), not ENTRY_NAME_MAX*2.\n\nexfat_utf16_enc() returns the length of the utf16-encoded\nfilename, it is not needed to call exfat_utf16_len().\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
    "before_after_code_files": [
      "fsck/fsck.c||fsck/fsck.c"
    ]
  },
  "patch_diff": {
    "fsck/fsck.c||fsck/fsck.c": [
      "File: fsck/fsck.c -> fsck/fsck.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "811:   char *rename = NULL;",
      "812:   __u16 hash;",
      "813:   struct exfat_dentry *stream_de;",
      "816:   switch (num) {",
      "817:   case 1:",
      "",
      "[Removed Lines]",
      "814:   int name_len, ret;",
      "",
      "[Added Lines]",
      "814:   int ret;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "840:   if (ret < 0)",
      "841:    return ret;",
      "843:   memcpy(dentry->name_unicode, utf16_name, ENTRY_NAME_MAX * 2);",
      "846:   exfat_de_iter_get_dirty(iter, 1, &stream_de);",
      "848:   stream_de->stream_name_hash = cpu_to_le16(hash);",
      "849:  }",
      "",
      "[Removed Lines]",
      "844:   name_len = exfat_utf16_len(utf16_name, ENTRY_NAME_MAX * 2);",
      "845:   hash = exfat_calc_name_hash(iter->exfat, utf16_name, (int)name_len);",
      "847:   stream_de->stream_name_len = (__u8)name_len;",
      "",
      "[Added Lines]",
      "843:   ret >>= 1;",
      "845:   hash = exfat_calc_name_hash(iter->exfat, utf16_name, ret);",
      "847:   stream_de->stream_name_len = (__u8)ret;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4ef8e10acc16a1c29639f5a0d096fb9e6e5929c7",
      "candidate_info": {
        "commit_hash": "4ef8e10acc16a1c29639f5a0d096fb9e6e5929c7",
        "repo": "exfatprogs/exfatprogs",
        "commit_url": "https://github.com/exfatprogs/exfatprogs/commit/4ef8e10acc16a1c29639f5a0d096fb9e6e5929c7",
        "files": [
          "fsck/fsck.c",
          "fsck/repair.c",
          "fsck/repair.h",
          "include/exfat_dir.h",
          "lib/exfat_dir.c"
        ],
        "message": "fsck: add exfat_repair_rename_ask() to make code reusable\n\nThe renaming strategy is provided in handle_dot_dotdot_filename(),\nwhich can be re-used in other repairs that need to be renamed.\n\nSo this commit moves the strategy into exfat_repair_rename_ask()\nand rename \"dot_name_num\" to \"invalid_name_num\".\n\nCode refinement, no functional changes.\n\nSigned-off-by: Yuezhang Mo <Yuezhang.Mo@sony.com>\nReviewed-by: Andy Wu <Andy.Wu@sony.com>\nReviewed-by: Aoyama Wataru <wataru.aoyama@sony.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>",
        "before_after_code_files": [
          "fsck/fsck.c||fsck/fsck.c",
          "fsck/repair.c||fsck/repair.c",
          "fsck/repair.h||fsck/repair.h",
          "include/exfat_dir.h||include/exfat_dir.h",
          "lib/exfat_dir.c||lib/exfat_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fsck/fsck.c||fsck/fsck.c"
          ],
          "candidate": [
            "fsck/fsck.c||fsck/fsck.c"
          ]
        }
      },
      "candidate_diff": {
        "fsck/fsck.c||fsck/fsck.c": [
          "File: fsck/fsck.c -> fsck/fsck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:  return 0;",
          "711: }",
          "783: const __le16 MSDOS_DOT[ENTRY_NAME_MAX] = {cpu_to_le16(46), 0, };",
          "784: const __le16 MSDOS_DOTDOT[ENTRY_NAME_MAX] = {cpu_to_le16(46), cpu_to_le16(46), 0, };",
          "",
          "[Removed Lines]",
          "713: static int check_bad_char(char w)",
          "714: {",
          "715:  return (w < 0x0020) || (w == '*') || (w == '?') || (w == '<') ||",
          "716:   (w == '>') || (w == '|') || (w == '\"') || (w == ':') ||",
          "717:   (w == '/') || (w == '\\\\');",
          "718: }",
          "720: static char *get_rename_from_user(struct exfat_de_iter *iter)",
          "721: {",
          "722:  char *rename = malloc(ENTRY_NAME_MAX + 2);",
          "724:  if (!rename)",
          "725:   return NULL;",
          "727: retry:",
          "729:  memset(rename, 0x1, ENTRY_NAME_MAX + 2);",
          "730:  printf(\"New name: \");",
          "731:  if (fgets(rename, ENTRY_NAME_MAX + 2, stdin)) {",
          "732:   int i, len, err;",
          "733:   struct exfat_lookup_filter filter;",
          "735:   len = strlen(rename);",
          "737:   rename[len - 1] = '\\0';",
          "738:   for (i = 0; i < len - 1; i++) {",
          "739:    if (check_bad_char(rename[i])) {",
          "740:     printf(\"filename contain invalid character(%c)\\n\", rename[i]);",
          "741:     goto retry;",
          "742:    }",
          "743:   }",
          "745:   exfat_de_iter_flush(iter);",
          "746:   err = exfat_lookup_file(iter->exfat, iter->parent, rename, &filter);",
          "747:   if (!err) {",
          "748:    printf(\"file(%s) already exists, retry to insert name\\n\", rename);",
          "749:    goto retry;",
          "750:   }",
          "751:  }",
          "753:  return rename;",
          "754: }",
          "756: static char *generate_rename(struct exfat_de_iter *iter)",
          "757: {",
          "758:  char *rename;",
          "760:  if (iter->dot_name_num > DOT_NAME_NUM_MAX)",
          "761:   return NULL;",
          "763:  rename = malloc(ENTRY_NAME_MAX + 1);",
          "764:  if (!rename)",
          "765:   return NULL;",
          "767:  while (1) {",
          "768:   struct exfat_lookup_filter filter;",
          "769:   int err;",
          "771:   snprintf(rename, ENTRY_NAME_MAX + 1, \"FILE%07d.CHK\",",
          "772:     iter->dot_name_num++);",
          "773:   err = exfat_lookup_file(iter->exfat, iter->parent, rename,",
          "774:      &filter);",
          "775:   if (!err)",
          "776:    continue;",
          "777:   break;",
          "778:  }",
          "780:  return rename;",
          "781: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "788:           int strm_name_len)",
          "789: {",
          "790:  char *filename;",
          "794:  if (!memcmp(dentry->name_unicode, MSDOS_DOT, strm_name_len * 2))",
          "795:   filename = \".\";",
          "",
          "[Removed Lines]",
          "791:  char error_msg[150];",
          "792:  int num;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "799:  else",
          "800:   return 0;",
          "852: }",
          "854: static int read_file_dentry_set(struct exfat_de_iter *iter,",
          "",
          "[Removed Lines]",
          "802:  sprintf(error_msg, \"ERROR: '%s' filename is not allowed.\\n\"",
          "803:    \" [1] Insert the name you want to rename.\\n\"",
          "804:    \" [2] Automatically renames filename.\\n\"",
          "805:    \" [3] Bypass this check(No repair)\\n\", filename);",
          "806: ask_again:",
          "807:  num = exfat_repair_ask(&exfat_fsck, ER_DE_DOT_NAME,",
          "808:           error_msg);",
          "809:  if (num) {",
          "810:   __le16 utf16_name[ENTRY_NAME_MAX];",
          "811:   char *rename = NULL;",
          "812:   __u16 hash;",
          "813:   struct exfat_dentry *stream_de;",
          "814:   int ret;",
          "816:   switch (num) {",
          "817:   case 1:",
          "818:    rename = get_rename_from_user(iter);",
          "819:    break;",
          "820:   case 2:",
          "821:    rename = generate_rename(iter);",
          "822:    break;",
          "823:   case 3:",
          "824:    break;",
          "825:   default:",
          "826:    exfat_info(\"select 1 or 2 number instead of %d\\n\", num);",
          "827:    goto ask_again;",
          "828:   }",
          "830:   if (!rename)",
          "831:    return -EINVAL;",
          "833:   exfat_info(\"%s filename is renamed to %s\\n\", filename, rename);",
          "835:   exfat_de_iter_get_dirty(iter, 2, &dentry);",
          "837:   memset(utf16_name, 0, sizeof(utf16_name));",
          "838:   ret = exfat_utf16_enc(rename, utf16_name, sizeof(utf16_name));",
          "839:   free(rename);",
          "840:   if (ret < 0)",
          "841:    return ret;",
          "843:   ret >>= 1;",
          "844:   memcpy(dentry->name_unicode, utf16_name, ENTRY_NAME_MAX * 2);",
          "845:   hash = exfat_calc_name_hash(iter->exfat, utf16_name, ret);",
          "846:   exfat_de_iter_get_dirty(iter, 1, &stream_de);",
          "847:   stream_de->stream_name_len = (__u8)ret;",
          "848:   stream_de->stream_name_hash = cpu_to_le16(hash);",
          "849:  }",
          "851:  return 0;",
          "",
          "[Added Lines]",
          "730:  return exfat_repair_rename_ask(&exfat_fsck, iter, filename,",
          "731:    ER_DE_DOT_NAME, \"filename is not allowed\");",
          "",
          "---------------"
        ],
        "fsck/repair.c||fsck/repair.c": [
          "File: fsck/repair.c -> fsck/repair.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <string.h>",
          "7: #include <stdarg.h>",
          "8: #include <stdlib.h>",
          "10: #include \"exfat_ondisk.h\"",
          "11: #include \"libexfat.h\"",
          "12: #include \"repair.h\"",
          "13: #include \"exfat_fs.h\"",
          "15: #include \"fsck.h\"",
          "17: struct exfat_repair_problem {",
          "",
          "[Removed Lines]",
          "14: #include \"exfat_dir.h\"",
          "",
          "[Added Lines]",
          "9: #include <errno.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:  }",
          "159:  return repair;",
          "160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: static int check_bad_char(char w)",
          "163: {",
          "164:  return (w < 0x0020) || (w == '*') || (w == '?') || (w == '<') ||",
          "165:   (w == '>') || (w == '|') || (w == '\"') || (w == ':') ||",
          "166:   (w == '/') || (w == '\\\\');",
          "167: }",
          "169: static char *get_rename_from_user(struct exfat_de_iter *iter)",
          "170: {",
          "171:  char *rename = malloc(ENTRY_NAME_MAX + 2);",
          "173:  if (!rename)",
          "174:   return NULL;",
          "176: retry:",
          "178:  memset(rename, 0x1, ENTRY_NAME_MAX + 2);",
          "179:  printf(\"New name: \");",
          "180:  if (fgets(rename, ENTRY_NAME_MAX + 2, stdin)) {",
          "181:   int i, len, err;",
          "182:   struct exfat_lookup_filter filter;",
          "184:   len = strlen(rename);",
          "186:   rename[len - 1] = '\\0';",
          "187:   for (i = 0; i < len - 1; i++) {",
          "188:    if (check_bad_char(rename[i])) {",
          "189:     printf(\"filename contain invalid character(%c)\\n\", rename[i]);",
          "190:     goto retry;",
          "191:    }",
          "192:   }",
          "194:   exfat_de_iter_flush(iter);",
          "195:   err = exfat_lookup_file(iter->exfat, iter->parent, rename, &filter);",
          "196:   if (!err) {",
          "197:    printf(\"file(%s) already exists, retry to insert name\\n\", rename);",
          "198:    goto retry;",
          "199:   }",
          "200:  }",
          "202:  return rename;",
          "203: }",
          "205: static char *generate_rename(struct exfat_de_iter *iter)",
          "206: {",
          "207:  char *rename;",
          "209:  if (iter->invalid_name_num > INVALID_NAME_NUM_MAX)",
          "210:   return NULL;",
          "212:  rename = malloc(ENTRY_NAME_MAX + 1);",
          "213:  if (!rename)",
          "214:   return NULL;",
          "216:  while (1) {",
          "217:   struct exfat_lookup_filter filter;",
          "218:   int err;",
          "220:   snprintf(rename, ENTRY_NAME_MAX + 1, \"FILE%07d.CHK\",",
          "221:     iter->invalid_name_num++);",
          "222:   err = exfat_lookup_file(iter->exfat, iter->parent, rename,",
          "223:      &filter);",
          "224:   if (!err)",
          "225:    continue;",
          "226:   break;",
          "227:  }",
          "229:  return rename;",
          "230: }",
          "232: int exfat_repair_rename_ask(struct exfat_fsck *fsck, struct exfat_de_iter *iter,",
          "233:   char *old_name, er_problem_code_t prcode, char *error_msg)",
          "234: {",
          "235:  int num;",
          "237: ask_again:",
          "238:  num = exfat_repair_ask(fsck, prcode, \"ERROR: '%s' %s.\\n%s\",",
          "239:    old_name, error_msg,",
          "240:    \" [1] Insert the name you want to rename.\\n\"",
          "241:    \" [2] Automatically renames filename.\\n\"",
          "242:    \" [3] Bypass this check(No repair)\\n\");",
          "243:  if (num) {",
          "244:   __le16 utf16_name[ENTRY_NAME_MAX];",
          "245:   char *rename = NULL;",
          "246:   __u16 hash;",
          "247:   struct exfat_dentry *dentry;",
          "248:   int ret;",
          "250:   switch (num) {",
          "251:   case 1:",
          "252:    rename = get_rename_from_user(iter);",
          "253:    break;",
          "254:   case 2:",
          "255:    rename = generate_rename(iter);",
          "256:    break;",
          "257:   case 3:",
          "258:    break;",
          "259:   default:",
          "260:    exfat_info(\"select 1 or 2 number instead of %d\\n\", num);",
          "261:    goto ask_again;",
          "262:   }",
          "264:   if (!rename)",
          "265:    return -EINVAL;",
          "267:   exfat_info(\"%s filename is renamed to %s\\n\", old_name, rename);",
          "269:   exfat_de_iter_get_dirty(iter, 2, &dentry);",
          "271:   memset(utf16_name, 0, sizeof(utf16_name));",
          "272:   ret = exfat_utf16_enc(rename, utf16_name, sizeof(utf16_name));",
          "273:   free(rename);",
          "274:   if (ret < 0)",
          "275:    return ret;",
          "277:   ret >>= 1;",
          "278:   memcpy(dentry->name_unicode, utf16_name, ENTRY_NAME_MAX * 2);",
          "279:   hash = exfat_calc_name_hash(iter->exfat, utf16_name, ret);",
          "280:   exfat_de_iter_get_dirty(iter, 1, &dentry);",
          "281:   dentry->stream_name_len = (__u8)ret;",
          "282:   dentry->stream_name_hash = cpu_to_le16(hash);",
          "283:  }",
          "285:  return 0;",
          "286: }",
          "",
          "---------------"
        ],
        "fsck/repair.h||fsck/repair.h": [
          "File: fsck/repair.h -> fsck/repair.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #ifndef _REPAIR_H",
          "6: #define _REPAIR_H",
          "8: #define ER_BS_CHECKSUM   0x00000001",
          "9: #define ER_BS_BOOT_REGION  0x00000002",
          "10: #define ER_DE_CHECKSUM   0x00001001",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"exfat_dir.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: int exfat_repair_ask(struct exfat_fsck *fsck, er_problem_code_t prcode,",
          "31:        const char *fmt, ...);",
          "33: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: int exfat_repair_rename_ask(struct exfat_fsck *fsck, struct exfat_de_iter *iter,",
          "36:   char *old_name, er_problem_code_t prcode, char *error_msg);",
          "",
          "---------------"
        ],
        "include/exfat_dir.h||include/exfat_dir.h": [
          "File: include/exfat_dir.h -> include/exfat_dir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  off_t   de_file_offset;",
          "26:  off_t   next_read_offset;",
          "27:  int   max_skip_dentries;",
          "30: };",
          "32: struct exfat_lookup_filter {",
          "",
          "[Removed Lines]",
          "28: #define DOT_NAME_NUM_MAX 9999999",
          "29:  unsigned int  dot_name_num;",
          "",
          "[Added Lines]",
          "28: #define INVALID_NAME_NUM_MAX 9999999",
          "29:  unsigned int  invalid_name_num;",
          "",
          "---------------"
        ],
        "lib/exfat_dir.c||lib/exfat_dir.c": [
          "File: lib/exfat_dir.c -> lib/exfat_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:  iter->de_file_offset = 0;",
          "238:  iter->next_read_offset = iter->read_size;",
          "239:  iter->max_skip_dentries = 0;",
          "242:  if (iter->parent->size == 0)",
          "243:   return EOF;",
          "",
          "[Removed Lines]",
          "240:  iter->dot_name_num = 0;",
          "",
          "[Added Lines]",
          "240:  iter->invalid_name_num = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}