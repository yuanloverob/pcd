{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86915d16b33f35e139038f669475b194c6fc5856",
      "candidate_info": {
        "commit_hash": "86915d16b33f35e139038f669475b194c6fc5856",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/86915d16b33f35e139038f669475b194c6fc5856",
        "files": [
          "modules/clusterer/clusterer.c"
        ],
        "message": "clusterer: fix seed fallback during sync\n\nDo not fall back to the synced state for a capability if syncing is\nactually in progress.\n\n(cherry picked from commit 3960008a14fa75395cc4b49c7e7cae52ac68aed7)",
        "before_after_code_files": [
          "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/clusterer/clusterer.c||modules/clusterer/clusterer.c": [
          "File: modules/clusterer/clusterer.c -> modules/clusterer/clusterer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:    lock_get(cl->lock);",
          "78:    if ((cap->flags & CAP_STATE_ENABLED) &&",
          "79:     !(cap->flags & CAP_STATE_OK) &&",
          "80:     (cl->current_node->flags & NODE_IS_SEED) &&",
          "81:     (TIME_DIFF(cap->sync_req_time, now) >= seed_fb_interval*1000000)) {",
          "82:     cap->flags |= CAP_STATE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     !(cap->flags & CAP_SYNC_IN_PROGRESS) &&",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a1012bcd9e97a6c95f62c2dfe0f6fd55918e9aa",
      "candidate_info": {
        "commit_hash": "2a1012bcd9e97a6c95f62c2dfe0f6fd55918e9aa",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/2a1012bcd9e97a6c95f62c2dfe0f6fd55918e9aa",
        "files": [
          "modules/xml/xml.c"
        ],
        "message": "xml: fix accessing node value with CDATA sections\n\n(cherry picked from commit 4a4248cbfd9c289ea16d68b45d1dbaa8a5daf064)",
        "before_after_code_files": [
          "modules/xml/xml.c||modules/xml/xml.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/xml/xml.c||modules/xml/xml.c": [
          "File: modules/xml/xml.c -> modules/xml/xml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:  xmlNode *n_it;",
          "464:  for (n_it = node->children; n_it; n_it = n_it->next)",
          "466:    LM_ERR(\"Unable to append string to xml buffer\\n\");",
          "467:    return -1;",
          "468:   }",
          "",
          "[Removed Lines]",
          "465:   if (n_it->type == XML_TEXT_NODE && xmlBufferCat(xml_buf, n_it->content) < 0) {",
          "",
          "[Added Lines]",
          "465:   if ((n_it->type == XML_TEXT_NODE ||",
          "466:    n_it->type == XML_CDATA_SECTION_NODE) &&",
          "467:    xmlBufferCat(xml_buf, n_it->content) < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "686:  return 0;",
          "687: }",
          "690: {",
          "691:  xmlNode *n_it, *tmp = NULL, *new_txt;",
          "692:  int set = 0;",
          "695:  if (!new_content.s)",
          "696:   set = 1;",
          "698:  for (n_it = node->children; n_it; n_it = tmp) {",
          "699:   tmp = n_it->next;",
          "702:    if (!set) {",
          "706:    } else {",
          "708:     xmlUnlinkNode(n_it);",
          "709:     xmlFreeNode(n_it);",
          "710:    }",
          "",
          "[Removed Lines]",
          "689: static int set_node_content(xmlNode *node, str new_content)",
          "701:   if (n_it->type == XML_TEXT_NODE && !xmlIsBlankNode(n_it)) {",
          "704:     xmlNodeSetContentLen(n_it, BAD_CAST new_content.s, new_content.len);",
          "705:     set = 1;",
          "",
          "[Added Lines]",
          "691: #define TMP_TAG_S \"<x>\"",
          "692: #define TMP_TAG_END_S \"</x>\"",
          "693: #define TMP_TAG_LEN (sizeof(TMP_TAG_S) - 1)",
          "694: #define TMP_TAG_END_LEN (sizeof(TMP_TAG_END_S) - 1)",
          "696: static int set_node_content_w_cdata(xmlNode *node, str new_content,",
          "697:  xmlDoc *xml_doc)",
          "698: {",
          "699:  xmlNode *n, *tmp = NULL, *tmp_root;",
          "700:  xmlDoc *tmp_doc = NULL;",
          "701:  str tmp_doc_str = STR_NULL;",
          "704:  for (n = node->children; n; n = tmp) {",
          "705:   tmp = n->next;",
          "707:   if (n->type == XML_TEXT_NODE || n->type == XML_CDATA_SECTION_NODE) {",
          "708:    xmlUnlinkNode(n);",
          "709:    xmlFreeNode(n);",
          "710:   }",
          "711:  }",
          "716:  tmp_doc_str.len = new_content.len + TMP_TAG_LEN + TMP_TAG_END_LEN;",
          "717:  tmp_doc_str.s = pkg_malloc(tmp_doc_str.len);",
          "718:  if (!tmp_doc_str.s) {",
          "719:   LM_ERR(\"no more pkg memory\\n\");",
          "720:   return -1;",
          "721:  }",
          "723:  memcpy(tmp_doc_str.s, TMP_TAG_S, TMP_TAG_LEN);",
          "724:  memcpy(tmp_doc_str.s+TMP_TAG_LEN, new_content.s, new_content.len);",
          "725:  memcpy(tmp_doc_str.s+TMP_TAG_LEN+new_content.len,",
          "726:   TMP_TAG_END_S, TMP_TAG_END_LEN);",
          "728:  tmp_doc = xmlParseMemory(tmp_doc_str.s, tmp_doc_str.len);",
          "729:  if (!tmp_doc) {",
          "730:   LM_ERR(\"Failed to parse xml block\\n\");",
          "731:   goto error;",
          "732:  }",
          "734:  tmp_root = xmlDocGetRootElement(tmp_doc);",
          "735:  for (n = tmp_root->children; n; n = n->next) {",
          "736:   if (n->type == XML_TEXT_NODE || n->type == XML_CDATA_SECTION_NODE) {",
          "737:    tmp = xmlDocCopyNode(n, xml_doc, 0);",
          "738:    if (!tmp) {",
          "739:     LM_ERR(\"Failed to copy node\\n\");",
          "740:     goto error;",
          "741:    }",
          "743:    if (!xmlAddChild(node, tmp)) {",
          "744:     LM_ERR(\"Unable to link copied node\\n\");",
          "745:     goto error;",
          "746:    }",
          "747:   }",
          "748:  }",
          "750:  xmlFreeDoc(tmp_doc);",
          "751:  pkg_free(tmp_doc_str.s);",
          "753:  return 0;",
          "754: error:",
          "755:  if (tmp_doc_str.s)",
          "756:   pkg_free(tmp_doc_str.s);",
          "757:  if (tmp_doc)",
          "758:   xmlFreeDoc(tmp_doc);",
          "759:  return -1;",
          "760: }",
          "762: #define CDATA_PREFIX_S \"<![CDATA[\"",
          "763: #define CDATA_SUFFIX_S \"]]>\"",
          "764: #define CDATA_PREFIX_LEN (sizeof(CDATA_PREFIX_S) - 1)",
          "765: #define CDATA_SUFFIX_LEN (sizeof(CDATA_SUFFIX_S) - 1)",
          "767: static int set_node_content(xmlNode *node, str new_content, xmlDoc *xml_doc)",
          "772:  if ((new_content.len > CDATA_PREFIX_LEN + CDATA_SUFFIX_LEN) &&",
          "773:   str_strstr(&new_content, &str_init(CDATA_PREFIX_S)))",
          "774:   return set_node_content_w_cdata(node, new_content, xml_doc);",
          "783:   if (n_it->type == XML_TEXT_NODE || n_it->type == XML_CDATA_SECTION_NODE) {",
          "785:     if (n_it->type == XML_CDATA_SECTION_NODE) {",
          "786:      xmlUnlinkNode(n_it);",
          "787:      xmlFreeNode(n_it);",
          "788:     } else {",
          "790:      xmlNodeSetContentLen(n_it,",
          "791:       BAD_CAST new_content.s, new_content.len);",
          "792:      set = 1;",
          "793:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "793:     return -1;",
          "794:    }",
          "797:     LM_ERR(\"Unable to clear text content for element <%s>\\n\", node->name);",
          "798:     return -1;",
          "799:    }",
          "",
          "[Removed Lines]",
          "796:    if (set_node_content(node, empty_str) < 0) {",
          "",
          "[Added Lines]",
          "884:    if (set_node_content(node, empty_str, obj->xml_doc) < 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "895:     return -1;",
          "896:    }",
          "899:     LM_ERR(\"Unable to set content for element <%s>\\n\", node->name);",
          "900:     return -1;",
          "901:    }",
          "",
          "[Removed Lines]",
          "898:    if (set_node_content(node, val->rs) < 0) {",
          "",
          "[Added Lines]",
          "986:    if (set_node_content(node, val->rs, obj->xml_doc) < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52a401875e5339b84b1b452f48af764f49b5d068",
      "candidate_info": {
        "commit_hash": "52a401875e5339b84b1b452f48af764f49b5d068",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/52a401875e5339b84b1b452f48af764f49b5d068",
        "files": [
          "pvar.c"
        ],
        "message": "Merge pull request #2885 from john08burke/multipart_crash\n\npvar: fix crash when parsing multi-part body with negative index\n(cherry picked from commit cd853142daa005c20f54cfb93ae99d48ba1e510c)",
        "before_after_code_files": [
          "pvar.c||pvar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pvar.c||pvar.c": [
          "File: pvar.c -> pvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:  if (idx<0) {",
          "1702:   first_part_by_mime( &sbody->first, neg_index[1], mime );",
          "1703:   neg_index[0] = neg_index[1];",
          "1705:   distance -= idx+1;",
          "1707:    if (distance == 0) {",
          "1708:     first_part_by_mime( neg_index[0]->next, neg_index[0], mime );",
          "1709:    } else {",
          "",
          "[Removed Lines]",
          "1706:   while (neg_index[1]->next) {",
          "",
          "[Added Lines]",
          "1705:   if (neg_index[0]==NULL) {",
          "1706:    LM_DBG(\"Body part not found for <%d>\\n\", mime);",
          "1707:    return pv_get_null(msg, param, res);",
          "1708:   }",
          "1712:   first_part_by_mime(neg_index[1]->next, neg_index[1], mime);",
          "1713:   while (neg_index[1]) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fea6bedae03786057c929fe82f83ceee8fa1156",
      "candidate_info": {
        "commit_hash": "7fea6bedae03786057c929fe82f83ceee8fa1156",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7fea6bedae03786057c929fe82f83ceee8fa1156",
        "files": [
          "menuconfig/curses.c"
        ],
        "message": "Merge pull request #2821 from lemenkov/format_security\n\nFix -Werror=format-security\n\n(cherry picked from commit 47bfb3e3292a1acca6562427038b25a302d65ff1)",
        "before_after_code_files": [
          "menuconfig/curses.c||menuconfig/curses.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "menuconfig/curses.c||menuconfig/curses.c": [
          "File: menuconfig/curses.c -> menuconfig/curses.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  attron(COLOR_PAIR(1));",
          "94:  print_notice(NOTICE_Y,NOTICE_X,0,\"Press h for navigation help.\");",
          "95:  attroff(COLOR_PAIR(1));",
          "",
          "[Removed Lines]",
          "92:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,menu->parent?menu->parent->name:\"OpenSIPS Main Configuration Menu\");",
          "",
          "[Added Lines]",
          "92:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,\"%s\",menu->parent?menu->parent->name:\"OpenSIPS Main Configuration Menu\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:  attron(COLOR_PAIR(1));",
          "209:  attroff(COLOR_PAIR(1));",
          "211:  if (should_scroll) {",
          "",
          "[Removed Lines]",
          "208:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,menu->name);",
          "",
          "[Added Lines]",
          "208:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,\"%s\",menu->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:  if (current->description) {",
          "250:   attron(COLOR_PAIR(1));",
          "252:   attroff(COLOR_PAIR(1));",
          "253:  }",
          "",
          "[Removed Lines]",
          "251:   print_notice(NOTICE_Y,NOTICE_X,0,current->description);",
          "",
          "[Added Lines]",
          "251:   print_notice(NOTICE_Y,NOTICE_X,0,\"%s\",current->description);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:  }",
          "343:  return 0;",
          "",
          "[Removed Lines]",
          "344: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b65796dd91b72a7df90fd27c99886a6d56a7811c",
      "candidate_info": {
        "commit_hash": "b65796dd91b72a7df90fd27c99886a6d56a7811c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/b65796dd91b72a7df90fd27c99886a6d56a7811c",
        "files": [
          "modules/cachedb_local/cachedb_local_replication.c"
        ],
        "message": "cachedb_local: fix expiration of keys received through cluster sync\n\nCredits to Kingsley Tart from CallTracks for reporting.\n\n(cherry picked from commit d0c4fc48c7d46ac3588e540574a5a32b3d61992b)",
        "before_after_code_files": [
          "modules/cachedb_local/cachedb_local_replication.c||modules/cachedb_local/cachedb_local_replication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/5",
          "https://github.com/naveenecosmob/opensips/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_local/cachedb_local_replication.c||modules/cachedb_local/cachedb_local_replication.c": [
          "File: modules/cachedb_local/cachedb_local_replication.c -> modules/cachedb_local/cachedb_local_replication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:                                         bin_push_str(sync_packet, &col->col_name);",
          "188:                                         bin_push_str(sync_packet, &data->attr);",
          "189:                                         bin_push_str(sync_packet, &data->value);",
          "191:                                 }",
          "192:                                 data = data->next;",
          "193:                         }",
          "",
          "[Removed Lines]",
          "190:                                         bin_push_int(sync_packet, data->expires);",
          "",
          "[Added Lines]",
          "190:                                         bin_push_int(sync_packet, data->expires ?",
          "191:                                                 data->expires - get_ticks() : 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}