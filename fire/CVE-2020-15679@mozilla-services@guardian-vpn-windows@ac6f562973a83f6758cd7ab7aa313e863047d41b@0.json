{
  "cve_id": "CVE-2020-15679",
  "cve_desc": "An OAuth session fixation vulnerability existed in the VPN login flow, where an attacker could craft a custom login URL, convince a VPN user to login via that URL, and obtain authenticated access as that user. This issue is limited to cases where attacker and victim are sharing the same source IP and could allow the ability to view session states and disconnect VPN sessions. This vulnerability affects Mozilla VPN iOS 1.0.7 < (929), Mozilla VPN Windows < 1.2.2, and Mozilla VPN Android 1.1.0 < (1360).",
  "repo": "mozilla-services/guardian-vpn-windows",
  "patch_hash": "ac6f562973a83f6758cd7ab7aa313e863047d41b",
  "patch_info": {
    "commit_hash": "ac6f562973a83f6758cd7ab7aa313e863047d41b",
    "repo": "mozilla-services/guardian-vpn-windows",
    "commit_url": "https://github.com/mozilla-services/guardian-vpn-windows/commit/ac6f562973a83f6758cd7ab7aa313e863047d41b",
    "files": [
      "installer/MozillaVPN.wxs",
      "ui/src/Firefox Private Network.csproj",
      "ui/src/FxA/Account.cs",
      "ui/src/FxA/Devices.cs",
      "ui/src/FxA/Login.cs",
      "ui/src/FxA/LoginSessionManager.cs",
      "ui/src/FxA/ServerList/ServerList.cs",
      "ui/src/JSONStructures/Login/FxALoginURLs.cs",
      "ui/src/Main.cs",
      "ui/src/Manager.cs",
      "ui/src/ProductConstants.cs",
      "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
      "ui/src/UI/Resources/Localization/Translations/en-us.ftl",
      "ui/src/UI/Views/Settings/SettingsView.xaml",
      "ui/src/ViewModels/MainWindowViewModel.cs",
      "ui/src/WCF/IService.cs",
      "ui/src/WCF/Service.cs",
      "ui/src/app.manifest",
      "ui/src/packages.config"
    ],
    "message": "New non-polling authentication flow.\n\n- Fixes intermittent hanging during auth\n- Implements PKCE",
    "before_after_code_files": [
      "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
      "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
      "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
      "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
      "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
      "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
      "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
      "ui/src/Main.cs||ui/src/Main.cs",
      "ui/src/Manager.cs||ui/src/Manager.cs",
      "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
      "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
      "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
      "ui/src/UI/Views/Settings/SettingsView.xaml||ui/src/UI/Views/Settings/SettingsView.xaml",
      "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
      "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
      "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
      "ui/src/app.manifest||ui/src/app.manifest",
      "ui/src/packages.config||ui/src/packages.config"
    ]
  },
  "patch_diff": {
    "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs": [
      "File: installer/MozillaVPN.wxs -> installer/MozillaVPN.wxs",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_70x70.png\" />",
      "87:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_150x150.png\" />",
      "89:     <!-- Broker Service -->",
      "90:     <ServiceInstall",
      "91:      Type=\"ownProcess\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:         <!-- Custom URL protocol for handling the PKCE auth flow -->",
      "90:         <RegistryKey Root=\"HKCR\" Key=\"mozilla-vpn\">",
      "91:           <RegistryValue Type=\"string\" Name=\"URL Protocol\" Value=\"mozilla-vpn\"/>",
      "92:           <RegistryValue Type=\"string\" Value=\"URL:mozilla-vpn Protocol\"/>",
      "93:           <RegistryKey Key=\"DefaultIcon\">",
      "94:             <RegistryValue Type=\"string\" Value=\"MozillaVPN.exe\" />",
      "95:           </RegistryKey>",
      "96:           <RegistryKey Key=\"shell\\open\\command\">",
      "97:             <RegistryValue Type=\"string\" Value=\"&quot;C:\\Program Files\\Mozilla\\Mozilla VPN\\MozillaVPN.exe&quot; &quot;%1&quot;\" />",
      "98:           </RegistryKey>",
      "99:         </RegistryKey>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:    </Component>",
      "113:   </ComponentGroup>",
      "116:    Merge modules",
      "117:   -->",
      "118:   <DirectoryRef Id=\"MozillaVPNFolder\">",
      "",
      "[Removed Lines]",
      "115:   <!--",
      "",
      "[Added Lines]",
      "127:     <!--",
      "",
      "---------------"
    ],
    "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs": [
      "File: ui/src/FxA/Account.cs -> ui/src/FxA/Account.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:             }",
      "51:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56:         public static string OriginalApiVersion { get; set; } = \"/api/v1\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:         public bool ProcessLogin(string fxaJson)",
      "74:         {",
      "79:             Manager.MainWindowViewModel.NewUserSignIn = true;",
      "",
      "[Removed Lines]",
      "76:             Manager.Account.Config = new FxA.Config(fxaJson);",
      "",
      "[Added Lines]",
      "81:             Manager.Account.Config = new Config(fxaJson);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:             Manager.Account.Config.WriteFxAUserToFile(ProductConstants.FxAUserFile);",
      "93:             Manager.Account.Avatar.InitializeCache(avatarUrl: Config.FxALogin.User.Avatar);",
      "98:             var deviceAddResponse = devices.AddDevice(deviceName, keys.Public);",
      "",
      "[Removed Lines]",
      "90:             Manager.Account.LoginState = FxA.LoginState.LoggedIn;",
      "96:             var devices = new FxA.Devices();",
      "97:             var deviceName = string.Format(\"{0} ({1} {2})\", System.Environment.MachineName, System.Environment.OSVersion.Platform, System.Environment.OSVersion.Version);",
      "",
      "[Added Lines]",
      "95:             Manager.Account.LoginState = LoginState.LoggedIn;",
      "101:             var devices = new Devices();",
      "102:             var deviceName = string.Format(\"{0} ({1} {2})\", Environment.MachineName, Environment.OSVersion.Platform, Environment.OSVersion.Version);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "160:         public JSONStructures.User GetAccountDetails()",
      "161:         {",
      "165:             var response = api.SendRequest();",
      "",
      "[Removed Lines]",
      "162:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/account\", RestSharp.Method.GET);",
      "",
      "[Added Lines]",
      "167:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{OriginalApiVersion}/vpn/account\", RestSharp.Method.GET);",
      "",
      "---------------"
    ],
    "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs": [
      "File: ui/src/FxA/Devices.cs -> ui/src/FxA/Devices.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: using System;",
      "6: using System.Collections.Generic;",
      "7: using System.Threading.Tasks;",
      "8: using Newtonsoft.Json;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: using System.IO;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:         public JSONStructures.Device AddDevice(string deviceName, string publicKey)",
      "24:         {",
      "26:             api.AddPostBody(new Dictionary<string, string> { { \"name\", deviceName }, { \"pubkey\", publicKey } });",
      "",
      "[Removed Lines]",
      "25:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/device\", RestSharp.Method.POST);",
      "",
      "[Added Lines]",
      "26:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/device\", RestSharp.Method.POST);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "73:             var sanitizedDevicePublicKey = System.Web.HttpUtility.UrlEncode(publicKey);",
      "77:             var response = api.SendRequest();",
      "",
      "[Removed Lines]",
      "74:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/device/\" + sanitizedDevicePublicKey, RestSharp.Method.DELETE);",
      "",
      "[Added Lines]",
      "75:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/device/\" + sanitizedDevicePublicKey, RestSharp.Method.DELETE);",
      "",
      "---------------"
    ],
    "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs": [
      "File: ui/src/FxA/Login.cs -> ui/src/FxA/Login.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: using System;",
      "6: using System.Diagnostics;",
      "7: using System.Linq;",
      "8: using System.Threading;",
      "9: using System.Windows;",
      "10: using Newtonsoft.Json;",
      "12: namespace FirefoxPrivateNetwork.FxA",
      "13: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: using System.Collections.Generic;",
      "8: using System.IO;",
      "10: using System.Security.Cryptography;",
      "11: using System.Security.Permissions;",
      "12: using System.Text;",
      "14: using System.Web;",
      "16: using Microsoft.IdentityModel.Tokens;",
      "18: using RestSharp.Extensions;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     public class Login",
      "18:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27:         private static string codeVerifierPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);",
      "28:         private static string codeVerifierFile = \"moz_gen_cvf.txt\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "36:         private event LoginResultHandler LoginResultEvent;",
      "75:         {",
      "97:             try",
      "98:             {",
      "101:             }",
      "102:             catch (Exception e)",
      "103:             {",
      "",
      "[Removed Lines]",
      "42:         public JSONStructures.FxALoginURLs GetLoginURLs()",
      "43:         {",
      "44:             var api = new ApiRequest(string.Empty, \"/vpn/login\", RestSharp.Method.POST);",
      "45:             JSONStructures.FxALoginURLs loginURLs;",
      "48:             var response = api.SendRequest();",
      "50:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
      "51:             {",
      "52:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
      "53:                 return null;",
      "54:             }",
      "56:             try",
      "57:             {",
      "58:                 loginURLs = JsonConvert.DeserializeObject<JSONStructures.FxALoginURLs>(response.Content);",
      "59:                 return loginURLs;",
      "60:             }",
      "61:             catch (Exception e)",
      "62:             {",
      "63:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
      "64:             }",
      "66:             return null;",
      "67:         }",
      "74:         public string QueryRawLoginState(string tokenURL)",
      "76:             var api = new ApiRequest(string.Empty, tokenURL, RestSharp.Method.GET);",
      "79:             var response = api.SendRequest();",
      "81:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
      "82:             {",
      "83:                 ErrorHandling.ErrorHandler.Handle(\"User has not logged in yet\", ErrorHandling.LogLevel.Debug);",
      "84:                 return null;",
      "85:             }",
      "87:             return response.Content;",
      "88:         }",
      "95:         public JSONStructures.FxALogin ParseLoginState(string jsonContents)",
      "96:         {",
      "99:                 var loginData = JsonConvert.DeserializeObject<JSONStructures.FxALogin>(jsonContents);",
      "100:                 return loginData;",
      "",
      "[Added Lines]",
      "52:         public static string ApiVersion { get; set; } = \"/api/v2\";",
      "58:         public JSONStructures.FxALoginURLs GetLoginURL()",
      "61:             string codeVerifier = GetUniqueToken(44);",
      "64:             File.WriteAllText(Path.Combine(codeVerifierPath, codeVerifierFile), codeVerifier);",
      "68:             string codeChallenge = codeVerifier;",
      "71:             JSONStructures.FxALoginURLs loginURLs = new JSONStructures.FxALoginURLs();",
      "76:                 loginURLs.LoginUrl = $\"{ProductConstants.BaseUrl}{ApiVersion}/vpn/login/windows?code_challenge={codeChallenge}&code_challenge_method=plain\";",
      "78:                 return loginURLs;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "134:         {",
      "135:             try",
      "136:             {",
      "139:                 {",
      "140:                     return false;",
      "141:                 }",
      "153:             }",
      "154:             catch (Exception e)",
      "155:             {",
      "",
      "[Removed Lines]",
      "133:         public bool StartLogin(CancellationToken cancelToken)",
      "137:                 var loginURLs = GetLoginURLs();",
      "138:                 if (loginURLs == null)",
      "143:                 var pollInterval = loginURLs.PollInterval % 31; // Max 30 seconds, no more",
      "144:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
      "145:                 StartQueryLoginThread(loginURLs.VerificationUrl, loginURLs.PollInterval, loginURLs.ExpiresOn, cancelToken);",
      "148:                 OpenBrowser(loginURLs.LoginUrl);",
      "151:                 UI.MainWindow mainWindow = (UI.MainWindow)Application.Current.MainWindow;",
      "152:                 mainWindow.NavigateToView(new FirefoxPrivateNetwork.UI.VerifyAccountView(loginURLs.LoginUrl), UI.MainWindow.SlideDirection.Left);",
      "",
      "[Added Lines]",
      "110:         public bool StartLogin()",
      "115:                 JSONStructures.FxALoginURLs loginURL = GetLoginURL();",
      "117:                 if (loginURL == null)",
      "123:                 ApiRequest api = new ApiRequest(string.Empty, loginURL.LoginUrl, RestSharp.Method.GET);",
      "126:                 var response = api.SendRequest();",
      "128:                 if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
      "129:                 {",
      "130:                     ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
      "131:                     return false;",
      "132:                 }",
      "134:                 Manager.Account.LoginState = LoginState.LoggingIn;",
      "137:                 OpenBrowser(loginURL.LoginUrl);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "162:         }",
      "172:         {",
      "174:             {",
      "178:         }",
      "188:         {",
      "228:                     {",
      "231:                         {",
      "247:                         }",
      "253:                 }",
      "256:             }",
      "259:         }",
      "260:     }",
      "261: }",
      "",
      "[Removed Lines]",
      "171:         public void StartQueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
      "173:             var loginThread = new Thread(() => QueryLoginThread(queryUri, timeoutSeconds, expiresAt, cancelToken))",
      "175:                 IsBackground = true,",
      "176:             };",
      "177:             loginThread.Start();",
      "187:         private void QueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
      "189:             while (Manager.Account.LoginState == FxA.LoginState.LoggingIn && DateTime.Compare(DateTime.UtcNow, expiresAt) < 0)",
      "190:             {",
      "191:                 try",
      "192:                 {",
      "193:                     var queryRawData = QueryRawLoginState(queryUri);",
      "195:                     if (cancelToken.IsCancellationRequested)",
      "196:                     {",
      "197:                         break;",
      "198:                     }",
      "200:                     if (queryRawData == null)",
      "201:                     {",
      "202:                         Thread.Sleep(TimeSpan.FromSeconds(timeoutSeconds));",
      "203:                         continue;",
      "204:                     }",
      "206:                     var queryData = ParseLoginState(queryRawData);",
      "208:                     if (queryData.User == null || queryData.User.Subscriptions == null || queryData.User.Subscriptions.Vpn == null)",
      "209:                     {",
      "210:                         Manager.Account.LoginState = LoginState.LoggedOut;",
      "211:                         break;",
      "212:                     }",
      "214:                     if (!queryData.User.Subscriptions.Vpn.Active)",
      "215:                     {",
      "216:                         Manager.Account.LoginState = LoginState.LoggedOut;",
      "217:                         break;",
      "218:                     }",
      "220:                     var processLoginResult = Manager.Account.ProcessLogin(queryRawData);",
      "221:                     Manager.Account.LoginState = LoginState.LoggedIn;",
      "222:                     Manager.StartUIUpdaters();",
      "224:                     var maxDevicesReached = !processLoginResult && Manager.Account.Config.FxALogin.User.Devices.Count() >= Manager.Account.Config.FxALogin.User.MaxDevices;",
      "226:                     Cache.FxAServerList.RetrieveRemoteServerList();",
      "227:                     Application.Current.Dispatcher.Invoke(() =>",
      "229:                         var owner = Application.Current.MainWindow;",
      "230:                         if (owner != null)",
      "232:                             if (!Manager.MustUpdate)",
      "233:                             {",
      "234:                                 if (maxDevicesReached)",
      "235:                                 {",
      "236:                                     ((UI.MainWindow)owner).NavigateToView(new UI.DevicesView(deviceLimitReached: true, fxaJson: queryRawData), UI.MainWindow.SlideDirection.Left);",
      "237:                                 }",
      "238:                                 else",
      "239:                                 {",
      "240:                                     ((UI.MainWindow)owner).NavigateToView(new UI.OnboardingView5(), UI.MainWindow.SlideDirection.Left);",
      "241:                                 }",
      "242:                             }",
      "244:                             ((UI.MainWindow)owner).Show();",
      "245:                             ((UI.MainWindow)owner).WindowState = WindowState.Normal;",
      "246:                             ((UI.MainWindow)owner).Activate();",
      "248:                     });",
      "249:                 }",
      "250:                 catch (Exception e)",
      "251:                 {",
      "252:                     ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Debug);",
      "255:                 Thread.Sleep(TimeSpan.FromSeconds(5));",
      "258:             LoginResultEvent?.Invoke(this, this, Manager.Account.LoginState);",
      "",
      "[Added Lines]",
      "153:         public void VerifyUserLogin(string code)",
      "156:             ApiRequest api = new ApiRequest(string.Empty, $\"{ProductConstants.BaseUrl}{ApiVersion}/vpn/login/verify\", RestSharp.Method.POST);",
      "159:             string code_verifier = File.ReadAllText(Path.Combine(codeVerifierPath, codeVerifierFile));",
      "162:             Dictionary<string, string> postBody = new Dictionary<string, string>();",
      "163:             postBody.Add(\"code\", code);",
      "164:             postBody.Add(\"code_verifier\", code_verifier);",
      "165:             api.AddPostBody(postBody);",
      "168:             var response = api.SendRequest();",
      "170:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
      "172:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
      "173:                 return;",
      "174:             }",
      "177:             Manager.Account.ProcessLogin(response.Content);",
      "185:         private static string GetHashSha256(string text)",
      "187:             SHA256Managed hashTool = new SHA256Managed();",
      "189:             byte[] phraseAsByte = Encoding.UTF8.GetBytes(string.Concat(text));",
      "190:             byte[] encryptedBytes = hashTool.ComputeHash(phraseAsByte);",
      "192:             hashTool.Clear();",
      "194:             string value = Convert.ToBase64String(encryptedBytes);",
      "196:             return value;",
      "197:         }",
      "205:         private static string GetUniqueToken(int length, string chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_\")",
      "206:         {",
      "207:             using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())",
      "208:             {",
      "209:                 byte[] data = new byte[length];",
      "213:                 byte[] buffer = null;",
      "216:                 int maxRandom = byte.MaxValue - ((byte.MaxValue + 1) % chars.Length);",
      "218:                 crypto.GetBytes(data);",
      "220:                 char[] result = new char[length];",
      "222:                 for (int i = 0; i < length; i++)",
      "223:                 {",
      "224:                     byte value = data[i];",
      "226:                     while (value > maxRandom)",
      "228:                         if (buffer == null)",
      "230:                             buffer = new byte[1];",
      "233:                         crypto.GetBytes(buffer);",
      "234:                         value = buffer[0];",
      "235:                     }",
      "237:                     result[i] = chars[value % chars.Length];",
      "240:                 return new string(result);",
      "",
      "---------------"
    ],
    "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs": [
      "File: ui/src/FxA/LoginSessionManager.cs -> ui/src/FxA/LoginSessionManager.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:                 sessions.Add(login, tokenSource);",
      "36:                 {",
      "37:                     CancelCurrentSession();",
      "38:                 }",
      "",
      "[Removed Lines]",
      "35:                 if (!login.StartLogin(tokenSource.Token))",
      "",
      "[Added Lines]",
      "35:                 if (!login.StartLogin())",
      "",
      "---------------"
    ],
    "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs": [
      "File: ui/src/FxA/ServerList/ServerList.cs -> ui/src/FxA/ServerList/ServerList.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "174:         public bool RetrieveRemoteServerList()",
      "175:         {",
      "177:             var response = api.SendRequest();",
      "178:             if (response == null)",
      "179:             {",
      "",
      "[Removed Lines]",
      "176:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/servers\", Method.GET);",
      "",
      "[Added Lines]",
      "176:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/servers\", Method.GET);",
      "",
      "---------------"
    ],
    "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs": [
      "File: ui/src/JSONStructures/Login/FxALoginURLs.cs -> ui/src/JSONStructures/Login/FxALoginURLs.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:         [JsonProperty(\"verification_url\")]",
      "25:         public string VerificationUrl { get; set; }",
      "38:     }",
      "39: }",
      "",
      "[Removed Lines]",
      "30:         [JsonProperty(\"expires_on\")]",
      "31:         public DateTime ExpiresOn { get; set; }",
      "36:         [JsonProperty(\"poll_interval\")]",
      "37:         public int PollInterval { get; set; }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/Main.cs||ui/src/Main.cs": [
      "File: ui/src/Main.cs -> ui/src/Main.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: using System;",
      "6: using System.Linq;",
      "7: using System.ServiceProcess;",
      "8: using System.Threading;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: using System.Collections.Generic;",
      "7: using System.Diagnostics;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.StyleCop.CSharp.DocumentationRules\", \"SA1649:FileNameMustMatchTypeName\", Justification = \"Default C# behavior.\")]",
      "21:     {",
      "",
      "[Removed Lines]",
      "20:     internal class Entry : System.Windows.Application",
      "25:         private static readonly Mutex RunOnceMutex = new Mutex(false, string.Concat(@\"Local\\\", ProductConstants.GUID));",
      "",
      "[Added Lines]",
      "22:     internal class Entry : Application",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "32:         {",
      "33:             bool ranOnStartup = false;",
      "36:             {",
      "38:                 if (args.First().ToLower() == \"broker\")",
      "",
      "[Removed Lines]",
      "35:             if (args.Count() == 1)",
      "",
      "[Added Lines]",
      "32:             List<Process> processes = Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName).ToList();",
      "34:             if (args.Count() == 1 && !args[0].Contains(\"mozilla-vpn:\"))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "59:             }",
      "63:             {",
      "67:                 {",
      "69:                 }",
      "72:             }",
      "",
      "[Removed Lines]",
      "62:             if (!RunOnceMutex.WaitOne(TimeSpan.Zero, true))",
      "65:                 var runningWindow = User32.FindWindow(ProductConstants.TrayWindowClassName, string.Empty);",
      "66:                 if (runningWindow != IntPtr.Zero)",
      "68:                     User32.SendMessage(runningWindow, User32.WmShow, IntPtr.Zero, string.Empty);",
      "71:                 Environment.Exit(1);",
      "",
      "[Added Lines]",
      "61:             if (processes.Count > 1)",
      "63:                 processes.Sort((x, y) => DateTime.Compare(y.StartTime, x.StartTime));",
      "65:                 if (processes.Count > 2)",
      "67:                     for (int i = 1; i <= processes.Count - 2; i++)",
      "68:                     {",
      "69:                         processes[i].Kill();",
      "70:                     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "81:                 app.InitializeComponent();",
      "87:                 Manager.MainWindowViewModel.RanOnStartup = ranOnStartup;",
      "",
      "[Removed Lines]",
      "84:                 Manager.Initialize();",
      "",
      "[Added Lines]",
      "85:                 if (args.Count() == 1 && args[0].Contains(\"mozilla-vpn:\"))",
      "86:                 {",
      "88:                     Manager.Initialize(args.First());",
      "89:                     VerifyUser(args.First());",
      "90:                 }",
      "91:                 else",
      "92:                 {",
      "93:                     Manager.Initialize();",
      "94:                 }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "136:                 Environment.Exit(1);",
      "137:             }",
      "138:         }",
      "139:     }",
      "140: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:         private static void VerifyUser(string args)",
      "158:         {",
      "159:             try",
      "160:             {",
      "161:                 string code = args.Substring(args.IndexOf(\"code=\") + 5);",
      "163:                 if (code != null && code.Length >= 44)",
      "164:                 {",
      "165:                     FxA.Login verifyUser = new FxA.Login();",
      "167:                     verifyUser.VerifyUserLogin(code);",
      "168:                 }",
      "169:             }",
      "170:             catch (Exception e)",
      "171:             {",
      "172:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
      "173:                 Environment.Exit(1);",
      "174:             }",
      "175:         }",
      "",
      "---------------"
    ],
    "ui/src/Manager.cs||ui/src/Manager.cs": [
      "File: ui/src/Manager.cs -> ui/src/Manager.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "115:         {",
      "116:             InitializeSettings();",
      "117:             InitializeTranslationService();",
      "",
      "[Removed Lines]",
      "114:         public static void Initialize()",
      "",
      "[Added Lines]",
      "115:         public static void Initialize(string code = \"\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119:             InitializeServerListCache();",
      "120:             InitializeTunnel();",
      "121:             InitializeAccount();",
      "123:             InitializeWlanWatcher();",
      "124:             InitializeCaptivePortalDetector();",
      "125:             InitializeIpInfo();",
      "",
      "[Removed Lines]",
      "122:             InitializeViewModels();",
      "",
      "[Added Lines]",
      "123:             InitializeViewModels(code);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:         {",
      "173:         }",
      "",
      "[Removed Lines]",
      "170:         public static void InitializeViewModels()",
      "172:             MainWindowViewModel = new ViewModels.MainWindowViewModel();",
      "",
      "[Added Lines]",
      "172:         public static void InitializeViewModels(string code = \"\")",
      "174:             MainWindowViewModel = new ViewModels.MainWindowViewModel(code);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "233:             ConnectionStatusUpdater.StopThread();",
      "234:             ServerListUpdater.StopThread();",
      "235:             AccountInfoUpdater.StopTask();",
      "236:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:             VersionUpdater.StopTask();",
      "239:             ToastManager.StopThread();",
      "",
      "---------------"
    ],
    "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs": [
      "File: ui/src/ProductConstants.cs -> ui/src/ProductConstants.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "313:             }",
      "322:             FeedbackFormUrl = string.Concat(BaseUrl, \"/r/vpn/client/feedback\", FxAUtmTags);",
      "",
      "[Removed Lines]",
      "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v1\");",
      "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login\");",
      "",
      "[Added Lines]",
      "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v2\");",
      "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login/windows\");",
      "",
      "---------------"
    ],
    "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml": [
      "File: ui/src/UI/Components/Card/Hero/HeroSubtext.xaml -> ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:                             </Setter>",
      "123:                         </DataTrigger>",
      "126:                         <DataTrigger Binding=\"{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HeroSubText}}, Path=(extension:CardExtensions.VpnStability)}\" Value=\"1\">",
      "127:                             <Setter Property=\"Text\">",
      "128:                                 <Setter.Value>",
      "",
      "[Removed Lines]",
      "125:                         <!-- Connection unsable -->",
      "",
      "[Added Lines]",
      "125:                         <!-- Connection unstable -->",
      "",
      "---------------"
    ],
    "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl": [
      "File: ui/src/UI/Resources/Localization/Translations/en-us.ftl -> ui/src/UI/Resources/Localization/Translations/en-us.ftl",
      "--- Hunk 1 ---",
      "[Context before]",
      "128: devices-limit-reached-title = Remove a device",
      "129: devices-limit-reached-content = You've reached your limit. To install the VPN on this device, you'll need to remove one.",
      "130: devices-remove-popup-title = Remove device?",
      "132: devices-remove = Remove device",
      "134: ## Popup",
      "",
      "[Removed Lines]",
      "131: devices-remove-popup-content = Please confirm you would like to remove {$deviceName}.",
      "",
      "[Added Lines]",
      "131: devices-remove-popup-content = Please confirm you would like to remove {$deviceName}. You will need to open the VPN client on the removed device to clear your network settings and access the internet again.",
      "",
      "---------------"
    ],
    "ui/src/UI/Views/Settings/SettingsView.xaml||ui/src/UI/Views/Settings/SettingsView.xaml": [
      "File: ui/src/UI/Views/Settings/SettingsView.xaml -> ui/src/UI/Views/Settings/SettingsView.xaml",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:                 <!-- Launch VPN on startup setting -->",
      "83:                 <Grid HorizontalAlignment=\"Left\" VerticalAlignment=\"Top\" Grid.Row=\"1\" Grid.Column=\"0\">",
      "84:                     <StackPanel Margin=\"0,0,0,8\">",
      "86:                             <CheckBox.Style>",
      "87:                                 <Style BasedOn=\"{StaticResource Checkbox}\" TargetType=\"{x:Type CheckBox}\">",
      "88:                                     <Setter Property=\"IsChecked\" Value=\"False\" />",
      "",
      "[Removed Lines]",
      "85:                         <CheckBox Margin=\"18\" Content=\"{Binding Path=[settings-auto-launch]}\" Click=\"RunOnStartup_Click\">",
      "",
      "[Added Lines]",
      "85:                         <CheckBox Margin=\"18\" Content=\"{Binding Path=[settings-auto-launch]}\" Click=\"RunOnStartup_Click\" Visibility=\"Hidden\">",
      "",
      "---------------"
    ],
    "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs": [
      "File: ui/src/ViewModels/MainWindowViewModel.cs -> ui/src/ViewModels/MainWindowViewModel.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:         {",
      "81:             connectionStatus = new Models.ConnectionStatus",
      "",
      "[Removed Lines]",
      "78:         public MainWindowViewModel()",
      "",
      "[Added Lines]",
      "79:         public MainWindowViewModel(string code)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:             }",
      "103:             {",
      "104:                 InitialViewFrameSourceType = typeof(UI.MainView);",
      "105:             }",
      "",
      "[Removed Lines]",
      "102:             if (Manager.Account.LoginState == FxA.LoginState.LoggedIn && currentDevice != null)",
      "",
      "[Added Lines]",
      "103:             if (code.Length >= 44)",
      "104:             {",
      "105:                 InitialViewFrameSourceType = typeof(UI.OnboardingView5);",
      "106:             }",
      "107:             else if (Manager.Account.LoginState == FxA.LoginState.LoggedIn && currentDevice != null)",
      "",
      "---------------"
    ],
    "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs": [
      "File: ui/src/WCF/IService.cs -> ui/src/WCF/IService.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
      "42:         Response Disconnect();",
      "",
      "[Removed Lines]",
      "49:         [OperationContract]",
      "50:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
      "51:         Response Login(LoginRequest req);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs": [
      "File: ui/src/WCF/Service.cs -> ui/src/WCF/Service.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:             }",
      "119:         }",
      "",
      "[Removed Lines]",
      "126:         public Response Login(LoginRequest req)",
      "127:         {",
      "128:             try",
      "129:             {",
      "130:                 var loginInstance = new FxA.Login();",
      "131:                 var pollInterval = req.PollInterval % 31; // Max 30 seconds, no more",
      "132:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
      "133:                 loginInstance.StartQueryLoginThread(req.VerificationUrl, req.PollInterval, req.ExpiresOn, CancellationToken.None);",
      "134:                 return new Response(200, \"Success\");",
      "135:             }",
      "136:             catch (Exception ex)",
      "137:             {",
      "138:                 return new Response(500, ex.Message);",
      "139:             }",
      "140:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app.manifest||ui/src/app.manifest": [
      "File: ui/src/app.manifest -> ui/src/app.manifest",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:   <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">",
      "5:     <security>",
      "6:       <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">",
      "8:       </requestedPrivileges>",
      "9:     </security>",
      "10:   </trustInfo>",
      "",
      "[Removed Lines]",
      "7:         <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\" />",
      "",
      "[Added Lines]",
      "7:         <requestedExecutionLevel level=\"highestAvailable\" uiAccess=\"false\" />",
      "8:         <!--<requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\" />-->",
      "",
      "---------------"
    ],
    "ui/src/packages.config||ui/src/packages.config": [
      "File: ui/src/packages.config -> ui/src/packages.config",
      "--- Hunk 1 ---",
      "[Context before]",
      "5:   <package id=\"Fluent.Net\" version=\"1.0.31\" targetFramework=\"net472\" />",
      "6:   <package id=\"Fody\" version=\"6.0.0\" targetFramework=\"net46\" developmentDependency=\"true\" />",
      "7:   <package id=\"ini-parser\" version=\"2.5.2\" targetFramework=\"net472\" />",
      "8:   <package id=\"Microsoft.NETCore.Platforms\" version=\"2.2.2\" targetFramework=\"net472\" />",
      "9:   <package id=\"Microsoft.WindowsAPICodePack-Core\" version=\"1.1.0.2\" targetFramework=\"net472\" />",
      "10:   <package id=\"Newtonsoft.Json\" version=\"12.0.2\" targetFramework=\"net472\" />",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8:   <package id=\"Microsoft.IdentityModel.Logging\" version=\"6.7.1\" targetFramework=\"net472\" />",
      "9:   <package id=\"Microsoft.IdentityModel.Tokens\" version=\"6.7.1\" targetFramework=\"net472\" />",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a67e5d366041867e2531ce774395d0a5b2fb1d7f",
      "candidate_info": {
        "commit_hash": "a67e5d366041867e2531ce774395d0a5b2fb1d7f",
        "repo": "mozilla-services/guardian-vpn-windows",
        "commit_url": "https://github.com/mozilla-services/guardian-vpn-windows/commit/a67e5d366041867e2531ce774395d0a5b2fb1d7f",
        "files": [
          "installer/MozillaVPN.wxs",
          "ui/src/Firefox Private Network.csproj",
          "ui/src/FxA/Account.cs",
          "ui/src/FxA/Devices.cs",
          "ui/src/FxA/Login.cs",
          "ui/src/FxA/LoginSessionManager.cs",
          "ui/src/FxA/ServerList/ServerList.cs",
          "ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "ui/src/Main.cs",
          "ui/src/Manager.cs",
          "ui/src/ProductConstants.cs",
          "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
          "ui/src/UI/Resources/Localization/Translations/en-us.ftl",
          "ui/src/UI/Views/Settings/SettingsView.xaml",
          "ui/src/ViewModels/MainWindowViewModel.cs",
          "ui/src/WCF/IService.cs",
          "ui/src/WCF/Service.cs",
          "ui/src/app.manifest",
          "ui/src/packages.config"
        ],
        "message": "New non-polling authentication flow.\n\n- Fixes intermittent hanging during auth\n- Implements PKCE",
        "before_after_code_files": [
          "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
          "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
          "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
          "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
          "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
          "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
          "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "ui/src/Main.cs||ui/src/Main.cs",
          "ui/src/Manager.cs||ui/src/Manager.cs",
          "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
          "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
          "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
          "ui/src/UI/Views/Settings/SettingsView.xaml||ui/src/UI/Views/Settings/SettingsView.xaml",
          "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
          "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
          "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
          "ui/src/app.manifest||ui/src/app.manifest",
          "ui/src/packages.config||ui/src/packages.config"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
            "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
            "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
            "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
            "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
            "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
            "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
            "ui/src/Main.cs||ui/src/Main.cs",
            "ui/src/Manager.cs||ui/src/Manager.cs",
            "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
            "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
            "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
            "ui/src/UI/Views/Settings/SettingsView.xaml||ui/src/UI/Views/Settings/SettingsView.xaml",
            "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
            "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
            "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
            "ui/src/app.manifest||ui/src/app.manifest",
            "ui/src/packages.config||ui/src/packages.config"
          ],
          "candidate": [
            "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
            "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
            "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
            "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
            "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
            "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
            "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
            "ui/src/Main.cs||ui/src/Main.cs",
            "ui/src/Manager.cs||ui/src/Manager.cs",
            "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
            "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
            "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
            "ui/src/UI/Views/Settings/SettingsView.xaml||ui/src/UI/Views/Settings/SettingsView.xaml",
            "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
            "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
            "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
            "ui/src/app.manifest||ui/src/app.manifest",
            "ui/src/packages.config||ui/src/packages.config"
          ]
        }
      },
      "candidate_diff": {
        "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs": [
          "File: installer/MozillaVPN.wxs -> installer/MozillaVPN.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_70x70.png\" />",
          "87:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_150x150.png\" />",
          "89:     <!-- Broker Service -->",
          "90:     <ServiceInstall",
          "91:      Type=\"ownProcess\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:         <!-- Custom URL protocol for handling the PKCE auth flow -->",
          "90:         <RegistryKey Root=\"HKCR\" Key=\"mozilla-vpn\">",
          "91:           <RegistryValue Type=\"string\" Name=\"URL Protocol\" Value=\"mozilla-vpn\"/>",
          "92:           <RegistryValue Type=\"string\" Value=\"URL:mozilla-vpn Protocol\"/>",
          "93:           <RegistryKey Key=\"DefaultIcon\">",
          "94:             <RegistryValue Type=\"string\" Value=\"MozillaVPN.exe\" />",
          "95:           </RegistryKey>",
          "96:           <RegistryKey Key=\"shell\\open\\command\">",
          "97:             <RegistryValue Type=\"string\" Value=\"&quot;C:\\Program Files\\Mozilla\\Mozilla VPN\\MozillaVPN.exe&quot; &quot;%1&quot;\" />",
          "98:           </RegistryKey>",
          "99:         </RegistryKey>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:    </Component>",
          "113:   </ComponentGroup>",
          "116:    Merge modules",
          "117:   -->",
          "118:   <DirectoryRef Id=\"MozillaVPNFolder\">",
          "",
          "[Removed Lines]",
          "115:   <!--",
          "",
          "[Added Lines]",
          "127:     <!--",
          "",
          "---------------"
        ],
        "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs": [
          "File: ui/src/FxA/Account.cs -> ui/src/FxA/Account.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:             }",
          "51:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         public static string OriginalApiVersion { get; set; } = \"/api/v1\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         public bool ProcessLogin(string fxaJson)",
          "74:         {",
          "79:             Manager.MainWindowViewModel.NewUserSignIn = true;",
          "",
          "[Removed Lines]",
          "76:             Manager.Account.Config = new FxA.Config(fxaJson);",
          "",
          "[Added Lines]",
          "81:             Manager.Account.Config = new Config(fxaJson);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:             Manager.Account.Config.WriteFxAUserToFile(ProductConstants.FxAUserFile);",
          "93:             Manager.Account.Avatar.InitializeCache(avatarUrl: Config.FxALogin.User.Avatar);",
          "98:             var deviceAddResponse = devices.AddDevice(deviceName, keys.Public);",
          "",
          "[Removed Lines]",
          "90:             Manager.Account.LoginState = FxA.LoginState.LoggedIn;",
          "96:             var devices = new FxA.Devices();",
          "97:             var deviceName = string.Format(\"{0} ({1} {2})\", System.Environment.MachineName, System.Environment.OSVersion.Platform, System.Environment.OSVersion.Version);",
          "",
          "[Added Lines]",
          "95:             Manager.Account.LoginState = LoginState.LoggedIn;",
          "101:             var devices = new Devices();",
          "102:             var deviceName = string.Format(\"{0} ({1} {2})\", Environment.MachineName, Environment.OSVersion.Platform, Environment.OSVersion.Version);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:         public JSONStructures.User GetAccountDetails()",
          "161:         {",
          "165:             var response = api.SendRequest();",
          "",
          "[Removed Lines]",
          "162:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/account\", RestSharp.Method.GET);",
          "",
          "[Added Lines]",
          "167:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{OriginalApiVersion}/vpn/account\", RestSharp.Method.GET);",
          "",
          "---------------"
        ],
        "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs": [
          "File: ui/src/FxA/Devices.cs -> ui/src/FxA/Devices.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using System;",
          "6: using System.Collections.Generic;",
          "7: using System.Threading.Tasks;",
          "8: using Newtonsoft.Json;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: using System.IO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         public JSONStructures.Device AddDevice(string deviceName, string publicKey)",
          "24:         {",
          "26:             api.AddPostBody(new Dictionary<string, string> { { \"name\", deviceName }, { \"pubkey\", publicKey } });",
          "",
          "[Removed Lines]",
          "25:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/device\", RestSharp.Method.POST);",
          "",
          "[Added Lines]",
          "26:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/device\", RestSharp.Method.POST);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:             var sanitizedDevicePublicKey = System.Web.HttpUtility.UrlEncode(publicKey);",
          "77:             var response = api.SendRequest();",
          "",
          "[Removed Lines]",
          "74:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/device/\" + sanitizedDevicePublicKey, RestSharp.Method.DELETE);",
          "",
          "[Added Lines]",
          "75:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/device/\" + sanitizedDevicePublicKey, RestSharp.Method.DELETE);",
          "",
          "---------------"
        ],
        "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs": [
          "File: ui/src/FxA/Login.cs -> ui/src/FxA/Login.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using System;",
          "6: using System.Diagnostics;",
          "7: using System.Linq;",
          "8: using System.Threading;",
          "9: using System.Windows;",
          "10: using Newtonsoft.Json;",
          "12: namespace FirefoxPrivateNetwork.FxA",
          "13: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: using System.Collections.Generic;",
          "8: using System.IO;",
          "10: using System.Security.Cryptography;",
          "11: using System.Security.Permissions;",
          "12: using System.Text;",
          "14: using System.Web;",
          "16: using Microsoft.IdentityModel.Tokens;",
          "18: using RestSharp.Extensions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     public class Login",
          "18:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:         private static string codeVerifierPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);",
          "28:         private static string codeVerifierFile = \"moz_gen_cvf.txt\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:         private event LoginResultHandler LoginResultEvent;",
          "75:         {",
          "97:             try",
          "98:             {",
          "101:             }",
          "102:             catch (Exception e)",
          "103:             {",
          "",
          "[Removed Lines]",
          "42:         public JSONStructures.FxALoginURLs GetLoginURLs()",
          "43:         {",
          "44:             var api = new ApiRequest(string.Empty, \"/vpn/login\", RestSharp.Method.POST);",
          "45:             JSONStructures.FxALoginURLs loginURLs;",
          "48:             var response = api.SendRequest();",
          "50:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "51:             {",
          "52:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
          "53:                 return null;",
          "54:             }",
          "56:             try",
          "57:             {",
          "58:                 loginURLs = JsonConvert.DeserializeObject<JSONStructures.FxALoginURLs>(response.Content);",
          "59:                 return loginURLs;",
          "60:             }",
          "61:             catch (Exception e)",
          "62:             {",
          "63:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
          "64:             }",
          "66:             return null;",
          "67:         }",
          "74:         public string QueryRawLoginState(string tokenURL)",
          "76:             var api = new ApiRequest(string.Empty, tokenURL, RestSharp.Method.GET);",
          "79:             var response = api.SendRequest();",
          "81:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "82:             {",
          "83:                 ErrorHandling.ErrorHandler.Handle(\"User has not logged in yet\", ErrorHandling.LogLevel.Debug);",
          "84:                 return null;",
          "85:             }",
          "87:             return response.Content;",
          "88:         }",
          "95:         public JSONStructures.FxALogin ParseLoginState(string jsonContents)",
          "96:         {",
          "99:                 var loginData = JsonConvert.DeserializeObject<JSONStructures.FxALogin>(jsonContents);",
          "100:                 return loginData;",
          "",
          "[Added Lines]",
          "52:         public static string ApiVersion { get; set; } = \"/api/v2\";",
          "58:         public JSONStructures.FxALoginURLs GetLoginURL()",
          "61:             string codeVerifier = GetUniqueToken(44);",
          "64:             File.WriteAllText(Path.Combine(codeVerifierPath, codeVerifierFile), codeVerifier);",
          "68:             string codeChallenge = codeVerifier;",
          "71:             JSONStructures.FxALoginURLs loginURLs = new JSONStructures.FxALoginURLs();",
          "76:                 loginURLs.LoginUrl = $\"{ProductConstants.BaseUrl}{ApiVersion}/vpn/login/windows?code_challenge={codeChallenge}&code_challenge_method=plain\";",
          "78:                 return loginURLs;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:         {",
          "135:             try",
          "136:             {",
          "139:                 {",
          "140:                     return false;",
          "141:                 }",
          "153:             }",
          "154:             catch (Exception e)",
          "155:             {",
          "",
          "[Removed Lines]",
          "133:         public bool StartLogin(CancellationToken cancelToken)",
          "137:                 var loginURLs = GetLoginURLs();",
          "138:                 if (loginURLs == null)",
          "143:                 var pollInterval = loginURLs.PollInterval % 31; // Max 30 seconds, no more",
          "144:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
          "145:                 StartQueryLoginThread(loginURLs.VerificationUrl, loginURLs.PollInterval, loginURLs.ExpiresOn, cancelToken);",
          "148:                 OpenBrowser(loginURLs.LoginUrl);",
          "151:                 UI.MainWindow mainWindow = (UI.MainWindow)Application.Current.MainWindow;",
          "152:                 mainWindow.NavigateToView(new FirefoxPrivateNetwork.UI.VerifyAccountView(loginURLs.LoginUrl), UI.MainWindow.SlideDirection.Left);",
          "",
          "[Added Lines]",
          "110:         public bool StartLogin()",
          "115:                 JSONStructures.FxALoginURLs loginURL = GetLoginURL();",
          "117:                 if (loginURL == null)",
          "123:                 ApiRequest api = new ApiRequest(string.Empty, loginURL.LoginUrl, RestSharp.Method.GET);",
          "126:                 var response = api.SendRequest();",
          "128:                 if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "129:                 {",
          "130:                     ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
          "131:                     return false;",
          "132:                 }",
          "134:                 Manager.Account.LoginState = LoginState.LoggingIn;",
          "137:                 OpenBrowser(loginURL.LoginUrl);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:         }",
          "172:         {",
          "174:             {",
          "178:         }",
          "188:         {",
          "228:                     {",
          "231:                         {",
          "247:                         }",
          "253:                 }",
          "256:             }",
          "259:         }",
          "260:     }",
          "261: }",
          "",
          "[Removed Lines]",
          "171:         public void StartQueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
          "173:             var loginThread = new Thread(() => QueryLoginThread(queryUri, timeoutSeconds, expiresAt, cancelToken))",
          "175:                 IsBackground = true,",
          "176:             };",
          "177:             loginThread.Start();",
          "187:         private void QueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
          "189:             while (Manager.Account.LoginState == FxA.LoginState.LoggingIn && DateTime.Compare(DateTime.UtcNow, expiresAt) < 0)",
          "190:             {",
          "191:                 try",
          "192:                 {",
          "193:                     var queryRawData = QueryRawLoginState(queryUri);",
          "195:                     if (cancelToken.IsCancellationRequested)",
          "196:                     {",
          "197:                         break;",
          "198:                     }",
          "200:                     if (queryRawData == null)",
          "201:                     {",
          "202:                         Thread.Sleep(TimeSpan.FromSeconds(timeoutSeconds));",
          "203:                         continue;",
          "204:                     }",
          "206:                     var queryData = ParseLoginState(queryRawData);",
          "208:                     if (queryData.User == null || queryData.User.Subscriptions == null || queryData.User.Subscriptions.Vpn == null)",
          "209:                     {",
          "210:                         Manager.Account.LoginState = LoginState.LoggedOut;",
          "211:                         break;",
          "212:                     }",
          "214:                     if (!queryData.User.Subscriptions.Vpn.Active)",
          "215:                     {",
          "216:                         Manager.Account.LoginState = LoginState.LoggedOut;",
          "217:                         break;",
          "218:                     }",
          "220:                     var processLoginResult = Manager.Account.ProcessLogin(queryRawData);",
          "221:                     Manager.Account.LoginState = LoginState.LoggedIn;",
          "222:                     Manager.StartUIUpdaters();",
          "224:                     var maxDevicesReached = !processLoginResult && Manager.Account.Config.FxALogin.User.Devices.Count() >= Manager.Account.Config.FxALogin.User.MaxDevices;",
          "226:                     Cache.FxAServerList.RetrieveRemoteServerList();",
          "227:                     Application.Current.Dispatcher.Invoke(() =>",
          "229:                         var owner = Application.Current.MainWindow;",
          "230:                         if (owner != null)",
          "232:                             if (!Manager.MustUpdate)",
          "233:                             {",
          "234:                                 if (maxDevicesReached)",
          "235:                                 {",
          "236:                                     ((UI.MainWindow)owner).NavigateToView(new UI.DevicesView(deviceLimitReached: true, fxaJson: queryRawData), UI.MainWindow.SlideDirection.Left);",
          "237:                                 }",
          "238:                                 else",
          "239:                                 {",
          "240:                                     ((UI.MainWindow)owner).NavigateToView(new UI.OnboardingView5(), UI.MainWindow.SlideDirection.Left);",
          "241:                                 }",
          "242:                             }",
          "244:                             ((UI.MainWindow)owner).Show();",
          "245:                             ((UI.MainWindow)owner).WindowState = WindowState.Normal;",
          "246:                             ((UI.MainWindow)owner).Activate();",
          "248:                     });",
          "249:                 }",
          "250:                 catch (Exception e)",
          "251:                 {",
          "252:                     ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Debug);",
          "255:                 Thread.Sleep(TimeSpan.FromSeconds(5));",
          "258:             LoginResultEvent?.Invoke(this, this, Manager.Account.LoginState);",
          "",
          "[Added Lines]",
          "153:         public void VerifyUserLogin(string code)",
          "156:             ApiRequest api = new ApiRequest(string.Empty, $\"{ProductConstants.BaseUrl}{ApiVersion}/vpn/login/verify\", RestSharp.Method.POST);",
          "159:             string code_verifier = File.ReadAllText(Path.Combine(codeVerifierPath, codeVerifierFile));",
          "162:             Dictionary<string, string> postBody = new Dictionary<string, string>();",
          "163:             postBody.Add(\"code\", code);",
          "164:             postBody.Add(\"code_verifier\", code_verifier);",
          "165:             api.AddPostBody(postBody);",
          "168:             var response = api.SendRequest();",
          "170:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "172:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
          "173:                 return;",
          "174:             }",
          "177:             Manager.Account.ProcessLogin(response.Content);",
          "185:         private static string GetHashSha256(string text)",
          "187:             SHA256Managed hashTool = new SHA256Managed();",
          "189:             byte[] phraseAsByte = Encoding.UTF8.GetBytes(string.Concat(text));",
          "190:             byte[] encryptedBytes = hashTool.ComputeHash(phraseAsByte);",
          "192:             hashTool.Clear();",
          "194:             string value = Convert.ToBase64String(encryptedBytes);",
          "196:             return value;",
          "197:         }",
          "205:         private static string GetUniqueToken(int length, string chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_\")",
          "206:         {",
          "207:             using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())",
          "208:             {",
          "209:                 byte[] data = new byte[length];",
          "213:                 byte[] buffer = null;",
          "216:                 int maxRandom = byte.MaxValue - ((byte.MaxValue + 1) % chars.Length);",
          "218:                 crypto.GetBytes(data);",
          "220:                 char[] result = new char[length];",
          "222:                 for (int i = 0; i < length; i++)",
          "223:                 {",
          "224:                     byte value = data[i];",
          "226:                     while (value > maxRandom)",
          "228:                         if (buffer == null)",
          "230:                             buffer = new byte[1];",
          "233:                         crypto.GetBytes(buffer);",
          "234:                         value = buffer[0];",
          "235:                     }",
          "237:                     result[i] = chars[value % chars.Length];",
          "240:                 return new string(result);",
          "",
          "---------------"
        ],
        "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs": [
          "File: ui/src/FxA/LoginSessionManager.cs -> ui/src/FxA/LoginSessionManager.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:                 sessions.Add(login, tokenSource);",
          "36:                 {",
          "37:                     CancelCurrentSession();",
          "38:                 }",
          "",
          "[Removed Lines]",
          "35:                 if (!login.StartLogin(tokenSource.Token))",
          "",
          "[Added Lines]",
          "35:                 if (!login.StartLogin())",
          "",
          "---------------"
        ],
        "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs": [
          "File: ui/src/FxA/ServerList/ServerList.cs -> ui/src/FxA/ServerList/ServerList.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         public bool RetrieveRemoteServerList()",
          "175:         {",
          "177:             var response = api.SendRequest();",
          "178:             if (response == null)",
          "179:             {",
          "",
          "[Removed Lines]",
          "176:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/servers\", Method.GET);",
          "",
          "[Added Lines]",
          "176:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/servers\", Method.GET);",
          "",
          "---------------"
        ],
        "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs": [
          "File: ui/src/JSONStructures/Login/FxALoginURLs.cs -> ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         [JsonProperty(\"verification_url\")]",
          "25:         public string VerificationUrl { get; set; }",
          "38:     }",
          "39: }",
          "",
          "[Removed Lines]",
          "30:         [JsonProperty(\"expires_on\")]",
          "31:         public DateTime ExpiresOn { get; set; }",
          "36:         [JsonProperty(\"poll_interval\")]",
          "37:         public int PollInterval { get; set; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/Main.cs||ui/src/Main.cs": [
          "File: ui/src/Main.cs -> ui/src/Main.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using System;",
          "6: using System.Linq;",
          "7: using System.ServiceProcess;",
          "8: using System.Threading;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: using System.Collections.Generic;",
          "7: using System.Diagnostics;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.StyleCop.CSharp.DocumentationRules\", \"SA1649:FileNameMustMatchTypeName\", Justification = \"Default C# behavior.\")]",
          "21:     {",
          "",
          "[Removed Lines]",
          "20:     internal class Entry : System.Windows.Application",
          "25:         private static readonly Mutex RunOnceMutex = new Mutex(false, string.Concat(@\"Local\\\", ProductConstants.GUID));",
          "",
          "[Added Lines]",
          "22:     internal class Entry : Application",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:         {",
          "33:             bool ranOnStartup = false;",
          "36:             {",
          "38:                 if (args.First().ToLower() == \"broker\")",
          "",
          "[Removed Lines]",
          "35:             if (args.Count() == 1)",
          "",
          "[Added Lines]",
          "32:             List<Process> processes = Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName).ToList();",
          "34:             if (args.Count() == 1 && !args[0].Contains(\"mozilla-vpn:\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:             }",
          "63:             {",
          "67:                 {",
          "69:                 }",
          "72:             }",
          "",
          "[Removed Lines]",
          "62:             if (!RunOnceMutex.WaitOne(TimeSpan.Zero, true))",
          "65:                 var runningWindow = User32.FindWindow(ProductConstants.TrayWindowClassName, string.Empty);",
          "66:                 if (runningWindow != IntPtr.Zero)",
          "68:                     User32.SendMessage(runningWindow, User32.WmShow, IntPtr.Zero, string.Empty);",
          "71:                 Environment.Exit(1);",
          "",
          "[Added Lines]",
          "61:             if (processes.Count > 1)",
          "63:                 processes.Sort((x, y) => DateTime.Compare(y.StartTime, x.StartTime));",
          "65:                 if (processes.Count > 2)",
          "67:                     for (int i = 1; i <= processes.Count - 2; i++)",
          "68:                     {",
          "69:                         processes[i].Kill();",
          "70:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:                 app.InitializeComponent();",
          "87:                 Manager.MainWindowViewModel.RanOnStartup = ranOnStartup;",
          "",
          "[Removed Lines]",
          "84:                 Manager.Initialize();",
          "",
          "[Added Lines]",
          "85:                 if (args.Count() == 1 && args[0].Contains(\"mozilla-vpn:\"))",
          "86:                 {",
          "88:                     Manager.Initialize(args.First());",
          "89:                     VerifyUser(args.First());",
          "90:                 }",
          "91:                 else",
          "92:                 {",
          "93:                     Manager.Initialize();",
          "94:                 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:                 Environment.Exit(1);",
          "137:             }",
          "138:         }",
          "139:     }",
          "140: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:         private static void VerifyUser(string args)",
          "158:         {",
          "159:             try",
          "160:             {",
          "161:                 string code = args.Substring(args.IndexOf(\"code=\") + 5);",
          "163:                 if (code != null && code.Length >= 44)",
          "164:                 {",
          "165:                     FxA.Login verifyUser = new FxA.Login();",
          "167:                     verifyUser.VerifyUserLogin(code);",
          "168:                 }",
          "169:             }",
          "170:             catch (Exception e)",
          "171:             {",
          "172:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
          "173:                 Environment.Exit(1);",
          "174:             }",
          "175:         }",
          "",
          "---------------"
        ],
        "ui/src/Manager.cs||ui/src/Manager.cs": [
          "File: ui/src/Manager.cs -> ui/src/Manager.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         {",
          "116:             InitializeSettings();",
          "117:             InitializeTranslationService();",
          "",
          "[Removed Lines]",
          "114:         public static void Initialize()",
          "",
          "[Added Lines]",
          "115:         public static void Initialize(string code = \"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:             InitializeServerListCache();",
          "120:             InitializeTunnel();",
          "121:             InitializeAccount();",
          "123:             InitializeWlanWatcher();",
          "124:             InitializeCaptivePortalDetector();",
          "125:             InitializeIpInfo();",
          "",
          "[Removed Lines]",
          "122:             InitializeViewModels();",
          "",
          "[Added Lines]",
          "123:             InitializeViewModels(code);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:         {",
          "173:         }",
          "",
          "[Removed Lines]",
          "170:         public static void InitializeViewModels()",
          "172:             MainWindowViewModel = new ViewModels.MainWindowViewModel();",
          "",
          "[Added Lines]",
          "172:         public static void InitializeViewModels(string code = \"\")",
          "174:             MainWindowViewModel = new ViewModels.MainWindowViewModel(code);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:             ConnectionStatusUpdater.StopThread();",
          "234:             ServerListUpdater.StopThread();",
          "235:             AccountInfoUpdater.StopTask();",
          "236:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:             VersionUpdater.StopTask();",
          "239:             ToastManager.StopThread();",
          "",
          "---------------"
        ],
        "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs": [
          "File: ui/src/ProductConstants.cs -> ui/src/ProductConstants.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:             }",
          "322:             FeedbackFormUrl = string.Concat(BaseUrl, \"/r/vpn/client/feedback\", FxAUtmTags);",
          "",
          "[Removed Lines]",
          "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v1\");",
          "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login\");",
          "",
          "[Added Lines]",
          "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v2\");",
          "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login/windows\");",
          "",
          "---------------"
        ],
        "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml": [
          "File: ui/src/UI/Components/Card/Hero/HeroSubtext.xaml -> ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:                             </Setter>",
          "123:                         </DataTrigger>",
          "126:                         <DataTrigger Binding=\"{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HeroSubText}}, Path=(extension:CardExtensions.VpnStability)}\" Value=\"1\">",
          "127:                             <Setter Property=\"Text\">",
          "128:                                 <Setter.Value>",
          "",
          "[Removed Lines]",
          "125:                         <!-- Connection unsable -->",
          "",
          "[Added Lines]",
          "125:                         <!-- Connection unstable -->",
          "",
          "---------------"
        ],
        "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl": [
          "File: ui/src/UI/Resources/Localization/Translations/en-us.ftl -> ui/src/UI/Resources/Localization/Translations/en-us.ftl",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: devices-limit-reached-title = Remove a device",
          "129: devices-limit-reached-content = You've reached your limit. To install the VPN on this device, you'll need to remove one.",
          "130: devices-remove-popup-title = Remove device?",
          "132: devices-remove = Remove device",
          "134: ## Popup",
          "",
          "[Removed Lines]",
          "131: devices-remove-popup-content = Please confirm you would like to remove {$deviceName}.",
          "",
          "[Added Lines]",
          "131: devices-remove-popup-content = Please confirm you would like to remove {$deviceName}. You will need to open the VPN client on the removed device to clear your network settings and access the internet again.",
          "",
          "---------------"
        ],
        "ui/src/UI/Views/Settings/SettingsView.xaml||ui/src/UI/Views/Settings/SettingsView.xaml": [
          "File: ui/src/UI/Views/Settings/SettingsView.xaml -> ui/src/UI/Views/Settings/SettingsView.xaml",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                 <!-- Launch VPN on startup setting -->",
          "83:                 <Grid HorizontalAlignment=\"Left\" VerticalAlignment=\"Top\" Grid.Row=\"1\" Grid.Column=\"0\">",
          "84:                     <StackPanel Margin=\"0,0,0,8\">",
          "86:                             <CheckBox.Style>",
          "87:                                 <Style BasedOn=\"{StaticResource Checkbox}\" TargetType=\"{x:Type CheckBox}\">",
          "88:                                     <Setter Property=\"IsChecked\" Value=\"False\" />",
          "",
          "[Removed Lines]",
          "85:                         <CheckBox Margin=\"18\" Content=\"{Binding Path=[settings-auto-launch]}\" Click=\"RunOnStartup_Click\">",
          "",
          "[Added Lines]",
          "85:                         <CheckBox Margin=\"18\" Content=\"{Binding Path=[settings-auto-launch]}\" Click=\"RunOnStartup_Click\" Visibility=\"Hidden\">",
          "",
          "---------------"
        ],
        "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs": [
          "File: ui/src/ViewModels/MainWindowViewModel.cs -> ui/src/ViewModels/MainWindowViewModel.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         {",
          "81:             connectionStatus = new Models.ConnectionStatus",
          "",
          "[Removed Lines]",
          "78:         public MainWindowViewModel()",
          "",
          "[Added Lines]",
          "79:         public MainWindowViewModel(string code)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:             }",
          "103:             {",
          "104:                 InitialViewFrameSourceType = typeof(UI.MainView);",
          "105:             }",
          "",
          "[Removed Lines]",
          "102:             if (Manager.Account.LoginState == FxA.LoginState.LoggedIn && currentDevice != null)",
          "",
          "[Added Lines]",
          "103:             if (code.Length >= 44)",
          "104:             {",
          "105:                 InitialViewFrameSourceType = typeof(UI.OnboardingView5);",
          "106:             }",
          "107:             else if (Manager.Account.LoginState == FxA.LoginState.LoggedIn && currentDevice != null)",
          "",
          "---------------"
        ],
        "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs": [
          "File: ui/src/WCF/IService.cs -> ui/src/WCF/IService.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
          "42:         Response Disconnect();",
          "",
          "[Removed Lines]",
          "49:         [OperationContract]",
          "50:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
          "51:         Response Login(LoginRequest req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs": [
          "File: ui/src/WCF/Service.cs -> ui/src/WCF/Service.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             }",
          "119:         }",
          "",
          "[Removed Lines]",
          "126:         public Response Login(LoginRequest req)",
          "127:         {",
          "128:             try",
          "129:             {",
          "130:                 var loginInstance = new FxA.Login();",
          "131:                 var pollInterval = req.PollInterval % 31; // Max 30 seconds, no more",
          "132:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
          "133:                 loginInstance.StartQueryLoginThread(req.VerificationUrl, req.PollInterval, req.ExpiresOn, CancellationToken.None);",
          "134:                 return new Response(200, \"Success\");",
          "135:             }",
          "136:             catch (Exception ex)",
          "137:             {",
          "138:                 return new Response(500, ex.Message);",
          "139:             }",
          "140:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app.manifest||ui/src/app.manifest": [
          "File: ui/src/app.manifest -> ui/src/app.manifest",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">",
          "5:     <security>",
          "6:       <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">",
          "8:       </requestedPrivileges>",
          "9:     </security>",
          "10:   </trustInfo>",
          "",
          "[Removed Lines]",
          "7:         <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\" />",
          "",
          "[Added Lines]",
          "7:         <requestedExecutionLevel level=\"highestAvailable\" uiAccess=\"false\" />",
          "8:         <!--<requestedExecutionLevel level=\"requireAdministrator\" uiAccess=\"false\" />-->",
          "",
          "---------------"
        ],
        "ui/src/packages.config||ui/src/packages.config": [
          "File: ui/src/packages.config -> ui/src/packages.config",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   <package id=\"Fluent.Net\" version=\"1.0.31\" targetFramework=\"net472\" />",
          "6:   <package id=\"Fody\" version=\"6.0.0\" targetFramework=\"net46\" developmentDependency=\"true\" />",
          "7:   <package id=\"ini-parser\" version=\"2.5.2\" targetFramework=\"net472\" />",
          "8:   <package id=\"Microsoft.NETCore.Platforms\" version=\"2.2.2\" targetFramework=\"net472\" />",
          "9:   <package id=\"Microsoft.WindowsAPICodePack-Core\" version=\"1.1.0.2\" targetFramework=\"net472\" />",
          "10:   <package id=\"Newtonsoft.Json\" version=\"12.0.2\" targetFramework=\"net472\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:   <package id=\"Microsoft.IdentityModel.Logging\" version=\"6.7.1\" targetFramework=\"net472\" />",
          "9:   <package id=\"Microsoft.IdentityModel.Tokens\" version=\"6.7.1\" targetFramework=\"net472\" />",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c8499df8fca00b660a419c353c35717fe910c45",
      "candidate_info": {
        "commit_hash": "4c8499df8fca00b660a419c353c35717fe910c45",
        "repo": "mozilla-services/guardian-vpn-windows",
        "commit_url": "https://github.com/mozilla-services/guardian-vpn-windows/commit/4c8499df8fca00b660a419c353c35717fe910c45",
        "files": [
          "installer/MozillaVPN.wxs",
          "ui/src/Firefox Private Network.csproj",
          "ui/src/FxA/Login.cs",
          "ui/src/FxA/LoginSessionManager.cs",
          "ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "ui/src/Main.cs",
          "ui/src/Manager.cs",
          "ui/src/ProductConstants.cs",
          "ui/src/ViewModels/MainWindowViewModel.cs",
          "ui/src/WCF/IService.cs",
          "ui/src/WCF/Service.cs",
          "ui/src/packages.config"
        ],
        "message": "Revert \"New non-polling authentication flow.\"\n\nThis reverts commit b516b46d579ca42fe3c0d1edefa4ec65cdf826ca.",
        "before_after_code_files": [
          "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
          "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
          "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
          "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "ui/src/Main.cs||ui/src/Main.cs",
          "ui/src/Manager.cs||ui/src/Manager.cs",
          "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
          "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
          "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
          "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
          "ui/src/packages.config||ui/src/packages.config"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
            "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
            "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
            "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
            "ui/src/Main.cs||ui/src/Main.cs",
            "ui/src/Manager.cs||ui/src/Manager.cs",
            "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
            "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
            "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
            "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
            "ui/src/packages.config||ui/src/packages.config"
          ],
          "candidate": [
            "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
            "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs",
            "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs",
            "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
            "ui/src/Main.cs||ui/src/Main.cs",
            "ui/src/Manager.cs||ui/src/Manager.cs",
            "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
            "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
            "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
            "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs",
            "ui/src/packages.config||ui/src/packages.config"
          ]
        }
      },
      "candidate_diff": {
        "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs": [
          "File: installer/MozillaVPN.wxs -> installer/MozillaVPN.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_70x70.png\" />",
          "87:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_150x150.png\" />",
          "101:     <!-- Broker Service -->",
          "102:     <ServiceInstall",
          "103:      Type=\"ownProcess\"",
          "",
          "[Removed Lines]",
          "89:         <!-- Custom URL protocol for handling the PKCE auth flow -->",
          "90:         <RegistryKey Root=\"HKCR\" Key=\"mozilla-vpn\">",
          "91:           <RegistryValue Type=\"string\" Name=\"URL Protocol\" Value=\"mozilla-vpn\"/>",
          "92:           <RegistryValue Type=\"string\" Value=\"URL:mozilla-vpn Protocol\"/>",
          "93:           <RegistryKey Key=\"DefaultIcon\">",
          "94:             <RegistryValue Type=\"string\" Value=\"MozillaVPN.exe\" />",
          "95:           </RegistryKey>",
          "96:           <RegistryKey Key=\"shell\\open\\command\">",
          "97:             <RegistryValue Type=\"string\" Value=\"&quot;C:\\Program Files\\Mozilla\\Mozilla VPN\\MozillaVPN.exe&quot; &quot;%1&quot;\" />",
          "98:           </RegistryKey>",
          "99:         </RegistryKey>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:    </Component>",
          "125:   </ComponentGroup>",
          "128:    Merge modules",
          "129:   -->",
          "130:   <DirectoryRef Id=\"MozillaVPNFolder\">",
          "",
          "[Removed Lines]",
          "127:     <!--",
          "",
          "[Added Lines]",
          "115:   <!--",
          "",
          "---------------"
        ],
        "ui/src/FxA/Login.cs||ui/src/FxA/Login.cs": [
          "File: ui/src/FxA/Login.cs -> ui/src/FxA/Login.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using System;",
          "7: using System.Diagnostics;",
          "9: using System.Linq;",
          "13: using System.Threading;",
          "15: using System.Windows;",
          "17: using Newtonsoft.Json;",
          "20: namespace FirefoxPrivateNetwork.FxA",
          "21: {",
          "",
          "[Removed Lines]",
          "6: using System.Collections.Generic;",
          "8: using System.IO;",
          "10: using System.Security.Cryptography;",
          "11: using System.Security.Permissions;",
          "12: using System.Text;",
          "14: using System.Web;",
          "16: using Microsoft.IdentityModel.Tokens;",
          "18: using RestSharp.Extensions;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     public class Login",
          "26:     {",
          "",
          "[Removed Lines]",
          "27:         private static string codeVerifierPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);",
          "28:         private static string codeVerifierFile = \"moz_gen_cvf.txt\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:         private event LoginResultHandler LoginResultEvent;",
          "66:         {",
          "79:             try",
          "80:             {",
          "85:             }",
          "86:             catch (Exception e)",
          "87:             {",
          "",
          "[Removed Lines]",
          "54:         public static string BaseUrl { get; set; } = \"https://stage-vpn.guardian.nonprod.cloudops.mozgcp.net\";",
          "59:         public static string ApiVersion { get; set; } = \"/api/v2\";",
          "65:         public JSONStructures.FxALoginURLs GetLoginURL()",
          "68:             string codeVerifier = GetUniqueToken(44);",
          "71:             File.WriteAllText(Path.Combine(codeVerifierPath, codeVerifierFile), codeVerifier);",
          "74:             string codeChallenge = Base64UrlEncoder.Encode(GetHashSha256(codeVerifier));",
          "77:             JSONStructures.FxALoginURLs loginURLs = new JSONStructures.FxALoginURLs();",
          "82:                 loginURLs.LoginUrl = $\"{BaseUrl}{ApiVersion}/vpn/login/windows?code_challenge={codeChallenge}&code_challenge_method=S256\";",
          "84:                 return loginURLs;",
          "",
          "[Added Lines]",
          "42:         public JSONStructures.FxALoginURLs GetLoginURLs()",
          "43:         {",
          "44:             var api = new ApiRequest(string.Empty, \"/vpn/login\", RestSharp.Method.POST);",
          "45:             JSONStructures.FxALoginURLs loginURLs;",
          "48:             var response = api.SendRequest();",
          "50:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "51:             {",
          "52:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
          "53:                 return null;",
          "54:             }",
          "56:             try",
          "57:             {",
          "58:                 loginURLs = JsonConvert.DeserializeObject<JSONStructures.FxALoginURLs>(response.Content);",
          "59:                 return loginURLs;",
          "60:             }",
          "61:             catch (Exception e)",
          "62:             {",
          "63:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
          "64:             }",
          "66:             return null;",
          "67:         }",
          "74:         public string QueryRawLoginState(string tokenURL)",
          "76:             var api = new ApiRequest(string.Empty, tokenURL, RestSharp.Method.GET);",
          "79:             var response = api.SendRequest();",
          "81:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "82:             {",
          "83:                 ErrorHandling.ErrorHandler.Handle(\"User has not logged in yet\", ErrorHandling.LogLevel.Debug);",
          "84:                 return null;",
          "85:             }",
          "87:             return response.Content;",
          "88:         }",
          "95:         public JSONStructures.FxALogin ParseLoginState(string jsonContents)",
          "96:         {",
          "99:                 var loginData = JsonConvert.DeserializeObject<JSONStructures.FxALogin>(jsonContents);",
          "100:                 return loginData;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         {",
          "118:             try",
          "119:             {",
          "124:                 {",
          "125:                     return false;",
          "126:                 }",
          "144:             }",
          "145:             catch (Exception e)",
          "146:             {",
          "",
          "[Removed Lines]",
          "116:         public bool StartLogin()",
          "121:                 JSONStructures.FxALoginURLs loginURL = GetLoginURL();",
          "123:                 if (loginURL == null)",
          "129:                 ApiRequest api = new ApiRequest(string.Empty, loginURL.LoginUrl, RestSharp.Method.GET);",
          "132:                 var response = api.SendRequest();",
          "134:                 if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "135:                 {",
          "136:                     ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
          "137:                     return false;",
          "138:                 }",
          "140:                 Manager.Account.LoginState = LoginState.LoggingIn;",
          "143:                 OpenBrowser(loginURL.LoginUrl);",
          "",
          "[Added Lines]",
          "133:         public bool StartLogin(CancellationToken cancelToken)",
          "137:                 var loginURLs = GetLoginURLs();",
          "138:                 if (loginURLs == null)",
          "143:                 var pollInterval = loginURLs.PollInterval % 31; // Max 30 seconds, no more",
          "144:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
          "145:                 StartQueryLoginThread(loginURLs.VerificationUrl, loginURLs.PollInterval, loginURLs.ExpiresOn, cancelToken);",
          "148:                 OpenBrowser(loginURLs.LoginUrl);",
          "151:                 UI.MainWindow mainWindow = (UI.MainWindow)Application.Current.MainWindow;",
          "152:                 mainWindow.NavigateToView(new FirefoxPrivateNetwork.UI.VerifyAccountView(loginURLs.LoginUrl), UI.MainWindow.SlideDirection.Left);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:         }",
          "160:         {",
          "177:             {",
          "187:         }",
          "195:         {",
          "202:             {",
          "237:                     {",
          "239:                         {",
          "241:                         }",
          "248:                 }",
          "251:             }",
          "252:         }",
          "253:     }",
          "254: }",
          "",
          "[Removed Lines]",
          "159:         public void VerifyUserLogin(string code)",
          "162:             ApiRequest api = new ApiRequest(string.Empty, $\"{BaseUrl}{ApiVersion}/vpn/login/verify\", RestSharp.Method.POST);",
          "165:             string code_verifier = File.ReadAllText(Path.Combine(codeVerifierPath, codeVerifierFile));",
          "168:             Dictionary<string, string> postBody = new Dictionary<string, string>();",
          "169:             postBody.Add(\"code\", code);",
          "170:             postBody.Add(\"code_verifier\", code_verifier);",
          "171:             api.AddPostBody(postBody);",
          "174:             var response = api.SendRequest();",
          "176:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
          "178:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
          "179:                 return;",
          "180:             }",
          "183:             UI.MainWindow mainWindow = (UI.MainWindow)Application.Current.MainWindow;",
          "186:             mainWindow.NavigateToView(new UI.OnboardingView5(), UI.MainWindow.SlideDirection.Left);",
          "194:         private static string GetHashSha256(string text)",
          "196:             byte[] bytes = Encoding.UTF8.GetBytes(text);",
          "197:             SHA256Managed hashstring = new SHA256Managed();",
          "198:             byte[] hash = hashstring.ComputeHash(bytes);",
          "199:             string hashString = string.Empty;",
          "201:             foreach (byte x in hash)",
          "203:                 hashString += string.Format(\"{0:x2}\", x);",
          "204:             }",
          "206:             return hashString;",
          "207:         }",
          "215:         private static string GetUniqueToken(int length, string chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_\")",
          "216:         {",
          "217:             using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())",
          "218:             {",
          "219:                 byte[] data = new byte[length];",
          "223:                 byte[] buffer = null;",
          "226:                 int maxRandom = byte.MaxValue - ((byte.MaxValue + 1) % chars.Length);",
          "228:                 crypto.GetBytes(data);",
          "230:                 char[] result = new char[length];",
          "232:                 for (int i = 0; i < length; i++)",
          "233:                 {",
          "234:                     byte value = data[i];",
          "236:                     while (value > maxRandom)",
          "238:                         if (buffer == null)",
          "240:                             buffer = new byte[1];",
          "243:                         crypto.GetBytes(buffer);",
          "244:                         value = buffer[0];",
          "245:                     }",
          "247:                     result[i] = chars[value % chars.Length];",
          "250:                 return new string(result);",
          "",
          "[Added Lines]",
          "171:         public void StartQueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
          "173:             var loginThread = new Thread(() => QueryLoginThread(queryUri, timeoutSeconds, expiresAt, cancelToken))",
          "175:                 IsBackground = true,",
          "176:             };",
          "177:             loginThread.Start();",
          "187:         private void QueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
          "189:             while (Manager.Account.LoginState == FxA.LoginState.LoggingIn && DateTime.Compare(DateTime.UtcNow, expiresAt) < 0)",
          "191:                 try",
          "192:                 {",
          "193:                     var queryRawData = QueryRawLoginState(queryUri);",
          "195:                     if (cancelToken.IsCancellationRequested)",
          "196:                     {",
          "197:                         break;",
          "198:                     }",
          "200:                     if (queryRawData == null)",
          "201:                     {",
          "202:                         Thread.Sleep(TimeSpan.FromSeconds(timeoutSeconds));",
          "203:                         continue;",
          "204:                     }",
          "206:                     var queryData = ParseLoginState(queryRawData);",
          "208:                     if (queryData.User == null || queryData.User.Subscriptions == null || queryData.User.Subscriptions.Vpn == null)",
          "209:                     {",
          "210:                         Manager.Account.LoginState = LoginState.LoggedOut;",
          "211:                         break;",
          "212:                     }",
          "214:                     if (!queryData.User.Subscriptions.Vpn.Active)",
          "215:                     {",
          "216:                         Manager.Account.LoginState = LoginState.LoggedOut;",
          "217:                         break;",
          "218:                     }",
          "220:                     var processLoginResult = Manager.Account.ProcessLogin(queryRawData);",
          "221:                     Manager.Account.LoginState = LoginState.LoggedIn;",
          "222:                     Manager.StartUIUpdaters();",
          "224:                     var maxDevicesReached = !processLoginResult && Manager.Account.Config.FxALogin.User.Devices.Count() >= Manager.Account.Config.FxALogin.User.MaxDevices;",
          "226:                     Cache.FxAServerList.RetrieveRemoteServerList();",
          "227:                     Application.Current.Dispatcher.Invoke(() =>",
          "229:                         var owner = Application.Current.MainWindow;",
          "230:                         if (owner != null)",
          "232:                             if (!Manager.MustUpdate)",
          "233:                             {",
          "234:                                 if (maxDevicesReached)",
          "235:                                 {",
          "236:                                     ((UI.MainWindow)owner).NavigateToView(new UI.DevicesView(deviceLimitReached: true, fxaJson: queryRawData), UI.MainWindow.SlideDirection.Left);",
          "237:                                 }",
          "238:                                 else",
          "239:                                 {",
          "240:                                     ((UI.MainWindow)owner).NavigateToView(new UI.OnboardingView5(), UI.MainWindow.SlideDirection.Left);",
          "241:                                 }",
          "242:                             }",
          "244:                             ((UI.MainWindow)owner).Show();",
          "245:                             ((UI.MainWindow)owner).WindowState = WindowState.Normal;",
          "246:                             ((UI.MainWindow)owner).Activate();",
          "248:                     });",
          "249:                 }",
          "250:                 catch (Exception e)",
          "251:                 {",
          "252:                     ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Debug);",
          "255:                 Thread.Sleep(TimeSpan.FromSeconds(5));",
          "258:             LoginResultEvent?.Invoke(this, this, Manager.Account.LoginState);",
          "",
          "---------------"
        ],
        "ui/src/FxA/LoginSessionManager.cs||ui/src/FxA/LoginSessionManager.cs": [
          "File: ui/src/FxA/LoginSessionManager.cs -> ui/src/FxA/LoginSessionManager.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:                 sessions.Add(login, tokenSource);",
          "36:                 {",
          "37:                     CancelCurrentSession();",
          "38:                 }",
          "",
          "[Removed Lines]",
          "35:                 if (!login.StartLogin())",
          "",
          "[Added Lines]",
          "35:                 if (!login.StartLogin(tokenSource.Token))",
          "",
          "---------------"
        ],
        "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs": [
          "File: ui/src/JSONStructures/Login/FxALoginURLs.cs -> ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         [JsonProperty(\"verification_url\")]",
          "25:         public string VerificationUrl { get; set; }",
          "26:     }",
          "27: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         [JsonProperty(\"expires_on\")]",
          "31:         public DateTime ExpiresOn { get; set; }",
          "36:         [JsonProperty(\"poll_interval\")]",
          "37:         public int PollInterval { get; set; }",
          "",
          "---------------"
        ],
        "ui/src/Main.cs||ui/src/Main.cs": [
          "File: ui/src/Main.cs -> ui/src/Main.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using System;",
          "8: using System.Linq;",
          "9: using System.ServiceProcess;",
          "10: using System.Threading;",
          "",
          "[Removed Lines]",
          "6: using System.Collections.Generic;",
          "7: using System.Diagnostics;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:     [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.StyleCop.CSharp.DocumentationRules\", \"SA1649:FileNameMustMatchTypeName\", Justification = \"Default C# behavior.\")]",
          "23:     {",
          "",
          "[Removed Lines]",
          "22:     internal class Entry : Application",
          "",
          "[Added Lines]",
          "20:     internal class Entry : System.Windows.Application",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         {",
          "35:             bool ranOnStartup = false;",
          "52:             {",
          "54:                 if (args.First().ToLower() == \"broker\")",
          "",
          "[Removed Lines]",
          "37:             List<Process> processes = Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName).ToList();",
          "40:             if (processes.Count > 1)",
          "41:             {",
          "42:                 DateTime placeholderDate = new DateTime(1970, 1, 1);",
          "43:                 processes.Sort((x, y) => DateTime.Compare(x.SessionId == 0 ? placeholderDate : x.StartTime, y.SessionId == 0 ? placeholderDate : y.StartTime));",
          "44:                 for (int i = 0; i < processes.Count - 1; i++)",
          "45:                 {",
          "46:                     processes[i].CloseMainWindow();",
          "47:                     processes[i].Close();",
          "48:                 }",
          "49:             }",
          "51:             if (args.Count() == 1 && !args[0].Contains(\"mozilla-vpn:\"))",
          "",
          "[Added Lines]",
          "35:             if (args.Count() == 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:                 }",
          "75:             }",
          "78:             Tester.OpenConnection();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:             if (!RunOnceMutex.WaitOne(TimeSpan.Zero, true))",
          "63:             {",
          "65:                 var runningWindow = User32.FindWindow(ProductConstants.TrayWindowClassName, string.Empty);",
          "66:                 if (runningWindow != IntPtr.Zero)",
          "67:                 {",
          "68:                     User32.SendMessage(runningWindow, User32.WmShow, IntPtr.Zero, string.Empty);",
          "69:                 }",
          "71:                 Environment.Exit(1);",
          "72:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:                 app.InitializeComponent();",
          "100:                 Manager.MainWindowViewModel.RanOnStartup = ranOnStartup;",
          "",
          "[Removed Lines]",
          "88:                 if (args.Count() == 1 && args[0].Contains(\"mozilla-vpn:\"))",
          "89:                 {",
          "91:                     Manager.Initialize(args.First());",
          "92:                     VerifyUser(args.First());",
          "93:                 }",
          "94:                 else",
          "95:                 {",
          "96:                     Manager.Initialize();",
          "97:                 }",
          "",
          "[Added Lines]",
          "84:                 Manager.Initialize();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:                 Environment.Exit(1);",
          "150:             }",
          "151:         }",
          "179:     }",
          "180: }",
          "",
          "[Removed Lines]",
          "160:         private static void VerifyUser(string args)",
          "161:         {",
          "162:             try",
          "163:             {",
          "164:                 string code = args.Substring(args.IndexOf(\"code=\") + 5);",
          "166:                 if (code != null && code.Length >= 44)",
          "167:                 {",
          "168:                     FxA.Login verifyUser = new FxA.Login();",
          "170:                     verifyUser.VerifyUserLogin(code);",
          "171:                 }",
          "172:             }",
          "173:             catch (Exception e)",
          "174:             {",
          "175:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
          "176:                 Environment.Exit(1);",
          "177:             }",
          "178:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/Manager.cs||ui/src/Manager.cs": [
          "File: ui/src/Manager.cs -> ui/src/Manager.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         {",
          "117:             InitializeSettings();",
          "118:             InitializeTranslationService();",
          "",
          "[Removed Lines]",
          "115:         public static void Initialize(string code = \"\")",
          "",
          "[Added Lines]",
          "114:         public static void Initialize()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             InitializeServerListCache();",
          "121:             InitializeTunnel();",
          "122:             InitializeAccount();",
          "124:             InitializeWlanWatcher();",
          "125:             InitializeCaptivePortalDetector();",
          "126:             InitializeIpInfo();",
          "",
          "[Removed Lines]",
          "123:             InitializeViewModels(code);",
          "",
          "[Added Lines]",
          "122:             InitializeViewModels();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:         {",
          "175:         }",
          "",
          "[Removed Lines]",
          "172:         public static void InitializeViewModels(string code = \"\")",
          "174:             MainWindowViewModel = new ViewModels.MainWindowViewModel(code);",
          "",
          "[Added Lines]",
          "170:         public static void InitializeViewModels()",
          "172:             MainWindowViewModel = new ViewModels.MainWindowViewModel();",
          "",
          "---------------"
        ],
        "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs": [
          "File: ui/src/ProductConstants.cs -> ui/src/ProductConstants.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:             }",
          "322:             FeedbackFormUrl = string.Concat(BaseUrl, \"/r/vpn/client/feedback\", FxAUtmTags);",
          "",
          "[Removed Lines]",
          "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v2\");",
          "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login/windows\");",
          "",
          "[Added Lines]",
          "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v1\");",
          "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login\");",
          "",
          "---------------"
        ],
        "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs": [
          "File: ui/src/ViewModels/MainWindowViewModel.cs -> ui/src/ViewModels/MainWindowViewModel.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         {",
          "82:             connectionStatus = new Models.ConnectionStatus",
          "",
          "[Removed Lines]",
          "79:         public MainWindowViewModel(string code = \"\")",
          "",
          "[Added Lines]",
          "78:         public MainWindowViewModel()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:             {",
          "105:                 InitialViewFrameSourceType = typeof(UI.MainView);",
          "106:             }",
          "111:             else",
          "112:             {",
          "113:                 InitialViewFrameSourceType = typeof(UI.LandingView);",
          "",
          "[Removed Lines]",
          "107:             else if (code != string.Empty)",
          "108:             {",
          "109:                 InitialViewFrameSourceType = typeof(UI.OnboardingView5);",
          "110:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs": [
          "File: ui/src/WCF/IService.cs -> ui/src/WCF/IService.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
          "42:         Response Disconnect();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:         [OperationContract]",
          "50:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
          "51:         Response Login(LoginRequest req);",
          "",
          "---------------"
        ],
        "ui/src/WCF/Service.cs||ui/src/WCF/Service.cs": [
          "File: ui/src/WCF/Service.cs -> ui/src/WCF/Service.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             }",
          "119:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:         public Response Login(LoginRequest req)",
          "127:         {",
          "128:             try",
          "129:             {",
          "130:                 var loginInstance = new FxA.Login();",
          "131:                 var pollInterval = req.PollInterval % 31; // Max 30 seconds, no more",
          "132:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
          "133:                 loginInstance.StartQueryLoginThread(req.VerificationUrl, req.PollInterval, req.ExpiresOn, CancellationToken.None);",
          "134:                 return new Response(200, \"Success\");",
          "135:             }",
          "136:             catch (Exception ex)",
          "137:             {",
          "138:                 return new Response(500, ex.Message);",
          "139:             }",
          "140:         }",
          "",
          "---------------"
        ],
        "ui/src/packages.config||ui/src/packages.config": [
          "File: ui/src/packages.config -> ui/src/packages.config",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   <package id=\"Fluent.Net\" version=\"1.0.31\" targetFramework=\"net472\" />",
          "6:   <package id=\"Fody\" version=\"6.0.0\" targetFramework=\"net46\" developmentDependency=\"true\" />",
          "7:   <package id=\"ini-parser\" version=\"2.5.2\" targetFramework=\"net472\" />",
          "10:   <package id=\"Microsoft.NETCore.Platforms\" version=\"2.2.2\" targetFramework=\"net472\" />",
          "11:   <package id=\"Microsoft.WindowsAPICodePack-Core\" version=\"1.1.0.2\" targetFramework=\"net472\" />",
          "12:   <package id=\"Newtonsoft.Json\" version=\"12.0.2\" targetFramework=\"net472\" />",
          "",
          "[Removed Lines]",
          "8:   <package id=\"Microsoft.IdentityModel.Logging\" version=\"6.7.1\" targetFramework=\"net472\" />",
          "9:   <package id=\"Microsoft.IdentityModel.Tokens\" version=\"6.7.1\" targetFramework=\"net472\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cd36789972b3797afae6e2c8fca817c3c39c251",
      "candidate_info": {
        "commit_hash": "8cd36789972b3797afae6e2c8fca817c3c39c251",
        "repo": "mozilla-services/guardian-vpn-windows",
        "commit_url": "https://github.com/mozilla-services/guardian-vpn-windows/commit/8cd36789972b3797afae6e2c8fca817c3c39c251",
        "files": [
          "installer/MozillaVPN.wxs",
          "ui/src/Firefox Private Network.csproj",
          "ui/src/FxA/Account.cs",
          "ui/src/FxA/Devices.cs",
          "ui/src/FxA/ServerList/ServerList.cs",
          "ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "ui/src/Manager.cs",
          "ui/src/ProductConstants.cs",
          "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
          "ui/src/UI/Resources/Localization/Translations/en-us.ftl",
          "ui/src/ViewModels/MainWindowViewModel.cs",
          "ui/src/WCF/IService.cs",
          "ui/src/packages.config"
        ],
        "message": "Revert \"fixed merge conflicts\"\n\nThis reverts commit a1df4b1cdab801d77c4c79d6d14a0776f01f41a3",
        "before_after_code_files": [
          "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
          "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
          "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
          "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
          "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "ui/src/Manager.cs||ui/src/Manager.cs",
          "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
          "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
          "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
          "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
          "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
          "ui/src/packages.config||ui/src/packages.config"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
            "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
            "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
            "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
            "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
            "ui/src/Manager.cs||ui/src/Manager.cs",
            "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
            "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
            "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
            "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
            "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
            "ui/src/packages.config||ui/src/packages.config"
          ],
          "candidate": [
            "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs",
            "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs",
            "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs",
            "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs",
            "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs",
            "ui/src/Manager.cs||ui/src/Manager.cs",
            "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs",
            "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
            "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl",
            "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs",
            "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs",
            "ui/src/packages.config||ui/src/packages.config"
          ]
        }
      },
      "candidate_diff": {
        "installer/MozillaVPN.wxs||installer/MozillaVPN.wxs": [
          "File: installer/MozillaVPN.wxs -> installer/MozillaVPN.wxs",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_70x70.png\" />",
          "87:     <File Source=\"../ui/bin/$(var.Platform)/Release/Resources/Graphics/icon_150x150.png\" />",
          "101:     <!-- Broker Service -->",
          "102:     <ServiceInstall",
          "103:      Type=\"ownProcess\"",
          "",
          "[Removed Lines]",
          "89:         <!-- Custom URL protocol for handling the PKCE auth flow -->",
          "90:         <RegistryKey Root=\"HKCR\" Key=\"mozilla-vpn\">",
          "91:           <RegistryValue Type=\"string\" Name=\"URL Protocol\" Value=\"mozilla-vpn\"/>",
          "92:           <RegistryValue Type=\"string\" Value=\"URL:mozilla-vpn Protocol\"/>",
          "93:           <RegistryKey Key=\"DefaultIcon\">",
          "94:             <RegistryValue Type=\"string\" Value=\"MozillaVPN.exe\" />",
          "95:           </RegistryKey>",
          "96:           <RegistryKey Key=\"shell\\open\\command\">",
          "97:             <RegistryValue Type=\"string\" Value=\"&quot;C:\\Program Files\\Mozilla\\Mozilla VPN\\MozillaVPN.exe&quot; &quot;%1&quot;\" />",
          "98:           </RegistryKey>",
          "99:         </RegistryKey>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:    </Component>",
          "125:   </ComponentGroup>",
          "128:    Merge modules",
          "129:   -->",
          "130:   <DirectoryRef Id=\"MozillaVPNFolder\">",
          "",
          "[Removed Lines]",
          "127:     <!--",
          "",
          "[Added Lines]",
          "115:   <!--",
          "",
          "---------------"
        ],
        "ui/src/FxA/Account.cs||ui/src/FxA/Account.cs": [
          "File: ui/src/FxA/Account.cs -> ui/src/FxA/Account.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:             }",
          "51:         }",
          "",
          "[Removed Lines]",
          "56:         public static string OriginalApiVersion { get; set; } = \"/api/v1\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         public bool ProcessLogin(string fxaJson)",
          "79:         {",
          "84:             Manager.MainWindowViewModel.NewUserSignIn = true;",
          "",
          "[Removed Lines]",
          "81:             Manager.Account.Config = new Config(fxaJson);",
          "",
          "[Added Lines]",
          "76:             Manager.Account.Config = new FxA.Config(fxaJson);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:             Manager.Account.Config.WriteFxAUserToFile(ProductConstants.FxAUserFile);",
          "98:             Manager.Account.Avatar.InitializeCache(avatarUrl: Config.FxALogin.User.Avatar);",
          "103:             var deviceAddResponse = devices.AddDevice(deviceName, keys.Public);",
          "",
          "[Removed Lines]",
          "95:             Manager.Account.LoginState = LoginState.LoggedIn;",
          "101:             var devices = new Devices();",
          "102:             var deviceName = string.Format(\"{0} ({1} {2})\", Environment.MachineName, Environment.OSVersion.Platform, Environment.OSVersion.Version);",
          "",
          "[Added Lines]",
          "90:             Manager.Account.LoginState = FxA.LoginState.LoggedIn;",
          "96:             var devices = new FxA.Devices();",
          "97:             var deviceName = string.Format(\"{0} ({1} {2})\", System.Environment.MachineName, System.Environment.OSVersion.Platform, System.Environment.OSVersion.Version);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:         public JSONStructures.User GetAccountDetails()",
          "166:         {",
          "170:             var response = api.SendRequest();",
          "",
          "[Removed Lines]",
          "167:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{OriginalApiVersion}/vpn/account\", RestSharp.Method.GET);",
          "",
          "[Added Lines]",
          "162:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/account\", RestSharp.Method.GET);",
          "",
          "---------------"
        ],
        "ui/src/FxA/Devices.cs||ui/src/FxA/Devices.cs": [
          "File: ui/src/FxA/Devices.cs -> ui/src/FxA/Devices.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: using System;",
          "6: using System.Collections.Generic;",
          "8: using System.Threading.Tasks;",
          "9: using Newtonsoft.Json;",
          "",
          "[Removed Lines]",
          "7: using System.IO;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:         public JSONStructures.Device AddDevice(string deviceName, string publicKey)",
          "25:         {",
          "27:             api.AddPostBody(new Dictionary<string, string> { { \"name\", deviceName }, { \"pubkey\", publicKey } });",
          "",
          "[Removed Lines]",
          "26:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/device\", RestSharp.Method.POST);",
          "",
          "[Added Lines]",
          "25:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/device\", RestSharp.Method.POST);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:             var sanitizedDevicePublicKey = System.Web.HttpUtility.UrlEncode(publicKey);",
          "78:             var response = api.SendRequest();",
          "",
          "[Removed Lines]",
          "75:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/device/\" + sanitizedDevicePublicKey, RestSharp.Method.DELETE);",
          "",
          "[Added Lines]",
          "74:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/device/\" + sanitizedDevicePublicKey, RestSharp.Method.DELETE);",
          "",
          "---------------"
        ],
        "ui/src/FxA/ServerList/ServerList.cs||ui/src/FxA/ServerList/ServerList.cs": [
          "File: ui/src/FxA/ServerList/ServerList.cs -> ui/src/FxA/ServerList/ServerList.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:         public bool RetrieveRemoteServerList()",
          "175:         {",
          "177:             var response = api.SendRequest();",
          "178:             if (response == null)",
          "179:             {",
          "",
          "[Removed Lines]",
          "176:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, $\"{ProductConstants.BaseUrl}{Account.OriginalApiVersion}/vpn/servers\", Method.GET);",
          "",
          "[Added Lines]",
          "176:             var api = new ApiRequest(Manager.Account.Config.FxALogin.Token, \"/vpn/servers\", Method.GET);",
          "",
          "---------------"
        ],
        "ui/src/JSONStructures/Login/FxALoginURLs.cs||ui/src/JSONStructures/Login/FxALoginURLs.cs": [
          "File: ui/src/JSONStructures/Login/FxALoginURLs.cs -> ui/src/JSONStructures/Login/FxALoginURLs.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         [JsonProperty(\"verification_url\")]",
          "25:         public string VerificationUrl { get; set; }",
          "26:     }",
          "27: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         [JsonProperty(\"expires_on\")]",
          "31:         public DateTime ExpiresOn { get; set; }",
          "36:         [JsonProperty(\"poll_interval\")]",
          "37:         public int PollInterval { get; set; }",
          "",
          "---------------"
        ],
        "ui/src/Manager.cs||ui/src/Manager.cs": [
          "File: ui/src/Manager.cs -> ui/src/Manager.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         {",
          "117:             InitializeSettings();",
          "118:             InitializeTranslationService();",
          "",
          "[Removed Lines]",
          "115:         public static void Initialize(string code = \"\")",
          "",
          "[Added Lines]",
          "114:         public static void Initialize()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             InitializeServerListCache();",
          "121:             InitializeTunnel();",
          "122:             InitializeAccount();",
          "124:             InitializeWlanWatcher();",
          "125:             InitializeCaptivePortalDetector();",
          "126:             InitializeIpInfo();",
          "",
          "[Removed Lines]",
          "123:             InitializeViewModels(code);",
          "",
          "[Added Lines]",
          "122:             InitializeViewModels();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:         {",
          "175:         }",
          "",
          "[Removed Lines]",
          "172:         public static void InitializeViewModels(string code = \"\")",
          "174:             MainWindowViewModel = new ViewModels.MainWindowViewModel(code);",
          "",
          "[Added Lines]",
          "170:         public static void InitializeViewModels()",
          "172:             MainWindowViewModel = new ViewModels.MainWindowViewModel();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:             ConnectionStatusUpdater.StopThread();",
          "236:             ServerListUpdater.StopThread();",
          "237:             AccountInfoUpdater.StopTask();",
          "240:         }",
          "",
          "[Removed Lines]",
          "238:             VersionUpdater.StopTask();",
          "239:             ToastManager.StopThread();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/ProductConstants.cs||ui/src/ProductConstants.cs": [
          "File: ui/src/ProductConstants.cs -> ui/src/ProductConstants.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:             }",
          "322:             FeedbackFormUrl = string.Concat(BaseUrl, \"/r/vpn/client/feedback\", FxAUtmTags);",
          "",
          "[Removed Lines]",
          "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v2\");",
          "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login/windows\");",
          "",
          "[Added Lines]",
          "316:             FxAUrl = string.Concat(BaseUrl, \"/api/v1\");",
          "319:             FxALoginUrl = string.Concat(FxAUrl, \"/vpn/login\");",
          "",
          "---------------"
        ],
        "ui/src/UI/Components/Card/Hero/HeroSubtext.xaml||ui/src/UI/Components/Card/Hero/HeroSubtext.xaml": [
          "File: ui/src/UI/Components/Card/Hero/HeroSubtext.xaml -> ui/src/UI/Components/Card/Hero/HeroSubtext.xaml",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:                             </Setter>",
          "123:                         </DataTrigger>",
          "126:                         <DataTrigger Binding=\"{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HeroSubText}}, Path=(extension:CardExtensions.VpnStability)}\" Value=\"1\">",
          "127:                             <Setter Property=\"Text\">",
          "128:                                 <Setter.Value>",
          "",
          "[Removed Lines]",
          "125:                         <!-- Connection unstable -->",
          "",
          "[Added Lines]",
          "125:                         <!-- Connection unsable -->",
          "",
          "---------------"
        ],
        "ui/src/UI/Resources/Localization/Translations/en-us.ftl||ui/src/UI/Resources/Localization/Translations/en-us.ftl": [
          "File: ui/src/UI/Resources/Localization/Translations/en-us.ftl -> ui/src/UI/Resources/Localization/Translations/en-us.ftl",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: devices-limit-reached-title = Remove a device",
          "129: devices-limit-reached-content = You've reached your limit. To install the VPN on this device, you'll need to remove one.",
          "130: devices-remove-popup-title = Remove device?",
          "132: devices-remove = Remove device",
          "134: ## Popup",
          "",
          "[Removed Lines]",
          "131: devices-remove-popup-content = Please confirm you would like to remove {$deviceName}. You will need to open the VPN client on the removed device to clear your network settings and access the internet again.",
          "",
          "[Added Lines]",
          "131: devices-remove-popup-content = Please confirm you would like to remove {$deviceName}.",
          "",
          "---------------"
        ],
        "ui/src/ViewModels/MainWindowViewModel.cs||ui/src/ViewModels/MainWindowViewModel.cs": [
          "File: ui/src/ViewModels/MainWindowViewModel.cs -> ui/src/ViewModels/MainWindowViewModel.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         {",
          "82:             connectionStatus = new Models.ConnectionStatus",
          "",
          "[Removed Lines]",
          "79:         public MainWindowViewModel(string code)",
          "",
          "[Added Lines]",
          "78:         public MainWindowViewModel()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:             }",
          "108:             {",
          "109:                 InitialViewFrameSourceType = typeof(UI.MainView);",
          "110:             }",
          "",
          "[Removed Lines]",
          "103:             if (code.Length >= 44)",
          "104:             {",
          "105:                 InitialViewFrameSourceType = typeof(UI.OnboardingView5);",
          "106:             }",
          "107:             else if (Manager.Account.LoginState == FxA.LoginState.LoggedIn && currentDevice != null)",
          "",
          "[Added Lines]",
          "102:             if (Manager.Account.LoginState == FxA.LoginState.LoggedIn && currentDevice != null)",
          "",
          "---------------"
        ],
        "ui/src/WCF/IService.cs||ui/src/WCF/IService.cs": [
          "File: ui/src/WCF/IService.cs -> ui/src/WCF/IService.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
          "42:         Response Disconnect();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:         [OperationContract]",
          "50:         [WebInvoke(Method = \"POST\", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)]",
          "51:         Response Login(LoginRequest req);",
          "",
          "---------------"
        ],
        "ui/src/packages.config||ui/src/packages.config": [
          "File: ui/src/packages.config -> ui/src/packages.config",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   <package id=\"Fluent.Net\" version=\"1.0.31\" targetFramework=\"net472\" />",
          "6:   <package id=\"Fody\" version=\"6.0.0\" targetFramework=\"net46\" developmentDependency=\"true\" />",
          "7:   <package id=\"ini-parser\" version=\"2.5.2\" targetFramework=\"net472\" />",
          "10:   <package id=\"Microsoft.NETCore.Platforms\" version=\"2.2.2\" targetFramework=\"net472\" />",
          "11:   <package id=\"Microsoft.WindowsAPICodePack-Core\" version=\"1.1.0.2\" targetFramework=\"net472\" />",
          "12:   <package id=\"Newtonsoft.Json\" version=\"12.0.2\" targetFramework=\"net472\" />",
          "",
          "[Removed Lines]",
          "8:   <package id=\"Microsoft.IdentityModel.Logging\" version=\"6.7.1\" targetFramework=\"net472\" />",
          "9:   <package id=\"Microsoft.IdentityModel.Tokens\" version=\"6.7.1\" targetFramework=\"net472\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}