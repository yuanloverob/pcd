{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "231fc20ce0cf776d64d2a0f1ad0ada99cc178552",
      "candidate_info": {
        "commit_hash": "231fc20ce0cf776d64d2a0f1ad0ada99cc178552",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/231fc20ce0cf776d64d2a0f1ad0ada99cc178552",
        "files": [
          "tests/run-tests.py"
        ],
        "message": "tests/run-tests.py: Remove machine_mem.py test from skip list.\n\nThis test was removed long ago in eb0e3bab1ed5aa09e491641f427a5d637fe688bd.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "tests/run-tests.py||tests/run-tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/run-tests.py||tests/run-tests.py": [
          "File: tests/run-tests.py -> tests/run-tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:     if args.target != \"unix\":",
          "574:         skip_tests.add(\"basics/exception_chain.py\")  # warning is not printed",
          "575:         skip_tests.add(\"micropython/meminfo.py\")  # output is very different to PC output",
          "578:         if args.target == \"wipy\":",
          "579:             skip_tests.add(\"misc/print_exception.py\")  # requires error reporting full",
          "",
          "[Removed Lines]",
          "576:         skip_tests.add(\"extmod/machine_mem.py\")  # raw memory access not supported",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd21820b4cc7d3c6c293b2fd104cb8214df686cd",
      "candidate_info": {
        "commit_hash": "bd21820b4cc7d3c6c293b2fd104cb8214df686cd",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/bd21820b4cc7d3c6c293b2fd104cb8214df686cd",
        "files": [
          "tests/run-tests.py"
        ],
        "message": "tests/run-tests.py: Fix path-based special test detection.\n\nCompare the full absolute path instead of relying on the path form\npassed by the user.\n\nFor instance, this will make\n\npython3 run-tests.py -d basics\npython3 run-tests.py -d ./basics\npython3 run-tests.py -d ../tests/basics\npython3 run-tests.py -d /full/path/to/basics\n\nall behave the same by correctly treating the bytes_compare3 and\nbuiltin_help tests as special, whereas previously only the first\ninvocation would do that and hence result in these tests to fail\nwhen called with a different path form.\n\nSigned-off-by: stijn <stijn@ignitron.net>",
        "before_after_code_files": [
          "tests/run-tests.py||tests/run-tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/run-tests.py||tests/run-tests.py": [
          "File: tests/run-tests.py -> tests/run-tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     return had_crash, output_mupy",
          "181:         \"micropython/meminfo.py\",",
          "182:         \"basics/bytes_compare3.py\",",
          "183:         \"basics/builtin_help.py\",",
          "184:         \"thread/thread_exc2.py\",",
          "185:         \"esp32/partition_ota.py\",",
          "186:     )",
          "187:     had_crash = False",
          "188:     if pyb is None:",
          "189:         # run on PC",
          "190:         if (",
          "193:         ):",
          "194:             # special handling for tests of the unix cmdline program",
          "195:             is_special = True",
          "",
          "[Removed Lines]",
          "179: def run_micropython(pyb, args, test_file, is_special=False):",
          "180:     special_tests = (",
          "191:             test_file.startswith((\"cmdline/\", base_path(\"feature_check/\")))",
          "192:             or test_file in special_tests",
          "",
          "[Added Lines]",
          "179: special_tests = [",
          "180:     base_path(file)",
          "181:     for file in (",
          "188: ]",
          "191: def run_micropython(pyb, args, test_file, test_file_abspath, is_special=False):",
          "196:             test_file_abspath.startswith((base_path(\"cmdline/\"), base_path(\"feature_check/\")))",
          "197:             or test_file_abspath in special_tests",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:                 mpy_modname = os.path.splitext(os.path.basename(mpy_filename))[0]",
          "284:                 cmdlist.extend([\"-m\", mpy_modname])",
          "285:             else:",
          "288:             # run the actual test",
          "289:             try:",
          "",
          "[Removed Lines]",
          "286:                 cmdlist.append(os.path.abspath(test_file))",
          "",
          "[Added Lines]",
          "291:                 cmdlist.append(test_file_abspath)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:     if is_special and not had_crash and b\"\\nSKIP\\n\" in output_mupy:",
          "317:         return b\"SKIP\\n\"",
          "320:         # convert parts of the output that are not stable across runs",
          "321:         with open(test_file + \".exp\", \"rb\") as f:",
          "322:             lines_exp = []",
          "",
          "[Removed Lines]",
          "319:     if is_special or test_file in special_tests:",
          "",
          "[Added Lines]",
          "324:     if is_special or test_file_abspath in special_tests:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:     if pyb is not None and test_file.startswith(\"repl_\"):",
          "365:         # REPL feature tests will not run via pyboard because they require prompt interactivity",
          "366:         return b\"\"",
          "370: class ThreadSafeCounter:",
          "",
          "[Removed Lines]",
          "367:     return run_micropython(pyb, args, base_path(\"feature_check\", test_file), is_special=True)",
          "",
          "[Added Lines]",
          "372:     test_file_path = base_path(\"feature_check\", test_file)",
          "373:     return run_micropython(pyb, args, test_file_path, test_file_path, is_special=True)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "674:     def run_one_test(test_file):",
          "675:         test_file = test_file.replace(\"\\\\\", \"/\")",
          "677:         if args.filters:",
          "678:             # Default verdict is the opposit of the first action",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:         test_file_abspath = os.path.abspath(test_file).replace(\"\\\\\", \"/\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "733:             # run CPython to work out expected output",
          "734:             try:",
          "735:                 output_expected = subprocess.check_output(",
          "737:                     cwd=os.path.dirname(test_file),",
          "738:                     stderr=subprocess.STDOUT,",
          "739:                 )",
          "",
          "[Removed Lines]",
          "736:                     CPYTHON3_CMD + [os.path.abspath(test_file)],",
          "",
          "[Added Lines]",
          "743:                     CPYTHON3_CMD + [test_file_abspath],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "750:             return",
          "752:         # run MicroPython",
          "755:         if output_mupy == b\"SKIP\\n\":",
          "756:             print(\"skip \", test_file)",
          "",
          "[Removed Lines]",
          "753:         output_mupy = run_micropython(pyb, args, test_file)",
          "",
          "[Added Lines]",
          "760:         output_mupy = run_micropython(pyb, args, test_file, test_file_abspath)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0392b8d3d7e37a74f448c8fe4789f0f6bc76541",
      "candidate_info": {
        "commit_hash": "f0392b8d3d7e37a74f448c8fe4789f0f6bc76541",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/f0392b8d3d7e37a74f448c8fe4789f0f6bc76541",
        "files": [
          "tests/multi_net/asyncio_tls_server_client.py",
          "tests/multi_net/asyncio_tls_server_client_cert_required_error.py",
          "tests/multi_net/asyncio_tls_server_client_readline.py",
          "tests/multi_net/asyncio_tls_server_client_verify_error.py",
          "tests/multi_net/ssl_cert_rsa.py",
          "tests/multi_net/sslcontext_check_hostname_error.py",
          "tests/multi_net/sslcontext_getpeercert.py",
          "tests/multi_net/sslcontext_server_client.py",
          "tests/multi_net/sslcontext_server_client_ciphers.py",
          "tests/multi_net/sslcontext_server_client_files.py",
          "tests/multi_net/sslcontext_verify_error.py",
          "tests/multi_net/sslcontext_verify_time_error.py",
          "tests/run-multitests.py"
        ],
        "message": "tests/run-multitests.py: Change to dir of test script when running it.\n\nThis matches the behaviour of run-tests.py, which sets cwd to the directory\ncontaining the test script, which helps to isolate the filesystem.\n\nIt means that the SSL tests no longer need to know the name of their\ncontaining directory to find the certificate files, and helps to run these\ntests on bare-metal.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "tests/multi_net/asyncio_tls_server_client.py||tests/multi_net/asyncio_tls_server_client.py",
          "tests/multi_net/asyncio_tls_server_client_cert_required_error.py||tests/multi_net/asyncio_tls_server_client_cert_required_error.py",
          "tests/multi_net/asyncio_tls_server_client_readline.py||tests/multi_net/asyncio_tls_server_client_readline.py",
          "tests/multi_net/asyncio_tls_server_client_verify_error.py||tests/multi_net/asyncio_tls_server_client_verify_error.py",
          "tests/multi_net/ssl_cert_rsa.py||tests/multi_net/ssl_cert_rsa.py",
          "tests/multi_net/sslcontext_check_hostname_error.py||tests/multi_net/sslcontext_check_hostname_error.py",
          "tests/multi_net/sslcontext_getpeercert.py||tests/multi_net/sslcontext_getpeercert.py",
          "tests/multi_net/sslcontext_server_client.py||tests/multi_net/sslcontext_server_client.py",
          "tests/multi_net/sslcontext_server_client_ciphers.py||tests/multi_net/sslcontext_server_client_ciphers.py",
          "tests/multi_net/sslcontext_server_client_files.py||tests/multi_net/sslcontext_server_client_files.py",
          "tests/multi_net/sslcontext_verify_error.py||tests/multi_net/sslcontext_verify_error.py",
          "tests/multi_net/sslcontext_verify_time_error.py||tests/multi_net/sslcontext_verify_time_error.py",
          "tests/run-multitests.py||tests/run-multitests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/multi_net/asyncio_tls_server_client.py||tests/multi_net/asyncio_tls_server_client.py": [
          "File: tests/multi_net/asyncio_tls_server_client.py -> tests/multi_net/asyncio_tls_server_client.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/asyncio_tls_server_client_cert_required_error.py||tests/multi_net/asyncio_tls_server_client_cert_required_error.py": [
          "File: tests/multi_net/asyncio_tls_server_client_cert_required_error.py -> tests/multi_net/asyncio_tls_server_client_cert_required_error.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/asyncio_tls_server_client_readline.py||tests/multi_net/asyncio_tls_server_client_readline.py": [
          "File: tests/multi_net/asyncio_tls_server_client_readline.py -> tests/multi_net/asyncio_tls_server_client_readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/asyncio_tls_server_client_verify_error.py||tests/multi_net/asyncio_tls_server_client_verify_error.py": [
          "File: tests/multi_net/asyncio_tls_server_client_verify_error.py -> tests/multi_net/asyncio_tls_server_client_verify_error.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/ssl_cert_rsa.py||tests/multi_net/ssl_cert_rsa.py": [
          "File: tests/multi_net/ssl_cert_rsa.py -> tests/multi_net/ssl_cert_rsa.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: PORT = 8000",
          "12: # These are test certificates. See tests/README.md for details.",
          "16: try:",
          "17:     os.stat(certfile)",
          "",
          "[Removed Lines]",
          "13: certfile = \"multi_net/rsa_cert.der\"",
          "14: keyfile = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "13: certfile = \"rsa_cert.der\"",
          "14: keyfile = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_check_hostname_error.py||tests/multi_net/sslcontext_check_hostname_error.py": [
          "File: tests/multi_net/sslcontext_check_hostname_error.py -> tests/multi_net/sslcontext_check_hostname_error.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_getpeercert.py||tests/multi_net/sslcontext_getpeercert.py": [
          "File: tests/multi_net/sslcontext_getpeercert.py -> tests/multi_net/sslcontext_getpeercert.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: PORT = 8000",
          "14: # These are test certificates. See tests/README.md for details.",
          "18: try:",
          "19:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "15: cert = cafile = \"multi_net/rsa_cert.der\"",
          "16: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "15: cert = cafile = \"rsa_cert.der\"",
          "16: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_server_client.py||tests/multi_net/sslcontext_server_client.py": [
          "File: tests/multi_net/sslcontext_server_client.py -> tests/multi_net/sslcontext_server_client.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(certfile)",
          "",
          "[Removed Lines]",
          "14: certfile = \"multi_net/rsa_cert.der\"",
          "15: keyfile = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: certfile = \"rsa_cert.der\"",
          "15: keyfile = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_server_client_ciphers.py||tests/multi_net/sslcontext_server_client_ciphers.py": [
          "File: tests/multi_net/sslcontext_server_client_ciphers.py -> tests/multi_net/sslcontext_server_client_ciphers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_server_client_files.py||tests/multi_net/sslcontext_server_client_files.py": [
          "File: tests/multi_net/sslcontext_server_client_files.py -> tests/multi_net/sslcontext_server_client_files.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_verify_error.py||tests/multi_net/sslcontext_verify_error.py": [
          "File: tests/multi_net/sslcontext_verify_error.py -> tests/multi_net/sslcontext_verify_error.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/rsa_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"rsa_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/multi_net/sslcontext_verify_time_error.py||tests/multi_net/sslcontext_verify_time_error.py": [
          "File: tests/multi_net/sslcontext_verify_time_error.py -> tests/multi_net/sslcontext_verify_time_error.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: PORT = 8000",
          "13: # These are test certificates. See tests/README.md for details.",
          "17: try:",
          "18:     os.stat(cafile)",
          "",
          "[Removed Lines]",
          "14: cert = cafile = \"multi_net/expired_cert.der\"",
          "15: key = \"multi_net/rsa_key.der\"",
          "",
          "[Added Lines]",
          "14: cert = cafile = \"expired_cert.der\"",
          "15: key = \"rsa_key.der\"",
          "",
          "---------------"
        ],
        "tests/run-multitests.py||tests/run-multitests.py": [
          "File: tests/run-multitests.py -> tests/run-multitests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: if os.name == \"nt\":",
          "29:     CPYTHON3 = os.getenv(\"MICROPY_CPYTHON3\", \"python3.exe\")",
          "32:     )",
          "33: else:",
          "34:     CPYTHON3 = os.getenv(\"MICROPY_CPYTHON3\", \"python3\")",
          "37:     )",
          "39: # For diff'ing test output",
          "",
          "[Removed Lines]",
          "30:     MICROPYTHON = os.getenv(",
          "31:         \"MICROPY_MICROPYTHON\", test_dir + \"/../ports/windows/build-standard/micropython.exe\"",
          "35:     MICROPYTHON = os.getenv(",
          "36:         \"MICROPY_MICROPYTHON\", test_dir + \"/../ports/unix/build-standard/micropython\"",
          "",
          "[Added Lines]",
          "30:     MICROPYTHON = os.path.abspath(",
          "31:         os.getenv(",
          "32:             \"MICROPY_MICROPYTHON\", test_dir + \"/../ports/windows/build-standard/micropython.exe\"",
          "33:         )",
          "37:     MICROPYTHON = os.path.abspath(",
          "38:         os.getenv(\"MICROPY_MICROPYTHON\", test_dir + \"/../ports/unix/build-standard/micropython\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: class PyInstanceSubProcess(PyInstance):",
          "156:     def __init__(self, argv, env=None):",
          "157:         self.argv = argv",
          "158:         self.env = {n: v for n, v in (i.split(\"=\") for i in env)} if env else None",
          "159:         self.popen = None",
          "160:         self.finished = True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:         self.cwd = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:         return self.argv[0].rsplit(\"/\")[-1]",
          "165:     def prepare_script_from_file(self, filename, prepend, append):",
          "168:         remove_cwd_from_sys_path = b\"import sys\\nsys.path.remove('')\\n\\n\"",
          "169:         return remove_cwd_from_sys_path + super().prepare_script_from_file(",
          "170:             filename, prepend, append",
          "",
          "[Removed Lines]",
          "166:         # Make tests run in an isolated environment (i.e. `import io` would",
          "167:         # otherwise get the `tests/io` directory).",
          "",
          "[Added Lines]",
          "169:         # Make tests run in the directory of the test file, and in an isolated environment",
          "170:         # (i.e. `import io` would otherwise get the `tests/io` directory).",
          "171:         self.cwd = os.path.dirname(filename)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:                 stdout=subprocess.PIPE,",
          "180:                 stderr=subprocess.STDOUT,",
          "181:                 input=script,",
          "182:                 env=self.env,",
          "183:             )",
          "184:             output = p.stdout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:                 cwd=self.cwd,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:             stdin=subprocess.PIPE,",
          "193:             stdout=subprocess.PIPE,",
          "194:             stderr=subprocess.STDOUT,",
          "195:             env=self.env,",
          "196:         )",
          "197:         self.finished = False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:             cwd=self.cwd,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74fd7b3d32e19a0c15ec1202cf03c31aa353a9f7",
      "candidate_info": {
        "commit_hash": "74fd7b3d32e19a0c15ec1202cf03c31aa353a9f7",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/74fd7b3d32e19a0c15ec1202cf03c31aa353a9f7",
        "files": [
          "tests/extmod/select_poll_fd.py",
          "tools/ci.sh"
        ],
        "message": "tools/ci.sh: Set `ulimit -n` for unix CI.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
        "before_after_code_files": [
          "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py",
          "tools/ci.sh||tools/ci.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
          ],
          "candidate": [
            "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
          "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: print(poller.poll(0))",
          "37: # Test registering a very large number of file descriptors (will trigger",
          "39: poller = select.poll()",
          "40: for fd in range(6000):",
          "41:     poller.register(fd)",
          "",
          "[Removed Lines]",
          "38: # EINVAL due to more than OPEN_MAX fds).",
          "",
          "[Added Lines]",
          "38: # EINVAL due to more than OPEN_MAX fds). Typically it's 1024 (and on GitHub CI",
          "39: # we force this via `ulimit -n 1024`).",
          "",
          "---------------"
        ],
        "tools/ci.sh||tools/ci.sh": [
          "File: tools/ci.sh -> tools/ci.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     MAKEOPTS=\"-j$(sysctl -n hw.ncpu)\"",
          "7: fi",
          "9: ########################################################################################",
          "10: # general helper functions",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: # Ensure known OPEN_MAX (NO_FILES) limit.",
          "10: ulimit -n 1024",
          "",
          "---------------"
        ]
      }
    }
  ]
}