{
  "cve_id": "CVE-2022-41896",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `ThreadUnsafeUnigramCandidateSampler` is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash. We have patched the issue in GitHub commit 39ec7eaf1428e90c37787e5b3fbd68ebd3c48860. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
  "patch_info": {
    "commit_hash": "39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
    "files": [
      "tensorflow/core/kernels/mfcc.cc",
      "tensorflow/core/kernels/mfcc_mel_filterbank.cc",
      "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
      "tensorflow/core/kernels/mfcc_op.cc"
    ],
    "message": "Make MfccMelFilterbank fail initialization if num_channels is > max int value.\n\nAlso initialize MfccDct only if MfccMelFilterbank initialization was successful.\n\nPiperOrigin-RevId: 477844246",
    "before_after_code_files": [
      "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
      "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
      "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
      "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc": [
      "File: tensorflow/core/kernels/mfcc.cc -> tensorflow/core/kernels/mfcc.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:   bool initialized = mel_filterbank_.Initialize(",
      "39:       input_length, input_sample_rate, filterbank_channel_count_,",
      "40:       lower_frequency_limit_, upper_frequency_limit_);",
      "43:   initialized_ = initialized;",
      "44:   return initialized;",
      "45: }",
      "",
      "[Removed Lines]",
      "41:   initialized &=",
      "42:       dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
      "",
      "[Added Lines]",
      "41:   if (initialized) {",
      "42:     initialized =",
      "43:         dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
      "44:   }",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc": [
      "File: tensorflow/core/kernels/mfcc_mel_filterbank.cc -> tensorflow/core/kernels/mfcc_mel_filterbank.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: #include <math.h>",
      "35: #include \"tensorflow/core/platform/logging.h\"",
      "37: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: #include <limits>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:   const double mel_low = FreqToMel(lower_frequency_limit);",
      "79:   const double mel_hi = FreqToMel(upper_frequency_limit);",
      "80:   const double mel_span = mel_hi - mel_low;",
      "",
      "[Removed Lines]",
      "77:   center_frequencies_.resize(num_channels_ + 1);",
      "",
      "[Added Lines]",
      "79:   std::size_t center_frequencies_size = std::size_t(num_channels_) + 1;",
      "80:   if (center_frequencies_size >= std::numeric_limits<int>::max() ||",
      "81:       center_frequencies_size > center_frequencies_.max_size()) {",
      "82:     LOG(ERROR) << \"Number of filterbank channels must be less than \"",
      "83:                << std::numeric_limits<int>::max()",
      "84:                << \" and less than or equal to \"",
      "85:                << center_frequencies_.max_size();",
      "86:     return false;",
      "87:   }",
      "88:   center_frequencies_.resize(center_frequencies_size);",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc": [
      "File: tensorflow/core/kernels/mfcc_mel_filterbank_test.cc -> tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"",
      "18: #include <vector>",
      "20: #include \"tensorflow/core/platform/test.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include <limits>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:   }",
      "86: }",
      "88: }  // namespace tensorflow",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {",
      "94:   MfccMelFilterbank filterbank;",
      "96:   const int kSampleCount = 513;",
      "97:   std::size_t num_channels = std::numeric_limits<int>::max();",
      "98:   bool initialized = filterbank.Initialize(",
      "99:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
      "100:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
      "102:   EXPECT_FALSE(initialized);",
      "103: }",
      "105: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {",
      "109:   MfccMelFilterbank filterbank;",
      "111:   const int kSampleCount = 513;",
      "114:   std::size_t num_channels = std::vector<double>().max_size() + 1;",
      "115:   bool initialized = filterbank.Initialize(",
      "116:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
      "117:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
      "119:   EXPECT_FALSE(initialized);",
      "120: }",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc": [
      "File: tensorflow/core/kernels/mfcc_op.cc -> tensorflow/core/kernels/mfcc_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     mfcc.set_lower_frequency_limit(lower_frequency_limit_);",
      "61:     mfcc.set_filterbank_channel_count(filterbank_channel_count_);",
      "62:     mfcc.set_dct_coefficient_count(dct_coefficient_count_);",
      "68:     Tensor* output_tensor = nullptr;",
      "69:     OP_REQUIRES_OK(context,",
      "",
      "[Removed Lines]",
      "63:     OP_REQUIRES(context, mfcc.Initialize(spectrogram_channels, sample_rate),",
      "64:                 errors::InvalidArgument(",
      "65:                     \"Mfcc initialization failed for channel count \",",
      "66:                     spectrogram_channels, \" and sample rate \", sample_rate));",
      "",
      "[Added Lines]",
      "63:     OP_REQUIRES(",
      "64:         context, mfcc.Initialize(spectrogram_channels, sample_rate),",
      "65:         errors::InvalidArgument(\"Mfcc initialization failed for channel count \",",
      "66:                                 spectrogram_channels, \", sample rate \",",
      "67:                                 sample_rate, \" and filterbank_channel_count \",",
      "68:                                 filterbank_channel_count_));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cafb1acdfbc76e56f0a495a0f7daadea81a86141",
      "candidate_info": {
        "commit_hash": "cafb1acdfbc76e56f0a495a0f7daadea81a86141",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/cafb1acdfbc76e56f0a495a0f7daadea81a86141",
        "files": [
          "tensorflow/core/kernels/mfcc.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "tensorflow/core/kernels/mfcc_op.cc"
        ],
        "message": "Make MfccMelFilterbank fail initialization if num_channels is > max int value.\n\nAlso initialize MfccDct only if MfccMelFilterbank initialization was successful.\n\nPiperOrigin-RevId: 477844246",
        "before_after_code_files": [
          "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
            "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
            "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc": [
          "File: tensorflow/core/kernels/mfcc.cc -> tensorflow/core/kernels/mfcc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   bool initialized = mel_filterbank_.Initialize(",
          "39:       input_length, input_sample_rate, filterbank_channel_count_,",
          "40:       lower_frequency_limit_, upper_frequency_limit_);",
          "43:   initialized_ = initialized;",
          "44:   return initialized;",
          "45: }",
          "",
          "[Removed Lines]",
          "41:   initialized &=",
          "42:       dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
          "",
          "[Added Lines]",
          "41:   if (initialized) {",
          "42:     initialized =",
          "43:         dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
          "44:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc": [
          "File: tensorflow/core/kernels/mfcc_mel_filterbank.cc -> tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <math.h>",
          "35: #include \"tensorflow/core/platform/logging.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   const double mel_low = FreqToMel(lower_frequency_limit);",
          "79:   const double mel_hi = FreqToMel(upper_frequency_limit);",
          "80:   const double mel_span = mel_hi - mel_low;",
          "",
          "[Removed Lines]",
          "77:   center_frequencies_.resize(num_channels_ + 1);",
          "",
          "[Added Lines]",
          "79:   std::size_t center_frequencies_size = std::size_t(num_channels_) + 1;",
          "80:   if (center_frequencies_size >= std::numeric_limits<int>::max() ||",
          "81:       center_frequencies_size > center_frequencies_.max_size()) {",
          "82:     LOG(ERROR) << \"Number of filterbank channels must be less than \"",
          "83:                << std::numeric_limits<int>::max()",
          "84:                << \" and less than or equal to \"",
          "85:                << center_frequencies_.max_size();",
          "86:     return false;",
          "87:   }",
          "88:   center_frequencies_.resize(center_frequencies_size);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc": [
          "File: tensorflow/core/kernels/mfcc_mel_filterbank_test.cc -> tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"",
          "18: #include <vector>",
          "20: #include \"tensorflow/core/platform/test.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   }",
          "86: }",
          "88: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {",
          "94:   MfccMelFilterbank filterbank;",
          "96:   const int kSampleCount = 513;",
          "97:   std::size_t num_channels = std::numeric_limits<int>::max();",
          "98:   bool initialized = filterbank.Initialize(",
          "99:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
          "100:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
          "102:   EXPECT_FALSE(initialized);",
          "103: }",
          "105: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {",
          "109:   MfccMelFilterbank filterbank;",
          "111:   const int kSampleCount = 513;",
          "114:   std::size_t num_channels = std::vector<double>().max_size() + 1;",
          "115:   bool initialized = filterbank.Initialize(",
          "116:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
          "117:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
          "119:   EXPECT_FALSE(initialized);",
          "120: }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc": [
          "File: tensorflow/core/kernels/mfcc_op.cc -> tensorflow/core/kernels/mfcc_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     mfcc.set_lower_frequency_limit(lower_frequency_limit_);",
          "61:     mfcc.set_filterbank_channel_count(filterbank_channel_count_);",
          "62:     mfcc.set_dct_coefficient_count(dct_coefficient_count_);",
          "68:     Tensor* output_tensor = nullptr;",
          "69:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "63:     OP_REQUIRES(context, mfcc.Initialize(spectrogram_channels, sample_rate),",
          "64:                 errors::InvalidArgument(",
          "65:                     \"Mfcc initialization failed for channel count \",",
          "66:                     spectrogram_channels, \" and sample rate \", sample_rate));",
          "",
          "[Added Lines]",
          "63:     OP_REQUIRES(",
          "64:         context, mfcc.Initialize(spectrogram_channels, sample_rate),",
          "65:         errors::InvalidArgument(\"Mfcc initialization failed for channel count \",",
          "66:                                 spectrogram_channels, \", sample rate \",",
          "67:                                 sample_rate, \" and filterbank_channel_count \",",
          "68:                                 filterbank_channel_count_));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16ac1b7c07e1d26e536ce09d6744ead92e7fa588",
      "candidate_info": {
        "commit_hash": "16ac1b7c07e1d26e536ce09d6744ead92e7fa588",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/16ac1b7c07e1d26e536ce09d6744ead92e7fa588",
        "files": [
          "tensorflow/core/kernels/mfcc.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "tensorflow/core/kernels/mfcc_op.cc"
        ],
        "message": "Make MfccMelFilterbank fail initialization if num_channels is > max int value.\n\nAlso initialize MfccDct only if MfccMelFilterbank initialization was successful.\n\nPiperOrigin-RevId: 477844246",
        "before_after_code_files": [
          "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
            "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
            "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc": [
          "File: tensorflow/core/kernels/mfcc.cc -> tensorflow/core/kernels/mfcc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   bool initialized = mel_filterbank_.Initialize(",
          "39:       input_length, input_sample_rate, filterbank_channel_count_,",
          "40:       lower_frequency_limit_, upper_frequency_limit_);",
          "43:   initialized_ = initialized;",
          "44:   return initialized;",
          "45: }",
          "",
          "[Removed Lines]",
          "41:   initialized &=",
          "42:       dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
          "",
          "[Added Lines]",
          "41:   if (initialized) {",
          "42:     initialized =",
          "43:         dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
          "44:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc": [
          "File: tensorflow/core/kernels/mfcc_mel_filterbank.cc -> tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <math.h>",
          "35: #include \"tensorflow/core/platform/logging.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   const double mel_low = FreqToMel(lower_frequency_limit);",
          "79:   const double mel_hi = FreqToMel(upper_frequency_limit);",
          "80:   const double mel_span = mel_hi - mel_low;",
          "",
          "[Removed Lines]",
          "77:   center_frequencies_.resize(num_channels_ + 1);",
          "",
          "[Added Lines]",
          "79:   std::size_t center_frequencies_size = std::size_t(num_channels_) + 1;",
          "80:   if (center_frequencies_size >= std::numeric_limits<int>::max() ||",
          "81:       center_frequencies_size > center_frequencies_.max_size()) {",
          "82:     LOG(ERROR) << \"Number of filterbank channels must be less than \"",
          "83:                << std::numeric_limits<int>::max()",
          "84:                << \" and less than or equal to \"",
          "85:                << center_frequencies_.max_size();",
          "86:     return false;",
          "87:   }",
          "88:   center_frequencies_.resize(center_frequencies_size);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc": [
          "File: tensorflow/core/kernels/mfcc_mel_filterbank_test.cc -> tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"",
          "18: #include <vector>",
          "20: #include \"tensorflow/core/platform/test.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   }",
          "86: }",
          "88: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {",
          "94:   MfccMelFilterbank filterbank;",
          "96:   const int kSampleCount = 513;",
          "97:   std::size_t num_channels = std::numeric_limits<int>::max();",
          "98:   bool initialized = filterbank.Initialize(",
          "99:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
          "100:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
          "102:   EXPECT_FALSE(initialized);",
          "103: }",
          "105: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {",
          "109:   MfccMelFilterbank filterbank;",
          "111:   const int kSampleCount = 513;",
          "114:   std::size_t num_channels = std::vector<double>().max_size() + 1;",
          "115:   bool initialized = filterbank.Initialize(",
          "116:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
          "117:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
          "119:   EXPECT_FALSE(initialized);",
          "120: }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc": [
          "File: tensorflow/core/kernels/mfcc_op.cc -> tensorflow/core/kernels/mfcc_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     mfcc.set_lower_frequency_limit(lower_frequency_limit_);",
          "61:     mfcc.set_filterbank_channel_count(filterbank_channel_count_);",
          "62:     mfcc.set_dct_coefficient_count(dct_coefficient_count_);",
          "68:     Tensor* output_tensor = nullptr;",
          "69:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "63:     OP_REQUIRES(context, mfcc.Initialize(spectrogram_channels, sample_rate),",
          "64:                 errors::InvalidArgument(",
          "65:                     \"Mfcc initialization failed for channel count \",",
          "66:                     spectrogram_channels, \" and sample rate \", sample_rate));",
          "",
          "[Added Lines]",
          "63:     OP_REQUIRES(",
          "64:         context, mfcc.Initialize(spectrogram_channels, sample_rate),",
          "65:         errors::InvalidArgument(\"Mfcc initialization failed for channel count \",",
          "66:                                 spectrogram_channels, \", sample rate \",",
          "67:                                 sample_rate, \" and filterbank_channel_count \",",
          "68:                                 filterbank_channel_count_));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "188ecda393d62df628e1254b416e5b3ba400f427",
      "candidate_info": {
        "commit_hash": "188ecda393d62df628e1254b416e5b3ba400f427",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/188ecda393d62df628e1254b416e5b3ba400f427",
        "files": [
          "tensorflow/core/kernels/mfcc.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "tensorflow/core/kernels/mfcc_op.cc"
        ],
        "message": "Make MfccMelFilterbank fail initialization if num_channels is > max int value.\n\nAlso initialize MfccDct only if MfccMelFilterbank initialization was successful.\n\nPiperOrigin-RevId: 477844246",
        "before_after_code_files": [
          "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
            "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc",
            "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
            "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/mfcc.cc||tensorflow/core/kernels/mfcc.cc": [
          "File: tensorflow/core/kernels/mfcc.cc -> tensorflow/core/kernels/mfcc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   bool initialized = mel_filterbank_.Initialize(",
          "39:       input_length, input_sample_rate, filterbank_channel_count_,",
          "40:       lower_frequency_limit_, upper_frequency_limit_);",
          "43:   initialized_ = initialized;",
          "44:   return initialized;",
          "45: }",
          "",
          "[Removed Lines]",
          "41:   initialized &=",
          "42:       dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
          "",
          "[Added Lines]",
          "41:   if (initialized) {",
          "42:     initialized =",
          "43:         dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);",
          "44:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_mel_filterbank.cc||tensorflow/core/kernels/mfcc_mel_filterbank.cc": [
          "File: tensorflow/core/kernels/mfcc_mel_filterbank.cc -> tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <math.h>",
          "35: #include \"tensorflow/core/platform/logging.h\"",
          "37: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   const double mel_low = FreqToMel(lower_frequency_limit);",
          "79:   const double mel_hi = FreqToMel(upper_frequency_limit);",
          "80:   const double mel_span = mel_hi - mel_low;",
          "",
          "[Removed Lines]",
          "77:   center_frequencies_.resize(num_channels_ + 1);",
          "",
          "[Added Lines]",
          "79:   std::size_t center_frequencies_size = std::size_t(num_channels_) + 1;",
          "80:   if (center_frequencies_size >= std::numeric_limits<int>::max() ||",
          "81:       center_frequencies_size > center_frequencies_.max_size()) {",
          "82:     LOG(ERROR) << \"Number of filterbank channels must be less than \"",
          "83:                << std::numeric_limits<int>::max()",
          "84:                << \" and less than or equal to \"",
          "85:                << center_frequencies_.max_size();",
          "86:     return false;",
          "87:   }",
          "88:   center_frequencies_.resize(center_frequencies_size);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc||tensorflow/core/kernels/mfcc_mel_filterbank_test.cc": [
          "File: tensorflow/core/kernels/mfcc_mel_filterbank_test.cc -> tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"",
          "18: #include <vector>",
          "20: #include \"tensorflow/core/platform/test.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   }",
          "86: }",
          "88: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {",
          "94:   MfccMelFilterbank filterbank;",
          "96:   const int kSampleCount = 513;",
          "97:   std::size_t num_channels = std::numeric_limits<int>::max();",
          "98:   bool initialized = filterbank.Initialize(",
          "99:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
          "100:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
          "102:   EXPECT_FALSE(initialized);",
          "103: }",
          "105: TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {",
          "109:   MfccMelFilterbank filterbank;",
          "111:   const int kSampleCount = 513;",
          "114:   std::size_t num_channels = std::vector<double>().max_size() + 1;",
          "115:   bool initialized = filterbank.Initialize(",
          "116:       kSampleCount, 2 /* sample rate */, num_channels /* channels */,",
          "117:       1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);",
          "119:   EXPECT_FALSE(initialized);",
          "120: }",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/mfcc_op.cc||tensorflow/core/kernels/mfcc_op.cc": [
          "File: tensorflow/core/kernels/mfcc_op.cc -> tensorflow/core/kernels/mfcc_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     mfcc.set_lower_frequency_limit(lower_frequency_limit_);",
          "61:     mfcc.set_filterbank_channel_count(filterbank_channel_count_);",
          "62:     mfcc.set_dct_coefficient_count(dct_coefficient_count_);",
          "68:     Tensor* output_tensor = nullptr;",
          "69:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "63:     OP_REQUIRES(context, mfcc.Initialize(spectrogram_channels, sample_rate),",
          "64:                 errors::InvalidArgument(",
          "65:                     \"Mfcc initialization failed for channel count \",",
          "66:                     spectrogram_channels, \" and sample rate \", sample_rate));",
          "",
          "[Added Lines]",
          "63:     OP_REQUIRES(",
          "64:         context, mfcc.Initialize(spectrogram_channels, sample_rate),",
          "65:         errors::InvalidArgument(\"Mfcc initialization failed for channel count \",",
          "66:                                 spectrogram_channels, \", sample rate \",",
          "67:                                 sample_rate, \" and filterbank_channel_count \",",
          "68:                                 filterbank_channel_count_));",
          "",
          "---------------"
        ]
      }
    }
  ]
}