{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "dcf585d0c180d9ef939c90bf0af35bcaa0c01bf4",
      "candidate_info": {
        "commit_hash": "dcf585d0c180d9ef939c90bf0af35bcaa0c01bf4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/dcf585d0c180d9ef939c90bf0af35bcaa0c01bf4",
        "files": [
          "Lib/test/test_zipfile/_path/test_complexity.py",
          "Lib/test/test_zipfile/_path/test_path.py"
        ],
        "message": "[3.13] Re-order imports to align with zipp 3.18.2 (GH-119587) (#119589)\n\nRe-order imports to align with zipp 3.18.2 (GH-119587)\n(cherry picked from commit 5482a939ac18f4cd861d212c759960af8fa2b19d)\n\nCo-authored-by: Jason R. Coombs <jaraco@jaraco.com>",
        "before_after_code_files": [
          "Lib/test/test_zipfile/_path/test_complexity.py||Lib/test/test_zipfile/_path/test_complexity.py",
          "Lib/test/test_zipfile/_path/test_path.py||Lib/test/test_zipfile/_path/test_path.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_zipfile/_path/test_complexity.py||Lib/test/test_zipfile/_path/test_complexity.py": [
          "File: Lib/test/test_zipfile/_path/test_complexity.py -> Lib/test/test_zipfile/_path/test_complexity.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     @pytest.mark.flaky",
          "21:     def test_implied_dirs_performance(self):",
          "22:         best, others = big_o.big_o(",
          "24:             lambda size: [",
          "25:                 '/'.join(string.ascii_lowercase + str(n)) for n in range(size)",
          "26:             ],",
          "",
          "[Removed Lines]",
          "23:             compose(consume, zipfile.CompleteDirs._implied_dirs),",
          "",
          "[Added Lines]",
          "23:             compose(consume, zipfile._path.CompleteDirs._implied_dirs),",
          "",
          "---------------"
        ],
        "Lib/test/test_zipfile/_path/test_path.py||Lib/test/test_zipfile/_path/test_path.py": [
          "File: Lib/test/test_zipfile/_path/test_path.py -> Lib/test/test_zipfile/_path/test_path.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import zipfile",
          "9: import zipfile._path",
          "11: from ._functools import compose",
          "12: from ._itertools import Counter",
          "14: from ._test_params import parameterize, Invoked",
          "19: class jaraco:",
          "20:     class itertools:",
          "",
          "[Removed Lines]",
          "16: from test.support.os_helper import temp_dir, FakePath",
          "",
          "[Added Lines]",
          "11: from test.support.os_helper import temp_dir, FakePath",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c2de86b5bd5c70390b5a7512e211bd13ff5e7cf",
      "candidate_info": {
        "commit_hash": "9c2de86b5bd5c70390b5a7512e211bd13ff5e7cf",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9c2de86b5bd5c70390b5a7512e211bd13ff5e7cf",
        "files": [
          "Lib/test/pythoninfo.py"
        ],
        "message": "[3.13] gh-119132: Log sys._is_gil_enabled() in test.pythoninfo (GH-119140) (#119143)\n\ngh-119132: Log sys._is_gil_enabled() in test.pythoninfo (GH-119140)\n(cherry picked from commit 74072a3ffc733e32159e694bcf7a2198f2db0d43)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/test/pythoninfo.py||Lib/test/pythoninfo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/pythoninfo.py||Lib/test/pythoninfo.py": [
          "File: Lib/test/pythoninfo.py -> Lib/test/pythoninfo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     )",
          "106:     copy_attributes(info_add, sys, 'sys.%s', attributes)",
          "112:     encoding = sys.getfilesystemencoding()",
          "113:     if hasattr(sys, 'getfilesystemencodeerrors'):",
          "",
          "[Removed Lines]",
          "108:     call_func(info_add, 'sys.androidapilevel', sys, 'getandroidapilevel')",
          "109:     call_func(info_add, 'sys.windowsversion', sys, 'getwindowsversion')",
          "110:     call_func(info_add, 'sys.getrecursionlimit', sys, 'getrecursionlimit')",
          "",
          "[Added Lines]",
          "108:     for func in (",
          "109:         '_is_gil_enabled',",
          "110:         'getandroidapilevel',",
          "111:         'getrecursionlimit',",
          "112:         'getwindowsversion',",
          "113:     ):",
          "114:         call_func(info_add, f'sys.{func}', sys, func)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "355d928e55d7c82f91989d08653215cb7e151c6e",
      "candidate_info": {
        "commit_hash": "355d928e55d7c82f91989d08653215cb7e151c6e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/355d928e55d7c82f91989d08653215cb7e151c6e",
        "files": [
          "Lib/test/test_unittest/testmock/testmock.py",
          "Lib/unittest/mock.py",
          "Misc/NEWS.d/next/Library/2024-06-19-15-06-58.gh-issue-120732.OvYV9b.rst"
        ],
        "message": "[3.13] gh-120732: Fix `name` passing to `Mock`, when using kwargs to `create_autospec` (GH-120737) (#120760)\n\ngh-120732: Fix `name` passing to `Mock`, when using kwargs to `create_autospec` (GH-120737)\n(cherry picked from commit 1e4815692f6c8a37a3974d0d7d2025494d026d76)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_unittest/testmock/testmock.py||Lib/test/test_unittest/testmock/testmock.py",
          "Lib/unittest/mock.py||Lib/unittest/mock.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_unittest/testmock/testmock.py||Lib/test/test_unittest/testmock/testmock.py": [
          "File: Lib/test/test_unittest/testmock/testmock.py -> Lib/test/test_unittest/testmock/testmock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         # pass kwargs with respect to the parent mock.",
          "130:         self.assertEqual(class_mock().return_value.meth.side_effect, None)",
          "132:     def test_repr(self):",
          "133:         mock = Mock(name='foo')",
          "134:         self.assertIn('foo', repr(mock))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     def test_create_autospec_correctly_handles_name(self):",
          "133:         class X: ...",
          "134:         mock = create_autospec(X, spec_set=True, name=\"Y\")",
          "135:         self.assertEqual(mock._mock_name, \"Y\")",
          "",
          "---------------"
        ],
        "Lib/unittest/mock.py||Lib/unittest/mock.py": [
          "File: Lib/unittest/mock.py -> Lib/unittest/mock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2755:     if not unsafe:",
          "2756:         _check_spec_arg_typos(kwargs)",
          "2758:     _kwargs.update(kwargs)",
          "2760:     Klass = MagicMock",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2758:     _name = kwargs.pop('name', _name)",
          "2759:     _new_name = _name",
          "2760:     if _parent is None:",
          "2761:         # for a top level object no _new_name should be set",
          "2762:         _new_name = ''",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2772:     elif is_type and instance and not _instance_callable(spec):",
          "2773:         Klass = NonCallableMagicMock",
          "2782:     mock = Klass(parent=_parent, _new_parent=_parent, _new_name=_new_name,",
          "2783:                  name=_name, **_kwargs)",
          "",
          "[Removed Lines]",
          "2775:     _name = _kwargs.pop('name', _name)",
          "2777:     _new_name = _name",
          "2778:     if _parent is None:",
          "2779:         # for a top level object no _new_name should be set",
          "2780:         _new_name = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3074f0d5ec4ead75ecce10bf7b7a1459cbf892e",
      "candidate_info": {
        "commit_hash": "b3074f0d5ec4ead75ecce10bf7b7a1459cbf892e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b3074f0d5ec4ead75ecce10bf7b7a1459cbf892e",
        "files": [
          "Lib/test/test_typing.py",
          "Lib/typing.py"
        ],
        "message": "[3.13] Rename typing._collect_parameters (GH-118900) (#118917)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_typing.py||Lib/test/test_typing.py",
          "Lib/typing.py||Lib/typing.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_typing.py||Lib/test/test_typing.py": [
          "File: Lib/test/test_typing.py -> Lib/test/test_typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: import weakref",
          "46: import types",
          "49: from test.typinganndata import ann_module695, mod_generics_cache, _typed_dict_helper",
          "",
          "[Removed Lines]",
          "48: from test.support import captured_stderr, cpython_only, infinite_recursion, requires_docstrings",
          "",
          "[Added Lines]",
          "48: from test.support import captured_stderr, cpython_only, infinite_recursion, requires_docstrings, import_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6325:         self.assertEqual(X | \"x\", Union[X, \"x\"])",
          "6326:         self.assertEqual(\"x\" | X, Union[\"x\", X])",
          "6328:     def test_deprecation_for_no_type_params_passed_to__evaluate(self):",
          "6329:         with self.assertWarnsRegex(",
          "6330:             DeprecationWarning,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6329: class InternalsTests(BaseTestCase):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6351:         self.assertEqual(cm.filename, __file__)",
          "6354: @lru_cache()",
          "6355: def cached_func(x, y):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6355:     def test_collect_parameters(self):",
          "6356:         typing = import_helper.import_fresh_module(\"typing\")",
          "6357:         with self.assertWarnsRegex(",
          "6358:             DeprecationWarning,",
          "6359:             \"The private _collect_parameters function is deprecated\"",
          "6360:         ) as cm:",
          "6361:             typing._collect_parameters",
          "6362:         self.assertEqual(cm.filename, __file__)",
          "",
          "---------------"
        ],
        "Lib/typing.py||Lib/typing.py": [
          "File: Lib/typing.py -> Lib/typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return repr(obj)",
          "262:     in order of first appearance (lexicographic order).",
          "264:     For example::",
          "266:         >>> P = ParamSpec('P')",
          "267:         >>> T = TypeVar('T')",
          "269:         (~T, ~P)",
          "270:     \"\"\"",
          "271:     # required type parameter cannot appear after parameter with default",
          "",
          "[Removed Lines]",
          "260: def _collect_parameters(args, *, enforce_default_ordering: bool = True):",
          "261:     \"\"\"Collect all type variables and parameter specifications in args",
          "268:         >>> _collect_parameters((T, Callable[P, T]))",
          "",
          "[Added Lines]",
          "260: def _collect_type_parameters(args, *, enforce_default_ordering: bool = True):",
          "261:     \"\"\"Collect all type parameters in args",
          "268:         >>> _collect_type_parameters((T, Callable[P, T]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:             # `t` might be a tuple, when `ParamSpec` is substituted with",
          "282:             # `[T, int]`, or `[int, *Ts]`, etc.",
          "283:             for x in t:",
          "285:                     if collected not in parameters:",
          "286:                         parameters.append(collected)",
          "287:         elif hasattr(t, '__typing_subst__'):",
          "",
          "[Removed Lines]",
          "284:                 for collected in _collect_parameters([x]):",
          "",
          "[Added Lines]",
          "284:                 for collected in _collect_type_parameters([x]):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321:         if actual_len < expected_len:",
          "322:             # If the parameter at index `actual_len` in the parameters list",
          "323:             # has a default, then all parameters after it must also have",
          "325:             # That means that no error needs to be raised here, despite",
          "326:             # the number of arguments being passed not matching the number",
          "327:             # of parameters: all parameters that aren't explicitly",
          "",
          "[Removed Lines]",
          "324:             # one, because we validated as much in _collect_parameters().",
          "",
          "[Added Lines]",
          "324:             # one, because we validated as much in _collect_type_parameters().",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1256:     if error:",
          "1257:         raise TypeError(\"Cannot inherit from plain Generic\")",
          "1258:     if '__orig_bases__' in cls.__dict__:",
          "1260:         # Look for Generic[T1, ..., Tn].",
          "1261:         # If found, tvars must be a subset of it.",
          "1262:         # If not found, tvars is it.",
          "",
          "[Removed Lines]",
          "1259:         tvars = _collect_parameters(cls.__orig_bases__)",
          "",
          "[Added Lines]",
          "1259:         tvars = _collect_type_parameters(cls.__orig_bases__)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1418:         self.__args__ = tuple(... if a is _TypingEllipsis else",
          "1419:                               a for a in args)",
          "1420:         enforce_default_ordering = origin in (Generic, Protocol)",
          "1422:             args,",
          "1423:             enforce_default_ordering=enforce_default_ordering,",
          "1424:         )",
          "",
          "[Removed Lines]",
          "1421:         self.__parameters__ = _collect_parameters(",
          "",
          "[Added Lines]",
          "1421:         self.__parameters__ = _collect_type_parameters(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3789:     elif attr in {\"ContextManager\", \"AsyncContextManager\"}:",
          "3790:         import contextlib",
          "3791:         obj = _alias(getattr(contextlib, f\"Abstract{attr}\"), 2, name=attr, defaults=(bool | None,))",
          "3792:     else:",
          "3793:         raise AttributeError(f\"module {__name__!r} has no attribute {attr!r}\")",
          "3794:     globals()[attr] = obj",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3792:     elif attr == \"_collect_parameters\":",
          "3793:         import warnings",
          "3795:         depr_message = (",
          "3796:             \"The private _collect_parameters function is deprecated and will be\"",
          "3797:             \" removed in a future version of Python. Any use of private functions\"",
          "3798:             \" is discouraged and may break in the future.\"",
          "3799:         )",
          "3800:         warnings.warn(depr_message, category=DeprecationWarning, stacklevel=2)",
          "3801:         obj = _collect_type_parameters",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9df7392ebad877fdaa3d6f1c1f1c7504a50efb72",
      "candidate_info": {
        "commit_hash": "9df7392ebad877fdaa3d6f1c1f1c7504a50efb72",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9df7392ebad877fdaa3d6f1c1f1c7504a50efb72",
        "files": [
          "Lib/logging/config.py",
          "Lib/test/test_logging.py",
          "Misc/ACKS"
        ],
        "message": "[3.13] gh-120868: Fix breaking change in `logging.config` when using `QueueHandler` (GH-120872) (GH-121078)\n\n(cherry picked from commit 7d9c68513d112823a9a6cdc7453b998b2c24eb4c)",
        "before_after_code_files": [
          "Lib/logging/config.py||Lib/logging/config.py",
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/logging/config.py||Lib/logging/config.py": [
          "File: Lib/logging/config.py -> Lib/logging/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:                 # if 'handlers' not in config:",
          "781:                     # raise ValueError('No handlers specified for a QueueHandler')",
          "782:                 if 'queue' in config:",
          "787:                     qspec = config['queue']",
          "800:                             raise TypeError('Invalid queue specifier %r' % qspec)",
          "802:                 if 'listener' in config:",
          "803:                     lspec = config['listener']",
          "804:                     if isinstance(lspec, type):",
          "",
          "[Removed Lines]",
          "783:                     from multiprocessing.queues import Queue as MPQueue",
          "784:                     from multiprocessing import Manager as MM",
          "785:                     proxy_queue = MM().Queue()",
          "786:                     proxy_joinable_queue = MM().JoinableQueue()",
          "788:                     if not isinstance(qspec, (queue.Queue, MPQueue,",
          "789:                                       type(proxy_queue), type(proxy_joinable_queue))):",
          "790:                         if isinstance(qspec, str):",
          "791:                             q = self.resolve(qspec)",
          "792:                             if not callable(q):",
          "793:                                 raise TypeError('Invalid queue specifier %r' % qspec)",
          "794:                             q = q()",
          "795:                         elif isinstance(qspec, dict):",
          "796:                             if '()' not in qspec:",
          "797:                                 raise TypeError('Invalid queue specifier %r' % qspec)",
          "798:                             q = self.configure_custom(dict(qspec))",
          "799:                         else:",
          "801:                         config['queue'] = q",
          "",
          "[Added Lines]",
          "785:                     if isinstance(qspec, str):",
          "786:                         q = self.resolve(qspec)",
          "787:                         if not callable(q):",
          "789:                         config['queue'] = q()",
          "790:                     elif isinstance(qspec, dict):",
          "791:                         if '()' not in qspec:",
          "792:                             raise TypeError('Invalid queue specifier %r' % qspec)",
          "793:                         config['queue'] = self.configure_custom(dict(qspec))",
          "794:                     else:",
          "795:                         from multiprocessing.queues import Queue as MPQueue",
          "797:                         if not isinstance(qspec, (queue.Queue, MPQueue)):",
          "798:                             # Safely check if 'qspec' is an instance of Manager.Queue",
          "799:                             # / Manager.JoinableQueue",
          "801:                             from multiprocessing import Manager as MM",
          "802:                             from multiprocessing.managers import BaseProxy",
          "804:                             # if it's not an instance of BaseProxy, it also can't be",
          "805:                             # an instance of Manager.Queue / Manager.JoinableQueue",
          "806:                             if isinstance(qspec, BaseProxy):",
          "807:                                 # Sometimes manager or queue creation might fail",
          "808:                                 # (e.g. see issue gh-120868). In that case, any",
          "809:                                 # exception during the creation of these queues will",
          "810:                                 # propagate up to the caller and be wrapped in a",
          "811:                                 # `ValueError`, whose cause will indicate the details of",
          "812:                                 # the failure.",
          "813:                                 mm = MM()",
          "814:                                 proxy_queue = mm.Queue()",
          "815:                                 proxy_joinable_queue = mm.JoinableQueue()",
          "816:                                 if not isinstance(qspec, (type(proxy_queue), type(proxy_joinable_queue))):",
          "817:                                     raise TypeError('Invalid queue specifier %r' % qspec)",
          "818:                             else:",
          "819:                                 raise TypeError('Invalid queue specifier %r' % qspec)",
          "",
          "---------------"
        ],
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3927:             msg = str(ctx.exception)",
          "3928:             self.assertEqual(msg, \"Unable to configure handler 'ah'\")",
          "3930:     @support.requires_subprocess()",
          "3931:     def test_multiprocessing_queues(self):",
          "3932:         # See gh-119819",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3930:     @threading_helper.requires_working_threading()",
          "3931:     @support.requires_subprocess()",
          "3932:     @patch(\"multiprocessing.Manager\")",
          "3933:     def test_config_queue_handler_does_not_create_multiprocessing_manager(self, manager):",
          "3934:         # gh-120868",
          "3936:         from multiprocessing import Queue as MQ",
          "3938:         q1 = {\"()\": \"queue.Queue\", \"maxsize\": -1}",
          "3939:         q2 = MQ()",
          "3940:         q3 = queue.Queue()",
          "3942:         for qspec in (q1, q2, q3):",
          "3943:             self.apply_config(",
          "3944:                 {",
          "3945:                     \"version\": 1,",
          "3946:                     \"handlers\": {",
          "3947:                         \"queue_listener\": {",
          "3948:                             \"class\": \"logging.handlers.QueueHandler\",",
          "3949:                             \"queue\": qspec,",
          "3950:                         },",
          "3951:                     },",
          "3952:                 }",
          "3953:             )",
          "3954:             manager.assert_not_called()",
          "3956:     @patch(\"multiprocessing.Manager\")",
          "3957:     def test_config_queue_handler_invalid_config_does_not_create_multiprocessing_manager(self, manager):",
          "3958:         # gh-120868",
          "3960:         with self.assertRaises(ValueError):",
          "3961:             self.apply_config(",
          "3962:                 {",
          "3963:                     \"version\": 1,",
          "3964:                     \"handlers\": {",
          "3965:                         \"queue_listener\": {",
          "3966:                             \"class\": \"logging.handlers.QueueHandler\",",
          "3967:                             \"queue\": object(),",
          "3968:                         },",
          "3969:                     },",
          "3970:                 }",
          "3971:             )",
          "3972:         manager.assert_not_called()",
          "",
          "---------------"
        ]
      }
    }
  ]
}