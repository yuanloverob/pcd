{
  "cve_id": "CVE-2023-25155",
  "cve_desc": "Redis is an in-memory database that persists on disk. Authenticated users issuing specially crafted `SRANDMEMBER`, `ZRANDMEMBER`, and `HRANDFIELD` commands can trigger an integer overflow, resulting in a runtime assertion and termination of the Redis server process. This problem affects all Redis versions. Patches were released in Redis version(s) 6.0.18, 6.2.11 and 7.0.9.",
  "repo": "redis/redis",
  "patch_hash": "2a2a582e7cd99ba3b531336b8bd41df2b566e619",
  "patch_info": {
    "commit_hash": "2a2a582e7cd99ba3b531336b8bd41df2b566e619",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/2a2a582e7cd99ba3b531336b8bd41df2b566e619",
    "files": [
      "src/t_hash.c",
      "src/t_set.c",
      "src/t_zset.c",
      "tests/unit/type/hash.tcl",
      "tests/unit/type/set.tcl",
      "tests/unit/type/zset.tcl"
    ],
    "message": "Integer Overflow in RAND commands can lead to assertion (CVE-2023-25155)\n\nIssue happens when passing a negative long value that greater than\nthe max positive value that the long can store.",
    "before_after_code_files": [
      "src/t_hash.c||src/t_hash.c",
      "src/t_set.c||src/t_set.c",
      "src/t_zset.c||src/t_zset.c",
      "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
      "tests/unit/type/set.tcl||tests/unit/type/set.tcl",
      "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
    ]
  },
  "patch_diff": {
    "src/t_hash.c||src/t_hash.c": [
      "File: src/t_hash.c -> src/t_hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1120:     listpackEntry ele;",
      "1122:     if (c->argc >= 3) {",
      "1124:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {",
      "1125:             addReplyErrorObject(c,shared.syntaxerr);",
      "1126:             return;",
      "1127:         } else if (c->argc == 4) {",
      "1128:             withvalues = 1;",
      "1130:                 addReplyError(c,\"value is out of range\");",
      "1131:                 return;",
      "1132:             }",
      "",
      "[Removed Lines]",
      "1123:         if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
      "1129:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
      "",
      "[Added Lines]",
      "1123:         if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
      "1129:             if (l < -LONG_MAX/2 || l > LONG_MAX/2) {",
      "",
      "---------------"
    ],
    "src/t_set.c||src/t_set.c": [
      "File: src/t_set.c -> src/t_set.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "666:     dict *d;",
      "669:     if (l >= 0) {",
      "670:         count = (unsigned long) l;",
      "671:     } else {",
      "",
      "[Removed Lines]",
      "668:     if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
      "",
      "[Added Lines]",
      "668:     if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
      "",
      "---------------"
    ],
    "src/t_zset.c||src/t_zset.c": [
      "File: src/t_zset.c -> src/t_zset.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4289:     listpackEntry ele;",
      "4291:     if (c->argc >= 3) {",
      "4293:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withscores\"))) {",
      "4294:             addReplyErrorObject(c,shared.syntaxerr);",
      "4295:             return;",
      "4296:         } else if (c->argc == 4) {",
      "4297:             withscores = 1;",
      "4299:                 addReplyError(c,\"value is out of range\");",
      "4300:                 return;",
      "4301:             }",
      "",
      "[Removed Lines]",
      "4292:         if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
      "4298:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
      "",
      "[Added Lines]",
      "4292:         if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
      "4298:             if (l < -LONG_MAX/2 || l > LONG_MAX/2) {",
      "",
      "---------------"
    ],
    "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl": [
      "File: tests/unit/type/hash.tcl -> tests/unit/type/hash.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     test \"HRANDFIELD count overflow\" {",
      "75:         r hmset myhash a 1",
      "76:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854770000 withvalues}",
      "77:     } {}",
      "79:     test \"HRANDFIELD with <count> against non existing key\" {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854775808 withvalues}",
      "78:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854775808}",
      "",
      "---------------"
    ],
    "tests/unit/type/set.tcl||tests/unit/type/set.tcl": [
      "File: tests/unit/type/set.tcl -> tests/unit/type/set.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "645:         r srandmember nonexisting_key 100",
      "646:     } {}",
      "648:     # Make sure we can distinguish between an empty array and a null response",
      "649:     r readraw 1",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "648:     test \"SRANDMEMBER count overflow\" {",
      "649:         r sadd myset a",
      "650:         assert_error {*value is out of range*} {r srandmember myset -9223372036854775808}",
      "651:     } {}",
      "",
      "---------------"
    ],
    "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl": [
      "File: tests/unit/type/zset.tcl -> tests/unit/type/zset.tcl",
      "--- Hunk 1 ---",
      "[Context before]",
      "2303:     test \"ZRANDMEMBER count overflow\" {",
      "2304:         r zadd myzset 0 a",
      "2305:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854770000 withscores}",
      "2306:     } {}",
      "2308:     # Make sure we can distinguish between an empty array and a null response",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2306:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854775808 withscores}",
      "2307:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854775808}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe4eb9b10f31e132640f88edee08c96715a7cd8b",
      "candidate_info": {
        "commit_hash": "fe4eb9b10f31e132640f88edee08c96715a7cd8b",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/fe4eb9b10f31e132640f88edee08c96715a7cd8b",
        "files": [
          "src/t_set.c",
          "tests/unit/type/set.tcl"
        ],
        "message": "Integer Overflow in RAND commands can lead to assertion (CVE-2023-25155)\n\nIssue happens when passing a negative long value that greater than\nthe max positive value that the long can store.\n\n(cherry picked from commit 41430af6a821c551abb862666ef896f2c196dea6)\n(cherry picked from commit f335f9c55e76c76531780c5bbf8805410b7b3ba4)",
        "before_after_code_files": [
          "src/t_set.c||src/t_set.c",
          "tests/unit/type/set.tcl||tests/unit/type/set.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/t_set.c||src/t_set.c",
            "tests/unit/type/set.tcl||tests/unit/type/set.tcl"
          ],
          "candidate": [
            "src/t_set.c||src/t_set.c",
            "tests/unit/type/set.tcl||tests/unit/type/set.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/t_set.c||src/t_set.c": [
          "File: src/t_set.c -> src/t_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:     dict *d;",
          "628:     if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "629:     if (l >= 0) {",
          "630:         count = (unsigned long) l;",
          "631:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629:     if (l<-LONG_MAX) {",
          "630:         addReplyError(c, \"value is out of range\");",
          "631:         return;",
          "632:     }",
          "",
          "---------------"
        ],
        "tests/unit/type/set.tcl||tests/unit/type/set.tcl": [
          "File: tests/unit/type/set.tcl -> tests/unit/type/set.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:         r srandmember nonexisting_key 100",
          "555:     } {}",
          "557:     foreach {type contents} {",
          "558:         hashtable {",
          "559:             1 5 10 50 125 50000 33959417 4775547 65434162",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:     test \"SRANDMEMBER count overflow\" {",
          "558:         r sadd myset a",
          "559:         assert_error {*value is out of range*} {r srandmember myset -9223372036854775808}",
          "560:     } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1939b052adc058bd814045a745ec02d3f791d7b",
      "candidate_info": {
        "commit_hash": "b1939b052adc058bd814045a745ec02d3f791d7b",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/b1939b052adc058bd814045a745ec02d3f791d7b",
        "files": [
          "src/t_hash.c",
          "src/t_set.c",
          "src/t_zset.c",
          "tests/unit/type/hash.tcl",
          "tests/unit/type/set.tcl",
          "tests/unit/type/zset.tcl"
        ],
        "message": "Integer Overflow in RAND commands can lead to assertion (CVE-2023-25155) (#11857)\n\nIssue happens when passing a negative long value that greater than\nthe max positive value that the long can store.",
        "before_after_code_files": [
          "src/t_hash.c||src/t_hash.c",
          "src/t_set.c||src/t_set.c",
          "src/t_zset.c||src/t_zset.c",
          "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
          "tests/unit/type/set.tcl||tests/unit/type/set.tcl",
          "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_set.c||src/t_set.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/set.tcl||tests/unit/type/set.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ],
          "candidate": [
            "src/t_hash.c||src/t_hash.c",
            "src/t_set.c||src/t_set.c",
            "src/t_zset.c||src/t_zset.c",
            "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl",
            "tests/unit/type/set.tcl||tests/unit/type/set.tcl",
            "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl"
          ]
        }
      },
      "candidate_diff": {
        "src/t_hash.c||src/t_hash.c": [
          "File: src/t_hash.c -> src/t_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1120:     listpackEntry ele;",
          "1122:     if (c->argc >= 3) {",
          "1124:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {",
          "1125:             addReplyErrorObject(c,shared.syntaxerr);",
          "1126:             return;",
          "1127:         } else if (c->argc == 4) {",
          "1128:             withvalues = 1;",
          "1130:                 addReplyError(c,\"value is out of range\");",
          "1131:                 return;",
          "1132:             }",
          "",
          "[Removed Lines]",
          "1123:         if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "1129:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "",
          "[Added Lines]",
          "1123:         if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
          "1129:             if (l < -LONG_MAX/2 || l > LONG_MAX/2) {",
          "",
          "---------------"
        ],
        "src/t_set.c||src/t_set.c": [
          "File: src/t_set.c -> src/t_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "985:     dict *d;",
          "988:     if (l >= 0) {",
          "989:         count = (unsigned long) l;",
          "990:     } else {",
          "",
          "[Removed Lines]",
          "987:     if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "",
          "[Added Lines]",
          "987:     if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
          "",
          "---------------"
        ],
        "src/t_zset.c||src/t_zset.c": [
          "File: src/t_zset.c -> src/t_zset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4317:     listpackEntry ele;",
          "4319:     if (c->argc >= 3) {",
          "4321:         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withscores\"))) {",
          "4322:             addReplyErrorObject(c,shared.syntaxerr);",
          "4323:             return;",
          "4324:         } else if (c->argc == 4) {",
          "4325:             withscores = 1;",
          "4327:                 addReplyError(c,\"value is out of range\");",
          "4328:                 return;",
          "4329:             }",
          "",
          "[Removed Lines]",
          "4320:         if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
          "4326:             if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
          "",
          "[Added Lines]",
          "4320:         if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
          "4326:             if (l < -LONG_MAX/2 || l > LONG_MAX/2) {",
          "",
          "---------------"
        ],
        "tests/unit/type/hash.tcl||tests/unit/type/hash.tcl": [
          "File: tests/unit/type/hash.tcl -> tests/unit/type/hash.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     test \"HRANDFIELD count overflow\" {",
          "75:         r hmset myhash a 1",
          "76:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854770000 withvalues}",
          "77:     } {}",
          "79:     test \"HRANDFIELD with <count> against non existing key\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854775808 withvalues}",
          "78:         assert_error {*value is out of range*} {r hrandfield myhash -9223372036854775808}",
          "",
          "---------------"
        ],
        "tests/unit/type/set.tcl||tests/unit/type/set.tcl": [
          "File: tests/unit/type/set.tcl -> tests/unit/type/set.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:         r srandmember nonexisting_key 100",
          "746:     } {}",
          "748:     # Make sure we can distinguish between an empty array and a null response",
          "749:     r readraw 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     test \"SRANDMEMBER count overflow\" {",
          "749:         r sadd myset a",
          "750:         assert_error {*value is out of range*} {r srandmember myset -9223372036854775808}",
          "751:     } {}",
          "",
          "---------------"
        ],
        "tests/unit/type/zset.tcl||tests/unit/type/zset.tcl": [
          "File: tests/unit/type/zset.tcl -> tests/unit/type/zset.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2325:     test \"ZRANDMEMBER count overflow\" {",
          "2326:         r zadd myzset 0 a",
          "2327:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854770000 withscores}",
          "2328:     } {}",
          "2330:     # Make sure we can distinguish between an empty array and a null response",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2328:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854775808 withscores}",
          "2329:         assert_error {*value is out of range*} {r zrandmember myzset -9223372036854775808}",
          "",
          "---------------"
        ]
      }
    }
  ]
}