{
  "cve_id": "CVE-2024-25617",
  "cve_desc": "Squid is an open source caching proxy for the Web supporting HTTP, HTTPS, FTP, and more. Due to a Collapse of Data into Unsafe Value bug ,Squid may be vulnerable to a Denial of Service attack against HTTP header parsing. This problem allows a remote client or a remote server to perform Denial of Service when sending oversized headers in HTTP messages. In versions of Squid prior to 6.5 this can be achieved if the request_header_max_size or reply_header_max_size settings are unchanged from the default. In Squid version 6.5 and later, the default setting of these parameters is safe. Squid will emit a critical warning in cache.log if the administrator is setting these parameters to unsafe values. Squid will not at this time prevent these settings from being changed to unsafe values. Users are advised to upgrade to version 6.5. There are no known workarounds for this vulnerability. This issue is also tracked as SQUID-2024:2",
  "repo": "squid-cache/squid",
  "patch_hash": "72a3bbd5e431597c3fdb56d752bc56b010ba3817",
  "patch_info": {
    "commit_hash": "72a3bbd5e431597c3fdb56d752bc56b010ba3817",
    "repo": "squid-cache/squid",
    "commit_url": "https://github.com/squid-cache/squid/commit/72a3bbd5e431597c3fdb56d752bc56b010ba3817",
    "files": [
      "src/SquidString.h",
      "src/cache_cf.cc",
      "src/cf.data.pre",
      "src/http.cc"
    ],
    "message": "Improve handling of expanding HTTP header values (#1536)\n\nSquid manipulations often increase HTTP header value length compared to\nthe corresponding raw value received by Squid. Raw header length is\nchecked against request_header_max_size and reply_header_max_size that\ndefault to 64KB, making the raw value safe to store in a String object\n(by default). However, when the increased length of a manipulated value\nexceeds String class limits, Squid leaks memory, asserts, or possibly\nstalls affected transactions. The long-term fix for this problem is a\ncomplete String elimination from Squid sources, but that takes time.\n\nKnown manipulations may effectively concatenate headers and/or increase\nheader value length by 50%. This workaround makes such known increases\nsafe by essentially tripling String class limits:\n\n    (64KB + 64KB) * 150% = 3 * 64KB\n\nThis bug was discovered and detailed by Joshua Rogers at\nhttps://megamansec.github.io/Squid-Security-Audit/response-memleaks.html\nwhere it was filed as \"Memory Leak in HTTP Response Parsing\".",
    "before_after_code_files": [
      "src/SquidString.h||src/SquidString.h",
      "src/cache_cf.cc||src/cache_cf.cc",
      "src/cf.data.pre||src/cf.data.pre",
      "src/http.cc||src/http.cc"
    ]
  },
  "patch_diff": {
    "src/SquidString.h||src/SquidString.h": [
      "File: src/SquidString.h -> src/SquidString.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "145:     static bool SafeAdd(size_type &base, size_type extra) { if (extra <= SizeMax_ && base <= SizeMax_ - extra) { base += extra; return true; } return false; }",
      "",
      "[Removed Lines]",
      "143:     static const size_type SizeMax_ = 65535; ///< 64K limit protects some fixed-size buffers",
      "",
      "[Added Lines]",
      "151:     static const size_type SizeMax_ = 3*64*1024 - 1;",
      "",
      "---------------"
    ],
    "src/cache_cf.cc||src/cache_cf.cc": [
      "File: src/cache_cf.cc -> src/cache_cf.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1007:                (uint32_t)Config.maxRequestBufferSize, (uint32_t)Config.maxRequestHeaderSize);",
      "1008:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1013:     const auto safeRawHeaderValueSizeMax = (String::SizeMaxXXX()+1)/3;",
      "1015:     if (Config.maxRequestHeaderSize > safeRawHeaderValueSizeMax)",
      "1016:         debugs(3, DBG_CRITICAL, \"WARNING: Increasing request_header_max_size beyond \" << safeRawHeaderValueSizeMax <<",
      "1017:                \" bytes makes Squid more vulnerable to denial-of-service attacks; configured value: \" << Config.maxRequestHeaderSize << \" bytes\");",
      "1018:     if (Config.maxReplyHeaderSize > safeRawHeaderValueSizeMax)",
      "1019:         debugs(3, DBG_CRITICAL, \"WARNING: Increasing reply_header_max_size beyond \" << safeRawHeaderValueSizeMax <<",
      "1020:                \" bytes makes Squid more vulnerable to denial-of-service attacks; configured value: \" << Config.maxReplyHeaderSize << \" bytes\");",
      "",
      "---------------"
    ],
    "src/cf.data.pre||src/cf.data.pre": [
      "File: src/cf.data.pre -> src/cf.data.pre",
      "--- Hunk 1 ---",
      "[Context before]",
      "6753: DEFAULT: 64 KB",
      "6754: LOC: Config.maxRequestHeaderSize",
      "6755: DOC_START",
      "6761: DOC_END",
      "6763: NAME: reply_header_max_size",
      "",
      "[Removed Lines]",
      "6756:  This specifies the maximum size for HTTP headers in a request.",
      "6757:  Request headers are usually relatively small (about 512 bytes).",
      "6758:  Placing a limit on the request header size will catch certain",
      "6759:  bugs (for example with persistent connections) and possibly",
      "6760:  buffer-overflow or denial-of-service attacks.",
      "",
      "[Added Lines]",
      "6756:  This directives limits the header size of a received HTTP request",
      "6757:  (including request-line). Increasing this limit beyond its 64 KB default",
      "6758:  exposes certain old Squid code to various denial-of-service attacks. This",
      "6759:  limit also applies to received FTP commands.",
      "6761:  This limit has no direct affect on Squid memory consumption.",
      "6763:  Squid does not check this limit when sending requests.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6766: DEFAULT: 64 KB",
      "6767: LOC: Config.maxReplyHeaderSize",
      "6768: DOC_START",
      "6774: DOC_END",
      "6776: NAME: request_body_max_size",
      "",
      "[Removed Lines]",
      "6769:  This specifies the maximum size for HTTP headers in a reply.",
      "6770:  Reply headers are usually relatively small (about 512 bytes).",
      "6771:  Placing a limit on the reply header size will catch certain",
      "6772:  bugs (for example with persistent connections) and possibly",
      "6773:  buffer-overflow or denial-of-service attacks.",
      "",
      "[Added Lines]",
      "6772:  This directives limits the header size of a received HTTP response",
      "6773:  (including status-line). Increasing this limit beyond its 64 KB default",
      "6774:  exposes certain old Squid code to various denial-of-service attacks. This",
      "6775:  limit also applies to FTP command responses.",
      "6777:  Squid also checks this limit when loading hit responses from disk cache.",
      "6779:  Squid does not check this limit when sending responses.",
      "",
      "---------------"
    ],
    "src/http.cc||src/http.cc": [
      "File: src/http.cc -> src/http.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1901:         String strFwd = hdr_in->getList(Http::HdrType::X_FORWARDED_FOR);",
      "",
      "[Removed Lines]",
      "1904:         if (!strFwd.canGrowBy(strFwd.size())) {",
      "",
      "[Added Lines]",
      "1905:         if (strFwd.size() > 32*1024 || !strFwd.canGrowBy(strFwd.size())) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "deee944f9a12c9fd399ce52f3e2526bb573a9470",
      "candidate_info": {
        "commit_hash": "deee944f9a12c9fd399ce52f3e2526bb573a9470",
        "repo": "squid-cache/squid",
        "commit_url": "https://github.com/squid-cache/squid/commit/deee944f9a12c9fd399ce52f3e2526bb573a9470",
        "files": [
          "src/time/rfc1123.cc"
        ],
        "message": "RFC 1123: Fix date parsing (#1538)\n\nThe bug was discovered and detailed by Joshua Rogers at\nhttps://megamansec.github.io/Squid-Security-Audit/datetime-overflow.html\nwhere it was filed as \"1-Byte Buffer OverRead in RFC 1123 date/time\nHandling\".",
        "before_after_code_files": [
          "src/time/rfc1123.cc||src/time/rfc1123.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/squid-cache/squid/pull/1544"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/time/rfc1123.cc||src/time/rfc1123.cc": [
          "File: src/time/rfc1123.cc -> src/time/rfc1123.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     char month[3];",
          "52:     month[0] = xtoupper(*s);",
          "53:     month[1] = xtolower(*(s + 1));",
          "54:     month[2] = xtolower(*(s + 2));",
          "56:     for (i = 0; i < 12; i++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     if (!month[0])",
          "54:         return -1; // protects *(s + 1) below",
          "57:     if (!month[1])",
          "58:         return -1; // protects *(s + 2) below",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cac722d9f5da67dd9684b50e075a9e37e23b798c",
      "candidate_info": {
        "commit_hash": "cac722d9f5da67dd9684b50e075a9e37e23b798c",
        "repo": "squid-cache/squid",
        "commit_url": "https://github.com/squid-cache/squid/commit/cac722d9f5da67dd9684b50e075a9e37e23b798c",
        "files": [
          "src/SquidString.h",
          "src/cache_cf.cc",
          "src/cf.data.pre",
          "src/http.cc"
        ],
        "message": "Improve handling of expanding HTTP header values (#1536)\n\nSquid manipulations often increase HTTP header value length compared to\nthe corresponding raw value received by Squid. Raw header length is\nchecked against request_header_max_size and reply_header_max_size that\ndefault to 64KB, making the raw value safe to store in a String object\n(by default). However, when the increased length of a manipulated value\nexceeds String class limits, Squid leaks memory, asserts, or possibly\nstalls affected transactions. The long-term fix for this problem is a\ncomplete String elimination from Squid sources, but that takes time.\n\nKnown manipulations may effectively concatenate headers and/or increase\nheader value length by 50%. This workaround makes such known increases\nsafe by essentially tripling String class limits:\n\n    (64KB + 64KB) * 150% = 3 * 64KB\n\nThis bug was discovered and detailed by Joshua Rogers at\nhttps://megamansec.github.io/Squid-Security-Audit/response-memleaks.html\nwhere it was filed as \"Memory Leak in HTTP Response Parsing\".",
        "before_after_code_files": [
          "src/SquidString.h||src/SquidString.h",
          "src/cache_cf.cc||src/cache_cf.cc",
          "src/cf.data.pre||src/cf.data.pre",
          "src/http.cc||src/http.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/SquidString.h||src/SquidString.h",
            "src/cache_cf.cc||src/cache_cf.cc",
            "src/cf.data.pre||src/cf.data.pre",
            "src/http.cc||src/http.cc"
          ],
          "candidate": [
            "src/SquidString.h||src/SquidString.h",
            "src/cache_cf.cc||src/cache_cf.cc",
            "src/cf.data.pre||src/cf.data.pre",
            "src/http.cc||src/http.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/SquidString.h||src/SquidString.h": [
          "File: src/SquidString.h -> src/SquidString.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     static bool SafeAdd(size_type &base, size_type extra) { if (extra <= SizeMax_ && base <= SizeMax_ - extra) { base += extra; return true; } return false; }",
          "",
          "[Removed Lines]",
          "143:     static const size_type SizeMax_ = 65535; ///< 64K limit protects some fixed-size buffers",
          "",
          "[Added Lines]",
          "151:     static const size_type SizeMax_ = 3*64*1024 - 1;",
          "",
          "---------------"
        ],
        "src/cache_cf.cc||src/cache_cf.cc": [
          "File: src/cache_cf.cc -> src/cache_cf.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "950:                (uint32_t)Config.maxRequestBufferSize, (uint32_t)Config.maxRequestHeaderSize);",
          "951:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956:     const auto safeRawHeaderValueSizeMax = (String::SizeMaxXXX()+1)/3;",
          "958:     if (Config.maxRequestHeaderSize > safeRawHeaderValueSizeMax)",
          "959:         debugs(3, DBG_CRITICAL, \"WARNING: Increasing request_header_max_size beyond \" << safeRawHeaderValueSizeMax <<",
          "960:                \" bytes makes Squid more vulnerable to denial-of-service attacks; configured value: \" << Config.maxRequestHeaderSize << \" bytes\");",
          "961:     if (Config.maxReplyHeaderSize > safeRawHeaderValueSizeMax)",
          "962:         debugs(3, DBG_CRITICAL, \"WARNING: Increasing reply_header_max_size beyond \" << safeRawHeaderValueSizeMax <<",
          "963:                \" bytes makes Squid more vulnerable to denial-of-service attacks; configured value: \" << Config.maxReplyHeaderSize << \" bytes\");",
          "",
          "---------------"
        ],
        "src/cf.data.pre||src/cf.data.pre": [
          "File: src/cf.data.pre -> src/cf.data.pre",
          "--- Hunk 1 ---",
          "[Context before]",
          "6505: DEFAULT: 64 KB",
          "6506: LOC: Config.maxRequestHeaderSize",
          "6507: DOC_START",
          "6513: DOC_END",
          "6515: NAME: reply_header_max_size",
          "",
          "[Removed Lines]",
          "6508:  This specifies the maximum size for HTTP headers in a request.",
          "6509:  Request headers are usually relatively small (about 512 bytes).",
          "6510:  Placing a limit on the request header size will catch certain",
          "6511:  bugs (for example with persistent connections) and possibly",
          "6512:  buffer-overflow or denial-of-service attacks.",
          "",
          "[Added Lines]",
          "6508:  This directives limits the header size of a received HTTP request",
          "6509:  (including request-line). Increasing this limit beyond its 64 KB default",
          "6510:  exposes certain old Squid code to various denial-of-service attacks. This",
          "6511:  limit also applies to received FTP commands.",
          "6513:  This limit has no direct affect on Squid memory consumption.",
          "6515:  Squid does not check this limit when sending requests.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6518: DEFAULT: 64 KB",
          "6519: LOC: Config.maxReplyHeaderSize",
          "6520: DOC_START",
          "6526: DOC_END",
          "6528: NAME: request_body_max_size",
          "",
          "[Removed Lines]",
          "6521:  This specifies the maximum size for HTTP headers in a reply.",
          "6522:  Reply headers are usually relatively small (about 512 bytes).",
          "6523:  Placing a limit on the reply header size will catch certain",
          "6524:  bugs (for example with persistent connections) and possibly",
          "6525:  buffer-overflow or denial-of-service attacks.",
          "",
          "[Added Lines]",
          "6524:  This directives limits the header size of a received HTTP response",
          "6525:  (including status-line). Increasing this limit beyond its 64 KB default",
          "6526:  exposes certain old Squid code to various denial-of-service attacks. This",
          "6527:  limit also applies to FTP command responses.",
          "6529:  Squid also checks this limit when loading hit responses from disk cache.",
          "6531:  Squid does not check this limit when sending responses.",
          "",
          "---------------"
        ],
        "src/http.cc||src/http.cc": [
          "File: src/http.cc -> src/http.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1927:         String strFwd = hdr_in->getList(Http::HdrType::X_FORWARDED_FOR);",
          "",
          "[Removed Lines]",
          "1930:         if (!strFwd.canGrowBy(strFwd.size())) {",
          "",
          "[Added Lines]",
          "1931:         if (strFwd.size() > 32*1024 || !strFwd.canGrowBy(strFwd.size())) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}