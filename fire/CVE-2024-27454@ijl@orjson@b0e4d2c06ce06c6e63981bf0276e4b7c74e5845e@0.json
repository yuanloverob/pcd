{
  "cve_id": "CVE-2024-27454",
  "cve_desc": "orjson.loads in orjson before 3.9.15 does not limit recursion for deeply nested JSON documents.",
  "repo": "ijl/orjson",
  "patch_hash": "b0e4d2c06ce06c6e63981bf0276e4b7c74e5845e",
  "patch_info": {
    "commit_hash": "b0e4d2c06ce06c6e63981bf0276e4b7c74e5845e",
    "repo": "ijl/orjson",
    "commit_url": "https://github.com/ijl/orjson/commit/b0e4d2c06ce06c6e63981bf0276e4b7c74e5845e",
    "files": [
      "README.md",
      "include/yyjson-recursion-limit.patch",
      "include/yyjson/yyjson.c",
      "include/yyjson/yyjson.h",
      "script/vendor-yyjson",
      "test/test_api.py"
    ],
    "message": "yyjson 0eca326, recursion limit",
    "before_after_code_files": [
      "include/yyjson/yyjson.c||include/yyjson/yyjson.c",
      "include/yyjson/yyjson.h||include/yyjson/yyjson.h",
      "test/test_api.py||test/test_api.py"
    ]
  },
  "patch_diff": {
    "include/yyjson/yyjson.c||include/yyjson/yyjson.c": [
      "File: include/yyjson/yyjson.c -> include/yyjson/yyjson.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "307: #define YYJSON_MUT_DOC_VAL_POOL_INIT_SIZE   (0x10 * sizeof(yyjson_mut_val))",
      "308: #define YYJSON_MUT_DOC_VAL_POOL_MAX_SIZE    (0x1000000 * sizeof(yyjson_mut_val))",
      "311: #ifndef YYJSON_DISABLE_READER",
      "312: #define YYJSON_DISABLE_READER 0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "311: #define YYJSON_ALC_DYN_MIN_SIZE             0x1000",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "326: #ifndef YYJSON_DISABLE_UTF8_VALIDATION",
      "327: #define YYJSON_DISABLE_UTF8_VALIDATION 0",
      "328: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "332: #ifndef YYJSON_READER_CONTAINER_RECURSION_LIMIT",
      "333: #define YYJSON_READER_CONTAINER_RECURSION_LIMIT 1024",
      "334: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "998: typedef struct pool_chunk {",
      "1001: } pool_chunk;",
      "1004: typedef struct pool_ctx {",
      "1007: } pool_ctx;",
      "1009: static void *pool_malloc(void *ctx_ptr, usize size) {",
      "1010:     pool_ctx *ctx = (pool_ctx *)ctx_ptr;",
      "1011:     pool_chunk *next, *prev = NULL, *cur = ctx->free_list;",
      "1016:     while (cur) {",
      "1017:         if (cur->size < size) {",
      "",
      "[Removed Lines]",
      "1000:     struct pool_chunk *next;",
      "1006:     pool_chunk *free_list;",
      "1013:     if (unlikely(size == 0 || size >= ctx->size)) return NULL;",
      "1014:     size = size_align_up(size, sizeof(pool_chunk)) + sizeof(pool_chunk);",
      "",
      "[Added Lines]",
      "1025: static_inline void pool_size_align(usize *size) {",
      "1027: }",
      "1034:     if (unlikely(size >= ctx->size)) return NULL;",
      "1035:     pool_size_align(&size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1065: static void *pool_realloc(void *ctx_ptr, void *ptr,",
      "1066:                           usize old_size, usize size) {",
      "1067:     pool_ctx *ctx = (pool_ctx *)ctx_ptr;",
      "1068:     pool_chunk *cur = ((pool_chunk *)ptr) - 1, *prev, *next, *tmp;",
      "1088:     prev = NULL;",
      "",
      "[Removed Lines]",
      "1069:     usize free_size;",
      "1070:     void *new_ptr;",
      "1072:     if (unlikely(size == 0 || size >= ctx->size)) return NULL;",
      "1073:     size = size_align_up(size, sizeof(pool_chunk)) + sizeof(pool_chunk);",
      "1076:     if (unlikely(size <= cur->size)) {",
      "1077:         free_size = cur->size - size;",
      "1078:         if (free_size >= sizeof(pool_chunk) * 2) {",
      "1079:             tmp = (pool_chunk *)(void *)((u8 *)cur + cur->size - free_size);",
      "1080:             tmp->size = free_size;",
      "1081:             pool_free(ctx_ptr, (void *)(tmp + 1));",
      "1082:             cur->size -= free_size;",
      "1083:         }",
      "1084:         return ptr;",
      "1085:     }",
      "",
      "[Added Lines]",
      "1094:     if (unlikely(size >= ctx->size)) return NULL;",
      "1095:     pool_size_align(&old_size);",
      "1096:     pool_size_align(&size);",
      "1097:     if (unlikely(old_size == size)) return ptr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1092:         next = next->next;",
      "1093:     }",
      "1099:         if (free_size > sizeof(pool_chunk) * 2) {",
      "1100:             tmp = (pool_chunk *)(void *)((u8 *)cur + size);",
      "1101:             if (prev) prev->next = tmp;",
      "",
      "[Removed Lines]",
      "1096:     if ((u8 *)cur + cur->size == (u8 *)next &&",
      "1097:         cur->size + next->size >= size) {",
      "1098:         free_size = cur->size + next->size - size;",
      "",
      "[Added Lines]",
      "1107:     if ((u8 *)cur + cur->size == (u8 *)next && cur->size + next->size >= size) {",
      "1109:         usize free_size = cur->size + next->size - size;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1109:             cur->size += next->size;",
      "1110:         }",
      "1111:         return ptr;",
      "1112:     }",
      "1121: }",
      "1123: bool yyjson_alc_pool_init(yyjson_alc *alc, void *buf, usize size) {",
      "",
      "[Removed Lines]",
      "1115:     new_ptr = pool_malloc(ctx_ptr, size - sizeof(pool_chunk));",
      "1116:     if (new_ptr) {",
      "1117:         memcpy(new_ptr, ptr, cur->size - sizeof(pool_chunk));",
      "1118:         pool_free(ctx_ptr, ptr);",
      "1119:     }",
      "1120:     return new_ptr;",
      "",
      "[Added Lines]",
      "1123:     } else {",
      "1125:         void *new_ptr = pool_malloc(ctx_ptr, size - sizeof(pool_chunk));",
      "1126:         if (new_ptr) {",
      "1127:             memcpy(new_ptr, ptr, cur->size - sizeof(pool_chunk));",
      "1128:             pool_free(ctx_ptr, ptr);",
      "1129:         }",
      "1130:         return new_ptr;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1171: typedef struct dyn_chunk {",
      "1173:     struct dyn_chunk *next;",
      "1175: } dyn_chunk;",
      "1178: typedef struct {",
      "1181: } dyn_ctx;",
      "1184: static_inline bool dyn_size_align(usize *size) {",
      "1185:     usize alc_size = *size + sizeof(dyn_chunk);",
      "1186:     alc_size = size_align_up(alc_size, YYJSON_ALC_DYN_MIN_SIZE);",
      "1189:     return true;",
      "1190: }",
      "1193: static_inline void dyn_chunk_list_remove(dyn_chunk *list, dyn_chunk *chunk) {",
      "1194:     dyn_chunk *prev = list, *cur;",
      "1195:     for (cur = prev->next; cur; cur = cur->next) {",
      "1196:         if (cur == chunk) {",
      "1197:             prev->next = cur->next;",
      "1198:             cur->next = NULL;",
      "1199:             return;",
      "1200:         }",
      "1201:         prev = cur;",
      "1202:     }",
      "1203: }",
      "1206: static_inline void dyn_chunk_list_add(dyn_chunk *list, dyn_chunk *chunk) {",
      "1207:     chunk->next = list->next;",
      "1208:     list->next = chunk;",
      "1209: }",
      "1211: static void *dyn_malloc(void *ctx_ptr, usize size) {",
      "1213:     const yyjson_alc def = YYJSON_DEFAULT_ALC;",
      "1214:     dyn_ctx *ctx = (dyn_ctx *)ctx_ptr;",
      "1215:     dyn_chunk *chunk, *prev, *next;",
      "1216:     if (unlikely(!dyn_size_align(&size))) return NULL;",
      "1219:     if (!ctx->free_list.next) {",
      "1220:         chunk = (dyn_chunk *)def.malloc(def.ctx, size);",
      "1221:         if (unlikely(!chunk)) return NULL;",
      "1222:         chunk->size = size;",
      "1223:         chunk->next = NULL;",
      "1224:         dyn_chunk_list_add(&ctx->used_list, chunk);",
      "1225:         return (void *)(chunk + 1);",
      "1226:     }",
      "1229:     prev = &ctx->free_list;",
      "1230:     while (true) {",
      "1231:         chunk = prev->next;",
      "1233:             prev->next = chunk->next;",
      "1234:             dyn_chunk_list_add(&ctx->used_list, chunk);",
      "1235:             return (void *)(chunk + 1);",
      "1236:         }",
      "1238:             chunk = (dyn_chunk *)def.realloc(def.ctx, chunk, chunk->size, size);",
      "1239:             if (unlikely(!chunk)) return NULL;",
      "1240:             prev->next = NULL;",
      "1241:             chunk->size = size;",
      "1242:             dyn_chunk_list_add(&ctx->used_list, chunk);",
      "1243:             return (void *)(chunk + 1);",
      "1244:         }",
      "1245:         prev = chunk;",
      "1246:     }",
      "1247: }",
      "1249: static void *dyn_realloc(void *ctx_ptr, void *ptr,",
      "1250:                           usize old_size, usize size) {",
      "1252:     const yyjson_alc def = YYJSON_DEFAULT_ALC;",
      "1253:     dyn_ctx *ctx = (dyn_ctx *)ctx_ptr;",
      "1254:     dyn_chunk *prev, *next, *new_chunk;",
      "1255:     dyn_chunk *chunk = (dyn_chunk *)ptr - 1;",
      "1256:     if (unlikely(!dyn_size_align(&size))) return NULL;",
      "1257:     if (chunk->size >= size) return ptr;",
      "1259:     dyn_chunk_list_remove(&ctx->used_list, chunk);",
      "1260:     new_chunk = (dyn_chunk *)def.realloc(def.ctx, chunk, chunk->size, size);",
      "1261:     if (likely(new_chunk)) {",
      "1262:         new_chunk->size = size;",
      "1263:         chunk = new_chunk;",
      "1264:     }",
      "1265:     dyn_chunk_list_add(&ctx->used_list, chunk);",
      "1266:     return new_chunk ? (void *)(new_chunk + 1) : NULL;",
      "1267: }",
      "1269: static void dyn_free(void *ctx_ptr, void *ptr) {",
      "1271:     dyn_ctx *ctx = (dyn_ctx *)ctx_ptr;",
      "1272:     dyn_chunk *chunk = (dyn_chunk *)ptr - 1, *prev;",
      "1274:     dyn_chunk_list_remove(&ctx->used_list, chunk);",
      "1275:     for (prev = &ctx->free_list; prev; prev = prev->next) {",
      "1276:         if (!prev->next || prev->next->size >= chunk->size) {",
      "1277:             chunk->next = prev->next;",
      "1278:             prev->next = chunk;",
      "1279:             break;",
      "1280:         }",
      "1281:     }",
      "1282: }",
      "1284: yyjson_alc *yyjson_alc_dyn_new(void) {",
      "1285:     const yyjson_alc def = YYJSON_DEFAULT_ALC;",
      "1286:     usize hdr_len = sizeof(yyjson_alc) + sizeof(dyn_ctx);",
      "1287:     yyjson_alc *alc = (yyjson_alc *)def.malloc(def.ctx, hdr_len);",
      "1288:     dyn_ctx *ctx = (dyn_ctx *)(void *)(alc + 1);",
      "1289:     if (unlikely(!alc)) return NULL;",
      "1290:     alc->malloc = dyn_malloc;",
      "1291:     alc->realloc = dyn_realloc;",
      "1292:     alc->free = dyn_free;",
      "1293:     alc->ctx = alc + 1;",
      "1294:     memset(ctx, 0, sizeof(*ctx));",
      "1295:     return alc;",
      "1296: }",
      "1298: void yyjson_alc_dyn_free(yyjson_alc *alc) {",
      "1299:     const yyjson_alc def = YYJSON_DEFAULT_ALC;",
      "1300:     dyn_ctx *ctx = (dyn_ctx *)(void *)(alc + 1);",
      "1301:     dyn_chunk *chunk, *next;",
      "1302:     if (unlikely(!alc)) return;",
      "1303:     for (chunk = ctx->free_list.next; chunk; chunk = next) {",
      "1304:         next = chunk->next;",
      "1305:         def.free(def.ctx, chunk);",
      "1306:     }",
      "1307:     for (chunk = ctx->used_list.next; chunk; chunk = next) {",
      "1308:         next = chunk->next;",
      "1309:         def.free(def.ctx, chunk);",
      "1310:     }",
      "1311:     def.free(def.ctx, alc);",
      "1312: }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1242: void yyjson_mut_doc_free(yyjson_mut_doc *doc) {",
      "1243:     if (doc) {",
      "1244:         yyjson_alc alc = doc->alc;",
      "1245:         unsafe_yyjson_str_pool_release(&doc->str_pool, &alc);",
      "1246:         unsafe_yyjson_val_pool_release(&doc->val_pool, &alc);",
      "1247:         alc.free(alc.ctx, doc);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1411:         memset(&doc->alc, 0, sizeof(alc));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1540:     yyjson_val_uni *runi = &((yyjson_val *)rhs)->uni;",
      "1541:     yyjson_subtype lt = unsafe_yyjson_get_subtype(lhs);",
      "1542:     yyjson_subtype rt = unsafe_yyjson_get_subtype(rhs);",
      "1546:         return luni->i64 >= 0 && luni->u64 == runi->u64;",
      "1548:         return runi->i64 >= 0 && luni->u64 == runi->u64;",
      "1549:     return false;",
      "1550: }",
      "",
      "[Removed Lines]",
      "1543:     if (lt == rt)",
      "1544:         return luni->u64 == runi->u64;",
      "1545:     if (lt == YYJSON_SUBTYPE_SINT && rt == YYJSON_SUBTYPE_UINT)",
      "1547:     if (lt == YYJSON_SUBTYPE_UINT && rt == YYJSON_SUBTYPE_SINT)",
      "",
      "[Added Lines]",
      "1708:     if (lt == rt) return luni->u64 == runi->u64;",
      "1709:     if (lt == YYJSON_SUBTYPE_SINT && rt == YYJSON_SUBTYPE_UINT) {",
      "1711:     }",
      "1712:     if (lt == YYJSON_SUBTYPE_UINT && rt == YYJSON_SUBTYPE_SINT) {",
      "1714:     }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1571:                 while (len-- > 0) {",
      "1572:                     rhs = yyjson_obj_iter_getn(&iter, lhs->uni.str,",
      "1573:                                                unsafe_yyjson_get_len(lhs));",
      "1576:                     lhs = unsafe_yyjson_get_next(lhs + 1);",
      "1577:                 }",
      "1578:             }",
      "",
      "[Removed Lines]",
      "1574:                     if (!rhs || !unsafe_yyjson_equals(lhs + 1, rhs))",
      "1575:                         return false;",
      "",
      "[Added Lines]",
      "1740:                     if (!rhs) return false;",
      "1741:                     if (!unsafe_yyjson_equals(lhs + 1, rhs)) return false;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1626:                 while (len-- > 0) {",
      "1627:                     rhs = yyjson_mut_obj_iter_getn(&iter, lhs->uni.str,",
      "1628:                                                    unsafe_yyjson_get_len(lhs));",
      "1631:                     lhs = lhs->next->next;",
      "1632:                 }",
      "1633:             }",
      "",
      "[Removed Lines]",
      "1629:                     if (!rhs || !unsafe_yyjson_mut_equals(lhs->next, rhs))",
      "1630:                         return false;",
      "",
      "[Added Lines]",
      "1795:                     if (!rhs) return false;",
      "1796:                     if (!unsafe_yyjson_mut_equals(lhs->next, rhs)) return false;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2506:     builder = yyjson_mut_obj(doc);",
      "2507:     if (unlikely(!builder)) return NULL;",
      "2509:     if (!yyjson_is_obj(orig)) {",
      "2510:         orig = &local_orig;",
      "2511:         orig->tag = builder->tag;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2675:     memset(&local_orig, 0, sizeof(local_orig));",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2557:     builder = yyjson_mut_obj(doc);",
      "2558:     if (unlikely(!builder)) return NULL;",
      "2560:     if (!yyjson_mut_is_obj(orig)) {",
      "2561:         orig = &local_orig;",
      "2562:         orig->tag = builder->tag;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2727:     memset(&local_orig, 0, sizeof(local_orig));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3321: #if !YYJSON_DISABLE_READER",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3682: #if !YYJSON_DISABLE_READER",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "5631:     return_err(cur, UNEXPECTED_CHARACTER, \"unexpected character\");",
      "5632: fail_garbage:",
      "5633:     return_err(cur, UNEXPECTED_CONTENT, \"unexpected content after document\");",
      "5635: #undef return_err",
      "5636: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5802: fail_recursion:",
      "5803:     return_err(cur, RECURSION_DEPTH, \"array and object recursion depth exceeded\");",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "5722:     }",
      "5724: arr_begin:",
      "5726:     ctn->tag = (((u64)ctn_len + 1) << YYJSON_TAG_BIT) |",
      "5727:                (ctn->tag & YYJSON_TAG_MASK);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5896:     container_depth++;",
      "5897:     if (unlikely(container_depth >= YYJSON_READER_CONTAINER_RECURSION_LIMIT)) {",
      "5898:         goto fail_recursion;",
      "5899:     }",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5821:     goto fail_character;",
      "5823: arr_end:",
      "5825:     ctn_parent = (yyjson_val *)(void *)((u8 *)ctn - ctn->uni.ofs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6000:     container_depth--;",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "5839:     }",
      "5841: obj_begin:",
      "5843:     ctn->tag = (((u64)ctn_len + 1) << YYJSON_TAG_BIT) |",
      "5844:                (ctn->tag & YYJSON_TAG_MASK);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6020:     container_depth++;",
      "6021:     if (unlikely(container_depth >= YYJSON_READER_CONTAINER_RECURSION_LIMIT)) {",
      "6022:         goto fail_recursion;",
      "6023:     }",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "5967:     goto fail_character;",
      "5969: obj_end:",
      "5971:     ctn_parent = (yyjson_val *)(void *)((u8 *)ctn - ctn->uni.ofs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6153:     container_depth--;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6018:     return_err(cur, UNEXPECTED_CHARACTER, \"unexpected character\");",
      "6019: fail_garbage:",
      "6020:     return_err(cur, UNEXPECTED_CONTENT, \"unexpected content after document\");",
      "6022: #undef val_incr",
      "6023: #undef return_err",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6206: fail_recursion:",
      "6207:     return_err(cur, RECURSION_DEPTH, \"array and object recursion depth exceeded\");",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6112:     }",
      "6114: arr_begin:",
      "6116:     ctn->tag = (((u64)ctn_len + 1) << YYJSON_TAG_BIT) |",
      "6117:                (ctn->tag & YYJSON_TAG_MASK);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6303:     container_depth++;",
      "6304:     if (unlikely(container_depth >= YYJSON_READER_CONTAINER_RECURSION_LIMIT)) {",
      "6305:         goto fail_recursion;",
      "6306:     }",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "6228:     goto fail_character;",
      "6230: arr_end:",
      "6232:     ctn_parent = (yyjson_val *)(void *)((u8 *)ctn - ctn->uni.ofs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6424:     container_depth--;",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "6247:     }",
      "6249: obj_begin:",
      "6251:     ctn->tag = (((u64)ctn_len + 1) << YYJSON_TAG_BIT) |",
      "6252:                (ctn->tag & YYJSON_TAG_MASK);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6445:     container_depth++;",
      "6446:     if (unlikely(container_depth >= YYJSON_READER_CONTAINER_RECURSION_LIMIT)) {",
      "6447:         goto fail_recursion;",
      "6448:     }",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "6395:     goto fail_character;",
      "6397: obj_end:",
      "6399:     ctn_parent = (yyjson_val *)(void *)((u8 *)ctn - ctn->uni.ofs);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6598:     container_depth--;",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "6447:     return_err(cur, UNEXPECTED_CHARACTER, \"unexpected character\");",
      "6448: fail_garbage:",
      "6449:     return_err(cur, UNEXPECTED_CONTENT, \"unexpected content after document\");",
      "6451: #undef val_incr",
      "6452: #undef return_err",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6652: fail_recursion:",
      "6653:     return_err(cur, RECURSION_DEPTH, \"array and object recursion depth exceeded\");",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "8143:     bool cpy = (enc_table == enc_table_cpy);",
      "8144:     bool esc = has_write_flag(ESCAPE_UNICODE) != 0;",
      "8145:     bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;",
      "8147:     switch (unsafe_yyjson_get_type(val)) {",
      "8148:         case YYJSON_TYPE_RAW:",
      "8149:             str_len = unsafe_yyjson_get_len(val);",
      "8150:             str_ptr = (const u8 *)unsafe_yyjson_get_str(val);",
      "8151:             check_str_len(str_len);",
      "8153:             cur = write_raw(cur, str_ptr, str_len);",
      "8154:             break;",
      "",
      "[Removed Lines]",
      "8152:             incr_len(str_len + 1);",
      "",
      "[Added Lines]",
      "8350:     bool newline = has_write_flag(NEWLINE_AT_END) != 0;",
      "8358:             incr_len(str_len + end_len);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "8157:             str_len = unsafe_yyjson_get_len(val);",
      "8158:             str_ptr = (const u8 *)unsafe_yyjson_get_str(val);",
      "8159:             check_str_len(str_len);",
      "8161:             if (likely(cpy) && unsafe_yyjson_get_subtype(val)) {",
      "8162:                 cur = write_string_noesc(cur, str_ptr, str_len);",
      "8163:             } else {",
      "",
      "[Removed Lines]",
      "8160:             incr_len(str_len * 6 + 4);",
      "",
      "[Added Lines]",
      "8366:             incr_len(str_len * 6 + 2 + end_len);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "8167:             break;",
      "8169:         case YYJSON_TYPE_NUM:",
      "8171:             cur = write_number(cur, val, flg);",
      "8172:             if (unlikely(!cur)) goto fail_num;",
      "8173:             break;",
      "",
      "[Removed Lines]",
      "8170:             incr_len(32);",
      "",
      "[Added Lines]",
      "8376:             incr_len(32 + end_len);",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "8183:             break;",
      "8185:         case YYJSON_TYPE_ARR:",
      "8187:             byte_copy_2(cur, \"[]\");",
      "8188:             cur += 2;",
      "8189:             break;",
      "8191:         case YYJSON_TYPE_OBJ:",
      "8193:             byte_copy_2(cur, \"{}\");",
      "8194:             cur += 2;",
      "8195:             break;",
      "",
      "[Removed Lines]",
      "8186:             incr_len(4);",
      "8192:             incr_len(4);",
      "",
      "[Added Lines]",
      "8392:             incr_len(2 + end_len);",
      "8398:             incr_len(2 + end_len);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "8198:             goto fail_type;",
      "8199:     }",
      "8203:     memset(err, 0, sizeof(yyjson_write_err));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8407:     if (newline) *cur++ = '\\n';",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "8270:     bool cpy = (enc_table == enc_table_cpy);",
      "8271:     bool esc = has_write_flag(ESCAPE_UNICODE) != 0;",
      "8272:     bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;",
      "8274:     alc_len = root->uni.ofs / sizeof(yyjson_val);",
      "8275:     alc_len = alc_len * YYJSON_WRITER_ESTIMATED_MINIFY_RATIO + 64;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8480:     bool newline = has_write_flag(NEWLINE_AT_END) != 0;",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "8376:     }",
      "8378: doc_end:",
      "8381:     memset(err, 0, sizeof(yyjson_write_err));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8587:     if (newline) {",
      "8588:         incr_len(2);",
      "8590:         cur++;",
      "8591:     }",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "8449:     bool esc = has_write_flag(ESCAPE_UNICODE) != 0;",
      "8450:     bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;",
      "8451:     usize spaces = has_write_flag(PRETTY_TWO_SPACES) ? 2 : 4;",
      "8453:     alc_len = root->uni.ofs / sizeof(yyjson_val);",
      "8454:     alc_len = alc_len * YYJSON_WRITER_ESTIMATED_PRETTY_RATIO + 64;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8665:     bool newline = has_write_flag(NEWLINE_AT_END) != 0;",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "8579:     }",
      "8581: doc_end:",
      "8584:     memset(err, 0, sizeof(yyjson_write_err));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8796:     if (newline) {",
      "8797:         incr_len(2);",
      "8799:     }",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "8811:     bool cpy = (enc_table == enc_table_cpy);",
      "8812:     bool esc = has_write_flag(ESCAPE_UNICODE) != 0;",
      "8813:     bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;",
      "8815:     alc_len = estimated_val_num * YYJSON_WRITER_ESTIMATED_MINIFY_RATIO + 64;",
      "8816:     alc_len = size_align_up(alc_len, sizeof(yyjson_mut_write_ctx));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9032:     bool newline = has_write_flag(NEWLINE_AT_END) != 0;",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "8921:     }",
      "8923: doc_end:",
      "8926:     err->code = YYJSON_WRITE_SUCCESS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9143:     if (newline) {",
      "9144:         incr_len(2);",
      "9146:         cur++;",
      "9147:     }",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "8996:     bool esc = has_write_flag(ESCAPE_UNICODE) != 0;",
      "8997:     bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;",
      "8998:     usize spaces = has_write_flag(PRETTY_TWO_SPACES) ? 2 : 4;",
      "9000:     alc_len = estimated_val_num * YYJSON_WRITER_ESTIMATED_PRETTY_RATIO + 64;",
      "9001:     alc_len = size_align_up(alc_len, sizeof(yyjson_mut_write_ctx));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9223:     bool newline = has_write_flag(NEWLINE_AT_END) != 0;",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "9130:     }",
      "9132: doc_end:",
      "9135:     err->code = YYJSON_WRITE_SUCCESS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9358:     if (newline) {",
      "9359:         incr_len(2);",
      "9361:     }",
      "",
      "---------------"
    ],
    "include/yyjson/yyjson.h||include/yyjson/yyjson.h": [
      "File: include/yyjson/yyjson.h -> include/yyjson/yyjson.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "527: #define YYJSON_VERSION_MAJOR  0",
      "533: #define YYJSON_VERSION_PATCH  0",
      "542: yyjson_api uint32_t yyjson_version(void);",
      "",
      "[Removed Lines]",
      "530: #define YYJSON_VERSION_MINOR  7",
      "536: #define YYJSON_VERSION_HEX    0x000700",
      "539: #define YYJSON_VERSION_STRING \"0.7.0\"",
      "",
      "[Added Lines]",
      "530: #define YYJSON_VERSION_MINOR  8",
      "536: #define YYJSON_VERSION_HEX    0x000800",
      "539: #define YYJSON_VERSION_STRING \"0.8.0\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "635:  function, but the amount of memory required to write a JSON cannot be directly",
      "636:  calculated.",
      "644:  @param alc The allocator to be initialized.",
      "645:     If this parameter is NULL, the function will fail and return false.",
      "",
      "[Removed Lines]",
      "638:  This is not a general-purpose allocator. If used to read multiple JSON",
      "639:  documents and only some of them are released, it may cause memory",
      "640:  fragmentation, leading to performance degradation and memory waste. Therefore,",
      "641:  it is recommended to use this allocator only for reading or writing a single",
      "642:  JSON document.",
      "",
      "[Added Lines]",
      "638:  This is not a general-purpose allocator. It is designed to handle a single JSON",
      "639:  data at a time. If it is used for overly complex memory tasks, such as parsing",
      "640:  multiple JSON documents using the same allocator but releasing only a few of",
      "641:  them, it may cause memory fragmentation, resulting in performance degradation",
      "642:  and memory waste.",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "662:     yyjson_doc *doc = yyjson_read_opts(json, strlen(json), 0, &alc, NULL);",
      "664:  @endcode",
      "666: yyjson_api bool yyjson_alc_pool_init(yyjson_alc *alc, void *buf, size_t size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "666:  @warning This Allocator is not thread-safe.",
      "671:  A dynamic allocator.",
      "673:  This allocator has a similar usage to the pool allocator above. However, when",
      "674:  there is not enough memory, this allocator will dynamically request more memory",
      "675:  using libc's `malloc` function, and frees it all at once when it is destroyed.",
      "677:  @return A new dynamic allocator, or NULL if memory allocation failed.",
      "678:  @note The returned value should be freed with `yyjson_alc_dyn_free()`.",
      "680:  @warning This Allocator is not thread-safe.",
      "682: yyjson_api yyjson_alc *yyjson_alc_dyn_new(void);",
      "685:  Free a dynamic allocator which is created by `yyjson_alc_dyn_new()`.",
      "686:  @param alc The dynamic allocator to be destroyed.",
      "688: yyjson_api void yyjson_alc_dyn_free(yyjson_alc *alc);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "716:     - Report error if double number is infinity.",
      "717:     - Report error if string contains invalid UTF-8 character or BOM.",
      "722:     This option allows the reader to modify and use input data to store string",
      "",
      "[Removed Lines]",
      "719: static const yyjson_read_flag YYJSON_READ_NOFLAG                = 0 << 0;",
      "",
      "[Added Lines]",
      "741: static const yyjson_read_flag YYJSON_READ_NOFLAG                = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "810: static const yyjson_read_code YYJSON_READ_ERROR_FILE_READ               = 13;",
      "813: typedef struct yyjson_read_err {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "835: static const yyjson_read_code YYJSON_READ_ERROR_RECURSION_DEPTH         = 14;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1045:     - Report error on inf or nan number.",
      "1046:     - Report error on invalid UTF-8 string.",
      "1051: static const yyjson_write_flag YYJSON_WRITE_PRETTY                  = 1 << 0;",
      "",
      "[Removed Lines]",
      "1048: static const yyjson_write_flag YYJSON_WRITE_NOFLAG                  = 0 << 0;",
      "",
      "[Added Lines]",
      "1073: static const yyjson_write_flag YYJSON_WRITE_NOFLAG                  = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1075: static const yyjson_write_flag YYJSON_WRITE_PRETTY_TWO_SPACES       = 1 << 6;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1104: static const yyjson_write_flag YYJSON_WRITE_NEWLINE_AT_END          = 1 << 7;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3556:     The `key` should be a null-terminated UTF-8 string.",
      "3557:     This function allows duplicated key in one object.",
      "3561: yyjson_api_inline bool yyjson_mut_obj_add_null(yyjson_mut_doc *doc,",
      "3562:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3559:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3588:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3566:     The `key` should be a null-terminated UTF-8 string.",
      "3567:     This function allows duplicated key in one object.",
      "3571: yyjson_api_inline bool yyjson_mut_obj_add_true(yyjson_mut_doc *doc,",
      "3572:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3569:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3598:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "3576:     The `key` should be a null-terminated UTF-8 string.",
      "3577:     This function allows duplicated key in one object.",
      "3581: yyjson_api_inline bool yyjson_mut_obj_add_false(yyjson_mut_doc *doc,",
      "3582:                                                 yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3579:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3608:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "3586:     The `key` should be a null-terminated UTF-8 string.",
      "3587:     This function allows duplicated key in one object.",
      "3591: yyjson_api_inline bool yyjson_mut_obj_add_bool(yyjson_mut_doc *doc,",
      "3592:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3589:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3618:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "3596:     The `key` should be a null-terminated UTF-8 string.",
      "3597:     This function allows duplicated key in one object.",
      "3601: yyjson_api_inline bool yyjson_mut_obj_add_uint(yyjson_mut_doc *doc,",
      "3602:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3599:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3628:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "3606:     The `key` should be a null-terminated UTF-8 string.",
      "3607:     This function allows duplicated key in one object.",
      "3611: yyjson_api_inline bool yyjson_mut_obj_add_sint(yyjson_mut_doc *doc,",
      "3612:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3609:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3638:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3616:     The `key` should be a null-terminated UTF-8 string.",
      "3617:     This function allows duplicated key in one object.",
      "3621: yyjson_api_inline bool yyjson_mut_obj_add_int(yyjson_mut_doc *doc,",
      "3622:                                               yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3619:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3648:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "3626:     The `key` should be a null-terminated UTF-8 string.",
      "3627:     This function allows duplicated key in one object.",
      "3631: yyjson_api_inline bool yyjson_mut_obj_add_real(yyjson_mut_doc *doc,",
      "3632:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3629:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3658:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "3636:     The `key` and `val` should be null-terminated UTF-8 strings.",
      "3637:     This function allows duplicated key in one object.",
      "3641: yyjson_api_inline bool yyjson_mut_obj_add_str(yyjson_mut_doc *doc,",
      "3642:                                               yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3639:     @warning The key/value string are not copied, you should keep these strings",
      "",
      "[Added Lines]",
      "3668:     @warning The key/value strings are not copied, you should keep these strings",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "3648:     The `len` should be the length of the `val`, in bytes.",
      "3649:     This function allows duplicated key in one object.",
      "3653: yyjson_api_inline bool yyjson_mut_obj_add_strn(yyjson_mut_doc *doc,",
      "3654:                                                yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3651:     @warning The key/value string are not copied, you should keep these strings",
      "",
      "[Added Lines]",
      "3680:     @warning The key/value strings are not copied, you should keep these strings",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "3660:     The value string is copied.",
      "3661:     This function allows duplicated key in one object.",
      "3665: yyjson_api_inline bool yyjson_mut_obj_add_strcpy(yyjson_mut_doc *doc,",
      "3666:                                                  yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3663:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3692:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "3673:     The `len` should be the length of the `val`, in bytes.",
      "3674:     This function allows duplicated key in one object.",
      "3678: yyjson_api_inline bool yyjson_mut_obj_add_strncpy(yyjson_mut_doc *doc,",
      "3679:                                                   yyjson_mut_val *obj,",
      "3680:                                                   const char *key,",
      "3681:                                                   const char *val, size_t len);",
      "3684:     The `key` should be a null-terminated UTF-8 string.",
      "3685:     This function allows duplicated key in one object.",
      "3689: yyjson_api_inline bool yyjson_mut_obj_add_val(yyjson_mut_doc *doc,",
      "3690:                                               yyjson_mut_val *obj,",
      "",
      "[Removed Lines]",
      "3676:     @warning The key/value string are not copied, you should keep these strings",
      "3687:     @warning The key string are not copied, you should keep the string",
      "",
      "[Added Lines]",
      "3705:     @warning The key/value strings are not copied, you should keep these strings",
      "3713:  Creates and adds a new array to the target object.",
      "3714:  The `key` should be a null-terminated UTF-8 string.",
      "3715:  This function allows duplicated key in one object.",
      "3717:  @warning The key string is not copied, you should keep these strings",
      "3718:           unmodified for the lifetime of this JSON document.",
      "3719:  @return The new array, or NULL on error.",
      "3721: yyjson_api_inline yyjson_mut_val *yyjson_mut_obj_add_arr(yyjson_mut_doc *doc,",
      "3722:                                                          yyjson_mut_val *obj,",
      "3723:                                                          const char *key);",
      "3726:  Creates and adds a new object to the target object.",
      "3727:  The `key` should be a null-terminated UTF-8 string.",
      "3728:  This function allows duplicated key in one object.",
      "3730:  @warning The key string is not copied, you should keep these strings",
      "3731:           unmodified for the lifetime of this JSON document.",
      "3732:  @return The new object, or NULL on error.",
      "3734: yyjson_api_inline yyjson_mut_val *yyjson_mut_obj_add_obj(yyjson_mut_doc *doc,",
      "3735:                                                          yyjson_mut_val *obj,",
      "3736:                                                          const char *key);",
      "3742:     @warning The key string is not copied, you should keep the string",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "4781: yyjson_api void yyjson_doc_free(yyjson_doc *doc) {",
      "4782:     if (doc) {",
      "4783:         yyjson_alc alc = doc->alc;",
      "4784:         if (doc->str_pool) alc.free(alc.ctx, doc->str_pool);",
      "4785:         alc.free(alc.ctx, doc);",
      "4786:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4839:         memset(&doc->alc, 0, sizeof(alc));",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6920:     });",
      "6921: }",
      "6923: yyjson_api_inline bool yyjson_mut_obj_add_val(yyjson_mut_doc *doc,",
      "6924:                                               yyjson_mut_val *obj,",
      "6925:                                               const char *_key,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6979: yyjson_api_inline yyjson_mut_val *yyjson_mut_obj_add_arr(yyjson_mut_doc *doc,",
      "6980:                                                          yyjson_mut_val *obj,",
      "6981:                                                          const char *_key) {",
      "6982:     yyjson_mut_val *key = yyjson_mut_str(doc, _key);",
      "6983:     yyjson_mut_val *val = yyjson_mut_arr(doc);",
      "6984:     return yyjson_mut_obj_add(obj, key, val) ? val : NULL;",
      "6985: }",
      "6987: yyjson_api_inline yyjson_mut_val *yyjson_mut_obj_add_obj(yyjson_mut_doc *doc,",
      "6988:                                                          yyjson_mut_val *obj,",
      "6989:                                                          const char *_key) {",
      "6990:     yyjson_mut_val *key = yyjson_mut_str(doc, _key);",
      "6991:     yyjson_mut_val *val = yyjson_mut_obj(doc);",
      "6992:     return yyjson_mut_obj_add(obj, key, val) ? val : NULL;",
      "6993: }",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "7666: }",
      "7672: yyjson_api_inline bool yyjson_ptr_get_uint(",
      "7673:     yyjson_val *root, const char *ptr, uint64_t *value) {",
      "7674:     yyjson_val *val = yyjson_ptr_get(root, ptr);",
      "7680:     }",
      "7681: }",
      "7687: yyjson_api_inline bool yyjson_ptr_get_sint(",
      "7688:     yyjson_val *root, const char *ptr, int64_t *value) {",
      "7689:     yyjson_val *val = yyjson_ptr_get(root, ptr);",
      "7695:     }",
      "7696: }",
      "",
      "[Removed Lines]",
      "7669:  Set provided `value` if the JSON Pointer (RFC 6901) exists and is type uint.",
      "7670:  Returns true if value at `ptr` exists and is the correct type, otherwise false.",
      "7675:     if (value && yyjson_is_uint(val)) {",
      "7677:         return true;",
      "7678:     } else {",
      "7679:         return false;",
      "7684:  Set provided `value` if the JSON Pointer (RFC 6901) exists and is type sint.",
      "7685:  Returns true if value at `ptr` exists and is the correct type, otherwise false.",
      "7690:     if (value && yyjson_is_sint(val)) {",
      "7692:         return true;",
      "7693:     } else {",
      "7694:         return false;",
      "",
      "[Added Lines]",
      "7741:  Set provided `value` if the JSON Pointer (RFC 6901) exists and is an integer",
      "7742:  that fits in `uint64_t`. Returns true if successful, otherwise false.",
      "7747:     if (value && val) {",
      "7748:         uint64_t ret = val->uni.u64;",
      "7749:         if (unsafe_yyjson_is_uint(val) ||",
      "7750:             (unsafe_yyjson_is_sint(val) && !(ret >> 63))) {",
      "7752:             return true;",
      "7753:         }",
      "7755:     return false;",
      "7759:  Set provided `value` if the JSON Pointer (RFC 6901) exists and is an integer",
      "7760:  that fits in `int64_t`. Returns true if successful, otherwise false.",
      "7765:     if (value && val) {",
      "7766:         int64_t ret = val->uni.i64;",
      "7767:         if (unsafe_yyjson_is_sint(val) ||",
      "7768:             (unsafe_yyjson_is_uint(val) && ret >= 0)) {",
      "7770:             return true;",
      "7771:         }",
      "7773:     return false;",
      "",
      "---------------"
    ],
    "test/test_api.py||test/test_api.py": [
      "File: test/test_api.py -> test/test_api.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: SIMPLE_TYPES = (1, 1.0, -1, None, \"str\", True, False)",
      "15: def default(obj):",
      "16:     return str(obj)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: LOADS_RECURSION_LIMIT = 1024",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:         for val in (1, 3.14, [], {}, None):",
      "51:             pytest.raises(orjson.JSONDecodeError, orjson.loads, val)",
      "54:         \"\"\"",
      "56:         \"\"\"",
      "57:         pytest.raises(orjson.JSONDecodeError, orjson.loads, \"[\" * (1024 * 1024))",
      "59:     def test_version(self):",
      "60:         \"\"\"",
      "61:         __version__",
      "",
      "[Removed Lines]",
      "53:     def test_loads_recursion(self):",
      "55:         loads() recursion limit",
      "",
      "[Added Lines]",
      "55:     def test_loads_recursion_partial(self):",
      "57:         loads() recursion limit partial",
      "61:     def test_loads_recursion_valid_limit_array(self):",
      "62:         \"\"\"",
      "63:         loads() recursion limit at limit array",
      "64:         \"\"\"",
      "65:         n = LOADS_RECURSION_LIMIT + 1",
      "66:         value = b\"[\" * n + b\"]\" * n",
      "67:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "69:     def test_loads_recursion_valid_limit_object(self):",
      "70:         \"\"\"",
      "71:         loads() recursion limit at limit object",
      "72:         \"\"\"",
      "73:         n = LOADS_RECURSION_LIMIT",
      "74:         value = b'{\"key\":' * n + b'{\"key\":true}' + b\"}\" * n",
      "75:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "77:     def test_loads_recursion_valid_limit_mixed(self):",
      "78:         \"\"\"",
      "79:         loads() recursion limit at limit mixed",
      "80:         \"\"\"",
      "81:         n = LOADS_RECURSION_LIMIT",
      "82:         value = b\"[\" b'{\"key\":' * n + b'{\"key\":true}' + b\"}\" * n + b\"]\"",
      "83:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "85:     def test_loads_recursion_valid_excessive_array(self):",
      "86:         \"\"\"",
      "87:         loads() recursion limit excessively high value",
      "88:         \"\"\"",
      "89:         n = 10000000",
      "90:         value = b\"[\" * n + b\"]\" * n",
      "91:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "93:     def test_loads_recursion_valid_limit_array_pretty(self):",
      "94:         \"\"\"",
      "95:         loads() recursion limit at limit array pretty",
      "96:         \"\"\"",
      "97:         n = LOADS_RECURSION_LIMIT + 1",
      "98:         value = b\"[\\n  \" * n + b\"]\" * n",
      "99:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "101:     def test_loads_recursion_valid_limit_object_pretty(self):",
      "102:         \"\"\"",
      "103:         loads() recursion limit at limit object pretty",
      "104:         \"\"\"",
      "105:         n = LOADS_RECURSION_LIMIT",
      "106:         value = b'{\\n  \"key\":' * n + b'{\"key\":true}' + b\"}\" * n",
      "107:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "109:     def test_loads_recursion_valid_limit_mixed_pretty(self):",
      "110:         \"\"\"",
      "111:         loads() recursion limit at limit mixed pretty",
      "112:         \"\"\"",
      "113:         n = LOADS_RECURSION_LIMIT",
      "114:         value = b\"[\\n  \" b'{\"key\":' * n + b'{\"key\":true}' + b\"}\" * n + b\"]\"",
      "115:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "117:     def test_loads_recursion_valid_excessive_array_pretty(self):",
      "118:         \"\"\"",
      "119:         loads() recursion limit excessively high value pretty",
      "120:         \"\"\"",
      "121:         n = 10000000",
      "122:         value = b\"[\\n  \" * n + b\"]\" * n",
      "123:         pytest.raises(orjson.JSONDecodeError, orjson.loads, value)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1a2ed9252cd4f7d8dc8cb53bbea8211b766c238",
      "candidate_info": {
        "commit_hash": "a1a2ed9252cd4f7d8dc8cb53bbea8211b766c238",
        "repo": "ijl/orjson",
        "commit_url": "https://github.com/ijl/orjson/commit/a1a2ed9252cd4f7d8dc8cb53bbea8211b766c238",
        "files": [
          "include/yyjson-reduce-unused.patch",
          "include/yyjson/yyjson.c",
          "include/yyjson/yyjson.h",
          "script/vendor-yyjson",
          "src/deserialize/yyjson.rs",
          "src/ffi/yyjson.rs"
        ],
        "message": "yyjson less naive implementation",
        "before_after_code_files": [
          "include/yyjson/yyjson.c||include/yyjson/yyjson.c",
          "include/yyjson/yyjson.h||include/yyjson/yyjson.h",
          "src/deserialize/yyjson.rs||src/deserialize/yyjson.rs",
          "src/ffi/yyjson.rs||src/ffi/yyjson.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/yyjson/yyjson.c||include/yyjson/yyjson.c",
            "include/yyjson/yyjson.h||include/yyjson/yyjson.h"
          ],
          "candidate": [
            "include/yyjson/yyjson.c||include/yyjson/yyjson.c",
            "include/yyjson/yyjson.h||include/yyjson/yyjson.h"
          ]
        }
      },
      "candidate_diff": {
        "include/yyjson/yyjson.c||include/yyjson/yyjson.c": [
          "File: include/yyjson/yyjson.c -> include/yyjson/yyjson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3846:     return false;",
          "3847: }",
          "3858: static_noinline bool read_number_raw(u8 **ptr,",
          "3859:                                      u8 **pre,",
          "",
          "[Removed Lines]",
          "3850: static_inline bool read_inf_or_nan(bool sign, u8 **ptr, u8 **pre,",
          "3851:                                    yyjson_val *val) {",
          "3852:     if (read_inf(sign, ptr, pre, val)) return true;",
          "3853:     if (read_nan(sign, ptr, pre, val)) return true;",
          "3854:     return false;",
          "3855: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3887:     if (unlikely(!digi_is_digit(*cur))) {",
          "3891:         return_err(cur, \"no digit after minus sign\");",
          "3892:     }",
          "",
          "[Removed Lines]",
          "3888:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "3889:             if (read_inf_or_nan(*hdr == '-', &cur, pre, val)) return_raw();",
          "3890:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3997:  Returns true if the input is valid but truncated.",
          "3999: static_noinline bool is_truncated_end(u8 *hdr, u8 *cur, u8 *end,",
          "4002:     if (cur >= end) return true;",
          "4003:     if (code == YYJSON_READ_ERROR_LITERAL) {",
          "4004:         if (is_truncated_str(cur, end, \"true\", true) ||",
          "",
          "[Removed Lines]",
          "4000:                                       yyjson_read_code code,",
          "4001:                                       yyjson_read_flag flg) {",
          "",
          "[Added Lines]",
          "3989:                                       yyjson_read_code code) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4010:     if (code == YYJSON_READ_ERROR_UNEXPECTED_CHARACTER ||",
          "4011:         code == YYJSON_READ_ERROR_INVALID_NUMBER ||",
          "4012:         code == YYJSON_READ_ERROR_LITERAL) {",
          "4014:             if (*cur == '-') cur++;",
          "4015:             if (is_truncated_str(cur, end, \"infinity\", false) ||",
          "4016:                 is_truncated_str(cur, end, \"nan\", false)) {",
          "",
          "[Removed Lines]",
          "4013:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "",
          "[Added Lines]",
          "4001:         if (false) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4019:         }",
          "4020:     }",
          "4021:     if (code == YYJSON_READ_ERROR_UNEXPECTED_CONTENT) {",
          "4023:             if (hdr + 3 <= cur &&",
          "4024:                 is_truncated_str(cur - 3, end, \"infinity\", false)) {",
          "",
          "[Removed Lines]",
          "4022:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "",
          "[Added Lines]",
          "4010:         if (false) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4368:  3. This function (with inline attribute) may generate a lot of instructions.",
          "4370: static_inline bool read_number(u8 **ptr,",
          "4373:                                yyjson_val *val,",
          "4374:                                const char **msg) {",
          "",
          "[Removed Lines]",
          "4371:                                u8 **pre,",
          "4372:                                yyjson_read_flag flg,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4404: } while (false)",
          "4406: #define return_inf() do { \\",
          "4409:     else return_err(hdr, \"number is infinity when parsed as double\"); \\",
          "4410: } while (false)",
          "",
          "[Removed Lines]",
          "4407:     if (has_read_flag(BIGNUM_AS_RAW)) return_raw(); \\",
          "4408:     if (has_read_flag(ALLOW_INF_AND_NAN)) return_f64_bin(F64_RAW_INF); \\",
          "4412: #define return_raw() do { \\",
          "4413:     if (*pre) **pre = '\\0'; /* add null-terminator for previous raw string */ \\",
          "4414:     val->tag = ((u64)(cur - hdr) << YYJSON_TAG_BIT) | YYJSON_TYPE_RAW; \\",
          "4415:     val->uni.str = (const char *)hdr; \\",
          "4417: } while (false)",
          "",
          "[Added Lines]",
          "4393:     if (false) return_f64_bin(F64_RAW_INF); \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4434:     u8 **end = ptr;",
          "4435:     bool sign;",
          "4442:     sign = (*hdr == '-');",
          "4443:     cur += sign;",
          "4454:             return_err(cur, \"no digit after minus sign\");",
          "4455:         }",
          "",
          "[Removed Lines]",
          "4438:     if (unlikely(pre && !has_read_flag(BIGNUM_AS_RAW))) {",
          "4439:         return read_number_raw(ptr, pre, flg, val, msg);",
          "4440:     }",
          "4448:             if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "4449:                 if (read_inf_or_nan(sign, &cur, pre, val)) {",
          "4451:                     return true;",
          "4452:                 }",
          "4453:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4504:     if (!digi_is_digit_or_fp(*cur)) {",
          "4508:             return_f64(normalized_u64_to_f64(sig));",
          "4509:         }",
          "4510:         return_i64(sig);",
          "",
          "[Removed Lines]",
          "4507:             if (has_read_flag(BIGNUM_AS_RAW)) return_raw();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4558:                 cur++;",
          "4560:                 if (sign) {",
          "4562:                     return_f64(normalized_u64_to_f64(sig));",
          "4563:                 }",
          "4564:                 return_i64(sig);",
          "",
          "[Removed Lines]",
          "4561:                     if (has_read_flag(BIGNUM_AS_RAW)) return_raw();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4586:     while (digi_is_digit(*++cur));",
          "4587:     if (!dot_pos) {",
          "4591:         dot_pos = cur;",
          "4592:         if (*cur == '.') {",
          "4593:             if (!digi_is_digit(*++cur)) {",
          "",
          "[Removed Lines]",
          "4588:         if (!digi_is_fp(*cur) && has_read_flag(BIGNUM_AS_RAW)) {",
          "4590:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4980:  This function use libc's strtod() to read floating-point number.",
          "4982: static_inline bool read_number(u8 **ptr,",
          "4985:                                yyjson_val *val,",
          "4986:                                const char **msg) {",
          "",
          "[Removed Lines]",
          "4983:                                u8 **pre,",
          "4984:                                yyjson_read_flag flg,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5016: } while (false)",
          "5018: #define return_inf() do { \\",
          "5021:     else return_err(hdr, \"number is infinity when parsed as double\"); \\",
          "5022: } while (false)",
          "5031:     u64 sig, num;",
          "5032:     u8 *hdr = *ptr;",
          "5033:     u8 *cur = *ptr;",
          "",
          "[Removed Lines]",
          "5019:     if (has_read_flag(BIGNUM_AS_RAW)) return_raw(); \\",
          "5020:     if (has_read_flag(ALLOW_INF_AND_NAN)) return_f64_bin(F64_RAW_INF); \\",
          "5024: #define return_raw() do { \\",
          "5025:     if (*pre) **pre = '\\0'; /* add null-terminator for previous raw string */ \\",
          "5026:     val->tag = ((u64)(cur - hdr) << YYJSON_TAG_BIT) | YYJSON_TYPE_RAW; \\",
          "5027:     val->uni.str = (const char *)hdr; \\",
          "5029: } while (false)",
          "",
          "[Added Lines]",
          "4979:     if (false) return_f64_bin(F64_RAW_INF); \\",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5037:     bool sign;",
          "5041:         return read_number_raw(ptr, pre, flg, val, msg);",
          "5042:     }",
          "",
          "[Removed Lines]",
          "5040:     if (unlikely(pre && !has_read_flag(BIGNUM_AS_RAW))) {",
          "",
          "[Added Lines]",
          "4992:     if (unlikely(false)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5049:     if (unlikely(!digi_is_digit(*cur))) {",
          "5056:         return_err(cur, \"no digit after minus sign\");",
          "5057:     }",
          "5058:     if (*cur == '0') {",
          "",
          "[Removed Lines]",
          "5050:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "5051:             if (read_inf_or_nan(sign, &cur, pre, val)) {",
          "5053:                 return true;",
          "5054:             }",
          "5055:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5081:             sig = num + sig * 10;",
          "5082:             cur++;",
          "5083:             if (sign) {",
          "5085:                 return_f64(normalized_u64_to_f64(sig));",
          "5086:             }",
          "5087:             return_i64(sig);",
          "",
          "[Removed Lines]",
          "5084:                 if (has_read_flag(BIGNUM_AS_RAW)) return_raw();",
          "",
          "[Added Lines]",
          "5030:                 if (false) return_raw();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5093:     if (!digi_is_digit_or_fp(*cur)) {",
          "5095:         if (sign && (sig > ((u64)1 << 63))) {",
          "5097:             return_f64(normalized_u64_to_f64(sig));",
          "5098:         }",
          "5099:         return_i64(sig);",
          "",
          "[Removed Lines]",
          "5096:             if (has_read_flag(BIGNUM_AS_RAW)) return_raw();",
          "",
          "[Added Lines]",
          "5042:             if (false) return_raw();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5102: read_double:",
          "5104:     while (digi_is_digit(*cur)) cur++;",
          "5108:     if (*cur == '.') {",
          "5110:         dot = cur;",
          "",
          "[Removed Lines]",
          "5105:     if (!digi_is_fp(*cur) && has_read_flag(BIGNUM_AS_RAW)) {",
          "5107:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5187: static_inline bool read_string(u8 **ptr,",
          "5188:                                u8 *lst,",
          "5190:                                yyjson_val *val,",
          "5191:                                const char **msg) {",
          "",
          "[Removed Lines]",
          "5189:                                bool inv,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5421:             uni = byte_load_4(src);",
          "5422:         }",
          "5423: #endif",
          "5428:         goto skip_ascii;",
          "5429:     }",
          "",
          "[Removed Lines]",
          "5424:         if (false) {",
          "5425:             if (!inv) return_err(src, \"invalid UTF-8 encoding in string\");",
          "5426:             ++src;",
          "5427:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5486:     } else if (likely(*src == '\"')) {",
          "5487:         val->tag = ((u64)(dst - cur) << YYJSON_TAG_BIT) | YYJSON_TYPE_STR;",
          "5488:         val->uni.str = (const char *)cur;",
          "5491:         return true;",
          "5492:     } else {",
          "5496:     }",
          "5498: copy_ascii:",
          "",
          "[Removed Lines]",
          "5493:         if (!inv) return_err(src, \"unexpected control character in string\");",
          "5494:         if (src >= lst) return_err(src, \"unclosed string\");",
          "",
          "[Added Lines]",
          "5430:         return_err(src, \"unexpected control character in string\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5664:             uni = byte_load_4(src);",
          "5665:         }",
          "5666: #endif",
          "5671:         goto copy_ascii;",
          "5672:     }",
          "5673:     goto copy_escape;",
          "",
          "[Removed Lines]",
          "5667:         if (false) {",
          "5668:             if (!inv) return_err(src, \"invalid UTF-8 encoding in string\");",
          "5669:             goto copy_ascii_stop_1;",
          "5670:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5694:                                              u8 *cur,",
          "5695:                                              u8 *end,",
          "5696:                                              yyjson_alc alc,",
          "5698:                                              yyjson_read_err *err) {",
          "5700: #define return_err(_pos, _code, _msg) do { \\",
          "5702:         err->pos = (usize)(end - hdr); \\",
          "5703:         err->code = YYJSON_READ_ERROR_UNEXPECTED_END; \\",
          "5704:         err->msg = \"unexpected end of data\"; \\",
          "",
          "[Removed Lines]",
          "5697:                                              yyjson_read_flag flg,",
          "5701:     if (is_truncated_end(hdr, _pos, end, YYJSON_READ_ERROR_##_code, flg)) { \\",
          "",
          "[Added Lines]",
          "5631:     if (is_truncated_end(hdr, _pos, end, YYJSON_READ_ERROR_##_code)) { \\",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5730:     val_hdr = (yyjson_val *)alc.malloc(alc.ctx, alc_num * sizeof(yyjson_val));",
          "5731:     if (unlikely(!val_hdr)) goto fail_alloc;",
          "5732:     val = val_hdr + hdr_len;",
          "5738:     if (char_is_number(*cur)) {",
          "5740:         goto fail_number;",
          "5741:     }",
          "5742:     if (*cur == '\"') {",
          "5744:         goto fail_string;",
          "5745:     }",
          "5746:     if (*cur == 't') {",
          "",
          "[Removed Lines]",
          "5733:     raw = has_read_flag(NUMBER_AS_RAW) || has_read_flag(BIGNUM_AS_RAW);",
          "5734:     inv = has_read_flag(ALLOW_INVALID_UNICODE) != 0;",
          "5735:     raw_end = NULL;",
          "5736:     pre = raw ? &raw_end : NULL;",
          "5739:         if (likely(read_number(&cur, pre, flg, val, &msg))) goto doc_end;",
          "5743:         if (likely(read_string(&cur, end, inv, val, &msg))) goto doc_end;",
          "",
          "[Added Lines]",
          "5660:         if (likely(read_number(&cur, val, &msg))) goto doc_end;",
          "5664:         if (likely(read_string(&cur, end, val, &msg))) goto doc_end;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5753:     }",
          "5754:     if (*cur == 'n') {",
          "5755:         if (likely(read_null(&cur, val))) goto doc_end;",
          "5758:         }",
          "5759:         goto fail_literal;",
          "5760:     }",
          "5764:     goto fail_character;",
          "5766: doc_end:",
          "5768:     if (unlikely(cur < end) && !has_read_flag(STOP_WHEN_DONE)) {",
          "5770:             if (!skip_spaces_and_comments(&cur)) {",
          "5771:                 if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "5772:             }",
          "",
          "[Removed Lines]",
          "5756:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "5757:             if (read_nan(false, &cur, pre, val)) goto doc_end;",
          "5761:     if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "5762:         if (read_inf_or_nan(false, &cur, pre, val)) goto doc_end;",
          "5763:     }",
          "5769:         if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "5677:         if (false) {",
          "5678:             if (read_nan(false, &cur, 0, val)) goto doc_end;",
          "5687:         if (false) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5776:         if (unlikely(cur < end)) goto fail_garbage;",
          "5777:     }",
          "5780:     doc = (yyjson_doc *)val_hdr;",
          "5781:     doc->root = val_hdr + hdr_len;",
          "5782:     doc->alc = alc;",
          "5783:     doc->dat_read = (usize)(cur - hdr);",
          "5784:     doc->val_read = 1;",
          "5786:     return doc;",
          "5788: fail_string:",
          "",
          "[Removed Lines]",
          "5779:     if (pre && *pre) **pre = '\\0';",
          "5785:     doc->str_pool = has_read_flag(INSITU) ? NULL : (char *)hdr;",
          "",
          "[Added Lines]",
          "5702:     doc->str_pool = (char *)hdr;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5810:                                            u8 *cur,",
          "5811:                                            u8 *end,",
          "5812:                                            yyjson_alc alc,",
          "5814:                                            yyjson_read_err *err) {",
          "5816: #define return_err(_pos, _code, _msg) do { \\",
          "5818:         err->pos = (usize)(end - hdr); \\",
          "5819:         err->code = YYJSON_READ_ERROR_UNEXPECTED_END; \\",
          "5820:         err->msg = \"unexpected end of data\"; \\",
          "",
          "[Removed Lines]",
          "5813:                                            yyjson_read_flag flg,",
          "5817:     if (is_truncated_end(hdr, _pos, end, YYJSON_READ_ERROR_##_code, flg)) { \\",
          "",
          "[Added Lines]",
          "5733:     if (is_truncated_end(hdr, _pos, end, YYJSON_READ_ERROR_##_code)) { \\",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5877:     val = val_hdr + hdr_len;",
          "5878:     ctn = val;",
          "5879:     ctn_len = 0;",
          "5885:     if (*cur++ == '{') {",
          "5886:         ctn->tag = YYJSON_TYPE_OBJ;",
          "5887:         ctn->uni.ofs = 0;",
          "",
          "[Removed Lines]",
          "5880:     raw = has_read_flag(NUMBER_AS_RAW) || has_read_flag(BIGNUM_AS_RAW);",
          "5881:     inv = has_read_flag(ALLOW_INVALID_UNICODE) != 0;",
          "5882:     raw_end = NULL;",
          "5883:     pre = raw ? &raw_end : NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "5923:     if (char_is_number(*cur)) {",
          "5924:         val_incr();",
          "5925:         ctn_len++;",
          "5927:         goto fail_number;",
          "5928:     }",
          "5929:     if (*cur == '\"') {",
          "5930:         val_incr();",
          "5931:         ctn_len++;",
          "5933:         goto fail_string;",
          "5934:     }",
          "5935:     if (*cur == 't') {",
          "",
          "[Removed Lines]",
          "5926:         if (likely(read_number(&cur, pre, flg, val, &msg))) goto arr_val_end;",
          "5932:         if (likely(read_string(&cur, end, inv, val, &msg))) goto arr_val_end;",
          "",
          "[Added Lines]",
          "5836:         if (likely(read_number(&cur, val, &msg))) goto arr_val_end;",
          "5842:         if (likely(read_string(&cur, end, val, &msg))) goto arr_val_end;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "5948:         val_incr();",
          "5949:         ctn_len++;",
          "5950:         if (likely(read_null(&cur, val))) goto arr_val_end;",
          "5954:         goto fail_literal;",
          "5955:     }",
          "5956:     if (*cur == ']') {",
          "5957:         cur++;",
          "5958:         if (likely(ctn_len == 0)) goto arr_end;",
          "5960:         while (*cur != ',') cur--;",
          "5961:         goto fail_trailing_comma;",
          "5962:     }",
          "",
          "[Removed Lines]",
          "5951:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "5952:             if (read_nan(false, &cur, pre, val)) goto arr_val_end;",
          "5953:         }",
          "5959:         if (has_read_flag(ALLOW_TRAILING_COMMAS)) goto arr_end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5964:         while (char_is_space(*++cur));",
          "5965:         goto arr_val_begin;",
          "5966:     }",
          "5978:     goto fail_character;",
          "5980: arr_val_end:",
          "",
          "[Removed Lines]",
          "5967:     if (has_read_flag(ALLOW_INF_AND_NAN) &&",
          "5968:         (*cur == 'i' || *cur == 'I' || *cur == 'N')) {",
          "5969:         val_incr();",
          "5970:         ctn_len++;",
          "5971:         if (read_inf_or_nan(false, &cur, pre, val)) goto arr_val_end;",
          "5972:         goto fail_character;",
          "5973:     }",
          "5974:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "5975:         if (skip_spaces_and_comments(&cur)) goto arr_val_begin;",
          "5976:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "5977:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5990:         while (char_is_space(*++cur));",
          "5991:         goto arr_val_end;",
          "5992:     }",
          "5994:         if (skip_spaces_and_comments(&cur)) goto arr_val_end;",
          "5995:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "5996:     }",
          "",
          "[Removed Lines]",
          "5993:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "5888:     if (false) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6036:     if (likely(*cur == '\"')) {",
          "6037:         val_incr();",
          "6038:         ctn_len++;",
          "6040:         goto fail_string;",
          "6041:     }",
          "6042:     if (likely(*cur == '}')) {",
          "6043:         cur++;",
          "6044:         if (likely(ctn_len == 0)) goto obj_end;",
          "6046:         while (*cur != ',') cur--;",
          "6047:         goto fail_trailing_comma;",
          "6048:     }",
          "",
          "[Removed Lines]",
          "6039:         if (likely(read_string(&cur, end, inv, val, &msg))) goto obj_key_end;",
          "6045:         if (has_read_flag(ALLOW_TRAILING_COMMAS)) goto obj_end;",
          "",
          "[Added Lines]",
          "5934:         if (likely(read_string(&cur, end, val, &msg))) goto obj_key_end;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6050:         while (char_is_space(*++cur));",
          "6051:         goto obj_key_begin;",
          "6052:     }",
          "6054:         if (skip_spaces_and_comments(&cur)) goto obj_key_begin;",
          "6055:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6056:     }",
          "",
          "[Removed Lines]",
          "6053:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "5947:     if (false) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6065:         while (char_is_space(*++cur));",
          "6066:         goto obj_key_end;",
          "6067:     }",
          "6069:         if (skip_spaces_and_comments(&cur)) goto obj_key_end;",
          "6070:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6071:     }",
          "",
          "[Removed Lines]",
          "6068:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "5962:     if (false) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6075:     if (*cur == '\"') {",
          "6076:         val++;",
          "6077:         ctn_len++;",
          "6079:         goto fail_string;",
          "6080:     }",
          "6081:     if (char_is_number(*cur)) {",
          "6082:         val++;",
          "6083:         ctn_len++;",
          "6085:         goto fail_number;",
          "6086:     }",
          "6087:     if (*cur == '{') {",
          "",
          "[Removed Lines]",
          "6078:         if (likely(read_string(&cur, end, inv, val, &msg))) goto obj_val_end;",
          "6084:         if (likely(read_number(&cur, pre, flg, val, &msg))) goto obj_val_end;",
          "",
          "[Added Lines]",
          "5972:         if (likely(read_string(&cur, end, val, &msg))) goto obj_val_end;",
          "5978:         if (likely(read_number(&cur, val, &msg))) goto obj_val_end;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6108:         val++;",
          "6109:         ctn_len++;",
          "6110:         if (likely(read_null(&cur, val))) goto obj_val_end;",
          "6114:         goto fail_literal;",
          "6115:     }",
          "6116:     if (char_is_space(*cur)) {",
          "6117:         while (char_is_space(*++cur));",
          "6118:         goto obj_val_begin;",
          "6119:     }",
          "6131:     goto fail_character;",
          "6133: obj_val_end:",
          "",
          "[Removed Lines]",
          "6111:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "6112:             if (read_nan(false, &cur, pre, val)) goto obj_val_end;",
          "6113:         }",
          "6120:     if (has_read_flag(ALLOW_INF_AND_NAN) &&",
          "6121:         (*cur == 'i' || *cur == 'I' || *cur == 'N')) {",
          "6122:         val++;",
          "6123:         ctn_len++;",
          "6124:         if (read_inf_or_nan(false, &cur, pre, val)) goto obj_val_end;",
          "6125:         goto fail_character;",
          "6126:     }",
          "6127:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "6128:         if (skip_spaces_and_comments(&cur)) goto obj_val_begin;",
          "6129:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6130:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6143:         while (char_is_space(*++cur));",
          "6144:         goto obj_val_end;",
          "6145:     }",
          "6147:         if (skip_spaces_and_comments(&cur)) goto obj_val_end;",
          "6148:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6149:     }",
          "",
          "[Removed Lines]",
          "6146:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "6026:     if (false) {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6169: doc_end:",
          "6171:     if (unlikely(cur < end) && !has_read_flag(STOP_WHEN_DONE)) {",
          "6173:             skip_spaces_and_comments(&cur);",
          "6174:             if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6175:         } else {",
          "",
          "[Removed Lines]",
          "6172:         if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "6052:         if (false) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6178:         if (unlikely(cur < end)) goto fail_garbage;",
          "6179:     }",
          "6182:     doc = (yyjson_doc *)val_hdr;",
          "6183:     doc->root = val_hdr + hdr_len;",
          "6184:     doc->alc = alc;",
          "",
          "[Removed Lines]",
          "6181:     if (pre && *pre) **pre = '\\0';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6215:                                            u8 *cur,",
          "6216:                                            u8 *end,",
          "6217:                                            yyjson_alc alc,",
          "6219:                                            yyjson_read_err *err) {",
          "6221: #define return_err(_pos, _code, _msg) do { \\",
          "6223:         err->pos = (usize)(end - hdr); \\",
          "6224:         err->code = YYJSON_READ_ERROR_UNEXPECTED_END; \\",
          "6225:         err->msg = \"unexpected end of data\"; \\",
          "",
          "[Removed Lines]",
          "6218:                                            yyjson_read_flag flg,",
          "6222:     if (is_truncated_end(hdr, _pos, end, YYJSON_READ_ERROR_##_code, flg)) { \\",
          "",
          "[Added Lines]",
          "6100:     if (is_truncated_end(hdr, _pos, end, YYJSON_READ_ERROR_##_code)) { \\",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "6282:     val = val_hdr + hdr_len;",
          "6283:     ctn = val;",
          "6284:     ctn_len = 0;",
          "6290:     if (*cur++ == '{') {",
          "6291:         ctn->tag = YYJSON_TYPE_OBJ;",
          "",
          "[Removed Lines]",
          "6285:     raw = has_read_flag(NUMBER_AS_RAW) || has_read_flag(BIGNUM_AS_RAW);",
          "6286:     inv = has_read_flag(ALLOW_INVALID_UNICODE) != 0;",
          "6287:     raw_end = NULL;",
          "6288:     pre = raw ? &raw_end : NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "6343:     if (char_is_number(*cur)) {",
          "6344:         val_incr();",
          "6345:         ctn_len++;",
          "6347:         goto fail_number;",
          "6348:     }",
          "6349:     if (*cur == '\"') {",
          "6350:         val_incr();",
          "6351:         ctn_len++;",
          "6353:         goto fail_string;",
          "6354:     }",
          "6355:     if (*cur == 't') {",
          "",
          "[Removed Lines]",
          "6346:         if (likely(read_number(&cur, pre, flg, val, &msg))) goto arr_val_end;",
          "6352:         if (likely(read_string(&cur, end, inv, val, &msg))) goto arr_val_end;",
          "",
          "[Added Lines]",
          "6216:         if (likely(read_number(&cur, val, &msg))) goto arr_val_end;",
          "6222:         if (likely(read_string(&cur, end, val, &msg))) goto arr_val_end;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6368:         val_incr();",
          "6369:         ctn_len++;",
          "6370:         if (likely(read_null(&cur, val))) goto arr_val_end;",
          "6373:         }",
          "6374:         goto fail_literal;",
          "6375:     }",
          "6376:     if (*cur == ']') {",
          "6377:         cur++;",
          "6378:         if (likely(ctn_len == 0)) goto arr_end;",
          "6380:         while (*cur != ',') cur--;",
          "6381:         goto fail_trailing_comma;",
          "6382:     }",
          "",
          "[Removed Lines]",
          "6371:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "6372:             if (read_nan(false, &cur, pre, val)) goto arr_val_end;",
          "6379:         if (has_read_flag(ALLOW_TRAILING_COMMAS)) goto arr_end;",
          "",
          "[Added Lines]",
          "6241:         if (false) {",
          "6242:             if (read_nan(false, &cur, 0, val)) goto arr_val_end;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6384:         while (char_is_space(*++cur));",
          "6385:         goto arr_val_begin;",
          "6386:     }",
          "6398:     goto fail_character;",
          "6400: arr_val_end:",
          "",
          "[Removed Lines]",
          "6387:     if (has_read_flag(ALLOW_INF_AND_NAN) &&",
          "6388:         (*cur == 'i' || *cur == 'I' || *cur == 'N')) {",
          "6389:         val_incr();",
          "6390:         ctn_len++;",
          "6391:         if (read_inf_or_nan(false, &cur, pre, val)) goto arr_val_end;",
          "6392:         goto fail_character;",
          "6393:     }",
          "6394:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "6395:         if (skip_spaces_and_comments(&cur)) goto arr_val_begin;",
          "6396:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6397:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6414:         while (char_is_space(*++cur));",
          "6415:         goto arr_val_end;",
          "6416:     }",
          "6418:         if (skip_spaces_and_comments(&cur)) goto arr_val_end;",
          "6419:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6420:     }",
          "",
          "[Removed Lines]",
          "6417:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "6275:     if (false) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6473:     if (likely(*cur == '\"')) {",
          "6474:         val_incr();",
          "6475:         ctn_len++;",
          "6477:         goto fail_string;",
          "6478:     }",
          "6479:     if (likely(*cur == '}')) {",
          "6480:         cur++;",
          "6481:         if (likely(ctn_len == 0)) goto obj_end;",
          "6483:         while (*cur != ',') cur--;",
          "6484:         goto fail_trailing_comma;",
          "6485:     }",
          "",
          "[Removed Lines]",
          "6476:         if (likely(read_string(&cur, end, inv, val, &msg))) goto obj_key_end;",
          "6482:         if (has_read_flag(ALLOW_TRAILING_COMMAS)) goto obj_end;",
          "",
          "[Added Lines]",
          "6334:         if (likely(read_string(&cur, end, val, &msg))) goto obj_key_end;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "6487:         while (char_is_space(*++cur));",
          "6488:         goto obj_key_begin;",
          "6489:     }",
          "6491:         if (skip_spaces_and_comments(&cur)) goto obj_key_begin;",
          "6492:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6493:     }",
          "",
          "[Removed Lines]",
          "6490:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "6347:     if (false) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "6506:         while (char_is_space(*++cur));",
          "6507:         goto obj_key_end;",
          "6508:     }",
          "6513:     goto fail_character;",
          "6515: obj_val_begin:",
          "6516:     if (*cur == '\"') {",
          "6517:         val++;",
          "6518:         ctn_len++;",
          "6520:         goto fail_string;",
          "6521:     }",
          "6522:     if (char_is_number(*cur)) {",
          "6523:         val++;",
          "6524:         ctn_len++;",
          "6526:         goto fail_number;",
          "6527:     }",
          "6528:     if (*cur == '{') {",
          "",
          "[Removed Lines]",
          "6509:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "6510:         if (skip_spaces_and_comments(&cur)) goto obj_key_end;",
          "6511:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6512:     }",
          "6519:         if (likely(read_string(&cur, end, inv, val, &msg))) goto obj_val_end;",
          "6525:         if (likely(read_number(&cur, pre, flg, val, &msg))) goto obj_val_end;",
          "",
          "[Added Lines]",
          "6372:         if (likely(read_string(&cur, end, val, &msg))) goto obj_val_end;",
          "6378:         if (likely(read_number(&cur, val, &msg))) goto obj_val_end;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "6549:         val++;",
          "6550:         ctn_len++;",
          "6551:         if (likely(read_null(&cur, val))) goto obj_val_end;",
          "6555:         goto fail_literal;",
          "6556:     }",
          "6557:     if (char_is_space(*cur)) {",
          "6558:         while (char_is_space(*++cur));",
          "6559:         goto obj_val_begin;",
          "6560:     }",
          "6572:     goto fail_character;",
          "6574: obj_val_end:",
          "",
          "[Removed Lines]",
          "6552:         if (has_read_flag(ALLOW_INF_AND_NAN)) {",
          "6553:             if (read_nan(false, &cur, pre, val)) goto obj_val_end;",
          "6554:         }",
          "6561:     if (has_read_flag(ALLOW_INF_AND_NAN) &&",
          "6562:         (*cur == 'i' || *cur == 'I' || *cur == 'N')) {",
          "6563:         val++;",
          "6564:         ctn_len++;",
          "6565:         if (read_inf_or_nan(false, &cur, pre, val)) goto obj_val_end;",
          "6566:         goto fail_character;",
          "6567:     }",
          "6568:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "6569:         if (skip_spaces_and_comments(&cur)) goto obj_val_begin;",
          "6570:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6571:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "6588:         while (char_is_space(*++cur));",
          "6589:         goto obj_val_end;",
          "6590:     }",
          "6595:     goto fail_character;",
          "6597: obj_end:",
          "",
          "[Removed Lines]",
          "6591:     if (has_read_flag(ALLOW_COMMENTS)) {",
          "6592:         if (skip_spaces_and_comments(&cur)) goto obj_val_end;",
          "6593:         if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6594:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "6615: doc_end:",
          "6617:     if (unlikely(cur < end) && !has_read_flag(STOP_WHEN_DONE)) {",
          "6619:             skip_spaces_and_comments(&cur);",
          "6620:             if (byte_match_2(cur, \"/*\")) goto fail_comment;",
          "6621:         } else {",
          "",
          "[Removed Lines]",
          "6618:         if (has_read_flag(ALLOW_COMMENTS)) {",
          "",
          "[Added Lines]",
          "6453:         if (false) {",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "6624:         if (unlikely(cur < end)) goto fail_garbage;",
          "6625:     }",
          "6628:     doc = (yyjson_doc *)val_hdr;",
          "6629:     doc->root = val_hdr + hdr_len;",
          "6630:     doc->alc = alc;",
          "",
          "[Removed Lines]",
          "6627:     if (pre && *pre) **pre = '\\0';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "6665: yyjson_doc *yyjson_read_opts(char *dat,",
          "6666:                              usize len,",
          "6668:                              const yyjson_alc *alc_ptr,",
          "6669:                              yyjson_read_err *err) {",
          "",
          "[Removed Lines]",
          "6667:                              yyjson_read_flag flg,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "6675:     if (!has_read_flag(INSITU) && hdr) alc.free(alc.ctx, (void *)hdr); \\",
          "6676:     return NULL; \\",
          "6677: } while (false)",
          "6680:     yyjson_alc alc;",
          "6681:     yyjson_doc *doc;",
          "6682:     u8 *hdr = NULL, *end, *cur;",
          "6686:     if (!alc_ptr) {",
          "6687:         alc = YYJSON_DEFAULT_ALC;",
          "6688:     } else {",
          "6689:         alc = *alc_ptr;",
          "6690:     }",
          "6718:     if (unlikely(char_is_space_or_comment(*cur))) {",
          "6728:         }",
          "6729:         if (unlikely(cur >= end)) {",
          "6730:             return_err(0, EMPTY_CONTENT, \"input data is empty\");",
          "",
          "[Removed Lines]",
          "6691:     if (unlikely(!dat)) {",
          "6692:         return_err(0, INVALID_PARAMETER, \"input data is NULL\");",
          "6693:     }",
          "6694:     if (unlikely(!len)) {",
          "6695:         return_err(0, INVALID_PARAMETER, \"input length is 0\");",
          "6696:     }",
          "6699:     if (has_read_flag(INSITU)) {",
          "6700:         hdr = (u8 *)dat;",
          "6701:         end = (u8 *)dat + len;",
          "6702:         cur = (u8 *)dat;",
          "6703:     } else {",
          "6704:         if (unlikely(len >= USIZE_MAX - YYJSON_PADDING_SIZE)) {",
          "6705:             return_err(0, MEMORY_ALLOCATION, \"memory allocation failed\");",
          "6706:         }",
          "6707:         hdr = (u8 *)alc.malloc(alc.ctx, len + YYJSON_PADDING_SIZE);",
          "6708:         if (unlikely(!hdr)) {",
          "6709:             return_err(0, MEMORY_ALLOCATION, \"memory allocation failed\");",
          "6710:         }",
          "6711:         end = hdr + len;",
          "6712:         cur = hdr;",
          "6713:         memcpy(hdr, dat, len);",
          "6714:         memset(end, 0, YYJSON_PADDING_SIZE);",
          "6715:     }",
          "6719:         if (has_read_flag(ALLOW_COMMENTS)) {",
          "6720:             if (!skip_spaces_and_comments(&cur)) {",
          "6721:                 return_err(cur - hdr, INVALID_COMMENT,",
          "6722:                            \"unclosed multiline comment\");",
          "6723:             }",
          "6724:         } else {",
          "6725:             if (likely(char_is_space(*cur))) {",
          "6726:                 while (char_is_space(*++cur));",
          "6727:             }",
          "",
          "[Added Lines]",
          "6521:     hdr = (u8 *)alc.malloc(alc.ctx, len + YYJSON_PADDING_SIZE);",
          "6522:     end = hdr + len;",
          "6523:     cur = hdr;",
          "6524:     memcpy(hdr, dat, len);",
          "6525:     memset(end, 0, YYJSON_PADDING_SIZE);",
          "6529:         if (likely(char_is_space(*cur))) {",
          "6530:             while (char_is_space(*++cur));",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "6735:     if (likely(char_is_container(*cur))) {",
          "6736:         if (char_is_space(cur[1]) && char_is_space(cur[2])) {",
          "6738:         } else {",
          "6740:         }",
          "6741:     } else {",
          "6743:     }",
          "6766:     }",
          "6767:     return doc;",
          "",
          "[Removed Lines]",
          "6737:             doc = read_root_pretty(hdr, cur, end, alc, flg, err);",
          "6739:             doc = read_root_minify(hdr, cur, end, alc, flg, err);",
          "6742:         doc = read_root_single(hdr, cur, end, alc, flg, err);",
          "6746:     if (likely(doc)) {",
          "6747:         memset(err, 0, sizeof(yyjson_read_err));",
          "6748:     } else {",
          "6750:         if (err->pos == 0 && err->code != YYJSON_READ_ERROR_MEMORY_ALLOCATION) {",
          "6751:             if ((hdr[0] == 0xEF && hdr[1] == 0xBB && hdr[2] == 0xBF)) {",
          "6752:                 err->msg = \"byte order mark (BOM) is not supported\";",
          "6753:             } else if (len >= 4 &&",
          "6754:                        ((hdr[0] == 0x00 && hdr[1] == 0x00 &&",
          "6755:                          hdr[2] == 0xFE && hdr[3] == 0xFF) ||",
          "6756:                         (hdr[0] == 0xFF && hdr[1] == 0xFE &&",
          "6757:                          hdr[2] == 0x00 && hdr[3] == 0x00))) {",
          "6758:                 err->msg = \"UTF-32 encoding is not supported\";",
          "6759:             } else if (len >= 2 &&",
          "6760:                        ((hdr[0] == 0xFE && hdr[1] == 0xFF) ||",
          "6761:                         (hdr[0] == 0xFF && hdr[1] == 0xFE))) {",
          "6762:                 err->msg = \"UTF-16 encoding is not supported\";",
          "6763:             }",
          "6764:         }",
          "6765:         if (!has_read_flag(INSITU)) alc.free(alc.ctx, (void *)hdr);",
          "",
          "[Added Lines]",
          "6540:             doc = read_root_pretty(hdr, cur, end, alc, err);",
          "6542:             doc = read_root_minify(hdr, cur, end, alc, err);",
          "6545:         doc = read_root_single(hdr, cur, end, alc, err);",
          "6549:     if (unlikely(!doc)) {",
          "6550:         alc.free(alc.ctx, (void *)hdr);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "6879:     memset((u8 *)buf + file_size, 0, YYJSON_PADDING_SIZE);",
          "6880:     flg |= YYJSON_READ_INSITU;",
          "6882:     if (doc) {",
          "6883:         doc->str_pool = (char *)buf;",
          "6884:         return doc;",
          "",
          "[Removed Lines]",
          "6881:     doc = yyjson_read_opts((char *)buf, (usize)file_size, flg, &alc, err);",
          "",
          "[Added Lines]",
          "6666:     doc = yyjson_read_opts((char *)buf, (usize)file_size, &alc, err);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "6940:     hdr[dat_len] = 0;",
          "6941: #endif",
          "6947: #if !YYJSON_HAS_IEEE_754 || YYJSON_DISABLE_FAST_FP_CONV",
          "6949:         if (dat_len >= sizeof(buf)) alc->free(alc->ctx, hdr);",
          "6950:         return_err(cur, INVALID_NUMBER, msg);",
          "6951:     }",
          "",
          "[Removed Lines]",
          "6943:     raw = false;",
          "6944:     raw_end = NULL;",
          "6945:     pre = raw ? &raw_end : NULL;",
          "6948:     if (!read_number(&cur, pre, flg, val, &msg)) {",
          "",
          "[Added Lines]",
          "6729:     if (!read_number(&cur, val, &msg)) {",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "6953:     if (yyjson_is_raw(val)) val->uni.str = dat;",
          "6954:     return dat + (cur - hdr);",
          "6955: #else",
          "6957:         return_err(cur, INVALID_NUMBER, msg);",
          "6958:     }",
          "6959:     return (const char *)cur;",
          "",
          "[Removed Lines]",
          "6956:     if (!read_number(&cur, pre, flg, val, &msg)) {",
          "",
          "[Added Lines]",
          "6737:     if (!read_number(&cur, val, &msg)) {",
          "",
          "---------------"
        ],
        "include/yyjson/yyjson.h||include/yyjson/yyjson.h": [
          "File: include/yyjson/yyjson.h -> include/yyjson/yyjson.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: #define YYJSON_VERSION_MAJOR  0",
          "533: #define YYJSON_VERSION_PATCH  0",
          "542: yyjson_api uint32_t yyjson_version(void);",
          "",
          "[Removed Lines]",
          "530: #define YYJSON_VERSION_MINOR  8",
          "536: #define YYJSON_VERSION_HEX    0x000800",
          "539: #define YYJSON_VERSION_STRING \"0.8.0\"",
          "",
          "[Added Lines]",
          "530: #define YYJSON_VERSION_MINOR  9",
          "536: #define YYJSON_VERSION_HEX    0x000900",
          "539: #define YYJSON_VERSION_STRING \"0.9.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:     the `YYJSON_READ_INSITU` flag.",
          "861:  @param len The length of JSON data in bytes.",
          "862:     If this parameter is 0, the function will fail and return NULL.",
          "865:  @param alc The memory allocator used by JSON reader.",
          "866:     Pass NULL to use the libc's default allocator.",
          "867:  @param err A pointer to receive error information.",
          "",
          "[Removed Lines]",
          "863:  @param flg The JSON read options.",
          "864:     Multiple options can be combined with `|` operator. 0 means no options.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "872: yyjson_api yyjson_doc *yyjson_read_opts(char *dat,",
          "873:                                         size_t len,",
          "875:                                         const yyjson_alc *alc,",
          "876:                                         yyjson_read_err *err);",
          "",
          "[Removed Lines]",
          "874:                                         yyjson_read_flag flg,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "941:                                           yyjson_read_flag flg) {",
          "943:     return yyjson_read_opts((char *)(void *)(size_t)(const void *)dat,",
          "945: }",
          "",
          "[Removed Lines]",
          "944:                             len, flg, NULL, NULL);",
          "",
          "[Added Lines]",
          "941:                             len, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3702:     The `len` should be the length of the `val`, in bytes.",
          "3703:     This function allows duplicated key in one object.",
          "3707: yyjson_api_inline bool yyjson_mut_obj_add_strncpy(yyjson_mut_doc *doc,",
          "3708:                                                   yyjson_mut_val *obj,",
          "",
          "[Removed Lines]",
          "3705:     @warning The key/value strings are not copied, you should keep these strings",
          "",
          "[Added Lines]",
          "3702:     @warning The key strings are not copied, you should keep these strings",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5676:     if (yyjson_likely(doc)) {",
          "5677:         yyjson_mut_val *val = unsafe_yyjson_mut_val(doc, 1);",
          "5678:         if (yyjson_likely(val)) {",
          "5679:             val->tag = YYJSON_TYPE_BOOL | (uint8_t)((uint8_t)_val << 3);",
          "5680:             return val;",
          "5681:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5676:             _val = !!_val;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5928: yyjson_api_inline yyjson_mut_val *yyjson_mut_arr_with_bool(",
          "5929:     yyjson_mut_doc *doc, const bool *vals, size_t count) {",
          "5930:     yyjson_mut_arr_with_func({",
          "5932:     });",
          "5933: }",
          "",
          "[Removed Lines]",
          "5931:         val->tag = YYJSON_TYPE_BOOL | (uint8_t)((uint8_t)vals[i] << 3);",
          "",
          "[Added Lines]",
          "5929:         bool _val = !!vals[i];",
          "5930:         val->tag = YYJSON_TYPE_BOOL | (uint8_t)((uint8_t)_val << 3);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6880:                                                const char *_key,",
          "6881:                                                bool _val) {",
          "6882:     yyjson_mut_obj_add_func({",
          "6883:         val->tag = YYJSON_TYPE_BOOL | (uint8_t)((uint8_t)(_val) << 3);",
          "6884:     });",
          "6885: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6882:         _val = !!_val;",
          "",
          "---------------"
        ],
        "src/deserialize/yyjson.rs||src/deserialize/yyjson.rs": [
          "File: src/deserialize/yyjson.rs -> src/deserialize/yyjson.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: const TAG_TRUE: u8 = 0b00001011;",
          "24: const TAG_UINT64: u8 = 0b00000100;",
          "26: fn yyjson_doc_get_root(doc: *mut yyjson_doc) -> *mut yyjson_val {",
          "27:     unsafe { (*doc).root }",
          "28: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: macro_rules! is_yyjson_tag {",
          "27:     ($elem:expr, $tag:expr) => {",
          "28:         unsafe { (*$elem).tag as u8 == $tag }",
          "29:     };",
          "30: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: }",
          "42: fn unsafe_yyjson_is_ctn(val: *mut yyjson_val) -> bool {",
          "44: }",
          "54: }",
          "56: pub fn deserialize_yyjson(",
          "",
          "[Removed Lines]",
          "43:     unsafe { ((*val).tag as u8) & 0b00000110 == 0b00000110 }",
          "46: fn unsafe_yyjson_get_next(val: *mut yyjson_val) -> *mut yyjson_val {",
          "47:     unsafe {",
          "48:         if unlikely!(unsafe_yyjson_is_ctn(val)) {",
          "49:             ((val as *mut u8).add((*val).uni.ofs)) as *mut yyjson_val",
          "50:         } else {",
          "51:             ((val as *mut u8).add(YYJSON_VAL_SIZE)) as *mut yyjson_val",
          "52:         }",
          "53:     }",
          "",
          "[Added Lines]",
          "49:     unsafe { (*val).tag as u8 & 0b00000110 == 0b00000110 }",
          "52: fn unsafe_yyjson_get_next_container(val: *mut yyjson_val) -> *mut yyjson_val {",
          "53:     unsafe { ((val as *mut u8).add((*val).uni.ofs)) as *mut yyjson_val }",
          "54: }",
          "56: fn unsafe_yyjson_get_next_non_container(val: *mut yyjson_val) -> *mut yyjson_val {",
          "57:     unsafe { ((val as *mut u8).add(YYJSON_VAL_SIZE)) as *mut yyjson_val }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         let msg: Cow<str> = unsafe { core::ffi::CStr::from_ptr(err.msg).to_string_lossy() };",
          "71:         Err(DeserializeError::from_yyjson(msg, err.pos as i64, data))",
          "72:     } else {",
          "77:     }",
          "78: }",
          "80: fn read_doc_default(data: &'static str, err: &mut yyjson_read_err) -> *mut yyjson_doc {",
          "90: }",
          "92: fn read_doc_with_buffer(data: &'static str, err: &mut yyjson_read_err) -> *mut yyjson_doc {",
          "",
          "[Removed Lines]",
          "73:         let root = yyjson_doc_get_root(doc);",
          "74:         let ret = parse_node(root);",
          "75:         unsafe { yyjson_doc_free(doc) };",
          "76:         Ok(ret)",
          "81:     unsafe {",
          "82:         yyjson_read_opts(",
          "83:             data.as_ptr() as *mut c_char,",
          "84:             data.len(),",
          "85:             YYJSON_READ_NOFLAG,",
          "86:             null_mut(),",
          "87:             err,",
          "88:         )",
          "89:     }",
          "",
          "[Added Lines]",
          "77:         let val = yyjson_doc_get_root(doc);",
          "79:         if unlikely!(!unsafe_yyjson_is_ctn(val)) {",
          "80:             let pyval = match ElementType::from_tag(val) {",
          "81:                 ElementType::String => parse_yy_string(val),",
          "82:                 ElementType::Uint64 => parse_yy_u64(val),",
          "83:                 ElementType::Int64 => parse_yy_i64(val),",
          "84:                 ElementType::Double => parse_yy_f64(val),",
          "85:                 ElementType::Null => parse_none(),",
          "86:                 ElementType::True => parse_true(),",
          "87:                 ElementType::False => parse_false(),",
          "88:                 ElementType::Array => unreachable!(),",
          "89:                 ElementType::Object => unreachable!(),",
          "90:             };",
          "91:             unsafe { yyjson_doc_free(doc) };",
          "92:             Ok(pyval)",
          "93:         } else if is_yyjson_tag!(val, TAG_ARRAY) {",
          "94:             let pyval = nonnull!(ffi!(PyList_New(unsafe_yyjson_get_len(val) as isize)));",
          "95:             if unsafe_yyjson_get_len(val) > 0 {",
          "96:                 populate_yy_array(pyval.as_ptr(), val);",
          "97:             }",
          "98:             unsafe { yyjson_doc_free(doc) };",
          "99:             Ok(pyval)",
          "100:         } else {",
          "101:             let pyval = nonnull!(ffi!(_PyDict_NewPresized(",
          "102:                 unsafe_yyjson_get_len(val) as isize",
          "103:             )));",
          "104:             if unsafe_yyjson_get_len(val) > 0 {",
          "105:                 populate_yy_object(pyval.as_ptr(), val);",
          "106:             }",
          "107:             unsafe { yyjson_doc_free(doc) };",
          "108:             Ok(pyval)",
          "109:         }",
          "114:     unsafe { yyjson_read_opts(data.as_ptr() as *mut c_char, data.len(), null_mut(), err) }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:         yyjson_read_opts(",
          "95:             data.as_ptr() as *mut c_char,",
          "96:             data.len(),",
          "98:             &YYJSON_ALLOC.get_or_init(yyjson_init).alloc,",
          "99:             err,",
          "100:         )",
          "",
          "[Removed Lines]",
          "97:             YYJSON_READ_NOFLAG,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:     }",
          "131: }",
          "133: fn parse_yy_string(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "134:     nonnull!(unicode_from_str(str_from_slice!(",
          "135:         (*elem).uni.str_ as *const u8,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: #[inline(always)]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:     )))",
          "138: }",
          "140: #[inline(never)]",
          "142:     unsafe {",
          "143:         let len = unsafe_yyjson_get_len(elem);",
          "154:         }",
          "156:     }",
          "157: }",
          "159: #[inline(never)]",
          "161:     unsafe {",
          "162:         let len = unsafe_yyjson_get_len(elem);",
          "168:         for _ in 0..len {",
          "170:             let key_str = str_from_slice!((*key).uni.str_ as *const u8, unsafe_yyjson_get_len(key));",
          "171:             let pykey = get_unicode_key(key_str);",
          "179:         }",
          "195:     }",
          "196: }",
          "",
          "[Removed Lines]",
          "141: fn parse_yy_array(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "144:         let list = ffi!(PyList_New(len as isize));",
          "145:         if len == 0 {",
          "146:             return nonnull!(list);",
          "147:         }",
          "148:         let mut cur = unsafe_yyjson_get_first(elem);",
          "149:         for idx in 0..len {",
          "150:             let next = unsafe_yyjson_get_next(cur);",
          "151:             let val = parse_node(cur).as_ptr();",
          "152:             ffi!(PyList_SET_ITEM(list, idx as isize, val));",
          "153:             cur = next;",
          "155:         nonnull!(list)",
          "160: fn parse_yy_object(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "163:         if len == 0 {",
          "164:             return nonnull!(ffi!(PyDict_New()));",
          "165:         }",
          "166:         let mut key = unsafe_yyjson_get_first(elem);",
          "167:         let dict = ffi!(_PyDict_NewPresized(len as isize));",
          "169:             let val = key.add(1);",
          "172:             let pyval = parse_node(val).as_ptr();",
          "173:             key = unsafe_yyjson_get_next(val);",
          "174:             let _ = unsafe {",
          "175:                 pyo3_ffi::_PyDict_SetItem_KnownHash(dict, pykey, pyval, str_hash!(pykey))",
          "176:             };",
          "177:             reverse_pydict_incref!(pykey);",
          "178:             reverse_pydict_incref!(pyval);",
          "180:         nonnull!(dict)",
          "181:     }",
          "182: }",
          "184: pub fn parse_node(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "185:     match ElementType::from_tag(elem) {",
          "186:         ElementType::String => parse_yy_string(elem),",
          "187:         ElementType::Uint64 => parse_u64(unsafe { (*elem).uni.u64_ }),",
          "188:         ElementType::Int64 => parse_i64(unsafe { (*elem).uni.i64_ }),",
          "189:         ElementType::Double => parse_f64(unsafe { (*elem).uni.f64_ }),",
          "190:         ElementType::Null => parse_none(),",
          "191:         ElementType::True => parse_true(),",
          "192:         ElementType::False => parse_false(),",
          "193:         ElementType::Array => parse_yy_array(elem),",
          "194:         ElementType::Object => parse_yy_object(elem),",
          "",
          "[Added Lines]",
          "165: #[inline(always)]",
          "166: fn parse_yy_u64(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "167:     parse_u64(unsafe { (*elem).uni.u64_ })",
          "168: }",
          "170: #[inline(always)]",
          "171: fn parse_yy_i64(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "172:     parse_i64(unsafe { (*elem).uni.i64_ })",
          "173: }",
          "175: #[inline(always)]",
          "176: fn parse_yy_f64(elem: *mut yyjson_val) -> NonNull<pyo3_ffi::PyObject> {",
          "177:     parse_f64(unsafe { (*elem).uni.f64_ })",
          "178: }",
          "180: macro_rules! append_to_list {",
          "181:     ($dptr:expr, $pyval:expr) => {",
          "182:         unsafe {",
          "183:             core::ptr::write($dptr, $pyval);",
          "184:             $dptr = $dptr.add(1);",
          "185:         }",
          "186:     };",
          "187: }",
          "190: fn populate_yy_array(list: *mut pyo3_ffi::PyObject, elem: *mut yyjson_val) {",
          "193:         assume!(len >= 1);",
          "194:         let mut next = unsafe_yyjson_get_first(elem);",
          "195:         let mut dptr = (*(list as *mut pyo3_ffi::PyListObject)).ob_item;",
          "197:         for _ in 0..len {",
          "198:             let val = next;",
          "199:             if unlikely!(unsafe_yyjson_is_ctn(val)) {",
          "200:                 next = unsafe_yyjson_get_next_container(val);",
          "201:                 if is_yyjson_tag!(val, TAG_ARRAY) {",
          "202:                     let pyval = nonnull!(ffi!(PyList_New(unsafe_yyjson_get_len(val) as isize)));",
          "203:                     append_to_list!(dptr, pyval.as_ptr());",
          "204:                     if unsafe_yyjson_get_len(val) > 0 {",
          "205:                         populate_yy_array(pyval.as_ptr(), val);",
          "206:                     }",
          "207:                 } else {",
          "208:                     let pyval = nonnull!(ffi!(_PyDict_NewPresized(",
          "209:                         unsafe_yyjson_get_len(val) as isize",
          "210:                     )));",
          "211:                     append_to_list!(dptr, pyval.as_ptr());",
          "212:                     if unsafe_yyjson_get_len(val) > 0 {",
          "213:                         populate_yy_object(pyval.as_ptr(), val);",
          "214:                     }",
          "215:                 }",
          "216:             } else {",
          "217:                 next = unsafe_yyjson_get_next_non_container(val);",
          "218:                 let pyval = match ElementType::from_tag(val) {",
          "219:                     ElementType::String => parse_yy_string(val),",
          "220:                     ElementType::Uint64 => parse_yy_u64(val),",
          "221:                     ElementType::Int64 => parse_yy_i64(val),",
          "222:                     ElementType::Double => parse_yy_f64(val),",
          "223:                     ElementType::Null => parse_none(),",
          "224:                     ElementType::True => parse_true(),",
          "225:                     ElementType::False => parse_false(),",
          "226:                     ElementType::Array => unreachable!(),",
          "227:                     ElementType::Object => unreachable!(),",
          "228:                 };",
          "229:                 append_to_list!(dptr, pyval.as_ptr());",
          "230:             }",
          "235: macro_rules! add_to_dict {",
          "236:     ($dict:expr, $pykey:expr, $pyval:expr) => {",
          "237:         unsafe { pyo3_ffi::_PyDict_SetItem_KnownHash($dict, $pykey, $pyval, str_hash!($pykey)) }",
          "238:     };",
          "239: }",
          "242: fn populate_yy_object(dict: *mut pyo3_ffi::PyObject, elem: *mut yyjson_val) {",
          "245:         assume!(len >= 1);",
          "246:         let mut next_key = unsafe_yyjson_get_first(elem);",
          "247:         let mut next_val = next_key.add(1);",
          "249:             let key = next_key;",
          "250:             let val = next_val;",
          "253:             if unlikely!(unsafe_yyjson_is_ctn(val)) {",
          "254:                 next_key = unsafe_yyjson_get_next_container(val);",
          "255:                 next_val = next_key.add(1);",
          "256:                 if is_yyjson_tag!(val, TAG_ARRAY) {",
          "257:                     let pyval = nonnull!(ffi!(PyList_New(unsafe_yyjson_get_len(val) as isize)));",
          "258:                     add_to_dict!(dict, pykey, pyval.as_ptr());",
          "259:                     reverse_pydict_incref!(pykey);",
          "260:                     reverse_pydict_incref!(pyval.as_ptr());",
          "261:                     if unsafe_yyjson_get_len(val) > 0 {",
          "262:                         populate_yy_array(pyval.as_ptr(), val);",
          "263:                     }",
          "264:                 } else {",
          "265:                     let pyval = nonnull!(ffi!(_PyDict_NewPresized(",
          "266:                         unsafe_yyjson_get_len(val) as isize",
          "267:                     )));",
          "268:                     add_to_dict!(dict, pykey, pyval.as_ptr());",
          "269:                     reverse_pydict_incref!(pykey);",
          "270:                     reverse_pydict_incref!(pyval.as_ptr());",
          "271:                     if unsafe_yyjson_get_len(val) > 0 {",
          "272:                         populate_yy_object(pyval.as_ptr(), val);",
          "273:                     }",
          "274:                 }",
          "275:             } else {",
          "276:                 next_key = unsafe_yyjson_get_next_non_container(val);",
          "277:                 next_val = next_key.add(1);",
          "278:                 let pyval = match ElementType::from_tag(val) {",
          "279:                     ElementType::String => parse_yy_string(val),",
          "280:                     ElementType::Uint64 => parse_yy_u64(val),",
          "281:                     ElementType::Int64 => parse_yy_i64(val),",
          "282:                     ElementType::Double => parse_yy_f64(val),",
          "283:                     ElementType::Null => parse_none(),",
          "284:                     ElementType::True => parse_true(),",
          "285:                     ElementType::False => parse_false(),",
          "286:                     ElementType::Array => unreachable!(),",
          "287:                     ElementType::Object => unreachable!(),",
          "288:                 };",
          "289:                 add_to_dict!(dict, pykey, pyval.as_ptr());",
          "290:                 reverse_pydict_incref!(pykey);",
          "291:                 reverse_pydict_incref!(pyval.as_ptr());",
          "292:             }",
          "",
          "---------------"
        ],
        "src/ffi/yyjson.rs||src/ffi/yyjson.rs": [
          "File: src/ffi/yyjson.rs -> src/ffi/yyjson.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:         size: usize,",
          "26:     ) -> bool;",
          "27: }",
          "30: pub type yyjson_read_code = u32;",
          "31: pub const YYJSON_READ_SUCCESS: yyjson_read_code = 0;",
          "32: #[repr(C)]",
          "",
          "[Removed Lines]",
          "28: pub type yyjson_read_flag = u32;",
          "29: pub const YYJSON_READ_NOFLAG: yyjson_read_flag = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     pub fn yyjson_read_opts(",
          "40:         dat: *mut ::core::ffi::c_char,",
          "41:         len: usize,",
          "43:         alc: *const yyjson_alc,",
          "44:         err: *mut yyjson_read_err,",
          "45:     ) -> *mut yyjson_doc;",
          "",
          "[Removed Lines]",
          "42:         flg: yyjson_read_flag,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}