{
  "cve_id": "CVE-2017-13036",
  "cve_desc": "The OSPFv3 parser in tcpdump before 4.9.2 has a buffer over-read in print-ospf6.c:ospf6_decode_v3().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "88b2dac837e81cf56dce05e6e7b5989332c0092d",
  "patch_info": {
    "commit_hash": "88b2dac837e81cf56dce05e6e7b5989332c0092d",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/88b2dac837e81cf56dce05e6e7b5989332c0092d",
    "files": [
      "print-ospf6.c",
      "tests/TESTLIST",
      "tests/ospf6_decode_v3_asan.out",
      "tests/ospf6_decode_v3_asan.pcap"
    ],
    "message": "CVE-2017-13036/OSPFv3: Add a bounds check before fetching data\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "before_after_code_files": [
      "print-ospf6.c||print-ospf6.c"
    ]
  },
  "patch_diff": {
    "print-ospf6.c||print-ospf6.c": [
      "File: print-ospf6.c -> print-ospf6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "735:  case OSPF_TYPE_HELLO: {",
      "736:   register const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
      "738:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
      "739:             bittok2str(ospf6_option_values, \"none\",",
      "740:             EXTRACT_32BITS(&hellop->hello_options))));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "738:   ND_TCHECK_32BITS(&hellop->hello_options);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41b9478cc822feff84c3e25c2e58d33832f5d3ea",
      "candidate_info": {
        "commit_hash": "41b9478cc822feff84c3e25c2e58d33832f5d3ea",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/41b9478cc822feff84c3e25c2e58d33832f5d3ea",
        "files": [
          "ospf.h",
          "print-ospf.c",
          "print-ospf6.c"
        ],
        "message": "Use nd_ types for OSPF and OSPF6 packets.\n\nAnd add EXTRACT_ calls as required.\n\nRemove no-longer-necessary & operators in EXTRACT_ calls.",
        "before_after_code_files": [
          "ospf.h||ospf.h",
          "print-ospf.c||print-ospf.c",
          "print-ospf6.c||print-ospf6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ospf6.c||print-ospf6.c"
          ],
          "candidate": [
            "print-ospf6.c||print-ospf6.c"
          ]
        }
      },
      "candidate_diff": {
        "ospf.h||ospf.h": [
          "File: ospf.h -> ospf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: struct tos_metric {",
          "153: };",
          "154: struct tos_link {",
          "158: };",
          "159: union un_tos {",
          "160:     struct tos_link link;",
          "",
          "[Removed Lines]",
          "150:     uint8_t tos_type;",
          "151:     uint8_t reserved;",
          "152:     uint8_t tos_metric[2];",
          "155:     uint8_t link_type;",
          "156:     uint8_t link_tos_count;",
          "157:     uint8_t tos_metric[2];",
          "",
          "[Added Lines]",
          "150:     nd_uint8_t  tos_type;",
          "151:     nd_uint8_t  reserved;",
          "152:     nd_uint16_t tos_metric;",
          "155:     nd_uint8_t  link_type;",
          "156:     nd_uint8_t  link_tos_count;",
          "157:     nd_uint16_t tos_metric;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: struct lsa_hdr {",
          "169:     union {",
          "170:         struct in_addr lsa_id;",
          "174:  } opaque_field;",
          "175:     } un_lsa_id;",
          "176:     struct in_addr ls_router;",
          "180: };",
          "",
          "[Removed Lines]",
          "166:     uint16_t ls_age;",
          "167:     uint8_t ls_options;",
          "168:     uint8_t ls_type;",
          "172:             uint8_t opaque_type;",
          "173:             uint8_t opaque_id[3];",
          "177:     uint32_t ls_seq;",
          "178:     uint16_t ls_chksum;",
          "179:     uint16_t ls_length;",
          "",
          "[Added Lines]",
          "166:     nd_uint16_t ls_age;",
          "167:     nd_uint8_t  ls_options;",
          "168:     nd_uint8_t  ls_type;",
          "172:             nd_uint8_t  opaque_type;",
          "173:             nd_uint24_t opaque_id;",
          "177:     nd_uint32_t ls_seq;",
          "178:     nd_uint16_t ls_chksum;",
          "179:     nd_uint16_t ls_length;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:     union {",
          "189:  struct {",
          "193:      struct rlalink {",
          "194:   struct in_addr link_id;",
          "195:   struct in_addr link_data;",
          "",
          "[Removed Lines]",
          "190:      uint8_t rla_flags;",
          "191:      uint8_t rla_zero[1];",
          "192:      uint16_t rla_count;",
          "",
          "[Added Lines]",
          "190:      nd_uint8_t  rla_flags;",
          "191:      nd_byte     rla_zero;",
          "192:      nd_uint16_t rla_count;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:  struct {",
          "208:      struct in_addr sla_mask;",
          "210:  } un_sla;",
          "213:  struct {",
          "214:      struct in_addr asla_mask;",
          "215:      struct aslametric {",
          "217:   struct in_addr asla_forward;",
          "218:   struct in_addr asla_tag;",
          "",
          "[Removed Lines]",
          "216:   uint32_t asla_tosmetric;",
          "",
          "[Added Lines]",
          "216:   nd_uint32_t asla_tosmetric;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "223:  struct mcla {",
          "225:      struct in_addr mcla_vid;",
          "226:  } un_mcla[1];",
          "229:         struct {",
          "233:  } un_te_lsa_tlv;",
          "236:         struct {",
          "240:  } un_grace_tlv;",
          "243:         struct {",
          "247:  } un_ri_tlv;",
          "250:         struct unknown {",
          "252:  } un_unknown[1];",
          "254:     } lsa_un;",
          "",
          "[Removed Lines]",
          "224:      uint32_t mcla_vtype;",
          "230:      uint16_t type;",
          "231:      uint16_t length;",
          "237:      uint16_t type;",
          "238:      uint16_t length;",
          "244:      uint16_t type;",
          "245:      uint16_t length;",
          "",
          "[Added Lines]",
          "224:      nd_uint32_t mcla_vtype;",
          "230:      nd_uint16_t type;",
          "231:      nd_uint16_t length;",
          "237:      nd_uint16_t type;",
          "238:      nd_uint16_t length;",
          "244:      nd_uint16_t type;",
          "245:      nd_uint16_t length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262: struct ospfhdr {",
          "266:     struct in_addr ospf_routerid;",
          "267:     struct in_addr ospf_areaid;",
          "271:     union {",
          "274:  struct {",
          "275:      struct in_addr hello_mask;",
          "280:      struct in_addr hello_dr;",
          "281:      struct in_addr hello_bdr;",
          "",
          "[Removed Lines]",
          "263:     uint8_t ospf_version;",
          "264:     uint8_t ospf_type;",
          "265:     uint16_t ospf_len;",
          "268:     uint16_t ospf_chksum;",
          "269:     uint16_t ospf_authtype;",
          "270:     uint8_t ospf_authdata[OSPF_AUTH_SIZE];",
          "276:      uint16_t hello_helloint;",
          "277:      uint8_t hello_options;",
          "278:      uint8_t hello_priority;",
          "279:      uint32_t hello_deadint;",
          "",
          "[Added Lines]",
          "263:     nd_uint8_t  ospf_version;",
          "264:     nd_uint8_t  ospf_type;",
          "265:     nd_uint16_t ospf_len;",
          "268:     nd_uint16_t ospf_chksum;",
          "269:     nd_uint16_t ospf_authtype;",
          "270:     nd_byte     ospf_authdata[OSPF_AUTH_SIZE];",
          "276:      nd_uint16_t hello_helloint;",
          "277:      nd_uint8_t  hello_options;",
          "278:      nd_uint8_t  hello_priority;",
          "279:      nd_uint32_t hello_deadint;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286:  struct {",
          "292:  } un_db;",
          "295:  struct lsr {",
          "297:             union {",
          "298:                 struct in_addr ls_stateid;",
          "302:                 } opaque_field;",
          "303:             } un_ls_stateid;",
          "304:      struct in_addr ls_router;",
          "",
          "[Removed Lines]",
          "287:      uint16_t db_ifmtu;",
          "288:      uint8_t db_options;",
          "289:      uint8_t db_flags;",
          "290:      uint32_t db_seq;",
          "296:      uint8_t ls_type[4];",
          "300:                     uint8_t opaque_type;",
          "301:                     uint8_t opaque_id[3];",
          "",
          "[Added Lines]",
          "287:      nd_uint16_t db_ifmtu;",
          "288:      nd_uint8_t  db_options;",
          "289:      nd_uint8_t  db_flags;",
          "290:      nd_uint32_t db_seq;",
          "296:      nd_uint32_t ls_type;",
          "300:                     nd_uint8_t  opaque_type;",
          "301:                     nd_uint24_t opaque_id;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "308:  struct {",
          "311:  } un_lsu;",
          "",
          "[Removed Lines]",
          "309:      uint32_t lsu_count;",
          "",
          "[Added Lines]",
          "309:      nd_uint32_t lsu_count;",
          "",
          "---------------"
        ],
        "print-ospf.c||print-ospf.c": [
          "File: print-ospf.c -> print-ospf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512: ospf_print_lshdr(netdissect_options *ndo,",
          "513:                  const struct lsa_hdr *lshp)",
          "514: {",
          "515:         u_int ls_length;",
          "517:         ND_TCHECK(lshp->ls_length);",
          "519:         if (ls_length < sizeof(struct lsa_hdr)) {",
          "520:                 ND_PRINT((ndo, \"\\n\\t    Bogus length %u < header (%lu)\", ls_length,",
          "521:                     (unsigned long)sizeof(struct lsa_hdr)));",
          "",
          "[Removed Lines]",
          "518:         ls_length = EXTRACT_BE_U_2(&lshp->ls_length);",
          "",
          "[Added Lines]",
          "515:         u_int ls_type;",
          "519:         ls_length = EXTRACT_BE_U_2(lshp->ls_length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:         ND_PRINT((ndo, \"\\n\\t  Advertising Router %s, seq 0x%08x, age %us, length %u\",",
          "527:                   ipaddr_string(ndo, &lshp->ls_router),",
          "530:                   ls_length - (u_int)sizeof(struct lsa_hdr)));",
          "535:         case LS_TYPE_OPAQUE_LL:",
          "536:         case LS_TYPE_OPAQUE_AL:",
          "537:         case LS_TYPE_OPAQUE_DW:",
          "538:             ND_PRINT((ndo, \"\\n\\t    %s LSA (%d), Opaque-Type %s LSA (%u), Opaque-ID %u\",",
          "542:      tok2str(lsa_opaque_values,",
          "543:       \"unknown\",",
          "548:                    ));",
          "549:             break;",
          "",
          "[Removed Lines]",
          "528:                   EXTRACT_BE_U_4(&lshp->ls_seq),",
          "529:                   EXTRACT_BE_U_2(&lshp->ls_age),",
          "533:         switch (lshp->ls_type) {",
          "539:                    tok2str(lsa_values,\"unknown\",lshp->ls_type),",
          "540:                    lshp->ls_type,",
          "546:      EXTRACT_BE_U_3(&lshp->un_lsa_id.opaque_field.opaque_id)",
          "",
          "[Added Lines]",
          "529:                   EXTRACT_BE_U_4(lshp->ls_seq),",
          "530:                   EXTRACT_BE_U_2(lshp->ls_age),",
          "534:         ls_type = EXTRACT_U_1(lshp->ls_type);",
          "535:         switch (ls_type) {",
          "541:                    tok2str(lsa_values,\"unknown\",ls_type),",
          "542:                    ls_type,",
          "546:       EXTRACT_U_1(lshp->un_lsa_id.opaque_field.opaque_type)),",
          "547:      EXTRACT_U_1(lshp->un_lsa_id.opaque_field.opaque_type),",
          "548:      EXTRACT_BE_U_3(lshp->un_lsa_id.opaque_field.opaque_id)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "552:         default:",
          "553:             ND_PRINT((ndo, \"\\n\\t    %s LSA (%d), LSA-ID: %s\",",
          "556:                    ipaddr_string(ndo, &lshp->un_lsa_id.lsa_id)));",
          "557:             break;",
          "558:         }",
          "563:         return (ls_length);",
          "564: trunc:",
          "",
          "[Removed Lines]",
          "554:                    tok2str(lsa_values,\"unknown\",lshp->ls_type),",
          "555:                    lshp->ls_type,",
          "561:         ND_PRINT((ndo, \"\\n\\t    Options: [%s]\", bittok2str(ospf_option_values, \"none\", lshp->ls_options)));",
          "",
          "[Added Lines]",
          "556:                    tok2str(lsa_values,\"unknown\",ls_type),",
          "557:                    ls_type,",
          "563:         ND_PRINT((ndo, \"\\n\\t    Options: [%s]\", bittok2str(ospf_option_values, \"none\", EXTRACT_U_1(lshp->ls_options))));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "580: ospf_print_tos_metrics(netdissect_options *ndo,",
          "581:                        const union un_tos *tos)",
          "582: {",
          "587:     metric_count = 0;",
          "593:         ND_TCHECK(*tos);",
          "594:         ND_PRINT((ndo, \"\\n\\t\\ttopology %s (%u), metric %u\",",
          "595:                tok2str(ospf_topology_values, \"Unknown\",",
          "599:         metric_count++;",
          "600:         tos++;",
          "601:         toscount--;",
          "",
          "[Removed Lines]",
          "583:     int metric_count;",
          "584:     int toscount;",
          "586:     toscount = tos->link.link_tos_count+1;",
          "592:     while (toscount > 0) {",
          "596:                        metric_count ? tos->metrics.tos_type : 0),",
          "597:                metric_count ? tos->metrics.tos_type : 0,",
          "598:                EXTRACT_BE_U_2(&tos->metrics.tos_metric)));",
          "",
          "[Added Lines]",
          "585:     u_int metric_count;",
          "586:     u_int toscount;",
          "587:     u_int tos_type;",
          "589:     toscount = EXTRACT_U_1(tos->link.link_tos_count)+1;",
          "595:     while (toscount != 0) {",
          "597:         tos_type = EXTRACT_U_1(tos->metrics.tos_type);",
          "600:                        metric_count ? tos_type : 0),",
          "601:                metric_count ? tos_type : 0,",
          "602:                EXTRACT_BE_U_2(tos->metrics.tos_metric)));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "619:  const struct in_addr *ap;",
          "620:  const struct aslametric *almp;",
          "621:  const struct mcla *mcp;",
          "623:  int j, tlv_type, tlv_length, topology;",
          "624:  int ls_length;",
          "625:  const uint8_t *tptr;",
          "",
          "[Removed Lines]",
          "622:  const uint32_t *lp;",
          "",
          "[Added Lines]",
          "626:  const uint8_t *lp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "631:  ls_end = (const uint8_t *)lsap + ls_length;",
          "632:  ls_length -= sizeof(struct lsa_hdr);",
          "636:  case LS_TYPE_ROUTER:",
          "637:   ND_TCHECK(lsap->lsa_un.un_rla.rla_flags);",
          "638:   ND_PRINT((ndo, \"\\n\\t    Router LSA Options: [%s]\",",
          "641:   ND_TCHECK(lsap->lsa_un.un_rla.rla_count);",
          "643:   ND_TCHECK(lsap->lsa_un.un_rla.rla_link);",
          "644:   rlp = lsap->lsa_un.un_rla.rla_link;",
          "645:   while (j--) {",
          "646:    ND_TCHECK(*rlp);",
          "649:    case RLA_TYPE_VIRTUAL:",
          "650:     ND_PRINT((ndo, \"\\n\\t      Virtual Link: Neighbor Router-ID: %s, Interface Address: %s\",",
          "",
          "[Removed Lines]",
          "634:  switch (lsap->ls_hdr.ls_type) {",
          "639:             bittok2str(ospf_rla_flag_values, \"none\", lsap->lsa_un.un_rla.rla_flags)));",
          "642:   j = EXTRACT_BE_U_2(&lsap->lsa_un.un_rla.rla_count);",
          "647:    switch (rlp->un_tos.link.link_type) {",
          "",
          "[Added Lines]",
          "638:  switch (EXTRACT_U_1(lsap->ls_hdr.ls_type)) {",
          "643:             bittok2str(ospf_rla_flag_values, \"none\", EXTRACT_U_1(lsap->lsa_un.un_rla.rla_flags))));",
          "646:   j = EXTRACT_BE_U_2(lsap->lsa_un.un_rla.rla_count);",
          "651:    switch (EXTRACT_U_1(rlp->un_tos.link.link_type)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:    default:",
          "674:     ND_PRINT((ndo, \"\\n\\t      Unknown Router Link Type (%u)\",",
          "676:     return (ls_end);",
          "677:    }",
          "",
          "[Removed Lines]",
          "675:         rlp->un_tos.link.link_type));",
          "",
          "[Added Lines]",
          "679:         EXTRACT_U_1(rlp->un_tos.link.link_type)));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "680:     goto trunc;",
          "682:    rlp = (const struct rlalink *)((const u_char *)(rlp + 1) +",
          "684:   }",
          "685:   break;",
          "",
          "[Removed Lines]",
          "683:        ((rlp->un_tos.link.link_tos_count) * sizeof(union un_tos)));",
          "",
          "[Added Lines]",
          "687:        (EXTRACT_U_1(rlp->un_tos.link.link_tos_count) * sizeof(union un_tos)));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "701:   ND_PRINT((ndo, \"\\n\\t    Mask %s\",",
          "702:       ipaddr_string(ndo, &lsap->lsa_un.un_sla.sla_mask)));",
          "703:   ND_TCHECK(lsap->lsa_un.un_sla.sla_tosmetric);",
          "706:    uint32_t ul;",
          "708:    ND_TCHECK(*lp);",
          "",
          "[Removed Lines]",
          "704:   lp = lsap->lsa_un.un_sla.sla_tosmetric;",
          "705:   while ((const u_char *)lp < ls_end) {",
          "",
          "[Added Lines]",
          "708:   lp = (const uint8_t *)lsap->lsa_un.un_sla.sla_tosmetric;",
          "709:   while (lp < ls_end) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "712:                                tok2str(ospf_topology_values, \"Unknown\", topology),",
          "713:                                topology,",
          "714:                                ul & SLA_MASK_METRIC));",
          "716:   }",
          "717:   break;",
          "719:  case LS_TYPE_SUM_ABR:",
          "720:   ND_TCHECK(lsap->lsa_un.un_sla.sla_tosmetric);",
          "723:    uint32_t ul;",
          "725:    ND_TCHECK(*lp);",
          "",
          "[Removed Lines]",
          "715:    ++lp;",
          "721:   lp = lsap->lsa_un.un_sla.sla_tosmetric;",
          "722:   while ((const u_char *)lp < ls_end) {",
          "",
          "[Added Lines]",
          "719:    lp += 4;",
          "725:   lp = (const uint8_t *)lsap->lsa_un.un_sla.sla_tosmetric;",
          "726:   while (lp < ls_end) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "729:                                tok2str(ospf_topology_values, \"Unknown\", topology),",
          "730:                                topology,",
          "731:                                ul & SLA_MASK_METRIC));",
          "733:   }",
          "734:   break;",
          "",
          "[Removed Lines]",
          "732:    ++lp;",
          "",
          "[Added Lines]",
          "736:    lp += 4;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "745:    uint32_t ul;",
          "747:    ND_TCHECK(almp->asla_tosmetric);",
          "749:                         topology = ((ul & ASLA_MASK_TOS) >> ASLA_SHIFT_TOS);",
          "750:    ND_PRINT((ndo, \"\\n\\t\\ttopology %s (%u), type %d, metric\",",
          "751:                                tok2str(ospf_topology_values, \"Unknown\", topology),",
          "",
          "[Removed Lines]",
          "748:    ul = EXTRACT_BE_U_4(&almp->asla_tosmetric);",
          "",
          "[Added Lines]",
          "752:    ul = EXTRACT_BE_U_4(almp->asla_tosmetric);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "773:   mcp = lsap->lsa_un.un_mcla;",
          "774:   while ((const u_char *)mcp < ls_end) {",
          "775:    ND_TCHECK(mcp->mcla_vid);",
          "778:    case MCLA_VERTEX_ROUTER:",
          "779:     ND_PRINT((ndo, \"\\n\\t    Router Router-ID %s\",",
          "",
          "[Removed Lines]",
          "776:    switch (EXTRACT_BE_U_4(&mcp->mcla_vtype)) {",
          "",
          "[Added Lines]",
          "780:    switch (EXTRACT_BE_U_4(mcp->mcla_vtype)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "788:    default:",
          "789:     ND_PRINT((ndo, \"\\n\\t    unknown VertexType (%u)\",",
          "791:     break;",
          "792:    }",
          "793:   ++mcp;",
          "",
          "[Removed Lines]",
          "790:         EXTRACT_BE_U_4(&mcp->mcla_vtype)));",
          "",
          "[Added Lines]",
          "794:         EXTRACT_BE_U_4(mcp->mcla_vtype)));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "798:  case LS_TYPE_OPAQUE_AL:",
          "799:  case LS_TYPE_OPAQUE_DW:",
          "802:             case LS_OPAQUE_TYPE_RI:",
          "803:   tptr = (const uint8_t *)(&lsap->lsa_un.un_ri_tlv.type);",
          "",
          "[Removed Lines]",
          "801:      switch (*(&lsap->ls_hdr.un_lsa_id.opaque_field.opaque_type)) {",
          "",
          "[Added Lines]",
          "805:      switch (EXTRACT_U_1(lsap->ls_hdr.un_lsa_id.opaque_field.opaque_type)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "893:     uint16_t lls_type, lls_len;",
          "894:     uint32_t lls_flags;",
          "898:     case OSPF_TYPE_HELLO:",
          "900:             return (0);",
          "901:         break;",
          "903:     case OSPF_TYPE_DD:",
          "905:             return (0);",
          "906:         break;",
          "",
          "[Removed Lines]",
          "896:     switch (op->ospf_type) {",
          "899:         if (!(op->ospf_hello.hello_options & OSPF_OPTION_L))",
          "904:         if (!(op->ospf_db.db_options & OSPF_OPTION_L))",
          "",
          "[Added Lines]",
          "900:     switch (EXTRACT_U_1(op->ospf_type)) {",
          "903:         if (!(EXTRACT_U_1(op->ospf_hello.hello_options) & OSPF_OPTION_L))",
          "908:         if (!(EXTRACT_U_1(op->ospf_db.db_options) & OSPF_OPTION_L))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "910:     }",
          "914:     dptr = (const u_char *)op + length2;",
          "915:     dataend = (const u_char *)op + length;",
          "918:         dptr = dptr + op->ospf_authdata[3];",
          "919:         length2 += op->ospf_authdata[3];",
          "920:     }",
          "",
          "[Removed Lines]",
          "913:     length2 = EXTRACT_BE_U_2(&op->ospf_len);",
          "917:     if (EXTRACT_BE_U_2(&op->ospf_authtype) == OSPF_AUTH_MD5) {",
          "",
          "[Added Lines]",
          "917:     length2 = EXTRACT_BE_U_2(op->ospf_len);",
          "921:     if (EXTRACT_BE_U_2(op->ospf_authtype) == OSPF_AUTH_MD5) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "985:  const struct lsa *lsap;",
          "986:  uint32_t lsa_count,lsa_count_max;",
          "990:  case OSPF_TYPE_HELLO:",
          "991:   ND_TCHECK(op->ospf_hello.hello_options);",
          "992:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "995:   ND_TCHECK(op->ospf_hello.hello_deadint);",
          "996:   ND_PRINT((ndo, \"\\n\\t  Hello Timer %us, Dead Timer %us, Mask %s, Priority %u\",",
          "999:             ipaddr_string(ndo, &op->ospf_hello.hello_mask),",
          "1002:   ND_TCHECK(op->ospf_hello.hello_dr);",
          "1003:   if (op->ospf_hello.hello_dr.s_addr != 0)",
          "",
          "[Removed Lines]",
          "988:  switch (op->ospf_type) {",
          "993:             bittok2str(ospf_option_values,\"none\",op->ospf_hello.hello_options)));",
          "997:             EXTRACT_BE_U_2(&op->ospf_hello.hello_helloint),",
          "998:             EXTRACT_BE_U_4(&op->ospf_hello.hello_deadint),",
          "1000:             op->ospf_hello.hello_priority));",
          "",
          "[Added Lines]",
          "992:  switch (EXTRACT_U_1(op->ospf_type)) {",
          "997:             bittok2str(ospf_option_values,\"none\",EXTRACT_U_1(op->ospf_hello.hello_options))));",
          "1001:             EXTRACT_BE_U_2(op->ospf_hello.hello_helloint),",
          "1002:             EXTRACT_BE_U_4(op->ospf_hello.hello_deadint),",
          "1004:             EXTRACT_U_1(op->ospf_hello.hello_priority)));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1022:  case OSPF_TYPE_DD:",
          "1023:   ND_TCHECK(op->ospf_db.db_options);",
          "1024:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "1026:   ND_TCHECK(op->ospf_db.db_flags);",
          "1027:   ND_PRINT((ndo, \", DD Flags [%s]\",",
          "1029:   ND_TCHECK(op->ospf_db.db_ifmtu);",
          "1032:   }",
          "1033:   ND_TCHECK(op->ospf_db.db_seq);",
          "1037:   lshp = op->ospf_db.db_lshdr;",
          "",
          "[Removed Lines]",
          "1025:             bittok2str(ospf_option_values, \"none\", op->ospf_db.db_options)));",
          "1028:             bittok2str(ospf_dd_flag_values, \"none\", op->ospf_db.db_flags)));",
          "1030:   if (op->ospf_db.db_ifmtu) {",
          "1031:    ND_PRINT((ndo, \", MTU: %u\", EXTRACT_BE_U_2(&op->ospf_db.db_ifmtu)));",
          "1034:   ND_PRINT((ndo, \", Sequence: 0x%08x\", EXTRACT_BE_U_4(&op->ospf_db.db_seq)));",
          "",
          "[Added Lines]",
          "1029:             bittok2str(ospf_option_values, \"none\", EXTRACT_U_1(op->ospf_db.db_options))));",
          "1032:             bittok2str(ospf_dd_flag_values, \"none\", EXTRACT_U_1(op->ospf_db.db_flags))));",
          "1034:   if (EXTRACT_BE_U_2(op->ospf_db.db_ifmtu)) {",
          "1035:    ND_PRINT((ndo, \", MTU: %u\", EXTRACT_BE_U_2(op->ospf_db.db_ifmtu)));",
          "1038:   ND_PRINT((ndo, \", Sequence: 0x%08x\", EXTRACT_BE_U_4(op->ospf_db.db_seq)));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1048:                     ND_PRINT((ndo, \"\\n\\t  Advertising Router: %s, %s LSA (%u)\",",
          "1049:                            ipaddr_string(ndo, &lsrp->ls_router),",
          "1050:                            tok2str(lsa_values,\"unknown\",EXTRACT_BE_U_4(lsrp->ls_type)),",
          "1053:                     switch (EXTRACT_BE_U_4(lsrp->ls_type)) {",
          "",
          "[Removed Lines]",
          "1051:                            EXTRACT_BE_U_4(&lsrp->ls_type)));",
          "",
          "[Added Lines]",
          "1055:                            EXTRACT_BE_U_4(lsrp->ls_type)));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1056:                     case LS_TYPE_OPAQUE_AL:",
          "1057:                     case LS_TYPE_OPAQUE_DW:",
          "1058:                         ND_PRINT((ndo, \", Opaque-Type: %s LSA (%u), Opaque-ID: %u\",",
          "1062:                         break;",
          "1063:                     default:",
          "1064:                         ND_PRINT((ndo, \", LSA-ID: %s\",",
          "",
          "[Removed Lines]",
          "1059:                                tok2str(lsa_opaque_values, \"unknown\",lsrp->un_ls_stateid.opaque_field.opaque_type),",
          "1060:                                lsrp->un_ls_stateid.opaque_field.opaque_type,",
          "1061:                                EXTRACT_BE_U_3(&lsrp->un_ls_stateid.opaque_field.opaque_id)));",
          "",
          "[Added Lines]",
          "1063:                                tok2str(lsa_opaque_values, \"unknown\",EXTRACT_U_1(lsrp->un_ls_stateid.opaque_field.opaque_type)),",
          "1064:                                EXTRACT_U_1(lsrp->un_ls_stateid.opaque_field.opaque_type),",
          "1065:                                EXTRACT_BE_U_3(lsrp->un_ls_stateid.opaque_field.opaque_id)));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1073:  case OSPF_TYPE_LS_UPDATE:",
          "1074:                 lsap = op->ospf_lsu.lsu_lsa;",
          "1075:                 ND_TCHECK(op->ospf_lsu.lsu_count);",
          "1077:                 ND_PRINT((ndo, \", %d LSA%s\", lsa_count_max, PLURAL_SUFFIX(lsa_count_max)));",
          "1078:                 for (lsa_count=1;lsa_count <= lsa_count_max;lsa_count++) {",
          "1079:                     ND_PRINT((ndo, \"\\n\\t  LSA #%u\", lsa_count));",
          "",
          "[Removed Lines]",
          "1076:                 lsa_count_max = EXTRACT_BE_U_4(&op->ospf_lsu.lsu_count);",
          "",
          "[Added Lines]",
          "1080:                 lsa_count_max = EXTRACT_BE_U_4(op->ospf_lsu.lsu_count);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1113:  ND_TCHECK(op->ospf_authtype);",
          "1115:   length -= OSPF_AUTH_MD5_LEN;",
          "1116:   ndo->ndo_snapend -= OSPF_AUTH_MD5_LEN;",
          "1117:  }",
          "",
          "[Removed Lines]",
          "1114:  if (EXTRACT_BE_U_2(&op->ospf_authtype) == OSPF_AUTH_MD5) {",
          "",
          "[Added Lines]",
          "1118:  if (EXTRACT_BE_U_2(op->ospf_authtype) == OSPF_AUTH_MD5) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1121:  ND_TCHECK(op->ospf_type);",
          "1124:  if (*cp == 'u')",
          "1125:   return;",
          "",
          "[Removed Lines]",
          "1122:  cp = tok2str(type2str, \"unknown LS-type %u\", op->ospf_type);",
          "1123:  ND_PRINT((ndo, \"OSPFv%u, %s, length %u\", op->ospf_version, cp, length));",
          "",
          "[Added Lines]",
          "1126:  cp = tok2str(type2str, \"unknown LS-type %u\", EXTRACT_U_1(op->ospf_type));",
          "1127:  ND_PRINT((ndo, \"OSPFv%u, %s, length %u\", EXTRACT_U_1(op->ospf_version), cp, length));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1129:  }",
          "1131:  ND_TCHECK(op->ospf_len);",
          "1134:  }",
          "1138:  } else {",
          "1139:   dataend = bp + length;",
          "1140:  }",
          "",
          "[Removed Lines]",
          "1132:  if (length != EXTRACT_BE_U_2(&op->ospf_len)) {",
          "1133:   ND_PRINT((ndo, \" [len %d]\", EXTRACT_BE_U_2(&op->ospf_len)));",
          "1136:  if (length > EXTRACT_BE_U_2(&op->ospf_len)) {",
          "1137:   dataend = bp + EXTRACT_BE_U_2(&op->ospf_len);",
          "",
          "[Added Lines]",
          "1136:  if (length != EXTRACT_BE_U_2(op->ospf_len)) {",
          "1137:   ND_PRINT((ndo, \" [len %d]\", EXTRACT_BE_U_2(op->ospf_len)));",
          "1140:  if (length > EXTRACT_BE_U_2(op->ospf_len)) {",
          "1141:   dataend = bp + EXTRACT_BE_U_2(op->ospf_len);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1153:   ND_TCHECK_LEN(op->ospf_authdata, sizeof(op->ospf_authdata));",
          "1155:   ND_PRINT((ndo, \", Authentication Type: %s (%u)\",",
          "1161:   case OSPF_AUTH_NONE:",
          "1162:    break;",
          "",
          "[Removed Lines]",
          "1156:             tok2str(ospf_authtype_values, \"unknown\", EXTRACT_BE_U_2(&op->ospf_authtype)),",
          "1157:             EXTRACT_BE_U_2(&op->ospf_authtype)));",
          "1159:   switch (EXTRACT_BE_U_2(&op->ospf_authtype)) {",
          "",
          "[Added Lines]",
          "1160:             tok2str(ospf_authtype_values, \"unknown\", EXTRACT_BE_U_2(op->ospf_authtype)),",
          "1161:             EXTRACT_BE_U_2(op->ospf_authtype)));",
          "1163:   switch (EXTRACT_BE_U_2(op->ospf_authtype)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1178:   }",
          "1179:  }",
          "1183:  case 2:",
          "1185:   if (ospf_decode_v2(ndo, op, dataend))",
          "1186:    goto trunc;",
          "1188:    if (ospf_decode_lls(ndo, op, length))",
          "1189:     goto trunc;",
          "1190:   }",
          "1191:   break;",
          "1193:  default:",
          "1195:   break;",
          "",
          "[Removed Lines]",
          "1181:  switch (op->ospf_version) {",
          "1187:   if (length > EXTRACT_BE_U_2(&op->ospf_len)) {",
          "1194:   ND_PRINT((ndo, \" ospf [version %d]\", op->ospf_version));",
          "",
          "[Added Lines]",
          "1185:  switch (EXTRACT_U_1(op->ospf_version)) {",
          "1191:   if (length > EXTRACT_BE_U_2(op->ospf_len)) {",
          "1198:   ND_PRINT((ndo, \" ospf [version %u]\", EXTRACT_U_1(op->ospf_version)));",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: #define OSPF6_AT_HDRLEN             16U",
          "119: #define OSPF6_AUTH_TYPE_HMAC        0x0001",
          "124: struct lsa6_hdr {",
          "127:     rtrid_t ls_stateid;",
          "128:     rtrid_t ls_router;",
          "132: };",
          "135: #define IPV6_ADDR_LEN_BYTES (128/8)",
          "137: struct lsa6_prefix {",
          "142: };",
          "",
          "[Removed Lines]",
          "121: typedef uint32_t rtrid_t;",
          "125:     uint16_t ls_age;",
          "126:     uint16_t ls_type;",
          "129:     uint32_t ls_seq;",
          "130:     uint16_t ls_chksum;",
          "131:     uint16_t ls_length;",
          "138:     uint8_t lsa_p_len;",
          "139:     uint8_t lsa_p_opt;",
          "140:     uint16_t lsa_p_metric;",
          "",
          "[Added Lines]",
          "121: typedef nd_uint32_t rtrid_t;",
          "125:     nd_uint16_t ls_age;",
          "126:     nd_uint16_t ls_type;",
          "129:     nd_uint32_t ls_seq;",
          "130:     nd_uint16_t ls_chksum;",
          "131:     nd_uint16_t ls_length;",
          "138:     nd_uint8_t lsa_p_len;",
          "139:     nd_uint8_t lsa_p_opt;",
          "140:     nd_uint16_t lsa_p_metric;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:  struct {",
          "152:      union {",
          "155:      } rla_flgandopt;",
          "156: #define rla_flags rla_flgandopt.flg",
          "157: #define rla_options rla_flgandopt.opt",
          "158:      struct rlalink6 {",
          "164:   rtrid_t link_nrtid;",
          "166:  } un_rla;",
          "169:  struct {",
          "172:  } un_nla;",
          "175:  struct {",
          "177:      struct lsa6_prefix inter_ap_prefix[1];",
          "178:  } un_inter_ap;",
          "181:  struct {",
          "183:      struct lsa6_prefix asla_prefix[1];",
          "185:  } un_asla;",
          "",
          "[Removed Lines]",
          "153:   uint8_t flg;",
          "154:   uint32_t opt;",
          "159:   uint8_t link_type;",
          "160:   uint8_t link_zero[1];",
          "161:   uint16_t link_metric;",
          "162:   uint32_t link_ifid;",
          "163:   uint32_t link_nifid;",
          "170:      uint32_t nla_options;",
          "176:      uint32_t inter_ap_metric;",
          "182:      uint32_t asla_metric;",
          "",
          "[Added Lines]",
          "153:   nd_uint8_t flg;",
          "154:   nd_uint32_t opt;",
          "159:   nd_uint8_t link_type;",
          "160:   nd_byte link_zero;",
          "161:   nd_uint16_t link_metric;",
          "162:   nd_uint32_t link_ifid;",
          "163:   nd_uint32_t link_nifid;",
          "170:      nd_uint32_t nla_options;",
          "176:      nd_uint32_t inter_ap_metric;",
          "182:      nd_uint32_t asla_metric;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  struct {",
          "190:      struct in_addr sla_mask;",
          "192:  } un_sla;",
          "195:  struct mcla {",
          "197:      struct in_addr mcla_vid;",
          "198:  } un_mcla[1];",
          "199: #endif",
          "",
          "[Removed Lines]",
          "196:      uint32_t mcla_vtype;",
          "",
          "[Added Lines]",
          "196:      nd_uint32_t mcla_vtype;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:  struct llsa {",
          "205:      union {",
          "208:      } llsa_priandopt;",
          "209: #define llsa_priority llsa_priandopt.pri",
          "210: #define llsa_options llsa_priandopt.opt",
          "211:      struct in6_addr llsa_lladdr;",
          "213:      struct lsa6_prefix llsa_prefix[1];",
          "214:  } un_llsa;",
          "217:  struct {",
          "220:      rtrid_t intra_ap_lsid;",
          "221:      rtrid_t intra_ap_rtid;",
          "222:      struct lsa6_prefix intra_ap_prefix[1];",
          "",
          "[Removed Lines]",
          "206:   uint8_t pri;",
          "207:   uint32_t opt;",
          "212:      uint32_t llsa_nprefix;",
          "218:      uint16_t intra_ap_nprefix;",
          "219:      uint16_t intra_ap_lstype;",
          "",
          "[Added Lines]",
          "206:   nd_uint8_t pri;",
          "207:   nd_uint32_t opt;",
          "212:      nd_uint32_t llsa_nprefix;",
          "218:      nd_uint16_t intra_ap_nprefix;",
          "219:      nd_uint16_t intra_ap_lstype;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230: struct ospf6hdr {",
          "234:     rtrid_t ospf6_routerid;",
          "235:     rtrid_t ospf6_areaid;",
          "239: };",
          "",
          "[Removed Lines]",
          "231:     uint8_t ospf6_version;",
          "232:     uint8_t ospf6_type;",
          "233:     uint16_t ospf6_len;",
          "236:     uint16_t ospf6_chksum;",
          "237:     uint8_t ospf6_instanceid;",
          "238:     uint8_t ospf6_rsvd;",
          "",
          "[Added Lines]",
          "231:     nd_uint8_t ospf6_version;",
          "232:     nd_uint8_t ospf6_type;",
          "233:     nd_uint16_t ospf6_len;",
          "236:     nd_uint16_t ospf6_chksum;",
          "237:     nd_uint8_t ospf6_instanceid;",
          "238:     nd_uint8_t ospf6_rsvd;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "248: struct hello6 {",
          "250:     union {",
          "253:     } hello_priandopt;",
          "254: #define hello_priority hello_priandopt.pri",
          "255: #define hello_options hello_priandopt.opt",
          "258:     rtrid_t hello_dr;",
          "259:     rtrid_t hello_bdr;",
          "",
          "[Removed Lines]",
          "249:     uint32_t hello_ifid;",
          "251:  uint8_t pri;",
          "252:  uint32_t opt;",
          "256:     uint16_t hello_helloint;",
          "257:     uint16_t hello_deadint;",
          "",
          "[Added Lines]",
          "249:     nd_uint32_t hello_ifid;",
          "251:  nd_uint8_t pri;",
          "252:  nd_uint32_t opt;",
          "256:     nd_uint16_t hello_helloint;",
          "257:     nd_uint16_t hello_deadint;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "264: struct dd6 {",
          "271: };",
          "274: struct lsr6 {",
          "277:     rtrid_t ls_stateid;",
          "278:     rtrid_t ls_router;",
          "279: };",
          "282: struct lsu6 {",
          "285: };",
          "",
          "[Removed Lines]",
          "265:     uint32_t db_options;",
          "266:     uint16_t db_mtu;",
          "267:     uint8_t db_mbz;",
          "268:     uint8_t db_flags;",
          "269:     uint32_t db_seq;",
          "275:     uint16_t ls_mbz;",
          "276:     uint16_t ls_type;",
          "283:     uint32_t lsu_count;",
          "",
          "[Added Lines]",
          "265:     nd_uint32_t db_options;",
          "266:     nd_uint16_t db_mtu;",
          "267:     nd_uint8_t db_mbz;",
          "268:     nd_uint8_t db_flags;",
          "269:     nd_uint32_t db_seq;",
          "275:     nd_uint16_t ls_mbz;",
          "276:     nd_uint16_t ls_type;",
          "283:     nd_uint32_t lsu_count;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "395:  ND_PRINT((ndo, \"\\n\\t  Advertising Router %s, seq 0x%08x, age %us, length %u\",",
          "396:                ipaddr_string(ndo, &lshp->ls_router),",
          "402:        &lshp->ls_stateid);",
          "404:  return (0);",
          "",
          "[Removed Lines]",
          "397:                EXTRACT_BE_U_4(&lshp->ls_seq),",
          "398:                EXTRACT_BE_U_2(&lshp->ls_age),",
          "399:                EXTRACT_BE_U_2(&lshp->ls_length)-(u_int)sizeof(struct lsa6_hdr)));",
          "401:  ospf6_print_ls_type(ndo, EXTRACT_BE_U_2(&lshp->ls_type),",
          "",
          "[Added Lines]",
          "397:                EXTRACT_BE_U_4(lshp->ls_seq),",
          "398:                EXTRACT_BE_U_2(lshp->ls_age),",
          "399:                EXTRACT_BE_U_2(lshp->ls_length)-(u_int)sizeof(struct lsa6_hdr)));",
          "401:  ospf6_print_ls_type(ndo, EXTRACT_BE_U_2(lshp->ls_type),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "418:   goto trunc;",
          "419:  lsa_length -= sizeof (*lsapp) - IPV6_ADDR_LEN_BYTES;",
          "420:  ND_TCHECK_LEN(lsapp, sizeof(*lsapp) - IPV6_ADDR_LEN_BYTES);",
          "422:  if (wordlen * 4 > sizeof(struct in6_addr)) {",
          "424:   goto trunc;",
          "425:  }",
          "426:  if (lsa_length < wordlen * 4)",
          "",
          "[Removed Lines]",
          "421:  wordlen = (lsapp->lsa_p_len + 31) / 32;",
          "423:   ND_PRINT((ndo, \" bogus prefixlen /%d\", lsapp->lsa_p_len));",
          "",
          "[Added Lines]",
          "421:  wordlen = (EXTRACT_U_1(lsapp->lsa_p_len) + 31) / 32;",
          "423:   ND_PRINT((ndo, \" bogus prefixlen /%u\", EXTRACT_U_1(lsapp->lsa_p_len)));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "429:  ND_TCHECK2(lsapp->lsa_p_prefix, wordlen * 4);",
          "430:  memset(&prefix, 0, sizeof(prefix));",
          "431:  memcpy(&prefix, lsapp->lsa_p_prefix, wordlen * 4);",
          "435:             ND_PRINT((ndo, \", Options [%s]\",",
          "436:                    bittok2str(ospf6_lsa_prefix_option_values,",
          "438:         }",
          "440:  return sizeof(*lsapp) - IPV6_ADDR_LEN_BYTES + wordlen * 4;",
          "442: trunc:",
          "",
          "[Removed Lines]",
          "432:  ND_PRINT((ndo, \"\\n\\t\\t%s/%d\", ip6addr_string(ndo, &prefix),",
          "433:   lsapp->lsa_p_len));",
          "434:         if (lsapp->lsa_p_opt) {",
          "437:                               \"none\", lsapp->lsa_p_opt)));",
          "439:         ND_PRINT((ndo, \", metric %u\", EXTRACT_BE_U_2(&lsapp->lsa_p_metric)));",
          "",
          "[Added Lines]",
          "432:  ND_PRINT((ndo, \"\\n\\t\\t%s/%u\", ip6addr_string(ndo, &prefix),",
          "433:   EXTRACT_U_1(lsapp->lsa_p_len)));",
          "434:         if (EXTRACT_U_1(lsapp->lsa_p_opt)) {",
          "437:                               \"none\", EXTRACT_U_1(lsapp->lsa_p_opt))));",
          "439:         ND_PRINT((ndo, \", metric %u\", EXTRACT_BE_U_2(lsapp->lsa_p_metric)));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "474:  if (ospf6_print_lshdr(ndo, &lsap->ls_hdr, dataend))",
          "475:   return (1);",
          "476:  ND_TCHECK(lsap->ls_hdr.ls_length);",
          "",
          "[Removed Lines]",
          "477:         length = EXTRACT_BE_U_2(&lsap->ls_hdr.ls_length);",
          "",
          "[Added Lines]",
          "477:         length = EXTRACT_BE_U_2(lsap->ls_hdr.ls_length);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "487:         lsa_length = length - sizeof(struct lsa6_hdr);",
          "488:         tptr = (const uint8_t *)lsap+sizeof(struct lsa6_hdr);",
          "491:  case LS_TYPE_ROUTER | LS_SCOPE_AREA:",
          "492:   if (lsa_length < sizeof (lsap->lsa_un.un_rla.rla_options))",
          "493:    return (1);",
          "",
          "[Removed Lines]",
          "490:  switch (EXTRACT_BE_U_2(&lsap->ls_hdr.ls_type)) {",
          "",
          "[Added Lines]",
          "490:  switch (EXTRACT_BE_U_2(lsap->ls_hdr.ls_type)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "495:   ND_TCHECK(lsap->lsa_un.un_rla.rla_options);",
          "496:   ND_PRINT((ndo, \"\\n\\t      Options [%s]\",",
          "497:             bittok2str(ospf6_option_values, \"none\",",
          "499:   ND_PRINT((ndo, \", RLA-Flags [%s]\",",
          "500:             bittok2str(ospf6_rla_flag_values, \"none\",",
          "503:   rlp = lsap->lsa_un.un_rla.rla_link;",
          "504:   while (lsa_length != 0) {",
          "",
          "[Removed Lines]",
          "498:             EXTRACT_BE_U_4(&lsap->lsa_un.un_rla.rla_options))));",
          "501:             lsap->lsa_un.un_rla.rla_flags)));",
          "",
          "[Added Lines]",
          "498:             EXTRACT_BE_U_4(lsap->lsa_un.un_rla.rla_options))));",
          "501:             EXTRACT_U_1(lsap->lsa_un.un_rla.rla_flags))));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "506:     return (1);",
          "507:    lsa_length -= sizeof (*rlp);",
          "508:    ND_TCHECK(*rlp);",
          "511:    case RLA_TYPE_VIRTUAL:",
          "512:     ND_PRINT((ndo, \"\\n\\t      Virtual Link: Neighbor Router-ID %s\"",
          "",
          "[Removed Lines]",
          "509:    switch (rlp->link_type) {",
          "",
          "[Added Lines]",
          "509:    switch (EXTRACT_U_1(rlp->link_type)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "535:    default:",
          "536:     ND_PRINT((ndo, \"\\n\\t      Unknown Router Links Type 0x%02x\",",
          "538:     return (0);",
          "539:    }",
          "541:    rlp++;",
          "542:   }",
          "543:   break;",
          "",
          "[Removed Lines]",
          "537:         rlp->link_type));",
          "540:    ND_PRINT((ndo, \", metric %d\", EXTRACT_BE_U_2(&rlp->link_metric)));",
          "",
          "[Added Lines]",
          "537:         EXTRACT_U_1(rlp->link_type)));",
          "540:    ND_PRINT((ndo, \", metric %d\", EXTRACT_BE_U_2(rlp->link_metric)));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "549:   ND_TCHECK(lsap->lsa_un.un_nla.nla_options);",
          "550:   ND_PRINT((ndo, \"\\n\\t      Options [%s]\",",
          "551:             bittok2str(ospf6_option_values, \"none\",",
          "554:   ND_PRINT((ndo, \"\\n\\t      Connected Routers:\"));",
          "555:   ap = lsap->lsa_un.un_nla.nla_router;",
          "",
          "[Removed Lines]",
          "552:             EXTRACT_BE_U_4(&lsap->lsa_un.un_nla.nla_options))));",
          "",
          "[Added Lines]",
          "552:             EXTRACT_BE_U_4(lsap->lsa_un.un_nla.nla_options))));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "569:   lsa_length -= sizeof (lsap->lsa_un.un_inter_ap.inter_ap_metric);",
          "570:   ND_TCHECK(lsap->lsa_un.un_inter_ap.inter_ap_metric);",
          "571:   ND_PRINT((ndo, \", metric %u\",",
          "574:   tptr = (const uint8_t *)lsap->lsa_un.un_inter_ap.inter_ap_prefix;",
          "575:   while (lsa_length != 0) {",
          "",
          "[Removed Lines]",
          "572:    EXTRACT_BE_U_4(&lsap->lsa_un.un_inter_ap.inter_ap_metric) & SLA_MASK_METRIC));",
          "",
          "[Added Lines]",
          "572:    EXTRACT_BE_U_4(lsap->lsa_un.un_inter_ap.inter_ap_metric) & SLA_MASK_METRIC));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "586:    return (1);",
          "587:   lsa_length -= sizeof (lsap->lsa_un.un_asla.asla_metric);",
          "588:   ND_TCHECK(lsap->lsa_un.un_asla.asla_metric);",
          "590:   ND_PRINT((ndo, \"\\n\\t     Flags [%s]\",",
          "591:             bittok2str(ospf6_asla_flag_values, \"none\", flags32)));",
          "592:   ND_PRINT((ndo, \" metric %u\",",
          "594:          ASLA_MASK_METRIC));",
          "596:   tptr = (const uint8_t *)lsap->lsa_un.un_asla.asla_prefix;",
          "",
          "[Removed Lines]",
          "589:   flags32 = EXTRACT_BE_U_4(&lsap->lsa_un.un_asla.asla_metric);",
          "593:          EXTRACT_BE_U_4(&lsap->lsa_un.un_asla.asla_metric) &",
          "",
          "[Added Lines]",
          "589:   flags32 = EXTRACT_BE_U_4(lsap->lsa_un.un_asla.asla_metric);",
          "593:          EXTRACT_BE_U_4(lsap->lsa_un.un_asla.asla_metric) &",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "624:    tptr += sizeof(uint32_t);",
          "625:   }",
          "628:    if (lsa_length < sizeof (uint32_t))",
          "629:     return (1);",
          "630:    lsa_length -= sizeof (uint32_t);",
          "",
          "[Removed Lines]",
          "627:   if (lsapp->lsa_p_metric) {",
          "",
          "[Added Lines]",
          "627:   if (EXTRACT_U_1(lsapp->lsa_p_metric)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "644:   ND_TCHECK(llsap->llsa_priandopt);",
          "645:   ND_PRINT((ndo, \"\\n\\t      Options [%s]\",",
          "646:             bittok2str(ospf6_option_values, \"none\",",
          "649:   if (lsa_length < sizeof (llsap->llsa_lladdr) + sizeof (llsap->llsa_nprefix))",
          "650:    return (1);",
          "651:   lsa_length -= sizeof (llsap->llsa_lladdr) + sizeof (llsap->llsa_nprefix);",
          "652:                 ND_TCHECK(llsap->llsa_nprefix);",
          "654:   ND_PRINT((ndo, \"\\n\\t      Priority %d, Link-local address %s, Prefixes %d:\",",
          "656:                        ip6addr_string(ndo, &llsap->llsa_lladdr),",
          "657:                        prefixes));",
          "",
          "[Removed Lines]",
          "647:             EXTRACT_BE_U_4(&llsap->llsa_options))));",
          "653:                 prefixes = EXTRACT_BE_U_4(&llsap->llsa_nprefix);",
          "655:                        llsap->llsa_priority,",
          "",
          "[Added Lines]",
          "647:             EXTRACT_BE_U_4(llsap->llsa_options))));",
          "653:                 prefixes = EXTRACT_BE_U_4(llsap->llsa_nprefix);",
          "655:                        EXTRACT_U_1(llsap->llsa_priority),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "674:   lsa_length -= sizeof (lsap->lsa_un.un_intra_ap.intra_ap_rtid);",
          "675:   ND_TCHECK(lsap->lsa_un.un_intra_ap.intra_ap_rtid);",
          "676:   ospf6_print_ls_type(ndo,",
          "678:    &lsap->lsa_un.un_intra_ap.intra_ap_lsid);",
          "680:   if (lsa_length < sizeof (lsap->lsa_un.un_intra_ap.intra_ap_nprefix))",
          "681:    return (1);",
          "682:   lsa_length -= sizeof (lsap->lsa_un.un_intra_ap.intra_ap_nprefix);",
          "683:   ND_TCHECK(lsap->lsa_un.un_intra_ap.intra_ap_nprefix);",
          "685:   ND_PRINT((ndo, \"\\n\\t      Prefixes %d:\", prefixes));",
          "687:   tptr = (const uint8_t *)lsap->lsa_un.un_intra_ap.intra_ap_prefix;",
          "",
          "[Removed Lines]",
          "677:    EXTRACT_BE_U_2(&lsap->lsa_un.un_intra_ap.intra_ap_lstype),",
          "684:                 prefixes = EXTRACT_BE_U_2(&lsap->lsa_un.un_intra_ap.intra_ap_nprefix);",
          "",
          "[Added Lines]",
          "677:    EXTRACT_BE_U_2(lsap->lsa_un.un_intra_ap.intra_ap_lstype),",
          "684:                 prefixes = EXTRACT_BE_U_2(lsap->lsa_un.un_intra_ap.intra_ap_nprefix);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "732:  const struct lsa6 *lsap;",
          "733:  int i;",
          "737:  case OSPF_TYPE_HELLO: {",
          "738:   const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "741:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "742:             bittok2str(ospf6_option_values, \"none\",",
          "745:   ND_TCHECK(hellop->hello_deadint);",
          "746:   ND_PRINT((ndo, \"\\n\\t  Hello Timer %us, Dead Timer %us, Interface-ID %s, Priority %u\",",
          "749:             ipaddr_string(ndo, &hellop->hello_ifid),",
          "752:   ND_TCHECK(hellop->hello_dr);",
          "754:    ND_PRINT((ndo, \"\\n\\t  Designated Router %s\",",
          "755:        ipaddr_string(ndo, &hellop->hello_dr)));",
          "756:   ND_TCHECK(hellop->hello_bdr);",
          "758:    ND_PRINT((ndo, \", Backup Designated Router %s\",",
          "759:        ipaddr_string(ndo, &hellop->hello_bdr)));",
          "760:   if (ndo->ndo_vflag > 1) {",
          "",
          "[Removed Lines]",
          "735:  switch (op->ospf6_type) {",
          "740:   ND_TCHECK_4(&hellop->hello_options);",
          "743:             EXTRACT_BE_U_4(&hellop->hello_options))));",
          "747:             EXTRACT_BE_U_2(&hellop->hello_helloint),",
          "748:             EXTRACT_BE_U_2(&hellop->hello_deadint),",
          "750:             hellop->hello_priority));",
          "753:   if (EXTRACT_BE_U_4(&hellop->hello_dr) != 0)",
          "757:   if (EXTRACT_BE_U_4(&hellop->hello_bdr) != 0)",
          "",
          "[Added Lines]",
          "735:  switch (EXTRACT_U_1(op->ospf6_type)) {",
          "740:   ND_TCHECK_4(hellop->hello_options);",
          "743:             EXTRACT_BE_U_4(hellop->hello_options))));",
          "747:             EXTRACT_BE_U_2(hellop->hello_helloint),",
          "748:             EXTRACT_BE_U_2(hellop->hello_deadint),",
          "750:             EXTRACT_U_1(hellop->hello_priority)));",
          "753:   if (EXTRACT_BE_U_4(hellop->hello_dr) != 0)",
          "757:   if (EXTRACT_BE_U_4(hellop->hello_bdr) != 0)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "775:   ND_TCHECK(ddp->db_options);",
          "776:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "777:             bittok2str(ospf6_option_values, \"none\",",
          "779:   ND_TCHECK(ddp->db_flags);",
          "780:   ND_PRINT((ndo, \", DD Flags [%s]\",",
          "783:   ND_TCHECK(ddp->db_seq);",
          "784:   ND_PRINT((ndo, \", MTU %u, DD-Sequence 0x%08x\",",
          "787:   if (ndo->ndo_vflag > 1) {",
          "789:    lshp = ddp->db_lshdr;",
          "",
          "[Removed Lines]",
          "778:             EXTRACT_BE_U_4(&ddp->db_options))));",
          "781:             bittok2str(ospf6_dd_flag_values,\"none\",ddp->db_flags)));",
          "785:                        EXTRACT_BE_U_2(&ddp->db_mtu),",
          "786:                        EXTRACT_BE_U_4(&ddp->db_seq)));",
          "",
          "[Added Lines]",
          "778:             EXTRACT_BE_U_4(ddp->db_options))));",
          "781:             bittok2str(ospf6_dd_flag_values,\"none\",EXTRACT_U_1(ddp->db_flags))));",
          "785:                        EXTRACT_BE_U_2(ddp->db_mtu),",
          "786:                        EXTRACT_BE_U_4(ddp->db_seq)));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "803:     ND_PRINT((ndo, \"\\n\\t  Advertising Router %s\",",
          "804:               ipaddr_string(ndo, &lsrp->ls_router)));",
          "805:     ospf6_print_ls_type(ndo,",
          "807:                                                     &lsrp->ls_stateid);",
          "808:     ++lsrp;",
          "809:    }",
          "",
          "[Removed Lines]",
          "806:                                                     EXTRACT_BE_U_2(&lsrp->ls_type),",
          "",
          "[Added Lines]",
          "806:                                                     EXTRACT_BE_U_2(lsrp->ls_type),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "815:    const struct lsu6 *lsup = (const struct lsu6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "817:    ND_TCHECK(lsup->lsu_count);",
          "819:    lsap = lsup->lsu_lsa;",
          "820:    while ((const u_char *)lsap < dataend && i--) {",
          "821:     if (ospf6_print_lsa(ndo, lsap, dataend))",
          "822:      goto trunc;",
          "823:     lsap = (const struct lsa6 *)((const u_char *)lsap +",
          "825:    }",
          "826:   }",
          "827:   break;",
          "",
          "[Removed Lines]",
          "818:    i = EXTRACT_BE_U_4(&lsup->lsu_count);",
          "824:         EXTRACT_BE_U_2(&lsap->ls_hdr.ls_length));",
          "",
          "[Added Lines]",
          "818:    i = EXTRACT_BE_U_4(lsup->lsu_count);",
          "824:         EXTRACT_BE_U_2(lsap->ls_hdr.ls_length));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "931: ospf6_decode_v3_trailer(netdissect_options *ndo,",
          "932:                         const struct ospf6hdr *op, const u_char *cp, const unsigned len)",
          "933: {",
          "934:  int llslen = 0;",
          "935:  int lls_hello = 0;",
          "936:  int lls_dd = 0;",
          "939:   const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "940:   ND_TCHECK(hellop->hello_options);",
          "942:    lls_hello = 1;",
          "944:   const struct dd6 *ddp = (const struct dd6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "945:   ND_TCHECK(ddp->db_options);",
          "947:    lls_dd = 1;",
          "948:  }",
          "949:  if ((lls_hello || lls_dd) && (llslen = ospf6_print_lls(ndo, cp, len)) < 0)",
          "",
          "[Removed Lines]",
          "938:  if (op->ospf6_type == OSPF_TYPE_HELLO) {",
          "941:   if (EXTRACT_BE_U_4(&hellop->hello_options) & OSPF6_OPTION_L)",
          "943:  } else if (op->ospf6_type == OSPF_TYPE_DD) {",
          "946:   if (EXTRACT_BE_U_4(&ddp->db_options) & OSPF6_OPTION_L)",
          "",
          "[Added Lines]",
          "934:  uint8_t type;",
          "939:  type = EXTRACT_U_1(op->ospf6_type);",
          "940:  if (type == OSPF_TYPE_HELLO) {",
          "943:   if (EXTRACT_BE_U_4(hellop->hello_options) & OSPF6_OPTION_L)",
          "945:  } else if (type == OSPF_TYPE_DD) {",
          "948:   if (EXTRACT_BE_U_4(ddp->db_options) & OSPF6_OPTION_L)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "970:  ND_TCHECK(op->ospf6_type);",
          "973:  if (*cp == 'u') {",
          "974:   return;",
          "975:  }",
          "",
          "[Removed Lines]",
          "971:  cp = tok2str(ospf6_type_values, \"unknown packet type (%u)\", op->ospf6_type);",
          "972:  ND_PRINT((ndo, \"OSPFv%u, %s, length %d\", op->ospf6_version, cp, length));",
          "",
          "[Added Lines]",
          "973:  cp = tok2str(ospf6_type_values, \"unknown packet type (%u)\", EXTRACT_U_1(op->ospf6_type));",
          "974:  ND_PRINT((ndo, \"OSPFv%u, %s, length %u\", EXTRACT_U_1(op->ospf6_version), cp, length));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "982:  ND_TCHECK(op->ospf6_len);",
          "984:  if (datalen > length) {",
          "985:   ND_PRINT((ndo, \" [len %d]\", datalen));",
          "986:   return;",
          "",
          "[Removed Lines]",
          "983:  datalen = EXTRACT_BE_U_2(&op->ospf6_len);",
          "",
          "[Added Lines]",
          "985:  datalen = EXTRACT_BE_U_2(op->ospf6_len);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "991:  ND_PRINT((ndo, \"\\n\\tRouter-ID %s\", ipaddr_string(ndo, &op->ospf6_routerid)));",
          "993:  ND_TCHECK(op->ospf6_areaid);",
          "995:   ND_PRINT((ndo, \", Area %s\", ipaddr_string(ndo, &op->ospf6_areaid)));",
          "996:  else",
          "997:   ND_PRINT((ndo, \", Backbone Area\"));",
          "998:  ND_TCHECK(op->ospf6_instanceid);",
          "1005:  case 3:",
          "",
          "[Removed Lines]",
          "994:  if (EXTRACT_BE_U_4(&op->ospf6_areaid) != 0)",
          "999:  if (op->ospf6_instanceid)",
          "1000:   ND_PRINT((ndo, \", Instance %u\", op->ospf6_instanceid));",
          "1003:  switch (op->ospf6_version) {",
          "",
          "[Added Lines]",
          "996:  if (EXTRACT_BE_U_4(op->ospf6_areaid) != 0)",
          "1001:  if (EXTRACT_U_1(op->ospf6_instanceid))",
          "1002:   ND_PRINT((ndo, \", Instance %u\", EXTRACT_U_1(op->ospf6_instanceid)));",
          "1005:  switch (EXTRACT_U_1(op->ospf6_version)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
      "candidate_info": {
        "commit_hash": "3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3c8f3e13b03380742c24070f8a7b56fe12c6b8ee",
        "files": [
          "extract.h",
          "print-ah.c",
          "print-bgp.c",
          "print-bootp.c",
          "print-chdlc.c",
          "print-domain.c",
          "print-dvmrp.c",
          "print-eap.c",
          "print-fr.c",
          "print-icmp.c",
          "print-igmp.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-juniper.c",
          "print-mobility.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ppp.c",
          "print-rpki-rtr.c",
          "print-rx.c",
          "print-smb.c",
          "print-stp.c",
          "print-tftp.c",
          "print-udp.c",
          "print-vtp.c"
        ],
        "message": "Rename ND_TCHECK_/ND_TTEST_ macros\n\nNow all the macros have a name meaning a count in bytes.\n\ne.g.:\nND_TCHECK_32BITS -> ND_TCHECK_4\nND_TTEST_32BITS -> ND_TTEST_4",
        "before_after_code_files": [
          "extract.h||extract.h",
          "print-ah.c||print-ah.c",
          "print-bgp.c||print-bgp.c",
          "print-bootp.c||print-bootp.c",
          "print-chdlc.c||print-chdlc.c",
          "print-domain.c||print-domain.c",
          "print-dvmrp.c||print-dvmrp.c",
          "print-eap.c||print-eap.c",
          "print-fr.c||print-fr.c",
          "print-icmp.c||print-icmp.c",
          "print-igmp.c||print-igmp.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-juniper.c||print-juniper.c",
          "print-mobility.c||print-mobility.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ppp.c||print-ppp.c",
          "print-rpki-rtr.c||print-rpki-rtr.c",
          "print-rx.c||print-rx.c",
          "print-smb.c||print-smb.c",
          "print-stp.c||print-stp.c",
          "print-tftp.c||print-tftp.c",
          "print-udp.c||print-udp.c",
          "print-vtp.c||print-vtp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ospf6.c||print-ospf6.c"
          ],
          "candidate": [
            "print-ospf6.c||print-ospf6.c"
          ]
        }
      },
      "candidate_diff": {
        "extract.h||extract.h": [
          "File: extract.h -> extract.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "392: #define ND_TTEST_8BITS(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_8BITS(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_16BITS(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_16BITS(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_24BITS(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_24BITS(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_32BITS(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_32BITS(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_40BITS(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_40BITS(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_48BITS(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_48BITS(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_56BITS(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_56BITS(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_64BITS(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_64BITS(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_128BITS(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_128BITS(p) ND_TCHECK2(*(p), 16)",
          "",
          "[Added Lines]",
          "392: #define ND_TTEST_1(p) ND_TTEST2(*(p), 1)",
          "393: #define ND_TCHECK_1(p) ND_TCHECK2(*(p), 1)",
          "395: #define ND_TTEST_2(p) ND_TTEST2(*(p), 2)",
          "396: #define ND_TCHECK_2(p) ND_TCHECK2(*(p), 2)",
          "398: #define ND_TTEST_3(p) ND_TTEST2(*(p), 3)",
          "399: #define ND_TCHECK_3(p) ND_TCHECK2(*(p), 3)",
          "401: #define ND_TTEST_4(p) ND_TTEST2(*(p), 4)",
          "402: #define ND_TCHECK_4(p) ND_TCHECK2(*(p), 4)",
          "404: #define ND_TTEST_5(p) ND_TTEST2(*(p), 5)",
          "405: #define ND_TCHECK_5(p) ND_TCHECK2(*(p), 5)",
          "407: #define ND_TTEST_6(p) ND_TTEST2(*(p), 6)",
          "408: #define ND_TCHECK_6(p) ND_TCHECK2(*(p), 6)",
          "410: #define ND_TTEST_7(p) ND_TTEST2(*(p), 7)",
          "411: #define ND_TCHECK_7(p) ND_TCHECK2(*(p), 7)",
          "413: #define ND_TTEST_8(p) ND_TTEST2(*(p), 8)",
          "414: #define ND_TCHECK_8(p) ND_TCHECK2(*(p), 8)",
          "416: #define ND_TTEST_16(p) ND_TTEST2(*(p), 16)",
          "417: #define ND_TCHECK_16(p) ND_TCHECK2(*(p), 16)",
          "",
          "---------------"
        ],
        "print-ah.c||print-ah.c": [
          "File: print-ah.c -> print-ah.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  ND_PRINT((ndo, \"AH(spi=0x%08x\", EXTRACT_BE_32BITS(&ah->ah_spi)));",
          "50:  if (ndo->ndo_vflag)",
          "51:   ND_PRINT((ndo, \",sumlen=%d\", sumlen));",
          "53:  ND_PRINT((ndo, \",seq=0x%x\", EXTRACT_BE_32BITS(ah + 1)));",
          "54:  if (!ND_TTEST2(*bp, sizeof(struct ah) + sumlen)) {",
          "55:   ND_PRINT((ndo, \"[truncated]):\"));",
          "",
          "[Removed Lines]",
          "52:  ND_TCHECK_32BITS(ah + 1);",
          "",
          "[Added Lines]",
          "52:  ND_TCHECK_4(ah + 1);",
          "",
          "---------------"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     total_length = 0;",
          "684:     addr_length = EXTRACT_8BITS(pptr);",
          "685:     pptr++;",
          "",
          "[Removed Lines]",
          "683:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "683:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:     }",
          "699:     addr_length = EXTRACT_8BITS(pptr);",
          "700:     pptr++;",
          "",
          "[Removed Lines]",
          "698:     ND_TCHECK_8BITS(pptr);",
          "",
          "[Added Lines]",
          "698:     ND_TCHECK_1(pptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "784:   return -1;",
          "788:  as_printf(ndo, asbuf, sizeof(asbuf), EXTRACT_BE_32BITS(pptr + 1));",
          "",
          "[Removed Lines]",
          "787:  ND_TCHECK_32BITS(pptr + 1);",
          "",
          "[Added Lines]",
          "787:  ND_TCHECK_4(pptr + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037: {",
          "1038:         int plen,tlen,stringlen,tlv_type,tlv_len,ttlv_len;",
          "1041:         plen=EXTRACT_BE_16BITS(pptr);",
          "1042:         tlen=plen;",
          "1043:         pptr+=2;",
          "",
          "[Removed Lines]",
          "1040:  ND_TCHECK_16BITS(pptr);",
          "",
          "[Added Lines]",
          "1040:  ND_TCHECK_2(pptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1458:   if (len != 4)",
          "1459:    ND_PRINT((ndo, \"invalid len\"));",
          "1460:   else {",
          "1462:    ND_PRINT((ndo, \"%u\", EXTRACT_BE_32BITS(tptr)));",
          "1463:   }",
          "1464:   break;",
          "",
          "[Removed Lines]",
          "1461:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1461:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1504:   }",
          "1505:   while (tlen>0) {",
          "1506:    uint32_t comm;",
          "1508:    comm = EXTRACT_BE_32BITS(tptr);",
          "1509:    switch (comm) {",
          "1510:    case BGP_COMMUNITY_NO_EXPORT:",
          "",
          "[Removed Lines]",
          "1507:    ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1507:    ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2064:                 while (tlen>0) {",
          "2065:                     uint16_t extd_comm;",
          "2068:                     extd_comm=EXTRACT_BE_16BITS(tptr);",
          "2070:       ND_PRINT((ndo, \"\\n\\t    %s (0x%04x), Flags [%s]\",",
          "",
          "[Removed Lines]",
          "2067:                     ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2067:                     ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2250:   break;",
          "2251:  }",
          "2252:         case BGPTYPE_ATTR_SET:",
          "2254:                 if (len < 4)",
          "2255:                  goto trunc;",
          "2256:   ND_PRINT((ndo, \"\\n\\t    Origin AS: %s\",",
          "",
          "[Removed Lines]",
          "2253:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2253:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2516:  length -= BGP_SIZE;",
          "2520:  if (length < 2)",
          "2521:   goto trunc;",
          "2522:  withdrawn_routes_len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2519:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2519:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2536:   length -= withdrawn_routes_len;",
          "2537:  }",
          "2540:  if (length < 2)",
          "2541:   goto trunc;",
          "2542:  len = EXTRACT_BE_16BITS(p);",
          "",
          "[Removed Lines]",
          "2539:  ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "2539:  ND_TCHECK_2(p);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2716:   bgpn.bgpn_minor == BGP_NOTIFY_MINOR_CEASE_RESET) &&",
          "2717:   length >= BGP_NOTIFICATION_SIZE + 1) {",
          "2718:       tptr = dat + BGP_NOTIFICATION_SIZE;",
          "2720:       shutdown_comm_length = EXTRACT_8BITS(tptr);",
          "2721:       remainder_offset = 0;",
          "",
          "[Removed Lines]",
          "2719:       ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2719:       ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-bootp.c||print-bootp.c": [
          "File: print-bootp.c -> print-bootp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:  bp += sizeof(int32_t);",
          "615:   tag = EXTRACT_8BITS(bp);",
          "616:   bp++;",
          "617:   if (tag == TAG_PAD && ndo->ndo_vflag < 3)",
          "",
          "[Removed Lines]",
          "614:  while (ND_TTEST_8BITS(bp)) {",
          "",
          "[Added Lines]",
          "614:  while (ND_TTEST_1(bp)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:   if (tag == TAG_END && ndo->ndo_vflag < 3)",
          "620:    return;",
          "621:   if (tag == TAG_EXTENDED_OPTION) {",
          "623:    tag = EXTRACT_BE_16BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "622:    ND_TCHECK_16BITS(bp + 1);",
          "",
          "[Added Lines]",
          "622:    ND_TCHECK_2(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634:    len = 0;",
          "635:   else {",
          "638:    len = EXTRACT_8BITS(bp);",
          "639:    bp++;",
          "640:   }",
          "",
          "[Removed Lines]",
          "637:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "637:    ND_TCHECK_1(bp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "645:   if (tag == TAG_PAD && ndo->ndo_vflag > 2) {",
          "646:    u_int ntag = 1;",
          "649:     bp++;",
          "650:     ntag++;",
          "651:    }",
          "",
          "[Removed Lines]",
          "647:    while (ND_TTEST_8BITS(bp) &&",
          "648:        EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "[Added Lines]",
          "647:    while (ND_TTEST_1(bp) &&",
          "648:           EXTRACT_8BITS(bp) == TAG_PAD) {",
          "",
          "---------------"
        ],
        "print-chdlc.c||print-chdlc.c": [
          "File: print-chdlc.c -> print-chdlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:                 if (length < 2)",
          "96:                     goto trunc;",
          "98:                 if (*(p+1) == NLPID_CLNP ||",
          "",
          "[Removed Lines]",
          "97:                 ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "97:                 ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: {",
          "57:  register u_char i;",
          "60:   return (NULL);",
          "61:  i = EXTRACT_8BITS(cp);",
          "62:  cp++;",
          "",
          "[Removed Lines]",
          "59:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "59:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:    if ((i & ~INDIR_MASK) != EDNS0_ELT_BITLABEL)",
          "72:     return (NULL);",
          "73:    if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "74:     bitlen = 256;",
          "",
          "[Removed Lines]",
          "71:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "71:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:    cp += bytelen;",
          "78:   } else",
          "79:    cp += i;",
          "81:    return (NULL);",
          "82:   i = EXTRACT_8BITS(cp);",
          "83:   cp++;",
          "",
          "[Removed Lines]",
          "80:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "80:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  const u_char *bitp, *lim;",
          "95:  char tc;",
          "98:   return(NULL);",
          "99:  if ((bitlen = EXTRACT_8BITS(cp)) == 0)",
          "100:   bitlen = 256;",
          "",
          "[Removed Lines]",
          "97:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "97:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131: {",
          "132:  register u_int i;",
          "135:   return(-1);",
          "136:  i = EXTRACT_8BITS(cp);",
          "137:  if ((i & INDIR_MASK) == EDNS0_MASK) {",
          "",
          "[Removed Lines]",
          "134:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "134:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:    ND_PRINT((ndo, \"<ELT %d>\", elt));",
          "141:    return(-1);",
          "142:   }",
          "144:    return(-1);",
          "145:   if ((bitlen = EXTRACT_8BITS(cp + 1)) == 0)",
          "146:    bitlen = 256;",
          "",
          "[Removed Lines]",
          "143:   if (!ND_TTEST_8BITS(cp + 1))",
          "",
          "[Added Lines]",
          "143:   if (!ND_TTEST_1(cp + 1))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:  if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "163:   return(NULL);",
          "165:   return(NULL);",
          "166:  max_offset = (u_int)(cp - bp);",
          "167:  i = EXTRACT_8BITS(cp);",
          "",
          "[Removed Lines]",
          "164:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "164:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "178:      rp = cp + 1;",
          "179:      compress = 1;",
          "180:     }",
          "182:      return(NULL);",
          "183:     offset = (((i << 8) | EXTRACT_8BITS(cp)) & 0x3fff);",
          "",
          "[Removed Lines]",
          "181:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "181:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "199:     cp = bp + offset;",
          "200:     if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "201:      return(NULL);",
          "203:      return(NULL);",
          "204:     i = EXTRACT_8BITS(cp);",
          "205:     cp++;",
          "",
          "[Removed Lines]",
          "202:     if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "202:     if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:    ND_PRINT((ndo, \".\"));",
          "227:    if ((l = labellen(ndo, cp)) == (u_int)-1)",
          "228:     return(NULL);",
          "230:     return(NULL);",
          "231:    i = EXTRACT_8BITS(cp);",
          "232:    cp++;",
          "",
          "[Removed Lines]",
          "229:    if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "229:    if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "245: {",
          "246:  register u_int i;",
          "249:   return (NULL);",
          "250:  i = EXTRACT_8BITS(cp);",
          "251:  cp++;",
          "",
          "[Removed Lines]",
          "248:  if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "248:  if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "512:   int pbit, pbyte;",
          "513:   char ntop_buf[INET6_ADDRSTRLEN];",
          "516:    return(NULL);",
          "517:   pbit = EXTRACT_8BITS(cp);",
          "518:   pbyte = (pbit & ~7) / 8;",
          "",
          "[Removed Lines]",
          "515:   if (!ND_TTEST_8BITS(cp))",
          "",
          "[Added Lines]",
          "515:   if (!ND_TTEST_1(cp))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "558:   if ((cp = ns_nprint(ndo, cp, bp)) == NULL)",
          "559:    return(NULL);",
          "560:   cp += 6;",
          "562:    return(NULL);",
          "563:   ND_PRINT((ndo, \" fudge=%u\", EXTRACT_BE_16BITS(cp)));",
          "564:   cp += 2;",
          "566:    return(NULL);",
          "567:   ND_PRINT((ndo, \" maclen=%u\", EXTRACT_BE_16BITS(cp)));",
          "568:   cp += 2 + EXTRACT_BE_16BITS(cp);",
          "570:    return(NULL);",
          "571:   ND_PRINT((ndo, \" origid=%u\", EXTRACT_BE_16BITS(cp)));",
          "572:   cp += 2;",
          "574:    return(NULL);",
          "575:   ND_PRINT((ndo, \" error=%u\", EXTRACT_BE_16BITS(cp)));",
          "576:   cp += 2;",
          "578:    return(NULL);",
          "579:   ND_PRINT((ndo, \" otherlen=%u\", EXTRACT_BE_16BITS(cp)));",
          "580:   cp += 2;",
          "",
          "[Removed Lines]",
          "561:   if (!ND_TTEST_16BITS(cp))",
          "565:   if (!ND_TTEST_16BITS(cp))",
          "569:   if (!ND_TTEST_16BITS(cp))",
          "573:   if (!ND_TTEST_16BITS(cp))",
          "577:   if (!ND_TTEST_16BITS(cp))",
          "",
          "[Added Lines]",
          "561:   if (!ND_TTEST_2(cp))",
          "565:   if (!ND_TTEST_2(cp))",
          "569:   if (!ND_TTEST_2(cp))",
          "573:   if (!ND_TTEST_2(cp))",
          "577:   if (!ND_TTEST_2(cp))",
          "",
          "---------------"
        ],
        "print-dvmrp.c||print-dvmrp.c": [
          "File: print-dvmrp.c -> print-dvmrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  if (bp >= ep)",
          "78:   return;",
          "81:  type = EXTRACT_8BITS(bp + 1);",
          "",
          "[Removed Lines]",
          "80:  ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "80:  ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:    }",
          "199:    origin = 0;",
          "200:    for (i = 0; i < width; ++i) {",
          "202:     origin = origin << 8 | EXTRACT_8BITS(bp);",
          "203:     bp++;",
          "204:    }",
          "205:    for ( ; i < 4; ++i)",
          "206:     origin <<= 8;",
          "209:    metric = EXTRACT_8BITS(bp);",
          "210:    bp++;",
          "211:    done = metric & 0x80;",
          "",
          "[Removed Lines]",
          "201:     ND_TCHECK_8BITS(bp);",
          "208:    ND_TCHECK_8BITS(bp);",
          "",
          "[Added Lines]",
          "201:     ND_TCHECK_1(bp);",
          "208:    ND_TCHECK_1(bp);",
          "",
          "---------------"
        ],
        "print-eap.c||print-eap.c": [
          "File: print-eap.c -> print-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:     switch (eap->type) {",
          "184:     case EAP_FRAME_TYPE_PACKET:",
          "186:         type = *(tptr);",
          "188:         len = EXTRACT_BE_16BITS(tptr + 2);",
          "189:         ND_PRINT((ndo, \", %s (%u), id %u, len %u\",",
          "190:                tok2str(eap_code_values, \"unknown\", type),",
          "",
          "[Removed Lines]",
          "185:         ND_TCHECK_8BITS(tptr);",
          "187:         ND_TCHECK_16BITS(tptr+2);",
          "",
          "[Added Lines]",
          "185:         ND_TCHECK_1(tptr);",
          "187:         ND_TCHECK_2(tptr + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:         ND_TCHECK2(*tptr, len);",
          "199:             subtype = EXTRACT_8BITS(tptr + 4);",
          "200:             ND_PRINT((ndo, \"\\n\\t\\t Type %s (%u)\",",
          "201:                    tok2str(eap_type_values, \"unknown\", subtype),",
          "",
          "[Removed Lines]",
          "198:             ND_TCHECK_8BITS(tptr+4);",
          "",
          "[Added Lines]",
          "198:             ND_TCHECK_1(tptr + 4);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:                 while (count < len) {",
          "229:                     ND_PRINT((ndo, \" %s (%u),\",",
          "230:                            tok2str(eap_type_values, \"unknown\", EXTRACT_8BITS((tptr + count))),",
          "",
          "[Removed Lines]",
          "228:                     ND_TCHECK_8BITS(tptr+count);",
          "",
          "[Added Lines]",
          "228:                     ND_TCHECK_1(tptr + count);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236:             case EAP_TYPE_TTLS:",
          "237:             case EAP_TYPE_TLS:",
          "239:                 if (subtype == EAP_TYPE_TTLS)",
          "240:                     ND_PRINT((ndo, \" TTLSv%u\",",
          "241:                            EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "",
          "[Removed Lines]",
          "238:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "238:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "248:       ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "249:                 }",
          "250:                 break;",
          "252:             case EAP_TYPE_FAST:",
          "254:                 ND_PRINT((ndo, \" FASTv%u\",",
          "255:                        EAP_TTLS_VERSION(EXTRACT_8BITS((tptr + 5)))));",
          "256:                 ND_PRINT((ndo, \" flags [%s] 0x%02x,\",",
          "",
          "[Removed Lines]",
          "247:                     ND_TCHECK_32BITS(tptr + 6);",
          "253:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "247:                     ND_TCHECK_4(tptr + 6);",
          "253:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:                 if (EAP_TLS_EXTRACT_BIT_L(*(tptr+5))) {",
          "262:                     ND_PRINT((ndo, \" len %u\", EXTRACT_BE_32BITS(tptr + 6)));",
          "263:                 }",
          "",
          "[Removed Lines]",
          "261:                     ND_TCHECK_32BITS(tptr + 6);",
          "",
          "[Added Lines]",
          "261:                     ND_TCHECK_4(tptr + 6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268:             case EAP_TYPE_AKA:",
          "269:             case EAP_TYPE_SIM:",
          "271:                 ND_PRINT((ndo, \" subtype [%s] 0x%02x,\",",
          "272:                        tok2str(eap_aka_subtype_values, \"unknown\", EXTRACT_8BITS((tptr + 5))),",
          "",
          "[Removed Lines]",
          "270:                 ND_TCHECK_8BITS(tptr + 5);",
          "",
          "[Added Lines]",
          "270:                 ND_TCHECK_1(tptr + 5);",
          "",
          "---------------"
        ],
        "print-fr.c||print-fr.c": [
          "File: print-fr.c -> print-fr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                            const u_char *p, u_int *dlci,",
          "103:                            u_int *addr_len, uint8_t *flags, u_int length)",
          "104: {",
          "106:   return -1;",
          "107:  if ((EXTRACT_8BITS(p) & FR_EA_BIT))",
          "108:   return 0;",
          "111:   return -1;",
          "",
          "[Removed Lines]",
          "105:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "110:  if (!ND_TTEST_8BITS(p+1) || length < 2)",
          "",
          "[Added Lines]",
          "105:  if (!ND_TTEST_1(p) || length < 1)",
          "110:  if (!ND_TTEST_1(p + 1) || length < 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  p += 2;",
          "124:  length -= 2;",
          "126:   return -1;",
          "128:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0) {",
          "",
          "[Removed Lines]",
          "125:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "125:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   length--;",
          "133:  }",
          "136:   return -1;",
          "137:  if ((EXTRACT_8BITS(p) & FR_EA_BIT) == 0)",
          "",
          "[Removed Lines]",
          "135:  if (!ND_TTEST_8BITS(p) || length < 1)",
          "",
          "[Added Lines]",
          "135:  if (!ND_TTEST_1(p) || length < 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   return 0;",
          "254:  }",
          "257:  if (length < addr_len + 1)",
          "258:   goto trunc;",
          "",
          "[Removed Lines]",
          "256:  ND_TCHECK_8BITS(p + addr_len);",
          "",
          "[Added Lines]",
          "256:  ND_TCHECK_1(p + addr_len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:                         ND_PRINT((ndo, \"UI %02x! \", EXTRACT_8BITS(p + addr_len)));",
          "269:                 } else {",
          "",
          "[Removed Lines]",
          "266:   if (!ND_TTEST_16BITS(p + addr_len) || length < addr_len + 2) {",
          "",
          "[Added Lines]",
          "266:   if (!ND_TTEST_2(p + addr_len) || length < addr_len + 2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:                 }",
          "286:         }",
          "289:  if (length < addr_len + 2)",
          "290:   goto trunc;",
          "",
          "[Removed Lines]",
          "288:  ND_TCHECK_8BITS(p + addr_len + 1);",
          "",
          "[Added Lines]",
          "288:  ND_TCHECK_1(p + addr_len + 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "307:   hdr_len = addr_len + 1 /* UI */ + 1 /* NLPID */;",
          "308:  }",
          "311:  if (length < hdr_len)",
          "312:   goto trunc;",
          "313:  nlpid = EXTRACT_8BITS(p + hdr_len - 1);",
          "",
          "[Removed Lines]",
          "310:         ND_TCHECK_8BITS(p + hdr_len - 1);",
          "",
          "[Added Lines]",
          "310:         ND_TCHECK_1(p + hdr_len - 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "907:  ND_PRINT((ndo, \"%s, codeset %u\", is_ansi ? \"ANSI\" : \"CCITT\", codeset));",
          "909:  if (call_ref_length != 0) {",
          "911:   if (call_ref_length > 1 || EXTRACT_8BITS(p) != 0) {",
          "",
          "[Removed Lines]",
          "910:   ND_TCHECK_8BITS(p);",
          "",
          "[Added Lines]",
          "910:   ND_TCHECK_1(p);",
          "",
          "---------------"
        ],
        "print-icmp.c||print-icmp.c": [
          "File: print-icmp.c -> print-icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:   ND_PRINT((ndo, \"\\n\\t\"));",
          "582:   ip = (const struct ip *)bp;",
          "583:                 snapend_save = ndo->ndo_snapend;",
          "585:   ip_print(ndo, bp, EXTRACT_BE_16BITS(&ip->ip_len));",
          "586:                 ndo->ndo_snapend = snapend_save;",
          "587:  }",
          "",
          "[Removed Lines]",
          "584:   ND_TCHECK_16BITS(&ip->ip_len);",
          "",
          "[Added Lines]",
          "584:   ND_TCHECK_2(&ip->ip_len);",
          "",
          "---------------"
        ],
        "print-igmp.c||print-igmp.c": [
          "File: print-igmp.c -> print-igmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "159:  return;",
          "160:     }",
          "162:     ngroups = EXTRACT_BE_16BITS(bp + 6);",
          "163:     ND_PRINT((ndo, \", %d group record(s)\", ngroups));",
          "164:     if (ndo->ndo_vflag > 0) {",
          "",
          "[Removed Lines]",
          "161:     ND_TCHECK_16BITS(bp + 6);",
          "",
          "[Added Lines]",
          "161:     ND_TCHECK_2(bp + 6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:  ND_PRINT((ndo, \" [invalid len %d]\", len));",
          "216:  return;",
          "217:     }",
          "219:     mrc = EXTRACT_8BITS(bp + 1);",
          "220:     if (mrc < 128) {",
          "221:  mrt = mrc;",
          "",
          "[Removed Lines]",
          "218:     ND_TCHECK_8BITS(bp + 1);",
          "",
          "[Added Lines]",
          "218:     ND_TCHECK_1(bp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:         }",
          "232:  ND_PRINT((ndo, \"]\"));",
          "233:     }",
          "235:     if (EXTRACT_BE_32BITS(bp + 4) == 0)",
          "236:  return;",
          "237:     ND_PRINT((ndo, \" [gaddr %s\", ipaddr_string(ndo, &bp[4])));",
          "239:     nsrcs = EXTRACT_BE_16BITS(bp + 10);",
          "240:     if (nsrcs > 0) {",
          "241:  if (len < 12 + (nsrcs << 2))",
          "",
          "[Removed Lines]",
          "234:     ND_TCHECK_32BITS(bp + 4);",
          "238:     ND_TCHECK_16BITS(bp + 10);",
          "",
          "[Added Lines]",
          "234:     ND_TCHECK_4(bp + 4);",
          "238:     ND_TCHECK_2(bp + 10);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:         return;",
          "268:     }",
          "271:     switch (EXTRACT_8BITS(bp)) {",
          "272:     case 0x11:",
          "273:         ND_PRINT((ndo, \"igmp query\"));",
          "274:  if (len >= 12)",
          "275:      print_igmpv3_query(ndo, bp, len);",
          "276:  else {",
          "278:      if (EXTRACT_8BITS(bp + 1)) {",
          "279:   ND_PRINT((ndo, \" v2\"));",
          "280:   if (EXTRACT_8BITS(bp + 1) != 100)",
          "281:       ND_PRINT((ndo, \" [max resp time %u]\", EXTRACT_8BITS(bp + 1)));",
          "282:      } else",
          "283:   ND_PRINT((ndo, \" v1\"));",
          "285:      if (EXTRACT_BE_32BITS(bp + 4))",
          "286:                 ND_PRINT((ndo, \" [gaddr %s]\", ipaddr_string(ndo, &bp[4])));",
          "287:             if (len != 8)",
          "",
          "[Removed Lines]",
          "270:     ND_TCHECK_8BITS(bp);",
          "277:             ND_TCHECK_8BITS(bp + 1);",
          "284:             ND_TCHECK_32BITS(bp + 4);",
          "",
          "[Added Lines]",
          "270:     ND_TCHECK_1(bp);",
          "277:             ND_TCHECK_1(bp + 1);",
          "284:             ND_TCHECK_4(bp + 4);",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922:  if (p[0] & 0x80)",
          "923:   totlen = 4;",
          "924:  else {",
          "926:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "927:  }",
          "928:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "925:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "925:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   return ep2 + 1;",
          "931:  }",
          "934:  ND_PRINT((ndo,\"(\"));",
          "935:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "936:  if (map && t < nmap && map[t].type)",
          "",
          "[Removed Lines]",
          "933:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "933:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "939:   ND_PRINT((ndo,\"type=#%d \", t));",
          "940:  if (p[0] & 0x80) {",
          "941:   ND_PRINT((ndo,\"value=\"));",
          "943:   v = EXTRACT_BE_16BITS(p + 2);",
          "944:   if (map && t < nmap && v < map[t].nvalue && map[t].value[v])",
          "945:    ND_PRINT((ndo,\"%s\", map[t].value[v]));",
          "",
          "[Removed Lines]",
          "942:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "942:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "973:  if (p[0] & 0x80)",
          "974:   totlen = 4;",
          "975:  else {",
          "977:   totlen = 4 + EXTRACT_BE_16BITS(p + 2);",
          "978:  }",
          "979:  if (ep2 < p + totlen) {",
          "",
          "[Removed Lines]",
          "976:   ND_TCHECK_16BITS(&p[2]);",
          "",
          "[Added Lines]",
          "976:   ND_TCHECK_2(&p[2]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "981:   return ep2 + 1;",
          "982:  }",
          "985:  ND_PRINT((ndo,\"(\"));",
          "986:  t = EXTRACT_BE_16BITS(p) & 0x7fff;",
          "987:  ND_PRINT((ndo,\"type=#%d \", t));",
          "",
          "[Removed Lines]",
          "984:  ND_TCHECK_16BITS(&p[0]);",
          "",
          "[Added Lines]",
          "984:  ND_TCHECK_2(&p[0]);",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:             case ESIS_OPTION_PROTOCOLS:",
          "1344:                 while (opli>0) {",
          "1346:                     ND_PRINT((ndo, \"%s (0x%02x)\",",
          "1347:                            tok2str(nlpid_values,",
          "1348:                                    \"unknown\",",
          "",
          "[Removed Lines]",
          "1345:                     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "1345:                     ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1625:           stlv_len = stlv_len - 8;",
          "1627:           while (stlv_len >= 4) {",
          "1629:             ND_PRINT((ndo, \"\\n\\t        T: %d, R: %d, RES: %d, ISID: %d\",",
          "1630:                     (EXTRACT_BE_32BITS(tptr) >> 31),",
          "1631:                     (EXTRACT_BE_32BITS(tptr) >> 30) & 0x01,",
          "",
          "[Removed Lines]",
          "1628:             ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "1628:             ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2000:     tptr+=NODE_ID_LEN;",
          "2004:      return(0);",
          "2005:  ND_PRINT((ndo, \", Metric: %d\", EXTRACT_BE_24BITS(tptr)));",
          "2006:  tptr+=3;",
          "2007:     }",
          "2010:         return(0);",
          "2012:     tptr++;",
          "",
          "[Removed Lines]",
          "2009:     if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2009:     if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2041: isis_print_mtid(netdissect_options *ndo,",
          "2042:                 const uint8_t *tptr, const char *ident)",
          "2043: {",
          "2045:         return(0);",
          "2047:     ND_PRINT((ndo, \"%s%s\",",
          "",
          "[Removed Lines]",
          "2044:     if (!ND_TTEST_16BITS(tptr))",
          "",
          "[Added Lines]",
          "2044:     if (!ND_TTEST_2(tptr))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2073:     u_int metric, status_byte, bit_length, byte_length, sublen, processed, subtlvtype, subtlvlen;",
          "2076:         return (0);",
          "2077:     metric = EXTRACT_BE_32BITS(tptr);",
          "2078:     processed=4;",
          "2079:     tptr+=4;",
          "2081:     if (afi == AF_INET) {",
          "2083:             return (0);",
          "2084:         status_byte=EXTRACT_8BITS(tptr);",
          "2085:         tptr++;",
          "",
          "[Removed Lines]",
          "2075:     if (!ND_TTEST_32BITS(tptr))",
          "",
          "[Added Lines]",
          "2075:     if (!ND_TTEST_4(tptr))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2145:            than one subTLV - therefore the first byte must reflect",
          "2146:            the aggregate bytecount of the subTLVs for this prefix",
          "2149:             return (0);",
          "2150:         sublen=EXTRACT_8BITS(tptr);",
          "2151:         tptr++;",
          "",
          "[Removed Lines]",
          "2148:         if (!ND_TTEST_8BITS(tptr))",
          "",
          "[Added Lines]",
          "2148:         if (!ND_TTEST_1(tptr))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2589:  switch (tlv_type) {",
          "2590:  case ISIS_TLV_AREA_ADDR:",
          "2592:      alen = EXTRACT_8BITS(tptr);",
          "2593:      tptr++;",
          "2594:      while (tmp && alen < tmp) {",
          "",
          "[Removed Lines]",
          "2591:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2591:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2600:   tmp -= alen + 1;",
          "2602:                     break;",
          "2604:   alen = EXTRACT_8BITS(tptr);",
          "2605:   tptr++;",
          "2606:      }",
          "",
          "[Removed Lines]",
          "2603:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2603:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2774:      }",
          "2775:      break;",
          "2776:  case ISIS_TLV_AUTH:",
          "2779:             ND_PRINT((ndo, \"\\n\\t      %s: \",",
          "2780:                    tok2str(isis_subtlv_auth_values,",
          "",
          "[Removed Lines]",
          "2777:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2777:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2788:   break;",
          "2789:      case ISIS_SUBTLV_AUTH_MD5:",
          "2790:   for(i=1;i<tlv_len;i++) {",
          "2792:       ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2793:   }",
          "2794:   if (tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN+1)",
          "",
          "[Removed Lines]",
          "2791:       ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2791:       ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2802:   break;",
          "2803:             case ISIS_SUBTLV_AUTH_GENERIC:",
          "2805:                 key_id = EXTRACT_BE_16BITS(tptr + 1);",
          "2806:                 ND_PRINT((ndo, \"%u, password: \", key_id));",
          "2807:                 for(i=1 + sizeof(uint16_t);i<tlv_len;i++) {",
          "2809:                     ND_PRINT((ndo, \"%02x\", EXTRACT_8BITS(tptr + i)));",
          "2810:                 }",
          "2811:                 break;",
          "",
          "[Removed Lines]",
          "2804:   ND_TCHECK_16BITS(tptr + 1);",
          "2808:                     ND_TCHECK_8BITS(tptr + i);",
          "",
          "[Added Lines]",
          "2804:   ND_TCHECK_2(tptr + 1);",
          "2808:                     ND_TCHECK_1(tptr + i);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2820:  case ISIS_TLV_PTP_ADJ:",
          "2821:      tlv_ptp_adj = (const struct isis_tlv_ptp_adj *)tptr;",
          "2822:      if(tmp>=1) {",
          "2824:   ND_PRINT((ndo, \"\\n\\t      Adjacency State: %s (%u)\",",
          "2825:          tok2str(isis_ptp_adjancey_values, \"unknown\", EXTRACT_8BITS(tptr)),",
          "2826:          EXTRACT_8BITS(tptr)));",
          "",
          "[Removed Lines]",
          "2823:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2823:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2848:  case ISIS_TLV_PROTOCOLS:",
          "2849:      ND_PRINT((ndo, \"\\n\\t      NLPID(s): \"));",
          "2850:      while (tmp>0) {",
          "2852:   ND_PRINT((ndo, \"%s (0x%02x)\",",
          "2853:                        tok2str(nlpid_values,",
          "2854:                                \"unknown\",",
          "",
          "[Removed Lines]",
          "2851:   ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2851:   ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2864:     case ISIS_TLV_MT_PORT_CAP:",
          "2865:     {",
          "2868:       ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\",",
          "2869:               (EXTRACT_BE_16BITS(tptr) >> 12),",
          "",
          "[Removed Lines]",
          "2866:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2866:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2881:     case ISIS_TLV_MT_CAPABILITY:",
          "2885:       ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\",",
          "2886:                 (EXTRACT_BE_16BITS(tptr) >> 15) & 0x01,",
          "",
          "[Removed Lines]",
          "2883:       ND_TCHECK_16BITS(tptr);",
          "",
          "[Added Lines]",
          "2883:       ND_TCHECK_2(tptr);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2926:      if (tmp < 1)",
          "2927:          break;",
          "2929:      ND_PRINT((ndo, \", Flags: [%s]\", ISIS_MASK_TLV_SHARED_RISK_GROUP(EXTRACT_8BITS(tptr)) ? \"numbered\" : \"unnumbered\"));",
          "2930:      tptr++;",
          "2931:      tmp--;",
          "",
          "[Removed Lines]",
          "2928:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "2928:      ND_TCHECK_1(tptr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2945:      tmp-=sizeof(struct in_addr);",
          "2947:      while (tmp>=4) {",
          "2949:                 ND_PRINT((ndo, \"\\n\\t      Link-ID: 0x%08x\", EXTRACT_BE_32BITS(tptr)));",
          "2950:                 tptr+=4;",
          "2951:                 tmp-=4;",
          "",
          "[Removed Lines]",
          "2948:                 ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "2948:                 ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3095:             tmp-=sizeof(struct isis_metric_block);",
          "3097:             while(tmp>0) {",
          "3100:                 tptr++;",
          "3101:                 if (prefix_len < 2) {",
          "",
          "[Removed Lines]",
          "3098:                 ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "3098:                 ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-juniper.c||print-juniper.c": [
          "File: print-juniper.c -> print-juniper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1373:             l2info->proto = EXTRACT_BE_16BITS(p + l2info->cookie_len);",
          "1374:             break;",
          "1375:         }",
          "",
          "[Removed Lines]",
          "1372:             ND_TCHECK_16BITS(p+l2info->cookie_len);",
          "",
          "[Added Lines]",
          "1372:             ND_TCHECK_2(p + l2info->cookie_len);",
          "",
          "---------------"
        ],
        "print-mobility.c||print-mobility.c": [
          "File: print-mobility.c -> print-mobility.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     goto trunc;",
          "151:    }",
          "154:    ND_PRINT((ndo, \"(refresh: %u)\",",
          "155:     EXTRACT_BE_16BITS(bp + i + 2) << 2));",
          "156:    break;",
          "",
          "[Removed Lines]",
          "153:    ND_TCHECK_16BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "153:    ND_TCHECK_2(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     ND_PRINT((ndo, \"(altcoa: trunc)\"));",
          "160:     goto trunc;",
          "161:    }",
          "163:    ND_PRINT((ndo, \"(alt-CoA: %s)\", ip6addr_string(ndo, &bp[i+2])));",
          "164:    break;",
          "165:   case IP6MOPT_NONCEID:",
          "",
          "[Removed Lines]",
          "162:    ND_TCHECK_128BITS(&bp[i+2]);",
          "",
          "[Added Lines]",
          "162:    ND_TCHECK_16(&bp[i + 2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     ND_PRINT((ndo, \"(ni: trunc)\"));",
          "168:     goto trunc;",
          "169:    }",
          "172:    ND_PRINT((ndo, \"(ni: ho=0x%04x co=0x%04x)\",",
          "173:     EXTRACT_BE_16BITS(bp + i + 2),",
          "174:     EXTRACT_BE_16BITS(bp + i + 4)));",
          "",
          "[Removed Lines]",
          "170:    ND_TCHECK_16BITS(&bp[i+2]);",
          "171:    ND_TCHECK_16BITS(&bp[i+4]);",
          "",
          "[Added Lines]",
          "170:    ND_TCHECK_2(&bp[i + 2]);",
          "171:    ND_TCHECK_2(&bp[i + 4]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:  case IP6M_CAREOF_TEST_INIT:",
          "248:   hlen = IP6M_MINLEN;",
          "249:   if (ndo->ndo_vflag) {",
          "251:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "252:           type == IP6M_HOME_TEST_INIT ? \"Home\" : \"Care-of\",",
          "253:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "250:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "250:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   ND_PRINT((ndo, \" nonce id=0x%x\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "262:   hlen = IP6M_MINLEN;",
          "263:   if (ndo->ndo_vflag) {",
          "265:    ND_PRINT((ndo, \" %s Init Cookie=%08x:%08x\",",
          "266:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "267:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "264:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "264:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269:   }",
          "270:   hlen += 8;",
          "271:   if (ndo->ndo_vflag) {",
          "273:    ND_PRINT((ndo, \" %s Keygen Token=%08x:%08x\",",
          "274:           type == IP6M_HOME_TEST ? \"Home\" : \"Care-of\",",
          "275:           EXTRACT_BE_32BITS(bp + hlen),",
          "",
          "[Removed Lines]",
          "272:    ND_TCHECK_32BITS(&bp[hlen + 4]);",
          "",
          "[Added Lines]",
          "272:    ND_TCHECK_4(&bp[hlen + 4]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281:   ND_TCHECK(mh->ip6m_data16[0]);",
          "282:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(&mh->ip6m_data16[0])));",
          "283:   hlen = IP6M_MINLEN;",
          "285:   if (bp[hlen] & 0xf0) {",
          "286:    ND_PRINT((ndo, \" \"));",
          "287:    if (bp[hlen] & 0x80)",
          "",
          "[Removed Lines]",
          "284:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "284:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:   hlen += 1;",
          "299:   hlen += 1;",
          "302:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "303:   hlen += 2;",
          "",
          "[Removed Lines]",
          "300:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "300:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "310:    ND_PRINT((ndo, \" K\"));",
          "312:   hlen = IP6M_MINLEN;",
          "314:   ND_PRINT((ndo, \" seq#=%u\", EXTRACT_BE_16BITS(bp + hlen)));",
          "315:   hlen += 2;",
          "318:   ND_PRINT((ndo, \" lifetime=%u\", EXTRACT_BE_16BITS(bp + hlen) << 2));",
          "319:   hlen += 2;",
          "",
          "[Removed Lines]",
          "313:   ND_TCHECK_16BITS(&bp[hlen]);",
          "316:   ND_TCHECK_16BITS(&bp[hlen]);",
          "",
          "[Added Lines]",
          "313:   ND_TCHECK_2(&bp[hlen]);",
          "316:   ND_TCHECK_2(&bp[hlen]);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:  case OSPF_TYPE_HELLO: {",
          "738:   register const struct hello6 *hellop = (const struct hello6 *)((const uint8_t *)op + OSPF6HDR_LEN);",
          "741:   ND_PRINT((ndo, \"\\n\\tOptions [%s]\",",
          "742:             bittok2str(ospf6_option_values, \"none\",",
          "743:             EXTRACT_BE_32BITS(&hellop->hello_options))));",
          "",
          "[Removed Lines]",
          "740:   ND_TCHECK_32BITS(&hellop->hello_options);",
          "",
          "[Added Lines]",
          "740:   ND_TCHECK_4(&hellop->hello_options);",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:      bp += (2 * sizeof(uint16_t));",
          "365:      switch (EXTRACT_BE_16BITS(bp)) {",
          "366:      case AFNUM_INET:",
          "367:   ND_TCHECK2(*bp, sizeof(struct in_addr));",
          "",
          "[Removed Lines]",
          "364:      ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "364:      ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:   if (len < 2)",
          "1024:    goto trunc;",
          "1026:   ND_PRINT((ndo, \" tag=%x\", EXTRACT_BE_16BITS(bp)));",
          "1027:   bp += 2;",
          "1028:   len -= 2;",
          "",
          "[Removed Lines]",
          "1025:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1025:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1080:     if (len < 2)",
          "1081:      goto trunc;",
          "1083:     ND_PRINT((ndo, \",holdtime=\"));",
          "1084:     unsigned_relts_print(ndo,",
          "1085:            EXTRACT_BE_16BITS(bp));",
          "",
          "[Removed Lines]",
          "1082:     ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1082:     ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:   ND_PRINT((ndo, \" prio=%d\", bp[1]));",
          "1131:   if (len < 4)",
          "1132:    goto trunc;",
          "1134:   ND_PRINT((ndo, \" holdtime=\"));",
          "1135:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp + 2));",
          "1136:   bp += 4;",
          "",
          "[Removed Lines]",
          "1133:   ND_TCHECK_16BITS(&bp[2]);",
          "",
          "[Added Lines]",
          "1133:   ND_TCHECK_2(&bp[2]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1172:   len -= advance;",
          "1173:   if (len < 2)",
          "1174:    goto trunc;",
          "1176:   ND_PRINT((ndo, \" TUNR \"));",
          "1177:   unsigned_relts_print(ndo, EXTRACT_BE_16BITS(bp));",
          "1178:   break;",
          "",
          "[Removed Lines]",
          "1175:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "1175:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:    ND_PRINT((ndo, \" (length bogus, should be >= 6)\"));",
          "614:    return len;",
          "615:   }",
          "617:   ND_PRINT((ndo, \": Vendor: %s (%u)\",",
          "618:    tok2str(oui_values,\"Unknown\",EXTRACT_BE_24BITS(p + 2)),",
          "619:    EXTRACT_BE_24BITS(p + 2)));",
          "",
          "[Removed Lines]",
          "616:   ND_TCHECK_24BITS(p + 2);",
          "",
          "[Added Lines]",
          "616:   ND_TCHECK_3(p + 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "633:    return len;",
          "634:   }",
          "636:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "637:   break;",
          "638:  case LCPOPT_ACCM:",
          "",
          "[Removed Lines]",
          "635:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "635:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "640:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "641:    return len;",
          "642:   }",
          "644:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "645:   break;",
          "646:  case LCPOPT_AP:",
          "",
          "[Removed Lines]",
          "643:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "643:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "649:    return len;",
          "650:   }",
          "652:   ND_PRINT((ndo, \": %s\", tok2str(ppptype2str, \"Unknown Auth Proto (0x04x)\", EXTRACT_BE_16BITS(p + 2))));",
          "654:   switch (EXTRACT_BE_16BITS(p + 2)) {",
          "",
          "[Removed Lines]",
          "651:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "651:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "670:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "671:    return 0;",
          "672:   }",
          "674:   if (EXTRACT_BE_16BITS(p + 2) == PPP_LQM)",
          "675:    ND_PRINT((ndo, \": LQR\"));",
          "676:   else",
          "",
          "[Removed Lines]",
          "673:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "673:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "681:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "682:    return 0;",
          "683:   }",
          "685:   ND_PRINT((ndo, \": 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "686:   break;",
          "687:  case LCPOPT_PFC:",
          "",
          "[Removed Lines]",
          "684:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "684:   ND_TCHECK_4(p + 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "693:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "694:    return 0;",
          "695:   }",
          "697:   ND_PRINT((ndo, \": 0x%04x\", EXTRACT_BE_16BITS(p + 2)));",
          "698:   break;",
          "699:  case LCPOPT_CBACK:",
          "",
          "[Removed Lines]",
          "696:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "696:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712:    ND_PRINT((ndo, \" (length bogus, should be = 4)\"));",
          "713:    return 0;",
          "714:   }",
          "716:   ND_PRINT((ndo, \": %u\", EXTRACT_BE_16BITS(p + 2)));",
          "717:   break;",
          "718:  case LCPOPT_MLED:",
          "",
          "[Removed Lines]",
          "715:   ND_TCHECK_16BITS(p + 2);",
          "",
          "[Added Lines]",
          "715:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "817:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "818:         return;",
          "819:     }",
          "821:         ND_PRINT((ndo, \"[|mlppp]\"));",
          "822:         return;",
          "823:     }",
          "",
          "[Removed Lines]",
          "820:     if (!ND_TTEST_16BITS(p)) {",
          "",
          "[Added Lines]",
          "820:     if (!ND_TTEST_2(p)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1072:    ND_PRINT((ndo, \" (length bogus, should be >= 4)\"));",
          "1073:    return 0;",
          "1074:   }",
          "1076:   compproto = EXTRACT_BE_16BITS(p + 2);",
          "1078:   ND_PRINT((ndo, \": %s (0x%02x):\",",
          "",
          "[Removed Lines]",
          "1075:   ND_TCHECK_16BITS(p+2);",
          "",
          "[Added Lines]",
          "1075:   ND_TCHECK_2(p + 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1353:    ND_PRINT((ndo, \" (length bogus, should be = 6)\"));",
          "1354:    return len;",
          "1355:   }",
          "1357:   ND_PRINT((ndo, \": Magic-Num 0x%08x\", EXTRACT_BE_32BITS(p + 2)));",
          "1358:   break;",
          "1359:  default:",
          "",
          "[Removed Lines]",
          "1356:   ND_TCHECK_32BITS(p + 2);",
          "",
          "[Added Lines]",
          "1356:   ND_TCHECK_4(p + 2);",
          "",
          "---------------"
        ],
        "print-rpki-rtr.c||print-rpki-rtr.c": [
          "File: print-rpki-rtr.c -> print-rpki-rtr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     const u_char *msg;",
          "186:     if (*tptr != 0) {",
          "",
          "[Removed Lines]",
          "185:     ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "185:     ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ],
        "print-rx.c||print-rx.c": [
          "File: print-rx.c -> print-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:  struct rx_cache_entry *rxent;",
          "683:  const struct rx_header *rxh = (const struct rx_header *) bp;",
          "686:   return;",
          "688:  rxent = &rx_cache[rx_cache_next];",
          "",
          "[Removed Lines]",
          "685:  if (!ND_TTEST_32BITS(bp + sizeof(struct rx_header)))",
          "",
          "[Added Lines]",
          "685:  if (!ND_TTEST_4(bp + sizeof(struct rx_header)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:   }",
          "773: #define INTOUT() { int32_t _i; \\",
          "775:    _i = EXTRACT_BE_INT32(bp); \\",
          "776:    bp += sizeof(int32_t); \\",
          "777:    ND_PRINT((ndo, \" %d\", _i)); \\",
          "778:   }",
          "780: #define UINTOUT() { uint32_t _i; \\",
          "782:    _i = EXTRACT_BE_32BITS(bp); \\",
          "783:    bp += sizeof(uint32_t); \\",
          "784:    ND_PRINT((ndo, \" %u\", _i)); \\",
          "",
          "[Removed Lines]",
          "774:    ND_TCHECK_32BITS(bp); \\",
          "781:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "774:    ND_TCHECK_4(bp); \\",
          "781:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:   }",
          "794: #define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\",
          "796:    _t = (time_t) EXTRACT_BE_INT32(bp); \\",
          "797:    bp += sizeof(int32_t); \\",
          "798:    tm = localtime(&_t); \\",
          "",
          "[Removed Lines]",
          "795:    ND_TCHECK_32BITS(bp); \\",
          "",
          "[Added Lines]",
          "795:    ND_TCHECK_4(bp); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "900:  fs_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "902:  ND_PRINT((ndo, \" fs call %s\", tok2str(fs_req, \"op#%u\", fs_op)));",
          "",
          "[Removed Lines]",
          "899:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "899:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1006:   {",
          "1007:    uint32_t j;",
          "1009:    j = EXTRACT_BE_32BITS(bp);",
          "1010:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1008:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1008:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1082:   {",
          "1083:    char a[AFSOPAQUEMAX+1];",
          "1085:    i = EXTRACT_BE_32BITS(bp);",
          "1086:    bp += sizeof(uint32_t);",
          "1087:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1084:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1084:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1113:   int32_t errcode;",
          "1116:   errcode = EXTRACT_BE_INT32(bp);",
          "1117:   bp += sizeof(int32_t);",
          "",
          "[Removed Lines]",
          "1115:   ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1115:   ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1233:  cb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1235:  ND_PRINT((ndo, \" cb call %s\", tok2str(cb_req, \"op#%u\", cb_op)));",
          "",
          "[Removed Lines]",
          "1232:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1232:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1246:   {",
          "1247:    uint32_t j, t;",
          "1249:    j = EXTRACT_BE_32BITS(bp);",
          "1250:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1248:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1248:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1258:    if (j == 0)",
          "1259:     ND_PRINT((ndo, \" <none!>\"));",
          "1262:    j = EXTRACT_BE_32BITS(bp);",
          "1263:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1261:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1261:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1270:     INTOUT();",
          "1271:     ND_PRINT((ndo, \" expires\"));",
          "1272:     DATEOUT();",
          "1274:     t = EXTRACT_BE_32BITS(bp);",
          "1275:     bp += sizeof(uint32_t);",
          "1276:     tok2str(cb_types, \"type %u\", t);",
          "",
          "[Removed Lines]",
          "1273:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1273:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1364:  pt_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1366:  ND_PRINT((ndo, \" pt\"));",
          "",
          "[Removed Lines]",
          "1363:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1363:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1414:   {",
          "1415:    uint32_t j;",
          "1417:    j = EXTRACT_BE_32BITS(bp);",
          "1418:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1416:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1416:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1435:   {",
          "1436:    uint32_t j;",
          "1437:    ND_PRINT((ndo, \" ids:\"));",
          "1439:    i = EXTRACT_BE_32BITS(bp);",
          "1440:    bp += sizeof(uint32_t);",
          "1441:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1438:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1438:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1525:   {",
          "1526:    uint32_t j;",
          "1527:    ND_PRINT((ndo, \" ids:\"));",
          "1529:    i = EXTRACT_BE_32BITS(bp);",
          "1530:    bp += sizeof(uint32_t);",
          "1531:    for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "1528:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1528:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1538:   {",
          "1539:    uint32_t j;",
          "1541:    j = EXTRACT_BE_32BITS(bp);",
          "1542:    bp += sizeof(uint32_t);",
          "",
          "[Removed Lines]",
          "1540:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1540:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1563:   {",
          "1564:    uint32_t j;",
          "1566:    j = EXTRACT_BE_32BITS(bp);",
          "1567:    bp += sizeof(uint32_t);",
          "1568:    for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "1565:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1565:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1618:  vldb_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1620:  ND_PRINT((ndo, \" vldb\"));",
          "",
          "[Removed Lines]",
          "1617:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1617:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1645:    ND_PRINT((ndo, \" volid\"));",
          "1646:    INTOUT();",
          "1648:    i = EXTRACT_BE_32BITS(bp);",
          "1649:    bp += sizeof(uint32_t);",
          "1650:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1647:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1647:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1665:    ND_PRINT((ndo, \" volid\"));",
          "1666:    INTOUT();",
          "1668:    i = EXTRACT_BE_32BITS(bp);",
          "1669:    bp += sizeof(uint32_t);",
          "1670:    if (i <= 2)",
          "",
          "[Removed Lines]",
          "1667:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1667:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1735:   { uint32_t nservers, j;",
          "1736:    VECOUT(VLNAMEMAX);",
          "1738:    bp += sizeof(uint32_t);",
          "1739:    ND_PRINT((ndo, \" numservers\"));",
          "1741:    nservers = EXTRACT_BE_32BITS(bp);",
          "1742:    bp += sizeof(uint32_t);",
          "1743:    ND_PRINT((ndo, \" %u\", nservers));",
          "1744:    ND_PRINT((ndo, \" servers\"));",
          "1745:    for (i = 0; i < 8; i++) {",
          "1747:     if (i < nservers)",
          "1748:      ND_PRINT((ndo, \" %s\",",
          "1749:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1737:    ND_TCHECK_32BITS(bp);",
          "1740:    ND_TCHECK_32BITS(bp);",
          "1746:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1737:    ND_TCHECK_4(bp);",
          "1740:    ND_TCHECK_4(bp);",
          "1746:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1751:    }",
          "1752:    ND_PRINT((ndo, \" partitions\"));",
          "1753:    for (i = 0; i < 8; i++) {",
          "1755:     j = EXTRACT_BE_32BITS(bp);",
          "1756:     if (i < nservers && j <= 26)",
          "1757:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1754:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1754:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1784:   { uint32_t nservers, j;",
          "1785:    VECOUT(VLNAMEMAX);",
          "1786:    ND_PRINT((ndo, \" numservers\"));",
          "1788:    nservers = EXTRACT_BE_32BITS(bp);",
          "1789:    bp += sizeof(uint32_t);",
          "1790:    ND_PRINT((ndo, \" %u\", nservers));",
          "1791:    ND_PRINT((ndo, \" servers\"));",
          "1792:    for (i = 0; i < 13; i++) {",
          "1794:     if (i < nservers)",
          "1795:      ND_PRINT((ndo, \" %s\",",
          "1796:         intoa(((const struct in_addr *) bp)->s_addr)));",
          "",
          "[Removed Lines]",
          "1787:    ND_TCHECK_32BITS(bp);",
          "1793:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1787:    ND_TCHECK_4(bp);",
          "1793:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1798:    }",
          "1799:    ND_PRINT((ndo, \" partitions\"));",
          "1800:    for (i = 0; i < 13; i++) {",
          "1802:     j = EXTRACT_BE_32BITS(bp);",
          "1803:     if (i < nservers && j <= 26)",
          "1804:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1801:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1801:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1821:   { uint32_t nservers, j;",
          "1822:    VECOUT(VLNAMEMAX);",
          "1823:    ND_PRINT((ndo, \" numservers\"));",
          "1825:    nservers = EXTRACT_BE_32BITS(bp);",
          "1826:    bp += sizeof(uint32_t);",
          "1827:    ND_PRINT((ndo, \" %u\", nservers));",
          "",
          "[Removed Lines]",
          "1824:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1824:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1839:    bp += 4 * 13;",
          "1840:    ND_PRINT((ndo, \" partitions\"));",
          "1841:    for (i = 0; i < 13; i++) {",
          "1843:     j = EXTRACT_BE_32BITS(bp);",
          "1844:     if (i < nservers && j <= 26)",
          "1845:      ND_PRINT((ndo, \" %c\", 'a' + j));",
          "",
          "[Removed Lines]",
          "1842:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1842:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1896:  kauth_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "1898:  ND_PRINT((ndo, \" kauth\"));",
          "",
          "[Removed Lines]",
          "1895:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "1895:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1934:    INTOUT();",
          "1935:    ND_PRINT((ndo, \" domain\"));",
          "1936:    STROUT(KANAMEMAX);",
          "1938:    i = EXTRACT_BE_32BITS(bp);",
          "1939:    bp += sizeof(uint32_t);",
          "1940:    ND_TCHECK2(bp[0], i);",
          "",
          "[Removed Lines]",
          "1937:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "1937:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2039:  vol_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2041:  ND_PRINT((ndo, \" vol call %s\", tok2str(vol_req, \"op#%u\", vol_op)));",
          "",
          "[Removed Lines]",
          "2038:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2038:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2187:    DATEOUT();",
          "2188:    {",
          "2189:     uint32_t i, j;",
          "2191:     j = EXTRACT_BE_32BITS(bp);",
          "2192:     bp += sizeof(uint32_t);",
          "2193:     for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2190:     ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2190:     ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2316:     {",
          "2317:      uint32_t i, j;",
          "2319:      j = EXTRACT_BE_32BITS(bp);",
          "2320:      bp += sizeof(uint32_t);",
          "2321:      for (i = 0; i < j; i++) {",
          "",
          "[Removed Lines]",
          "2318:      ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2318:      ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2373:  bos_op = EXTRACT_BE_32BITS(bp + sizeof(struct rx_header));",
          "2375:  ND_PRINT((ndo, \" bos call %s\", tok2str(bos_req, \"op#%u\", bos_op)));",
          "",
          "[Removed Lines]",
          "2372:  ND_TCHECK_32BITS(bp + sizeof(struct rx_header));",
          "",
          "[Added Lines]",
          "2372:  ND_TCHECK_4(bp + sizeof(struct rx_header));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2532:  switch (ubik_op) {",
          "2535:    temp = EXTRACT_BE_32BITS(bp);",
          "2536:    bp += sizeof(uint32_t);",
          "2537:    ND_PRINT((ndo, \" syncsite %s\", temp ? \"yes\" : \"no\"));",
          "",
          "[Removed Lines]",
          "2534:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2534:    ND_TCHECK_4(bp);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2563:    INTOUT();",
          "2564:    ND_PRINT((ndo, \" length\"));",
          "2565:    INTOUT();",
          "2567:    temp = EXTRACT_BE_32BITS(bp);",
          "2568:    bp += sizeof(uint32_t);",
          "2569:    tok2str(ubik_lock_types, \"type %u\", temp);",
          "",
          "[Removed Lines]",
          "2566:    ND_TCHECK_32BITS(bp);",
          "",
          "[Added Lines]",
          "2566:    ND_TCHECK_4(bp);",
          "",
          "---------------"
        ],
        "print-smb.c||print-smb.c": [
          "File: print-smb.c -> print-smb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "820:     if (ndo->ndo_vflag < 2)",
          "821:  return;",
          "824:     flags2 = EXTRACT_LE_16BITS(buf + 10);",
          "825:     unicodestr = flags2 & 0x8000;",
          "826:     nterrcodes = flags2 & 0x4000;",
          "",
          "[Removed Lines]",
          "823:     ND_TCHECK_16BITS(&buf[10]);",
          "",
          "[Added Lines]",
          "823:     ND_TCHECK_2(&buf[10]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1167:      p = smb_fdata(ndo, p, \"Name=[n1]\\n#\", maxbuf, 0);",
          "1168:      if (p == NULL)",
          "1169:   goto out;",
          "1171:      restype = EXTRACT_BE_16BITS(p);",
          "1172:      p = smb_fdata(ndo, p, \"ResType=[rw]\\nResClass=[rw]\\nTTL=[rD]\\n\", p + 8, 0);",
          "1173:      if (p == NULL)",
          "1174:   goto out;",
          "1176:      rdlen = EXTRACT_BE_16BITS(p);",
          "1177:      ND_PRINT((ndo, \"ResourceLength=%d\\nResourceData=\\n\", rdlen));",
          "1178:      p += 2;",
          "",
          "[Removed Lines]",
          "1170:      ND_TCHECK_16BITS(p);",
          "1175:      ND_TCHECK_16BITS(p);",
          "",
          "[Added Lines]",
          "1170:      ND_TCHECK_2(p);",
          "1175:      ND_TCHECK_2(p);",
          "",
          "---------------"
        ],
        "print-stp.c||print-stp.c": [
          "File: print-stp.c -> print-stp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:            (float) EXTRACT_BE_16BITS(&stp_bpdu->hello_time) / STP_TIME_BASE,",
          "282:            (float) EXTRACT_BE_16BITS(&stp_bpdu->forward_delay) / STP_TIME_BASE));",
          "285:     ND_PRINT((ndo, \"\\n\\tv3len %d, \", EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET)));",
          "287:     ND_PRINT((ndo, \"MCID Name \"));",
          "288:     if (fn_printzp(ndo, ptr + MST_BPDU_CONFIG_NAME_OFFSET, 32, ndo->ndo_snapend))",
          "289:  goto trunc;",
          "",
          "[Removed Lines]",
          "284:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "[Added Lines]",
          "284:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "286:     ND_TCHECK_4(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 8),",
          "296:            EXTRACT_BE_32BITS(ptr + MST_BPDU_CONFIG_DIGEST_OFFSET + 12)));",
          "299:     ND_PRINT((ndo, \"CIST int-root-pathcost %u,\",",
          "300:             EXTRACT_BE_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET)));",
          "",
          "[Removed Lines]",
          "298:     ND_TCHECK_32BITS(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "[Added Lines]",
          "298:     ND_TCHECK_4(ptr + MST_BPDU_CIST_INT_PATH_COST_OFFSET);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:     ND_PRINT((ndo, \"CIST remaining-hops %d\", ptr[MST_BPDU_CIST_REMAIN_HOPS_OFFSET]));",
          "311:     v3len = EXTRACT_BE_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "312:     if (v3len > MST_BPDU_CONFIG_INFO_LENGTH) {",
          "313:         len = v3len - MST_BPDU_CONFIG_INFO_LENGTH;",
          "",
          "[Removed Lines]",
          "310:     ND_TCHECK_16BITS(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "310:     ND_TCHECK_2(ptr + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "355:     }",
          "357:     ptr = (const u_char *)stp_bpdu;",
          "360:     ND_PRINT((ndo, \"\\n\\tv4len %d, \", EXTRACT_BE_16BITS(ptr + offset)));",
          "361:     ND_PRINT((ndo, \"AUXMCID Name \"));",
          "",
          "[Removed Lines]",
          "358:     ND_TCHECK_32BITS(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "[Added Lines]",
          "358:     ND_TCHECK_4(ptr + offset + SPB_BPDU_AGREEMENT_DIGEST_OFFSET + 16);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:             }",
          "466:             mstp_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "468:             if (length < (sizeof(struct stp_bpdu_) + mstp_len)) {",
          "",
          "[Removed Lines]",
          "465:             ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "[Added Lines]",
          "465:             ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:             if (stp_bpdu->protocol_version == STP_PROTO_SPB)",
          "475:             {",
          "478:               spb_len = EXTRACT_BE_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "479:               spb_len += 2;",
          "480:               if (length < (sizeof(struct stp_bpdu_) + mstp_len + spb_len) ||",
          "",
          "[Removed Lines]",
          "477:               ND_TCHECK_16BITS(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "[Added Lines]",
          "477:               ND_TCHECK_2(p + MST_BPDU_VER3_LEN_OFFSET + mstp_len);",
          "",
          "---------------"
        ],
        "print-tftp.c||print-tftp.c": [
          "File: print-tftp.c -> print-tftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:  if (length < 2)",
          "103:   goto trunc;",
          "105:  opcode = EXTRACT_BE_16BITS(bp);",
          "106:  cp = tok2str(op2str, \"tftp-#%d\", opcode);",
          "107:  ND_PRINT((ndo, \" %s\", cp));",
          "",
          "[Removed Lines]",
          "104:  ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "104:  ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  case DATA:",
          "169:   if (length < 2)",
          "172:   ND_PRINT((ndo, \" block %d\", EXTRACT_BE_16BITS(bp)));",
          "173:   break;",
          "",
          "[Removed Lines]",
          "171:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "171:   ND_TCHECK_2(bp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   if (length < 2)",
          "180:   ND_PRINT((ndo, \" %s\", tok2str(err2str, \"tftp-err-#%d \\\"\",",
          "181:            EXTRACT_BE_16BITS(bp))));",
          "182:   bp += 2;",
          "",
          "[Removed Lines]",
          "179:   ND_TCHECK_16BITS(bp);",
          "",
          "[Added Lines]",
          "179:   ND_TCHECK_2(bp);",
          "",
          "---------------"
        ],
        "print-udp.c||print-udp.c": [
          "File: print-udp.c -> print-udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  u_int ts;",
          "106:  ts = EXTRACT_BE_16BITS(hdr);",
          "107:  if ((ts & 0xf060) != 0) {",
          "110:   ND_PRINT((ndo, \"udp/vt %u %d / %d\",",
          "111:         (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up)),",
          "112:         ts & 0x3ff, ts >> 10));",
          "",
          "[Removed Lines]",
          "105:  ND_TCHECK_16BITS((const u_int *)hdr);",
          "109:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "105:  ND_TCHECK_2((const u_int *)hdr);",
          "109:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   uint32_t i0, i1;",
          "118:   i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "120:   i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "122:   ND_PRINT((ndo, \"udp/vat %u c%d %u%s\",",
          "123:    (uint32_t)(EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8),",
          "124:    i0 & 0xffff,",
          "",
          "[Removed Lines]",
          "117:   ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "117:   ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "119:   ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "121:   ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  uint32_t i0, i1;",
          "145:  const char * ptype;",
          "148:  i0 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[0]);",
          "150:  i1 = EXTRACT_BE_32BITS(&((const u_int *)hdr)[1]);",
          "152:  dlen = EXTRACT_BE_16BITS(&up->uh_ulen) - sizeof(*up) - 8;",
          "153:  ip += 2;",
          "154:  len >>= 2;",
          "",
          "[Removed Lines]",
          "147:  ND_TCHECK_32BITS(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_32BITS(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_16BITS(&up->uh_ulen);",
          "",
          "[Added Lines]",
          "147:  ND_TCHECK_4(&((const u_int *)hdr)[0]);",
          "149:  ND_TCHECK_4(&((const u_int *)hdr)[1]);",
          "151:  ND_TCHECK_2(&up->uh_ulen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:   i0 & 0xffff,",
          "181:   i1));",
          "182:  if (ndo->ndo_vflag) {",
          "184:   ND_PRINT((ndo, \" %u\", EXTRACT_BE_32BITS(&((const u_int *)hdr)[2])));",
          "185:   if (hasopt) {",
          "186:    u_int i2, optlen;",
          "187:    do {",
          "189:     i2 = EXTRACT_BE_32BITS(ip);",
          "190:     optlen = (i2 >> 16) & 0xff;",
          "191:     if (optlen == 0 || optlen > len) {",
          "",
          "[Removed Lines]",
          "183:   ND_TCHECK_32BITS(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "183:   ND_TCHECK_4(&((const u_int *)hdr)[2]);",
          "188:     ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:   }",
          "199:   if (hasext) {",
          "200:    u_int i2, extlen;",
          "202:    i2 = EXTRACT_BE_32BITS(ip);",
          "203:    extlen = (i2 & 0xffff) + 1;",
          "204:    if (extlen > len) {",
          "",
          "[Removed Lines]",
          "201:    ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "201:    ND_TCHECK_4(ip);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:    }",
          "208:    ip += extlen;",
          "209:   }",
          "212:    ND_PRINT((ndo, \" 0x%04x\", EXTRACT_BE_32BITS(ip) >> 16));",
          "213:  }",
          "",
          "[Removed Lines]",
          "210:   ND_TCHECK_32BITS(ip);",
          "",
          "[Added Lines]",
          "210:   ND_TCHECK_4(ip);",
          "",
          "---------------"
        ],
        "print-vtp.c||print-vtp.c": [
          "File: print-vtp.c -> print-vtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:  ND_PRINT((ndo, \", Config Rev %x\", EXTRACT_BE_32BITS(tptr)));",
          "",
          "[Removed Lines]",
          "225:  ND_TCHECK_32BITS(tptr);",
          "",
          "[Added Lines]",
          "225:  ND_TCHECK_4(tptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  tptr += 4;",
          "244:  while (tptr < (pptr+length)) {",
          "247:      len = *tptr;",
          "248:      if (len == 0)",
          "249:   break;",
          "",
          "[Removed Lines]",
          "246:      ND_TCHECK_8BITS(tptr);",
          "",
          "[Added Lines]",
          "246:      ND_TCHECK_1(tptr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}