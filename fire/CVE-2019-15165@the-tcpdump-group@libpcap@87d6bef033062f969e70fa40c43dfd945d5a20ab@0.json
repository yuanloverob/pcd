{
  "cve_id": "CVE-2019-15165",
  "cve_desc": "sf-pcapng.c in libpcap before 1.9.1 does not properly validate the PHB header length before allocating memory.",
  "repo": "the-tcpdump-group/libpcap",
  "patch_hash": "87d6bef033062f969e70fa40c43dfd945d5a20ab",
  "patch_info": {
    "commit_hash": "87d6bef033062f969e70fa40c43dfd945d5a20ab",
    "repo": "the-tcpdump-group/libpcap",
    "commit_url": "https://github.com/the-tcpdump-group/libpcap/commit/87d6bef033062f969e70fa40c43dfd945d5a20ab",
    "files": [
      "sf-pcapng.c"
    ],
    "message": "do sanity checks on PHB header length before allocating memory. There was no fault; but doing the check results in a more consistent error",
    "before_after_code_files": [
      "sf-pcapng.c||sf-pcapng.c"
    ]
  },
  "patch_diff": {
    "sf-pcapng.c||sf-pcapng.c": [
      "File: sf-pcapng.c -> sf-pcapng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "266:    if (amt_read == 0 && !fail_on_eof)",
      "268:    pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,",
      "270:        bytes_to_read, amt_read);",
      "271:   }",
      "272:   return (-1);",
      "",
      "[Removed Lines]",
      "269:        \"truncated dump file; tried to read %\" PRIsize \" bytes, only got %\" PRIsize,",
      "",
      "[Added Lines]",
      "269:        \"truncated pcapng dump file; tried to read %\" PRIsize \" bytes, only got %\" PRIsize,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "860:   pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,",
      "876:   return (NULL);",
      "877:  }",
      "",
      "[Removed Lines]",
      "859:  if (total_length < sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer)) {",
      "861:       \"Section Header Block in pcapng dump file has a length of %u < %\" PRIsize,",
      "862:       total_length,",
      "863:       sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer));",
      "865:   return (NULL);",
      "866:  }",
      "871:  if (total_length > INITIAL_MAX_BLOCKSIZE) {",
      "872:   pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,",
      "873:       \"pcapng block size %u > maximum %u\",",
      "874:       total_length, INITIAL_MAX_BLOCKSIZE);",
      "",
      "[Added Lines]",
      "859:  if (total_length < sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer) ||",
      "860:             (total_length > BT_SHB_INSANE_MAX)) {",
      "862:       \"Section Header Block in pcapng dump file has invalid length %\" PRIsize \" < _%lu_ < %lu (BT_SHB_INSANE_MAX)\",",
      "863:                               sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer),",
      "864:                               total_length,",
      "865:                               BT_SHB_INSANE_MAX);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5a36d9e82dde7265e38fe1f87b7f11c461c29f6",
      "candidate_info": {
        "commit_hash": "a5a36d9e82dde7265e38fe1f87b7f11c461c29f6",
        "repo": "the-tcpdump-group/libpcap",
        "commit_url": "https://github.com/the-tcpdump-group/libpcap/commit/a5a36d9e82dde7265e38fe1f87b7f11c461c29f6",
        "files": [
          "sf-pcapng.c"
        ],
        "message": "Fix some format warnings.",
        "before_after_code_files": [
          "sf-pcapng.c||sf-pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sf-pcapng.c||sf-pcapng.c"
          ],
          "candidate": [
            "sf-pcapng.c||sf-pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "sf-pcapng.c||sf-pcapng.c": [
          "File: sf-pcapng.c -> sf-pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "859:  if (total_length < sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer) ||",
          "860:             (total_length > BT_SHB_INSANE_MAX)) {",
          "861:   pcap_snprintf(errbuf, PCAP_ERRBUF_SIZE,",
          "868:   return (NULL);",
          "",
          "[Removed Lines]",
          "862:       \"Section Header Block in pcapng dump file has invalid length %\" PRIsize \" < _%lu_ < %lu (BT_SHB_INSANE_MAX)\",",
          "863:                               sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer),",
          "864:                               total_length,",
          "865:                               BT_SHB_INSANE_MAX);",
          "",
          "[Added Lines]",
          "862:       \"Section Header Block in pcapng dump file has invalid length %\" PRIsize \" < _%u_ < %u (BT_SHB_INSANE_MAX)\",",
          "863:       sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer),",
          "864:       total_length,",
          "865:       BT_SHB_INSANE_MAX);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03ee24f06978af44ead65e5288ef4924a1542112",
      "candidate_info": {
        "commit_hash": "03ee24f06978af44ead65e5288ef4924a1542112",
        "repo": "the-tcpdump-group/libpcap",
        "commit_url": "https://github.com/the-tcpdump-group/libpcap/commit/03ee24f06978af44ead65e5288ef4924a1542112",
        "files": [
          "sf-pcapng.c"
        ],
        "message": "do sanity checks on PHB header length before allocating memory. There was no fault; but doing the check results in a more consistent error",
        "before_after_code_files": [
          "sf-pcapng.c||sf-pcapng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "sf-pcapng.c||sf-pcapng.c"
          ],
          "candidate": [
            "sf-pcapng.c||sf-pcapng.c"
          ]
        }
      },
      "candidate_diff": {
        "sf-pcapng.c||sf-pcapng.c": [
          "File: sf-pcapng.c -> sf-pcapng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:    if (amt_read == 0 && !fail_on_eof)",
          "268:    snprintf(errbuf, PCAP_ERRBUF_SIZE,",
          "270:        bytes_to_read, amt_read);",
          "271:   }",
          "272:   return (-1);",
          "",
          "[Removed Lines]",
          "269:        \"truncated dump file; tried to read %zu bytes, only got %zu\",",
          "",
          "[Added Lines]",
          "269:        \"truncated pcapng dump file; tried to read %zu bytes, only got %zu\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:   snprintf(errbuf, PCAP_ERRBUF_SIZE,",
          "876:   return (NULL);",
          "877:  }",
          "",
          "[Removed Lines]",
          "859:  if (total_length < sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer)) {",
          "861:       \"Section Header Block in pcapng dump file has a length of %u < %zu\",",
          "862:       total_length,",
          "863:       sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer));",
          "865:   return (NULL);",
          "866:  }",
          "871:  if (total_length > INITIAL_MAX_BLOCKSIZE) {",
          "872:   snprintf(errbuf, PCAP_ERRBUF_SIZE,",
          "873:       \"pcapng block size %u > maximum %u\",",
          "874:       total_length, INITIAL_MAX_BLOCKSIZE);",
          "",
          "[Added Lines]",
          "859:  if (total_length < sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer) ||",
          "860:             (total_length > BT_SHB_INSANE_MAX)) {",
          "862:       \"Section Header Block in pcapng dump file has invalid length %zu < _%lu_ < %lu (BT_SHB_INSANE_MAX)\",",
          "863:                               sizeof(*bhdrp) + sizeof(*shbp) + sizeof(struct block_trailer),",
          "864:                               total_length,",
          "865:                               BT_SHB_INSANE_MAX);",
          "",
          "---------------"
        ]
      }
    }
  ]
}