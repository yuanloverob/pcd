{
  "cve_id": "CVE-2020-11085",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bounds read in cliprdr_read_format_list. Clipboard format data read (by client or server) might read data out-of-bounds. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
  "patch_info": {
    "commit_hash": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "files": [
      "channels/cliprdr/cliprdr_common.c"
    ],
    "message": "Fixed oob read in cliprdr_read_format_list",
    "before_after_code_files": [
      "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
    ]
  },
  "patch_diff": {
    "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
      "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  int formatNameLength;",
      "401:  char* szFormatName;",
      "402:  WCHAR* wszFormatName;",
      "404:  CLIPRDR_FORMAT* formats = NULL;",
      "405:  UINT error = CHANNEL_RC_OK;",
      "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
      "409:  index = 0;",
      "410:  formatList->numFormats = 0;",
      "413:  if (!formatList->dataLen)",
      "414:  {",
      "418:  }",
      "419:  else if (!useLongFormatNames)",
      "420:  {",
      "424:   {",
      "426:    return ERROR_INTERNAL_ERROR;",
      "427:   }",
      "",
      "[Removed Lines]",
      "403:  UINT32 dataLen = formatList->dataLen;",
      "411:  position = Stream_GetPosition(s);",
      "416:   formatList->formats = NULL;",
      "417:   formatList->numFormats = 0;",
      "421:   formatList->numFormats = (dataLen / 36);",
      "423:   if ((formatList->numFormats * 36) != dataLen)",
      "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
      "",
      "[Added Lines]",
      "403:  wStream sub1, sub2;",
      "411:  formatList->formats = NULL;",
      "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
      "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
      "416:   return ERROR_INVALID_DATA;",
      "423:   const size_t cap = Stream_Capacity(&sub1);",
      "424:   formatList->numFormats = (cap / 36);",
      "426:   if ((formatList->numFormats * 36) != cap)",
      "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "438:   formatList->formats = formats;",
      "441:   {",
      "445:    formats[index].formatName = NULL;",
      "",
      "[Removed Lines]",
      "440:   while (dataLen)",
      "443:    dataLen -= 4;",
      "",
      "[Added Lines]",
      "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "455:    if (asciiNames)",
      "456:    {",
      "459:     if (szFormatName[0])",
      "460:     {",
      "",
      "[Removed Lines]",
      "457:     szFormatName = (char*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
      "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "459:    if (!Stream_SafeSeek(&sub1, 32))",
      "460:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "472:    }",
      "473:    else",
      "474:    {",
      "477:     if (wszFormatName[0])",
      "478:     {",
      "",
      "[Removed Lines]",
      "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "489:     }",
      "490:    }",
      "494:    index++;",
      "495:   }",
      "496:  }",
      "497:  else",
      "498:  {",
      "500:   {",
      "514:    formatList->numFormats++;",
      "515:   }",
      "520:   if (formatList->numFormats)",
      "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
      "",
      "[Removed Lines]",
      "492:    Stream_Seek(s, 32);",
      "493:    dataLen -= 32;",
      "499:   while (dataLen)",
      "502:    dataLen -= 4;",
      "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "506:    if (!wszFormatName[0])",
      "507:     formatNameLength = 0;",
      "508:    else",
      "509:     formatNameLength = _wcslen(wszFormatName);",
      "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "512:    dataLen -= ((formatNameLength + 1) * 2);",
      "517:   dataLen = formatList->dataLen;",
      "518:   Stream_SetPosition(s, position);",
      "",
      "[Added Lines]",
      "499:   sub2 = sub1;",
      "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
      "502:    size_t rest;",
      "504:     goto error_out;",
      "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
      "507:    rest = Stream_GetRemainingLength(&sub1);",
      "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
      "511:     goto error_out;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "529:   formatList->formats = formats;",
      "532:   {",
      "536:    formats[index].formatName = NULL;",
      "545:    if (formatNameLength)",
      "546:    {",
      "549:     {",
      "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
      "551:      error = ERROR_INTERNAL_ERROR;",
      "",
      "[Removed Lines]",
      "531:   while (dataLen)",
      "534:    dataLen -= 4;",
      "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
      "540:    if (!wszFormatName[0])",
      "541:     formatNameLength = 0;",
      "542:    else",
      "543:     formatNameLength = _wcslen(wszFormatName);",
      "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
      "548:                            0, NULL, NULL) < 1)",
      "",
      "[Added Lines]",
      "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
      "528:    size_t rest;",
      "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
      "534:    rest = Stream_GetRemainingLength(&sub2);",
      "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
      "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
      "537:     goto error_out;",
      "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
      "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "553:     }",
      "554:    }",
      "559:    index++;",
      "560:   }",
      "561:  }",
      "",
      "[Removed Lines]",
      "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
      "557:    dataLen -= ((formatNameLength + 1) * 2);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "582:   }",
      "584:   free(formatList->formats);",
      "585:  }",
      "586: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "576:   formatList->formats = NULL;",
      "577:   formatList->numFormats = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "efb929644e16366931a5f2529af44b49bf31c23e",
      "candidate_info": {
        "commit_hash": "efb929644e16366931a5f2529af44b49bf31c23e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/efb929644e16366931a5f2529af44b49bf31c23e",
        "files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c"
        ],
        "message": "Added hotplug to /usb:id,dev option\n\nDevices specified with the /usb:id,dev command line option are now\ndetected by the hotplug callback.",
        "before_after_code_files": [
          "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/urbdrc/client/libusb/libusb_udevman.c||channels/urbdrc/client/libuslibusb_udevman.c": [
          "File: channels/urbdrc/client/libusb/libusb_udevman.c -> channels/urbdrc/client/libuslibusb_udevman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  _man->iface.get_##_arg = udevman_get_##_arg; \\",
          "56:  _man->iface.set_##_arg = udevman_set_##_arg",
          "58: typedef struct _UDEVMAN UDEVMAN;",
          "60: struct _UDEVMAN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:  LPSTR cmdline_devices;",
          "69:  UINT16 flags;",
          "70:  UINT32 device_num;",
          "71:  UINT32 next_device_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:                             libusb_hotplug_event event, void* user_data)",
          "534: {",
          "535:  struct libusb_device_descriptor desc;",
          "537:  const uint8_t bus = libusb_get_bus_number(dev);",
          "538:  const uint8_t addr = libusb_get_device_address(dev);",
          "539:  int rc = libusb_get_device_descriptor(dev, &desc);",
          "",
          "[Removed Lines]",
          "536:  IUDEVMAN* idevman = (IUDEVMAN*)user_data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "543:  if (rc != LIBUSB_SUCCESS)",
          "544:   return rc;",
          "549:  switch (event)",
          "550:  {",
          "551:   case LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED:",
          "554:    break;",
          "556:   case LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT:",
          "558:    break;",
          "560:   default:",
          "",
          "[Removed Lines]",
          "546:  if (device_is_filtered(dev, &desc, event))",
          "547:   return 0;",
          "552:    if (idevman->isAutoAdd(idevman))",
          "553:     add_device(idevman, DEVICE_ADD_FLAG_ALL, bus, addr, desc.idVendor, desc.idProduct);",
          "557:    del_device(idevman, DEVICE_ADD_FLAG_ALL, bus, addr, desc.idVendor, desc.idProduct);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "624:    add_device(&udevman->iface, DEVICE_ADD_FLAG_VENDOR | DEVICE_ADD_FLAG_PRODUCT, 0, 0, id1,",
          "625:               id2);",
          "626:   }",
          "627:   else if (udevman->flags & UDEVMAN_FLAG_ADD_BY_ADDR)",
          "628:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63c76ae02d182d86dc95378c28c200cbabc43fc6",
      "candidate_info": {
        "commit_hash": "63c76ae02d182d86dc95378c28c200cbabc43fc6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/63c76ae02d182d86dc95378c28c200cbabc43fc6",
        "files": [
          "winpr/libwinpr/utils/ntlm.c"
        ],
        "message": "use WINPR_MD5_DIGEST_LENGTH in stead of magic number for hash array",
        "before_after_code_files": [
          "winpr/libwinpr/utils/ntlm.c||winpr/libwinpr/utils/ntlm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/ntlm.c||winpr/libwinpr/utils/ntlm.c": [
          "File: winpr/libwinpr/utils/ntlm.c -> winpr/libwinpr/utils/ntlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: BOOL NTOWFv2W(LPWSTR Password, UINT32 PasswordLength, LPWSTR User, UINT32 UserLength, LPWSTR Domain,",
          "77:               UINT32 DomainLength, BYTE* NtHash)",
          "78: {",
          "81:  if ((!User) || (!Password) || (!NtHash))",
          "82:   return FALSE;",
          "",
          "[Removed Lines]",
          "79:  BYTE NtHashV1[16];",
          "",
          "[Added Lines]",
          "79:  BYTE NtHashV1[WINPR_MD5_DIGEST_LENGTH];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d3d953264bf33041ab6bb4aa8aca2ef06f12508",
      "candidate_info": {
        "commit_hash": "8d3d953264bf33041ab6bb4aa8aca2ef06f12508",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8d3d953264bf33041ab6bb4aa8aca2ef06f12508",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_read",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  UINT64 Offset;",
          "150:  ssize_t status;",
          "151:  BYTE* buffer = NULL;",
          "152:  Stream_Read_UINT32(irp->input, Length);",
          "153:  Stream_Read_UINT64(irp->input, Offset);",
          "154:  buffer = (BYTE*)malloc(Length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  if (Stream_GetRemainingLength(irp->input) < 12)",
          "153:   return ERROR_INVALID_DATA;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a74d5b630c962ba89630f65c3d2f2a498581d061",
      "candidate_info": {
        "commit_hash": "a74d5b630c962ba89630f65c3d2f2a498581d061",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a74d5b630c962ba89630f65c3d2f2a498581d061",
        "files": [
          "uwac/libuwac/uwac-priv.h",
          "uwac/libuwac/uwac-window.c"
        ],
        "message": "libuwac/window: Fix memory leak / SIGBUS\n\n`UwacWindowShmAllocBuffers()` allocates memory with `mmap` and never frees it\nresulting in SIGBUS errors and running out of memory after some time.\n\nAdding a corresponding `munmap` fixes this issue.",
        "before_after_code_files": [
          "uwac/libuwac/uwac-priv.h||uwac/libuwac/uwac-priv.h",
          "uwac/libuwac/uwac-window.c||uwac/libuwac/uwac-window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "uwac/libuwac/uwac-priv.h||uwac/libuwac/uwac-priv.h": [
          "File: uwac/libuwac/uwac-priv.h -> uwac/libuwac/uwac-priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: #endif",
          "219:  struct wl_buffer* wayland_buffer;",
          "220:  void* data;",
          "221: };",
          "222: typedef struct uwac_buffer UwacBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:  size_t size;",
          "",
          "---------------"
        ],
        "uwac/libuwac/uwac-window.c||uwac/libuwac/uwac-window.c": [
          "File: uwac/libuwac/uwac-window.c -> uwac/libuwac/uwac-window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   region16_uninit(&buffer->damage);",
          "66: #endif",
          "67:   wl_buffer_destroy(buffer->wayland_buffer);",
          "68:  }",
          "70:  w->nbuffers = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   munmap(buffer->data, buffer->size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:  int i, fd;",
          "307:  void* data;",
          "308:  struct wl_shm_pool* pool;",
          "309:  newBuffers = xrealloc(w->buffers, (w->nbuffers + nbuffers) * sizeof(UwacBuffer));",
          "311:  if (!newBuffers)",
          "312:   return UWAC_ERROR_NOMEMORY;",
          "314:  w->buffers = newBuffers;",
          "315:  memset(w->buffers + w->nbuffers, 0, sizeof(UwacBuffer) * nbuffers);",
          "316:  fd = uwac_create_anonymous_file(allocSize * nbuffers);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:  size_t pagesize = sysconf(_SC_PAGESIZE);",
          "317:  allocSize = (allocSize + pagesize - 1) & ~(pagesize - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:   region16_init(&buffer->damage);",
          "347: #endif",
          "348:   buffer->data = data + (allocSize * i);",
          "349:   buffer->wayland_buffer =",
          "350:       wl_shm_pool_create_buffer(pool, allocSize * i, width, height, w->stride, format);",
          "351:   wl_buffer_add_listener(buffer->wayland_buffer, &buffer_listener, buffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:   buffer->size = allocSize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e4a835c29492aee202ac59609f9d14d77b34d0c",
      "candidate_info": {
        "commit_hash": "3e4a835c29492aee202ac59609f9d14d77b34d0c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3e4a835c29492aee202ac59609f9d14d77b34d0c",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed wrong error return from drdynvc_write_data\n\nWhen the channel was closed a wrong error code was returned.\n\n(cherry picked from commit 6446d609fc95830d7c9c1e6a91829146d567e277)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}