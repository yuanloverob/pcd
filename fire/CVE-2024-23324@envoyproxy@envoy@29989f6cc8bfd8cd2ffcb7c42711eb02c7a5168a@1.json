{
  "cve_id": "CVE-2024-23324",
  "cve_desc": "Envoy is a high-performance edge/middle/service proxy. External authentication can be bypassed by downstream connections. Downstream clients can force invalid gRPC requests to be sent to ext_authz, circumventing ext_authz checks when failure_mode_allow is set to true. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
  "repo": "envoyproxy/envoy",
  "patch_hash": "29989f6cc8bfd8cd2ffcb7c42711eb02c7a5168a",
  "patch_info": {
    "commit_hash": "29989f6cc8bfd8cd2ffcb7c42711eb02c7a5168a",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/29989f6cc8bfd8cd2ffcb7c42711eb02c7a5168a",
    "files": [
      "changelogs/current.yaml",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
    ],
    "message": "Proxy protocol: sanitise non utf8 chars in TLVs\n\nFix [CVE-2024-23324](https://github.com/envoyproxy/envoy/security/advisories/GHSA-gq3v-vvhj-96j6)\n\nSigned-off-by: Kateryna Nezdolii <nezdolik@spotify.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
    "before_after_code_files": [
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
    ]
  },
  "patch_diff": {
    "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
      "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include \"source/common/network/address_impl.h\"",
      "25: #include \"source/common/network/proxy_protocol_filter_state.h\"",
      "26: #include \"source/common/network/utility.h\"",
      "27: #include \"source/extensions/common/proxy_protocol/proxy_protocol_header.h\"",
      "29: using envoy::config::core::v3::ProxyProtocolPassThroughTLVs;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #include \"source/common/protobuf/utility.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "440:     auto key_value_pair = config_->isTlvTypeNeeded(tlv_type);",
      "441:     if (nullptr != key_value_pair) {",
      "442:       ProtobufWkt::Value metadata_value;",
      "445:       std::string metadata_key = key_value_pair->metadata_namespace().empty()",
      "446:                                      ? \"envoy.filters.listener.proxy_protocol\"",
      "",
      "[Removed Lines]",
      "443:       metadata_value.set_string_value(tlv_value.data(), tlv_value.size());",
      "",
      "[Added Lines]",
      "445:       auto sanitised_tlv_value = MessageUtil::sanitizeUtf8String(tlv_value);",
      "446:       metadata_value.set_string_value(sanitised_tlv_value.data(), sanitised_tlv_value.size());",
      "",
      "---------------"
    ],
    "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
      "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1603:   disconnect();",
      "1604: }",
      "1606: TEST_P(ProxyProtocolTest, V2WillNotOverwriteTLV) {",
      "1608:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1606: TEST_P(ProxyProtocolTest, V2ExtractMultipleTlvsOfInterestAndSanitiseNonUtf8) {",
      "1608:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "1609:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x39, 0x01, 0x02, 0x03, 0x04,",
      "1610:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02};",
      "1612:   constexpr uint8_t tlv1[] = {0x00, 0x00, 0x01, 0xff};",
      "1615:   constexpr uint8_t tlv_type_authority[] = {0x02, 0x00, 0x07, 0x66, 0xfe,",
      "1616:                                             0x6f, 0x2e, 0x63, 0x6f, 0xc1};",
      "1618:   constexpr uint8_t tlv3[] = {0x0f, 0x00, 0x03, 0xf0, 0x00, 0x0f};",
      "1621:   constexpr uint8_t tlv_vpc_id[] = {0xea, 0x00, 0x16, 0x01, 0x76, 0x70, 0x63, 0x2d, 0x30,",
      "1622:                                     0xc0, 0x35, 0x74, 0x65, 0x73, 0x74, 0x32, 0x66, 0x61,",
      "1623:                                     0x36, 0x63, 0x36, 0x33, 0x68, 0xf9, 0x37};",
      "1624:   constexpr uint8_t data[] = {'D', 'A', 'T', 'A'};",
      "1626:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
      "1627:   auto rule_type_authority = proto_config.add_rules();",
      "1628:   rule_type_authority->set_tlv_type(0x02);",
      "1629:   rule_type_authority->mutable_on_tlv_present()->set_key(\"PP2 type authority\");",
      "1631:   auto rule_vpc_id = proto_config.add_rules();",
      "1632:   rule_vpc_id->set_tlv_type(0xea);",
      "1633:   rule_vpc_id->mutable_on_tlv_present()->set_key(\"PP2 vpc id\");",
      "1635:   connect(true, &proto_config);",
      "1636:   write(buffer, sizeof(buffer));",
      "1637:   dispatcher_->run(Event::Dispatcher::RunType::NonBlock);",
      "1639:   write(tlv1, sizeof(tlv1));",
      "1640:   write(tlv_type_authority, sizeof(tlv_type_authority));",
      "1641:   write(tlv3, sizeof(tlv3));",
      "1642:   write(tlv_vpc_id, sizeof(tlv_vpc_id));",
      "1643:   write(data, sizeof(data));",
      "1644:   expectData(\"DATA\");",
      "1646:   EXPECT_EQ(1, server_connection_->streamInfo().dynamicMetadata().filter_metadata_size());",
      "1648:   auto metadata = server_connection_->streamInfo().dynamicMetadata().filter_metadata();",
      "1649:   EXPECT_EQ(1, metadata.size());",
      "1650:   EXPECT_EQ(1, metadata.count(ProxyProtocol));",
      "1652:   auto fields = metadata.at(ProxyProtocol).fields();",
      "1653:   EXPECT_EQ(2, fields.size());",
      "1654:   EXPECT_EQ(1, fields.count(\"PP2 type authority\"));",
      "1655:   EXPECT_EQ(1, fields.count(\"PP2 vpc id\"));",
      "1657:   const char replacement = 0x21;",
      "1658:   auto value_type_authority = fields.at(\"PP2 type authority\").string_value();",
      "1660:   ASSERT_THAT(value_type_authority,",
      "1661:               ElementsAre(0x66, replacement, 0x6f, 0x2e, 0x63, 0x6f, replacement));",
      "1663:   auto value_vpc_id = fields.at(\"PP2 vpc id\").string_value();",
      "1664:   ASSERT_THAT(value_vpc_id,",
      "1665:               ElementsAre(0x01, 0x76, 0x70, 0x63, 0x2d, 0x30, replacement, 0x35, 0x74, 0x65, 0x73,",
      "1666:                           0x74, 0x32, 0x66, 0x61, 0x36, 0x63, 0x36, 0x33, 0x68, replacement, 0x37));",
      "1667:   disconnect();",
      "1668: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4795bf3e8e65e53561400f255f9fc783b4d27d14",
      "candidate_info": {
        "commit_hash": "4795bf3e8e65e53561400f255f9fc783b4d27d14",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/4795bf3e8e65e53561400f255f9fc783b4d27d14",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ],
        "message": "Proxy protocol: sanitise non utf8 chars in TLVs\n\nFix [CVE-2024-23324](https://github.com/envoyproxy/envoy/security/advisories/GHSA-gq3v-vvhj-96j6)\n\nSigned-off-by: Kateryna Nezdolii <nezdolik@spotify.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"source/common/network/address_impl.h\"",
          "25: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "26: #include \"source/common/network/utility.h\"",
          "27: #include \"source/extensions/common/proxy_protocol/proxy_protocol_header.h\"",
          "29: using envoy::config::core::v3::ProxyProtocolPassThroughTLVs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"source/common/protobuf/utility.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:     auto key_value_pair = config_->isTlvTypeNeeded(tlv_type);",
          "441:     if (nullptr != key_value_pair) {",
          "442:       ProtobufWkt::Value metadata_value;",
          "445:       std::string metadata_key = key_value_pair->metadata_namespace().empty()",
          "446:                                      ? \"envoy.filters.listener.proxy_protocol\"",
          "",
          "[Removed Lines]",
          "443:       metadata_value.set_string_value(tlv_value.data(), tlv_value.size());",
          "",
          "[Added Lines]",
          "445:       auto sanitised_tlv_value = MessageUtil::sanitizeUtf8String(tlv_value);",
          "446:       metadata_value.set_string_value(sanitised_tlv_value.data(), sanitised_tlv_value.size());",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1583:   disconnect();",
          "1584: }",
          "1586: TEST_P(ProxyProtocolTest, V2WillNotOverwriteTLV) {",
          "1588:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1586: TEST_P(ProxyProtocolTest, V2ExtractMultipleTlvsOfInterestAndSanitiseNonUtf8) {",
          "1588:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "1589:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x39, 0x01, 0x02, 0x03, 0x04,",
          "1590:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02};",
          "1592:   constexpr uint8_t tlv1[] = {0x00, 0x00, 0x01, 0xff};",
          "1595:   constexpr uint8_t tlv_type_authority[] = {0x02, 0x00, 0x07, 0x66, 0xfe,",
          "1596:                                             0x6f, 0x2e, 0x63, 0x6f, 0xc1};",
          "1598:   constexpr uint8_t tlv3[] = {0x0f, 0x00, 0x03, 0xf0, 0x00, 0x0f};",
          "1601:   constexpr uint8_t tlv_vpc_id[] = {0xea, 0x00, 0x16, 0x01, 0x76, 0x70, 0x63, 0x2d, 0x30,",
          "1602:                                     0xc0, 0x35, 0x74, 0x65, 0x73, 0x74, 0x32, 0x66, 0x61,",
          "1603:                                     0x36, 0x63, 0x36, 0x33, 0x68, 0xf9, 0x37};",
          "1604:   constexpr uint8_t data[] = {'D', 'A', 'T', 'A'};",
          "1606:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "1607:   auto rule_type_authority = proto_config.add_rules();",
          "1608:   rule_type_authority->set_tlv_type(0x02);",
          "1609:   rule_type_authority->mutable_on_tlv_present()->set_key(\"PP2 type authority\");",
          "1611:   auto rule_vpc_id = proto_config.add_rules();",
          "1612:   rule_vpc_id->set_tlv_type(0xea);",
          "1613:   rule_vpc_id->mutable_on_tlv_present()->set_key(\"PP2 vpc id\");",
          "1615:   connect(true, &proto_config);",
          "1616:   write(buffer, sizeof(buffer));",
          "1617:   dispatcher_->run(Event::Dispatcher::RunType::NonBlock);",
          "1619:   write(tlv1, sizeof(tlv1));",
          "1620:   write(tlv_type_authority, sizeof(tlv_type_authority));",
          "1621:   write(tlv3, sizeof(tlv3));",
          "1622:   write(tlv_vpc_id, sizeof(tlv_vpc_id));",
          "1623:   write(data, sizeof(data));",
          "1624:   expectData(\"DATA\");",
          "1626:   EXPECT_EQ(1, server_connection_->streamInfo().dynamicMetadata().filter_metadata_size());",
          "1628:   auto metadata = server_connection_->streamInfo().dynamicMetadata().filter_metadata();",
          "1629:   EXPECT_EQ(1, metadata.size());",
          "1630:   EXPECT_EQ(1, metadata.count(ProxyProtocol));",
          "1632:   auto fields = metadata.at(ProxyProtocol).fields();",
          "1633:   EXPECT_EQ(2, fields.size());",
          "1634:   EXPECT_EQ(1, fields.count(\"PP2 type authority\"));",
          "1635:   EXPECT_EQ(1, fields.count(\"PP2 vpc id\"));",
          "1637:   const char replacement = 0x21;",
          "1638:   auto value_type_authority = fields.at(\"PP2 type authority\").string_value();",
          "1640:   ASSERT_THAT(value_type_authority,",
          "1641:               ElementsAre(0x66, replacement, 0x6f, 0x2e, 0x63, 0x6f, replacement));",
          "1643:   auto value_vpc_id = fields.at(\"PP2 vpc id\").string_value();",
          "1644:   ASSERT_THAT(value_vpc_id,",
          "1645:               ElementsAre(0x01, 0x76, 0x70, 0x63, 0x2d, 0x30, replacement, 0x35, 0x74, 0x65, 0x73,",
          "1646:                           0x74, 0x32, 0x66, 0x61, 0x36, 0x63, 0x36, 0x33, 0x68, replacement, 0x37));",
          "1647:   disconnect();",
          "1648: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4a1a381c67f6c47ff3ed9238215bcc56b07b750",
      "candidate_info": {
        "commit_hash": "e4a1a381c67f6c47ff3ed9238215bcc56b07b750",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/e4a1a381c67f6c47ff3ed9238215bcc56b07b750",
        "files": [
          "changelogs/current.yaml",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ],
        "message": "[proxy_proto] Sanitise non utf8 chars in TLVs\n\nFix [CVE-2024-23324](https://github.com/envoyproxy/envoy/security/advisories/GHSA-gq3v-vvhj-96j6)\n\nSigned-off-by: Kateryna Nezdolii <nezdolik@spotify.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"source/common/network/address_impl.h\"",
          "25: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "26: #include \"source/common/network/utility.h\"",
          "27: #include \"source/extensions/common/proxy_protocol/proxy_protocol_header.h\"",
          "29: using envoy::config::core::v3::ProxyProtocolPassThroughTLVs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"source/common/protobuf/utility.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:     auto key_value_pair = config_->isTlvTypeNeeded(tlv_type);",
          "441:     if (nullptr != key_value_pair) {",
          "442:       ProtobufWkt::Value metadata_value;",
          "445:       std::string metadata_key = key_value_pair->metadata_namespace().empty()",
          "446:                                      ? \"envoy.filters.listener.proxy_protocol\"",
          "",
          "[Removed Lines]",
          "443:       metadata_value.set_string_value(tlv_value.data(), tlv_value.size());",
          "",
          "[Added Lines]",
          "445:       auto sanitised_tlv_value = MessageUtil::sanitizeUtf8String(tlv_value);",
          "446:       metadata_value.set_string_value(sanitised_tlv_value.data(), sanitised_tlv_value.size());",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1600:   disconnect();",
          "1601: }",
          "1603: TEST_P(ProxyProtocolTest, V2WillNotOverwriteTLV) {",
          "1605:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1603: TEST_P(ProxyProtocolTest, V2ExtractMultipleTlvsOfInterestAndSanitiseNonUtf8) {",
          "1605:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "1606:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x39, 0x01, 0x02, 0x03, 0x04,",
          "1607:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02};",
          "1609:   constexpr uint8_t tlv1[] = {0x00, 0x00, 0x01, 0xff};",
          "1612:   constexpr uint8_t tlv_type_authority[] = {0x02, 0x00, 0x07, 0x66, 0xfe,",
          "1613:                                             0x6f, 0x2e, 0x63, 0x6f, 0xc1};",
          "1615:   constexpr uint8_t tlv3[] = {0x0f, 0x00, 0x03, 0xf0, 0x00, 0x0f};",
          "1618:   constexpr uint8_t tlv_vpc_id[] = {0xea, 0x00, 0x16, 0x01, 0x76, 0x70, 0x63, 0x2d, 0x30,",
          "1619:                                     0xc0, 0x35, 0x74, 0x65, 0x73, 0x74, 0x32, 0x66, 0x61,",
          "1620:                                     0x36, 0x63, 0x36, 0x33, 0x68, 0xf9, 0x37};",
          "1621:   constexpr uint8_t data[] = {'D', 'A', 'T', 'A'};",
          "1623:   envoy::extensions::filters::listener::proxy_protocol::v3::ProxyProtocol proto_config;",
          "1624:   auto rule_type_authority = proto_config.add_rules();",
          "1625:   rule_type_authority->set_tlv_type(0x02);",
          "1626:   rule_type_authority->mutable_on_tlv_present()->set_key(\"PP2 type authority\");",
          "1628:   auto rule_vpc_id = proto_config.add_rules();",
          "1629:   rule_vpc_id->set_tlv_type(0xea);",
          "1630:   rule_vpc_id->mutable_on_tlv_present()->set_key(\"PP2 vpc id\");",
          "1632:   connect(true, &proto_config);",
          "1633:   write(buffer, sizeof(buffer));",
          "1634:   dispatcher_->run(Event::Dispatcher::RunType::NonBlock);",
          "1636:   write(tlv1, sizeof(tlv1));",
          "1637:   write(tlv_type_authority, sizeof(tlv_type_authority));",
          "1638:   write(tlv3, sizeof(tlv3));",
          "1639:   write(tlv_vpc_id, sizeof(tlv_vpc_id));",
          "1640:   write(data, sizeof(data));",
          "1641:   expectData(\"DATA\");",
          "1643:   EXPECT_EQ(1, server_connection_->streamInfo().dynamicMetadata().filter_metadata_size());",
          "1645:   auto metadata = server_connection_->streamInfo().dynamicMetadata().filter_metadata();",
          "1646:   EXPECT_EQ(1, metadata.size());",
          "1647:   EXPECT_EQ(1, metadata.count(ProxyProtocol));",
          "1649:   auto fields = metadata.at(ProxyProtocol).fields();",
          "1650:   EXPECT_EQ(2, fields.size());",
          "1651:   EXPECT_EQ(1, fields.count(\"PP2 type authority\"));",
          "1652:   EXPECT_EQ(1, fields.count(\"PP2 vpc id\"));",
          "1654:   const char replacement = 0x21;",
          "1655:   auto value_type_authority = fields.at(\"PP2 type authority\").string_value();",
          "1657:   ASSERT_THAT(value_type_authority,",
          "1658:               ElementsAre(0x66, replacement, 0x6f, 0x2e, 0x63, 0x6f, replacement));",
          "1660:   auto value_vpc_id = fields.at(\"PP2 vpc id\").string_value();",
          "1661:   ASSERT_THAT(value_vpc_id,",
          "1662:               ElementsAre(0x01, 0x76, 0x70, 0x63, 0x2d, 0x30, replacement, 0x35, 0x74, 0x65, 0x73,",
          "1663:                           0x74, 0x32, 0x66, 0x61, 0x36, 0x63, 0x36, 0x33, 0x68, replacement, 0x37));",
          "1664:   disconnect();",
          "1665: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}