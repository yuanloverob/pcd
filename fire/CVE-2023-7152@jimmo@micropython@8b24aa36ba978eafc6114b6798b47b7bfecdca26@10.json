{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0640ff3b97f608a9f55ac380c6681cc48cc1e737",
      "candidate_info": {
        "commit_hash": "0640ff3b97f608a9f55ac380c6681cc48cc1e737",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/0640ff3b97f608a9f55ac380c6681cc48cc1e737",
        "files": [
          "ports/rp2/mpconfigport.h",
          "ports/rp2/mphalport.h",
          "ports/unix/mpconfigport.h",
          "ports/unix/mphalport.h",
          "ports/windows/mpconfigport.h",
          "ports/windows/windows_mphal.h"
        ],
        "message": "ports: Move MICROPY_INTERNAL_WFE definition to mphalport.h.\n\nIt belongs here because the default value is defined in py/mphal.h.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/rp2/mpconfigport.h||ports/rp2/mpconfigport.h",
          "ports/rp2/mphalport.h||ports/rp2/mphalport.h",
          "ports/unix/mpconfigport.h||ports/unix/mpconfigport.h",
          "ports/unix/mphalport.h||ports/unix/mphalport.h",
          "ports/windows/mpconfigport.h||ports/windows/mpconfigport.h",
          "ports/windows/windows_mphal.h||ports/windows/windows_mphal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/rp2/mpconfigport.h||ports/rp2/mpconfigport.h": [
          "File: ports/rp2/mpconfigport.h -> ports/rp2/mpconfigport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: #define MICROPY_HW_BOOTSEL_DELAY_US 8",
          "246: #endif",
          "261: #define MICROPY_MAKE_POINTER_CALLABLE(p) ((void *)((mp_uint_t)(p) | 1))",
          "263: #define MP_SSIZE_MAX (0x7fffffff)",
          "",
          "[Removed Lines]",
          "252: #define MICROPY_INTERNAL_WFE(TIMEOUT_MS) \\",
          "253:     do {                                 \\",
          "254:         if ((TIMEOUT_MS) < 0) { \\",
          "255:             __wfe(); \\",
          "256:         } else { \\",
          "257:             best_effort_wfe_or_timeout(make_timeout_time_ms(TIMEOUT_MS)); \\",
          "258:         } \\",
          "259:     } while (0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ports/rp2/mphalport.h||ports/rp2/mphalport.h": [
          "File: ports/rp2/mphalport.h -> ports/rp2/mphalport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #define MICROPY_PY_LWIP_REENTER lwip_lock_acquire();",
          "49: #define MICROPY_PY_LWIP_EXIT    lwip_lock_release();",
          "51: extern int mp_interrupt_char;",
          "52: extern ringbuf_t stdin_ringbuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: #define MICROPY_INTERNAL_WFE(TIMEOUT_MS) \\",
          "56:     do {                                 \\",
          "57:         if ((TIMEOUT_MS) < 0) { \\",
          "58:             __wfe(); \\",
          "59:         } else { \\",
          "60:             best_effort_wfe_or_timeout(make_timeout_time_ms(TIMEOUT_MS)); \\",
          "61:         } \\",
          "62:     } while (0)",
          "",
          "---------------"
        ],
        "ports/unix/mpconfigport.h||ports/unix/mpconfigport.h": [
          "File: ports/unix/mpconfigport.h -> ports/unix/mpconfigport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "221: #include <stdio.h>",
          "222: #endif",
          "231: #include <sched.h>",
          "232: #define MICROPY_UNIX_MACHINE_IDLE sched_yield();",
          "",
          "[Removed Lines]",
          "228: #define MICROPY_INTERNAL_WFE(TIMEOUT_MS) mp_hal_delay_us(500)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ports/unix/mphalport.h||ports/unix/mphalport.h": [
          "File: ports/unix/mphalport.h -> ports/unix/mphalport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define MICROPY_END_ATOMIC_SECTION(x) (void)x; mp_thread_unix_end_atomic_section()",
          "37: #endif",
          "39: void mp_hal_set_interrupt_char(char c);",
          "41: #define mp_hal_stdio_poll unused // this is not implemented, nor needed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #define MICROPY_INTERNAL_WFE(TIMEOUT_MS) mp_hal_delay_us(500)",
          "",
          "---------------"
        ],
        "ports/windows/mpconfigport.h||ports/windows/mpconfigport.h": [
          "File: ports/windows/mpconfigport.h -> ports/windows/mpconfigport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: #include \"realpath.h\"",
          "226: #include \"init.h\"",
          "237: #ifdef __GNUC__",
          "238: #define MP_NOINLINE __attribute__((noinline))",
          "",
          "[Removed Lines]",
          "227: #include \"sleep.h\"",
          "229: #if MICROPY_ENABLE_SCHEDULER",
          "232: #define MICROPY_INTERNAL_WFE(TIMEOUT_MS) msec_sleep(MAX(1.0, (double)(TIMEOUT_MS)))",
          "233: #else",
          "235: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ports/windows/windows_mphal.h||ports/windows/windows_mphal.h": [
          "File: ports/windows/windows_mphal.h -> ports/windows/windows_mphal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"sleep.h\"",
          "28: #include \"ports/unix/mphalport.h\"",
          "30: #define MICROPY_HAL_HAS_VT100 (0)",
          "32: void mp_hal_move_cursor_back(unsigned int pos);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #undef MICROPY_INTERNAL_WFE",
          "33: #if MICROPY_ENABLE_SCHEDULER",
          "36: #define MICROPY_INTERNAL_WFE(TIMEOUT_MS) msec_sleep(MAX(1.0, (double)(TIMEOUT_MS)))",
          "37: #else",
          "39: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26418c0ce6454daab35649477c880e3ee270df36",
      "candidate_info": {
        "commit_hash": "26418c0ce6454daab35649477c880e3ee270df36",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/26418c0ce6454daab35649477c880e3ee270df36",
        "files": [
          "ports/bare-arm/Makefile",
          "ports/minimal/Makefile",
          "ports/stm32/Makefile",
          "py/py.mk"
        ],
        "message": "py/py.mk: Remove support for CSUPEROPT.\n\nThis will be replaced with a function attribute approach, configured via\nmpconfig.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
        "before_after_code_files": [
          "py/py.mk||py/py.mk"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "py/py.mk||py/py.mk": [
          "File: py/py.mk -> py/py.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: QSTR_GLOBAL_DEPENDENCIES += $(PY_SRC)/mpconfig.h mpconfigport.h",
          "19: QSTR_GLOBAL_REQUIREMENTS += $(HEADER_BUILD)/mpversion.h",
          "24: # Enable building 32-bit code on 64-bit host.",
          "25: ifeq ($(MICROPY_FORCE_32BIT),1)",
          "26: CC += -m32",
          "",
          "[Removed Lines]",
          "21: # some code is performance bottleneck and compiled with other optimization options",
          "22: CSUPEROPT = -O3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254: # Force nlr code to always be compiled with space-saving optimisation so",
          "255: # that the function preludes are of a minimal and predictable form.",
          "256: $(PY_BUILD)/nlr%.o: CFLAGS += -Os",
          "",
          "[Removed Lines]",
          "258: # optimising gc for speed; 5ms down to 4ms on pybv2",
          "259: $(PY_BUILD)/gc.o: CFLAGS += $(CSUPEROPT)",
          "261: # optimising vm for speed, adds only a small amount to code size but makes a huge difference to speed (20% faster)",
          "262: $(PY_BUILD)/vm.o: CFLAGS += $(CSUPEROPT)",
          "263: # Optimizing vm.o for modern deeply pipelined CPUs with branch predictors",
          "264: # may require disabling tail jump optimization. This will make sure that",
          "265: # each opcode has its own dispatching jump which will improve branch",
          "266: # branch predictor efficiency.",
          "267: # https://marc.info/?l=lua-l&m=129778596120851",
          "268: # http://hg.python.org/cpython/file/b127046831e2/Python/ceval.c#l828",
          "269: # http://www.emulators.com/docs/nx25_nostradamus.htm",
          "270: #-fno-crossjumping",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1da45e887af1b5e6e608a13e292aa343f5b9f976",
      "candidate_info": {
        "commit_hash": "1da45e887af1b5e6e608a13e292aa343f5b9f976",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/1da45e887af1b5e6e608a13e292aa343f5b9f976",
        "files": [
          "ports/rp2/machine_spi.c",
          "ports/rp2/rp2_pio.c"
        ],
        "message": "rp2: Provide direct memory access to PIO and SPI FIFOs via proxy arrays.\n\nSigned-off-by: Nicko van Someren <nicko@nicko.org>",
        "before_after_code_files": [
          "ports/rp2/machine_spi.c||ports/rp2/machine_spi.c",
          "ports/rp2/rp2_pio.c||ports/rp2/rp2_pio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/rp2/machine_spi.c||ports/rp2/machine_spi.c": [
          "File: ports/rp2/machine_spi.c -> ports/rp2/machine_spi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     }",
          "303: }",
          "305: STATIC const mp_machine_spi_p_t machine_spi_p = {",
          "306:     .init = machine_spi_init,",
          "307:     .transfer = machine_spi_transfer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: STATIC mp_int_t machine_spi_get_buffer(mp_obj_t o_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {",
          "308:     machine_spi_obj_t *self = MP_OBJ_TO_PTR(o_in);",
          "310:     bufinfo->len = 4;",
          "311:     bufinfo->typecode = 'I';",
          "312:     bufinfo->buf = (void *)&spi_get_hw(self->spi_inst)->dr;",
          "314:     return 0;",
          "315: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:     make_new, machine_spi_make_new,",
          "315:     print, machine_spi_print,",
          "316:     protocol, &machine_spi_p,",
          "317:     locals_dict, &mp_machine_spi_locals_dict",
          "318:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:     buffer, machine_spi_get_buffer,",
          "",
          "---------------"
        ],
        "ports/rp2/rp2_pio.c||ports/rp2/rp2_pio.c": [
          "File: ports/rp2/rp2_pio.c -> ports/rp2/rp2_pio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: }",
          "810: STATIC MP_DEFINE_CONST_FUN_OBJ_1(rp2_state_machine_tx_fifo_obj, rp2_state_machine_tx_fifo);",
          "813: STATIC mp_obj_t rp2_state_machine_irq(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {",
          "814:     enum { ARG_handler, ARG_trigger, ARG_hard };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815: STATIC mp_int_t rp2_state_machine_get_buffer(mp_obj_t o_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {",
          "816:     rp2_state_machine_obj_t *self = MP_OBJ_TO_PTR(o_in);",
          "818:     bufinfo->len = 4;",
          "819:     bufinfo->typecode = 'I';",
          "821:     if (flags & MP_BUFFER_WRITE) {",
          "822:         bufinfo->buf = (void *)&self->pio->txf[self->sm];",
          "823:     } else {",
          "824:         bufinfo->buf = (void *)&self->pio->rxf[self->sm];",
          "825:     }",
          "826:     return 0;",
          "827: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "884:     MP_TYPE_FLAG_NONE,",
          "885:     make_new, rp2_state_machine_make_new,",
          "886:     print, rp2_state_machine_print,",
          "887:     locals_dict, &rp2_state_machine_locals_dict",
          "888:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:     buffer, rp2_state_machine_get_buffer,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd0f75069cf7488d5b26760c3c9a2f357df919f3",
      "candidate_info": {
        "commit_hash": "cd0f75069cf7488d5b26760c3c9a2f357df919f3",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/cd0f75069cf7488d5b26760c3c9a2f357df919f3",
        "files": [
          "ports/stm32/flash.c",
          "ports/stm32/flashbdev.c"
        ],
        "message": "stm32/flash: Remove commented-out flash functions.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/stm32/flash.c||ports/stm32/flash.c",
          "ports/stm32/flashbdev.c||ports/stm32/flashbdev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/stm32/flash.c||ports/stm32/flash.c": [
          "File: ports/stm32/flash.c -> ports/stm32/flash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:     return mp_hal_status_to_neg_errno(status);",
          "356: }",
          "387: int flash_write(uint32_t flash_dest, const uint32_t *src, uint32_t num_word32) {",
          "388:     #if MICROPY_HW_STM32WB_FLASH_SYNCRONISATION",
          "",
          "[Removed Lines]",
          "360: void flash_erase_it(uint32_t flash_dest, uint32_t num_word32) {",
          "362:     if (num_word32 == 0) {",
          "363:         return;",
          "364:     }",
          "367:     HAL_FLASH_Unlock();",
          "370:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |",
          "371:                            FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);",
          "374:     FLASH_EraseInitTypeDef EraseInitStruct;",
          "375:     EraseInitStruct.TypeErase = TYPEERASE_SECTORS;",
          "376:     EraseInitStruct.VoltageRange = VOLTAGE_RANGE_3; // voltage range needs to be 2.7V to 3.6V",
          "377:     EraseInitStruct.Sector = flash_get_sector_info(flash_dest, NULL, NULL);",
          "378:     EraseInitStruct.NbSectors = flash_get_sector_info(flash_dest + 4 * num_word32 - 1, NULL, NULL) - EraseInitStruct.Sector + 1;",
          "379:     if (HAL_FLASHEx_Erase_IT(&EraseInitStruct) != HAL_OK) {",
          "381:         HAL_FLASH_Lock(); // lock the flash",
          "382:         return;",
          "383:     }",
          "384: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:     return mp_hal_status_to_neg_errno(status);",
          "500: }",
          "",
          "[Removed Lines]",
          "503:  use erase, then write",
          "504: void flash_erase_and_write(uint32_t flash_dest, const uint32_t *src, uint32_t num_word32) {",
          "506:     if (num_word32 == 0) {",
          "507:         return;",
          "508:     }",
          "511:     HAL_FLASH_Unlock();",
          "514:     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |",
          "515:                            FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);",
          "518:     FLASH_EraseInitTypeDef EraseInitStruct;",
          "519:     EraseInitStruct.TypeErase = TYPEERASE_SECTORS;",
          "520:     EraseInitStruct.VoltageRange = VOLTAGE_RANGE_3; // voltage range needs to be 2.7V to 3.6V",
          "521:     EraseInitStruct.Sector = flash_get_sector_info(flash_dest, NULL, NULL);",
          "522:     EraseInitStruct.NbSectors = flash_get_sector_info(flash_dest + 4 * num_word32 - 1, NULL, NULL) - EraseInitStruct.Sector + 1;",
          "523:     uint32_t SectorError = 0;",
          "524:     if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {",
          "526:         HAL_FLASH_Lock(); // lock the flash",
          "527:         return;",
          "528:     }",
          "531:     for (int i = 0; i < num_word32; i++) {",
          "532:         if (HAL_FLASH_Program(TYPEPROGRAM_WORD, flash_dest, *src) != HAL_OK) {",
          "534:             HAL_FLASH_Lock(); // lock the flash",
          "535:             return;",
          "536:         }",
          "537:         flash_dest += 4;",
          "538:         src += 1;",
          "539:     }",
          "542:     HAL_FLASH_Lock();",
          "543: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ports/stm32/flashbdev.c||ports/stm32/flashbdev.c": [
          "File: ports/stm32/flashbdev.c -> ports/stm32/flashbdev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         return;",
          "160:     }",
          "182:     if (!(flash_flags & FLASH_FLAG_ERASED)) {",
          "183:         flash_erase(flash_cache_sector_start, flash_cache_sector_size / 4);",
          "",
          "[Removed Lines]",
          "164:     if (flash_erase_state == 0) {",
          "165:         flash_erase_it(flash_cache_sector_start, flash_cache_sector_size / 4);",
          "166:         flash_erase_state = 1;",
          "167:         return;",
          "168:     }",
          "170:     if (flash_erase_state == 1) {",
          "173:         #define flash_erase_done() (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) == RESET)",
          "174:         if (!flash_erase_done()) {",
          "175:             return;",
          "176:         }",
          "177:         flash_erase_state = 2;",
          "178:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a794d0d8ec61d37b871ee0efd14735fcfcd8b11",
      "candidate_info": {
        "commit_hash": "7a794d0d8ec61d37b871ee0efd14735fcfcd8b11",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/7a794d0d8ec61d37b871ee0efd14735fcfcd8b11",
        "files": [
          "tools/gen-changelog.sh"
        ],
        "message": "tools/gen-changelog.sh: Exclude \"-preview\" tags from generated log.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "tools/gen-changelog.sh||tools/gen-changelog.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/gen-changelog.sh||tools/gen-changelog.sh": [
          "File: tools/gen-changelog.sh -> tools/gen-changelog.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: echo \"MicroPython change log\"",
          "6:     echo ''",
          "7:     echo '========'",
          "8:     echo ''",
          "",
          "[Removed Lines]",
          "5: for t in $(git tag | grep -v v1.0-rc1 | sort -rV); do",
          "",
          "[Added Lines]",
          "5: for t in $(git tag | grep -v -- '-rc1\\|-preview' | sort -rV); do",
          "",
          "---------------"
        ]
      }
    }
  ]
}