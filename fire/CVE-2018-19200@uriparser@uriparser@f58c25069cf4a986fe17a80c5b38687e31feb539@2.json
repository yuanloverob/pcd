{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6405e907bbae98af2fd70bee7df333919cd281a5",
      "candidate_info": {
        "commit_hash": "6405e907bbae98af2fd70bee7df333919cd281a5",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/6405e907bbae98af2fd70bee7df333919cd281a5",
        "files": [
          "ChangeLog",
          "include/uriparser/UriBase.h",
          "src/UriMemory.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "UriMemory.c: Implement CompleteMemoryManager for convenience",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h",
          "src/UriMemory.c||src/UriMemory.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: int uriCompleteMemoryManager(UriMemoryManager * memory,",
          "287:   UriMemoryManager * backend);",
          "",
          "---------------"
        ],
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: int uriTestMemoryManager(UriMemoryManager * memory) {",
          "170:  const size_t mallocSize = 7;",
          "171:  const size_t callocNmemb = 3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: static void * uriDecorateMalloc(UriMemoryManager * memory,",
          "170:   size_t size) {",
          "171:  UriMemoryManager * backend;",
          "172:  const size_t extraBytes = sizeof(size_t);",
          "173:  void * buffer;",
          "175:  if (memory == NULL) {",
          "176:   errno = EINVAL;",
          "177:   return NULL;",
          "178:  }",
          "181:  if (size > ((size_t)-1) - extraBytes) {",
          "182:   errno = ENOMEM;",
          "183:   return NULL;",
          "184:  }",
          "186:  backend = (UriMemoryManager *)memory->userData;",
          "187:  if (backend == NULL) {",
          "188:   errno = EINVAL;",
          "189:   return NULL;",
          "190:  }",
          "192:  buffer = backend->malloc(backend, extraBytes + size);",
          "193:  if (buffer == NULL) {",
          "194:   return NULL;",
          "195:  }",
          "199:  return (char *)buffer + extraBytes;",
          "200: }",
          "204: static void * uriDecorateRealloc(UriMemoryManager * memory,",
          "205:   void * ptr, size_t size) {",
          "206:  void * newBuffer;",
          "207:  size_t prevSize;",
          "209:  if (memory == NULL) {",
          "210:   errno = EINVAL;",
          "211:   return NULL;",
          "212:  }",
          "216:  if (ptr == NULL) {",
          "217:   return memory->malloc(memory, size);",
          "218:  }",
          "222:  if (size == 0) {",
          "223:   memory->free(memory, ptr);",
          "224:   return NULL;",
          "225:  }",
          "227:  prevSize = *((size_t *)((char *)ptr - sizeof(size_t)));",
          "230:  if (size <= prevSize) {",
          "231:   return ptr;",
          "232:  }",
          "234:  newBuffer = memory->malloc(memory, size);",
          "235:  if (newBuffer == NULL) {",
          "237:   return NULL;",
          "238:  }",
          "240:  memcpy(newBuffer, ptr, prevSize);",
          "242:  memory->free(memory, ptr);",
          "244:  return newBuffer;",
          "245: }",
          "249: static void uriDecorateFree(UriMemoryManager * memory, void * ptr) {",
          "250:  UriMemoryManager * backend;",
          "252:  if ((ptr == NULL) || (memory == NULL)) {",
          "253:   return;",
          "254:  }",
          "256:  backend = (UriMemoryManager *)memory->userData;",
          "257:  if (backend == NULL) {",
          "258:   return;",
          "259:  }",
          "261:  backend->free(backend, (char *)ptr - sizeof(size_t));",
          "262: }",
          "266: int uriCompleteMemoryManager(UriMemoryManager * memory,",
          "267:   UriMemoryManager * backend) {",
          "268:  if ((memory == NULL) || (backend == NULL)) {",
          "269:   return URI_ERROR_NULL;",
          "270:  }",
          "272:  if ((backend->malloc == NULL) || (backend->free == NULL)) {",
          "273:   return URI_ERROR_MEMORY_MANAGER_INCOMPLETE;",
          "274:  }",
          "276:  memory->calloc = uriEmulateCalloc;",
          "277:  memory->reallocarray = uriEmulateReallocarray;",
          "279:  memory->malloc = uriDecorateMalloc;",
          "280:  memory->realloc = uriDecorateRealloc;",
          "281:  memory->free = uriDecorateFree;",
          "283:  memory->userData = backend;",
          "285:  return URI_SUCCESS;",
          "286: }",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: TEST(MemoryManagerTestingSuite, EmulateCalloc) {",
          "171:  UriMemoryManager partialEmulationMemoryManager;",
          "172:  memcpy(&partialEmulationMemoryManager, &defaultMemoryManager,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: TEST(MemoryManagerTestingSuite, CompleteMemoryManager) {",
          "171:  UriMemoryManager memory;",
          "172:  ASSERT_EQ(uriCompleteMemoryManager(&memory, &defaultMemoryManager),",
          "173:    URI_SUCCESS);",
          "175:  ASSERT_EQ(uriTestMemoryManager(&memory), URI_SUCCESS);",
          "176: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ca8a35cbf7e98157ae2307481df166b1014f26f",
      "candidate_info": {
        "commit_hash": "0ca8a35cbf7e98157ae2307481df166b1014f26f",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0ca8a35cbf7e98157ae2307481df166b1014f26f",
        "files": [
          "src/UriResolve.c"
        ],
        "message": "Pass memory manager to AddBaseUriImpl",
        "before_after_code_files": [
          "src/UriResolve.c||src/UriResolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: static int URI_FUNC(AddBaseUriImpl)(URI_TYPE(Uri) * absDest,",
          "154:   const URI_TYPE(Uri) * relSource,",
          "155:   const URI_TYPE(Uri) * absBase,",
          "158:  UriBool relSourceHasScheme;",
          "160:  if (absDest == NULL) {",
          "",
          "[Removed Lines]",
          "156:   UriResolutionOptions options) {",
          "",
          "[Added Lines]",
          "156:   UriResolutionOptions options, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: int URI_FUNC(AddBaseUri)(URI_TYPE(Uri) * absDest,",
          "299:   const URI_TYPE(Uri) * relSource, const URI_TYPE(Uri) * absBase) {",
          "301:  if ((res != URI_SUCCESS) && (absDest != NULL)) {",
          "302:   URI_FUNC(FreeUriMembers)(absDest);",
          "303:  }",
          "",
          "[Removed Lines]",
          "300:  const int res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, URI_RESOLVE_STRICTLY);",
          "",
          "[Added Lines]",
          "300:  const int res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, URI_RESOLVE_STRICTLY, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309: int URI_FUNC(AddBaseUriEx)(URI_TYPE(Uri) * absDest,",
          "310:   const URI_TYPE(Uri) * relSource, const URI_TYPE(Uri) * absBase,",
          "311:   UriResolutionOptions options) {",
          "313:  if ((res != URI_SUCCESS) && (absDest != NULL)) {",
          "314:   URI_FUNC(FreeUriMembers)(absDest);",
          "315:  }",
          "",
          "[Removed Lines]",
          "312:  const int res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, options);",
          "",
          "[Added Lines]",
          "313:  const int res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, options, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deccc230c21c3780f68d57c7e0116e6de3c424ac",
      "candidate_info": {
        "commit_hash": "deccc230c21c3780f68d57c7e0116e6de3c424ac",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/deccc230c21c3780f68d57c7e0116e6de3c424ac",
        "files": [
          "include/uriparser/Uri.h"
        ],
        "message": "docs: Fix small ParseUriEx API doc issue",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "bb8c2700b18a8774a4e9e855dce9579af7bd2f50",
      "candidate_info": {
        "commit_hash": "bb8c2700b18a8774a4e9e855dce9579af7bd2f50",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/bb8c2700b18a8774a4e9e855dce9579af7bd2f50",
        "files": [
          "src/UriCommon.c",
          "src/UriCommon.h",
          "src/UriNormalize.c",
          "src/UriParse.c",
          "src/UriResolve.c"
        ],
        "message": "Pass memory manager to FixEmptyTrailSegment",
        "before_after_code_files": [
          "src/UriCommon.c||src/UriCommon.c",
          "src/UriCommon.h||src/UriCommon.h",
          "src/UriNormalize.c||src/UriNormalize.c",
          "src/UriParse.c||src/UriParse.c",
          "src/UriResolve.c||src/UriResolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [
            "src/UriCommon.c||src/UriCommon.c"
          ],
          "candidate": [
            "src/UriCommon.c||src/UriCommon.c"
          ]
        }
      },
      "candidate_diff": {
        "src/UriCommon.c||src/UriCommon.c": [
          "File: src/UriCommon.c -> src/UriCommon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "558:  if (!uri->absolutePath",
          "559:    && !URI_FUNC(IsHostSet)(uri)",
          "",
          "[Removed Lines]",
          "554: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri) {",
          "",
          "[Added Lines]",
          "554: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri,",
          "555:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "src/UriCommon.h||src/UriCommon.h": [
          "File: src/UriCommon.h -> src/UriCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   const URI_TYPE(Uri) * source, UriMemoryManager * memory);",
          "101: UriBool URI_FUNC(FixAmbiguity)(URI_TYPE(Uri) * uri, UriMemoryManager * memory);",
          "105: #endif",
          "",
          "[Removed Lines]",
          "102: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri);",
          "",
          "[Added Lines]",
          "102: void URI_FUNC(FixEmptyTrailSegment)(URI_TYPE(Uri) * uri,",
          "103:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "671:    URI_FUNC(PreventLeakage)(uri, doneMask);",
          "672:    return URI_ERROR_MALLOC;",
          "673:   }",
          "675:  }",
          "",
          "[Removed Lines]",
          "674:   URI_FUNC(FixEmptyTrailSegment)(uri);",
          "",
          "[Added Lines]",
          "675:   URI_FUNC(FixEmptyTrailSegment)(uri, memory);",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352:    }",
          "1353:    afterPathAbsEmpty = URI_FUNC(ParsePathAbsEmpty)(state, afterAuthority, afterLast);",
          "1357:    return afterPathAbsEmpty;",
          "1358:   }",
          "",
          "[Removed Lines]",
          "1355:    URI_FUNC(FixEmptyTrailSegment)(state->uri);",
          "",
          "[Added Lines]",
          "1357:    URI_FUNC(FixEmptyTrailSegment)(state->uri, memory);",
          "",
          "---------------"
        ],
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:        absDest->query = relSource->query;",
          "282:       }",
          "285:      }",
          "",
          "[Removed Lines]",
          "283:       URI_FUNC(FixEmptyTrailSegment)(absDest);",
          "",
          "[Added Lines]",
          "283:       URI_FUNC(FixEmptyTrailSegment)(absDest, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e570c2546990fc4c58549e9457ecb8a53bd59d58",
      "candidate_info": {
        "commit_hash": "e570c2546990fc4c58549e9457ecb8a53bd59d58",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/e570c2546990fc4c58549e9457ecb8a53bd59d58",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriNormalize.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function NormalizeSyntaxExMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriNormalize.c||src/UriNormalize.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534: int URI_FUNC(NormalizeSyntaxExMm)(URI_TYPE(Uri) * uri, unsigned int mask,",
          "535:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: # include <uriparser/Uri.h>",
          "72: # include \"UriNormalizeBase.h\"",
          "73: # include \"UriCommon.h\"",
          "74: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: # include \"UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: int URI_FUNC(NormalizeSyntaxEx)(URI_TYPE(Uri) * uri, unsigned int mask) {",
          "491:  return URI_FUNC(NormalizeSyntaxEngine)(uri, mask, NULL, memory);",
          "492: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:  return URI_FUNC(NormalizeSyntaxExMm)(uri, mask, NULL);",
          "492: }",
          "496: int URI_FUNC(NormalizeSyntaxExMm)(URI_TYPE(Uri) * uri, unsigned int mask,",
          "497:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: TEST(FailingMemoryManagerSuite, RemoveBaseUriMm) {",
          "88:  UriUriA dest;",
          "89:  UriUriA absoluteSource = parse(\"http://example.org/a/b/c/\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: TEST(FailingMemoryManagerSuite, NormalizeSyntaxExMm) {",
          "88:  UriUriA uri = parse(\"hTTp://example.org/path\");",
          "89:  const unsigned int mask = URI_NORMALIZE_SCHEME;  // anything but URI_NORMALIZED",
          "91:  ASSERT_EQ(uriNormalizeSyntaxExMmA(&uri, mask, &failingMemoryManager),",
          "92:    URI_ERROR_MALLOC);",
          "94:  uriFreeUriMembersA(&uri);",
          "95: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}