{
  "cve_id": "CVE-2016-10197",
  "cve_desc": "The search_make_new function in evdns.c in libevent before 2.1.6-beta allows attackers to cause a denial of service (out-of-bounds read) via an empty hostname.",
  "repo": "libevent/libevent",
  "patch_hash": "ec65c42052d95d2c23d1d837136d1cf1d9ecef9e",
  "patch_info": {
    "commit_hash": "ec65c42052d95d2c23d1d837136d1cf1d9ecef9e",
    "repo": "libevent/libevent",
    "commit_url": "https://github.com/libevent/libevent/commit/ec65c42052d95d2c23d1d837136d1cf1d9ecef9e",
    "files": [
      "evdns.c"
    ],
    "message": "evdns: fix searching empty hostnames\n\nFrom #332:\n  Here follows a bug report by **Guido Vranken** via the _Tor bug bounty program_. Please credit Guido accordingly.\n\n  ## Bug report\n\n  The DNS code of Libevent contains this rather obvious OOB read:\n\n  ```c\n  static char *\n  search_make_new(const struct search_state *const state, int n, const char *const base_name) {\n      const size_t base_len = strlen(base_name);\n      const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;\n  ```\n\n  If the length of ```base_name``` is 0, then line 3125 reads 1 byte before the buffer. This will trigger a crash on ASAN-protected builds.\n\n  To reproduce:\n\n  Build libevent with ASAN:\n  ```\n  $ CFLAGS='-fomit-frame-pointer -fsanitize=address' ./configure && make -j4\n  ```\n  Put the attached ```resolv.conf``` and ```poc.c``` in the source directory and then do:\n\n  ```\n  $ gcc -fsanitize=address -fomit-frame-pointer poc.c .libs/libevent.a\n  $ ./a.out\n  =================================================================\n  ==22201== ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60060000efdf at pc 0x4429da bp 0x7ffe1ed47300 sp 0x7ffe1ed472f8\n  READ of size 1 at 0x60060000efdf thread T0\n  ```\n\nP.S. we can add a check earlier, but since this is very uncommon, I didn't add it.\n\nFixes: #332",
    "before_after_code_files": [
      "evdns.c||evdns.c"
    ]
  },
  "patch_diff": {
    "evdns.c||evdns.c": [
      "File: evdns.c -> evdns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3175: static char *",
      "3176: search_make_new(const struct search_state *const state, int n, const char *const base_name) {",
      "3177:  const size_t base_len = strlen(base_name);",
      "3179:  struct search_domain *dom;",
      "3181:  for (dom = state->head; dom; dom = dom->next) {",
      "3182:   if (!n--) {",
      "",
      "[Removed Lines]",
      "3178:  const char need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;",
      "",
      "[Added Lines]",
      "3178:  char need_to_append_dot;",
      "3181:  if (!base_len) return NULL;",
      "3182:  need_to_append_dot = base_name[base_len - 1] == '.' ? 0 : 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7348bab602cf4dbdf65b9eeba2fb9ce4646bc0b",
      "candidate_info": {
        "commit_hash": "d7348bab602cf4dbdf65b9eeba2fb9ce4646bc0b",
        "repo": "libevent/libevent",
        "commit_url": "https://github.com/libevent/libevent/commit/d7348bab602cf4dbdf65b9eeba2fb9ce4646bc0b",
        "files": [
          "test/regress_dns.c"
        ],
        "message": "test/dns: regression for empty hostname\n\nRefs: #332",
        "before_after_code_files": [
          "test/regress_dns.c||test/regress_dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/regress_dns.c||test/regress_dns.c": [
          "File: test/regress_dns.c -> test/regress_dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:  regress_clean_dnsserver();",
          "594: }",
          "595: static void",
          "596: dns_search_test(void *arg)",
          "597: {",
          "598:  return dns_search_test_impl(arg, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596: dns_search_empty_test(void *arg)",
          "597: {",
          "598:  struct basic_test_data *data = arg;",
          "599:  struct event_base *base = data->base;",
          "600:  struct evdns_base *dns = NULL;",
          "602:  dns = evdns_base_new(base, 0);",
          "604:  evdns_base_search_add(dns, \"whatever.example.com\");",
          "606:  n_replies_left = 1;",
          "607:  exit_base = base;",
          "609:  tt_ptr_op(evdns_base_resolve_ipv4(dns, \"\", 0, generic_dns_callback, NULL), ==, NULL);",
          "611: end:",
          "612:  if (dns)",
          "613:   evdns_base_free(dns, 0);",
          "614: }",
          "615: static void",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2104:  DNS_LEGACY(gethostbyname6, TT_FORK|TT_NEED_BASE|TT_NEED_DNS|TT_OFF_BY_DEFAULT),",
          "2105:  DNS_LEGACY(gethostbyaddr, TT_FORK|TT_NEED_BASE|TT_NEED_DNS|TT_OFF_BY_DEFAULT),",
          "2106:  { \"resolve_reverse\", dns_resolve_reverse, TT_FORK|TT_OFF_BY_DEFAULT, NULL, NULL },",
          "2107:  { \"search\", dns_search_test, TT_FORK|TT_NEED_BASE, &basic_setup, NULL },",
          "2108:  { \"search_lower\", dns_search_lower_test, TT_FORK|TT_NEED_BASE, &basic_setup, NULL },",
          "2109:  { \"search_cancel\", dns_search_cancel_test,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2127:  { \"search_empty\", dns_search_empty_test, TT_FORK|TT_NEED_BASE, &basic_setup, NULL },",
          "",
          "---------------"
        ]
      }
    }
  ]
}