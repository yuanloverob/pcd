{
  "cve_id": "CVE-2024-24814",
  "cve_desc": "mod_auth_openidc is an OpenID Certified\u2122 authentication and authorization module for the Apache 2.x HTTP server that implements the OpenID Connect Relying Party functionality. In affected versions missing input validation on mod_auth_openidc_session_chunks cookie value makes the server vulnerable to a denial of service (DoS) attack. An internal security audit has been conducted and the reviewers found that if they manipulated the value of the mod_auth_openidc_session_chunks cookie to a very large integer, like 99999999, the server struggles with the request for a long time and finally gets back with a 500 error. Making a few requests of this kind caused our server to become unresponsive. Attackers can craft requests that would make the server work very hard (and possibly become unresponsive) and/or crash with minimal effort. This issue has been addressed in version 2.4.15.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "OpenIDC/mod_auth_openidc",
  "patch_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
  "patch_info": {
    "commit_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
    "repo": "OpenIDC/mod_auth_openidc",
    "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/4022c12f314bd89d127d1be008b1a80a08e1203d",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/util.c"
    ],
    "message": "release 2.4.15.2: fix DoS CVE-2024-24814\n\nfix CVE-2024-24814: DoS when `OIDCSessionType client-cookie` is set and\na crafted Cookie header is supplied\nhttps://github.com/OpenIDC/mod_auth_openidc/security/advisories/GHSA-hxr6-w4gc-7vvv\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/util.c||src/util.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2dev],[hans.zandbelt@openidc.com])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2],[hans.zandbelt@openidc.com])",
      "",
      "---------------"
    ],
    "src/util.c||src/util.c": [
      "File: src/util.c -> src/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1561: char *oidc_util_get_chunked_cookie(request_rec *r, const char *cookieName, int chunkSize) {",
      "1578:   }",
      "1579:  }",
      "1580:  return cookieValue;",
      "1581: }",
      "",
      "[Removed Lines]",
      "1562:  char *cookieValue = NULL;",
      "1563:  char *chunkValue = NULL;",
      "1564:  int i = 0;",
      "1565:  if (chunkSize == 0) {",
      "1566:   cookieValue = oidc_util_get_cookie(r, cookieName);",
      "1567:  } else {",
      "1568:   int chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1569:   if (chunkCount > 0) {",
      "1570:    cookieValue = \"\";",
      "1571:    for (i = 0; i < chunkCount; i++) {",
      "1572:     chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1573:     if (chunkValue != NULL)",
      "1574:      cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue, chunkValue);",
      "1575:    }",
      "1576:   } else {",
      "1577:    cookieValue = oidc_util_get_cookie(r, cookieName);",
      "",
      "[Added Lines]",
      "1562:  char *cookieValue = NULL, *chunkValue = NULL;",
      "1563:  int chunkCount = 0, i = 0;",
      "1564:  if (chunkSize == 0)",
      "1565:   return oidc_util_get_cookie(r, cookieName);",
      "1566:  chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1567:  if (chunkCount == 0)",
      "1568:   return oidc_util_get_cookie(r, cookieName);",
      "1569:  if ((chunkCount < 0) || (chunkCount > 99)) {",
      "1570:   oidc_warn(r, \"chunk count out of bounds: %d\", chunkCount);",
      "1571:   return NULL;",
      "1572:  }",
      "1573:  for (i = 0; i < chunkCount; i++) {",
      "1574:   chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1575:   if (chunkValue == NULL) {",
      "1576:    oidc_warn(r, \"could not find chunk %d; aborting\", i);",
      "1577:    break;",
      "1579:   cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue ? cookieValue : \"\", chunkValue);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "75b7dcf8fd6eb5e2907bf62d1b3fc700ece19218",
      "candidate_info": {
        "commit_hash": "75b7dcf8fd6eb5e2907bf62d1b3fc700ece19218",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/75b7dcf8fd6eb5e2907bf62d1b3fc700ece19218",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/file.c",
          "src/state.c",
          "src/util.c",
          "src/util.h"
        ],
        "message": "address warnings from static code analysis tool CodeChecker\n\nbump to 2.4.16.6dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/file.c||src/cache/file.c",
          "src/state.c||src/state.c",
          "src/util.c||src/util.c",
          "src/util.h||src/util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/util.c||src/util.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/util.c||src/util.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.5],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.6dev],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/cache/file.c||src/cache/file.c": [
          "File: src/cache/file.c -> src/cache/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  const char *metadata_path = oidc_cache_file_path(r, \"cache-file\", OIDC_CACHE_FILE_LAST_CLEANED);",
          "252:   if (apr_time_now() < fi.mtime + apr_time_from_sec(oidc_cfg_cache_file_clean_interval_get(cfg))) {",
          "",
          "[Removed Lines]",
          "249:  if ((rc = apr_stat(&fi, metadata_path, APR_FINFO_MTIME, r->pool)) == APR_SUCCESS) {",
          "",
          "[Added Lines]",
          "249:  if (apr_stat(&fi, metadata_path, APR_FINFO_MTIME, r->pool) == APR_SUCCESS) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:  info.len = _oidc_strlen(value) + 1;",
          "403:   return FALSE;",
          "409:  apr_file_unlock(fd);",
          "",
          "[Removed Lines]",
          "402:  if ((rc = oidc_cache_file_write(r, path, fd, &info, sizeof(oidc_cache_file_info_t))) != APR_SUCCESS)",
          "406:  rc = oidc_cache_file_write(r, path, fd, (void *)value, info.len);",
          "",
          "[Added Lines]",
          "402:  if (oidc_cache_file_write(r, path, fd, &info, sizeof(oidc_cache_file_info_t)) != APR_SUCCESS)",
          "406:  oidc_cache_file_write(r, path, fd, (void *)value, info.len);",
          "",
          "---------------"
        ],
        "src/state.c||src/state.c": [
          "File: src/state.c -> src/state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:    prev = cur;",
          "137:    cur = cur->next;",
          "138:   }",
          "146:   number_of_valid_state_cookies--;",
          "147:  }",
          "148:  return number_of_valid_state_cookies;",
          "",
          "[Removed Lines]",
          "139:   oidc_warn(r, \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\",",
          "140:      oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "141:   oidc_http_set_cookie(r, oldest->name, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "142:   if (prev_oldest)",
          "143:    prev_oldest->next = oldest->next;",
          "144:   else",
          "145:    first = first ? first->next : NULL;",
          "",
          "[Added Lines]",
          "139:   if (oldest) {",
          "140:    oidc_warn(r, \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\",",
          "141:       oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "142:    oidc_http_set_cookie(r, oldest->name, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "143:    if (prev_oldest)",
          "144:     prev_oldest->next = oldest->next;",
          "145:    else",
          "146:     first = first ? first->next : NULL;",
          "147:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: int oidc_state_cookies_clean_expired(request_rec *r, oidc_cfg_t *c, const char *currentCookieName, int delete_oldest) {",
          "157:  int number_of_valid_state_cookies = 0;",
          "158:  oidc_state_cookies_t *first = NULL, *last = NULL;",
          "160:  char *cookies = apr_pstrdup(r->pool, oidc_http_hdr_in_cookie_get(r));",
          "161:  if (cookies != NULL) {",
          "162:   cookie = apr_strtok(cookies, OIDC_STR_SEMI_COLON, &tokenizerCtx);",
          "",
          "[Removed Lines]",
          "159:  char *cookie, *tokenizerCtx = NULL;",
          "",
          "[Added Lines]",
          "161:  char *cookie = NULL, *tokenizerCtx = NULL, *cookieName = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:    while (*cookie == OIDC_CHAR_SPACE)",
          "165:     cookie++;",
          "166:    if (_oidc_strstr(cookie, oidc_cfg_dir_state_cookie_prefix_get(r)) == cookie) {",
          "168:     while (cookie != NULL && *cookie != OIDC_CHAR_EQUAL)",
          "169:      cookie++;",
          "170:     if (*cookie == OIDC_CHAR_EQUAL) {",
          "",
          "[Removed Lines]",
          "167:     char *cookieName = cookie;",
          "",
          "[Added Lines]",
          "169:     cookieName = cookie;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1126:  char *html = NULL;",
          "1127:  int rc = status_code;",
          "1128:  if (*static_template_content == NULL) {",
          "",
          "[Removed Lines]",
          "1123: apr_byte_t oidc_util_html_send_in_template(request_rec *r, const char *filename, char **static_template_content,",
          "1124:         const char *arg1, int arg1_esc, const char *arg2, int arg2_esc,",
          "1125:         int status_code) {",
          "",
          "[Added Lines]",
          "1123: int oidc_util_html_send_in_template(request_rec *r, const char *filename, char **static_template_content,",
          "1124:         const char *arg1, int arg1_esc, const char *arg2, int arg2_esc, int status_code) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: static char *oidc_util_utf8_to_latin1(request_rec *r, const char *src) {",
          "1455:  unsigned int cp = 0;",
          "1456:  unsigned char ch;",
          "1457:  int i = 0;",
          "",
          "[Removed Lines]",
          "1454:  char *dst = \"\";",
          "",
          "[Added Lines]",
          "1453:  char *dst = NULL;",
          "",
          "---------------"
        ],
        "src/util.h||src/util.h": [
          "File: src/util.h -> src/util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: const char *oidc_util_jq_filter(request_rec *r, const char *input, const char *filter);",
          "114: void oidc_util_set_trace_parent(request_rec *r, oidc_cfg_t *c, const char *span);",
          "115: void oidc_util_apr_hash_clear(apr_hash_t *ht);",
          "119: char *oidc_util_apr_expr_parse(cmd_parms *cmd, const char *str, oidc_apr_expr_t **expr, apr_byte_t result_is_str);",
          "120: const char *oidc_util_apr_expr_exec(request_rec *r, const oidc_apr_expr_t *expr, apr_byte_t result_is_str);",
          "",
          "[Removed Lines]",
          "116: apr_byte_t oidc_util_html_send_in_template(request_rec *r, const char *filename, char **static_template_content,",
          "117:         const char *arg1, int arg1_esc, const char *arg2, int arg2_esc,",
          "118:         int status_code);",
          "",
          "[Added Lines]",
          "116: int oidc_util_html_send_in_template(request_rec *r, const char *filename, char **static_template_content,",
          "117:         const char *arg1, int arg1_esc, const char *arg2, int arg2_esc, int status_code);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7beb71a9a867ebda6cfcf69433c8cd96dd4bf53",
      "candidate_info": {
        "commit_hash": "f7beb71a9a867ebda6cfcf69433c8cd96dd4bf53",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/f7beb71a9a867ebda6cfcf69433c8cd96dd4bf53",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cfg/dir.c"
        ],
        "message": "fix accepting custom cookie names in OIDCOAuthAcceptTokenAs\n\ni.e. allow for cookie:<name>; see #1261; thanks @bbartke\n\nbump to 2.4.16.4rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cfg/dir.c||src/cfg/dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.3],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc0],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/cfg/dir.c||src/cfg/dir.c": [
          "File: src/cfg/dir.c -> src/cfg/dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:  }",
          "227:  rv = oidc_cfg_parse_option(cmd->pool, oidc_oauth_accept_token_in_options,",
          "229:  if (rv != NULL)",
          "230:   return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "",
          "[Removed Lines]",
          "228:        OIDC_CFG_OPTIONS_SIZE(oidc_oauth_accept_token_in_options), arg, &v);",
          "",
          "[Added Lines]",
          "228:        OIDC_CFG_OPTIONS_SIZE(oidc_oauth_accept_token_in_options), s, &v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abd3e492f8e1e8af1b9418eae68c21a3ba75a870",
      "candidate_info": {
        "commit_hash": "abd3e492f8e1e8af1b9418eae68c21a3ba75a870",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/abd3e492f8e1e8af1b9418eae68c21a3ba75a870",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cfg/cfg.c"
        ],
        "message": "2.4.16.1: fix parsing OIDCXForwardedHeaders; closes #1250\n\nthanks @maltesmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cfg/cfg.c||src/cfg/cfg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.1],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/cfg/cfg.c||src/cfg/cfg.c": [
          "File: src/cfg/cfg.c -> src/cfg/cfg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:           {OIDC_HDR_FORWARDED, OIDC_HTTP_HDR_FORWARDED}};",
          "424:  int v = OIDC_CONFIG_POS_INT_UNSET;",
          "425:  const char *rv = oidc_cfg_parse_option(cmd->pool, options, OIDC_CFG_OPTIONS_SIZE(options), arg, &v);",
          "427:   cfg->x_forwarded_headers |= v;",
          "428:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "429: }",
          "",
          "[Removed Lines]",
          "426:  if ((rv == NULL) && (v != OIDC_CONFIG_POS_INT_UNSET))",
          "",
          "[Added Lines]",
          "426:  if ((rv == NULL) && (v != OIDC_CONFIG_POS_INT_UNSET)) {",
          "428:   if (cfg->x_forwarded_headers == OIDC_CONFIG_POS_INT_UNSET)",
          "429:    cfg->x_forwarded_headers = OIDC_HDR_NONE;",
          "431:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55b29456838b09659c0087d4d9e96c60d939d304",
      "candidate_info": {
        "commit_hash": "55b29456838b09659c0087d4d9e96c60d939d304",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/55b29456838b09659c0087d4d9e96c60d939d304",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.16.2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.2dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.2],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b696f3dc7feb844c3edc28ccffabf5e060238075",
      "candidate_info": {
        "commit_hash": "b696f3dc7feb844c3edc28ccffabf5e060238075",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/b696f3dc7feb844c3edc28ccffabf5e060238075",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.15.6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.5],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.6],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    }
  ]
}