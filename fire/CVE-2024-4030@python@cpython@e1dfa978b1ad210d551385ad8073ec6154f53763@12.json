{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38cfa92880a19d03a4ada4cd843870a8602c13a0",
      "candidate_info": {
        "commit_hash": "38cfa92880a19d03a4ada4cd843870a8602c13a0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/38cfa92880a19d03a4ada4cd843870a8602c13a0",
        "files": [
          "Lib/_pyrepl/__main__.py",
          "Lib/_pyrepl/main.py",
          "Lib/_pyrepl/simple_interact.py",
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-118908: Use __main__ for the default PyREPL namespace (GH-121054) (#121059)",
        "before_after_code_files": [
          "Lib/_pyrepl/__main__.py||Lib/_pyrepl/__main__.py",
          "Lib/_pyrepl/main.py||Lib/_pyrepl/main.py",
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/__main__.py||Lib/_pyrepl/__main__.py": [
          "File: Lib/_pyrepl/__main__.py -> Lib/_pyrepl/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "1: import os",
          "2: import sys",
          "4: CAN_USE_PYREPL: bool",
          "5: if sys.platform != \"win32\":",
          "6:     CAN_USE_PYREPL = True",
          "7: else:",
          "8:     CAN_USE_PYREPL = sys.getwindowsversion().build >= 10586  # Windows 10 TH2",
          "11: def interactive_console(mainmodule=None, quiet=False, pythonstartup=False):",
          "12:     global CAN_USE_PYREPL",
          "13:     if not CAN_USE_PYREPL:",
          "14:         return sys._baserepl()",
          "16:     startup_path = os.getenv(\"PYTHONSTARTUP\")",
          "17:     if pythonstartup and startup_path:",
          "18:         import tokenize",
          "19:         with tokenize.open(startup_path) as f:",
          "20:             startup_code = compile(f.read(), startup_path, \"exec\")",
          "21:             exec(startup_code)",
          "23:     # set sys.{ps1,ps2} just before invoking the interactive interpreter. This",
          "24:     # mimics what CPython does in pythonrun.c",
          "25:     if not hasattr(sys, \"ps1\"):",
          "26:         sys.ps1 = \">>> \"",
          "27:     if not hasattr(sys, \"ps2\"):",
          "28:         sys.ps2 = \"... \"",
          "30:     run_interactive = None",
          "31:     try:",
          "32:         import errno",
          "33:         if not os.isatty(sys.stdin.fileno()):",
          "34:             raise OSError(errno.ENOTTY, \"tty required\", \"stdin\")",
          "35:         from .simple_interact import check",
          "36:         if err := check():",
          "37:             raise RuntimeError(err)",
          "38:         from .simple_interact import run_multiline_interactive_console",
          "39:         run_interactive = run_multiline_interactive_console",
          "40:     except Exception as e:",
          "41:         from .trace import trace",
          "42:         msg = f\"warning: can't use pyrepl: {e}\"",
          "43:         trace(msg)",
          "44:         print(msg, file=sys.stderr)",
          "45:         CAN_USE_PYREPL = False",
          "46:     if run_interactive is None:",
          "47:         return sys._baserepl()",
          "48:     return run_interactive(mainmodule)",
          "51:     interactive_console()",
          "",
          "[Added Lines]",
          "2:     from .main import interactive_console as __pyrepl_interactive_console",
          "3:     __pyrepl_interactive_console()",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/main.py||Lib/_pyrepl/main.py": [
          "File: Lib/_pyrepl/main.py -> Lib/_pyrepl/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "2: import sys",
          "4: CAN_USE_PYREPL: bool",
          "5: if sys.platform != \"win32\":",
          "6:     CAN_USE_PYREPL = True",
          "7: else:",
          "8:     CAN_USE_PYREPL = sys.getwindowsversion().build >= 10586  # Windows 10 TH2",
          "11: def interactive_console(mainmodule=None, quiet=False, pythonstartup=False):",
          "12:     global CAN_USE_PYREPL",
          "13:     if not CAN_USE_PYREPL:",
          "14:         return sys._baserepl()",
          "16:     if mainmodule:",
          "17:         namespace = mainmodule.__dict__",
          "18:     else:",
          "19:         import __main__",
          "20:         namespace = __main__.__dict__",
          "21:         namespace.pop(\"__pyrepl_interactive_console\", None)",
          "23:     startup_path = os.getenv(\"PYTHONSTARTUP\")",
          "24:     if pythonstartup and startup_path:",
          "25:         import tokenize",
          "26:         with tokenize.open(startup_path) as f:",
          "27:             startup_code = compile(f.read(), startup_path, \"exec\")",
          "28:             exec(startup_code, namespace)",
          "30:     # set sys.{ps1,ps2} just before invoking the interactive interpreter. This",
          "31:     # mimics what CPython does in pythonrun.c",
          "32:     if not hasattr(sys, \"ps1\"):",
          "33:         sys.ps1 = \">>> \"",
          "34:     if not hasattr(sys, \"ps2\"):",
          "35:         sys.ps2 = \"... \"",
          "37:     run_interactive = None",
          "38:     try:",
          "39:         import errno",
          "40:         if not os.isatty(sys.stdin.fileno()):",
          "41:             raise OSError(errno.ENOTTY, \"tty required\", \"stdin\")",
          "42:         from .simple_interact import check",
          "43:         if err := check():",
          "44:             raise RuntimeError(err)",
          "45:         from .simple_interact import run_multiline_interactive_console",
          "46:         run_interactive = run_multiline_interactive_console",
          "47:     except Exception as e:",
          "48:         from .trace import trace",
          "49:         msg = f\"warning: can't use pyrepl: {e}\"",
          "50:         trace(msg)",
          "51:         print(msg, file=sys.stderr)",
          "52:         CAN_USE_PYREPL = False",
          "53:     if run_interactive is None:",
          "54:         return sys._baserepl()",
          "55:     run_interactive(namespace)",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     \"clear\": _clear_screen,",
          "81: }",
          "93: def run_multiline_interactive_console(",
          "95:     future_flags: int = 0,",
          "96:     console: code.InteractiveConsole | None = None,",
          "97: ) -> None:",
          "98:     from .readline import _setup",
          "100:     _setup(namespace)",
          "102:     if console is None:",
          "",
          "[Removed Lines]",
          "83: DEFAULT_NAMESPACE: dict[str, Any] = {",
          "84:     '__name__': '__main__',",
          "85:     '__doc__': None,",
          "86:     '__package__': None,",
          "87:     '__loader__': None,",
          "88:     '__spec__': None,",
          "89:     '__annotations__': {},",
          "90:     '__builtins__': builtins,",
          "91: }",
          "94:     mainmodule: ModuleType | None = None,",
          "99:     namespace = mainmodule.__dict__ if mainmodule else DEFAULT_NAMESPACE",
          "",
          "[Added Lines]",
          "85:     namespace: dict[str, Any],",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "843: class TestMain(TestCase):",
          "844:     @force_not_colorized",
          "845:     def test_exposed_globals_in_repl(self):",
          "850:         output, exit_code = self.run_repl([\"sorted(dir())\", \"exit\"])",
          "852:             self.skipTest(\"pyrepl not available\")",
          "853:         self.assertEqual(exit_code, 0)",
          "856:     def test_dumb_terminal_exits_cleanly(self):",
          "857:         env = os.environ.copy()",
          "",
          "[Removed Lines]",
          "846:         expected_output = (",
          "847:             \"[\\'__annotations__\\', \\'__builtins__\\', \\'__doc__\\', \\'__loader__\\', \"",
          "848:             \"\\'__name__\\', \\'__package__\\', \\'__spec__\\']\"",
          "849:         )",
          "851:         if \"can\\'t use pyrepl\" in output:",
          "854:         self.assertIn(expected_output, output)",
          "",
          "[Added Lines]",
          "846:         pre = \"['__annotations__', '__builtins__'\"",
          "847:         post = \"'__loader__', '__name__', '__package__', '__spec__']\"",
          "849:         if \"can't use pyrepl\" in output:",
          "853:         # if `__main__` is not a file (impossible with pyrepl)",
          "854:         case1 = f\"{pre}, '__doc__', {post}\" in output",
          "856:         # if `__main__` is an uncached .py file (no .pyc)",
          "857:         case2 = f\"{pre}, '__doc__', '__file__', {post}\" in output",
          "859:         # if `__main__` is a cached .pyc file and the .py source exists",
          "860:         case3 = f\"{pre}, '__cached__', '__doc__', '__file__', {post}\" in output",
          "862:         # if `__main__` is a cached .pyc file but there's no .py source file",
          "863:         case4 = f\"{pre}, '__cached__', '__doc__', {post}\" in output",
          "865:         self.assertTrue(case1 or case2 or case3 or case4, output)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39c3f11f2552f751d7d484d9e27222bcb0a3672e",
      "candidate_info": {
        "commit_hash": "39c3f11f2552f751d7d484d9e27222bcb0a3672e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/39c3f11f2552f751d7d484d9e27222bcb0a3672e",
        "files": [
          "Doc/library/inspect.rst",
          "Lib/inspect.py",
          "Lib/test/test_inspect/test_inspect.py",
          "Misc/NEWS.d/next/Library/2024-06-12-11-54-05.gh-issue-120381.O-BNLs.rst"
        ],
        "message": "[3.13] gh-120381: Fix inspect.ismethoddescriptor() (GH-120684)\n\nThe `inspect.ismethoddescriptor()` function did not check for the lack of\n`__delete__()` and, consequently, erroneously returned True when applied\nto *data* descriptors with only `__get__()` and `__delete__()` defined.\n\n(cherry picked from commit dacc5ac71a8e546f9ef76805827cb50d4d40cabf)\n\nCo-authored-by: Jan Kaliszewski <zuo@kaliszewski.net>\nCo-authored-by: B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com>\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>",
        "before_after_code_files": [
          "Lib/inspect.py||Lib/inspect.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/inspect.py||Lib/inspect.py": [
          "File: Lib/inspect.py -> Lib/inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:     But not if ismethod() or isclass() or isfunction() are true.",
          "315:     This is new in Python 2.2, and, for example, is true of int.__add__.",
          "320:     Methods implemented via descriptors that also pass one of the other",
          "321:     tests return false from the ismethoddescriptor() test, simply because",
          "",
          "[Removed Lines]",
          "316:     An object passing this test has a __get__ attribute but not a __set__",
          "317:     attribute, but beyond that the set of attributes varies.  __name__ is",
          "318:     usually sensible, and __doc__ often is.",
          "",
          "[Added Lines]",
          "316:     An object passing this test has a __get__ attribute, but not a",
          "317:     __set__ attribute or a __delete__ attribute. Beyond that, the set",
          "318:     of attributes varies; __name__ is usually sensible, and __doc__",
          "319:     often is.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:         # mutual exclusion",
          "326:         return False",
          "327:     tp = type(object)",
          "330: def isdatadescriptor(object):",
          "331:     \"\"\"Return true if the object is a data descriptor.",
          "",
          "[Removed Lines]",
          "328:     return hasattr(tp, \"__get__\") and not hasattr(tp, \"__set__\")",
          "",
          "[Added Lines]",
          "329:     return (hasattr(tp, \"__get__\")",
          "330:             and not hasattr(tp, \"__set__\")",
          "331:             and not hasattr(tp, \"__delete__\"))",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: # ismodule, isclass, ismethod, isfunction, istraceback, isframe, iscode,",
          "56: # isbuiltin, isroutine, isgenerator, isgeneratorfunction, getmembers,",
          "57: # getdoc, getfile, getmodule, getsourcefile, getcomments, getsource,",
          "62: # NOTE: There are some additional tests relating to interaction with",
          "63: #       zipimport in the test_zipimport_support test module.",
          "",
          "[Removed Lines]",
          "58: # getclasstree, getargvalues, formatargvalues,",
          "59: # currentframe, stack, trace, isdatadescriptor,",
          "60: # ismethodwrapper",
          "",
          "[Added Lines]",
          "58: # getclasstree, getargvalues, formatargvalues, currentframe,",
          "59: # stack, trace, ismethoddescriptor, isdatadescriptor, ismethodwrapper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:         self.istest(inspect.ismethod, 'git.argue')",
          "180:         self.istest(inspect.ismethod, 'mod.custom_method')",
          "181:         self.istest(inspect.ismodule, 'mod')",
          "182:         self.istest(inspect.isdatadescriptor, 'collections.defaultdict.default_factory')",
          "183:         self.istest(inspect.isgenerator, '(x for x in range(2))')",
          "184:         self.istest(inspect.isgeneratorfunction, 'generator_function_example')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:         self.istest(inspect.ismethoddescriptor, 'int.__add__')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1813:         self.assertEqual(inspect.formatannotation(ann1), 'Union[List[testModule.typing.A], int]')",
          "1816: class TestIsDataDescriptor(unittest.TestCase):",
          "1818:     def test_custom_descriptors(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1816: class TestIsMethodDescriptor(unittest.TestCase):",
          "1818:     def test_custom_descriptors(self):",
          "1819:         class MethodDescriptor:",
          "1820:             def __get__(self, *_): pass",
          "1821:         class MethodDescriptorSub(MethodDescriptor):",
          "1822:             pass",
          "1823:         class DataDescriptorWithNoGet:",
          "1824:             def __set__(self, *_): pass",
          "1825:         class DataDescriptorWithGetSet:",
          "1826:             def __get__(self, *_): pass",
          "1827:             def __set__(self, *_): pass",
          "1828:         class DataDescriptorWithGetDelete:",
          "1829:             def __get__(self, *_): pass",
          "1830:             def __delete__(self, *_): pass",
          "1831:         class DataDescriptorSub(DataDescriptorWithNoGet,",
          "1832:                                 DataDescriptorWithGetDelete):",
          "1833:             pass",
          "1835:         # Custom method descriptors:",
          "1836:         self.assertTrue(",
          "1837:             inspect.ismethoddescriptor(MethodDescriptor()),",
          "1838:             '__get__ and no __set__/__delete__ => method descriptor')",
          "1839:         self.assertTrue(",
          "1840:             inspect.ismethoddescriptor(MethodDescriptorSub()),",
          "1841:             '__get__ (inherited) and no __set__/__delete__'",
          "1842:             ' => method descriptor')",
          "1844:         # Custom data descriptors:",
          "1845:         self.assertFalse(",
          "1846:             inspect.ismethoddescriptor(DataDescriptorWithNoGet()),",
          "1847:             '__set__ (and no __get__) => not a method descriptor')",
          "1848:         self.assertFalse(",
          "1849:             inspect.ismethoddescriptor(DataDescriptorWithGetSet()),",
          "1850:             '__get__ and __set__ => not a method descriptor')",
          "1851:         self.assertFalse(",
          "1852:             inspect.ismethoddescriptor(DataDescriptorWithGetDelete()),",
          "1853:             '__get__ and __delete__ => not a method descriptor')",
          "1854:         self.assertFalse(",
          "1855:             inspect.ismethoddescriptor(DataDescriptorSub()),",
          "1856:             '__get__, __set__ and __delete__ => not a method descriptor')",
          "1858:         # Classes of descriptors (are *not* descriptors themselves):",
          "1859:         self.assertFalse(inspect.ismethoddescriptor(MethodDescriptor))",
          "1860:         self.assertFalse(inspect.ismethoddescriptor(MethodDescriptorSub))",
          "1861:         self.assertFalse(inspect.ismethoddescriptor(DataDescriptorSub))",
          "1863:     def test_builtin_descriptors(self):",
          "1864:         builtin_slot_wrapper = int.__add__  # This one is mentioned in docs.",
          "1865:         class Owner:",
          "1866:             def instance_method(self): pass",
          "1867:             @classmethod",
          "1868:             def class_method(cls): pass",
          "1869:             @staticmethod",
          "1870:             def static_method(): pass",
          "1871:             @property",
          "1872:             def a_property(self): pass",
          "1873:         class Slotermeyer:",
          "1874:             __slots__ = 'a_slot',",
          "1875:         def function():",
          "1876:             pass",
          "1877:         a_lambda = lambda: None",
          "1879:         # Example builtin method descriptors:",
          "1880:         self.assertTrue(",
          "1881:             inspect.ismethoddescriptor(builtin_slot_wrapper),",
          "1882:             'a builtin slot wrapper is a method descriptor')",
          "1883:         self.assertTrue(",
          "1884:             inspect.ismethoddescriptor(Owner.__dict__['class_method']),",
          "1885:             'a classmethod object is a method descriptor')",
          "1886:         self.assertTrue(",
          "1887:             inspect.ismethoddescriptor(Owner.__dict__['static_method']),",
          "1888:             'a staticmethod object is a method descriptor')",
          "1890:         # Example builtin data descriptors:",
          "1891:         self.assertFalse(",
          "1892:             inspect.ismethoddescriptor(Owner.__dict__['a_property']),",
          "1893:             'a property is not a method descriptor')",
          "1894:         self.assertFalse(",
          "1895:             inspect.ismethoddescriptor(Slotermeyer.__dict__['a_slot']),",
          "1896:             'a slot is not a method descriptor')",
          "1898:         # `types.MethodType`/`types.FunctionType` instances (they *are*",
          "1899:         # method descriptors, but `ismethoddescriptor()` explicitly",
          "1900:         # excludes them):",
          "1901:         self.assertFalse(inspect.ismethoddescriptor(Owner().instance_method))",
          "1902:         self.assertFalse(inspect.ismethoddescriptor(Owner().class_method))",
          "1903:         self.assertFalse(inspect.ismethoddescriptor(Owner().static_method))",
          "1904:         self.assertFalse(inspect.ismethoddescriptor(Owner.instance_method))",
          "1905:         self.assertFalse(inspect.ismethoddescriptor(Owner.class_method))",
          "1906:         self.assertFalse(inspect.ismethoddescriptor(Owner.static_method))",
          "1907:         self.assertFalse(inspect.ismethoddescriptor(function))",
          "1908:         self.assertFalse(inspect.ismethoddescriptor(a_lambda))",
          "1910:     def test_descriptor_being_a_class(self):",
          "1911:         class MethodDescriptorMeta(type):",
          "1912:             def __get__(self, *_): pass",
          "1913:         class ClassBeingMethodDescriptor(metaclass=MethodDescriptorMeta):",
          "1914:             pass",
          "1915:         # `ClassBeingMethodDescriptor` itself *is* a method descriptor,",
          "1916:         # but it is *also* a class, and `ismethoddescriptor()` explicitly",
          "1917:         # excludes classes.",
          "1918:         self.assertFalse(",
          "1919:             inspect.ismethoddescriptor(ClassBeingMethodDescriptor),",
          "1920:             'classes (instances of type) are explicitly excluded')",
          "1922:     def test_non_descriptors(self):",
          "1923:         class Test:",
          "1924:             pass",
          "1925:         self.assertFalse(inspect.ismethoddescriptor(Test()))",
          "1926:         self.assertFalse(inspect.ismethoddescriptor(Test))",
          "1927:         self.assertFalse(inspect.ismethoddescriptor([42]))",
          "1928:         self.assertFalse(inspect.ismethoddescriptor(42))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61e6b6ab4abc36fe82f42677e3212caf973da467",
      "candidate_info": {
        "commit_hash": "61e6b6ab4abc36fe82f42677e3212caf973da467",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/61e6b6ab4abc36fe82f42677e3212caf973da467",
        "files": [
          "Lib/test/test_ttk/test_widgets.py"
        ],
        "message": "[3.13] gh-120873: Add test for \"state\" option in ttk.Scale (GH-120874) (GH-120875)\n\nAlso refactor the \"state\" option tests for other ttk widgets.\n(cherry picked from commit 974a978631bfbfa6f617e927d5eaa82b06694ae5)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py": [
          "File: Lib/test/test_ttk/test_widgets.py -> Lib/test/test_ttk/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import sys",
          "7: from test.test_ttk_textonly import MockTclObj",
          "10: from test.test_tkinter.widget_tests import (add_standard_options,",
          "11:     AbstractWidgetTest, StandardOptionsTests, IntegerSizeTests, PixelSizeTests)",
          "",
          "[Removed Lines]",
          "8: from test.test_tkinter.support import (AbstractTkTest, tk_version, get_tk_patchlevel,",
          "9:                                   simulate_mouse_click, AbstractDefaultRootTest)",
          "",
          "[Added Lines]",
          "8: from test.test_tkinter.support import (",
          "9:     AbstractTkTest, requires_tk, tk_version, get_tk_patchlevel,",
          "10:     simulate_mouse_click, AbstractDefaultRootTest)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         self.checkParam(widget, 'padding', ('5p', '6p', '7p', '8p'))",
          "45:         self.checkParam(widget, 'padding', (), expected='')",
          "47:     def test_configure_style(self):",
          "48:         widget = self.create()",
          "49:         self.assertEqual(widget['style'], '')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     def test_configure_state(self):",
          "49:         widget = self.create()",
          "50:         self.checkParams(widget, 'state', 'active', 'disabled', 'readonly')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:         widget = self.create()",
          "184:         self.checkEnumParam(widget, 'compound', *values, allow_empty=True)",
          "190:     def test_configure_width(self):",
          "191:         widget = self.create()",
          "192:         self.checkParams(widget, 'width', 402, -402, 0)",
          "",
          "[Removed Lines]",
          "186:     def test_configure_state(self):",
          "187:         widget = self.create()",
          "188:         self.checkParams(widget, 'state', 'active', 'disabled', 'normal')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359:         self.checkParam(widget, 'show', '')",
          "360:         self.checkParam(widget, 'show', ' ')",
          "367:     def test_configure_validate(self):",
          "368:         widget = self.create()",
          "369:         self.checkEnumParam(widget, 'validate',",
          "",
          "[Removed Lines]",
          "362:     def test_configure_state(self):",
          "363:         widget = self.create()",
          "364:         self.checkParams(widget, 'state',",
          "365:                          'disabled', 'normal', 'readonly')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "803: class ScaleTest(AbstractWidgetTest, unittest.TestCase):",
          "804:     OPTIONS = (",
          "805:         'class', 'command', 'cursor', 'from', 'length',",
          "807:     )",
          "808:     _conv_pixels = False",
          "809:     default_orient = 'horizontal'",
          "",
          "[Removed Lines]",
          "806:         'orient', 'style', 'takefocus', 'to', 'value', 'variable',",
          "",
          "[Added Lines]",
          "802:         'orient', 'state', 'style', 'takefocus', 'to', 'value', 'variable',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "825:         widget = self.create()",
          "826:         self.checkPixelsParam(widget, 'length', 130, 131.2, 135.6, '5i')",
          "828:     def test_configure_to(self):",
          "829:         widget = self.create()",
          "830:         self.checkFloatParam(widget, 'to', 300, 14.9, 15.1, -10, conv=False)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "824:     test_configure_state = requires_tk(8, 6, 9)(StandardTtkOptionsTests.test_configure_state)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f561258efd944a1d6a0857ef1a0f171da989ed58",
      "candidate_info": {
        "commit_hash": "f561258efd944a1d6a0857ef1a0f171da989ed58",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f561258efd944a1d6a0857ef1a0f171da989ed58",
        "files": [
          "Lib/test/test_weakref.py"
        ],
        "message": "[3.13] gh-120065: Increase `collect_in_thread` period to 5 ms. (GH-120068) (#120110)\n\nThis matches the default GIL switch interval. It greatly speeds up the\nfree-threaded build: previously, it spent nearly all its time in\n`gc.collect()`.\n(cherry picked from commit 4bba1c9e6cfeaf69302b501a4306668613db4b28)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_weakref.py||Lib/test/test_weakref.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_weakref.py||Lib/test/test_weakref.py": [
          "File: Lib/test/test_weakref.py -> Lib/test/test_weakref.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: @contextlib.contextmanager",
          "86:     \"\"\"",
          "87:     Ensure GC collections happen in a different thread, at a high frequency.",
          "88:     \"\"\"",
          "",
          "[Removed Lines]",
          "85: def collect_in_thread(period=0.0001):",
          "",
          "[Added Lines]",
          "85: def collect_in_thread(period=0.005):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eafd633fac0c25ffdb98ffee31184eb3b4ca8b88",
      "candidate_info": {
        "commit_hash": "eafd633fac0c25ffdb98ffee31184eb3b4ca8b88",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/eafd633fac0c25ffdb98ffee31184eb3b4ca8b88",
        "files": [
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_unix_eventqueue.py"
        ],
        "message": "[3.13] gh-119205: Fix autocompletion bug in new repl (GH-119229) (#119407)\n\n(cherry picked from commit 506b1a3ff66a41c72d205c8e4cba574e439d8e76)\n\nCo-authored-by: Koudai Aono <koxudaxi@gmail.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_unix_eventqueue.py||Lib/test/test_pyrepl/test_unix_eventqueue.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from __future__ import annotations",
          "31: from dataclasses import dataclass, field",
          "33: import os",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import warnings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:             reader.more_lines = more_lines",
          "299:             reader.ps1 = reader.ps2 = ps1",
          "300:             reader.ps3 = reader.ps4 = ps2",
          "302:         finally:",
          "303:             reader.more_lines = saved",
          "304:             reader.paste_mode = False",
          "",
          "[Removed Lines]",
          "301:             return reader.readline(), reader.was_paste_mode_activated",
          "",
          "[Added Lines]",
          "302:             with warnings.catch_warnings(action=\"ignore\"):",
          "303:                 return reader.readline(), reader.was_paste_mode_activated",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import itertools",
          "2: import os",
          "3: import rlcompleter",
          "5: from unittest import TestCase",
          "8: from _pyrepl.console import Event",
          "9: from _pyrepl.readline import ReadlineAlikeReader, ReadlineConfig",
          "12: class TestCursorPosition(TestCase):",
          "",
          "[Removed Lines]",
          "4: import unittest",
          "7: from .support import FakeConsole, handle_all_events, handle_events_narrow_console, multiline_input, code_to_events",
          "",
          "[Added Lines]",
          "2: import io",
          "6: from unittest.mock import patch",
          "8: from .support import FakeConsole, handle_all_events, handle_events_narrow_console",
          "9: from .support import more_lines, multiline_input, code_to_events",
          "12: from _pyrepl.readline import multiline_input as readline_multiline_input",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:         output = multiline_input(reader, namespace)",
          "476:         self.assertEqual(output, \"os.\")",
          "479: class TestPasteEvent(TestCase):",
          "480:     def prepare_reader(self, events):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     @patch(\"_pyrepl.readline._ReadlineWrapper.get_reader\")",
          "482:     @patch(\"sys.stderr\", new_callable=io.StringIO)",
          "483:     def test_completion_with_warnings(self, mock_stderr, mock_get_reader):",
          "484:         class Dummy:",
          "485:             @property",
          "486:             def test_func(self):",
          "487:                 import warnings",
          "488:                 warnings.warn(\"warnings\\n\")",
          "489:                 return None",
          "491:         dummy = Dummy()",
          "492:         events = code_to_events(\"dummy.test_func.\\t\\n\\n\")",
          "493:         namespace = {\"dummy\": dummy}",
          "494:         reader = self.prepare_reader(events, namespace)",
          "495:         mock_get_reader.return_value = reader",
          "496:         output = readline_multiline_input(more_lines, \">>>\", \"...\")",
          "497:         self.assertEqual(output[0], \"dummy.test_func.__\")",
          "498:         self.assertEqual(mock_stderr.getvalue(), \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "633:         reader = self.prepare_reader(events)",
          "634:         output = multiline_input(reader)",
          "635:         self.assertEqual(output, input_code)",
          "",
          "[Removed Lines]",
          "638: if __name__ == \"__main__\":",
          "639:     unittest.main()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_unix_eventqueue.py||Lib/test/test_pyrepl/test_unix_eventqueue.py": [
          "File: Lib/test/test_pyrepl/test_unix_eventqueue.py -> Lib/test/test_pyrepl/test_unix_eventqueue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: @patch(\"_pyrepl.curses.tigetstr\", lambda x: b\"\")",
          "11:     def setUp(self):",
          "12:         self.file = tempfile.TemporaryFile()",
          "",
          "[Removed Lines]",
          "10: class TestUnivEventQueue(unittest.TestCase):",
          "",
          "[Added Lines]",
          "10: class TestUnixEventQueue(unittest.TestCase):",
          "",
          "---------------"
        ]
      }
    }
  ]
}