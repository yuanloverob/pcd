{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "91296146d5ac74fea2377b4af64def63171a7723",
      "candidate_info": {
        "commit_hash": "91296146d5ac74fea2377b4af64def63171a7723",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/91296146d5ac74fea2377b4af64def63171a7723",
        "files": [
          "Lib/test/libregrtest/results.py"
        ],
        "message": "[3.13] gh-119050: Add type hints to libregrtest/results.py (GH-119144) (#119156)\n\ngh-119050: Add type hints to libregrtest/results.py (GH-119144)\n\nSort also 'omitted' in TestResults.display_result().\n(cherry picked from commit 30b4e9f9c42493136c58c56fee5553128bb32428)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/test/libregrtest/results.py||Lib/test/libregrtest/results.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/libregrtest/results.py||Lib/test/libregrtest/results.py": [
          "File: Lib/test/libregrtest/results.py -> Lib/test/libregrtest/results.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: class TestResults:",
          "22:         self.bad: TestList = []",
          "23:         self.good: TestList = []",
          "24:         self.rerun_bad: TestList = []",
          "",
          "[Removed Lines]",
          "21:     def __init__(self):",
          "",
          "[Added Lines]",
          "21:     def __init__(self) -> None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         # used by -T with -j",
          "39:         self.covered_lines: set[Location] = set()",
          "42:         return (not self.bad",
          "43:                 and not self.skipped",
          "44:                 and not self.interrupted",
          "45:                 and not self.worker_bug)",
          "48:         return (set(self.good) | set(self.bad) | set(self.skipped)",
          "49:                 | set(self.resource_denied) | set(self.env_changed)",
          "50:                 | set(self.run_no_tests))",
          "53:         return not any((self.good, self.bad, self.skipped, self.interrupted,",
          "54:                         self.env_changed))",
          "57:         state = []",
          "58:         if self.bad:",
          "59:             state.append(\"FAILURE\")",
          "",
          "[Removed Lines]",
          "41:     def is_all_good(self):",
          "47:     def get_executed(self):",
          "52:     def no_tests_run(self):",
          "56:     def get_state(self, fail_env_changed):",
          "",
          "[Added Lines]",
          "41:     def is_all_good(self) -> bool:",
          "47:     def get_executed(self) -> set[TestName]:",
          "52:     def no_tests_run(self) -> bool:",
          "56:     def get_state(self, fail_env_changed: bool) -> str:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:         omitted = set(tests) - self.get_executed()",
          "206:         # less important",
          "208:         if not quiet:",
          "209:             all_tests.append((self.skipped, \"test\", \"{} skipped:\"))",
          "210:             all_tests.append((self.resource_denied, \"test\", \"{} skipped (resource denied):\"))",
          "",
          "[Removed Lines]",
          "207:         all_tests.append((omitted, \"test\", \"{} omitted:\"))",
          "",
          "[Added Lines]",
          "207:         all_tests.append((sorted(omitted), \"test\", \"{} omitted:\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acffe20683042e8567eae3bf014d36c0edf9b710",
      "candidate_info": {
        "commit_hash": "acffe20683042e8567eae3bf014d36c0edf9b710",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/acffe20683042e8567eae3bf014d36c0edf9b710",
        "files": [
          "Misc/NEWS.d/next/Build/2024-05-11-15-11-30.gh-issue-118943.VI_MnY.rst",
          "Tools/jit/_targets.py"
        ],
        "message": "[3.13] GH-118943: Fix a race condition when generating jit_stencils.h (GH-119101)\n\n(cherry picked from commit 4702b7b5bdc07d046576b4126cf4e4f5f7145abb)",
        "before_after_code_files": [
          "Tools/jit/_targets.py||Tools/jit/_targets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tools/jit/_targets.py||Tools/jit/_targets.py": [
          "File: Tools/jit/_targets.py -> Tools/jit/_targets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:         ):",
          "213:             return",
          "214:         stencil_groups = asyncio.run(self._build_stencils())",
          "224: class _COFF(",
          "",
          "[Removed Lines]",
          "215:         with jit_stencils.open(\"w\") as file:",
          "216:             file.write(digest)",
          "217:             if comment:",
          "218:                 file.write(f\"// {comment}\\n\\n\")",
          "219:             file.write(\"\")",
          "220:             for line in _writer.dump(stencil_groups):",
          "221:                 file.write(f\"{line}\\n\")",
          "",
          "[Added Lines]",
          "215:         jit_stencils_new = out / \"jit_stencils.h.new\"",
          "216:         try:",
          "217:             with jit_stencils_new.open(\"w\") as file:",
          "218:                 file.write(digest)",
          "219:                 if comment:",
          "220:                     file.write(f\"// {comment}\\n\")",
          "221:                 file.write(\"\\n\")",
          "222:                 for line in _writer.dump(stencil_groups):",
          "223:                     file.write(f\"{line}\\n\")",
          "224:             jit_stencils_new.replace(jit_stencils)",
          "225:         finally:",
          "226:             jit_stencils_new.unlink(missing_ok=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6394a72e99b342d980297ec437ecafea92a044c4",
      "candidate_info": {
        "commit_hash": "6394a72e99b342d980297ec437ecafea92a044c4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6394a72e99b342d980297ec437ecafea92a044c4",
        "files": [
          "Include/internal/pycore_symtable.h",
          "Lib/importlib/_bootstrap_external.py",
          "Lib/test/test_type_params.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-23-06-34-14.gh-issue-119395.z-Hsqb.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-23-06-34-45.gh-issue-119311.2DBwKR.rst",
          "Python/compile.c",
          "Python/symtable.c"
        ],
        "message": "[3.13] gh-119311: Fix name mangling with PEP 695 generic classes (#119464) (#119643)\n\nFixes #119311. Fixes #119395.\n\n(cherry picked from commit a9a74da4a0ca0645f049e67b6434a95e30592c32)",
        "before_after_code_files": [
          "Include/internal/pycore_symtable.h||Include/internal/pycore_symtable.h",
          "Lib/importlib/_bootstrap_external.py||Lib/importlib/_bootstrap_external.py",
          "Lib/test/test_type_params.py||Lib/test/test_type_params.py",
          "Python/compile.c||Python/compile.c",
          "Python/symtable.c||Python/symtable.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_symtable.h||Include/internal/pycore_symtable.h": [
          "File: Include/internal/pycore_symtable.h -> Include/internal/pycore_symtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: extern void _PySymtable_Free(struct symtable *);",
          "131: extern PyObject* _Py_Mangle(PyObject *p, PyObject *name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: extern PyObject *_Py_MaybeMangle(PyObject *privateobj, PySTEntryObject *ste, PyObject *name);",
          "",
          "---------------"
        ],
        "Lib/importlib/_bootstrap_external.py||Lib/importlib/_bootstrap_external.py": [
          "File: Lib/importlib/_bootstrap_external.py -> Lib/importlib/_bootstrap_external.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "472: #     Python 3.13a1 3568 (Change semantics of END_FOR)",
          "473: #     Python 3.13a5 3569 (Specialize CONTAINS_OP)",
          "474: #     Python 3.13a6 3570 (Add __firstlineno__ class attribute)",
          "476: #     Python 3.14 will start with 3600",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475: #     Python 3.13b1 3571 (Fix miscompilation of private names in generic classes)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488: # Whenever MAGIC_NUMBER is changed, the ranges in the magic_values array",
          "489: # in PC/launcher.c must also be updated.",
          "493: _RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c",
          "",
          "[Removed Lines]",
          "491: MAGIC_NUMBER = (3570).to_bytes(2, 'little') + b'\\r\\n'",
          "",
          "[Added Lines]",
          "492: MAGIC_NUMBER = (3571).to_bytes(2, 'little') + b'\\r\\n'",
          "",
          "---------------"
        ],
        "Lib/test/test_type_params.py||Lib/test/test_type_params.py": [
          "File: Lib/test/test_type_params.py -> Lib/test/test_type_params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:         self.assertEqual(Foo.Alias.__value__, (T, V))",
          "827: class TypeParamsComplexCallsTest(unittest.TestCase):",
          "828:     def test_defaults(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:     def test_no_leaky_mangling_in_module(self):",
          "827:         ns = run_code(\"\"\"",
          "828:             __before = \"before\"",
          "829:             class X[T]: pass",
          "830:             __after = \"after\"",
          "831:         \"\"\")",
          "832:         self.assertEqual(ns[\"__before\"], \"before\")",
          "833:         self.assertEqual(ns[\"__after\"], \"after\")",
          "835:     def test_no_leaky_mangling_in_function(self):",
          "836:         ns = run_code(\"\"\"",
          "837:             def f():",
          "838:                 class X[T]: pass",
          "839:                 _X_foo = 2",
          "840:                 __foo = 1",
          "841:                 assert locals()['__foo'] == 1",
          "842:                 return __foo",
          "843:         \"\"\")",
          "844:         self.assertEqual(ns[\"f\"](), 1)",
          "846:     def test_no_leaky_mangling_in_class(self):",
          "847:         ns = run_code(\"\"\"",
          "848:             class Outer:",
          "849:                 __before = \"before\"",
          "850:                 class Inner[T]:",
          "851:                     __x = \"inner\"",
          "852:                 __after = \"after\"",
          "853:         \"\"\")",
          "854:         Outer = ns[\"Outer\"]",
          "855:         self.assertEqual(Outer._Outer__before, \"before\")",
          "856:         self.assertEqual(Outer.Inner._Inner__x, \"inner\")",
          "857:         self.assertEqual(Outer._Outer__after, \"after\")",
          "859:     def test_no_mangling_in_bases(self):",
          "860:         ns = run_code(\"\"\"",
          "861:             class __Base:",
          "862:                 def __init_subclass__(self, **kwargs):",
          "863:                     self.kwargs = kwargs",
          "865:             class Derived[T](__Base, __kwarg=1):",
          "866:                 pass",
          "867:         \"\"\")",
          "868:         Derived = ns[\"Derived\"]",
          "869:         self.assertEqual(Derived.__bases__, (ns[\"__Base\"], Generic))",
          "870:         self.assertEqual(Derived.kwargs, {\"__kwarg\": 1})",
          "872:     def test_no_mangling_in_nested_scopes(self):",
          "873:         ns = run_code(\"\"\"",
          "874:             from test.test_type_params import make_base",
          "876:             class __X:",
          "877:                 pass",
          "879:             class Y[T: __X](",
          "880:                 make_base(lambda: __X),",
          "881:                 # doubly nested scope",
          "882:                 make_base(lambda: (lambda: __X)),",
          "883:                 # list comprehension",
          "884:                 make_base([__X for _ in (1,)]),",
          "885:                 # genexp",
          "886:                 make_base(__X for _ in (1,)),",
          "887:             ):",
          "888:                 pass",
          "889:         \"\"\")",
          "890:         Y = ns[\"Y\"]",
          "891:         T, = Y.__type_params__",
          "892:         self.assertIs(T.__bound__, ns[\"__X\"])",
          "893:         base0 = Y.__bases__[0]",
          "894:         self.assertIs(base0.__arg__(), ns[\"__X\"])",
          "895:         base1 = Y.__bases__[1]",
          "896:         self.assertIs(base1.__arg__()(), ns[\"__X\"])",
          "897:         base2 = Y.__bases__[2]",
          "898:         self.assertEqual(base2.__arg__, [ns[\"__X\"]])",
          "899:         base3 = Y.__bases__[3]",
          "900:         self.assertEqual(list(base3.__arg__), [ns[\"__X\"]])",
          "902:     def test_type_params_are_mangled(self):",
          "903:         ns = run_code(\"\"\"",
          "904:             from test.test_type_params import make_base",
          "906:             class Foo[__T, __U: __T](make_base(__T), make_base(lambda: __T)):",
          "907:                 param = __T",
          "908:         \"\"\")",
          "909:         Foo = ns[\"Foo\"]",
          "910:         T, U = Foo.__type_params__",
          "911:         self.assertEqual(T.__name__, \"__T\")",
          "912:         self.assertEqual(U.__name__, \"__U\")",
          "913:         self.assertIs(U.__bound__, T)",
          "914:         self.assertIs(Foo.param, T)",
          "916:         base1, base2, *_ = Foo.__bases__",
          "917:         self.assertIs(base1.__arg__, T)",
          "918:         self.assertIs(base2.__arg__(), T)",
          "",
          "---------------"
        ],
        "Python/compile.c||Python/compile.c": [
          "File: Python/compile.c -> Python/compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001: compiler_addop_name(struct compiler_unit *u, location loc,",
          "1002:                     int opcode, PyObject *dict, PyObject *o)",
          "1003: {",
          "1005:     if (!mangled) {",
          "1006:         return ERROR;",
          "1007:     }",
          "",
          "[Removed Lines]",
          "1004:     PyObject *mangled = _Py_Mangle(u->u_private, o);",
          "",
          "[Added Lines]",
          "1004:     PyObject *mangled = _Py_MaybeMangle(u->u_private, u->u_ste, o);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1873:         arg_ty arg = asdl_seq_GET(kwonlyargs, i);",
          "1874:         expr_ty default_ = asdl_seq_GET(kw_defaults, i);",
          "1875:         if (default_) {",
          "1877:             if (!mangled) {",
          "1878:                 goto error;",
          "1879:             }",
          "",
          "[Removed Lines]",
          "1876:             PyObject *mangled = _Py_Mangle(c->u->u_private, arg->arg);",
          "",
          "[Added Lines]",
          "1876:             PyObject *mangled = _Py_MaybeMangle(c->u->u_private, c->u->u_ste, arg->arg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1930:     if (!annotation) {",
          "1931:         return SUCCESS;",
          "1932:     }",
          "1934:     if (!mangled) {",
          "1935:         return ERROR;",
          "1936:     }",
          "",
          "[Removed Lines]",
          "1933:     PyObject *mangled = _Py_Mangle(c->u->u_private, id);",
          "",
          "[Added Lines]",
          "1933:     PyObject *mangled = _Py_MaybeMangle(c->u->u_private, c->u->u_ste, id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2625:     asdl_type_param_seq *type_params = s->v.ClassDef.type_params;",
          "2626:     int is_generic = asdl_seq_LEN(type_params) > 0;",
          "2627:     if (is_generic) {",
          "2629:         PyObject *type_params_name = PyUnicode_FromFormat(\"<generic parameters of %U>\",",
          "2630:                                                          s->v.ClassDef.name);",
          "2631:         if (!type_params_name) {",
          "",
          "[Removed Lines]",
          "2628:         Py_XSETREF(c->u->u_private, Py_NewRef(s->v.ClassDef.name));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2637:             return ERROR;",
          "2638:         }",
          "2639:         Py_DECREF(type_params_name);",
          "2640:         RETURN_IF_ERROR_IN_SCOPE(c, compiler_type_params(c, type_params));",
          "2641:         _Py_DECLARE_STR(type_params, \".type_params\");",
          "2642:         RETURN_IF_ERROR_IN_SCOPE(c, compiler_nameop(c, loc, &_Py_STR(type_params), Store));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2639:         Py_XSETREF(c->u->u_private, Py_NewRef(s->v.ClassDef.name));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4203:         return ERROR;",
          "4204:     }",
          "4207:     if (!mangled) {",
          "4208:         return ERROR;",
          "4209:     }",
          "",
          "[Removed Lines]",
          "4206:     mangled = _Py_Mangle(c->u->u_private, name);",
          "",
          "[Added Lines]",
          "4206:     mangled = _Py_MaybeMangle(c->u->u_private, c->u->u_ste, name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6512:                 VISIT(c, expr, s->v.AnnAssign.annotation);",
          "6513:             }",
          "6514:             ADDOP_NAME(c, loc, LOAD_NAME, &_Py_ID(__annotations__), names);",
          "6516:             ADDOP_LOAD_CONST_NEW(c, loc, mangled);",
          "6517:             ADDOP(c, loc, STORE_SUBSCR);",
          "6518:         }",
          "",
          "[Removed Lines]",
          "6515:             mangled = _Py_Mangle(c->u->u_private, targ->v.Name.id);",
          "",
          "[Added Lines]",
          "6515:             mangled = _Py_MaybeMangle(c->u->u_private, c->u->u_ste, targ->v.Name.id);",
          "",
          "---------------"
        ],
        "Python/symtable.c||Python/symtable.c": [
          "File: Python/symtable.c -> Python/symtable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     ste->ste_children = NULL;",
          "105:     ste->ste_directives = NULL;",
          "107:     ste->ste_type = block;",
          "108:     ste->ste_nested = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     ste->ste_mangled_names = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:     Py_XDECREF(ste->ste_varnames);",
          "167:     Py_XDECREF(ste->ste_children);",
          "168:     Py_XDECREF(ste->ste_directives);",
          "169:     PyObject_Free(ste);",
          "170: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     Py_XDECREF(ste->ste_mangled_names);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1338:     if (prev) {",
          "1339:         ste->ste_comp_iter_expr = prev->ste_comp_iter_expr;",
          "1340:     }",
          "1342:     Py_DECREF(ste);",
          "1343:     st->st_cur = ste;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1345:     if (prev && prev->ste_mangled_names != NULL && block != ClassBlock) {",
          "1346:         ste->ste_mangled_names = Py_NewRef(prev->ste_mangled_names);",
          "1347:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1363: static long",
          "1364: symtable_lookup_entry(struct symtable *st, PySTEntryObject *ste, PyObject *name)",
          "1365: {",
          "1367:     if (!mangled)",
          "1368:         return 0;",
          "1369:     long ret = _PyST_GetSymbol(ste, mangled);",
          "",
          "[Removed Lines]",
          "1366:     PyObject *mangled = _Py_Mangle(st->st_private, name);",
          "",
          "[Added Lines]",
          "1373:     PyObject *mangled = _Py_MaybeMangle(st->st_private, ste, name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1384:     PyObject *o;",
          "1385:     PyObject *dict;",
          "1386:     long val;",
          "1390:     if (!mangled)",
          "1391:         return 0;",
          "",
          "[Removed Lines]",
          "1387:     PyObject *mangled = _Py_Mangle(st->st_private, name);",
          "",
          "[Added Lines]",
          "1394:     PyObject *mangled = _Py_MaybeMangle(st->st_private, st->st_cur, name);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1474: symtable_add_def(struct symtable *st, PyObject *name, int flag,",
          "1475:                  int lineno, int col_offset, int end_lineno, int end_col_offset)",
          "1476: {",
          "1477:     return symtable_add_def_helper(st, name, flag, st->st_cur,",
          "1478:                         lineno, col_offset, end_lineno, end_col_offset);",
          "1479: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1483:     if ((flag & DEF_TYPE_PARAM) && st->st_cur->ste_mangled_names != NULL) {",
          "1484:         if(PySet_Add(st->st_cur->ste_mangled_names, name) < 0) {",
          "1485:             return 0;",
          "1486:         }",
          "1487:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1508:                               lineno, col_offset, end_lineno, end_col_offset)) {",
          "1509:             return 0;",
          "1510:         }",
          "1513:         _Py_DECLARE_STR(generic_base, \".generic_base\");",
          "1514:         if (!symtable_add_def(st, &_Py_STR(generic_base), DEF_LOCAL,",
          "",
          "[Removed Lines]",
          "1511:         st->st_private = name;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1597:         if (!st->st_cur->ste_directives)",
          "1598:             return 0;",
          "1599:     }",
          "1601:     if (!mangled)",
          "1602:         return 0;",
          "1603:     data = Py_BuildValue(\"(Niiii)\", mangled, lineno, col_offset, end_lineno, end_col_offset);",
          "",
          "[Removed Lines]",
          "1600:     mangled = _Py_Mangle(st->st_private, name);",
          "",
          "[Added Lines]",
          "1610:     mangled = _Py_MaybeMangle(st->st_private, st->st_cur, name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1673:             VISIT_QUIT(st, 0);",
          "1674:         if (s->v.ClassDef.decorator_list)",
          "1675:             VISIT_SEQ(st, expr, s->v.ClassDef.decorator_list);",
          "1676:         if (asdl_seq_LEN(s->v.ClassDef.type_params) > 0) {",
          "1677:             if (!symtable_enter_type_param_block(st, s->v.ClassDef.name,",
          "1678:                                                 (void *)s->v.ClassDef.type_params,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1686:         tmp = st->st_private;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1680:                                                 LOCATION(s))) {",
          "1681:                 VISIT_QUIT(st, 0);",
          "1682:             }",
          "1683:             VISIT_SEQ(st, type_param, s->v.ClassDef.type_params);",
          "1684:         }",
          "1685:         VISIT_SEQ(st, expr, s->v.ClassDef.bases);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1694:             st->st_private = s->v.ClassDef.name;",
          "1695:             st->st_cur->ste_mangled_names = PySet_New(NULL);",
          "1696:             if (!st->st_cur->ste_mangled_names) {",
          "1697:                 VISIT_QUIT(st, 0);",
          "1698:             }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1688:                                   (void *)s, s->lineno, s->col_offset,",
          "1689:                                   s->end_lineno, s->end_col_offset))",
          "1690:             VISIT_QUIT(st, 0);",
          "1692:         st->st_private = s->v.ClassDef.name;",
          "1693:         if (asdl_seq_LEN(s->v.ClassDef.type_params) > 0) {",
          "1694:             if (!symtable_add_def(st, &_Py_ID(__type_params__),",
          "",
          "[Removed Lines]",
          "1691:         tmp = st->st_private;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1702:             }",
          "1703:         }",
          "1704:         VISIT_SEQ(st, stmt, s->v.ClassDef.body);",
          "1706:         if (!symtable_exit_block(st))",
          "1707:             VISIT_QUIT(st, 0);",
          "1708:         if (asdl_seq_LEN(s->v.ClassDef.type_params) > 0) {",
          "1709:             if (!symtable_exit_block(st))",
          "1710:                 VISIT_QUIT(st, 0);",
          "1711:         }",
          "1712:         break;",
          "1713:     }",
          "1714:     case TypeAlias_kind: {",
          "",
          "[Removed Lines]",
          "1705:         st->st_private = tmp;",
          "",
          "[Added Lines]",
          "1726:         st->st_private = tmp;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2776:     return st;",
          "2777: }",
          "2779: PyObject *",
          "2780: _Py_Mangle(PyObject *privateobj, PyObject *ident)",
          "2781: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2794: PyObject *",
          "2795: _Py_MaybeMangle(PyObject *privateobj, PySTEntryObject *ste, PyObject *name)",
          "2796: {",
          "2802:     if (ste->ste_mangled_names != NULL) {",
          "2803:         int result = PySet_Contains(ste->ste_mangled_names, name);",
          "2804:         if (result < 0) {",
          "2805:             return NULL;",
          "2806:         }",
          "2807:         if (result == 0) {",
          "2808:             return Py_NewRef(name);",
          "2809:         }",
          "2810:     }",
          "2811:     return _Py_Mangle(privateobj, name);",
          "2812: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4462aaed6dd7640e2be9f88a03b9455a9b84e2b",
      "candidate_info": {
        "commit_hash": "b4462aaed6dd7640e2be9f88a03b9455a9b84e2b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b4462aaed6dd7640e2be9f88a03b9455a9b84e2b",
        "files": [
          "Doc/whatsnew/3.13.rst",
          "Lib/tkinter/__init__.py",
          "Misc/NEWS.d/3.13.0b1.rst",
          "Misc/NEWS.d/next/Library/2024-05-08-21-30-33.gh-issue-118760.XvyMHn.rst"
        ],
        "message": "[3.13] gh-118760: Restore the default value of tkinter.wantobjects to 1 (GH-118784) (GH-119251)\n\nIt was set to 2 in 65f5e586a1239ed1a66d8284773d7b02ce40e480 (GH-98592).\n(cherry picked from commit e188527c343c74574d481b77c30063db1436e62b)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/tkinter/__init__.py||Lib/tkinter/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tkinter/__init__.py||Lib/tkinter/__init__.py": [
          "File: Lib/tkinter/__init__.py -> Lib/tkinter/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: from tkinter.constants import *",
          "41: import re",
          "44: _debug = False  # set to True to print executed Tcl/Tk commands",
          "46: TkVersion = float(_tkinter.TK_VERSION)",
          "",
          "[Removed Lines]",
          "43: wantobjects = 2",
          "",
          "[Added Lines]",
          "43: wantobjects = 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa39ba0af33dce8736a4973be48929d02fb5261e",
      "candidate_info": {
        "commit_hash": "aa39ba0af33dce8736a4973be48929d02fb5261e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/aa39ba0af33dce8736a4973be48929d02fb5261e",
        "files": [
          "Lib/calendar.py"
        ],
        "message": "[3.13] gh-120567: Clarify weekday return in calendar.monthrange docstring (GH-120570) (#120597)\n\ngh-120567: Clarify weekday return in calendar.monthrange docstring (GH-120570)\n(cherry picked from commit bd4516d9efee109dd3b02a3d60845f9053fc6718)\n\nCo-authored-by: Terry Jan Reedy <tjreedy@udel.edu>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/calendar.py||Lib/calendar.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/calendar.py||Lib/calendar.py": [
          "File: Lib/calendar.py -> Lib/calendar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "161: def monthrange(year, month):",
          "164:     if not 1 <= month <= 12:",
          "165:         raise IllegalMonthError(month)",
          "166:     day1 = weekday(year, month, 1)",
          "",
          "[Removed Lines]",
          "162:     \"\"\"Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for",
          "163:        year, month.\"\"\"",
          "",
          "[Added Lines]",
          "162:     \"\"\"Return weekday of first day of month (0-6 ~ Mon-Sun)",
          "163:        and number of days (28-31) for year, month.\"\"\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}