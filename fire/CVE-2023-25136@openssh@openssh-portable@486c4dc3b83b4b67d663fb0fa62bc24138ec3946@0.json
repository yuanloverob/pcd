{
  "cve_id": "CVE-2023-25136",
  "cve_desc": "OpenSSH server (sshd) 9.1 introduced a double-free vulnerability during options.kex_algorithms handling. This is fixed in OpenSSH 9.2. The double free can be leveraged, by an unauthenticated remote attacker in the default configuration, to jump to any location in the sshd address space. One third-party report states \"remote code execution is theoretically possible.\"",
  "repo": "openssh/openssh-portable",
  "patch_hash": "486c4dc3b83b4b67d663fb0fa62bc24138ec3946",
  "patch_info": {
    "commit_hash": "486c4dc3b83b4b67d663fb0fa62bc24138ec3946",
    "repo": "openssh/openssh-portable",
    "commit_url": "https://github.com/openssh/openssh-portable/commit/486c4dc3b83b4b67d663fb0fa62bc24138ec3946",
    "files": [
      "compat.c"
    ],
    "message": "upstream: Always return allocated strings from the kex filtering so\n\nthat we can free them later.  Fix one leak in compat_kex_proposal.  Based on\ngithub PR#324 from ZoltanFridrich with some simplications by me. ok djm@\n\nOpenBSD-Commit-ID: 9171616da3307612d0ede086fd511142f91246e4",
    "before_after_code_files": [
      "compat.c||compat.c"
    ]
  },
  "patch_diff": {
    "compat.c||compat.c": [
      "File: compat.c -> compat.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "156:  debug_f(\"no match: %s\", version);",
      "157: }",
      "159: char *",
      "160: compat_cipher_proposal(struct ssh *ssh, char *cipher_prop)",
      "161: {",
      "162:  if (!(ssh->compat & SSH_BUG_BIGENDIANAES))",
      "164:  debug2_f(\"original cipher proposal: %s\", cipher_prop);",
      "165:  if ((cipher_prop = match_filter_denylist(cipher_prop, \"aes*\")) == NULL)",
      "166:   fatal(\"match_filter_denylist failed\");",
      "",
      "[Removed Lines]",
      "163:   return cipher_prop;",
      "",
      "[Added Lines]",
      "164:   return xstrdup(cipher_prop);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:  return cipher_prop;",
      "171: }",
      "173: char *",
      "174: compat_pkalg_proposal(struct ssh *ssh, char *pkalg_prop)",
      "175: {",
      "176:  if (!(ssh->compat & SSH_BUG_RSASIGMD5))",
      "178:  debug2_f(\"original public key proposal: %s\", pkalg_prop);",
      "179:  if ((pkalg_prop = match_filter_denylist(pkalg_prop, \"ssh-rsa\")) == NULL)",
      "180:   fatal(\"match_filter_denylist failed\");",
      "",
      "[Removed Lines]",
      "177:   return pkalg_prop;",
      "",
      "[Added Lines]",
      "179:   return xstrdup(pkalg_prop);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "184:  return pkalg_prop;",
      "185: }",
      "187: char *",
      "188: compat_kex_proposal(struct ssh *ssh, char *p)",
      "189: {",
      "190:  if ((ssh->compat & (SSH_BUG_CURVE25519PAD|SSH_OLD_DHGEX)) == 0)",
      "192:  debug2_f(\"original KEX proposal: %s\", p);",
      "193:  if ((ssh->compat & SSH_BUG_CURVE25519PAD) != 0)",
      "194:   if ((p = match_filter_denylist(p,",
      "195:       \"curve25519-sha256@libssh.org\")) == NULL)",
      "196:    fatal(\"match_filter_denylist failed\");",
      "197:  if ((ssh->compat & SSH_OLD_DHGEX) != 0) {",
      "198:   if ((p = match_filter_denylist(p,",
      "199:       \"diffie-hellman-group-exchange-sha256,\"",
      "200:       \"diffie-hellman-group-exchange-sha1\")) == NULL)",
      "201:    fatal(\"match_filter_denylist failed\");",
      "202:  }",
      "203:  debug2_f(\"compat KEX proposal: %s\", p);",
      "204:  if (*p == '\\0')",
      "",
      "[Removed Lines]",
      "191:   return p;",
      "",
      "[Added Lines]",
      "193:  char *cp = NULL;",
      "196:   return xstrdup(p);",
      "203:   cp = p;",
      "208:   free(cp);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c31ba10e97b6953c4f325f526f3e846dfea647a",
      "candidate_info": {
        "commit_hash": "6c31ba10e97b6953c4f325f526f3e846dfea647a",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/6c31ba10e97b6953c4f325f526f3e846dfea647a",
        "files": [
          "sshconnect2.c",
          "sshd.c"
        ],
        "message": "upstream: Don't leak the strings allocated by order_hostkeyalgs()\n\nand list_hostkey_types() that are passed to compat_pkalg_proposal(). Part of\ngithub PR#324 from ZoltanFridrich, ok djm@\n\nThis is a roll-forward of the previous rollback now that the required\nchanges in compat.c have been done.\n\nOpenBSD-Commit-ID: c7cd93730b3b9f53cdad3ae32462922834ef73eb",
        "before_after_code_files": [
          "sshconnect2.c||sshconnect2.c",
          "sshd.c||sshd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sshconnect2.c||sshconnect2.c": [
          "File: sshconnect2.c -> sshconnect2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: {",
          "219:  char *myproposal[PROPOSAL_MAX] = { KEX_CLIENT };",
          "220:  char *s, *all_key;",
          "221:  int r, use_known_hosts_order = 0;",
          "223:  xxx_host = host;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:  char *prop_kex = NULL, *prop_enc = NULL, *prop_hostkey = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:  if ((s = kex_names_cat(options.kex_algorithms, \"ext-info-c\")) == NULL)",
          "245:   fatal_f(\"kex_names_cat\");",
          "247:  myproposal[PROPOSAL_ENC_ALGS_CTOS] =",
          "250:      compat_cipher_proposal(ssh, options.ciphers);",
          "251:  myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "252:      myproposal[PROPOSAL_COMP_ALGS_STOC] =",
          "",
          "[Removed Lines]",
          "246:  myproposal[PROPOSAL_KEX_ALGS] = compat_kex_proposal(ssh, s);",
          "248:      compat_cipher_proposal(ssh, options.ciphers);",
          "249:  myproposal[PROPOSAL_ENC_ALGS_STOC] =",
          "",
          "[Added Lines]",
          "247:  myproposal[PROPOSAL_KEX_ALGS] = prop_kex = compat_kex_proposal(ssh, s);",
          "249:      myproposal[PROPOSAL_ENC_ALGS_STOC] = prop_enc =",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:      myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;",
          "256:  if (use_known_hosts_order) {",
          "259:       compat_pkalg_proposal(ssh,",
          "260:       order_hostkeyalgs(host, hostaddr, port, cinfo));",
          "261:  } else {",
          "264:       compat_pkalg_proposal(ssh, options.hostkeyalgorithms);",
          "265:  }",
          "",
          "[Removed Lines]",
          "258:   myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] =",
          "263:   myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] =",
          "",
          "[Added Lines]",
          "258:   myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = prop_hostkey =",
          "263:   myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = prop_hostkey =",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:      (r = ssh_packet_write_wait(ssh)) != 0)",
          "304:   fatal_fr(r, \"send packet\");",
          "305: #endif",
          "306: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:  free(prop_kex);",
          "308:  free(prop_enc);",
          "309:  free(prop_hostkey);",
          "",
          "---------------"
        ],
        "sshd.c||sshd.c": [
          "File: sshd.c -> sshd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2368: {",
          "2369:  char *myproposal[PROPOSAL_MAX] = { KEX_SERVER };",
          "2370:  struct kex *kex;",
          "2371:  int r;",
          "2374:      options.kex_algorithms);",
          "2377:  myproposal[PROPOSAL_ENC_ALGS_STOC] = compat_cipher_proposal(ssh,",
          "2378:      options.ciphers);",
          "2379:  myproposal[PROPOSAL_MAC_ALGS_CTOS] =",
          "",
          "[Removed Lines]",
          "2373:  myproposal[PROPOSAL_KEX_ALGS] = compat_kex_proposal(ssh,",
          "2375:  myproposal[PROPOSAL_ENC_ALGS_CTOS] = compat_cipher_proposal(ssh,",
          "2376:      options.ciphers);",
          "",
          "[Added Lines]",
          "2371:  char *prop_kex = NULL, *prop_enc = NULL, *prop_hostkey = NULL;",
          "2374:  myproposal[PROPOSAL_KEX_ALGS] = prop_kex = compat_kex_proposal(ssh,",
          "2376:  myproposal[PROPOSAL_ENC_ALGS_CTOS] =",
          "2377:      myproposal[PROPOSAL_ENC_ALGS_STOC] = prop_enc =",
          "2378:      compat_cipher_proposal(ssh, options.ciphers);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2388:   ssh_packet_set_rekey_limits(ssh, options.rekey_limit,",
          "2389:       options.rekey_interval);",
          "2395:  if ((r = kex_setup(ssh, myproposal)) != 0)",
          "",
          "[Removed Lines]",
          "2391:  myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal(",
          "2392:      ssh, list_hostkey_types());",
          "",
          "[Added Lines]",
          "2393:  myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = prop_hostkey =",
          "2394:     compat_pkalg_proposal(ssh, list_hostkey_types());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2424:      (r = ssh_packet_write_wait(ssh)) != 0)",
          "2425:   fatal_fr(r, \"send test\");",
          "2426: #endif",
          "2427:  debug(\"KEX done\");",
          "2428: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2429:  free(prop_kex);",
          "2430:  free(prop_enc);",
          "2431:  free(prop_hostkey);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12da7823336434a403f25c7cc0c2c6aed0737a35",
      "candidate_info": {
        "commit_hash": "12da7823336434a403f25c7cc0c2c6aed0737a35",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/12da7823336434a403f25c7cc0c2c6aed0737a35",
        "files": [
          "compat.c"
        ],
        "message": "upstream: fix double-free caused by compat_kex_proposal(); bz3522\n\nby dtucker@, ok me\n\nOpenBSD-Commit-ID: 2bfc37cd2d41f67dad64c17a64cf2cd3806a5c80",
        "before_after_code_files": [
          "compat.c||compat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "compat.c||compat.c"
          ],
          "candidate": [
            "compat.c||compat.c"
          ]
        }
      },
      "candidate_diff": {
        "compat.c||compat.c": [
          "File: compat.c -> compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: char *",
          "191: compat_kex_proposal(struct ssh *ssh, char *p)",
          "192: {",
          "195:  if ((ssh->compat & (SSH_BUG_CURVE25519PAD|SSH_OLD_DHGEX)) == 0)",
          "196:   return xstrdup(p);",
          "197:  debug2_f(\"original KEX proposal: %s\", p);",
          "198:  if ((ssh->compat & SSH_BUG_CURVE25519PAD) != 0)",
          "200:       \"curve25519-sha256@libssh.org\")) == NULL)",
          "201:    fatal(\"match_filter_denylist failed\");",
          "202:  if ((ssh->compat & SSH_OLD_DHGEX) != 0) {",
          "205:       \"diffie-hellman-group-exchange-sha256,\"",
          "206:       \"diffie-hellman-group-exchange-sha1\")) == NULL)",
          "207:    fatal(\"match_filter_denylist failed\");",
          "208:   free(cp);",
          "209:  }",
          "212:   fatal(\"No supported key exchange algorithms found\");",
          "214: }",
          "",
          "[Removed Lines]",
          "193:  char *cp = NULL;",
          "199:   if ((p = match_filter_denylist(p,",
          "203:   cp = p;",
          "204:   if ((p = match_filter_denylist(p,",
          "210:  debug2_f(\"compat KEX proposal: %s\", p);",
          "211:  if (*p == '\\0')",
          "213:  return p;",
          "",
          "[Added Lines]",
          "193:  char *cp = NULL, *cp2 = NULL;",
          "199:   if ((cp = match_filter_denylist(p,",
          "203:   if ((cp2 = match_filter_denylist(cp ? cp : p,",
          "208:   cp = cp2;",
          "210:  if (cp == NULL || *cp == '\\0')",
          "212:  debug2_f(\"compat KEX proposal: %s\", cp);",
          "213:  return cp;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9641753e0fd146204d57b2a4165f552a81afade4",
      "candidate_info": {
        "commit_hash": "9641753e0fd146204d57b2a4165f552a81afade4",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/9641753e0fd146204d57b2a4165f552a81afade4",
        "files": [
          "compat.c",
          "compat.h",
          "kex.c",
          "kex.h",
          "sshconnect2.c",
          "sshd.c"
        ],
        "message": "upstream: Refactor creation of KEX proposal.\n\nThis adds kex_proposal_populate_entries (and corresponding free) which\npopulates the KEX proposal array with dynamically allocated strings.\nThis replaces the previous mix of static and dynamic that has been the\nsource of previous leaks and bugs.  Remove unused compat functions.\nWith & ok djm@.\n\nOpenBSD-Commit-ID: f2f99da4aae2233cb18bf9c749320c5e040a9c7b",
        "before_after_code_files": [
          "compat.c||compat.c",
          "compat.h||compat.h",
          "kex.c||kex.c",
          "kex.h||kex.h",
          "sshconnect2.c||sshconnect2.c",
          "sshd.c||sshd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "compat.c||compat.c"
          ],
          "candidate": [
            "compat.c||compat.c"
          ]
        }
      },
      "candidate_diff": {
        "compat.c||compat.c": [
          "File: compat.c -> compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"compat.h\"",
          "37: #include \"log.h\"",
          "38: #include \"match.h\"",
          "42: void",
          "",
          "[Removed Lines]",
          "39: #include \"kex.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: char *",
          "158: {",
          "159:  char *cp = NULL, *cp2 = NULL;",
          "",
          "[Removed Lines]",
          "143: compat_cipher_proposal(struct ssh *ssh, char *cipher_prop)",
          "144: {",
          "145:  return xstrdup(cipher_prop);",
          "146: }",
          "149: char *",
          "150: compat_pkalg_proposal(struct ssh *ssh, char *pkalg_prop)",
          "151: {",
          "152:  return xstrdup(pkalg_prop);",
          "153: }",
          "156: char *",
          "157: compat_kex_proposal(struct ssh *ssh, char *p)",
          "",
          "[Added Lines]",
          "142: compat_kex_proposal(struct ssh *ssh, const char *p)",
          "",
          "---------------"
        ],
        "compat.h||compat.h": [
          "File: compat.h -> compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: struct ssh;",
          "63: void    compat_banner(struct ssh *, const char *);",
          "67: #endif",
          "",
          "[Removed Lines]",
          "64: char *compat_cipher_proposal(struct ssh *, char *);",
          "65: char *compat_pkalg_proposal(struct ssh *, char *);",
          "66: char *compat_kex_proposal(struct ssh *, char *);",
          "",
          "[Added Lines]",
          "64: char *compat_kex_proposal(struct ssh *, const char *);",
          "",
          "---------------"
        ],
        "kex.c||kex.c": [
          "File: kex.c -> kex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #include \"misc.h\"",
          "58: #include \"dispatch.h\"",
          "59: #include \"monitor.h\"",
          "61: #include \"ssherr.h\"",
          "62: #include \"sshbuf.h\"",
          "63: #include \"digest.h\"",
          "66: static int kex_choose_conf(struct ssh *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include \"myproposal.h\"",
          "65: #include \"xmalloc.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:  return r;",
          "318: }",
          "321: int",
          "322: kex_prop2buf(struct sshbuf *b, char *proposal[PROPOSAL_MAX])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328: void",
          "329: kex_proposal_populate_entries(struct ssh *ssh, char *prop[PROPOSAL_MAX],",
          "330:     const char *kexalgos, const char *ciphers, const char *macs,",
          "331:     const char *comp, const char *hkalgs)",
          "332: {",
          "333:  const char *defpropserver[PROPOSAL_MAX] = { KEX_SERVER };",
          "334:  const char *defpropclient[PROPOSAL_MAX] = { KEX_CLIENT };",
          "335:  const char **defprop = ssh->kex->server ? defpropserver : defpropclient;",
          "336:  u_int i;",
          "338:  if (prop == NULL)",
          "339:   fatal_f(\"proposal missing\");",
          "341:  for (i = 0; i < PROPOSAL_MAX; i++) {",
          "342:   switch(i) {",
          "343:   case PROPOSAL_KEX_ALGS:",
          "344:    prop[i] = compat_kex_proposal(ssh,",
          "345:        kexalgos ? kexalgos : defprop[i]);",
          "346:    break;",
          "347:   case PROPOSAL_ENC_ALGS_CTOS:",
          "348:   case PROPOSAL_ENC_ALGS_STOC:",
          "349:    prop[i] = xstrdup(ciphers ? ciphers : defprop[i]);",
          "350:    break;",
          "351:   case PROPOSAL_MAC_ALGS_CTOS:",
          "352:   case PROPOSAL_MAC_ALGS_STOC:",
          "353:    prop[i]  = xstrdup(macs ? macs : defprop[i]);",
          "354:    break;",
          "355:   case PROPOSAL_COMP_ALGS_CTOS:",
          "356:   case PROPOSAL_COMP_ALGS_STOC:",
          "357:    prop[i] = xstrdup(comp ? comp : defprop[i]);",
          "358:    break;",
          "359:   case PROPOSAL_SERVER_HOST_KEY_ALGS:",
          "360:    prop[i] = xstrdup(hkalgs ? hkalgs : defprop[i]);",
          "361:    break;",
          "362:   default:",
          "363:    prop[i] = xstrdup(defprop[i]);",
          "364:   }",
          "365:  }",
          "366: }",
          "368: void",
          "369: kex_proposal_free_entries(char *prop[PROPOSAL_MAX])",
          "370: {",
          "371:  u_int i;",
          "373:  for (i = 0; i < PROPOSAL_MAX; i++)",
          "374:   free(prop[i]);",
          "375: }",
          "",
          "---------------"
        ],
        "kex.h||kex.h": [
          "File: kex.h -> kex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: char *kex_alg_list(char);",
          "183: char *kex_names_cat(const char *, const char *);",
          "184: int  kex_assemble_names(char **, const char *, const char *);",
          "186: int  kex_exchange_identification(struct ssh *, int, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: void  kex_proposal_populate_entries(struct ssh *, char *prop[PROPOSAL_MAX],",
          "186:     const char *, const char *, const char *, const char *, const char *);",
          "187: void  kex_proposal_free_entries(char *prop[PROPOSAL_MAX]);",
          "",
          "---------------"
        ],
        "sshconnect2.c||sshconnect2.c": [
          "File: sshconnect2.c -> sshconnect2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #include \"cipher.h\"",
          "57: #include \"sshkey.h\"",
          "58: #include \"kex.h\"",
          "60: #include \"sshconnect.h\"",
          "61: #include \"authfile.h\"",
          "62: #include \"dh.h\"",
          "",
          "[Removed Lines]",
          "59: #include \"myproposal.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: ssh_kex2(struct ssh *ssh, char *host, struct sockaddr *hostaddr, u_short port,",
          "222:     const struct ssh_conn_info *cinfo)",
          "223: {",
          "229:  xxx_host = host;",
          "230:  xxx_hostaddr = hostaddr;",
          "231:  xxx_conn_info = cinfo;",
          "244:  all_key = sshkey_alg_list(0, 0, 1, ',');",
          "",
          "[Removed Lines]",
          "224:  char *myproposal[PROPOSAL_MAX] = { KEX_CLIENT };",
          "225:  char *s, *all_key;",
          "226:  char *prop_kex = NULL, *prop_enc = NULL, *prop_hostkey = NULL;",
          "227:  int r, use_known_hosts_order = 0;",
          "238:  if (options.hostkeyalgorithms == NULL ||",
          "239:      options.hostkeyalgorithms[0] == '-' ||",
          "240:      options.hostkeyalgorithms[0] == '+')",
          "241:   use_known_hosts_order = 1;",
          "",
          "[Added Lines]",
          "223:  char *myproposal[PROPOSAL_MAX];",
          "224:  char *s, *all_key, *hkalgs = NULL;",
          "225:  int r;",
          "231:  if (options.rekey_limit || options.rekey_interval)",
          "232:   ssh_packet_set_rekey_limits(ssh, options.rekey_limit,",
          "233:       options.rekey_interval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:  if ((s = kex_names_cat(options.kex_algorithms, \"ext-info-c\")) == NULL)",
          "251:   fatal_f(\"kex_names_cat\");",
          "277:  if ((r = kex_setup(ssh, myproposal)) != 0)",
          "",
          "[Removed Lines]",
          "252:  myproposal[PROPOSAL_KEX_ALGS] = prop_kex = compat_kex_proposal(ssh, s);",
          "253:  myproposal[PROPOSAL_ENC_ALGS_CTOS] =",
          "254:      myproposal[PROPOSAL_ENC_ALGS_STOC] = prop_enc =",
          "255:      compat_cipher_proposal(ssh, options.ciphers);",
          "256:  myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "257:      myproposal[PROPOSAL_COMP_ALGS_STOC] =",
          "258:      (char *)compression_alg_list(options.compression);",
          "259:  myproposal[PROPOSAL_MAC_ALGS_CTOS] =",
          "260:      myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;",
          "261:  if (use_known_hosts_order) {",
          "263:   myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = prop_hostkey =",
          "264:       compat_pkalg_proposal(ssh,",
          "265:       order_hostkeyalgs(host, hostaddr, port, cinfo));",
          "266:  } else {",
          "268:   myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = prop_hostkey =",
          "269:       compat_pkalg_proposal(ssh, options.hostkeyalgorithms);",
          "270:  }",
          "272:  if (options.rekey_limit || options.rekey_interval)",
          "273:   ssh_packet_set_rekey_limits(ssh, options.rekey_limit,",
          "274:       options.rekey_interval);",
          "",
          "[Added Lines]",
          "250:  if (options.hostkeyalgorithms == NULL ||",
          "251:      options.hostkeyalgorithms[0] == '-' ||",
          "252:      options.hostkeyalgorithms[0] == '+')",
          "253:   hkalgs = order_hostkeyalgs(host, hostaddr, port, cinfo);",
          "255:  kex_proposal_populate_entries(ssh, myproposal, s, options.ciphers,",
          "256:      options.macs, compression_alg_list(options.compression),",
          "257:      hkalgs ? hkalgs : options.hostkeyalgorithms);",
          "259:  free(hkalgs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295:  ssh_dispatch_run_fatal(ssh, DISPATCH_BLOCK, &ssh->kex->done);",
          "298:  myproposal[PROPOSAL_KEX_ALGS] =",
          "299:      compat_kex_proposal(ssh, options.kex_algorithms);",
          "300:  if ((r = kex_prop2buf(ssh->kex->my, myproposal)) != 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:  free(myproposal[PROPOSAL_KEX_ALGS]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "308:      (r = ssh_packet_write_wait(ssh)) != 0)",
          "309:   fatal_fr(r, \"send packet\");",
          "310: #endif",
          "315: }",
          "",
          "[Removed Lines]",
          "312:  free(prop_kex);",
          "313:  free(prop_enc);",
          "314:  free(prop_hostkey);",
          "",
          "[Added Lines]",
          "297:  kex_proposal_free_entries(myproposal);",
          "",
          "---------------"
        ],
        "sshd.c||sshd.c": [
          "File: sshd.c -> sshd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: #include \"digest.h\"",
          "105: #include \"sshkey.h\"",
          "106: #include \"kex.h\"",
          "108: #include \"authfile.h\"",
          "109: #include \"pathnames.h\"",
          "110: #include \"atomicio.h\"",
          "",
          "[Removed Lines]",
          "107: #include \"myproposal.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2389: static void",
          "2390: do_ssh2_kex(struct ssh *ssh)",
          "2391: {",
          "2393:  struct kex *kex;",
          "2395:  int r;",
          "2410:  if (options.rekey_limit || options.rekey_interval)",
          "2411:   ssh_packet_set_rekey_limits(ssh, options.rekey_limit,",
          "2412:       options.rekey_interval);",
          "2418:  if ((r = kex_setup(ssh, myproposal)) != 0)",
          "",
          "[Removed Lines]",
          "2392:  char *myproposal[PROPOSAL_MAX] = { KEX_SERVER };",
          "2394:  char *prop_kex = NULL, *prop_enc = NULL, *prop_hostkey = NULL;",
          "2397:  myproposal[PROPOSAL_KEX_ALGS] = prop_kex = compat_kex_proposal(ssh,",
          "2398:      options.kex_algorithms);",
          "2399:  myproposal[PROPOSAL_ENC_ALGS_CTOS] =",
          "2400:      myproposal[PROPOSAL_ENC_ALGS_STOC] = prop_enc =",
          "2401:      compat_cipher_proposal(ssh, options.ciphers);",
          "2402:  myproposal[PROPOSAL_MAC_ALGS_CTOS] =",
          "2403:      myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;",
          "2405:  if (options.compression == COMP_NONE) {",
          "2406:   myproposal[PROPOSAL_COMP_ALGS_CTOS] =",
          "2407:       myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none\";",
          "2408:  }",
          "2414:  myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = prop_hostkey =",
          "2415:     compat_pkalg_proposal(ssh, list_hostkey_types());",
          "",
          "[Added Lines]",
          "2391:  char *hkalgs = NULL, *myproposal[PROPOSAL_MAX];",
          "2392:  const char *compression = NULL;",
          "2400:  if (options.compression == COMP_NONE)",
          "2401:   compression = \"none\";",
          "2402:  hkalgs = list_hostkey_types();",
          "2404:  kex_proposal_populate_entries(ssh, myproposal, options.kex_algorithms,",
          "2405:      options.ciphers, options.macs, compression, hkalgs);",
          "2407:  free(hkalgs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2447:      (r = ssh_packet_write_wait(ssh)) != 0)",
          "2448:   fatal_fr(r, \"send test\");",
          "2449: #endif",
          "2453:  debug(\"KEX done\");",
          "2454: }",
          "",
          "[Removed Lines]",
          "2450:  free(prop_kex);",
          "2451:  free(prop_enc);",
          "2452:  free(prop_hostkey);",
          "",
          "[Added Lines]",
          "2442:  kex_proposal_free_entries(myproposal);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0833ccf2c8b7ae08b296c06f17bd53e3ab94b0b0",
      "candidate_info": {
        "commit_hash": "0833ccf2c8b7ae08b296c06f17bd53e3ab94b0b0",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/0833ccf2c8b7ae08b296c06f17bd53e3ab94b0b0",
        "files": [
          "compat.c",
          "compat.h"
        ],
        "message": "upstream: Remove now-unused compat bit SSH_BUG_BIGENDIANAES. This\n\nwas previously set for OpenSSH 2.3 (released in 2000) but this check was\nremoved in OpenSSH 7.7 (2018).  ok djm@ deraadt@\n\nOpenBSD-Commit-ID: 326426ea328707fc9e83305291ab135c87f678af",
        "before_after_code_files": [
          "compat.c||compat.c",
          "compat.h||compat.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "compat.c||compat.c"
          ],
          "candidate": [
            "compat.c||compat.c"
          ]
        }
      },
      "candidate_diff": {
        "compat.c||compat.c": [
          "File: compat.c -> compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: char *",
          "143: compat_cipher_proposal(struct ssh *ssh, char *cipher_prop)",
          "144: {",
          "154: }",
          "",
          "[Removed Lines]",
          "145:  if (!(ssh->compat & SSH_BUG_BIGENDIANAES))",
          "146:   return xstrdup(cipher_prop);",
          "147:  debug2_f(\"original cipher proposal: %s\", cipher_prop);",
          "148:  if ((cipher_prop = match_filter_denylist(cipher_prop, \"aes*\")) == NULL)",
          "149:   fatal(\"match_filter_denylist failed\");",
          "150:  debug2_f(\"compat cipher proposal: %s\", cipher_prop);",
          "151:  if (*cipher_prop == '\\0')",
          "152:   fatal(\"No supported ciphers found\");",
          "153:  return cipher_prop;",
          "",
          "[Added Lines]",
          "145:  return xstrdup(cipher_prop);",
          "",
          "---------------"
        ],
        "compat.h||compat.h": [
          "File: compat.h -> compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define SSH_BUG_SCANNER  0x00000800",
          "43: #define SSH_BUG_RSASIGMD5 0x00002000",
          "44: #define SSH_OLD_DHGEX  0x00004000",
          "45: #define SSH_BUG_NOREKEY  0x00008000",
          "",
          "[Removed Lines]",
          "42: #define SSH_BUG_BIGENDIANAES 0x00001000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a7e3449908571af601a4c2d12ab140096442e47",
      "candidate_info": {
        "commit_hash": "2a7e3449908571af601a4c2d12ab140096442e47",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/2a7e3449908571af601a4c2d12ab140096442e47",
        "files": [
          "auth2-hostbased.c",
          "auth2-pubkey.c",
          "compat.c",
          "compat.h",
          "kex.c",
          "monitor.c",
          "sshconnect2.c"
        ],
        "message": "upstream: Remove now-unused compat bit SSH_BUG_RSASIGMD5. The code\n\nto set this was removed in OpenSSH 7.7 when support for SSH implementations\ndating back to before RFC standardization were removed.  \"burn it all\" djm@\n\nOpenBSD-Commit-ID: 6330935fbe23dd00be79891505e06d1ffdac7cda",
        "before_after_code_files": [
          "auth2-hostbased.c||auth2-hostbased.c",
          "auth2-pubkey.c||auth2-pubkey.c",
          "compat.c||compat.c",
          "compat.h||compat.h",
          "kex.c||kex.c",
          "monitor.c||monitor.c",
          "sshconnect2.c||sshconnect2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "compat.c||compat.c"
          ],
          "candidate": [
            "compat.c||compat.c"
          ]
        }
      },
      "candidate_diff": {
        "auth2-hostbased.c||auth2-hostbased.c": [
          "File: auth2-hostbased.c -> auth2-hostbased.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       \"(received %d, expected %d)\", key->type, pktype);",
          "102:   goto done;",
          "103:  }",
          "110:  if (match_pattern_list(pkalg, options.hostbased_accepted_algos, 0) != 1) {",
          "111:   logit_f(\"signature algorithm %s not in \"",
          "112:       \"HostbasedAcceptedAlgorithms\", pkalg);",
          "",
          "[Removed Lines]",
          "104:  if (sshkey_type_plain(key->type) == KEY_RSA &&",
          "105:      (ssh->compat & SSH_BUG_RSASIGMD5) != 0) {",
          "106:   error(\"Refusing RSA key because peer uses unsafe \"",
          "107:       \"signature format\");",
          "108:   goto done;",
          "109:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "auth2-pubkey.c||auth2-pubkey.c": [
          "File: auth2-pubkey.c -> auth2-pubkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:       \"(received %d, expected %d)\", key->type, pktype);",
          "154:   goto done;",
          "155:  }",
          "162:  if (auth2_key_already_used(authctxt, key)) {",
          "163:   logit(\"refusing previously-used %s key\", sshkey_type(key));",
          "164:   goto done;",
          "",
          "[Removed Lines]",
          "156:  if (sshkey_type_plain(key->type) == KEY_RSA &&",
          "157:      (ssh->compat & SSH_BUG_RSASIGMD5) != 0) {",
          "158:   logit(\"Refusing RSA key because client uses unsafe \"",
          "159:       \"signature scheme\");",
          "160:   goto done;",
          "161:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "compat.c||compat.c": [
          "File: compat.c -> compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: char *",
          "150: compat_pkalg_proposal(struct ssh *ssh, char *pkalg_prop)",
          "151: {",
          "161: }",
          "",
          "[Removed Lines]",
          "152:  if (!(ssh->compat & SSH_BUG_RSASIGMD5))",
          "153:   return xstrdup(pkalg_prop);",
          "154:  debug2_f(\"original public key proposal: %s\", pkalg_prop);",
          "155:  if ((pkalg_prop = match_filter_denylist(pkalg_prop, \"ssh-rsa\")) == NULL)",
          "156:   fatal(\"match_filter_denylist failed\");",
          "157:  debug2_f(\"compat public key proposal: %s\", pkalg_prop);",
          "158:  if (*pkalg_prop == '\\0')",
          "159:   fatal(\"No supported PK algorithms found\");",
          "160:  return pkalg_prop;",
          "",
          "[Added Lines]",
          "152:  return xstrdup(pkalg_prop);",
          "",
          "---------------"
        ],
        "compat.h||compat.h": [
          "File: compat.h -> compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #define SSH_BUG_SCANNER  0x00000800",
          "44: #define SSH_OLD_DHGEX  0x00004000",
          "45: #define SSH_BUG_NOREKEY  0x00008000",
          "",
          "[Removed Lines]",
          "43: #define SSH_BUG_RSASIGMD5 0x00002000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kex.c||kex.c": [
          "File: kex.c -> kex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1405:   goto out;",
          "1406:  }",
          "1412:  r = 0;",
          "1413:  out:",
          "",
          "[Removed Lines]",
          "1407:  if ((ssh->compat & SSH_BUG_RSASIGMD5) != 0) {",
          "1408:   logit(\"Remote version \\\"%.100s\\\" uses unsafe RSA signature \"",
          "1409:       \"scheme; disabling use of RSA keys\", remote_version);",
          "1410:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "monitor.c||monitor.c": [
          "File: monitor.c -> monitor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1161:   fatal_fr(r, \"parse\");",
          "1163:  if (key != NULL && authctxt->valid) {",
          "1169:   switch (type) {",
          "1170:   case MM_USERKEY:",
          "1171:    auth_method = \"publickey\";",
          "",
          "[Removed Lines]",
          "1165:   if (sshkey_type_plain(key->type) == KEY_RSA &&",
          "1166:       (ssh->compat & SSH_BUG_RSASIGMD5) != 0)",
          "1167:    fatal_f(\"passed a SSH_BUG_RSASIGMD5 key\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sshconnect2.c||sshconnect2.c": [
          "File: sshconnect2.c -> sshconnect2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1874:   id->tried = 0;",
          "1875: }",
          "1891: static int",
          "1892: userauth_pubkey(struct ssh *ssh)",
          "1893: {",
          "",
          "[Removed Lines]",
          "1877: static int",
          "1878: try_identity(struct ssh *ssh, Identity *id)",
          "1879: {",
          "1880:  if (!id->key)",
          "1881:   return (0);",
          "1882:  if (sshkey_type_plain(id->key->type) == KEY_RSA &&",
          "1883:      (ssh->compat & SSH_BUG_RSASIGMD5) != 0) {",
          "1884:   debug(\"Skipped %s key %s for RSA/MD5 server\",",
          "1885:       sshkey_type(id->key), id->filename);",
          "1886:   return (0);",
          "1887:  }",
          "1888:  return 1;",
          "1889: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1910:   if (id->key != NULL) {",
          "1912:     ident = format_identity(id);",
          "1913:     debug(\"Offering public key: %s\", ident);",
          "1914:     free(ident);",
          "",
          "[Removed Lines]",
          "1911:    if (try_identity(ssh, id)) {",
          "",
          "[Added Lines]",
          "1897:    if (id->key != NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1918:    debug(\"Trying private key: %s\", id->filename);",
          "1919:    id->key = load_identity_file(id);",
          "1920:    if (id->key != NULL) {",
          "1922:      id->isprivate = 1;",
          "1923:      sent = sign_and_send_pubkey(ssh, id);",
          "1924:     }",
          "",
          "[Removed Lines]",
          "1921:     if (try_identity(ssh, id)) {",
          "",
          "[Added Lines]",
          "1907:     if (id->key != NULL) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}