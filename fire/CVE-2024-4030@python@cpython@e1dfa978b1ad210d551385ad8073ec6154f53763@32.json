{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fbdff3803af23f632469933e33ee735f853bbdec",
      "candidate_info": {
        "commit_hash": "fbdff3803af23f632469933e33ee735f853bbdec",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/fbdff3803af23f632469933e33ee735f853bbdec",
        "files": [
          "PC/layout/main.py"
        ],
        "message": "gh-119679: Fix layout of PYD and DLL files on Windows when using PC/layout script (GH-120133)\n\n(cherry picked from commit cccc9f63c63ae693ccd0e2d8fc6cfd3aa18feb8e)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
        "before_after_code_files": [
          "PC/layout/main.py||PC/layout/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "PC/layout/main.py||PC/layout/main.py": [
          "File: PC/layout/main.py -> PC/layout/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     yield \"LICENSE.txt\", ns.build / \"LICENSE.txt\"",
          "207:     for _, src in rglob(ns.build, \"*.pyd\"):",
          "208:         if ns.include_freethreaded:",
          "",
          "[Removed Lines]",
          "205:     dest=\"\" if ns.flat_dlls else \"DLLs/\"",
          "",
          "[Added Lines]",
          "205:     dest = \"\" if ns.flat_dlls else \"DLLs/\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:             continue",
          "227:         if src in EXCLUDE_FROM_DLLS:",
          "228:             continue",
          "231:     if ns.zip_lib:",
          "232:         zip_name = PYTHON_ZIP_NAME",
          "",
          "[Removed Lines]",
          "229:         yield from in_build(src.name, no_lib=True)",
          "",
          "[Added Lines]",
          "229:         yield from in_build(src.name, dest=dest, no_lib=True)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ced71d39cfc2ab6e227824fe891101dcb473c2e3",
      "candidate_info": {
        "commit_hash": "ced71d39cfc2ab6e227824fe891101dcb473c2e3",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ced71d39cfc2ab6e227824fe891101dcb473c2e3",
        "files": [
          "Lib/test/test_capi/test_exceptions.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-16-23-02-03.gh-issue-119049.qpd_S-.rst",
          "Modules/_testcapimodule.c",
          "Python/_warnings.c"
        ],
        "message": "[3.13] gh-119049: Fix incorrect display of warning which is constructed by C API (GH-119063) (GH-119106)\n\nThe source line was not displayed if the warnings module had not yet\nbeen imported.\n(cherry picked from commit 100c7ab00ab66a8c0d54582f35e38d8eb691743c)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Lib/test/test_capi/test_exceptions.py||Lib/test/test_capi/test_exceptions.py",
          "Modules/_testcapimodule.c||Modules/_testcapimodule.c",
          "Python/_warnings.c||Python/_warnings.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_capi/test_exceptions.py||Lib/test/test_capi/test_exceptions.py": [
          "File: Lib/test/test_capi/test_exceptions.py -> Lib/test/test_capi/test_exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import re",
          "4: import sys",
          "5: import unittest",
          "7: from test import support",
          "8: from test.support import import_helper",
          "9: from test.support.os_helper import TESTFN, TESTFN_UNDECODABLE",
          "11: from test.support.testcase import ExceptionIsLikeMixin",
          "13: from .test_misc import decode_stderr",
          "",
          "[Removed Lines]",
          "10: from test.support.script_helper import assert_python_failure",
          "",
          "[Added Lines]",
          "6: import textwrap",
          "11: from test.support.script_helper import assert_python_failure, assert_python_ok",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         else:",
          "69:             self.assertTrue(False)",
          "72: class Test_FatalError(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     def test_warn_with_stacklevel(self):",
          "73:         code = textwrap.dedent('''\\",
          "74:             import _testcapi",
          "76:             def foo():",
          "77:                 _testcapi.function_set_warning()",
          "79:             foo()  # line 6",
          "82:             foo()  # line 9",
          "83:         ''')",
          "84:         proc = assert_python_ok(\"-c\", code)",
          "85:         warnings = proc.err.splitlines()",
          "86:         self.assertEqual(warnings, [",
          "87:             b'<string>:6: RuntimeWarning: Testing PyErr_WarnEx',",
          "88:             b'  foo()  # line 6',",
          "89:             b'<string>:9: RuntimeWarning: Testing PyErr_WarnEx',",
          "90:             b'  foo()  # line 9',",
          "91:         ])",
          "93:     def test_warn_during_finalization(self):",
          "94:         code = textwrap.dedent('''\\",
          "95:             import _testcapi",
          "97:             class Foo:",
          "98:                 def foo(self):",
          "99:                     _testcapi.function_set_warning()",
          "100:                 def __del__(self):",
          "101:                     self.foo()",
          "103:             ref = Foo()",
          "104:         ''')",
          "105:         proc = assert_python_ok(\"-c\", code)",
          "106:         warnings = proc.err.splitlines()",
          "107:         # Due to the finalization of the interpreter, the source will be ommited",
          "108:         # because the ``warnings`` module cannot be imported at this time",
          "109:         self.assertEqual(warnings, [",
          "110:             b'<string>:7: RuntimeWarning: Testing PyErr_WarnEx',",
          "111:         ])",
          "",
          "---------------"
        ],
        "Modules/_testcapimodule.c||Modules/_testcapimodule.c": [
          "File: Modules/_testcapimodule.c -> Modules/_testcapimodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3303:     return NULL;",
          "3304: }",
          "3306: static PyMethodDef TestMethods[] = {",
          "3307:     {\"set_errno\",               set_errno,                       METH_VARARGS},",
          "3308:     {\"test_config\",             test_config,                     METH_NOARGS},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3306: static PyObject *",
          "3307: function_set_warning(PyObject *Py_UNUSED(module), PyObject *Py_UNUSED(args))",
          "3308: {",
          "3309:     if (PyErr_WarnEx(PyExc_RuntimeWarning, \"Testing PyErr_WarnEx\", 2)) {",
          "3310:         return NULL;",
          "3311:     }",
          "3312:     Py_RETURN_NONE;",
          "3313: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3444:     {\"function_set_closure\", function_set_closure, METH_VARARGS, NULL},",
          "3445:     {\"check_pyimport_addmodule\", check_pyimport_addmodule, METH_VARARGS},",
          "3446:     {\"test_weakref_capi\", test_weakref_capi, METH_NOARGS},",
          "3448: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3456:     {\"function_set_warning\", function_set_warning, METH_NOARGS},",
          "",
          "---------------"
        ],
        "Python/_warnings.c||Python/_warnings.c": [
          "File: Python/_warnings.c -> Python/_warnings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:     PyObject *show_fn, *msg, *res, *warnmsg_cls = NULL;",
          "570:     PyInterpreterState *interp = tstate->interp;",
          "576:     if (show_fn == NULL) {",
          "577:         if (PyErr_Occurred())",
          "578:             return -1;",
          "",
          "[Removed Lines]",
          "573:        The Python implementation is able to log the traceback where the source",
          "575:     show_fn = GET_WARNINGS_ATTR(interp, _showwarnmsg, source != NULL);",
          "",
          "[Added Lines]",
          "574:     show_fn = GET_WARNINGS_ATTR(interp, _showwarnmsg, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "732c00550f20e73edeac03d9e222c4a719362649",
      "candidate_info": {
        "commit_hash": "732c00550f20e73edeac03d9e222c4a719362649",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/732c00550f20e73edeac03d9e222c4a719362649",
        "files": [
          "Lib/test/test_tcl.py",
          "Lib/test/test_tkinter/test_misc.py",
          "Misc/NEWS.d/next/Library/2024-06-23-17-50-40.gh-issue-119614.vwPGLB.rst",
          "Modules/_tkinter.c"
        ],
        "message": "[3.13] gh-119614: Fix truncation of strings with embedded null characters in Tkinter (GH-120909) (GH-120938)\n\nNow the null character is always represented as \\xc0\\x80 for\nTcl_NewStringObj().\n(cherry picked from commit c38e2f64d012929168dfef7363c9e48bd1a6c731)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tcl.py||Lib/test/test_tcl.py",
          "Lib/test/test_tkinter/test_misc.py||Lib/test/test_tkinter/test_misc.py",
          "Modules/_tkinter.c||Modules/_tkinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tcl.py||Lib/test/test_tcl.py": [
          "File: Lib/test/test_tcl.py -> Lib/test/test_tcl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         tcl.call('set','a','1')",
          "74:         self.assertEqual(tcl.call('set','a'),'1')",
          "76:     def testCallException(self):",
          "77:         tcl = self.interp",
          "78:         self.assertRaises(TclError,tcl.call,'set','a')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     def test_call_passing_null(self):",
          "77:         tcl = self.interp",
          "78:         tcl.call('set', 'a', 'a\\0b')  # ASCII-only",
          "79:         self.assertEqual(tcl.getvar('a'), 'a\\x00b')",
          "80:         self.assertEqual(tcl.call('set', 'a'), 'a\\x00b')",
          "81:         self.assertEqual(tcl.eval('set a'), 'a\\x00b')",
          "83:         tcl.call('set', 'a', '\\u20ac\\0')  # non-ASCII",
          "84:         self.assertEqual(tcl.getvar('a'), '\\u20ac\\x00')",
          "85:         self.assertEqual(tcl.call('set', 'a'), '\\u20ac\\x00')",
          "86:         self.assertEqual(tcl.eval('set a'), '\\u20ac\\x00')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         tcl.setvar('a','1')",
          "99:         self.assertEqual(tcl.eval('set a'),'1')",
          "101:     def testSetVarArray(self):",
          "102:         tcl = self.interp",
          "103:         tcl.setvar('a(1)','1')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     def test_setvar_passing_null(self):",
          "114:         tcl = self.interp",
          "115:         tcl.setvar('a', 'a\\0b')  # ASCII-only",
          "116:         self.assertEqual(tcl.getvar('a'), 'a\\x00b')",
          "117:         self.assertEqual(tcl.call('set', 'a'), 'a\\x00b')",
          "118:         self.assertEqual(tcl.eval('set a'), 'a\\x00b')",
          "120:         tcl.setvar('a', '\\u20ac\\0')  # non-ASCII",
          "121:         self.assertEqual(tcl.getvar('a'), '\\u20ac\\x00')",
          "122:         self.assertEqual(tcl.call('set', 'a'), '\\u20ac\\x00')",
          "123:         self.assertEqual(tcl.eval('set a'), '\\u20ac\\x00')",
          "",
          "---------------"
        ],
        "Lib/test/test_tkinter/test_misc.py||Lib/test/test_tkinter/test_misc.py": [
          "File: Lib/test/test_tkinter/test_misc.py -> Lib/test/test_tkinter/test_misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:             self.assertEqual(vi.micro, 0)",
          "477:         self.assertTrue(str(vi).startswith(f'{vi.major}.{vi.minor}'))",
          "480: class WmTest(AbstractTkTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:     def test_embedded_null(self):",
          "480:         widget = tkinter.Entry(self.root)",
          "481:         widget.insert(0, 'abc\\0def')  # ASCII-only",
          "482:         widget.selection_range(0, 'end')",
          "483:         self.assertEqual(widget.selection_get(), 'abc\\x00def')",
          "484:         widget.insert(0, '\\u20ac\\0')  # non-ASCII",
          "485:         widget.selection_range(0, 'end')",
          "486:         self.assertEqual(widget.selection_get(), '\\u20ac\\0abc\\x00def')",
          "",
          "---------------"
        ],
        "Modules/_tkinter.c||Modules/_tkinter.c": [
          "File: Modules/_tkinter.c -> Modules/_tkinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:         else",
          "513:             Py_UNREACHABLE();",
          "514:     }",
          "516:     const char *s = Tcl_GetStringFromObj(value, &len);",
          "517:     return unicodeFromTclStringAndSize(s, len);",
          "518: }",
          "",
          "[Removed Lines]",
          "515: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1018:             PyErr_SetString(PyExc_OverflowError, \"string is too long\");",
          "1019:             return NULL;",
          "1020:         }",
          "1022:             return Tcl_NewStringObj((const char *)PyUnicode_DATA(value),",
          "1023:                                     (int)size);",
          "1024:         }",
          "",
          "[Removed Lines]",
          "1021:         if (PyUnicode_IS_ASCII(value)) {",
          "",
          "[Added Lines]",
          "1021:         if (PyUnicode_IS_ASCII(value) &&",
          "1022:             strlen(PyUnicode_DATA(value)) == (size_t)PyUnicode_GET_LENGTH(value))",
          "1023:         {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1033:                     \"surrogatepass\", NATIVE_BYTEORDER);",
          "1034:         else",
          "1035:             Py_UNREACHABLE();",
          "1039:         if (!encoded) {",
          "1040:             return NULL;",
          "1041:         }",
          "",
          "[Removed Lines]",
          "1036: #else",
          "1037:         encoded = _PyUnicode_AsUTF8String(value, \"surrogateescape\");",
          "1038: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1045:             PyErr_SetString(PyExc_OverflowError, \"string is too long\");",
          "1046:             return NULL;",
          "1047:         }",
          "1049:         result = Tcl_NewUnicodeObj((const Tcl_UniChar *)PyBytes_AS_STRING(encoded),",
          "1050:                                    (int)(size / sizeof(Tcl_UniChar)));",
          "1051: #else",
          "1052:         result = Tcl_NewStringObj(PyBytes_AS_STRING(encoded), (int)size);",
          "1054:         Py_DECREF(encoded);",
          "1055:         return result;",
          "1056:     }",
          "",
          "[Removed Lines]",
          "1048: #if USE_TCL_UNICODE",
          "1053: #endif",
          "",
          "[Added Lines]",
          "1050:         encoded = _PyUnicode_AsUTF8String(value, \"surrogateescape\");",
          "1051:         if (!encoded) {",
          "1052:             return NULL;",
          "1053:         }",
          "1054:         size = PyBytes_GET_SIZE(encoded);",
          "1055:         if (strlen(PyBytes_AS_STRING(encoded)) != (size_t)size) {",
          "1064:             Py_SETREF(encoded,",
          "1065:                       PyObject_CallMethod(encoded, \"replace\", \"y#y#\",",
          "1066:                                           \"\\0\", (Py_ssize_t)1,",
          "1067:                                           \"\\xc0\\x80\", (Py_ssize_t)2));",
          "1068:             if (!encoded) {",
          "1069:                 return NULL;",
          "1070:             }",
          "1071:             size = PyBytes_GET_SIZE(encoded);",
          "1072:         }",
          "1073:         if (size > INT_MAX) {",
          "1074:             Py_DECREF(encoded);",
          "1075:             PyErr_SetString(PyExc_OverflowError, \"string is too long\");",
          "1076:             return NULL;",
          "1077:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7d2b2b646f5abdbec501f63ab9b719b3db70a1f",
      "candidate_info": {
        "commit_hash": "c7d2b2b646f5abdbec501f63ab9b719b3db70a1f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c7d2b2b646f5abdbec501f63ab9b719b3db70a1f",
        "files": [
          "Lib/ensurepip/__init__.py",
          "Lib/ensurepip/_bundled/pip-24.0-py3-none-any.whl",
          "Lib/ensurepip/_bundled/pip-24.1.1-py3-none-any.whl",
          "Misc/NEWS.d/next/Library/2024-06-22-22-52-24.gh-issue-120888.sd8I3N.rst"
        ],
        "message": "[3.13] gh-120888: Bump bundled pip to 24.1.1 (GH-120889) (#121080)\n\ngh-120888: Bump bundled pip to 24.1.1 (GH-120889)\n(cherry picked from commit 4999e0bda091826fcdf303dd439364e1d303a5ce)\n\nCo-authored-by: Pradyun Gedam <pradyunsg@gmail.com>\nCo-authored-by: Pradyun Gedam <pradyunsg@users.noreply.github.com>\nCo-authored-by: blurb-it[bot] <43283697+blurb-it[bot]@users.noreply.github.com>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>",
        "before_after_code_files": [
          "Lib/ensurepip/__init__.py||Lib/ensurepip/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/ensurepip/__init__.py||Lib/ensurepip/__init__.py": [
          "File: Lib/ensurepip/__init__.py -> Lib/ensurepip/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: __all__ = [\"version\", \"bootstrap\"]",
          "15: # Directory of system wheel packages. Some Linux distribution packaging",
          "16: # policies recommend against bundling dependencies. For example, Fedora",
          "",
          "[Removed Lines]",
          "13: _PIP_VERSION = \"24.0\"",
          "",
          "[Added Lines]",
          "13: _PIP_VERSION = \"24.1.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec88e9f686a97a7dfc3c2ef28a244e53d313731a",
      "candidate_info": {
        "commit_hash": "ec88e9f686a97a7dfc3c2ef28a244e53d313731a",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ec88e9f686a97a7dfc3c2ef28a244e53d313731a",
        "files": [
          "Lib/platform.py",
          "Misc/NEWS.d/next/Build/2024-05-17-19-53-27.gh-issue-119132.wepPgM.rst",
          "Python/getversion.c"
        ],
        "message": "[3.13] gh-119132: Update sys.version to identify free-threaded or not. (gh-119134) (#119153)\n\ngh-119132: Update sys.version to identify free-threaded or not. (gh-119134)\n(cherry picked from commit c141d4393750c827cbcb3867f0f42997a3bb3528)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Lib/platform.py||Lib/platform.py",
          "Python/getversion.c||Python/getversion.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/platform.py||Lib/platform.py": [
          "File: Lib/platform.py -> Lib/platform.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153:     if result is not None:",
          "1154:         return result",
          "1163:     if sys.platform.startswith('java'):",
          "1164:         # Jython",
          "1165:         name = 'Jython'",
          "1167:         if match is None:",
          "1168:             raise ValueError(",
          "1169:                 'failed to parse Jython sys.version: %s' %",
          "",
          "[Removed Lines]",
          "1156:     sys_version_parser = re.compile(",
          "1157:         r'([\\w.+]+)\\s*'  # \"version<space>\"",
          "1158:         r'\\(#?([^,]+)'  # \"(#buildno\"",
          "1159:         r'(?:,\\s*([\\w ]*)'  # \", builddate\"",
          "1160:         r'(?:,\\s*([\\w :]*))?)?\\)\\s*'  # \", buildtime)<space>\"",
          "1161:         r'\\[([^\\]]+)\\]?', re.ASCII)  # \"[compiler]\"",
          "1166:         match = sys_version_parser.match(sys_version)",
          "",
          "[Added Lines]",
          "1158:         jython_sys_version_parser = re.compile(",
          "1159:             r'([\\w.+]+)\\s*'  # \"version<space>\"",
          "1160:             r'\\(#?([^,]+)'  # \"(#buildno\"",
          "1161:             r'(?:,\\s*([\\w ]*)'  # \", builddate\"",
          "1162:             r'(?:,\\s*([\\w :]*))?)?\\)\\s*'  # \", buildtime)<space>\"",
          "1163:             r'\\[([^\\]]+)\\]?', re.ASCII)  # \"[compiler]\"",
          "1165:         match = jython_sys_version_parser.match(sys_version)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191:     else:",
          "1192:         # CPython",
          "1194:         if match is None:",
          "1195:             raise ValueError(",
          "1196:                 'failed to parse CPython sys.version: %s' %",
          "",
          "[Removed Lines]",
          "1193:         match = sys_version_parser.match(sys_version)",
          "",
          "[Added Lines]",
          "1192:         cpython_sys_version_parser = re.compile(",
          "1193:             r'([\\w.+]+)\\s*'  # \"version<space>\"",
          "1194:             r'(?:experimental free-threading build\\s+)?' # \"free-threading-build<space>\"",
          "1195:             r'\\(#?([^,]+)'  # \"(#buildno\"",
          "1196:             r'(?:,\\s*([\\w ]*)'  # \", builddate\"",
          "1197:             r'(?:,\\s*([\\w :]*))?)?\\)\\s*'  # \", buildtime)<space>\"",
          "1198:             r'\\[([^\\]]+)\\]?', re.ASCII)  # \"[compiler]\"",
          "1199:         match = cpython_sys_version_parser.match(sys_version)",
          "",
          "---------------"
        ],
        "Python/getversion.c||Python/getversion.c": [
          "File: Python/getversion.c -> Python/getversion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"patchlevel.h\"",
          "8: static int initialized = 0;",
          "11: void _Py_InitVersion(void)",
          "12: {",
          "",
          "[Removed Lines]",
          "9: static char version[250];",
          "",
          "[Added Lines]",
          "9: static char version[300];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14:         return;",
          "15:     }",
          "16:     initialized = 1;",
          "18:                   PY_VERSION, Py_GetBuildInfo(), Py_GetCompiler());",
          "19: }",
          "",
          "[Removed Lines]",
          "17:     PyOS_snprintf(version, sizeof(version), \"%.80s (%.80s) %.80s\",",
          "",
          "[Added Lines]",
          "17: #ifdef Py_GIL_DISABLED",
          "18:     const char *buildinfo_format = \"%.80s experimental free-threading build (%.80s) %.80s\";",
          "19: #else",
          "20:     const char *buildinfo_format = \"%.80s (%.80s) %.80s\";",
          "21: #endif",
          "22:     PyOS_snprintf(version, sizeof(version), buildinfo_format,",
          "",
          "---------------"
        ]
      }
    }
  ]
}