{
  "cve_id": "CVE-2023-1127",
  "cve_desc": "Divide By Zero in GitHub repository vim/vim prior to 9.0.1367.",
  "repo": "vim/vim",
  "patch_hash": "e0f869196930ef5f25a0ac41c9215b09c9ce2d3c",
  "patch_info": {
    "commit_hash": "e0f869196930ef5f25a0ac41c9215b09c9ce2d3c",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/e0f869196930ef5f25a0ac41c9215b09c9ce2d3c",
    "files": [
      "src/move.c",
      "src/testdir/test_window_cmd.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.1367: divide by zero in zero-width window\n\nProblem:    Divide by zero in zero-width window.\nSolution:   Check the width is positive.",
    "before_after_code_files": [
      "src/move.c||src/move.c",
      "src/testdir/test_window_cmd.vim||src/testdir/test_window_cmd.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/move.c||src/move.c": [
      "File: src/move.c -> src/move.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1734:      col -= width1;",
      "1735:      ++row;",
      "1736:  }",
      "1738:  {",
      "1739:      row += col / width2;",
      "1740:      col = col % width2;",
      "",
      "[Removed Lines]",
      "1737:  if (col > width2)",
      "",
      "[Added Lines]",
      "1737:  if (col > width2 && width2 > 0)",
      "",
      "---------------"
    ],
    "src/testdir/test_window_cmd.vim||src/testdir/test_window_cmd.vim": [
      "File: src/testdir/test_window_cmd.vim -> src/testdir/test_window_cmd.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1772:   let &t_WS = save_WS",
      "1773: endfunc",
      "1776:   set splitkeep=screen",
      "1777:   call setline(1, range(&lines))",
      "",
      "[Removed Lines]",
      "1775: function Test_splitkeep_cmdwin_cursor_position()",
      "",
      "[Added Lines]",
      "1775: func Test_splitkeep_cmdwin_cursor_position()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1798:   %bwipeout!",
      "1799:   set splitkeep&",
      "1803:   set splitkeep=screen",
      "1804:   set splitbelow",
      "",
      "[Removed Lines]",
      "1800: endfunction",
      "1802: function Test_splitkeep_misc()",
      "",
      "[Added Lines]",
      "1800: endfunc",
      "1802: func Test_splitkeep_misc()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1832:   set splitkeep&",
      "1833: endfunc",
      "1836:   CheckScreendump",
      "1837:   let lines =<< trim END",
      "1838:     set splitkeep=screen",
      "",
      "[Removed Lines]",
      "1835: function Test_splitkeep_callback()",
      "",
      "[Added Lines]",
      "1835: func Test_splitkeep_callback()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1865:   call StopVimInTerminal(buf)",
      "1866: endfunc",
      "1869:   CheckScreendump",
      "1871:   let lines =<< trim END",
      "",
      "[Removed Lines]",
      "1868: function Test_splitkeep_fold()",
      "",
      "[Added Lines]",
      "1868: func Test_splitkeep_fold()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1895:   call VerifyScreenDump(buf, 'Test_splitkeep_fold_4', {})",
      "1897:   call StopVimInTerminal(buf)",
      "1901:   CheckScreendump",
      "1903:   let lines =<< trim END",
      "",
      "[Removed Lines]",
      "1898: endfunction",
      "1900: function Test_splitkeep_status()",
      "",
      "[Added Lines]",
      "1898: endfunc",
      "1900: func Test_splitkeep_status()",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1915:   call VerifyScreenDump(buf, 'Test_splitkeep_status_1', {})",
      "1917:   call StopVimInTerminal(buf)",
      "1921:   help change.txt",
      "1922:   execute \"normal! /CTRL-@\\<CR>\"",
      "1923:   silent! execute \"normal! \\<C-W>]\"",
      "",
      "[Removed Lines]",
      "1918: endfunction",
      "1920: function Test_new_help_window_on_error()",
      "",
      "[Added Lines]",
      "1918: endfunc",
      "1920: func Test_new_help_window_on_error()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1928:   call assert_equal(wincount, winnr('$'))",
      "1929:   call assert_equal(expand(\"<cword>\"), \"'mod'\")",
      "1933: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "1930: endfunction",
      "",
      "[Added Lines]",
      "1930: endfunc",
      "1932: func Test_smoothscroll_in_zero_width_window()",
      "1933:   let save_lines = &lines",
      "1934:   let save_columns = &columns",
      "1936:   winsize 0 24",
      "1937:   set cpo+=n",
      "1938:   exe \"noremap 0 \\<C-W>n\\<C-W>L\"",
      "1939:   norm 000000",
      "1940:   set number smoothscroll",
      "1941:   exe \"norm \\<C-Y>\"",
      "1943:   only!",
      "1944:   let &lines = save_lines",
      "1945:   let &columns = save_columns",
      "1946:   set cpo-=n",
      "1947:   unmap 0",
      "1948:   set nonumber nosmoothscroll",
      "1949: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "696: static int included_patches[] =",
      "699:     1366,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "699:     1367,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0fd44a5ad81ade342cb54d8984965bdedd2272c8",
      "candidate_info": {
        "commit_hash": "0fd44a5ad81ade342cb54d8984965bdedd2272c8",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/0fd44a5ad81ade342cb54d8984965bdedd2272c8",
        "files": [
          "src/autocmd.c",
          "src/evalwindow.c",
          "src/proto/window.pro",
          "src/testdir/test_window_cmd.vim",
          "src/version.c",
          "src/vim.h",
          "src/window.c"
        ],
        "message": "patch 9.1.0116: win_split_ins may not check available room\n\nProblem:  win_split_ins has no check for E36 when moving an existing\n          window\nSolution: check for room and fix the issues in f_win_splitmove()\n          (Sean Dewar)\n\nwin_split_ins has no check for E36 when moving an existing window,\nallowing for layouts with many overlapping zero-sized windows to be\ncreated (which may also cause drawing issues with tablines and such).\nf_win_splitmove also has some bugs.\n\nSo check for room and fix the issues in f_win_splitmove. Handle failure\nin the two relevant win_split_ins callers by restoring the original\nlayout, and factor the common logic into win_splitmove.\n\nDon't check for room when opening an autocommand window, as it's a\ntemporary window that's rarely interacted with or drawn anyhow, and is\nrather important for some autocommands.\n\nIssues fixed in f_win_splitmove:\n- Error if splitting is disallowed.\n- Fix heap-use-after-frees if autocommands fired from switching to \"targetwin\"\n  close \"wp\" or \"oldwin\".\n- Fix splitting the wrong window if autocommands fired from switching to\n  \"targetwin\" switch to a different window.\n- Ensure -1 is returned for all errors.\n\nAlso handle allocation failure a bit earlier in make_snapshot (callers,\nexcept win_splitmove, don't really care if a snapshot can't be made, so\njust ignore the return value).\n\nNote: Test_smoothscroll_in_zero_width_window failed after these changes with\nE36, as it was using the previous behaviour to create a zero-width window.\nI've fixed the test such that it fails with UBSAN as expected when v9.0.1367 is\nreverted (and simplified it too).\n\nrelated: #14042\n\nSigned-off-by: Sean Dewar <6256228+seandewar@users.noreply.github.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/autocmd.c||src/autocmd.c",
          "src/evalwindow.c||src/evalwindow.c",
          "src/proto/window.pro||src/proto/window.pro",
          "src/testdir/test_window_cmd.vim||src/testdir/test_window_cmd.vim",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_window_cmd.vim||src/testdir/test_window_cmd.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_window_cmd.vim||src/testdir/test_window_cmd.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/autocmd.c||src/autocmd.c": [
          "File: src/autocmd.c -> src/autocmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1607:  p_acd = FALSE;",
          "1608: #endif",
          "1611:  (void)win_comp_pos();   // recompute window positions",
          "1612:  p_ea = save_ea;",
          "1613: #ifdef FEAT_AUTOCHDIR",
          "",
          "[Removed Lines]",
          "1610:  (void)win_split_ins(0, WSP_TOP, auc_win, 0);",
          "",
          "[Added Lines]",
          "1610:  (void)win_split_ins(0, WSP_TOP | WSP_FORCE_ROOM, auc_win, 0);",
          "",
          "---------------"
        ],
        "src/evalwindow.c||src/evalwindow.c": [
          "File: src/evalwindow.c -> src/evalwindow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "952:     list_append_number(rettv->vval.v_list, wp == NULL ? 0 : wp->w_wincol + 1);",
          "953: }",
          "1002:     void",
          "1003: f_win_splitmove(typval_T *argvars, typval_T *rettv)",
          "1004: {",
          "1007:     int     flags = 0, size = 0;",
          "1009:     if (in_vim9script()",
          "1010:      && (check_for_number_arg(argvars, 0) == FAIL",
          "1011:   || check_for_number_arg(argvars, 1) == FAIL",
          "",
          "[Removed Lines]",
          "958:     static void",
          "959: win_move_into_split(win_T *wp, win_T *targetwin, int size, int flags)",
          "960: {",
          "961:     int     dir;",
          "962:     int     height = wp->w_height;",
          "963:     win_T   *oldwin = curwin;",
          "965:     if (wp == targetwin)",
          "966:  return;",
          "969:     if (curwin != targetwin)",
          "970:  win_goto(targetwin);",
          "973:     (void)winframe_remove(wp, &dir, NULL);",
          "974:     win_remove(wp, NULL);",
          "975:     last_status(FALSE);     // may need to remove last status line",
          "976:     (void)win_comp_pos();   // recompute window positions",
          "979:     (void)win_split_ins(size, flags, wp, dir);",
          "982:     if (size == 0 && !(flags & WSP_VERT))",
          "983:     {",
          "984:  win_setheight_win(height, wp);",
          "985:  if (p_ea)",
          "986:      win_equal(wp, TRUE, 'v');",
          "987:     }",
          "989: #if defined(FEAT_GUI)",
          "992:     gui_may_update_scrollbars();",
          "993: #endif",
          "995:     if (oldwin != curwin)",
          "996:  win_goto(oldwin);",
          "997: }",
          "1005:     win_T   *wp;",
          "1006:     win_T   *targetwin;",
          "",
          "[Added Lines]",
          "961:     win_T   *wp, *targetwin;",
          "962:     win_T   *oldwin = curwin;",
          "965:     rettv->vval.v_number = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1020:      || win_valid_popup(wp) || win_valid_popup(targetwin))",
          "1021:     {",
          "1022:  emsg(_(e_invalid_window_number));",
          "1024:  return;",
          "1025:     }",
          "",
          "[Removed Lines]",
          "1023:  rettv->vval.v_number = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1040:  size = (int)dict_get_number(d, \"size\");",
          "1041:     }",
          "1044: }",
          "",
          "[Removed Lines]",
          "1043:     win_move_into_split(wp, targetwin, size, flags);",
          "",
          "[Added Lines]",
          "1001:     if (check_split_disallowed(targetwin) == FAIL)",
          "1002:  return;",
          "1004:     if (curwin != targetwin)",
          "1005:  win_goto(targetwin);",
          "1008:     if (curwin == targetwin && win_valid(wp))",
          "1009:     {",
          "1010:  if (win_splitmove(wp, size, flags) == OK)",
          "1011:      rettv->vval.v_number = 0;",
          "1012:     }",
          "1013:     else",
          "1014:  emsg(_(e_autocommands_caused_command_to_abort));",
          "1016:     if (oldwin != curwin && win_valid(oldwin))",
          "1017:  win_goto(oldwin);",
          "",
          "---------------"
        ],
        "src/proto/window.pro||src/proto/window.pro": [
          "File: src/proto/window.pro -> src/proto/window.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: win_T *swbuf_goto_win_with_buf(buf_T *buf);",
          "5: void do_window(int nchar, long Prenum, int xchar);",
          "6: void get_wincmd_addr_type(char_u *arg, exarg_T *eap);",
          "7: int win_split(int size, int flags);",
          "8: int win_split_ins(int size, int flags, win_T *new_wp, int dir);",
          "9: int win_valid_popup(win_T *win);",
          "10: int win_valid(win_T *win);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: int check_split_disallowed(win_T *wp);",
          "9: int win_splitmove(win_T *wp, int size, int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: void check_lnums(int do_curwin);",
          "89: void check_lnums_nested(int do_curwin);",
          "90: void reset_lnums(void);",
          "92: void restore_snapshot(int idx, int close_curwin);",
          "93: int win_hasvertsplit(void);",
          "94: int get_win_number(win_T *wp, win_T *first_win);",
          "",
          "[Removed Lines]",
          "91: void make_snapshot(int idx);",
          "",
          "[Added Lines]",
          "93: int make_snapshot(int idx);",
          "",
          "---------------"
        ],
        "src/testdir/test_window_cmd.vim||src/testdir/test_window_cmd.vim": [
          "File: src/testdir/test_window_cmd.vim -> src/testdir/test_window_cmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   for s in range(1, hor_split_count) | split | endfor",
          "291:   call assert_fails('split', 'E36:')",
          "293:   \" N vertical windows need >= 2*(N - 1) + 1 columns:",
          "294:   \" - 1 column + 1 separator for each window (except last window)",
          "295:   \" - 1 column for the last window which does not have separator",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   botright vsplit",
          "294:   wincmd |",
          "295:   let layout = winlayout()",
          "296:   let restcmd = winrestcmd()",
          "297:   call assert_fails('wincmd J', 'E36:')",
          "298:   call assert_fails('wincmd K', 'E36:')",
          "299:   call assert_equal(layout, winlayout())",
          "300:   call assert_equal(restcmd, winrestcmd())",
          "301:   only",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:   for s in range(1, ver_split_count) | vsplit | endfor",
          "303:   call assert_fails('vsplit', 'E36:')",
          "305:   %bw!",
          "306: endfunc",
          "308: func Test_window_exchange()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:   split",
          "316:   wincmd |",
          "317:   let layout = winlayout()",
          "318:   let restcmd = winrestcmd()",
          "319:   call assert_fails('wincmd H', 'E36:')",
          "320:   call assert_fails('wincmd L', 'E36:')",
          "321:   call assert_equal(layout, winlayout())",
          "322:   call assert_equal(restcmd, winrestcmd())",
          "324:   \" Check that the last statusline isn't lost.",
          "325:   set laststatus=0",
          "326:   let restcmd = winrestcmd()",
          "327:   wincmd j",
          "328:   call setwinvar(winnr('k'), '&statusline', '@#')",
          "329:   let last_stl_row = win_screenpos(0)[0] - 1",
          "330:   redraw",
          "331:   call assert_equal('@#|', GetScreenStr(last_stl_row))",
          "332:   call assert_equal('~ |', GetScreenStr(&lines - &cmdheight))",
          "333:   call assert_fails('wincmd H', 'E36:')",
          "334:   call assert_fails('wincmd L', 'E36:')",
          "335:   call assert_equal(layout, winlayout())",
          "336:   call assert_equal(restcmd, winrestcmd())",
          "337:   call setwinvar(winnr('k'), '&statusline', '=-')",
          "338:   redraw",
          "339:   call assert_equal('=-|', GetScreenStr(last_stl_row))",
          "340:   call assert_equal('~ |', GetScreenStr(&lines - &cmdheight))",
          "343:   set laststatus&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1097:   tabnew",
          "1098:   call assert_fails('call win_splitmove(1, win_getid(1, 1))', 'E957:')",
          "1099:   tabclose",
          "1100: endfunc",
          "1102: \" Test for the :only command",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1139:   split",
          "1140:   augroup WinSplitMove",
          "1141:     au!",
          "1142:     au WinEnter * ++once call win_gotoid(win_getid(winnr('#')))",
          "1143:   augroup END",
          "1144:   call assert_fails('call win_splitmove(winnr(), winnr(\"#\"))', 'E855:')",
          "1146:   augroup WinSplitMove",
          "1147:     au!",
          "1148:     au WinLeave * ++once quit",
          "1149:   augroup END",
          "1150:   call assert_fails('call win_splitmove(winnr(), winnr(\"#\"))', 'E855:')",
          "1152:   split",
          "1153:   split",
          "1154:   augroup WinSplitMove",
          "1155:     au!",
          "1156:     au WinEnter * ++once let s:triggered = v:true",
          "1157:           \\| call assert_fails('call win_splitmove(winnr(\"$\"), winnr())', 'E242:')",
          "1158:   augroup END",
          "1159:   quit",
          "1160:   call assert_equal(v:true, s:triggered)",
          "1161:   unlet! s:triggered",
          "1163:   new",
          "1164:   augroup WinSplitMove",
          "1165:     au!",
          "1166:     au BufHidden * ++once let s:triggered = v:true",
          "1167:           \\| call assert_fails('call win_splitmove(winnr(\"#\"), winnr())', 'E1159:')",
          "1168:   augroup END",
          "1169:   hide",
          "1170:   call assert_equal(v:true, s:triggered)",
          "1171:   unlet! s:triggered",
          "1173:   au! WinSplitMove",
          "1174:   augroup! WinSplitMove",
          "1175:   %bw!",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2061: endfunc",
          "2063: func Test_smoothscroll_in_zero_width_window()",
          "2074:   only!",
          "2080: endfunc",
          "2083: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "2064:   let save_lines = &lines",
          "2065:   let save_columns = &columns",
          "2067:   winsize 0 24",
          "2068:   set cpo+=n",
          "2069:   exe \"noremap 0 \\<C-W>n\\<C-W>L\"",
          "2070:   norm 000000",
          "2071:   set number smoothscroll",
          "2072:   exe \"norm \\<C-Y>\"",
          "2075:   let &lines = save_lines",
          "2076:   let &columns = save_columns",
          "2077:   set cpo-=n",
          "2078:   unmap 0",
          "2079:   set nonumber nosmoothscroll",
          "",
          "[Added Lines]",
          "2140:   set cpo+=n number smoothscroll",
          "2141:   set winwidth=99999 winminwidth=0",
          "2143:   vsplit",
          "2144:   call assert_equal(0, winwidth(winnr('#')))",
          "2145:   call win_execute(win_getid(winnr('#')), \"norm! \\<C-Y>\")",
          "2147:   only!",
          "2148:   set winwidth& winminwidth&",
          "2149:   set cpo-=n nonumber nosmoothscroll",
          "2150: endfunc",
          "2152: func Test_splitmove_flatten_frame()",
          "2153:   split",
          "2154:   vsplit",
          "2156:   wincmd L",
          "2157:   let layout = winlayout()",
          "2158:   wincmd K",
          "2159:   wincmd L",
          "2160:   call assert_equal(winlayout(), layout)",
          "2165: func Test_splitmove_autocmd_window_no_room()",
          "2166:   \" Open as many windows as possible",
          "2167:   while v:true",
          "2168:     try",
          "2169:       split",
          "2170:     catch /E36:/",
          "2171:       break",
          "2172:     endtry",
          "2173:   endwhile",
          "2174:   while v:true",
          "2175:     try",
          "2176:       vsplit",
          "2177:     catch /E36:/",
          "2178:       break",
          "2179:     endtry",
          "2180:   endwhile",
          "2182:   wincmd j",
          "2183:   vsplit",
          "2184:   call assert_fails('wincmd H', 'E36:')",
          "2185:   call assert_fails('wincmd J', 'E36:')",
          "2186:   call assert_fails('wincmd K', 'E36:')",
          "2187:   call assert_fails('wincmd L', 'E36:')",
          "2189:   edit unload me",
          "2190:   enew",
          "2191:   bunload! unload\\ me",
          "2192:   augroup SplitMoveAucmdWin",
          "2193:     au!",
          "2194:     au BufEnter * ++once let s:triggered = v:true",
          "2195:                       \\| call assert_equal('autocmd', win_gettype())",
          "2196:   augroup END",
          "2197:   let layout = winlayout()",
          "2198:   let restcmd = winrestcmd()",
          "2199:   \" bufload opening the autocommand window shouldn't give E36.",
          "2200:   call bufload('unload me')",
          "2201:   call assert_equal(v:true, s:triggered)",
          "2202:   call assert_equal(winlayout(), layout)",
          "2203:   call assert_equal(winrestcmd(), restcmd)",
          "2205:   unlet! s:triggered",
          "2206:   au! SplitMoveAucmdWin",
          "2207:   augroup! SplitMoveAucmdWin",
          "2208:   %bw!",
          "2209: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     115,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     116,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1255: #define WSP_BELOW 0x40 // put new window below/right",
          "1256: #define WSP_ABOVE 0x80 // put new window above/left",
          "1257: #define WSP_NEWLOC 0x100 // don't copy location list",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258: #define WSP_FORCE_ROOM 0x200 // ignore \"not enough room\" errors",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: static void frame_setwidth(frame_T *curfrp, int width);",
          "18: static void win_exchange(long);",
          "19: static void win_rotate(int, int);",
          "21: static void win_equal_rec(win_T *next_curwin, int current, frame_T *topfr, int dir, int col, int row, int width, int height);",
          "22: static void trigger_winnewpre(void);",
          "23: static void trigger_winclosed(win_T *win);",
          "",
          "[Removed Lines]",
          "20: static void win_totop(int size, int flags);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: static void frame_new_height(frame_T *topfrp, int height, int topfirst, int wfh);",
          "32: static int frame_fixed_height(frame_T *frp);",
          "33: static int frame_fixed_width(frame_T *frp);",
          "35: static void frame_new_width(frame_T *topfrp, int width, int leftfirst, int wfw);",
          "36: static void frame_add_vsep(frame_T *frp);",
          "37: static int frame_minwidth(frame_T *topfrp, win_T *next_curwin);",
          "",
          "[Removed Lines]",
          "34: static void frame_add_statusline(frame_T *frp);",
          "",
          "[Added Lines]",
          "33: static void frame_add_statusline(frame_T *frp, int adjust_winheight);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: static void frame_add_height(frame_T *frp, int n);",
          "56: static void last_status_rec(frame_T *fr, int statusline);",
          "59: static void clear_snapshot(tabpage_T *tp, int idx);",
          "60: static void clear_snapshot_rec(frame_T *fr);",
          "61: static int check_snapshot_rec(frame_T *sn, frame_T *fr);",
          "62: static win_T *restore_snapshot_rec(frame_T *sn, frame_T *fr);",
          "63: static win_T *get_snapshot_curwin(int idx);",
          "65: static int frame_check_height(frame_T *topfrp, int height);",
          "66: static int frame_check_width(frame_T *topfrp, int width);",
          "",
          "[Removed Lines]",
          "58: static void make_snapshot_rec(frame_T *fr, frame_T **frp);",
          "",
          "[Added Lines]",
          "57: static int make_snapshot_rec(frame_T *fr, frame_T **frp, int snap_wins);",
          "63: static frame_T *make_full_snapshot(void);",
          "64: static void restore_full_snapshot(frame_T *sn);",
          "65: static void restore_full_snapshot_rec(frame_T *sn);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "494:     case 'H':",
          "495:     case 'L':",
          "496:   CHECK_CMDWIN;",
          "500:   break;",
          "",
          "[Removed Lines]",
          "497:   win_totop((int)Prenum,",
          "498:    ((nchar == 'H' || nchar == 'L') ? WSP_VERT : 0)",
          "499:    | ((nchar == 'H' || nchar == 'K') ? WSP_TOP : WSP_BOT));",
          "",
          "[Added Lines]",
          "499:   if (ONE_WINDOW)",
          "500:       beep_flush();",
          "501:   else",
          "502:   {",
          "503:       int dir = ((nchar == 'H' || nchar == 'L') ? WSP_VERT : 0)",
          "504:     | ((nchar == 'H' || nchar == 'K') ? WSP_TOP : WSP_BOT);",
          "506:       (void)win_splitmove(curwin, (int)Prenum, dir);",
          "507:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "858: }",
          "866: {",
          "867:     if (split_disallowed > 0)",
          "868:     {",
          "869:  emsg(_(e_cant_split_window_while_closing_another));",
          "870:  return FAIL;",
          "871:     }",
          "873:     {",
          "874:  emsg(_(e_cannot_split_window_when_closing_buffer));",
          "875:  return FAIL;",
          "",
          "[Removed Lines]",
          "864:     static int",
          "865: check_split_disallowed(void)",
          "872:     if (curwin->w_buffer->b_locked_split)",
          "",
          "[Added Lines]",
          "872:     int",
          "873: check_split_disallowed(win_T *wp)",
          "880:     if (wp->w_buffer->b_locked_split)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "898:     if (ERROR_IF_ANY_POPUP_WINDOW)",
          "899:  return FAIL;",
          "902:  return FAIL;",
          "",
          "[Removed Lines]",
          "901:     if (check_split_disallowed() == FAIL)",
          "",
          "[Added Lines]",
          "909:     if (check_split_disallowed(curwin) == FAIL)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "969:     if (ONE_WINDOW && p_ls == 1 && oldwin->w_status_height == 0)",
          "970:     {",
          "972:  {",
          "973:      emsg(_(e_not_enough_room));",
          "974:      goto theend;",
          "",
          "[Removed Lines]",
          "971:  if (VISIBLE_HEIGHT(oldwin) <= p_wmh && new_wp == NULL)",
          "",
          "[Added Lines]",
          "979:  if (!(flags & WSP_FORCE_ROOM) && VISIBLE_HEIGHT(oldwin) <= p_wmh)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1026:      available = oldwin->w_frame->fr_width;",
          "1027:      needed += minwidth;",
          "1028:  }",
          "1030:  {",
          "1031:      emsg(_(e_not_enough_room));",
          "1032:      goto theend;",
          "",
          "[Removed Lines]",
          "1029:  if (available < needed && new_wp == NULL)",
          "",
          "[Added Lines]",
          "1037:  if (!(flags & WSP_FORCE_ROOM) && available < needed)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1109:      available = oldwin->w_frame->fr_height;",
          "1110:      needed += minheight;",
          "1111:  }",
          "1113:  {",
          "1114:      emsg(_(e_not_enough_room));",
          "1115:      goto theend;",
          "",
          "[Removed Lines]",
          "1112:  if (available < needed && new_wp == NULL)",
          "",
          "[Added Lines]",
          "1120:  if (!(flags & WSP_FORCE_ROOM) && available < needed)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1360:      if (!((flags & WSP_BOT) && p_ls == 0))",
          "1361:   new_fr_height -= STATUS_HEIGHT;",
          "1362:      if (flags & WSP_BOT)",
          "1364:      frame_new_height(curfrp, new_fr_height, flags & WSP_TOP, FALSE);",
          "1365:  }",
          "1366:  else",
          "",
          "[Removed Lines]",
          "1363:   frame_add_statusline(curfrp);",
          "",
          "[Added Lines]",
          "1371:   frame_add_statusline(curfrp, FALSE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1900: }",
          "1907: {",
          "1908:     int  dir;",
          "1911:     if (ONE_WINDOW)",
          "1912:     {",
          "1915:     }",
          "1922:     last_status(FALSE);     // may need to remove last status line",
          "1923:     (void)win_comp_pos();   // recompute window positions",
          "1928:     {",
          "1930:  if (p_ea)",
          "1932:     }",
          "1934: #if defined(FEAT_GUI)",
          "",
          "[Removed Lines]",
          "1905:     static void",
          "1906: win_totop(int size, int flags)",
          "1909:     int  height = curwin->w_height;",
          "1913:  beep_flush();",
          "1914:  return;",
          "1916:     if (check_split_disallowed() == FAIL)",
          "1917:  return;",
          "1920:     (void)winframe_remove(curwin, &dir, NULL);",
          "1921:     win_remove(curwin, NULL);",
          "1926:     (void)win_split_ins(size, flags, curwin, dir);",
          "1927:     if (!(flags & WSP_VERT))",
          "1929:  win_setheight(height);",
          "1931:      win_equal(curwin, TRUE, 'v');",
          "",
          "[Added Lines]",
          "1916:     int",
          "1917: win_splitmove(win_T *wp, int size, int flags)",
          "1920:     int  height = wp->w_height;",
          "1921:     frame_T *frp;",
          "1924:  return OK; // nothing to do",
          "1925:     if (check_split_disallowed(wp) == FAIL)",
          "1926:  return FAIL;",
          "1930:     frp = make_full_snapshot();",
          "1931:     if (frp == NULL)",
          "1933:  emsg(_(e_out_of_memory));",
          "1934:  return FAIL;",
          "1938:     (void)winframe_remove(wp, &dir, NULL);",
          "1939:     win_remove(wp, NULL);",
          "1944:     if (win_split_ins(size, flags, wp, dir) == FAIL)",
          "1947:  vim_free(wp->w_frame);",
          "1948:  restore_full_snapshot(frp);",
          "1951:  frp = wp->w_frame;",
          "1952:  if (frp->fr_parent->fr_layout == FR_ROW && frp->fr_prev != NULL)",
          "1953:      frame_add_vsep(frp->fr_prev);",
          "1956:  if (frp->fr_parent->fr_layout == FR_COL && frp->fr_prev != NULL)",
          "1957:      frame_add_statusline(frp->fr_prev, TRUE);",
          "1959:  win_append(wp->w_prev, wp);",
          "1960:  return FAIL;",
          "1961:     }",
          "1962:     clear_snapshot_rec(frp);",
          "1965:     if (size == 0 && !(flags & WSP_VERT))",
          "1966:     {",
          "1967:  win_setheight_win(height, wp);",
          "1969:  {",
          "1972:      win_equal(curwin, curwin == wp, 'v');",
          "1973:  }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1937:     gui_may_update_scrollbars();",
          "1938: #endif",
          "1939: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1981:     return OK;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3854:     static void",
          "3856: {",
          "3857:     win_T *wp;",
          "3859:     if (frp->fr_layout == FR_LEAF)",
          "3860:     {",
          "3861:  wp = frp->fr_win;",
          "3862:  wp->w_status_height = STATUS_HEIGHT;",
          "3863:     }",
          "3864:     else if (frp->fr_layout == FR_ROW)",
          "3865:     {",
          "3867:  FOR_ALL_FRAMES(frp, frp->fr_child)",
          "3869:     }",
          "3870:     else // frp->fr_layout == FR_COL",
          "3871:     {",
          "3873:  for (frp = frp->fr_child; frp->fr_next != NULL; frp = frp->fr_next)",
          "3874:      ;",
          "3876:     }",
          "3877: }",
          "",
          "[Removed Lines]",
          "3855: frame_add_statusline(frame_T *frp)",
          "3868:      frame_add_statusline(frp);",
          "3875:  frame_add_statusline(frp);",
          "",
          "[Added Lines]",
          "3899: frame_add_statusline(frame_T *frp, int adjust_winheight)",
          "3906:         if (adjust_winheight && wp->w_status_height == 0",
          "3907:             && wp->w_height >= STATUS_HEIGHT) // don't make it negative",
          "3908:             wp->w_height -= STATUS_HEIGHT - wp->w_status_height;",
          "3915:      frame_add_statusline(frp, adjust_winheight);",
          "3922:  frame_add_statusline(frp, adjust_winheight);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7503: make_snapshot(int idx)",
          "7504: {",
          "7505:     clear_snapshot(curtab, idx);",
          "7507: }",
          "7511: {",
          "7513:     if (*frp == NULL)",
          "7515:     (*frp)->fr_layout = fr->fr_layout;",
          "7516:     (*frp)->fr_width = fr->fr_width;",
          "7517:     (*frp)->fr_height = fr->fr_height;",
          "7518:     if (fr->fr_next != NULL)",
          "7520:     if (fr->fr_child != NULL)",
          "7524: }",
          "",
          "[Removed Lines]",
          "7502:     void",
          "7506:     make_snapshot_rec(topframe, &curtab->tp_snapshot[idx]);",
          "7509:     static void",
          "7510: make_snapshot_rec(frame_T *fr, frame_T **frp)",
          "7514:  return;",
          "7519:  make_snapshot_rec(fr->fr_next, &((*frp)->fr_next));",
          "7521:  make_snapshot_rec(fr->fr_child, &((*frp)->fr_child));",
          "7522:     if (fr->fr_layout == FR_LEAF && fr->fr_win == curwin)",
          "7523:  (*frp)->fr_win = curwin;",
          "",
          "[Added Lines]",
          "7550:     int",
          "7554:     if (make_snapshot_rec(topframe, &curtab->tp_snapshot[idx], FALSE) == FAIL)",
          "7555:     {",
          "7556:  clear_snapshot(curtab, idx);",
          "7557:  return FAIL;",
          "7558:     }",
          "7559:     return OK;",
          "7562:     static int",
          "7563: make_snapshot_rec(frame_T *fr, frame_T **frp, int snap_wins)",
          "7567:  return FAIL;",
          "7572:     {",
          "7573:  if (make_snapshot_rec(fr->fr_next, &((*frp)->fr_next), snap_wins)",
          "7574:   == FAIL)",
          "7575:      return FAIL;",
          "7576:     }",
          "7578:     {",
          "7579:  if (make_snapshot_rec(fr->fr_child, &((*frp)->fr_child), snap_wins)",
          "7580:   == FAIL)",
          "7581:      return FAIL;",
          "7582:     }",
          "7583:     if (fr->fr_layout == FR_LEAF && (snap_wins || fr->fr_win == curwin))",
          "7584:  (*frp)->fr_win = fr->fr_win;",
          "7585:     return OK;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7657:     return wp;",
          "7658: }",
          "7660: #if defined(FEAT_GUI) || defined(PROTO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7727:     static frame_T *",
          "7728: make_full_snapshot(void)",
          "7729: {",
          "7730:     frame_T *frp;",
          "7732:     if (make_snapshot_rec(topframe, &frp, TRUE) == FAIL)",
          "7733:     {",
          "7734:  clear_snapshot_rec(frp);",
          "7735:  return NULL;",
          "7736:     }",
          "7737:     return frp;",
          "7738: }",
          "7748:     static void",
          "7749: restore_full_snapshot(frame_T *sn)",
          "7750: {",
          "7751:     if (sn == NULL)",
          "7752:  return;",
          "7754:     clear_snapshot_rec(topframe);",
          "7755:     restore_full_snapshot_rec(sn);",
          "7756:     curtab->tp_topframe = topframe = sn;",
          "7757:     last_status(FALSE);",
          "7762:     if (topframe->fr_width != Columns)",
          "7763:     {",
          "7764:  frame_new_width(topframe, Columns, FALSE, TRUE);",
          "7765:  if (!frame_check_width(topframe, Columns))",
          "7766:      frame_new_width(topframe, Columns, FALSE, FALSE);",
          "7767:     }",
          "7768:     if (topframe->fr_height != ROWS_AVAIL)",
          "7769:     {",
          "7770:  frame_new_height(topframe, ROWS_AVAIL, FALSE, TRUE);",
          "7771:  if (!frame_check_height(topframe, ROWS_AVAIL))",
          "7772:      frame_new_height(topframe, ROWS_AVAIL, FALSE, FALSE);",
          "7773:     }",
          "7775:     win_comp_pos();",
          "7776: }",
          "7778:     static void",
          "7779: restore_full_snapshot_rec(frame_T *sn)",
          "7780: {",
          "7781:     if (sn == NULL)",
          "7782:  return;",
          "7784:     if (sn->fr_child != NULL)",
          "7785:  sn->fr_child->fr_parent = sn;",
          "7786:     if (sn->fr_next != NULL)",
          "7787:     {",
          "7788:  sn->fr_next->fr_parent = sn->fr_parent;",
          "7789:  sn->fr_next->fr_prev = sn;",
          "7790:     }",
          "7791:     if (sn->fr_win != NULL)",
          "7792:     {",
          "7793:  sn->fr_win->w_frame = sn;",
          "7795:  frame_new_height(sn, sn->fr_height, FALSE, FALSE);",
          "7796:  frame_new_width(sn, sn->fr_width, FALSE, FALSE);",
          "7797:     }",
          "7798:     restore_full_snapshot_rec(sn->fr_child);",
          "7799:     restore_full_snapshot_rec(sn->fr_next);",
          "7800: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}