{
  "cve_id": "CVE-2024-2397",
  "cve_desc": "Due to a bug in packet data buffers management, the PPP printer in tcpdump can enter an infinite loop when reading a crafted DLT_PPP_SERIAL .pcap savefile.  This problem does not affect any tcpdump release, but it affected the git master branch from 2023-06-05 to 2024-03-21.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "b9811ef5bb1b7d45a90e042f81f3aaf233c8bcb2",
  "patch_info": {
    "commit_hash": "b9811ef5bb1b7d45a90e042f81f3aaf233c8bcb2",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/b9811ef5bb1b7d45a90e042f81f3aaf233c8bcb2",
    "files": [
      "print-ppp.c",
      "print.c"
    ],
    "message": "ppp: use the buffer stack for the de-escaping buffer.\n\nThis both saves the buffer for freeing later and saves the packet\npointer and snapend to be restored when packet processing is complete,\neven if an exception is thrown with longjmp.\n\nThis means that the hex/ASCII printing in pretty_print_packet()\nprocesses the packet data as captured or read from the savefile, rather\nthan as modified by the PPP printer, so that the bounds checking is\ncorrect.\n\nThat fixes CVE-2024-2397, which was caused by an exception being thrown\nby the hex/ASCII printer (which should only happen if those routines are\ncalled by a packet printer, not if they're called for the -X/-x/-A\nflag), which jumps back to the setjmp() that surrounds the packet\nprinter.  Hilarity^Winfinite looping ensues.\n\nAlso, restore ndo->ndo_packetp before calling the hex/ASCII printing\nroutine, in case nd_pop_all_packet_info() didn't restore it.",
    "before_after_code_files": [
      "print-ppp.c||print-ppp.c",
      "print.c||print.c"
    ]
  },
  "patch_diff": {
    "print-ppp.c||print-ppp.c": [
      "File: print-ppp.c -> print-ppp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #include \"netdissect-stdinc.h\"",
      "40: #include \"netdissect.h\"",
      "41: #include \"extract.h\"",
      "42: #include \"addrtoname.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: #include <stdlib.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1358:  u_char *b, *t, c;",
      "1359:  const u_char *s;",
      "1360:  u_int i, proto;",
      "1363:  if (caplen == 0)",
      "1364:   return;",
      "",
      "[Removed Lines]",
      "1361:  const void *sb, *se;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1366:         if (length == 0)",
      "1367:                 return;",
      "",
      "[Removed Lines]",
      "1369:  b = (u_char *)nd_malloc(ndo, caplen);",
      "1370:  if (b == NULL)",
      "1371:   return;",
      "",
      "[Added Lines]",
      "1370:  b = (u_char *)malloc(caplen);",
      "1371:  if (b == NULL) {",
      "1372:   (*ndo->ndo_error)(ndo, S_ERR_ND_MEM_ALLOC,",
      "1373:    \"%s: malloc\", __func__);",
      "1374:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1389:  }",
      "1399:  length = ND_BYTES_AVAILABLE_AFTER(b);",
      "",
      "[Removed Lines]",
      "1395:  sb = ndo->ndo_packetp;",
      "1396:  se = ndo->ndo_snapend;",
      "1397:  ndo->ndo_packetp = b;",
      "1398:  ndo->ndo_snapend = t;",
      "",
      "[Added Lines]",
      "1399:  if (!nd_push_buffer(ndo, b, b, (u_int)(t - b))) {",
      "1400:   free(b);",
      "1401:   (*ndo->ndo_error)(ndo, S_ERR_ND_MEM_ALLOC,",
      "1402:    \"%s: can't push buffer on buffer stack\", __func__);",
      "1403:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1437:         }",
      "1439: cleanup:",
      "1442:         return;",
      "1444: trunc:",
      "1447:  nd_print_trunc(ndo);",
      "1448: }",
      "",
      "[Removed Lines]",
      "1440:  ndo->ndo_packetp = sb;",
      "1441:  ndo->ndo_snapend = se;",
      "1445:  ndo->ndo_packetp = sb;",
      "1446:  ndo->ndo_snapend = se;",
      "",
      "[Added Lines]",
      "1445:  nd_pop_packet_info(ndo);",
      "1449:  nd_pop_packet_info(ndo);",
      "",
      "---------------"
    ],
    "print.c||print.c": [
      "File: print.c -> print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "431:  nd_pop_all_packet_info(ndo);",
      "437:  ndo->ndo_snapend = sp + h->caplen;",
      "438:  if (ndo->ndo_Xflag) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:  ndo->ndo_packetp = sp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9bff173f9833b5532f3b6dce8c049e955140169",
      "candidate_info": {
        "commit_hash": "e9bff173f9833b5532f3b6dce8c049e955140169",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/e9bff173f9833b5532f3b6dce8c049e955140169",
        "files": [
          "print-ppp.c",
          "print.c"
        ],
        "message": "ppp: use the buffer stack for the de-escaping buffer.\n\nThis both saves the buffer for freeing later and saves the packet\npointer and snapend to be restored when packet processing is complete,\neven if an exception is thrown with longjmp.\n\nThis means that the hex/ASCII printing in pretty_print_packet()\nprocesses the packet data as captured or read from the savefile, rather\nthan as modified by the PPP printer, so that the bounds checking is\ncorrect.\n\nThat fixes CVE-2024-2397, which was caused by an exception being thrown\nby the hex/ASCII printer (which should only happen if those routines are\ncalled by a packet printer, not if they're called for the -X/-x/-A\nflag), which jumps back to the setjmp() that surrounds the packet\nprinter.  Hilarity^Winfinite looping ensues.\n\nAlso, restore ndo->ndo_packetp before calling the hex/ASCII printing\nroutine, in case nd_pop_all_packet_info() didn't restore it.\n\n(cherry picked from commit b9811ef5bb1b7d45a90e042f81f3aaf233c8bcb2)",
        "before_after_code_files": [
          "print-ppp.c||print-ppp.c",
          "print.c||print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "print-ppp.c||print-ppp.c",
            "print.c||print.c"
          ],
          "candidate": [
            "print-ppp.c||print-ppp.c",
            "print.c||print.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ppp.c||print-ppp.c": [
          "File: print-ppp.c -> print-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include \"netdissect-stdinc.h\"",
          "40: #ifdef __bsdi__",
          "41: #include <net/slcompress.h>",
          "42: #include <net/if_ppp.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1363:  u_char *b, *t, c;",
          "1364:  const u_char *s;",
          "1365:  u_int i, proto;",
          "1368:  if (caplen == 0)",
          "1369:   return;",
          "",
          "[Removed Lines]",
          "1366:  const void *sb, *se;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1371:         if (length == 0)",
          "1372:                 return;",
          "",
          "[Removed Lines]",
          "1374:  b = (u_char *)nd_malloc(ndo, caplen);",
          "1375:  if (b == NULL)",
          "1376:   return;",
          "",
          "[Added Lines]",
          "1375:  b = (u_char *)malloc(caplen);",
          "1376:  if (b == NULL) {",
          "1377:   (*ndo->ndo_error)(ndo, S_ERR_ND_MEM_ALLOC,",
          "1378:    \"%s: malloc\", __func__);",
          "1379:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1394:  }",
          "1404:  length = ND_BYTES_AVAILABLE_AFTER(b);",
          "",
          "[Removed Lines]",
          "1400:  sb = ndo->ndo_packetp;",
          "1401:  se = ndo->ndo_snapend;",
          "1402:  ndo->ndo_packetp = b;",
          "1403:  ndo->ndo_snapend = t;",
          "",
          "[Added Lines]",
          "1404:  if (!nd_push_buffer(ndo, b, b, (u_int)(t - b))) {",
          "1405:   free(b);",
          "1406:   (*ndo->ndo_error)(ndo, S_ERR_ND_MEM_ALLOC,",
          "1407:    \"%s: can't push buffer on buffer stack\", __func__);",
          "1408:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1442:         }",
          "1444: cleanup:",
          "1447:         return;",
          "1449: trunc:",
          "1452:  nd_print_trunc(ndo);",
          "1453: }",
          "",
          "[Removed Lines]",
          "1445:  ndo->ndo_packetp = sb;",
          "1446:  ndo->ndo_snapend = se;",
          "1450:  ndo->ndo_packetp = sb;",
          "1451:  ndo->ndo_snapend = se;",
          "",
          "[Added Lines]",
          "1450:  nd_pop_packet_info(ndo);",
          "1454:  nd_pop_packet_info(ndo);",
          "",
          "---------------"
        ],
        "print.c||print.c": [
          "File: print.c -> print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:  nd_pop_all_packet_info(ndo);",
          "449:  ndo->ndo_snapend = sp + h->caplen;",
          "450:  if (ndo->ndo_Xflag) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:  ndo->ndo_packetp = sp;",
          "",
          "---------------"
        ]
      }
    }
  ]
}