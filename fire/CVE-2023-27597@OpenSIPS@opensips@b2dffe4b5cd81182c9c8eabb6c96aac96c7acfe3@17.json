{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81c2e75097a74b4937400a5436e6d7a91d775dca",
      "candidate_info": {
        "commit_hash": "81c2e75097a74b4937400a5436e6d7a91d775dca",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/81c2e75097a74b4937400a5436e6d7a91d775dca",
        "files": [
          "modules/mi_script/mi_script.c"
        ],
        "message": "mi_script: force a positive value in eventfd\n\nThanks go to Suchi Sahoo from Five9 for reporting it\n\n(cherry picked from commit b2c6ce6551f6469e559599bfc47d314186755f36)",
        "before_after_code_files": [
          "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c": [
          "File: modules/mi_script/mi_script.c -> modules/mi_script/mi_script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551: static void mi_script_async_resume_job(int sender, void *param)",
          "552: {",
          "553:  int ret;",
          "555:  struct mi_script_async_job *job = (struct mi_script_async_job *)param;",
          "557:  do {",
          "",
          "[Removed Lines]",
          "554:  unsigned long r;",
          "",
          "[Added Lines]",
          "554:  static unsigned long r = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b7559920bd650042ef23f61d554c3e40674ca99",
      "candidate_info": {
        "commit_hash": "6b7559920bd650042ef23f61d554c3e40674ca99",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6b7559920bd650042ef23f61d554c3e40674ca99",
        "files": [
          "modules/db_virtual/db_virtual.c"
        ],
        "message": "[db_virtual] fixed the MI db_get output\n\nFix typos leading to bad json structure\nReported by @bctff\nCloses opensips-cli/#94\n\n(cherry picked from commit 96d8113e9da6f01dc1222364b80d975284d42336)",
        "before_after_code_files": [
          "modules/db_virtual/db_virtual.c||modules/db_virtual/db_virtual.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/db_virtual/db_virtual.c||modules/db_virtual/db_virtual.c": [
          "File: modules/db_virtual/db_virtual.c -> modules/db_virtual/db_virtual.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:             buf,strlen(buf)) < 0)",
          "544:             goto error;",
          "547:         if (!dbs_arr)",
          "548:             goto error;",
          "",
          "[Removed Lines]",
          "546:         dbs_arr = add_mi_array(resp_obj, MI_SSTR(\"DBS\"));",
          "",
          "[Added Lines]",
          "546:         dbs_arr = add_mi_array(set_item, MI_SSTR(\"DBS\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:             if (!db_item)",
          "553:                 goto error;",
          "556:                 goto error;",
          "559:                 global->set_list[i].db_list[j].db_url.s,",
          "560:                 global->set_list[i].db_list[j].db_url.len) < 0)",
          "561:                 goto error;",
          "",
          "[Removed Lines]",
          "555:             if (add_mi_number(set_item, MI_SSTR(\"index\"), i) < 0)",
          "558:             if (add_mi_string(set_item, MI_SSTR(\"name\"),",
          "",
          "[Added Lines]",
          "555:             if (add_mi_number(db_item, MI_SSTR(\"index\"), j) < 0)",
          "558:             if (add_mi_string(db_item, MI_SSTR(\"name\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "564:             may_use = (global->set_list[i].db_list[j].flags & MAY_USE) ? 1 : 0;",
          "565:             recon = (global->set_list[i].db_list[j].flags & RERECONNECT) ? 1 :0;",
          "568:                 goto error;",
          "570:                 goto error;",
          "572:                 goto error;",
          "573:         }",
          "574:     }",
          "",
          "[Removed Lines]",
          "567:             if (add_mi_number(set_item, MI_SSTR(\"can\"), can_use) < 0)",
          "569:             if (add_mi_number(set_item, MI_SSTR(\"may\"), may_use) < 0)",
          "571:             if (add_mi_number(set_item, MI_SSTR(\"r_rec\"), recon) < 0)",
          "",
          "[Added Lines]",
          "567:             if (add_mi_number(db_item, MI_SSTR(\"can\"), can_use) < 0)",
          "569:             if (add_mi_number(db_item, MI_SSTR(\"may\"), may_use) < 0)",
          "571:             if (add_mi_number(db_item, MI_SSTR(\"r_rec\"), recon) < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0823797713251ae530e06a622ea6f77fb923fac3",
      "candidate_info": {
        "commit_hash": "0823797713251ae530e06a622ea6f77fb923fac3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/0823797713251ae530e06a622ea6f77fb923fac3",
        "files": [
          "modules/b2b_entities/dlg.c"
        ],
        "message": "b2b_entities: fix accessing $b2b_logic variables for PRACK requests\n\nFixes #2686\n\n(cherry picked from commit 3b6cf1640fc569a721574faaff4132b2e2d7c477)",
        "before_after_code_files": [
          "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/dlg.c||modules/b2b_entities/dlg.c": [
          "File: modules/b2b_entities/dlg.c -> modules/b2b_entities/dlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:    return SCB_RUN_ALL;",
          "995:   }",
          "996:  }",
          "997:  if (method_value == METHOD_PRACK)",
          "998:  {",
          "999:   lock_release(&table[hash_index].lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "998:  ctx = b2b_get_context();",
          "999:  if (!ctx) {",
          "1000:   LM_ERR(\"Failed to get b2b context\\n\");",
          "1001:   lock_release(&server_htable[hash_index].lock);",
          "1002:   return SCB_DROP_MSG;",
          "1003:  }",
          "1004:  if (dlg->param.s && pkg_str_dup(&ctx->b2bl_key, &dlg->param) < 0) {",
          "1005:   LM_ERR(\"Failed to copy b2b_logic key to b2b context\\n\");",
          "1006:   lock_release(&server_htable[hash_index].lock);",
          "1007:   return SCB_DROP_MSG;",
          "1008:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1015:   goto done;",
          "1016:  }",
          "1030:  if(dlg->state < B2B_CONFIRMED)",
          "1031:  {",
          "1032:   if(method_value != METHOD_UPDATE)",
          "",
          "[Removed Lines]",
          "1018:  ctx = b2b_get_context();",
          "1019:  if (!ctx) {",
          "1020:   LM_ERR(\"Failed to get b2b context\\n\");",
          "1021:   lock_release(&server_htable[hash_index].lock);",
          "1022:   return SCB_DROP_MSG;",
          "1023:  }",
          "1024:  if (dlg->param.s && pkg_str_dup(&ctx->b2bl_key, &dlg->param) < 0) {",
          "1025:   LM_ERR(\"Failed to copy b2b_logic key to b2b context\\n\");",
          "1026:   lock_release(&server_htable[hash_index].lock);",
          "1027:   return SCB_DROP_MSG;",
          "1028:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40290bc41058a4f12b737c6ad86f2c80c017c61e",
      "candidate_info": {
        "commit_hash": "40290bc41058a4f12b737c6ad86f2c80c017c61e",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/40290bc41058a4f12b737c6ad86f2c80c017c61e",
        "files": [
          "modules/mi_script/mi_script.c"
        ],
        "message": "mi_script: Fix error log on mi() with NULL output pvars\n\nProper handling for the 2nd parameter NULL case.  Fixes this error:\n\nJun  7 06:36:23 [61] ERROR:core:pv_set_value: bad parameters\n\n(cherry picked from commit bdc51cee33eb18c42abb37fe432e2c8c033384fa)",
        "before_after_code_files": [
          "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/mi_script/mi_script.c||modules/mi_script/mi_script.c": [
          "File: modules/mi_script/mi_script.c -> modules/mi_script/mi_script.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:   tmp = cJSON_GetObjectItem(item, JSONRPC_ERR_MSG_S);",
          "408:   if (!tmp)",
          "410:   else",
          "411:    r = tmp->valuestring;",
          "412:  } else if (res) {",
          "",
          "[Removed Lines]",
          "409:    r = \"no error message provideded\";",
          "",
          "[Added Lines]",
          "409:    r = \"no error message provided\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:   mi_response_t *resp, pv_spec_p r)",
          "429: {",
          "430:  int ret, release;",
          "432:  char *res = NULL;",
          "434:  ret = mi_script_handle_response(resp, (r?&res:NULL), &release);",
          "443:  }",
          "447:  if (release)",
          "448:   cJSON_PurgeString(res);",
          "449:  return ret;",
          "",
          "[Removed Lines]",
          "431:  pv_value_t val;",
          "435:  if (res) {",
          "436:   val.rs.s = res;",
          "437:   val.rs.len = strlen(res);",
          "438:   val.flags = PV_VAL_STR;",
          "439:  } else {",
          "440:   val.rs.s = NULL;",
          "441:   val.rs.len = 0;",
          "442:   val.flags = PV_VAL_NULL;",
          "445:  if (pv_set_value(msg, r, 0, &val) < 0)",
          "446:   ret = -3;",
          "",
          "[Added Lines]",
          "435:  if (r) {",
          "436:   pv_value_t val;",
          "438:   if (res) {",
          "439:    val.rs.s = res;",
          "440:    val.rs.len = strlen(res);",
          "441:    val.flags = PV_VAL_STR;",
          "442:   } else {",
          "443:    val.rs.s = NULL;",
          "444:    val.rs.len = 0;",
          "445:    val.flags = PV_VAL_NULL;",
          "446:   }",
          "448:   if (pv_set_value(msg, r, 0, &val) < 0)",
          "449:    ret = -3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f569a584466e33188959bdc73aa254f380d5655d",
      "candidate_info": {
        "commit_hash": "f569a584466e33188959bdc73aa254f380d5655d",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/f569a584466e33188959bdc73aa254f380d5655d",
        "files": [
          "parser/parse_content.c"
        ],
        "message": "core: Fix Content-Length parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n        by Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-c6j5-f4h4-2xrq\n(cherry picked from commit 7cab422e2fc648f910abba34f3f0dbb3ae171ff5)",
        "before_after_code_files": [
          "parser/parse_content.c||parser/parse_content.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_content.c||parser/parse_content.c": [
          "File: parser/parse_content.c -> parser/parse_content.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:  size = 0;",
          "242:  number = 0;",
          "243:  while (p<end && *p>='0' && *p<='9') {",
          "247:     (int)(p-buffer),(int)(end-buffer), buffer);",
          "248:    return 0;",
          "249:   }",
          "250:   size ++;",
          "251:   p++;",
          "252:  }",
          "",
          "[Removed Lines]",
          "244:   number = number*10 + (*p)-'0';",
          "245:   if (number<0) {",
          "246:    LM_ERR(\"number overflow at pos %d in len number [%.*s]\\n\",",
          "",
          "[Added Lines]",
          "245:   if (number > 214748363) {",
          "246:    LM_ERR(\"integer overflow risk at pos %d in len number [%.*s]\\n\",",
          "251:   number = number*10 + (*p)-'0';",
          "",
          "---------------"
        ]
      }
    }
  ]
}