{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9fa1b4fc466e9857210fd6e87f1cbf0c234886ee",
      "candidate_info": {
        "commit_hash": "9fa1b4fc466e9857210fd6e87f1cbf0c234886ee",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9fa1b4fc466e9857210fd6e87f1cbf0c234886ee",
        "files": [
          "Lib/_pyrepl/historical_reader.py",
          "Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py",
          "Misc/NEWS.d/next/Library/2024-05-21-20-13-23.gh-issue-118911.iG8nMq.rst"
        ],
        "message": "[3.13] gh-118911: Trailing whitespace in a block shouldn't prevent the user from terminating the code block (GH-119355) (#119404)\n\n(cherry picked from commit 5091c4400c9ea2a2d1e4d89a28c9d0de2651fa6d)\n\nCo-authored-by: Aya Elsayed <ayah.ehab11@gmail.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/historical_reader.py||Lib/_pyrepl/historical_reader.py",
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py",
          "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/historical_reader.py||Lib/_pyrepl/historical_reader.py": [
          "File: Lib/_pyrepl/historical_reader.py -> Lib/_pyrepl/historical_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:         self.transient_history[self.historyi] = self.get_unicode()",
          "260:         buf = self.transient_history.get(i)",
          "261:         if buf is None:",
          "263:         self.buffer = list(buf)",
          "264:         self.historyi = i",
          "265:         self.pos = len(self.buffer)",
          "",
          "[Removed Lines]",
          "262:             buf = self.history[i]",
          "",
          "[Added Lines]",
          "262:             buf = self.history[i].rstrip()",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:         r: ReadlineAlikeReader",
          "245:         r = self.reader  # type: ignore[assignment]",
          "246:         r.dirty = True  # this is needed to hide the completion menu, if visible",
          "248:         # if there are already several lines and the cursor",
          "249:         # is not on the last one, always insert a new \\n.",
          "250:         text = r.get_unicode()",
          "251:         if \"\\n\" in r.buffer[r.pos :] or (",
          "252:             r.more_lines is not None and r.more_lines(text)",
          "253:         ):",
          "255:             # auto-indent the next line like the previous line",
          "256:             prevlinestart, indent = _get_previous_line_indent(r.buffer, r.pos)",
          "257:             r.insert(\"\\n\")",
          "",
          "[Removed Lines]",
          "247:         #",
          "254:             #",
          "",
          "[Added Lines]",
          "255:             def _newline_before_pos():",
          "256:                 before_idx = r.pos - 1",
          "257:                 while before_idx > 0 and text[before_idx].isspace():",
          "258:                     before_idx -= 1",
          "259:                 return text[before_idx : r.pos].count(\"\\n\") > 0",
          "261:             # if there's already a new line before the cursor then",
          "262:             # even if the cursor is followed by whitespace, we assume",
          "263:             # the user is trying to terminate the block",
          "264:             if _newline_before_pos() and text[r.pos:].isspace():",
          "265:                 self.finish = True",
          "266:                 return",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:             [",
          "406:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "407:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "411:                 Event(evt=\"key\", data=\"g\", raw=bytearray(b\"g\")),",
          "412:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "414:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "415:             ],",
          "416:         )",
          "",
          "[Removed Lines]",
          "408:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "409:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "410:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x7f\")),",
          "413:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "",
          "[Added Lines]",
          "408:                 Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\")),",
          "409:                 Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\")),",
          "410:                 Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\")),",
          "411:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x08\")),",
          "414:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x08\")),",
          "415:                 Event(evt=\"key\", data=\"delete\", raw=bytearray(b\"\\x7F\")),",
          "416:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"g\")),",
          "417:                 Event(evt=\"key\", data=\"backspace\", raw=bytearray(b\"\\x08\")),",
          "418:                 Event(evt=\"key\", data=\"p\", raw=bytearray(b\"p\")),",
          "419:                 Event(evt=\"key\", data=\"a\", raw=bytearray(b\"a\")),",
          "420:                 Event(evt=\"key\", data=\"s\", raw=bytearray(b\"s\")),",
          "421:                 Event(evt=\"key\", data=\"s\", raw=bytearray(b\"s\")),",
          "422:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:         output = multiline_input(reader)",
          "420:         self.assertEqual(output, \"def f():\\n    ...\\n    \")",
          "421:         output = multiline_input(reader)",
          "424:     def test_history_navigation_with_up_arrow(self):",
          "425:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "422:         self.assertEqual(output, \"def g():\\n    ...\\n    \")",
          "",
          "[Added Lines]",
          "431:         self.assertEqual(output, \"def g():\\n    pass\\n    \")",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_reader.py||Lib/test/test_pyrepl/test_reader.py": [
          "File: Lib/test/test_pyrepl/test_reader.py -> Lib/test/test_pyrepl/test_reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import itertools",
          "2: from unittest import TestCase",
          "5: from _pyrepl.console import Event",
          "",
          "[Removed Lines]",
          "4: from .support import handle_all_events, handle_events_narrow_console, code_to_events",
          "",
          "[Added Lines]",
          "2: import functools",
          "5: from .support import handle_all_events, handle_events_narrow_console, code_to_events, prepare_reader",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:         reader, _ = handle_all_events(events)",
          "135:         self.assert_screen_equals(reader, \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     def test_newline_within_block_trailing_whitespace(self):",
          "139:         # fmt: off",
          "140:         code = (",
          "141:             \"def foo():\\n\"",
          "142:                  \"a = 1\\n\"",
          "143:         )",
          "144:         # fmt: on",
          "146:         events = itertools.chain(",
          "147:             code_to_events(code),",
          "148:             [",
          "149:                 # go to the end of the first line",
          "150:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "151:                 Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\")),",
          "152:                 Event(evt=\"key\", data=\"\\x05\", raw=bytearray(b\"\\x1bO5\")),",
          "153:                 # new lines in-block shouldn't terminate the block",
          "154:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "155:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "156:                 # end of line 2",
          "157:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "158:                 Event(evt=\"key\", data=\"\\x05\", raw=bytearray(b\"\\x1bO5\")),",
          "159:                 # a double new line in-block should terminate the block",
          "160:                 #\u00a0even if its followed by whitespace",
          "161:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "162:                 Event(evt=\"key\", data=\"\\n\", raw=bytearray(b\"\\n\")),",
          "163:             ],",
          "164:         )",
          "166:         no_paste_reader = functools.partial(prepare_reader, paste_mode=False)",
          "167:         reader, _ = handle_all_events(events, prepare_reader=no_paste_reader)",
          "169:         expected = (",
          "170:             \"def foo():\\n\"",
          "171:             \"\\n\"",
          "172:             \"\\n\"",
          "173:             \"    a = 1\\n\"",
          "174:             \"    \\n\"",
          "175:             \"    \"    # HistoricalReader will trim trailing whitespace",
          "176:         )",
          "177:         self.assert_screen_equals(reader, expected)",
          "178:         self.assertTrue(reader.finished)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "825a5ae5d89547e2ec74ba7e665592eabe56c435",
      "candidate_info": {
        "commit_hash": "825a5ae5d89547e2ec74ba7e665592eabe56c435",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/825a5ae5d89547e2ec74ba7e665592eabe56c435",
        "files": [
          "Python/instrumentation.c"
        ],
        "message": "[3.13] gh-111997: Fix argument count for LINE event and clarify type of argument counts. (GH-119179) (GH-119575)\n\ngh-111997: Fix argument count for LINE event and clarify type of argument counts. (GH-119179)\n(cherry picked from commit 70b07aa4153c1a914a3d69307d5b258cf7ed16ab)\n\nCo-authored-by: scoder <stefan_ml@behnel.de>",
        "before_after_code_files": [
          "Python/instrumentation.c||Python/instrumentation.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/instrumentation.c||Python/instrumentation.c": [
          "File: Python/instrumentation.c -> Python/instrumentation.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "893: static int",
          "894: call_one_instrument(",
          "895:     PyInterpreterState *interp, PyThreadState *tstate, PyObject **args,",
          "897: {",
          "898:     assert(0 <= tool && tool < 8);",
          "899:     assert(tstate->tracing == 0);",
          "",
          "[Removed Lines]",
          "896:     Py_ssize_t nargsf, int8_t tool, int event)",
          "",
          "[Added Lines]",
          "896:     size_t nargsf, int8_t tool, int event)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1084:     args[2] = offset_obj;",
          "1085:     PyInterpreterState *interp = tstate->interp;",
          "1086:     uint8_t tools = get_tools_for_instruction(code, interp, offset, event);",
          "1088:     PyObject **callargs = &args[1];",
          "1089:     int err = 0;",
          "1090:     while (tools) {",
          "",
          "[Removed Lines]",
          "1087:     Py_ssize_t nargsf = nargs | PY_VECTORCALL_ARGUMENTS_OFFSET;",
          "",
          "[Added Lines]",
          "1087:     size_t nargsf = (size_t) nargs | PY_VECTORCALL_ARGUMENTS_OFFSET;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2439:         PyErr_SetString(PyExc_ValueError, \"offset must be non-negative\");",
          "2440:         return -1;",
          "2441:     }",
          "2445:     }",
          "2449:     PyObject **callargs = &args[1];",
          "2450:     int err = 0;",
          "",
          "[Removed Lines]",
          "2442:     PyObject *offset_obj = PyLong_FromLong(offset);",
          "2443:     if (offset_obj == NULL) {",
          "2444:         return -1;",
          "2446:     assert(args[2] == NULL);",
          "2447:     args[2] = offset_obj;",
          "2448:     Py_ssize_t nargsf = nargs | PY_VECTORCALL_ARGUMENTS_OFFSET;",
          "",
          "[Added Lines]",
          "2442:     if (event != PY_MONITORING_EVENT_LINE) {",
          "2443:         PyObject *offset_obj = PyLong_FromLong(offset);",
          "2444:         if (offset_obj == NULL) {",
          "2445:             return -1;",
          "2446:         }",
          "2447:         assert(args[2] == NULL);",
          "2448:         args[2] = offset_obj;",
          "2450:     size_t nargsf = (size_t) nargs | PY_VECTORCALL_ARGUMENTS_OFFSET;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2565:     if (lno == NULL) {",
          "2566:         return -1;",
          "2567:     }",
          "2570:                                        PY_MONITORING_EVENT_LINE);",
          "2571:     Py_DECREF(lno);",
          "2572:     return res;",
          "",
          "[Removed Lines]",
          "2568:     PyObject *args[4] = { NULL, NULL, NULL, lno };",
          "2569:     int res= capi_call_instrumentation(state, codelike, offset, args, 3,",
          "",
          "[Added Lines]",
          "2570:     PyObject *args[3] = { NULL, NULL, lno };",
          "2571:     int res= capi_call_instrumentation(state, codelike, offset, args, 2,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e5caa72c2556c4ba1fb90dfc6593bb848a6c116",
      "candidate_info": {
        "commit_hash": "8e5caa72c2556c4ba1fb90dfc6593bb848a6c116",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8e5caa72c2556c4ba1fb90dfc6593bb848a6c116",
        "files": [
          "Include/Python.h",
          "Misc/NEWS.d/next/Build/2024-06-11-00-38-05.gh-issue-120326.JHSDF1.rst"
        ],
        "message": "[3.13] gh-120326: Include <intrin.h> on Windows with Free Threading (GH-120329) (#120414)\n\ngh-120326: Include <intrin.h> on Windows with Free Threading (GH-120329)\n(cherry picked from commit 939c201e00943c6dc2d515185168c30606ae522c)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Include/Python.h||Include/Python.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/Python.h||Include/Python.h": [
          "File: Include/Python.h -> Include/Python.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #  error \"The limited API is not currently supported in the free-threaded build\"",
          "52: #endif",
          "55: #include \"pyport.h\"",
          "56: #include \"pymacro.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #if defined(Py_GIL_DISABLED) && defined(_MSC_VER)",
          "55: #  include <intrin.h>             // __readgsqword()",
          "56: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feaecf8c33444d44a5a554680f270c5c614185d3",
      "candidate_info": {
        "commit_hash": "feaecf8c33444d44a5a554680f270c5c614185d3",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/feaecf8c33444d44a5a554680f270c5c614185d3",
        "files": [
          "Lib/logging/config.py",
          "Lib/test/test_logging.py",
          "Misc/NEWS.d/next/Library/2024-05-09-21-36-11.gh-issue-118868.uckxxP.rst"
        ],
        "message": "[3.13] gh-118868: logging QueueHandler fix passing of kwargs (GH-118869) (GH-120032)\n\n(cherry picked from commit dce14bb2dce7887df40ae5c13b0d13e0dafceff7)",
        "before_after_code_files": [
          "Lib/logging/config.py||Lib/logging/config.py",
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/logging/config.py||Lib/logging/config.py": [
          "File: Lib/logging/config.py -> Lib/logging/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:     def _configure_queue_handler(self, klass, **kwargs):",
          "727:         if 'queue' in kwargs:",
          "729:         else:",
          "730:             q = queue.Queue()  # unbounded",
          "738:         handler.listener = listener",
          "739:         return handler",
          "",
          "[Removed Lines]",
          "728:             q = kwargs['queue']",
          "731:         rhl = kwargs.get('respect_handler_level', False)",
          "732:         if 'listener' in kwargs:",
          "733:             lklass = kwargs['listener']",
          "734:         else:",
          "735:             lklass = logging.handlers.QueueListener",
          "736:         listener = lklass(q, *kwargs.get('handlers', []), respect_handler_level=rhl)",
          "737:         handler = klass(q)",
          "",
          "[Added Lines]",
          "728:             q = kwargs.pop('queue')",
          "732:         rhl = kwargs.pop('respect_handler_level', False)",
          "733:         lklass = kwargs.pop('listener', logging.handlers.QueueListener)",
          "734:         handlers = kwargs.pop('handlers', [])",
          "736:         listener = lklass(q, *handlers, respect_handler_level=rhl)",
          "737:         handler = klass(q, **kwargs)",
          "",
          "---------------"
        ],
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3976:         }",
          "3977:         logging.config.dictConfig(config)",
          "3979: class ManagerTest(BaseTest):",
          "3980:     def test_manager_loggerclass(self):",
          "3981:         logged = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3979:     # gh-118868: check if kwargs are passed to logging QueueHandler",
          "3980:     def test_kwargs_passing(self):",
          "3981:         class CustomQueueHandler(logging.handlers.QueueHandler):",
          "3982:             def __init__(self, *args, **kwargs):",
          "3983:                 super().__init__(queue.Queue())",
          "3984:                 self.custom_kwargs = kwargs",
          "3986:         custom_kwargs = {'foo': 'bar'}",
          "3988:         config = {",
          "3989:             'version': 1,",
          "3990:             'handlers': {",
          "3991:                 'custom': {",
          "3992:                     'class': CustomQueueHandler,",
          "3994:                 },",
          "3995:             },",
          "3996:             'root': {",
          "3997:                 'level': 'DEBUG',",
          "3998:                 'handlers': ['custom']",
          "3999:             }",
          "4000:         }",
          "4002:         logging.config.dictConfig(config)",
          "4004:         handler = logging.getHandlerByName('custom')",
          "4005:         self.assertEqual(handler.custom_kwargs, custom_kwargs)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64a61ca13c221bf6a2cba4704e1d822b2c36af27",
      "candidate_info": {
        "commit_hash": "64a61ca13c221bf6a2cba4704e1d822b2c36af27",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/64a61ca13c221bf6a2cba4704e1d822b2c36af27",
        "files": [
          "Lib/_pydatetime.py",
          "Lib/test/datetimetester.py",
          "Misc/NEWS.d/next/Library/2024-06-08-14-36-40.gh-issue-120268.MNpd1q.rst"
        ],
        "message": "[3.13] gh-120268: Prohibit passing ``None`` to ``_pydatetime.date.fromtimestamp`` (GH-120269) (GH-120282)\n\nThis makes the pure Python implementation consistent with the C implementation.\n(cherry picked from commit 34f5ae69fe9ab0f5b23311d5c396d0cbb5902913)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Lib/_pydatetime.py||Lib/_pydatetime.py",
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pydatetime.py||Lib/_pydatetime.py": [
          "File: Lib/_pydatetime.py -> Lib/_pydatetime.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:     @classmethod",
          "967:     def fromtimestamp(cls, t):",
          "968:         \"Construct a date from a POSIX timestamp (like time.time()).\"",
          "969:         y, m, d, hh, mm, ss, weekday, jday, dst = _time.localtime(t)",
          "970:         return cls(y, m, d)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "969:         if t is None:",
          "970:             raise TypeError(\"'NoneType' object cannot be interpreted as an integer\")",
          "",
          "---------------"
        ],
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1355:             self.assertRaises(OverflowError, self.theclass.fromtimestamp,",
          "1356:                               insane)",
          "1358:     def test_today(self):",
          "1359:         import time",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358:     def test_fromtimestamp_with_none_arg(self):",
          "1359:         # See gh-120268 for more details",
          "1360:         with self.assertRaises(TypeError):",
          "1361:             self.theclass.fromtimestamp(None)",
          "",
          "---------------"
        ]
      }
    }
  ]
}