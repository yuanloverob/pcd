{
  "cve_id": "CVE-2024-21640",
  "cve_desc": "Chromium Embedded Framework (CEF) is a simple framework for embedding Chromium-based browsers in other applications.`CefVideoConsumerOSR::OnFrameCaptured` does not check `pixel_format` properly, which leads to out-of-bounds read out of the sandbox. This vulnerability was patched in commit 1f55d2e.\n\n",
  "repo": "chromiumembedded/cef",
  "patch_hash": "1f55d2e12f62cfdfbf9da6968fde2f928982670b",
  "patch_info": {
    "commit_hash": "1f55d2e12f62cfdfbf9da6968fde2f928982670b",
    "repo": "chromiumembedded/cef",
    "commit_url": "https://github.com/chromiumembedded/cef/commit/1f55d2e12f62cfdfbf9da6968fde2f928982670b",
    "files": [
      "libcef/browser/osr/host_display_client_osr.cc",
      "libcef/browser/osr/video_consumer_osr.cc"
    ],
    "message": "osr: Fix potential shared memory OOB access",
    "before_after_code_files": [
      "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
      "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
    ]
  },
  "patch_diff": {
    "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc": [
      "File: libcef/browser/osr/host_display_client_osr.cc -> libcef/browser/osr/host_display_client_osr.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:     base::UnsafeSharedMemoryRegion region) {",
      "77:   size_t expected_bytes;",
      "81:     return;",
      "82:   }",
      "84:   pixel_size_ = pixel_size;",
      "87: }",
      "89: void CefLayeredWindowUpdaterOSR::Draw(const gfx::Rect& damage_rect,",
      "",
      "[Removed Lines]",
      "78:   bool size_result = viz::ResourceSizes::MaybeSizeInBytes(",
      "79:       pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes);",
      "80:   if (!size_result) {",
      "85:   shared_memory_ = region.Map();",
      "86:   DCHECK(shared_memory_.IsValid());",
      "",
      "[Added Lines]",
      "78:   if (!viz::ResourceSizes::MaybeSizeInBytes(",
      "79:           pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes)) {",
      "80:     DLOG(ERROR) << \"OnAllocatedSharedMemory with size that overflows\";",
      "81:     return;",
      "82:   }",
      "84:   auto mapping = region.Map();",
      "85:   if (!mapping.IsValid()) {",
      "86:     DLOG(ERROR) << \"Shared memory mapping failed.\";",
      "87:     return;",
      "88:   }",
      "89:   if (mapping.size() < expected_bytes) {",
      "90:     DLOG(ERROR) << \"Shared memory size was less than expected.\";",
      "95:   shared_memory_ = std::move(mapping);",
      "",
      "---------------"
    ],
    "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc": [
      "File: libcef/browser/osr/video_consumer_osr.cc -> libcef/browser/osr/video_consumer_osr.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "88:         callbacks) {",
      "89:   ScopedVideoFrameDone scoped_done(std::move(callbacks));",
      "91:   CHECK(data->is_read_only_shmem_region());",
      "92:   base::ReadOnlySharedMemoryRegion& shmem_region =",
      "93:       data->get_read_only_shmem_region();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:   if (info->pixel_format != media::PIXEL_FORMAT_ARGB) {",
      "92:     DLOG(ERROR) << \"Unsupported pixel format \" << info->pixel_format;",
      "93:     return;",
      "94:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c23b20255086916bf1a01c536269d72d72a7324",
      "candidate_info": {
        "commit_hash": "2c23b20255086916bf1a01c536269d72d72a7324",
        "repo": "chromiumembedded/cef",
        "commit_url": "https://github.com/chromiumembedded/cef/commit/2c23b20255086916bf1a01c536269d72d72a7324",
        "files": [
          "libcef/browser/osr/host_display_client_osr.cc",
          "libcef/browser/osr/video_consumer_osr.cc"
        ],
        "message": "osr: Fix potential shared memory OOB access",
        "before_after_code_files": [
          "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
          "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
            "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
          ],
          "candidate": [
            "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
            "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
          ]
        }
      },
      "candidate_diff": {
        "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc": [
          "File: libcef/browser/osr/host_display_client_osr.cc -> libcef/browser/osr/host_display_client_osr.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     base::UnsafeSharedMemoryRegion region) {",
          "77:   size_t expected_bytes;",
          "81:     return;",
          "82:   }",
          "84:   pixel_size_ = pixel_size;",
          "87: }",
          "89: void CefLayeredWindowUpdaterOSR::Draw(const gfx::Rect& damage_rect,",
          "",
          "[Removed Lines]",
          "78:   bool size_result = viz::ResourceSizes::MaybeSizeInBytes(",
          "79:       pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes);",
          "80:   if (!size_result) {",
          "85:   shared_memory_ = region.Map();",
          "86:   DCHECK(shared_memory_.IsValid());",
          "",
          "[Added Lines]",
          "78:   if (!viz::ResourceSizes::MaybeSizeInBytes(",
          "79:           pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes)) {",
          "80:     DLOG(ERROR) << \"OnAllocatedSharedMemory with size that overflows\";",
          "81:     return;",
          "82:   }",
          "84:   auto mapping = region.Map();",
          "85:   if (!mapping.IsValid()) {",
          "86:     DLOG(ERROR) << \"Shared memory mapping failed.\";",
          "87:     return;",
          "88:   }",
          "89:   if (mapping.size() < expected_bytes) {",
          "90:     DLOG(ERROR) << \"Shared memory size was less than expected.\";",
          "95:   shared_memory_ = std::move(mapping);",
          "",
          "---------------"
        ],
        "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc": [
          "File: libcef/browser/osr/video_consumer_osr.cc -> libcef/browser/osr/video_consumer_osr.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         callbacks) {",
          "89:   ScopedVideoFrameDone scoped_done(std::move(callbacks));",
          "91:   CHECK(data->is_read_only_shmem_region());",
          "92:   base::ReadOnlySharedMemoryRegion& shmem_region =",
          "93:       data->get_read_only_shmem_region();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   if (info->pixel_format != media::PIXEL_FORMAT_ARGB) {",
          "92:     DLOG(ERROR) << \"Unsupported pixel format \" << info->pixel_format;",
          "93:     return;",
          "94:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcbf3c4ec302adc4f67a50bf4cff68b8d6e3f6f5",
      "candidate_info": {
        "commit_hash": "fcbf3c4ec302adc4f67a50bf4cff68b8d6e3f6f5",
        "repo": "chromiumembedded/cef",
        "commit_url": "https://github.com/chromiumembedded/cef/commit/fcbf3c4ec302adc4f67a50bf4cff68b8d6e3f6f5",
        "files": [
          "libcef/browser/osr/host_display_client_osr.cc",
          "libcef/browser/osr/video_consumer_osr.cc"
        ],
        "message": "osr: Fix potential shared memory OOB access",
        "before_after_code_files": [
          "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
          "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
            "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
          ],
          "candidate": [
            "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc",
            "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc"
          ]
        }
      },
      "candidate_diff": {
        "libcef/browser/osr/host_display_client_osr.cc||libcef/browser/osr/host_display_client_osr.cc": [
          "File: libcef/browser/osr/host_display_client_osr.cc -> libcef/browser/osr/host_display_client_osr.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     base::UnsafeSharedMemoryRegion region) {",
          "77:   size_t expected_bytes;",
          "81:     return;",
          "82:   }",
          "84:   pixel_size_ = pixel_size;",
          "87: }",
          "89: void CefLayeredWindowUpdaterOSR::Draw(const gfx::Rect& damage_rect,",
          "",
          "[Removed Lines]",
          "78:   bool size_result = viz::ResourceSizes::MaybeSizeInBytes(",
          "79:       pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes);",
          "80:   if (!size_result) {",
          "85:   shared_memory_ = region.Map();",
          "86:   DCHECK(shared_memory_.IsValid());",
          "",
          "[Added Lines]",
          "78:   if (!viz::ResourceSizes::MaybeSizeInBytes(",
          "79:           pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes)) {",
          "80:     DLOG(ERROR) << \"OnAllocatedSharedMemory with size that overflows\";",
          "81:     return;",
          "82:   }",
          "84:   auto mapping = region.Map();",
          "85:   if (!mapping.IsValid()) {",
          "86:     DLOG(ERROR) << \"Shared memory mapping failed.\";",
          "87:     return;",
          "88:   }",
          "89:   if (mapping.size() < expected_bytes) {",
          "90:     DLOG(ERROR) << \"Shared memory size was less than expected.\";",
          "95:   shared_memory_ = std::move(mapping);",
          "",
          "---------------"
        ],
        "libcef/browser/osr/video_consumer_osr.cc||libcef/browser/osr/video_consumer_osr.cc": [
          "File: libcef/browser/osr/video_consumer_osr.cc -> libcef/browser/osr/video_consumer_osr.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         callbacks) {",
          "89:   ScopedVideoFrameDone scoped_done(std::move(callbacks));",
          "91:   CHECK(data->is_read_only_shmem_region());",
          "92:   base::ReadOnlySharedMemoryRegion& shmem_region =",
          "93:       data->get_read_only_shmem_region();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   if (info->pixel_format != media::PIXEL_FORMAT_ARGB) {",
          "92:     DLOG(ERROR) << \"Unsupported pixel format \" << info->pixel_format;",
          "93:     return;",
          "94:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}