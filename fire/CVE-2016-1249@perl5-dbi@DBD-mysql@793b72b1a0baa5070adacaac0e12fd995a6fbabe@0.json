{
  "cve_id": "CVE-2016-1249",
  "cve_desc": "The DBD::mysql module before 4.039 for Perl, when using server-side prepared statement support, allows attackers to cause a denial of service (out-of-bounds read) via vectors involving an unaligned number of placeholders in WHERE condition and output fields in SELECT expression.",
  "repo": "perl5-dbi/DBD-mysql",
  "patch_hash": "793b72b1a0baa5070adacaac0e12fd995a6fbabe",
  "patch_info": {
    "commit_hash": "793b72b1a0baa5070adacaac0e12fd995a6fbabe",
    "repo": "perl5-dbi/DBD-mysql",
    "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/793b72b1a0baa5070adacaac0e12fd995a6fbabe",
    "files": [
      "Changes",
      "dbdimp.c",
      "lib/Bundle/DBD/mysql.pm",
      "lib/DBD/mysql.pm",
      "mysql.xs",
      "t/40server_prepare_crash.t"
    ],
    "message": "Added Pali's fix for CVE-2016-1249",
    "before_after_code_files": [
      "dbdimp.c||dbdimp.c",
      "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
      "lib/DBD/mysql.pm||lib/DBD/mysql.pm",
      "mysql.xs||mysql.xs",
      "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
    ]
  },
  "patch_diff": {
    "dbdimp.c||dbdimp.c": [
      "File: dbdimp.c -> dbdimp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   int limit_flag=0;",
      "2751: #endif",
      "2752: #endif",
      "2754:   MYSQL_BIND *bind, *bind_end;",
      "2755:   imp_sth_phb_t *fbind;",
      "2756: #endif",
      "",
      "[Removed Lines]",
      "2753:   int col_type, prepare_retval;",
      "",
      "[Added Lines]",
      "2753:   int prepare_retval;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2947:       if (DBIc_NUM_PARAMS(imp_sth) > 0)",
      "2948:       {",
      "2951:         imp_sth->bind=            alloc_bind(DBIc_NUM_PARAMS(imp_sth));",
      "2952:         imp_sth->fbind=           alloc_fbind(DBIc_NUM_PARAMS(imp_sth));",
      "",
      "[Removed Lines]",
      "2949:         int has_statement_fields= imp_sth->stmt->fields != 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2960:              bind < bind_end ;",
      "2961:              bind++, fbind++, i++ )",
      "2962:         {",
      "2977:           bind->buffer=       NULL;",
      "2978:           bind->length=       &(fbind->length);",
      "2979:           bind->is_null=      (char*) &(fbind->is_null);",
      "",
      "[Removed Lines]",
      "2964:             if this statement has a result set, field types will be",
      "2965:             correctly identified. If there is no result set, such as",
      "2966:             with an INSERT, fields will not be defined, and all buffer_type",
      "2967:             will default to MYSQL_TYPE_VAR_STRING",
      "2969:           col_type= (has_statement_fields ?",
      "2970:                      imp_sth->stmt->fields[i].type : MYSQL_TYPE_STRING);",
      "2972:           bind->buffer_type=  mysql_to_perl_type(col_type);",
      "2974:           if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
      "2975:             PerlIO_printf(DBIc_LOGPIO(imp_xxh), \"\\t\\tmysql_to_perl_type returned %d\\n\", col_type);",
      "",
      "[Added Lines]",
      "2962:           bind->buffer_type=  MYSQL_TYPE_STRING;",
      "",
      "---------------"
    ],
    "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
      "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: use strict;",
      "4: use warnings;",
      "8: 1;",
      "",
      "[Removed Lines]",
      "6: our $VERSION = '4.038_01';",
      "",
      "[Added Lines]",
      "6: our $VERSION = '4.039';",
      "",
      "---------------"
    ],
    "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
      "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
      "16: # for version 5.x please switch to 5.00(_00) version numbering",
      "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
      "20: bootstrap DBD::mysql $VERSION;",
      "",
      "[Removed Lines]",
      "18: our $VERSION = '4.038_01';",
      "",
      "[Added Lines]",
      "18: our $VERSION = '4.039';",
      "",
      "---------------"
    ],
    "mysql.xs||mysql.xs": [
      "File: mysql.xs -> mysql.xs",
      "--- Hunk 1 ---",
      "[Context before]",
      "266:   STRLEN slen;",
      "267:   char            *str_ptr, *buffer;",
      "268:   int             has_binded;",
      "271:   int             buffer_length= slen;",
      "272:   int             buffer_type= 0;",
      "274:   int             use_server_side_prepare= 0;",
      "275:   MYSQL_STMT      *stmt= NULL;",
      "276:   MYSQL_BIND      *bind= NULL;",
      "278: #endif",
      "279:     ASYNC_CHECK_XS(dbh);",
      "280: #if MYSQL_VERSION_ID >= MULTIPLE_RESULT_SET_VERSION",
      "",
      "[Removed Lines]",
      "269:   int             col_type= MYSQL_TYPE_STRING;",
      "270:   int             buffer_is_null= 0;",
      "273:   int             param_type= SQL_VARCHAR;",
      "277:   imp_sth_phb_t   *fbind= NULL;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368:         int i;",
      "369:         num_params= items - 3;",
      "372:         Newz(0, bind, (unsigned int) num_params, MYSQL_BIND);",
      "375:         for (i = 0; i < num_params; i++)",
      "376:         {",
      "377:           int defined= 0;",
      "381:           {",
      "385:               defined= 1;",
      "386:           }",
      "387:           if (defined)",
      "388:           {",
      "391:             buffer_length= slen;",
      "392:           }",
      "393:           else",
      "394:           {",
      "395:             buffer= NULL;",
      "397:             buffer_length= 0;",
      "498:           }",
      "500:           bind[i].buffer_type = buffer_type;",
      "501:           bind[i].buffer_length= buffer_length;",
      "502:           bind[i].buffer= buffer;",
      "506:         }",
      "507:         has_binded= 0;",
      "508:       }",
      "",
      "[Removed Lines]",
      "371:         Newz(0, params, sizeof(*params)*num_params, struct imp_sth_ph_st);",
      "373:         Newz(0, fbind, (unsigned int) num_params, imp_sth_phb_t);",
      "378:           params[i].value= ST(i+3);",
      "380:           if (params[i].value)",
      "382:             if (SvMAGICAL(params[i].value))",
      "383:               mg_get(params[i].value);",
      "384:             if (SvOK(params[i].value))",
      "389:             buffer= SvPV(params[i].value, slen);",
      "390:             buffer_is_null= 0;",
      "396:             buffer_is_null= 1;",
      "398:           }",
      "401:             if this statement has a result set, field types will be",
      "402:             correctly identified. If there is no result set, such as",
      "403:             with an INSERT, fields will not be defined, and all",
      "404:             buffer_type will default to MYSQL_TYPE_VAR_STRING",
      "406:           col_type= (stmt->fields) ? stmt->fields[i].type : MYSQL_TYPE_STRING;",
      "408:           switch (col_type) {",
      "409: #if MYSQL_VERSION_ID > 50003",
      "410:           case MYSQL_TYPE_NEWDECIMAL:",
      "411: #endif",
      "412:           case MYSQL_TYPE_DECIMAL:",
      "413:             param_type= SQL_DECIMAL;",
      "414:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "415:             break;",
      "417:           case MYSQL_TYPE_DOUBLE:",
      "418:             param_type= SQL_DOUBLE;",
      "419:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "420:             break;",
      "422:           case MYSQL_TYPE_FLOAT:",
      "423:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "424:             param_type= SQL_FLOAT;",
      "425:             break;",
      "427:           case MYSQL_TYPE_SHORT:",
      "428:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "429:             param_type= SQL_FLOAT;",
      "430:             break;",
      "432:           case MYSQL_TYPE_TINY:",
      "433:             buffer_type= MYSQL_TYPE_DOUBLE;",
      "434:             param_type= SQL_FLOAT;",
      "435:             break;",
      "437:           case MYSQL_TYPE_LONG:",
      "438:             buffer_type= MYSQL_TYPE_LONG;",
      "439:             param_type= SQL_BIGINT;",
      "440:             break;",
      "442:           case MYSQL_TYPE_INT24:",
      "443:           case MYSQL_TYPE_YEAR:",
      "444:             buffer_type= MYSQL_TYPE_LONG;",
      "445:             param_type= SQL_INTEGER;",
      "446:             break;",
      "448:           case MYSQL_TYPE_LONGLONG:",
      "449: #if IVSIZE < 8",
      "452:             buffer_type= MYSQL_TYPE_STRING;",
      "453:             param_type= SQL_VARCHAR;",
      "454: #else",
      "455:             buffer_type= MYSQL_TYPE_LONG;",
      "456:             param_type= SQL_BIGINT;",
      "457: #endif",
      "458:             break;",
      "460:           case MYSQL_TYPE_NEWDATE:",
      "461:           case MYSQL_TYPE_DATE:",
      "462:             buffer_type= MYSQL_TYPE_STRING;",
      "463:             param_type= SQL_DATE;",
      "464:             break;",
      "466:           case MYSQL_TYPE_TIME:",
      "467:             buffer_type= MYSQL_TYPE_STRING;",
      "468:             param_type= SQL_TIME;",
      "469:             break;",
      "471:           case MYSQL_TYPE_TIMESTAMP:",
      "472:             buffer_type= MYSQL_TYPE_STRING;",
      "473:             param_type= SQL_TIMESTAMP;",
      "474:             break;",
      "476:           case MYSQL_TYPE_VAR_STRING:",
      "477:           case MYSQL_TYPE_STRING:",
      "478:           case MYSQL_TYPE_DATETIME:",
      "479:             buffer_type= MYSQL_TYPE_STRING;",
      "480:             param_type= SQL_VARCHAR;",
      "481:             break;",
      "483:           case MYSQL_TYPE_BLOB:",
      "484:             buffer_type= MYSQL_TYPE_BLOB;",
      "485:             param_type= SQL_BINARY;",
      "486:             break;",
      "488:           case MYSQL_TYPE_GEOMETRY:",
      "489:             buffer_type= MYSQL_TYPE_BLOB;",
      "490:             param_type= SQL_BINARY;",
      "491:             break;",
      "494:           default:",
      "495:             buffer_type= MYSQL_TYPE_STRING;",
      "496:             param_type= SQL_VARCHAR;",
      "497:             break;",
      "503:           fbind[i].length= buffer_length;",
      "504:           fbind[i].is_null= buffer_is_null;",
      "505:           params[i].type= param_type;",
      "",
      "[Added Lines]",
      "371:           SV *param= ST(i+3);",
      "373:           if (param)",
      "375:             if (SvMAGICAL(param))",
      "376:               mg_get(param);",
      "377:             if (SvOK(param))",
      "382:             buffer= SvPV(param, slen);",
      "384:             buffer_type= MYSQL_TYPE_STRING;",
      "390:             buffer_type= MYSQL_TYPE_NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "514:                                            &has_binded);",
      "515:       if (bind)",
      "516:         Safefree(bind);",
      "520:       if(mysql_stmt_close(stmt))",
      "521:       {",
      "",
      "[Removed Lines]",
      "517:       if (fbind)",
      "518:         Safefree(fbind);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "t/40server_prepare_crash.t||t/40server_prepare_crash.t": [
      "File: t/40server_prepare_crash.t -> t/40server_prepare_crash.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: my $dbh = eval { DBI->connect($test_dsn, $test_user, $test_password, { PrintError => 1, RaiseError => 1, AutoCommit => 0, mysql_server_prepare => 1 }) };",
      "11: plan skip_all => \"no database connection\" if $@ or not $dbh;",
      "15: ok $dbh->do(\"CREATE TEMPORARY TABLE t (i INTEGER NOT NULL, n TEXT)\");",
      "",
      "[Removed Lines]",
      "13: plan tests => 13;",
      "",
      "[Added Lines]",
      "13: plan tests => 17;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: ok $sth->execute();",
      "31: ok $sth->finish();",
      "33: ok $dbh->disconnect();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: ok $sth = $dbh->prepare(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000));",
      "34: ok $sth->execute((1) x (10001));",
      "35: ok $sth->finish();",
      "37: ok $dbh->do(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000), {}, (1) x (10001));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0206a1469167fbbe36c04a81954d649f10b62c85",
      "candidate_info": {
        "commit_hash": "0206a1469167fbbe36c04a81954d649f10b62c85",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/0206a1469167fbbe36c04a81954d649f10b62c85",
        "files": [
          "Changes",
          "lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm"
        ],
        "message": "Release engineering for 4.041",
        "before_after_code_files": [
          "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ],
          "candidate": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ]
        }
      },
      "candidate_diff": {
        "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
          "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use strict;",
          "4: use warnings;",
          "8: 1;",
          "",
          "[Removed Lines]",
          "6: our $VERSION = '4.040';",
          "",
          "[Added Lines]",
          "6: our $VERSION = '4.041';",
          "",
          "---------------"
        ],
        "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
          "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
          "16: # for version 5.x please switch to 5.00(_00) version numbering",
          "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
          "20: bootstrap DBD::mysql $VERSION;",
          "",
          "[Removed Lines]",
          "18: our $VERSION = '4.040';",
          "",
          "[Added Lines]",
          "18: our $VERSION = '4.041';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd4a4b967f035674c1e18822eef34534dd4c13f8",
      "candidate_info": {
        "commit_hash": "bd4a4b967f035674c1e18822eef34534dd4c13f8",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/bd4a4b967f035674c1e18822eef34534dd4c13f8",
        "files": [
          "Changes",
          "Makefile.PL",
          "lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm"
        ],
        "message": "Specify bigint as test dependency\n\nbigint is in core since 5.8 but Fedora Linux system perl ships without\nit. This leads to cpan installers not having it and failing tests.\n\nSee\nhttp://www.cpantesters.org/cpan/report/394d08da-047c-11e7-9c42-6ad91cc46bb4",
        "before_after_code_files": [
          "Makefile.PL||Makefile.PL",
          "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ],
          "candidate": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.PL||Makefile.PL": [
          "File: Makefile.PL -> Makefile.PL",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:         'zentooo <ankerasoy@gmail.com>',",
          "456:       ],",
          "457:     },",
          "459:                        'Test::Deep'   => 0,",
          "460:                        'Time::HiRes'  => 0,",
          "461:     },",
          "",
          "[Removed Lines]",
          "458:     TEST_REQUIRES => { 'Test::Simple' => '0.90',",
          "",
          "[Added Lines]",
          "458:     TEST_REQUIRES => { 'bigint'       => 0,",
          "459:                        'Test::Simple' => '0.90',",
          "",
          "---------------"
        ],
        "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
          "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use strict;",
          "4: use warnings;",
          "8: 1;",
          "",
          "[Removed Lines]",
          "6: our $VERSION = '4.042';",
          "",
          "[Added Lines]",
          "6: our $VERSION = '4.042_01';",
          "",
          "---------------"
        ],
        "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
          "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
          "16: # for version 5.x please switch to 5.00(_00) version numbering",
          "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
          "20: bootstrap DBD::mysql $VERSION;",
          "",
          "[Removed Lines]",
          "18: our $VERSION = '4.042';",
          "",
          "[Added Lines]",
          "18: our $VERSION = '4.042_01';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59f9b51e9c0462fe397191f00343182b68647a7e",
      "candidate_info": {
        "commit_hash": "59f9b51e9c0462fe397191f00343182b68647a7e",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/59f9b51e9c0462fe397191f00343182b68647a7e",
        "files": [
          "Changes",
          "lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm"
        ],
        "message": "Update changelog",
        "before_after_code_files": [
          "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
          "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ],
          "candidate": [
            "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm",
            "lib/DBD/mysql.pm||lib/DBD/mysql.pm"
          ]
        }
      },
      "candidate_diff": {
        "lib/Bundle/DBD/mysql.pm||lib/Bundle/DBD/mysql.pm": [
          "File: lib/Bundle/DBD/mysql.pm -> lib/Bundle/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use strict;",
          "4: use warnings;",
          "8: 1;",
          "",
          "[Removed Lines]",
          "6: our $VERSION = '4.041';",
          "",
          "[Added Lines]",
          "6: our $VERSION = '4.041_01';",
          "",
          "---------------"
        ],
        "lib/DBD/mysql.pm||lib/DBD/mysql.pm": [
          "File: lib/DBD/mysql.pm -> lib/DBD/mysql.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # SQL_DRIVER_VER is formatted as dd.dd.dddd",
          "16: # for version 5.x please switch to 5.00(_00) version numbering",
          "17: # keep $VERSION in Bundle/DBD/mysql.pm in sync",
          "20: bootstrap DBD::mysql $VERSION;",
          "",
          "[Removed Lines]",
          "18: our $VERSION = '4.041';",
          "",
          "[Added Lines]",
          "18: our $VERSION = '4.041_01';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ffbe384ccc3f8634b3d2ee5021cfc356f024696",
      "candidate_info": {
        "commit_hash": "5ffbe384ccc3f8634b3d2ee5021cfc356f024696",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/5ffbe384ccc3f8634b3d2ee5021cfc356f024696",
        "files": [
          "dbdimp.c",
          "dbdimp.h",
          "mysql.xs"
        ],
        "message": "Store statement and params into structs imp_sth_ph_st and imp_sth_st as C char*\n\nFor upcoming UTF-8 support it is needed to have code for extration of char*\nfrom perl scalar at one place -- in input functions.\n\nIn structs imp_sth_ph_st and imp_sth_st are stored own copy of statement\nand parameters, so they do not disappear after XS functions returns.",
        "before_after_code_files": [
          "dbdimp.c||dbdimp.c",
          "dbdimp.h||dbdimp.h",
          "mysql.xs||mysql.xs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "dbdimp.c||dbdimp.c",
            "mysql.xs||mysql.xs"
          ],
          "candidate": [
            "dbdimp.c||dbdimp.c",
            "mysql.xs||mysql.xs"
          ]
        }
      },
      "candidate_diff": {
        "dbdimp.c||dbdimp.c": [
          "File: dbdimp.c -> dbdimp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:     {",
          "342:       imp_sth_ph_t *ph= params+i;",
          "343:       if (ph->value)",
          "348:     }",
          "349:     Safefree(params);",
          "350:   }",
          "",
          "[Removed Lines]",
          "344:       {",
          "345:         (void) SvREFCNT_dec(ph->value);",
          "346:         ph->value= NULL;",
          "347:       }",
          "",
          "[Added Lines]",
          "344:         Safefree(ph->value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622: {",
          "623:   bool comment_end= false;",
          "624:   char *salloc, *statement_ptr;",
          "626:   char *cp, *end;",
          "627:   int alen, i;",
          "628:   int slen= *slen_ptr;",
          "629:   int limit_flag= 0;",
          "630:   int comment_length=0;",
          "632:   imp_sth_ph_t *ph;",
          "634:   if (DBIc_DBISTATE(imp_xxh)->debug >= 2)",
          "",
          "[Removed Lines]",
          "625:   char *statement_ptr_end, *ptr, *valbuf;",
          "631:   STRLEN vallen;",
          "",
          "[Added Lines]",
          "622:   char *statement_ptr_end, *ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "649:   for (i= 0, ph= params; i < num_params; i++, ph++)",
          "650:   {",
          "661:     else",
          "662:     {",
          "667:       if (!ph->type)",
          "668:       {",
          "669:         if (bind_type_guessing)",
          "670:         {",
          "672:           ph->type= SQL_INTEGER;",
          "675:           {",
          "676:               ph->type= SQL_VARCHAR;",
          "677:           }",
          "",
          "[Removed Lines]",
          "651:     int defined= 0;",
          "652:     if (ph->value)",
          "653:     {",
          "654:       if (SvMAGICAL(ph->value))",
          "655:         mg_get(ph->value);",
          "656:       if (SvOK(ph->value))",
          "657:         defined=1;",
          "658:     }",
          "659:     if (!defined)",
          "663:       valbuf= SvPV(ph->value, vallen);",
          "664:       alen+= 2+vallen+1;",
          "671:           valbuf= SvPV(ph->value, vallen);",
          "674:           if (parse_number(valbuf, vallen, &end) != 0)",
          "",
          "[Added Lines]",
          "647:     if (!ph->value)",
          "651:       alen+= 2+ph->len+1;",
          "659:           if (parse_number(ph->value, ph->len, &end) != 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "812:         }",
          "814:         ph = params+ (i++);",
          "816:         {",
          "",
          "[Removed Lines]",
          "815:         if (!ph->value  ||  !SvOK(ph->value))",
          "",
          "[Added Lines]",
          "800:         if (!ph->value)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "823:         {",
          "824:           int is_num = FALSE;",
          "828:           {",
          "829:             is_num = sql_type_is_numeric(ph->type);",
          "833:             {",
          "834:               if (bind_type_guessing) {",
          "",
          "[Removed Lines]",
          "826:           valbuf= SvPV(ph->value, vallen);",
          "827:           if (valbuf)",
          "832:             if ( parse_number(valbuf, vallen, &end) != 0 && is_num)",
          "",
          "[Added Lines]",
          "811:           if (ph->value)",
          "816:             if ( parse_number(ph->value, ph->len, &end) != 0 && is_num)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "847:             if (!is_num)",
          "848:             {",
          "852:             }",
          "853:             else",
          "854:             {",
          "857:             }",
          "858:           }",
          "",
          "[Removed Lines]",
          "850:               ptr += mysql_real_escape_string(sock, ptr, valbuf, vallen);",
          "855:               for (cp= valbuf; cp < end; cp++)",
          "",
          "[Added Lines]",
          "834:               ptr += mysql_real_escape_string(sock, ptr, ph->value, ph->len);",
          "839:               for (cp= ph->value; cp < end; cp++)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "878:   return(salloc);",
          "879: }",
          "882: {",
          "883:   dTHX;",
          "884:   if (ph->value)",
          "885:   {",
          "889:   }",
          "893:   if (sql_type)",
          "894:     ph->type = sql_type;",
          "897: }",
          "899: static const sql_type_info_t SQL_GET_TYPE_INFO_values[]= {",
          "",
          "[Removed Lines]",
          "881: int bind_param(imp_sth_ph_t *ph, SV *value, IV sql_type)",
          "886:     if (SvMAGICAL(ph->value))",
          "887:       mg_get(ph->value);",
          "888:     (void) SvREFCNT_dec(ph->value);",
          "891:   ph->value= newSVsv(value);",
          "896:   return TRUE;",
          "",
          "[Added Lines]",
          "865: static void bind_param(imp_sth_ph_t *ph, SV *value, IV sql_type)",
          "868:   char *buf;",
          "871:     Safefree(ph->value);",
          "873:   if (SvOK(value))",
          "875:     buf = SvPV(value, ph->len);",
          "876:     ph->value = savepvn(buf, ph->len);",
          "877:   }",
          "878:   else",
          "879:   {",
          "880:     ph->value = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2896:   D_imp_dbh_from_sth;",
          "2898:   statement = SvPV(statement_sv, statement_len);",
          "2900:   if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "2901:     PerlIO_printf(DBIc_LOGPIO(imp_xxh),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:   imp_sth->statement = savepvn(statement, statement_len);",
          "2888:   imp_sth->statement_len = statement_len;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3403: my_ulonglong mysql_st_internal_execute(",
          "3406:                                        SV *attribs,",
          "3407:                                        int num_params,",
          "3408:                                        imp_sth_ph_t *params,",
          "",
          "[Removed Lines]",
          "3405:                                        SV *statement,",
          "",
          "[Added Lines]",
          "3395:                                        char *sbuf,",
          "3396:                                        STRLEN slen,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3414:   dTHX;",
          "3415:   bool bind_type_guessing= FALSE;",
          "3416:   bool bind_comment_placeholders= TRUE;",
          "3419:   char *table;",
          "3420:   char *salloc;",
          "3421:   int htype;",
          "",
          "[Removed Lines]",
          "3417:   STRLEN slen;",
          "3418:   char *sbuf = SvPV(statement, slen);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3739:   dTHX;",
          "3740:   char actual_row_num[64];",
          "3741:   int i;",
          "3743:   D_imp_dbh_from_sth;",
          "3744:   D_imp_xxh(sth);",
          "3745: #if defined (dTHR)",
          "",
          "[Removed Lines]",
          "3742:   SV **statement;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3768:     imp_sth->av_attr[i]= Nullav;",
          "3769:   }",
          "3774:      Clean-up previous result set(s) for sth to prevent",
          "3775:      'Commands out of sync' error",
          "",
          "[Removed Lines]",
          "3771:   statement= hv_fetch((HV*) SvRV(sth), \"Statement\", 9, FALSE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3817:   {",
          "3818:     imp_sth->row_num= mysql_st_internal_execute(",
          "3819:                                                 sth,",
          "3821:                                                 NULL,",
          "3822:                                                 DBIc_NUM_PARAMS(imp_sth),",
          "3823:                                                 imp_sth->params,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3806:                                                 imp_sth->statement,",
          "3807:                                                 imp_sth->statement_len,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4646:   imp_sth_fbh_t *fbh;",
          "4647:   int n;",
          "4649:   n= DBIc_NUM_PARAMS(imp_sth);",
          "4650:   if (n)",
          "4651:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4636:   if (imp_sth->statement)",
          "4637:     Safefree(imp_sth->statement);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4969:             int n;",
          "4970:             char key[100];",
          "4971:             I32 keylen;",
          "4972:             for (n= 0; n < DBIc_NUM_PARAMS(imp_sth); n++)",
          "4973:             {",
          "4974:                 keylen= sprintf(key, \"%d\", n);",
          "4977:             }",
          "4978:         }",
          "4979:         retsv= sv_2mortal(newRV_noinc((SV*)pvhv));",
          "",
          "[Removed Lines]",
          "4975:                 (void)hv_store(pvhv, key,",
          "4976:                          keylen, newSVsv(imp_sth->params[n].value), 0);",
          "",
          "[Added Lines]",
          "4962:             SV *sv;",
          "4966:                 sv= newSVpvn(imp_sth->params[n].value, imp_sth->params[n].len);",
          "4967:                 (void)hv_store(pvhv, key, keylen, sv, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5130: int dbd_bind_ph(SV *sth, imp_sth_t *imp_sth, SV *param, SV *value,",
          "5131:    IV sql_type, SV *attribs, int is_inout, IV maxlen) {",
          "5132:   dTHX;",
          "5134:   int param_num= SvIV(param);",
          "5135:   int idx= param_num - 1;",
          "5136:   char *err_msg;",
          "5137:   D_imp_xxh(sth);",
          "5139: #if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION",
          "5141:   char *buffer= NULL;",
          "5142:   int buffer_is_null= 0;",
          "5143:   int buffer_is_unsigned= 0;",
          "",
          "[Removed Lines]",
          "5133:   int rc;",
          "5140:   STRLEN slen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5184:     return FALSE;",
          "5185:   }",
          "5189: #if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION",
          "5190:   if (imp_sth->use_server_side_prepare)",
          "5191:   {",
          "5193:     if (!buffer_is_null) {",
          "5194:       buffer_type= sql_to_mysql_type(sql_type);",
          "5195:       switch (buffer_type) {",
          "",
          "[Removed Lines]",
          "5187:   rc = bind_param(&imp_sth->params[idx], value, sql_type);",
          "5192:     buffer_is_null = !SvOK(imp_sth->params[idx].value);",
          "",
          "[Added Lines]",
          "5176:   bind_param(&imp_sth->params[idx], value, sql_type);",
          "5181:     buffer_is_null = !imp_sth->params[idx].value;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5199: #if IVSIZE >= 8",
          "5200:       case MYSQL_TYPE_LONGLONG:",
          "5201: #endif",
          "5203:           PerlIO_printf(DBIc_LOGPIO(imp_xxh), \"\\t\\tTRY TO BIND AN INT NUMBER\\n\");",
          "5206:           buffer_is_unsigned= 1;",
          "5208:         switch (buffer_type) {",
          "",
          "[Removed Lines]",
          "5202:         if (!SvIOK(imp_sth->params[idx].value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5204:         int_val= SvIV(imp_sth->params[idx].value);",
          "5205:         if (SvIsUV(imp_sth->params[idx].value))",
          "",
          "[Added Lines]",
          "5191:         if (!SvIOK(value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5193:         int_val= SvIV(value);",
          "5194:         if (SvIsUV(value))",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5285:           if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5286:             PerlIO_printf(DBIc_LOGPIO(imp_xxh), \"\\t\\tTRY TO BIND AN LONGLONG INT NUMBER FROM STRING\\n\");",
          "5289:           val= strtoll(buf, NULL, 10);",
          "5290:           if (val == LLONG_MAX)",
          "5291:           {",
          "",
          "[Removed Lines]",
          "5288:           buf= SvPV_nolen(imp_sth->params[idx].value);",
          "",
          "[Added Lines]",
          "5277:           buf= SvPV_nolen(value);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5312: #endif",
          "5314:       case MYSQL_TYPE_FLOAT:",
          "5316:           PerlIO_printf(DBIc_LOGPIO(imp_xxh), \"\\t\\tTRY TO BIND A FLOAT NUMBER\\n\");",
          "5317:         buffer_length = sizeof(imp_sth->fbind[idx].numeric_val.fval);",
          "5319:         buffer=(char*)&(imp_sth->fbind[idx].numeric_val.fval);",
          "5320:         if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5321:           PerlIO_printf(DBIc_LOGPIO(imp_xxh),",
          "",
          "[Removed Lines]",
          "5315:         if (!SvNOK(imp_sth->params[idx].value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5318:         imp_sth->fbind[idx].numeric_val.fval= SvNV(imp_sth->params[idx].value);",
          "",
          "[Added Lines]",
          "5304:         if (!SvNOK(value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5307:         imp_sth->fbind[idx].numeric_val.fval= SvNV(value);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5324:         break;",
          "5326:       case MYSQL_TYPE_DOUBLE:",
          "5328:           PerlIO_printf(DBIc_LOGPIO(imp_xxh), \"\\t\\tTRY TO BIND A DOUBLE NUMBER\\n\");",
          "5329:         buffer_length = sizeof(imp_sth->fbind[idx].numeric_val.dval);",
          "5330: #if NVSIZE >= 8",
          "5332: #else",
          "5334: #endif",
          "5335:         buffer=(char*)&(imp_sth->fbind[idx].numeric_val.dval);",
          "5336:         if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "",
          "[Removed Lines]",
          "5327:         if (!SvNOK(imp_sth->params[idx].value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5331:         imp_sth->fbind[idx].numeric_val.dval= SvNV(imp_sth->params[idx].value);",
          "5333:         imp_sth->fbind[idx].numeric_val.dval= atof(SvPV_nolen(imp_sth->params[idx].value));",
          "",
          "[Added Lines]",
          "5316:         if (!SvNOK(value) && DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5320:         imp_sth->fbind[idx].numeric_val.dval= SvNV(value);",
          "5322:         imp_sth->fbind[idx].numeric_val.dval= atof(SvPV_nolen(value));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5349: #endif",
          "5351:       case MYSQL_TYPE_BLOB:",
          "5354:         if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5355:           PerlIO_printf(DBIc_LOGPIO(imp_xxh),",
          "5356:                         \"   SCALAR sql_type %\"IVdf\" ->length %d<- IS A BLOB\\n\", sql_type, buffer_length);",
          "",
          "[Removed Lines]",
          "5352:         buffer= SvPV(imp_sth->params[idx].value, slen);",
          "5353:         buffer_length= slen;",
          "",
          "[Added Lines]",
          "5341:         buffer= imp_sth->params[idx].value;",
          "5342:         buffer_length= imp_sth->params[idx].len;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5359:       default:",
          "5360:         buffer_type= MYSQL_TYPE_STRING;",
          "5363:         if (DBIc_TRACE_LEVEL(imp_xxh) >= 2)",
          "5364:           PerlIO_printf(DBIc_LOGPIO(imp_xxh),",
          "5365:                         \"   SCALAR sql_type %\"IVdf\" ->%s<- IS A STRING\\n\", sql_type, buffer);",
          "",
          "[Removed Lines]",
          "5361:         buffer= SvPV(imp_sth->params[idx].value, slen);",
          "5362:         buffer_length= slen;",
          "",
          "[Added Lines]",
          "5350:         buffer= imp_sth->params[idx].value;",
          "5351:         buffer_length= imp_sth->params[idx].len;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5401:     imp_sth->fbind[idx].is_null= buffer_is_null;",
          "5402:   }",
          "5403: #endif",
          "5405: }",
          "",
          "[Removed Lines]",
          "5404:   return rc;",
          "",
          "[Added Lines]",
          "5393:   return TRUE;",
          "",
          "---------------"
        ],
        "dbdimp.h||dbdimp.h": [
          "File: dbdimp.h -> dbdimp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: typedef struct imp_sth_ph_st {",
          "206:     int type;",
          "207: } imp_sth_ph_t;",
          "",
          "[Removed Lines]",
          "205:     SV* value;",
          "",
          "[Added Lines]",
          "205:     char* value;",
          "206:     STRLEN len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264: struct imp_sth_st {",
          "267: #if (MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION)",
          "268:     MYSQL_STMT       *stmt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     char *statement;",
          "268:     STRLEN statement_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341: void    dbd_preparse (imp_sth_t *imp_sth, SV *statement);",
          "342: my_ulonglong mysql_st_internal_execute(SV *,",
          "344:                                        SV *,",
          "345:                                        int,",
          "346:                                        imp_sth_ph_t *,",
          "",
          "[Removed Lines]",
          "343:                                        SV *,",
          "",
          "[Added Lines]",
          "346:                                        char *,",
          "347:                                        STRLEN,",
          "",
          "---------------"
        ],
        "mysql.xs||mysql.xs": [
          "File: mysql.xs -> mysql.xs",
          "--- Hunk 1 ---",
          "[Context before]",
          "264: #endif",
          "265: #if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION",
          "266:   STRLEN slen;",
          "268:   int             has_binded;",
          "271:   int             use_server_side_prepare= 0;",
          "272:   int             disable_fallback_for_server_prepare= 0;",
          "273:   MYSQL_STMT      *stmt= NULL;",
          "",
          "[Removed Lines]",
          "267:   char            *str_ptr, *buffer;",
          "269:   int             buffer_length= slen;",
          "270:   int             buffer_type= 0;",
          "",
          "[Added Lines]",
          "267:   char            *str_ptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:   (void)hv_store((HV*)SvRV(dbh), \"Statement\", 9, SvREFCNT_inc(statement), 0);",
          "319:   if(SvTRUE(async)) {",
          "320: #if MYSQL_ASYNC",
          "321:     if (disable_fallback_for_server_prepare)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:   str_ptr = SvPV(statement, slen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:   if (use_server_side_prepare)",
          "337:   {",
          "340:     stmt= mysql_stmt_init(imp_dbh->pmysql);",
          "343:         (!mysql_db_reconnect(dbh) ||",
          "345:     {",
          "347:         For commands that are not supported by server side prepared",
          "",
          "[Removed Lines]",
          "338:     str_ptr= SvPV(statement, slen);",
          "342:     if ((mysql_stmt_prepare(stmt, str_ptr, strlen(str_ptr)))  &&",
          "344:          (mysql_stmt_prepare(stmt, str_ptr, strlen(str_ptr)))))",
          "",
          "[Added Lines]",
          "340:     if ((mysql_stmt_prepare(stmt, str_ptr, slen))  &&",
          "342:          (mysql_stmt_prepare(stmt, str_ptr, slen))))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "379:         for (i = 0; i < num_params; i++)",
          "380:         {",
          "382:           SV *param= ST(i+3);",
          "385:           {",
          "396:           }",
          "397:           else",
          "398:           {",
          "402:           }",
          "407:         }",
          "408:         has_binded= 0;",
          "409:       }",
          "",
          "[Removed Lines]",
          "381:           int defined= 0;",
          "384:           if (param)",
          "386:             if (SvMAGICAL(param))",
          "387:               mg_get(param);",
          "388:             if (SvOK(param))",
          "389:               defined= 1;",
          "390:           }",
          "391:           if (defined)",
          "392:           {",
          "393:             buffer= SvPV(param, slen);",
          "394:             buffer_length= slen;",
          "395:             buffer_type= MYSQL_TYPE_STRING;",
          "399:             buffer= NULL;",
          "400:             buffer_length= 0;",
          "401:             buffer_type= MYSQL_TYPE_NULL;",
          "404:           bind[i].buffer_type = buffer_type;",
          "405:           bind[i].buffer_length= buffer_length;",
          "406:           bind[i].buffer= buffer;",
          "",
          "[Added Lines]",
          "380:           if (SvMAGICAL(param))",
          "381:             mg_get(param);",
          "382:           if (SvOK(param))",
          "384:             bind[i].buffer= SvPV(param, slen);",
          "385:             bind[i].buffer_length= slen;",
          "386:             bind[i].buffer_type= MYSQL_TYPE_STRING;",
          "390:             bind[i].buffer= NULL;",
          "391:             bind[i].buffer_length= 0;",
          "392:             bind[i].buffer_type= MYSQL_TYPE_NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "445:       Newz(0, params, sizeof(*params)*num_params, struct imp_sth_ph_st);",
          "446:       for (i= 0;  i < num_params;  i++)",
          "447:       {",
          "449:         params[i].type= SQL_VARCHAR;",
          "450:       }",
          "451:     }",
          "453:                                        params, &result, imp_dbh->pmysql, 0);",
          "454: #if MYSQL_VERSION_ID >=SERVER_PREPARE_VERSION",
          "455:   }",
          "",
          "[Removed Lines]",
          "448:         params[i].value= ST(i+3);",
          "452:     retval = mysql_st_internal_execute(dbh, statement, attr, num_params,",
          "",
          "[Added Lines]",
          "435:         SV *param= ST(i+3);",
          "436:         if (SvMAGICAL(param))",
          "437:           mg_get(param);",
          "438:         if (SvOK(param))",
          "439:           params[i].value= SvPV(param, params[i].len);",
          "440:         else",
          "441:           params[i].value= NULL;",
          "445:     retval = mysql_st_internal_execute(dbh, str_ptr, slen, attr, num_params,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75c96a0efb3ed5441e3830dc72c5f2e71bf816ce",
      "candidate_info": {
        "commit_hash": "75c96a0efb3ed5441e3830dc72c5f2e71bf816ce",
        "repo": "perl5-dbi/DBD-mysql",
        "commit_url": "https://github.com/perl5-dbi/DBD-mysql/commit/75c96a0efb3ed5441e3830dc72c5f2e71bf816ce",
        "files": [
          "t/40server_prepare_crash.t"
        ],
        "message": "Extend test t/40server_prepare_crash.t for libmysqlclient.so crash\n\nMySQL library libmysqlclient.so in versions prior to MySQL 5.6 release has\ndefect and returns dangling pointers for all statements after closing\nconnection with MySQL server. Moreover libmysqlclient.so itself when\nfreeing statement is accessing that (already freed) dangling pointer (which\nrepresent connection with MySQL server) and that leads to memory\ncorruption.\n\nBecause in perl it is not guaranteed that DESTROY of $sth (close statement)\nwill be called before DESTROY of $dbh (close connection to MySQL server and\nfree structures) that memory corruption can cause crash of DBD::mysql and\nperl interpreter.\n\nThis patch extend t/40server_prepare_crash.t test and check that MySQL\nlibrary libmysqlclient.so correctly invalidate pointer to NULL and so\nclosing and freeing statement will be without accessing already freed\nmemory. It used new \"mysql_sock\" $sth attribute for that purpose.\n\nFix for libmysqlclient.so is in MySQL commit:\nhttps://github.com/mysql/mysql-server/commit/4797ea0b772d5f4c5889bc552424132806f46e93\n\nFor more information is in reported MySQL bugs:\nhttps://bugs.mysql.com/bug.php?id=70429\nhttps://bugs.mysql.com/bug.php?id=63363",
        "before_after_code_files": [
          "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
          ],
          "candidate": [
            "t/40server_prepare_crash.t||t/40server_prepare_crash.t"
          ]
        }
      },
      "candidate_diff": {
        "t/40server_prepare_crash.t||t/40server_prepare_crash.t": [
          "File: t/40server_prepare_crash.t -> t/40server_prepare_crash.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: my $dbh = DbiTestConnect($test_dsn, $test_user, $test_password, { PrintError => 1, RaiseError => 1, AutoCommit => 0, mysql_server_prepare => 1, mysql_server_prepare_disable_fallback => 1 });",
          "11: plan skip_all => \"You must have MySQL version 4.1.3 and greater for this test to run\" if $dbh->{mysql_clientversion} < 40103 or $dbh->{mysql_serverversion} < 40103;",
          "15: my $sth;",
          "",
          "[Removed Lines]",
          "13: plan tests => 39;",
          "",
          "[Added Lines]",
          "13: plan tests => 44;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: ok $dbh->do(\"SELECT 1 FROM t WHERE i = ?\" . (\" OR i = ?\" x 10000), {}, (1) x (10001));",
          "78: ok $dbh->disconnect();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: # $sth2 is statement that cannot be executed as mysql server side prepared statement, so fallback must be allowed",
          "79: ok my $dbname = $dbh->selectrow_arrayref(\"SELECT DATABASE()\")->[0];",
          "80: ok my $sth2 = $dbh->prepare(\"USE $dbname\", { mysql_server_prepare_disable_fallback => 0 });",
          "81: ok $sth2->execute();",
          "83: # disconnect from mysql server, free $dbh and internal libmysqlclient.so structures",
          "85: $dbh = undef;",
          "87: # check CVE 2017-3302 that libmysqlclient.so does not return to DBD::mysql dangling pointer to already freed libmysqlclient.so structures",
          "88: # \"mysql_sock\" sth attribute return values:",
          "89: # undef - attribute not supported by driver",
          "90: # 0     - NULL pointer, correct behavior",
          "91: # other - danging pointer exported",
          "92: my $sock1 = $sth->{mysql_sock};",
          "93: my $sock2 = $sth2->{mysql_sock};",
          "94: ok defined $sock1 && !$sock1 or diag \"Your libmysqlclient.so is vulnerable to CVE 2017-3302 and can crash perl\";",
          "95: ok defined $sock2 && !$sock2 or diag \"Your libmysqlclient.so is vulnerable to CVE 2017-3302 and can crash perl\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}