{
  "cve_id": "CVE-2023-30845",
  "cve_desc": "ESPv2 is a service proxy that provides API management capabilities using Google Service Infrastructure. ESPv2 2.20.0 through 2.42.0 contains an authentication bypass vulnerability. API clients can craft a malicious `X-HTTP-Method-Override` header value to bypass JWT authentication in specific cases.\n\nESPv2 allows malicious requests to bypass authentication if both the conditions are true: The requested HTTP method is **not** in the API service definition (OpenAPI spec or gRPC `google.api.http` proto annotations, and the specified `X-HTTP-Method-Override` is a valid HTTP method in the API service definition. ESPv2 will forward the request to your backend without checking the JWT. Attackers can craft requests with a malicious `X-HTTP-Method-Override` value that allows them to bypass specifying JWTs. Restricting API access with API keys works as intended and is not affected by this vulnerability.\n\nUpgrade deployments to release v2.43.0 or higher to receive a patch. This release ensures that JWT authentication occurs, even when the caller specifies `x-http-method-override`. `x-http-method-override` is still supported by v2.43.0+. API clients can continue sending this header to ESPv2.",
  "repo": "GoogleCloudPlatform/esp-v2",
  "patch_hash": "e95670146f5e96bb5565b0a9c1e153886b3e04ce",
  "patch_info": {
    "commit_hash": "e95670146f5e96bb5565b0a9c1e153886b3e04ce",
    "repo": "GoogleCloudPlatform/esp-v2",
    "commit_url": "https://github.com/GoogleCloudPlatform/esp-v2/commit/e95670146f5e96bb5565b0a9c1e153886b3e04ce",
    "files": [
      "api/envoy/v11/http/header_sanitizer/BUILD",
      "api/envoy/v11/http/header_sanitizer/config.proto",
      "api/scripts/go_proto_gen.sh",
      "examples/auth/envoy_config.json",
      "examples/dynamic_routing/envoy_config.json",
      "examples/grpc_dynamic_routing/envoy_config.json",
      "examples/service_control/envoy_config.json",
      "examples/testdata/route_match/envoy_config.json",
      "examples/testdata/sidecar_backend/envoy_config.json",
      "src/envoy/BUILD",
      "src/envoy/http/header_sanitizer/BUILD",
      "src/envoy/http/header_sanitizer/filter.cc",
      "src/envoy/http/header_sanitizer/filter.h",
      "src/envoy/http/header_sanitizer/filter_factory.cc",
      "src/envoy/http/service_control/filter.cc",
      "src/go/configgenerator/filter_generator.go",
      "src/go/configgenerator/filtergen/header_sanitizer.go",
      "src/go/configgenerator/listener_generator_test.go",
      "src/go/configmanager/testdata/test_fetch_listeners.go",
      "src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go",
      "src/go/util/marshal.go",
      "src/go/util/xds_name.go",
      "tests/env/platform/ports.go",
      "tests/integration_test/http1_integration_test/http1_integration_test.go",
      "tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go"
    ],
    "message": "move x-http-method-override to beginning of filter chain (#801)\n\nCreate a new filter to handle method override. Tested via integration test.",
    "before_after_code_files": [
      "api/envoy/v11/http/header_sanitizer/config.proto||api/envoy/v11/http/header_sanitizer/config.proto",
      "api/scripts/go_proto_gen.sh||api/scripts/go_proto_gen.sh",
      "src/envoy/http/header_sanitizer/filter.cc||src/envoy/http/header_sanitizer/filter.cc",
      "src/envoy/http/header_sanitizer/filter.h||src/envoy/http/header_sanitizer/filter.h",
      "src/envoy/http/header_sanitizer/filter_factory.cc||src/envoy/http/header_sanitizer/filter_factory.cc",
      "src/envoy/http/service_control/filter.cc||src/envoy/http/service_control/filter.cc",
      "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
      "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
      "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
      "src/go/configmanager/testdata/test_fetch_listeners.go||src/go/configmanager/testdata/test_fetch_listeners.go",
      "src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go||src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go",
      "src/go/util/marshal.go||src/go/util/marshal.go",
      "src/go/util/xds_name.go||src/go/util/xds_name.go",
      "tests/env/platform/ports.go||tests/env/platform/ports.go",
      "tests/integration_test/http1_integration_test/http1_integration_test.go||tests/integration_test/http1_integration_test/http1_integration_test.go",
      "tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go||tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go"
    ]
  },
  "patch_diff": {
    "api/envoy/v11/http/header_sanitizer/config.proto||api/envoy/v11/http/header_sanitizer/config.proto": [
      "File: api/envoy/v11/http/header_sanitizer/config.proto -> api/envoy/v11/http/header_sanitizer/config.proto",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: syntax = \"proto3\";",
      "17: package espv2.api.envoy.v11.http.header_sanitizer;",
      "22: message FilterConfig {}",
      "",
      "---------------"
    ],
    "api/scripts/go_proto_gen.sh||api/scripts/go_proto_gen.sh": [
      "File: api/scripts/go_proto_gen.sh -> api/scripts/go_proto_gen.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: bazelisk build //api/envoy/v11/http/grpc_metadata_scrubber:config_go_proto",
      "43: mkdir -p src/go/proto/api/envoy/v11/http/grpc_metadata_scrubber",
      "44: cp -f bazel-bin/api/envoy/v11/http/grpc_metadata_scrubber/config_go_proto_/github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/grpc_metadata_scrubber/* src/go/proto/api/envoy/v11/http/grpc_metadata_scrubber",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: # HTTP filter header_sanitizer",
      "46: bazelisk build //api/envoy/v11/http/header_sanitizer:config_go_proto",
      "47: mkdir -p src/go/proto/api/envoy/v11/http/header_sanitizer",
      "48: cp -f bazel-bin/api/envoy/v11/http/header_sanitizer/config_go_proto_/github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/header_sanitizer/* src/go/proto/api/envoy/v11/http/header_sanitizer",
      "",
      "---------------"
    ],
    "src/envoy/http/header_sanitizer/filter.cc||src/envoy/http/header_sanitizer/filter.cc": [
      "File: src/envoy/http/header_sanitizer/filter.cc -> src/envoy/http/header_sanitizer/filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: #include \"src/envoy/http/header_sanitizer/filter.h\"",
      "17: #include <string>",
      "19: #include \"envoy/http/header_map.h\"",
      "20: #include \"source/common/http/headers.h\"",
      "21: #include \"source/common/http/utility.h\"",
      "22: #include \"src/envoy/utils/http_header_utils.h\"",
      "23: #include \"src/envoy/utils/rc_detail_utils.h\"",
      "25: namespace espv2 {",
      "26: namespace envoy {",
      "27: namespace http_filters {",
      "28: namespace header_sanitizer {",
      "30: using Envoy::Http::FilterDataStatus;",
      "31: using Envoy::Http::FilterHeadersStatus;",
      "32: using Envoy::Http::FilterTrailersStatus;",
      "33: using Envoy::Http::RequestHeaderMap;",
      "35: FilterHeadersStatus Filter::decodeHeaders(RequestHeaderMap& headers, bool) {",
      "36:   if (utils::handleHttpMethodOverride(headers)) {",
      "39:     ENVOY_LOG(debug, \"HTTP method override occurred, recalculating route\");",
      "40:     decoder_callbacks_->downstreamCallbacks()->clearRouteCache();",
      "41:   }",
      "43:   return FilterHeadersStatus::Continue;",
      "44: }",
      "46: }  // namespace header_sanitizer",
      "47: }  // namespace http_filters",
      "48: }  // namespace envoy",
      "49: }  // namespace espv2",
      "",
      "---------------"
    ],
    "src/envoy/http/header_sanitizer/filter.h||src/envoy/http/header_sanitizer/filter.h": [
      "File: src/envoy/http/header_sanitizer/filter.h -> src/envoy/http/header_sanitizer/filter.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: #pragma once",
      "17: #include \"envoy/http/filter.h\"",
      "18: #include \"envoy/http/header_map.h\"",
      "19: #include \"source/common/common/logger.h\"",
      "20: #include \"source/extensions/filters/http/common/pass_through_filter.h\"",
      "22: namespace espv2 {",
      "23: namespace envoy {",
      "24: namespace http_filters {",
      "25: namespace header_sanitizer {",
      "27: class Filter : public Envoy::Http::PassThroughDecoderFilter,",
      "28:                public Envoy::Logger::Loggable<Envoy::Logger::Id::filter> {",
      "29:  public:",
      "30:   Filter() = default;",
      "33:   Envoy::Http::FilterHeadersStatus decodeHeaders(Envoy::Http::RequestHeaderMap&,",
      "34:                                                  bool) override;",
      "35: };",
      "37: }  // namespace header_sanitizer",
      "38: }  // namespace http_filters",
      "39: }  // namespace envoy",
      "40: }  // namespace espv2",
      "",
      "---------------"
    ],
    "src/envoy/http/header_sanitizer/filter_factory.cc||src/envoy/http/header_sanitizer/filter_factory.cc": [
      "File: src/envoy/http/header_sanitizer/filter_factory.cc -> src/envoy/http/header_sanitizer/filter_factory.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: #include \"api/envoy/v11/http/header_sanitizer/config.pb.h\"",
      "16: #include \"api/envoy/v11/http/header_sanitizer/config.pb.validate.h\"",
      "17: #include \"envoy/registry/registry.h\"",
      "18: #include \"source/extensions/filters/http/common/factory_base.h\"",
      "19: #include \"src/envoy/http/header_sanitizer/filter.h\"",
      "21: namespace espv2 {",
      "22: namespace envoy {",
      "23: namespace http_filters {",
      "24: namespace header_sanitizer {",
      "26: constexpr const char kFilterName[] =",
      "27:     \"com.google.espv2.filters.http.header_sanitizer\";",
      "32: class FilterFactory",
      "33:     : public Envoy::Extensions::HttpFilters::Common::FactoryBase<",
      "34:           ::espv2::api::envoy::v11::http::header_sanitizer::FilterConfig> {",
      "35:  public:",
      "36:   FilterFactory() : FactoryBase(kFilterName) {}",
      "38:  private:",
      "39:   Envoy::Http::FilterFactoryCb createFilterFactoryFromProtoTyped(",
      "40:       const ::espv2::api::envoy::v11::http::header_sanitizer::FilterConfig&,",
      "41:       const std::string&,",
      "42:       Envoy::Server::Configuration::FactoryContext&) override {",
      "43:     return [](Envoy::Http::FilterChainFactoryCallbacks& callbacks) -> void {",
      "44:       auto filter = std::make_shared<Filter>();",
      "45:       callbacks.addStreamDecoderFilter(filter);",
      "46:     };",
      "47:   }",
      "48: };",
      "52: static Envoy::Registry::RegisterFactory<",
      "53:     FilterFactory, Envoy::Server::Configuration::NamedHttpFilterConfigFactory>",
      "54:     register_;",
      "56: }  // namespace header_sanitizer",
      "57: }  // namespace http_filters",
      "58: }  // namespace envoy",
      "59: }  // namespace espv2",
      "",
      "---------------"
    ],
    "src/envoy/http/service_control/filter.cc||src/envoy/http/service_control/filter.cc": [
      "File: src/envoy/http/service_control/filter.cc -> src/envoy/http/service_control/filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return Envoy::Http::FilterHeadersStatus::StopIteration;",
      "54:   }",
      "64:   auto route = decoder_callbacks_->route();",
      "",
      "[Removed Lines]",
      "56:   if (utils::handleHttpMethodOverride(headers)) {",
      "59:     ENVOY_LOG(debug, \"HTTP method override occurred, recalculating route\");",
      "60:     decoder_callbacks_->downstreamCallbacks()->clearRouteCache();",
      "61:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go": [
      "File: src/go/configgenerator/filter_generator.go -> src/go/configgenerator/filter_generator.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: func MakeFilterGenerators(serviceInfo *ci.ServiceInfo) ([]FilterGenerator, error) {",
      "51:  return []FilterGenerator{",
      "52:   filtergen.NewCORSGenerator(serviceInfo),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:   &filtergen.HeaderSanitizerGenerator{},",
      "",
      "---------------"
    ],
    "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go": [
      "File: src/go/configgenerator/filtergen/header_sanitizer.go -> src/go/configgenerator/filtergen/header_sanitizer.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: package filtergen",
      "17: import (",
      "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
      "19:  hspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/header_sanitizer\"",
      "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
      "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
      "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
      "23:  \"github.com/golang/protobuf/ptypes\"",
      "24:  anypb \"github.com/golang/protobuf/ptypes/any\"",
      "25: )",
      "27: type HeaderSanitizerGenerator struct{}",
      "29: func (g *HeaderSanitizerGenerator) FilterName() string {",
      "30:  return util.HeaderSanitizerScrubber",
      "31: }",
      "33: func (g *HeaderSanitizerGenerator) IsEnabled() bool {",
      "34:  return true",
      "35: }",
      "37: func (g *HeaderSanitizerGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
      "38:  a, err := ptypes.MarshalAny(&hspb.FilterConfig{})",
      "39:  if err != nil {",
      "40:   return nil, err",
      "41:  }",
      "42:  return &hcmpb.HttpFilter{",
      "43:   Name:       g.FilterName(),",
      "44:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: a},",
      "45:  }, nil",
      "46: }",
      "48: func (g *HeaderSanitizerGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
      "49:  return nil, nil",
      "50: }",
      "",
      "---------------"
    ],
    "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go": [
      "File: src/go/configgenerator/listener_generator_test.go -> src/go/configgenerator/listener_generator_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "80:             \"commonHttpProtocolOptions\": {},",
      "81:             \"httpFilters\": [",
      "83:                 \"name\": \"com.google.espv2.filters.http.grpc_metadata_scrubber\",",
      "84:                 \"typedConfig\": {",
      "85:                   \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.grpc_metadata_scrubber.FilterConfig\"",
      "",
      "[Removed Lines]",
      "82:               {",
      "",
      "[Added Lines]",
      "82:        {",
      "83:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "84:         \"typedConfig\": {",
      "85:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "86:         }",
      "87:        },",
      "88:        {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "235:             \"commonHttpProtocolOptions\": {},",
      "236:             \"httpFilters\": [",
      "238:                 \"name\": \"com.google.espv2.filters.http.grpc_metadata_scrubber\",",
      "239:                 \"typedConfig\": {",
      "240:                   \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.grpc_metadata_scrubber.FilterConfig\"",
      "",
      "[Removed Lines]",
      "237:               {",
      "",
      "[Added Lines]",
      "243:        {",
      "244:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "245:         \"typedConfig\": {",
      "246:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "247:         }",
      "248:        },",
      "249:        {",
      "",
      "---------------"
    ],
    "src/go/configmanager/testdata/test_fetch_listeners.go||src/go/configmanager/testdata/test_fetch_listeners.go": [
      "File: src/go/configmanager/testdata/test_fetch_listeners.go -> src/go/configmanager/testdata/test_fetch_listeners.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:               \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
      "93:             },",
      "94:             \"httpFilters\": [",
      "96:                 \"name\": \"envoy.filters.http.grpc_web\",",
      "97:                 \"typedConfig\": {",
      "98:                   \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb\"",
      "",
      "[Removed Lines]",
      "95:               {",
      "",
      "[Added Lines]",
      "95:        {",
      "96:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "97:         \"typedConfig\": {",
      "98:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "99:         }",
      "100:        },",
      "101:        {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "316:           \"typedConfig\": {",
      "317:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "318:             \"httpFilters\": [",
      "320:                 \"name\": \"envoy.filters.http.jwt_authn\",",
      "321:                 \"typedConfig\": {",
      "322:                   \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication\",",
      "",
      "[Removed Lines]",
      "319:               {",
      "",
      "[Added Lines]",
      "325:        {",
      "326:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "327:         \"typedConfig\": {",
      "328:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "329:         }",
      "330:        },",
      "331:        {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "604:           \"typedConfig\": {",
      "605:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "606:             \"httpFilters\": [",
      "608:                 \"name\": \"envoy.filters.http.jwt_authn\",",
      "609:                 \"typedConfig\": {",
      "610:                   \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication\",",
      "",
      "[Removed Lines]",
      "607:               {",
      "",
      "[Added Lines]",
      "619:        {",
      "620:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "621:         \"typedConfig\": {",
      "622:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "623:         }",
      "624:        },",
      "625:        {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1116:           \"typedConfig\": {",
      "1117:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "1118:             \"httpFilters\": [",
      "1120:                 \"name\": \"envoy.filters.http.jwt_authn\",",
      "1121:                 \"typedConfig\": {",
      "1122:                   \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication\",",
      "",
      "[Removed Lines]",
      "1119:               {",
      "",
      "[Added Lines]",
      "1137:        {",
      "1138:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "1139:         \"typedConfig\": {",
      "1140:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "1141:         }",
      "1142:        },",
      "1143:        {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1587:           \"typedConfig\": {",
      "1588:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "1589:             \"httpFilters\": [",
      "1591:                 \"name\": \"com.google.espv2.filters.http.service_control\",",
      "1592:                 \"typedConfig\": {",
      "1593:                   \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.service_control.FilterConfig\",",
      "",
      "[Removed Lines]",
      "1590:               {",
      "",
      "[Added Lines]",
      "1614:        {",
      "1615:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "1616:         \"typedConfig\": {",
      "1617:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "1618:         }",
      "1619:        },",
      "1620:        {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2122:           \"typedConfig\": {",
      "2123:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "2124:             \"httpFilters\": [",
      "2126:                 \"name\": \"envoy.filters.http.jwt_authn\",",
      "2127:                 \"typedConfig\": {",
      "2128:                   \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication\",",
      "",
      "[Removed Lines]",
      "2125:               {",
      "",
      "[Added Lines]",
      "2155:        {",
      "2156:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "2157:         \"typedConfig\": {",
      "2158:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "2159:         }",
      "2160:        },",
      "2161:        {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2454:           \"typedConfig\": {",
      "2455:             \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\",",
      "2456:             \"httpFilters\": [",
      "2458:                 \"name\": \"com.google.espv2.filters.http.service_control\",",
      "2459:                 \"typedConfig\": {",
      "2460:                   \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.service_control.FilterConfig\",",
      "",
      "[Removed Lines]",
      "2457:               {",
      "",
      "[Added Lines]",
      "2493:        {",
      "2494:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "2495:         \"typedConfig\": {",
      "2496:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "2497:         }",
      "2498:        },",
      "2499:        {",
      "",
      "---------------"
    ],
    "src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go||src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go": [
      "File: src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go -> src/go/configmanager/testdata/test_fixed_mode_dynamic_routing.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "290:               \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
      "291:             },",
      "292:             \"httpFilters\": [",
      "294:                 \"name\": \"com.google.espv2.filters.http.backend_auth\",",
      "295:                 \"typedConfig\": {",
      "296:                   \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.backend_auth.FilterConfig\",",
      "",
      "[Removed Lines]",
      "293:               {",
      "",
      "[Added Lines]",
      "293:        {",
      "294:         \"name\": \"com.google.espv2.filters.http.header_sanitizer\",",
      "295:         \"typedConfig\": {",
      "296:          \"@type\": \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\"",
      "297:         }",
      "298:        },",
      "299:        {",
      "",
      "---------------"
    ],
    "src/go/util/marshal.go||src/go/util/marshal.go": [
      "File: src/go/util/marshal.go -> src/go/util/marshal.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:  bapb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/backend_auth\"",
      "25:  gmspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/grpc_metadata_scrubber\"",
      "26:  prpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/path_rewrite\"",
      "27:  scpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/service_control\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:  hspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/header_sanitizer\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:   return new(bapb.FilterConfig), nil",
      "118:  case \"type.googleapis.com/espv2.api.envoy.v11.http.grpc_metadata_scrubber.FilterConfig\":",
      "119:   return new(gmspb.FilterConfig), nil",
      "120:  case \"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\":",
      "121:   return new(routerpb.Router), nil",
      "122:  case \"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\":",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:  case \"type.googleapis.com/espv2.api.envoy.v11.http.header_sanitizer.FilterConfig\":",
      "122:   return new(hspb.FilterConfig), nil",
      "",
      "---------------"
    ],
    "src/go/util/xds_name.go||src/go/util/xds_name.go": [
      "File: src/go/util/xds_name.go -> src/go/util/xds_name.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "58:  BackendAuth = \"com.google.espv2.filters.http.backend_auth\"",
      "60:  GrpcMetadataScrubber = \"com.google.espv2.filters.http.grpc_metadata_scrubber\"",
      "63:  MetadataServerClusterName = \"metadata-cluster\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:  HeaderSanitizerScrubber = \"com.google.espv2.filters.http.header_sanitizer\"",
      "",
      "---------------"
    ],
    "tests/env/platform/ports.go||tests/env/platform/ports.go": [
      "File: tests/env/platform/ports.go -> tests/env/platform/ports.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:  TestAuthAllowMissing",
      "35:  TestAuthJwksAsyncFetch",
      "36:  TestAuthJwksCache",
      "37:  TestBackendAddressOverride",
      "38:  TestBackendAuthDisableAuth",
      "39:  TestBackendAuthPerPlatform",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:  TestAuthWithMethodOverride",
      "",
      "---------------"
    ],
    "tests/integration_test/http1_integration_test/http1_integration_test.go||tests/integration_test/http1_integration_test/http1_integration_test.go": [
      "File: tests/integration_test/http1_integration_test/http1_integration_test.go -> tests/integration_test/http1_integration_test/http1_integration_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "168:   },",
      "169:  }",
      "170:  for _, tc := range testData {",
      "179:    }",
      "181:  }",
      "182: }",
      "",
      "[Removed Lines]",
      "171:   host := fmt.Sprintf(\"http://%v:%v\", platform.GetLoopbackAddress(), s.Ports().ListenerPort)",
      "172:   resp, err := client.DoJWT(host, tc.httpMethod, tc.httpPath, \"\", \"\", tc.token)",
      "174:   if tc.wantedError == \"\" && err != nil || tc.wantedError != \"\" && err == nil || err != nil && !strings.Contains(err.Error(), tc.wantedError) {",
      "175:    t.Errorf(\"Test (%s): failed, expected err: %s, got: %s\", tc.desc, tc.wantedError, err)",
      "176:   } else {",
      "177:    if !strings.Contains(string(resp), tc.wantResp) {",
      "178:     t.Errorf(\"Test (%s): failed, expected: %s, got: %s\", tc.desc, tc.wantResp, string(resp))",
      "180:   }",
      "",
      "[Added Lines]",
      "171:   t.Run(tc.desc, func(t *testing.T) {",
      "172:    host := fmt.Sprintf(\"http://%v:%v\", platform.GetLoopbackAddress(), s.Ports().ListenerPort)",
      "173:    resp, err := client.DoJWT(host, tc.httpMethod, tc.httpPath, \"\", \"\", tc.token)",
      "175:    if tc.wantedError == \"\" && err != nil || tc.wantedError != \"\" && err == nil || err != nil && !strings.Contains(err.Error(), tc.wantedError) {",
      "176:     t.Errorf(\"Failed, expected err: %s, got: %s\", tc.wantedError, err)",
      "177:    } else {",
      "178:     if !strings.Contains(string(resp), tc.wantResp) {",
      "179:      t.Errorf(\"Failed, expected: %s, got: %s\", tc.wantResp, string(resp))",
      "180:     }",
      "182:   })",
      "",
      "---------------"
    ],
    "tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go||tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go": [
      "File: tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go -> tests/integration_test/jwt_auth_integration_test/jwt_auth_integration_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import (",
      "18:  \"encoding/json\"",
      "19:  \"fmt\"",
      "20:  \"strings\"",
      "21:  \"testing\"",
      "22:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20:  \"net/http\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "490:   })",
      "491:  }",
      "492: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "495: func TestAuthWithMethodOverride(t *testing.T) {",
      "496:  t.Parallel()",
      "498:  configID := \"test-config-id\"",
      "499:  args := []string{\"--service_config_id=\" + configID, \"--rollout_strategy=fixed\"}",
      "501:  s := env.NewTestEnv(platform.TestAuthWithMethodOverride, platform.GrpcBookstoreSidecar)",
      "502:  defer s.TearDown(t)",
      "503:  if err := s.Setup(args); err != nil {",
      "504:   t.Fatalf(\"fail to setup test env, %v\", err)",
      "505:  }",
      "507:  time.Sleep(5 * time.Second)",
      "508:  tests := []struct {",
      "509:   desc       string",
      "510:   httpMethod string",
      "511:   path       string",
      "512:   header     http.Header",
      "513:   wantResp   string",
      "514:   wantError  string",
      "515:  }{",
      "516:   {",
      "517:    desc:       \"Succeeded, no JWT needed to get a book\",",
      "518:    httpMethod: \"GET\",",
      "519:    path:       \"/v1/shelves/100/books/1001?key=api-key\",",
      "520:    wantResp:   `{\"id\":\"1001\",\"title\":\"Alphabet\"}`,",
      "521:   },",
      "522:   {",
      "523:    desc:       \"Failed, need JWT to delete a book.\",",
      "524:    httpMethod: \"DELETE\",",
      "525:    path:       \"/v1/shelves/100/books/1001?key=api-key\",",
      "526:    wantError:  `401 Unauthorized, {\"code\":401,\"message\":\"Jwt is missing\"}`,",
      "527:   },",
      "528:   {",
      "530:    desc:       \"Failed, need JWT to delete a book even when HTTP method override occurs\",",
      "531:    httpMethod: \"GET\",",
      "532:    path:       \"/v1/shelves/100/books/1001?key=api-key\",",
      "533:    header: map[string][]string{",
      "534:     \"x-http-method-override\": {\"DELETE\"},",
      "535:    },",
      "536:    wantError: `{\"code\":401,\"message\":\"Jwt is missing\"}`,",
      "537:   },",
      "538:  }",
      "540:  for _, tc := range tests {",
      "541:   t.Run(tc.desc, func(t *testing.T) {",
      "542:    addr := fmt.Sprintf(\"%v:%v\", platform.GetLoopbackAddress(), s.Ports().ListenerPort)",
      "543:    resp, err := client.MakeCall(\"http\", addr, tc.httpMethod, tc.path, \"\", tc.header)",
      "545:    if tc.wantError != \"\" && (err == nil || !strings.Contains(err.Error(), tc.wantError)) {",
      "546:     t.Errorf(\"Test (%s): failed, expected err: %v, got: %v\", tc.desc, tc.wantError, err)",
      "547:    } else if tc.wantError == \"\" && err != nil {",
      "548:     t.Errorf(\"Test (%s): failed, expected no error, got error: %s\", tc.desc, err)",
      "549:    } else {",
      "550:     if !strings.Contains(resp, tc.wantResp) {",
      "551:      t.Errorf(\"Test (%s): failed, expected: %s, got: %s\", tc.desc, tc.wantResp, resp)",
      "552:     }",
      "553:    }",
      "554:   })",
      "555:  }",
      "556: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "163064f863c0e45bb6b9569d3620a16a8411a4b2",
      "candidate_info": {
        "commit_hash": "163064f863c0e45bb6b9569d3620a16a8411a4b2",
        "repo": "GoogleCloudPlatform/esp-v2",
        "commit_url": "https://github.com/GoogleCloudPlatform/esp-v2/commit/163064f863c0e45bb6b9569d3620a16a8411a4b2",
        "files": [
          "src/go/configgenerator/filtergen/backend_auth.go",
          "src/go/configgenerator/filtergen/compressor.go",
          "src/go/configgenerator/filtergen/cors.go",
          "src/go/configgenerator/filtergen/filtergen.go",
          "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "src/go/configgenerator/filtergen/grpc_transcoder.go",
          "src/go/configgenerator/filtergen/grpc_web.go",
          "src/go/configgenerator/filtergen/header_sanitizer.go",
          "src/go/configgenerator/filtergen/health_check.go",
          "src/go/configgenerator/filtergen/http_connection_manager.go",
          "src/go/configgenerator/filtergen/jwt_authn.go",
          "src/go/configgenerator/filtergen/path_rewrite.go",
          "src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/route_generator.go",
          "src/go/configgenerator/route_generator_test.go"
        ],
        "message": "refactor: generate CORS per-vHost config in CORS filter (#844)\n\nStarted working on the refactor of `route_generator.go` so we can remove `ServiceInfo`. There are many items to clean up, expect quite a few PRs to finish up refactor work.\n\nThis PR:\n1) Moves some logic from `route_generator.go` to each `FilterGenerator`, allowing route generation to be generic.\n2) Introduces `NoopFilterGenerator` to reduce code duplication of optional methods.\n\nSigned-off-by: Teju Nareddy <nareddyt@google.com>",
        "before_after_code_files": [
          "src/go/configgenerator/filtergen/backend_auth.go||src/go/configgenerator/filtergen/backend_auth.go",
          "src/go/configgenerator/filtergen/compressor.go||src/go/configgenerator/filtergen/compressor.go",
          "src/go/configgenerator/filtergen/cors.go||src/go/configgenerator/filtergen/cors.go",
          "src/go/configgenerator/filtergen/filtergen.go||src/go/configgenerator/filtergen/filtergen.go",
          "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go||src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "src/go/configgenerator/filtergen/grpc_transcoder.go||src/go/configgenerator/filtergen/grpc_transcoder.go",
          "src/go/configgenerator/filtergen/grpc_web.go||src/go/configgenerator/filtergen/grpc_web.go",
          "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
          "src/go/configgenerator/filtergen/health_check.go||src/go/configgenerator/filtergen/health_check.go",
          "src/go/configgenerator/filtergen/http_connection_manager.go||src/go/configgenerator/filtergen/http_connection_manager.go",
          "src/go/configgenerator/filtergen/jwt_authn.go||src/go/configgenerator/filtergen/jwt_authn.go",
          "src/go/configgenerator/filtergen/path_rewrite.go||src/go/configgenerator/filtergen/path_rewrite.go",
          "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/route_generator.go||src/go/configgenerator/route_generator.go",
          "src/go/configgenerator/route_generator_test.go||src/go/configgenerator/route_generator_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go"
          ],
          "candidate": [
            "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go"
          ]
        }
      },
      "candidate_diff": {
        "src/go/configgenerator/filtergen/backend_auth.go||src/go/configgenerator/filtergen/backend_auth.go": [
          "File: src/go/configgenerator/filtergen/backend_auth.go -> src/go/configgenerator/filtergen/backend_auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  BackendAuthCredentials  *options.IAMCredentialsOptions",
          "54:  AccessToken *helpers.FilterAccessTokenConfiger",
          "55: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:  NoopFilterGenerator",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/compressor.go||src/go/configgenerator/filtergen/compressor.go": [
          "File: src/go/configgenerator/filtergen/compressor.go -> src/go/configgenerator/filtergen/compressor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"fmt\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "22:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "23:  brpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/compression/brotli/compressor/v3\"",
          "24:  gzippb \"github.com/envoyproxy/go-control-plane/envoy/extensions/compression/gzip/compressor/v3\"",
          "",
          "[Removed Lines]",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: type CompressorGenerator struct {",
          "51:  compressorType CompressorType",
          "52: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  NoopFilterGenerator",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:  }, nil",
          "91: }",
          "97: func (g *CompressorGenerator) getCompressorConfig() (proto.Message, string, error) {",
          "98:  switch g.compressorType {",
          "99:  case GzipCompressor:",
          "",
          "[Removed Lines]",
          "93: func (g *CompressorGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "94:  return nil, nil",
          "95: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/cors.go||src/go/configgenerator/filtergen/cors.go": [
          "File: src/go/configgenerator/filtergen/cors.go -> src/go/configgenerator/filtergen/cors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: package filtergen",
          "17: import (",
          "18:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "20:  corspb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/cors/v3\"",
          "21:  \"github.com/golang/glog\"",
          "22:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "23:  \"google.golang.org/protobuf/proto\"",
          "24: )",
          "26: const (",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "18:  \"fmt\"",
          "19:  \"strconv\"",
          "20:  \"time\"",
          "24:  matcherpb \"github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3\"",
          "28:  \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  CORSFilterName = \"envoy.filters.http.cors\"",
          "29: )",
          "35: func NewCORSFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "37:   glog.Infof(\"Not adding CORS filter gen because the feature is disabled by option, option is currently %q\", opts.CorsPreset)",
          "38:   return nil, nil",
          "39:  }",
          "41:  return []FilterGenerator{",
          "43:  }, nil",
          "44: }",
          "",
          "[Removed Lines]",
          "31: type CORSGenerator struct{}",
          "36:  if opts.CorsPreset != \"basic\" && opts.CorsPreset != \"cors_with_regex\" {",
          "42:   &CORSGenerator{},",
          "",
          "[Added Lines]",
          "37: type CORSGenerator struct {",
          "38:  Preset string",
          "40:  AllowOrigin string",
          "42:  AllowOriginRegex string",
          "43:  MaxAge           time.Duration",
          "44:  AllowMethods     string",
          "45:  AllowHeaders     string",
          "46:  ExposeHeaders    string",
          "47:  AllowCredentials bool",
          "49:  NoopFilterGenerator",
          "50: }",
          "55:  if opts.CorsPreset == \"\" {",
          "61:   &CORSGenerator{",
          "62:    Preset:           opts.CorsPreset,",
          "63:    AllowOrigin:      opts.CorsAllowOrigin,",
          "64:    AllowOriginRegex: opts.CorsAllowOriginRegex,",
          "65:    MaxAge:           opts.CorsMaxAge,",
          "66:    AllowMethods:     opts.CorsAllowMethods,",
          "67:    AllowHeaders:     opts.CorsAllowHeaders,",
          "68:    ExposeHeaders:    opts.CorsExposeHeaders,",
          "69:    AllowCredentials: opts.CorsAllowCredentials,",
          "70:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:  return &corspb.Cors{}, nil",
          "52: }",
          "56: }",
          "",
          "[Removed Lines]",
          "54: func (g *CORSGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "55:  return nil, nil",
          "",
          "[Added Lines]",
          "82: func (g *CORSGenerator) GenPerHostConfig(vHostName string) (proto.Message, error) {",
          "83:  policy := &corspb.CorsPolicy{",
          "84:   MaxAge:        strconv.Itoa(int(g.MaxAge.Seconds())),",
          "85:   AllowMethods:  g.AllowMethods,",
          "86:   AllowHeaders:  g.AllowHeaders,",
          "87:   ExposeHeaders: g.ExposeHeaders,",
          "88:   AllowCredentials: &wrapperspb.BoolValue{",
          "89:    Value: g.AllowCredentials,",
          "90:   },",
          "91:  }",
          "93:  switch g.Preset {",
          "94:  case \"basic\":",
          "95:   policy.AllowOriginStringMatch = []*matcherpb.StringMatcher{",
          "96:    {",
          "97:     MatchPattern: &matcherpb.StringMatcher_Exact{",
          "98:      Exact: g.AllowOrigin,",
          "99:     },",
          "100:    },",
          "101:   }",
          "103:  case \"cors_with_regex\":",
          "104:   policy.AllowOriginStringMatch = []*matcherpb.StringMatcher{",
          "105:    {",
          "106:     MatchPattern: &matcherpb.StringMatcher_SafeRegex{",
          "107:      SafeRegex: &matcherpb.RegexMatcher{",
          "108:       Regex: g.AllowOriginRegex,",
          "109:      },",
          "110:     },",
          "111:    },",
          "112:   }",
          "114:  default:",
          "115:   return nil, fmt.Errorf(`cors_preset must be either \"basic\" or \"cors_with_regex\"`)",
          "116:  }",
          "118:  return policy, nil",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/filtergen.go||src/go/configgenerator/filtergen/filtergen.go": [
          "File: src/go/configgenerator/filtergen/filtergen.go -> src/go/configgenerator/filtergen/filtergen.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  GenPerRouteConfig(string, *httppattern.Pattern) (proto.Message, error)",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:  GenPerHostConfig(string) (proto.Message, error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: type FilterGeneratorOPFactory func(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: type NoopFilterGenerator struct{}",
          "70: func (g *NoopFilterGenerator) GenPerRouteConfig(string, *httppattern.Pattern) (proto.Message, error) {",
          "71:  return nil, nil",
          "72: }",
          "74: func (g *NoopFilterGenerator) GenPerHostConfig(string) (proto.Message, error) {",
          "75:  return nil, nil",
          "76: }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go||src/go/configgenerator/filtergen/grpc_metadata_scrubber.go": [
          "File: src/go/configgenerator/filtergen/grpc_metadata_scrubber.go -> src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "19:  gmspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v12/http/grpc_metadata_scrubber\"",
          "21:  \"github.com/golang/glog\"",
          "22:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "23:  \"google.golang.org/protobuf/proto\"",
          "",
          "[Removed Lines]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  GrpcMetadataScrubberFilterName = \"com.google.espv2.filters.http.grpc_metadata_scrubber\"",
          "29: )",
          "",
          "[Removed Lines]",
          "31: type GRPCMetadataScrubberGenerator struct{}",
          "",
          "[Added Lines]",
          "30: type GRPCMetadataScrubberGenerator struct {",
          "31:  NoopFilterGenerator",
          "32: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50: func (g *GRPCMetadataScrubberGenerator) GenFilterConfig() (proto.Message, error) {",
          "51:  return &gmspb.FilterConfig{}, nil",
          "52: }",
          "",
          "[Removed Lines]",
          "54: func (g *GRPCMetadataScrubberGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "55:  return nil, nil",
          "56: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_transcoder.go||src/go/configgenerator/filtergen/grpc_transcoder.go": [
          "File: src/go/configgenerator/filtergen/grpc_transcoder.go -> src/go/configgenerator/filtergen/grpc_transcoder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  StrictRequestValidation            bool",
          "59:  RejectCollision                    bool",
          "60:  PrintOptions                       *transcoderpb.GrpcJsonTranscoder_PrintOptions",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  NoopFilterGenerator",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_web.go||src/go/configgenerator/filtergen/grpc_web.go": [
          "File: src/go/configgenerator/filtergen/grpc_web.go -> src/go/configgenerator/filtergen/grpc_web.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "20:  grpcwebpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/grpc_web/v3\"",
          "21:  \"github.com/golang/glog\"",
          "22:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  GRPCWebFilterName = \"envoy.filters.http.grpc_web\"",
          "29: )",
          "",
          "[Removed Lines]",
          "31: type GRPCWebGenerator struct{}",
          "",
          "[Added Lines]",
          "30: type GRPCWebGenerator struct {",
          "31:  NoopFilterGenerator",
          "32: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: func (g *GRPCWebGenerator) GenFilterConfig() (proto.Message, error) {",
          "55:  return &grpcwebpb.GrpcWeb{}, nil",
          "56: }",
          "",
          "[Removed Lines]",
          "58: func (g *GRPCWebGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "59:  return nil, nil",
          "60: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go": [
          "File: src/go/configgenerator/filtergen/header_sanitizer.go -> src/go/configgenerator/filtergen/header_sanitizer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "19:  hspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v12/http/header_sanitizer\"",
          "21:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "22:  \"google.golang.org/protobuf/proto\"",
          "23: )",
          "",
          "[Removed Lines]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:  HeaderSanitizerFilterName = \"com.google.espv2.filters.http.header_sanitizer\"",
          "28: )",
          "",
          "[Removed Lines]",
          "30: type HeaderSanitizerGenerator struct{}",
          "",
          "[Added Lines]",
          "29: type HeaderSanitizerGenerator struct {",
          "30:  NoopFilterGenerator",
          "31: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44: func (g *HeaderSanitizerGenerator) GenFilterConfig() (proto.Message, error) {",
          "45:  return &hspb.FilterConfig{}, nil",
          "46: }",
          "",
          "[Removed Lines]",
          "48: func (g *HeaderSanitizerGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "49:  return nil, nil",
          "50: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/health_check.go||src/go/configgenerator/filtergen/health_check.go": [
          "File: src/go/configgenerator/filtergen/health_check.go -> src/go/configgenerator/filtergen/health_check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/clustergen\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "24:  routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "25:  hcpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/health_check/v3\"",
          "26:  matcher \"github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3\"",
          "",
          "[Removed Lines]",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:  HealthzPath                  string",
          "41:  ShouldHealthCheckGrpcBackend bool",
          "42:  LocalBackendClusterName      string",
          "43: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:  NoopFilterGenerator",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:  return hcFilterConfig, nil",
          "96: }",
          "",
          "[Removed Lines]",
          "98: func (g *HealthCheckGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "99:  return nil, nil",
          "100: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/http_connection_manager.go||src/go/configgenerator/filtergen/http_connection_manager.go": [
          "File: src/go/configgenerator/filtergen/http_connection_manager.go -> src/go/configgenerator/filtergen/http_connection_manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/tracing\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "24:  acpb \"github.com/envoyproxy/go-control-plane/envoy/config/accesslog/v3\"",
          "25:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "26:  facpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3\"",
          "",
          "[Removed Lines]",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  UnderscoresInHeaders         bool",
          "53:  EnableGrpcForHttp1           bool",
          "54:  TracingOptions               *options.TracingOptions",
          "55: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:  NoopFilterGenerator",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:  return httpConMgr, nil",
          "199: }",
          "",
          "[Removed Lines]",
          "201: func (g *HTTPConnectionManagerGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "202:  return nil, nil",
          "203: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/jwt_authn.go||src/go/configgenerator/filtergen/jwt_authn.go": [
          "File: src/go/configgenerator/filtergen/jwt_authn.go -> src/go/configgenerator/filtergen/jwt_authn.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  JwtPadForwardPayloadHeader         bool",
          "68:  DisableJwtAudienceServiceNameCheck bool",
          "69:  JwtCacheSize                       uint",
          "70: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  NoopFilterGenerator",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/path_rewrite.go||src/go/configgenerator/filtergen/path_rewrite.go": [
          "File: src/go/configgenerator/filtergen/path_rewrite.go -> src/go/configgenerator/filtergen/path_rewrite.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: type PathRewriteGenerator struct {",
          "35:  TranslationInfoBySelector map[string]TranslationInfo",
          "36: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:  NoopFilterGenerator",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go": [
          "File: src/go/configgenerator/filtergen/router.go -> src/go/configgenerator/filtergen/router.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "20:  routerpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/router/v3\"",
          "21:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "22:  \"google.golang.org/protobuf/proto\"",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: type RouterGenerator struct {",
          "31:  SuppressEnvoyHeaders bool",
          "32:  StartChildSpan       bool",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:  NoopFilterGenerator",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   StartChildSpan:       g.StartChildSpan,",
          "54:  }, nil",
          "55: }",
          "",
          "[Removed Lines]",
          "57: func (g *RouterGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "58:  return nil, nil",
          "59: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go": [
          "File: src/go/configgenerator/filtergen/service_control.go -> src/go/configgenerator/filtergen/service_control.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  MethodRequirements []*scpb.Requirement",
          "78:  CallingConfig      *scpb.ServiceControlCallingConfig",
          "79:  GCPAttributes      *scpb.GcpAttributes",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:  NoopFilterGenerator",
          "",
          "---------------"
        ],
        "src/go/configgenerator/route_generator.go||src/go/configgenerator/route_generator.go": [
          "File: src/go/configgenerator/route_generator.go -> src/go/configgenerator/route_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  \"google.golang.org/protobuf/proto\"",
          "33:  \"google.golang.org/protobuf/types/known/anypb\"",
          "34:  \"google.golang.org/protobuf/types/known/durationpb\"",
          "36: )",
          "38: const (",
          "",
          "[Removed Lines]",
          "35:  wrapperspb \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "",
          "[Added Lines]",
          "35:  \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   Domains: []string{\"*\"},",
          "48:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  perHostConfig, err := makePerVHostFilterConfig(host.Name, filterGenerators)",
          "51:  if err != nil {",
          "52:   return nil, fmt.Errorf(\"fail to make per-vHost filter config for virtual host %q: %v\", host.Name, err)",
          "53:  }",
          "54:  host.TypedPerFilterConfig = perHostConfig",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:  }",
          "63:  host.Routes = backendRoutes",
          "66:  if err != nil {",
          "67:   return nil, err",
          "68:  }",
          "78:   host.Routes = append(host.Routes, corsRoutes...)",
          "79:   for i, corsRoute := range corsRoutes {",
          "80:    jsonStr, _ := util.ProtoToJson(corsRoute)",
          "",
          "[Removed Lines]",
          "65:  cors, corsRoutes, err := makeRouteCors(serviceInfo)",
          "70:  if cors != nil {",
          "71:   corsAny, err := anypb.New(cors)",
          "72:   if err != nil {",
          "73:    return nil, fmt.Errorf(\"error marshaling CorsPolicy to Any: %v\", err)",
          "74:   }",
          "75:   host.TypedPerFilterConfig = make(map[string]*anypb.Any)",
          "76:   host.TypedPerFilterConfig[filtergen.CORSFilterName] = corsAny",
          "",
          "[Added Lines]",
          "71:  _, corsRoutes, err := makeRouteCors(serviceInfo)",
          "76:  if len(corsRoutes) > 0 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:  for _, filterGen := range filterGenerators {",
          "317:   config, err := filterGen.GenPerRouteConfig(method.Operation(), httpRule)",
          "318:   if err != nil {",
          "320:   }",
          "321:   if config == nil {",
          "322:    continue",
          "",
          "[Removed Lines]",
          "319:    return perFilterConfig, fmt.Errorf(\"failed to generate per-route config for filter %q: %v\", filterGen.FilterName(), err)",
          "",
          "[Added Lines]",
          "318:    return perFilterConfig, fmt.Errorf(\"fail to generate per-route config for filter %q: %v\", filterGen.FilterName(), err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "332:  return perFilterConfig, nil",
          "333: }",
          "336: func MakeRouteTable(serviceInfo *configinfo.ServiceInfo, filterGenerators []filtergen.FilterGenerator) ([]*routepb.Route, []*routepb.Route, error) {",
          "337:  var backendRoutes []*routepb.Route",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335: func makePerVHostFilterConfig(vHost string, filterGenerators []filtergen.FilterGenerator) (map[string]*anypb.Any, error) {",
          "336:  perFilterConfig := make(map[string]*anypb.Any)",
          "338:  for _, filterGen := range filterGenerators {",
          "339:   config, err := filterGen.GenPerHostConfig(vHost)",
          "340:   if err != nil {",
          "341:    return perFilterConfig, fmt.Errorf(\"fail to generate per-vHost config for filter %q: %v\", filterGen.FilterName(), err)",
          "342:   }",
          "343:   if config == nil {",
          "344:    continue",
          "345:   }",
          "347:   perVHostFilterConfig, err := anypb.New(config)",
          "348:   if err != nil {",
          "349:    return nil, fmt.Errorf(\"fail to marshal per-vHost config to Any for filter %q: %v\", filterGen.FilterName(), err)",
          "350:   }",
          "351:   perFilterConfig[filterGen.FilterName()] = perVHostFilterConfig",
          "352:  }",
          "354:  return perFilterConfig, nil",
          "355: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376:    r.TypedPerFilterConfig, err = makePerRouteFilterConfig(method, httpRule, filterGenerators)",
          "377:    if err != nil {",
          "379:    }",
          "381:    if bi.Hostname != \"\" {",
          "",
          "[Removed Lines]",
          "378:     return nil, nil, fmt.Errorf(\"fail to make per-route filter config for operation (%v): %v\", operation, err)",
          "",
          "[Added Lines]",
          "400:     return nil, nil, fmt.Errorf(\"fail to make per-route filter config for operation %q: %v\", operation, err)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/route_generator_test.go||src/go/configgenerator/route_generator_test.go": [
          "File: src/go/configgenerator/route_generator_test.go -> src/go/configgenerator/route_generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "28:  corspb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/cors/v3\"",
          "29:  matcher \"github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3\"",
          "30:  annotationspb \"google.golang.org/genproto/googleapis/api/annotations\"",
          "31:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "32:  apipb \"google.golang.org/genproto/protobuf/api\"",
          "33:  \"google.golang.org/protobuf/proto\"",
          "35: )",
          "37: func TestMakeRouteConfig(t *testing.T) {",
          "",
          "[Removed Lines]",
          "34:  wrapperspb \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "",
          "[Added Lines]",
          "30:  \"github.com/google/go-cmp/cmp\"",
          "33:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "36:  \"google.golang.org/protobuf/testing/protocmp\"",
          "37:  \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3116:  testData := []struct {",
          "3117:   desc              string",
          "3118:   fakeServiceConfig *confpb.Service",
          "3120:   wantRouteConfig   string",
          "3121:  }{",
          "3122:   {",
          "",
          "[Removed Lines]",
          "3119:   params            []string",
          "",
          "[Added Lines]",
          "3122:   optsIn            options.ConfigGeneratorOptions",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3469:     },",
          "3470:     },",
          "3471:    },",
          "3473:    wantRouteConfig: `",
          "3474: {",
          "3475:   \"name\": \"local_route\",",
          "",
          "[Removed Lines]",
          "3472:    params: []string{\"basic\", \"*\", \"\", \"GET,POST,PUT,OPTIONS\", \"\", \"\", \"2m\"},",
          "",
          "[Added Lines]",
          "3475:    optsIn: options.ConfigGeneratorOptions{",
          "3476:     CorsPreset:       \"basic\",",
          "3477:     CorsAllowOrigin:  \"*\",",
          "3478:     CorsAllowMethods: \"GET,POST,PUT,OPTIONS\",",
          "3479:     CorsMaxAge:       2 * time.Minute,",
          "3480:    },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3726:     },",
          "3727:     },",
          "3728:    },",
          "3730:    wantRouteConfig: `",
          "3731: {",
          "3732:   \"name\": \"local_route\",",
          "",
          "[Removed Lines]",
          "3729:    params: []string{\"basic\", \"http://example.com\", \"\", \"GET,POST,PUT,OPTIONS\", \"\", \"\", \"2m\"},",
          "",
          "[Added Lines]",
          "3737:    optsIn: options.ConfigGeneratorOptions{",
          "3738:     CorsPreset:       \"basic\",",
          "3739:     CorsAllowOrigin:  \"http://example.com\",",
          "3740:     CorsAllowMethods: \"GET,POST,PUT,OPTIONS\",",
          "3741:     CorsMaxAge:       2 * time.Minute,",
          "3742:    },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3985:     },",
          "3986:     },",
          "3987:    },",
          "3989:    wantRouteConfig: `",
          "3990: {",
          "3991:   \"name\": \"local_route\",",
          "",
          "[Removed Lines]",
          "3988:    params: []string{\"cors_with_regex\", \"\", \".*\", \"GET,POST,PUT,OPTIONS\", \"\", \"\", \"2m\"},",
          "",
          "[Added Lines]",
          "4001:    optsIn: options.ConfigGeneratorOptions{",
          "4002:     CorsPreset:           \"cors_with_regex\",",
          "4003:     CorsAllowOriginRegex: \".*\",",
          "4004:     CorsAllowMethods:     \"GET,POST,PUT,OPTIONS\",",
          "4005:     CorsMaxAge:           2 * time.Minute,",
          "4006:    },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4434:  for _, tc := range testData {",
          "4435:   t.Run(tc.desc, func(t *testing.T) {",
          "4436:    opts := options.DefaultConfigGeneratorOptions()",
          "4451:    fakeServiceInfo, err := configinfo.NewServiceInfoFromServiceConfig(tc.fakeServiceConfig, opts)",
          "4452:    if err != nil {",
          "4453:     t.Fatal(err)",
          "4454:    }",
          "4457:    if err != nil {",
          "4458:     t.Fatalf(\"got error: %v\", err)",
          "4459:    }",
          "",
          "[Removed Lines]",
          "4438:    if tc.params != nil {",
          "4439:     opts.CorsPreset = tc.params[0]",
          "4440:     opts.CorsAllowOrigin = tc.params[1]",
          "4441:     opts.CorsAllowOriginRegex = tc.params[2]",
          "4442:     opts.CorsAllowMethods = tc.params[3]",
          "4443:     opts.CorsAllowHeaders = tc.params[4]",
          "4444:     opts.CorsExposeHeaders = tc.params[5]",
          "4445:     var err error",
          "4446:     opts.CorsMaxAge, err = time.ParseDuration(tc.params[6])",
          "4447:     if err != nil {",
          "4448:      t.Fatal(err)",
          "4449:     }",
          "4450:    }",
          "4456:    gotRoute, err := makeRouteConfig(fakeServiceInfo, nil)",
          "",
          "[Added Lines]",
          "4455:    opts.CorsPreset = tc.optsIn.CorsPreset",
          "4456:    opts.CorsAllowOrigin = tc.optsIn.CorsAllowOrigin",
          "4457:    opts.CorsAllowOriginRegex = tc.optsIn.CorsAllowOriginRegex",
          "4458:    opts.CorsAllowMethods = tc.optsIn.CorsAllowMethods",
          "4459:    opts.CorsAllowHeaders = tc.optsIn.CorsAllowHeaders",
          "4460:    opts.CorsExposeHeaders = tc.optsIn.CorsExposeHeaders",
          "4461:    opts.CorsMaxAge = tc.optsIn.CorsMaxAge",
          "4468:    filterGenFactories := MakeHTTPFilterGenFactories(filtergen.ServiceControlOPFactoryParams{})",
          "4469:    filterGens, err := NewFilterGeneratorsFromOPConfig(tc.fakeServiceConfig, opts, filterGenFactories)",
          "4470:    if err != nil {",
          "4471:     t.Fatal(err)",
          "4472:    }",
          "4474:    gotRoute, err := makeRouteConfig(fakeServiceInfo, filterGens)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4473: func TestMakeRouteConfigForCors(t *testing.T) {",
          "4474:  testData := []struct {",
          "4483:  }{",
          "4484:   {",
          "4485:    desc:           \"No Cors\",",
          "4486:    wantCorsPolicy: nil,",
          "4487:   },",
          "4488:   {",
          "4496:    wantCorsPolicy: nil,",
          "4497:   },",
          "4498:   {",
          "4511:    wantCorsPolicy: &corspb.CorsPolicy{",
          "4512:     AllowOriginStringMatch: []*matcher.StringMatcher{",
          "4513:      {",
          "",
          "[Removed Lines]",
          "4475:   desc string",
          "4479:   params           []string",
          "4480:   allowCredentials bool",
          "4481:   wantedError      string",
          "4482:   wantCorsPolicy   *corspb.CorsPolicy",
          "4489:    desc:        \"Incorrect configured basic Cors\",",
          "4490:    params:      []string{\"basic\", \"\", `^https?://.+\\\\.example\\\\.com\\/?$`, \"\", \"\", \"\", \"2m\"},",
          "4491:    wantedError: \"cors_allow_origin cannot be empty when cors_preset=basic\",",
          "4492:   },",
          "4493:   {",
          "4494:    desc:           \"No CORS even when other options are set\",",
          "4495:    params:         []string{\"\", \"\", \"\", \"GET\", \"\", \"\", \"2m\"},",
          "4499:    desc:        \"Incorrect configured regex Cors\",",
          "4500:    params:      []string{\"cors_with_regexs\", \"\", `^https?://.+\\\\.example\\\\.com\\/?$`, \"\", \"\", \"\", \"2m\"},",
          "4501:    wantedError: `cors_preset must be either \"basic\" or \"cors_with_regex\"`,",
          "4502:   },",
          "4503:   {",
          "4504:    desc:        \"Oversize cors origin regex\",",
          "4505:    params:      []string{\"cors_with_regex\", \"\", getOverSizeRegexForTest(), \"\", \"Origin,Content-Type,Accept\", \"\", \"2m\"},",
          "4506:    wantedError: `invalid cors origin regex: regex program size`,",
          "4507:   },",
          "4508:   {",
          "4509:    desc:   \"Correct configured basic Cors, with allow methods\",",
          "4510:    params: []string{\"basic\", \"http://example.com\", \"\", \"GET,POST,PUT,OPTIONS\", \"\", \"\", \"2m\"},",
          "",
          "[Added Lines]",
          "4493:   desc           string",
          "4494:   optsIn         options.ConfigGeneratorOptions",
          "4495:   wantCorsPolicy *corspb.CorsPolicy",
          "4502:    desc: \"No CORS even when other options are set\",",
          "4503:    optsIn: options.ConfigGeneratorOptions{",
          "4504:     CorsAllowMethods: \"GET\",",
          "4505:     CorsMaxAge:       2 * time.Minute,",
          "4506:    },",
          "4510:    desc: \"Correct configured basic Cors, with allow methods\",",
          "4511:    optsIn: options.ConfigGeneratorOptions{",
          "4512:     CorsPreset:       \"basic\",",
          "4513:     CorsAllowOrigin:  \"http://example.com\",",
          "4514:     CorsAllowMethods: \"GET,POST,PUT,OPTIONS\",",
          "4515:     CorsMaxAge:       2 * time.Minute,",
          "4516:    },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4522:    },",
          "4523:   },",
          "4524:   {",
          "4527:    wantCorsPolicy: &corspb.CorsPolicy{",
          "4528:     AllowOriginStringMatch: []*matcher.StringMatcher{",
          "4529:      {",
          "",
          "[Removed Lines]",
          "4525:    desc:   \"Correct configured regex Cors, with allow headers\",",
          "4526:    params: []string{\"cors_with_regex\", \"\", `^https?://.+\\\\.example\\\\.com\\/?$`, \"\", \"Origin,Content-Type,Accept\", \"\", \"2m\"},",
          "",
          "[Added Lines]",
          "4531:    desc: \"Correct configured regex Cors, with allow headers\",",
          "4532:    optsIn: options.ConfigGeneratorOptions{",
          "4533:     CorsPreset:           \"cors_with_regex\",",
          "4534:     CorsAllowOriginRegex: \"^https?://.+\\\\\\\\.example\\\\\\\\.com\\\\/?$\",",
          "4535:     CorsAllowHeaders:     \"Origin,Content-Type,Accept\",",
          "4536:     CorsMaxAge:           2 * time.Minute,",
          "4537:    },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4540:    },",
          "4541:   },",
          "4542:   {",
          "4546:    wantCorsPolicy: &corspb.CorsPolicy{",
          "4547:     AllowOriginStringMatch: []*matcher.StringMatcher{",
          "4548:      {",
          "",
          "[Removed Lines]",
          "4543:    desc:             \"Correct configured regex Cors, with expose headers\",",
          "4544:    params:           []string{\"cors_with_regex\", \"\", `^https?://.+\\\\.example\\\\.com\\/?$`, \"\", \"\", \"Content-Length\", \"2m\"},",
          "4545:    allowCredentials: true,",
          "",
          "[Added Lines]",
          "4554:    desc: \"Correct configured regex Cors, with expose headers\",",
          "4555:    optsIn: options.ConfigGeneratorOptions{",
          "4556:     CorsPreset:           \"cors_with_regex\",",
          "4557:     CorsAllowOriginRegex: \"^https?://.+\\\\\\\\.example\\\\\\\\.com\\\\/?$\",",
          "4558:     CorsExposeHeaders:    \"Content-Length\",",
          "4559:     CorsMaxAge:           2 * time.Minute,",
          "4560:     CorsAllowCredentials: true,",
          "4561:    },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4561:  }",
          "4563:  for _, tc := range testData {",
          "4574:    if err != nil {",
          "4575:     t.Fatal(err)",
          "4576:    }",
          "4587:    }",
          "4600:    }",
          "4609:     }",
          "4613:     }",
          "4614:    }",
          "4616:  }",
          "4617: }",
          "",
          "[Removed Lines]",
          "4564:   opts := options.DefaultConfigGeneratorOptions()",
          "4565:   if tc.params != nil {",
          "4566:    opts.CorsPreset = tc.params[0]",
          "4567:    opts.CorsAllowOrigin = tc.params[1]",
          "4568:    opts.CorsAllowOriginRegex = tc.params[2]",
          "4569:    opts.CorsAllowMethods = tc.params[3]",
          "4570:    opts.CorsAllowHeaders = tc.params[4]",
          "4571:    opts.CorsExposeHeaders = tc.params[5]",
          "4572:    var err error",
          "4573:    opts.CorsMaxAge, err = time.ParseDuration(tc.params[6])",
          "4577:   }",
          "4578:   opts.CorsAllowCredentials = tc.allowCredentials",
          "4580:   gotRoute, err := makeRouteConfig(&configinfo.ServiceInfo{",
          "4581:    Name:    \"test-api\",",
          "4582:    Options: opts,",
          "4583:   }, nil)",
          "4584:   if tc.wantedError != \"\" {",
          "4585:    if err == nil || !strings.Contains(err.Error(), tc.wantedError) {",
          "4586:     t.Errorf(\"Test (%s): expected err: %v, got: %v\", tc.desc, tc.wantedError, err)",
          "4588:    continue",
          "4589:   }",
          "4591:   gotHost := gotRoute.GetVirtualHosts()",
          "4592:   if len(gotHost) != 1 {",
          "4593:    t.Errorf(\"Test (%v): got expected number of virtual host\", tc.desc)",
          "4594:   }",
          "4596:   corsAny, ok := gotHost[0].TypedPerFilterConfig[filtergen.CORSFilterName]",
          "4597:   if tc.wantCorsPolicy == nil {",
          "4598:    if ok {",
          "4599:     t.Errorf(\"Test (%v): expect not CORS, but found one\", tc.desc)",
          "4601:   } else {",
          "4602:    if !ok {",
          "4603:     t.Errorf(\"Test (%v): expect CORS, but found none\", tc.desc)",
          "4604:    } else {",
          "4605:     gotCors := &corspb.CorsPolicy{}",
          "4606:     err := corsAny.UnmarshalTo(gotCors)",
          "4607:     if err != nil {",
          "4608:      t.Fatalf(\"Test (%v): UnmarshalTo got err: %v\", tc.desc, err)",
          "4611:     if !proto.Equal(gotCors, tc.wantCorsPolicy) {",
          "4612:      t.Errorf(\"Test (%v): CorsPolicy diff, got Cors: %v, want: %v\", tc.desc, gotCors, tc.wantCorsPolicy)",
          "4615:   }",
          "",
          "[Added Lines]",
          "4580:   t.Run(tc.desc, func(t *testing.T) {",
          "4582:    opts := options.DefaultConfigGeneratorOptions()",
          "4583:    opts.CorsPreset = tc.optsIn.CorsPreset",
          "4584:    opts.CorsAllowOrigin = tc.optsIn.CorsAllowOrigin",
          "4585:    opts.CorsAllowOriginRegex = tc.optsIn.CorsAllowOriginRegex",
          "4586:    opts.CorsAllowMethods = tc.optsIn.CorsAllowMethods",
          "4587:    opts.CorsAllowHeaders = tc.optsIn.CorsAllowHeaders",
          "4588:    opts.CorsExposeHeaders = tc.optsIn.CorsExposeHeaders",
          "4589:    opts.CorsMaxAge = tc.optsIn.CorsMaxAge",
          "4590:    opts.CorsAllowCredentials = tc.optsIn.CorsAllowCredentials",
          "4592:    fakeServiceConfig := &servicepb.Service{}",
          "4593:    fakeServiceInfo := &configinfo.ServiceInfo{",
          "4594:     Name:    \"test-api\",",
          "4595:     Options: opts,",
          "4596:    }",
          "4598:    filterGenFactories := MakeHTTPFilterGenFactories(filtergen.ServiceControlOPFactoryParams{})",
          "4599:    filterGens, err := NewFilterGeneratorsFromOPConfig(fakeServiceConfig, opts, filterGenFactories)",
          "4604:    gotRoute, err := makeRouteConfig(fakeServiceInfo, filterGens)",
          "4605:    if err != nil {",
          "4606:     t.Fatalf(\"makeRouteConfig(...) got err %v, want no err\", err)",
          "4609:    gotHost := gotRoute.GetVirtualHosts()",
          "4610:    if len(gotHost) != 1 {",
          "4611:     t.Errorf(\"Test (%v): got expected number of virtual host\", tc.desc)",
          "4614:    corsAny, ok := gotHost[0].TypedPerFilterConfig[filtergen.CORSFilterName]",
          "4615:    if tc.wantCorsPolicy == nil {",
          "4616:     if ok {",
          "4617:      t.Errorf(\"Test (%v): expect not CORS, but found one\", tc.desc)",
          "4619:    } else {",
          "4620:     if !ok {",
          "4621:      t.Errorf(\"Test (%v): expect CORS, but found none\", tc.desc)",
          "4622:     } else {",
          "4623:      gotCors := &corspb.CorsPolicy{}",
          "4624:      err := corsAny.UnmarshalTo(gotCors)",
          "4625:      if err != nil {",
          "4626:       t.Fatalf(\"Test (%v): UnmarshalTo got err: %v\", tc.desc, err)",
          "4627:      }",
          "4629:      if diff := cmp.Diff(tc.wantCorsPolicy, gotCors, protocmp.Transform()); diff != \"\" {",
          "4630:       t.Errorf(\"makeRouteConfig(...) diff for CORS policy on virtual host (-want +got):\\n%s\", diff)",
          "4631:      }",
          "4634:   })",
          "4635:  }",
          "4636: }",
          "4638: func TestMakeRouteConfigForCors_BadInput(t *testing.T) {",
          "4639:  testData := []struct {",
          "4640:   desc        string",
          "4641:   optsIn      options.ConfigGeneratorOptions",
          "4642:   wantedError string",
          "4643:  }{",
          "4644:   {",
          "4645:    desc: \"Incorrect configured basic Cors\",",
          "4646:    optsIn: options.ConfigGeneratorOptions{",
          "4647:     CorsPreset: \"basic\",",
          "4649:     CorsAllowOriginRegex: \"^https?://.+\\\\\\\\.example\\\\\\\\.com\\\\/?$\",",
          "4650:     CorsMaxAge:           2 * time.Minute,",
          "4651:    },",
          "4652:    wantedError: \"cors_allow_origin cannot be empty when cors_preset=basic\",",
          "4653:   },",
          "4654:   {",
          "4655:    desc: \"Incorrect configured regex Cors\",",
          "4656:    optsIn: options.ConfigGeneratorOptions{",
          "4657:     CorsPreset:           \"cors_with_regexs\", // typo",
          "4658:     CorsAllowOriginRegex: \"^https?://.+\\\\\\\\.example\\\\\\\\.com\\\\/?$\",",
          "4659:     CorsMaxAge:           2 * time.Minute,",
          "4660:    },",
          "4661:    wantedError: `cors_preset must be either \"basic\" or \"cors_with_regex\"`,",
          "4662:   },",
          "4663:   {",
          "4664:    desc: \"Oversize cors origin regex\",",
          "4665:    optsIn: options.ConfigGeneratorOptions{",
          "4666:     CorsPreset:           \"cors_with_regex\",",
          "4667:     CorsAllowOriginRegex: getOverSizeRegexForTest(),",
          "4668:     CorsAllowHeaders:     \"Origin,Content-Type,Accept\",",
          "4669:     CorsMaxAge:           2 * time.Minute,",
          "4670:    },",
          "4671:    wantedError: `invalid cors origin regex: regex program size`,",
          "4672:   },",
          "4673:  }",
          "4675:  for _, tc := range testData {",
          "4676:   t.Run(tc.desc, func(t *testing.T) {",
          "4677:    opts := options.DefaultConfigGeneratorOptions()",
          "4678:    opts.CorsPreset = tc.optsIn.CorsPreset",
          "4679:    opts.CorsAllowOrigin = tc.optsIn.CorsAllowOrigin",
          "4680:    opts.CorsAllowOriginRegex = tc.optsIn.CorsAllowOriginRegex",
          "4681:    opts.CorsAllowMethods = tc.optsIn.CorsAllowMethods",
          "4682:    opts.CorsAllowHeaders = tc.optsIn.CorsAllowHeaders",
          "4683:    opts.CorsExposeHeaders = tc.optsIn.CorsExposeHeaders",
          "4684:    opts.CorsMaxAge = tc.optsIn.CorsMaxAge",
          "4686:    fakeServiceInfo := &configinfo.ServiceInfo{",
          "4687:     Name:    \"test-api\",",
          "4688:     Options: opts,",
          "4689:    }",
          "4691:    _, err := makeRouteConfig(fakeServiceInfo, nil)",
          "4692:    if err == nil || !strings.Contains(err.Error(), tc.wantedError) {",
          "4693:     t.Errorf(\"Test (%s): expected err: %v, got: %v\", tc.desc, tc.wantedError, err)",
          "4694:    }",
          "4695:   })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb83d168e9f55c597112f9abecc2c3f2818156a5",
      "candidate_info": {
        "commit_hash": "fb83d168e9f55c597112f9abecc2c3f2818156a5",
        "repo": "GoogleCloudPlatform/esp-v2",
        "commit_url": "https://github.com/GoogleCloudPlatform/esp-v2/commit/fb83d168e9f55c597112f9abecc2c3f2818156a5",
        "files": [
          "src/go/configgenerator/filter_generator.go",
          "src/go/configgenerator/filtergen/backend_auth.go",
          "src/go/configgenerator/filtergen/backend_auth_test.go",
          "src/go/configgenerator/filtergen/compressor.go",
          "src/go/configgenerator/filtergen/cors.go",
          "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "src/go/configgenerator/filtergen/grpc_transcoder.go",
          "src/go/configgenerator/filtergen/grpc_transcoder_test.go",
          "src/go/configgenerator/filtergen/grpc_web.go",
          "src/go/configgenerator/filtergen/header_sanitizer.go",
          "src/go/configgenerator/filtergen/health_check.go",
          "src/go/configgenerator/filtergen/health_check_test.go",
          "src/go/configgenerator/filtergen/jwt_authn.go",
          "src/go/configgenerator/filtergen/jwt_authn_test.go",
          "src/go/configgenerator/filtergen/path_rewrite.go",
          "src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/filtergen/util.go",
          "src/go/configgenerator/listener_generator.go",
          "src/go/configgenerator/listener_generator_test.go",
          "src/go/configgenerator/route_generator.go",
          "src/go/configgenerator/route_generator_test.go",
          "src/go/util/xds_name.go"
        ],
        "message": "Change `GenFilterConfig()` to return `proto.Message` instead of `Any` (#807)\n\nBenefits:\n\n1) Reduces code duplication, as only the caller needs to worry about marshall into `Any`. Note the net diff of this PR is negative \ud83d\udc4d \n2) Useful for internal consumption, as sometimes we don't need the `Any`.\n3) Removes dependencies in the filter generators.\n\nOther diffs:\n- Same change for `GenPerRouteConfig()`.\n- Move filter names into same files.\n\nSigned-off-by: Teju Nareddy <nareddyt@google.com>",
        "before_after_code_files": [
          "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
          "src/go/configgenerator/filtergen/backend_auth.go||src/go/configgenerator/filtergen/backend_auth.go",
          "src/go/configgenerator/filtergen/backend_auth_test.go||src/go/configgenerator/filtergen/backend_auth_test.go",
          "src/go/configgenerator/filtergen/compressor.go||src/go/configgenerator/filtergen/compressor.go",
          "src/go/configgenerator/filtergen/cors.go||src/go/configgenerator/filtergen/cors.go",
          "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go||src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "src/go/configgenerator/filtergen/grpc_transcoder.go||src/go/configgenerator/filtergen/grpc_transcoder.go",
          "src/go/configgenerator/filtergen/grpc_transcoder_test.go||src/go/configgenerator/filtergen/grpc_transcoder_test.go",
          "src/go/configgenerator/filtergen/grpc_web.go||src/go/configgenerator/filtergen/grpc_web.go",
          "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
          "src/go/configgenerator/filtergen/health_check.go||src/go/configgenerator/filtergen/health_check.go",
          "src/go/configgenerator/filtergen/health_check_test.go||src/go/configgenerator/filtergen/health_check_test.go",
          "src/go/configgenerator/filtergen/jwt_authn.go||src/go/configgenerator/filtergen/jwt_authn.go",
          "src/go/configgenerator/filtergen/jwt_authn_test.go||src/go/configgenerator/filtergen/jwt_authn_test.go",
          "src/go/configgenerator/filtergen/path_rewrite.go||src/go/configgenerator/filtergen/path_rewrite.go",
          "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/filtergen/util.go||src/go/configgenerator/filtergen/util.go",
          "src/go/configgenerator/listener_generator.go||src/go/configgenerator/listener_generator.go",
          "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
          "src/go/configgenerator/route_generator.go||src/go/configgenerator/route_generator.go",
          "src/go/configgenerator/route_generator_test.go||src/go/configgenerator/route_generator_test.go",
          "src/go/util/xds_name.go||src/go/util/xds_name.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
            "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
            "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
            "src/go/util/xds_name.go||src/go/util/xds_name.go"
          ],
          "candidate": [
            "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
            "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
            "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
            "src/go/util/xds_name.go||src/go/util/xds_name.go"
          ]
        }
      },
      "candidate_diff": {
        "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go": [
          "File: src/go/configgenerator/filter_generator.go -> src/go/configgenerator/filter_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen\"",
          "19:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "23: )",
          "",
          "[Removed Lines]",
          "21:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "22:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: }",
          "",
          "[Removed Lines]",
          "39:  GenFilterConfig(*ci.ServiceInfo) (*hcmpb.HttpFilter, error)",
          "46:  GenPerRouteConfig(*ci.MethodInfo, *httppattern.Pattern) (*anypb.Any, error)",
          "",
          "[Added Lines]",
          "40:  GenFilterConfig(*ci.ServiceInfo) (proto.Message, error)",
          "49:  GenPerRouteConfig(*ci.MethodInfo, *httppattern.Pattern) (proto.Message, error)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/backend_auth.go||src/go/configgenerator/filtergen/backend_auth.go": [
          "File: src/go/configgenerator/filtergen/backend_auth.go -> src/go/configgenerator/filtergen/backend_auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "24:  \"github.com/golang/protobuf/ptypes\"",
          "27:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "28:  bapb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/backend_auth\"",
          "29:  commonpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/common\"",
          "30: )",
          "32: type BackendAuthGenerator struct {",
          "34:  audMap map[string]bool",
          "",
          "[Removed Lines]",
          "23:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "25:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "23:  \"github.com/golang/protobuf/proto\"",
          "31: const (",
          "33:  BackendAuthFilterName = \"com.google.espv2.filters.http.backend_auth\"",
          "34: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: }",
          "44: func (g *BackendAuthGenerator) FilterName() string {",
          "46: }",
          "48: func (g *BackendAuthGenerator) IsEnabled() bool {",
          "49:  return len(g.audMap) > 0",
          "50: }",
          "53:  if method.BackendInfo == nil || method.BackendInfo.JwtAudience == \"\" {",
          "54:   return nil, nil",
          "55:  }",
          "58:   JwtAudience: method.BackendInfo.JwtAudience,",
          "65: }",
          "68:  var audList []string",
          "69:  for aud := range g.audMap {",
          "70:   audList = append(audList, aud)",
          "",
          "[Removed Lines]",
          "45:  return util.BackendAuth",
          "52: func (g *BackendAuthGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "57:  auPerRoute := &bapb.PerRouteFilterConfig{",
          "59:  }",
          "60:  aupr, err := ptypes.MarshalAny(auPerRoute)",
          "61:  if err != nil {",
          "62:   return nil, fmt.Errorf(\"error marshaling backend_auth per-route config to Any: %v\", err)",
          "63:  }",
          "64:  return aupr, nil",
          "67: func (g *BackendAuthGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "49:  return BackendAuthFilterName",
          "56: func (g *BackendAuthGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "61:  return &bapb.PerRouteFilterConfig{",
          "63:  }, nil",
          "66: func (g *BackendAuthGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:    },",
          "106:   }",
          "107:  }",
          "118: }",
          "",
          "[Removed Lines]",
          "108:  backendAuthConfigStruct, err := ptypes.MarshalAny(backendAuthConfig)",
          "109:  if err != nil {",
          "110:   return nil, err",
          "111:  }",
          "113:  backendAuthFilter := &hcmpb.HttpFilter{",
          "114:   Name:       util.BackendAuth,",
          "115:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: backendAuthConfigStruct},",
          "116:  }",
          "117:  return backendAuthFilter, nil",
          "",
          "[Added Lines]",
          "108:  return backendAuthConfig, nil",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/backend_auth_test.go||src/go/configgenerator/filtergen/backend_auth_test.go": [
          "File: src/go/configgenerator/filtergen/backend_auth_test.go -> src/go/configgenerator/filtergen/backend_auth_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:     return",
          "290:    }",
          "292:    marshaler := &jsonpb.Marshaler{}",
          "294:    if err != nil {",
          "295:     t.Fatal(err)",
          "296:    }",
          "",
          "[Removed Lines]",
          "293:    gotFilter, err := marshaler.MarshalToString(filterConfig)",
          "",
          "[Added Lines]",
          "292:    httpFilter, err := FilterConfigToHTTPFilter(filterConfig, gen.FilterName())",
          "293:    if err != nil {",
          "294:     t.Fatalf(\"Fail to convert filter config to HTTP filter: %v\", err)",
          "295:    }",
          "298:    gotFilter, err := marshaler.MarshalToString(httpFilter)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/compressor.go||src/go/configgenerator/filtergen/compressor.go": [
          "File: src/go/configgenerator/filtergen/compressor.go -> src/go/configgenerator/filtergen/compressor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"fmt\"",
          "20:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "23:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "24:  brpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/compression/brotli/compressor/v3\"",
          "25:  gzippb \"github.com/envoyproxy/go-control-plane/envoy/extensions/compression/gzip/compressor/v3\"",
          "26:  comppb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/compressor/v3\"",
          "28:  \"github.com/golang/protobuf/proto\"",
          "29:  \"github.com/golang/protobuf/ptypes\"",
          "31: )",
          "33: type CompressorType int",
          "",
          "[Removed Lines]",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "27:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "30:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  BrotliCompressor",
          "38: )",
          "40: type CompressorGenerator struct {",
          "41:  compressorType CompressorType",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: const (",
          "39:  EnvoyCompressorFilterName = \"envoy.filters.http.compressor\"",
          "42:  EnvoyBrotliCompressorName = \"envoy.compression.brotli.compressor\"",
          "45:  EnvoyGzipCompressorName = \"envoy.compression.gzip.compressor\"",
          "46: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: }",
          "55: func (g *CompressorGenerator) FilterName() string {",
          "63: }",
          "65: func (g *CompressorGenerator) IsEnabled() bool {",
          "66:  return !g.skipFilter",
          "67: }",
          "70:  cfg, name, err := g.getCompressorConfig()",
          "71:  if err != nil {",
          "72:   return nil, err",
          "",
          "[Removed Lines]",
          "56:  switch g.compressorType {",
          "57:  case GzipCompressor:",
          "58:   return util.EnvoyGzipCompressor",
          "59:  case BrotliCompressor:",
          "60:   return util.EnvoyBrotliCompressor",
          "61:  }",
          "62:  return \"\"",
          "69: func (g *CompressorGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "64:  return EnvoyCompressorFilterName",
          "71: func (g *CompressorGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:  if err != nil {",
          "76:   return nil, fmt.Errorf(\"error marshaling %s Compressor config to Any: %v\", name, err)",
          "77:  }",
          "79:   CompressorLibrary: &corepb.TypedExtensionConfig{",
          "80:    Name:        name,",
          "81:    TypedConfig: ca,",
          "82:   },",
          "93:  }, nil",
          "94: }",
          "97:  return nil, nil",
          "98: }",
          "100: func (g *CompressorGenerator) getCompressorConfig() (proto.Message, string, error) {",
          "101:  switch g.compressorType {",
          "102:  case GzipCompressor:",
          "104:  case BrotliCompressor:",
          "106:  }",
          "107:  return nil, \"\", fmt.Errorf(\"unknown compressor type: %v\", g.compressorType)",
          "108: }",
          "",
          "[Removed Lines]",
          "78:  cmp := &comppb.Compressor{",
          "83:  }",
          "84:  a, err := ptypes.MarshalAny(cmp)",
          "85:  if err != nil {",
          "86:   return nil, fmt.Errorf(\"error marshaling Compressor filter config to Any: %v\", err)",
          "87:  }",
          "88:  return &hcmpb.HttpFilter{",
          "89:   Name: util.EnvoyCompressorFilter,",
          "90:   ConfigType: &hcmpb.HttpFilter_TypedConfig{",
          "91:    TypedConfig: a,",
          "92:   },",
          "96: func (g *CompressorGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "103:   return &gzippb.Gzip{}, util.EnvoyGzipCompressor, nil",
          "105:   return &brpb.Brotli{}, util.EnvoyBrotliCompressor, nil",
          "",
          "[Added Lines]",
          "80:  return &comppb.Compressor{",
          "88: func (g *CompressorGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "95:   return &gzippb.Gzip{}, EnvoyGzipCompressorName, nil",
          "97:   return &brpb.Brotli{}, EnvoyBrotliCompressorName, nil",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/cors.go||src/go/configgenerator/filtergen/cors.go": [
          "File: src/go/configgenerator/filtergen/cors.go -> src/go/configgenerator/filtergen/cors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "21:  corspb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/cors/v3\"",
          "25: )",
          "27: type CORSGenerator struct {",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "23:  \"github.com/golang/protobuf/ptypes\"",
          "24:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "22: )",
          "24: const (",
          "26:  CORSFilterName = \"envoy.filters.http.cors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: }",
          "39: func (g *CORSGenerator) FilterName() string {",
          "41: }",
          "43: func (g *CORSGenerator) IsEnabled() bool {",
          "44:  return !g.skipFilter",
          "45: }",
          "57: }",
          "60:  return nil, nil",
          "61: }",
          "",
          "[Removed Lines]",
          "40:  return util.CORS",
          "47: func (g *CORSGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "48:  a, err := ptypes.MarshalAny(&corspb.Cors{})",
          "49:  if err != nil {",
          "50:   return nil, err",
          "51:  }",
          "52:  corsFilter := &hcmpb.HttpFilter{",
          "53:   Name:       util.CORS,",
          "54:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: a},",
          "55:  }",
          "56:  return corsFilter, nil",
          "59: func (g *CORSGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "",
          "[Added Lines]",
          "42:  return CORSFilterName",
          "49: func (g *CORSGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "50:  return &corspb.Cors{}, nil",
          "53: func (g *CORSGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go||src/go/configgenerator/filtergen/grpc_metadata_scrubber.go": [
          "File: src/go/configgenerator/filtergen/grpc_metadata_scrubber.go -> src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "19:  gmspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/grpc_metadata_scrubber\"",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "25: )",
          "27: type GRPCMetadataScrubberGenerator struct {",
          "",
          "[Removed Lines]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "23:  \"github.com/golang/protobuf/ptypes\"",
          "24:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "22: )",
          "24: const (",
          "26:  GrpcMetadataScrubberFilterName = \"com.google.espv2.filters.http.grpc_metadata_scrubber\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: }",
          "39: func (g *GRPCMetadataScrubberGenerator) FilterName() string {",
          "41: }",
          "43: func (g *GRPCMetadataScrubberGenerator) IsEnabled() bool {",
          "44:  return !g.skipFilter",
          "45: }",
          "56: }",
          "59:  return nil, nil",
          "60: }",
          "",
          "[Removed Lines]",
          "40:  return util.GrpcMetadataScrubber",
          "47: func (g *GRPCMetadataScrubberGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "48:  a, err := ptypes.MarshalAny(&gmspb.FilterConfig{})",
          "49:  if err != nil {",
          "50:   return nil, err",
          "51:  }",
          "52:  return &hcmpb.HttpFilter{",
          "53:   Name:       util.GrpcMetadataScrubber,",
          "54:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: a},",
          "55:  }, nil",
          "58: func (g *GRPCMetadataScrubberGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "",
          "[Added Lines]",
          "42:  return GrpcMetadataScrubberFilterName",
          "49: func (g *GRPCMetadataScrubberGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "50:  return &gmspb.FilterConfig{}, nil",
          "53: func (g *GRPCMetadataScrubberGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_transcoder.go||src/go/configgenerator/filtergen/grpc_transcoder.go": [
          "File: src/go/configgenerator/filtergen/grpc_transcoder.go -> src/go/configgenerator/filtergen/grpc_transcoder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "24:  transcoderpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/grpc_json_transcoder/v3\"",
          "26:  \"github.com/golang/glog\"",
          "28:  ahpb \"google.golang.org/genproto/googleapis/api/annotations\"",
          "29:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "30:  smpb \"google.golang.org/genproto/googleapis/api/servicemanagement/v1\"",
          "32:  descpb \"google.golang.org/protobuf/types/descriptorpb\"",
          "34: )",
          "36: type GRPCTranscoderGenerator struct {",
          "",
          "[Removed Lines]",
          "25:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "27:  \"github.com/golang/protobuf/ptypes\"",
          "31:  \"google.golang.org/protobuf/proto\"",
          "33:  \"google.golang.org/protobuf/types/known/anypb\"",
          "",
          "[Added Lines]",
          "26:  \"github.com/golang/protobuf/proto\"",
          "30:  protov2 \"google.golang.org/protobuf/proto\"",
          "32: )",
          "34: const (",
          "36:  GRPCTranscoderFilterName = \"envoy.filters.http.grpc_json_transcoder\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: }",
          "69: func (g *GRPCTranscoderGenerator) FilterName() string {",
          "71: }",
          "73: func (g *GRPCTranscoderGenerator) IsEnabled() bool {",
          "",
          "[Removed Lines]",
          "70:  return util.GRPCJSONTranscoder",
          "",
          "[Added Lines]",
          "73:  return GRPCTranscoderFilterName",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:  return false",
          "89: }",
          "92:  if g.configFile == nil {",
          "93:   return nil, fmt.Errorf(\"internal error, config file should be set as transcoder filer is enabled\")",
          "94:  }",
          "",
          "[Removed Lines]",
          "91: func (g *GRPCTranscoderGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "94: func (g *GRPCTranscoderGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:  }",
          "135:  transcodeConfig.Services = append(transcodeConfig.Services, serviceInfo.ApiNames...)",
          "143: }",
          "146:  if method.HttpBackendInfo != nil {",
          "147:   glog.Infof(\"Disable transcoder for the per-route config for method %q because it has HTTP backends.\", method.Operation())",
          "149:    DescriptorSet: &transcoderpb.GrpcJsonTranscoder_ProtoDescriptor{",
          "150:     ProtoDescriptor: \"\",",
          "151:    },",
          "153:  }",
          "154:  return nil, nil",
          "155: }",
          "",
          "[Removed Lines]",
          "137:  transcodeConfigStruct, _ := ptypes.MarshalAny(transcodeConfig)",
          "138:  transcodeFilter := &hcmpb.HttpFilter{",
          "139:   Name:       util.GRPCJSONTranscoder,",
          "140:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: transcodeConfigStruct},",
          "141:  }",
          "142:  return transcodeFilter, nil",
          "145: func (g *GRPCTranscoderGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "148:   return anypb.New(&transcoderpb.GrpcJsonTranscoder{",
          "152:   })",
          "",
          "[Added Lines]",
          "139:  return transcodeConfig, nil",
          "142: func (g *GRPCTranscoderGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "145:   return &transcoderpb.GrpcJsonTranscoder{",
          "149:   }, nil",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181:  }",
          "183:  fds := &descpb.FileDescriptorSet{}",
          "185:   glog.Error(\"failed to unmarshal protodescriptor, error: \", err)",
          "186:   return nil, fmt.Errorf(\"failed to unmarshal proto descriptor, error: %v\", err)",
          "187:  }",
          "",
          "[Removed Lines]",
          "184:  if err := proto.Unmarshal(descriptorBytes, fds); err != nil {",
          "",
          "[Added Lines]",
          "181:  if err := protov2.Unmarshal(descriptorBytes, fds); err != nil {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "204:      if method.GetOptions() == nil {",
          "205:       method.Options = &descpb.MethodOptions{}",
          "206:      }",
          "208:     }",
          "215:      defaultPath := fmt.Sprintf(\"/%s/%s\", apiName, method.GetName())",
          "216:      preserveDefaultHttpBinding(httpRule, defaultPath)",
          "217:     }",
          "",
          "[Removed Lines]",
          "207:      proto.SetExtension(method.GetOptions(), ahpb.E_Http, rule)",
          "214:     if httpRule := proto.GetExtension(method.GetOptions(), ahpb.E_Http).(*ahpb.HttpRule); httpRule != nil {",
          "",
          "[Added Lines]",
          "204:      protov2.SetExtension(method.GetOptions(), ahpb.E_Http, rule)",
          "211:     if httpRule := protov2.GetExtension(method.GetOptions(), ahpb.E_Http).(*ahpb.HttpRule); httpRule != nil {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219:   }",
          "220:  }",
          "223:  if err != nil {",
          "224:   glog.Error(\"failed to marshal proto descriptor, error: \", err)",
          "225:   return nil, fmt.Errorf(\"failed to marshal proto descriptor, error: %v\", err)",
          "",
          "[Removed Lines]",
          "222:  newData, err := proto.Marshal(fds)",
          "",
          "[Added Lines]",
          "219:  newData, err := protov2.Marshal(fds)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "234:  for _, additionalBinding := range httpRule.AdditionalBindings {",
          "236:    return",
          "237:   }",
          "238:  }",
          "",
          "[Removed Lines]",
          "235:   if proto.Equal(additionalBinding, defaultBinding) {",
          "",
          "[Added Lines]",
          "232:   if protov2.Equal(additionalBinding, defaultBinding) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "241:  defaultBinding.Selector = httpRule.GetSelector()",
          "242:  defaultBinding.AdditionalBindings = httpRule.GetAdditionalBindings()",
          "244:   return",
          "245:  }",
          "246:  defaultBinding.Selector = \"\"",
          "",
          "[Removed Lines]",
          "243:  if proto.Equal(httpRule, defaultBinding) {",
          "",
          "[Added Lines]",
          "240:  if protov2.Equal(httpRule, defaultBinding) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_transcoder_test.go||src/go/configgenerator/filtergen/grpc_transcoder_test.go": [
          "File: src/go/configgenerator/filtergen/grpc_transcoder_test.go -> src/go/configgenerator/filtergen/grpc_transcoder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "26:  \"github.com/GoogleCloudPlatform/esp-v2/tests/utils\"",
          "27:  \"github.com/golang/protobuf/jsonpb\"",
          "28:  ahpb \"google.golang.org/genproto/googleapis/api/annotations\"",
          "29:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "30:  smpb \"google.golang.org/genproto/googleapis/api/servicemanagement/v1\"",
          "31:  apipb \"google.golang.org/genproto/protobuf/api\"",
          "32:  \"google.golang.org/protobuf/encoding/prototext\"",
          "34:  descpb \"google.golang.org/protobuf/types/descriptorpb\"",
          "35:  \"google.golang.org/protobuf/types/known/anypb\"",
          "36: )",
          "",
          "[Removed Lines]",
          "33:  \"google.golang.org/protobuf/proto\"",
          "",
          "[Added Lines]",
          "28:  \"github.com/golang/protobuf/proto\"",
          "29:  \"github.com/golang/protobuf/ptypes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   FileContents: rawDescriptor,",
          "48:   FileType:     smpb.ConfigFile_FILE_DESCRIPTOR_SET_PROTO,",
          "49:  }",
          "51:  if err != nil {",
          "52:   t.Fatalf(\"Failed to marshal source file into any: %v\", err)",
          "53:  }",
          "",
          "[Removed Lines]",
          "50:  content, err := anypb.New(sourceFile)",
          "",
          "[Added Lines]",
          "51:  content, err := ptypes.MarshalAny(sourceFile)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335:     t.Fatal(\"Got empty filter config.\")",
          "336:    }",
          "338:    marshaler := &jsonpb.Marshaler{}",
          "340:    if err != nil {",
          "341:     t.Fatal(err)",
          "342:    }",
          "",
          "[Removed Lines]",
          "339:    gotFilter, err := marshaler.MarshalToString(filterConfig)",
          "",
          "[Added Lines]",
          "339:    httpFilter, err := FilterConfigToHTTPFilter(filterConfig, gen.FilterName())",
          "340:    if err != nil {",
          "341:     t.Fatalf(\"Fail to convert filter config to HTTP filter: %v\", err)",
          "342:    }",
          "345:    gotFilter, err := marshaler.MarshalToString(httpFilter)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359:   FileContents: rawDescriptor,",
          "360:   FileType:     smpb.ConfigFile_FILE_DESCRIPTOR_SET_PROTO,",
          "361:  }",
          "363:  if err != nil {",
          "364:   t.Fatalf(\"Failed to marshal source file into any: %v\", err)",
          "365:  }",
          "",
          "[Removed Lines]",
          "362:  content, err := anypb.New(sourceFile)",
          "",
          "[Added Lines]",
          "368:  content, err := ptypes.MarshalAny(sourceFile)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_web.go||src/go/configgenerator/filtergen/grpc_web.go": [
          "File: src/go/configgenerator/filtergen/grpc_web.go -> src/go/configgenerator/filtergen/grpc_web.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "21:  grpcwebpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/grpc_web/v3\"",
          "25: )",
          "27: type GRPCWebGenerator struct {",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "23:  \"github.com/golang/protobuf/ptypes\"",
          "24:  \"google.golang.org/protobuf/types/known/anypb\"",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "22: )",
          "24: const (",
          "26:  GRPCWebFilterName = \"envoy.filters.http.grpc_web\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: }",
          "39: func (g *GRPCWebGenerator) FilterName() string {",
          "41: }",
          "43: func (g *GRPCWebGenerator) IsEnabled() bool {",
          "44:  return !g.skipFilter",
          "45: }",
          "56: }",
          "59:  return nil, nil",
          "60: }",
          "",
          "[Removed Lines]",
          "40:  return util.GRPCWeb",
          "47: func (g *GRPCWebGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "48:  a, err := ptypes.MarshalAny(&grpcwebpb.GrpcWeb{})",
          "49:  if err != nil {",
          "50:   return nil, err",
          "51:  }",
          "52:  return &hcmpb.HttpFilter{",
          "53:   Name:       util.GRPCWeb,",
          "54:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: a},",
          "55:  }, nil",
          "58: func (g *GRPCWebGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "",
          "[Added Lines]",
          "42:  return GRPCWebFilterName",
          "49: func (g *GRPCWebGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "50:  return &grpcwebpb.GrpcWeb{}, nil",
          "53: func (g *GRPCWebGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go": [
          "File: src/go/configgenerator/filtergen/header_sanitizer.go -> src/go/configgenerator/filtergen/header_sanitizer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "19:  hspb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/header_sanitizer\"",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "25: )",
          "27: type HeaderSanitizerGenerator struct{}",
          "29: func (g *HeaderSanitizerGenerator) FilterName() string {",
          "31: }",
          "33: func (g *HeaderSanitizerGenerator) IsEnabled() bool {",
          "34:  return true",
          "35: }",
          "46: }",
          "49:  return nil, nil",
          "50: }",
          "",
          "[Removed Lines]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "23:  \"github.com/golang/protobuf/ptypes\"",
          "24:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "30:  return util.HeaderSanitizerScrubber",
          "37: func (g *HeaderSanitizerGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "38:  a, err := ptypes.MarshalAny(&hspb.FilterConfig{})",
          "39:  if err != nil {",
          "40:   return nil, err",
          "41:  }",
          "42:  return &hcmpb.HttpFilter{",
          "43:   Name:       g.FilterName(),",
          "44:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: a},",
          "45:  }, nil",
          "48: func (g *HeaderSanitizerGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "22: )",
          "24: const (",
          "26:  HeaderSanitizerFilterName = \"com.google.espv2.filters.http.header_sanitizer\"",
          "32:  return HeaderSanitizerFilterName",
          "39: func (g *HeaderSanitizerGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "40:  return &hspb.FilterConfig{}, nil",
          "43: func (g *HeaderSanitizerGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/health_check.go||src/go/configgenerator/filtergen/health_check.go": [
          "File: src/go/configgenerator/filtergen/health_check.go -> src/go/configgenerator/filtergen/health_check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "21:  routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "22:  hcpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/health_check/v3\"",
          "24:  matcher \"github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3\"",
          "25:  envoytypepb \"github.com/envoyproxy/go-control-plane/envoy/type/v3\"",
          "28:  wrapperspb \"github.com/golang/protobuf/ptypes/wrappers\"",
          "29: )",
          "31: type HealthCheckGenerator struct {",
          "33:  skipFilter bool",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "23:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "26:  \"github.com/golang/protobuf/ptypes\"",
          "27:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "24:  \"github.com/golang/protobuf/proto\"",
          "28: const (",
          "30:  HealthCheckFilterName = \"envoy.filters.http.health_check\"",
          "31: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: }",
          "43: func (g *HealthCheckGenerator) FilterName() string {",
          "45: }",
          "47: func (g *HealthCheckGenerator) IsEnabled() bool {",
          "48:  return !g.skipFilter",
          "49: }",
          "52:  hcFilterConfig := &hcpb.HealthCheck{",
          "53:   PassThroughMode: &wrapperspb.BoolValue{Value: false},",
          "",
          "[Removed Lines]",
          "44:  return util.HealthCheck",
          "51: func (g *HealthCheckGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "46:  return HealthCheckFilterName",
          "53: func (g *HealthCheckGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:   }",
          "73:  }",
          "85: }",
          "88:  return nil, nil",
          "89: }",
          "",
          "[Removed Lines]",
          "75:  hcFilterConfigStruc, err := ptypes.MarshalAny(hcFilterConfig)",
          "76:  if err != nil {",
          "77:   return nil, err",
          "78:  }",
          "79:  return &hcmpb.HttpFilter{",
          "80:   Name: util.HealthCheck,",
          "81:   ConfigType: &hcmpb.HttpFilter_TypedConfig{",
          "82:    TypedConfig: hcFilterConfigStruc,",
          "83:   },",
          "84:  }, nil",
          "87: func (g *HealthCheckGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "",
          "[Added Lines]",
          "77:  return hcFilterConfig, nil",
          "80: func (g *HealthCheckGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/health_check_test.go||src/go/configgenerator/filtergen/health_check_test.go": [
          "File: src/go/configgenerator/filtergen/health_check_test.go -> src/go/configgenerator/filtergen/health_check_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     t.Fatal(\"HealthCheckGenerator is not enabled, want it to be enabled\")",
          "124:    }",
          "127:    if err != nil {",
          "128:     t.Fatal(err)",
          "129:    }",
          "131:    marshaler := &jsonpb.Marshaler{}",
          "133:    if err != nil {",
          "134:     t.Fatal(err)",
          "135:    }",
          "",
          "[Removed Lines]",
          "126:    filter, err := gen.GenFilterConfig(fakeServiceInfo)",
          "132:    gotFilter, err := marshaler.MarshalToString(filter)",
          "",
          "[Added Lines]",
          "126:    filterConfig, err := gen.GenFilterConfig(fakeServiceInfo)",
          "131:    httpFilter, err := FilterConfigToHTTPFilter(filterConfig, gen.FilterName())",
          "132:    if err != nil {",
          "133:     t.Fatalf(\"Fail to convert filter config to HTTP filter: %v\", err)",
          "134:    }",
          "137:    gotFilter, err := marshaler.MarshalToString(httpFilter)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/jwt_authn.go||src/go/configgenerator/filtergen/jwt_authn.go": [
          "File: src/go/configgenerator/filtergen/jwt_authn.go -> src/go/configgenerator/filtergen/jwt_authn.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "23:  \"github.com/golang/glog\"",
          "24:  \"github.com/golang/protobuf/ptypes\"",
          "26:  wrapperspb \"github.com/golang/protobuf/ptypes/wrappers\"",
          "28:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "30:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "31:  jwtpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/jwt_authn/v3\"",
          "33:  durationpb \"github.com/golang/protobuf/ptypes/duration\"",
          "34:  emptypb \"github.com/golang/protobuf/ptypes/empty\"",
          "35:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "36: )",
          "38: type JwtAuthnGenerator struct {",
          "40:  skipFilter bool",
          "",
          "[Removed Lines]",
          "25:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "32:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "",
          "[Added Lines]",
          "24:  \"github.com/golang/protobuf/proto\"",
          "37: const (",
          "39:  JWTAuthnFilterName = \"envoy.filters.http.jwt_authn\"",
          "40: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: }",
          "61: func (g *JwtAuthnGenerator) FilterName() string {",
          "63: }",
          "65: func (g *JwtAuthnGenerator) IsEnabled() bool {",
          "66:  return !g.skipFilter",
          "67: }",
          "70:  if !method.RequireAuth {",
          "71:   return nil, nil",
          "72:  }",
          "75:   RequirementSpecifier: &jwtpb.PerRouteConfig_RequirementName{",
          "76:    RequirementName: method.Operation(),",
          "77:   },",
          "84: }",
          "87:  auth := serviceInfo.ServiceConfig().GetAuthentication()",
          "88:  providers := make(map[string]*jwtpb.JwtProvider)",
          "89:  for _, provider := range auth.GetProviders() {",
          "",
          "[Removed Lines]",
          "62:  return util.JwtAuthn",
          "69: func (g *JwtAuthnGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "74:  jwtPerRoute := &jwtpb.PerRouteConfig{",
          "78:  }",
          "79:  jwt, err := ptypes.MarshalAny(jwtPerRoute)",
          "80:  if err != nil {",
          "81:   return nil, fmt.Errorf(\"error marshaling jwt_authn per-route config to Any: %v\", err)",
          "82:  }",
          "83:  return jwt, nil",
          "86: func (g *JwtAuthnGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "66:  return JWTAuthnFilterName",
          "73: func (g *JwtAuthnGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "78:  return &jwtpb.PerRouteConfig{",
          "82:  }, nil",
          "85: func (g *JwtAuthnGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   }",
          "173:  }",
          "176:   Providers:      providers,",
          "177:   RequirementMap: requirements,",
          "186: }",
          "188: func defaultJwtLocations() ([]*jwtpb.JwtHeader, []string, error) {",
          "",
          "[Removed Lines]",
          "175:  jwtAuthentication := &jwtpb.JwtAuthentication{",
          "178:  }",
          "180:  jas, _ := ptypes.MarshalAny(jwtAuthentication)",
          "181:  jwtAuthnFilter := &hcmpb.HttpFilter{",
          "182:   Name:       util.JwtAuthn,",
          "183:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: jas},",
          "184:  }",
          "185:  return jwtAuthnFilter, nil",
          "",
          "[Added Lines]",
          "174:  return &jwtpb.JwtAuthentication{",
          "177:  }, nil",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/jwt_authn_test.go||src/go/configgenerator/filtergen/jwt_authn_test.go": [
          "File: src/go/configgenerator/filtergen/jwt_authn_test.go -> src/go/configgenerator/filtergen/jwt_authn_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "657:     t.Fatal(\"JwtAuthnGenerator is not enabled, want it to be enabled\")",
          "658:    }",
          "661:    if err != nil {",
          "662:     t.Fatalf(\"GenFilterConfig got err %v, want no err\", err)",
          "663:    }",
          "665:    marshaler := &jsonpb.Marshaler{}",
          "667:    if err != nil {",
          "668:     t.Fatal(err)",
          "669:    }",
          "",
          "[Removed Lines]",
          "660:    gotProto, err := gen.GenFilterConfig(fakeServiceInfo)",
          "666:    gotFilter, err := marshaler.MarshalToString(gotProto)",
          "",
          "[Added Lines]",
          "660:    filterConfig, err := gen.GenFilterConfig(fakeServiceInfo)",
          "665:    httpFilter, err := FilterConfigToHTTPFilter(filterConfig, gen.FilterName())",
          "666:    if err != nil {",
          "667:     t.Fatalf(\"Fail to convert filter config to HTTP filter: %v\", err)",
          "668:    }",
          "671:    gotFilter, err := marshaler.MarshalToString(httpFilter)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/path_rewrite.go||src/go/configgenerator/filtergen/path_rewrite.go": [
          "File: src/go/configgenerator/filtergen/path_rewrite.go -> src/go/configgenerator/filtergen/path_rewrite.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: package filtergen",
          "17: import (",
          "20:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "21:  prpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/path_rewrite\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "27:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "28: )",
          "30: type PathRewriteGenerator struct {",
          "32:  skipFilter bool",
          "",
          "[Removed Lines]",
          "18:  \"fmt\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "24:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "25:  \"github.com/golang/protobuf/ptypes\"",
          "26:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "25: const (",
          "27:  PathRewriteFilterName = \"com.google.espv2.filters.http.path_rewrite\"",
          "28: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: func NewPathRewriteGenerator(serviceInfo *ci.ServiceInfo) *PathRewriteGenerator {",
          "37:  for _, method := range serviceInfo.Methods {",
          "38:   for _, httpRule := range method.HttpRule {",
          "41:    }",
          "42:   }",
          "43:  }",
          "48: }",
          "50: func (g *PathRewriteGenerator) FilterName() string {",
          "52: }",
          "54: func (g *PathRewriteGenerator) IsEnabled() bool {",
          "55:  return !g.skipFilter",
          "56: }",
          "80: }",
          "83:  if method.BackendInfo == nil {",
          "85:  }",
          "87:  if method.BackendInfo.TranslationType == confpb.BackendRule_APPEND_PATH_TO_ADDRESS {",
          "",
          "[Removed Lines]",
          "39:    if pr := makePathRewriteConfig(method, httpRule); pr != nil {",
          "40:     return &PathRewriteGenerator{}",
          "45:  return &PathRewriteGenerator{",
          "46:   skipFilter: true,",
          "47:  }",
          "51:  return util.PathRewrite",
          "58: func (g *PathRewriteGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "59:  pr := makePathRewriteConfig(method, httpRule)",
          "60:  if pr == nil {",
          "61:   return nil, nil",
          "62:  }",
          "64:  prAny, err := ptypes.MarshalAny(pr)",
          "65:  if err != nil {",
          "66:   return nil, fmt.Errorf(\"error marshaling path_rewrite per-route config to Any: %v\", err)",
          "67:  }",
          "68:  return prAny, nil",
          "69: }",
          "71: func (g *PathRewriteGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "72:  a, err := ptypes.MarshalAny(&prpb.FilterConfig{})",
          "73:  if err != nil {",
          "74:   return nil, err",
          "75:  }",
          "76:  return &hcmpb.HttpFilter{",
          "77:   Name:       util.PathRewrite,",
          "78:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: a},",
          "79:  }, nil",
          "82: func makePathRewriteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) *prpb.PerRouteFilterConfig {",
          "84:   return nil",
          "",
          "[Added Lines]",
          "37:  g := &PathRewriteGenerator{}",
          "41:    if pr, err := g.GenPerRouteConfig(method, httpRule); err == nil && pr != nil {",
          "42:     return g",
          "47:  g.skipFilter = true",
          "48:  return g",
          "52:  return PathRewriteFilterName",
          "59: func (g *PathRewriteGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "60:  return &prpb.FilterConfig{}, nil",
          "63: func (g *PathRewriteGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "65:   return nil, nil",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:     PathTranslationSpecifier: &prpb.PerRouteFilterConfig_PathPrefix{",
          "91:      PathPrefix: method.BackendInfo.Path,",
          "92:     },",
          "94:   }",
          "95:  }",
          "96:  if method.BackendInfo.TranslationType == confpb.BackendRule_CONSTANT_ADDRESS {",
          "",
          "[Removed Lines]",
          "93:    }",
          "",
          "[Added Lines]",
          "74:    }, nil",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:    PathTranslationSpecifier: &prpb.PerRouteFilterConfig_ConstantPath{",
          "106:     ConstantPath: constPath,",
          "107:    },",
          "109:  }",
          "111: }",
          "",
          "[Removed Lines]",
          "108:   }",
          "110:  return nil",
          "",
          "[Added Lines]",
          "89:   }, nil",
          "91:  return nil, nil",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go": [
          "File: src/go/configgenerator/filtergen/router.go -> src/go/configgenerator/filtergen/router.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  ci \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "21:  routerpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/router/v3\"",
          "25: )",
          "27: type RouterGenerator struct{}",
          "29: func (g *RouterGenerator) FilterName() string {",
          "31: }",
          "33: func (g *RouterGenerator) IsEnabled() bool {",
          "34:  return true",
          "35: }",
          "39:   SuppressEnvoyHeaders: serviceInfo.Options.SuppressEnvoyHeaders,",
          "40:   StartChildSpan:       !serviceInfo.Options.DisableTracing,",
          "48: }",
          "51:  return nil, nil",
          "52: }",
          "",
          "[Removed Lines]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "23:  \"github.com/golang/protobuf/ptypes\"",
          "24:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "30:  return util.Router",
          "37: func (g *RouterGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "38:  router, _ := ptypes.MarshalAny(&routerpb.Router{",
          "41:  })",
          "43:  routerFilter := &hcmpb.HttpFilter{",
          "44:   Name:       util.Router,",
          "45:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: router},",
          "46:  }",
          "47:  return routerFilter, nil",
          "50: func (g *RouterGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "",
          "[Added Lines]",
          "21:  \"github.com/golang/protobuf/proto\"",
          "22: )",
          "24: const (",
          "26:  RouterFilterName = \"envoy.filters.http.router\"",
          "32:  return RouterFilterName",
          "39: func (g *RouterGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "40:  return &routerpb.Router{",
          "43:  }, nil",
          "46: func (g *RouterGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go": [
          "File: src/go/configgenerator/filtergen/service_control.go -> src/go/configgenerator/filtergen/service_control.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  scpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/service_control\"",
          "25:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "26:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "28:  \"github.com/golang/protobuf/ptypes\"",
          "30:  wrapperspb \"github.com/golang/protobuf/ptypes/wrappers\"",
          "31:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "32: )",
          "34: type ServiceControlGenerator struct {",
          "36:  skipFilter bool",
          "",
          "[Removed Lines]",
          "27:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "29:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "27:  \"github.com/golang/protobuf/proto\"",
          "33: const (",
          "35:  ServiceControlFilterName = \"com.google.espv2.filters.http.service_control\"",
          "36: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: }",
          "56: func (g *ServiceControlGenerator) FilterName() string {",
          "58: }",
          "60: func (g *ServiceControlGenerator) IsEnabled() bool {",
          "61:  return !g.skipFilter",
          "62: }",
          "66:   OperationName: method.Operation(),",
          "73: }",
          "78:  var protocol string",
          "",
          "[Removed Lines]",
          "57:  return util.ServiceControl",
          "64: func (g *ServiceControlGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (*anypb.Any, error) {",
          "65:  scPerRoute := &scpb.PerRouteFilterConfig{",
          "67:  }",
          "68:  scpr, err := ptypes.MarshalAny(scPerRoute)",
          "69:  if err != nil {",
          "70:   return nil, fmt.Errorf(\"error marshaling service_control per-route config to Any: %v\", err)",
          "71:  }",
          "72:  return scpr, nil",
          "75: func (g *ServiceControlGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "61:  return ServiceControlFilterName",
          "68: func (g *ServiceControlGenerator) GenPerRouteConfig(method *ci.MethodInfo, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "69:  return &scpb.PerRouteFilterConfig{",
          "71:  }, nil",
          "74: func (g *ServiceControlGenerator) GenFilterConfig(serviceInfo *ci.ServiceInfo) (proto.Message, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:  if err != nil {",
          "195:   return nil, err",
          "196:  }",
          "208: }",
          "210: func makeServiceControlCallingConfig(opts options.ConfigGeneratorOptions) *scpb.ServiceControlCallingConfig {",
          "",
          "[Removed Lines]",
          "197:  filterConfig.DepErrorBehavior = depErrorBehaviorEnum",
          "199:  scs, err := ptypes.MarshalAny(filterConfig)",
          "200:  if err != nil {",
          "201:   return nil, err",
          "202:  }",
          "203:  filter := &hcmpb.HttpFilter{",
          "204:   Name:       util.ServiceControl,",
          "205:   ConfigType: &hcmpb.HttpFilter_TypedConfig{TypedConfig: scs},",
          "206:  }",
          "207:  return filter, nil",
          "",
          "[Added Lines]",
          "197:  filterConfig.DepErrorBehavior = depErrorBehaviorEnum",
          "198:  return filterConfig, nil",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/util.go||src/go/configgenerator/filtergen/util.go": [
          "File: src/go/configgenerator/filtergen/util.go -> src/go/configgenerator/filtergen/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"sort\"",
          "21:  commonpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v11/http/common\"",
          "22: )",
          "24: func parseDepErrorBehavior(stringVal string) (commonpb.DependencyErrorBehavior, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "23:  \"github.com/golang/protobuf/proto\"",
          "24:  \"github.com/golang/protobuf/ptypes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  }",
          "34:  return commonpb.DependencyErrorBehavior(depErrorBehaviorInt), nil",
          "35: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: func FilterConfigToHTTPFilter(filter proto.Message, name string) (*hcmpb.HttpFilter, error) {",
          "41:  a, err := ptypes.MarshalAny(filter)",
          "42:  if err != nil {",
          "43:   return nil, fmt.Errorf(\"fail to marshal filter config to Any for filter %q: %v\", name, err)",
          "44:  }",
          "45:  return &hcmpb.HttpFilter{",
          "46:   Name: name,",
          "47:   ConfigType: &hcmpb.HttpFilter_TypedConfig{",
          "48:    TypedConfig: a,",
          "49:   },",
          "50:  }, nil",
          "51: }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/listener_generator.go||src/go/configgenerator/listener_generator.go": [
          "File: src/go/configgenerator/listener_generator.go -> src/go/configgenerator/listener_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import (",
          "18:  \"fmt\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/tracing\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "28:  acpb \"github.com/envoyproxy/go-control-plane/envoy/config/accesslog/v3\"",
          "29:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "30:  listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"",
          "31:  routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "32:  facpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3\"",
          "33:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "34:  structpb \"github.com/golang/protobuf/ptypes/struct\"",
          "35:  wrapperspb \"github.com/golang/protobuf/ptypes/wrappers\"",
          "36: )",
          "",
          "[Removed Lines]",
          "23:  \"github.com/golang/glog\"",
          "24:  \"github.com/golang/protobuf/ptypes\"",
          "26:  sc \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "",
          "[Added Lines]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen\"",
          "21:  sc \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "31:  \"github.com/golang/glog\"",
          "32:  \"github.com/golang/protobuf/ptypes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:    continue",
          "68:   }",
          "71:   if err != nil {",
          "72:    return nil, fmt.Errorf(\"fail to convert proto to JSON for filter %q: %v\", filterGenerator.FilterName(), err)",
          "73:   }",
          "75:   glog.Infof(\"adding filter config of %q : %v\", filterGenerator.FilterName(), jsonStr)",
          "77:  }",
          "78:  return httpFilters, nil",
          "79: }",
          "",
          "[Removed Lines]",
          "70:   jsonStr, err := util.ProtoToJson(filter)",
          "76:   httpFilters = append(httpFilters, filter)",
          "",
          "[Added Lines]",
          "69:   httpFilter, err := filtergen.FilterConfigToHTTPFilter(filter, filterGenerator.FilterName())",
          "70:   if err != nil {",
          "71:    return nil, err",
          "72:   }",
          "74:   jsonStr, err := util.ProtoToJson(httpFilter)",
          "80:   httpFilters = append(httpFilters, httpFilter)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go": [
          "File: src/go/configgenerator/listener_generator_test.go -> src/go/configgenerator/listener_generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "21:  \"github.com/golang/protobuf/jsonpb\"",
          "22:  \"google.golang.org/protobuf/types/known/anypb\"",
          "24:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"github.com/golang/protobuf/ptypes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:  configFile := &smpb.ConfigFile{",
          "36:   FileType: smpb.ConfigFile_FILE_DESCRIPTOR_SET_PROTO,",
          "37:  }",
          "39:  if err != nil {",
          "40:   t.Fatal(err)",
          "41:  }",
          "",
          "[Removed Lines]",
          "38:  data, err := anypb.New(configFile)",
          "",
          "[Added Lines]",
          "39:  data, err := ptypes.MarshalAny(configFile)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/route_generator.go||src/go/configgenerator/route_generator.go": [
          "File: src/go/configgenerator/route_generator.go -> src/go/configgenerator/route_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"strconv\"",
          "21:  \"strings\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "24:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "25:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  \"github.com/golang/glog\"",
          "31:  \"github.com/golang/protobuf/proto\"",
          "32:  \"github.com/golang/protobuf/ptypes\"",
          "34:  wrapperspb \"github.com/golang/protobuf/ptypes/wrappers\"",
          "35: )",
          "37: const (",
          "",
          "[Removed Lines]",
          "33:  anypb \"github.com/golang/protobuf/ptypes/any\"",
          "",
          "[Added Lines]",
          "35:  \"google.golang.org/protobuf/types/known/anypb\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:    return nil, fmt.Errorf(\"error marshaling CorsPolicy to Any: %v\", err)",
          "73:   }",
          "74:   host.TypedPerFilterConfig = make(map[string]*anypb.Any)",
          "77:   host.Routes = append(host.Routes, corsRoutes...)",
          "78:   for i, corsRoute := range corsRoutes {",
          "",
          "[Removed Lines]",
          "75:   host.TypedPerFilterConfig[util.CORS] = corsAny",
          "",
          "[Added Lines]",
          "76:   host.TypedPerFilterConfig[filtergen.CORSFilterName] = corsAny",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:    continue",
          "318:   }",
          "321:   if err != nil {",
          "322:    return perFilterConfig, fmt.Errorf(\"failed to generate per-route config for filter %q: %v\", filterGen.FilterName(), err)",
          "323:   }",
          "326:    continue",
          "327:   }",
          "329:   perFilterConfig[filterGen.FilterName()] = perRouteFilterConfig",
          "330:  }",
          "",
          "[Removed Lines]",
          "320:   perRouteFilterConfig, err := filterGen.GenPerRouteConfig(method, httpRule)",
          "325:   if perRouteFilterConfig == nil {",
          "",
          "[Added Lines]",
          "321:   config, err := filterGen.GenPerRouteConfig(method, httpRule)",
          "325:   if config == nil {",
          "329:   perRouteFilterConfig, err := ptypes.MarshalAny(config)",
          "330:   if err != nil {",
          "331:    return nil, fmt.Errorf(\"fail to marshal per-route config to Any for filter %q: %v\", filterGen.FilterName(), err)",
          "332:   }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/route_generator_test.go||src/go/configgenerator/route_generator_test.go": [
          "File: src/go/configgenerator/route_generator_test.go -> src/go/configgenerator/route_generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"testing\"",
          "21:  \"time\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "24:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "25:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4598:    t.Errorf(\"Test (%v): got expected number of virtual host\", tc.desc)",
          "4599:   }",
          "4602:   if tc.wantCorsPolicy == nil {",
          "4603:    if ok {",
          "4604:     t.Errorf(\"Test (%v): expect not CORS, but found one\", tc.desc)",
          "",
          "[Removed Lines]",
          "4601:   corsAny, ok := gotHost[0].TypedPerFilterConfig[util.CORS]",
          "",
          "[Added Lines]",
          "4602:   corsAny, ok := gotHost[0].TypedPerFilterConfig[filtergen.CORSFilterName]",
          "",
          "---------------"
        ],
        "src/go/util/xds_name.go||src/go/util/xds_name.go": [
          "File: src/go/util/xds_name.go -> src/go/util/xds_name.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import \"fmt\"",
          "19: const (",
          "35:  Echo = \"envoy.filters.network.echo\"",
          "37:  HTTPConnectionManager = \"envoy.filters.network.http_connection_manager\"",
          "41:  TLSTransportSocket = \"envoy.transport_sockets.tls\"",
          "43:  AccessFileLogger = \"envoy.access_loggers.file\"",
          "45:  UpstreamProtocolOptions = \"envoy.extensions.upstreams.http.v3.HttpProtocolOptions\"",
          "65:  MetadataServerClusterName = \"metadata-cluster\"",
          "",
          "[Removed Lines]",
          "23:  Buffer = \"envoy.filters.http.buffer\"",
          "25:  CORS = \"envoy.filters.http.cors\"",
          "27:  GRPCJSONTranscoder = \"envoy.filters.http.grpc_json_transcoder\"",
          "29:  GRPCWeb = \"envoy.filters.http.grpc_web\"",
          "31:  Router = \"envoy.filters.http.router\"",
          "33:  HealthCheck = \"envoy.filters.http.health_check\"",
          "39:  JwtAuthn = \"envoy.filters.http.jwt_authn\"",
          "47:  EnvoyCompressorFilter = \"envoy.filters.http.compressor\"",
          "48:  EnvoyBrotliCompressor = \"envoy.compression.brotli.compressor\"",
          "49:  EnvoyGzipCompressor   = \"envoy.compression.gzip.compressor\"",
          "54:  ServiceControl = \"com.google.espv2.filters.http.service_control\"",
          "56:  PathRewrite = \"com.google.espv2.filters.http.path_rewrite\"",
          "58:  BackendAuth = \"com.google.espv2.filters.http.backend_auth\"",
          "60:  GrpcMetadataScrubber = \"com.google.espv2.filters.http.grpc_metadata_scrubber\"",
          "62:  HeaderSanitizerScrubber = \"com.google.espv2.filters.http.header_sanitizer\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35f062b7101dec66fb1a121d587bc122eaa78baf",
      "candidate_info": {
        "commit_hash": "35f062b7101dec66fb1a121d587bc122eaa78baf",
        "repo": "GoogleCloudPlatform/esp-v2",
        "commit_url": "https://github.com/GoogleCloudPlatform/esp-v2/commit/35f062b7101dec66fb1a121d587bc122eaa78baf",
        "files": [
          "src/go/bootstrap/static/bootstrap_test.go",
          "src/go/commonflags/flags.go",
          "src/go/configgenerator/filter_generator.go",
          "src/go/configgenerator/filtergen/filtergentest/filtergentest.go",
          "src/go/configgenerator/filtergen/http_connection_manager.go",
          "src/go/configgenerator/filtergen/http_connection_manager_test.go",
          "src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/filtergen/service_control_test.go",
          "src/go/configgenerator/filtergen/util.go",
          "src/go/configgenerator/listener_generator.go",
          "src/go/configgenerator/listener_generator_test.go",
          "src/go/configmanager/config_manager.go",
          "src/go/configmanager/config_manager_test.go",
          "src/go/options/common.go",
          "src/go/tracing/tracing.go",
          "src/go/tracing/tracing_test.go",
          "src/go/util/xds_name.go",
          "tests/env/platform/ports.go",
          "tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go"
        ],
        "message": "refactor: remove `ServiceInfo` from HTTP Connection Manager filter gen (#826)\n\n- Move HTTP connection manager into its own filter generator\n- Remove the dependence on `ServiceInfo` from HTTP connection manager\n- Remove `LocalReplyConfig`. It is not needed in ESPv2, we will override this filter gen in google3.\n- Refactor tracing - main change is to remove creation of metadata fetcher from tracing library. Tracing project ID is dependency injected by config manager.\n- Refactor tracing - move tracing options into their own struct\n\nSigned-off-by: Teju Nareddy <nareddyt@google.com>",
        "before_after_code_files": [
          "src/go/bootstrap/static/bootstrap_test.go||src/go/bootstrap/static/bootstrap_test.go",
          "src/go/commonflags/flags.go||src/go/commonflags/flags.go",
          "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
          "src/go/configgenerator/filtergen/filtergentest/filtergentest.go||src/go/configgenerator/filtergen/filtergentest/filtergentest.go",
          "src/go/configgenerator/filtergen/http_connection_manager.go||src/go/configgenerator/filtergen/http_connection_manager.go",
          "src/go/configgenerator/filtergen/http_connection_manager_test.go||src/go/configgenerator/filtergen/http_connection_manager_test.go",
          "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/filtergen/service_control_test.go||src/go/configgenerator/filtergen/service_control_test.go",
          "src/go/configgenerator/filtergen/util.go||src/go/configgenerator/filtergen/util.go",
          "src/go/configgenerator/listener_generator.go||src/go/configgenerator/listener_generator.go",
          "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
          "src/go/configmanager/config_manager.go||src/go/configmanager/config_manager.go",
          "src/go/configmanager/config_manager_test.go||src/go/configmanager/config_manager_test.go",
          "src/go/options/common.go||src/go/options/common.go",
          "src/go/tracing/tracing.go||src/go/tracing/tracing.go",
          "src/go/tracing/tracing_test.go||src/go/tracing/tracing_test.go",
          "src/go/util/xds_name.go||src/go/util/xds_name.go",
          "tests/env/platform/ports.go||tests/env/platform/ports.go",
          "tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go||tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
            "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
            "src/go/util/xds_name.go||src/go/util/xds_name.go",
            "tests/env/platform/ports.go||tests/env/platform/ports.go"
          ],
          "candidate": [
            "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
            "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
            "src/go/util/xds_name.go||src/go/util/xds_name.go",
            "tests/env/platform/ports.go||tests/env/platform/ports.go"
          ]
        }
      },
      "candidate_diff": {
        "src/go/bootstrap/static/bootstrap_test.go||src/go/bootstrap/static/bootstrap_test.go": [
          "File: src/go/bootstrap/static/bootstrap_test.go -> src/go/bootstrap/static/bootstrap_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:    opt_mod: func(opt *options.ConfigGeneratorOptions) {",
          "45:     opt.AdminPort = 0",
          "46:     opt.BackendAddress = \"http://127.0.0.1:8082\"",
          "48:     opt.ClientIPFromForwardedHeader = true",
          "49:    },",
          "50:    serviceConfigPath: platform.GetFilePath(platform.ScServiceConfig),",
          "",
          "[Removed Lines]",
          "47:     opt.DisableTracing = true",
          "",
          "[Added Lines]",
          "47:     opt.TracingOptions = &options.TracingOptions{",
          "48:      DisableTracing: true,",
          "49:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:    opt_mod: func(opt *options.ConfigGeneratorOptions) {",
          "56:     opt.AdminPort = 0",
          "57:     opt.BackendAddress = \"http://127.0.0.1:8082\"",
          "59:     opt.SkipServiceControlFilter = true",
          "60:    },",
          "61:    serviceConfigPath: platform.GetFilePath(platform.AuthServiceConfig),",
          "",
          "[Removed Lines]",
          "58:     opt.DisableTracing = true",
          "",
          "[Added Lines]",
          "60:     opt.TracingOptions = &options.TracingOptions{",
          "61:      DisableTracing: true,",
          "62:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:    opt_mod: func(opt *options.ConfigGeneratorOptions) {",
          "67:     opt.AdminPort = 0",
          "68:     opt.BackendAddress = \"http://127.0.0.1:8082\"",
          "70:     opt.SkipServiceControlFilter = true",
          "71:    },",
          "72:    serviceConfigPath: platform.GetFilePath(platform.DrServiceConfig),",
          "",
          "[Removed Lines]",
          "69:     opt.DisableTracing = true",
          "",
          "[Added Lines]",
          "73:     opt.TracingOptions = &options.TracingOptions{",
          "74:      DisableTracing: true,",
          "75:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:    opt_mod: func(opt *options.ConfigGeneratorOptions) {",
          "78:     opt.AdminPort = 0",
          "79:     opt.BackendAddress = \"http://127.0.0.1:8082\"",
          "81:     opt.SkipServiceControlFilter = true",
          "82:    },",
          "83:    serviceConfigPath: platform.GetFilePath(platform.RmServiceConfig),",
          "",
          "[Removed Lines]",
          "80:     opt.DisableTracing = true",
          "",
          "[Added Lines]",
          "86:     opt.TracingOptions = &options.TracingOptions{",
          "87:      DisableTracing: true,",
          "88:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:    opt_mod: func(opt *options.ConfigGeneratorOptions) {",
          "89:     opt.AdminPort = 0",
          "90:     opt.BackendAddress = \"grpc://127.0.0.1:8082\"",
          "92:     opt.EnableResponseCompression = true",
          "93:    },",
          "94:    serviceConfigPath: platform.GetFilePath(platform.GrpcEchoServiceConfig),",
          "",
          "[Removed Lines]",
          "91:     opt.DisableTracing = true",
          "",
          "[Added Lines]",
          "99:     opt.TracingOptions = &options.TracingOptions{",
          "100:      DisableTracing: true,",
          "101:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "99:    opt_mod: func(opt *options.ConfigGeneratorOptions) {",
          "100:     opt.AdminPort = 0",
          "101:     opt.BackendAddress = \"http://127.0.0.1:8082\"",
          "103:     opt.SkipServiceControlFilter = true",
          "104:    },",
          "105:    serviceConfigPath: platform.GetFilePath(platform.SbServiceConfig),",
          "",
          "[Removed Lines]",
          "102:     opt.DisableTracing = true",
          "",
          "[Added Lines]",
          "112:     opt.TracingOptions = &options.TracingOptions{",
          "113:      DisableTracing: true,",
          "114:     }",
          "",
          "---------------"
        ],
        "src/go/commonflags/flags.go||src/go/commonflags/flags.go": [
          "File: src/go/commonflags/flags.go -> src/go/commonflags/flags.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  AdminAddress                    = flag.String(\"admin_address\", defaults.AdminAddress, \"Address that envoy should serve the admin page on. Supports both ipv4 and ipv6 addresses.\")",
          "31:  AdsNamedPipe                    = flag.String(\"ads_named_pipe\", defaults.AdsNamedPipe, \"Unix domain socket to use internally for xDs between config manager and envoy.\")",
          "33:  AdminPort                       = flag.Int(\"admin_port\", defaults.AdminPort, \"Enables envoy's admin interface on this port if it is not 0. Not recommended for production use-cases, as the admin port is unauthenticated.\")",
          "34:  HttpRequestTimeoutS             = flag.Int(\"http_request_timeout_s\", int(defaults.HttpRequestTimeout.Seconds()), `Set the timeout in second for all requests. Must be > 0 and the default is 30 seconds if not set.`)",
          "35:  Node                            = flag.String(\"node\", defaults.Node, \"envoy node id\")",
          "36:  NonGCP                          = flag.Bool(\"non_gcp\", defaults.NonGCP, `By default, the proxy tries to talk to GCP metadata server to get VM location in the first few requests. Setting this flag to true to skip this step`)",
          "37:  GeneratedHeaderPrefix           = flag.String(\"generated_header_prefix\", defaults.GeneratedHeaderPrefix, \"Set the header prefix for the generated headers. By default, it is `X-Endpoint-`\")",
          "",
          "[Removed Lines]",
          "32:  DisableTracing                  = flag.Bool(\"disable_tracing\", defaults.DisableTracing, `Disable stackdriver tracing`)",
          "38:  TracingProjectId                = flag.String(\"tracing_project_id\", defaults.TracingProjectId, \"The Google project id required for Stack driver tracing. If not set, will automatically use fetch it from GCP Metadata server\")",
          "39:  TracingStackdriverAddress       = flag.String(\"tracing_stackdriver_address\", defaults.TracingStackdriverAddress, \"By default, the Stackdriver exporter will connect to production Stackdriver. If this is non-empty, it will connect to this address. It must be in the gRPC format and implement the cloud trace v2 RPCs.\")",
          "40:  TracingSamplingRate             = flag.Float64(\"tracing_sample_rate\", defaults.TracingSamplingRate, \"tracing sampling rate from 0.0 to 1.0\")",
          "41:  TracingIncomingContext          = flag.String(\"tracing_incoming_context\", defaults.TracingIncomingContext, \"comma separated incoming trace contexts (traceparent|grpc-trace-bin|x-cloud-trace-context)\")",
          "42:  TracingOutgoingContext          = flag.String(\"tracing_outgoing_context\", defaults.TracingOutgoingContext, \"comma separated outgoing trace contexts (traceparent|grpc-trace-bin|x-cloud-trace-context)\")",
          "43:  TracingMaxNumAttributes         = flag.Int64(\"tracing_max_num_attributes\", defaults.TracingMaxNumAttributes, \"Sets the maximum number of attributes that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of attributes published will be much less.\")",
          "44:  TracingMaxNumAnnotations        = flag.Int64(\"tracing_max_num_annotations\", defaults.TracingMaxNumAnnotations, \"Sets the maximum number of annotations that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of annotations published will be much less.\")",
          "45:  TracingMaxNumMessageEvents      = flag.Int64(\"tracing_max_num_message_events\", defaults.TracingMaxNumMessageEvents, \"Sets the maximum number of message events that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of message events published will be much less.\")",
          "46:  TracingMaxNumLinks              = flag.Int64(\"tracing_max_num_links\", defaults.TracingMaxNumLinks, \"Sets the maximum number of links that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of links published will be much less.\")",
          "47:  TracingEnableVerboseAnnotations = flag.Bool(\"tracing_enable_verbose_annotations\", defaults.TracingEnableVerboseAnnotations, \"If enabled, spans are annotated with timing events on when the request/response started/ended\")",
          "",
          "[Added Lines]",
          "32:  DisableTracing                  = flag.Bool(\"disable_tracing\", defaults.TracingOptions.DisableTracing, `Disable stackdriver tracing`)",
          "38:  TracingProjectId                = flag.String(\"tracing_project_id\", defaults.TracingOptions.ProjectId, \"The Google project id required for Stack driver tracing. If not set, will automatically use fetch it from GCP Metadata server\")",
          "39:  TracingStackdriverAddress       = flag.String(\"tracing_stackdriver_address\", defaults.TracingOptions.StackdriverAddress, \"By default, the Stackdriver exporter will connect to production Stackdriver. If this is non-empty, it will connect to this address. It must be in the gRPC format and implement the cloud trace v2 RPCs.\")",
          "40:  TracingSamplingRate             = flag.Float64(\"tracing_sample_rate\", defaults.TracingOptions.SamplingRate, \"tracing sampling rate from 0.0 to 1.0\")",
          "41:  TracingIncomingContext          = flag.String(\"tracing_incoming_context\", defaults.TracingOptions.IncomingContext, \"comma separated incoming trace contexts (traceparent|grpc-trace-bin|x-cloud-trace-context)\")",
          "42:  TracingOutgoingContext          = flag.String(\"tracing_outgoing_context\", defaults.TracingOptions.OutgoingContext, \"comma separated outgoing trace contexts (traceparent|grpc-trace-bin|x-cloud-trace-context)\")",
          "43:  TracingMaxNumAttributes         = flag.Int64(\"tracing_max_num_attributes\", defaults.TracingOptions.MaxNumAttributes, \"Sets the maximum number of attributes that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of attributes published will be much less.\")",
          "44:  TracingMaxNumAnnotations        = flag.Int64(\"tracing_max_num_annotations\", defaults.TracingOptions.MaxNumAnnotations, \"Sets the maximum number of annotations that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of annotations published will be much less.\")",
          "45:  TracingMaxNumMessageEvents      = flag.Int64(\"tracing_max_num_message_events\", defaults.TracingOptions.MaxNumMessageEvents, \"Sets the maximum number of message events that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of message events published will be much less.\")",
          "46:  TracingMaxNumLinks              = flag.Int64(\"tracing_max_num_links\", defaults.TracingOptions.MaxNumLinks, \"Sets the maximum number of links that each span can contain. Defaults to the maximum allowed by Stackdriver. In practice, the number of links published will be much less.\")",
          "47:  TracingEnableVerboseAnnotations = flag.Bool(\"tracing_enable_verbose_annotations\", defaults.TracingOptions.EnableVerboseAnnotations, \"If enabled, spans are annotated with timing events on when the request/response started/ended\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: func DefaultCommonOptionsFromFlags() options.CommonOptions {",
          "69:  opts := options.CommonOptions{",
          "88:   MetadataURL:                        *MetadataURL,",
          "89:   IamURL:                             *IamURL,",
          "90:   DisallowColonInWildcardPathSegment: *DisallowColonInWildcardPathSegment,",
          "",
          "[Removed Lines]",
          "70:   AdminAddress:                       *AdminAddress,",
          "71:   AdminPort:                          *AdminPort,",
          "72:   AdsNamedPipe:                       *AdsNamedPipe,",
          "73:   DisableTracing:                     *DisableTracing,",
          "74:   HttpRequestTimeout:                 time.Duration(*HttpRequestTimeoutS) * time.Second,",
          "75:   Node:                               *Node,",
          "76:   NonGCP:                             *NonGCP,",
          "77:   GeneratedHeaderPrefix:              *GeneratedHeaderPrefix,",
          "78:   TracingProjectId:                   *TracingProjectId,",
          "79:   TracingStackdriverAddress:          *TracingStackdriverAddress,",
          "80:   TracingSamplingRate:                *TracingSamplingRate,",
          "81:   TracingIncomingContext:             *TracingIncomingContext,",
          "82:   TracingOutgoingContext:             *TracingOutgoingContext,",
          "83:   TracingMaxNumAttributes:            *TracingMaxNumAttributes,",
          "84:   TracingMaxNumAnnotations:           *TracingMaxNumAnnotations,",
          "85:   TracingMaxNumMessageEvents:         *TracingMaxNumMessageEvents,",
          "86:   TracingMaxNumLinks:                 *TracingMaxNumLinks,",
          "87:   TracingEnableVerboseAnnotations:    *TracingEnableVerboseAnnotations,",
          "",
          "[Added Lines]",
          "70:   AdminAddress:          *AdminAddress,",
          "71:   AdminPort:             *AdminPort,",
          "72:   AdsNamedPipe:          *AdsNamedPipe,",
          "73:   HttpRequestTimeout:    time.Duration(*HttpRequestTimeoutS) * time.Second,",
          "74:   Node:                  *Node,",
          "75:   NonGCP:                *NonGCP,",
          "76:   GeneratedHeaderPrefix: *GeneratedHeaderPrefix,",
          "77:   TracingOptions: &options.TracingOptions{",
          "78:    DisableTracing:           *DisableTracing,",
          "79:    ProjectId:                *TracingProjectId,",
          "80:    StackdriverAddress:       *TracingStackdriverAddress,",
          "81:    SamplingRate:             *TracingSamplingRate,",
          "82:    IncomingContext:          *TracingIncomingContext,",
          "83:    OutgoingContext:          *TracingOutgoingContext,",
          "84:    MaxNumAttributes:         *TracingMaxNumAttributes,",
          "85:    MaxNumAnnotations:        *TracingMaxNumAnnotations,",
          "86:    MaxNumMessageEvents:      *TracingMaxNumMessageEvents,",
          "87:    MaxNumLinks:              *TracingMaxNumLinks,",
          "88:    EnableVerboseAnnotations: *TracingEnableVerboseAnnotations,",
          "89:   },",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go": [
          "File: src/go/configgenerator/filter_generator.go -> src/go/configgenerator/filter_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "24: )",
          "27:  return []filtergen.FilterGeneratorOPFactory{",
          "28:   filtergen.NewHeaderSanitizerFilterGensFromOPConfig,",
          "29:   filtergen.NewCORSFilterGensFromOPConfig,",
          "",
          "[Removed Lines]",
          "26: func GetESPv2FilterGenFactories(scParams filtergen.ServiceControlOPFactoryParams) []filtergen.FilterGeneratorOPFactory {",
          "",
          "[Added Lines]",
          "28: func MakeHTTPFilterGenFactories(scParams filtergen.ServiceControlOPFactoryParams) []filtergen.FilterGeneratorOPFactory {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/filtergentest/filtergentest.go||src/go/configgenerator/filtergen/filtergentest/filtergentest.go": [
          "File: src/go/configgenerator/filtergen/filtergentest/filtergentest.go -> src/go/configgenerator/filtergen/filtergentest/filtergentest.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  OptsMergeBehavior func(*mergo.Config)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  OnlyCheckFilterConfig bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     t.Fatalf(\"GenFilterConfig() at generator %d got error: %v\", i, err)",
          "82:    }",
          "87:    }",
          "89:    gotJson, err := util.ProtoToJson(gotHTTPFilter)",
          "",
          "[Removed Lines]",
          "84:    gotHTTPFilter, err := filtergen.FilterConfigToHTTPFilter(gotConfig, gotGenerator.FilterName())",
          "85:    if err != nil {",
          "86:     t.Fatalf(\"Fail to convert filter config to HTTP filter for generator %d: %v\", i, err)",
          "",
          "[Added Lines]",
          "88:    gotHTTPFilter := gotConfig",
          "89:    if !tc.OnlyCheckFilterConfig {",
          "90:     gotHTTPFilter, err = filtergen.FilterConfigToHTTPFilter(gotConfig, gotGenerator.FilterName())",
          "91:     if err != nil {",
          "92:      t.Fatalf(\"Fail to convert filter config to HTTP filter for generator %d: %v\", i, err)",
          "93:     }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/http_connection_manager.go||src/go/configgenerator/filtergen/http_connection_manager.go": [
          "File: src/go/configgenerator/filtergen/http_connection_manager.go -> src/go/configgenerator/filtergen/http_connection_manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package filtergen",
          "17: import (",
          "18:  \"fmt\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/tracing\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "24:  acpb \"github.com/envoyproxy/go-control-plane/envoy/config/accesslog/v3\"",
          "25:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "26:  routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "27:  facpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3\"",
          "28:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "29:  \"github.com/golang/glog\"",
          "30:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "31:  \"google.golang.org/protobuf/proto\"",
          "32:  \"google.golang.org/protobuf/types/known/anypb\"",
          "33:  \"google.golang.org/protobuf/types/known/structpb\"",
          "34:  \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "35: )",
          "37: const (",
          "39:  HTTPConnectionManagerFilterName = \"envoy.filters.network.http_connection_manager\"",
          "40: )",
          "42: type HTTPConnectionManagerGenerator struct {",
          "43:  RouteConfig                    *routepb.RouteConfiguration",
          "44:  HTTPFilterConfigs              []*hcmpb.HttpFilter",
          "45:  IsSchemeHeaderOverrideRequired bool",
          "48:  EnvoyUseRemoteAddress        bool",
          "49:  EnvoyXffNumTrustedHops       int",
          "50:  NormalizePath                bool",
          "51:  MergeSlashesInPath           bool",
          "52:  DisallowEscapedSlashesInPath bool",
          "53:  AccessLogPath                string",
          "54:  AccessLogFormat              string",
          "55:  UnderscoresInHeaders         bool",
          "56:  EnableGrpcForHttp1           bool",
          "57:  TracingOptions               *options.TracingOptions",
          "58: }",
          "64: func NewHTTPConnectionManagerGenFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) (*HTTPConnectionManagerGenerator, error) {",
          "65:  isSchemeHeaderOverrideRequired, err := IsSchemeHeaderOverrideRequiredForOPConfig(serviceConfig, opts)",
          "66:  if err != nil {",
          "67:   return nil, err",
          "68:  }",
          "70:  return &HTTPConnectionManagerGenerator{",
          "71:   IsSchemeHeaderOverrideRequired: isSchemeHeaderOverrideRequired,",
          "72:   EnvoyUseRemoteAddress:          opts.EnvoyUseRemoteAddress,",
          "73:   EnvoyXffNumTrustedHops:         opts.EnvoyXffNumTrustedHops,",
          "74:   NormalizePath:                  opts.NormalizePath,",
          "75:   MergeSlashesInPath:             opts.MergeSlashesInPath,",
          "76:   DisallowEscapedSlashesInPath:   opts.DisallowEscapedSlashesInPath,",
          "77:   AccessLogPath:                  opts.AccessLog,",
          "78:   AccessLogFormat:                opts.AccessLogFormat,",
          "79:   UnderscoresInHeaders:           opts.UnderscoresInHeaders,",
          "80:   EnableGrpcForHttp1:             opts.EnableGrpcForHttp1,",
          "81:   TracingOptions:                 opts.TracingOptions,",
          "82:  }, nil",
          "83: }",
          "85: func (g *HTTPConnectionManagerGenerator) FilterName() string {",
          "86:  return HTTPConnectionManagerFilterName",
          "87: }",
          "89: func (g *HTTPConnectionManagerGenerator) GenFilterConfig() (proto.Message, error) {",
          "90:  httpConMgr := &hcmpb.HttpConnectionManager{",
          "91:   UpgradeConfigs: []*hcmpb.HttpConnectionManager_UpgradeConfig{",
          "92:    {",
          "93:     UpgradeType: \"websocket\",",
          "94:    },",
          "95:   },",
          "96:   CodecType:         hcmpb.HttpConnectionManager_AUTO,",
          "97:   StatPrefix:        util.StatPrefix,",
          "98:   UseRemoteAddress:  &wrapperspb.BoolValue{Value: g.EnvoyUseRemoteAddress},",
          "99:   XffNumTrustedHops: uint32(g.EnvoyXffNumTrustedHops),",
          "102:   NormalizePath: &wrapperspb.BoolValue{Value: g.NormalizePath},",
          "103:   MergeSlashes:  g.MergeSlashesInPath,",
          "104:  }",
          "113:  httpConMgr.LocalReplyConfig = &hcmpb.LocalReplyConfig{",
          "114:   BodyFormat: &corepb.SubstitutionFormatString{",
          "115:    Format: &corepb.SubstitutionFormatString_JsonFormat{",
          "116:     JsonFormat: &structpb.Struct{",
          "117:      Fields: map[string]*structpb.Value{",
          "118:       \"code\": {",
          "119:        Kind: &structpb.Value_StringValue{StringValue: \"%RESPONSE_CODE%\"},",
          "120:       },",
          "121:       \"message\": {",
          "122:        Kind: &structpb.Value_StringValue{StringValue: \"%LOCAL_REPLY_BODY%\"},",
          "123:       },",
          "124:      },",
          "125:     },",
          "126:    },",
          "127:   },",
          "128:  }",
          "131:  if g.DisallowEscapedSlashesInPath {",
          "132:   httpConMgr.PathWithEscapedSlashesAction = hcmpb.HttpConnectionManager_UNESCAPE_AND_REDIRECT",
          "133:  } else {",
          "134:   httpConMgr.PathWithEscapedSlashesAction = hcmpb.HttpConnectionManager_KEEP_UNCHANGED",
          "135:  }",
          "137:  if g.AccessLogPath != \"\" {",
          "138:   fileAccessLog := &facpb.FileAccessLog{",
          "139:    Path: g.AccessLogPath,",
          "140:   }",
          "142:   if g.AccessLogFormat != \"\" {",
          "143:    fileAccessLog.AccessLogFormat = &facpb.FileAccessLog_LogFormat{",
          "144:     LogFormat: &corepb.SubstitutionFormatString{",
          "145:      Format: &corepb.SubstitutionFormatString_TextFormat{",
          "146:       TextFormat: g.AccessLogFormat,",
          "147:      },",
          "148:     },",
          "149:    }",
          "150:   }",
          "152:   serialized, _ := anypb.New(fileAccessLog)",
          "154:   httpConMgr.AccessLog = []*acpb.AccessLog{",
          "155:    {",
          "156:     Name:   util.AccessFileLogger,",
          "157:     Filter: nil,",
          "158:     ConfigType: &acpb.AccessLog_TypedConfig{",
          "159:      TypedConfig: serialized,",
          "160:     },",
          "161:    },",
          "162:   }",
          "163:  }",
          "165:  if !g.TracingOptions.DisableTracing {",
          "166:   var err error",
          "167:   httpConMgr.Tracing, err = tracing.CreateTracing(*g.TracingOptions)",
          "168:   if err != nil {",
          "169:    return nil, err",
          "170:   }",
          "171:  }",
          "173:  if g.UnderscoresInHeaders {",
          "174:   httpConMgr.CommonHttpProtocolOptions = &corepb.HttpProtocolOptions{",
          "175:    HeadersWithUnderscoresAction: corepb.HttpProtocolOptions_ALLOW,",
          "176:   }",
          "177:  } else {",
          "178:   httpConMgr.CommonHttpProtocolOptions = &corepb.HttpProtocolOptions{",
          "179:    HeadersWithUnderscoresAction: corepb.HttpProtocolOptions_REJECT_REQUEST,",
          "180:   }",
          "181:  }",
          "183:  if g.EnableGrpcForHttp1 {",
          "185:   httpConMgr.HttpProtocolOptions = &corepb.Http1ProtocolOptions{",
          "186:    EnableTrailers: true,",
          "187:   }",
          "188:  }",
          "190:  if g.IsSchemeHeaderOverrideRequired {",
          "191:   httpConMgr.SchemeHeaderTransformation = &corepb.SchemeHeaderTransformation{",
          "192:    Transformation: &corepb.SchemeHeaderTransformation_SchemeToOverwrite{",
          "193:     SchemeToOverwrite: \"https\",",
          "194:    },",
          "195:   }",
          "196:  }",
          "198:  jsonStr, _ := util.ProtoToJson(httpConMgr)",
          "199:  glog.Infof(\"HTTP Connection Manager config before adding routes or HTTP filters: %v\", jsonStr)",
          "201:  httpConMgr.HttpFilters = g.HTTPFilterConfigs",
          "202:  httpConMgr.RouteSpecifier = &hcmpb.HttpConnectionManager_RouteConfig{",
          "203:   RouteConfig: g.RouteConfig,",
          "204:  }",
          "206:  return httpConMgr, nil",
          "207: }",
          "209: func (g *HTTPConnectionManagerGenerator) GenPerRouteConfig(selector string, httpRule *httppattern.Pattern) (proto.Message, error) {",
          "210:  return nil, nil",
          "211: }",
          "220: func IsSchemeHeaderOverrideRequiredForOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) (bool, error) {",
          "221:  if opts.ComputePlatformOverride != util.ServerlessPlatform {",
          "222:   glog.Infof(\"Skip HTTP Conn Manager scheme override because platform is NOT Cloud Run.\")",
          "223:   return false, nil",
          "224:  }",
          "225:  isGRPCSupportRequired, err := IsGRPCSupportRequiredForOPConfig(serviceConfig, opts)",
          "226:  if err != nil {",
          "227:   return false, err",
          "228:  }",
          "229:  if !isGRPCSupportRequired {",
          "230:   glog.Infof(\"Skip HTTP Conn Manager scheme override because there is no gRPC backend.\")",
          "231:   return false, nil",
          "232:  }",
          "233:  if opts.EnableBackendAddressOverride {",
          "234:   glog.Warningf(\"Skip HTTP Conn Manager scheme override because backend address override is enabled.\")",
          "235:   return false, nil",
          "236:  }",
          "238:  for _, rule := range serviceConfig.GetBackend().GetRules() {",
          "239:   if util.ShouldSkipOPDiscoveryAPI(rule.GetSelector(), opts.AllowDiscoveryAPIs) {",
          "240:    glog.Warningf(\"Skip backend rule %q because discovery API is not supported.\", rule.GetSelector())",
          "241:    continue",
          "242:   }",
          "244:   if rule.GetAddress() == \"\" {",
          "245:    glog.Infof(\"Skip backend rule %q because it does not have dynamic routing address.\", rule.GetSelector())",
          "246:    return false, nil",
          "247:   }",
          "249:   scheme, _, _, _, err := util.ParseURI(rule.GetAddress())",
          "250:   if err != nil {",
          "251:    return false, fmt.Errorf(\"error parsing remote backend rule's address for operation %q, %v\", rule.GetSelector(), err)",
          "252:   }",
          "255:   _, useTLS, err := util.ParseBackendProtocol(scheme, rule.GetProtocol())",
          "256:   if err != nil {",
          "257:    return false, fmt.Errorf(\"error parsing remote backend rule's protocol for operation %q, %v\", rule.GetSelector(), err)",
          "258:   }",
          "260:   if useTLS {",
          "261:    glog.Infof(\"add config to override scheme header as https.\")",
          "262:    return true, nil",
          "263:   }",
          "264:  }",
          "266:  return false, nil",
          "267: }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/http_connection_manager_test.go||src/go/configgenerator/filtergen/http_connection_manager_test.go": [
          "File: src/go/configgenerator/filtergen/http_connection_manager_test.go -> src/go/configgenerator/filtergen/http_connection_manager_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package filtergen_test",
          "17: import (",
          "18:  \"testing\"",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen\"",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen/filtergentest\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "24:  \"github.com/imdario/mergo\"",
          "25:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "26: )",
          "28: func TestNewHTTPConnectionManagerGenFromOPConfig_GenConfig(t *testing.T) {",
          "29:  testdata := []filtergentest.SuccessOPTestCase{",
          "30:   {",
          "31:    Desc: \"Generate HttpConMgr with default options\",",
          "32:    OptsIn: options.ConfigGeneratorOptions{",
          "33:     CommonOptions: options.CommonOptions{",
          "34:      TracingOptions: &options.TracingOptions{",
          "35:       DisableTracing: true,",
          "36:      },",
          "37:     },",
          "38:    },",
          "39:    OptsMergeBehavior:     mergo.WithOverwriteWithEmptyValue,",
          "40:    OnlyCheckFilterConfig: true,",
          "41:    WantFilterConfigs: []string{",
          "42:     `",
          "43: {",
          "44:  \"commonHttpProtocolOptions\": {",
          "45:   \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "46:  },",
          "47:  \"localReplyConfig\": {",
          "48:   \"bodyFormat\": {",
          "49:    \"jsonFormat\": {",
          "50:     \"code\": \"%RESPONSE_CODE%\",",
          "51:     \"message\": \"%LOCAL_REPLY_BODY%\"",
          "52:    }",
          "53:   }",
          "54:  },",
          "55:  \"normalizePath\": false,",
          "56:  \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "57:  \"routeConfig\": {},",
          "58:  \"statPrefix\": \"ingress_http\",",
          "59:  \"upgradeConfigs\": [",
          "60:   {",
          "61:    \"upgradeType\": \"websocket\"",
          "62:   }",
          "63:  ],",
          "64:  \"useRemoteAddress\": false",
          "65: }",
          "66: `,",
          "67:    },",
          "68:   },",
          "69:   {",
          "70:    Desc: \"Generate HttpConMgr when accessLog is defined\",",
          "71:    OptsIn: options.ConfigGeneratorOptions{",
          "72:     AccessLog:       \"/foo\",",
          "73:     AccessLogFormat: \"/bar\",",
          "74:     CommonOptions: options.CommonOptions{",
          "75:      TracingOptions: &options.TracingOptions{",
          "76:       DisableTracing: true,",
          "77:      },",
          "78:     },",
          "79:    },",
          "80:    OptsMergeBehavior:     mergo.WithOverwriteWithEmptyValue,",
          "81:    OnlyCheckFilterConfig: true,",
          "82:    WantFilterConfigs: []string{",
          "83:     `",
          "84: {",
          "85:  \"accessLog\": [",
          "86:   {",
          "87:    \"name\": \"envoy.access_loggers.file\",",
          "88:    \"typedConfig\": {",
          "89:     \"@type\": \"type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\",",
          "90:     \"path\": \"/foo\",",
          "91:     \"logFormat\":{\"textFormat\":\"/bar\"}",
          "92:    }",
          "93:   }",
          "94:  ],",
          "95:  \"commonHttpProtocolOptions\": {",
          "96:   \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "97:  },",
          "98:  \"localReplyConfig\": {",
          "99:   \"bodyFormat\": {",
          "100:    \"jsonFormat\": {",
          "101:     \"code\": \"%RESPONSE_CODE%\",",
          "102:     \"message\": \"%LOCAL_REPLY_BODY%\"",
          "103:    }",
          "104:   }",
          "105:  },",
          "106:  \"normalizePath\": false,",
          "107:  \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "108:  \"routeConfig\": {},",
          "109:  \"statPrefix\": \"ingress_http\",",
          "110:  \"upgradeConfigs\": [",
          "111:   {",
          "112:    \"upgradeType\": \"websocket\"",
          "113:   }",
          "114:  ],",
          "115:  \"useRemoteAddress\": false",
          "116: }",
          "117: `,",
          "118:    },",
          "119:   },",
          "120:   {",
          "121:    Desc: \"Generate HttpConMgr when tracing is enabled\",",
          "122:    OptsIn: options.ConfigGeneratorOptions{",
          "123:     CommonOptions: options.CommonOptions{",
          "124:      TracingOptions: &options.TracingOptions{",
          "125:       DisableTracing: false,",
          "126:       ProjectId:      \"test-project\",",
          "127:       SamplingRate:   1,",
          "128:      },",
          "129:     },",
          "130:    },",
          "131:    OptsMergeBehavior:     mergo.WithOverwriteWithEmptyValue,",
          "132:    OnlyCheckFilterConfig: true,",
          "133:    WantFilterConfigs: []string{",
          "134:     `",
          "135: {",
          "136:  \"commonHttpProtocolOptions\": {",
          "137:   \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "138:  },",
          "139:  \"localReplyConfig\": {",
          "140:   \"bodyFormat\": {",
          "141:    \"jsonFormat\": {",
          "142:     \"code\": \"%RESPONSE_CODE%\",",
          "143:     \"message\": \"%LOCAL_REPLY_BODY%\"",
          "144:    }",
          "145:   }",
          "146:  },",
          "147:  \"normalizePath\": false,",
          "148:  \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "149:  \"routeConfig\": {},",
          "150:  \"statPrefix\": \"ingress_http\",",
          "151:  \"tracing\":{",
          "152:   \"clientSampling\":{},",
          "153:   \"overallSampling\":{",
          "154:    \"value\": 100",
          "155:   },",
          "156:   \"provider\":{",
          "157:    \"name\":\"envoy.tracers.opencensus\",",
          "158:    \"typedConfig\":{",
          "159:      \"@type\":\"type.googleapis.com/envoy.config.trace.v3.OpenCensusConfig\",",
          "160:      \"stackdriverExporterEnabled\":true,",
          "161:      \"stackdriverProjectId\":\"test-project\",",
          "162:      \"traceConfig\":{}",
          "163:    }",
          "164:   },",
          "165:   \"randomSampling\":{",
          "166:    \"value\": 100",
          "167:   }",
          "168:  },",
          "169:  \"upgradeConfigs\": [",
          "170:   {",
          "171:    \"upgradeType\": \"websocket\"",
          "172:   }",
          "173:  ],",
          "174:  \"useRemoteAddress\": false",
          "175: }",
          "176: `,",
          "177:    },",
          "178:   },",
          "179:   {",
          "180:    Desc: \"Generate HttpConMgr when UnderscoresInHeaders is defined\",",
          "181:    OptsIn: options.ConfigGeneratorOptions{",
          "182:     UnderscoresInHeaders: true,",
          "183:     CommonOptions: options.CommonOptions{",
          "184:      TracingOptions: &options.TracingOptions{",
          "185:       DisableTracing: true,",
          "186:      },",
          "187:     },",
          "188:    },",
          "189:    OptsMergeBehavior:     mergo.WithOverwriteWithEmptyValue,",
          "190:    OnlyCheckFilterConfig: true,",
          "191:    WantFilterConfigs: []string{",
          "192:     `",
          "193: {",
          "194:  \"commonHttpProtocolOptions\": {},",
          "195:  \"localReplyConfig\": {",
          "196:   \"bodyFormat\": {",
          "197:    \"jsonFormat\": {",
          "198:     \"code\": \"%RESPONSE_CODE%\",",
          "199:     \"message\": \"%LOCAL_REPLY_BODY%\"",
          "200:    }",
          "201:   }",
          "202:  },",
          "203:  \"normalizePath\": false,",
          "204:  \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "205:  \"routeConfig\": {},",
          "206:  \"statPrefix\": \"ingress_http\",",
          "207:  \"upgradeConfigs\": [",
          "208:   {",
          "209:    \"upgradeType\": \"websocket\"",
          "210:   }",
          "211:  ],",
          "212:  \"useRemoteAddress\": false",
          "213: }",
          "214: `,",
          "215:    },",
          "216:   },",
          "217:   {",
          "218:    Desc: \"Generate HttpConMgr when EnableGrpcForHttp1 is defined\",",
          "219:    OptsIn: options.ConfigGeneratorOptions{",
          "220:     EnableGrpcForHttp1:   true,",
          "221:     UnderscoresInHeaders: true,",
          "222:     CommonOptions: options.CommonOptions{",
          "223:      TracingOptions: &options.TracingOptions{",
          "224:       DisableTracing: true,",
          "225:      },",
          "226:     },",
          "227:    },",
          "228:    OptsMergeBehavior:     mergo.WithOverwriteWithEmptyValue,",
          "229:    OnlyCheckFilterConfig: true,",
          "230:    WantFilterConfigs: []string{",
          "231:     `",
          "232: {",
          "233:  \"commonHttpProtocolOptions\": {},",
          "234:                 \"httpProtocolOptions\": {\"enableTrailers\": true},",
          "235:  \"localReplyConfig\": {",
          "236:   \"bodyFormat\": {",
          "237:    \"jsonFormat\": {",
          "238:     \"code\": \"%RESPONSE_CODE%\",",
          "239:     \"message\": \"%LOCAL_REPLY_BODY%\"",
          "240:    }",
          "241:   }",
          "242:  },",
          "243:  \"normalizePath\": false,",
          "244:  \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "245:  \"routeConfig\": {},",
          "246:  \"statPrefix\": \"ingress_http\",",
          "247:  \"upgradeConfigs\": [",
          "248:   {",
          "249:    \"upgradeType\": \"websocket\"",
          "250:   }",
          "251:  ],",
          "252:  \"useRemoteAddress\": false",
          "253: }",
          "254: `,",
          "255:    },",
          "256:   },",
          "257:  }",
          "259:  for _, tc := range testdata {",
          "260:   tc.RunTest(t, func(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) ([]filtergen.FilterGenerator, error) {",
          "261:    gen, err := filtergen.NewHTTPConnectionManagerGenFromOPConfig(serviceConfig, opts)",
          "262:    if err != nil {",
          "263:     return nil, err",
          "264:    }",
          "266:    return []filtergen.FilterGenerator{",
          "267:     gen,",
          "268:    }, nil",
          "269:   })",
          "270:  }",
          "271: }",
          "273: func TestIsSchemeHeaderOverrideRequiredForOPConfig(t *testing.T) {",
          "274:  testdata := []struct {",
          "275:   desc            string",
          "276:   serviceConfigIn *confpb.Service",
          "277:   optsIn          options.ConfigGeneratorOptions",
          "278:   want            bool",
          "279:  }{",
          "280:   {",
          "281:    desc: \"https scheme override, grpcs backend and server_less\",",
          "282:    serviceConfigIn: &confpb.Service{",
          "283:     Backend: &confpb.Backend{",
          "284:      Rules: []*confpb.BackendRule{",
          "285:       {",
          "286:        Address:         \"grpcs://mybackend.com\",",
          "287:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "288:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "289:        Authentication: &confpb.BackendRule_JwtAudience{",
          "290:         JwtAudience: \"mybackend.com\",",
          "291:        },",
          "292:       },",
          "293:      },",
          "294:     },",
          "295:    },",
          "296:    optsIn: options.ConfigGeneratorOptions{",
          "297:     ComputePlatformOverride: util.ServerlessPlatform,",
          "298:    },",
          "299:    want: true,",
          "300:   },",
          "301:   {",
          "302:    desc: \"no scheme override, grpcs backend but not server_less\",",
          "303:    serviceConfigIn: &confpb.Service{",
          "304:     Backend: &confpb.Backend{",
          "305:      Rules: []*confpb.BackendRule{",
          "306:       {",
          "307:        Address:         \"grpcs://mybackend.com\",",
          "308:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "309:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "310:        Authentication: &confpb.BackendRule_JwtAudience{",
          "311:         JwtAudience: \"mybackend.com\",",
          "312:        },",
          "313:       },",
          "314:      },",
          "315:     },",
          "316:    },",
          "317:    want: false,",
          "318:   },",
          "319:   {",
          "320:    desc:            \"no scheme override, not remote backend\",",
          "321:    serviceConfigIn: &confpb.Service{},",
          "322:    optsIn: options.ConfigGeneratorOptions{",
          "323:     ComputePlatformOverride: util.ServerlessPlatform,",
          "324:    },",
          "325:    want: false,",
          "326:   },",
          "327:   {",
          "328:    desc: \"no scheme override, backend is grpc\",",
          "329:    serviceConfigIn: &confpb.Service{",
          "330:     Backend: &confpb.Backend{",
          "331:      Rules: []*confpb.BackendRule{",
          "332:       {",
          "333:        Address:         \"grpc://mybackend.com\",",
          "334:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "335:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "336:        Authentication: &confpb.BackendRule_JwtAudience{",
          "337:         JwtAudience: \"mybackend.com\",",
          "338:        },",
          "339:       },",
          "340:      },",
          "341:     },",
          "342:    },",
          "343:    optsIn: options.ConfigGeneratorOptions{",
          "344:     ComputePlatformOverride: util.ServerlessPlatform,",
          "345:    },",
          "346:    want: false,",
          "347:   },",
          "348:   {",
          "349:    desc: \"no scheme override, backend is https, gRPC support not required\",",
          "350:    serviceConfigIn: &confpb.Service{",
          "351:     Backend: &confpb.Backend{",
          "352:      Rules: []*confpb.BackendRule{",
          "353:       {",
          "354:        Address:         \"https://mybackend.com\",",
          "355:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "356:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "357:        Authentication: &confpb.BackendRule_JwtAudience{",
          "358:         JwtAudience: \"mybackend.com\",",
          "359:        },",
          "360:       },",
          "361:      },",
          "362:     },",
          "363:    },",
          "364:    optsIn: options.ConfigGeneratorOptions{",
          "365:     ComputePlatformOverride: util.ServerlessPlatform,",
          "366:    },",
          "367:    want: false,",
          "368:   },",
          "369:   {",
          "370:    desc: \"no scheme override, backend is http\",",
          "371:    serviceConfigIn: &confpb.Service{",
          "372:     Backend: &confpb.Backend{",
          "373:      Rules: []*confpb.BackendRule{",
          "374:       {",
          "375:        Address:         \"http://mybackend.com\",",
          "376:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "377:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "378:        Authentication: &confpb.BackendRule_JwtAudience{",
          "379:         JwtAudience: \"mybackend.com\",",
          "380:        },",
          "381:       },",
          "382:      },",
          "383:     },",
          "384:    },",
          "385:    optsIn: options.ConfigGeneratorOptions{",
          "386:     ComputePlatformOverride: util.ServerlessPlatform,",
          "387:    },",
          "388:    want: false,",
          "389:   },",
          "390:   {",
          "391:    desc: \"https scheme override, one of grpc backends uses ssl\",",
          "392:    serviceConfigIn: &confpb.Service{",
          "393:     Backend: &confpb.Backend{",
          "394:      Rules: []*confpb.BackendRule{",
          "395:       {",
          "396:        Address:         \"grpcs://mybackend.com\",",
          "397:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "398:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "399:        Authentication: &confpb.BackendRule_JwtAudience{",
          "400:         JwtAudience: \"mybackend.com\",",
          "401:        },",
          "402:       },",
          "403:       {",
          "404:        Address:         \"grpc://mybackend.com\",",
          "405:        Selector:        \"1.cloudesf_testing_cloud_goog.Bar\",",
          "406:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "407:        Authentication: &confpb.BackendRule_JwtAudience{",
          "408:         JwtAudience: \"mybackend.com\",",
          "409:        },",
          "410:       },",
          "411:      },",
          "412:     },",
          "413:    },",
          "414:    optsIn: options.ConfigGeneratorOptions{",
          "415:     ComputePlatformOverride: util.ServerlessPlatform,",
          "416:    },",
          "417:    want: true,",
          "418:   },",
          "419:   {",
          "420:    desc: \"no scheme override, grpcs backend but enable backend address override\",",
          "421:    serviceConfigIn: &confpb.Service{",
          "422:     Backend: &confpb.Backend{",
          "423:      Rules: []*confpb.BackendRule{",
          "424:       {",
          "425:        Address:         \"grpcs://mybackend.com\",",
          "426:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "427:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "428:        Authentication: &confpb.BackendRule_JwtAudience{",
          "429:         JwtAudience: \"mybackend.com\",",
          "430:        },",
          "431:       },",
          "432:      },",
          "433:     },",
          "434:    },",
          "435:    optsIn: options.ConfigGeneratorOptions{",
          "436:     ComputePlatformOverride:      util.ServerlessPlatform,",
          "437:     EnableBackendAddressOverride: true,",
          "438:    },",
          "439:    want: false,",
          "440:   },",
          "441:  }",
          "443:  for _, tc := range testdata {",
          "444:   t.Run(tc.desc, func(t *testing.T) {",
          "445:    opts := options.DefaultConfigGeneratorOptions()",
          "446:    if err := mergo.Merge(&opts, tc.optsIn); err != nil {",
          "447:     t.Fatalf(\"Merge() of test opts into default opts got err: %v\", err)",
          "448:    }",
          "450:    got, err := filtergen.IsSchemeHeaderOverrideRequiredForOPConfig(tc.serviceConfigIn, opts)",
          "451:    if err != nil {",
          "452:     t.Fatalf(\"IsSchemeHeaderOverrideRequiredForOPConfig() got error %v, want no error\", err)",
          "453:    }",
          "455:    if got != tc.want {",
          "456:     t.Errorf(\"IsSchemeHeaderOverrideRequiredForOPConfig() got %v, want %v\", got, tc.want)",
          "457:    }",
          "458:   })",
          "459:  }",
          "460: }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go": [
          "File: src/go/configgenerator/filtergen/router.go -> src/go/configgenerator/filtergen/router.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  return []FilterGenerator{",
          "39:   &RouterGenerator{",
          "40:    SuppressEnvoyHeaders: opts.SuppressEnvoyHeaders,",
          "42:   },",
          "43:  }, nil",
          "44: }",
          "",
          "[Removed Lines]",
          "41:    StartChildSpan:       !opts.DisableTracing,",
          "",
          "[Added Lines]",
          "41:    StartChildSpan:       !opts.CommonOptions.TracingOptions.DisableTracing,",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go": [
          "File: src/go/configgenerator/filtergen/service_control.go -> src/go/configgenerator/filtergen/service_control.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:    ServiceControlURI:           scURL,",
          "124:    CallCredentials:             opts.ServiceControlCredentials,",
          "125:    AccessToken:                 helpers.NewFilterAccessTokenConfigerFromOPConfig(opts),",
          "128:    HttpRequestTimeout:          opts.HttpRequestTimeout,",
          "129:    GeneratedHeaderPrefix:       opts.GeneratedHeaderPrefix,",
          "130:    IAMURL:                      opts.IamURL,",
          "",
          "[Removed Lines]",
          "126:    DisableTracing:              opts.DisableTracing,",
          "127:    TracingProjectID:            opts.TracingProjectId,",
          "",
          "[Added Lines]",
          "126:    DisableTracing:              opts.CommonOptions.TracingOptions.DisableTracing,",
          "127:    TracingProjectID:            opts.CommonOptions.TracingOptions.ProjectId,",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/service_control_test.go||src/go/configgenerator/filtergen/service_control_test.go": [
          "File: src/go/configgenerator/filtergen/service_control_test.go -> src/go/configgenerator/filtergen/service_control_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     },",
          "225:     OptsIn: options.ConfigGeneratorOptions{",
          "226:      CommonOptions: options.CommonOptions{",
          "228:       HttpRequestTimeout:    2 * time.Minute,",
          "229:       GeneratedHeaderPrefix: \"X-Test-Header-\",",
          "230:      },",
          "",
          "[Removed Lines]",
          "227:       TracingProjectId:      \"cloud-api-proxy-testing\",",
          "",
          "[Added Lines]",
          "227:       TracingOptions: &options.TracingOptions{",
          "228:        ProjectId: \"cloud-api-proxy-testing\",",
          "229:       },",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/util.go||src/go/configgenerator/filtergen/util.go": [
          "File: src/go/configgenerator/filtergen/util.go -> src/go/configgenerator/filtergen/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "23:  commonpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v12/http/common\"",
          "24:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "25:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "26:  \"github.com/golang/glog\"",
          "27:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:  }, nil",
          "95: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: func FilterConfigToNetworkFilter(filter proto.Message, name string) (*listenerpb.Filter, error) {",
          "99:  a, err := anypb.New(filter)",
          "100:  if err != nil {",
          "101:   return nil, fmt.Errorf(\"fail to marshal filter config to Any for filter %q: %v\", name, err)",
          "102:  }",
          "103:  return &listenerpb.Filter{",
          "104:   Name: name,",
          "105:   ConfigType: &listenerpb.Filter_TypedConfig{",
          "106:    TypedConfig: a,",
          "107:   },",
          "108:  }, nil",
          "109: }",
          "",
          "---------------"
        ],
        "src/go/configgenerator/listener_generator.go||src/go/configgenerator/listener_generator.go": [
          "File: src/go/configgenerator/listener_generator.go -> src/go/configgenerator/listener_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/filtergen\"",
          "21:  sc \"github.com/GoogleCloudPlatform/esp-v2/src/go/configinfo\"",
          "24:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "26:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "27:  listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"",
          "30:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "31:  \"github.com/golang/glog\"",
          "34:  wrapperspb \"google.golang.org/protobuf/types/known/wrapperspb\"",
          "35: )",
          "38: func MakeListeners(serviceInfo *sc.ServiceInfo, scParams filtergen.ServiceControlOPFactoryParams) ([]*listenerpb.Listener, error) {",
          "41:  filterGens, err := NewFilterGeneratorsFromOPConfig(serviceInfo.ServiceConfig(), serviceInfo.Options, filterGenFactories)",
          "42:  if err != nil {",
          "43:   return nil, err",
          "44:  }",
          "47:  if err != nil {",
          "48:   return nil, err",
          "49:  }",
          "",
          "[Removed Lines]",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/tracing\"",
          "25:  acpb \"github.com/envoyproxy/go-control-plane/envoy/config/accesslog/v3\"",
          "28:  routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "29:  facpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/file/v3\"",
          "32:  \"google.golang.org/protobuf/types/known/anypb\"",
          "33:  \"google.golang.org/protobuf/types/known/structpb\"",
          "39:  filterGenFactories := GetESPv2FilterGenFactories(scParams)",
          "46:  listener, err := MakeListener(serviceInfo, filterGens, nil)",
          "",
          "[Added Lines]",
          "32:  filterGenFactories := MakeHTTPFilterGenFactories(scParams)",
          "33:  connectionManager, err := filtergen.NewHTTPConnectionManagerGenFromOPConfig(serviceInfo.ServiceConfig(), serviceInfo.Options)",
          "34:  if err != nil {",
          "35:   return nil, fmt.Errorf(\"fail to create HTTP connection manager from OP config: %v\", err)",
          "36:  }",
          "43:  listener, err := MakeListener(serviceInfo, filterGens, connectionManager)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: }",
          "55:  var httpFilters []*hcmpb.HttpFilter",
          "57:  for _, filterGenerator := range filterGenerators {",
          "",
          "[Removed Lines]",
          "54: func MakeHttpFilterConfigs(serviceInfo *sc.ServiceInfo, filterGenerators []filtergen.FilterGenerator) ([]*hcmpb.HttpFilter, error) {",
          "",
          "[Added Lines]",
          "51: func MakeHttpFilterConfigs(filterGenerators []filtergen.FilterGenerator) ([]*hcmpb.HttpFilter, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81: }",
          "86:  if err != nil {",
          "87:   return nil, err",
          "88:  }",
          "91:  if err != nil {",
          "92:   return nil, fmt.Errorf(\"makeHttpConnectionManagerRouteConfig got err: %s\", err)",
          "93:  }",
          "96:  if err != nil {",
          "98:  }",
          "107:  if err != nil {",
          "108:   return nil, err",
          "109:  }",
          "111:  filterChain := &listenerpb.FilterChain{",
          "112:   Filters: []*listenerpb.Filter{",
          "117:   },",
          "118:  }",
          "",
          "[Removed Lines]",
          "84: func MakeListener(serviceInfo *sc.ServiceInfo, filterGenerators []filtergen.FilterGenerator, localReplyConfig *hcmpb.LocalReplyConfig) (*listenerpb.Listener, error) {",
          "85:  httpFilters, err := MakeHttpFilterConfigs(serviceInfo, filterGenerators)",
          "90:  route, err := makeRouteConfig(serviceInfo, filterGenerators)",
          "95:  httpConMgr, err := makeHTTPConMgr(&serviceInfo.Options, route, localReplyConfig)",
          "97:   return nil, fmt.Errorf(\"makeHttpConnectionManager got err: %s\", err)",
          "99:  httpConMgr.SchemeHeaderTransformation = makeSchemeHeaderOverride(serviceInfo)",
          "101:  jsonStr, _ := util.ProtoToJson(httpConMgr)",
          "102:  glog.Infof(\"adding Http Connection Manager config: %v\", jsonStr)",
          "103:  httpConMgr.HttpFilters = httpFilters",
          "106:  httpFilterConfig, err := anypb.New(httpConMgr)",
          "113:    {",
          "114:     Name:       util.HTTPConnectionManager,",
          "115:     ConfigType: &listenerpb.Filter_TypedConfig{TypedConfig: httpFilterConfig},",
          "116:    },",
          "",
          "[Added Lines]",
          "81: func MakeListener(serviceInfo *sc.ServiceInfo, httpFilterGenerators []filtergen.FilterGenerator, connectionManagerGen *filtergen.HTTPConnectionManagerGenerator) (*listenerpb.Listener, error) {",
          "82:  var err error",
          "83:  connectionManagerGen.HTTPFilterConfigs, err = MakeHttpFilterConfigs(httpFilterGenerators)",
          "88:  connectionManagerGen.RouteConfig, err = makeRouteConfig(serviceInfo, httpFilterGenerators)",
          "94:  connectionManagerConfig, err := connectionManagerGen.GenFilterConfig()",
          "96:   return nil, err",
          "99:  networkFilterConfig, err := filtergen.FilterConfigToNetworkFilter(connectionManagerConfig, filtergen.HTTPConnectionManagerFilterName)",
          "106:    networkFilterConfig,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:  return listener, nil",
          "156: }",
          "",
          "[Removed Lines]",
          "164: func makeSchemeHeaderOverride(serviceInfo *sc.ServiceInfo) *corepb.SchemeHeaderTransformation {",
          "165:  if serviceInfo.Options.ComputePlatformOverride != util.ServerlessPlatform || !serviceInfo.GrpcSupportRequired {",
          "166:   return nil",
          "167:  }",
          "168:  useTLS := false",
          "169:  for _, v := range serviceInfo.RemoteBackendClusters {",
          "170:   if v.UseTLS {",
          "171:    useTLS = true",
          "172:   }",
          "173:  }",
          "174:  if useTLS {",
          "175:   glog.Infof(\"add config to override scheme header as https.\")",
          "176:   return &corepb.SchemeHeaderTransformation{",
          "177:    Transformation: &corepb.SchemeHeaderTransformation_SchemeToOverwrite{",
          "178:     SchemeToOverwrite: \"https\",",
          "179:    },",
          "180:   }",
          "181:  }",
          "182:  return nil",
          "183: }",
          "185: func makeHTTPConMgr(opts *options.ConfigGeneratorOptions, route *routepb.RouteConfiguration, localReplyConfig *hcmpb.LocalReplyConfig) (*hcmpb.HttpConnectionManager, error) {",
          "186:  httpConMgr := &hcmpb.HttpConnectionManager{",
          "187:   UpgradeConfigs: []*hcmpb.HttpConnectionManager_UpgradeConfig{",
          "188:    {",
          "189:     UpgradeType: \"websocket\",",
          "190:    },",
          "191:   },",
          "192:   CodecType:  hcmpb.HttpConnectionManager_AUTO,",
          "193:   StatPrefix: util.StatPrefix,",
          "194:   RouteSpecifier: &hcmpb.HttpConnectionManager_RouteConfig{",
          "195:    RouteConfig: route,",
          "196:   },",
          "197:   UseRemoteAddress:  &wrapperspb.BoolValue{Value: opts.EnvoyUseRemoteAddress},",
          "198:   XffNumTrustedHops: uint32(opts.EnvoyXffNumTrustedHops),",
          "201:   NormalizePath: &wrapperspb.BoolValue{Value: opts.NormalizePath},",
          "202:   MergeSlashes:  opts.MergeSlashesInPath,",
          "203:  }",
          "205:  if localReplyConfig != nil {",
          "206:   httpConMgr.LocalReplyConfig = localReplyConfig",
          "207:  } else {",
          "215:   httpConMgr.LocalReplyConfig = &hcmpb.LocalReplyConfig{",
          "216:    BodyFormat: &corepb.SubstitutionFormatString{",
          "217:     Format: &corepb.SubstitutionFormatString_JsonFormat{",
          "218:      JsonFormat: &structpb.Struct{",
          "219:       Fields: map[string]*structpb.Value{",
          "220:        \"code\": {",
          "221:         Kind: &structpb.Value_StringValue{StringValue: \"%RESPONSE_CODE%\"},",
          "222:        },",
          "223:        \"message\": {",
          "224:         Kind: &structpb.Value_StringValue{StringValue: \"%LOCAL_REPLY_BODY%\"},",
          "225:        },",
          "226:       },",
          "227:      },",
          "228:     },",
          "229:    },",
          "230:   }",
          "231:  }",
          "234:  if opts.DisallowEscapedSlashesInPath {",
          "235:   httpConMgr.PathWithEscapedSlashesAction = hcmpb.HttpConnectionManager_UNESCAPE_AND_REDIRECT",
          "236:  } else {",
          "237:   httpConMgr.PathWithEscapedSlashesAction = hcmpb.HttpConnectionManager_KEEP_UNCHANGED",
          "238:  }",
          "240:  if opts.AccessLog != \"\" {",
          "241:   fileAccessLog := &facpb.FileAccessLog{",
          "242:    Path: opts.AccessLog,",
          "243:   }",
          "245:   if opts.AccessLogFormat != \"\" {",
          "246:    fileAccessLog.AccessLogFormat = &facpb.FileAccessLog_LogFormat{",
          "247:     LogFormat: &corepb.SubstitutionFormatString{",
          "248:      Format: &corepb.SubstitutionFormatString_TextFormat{",
          "249:       TextFormat: opts.AccessLogFormat,",
          "250:      },",
          "251:     },",
          "252:    }",
          "253:   }",
          "255:   serialized, _ := anypb.New(fileAccessLog)",
          "257:   httpConMgr.AccessLog = []*acpb.AccessLog{",
          "258:    {",
          "259:     Name:   util.AccessFileLogger,",
          "260:     Filter: nil,",
          "261:     ConfigType: &acpb.AccessLog_TypedConfig{",
          "262:      TypedConfig: serialized,",
          "263:     },",
          "264:    },",
          "265:   }",
          "266:  }",
          "268:  if !opts.DisableTracing {",
          "269:   var err error",
          "270:   httpConMgr.Tracing, err = tracing.CreateTracing(opts.CommonOptions)",
          "271:   if err != nil {",
          "272:    return nil, err",
          "273:   }",
          "274:  }",
          "276:  if opts.UnderscoresInHeaders {",
          "277:   httpConMgr.CommonHttpProtocolOptions = &corepb.HttpProtocolOptions{",
          "278:    HeadersWithUnderscoresAction: corepb.HttpProtocolOptions_ALLOW,",
          "279:   }",
          "280:  } else {",
          "281:   httpConMgr.CommonHttpProtocolOptions = &corepb.HttpProtocolOptions{",
          "282:    HeadersWithUnderscoresAction: corepb.HttpProtocolOptions_REJECT_REQUEST,",
          "283:   }",
          "284:  }",
          "286:  if opts.EnableGrpcForHttp1 {",
          "288:   httpConMgr.HttpProtocolOptions = &corepb.Http1ProtocolOptions{",
          "289:    EnableTrailers: true,",
          "290:   }",
          "291:  }",
          "293:  return httpConMgr, nil",
          "294: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go": [
          "File: src/go/configgenerator/listener_generator_test.go -> src/go/configgenerator/listener_generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "22:  \"google.golang.org/protobuf/types/known/anypb\"",
          "27:  annotationspb \"google.golang.org/genproto/googleapis/api/annotations\"",
          "28:  confpb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "29:  smpb \"google.golang.org/genproto/googleapis/api/servicemanagement/v1\"",
          "30:  apipb \"google.golang.org/genproto/protobuf/api\"",
          "32: )",
          "34: var (",
          "",
          "[Removed Lines]",
          "24:  corepb \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"",
          "25:  routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"",
          "26:  hcmpb \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"",
          "31:  \"google.golang.org/protobuf/types/known/structpb\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:   opts := options.DefaultConfigGeneratorOptions()",
          "414:   opts.SslServerCertPath = tc.sslServerCertPath",
          "415:   opts.UnderscoresInHeaders = true",
          "417:   opts.ConnectionBufferLimitBytes = 1024",
          "418:   fakeServiceInfo, err := configinfo.NewServiceInfoFromServiceConfig(tc.fakeServiceConfig, opts)",
          "419:   if err != nil {",
          "",
          "[Removed Lines]",
          "416:   opts.DisableTracing = true",
          "",
          "[Added Lines]",
          "412:   opts.CommonOptions.TracingOptions.DisableTracing = true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:   }",
          "442:  }",
          "443: }",
          "",
          "[Removed Lines]",
          "445: func TestMakeHTTPConMgr(t *testing.T) {",
          "446:  testdata := []struct {",
          "447:   desc             string",
          "448:   opts             options.ConfigGeneratorOptions",
          "449:   localReplyConfig *hcmpb.LocalReplyConfig",
          "450:   wantHTTPConnMgr  string",
          "451:  }{",
          "452:   {",
          "453:    desc: \"Generate HttpConMgr with default options\",",
          "454:    opts: options.ConfigGeneratorOptions{",
          "455:     CommonOptions: options.CommonOptions{",
          "456:      DisableTracing: true,",
          "457:     },",
          "458:    },",
          "459:    wantHTTPConnMgr: `",
          "460:    {",
          "461:     \"commonHttpProtocolOptions\": {",
          "462:      \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "463:     },",
          "464:     \"localReplyConfig\": {",
          "465:      \"bodyFormat\": {",
          "466:       \"jsonFormat\": {",
          "467:        \"code\": \"%RESPONSE_CODE%\",",
          "468:        \"message\": \"%LOCAL_REPLY_BODY%\"",
          "469:       }",
          "470:      }",
          "471:     },",
          "472:     \"normalizePath\": false,",
          "473:     \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "474:     \"routeConfig\": {},",
          "475:     \"statPrefix\": \"ingress_http\",",
          "476:     \"upgradeConfigs\": [",
          "477:      {",
          "478:       \"upgradeType\": \"websocket\"",
          "479:      }",
          "480:     ],",
          "481:     \"useRemoteAddress\": false",
          "482:    }`,",
          "483:   },",
          "484:   {",
          "485:    desc: \"Generate HttpConMgr with custom local reply config\",",
          "486:    opts: options.ConfigGeneratorOptions{",
          "487:     CommonOptions: options.CommonOptions{",
          "488:      DisableTracing: true,",
          "489:     },",
          "490:    },",
          "491:    localReplyConfig: &hcmpb.LocalReplyConfig{",
          "492:     BodyFormat: &corepb.SubstitutionFormatString{",
          "493:      Format: &corepb.SubstitutionFormatString_JsonFormat{",
          "494:       JsonFormat: &structpb.Struct{",
          "495:        Fields: map[string]*structpb.Value{",
          "496:         \"foo\": {",
          "497:          Kind: &structpb.Value_StringValue{StringValue: \"%bar%\"},",
          "498:         },",
          "499:        },",
          "500:       },",
          "501:      },",
          "502:     },",
          "503:    },",
          "504:    wantHTTPConnMgr: `",
          "505:    {",
          "506:     \"commonHttpProtocolOptions\": {",
          "507:      \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "508:     },",
          "509:     \"localReplyConfig\": {",
          "510:      \"bodyFormat\": {",
          "511:       \"jsonFormat\": {",
          "512:        \"foo\": \"%bar%\"",
          "513:       }",
          "514:      }",
          "515:     },",
          "516:     \"normalizePath\": false,",
          "517:     \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "518:     \"routeConfig\": {},",
          "519:     \"statPrefix\": \"ingress_http\",",
          "520:     \"upgradeConfigs\": [",
          "521:      {",
          "522:       \"upgradeType\": \"websocket\"",
          "523:      }",
          "524:     ],",
          "525:     \"useRemoteAddress\": false",
          "526:    }`,",
          "527:   },",
          "528:   {",
          "529:    desc: \"Generate HttpConMgr when accessLog is defined\",",
          "530:    opts: options.ConfigGeneratorOptions{",
          "531:     AccessLog:       \"/foo\",",
          "532:     AccessLogFormat: \"/bar\",",
          "533:     CommonOptions: options.CommonOptions{",
          "534:      DisableTracing: true,",
          "535:     },",
          "536:    },",
          "537:    wantHTTPConnMgr: `",
          "538:     {",
          "539:      \"accessLog\": [",
          "540:       {",
          "541:        \"name\": \"envoy.access_loggers.file\",",
          "542:        \"typedConfig\": {",
          "543:         \"@type\": \"type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\",",
          "544:         \"path\": \"/foo\",",
          "545:         \"logFormat\":{\"textFormat\":\"/bar\"}",
          "546:        }",
          "547:       }",
          "548:      ],",
          "549:      \"commonHttpProtocolOptions\": {",
          "550:       \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "551:      },",
          "552:      \"localReplyConfig\": {",
          "553:       \"bodyFormat\": {",
          "554:        \"jsonFormat\": {",
          "555:         \"code\": \"%RESPONSE_CODE%\",",
          "556:         \"message\": \"%LOCAL_REPLY_BODY%\"",
          "557:        }",
          "558:       }",
          "559:      },",
          "560:      \"normalizePath\": false,",
          "561:      \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "562:      \"routeConfig\": {},",
          "563:      \"statPrefix\": \"ingress_http\",",
          "564:      \"upgradeConfigs\": [",
          "565:       {",
          "566:        \"upgradeType\": \"websocket\"",
          "567:       }",
          "568:      ],",
          "569:      \"useRemoteAddress\": false",
          "570:     }",
          "571:     `,",
          "572:   },",
          "573:   {",
          "574:    desc: \"Generate HttpConMgr when tracing is enabled\",",
          "575:    opts: options.ConfigGeneratorOptions{",
          "576:     CommonOptions: options.CommonOptions{",
          "577:      DisableTracing:      false,",
          "578:      TracingProjectId:    \"test-project\",",
          "579:      TracingSamplingRate: 1,",
          "580:     },",
          "581:    },",
          "582:    wantHTTPConnMgr: `",
          "583:     {",
          "584:      \"commonHttpProtocolOptions\": {",
          "585:       \"headersWithUnderscoresAction\": \"REJECT_REQUEST\"",
          "586:      },",
          "587:      \"localReplyConfig\": {",
          "588:       \"bodyFormat\": {",
          "589:        \"jsonFormat\": {",
          "590:         \"code\": \"%RESPONSE_CODE%\",",
          "591:         \"message\": \"%LOCAL_REPLY_BODY%\"",
          "592:        }",
          "593:       }",
          "594:      },",
          "595:      \"normalizePath\": false,",
          "596:      \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "597:      \"routeConfig\": {},",
          "598:      \"statPrefix\": \"ingress_http\",",
          "599:      \"tracing\":{",
          "600:       \"clientSampling\":{},",
          "601:       \"overallSampling\":{",
          "602:        \"value\": 100",
          "603:       },",
          "604:       \"provider\":{",
          "605:        \"name\":\"envoy.tracers.opencensus\",",
          "606:        \"typedConfig\":{",
          "607:          \"@type\":\"type.googleapis.com/envoy.config.trace.v3.OpenCensusConfig\",",
          "608:          \"stackdriverExporterEnabled\":true,",
          "609:          \"stackdriverProjectId\":\"test-project\",",
          "610:          \"traceConfig\":{}",
          "611:        }",
          "612:       },",
          "613:       \"randomSampling\":{",
          "614:        \"value\": 100",
          "615:       }",
          "616:      },",
          "617:      \"upgradeConfigs\": [",
          "618:       {",
          "619:        \"upgradeType\": \"websocket\"",
          "620:       }",
          "621:      ],",
          "622:      \"useRemoteAddress\": false",
          "623:     }`,",
          "624:   },",
          "625:   {",
          "626:    desc: \"Generate HttpConMgr when UnderscoresInHeaders is defined\",",
          "627:    opts: options.ConfigGeneratorOptions{",
          "628:     UnderscoresInHeaders: true,",
          "629:     CommonOptions: options.CommonOptions{",
          "630:      DisableTracing: true,",
          "631:     },",
          "632:    },",
          "633:    wantHTTPConnMgr: `",
          "634:     {",
          "635:      \"commonHttpProtocolOptions\": {},",
          "636:      \"localReplyConfig\": {",
          "637:       \"bodyFormat\": {",
          "638:        \"jsonFormat\": {",
          "639:         \"code\": \"%RESPONSE_CODE%\",",
          "640:         \"message\": \"%LOCAL_REPLY_BODY%\"",
          "641:        }",
          "642:       }",
          "643:      },",
          "644:      \"normalizePath\": false,",
          "645:      \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "646:      \"routeConfig\": {},",
          "647:      \"statPrefix\": \"ingress_http\",",
          "648:      \"upgradeConfigs\": [",
          "649:       {",
          "650:        \"upgradeType\": \"websocket\"",
          "651:       }",
          "652:      ],",
          "653:      \"useRemoteAddress\": false",
          "654:     }`,",
          "655:   },",
          "656:   {",
          "657:    desc: \"Generate HttpConMgr when EnableGrpcForHttp1 is defined\",",
          "658:    opts: options.ConfigGeneratorOptions{",
          "659:     EnableGrpcForHttp1:   true,",
          "660:     UnderscoresInHeaders: true,",
          "661:     CommonOptions: options.CommonOptions{",
          "662:      DisableTracing: true,",
          "663:     },",
          "664:    },",
          "665:    wantHTTPConnMgr: `",
          "666:     {",
          "667:      \"commonHttpProtocolOptions\": {},",
          "668:                                         \"httpProtocolOptions\": {\"enableTrailers\": true},",
          "669:      \"localReplyConfig\": {",
          "670:       \"bodyFormat\": {",
          "671:        \"jsonFormat\": {",
          "672:         \"code\": \"%RESPONSE_CODE%\",",
          "673:         \"message\": \"%LOCAL_REPLY_BODY%\"",
          "674:        }",
          "675:       }",
          "676:      },",
          "677:      \"normalizePath\": false,",
          "678:      \"pathWithEscapedSlashesAction\": \"KEEP_UNCHANGED\",",
          "679:      \"routeConfig\": {},",
          "680:      \"statPrefix\": \"ingress_http\",",
          "681:      \"upgradeConfigs\": [",
          "682:       {",
          "683:        \"upgradeType\": \"websocket\"",
          "684:       }",
          "685:      ],",
          "686:      \"useRemoteAddress\": false",
          "687:     }`,",
          "688:   },",
          "689:  }",
          "691:  for _, tc := range testdata {",
          "692:   routeConfig := routepb.RouteConfiguration{}",
          "693:   hcm, err := makeHTTPConMgr(&tc.opts, &routeConfig, tc.localReplyConfig)",
          "694:   if err != nil {",
          "695:    t.Fatalf(\"Test (%v) failed with error: %v\", tc.desc, err)",
          "696:   }",
          "698:   gotHttpConnMgr, err := util.ProtoToJson(hcm)",
          "699:   if err != nil {",
          "700:    t.Fatalf(\"Test (%v) failed with error: %v\", tc.desc, err)",
          "701:   }",
          "703:   if err := util.JsonEqual(tc.wantHTTPConnMgr, gotHttpConnMgr); err != nil {",
          "704:    t.Errorf(\"Test (%v): failed, \\n %v \", tc.desc, err)",
          "705:   }",
          "706:  }",
          "707: }",
          "709: func TestMakeSchemeHeaderOverride(t *testing.T) {",
          "710:  testdata := []struct {",
          "711:   desc              string",
          "712:   fakeServiceConfig *confpb.Service",
          "713:   serverLess        bool",
          "714:   want              string",
          "715:  }{",
          "716:   {",
          "717:    desc:       \"https scheme override, grpcs backend and server_less\",",
          "718:    serverLess: true,",
          "719:    fakeServiceConfig: &confpb.Service{",
          "720:     Name: testProjectName,",
          "721:     Apis: []*apipb.Api{",
          "722:      {",
          "723:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "724:       Methods: []*apipb.Method{",
          "725:        {",
          "726:         Name: \"Foo\",",
          "727:        },",
          "728:       },",
          "729:      },",
          "730:     },",
          "731:     Backend: &confpb.Backend{",
          "732:      Rules: []*confpb.BackendRule{",
          "733:       {",
          "734:        Address:         \"grpcs://mybackend.com\",",
          "735:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "736:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "737:        Authentication: &confpb.BackendRule_JwtAudience{",
          "738:         JwtAudience: \"mybackend.com\",",
          "739:        },",
          "740:       },",
          "741:      },",
          "742:     },",
          "743:    },",
          "744:    want: `{\"schemeToOverwrite\": \"https\"}`,",
          "745:   },",
          "746:   {",
          "747:    desc: \"no scheme override, grpcs backend but not server_less\",",
          "748:    fakeServiceConfig: &confpb.Service{",
          "749:     Name: testProjectName,",
          "750:     Apis: []*apipb.Api{",
          "751:      {",
          "752:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "753:       Methods: []*apipb.Method{",
          "754:        {",
          "755:         Name: \"Foo\",",
          "756:        },",
          "757:       },",
          "758:      },",
          "759:     },",
          "760:     Backend: &confpb.Backend{",
          "761:      Rules: []*confpb.BackendRule{",
          "762:       {",
          "763:        Address:         \"grpcs://mybackend.com\",",
          "764:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "765:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "766:        Authentication: &confpb.BackendRule_JwtAudience{",
          "767:         JwtAudience: \"mybackend.com\",",
          "768:        },",
          "769:       },",
          "770:      },",
          "771:     },",
          "772:    },",
          "773:   },",
          "774:   {",
          "775:    desc:       \"no scheme override, not remote backend\",",
          "776:    serverLess: true,",
          "777:    fakeServiceConfig: &confpb.Service{",
          "778:     Name: testProjectName,",
          "779:     Apis: []*apipb.Api{",
          "780:      {",
          "781:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "782:       Methods: []*apipb.Method{",
          "783:        {",
          "784:         Name: \"Foo\",",
          "785:        },",
          "786:       },",
          "787:      },",
          "788:     },",
          "789:    },",
          "790:   },",
          "791:   {",
          "792:    desc:       \"no scheme override, backend is grpc\",",
          "793:    serverLess: true,",
          "794:    fakeServiceConfig: &confpb.Service{",
          "795:     Name: testProjectName,",
          "796:     Apis: []*apipb.Api{",
          "797:      {",
          "798:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "799:       Methods: []*apipb.Method{",
          "800:        {",
          "801:         Name: \"Foo\",",
          "802:        },",
          "803:       },",
          "804:      },",
          "805:     },",
          "806:     Backend: &confpb.Backend{",
          "807:      Rules: []*confpb.BackendRule{",
          "808:       {",
          "809:        Address:         \"grpc://mybackend.com\",",
          "810:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "811:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "812:        Authentication: &confpb.BackendRule_JwtAudience{",
          "813:         JwtAudience: \"mybackend.com\",",
          "814:        },",
          "815:       },",
          "816:      },",
          "817:     },",
          "818:    },",
          "819:   },",
          "820:   {",
          "821:    desc:       \"no scheme override, backend is https\",",
          "822:    serverLess: true,",
          "823:    fakeServiceConfig: &confpb.Service{",
          "824:     Name: testProjectName,",
          "825:     Apis: []*apipb.Api{",
          "826:      {",
          "827:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "828:       Methods: []*apipb.Method{",
          "829:        {",
          "830:         Name: \"Foo\",",
          "831:        },",
          "832:       },",
          "833:      },",
          "834:     },",
          "835:     Backend: &confpb.Backend{",
          "836:      Rules: []*confpb.BackendRule{",
          "837:       {",
          "838:        Address:         \"https://mybackend.com\",",
          "839:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "840:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "841:        Authentication: &confpb.BackendRule_JwtAudience{",
          "842:         JwtAudience: \"mybackend.com\",",
          "843:        },",
          "844:       },",
          "845:      },",
          "846:     },",
          "847:    },",
          "848:   },",
          "849:   {",
          "850:    desc:       \"no scheme override, backend is http\",",
          "851:    serverLess: true,",
          "852:    fakeServiceConfig: &confpb.Service{",
          "853:     Name: testProjectName,",
          "854:     Apis: []*apipb.Api{",
          "855:      {",
          "856:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "857:       Methods: []*apipb.Method{",
          "858:        {",
          "859:         Name: \"Foo\",",
          "860:        },",
          "861:       },",
          "862:      },",
          "863:     },",
          "864:     Backend: &confpb.Backend{",
          "865:      Rules: []*confpb.BackendRule{",
          "866:       {",
          "867:        Address:         \"http://mybackend.com\",",
          "868:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "869:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "870:        Authentication: &confpb.BackendRule_JwtAudience{",
          "871:         JwtAudience: \"mybackend.com\",",
          "872:        },",
          "873:       },",
          "874:      },",
          "875:     },",
          "876:    },",
          "877:   },",
          "878:   {",
          "879:    desc:       \"https scheme override, one of grpc backends uses ssl\",",
          "880:    serverLess: true,",
          "881:    fakeServiceConfig: &confpb.Service{",
          "882:     Name: testProjectName,",
          "883:     Apis: []*apipb.Api{",
          "884:      {",
          "885:       Name: \"1.cloudesf_testing_cloud_goog\",",
          "886:       Methods: []*apipb.Method{",
          "887:        {",
          "888:         Name: \"Foo\",",
          "889:        },",
          "890:        {",
          "891:         Name: \"Bar\",",
          "892:        },",
          "893:       },",
          "894:      },",
          "895:     },",
          "896:     Backend: &confpb.Backend{",
          "897:      Rules: []*confpb.BackendRule{",
          "898:       {",
          "899:        Address:         \"grpcs://mybackend.com\",",
          "900:        Selector:        \"1.cloudesf_testing_cloud_goog.Foo\",",
          "901:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "902:        Authentication: &confpb.BackendRule_JwtAudience{",
          "903:         JwtAudience: \"mybackend.com\",",
          "904:        },",
          "905:       },",
          "906:       {",
          "907:        Address:         \"grpc://mybackend.com\",",
          "908:        Selector:        \"1.cloudesf_testing_cloud_goog.Bar\",",
          "909:        PathTranslation: confpb.BackendRule_CONSTANT_ADDRESS,",
          "910:        Authentication: &confpb.BackendRule_JwtAudience{",
          "911:         JwtAudience: \"mybackend.com\",",
          "912:        },",
          "913:       },",
          "914:      },",
          "915:     },",
          "916:    },",
          "917:    want: `{\"schemeToOverwrite\": \"https\"}`,",
          "918:   },",
          "919:  }",
          "921:  for _, tc := range testdata {",
          "922:   t.Run(tc.desc, func(t *testing.T) {",
          "923:    opts := options.DefaultConfigGeneratorOptions()",
          "924:    if tc.serverLess {",
          "925:     opts.ComputePlatformOverride = util.ServerlessPlatform",
          "926:    }",
          "927:    si, err := configinfo.NewServiceInfoFromServiceConfig(tc.fakeServiceConfig, opts)",
          "928:    if err != nil {",
          "929:     t.Fatal(err)",
          "930:    }",
          "932:    sho := makeSchemeHeaderOverride(si)",
          "933:    if sho == nil {",
          "934:     if tc.want != \"\" {",
          "935:      t.Fatalf(\"failed, got nil, want: %v\", tc.want)",
          "936:     }",
          "937:    } else {",
          "938:     got, err := util.ProtoToJson(sho)",
          "939:     if err != nil {",
          "940:      t.Fatalf(\"failed to marshal to json with error: %v\", err)",
          "941:     }",
          "943:     if err := util.JsonEqual(tc.want, got); err != nil {",
          "944:      t.Errorf(\"failed, diff:\\n %v \", err)",
          "945:     }",
          "946:    }",
          "947:   })",
          "948:  }",
          "949: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configmanager/config_manager.go||src/go/configmanager/config_manager.go": [
          "File: src/go/configmanager/config_manager.go -> src/go/configmanager/config_manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/metadata\"",
          "30:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "31:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/tokengenerator\"",
          "32:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "33:  \"github.com/envoyproxy/go-control-plane/pkg/cache/types\"",
          "34:  \"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/tracing\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:  if m.metadataFetcher != nil {",
          "243:   attrs, err := m.metadataFetcher.FetchGCPAttributes()",
          "244:   if err != nil {",
          "246:   } else {",
          "247:    m.scParams.GCPAttributes = attrs",
          "248:   }",
          "249:  }",
          "251:  snapshot, err := m.makeSnapshot()",
          "",
          "[Removed Lines]",
          "245:    m.Infof(\"metadata server was not reached, skipping GCP Attributes: %v\", err)",
          "",
          "[Added Lines]",
          "246:    m.Warnf(\"metadata server was not reached, skipping GCP Attributes: %v\", err)",
          "251:   shouldFetchTracingProject := tracing.ShouldFetchTracingProjectID(m.serviceInfo.Options.CommonOptions)",
          "252:   if shouldFetchTracingProject {",
          "254:    m.serviceInfo.Options.CommonOptions.TracingOptions.ProjectId = attrs.ProjectId",
          "255:   }",
          "",
          "---------------"
        ],
        "src/go/configmanager/config_manager_test.go||src/go/configmanager/config_manager_test.go": [
          "File: src/go/configmanager/config_manager_test.go -> src/go/configmanager/config_manager_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:    opts := options.DefaultConfigGeneratorOptions()",
          "114:    opts.BackendAddress = tc.BackendAddress",
          "117:    opts.SuppressEnvoyHeaders = !tc.enableDebug",
          "119:    setFlags(testdata.TestFetchListenersProjectName, testdata.TestFetchListenersConfigID, util.FixedRolloutStrategy, \"100ms\", \"\")",
          "",
          "[Removed Lines]",
          "115:    opts.DisableTracing = !tc.enableTracing",
          "116:    opts.TracingProjectId = \"fake-project-id\"",
          "",
          "[Added Lines]",
          "115:    opts.CommonOptions.TracingOptions.DisableTracing = !tc.enableTracing",
          "116:    opts.CommonOptions.TracingOptions.ProjectId = \"fake-project-id\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:  opts := options.DefaultConfigGeneratorOptions()",
          "159:  opts.BackendAddress = \"grpc://127.0.0.1:80\"",
          "163:  var originalInitMockServer = initMockServer",
          "164:  defer func() { initMockServer = originalInitMockServer }()",
          "",
          "[Removed Lines]",
          "160:  opts.TracingProjectId = \"fake-project-id\"",
          "161:  opts.DisableTracing = true",
          "",
          "[Added Lines]",
          "160:  opts.CommonOptions.TracingOptions.ProjectId = \"fake-project-id\"",
          "161:  opts.CommonOptions.TracingOptions.DisableTracing = true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:  marshaler := &jsonpb.Marshaler{}",
          "303:  for i, tc := range testData {",
          "304:   opts := options.DefaultConfigGeneratorOptions()",
          "307:   _ = flag.Set(\"service_json_path\", tc.serviceConfigPath)",
          "",
          "[Removed Lines]",
          "305:   opts.DisableTracing = true",
          "",
          "[Added Lines]",
          "305:   opts.CommonOptions.TracingOptions.DisableTracing = true",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:  opts := options.DefaultConfigGeneratorOptions()",
          "531:  opts.BackendAddress = tc.BackendAddress",
          "534:  setFlags(testProjectName, testConfigID, util.ManagedRolloutStrategy, \"100ms\", \"\")",
          "",
          "[Removed Lines]",
          "532:  opts.DisableTracing = true",
          "",
          "[Added Lines]",
          "532:  opts.CommonOptions.TracingOptions.DisableTracing = true",
          "",
          "---------------"
        ],
        "src/go/options/common.go||src/go/options/common.go": [
          "File: src/go/options/common.go -> src/go/options/common.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  AdsNamedPipe          string",
          "28:  Node                  string",
          "29:  GeneratedHeaderPrefix string",
          "45:  NonGCP             bool",
          "",
          "[Removed Lines]",
          "32:  DisableTracing                  bool",
          "33:  TracingProjectId                string",
          "34:  TracingStackdriverAddress       string",
          "35:  TracingSamplingRate             float64",
          "36:  TracingIncomingContext          string",
          "37:  TracingOutgoingContext          string",
          "38:  TracingMaxNumAttributes         int64",
          "39:  TracingMaxNumAnnotations        int64",
          "40:  TracingMaxNumMessageEvents      int64",
          "41:  TracingMaxNumLinks              int64",
          "42:  TracingEnableVerboseAnnotations bool",
          "",
          "[Added Lines]",
          "30:  TracingOptions        *TracingOptions",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:  DisallowColonInWildcardPathSegment bool",
          "56: }",
          "59: type IamTokenKind int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: type TracingOptions struct {",
          "48:  DisableTracing           bool",
          "49:  ProjectId                string",
          "50:  StackdriverAddress       string",
          "51:  SamplingRate             float64",
          "52:  IncomingContext          string",
          "53:  OutgoingContext          string",
          "54:  MaxNumAttributes         int64",
          "55:  MaxNumAnnotations        int64",
          "56:  MaxNumMessageEvents      int64",
          "57:  MaxNumLinks              int64",
          "58:  EnableVerboseAnnotations bool",
          "59: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:   HttpRequestTimeout: 30 * time.Second,",
          "102:  }",
          "103: }",
          "",
          "[Removed Lines]",
          "91:   Node:                       \"ESPv2\",",
          "92:   TracingSamplingRate:        0.001,",
          "93:   TracingMaxNumAttributes:    32,",
          "94:   TracingMaxNumAnnotations:   32,",
          "95:   TracingMaxNumMessageEvents: 128,",
          "96:   TracingMaxNumLinks:         128,",
          "97:   TracingIncomingContext:     \"traceparent,x-cloud-trace-context\",",
          "98:   TracingOutgoingContext:     \"traceparent,x-cloud-trace-context\",",
          "99:   MetadataURL:                \"http://169.254.169.254\",",
          "100:   IamURL:                     \"https://iamcredentials.googleapis.com\",",
          "101:   GeneratedHeaderPrefix:      \"X-Endpoint-\",",
          "",
          "[Added Lines]",
          "94:   Node: \"ESPv2\",",
          "95:   TracingOptions: &TracingOptions{",
          "96:    DisableTracing:      false,",
          "97:    SamplingRate:        0.001,",
          "98:    MaxNumAttributes:    32,",
          "99:    MaxNumAnnotations:   32,",
          "100:    MaxNumMessageEvents: 128,",
          "101:    MaxNumLinks:         128,",
          "102:    IncomingContext:     \"traceparent,x-cloud-trace-context\",",
          "103:    OutgoingContext:     \"traceparent,x-cloud-trace-context\",",
          "104:   },",
          "105:   MetadataURL:           \"http://169.254.169.254\",",
          "106:   IamURL:                \"https://iamcredentials.googleapis.com\",",
          "107:   GeneratedHeaderPrefix: \"X-Endpoint-\",",
          "",
          "---------------"
        ],
        "src/go/tracing/tracing.go||src/go/tracing/tracing.go": [
          "File: src/go/tracing/tracing.go -> src/go/tracing/tracing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"math\"",
          "20:  \"strings\"",
          "23:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "24:  opencensuspb \"github.com/census-instrumentation/opencensus-proto/gen-go/trace/v1\"",
          "25:  tracepb \"github.com/envoyproxy/go-control-plane/envoy/config/trace/v3\"",
          "",
          "[Removed Lines]",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/metadata\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  return out, nil",
          "53: }",
          "59:  if projectId != \"\" {",
          "61:  }",
          "65:  if opts.NonGCP {",
          "67:  }",
          "70: }",
          "78:  cfg := &tracepb.OpenCensusConfig{",
          "79:   TraceConfig: &opencensuspb.TraceConfig{",
          "84:   },",
          "85:   StackdriverExporterEnabled: true,",
          "87:  }",
          "91:  }",
          "94:   cfg.IncomingTraceContext = ctx",
          "95:  } else {",
          "96:   return nil, err",
          "97:  }",
          "100:   cfg.OutgoingTraceContext = ctx",
          "101:  } else {",
          "102:   return nil, err",
          "",
          "[Removed Lines]",
          "55: func getTracingProjectId(opts options.CommonOptions) (string, error) {",
          "58:  projectId := opts.TracingProjectId",
          "60:   return projectId, nil",
          "64:  glog.Infof(\"tracing_project_id was not specified, attempting to fetch it from GCP Metadata server\")",
          "66:   return \"\", fmt.Errorf(\"tracing_project_id was not specified and can not be fetched from GCP Metadata server on non-GCP runtime\")",
          "69:  return metadata.NewMetadataFetcher(opts).FetchProjectId()",
          "72: func createOpenCensusConfig(opts options.CommonOptions) (*tracepb.OpenCensusConfig, error) {",
          "73:  projectId, err := getTracingProjectId(opts)",
          "74:  if err != nil {",
          "75:   return nil, err",
          "76:  }",
          "80:    MaxNumberOfAttributes:    opts.TracingMaxNumAttributes,",
          "81:    MaxNumberOfAnnotations:   opts.TracingMaxNumAnnotations,",
          "82:    MaxNumberOfMessageEvents: opts.TracingMaxNumMessageEvents,",
          "83:    MaxNumberOfLinks:         opts.TracingMaxNumLinks,",
          "86:   StackdriverProjectId:       projectId,",
          "89:  if opts.TracingStackdriverAddress != \"\" {",
          "90:   cfg.StackdriverAddress = opts.TracingStackdriverAddress",
          "93:  if ctx, err := createTraceContexts(opts.TracingIncomingContext); err == nil {",
          "99:  if ctx, err := createTraceContexts(opts.TracingOutgoingContext); err == nil {",
          "",
          "[Added Lines]",
          "56: func ShouldFetchTracingProjectID(opts options.CommonOptions) bool {",
          "57:  if opts.TracingOptions.DisableTracing {",
          "58:   return false",
          "59:  }",
          "62:  projectId := opts.TracingOptions.ProjectId",
          "64:   return false",
          "68:  glog.Infof(\"--tracing_project_id was not specified, attempting to fetch it from GCP Metadata server.\")",
          "70:   glog.Warning(\"--tracing_project_id was not specified and can not be fetched from GCP Metadata server on non-GCP runtime.\")",
          "71:   return false",
          "74:  return true",
          "77: func createOpenCensusConfig(opts options.TracingOptions) (*tracepb.OpenCensusConfig, error) {",
          "80:    MaxNumberOfAttributes:    opts.MaxNumAttributes,",
          "81:    MaxNumberOfAnnotations:   opts.MaxNumAnnotations,",
          "82:    MaxNumberOfMessageEvents: opts.MaxNumMessageEvents,",
          "83:    MaxNumberOfLinks:         opts.MaxNumLinks,",
          "86:   StackdriverProjectId:       opts.ProjectId,",
          "89:  if opts.StackdriverAddress != \"\" {",
          "90:   cfg.StackdriverAddress = opts.StackdriverAddress",
          "93:  if ctx, err := createTraceContexts(opts.IncomingContext); err == nil {",
          "99:  if ctx, err := createTraceContexts(opts.OutgoingContext); err == nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: }",
          "114:  openCensusConfig, err := createOpenCensusConfig(opts)",
          "115:  if err != nil {",
          "",
          "[Removed Lines]",
          "112: func CreateTracing(opts options.CommonOptions) (*hcmpb.HttpConnectionManager_Tracing, error) {",
          "",
          "[Added Lines]",
          "112: func CreateTracing(opts options.TracingOptions) (*hcmpb.HttpConnectionManager_Tracing, error) {",
          "113:  if opts.ProjectId == \"\" {",
          "114:   glog.Warningf(\"Not adding tracing config because project ID is empty\")",
          "115:   return nil, nil",
          "116:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:   return nil, err",
          "122:  }",
          "126:  }",
          "130:  percentSampleRate = math.Round(percentSampleRate*10000) / 10000",
          "132:  return &hcmpb.HttpConnectionManager_Tracing{",
          "",
          "[Removed Lines]",
          "124:  if opts.TracingSamplingRate < 0.0 || opts.TracingSamplingRate > 1.0 {",
          "125:   return nil, fmt.Errorf(\"invalid trace sampling rate: %v. It must be >= 0.0 and <= 1.0\", opts.TracingSamplingRate)",
          "129:  percentSampleRate := opts.TracingSamplingRate * 100",
          "",
          "[Added Lines]",
          "128:  if opts.SamplingRate < 0.0 || opts.SamplingRate > 1.0 {",
          "129:   return nil, fmt.Errorf(\"invalid trace sampling rate: %v. It must be >= 0.0 and <= 1.0\", opts.SamplingRate)",
          "133:  percentSampleRate := opts.SamplingRate * 100",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:    Name:       \"envoy.tracers.opencensus\",",
          "144:    ConfigType: &tracepb.Tracing_Http_TypedConfig{TypedConfig: typedConfig},",
          "145:   },",
          "147:  }, nil",
          "148: }",
          "",
          "[Removed Lines]",
          "146:   Verbose: opts.TracingEnableVerboseAnnotations,",
          "",
          "[Added Lines]",
          "150:   Verbose: opts.EnableVerboseAnnotations,",
          "",
          "---------------"
        ],
        "src/go/tracing/tracing_test.go||src/go/tracing/tracing_test.go": [
          "File: src/go/tracing/tracing_test.go -> src/go/tracing/tracing_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: package tracing",
          "17: import (",
          "19:  \"strings\"",
          "20:  \"testing\"",
          "21:  \"time\"",
          "",
          "[Removed Lines]",
          "18:  \"reflect\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "25:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util\"",
          "26:  typepb \"github.com/envoyproxy/go-control-plane/envoy/type/v3\"",
          "29:  opencensuspb \"github.com/census-instrumentation/opencensus-proto/gen-go/trace/v1\"",
          "30:  tracepb \"github.com/envoyproxy/go-control-plane/envoy/config/trace/v3\"",
          "",
          "[Removed Lines]",
          "27:  \"google.golang.org/protobuf/proto\"",
          "",
          "[Added Lines]",
          "26:  \"github.com/google/go-cmp/cmp\"",
          "27:  \"google.golang.org/protobuf/testing/protocmp\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: func TestNonGcpOpenCensusConfig(t *testing.T) {",
          "45:  testData := []struct {",
          "57:  }{",
          "58:   {",
          "65:    wantResult: &tracepb.OpenCensusConfig{",
          "72:     StackdriverExporterEnabled: true,",
          "73:     StackdriverProjectId:       fakeOptsProjectId,",
          "74:    },",
          "75:   },",
          "76:   {",
          "81:   },",
          "82:   {",
          "87:   },",
          "88:   {",
          "97:    wantResult: &tracepb.OpenCensusConfig{",
          "104:     StackdriverExporterEnabled: true,",
          "105:     StackdriverProjectId:       fakeOptsProjectId,",
          "106:     IncomingTraceContext: []tracepb.OpenCensusConfig_TraceContext{",
          "",
          "[Removed Lines]",
          "43:  defaultOpts := options.DefaultCommonOptions()",
          "46:   desc                       string",
          "47:   tracingProjectId           string",
          "48:   tracingIncomingContext     string",
          "49:   tracingOutgoingContext     string",
          "50:   tracingStackdriverAddress  string",
          "51:   tracingMaxNumAttributes    int64",
          "52:   tracingMaxNumAnnotations   int64",
          "53:   tracingMaxNumMessageEvents int64",
          "54:   tracingMaxNumLinks         int64",
          "55:   wantError                  string",
          "56:   wantResult                 *tracepb.OpenCensusConfig",
          "59:    desc:                       \"Success with default tracing\",",
          "60:    tracingProjectId:           fakeOptsProjectId,",
          "61:    tracingMaxNumAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "62:    tracingMaxNumAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "63:    tracingMaxNumMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "64:    tracingMaxNumLinks:         defaultOpts.TracingMaxNumLinks,",
          "66:     TraceConfig: &opencensuspb.TraceConfig{",
          "67:      MaxNumberOfAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "68:      MaxNumberOfAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "69:      MaxNumberOfMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "70:      MaxNumberOfLinks:         defaultOpts.TracingMaxNumLinks,",
          "71:     },",
          "77:    desc:                   \"Failed with invalid tracing_incoming_context\",",
          "78:    tracingProjectId:       fakeOptsProjectId,",
          "79:    tracingIncomingContext: \"aaa\",",
          "80:    wantError:              \"Invalid trace context: aaa\",",
          "83:    desc:                   \"Failed with invalid tracing_outgoing_context\",",
          "84:    tracingProjectId:       fakeOptsProjectId,",
          "85:    tracingOutgoingContext: \"bbb\",",
          "86:    wantError:              \"Invalid trace context: bbb\",",
          "89:    desc:                       \"Success with some tracing contexts\",",
          "90:    tracingProjectId:           fakeOptsProjectId,",
          "91:    tracingIncomingContext:     \"traceparent,grpc-trace-bin\",",
          "92:    tracingOutgoingContext:     \"x-cloud-trace-context\",",
          "93:    tracingMaxNumAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "94:    tracingMaxNumAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "95:    tracingMaxNumMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "96:    tracingMaxNumLinks:         defaultOpts.TracingMaxNumLinks,",
          "98:     TraceConfig: &opencensuspb.TraceConfig{",
          "99:      MaxNumberOfAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "100:      MaxNumberOfAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "101:      MaxNumberOfMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "102:      MaxNumberOfLinks:         defaultOpts.TracingMaxNumLinks,",
          "103:     },",
          "",
          "[Added Lines]",
          "43:   desc       string",
          "44:   opts       *options.TracingOptions",
          "45:   wantError  string",
          "46:   wantResult *tracepb.OpenCensusConfig",
          "49:    desc: \"Success with default tracing\",",
          "50:    opts: &options.TracingOptions{",
          "51:     ProjectId: fakeOptsProjectId,",
          "52:    },",
          "54:     TraceConfig:                &opencensuspb.TraceConfig{},",
          "60:    desc: \"Failed with invalid tracing_incoming_context\",",
          "61:    opts: &options.TracingOptions{",
          "62:     ProjectId:       fakeOptsProjectId,",
          "63:     IncomingContext: \"aaa\",",
          "64:    },",
          "65:    wantError: \"Invalid trace context: aaa\",",
          "68:    desc: \"Failed with invalid tracing_outgoing_context\",",
          "69:    opts: &options.TracingOptions{",
          "70:     ProjectId:       fakeOptsProjectId,",
          "71:     OutgoingContext: \"bbb\",",
          "72:    },",
          "73:    wantError: \"Invalid trace context: bbb\",",
          "76:    desc: \"Success with some tracing contexts\",",
          "77:    opts: &options.TracingOptions{",
          "78:     ProjectId:       fakeOptsProjectId,",
          "79:     IncomingContext: \"traceparent,grpc-trace-bin\",",
          "80:     OutgoingContext: \"x-cloud-trace-context\",",
          "81:    },",
          "83:     TraceConfig:                &opencensuspb.TraceConfig{},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:    },",
          "114:   },",
          "115:   {",
          "123:    wantResult: &tracepb.OpenCensusConfig{",
          "130:     StackdriverExporterEnabled: true,",
          "131:     StackdriverProjectId:       fakeOptsProjectId,",
          "132:     StackdriverAddress:         fakeStackdriverAddress,",
          "133:    },",
          "134:   },",
          "135:   {",
          "143:    wantResult: &tracepb.OpenCensusConfig{",
          "144:     TraceConfig: &opencensuspb.TraceConfig{",
          "145:      MaxNumberOfAttributes:    1,",
          "",
          "[Removed Lines]",
          "116:    desc:                       \"Success with custom stackdriver address\",",
          "117:    tracingProjectId:           fakeOptsProjectId,",
          "118:    tracingStackdriverAddress:  fakeStackdriverAddress,",
          "119:    tracingMaxNumAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "120:    tracingMaxNumAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "121:    tracingMaxNumMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "122:    tracingMaxNumLinks:         defaultOpts.TracingMaxNumLinks,",
          "124:     TraceConfig: &opencensuspb.TraceConfig{",
          "125:      MaxNumberOfAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "126:      MaxNumberOfAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "127:      MaxNumberOfMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "128:      MaxNumberOfLinks:         defaultOpts.TracingMaxNumLinks,",
          "129:     },",
          "136:    desc:                       \"Success with custom max number of attributes/annotations/message_events/links\",",
          "137:    tracingProjectId:           fakeOptsProjectId,",
          "138:    tracingStackdriverAddress:  fakeStackdriverAddress,",
          "139:    tracingMaxNumAttributes:    1,",
          "140:    tracingMaxNumAnnotations:   2,",
          "141:    tracingMaxNumMessageEvents: 3,",
          "142:    tracingMaxNumLinks:         4,",
          "",
          "[Added Lines]",
          "96:    desc: \"Success with custom stackdriver address\",",
          "97:    opts: &options.TracingOptions{",
          "98:     ProjectId:          fakeOptsProjectId,",
          "99:     StackdriverAddress: fakeStackdriverAddress,",
          "100:    },",
          "102:     TraceConfig:                &opencensuspb.TraceConfig{},",
          "109:    desc: \"Success with custom max number of attributes/annotations/message_events/links\",",
          "110:    opts: &options.TracingOptions{",
          "111:     ProjectId:           fakeOptsProjectId,",
          "112:     StackdriverAddress:  fakeStackdriverAddress,",
          "113:     MaxNumAttributes:    1,",
          "114:     MaxNumAnnotations:   2,",
          "115:     MaxNumMessageEvents: 3,",
          "116:     MaxNumLinks:         4,",
          "117:    },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:  }",
          "157:  for _, tc := range testData {",
          "179:    }",
          "183:    }",
          "185:  }",
          "186: }",
          "193:  testData := []struct {",
          "196:  }{",
          "197:   {",
          "211:     },",
          "215:     },",
          "216:    },",
          "217:   },",
          "218:  }",
          "220:  for _, tc := range testData {",
          "228:    }",
          "240:   })",
          "242:  }",
          "243: }",
          "",
          "[Removed Lines]",
          "159:   opts := options.DefaultCommonOptions()",
          "160:   opts.NonGCP = true",
          "161:   opts.TracingProjectId = tc.tracingProjectId",
          "162:   opts.TracingIncomingContext = tc.tracingIncomingContext",
          "163:   opts.TracingOutgoingContext = tc.tracingOutgoingContext",
          "164:   opts.TracingStackdriverAddress = tc.tracingStackdriverAddress",
          "165:   opts.TracingMaxNumAttributes = tc.tracingMaxNumAttributes",
          "166:   opts.TracingMaxNumAnnotations = tc.tracingMaxNumAnnotations",
          "167:   opts.TracingMaxNumMessageEvents = tc.tracingMaxNumMessageEvents",
          "168:   opts.TracingMaxNumLinks = tc.tracingMaxNumLinks",
          "170:   got, err := createOpenCensusConfig(opts)",
          "172:   if tc.wantError != \"\" && (err == nil || !strings.Contains(err.Error(), tc.wantError)) {",
          "173:    t.Errorf(\"Test (%s): failed, expected err: %v, got: %v\", tc.desc, tc.wantError, err)",
          "174:   }",
          "176:   if tc.wantResult != nil {",
          "177:    if got == nil {",
          "178:     t.Errorf(\"Test (%s): failed, expected result should not be nil\", tc.desc)",
          "181:    if !proto.Equal(got, tc.wantResult) {",
          "182:     t.Errorf(\"Test (%s): failed, got : %v, want: %v\", tc.desc, got, tc.wantResult)",
          "184:   }",
          "189: func TestGcpOpenCensusConfig(t *testing.T) {",
          "191:  defaultOpts := options.DefaultCommonOptions()",
          "194:   desc       string",
          "195:   wantResult *tracepb.OpenCensusConfig",
          "198:    desc: \"Success with default tracing, project id from metadata\",",
          "199:    wantResult: &tracepb.OpenCensusConfig{",
          "200:     TraceConfig: &opencensuspb.TraceConfig{",
          "201:      MaxNumberOfAttributes:    defaultOpts.TracingMaxNumAttributes,",
          "202:      MaxNumberOfAnnotations:   defaultOpts.TracingMaxNumAnnotations,",
          "203:      MaxNumberOfMessageEvents: defaultOpts.TracingMaxNumMessageEvents,",
          "204:      MaxNumberOfLinks:         defaultOpts.TracingMaxNumLinks,",
          "205:     },",
          "206:     StackdriverExporterEnabled: true,",
          "207:     StackdriverProjectId:       fakeMetadataProjectId,",
          "208:     IncomingTraceContext: []tracepb.OpenCensusConfig_TraceContext{",
          "209:      tracepb.OpenCensusConfig_TRACE_CONTEXT,",
          "210:      tracepb.OpenCensusConfig_CLOUD_TRACE_CONTEXT,",
          "212:     OutgoingTraceContext: []tracepb.OpenCensusConfig_TraceContext{",
          "213:      tracepb.OpenCensusConfig_TRACE_CONTEXT,",
          "214:      tracepb.OpenCensusConfig_CLOUD_TRACE_CONTEXT,",
          "222:   runTest(t, true, func() {",
          "224:    opts := options.DefaultCommonOptions()",
          "225:    got, err := createOpenCensusConfig(opts)",
          "226:    if err != nil {",
          "227:     t.Fatalf(\"Test (%s): failed, got err: %v, want no err\", tc.desc, err)",
          "230:    if tc.wantResult != nil {",
          "231:     if got == nil {",
          "232:      t.Errorf(\"Test (%s): failed, expected result should not be nil\", tc.desc)",
          "233:     }",
          "235:     if !proto.Equal(got, tc.wantResult) {",
          "236:      t.Errorf(\"Test (%s): failed, got : %v, want: %v\", tc.desc, got, tc.wantResult)",
          "237:     }",
          "238:    }",
          "",
          "[Added Lines]",
          "133:   t.Run(tc.desc, func(t *testing.T) {",
          "134:    got, err := createOpenCensusConfig(*tc.opts)",
          "136:    if tc.wantError != \"\" && (err == nil || !strings.Contains(err.Error(), tc.wantError)) {",
          "137:     t.Errorf(\"failed, expected err: %v, got: %v\", tc.wantError, err)",
          "140:    if tc.wantResult != nil {",
          "141:     if got == nil {",
          "142:      t.Errorf(\"failed, expected result should not be nil\")",
          "143:     }",
          "145:     if diff := cmp.Diff(tc.wantResult, got, protocmp.Transform()); diff != \"\" {",
          "146:      t.Errorf(\"createOpenCensusConfig(%v) diff (-want +got):\\n%s\", tc.opts, diff)",
          "147:     }",
          "149:   })",
          "154: func TestShouldFetchTracingProjectID(t *testing.T) {",
          "156:   desc string",
          "157:   opts options.CommonOptions",
          "158:   want bool",
          "161:    desc: \"No fetch when project ID is specified\",",
          "162:    opts: options.CommonOptions{",
          "163:     TracingOptions: &options.TracingOptions{",
          "164:      ProjectId: fakeOptsProjectId,",
          "166:    },",
          "167:    want: false,",
          "168:   },",
          "169:   {",
          "170:    desc: \"No fetch when non-GCP\",",
          "171:    opts: options.CommonOptions{",
          "172:     NonGCP:         true,",
          "173:     TracingOptions: &options.TracingOptions{},",
          "174:    },",
          "175:    want: false,",
          "176:   },",
          "177:   {",
          "178:    desc: \"No fetch when tracing is disabled\",",
          "179:    opts: options.CommonOptions{",
          "180:     TracingOptions: &options.TracingOptions{",
          "181:      DisableTracing: true,",
          "184:    want: false,",
          "185:   },",
          "186:   {",
          "187:    desc: \"Fetch by default\",",
          "188:    opts: options.CommonOptions{",
          "189:     TracingOptions: &options.TracingOptions{},",
          "190:    },",
          "191:    want: true,",
          "196:   t.Run(tc.desc, func(t *testing.T) {",
          "197:    got := ShouldFetchTracingProjectID(tc.opts)",
          "199:    if got != tc.want {",
          "200:     t.Fatalf(\"ShouldFetchTracingProjectID() got %v, want %v\", got, tc.want)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246: func TestHcmTracingSampleRate(t *testing.T) {",
          "248:  testData := []struct {",
          "253:  }{",
          "254:   {",
          "257:    wantResult: &hcmpb.HttpConnectionManager_Tracing{",
          "258:     ClientSampling: &typepb.Percent{",
          "259:      Value: 0,",
          "",
          "[Removed Lines]",
          "249:   desc              string",
          "250:   tracingSampleRate float64",
          "251:   wantResult        *hcmpb.HttpConnectionManager_Tracing",
          "252:   wantError         string",
          "255:    desc:              \"Default sampling rate works\",",
          "256:    tracingSampleRate: options.DefaultCommonOptions().TracingSamplingRate,",
          "",
          "[Added Lines]",
          "210:   desc       string",
          "211:   opts       options.TracingOptions",
          "212:   wantResult *hcmpb.HttpConnectionManager_Tracing",
          "213:   wantError  string",
          "216:    desc: \"Default sampling rate works\",",
          "217:    opts: options.TracingOptions{",
          "218:     ProjectId:    \"test-project\",",
          "219:     SamplingRate: options.DefaultCommonOptions().TracingOptions.SamplingRate,",
          "220:    },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "272:    },",
          "273:   },",
          "274:   {",
          "277:    wantResult: &hcmpb.HttpConnectionManager_Tracing{",
          "278:     ClientSampling: &typepb.Percent{",
          "279:      Value: 0,",
          "",
          "[Removed Lines]",
          "275:    desc:              \"Custom sampling rate works\",",
          "276:    tracingSampleRate: 0.275,",
          "",
          "[Added Lines]",
          "239:    desc: \"Custom sampling rate works\",",
          "240:    opts: options.TracingOptions{",
          "241:     ProjectId:    \"test-project\",",
          "242:     SamplingRate: 0.275,",
          "243:    },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "292:    },",
          "293:   },",
          "294:   {",
          "297:    wantResult: &hcmpb.HttpConnectionManager_Tracing{",
          "298:     ClientSampling: &typepb.Percent{",
          "299:      Value: 0,",
          "",
          "[Removed Lines]",
          "295:    desc:              \"Sample rate of 1 works\",",
          "296:    tracingSampleRate: 1,",
          "",
          "[Added Lines]",
          "262:    desc: \"Sample rate of 1 works\",",
          "263:    opts: options.TracingOptions{",
          "264:     ProjectId:    \"test-project\",",
          "265:     SamplingRate: 1,",
          "266:    },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "312:    },",
          "313:   },",
          "314:   {",
          "317:    wantResult: &hcmpb.HttpConnectionManager_Tracing{",
          "318:     ClientSampling: &typepb.Percent{",
          "319:      Value: 0,",
          "",
          "[Removed Lines]",
          "315:    desc:              \"Sample rate of 0 works\",",
          "316:    tracingSampleRate: 0,",
          "",
          "[Added Lines]",
          "285:    desc: \"Sample rate of 0 works\",",
          "286:    opts: options.TracingOptions{",
          "287:     ProjectId:    \"test-project\",",
          "288:     SamplingRate: 0,",
          "289:    },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "332:    },",
          "333:   },",
          "334:   {",
          "337:    wantResult: &hcmpb.HttpConnectionManager_Tracing{",
          "338:     ClientSampling: &typepb.Percent{",
          "339:      Value: 0,",
          "",
          "[Removed Lines]",
          "335:    desc:              \"Sample rate rounded at 6 decimal points\",",
          "336:    tracingSampleRate: 0.123456789,",
          "",
          "[Added Lines]",
          "308:    desc: \"Sample rate rounded at 6 decimal points\",",
          "309:    opts: options.TracingOptions{",
          "310:     ProjectId:    \"test-project\",",
          "311:     SamplingRate: 0.123456789,",
          "312:    },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "352:    },",
          "353:   },",
          "354:   {",
          "420:   },",
          "421:   {",
          "426:   },",
          "427:  }",
          "429:  for _, tc := range testData {",
          "451:   })",
          "453:  }",
          "454: }",
          "",
          "[Removed Lines]",
          "355:    desc:              \"Invalid sampling rate has error\",",
          "356:    tracingSampleRate: 1.3,",
          "357:    wantError:         \"invalid trace sampling rate\",",
          "358:   },",
          "359:  }",
          "361:  for _, tc := range testData {",
          "363:   runTest(t, true, func() {",
          "365:    opts := options.DefaultCommonOptions()",
          "366:    opts.TracingSamplingRate = tc.tracingSampleRate",
          "368:    got, err := CreateTracing(opts)",
          "370:    if tc.wantError != \"\" && (err == nil || !strings.Contains(err.Error(), tc.wantError)) {",
          "371:     t.Errorf(\"Test (%s): failed, expected err: %v, got: %v\", tc.desc, tc.wantError, err)",
          "372:    }",
          "374:    if tc.wantResult != nil {",
          "375:     if got == nil {",
          "376:      t.Errorf(\"Test (%s): failed, expected result should not be nil\", tc.desc)",
          "377:     }",
          "379:     got.Provider.ConfigType = nil",
          "380:     if !proto.Equal(got, tc.wantResult) {",
          "381:      t.Errorf(\"Test (%s): failed, got : %v, want: %v\", tc.desc, got, tc.wantResult)",
          "382:     }",
          "383:    }",
          "385:   })",
          "387:  }",
          "388: }",
          "391: func TestDetermineProjectId(t *testing.T) {",
          "392:  testData := []struct {",
          "393:   desc             string",
          "394:   nonGcp           bool",
          "395:   tracingProjectId string",
          "396:   runServer        bool",
          "397:   wantError        string",
          "398:   wantResult       string",
          "399:  }{",
          "400:   {",
          "401:    desc:             \"tracing_project_id not specified, but successfully discovered\",",
          "402:    nonGcp:           false,",
          "403:    tracingProjectId: \"\",",
          "404:    runServer:        true,",
          "405:    wantResult:       fakeMetadataProjectId,",
          "406:   },",
          "407:   {",
          "408:    desc:             \"tracing_project_id not specified, and non GCP runtime\",",
          "409:    nonGcp:           true,",
          "410:    tracingProjectId: \"\",",
          "411:    runServer:        false,",
          "412:    wantError:        \"tracing_project_id was not specified and can not be fetched from GCP Metadata server on non-GCP runtime\",",
          "413:   },",
          "414:   {",
          "415:    desc:             \"tracing_project_id not specified, and error fetching from metadata server\",",
          "416:    nonGcp:           false,",
          "417:    tracingProjectId: \"\",",
          "418:    runServer:        false,",
          "419:    wantError:        \" \", // Allow any error message, depends on underlying http client error",
          "422:    desc:             \"tracing_project_id specified, successfully used\",",
          "423:    nonGcp:           false,",
          "424:    tracingProjectId: fakeOptsProjectId,",
          "425:    wantResult:       fakeOptsProjectId,",
          "431:   runTest(t, tc.runServer, func() {",
          "433:    opts := options.DefaultCommonOptions()",
          "434:    opts.NonGCP = tc.nonGcp",
          "435:    opts.TracingProjectId = tc.tracingProjectId",
          "437:    got, err := getTracingProjectId(opts)",
          "439:    if tc.wantError != \"\" && (err == nil || !strings.Contains(err.Error(), tc.wantError)) {",
          "440:     t.Errorf(\"Test (%s): failed, got err: %v, want err: %v\", tc.desc, err, tc.wantError)",
          "441:    }",
          "443:    if tc.wantError == \"\" && err != nil {",
          "444:     t.Errorf(\"Test (%s): failed, got err: %v, want no err\", tc.desc, err)",
          "445:    }",
          "447:    if !reflect.DeepEqual(got, tc.wantResult) {",
          "448:     t.Errorf(\"Test (%s): failed, got: %v, want: %v\", tc.desc, got, tc.wantResult)",
          "449:    }",
          "",
          "[Added Lines]",
          "331:    desc: \"Invalid sampling rate has error\",",
          "332:    opts: options.TracingOptions{",
          "333:     ProjectId:    \"test-project\",",
          "334:     SamplingRate: 1.3,",
          "335:    },",
          "336:    wantError: \"invalid trace sampling rate\",",
          "339:    desc: \"Empty config when project ID is not specified\",",
          "340:    opts: options.TracingOptions{",
          "341:     SamplingRate: options.DefaultCommonOptions().TracingOptions.SamplingRate,",
          "342:    },",
          "343:    wantResult: nil,",
          "348:   t.Run(tc.desc, func(t *testing.T) {",
          "349:    runTest(t, true, func() {",
          "350:     got, err := CreateTracing(tc.opts)",
          "352:     if tc.wantError != \"\" && (err == nil || !strings.Contains(err.Error(), tc.wantError)) {",
          "353:      t.Fatalf(\"Test (%s): failed, expected err: %v, got: %v\", tc.desc, tc.wantError, err)",
          "354:     }",
          "356:     if tc.wantResult != nil {",
          "357:      if got == nil {",
          "358:       t.Fatalf(\"Test (%s): failed, expected result should not be nil\", tc.desc)",
          "359:      }",
          "362:      got.Provider.ConfigType = nil",
          "364:      if diff := cmp.Diff(tc.wantResult, got, protocmp.Transform()); diff != \"\" {",
          "365:       t.Errorf(\"CreateTracing() diff (-want +got):\\n%s\", diff)",
          "366:      }",
          "367:     }",
          "368:    })",
          "",
          "---------------"
        ],
        "src/go/util/xds_name.go||src/go/util/xds_name.go": [
          "File: src/go/util/xds_name.go -> src/go/util/xds_name.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: const (",
          "21:  Echo = \"envoy.filters.network.echo\"",
          "25:  TLSTransportSocket = \"envoy.transport_sockets.tls\"",
          "",
          "[Removed Lines]",
          "23:  HTTPConnectionManager = \"envoy.filters.network.http_connection_manager\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/env/platform/ports.go||tests/env/platform/ports.go": [
          "File: tests/env/platform/ports.go -> tests/env/platform/ports.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:  TestMethodOverrideBackendMethod",
          "101:  TestMethodOverrideScReport",
          "102:  TestMultiGrpcServices",
          "103:  TestPreflightRequestWithAllowCors",
          "104:  TestProxyHandleCorsSimpleRequestsBasic",
          "105:  TestProxyHandleCorsSimpleRequestsRegex",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:  TestOperationNameHeader",
          "",
          "---------------"
        ],
        "tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go||tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go": [
          "File: tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go -> tests/integration_test/generated_header_prefix_test/generated_header_prefix_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  }",
          "149:  for _, tc := range testData {",
          "150:   t.Run(tc.desc, func(t *testing.T) {",
          "153:    defer s.TearDown(t)",
          "154:    if err := s.Setup(tc.confArgs); err != nil {",
          "",
          "[Removed Lines]",
          "151:    s := env.NewTestEnv(platform.TestGeneratedHeaders, platform.EchoSidecar)",
          "",
          "[Added Lines]",
          "151:    s := env.NewTestEnv(platform.TestOperationNameHeader, platform.EchoSidecar)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ac66ea56122c6bad1f18a53fd834421adf9428f",
      "candidate_info": {
        "commit_hash": "0ac66ea56122c6bad1f18a53fd834421adf9428f",
        "repo": "GoogleCloudPlatform/esp-v2",
        "commit_url": "https://github.com/GoogleCloudPlatform/esp-v2/commit/0ac66ea56122c6bad1f18a53fd834421adf9428f",
        "files": [
          "src/go/bootstrap/static/bootstrap.go",
          "src/go/configgenerator/filter_generator.go",
          "src/go/configgenerator/filtergen/backend_auth.go",
          "src/go/configgenerator/filtergen/compressor.go",
          "src/go/configgenerator/filtergen/cors.go",
          "src/go/configgenerator/filtergen/filtergen.go",
          "src/go/configgenerator/filtergen/filtergen_test.go",
          "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "src/go/configgenerator/filtergen/grpc_transcoder.go",
          "src/go/configgenerator/filtergen/grpc_transcoder_test.go",
          "src/go/configgenerator/filtergen/grpc_web.go",
          "src/go/configgenerator/filtergen/header_sanitizer.go",
          "src/go/configgenerator/filtergen/health_check.go",
          "src/go/configgenerator/filtergen/jwt_authn.go",
          "src/go/configgenerator/filtergen/path_rewrite.go",
          "src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/filtergen/service_control_test.go",
          "src/go/configgenerator/filtergen/util.go",
          "src/go/configgenerator/listener_generator.go",
          "src/go/configgenerator/listener_generator_test.go",
          "src/go/configinfo/service_info.go",
          "src/go/configinfo/service_info_test.go",
          "src/go/configmanager/config_manager.go"
        ],
        "message": "refactor filtergen: final minor changes to use refactor internally (#823)\n\nChanges:\n\n1) Remove `FactoryParams` and instead have each `FilterGenerator` define its own params. SC v2 filter now has its own `ServiceControlOPFactoryParams`. We use currying via lambda to create a `FilterGeneratorOPFactory` that still takes in the extra params (similar to `absl::bind_front`).\n2) Split `NewGRPCTranscoderFilterGensFromOPConfig` into another function for ease of import internally. Also add a new `doChecks bool` param to skip sanity checks, as currently we skip these internally.\n3) Rename `GetDisabledSelectorsFromOPConfig()` to `GetHTTPBackendSelectorsFromOPConfig()`\n4) Split `MakeMethodRequirementsFromOPConfig()` into multiple functions for ease of import internally.\n5) Remove `ServiceInfo::getMethod()`. No need to error if method doesn't exist, just skip the selector. Needed internally for API filtering functionality. It is technically a behavior change, but it shouldn't matter in prod because API Compiler already does this validation.\n6) Ensure API names follow the same order as the service config.\n\nTesting done:\n- No change to generated configs\n- PR works internally",
        "before_after_code_files": [
          "src/go/bootstrap/static/bootstrap.go||src/go/bootstrap/static/bootstrap.go",
          "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
          "src/go/configgenerator/filtergen/backend_auth.go||src/go/configgenerator/filtergen/backend_auth.go",
          "src/go/configgenerator/filtergen/compressor.go||src/go/configgenerator/filtergen/compressor.go",
          "src/go/configgenerator/filtergen/cors.go||src/go/configgenerator/filtergen/cors.go",
          "src/go/configgenerator/filtergen/filtergen.go||src/go/configgenerator/filtergen/filtergen.go",
          "src/go/configgenerator/filtergen/filtergen_test.go||src/go/configgenerator/filtergen/filtergen_test.go",
          "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go||src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "src/go/configgenerator/filtergen/grpc_transcoder.go||src/go/configgenerator/filtergen/grpc_transcoder.go",
          "src/go/configgenerator/filtergen/grpc_transcoder_test.go||src/go/configgenerator/filtergen/grpc_transcoder_test.go",
          "src/go/configgenerator/filtergen/grpc_web.go||src/go/configgenerator/filtergen/grpc_web.go",
          "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
          "src/go/configgenerator/filtergen/health_check.go||src/go/configgenerator/filtergen/health_check.go",
          "src/go/configgenerator/filtergen/jwt_authn.go||src/go/configgenerator/filtergen/jwt_authn.go",
          "src/go/configgenerator/filtergen/path_rewrite.go||src/go/configgenerator/filtergen/path_rewrite.go",
          "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go",
          "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go",
          "src/go/configgenerator/filtergen/service_control_test.go||src/go/configgenerator/filtergen/service_control_test.go",
          "src/go/configgenerator/filtergen/util.go||src/go/configgenerator/filtergen/util.go",
          "src/go/configgenerator/listener_generator.go||src/go/configgenerator/listener_generator.go",
          "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go",
          "src/go/configinfo/service_info.go||src/go/configinfo/service_info.go",
          "src/go/configinfo/service_info_test.go||src/go/configinfo/service_info_test.go",
          "src/go/configmanager/config_manager.go||src/go/configmanager/config_manager.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
            "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
            "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go"
          ],
          "candidate": [
            "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go",
            "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go",
            "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go"
          ]
        }
      },
      "candidate_diff": {
        "src/go/bootstrap/static/bootstrap.go||src/go/bootstrap/static/bootstrap.go": [
          "File: src/go/bootstrap/static/bootstrap.go -> src/go/bootstrap/static/bootstrap.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:  if err != nil {",
          "52:   return nil, err",
          "53:  }",
          "55:  if err != nil {",
          "56:   return nil, err",
          "57:  }",
          "",
          "[Removed Lines]",
          "54:  listeners, err := gen.MakeListeners(serviceInfo, filtergen.FactoryParams{})",
          "",
          "[Added Lines]",
          "54:  listeners, err := gen.MakeListeners(serviceInfo, filtergen.ServiceControlOPFactoryParams{})",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filter_generator.go||src/go/configgenerator/filter_generator.go": [
          "File: src/go/configgenerator/filter_generator.go -> src/go/configgenerator/filter_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "24: )",
          "27:  return []filtergen.FilterGeneratorOPFactory{",
          "28:   filtergen.NewHeaderSanitizerFilterGensFromOPConfig,",
          "29:   filtergen.NewCORSFilterGensFromOPConfig,",
          "",
          "[Removed Lines]",
          "26: func GetESPv2FilterGenFactories() []filtergen.FilterGeneratorOPFactory {",
          "",
          "[Added Lines]",
          "26: func GetESPv2FilterGenFactories(scParams filtergen.ServiceControlOPFactoryParams) []filtergen.FilterGeneratorOPFactory {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   filtergen.NewHealthCheckFilterGensFromOPConfig,",
          "34:   filtergen.NewCompressorFilterGensFromOPConfig,",
          "35:   filtergen.NewJwtAuthnFilterGensFromOPConfig,",
          "",
          "[Removed Lines]",
          "36:   filtergen.NewServiceControlFilterGensFromOPConfig,",
          "",
          "[Added Lines]",
          "36:   func(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]filtergen.FilterGenerator, error) {",
          "37:    return filtergen.NewServiceControlFilterGensFromOPConfig(serviceConfig, opts, scParams)",
          "38:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:  var gens []filtergen.FilterGenerator",
          "59:  for _, factory := range factories {",
          "61:   if err != nil {",
          "62:    return nil, fmt.Errorf(\"fail to run FilterGeneratorOPFactory: %v\", err)",
          "63:   }",
          "",
          "[Removed Lines]",
          "57: func NewFilterGeneratorsFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, factories []filtergen.FilterGeneratorOPFactory, params filtergen.FactoryParams) ([]filtergen.FilterGenerator, error) {",
          "60:   generator, err := factory(serviceConfig, opts, params)",
          "",
          "[Added Lines]",
          "59: func NewFilterGeneratorsFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, factories []filtergen.FilterGeneratorOPFactory) ([]filtergen.FilterGenerator, error) {",
          "62:   generator, err := factory(serviceConfig, opts)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/backend_auth.go||src/go/configgenerator/filtergen/backend_auth.go": [
          "File: src/go/configgenerator/filtergen/backend_auth.go -> src/go/configgenerator/filtergen/backend_auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  audienceBySelector, uniqueAudiences, err := GetJWTAudiencesBySelectorFromOPConfig(serviceConfig, opts)",
          "61:  if err != nil {",
          "62:   return nil, err",
          "",
          "[Removed Lines]",
          "59: func NewBackendAuthFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "59: func NewBackendAuthFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/compressor.go||src/go/configgenerator/filtergen/compressor.go": [
          "File: src/go/configgenerator/filtergen/compressor.go -> src/go/configgenerator/filtergen/compressor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  if !opts.EnableResponseCompression {",
          "58:   glog.Info(\"Not adding compressor filter gens because the feature is disabled by option.\")",
          "59:   return nil, nil",
          "",
          "[Removed Lines]",
          "56: func NewCompressorFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "56: func NewCompressorFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/cors.go||src/go/configgenerator/filtergen/cors.go": [
          "File: src/go/configgenerator/filtergen/cors.go -> src/go/configgenerator/filtergen/cors.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  if opts.CorsPreset != \"basic\" && opts.CorsPreset != \"cors_with_regex\" {",
          "37:   glog.Infof(\"Not adding CORS filter gen because the feature is disabled by option, option is currently %q\", opts.CorsPreset)",
          "38:   return nil, nil",
          "",
          "[Removed Lines]",
          "35: func NewCORSFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "35: func NewCORSFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/filtergen.go||src/go/configgenerator/filtergen/filtergen.go": [
          "File: src/go/configgenerator/filtergen/filtergen.go -> src/go/configgenerator/filtergen/filtergen.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/options\"",
          "22:  \"github.com/GoogleCloudPlatform/esp-v2/src/go/util/httppattern\"",
          "23:  servicepb \"google.golang.org/genproto/googleapis/api/serviceconfig\"",
          "24:  \"google.golang.org/protobuf/proto\"",
          "",
          "[Removed Lines]",
          "21:  scpb \"github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v12/http/service_control\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  GenPerRouteConfig(string, *httppattern.Pattern) (proto.Message, error)",
          "48: }",
          "",
          "[Removed Lines]",
          "56: type FactoryParams struct {",
          "57:  GCPAttributes *scpb.GcpAttributes",
          "58: }",
          "65: type FilterGeneratorOPFactory func(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error)",
          "",
          "[Added Lines]",
          "54: type FilterGeneratorOPFactory func(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/filtergen_test.go||src/go/configgenerator/filtergen/filtergen_test.go": [
          "File: src/go/configgenerator/filtergen/filtergen_test.go -> src/go/configgenerator/filtergen/filtergen_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  OptsMergeBehavior func(*mergo.Config)",
          "",
          "[Removed Lines]",
          "50:  FactoryParamsIn filtergen.FactoryParams",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:    t.Fatalf(\"Merge() of test opts into default opts got err: %v\", err)",
          "69:   }",
          "72:   if err != nil {",
          "73:    t.Fatalf(\"NewXYZFilterGensFromOPConfig() got error: %v\", err)",
          "74:   }",
          "",
          "[Removed Lines]",
          "71:   gotGenerators, err := factory(tc.ServiceConfigIn, opts, tc.FactoryParamsIn)",
          "",
          "[Added Lines]",
          "68:   gotGenerators, err := factory(tc.ServiceConfigIn, opts)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:  OptsIn options.ConfigGeneratorOptions",
          "119:  WantFactoryError string",
          "",
          "[Removed Lines]",
          "115:  FactoryParamsIn filtergen.FactoryParams",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:    t.Fatalf(\"Merge() of test opts into default opts got err: %v\", err)",
          "129:   }",
          "132:   if err == nil {",
          "133:    t.Fatalf(\"NewXYZFilterGensFromOPConfig() got no error, want error\")",
          "134:   }",
          "",
          "[Removed Lines]",
          "131:   _, err := factory(tc.ServiceConfigIn, opts, tc.FactoryParamsIn)",
          "",
          "[Added Lines]",
          "125:   _, err := factory(tc.ServiceConfigIn, opts)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:  OptsIn options.ConfigGeneratorOptions",
          "157:  WantGenErrors []string",
          "158: }",
          "",
          "[Removed Lines]",
          "154:  FactoryParamsIn filtergen.FactoryParams",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:    t.Fatalf(\"Merge() of test opts into default opts got err: %v\", err)",
          "167:   }",
          "170:   if err != nil {",
          "171:    t.Fatalf(\"NewXYZFilterGensFromOPConfig() got error: %v\", err)",
          "172:   }",
          "",
          "[Removed Lines]",
          "169:   gotGenerators, err := factory(tc.ServiceConfigIn, opts, tc.FactoryParamsIn)",
          "",
          "[Added Lines]",
          "160:   gotGenerators, err := factory(tc.ServiceConfigIn, opts)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_metadata_scrubber.go||src/go/configgenerator/filtergen/grpc_metadata_scrubber.go": [
          "File: src/go/configgenerator/filtergen/grpc_metadata_scrubber.go -> src/go/configgenerator/filtergen/grpc_metadata_scrubber.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  if !opts.EnableGrpcForHttp1 {",
          "37:   glog.Info(\"Not adding gRPC metadata scrubber filter gen because the feature is disabled by option.\")",
          "38:   return nil, nil",
          "",
          "[Removed Lines]",
          "35: func NewGRPCMetadataScrubberFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "35: func NewGRPCMetadataScrubberFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_transcoder.go||src/go/configgenerator/filtergen/grpc_transcoder.go": [
          "File: src/go/configgenerator/filtergen/grpc_transcoder.go -> src/go/configgenerator/filtergen/grpc_transcoder.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   glog.Warningf(\"Local http backend address is set to %q; skip transcoder filter completely.\", opts.LocalHTTPBackendAddress)",
          "68:   return nil, nil",
          "69:  }",
          "",
          "[Removed Lines]",
          "65: func NewGRPCTranscoderFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "66:  if opts.LocalHTTPBackendAddress != \"\" {",
          "",
          "[Added Lines]",
          "65: func NewGRPCTranscoderFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "66:  grpcGen, err := NewGRPCTranscoderFilterGenFromOPConfig(serviceConfig, opts, true)",
          "67:  if err != nil {",
          "68:   return nil, err",
          "69:  }",
          "70:  if grpcGen == nil {",
          "71:   return nil, nil",
          "72:  }",
          "74:  return []FilterGenerator{",
          "75:   grpcGen,",
          "76:  }, nil",
          "77: }",
          "83: func NewGRPCTranscoderFilterGenFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions, maybeSkipFilter bool) (*GRPCTranscoderGenerator, error) {",
          "84:  if maybeSkipFilter && opts.LocalHTTPBackendAddress != \"\" {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:  if err != nil {",
          "73:   return nil, err",
          "74:  }",
          "76:   glog.Infof(\"gRPC support is NOT required, skip transcoder filter completely.\")",
          "77:   return nil, nil",
          "78:  }",
          "",
          "[Removed Lines]",
          "75:  if !isGRPCSupportRequired {",
          "",
          "[Added Lines]",
          "93:  if maybeSkipFilter && !isGRPCSupportRequired {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   glog.Error(\"Unable to setup gRPC-JSON transcoding because no proto descriptor was found in the service config. \" +",
          "103:    \"Please use version 2020-01-29 (or later) of the `gcloud_build_image` script. \" +",
          "105:   return nil, nil",
          "106:  }",
          "",
          "[Removed Lines]",
          "104:    \"https://github.com/GoogleCloudPlatform/esp-v2/blob/master/docker/serverless/gcloud_build_image\")",
          "",
          "[Added Lines]",
          "122:    \"https://google3/third_party/espv2/source/v12/blob/master/docker/serverless/gcloud_build_image/gcloud_build_image\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:   return nil, err",
          "116:  }",
          "119:  if err != nil {",
          "120:   return nil, err",
          "121:  }",
          "123:  serviceNames := GetAPINamesListFromOPConfig(serviceConfig, opts)",
          "143:   },",
          "144:  }, nil",
          "145: }",
          "",
          "[Removed Lines]",
          "118:  disabledSelectors, err := GetDisabledSelectorsFromOPConfig(serviceConfig, opts)",
          "125:  return []FilterGenerator{",
          "126:   &GRPCTranscoderGenerator{",
          "127:    ProtoDescriptorBin:                 descriptorBin,",
          "128:    ServiceNames:                       serviceNames,",
          "129:    IgnoredQueryParams:                 ignoredQueryParams,",
          "130:    DisabledSelectors:                  disabledSelectors,",
          "131:    IgnoreUnknownQueryParameters:       opts.TranscodingIgnoreUnknownQueryParameters,",
          "132:    QueryParametersDisableUnescapePlus: opts.TranscodingQueryParametersDisableUnescapePlus,",
          "133:    MatchUnregisteredCustomVerb:        opts.TranscodingMatchUnregisteredCustomVerb,",
          "134:    CaseInsensitiveEnumParsing:         opts.TranscodingCaseInsensitiveEnumParsing,",
          "135:    StrictRequestValidation:            opts.TranscodingStrictRequestValidation,",
          "136:    RejectCollision:                    opts.TranscodingRejectCollision,",
          "137:    PrintOptions: &transcoderpb.GrpcJsonTranscoder_PrintOptions{",
          "138:     AlwaysPrintPrimitiveFields: opts.TranscodingAlwaysPrintPrimitiveFields,",
          "139:     AlwaysPrintEnumsAsInts:     opts.TranscodingAlwaysPrintEnumsAsInts,",
          "140:     PreserveProtoFieldNames:    opts.TranscodingPreserveProtoFieldNames,",
          "141:     StreamNewlineDelimited:     opts.TranscodingStreamNewLineDelimited,",
          "142:    },",
          "",
          "[Added Lines]",
          "136:  disabledSelectors, err := GetHTTPBackendSelectorsFromOPConfig(serviceConfig, opts)",
          "143:  return &GRPCTranscoderGenerator{",
          "144:   ProtoDescriptorBin:                 descriptorBin,",
          "145:   ServiceNames:                       serviceNames,",
          "146:   IgnoredQueryParams:                 ignoredQueryParams,",
          "147:   DisabledSelectors:                  disabledSelectors,",
          "148:   IgnoreUnknownQueryParameters:       opts.TranscodingIgnoreUnknownQueryParameters,",
          "149:   QueryParametersDisableUnescapePlus: opts.TranscodingQueryParametersDisableUnescapePlus,",
          "150:   MatchUnregisteredCustomVerb:        opts.TranscodingMatchUnregisteredCustomVerb,",
          "151:   CaseInsensitiveEnumParsing:         opts.TranscodingCaseInsensitiveEnumParsing,",
          "152:   StrictRequestValidation:            opts.TranscodingStrictRequestValidation,",
          "153:   RejectCollision:                    opts.TranscodingRejectCollision,",
          "154:   PrintOptions: &transcoderpb.GrpcJsonTranscoder_PrintOptions{",
          "155:    AlwaysPrintPrimitiveFields: opts.TranscodingAlwaysPrintPrimitiveFields,",
          "156:    AlwaysPrintEnumsAsInts:     opts.TranscodingAlwaysPrintEnumsAsInts,",
          "157:    PreserveProtoFieldNames:    opts.TranscodingPreserveProtoFieldNames,",
          "158:    StreamNewlineDelimited:     opts.TranscodingStreamNewLineDelimited,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:  return ignoredQueryParams, nil",
          "358: }",
          "364:  disabledSelectors := make(map[string]bool)",
          "365:  if opts.EnableBackendAddressOverride {",
          "366:   glog.Infof(\"Skipping create grpc transcoding disabled selectors because backend address override is enabled.\")",
          "",
          "[Removed Lines]",
          "363: func GetDisabledSelectorsFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) (map[string]bool, error) {",
          "",
          "[Added Lines]",
          "379: func GetHTTPBackendSelectorsFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) (map[string]bool, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_transcoder_test.go||src/go/configgenerator/filtergen/grpc_transcoder_test.go": [
          "File: src/go/configgenerator/filtergen/grpc_transcoder_test.go -> src/go/configgenerator/filtergen/grpc_transcoder_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1316:  for _, tc := range testdata {",
          "1317:   t.Run(tc.desc, func(t *testing.T) {",
          "1319:    if err != nil {",
          "1321:    }",
          "1323:    if diff := cmp.Diff(tc.wantDisabledSelectors, gotDisabledSelectors); diff != \"\" {",
          "",
          "[Removed Lines]",
          "1318:    gotDisabledSelectors, err := filtergen.GetDisabledSelectorsFromOPConfig(tc.serviceConfigIn, tc.optsIn)",
          "1320:     t.Fatalf(\"GetDisabledSelectorsFromOPConfig() got unexpected error: %v\", err)",
          "",
          "[Added Lines]",
          "1318:    gotDisabledSelectors, err := filtergen.GetHTTPBackendSelectorsFromOPConfig(tc.serviceConfigIn, tc.optsIn)",
          "1320:     t.Fatalf(\"GetHTTPBackendSelectorsFromOPConfig() got unexpected error: %v\", err)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/grpc_web.go||src/go/configgenerator/filtergen/grpc_web.go": [
          "File: src/go/configgenerator/filtergen/grpc_web.go -> src/go/configgenerator/filtergen/grpc_web.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  isGRPCSupportRequired, err := IsGRPCSupportRequiredForOPConfig(serviceConfig, opts)",
          "37:  if err != nil {",
          "38:   return nil, err",
          "",
          "[Removed Lines]",
          "35: func NewGRPCWebFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "35: func NewGRPCWebFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/header_sanitizer.go||src/go/configgenerator/filtergen/header_sanitizer.go": [
          "File: src/go/configgenerator/filtergen/header_sanitizer.go -> src/go/configgenerator/filtergen/header_sanitizer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  return []FilterGenerator{",
          "36:   &HeaderSanitizerGenerator{},",
          "37:  }, nil",
          "",
          "[Removed Lines]",
          "34: func NewHeaderSanitizerFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "34: func NewHeaderSanitizerFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/health_check.go||src/go/configgenerator/filtergen/health_check.go": [
          "File: src/go/configgenerator/filtergen/health_check.go -> src/go/configgenerator/filtergen/health_check.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  if opts.Healthz == \"\" {",
          "49:   glog.Info(\"Not adding health check filter gen because healthz path is not specified.\")",
          "50:   return nil, nil",
          "",
          "[Removed Lines]",
          "47: func NewHealthCheckFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "47: func NewHealthCheckFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/jwt_authn.go||src/go/configgenerator/filtergen/jwt_authn.go": [
          "File: src/go/configgenerator/filtergen/jwt_authn.go -> src/go/configgenerator/filtergen/jwt_authn.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  if opts.SkipJwtAuthnFilter {",
          "76:   glog.Infof(\"Not adding JWT authn filter gen because the feature is disabled by option.\")",
          "77:   return nil, nil",
          "",
          "[Removed Lines]",
          "74: func NewJwtAuthnFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "74: func NewJwtAuthnFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/path_rewrite.go||src/go/configgenerator/filtergen/path_rewrite.go": [
          "File: src/go/configgenerator/filtergen/path_rewrite.go -> src/go/configgenerator/filtergen/path_rewrite.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  info, err := GenTranslationInfoFromOPConfig(serviceConfig, opts)",
          "51:  if err != nil {",
          "52:   return nil, err",
          "",
          "[Removed Lines]",
          "49: func NewPathRewriteFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "49: func NewPathRewriteFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/router.go||src/go/configgenerator/filtergen/router.go": [
          "File: src/go/configgenerator/filtergen/router.go -> src/go/configgenerator/filtergen/router.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  return []FilterGenerator{",
          "39:   &RouterGenerator{",
          "40:    SuppressEnvoyHeaders: opts.SuppressEnvoyHeaders,",
          "",
          "[Removed Lines]",
          "37: func NewRouterFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "37: func NewRouterFilterGensFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]FilterGenerator, error) {",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/service_control.go||src/go/configgenerator/filtergen/service_control.go": [
          "File: src/go/configgenerator/filtergen/service_control.go -> src/go/configgenerator/filtergen/service_control.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  GCPAttributes      *scpb.GcpAttributes",
          "80: }",
          "85:  if opts.SkipServiceControlFilter {",
          "86:   glog.Infof(\"Not adding service control (v1) filter gen because the feature is disabled by option.\")",
          "87:   return nil, nil",
          "",
          "[Removed Lines]",
          "84: func NewServiceControlFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions, params FactoryParams) ([]FilterGenerator, error) {",
          "",
          "[Added Lines]",
          "84: type ServiceControlOPFactoryParams struct {",
          "85:  GCPAttributes *scpb.GcpAttributes",
          "86: }",
          "90: func NewServiceControlFilterGensFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions, params ServiceControlOPFactoryParams) ([]FilterGenerator, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319: func MakeMethodRequirementsFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) ([]*scpb.Requirement, error) {",
          "320:  var requirements []*scpb.Requirement",
          "322:  metricCostsBySelector := GetQuotaMetricCostsFromOPConfig(serviceConfig, opts)",
          "323:  usageRulesBySelector := GetUsageRulesBySelectorFromOPConfig(serviceConfig, opts)",
          "324:  apiKeySystemParamsBySelector := GetAPIKeySystemParametersBySelectorFromOPConfig(serviceConfig, opts)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:  quotaAndUsageReqs, err := GetQuotaAndUsageRequirementsFromOPConfig(serviceConfig, opts)",
          "329:  if err != nil {",
          "330:   return nil, err",
          "331:  }",
          "332:  for _, quotaAndUsageReq := range quotaAndUsageReqs {",
          "333:   requirements = append(requirements, quotaAndUsageReq)",
          "334:  }",
          "336:  corsRequirements := GetAutoGeneratedCORSRequirementsFromOPConfig(serviceConfig, opts)",
          "337:  for _, corsRequirement := range corsRequirements {",
          "338:   requirements = append(requirements, corsRequirement)",
          "339:  }",
          "341:  healthzRequirement := GetHealthzRequirementFromOPConfig(serviceConfig, opts)",
          "342:  if healthzRequirement != nil {",
          "343:   requirements = append(requirements, healthzRequirement)",
          "344:  }",
          "346:  return requirements, nil",
          "347: }",
          "349: func GetQuotaAndUsageRequirementsFromOPConfig(serviceConfig *confpb.Service, opts options.ConfigGeneratorOptions) ([]*scpb.Requirement, error) {",
          "350:  var requirements []*scpb.Requirement",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "364:   }",
          "365:  }",
          "377:  return requirements, nil",
          "378: }",
          "",
          "[Removed Lines]",
          "367:  corsRequirements := GetAutoGeneratedCORSRequirementsFromOPConfig(serviceConfig, opts)",
          "368:  for _, corsRequirement := range corsRequirements {",
          "369:   requirements = append(requirements, corsRequirement)",
          "370:  }",
          "372:  healthzRequirement := GetHealthzRequirementFromOPConfig(serviceConfig, opts)",
          "373:  if healthzRequirement != nil {",
          "374:   requirements = append(requirements, healthzRequirement)",
          "375:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/service_control_test.go||src/go/configgenerator/filtergen/service_control_test.go": [
          "File: src/go/configgenerator/filtergen/service_control_test.go -> src/go/configgenerator/filtergen/service_control_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: )",
          "35: func TestNewServiceControlFilterGensFromOPConfig_GenConfig(t *testing.T) {",
          "37:   {",
          "44:     },",
          "47: {",
          "48:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "49:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "36:  testData := []SuccessOPTestCase{",
          "38:    Desc: \"No methods, get access token from imds\",",
          "39:    ServiceConfigIn: &servicepb.Service{",
          "40:     Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "41:     Id:   \"2019-03-02r0\",",
          "42:     Control: &servicepb.Control{",
          "43:      Environment: \"servicecontrol.googleapis.com\",",
          "45:    },",
          "46:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "36:  testData := []struct {",
          "37:   SuccessOPTestCase",
          "38:   FactoryParamsIn filtergen.ServiceControlOPFactoryParams",
          "39:  }{",
          "41:    SuccessOPTestCase: SuccessOPTestCase{",
          "42:     Desc: \"No methods, get access token from imds\",",
          "43:     ServiceConfigIn: &servicepb.Service{",
          "44:      Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "45:      Id:   \"2019-03-02r0\",",
          "46:      Control: &servicepb.Control{",
          "47:       Environment: \"servicecontrol.googleapis.com\",",
          "48:      },",
          "50:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:    }",
          "78: }",
          "79: `,",
          "80:    },",
          "81:   },",
          "82:   {",
          "89:     },",
          "96:      },",
          "97:     },",
          "100: {",
          "101:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "102:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "83:    Desc: \"No methods, get access token from iam\",",
          "84:    ServiceConfigIn: &servicepb.Service{",
          "85:     Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "86:     Id:   \"2019-03-02r0\",",
          "87:     Control: &servicepb.Control{",
          "88:      Environment: \"servicecontrol.googleapis.com\",",
          "90:    },",
          "91:    OptsIn: options.ConfigGeneratorOptions{",
          "92:     CommonOptions: options.CommonOptions{",
          "93:      ServiceControlCredentials: &options.IAMCredentialsOptions{",
          "94:       ServiceAccountEmail: \"ServiceControl@iam.com\",",
          "95:       Delegates:           []string{\"delegate_foo\", \"delegate_bar\"},",
          "98:    },",
          "99:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "84:     },",
          "88:    SuccessOPTestCase: SuccessOPTestCase{",
          "89:     Desc: \"No methods, get access token from iam\",",
          "90:     ServiceConfigIn: &servicepb.Service{",
          "91:      Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "92:      Id:   \"2019-03-02r0\",",
          "93:      Control: &servicepb.Control{",
          "94:       Environment: \"servicecontrol.googleapis.com\",",
          "95:      },",
          "97:     OptsIn: options.ConfigGeneratorOptions{",
          "98:      CommonOptions: options.CommonOptions{",
          "99:       ServiceControlCredentials: &options.IAMCredentialsOptions{",
          "100:        ServiceAccountEmail: \"ServiceControl@iam.com\",",
          "101:        Delegates:           []string{\"delegate_foo\", \"delegate_bar\"},",
          "102:       },",
          "105:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:    }",
          "145: }",
          "146: `,",
          "147:    },",
          "148:   },",
          "149:   {",
          "156:     },",
          "162: {",
          "163:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "164:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "150:    Desc: \"No methods, get access token from the token agent server\",",
          "151:    ServiceConfigIn: &servicepb.Service{",
          "152:     Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "153:     Id:   \"2019-03-02r0\",",
          "154:     Control: &servicepb.Control{",
          "155:      Environment: \"servicecontrol.googleapis.com\",",
          "157:    },",
          "158:    OptsIn: options.ConfigGeneratorOptions{",
          "159:     ServiceAccountKey: \"this-is-sa-cred\",",
          "160:    },",
          "161:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "153:     },",
          "157:    SuccessOPTestCase: SuccessOPTestCase{",
          "158:     Desc: \"No methods, get access token from the token agent server\",",
          "159:     ServiceConfigIn: &servicepb.Service{",
          "160:      Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "161:      Id:   \"2019-03-02r0\",",
          "162:      Control: &servicepb.Control{",
          "163:       Environment: \"servicecontrol.googleapis.com\",",
          "164:      },",
          "166:     OptsIn: options.ConfigGeneratorOptions{",
          "167:      ServiceAccountKey: \"this-is-sa-cred\",",
          "168:     },",
          "169:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:    }",
          "193: }",
          "194: `,",
          "195:    },",
          "196:   },",
          "197:   {",
          "225:     GCPAttributes: &scpb.GcpAttributes{",
          "226:      ProjectId: \"cloudesf-tenant-project\",",
          "227:      Zone:      \"us-central1c\",",
          "228:      Platform:  \"Cloud Run\",",
          "229:     },",
          "230:    },",
          "232: {",
          "233:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "234:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "198:    Desc: \"No methods, test various options\",",
          "199:    ServiceConfigIn: &servicepb.Service{",
          "200:     Name:              \"test-bookstore.endpoints.project123.cloud.goog\",",
          "201:     Id:                \"2023-05-05r1\",",
          "202:     ProducerProjectId: \"cloudesf-testing\",",
          "203:     Control: &servicepb.Control{",
          "204:      Environment: \"staging-servicecontrol.googleapis.com\",",
          "205:     },",
          "206:    },",
          "207:    OptsIn: options.ConfigGeneratorOptions{",
          "208:     CommonOptions: options.CommonOptions{",
          "209:      TracingProjectId:      \"cloud-api-proxy-testing\",",
          "210:      HttpRequestTimeout:    2 * time.Minute,",
          "211:      GeneratedHeaderPrefix: \"X-Test-Header-\",",
          "212:     },",
          "213:     DependencyErrorBehavior:       commonpb.DependencyErrorBehavior_ALWAYS_INIT.String(),",
          "214:     ClientIPFromForwardedHeader:   true,",
          "215:     LogRequestHeaders:             \":method\",",
          "216:     LogResponseHeaders:            \":status\",",
          "217:     LogJwtPayloads:                \"my-payload\",",
          "218:     MinStreamReportIntervalMs:     8000,",
          "219:     ComputePlatformOverride:       \"ESPv2(Cloud Run)\",",
          "220:     ScCheckTimeoutMs:              5020,",
          "221:     ScQuotaRetries:                8,",
          "222:     ServiceControlNetworkFailOpen: false,",
          "223:    },",
          "224:    FactoryParamsIn: filtergen.FactoryParams{",
          "231:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "203:     },",
          "207:    FactoryParamsIn: filtergen.ServiceControlOPFactoryParams{",
          "214:    SuccessOPTestCase: SuccessOPTestCase{",
          "215:     Desc: \"No methods, test various options\",",
          "216:     ServiceConfigIn: &servicepb.Service{",
          "217:      Name:              \"test-bookstore.endpoints.project123.cloud.goog\",",
          "218:      Id:                \"2023-05-05r1\",",
          "219:      ProducerProjectId: \"cloudesf-testing\",",
          "220:      Control: &servicepb.Control{",
          "221:       Environment: \"staging-servicecontrol.googleapis.com\",",
          "222:      },",
          "223:     },",
          "224:     OptsIn: options.ConfigGeneratorOptions{",
          "225:      CommonOptions: options.CommonOptions{",
          "226:       TracingProjectId:      \"cloud-api-proxy-testing\",",
          "227:       HttpRequestTimeout:    2 * time.Minute,",
          "228:       GeneratedHeaderPrefix: \"X-Test-Header-\",",
          "229:      },",
          "230:      DependencyErrorBehavior:       commonpb.DependencyErrorBehavior_ALWAYS_INIT.String(),",
          "231:      ClientIPFromForwardedHeader:   true,",
          "232:      LogRequestHeaders:             \":method\",",
          "233:      LogResponseHeaders:            \":status\",",
          "234:      LogJwtPayloads:                \"my-payload\",",
          "235:      MinStreamReportIntervalMs:     8000,",
          "236:      ComputePlatformOverride:       \"ESPv2(Cloud Run)\",",
          "237:      ScCheckTimeoutMs:              5020,",
          "238:      ScQuotaRetries:                8,",
          "239:      ServiceControlNetworkFailOpen: false,",
          "240:     },",
          "241:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "282:    }",
          "283: }",
          "284: `,",
          "285:    },",
          "286:   },",
          "287:   {",
          "294:     },",
          "300: {",
          "301:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "302:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "288:    Desc: \"No methods, gRPC backend\",",
          "289:    ServiceConfigIn: &servicepb.Service{",
          "290:     Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "291:     Id:   \"2019-03-02r0\",",
          "292:     Control: &servicepb.Control{",
          "293:      Environment: \"servicecontrol.googleapis.com\",",
          "295:    },",
          "296:    OptsIn: options.ConfigGeneratorOptions{",
          "297:     BackendAddress: \"grpc://127.0.0.0:80\",",
          "298:    },",
          "299:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "295:     },",
          "299:    SuccessOPTestCase: SuccessOPTestCase{",
          "300:     Desc: \"No methods, gRPC backend\",",
          "301:     ServiceConfigIn: &servicepb.Service{",
          "302:      Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "303:      Id:   \"2019-03-02r0\",",
          "304:      Control: &servicepb.Control{",
          "305:       Environment: \"servicecontrol.googleapis.com\",",
          "306:      },",
          "308:     OptsIn: options.ConfigGeneratorOptions{",
          "309:      BackendAddress: \"grpc://127.0.0.0:80\",",
          "310:     },",
          "311:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "330:    }",
          "331: }",
          "332: `,",
          "333:    },",
          "334:   },",
          "335:   {",
          "346:      },",
          "356:      },",
          "360:       {",
          "362:       },",
          "363:      },",
          "367:       {",
          "369:       },",
          "370:      },",
          "371:     },",
          "374: {",
          "375:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "376:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "336:    Desc: \"No methods, copy subset of the service config\",",
          "337:    ServiceConfigIn: &servicepb.Service{",
          "338:     Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "339:     Id:   \"2019-03-02r0\",",
          "340:     Control: &servicepb.Control{",
          "341:      Environment: \"servicecontrol.googleapis.com\",",
          "342:     },",
          "343:     Logs: []*servicepb.LogDescriptor{",
          "344:      {",
          "345:       Name: \"test-logs-1\",",
          "347:     },",
          "348:     Metrics: []*metricpb.MetricDescriptor{",
          "349:      {",
          "350:       Name: \"test-metrics-1\",",
          "351:      },",
          "352:     },",
          "353:     MonitoredResources: []*monitoredrespb.MonitoredResourceDescriptor{",
          "354:      {",
          "355:       Name: \"test-monitored-resources-1\",",
          "357:     },",
          "358:     Monitoring: &servicepb.Monitoring{",
          "359:      ProducerDestinations: []*servicepb.Monitoring_MonitoringDestination{",
          "361:        MonitoredResource: \"test-producer-dest-1\",",
          "364:     },",
          "365:     Logging: &servicepb.Logging{",
          "366:      ProducerDestinations: []*servicepb.Logging_LoggingDestination{",
          "368:        MonitoredResource: \"test-producer-dest-2\",",
          "372:    },",
          "373:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "345:     },",
          "349:    SuccessOPTestCase: SuccessOPTestCase{",
          "350:     Desc: \"No methods, copy subset of the service config\",",
          "351:     ServiceConfigIn: &servicepb.Service{",
          "352:      Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "353:      Id:   \"2019-03-02r0\",",
          "354:      Control: &servicepb.Control{",
          "355:       Environment: \"servicecontrol.googleapis.com\",",
          "357:      Logs: []*servicepb.LogDescriptor{",
          "358:       {",
          "359:        Name: \"test-logs-1\",",
          "360:       },",
          "362:      Metrics: []*metricpb.MetricDescriptor{",
          "364:        Name: \"test-metrics-1\",",
          "367:      MonitoredResources: []*monitoredrespb.MonitoredResourceDescriptor{",
          "369:        Name: \"test-monitored-resources-1\",",
          "370:       },",
          "371:      },",
          "372:      Monitoring: &servicepb.Monitoring{",
          "373:       ProducerDestinations: []*servicepb.Monitoring_MonitoringDestination{",
          "374:        {",
          "375:         MonitoredResource: \"test-producer-dest-1\",",
          "376:        },",
          "377:       },",
          "378:      },",
          "379:      Logging: &servicepb.Logging{",
          "380:       ProducerDestinations: []*servicepb.Logging_LoggingDestination{",
          "381:        {",
          "382:         MonitoredResource: \"test-producer-dest-2\",",
          "383:        },",
          "387:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "432:    }",
          "433: }",
          "434: `,",
          "435:    },",
          "436:   },",
          "437:   {",
          "455:        },",
          "456:       },",
          "465:        },",
          "466:       },",
          "467:      },",
          "476:        },",
          "477:       },",
          "478:      },",
          "479:     },",
          "482: {",
          "483:    \"name\":\"com.google.espv2.filters.http.service_control\",",
          "484:    \"typedConfig\":{",
          "",
          "[Removed Lines]",
          "438:    Desc: \"Success with some method requirements\",",
          "439:    ServiceConfigIn: &servicepb.Service{",
          "440:     Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "441:     Id:   \"2019-03-02r0\",",
          "442:     Control: &servicepb.Control{",
          "443:      Environment: \"servicecontrol.googleapis.com\",",
          "444:     },",
          "445:     Apis: []*apipb.Api{",
          "446:      {",
          "447:       Name:    \"google.library.Bookstore\",",
          "448:       Version: \"2.0.0\",",
          "449:       Methods: []*apipb.Method{",
          "450:        {",
          "451:         Name: \"GetShelves\",",
          "452:        },",
          "453:        {",
          "454:         Name: \"GetBooks\",",
          "457:      },",
          "458:      {",
          "460:       Name:    \"google.discovery\",",
          "461:       Version: \"1.0.0\",",
          "462:       Methods: []*apipb.Method{",
          "463:        {",
          "464:         Name: \"GetDiscoveryRest\",",
          "468:     },",
          "469:     Quota: &servicepb.Quota{",
          "470:      MetricRules: []*servicepb.MetricRule{",
          "471:       {",
          "472:        Selector: \"google.library.Bookstore.GetBooks\",",
          "473:        MetricCosts: map[string]int64{",
          "474:         \"metric_a\": 2,",
          "475:         \"metric_b\": 1,",
          "480:    },",
          "481:    WantFilterConfigs: []string{`",
          "",
          "[Added Lines]",
          "449:     },",
          "453:    SuccessOPTestCase: SuccessOPTestCase{",
          "454:     Desc: \"Success with some method requirements\",",
          "455:     ServiceConfigIn: &servicepb.Service{",
          "456:      Name: \"bookstore.endpoints.project123.cloud.goog\",",
          "457:      Id:   \"2019-03-02r0\",",
          "458:      Control: &servicepb.Control{",
          "459:       Environment: \"servicecontrol.googleapis.com\",",
          "460:      },",
          "461:      Apis: []*apipb.Api{",
          "462:       {",
          "463:        Name:    \"google.library.Bookstore\",",
          "464:        Version: \"2.0.0\",",
          "465:        Methods: []*apipb.Method{",
          "466:         {",
          "467:          Name: \"GetShelves\",",
          "468:         },",
          "469:         {",
          "470:          Name: \"GetBooks\",",
          "471:         },",
          "474:       {",
          "476:        Name:    \"google.discovery\",",
          "477:        Version: \"1.0.0\",",
          "478:        Methods: []*apipb.Method{",
          "479:         {",
          "480:          Name: \"GetDiscoveryRest\",",
          "481:         },",
          "485:      Quota: &servicepb.Quota{",
          "486:       MetricRules: []*servicepb.MetricRule{",
          "487:        {",
          "488:         Selector: \"google.library.Bookstore.GetBooks\",",
          "489:         MetricCosts: map[string]int64{",
          "490:          \"metric_a\": 2,",
          "491:          \"metric_b\": 1,",
          "492:         },",
          "497:     WantFilterConfigs: []string{`",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "536:    }",
          "537: }",
          "538: `,",
          "539:    },",
          "540:   },",
          "541:  }",
          "542:  for _, tc := range testData {",
          "544:  }",
          "545: }",
          "",
          "[Removed Lines]",
          "543:   tc.RunTest(t, filtergen.NewServiceControlFilterGensFromOPConfig)",
          "",
          "[Added Lines]",
          "555:     },",
          "560:   tc.RunTest(t, func(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) ([]filtergen.FilterGenerator, error) {",
          "561:    return filtergen.NewServiceControlFilterGensFromOPConfig(serviceConfig, opts, tc.FactoryParamsIn)",
          "562:   })",
          "",
          "---------------"
        ],
        "src/go/configgenerator/filtergen/util.go||src/go/configgenerator/filtergen/util.go": [
          "File: src/go/configgenerator/filtergen/util.go -> src/go/configgenerator/filtergen/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: }",
          "166: func GetAPINamesListFromOPConfig(serviceConfig *servicepb.Service, opts options.ConfigGeneratorOptions) []string {",
          "172:  }",
          "174: }",
          "",
          "[Removed Lines]",
          "167:  set := GetAPINamesSetFromOPConfig(serviceConfig, opts)",
          "169:  var list []string",
          "170:  for name, _ := range set {",
          "171:   list = append(list, name)",
          "173:  return list",
          "",
          "[Added Lines]",
          "167:  var apiNames []string",
          "169:  for _, api := range serviceConfig.GetApis() {",
          "170:   if util.ShouldSkipOPDiscoveryAPI(api.GetName(), opts.AllowDiscoveryAPIs) {",
          "171:    glog.Warningf(\"Skip API %q because discovery API is not supported.\", api.GetName())",
          "172:    continue",
          "173:   }",
          "174:   apiNames = append(apiNames, api.GetName())",
          "177:  return apiNames",
          "",
          "---------------"
        ],
        "src/go/configgenerator/listener_generator.go||src/go/configgenerator/listener_generator.go": [
          "File: src/go/configgenerator/listener_generator.go -> src/go/configgenerator/listener_generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: )",
          "42:  if err != nil {",
          "43:   return nil, err",
          "44:  }",
          "",
          "[Removed Lines]",
          "38: func MakeListeners(serviceInfo *sc.ServiceInfo, params filtergen.FactoryParams) ([]*listenerpb.Listener, error) {",
          "39:  filterGenFactories := GetESPv2FilterGenFactories()",
          "41:  filterGens, err := NewFilterGeneratorsFromOPConfig(serviceInfo.ServiceConfig(), serviceInfo.Options, filterGenFactories, params)",
          "",
          "[Added Lines]",
          "38: func MakeListeners(serviceInfo *sc.ServiceInfo, scParams filtergen.ServiceControlOPFactoryParams) ([]*listenerpb.Listener, error) {",
          "39:  filterGenFactories := GetESPv2FilterGenFactories(scParams)",
          "41:  filterGens, err := NewFilterGeneratorsFromOPConfig(serviceInfo.ServiceConfig(), serviceInfo.Options, filterGenFactories)",
          "",
          "---------------"
        ],
        "src/go/configgenerator/listener_generator_test.go||src/go/configgenerator/listener_generator_test.go": [
          "File: src/go/configgenerator/listener_generator_test.go -> src/go/configgenerator/listener_generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:    t.Fatal(err)",
          "421:   }",
          "424:   if err != nil {",
          "425:    t.Fatal(err)",
          "426:   }",
          "",
          "[Removed Lines]",
          "423:   listeners, err := MakeListeners(fakeServiceInfo, filtergen.FactoryParams{})",
          "",
          "[Added Lines]",
          "423:   listeners, err := MakeListeners(fakeServiceInfo, filtergen.ServiceControlOPFactoryParams{})",
          "",
          "---------------"
        ],
        "src/go/configinfo/service_info.go||src/go/configinfo/service_info.go": [
          "File: src/go/configinfo/service_info.go -> src/go/configinfo/service_info.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   }",
          "279:   for _, method := range api.GetMethods() {",
          "280:    selector := fmt.Sprintf(\"%s.%s\", api.GetName(), method.GetName())",
          "284:    }",
          "286:    uriTemplate, err := httppattern.ParseUriTemplate(mi.GRPCPath())",
          "",
          "[Removed Lines]",
          "281:    mi, err := s.getMethod(selector)",
          "282:    if err != nil {",
          "283:     return fmt.Errorf(\"error processing auto-generated gRPC http rule: %v\", err)",
          "",
          "[Added Lines]",
          "281:    mi := s.Methods[selector]",
          "282:    if mi == nil {",
          "283:     continue",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:    })",
          "344:   }",
          "349:   }",
          "351:  }",
          "353:  return nil",
          "",
          "[Removed Lines]",
          "346:   mi, err := s.getMethod(metricRule.GetSelector())",
          "347:   if err != nil {",
          "348:    return fmt.Errorf(\"error processing quota metric rule: %v\", err)",
          "350:   mi.MetricCosts = metricCosts",
          "",
          "[Added Lines]",
          "346:   mi := s.Methods[metricRule.GetSelector()]",
          "347:   if mi != nil {",
          "348:    mi.MetricCosts = metricCosts",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:    glog.Warningf(\"Skip http rule %q because discovery API is not supported.\", selector)",
          "425:    continue",
          "426:   }",
          "430:   }",
          "432:   if err := s.addHttpRule(method, rule, addedRouteMatchWithOptionsSet, s.Options.DisallowColonInWildcardPathSegment); err != nil {",
          "",
          "[Removed Lines]",
          "427:   method, err := s.getMethod(rule.GetSelector())",
          "428:   if err != nil {",
          "429:    return fmt.Errorf(\"error processing http rule for operation (%v): %v\", rule.Selector, err)",
          "",
          "[Added Lines]",
          "426:   method := s.Methods[selector]",
          "427:   if method == nil {",
          "428:    continue",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "449:  if s.AllowCors {",
          "450:   for _, r := range s.ServiceConfig().GetHttp().GetRules() {",
          "454:    }",
          "456:    for _, httpRule := range method.HttpRule {",
          "",
          "[Removed Lines]",
          "451:    method, err := s.getMethod(r.GetSelector())",
          "452:    if err != nil {",
          "453:     return fmt.Errorf(\"error processing http rule for operation (%v): %v\", r.GetSelector(), err)",
          "",
          "[Added Lines]",
          "450:    method := s.Methods[r.GetSelector()]",
          "451:    if method == nil {",
          "452:     continue",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "528: func (s *ServiceInfo) processBackendRule() error {",
          "529:  backendRoutingClustersMap := make(map[string]string)",
          "533:   if s.shouldSkipDiscoveryAPI(selector) {",
          "534:    glog.Warningf(\"Skip backend rule %q because discovery API is not supported.\", selector)",
          "535:    continue",
          "536:   }",
          "540:   }",
          "541:   if r.Address == \"\" || s.Options.EnableBackendAddressOverride {",
          "543:    bi, err := s.ruleToBackendInfo(r, \"\", \"\", \"\", s.LocalBackendClusterName(), 0)",
          "",
          "[Removed Lines]",
          "531:  for _, r := range s.ServiceConfig().Backend.GetRules() {",
          "532:   selector := r.Selector",
          "537:   method, err := s.getMethod(r.GetSelector())",
          "538:   if err != nil {",
          "539:    return err",
          "",
          "[Added Lines]",
          "530:  for _, r := range s.ServiceConfig().GetBackend().GetRules() {",
          "531:   selector := r.GetSelector()",
          "537:   method := s.Methods[selector]",
          "538:   if method == nil {",
          "539:    continue",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "608: }",
          "610: func (s *ServiceInfo) ruleToBackendInfo(r *confpb.BackendRule, scheme string, hostname string, path string, backendClusterName string, port uint32) (*backendInfo, error) {",
          "614:  }",
          "",
          "[Removed Lines]",
          "611:  method, err := s.getMethod(r.GetSelector())",
          "612:  if err != nil {",
          "613:   return nil, err",
          "",
          "[Added Lines]",
          "612:  method := s.Methods[r.GetSelector()]",
          "613:  if method == nil {",
          "614:   return nil, nil",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "770:  for _, methodName := range util.HardCodedSkipServiceControlMethods {",
          "772:    method.SkipServiceControl = true",
          "773:   }",
          "774:  }",
          "",
          "[Removed Lines]",
          "771:   if method, err := s.getMethod(methodName); err == nil {",
          "",
          "[Added Lines]",
          "772:   if method := s.Methods[methodName]; method != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "779:    glog.Warningf(\"Skip usage rule %q because discovery API is not supported.\", selector)",
          "780:    continue",
          "781:   }",
          "785:   }",
          "786:   method.AllowUnregisteredCalls = r.GetAllowUnregisteredCalls()",
          "787:   method.SkipServiceControl = r.GetSkipServiceControl()",
          "788:  }",
          "",
          "[Removed Lines]",
          "782:   method, err := s.getMethod(r.GetSelector())",
          "783:   if err != nil {",
          "784:    return fmt.Errorf(\"error processing usage rule for operation (%v): %v\", r.Selector, err)",
          "",
          "[Added Lines]",
          "784:   method := s.Methods[r.GetSelector()]",
          "785:   if method == nil {",
          "786:    continue",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "840:    }",
          "841:   }",
          "846:   }",
          "848:   s.extractApiKeyLocations(method, apiKeyLocationParameters)",
          "",
          "[Removed Lines]",
          "843:   method, err := s.getMethod(rule.GetSelector())",
          "844:   if err != nil {",
          "845:    return fmt.Errorf(\"error processing system parameter rule for operation (%v): %v\", rule.Selector, err)",
          "",
          "[Added Lines]",
          "846:   method := s.Methods[rule.GetSelector()]",
          "847:   if method == nil {",
          "848:    continue",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "952:  return nil",
          "953: }",
          "",
          "[Removed Lines]",
          "957: func (s *ServiceInfo) getMethod(name string) (*MethodInfo, error) {",
          "958:  if s.Methods[name] == nil {",
          "959:   return nil, fmt.Errorf(\"selector (%v) was not defined in the API\", name)",
          "960:  }",
          "961:  return s.Methods[name], nil",
          "962: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "997:    continue",
          "998:   }",
          "999:   if len(rule.GetRequirements()) > 0 {",
          "1003:    }",
          "1004:    mi.RequireAuth = true",
          "1005:   }",
          "",
          "[Removed Lines]",
          "1000:    mi, err := s.getMethod(rule.GetSelector())",
          "1001:    if err != nil {",
          "1002:     return fmt.Errorf(\"error processing authentication rule for operation (%v): selector not defined in Api.method or Http.rule\", rule.GetSelector())",
          "",
          "[Added Lines]",
          "994:    mi := s.Methods[rule.GetSelector()]",
          "995:    if mi == nil {",
          "996:     continue",
          "",
          "---------------"
        ],
        "src/go/configinfo/service_info_test.go||src/go/configinfo/service_info_test.go": [
          "File: src/go/configinfo/service_info_test.go -> src/go/configinfo/service_info_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3170:     },",
          "3171:    },",
          "3172:   },",
          "3195:  }",
          "3197:  for _, tc := range testData {",
          "",
          "[Removed Lines]",
          "3173:   {",
          "3174:    desc: \"Typo in operation name does not crash\",",
          "3175:    fakeServiceConfig: &confpb.Service{",
          "3176:     Apis: []*apipb.Api{",
          "3177:      {",
          "3178:       Name: testApiName,",
          "3179:      },",
          "3180:     },",
          "3181:     Quota: &confpb.Quota{",
          "3182:      MetricRules: []*confpb.MetricRule{",
          "3183:       {",
          "3184:        Selector: \"endpoints.examples.bookstore.Bookstore.BadOperationName\",",
          "3185:        MetricCosts: map[string]int64{",
          "3186:         \"metric_a\": 2,",
          "3187:         \"metric_b\": 1,",
          "3188:        },",
          "3189:       },",
          "3190:      },",
          "3191:     },",
          "3192:    },",
          "3193:    wantError: \"error processing quota metric rule: selector (endpoints.examples.bookstore.Bookstore.BadOperationName) was not defined in the API\",",
          "3194:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/go/configmanager/config_manager.go||src/go/configmanager/config_manager.go": [
          "File: src/go/configmanager/config_manager.go -> src/go/configmanager/config_manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  serviceName        string",
          "62:  envoyConfigOptions options.ConfigGeneratorOptions",
          "63:  serviceInfo        *configinfo.ServiceInfo",
          "65:  cache              cache.SnapshotCache",
          "67:  metadataFetcher         *metadata.MetadataFetcher",
          "",
          "[Removed Lines]",
          "64:  filterGenParams    filtergen.FactoryParams",
          "",
          "[Added Lines]",
          "64:  scParams           filtergen.ServiceControlOPFactoryParams",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:   if err != nil {",
          "245:    m.Infof(\"metadata server was not reached, skipping GCP Attributes: %v\", err)",
          "246:   } else {",
          "248:   }",
          "249:  }",
          "",
          "[Removed Lines]",
          "247:    m.filterGenParams.GCPAttributes = attrs",
          "",
          "[Added Lines]",
          "247:    m.scParams.GCPAttributes = attrs",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:  }",
          "276:  m.Infof(\"adding Listeners configuration for api: %v\", m.serviceInfo.Name)",
          "278:  if err != nil {",
          "279:   return nil, err",
          "280:  }",
          "",
          "[Removed Lines]",
          "277:  listeners, err := gen.MakeListeners(m.serviceInfo, m.filterGenParams)",
          "",
          "[Added Lines]",
          "277:  listeners, err := gen.MakeListeners(m.serviceInfo, m.scParams)",
          "",
          "---------------"
        ]
      }
    }
  ]
}