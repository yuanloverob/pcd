{
  "cve_id": "CVE-2020-11048",
  "cve_desc": "In FreeRDP after 1.0 and before 2.0.0, there is an out-of-bounds read. It only allows to abort a session. No data extraction is possible. This has been fixed in 2.0.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "9301bfe730c66180263248b74353daa99f5a969b",
  "patch_info": {
    "commit_hash": "9301bfe730c66180263248b74353daa99f5a969b",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/9301bfe730c66180263248b74353daa99f5a969b",
    "files": [
      "libfreerdp/core/rdp.c"
    ],
    "message": "Fixed #6007: Boundary checks in rdp_read_flow_control_pdu",
    "before_after_code_files": [
      "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
      "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103: };",
      "106: static void rdp_write_share_control_header(wStream* s, UINT16 length, UINT16 type,",
      "107:                                            UINT16 channel_id);",
      "108: static void rdp_write_share_data_header(wStream* s, UINT16 length, BYTE type, UINT32 share_id);",
      "",
      "[Removed Lines]",
      "105: static void rdp_read_flow_control_pdu(wStream* s, UINT16* type);",
      "",
      "[Added Lines]",
      "105: static BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146: BOOL rdp_read_share_control_header(wStream* s, UINT16* length, UINT16* type, UINT16* channel_id)",
      "147: {",
      "148:  if (Stream_GetRemainingLength(s) < 2)",
      "149:   return FALSE;",
      "157:  {",
      "161:   return TRUE;",
      "162:  }",
      "165:   return FALSE;",
      "172:  else",
      "",
      "[Removed Lines]",
      "156:  if (*length == 0x8000)",
      "158:   rdp_read_flow_control_pdu(s, type);",
      "164:  if (((size_t)*length - 2) > Stream_GetRemainingLength(s))",
      "170:  if (*length > 4)",
      "",
      "[Added Lines]",
      "148:  UINT16 len;",
      "159:  if (len == 0x8000)",
      "161:   if (!rdp_read_flow_control_pdu(s, type))",
      "162:    return FALSE;",
      "168:  if ((len < 4) || ((len - 2) > Stream_GetRemainingLength(s)))",
      "174:  if (len > 4)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1116:  }",
      "1117: }",
      "1120: {",
      "",
      "[Removed Lines]",
      "1119: void rdp_read_flow_control_pdu(wStream* s, UINT16* type)",
      "",
      "[Added Lines]",
      "1123: BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1128:  UINT8 pduType;",
      "1135: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1133:  if (!type)",
      "1134:   return FALSE;",
      "1135:  if (Stream_GetRemainingLength(s) < 6)",
      "1136:   return FALSE;",
      "1143:  return TRUE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58dc36b3c883fd460199cedb6d30e58eba58298c",
      "candidate_info": {
        "commit_hash": "58dc36b3c883fd460199cedb6d30e58eba58298c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/58dc36b3c883fd460199cedb6d30e58eba58298c",
        "files": [
          "libfreerdp/cache/bitmap.c"
        ],
        "message": "Fixed possible NULL dereference",
        "before_after_code_files": [
          "libfreerdp/cache/bitmap.c||libfreerdp/cache/bitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/cache/bitmap.c||libfreerdp/cache/bitmap.c": [
          "File: libfreerdp/cache/bitmap.c -> libfreerdp/cache/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:  bitmapCache->settings = settings;",
          "282:  bitmapCache->update = ((freerdp*)settings->instance)->update;",
          "283:  bitmapCache->context = bitmapCache->update->context;",
          "287:  if (!bitmapCache->cells)",
          "288:   goto fail;",
          "290:  for (i = 0; i < (int)bitmapCache->maxCells; i++)",
          "291:  {",
          "",
          "[Removed Lines]",
          "284:  bitmapCache->maxCells = settings->BitmapCacheV2NumCells;",
          "285:  bitmapCache->cells = (BITMAP_V2_CELL*)calloc(bitmapCache->maxCells, sizeof(BITMAP_V2_CELL));",
          "",
          "[Added Lines]",
          "284:  bitmapCache->cells =",
          "285:      (BITMAP_V2_CELL*)calloc(settings->BitmapCacheV2NumCells, sizeof(BITMAP_V2_CELL));",
          "289:  bitmapCache->maxCells = settings->BitmapCacheV2NumCells;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8890a645c221823ac133dbf991f8a65ae50d637",
      "candidate_info": {
        "commit_hash": "f8890a645c221823ac133dbf991f8a65ae50d637",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f8890a645c221823ac133dbf991f8a65ae50d637",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed #6005: Bounds checks in update_read_bitmap_data",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  {",
          "104:   if (!(bitmapData->flags & NO_BITMAP_COMPRESSION_HDR))",
          "105:   {",
          "106:    Stream_Read_UINT16(s,",
          "108:    Stream_Read_UINT16(s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:    if (Stream_GetRemainingLength(s) < 8)",
          "107:     return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed53cd148f43cbab905eaa0f5308c2bf3c48cc37",
      "candidate_info": {
        "commit_hash": "ed53cd148f43cbab905eaa0f5308c2bf3c48cc37",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ed53cd148f43cbab905eaa0f5308c2bf3c48cc37",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed #6006: bounds checks in update_read_synchronize",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6019"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:  return NULL;",
          "288: }",
          "291: {",
          "292:  WINPR_UNUSED(update);",
          "298: }",
          "300: static BOOL update_read_play_sound(wStream* s, PLAY_SOUND_UPDATE* play_sound)",
          "",
          "[Removed Lines]",
          "290: static void update_read_synchronize(rdpUpdate* update, wStream* s)",
          "",
          "[Added Lines]",
          "290: static BOOL update_read_synchronize(rdpUpdate* update, wStream* s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "807:   break;",
          "809:   case UPDATE_TYPE_SYNCHRONIZE:",
          "811:    rc = IFCALLRESULT(TRUE, update->Synchronize, context);",
          "812:    break;",
          "",
          "[Removed Lines]",
          "810:    update_read_synchronize(update, s);",
          "",
          "[Added Lines]",
          "810:    if (!update_read_synchronize(update, s))",
          "811:     goto fail;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff79636d3311269ec35fc1d6cc4246eef500ad5e",
      "candidate_info": {
        "commit_hash": "ff79636d3311269ec35fc1d6cc4246eef500ad5e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ff79636d3311269ec35fc1d6cc4246eef500ad5e",
        "files": [
          "libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/gateway/rdg.h",
          "libfreerdp/core/gateway/rpc.c",
          "libfreerdp/core/gateway/rpc.h",
          "libfreerdp/core/gateway/rpc_bind.c",
          "libfreerdp/core/gateway/rpc_client.c",
          "libfreerdp/core/gateway/rts.c",
          "libfreerdp/core/gateway/rts_signature.c",
          "libfreerdp/core/gateway/tsg.c",
          "libfreerdp/core/gateway/tsg.h",
          "libfreerdp/core/orders.c",
          "libfreerdp/core/rdp.c",
          "libfreerdp/core/tcp.c",
          "libfreerdp/core/tcp.h",
          "libfreerdp/core/transport.c",
          "libfreerdp/core/transport.h"
        ],
        "message": "TSG improvements\n\n* Respect connection timeout during connect\n* Better debug output\n* Cleaned up data types,",
        "before_after_code_files": [
          "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/gateway/rdg.h||libfreerdp/core/gateway/rdg.h",
          "libfreerdp/core/gateway/rpc.c||libfreerdp/core/gateway/rpc.c",
          "libfreerdp/core/gateway/rpc.h||libfreerdp/core/gateway/rpc.h",
          "libfreerdp/core/gateway/rpc_bind.c||libfreerdp/core/gateway/rpc_bind.c",
          "libfreerdp/core/gateway/rpc_client.c||libfreerdp/core/gateway/rpc_client.c",
          "libfreerdp/core/gateway/rts.c||libfreerdp/core/gateway/rts.c",
          "libfreerdp/core/gateway/rts_signature.c||libfreerdp/core/gateway/rts_signature.c",
          "libfreerdp/core/gateway/tsg.c||libfreerdp/core/gateway/tsg.c",
          "libfreerdp/core/gateway/tsg.h||libfreerdp/core/gateway/tsg.h",
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c",
          "libfreerdp/core/tcp.c||libfreerdp/core/tcp.c",
          "libfreerdp/core/tcp.h||libfreerdp/core/tcp.h",
          "libfreerdp/core/transport.c||libfreerdp/core/transport.c",
          "libfreerdp/core/transport.h||libfreerdp/core/transport.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
          ],
          "candidate": [
            "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c": [
          "File: libfreerdp/core/gateway/rdg.c -> libfreerdp/core/gateway/rdg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1167:  return TRUE;",
          "1168: }",
          "1171: {",
          "1172:  BOOL status;",
          "1173:  SOCKET outConnSocket = 0;",
          "",
          "[Removed Lines]",
          "1170: BOOL rdg_connect(rdpRdg* rdg, int timeout, BOOL* rpcFallback)",
          "",
          "[Added Lines]",
          "1170: BOOL rdg_connect(rdpRdg* rdg, DWORD timeout, BOOL* rpcFallback)",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rdg.h||libfreerdp/core/gateway/rdg.h": [
          "File: libfreerdp/core/gateway/rdg.h -> libfreerdp/core/gateway/rdg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: FREERDP_LOCAL BIO* rdg_get_front_bio_and_take_ownership(rdpRdg* rdg);",
          "48: FREERDP_LOCAL DWORD rdg_get_event_handles(rdpRdg* rdg, HANDLE* events, DWORD count);",
          "",
          "[Removed Lines]",
          "47: FREERDP_LOCAL BOOL rdg_connect(rdpRdg* rdg, int timeout, BOOL* rpcFallback);",
          "",
          "[Added Lines]",
          "47: FREERDP_LOCAL BOOL rdg_connect(rdpRdg* rdg, DWORD timeout, BOOL* rpcFallback);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc.c||libfreerdp/core/gateway/rpc.c": [
          "File: libfreerdp/core/gateway/rpc.c -> libfreerdp/core/gateway/rpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  }",
          "140: }",
          "143: {",
          "150: }",
          "152: UINT32 rpc_offset_align(UINT32* offset, UINT32 alignment)",
          "",
          "[Removed Lines]",
          "142: void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_hdr_t* header)",
          "144:  header->common.rpc_vers = rpc->rpc_vers;",
          "145:  header->common.rpc_vers_minor = rpc->rpc_vers_minor;",
          "146:  header->common.packed_drep[0] = rpc->packed_drep[0];",
          "147:  header->common.packed_drep[1] = rpc->packed_drep[1];",
          "148:  header->common.packed_drep[2] = rpc->packed_drep[2];",
          "149:  header->common.packed_drep[3] = rpc->packed_drep[3];",
          "",
          "[Added Lines]",
          "142: void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_common_hdr_t* header)",
          "144:  header->rpc_vers = rpc->rpc_vers;",
          "145:  header->rpc_vers_minor = rpc->rpc_vers_minor;",
          "146:  header->packed_drep[0] = rpc->packed_drep[0];",
          "147:  header->packed_drep[1] = rpc->packed_drep[1];",
          "148:  header->packed_drep[2] = rpc->packed_drep[2];",
          "149:  header->packed_drep[3] = rpc->packed_drep[3];",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc.h||libfreerdp/core/gateway/rpc.h": [
          "File: libfreerdp/core/gateway/rpc.h -> libfreerdp/core/gateway/rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #pragma pack(push, 1)",
          "49: typedef struct",
          "50: {",
          "53:  UINT16 Flags;",
          "54:  UINT16 NumberOfCommands;",
          "",
          "[Removed Lines]",
          "37: #define DEFINE_RPC_COMMON_FIELDS() \\",
          "38:  BYTE rpc_vers;                 \\",
          "39:  BYTE rpc_vers_minor;           \\",
          "40:  BYTE ptype;                    \\",
          "41:  BYTE pfc_flags;                \\",
          "42:  BYTE packed_drep[4];           \\",
          "43:  UINT16 frag_length;            \\",
          "44:  UINT16 auth_length;            \\",
          "45:  UINT32 call_id",
          "47: #define RPC_COMMON_FIELDS_LENGTH 16",
          "51:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "37: typedef struct",
          "38: {",
          "39:  BYTE rpc_vers;",
          "40:  BYTE rpc_vers_minor;",
          "41:  BYTE ptype;",
          "42:  BYTE pfc_flags;",
          "43:  BYTE packed_drep[4];",
          "44:  UINT16 frag_length;",
          "45:  UINT16 auth_length;",
          "46:  UINT32 call_id;",
          "47: } rpcconn_common_hdr_t;",
          "49: #define RPC_COMMON_FIELDS_LENGTH sizeof(rpcconn_common_hdr_t)",
          "53:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: #pragma pack(push, 1)",
          "149: typedef UINT16 p_context_id_t;",
          "150: typedef UINT16 p_reject_reason_t;",
          "",
          "[Removed Lines]",
          "144: typedef struct",
          "145: {",
          "146:  DEFINE_RPC_COMMON_FIELDS();",
          "147: } rpcconn_common_hdr_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315: typedef struct",
          "316: {",
          "319:  UINT16 max_xmit_frag;",
          "320:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "317:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "314:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329: typedef struct",
          "330: {",
          "333:  UINT16 max_xmit_frag;",
          "334:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "331:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "328:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "346: typedef struct",
          "347: {",
          "350:  UINT16 max_xmit_frag;",
          "351:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "348:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "345:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359: typedef struct",
          "360: {",
          "363:  UINT16 max_xmit_frag;",
          "364:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "361:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "358:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "376: typedef struct",
          "377: {",
          "380:  UINT16 max_xmit_frag;",
          "381:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "378:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "375:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386: typedef struct",
          "387: {",
          "390:  p_reject_reason_t provider_reject_reason;",
          "",
          "[Removed Lines]",
          "388:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "385:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "395: typedef struct",
          "396: {",
          "399:  auth_verifier_co_t auth_verifier;",
          "",
          "[Removed Lines]",
          "397:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "394:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "461: typedef struct",
          "462: {",
          "465:  UINT32 alloc_hint;",
          "466:  p_context_id_t p_cont_id;",
          "",
          "[Removed Lines]",
          "463:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "460:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "480: typedef struct",
          "481: {",
          "484:  auth_verifier_co_t auth_verifier;",
          "485: } rpcconn_orphaned_hdr_t;",
          "487: typedef struct",
          "488: {",
          "491:  UINT32 alloc_hint;",
          "",
          "[Removed Lines]",
          "482:  DEFINE_RPC_COMMON_FIELDS();",
          "489:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "479:  rpcconn_common_hdr_t header;",
          "486:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "506: typedef struct",
          "507: {",
          "510:  UINT32 alloc_hint;",
          "511:  p_context_id_t p_cont_id;",
          "",
          "[Removed Lines]",
          "508:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "505:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "523: typedef struct",
          "524: {",
          "526: } rpcconn_shutdown_hdr_t;",
          "528: typedef union {",
          "",
          "[Removed Lines]",
          "525:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "522:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "768: };",
          "770: FREERDP_LOCAL void rpc_pdu_header_print(rpcconn_hdr_t* header);",
          "773: FREERDP_LOCAL UINT32 rpc_offset_align(UINT32* offset, UINT32 alignment);",
          "774: FREERDP_LOCAL UINT32 rpc_offset_pad(UINT32* offset, UINT32 pad);",
          "",
          "[Removed Lines]",
          "771: FREERDP_LOCAL void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_hdr_t* header);",
          "",
          "[Added Lines]",
          "768: FREERDP_LOCAL void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_common_hdr_t* header);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc_bind.c||libfreerdp/core/gateway/rpc_bind.c": [
          "File: libfreerdp/core/gateway/rpc_bind.c -> libfreerdp/core/gateway/rpc_bind.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  if (!sbuffer)",
          "191:   goto fail;",
          "195:  bind_pdu->auth_verifier.auth_value = sbuffer->pvBuffer;",
          "199:  bind_pdu->max_xmit_frag = rpc->max_xmit_frag;",
          "200:  bind_pdu->max_recv_frag = rpc->max_recv_frag;",
          "201:  bind_pdu->assoc_group_id = 0;",
          "",
          "[Removed Lines]",
          "193:  rpc_pdu_header_init(rpc, (rpcconn_hdr_t*)bind_pdu);",
          "194:  bind_pdu->auth_length = (UINT16)sbuffer->cbBuffer;",
          "196:  bind_pdu->ptype = PTYPE_BIND;",
          "197:  bind_pdu->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_SUPPORT_HEADER_SIGN | PFC_CONC_MPX;",
          "198:  bind_pdu->call_id = 2;",
          "",
          "[Added Lines]",
          "193:  rpc_pdu_header_init(rpc, &bind_pdu->header);",
          "194:  bind_pdu->header.auth_length = (UINT16)sbuffer->cbBuffer;",
          "196:  bind_pdu->header.ptype = PTYPE_BIND;",
          "197:  bind_pdu->header.pfc_flags =",
          "198:      PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_SUPPORT_HEADER_SIGN | PFC_CONC_MPX;",
          "199:  bind_pdu->header.call_id = 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:  bind_pdu->auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "241:  bind_pdu->auth_verifier.auth_reserved = 0x00;",
          "242:  bind_pdu->auth_verifier.auth_context_id = 0x00000000;",
          "247:  if (!buffer)",
          "248:   goto fail;",
          "",
          "[Removed Lines]",
          "243:  offset += (8 + bind_pdu->auth_length);",
          "244:  bind_pdu->frag_length = offset;",
          "245:  buffer = (BYTE*)malloc(bind_pdu->frag_length);",
          "",
          "[Added Lines]",
          "244:  offset += (8 + bind_pdu->header.auth_length);",
          "245:  bind_pdu->header.frag_length = offset;",
          "246:  buffer = (BYTE*)malloc(bind_pdu->header.frag_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:  offset = 116;",
          "257:  rpc_offset_pad(&offset, bind_pdu->auth_verifier.auth_pad_length);",
          "258:  CopyMemory(&buffer[offset], &bind_pdu->auth_verifier.auth_type, 8);",
          "264:  if (!clientCall)",
          "265:   goto fail;",
          "",
          "[Removed Lines]",
          "259:  CopyMemory(&buffer[offset + 8], bind_pdu->auth_verifier.auth_value, bind_pdu->auth_length);",
          "260:  offset += (8 + bind_pdu->auth_length);",
          "261:  length = bind_pdu->frag_length;",
          "262:  clientCall = rpc_client_call_new(bind_pdu->call_id, 0);",
          "",
          "[Added Lines]",
          "260:  CopyMemory(&buffer[offset + 8], bind_pdu->auth_verifier.auth_value,",
          "261:             bind_pdu->header.auth_length);",
          "262:  offset += (8 + bind_pdu->header.auth_length);",
          "263:  length = bind_pdu->header.frag_length;",
          "264:  clientCall = rpc_client_call_new(bind_pdu->header.call_id, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:   return -1;",
          "375:  }",
          "379:  auth_3_pdu->auth_verifier.auth_value = sbuffer->pvBuffer;",
          "383:  auth_3_pdu->max_xmit_frag = rpc->max_xmit_frag;",
          "384:  auth_3_pdu->max_recv_frag = rpc->max_recv_frag;",
          "385:  offset = 20;",
          "",
          "[Removed Lines]",
          "377:  rpc_pdu_header_init(rpc, (rpcconn_hdr_t*)auth_3_pdu);",
          "378:  auth_3_pdu->auth_length = (UINT16)sbuffer->cbBuffer;",
          "380:  auth_3_pdu->ptype = PTYPE_RPC_AUTH_3;",
          "381:  auth_3_pdu->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_CONC_MPX;",
          "382:  auth_3_pdu->call_id = 2;",
          "",
          "[Added Lines]",
          "379:  rpc_pdu_header_init(rpc, &auth_3_pdu->header);",
          "380:  auth_3_pdu->header.auth_length = (UINT16)sbuffer->cbBuffer;",
          "382:  auth_3_pdu->header.ptype = PTYPE_RPC_AUTH_3;",
          "383:  auth_3_pdu->header.pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_CONC_MPX;",
          "384:  auth_3_pdu->header.call_id = 2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "388:  auth_3_pdu->auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "389:  auth_3_pdu->auth_verifier.auth_reserved = 0x00;",
          "390:  auth_3_pdu->auth_verifier.auth_context_id = 0x00000000;",
          "395:  if (!buffer)",
          "396:  {",
          "",
          "[Removed Lines]",
          "391:  offset += (8 + auth_3_pdu->auth_length);",
          "392:  auth_3_pdu->frag_length = offset;",
          "393:  buffer = (BYTE*)malloc(auth_3_pdu->frag_length);",
          "",
          "[Added Lines]",
          "393:  offset += (8 + auth_3_pdu->header.auth_length);",
          "394:  auth_3_pdu->header.frag_length = offset;",
          "395:  buffer = (BYTE*)malloc(auth_3_pdu->header.frag_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "402:  offset = 20;",
          "403:  rpc_offset_pad(&offset, auth_3_pdu->auth_verifier.auth_pad_length);",
          "404:  CopyMemory(&buffer[offset], &auth_3_pdu->auth_verifier.auth_type, 8);",
          "410:  if (ArrayList_Add(rpc->client->ClientCallList, clientCall) >= 0)",
          "411:  {",
          "",
          "[Removed Lines]",
          "405:  CopyMemory(&buffer[offset + 8], auth_3_pdu->auth_verifier.auth_value, auth_3_pdu->auth_length);",
          "406:  offset += (8 + auth_3_pdu->auth_length);",
          "407:  length = auth_3_pdu->frag_length;",
          "408:  clientCall = rpc_client_call_new(auth_3_pdu->call_id, 0);",
          "",
          "[Added Lines]",
          "407:  CopyMemory(&buffer[offset + 8], auth_3_pdu->auth_verifier.auth_value,",
          "408:             auth_3_pdu->header.auth_length);",
          "409:  offset += (8 + auth_3_pdu->header.auth_length);",
          "410:  length = auth_3_pdu->header.frag_length;",
          "411:  clientCall = rpc_client_call_new(auth_3_pdu->header.call_id, 0);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc_client.c||libfreerdp/core/gateway/rpc_client.c": [
          "File: libfreerdp/core/gateway/rpc_client.c -> libfreerdp/core/gateway/rpc_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:  SecBufferDesc Message;",
          "896:  RpcClientCall* clientCall = NULL;",
          "897:  rdpNtlm* ntlm;",
          "899:  RpcVirtualConnection* connection;",
          "900:  RpcInChannel* inChannel;",
          "901:  size_t length;",
          "",
          "[Removed Lines]",
          "898:  rpcconn_request_hdr_t* request_pdu = NULL;",
          "",
          "[Added Lines]",
          "898:  rpcconn_request_hdr_t request_pdu = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "931:  if (ntlm_client_query_auth_size(ntlm) < 0)",
          "932:   goto fail;",
          "939:  size = ntlm_client_get_context_max_size(ntlm);",
          "941:  if (size < 0)",
          "942:   goto fail;",
          "954:  if (!clientCall)",
          "955:   goto fail;",
          "",
          "[Removed Lines]",
          "934:  request_pdu = (rpcconn_request_hdr_t*)calloc(1, sizeof(rpcconn_request_hdr_t));",
          "936:  if (!request_pdu)",
          "937:   goto fail;",
          "944:  rpc_pdu_header_init(rpc, (rpcconn_hdr_t*)request_pdu);",
          "945:  request_pdu->ptype = PTYPE_REQUEST;",
          "946:  request_pdu->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "947:  request_pdu->auth_length = (UINT16)size;",
          "948:  request_pdu->call_id = rpc->CallId++;",
          "949:  request_pdu->alloc_hint = length;",
          "950:  request_pdu->p_cont_id = 0x0000;",
          "951:  request_pdu->opnum = opnum;",
          "952:  clientCall = rpc_client_call_new(request_pdu->call_id, request_pdu->opnum);",
          "",
          "[Added Lines]",
          "939:  rpc_pdu_header_init(rpc, &request_pdu.header);",
          "940:  request_pdu.header.ptype = PTYPE_REQUEST;",
          "941:  request_pdu.header.pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "942:  request_pdu.header.auth_length = (UINT16)size;",
          "943:  request_pdu.header.call_id = rpc->CallId++;",
          "944:  request_pdu.alloc_hint = length;",
          "945:  request_pdu.p_cont_id = 0x0000;",
          "946:  request_pdu.opnum = opnum;",
          "947:  clientCall = rpc_client_call_new(request_pdu.header.call_id, request_pdu.opnum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "960:   goto fail;",
          "961:  }",
          "967:  offset = 24;",
          "968:  stub_data_pad = rpc_offset_align(&offset, 8);",
          "969:  offset += length;",
          "979:  if (!buffer)",
          "980:   goto fail;",
          "983:  offset = 24;",
          "984:  rpc_offset_pad(&offset, stub_data_pad);",
          "986:  offset += length;",
          "989:  offset += 8;",
          "",
          "[Removed Lines]",
          "963:  if (request_pdu->opnum == TsProxySetupReceivePipeOpnum)",
          "964:   rpc->PipeCallId = request_pdu->call_id;",
          "966:  request_pdu->stub_data = Stream_Buffer(s);",
          "970:  request_pdu->auth_verifier.auth_pad_length = rpc_offset_align(&offset, 4);",
          "971:  request_pdu->auth_verifier.auth_type = RPC_C_AUTHN_WINNT;",
          "972:  request_pdu->auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "973:  request_pdu->auth_verifier.auth_reserved = 0x00;",
          "974:  request_pdu->auth_verifier.auth_context_id = 0x00000000;",
          "975:  offset += (8 + request_pdu->auth_length);",
          "976:  request_pdu->frag_length = offset;",
          "977:  buffer = (BYTE*)calloc(1, request_pdu->frag_length);",
          "982:  CopyMemory(buffer, request_pdu, 24);",
          "985:  CopyMemory(&buffer[offset], request_pdu->stub_data, length);",
          "987:  rpc_offset_pad(&offset, request_pdu->auth_verifier.auth_pad_length);",
          "988:  CopyMemory(&buffer[offset], &request_pdu->auth_verifier.auth_type, 8);",
          "",
          "[Added Lines]",
          "958:  if (request_pdu.opnum == TsProxySetupReceivePipeOpnum)",
          "959:   rpc->PipeCallId = request_pdu.header.call_id;",
          "961:  request_pdu.stub_data = Stream_Buffer(s);",
          "965:  request_pdu.auth_verifier.auth_pad_length = rpc_offset_align(&offset, 4);",
          "966:  request_pdu.auth_verifier.auth_type = RPC_C_AUTHN_WINNT;",
          "967:  request_pdu.auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "968:  request_pdu.auth_verifier.auth_reserved = 0x00;",
          "969:  request_pdu.auth_verifier.auth_context_id = 0x00000000;",
          "970:  offset += (8 + request_pdu.header.auth_length);",
          "971:  request_pdu.header.frag_length = offset;",
          "972:  buffer = (BYTE*)calloc(1, request_pdu.header.frag_length);",
          "977:  CopyMemory(buffer, &request_pdu, 24);",
          "980:  CopyMemory(&buffer[offset], request_pdu.stub_data, length);",
          "982:  rpc_offset_pad(&offset, request_pdu.auth_verifier.auth_pad_length);",
          "983:  CopyMemory(&buffer[offset], &request_pdu.auth_verifier.auth_type, 8);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1007:  CopyMemory(&buffer[offset], Buffers[1].pvBuffer, Buffers[1].cbBuffer);",
          "1008:  offset += Buffers[1].cbBuffer;",
          "1011:   goto fail;",
          "1013:  rc = TRUE;",
          "1014: fail:",
          "1015:  free(buffer);",
          "1016:  free(Buffers[1].pvBuffer);",
          "1018:  Stream_Free(s, TRUE);",
          "1019:  return rc;",
          "1020: }",
          "",
          "[Removed Lines]",
          "1010:  if (rpc_in_channel_send_pdu(inChannel, buffer, request_pdu->frag_length) < 0)",
          "1017:  free(request_pdu);",
          "",
          "[Added Lines]",
          "1005:  if (rpc_in_channel_send_pdu(inChannel, buffer, request_pdu.header.frag_length) < 0)",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rts.c||libfreerdp/core/gateway/rts.c": [
          "File: libfreerdp/core/gateway/rts.c -> libfreerdp/core/gateway/rts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: {",
          "83: }",
          "85: static int rts_receive_window_size_command_read(rdpRpc* rpc, BYTE* buffer, UINT32 length,",
          "",
          "[Removed Lines]",
          "70: static void rts_pdu_header_init(rpcconn_rts_hdr_t* header)",
          "72:  ZeroMemory(header, sizeof(*header));",
          "73:  header->rpc_vers = 5;",
          "74:  header->rpc_vers_minor = 0;",
          "75:  header->ptype = PTYPE_RTS;",
          "76:  header->packed_drep[0] = 0x10;",
          "77:  header->packed_drep[1] = 0x00;",
          "78:  header->packed_drep[2] = 0x00;",
          "79:  header->packed_drep[3] = 0x00;",
          "80:  header->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "81:  header->auth_length = 0;",
          "82:  header->call_id = 0;",
          "",
          "[Added Lines]",
          "70: static rpcconn_rts_hdr_t rts_pdu_header_init(void)",
          "72:  rpcconn_rts_hdr_t header = { 0 };",
          "73:  header.header.rpc_vers = 5;",
          "74:  header.header.rpc_vers_minor = 0;",
          "75:  header.header.ptype = PTYPE_RTS;",
          "76:  header.header.packed_drep[0] = 0x10;",
          "77:  header.header.packed_drep[1] = 0x00;",
          "78:  header.header.packed_drep[2] = 0x00;",
          "79:  header.header.packed_drep[3] = 0x00;",
          "80:  header.header.pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "81:  header.header.auth_length = 0;",
          "82:  header.header.call_id = 0;",
          "84:  return header;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406: {",
          "407:  int status;",
          "408:  BYTE* buffer;",
          "410:  UINT32 ReceiveWindowSize;",
          "411:  BYTE* OUTChannelCookie;",
          "412:  BYTE* VirtualConnectionCookie;",
          "413:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "414:  RpcOutChannel* outChannel = connection->DefaultOutChannel;",
          "417:  header.Flags = RTS_FLAG_NONE;",
          "418:  header.NumberOfCommands = 4;",
          "419:  WLog_DBG(TAG, \"Sending CONN/A1 RTS PDU\");",
          "420:  VirtualConnectionCookie = (BYTE*)&(connection->Cookie);",
          "421:  OUTChannelCookie = (BYTE*)&(outChannel->common.Cookie);",
          "422:  ReceiveWindowSize = outChannel->ReceiveWindow;",
          "425:  if (!buffer)",
          "426:   return -1;",
          "",
          "[Removed Lines]",
          "409:  rpcconn_rts_hdr_t header;",
          "415:  rts_pdu_header_init(&header);",
          "416:  header.frag_length = 76;",
          "423:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "411:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "418:  header.header.frag_length = 76;",
          "425:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  rts_receive_window_size_command_write(&buffer[68],",
          "436:  free(buffer);",
          "437:  return (status > 0) ? 1 : -1;",
          "438: }",
          "",
          "[Removed Lines]",
          "435:  status = rpc_channel_write(&outChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "437:  status = rpc_channel_write(&outChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453:  int status;",
          "454:  BYTE* buffer;",
          "455:  UINT32 length;",
          "457:  BYTE* INChannelCookie;",
          "458:  BYTE* AssociationGroupId;",
          "459:  BYTE* VirtualConnectionCookie;",
          "460:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "461:  RpcInChannel* inChannel = connection->DefaultInChannel;",
          "464:  header.Flags = RTS_FLAG_NONE;",
          "465:  header.NumberOfCommands = 6;",
          "466:  WLog_DBG(TAG, \"Sending CONN/B1 RTS PDU\");",
          "467:  VirtualConnectionCookie = (BYTE*)&(connection->Cookie);",
          "468:  INChannelCookie = (BYTE*)&(inChannel->common.Cookie);",
          "469:  AssociationGroupId = (BYTE*)&(connection->AssociationGroupId);",
          "472:  if (!buffer)",
          "473:   return -1;",
          "",
          "[Removed Lines]",
          "456:  rpcconn_rts_hdr_t header;",
          "462:  rts_pdu_header_init(&header);",
          "463:  header.frag_length = 104;",
          "470:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "458:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "465:  header.header.frag_length = 104;",
          "472:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:  rts_association_group_id_command_write(&buffer[84],",
          "487:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "488:  free(buffer);",
          "489:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "486:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "488:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:  int status;",
          "521:  BYTE* buffer;",
          "522:  UINT32 length;",
          "524:  RpcInChannel* inChannel = rpc->VirtualConnection->DefaultInChannel;",
          "527:  header.Flags = RTS_FLAG_OTHER_CMD;",
          "528:  header.NumberOfCommands = 1;",
          "529:  WLog_DBG(TAG, \"Sending Keep-Alive RTS PDU\");",
          "532:  if (!buffer)",
          "533:   return -1;",
          "",
          "[Removed Lines]",
          "523:  rpcconn_rts_hdr_t header;",
          "525:  rts_pdu_header_init(&header);",
          "526:  header.frag_length = 28;",
          "530:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "525:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "528:  header.header.frag_length = 28;",
          "532:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "536:  rts_client_keepalive_command_write(",
          "539:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "540:  free(buffer);",
          "541:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "538:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "540:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "546:  int status;",
          "547:  BYTE* buffer;",
          "548:  UINT32 length;",
          "550:  UINT32 BytesReceived;",
          "551:  UINT32 AvailableWindow;",
          "552:  BYTE* ChannelCookie;",
          "553:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "554:  RpcInChannel* inChannel = connection->DefaultInChannel;",
          "555:  RpcOutChannel* outChannel = connection->DefaultOutChannel;",
          "558:  header.Flags = RTS_FLAG_OTHER_CMD;",
          "559:  header.NumberOfCommands = 2;",
          "560:  WLog_DBG(TAG, \"Sending FlowControlAck RTS PDU\");",
          "",
          "[Removed Lines]",
          "549:  rpcconn_rts_hdr_t header;",
          "556:  rts_pdu_header_init(&header);",
          "557:  header.frag_length = 56;",
          "",
          "[Added Lines]",
          "551:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "559:  header.header.frag_length = 56;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "562:  AvailableWindow = outChannel->AvailableWindowAdvertised;",
          "563:  ChannelCookie = (BYTE*)&(outChannel->common.Cookie);",
          "564:  outChannel->ReceiverAvailableWindow = outChannel->AvailableWindowAdvertised;",
          "567:  if (!buffer)",
          "568:   return -1;",
          "",
          "[Removed Lines]",
          "565:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "567:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "573:  rts_flow_control_ack_command_write(&buffer[28], BytesReceived, AvailableWindow, ChannelCookie);",
          "575:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "576:  free(buffer);",
          "577:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "574:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "576:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "640:  int status;",
          "641:  BYTE* buffer;",
          "642:  UINT32 length;",
          "644:  RpcInChannel* inChannel = rpc->VirtualConnection->DefaultInChannel;",
          "647:  header.Flags = RTS_FLAG_PING;",
          "648:  header.NumberOfCommands = 0;",
          "649:  WLog_DBG(TAG, \"Sending Ping RTS PDU\");",
          "652:  if (!buffer)",
          "653:   return -1;",
          "657:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "658:  free(buffer);",
          "659:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "643:  rpcconn_rts_hdr_t header;",
          "645:  rts_pdu_header_init(&header);",
          "646:  header.frag_length = 20;",
          "650:  buffer = (BYTE*)malloc(header.frag_length);",
          "656:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "645:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "648:  header.header.frag_length = 20;",
          "652:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "658:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "737: {",
          "738:  int status;",
          "739:  BYTE* buffer;",
          "741:  BYTE* SuccessorChannelCookie;",
          "742:  RpcInChannel* inChannel = rpc->VirtualConnection->DefaultInChannel;",
          "743:  RpcOutChannel* nextOutChannel = rpc->VirtualConnection->NonDefaultOutChannel;",
          "746:  header.Flags = RTS_FLAG_OUT_CHANNEL;",
          "747:  header.NumberOfCommands = 3;",
          "748:  WLog_DBG(TAG, \"Sending OUT_R2/A7 RTS PDU\");",
          "749:  SuccessorChannelCookie = (BYTE*)&(nextOutChannel->common.Cookie);",
          "752:  if (!buffer)",
          "753:   return -1;",
          "",
          "[Removed Lines]",
          "740:  rpcconn_rts_hdr_t header;",
          "744:  rts_pdu_header_init(&header);",
          "745:  header.frag_length = 56;",
          "750:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "742:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "747:  header.header.frag_length = 56;",
          "752:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "757:  rts_cookie_command_write(&buffer[28],",
          "761:  free(buffer);",
          "762:  return (status > 0) ? 1 : -1;",
          "763: }",
          "",
          "[Removed Lines]",
          "760:  status = rpc_channel_write(&inChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "762:  status = rpc_channel_write(&inChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "766: {",
          "767:  int status;",
          "768:  BYTE* buffer;",
          "770:  RpcOutChannel* nextOutChannel = rpc->VirtualConnection->NonDefaultOutChannel;",
          "773:  header.Flags = RTS_FLAG_PING;",
          "774:  header.NumberOfCommands = 1;",
          "775:  WLog_DBG(TAG, \"Sending OUT_R2/C1 RTS PDU\");",
          "778:  if (!buffer)",
          "779:   return -1;",
          "784:  free(buffer);",
          "785:  return (status > 0) ? 1 : -1;",
          "786: }",
          "",
          "[Removed Lines]",
          "769:  rpcconn_rts_hdr_t header;",
          "771:  rts_pdu_header_init(&header);",
          "772:  header.frag_length = 24;",
          "776:  buffer = (BYTE*)malloc(header.frag_length);",
          "783:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "771:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "774:  header.header.frag_length = 24;",
          "778:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "785:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789: {",
          "790:  int status;",
          "791:  BYTE* buffer;",
          "793:  UINT32 ReceiveWindowSize;",
          "794:  BYTE* VirtualConnectionCookie;",
          "795:  BYTE* PredecessorChannelCookie;",
          "",
          "[Removed Lines]",
          "792:  rpcconn_rts_hdr_t header;",
          "",
          "[Added Lines]",
          "794:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "797:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "798:  RpcOutChannel* outChannel = connection->DefaultOutChannel;",
          "799:  RpcOutChannel* nextOutChannel = connection->NonDefaultOutChannel;",
          "802:  header.Flags = RTS_FLAG_RECYCLE_CHANNEL;",
          "803:  header.NumberOfCommands = 5;",
          "804:  WLog_DBG(TAG, \"Sending OUT_R1/A3 RTS PDU\");",
          "",
          "[Removed Lines]",
          "800:  rts_pdu_header_init(&header);",
          "801:  header.frag_length = 96;",
          "",
          "[Added Lines]",
          "803:  header.header.frag_length = 96;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "806:  PredecessorChannelCookie = (BYTE*)&(outChannel->common.Cookie);",
          "807:  SuccessorChannelCookie = (BYTE*)&(nextOutChannel->common.Cookie);",
          "808:  ReceiveWindowSize = outChannel->ReceiveWindow;",
          "811:  if (!buffer)",
          "812:   return -1;",
          "",
          "[Removed Lines]",
          "809:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "811:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "822:  rts_receive_window_size_command_write(&buffer[88],",
          "825:  free(buffer);",
          "826:  return (status > 0) ? 1 : -1;",
          "827: }",
          "",
          "[Removed Lines]",
          "824:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "826:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rts_signature.c||libfreerdp/core/gateway/rts_signature.c": [
          "File: libfreerdp/core/gateway/rts_signature.c -> libfreerdp/core/gateway/rts_signature.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:  buffer = (const BYTE*)rts;",
          "304:  offset = RTS_PDU_HEADER_LENGTH;",
          "307:  for (i = 0; i < rts->NumberOfCommands; i++)",
          "308:  {",
          "",
          "[Removed Lines]",
          "305:  length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "305:  length = rts->header.frag_length - offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   CommandLength = (UINT32)status;",
          "321:   offset += CommandLength;",
          "323:  }",
          "325:  return TRUE;",
          "",
          "[Removed Lines]",
          "322:   length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "322:   length = rts->header.frag_length - offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:  signature->NumberOfCommands = rts->NumberOfCommands;",
          "343:  buffer = (BYTE*)rts;",
          "344:  offset = RTS_PDU_HEADER_LENGTH;",
          "347:  for (i = 0; i < rts->NumberOfCommands; i++)",
          "348:  {",
          "",
          "[Removed Lines]",
          "345:  length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "345:  length = rts->header.frag_length - offset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "357:   CommandLength = (UINT32)status;",
          "358:   offset += CommandLength;",
          "360:  }",
          "362:  return TRUE;",
          "",
          "[Removed Lines]",
          "359:   length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "359:   length = rts->header.frag_length - offset;",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/tsg.c||libfreerdp/core/gateway/tsg.c": [
          "File: libfreerdp/core/gateway/tsg.c -> libfreerdp/core/gateway/tsg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define TAG FREERDP_TAG(\"core.gateway.tsg\")",
          "42: typedef WCHAR* RESOURCENAME;",
          "44: typedef struct _tsendpointinfo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #define TSG_PACKET_TYPE_HEADER 0x00004844",
          "43: #define TSG_PACKET_TYPE_VERSIONCAPS 0x00005643",
          "44: #define TSG_PACKET_TYPE_QUARCONFIGREQUEST 0x00005143",
          "45: #define TSG_PACKET_TYPE_QUARREQUEST 0x00005152",
          "46: #define TSG_PACKET_TYPE_RESPONSE 0x00005052",
          "47: #define TSG_PACKET_TYPE_QUARENC_RESPONSE 0x00004552",
          "48: #define TSG_CAPABILITY_TYPE_NAP 0x00000001",
          "49: #define TSG_PACKET_TYPE_CAPS_RESPONSE 0x00004350",
          "50: #define TSG_PACKET_TYPE_MSGREQUEST_PACKET 0x00004752",
          "51: #define TSG_PACKET_TYPE_MESSAGE_PACKET 0x00004750",
          "52: #define TSG_PACKET_TYPE_AUTH 0x00004054",
          "53: #define TSG_PACKET_TYPE_REAUTH 0x00005250",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  TSG_PACKET_VERSIONCAPS packetVersionCaps;",
          "219: };",
          "221: static BOOL tsg_stream_align(wStream* s, size_t align)",
          "222: {",
          "223:  size_t pos;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: static const char* tsg_packet_id_to_string(UINT32 packetId)",
          "235: {",
          "236:  switch (packetId)",
          "237:  {",
          "238:   case TSG_PACKET_TYPE_HEADER:",
          "239:    return \"TSG_PACKET_TYPE_HEADER\";",
          "240:   case TSG_PACKET_TYPE_VERSIONCAPS:",
          "241:    return \"TSG_PACKET_TYPE_VERSIONCAPS\";",
          "242:   case TSG_PACKET_TYPE_QUARCONFIGREQUEST:",
          "243:    return \"TSG_PACKET_TYPE_QUARCONFIGREQUEST\";",
          "244:   case TSG_PACKET_TYPE_QUARREQUEST:",
          "245:    return \"TSG_PACKET_TYPE_QUARREQUEST\";",
          "246:   case TSG_PACKET_TYPE_RESPONSE:",
          "247:    return \"TSG_PACKET_TYPE_RESPONSE\";",
          "248:   case TSG_PACKET_TYPE_QUARENC_RESPONSE:",
          "249:    return \"TSG_PACKET_TYPE_QUARENC_RESPONSE\";",
          "250:   case TSG_CAPABILITY_TYPE_NAP:",
          "251:    return \"TSG_CAPABILITY_TYPE_NAP\";",
          "252:   case TSG_PACKET_TYPE_CAPS_RESPONSE:",
          "253:    return \"TSG_PACKET_TYPE_CAPS_RESPONSE\";",
          "254:   case TSG_PACKET_TYPE_MSGREQUEST_PACKET:",
          "255:    return \"TSG_PACKET_TYPE_MSGREQUEST_PACKET\";",
          "256:   case TSG_PACKET_TYPE_MESSAGE_PACKET:",
          "257:    return \"TSG_PACKET_TYPE_MESSAGE_PACKET\";",
          "258:   case TSG_PACKET_TYPE_AUTH:",
          "259:    return \"TSG_PACKET_TYPE_AUTH\";",
          "260:   case TSG_PACKET_TYPE_REAUTH:",
          "261:    return \"TSG_PACKET_TYPE_REAUTH\";",
          "262:   default:",
          "263:    return \"UNKNOWN\";",
          "264:  }",
          "265: }",
          "267: static const char* tsg_state_to_string(TSG_STATE state)",
          "268: {",
          "269:  switch (state)",
          "270:  {",
          "271:   case TSG_STATE_INITIAL:",
          "272:    return \"TSG_STATE_INITIAL\";",
          "273:   case TSG_STATE_CONNECTED:",
          "274:    return \"TSG_STATE_CONNECTED\";",
          "275:   case TSG_STATE_AUTHORIZED:",
          "276:    return \"TSG_STATE_AUTHORIZED\";",
          "277:   case TSG_STATE_CHANNEL_CREATED:",
          "278:    return \"TSG_STATE_CHANNEL_CREATED\";",
          "279:   case TSG_STATE_PIPE_CREATED:",
          "280:    return \"TSG_STATE_PIPE_CREATED\";",
          "281:   case TSG_STATE_TUNNEL_CLOSE_PENDING:",
          "282:    return \"TSG_STATE_TUNNEL_CLOSE_PENDING\";",
          "283:   case TSG_STATE_CHANNEL_CLOSE_PENDING:",
          "284:    return \"TSG_STATE_CHANNEL_CLOSE_PENDING\";",
          "285:   case TSG_STATE_FINAL:",
          "286:    return \"TSG_STATE_FINAL\";",
          "287:   default:",
          "288:    return \"TSG_STATE_UNKNOWN\";",
          "289:  }",
          "290: }",
          "292: static BOOL tsg_print(char** buffer, size_t* len, const char* fmt, ...)",
          "293: {",
          "294:  int rc;",
          "295:  va_list ap;",
          "296:  if (!buffer || !len || !fmt)",
          "297:   return FALSE;",
          "298:  va_start(ap, fmt);",
          "299:  rc = vsnprintf(*buffer, *len, fmt, ap);",
          "300:  va_end(ap);",
          "301:  if ((rc < 0) || ((size_t)rc > *len))",
          "302:   return FALSE;",
          "305:  return TRUE;",
          "306: }",
          "308: static BOOL tsg_packet_header_to_string(char** buffer, size_t* length,",
          "309:                                         const TSG_PACKET_HEADER* header)",
          "310: {",
          "311:  return tsg_print(buffer, length,",
          "312:                   \"header { ComponentId=0x%04\" PRIx16 \", PacketId=0x%04\" PRIx16 \" }\",",
          "313:                   header->ComponentId, header->PacketId);",
          "314: }",
          "316: static BOOL tsg_packet_capabilities_to_string(char** buffer, size_t* length,",
          "317:                                               const TSG_PACKET_CAPABILITIES* caps, UINT32 numCaps)",
          "318: {",
          "319:  UINT32 x;",
          "321:  if (!tsg_print(buffer, length, \"capabilities { \"))",
          "322:   return FALSE;",
          "324:  for (x = 0; x < numCaps; x++)",
          "325:  {",
          "326:   const TSG_PACKET_CAPABILITIES* cur = &caps[x];",
          "327:   switch (cur->capabilityType)",
          "328:   {",
          "329:    case TSG_CAPABILITY_TYPE_NAP:",
          "330:     if (!tsg_print(buffer, length, \"%s { capabilities=0x%08\" PRIx32 \" }\",",
          "331:                    tsg_packet_id_to_string(cur->capabilityType),",
          "332:                    cur->tsgPacket.tsgCapNap.capabilities))",
          "333:      return FALSE;",
          "334:     break;",
          "335:    default:",
          "336:     if (!tsg_print(buffer, length, \"TSG_UNKNOWN_CAPABILITY\"))",
          "337:      return FALSE;",
          "338:     break;",
          "339:   }",
          "340:  }",
          "341:  return tsg_print(buffer, length, \" }\");",
          "342: }",
          "344: static BOOL tsg_packet_versioncaps_to_string(char** buffer, size_t* length,",
          "345:                                              const TSG_PACKET_VERSIONCAPS* caps)",
          "346: {",
          "347:  if (!tsg_print(buffer, length, \"versioncaps { \"))",
          "348:   return FALSE;",
          "349:  if (!tsg_packet_header_to_string(buffer, length, &caps->tsgHeader))",
          "350:   return FALSE;",
          "352:  if (!tsg_print(buffer, length, \" \"))",
          "353:   return FALSE;",
          "355:  if (!tsg_packet_capabilities_to_string(buffer, length, caps->tsgCaps, caps->numCapabilities))",
          "356:   return FALSE;",
          "358:  if (!tsg_print(buffer, length,",
          "359:                 \" numCapabilities=0x%08\" PRIx32 \", majorVersion=0x%04\" PRIx16",
          "360:                 \", minorVersion=0x%04\" PRIx16 \", quarantineCapabilities=0x%04\" PRIx16,",
          "361:                 caps->numCapabilities, caps->majorVersion, caps->minorVersion,",
          "362:                 caps->quarantineCapabilities))",
          "363:   return FALSE;",
          "365:  return tsg_print(buffer, length, \" }\");",
          "366: }",
          "368: static const char* tsg_packet_to_string(const TSG_PACKET* packet)",
          "369: {",
          "370:  size_t len = 8192;",
          "371:  static char sbuffer[8193] = { 0 };",
          "372:  char* buffer = sbuffer;",
          "374:  if (!tsg_print(&buffer, &len, \"TSG_PACKET { packetId=%s [0x%08\" PRIx32 \"], \",",
          "375:                 tsg_packet_id_to_string(packet->packetId), packet->packetId))",
          "376:   goto fail;",
          "378:  switch (packet->packetId)",
          "379:  {",
          "380:   case TSG_PACKET_TYPE_HEADER:",
          "381:    if (!tsg_packet_header_to_string(&buffer, &len, packet->tsgPacket.packetHeader))",
          "382:     goto fail;",
          "383:    break;",
          "384:   case TSG_PACKET_TYPE_VERSIONCAPS:",
          "385:    if (!tsg_packet_versioncaps_to_string(&buffer, &len,",
          "386:                                          packet->tsgPacket.packetVersionCaps))",
          "387:     goto fail;",
          "388:    break;",
          "389:   case TSG_PACKET_TYPE_QUARCONFIGREQUEST:",
          "390:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "391:     goto fail;",
          "392:    break;",
          "393:   case TSG_PACKET_TYPE_QUARREQUEST:",
          "394:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "395:     goto fail;",
          "396:    break;",
          "397:   case TSG_PACKET_TYPE_RESPONSE:",
          "398:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "399:     goto fail;",
          "400:    break;",
          "401:   case TSG_PACKET_TYPE_QUARENC_RESPONSE:",
          "402:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "403:     goto fail;",
          "404:    break;",
          "405:   case TSG_CAPABILITY_TYPE_NAP:",
          "406:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "407:     goto fail;",
          "408:    break;",
          "409:   case TSG_PACKET_TYPE_CAPS_RESPONSE:",
          "410:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "411:     goto fail;",
          "412:    break;",
          "413:   case TSG_PACKET_TYPE_MSGREQUEST_PACKET:",
          "414:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "415:     goto fail;",
          "416:    break;",
          "417:   case TSG_PACKET_TYPE_MESSAGE_PACKET:",
          "418:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "419:     goto fail;",
          "420:    break;",
          "421:   case TSG_PACKET_TYPE_AUTH:",
          "422:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "423:     goto fail;",
          "424:    break;",
          "425:   case TSG_PACKET_TYPE_REAUTH:",
          "426:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "427:     goto fail;",
          "428:    break;",
          "429:   default:",
          "430:    if (!tsg_print(&buffer, &len, \"INVALID\"))",
          "431:     goto fail;",
          "432:    break;",
          "433:  }",
          "435:  if (!tsg_print(&buffer, &len, \" }\"))",
          "436:   goto fail;",
          "438: fail:",
          "439:  return sbuffer;",
          "440: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366: {",
          "367:  BOOL rc = FALSE;",
          "368:  BOOL write = TRUE;",
          "",
          "[Removed Lines]",
          "365: static BOOL TsProxyCreateTunnelWriteRequest(rdpTsg* tsg, PTSG_PACKET tsgPacket)",
          "",
          "[Added Lines]",
          "586: static BOOL TsProxyCreateTunnelWriteRequest(rdpTsg* tsg, const PTSG_PACKET tsgPacket)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:   return FALSE;",
          "376:  rpc = tsg->rpc;",
          "378:  s = Stream_New(NULL, 108);",
          "380:  if (!s)",
          "",
          "[Removed Lines]",
          "377:  WLog_DBG(TAG, \"TsProxyCreateTunnelWriteRequest\");",
          "",
          "[Added Lines]",
          "598:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_to_string(tsgPacket));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506:  PTSG_PACKET_VERSIONCAPS versionCaps = NULL;",
          "507:  PTSG_PACKET_CAPS_RESPONSE packetCapsResponse = NULL;",
          "508:  PTSG_PACKET_QUARENC_RESPONSE packetQuarEncResponse = NULL;",
          "511:  if (!pdu)",
          "512:   return FALSE;",
          "",
          "[Removed Lines]",
          "509:  WLog_DBG(TAG, \"TsProxyCreateTunnelReadResponse\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "526:  if ((packet->packetId == TSG_PACKET_TYPE_CAPS_RESPONSE) &&",
          "527:      (SwitchValue == TSG_PACKET_TYPE_CAPS_RESPONSE))",
          "528:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_id_to_string(packet->packetId));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "885:  UINT32 idleTimeout;",
          "886:  PTSG_PACKET packet = NULL;",
          "887:  PTSG_PACKET_RESPONSE packetResponse = NULL;",
          "890:  if (!pdu)",
          "891:   return FALSE;",
          "",
          "[Removed Lines]",
          "888:  WLog_DBG(TAG, \"TsProxyAuthorizeTunnelReadResponse\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "905:  if (packet->packetId == E_PROXY_NAP_ACCESSDENIED)",
          "906:  {",
          "907:   WLog_ERR(TAG, \"status: E_PROXY_NAP_ACCESSDENIED (0x%08X)\", E_PROXY_NAP_ACCESSDENIED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1126:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_id_to_string(packet->packetId));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1059:  TSG_PACKET_MSG_RESPONSE packetMsgResponse = { 0 };",
          "1060:  TSG_PACKET_STRING_MESSAGE packetStringMessage = { 0 };",
          "1061:  TSG_PACKET_REAUTH_MESSAGE packetReauthMessage = { 0 };",
          "",
          "[Removed Lines]",
          "1062:  WLog_DBG(TAG, \"TsProxyMakeTunnelCallReadResponse\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1076:  if ((packet.packetId != TSG_PACKET_TYPE_MESSAGE_PACKET) ||",
          "1077:      (SwitchValue != TSG_PACKET_TYPE_MESSAGE_PACKET))",
          "1078:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_id_to_string(packet.packetId));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1358: static BOOL tsg_transition_to_state(rdpTsg* tsg, TSG_STATE state)",
          "1359: {",
          "1398:  return tsg_set_state(tsg, state);",
          "1399: }",
          "1401: BOOL tsg_proxy_begin(rdpTsg* tsg)",
          "1402: {",
          "1404:  PTSG_CAPABILITY_NAP tsgCapNap;",
          "1405:  PTSG_PACKET_VERSIONCAPS packetVersionCaps;",
          "",
          "[Removed Lines]",
          "1360:  const char* str = \"TSG_STATE_UNKNOWN\";",
          "1362:  switch (state)",
          "1363:  {",
          "1364:   case TSG_STATE_INITIAL:",
          "1365:    str = \"TSG_STATE_INITIAL\";",
          "1366:    break;",
          "1368:   case TSG_STATE_CONNECTED:",
          "1369:    str = \"TSG_STATE_CONNECTED\";",
          "1370:    break;",
          "1372:   case TSG_STATE_AUTHORIZED:",
          "1373:    str = \"TSG_STATE_AUTHORIZED\";",
          "1374:    break;",
          "1376:   case TSG_STATE_CHANNEL_CREATED:",
          "1377:    str = \"TSG_STATE_CHANNEL_CREATED\";",
          "1378:    break;",
          "1380:   case TSG_STATE_PIPE_CREATED:",
          "1381:    str = \"TSG_STATE_PIPE_CREATED\";",
          "1382:    break;",
          "1384:   case TSG_STATE_TUNNEL_CLOSE_PENDING:",
          "1385:    str = \"TSG_STATE_TUNNEL_CLOSE_PENDING\";",
          "1386:    break;",
          "1388:   case TSG_STATE_CHANNEL_CLOSE_PENDING:",
          "1389:    str = \"TSG_STATE_CHANNEL_CLOSE_PENDING\";",
          "1390:    break;",
          "1392:   case TSG_STATE_FINAL:",
          "1393:    str = \"TSG_STATE_FINAL\";",
          "1394:    break;",
          "1395:  }",
          "1397:  WLog_DBG(TAG, \"%s\", str);",
          "1403:  TSG_PACKET tsgPacket;",
          "",
          "[Added Lines]",
          "1584:  const char* oldState = tsg_state_to_string(tsg->state);",
          "1585:  const char* newState = tsg_state_to_string(state);",
          "1587:  WLog_DBG(TAG, \"%s -> %s\", oldState, newState);",
          "1593:  TSG_PACKET tsgPacket = { 0 };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1444: static BOOL tsg_proxy_reauth(rdpTsg* tsg)",
          "1445: {",
          "1447:  PTSG_PACKET_REAUTH packetReauth;",
          "1448:  PTSG_PACKET_VERSIONCAPS packetVersionCaps;",
          "",
          "[Removed Lines]",
          "1446:  TSG_PACKET tsgPacket;",
          "",
          "[Added Lines]",
          "1636:  TSG_PACKET tsgPacket = { 0 };",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1815:  return TRUE;",
          "1816: }",
          "1819: {",
          "1820:  DWORD nCount;",
          "1821:  HANDLE events[64];",
          "1822:  rdpRpc* rpc = tsg->rpc;",
          "",
          "[Removed Lines]",
          "1818: BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, int timeout)",
          "",
          "[Added Lines]",
          "2008: BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, DWORD timeout)",
          "2010:  UINT64 looptimeout = timeout * 1000ULL;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1848:  while (tsg->state != TSG_STATE_PIPE_CREATED)",
          "1849:  {",
          "1852:   if (!tsg_check_event_handles(tsg))",
          "1853:   {",
          "",
          "[Removed Lines]",
          "1850:   WaitForMultipleObjects(nCount, events, FALSE, 250);",
          "",
          "[Added Lines]",
          "2041:   const DWORD polltimeout = 250;",
          "2042:   DWORD status = WaitForMultipleObjects(nCount, events, FALSE, polltimeout);",
          "2043:   if (status == WAIT_TIMEOUT)",
          "2044:   {",
          "2045:    if (timeout > 0)",
          "2046:    {",
          "2047:     if (looptimeout < polltimeout)",
          "2048:      return FALSE;",
          "2049:     looptimeout -= polltimeout;",
          "2050:    }",
          "2051:   }",
          "2052:   else",
          "2053:    looptimeout = timeout * 1000ULL;",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/tsg.h||libfreerdp/core/gateway/tsg.h": [
          "File: libfreerdp/core/gateway/tsg.h -> libfreerdp/core/gateway/tsg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #define TS_GATEWAY_TRANSPORT 0x5452",
          "78: #define TSG_ASYNC_MESSAGE_CONSENT_MESSAGE 0x00000001",
          "79: #define TSG_ASYNC_MESSAGE_SERVICE_MESSAGE 0x00000002",
          "80: #define TSG_ASYNC_MESSAGE_REAUTH 0x00000003",
          "",
          "[Removed Lines]",
          "65: #define TSG_PACKET_TYPE_HEADER 0x00004844",
          "66: #define TSG_PACKET_TYPE_VERSIONCAPS 0x00005643",
          "67: #define TSG_PACKET_TYPE_QUARCONFIGREQUEST 0x00005143",
          "68: #define TSG_PACKET_TYPE_QUARREQUEST 0x00005152",
          "69: #define TSG_PACKET_TYPE_RESPONSE 0x00005052",
          "70: #define TSG_PACKET_TYPE_QUARENC_RESPONSE 0x00004552",
          "71: #define TSG_CAPABILITY_TYPE_NAP 0x00000001",
          "72: #define TSG_PACKET_TYPE_CAPS_RESPONSE 0x00004350",
          "73: #define TSG_PACKET_TYPE_MSGREQUEST_PACKET 0x00004752",
          "74: #define TSG_PACKET_TYPE_MESSAGE_PACKET 0x00004750",
          "75: #define TSG_PACKET_TYPE_AUTH 0x00004054",
          "76: #define TSG_PACKET_TYPE_REAUTH 0x00005250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119: FREERDP_LOCAL BOOL tsg_proxy_begin(rdpTsg* tsg);",
          "122: FREERDP_LOCAL BOOL tsg_disconnect(rdpTsg* tsg);",
          "124: FREERDP_LOCAL BOOL tsg_recv_pdu(rdpTsg* tsg, RPC_PDU* pdu);",
          "",
          "[Removed Lines]",
          "121: FREERDP_LOCAL BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, int timeout);",
          "",
          "[Added Lines]",
          "108: FREERDP_LOCAL BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, DWORD timeout);",
          "",
          "---------------"
        ],
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3510:  {",
          "3511:   WLog_Print(update->log, WLOG_ERROR, \"Stream_GetRemainingLength(s) %\" PRIuz \" < %\" PRIu16,",
          "3512:              Stream_GetRemainingLength(s), orderLength + 7);",
          "",
          "[Removed Lines]",
          "3509:  if (Stream_GetRemainingLength(s) < orderLength + 7)",
          "",
          "[Added Lines]",
          "3509:  if (Stream_GetRemainingLength(s) < orderLength + 7U)",
          "",
          "---------------"
        ],
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   return TRUE;",
          "168:  }",
          "171:   return FALSE;",
          "173:  if (tpktLength)",
          "",
          "[Removed Lines]",
          "170:  if ((len < 4) || ((len - 2) > Stream_GetRemainingLength(s)))",
          "",
          "[Added Lines]",
          "170:  if ((len < 4U) || ((len - 2U) > Stream_GetRemainingLength(s)))",
          "",
          "---------------"
        ],
        "libfreerdp/core/tcp.c||libfreerdp/core/tcp.c": [
          "File: libfreerdp/core/tcp.c -> libfreerdp/core/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1060: }",
          "1062: int freerdp_tcp_connect(rdpContext* context, rdpSettings* settings, const char* hostname, int port,",
          "1064: {",
          "1065:  int sockfd;",
          "1066:  UINT32 optval;",
          "",
          "[Removed Lines]",
          "1063:                         int timeout)",
          "",
          "[Added Lines]",
          "1063:                         DWORD timeout)",
          "",
          "---------------"
        ],
        "libfreerdp/core/tcp.h||libfreerdp/core/tcp.h": [
          "File: libfreerdp/core/tcp.h -> libfreerdp/core/tcp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: FREERDP_LOCAL BIO_METHOD* BIO_s_buffered_socket(void);",
          "66: FREERDP_LOCAL int freerdp_tcp_connect(rdpContext* context, rdpSettings* settings,",
          "69: FREERDP_LOCAL char* freerdp_tcp_get_peer_address(SOCKET sockfd);",
          "",
          "[Removed Lines]",
          "67:                                       const char* hostname, int port, int timeout);",
          "",
          "[Added Lines]",
          "67:                                       const char* hostname, int port, DWORD timeout);",
          "",
          "---------------"
        ],
        "libfreerdp/core/transport.c||libfreerdp/core/transport.c": [
          "File: libfreerdp/core/transport.c -> libfreerdp/core/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:  return TRUE;",
          "355: }",
          "358: {",
          "359:  int sockfd;",
          "360:  BOOL status = FALSE;",
          "",
          "[Removed Lines]",
          "357: BOOL transport_connect(rdpTransport* transport, const char* hostname, UINT16 port, int timeout)",
          "",
          "[Added Lines]",
          "357: BOOL transport_connect(rdpTransport* transport, const char* hostname, UINT16 port, DWORD timeout)",
          "",
          "---------------"
        ],
        "libfreerdp/core/transport.h||libfreerdp/core/transport.h": [
          "File: libfreerdp/core/transport.h -> libfreerdp/core/transport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: FREERDP_LOCAL wStream* transport_send_stream_init(rdpTransport* transport, int size);",
          "83: FREERDP_LOCAL BOOL transport_connect(rdpTransport* transport, const char* hostname, UINT16 port,",
          "85: FREERDP_LOCAL BOOL transport_attach(rdpTransport* transport, int sockfd);",
          "86: FREERDP_LOCAL BOOL transport_disconnect(rdpTransport* transport);",
          "87: FREERDP_LOCAL BOOL transport_connect_rdp(rdpTransport* transport);",
          "",
          "[Removed Lines]",
          "84:                                      int timeout);",
          "",
          "[Added Lines]",
          "84:                                      DWORD timeout);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d166aea89f103b4a9ae31ac7814b7c7caf4f878",
      "candidate_info": {
        "commit_hash": "2d166aea89f103b4a9ae31ac7814b7c7caf4f878",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2d166aea89f103b4a9ae31ac7814b7c7caf4f878",
        "files": [
          "libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/gateway/rdg.h",
          "libfreerdp/core/gateway/rpc.c",
          "libfreerdp/core/gateway/rpc.h",
          "libfreerdp/core/gateway/rpc_bind.c",
          "libfreerdp/core/gateway/rpc_client.c",
          "libfreerdp/core/gateway/rts.c",
          "libfreerdp/core/gateway/rts_signature.c",
          "libfreerdp/core/gateway/tsg.c",
          "libfreerdp/core/gateway/tsg.h",
          "libfreerdp/core/orders.c",
          "libfreerdp/core/rdp.c",
          "libfreerdp/core/tcp.c",
          "libfreerdp/core/tcp.h",
          "libfreerdp/core/transport.c",
          "libfreerdp/core/transport.h"
        ],
        "message": "TSG improvements\n\n* Respect connection timeout during connect\n* Better debug output\n* Cleaned up data types,\n\n(cherry picked from commit ff79636d3311269ec35fc1d6cc4246eef500ad5e)",
        "before_after_code_files": [
          "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c",
          "libfreerdp/core/gateway/rdg.h||libfreerdp/core/gateway/rdg.h",
          "libfreerdp/core/gateway/rpc.c||libfreerdp/core/gateway/rpc.c",
          "libfreerdp/core/gateway/rpc.h||libfreerdp/core/gateway/rpc.h",
          "libfreerdp/core/gateway/rpc_bind.c||libfreerdp/core/gateway/rpc_bind.c",
          "libfreerdp/core/gateway/rpc_client.c||libfreerdp/core/gateway/rpc_client.c",
          "libfreerdp/core/gateway/rts.c||libfreerdp/core/gateway/rts.c",
          "libfreerdp/core/gateway/rts_signature.c||libfreerdp/core/gateway/rts_signature.c",
          "libfreerdp/core/gateway/tsg.c||libfreerdp/core/gateway/tsg.c",
          "libfreerdp/core/gateway/tsg.h||libfreerdp/core/gateway/tsg.h",
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c",
          "libfreerdp/core/tcp.c||libfreerdp/core/tcp.c",
          "libfreerdp/core/tcp.h||libfreerdp/core/tcp.h",
          "libfreerdp/core/transport.c||libfreerdp/core/transport.c",
          "libfreerdp/core/transport.h||libfreerdp/core/transport.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
          ],
          "candidate": [
            "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gateway/rdg.c||libfreerdp/core/gateway/rdg.c": [
          "File: libfreerdp/core/gateway/rdg.c -> libfreerdp/core/gateway/rdg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1167:  return TRUE;",
          "1168: }",
          "1171: {",
          "1172:  BOOL status;",
          "1173:  SOCKET outConnSocket = 0;",
          "",
          "[Removed Lines]",
          "1170: BOOL rdg_connect(rdpRdg* rdg, int timeout, BOOL* rpcFallback)",
          "",
          "[Added Lines]",
          "1170: BOOL rdg_connect(rdpRdg* rdg, DWORD timeout, BOOL* rpcFallback)",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rdg.h||libfreerdp/core/gateway/rdg.h": [
          "File: libfreerdp/core/gateway/rdg.h -> libfreerdp/core/gateway/rdg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: FREERDP_LOCAL BIO* rdg_get_front_bio_and_take_ownership(rdpRdg* rdg);",
          "48: FREERDP_LOCAL DWORD rdg_get_event_handles(rdpRdg* rdg, HANDLE* events, DWORD count);",
          "",
          "[Removed Lines]",
          "47: FREERDP_LOCAL BOOL rdg_connect(rdpRdg* rdg, int timeout, BOOL* rpcFallback);",
          "",
          "[Added Lines]",
          "47: FREERDP_LOCAL BOOL rdg_connect(rdpRdg* rdg, DWORD timeout, BOOL* rpcFallback);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc.c||libfreerdp/core/gateway/rpc.c": [
          "File: libfreerdp/core/gateway/rpc.c -> libfreerdp/core/gateway/rpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  }",
          "140: }",
          "143: {",
          "150: }",
          "152: UINT32 rpc_offset_align(UINT32* offset, UINT32 alignment)",
          "",
          "[Removed Lines]",
          "142: void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_hdr_t* header)",
          "144:  header->common.rpc_vers = rpc->rpc_vers;",
          "145:  header->common.rpc_vers_minor = rpc->rpc_vers_minor;",
          "146:  header->common.packed_drep[0] = rpc->packed_drep[0];",
          "147:  header->common.packed_drep[1] = rpc->packed_drep[1];",
          "148:  header->common.packed_drep[2] = rpc->packed_drep[2];",
          "149:  header->common.packed_drep[3] = rpc->packed_drep[3];",
          "",
          "[Added Lines]",
          "142: void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_common_hdr_t* header)",
          "144:  header->rpc_vers = rpc->rpc_vers;",
          "145:  header->rpc_vers_minor = rpc->rpc_vers_minor;",
          "146:  header->packed_drep[0] = rpc->packed_drep[0];",
          "147:  header->packed_drep[1] = rpc->packed_drep[1];",
          "148:  header->packed_drep[2] = rpc->packed_drep[2];",
          "149:  header->packed_drep[3] = rpc->packed_drep[3];",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc.h||libfreerdp/core/gateway/rpc.h": [
          "File: libfreerdp/core/gateway/rpc.h -> libfreerdp/core/gateway/rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #pragma pack(push, 1)",
          "49: typedef struct",
          "50: {",
          "53:  UINT16 Flags;",
          "54:  UINT16 NumberOfCommands;",
          "",
          "[Removed Lines]",
          "37: #define DEFINE_RPC_COMMON_FIELDS() \\",
          "38:  BYTE rpc_vers;                 \\",
          "39:  BYTE rpc_vers_minor;           \\",
          "40:  BYTE ptype;                    \\",
          "41:  BYTE pfc_flags;                \\",
          "42:  BYTE packed_drep[4];           \\",
          "43:  UINT16 frag_length;            \\",
          "44:  UINT16 auth_length;            \\",
          "45:  UINT32 call_id",
          "47: #define RPC_COMMON_FIELDS_LENGTH 16",
          "51:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "37: typedef struct",
          "38: {",
          "39:  BYTE rpc_vers;",
          "40:  BYTE rpc_vers_minor;",
          "41:  BYTE ptype;",
          "42:  BYTE pfc_flags;",
          "43:  BYTE packed_drep[4];",
          "44:  UINT16 frag_length;",
          "45:  UINT16 auth_length;",
          "46:  UINT32 call_id;",
          "47: } rpcconn_common_hdr_t;",
          "49: #define RPC_COMMON_FIELDS_LENGTH sizeof(rpcconn_common_hdr_t)",
          "53:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: #pragma pack(push, 1)",
          "149: typedef UINT16 p_context_id_t;",
          "150: typedef UINT16 p_reject_reason_t;",
          "",
          "[Removed Lines]",
          "144: typedef struct",
          "145: {",
          "146:  DEFINE_RPC_COMMON_FIELDS();",
          "147: } rpcconn_common_hdr_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315: typedef struct",
          "316: {",
          "319:  UINT16 max_xmit_frag;",
          "320:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "317:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "314:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329: typedef struct",
          "330: {",
          "333:  UINT16 max_xmit_frag;",
          "334:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "331:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "328:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "346: typedef struct",
          "347: {",
          "350:  UINT16 max_xmit_frag;",
          "351:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "348:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "345:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359: typedef struct",
          "360: {",
          "363:  UINT16 max_xmit_frag;",
          "364:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "361:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "358:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "376: typedef struct",
          "377: {",
          "380:  UINT16 max_xmit_frag;",
          "381:  UINT16 max_recv_frag;",
          "",
          "[Removed Lines]",
          "378:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "375:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386: typedef struct",
          "387: {",
          "390:  p_reject_reason_t provider_reject_reason;",
          "",
          "[Removed Lines]",
          "388:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "385:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "395: typedef struct",
          "396: {",
          "399:  auth_verifier_co_t auth_verifier;",
          "",
          "[Removed Lines]",
          "397:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "394:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "461: typedef struct",
          "462: {",
          "465:  UINT32 alloc_hint;",
          "466:  p_context_id_t p_cont_id;",
          "",
          "[Removed Lines]",
          "463:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "460:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "480: typedef struct",
          "481: {",
          "484:  auth_verifier_co_t auth_verifier;",
          "485: } rpcconn_orphaned_hdr_t;",
          "487: typedef struct",
          "488: {",
          "491:  UINT32 alloc_hint;",
          "",
          "[Removed Lines]",
          "482:  DEFINE_RPC_COMMON_FIELDS();",
          "489:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "479:  rpcconn_common_hdr_t header;",
          "486:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "506: typedef struct",
          "507: {",
          "510:  UINT32 alloc_hint;",
          "511:  p_context_id_t p_cont_id;",
          "",
          "[Removed Lines]",
          "508:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "505:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "523: typedef struct",
          "524: {",
          "526: } rpcconn_shutdown_hdr_t;",
          "528: typedef union {",
          "",
          "[Removed Lines]",
          "525:  DEFINE_RPC_COMMON_FIELDS();",
          "",
          "[Added Lines]",
          "522:  rpcconn_common_hdr_t header;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "768: };",
          "770: FREERDP_LOCAL void rpc_pdu_header_print(rpcconn_hdr_t* header);",
          "773: FREERDP_LOCAL UINT32 rpc_offset_align(UINT32* offset, UINT32 alignment);",
          "774: FREERDP_LOCAL UINT32 rpc_offset_pad(UINT32* offset, UINT32 pad);",
          "",
          "[Removed Lines]",
          "771: FREERDP_LOCAL void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_hdr_t* header);",
          "",
          "[Added Lines]",
          "768: FREERDP_LOCAL void rpc_pdu_header_init(rdpRpc* rpc, rpcconn_common_hdr_t* header);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc_bind.c||libfreerdp/core/gateway/rpc_bind.c": [
          "File: libfreerdp/core/gateway/rpc_bind.c -> libfreerdp/core/gateway/rpc_bind.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  if (!sbuffer)",
          "191:   goto fail;",
          "195:  bind_pdu->auth_verifier.auth_value = sbuffer->pvBuffer;",
          "199:  bind_pdu->max_xmit_frag = rpc->max_xmit_frag;",
          "200:  bind_pdu->max_recv_frag = rpc->max_recv_frag;",
          "201:  bind_pdu->assoc_group_id = 0;",
          "",
          "[Removed Lines]",
          "193:  rpc_pdu_header_init(rpc, (rpcconn_hdr_t*)bind_pdu);",
          "194:  bind_pdu->auth_length = (UINT16)sbuffer->cbBuffer;",
          "196:  bind_pdu->ptype = PTYPE_BIND;",
          "197:  bind_pdu->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_SUPPORT_HEADER_SIGN | PFC_CONC_MPX;",
          "198:  bind_pdu->call_id = 2;",
          "",
          "[Added Lines]",
          "193:  rpc_pdu_header_init(rpc, &bind_pdu->header);",
          "194:  bind_pdu->header.auth_length = (UINT16)sbuffer->cbBuffer;",
          "196:  bind_pdu->header.ptype = PTYPE_BIND;",
          "197:  bind_pdu->header.pfc_flags =",
          "198:      PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_SUPPORT_HEADER_SIGN | PFC_CONC_MPX;",
          "199:  bind_pdu->header.call_id = 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:  bind_pdu->auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "241:  bind_pdu->auth_verifier.auth_reserved = 0x00;",
          "242:  bind_pdu->auth_verifier.auth_context_id = 0x00000000;",
          "247:  if (!buffer)",
          "248:   goto fail;",
          "",
          "[Removed Lines]",
          "243:  offset += (8 + bind_pdu->auth_length);",
          "244:  bind_pdu->frag_length = offset;",
          "245:  buffer = (BYTE*)malloc(bind_pdu->frag_length);",
          "",
          "[Added Lines]",
          "244:  offset += (8 + bind_pdu->header.auth_length);",
          "245:  bind_pdu->header.frag_length = offset;",
          "246:  buffer = (BYTE*)malloc(bind_pdu->header.frag_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:  offset = 116;",
          "257:  rpc_offset_pad(&offset, bind_pdu->auth_verifier.auth_pad_length);",
          "258:  CopyMemory(&buffer[offset], &bind_pdu->auth_verifier.auth_type, 8);",
          "264:  if (!clientCall)",
          "265:   goto fail;",
          "",
          "[Removed Lines]",
          "259:  CopyMemory(&buffer[offset + 8], bind_pdu->auth_verifier.auth_value, bind_pdu->auth_length);",
          "260:  offset += (8 + bind_pdu->auth_length);",
          "261:  length = bind_pdu->frag_length;",
          "262:  clientCall = rpc_client_call_new(bind_pdu->call_id, 0);",
          "",
          "[Added Lines]",
          "260:  CopyMemory(&buffer[offset + 8], bind_pdu->auth_verifier.auth_value,",
          "261:             bind_pdu->header.auth_length);",
          "262:  offset += (8 + bind_pdu->header.auth_length);",
          "263:  length = bind_pdu->header.frag_length;",
          "264:  clientCall = rpc_client_call_new(bind_pdu->header.call_id, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:   return -1;",
          "375:  }",
          "379:  auth_3_pdu->auth_verifier.auth_value = sbuffer->pvBuffer;",
          "383:  auth_3_pdu->max_xmit_frag = rpc->max_xmit_frag;",
          "384:  auth_3_pdu->max_recv_frag = rpc->max_recv_frag;",
          "385:  offset = 20;",
          "",
          "[Removed Lines]",
          "377:  rpc_pdu_header_init(rpc, (rpcconn_hdr_t*)auth_3_pdu);",
          "378:  auth_3_pdu->auth_length = (UINT16)sbuffer->cbBuffer;",
          "380:  auth_3_pdu->ptype = PTYPE_RPC_AUTH_3;",
          "381:  auth_3_pdu->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_CONC_MPX;",
          "382:  auth_3_pdu->call_id = 2;",
          "",
          "[Added Lines]",
          "379:  rpc_pdu_header_init(rpc, &auth_3_pdu->header);",
          "380:  auth_3_pdu->header.auth_length = (UINT16)sbuffer->cbBuffer;",
          "382:  auth_3_pdu->header.ptype = PTYPE_RPC_AUTH_3;",
          "383:  auth_3_pdu->header.pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG | PFC_CONC_MPX;",
          "384:  auth_3_pdu->header.call_id = 2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "388:  auth_3_pdu->auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "389:  auth_3_pdu->auth_verifier.auth_reserved = 0x00;",
          "390:  auth_3_pdu->auth_verifier.auth_context_id = 0x00000000;",
          "395:  if (!buffer)",
          "396:  {",
          "",
          "[Removed Lines]",
          "391:  offset += (8 + auth_3_pdu->auth_length);",
          "392:  auth_3_pdu->frag_length = offset;",
          "393:  buffer = (BYTE*)malloc(auth_3_pdu->frag_length);",
          "",
          "[Added Lines]",
          "393:  offset += (8 + auth_3_pdu->header.auth_length);",
          "394:  auth_3_pdu->header.frag_length = offset;",
          "395:  buffer = (BYTE*)malloc(auth_3_pdu->header.frag_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "402:  offset = 20;",
          "403:  rpc_offset_pad(&offset, auth_3_pdu->auth_verifier.auth_pad_length);",
          "404:  CopyMemory(&buffer[offset], &auth_3_pdu->auth_verifier.auth_type, 8);",
          "410:  if (ArrayList_Add(rpc->client->ClientCallList, clientCall) >= 0)",
          "411:  {",
          "",
          "[Removed Lines]",
          "405:  CopyMemory(&buffer[offset + 8], auth_3_pdu->auth_verifier.auth_value, auth_3_pdu->auth_length);",
          "406:  offset += (8 + auth_3_pdu->auth_length);",
          "407:  length = auth_3_pdu->frag_length;",
          "408:  clientCall = rpc_client_call_new(auth_3_pdu->call_id, 0);",
          "",
          "[Added Lines]",
          "407:  CopyMemory(&buffer[offset + 8], auth_3_pdu->auth_verifier.auth_value,",
          "408:             auth_3_pdu->header.auth_length);",
          "409:  offset += (8 + auth_3_pdu->header.auth_length);",
          "410:  length = auth_3_pdu->header.frag_length;",
          "411:  clientCall = rpc_client_call_new(auth_3_pdu->header.call_id, 0);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rpc_client.c||libfreerdp/core/gateway/rpc_client.c": [
          "File: libfreerdp/core/gateway/rpc_client.c -> libfreerdp/core/gateway/rpc_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:  SecBufferDesc Message;",
          "896:  RpcClientCall* clientCall = NULL;",
          "897:  rdpNtlm* ntlm;",
          "899:  RpcVirtualConnection* connection;",
          "900:  RpcInChannel* inChannel;",
          "901:  size_t length;",
          "",
          "[Removed Lines]",
          "898:  rpcconn_request_hdr_t* request_pdu = NULL;",
          "",
          "[Added Lines]",
          "898:  rpcconn_request_hdr_t request_pdu = { 0 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "931:  if (ntlm_client_query_auth_size(ntlm) < 0)",
          "932:   goto fail;",
          "939:  size = ntlm_client_get_context_max_size(ntlm);",
          "941:  if (size < 0)",
          "942:   goto fail;",
          "954:  if (!clientCall)",
          "955:   goto fail;",
          "",
          "[Removed Lines]",
          "934:  request_pdu = (rpcconn_request_hdr_t*)calloc(1, sizeof(rpcconn_request_hdr_t));",
          "936:  if (!request_pdu)",
          "937:   goto fail;",
          "944:  rpc_pdu_header_init(rpc, (rpcconn_hdr_t*)request_pdu);",
          "945:  request_pdu->ptype = PTYPE_REQUEST;",
          "946:  request_pdu->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "947:  request_pdu->auth_length = (UINT16)size;",
          "948:  request_pdu->call_id = rpc->CallId++;",
          "949:  request_pdu->alloc_hint = length;",
          "950:  request_pdu->p_cont_id = 0x0000;",
          "951:  request_pdu->opnum = opnum;",
          "952:  clientCall = rpc_client_call_new(request_pdu->call_id, request_pdu->opnum);",
          "",
          "[Added Lines]",
          "939:  rpc_pdu_header_init(rpc, &request_pdu.header);",
          "940:  request_pdu.header.ptype = PTYPE_REQUEST;",
          "941:  request_pdu.header.pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "942:  request_pdu.header.auth_length = (UINT16)size;",
          "943:  request_pdu.header.call_id = rpc->CallId++;",
          "944:  request_pdu.alloc_hint = length;",
          "945:  request_pdu.p_cont_id = 0x0000;",
          "946:  request_pdu.opnum = opnum;",
          "947:  clientCall = rpc_client_call_new(request_pdu.header.call_id, request_pdu.opnum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "960:   goto fail;",
          "961:  }",
          "967:  offset = 24;",
          "968:  stub_data_pad = rpc_offset_align(&offset, 8);",
          "969:  offset += length;",
          "979:  if (!buffer)",
          "980:   goto fail;",
          "983:  offset = 24;",
          "984:  rpc_offset_pad(&offset, stub_data_pad);",
          "986:  offset += length;",
          "989:  offset += 8;",
          "",
          "[Removed Lines]",
          "963:  if (request_pdu->opnum == TsProxySetupReceivePipeOpnum)",
          "964:   rpc->PipeCallId = request_pdu->call_id;",
          "966:  request_pdu->stub_data = Stream_Buffer(s);",
          "970:  request_pdu->auth_verifier.auth_pad_length = rpc_offset_align(&offset, 4);",
          "971:  request_pdu->auth_verifier.auth_type = RPC_C_AUTHN_WINNT;",
          "972:  request_pdu->auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "973:  request_pdu->auth_verifier.auth_reserved = 0x00;",
          "974:  request_pdu->auth_verifier.auth_context_id = 0x00000000;",
          "975:  offset += (8 + request_pdu->auth_length);",
          "976:  request_pdu->frag_length = offset;",
          "977:  buffer = (BYTE*)calloc(1, request_pdu->frag_length);",
          "982:  CopyMemory(buffer, request_pdu, 24);",
          "985:  CopyMemory(&buffer[offset], request_pdu->stub_data, length);",
          "987:  rpc_offset_pad(&offset, request_pdu->auth_verifier.auth_pad_length);",
          "988:  CopyMemory(&buffer[offset], &request_pdu->auth_verifier.auth_type, 8);",
          "",
          "[Added Lines]",
          "958:  if (request_pdu.opnum == TsProxySetupReceivePipeOpnum)",
          "959:   rpc->PipeCallId = request_pdu.header.call_id;",
          "961:  request_pdu.stub_data = Stream_Buffer(s);",
          "965:  request_pdu.auth_verifier.auth_pad_length = rpc_offset_align(&offset, 4);",
          "966:  request_pdu.auth_verifier.auth_type = RPC_C_AUTHN_WINNT;",
          "967:  request_pdu.auth_verifier.auth_level = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;",
          "968:  request_pdu.auth_verifier.auth_reserved = 0x00;",
          "969:  request_pdu.auth_verifier.auth_context_id = 0x00000000;",
          "970:  offset += (8 + request_pdu.header.auth_length);",
          "971:  request_pdu.header.frag_length = offset;",
          "972:  buffer = (BYTE*)calloc(1, request_pdu.header.frag_length);",
          "977:  CopyMemory(buffer, &request_pdu, 24);",
          "980:  CopyMemory(&buffer[offset], request_pdu.stub_data, length);",
          "982:  rpc_offset_pad(&offset, request_pdu.auth_verifier.auth_pad_length);",
          "983:  CopyMemory(&buffer[offset], &request_pdu.auth_verifier.auth_type, 8);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1007:  CopyMemory(&buffer[offset], Buffers[1].pvBuffer, Buffers[1].cbBuffer);",
          "1008:  offset += Buffers[1].cbBuffer;",
          "1011:   goto fail;",
          "1013:  rc = TRUE;",
          "1014: fail:",
          "1015:  free(buffer);",
          "1016:  free(Buffers[1].pvBuffer);",
          "1018:  Stream_Free(s, TRUE);",
          "1019:  return rc;",
          "1020: }",
          "",
          "[Removed Lines]",
          "1010:  if (rpc_in_channel_send_pdu(inChannel, buffer, request_pdu->frag_length) < 0)",
          "1017:  free(request_pdu);",
          "",
          "[Added Lines]",
          "1005:  if (rpc_in_channel_send_pdu(inChannel, buffer, request_pdu.header.frag_length) < 0)",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rts.c||libfreerdp/core/gateway/rts.c": [
          "File: libfreerdp/core/gateway/rts.c -> libfreerdp/core/gateway/rts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: {",
          "83: }",
          "85: static int rts_receive_window_size_command_read(rdpRpc* rpc, BYTE* buffer, UINT32 length,",
          "",
          "[Removed Lines]",
          "70: static void rts_pdu_header_init(rpcconn_rts_hdr_t* header)",
          "72:  ZeroMemory(header, sizeof(*header));",
          "73:  header->rpc_vers = 5;",
          "74:  header->rpc_vers_minor = 0;",
          "75:  header->ptype = PTYPE_RTS;",
          "76:  header->packed_drep[0] = 0x10;",
          "77:  header->packed_drep[1] = 0x00;",
          "78:  header->packed_drep[2] = 0x00;",
          "79:  header->packed_drep[3] = 0x00;",
          "80:  header->pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "81:  header->auth_length = 0;",
          "82:  header->call_id = 0;",
          "",
          "[Added Lines]",
          "70: static rpcconn_rts_hdr_t rts_pdu_header_init(void)",
          "72:  rpcconn_rts_hdr_t header = { 0 };",
          "73:  header.header.rpc_vers = 5;",
          "74:  header.header.rpc_vers_minor = 0;",
          "75:  header.header.ptype = PTYPE_RTS;",
          "76:  header.header.packed_drep[0] = 0x10;",
          "77:  header.header.packed_drep[1] = 0x00;",
          "78:  header.header.packed_drep[2] = 0x00;",
          "79:  header.header.packed_drep[3] = 0x00;",
          "80:  header.header.pfc_flags = PFC_FIRST_FRAG | PFC_LAST_FRAG;",
          "81:  header.header.auth_length = 0;",
          "82:  header.header.call_id = 0;",
          "84:  return header;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406: {",
          "407:  int status;",
          "408:  BYTE* buffer;",
          "410:  UINT32 ReceiveWindowSize;",
          "411:  BYTE* OUTChannelCookie;",
          "412:  BYTE* VirtualConnectionCookie;",
          "413:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "414:  RpcOutChannel* outChannel = connection->DefaultOutChannel;",
          "417:  header.Flags = RTS_FLAG_NONE;",
          "418:  header.NumberOfCommands = 4;",
          "419:  WLog_DBG(TAG, \"Sending CONN/A1 RTS PDU\");",
          "420:  VirtualConnectionCookie = (BYTE*)&(connection->Cookie);",
          "421:  OUTChannelCookie = (BYTE*)&(outChannel->common.Cookie);",
          "422:  ReceiveWindowSize = outChannel->ReceiveWindow;",
          "425:  if (!buffer)",
          "426:   return -1;",
          "",
          "[Removed Lines]",
          "409:  rpcconn_rts_hdr_t header;",
          "415:  rts_pdu_header_init(&header);",
          "416:  header.frag_length = 76;",
          "423:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "411:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "418:  header.header.frag_length = 76;",
          "425:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  rts_receive_window_size_command_write(&buffer[68],",
          "436:  free(buffer);",
          "437:  return (status > 0) ? 1 : -1;",
          "438: }",
          "",
          "[Removed Lines]",
          "435:  status = rpc_channel_write(&outChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "437:  status = rpc_channel_write(&outChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453:  int status;",
          "454:  BYTE* buffer;",
          "455:  UINT32 length;",
          "457:  BYTE* INChannelCookie;",
          "458:  BYTE* AssociationGroupId;",
          "459:  BYTE* VirtualConnectionCookie;",
          "460:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "461:  RpcInChannel* inChannel = connection->DefaultInChannel;",
          "464:  header.Flags = RTS_FLAG_NONE;",
          "465:  header.NumberOfCommands = 6;",
          "466:  WLog_DBG(TAG, \"Sending CONN/B1 RTS PDU\");",
          "467:  VirtualConnectionCookie = (BYTE*)&(connection->Cookie);",
          "468:  INChannelCookie = (BYTE*)&(inChannel->common.Cookie);",
          "469:  AssociationGroupId = (BYTE*)&(connection->AssociationGroupId);",
          "472:  if (!buffer)",
          "473:   return -1;",
          "",
          "[Removed Lines]",
          "456:  rpcconn_rts_hdr_t header;",
          "462:  rts_pdu_header_init(&header);",
          "463:  header.frag_length = 104;",
          "470:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "458:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "465:  header.header.frag_length = 104;",
          "472:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:  rts_association_group_id_command_write(&buffer[84],",
          "487:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "488:  free(buffer);",
          "489:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "486:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "488:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:  int status;",
          "521:  BYTE* buffer;",
          "522:  UINT32 length;",
          "524:  RpcInChannel* inChannel = rpc->VirtualConnection->DefaultInChannel;",
          "527:  header.Flags = RTS_FLAG_OTHER_CMD;",
          "528:  header.NumberOfCommands = 1;",
          "529:  WLog_DBG(TAG, \"Sending Keep-Alive RTS PDU\");",
          "532:  if (!buffer)",
          "533:   return -1;",
          "",
          "[Removed Lines]",
          "523:  rpcconn_rts_hdr_t header;",
          "525:  rts_pdu_header_init(&header);",
          "526:  header.frag_length = 28;",
          "530:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "525:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "528:  header.header.frag_length = 28;",
          "532:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "536:  rts_client_keepalive_command_write(",
          "539:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "540:  free(buffer);",
          "541:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "538:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "540:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "546:  int status;",
          "547:  BYTE* buffer;",
          "548:  UINT32 length;",
          "550:  UINT32 BytesReceived;",
          "551:  UINT32 AvailableWindow;",
          "552:  BYTE* ChannelCookie;",
          "553:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "554:  RpcInChannel* inChannel = connection->DefaultInChannel;",
          "555:  RpcOutChannel* outChannel = connection->DefaultOutChannel;",
          "558:  header.Flags = RTS_FLAG_OTHER_CMD;",
          "559:  header.NumberOfCommands = 2;",
          "560:  WLog_DBG(TAG, \"Sending FlowControlAck RTS PDU\");",
          "",
          "[Removed Lines]",
          "549:  rpcconn_rts_hdr_t header;",
          "556:  rts_pdu_header_init(&header);",
          "557:  header.frag_length = 56;",
          "",
          "[Added Lines]",
          "551:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "559:  header.header.frag_length = 56;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "562:  AvailableWindow = outChannel->AvailableWindowAdvertised;",
          "563:  ChannelCookie = (BYTE*)&(outChannel->common.Cookie);",
          "564:  outChannel->ReceiverAvailableWindow = outChannel->AvailableWindowAdvertised;",
          "567:  if (!buffer)",
          "568:   return -1;",
          "",
          "[Removed Lines]",
          "565:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "567:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "573:  rts_flow_control_ack_command_write(&buffer[28], BytesReceived, AvailableWindow, ChannelCookie);",
          "575:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "576:  free(buffer);",
          "577:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "574:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "576:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "640:  int status;",
          "641:  BYTE* buffer;",
          "642:  UINT32 length;",
          "644:  RpcInChannel* inChannel = rpc->VirtualConnection->DefaultInChannel;",
          "647:  header.Flags = RTS_FLAG_PING;",
          "648:  header.NumberOfCommands = 0;",
          "649:  WLog_DBG(TAG, \"Sending Ping RTS PDU\");",
          "652:  if (!buffer)",
          "653:   return -1;",
          "657:  status = rpc_channel_write(&inChannel->common, buffer, length);",
          "658:  free(buffer);",
          "659:  return (status > 0) ? 1 : -1;",
          "",
          "[Removed Lines]",
          "643:  rpcconn_rts_hdr_t header;",
          "645:  rts_pdu_header_init(&header);",
          "646:  header.frag_length = 20;",
          "650:  buffer = (BYTE*)malloc(header.frag_length);",
          "656:  length = header.frag_length;",
          "",
          "[Added Lines]",
          "645:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "648:  header.header.frag_length = 20;",
          "652:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "658:  length = header.header.frag_length;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "737: {",
          "738:  int status;",
          "739:  BYTE* buffer;",
          "741:  BYTE* SuccessorChannelCookie;",
          "742:  RpcInChannel* inChannel = rpc->VirtualConnection->DefaultInChannel;",
          "743:  RpcOutChannel* nextOutChannel = rpc->VirtualConnection->NonDefaultOutChannel;",
          "746:  header.Flags = RTS_FLAG_OUT_CHANNEL;",
          "747:  header.NumberOfCommands = 3;",
          "748:  WLog_DBG(TAG, \"Sending OUT_R2/A7 RTS PDU\");",
          "749:  SuccessorChannelCookie = (BYTE*)&(nextOutChannel->common.Cookie);",
          "752:  if (!buffer)",
          "753:   return -1;",
          "",
          "[Removed Lines]",
          "740:  rpcconn_rts_hdr_t header;",
          "744:  rts_pdu_header_init(&header);",
          "745:  header.frag_length = 56;",
          "750:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "742:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "747:  header.header.frag_length = 56;",
          "752:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "757:  rts_cookie_command_write(&buffer[28],",
          "761:  free(buffer);",
          "762:  return (status > 0) ? 1 : -1;",
          "763: }",
          "",
          "[Removed Lines]",
          "760:  status = rpc_channel_write(&inChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "762:  status = rpc_channel_write(&inChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "766: {",
          "767:  int status;",
          "768:  BYTE* buffer;",
          "770:  RpcOutChannel* nextOutChannel = rpc->VirtualConnection->NonDefaultOutChannel;",
          "773:  header.Flags = RTS_FLAG_PING;",
          "774:  header.NumberOfCommands = 1;",
          "775:  WLog_DBG(TAG, \"Sending OUT_R2/C1 RTS PDU\");",
          "778:  if (!buffer)",
          "779:   return -1;",
          "784:  free(buffer);",
          "785:  return (status > 0) ? 1 : -1;",
          "786: }",
          "",
          "[Removed Lines]",
          "769:  rpcconn_rts_hdr_t header;",
          "771:  rts_pdu_header_init(&header);",
          "772:  header.frag_length = 24;",
          "776:  buffer = (BYTE*)malloc(header.frag_length);",
          "783:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "771:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "774:  header.header.frag_length = 24;",
          "778:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "785:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "789: {",
          "790:  int status;",
          "791:  BYTE* buffer;",
          "793:  UINT32 ReceiveWindowSize;",
          "794:  BYTE* VirtualConnectionCookie;",
          "795:  BYTE* PredecessorChannelCookie;",
          "",
          "[Removed Lines]",
          "792:  rpcconn_rts_hdr_t header;",
          "",
          "[Added Lines]",
          "794:  rpcconn_rts_hdr_t header = rts_pdu_header_init();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "797:  RpcVirtualConnection* connection = rpc->VirtualConnection;",
          "798:  RpcOutChannel* outChannel = connection->DefaultOutChannel;",
          "799:  RpcOutChannel* nextOutChannel = connection->NonDefaultOutChannel;",
          "802:  header.Flags = RTS_FLAG_RECYCLE_CHANNEL;",
          "803:  header.NumberOfCommands = 5;",
          "804:  WLog_DBG(TAG, \"Sending OUT_R1/A3 RTS PDU\");",
          "",
          "[Removed Lines]",
          "800:  rts_pdu_header_init(&header);",
          "801:  header.frag_length = 96;",
          "",
          "[Added Lines]",
          "803:  header.header.frag_length = 96;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "806:  PredecessorChannelCookie = (BYTE*)&(outChannel->common.Cookie);",
          "807:  SuccessorChannelCookie = (BYTE*)&(nextOutChannel->common.Cookie);",
          "808:  ReceiveWindowSize = outChannel->ReceiveWindow;",
          "811:  if (!buffer)",
          "812:   return -1;",
          "",
          "[Removed Lines]",
          "809:  buffer = (BYTE*)malloc(header.frag_length);",
          "",
          "[Added Lines]",
          "811:  buffer = (BYTE*)malloc(header.header.frag_length);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "822:  rts_receive_window_size_command_write(&buffer[88],",
          "825:  free(buffer);",
          "826:  return (status > 0) ? 1 : -1;",
          "827: }",
          "",
          "[Removed Lines]",
          "824:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.frag_length);",
          "",
          "[Added Lines]",
          "826:  status = rpc_channel_write(&nextOutChannel->common, buffer, header.header.frag_length);",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/rts_signature.c||libfreerdp/core/gateway/rts_signature.c": [
          "File: libfreerdp/core/gateway/rts_signature.c -> libfreerdp/core/gateway/rts_signature.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:  buffer = (const BYTE*)rts;",
          "304:  offset = RTS_PDU_HEADER_LENGTH;",
          "307:  for (i = 0; i < rts->NumberOfCommands; i++)",
          "308:  {",
          "",
          "[Removed Lines]",
          "305:  length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "305:  length = rts->header.frag_length - offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   CommandLength = (UINT32)status;",
          "321:   offset += CommandLength;",
          "323:  }",
          "325:  return TRUE;",
          "",
          "[Removed Lines]",
          "322:   length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "322:   length = rts->header.frag_length - offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:  signature->NumberOfCommands = rts->NumberOfCommands;",
          "343:  buffer = (BYTE*)rts;",
          "344:  offset = RTS_PDU_HEADER_LENGTH;",
          "347:  for (i = 0; i < rts->NumberOfCommands; i++)",
          "348:  {",
          "",
          "[Removed Lines]",
          "345:  length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "345:  length = rts->header.frag_length - offset;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "357:   CommandLength = (UINT32)status;",
          "358:   offset += CommandLength;",
          "360:  }",
          "362:  return TRUE;",
          "",
          "[Removed Lines]",
          "359:   length = rts->frag_length - offset;",
          "",
          "[Added Lines]",
          "359:   length = rts->header.frag_length - offset;",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/tsg.c||libfreerdp/core/gateway/tsg.c": [
          "File: libfreerdp/core/gateway/tsg.c -> libfreerdp/core/gateway/tsg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #define TAG FREERDP_TAG(\"core.gateway.tsg\")",
          "42: typedef WCHAR* RESOURCENAME;",
          "44: typedef struct _tsendpointinfo",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #define TSG_PACKET_TYPE_HEADER 0x00004844",
          "43: #define TSG_PACKET_TYPE_VERSIONCAPS 0x00005643",
          "44: #define TSG_PACKET_TYPE_QUARCONFIGREQUEST 0x00005143",
          "45: #define TSG_PACKET_TYPE_QUARREQUEST 0x00005152",
          "46: #define TSG_PACKET_TYPE_RESPONSE 0x00005052",
          "47: #define TSG_PACKET_TYPE_QUARENC_RESPONSE 0x00004552",
          "48: #define TSG_CAPABILITY_TYPE_NAP 0x00000001",
          "49: #define TSG_PACKET_TYPE_CAPS_RESPONSE 0x00004350",
          "50: #define TSG_PACKET_TYPE_MSGREQUEST_PACKET 0x00004752",
          "51: #define TSG_PACKET_TYPE_MESSAGE_PACKET 0x00004750",
          "52: #define TSG_PACKET_TYPE_AUTH 0x00004054",
          "53: #define TSG_PACKET_TYPE_REAUTH 0x00005250",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:  TSG_PACKET_VERSIONCAPS packetVersionCaps;",
          "219: };",
          "221: static BOOL tsg_stream_align(wStream* s, size_t align)",
          "222: {",
          "223:  size_t pos;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: static const char* tsg_packet_id_to_string(UINT32 packetId)",
          "235: {",
          "236:  switch (packetId)",
          "237:  {",
          "238:   case TSG_PACKET_TYPE_HEADER:",
          "239:    return \"TSG_PACKET_TYPE_HEADER\";",
          "240:   case TSG_PACKET_TYPE_VERSIONCAPS:",
          "241:    return \"TSG_PACKET_TYPE_VERSIONCAPS\";",
          "242:   case TSG_PACKET_TYPE_QUARCONFIGREQUEST:",
          "243:    return \"TSG_PACKET_TYPE_QUARCONFIGREQUEST\";",
          "244:   case TSG_PACKET_TYPE_QUARREQUEST:",
          "245:    return \"TSG_PACKET_TYPE_QUARREQUEST\";",
          "246:   case TSG_PACKET_TYPE_RESPONSE:",
          "247:    return \"TSG_PACKET_TYPE_RESPONSE\";",
          "248:   case TSG_PACKET_TYPE_QUARENC_RESPONSE:",
          "249:    return \"TSG_PACKET_TYPE_QUARENC_RESPONSE\";",
          "250:   case TSG_CAPABILITY_TYPE_NAP:",
          "251:    return \"TSG_CAPABILITY_TYPE_NAP\";",
          "252:   case TSG_PACKET_TYPE_CAPS_RESPONSE:",
          "253:    return \"TSG_PACKET_TYPE_CAPS_RESPONSE\";",
          "254:   case TSG_PACKET_TYPE_MSGREQUEST_PACKET:",
          "255:    return \"TSG_PACKET_TYPE_MSGREQUEST_PACKET\";",
          "256:   case TSG_PACKET_TYPE_MESSAGE_PACKET:",
          "257:    return \"TSG_PACKET_TYPE_MESSAGE_PACKET\";",
          "258:   case TSG_PACKET_TYPE_AUTH:",
          "259:    return \"TSG_PACKET_TYPE_AUTH\";",
          "260:   case TSG_PACKET_TYPE_REAUTH:",
          "261:    return \"TSG_PACKET_TYPE_REAUTH\";",
          "262:   default:",
          "263:    return \"UNKNOWN\";",
          "264:  }",
          "265: }",
          "267: static const char* tsg_state_to_string(TSG_STATE state)",
          "268: {",
          "269:  switch (state)",
          "270:  {",
          "271:   case TSG_STATE_INITIAL:",
          "272:    return \"TSG_STATE_INITIAL\";",
          "273:   case TSG_STATE_CONNECTED:",
          "274:    return \"TSG_STATE_CONNECTED\";",
          "275:   case TSG_STATE_AUTHORIZED:",
          "276:    return \"TSG_STATE_AUTHORIZED\";",
          "277:   case TSG_STATE_CHANNEL_CREATED:",
          "278:    return \"TSG_STATE_CHANNEL_CREATED\";",
          "279:   case TSG_STATE_PIPE_CREATED:",
          "280:    return \"TSG_STATE_PIPE_CREATED\";",
          "281:   case TSG_STATE_TUNNEL_CLOSE_PENDING:",
          "282:    return \"TSG_STATE_TUNNEL_CLOSE_PENDING\";",
          "283:   case TSG_STATE_CHANNEL_CLOSE_PENDING:",
          "284:    return \"TSG_STATE_CHANNEL_CLOSE_PENDING\";",
          "285:   case TSG_STATE_FINAL:",
          "286:    return \"TSG_STATE_FINAL\";",
          "287:   default:",
          "288:    return \"TSG_STATE_UNKNOWN\";",
          "289:  }",
          "290: }",
          "292: static BOOL tsg_print(char** buffer, size_t* len, const char* fmt, ...)",
          "293: {",
          "294:  int rc;",
          "295:  va_list ap;",
          "296:  if (!buffer || !len || !fmt)",
          "297:   return FALSE;",
          "298:  va_start(ap, fmt);",
          "299:  rc = vsnprintf(*buffer, *len, fmt, ap);",
          "300:  va_end(ap);",
          "301:  if ((rc < 0) || ((size_t)rc > *len))",
          "302:   return FALSE;",
          "305:  return TRUE;",
          "306: }",
          "308: static BOOL tsg_packet_header_to_string(char** buffer, size_t* length,",
          "309:                                         const TSG_PACKET_HEADER* header)",
          "310: {",
          "311:  return tsg_print(buffer, length,",
          "312:                   \"header { ComponentId=0x%04\" PRIx16 \", PacketId=0x%04\" PRIx16 \" }\",",
          "313:                   header->ComponentId, header->PacketId);",
          "314: }",
          "316: static BOOL tsg_packet_capabilities_to_string(char** buffer, size_t* length,",
          "317:                                               const TSG_PACKET_CAPABILITIES* caps, UINT32 numCaps)",
          "318: {",
          "319:  UINT32 x;",
          "321:  if (!tsg_print(buffer, length, \"capabilities { \"))",
          "322:   return FALSE;",
          "324:  for (x = 0; x < numCaps; x++)",
          "325:  {",
          "326:   const TSG_PACKET_CAPABILITIES* cur = &caps[x];",
          "327:   switch (cur->capabilityType)",
          "328:   {",
          "329:    case TSG_CAPABILITY_TYPE_NAP:",
          "330:     if (!tsg_print(buffer, length, \"%s { capabilities=0x%08\" PRIx32 \" }\",",
          "331:                    tsg_packet_id_to_string(cur->capabilityType),",
          "332:                    cur->tsgPacket.tsgCapNap.capabilities))",
          "333:      return FALSE;",
          "334:     break;",
          "335:    default:",
          "336:     if (!tsg_print(buffer, length, \"TSG_UNKNOWN_CAPABILITY\"))",
          "337:      return FALSE;",
          "338:     break;",
          "339:   }",
          "340:  }",
          "341:  return tsg_print(buffer, length, \" }\");",
          "342: }",
          "344: static BOOL tsg_packet_versioncaps_to_string(char** buffer, size_t* length,",
          "345:                                              const TSG_PACKET_VERSIONCAPS* caps)",
          "346: {",
          "347:  if (!tsg_print(buffer, length, \"versioncaps { \"))",
          "348:   return FALSE;",
          "349:  if (!tsg_packet_header_to_string(buffer, length, &caps->tsgHeader))",
          "350:   return FALSE;",
          "352:  if (!tsg_print(buffer, length, \" \"))",
          "353:   return FALSE;",
          "355:  if (!tsg_packet_capabilities_to_string(buffer, length, caps->tsgCaps, caps->numCapabilities))",
          "356:   return FALSE;",
          "358:  if (!tsg_print(buffer, length,",
          "359:                 \" numCapabilities=0x%08\" PRIx32 \", majorVersion=0x%04\" PRIx16",
          "360:                 \", minorVersion=0x%04\" PRIx16 \", quarantineCapabilities=0x%04\" PRIx16,",
          "361:                 caps->numCapabilities, caps->majorVersion, caps->minorVersion,",
          "362:                 caps->quarantineCapabilities))",
          "363:   return FALSE;",
          "365:  return tsg_print(buffer, length, \" }\");",
          "366: }",
          "368: static const char* tsg_packet_to_string(const TSG_PACKET* packet)",
          "369: {",
          "370:  size_t len = 8192;",
          "371:  static char sbuffer[8193] = { 0 };",
          "372:  char* buffer = sbuffer;",
          "374:  if (!tsg_print(&buffer, &len, \"TSG_PACKET { packetId=%s [0x%08\" PRIx32 \"], \",",
          "375:                 tsg_packet_id_to_string(packet->packetId), packet->packetId))",
          "376:   goto fail;",
          "378:  switch (packet->packetId)",
          "379:  {",
          "380:   case TSG_PACKET_TYPE_HEADER:",
          "381:    if (!tsg_packet_header_to_string(&buffer, &len, packet->tsgPacket.packetHeader))",
          "382:     goto fail;",
          "383:    break;",
          "384:   case TSG_PACKET_TYPE_VERSIONCAPS:",
          "385:    if (!tsg_packet_versioncaps_to_string(&buffer, &len,",
          "386:                                          packet->tsgPacket.packetVersionCaps))",
          "387:     goto fail;",
          "388:    break;",
          "389:   case TSG_PACKET_TYPE_QUARCONFIGREQUEST:",
          "390:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "391:     goto fail;",
          "392:    break;",
          "393:   case TSG_PACKET_TYPE_QUARREQUEST:",
          "394:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "395:     goto fail;",
          "396:    break;",
          "397:   case TSG_PACKET_TYPE_RESPONSE:",
          "398:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "399:     goto fail;",
          "400:    break;",
          "401:   case TSG_PACKET_TYPE_QUARENC_RESPONSE:",
          "402:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "403:     goto fail;",
          "404:    break;",
          "405:   case TSG_CAPABILITY_TYPE_NAP:",
          "406:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "407:     goto fail;",
          "408:    break;",
          "409:   case TSG_PACKET_TYPE_CAPS_RESPONSE:",
          "410:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "411:     goto fail;",
          "412:    break;",
          "413:   case TSG_PACKET_TYPE_MSGREQUEST_PACKET:",
          "414:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "415:     goto fail;",
          "416:    break;",
          "417:   case TSG_PACKET_TYPE_MESSAGE_PACKET:",
          "418:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "419:     goto fail;",
          "420:    break;",
          "421:   case TSG_PACKET_TYPE_AUTH:",
          "422:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "423:     goto fail;",
          "424:    break;",
          "425:   case TSG_PACKET_TYPE_REAUTH:",
          "426:    if (!tsg_print(&buffer, &len, \"TODO\"))",
          "427:     goto fail;",
          "428:    break;",
          "429:   default:",
          "430:    if (!tsg_print(&buffer, &len, \"INVALID\"))",
          "431:     goto fail;",
          "432:    break;",
          "433:  }",
          "435:  if (!tsg_print(&buffer, &len, \" }\"))",
          "436:   goto fail;",
          "438: fail:",
          "439:  return sbuffer;",
          "440: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366: {",
          "367:  BOOL rc = FALSE;",
          "368:  BOOL write = TRUE;",
          "",
          "[Removed Lines]",
          "365: static BOOL TsProxyCreateTunnelWriteRequest(rdpTsg* tsg, PTSG_PACKET tsgPacket)",
          "",
          "[Added Lines]",
          "586: static BOOL TsProxyCreateTunnelWriteRequest(rdpTsg* tsg, const PTSG_PACKET tsgPacket)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:   return FALSE;",
          "376:  rpc = tsg->rpc;",
          "378:  s = Stream_New(NULL, 108);",
          "380:  if (!s)",
          "",
          "[Removed Lines]",
          "377:  WLog_DBG(TAG, \"TsProxyCreateTunnelWriteRequest\");",
          "",
          "[Added Lines]",
          "598:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_to_string(tsgPacket));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506:  PTSG_PACKET_VERSIONCAPS versionCaps = NULL;",
          "507:  PTSG_PACKET_CAPS_RESPONSE packetCapsResponse = NULL;",
          "508:  PTSG_PACKET_QUARENC_RESPONSE packetQuarEncResponse = NULL;",
          "511:  if (!pdu)",
          "512:   return FALSE;",
          "",
          "[Removed Lines]",
          "509:  WLog_DBG(TAG, \"TsProxyCreateTunnelReadResponse\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "526:  if ((packet->packetId == TSG_PACKET_TYPE_CAPS_RESPONSE) &&",
          "527:      (SwitchValue == TSG_PACKET_TYPE_CAPS_RESPONSE))",
          "528:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_id_to_string(packet->packetId));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "885:  UINT32 idleTimeout;",
          "886:  PTSG_PACKET packet = NULL;",
          "887:  PTSG_PACKET_RESPONSE packetResponse = NULL;",
          "890:  if (!pdu)",
          "891:   return FALSE;",
          "",
          "[Removed Lines]",
          "888:  WLog_DBG(TAG, \"TsProxyAuthorizeTunnelReadResponse\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "905:  if (packet->packetId == E_PROXY_NAP_ACCESSDENIED)",
          "906:  {",
          "907:   WLog_ERR(TAG, \"status: E_PROXY_NAP_ACCESSDENIED (0x%08X)\", E_PROXY_NAP_ACCESSDENIED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1126:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_id_to_string(packet->packetId));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1059:  TSG_PACKET_MSG_RESPONSE packetMsgResponse = { 0 };",
          "1060:  TSG_PACKET_STRING_MESSAGE packetStringMessage = { 0 };",
          "1061:  TSG_PACKET_REAUTH_MESSAGE packetReauthMessage = { 0 };",
          "",
          "[Removed Lines]",
          "1062:  WLog_DBG(TAG, \"TsProxyMakeTunnelCallReadResponse\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1076:  if ((packet.packetId != TSG_PACKET_TYPE_MESSAGE_PACKET) ||",
          "1077:      (SwitchValue != TSG_PACKET_TYPE_MESSAGE_PACKET))",
          "1078:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298:  WLog_DBG(TAG, \"%s: %s\", __FUNCTION__, tsg_packet_id_to_string(packet.packetId));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1358: static BOOL tsg_transition_to_state(rdpTsg* tsg, TSG_STATE state)",
          "1359: {",
          "1398:  return tsg_set_state(tsg, state);",
          "1399: }",
          "1401: BOOL tsg_proxy_begin(rdpTsg* tsg)",
          "1402: {",
          "1404:  PTSG_CAPABILITY_NAP tsgCapNap;",
          "1405:  PTSG_PACKET_VERSIONCAPS packetVersionCaps;",
          "",
          "[Removed Lines]",
          "1360:  const char* str = \"TSG_STATE_UNKNOWN\";",
          "1362:  switch (state)",
          "1363:  {",
          "1364:   case TSG_STATE_INITIAL:",
          "1365:    str = \"TSG_STATE_INITIAL\";",
          "1366:    break;",
          "1368:   case TSG_STATE_CONNECTED:",
          "1369:    str = \"TSG_STATE_CONNECTED\";",
          "1370:    break;",
          "1372:   case TSG_STATE_AUTHORIZED:",
          "1373:    str = \"TSG_STATE_AUTHORIZED\";",
          "1374:    break;",
          "1376:   case TSG_STATE_CHANNEL_CREATED:",
          "1377:    str = \"TSG_STATE_CHANNEL_CREATED\";",
          "1378:    break;",
          "1380:   case TSG_STATE_PIPE_CREATED:",
          "1381:    str = \"TSG_STATE_PIPE_CREATED\";",
          "1382:    break;",
          "1384:   case TSG_STATE_TUNNEL_CLOSE_PENDING:",
          "1385:    str = \"TSG_STATE_TUNNEL_CLOSE_PENDING\";",
          "1386:    break;",
          "1388:   case TSG_STATE_CHANNEL_CLOSE_PENDING:",
          "1389:    str = \"TSG_STATE_CHANNEL_CLOSE_PENDING\";",
          "1390:    break;",
          "1392:   case TSG_STATE_FINAL:",
          "1393:    str = \"TSG_STATE_FINAL\";",
          "1394:    break;",
          "1395:  }",
          "1397:  WLog_DBG(TAG, \"%s\", str);",
          "1403:  TSG_PACKET tsgPacket;",
          "",
          "[Added Lines]",
          "1584:  const char* oldState = tsg_state_to_string(tsg->state);",
          "1585:  const char* newState = tsg_state_to_string(state);",
          "1587:  WLog_DBG(TAG, \"%s -> %s\", oldState, newState);",
          "1593:  TSG_PACKET tsgPacket = { 0 };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1444: static BOOL tsg_proxy_reauth(rdpTsg* tsg)",
          "1445: {",
          "1447:  PTSG_PACKET_REAUTH packetReauth;",
          "1448:  PTSG_PACKET_VERSIONCAPS packetVersionCaps;",
          "",
          "[Removed Lines]",
          "1446:  TSG_PACKET tsgPacket;",
          "",
          "[Added Lines]",
          "1636:  TSG_PACKET tsgPacket = { 0 };",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1815:  return TRUE;",
          "1816: }",
          "1819: {",
          "1820:  DWORD nCount;",
          "1821:  HANDLE events[64];",
          "1822:  rdpRpc* rpc = tsg->rpc;",
          "",
          "[Removed Lines]",
          "1818: BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, int timeout)",
          "",
          "[Added Lines]",
          "2008: BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, DWORD timeout)",
          "2010:  UINT64 looptimeout = timeout * 1000ULL;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1848:  while (tsg->state != TSG_STATE_PIPE_CREATED)",
          "1849:  {",
          "1852:   if (!tsg_check_event_handles(tsg))",
          "1853:   {",
          "",
          "[Removed Lines]",
          "1850:   WaitForMultipleObjects(nCount, events, FALSE, 250);",
          "",
          "[Added Lines]",
          "2041:   const DWORD polltimeout = 250;",
          "2042:   DWORD status = WaitForMultipleObjects(nCount, events, FALSE, polltimeout);",
          "2043:   if (status == WAIT_TIMEOUT)",
          "2044:   {",
          "2045:    if (timeout > 0)",
          "2046:    {",
          "2047:     if (looptimeout < polltimeout)",
          "2048:      return FALSE;",
          "2049:     looptimeout -= polltimeout;",
          "2050:    }",
          "2051:   }",
          "2052:   else",
          "2053:    looptimeout = timeout * 1000ULL;",
          "",
          "---------------"
        ],
        "libfreerdp/core/gateway/tsg.h||libfreerdp/core/gateway/tsg.h": [
          "File: libfreerdp/core/gateway/tsg.h -> libfreerdp/core/gateway/tsg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #define TS_GATEWAY_TRANSPORT 0x5452",
          "78: #define TSG_ASYNC_MESSAGE_CONSENT_MESSAGE 0x00000001",
          "79: #define TSG_ASYNC_MESSAGE_SERVICE_MESSAGE 0x00000002",
          "80: #define TSG_ASYNC_MESSAGE_REAUTH 0x00000003",
          "",
          "[Removed Lines]",
          "65: #define TSG_PACKET_TYPE_HEADER 0x00004844",
          "66: #define TSG_PACKET_TYPE_VERSIONCAPS 0x00005643",
          "67: #define TSG_PACKET_TYPE_QUARCONFIGREQUEST 0x00005143",
          "68: #define TSG_PACKET_TYPE_QUARREQUEST 0x00005152",
          "69: #define TSG_PACKET_TYPE_RESPONSE 0x00005052",
          "70: #define TSG_PACKET_TYPE_QUARENC_RESPONSE 0x00004552",
          "71: #define TSG_CAPABILITY_TYPE_NAP 0x00000001",
          "72: #define TSG_PACKET_TYPE_CAPS_RESPONSE 0x00004350",
          "73: #define TSG_PACKET_TYPE_MSGREQUEST_PACKET 0x00004752",
          "74: #define TSG_PACKET_TYPE_MESSAGE_PACKET 0x00004750",
          "75: #define TSG_PACKET_TYPE_AUTH 0x00004054",
          "76: #define TSG_PACKET_TYPE_REAUTH 0x00005250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119: FREERDP_LOCAL BOOL tsg_proxy_begin(rdpTsg* tsg);",
          "122: FREERDP_LOCAL BOOL tsg_disconnect(rdpTsg* tsg);",
          "124: FREERDP_LOCAL BOOL tsg_recv_pdu(rdpTsg* tsg, RPC_PDU* pdu);",
          "",
          "[Removed Lines]",
          "121: FREERDP_LOCAL BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, int timeout);",
          "",
          "[Added Lines]",
          "108: FREERDP_LOCAL BOOL tsg_connect(rdpTsg* tsg, const char* hostname, UINT16 port, DWORD timeout);",
          "",
          "---------------"
        ],
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3510:  {",
          "3511:   WLog_Print(update->log, WLOG_ERROR, \"Stream_GetRemainingLength(s) %\" PRIuz \" < %\" PRIu16,",
          "3512:              Stream_GetRemainingLength(s), orderLength + 7);",
          "",
          "[Removed Lines]",
          "3509:  if (Stream_GetRemainingLength(s) < orderLength + 7)",
          "",
          "[Added Lines]",
          "3509:  if (Stream_GetRemainingLength(s) < orderLength + 7U)",
          "",
          "---------------"
        ],
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   return TRUE;",
          "168:  }",
          "171:   return FALSE;",
          "173:  if (tpktLength)",
          "",
          "[Removed Lines]",
          "170:  if ((len < 4) || ((len - 2) > Stream_GetRemainingLength(s)))",
          "",
          "[Added Lines]",
          "170:  if ((len < 4U) || ((len - 2U) > Stream_GetRemainingLength(s)))",
          "",
          "---------------"
        ],
        "libfreerdp/core/tcp.c||libfreerdp/core/tcp.c": [
          "File: libfreerdp/core/tcp.c -> libfreerdp/core/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1060: }",
          "1062: int freerdp_tcp_connect(rdpContext* context, rdpSettings* settings, const char* hostname, int port,",
          "1064: {",
          "1065:  int sockfd;",
          "1066:  UINT32 optval;",
          "",
          "[Removed Lines]",
          "1063:                         int timeout)",
          "",
          "[Added Lines]",
          "1063:                         DWORD timeout)",
          "",
          "---------------"
        ],
        "libfreerdp/core/tcp.h||libfreerdp/core/tcp.h": [
          "File: libfreerdp/core/tcp.h -> libfreerdp/core/tcp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: FREERDP_LOCAL BIO_METHOD* BIO_s_buffered_socket(void);",
          "66: FREERDP_LOCAL int freerdp_tcp_connect(rdpContext* context, rdpSettings* settings,",
          "69: FREERDP_LOCAL char* freerdp_tcp_get_peer_address(SOCKET sockfd);",
          "",
          "[Removed Lines]",
          "67:                                       const char* hostname, int port, int timeout);",
          "",
          "[Added Lines]",
          "67:                                       const char* hostname, int port, DWORD timeout);",
          "",
          "---------------"
        ],
        "libfreerdp/core/transport.c||libfreerdp/core/transport.c": [
          "File: libfreerdp/core/transport.c -> libfreerdp/core/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:  return TRUE;",
          "355: }",
          "358: {",
          "359:  int sockfd;",
          "360:  BOOL status = FALSE;",
          "",
          "[Removed Lines]",
          "357: BOOL transport_connect(rdpTransport* transport, const char* hostname, UINT16 port, int timeout)",
          "",
          "[Added Lines]",
          "357: BOOL transport_connect(rdpTransport* transport, const char* hostname, UINT16 port, DWORD timeout)",
          "",
          "---------------"
        ],
        "libfreerdp/core/transport.h||libfreerdp/core/transport.h": [
          "File: libfreerdp/core/transport.h -> libfreerdp/core/transport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: FREERDP_LOCAL wStream* transport_send_stream_init(rdpTransport* transport, int size);",
          "83: FREERDP_LOCAL BOOL transport_connect(rdpTransport* transport, const char* hostname, UINT16 port,",
          "85: FREERDP_LOCAL BOOL transport_attach(rdpTransport* transport, int sockfd);",
          "86: FREERDP_LOCAL BOOL transport_disconnect(rdpTransport* transport);",
          "87: FREERDP_LOCAL BOOL transport_connect_rdp(rdpTransport* transport);",
          "",
          "[Removed Lines]",
          "84:                                      int timeout);",
          "",
          "[Added Lines]",
          "84:                                      DWORD timeout);",
          "",
          "---------------"
        ]
      }
    }
  ]
}