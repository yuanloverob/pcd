{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "52225c64f7cd55f2bfe8515d4daf1a5ed4be6d7b",
      "candidate_info": {
        "commit_hash": "52225c64f7cd55f2bfe8515d4daf1a5ed4be6d7b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/52225c64f7cd55f2bfe8515d4daf1a5ed4be6d7b",
        "files": [
          "Lib/test/test_list.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-10-10-42-48.gh-issue-120298.napREA.rst",
          "Objects/listobject.c"
        ],
        "message": "[3.13] gh-120298: Fix use-after-free in `list_richcompare_impl` (GH-120303) (#120340)\n\ngh-120298: Fix use-after-free in `list_richcompare_impl` (GH-120303)\n(cherry picked from commit 141babad9b4eceb83371bf19ba3a36b50dd05250)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_list.py||Lib/test/test_list.py",
          "Objects/listobject.c||Objects/listobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_list.py||Lib/test/test_list.py": [
          "File: Lib/test/test_list.py -> Lib/test/test_list.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         list4 = [1]",
          "235:         self.assertFalse(list3 == list4)",
          "237:     @cpython_only",
          "238:     def test_preallocation(self):",
          "239:         iterable = [0] * 10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     def test_lt_operator_modifying_operand(self):",
          "238:         # See gh-120298",
          "239:         class evil:",
          "240:             def __lt__(self, other):",
          "241:                 other.clear()",
          "242:                 return NotImplemented",
          "244:         a = [[evil()]]",
          "245:         with self.assertRaises(TypeError):",
          "246:             a[0] < a",
          "",
          "---------------"
        ],
        "Objects/listobject.c||Objects/listobject.c": [
          "File: Objects/listobject.c -> Objects/listobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3382:     }",
          "3386: }",
          "3388: static PyObject *",
          "",
          "[Removed Lines]",
          "3385:     return PyObject_RichCompare(vl->ob_item[i], wl->ob_item[i], op);",
          "",
          "[Added Lines]",
          "3385:     PyObject *vitem = vl->ob_item[i];",
          "3386:     PyObject *witem = wl->ob_item[i];",
          "3387:     Py_INCREF(vitem);",
          "3388:     Py_INCREF(witem);",
          "3389:     PyObject *result = PyObject_RichCompare(vl->ob_item[i], wl->ob_item[i], op);",
          "3390:     Py_DECREF(vitem);",
          "3391:     Py_DECREF(witem);",
          "3392:     return result;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71d41f4e7da78117b99989d4b0d08f4a619e5fed",
      "candidate_info": {
        "commit_hash": "71d41f4e7da78117b99989d4b0d08f4a619e5fed",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/71d41f4e7da78117b99989d4b0d08f4a619e5fed",
        "files": [
          "Include/patchlevel.h"
        ],
        "message": "Post 3.13.0b3",
        "before_after_code_files": [
          "Include/patchlevel.h||Include/patchlevel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/patchlevel.h||Include/patchlevel.h": [
          "File: Include/patchlevel.h -> Include/patchlevel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define PY_RELEASE_SERIAL       3",
          "",
          "[Removed Lines]",
          "26: #define PY_VERSION              \"3.13.0b3\"",
          "",
          "[Added Lines]",
          "26: #define PY_VERSION              \"3.13.0b3+\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b704ceecae28d73a0315c3fd5547cf09b2d85a4",
      "candidate_info": {
        "commit_hash": "9b704ceecae28d73a0315c3fd5547cf09b2d85a4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/9b704ceecae28d73a0315c3fd5547cf09b2d85a4",
        "files": [
          "Misc/NEWS.d/next/Library/2024-06-08-09-45-31.gh-issue-120244.8o9Dzr.rst",
          "Modules/_sre/sre.c"
        ],
        "message": "[3.13] gh-120244: Fix re.sub() reference leak (GH-120245) (GH-120264)\n\n(cherry picked from commit 38a25e9560cf0ff0b80d9e90bce793ff24c6e027)\n\nCo-authored-by: neonene <53406459+neonene@users.noreply.github.com>",
        "before_after_code_files": [
          "Modules/_sre/sre.c||Modules/_sre/sre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/_sre/sre.c||Modules/_sre/sre.c": [
          "File: Modules/_sre/sre.c -> Modules/_sre/sre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1622:         }",
          "1623:         self->items[i].literal = Py_XNewRef(literal);",
          "1624:     }",
          "1625:     return (PyObject*) self;",
          "1627: bad_template:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:     PyObject_GC_Track(self);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "844b535c51201a176865cea059533bf13a3826e2",
      "candidate_info": {
        "commit_hash": "844b535c51201a176865cea059533bf13a3826e2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/844b535c51201a176865cea059533bf13a3826e2",
        "files": [
          "Doc/library/cmath.rst",
          "Doc/library/functions.rst",
          "Objects/clinic/complexobject.c.h",
          "Objects/complexobject.c"
        ],
        "message": "[3.13] gh-109218: Improve documentation for the complex() constructor (GH-119687) (GH-119803)\n\n* Remove the equivalence with real+imag*1j which can be incorrect in corner\n  cases (non-finite numbers, the sign of zeroes).\n* Separately document the three roles of the constructor: parsing a string,\n  converting a number, and constructing a complex from components.\n* Document positional-only parameters of complex(), float(), int() and bool()\n  as positional-only.\n* Add examples for complex() and int().\n* Specify the grammar of the string for complex().\n* Improve the grammar of the string for float().\n* Describe more explicitly the behavior when real and/or imag arguments are\n  complex numbers. (This will be deprecated in future.)\n(cherry picked from commit ec1ba264607b2b7b98d2602f5536a1d02981efc6)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Objects/clinic/complexobject.c.h||Objects/clinic/complexobject.c.h",
          "Objects/complexobject.c||Objects/complexobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/clinic/complexobject.c.h||Objects/clinic/complexobject.c.h": [
          "File: Objects/clinic/complexobject.c.h -> Objects/clinic/complexobject.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: \"complex(real=0, imag=0)\\n\"",
          "95: \"--\\n\"",
          "96: \"\\n\"",
          "98: \"\\n\"",
          "101: static PyObject *",
          "102: complex_new_impl(PyTypeObject *type, PyObject *r, PyObject *i);",
          "",
          "[Removed Lines]",
          "97: \"Create a complex number from a real part and an optional imaginary part.\\n\"",
          "99: \"This is equivalent to (real + imag*1j) where imag defaults to 0.\");",
          "",
          "[Added Lines]",
          "97: \"Create a complex number from a string or numbers.\\n\"",
          "99: \"If a string is given, parse it as a complex number.\\n\"",
          "100: \"If a single number is given, convert it to a complex number.\\n\"",
          "101: \"If the \\'real\\' or \\'imag\\' arguments are given, create a complex number\\n\"",
          "102: \"with the specified real and imaginary components.\");",
          "",
          "---------------"
        ],
        "Objects/complexobject.c||Objects/complexobject.c": [
          "File: Objects/complexobject.c -> Objects/complexobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "911:     real as r: object(c_default=\"NULL\") = 0",
          "912:     imag as i: object(c_default=\"NULL\") = 0",
          "919: static PyObject *",
          "920: complex_new_impl(PyTypeObject *type, PyObject *r, PyObject *i)",
          "922: {",
          "923:     PyObject *tmp;",
          "924:     PyNumberMethods *nbr, *nbi = NULL;",
          "",
          "[Removed Lines]",
          "914: Create a complex number from a real part and an optional imaginary part.",
          "916: This is equivalent to (real + imag*1j) where imag defaults to 0.",
          "",
          "[Added Lines]",
          "914: Create a complex number from a string or numbers.",
          "916: If a string is given, parse it as a complex number.",
          "917: If a single number is given, convert it to a complex number.",
          "918: If the 'real' or 'imag' arguments are given, create a complex number",
          "919: with the specified real and imaginary components.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "041cc2a4be609ed5f072239df32161653ae8deca",
      "candidate_info": {
        "commit_hash": "041cc2a4be609ed5f072239df32161653ae8deca",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/041cc2a4be609ed5f072239df32161653ae8deca",
        "files": [
          "Lib/test/test_typing.py"
        ],
        "message": "[3.13] typing tests: remove some unnecessary uses of `exec()` (GH-119005) (#119038)\n\n(cherry picked from commit a9328e2b6ee05c186dcc552feb92b862b4a574df)\n\nCo-authored-by: Alex Waygood <Alex.Waygood@Gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_typing.py||Lib/test/test_typing.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_typing.py||Lib/test/test_typing.py": [
          "File: Lib/test/test_typing.py -> Lib/test/test_typing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7060:         self.assertNotIsInstance(42, typing.Iterator)",
          "7062:     def test_awaitable(self):",
          "7069:         g = foo()",
          "7070:         self.assertIsInstance(g, typing.Awaitable)",
          "7071:         self.assertNotIsInstance(foo, typing.Awaitable)",
          "7072:         g.send(None)  # Run foo() till completion, to avoid warning.",
          "7074:     def test_coroutine(self):",
          "7081:         g = foo()",
          "7082:         self.assertIsInstance(g, typing.Coroutine)",
          "7083:         with self.assertRaises(TypeError):",
          "",
          "[Removed Lines]",
          "7063:         ns = {}",
          "7064:         exec(",
          "7065:             \"async def foo() -> typing.Awaitable[int]:\\n\"",
          "7066:             \"    return await AwaitableWrapper(42)\\n\",",
          "7067:             globals(), ns)",
          "7068:         foo = ns['foo']",
          "7075:         ns = {}",
          "7076:         exec(",
          "7077:             \"async def foo():\\n\"",
          "7078:             \"    return\\n\",",
          "7079:             globals(), ns)",
          "7080:         foo = ns['foo']",
          "",
          "[Added Lines]",
          "7063:         async def foo() -> typing.Awaitable[int]:",
          "7064:             return await AwaitableWrapper(42)",
          "7071:         async def foo():",
          "7072:             return",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7362:             typing.Generator[int, int, int]()",
          "7364:     def test_async_generator(self):",
          "7369:         self.assertIsSubclass(type(g), typing.AsyncGenerator)",
          "7371:     def test_no_async_generator_instantiation(self):",
          "",
          "[Removed Lines]",
          "7365:         ns = {}",
          "7366:         exec(\"async def f():\\n\"",
          "7367:              \"    yield 42\\n\", globals(), ns)",
          "7368:         g = ns['f']()",
          "",
          "[Added Lines]",
          "7357:         async def f():",
          "7358:              yield 42",
          "7359:         g = f()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7452:             def athrow(self, typ, val=None, tb=None):",
          "7453:                 pass",
          "7458:         self.assertIsSubclass(G, typing.AsyncGenerator)",
          "7459:         self.assertIsSubclass(G, typing.AsyncIterable)",
          "7460:         self.assertIsSubclass(G, collections.abc.AsyncGenerator)",
          "",
          "[Removed Lines]",
          "7455:         ns = {}",
          "7456:         exec('async def g(): yield 0', globals(), ns)",
          "7457:         g = ns['g']",
          "",
          "[Added Lines]",
          "7446:         async def g(): yield 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}