{
  "cve_id": "CVE-2022-41901",
  "cve_desc": "TensorFlow is an open source platform for machine learning. An input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in `tf.raw_ops.SparseMatrixNNZ`. We have patched the issue in GitHub commit f856d02e5322821aad155dad9b3acab1e9f5d693. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f856d02e5322821aad155dad9b3acab1e9f5d693",
  "patch_info": {
    "commit_hash": "f856d02e5322821aad155dad9b3acab1e9f5d693",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f856d02e5322821aad155dad9b3acab1e9f5d693",
    "files": [
      "tensorflow/core/kernels/sparse/sparse_matrix.h",
      "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
    ],
    "message": "Fix missing sparse matrix crash.\n\nCalling a sparse matrix op with no matrix currently causes a crash.  Here we check and\nreturn a non-ok status.\n\nPiperOrigin-RevId: 476379116",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
      "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h": [
      "File: tensorflow/core/kernels/sparse/sparse_matrix.h -> tensorflow/core/kernels/sparse/sparse_matrix.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "26: #include \"tensorflow/core/framework/op_kernel.h\"",
      "27: #include \"tensorflow/core/framework/tensor.h\"",
      "28: #include \"tensorflow/core/framework/tensor_types.h\"",
      "29: #include \"tensorflow/core/framework/variant.h\"",
      "30: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
      "31: #include \"tensorflow/core/framework/variant_op_registry.h\"",
      "33: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "33: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "633: Status ExtractVariantFromInput(OpKernelContext* ctx, int index,",
      "634:                                const T** value) {",
      "635:   const Tensor& input_t = ctx->input(index);",
      "636:   const Variant& input_variant = input_t.scalar<Variant>()();",
      "638:   if (*value == nullptr) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "638:   if (!TensorShapeUtils::IsScalar(input_t.shape())) {",
      "639:     return errors::InvalidArgument(",
      "640:         \"Invalid input matrix: Shape must be rank 0 but is rank \",",
      "641:         input_t.dims());",
      "642:   }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
      "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1313:       self.assertLess(cholesky_with_amd_nnz_value,",
      "1314:                       cholesky_without_ordering_nnz_value)",
      "1317: class CSRSparseMatrixOpsBenchmark(test.Benchmark):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1316:   @test_util.run_in_graph_and_eager_modes",
      "1317:   def testNoMatrixNoCrash(self):",
      "1318:     # Round-about way of creating an empty variant tensor that works in both",
      "1319:     # graph and eager modes.",
      "1320:     no_matrix = array_ops.reshape(dense_to_csr_sparse_matrix([[0.0]]), [1])[0:0]",
      "1321:     with self.assertRaisesRegex(",
      "1322:         (ValueError, errors.InvalidArgumentError),",
      "1323:         \"(Invalid input matrix)|(Shape must be rank 0)\"):",
      "1324:       sparse_csr_matrix_ops.sparse_matrix_nnz(no_matrix)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "391ec802c94d084e7f32b7c66e712c7a68e29556",
      "candidate_info": {
        "commit_hash": "391ec802c94d084e7f32b7c66e712c7a68e29556",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/391ec802c94d084e7f32b7c66e712c7a68e29556",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_matrix.h",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix missing sparse matrix crash.\n\nCalling a sparse matrix op with no matrix currently causes a crash.  Here we check and\nreturn a non-ok status.\n\nPiperOrigin-RevId: 476379116",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h": [
          "File: tensorflow/core/kernels/sparse/sparse_matrix.h -> tensorflow/core/kernels/sparse/sparse_matrix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/framework/tensor.h\"",
          "28: #include \"tensorflow/core/framework/tensor_types.h\"",
          "29: #include \"tensorflow/core/framework/variant.h\"",
          "30: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
          "31: #include \"tensorflow/core/framework/variant_op_registry.h\"",
          "33: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633: Status ExtractVariantFromInput(OpKernelContext* ctx, int index,",
          "634:                                const T** value) {",
          "635:   const Tensor& input_t = ctx->input(index);",
          "636:   const Variant& input_variant = input_t.scalar<Variant>()();",
          "638:   if (*value == nullptr) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:   if (!TensorShapeUtils::IsScalar(input_t.shape())) {",
          "639:     return errors::InvalidArgument(",
          "640:         \"Invalid input matrix: Shape must be rank 0 but is rank \",",
          "641:         input_t.dims());",
          "642:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1313:       self.assertLess(cholesky_with_amd_nnz_value,",
          "1314:                       cholesky_without_ordering_nnz_value)",
          "1317: class CSRSparseMatrixOpsBenchmark(test.Benchmark):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:   @test_util.run_in_graph_and_eager_modes",
          "1317:   def testNoMatrixNoCrash(self):",
          "1318:     # Round-about way of creating an empty variant tensor that works in both",
          "1319:     # graph and eager modes.",
          "1320:     no_matrix = array_ops.reshape(dense_to_csr_sparse_matrix([[0.0]]), [1])[0:0]",
          "1321:     with self.assertRaisesRegex(",
          "1322:         (ValueError, errors.InvalidArgumentError),",
          "1323:         \"(Invalid input matrix)|(Shape must be rank 0)\"):",
          "1324:       sparse_csr_matrix_ops.sparse_matrix_nnz(no_matrix)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3f2e67d759d46d0389972fdb4bae84751ee09e6",
      "candidate_info": {
        "commit_hash": "b3f2e67d759d46d0389972fdb4bae84751ee09e6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b3f2e67d759d46d0389972fdb4bae84751ee09e6",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_matrix.h",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix missing sparse matrix crash.\n\nCalling a sparse matrix op with no matrix currently causes a crash.  Here we check and\nreturn a non-ok status.\n\nPiperOrigin-RevId: 476379116",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h": [
          "File: tensorflow/core/kernels/sparse/sparse_matrix.h -> tensorflow/core/kernels/sparse/sparse_matrix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/framework/tensor.h\"",
          "28: #include \"tensorflow/core/framework/tensor_types.h\"",
          "29: #include \"tensorflow/core/framework/variant.h\"",
          "30: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
          "31: #include \"tensorflow/core/framework/variant_op_registry.h\"",
          "33: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633: Status ExtractVariantFromInput(OpKernelContext* ctx, int index,",
          "634:                                const T** value) {",
          "635:   const Tensor& input_t = ctx->input(index);",
          "636:   const Variant& input_variant = input_t.scalar<Variant>()();",
          "638:   if (*value == nullptr) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:   if (!TensorShapeUtils::IsScalar(input_t.shape())) {",
          "639:     return errors::InvalidArgument(",
          "640:         \"Invalid input matrix: Shape must be rank 0 but is rank \",",
          "641:         input_t.dims());",
          "642:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1313:       self.assertLess(cholesky_with_amd_nnz_value,",
          "1314:                       cholesky_without_ordering_nnz_value)",
          "1317: class CSRSparseMatrixOpsBenchmark(test.Benchmark):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:   @test_util.run_in_graph_and_eager_modes",
          "1317:   def testNoMatrixNoCrash(self):",
          "1318:     # Round-about way of creating an empty variant tensor that works in both",
          "1319:     # graph and eager modes.",
          "1320:     no_matrix = array_ops.reshape(dense_to_csr_sparse_matrix([[0.0]]), [1])[0:0]",
          "1321:     with self.assertRaisesRegex(",
          "1322:         (ValueError, errors.InvalidArgumentError),",
          "1323:         \"(Invalid input matrix)|(Shape must be rank 0)\"):",
          "1324:       sparse_csr_matrix_ops.sparse_matrix_nnz(no_matrix)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4aa418ceb50056ea18432a9fa46d43e4ea37035e",
      "candidate_info": {
        "commit_hash": "4aa418ceb50056ea18432a9fa46d43e4ea37035e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4aa418ceb50056ea18432a9fa46d43e4ea37035e",
        "files": [
          "tensorflow/core/kernels/sparse/sparse_matrix.h",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ],
        "message": "Fix missing sparse matrix crash.\n\nCalling a sparse matrix op with no matrix currently causes a crash.  Here we check and\nreturn a non-ok status.\n\nPiperOrigin-RevId: 476379116",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
          "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h",
            "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse/sparse_matrix.h||tensorflow/core/kernels/sparse/sparse_matrix.h": [
          "File: tensorflow/core/kernels/sparse/sparse_matrix.h -> tensorflow/core/kernels/sparse/sparse_matrix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/framework/tensor.h\"",
          "28: #include \"tensorflow/core/framework/tensor_types.h\"",
          "29: #include \"tensorflow/core/framework/variant.h\"",
          "30: #include \"tensorflow/core/framework/variant_encode_decode.h\"",
          "31: #include \"tensorflow/core/framework/variant_op_registry.h\"",
          "33: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "33: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "633: Status ExtractVariantFromInput(OpKernelContext* ctx, int index,",
          "634:                                const T** value) {",
          "635:   const Tensor& input_t = ctx->input(index);",
          "636:   const Variant& input_variant = input_t.scalar<Variant>()();",
          "638:   if (*value == nullptr) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:   if (!TensorShapeUtils::IsScalar(input_t.shape())) {",
          "639:     return errors::InvalidArgument(",
          "640:         \"Invalid input matrix: Shape must be rank 0 but is rank \",",
          "641:         input_t.dims());",
          "642:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py||tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py": [
          "File: tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py -> tensorflow/python/kernel_tests/linalg/sparse/csr_sparse_matrix_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1313:       self.assertLess(cholesky_with_amd_nnz_value,",
          "1314:                       cholesky_without_ordering_nnz_value)",
          "1317: class CSRSparseMatrixOpsBenchmark(test.Benchmark):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:   @test_util.run_in_graph_and_eager_modes",
          "1317:   def testNoMatrixNoCrash(self):",
          "1318:     # Round-about way of creating an empty variant tensor that works in both",
          "1319:     # graph and eager modes.",
          "1320:     no_matrix = array_ops.reshape(dense_to_csr_sparse_matrix([[0.0]]), [1])[0:0]",
          "1321:     with self.assertRaisesRegex(",
          "1322:         (ValueError, errors.InvalidArgumentError),",
          "1323:         \"(Invalid input matrix)|(Shape must be rank 0)\"):",
          "1324:       sparse_csr_matrix_ops.sparse_matrix_nnz(no_matrix)",
          "",
          "---------------"
        ]
      }
    }
  ]
}