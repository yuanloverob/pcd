{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e4a835c29492aee202ac59609f9d14d77b34d0c",
      "candidate_info": {
        "commit_hash": "3e4a835c29492aee202ac59609f9d14d77b34d0c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3e4a835c29492aee202ac59609f9d14d77b34d0c",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Fixed wrong error return from drdynvc_write_data\n\nWhen the channel was closed a wrong error code was returned.\n\n(cherry picked from commit 6446d609fc95830d7c9c1e6a91829146d567e277)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:  if (dataSize == 0)",
          "817:  {",
          "819:  }",
          "820:  else if (dataSize <= CHANNEL_CHUNK_LENGTH - pos)",
          "821:  {",
          "",
          "[Removed Lines]",
          "818:   dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "[Added Lines]",
          "818:   status = dvcman_close_channel(drdynvc->channel_mgr, ChannelId, TRUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3de3ee16b55cbb625c635bd5f30f3f8f109bef1",
      "candidate_info": {
        "commit_hash": "f3de3ee16b55cbb625c635bd5f30f3f8f109bef1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f3de3ee16b55cbb625c635bd5f30f3f8f109bef1",
        "files": [
          "channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fix short format name configuration and format list return.",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c": [
          "File: channels/cliprdr/client/cliprdr_main.c -> channels/cliprdr/client/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:                                         const CLIPRDR_CAPABILITIES* capabilities)",
          "540: {",
          "541:  wStream* s;",
          "542:  const CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;",
          "543:  cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;",
          "544:  s = cliprdr_packet_new(CB_CLIP_CAPS, 0, 4 + CB_CAPSTYPE_GENERAL_LEN);",
          "546:  if (!s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  UINT32 flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"ClientCapabilities\");",
          "560:  return cliprdr_packet_send(cliprdr, s);",
          "561: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:  flags = generalCapabilitySet->generalFlags;",
          "566:  if (!cliprdr->useLongFormatNames)",
          "567:   flags &= ~CB_USE_LONG_FORMAT_NAMES;",
          "568:  if (!cliprdr->streamFileClipEnabled)",
          "569:   flags &= ~CB_STREAM_FILECLIP_ENABLED;",
          "570:  if (!cliprdr->fileClipNoFilePaths)",
          "571:   flags &= ~CB_FILECLIP_NO_FILE_PATHS;",
          "572:  if (!cliprdr->canLockClipData)",
          "573:   flags &= CB_CAN_LOCK_CLIPDATA;",
          "575:  cliprdr->useLongFormatNames = flags & CB_USE_LONG_FORMAT_NAMES;",
          "576:  cliprdr->streamFileClipEnabled = flags & CB_STREAM_FILECLIP_ENABLED;",
          "577:  cliprdr->fileClipNoFilePaths = flags & CB_FILECLIP_NO_FILE_PATHS;",
          "578:  cliprdr->canLockClipData = flags & CB_CAN_LOCK_CLIPDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:  }",
          "1141:  cliprdr->log = WLog_Get(\"com.freerdp.channels.cliprdr.client\");",
          "1146:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"VirtualChannelEntryEx\");",
          "1147:  CopyMemory(&(cliprdr->channelEntryPoints), pEntryPoints,",
          "1148:             sizeof(CHANNEL_ENTRY_POINTS_FREERDP_EX));",
          "",
          "[Removed Lines]",
          "1142:  cliprdr->useLongFormatNames = TRUE;",
          "1143:  cliprdr->streamFileClipEnabled = FALSE;",
          "1144:  cliprdr->fileClipNoFilePaths = TRUE;",
          "1145:  cliprdr->canLockClipData = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:  WCHAR* wszFormatName;",
          "403:  wStream sub1, sub2;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "405:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "405:  UINT error = ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:   }",
          "552:  }",
          "556: error_out:",
          "557:  cliprdr_free_format_list(formatList);",
          "",
          "[Removed Lines]",
          "554:  return error;",
          "",
          "[Added Lines]",
          "554:  return CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe9a5ae5a9eff3b0995f971a275fe516419954c1",
      "candidate_info": {
        "commit_hash": "fe9a5ae5a9eff3b0995f971a275fe516419954c1",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/fe9a5ae5a9eff3b0995f971a275fe516419954c1",
        "files": [
          "client/Wayland/wlf_cliprdr.c"
        ],
        "message": "wlfreerdp/cliprdr: Initialize pointer before use\n\nIn `wlf_cliprdr_server_format_data_request()` `ConvertToUnicode()` may return 0\nwhile not allocating memory for `cdata` and not setting `cdata` to a valid\naddress. In this case, `data` points to a random address.\n\nSettting `cdata` to NULL before calling `ConvertToUnicode()` fixes this issues.",
        "before_after_code_files": [
          "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Wayland/wlf_cliprdr.c||client/Wayland/wlf_cliprdr.c": [
          "File: client/Wayland/wlf_cliprdr.c -> client/Wayland/wlf_cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:     rc = ERROR_INTERNAL_ERROR;",
          "625:    else",
          "626:    {",
          "627:     cnv = ConvertToUnicode(CP_UTF8, 0, (LPCSTR)data, (int)size, &cdata, 0);",
          "628:     free(data);",
          "629:     data = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:     cdata = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "738d4bff008da5873a2cbf73d032e9bc01d68198",
      "candidate_info": {
        "commit_hash": "738d4bff008da5873a2cbf73d032e9bc01d68198",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/738d4bff008da5873a2cbf73d032e9bc01d68198",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed oob read in update_recv\n\nproperly use update_type_to_string to print update type.\nThanks to hac425 CVE-2020-11019",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:  }",
          "779:  if (!update_begin_paint(update))",
          "780:   goto fail;",
          "",
          "[Removed Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", UPDATE_TYPE_STRINGS[updateType]);",
          "",
          "[Added Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", update_type_to_string(updateType));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b37e7fa11451747d251b80b6f882685f5ab50d9",
      "candidate_info": {
        "commit_hash": "8b37e7fa11451747d251b80b6f882685f5ab50d9",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8b37e7fa11451747d251b80b6f882685f5ab50d9",
        "files": [
          "client/Wayland/wlfreerdp.c"
        ],
        "message": "Fixed primary monitor index for wayland fullscreen",
        "before_after_code_files": [
          "client/Wayland/wlfreerdp.c||client/Wayland/wlfreerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Wayland/wlfreerdp.c||client/Wayland/wlfreerdp.c": [
          "File: client/Wayland/wlfreerdp.c -> client/Wayland/wlfreerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  if (settings->Fullscreen)",
          "192:  {",
          "197:   {",
          "198:    settings->DesktopWidth = (UINT32)resolution.width;",
          "199:    settings->DesktopHeight = (UINT32)resolution.height;",
          "",
          "[Removed Lines]",
          "194:   output = UwacDisplayGetOutput(context->display, 1);",
          "196:   if (output != NULL && UwacOutputGetResolution(output, &resolution) == UWAC_SUCCESS)",
          "",
          "[Added Lines]",
          "194:   output = UwacDisplayGetOutput(context->display, 0);",
          "196:   if ((output != NULL) && (UwacOutputGetResolution(output, &resolution) == UWAC_SUCCESS))",
          "",
          "---------------"
        ]
      }
    }
  ]
}