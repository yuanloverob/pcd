{
  "cve_id": "CVE-2023-25666",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14",
  "patch_info": {
    "commit_hash": "d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14",
    "files": [
      "tensorflow/core/kernels/BUILD",
      "tensorflow/core/kernels/spectrogram_op_test.cc",
      "tensorflow/core/ops/audio_ops.cc"
    ],
    "message": "Fix audio spectrogram FPE.\n\nDo input validation in shape function.\n\nPiperOrigin-RevId: 503481241",
    "before_after_code_files": [
      "tensorflow/core/kernels/spectrogram_op_test.cc||tensorflow/core/kernels/spectrogram_op_test.cc",
      "tensorflow/core/ops/audio_ops.cc||tensorflow/core/ops/audio_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/spectrogram_op_test.cc||tensorflow/core/kernels/spectrogram_op_test.cc": [
      "File: tensorflow/core/kernels/spectrogram_op_test.cc -> tensorflow/core/kernels/spectrogram_op_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include <memory>",
      "20: #include <vector>",
      "22: #include \"tensorflow/cc/client/client_session.h\"",
      "23: #include \"tensorflow/cc/ops/audio_ops.h\"",
      "24: #include \"tensorflow/cc/ops/const_op.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <gmock/gmock.h>",
      "23: #include <gtest/gtest.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29: #include \"tensorflow/core/kernels/ops_util.h\"",
      "30: #include \"tensorflow/core/lib/core/status_test_util.h\"",
      "31: #include \"tensorflow/core/platform/test.h\"",
      "33: namespace tensorflow {",
      "34: namespace ops {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #include \"tensorflow/tsl/lib/core/status_test_util.h\"",
      "35: #include \"tensorflow/tsl/platform/errors.h\"",
      "36: #include \"tensorflow/tsl/platform/status_matchers.h\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140:   }",
      "141: }",
      "143: }  // namespace",
      "144: }  // namespace ops",
      "145: }  // namespace tensorflow",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148: TEST(SpectrogramOpTest, InvalidWindowSize) {",
      "149:   Scope root = Scope::NewRootScope();",
      "150:   const int audio_size = 8;",
      "151:   const int channel_size = 2;",
      "152:   Tensor audio_tensor(DT_FLOAT, TensorShape({audio_size, channel_size}));",
      "153:   test::FillValues<float>(",
      "154:       &audio_tensor, {-1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,",
      "155:                       -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f});",
      "156:   Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),",
      "157:                                 Input::Initializer(audio_tensor));",
      "158:   AudioSpectrogram spectrogram_op =",
      "159:       AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op,",
      "161:   EXPECT_THAT(root.status(),",
      "162:               tsl::testing::StatusIs(tsl::error::Code::INVALID_ARGUMENT,",
      "163:                                      ::testing::ContainsRegex(\"window size\")));",
      "164: }",
      "166: TEST(SpectrogramOpTest, InvalidStride) {",
      "167:   Scope root = Scope::NewRootScope();",
      "168:   const int audio_size = 8;",
      "169:   const int channel_size = 2;",
      "170:   Tensor audio_tensor(DT_FLOAT, TensorShape({audio_size, channel_size}));",
      "171:   test::FillValues<float>(",
      "172:       &audio_tensor, {-1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,",
      "173:                       -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f});",
      "174:   Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),",
      "175:                                 Input::Initializer(audio_tensor));",
      "176:   AudioSpectrogram spectrogram_op =",
      "177:       AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op,",
      "179:   EXPECT_THAT(root.status(),",
      "180:               tsl::testing::StatusIs(tsl::error::Code::INVALID_ARGUMENT,",
      "181:                                      ::testing::ContainsRegex(\"stride\")));",
      "182: }",
      "",
      "---------------"
    ],
    "tensorflow/core/ops/audio_ops.cc||tensorflow/core/ops/audio_ops.cc": [
      "File: tensorflow/core/ops/audio_ops.cc -> tensorflow/core/ops/audio_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include \"tensorflow/core/framework/op.h\"",
      "18: #include \"tensorflow/core/framework/shape_inference.h\"",
      "19: #include \"tensorflow/core/lib/core/bits.h\"",
      "21: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:   TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &input));",
      "73:   int32_t window_size;",
      "74:   TF_RETURN_IF_ERROR(c->GetAttr(\"window_size\", &window_size));",
      "75:   int32_t stride;",
      "76:   TF_RETURN_IF_ERROR(c->GetAttr(\"stride\", &stride));",
      "78:   DimensionHandle input_length = c->Dim(input, 0);",
      "79:   DimensionHandle input_channels = c->Dim(input, 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:   if (window_size <= 1) {",
      "77:     return errors::InvalidArgument(\"window size must be > 1, got \",",
      "78:                                    window_size);",
      "79:   }",
      "83:   if (stride <= 0) {",
      "84:     return errors::InvalidArgument(\"stride must be strictly positive, got \",",
      "85:                                    stride);",
      "86:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7f4cdce9cae94f7df5729e7fe35617fc7f91bc8",
      "candidate_info": {
        "commit_hash": "d7f4cdce9cae94f7df5729e7fe35617fc7f91bc8",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d7f4cdce9cae94f7df5729e7fe35617fc7f91bc8",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/spectrogram_op_test.cc",
          "tensorflow/core/ops/audio_ops.cc"
        ],
        "message": "Fix audio spectrogram FPE. (#59427)\n\nDo input validation in shape function.\n\nPiperOrigin-RevId: 503481241",
        "before_after_code_files": [
          "tensorflow/core/kernels/spectrogram_op_test.cc||tensorflow/core/kernels/spectrogram_op_test.cc",
          "tensorflow/core/ops/audio_ops.cc||tensorflow/core/ops/audio_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/spectrogram_op_test.cc||tensorflow/core/kernels/spectrogram_op_test.cc",
            "tensorflow/core/ops/audio_ops.cc||tensorflow/core/ops/audio_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/spectrogram_op_test.cc||tensorflow/core/kernels/spectrogram_op_test.cc",
            "tensorflow/core/ops/audio_ops.cc||tensorflow/core/ops/audio_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/spectrogram_op_test.cc||tensorflow/core/kernels/spectrogram_op_test.cc": [
          "File: tensorflow/core/kernels/spectrogram_op_test.cc -> tensorflow/core/kernels/spectrogram_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <memory>",
          "20: #include <vector>",
          "22: #include \"tensorflow/cc/client/client_session.h\"",
          "23: #include \"tensorflow/cc/ops/audio_ops.h\"",
          "24: #include \"tensorflow/cc/ops/const_op.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <gmock/gmock.h>",
          "23: #include <gtest/gtest.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"tensorflow/core/kernels/ops_util.h\"",
          "30: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "31: #include \"tensorflow/core/platform/test.h\"",
          "33: namespace tensorflow {",
          "34: namespace ops {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"tensorflow/tsl/lib/core/status_test_util.h\"",
          "35: #include \"tensorflow/tsl/platform/errors.h\"",
          "36: #include \"tensorflow/tsl/platform/status_matchers.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:   }",
          "141: }",
          "143: }  // namespace",
          "144: }  // namespace ops",
          "145: }  // namespace tensorflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: TEST(SpectrogramOpTest, InvalidWindowSize) {",
          "149:   Scope root = Scope::NewRootScope();",
          "150:   const int audio_size = 8;",
          "151:   const int channel_size = 2;",
          "152:   Tensor audio_tensor(DT_FLOAT, TensorShape({audio_size, channel_size}));",
          "153:   test::FillValues<float>(",
          "154:       &audio_tensor, {-1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,",
          "155:                       -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f});",
          "156:   Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),",
          "157:                                 Input::Initializer(audio_tensor));",
          "158:   AudioSpectrogram spectrogram_op =",
          "159:       AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op,",
          "161:   EXPECT_THAT(root.status(),",
          "162:               tsl::testing::StatusIs(tsl::error::Code::INVALID_ARGUMENT,",
          "163:                                      ::testing::ContainsRegex(\"window size\")));",
          "164: }",
          "166: TEST(SpectrogramOpTest, InvalidStride) {",
          "167:   Scope root = Scope::NewRootScope();",
          "168:   const int audio_size = 8;",
          "169:   const int channel_size = 2;",
          "170:   Tensor audio_tensor(DT_FLOAT, TensorShape({audio_size, channel_size}));",
          "171:   test::FillValues<float>(",
          "172:       &audio_tensor, {-1.0f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,",
          "173:                       -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f});",
          "174:   Output audio_const_op = Const(root.WithOpName(\"audio_const_op\"),",
          "175:                                 Input::Initializer(audio_tensor));",
          "176:   AudioSpectrogram spectrogram_op =",
          "177:       AudioSpectrogram(root.WithOpName(\"spectrogram_op\"), audio_const_op,",
          "179:   EXPECT_THAT(root.status(),",
          "180:               tsl::testing::StatusIs(tsl::error::Code::INVALID_ARGUMENT,",
          "181:                                      ::testing::ContainsRegex(\"stride\")));",
          "182: }",
          "",
          "---------------"
        ],
        "tensorflow/core/ops/audio_ops.cc||tensorflow/core/ops/audio_ops.cc": [
          "File: tensorflow/core/ops/audio_ops.cc -> tensorflow/core/ops/audio_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"tensorflow/core/framework/op.h\"",
          "18: #include \"tensorflow/core/framework/shape_inference.h\"",
          "19: #include \"tensorflow/core/lib/core/bits.h\"",
          "21: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &input));",
          "73:   int32_t window_size;",
          "74:   TF_RETURN_IF_ERROR(c->GetAttr(\"window_size\", &window_size));",
          "75:   int32_t stride;",
          "76:   TF_RETURN_IF_ERROR(c->GetAttr(\"stride\", &stride));",
          "78:   DimensionHandle input_length = c->Dim(input, 0);",
          "79:   DimensionHandle input_channels = c->Dim(input, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   if (window_size <= 1) {",
          "77:     return errors::InvalidArgument(\"window size must be > 1, got \",",
          "78:                                    window_size);",
          "79:   }",
          "83:   if (stride <= 0) {",
          "84:     return errors::InvalidArgument(\"stride must be strictly positive, got \",",
          "85:                                    stride);",
          "86:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}