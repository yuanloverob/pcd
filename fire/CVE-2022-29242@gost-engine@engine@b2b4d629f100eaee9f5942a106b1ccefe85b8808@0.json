{
  "cve_id": "CVE-2022-29242",
  "cve_desc": "GOST engine is a reference implementation of the Russian GOST crypto algorithms for OpenSSL. TLS clients using GOST engine when ciphersuite `TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC` is agreed and the server uses 512 bit GOST secret keys are vulnerable to buffer overflow. GOST engine version 3.0.1 contains a patch for this issue. Disabling ciphersuite `TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC` is a possible workaround.",
  "repo": "gost-engine/engine",
  "patch_hash": "b2b4d629f100eaee9f5942a106b1ccefe85b8808",
  "patch_info": {
    "commit_hash": "b2b4d629f100eaee9f5942a106b1ccefe85b8808",
    "repo": "gost-engine/engine",
    "commit_url": "https://github.com/gost-engine/engine/commit/b2b4d629f100eaee9f5942a106b1ccefe85b8808",
    "files": [
      "gost_ec_keyx.c"
    ],
    "message": "On unpacking key blob output buffer size should be fixed\n\nRelated: CVE-2022-29242",
    "before_after_code_files": [
      "gost_ec_keyx.c||gost_ec_keyx.c"
    ]
  },
  "patch_diff": {
    "gost_ec_keyx.c||gost_ec_keyx.c": [
      "File: gost_ec_keyx.c -> gost_ec_keyx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "589:     EVP_PKEY *eph_key = NULL, *peerkey = NULL;",
      "590:     int dgst_nid = NID_undef;",
      "596:     gkt = d2i_GOST_KEY_TRANSPORT(NULL, (const unsigned char **)&p, in_len);",
      "597:     if (!gkt) {",
      "598:         GOSTerr(GOST_F_PKEY_GOST_ECCP_DECRYPT,",
      "",
      "[Removed Lines]",
      "592:     if (!key) {",
      "594:         return 1;",
      "595:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "701:         return -1;",
      "702:         break;",
      "703:     }",
      "709:     pst = d2i_PSKeyTransport_gost(NULL, (const unsigned char **)&p, in_len);",
      "710:     if (!pst) {",
      "",
      "[Removed Lines]",
      "704:     if (!key) {",
      "706:         return 1;",
      "707:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "768:                       size_t *key_len, const unsigned char *in, size_t in_len)",
      "769: {",
      "770:     struct gost_pmeth_data *gctx = EVP_PKEY_CTX_get_data(pctx);",
      "771:     switch (gctx->cipher_nid)",
      "772:     {",
      "773:         case NID_id_Gost28147_89:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "766:     if (key == NULL) {",
      "768:         return 1;",
      "769:     }",
      "771:     if (key != NULL && *key_len < 32) {",
      "772:         GOSTerr(GOST_F_PKEY_GOST2018_ENCRYPT, GOST_R_INVALID_BUFFER_SIZE);",
      "773:         return 0;",
      "774:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39dc6de6a9474e10560ebfb0a9cecc05867b9c7b",
      "candidate_info": {
        "commit_hash": "39dc6de6a9474e10560ebfb0a9cecc05867b9c7b",
        "repo": "gost-engine/engine",
        "commit_url": "https://github.com/gost-engine/engine/commit/39dc6de6a9474e10560ebfb0a9cecc05867b9c7b",
        "files": [
          "CMakeLists.txt",
          "e_gost_err.c",
          "e_gost_err.h",
          "gost.txt",
          "gost_crypt.c",
          "gost_ec_keyx.c",
          "gost_eng.c",
          "gost_gost2015.c",
          "gost_gost2015.h",
          "gost_grasshopper_cipher.c",
          "gost_grasshopper_cipher.h",
          "gost_lcl.h",
          "tcl_tests/engine.try",
          "test/00-engine.t",
          "test_mgm.c"
        ],
        "message": "Implementation of the MGM mode for magma/kuznyechik\n\nfirst implemented in ossl_patched branch\nuses dynamic NIDs\n\nSigned-off-by: Sergei Ianovich <sergei.ianovich@ya.ru>",
        "before_after_code_files": [
          "e_gost_err.c||e_gost_err.c",
          "e_gost_err.h||e_gost_err.h",
          "gost_crypt.c||gost_crypt.c",
          "gost_ec_keyx.c||gost_ec_keyx.c",
          "gost_eng.c||gost_eng.c",
          "gost_gost2015.c||gost_gost2015.c",
          "gost_gost2015.h||gost_gost2015.h",
          "gost_grasshopper_cipher.c||gost_grasshopper_cipher.c",
          "gost_grasshopper_cipher.h||gost_grasshopper_cipher.h",
          "gost_lcl.h||gost_lcl.h",
          "tcl_tests/engine.try||tcl_tests/engine.try",
          "test/00-engine.t||test/00-engine.t",
          "test_mgm.c||test_mgm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gost_ec_keyx.c||gost_ec_keyx.c"
          ],
          "candidate": [
            "gost_ec_keyx.c||gost_ec_keyx.c"
          ]
        }
      },
      "candidate_diff": {
        "e_gost_err.c||e_gost_err.c": [
          "File: e_gost_err.c -> e_gost_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:      \"gost_grasshopper_cipher_ctl\"},",
          "55:     {ERR_PACK(0, GOST_F_GOST_GRASSHOPPER_CIPHER_DO_CTRACPKM_OMAC, 0),",
          "56:      \"gost_grasshopper_cipher_do_ctracpkm_omac\"},",
          "57:     {ERR_PACK(0, GOST_F_GOST_GRASSHOPPER_CIPHER_INIT_CTRACPKM_OMAC, 0),",
          "58:      \"gost_grasshopper_cipher_init_ctracpkm_omac\"},",
          "59:     {ERR_PACK(0, GOST_F_GOST_GRASSHOPPER_SET_ASN1_PARAMETERS, 0),",
          "60:      \"gost_grasshopper_set_asn1_parameters\"},",
          "61:     {ERR_PACK(0, GOST_F_GOST_IMIT_CTRL, 0), \"gost_imit_ctrl\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     {ERR_PACK(0, GOST_F_GOST_GRASSHOPPER_CIPHER_DO_MGM, 0),",
          "58:      \"gost_grasshopper_cipher_do_mgm\"},",
          "61:     {ERR_PACK(0, GOST_F_GOST_GRASSHOPPER_MGM_CTRL, 0),",
          "62:      \"gost_grasshopper_mgm_ctrl\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     {ERR_PACK(0, GOST_F_GOST_KDFTREE2012_256, 0), \"gost_kdftree2012_256\"},",
          "65:     {ERR_PACK(0, GOST_F_GOST_KEXP15, 0), \"gost_kexp15\"},",
          "66:     {ERR_PACK(0, GOST_F_GOST_KIMP15, 0), \"gost_kimp15\"},",
          "67:     {ERR_PACK(0, GOST_F_MAGMA_CIPHER_CTL, 0), \"magma_cipher_ctl\"},",
          "68:     {ERR_PACK(0, GOST_F_MAGMA_CIPHER_CTL_ACPKM_OMAC, 0),",
          "69:      \"magma_cipher_ctl_acpkm_omac\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     {ERR_PACK(0, GOST_F_GOST_MAGMA_CIPHER_DO_MGM, 0),",
          "72:      \"gost_magma_cipher_do_mgm\"},",
          "73:     {ERR_PACK(0, GOST_F_GOST_MAGMA_MGM_CTRL, 0), \"gost_magma_mgm_ctrl\"},",
          "74:     {ERR_PACK(0, GOST_F_GOST_MGM128_AAD, 0), \"gost_mgm128_aad\"},",
          "75:     {ERR_PACK(0, GOST_F_GOST_MGM128_DECRYPT, 0), \"gost_mgm128_decrypt\"},",
          "76:     {ERR_PACK(0, GOST_F_GOST_MGM128_ENCRYPT, 0), \"gost_mgm128_encrypt\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     \"cannot unpack ephemeral key\"},",
          "130:     {ERR_PACK(0, 0, GOST_R_CIPHER_NOT_FOUND), \"cipher not found\"},",
          "131:     {ERR_PACK(0, 0, GOST_R_CTRL_CALL_FAILED), \"ctrl call failed\"},",
          "132:     {ERR_PACK(0, 0, GOST_R_ERROR_COMPUTING_EXPORT_KEYS),",
          "133:     \"error computing export keys\"},",
          "134:     {ERR_PACK(0, 0, GOST_R_ERROR_COMPUTING_SHARED_KEY),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     {ERR_PACK(0, 0, GOST_R_DATA_TOO_LARGE), \"data too large\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:     {ERR_PACK(0, 0, GOST_R_INVALID_MAC_PARAMS), \"invalid mac params\"},",
          "154:     {ERR_PACK(0, 0, GOST_R_INVALID_MAC_SIZE), \"invalid mac size\"},",
          "155:     {ERR_PACK(0, 0, GOST_R_INVALID_PARAMSET), \"invalid paramset\"},",
          "156:     {ERR_PACK(0, 0, GOST_R_KEY_IS_NOT_INITIALIZED), \"key is not initialized\"},",
          "157:     {ERR_PACK(0, 0, GOST_R_KEY_PARAMETERS_MISSING), \"key parameters missing\"},",
          "158:     {ERR_PACK(0, 0, GOST_R_MAC_KEY_NOT_SET), \"mac key not set\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     {ERR_PACK(0, 0, GOST_R_INVALID_TAG_LENGTH), \"invalid tag length\"},",
          "",
          "---------------"
        ],
        "e_gost_err.h||e_gost_err.h": [
          "File: e_gost_err.h -> e_gost_err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: # define GOST_F_GOST_ENCODE_CMS_PARAMS                    161",
          "49: # define GOST_F_GOST_GRASSHOPPER_CIPHER_CTL               111",
          "50: # define GOST_F_GOST_GRASSHOPPER_CIPHER_DO_CTRACPKM_OMAC  160",
          "51: # define GOST_F_GOST_GRASSHOPPER_CIPHER_INIT_CTRACPKM_OMAC 162",
          "52: # define GOST_F_GOST_GRASSHOPPER_SET_ASN1_PARAMETERS      112",
          "53: # define GOST_F_GOST_IMIT_CTRL                            113",
          "54: # define GOST_F_GOST_IMIT_FINAL                           114",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: # define GOST_F_GOST_GRASSHOPPER_CIPHER_DO_MGM            166",
          "53: # define GOST_F_GOST_GRASSHOPPER_MGM_CTRL                 167",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: # define GOST_F_GOST_KDFTREE2012_256                      149",
          "57: # define GOST_F_GOST_KEXP15                               143",
          "58: # define GOST_F_GOST_KIMP15                               148",
          "59: # define GOST_F_MAGMA_CIPHER_CTL                          163",
          "60: # define GOST_F_MAGMA_CIPHER_CTL_ACPKM_OMAC               164",
          "61: # define GOST_F_MAGMA_CIPHER_INIT_CTR_ACPKM_OMAC          165",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: # define GOST_F_GOST_MAGMA_CIPHER_DO_MGM                  168",
          "62: # define GOST_F_GOST_MAGMA_MGM_CTRL                       169",
          "63: # define GOST_F_GOST_MGM128_AAD                           170",
          "64: # define GOST_F_GOST_MGM128_DECRYPT                       171",
          "65: # define GOST_F_GOST_MGM128_ENCRYPT                       172",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: # define GOST_R_CANNOT_UNPACK_EPHEMERAL_KEY               136",
          "108: # define GOST_R_CIPHER_NOT_FOUND                          103",
          "109: # define GOST_R_CTRL_CALL_FAILED                          104",
          "110: # define GOST_R_ERROR_COMPUTING_EXPORT_KEYS               135",
          "111: # define GOST_R_ERROR_COMPUTING_SHARED_KEY                105",
          "112: # define GOST_R_ERROR_DECODING_PUBLIC_KEY                 138",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: # define GOST_R_DATA_TOO_LARGE                            141",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: # define GOST_R_INVALID_MAC_PARAMS                        116",
          "127: # define GOST_R_INVALID_MAC_SIZE                          117",
          "128: # define GOST_R_INVALID_PARAMSET                          118",
          "129: # define GOST_R_KEY_IS_NOT_INITIALIZED                    119",
          "130: # define GOST_R_KEY_PARAMETERS_MISSING                    120",
          "131: # define GOST_R_MAC_KEY_NOT_SET                           121",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: # define GOST_R_INVALID_TAG_LENGTH                        142",
          "",
          "---------------"
        ],
        "gost_crypt.c||gost_crypt.c": [
          "File: gost_crypt.c -> gost_crypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:                               const unsigned char *in, size_t inl);",
          "45: static int gost_cipher_cleanup(EVP_CIPHER_CTX *);",
          "47: static int gost89_set_asn1_parameters(EVP_CIPHER_CTX *ctx, ASN1_TYPE *params);",
          "48: static int gost89_get_asn1_parameters(EVP_CIPHER_CTX *ctx, ASN1_TYPE *params);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: static int gost_magma_mgm_cleanup(EVP_CIPHER_CTX *c);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:                              const unsigned char *iv, int enc);",
          "54: static int magma_cipher_init_ctr_acpkm_omac(EVP_CIPHER_CTX *ctx, const unsigned char *key,",
          "55:                              const unsigned char *iv, int enc);",
          "57: static int magma_cipher_do_ecb(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "58:                                const unsigned char *in, size_t inl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: static int gost_magma_cipher_init_mgm(EVP_CIPHER_CTX *ctx, const unsigned char *key,",
          "58:                                  const unsigned char *iv, int enc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: static int magma_cipher_do_ctr_acpkm_omac(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "65:                                const unsigned char *in, size_t inl);",
          "68: static int magma_set_asn1_parameters(EVP_CIPHER_CTX *ctx, ASN1_TYPE *params);",
          "69: static int magma_get_asn1_parameters(EVP_CIPHER_CTX *ctx, ASN1_TYPE *params);",
          "71: static int magma_cipher_ctl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);",
          "72: static int magma_cipher_ctl_acpkm_omac(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: static int gost_magma_cipher_do_mgm(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "70:                                    const unsigned char *in, size_t len);",
          "77: static int gost_magma_mgm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:     int flags = c->flags | TPL_VAL(c, flags);",
          "93:     int block_size = TPL(c, block_size);",
          "94:     switch (flags & EVP_CIPH_MODE) {",
          "102:         OPENSSL_assert(block_size != 1);",
          "103:         OPENSSL_assert(!(flags & EVP_CIPH_NO_PADDING));",
          "104:     }",
          "106:     if (TPL(c, iv_len))",
          "",
          "[Removed Lines]",
          "95:     case EVP_CIPH_CTR_MODE:",
          "96:     case EVP_CIPH_CFB_MODE:",
          "97:     case EVP_CIPH_OFB_MODE:",
          "98:         OPENSSL_assert(block_size == 1);",
          "99:         OPENSSL_assert(flags & EVP_CIPH_NO_PADDING);",
          "100:         break;",
          "101:     default:",
          "",
          "[Added Lines]",
          "100:     case EVP_CIPH_CBC_MODE:",
          "101:     case EVP_CIPH_ECB_MODE:",
          "102:     case EVP_CIPH_WRAP_MODE:",
          "105:         break;",
          "106:     default:",
          "107:         OPENSSL_assert(block_size == 1);",
          "108:         OPENSSL_assert(flags & EVP_CIPH_NO_PADDING);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:     .do_cipher = magma_cipher_do_ecb,",
          "247: };",
          "249: GOST_cipher magma_cbc_cipher = {",
          "250:     .nid = NID_magma_cbc,",
          "251:     .template = &gost_template_cipher,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  GOST_cipher magma_mgm_cipher = {",
          "255:     .nid = NID_undef,",
          "256:     .template = &magma_template_cipher,",
          "257:     .block_size = 1,",
          "258:     .iv_len = 8,",
          "259:     .flags = EVP_CIPH_NO_PADDING |",
          "260:         EVP_CIPH_CUSTOM_IV | EVP_CIPH_FLAG_CUSTOM_CIPHER |",
          "261:         EVP_CIPH_CTRL_INIT | EVP_CIPH_FLAG_AEAD_CIPHER,",
          "262:     .init = gost_magma_cipher_init_mgm,",
          "263:     .do_cipher = gost_magma_cipher_do_mgm,",
          "264:     .ctrl = gost_magma_mgm_ctrl,",
          "265:     .cleanup = gost_magma_mgm_cleanup,",
          "266:     .ctx_size = sizeof(gost_mgm_ctx)",
          "267:  };",
          "269: static void magma_NID_callback (int nid)",
          "270: {",
          "271:     magma_mgm_cipher.nid = nid;",
          "272: }",
          "274: GOST_NID_JOB magma_mgm_NID = {",
          "275:     .sn = SN_magma_mgm,",
          "276:     .ln = SN_magma_mgm,",
          "277:     .callback = magma_NID_callback,",
          "278: };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "518:  return magma_cipher_init(ctx, key, iv, enc);",
          "519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552: void gost_magma_encrypt_wrap(unsigned char *in, unsigned char *out,",
          "553:                    struct ossl_gost_cipher_ctx *c) {",
          "554:     int i;",
          "555:     unsigned char b[8];",
          "556:     unsigned char d[8];",
          "557:     for (i = 0; i < 8; i++) {",
          "558:         b[7 - i] = in[i];",
          "559:     }",
          "560:     gostcrypt(&(c->cctx), b, d);",
          "561:     for (i = 0; i < 8; i++) {",
          "562:         out[7 - i] = d[i];",
          "563:     }",
          "564: }",
          "568:     \u043f\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c\u044b\u043c \u043c\u043d\u043e\u0433\u043e\u0447\u043b\u0435\u043d\u043e\u043c",
          "569:     \\f$ f(x) = x^{64} + x^4 + x^3 + x + 1 \\in \\mathbb F_2[x]\\f$. \u0414\u043b\u044f \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f",
          "572: static void gf64_mul (uint64_t *result, uint64_t *arg1, uint64_t *arg2)",
          "573: {",
          "574:  int i = 0;",
          "575:  register uint64_t t, X0;",
          "576:  uint64_t Z0 = 0;",
          "578: #ifdef L_ENDIAN",
          "579:  X0 = BSWAP64(*arg1);",
          "580: #else",
          "581:  X0 = *arg1;",
          "582: #endif",
          "584: #ifdef L_ENDIAN",
          "585:  t = BSWAP64(*(arg2));",
          "586: #else",
          "587:  t = *(arg2);",
          "588: #endif",
          "590:  for (i = 0; i < 63; i++) {",
          "591:   if (t & 0x1) {",
          "592:    Z0 ^= X0;",
          "593:   }",
          "594:   t >>= 1;",
          "595:   if (X0 & 0x8000000000000000) {",
          "596:    X0 <<= 1;",
          "597:    X0 ^= 0x1b;",
          "598:   }",
          "599:   else {",
          "600:    X0 <<= 1;",
          "601:   }",
          "602:  }",
          "604:  if (t & 0x1) {",
          "605:   Z0 ^= X0;",
          "606:  }",
          "608: #ifdef L_ENDIAN",
          "610: #else",
          "612: #endif",
          "613: }",
          "615: static int gost_magma_cipher_init_mgm(EVP_CIPHER_CTX *ctx, const unsigned char *key,",
          "616:                                  const unsigned char *iv, int enc)",
          "617: {",
          "618:     gost_mgm_ctx *mctx =",
          "619:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(ctx);",
          "620:     int bl;",
          "622:     if (!iv && !key)",
          "623:         return 1;",
          "624:     if (key) {",
          "625:         bl = EVP_CIPHER_CTX_iv_length(ctx);",
          "626:         if (!gost_cipher_set_param(&mctx->ks.g_ks, NID_id_tc26_gost_28147_param_Z))",
          "627:             return 0;",
          "628:         magma_key(&(mctx->ks.g_ks.cctx), key);",
          "629:         gost_mgm128_init(&mctx->mgm, &mctx->ks,",
          "630:                          (block128_f) gost_magma_encrypt_wrap, gf64_mul, bl);",
          "635:         if (iv == NULL && mctx->iv_set)",
          "636:             iv = mctx->iv;",
          "637:         if (iv) {",
          "638:             if (gost_mgm128_setiv(&mctx->mgm, iv, mctx->ivlen) != 1)",
          "639:                 return 0;",
          "640:             mctx->iv_set = 1;",
          "641:         }",
          "642:         mctx->key_set = 1;",
          "643:     } else {",
          "645:         if (mctx->key_set) {",
          "646:             if (gost_mgm128_setiv(&mctx->mgm, iv, mctx->ivlen) != 1)",
          "647:                 return 0;",
          "648:         }",
          "649:         else",
          "650:             memcpy(mctx->iv, iv, mctx->ivlen);",
          "651:         mctx->iv_set = 1;",
          "652:     }",
          "653:     return 1;",
          "654: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "762:  return inl;",
          "763: }",
          "765: static int gost_cipher_do_cfb(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "766:                        const unsigned char *in, size_t inl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900: static int gost_magma_cipher_do_mgm(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "901:                                    const unsigned char *in, size_t len)",
          "902: {",
          "903:     gost_mgm_ctx *mctx =",
          "904:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(ctx);",
          "905:     int enc = EVP_CIPHER_CTX_encrypting(ctx);",
          "908:     if (!mctx->key_set) {",
          "909:         GOSTerr(GOST_F_GOST_MAGMA_CIPHER_DO_MGM,",
          "910:                 GOST_R_BAD_ORDER);",
          "911:         return -1;",
          "912:     }",
          "914:     if (!mctx->iv_set) {",
          "915:         GOSTerr(GOST_F_GOST_MAGMA_CIPHER_DO_MGM,",
          "916:                 GOST_R_BAD_ORDER);",
          "917:         return -1;",
          "918:     }",
          "919:     if (in) {",
          "920:         if (out == NULL) {",
          "921:             if (gost_mgm128_aad(&mctx->mgm, in, len))",
          "922:                 return -1;",
          "923:         } else if (enc) {",
          "924:             if (gost_mgm128_encrypt(&mctx->mgm, in, out, len))",
          "925:                 return -1;",
          "926:         } else {",
          "927:             if (gost_mgm128_decrypt(&mctx->mgm, in, out, len))",
          "928:                 return -1;",
          "929:         }",
          "930:         return len;",
          "931:     } else {",
          "932:         if (!enc) {",
          "933:             if (mctx->taglen < 0)",
          "934:                 return -1;",
          "935:             if (gost_mgm128_finish(&mctx->mgm,",
          "936:                                    EVP_CIPHER_CTX_buf_noconst(ctx),",
          "937:                                    mctx->taglen) != 0)",
          "938:                 return -1;",
          "939:             mctx->iv_set = 0;",
          "940:             return 0;",
          "941:         }",
          "942:         gost_mgm128_tag(&mctx->mgm, EVP_CIPHER_CTX_buf_noconst(ctx), 8);",
          "943:         mctx->taglen = 8;",
          "945:         mctx->iv_set = 0;",
          "946:         return 0;",
          "947:     }",
          "949: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "890:     return 1;",
          "891: }",
          "894: static int gost_cipher_ctl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)",
          "895: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1080: static int gost_magma_mgm_cleanup(EVP_CIPHER_CTX *c)",
          "1081: {",
          "1082:     gost_mgm_ctx *mctx =",
          "1083:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(c);",
          "1084:     if (mctx == NULL)",
          "1085:         return 0;",
          "1086:     gost_destroy(&mctx->ks.g_ks.cctx);",
          "1087:     OPENSSL_cleanse(&mctx->mgm, sizeof(mctx->mgm));",
          "1088:     EVP_CIPHER_CTX_set_app_data(c, NULL);",
          "1089:     return 1;",
          "1090: }",
          "1092: static int gost_magma_mgm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)",
          "1093: {",
          "1094:     gost_mgm_ctx *mctx =",
          "1095:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(c);",
          "1096:     unsigned char *buf, *iv;",
          "1097:     int ivlen, enc;",
          "1099:     switch (type) {",
          "1100:     case EVP_CTRL_INIT:",
          "1101:         ivlen = EVP_CIPHER_iv_length(EVP_CIPHER_CTX_cipher(c));",
          "1102:         iv = EVP_CIPHER_CTX_iv_noconst(c);",
          "1103:         mctx->key_set = 0;",
          "1104:         mctx->iv_set = 0;",
          "1105:         mctx->ivlen = ivlen;",
          "1106:         mctx->iv = iv;",
          "1107:         mctx->taglen = -1;",
          "1108:         return 1;",
          "1110:     case EVP_CTRL_GET_IVLEN:",
          "1112:         return 1;",
          "1114:     case EVP_CTRL_AEAD_SET_IVLEN:",
          "1115:         if (arg <= 0)",
          "1116:             return 0;",
          "1117:         if ((arg > EVP_MAX_IV_LENGTH) && (arg > mctx->ivlen)) {",
          "1119:             return 0;",
          "1120:         }",
          "1121:         mctx->ivlen = arg;",
          "1122:         return 1;",
          "1124:     case EVP_CTRL_AEAD_SET_TAG:",
          "1125:         buf = EVP_CIPHER_CTX_buf_noconst(c);",
          "1126:         enc = EVP_CIPHER_CTX_encrypting(c);",
          "1127:         if (arg <= 0 || arg != 8 || enc) {",
          "1128:             GOSTerr(GOST_F_GOST_MAGMA_MGM_CTRL,",
          "1129:                     GOST_R_INVALID_TAG_LENGTH);",
          "1130:             return 0;",
          "1131:         }",
          "1132:         memcpy(buf, ptr, arg);",
          "1133:         mctx->taglen = arg;",
          "1134:         return 1;",
          "1136:     case EVP_CTRL_AEAD_GET_TAG:",
          "1137:         buf = EVP_CIPHER_CTX_buf_noconst(c);",
          "1138:         enc = EVP_CIPHER_CTX_encrypting(c);",
          "1139:         if (arg <= 0 || arg > 8 || !enc || mctx->taglen < 0) {",
          "1140:             GOSTerr(GOST_F_GOST_MAGMA_MGM_CTRL,",
          "1141:                     GOST_R_INVALID_TAG_LENGTH);",
          "1142:             return 0;",
          "1143:         }",
          "1144:         memcpy(ptr, buf, arg);",
          "1145:         return 1;",
          "1147:     default:",
          "1148:         return -1;",
          "1149:     }",
          "1150: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1001:     case EVP_CTRL_RAND_KEY:",
          "1002:             if (RAND_priv_bytes",
          "1003:                 ((unsigned char *)ptr, EVP_CIPHER_CTX_key_length(ctx)) <= 0) {",
          "1005:                 return -1;",
          "1006:             }",
          "1007:             break;",
          "",
          "[Removed Lines]",
          "1004:                 GOSTerr(GOST_F_GOST_CIPHER_CTL, GOST_R_RNG_ERROR);",
          "",
          "[Added Lines]",
          "1263:                 GOSTerr(GOST_F_MAGMA_CIPHER_CTL, GOST_R_RNG_ERROR);",
          "",
          "---------------"
        ],
        "gost_ec_keyx.c||gost_ec_keyx.c": [
          "File: gost_ec_keyx.c -> gost_ec_keyx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     }",
          "771:     if (key != NULL && *key_len < 32) {",
          "773:         return 0;",
          "774:     }",
          "",
          "[Removed Lines]",
          "772:         GOSTerr(GOST_F_PKEY_GOST2018_ENCRYPT, GOST_R_INVALID_BUFFER_SIZE);",
          "",
          "[Added Lines]",
          "772:         GOSTerr(GOST_F_PKEY_GOST_DECRYPT, GOST_R_INVALID_BUFFER_SIZE);",
          "",
          "---------------"
        ],
        "gost_eng.c||gost_eng.c": [
          "File: gost_eng.c -> gost_eng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     &grasshopper_ofb_cipher,",
          "94:     &grasshopper_ctr_cipher,",
          "95:     &magma_ecb_cipher,",
          "96:     &magma_cbc_cipher,",
          "97:     &magma_ctr_cipher,",
          "98:     &magma_ctr_acpkm_cipher,",
          "99:     &magma_ctr_acpkm_omac_cipher,",
          "100:     &grasshopper_ctr_acpkm_cipher,",
          "101:     &grasshopper_ctr_acpkm_omac_cipher,",
          "102:     &magma_kexp15_cipher,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     &grasshopper_mgm_cipher,",
          "101:     &magma_mgm_cipher,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331: static GOST_NID_JOB *missing_NIDs[] = {",
          "332: };",
          "334: static int create_NIDs() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:     &kuznyechik_mgm_NID,",
          "335:     &magma_mgm_NID,",
          "",
          "---------------"
        ],
        "gost_gost2015.c||gost_gost2015.c": [
          "File: gost_gost2015.c -> gost_gost2015.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"gost_lcl.h\"",
          "8: #include \"gost_gost2015.h\"",
          "9: #include \"e_gost_err.h\"",
          "10: #include <string.h>",
          "11: #include <openssl/rand.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include \"gost_grasshopper_defines.h\"",
          "10: #include \"gost_grasshopper_math.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:     return is_zero_kdfseed ? RAND_bytes(kdf_seed, 8) : 1;",
          "203: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: void gost_mgm128_init(mgm128_context *ctx, void *key, block128_f block, mul128_f mul_gf, int blen)",
          "208: {",
          "209:     memset(ctx, 0, sizeof(*ctx));",
          "210:     ctx->block = block;",
          "211:     ctx->mul_gf = mul_gf;",
          "212:     ctx->key = key;",
          "213:     ctx->blocklen = blen;",
          "218: }",
          "220: int gost_mgm128_setiv(mgm128_context *ctx, const unsigned char *iv,",
          "221:                          size_t len)",
          "222: {",
          "225:     ctx->ares = 0;",
          "226:     ctx->mres = 0;",
          "228:     ctx->ACi.u[0] = 0;",
          "229:     ctx->ACi.u[1] = 0;",
          "230:     ctx->sum.u[0] = 0;",
          "231:     ctx->sum.u[1] = 0;",
          "233:     memcpy(ctx->nonce.c, iv, ctx->blocklen);",
          "235:     return 1;",
          "236: }",
          "238: int gost_mgm128_aad(mgm128_context *ctx, const unsigned char *aad,",
          "239:                       size_t len)",
          "240: {",
          "241:     size_t i;",
          "242:     unsigned int n;",
          "243:     uint64_t alen = ctx->len.u[0];",
          "244:     block128_f block = ctx->block;",
          "245:     mul128_f mul_gf = ctx->mul_gf;",
          "246:     void *key = ctx->key;",
          "247:     int bl = ctx->blocklen;",
          "249:     if (ctx->len.u[1]) {",
          "250:         GOSTerr(GOST_F_GOST_MGM128_AAD,",
          "251:                 GOST_R_BAD_ORDER);",
          "252:         return -2;",
          "253:     }",
          "255:     if (alen == 0) {",
          "256:         ctx->nonce.c[0] |= 0x80;",
          "257:         (*block) (ctx->nonce.c, ctx->Zi.c, key);    // Z_1 = E_K(1 || nonce)",
          "258:     }",
          "260:     alen += len;",
          "261:     if (alen > ((ossl_uintmax_t)(1) << (bl * 4 - 3)) ||      // < 2^(n/2)  (len stores in bytes)",
          "262:         (sizeof(len) == 8 && alen < len)) {",
          "263:             GOSTerr(GOST_F_GOST_MGM128_AAD,",
          "264:                     GOST_R_DATA_TOO_LARGE);",
          "265:             return -1;",
          "266:         }",
          "267:     ctx->len.u[0] = alen;",
          "269:     n = ctx->ares;",
          "270:     if (n) {",
          "272:         while (n && len) {",
          "273:             ctx->ACi.c[n] = *(aad++);",
          "274:             --len;",
          "275:             n = (n + 1) % bl;",
          "276:         }",
          "277:         if (n == 0) {",
          "278:             (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "279:             mul_gf(ctx->mul.u, ctx->Hi.u, ctx->ACi.u);              // H_i (x) A_i",
          "280:             grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "281:               (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "282:             inc_counter(ctx->Zi.c, bl / 2);                              // Z_{i+1} = incr_l(Z_i)",
          "283:         } else {",
          "284:             ctx->ares = n;",
          "285:             return 0;",
          "286:         }",
          "287:     }",
          "288:     while (len >= bl) {",
          "289:         (*block) (ctx->Zi.c, ctx->Hi.c, key);                       // H_i = E_K(Z_i)",
          "290:         mul_gf(ctx->mul.u, ctx->Hi.u, (uint64_t *)aad);             // H_i (x) A_i",
          "291:         grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,        // acc XOR",
          "292:             (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "293:         inc_counter(ctx->Zi.c, bl / 2);                                  // Z_{i+1} = incr_l(Z_i)",
          "294:         aad += bl;",
          "295:         len -= bl;",
          "296:     }",
          "297:     if (len) {",
          "298:         n = (unsigned int)len;",
          "299:         for (i = 0; i < len; ++i)",
          "300:             ctx->ACi.c[i] = aad[i];",
          "301:     }",
          "303:     ctx->ares = n;",
          "304:     return 0;",
          "305: }",
          "307: int gost_mgm128_encrypt(mgm128_context *ctx, const unsigned char *in,",
          "308:                           unsigned char *out, size_t len)",
          "309: {",
          "310:     size_t i;",
          "311:     unsigned int n, mres;",
          "312:     uint64_t alen = ctx->len.u[0];",
          "313:     uint64_t mlen = ctx->len.u[1];",
          "314:     block128_f block = ctx->block;",
          "315:     mul128_f mul_gf = ctx->mul_gf;",
          "316:     void *key = ctx->key;",
          "317:     int bl = ctx->blocklen;",
          "319:     if (mlen == 0) {",
          "320:         if (alen == 0) {",
          "321:             ctx->nonce.c[0] |= 0x80;",
          "322:             (*block) (ctx->nonce.c, ctx->Zi.c, key);    // Z_1 = E_K(1 || nonce)",
          "323:         }",
          "324:         ctx->nonce.c[0] &= 0x7f;",
          "325:         (*block) (ctx->nonce.c, ctx->Yi.c, key);    // Y_1 = E_K(0 || nonce)",
          "326:     }",
          "328:     mlen += len;",
          "330:     if (mlen > ((ossl_uintmax_t)(1) << (bl * 4 - 3)) ||     // < 2^(n/2)  (len stores in bytes)",
          "331:         (sizeof(len) == 8 && mlen < len) ||",
          "332:         (mlen + alen) > ((ossl_uintmax_t)(1) << (bl * 4 - 3))) {",
          "333:             GOSTerr(GOST_F_GOST_MGM128_ENCRYPT,",
          "334:                     GOST_R_DATA_TOO_LARGE);",
          "335:             return -1;",
          "336:         }",
          "337:     ctx->len.u[1] = mlen;",
          "339:     mres = ctx->mres;",
          "341:     if (ctx->ares) {",
          "343:         memset(ctx->ACi.c + ctx->ares, 0, bl - ctx->ares);",
          "344:         (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "345:         mul_gf(ctx->mul.u, ctx->Hi.u, ctx->ACi.u);              // H_i (x) A_i",
          "346:         grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "347:             (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "348:         inc_counter(ctx->Zi.c, bl / 2);                         // Z_{i+1} = incr_l(Z_i)",
          "350:         ctx->ares = 0;",
          "351:     }",
          "353:     n = mres % bl;",
          "355:     for (i = 0; i < len; ++i) {",
          "356:         if (n == 0) {",
          "357:             (*block) (ctx->Yi.c, ctx->EKi.c, key);          // E_K(Y_i)",
          "358:             inc_counter(ctx->Yi.c + bl / 2, bl / 2);        // Y_i = incr_r(Y_{i-1})",
          "359:         }",
          "360:         ctx->ACi.c[n] = out[i] = in[i] ^ ctx->EKi.c[n];     // C_i = P_i (xor) E_K(Y_i)",
          "361:         mres = n = (n + 1) % bl;",
          "362:         if (n == 0) {",
          "363:             (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "364:             mul_gf(ctx->mul.u, ctx->Hi.u, ctx->ACi.u);              // H_i (x) C_i",
          "365:             grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "366:                 (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "367:             inc_counter(ctx->Zi.c, bl / 2);                         // Z_{i+1} = incr_l(Z_i)",
          "368:         }",
          "369:     }",
          "371:     ctx->mres = mres;",
          "372:     return 0;",
          "373: }",
          "375: int gost_mgm128_decrypt(mgm128_context *ctx, const unsigned char *in,",
          "376:                           unsigned char *out, size_t len)",
          "377: {",
          "378:     size_t i;",
          "379:     unsigned int n, mres;",
          "380:     uint64_t alen = ctx->len.u[0];",
          "381:     uint64_t mlen = ctx->len.u[1];",
          "382:     block128_f block = ctx->block;",
          "383:     mul128_f mul_gf = ctx->mul_gf;",
          "384:     void *key = ctx->key;",
          "385:     int bl = ctx->blocklen;",
          "387:     if (mlen == 0) {",
          "388:         ctx->nonce.c[0] &= 0x7f;",
          "389:         (*block) (ctx->nonce.c, ctx->Yi.c, key);  // Y_1 = E_K(0 || nonce)",
          "390:     }",
          "392:     mlen += len;",
          "393:     if (mlen > ((ossl_uintmax_t)(1) << (bl * 4 - 3)) ||     // < 2^(n/2)  (len stores in bytes)",
          "394:         (sizeof(len) == 8 && mlen < len) ||",
          "395:         (mlen + alen) > ((ossl_uintmax_t)(1) << (bl * 4 - 3))) {",
          "396:             GOSTerr(GOST_F_GOST_MGM128_DECRYPT,",
          "397:                     GOST_R_DATA_TOO_LARGE);",
          "398:             return -1;",
          "399:         }",
          "400:     ctx->len.u[1] = mlen;",
          "402:     mres = ctx->mres;",
          "404:     if (ctx->ares) {",
          "406:         memset(ctx->ACi.c + ctx->ares, 0, bl - ctx->ares);",
          "407:         (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "408:         mul_gf(ctx->mul.u, ctx->Hi.u, ctx->ACi.u);              // H_i (x) A_i",
          "409:         grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "410:             (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "411:         inc_counter(ctx->Zi.c, bl / 2);                         // Z_{i+1} = incr_l(Z_i)",
          "413:         ctx->ares = 0;",
          "414:     }",
          "416:     n = mres % bl;",
          "418:     for (i = 0; i < len; ++i) {",
          "419:         uint8_t c;",
          "420:         if (n == 0) {",
          "421:             (*block) (ctx->Yi.c, ctx->EKi.c, key);      // E_K(Y_i)",
          "422:             inc_counter(ctx->Yi.c + bl / 2, bl / 2);    // Y_i = incr_r(Y_{i-1})",
          "423:         }",
          "424:         ctx->ACi.c[n] = c = in[i];",
          "425:         out[i] = c ^ ctx->EKi.c[n];             // P_i = C_i (xor) E_K(Y_i)",
          "426:         mres = n = (n + 1) % bl;",
          "427:         if (n == 0) {",
          "428:             (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "429:             mul_gf(ctx->mul.u, ctx->Hi.u, ctx->ACi.u);              // H_i (x) C_i",
          "430:             grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "431:                 (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "432:             inc_counter(ctx->Zi.c, bl / 2);                         // Z_{i+1} = incr_l(Z_i)",
          "433:         }",
          "434:     }",
          "436:     ctx->mres = mres;",
          "437:     return 0;",
          "438: }",
          "440: int gost_mgm128_finish(mgm128_context *ctx, const unsigned char *tag,",
          "441:                          size_t len)",
          "442: {",
          "443:     uint64_t alen = ctx->len.u[0] << 3;",
          "444:     uint64_t clen = ctx->len.u[1] << 3;",
          "445:     block128_f block = ctx->block;",
          "446:     mul128_f mul_gf = ctx->mul_gf;",
          "447:     void *key = ctx->key;",
          "448:     int bl = ctx->blocklen;",
          "450:     if (ctx->mres || ctx->ares) {",
          "452:         memset(ctx->ACi.c + ctx->ares + ctx->mres, 0, bl - (ctx->ares + ctx->mres));",
          "453:         (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "454:         mul_gf(ctx->mul.u, ctx->Hi.u, ctx->ACi.u);              // H_i (x) [A_i or C_i]",
          "455:         grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "456:             (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "457:         inc_counter(ctx->Zi.c, bl / 2);                         // Z_{i+1} = incr_l(Z_i)",
          "458:     }",
          "460: #ifdef L_ENDIAN",
          "461:     alen = BSWAP64(alen);",
          "462:     clen = BSWAP64(clen);",
          "463: #endif",
          "464:     if (bl == 16) {",
          "465:         ctx->len.u[0] = alen;",
          "466:         ctx->len.u[1] = clen;",
          "467:     } else {",
          "469:         ctx->len.u[0] = (alen >> 32) | clen;",
          "470:         ctx->len.u[1] = 0;",
          "471:     }",
          "473:     (*block) (ctx->Zi.c, ctx->Hi.c, key);                   // H_i = E_K(Z_i)",
          "474:     mul_gf(ctx->mul.u, ctx->Hi.u, ctx->len.u);              // H_i (x) (len(A) || len(C))",
          "475:     grasshopper_plus128((grasshopper_w128_t*)ctx->sum.u,    // acc XOR",
          "476:             (grasshopper_w128_t*)ctx->sum.u, (grasshopper_w128_t*)ctx->mul.u);",
          "477:     (*block) (ctx->sum.c, ctx->tag.c, key);                 // E_K(sum)",
          "479:     if (tag && len <= sizeof(ctx->tag))",
          "480:         return CRYPTO_memcmp(ctx->tag.c, tag, len);         // MSB_S(E_K(sum))",
          "481:     else",
          "482:         return -1;",
          "483: }",
          "485: void gost_mgm128_tag(mgm128_context *ctx, unsigned char *tag, size_t len)",
          "486: {",
          "487:     gost_mgm128_finish(ctx, NULL, 0);",
          "488:     memcpy(tag, ctx->tag.c,",
          "489:            len <= sizeof(ctx->tag.c) ? len : sizeof(ctx->tag.c));",
          "490: }",
          "",
          "---------------"
        ],
        "gost_gost2015.h||gost_gost2015.h": [
          "File: gost_gost2015.h -> gost_gost2015.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #ifndef GOST_GOST2015_H",
          "8: #define GOST_GOST2015_H",
          "10: #include <openssl/evp.h>",
          "11: #include <openssl/x509.h>",
          "13: #define MAGMA_MAC_MAX_SIZE 8",
          "14: #define KUZNYECHIK_MAC_MAX_SIZE 16",
          "15: #define OID_GOST_CMS_MAC \"1.2.643.7.1.0.6.1.1\"",
          "17: int gost2015_final_call(EVP_CIPHER_CTX *ctx, EVP_MD_CTX *omac_ctx, size_t mac_size,",
          "18:    unsigned char *encrypted_mac,",
          "19:    int (*do_cipher) (EVP_CIPHER_CTX *ctx,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"gost_grasshopper_cipher.h\"",
          "14: #include <openssl/modes.h>",
          "20: #define SN_magma_mgm            \"magma-mgm\"",
          "22: #define BSWAP64(x) \\",
          "23:     (((x & 0xFF00000000000000ULL) >> 56) | \\",
          "24:      ((x & 0x00FF000000000000ULL) >> 40) | \\",
          "25:      ((x & 0x0000FF0000000000ULL) >> 24) | \\",
          "26:      ((x & 0x000000FF00000000ULL) >>  8) | \\",
          "27:      ((x & 0x00000000FF000000ULL) <<  8) | \\",
          "28:      ((x & 0x0000000000FF0000ULL) << 24) | \\",
          "29:      ((x & 0x000000000000FF00ULL) << 40) | \\",
          "30:      ((x & 0x00000000000000FFULL) << 56))",
          "32: typedef void (*mul128_f) (uint64_t *result, uint64_t *arg1, uint64_t *arg2);",
          "34: typedef struct {",
          "35:     union {",
          "36:         uint64_t u[2];",
          "37:         uint32_t d[4];",
          "38:         uint8_t c[16];",
          "39:     } nonce, Yi, Zi, EKi, Hi, len, ACi, mul, sum, tag;",
          "41:     unsigned int mres, ares;",
          "42:     block128_f block;",
          "43:     mul128_f mul_gf;",
          "44:     int blocklen;",
          "45:     void *key;",
          "46: } mgm128_context;",
          "48: typedef struct {",
          "49:     union {",
          "50:         struct ossl_gost_cipher_ctx g_ks;",
          "51:         gost_grasshopper_cipher_ctx gh_ks;",
          "52:     } ks;",
          "53:     int key_set;",
          "54:     int iv_set;",
          "55:     mgm128_context mgm;",
          "56:     unsigned char *iv;",
          "57:     int ivlen;",
          "58:     int taglen;",
          "59:     int tlstree_mode;",
          "60: } gost_mgm_ctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:                              unsigned char *outkey, unsigned char *kdf_seed);",
          "37: int init_zero_kdf_seed(unsigned char *kdf_seed);",
          "39: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: void gost_mgm128_init(mgm128_context *ctx, void *key, block128_f block,",
          "88:        mul128_f mul_gf, int blen);",
          "90: int gost_mgm128_setiv(mgm128_context *ctx, const unsigned char *iv, size_t len);",
          "92: int gost_mgm128_aad(mgm128_context *ctx, const unsigned char *aad, size_t len);",
          "94: int gost_mgm128_encrypt(mgm128_context *ctx, const unsigned char *in,",
          "95:                           unsigned char *out, size_t len);",
          "97: int gost_mgm128_decrypt(mgm128_context *ctx, const unsigned char *in,",
          "98:                           unsigned char *out, size_t len);",
          "100: int gost_mgm128_finish(mgm128_context *ctx, const unsigned char *tag, size_t len);",
          "102: void gost_mgm128_tag(mgm128_context *ctx, unsigned char *tag, size_t len);",
          "",
          "---------------"
        ],
        "gost_grasshopper_cipher.c||gost_grasshopper_cipher.c": [
          "File: gost_grasshopper_cipher.c -> gost_grasshopper_cipher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     GRASSHOPPER_CIPHER_CTR,",
          "27:     GRASSHOPPER_CIPHER_CTRACPKM,",
          "28:     GRASSHOPPER_CIPHER_CTRACPKMOMAC,",
          "29: };",
          "31: static GOST_cipher grasshopper_template_cipher = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     GRASSHOPPER_CIPHER_MGM,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     .ctx_size = sizeof(gost_grasshopper_cipher_ctx_ctr),",
          "125: };",
          "128: static const unsigned char ACPKM_D_2018[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: GOST_cipher grasshopper_mgm_cipher = {",
          "129:     .nid = NID_undef,",
          "130:     .template = &grasshopper_template_cipher,",
          "131:     .block_size = 1,",
          "132:     .iv_len = 16,",
          "133:     .flags = EVP_CIPH_NO_PADDING |",
          "134:         EVP_CIPH_CUSTOM_IV | EVP_CIPH_FLAG_CUSTOM_CIPHER |",
          "135:         EVP_CIPH_CTRL_INIT | EVP_CIPH_FLAG_AEAD_CIPHER,",
          "136:     .cleanup = gost_grasshopper_mgm_cleanup,",
          "137:     .ctrl = gost_grasshopper_mgm_ctrl,",
          "138:     .init = gost_grasshopper_cipher_init_mgm,",
          "139:     .do_cipher = gost_grasshopper_cipher_do_mgm,",
          "140:     .ctx_size = sizeof(gost_mgm_ctx)",
          "141: };",
          "143: static void kuznyechik_NID_callback (int nid)",
          "144: {",
          "145:     grasshopper_mgm_cipher.nid = nid;",
          "146: }",
          "148: GOST_NID_JOB kuznyechik_mgm_NID = {",
          "149:     .sn = SN_kuznyechik_mgm,",
          "150:     .ln = SN_kuznyechik_mgm,",
          "151:     .callback = kuznyechik_NID_callback,",
          "152: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:     return gost_grasshopper_cipher_init(ctx, key, iv, enc);",
          "345: }",
          "347: static int gost_grasshopper_cipher_do_ecb(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "348:                                           const unsigned char *in, size_t inl)",
          "349: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: void gost_grasshopper_encrypt_wrap(unsigned char *in, unsigned char *out,",
          "376:                    gost_grasshopper_cipher_ctx *c) {",
          "377:     grasshopper_encrypt_block(&c->encrypt_round_keys,",
          "378:                               (grasshopper_w128_t *) in,",
          "379:                               (grasshopper_w128_t *) out,",
          "380:                               &c->buffer);",
          "381: }",
          "387:     \u043f\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c\u044b\u043c \u043c\u043d\u043e\u0433\u043e\u0447\u043b\u0435\u043d\u043e\u043c",
          "388:     \\f$ f(x) = x^{128} + x^7 + x^2 + x + 1 \\in \\mathbb F_2[x]\\f$. \u0414\u043b\u044f \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f",
          "391: static void gf128_mul_uint64 (uint64_t *result, uint64_t *arg1, uint64_t *arg2)",
          "392: {",
          "393:  int i = 0;",
          "394:  register uint64_t t, X0, X1;",
          "395:  uint64_t Z0 = 0, Z1 = 0;",
          "397: #ifdef L_ENDIAN",
          "398:  X0 = BSWAP64(*(arg1 + 1));",
          "399:  X1 = BSWAP64(*arg1);",
          "400: #else",
          "401:  X0 = *(arg1 + 1);",
          "402:  X1 = *arg1;",
          "403: #endif",
          "406: #ifdef L_ENDIAN",
          "407:  t = BSWAP64(*(arg2 + 1));",
          "408: #else",
          "409:  t = *(arg2 + 1);",
          "410: #endif",
          "412:  for (i = 0; i < 64; i++) {",
          "413:   if (t & 0x1) {",
          "414:    Z0 ^= X0;",
          "415:    Z1 ^= X1;",
          "416:   }",
          "417:   t >>= 1;",
          "418:   if (X1 & 0x8000000000000000) {",
          "419:    X1 <<= 1;",
          "420:    X1 ^= X0>>63;",
          "421:    X0 <<= 1;",
          "422:    X0 ^= 0x87;",
          "423:   }",
          "424:   else {",
          "425:    X1 <<= 1;",
          "426:    X1 ^= X0>>63;",
          "427:    X0 <<= 1;",
          "428:   }",
          "429:  }",
          "432: #ifdef L_ENDIAN",
          "433:  t = BSWAP64(*arg2);",
          "434: #else",
          "435:  t = *arg2;",
          "436: #endif",
          "438:  for (i = 0; i < 63; i++) {",
          "439:   if (t & 0x1) {",
          "440:    Z0 ^= X0;",
          "441:    Z1 ^= X1;",
          "442:   }",
          "443:   t >>= 1;",
          "444:   if (X1 & 0x8000000000000000) {",
          "445:    X1 <<= 1;",
          "446:    X1 ^= X0>>63;",
          "447:    X0 <<= 1;",
          "448:    X0 ^= 0x87;",
          "449:   }",
          "450:   else {",
          "451:    X1 <<= 1;",
          "452:    X1 ^= X0>>63;",
          "453:    X0 <<= 1;",
          "454:   }",
          "455:  }",
          "457:  if (t & 0x1) {",
          "458:   Z0 ^= X0;",
          "459:   Z1 ^= X1;",
          "460:  }",
          "462: #ifdef L_ENDIAN",
          "463:  result[0] = BSWAP64(Z1);",
          "464:  result[1] = BSWAP64(Z0);",
          "465: #else",
          "466:  result[0] = Z1;",
          "467:  result[1] = Z0;",
          "468: #endif",
          "469: }",
          "471: static GRASSHOPPER_INLINE int",
          "472: gost_grasshopper_cipher_init_mgm(EVP_CIPHER_CTX *ctx, const unsigned char *key,",
          "473:                                  const unsigned char *iv, int enc)",
          "474: {",
          "475:     gost_mgm_ctx *mctx =",
          "476:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(ctx);",
          "477:     int bl;",
          "479:     if (!iv && !key)",
          "480:         return 1;",
          "481:     if (key) {",
          "482:         bl = EVP_CIPHER_CTX_iv_length(ctx);",
          "483:         gost_grasshopper_cipher_key(&mctx->ks.gh_ks, key);",
          "484:         gost_mgm128_init(&mctx->mgm, &mctx->ks,",
          "485:                          (block128_f) gost_grasshopper_encrypt_wrap, gf128_mul_uint64, bl);",
          "490:         if (iv == NULL && mctx->iv_set)",
          "491:             iv = mctx->iv;",
          "492:         if (iv) {",
          "493:             if (gost_mgm128_setiv(&mctx->mgm, iv, mctx->ivlen) != 1)",
          "494:                 return 0;",
          "495:             mctx->iv_set = 1;",
          "496:         }",
          "497:         mctx->key_set = 1;",
          "498:     } else {",
          "500:         if (mctx->key_set) {",
          "501:             if (gost_mgm128_setiv(&mctx->mgm, iv, mctx->ivlen) != 1)",
          "502:                 return 0;",
          "503:         }",
          "504:         else",
          "505:             memcpy(mctx->iv, iv, mctx->ivlen);",
          "506:         mctx->iv_set = 1;",
          "507:     }",
          "508:     return 1;",
          "509: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "583:     return result;",
          "584: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: static int gost_grasshopper_cipher_do_mgm(EVP_CIPHER_CTX *ctx, unsigned char *out,",
          "753:                                    const unsigned char *in, size_t len)",
          "754: {",
          "755:     gost_mgm_ctx *mctx =",
          "756:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(ctx);",
          "757:     int enc = EVP_CIPHER_CTX_encrypting(ctx);",
          "760:     if (!mctx->key_set) {",
          "761:         GOSTerr(GOST_F_GOST_GRASSHOPPER_CIPHER_DO_MGM,",
          "762:                 GOST_R_BAD_ORDER);",
          "763:         return -1;",
          "764:     }",
          "766:     if (!mctx->iv_set) {",
          "767:         GOSTerr(GOST_F_GOST_GRASSHOPPER_CIPHER_DO_MGM,",
          "768:                 GOST_R_BAD_ORDER);",
          "769:         return -1;",
          "770:     }",
          "771:     if (in) {",
          "772:         if (out == NULL) {",
          "773:             if (gost_mgm128_aad(&mctx->mgm, in, len))",
          "774:                 return -1;",
          "775:         } else if (enc) {",
          "776:             if (gost_mgm128_encrypt(&mctx->mgm, in, out, len))",
          "777:                 return -1;",
          "778:         } else {",
          "779:             if (gost_mgm128_decrypt(&mctx->mgm, in, out, len))",
          "780:                 return -1;",
          "781:         }",
          "782:         return len;",
          "783:     } else {",
          "784:         if (!enc) {",
          "785:             if (mctx->taglen < 0)",
          "786:                 return -1;",
          "787:             if (gost_mgm128_finish(&mctx->mgm,",
          "788:                                    EVP_CIPHER_CTX_buf_noconst(ctx),",
          "789:                                    mctx->taglen) != 0)",
          "790:                 return -1;",
          "791:             mctx->iv_set = 0;",
          "792:             return 0;",
          "793:         }",
          "794:         gost_mgm128_tag(&mctx->mgm, EVP_CIPHER_CTX_buf_noconst(ctx), 16);",
          "795:         mctx->taglen = 16;",
          "797:         mctx->iv_set = 0;",
          "798:         return 0;",
          "799:     }",
          "801: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "799:     return 0;",
          "800: }",
          "802: static int gost_grasshopper_cipher_ctl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)",
          "803: {",
          "804:     switch (type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020: static int gost_grasshopper_mgm_cleanup(EVP_CIPHER_CTX *c)",
          "1021: {",
          "1022:     gost_mgm_ctx *mctx =",
          "1023:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(c);",
          "1024:     if (mctx == NULL)",
          "1025:         return 0;",
          "1026:     gost_grasshopper_cipher_destroy(&mctx->ks.gh_ks);",
          "1027:     OPENSSL_cleanse(&mctx->mgm, sizeof(mctx->mgm));",
          "1028:     if (mctx->iv != EVP_CIPHER_CTX_iv_noconst(c))",
          "1029:         OPENSSL_free(mctx->iv);",
          "1030:     return 1;",
          "1031: }",
          "1033: static int gost_grasshopper_mgm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)",
          "1034: {",
          "1035:     gost_mgm_ctx *mctx =",
          "1036:         (gost_mgm_ctx *)EVP_CIPHER_CTX_get_cipher_data(c);",
          "1037:     unsigned char *buf, *iv;",
          "1038:     int ivlen, enc;",
          "1040:     switch (type) {",
          "1041:     case EVP_CTRL_INIT:",
          "1042:         ivlen = EVP_CIPHER_iv_length(EVP_CIPHER_CTX_cipher(c));",
          "1043:         iv = EVP_CIPHER_CTX_iv_noconst(c);",
          "1044:         mctx->key_set = 0;",
          "1045:         mctx->iv_set = 0;",
          "1046:         mctx->ivlen = ivlen;",
          "1047:         mctx->iv = iv;",
          "1048:         mctx->taglen = -1;",
          "1049:         return 1;",
          "1051:     case EVP_CTRL_GET_IVLEN:",
          "1053:         return 1;",
          "1055:     case EVP_CTRL_AEAD_SET_IVLEN:",
          "1056:         if (arg <= 0)",
          "1057:             return 0;",
          "1058:         if ((arg > EVP_MAX_IV_LENGTH) && (arg > mctx->ivlen)) {",
          "1060:             return 0;",
          "1061:         }",
          "1062:         mctx->ivlen = arg;",
          "1063:         return 1;",
          "1065:     case EVP_CTRL_AEAD_SET_TAG:",
          "1066:         buf = EVP_CIPHER_CTX_buf_noconst(c);",
          "1067:         enc = EVP_CIPHER_CTX_encrypting(c);",
          "1068:         if (arg <= 0 || arg != 16 || enc) {",
          "1069:             GOSTerr(GOST_F_GOST_GRASSHOPPER_MGM_CTRL,",
          "1070:                     GOST_R_INVALID_TAG_LENGTH);",
          "1071:             return 0;",
          "1072:         }",
          "1073:         memcpy(buf, ptr, arg);",
          "1074:         mctx->taglen = arg;",
          "1075:         return 1;",
          "1077:     case EVP_CTRL_AEAD_GET_TAG:",
          "1078:         buf = EVP_CIPHER_CTX_buf_noconst(c);",
          "1079:         enc = EVP_CIPHER_CTX_encrypting(c);",
          "1080:         if (arg <= 0 || arg > 16 || !enc || mctx->taglen < 0) {",
          "1081:             GOSTerr(GOST_F_GOST_GRASSHOPPER_MGM_CTRL,",
          "1082:                     GOST_R_INVALID_TAG_LENGTH);",
          "1083:             return 0;",
          "1084:         }",
          "1085:         memcpy(ptr, buf, arg);",
          "1086:         return 1;",
          "1088:     default:",
          "1089:         return -1;",
          "1090:     }",
          "1091: }",
          "",
          "---------------"
        ],
        "gost_grasshopper_cipher.h||gost_grasshopper_cipher.h": [
          "File: gost_grasshopper_cipher.h -> gost_grasshopper_cipher.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #ifndef GOST_GRASSHOPPER_CIPHER_H",
          "7: #define GOST_GRASSHOPPER_CIPHER_H",
          "9: #if defined(__cplusplus)",
          "10: extern \"C\" {",
          "11: #endif",
          "13: #include \"gost_grasshopper_defines.h\"",
          "15: #include <openssl/evp.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #define SN_kuznyechik_mgm      \"kuznyechik-mgm\"",
          "17: #include \"gost_lcl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: static int gost_grasshopper_cipher_init_ctracpkm_omac(EVP_CIPHER_CTX* ctx,",
          "61:     const unsigned char* key, const unsigned char* iv, int enc);",
          "63: static int gost_grasshopper_cipher_init(EVP_CIPHER_CTX* ctx, const unsigned char* key,",
          "64:     const unsigned char* iv, int enc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: static int gost_grasshopper_cipher_init_mgm(EVP_CIPHER_CTX* ctx,",
          "67:     const unsigned char* key, const unsigned char* iv, int enc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: static int gost_grasshopper_cipher_do_ctracpkm_omac(EVP_CIPHER_CTX* ctx, unsigned char* out,",
          "88:     const unsigned char* in, size_t inl);",
          "90: static int gost_grasshopper_cipher_cleanup(EVP_CIPHER_CTX* ctx);",
          "92: static int gost_grasshopper_set_asn1_parameters(EVP_CIPHER_CTX* ctx, ASN1_TYPE* params);",
          "94: static int gost_grasshopper_get_asn1_parameters(EVP_CIPHER_CTX* ctx, ASN1_TYPE* params);",
          "96: static int gost_grasshopper_cipher_ctl(EVP_CIPHER_CTX* ctx, int type, int arg, void* ptr);",
          "98: const EVP_CIPHER* cipher_gost_grasshopper_ctracpkm();",
          "100: #if defined(__cplusplus)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96: static int gost_grasshopper_cipher_do_mgm(EVP_CIPHER_CTX* ctx, unsigned char* out,",
          "97:     const unsigned char* in, size_t inl);",
          "101: static int gost_grasshopper_mgm_cleanup(EVP_CIPHER_CTX *c);",
          "109: static int gost_grasshopper_mgm_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);",
          "",
          "---------------"
        ],
        "gost_lcl.h||gost_lcl.h": [
          "File: gost_lcl.h -> gost_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "352: extern GOST_cipher magma_ctr_acpkm_omac_cipher;",
          "353: extern GOST_cipher magma_ecb_cipher;",
          "354: extern GOST_cipher magma_cbc_cipher;",
          "355: extern GOST_cipher grasshopper_ecb_cipher;",
          "356: extern GOST_cipher grasshopper_cbc_cipher;",
          "357: extern GOST_cipher grasshopper_cfb_cipher;",
          "358: extern GOST_cipher grasshopper_ofb_cipher;",
          "359: extern GOST_cipher grasshopper_ctr_cipher;",
          "360: extern GOST_cipher grasshopper_ctr_acpkm_cipher;",
          "361: extern GOST_cipher grasshopper_ctr_acpkm_omac_cipher;",
          "362: extern GOST_cipher magma_kexp15_cipher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: extern GOST_cipher magma_mgm_cipher;",
          "361: extern GOST_cipher grasshopper_mgm_cipher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412: typedef struct gost_nid_job GOST_NID_JOB;",
          "414: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416: extern GOST_NID_JOB magma_mgm_NID;",
          "417: extern GOST_NID_JOB kuznyechik_mgm_NID;",
          "",
          "---------------"
        ],
        "tcl_tests/engine.try||tcl_tests/engine.try": [
          "File: tcl_tests/engine.try -> tcl_tests/engine.try",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: switch -exact [engine_name] {",
          "8:  \"ccore\" {set list \" \\[RAND, gost89, gost89-cnt, gost89-cnt-12, gost89-cbc, id-tc26-cipher-gostr3412-2015-magma-ctracpkm, magma-ctr, magma-ofb, magma-ecb, magma-cbc, magma-cfb, grasshopper-ecb, grasshopper-cbc, grasshopper-ofb, grasshopper-cfb, grasshopper-ctr, id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm, md_gost94, gost-mac, md_gost12_256, md_gost12_512, gost-mac-12, gost2001, id-GostR3410-2001DH, gost-mac, gost2012_256, gost2012_512, gost-mac-12\\]\\n\"}",
          "10: }",
          "",
          "[Removed Lines]",
          "9:  \"open\" {set list \"(gost) Reference implementation of GOST engine\\n \\[gost89, gost89-cnt, gost89-cnt-12, gost89-cbc, kuznyechik-ecb, kuznyechik-cbc, kuznyechik-cfb, kuznyechik-ofb, kuznyechik-ctr, magma-ecb, magma-cbc, magma-ctr, magma-ctr-acpkm, magma-ctr-acpkm-omac, kuznyechik-ctr-acpkm, kuznyechik-ctr-acpkm-omac, magma-kexp15, kuznyechik-kexp15, md_gost94, gost-mac, md_gost12_256, md_gost12_512, gost-mac-12, magma-mac, kuznyechik-mac, kuznyechik-ctr-acpkm-omac, gost2001, id-GostR3410-2001DH, gost-mac, gost2012_256, gost2012_512, gost-mac-12, magma-mac, kuznyechik-mac, magma-ctr-acpkm-omac, kuznyechik-ctr-acpkm-omac\\]\\n\"}",
          "",
          "[Added Lines]",
          "9:  \"open\" {set list \"(gost) Reference implementation of GOST engine\\n \\[gost89, gost89-cnt, gost89-cnt-12, gost89-cbc, kuznyechik-ecb, kuznyechik-cbc, kuznyechik-cfb, kuznyechik-ofb, kuznyechik-ctr, magma-ecb, kuznyechik-mgm, magma-cbc, magma-ctr, magma-ctr-acpkm, magma-ctr-acpkm-omac, magma-mgm, kuznyechik-ctr-acpkm, kuznyechik-ctr-acpkm-omac, magma-kexp15, kuznyechik-kexp15, md_gost94, gost-mac, md_gost12_256, md_gost12_512, gost-mac-12, magma-mac, kuznyechik-mac, kuznyechik-ctr-acpkm-omac, gost2001, id-GostR3410-2001DH, gost-mac, gost2012_256, gost2012_512, gost-mac-12, magma-mac, kuznyechik-mac, magma-ctr-acpkm-omac, kuznyechik-ctr-acpkm-omac]\\n\"}",
          "",
          "---------------"
        ],
        "test/00-engine.t||test/00-engine.t": [
          "File: test/00-engine.t -> test/00-engine.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: $engine_info= <<EOINF;",
          "42: (gost) Reference implementation of GOST engine",
          "44: EOINF",
          "45: }",
          "",
          "[Removed Lines]",
          "43:  [gost89, gost89-cnt, gost89-cnt-12, gost89-cbc, kuznyechik-ecb, kuznyechik-cbc, kuznyechik-cfb, kuznyechik-ofb, kuznyechik-ctr, magma-ecb, magma-cbc, magma-ctr, magma-ctr-acpkm, magma-ctr-acpkm-omac, kuznyechik-ctr-acpkm, kuznyechik-ctr-acpkm-omac, magma-kexp15, kuznyechik-kexp15, md_gost94, gost-mac, md_gost12_256, md_gost12_512, gost-mac-12, magma-mac, kuznyechik-mac, kuznyechik-ctr-acpkm-omac, gost2001, id-GostR3410-2001DH, gost-mac, gost2012_256, gost2012_512, gost-mac-12, magma-mac, kuznyechik-mac, magma-ctr-acpkm-omac, kuznyechik-ctr-acpkm-omac]",
          "",
          "[Added Lines]",
          "43:  [gost89, gost89-cnt, gost89-cnt-12, gost89-cbc, kuznyechik-ecb, kuznyechik-cbc, kuznyechik-cfb, kuznyechik-ofb, kuznyechik-ctr, magma-ecb, kuznyechik-mgm, magma-cbc, magma-ctr, magma-ctr-acpkm, magma-ctr-acpkm-omac, magma-mgm, kuznyechik-ctr-acpkm, kuznyechik-ctr-acpkm-omac, magma-kexp15, kuznyechik-kexp15, md_gost94, gost-mac, md_gost12_256, md_gost12_512, gost-mac-12, magma-mac, kuznyechik-mac, kuznyechik-ctr-acpkm-omac, gost2001, id-GostR3410-2001DH, gost-mac, gost2012_256, gost2012_512, gost-mac-12, magma-mac, kuznyechik-mac, magma-ctr-acpkm-omac, kuznyechik-ctr-acpkm-omac]",
          "",
          "---------------"
        ],
        "test_mgm.c||test_mgm.c": [
          "File: test_mgm.c -> test_mgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <openssl/engine.h>",
          "14: #include <openssl/evp.h>",
          "15: #include <string.h>",
          "17: #include \"gost_grasshopper_cipher.h\"",
          "18: #include \"gost_gost2015.h\"",
          "19: #if defined _MSC_VER",
          "20: # include <malloc.h>",
          "21: # define alloca _alloca",
          "22: #elif defined __linux__",
          "23: # include <alloca.h>",
          "24: #endif",
          "26: #define T(e) ({ \\",
          "27:     if (!(e)) {\\",
          "28:  ERR_print_errors_fp(stderr);\\",
          "29:  OpenSSLDie(__FILE__, __LINE__, #e);\\",
          "30:     } \\",
          "31: })",
          "33: #define TEST_ASSERT(e) {if ((test = (e))) \\",
          "34:    printf(\"Test FAILED\\n\"); \\",
          "35:       else \\",
          "36:    printf(\"Test passed\\n\");}",
          "41: const unsigned char gh_key[32] = {",
          "42:     0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,",
          "43:     0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,",
          "44: };",
          "46: const unsigned char gh_nonce[16] = {",
          "47:     0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88",
          "48: };",
          "50: const unsigned char gh_adata[41] = {",
          "51:     0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
          "52:     0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,",
          "53:     0xEA, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05",
          "54: };",
          "56: const unsigned char gh_pdata[67] = {",
          "57:     0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88,",
          "58:     0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A,",
          "59:     0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00,",
          "60:     0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xEE, 0xFF, 0x0A, 0x00, 0x11,",
          "61:     0xAA, 0xBB, 0xCC",
          "62: };",
          "64: const unsigned char gh_e_cdata[67] = {",
          "65:     0xA9, 0x75, 0x7B, 0x81, 0x47, 0x95, 0x6E, 0x90, 0x55, 0xB8, 0xA3, 0x3D, 0xE8, 0x9F, 0x42, 0xFC,",
          "66:     0x80, 0x75, 0xD2, 0x21, 0x2B, 0xF9, 0xFD, 0x5B, 0xD3, 0xF7, 0x06, 0x9A, 0xAD, 0xC1, 0x6B, 0x39,",
          "67:     0x49, 0x7A, 0xB1, 0x59, 0x15, 0xA6, 0xBA, 0x85, 0x93, 0x6B, 0x5D, 0x0E, 0xA9, 0xF6, 0x85, 0x1C,",
          "68:     0xC6, 0x0C, 0x14, 0xD4, 0xD3, 0xF8, 0x83, 0xD0, 0xAB, 0x94, 0x42, 0x06, 0x95, 0xC7, 0x6D, 0xEB,",
          "69:     0x2C, 0x75, 0x52",
          "70: };",
          "72: const unsigned char gh_e_tag[16] = {",
          "73:     0xCF, 0x5D, 0x65, 0x6F, 0x40, 0xC3, 0x4F, 0x5C, 0x46, 0xE8, 0xBB, 0x0E, 0x29, 0xFC, 0xDB, 0x4C",
          "74: };",
          "76: const unsigned char mg_key[32] = {",
          "77:     0xFF, 0xee, 0xDD, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00,",
          "78:     0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xff",
          "79: };",
          "81: const unsigned char mg_nonce[8] = {",
          "82:     0x12, 0xDE, 0xF0, 0x6B, 0x3C, 0x13, 0x0A, 0x59",
          "83: };",
          "85: const unsigned char mg_adata[41] = {",
          "86:     0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,",
          "87:     0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,",
          "88:     0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xea",
          "89: };",
          "91: const unsigned char mg_pdata[67] = {",
          "92:     0xFF, 0xee, 0xDD, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00,",
          "93:     0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xFF, 0x0A, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,",
          "94:     0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xFF, 0x0a, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,",
          "95:     0xaa, 0xbb, 0xcc, 0xee, 0xFF, 0x0a, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,",
          "96:     0xaa, 0xbb, 0xcc",
          "97: };",
          "99: const unsigned char mg_e_cdata[67] = {",
          "100:     0xc7, 0x95, 0x06, 0x6c, 0x5f, 0x9e, 0xa0, 0x3b, 0x85, 0x11, 0x33, 0x42, 0x45, 0x91, 0x85, 0xae,",
          "101:     0x1f, 0x2e, 0x00, 0xd6, 0xbf, 0x2b, 0x78, 0x5d, 0x94, 0x04, 0x70, 0xb8, 0xbb, 0x9c, 0x8e, 0x7d,",
          "102:     0x9a, 0x5d, 0xd3, 0x73, 0x1f, 0x7d, 0xdc, 0x70, 0xec, 0x27, 0xcb, 0x0a, 0xce, 0x6f, 0xa5, 0x76,",
          "103:     0x70, 0xf6, 0x5c, 0x64, 0x6a, 0xbb, 0x75, 0xd5, 0x47, 0xaa, 0x37, 0xc3, 0xbc, 0xb5, 0xc3, 0x4e,",
          "104:     0x03, 0xbb, 0x9c",
          "105: };",
          "107: const unsigned char mg_e_tag[8] = {",
          "108:     0xa7, 0x92, 0x80, 0x69, 0xaa, 0x10, 0xfd, 0x10",
          "109: };",
          "112: static struct testcase {",
          "113:     const char *sn;",
          "114:     const unsigned char *key;",
          "115:     const unsigned char *nonce;",
          "116:     size_t nonce_len;",
          "117:     const unsigned char *aad;",
          "118:     size_t aad_len;",
          "119:     const unsigned char *plaintext;",
          "120:     size_t ptext_len;",
          "121:     const unsigned char *expected;",
          "122:     const unsigned char *expected_tag;",
          "123: } testcases[] = {",
          "124:     {",
          "125:         .sn = SN_kuznyechik_mgm,",
          "126:         .key = gh_key,",
          "127:         .nonce = gh_nonce,",
          "128:         .nonce_len = sizeof(gh_nonce),",
          "129:         .aad = gh_adata,",
          "130:         .aad_len = sizeof(gh_adata),",
          "131:         .plaintext = gh_pdata,",
          "132:         .ptext_len = sizeof(gh_pdata),",
          "133:         .expected = gh_e_cdata,",
          "134:         .expected_tag = gh_e_tag",
          "135:     },",
          "136:     {",
          "137:         .sn = SN_magma_mgm,",
          "138:         .key = mg_key,",
          "139:         .nonce = mg_nonce,",
          "140:         .nonce_len = sizeof(mg_nonce),",
          "141:         .aad = mg_adata,",
          "142:         .aad_len = sizeof(mg_adata),",
          "143:         .plaintext = mg_pdata,",
          "144:         .ptext_len = sizeof(mg_pdata),",
          "145:         .expected = mg_e_cdata,",
          "146:         .expected_tag = mg_e_tag",
          "147:     },",
          "148:     { 0 }",
          "149: };",
          "151: static int test_block(const EVP_CIPHER *ciph, const char *name, const unsigned char *nonce, size_t nlen,",
          "152:                       const unsigned char *aad, size_t alen, const unsigned char *ptext, size_t plen,",
          "153:                       const unsigned char *exp_ctext, const unsigned char *exp_tag,",
          "154:                       const unsigned char * key, int small)",
          "155: {",
          "156:     EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();",
          "157:     unsigned char *c = alloca(plen);",
          "158:     int tag_len = nlen;",
          "159:     unsigned char *t = alloca(tag_len);",
          "160:     int outlen1, outlen2, tmplen;",
          "161:     int ret = 0, rv, test, i;",
          "163:     OPENSSL_assert(ctx);",
          "164:     printf(\"Encryption test %s [%s]: \", name, small ? \"small chunks\" : \"big chunks\");",
          "167:     EVP_CIPHER_CTX_init(ctx);",
          "168:     EVP_EncryptInit_ex(ctx, ciph, NULL, NULL, NULL);                    // Set cipher type and mode",
          "169:     EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, nlen, NULL);      // Set IV length",
          "170:     EVP_EncryptInit_ex(ctx, NULL, NULL, key, nonce);                    // Initialise key and IV",
          "171:     memset(c, 0, plen);",
          "172:     if (!small) {",
          "174:         EVP_EncryptUpdate(ctx, NULL, &outlen1, aad, alen);              // Zero or more calls to specify any AAD",
          "175:         EVP_EncryptUpdate(ctx, c, &outlen2, ptext, plen);               // Encrypt plaintext",
          "176:     } else {",
          "178:         outlen1 = outlen2 = 0;",
          "179:         unsigned char *p;",
          "180:         for (i = 0; i < alen; i++) {",
          "181:             EVP_EncryptUpdate(ctx, NULL, &tmplen, aad + i, 1);",
          "182:             outlen1 += tmplen;",
          "183:         }",
          "184:         for (i = 0, p = c; i < plen; i++) {",
          "185:             EVP_EncryptUpdate(ctx, p, &tmplen, ptext + i, 1);",
          "186:             p += tmplen;",
          "187:             outlen2 += tmplen;",
          "188:         }",
          "189:     }",
          "190:     EVP_EncryptFinal_ex(ctx, c, &tmplen);",
          "191:     EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG, tag_len, t);",
          "192:     EVP_CIPHER_CTX_cleanup(ctx);",
          "194:     TEST_ASSERT(outlen1 != alen || outlen2 != plen ||",
          "195:                 memcmp(c, exp_ctext, plen) ||",
          "196:                 memcmp(t, exp_tag, tag_len));",
          "197:     ret |= test;",
          "201:     printf(\"Decryption test %s [%s]: \", name, small ? \"small chunks\" : \"big chunks\");",
          "202:     EVP_CIPHER_CTX_init(ctx);",
          "203:     EVP_DecryptInit_ex(ctx, ciph, NULL, NULL, NULL);",
          "204:     EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_IVLEN, nlen, NULL);",
          "205:     EVP_DecryptInit_ex(ctx, NULL, NULL, key, nonce);",
          "206:     memset(c, 0, plen);",
          "207:     if (!small) {",
          "209:         EVP_DecryptUpdate(ctx, NULL, &outlen1, aad, alen);",
          "210:         EVP_DecryptUpdate(ctx, c, &outlen2, exp_ctext, plen);",
          "211:     } else {",
          "213:         outlen1 = outlen2 = 0;",
          "214:         unsigned char *p;",
          "215:         for (i = 0; i < alen; i++) {",
          "216:             EVP_DecryptUpdate(ctx, NULL, &tmplen, aad + i, 1);",
          "217:             outlen1 += tmplen;",
          "218:         }",
          "219:         for (i = 0, p = c; i < plen; i++) {",
          "220:             EVP_DecryptUpdate(ctx, p, &tmplen, exp_ctext + i, 1);",
          "221:             p += tmplen;",
          "222:             outlen2 += tmplen;",
          "223:         }",
          "224:     }",
          "225:     EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_SET_TAG, tag_len, (void *)exp_tag);",
          "226:     rv = EVP_DecryptFinal_ex(ctx, c, &tmplen);",
          "227:     EVP_CIPHER_CTX_cleanup(ctx);",
          "228:     EVP_CIPHER_CTX_free(ctx);",
          "230:     TEST_ASSERT(outlen1 != alen || outlen2 != plen ||",
          "231:                 memcmp(c, ptext, plen) || rv != 1);",
          "232:     ret |= test;",
          "234:     return ret;",
          "235: }",
          "237: int main(void)",
          "238: {",
          "239:     int ret = 0;",
          "240:     const struct testcase *t;",
          "242:     OPENSSL_add_all_algorithms_conf();",
          "244:     for (t = testcases; t->sn; t++) {",
          "245:         int small;",
          "246:         const EVP_CIPHER *ciph = EVP_get_cipherbyname(t->sn);",
          "247:         const char *name;",
          "248:         if (!ciph) {",
          "249:             printf(\"failed to load %s\\n\", t->sn);",
          "250:             return 1;",
          "251:         }",
          "252:         name = EVP_CIPHER_name(ciph);",
          "254:         printf(\"Tests for %s\\n\", name);",
          "255:         for (small = 0; small <= 1; small++)",
          "256:             ret |= test_block(ciph, name, t->nonce, t->nonce_len,",
          "257:                               t->aad, t->aad_len, t->plaintext, t->ptext_len,",
          "258:                               t->expected, t->expected_tag, t->key, small);",
          "259:     }",
          "261:     if (ret) {",
          "262:         printf(\"Some tests FAILED!\\n\");",
          "263:     } else {",
          "264:         printf(\"All tests passed!\\n\");",
          "265:     }",
          "266:     return ret;",
          "267: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1316e066838eb4c4fafa64fd98590e60c62a189",
      "candidate_info": {
        "commit_hash": "b1316e066838eb4c4fafa64fd98590e60c62a189",
        "repo": "gost-engine/engine",
        "commit_url": "https://github.com/gost-engine/engine/commit/b1316e066838eb4c4fafa64fd98590e60c62a189",
        "files": [
          "gost_ec_keyx.c"
        ],
        "message": "On unpacking key blob output buffer size should be fixed\n\nRelated: CVE-2022-29242",
        "before_after_code_files": [
          "gost_ec_keyx.c||gost_ec_keyx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "gost_ec_keyx.c||gost_ec_keyx.c"
          ],
          "candidate": [
            "gost_ec_keyx.c||gost_ec_keyx.c"
          ]
        }
      },
      "candidate_diff": {
        "gost_ec_keyx.c||gost_ec_keyx.c": [
          "File: gost_ec_keyx.c -> gost_ec_keyx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     EVP_PKEY *eph_key = NULL, *peerkey = NULL;",
          "716:     int dgst_nid = NID_undef;",
          "722:     gkt = d2i_GOST_KEY_TRANSPORT(NULL, (const unsigned char **)&p, in_len);",
          "723:     if (!gkt) {",
          "724:         GOSTerr(GOST_F_PKEY_GOST_ECCP_DECRYPT,",
          "",
          "[Removed Lines]",
          "718:     if (!key) {",
          "720:         return 1;",
          "721:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "819:         return -1;",
          "820:         break;",
          "821:     }",
          "827:     pst = d2i_PSKeyTransport_gost(NULL, (const unsigned char **)&p, in_len);",
          "828:     if (!pst) {",
          "",
          "[Removed Lines]",
          "822:     if (!key) {",
          "824:         return 1;",
          "825:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "886:                       size_t *key_len, const unsigned char *in, size_t in_len)",
          "887: {",
          "888:     struct gost_pmeth_data *gctx = EVP_PKEY_CTX_get_data(pctx);",
          "889:     switch (gctx->cipher_nid)",
          "890:     {",
          "891:         case NID_id_Gost28147_89:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:     if (key == NULL) {",
          "886:         return 1;",
          "887:     }",
          "889:     if (key != NULL && *key_len < 32) {",
          "890:         GOSTerr(GOST_F_PKEY_GOST2018_ENCRYPT, GOST_R_INVALID_BUFFER_SIZE);",
          "891:         return 0;",
          "892:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}