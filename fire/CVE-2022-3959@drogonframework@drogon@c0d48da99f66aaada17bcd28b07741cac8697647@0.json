{
  "cve_id": "CVE-2022-3959",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in drogon up to 1.8.1. Affected by this issue is some unknown functionality of the component Session Hash Handler. The manipulation leads to small space of random values. The attack may be launched remotely. Upgrading to version 1.8.2 is able to address this issue. The name of the patch is c0d48da99f66aaada17bcd28b07741cac8697647. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-213464.",
  "repo": "drogonframework/drogon",
  "patch_hash": "c0d48da99f66aaada17bcd28b07741cac8697647",
  "patch_info": {
    "commit_hash": "c0d48da99f66aaada17bcd28b07741cac8697647",
    "repo": "drogonframework/drogon",
    "commit_url": "https://github.com/drogonframework/drogon/commit/c0d48da99f66aaada17bcd28b07741cac8697647",
    "files": [
      "lib/inc/drogon/HttpRequest.h",
      "lib/inc/drogon/HttpResponse.h",
      "lib/inc/drogon/utils/Utilities.h",
      "lib/src/HttpRequestImpl.h",
      "lib/src/HttpResponseImpl.h",
      "lib/src/Utilities.cc"
    ],
    "message": "Avoid HashDoS attacks via random per-session hash initial state (#1433)",
    "before_after_code_files": [
      "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
      "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h",
      "lib/inc/drogon/utils/Utilities.h||lib/inc/drogon/utils/Utilities.h",
      "lib/src/HttpRequestImpl.h||lib/src/HttpRequestImpl.h",
      "lib/src/HttpResponseImpl.h||lib/src/HttpResponseImpl.h",
      "lib/src/Utilities.cc||lib/src/Utilities.cc"
    ]
  },
  "patch_diff": {
    "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h": [
      "File: lib/inc/drogon/HttpRequest.h -> lib/inc/drogon/HttpRequest.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "148:     virtual const std::string &getCookie(const std::string &field) const = 0;",
      "156:     {",
      "157:         return headers();",
      "158:     }",
      "166:     {",
      "167:         return cookies();",
      "168:     }",
      "",
      "[Removed Lines]",
      "151:     virtual const std::unordered_map<std::string, std::string> &headers()",
      "152:         const = 0;",
      "155:     const std::unordered_map<std::string, std::string> &getHeaders() const",
      "161:     virtual const std::unordered_map<std::string, std::string> &cookies()",
      "162:         const = 0;",
      "165:     const std::unordered_map<std::string, std::string> &getCookies() const",
      "",
      "[Added Lines]",
      "151:     virtual const std::",
      "152:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "153:             &headers() const = 0;",
      "156:     const std::",
      "157:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "158:             &getHeaders() const",
      "164:     virtual const std::",
      "165:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "166:             &cookies() const = 0;",
      "169:     const std::",
      "170:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "171:             &getCookies() const",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "267:     }",
      "275:     {",
      "276:         return parameters();",
      "277:     }",
      "",
      "[Removed Lines]",
      "270:     virtual const std::unordered_map<std::string, std::string> &parameters()",
      "271:         const = 0;",
      "274:     const std::unordered_map<std::string, std::string> &getParameters() const",
      "",
      "[Added Lines]",
      "276:     virtual const std::",
      "277:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "278:             &parameters() const = 0;",
      "281:     const std::",
      "282:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "283:             &getParameters() const",
      "",
      "---------------"
    ],
    "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h": [
      "File: lib/inc/drogon/HttpResponse.h -> lib/inc/drogon/HttpResponse.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include <drogon/Cookie.h>",
      "20: #include <drogon/HttpTypes.h>",
      "21: #include <drogon/HttpViewData.h>",
      "22: #include <json/json.h>",
      "23: #include <memory>",
      "24: #include <string>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <drogon/utils/Utilities.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "190:     virtual void removeHeader(std::string key) = 0;",
      "198:     {",
      "199:         return headers();",
      "200:     }",
      "",
      "[Removed Lines]",
      "193:     virtual const std::unordered_map<std::string, std::string> &headers()",
      "194:         const = 0;",
      "197:     const std::unordered_map<std::string, std::string> &getHeaders() const",
      "",
      "[Added Lines]",
      "194:     virtual const std::",
      "195:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "196:             &headers() const = 0;",
      "199:     const std::",
      "200:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "201:             &getHeaders() const",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:     virtual const Cookie &getCookie(const std::string &key) const = 0;",
      "229:     {",
      "230:         return cookies();",
      "231:     }",
      "",
      "[Removed Lines]",
      "225:     virtual const std::unordered_map<std::string, Cookie> &cookies() const = 0;",
      "228:     const std::unordered_map<std::string, Cookie> &getCookies() const",
      "",
      "[Added Lines]",
      "229:     virtual const std::",
      "230:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
      "231:             &cookies() const = 0;",
      "234:     const std::",
      "235:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
      "236:             &getCookies() const",
      "",
      "---------------"
    ],
    "lib/inc/drogon/utils/Utilities.h||lib/inc/drogon/utils/Utilities.h": [
      "File: lib/inc/drogon/utils/Utilities.h -> lib/inc/drogon/utils/Utilities.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:     }",
      "409:     throw std::runtime_error(\"Can't convert from string '\" + p + \"' to bool\");",
      "410: }",
      "411: }  // namespace utils",
      "412: }  // namespace drogon",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "412: namespace internal",
      "413: {",
      "414: DROGON_EXPORT extern const size_t fixedRandomNumber;",
      "415: struct SafeStringHash",
      "416: {",
      "417:     size_t operator()(const std::string &str) const",
      "418:     {",
      "419:         const size_t A = 6665339;",
      "420:         const size_t B = 2534641;",
      "421:         size_t h = fixedRandomNumber;",
      "422:         for (char ch : str)",
      "423:             h = (h * A) ^ (ch * B);",
      "424:         return h;",
      "425:     }",
      "426: };",
      "427: }  // namespace internal",
      "",
      "---------------"
    ],
    "lib/src/HttpRequestImpl.h||lib/src/HttpRequestImpl.h": [
      "File: lib/src/HttpRequestImpl.h -> lib/src/HttpRequestImpl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "137:         pathEncode_ = pathEncode;",
      "138:     }",
      "142:     {",
      "143:         parseParametersOnce();",
      "144:         return parameters_;",
      "",
      "[Removed Lines]",
      "140:     const std::unordered_map<std::string, std::string> &parameters()",
      "141:         const override",
      "",
      "[Added Lines]",
      "140:     const std::",
      "141:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "142:             &parameters() const override",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "291:         return defaultVal;",
      "292:     }",
      "295:     {",
      "296:         return headers_;",
      "297:     }",
      "300:     {",
      "301:         return cookies_;",
      "302:     }",
      "",
      "[Removed Lines]",
      "294:     const std::unordered_map<std::string, std::string> &headers() const override",
      "299:     const std::unordered_map<std::string, std::string> &cookies() const override",
      "",
      "[Added Lines]",
      "295:     const std::",
      "296:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "297:             &headers() const override",
      "302:     const std::",
      "303:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "304:             &cookies() const override",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "541:     bool pathEncode_{true};",
      "542:     string_view matchedPathPattern_{\"\"};",
      "543:     std::string query_;",
      "547:     mutable std::shared_ptr<Json::Value> jsonPtr_;",
      "548:     SessionPtr sessionPtr_;",
      "549:     mutable AttributesPtr attributesPtr_;",
      "",
      "[Removed Lines]",
      "544:     std::unordered_map<std::string, std::string> headers_;",
      "545:     std::unordered_map<std::string, std::string> cookies_;",
      "546:     mutable std::unordered_map<std::string, std::string> parameters_;",
      "",
      "[Added Lines]",
      "549:     std::",
      "550:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "551:             headers_;",
      "552:     std::",
      "553:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "554:             cookies_;",
      "555:     mutable std::",
      "556:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "557:             parameters_;",
      "",
      "---------------"
    ],
    "lib/src/HttpResponseImpl.h||lib/src/HttpResponseImpl.h": [
      "File: lib/src/HttpResponseImpl.h -> lib/src/HttpResponseImpl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:         removeHeaderBy(key);",
      "131:     }",
      "134:     {",
      "135:         return headers_;",
      "136:     }",
      "",
      "[Removed Lines]",
      "133:     const std::unordered_map<std::string, std::string> &headers() const override",
      "",
      "[Added Lines]",
      "133:     const std::",
      "134:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "135:             &headers() const override",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "200:         return defaultCookie;",
      "201:     }",
      "204:     {",
      "205:         return cookies_;",
      "206:     }",
      "",
      "[Removed Lines]",
      "203:     const std::unordered_map<std::string, Cookie> &cookies() const override",
      "",
      "[Added Lines]",
      "205:     const std::",
      "206:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
      "207:             &cookies() const override",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "446:         statusMessage_ = string_view{message, messageLength};",
      "447:     }",
      "452:     int customStatusCode_{-1};",
      "453:     HttpStatusCode statusCode_{kUnknown};",
      "",
      "[Removed Lines]",
      "449:     std::unordered_map<std::string, std::string> headers_;",
      "450:     std::unordered_map<std::string, Cookie> cookies_;",
      "",
      "[Added Lines]",
      "453:     std::",
      "454:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
      "455:             headers_;",
      "456:     std::unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
      "457:         cookies_;",
      "",
      "---------------"
    ],
    "lib/src/Utilities.cc||lib/src/Utilities.cc": [
      "File: lib/src/Utilities.cc -> lib/src/Utilities.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1221:     return false;",
      "1222: }",
      "1224: }  // namespace utils",
      "1225: }  // namespace drogon",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1224: namespace internal",
      "1225: {",
      "1226: DROGON_EXPORT const size_t fixedRandomNumber = []() {",
      "1227:     size_t res;",
      "1228:     utils::secureRandomBytes(&res, sizeof(res));",
      "1229:     return res;",
      "1230: }();",
      "1231: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b073f398312af778d1301a89de582a3503f4e5c0",
      "candidate_info": {
        "commit_hash": "b073f398312af778d1301a89de582a3503f4e5c0",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/b073f398312af778d1301a89de582a3503f4e5c0",
        "files": [
          "CMakeLists.txt",
          "examples/client_example/main.cc",
          "lib/inc/drogon/HttpRequest.h",
          "lib/inc/drogon/HttpResponse.h",
          "lib/inc/drogon/HttpTypes.h",
          "lib/src/Http2Transport.cc",
          "lib/src/Http2Transport.h",
          "lib/src/HttpClientImpl.cc",
          "lib/src/HttpClientImpl.h",
          "lib/src/HttpTransport.h"
        ],
        "message": "skeleton HTTP/2 frame parser",
        "before_after_code_files": [
          "examples/client_example/main.cc||examples/client_example/main.cc",
          "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
          "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h",
          "lib/inc/drogon/HttpTypes.h||lib/inc/drogon/HttpTypes.h",
          "lib/src/Http2Transport.cc||lib/src/Http2Transport.cc",
          "lib/src/Http2Transport.h||lib/src/Http2Transport.h",
          "lib/src/HttpClientImpl.cc||lib/src/HttpClientImpl.cc",
          "lib/src/HttpClientImpl.h||lib/src/HttpClientImpl.h",
          "lib/src/HttpTransport.h||lib/src/HttpTransport.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
            "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h"
          ],
          "candidate": [
            "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
            "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h"
          ]
        }
      },
      "candidate_diff": {
        "examples/client_example/main.cc||examples/client_example/main.cc": [
          "File: examples/client_example/main.cc -> examples/client_example/main.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                     }",
          "72:                     std::cout << \"count=\" << nth_resp << std::endl;",
          "73:                 });",
          "74:         }",
          "78: }",
          "",
          "[Removed Lines]",
          "75:     }",
          "77:     app().run();",
          "",
          "[Added Lines]",
          "74:             LOG_INFO << \"send request\";",
          "77:         app().run();",
          "78:     }",
          "",
          "---------------"
        ],
        "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h": [
          "File: lib/inc/drogon/HttpRequest.h -> lib/inc/drogon/HttpRequest.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     virtual const std::string &getCookie(const std::string &field) const = 0;",
          "173:     {",
          "174:         return headers();",
          "175:     }",
          "186:     {",
          "187:         return cookies();",
          "188:     }",
          "",
          "[Removed Lines]",
          "165:     virtual const std::",
          "166:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "167:             &headers() const = 0;",
          "170:     const std::",
          "171:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "172:             &getHeaders() const",
          "178:     virtual const std::",
          "179:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "180:             &cookies() const = 0;",
          "183:     const std::",
          "184:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "185:             &getCookies() const",
          "",
          "[Added Lines]",
          "165:     virtual const std::unordered_map<std::string,",
          "166:                                      std::string,",
          "167:                                      utils::internal::SafeStringHash> &",
          "168:     headers() const = 0;",
          "171:     const std::unordered_map<std::string,",
          "172:                              std::string,",
          "173:                              utils::internal::SafeStringHash> &",
          "174:     getHeaders() const",
          "180:     virtual const std::unordered_map<std::string,",
          "181:                                      std::string,",
          "182:                                      utils::internal::SafeStringHash> &",
          "183:     cookies() const = 0;",
          "186:     const std::unordered_map<std::string,",
          "187:                              std::string,",
          "188:                              utils::internal::SafeStringHash> &",
          "189:     getCookies() const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     }",
          "311:     {",
          "312:         return parameters();",
          "313:     }",
          "",
          "[Removed Lines]",
          "303:     virtual const std::",
          "304:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "305:             &parameters() const = 0;",
          "308:     const std::",
          "309:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "310:             &getParameters() const",
          "",
          "[Added Lines]",
          "308:     virtual const std::unordered_map<std::string,",
          "309:                                      std::string,",
          "310:                                      utils::internal::SafeStringHash> &",
          "311:     parameters() const = 0;",
          "314:     const std::unordered_map<std::string,",
          "315:                              std::string,",
          "316:                              utils::internal::SafeStringHash> &",
          "317:     getParameters() const",
          "",
          "---------------"
        ],
        "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h": [
          "File: lib/inc/drogon/HttpResponse.h -> lib/inc/drogon/HttpResponse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     virtual void removeHeader(std::string key) = 0;",
          "210:     {",
          "211:         return headers();",
          "212:     }",
          "",
          "[Removed Lines]",
          "202:     virtual const std::",
          "203:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "204:             &headers() const = 0;",
          "207:     const std::",
          "208:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "209:             &getHeaders() const",
          "",
          "[Added Lines]",
          "202:     virtual const std::unordered_map<std::string,",
          "203:                                      std::string,",
          "204:                                      utils::internal::SafeStringHash> &",
          "205:     headers() const = 0;",
          "208:     const std::unordered_map<std::string,",
          "209:                              std::string,",
          "210:                              utils::internal::SafeStringHash> &",
          "211:     getHeaders() const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     virtual const std::",
          "242:     const std::",
          "245:     {",
          "246:         return cookies();",
          "247:     }",
          "",
          "[Removed Lines]",
          "238:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
          "239:             &cookies() const = 0;",
          "243:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
          "244:             &getCookies() const",
          "",
          "[Added Lines]",
          "240:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &",
          "241:         cookies() const = 0;",
          "245:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &",
          "246:         getCookies() const",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "514:     virtual const std::function<std::size_t(char *, std::size_t)>",
          "515:         &streamCallback() const = 0;",
          "",
          "[Added Lines]",
          "517:     virtual const std::function<std::size_t(char *, std::size_t)> &",
          "518:     streamCallback() const = 0;",
          "",
          "---------------"
        ],
        "lib/inc/drogon/HttpTypes.h||lib/inc/drogon/HttpTypes.h": [
          "File: lib/inc/drogon/HttpTypes.h -> lib/inc/drogon/HttpTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     k511NetworkAuthenticationRequired = 511",
          "90: };",
          "92: enum class Version",
          "93: {",
          "94:     kUnknown = 0,",
          "95:     kHttp10,",
          "97: };",
          "99: enum ContentType",
          "",
          "[Removed Lines]",
          "96:     kHttp11",
          "",
          "[Added Lines]",
          "98:     kHttp11,",
          "99:     kHttp2,",
          "",
          "---------------"
        ],
        "lib/src/Http2Transport.cc||lib/src/Http2Transport.cc": [
          "File: lib/src/Http2Transport.cc -> lib/src/Http2Transport.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"Http2Transport.h\"",
          "3: using namespace drogon;",
          "5: static const std::string_view h2_preamble = \"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\";",
          "7: enum class H2FrameType",
          "8: {",
          "9:     Data = 0x0,",
          "10:     Headers = 0x1,",
          "11:     Priority = 0x2,",
          "12:     RstStream = 0x3,",
          "13:     Settings = 0x4,",
          "14:     PushPromise = 0x5,",
          "15:     Ping = 0x6,",
          "16:     GoAway = 0x7,",
          "17:     WindowUpdate = 0x8,",
          "18:     Continuation = 0x9,",
          "19:     AltSvc = 0xa,",
          "21:     Origin = 0xc,",
          "22: };",
          "24: enum class H2SettingsKey",
          "25: {",
          "26:     HeaderTableSize = 0x1,",
          "27:     EnablePush = 0x2,",
          "28:     MaxConcurrentStreams = 0x3,",
          "29:     InitialWindowSize = 0x4,",
          "30:     MaxFrameSize = 0x5,",
          "31:     MaxHeaderListSize = 0x6,",
          "33:     NumEntries",
          "34: };",
          "36: struct SettingsFrame",
          "37: {",
          "38:     std::vector<std::pair<uint16_t, uint32_t>> settings;",
          "39: };",
          "41: struct WindowUpdateFrame",
          "42: {",
          "43:     uint32_t windowSizeIncrement;",
          "44: };",
          "48: static void dump_hex_beautiful(const void* ptr, size_t size)",
          "49: {",
          "50:     for(size_t i = 0; i < size; i += 16)",
          "51:     {",
          "52:         printf(\"%08zx: \", i);",
          "53:         for(size_t j = 0; j < 16; ++j)",
          "54:         {",
          "55:             if(i + j < size)",
          "56:             {",
          "57:                 printf(\"%02x \", ((unsigned char*)ptr)[i + j]);",
          "58:             }",
          "59:             else",
          "60:             {",
          "61:                 printf(\"   \");",
          "62:             }",
          "63:         }",
          "64:         printf(\" \");",
          "65:         for(size_t j = 0; j < 16; ++j)",
          "66:         {",
          "67:             if(i + j < size)",
          "68:             {",
          "69:                 if(((unsigned char*)ptr)[i + j] >= 32 &&",
          "70:                    ((unsigned char*)ptr)[i + j] < 127)",
          "71:                 {",
          "72:                     printf(\"%c\", ((unsigned char*)ptr)[i + j]);",
          "73:                 }",
          "74:                 else",
          "75:                 {",
          "76:                     printf(\".\");",
          "77:                 }",
          "78:             }",
          "79:         }",
          "80:         printf(\"\\n\");",
          "81:     }",
          "82: }",
          "84: static std::optional<SettingsFrame> parseSettingsFrame(const uint8_t* ptr, size_t length)",
          "85: {",
          "86:     if(length % 6 != 0)",
          "87:     {",
          "88:         LOG_ERROR << \"Invalid settings frame length\";",
          "89:         return std::nullopt;",
          "90:     }",
          "92:     SettingsFrame frame;",
          "93:     LOG_TRACE << \"Settings frame:\";",
          "94:     for(size_t i = 0; i < length; i += 6)",
          "95:     {",
          "96:         uint16_t key = ptr[i] << 8 | ptr[i + 1];",
          "97:         uint32_t value = ptr[i + 2] << 24 | ptr[i + 3] << 16 | ptr[i + 4] << 8 | ptr[i + 5];",
          "98:         frame.settings.emplace_back(key, value);",
          "100:         LOG_TRACE << \"  key=\" << key << \" value=\" << value;",
          "101:     }",
          "102:     return frame;",
          "103: }",
          "105: static std::optional<WindowUpdateFrame> parseWindowUpdateFrame(const uint8_t* ptr, size_t length)",
          "106: {",
          "107:     if(length != 4)",
          "108:     {",
          "109:         LOG_ERROR << \"Invalid window update frame length\";",
          "110:         return std::nullopt;",
          "111:     }",
          "113:     WindowUpdateFrame frame;",
          "115:     frame.windowSizeIncrement = (ptr[0] << 24 | ptr[1] << 16 | ptr[2] << 8 | ptr[3]) & 0x7fffffff;",
          "116:     LOG_TRACE << \"Window update frame: windowSizeIncrement=\" << frame.windowSizeIncrement;",
          "117:     return frame;",
          "118: }",
          "120: static size_t parseH2Frame(trantor::MsgBuffer *msg)",
          "121: {",
          "122:     if(msg->readableBytes() < 9)",
          "123:     {",
          "124:         LOG_TRACE << \"Not enough bytes to parse H2 frame header\";",
          "125:         return 0;",
          "126:     }",
          "128:     uint8_t* ptr = (uint8_t*)msg->peek();",
          "131:     uint32_t length = ptr[0] << 16 | ptr[1] << 8 | ptr[2];",
          "132:     uint8_t type = ptr[3];",
          "133:     uint8_t flags = ptr[4];",
          "134:     uint32_t streamId = ptr[5] << 24 | ptr[6] << 16 | ptr[7] << 8 | ptr[8];",
          "135:     streamId &= 0x7fffffff; // MSB is reserved for future use",
          "137:     LOG_TRACE << \"H2 frame: length=\" << length << \" type=\" << (int)type << \" flags=\" << (int)flags << \" streamId=\" << streamId;",
          "138:     if(msg->readableBytes() < length + 9)",
          "139:     {",
          "140:         LOG_TRACE << \"Not enough bytes to parse H2 frame\";",
          "141:         return 0;",
          "142:     }",
          "144:     uint8_t* payload = ptr + 9;",
          "145:     if(type == (uint8_t)H2FrameType::Settings)",
          "146:     {",
          "147:         auto settings = parseSettingsFrame(payload, length);",
          "148:         if(!settings)",
          "149:         {",
          "150:             LOG_ERROR << \"Failed to parse settings frame\";",
          "151:             return 0;",
          "152:         }",
          "153:     }",
          "154:     else if(type == (uint8_t)H2FrameType::WindowUpdate)",
          "155:     {",
          "156:         auto windowUpdate = parseWindowUpdateFrame(payload, length);",
          "157:         if(!windowUpdate)",
          "158:         {",
          "159:             LOG_ERROR << \"Failed to parse window update frame\";",
          "160:             return 0;",
          "161:         }",
          "162:     }",
          "163:     else {",
          "164:         LOG_WARN << \"Unsupported H2 frame type: \" << (int)type;",
          "165:     }",
          "167:     msg->retrieve(length + 9);",
          "168:     return length;",
          "169: }",
          "171: void Http2Transport::onRecvMessage(const trantor::TcpConnectionPtr &,",
          "172:                        trantor::MsgBuffer *msg)",
          "173: {",
          "174:     LOG_TRACE << \"HTTP/2 message received:\";",
          "175:     dump_hex_beautiful(msg->peek(), msg->readableBytes());",
          "176:     while (true)",
          "177:     {",
          "178:         size_t length = parseH2Frame(msg);",
          "179:         if(length == 0)",
          "180:             break;",
          "182:     }",
          "184:     throw std::runtime_error(\"HTTP/2 onRecvMessage not implemented\");",
          "185: }",
          "187: Http2Transport::Http2Transport(trantor::TcpConnectionPtr connPtr,",
          "188:                                  size_t *bytesSent,",
          "189:                                  size_t *bytesReceived)",
          "190:     : connPtr(connPtr), bytesSent_(bytesSent), bytesReceived_(bytesReceived)",
          "191: {",
          "192:     connPtr->send(h2_preamble.data(), h2_preamble.length());",
          "193: }",
          "",
          "---------------"
        ],
        "lib/src/Http2Transport.h||lib/src/Http2Transport.h": [
          "File: lib/src/Http2Transport.h -> lib/src/Http2Transport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include \"HttpTransport.h\"",
          "5: namespace drogon",
          "6: {",
          "7: class Http2Transport : public HttpTransport",
          "8: {",
          "9:     private:",
          "10:         trantor::TcpConnectionPtr connPtr;",
          "11:         size_t *bytesSent_;",
          "12:         size_t *bytesReceived_;",
          "13:     public:",
          "14:     Http2Transport(trantor::TcpConnectionPtr connPtr,",
          "15:                     size_t *bytesSent,",
          "16:                     size_t *bytesReceived);",
          "17:     void sendRequestInLoop(const HttpRequestPtr &req,",
          "18:                            HttpReqCallback &&callback) override",
          "19:     {",
          "21:     }",
          "22:     void onRecvMessage(const trantor::TcpConnectionPtr &,",
          "23:                        trantor::MsgBuffer *) override;",
          "25:     size_t requestsInFlight() const override",
          "26:     {",
          "27:         return 0;",
          "28:     }",
          "30:     bool handleConnectionClose()",
          "31:     {",
          "32:         throw std::runtime_error(\"HTTP/2 handleConnectionClose not implemented\");",
          "33:     }",
          "35:     void onError(ReqResult result) override",
          "36:     {",
          "37:         throw std::runtime_error(\"HTTP/2 onError not implemented\");",
          "38:     }",
          "39: };",
          "40: }",
          "",
          "---------------"
        ],
        "lib/src/HttpClientImpl.cc||lib/src/HttpClientImpl.cc": [
          "File: lib/src/HttpClientImpl.cc -> lib/src/HttpClientImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: }",
          "42: void Http1xTransport::sendRequestInLoop(const HttpRequestPtr &req,",
          "45: {",
          "46:     sendReq(req);",
          "47:     pipeliningCallbacks_.emplace(std::move(req), std::move(callback));",
          "49: }",
          "51: void Http1xTransport::onRecvMessage(const trantor::TcpConnectionPtr &conn,",
          "",
          "[Removed Lines]",
          "43:                                         HttpReqCallback &&callback,",
          "44:                                         double timeout)",
          "48:     (void)timeout;",
          "",
          "[Added Lines]",
          "43:                                         HttpReqCallback &&callback)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:             .setConfCmds(sslConfCmds_)",
          "136:             .setCertPath(clientCertPath_)",
          "137:             .setKeyPath(clientKeyPath_)",
          "139:         tcpClientPtr_->enableSSL(std::move(policy));",
          "140:     }",
          "",
          "[Removed Lines]",
          "138:             .setAlpnProtocols({\"http/1.1\"});",
          "",
          "[Added Lines]",
          "136:             .setAlpnProtocols({\"h2\", \"http/1.1\"});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:             LOG_TRACE << \"Connection established!\";",
          "163:             auto protocol = connPtr->applicationProtocol();",
          "164:             if (protocol.empty() || protocol == \"http/1.1\")",
          "165:                 thisPtr->transport_ =",
          "166:                     std::make_unique<Http1xTransport>(connPtr,",
          "167:                                                       &thisPtr->bytesSent_,",
          "168:                                                       &thisPtr->bytesReceived_);",
          "169:             else",
          "172:             thisPtr->transport_->setRespCallback(",
          "173:                 [weakPtr](const HttpResponseImplPtr &resp,",
          "174:                           std::pair<HttpRequestPtr, HttpReqCallback> &&reqAndCb,",
          "",
          "[Removed Lines]",
          "170:                 throw std::runtime_error(\"Unsupported protocol: \" +",
          "171:                                          connPtr->applicationProtocol());",
          "",
          "[Added Lines]",
          "162:             {",
          "163:                 LOG_TRACE << \"Select http/1.1 protocol\";",
          "168:             }",
          "169:             else if (protocol == \"h2\")",
          "170:             {",
          "171:                 LOG_TRACE << \"Select http/2 protocol\";",
          "172:                 thisPtr->transport_ =",
          "173:                     std::make_unique<Http2Transport>(connPtr,",
          "174:                                                      &thisPtr->bytesSent_,",
          "175:                                                      &thisPtr->bytesReceived_);",
          "176:             }",
          "178:             {",
          "179:                 LOG_ERROR << \"Unknown protocol \" << protocol",
          "180:                           << \" selected by server for HTTP\";",
          "181:                 thisPtr->onError(ReqResult::BadResponse);",
          "182:                 return;",
          "183:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:             while (!thisPtr->requestsBuffer_.empty())",
          "184:             {",
          "185:                 auto &reqAndCb = thisPtr->requestsBuffer_.front();",
          "188:                 thisPtr->requestsBuffer_.pop_front();",
          "189:             }",
          "190:         }",
          "",
          "[Removed Lines]",
          "186:                 thisPtr->transport_->sendRequestInLoop(",
          "187:                     reqAndCb.first, std::move(reqAndCb.second), 0);",
          "",
          "[Added Lines]",
          "198:                 thisPtr->transport_->sendRequestInLoop(reqAndCb.first,",
          "199:                                                        std::move(",
          "200:                                                            reqAndCb.second));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "612:     if (transport_->requestsInFlight() <= pipeliningDepth_ &&",
          "613:         requestsBuffer_.empty())",
          "614:     {",
          "616:     }",
          "617:     else",
          "618:     {",
          "",
          "[Removed Lines]",
          "615:         transport_->sendRequestInLoop(req, std::move(callback), 0);",
          "",
          "[Added Lines]",
          "628:         transport_->sendRequestInLoop(req, std::move(callback));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "673:         {",
          "674:             auto &reqAndCallback = requestsBuffer_.front();",
          "675:             transport_->sendRequestInLoop(reqAndCallback.first,",
          "678:             requestsBuffer_.pop_front();",
          "679:         }",
          "680:         else",
          "",
          "[Removed Lines]",
          "676:                                           std::move(reqAndCallback.second),",
          "677:                                           0);",
          "",
          "[Added Lines]",
          "689:                                           std::move(reqAndCallback.second));",
          "",
          "---------------"
        ],
        "lib/src/HttpClientImpl.h||lib/src/HttpClientImpl.h": [
          "File: lib/src/HttpClientImpl.h -> lib/src/HttpClientImpl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <queue>",
          "25: #include <vector>",
          "26: #include \"impl_forwards.h\"",
          "28: namespace drogon",
          "29: {",
          "59: class Http1xTransport : public HttpTransport",
          "60: {",
          "61:   private:",
          "",
          "[Removed Lines]",
          "31: class HttpTransport",
          "32: {",
          "33:   public:",
          "34:     HttpTransport() = default;",
          "35:     virtual ~HttpTransport() = default;",
          "36:     virtual void sendRequestInLoop(const HttpRequestPtr &req,",
          "37:                                    HttpReqCallback &&callback,",
          "38:                                    double timeout) = 0;",
          "39:     virtual void onRecvMessage(const trantor::TcpConnectionPtr &,",
          "40:                                trantor::MsgBuffer *) = 0;",
          "41:     virtual bool handleConnectionClose() = 0;",
          "42:     virtual void onError(ReqResult result) = 0;",
          "44:     virtual size_t requestsInFlight() const = 0;",
          "46:     using RespCallback =",
          "47:         std::function<void(const HttpResponseImplPtr &,",
          "48:                            std::pair<HttpRequestPtr, HttpReqCallback> &&,",
          "49:                            const trantor::TcpConnectionPtr)>;",
          "51:     void setRespCallback(RespCallback cb)",
          "52:     {",
          "53:         respCallback = std::move(cb);",
          "54:     }",
          "56:     RespCallback respCallback;",
          "57: };",
          "",
          "[Added Lines]",
          "27: #include \"Http2Transport.h\"",
          "28: #include \"HttpTransport.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     size_t *bytesSent_;",
          "65:     size_t *bytesReceived_;",
          "67:   public:",
          "68:     Http1xTransport(trantor::TcpConnectionPtr connPtr,",
          "69:                     size_t *bytesSent,",
          "70:                     size_t *bytesReceived);",
          "71:     virtual ~Http1xTransport();",
          "72:     void sendRequestInLoop(const HttpRequestPtr &req,",
          "75:     void onRecvMessage(const trantor::TcpConnectionPtr &,",
          "76:                        trantor::MsgBuffer *) override;",
          "",
          "[Removed Lines]",
          "73:                            HttpReqCallback &&callback,",
          "74:                            double timeout) override;",
          "",
          "[Added Lines]",
          "41:     void sendReq(const HttpRequestPtr &req);",
          "49:                            HttpReqCallback &&callback) override;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:             pipeliningCallbacks_.pop();",
          "92:         }",
          "93:     }",
          "96: };",
          "98: class HttpClientImpl final : public HttpClient,",
          "",
          "[Removed Lines]",
          "95:     void sendReq(const HttpRequestPtr &req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpTransport.h||lib/src/HttpTransport.h": [
          "File: lib/src/HttpTransport.h -> lib/src/HttpTransport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include \"HttpRequestImpl.h\"",
          "4: #include \"HttpResponseImpl.h\"",
          "5: #include <drogon/drogon_callbacks.h>",
          "7: #include <trantor/net/TcpConnection.h>",
          "8: #include <trantor/utils/NonCopyable.h>",
          "11: namespace drogon",
          "12: {",
          "14: class HttpTransport : public trantor::NonCopyable",
          "15: {",
          "16:   public:",
          "17:     HttpTransport() = default;",
          "18:     virtual ~HttpTransport() = default;",
          "19:     virtual void sendRequestInLoop(const HttpRequestPtr &req,",
          "20:                                    HttpReqCallback &&callback) = 0;",
          "21:     virtual void onRecvMessage(const trantor::TcpConnectionPtr &,",
          "22:                                trantor::MsgBuffer *) = 0;",
          "23:     virtual bool handleConnectionClose() = 0;",
          "24:     virtual void onError(ReqResult result) = 0;",
          "26:     virtual size_t requestsInFlight() const = 0;",
          "28:     using RespCallback =",
          "29:         std::function<void(const HttpResponseImplPtr &,",
          "30:                            std::pair<HttpRequestPtr, HttpReqCallback> &&,",
          "31:                            const trantor::TcpConnectionPtr)>;",
          "33:     void setRespCallback(RespCallback cb)",
          "34:     {",
          "35:         respCallback = std::move(cb);",
          "36:     }",
          "38:     RespCallback respCallback;",
          "39: };",
          "41: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32dc3b541173498ca389b8d28f4ebb05704c83b6",
      "candidate_info": {
        "commit_hash": "32dc3b541173498ca389b8d28f4ebb05704c83b6",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/32dc3b541173498ca389b8d28f4ebb05704c83b6",
        "files": [
          "lib/inc/drogon/HttpRequest.h",
          "lib/inc/drogon/HttpResponse.h",
          "lib/src/Http2Transport.cc",
          "lib/src/Http2Transport.h",
          "lib/src/HttpTransport.h",
          "trantor"
        ],
        "message": "format, etc",
        "before_after_code_files": [
          "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
          "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h",
          "lib/src/Http2Transport.cc||lib/src/Http2Transport.cc",
          "lib/src/Http2Transport.h||lib/src/Http2Transport.h",
          "lib/src/HttpTransport.h||lib/src/HttpTransport.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
            "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h"
          ],
          "candidate": [
            "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h",
            "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/inc/drogon/HttpRequest.h||lib/inc/drogon/HttpRequest.h": [
          "File: lib/inc/drogon/HttpRequest.h -> lib/inc/drogon/HttpRequest.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     virtual const std::string &getCookie(const std::string &field) const = 0;",
          "175:     {",
          "176:         return headers();",
          "177:     }",
          "190:     {",
          "191:         return cookies();",
          "192:     }",
          "",
          "[Removed Lines]",
          "165:     virtual const std::unordered_map<std::string,",
          "166:                                      std::string,",
          "167:                                      utils::internal::SafeStringHash> &",
          "168:     headers() const = 0;",
          "171:     const std::unordered_map<std::string,",
          "172:                              std::string,",
          "173:                              utils::internal::SafeStringHash> &",
          "174:     getHeaders() const",
          "180:     virtual const std::unordered_map<std::string,",
          "181:                                      std::string,",
          "182:                                      utils::internal::SafeStringHash> &",
          "183:     cookies() const = 0;",
          "186:     const std::unordered_map<std::string,",
          "187:                              std::string,",
          "188:                              utils::internal::SafeStringHash> &",
          "189:     getCookies() const",
          "",
          "[Added Lines]",
          "165:     virtual const std::",
          "166:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "167:             &headers() const = 0;",
          "170:     const std::",
          "171:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "172:             &getHeaders() const",
          "178:     virtual const std::",
          "179:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "180:             &cookies() const = 0;",
          "183:     const std::",
          "184:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "185:             &getCookies() const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:     }",
          "318:     {",
          "319:         return parameters();",
          "320:     }",
          "",
          "[Removed Lines]",
          "308:     virtual const std::unordered_map<std::string,",
          "309:                                      std::string,",
          "310:                                      utils::internal::SafeStringHash> &",
          "311:     parameters() const = 0;",
          "314:     const std::unordered_map<std::string,",
          "315:                              std::string,",
          "316:                              utils::internal::SafeStringHash> &",
          "317:     getParameters() const",
          "",
          "[Added Lines]",
          "304:     virtual const std::",
          "305:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "306:             &parameters() const = 0;",
          "309:     const std::",
          "310:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "311:             &getParameters() const",
          "",
          "---------------"
        ],
        "lib/inc/drogon/HttpResponse.h||lib/inc/drogon/HttpResponse.h": [
          "File: lib/inc/drogon/HttpResponse.h -> lib/inc/drogon/HttpResponse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     virtual void removeHeader(std::string key) = 0;",
          "212:     {",
          "213:         return headers();",
          "214:     }",
          "",
          "[Removed Lines]",
          "202:     virtual const std::unordered_map<std::string,",
          "203:                                      std::string,",
          "204:                                      utils::internal::SafeStringHash> &",
          "205:     headers() const = 0;",
          "208:     const std::unordered_map<std::string,",
          "209:                              std::string,",
          "210:                              utils::internal::SafeStringHash> &",
          "211:     getHeaders() const",
          "",
          "[Added Lines]",
          "202:     virtual const std::",
          "203:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "204:             &headers() const = 0;",
          "207:     const std::",
          "208:         unordered_map<std::string, std::string, utils::internal::SafeStringHash>",
          "209:             &getHeaders() const",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     virtual const std::",
          "244:     const std::",
          "247:     {",
          "248:         return cookies();",
          "249:     }",
          "",
          "[Removed Lines]",
          "240:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &",
          "241:         cookies() const = 0;",
          "245:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash> &",
          "246:         getCookies() const",
          "",
          "[Added Lines]",
          "238:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
          "239:             &cookies() const = 0;",
          "243:         unordered_map<std::string, Cookie, utils::internal::SafeStringHash>",
          "244:             &getCookies() const",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "517:     virtual const std::function<std::size_t(char *, std::size_t)> &",
          "518:     streamCallback() const = 0;",
          "",
          "[Added Lines]",
          "515:     virtual const std::function<std::size_t(char *, std::size_t)>",
          "516:         &streamCallback() const = 0;",
          "",
          "---------------"
        ],
        "lib/src/Http2Transport.cc||lib/src/Http2Transport.cc": [
          "File: lib/src/Http2Transport.cc -> lib/src/Http2Transport.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: #ifdef __cpp_concepts",
          "107: template <typename T>",
          "109:     {",
          "110:         t.prettyToString()",
          "112:     {",
          "113:         t.serialize()",
          "115:     {",
          "116:         T::fromBuffer(ByteStream(nullptr, 0))",
          "119: };",
          "120: #endif",
          "",
          "[Removed Lines]",
          "108: concept IsH2Frame = requires(T t) {",
          "111:     } -> std::convertible_to<std::string>;",
          "114:     } -> std::convertible_to<trantor::MsgBuffer>;",
          "118:     } -> std::convertible_to<std::optional<T>>;",
          "",
          "[Added Lines]",
          "108: concept IsH2Frame = requires(T t)",
          "109: {",
          "112:         } -> std::convertible_to<std::string>;",
          "115:         } -> std::convertible_to<trantor::MsgBuffer>;",
          "119:         } -> std::convertible_to<std::optional<T>>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:                                    trantor::MsgBuffer *msg)",
          "279: {",
          "280:     LOG_TRACE << \"HTTP/2 message received:\";",
          "281:     dump_hex_beautiful(msg->peek(), msg->readableBytes());",
          "282:     while (true)",
          "283:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     assert(bytesReceived_ != nullptr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328:                 }",
          "329:             }",
          "330:         }",
          "331:     }",
          "333:     throw std::runtime_error(\"HTTP/2 onRecvMessage not implemented\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:         else {",
          "337:             LOG_ERROR << \"Boom! The client does not understand this frame\";",
          "338:         }",
          "",
          "---------------"
        ],
        "lib/src/Http2Transport.h||lib/src/Http2Transport.h": [
          "File: lib/src/Http2Transport.h -> lib/src/Http2Transport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: namespace drogon",
          "6: {",
          "7: class Http2Transport : public HttpTransport",
          "8: {",
          "9:   private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: namespace internal",
          "9: {",
          "13: struct H2Stream",
          "14: {",
          "16: };",
          "18: } // namespace internal",
          "",
          "---------------"
        ],
        "lib/src/HttpTransport.h||lib/src/HttpTransport.h": [
          "File: lib/src/HttpTransport.h -> lib/src/HttpTransport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     RespCallback respCallback;",
          "39: };",
          "",
          "[Removed Lines]",
          "41: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25ece895580e519eddf75d81f038db88502619df",
      "candidate_info": {
        "commit_hash": "25ece895580e519eddf75d81f038db88502619df",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/25ece895580e519eddf75d81f038db88502619df",
        "files": [
          "lib/src/Utilities.cc"
        ],
        "message": "Update Utilities.cc (#1436)\n\nFix error when building with MinGW-w64:\n```\nlib/src/Utilities.cc:1226:28: error: external linkage required for symbol 'drogon::utils::internal::fixedRandomNumber' because of 'dllexport' attribute                    \n```\n`DROGON_EXPORT` is already specified in `lib/inc/drogon/utils/Utilities.h`, it doesn't need to be repeated in `lib/src/Utilities.cc` when defining `fixedRandomNumber`.",
        "before_after_code_files": [
          "lib/src/Utilities.cc||lib/src/Utilities.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/src/Utilities.cc||lib/src/Utilities.cc"
          ],
          "candidate": [
            "lib/src/Utilities.cc||lib/src/Utilities.cc"
          ]
        }
      },
      "candidate_diff": {
        "lib/src/Utilities.cc||lib/src/Utilities.cc": [
          "File: lib/src/Utilities.cc -> lib/src/Utilities.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1224: namespace internal",
          "1225: {",
          "1227:     size_t res;",
          "1228:     utils::secureRandomBytes(&res, sizeof(res));",
          "1229:     return res;",
          "",
          "[Removed Lines]",
          "1226: DROGON_EXPORT const size_t fixedRandomNumber = []() {",
          "",
          "[Added Lines]",
          "1226: const size_t fixedRandomNumber = []() {",
          "",
          "---------------"
        ]
      }
    }
  ]
}