{
  "cve_id": "CVE-2020-36241",
  "cve_desc": "autoar-extractor.c in GNOME gnome-autoar through 0.2.4, as used by GNOME Shell, Nautilus, and other software, allows Directory Traversal during extraction because it lacks a check of whether a file's parent is a symlink to a directory outside of the intended extraction location.",
  "repo": "GNOME/gnome-autoar",
  "patch_hash": "adb067e645732fdbe7103516e506d09eb6a54429",
  "patch_info": {
    "commit_hash": "adb067e645732fdbe7103516e506d09eb6a54429",
    "repo": "GNOME/gnome-autoar",
    "commit_url": "https://github.com/GNOME/gnome-autoar/commit/adb067e645732fdbe7103516e506d09eb6a54429",
    "files": [
      "gnome-autoar/autoar-extractor.c"
    ],
    "message": "AutoarExtractor: Do not extract files outside the destination dir\n\nCurrently, a malicious archive can cause that the files are extracted\noutside of the destination dir. This can happen if the archive contains\na file whose parent is a symbolic link, which points outside of the\ndestination dir. This is potentially a security threat similar to\nCVE-2020-11736. Let's skip such problematic files when extracting.\n\nFixes: https://gitlab.gnome.org/GNOME/gnome-autoar/-/issues/7",
    "before_after_code_files": [
      "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
    ]
  },
  "patch_diff": {
    "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
      "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "843:   return prefix;",
      "844: }",
      "846: static GFile*",
      "847: autoar_extractor_do_sanitize_pathname (AutoarExtractor *self,",
      "848:                                        const char      *pathname_bytes)",
      "849: {",
      "850:   GFile *extracted_filename;",
      "851:   gboolean valid_filename;",
      "853:   g_autofree char *utf8_pathname;",
      "855:   utf8_pathname = autoar_common_get_utf8_pathname (pathname_bytes);",
      "856:   extracted_filename = g_file_get_child (self->destination_dir,",
      "857:                                          utf8_pathname ?  utf8_pathname : pathname_bytes);",
      "863:   if (!valid_filename) {",
      "868:     g_object_unref (extracted_filename);",
      "872:   }",
      "874:   if (self->prefix != NULL && self->new_prefix != NULL) {",
      "",
      "[Removed Lines]",
      "852:   g_autofree char *sanitized_pathname;",
      "859:   valid_filename =",
      "860:     g_file_equal (extracted_filename, self->destination_dir) ||",
      "861:     g_file_has_prefix (extracted_filename, self->destination_dir);",
      "864:     g_autofree char *basename;",
      "866:     basename = g_file_get_basename (extracted_filename);",
      "870:     extracted_filename = g_file_get_child (self->destination_dir,",
      "871:                                            basename);",
      "",
      "[Added Lines]",
      "846: static gboolean",
      "847: is_valid_filename (GFile *file, GFile *destination)",
      "848: {",
      "849:   g_autoptr (GFile) parent = NULL;",
      "850:   g_autoptr (GFileInfo) info = NULL;",
      "852:   if (g_file_equal (file, destination))",
      "853:     return TRUE;",
      "855:   if (!g_file_has_prefix (file, destination))",
      "856:     return FALSE;",
      "859:   parent = g_file_get_parent (file);",
      "860:   info = g_file_query_info (parent,",
      "861:                             G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK \",\"",
      "862:                             G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET,",
      "863:                             G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,",
      "864:                             NULL,",
      "865:                             NULL);",
      "866:   if (info == NULL)",
      "867:     return FALSE;",
      "869:   if (g_file_info_get_is_symlink (info)) {",
      "870:     g_autoptr (GFile) cwd = NULL;",
      "871:     const gchar *target;",
      "873:     target = g_file_info_get_symlink_target (info);",
      "874:     if (g_path_is_absolute (target))",
      "875:       return FALSE;",
      "877:     cwd = g_file_get_parent (parent);",
      "878:     g_object_unref (parent);",
      "879:     parent = g_file_resolve_relative_path (cwd, target);",
      "880:   }",
      "883:   return is_valid_filename (parent, destination);",
      "884: }",
      "892:   g_autofree char *sanitized_pathname = NULL;",
      "899:   valid_filename = is_valid_filename (extracted_filename, self->destination_dir);",
      "901:     g_warning (\"autoar_extractor_do_sanitize_pathname: %s is outside of the destination dir\",",
      "902:                 g_file_peek_path (extracted_filename));",
      "906:     return NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1831:     extracted_filename =",
      "1832:       autoar_extractor_do_sanitize_pathname (self, pathname);",
      "1834:     if (hardlink != NULL) {",
      "1835:       hardlink_filename =",
      "1836:         autoar_extractor_do_sanitize_pathname (self, hardlink);",
      "1837:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1868:     if (extracted_filename == NULL) {",
      "1869:       archive_read_data_skip (a);",
      "1870:       continue;",
      "1871:     }",
      "1876:         if (hardlink_filename == NULL) {",
      "1877:           archive_read_data_skip (a);",
      "1878:           continue;",
      "1879:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0810759d0e13c27617fa2c8bb4444d6cda1b7b0",
      "candidate_info": {
        "commit_hash": "d0810759d0e13c27617fa2c8bb4444d6cda1b7b0",
        "repo": "GNOME/gnome-autoar",
        "commit_url": "https://github.com/GNOME/gnome-autoar/commit/d0810759d0e13c27617fa2c8bb4444d6cda1b7b0",
        "files": [
          "gnome-autoar/autoar-extractor.c"
        ],
        "message": "Revert \"extractor: Do not fail if parent folders don't exist\"\n\nThis reverts commit cc4e8b7ccc973ac69d75a7423fbe1bcdc51e2cb3.",
        "before_after_code_files": [
          "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ],
          "candidate": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ]
        }
      },
      "candidate_diff": {
        "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
          "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877: {",
          "878:   g_autoptr (GFile) parent = NULL;",
          "879:   g_autoptr (GFileInfo) info = NULL;",
          "882:   if (g_file_equal (file, destination))",
          "883:     return TRUE;",
          "",
          "[Removed Lines]",
          "880:   g_autoptr (GError) error = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:                             G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET,",
          "893:                             G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,",
          "894:                             NULL,",
          "899:     return FALSE;",
          "902:     g_autoptr (GFile) cwd = NULL;",
          "903:     const gchar *target;",
          "",
          "[Removed Lines]",
          "895:                             &error);",
          "898:   if (error && !g_error_matches (error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))",
          "901:   if (info && g_file_info_get_is_symlink (info)) {",
          "",
          "[Added Lines]",
          "894:                             NULL);",
          "895:   if (info == NULL)",
          "898:   if (g_file_info_get_is_symlink (info)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc4e8b7ccc973ac69d75a7423fbe1bcdc51e2cb3",
      "candidate_info": {
        "commit_hash": "cc4e8b7ccc973ac69d75a7423fbe1bcdc51e2cb3",
        "repo": "GNOME/gnome-autoar",
        "commit_url": "https://github.com/GNOME/gnome-autoar/commit/cc4e8b7ccc973ac69d75a7423fbe1bcdc51e2cb3",
        "files": [
          "gnome-autoar/autoar-extractor.c"
        ],
        "message": "extractor: Do not fail if parent folders don't exist\n\nCurrently, it is not possible to extract archives that don't explicitly\ncontain parent folders. This is unintentional regression caused by commit\nadb067e6. Let's simply ignore G_IO_ERROR_NOT_FOUND errors when looking\nfor symlinks to fix this.\n\nFixes: https://gitlab.gnome.org/GNOME/gnome-autoar/-/issues/11",
        "before_after_code_files": [
          "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ],
          "candidate": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ]
        }
      },
      "candidate_diff": {
        "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
          "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "873: {",
          "874:   g_autoptr (GFile) parent = NULL;",
          "875:   g_autoptr (GFileInfo) info = NULL;",
          "877:   if (g_file_equal (file, destination))",
          "878:     return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:   g_autoptr (GError) error = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "887:                             G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET,",
          "888:                             G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,",
          "889:                             NULL,",
          "892:     return FALSE;",
          "895:     g_autoptr (GFile) cwd = NULL;",
          "896:     const gchar *target;",
          "",
          "[Removed Lines]",
          "890:                             NULL);",
          "891:   if (info == NULL)",
          "894:   if (g_file_info_get_is_symlink (info)) {",
          "",
          "[Added Lines]",
          "891:                             &error);",
          "894:   if (error && !g_error_matches (error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))",
          "897:   if (info && g_file_info_get_is_symlink (info)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c8d16395cd9b493d21fa5c33da58339089fd723",
      "candidate_info": {
        "commit_hash": "2c8d16395cd9b493d21fa5c33da58339089fd723",
        "repo": "GNOME/gnome-autoar",
        "commit_url": "https://github.com/GNOME/gnome-autoar/commit/2c8d16395cd9b493d21fa5c33da58339089fd723",
        "files": [
          "gnome-autoar/autoar-extractor.c"
        ],
        "message": "extractor: Fix criticals for paths that point outside\n\n(Malicious) archives can have malformed paths with `..` segments so they\npoint outside of the destination. The `autoar_extractor_do_sanitize_pathname`\nfunction already sanitizes those paths to be inside of the destination,\nhowever, the code from `autoar_extractor_step_decide_destination` operates on\npaths, which are not yet sanitized and fails with the following criticals:\n`g_file_resolve_relative_path: assertion 'relative_path != NULL' failed`.\nLet's use the `autoar_extractor_do_sanitize_pathname` also here to fix this\ncriticals.",
        "before_after_code_files": [
          "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ],
          "candidate": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ]
        }
      },
      "candidate_diff": {
        "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
          "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "880:   gboolean valid_filename;",
          "881:   g_autofree char *sanitized_pathname;",
          "882:   g_autofree char *utf8_pathname;",
          "884:   utf8_pathname = autoar_common_get_utf8_pathname (pathname_bytes);",
          "886:                                          utf8_pathname ?  utf8_pathname : pathname_bytes);",
          "888:   valid_filename =",
          "892:   if (!valid_filename) {",
          "893:     g_autofree char *basename;",
          "",
          "[Removed Lines]",
          "885:   extracted_filename = g_file_get_child (self->destination_dir,",
          "889:     g_file_equal (extracted_filename, self->destination_dir) ||",
          "890:     g_file_has_prefix (extracted_filename, self->destination_dir);",
          "",
          "[Added Lines]",
          "883:   GFile *destination;",
          "886:   destination = (self->destination_dir != NULL) ? self->destination_dir : self->output_file;",
          "889:   extracted_filename = g_file_get_child (destination,",
          "893:     g_file_equal (extracted_filename, destination) ||",
          "894:     g_file_has_prefix (extracted_filename, destination);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "897:     g_object_unref (extracted_filename);",
          "901:   }",
          "903:   if (self->prefix != NULL && self->new_prefix != NULL) {",
          "",
          "[Removed Lines]",
          "899:     extracted_filename = g_file_get_child (self->destination_dir,",
          "900:                                            basename);",
          "",
          "[Added Lines]",
          "903:     extracted_filename = g_file_get_child (destination, basename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1691:     }",
          "1692:     self->files_list =",
          "1693:       g_list_prepend (self->files_list,",
          "1696:     self->total_files++;",
          "1697:     self->total_size += archive_entry_size (entry);",
          "1698:     archive_read_data_skip (a);",
          "",
          "[Removed Lines]",
          "1694:                       g_file_get_child (self->output_file,",
          "1695:                                         utf8_pathname ? utf8_pathname : pathname));",
          "",
          "[Added Lines]",
          "1697:                       autoar_extractor_do_sanitize_pathname (self,",
          "1698:                                                              utf8_pathname ? utf8_pathname : pathname));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c678fcd2e0ce7ea6893d6f1b6901bea91993ab4e",
      "candidate_info": {
        "commit_hash": "c678fcd2e0ce7ea6893d6f1b6901bea91993ab4e",
        "repo": "GNOME/gnome-autoar",
        "commit_url": "https://github.com/GNOME/gnome-autoar/commit/c678fcd2e0ce7ea6893d6f1b6901bea91993ab4e",
        "files": [
          "gnome-autoar/autoar-extractor.c"
        ],
        "message": "Revert \"AutoarExtractor: Do not extract files outside the destination dir\"\n\nThis reverts commit adb067e645732fdbe7103516e506d09eb6a54429.",
        "before_after_code_files": [
          "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ],
          "candidate": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ]
        }
      },
      "candidate_diff": {
        "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
          "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "872:   return prefix;",
          "873: }",
          "915: static GFile*",
          "916: autoar_extractor_do_sanitize_pathname (AutoarExtractor *self,",
          "917:                                        const char      *pathname_bytes)",
          "918: {",
          "919:   GFile *extracted_filename;",
          "920:   gboolean valid_filename;",
          "922:   g_autofree char *utf8_pathname;",
          "924:   utf8_pathname = autoar_common_get_utf8_pathname (pathname_bytes);",
          "925:   extracted_filename = g_file_get_child (self->destination_dir,",
          "926:                                          utf8_pathname ?  utf8_pathname : pathname_bytes);",
          "929:   if (!valid_filename) {",
          "933:     g_object_unref (extracted_filename);",
          "936:   }",
          "938:   if (self->prefix != NULL && self->new_prefix != NULL) {",
          "",
          "[Removed Lines]",
          "875: static gboolean",
          "876: is_valid_filename (GFile *file, GFile *destination)",
          "877: {",
          "878:   g_autoptr (GFile) parent = NULL;",
          "879:   g_autoptr (GFileInfo) info = NULL;",
          "881:   if (g_file_equal (file, destination))",
          "882:     return TRUE;",
          "884:   if (!g_file_has_prefix (file, destination))",
          "885:     return FALSE;",
          "888:   parent = g_file_get_parent (file);",
          "889:   info = g_file_query_info (parent,",
          "890:                             G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK \",\"",
          "891:                             G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET,",
          "892:                             G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,",
          "893:                             NULL,",
          "894:                             NULL);",
          "895:   if (info == NULL)",
          "896:     return FALSE;",
          "898:   if (g_file_info_get_is_symlink (info)) {",
          "899:     g_autoptr (GFile) cwd = NULL;",
          "900:     const gchar *target;",
          "902:     target = g_file_info_get_symlink_target (info);",
          "903:     if (g_path_is_absolute (target))",
          "904:       return FALSE;",
          "906:     cwd = g_file_get_parent (parent);",
          "907:     g_object_unref (parent);",
          "908:     parent = g_file_resolve_relative_path (cwd, target);",
          "909:   }",
          "912:   return is_valid_filename (parent, destination);",
          "913: }",
          "921:   g_autofree char *sanitized_pathname = NULL;",
          "928:   valid_filename = is_valid_filename (extracted_filename, self->destination_dir);",
          "930:     g_warning (\"autoar_extractor_do_sanitize_pathname: %s is outside of the destination dir\",",
          "931:                 g_file_peek_path (extracted_filename));",
          "935:     return NULL;",
          "",
          "[Added Lines]",
          "881:   g_autofree char *sanitized_pathname;",
          "888:   valid_filename =",
          "889:     g_file_equal (extracted_filename, self->destination_dir) ||",
          "890:     g_file_has_prefix (extracted_filename, self->destination_dir);",
          "893:     g_autofree char *basename;",
          "895:     basename = g_file_get_basename (extracted_filename);",
          "899:     extracted_filename = g_file_get_child (self->destination_dir,",
          "900:                                            basename);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1912:     extracted_filename =",
          "1913:       autoar_extractor_do_sanitize_pathname (self, pathname);",
          "1919:     if (hardlink != NULL) {",
          "1920:       hardlink_filename =",
          "1921:         autoar_extractor_do_sanitize_pathname (self, hardlink);",
          "1926:     }",
          "",
          "[Removed Lines]",
          "1914:     if (extracted_filename == NULL) {",
          "1915:       archive_read_data_skip (a);",
          "1916:       continue;",
          "1917:     }",
          "1922:         if (hardlink_filename == NULL) {",
          "1923:           archive_read_data_skip (a);",
          "1924:           continue;",
          "1925:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97c3317773c270557b770bcdb60cf6c2826f7544",
      "candidate_info": {
        "commit_hash": "97c3317773c270557b770bcdb60cf6c2826f7544",
        "repo": "GNOME/gnome-autoar",
        "commit_url": "https://github.com/GNOME/gnome-autoar/commit/97c3317773c270557b770bcdb60cf6c2826f7544",
        "files": [
          "gnome-autoar/autoar-compressor.c",
          "gnome-autoar/autoar-extractor.c",
          "tests/test-extract-unit.c",
          "tests/test-extract.c"
        ],
        "message": "Add missing initialization for g_auto* variables\n\nWhen building Fedora package, I see many \"may be used uninitialzed\"\nwarnings. I am not sure why but I don't see those warnings locally even\nwhen `-Wmaybe-uninitialized` is used. Anyway, this is because the\n`g_autofree` and `g_autoptr` variables are not explicitely initialized\nas mentioned in the documentation. Let's initialize them to get rid of\nthose warnings.",
        "before_after_code_files": [
          "gnome-autoar/autoar-compressor.c||gnome-autoar/autoar-compressor.c",
          "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c",
          "tests/test-extract-unit.c||tests/test-extract-unit.c",
          "tests/test-extract.c||tests/test-extract.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ],
          "candidate": [
            "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c"
          ]
        }
      },
      "candidate_diff": {
        "gnome-autoar/autoar-compressor.c||gnome-autoar/autoar-compressor.c": [
          "File: gnome-autoar/autoar-compressor.c -> gnome-autoar/autoar-compressor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1522:     GFileType filetype;",
          "1523:     GFileInfo *fileinfo;",
          "1526:     file = l->data;",
          "",
          "[Removed Lines]",
          "1524:     g_autofree gchar *pathname;",
          "",
          "[Added Lines]",
          "1524:     g_autofree gchar *pathname = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:   self->notify_last = 0;",
          "1584:   autoar_compressor_signal_progress (self);",
          "1585:   if (archive_write_close (self->a) != ARCHIVE_OK) {",
          "1588:     output_name = autoar_common_g_file_get_name (self->output_file);",
          "",
          "[Removed Lines]",
          "1586:     g_autofree gchar *output_name;",
          "",
          "[Added Lines]",
          "1586:     g_autofree gchar *output_name = NULL;",
          "",
          "---------------"
        ],
        "gnome-autoar/autoar-extractor.c||gnome-autoar/autoar-extractor.c": [
          "File: gnome-autoar/autoar-extractor.c -> gnome-autoar/autoar-extractor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:     return AUTOAR_CONFLICT_SKIP;",
          "793:   if (*new_file) {",
          "797:     previous_path = g_file_get_path (file);",
          "798:     new_path = g_file_get_path (*new_file);",
          "",
          "[Removed Lines]",
          "794:     g_autofree char *previous_path;",
          "795:     g_autofree char *new_path;",
          "",
          "[Added Lines]",
          "794:     g_autofree char *previous_path = NULL;",
          "795:     g_autofree char *new_path = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886: {",
          "887:   GFile *extracted_filename;",
          "888:   gboolean valid_filename;",
          "891:   GFile *destination;",
          "",
          "[Removed Lines]",
          "889:   g_autofree char *sanitized_pathname;",
          "890:   g_autofree char *utf8_pathname;",
          "",
          "[Added Lines]",
          "889:   g_autofree char *sanitized_pathname = NULL;",
          "890:   g_autofree char *utf8_pathname = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "906:     g_file_has_prefix (extracted_filename, destination);",
          "908:   if (!valid_filename) {",
          "911:     basename = g_file_get_basename (extracted_filename);",
          "",
          "[Removed Lines]",
          "909:     g_autofree char *basename;",
          "",
          "[Added Lines]",
          "909:     g_autofree char *basename = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "918:   if (self->prefix != NULL && self->new_prefix != NULL &&",
          "919:       !g_file_equal (self->prefix, self->new_prefix)) {",
          "922:     relative_path = g_file_get_relative_path (self->prefix,",
          "923:                                               extracted_filename);",
          "",
          "[Removed Lines]",
          "920:     g_autofree char *relative_path;",
          "",
          "[Added Lines]",
          "920:     g_autofree char *relative_path = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1786:     g_debug (\"autoar_extractor_step_set_destination: pathname_prefix = %s\",",
          "1787:              g_file_peek_path (self->prefix));",
          "",
          "[Removed Lines]",
          "1783:     g_autofree char *prefix_name;",
          "1784:     g_autofree char *prefix_name_no_ext;",
          "",
          "[Added Lines]",
          "1783:     g_autofree char *prefix_name = NULL;",
          "1784:     g_autofree char *prefix_name_no_ext = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1813:   GList *files = NULL;",
          "1814:   GList *l;",
          "1815:   GFile *new_destination = NULL;",
          "1818:   for (l = self->files_list; l != NULL; l = l->next) {",
          "1819:     char *relative_path;",
          "",
          "[Removed Lines]",
          "1816:   g_autofree char *destination_name;",
          "",
          "[Added Lines]",
          "1816:   g_autofree char *destination_name = NULL;",
          "",
          "---------------"
        ],
        "tests/test-extract-unit.c||tests/test-extract-unit.c": [
          "File: tests/test-extract-unit.c -> tests/test-extract-unit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     GFileInfo *info;",
          "66:     while ((info = g_file_enumerator_next_file (enumerator, NULL, NULL)) != NULL) {",
          "69:       child = g_file_get_child (directory, g_file_info_get_name (info));",
          "",
          "[Removed Lines]",
          "67:       g_autoptr (GFile) child;",
          "",
          "[Added Lines]",
          "67:       g_autoptr (GFile) child = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:                                         NULL, NULL));",
          "336:   while (!g_queue_is_empty (files)) {",
          "340:     file = g_queue_pop_tail (files);",
          "341:     file_info = g_queue_pop_tail (file_infos);",
          "",
          "[Removed Lines]",
          "337:     g_autoptr (GFile) file;",
          "338:     g_autoptr (GFileInfo) file_info;",
          "",
          "[Added Lines]",
          "337:     g_autoptr (GFile) file = NULL;",
          "338:     g_autoptr (GFileInfo) file_info = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:                         gpointer user_data)",
          "399: {",
          "400:   ExtractTest *extract_test = user_data;",
          "402:   GFileInfo *corresponding_file_info;",
          "404:   relative_path = scanned_file == extract_test->reference ?",
          "",
          "[Removed Lines]",
          "401:   g_autofree char *relative_path;",
          "",
          "[Added Lines]",
          "401:   g_autofree char *relative_path = NULL;",
          "",
          "---------------"
        ],
        "tests/test-extract.c||tests/test-extract.c": [
          "File: tests/test-extract.c -> tests/test-extract.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:                      GFile **new_file,",
          "60:                      gpointer data)",
          "61: {",
          "64:   path = g_file_get_path (file);",
          "",
          "[Removed Lines]",
          "62:   g_autofree char *path;",
          "",
          "[Added Lines]",
          "62:   g_autofree char *path = NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}