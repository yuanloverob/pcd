{
  "cve_id": "CVE-2024-24814",
  "cve_desc": "mod_auth_openidc is an OpenID Certified\u2122 authentication and authorization module for the Apache 2.x HTTP server that implements the OpenID Connect Relying Party functionality. In affected versions missing input validation on mod_auth_openidc_session_chunks cookie value makes the server vulnerable to a denial of service (DoS) attack. An internal security audit has been conducted and the reviewers found that if they manipulated the value of the mod_auth_openidc_session_chunks cookie to a very large integer, like 99999999, the server struggles with the request for a long time and finally gets back with a 500 error. Making a few requests of this kind caused our server to become unresponsive. Attackers can craft requests that would make the server work very hard (and possibly become unresponsive) and/or crash with minimal effort. This issue has been addressed in version 2.4.15.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "OpenIDC/mod_auth_openidc",
  "patch_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
  "patch_info": {
    "commit_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
    "repo": "OpenIDC/mod_auth_openidc",
    "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/4022c12f314bd89d127d1be008b1a80a08e1203d",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/util.c"
    ],
    "message": "release 2.4.15.2: fix DoS CVE-2024-24814\n\nfix CVE-2024-24814: DoS when `OIDCSessionType client-cookie` is set and\na crafted Cookie header is supplied\nhttps://github.com/OpenIDC/mod_auth_openidc/security/advisories/GHSA-hxr6-w4gc-7vvv\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/util.c||src/util.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2dev],[hans.zandbelt@openidc.com])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2],[hans.zandbelt@openidc.com])",
      "",
      "---------------"
    ],
    "src/util.c||src/util.c": [
      "File: src/util.c -> src/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1561: char *oidc_util_get_chunked_cookie(request_rec *r, const char *cookieName, int chunkSize) {",
      "1578:   }",
      "1579:  }",
      "1580:  return cookieValue;",
      "1581: }",
      "",
      "[Removed Lines]",
      "1562:  char *cookieValue = NULL;",
      "1563:  char *chunkValue = NULL;",
      "1564:  int i = 0;",
      "1565:  if (chunkSize == 0) {",
      "1566:   cookieValue = oidc_util_get_cookie(r, cookieName);",
      "1567:  } else {",
      "1568:   int chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1569:   if (chunkCount > 0) {",
      "1570:    cookieValue = \"\";",
      "1571:    for (i = 0; i < chunkCount; i++) {",
      "1572:     chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1573:     if (chunkValue != NULL)",
      "1574:      cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue, chunkValue);",
      "1575:    }",
      "1576:   } else {",
      "1577:    cookieValue = oidc_util_get_cookie(r, cookieName);",
      "",
      "[Added Lines]",
      "1562:  char *cookieValue = NULL, *chunkValue = NULL;",
      "1563:  int chunkCount = 0, i = 0;",
      "1564:  if (chunkSize == 0)",
      "1565:   return oidc_util_get_cookie(r, cookieName);",
      "1566:  chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1567:  if (chunkCount == 0)",
      "1568:   return oidc_util_get_cookie(r, cookieName);",
      "1569:  if ((chunkCount < 0) || (chunkCount > 99)) {",
      "1570:   oidc_warn(r, \"chunk count out of bounds: %d\", chunkCount);",
      "1571:   return NULL;",
      "1572:  }",
      "1573:  for (i = 0; i < chunkCount; i++) {",
      "1574:   chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1575:   if (chunkValue == NULL) {",
      "1576:    oidc_warn(r, \"could not find chunk %d; aborting\", i);",
      "1577:    break;",
      "1579:   cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue ? cookieValue : \"\", chunkValue);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "833283c1dbfc31b8bab7c27498eaa84efe2ae3dd",
      "candidate_info": {
        "commit_hash": "833283c1dbfc31b8bab7c27498eaa84efe2ae3dd",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/833283c1dbfc31b8bab7c27498eaa84efe2ae3dd",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/const.h"
        ],
        "message": "release 2.4.15.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/const.h||src/const.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.4dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.4],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/const.h||src/const.h": [
          "File: src/const.h -> src/const.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:  return ((a && b) ? strncmp(a, b, n) : -1);",
          "90: }",
          "91: static inline char *_oidc_strstr(const char *a, const char *b) {",
          "93: }",
          "94: static inline apr_time_t _oidc_str_to_time(const char *s, const apr_time_t default_value) {",
          "95:  apr_time_t v = default_value;",
          "",
          "[Removed Lines]",
          "92:  return ((a && b) ? strstr(a, b) : NULL);",
          "",
          "[Added Lines]",
          "92:  return ((a && b) ? (char *)strstr(a, b) : NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d47d6c3536a26db0d977301cc0130d652a000da4",
      "candidate_info": {
        "commit_hash": "d47d6c3536a26db0d977301cc0130d652a000da4",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/d47d6c3536a26db0d977301cc0130d652a000da4",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.16.5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.5rc0],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.5],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a14ed22b6cfcc3b594c36462b0d07f2940ec882d",
      "candidate_info": {
        "commit_hash": "a14ed22b6cfcc3b594c36462b0d07f2940ec882d",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/a14ed22b6cfcc3b594c36462b0d07f2940ec882d",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/cfg/cfg.c",
          "src/cfg/cfg.h",
          "src/cfg/cmds.c",
          "src/cfg/dir.c",
          "src/cfg/provider.c",
          "src/cfg/provider.h",
          "src/metadata.c",
          "src/proto/id_token.c",
          "src/util.c",
          "src/util.h"
        ],
        "message": "ensure backwards compatibility for multi-value ID token \"aud\" validation\n\nensure backwards compatibility with versions <2.4.16.x when a JSON array\nof string values is provided in the \"aud\" claim of the ID token;\nrequired by (at least) Oracle IDCS see #1272 and #1273; thanks @lufik\nand @tydalforce\n\nadd OIDCIDTokenAudValues configuration primitive that allows for\nexplicit (and exhaustive) configuration of the list of accepted values\nin the \"aud\" claim of the ID token e.g. as required for passing FAPI 2\nconformance testing\n\nbump to 2.4.16.5rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/cfg/cfg.c||src/cfg/cfg.c",
          "src/cfg/cfg.h||src/cfg/cfg.h",
          "src/cfg/cmds.c||src/cfg/cmds.c",
          "src/cfg/dir.c||src/cfg/dir.c",
          "src/cfg/provider.c||src/cfg/provider.c",
          "src/cfg/provider.h||src/cfg/provider.h",
          "src/metadata.c||src/metadata.c",
          "src/proto/id_token.c||src/proto/id_token.c",
          "src/util.c||src/util.c",
          "src/util.h||src/util.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/util.c||src/util.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/util.c||src/util.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "347: # NB: this can be overridden on a per-OP basis in the .conf file using the key: id_token_encrypted_response_enc",
          "348: #OIDCIDTokenEncryptedResponseEnc [A128CBC-HS256|A256CBC-HS512|A256GCM]",
          "350: # The algorithm that the OP should use to sign the UserInfo response",
          "351: # When not defined the default (by spec) is that the OP does not sign the response.",
          "352: # (ES??? algorithms only supported when using OpenSSL >= 1.0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: # The accepted value(s) of the \"aud\" claim in the ID token, restricted to only those values that have been defined here.",
          "351: # The convienience value \"@\" can be used to refer to the configured client id (i.e. in case of dynamic client registration).",
          "352: # When not defined the default is to accept any list of values (or a single string value) that includes value of OIDCClientID.",
          "353: # NB: this can be overridden on a per-OP basis in the .conf file using the key: id_token_aud_values with the value set to a JSON array of strings.",
          "354: #OIDCIDTokenAudValues <value>+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.5rc0],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/cfg/cfg.c||src/cfg/cfg.c": [
          "File: src/cfg/cfg.c -> src/cfg/cfg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include \"session.h\"",
          "53: #include \"util.h\"",
          "55: #define OIDC_DEFAULT_ACTION_ON_USERINFO_ERROR OIDC_ON_ERROR_502",
          "56: OIDC_CFG_MEMBER_FUNC_TYPE_GET(action_on_userinfo_error, oidc_on_error_action_t, OIDC_DEFAULT_ACTION_ON_USERINFO_ERROR)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: const char *oidc_cfg_string_list_add(apr_pool_t *pool, apr_array_header_t **list, const char *arg) {",
          "56:  if (*list == NULL)",
          "58:  APR_ARRAY_PUSH(*list, const char *) = arg;",
          "59:  return NULL;",
          "60: }",
          "",
          "---------------"
        ],
        "src/cfg/cfg.h||src/cfg/cfg.h": [
          "File: src/cfg/cfg.h -> src/cfg/cfg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: int oidc_cfg_post_config(oidc_cfg_t *cfg, server_rec *s);",
          "187: void oidc_cfg_child_init(apr_pool_t *pool, oidc_cfg_t *cfg, server_rec *s);",
          "188: void oidc_cfg_cleanup_child(oidc_cfg_t *cfg, server_rec *s);",
          "190: #define OIDC_CFG_MEMBER_FUNC_NAME(member, type, method) oidc_##type##_##member##_##method",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: const char *oidc_cfg_string_list_add(apr_pool_t *pool, apr_array_header_t **list, const char *arg);",
          "",
          "---------------"
        ],
        "src/cfg/cmds.c||src/cfg/cmds.c": [
          "File: src/cfg/cmds.c -> src/cfg/cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   OIDCIDTokenEncryptedResponseEnc,",
          "466:   id_token_encrypted_response_enc,",
          "467:   \"The algorithm that the OP should use to encrypt to the id_token with the Content Encryption Key (used only in dynamic client registration); must be one of [A128CBC-HS256|A256CBC-HS512|A256GCM]\"),",
          "468:  OIDC_CFG_CMD_PROVIDER(",
          "469:   AP_INIT_TAKE1,",
          "470:   OIDCUserInfoSignedResponseAlg,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:  OIDC_CFG_CMD_PROVIDER(",
          "469:   AP_INIT_ITERATE,",
          "470:   OIDCIDTokenAudValues,",
          "471:   id_token_aud_values,",
          "472:   \"Accepted \\\"aud\\\" claim values in the ID token.\"),",
          "",
          "---------------"
        ],
        "src/cfg/dir.c||src/cfg/dir.c": [
          "File: src/cfg/dir.c -> src/cfg/dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: const char *oidc_cmd_dir_strip_cookies_set(cmd_parms *cmd, void *m, const char *arg) {",
          "255:  oidc_dir_cfg_t *dir_cfg = (oidc_dir_cfg_t *)m;",
          "257: }",
          "259: const char *oidc_cmd_dir_pass_cookies_set(cmd_parms *cmd, void *m, const char *arg) {",
          "260:  oidc_dir_cfg_t *dir_cfg = (oidc_dir_cfg_t *)m;",
          "262: }",
          "264: #define OIDC_CFG_DIR_MEMBER_FUNC_GET(member, type, def_val, unset_val)                                                 \\",
          "",
          "[Removed Lines]",
          "247: static const char *oidc_cfg_dir_cookie_names_set(apr_pool_t *pool, apr_array_header_t **cookie_names, const char *arg) {",
          "248:  if (*cookie_names == NULL)",
          "250:  APR_ARRAY_PUSH(*cookie_names, const char *) = arg;",
          "251:  return NULL;",
          "252: }",
          "256:  return oidc_cfg_dir_cookie_names_set(cmd->pool, &dir_cfg->strip_cookies, arg);",
          "261:  return oidc_cfg_dir_cookie_names_set(cmd->pool, &dir_cfg->pass_cookies, arg);",
          "",
          "[Added Lines]",
          "249:  return oidc_cfg_string_list_add(cmd->pool, &dir_cfg->strip_cookies, arg);",
          "254:  return oidc_cfg_string_list_add(cmd->pool, &dir_cfg->pass_cookies, arg);",
          "",
          "---------------"
        ],
        "src/cfg/provider.c||src/cfg/provider.c": [
          "File: src/cfg/provider.c -> src/cfg/provider.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:  char *id_token_signed_response_alg;",
          "90:  char *id_token_encrypted_response_alg;",
          "91:  char *id_token_encrypted_response_enc;",
          "92:  char *userinfo_signed_response_alg;",
          "93:  char *userinfo_encrypted_response_alg;",
          "94:  char *userinfo_encrypted_response_enc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  apr_array_header_t *id_token_aud_values;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: OIDC_PROVIDER_MEMBER_FUNCS_KEYS(verify_public_keys)",
          "241: OIDC_PROVIDER_MEMBER_FUNCS_KEYS(client_keys)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: #define OIDC_PROVIDER_MEMBER_FUNCS_STR_LIST(member)                                                                    \\",
          "249:                                                                                                                        \\",
          "250:  const char *oidc_cfg_provider_##member##_set_str_list(apr_pool_t *pool, oidc_provider_t *provider,             \\",
          "251:              apr_array_header_t *arg) {                               \\",
          "252:   provider->member = arg;                                                                                \\",
          "253:   return NULL;                                                                                           \\",
          "254:  }                                                                                                              \\",
          "255:                                                                                                                        \\",
          "256:  const char *oidc_cfg_provider_##member##_set(apr_pool_t *pool, oidc_provider_t *provider, const char *arg) {   \\",
          "257:   return oidc_cfg_string_list_add(pool, &provider->member, arg);                                         \\",
          "258:  }                                                                                                              \\",
          "259:  OIDC_PROVIDER_MEMBER_FUNCS_TYPE_DEF(member, const apr_array_header_t *, NULL)",
          "264: OIDC_PROVIDER_MEMBER_FUNCS_STR_LIST(id_token_aud_values)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "701:  provider->request_object = NULL;",
          "703:  provider->response_require_iss = OIDC_CONFIG_POS_INT_UNSET;",
          "704: }",
          "706: void oidc_cfg_provider_merge(apr_pool_t *pool, oidc_provider_t *dst, const oidc_provider_t *base,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "728:  provider->id_token_aud_values = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "813:  dst->response_require_iss = add->response_require_iss != OIDC_CONFIG_POS_INT_UNSET ? add->response_require_iss",
          "814:               : base->response_require_iss;",
          "815: }",
          "817: oidc_provider_t *oidc_cfg_provider_create(apr_pool_t *pool) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "841:  dst->id_token_aud_values =",
          "842:      add->id_token_aud_values != NULL ? add->id_token_aud_values : base->id_token_aud_values;",
          "",
          "---------------"
        ],
        "src/cfg/provider.h||src/cfg/provider.h": [
          "File: src/cfg/provider.h -> src/cfg/provider.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: #define OIDCIDTokenSignedResponseAlg \"OIDCIDTokenSignedResponseAlg\"",
          "123: #define OIDCIDTokenEncryptedResponseAlg \"OIDCIDTokenEncryptedResponseAlg\"",
          "124: #define OIDCIDTokenEncryptedResponseEnc \"OIDCIDTokenEncryptedResponseEnc\"",
          "125: #define OIDCUserInfoSignedResponseAlg \"OIDCUserInfoSignedResponseAlg\"",
          "126: #define OIDCUserInfoEncryptedResponseAlg \"OIDCUserInfoEncryptedResponseAlg\"",
          "127: #define OIDCUserInfoEncryptedResponseEnc \"OIDCUserInfoEncryptedResponseEnc\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: #define OIDCIDTokenAudValues \"OIDCIDTokenAudValues\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:  OIDC_CFG_PROVIDER_MEMBER_FUNCS_TYPE_DECL(member, type)                                                         \\",
          "179:  void OIDC_CFG_MEMBER_FUNC_NAME(member, cfg_provider, int_set)(oidc_provider_t * provider, type arg);",
          "181: OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_DECL(metadata_url)",
          "182: OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_DECL(issuer)",
          "183: OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_DECL(authorization_endpoint_url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: #define OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_LIST_DECL(member)                                                           \\",
          "183:  OIDC_CFG_PROVIDER_MEMBER_FUNCS_TYPE_DECL(member, const apr_array_header_t *)                                   \\",
          "184:  const char *OIDC_CFG_MEMBER_FUNC_NAME(member, cfg_provider, set_str_list)(apr_pool_t *, oidc_provider_t *,     \\",
          "185:             apr_array_header_t *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212: OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_DECL(userinfo_encrypted_response_enc)",
          "213: OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_DECL(request_object)",
          "216: OIDC_CFG_PROVIDER_MEMBER_FUNCS_KEYS_DECL(verify_public_keys)",
          "217: OIDC_CFG_PROVIDER_MEMBER_FUNCS_KEYS_DECL(client_keys)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: OIDC_CFG_PROVIDER_MEMBER_FUNCS_STR_LIST_DECL(id_token_aud_values)",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: #define OIDC_METADATA_ID_TOKEN_SIGNED_RESPONSE_ALG \"id_token_signed_response_alg\"",
          "86: #define OIDC_METADATA_ID_TOKEN_ENCRYPTED_RESPONSE_ALG \"id_token_encrypted_response_alg\"",
          "87: #define OIDC_METADATA_ID_TOKEN_ENCRYPTED_RESPONSE_ENC \"id_token_encrypted_response_enc\"",
          "88: #define OIDC_METADATA_USERINFO_SIGNED_RESPONSE_ALG \"userinfo_signed_response_alg\"",
          "89: #define OIDC_METADATA_USERINFO_ENCRYPTED_RESPONSE_ALG \"userinfo_encrypted_response_alg\"",
          "90: #define OIDC_METADATA_USERINFO_ENCRYPTED_RESPONSE_ENC \"userinfo_encrypted_response_enc\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: #define OIDC_METADATA_ID_TOKEN_AUD_VALUES \"id_token_aud_values\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1228:  const char *rv = NULL;",
          "1229:  char *value = NULL;",
          "1230:  int ivalue = OIDC_CONFIG_POS_INT_UNSET;",
          "1233:  oidc_util_json_object_get_string(r->pool, j_conf, OIDC_METADATA_CLIENT_JWKS_URI, &value,",
          "1234:       oidc_cfg_provider_client_jwks_uri_get(oidc_cfg_provider_get(cfg)));",
          "",
          "[Removed Lines]",
          "1231:  apr_array_header_t *keys = NULL;",
          "",
          "[Added Lines]",
          "1232:  apr_array_header_t *keys = NULL, *auds = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1263:      oidc_cfg_provider_id_token_encrypted_response_enc_get(oidc_cfg_provider_get(cfg)));",
          "1264:  OIDC_METADATA_PROVIDER_SET(id_token_encrypted_response_enc, value, rv)",
          "1267:  oidc_util_json_object_get_string(",
          "1268:      r->pool, j_conf, OIDC_METADATA_USERINFO_SIGNED_RESPONSE_ALG, &value,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1267:  oidc_util_json_object_get_string_array(r->pool, j_conf, OIDC_METADATA_ID_TOKEN_AUD_VALUES, &auds,",
          "1268:             oidc_cfg_provider_id_token_aud_values_get(oidc_cfg_provider_get(cfg)));",
          "1269:  if (auds != NULL) {",
          "1270:   rv = oidc_cfg_provider_id_token_aud_values_set_str_list(r->pool, provider, auds);",
          "1271:   if (rv != NULL)",
          "1272:    oidc_error(r, \"oidc_cfg_provider_aud_values_set: %s\", rv);",
          "1273:  }",
          "",
          "---------------"
        ],
        "src/proto/id_token.c||src/proto/id_token.c": [
          "File: src/proto/id_token.c -> src/proto/id_token.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  return TRUE;",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: #define OIDC_PROTO_IDTOKEN_AUD_CLIENT_ID_SPECIAL_VALUE \"@\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:          oidc_jwt_payload_t *id_token_payload) {",
          "105:  char *azp = NULL;",
          "106:  oidc_jose_get_string(r->pool, id_token_payload->value.json, OIDC_CLAIM_AZP, FALSE, &azp, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:  const char *s_aud = NULL;",
          "109:  const apr_array_header_t *arr = NULL;",
          "110:  int i = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:  json_t *aud = json_object_get(id_token_payload->value.json, OIDC_CLAIM_AUD);",
          "123:  if (aud != NULL) {",
          "126:   if (json_is_string(aud)) {",
          "136:    }",
          "139:   } else if (json_is_array(aud)) {",
          "164:    }",
          "166:   } else {",
          "",
          "[Removed Lines]",
          "129:    if (_oidc_strcmp(json_string_value(aud), oidc_cfg_provider_client_id_get(provider)) != 0) {",
          "130:     oidc_error(r,",
          "131:         \"the configured client_id (%s) did not match the \\\"%s\\\" claim value (%s) in \"",
          "132:         \"the id_token\",",
          "133:         oidc_cfg_provider_client_id_get(provider), OIDC_CLAIM_AUD,",
          "134:         json_string_value(aud));",
          "135:     return FALSE;",
          "141:    if ((json_array_size(aud) > 1) && (azp == NULL)) {",
          "142:     oidc_warn(r,",
          "143:        \"the \\\"%s\\\" claim value in the id_token is an array with more than 1 \"",
          "144:        \"element, but \\\"%s\\\" claim is not present (a SHOULD in the spec...)\",",
          "145:        OIDC_CLAIM_AUD, OIDC_CLAIM_AZP);",
          "146:    }",
          "148:    if (oidc_util_json_array_has_value(r, aud, oidc_cfg_provider_client_id_get(provider)) ==",
          "149:        FALSE) {",
          "150:     oidc_error(r,",
          "151:         \"our configured client_id (%s) could not be found in the array of values \"",
          "152:         \"for \\\"%s\\\" claim\",",
          "153:         oidc_cfg_provider_client_id_get(provider), OIDC_CLAIM_AUD);",
          "154:     return FALSE;",
          "155:    }",
          "157:    if (json_array_size(aud) > 1) {",
          "158:     oidc_error(",
          "159:         r,",
          "160:         \"our configured client_id (%s) was found in the array of values \"",
          "161:         \"for \\\"%s\\\" claim, but there are other unknown/untrusted values included as well\",",
          "162:         oidc_cfg_provider_client_id_get(provider), OIDC_CLAIM_AUD);",
          "163:     return FALSE;",
          "",
          "[Added Lines]",
          "131:   arr = oidc_cfg_provider_id_token_aud_values_get(provider);",
          "136:    if (arr == NULL) {",
          "139:     if (_oidc_strcmp(json_string_value(aud), oidc_cfg_provider_client_id_get(provider)) !=",
          "140:         0) {",
          "141:      oidc_error(r,",
          "142:          \"the configured client_id (%s) did not match the \\\"%s\\\" claim value \"",
          "143:          \"(%s) in \"",
          "144:          \"the id_token\",",
          "145:          oidc_cfg_provider_client_id_get(provider), OIDC_CLAIM_AUD,",
          "146:          json_string_value(aud));",
          "147:      return FALSE;",
          "148:     }",
          "150:    } else {",
          "152:     for (i = 0; i < arr->nelts; i++) {",
          "153:      s_aud = APR_ARRAY_IDX(arr, i, const char *);",
          "154:      if (_oidc_strcmp(s_aud, OIDC_PROTO_IDTOKEN_AUD_CLIENT_ID_SPECIAL_VALUE) == 0)",
          "155:       s_aud = oidc_cfg_provider_client_id_get(provider);",
          "156:      if (_oidc_strcmp(json_string_value(aud), s_aud) == 0)",
          "157:       break;",
          "158:     }",
          "160:     if (i == arr->nelts) {",
          "161:      oidc_error(",
          "162:          r, \"none of our configured audience values could be found in \\\"%s\\\" claim\",",
          "163:          OIDC_CLAIM_AUD);",
          "164:      return FALSE;",
          "165:     }",
          "171:    if (arr == NULL) {",
          "173:     if ((json_array_size(aud) > 1) && (azp == NULL)) {",
          "174:      oidc_warn(r,",
          "175:         \"the \\\"%s\\\" claim value in the id_token is an array with more than 1 \"",
          "176:         \"element, but \\\"%s\\\" claim is not present (a SHOULD in the spec...)\",",
          "177:         OIDC_CLAIM_AUD, OIDC_CLAIM_AZP);",
          "178:     }",
          "180:     if (oidc_util_json_array_has_value(r, aud, oidc_cfg_provider_client_id_get(provider)) ==",
          "181:         FALSE) {",
          "182:      oidc_error(",
          "183:          r,",
          "184:          \"our configured client_id (%s) could not be found in the array of values \"",
          "185:          \"for \\\"%s\\\" claim\",",
          "186:          oidc_cfg_provider_client_id_get(provider), OIDC_CLAIM_AUD);",
          "187:      return FALSE;",
          "188:     }",
          "190:    } else {",
          "194:     for (i = 0; i < arr->nelts; i++) {",
          "195:      s_aud = APR_ARRAY_IDX(arr, i, const char *);",
          "196:      if (_oidc_strcmp(s_aud, OIDC_PROTO_IDTOKEN_AUD_CLIENT_ID_SPECIAL_VALUE) == 0)",
          "197:       s_aud = oidc_cfg_provider_client_id_get(provider);",
          "198:      if (oidc_util_json_array_has_value(r, aud, s_aud) == FALSE) {",
          "199:       oidc_error(r,",
          "200:           \"our configured audience value (%s) could not be found in \"",
          "201:           \"the array of values \"",
          "202:           \"for \\\"%s\\\" claim\",",
          "203:           APR_ARRAY_IDX(arr, i, const char *), OIDC_CLAIM_AUD);",
          "204:       return FALSE;",
          "205:      }",
          "206:     }",
          "208:     if (json_array_size(aud) > arr->nelts) {",
          "209:      oidc_error(",
          "210:          r,",
          "211:          \"our configured audience values are all present in the array of values \"",
          "212:          \"for \\\"%s\\\" claim, but there are other unknown/untrusted values included \"",
          "213:          \"as well\",",
          "214:          OIDC_CLAIM_AUD);",
          "215:      return FALSE;",
          "216:     }",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1703:  return TRUE;",
          "1704: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1709: apr_byte_t oidc_util_json_object_get_string_array(apr_pool_t *pool, json_t *json, const char *name,",
          "1710:         apr_array_header_t **value, const apr_array_header_t *default_value) {",
          "1711:  json_t *v = NULL, *arr = NULL;",
          "1712:  size_t i = 0;",
          "1714:  if (json != NULL) {",
          "1715:   arr = json_object_get(json, name);",
          "1716:   if ((arr != NULL) && (json_is_array(arr))) {",
          "1718:    for (i = 0; i < json_array_size(arr); i++) {",
          "1719:     v = json_array_get(arr, i);",
          "1720:     APR_ARRAY_PUSH(*value, const char *) = apr_pstrdup(pool, json_string_value(v));",
          "1721:    }",
          "1722:   }",
          "1723:  }",
          "1724:  return TRUE;",
          "1725: }",
          "",
          "---------------"
        ],
        "src/util.h||src/util.h": [
          "File: src/util.h -> src/util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: apr_byte_t oidc_util_spaced_string_contains(apr_pool_t *pool, const char *str, const char *match);",
          "93: apr_byte_t oidc_util_json_object_get_string(apr_pool_t *pool, json_t *json, const char *name, char **value,",
          "94:          const char *default_value);",
          "95: apr_byte_t oidc_util_json_object_get_int(const json_t *json, const char *name, int *value, const int default_value);",
          "96: apr_byte_t oidc_util_json_object_get_bool(const json_t *json, const char *name, int *value, const int default_value);",
          "97: char *oidc_util_html_escape(apr_pool_t *pool, const char *input);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: apr_byte_t oidc_util_json_object_get_string_array(apr_pool_t *pool, json_t *json, const char *name,",
          "96:         apr_array_header_t **value, const apr_array_header_t *default_value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "628799a61e146cc82b20e765f88e4c1ee495ff7a",
      "candidate_info": {
        "commit_hash": "628799a61e146cc82b20e765f88e4c1ee495ff7a",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/628799a61e146cc82b20e765f88e4c1ee495ff7a",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.16.6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.6dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.6],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38bbedf54eeeb67c3ed402de9159963a86424d5a",
      "candidate_info": {
        "commit_hash": "38bbedf54eeeb67c3ed402de9159963a86424d5a",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/38bbedf54eeeb67c3ed402de9159963a86424d5a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c"
        ],
        "message": "release 2.4.16.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc3],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c"
        ]
      }
    }
  ]
}