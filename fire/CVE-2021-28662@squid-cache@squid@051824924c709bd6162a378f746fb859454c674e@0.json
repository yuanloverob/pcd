{
  "cve_id": "CVE-2021-28662",
  "cve_desc": "An issue was discovered in Squid 4.x before 4.15 and 5.x before 5.0.6. If a remote server sends a certain response header over HTTP or HTTPS, there is a denial of service. This header can plausibly occur in benign network traffic.",
  "repo": "squid-cache/squid",
  "patch_hash": "051824924c709bd6162a378f746fb859454c674e",
  "patch_info": {
    "commit_hash": "051824924c709bd6162a378f746fb859454c674e",
    "repo": "squid-cache/squid",
    "commit_url": "https://github.com/squid-cache/squid/commit/051824924c709bd6162a378f746fb859454c674e",
    "files": [
      "src/http/RegisteredHeaders.cc"
    ],
    "message": "Merge pull request from GHSA-jjq6-mh2h-g39h",
    "before_after_code_files": [
      "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
    ]
  },
  "patch_diff": {
    "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc": [
      "File: src/http/RegisteredHeaders.cc -> src/http/RegisteredHeaders.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: const HeaderTableRecord&",
      "38: HeaderLookupTable_t::lookup (const char *buf, const std::size_t len) const {",
      "39:     const HeaderTableRecord *r = HttpHeaderHashTable::lookup(buf, len);",
      "41:         return BadHdr;",
      "42:     return *r;",
      "43: }",
      "",
      "[Removed Lines]",
      "40:     if (!r)",
      "",
      "[Added Lines]",
      "40:     if (!r || r->id == Http::HdrType::OTHER)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1c37c9e7b30d0efb5e5ccf8200f2a646b9c36f8",
      "candidate_info": {
        "commit_hash": "b1c37c9e7b30d0efb5e5ccf8200f2a646b9c36f8",
        "repo": "squid-cache/squid",
        "commit_url": "https://github.com/squid-cache/squid/commit/b1c37c9e7b30d0efb5e5ccf8200f2a646b9c36f8",
        "files": [
          "src/http/RegisteredHeaders.cc"
        ],
        "message": "Limit HeaderLookupTable_t::lookup() to BadHdr and specific IDs",
        "before_after_code_files": [
          "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
          ],
          "candidate": [
            "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc": [
          "File: src/http/RegisteredHeaders.cc -> src/http/RegisteredHeaders.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: const HeaderTableRecord&",
          "38: HeaderLookupTable_t::lookup (const char *buf, const std::size_t len) const {",
          "39:     const HeaderTableRecord *r = HttpHeaderHashTable::lookup(buf, len);",
          "41:         return BadHdr;",
          "42:     return *r;",
          "43: }",
          "",
          "[Removed Lines]",
          "40:     if (!r)",
          "",
          "[Added Lines]",
          "40:     if (!r || r->id == Http::HdrType::OTHER)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d09b34de2575af3bab4b34c775f93acb7270b4c3",
      "candidate_info": {
        "commit_hash": "d09b34de2575af3bab4b34c775f93acb7270b4c3",
        "repo": "squid-cache/squid",
        "commit_url": "https://github.com/squid-cache/squid/commit/d09b34de2575af3bab4b34c775f93acb7270b4c3",
        "files": [
          "src/http/RegisteredHeaders.cc"
        ],
        "message": "Limit HeaderLookupTable_t::lookup() to BadHdr and specific IDs",
        "before_after_code_files": [
          "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
          ],
          "candidate": [
            "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/http/RegisteredHeaders.cc||src/http/RegisteredHeaders.cc": [
          "File: src/http/RegisteredHeaders.cc -> src/http/RegisteredHeaders.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: const HeaderTableRecord&",
          "38: HeaderLookupTable_t::lookup (const char *buf, const std::size_t len) const {",
          "39:     const HeaderTableRecord *r = HttpHeaderHashTable::lookup(buf, len);",
          "41:         return BadHdr;",
          "42:     return *r;",
          "43: }",
          "",
          "[Removed Lines]",
          "40:     if (!r)",
          "",
          "[Added Lines]",
          "40:     if (!r || r->id == Http::HdrType::OTHER)",
          "",
          "---------------"
        ]
      }
    }
  ]
}