{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71f86eedeb29d1933edbc9b27f40ce5cbba2f4a9",
      "candidate_info": {
        "commit_hash": "71f86eedeb29d1933edbc9b27f40ce5cbba2f4a9",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/71f86eedeb29d1933edbc9b27f40ce5cbba2f4a9",
        "files": [
          "Lib/logging/config.py",
          "Lib/test/test_logging.py"
        ],
        "message": "[3.13] gh-119819: Update logging configuration to support joinable multiproc\u2026 (GH-120090) (GH-120093)\n\n(cherry picked from commit 983efcf15b2503fe0c05d5e03762385967962b33)",
        "before_after_code_files": [
          "Lib/logging/config.py||Lib/logging/config.py",
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/logging/config.py||Lib/logging/config.py": [
          "File: Lib/logging/config.py -> Lib/logging/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:                     from multiprocessing.queues import Queue as MPQueue",
          "784:                     from multiprocessing import Manager as MM",
          "785:                     proxy_queue = MM().Queue()",
          "786:                     qspec = config['queue']",
          "788:                         if isinstance(qspec, str):",
          "789:                             q = self.resolve(qspec)",
          "790:                             if not callable(q):",
          "",
          "[Removed Lines]",
          "787:                     if not isinstance(qspec, (queue.Queue, MPQueue, type(proxy_queue))):",
          "",
          "[Added Lines]",
          "786:                     proxy_joinable_queue = MM().JoinableQueue()",
          "788:                     if not isinstance(qspec, (queue.Queue, MPQueue,",
          "789:                                       type(proxy_queue), type(proxy_joinable_queue))):",
          "",
          "---------------"
        ],
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3929:     def test_multiprocessing_queues(self):",
          "3930:         # See gh-119819",
          "3932:         cd = copy.deepcopy(self.config_queue_handler)",
          "3933:         from multiprocessing import Queue as MQ, Manager as MM",
          "3934:         q1 = MQ()  # this can't be pickled",
          "3935:         q2 = MM().Queue()  # a proxy queue for use when pickling is needed",
          "3937:             fn = make_temp_file('.log', 'test_logging-cmpqh-')",
          "3938:             cd['handlers']['h1']['filename'] = fn",
          "3939:             cd['handlers']['ah']['queue'] = qspec",
          "",
          "[Removed Lines]",
          "3931:         import_helper.import_module('_multiprocessing')  # will skip test if it's not available",
          "3936:         for qspec in (q1, q2):",
          "",
          "[Added Lines]",
          "3932:         # will skip test if it's not available",
          "3933:         import_helper.import_module('_multiprocessing')",
          "3939:         q3 = MM().JoinableQueue()  # a joinable proxy queue",
          "3940:         for qspec in (q1, q2, q3):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f5ce42f3418dfcc37232390ba89c33b9c9ffb13",
      "candidate_info": {
        "commit_hash": "8f5ce42f3418dfcc37232390ba89c33b9c9ffb13",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8f5ce42f3418dfcc37232390ba89c33b9c9ffb13",
        "files": [
          "Doc/library/ipaddress.rst",
          "Lib/ipaddress.py"
        ],
        "message": "[3.13] gh-120128: fix description of argument to ipaddress.collapse_addresses() (GH-120131) (#120135)\n\ngh-120128: fix description of argument to ipaddress.collapse_addresses() (GH-120131)\n\nThe argument to collapse_addresses() is now described as an *iterable*\n(rather than *iterator*).\n(cherry picked from commit f878d46e5614f08a9302fcb6fc611ef49e9acf2f)\n\nCo-authored-by: Jan Kaliszewski <zuo@kaliszewski.net>",
        "before_after_code_files": [
          "Lib/ipaddress.py||Lib/ipaddress.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/ipaddress.py||Lib/ipaddress.py": [
          "File: Lib/ipaddress.py -> Lib/ipaddress.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:                            [IPv4Network('192.0.2.0/24')]",
          "312:     Args:",
          "315:     Returns:",
          "316:         An iterator of the collapsed IPv(4|6)Network objects.",
          "",
          "[Removed Lines]",
          "313:         addresses: An iterator of IPv4Network or IPv6Network objects.",
          "",
          "[Added Lines]",
          "313:         addresses: An iterable of IPv4Network or IPv6Network objects.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "009618f1125838af3c4afc772f2593637766fd45",
      "candidate_info": {
        "commit_hash": "009618f1125838af3c4afc772f2593637766fd45",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/009618f1125838af3c4afc772f2593637766fd45",
        "files": [
          "Lib/_pydatetime.py",
          "Lib/test/datetimetester.py",
          "Misc/NEWS.d/next/Library/2024-06-21-06-37-46.gh-issue-120713.WBbQx4.rst",
          "Modules/_datetimemodule.c",
          "configure",
          "configure.ac",
          "pyconfig.h.in"
        ],
        "message": "[3.13] gh-120713: Normalize year with century for datetime.strftime (GH-120820) (GH-121144)\n\n(cherry picked from commit 6d34938dc8163f4a4bcc68069a1645a7ab76e935)\n\nCo-authored-by: blhsing <blhsing@gmail.com>",
        "before_after_code_files": [
          "Lib/_pydatetime.py||Lib/_pydatetime.py",
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c",
          "configure.ac||configure.ac",
          "pyconfig.h.in||pyconfig.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pydatetime.py||Lib/_pydatetime.py": [
          "File: Lib/_pydatetime.py -> Lib/_pydatetime.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:                 s += '.%06d' % ss.microseconds",
          "205:     return s",
          "207: # Correctly substitute for %z and %Z escapes in strftime formats.",
          "208: def _wrap_strftime(object, format, timetuple):",
          "209:     # Don't call utcoffset() or tzname() unless actually needed.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: _normalize_century = None",
          "208: def _need_normalize_century():",
          "209:     global _normalize_century",
          "210:     if _normalize_century is None:",
          "211:         try:",
          "212:             _normalize_century = (",
          "213:                 _time.strftime(\"%Y\", (99, 1, 1, 0, 0, 0, 0, 1, 0)) != \"0099\")",
          "214:         except ValueError:",
          "215:             _normalize_century = True",
          "216:     return _normalize_century",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:                                 # strftime is going to have at this: escape %",
          "262:                                 Zreplace = s.replace('%', '%%')",
          "263:                     newformat.append(Zreplace)",
          "264:                 else:",
          "265:                     push('%')",
          "266:                     push(ch)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:                 elif ch in 'YG' and object.year < 1000 and _need_normalize_century():",
          "276:                     # Note that datetime(1000, 1, 1).strftime('%G') == '1000' so",
          "277:                     # year 1000 for %G can go on the fast path.",
          "278:                     if ch == 'G':",
          "279:                         year = int(_time.strftime(\"%G\", timetuple))",
          "280:                     else:",
          "281:                         year = object.year",
          "282:                     push('{:04}'.format(year))",
          "",
          "---------------"
        ],
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1716:         self.assertTrue(self.theclass.max)",
          "1718:     def test_strftime_y2k(self):",
          "1732:     def test_replace(self):",
          "1733:         cls = self.theclass",
          "",
          "[Removed Lines]",
          "1719:         for y in (1, 49, 70, 99, 100, 999, 1000, 1970):",
          "1720:             d = self.theclass(y, 1, 1)",
          "1721:             # Issue 13305:  For years < 1000, the value is not always",
          "1722:             # padded to 4 digits across platforms.  The C standard",
          "1723:             # assumes year >= 1900, so it does not specify the number",
          "1724:             # of digits.",
          "1725:             if d.strftime(\"%Y\") != '%04d' % y:",
          "1726:                 # Year 42 returns '42', not padded",
          "1727:                 self.assertEqual(d.strftime(\"%Y\"), '%d' % y)",
          "1728:                 # '0042' is obtained anyway",
          "1729:                 if support.has_strftime_extensions:",
          "1730:                     self.assertEqual(d.strftime(\"%4Y\"), '%04d' % y)",
          "",
          "[Added Lines]",
          "1719:         # Test that years less than 1000 are 0-padded; note that the beginning",
          "1720:         # of an ISO 8601 year may fall in an ISO week of the year before, and",
          "1721:         # therefore needs an offset of -1 when formatting with '%G'.",
          "1722:         dataset = (",
          "1723:             (1, 0),",
          "1724:             (49, -1),",
          "1725:             (70, 0),",
          "1726:             (99, 0),",
          "1727:             (100, -1),",
          "1728:             (999, 0),",
          "1729:             (1000, 0),",
          "1730:             (1970, 0),",
          "1731:         )",
          "1732:         for year, offset in dataset:",
          "1733:             for specifier in 'YG':",
          "1734:                 with self.subTest(year=year, specifier=specifier):",
          "1735:                     d = self.theclass(year, 1, 1)",
          "1736:                     if specifier == 'G':",
          "1737:                         year += offset",
          "1738:                     self.assertEqual(d.strftime(f\"%{specifier}\"), f\"{year:04d}\")",
          "",
          "---------------"
        ],
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1851:     assert(object && format && timetuple);",
          "1852:     assert(PyUnicode_Check(format));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1851: #ifdef Py_NORMALIZE_CENTURY",
          "1853:     char buf[SIZEOF_LONG*5/2+2];",
          "1854: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1855:     if (!pin)",
          "1856:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1863:     PyObject *strftime = _PyImport_GetModuleAttrString(\"time\", \"strftime\");",
          "1864:     if (strftime == NULL) {",
          "1865:         goto Done;",
          "1866:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1936:             ptoappend = PyBytes_AS_STRING(freplacement);",
          "1937:             ntoappend = PyBytes_GET_SIZE(freplacement);",
          "1938:         }",
          "1939:         else {",
          "1941:             ptoappend = pin - 2;",
          "1942:             ntoappend = 2;",
          "1943:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1949: #ifdef Py_NORMALIZE_CENTURY",
          "1950:         else if (ch == 'Y' || ch == 'G') {",
          "1952:             PyObject *item = PyTuple_GET_ITEM(timetuple, 0);",
          "1953:             long year_long = PyLong_AsLong(item);",
          "1955:             if (year_long == -1 && PyErr_Occurred()) {",
          "1956:                 goto Done;",
          "1957:             }",
          "1960:             if (year_long >= 1000) {",
          "1961:                 goto PassThrough;",
          "1962:             }",
          "1963:             if (ch == 'G') {",
          "1964:                 PyObject *year_str = PyObject_CallFunction(strftime, \"sO\",",
          "1965:                                                            \"%G\", timetuple);",
          "1966:                 if (year_str == NULL) {",
          "1967:                     goto Done;",
          "1968:                 }",
          "1969:                 PyObject *year = PyNumber_Long(year_str);",
          "1970:                 Py_DECREF(year_str);",
          "1971:                 if (year == NULL) {",
          "1972:                     goto Done;",
          "1973:                 }",
          "1974:                 year_long = PyLong_AsLong(year);",
          "1975:                 Py_DECREF(year);",
          "1976:                 if (year_long == -1 && PyErr_Occurred()) {",
          "1977:                     goto Done;",
          "1978:                 }",
          "1979:             }",
          "1981:             ntoappend = PyOS_snprintf(buf, sizeof(buf), \"%04ld\", year_long);",
          "1982:             ptoappend = buf;",
          "1983:         }",
          "1984: #endif",
          "1987: #ifdef Py_NORMALIZE_CENTURY",
          "1988:  PassThrough:",
          "1989: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1969:         goto Done;",
          "1970:     {",
          "1971:         PyObject *format;",
          "1976:         format = PyUnicode_FromString(PyBytes_AS_STRING(newfmt));",
          "1977:         if (format != NULL) {",
          "1978:             result = PyObject_CallFunctionObjArgs(strftime,",
          "1979:                                                    format, timetuple, NULL);",
          "1980:             Py_DECREF(format);",
          "1981:         }",
          "1983:     }",
          "1984:  Done:",
          "1985:     Py_XDECREF(freplacement);",
          "",
          "[Removed Lines]",
          "1972:         PyObject *strftime = _PyImport_GetModuleAttrString(\"time\", \"strftime\");",
          "1974:         if (strftime == NULL)",
          "1975:             goto Done;",
          "1982:         Py_DECREF(strftime);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1987:     Py_XDECREF(colonzreplacement);",
          "1988:     Py_XDECREF(Zreplacement);",
          "1989:     Py_XDECREF(newfmt);",
          "1990:     return result;",
          "1991: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2035:     Py_XDECREF(strftime);",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "6567:   [Define if you have struct stat.st_mtimensec])",
          "6568: fi",
          "6570: dnl check for ncurses/ncursesw and panel/panelw",
          "6571: dnl NOTE: old curses is not detected.",
          "6572: dnl have_curses=[no, ncursesw, ncurses]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6570: AC_CACHE_CHECK([whether year with century should be normalized for strftime], [ac_cv_normalize_century], [",
          "6571: AC_RUN_IFELSE([AC_LANG_SOURCE([[",
          "6572: #include <time.h>",
          "6573: #include <string.h>",
          "6575: int main(void)",
          "6576: {",
          "6577:   char year[5];",
          "6578:   struct tm date = {",
          "6579:     .tm_year = -1801,",
          "6580:     .tm_mon = 0,",
          "6581:     .tm_mday = 1",
          "6582:   };",
          "6583:   if (strftime(year, sizeof(year), \"%Y\", &date) && !strcmp(year, \"0099\")) {",
          "6584:     return 1;",
          "6585:   }",
          "6586:   return 0;",
          "6587: }",
          "6588: ]])],",
          "6589: [ac_cv_normalize_century=yes],",
          "6590: [ac_cv_normalize_century=no],",
          "6591: [ac_cv_normalize_century=yes])])",
          "6592: if test \"$ac_cv_normalize_century\" = yes",
          "6593: then",
          "6594:   AC_DEFINE([Py_NORMALIZE_CENTURY], [1],",
          "6595:   [Define if year with century should be normalized for strftime.])",
          "6596: fi",
          "",
          "---------------"
        ],
        "pyconfig.h.in||pyconfig.h.in": [
          "File: pyconfig.h.in -> pyconfig.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1660: #undef Py_HASH_ALGORITHM",
          "1663: #undef Py_RL_STARTUP_HOOK_TAKES_ARGS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1663: #undef Py_NORMALIZE_CENTURY",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcb8030c535343973c963814ad7b1ffe60751453",
      "candidate_info": {
        "commit_hash": "dcb8030c535343973c963814ad7b1ffe60751453",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/dcb8030c535343973c963814ad7b1ffe60751453",
        "files": [
          "Objects/listobject.c"
        ],
        "message": "[3.13] gh-119053: Implement the fast path for list.__getitem__ (gh-119112) (gh-119309)\n\ngh-119053: Implement the fast path for list.__getitem__ (gh-119112)\n(cherry picked from commit ab4263a82abe8b684d8ad1edf7c7c6ec286ff756)\n\nCo-authored-by: Donghee Na <donghee.na@python.org>",
        "before_after_code_files": [
          "Objects/listobject.c||Objects/listobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/listobject.c||Objects/listobject.c": [
          "File: Objects/listobject.c -> Objects/listobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     if (!valid_index(idx, size)) {",
          "352:         goto exit;",
          "353:     }",
          "354:     item = Py_NewRef(self->ob_item[idx]);",
          "355: exit:",
          "356:     Py_END_CRITICAL_SECTION();",
          "357:     return item;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354: #ifdef Py_GIL_DISABLED",
          "355:     item = _Py_NewRefWithLock(self->ob_item[idx]);",
          "356: #else",
          "358: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "656:         return NULL;",
          "657:     }",
          "658:     PyObject *item;",
          "660: #ifdef Py_GIL_DISABLED",
          "663:     }",
          "665:     item = Py_NewRef(a->ob_item[i]);",
          "667:     return item;",
          "668: }",
          "",
          "[Removed Lines]",
          "659:     Py_BEGIN_CRITICAL_SECTION(a);",
          "661:     if (!_Py_IsOwnedByCurrentThread((PyObject *)a) && !_PyObject_GC_IS_SHARED(a)) {",
          "662:         _PyObject_GC_SET_SHARED(a);",
          "664: #endif",
          "666:     Py_END_CRITICAL_SECTION();",
          "",
          "[Added Lines]",
          "664:     item = list_get_item_ref(a, i);",
          "665:     if (item == NULL) {",
          "666:         PyErr_SetObject(PyExc_IndexError, &_Py_STR(list_err));",
          "667:         return NULL;",
          "669: #else",
          "671: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2dd07fd899da50a0f25f0d586b8615a05b462244",
      "candidate_info": {
        "commit_hash": "2dd07fd899da50a0f25f0d586b8615a05b462244",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/2dd07fd899da50a0f25f0d586b8615a05b462244",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-06-11-12-47-54.gh-issue-120346.hhn_6X.rst",
          "Modules/main.c"
        ],
        "message": "[3.13] gh-120346: Respect PYTHON_BASIC_REPL when running in interactive inspect mode (GH-120349) (#120351)\n\n(cherry picked from commit ec3af291fe2f680ab277edde7113e2762754f4aa)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>",
        "before_after_code_files": [
          "Modules/main.c||Modules/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Modules/main.c||Modules/main.c": [
          "File: Modules/main.c -> Modules/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:         return;",
          "543:     }",
          "546:         PyCompilerFlags cf = _PyCompilerFlags_INIT;",
          "547:         int run = PyRun_AnyFileExFlags(stdin, \"<stdin>\", 0, &cf);",
          "",
          "[Removed Lines]",
          "545:     if (!isatty(fileno(stdin))) {",
          "",
          "[Added Lines]",
          "545:     if (!isatty(fileno(stdin))",
          "546:         || _Py_GetEnv(config->use_environment, \"PYTHON_BASIC_REPL\")) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}