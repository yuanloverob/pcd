{
  "cve_id": "CVE-2024-0217",
  "cve_desc": "A use-after-free flaw was found in PackageKitd. In some conditions, the order of cleanup mechanics for a transaction could be impacted. As a result, some memory access could occur on memory regions that were previously freed. Once freed, a memory region can be reused for other allocations and any previously stored data in this memory region is considered lost.",
  "repo": "PackageKit/PackageKit",
  "patch_hash": "64278c9127e3333342b56ead99556161f7e86f79",
  "patch_info": {
    "commit_hash": "64278c9127e3333342b56ead99556161f7e86f79",
    "repo": "PackageKit/PackageKit",
    "commit_url": "https://github.com/PackageKit/PackageKit/commit/64278c9127e3333342b56ead99556161f7e86f79",
    "files": [
      "src/pk-transaction.c"
    ],
    "message": "pk-transaction: Check that Finished signal is emitted at most once\n\nWhile I haven\u2019t seen it being emitted more than once, the transaction\ncode is quite complex, and it would make things more robust to add a\ncheck to verify this.\n\nSigned-off-by: Philip Withnall <pwithnall@endlessos.org>",
    "before_after_code_files": [
      "src/pk-transaction.c||src/pk-transaction.c"
    ]
  },
  "patch_diff": {
    "src/pk-transaction.c||src/pk-transaction.c": [
      "File: src/pk-transaction.c -> src/pk-transaction.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:  guint    speed;",
      "91:  guint    download_size_remaining;",
      "92:  gboolean   finished;",
      "93:  gboolean   allow_cancel;",
      "94:  gboolean   waiting_for_auth;",
      "95:  gboolean   emit_eula_required;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93:  gboolean   emitted_finished;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "510:          PkExitEnum exit_enum,",
      "511:          guint time_ms)",
      "512: {",
      "513:  g_debug (\"emitting finished '%s', %i\",",
      "514:    pk_exit_enum_to_string (exit_enum),",
      "515:    time_ms);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:  g_assert (!transaction->priv->emitted_finished);",
      "515:  transaction->priv->emitted_finished = TRUE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44215db95d9cfda23045d9a9b97175519f473eb2",
      "candidate_info": {
        "commit_hash": "44215db95d9cfda23045d9a9b97175519f473eb2",
        "repo": "PackageKit/PackageKit",
        "commit_url": "https://github.com/PackageKit/PackageKit/commit/44215db95d9cfda23045d9a9b97175519f473eb2",
        "files": [
          "lib/packagekit-glib2/pk-client.c"
        ],
        "message": "pk-client: Signal a transaction as finished if it disappears off the bus\n\nThe client code already does this if the `Finished` signal is received,\nor if the packagekitd process completely disappears off the bus.\nHowever, if the transaction is destroyed by the daemon without emitting\n`Finished`, it\u2019s possible for the client proxy for it to never complete.\n\nFix that by calling `pk_client_state_finish()` in a few additional\nlocations.\n\nSigned-off-by: Philip Withnall <pwithnall@endlessos.org>",
        "before_after_code_files": [
          "lib/packagekit-glib2/pk-client.c||lib/packagekit-glib2/pk-client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/PackageKit/PackageKit/pull/612"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/packagekit-glib2/pk-client.c||lib/packagekit-glib2/pk-client.c": [
          "File: lib/packagekit-glib2/pk-client.c -> lib/packagekit-glib2/pk-client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:  if (state->proxy == NULL) {",
          "352:   g_debug (\"Cancelled, but no proxy, not sure what to do here\");",
          "353:   return;",
          "354:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   g_autoptr(GError) local_error = NULL;",
          "355:   local_error = g_error_new_literal (PK_CLIENT_ERROR, PK_CLIENT_ERROR_FAILED,",
          "356:          \"PackageKit transaction disappeared\");",
          "357:   pk_client_state_finish (state, local_error);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1582:   }",
          "1583:   return;",
          "1584:  }",
          "1586:   return;",
          "1587: }",
          "1589: static void",
          "",
          "[Removed Lines]",
          "1585:  if (g_strcmp0 (signal_name, \"Destroy\") == 0)",
          "",
          "[Added Lines]",
          "1590:  if (g_strcmp0 (signal_name, \"Destroy\") == 0) {",
          "1591:   g_autoptr(GError) local_error = NULL;",
          "1593:   if (state->waiting_for_finished)",
          "1594:    local_error = g_error_new_literal (PK_CLIENT_ERROR, PK_CLIENT_ERROR_FAILED,",
          "1595:           \"PackageKit transaction disappeared\");",
          "1597:   pk_client_state_finish (state, local_error);",
          "1599:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "409ba85b00f02bfd66589b457a148cce82ad2a34",
      "candidate_info": {
        "commit_hash": "409ba85b00f02bfd66589b457a148cce82ad2a34",
        "repo": "PackageKit/PackageKit",
        "commit_url": "https://github.com/PackageKit/PackageKit/commit/409ba85b00f02bfd66589b457a148cce82ad2a34",
        "files": [
          "src/pk-scheduler.c",
          "src/pk-transaction.c"
        ],
        "message": "pk-transaction: Check that Finished signal is emitted at least once\n\nIt feels like transactions should always emit `Finished` before being\nremoved from the bus, either signalling success or containing error\ndetails. Emitting a signal like this allows client code to track\ntransactions properly.\n\nA lot of the code paths in `PkTransaction` ensure that `Finished` is\nemitted. However, there is at least one code path where it\u2019s not, and\nthat was causing the assertion in this commit to fail:\n```\n4  0x00007ffff77408ae in g_assertion_message_expr () at /lib64/libglib-2.0.so.0\n5  0x000000000044f9e7 in pk_transaction_dispose (object=0x62500010af80)\n   at ../../source/PackageKit/src/pk-transaction.c:5512\n6  0x00007ffff7eeb8d4 in g_object_unref () at /lib64/libgobject-2.0.so.0\n7  0x00000000004acb4b in pk_scheduler_item_free (item=0x607000311210)\n   at ../../source/PackageKit/src/pk-scheduler.c:201\n8  0x00000000004ad140 in pk_scheduler_remove_internal\n   (scheduler=0x61d000004120, item=0x607000311210)\n   at ../../source/PackageKit/src/pk-scheduler.c:233\n9  0x00000000004b0083 in pk_scheduler_no_commit_cb (user_data=0x607000311210)\n   at ../../source/PackageKit/src/pk-scheduler.c:590\n```\n\nThat\u2019s the code path to handle a transaction which is created, but which\nthen isn\u2019t used by the client before a timeout triggers.\n\nThe documentation isn\u2019t clear on when `Finished` should be emitted.\nThere\u2019s also the `Destroy` signal which *is* always emitted before the\ntransaction is removed from the bus.\n\nOn the basis that every other code path emits `Finished`, this commit\nalso makes the `pk_scheduler_no_commit_cb()` path emit `Finished` too.\n\nNow clients can use `Finished` and bus name notifications to reliably track\na transaction\u2019s lifetime.\n\nSigned-off-by: Philip Withnall <pwithnall@endlessos.org>",
        "before_after_code_files": [
          "src/pk-scheduler.c||src/pk-scheduler.c",
          "src/pk-transaction.c||src/pk-transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/PackageKit/PackageKit/pull/612"
        ],
        "olp_code_files": {
          "patch": [
            "src/pk-transaction.c||src/pk-transaction.c"
          ],
          "candidate": [
            "src/pk-transaction.c||src/pk-transaction.c"
          ]
        }
      },
      "candidate_diff": {
        "src/pk-scheduler.c||src/pk-scheduler.c": [
          "File: src/pk-scheduler.c -> src/pk-scheduler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585: {",
          "586:  PkSchedulerItem *item = (PkSchedulerItem *) user_data;",
          "587:  g_warning (\"ID %s was not committed in time!\", item->tid);",
          "588:  pk_scheduler_remove_internal (item->scheduler, item);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:  pk_transaction_cancel_bg (item->transaction);",
          "",
          "---------------"
        ],
        "src/pk-transaction.c||src/pk-transaction.c": [
          "File: src/pk-transaction.c -> src/pk-transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5508:  }",
          "5510:  if (transaction->priv->registration_id > 0) {",
          "5511:   g_dbus_connection_unregister_object (transaction->priv->connection,",
          "5512:            transaction->priv->registration_id);",
          "5513:   transaction->priv->registration_id = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5512:   g_assert (transaction->priv->emitted_finished);",
          "",
          "---------------"
        ]
      }
    }
  ]
}