{
  "cve_id": "CVE-2019-15692",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow. Vulnerability could be triggered from CopyRectDecoder due to incorrect value checks. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
  "patch_info": {
    "commit_hash": "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/996356b6c65ca165ee1ea46a571c32a1dc3c3821",
    "files": [
      "common/rfb/PixelBuffer.cxx"
    ],
    "message": "Restrict PixelBuffer dimensions to safe values\n\nWe do a lot of calculations based on pixel coordinates and we need\nto make sure they do not overflow. Restrict the maximum dimensions\nwe support rather than try to switch over all calculations to use\n64 bit integers.\n\nThis prevents attackers from from injecting code by specifying a\nhuge framebuffer size and relying on the values overflowing to\naccess invalid areas of the heap.\n\nThis primarily affects the client which gets both the screen\ndimensions and the pixel contents from the remote side. But the\nserver might also be affected as a client can adjust the screen\ndimensions, as can applications inside the session.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
    "before_after_code_files": [
      "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx"
    ]
  },
  "patch_diff": {
    "common/rfb/PixelBuffer.cxx||common/rfb/PixelBuffer.cxx": [
      "File: common/rfb/PixelBuffer.cxx -> common/rfb/PixelBuffer.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: static LogWriter vlog(\"PixelBuffer\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: const int maxPixelBufferWidth = 16384;",
      "39: const int maxPixelBufferHeight = 16384;",
      "40: const int maxPixelBufferStride = 16384;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "109: void PixelBuffer::setSize(int width, int height)",
      "110: {",
      "111:   width_ = width;",
      "112:   height_ = height;",
      "113: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:   if ((width < 0) || (width > maxPixelBufferWidth))",
      "120:     throw rfb::Exception(\"Invalid PixelBuffer width of %d pixels requested\", width);",
      "121:   if ((height < 0) || (height > maxPixelBufferHeight))",
      "122:     throw rfb::Exception(\"Invalid PixelBuffer height of %d pixels requested\", height);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "340: void FullFramePixelBuffer::setBuffer(int width, int height,",
      "341:                                      rdr::U8* data_, int stride_)",
      "342: {",
      "343:   ModifiablePixelBuffer::setSize(width, height);",
      "344:   stride = stride_;",
      "345:   data = data_;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "356:   if ((width < 0) || (width > maxPixelBufferWidth))",
      "357:     throw rfb::Exception(\"Invalid PixelBuffer width of %d pixels requested\", width);",
      "358:   if ((height < 0) || (height > maxPixelBufferHeight))",
      "359:     throw rfb::Exception(\"Invalid PixelBuffer height of %d pixels requested\", height);",
      "360:   if ((stride_ < 0) || (stride_ > maxPixelBufferStride) || (stride_ < width))",
      "361:     throw rfb::Exception(\"Invalid PixelBuffer stride of %d pixels requested\", stride_);",
      "362:   if ((width != 0) && (height != 0) && (data_ == NULL))",
      "363:     throw rfb::Exception(\"PixelBuffer requested without a valid memory area\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
      "candidate_info": {
        "commit_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Fix depth sanity test in PixelFormat",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:     return false;",
          "681:   totalBits = bits(redMax) + bits(greenMax) + bits(blueMax);",
          "683:     return false;",
          "685:   if (((redMax << redShift) & (greenMax << greenShift)) != 0)",
          "",
          "[Removed Lines]",
          "682:   if (totalBits > bpp)",
          "",
          "[Added Lines]",
          "682:   if (totalBits > depth)",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);",
          "105:     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);",
          "109:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     doTest(true, 32, 16, false, true, 255, 255, 255, 0, 8, 16);",
          "",
          "---------------"
        ]
      }
    }
  ]
}