{
  "cve_id": "CVE-2022-45873",
  "cve_desc": "systemd 250 and 251 allows local users to achieve a systemd-coredump deadlock by triggering a crash that has a long backtrace. This occurs in parse_elf_object in shared/elf-util.c. The exploitation methodology is to crash a binary calling the same function recursively, and put it in a deeply nested directory to make its backtrace large enough to cause the deadlock. This must be done 16 times when MaxConnections=16 is set for the systemd/units/systemd-coredump.socket file.",
  "repo": "systemd/systemd",
  "patch_hash": "076b807be472630692c5348c60d0c2b7b28ad437",
  "patch_info": {
    "commit_hash": "076b807be472630692c5348c60d0c2b7b28ad437",
    "repo": "systemd/systemd",
    "commit_url": "https://github.com/systemd/systemd/commit/076b807be472630692c5348c60d0c2b7b28ad437",
    "files": [
      "src/shared/elf-util.c"
    ],
    "message": "coredump: avoid deadlock when passing processed backtrace data\n\nWe would deadlock when passing the data back from the forked-off process that\nwas doing backtrace generation back to the coredump parent. This is because we\nfork the child and wait for it to exit. The child tries to write too much data\nto the output pipe, and and after the first 64k blocks on the parent because\nthe pipe is full. The bug surfaced in Fedora because of a combination of four\nfactors:\n- 87707784c70dc9894ec613df0a6e75e732a362a3 was backported to v251.5, which\n  allowed coredump processing to be successful.\n- 1a0281a3ebf4f8c16d40aa9e63103f16cd23bb2a was NOT backported, so the output\n  was very verbose.\n- Fedora has the ELF package metadata available, so a lot of output can be\n  generated. Most other distros just don't have the information.\n- gnome-calendar crashes and has a bazillion modules and 69596 bytes of output\n  are generated for it.\n\nFixes https://bugzilla.redhat.com/show_bug.cgi?id=2135778.\n\nThe code is changed to try to write data opportunistically. If we get partial\ninformation, that is still logged. In is generally better to log partial\nbacktrace information than nothing at all.",
    "before_after_code_files": [
      "src/shared/elf-util.c||src/shared/elf-util.c"
    ]
  },
  "patch_diff": {
    "src/shared/elf-util.c||src/shared/elf-util.c": [
      "File: src/shared/elf-util.c -> src/shared/elf-util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #define THREADS_MAX 64",
      "31: #define ELF_PACKAGE_METADATA_ID 0xcafe1a7e",
      "33: static void *dw_dl = NULL;",
      "34: static void *elf_dl = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #define COREDUMP_PIPE_MAX (1024*1024U)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "759:                 return r;",
      "761:         if (ret) {",
      "763:                 if (r < 0)",
      "764:                         return r;",
      "765:         }",
      "767:         if (ret_package_metadata) {",
      "769:                 if (r < 0)",
      "770:                         return r;",
      "771:         }",
      "",
      "[Removed Lines]",
      "762:                 r = RET_NERRNO(pipe2(return_pipe, O_CLOEXEC));",
      "768:                 r = RET_NERRNO(pipe2(json_pipe, O_CLOEXEC));",
      "",
      "[Added Lines]",
      "765:                 r = RET_NERRNO(pipe2(return_pipe, O_CLOEXEC|O_NONBLOCK));",
      "771:                 r = RET_NERRNO(pipe2(json_pipe, O_CLOEXEC|O_NONBLOCK));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "809:                         goto child_fail;",
      "811:                 if (buf) {",
      "814:                                 goto child_fail;",
      "816:                         return_pipe[1] = safe_close(return_pipe[1]);",
      "",
      "[Removed Lines]",
      "812:                         r = loop_write(return_pipe[1], buf, strlen(buf), false);",
      "813:                         if (r < 0)",
      "",
      "[Added Lines]",
      "815:                         size_t len = strlen(buf);",
      "817:                         if (len > COREDUMP_PIPE_MAX) {",
      "820:                                 log_warning(\"Generated backtrace is %zu bytes (more than the limit of %u bytes), backtrace will be truncated.\",",
      "821:                                             len, COREDUMP_PIPE_MAX);",
      "822:                                 len = COREDUMP_PIPE_MAX;",
      "823:                         }",
      "827:                         (void) fcntl(return_pipe[1], F_SETPIPE_SZ, len);",
      "829:                         r = loop_write(return_pipe[1], buf, len, false);",
      "830:                         if (r == -EAGAIN)",
      "831:                                 log_warning(\"Write failed, backtrace will be truncated.\");",
      "832:                         else if (r < 0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "819:                 if (package_metadata) {",
      "820:                         _cleanup_fclose_ FILE *json_out = NULL;",
      "822:                         json_out = take_fdopen(&json_pipe[1], \"w\");",
      "823:                         if (!json_out) {",
      "824:                                 r = -errno;",
      "825:                                 goto child_fail;",
      "826:                         }",
      "829:                 }",
      "831:                 _exit(EXIT_SUCCESS);",
      "",
      "[Removed Lines]",
      "828:                         json_variant_dump(package_metadata, JSON_FORMAT_FLUSH, json_out, NULL);",
      "",
      "[Added Lines]",
      "843:                         (void) fcntl(json_pipe[1], F_SETPIPE_SZ, COREDUMP_PIPE_MAX);",
      "851:                         r = json_variant_dump(package_metadata, JSON_FORMAT_FLUSH, json_out, NULL);",
      "852:                         if (r < 0)",
      "853:                                 log_warning_errno(r, \"Failed to write JSON package metadata, ignoring: %m\");",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "861:                 r = json_parse_file(json_in, NULL, 0, &package_metadata, NULL, NULL);",
      "864:         }",
      "866:         if (ret)",
      "",
      "[Removed Lines]",
      "863:                         return r;",
      "",
      "[Added Lines]",
      "888:                         log_warning_errno(r, \"Failed to read or parse json metadata, ignoring: %m\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7922ead507e0d83e4ec72a8cbd2b67194766e58c",
      "candidate_info": {
        "commit_hash": "7922ead507e0d83e4ec72a8cbd2b67194766e58c",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/7922ead507e0d83e4ec72a8cbd2b67194766e58c",
        "files": [
          "src/shared/json.c",
          "src/shared/json.h"
        ],
        "message": "shared/json: allow json_variant_dump() to return an error",
        "before_after_code_files": [
          "src/shared/json.c||src/shared/json.c",
          "src/shared/json.h||src/shared/json.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/25055"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/shared/json.c||src/shared/json.c": [
          "File: src/shared/json.c -> src/shared/json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1785:         return (int) sz - 1;",
          "1786: }",
          "1789:         if (!v)",
          "1792:         if (!f)",
          "1793:                 f = stdout;",
          "",
          "[Removed Lines]",
          "1788: void json_variant_dump(JsonVariant *v, JsonFormatFlags flags, FILE *f, const char *prefix) {",
          "1790:                 return;",
          "",
          "[Added Lines]",
          "1788: int json_variant_dump(JsonVariant *v, JsonFormatFlags flags, FILE *f, const char *prefix) {",
          "1790:                 return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1815:         if (flags & JSON_FORMAT_FLUSH)",
          "1817: }",
          "1819: int json_variant_filter(JsonVariant **v, char **to_remove) {",
          "",
          "[Removed Lines]",
          "1816:                 fflush(f);",
          "",
          "[Added Lines]",
          "1816:                 return fflush_and_check(f);",
          "1817:         return 0;",
          "",
          "---------------"
        ],
        "src/shared/json.h||src/shared/json.h": [
          "File: src/shared/json.h -> src/shared/json.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: } JsonFormatFlags;",
          "199: int json_variant_format(JsonVariant *v, JsonFormatFlags flags, char **ret);",
          "202: int json_variant_filter(JsonVariant **v, char **to_remove);",
          "",
          "[Removed Lines]",
          "200: void json_variant_dump(JsonVariant *v, JsonFormatFlags flags, FILE *f, const char *prefix);",
          "",
          "[Added Lines]",
          "200: int json_variant_dump(JsonVariant *v, JsonFormatFlags flags, FILE *f, const char *prefix);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87a16eb8b54002a49f12944fc09ce45d0cbadf45",
      "candidate_info": {
        "commit_hash": "87a16eb8b54002a49f12944fc09ce45d0cbadf45",
        "repo": "systemd/systemd",
        "commit_url": "https://github.com/systemd/systemd/commit/87a16eb8b54002a49f12944fc09ce45d0cbadf45",
        "files": [
          "src/shared/elf-util.c",
          "src/shared/json.c",
          "src/test/test-json.c"
        ],
        "message": "shared/json: use different return code for empty input\n\nIt is useful to distinguish if json_parse_file() got no input or invalid input.\nUse different return codes for the two cases.",
        "before_after_code_files": [
          "src/shared/elf-util.c||src/shared/elf-util.c",
          "src/shared/json.c||src/shared/json.c",
          "src/test/test-json.c||src/test/test-json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/systemd/systemd/pull/25055"
        ],
        "olp_code_files": {
          "patch": [
            "src/shared/elf-util.c||src/shared/elf-util.c"
          ],
          "candidate": [
            "src/shared/elf-util.c||src/shared/elf-util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/shared/elf-util.c||src/shared/elf-util.c": [
          "File: src/shared/elf-util.c -> src/shared/elf-util.c"
        ],
        "src/shared/json.c||src/shared/json.c": [
          "File: src/shared/json.c -> src/shared/json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3187: int json_parse_file_at(FILE *f, int dir_fd, const char *path, JsonParseFlags flags, JsonVariant **ret, unsigned *ret_line, unsigned *ret_column) {",
          "3188:         _cleanup_(json_source_unrefp) JsonSource *source = NULL;",
          "3189:         _cleanup_free_ char *text = NULL;",
          "3191:         int r;",
          "3193:         if (f)",
          "",
          "[Removed Lines]",
          "3190:         const char *p;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3199:         if (r < 0)",
          "3200:                 return r;",
          "3202:         if (path) {",
          "3203:                 source = json_source_new(path);",
          "3204:                 if (!source)",
          "3205:                         return -ENOMEM;",
          "3206:         }",
          "3209:         return json_parse_internal(&p, source, flags, ret, ret_line, ret_column, false);",
          "3210: }",
          "",
          "[Removed Lines]",
          "3208:         p = text;",
          "",
          "[Added Lines]",
          "3201:         if (isempty(text))",
          "3202:                 return -ENODATA;",
          "3210:         const char *p = text;",
          "",
          "---------------"
        ],
        "src/test/test-json.c||src/test/test-json.c": [
          "File: src/test/test-json.c -> src/test/test-json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:         assert_se(json_variant_equal(a, b));",
          "345: }",
          "347: TEST(source) {",
          "348:         static const char data[] =",
          "349:                 \"\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: TEST(json_parse_file_empty) {",
          "348:         _cleanup_fclose_ FILE *f = NULL;",
          "349:         _cleanup_(json_variant_unrefp) JsonVariant *v = NULL;",
          "351:         assert_se(fopen_unlocked(\"/dev/null\", \"re\", &f) >= 0);",
          "352:         assert_se(json_parse_file(f, \"waldo\", 0, &v, NULL, NULL) == -ENODATA);",
          "353:         assert_se(v == NULL);",
          "354: }",
          "356: TEST(json_parse_file_invalid) {",
          "357:         _cleanup_fclose_ FILE *f = NULL;",
          "358:         _cleanup_(json_variant_unrefp) JsonVariant *v = NULL;",
          "360:         assert_se(f = fmemopen_unlocked((void*) \"kookoo\", 6, \"r\"));",
          "361:         assert_se(json_parse_file(f, \"waldo\", 0, &v, NULL, NULL) == -EINVAL);",
          "362:         assert_se(v == NULL);",
          "363: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}