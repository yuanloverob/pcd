{
  "cve_id": "CVE-2020-11088",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_NegotiateMessage. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
  "patch_info": {
    "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed oob read in ntlm_read_NegotiateMessage",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "219:   return SEC_E_INVALID_TOKEN;",
      "220:  }",
      "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "222:  if (Stream_GetRemainingLength(s) < 4)",
      "223:  {",
      "224:   Stream_Free(s, FALSE);",
      "225:   return SEC_E_INVALID_TOKEN;",
      "226:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "daf4e1132477a4dab8ce9797422406c090a3b103",
      "candidate_info": {
        "commit_hash": "daf4e1132477a4dab8ce9797422406c090a3b103",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/daf4e1132477a4dab8ce9797422406c090a3b103",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Silence valgrind in rdp_read_header\n\nIf a disconnect message is received, we returned success but did\nnot initialize the return arguments.",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c"
        ]
      }
    },
    {
      "candidate_hash": "feb7d4f362b4c65af783cf09cd0d578d5485f245",
      "candidate_info": {
        "commit_hash": "feb7d4f362b4c65af783cf09cd0d578d5485f245",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/feb7d4f362b4c65af783cf09cd0d578d5485f245",
        "files": [
          "channels/smartcard/client/smartcard_operations.c"
        ],
        "message": "Changed smartcard no reader log message level to info",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c": [
          "File: channels/smartcard/client/smartcard_operations.c -> channels/smartcard/client/smartcard_operations.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:    case SCARD_E_TIMEOUT:",
          "50:     level = WLOG_DEBUG;",
          "51:     break;",
          "52:    default:",
          "53:     break;",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:    case SCARD_E_NO_READERS_AVAILABLE:",
          "53:     level = WLOG_INFO;",
          "54:     break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
      "candidate_info": {
        "commit_hash": "b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
        "files": [
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fixed oob read in cliprdr_read_format_list",
        "before_after_code_files": [
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  int formatNameLength;",
          "401:  char* szFormatName;",
          "402:  WCHAR* wszFormatName;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "405:  UINT error = CHANNEL_RC_OK;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "409:  index = 0;",
          "410:  formatList->numFormats = 0;",
          "413:  if (!formatList->dataLen)",
          "414:  {",
          "418:  }",
          "419:  else if (!useLongFormatNames)",
          "420:  {",
          "424:   {",
          "426:    return ERROR_INTERNAL_ERROR;",
          "427:   }",
          "",
          "[Removed Lines]",
          "403:  UINT32 dataLen = formatList->dataLen;",
          "411:  position = Stream_GetPosition(s);",
          "416:   formatList->formats = NULL;",
          "417:   formatList->numFormats = 0;",
          "421:   formatList->numFormats = (dataLen / 36);",
          "423:   if ((formatList->numFormats * 36) != dataLen)",
          "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
          "",
          "[Added Lines]",
          "403:  wStream sub1, sub2;",
          "411:  formatList->formats = NULL;",
          "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
          "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
          "416:   return ERROR_INVALID_DATA;",
          "423:   const size_t cap = Stream_Capacity(&sub1);",
          "424:   formatList->numFormats = (cap / 36);",
          "426:   if ((formatList->numFormats * 36) != cap)",
          "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:   formatList->formats = formats;",
          "441:   {",
          "445:    formats[index].formatName = NULL;",
          "",
          "[Removed Lines]",
          "440:   while (dataLen)",
          "443:    dataLen -= 4;",
          "",
          "[Added Lines]",
          "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:    if (asciiNames)",
          "456:    {",
          "459:     if (szFormatName[0])",
          "460:     {",
          "",
          "[Removed Lines]",
          "457:     szFormatName = (char*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
          "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "459:    if (!Stream_SafeSeek(&sub1, 32))",
          "460:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:    }",
          "473:    else",
          "474:    {",
          "477:     if (wszFormatName[0])",
          "478:     {",
          "",
          "[Removed Lines]",
          "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "489:     }",
          "490:    }",
          "494:    index++;",
          "495:   }",
          "496:  }",
          "497:  else",
          "498:  {",
          "500:   {",
          "514:    formatList->numFormats++;",
          "515:   }",
          "520:   if (formatList->numFormats)",
          "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
          "",
          "[Removed Lines]",
          "492:    Stream_Seek(s, 32);",
          "493:    dataLen -= 32;",
          "499:   while (dataLen)",
          "502:    dataLen -= 4;",
          "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "506:    if (!wszFormatName[0])",
          "507:     formatNameLength = 0;",
          "508:    else",
          "509:     formatNameLength = _wcslen(wszFormatName);",
          "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "512:    dataLen -= ((formatNameLength + 1) * 2);",
          "517:   dataLen = formatList->dataLen;",
          "518:   Stream_SetPosition(s, position);",
          "",
          "[Added Lines]",
          "499:   sub2 = sub1;",
          "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
          "502:    size_t rest;",
          "504:     goto error_out;",
          "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "507:    rest = Stream_GetRemainingLength(&sub1);",
          "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
          "511:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   formatList->formats = formats;",
          "532:   {",
          "536:    formats[index].formatName = NULL;",
          "545:    if (formatNameLength)",
          "546:    {",
          "549:     {",
          "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
          "551:      error = ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "531:   while (dataLen)",
          "534:    dataLen -= 4;",
          "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "540:    if (!wszFormatName[0])",
          "541:     formatNameLength = 0;",
          "542:    else",
          "543:     formatNameLength = _wcslen(wszFormatName);",
          "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
          "548:                            0, NULL, NULL) < 1)",
          "",
          "[Added Lines]",
          "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
          "528:    size_t rest;",
          "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
          "534:    rest = Stream_GetRemainingLength(&sub2);",
          "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
          "537:     goto error_out;",
          "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
          "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "553:     }",
          "554:    }",
          "559:    index++;",
          "560:   }",
          "561:  }",
          "",
          "[Removed Lines]",
          "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "557:    dataLen -= ((formatNameLength + 1) * 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582:   }",
          "584:   free(formatList->formats);",
          "585:  }",
          "586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:   formatList->formats = NULL;",
          "577:   formatList->numFormats = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "917daa8b560903690cf73b1da6cefe9604e75816",
      "candidate_info": {
        "commit_hash": "917daa8b560903690cf73b1da6cefe9604e75816",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/917daa8b560903690cf73b1da6cefe9604e75816",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_write",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  UINT32 Length;",
          "202:  UINT64 Offset;",
          "203:  ssize_t status;",
          "204:  Stream_Read_UINT32(irp->input, Length);",
          "205:  Stream_Read_UINT64(irp->input, Offset);",
          "207:  len = Length;",
          "209:  while (len > 0)",
          "210:  {",
          "213:   if (status < 0)",
          "214:   {",
          "",
          "[Removed Lines]",
          "211:   status = write(parallel->file, Stream_Pointer(irp->input), len);",
          "",
          "[Added Lines]",
          "204:  void* ptr;",
          "205:  if (Stream_GetRemainingLength(irp->input) > 12)",
          "206:   return ERROR_INVALID_DATA;",
          "211:   return ERROR_INVALID_DATA;",
          "212:  ptr = Stream_Pointer(irp->input);",
          "213:  if (!Stream_SafeSeek(irp->input, Length))",
          "214:   return ERROR_INVALID_DATA;",
          "219:   status = write(parallel->file, ptr, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "873ed92a8461b363ccf7e1e1d1e9cc4c75f3a63d",
      "candidate_info": {
        "commit_hash": "873ed92a8461b363ccf7e1e1d1e9cc4c75f3a63d",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/873ed92a8461b363ccf7e1e1d1e9cc4c75f3a63d",
        "files": [
          "libfreerdp/core/server.c"
        ],
        "message": "Remove unnecessary cast.",
        "before_after_code_files": [
          "libfreerdp/core/server.c||libfreerdp/core/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/server.c||libfreerdp/core/server.c": [
          "File: libfreerdp/core/server.c -> libfreerdp/core/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:  Stream_SetPosition(channel->receiveData, 0);",
          "199:   return FALSE;",
          "201:  Stream_Write(channel->receiveData, Stream_Pointer(s), length);",
          "",
          "[Removed Lines]",
          "198:  if (!Stream_EnsureRemainingCapacity(channel->receiveData, (int)channel->dvc_total_length))",
          "",
          "[Added Lines]",
          "198:  if (!Stream_EnsureRemainingCapacity(channel->receiveData, channel->dvc_total_length))",
          "",
          "---------------"
        ]
      }
    }
  ]
}