{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bbb6b6994103a305c4b4536fe308275daaa211d1",
      "candidate_info": {
        "commit_hash": "bbb6b6994103a305c4b4536fe308275daaa211d1",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/bbb6b6994103a305c4b4536fe308275daaa211d1",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Add note that errno is already set by malloc",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c"
        ]
      }
    },
    {
      "candidate_hash": "33928154a5048dcef0e02ed934f782b30e7d9718",
      "candidate_info": {
        "commit_hash": "33928154a5048dcef0e02ed934f782b30e7d9718",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/33928154a5048dcef0e02ed934f782b30e7d9718",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Only include \"config.h\" if we have it\n\nWe may not have it on Windows, for instance.\nThanks to Periklis Akritidis!",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #if HAVE_REALLOCARRAY",
          "48: # define _GNU_SOURCE",
          "",
          "[Removed Lines]",
          "45: #include \"../config.h\"",
          "",
          "[Added Lines]",
          "45: #ifdef HAVE_CONFIG_H",
          "46: # include \"../config.h\"",
          "47: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b814d44948c101af473128e6878a1d217133b957",
      "candidate_info": {
        "commit_hash": "b814d44948c101af473128e6878a1d217133b957",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b814d44948c101af473128e6878a1d217133b957",
        "files": [
          "Makefile.am",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Draft failing memory manager tests using RemoveBaseUri",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: test_uriparser_test_SOURCES = \\",
          "73:  test/FourSuite.cpp \\",
          "74:  test/VersionSuite.cpp \\",
          "75:  test/test.cpp",
          "76: endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  test/MemoryManagerSuite.cpp \\",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <cassert>",
          "23: #include <gtest/gtest.h>",
          "25: #include <uriparser/Uri.h>",
          "28: namespace {",
          "30: static void * failingMalloc(UriMemoryManager * URI_UNUSED(memory),",
          "31:   size_t size) {",
          "32:  return NULL;",
          "33: }",
          "37: static void * failingCalloc(UriMemoryManager * URI_UNUSED(memory),",
          "38:   size_t nmemb, size_t size) {",
          "39:  return NULL;",
          "40: }",
          "44: static void * failingRealloc(UriMemoryManager * URI_UNUSED(memory),",
          "45:   void * ptr, size_t size) {",
          "46:  return NULL;",
          "47: }",
          "51: static void * failingReallocarray(UriMemoryManager * URI_UNUSED(memory),",
          "52:   void * ptr, size_t nmemb, size_t size) {",
          "53:  return NULL;",
          "54: }",
          "58: static void failingFree(UriMemoryManager * URI_UNUSED(memory), void * ptr) {",
          "60: }",
          "64: static UriUriA parse(const char * sourceUriString) {",
          "65:  UriParserStateA state;",
          "66:  UriUriA uri;",
          "67:  state.uri = &uri;",
          "68:  assert(uriParseUriA(&state, sourceUriString) == URI_SUCCESS);",
          "69:  return uri;",
          "70: }",
          "74: static UriMemoryManager failingMemoryManager = {",
          "75:  failingMalloc,",
          "76:  failingCalloc,",
          "77:  failingRealloc,",
          "78:  failingReallocarray,",
          "79:  failingFree,",
          "81: };",
          "83: }  // namespace",
          "87: TEST(FailingMemoryManagerSuite, RemoveBaseUriMm) {",
          "88:  UriUriA dest;",
          "89:  UriUriA absoluteSource = parse(\"http://example.org/a/b/c/\");",
          "90:  UriUriA absoluteBase = parse(\"http://example.org/a/\");",
          "91:  const UriBool domainRootMode = URI_TRUE;  // not of interest",
          "92:  FailingMemoryManager failingMemoryManager;",
          "94:  ASSERT_EQ(uriRemoveBaseUriMmA(&dest, &absoluteSource, &absoluteBase,",
          "95:    domainRootMode, &failingMemoryManager),",
          "96:    URI_ERROR_MALLOC);",
          "98:  uriFreeUriMembersA(&absoluteSource);",
          "99:  uriFreeUriMembersA(&absoluteBase);",
          "100: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a045e34af1329ad7d09988f1ba066365e6cc9f17",
      "candidate_info": {
        "commit_hash": "a045e34af1329ad7d09988f1ba066365e6cc9f17",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/a045e34af1329ad7d09988f1ba066365e6cc9f17",
        "files": [
          "src/UriParse.c"
        ],
        "message": "tests: Fix _TESTING_ONLY_ParseIpSix",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2276: UriBool URI_FUNC(_TESTING_ONLY_ParseIpSix)(const URI_CHAR * text) {",
          "2278:  URI_TYPE(Uri) uri;",
          "2279:  URI_TYPE(ParserState) parser;",
          "2280:  const URI_CHAR * const afterIpSix = text + URI_STRLEN(text);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2277:  UriMemoryManager * const memory = &defaultMemoryManager;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ae20741a95bb7ee95ed33b2f0d04d9a6481dd15",
      "candidate_info": {
        "commit_hash": "8ae20741a95bb7ee95ed33b2f0d04d9a6481dd15",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/8ae20741a95bb7ee95ed33b2f0d04d9a6481dd15",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriParse.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function FreeUriMembersMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriParse.c||src/UriParse.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: void URI_FUNC(FreeUriMembers)(URI_TYPE(Uri) * uri);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: int URI_FUNC(FreeUriMembersMm)(URI_TYPE(Uri) * uri,",
          "265:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: # include <uriparser/Uri.h>",
          "72: # include <uriparser/UriIp4.h>",
          "73: # include \"UriCommon.h\"",
          "74: # include \"UriParseBase.h\"",
          "75: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: # include \"UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2147: void URI_FUNC(FreeUriMembers)(URI_TYPE(Uri) * uri) {",
          "2150:  if (uri == NULL) {",
          "2152:  }",
          "2154:  if (uri->owner) {",
          "2156:   if (uri->scheme.first != NULL) {",
          "",
          "[Removed Lines]",
          "2151:   return;",
          "",
          "[Added Lines]",
          "2149:  URI_FUNC(FreeUriMembersMm)(uri, NULL);",
          "2150: }",
          "2154: int URI_FUNC(FreeUriMembersMm)(URI_TYPE(Uri) * uri, UriMemoryManager * memory) {",
          "2156:   return URI_ERROR_NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2250:    uri->fragment.afterLast = NULL;",
          "2251:   }",
          "2252:  }",
          "2253: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2261:  return URI_SUCCESS;",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: TEST(FailingMemoryManagerSuite, NormalizeSyntaxExMm) {",
          "204:  UriUriA uri = parse(\"hTTp://example.org/path\");",
          "205:  const unsigned int mask = URI_NORMALIZE_SCHEME;  // anything but URI_NORMALIZED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: TEST(FailingMemoryManagerSuite, FreeUriMembersMm) {",
          "204:  UriUriA uri = parse(\"http://example.org/\");",
          "205:  FailingMemoryManager failingMemoryManager;",
          "206:  ASSERT_EQ(failingMemoryManager.getCallCountFree(), 0);",
          "208:  uriFreeUriMembersMmA(&uri, &failingMemoryManager);",
          "210:  ASSERT_GE(failingMemoryManager.getCallCountFree(), 1);",
          "211:  uriFreeUriMembersA(&uri);",
          "212: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}