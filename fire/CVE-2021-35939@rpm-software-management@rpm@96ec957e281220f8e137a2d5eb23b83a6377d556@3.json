{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc22fc694d30a64862f0b16d137deaab5416382d",
      "candidate_info": {
        "commit_hash": "cc22fc694d30a64862f0b16d137deaab5416382d",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/cc22fc694d30a64862f0b16d137deaab5416382d",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Consolidate skipped hardlink with content case with the others\n\nHandling this in a separate clause makes the logic much clearer and\n(in theory at least) lets us handle hardlinks to any content, not\njust regular files.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "833:  struct filedata_s *fp = &fdata[fx];",
          "835:         if (!fp->skip) {",
          "838:   rc = fsmBackup(fi, fp->action);",
          "839:      }",
          "",
          "[Removed Lines]",
          "837:      if (!fp->suffix) {",
          "",
          "[Added Lines]",
          "841:  if (fp->skip && firstlink && rpmfiArchiveHasContent(fi))",
          "842:      fp = firstlink;",
          "846:      if (!fp->suffix && fp != firstlink) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:                 if (!IS_DEV_LOG(fp->fpath))",
          "905:                     rc = RPMERR_UNKNOWN_FILETYPE;",
          "906:             }",
          "916:  }",
          "",
          "[Removed Lines]",
          "907:  } else if (firstlink && rpmfiArchiveHasContent(fi)) {",
          "914:      rc = fsmMkfile(fi, firstlink, files, psm, nodigest,",
          "915:       &firstlink, &firstlinkfile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2668a2cabfe097d58adb9810da1cc8aa7fe1cc91",
      "candidate_info": {
        "commit_hash": "2668a2cabfe097d58adb9810da1cc8aa7fe1cc91",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/2668a2cabfe097d58adb9810da1cc8aa7fe1cc91",
        "files": [
          "lib/rpmarchive.h",
          "lib/rpmfi.c"
        ],
        "message": "Add new rpm error codes for invalid symlinks and not-a-directory",
        "before_after_code_files": [
          "lib/rpmarchive.h||lib/rpmarchive.h",
          "lib/rpmfi.c||lib/rpmfi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/rpmarchive.h||lib/rpmarchive.h": [
          "File: lib/rpmarchive.h -> lib/rpmarchive.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  RPMERR_FILE_SIZE = -12,",
          "27:  RPMERR_ITER_SKIP = -13,",
          "28:  RPMERR_EXIST_AS_DIR = -14,",
          "30:  RPMERR_OPEN_FAILED = -32768,",
          "31:  RPMERR_CHMOD_FAILED = -32769,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  RPMERR_INVALID_SYMLINK = -15,",
          "30:  RPMERR_ENOTDIR  = -16,",
          "",
          "---------------"
        ],
        "lib/rpmfi.c||lib/rpmfi.c": [
          "File: lib/rpmfi.c -> lib/rpmfi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2505:     case RPMERR_DIGEST_MISMATCH: s = _(\"Digest mismatch\"); break;",
          "2506:     case RPMERR_INTERNAL: s = _(\"Internal error\"); break;",
          "2507:     case RPMERR_UNMAPPED_FILE: s = _(\"Archive file not in header\"); break;",
          "2508:     case RPMERR_ENOENT: s = strerror(ENOENT); break;",
          "2509:     case RPMERR_ENOTEMPTY: s = strerror(ENOTEMPTY); break;",
          "2510:     case RPMERR_EXIST_AS_DIR:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2508:     case RPMERR_INVALID_SYMLINK: s = _(\"Invalid symlink\"); break;",
          "2509:     case RPMERR_ENOTDIR: s = strerror(ENOTDIR); break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "948be518d5274bc2e0161cca6b4c25e1e866849d",
      "candidate_info": {
        "commit_hash": "948be518d5274bc2e0161cca6b4c25e1e866849d",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/948be518d5274bc2e0161cca6b4c25e1e866849d",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Convert removeSBITS() to dirfd-based operation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:     return rc;",
          "442: }",
          "445: {",
          "446:     struct stat stb;",
          "448:  if ((stb.st_mode & 06000) != 0) {",
          "450:  }",
          "451: #if WITH_CAP",
          "452:  if (stb.st_mode & (S_IXUSR|S_IXGRP|S_IXOTH)) {",
          "454:  }",
          "455: #endif",
          "456:     }",
          "",
          "[Removed Lines]",
          "444: static void removeSBITS(const char *path)",
          "447:     if (lstat(path, &stb) == 0 && S_ISREG(stb.st_mode)) {",
          "449:      (void) chmod(path, stb.st_mode & 0777);",
          "453:      (void) cap_set_file(path, NULL);",
          "",
          "[Added Lines]",
          "444: static void removeSBITS(int dirfd, const char *path)",
          "447:     int flags = AT_SYMLINK_NOFOLLOW;",
          "448:     if (fstatat(dirfd, path, &stb, flags) == 0 && S_ISREG(stb.st_mode)) {",
          "450:      (void) fchmodat(dirfd, path, stb.st_mode & 0777, flags);",
          "454:      (void) cap_set_fileat(dirfd, path, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483: static int fsmUnlink(int dirfd, const char *path)",
          "484: {",
          "485:     int rc = 0;",
          "487:     rc = unlinkat(dirfd, path, 0);",
          "488:     if (_fsm_debug)",
          "489:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s) %s\\n\", __func__,",
          "",
          "[Removed Lines]",
          "486:     removeSBITS(path);",
          "",
          "[Added Lines]",
          "487:     removeSBITS(dirfd, path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "496: static int fsmRename(int odirfd, const char *opath, int dirfd, const char *path)",
          "497: {",
          "499:     int rc = renameat(odirfd, opath, dirfd, path);",
          "500: #if defined(ETXTBSY) && defined(__HPUX__)",
          "",
          "[Removed Lines]",
          "498:     removeSBITS(path);",
          "",
          "[Added Lines]",
          "499:     removeSBITS(dirfd, path);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da3f70d75a4e36737da19e65bce65a67bbcbb2ad",
      "candidate_info": {
        "commit_hash": "da3f70d75a4e36737da19e65bce65a67bbcbb2ad",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/da3f70d75a4e36737da19e65bce65a67bbcbb2ad",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Convert fsmStat() to fstatat() based operation",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     return rc;",
          "237: }",
          "240: {",
          "247:     if (_fsm_debug && rc && errno != ENOENT)",
          "249:                __func__,",
          "251:     if (rc < 0) {",
          "252:         rc = (errno == ENOENT ? RPMERR_ENOENT : RPMERR_LSTAT_FAILED);",
          "",
          "[Removed Lines]",
          "239: static int fsmStat(const char *path, int dolstat, struct stat *sb)",
          "241:     int rc;",
          "242:     if (dolstat){",
          "243:  rc = lstat(path, sb);",
          "244:     } else {",
          "245:         rc = stat(path, sb);",
          "246:     }",
          "248:         rpmlog(RPMLOG_DEBUG, \" %8s (%s, ost) %s\\n\",",
          "250:                path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "239: static int fsmStat(int dirfd, const char *path, int dolstat, struct stat *sb)",
          "241:     int flags = dolstat ? AT_SYMLINK_NOFOLLOW : 0;",
          "242:     int rc = fstatat(dirfd, path, sb, flags);",
          "245:         rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, ost) %s\\n\",",
          "247:                dirfd, path, (rc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:     return rc;",
          "568: }",
          "571: {",
          "572:     int rc;",
          "573:     int saveerrno = errno;",
          "574:     struct stat dsb;",
          "575:     mode_t mode = rpmfiFMode(fi);",
          "578:     if (rc)",
          "579:  return rc;",
          "",
          "[Removed Lines]",
          "570: static int fsmVerify(const char *path, rpmfi fi)",
          "577:     rc = fsmStat(path, 1, &dsb);",
          "",
          "[Added Lines]",
          "567: static int fsmVerify(int dirfd, const char *path, rpmfi fi)",
          "574:     rc = fsmStat(dirfd, path, 1, &dsb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:         if (S_ISDIR(dsb.st_mode)) return 0;",
          "594:         if (S_ISLNK(dsb.st_mode)) {",
          "595:      uid_t luid = dsb.st_uid;",
          "597:             if (rc == RPMERR_ENOENT) rc = 0;",
          "598:             if (rc) return rc;",
          "599:             errno = saveerrno;",
          "",
          "[Removed Lines]",
          "596:             rc = fsmStat(path, 0, &dsb);",
          "",
          "[Added Lines]",
          "593:             rc = fsmStat(dirfd, path, 0, &dsb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "894:      if (!fp->suffix) {",
          "895:   if (fp->action == FA_TOUCH) {",
          "896:       struct stat sb;",
          "898:   } else {",
          "900:   }",
          "901:      } else {",
          "902:   rc = RPMERR_ENOENT;",
          "",
          "[Removed Lines]",
          "897:       rc = fsmStat(fp->fpath, 1, &sb);",
          "899:       rc = fsmVerify(fp->fpath, fi);",
          "",
          "[Added Lines]",
          "894:       rc = fsmStat(di.dirfd, fp->fpath, 1, &sb);",
          "896:       rc = fsmVerify(di.dirfd, fp->fpath, fi);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1050:  if (ensureDir(NULL, rpmfiDN(fi), 0, 0, 1, &di.dirfd))",
          "1051:      continue;",
          "1055:  fsmDebug(fp->fpath, fp->action, &fp->sb);",
          "",
          "[Removed Lines]",
          "1053:  rc = fsmStat(fp->fpath, 1, &fp->sb);",
          "",
          "[Added Lines]",
          "1050:  rc = fsmStat(di.dirfd, fp->fpath, 1, &fp->sb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dc45d932a3cfa033b5cdf30ebc7ee8dc9472ef3",
      "candidate_info": {
        "commit_hash": "7dc45d932a3cfa033b5cdf30ebc7ee8dc9472ef3",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/7dc45d932a3cfa033b5cdf30ebc7ee8dc9472ef3",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Add O_DIRECTORY equivalent parameter to fsmOpenat(), use as relevant",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: static const char * fileActionString(rpmFileAction a);",
          "",
          "[Removed Lines]",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags);",
          "",
          "[Added Lines]",
          "68: static int fsmOpenat(int dirfd, const char *path, int flags, int dir);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95: static int cap_set_fileat(int dirfd, const char *path, cap_t fcaps)",
          "96: {",
          "97:     int rc = -1;",
          "99:     if (fd >= 0) {",
          "100:  rc = cap_set_fd(fd, fcaps);",
          "101:  close(fd);",
          "",
          "[Removed Lines]",
          "98:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW);",
          "",
          "[Added Lines]",
          "98:     int fd = fsmOpenat(dirfd, path, O_RDONLY|O_NOFOLLOW, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "292:     return rc;",
          "293: }",
          "296: {",
          "297:     struct stat lsb, sb;",
          "298:     int sflags = flags | O_NOFOLLOW;",
          "",
          "[Removed Lines]",
          "295: static int fsmOpenat(int dirfd, const char *path, int flags)",
          "",
          "[Added Lines]",
          "295: static int fsmOpenat(int dirfd, const char *path, int flags, int dir)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:      }",
          "317:  }",
          "318:     }",
          "319:     return fd;",
          "320: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     if (dir && fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "322:  errno = ENOTDIR;",
          "323:  close(fd);",
          "324:  fd = -1;",
          "325:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:     if (*dirfdp >= 0)",
          "362:  return rc;",
          "367:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
          "371:  if (fd < 0 && errno == ENOENT && create) {",
          "372:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "373:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode);",
          "374:      if (!rc)",
          "381:  }",
          "383:  close(dirfd);",
          "",
          "[Removed Lines]",
          "364:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
          "368:  struct stat sb;",
          "369:  fd = fsmOpenat(dirfd, bn, oflags);",
          "375:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
          "376:  }",
          "378:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
          "379:      rc = RPMERR_ENOTDIR;",
          "380:      break;",
          "",
          "[Added Lines]",
          "371:     int dirfd = fsmOpenat(-1, \"/\", oflags, 1);",
          "375:  fd = fsmOpenat(dirfd, bn, oflags, 1);",
          "381:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW, 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "998:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
          "1000:   fd = fsmOpenat(di.dirfd, fp->fpath,",
          "1002:   if (fd < 0)",
          "1003:       rc = RPMERR_OPEN_FAILED;",
          "1004:      }",
          "",
          "[Removed Lines]",
          "1001:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
          "",
          "[Added Lines]",
          "1002:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}