{
  "cve_id": "CVE-2020-11086",
  "cve_desc": "In FreeRDP less than or equal to 2.0.0, there is an out-of-bound read in ntlm_read_ntlm_v2_client_challenge that reads up to 28 bytes out-of-bound to an internal structure. This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
  "patch_info": {
    "commit_hash": "c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c098f21fdaadca57ff649eee1674f6cc321a2ec4",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ],
    "message": "Fixed oob read in ntlm_read_ntlm_v2_response",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "124: static int ntlm_read_ntlm_v2_client_challenge(wStream* s, NTLMv2_CLIENT_CHALLENGE* challenge)",
      "125: {",
      "126:  size_t size;",
      "127:  Stream_Read_UINT8(s, challenge->RespType);",
      "128:  Stream_Read_UINT8(s, challenge->HiRespType);",
      "129:  Stream_Read_UINT16(s, challenge->Reserved1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:  if (Stream_GetRemainingLength(s) < 28)",
      "128:   return -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "164: int ntlm_read_ntlm_v2_response(wStream* s, NTLMv2_RESPONSE* response)",
      "165: {",
      "166:  Stream_Read(s, response->Response, 16);",
      "167:  return ntlm_read_ntlm_v2_client_challenge(s, &(response->Challenge));",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:  if (Stream_GetRemainingLength(s) < 16)",
      "170:   return -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8586168523b0f3956ca593cbaf1636c0a4b1779",
      "candidate_info": {
        "commit_hash": "d8586168523b0f3956ca593cbaf1636c0a4b1779",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d8586168523b0f3956ca593cbaf1636c0a4b1779",
        "files": [
          "channels/smartcard/client/smartcard_operations.c"
        ],
        "message": "Changed smartcard no reader log message level to info\n\n(cherry picked from commit 728f6aff516a12ac8720aa0c9fa1730cde348dca)",
        "before_after_code_files": [
          "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/smartcard/client/smartcard_operations.c||channels/smartcard/client/smartcard_operations.c": [
          "File: channels/smartcard/client/smartcard_operations.c -> channels/smartcard/client/smartcard_operations.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:    case SCARD_E_TIMEOUT:",
          "50:     level = WLOG_DEBUG;",
          "51:     break;",
          "52:    default:",
          "53:     break;",
          "54:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:    case SCARD_E_NO_READERS_AVAILABLE:",
          "53:     level = WLOG_INFO;",
          "54:     break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0a17eb342e8cb72c844a5d16d999a70ca5e827c",
      "candidate_info": {
        "commit_hash": "c0a17eb342e8cb72c844a5d16d999a70ca5e827c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c0a17eb342e8cb72c844a5d16d999a70ca5e827c",
        "files": [
          "client/Windows/wf_graphics.c"
        ],
        "message": "Fixed #6121: Use correct destination color format",
        "before_after_code_files": [
          "client/Windows/wf_graphics.c||client/Windows/wf_graphics.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Windows/wf_graphics.c||client/Windows/wf_graphics.c": [
          "File: client/Windows/wf_graphics.c -> client/Windows/wf_graphics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:    goto fail;",
          "240:   info.hbmColor = wf_create_dib((wfContext*)context, pointer->width, pointer->height,",
          "243:   if (!info.hbmColor)",
          "244:    goto fail;",
          "",
          "[Removed Lines]",
          "241:                                 srcFormat, NULL, &pdata);",
          "",
          "[Added Lines]",
          "241:                                 gdi->dstFormat, NULL, &pdata);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c903aa04091e8bcc2c4b3f4cc0ff20bcabce2ef0",
      "candidate_info": {
        "commit_hash": "c903aa04091e8bcc2c4b3f4cc0ff20bcabce2ef0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/c903aa04091e8bcc2c4b3f4cc0ff20bcabce2ef0",
        "files": [
          "libfreerdp/cache/glyph.c"
        ],
        "message": "Fixed index out of bound access in update_glyph_offset",
        "before_after_code_files": [
          "libfreerdp/cache/glyph.c||libfreerdp/cache/glyph.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/cache/glyph.c||libfreerdp/cache/glyph.c": [
          "File: libfreerdp/cache/glyph.c -> libfreerdp/cache/glyph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: static BOOL glyph_cache_fragment_put(rdpGlyphCache* glyph, UINT32 index, UINT32 count,",
          "43:                                      const void* entry);",
          "46:                                   UINT32 ulCharInc, UINT32 flAccel)",
          "47: {",
          "48:  if ((ulCharInc == 0) && (!(flAccel & SO_CHAR_INC_EQUAL_BM_BASE)))",
          "",
          "[Removed Lines]",
          "45: static UINT32 update_glyph_offset(const BYTE* data, UINT32 index, INT32* x, INT32* y,",
          "",
          "[Added Lines]",
          "45: static UINT32 update_glyph_offset(const BYTE* data, size_t length, UINT32 index, INT32* x, INT32* y,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   if (offset & 0x80)",
          "53:   {",
          "56:   }",
          "58:   if (flAccel & SO_VERTICAL)",
          "",
          "[Removed Lines]",
          "54:    offset = data[index++];",
          "55:    offset |= ((UINT32)data[index++]) << 8;",
          "",
          "[Added Lines]",
          "55:    if (index + 1 < length)",
          "56:    {",
          "57:     offset = data[index++];",
          "58:     offset |= ((UINT32)data[index++]) << 8;",
          "59:    }",
          "60:    else",
          "61:     WLog_WARN(TAG, \"[%s] glyph index out of bound %\" PRIu32 \" [max %\" PRIuz \"]\", index,",
          "62:               length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:   switch (op)",
          "235:   {",
          "236:    case GLYPH_FRAGMENT_USE:",
          "238:      return FALSE;",
          "240:     id = data[index++];",
          "",
          "[Removed Lines]",
          "237:     if (index + 1 > length)",
          "",
          "[Added Lines]",
          "244:     if (index + 1 >= length)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:     for (n = 0; n < size;)",
          "247:     {",
          "248:      const UINT32 fop = fragments[n++];",
          "251:      if (!update_process_glyph(context, fragments, fop, &x, &y, cacheId, flAccel,",
          "252:                                fOpRedundant, &bound))",
          "",
          "[Removed Lines]",
          "249:      n = update_glyph_offset(fragments, n, &x, &y, ulCharInc, flAccel);",
          "",
          "[Added Lines]",
          "256:      n = update_glyph_offset(fragments, size, n, &x, &y, ulCharInc, flAccel);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265:     break;",
          "267:    default:",
          "270:     if (!update_process_glyph(context, data, op, &x, &y, cacheId, flAccel, fOpRedundant,",
          "271:                               &bound))",
          "",
          "[Removed Lines]",
          "268:     index = update_glyph_offset(data, index, &x, &y, ulCharInc, flAccel);",
          "",
          "[Added Lines]",
          "275:     index = update_glyph_offset(data, length, index, &x, &y, ulCharInc, flAccel);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "378: static BOOL update_gdi_fast_glyph(rdpContext* context, const FAST_GLYPH_ORDER* fastGlyph)",
          "379: {",
          "380:  INT32 x, y;",
          "382:  INT32 opLeft, opTop;",
          "383:  INT32 opRight, opBottom;",
          "384:  INT32 opWidth = 0, opHeight = 0;",
          "",
          "[Removed Lines]",
          "381:  BYTE text_data[2];",
          "",
          "[Added Lines]",
          "388:  BYTE text_data[4] = { 0 };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "464:   opHeight = opBottom - opTop + 1;",
          "466:  return update_process_glyph_fragments(",
          "470: }",
          "472: static BOOL update_gdi_cache_glyph(rdpContext* context, const CACHE_GLYPH_ORDER* cacheGlyph)",
          "",
          "[Removed Lines]",
          "467:      context, text_data, 1, fastGlyph->cacheId, fastGlyph->ulCharInc, fastGlyph->flAccel,",
          "468:      fastGlyph->backColor, fastGlyph->foreColor, x, y, fastGlyph->bkLeft, fastGlyph->bkTop,",
          "469:      bkWidth, bkHeight, opLeft, opTop, opWidth, opHeight, FALSE);",
          "",
          "[Added Lines]",
          "474:      context, text_data, sizeof(text_data), fastGlyph->cacheId, fastGlyph->ulCharInc,",
          "475:      fastGlyph->flAccel, fastGlyph->backColor, fastGlyph->foreColor, x, y, fastGlyph->bkLeft,",
          "476:      fastGlyph->bkTop, bkWidth, bkHeight, opLeft, opTop, opWidth, opHeight, FALSE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54c902b3b520d03c7f4c5bab24713eb42e78ca34",
      "candidate_info": {
        "commit_hash": "54c902b3b520d03c7f4c5bab24713eb42e78ca34",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/54c902b3b520d03c7f4c5bab24713eb42e78ca34",
        "files": [
          "libfreerdp/codec/xcrush.c"
        ],
        "message": "Optimize function xcrush_copy_bytes()\n\nUse memcpy to copy the bytes when we can assure that the memory areas does not overlap.\nWhen the areas overlap, copy the area that doesn't overlap repeatly.\nWith this change, the copy is ~30x faster.",
        "before_after_code_files": [
          "libfreerdp/codec/xcrush.c||libfreerdp/codec/xcrush.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/xcrush.c||libfreerdp/codec/xcrush.c": [
          "File: libfreerdp/codec/xcrush.c -> libfreerdp/codec/xcrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:  return 1;",
          "733: }",
          "736: {",
          "740:  {",
          "742:  }",
          "744:  return num;",
          "",
          "[Removed Lines]",
          "735: static size_t xcrush_copy_bytes(BYTE* dst, const BYTE* src, size_t num)",
          "737:  size_t index;",
          "739:  for (index = 0; index < num; index++)",
          "741:   dst[index] = src[index];",
          "",
          "[Added Lines]",
          "735: static INLINE size_t xcrush_copy_bytes(BYTE* dst, const BYTE* src, size_t num)",
          "737:  size_t diff, rest, end, a;",
          "738:  if (src + num < dst || src > dst + num)",
          "739:  {",
          "740:   memcpy(dst, src, num);",
          "741:  }",
          "742:  else",
          "746:   diff = (dst > src) ? dst - src : src - dst;",
          "747:   rest = num % diff;",
          "748:   end = num - rest;",
          "749:   for (a = 0; a < end; a += diff)",
          "750:   {",
          "751:    memcpy(&dst[a], &src[a], diff);",
          "752:   }",
          "754:   if (rest != 0)",
          "755:    memcpy(&dst[end], &src[end], rest);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "495cb2e312c6b550709fe34b2541a28474ab7ebb",
      "candidate_info": {
        "commit_hash": "495cb2e312c6b550709fe34b2541a28474ab7ebb",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/495cb2e312c6b550709fe34b2541a28474ab7ebb",
        "files": [
          "channels/cliprdr/server/cliprdr_main.c"
        ],
        "message": "Fixed cliprdr_server_receive_capabilities\n\nThanks to hac425 CVE-2020-11017, CVE-2020-11018",
        "before_after_code_files": [
          "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6152"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c": [
          "File: channels/cliprdr/server/cliprdr_main.c -> channels/cliprdr/server/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: static UINT cliprdr_server_receive_general_capability(CliprdrServerContext* context, wStream* s,",
          "433:                                                       CLIPRDR_GENERAL_CAPABILITY_SET* cap_set)",
          "434: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (Stream_GetRemainingLength(s) < 8)",
          "436:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:  UINT16 index;",
          "465:  UINT16 capabilitySetType;",
          "466:  UINT16 capabilitySetLength;",
          "468:  size_t cap_sets_size = 0;",
          "470:  CLIPRDR_CAPABILITY_SET* capSet;",
          "473:  WINPR_UNUSED(header);",
          "478:  WLog_DBG(TAG, \"CliprdrClientCapabilities\");",
          "482:  for (index = 0; index < capabilities.cCapabilitiesSets; index++)",
          "483:  {",
          "487:   cap_sets_size += capabilitySetLength;",
          "490:   if (tmp == NULL)",
          "491:   {",
          "492:    WLog_ERR(TAG, \"capabilities.capabilitySets realloc failed!\");",
          "",
          "[Removed Lines]",
          "467:  UINT error = CHANNEL_RC_OK;",
          "469:  CLIPRDR_CAPABILITIES capabilities;",
          "471:  void* tmp;",
          "476:  capabilities.capabilitySets = NULL;",
          "489:   tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "[Added Lines]",
          "470:  UINT error = ERROR_INVALID_DATA;",
          "472:  CLIPRDR_CAPABILITIES capabilities = { 0 };",
          "479:  if (Stream_GetRemainingLength(s) < 4)",
          "480:   return ERROR_INVALID_DATA;",
          "487:   void* tmp = NULL;",
          "488:   if (Stream_GetRemainingLength(s) < 4)",
          "489:    goto out;",
          "495:   if (cap_sets_size > 0)",
          "496:    tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:   switch (capSet->capabilitySetType)",
          "505:   {",
          "506:    case CB_CAPSTYPE_GENERAL:",
          "509:     {",
          "510:      WLog_ERR(TAG,",
          "511:               \"cliprdr_server_receive_general_capability failed with error %\" PRIu32",
          "",
          "[Removed Lines]",
          "507:     if ((error = cliprdr_server_receive_general_capability(",
          "508:              context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet)))",
          "",
          "[Added Lines]",
          "514:     error = cliprdr_server_receive_general_capability(",
          "515:         context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet);",
          "516:     if (error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "518:    default:",
          "519:     WLog_ERR(TAG, \"unknown cliprdr capability set: %\" PRIu16 \"\",",
          "520:              capSet->capabilitySetType);",
          "522:     goto out;",
          "523:   }",
          "524:  }",
          "526:  IFCALLRET(context->ClientCapabilities, error, context, &capabilities);",
          "527: out:",
          "528:  free(capabilities.capabilitySets);",
          "",
          "[Removed Lines]",
          "521:     error = ERROR_INVALID_DATA;",
          "",
          "[Added Lines]",
          "533:  error = CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    }
  ]
}