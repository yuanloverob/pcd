{
  "cve_id": "CVE-2024-28231",
  "cve_desc": "eprosima Fast DDS is a C++ implementation of the Data Distribution Service standard of the Object Management Group. Prior to versions 2.14.0, 2.13.4, 2.12.3, 2.10.4, and 2.6.8, manipulated DATA Submessage can cause a heap overflow error in the Fast-DDS process, causing the process to be terminated remotely. Additionally, the payload_size in the DATA Submessage packet is declared as uint32_t. When a negative number, such as -1, is input into this variable, it results in an Integer Overflow (for example, -1 gets converted to 0xFFFFFFFF). This eventually leads to a heap-buffer-overflow, causing the program to terminate. Versions 2.14.0, 2.13.4, 2.12.3, 2.10.4, and 2.6.8 contain a fix for this issue.",
  "repo": "eProsima/Fast-DDS",
  "patch_hash": "355706386f4af9ce74125eeec3c449b06113112b",
  "patch_info": {
    "commit_hash": "355706386f4af9ce74125eeec3c449b06113112b",
    "repo": "eProsima/Fast-DDS",
    "commit_url": "https://github.com/eProsima/Fast-DDS/commit/355706386f4af9ce74125eeec3c449b06113112b",
    "files": [
      "src/cpp/rtps/messages/MessageReceiver.cpp",
      "test/blackbox/CMakeLists.txt",
      "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
      "test/blackbox/common/BlackboxTests.hpp",
      "test/blackbox/common/BlackboxTestsSecurity.cpp",
      "test/blackbox/common/BlackboxTestsTransportUDP.cpp",
      "test/blackbox/common/UDPMessageSender.hpp",
      "test/blackbox/types/UnboundedHelloWorld.cxx",
      "test/blackbox/types/UnboundedHelloWorld.h",
      "test/blackbox/types/UnboundedHelloWorld.idl",
      "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
      "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
      "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
      "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
      "test/blackbox/types/UnboundedHelloWorldv1.cxx",
      "test/blackbox/types/UnboundedHelloWorldv1.h",
      "test/blackbox/utils/data_generators.cpp"
    ],
    "message": "Merge pull request from GHSA-9m2j-qw67-ph4w\n\n* Refs #20549: Add BB test\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Fix:Fixed integer overflow causing heap overflow\n\nWhen a sub node receives a manipulated DATA sub-message, an Integer Overflow occurs in uint32_t payload_size. This causes a heap buffer overflow error. A comparison statement was inserted before the line that calculates the variable, which fixes the error.\n\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\n\n* Refs #20549: Fix review\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Refs #201549: Reset the change data fields before exiting\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n---------\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\nCo-authored-by: Mario Dominguez <mariodominguez@eprosima.com>",
    "before_after_code_files": [
      "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
      "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
      "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
      "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
      "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
      "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
      "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
      "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
      "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
      "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
      "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
      "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
      "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
      "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
      "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
      "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
    ]
  },
  "patch_diff": {
    "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp": [
      "File: src/cpp/rtps/messages/MessageReceiver.cpp -> src/cpp/rtps/messages/MessageReceiver.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "843:     if (dataFlag || keyFlag)",
      "844:     {",
      "845:         uint32_t payload_size;",
      "849:         if (dataFlag)",
      "850:         {",
      "",
      "[Removed Lines]",
      "846:         payload_size = smh->submessageLength -",
      "847:                 (RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);",
      "",
      "[Added Lines]",
      "846:         const uint32_t submsg_no_payload_size =",
      "847:                 RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize;",
      "850:         if (smh->submessageLength < submsg_no_payload_size)",
      "851:         {",
      "852:             EPROSIMA_LOG_WARNING(RTPS_MSG_IN, IDSTRING \"Serialized Payload avoided overflow \"",
      "853:                     \"(\" << smh->submessageLength << \"/\" << submsg_no_payload_size << \")\");",
      "854:             ch.serializedPayload.data = nullptr;",
      "855:             ch.inline_qos.data = nullptr;",
      "856:             return false;",
      "857:         }",
      "859:         payload_size = smh->submessageLength - submsg_no_payload_size;",
      "",
      "---------------"
    ],
    "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp": [
      "File: test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp -> test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "334:             if (subscriber_ != nullptr)",
      "335:             {",
      "337:                     subscriber_attr_.topic.topicName << std::endl;",
      "339:                 initialized_ = true;",
      "",
      "[Removed Lines]",
      "336:                 std::cout << \"Created subscriber \" << subscriber_->getGuid() << \" for topic \" <<",
      "",
      "[Added Lines]",
      "336:                 subscriber_guid_ = subscriber_->getGuid();",
      "337:                 std::cout << \"Created subscriber \" << subscriber_guid_ << \" for topic \" <<",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1433:         return participant_guid_;",
      "1434:     }",
      "1436: private:",
      "1438:     void receive_one(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1437:     const eprosima::fastrtps::rtps::GUID_t& datareader_guid() const",
      "1438:     {",
      "1439:         return subscriber_guid_;",
      "1440:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1524:     eprosima::fastrtps::SubscriberAttributes subscriber_attr_;",
      "1525:     std::string topic_name_;",
      "1526:     eprosima::fastrtps::rtps::GUID_t participant_guid_;",
      "1527:     bool initialized_;",
      "1528:     std::list<type> total_msgs_;",
      "1529:     std::mutex mutex_;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1533:     eprosima::fastrtps::rtps::GUID_t subscriber_guid_;",
      "",
      "---------------"
    ],
    "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp": [
      "File: test/blackbox/common/BlackboxTests.hpp -> test/blackbox/common/BlackboxTests.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: #include <unistd.h>",
      "32: #endif // if defined(_WIN32)",
      "35: #include \"../types/FixedSizedPubSubTypes.h\"",
      "36: #include \"../types/KeyedHelloWorldPubSubTypes.h\"",
      "37: #include \"../types/StringTestPubSubTypes.h\"",
      "42: #include <algorithm>",
      "43: #include <cstddef>",
      "",
      "[Removed Lines]",
      "34: #include \"../types/HelloWorldPubSubTypes.h\"",
      "38: #include \"../types/Data64kbPubSubTypes.h\"",
      "39: #include \"../types/Data1mbPubSubTypes.h\"",
      "40: #include \"../types/KeyedData1mbPubSubTypes.h\"",
      "",
      "[Added Lines]",
      "34: #include \"../types/Data1mbPubSubTypes.h\"",
      "35: #include \"../types/Data64kbPubSubTypes.h\"",
      "37: #include \"../types/HelloWorldPubSubTypes.h\"",
      "38: #include \"../types/KeyedData1mbPubSubTypes.h\"",
      "41: #include \"../types/UnboundedHelloWorldPubSubTypes.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170: std::list<KeyedData1mb> default_keyeddata300kb_data_generator(",
      "171:         size_t max = 0);",
      "174: extern const std::function<void(const HelloWorld&)>  default_helloworld_print;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "174: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
      "175:         size_t max = 0);",
      "",
      "---------------"
    ],
    "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp": [
      "File: test/blackbox/common/BlackboxTestsSecurity.cpp -> test/blackbox/common/BlackboxTestsSecurity.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"PubSubWriter.hpp\"",
      "28: #include \"PubSubWriterReader.hpp\"",
      "29: #include \"PubSubParticipant.hpp\"",
      "31: #include <fastdds/dds/log/Log.hpp>",
      "32: #include <fastdds/rtps/common/EntityId_t.hpp>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include \"UDPMessageSender.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90: };",
      "118: class SecurityPkcs : public ::testing::Test",
      "119: {",
      "120: public:",
      "",
      "[Removed Lines]",
      "92: struct UDPMessageSender",
      "93: {",
      "94:     asio::io_service service;",
      "95:     asio::ip::udp::socket socket;",
      "97:     UDPMessageSender()",
      "98:         : service()",
      "99:         , socket(service)",
      "100:     {",
      "101:         socket.open(asio::ip::udp::v4());",
      "102:     }",
      "104:     void send(",
      "105:             const CDRMessage_t& msg,",
      "106:             const Locator_t& destination)",
      "107:     {",
      "108:         std::string addr = IPLocator::toIPv4string(destination);",
      "109:         unsigned short port = static_cast<unsigned short>(destination.port);",
      "110:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
      "111:         asio::error_code ec;",
      "113:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
      "114:     }",
      "116: };",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp": [
      "File: test/blackbox/common/BlackboxTestsTransportUDP.cpp -> test/blackbox/common/BlackboxTestsTransportUDP.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #include \"DatagramInjectionTransport.hpp\"",
      "30: #include \"PubSubReader.hpp\"",
      "31: #include \"PubSubWriter.hpp\"",
      "33: using namespace eprosima::fastrtps;",
      "34: using namespace eprosima::fastrtps::rtps;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include \"UDPMessageSender.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "555:     deliver_datagram_from_file(receivers, \"datagrams/20140.bin\");",
      "556: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "559: TEST(TransportUDP, MaliciousManipulatedDataOctetsToNextHeaderIgnore)",
      "560: {",
      "562:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
      "564:     PubSubWriter<UnboundedHelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
      "565:     PubSubReader<UnboundedHelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
      "567:     struct MaliciousManipulatedDataOctetsToNextHeader",
      "568:     {",
      "569:         std::array<char, 4> rtps_id{ {'R', 'T', 'P', 'S'} };",
      "570:         std::array<uint8_t, 2> protocol_version{ {2, 3} };",
      "571:         std::array<uint8_t, 2> vendor_id{ {0x01, 0x0F} };",
      "572:         GuidPrefix_t sender_prefix{};",
      "574:         struct DataSubMsg",
      "575:         {",
      "576:             struct Header",
      "577:             {",
      "578:                 uint8_t submessage_id = 0x15;",
      "579: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
      "580:                 uint8_t flags = 0x04;",
      "581: #else",
      "582:                 uint8_t flags = 0x05;",
      "583: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
      "584:                 uint16_t octets_to_next_header = 0x30;",
      "585:                 uint16_t extra_flags = 0;",
      "586:                 uint16_t octets_to_inline_qos = 0x2d;",
      "587:                 EntityId_t reader_id{};",
      "588:                 EntityId_t writer_id{};",
      "589:                 SequenceNumber_t sn{100};",
      "590:             };",
      "592:             struct SerializedData",
      "593:             {",
      "594:                 uint16_t encapsulation;",
      "595:                 uint16_t encapsulation_opts;",
      "596:                 octet data[24];",
      "597:             };",
      "599:             Header header;",
      "600:             SerializedData payload;",
      "601:         }",
      "602:         data;",
      "604:         uint8_t additional_bytes[8] {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};",
      "606:     };",
      "608:     UDPMessageSender fake_msg_sender;",
      "611:     reader.disable_builtin_transport().add_user_transport_to_pparams(udp_transport)",
      "612:             .history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
      "613:     writer.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
      "616:     Locator_t reader_locator;",
      "617:     ASSERT_TRUE(IPLocator::setIPv4(reader_locator, \"127.0.0.1\"));",
      "618:     reader_locator.port = 7000;",
      "619:     reader.add_to_unicast_locator_list(\"127.0.0.1\", 7000);",
      "622:     reader.init();",
      "623:     ASSERT_TRUE(reader.isInitialized());",
      "624:     writer.init();",
      "625:     ASSERT_TRUE(writer.isInitialized());",
      "627:     reader.wait_discovery();",
      "628:     writer.wait_discovery();",
      "630:     auto data = default_unbounded_helloworld_data_generator();",
      "631:     reader.startReception(data);",
      "632:     writer.send(data);",
      "633:     ASSERT_TRUE(data.empty());",
      "636:     {",
      "637:         auto writer_guid = writer.datawriter_guid();",
      "639:         MaliciousManipulatedDataOctetsToNextHeader malicious_packet{};",
      "640:         malicious_packet.sender_prefix = writer_guid.guidPrefix;",
      "641:         malicious_packet.data.header.writer_id = writer_guid.entityId;",
      "642:         malicious_packet.data.header.reader_id = reader.datareader_guid().entityId;",
      "643:         malicious_packet.data.payload.encapsulation = CDR_LE;",
      "645:         CDRMessage_t msg(0);",
      "646:         uint32_t msg_len = static_cast<uint32_t>(sizeof(malicious_packet));",
      "647:         msg.init(reinterpret_cast<octet*>(&malicious_packet), msg_len);",
      "648:         msg.length = msg_len;",
      "649:         msg.pos = msg_len;",
      "650:         fake_msg_sender.send(msg, reader_locator);",
      "651:     }",
      "654:     reader.block_for_all();",
      "655: }",
      "",
      "---------------"
    ],
    "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp": [
      "File: test/blackbox/common/UDPMessageSender.hpp -> test/blackbox/common/UDPMessageSender.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #include <asio/io_service.hpp>",
      "2: #include <asio/ip/udp.hpp>",
      "4: #include <fastdds/rtps/common/CDRMessage_t.h>",
      "5: #include <fastrtps/utils/IPLocator.h>",
      "7: using namespace eprosima::fastrtps;",
      "8: using namespace eprosima::fastrtps::rtps;",
      "10: struct UDPMessageSender",
      "11: {",
      "12:     asio::io_service service;",
      "13:     asio::ip::udp::socket socket;",
      "15:     UDPMessageSender()",
      "16:         : service()",
      "17:         , socket(service)",
      "18:     {",
      "19:         socket.open(asio::ip::udp::v4());",
      "20:     }",
      "22:     void send(",
      "23:             const CDRMessage_t& msg,",
      "24:             const Locator_t& destination)",
      "25:     {",
      "26:         std::string addr = IPLocator::toIPv4string(destination);",
      "27:         unsigned short port = static_cast<unsigned short>(destination.port);",
      "28:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
      "29:         asio::error_code ec;",
      "31:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
      "32:     }",
      "34: };",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx": [
      "File: test/blackbox/types/UnboundedHelloWorld.cxx -> test/blackbox/types/UnboundedHelloWorld.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #ifdef _WIN32",
      "24: namespace {",
      "25: char dummy;",
      "26: }  // namespace",
      "27: #endif  // _WIN32",
      "29: #include \"UnboundedHelloWorld.h\"",
      "31: #if FASTCDR_VERSION_MAJOR > 1",
      "33: #include <fastcdr/Cdr.h>",
      "36: #include <fastcdr/exceptions/BadParamException.h>",
      "37: using namespace eprosima::fastcdr::exception;",
      "39: #include <utility>",
      "44: UnboundedHelloWorld::UnboundedHelloWorld()",
      "45: {",
      "46: }",
      "48: UnboundedHelloWorld::~UnboundedHelloWorld()",
      "49: {",
      "50: }",
      "52: UnboundedHelloWorld::UnboundedHelloWorld(",
      "53:         const UnboundedHelloWorld& x)",
      "54: {",
      "55:     m_index = x.m_index;",
      "56:     m_message = x.m_message;",
      "57: }",
      "59: UnboundedHelloWorld::UnboundedHelloWorld(",
      "60:         UnboundedHelloWorld&& x) noexcept",
      "61: {",
      "62:     m_index = x.m_index;",
      "63:     m_message = std::move(x.m_message);",
      "64: }",
      "66: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
      "67:         const UnboundedHelloWorld& x)",
      "68: {",
      "70:     m_index = x.m_index;",
      "71:     m_message = x.m_message;",
      "72:     return *this;",
      "73: }",
      "75: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
      "76:         UnboundedHelloWorld&& x) noexcept",
      "77: {",
      "79:     m_index = x.m_index;",
      "80:     m_message = std::move(x.m_message);",
      "81:     return *this;",
      "82: }",
      "84: bool UnboundedHelloWorld::operator ==(",
      "85:         const UnboundedHelloWorld& x) const",
      "86: {",
      "87:     return (m_index == x.m_index &&",
      "88:            m_message == x.m_message);",
      "89: }",
      "91: bool UnboundedHelloWorld::operator !=(",
      "92:         const UnboundedHelloWorld& x) const",
      "93: {",
      "94:     return !(*this == x);",
      "95: }",
      "101: void UnboundedHelloWorld::index(",
      "102:         uint16_t _index)",
      "103: {",
      "104:     m_index = _index;",
      "105: }",
      "111: uint16_t UnboundedHelloWorld::index() const",
      "112: {",
      "113:     return m_index;",
      "114: }",
      "120: uint16_t& UnboundedHelloWorld::index()",
      "121: {",
      "122:     return m_index;",
      "123: }",
      "130: void UnboundedHelloWorld::message(",
      "131:         const std::string& _message)",
      "132: {",
      "133:     m_message = _message;",
      "134: }",
      "140: void UnboundedHelloWorld::message(",
      "141:         std::string&& _message)",
      "142: {",
      "143:     m_message = std::move(_message);",
      "144: }",
      "150: const std::string& UnboundedHelloWorld::message() const",
      "151: {",
      "152:     return m_message;",
      "153: }",
      "159: std::string& UnboundedHelloWorld::message()",
      "160: {",
      "161:     return m_message;",
      "162: }",
      "166: #include \"UnboundedHelloWorldCdrAux.ipp\"",
      "168: #endif // FASTCDR_VERSION_MAJOR > 1",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h": [
      "File: test/blackbox/types/UnboundedHelloWorld.h -> test/blackbox/types/UnboundedHelloWorld.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <fastcdr/config.h>",
      "23: #include \"UnboundedHelloWorldv1.h\"",
      "25: #if FASTCDR_VERSION_MAJOR > 1",
      "27: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
      "28: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
      "30: #include <array>",
      "31: #include <bitset>",
      "32: #include <cstdint>",
      "33: #include <map>",
      "34: #include <string>",
      "35: #include <vector>",
      "37: #include <fastcdr/cdr/fixed_size_string.hpp>",
      "38: #include <fastcdr/xcdr/external.hpp>",
      "39: #include <fastcdr/xcdr/optional.hpp>",
      "43: #if defined(_WIN32)",
      "44: #if defined(EPROSIMA_USER_DLL_EXPORT)",
      "45: #define eProsima_user_DllExport __declspec( dllexport )",
      "46: #else",
      "47: #define eProsima_user_DllExport",
      "48: #endif  // EPROSIMA_USER_DLL_EXPORT",
      "49: #else",
      "50: #define eProsima_user_DllExport",
      "51: #endif  // _WIN32",
      "53: #if defined(_WIN32)",
      "54: #if defined(EPROSIMA_USER_DLL_EXPORT)",
      "55: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
      "56: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
      "57: #else",
      "58: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
      "59: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
      "60: #else",
      "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
      "62: #endif  // EPROSIMA_USER_DLL_EXPORT",
      "63: #else",
      "64: #define UNBOUNDEDHELLOWORLD_DllAPI",
      "65: #endif // _WIN32",
      "67: namespace eprosima {",
      "68: namespace fastcdr {",
      "69: class Cdr;",
      "70: class CdrSizeCalculator;",
      "71: } // namespace fastcdr",
      "72: } // namespace eprosima",
      "82: class UnboundedHelloWorld",
      "83: {",
      "84: public:",
      "89:     eProsima_user_DllExport UnboundedHelloWorld();",
      "94:     eProsima_user_DllExport ~UnboundedHelloWorld();",
      "100:     eProsima_user_DllExport UnboundedHelloWorld(",
      "101:             const UnboundedHelloWorld& x);",
      "107:     eProsima_user_DllExport UnboundedHelloWorld(",
      "108:             UnboundedHelloWorld&& x) noexcept;",
      "114:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
      "115:             const UnboundedHelloWorld& x);",
      "121:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
      "122:             UnboundedHelloWorld&& x) noexcept;",
      "128:     eProsima_user_DllExport bool operator ==(",
      "129:             const UnboundedHelloWorld& x) const;",
      "135:     eProsima_user_DllExport bool operator !=(",
      "136:             const UnboundedHelloWorld& x) const;",
      "142:     eProsima_user_DllExport void index(",
      "143:             uint16_t _index);",
      "149:     eProsima_user_DllExport uint16_t index() const;",
      "155:     eProsima_user_DllExport uint16_t& index();",
      "162:     eProsima_user_DllExport void message(",
      "163:             const std::string& _message);",
      "169:     eProsima_user_DllExport void message(",
      "170:             std::string&& _message);",
      "176:     eProsima_user_DllExport const std::string& message() const;",
      "182:     eProsima_user_DllExport std::string& message();",
      "184: private:",
      "186:     uint16_t m_index{0};",
      "187:     std::string m_message;",
      "189: };",
      "191: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
      "195: #endif // FASTCDR_VERSION_MAJOR > 1",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl": [
      "File: test/blackbox/types/UnboundedHelloWorld.idl -> test/blackbox/types/UnboundedHelloWorld.idl",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: struct UnboundedHelloWorld",
      "2: {",
      "3:  unsigned short index;",
      "4:  string message;",
      "5: };",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp": [
      "File: test/blackbox/types/UnboundedHelloWorldCdrAux.hpp -> test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
      "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
      "25: #include \"UnboundedHelloWorld.h\"",
      "27: constexpr uint32_t UnboundedHelloWorld_max_cdr_typesize {268UL};",
      "28: constexpr uint32_t UnboundedHelloWorld_max_key_cdr_typesize {0UL};",
      "31: namespace eprosima {",
      "32: namespace fastcdr {",
      "34: class Cdr;",
      "35: class CdrSizeCalculator;",
      "39: eProsima_user_DllExport void serialize_key(",
      "40:         eprosima::fastcdr::Cdr& scdr,",
      "41:         const UnboundedHelloWorld& data);",
      "44: } // namespace fastcdr",
      "45: } // namespace eprosima",
      "47: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp": [
      "File: test/blackbox/types/UnboundedHelloWorldCdrAux.ipp -> test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
      "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
      "25: #include \"UnboundedHelloWorldCdrAux.hpp\"",
      "27: #include <fastcdr/Cdr.h>",
      "28: #include <fastcdr/CdrSizeCalculator.hpp>",
      "31: #include <fastcdr/exceptions/BadParamException.h>",
      "32: using namespace eprosima::fastcdr::exception;",
      "34: namespace eprosima {",
      "35: namespace fastcdr {",
      "39: template<>",
      "40: eProsima_user_DllExport size_t calculate_serialized_size(",
      "41:         eprosima::fastcdr::CdrSizeCalculator& calculator,",
      "42:         const UnboundedHelloWorld& data,",
      "43:         size_t& current_alignment)",
      "44: {",
      "45:     static_cast<void>(data);",
      "47:     eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();",
      "48:     size_t calculated_size {calculator.begin_calculate_type_serialized_size(",
      "49:                                 eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?",
      "50:                                 eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
      "51:                                 eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
      "52:                                 current_alignment)};",
      "55:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),",
      "56:                 data.index(), current_alignment);",
      "58:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),",
      "59:                 data.message(), current_alignment);",
      "62:     calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);",
      "64:     return calculated_size;",
      "65: }",
      "67: template<>",
      "68: eProsima_user_DllExport void serialize(",
      "69:         eprosima::fastcdr::Cdr& scdr,",
      "70:         const UnboundedHelloWorld& data)",
      "71: {",
      "72:     eprosima::fastcdr::Cdr::state current_state(scdr);",
      "73:     scdr.begin_serialize_type(current_state,",
      "74:             eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?",
      "75:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
      "76:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);",
      "78:     scdr",
      "79:         << eprosima::fastcdr::MemberId(0) << data.index()",
      "80:         << eprosima::fastcdr::MemberId(1) << data.message()",
      "81: ;",
      "82:     scdr.end_serialize_type(current_state);",
      "83: }",
      "85: template<>",
      "86: eProsima_user_DllExport void deserialize(",
      "87:         eprosima::fastcdr::Cdr& cdr,",
      "88:         UnboundedHelloWorld& data)",
      "89: {",
      "90:     cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?",
      "91:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
      "92:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
      "93:             [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool",
      "94:             {",
      "95:                 bool ret_value = true;",
      "96:                 switch (mid.id)",
      "97:                 {",
      "98:                                         case 0:",
      "99:                                                 dcdr >> data.index();",
      "100:                                             break;",
      "102:                                         case 1:",
      "103:                                                 dcdr >> data.message();",
      "104:                                             break;",
      "106:                     default:",
      "107:                         ret_value = false;",
      "108:                         break;",
      "109:                 }",
      "110:                 return ret_value;",
      "111:             });",
      "112: }",
      "114: void serialize_key(",
      "115:         eprosima::fastcdr::Cdr& scdr,",
      "116:         const UnboundedHelloWorld& data)",
      "117: {",
      "118:     static_cast<void>(scdr);",
      "119:     static_cast<void>(data);",
      "120: }",
      "124: } // namespace fastcdr",
      "125: } // namespace eprosima",
      "127: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx": [
      "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #include <fastdds/rtps/common/CdrSerialization.hpp>",
      "25: #include \"UnboundedHelloWorldPubSubTypes.h\"",
      "26: #include \"UnboundedHelloWorldCdrAux.hpp\"",
      "28: using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;",
      "29: using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;",
      "30: using DataRepresentationId_t = eprosima::fastdds::dds::DataRepresentationId_t;",
      "34: UnboundedHelloWorldPubSubType::UnboundedHelloWorldPubSubType()",
      "35: {",
      "36:     setName(\"UnboundedHelloWorld\");",
      "37:     uint32_t type_size =",
      "38: #if FASTCDR_VERSION_MAJOR == 1",
      "39:         static_cast<uint32_t>(UnboundedHelloWorld::getMaxCdrSerializedSize());",
      "40: #else",
      "41:         UnboundedHelloWorld_max_cdr_typesize;",
      "42: #endif",
      "45:     m_isGetKeyDefined = false;",
      "46:     uint32_t keyLength = UnboundedHelloWorld_max_key_cdr_typesize > 16 ? UnboundedHelloWorld_max_key_cdr_typesize : 16;",
      "47:     m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));",
      "48:     memset(m_keyBuffer, 0, keyLength);",
      "49: }",
      "51: UnboundedHelloWorldPubSubType::~UnboundedHelloWorldPubSubType()",
      "52: {",
      "53:     if (m_keyBuffer != nullptr)",
      "54:     {",
      "55:         free(m_keyBuffer);",
      "56:     }",
      "57: }",
      "59: bool UnboundedHelloWorldPubSubType::serialize(",
      "60:         void* data,",
      "61:         SerializedPayload_t* payload,",
      "62:         DataRepresentationId_t data_representation)",
      "63: {",
      "64:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
      "67:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);",
      "69:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,",
      "70:             data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
      "71:             eprosima::fastcdr::CdrVersion::XCDRv1 : eprosima::fastcdr::CdrVersion::XCDRv2);",
      "72:     payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
      "73: #if FASTCDR_VERSION_MAJOR > 1",
      "74:     ser.set_encoding_flag(",
      "75:         data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
      "76:         eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR  :",
      "77:         eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2);",
      "78: #endif // FASTCDR_VERSION_MAJOR > 1",
      "80:     try",
      "81:     {",
      "83:         ser.serialize_encapsulation();",
      "85:         ser << *p_type;",
      "86:     }",
      "87:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
      "88:     {",
      "89:         return false;",
      "90:     }",
      "93: #if FASTCDR_VERSION_MAJOR == 1",
      "94:     payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());",
      "95: #else",
      "96:     payload->length = static_cast<uint32_t>(ser.get_serialized_data_length());",
      "97: #endif // FASTCDR_VERSION_MAJOR == 1",
      "98:     return true;",
      "99: }",
      "101: bool UnboundedHelloWorldPubSubType::deserialize(",
      "102:         SerializedPayload_t* payload,",
      "103:         void* data)",
      "104: {",
      "105:     try",
      "106:     {",
      "108:         UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
      "111:         eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);",
      "114:         eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN",
      "115: #if FASTCDR_VERSION_MAJOR == 1",
      "116:                 , eprosima::fastcdr::Cdr::CdrType::DDS_CDR",
      "117: #endif // FASTCDR_VERSION_MAJOR == 1",
      "118:                 );",
      "121:         deser.read_encapsulation();",
      "122:         payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
      "125:         deser >> *p_type;",
      "126:     }",
      "127:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
      "128:     {",
      "129:         return false;",
      "130:     }",
      "132:     return true;",
      "133: }",
      "135: std::function<uint32_t()> UnboundedHelloWorldPubSubType::getSerializedSizeProvider(",
      "136:         void* data,",
      "137:         DataRepresentationId_t data_representation)",
      "138: {",
      "139:     return [data, data_representation]() -> uint32_t",
      "140:            {",
      "141: #if FASTCDR_VERSION_MAJOR == 1",
      "142:                static_cast<void>(data_representation);",
      "143:                return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<UnboundedHelloWorld*>(data))) +",
      "144:                       4u /*encapsulation*/;",
      "145: #else",
      "146:                try",
      "147:                {",
      "148:                    eprosima::fastcdr::CdrSizeCalculator calculator(",
      "149:                        data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
      "150:                        eprosima::fastcdr::CdrVersion::XCDRv1 :eprosima::fastcdr::CdrVersion::XCDRv2);",
      "151:                    size_t current_alignment {0};",
      "152:                    return static_cast<uint32_t>(calculator.calculate_serialized_size(",
      "154:                            4u /*encapsulation*/;",
      "155:                }",
      "156:                catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
      "157:                {",
      "158:                    return 0;",
      "159:                }",
      "160: #endif // FASTCDR_VERSION_MAJOR == 1",
      "161:            };",
      "162: }",
      "164: void* UnboundedHelloWorldPubSubType::createData()",
      "165: {",
      "166:     return reinterpret_cast<void*>(new UnboundedHelloWorld());",
      "167: }",
      "169: void UnboundedHelloWorldPubSubType::deleteData(",
      "170:         void* data)",
      "171: {",
      "172:     delete(reinterpret_cast<UnboundedHelloWorld*>(data));",
      "173: }",
      "175: bool UnboundedHelloWorldPubSubType::getKey(",
      "176:         void* data,",
      "177:         InstanceHandle_t* handle,",
      "178:         bool force_md5)",
      "179: {",
      "180:     if (!m_isGetKeyDefined)",
      "181:     {",
      "182:         return false;",
      "183:     }",
      "185:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
      "188:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),",
      "189:             UnboundedHelloWorld_max_key_cdr_typesize);",
      "192:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS, eprosima::fastcdr::CdrVersion::XCDRv1);",
      "193: #if FASTCDR_VERSION_MAJOR == 1",
      "194:     p_type->serializeKey(ser);",
      "195: #else",
      "196:     eprosima::fastcdr::serialize_key(ser, *p_type);",
      "197: #endif // FASTCDR_VERSION_MAJOR == 1",
      "198:     if (force_md5 || UnboundedHelloWorld_max_key_cdr_typesize > 16)",
      "199:     {",
      "200:         m_md5.init();",
      "201: #if FASTCDR_VERSION_MAJOR == 1",
      "202:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));",
      "203: #else",
      "204:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.get_serialized_data_length()));",
      "205: #endif // FASTCDR_VERSION_MAJOR == 1",
      "206:         m_md5.finalize();",
      "207:         for (uint8_t i = 0; i < 16; ++i)",
      "208:         {",
      "209:             handle->value[i] = m_md5.digest[i];",
      "210:         }",
      "211:     }",
      "212:     else",
      "213:     {",
      "214:         for (uint8_t i = 0; i < 16; ++i)",
      "215:         {",
      "216:             handle->value[i] = m_keyBuffer[i];",
      "217:         }",
      "218:     }",
      "219:     return true;",
      "220: }",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h": [
      "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.h -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
      "24: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
      "26: #include <fastdds/dds/core/policy/QosPolicies.hpp>",
      "27: #include <fastdds/dds/topic/TopicDataType.hpp>",
      "28: #include <fastdds/rtps/common/InstanceHandle.h>",
      "29: #include <fastdds/rtps/common/SerializedPayload.h>",
      "30: #include <fastrtps/utils/md5.h>",
      "32: #include \"UnboundedHelloWorld.h\"",
      "35: #if !defined(GEN_API_VER) || (GEN_API_VER != 2)",
      "36: #error \\",
      "37:     Generated UnboundedHelloWorld is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.",
      "38: #endif  // GEN_API_VER",
      "47: class UnboundedHelloWorldPubSubType : public eprosima::fastdds::dds::TopicDataType",
      "48: {",
      "49: public:",
      "51:     typedef UnboundedHelloWorld type;",
      "53:     eProsima_user_DllExport UnboundedHelloWorldPubSubType();",
      "55:     eProsima_user_DllExport ~UnboundedHelloWorldPubSubType() override;",
      "57:     eProsima_user_DllExport bool serialize(",
      "58:             void* data,",
      "59:             eprosima::fastrtps::rtps::SerializedPayload_t* payload) override",
      "60:     {",
      "61:         return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);",
      "62:     }",
      "64:     eProsima_user_DllExport bool serialize(",
      "65:             void* data,",
      "66:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
      "67:             eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;",
      "69:     eProsima_user_DllExport bool deserialize(",
      "70:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
      "71:             void* data) override;",
      "73:     eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(",
      "74:             void* data) override",
      "75:     {",
      "76:         return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);",
      "77:     }",
      "79:     eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(",
      "80:             void* data,",
      "81:             eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;",
      "83:     eProsima_user_DllExport bool getKey(",
      "84:             void* data,",
      "85:             eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,",
      "86:             bool force_md5 = false) override;",
      "88:     eProsima_user_DllExport void* createData() override;",
      "90:     eProsima_user_DllExport void deleteData(",
      "91:             void* data) override;",
      "93: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
      "94:     eProsima_user_DllExport inline bool is_bounded() const override",
      "95:     {",
      "96:         return false;",
      "97:     }",
      "99: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
      "101: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
      "102:     eProsima_user_DllExport inline bool is_plain() const override",
      "103:     {",
      "104:         return false;",
      "105:     }",
      "107:     eProsima_user_DllExport inline bool is_plain(",
      "108:         eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override",
      "109:     {",
      "110:         static_cast<void>(data_representation);",
      "111:         return false;",
      "112:     }",
      "114: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
      "116: #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
      "117:     eProsima_user_DllExport inline bool construct_sample(",
      "118:             void* memory) const override",
      "119:     {",
      "120:         static_cast<void>(memory);",
      "121:         return false;",
      "122:     }",
      "124: #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
      "126:     MD5 m_md5;",
      "127:     unsigned char* m_keyBuffer;",
      "129: };",
      "131: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx": [
      "File: test/blackbox/types/UnboundedHelloWorldv1.cxx -> test/blackbox/types/UnboundedHelloWorldv1.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #ifdef _WIN32",
      "24: namespace {",
      "25: char dummy;",
      "26: }  // namespace",
      "27: #endif  // _WIN32",
      "29: #include \"UnboundedHelloWorld.h\"",
      "31: #if FASTCDR_VERSION_MAJOR == 1",
      "33: #include <fastcdr/Cdr.h>",
      "36: #include <fastcdr/exceptions/BadParamException.h>",
      "37: using namespace eprosima::fastcdr::exception;",
      "39: #include <utility>",
      "41: namespace helper { namespace internal {",
      "43: enum class Size {",
      "44:     UInt8,",
      "45:     UInt16,",
      "46:     UInt32,",
      "47:     UInt64,",
      "48: };",
      "50: constexpr Size get_size(int s) {",
      "51:     return (s <= 8 ) ? Size::UInt8:",
      "52:            (s <= 16) ? Size::UInt16:",
      "53:            (s <= 32) ? Size::UInt32: Size::UInt64;",
      "54: }",
      "56: template<Size s>",
      "57: struct FindTypeH;",
      "59: template<>",
      "60: struct FindTypeH<Size::UInt8> {",
      "61:     using type = std::uint8_t;",
      "62: };",
      "64: template<>",
      "65: struct FindTypeH<Size::UInt16> {",
      "66:     using type = std::uint16_t;",
      "67: };",
      "69: template<>",
      "70: struct FindTypeH<Size::UInt32> {",
      "71:     using type = std::uint32_t;",
      "72: };",
      "74: template<>",
      "75: struct FindTypeH<Size::UInt64> {",
      "76:     using type = std::uint64_t;",
      "77: };",
      "78: }",
      "80: template<int S>",
      "81: struct FindType {",
      "82:     using type = typename internal::FindTypeH<internal::get_size(S)>::type;",
      "83: };",
      "84: }",
      "86: #define UnboundedHelloWorld_max_cdr_typesize 268ULL;",
      "91: UnboundedHelloWorld::UnboundedHelloWorld()",
      "92: {",
      "94:     m_index = 0;",
      "98: }",
      "100: UnboundedHelloWorld::~UnboundedHelloWorld()",
      "101: {",
      "102: }",
      "104: UnboundedHelloWorld::UnboundedHelloWorld(",
      "105:         const UnboundedHelloWorld& x)",
      "106: {",
      "107:     m_index = x.m_index;",
      "110:     m_message = x.m_message;",
      "112: }",
      "114: UnboundedHelloWorld::UnboundedHelloWorld(",
      "115:         UnboundedHelloWorld&& x) noexcept",
      "116: {",
      "117:     m_index = x.m_index;",
      "120:     m_message = std::move(x.m_message);",
      "122: }",
      "124: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
      "125:         const UnboundedHelloWorld& x)",
      "126: {",
      "127:     m_index = x.m_index;",
      "130:     m_message = x.m_message;",
      "132:     return *this;",
      "133: }",
      "135: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
      "136:         UnboundedHelloWorld&& x) noexcept",
      "137: {",
      "138:     m_index = x.m_index;",
      "141:     m_message = std::move(x.m_message);",
      "143:     return *this;",
      "144: }",
      "146: bool UnboundedHelloWorld::operator ==(",
      "147:         const UnboundedHelloWorld& x) const",
      "148: {",
      "149:     return (m_index == x.m_index &&",
      "150:            m_message == x.m_message);",
      "151: }",
      "153: bool UnboundedHelloWorld::operator !=(",
      "154:         const UnboundedHelloWorld& x) const",
      "155: {",
      "156:     return !(*this == x);",
      "157: }",
      "159: size_t UnboundedHelloWorld::getMaxCdrSerializedSize(",
      "160:         size_t current_alignment)",
      "161: {",
      "162:     static_cast<void>(current_alignment);",
      "163:     return UnboundedHelloWorld_max_cdr_typesize;",
      "164: }",
      "166: size_t UnboundedHelloWorld::getCdrSerializedSize(",
      "167:         const UnboundedHelloWorld& data,",
      "168:         size_t current_alignment)",
      "169: {",
      "170:     (void)data;",
      "171:     size_t initial_alignment = current_alignment;",
      "173:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
      "176:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;",
      "179:     return current_alignment - initial_alignment;",
      "180: }",
      "183: void UnboundedHelloWorld::serialize(",
      "184:         eprosima::fastcdr::Cdr& scdr) const",
      "185: {",
      "186:     scdr << m_index;",
      "188:     scdr << m_message.c_str();",
      "190: }",
      "192: void UnboundedHelloWorld::deserialize(",
      "193:         eprosima::fastcdr::Cdr& dcdr)",
      "194: {",
      "195:     dcdr >> m_index;",
      "199:     dcdr >> m_message;",
      "202: }",
      "205: bool UnboundedHelloWorld::isKeyDefined()",
      "206: {",
      "207:     return false;",
      "208: }",
      "210: void UnboundedHelloWorld::serializeKey(",
      "211:         eprosima::fastcdr::Cdr& scdr) const",
      "212: {",
      "213:     (void) scdr;",
      "214: }",
      "220: void UnboundedHelloWorld::index(",
      "221:         uint16_t _index)",
      "222: {",
      "223:     m_index = _index;",
      "224: }",
      "230: uint16_t UnboundedHelloWorld::index() const",
      "231: {",
      "232:     return m_index;",
      "233: }",
      "239: uint16_t& UnboundedHelloWorld::index()",
      "240: {",
      "241:     return m_index;",
      "242: }",
      "249: void UnboundedHelloWorld::message(",
      "250:         const std::string& _message)",
      "251: {",
      "252:     m_message = _message;",
      "253: }",
      "259: void UnboundedHelloWorld::message(",
      "260:         std::string&& _message)",
      "261: {",
      "262:     m_message = std::move(_message);",
      "263: }",
      "269: const std::string& UnboundedHelloWorld::message() const",
      "270: {",
      "271:     return m_message;",
      "272: }",
      "278: std::string& UnboundedHelloWorld::message()",
      "279: {",
      "280:     return m_message;",
      "281: }",
      "286: #endif // FASTCDR_VERSION_MAJOR == 1",
      "",
      "---------------"
    ],
    "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h": [
      "File: test/blackbox/types/UnboundedHelloWorldv1.h -> test/blackbox/types/UnboundedHelloWorldv1.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <fastcdr/config.h>",
      "24: #if FASTCDR_VERSION_MAJOR == 1",
      "26: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
      "27: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
      "30: #include <fastrtps/utils/fixed_size_string.hpp>",
      "32: #include <array>",
      "33: #include <bitset>",
      "34: #include <cstdint>",
      "35: #include <map>",
      "36: #include <stdint.h>",
      "37: #include <string>",
      "38: #include <vector>",
      "40: #if defined(_WIN32)",
      "41: #if defined(EPROSIMA_USER_DLL_EXPORT)",
      "42: #define eProsima_user_DllExport __declspec( dllexport )",
      "43: #else",
      "44: #define eProsima_user_DllExport",
      "45: #endif  // EPROSIMA_USER_DLL_EXPORT",
      "46: #else",
      "47: #define eProsima_user_DllExport",
      "48: #endif  // _WIN32",
      "50: #if defined(_WIN32)",
      "51: #if defined(EPROSIMA_USER_DLL_EXPORT)",
      "52: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
      "53: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
      "54: #else",
      "55: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
      "56: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
      "57: #else",
      "58: #define UNBOUNDEDHELLOWORLD_DllAPI",
      "59: #endif  // EPROSIMA_USER_DLL_EXPORT",
      "60: #else",
      "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
      "62: #endif // _WIN32",
      "64: namespace eprosima {",
      "65: namespace fastcdr {",
      "66: class Cdr;",
      "67: } // namespace fastcdr",
      "68: } // namespace eprosima",
      "78: class UnboundedHelloWorld",
      "79: {",
      "80: public:",
      "85:     eProsima_user_DllExport UnboundedHelloWorld();",
      "90:     eProsima_user_DllExport ~UnboundedHelloWorld();",
      "96:     eProsima_user_DllExport UnboundedHelloWorld(",
      "97:             const UnboundedHelloWorld& x);",
      "103:     eProsima_user_DllExport UnboundedHelloWorld(",
      "104:             UnboundedHelloWorld&& x) noexcept;",
      "110:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
      "111:             const UnboundedHelloWorld& x);",
      "117:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
      "118:             UnboundedHelloWorld&& x) noexcept;",
      "124:     eProsima_user_DllExport bool operator ==(",
      "125:             const UnboundedHelloWorld& x) const;",
      "131:     eProsima_user_DllExport bool operator !=(",
      "132:             const UnboundedHelloWorld& x) const;",
      "138:     eProsima_user_DllExport void index(",
      "139:             uint16_t _index);",
      "145:     eProsima_user_DllExport uint16_t index() const;",
      "151:     eProsima_user_DllExport uint16_t& index();",
      "158:     eProsima_user_DllExport void message(",
      "159:             const std::string& _message);",
      "165:     eProsima_user_DllExport void message(",
      "166:             std::string&& _message);",
      "172:     eProsima_user_DllExport const std::string& message() const;",
      "178:     eProsima_user_DllExport std::string& message();",
      "187:     eProsima_user_DllExport static size_t getMaxCdrSerializedSize(",
      "188:             size_t current_alignment = 0);",
      "196:     eProsima_user_DllExport static size_t getCdrSerializedSize(",
      "197:             const UnboundedHelloWorld& data,",
      "198:             size_t current_alignment = 0);",
      "206:     eProsima_user_DllExport void serialize(",
      "207:             eprosima::fastcdr::Cdr& cdr) const;",
      "213:     eProsima_user_DllExport void deserialize(",
      "214:             eprosima::fastcdr::Cdr& cdr);",
      "222:     eProsima_user_DllExport static bool isKeyDefined();",
      "228:     eProsima_user_DllExport void serializeKey(",
      "229:             eprosima::fastcdr::Cdr& cdr) const;",
      "232: private:",
      "234:     uint16_t m_index;",
      "235:     std::string m_message;",
      "237: };",
      "240: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
      "244: #endif // FASTCDR_VERSION_MAJOR == 1",
      "",
      "---------------"
    ],
    "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp": [
      "File: test/blackbox/utils/data_generators.cpp -> test/blackbox/utils/data_generators.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:     return returnedValue;",
      "279: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "281: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
      "282:         size_t max)",
      "283: {",
      "284:     uint16_t index = 1;",
      "285:     size_t maximum = max ? max : 10;",
      "286:     std::list<UnboundedHelloWorld> returnedValue(maximum);",
      "288:     std::generate(returnedValue.begin(), returnedValue.end(), [&index]",
      "289:             {",
      "290:                 UnboundedHelloWorld hello;",
      "291:                 hello.index(index);",
      "292:                 std::stringstream ss;",
      "293:                 ss << \"HelloWorld \" << index;",
      "294:                 hello.message(ss.str());",
      "295:                 ++index;",
      "296:                 return hello;",
      "297:             });",
      "299:     return returnedValue;",
      "300: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24fbedc462b70a2163ed540fa6ea9ba25acf2697",
      "candidate_info": {
        "commit_hash": "24fbedc462b70a2163ed540fa6ea9ba25acf2697",
        "repo": "eProsima/Fast-DDS",
        "commit_url": "https://github.com/eProsima/Fast-DDS/commit/24fbedc462b70a2163ed540fa6ea9ba25acf2697",
        "files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/CMakeLists.txt",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "test/blackbox/types/UnboundedHelloWorldv1.h",
          "test/blackbox/utils/data_generators.cpp"
        ],
        "message": "Merge pull request from GHSA-9m2j-qw67-ph4w\n\n* Refs #20549: Add BB test\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Fix:Fixed integer overflow causing heap overflow\n\nWhen a sub node receives a manipulated DATA sub-message, an Integer Overflow occurs in uint32_t payload_size. This causes a heap buffer overflow error. A comparison statement was inserted before the line that calculates the variable, which fixes the error.\n\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\n\n* Refs #20549: Fix review\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Refs #201549: Reset the change data fields before exiting\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n---------\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\nCo-authored-by: Mario Dominguez <mariodominguez@eprosima.com>",
        "before_after_code_files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
          "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
            "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ],
          "candidate": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
            "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp": [
          "File: src/cpp/rtps/messages/MessageReceiver.cpp -> src/cpp/rtps/messages/MessageReceiver.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:     if (dataFlag || keyFlag)",
          "844:     {",
          "845:         uint32_t payload_size;",
          "849:         if (dataFlag)",
          "850:         {",
          "",
          "[Removed Lines]",
          "846:         payload_size = smh->submessageLength -",
          "847:                 (RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);",
          "",
          "[Added Lines]",
          "846:         const uint32_t submsg_no_payload_size =",
          "847:                 RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize;",
          "850:         if (smh->submessageLength < submsg_no_payload_size)",
          "851:         {",
          "852:             EPROSIMA_LOG_WARNING(RTPS_MSG_IN, IDSTRING \"Serialized Payload avoided overflow \"",
          "853:                     \"(\" << smh->submessageLength << \"/\" << submsg_no_payload_size << \")\");",
          "854:             ch.serializedPayload.data = nullptr;",
          "855:             ch.inline_qos.data = nullptr;",
          "856:             return false;",
          "857:         }",
          "859:         payload_size = smh->submessageLength - submsg_no_payload_size;",
          "",
          "---------------"
        ],
        "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp": [
          "File: test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp -> test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:             if (subscriber_ != nullptr)",
          "335:             {",
          "337:                     subscriber_attr_.topic.topicName << std::endl;",
          "339:                 initialized_ = true;",
          "",
          "[Removed Lines]",
          "336:                 std::cout << \"Created subscriber \" << subscriber_->getGuid() << \" for topic \" <<",
          "",
          "[Added Lines]",
          "336:                 subscriber_guid_ = subscriber_->getGuid();",
          "337:                 std::cout << \"Created subscriber \" << subscriber_guid_ << \" for topic \" <<",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1412:         return participant_guid_;",
          "1413:     }",
          "1415: private:",
          "1417:     void receive_one(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1416:     const eprosima::fastrtps::rtps::GUID_t& datareader_guid() const",
          "1417:     {",
          "1418:         return subscriber_guid_;",
          "1419:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1503:     eprosima::fastrtps::SubscriberAttributes subscriber_attr_;",
          "1504:     std::string topic_name_;",
          "1505:     eprosima::fastrtps::rtps::GUID_t participant_guid_;",
          "1506:     bool initialized_;",
          "1507:     std::list<type> total_msgs_;",
          "1508:     std::mutex mutex_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1512:     eprosima::fastrtps::rtps::GUID_t subscriber_guid_;",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp": [
          "File: test/blackbox/common/BlackboxTests.hpp -> test/blackbox/common/BlackboxTests.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <unistd.h>",
          "32: #endif // if defined(_WIN32)",
          "35: #include \"../types/FixedSizedPubSubTypes.h\"",
          "36: #include \"../types/KeyedHelloWorldPubSubTypes.h\"",
          "37: #include \"../types/StringTestPubSubTypes.h\"",
          "42: #include <algorithm>",
          "43: #include <cstddef>",
          "",
          "[Removed Lines]",
          "34: #include \"../types/HelloWorldPubSubTypes.h\"",
          "38: #include \"../types/Data64kbPubSubTypes.h\"",
          "39: #include \"../types/Data1mbPubSubTypes.h\"",
          "40: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "",
          "[Added Lines]",
          "34: #include \"../types/Data1mbPubSubTypes.h\"",
          "35: #include \"../types/Data64kbPubSubTypes.h\"",
          "37: #include \"../types/HelloWorldPubSubTypes.h\"",
          "38: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "41: #include \"../types/UnboundedHelloWorldPubSubTypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170: std::list<KeyedData1mb> default_keyeddata300kb_data_generator(",
          "171:         size_t max = 0);",
          "174: extern const std::function<void(const HelloWorld&)>  default_helloworld_print;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "175:         size_t max = 0);",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp": [
          "File: test/blackbox/common/BlackboxTestsSecurity.cpp -> test/blackbox/common/BlackboxTestsSecurity.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"PubSubWriter.hpp\"",
          "28: #include \"PubSubWriterReader.hpp\"",
          "29: #include \"PubSubParticipant.hpp\"",
          "31: #include <fastdds/dds/log/Log.hpp>",
          "32: #include <fastdds/rtps/common/EntityId_t.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: };",
          "118: class SecurityPkcs : public ::testing::Test",
          "119: {",
          "120: public:",
          "",
          "[Removed Lines]",
          "92: struct UDPMessageSender",
          "93: {",
          "94:     asio::io_service service;",
          "95:     asio::ip::udp::socket socket;",
          "97:     UDPMessageSender()",
          "98:         : service()",
          "99:         , socket(service)",
          "100:     {",
          "101:         socket.open(asio::ip::udp::v4());",
          "102:     }",
          "104:     void send(",
          "105:             const CDRMessage_t& msg,",
          "106:             const Locator_t& destination)",
          "107:     {",
          "108:         std::string addr = IPLocator::toIPv4string(destination);",
          "109:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "110:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "111:         asio::error_code ec;",
          "113:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "114:     }",
          "116: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp": [
          "File: test/blackbox/common/BlackboxTestsTransportUDP.cpp -> test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"DatagramInjectionTransport.hpp\"",
          "30: #include \"PubSubReader.hpp\"",
          "31: #include \"PubSubWriter.hpp\"",
          "33: using namespace eprosima::fastrtps;",
          "34: using namespace eprosima::fastrtps::rtps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:     deliver_datagram_from_file(receivers, \"datagrams/20140.bin\");",
          "556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559: TEST(TransportUDP, MaliciousManipulatedDataOctetsToNextHeaderIgnore)",
          "560: {",
          "562:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
          "564:     PubSubWriter<UnboundedHelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
          "565:     PubSubReader<UnboundedHelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
          "567:     struct MaliciousManipulatedDataOctetsToNextHeader",
          "568:     {",
          "569:         std::array<char, 4> rtps_id{ {'R', 'T', 'P', 'S'} };",
          "570:         std::array<uint8_t, 2> protocol_version{ {2, 3} };",
          "571:         std::array<uint8_t, 2> vendor_id{ {0x01, 0x0F} };",
          "572:         GuidPrefix_t sender_prefix{};",
          "574:         struct DataSubMsg",
          "575:         {",
          "576:             struct Header",
          "577:             {",
          "578:                 uint8_t submessage_id = 0x15;",
          "579: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
          "580:                 uint8_t flags = 0x04;",
          "581: #else",
          "582:                 uint8_t flags = 0x05;",
          "583: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
          "584:                 uint16_t octets_to_next_header = 0x30;",
          "585:                 uint16_t extra_flags = 0;",
          "586:                 uint16_t octets_to_inline_qos = 0x2d;",
          "587:                 EntityId_t reader_id{};",
          "588:                 EntityId_t writer_id{};",
          "589:                 SequenceNumber_t sn{100};",
          "590:             };",
          "592:             struct SerializedData",
          "593:             {",
          "594:                 uint16_t encapsulation;",
          "595:                 uint16_t encapsulation_opts;",
          "596:                 octet data[24];",
          "597:             };",
          "599:             Header header;",
          "600:             SerializedData payload;",
          "601:         }",
          "602:         data;",
          "604:         uint8_t additional_bytes[8] {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};",
          "606:     };",
          "608:     UDPMessageSender fake_msg_sender;",
          "611:     reader.disable_builtin_transport().add_user_transport_to_pparams(udp_transport)",
          "612:             .history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "613:     writer.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "616:     Locator_t reader_locator;",
          "617:     ASSERT_TRUE(IPLocator::setIPv4(reader_locator, \"127.0.0.1\"));",
          "618:     reader_locator.port = 7000;",
          "619:     reader.add_to_unicast_locator_list(\"127.0.0.1\", 7000);",
          "622:     reader.init();",
          "623:     ASSERT_TRUE(reader.isInitialized());",
          "624:     writer.init();",
          "625:     ASSERT_TRUE(writer.isInitialized());",
          "627:     reader.wait_discovery();",
          "628:     writer.wait_discovery();",
          "630:     auto data = default_unbounded_helloworld_data_generator();",
          "631:     reader.startReception(data);",
          "632:     writer.send(data);",
          "633:     ASSERT_TRUE(data.empty());",
          "636:     {",
          "637:         auto writer_guid = writer.datawriter_guid();",
          "639:         MaliciousManipulatedDataOctetsToNextHeader malicious_packet{};",
          "640:         malicious_packet.sender_prefix = writer_guid.guidPrefix;",
          "641:         malicious_packet.data.header.writer_id = writer_guid.entityId;",
          "642:         malicious_packet.data.header.reader_id = reader.datareader_guid().entityId;",
          "643:         malicious_packet.data.payload.encapsulation = CDR_LE;",
          "645:         CDRMessage_t msg(0);",
          "646:         uint32_t msg_len = static_cast<uint32_t>(sizeof(malicious_packet));",
          "647:         msg.init(reinterpret_cast<octet*>(&malicious_packet), msg_len);",
          "648:         msg.length = msg_len;",
          "649:         msg.pos = msg_len;",
          "650:         fake_msg_sender.send(msg, reader_locator);",
          "651:     }",
          "654:     reader.block_for_all();",
          "655: }",
          "",
          "---------------"
        ],
        "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp": [
          "File: test/blackbox/common/UDPMessageSender.hpp -> test/blackbox/common/UDPMessageSender.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <asio/io_service.hpp>",
          "2: #include <asio/ip/udp.hpp>",
          "4: #include <fastdds/rtps/common/CDRMessage_t.h>",
          "5: #include <fastrtps/utils/IPLocator.h>",
          "7: using namespace eprosima::fastrtps;",
          "8: using namespace eprosima::fastrtps::rtps;",
          "10: struct UDPMessageSender",
          "11: {",
          "12:     asio::io_service service;",
          "13:     asio::ip::udp::socket socket;",
          "15:     UDPMessageSender()",
          "16:         : service()",
          "17:         , socket(service)",
          "18:     {",
          "19:         socket.open(asio::ip::udp::v4());",
          "20:     }",
          "22:     void send(",
          "23:             const CDRMessage_t& msg,",
          "24:             const Locator_t& destination)",
          "25:     {",
          "26:         std::string addr = IPLocator::toIPv4string(destination);",
          "27:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "28:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "29:         asio::error_code ec;",
          "31:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "32:     }",
          "34: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorld.cxx -> test/blackbox/types/UnboundedHelloWorld.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "31: #if FASTCDR_VERSION_MAJOR > 1",
          "33: #include <fastcdr/Cdr.h>",
          "36: #include <fastcdr/exceptions/BadParamException.h>",
          "37: using namespace eprosima::fastcdr::exception;",
          "39: #include <utility>",
          "44: UnboundedHelloWorld::UnboundedHelloWorld()",
          "45: {",
          "46: }",
          "48: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "49: {",
          "50: }",
          "52: UnboundedHelloWorld::UnboundedHelloWorld(",
          "53:         const UnboundedHelloWorld& x)",
          "54: {",
          "55:     m_index = x.m_index;",
          "56:     m_message = x.m_message;",
          "57: }",
          "59: UnboundedHelloWorld::UnboundedHelloWorld(",
          "60:         UnboundedHelloWorld&& x) noexcept",
          "61: {",
          "62:     m_index = x.m_index;",
          "63:     m_message = std::move(x.m_message);",
          "64: }",
          "66: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "67:         const UnboundedHelloWorld& x)",
          "68: {",
          "70:     m_index = x.m_index;",
          "71:     m_message = x.m_message;",
          "72:     return *this;",
          "73: }",
          "75: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "76:         UnboundedHelloWorld&& x) noexcept",
          "77: {",
          "79:     m_index = x.m_index;",
          "80:     m_message = std::move(x.m_message);",
          "81:     return *this;",
          "82: }",
          "84: bool UnboundedHelloWorld::operator ==(",
          "85:         const UnboundedHelloWorld& x) const",
          "86: {",
          "87:     return (m_index == x.m_index &&",
          "88:            m_message == x.m_message);",
          "89: }",
          "91: bool UnboundedHelloWorld::operator !=(",
          "92:         const UnboundedHelloWorld& x) const",
          "93: {",
          "94:     return !(*this == x);",
          "95: }",
          "101: void UnboundedHelloWorld::index(",
          "102:         uint16_t _index)",
          "103: {",
          "104:     m_index = _index;",
          "105: }",
          "111: uint16_t UnboundedHelloWorld::index() const",
          "112: {",
          "113:     return m_index;",
          "114: }",
          "120: uint16_t& UnboundedHelloWorld::index()",
          "121: {",
          "122:     return m_index;",
          "123: }",
          "130: void UnboundedHelloWorld::message(",
          "131:         const std::string& _message)",
          "132: {",
          "133:     m_message = _message;",
          "134: }",
          "140: void UnboundedHelloWorld::message(",
          "141:         std::string&& _message)",
          "142: {",
          "143:     m_message = std::move(_message);",
          "144: }",
          "150: const std::string& UnboundedHelloWorld::message() const",
          "151: {",
          "152:     return m_message;",
          "153: }",
          "159: std::string& UnboundedHelloWorld::message()",
          "160: {",
          "161:     return m_message;",
          "162: }",
          "166: #include \"UnboundedHelloWorldCdrAux.ipp\"",
          "168: #endif // FASTCDR_VERSION_MAJOR > 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h": [
          "File: test/blackbox/types/UnboundedHelloWorld.h -> test/blackbox/types/UnboundedHelloWorld.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <fastcdr/config.h>",
          "23: #include \"UnboundedHelloWorldv1.h\"",
          "25: #if FASTCDR_VERSION_MAJOR > 1",
          "27: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "28: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "30: #include <array>",
          "31: #include <bitset>",
          "32: #include <cstdint>",
          "33: #include <map>",
          "34: #include <string>",
          "35: #include <vector>",
          "37: #include <fastcdr/cdr/fixed_size_string.hpp>",
          "38: #include <fastcdr/xcdr/external.hpp>",
          "39: #include <fastcdr/xcdr/optional.hpp>",
          "43: #if defined(_WIN32)",
          "44: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "45: #define eProsima_user_DllExport __declspec( dllexport )",
          "46: #else",
          "47: #define eProsima_user_DllExport",
          "48: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "49: #else",
          "50: #define eProsima_user_DllExport",
          "51: #endif  // _WIN32",
          "53: #if defined(_WIN32)",
          "54: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "55: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
          "56: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
          "57: #else",
          "58: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
          "59: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
          "60: #else",
          "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "62: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "63: #else",
          "64: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "65: #endif // _WIN32",
          "67: namespace eprosima {",
          "68: namespace fastcdr {",
          "69: class Cdr;",
          "70: class CdrSizeCalculator;",
          "71: } // namespace fastcdr",
          "72: } // namespace eprosima",
          "82: class UnboundedHelloWorld",
          "83: {",
          "84: public:",
          "89:     eProsima_user_DllExport UnboundedHelloWorld();",
          "94:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "100:     eProsima_user_DllExport UnboundedHelloWorld(",
          "101:             const UnboundedHelloWorld& x);",
          "107:     eProsima_user_DllExport UnboundedHelloWorld(",
          "108:             UnboundedHelloWorld&& x) noexcept;",
          "114:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "115:             const UnboundedHelloWorld& x);",
          "121:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "122:             UnboundedHelloWorld&& x) noexcept;",
          "128:     eProsima_user_DllExport bool operator ==(",
          "129:             const UnboundedHelloWorld& x) const;",
          "135:     eProsima_user_DllExport bool operator !=(",
          "136:             const UnboundedHelloWorld& x) const;",
          "142:     eProsima_user_DllExport void index(",
          "143:             uint16_t _index);",
          "149:     eProsima_user_DllExport uint16_t index() const;",
          "155:     eProsima_user_DllExport uint16_t& index();",
          "162:     eProsima_user_DllExport void message(",
          "163:             const std::string& _message);",
          "169:     eProsima_user_DllExport void message(",
          "170:             std::string&& _message);",
          "176:     eProsima_user_DllExport const std::string& message() const;",
          "182:     eProsima_user_DllExport std::string& message();",
          "184: private:",
          "186:     uint16_t m_index{0};",
          "187:     std::string m_message;",
          "189: };",
          "191: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "195: #endif // FASTCDR_VERSION_MAJOR > 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl": [
          "File: test/blackbox/types/UnboundedHelloWorld.idl -> test/blackbox/types/UnboundedHelloWorld.idl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: struct UnboundedHelloWorld",
          "2: {",
          "3:  unsigned short index;",
          "4:  string message;",
          "5: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp": [
          "File: test/blackbox/types/UnboundedHelloWorldCdrAux.hpp -> test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "25: #include \"UnboundedHelloWorld.h\"",
          "27: constexpr uint32_t UnboundedHelloWorld_max_cdr_typesize {268UL};",
          "28: constexpr uint32_t UnboundedHelloWorld_max_key_cdr_typesize {0UL};",
          "31: namespace eprosima {",
          "32: namespace fastcdr {",
          "34: class Cdr;",
          "35: class CdrSizeCalculator;",
          "39: eProsima_user_DllExport void serialize_key(",
          "40:         eprosima::fastcdr::Cdr& scdr,",
          "41:         const UnboundedHelloWorld& data);",
          "44: } // namespace fastcdr",
          "45: } // namespace eprosima",
          "47: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp": [
          "File: test/blackbox/types/UnboundedHelloWorldCdrAux.ipp -> test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "25: #include \"UnboundedHelloWorldCdrAux.hpp\"",
          "27: #include <fastcdr/Cdr.h>",
          "28: #include <fastcdr/CdrSizeCalculator.hpp>",
          "31: #include <fastcdr/exceptions/BadParamException.h>",
          "32: using namespace eprosima::fastcdr::exception;",
          "34: namespace eprosima {",
          "35: namespace fastcdr {",
          "39: template<>",
          "40: eProsima_user_DllExport size_t calculate_serialized_size(",
          "41:         eprosima::fastcdr::CdrSizeCalculator& calculator,",
          "42:         const UnboundedHelloWorld& data,",
          "43:         size_t& current_alignment)",
          "44: {",
          "45:     static_cast<void>(data);",
          "47:     eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();",
          "48:     size_t calculated_size {calculator.begin_calculate_type_serialized_size(",
          "49:                                 eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?",
          "50:                                 eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "51:                                 eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
          "52:                                 current_alignment)};",
          "55:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),",
          "56:                 data.index(), current_alignment);",
          "58:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),",
          "59:                 data.message(), current_alignment);",
          "62:     calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);",
          "64:     return calculated_size;",
          "65: }",
          "67: template<>",
          "68: eProsima_user_DllExport void serialize(",
          "69:         eprosima::fastcdr::Cdr& scdr,",
          "70:         const UnboundedHelloWorld& data)",
          "71: {",
          "72:     eprosima::fastcdr::Cdr::state current_state(scdr);",
          "73:     scdr.begin_serialize_type(current_state,",
          "74:             eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?",
          "75:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "76:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);",
          "78:     scdr",
          "79:         << eprosima::fastcdr::MemberId(0) << data.index()",
          "80:         << eprosima::fastcdr::MemberId(1) << data.message()",
          "81: ;",
          "82:     scdr.end_serialize_type(current_state);",
          "83: }",
          "85: template<>",
          "86: eProsima_user_DllExport void deserialize(",
          "87:         eprosima::fastcdr::Cdr& cdr,",
          "88:         UnboundedHelloWorld& data)",
          "89: {",
          "90:     cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?",
          "91:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "92:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
          "93:             [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool",
          "94:             {",
          "95:                 bool ret_value = true;",
          "96:                 switch (mid.id)",
          "97:                 {",
          "98:                                         case 0:",
          "99:                                                 dcdr >> data.index();",
          "100:                                             break;",
          "102:                                         case 1:",
          "103:                                                 dcdr >> data.message();",
          "104:                                             break;",
          "106:                     default:",
          "107:                         ret_value = false;",
          "108:                         break;",
          "109:                 }",
          "110:                 return ret_value;",
          "111:             });",
          "112: }",
          "114: void serialize_key(",
          "115:         eprosima::fastcdr::Cdr& scdr,",
          "116:         const UnboundedHelloWorld& data)",
          "117: {",
          "118:     static_cast<void>(scdr);",
          "119:     static_cast<void>(data);",
          "120: }",
          "124: } // namespace fastcdr",
          "125: } // namespace eprosima",
          "127: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <fastdds/rtps/common/CdrSerialization.hpp>",
          "25: #include \"UnboundedHelloWorldPubSubTypes.h\"",
          "26: #include \"UnboundedHelloWorldCdrAux.hpp\"",
          "28: using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;",
          "29: using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;",
          "30: using DataRepresentationId_t = eprosima::fastdds::dds::DataRepresentationId_t;",
          "34: UnboundedHelloWorldPubSubType::UnboundedHelloWorldPubSubType()",
          "35: {",
          "36:     setName(\"UnboundedHelloWorld\");",
          "37:     uint32_t type_size =",
          "38: #if FASTCDR_VERSION_MAJOR == 1",
          "39:         static_cast<uint32_t>(UnboundedHelloWorld::getMaxCdrSerializedSize());",
          "40: #else",
          "41:         UnboundedHelloWorld_max_cdr_typesize;",
          "42: #endif",
          "45:     m_isGetKeyDefined = false;",
          "46:     uint32_t keyLength = UnboundedHelloWorld_max_key_cdr_typesize > 16 ? UnboundedHelloWorld_max_key_cdr_typesize : 16;",
          "47:     m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));",
          "48:     memset(m_keyBuffer, 0, keyLength);",
          "49: }",
          "51: UnboundedHelloWorldPubSubType::~UnboundedHelloWorldPubSubType()",
          "52: {",
          "53:     if (m_keyBuffer != nullptr)",
          "54:     {",
          "55:         free(m_keyBuffer);",
          "56:     }",
          "57: }",
          "59: bool UnboundedHelloWorldPubSubType::serialize(",
          "60:         void* data,",
          "61:         SerializedPayload_t* payload,",
          "62:         DataRepresentationId_t data_representation)",
          "63: {",
          "64:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "67:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);",
          "69:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,",
          "70:             data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
          "71:             eprosima::fastcdr::CdrVersion::XCDRv1 : eprosima::fastcdr::CdrVersion::XCDRv2);",
          "72:     payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "73: #if FASTCDR_VERSION_MAJOR > 1",
          "74:     ser.set_encoding_flag(",
          "75:         data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
          "76:         eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR  :",
          "77:         eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2);",
          "78: #endif // FASTCDR_VERSION_MAJOR > 1",
          "80:     try",
          "81:     {",
          "83:         ser.serialize_encapsulation();",
          "85:         ser << *p_type;",
          "86:     }",
          "87:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "88:     {",
          "89:         return false;",
          "90:     }",
          "93: #if FASTCDR_VERSION_MAJOR == 1",
          "94:     payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());",
          "95: #else",
          "96:     payload->length = static_cast<uint32_t>(ser.get_serialized_data_length());",
          "97: #endif // FASTCDR_VERSION_MAJOR == 1",
          "98:     return true;",
          "99: }",
          "101: bool UnboundedHelloWorldPubSubType::deserialize(",
          "102:         SerializedPayload_t* payload,",
          "103:         void* data)",
          "104: {",
          "105:     try",
          "106:     {",
          "108:         UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "111:         eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);",
          "114:         eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN",
          "115: #if FASTCDR_VERSION_MAJOR == 1",
          "116:                 , eprosima::fastcdr::Cdr::CdrType::DDS_CDR",
          "117: #endif // FASTCDR_VERSION_MAJOR == 1",
          "118:                 );",
          "121:         deser.read_encapsulation();",
          "122:         payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "125:         deser >> *p_type;",
          "126:     }",
          "127:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "128:     {",
          "129:         return false;",
          "130:     }",
          "132:     return true;",
          "133: }",
          "135: std::function<uint32_t()> UnboundedHelloWorldPubSubType::getSerializedSizeProvider(",
          "136:         void* data,",
          "137:         DataRepresentationId_t data_representation)",
          "138: {",
          "139:     return [data, data_representation]() -> uint32_t",
          "140:            {",
          "141: #if FASTCDR_VERSION_MAJOR == 1",
          "142:                static_cast<void>(data_representation);",
          "143:                return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<UnboundedHelloWorld*>(data))) +",
          "144:                       4u /*encapsulation*/;",
          "145: #else",
          "146:                try",
          "147:                {",
          "148:                    eprosima::fastcdr::CdrSizeCalculator calculator(",
          "149:                        data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
          "150:                        eprosima::fastcdr::CdrVersion::XCDRv1 :eprosima::fastcdr::CdrVersion::XCDRv2);",
          "151:                    size_t current_alignment {0};",
          "152:                    return static_cast<uint32_t>(calculator.calculate_serialized_size(",
          "154:                            4u /*encapsulation*/;",
          "155:                }",
          "156:                catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "157:                {",
          "158:                    return 0;",
          "159:                }",
          "160: #endif // FASTCDR_VERSION_MAJOR == 1",
          "161:            };",
          "162: }",
          "164: void* UnboundedHelloWorldPubSubType::createData()",
          "165: {",
          "166:     return reinterpret_cast<void*>(new UnboundedHelloWorld());",
          "167: }",
          "169: void UnboundedHelloWorldPubSubType::deleteData(",
          "170:         void* data)",
          "171: {",
          "172:     delete(reinterpret_cast<UnboundedHelloWorld*>(data));",
          "173: }",
          "175: bool UnboundedHelloWorldPubSubType::getKey(",
          "176:         void* data,",
          "177:         InstanceHandle_t* handle,",
          "178:         bool force_md5)",
          "179: {",
          "180:     if (!m_isGetKeyDefined)",
          "181:     {",
          "182:         return false;",
          "183:     }",
          "185:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "188:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),",
          "189:             UnboundedHelloWorld_max_key_cdr_typesize);",
          "192:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS, eprosima::fastcdr::CdrVersion::XCDRv1);",
          "193: #if FASTCDR_VERSION_MAJOR == 1",
          "194:     p_type->serializeKey(ser);",
          "195: #else",
          "196:     eprosima::fastcdr::serialize_key(ser, *p_type);",
          "197: #endif // FASTCDR_VERSION_MAJOR == 1",
          "198:     if (force_md5 || UnboundedHelloWorld_max_key_cdr_typesize > 16)",
          "199:     {",
          "200:         m_md5.init();",
          "201: #if FASTCDR_VERSION_MAJOR == 1",
          "202:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));",
          "203: #else",
          "204:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.get_serialized_data_length()));",
          "205: #endif // FASTCDR_VERSION_MAJOR == 1",
          "206:         m_md5.finalize();",
          "207:         for (uint8_t i = 0; i < 16; ++i)",
          "208:         {",
          "209:             handle->value[i] = m_md5.digest[i];",
          "210:         }",
          "211:     }",
          "212:     else",
          "213:     {",
          "214:         for (uint8_t i = 0; i < 16; ++i)",
          "215:         {",
          "216:             handle->value[i] = m_keyBuffer[i];",
          "217:         }",
          "218:     }",
          "219:     return true;",
          "220: }",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.h -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "24: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "26: #include <fastdds/dds/core/policy/QosPolicies.hpp>",
          "27: #include <fastdds/dds/topic/TopicDataType.hpp>",
          "28: #include <fastdds/rtps/common/InstanceHandle.h>",
          "29: #include <fastdds/rtps/common/SerializedPayload.h>",
          "30: #include <fastrtps/utils/md5.h>",
          "32: #include \"UnboundedHelloWorld.h\"",
          "35: #if !defined(GEN_API_VER) || (GEN_API_VER != 2)",
          "36: #error \\",
          "37:     Generated UnboundedHelloWorld is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.",
          "38: #endif  // GEN_API_VER",
          "47: class UnboundedHelloWorldPubSubType : public eprosima::fastdds::dds::TopicDataType",
          "48: {",
          "49: public:",
          "51:     typedef UnboundedHelloWorld type;",
          "53:     eProsima_user_DllExport UnboundedHelloWorldPubSubType();",
          "55:     eProsima_user_DllExport ~UnboundedHelloWorldPubSubType() override;",
          "57:     eProsima_user_DllExport bool serialize(",
          "58:             void* data,",
          "59:             eprosima::fastrtps::rtps::SerializedPayload_t* payload) override",
          "60:     {",
          "61:         return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);",
          "62:     }",
          "64:     eProsima_user_DllExport bool serialize(",
          "65:             void* data,",
          "66:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
          "67:             eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;",
          "69:     eProsima_user_DllExport bool deserialize(",
          "70:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
          "71:             void* data) override;",
          "73:     eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(",
          "74:             void* data) override",
          "75:     {",
          "76:         return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);",
          "77:     }",
          "79:     eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(",
          "80:             void* data,",
          "81:             eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;",
          "83:     eProsima_user_DllExport bool getKey(",
          "84:             void* data,",
          "85:             eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,",
          "86:             bool force_md5 = false) override;",
          "88:     eProsima_user_DllExport void* createData() override;",
          "90:     eProsima_user_DllExport void deleteData(",
          "91:             void* data) override;",
          "93: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "94:     eProsima_user_DllExport inline bool is_bounded() const override",
          "95:     {",
          "96:         return false;",
          "97:     }",
          "99: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "101: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "102:     eProsima_user_DllExport inline bool is_plain() const override",
          "103:     {",
          "104:         return false;",
          "105:     }",
          "107:     eProsima_user_DllExport inline bool is_plain(",
          "108:         eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override",
          "109:     {",
          "110:         static_cast<void>(data_representation);",
          "111:         return false;",
          "112:     }",
          "114: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "116: #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "117:     eProsima_user_DllExport inline bool construct_sample(",
          "118:             void* memory) const override",
          "119:     {",
          "120:         static_cast<void>(memory);",
          "121:         return false;",
          "122:     }",
          "124: #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "126:     MD5 m_md5;",
          "127:     unsigned char* m_keyBuffer;",
          "129: };",
          "131: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldv1.cxx -> test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "31: #if FASTCDR_VERSION_MAJOR == 1",
          "33: #include <fastcdr/Cdr.h>",
          "36: #include <fastcdr/exceptions/BadParamException.h>",
          "37: using namespace eprosima::fastcdr::exception;",
          "39: #include <utility>",
          "41: namespace helper { namespace internal {",
          "43: enum class Size {",
          "44:     UInt8,",
          "45:     UInt16,",
          "46:     UInt32,",
          "47:     UInt64,",
          "48: };",
          "50: constexpr Size get_size(int s) {",
          "51:     return (s <= 8 ) ? Size::UInt8:",
          "52:            (s <= 16) ? Size::UInt16:",
          "53:            (s <= 32) ? Size::UInt32: Size::UInt64;",
          "54: }",
          "56: template<Size s>",
          "57: struct FindTypeH;",
          "59: template<>",
          "60: struct FindTypeH<Size::UInt8> {",
          "61:     using type = std::uint8_t;",
          "62: };",
          "64: template<>",
          "65: struct FindTypeH<Size::UInt16> {",
          "66:     using type = std::uint16_t;",
          "67: };",
          "69: template<>",
          "70: struct FindTypeH<Size::UInt32> {",
          "71:     using type = std::uint32_t;",
          "72: };",
          "74: template<>",
          "75: struct FindTypeH<Size::UInt64> {",
          "76:     using type = std::uint64_t;",
          "77: };",
          "78: }",
          "80: template<int S>",
          "81: struct FindType {",
          "82:     using type = typename internal::FindTypeH<internal::get_size(S)>::type;",
          "83: };",
          "84: }",
          "86: #define UnboundedHelloWorld_max_cdr_typesize 268ULL;",
          "91: UnboundedHelloWorld::UnboundedHelloWorld()",
          "92: {",
          "94:     m_index = 0;",
          "98: }",
          "100: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "101: {",
          "102: }",
          "104: UnboundedHelloWorld::UnboundedHelloWorld(",
          "105:         const UnboundedHelloWorld& x)",
          "106: {",
          "107:     m_index = x.m_index;",
          "110:     m_message = x.m_message;",
          "112: }",
          "114: UnboundedHelloWorld::UnboundedHelloWorld(",
          "115:         UnboundedHelloWorld&& x) noexcept",
          "116: {",
          "117:     m_index = x.m_index;",
          "120:     m_message = std::move(x.m_message);",
          "122: }",
          "124: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "125:         const UnboundedHelloWorld& x)",
          "126: {",
          "127:     m_index = x.m_index;",
          "130:     m_message = x.m_message;",
          "132:     return *this;",
          "133: }",
          "135: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "136:         UnboundedHelloWorld&& x) noexcept",
          "137: {",
          "138:     m_index = x.m_index;",
          "141:     m_message = std::move(x.m_message);",
          "143:     return *this;",
          "144: }",
          "146: bool UnboundedHelloWorld::operator ==(",
          "147:         const UnboundedHelloWorld& x) const",
          "148: {",
          "149:     return (m_index == x.m_index &&",
          "150:            m_message == x.m_message);",
          "151: }",
          "153: bool UnboundedHelloWorld::operator !=(",
          "154:         const UnboundedHelloWorld& x) const",
          "155: {",
          "156:     return !(*this == x);",
          "157: }",
          "159: size_t UnboundedHelloWorld::getMaxCdrSerializedSize(",
          "160:         size_t current_alignment)",
          "161: {",
          "162:     static_cast<void>(current_alignment);",
          "163:     return UnboundedHelloWorld_max_cdr_typesize;",
          "164: }",
          "166: size_t UnboundedHelloWorld::getCdrSerializedSize(",
          "167:         const UnboundedHelloWorld& data,",
          "168:         size_t current_alignment)",
          "169: {",
          "170:     (void)data;",
          "171:     size_t initial_alignment = current_alignment;",
          "173:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
          "176:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;",
          "179:     return current_alignment - initial_alignment;",
          "180: }",
          "183: void UnboundedHelloWorld::serialize(",
          "184:         eprosima::fastcdr::Cdr& scdr) const",
          "185: {",
          "186:     scdr << m_index;",
          "188:     scdr << m_message.c_str();",
          "190: }",
          "192: void UnboundedHelloWorld::deserialize(",
          "193:         eprosima::fastcdr::Cdr& dcdr)",
          "194: {",
          "195:     dcdr >> m_index;",
          "199:     dcdr >> m_message;",
          "202: }",
          "205: bool UnboundedHelloWorld::isKeyDefined()",
          "206: {",
          "207:     return false;",
          "208: }",
          "210: void UnboundedHelloWorld::serializeKey(",
          "211:         eprosima::fastcdr::Cdr& scdr) const",
          "212: {",
          "213:     (void) scdr;",
          "214: }",
          "220: void UnboundedHelloWorld::index(",
          "221:         uint16_t _index)",
          "222: {",
          "223:     m_index = _index;",
          "224: }",
          "230: uint16_t UnboundedHelloWorld::index() const",
          "231: {",
          "232:     return m_index;",
          "233: }",
          "239: uint16_t& UnboundedHelloWorld::index()",
          "240: {",
          "241:     return m_index;",
          "242: }",
          "249: void UnboundedHelloWorld::message(",
          "250:         const std::string& _message)",
          "251: {",
          "252:     m_message = _message;",
          "253: }",
          "259: void UnboundedHelloWorld::message(",
          "260:         std::string&& _message)",
          "261: {",
          "262:     m_message = std::move(_message);",
          "263: }",
          "269: const std::string& UnboundedHelloWorld::message() const",
          "270: {",
          "271:     return m_message;",
          "272: }",
          "278: std::string& UnboundedHelloWorld::message()",
          "279: {",
          "280:     return m_message;",
          "281: }",
          "286: #endif // FASTCDR_VERSION_MAJOR == 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h": [
          "File: test/blackbox/types/UnboundedHelloWorldv1.h -> test/blackbox/types/UnboundedHelloWorldv1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <fastcdr/config.h>",
          "24: #if FASTCDR_VERSION_MAJOR == 1",
          "26: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "27: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "30: #include <fastrtps/utils/fixed_size_string.hpp>",
          "32: #include <array>",
          "33: #include <bitset>",
          "34: #include <cstdint>",
          "35: #include <map>",
          "36: #include <stdint.h>",
          "37: #include <string>",
          "38: #include <vector>",
          "40: #if defined(_WIN32)",
          "41: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "42: #define eProsima_user_DllExport __declspec( dllexport )",
          "43: #else",
          "44: #define eProsima_user_DllExport",
          "45: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "46: #else",
          "47: #define eProsima_user_DllExport",
          "48: #endif  // _WIN32",
          "50: #if defined(_WIN32)",
          "51: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "52: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
          "53: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
          "54: #else",
          "55: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
          "56: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
          "57: #else",
          "58: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "59: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "60: #else",
          "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "62: #endif // _WIN32",
          "64: namespace eprosima {",
          "65: namespace fastcdr {",
          "66: class Cdr;",
          "67: } // namespace fastcdr",
          "68: } // namespace eprosima",
          "78: class UnboundedHelloWorld",
          "79: {",
          "80: public:",
          "85:     eProsima_user_DllExport UnboundedHelloWorld();",
          "90:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "96:     eProsima_user_DllExport UnboundedHelloWorld(",
          "97:             const UnboundedHelloWorld& x);",
          "103:     eProsima_user_DllExport UnboundedHelloWorld(",
          "104:             UnboundedHelloWorld&& x) noexcept;",
          "110:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "111:             const UnboundedHelloWorld& x);",
          "117:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "118:             UnboundedHelloWorld&& x) noexcept;",
          "124:     eProsima_user_DllExport bool operator ==(",
          "125:             const UnboundedHelloWorld& x) const;",
          "131:     eProsima_user_DllExport bool operator !=(",
          "132:             const UnboundedHelloWorld& x) const;",
          "138:     eProsima_user_DllExport void index(",
          "139:             uint16_t _index);",
          "145:     eProsima_user_DllExport uint16_t index() const;",
          "151:     eProsima_user_DllExport uint16_t& index();",
          "158:     eProsima_user_DllExport void message(",
          "159:             const std::string& _message);",
          "165:     eProsima_user_DllExport void message(",
          "166:             std::string&& _message);",
          "172:     eProsima_user_DllExport const std::string& message() const;",
          "178:     eProsima_user_DllExport std::string& message();",
          "187:     eProsima_user_DllExport static size_t getMaxCdrSerializedSize(",
          "188:             size_t current_alignment = 0);",
          "196:     eProsima_user_DllExport static size_t getCdrSerializedSize(",
          "197:             const UnboundedHelloWorld& data,",
          "198:             size_t current_alignment = 0);",
          "206:     eProsima_user_DllExport void serialize(",
          "207:             eprosima::fastcdr::Cdr& cdr) const;",
          "213:     eProsima_user_DllExport void deserialize(",
          "214:             eprosima::fastcdr::Cdr& cdr);",
          "222:     eProsima_user_DllExport static bool isKeyDefined();",
          "228:     eProsima_user_DllExport void serializeKey(",
          "229:             eprosima::fastcdr::Cdr& cdr) const;",
          "232: private:",
          "234:     uint16_t m_index;",
          "235:     std::string m_message;",
          "237: };",
          "240: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "244: #endif // FASTCDR_VERSION_MAJOR == 1",
          "",
          "---------------"
        ],
        "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp": [
          "File: test/blackbox/utils/data_generators.cpp -> test/blackbox/utils/data_generators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:     return returnedValue;",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "282:         size_t max)",
          "283: {",
          "284:     uint16_t index = 1;",
          "285:     size_t maximum = max ? max : 10;",
          "286:     std::list<UnboundedHelloWorld> returnedValue(maximum);",
          "288:     std::generate(returnedValue.begin(), returnedValue.end(), [&index]",
          "289:             {",
          "290:                 UnboundedHelloWorld hello;",
          "291:                 hello.index(index);",
          "292:                 std::stringstream ss;",
          "293:                 ss << \"HelloWorld \" << index;",
          "294:                 hello.message(ss.str());",
          "295:                 ++index;",
          "296:                 return hello;",
          "297:             });",
          "299:     return returnedValue;",
          "300: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d6539b4f6c702910b2b47d4e9a24fe84ea8052d",
      "candidate_info": {
        "commit_hash": "4d6539b4f6c702910b2b47d4e9a24fe84ea8052d",
        "repo": "eProsima/Fast-DDS",
        "commit_url": "https://github.com/eProsima/Fast-DDS/commit/4d6539b4f6c702910b2b47d4e9a24fe84ea8052d",
        "files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/CMakeLists.txt",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "test/blackbox/types/UnboundedHelloWorldv1.h",
          "test/blackbox/utils/data_generators.cpp"
        ],
        "message": "Merge pull request from GHSA-9m2j-qw67-ph4w\n\n* Refs #20549: Add BB test\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Fix:Fixed integer overflow causing heap overflow\n\nWhen a sub node receives a manipulated DATA sub-message, an Integer Overflow occurs in uint32_t payload_size. This causes a heap buffer overflow error. A comparison statement was inserted before the line that calculates the variable, which fixes the error.\n\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\n\n* Refs #20549: Fix review\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Refs #201549: Reset the change data fields before exiting\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n---------\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\nCo-authored-by: Mario Dominguez <mariodominguez@eprosima.com>",
        "before_after_code_files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
          "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
            "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ],
          "candidate": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
            "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp": [
          "File: src/cpp/rtps/messages/MessageReceiver.cpp -> src/cpp/rtps/messages/MessageReceiver.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "842:     if (dataFlag || keyFlag)",
          "843:     {",
          "844:         uint32_t payload_size;",
          "848:         if (dataFlag)",
          "849:         {",
          "",
          "[Removed Lines]",
          "845:         payload_size = smh->submessageLength -",
          "846:                 (RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);",
          "",
          "[Added Lines]",
          "845:         const uint32_t submsg_no_payload_size =",
          "846:                 RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize;",
          "849:         if (smh->submessageLength < submsg_no_payload_size)",
          "850:         {",
          "851:             EPROSIMA_LOG_WARNING(RTPS_MSG_IN, IDSTRING \"Serialized Payload avoided overflow \"",
          "852:                     \"(\" << smh->submessageLength << \"/\" << submsg_no_payload_size << \")\");",
          "853:             ch.serializedPayload.data = nullptr;",
          "854:             ch.inline_qos.data = nullptr;",
          "855:             return false;",
          "856:         }",
          "858:         payload_size = smh->submessageLength - submsg_no_payload_size;",
          "",
          "---------------"
        ],
        "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp": [
          "File: test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp -> test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:             if (subscriber_ != nullptr)",
          "335:             {",
          "337:                     subscriber_attr_.topic.topicName << std::endl;",
          "339:                 initialized_ = true;",
          "",
          "[Removed Lines]",
          "336:                 std::cout << \"Created subscriber \" << subscriber_->getGuid() << \" for topic \" <<",
          "",
          "[Added Lines]",
          "336:                 subscriber_guid_ = subscriber_->getGuid();",
          "337:                 std::cout << \"Created subscriber \" << subscriber_guid_ << \" for topic \" <<",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1414:         return participant_guid_;",
          "1415:     }",
          "1417: private:",
          "1419:     void receive_one(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1418:     const eprosima::fastrtps::rtps::GUID_t& datareader_guid() const",
          "1419:     {",
          "1420:         return subscriber_guid_;",
          "1421:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1505:     eprosima::fastrtps::SubscriberAttributes subscriber_attr_;",
          "1506:     std::string topic_name_;",
          "1507:     eprosima::fastrtps::rtps::GUID_t participant_guid_;",
          "1508:     bool initialized_;",
          "1509:     std::list<type> total_msgs_;",
          "1510:     std::mutex mutex_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1514:     eprosima::fastrtps::rtps::GUID_t subscriber_guid_;",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp": [
          "File: test/blackbox/common/BlackboxTests.hpp -> test/blackbox/common/BlackboxTests.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <unistd.h>",
          "29: #endif // if defined(_WIN32)",
          "32: #include \"../types/FixedSizedPubSubTypes.h\"",
          "33: #include \"../types/KeyedHelloWorldPubSubTypes.h\"",
          "34: #include \"../types/StringTestPubSubTypes.h\"",
          "39: #include <algorithm>",
          "40: #include <cstddef>",
          "",
          "[Removed Lines]",
          "31: #include \"../types/HelloWorldPubSubTypes.h\"",
          "35: #include \"../types/Data64kbPubSubTypes.h\"",
          "36: #include \"../types/Data1mbPubSubTypes.h\"",
          "37: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "",
          "[Added Lines]",
          "31: #include \"../types/Data1mbPubSubTypes.h\"",
          "32: #include \"../types/Data64kbPubSubTypes.h\"",
          "34: #include \"../types/HelloWorldPubSubTypes.h\"",
          "35: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "38: #include \"../types/UnboundedHelloWorldPubSubTypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167: std::list<KeyedData1mb> default_keyeddata300kb_data_generator(",
          "168:         size_t max = 0);",
          "171: extern const std::function<void(const HelloWorld&)>  default_helloworld_print;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "172:         size_t max = 0);",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp": [
          "File: test/blackbox/common/BlackboxTestsSecurity.cpp -> test/blackbox/common/BlackboxTestsSecurity.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"PubSubWriter.hpp\"",
          "28: #include \"PubSubWriterReader.hpp\"",
          "29: #include \"PubSubParticipant.hpp\"",
          "31: #include <fastdds/dds/log/Log.hpp>",
          "32: #include <fastdds/rtps/common/EntityId_t.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: };",
          "118: class SecurityPkcs : public ::testing::Test",
          "119: {",
          "120: public:",
          "",
          "[Removed Lines]",
          "92: struct UDPMessageSender",
          "93: {",
          "94:     asio::io_service service;",
          "95:     asio::ip::udp::socket socket;",
          "97:     UDPMessageSender()",
          "98:         : service()",
          "99:         , socket(service)",
          "100:     {",
          "101:         socket.open(asio::ip::udp::v4());",
          "102:     }",
          "104:     void send(",
          "105:             const CDRMessage_t& msg,",
          "106:             const Locator_t& destination)",
          "107:     {",
          "108:         std::string addr = IPLocator::toIPv4string(destination);",
          "109:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "110:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "111:         asio::error_code ec;",
          "113:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "114:     }",
          "116: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp": [
          "File: test/blackbox/common/BlackboxTestsTransportUDP.cpp -> test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"DatagramInjectionTransport.hpp\"",
          "30: #include \"PubSubReader.hpp\"",
          "31: #include \"PubSubWriter.hpp\"",
          "33: using namespace eprosima::fastrtps;",
          "34: using namespace eprosima::fastrtps::rtps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:     deliver_datagram_from_file(receivers, \"datagrams/20140.bin\");",
          "552: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: TEST(TransportUDP, MaliciousManipulatedDataOctetsToNextHeaderIgnore)",
          "556: {",
          "558:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
          "560:     PubSubWriter<UnboundedHelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
          "561:     PubSubReader<UnboundedHelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
          "563:     struct MaliciousManipulatedDataOctetsToNextHeader",
          "564:     {",
          "565:         std::array<char, 4> rtps_id{ {'R', 'T', 'P', 'S'} };",
          "566:         std::array<uint8_t, 2> protocol_version{ {2, 3} };",
          "567:         std::array<uint8_t, 2> vendor_id{ {0x01, 0x0F} };",
          "568:         GuidPrefix_t sender_prefix{};",
          "570:         struct DataSubMsg",
          "571:         {",
          "572:             struct Header",
          "573:             {",
          "574:                 uint8_t submessage_id = 0x15;",
          "575: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
          "576:                 uint8_t flags = 0x04;",
          "577: #else",
          "578:                 uint8_t flags = 0x05;",
          "579: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
          "580:                 uint16_t octets_to_next_header = 0x30;",
          "581:                 uint16_t extra_flags = 0;",
          "582:                 uint16_t octets_to_inline_qos = 0x2d;",
          "583:                 EntityId_t reader_id{};",
          "584:                 EntityId_t writer_id{};",
          "585:                 SequenceNumber_t sn{100};",
          "586:             };",
          "588:             struct SerializedData",
          "589:             {",
          "590:                 uint16_t encapsulation;",
          "591:                 uint16_t encapsulation_opts;",
          "592:                 octet data[24];",
          "593:             };",
          "595:             Header header;",
          "596:             SerializedData payload;",
          "597:         }",
          "598:         data;",
          "600:         uint8_t additional_bytes[8] {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};",
          "602:     };",
          "604:     UDPMessageSender fake_msg_sender;",
          "607:     reader.disable_builtin_transport().add_user_transport_to_pparams(udp_transport)",
          "608:             .history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "609:     writer.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "612:     Locator_t reader_locator;",
          "613:     ASSERT_TRUE(IPLocator::setIPv4(reader_locator, \"127.0.0.1\"));",
          "614:     reader_locator.port = 7000;",
          "615:     reader.add_to_unicast_locator_list(\"127.0.0.1\", 7000);",
          "618:     reader.init();",
          "619:     ASSERT_TRUE(reader.isInitialized());",
          "620:     writer.init();",
          "621:     ASSERT_TRUE(writer.isInitialized());",
          "623:     reader.wait_discovery();",
          "624:     writer.wait_discovery();",
          "626:     auto data = default_unbounded_helloworld_data_generator();",
          "627:     reader.startReception(data);",
          "628:     writer.send(data);",
          "629:     ASSERT_TRUE(data.empty());",
          "632:     {",
          "633:         auto writer_guid = writer.datawriter_guid();",
          "635:         MaliciousManipulatedDataOctetsToNextHeader malicious_packet{};",
          "636:         malicious_packet.sender_prefix = writer_guid.guidPrefix;",
          "637:         malicious_packet.data.header.writer_id = writer_guid.entityId;",
          "638:         malicious_packet.data.header.reader_id = reader.datareader_guid().entityId;",
          "639:         malicious_packet.data.payload.encapsulation = CDR_LE;",
          "641:         CDRMessage_t msg(0);",
          "642:         uint32_t msg_len = static_cast<uint32_t>(sizeof(malicious_packet));",
          "643:         msg.init(reinterpret_cast<octet*>(&malicious_packet), msg_len);",
          "644:         msg.length = msg_len;",
          "645:         msg.pos = msg_len;",
          "646:         fake_msg_sender.send(msg, reader_locator);",
          "647:     }",
          "650:     reader.block_for_all();",
          "651: }",
          "",
          "---------------"
        ],
        "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp": [
          "File: test/blackbox/common/UDPMessageSender.hpp -> test/blackbox/common/UDPMessageSender.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <asio/io_service.hpp>",
          "2: #include <asio/ip/udp.hpp>",
          "4: #include <fastdds/rtps/common/CDRMessage_t.h>",
          "5: #include <fastrtps/utils/IPLocator.h>",
          "7: using namespace eprosima::fastrtps;",
          "8: using namespace eprosima::fastrtps::rtps;",
          "10: struct UDPMessageSender",
          "11: {",
          "12:     asio::io_service service;",
          "13:     asio::ip::udp::socket socket;",
          "15:     UDPMessageSender()",
          "16:         : service()",
          "17:         , socket(service)",
          "18:     {",
          "19:         socket.open(asio::ip::udp::v4());",
          "20:     }",
          "22:     void send(",
          "23:             const CDRMessage_t& msg,",
          "24:             const Locator_t& destination)",
          "25:     {",
          "26:         std::string addr = IPLocator::toIPv4string(destination);",
          "27:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "28:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "29:         asio::error_code ec;",
          "31:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "32:     }",
          "34: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorld.cxx -> test/blackbox/types/UnboundedHelloWorld.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "30: #include <fastcdr/Cdr.h>",
          "32: #include <fastcdr/exceptions/BadParamException.h>",
          "33: using namespace eprosima::fastcdr::exception;",
          "35: #include <utility>",
          "37: #define UnboundedHelloWorld_max_cdr_typesize 264ULL;",
          "38: #define UnboundedHelloWorld_max_key_cdr_typesize 0ULL;",
          "40: UnboundedHelloWorld::UnboundedHelloWorld()",
          "41: {",
          "43:     m_index = 0;",
          "45:     m_message =\"\";",
          "47: }",
          "49: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "50: {",
          "53: }",
          "55: UnboundedHelloWorld::UnboundedHelloWorld(",
          "56:         const UnboundedHelloWorld& x)",
          "57: {",
          "58:     m_index = x.m_index;",
          "59:     m_message = x.m_message;",
          "60: }",
          "62: UnboundedHelloWorld::UnboundedHelloWorld(",
          "63:         UnboundedHelloWorld&& x) noexcept",
          "64: {",
          "65:     m_index = x.m_index;",
          "66:     m_message = std::move(x.m_message);",
          "67: }",
          "69: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "70:         const UnboundedHelloWorld& x)",
          "71: {",
          "73:     m_index = x.m_index;",
          "74:     m_message = x.m_message;",
          "76:     return *this;",
          "77: }",
          "79: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "80:         UnboundedHelloWorld&& x) noexcept",
          "81: {",
          "83:     m_index = x.m_index;",
          "84:     m_message = std::move(x.m_message);",
          "86:     return *this;",
          "87: }",
          "89: bool UnboundedHelloWorld::operator ==(",
          "90:         const UnboundedHelloWorld& x) const",
          "91: {",
          "93:     return (m_index == x.m_index && m_message == x.m_message);",
          "94: }",
          "96: bool UnboundedHelloWorld::operator !=(",
          "97:         const UnboundedHelloWorld& x) const",
          "98: {",
          "99:     return !(*this == x);",
          "100: }",
          "102: size_t UnboundedHelloWorld::getMaxCdrSerializedSize(",
          "103:         size_t current_alignment)",
          "104: {",
          "105:     static_cast<void>(current_alignment);",
          "106:     return UnboundedHelloWorld_max_cdr_typesize;",
          "107: }",
          "109: size_t UnboundedHelloWorld::getCdrSerializedSize(",
          "110:         const UnboundedHelloWorld& data,",
          "111:         size_t current_alignment)",
          "112: {",
          "113:     (void)data;",
          "114:     size_t initial_alignment = current_alignment;",
          "117:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
          "120:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;",
          "123:     return current_alignment - initial_alignment;",
          "124: }",
          "126: void UnboundedHelloWorld::serialize(",
          "127:         eprosima::fastcdr::Cdr& scdr) const",
          "128: {",
          "130:     scdr << m_index;",
          "131:     scdr << m_message.c_str();",
          "133: }",
          "135: void UnboundedHelloWorld::deserialize(",
          "136:         eprosima::fastcdr::Cdr& dcdr)",
          "137: {",
          "139:     dcdr >> m_index;",
          "140:     dcdr >> m_message;",
          "141: }",
          "147: void UnboundedHelloWorld::index(",
          "148:         uint16_t _index)",
          "149: {",
          "150:     m_index = _index;",
          "151: }",
          "157: uint16_t UnboundedHelloWorld::index() const",
          "158: {",
          "159:     return m_index;",
          "160: }",
          "166: uint16_t& UnboundedHelloWorld::index()",
          "167: {",
          "168:     return m_index;",
          "169: }",
          "175: void UnboundedHelloWorld::message(",
          "176:         const std::string& _message)",
          "177: {",
          "178:     m_message = _message;",
          "179: }",
          "185: void UnboundedHelloWorld::message(",
          "186:         std::string&& _message)",
          "187: {",
          "188:     m_message = std::move(_message);",
          "189: }",
          "195: const std::string& UnboundedHelloWorld::message() const",
          "196: {",
          "197:     return m_message;",
          "198: }",
          "204: std::string& UnboundedHelloWorld::message()",
          "205: {",
          "206:     return m_message;",
          "207: }",
          "210: size_t UnboundedHelloWorld::getKeyMaxCdrSerializedSize(",
          "211:         size_t current_alignment)",
          "212: {",
          "213:     static_cast<void>(current_alignment);",
          "214:     return UnboundedHelloWorld_max_key_cdr_typesize;",
          "215: }",
          "217: bool UnboundedHelloWorld::isKeyDefined()",
          "218: {",
          "219:     return false;",
          "220: }",
          "222: void UnboundedHelloWorld::serializeKey(",
          "223:         eprosima::fastcdr::Cdr& scdr) const",
          "224: {",
          "225:     (void) scdr;",
          "226: }",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h": [
          "File: test/blackbox/types/UnboundedHelloWorld.h -> test/blackbox/types/UnboundedHelloWorld.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "26: #include <fastrtps/utils/fixed_size_string.hpp>",
          "28: #include <stdint.h>",
          "29: #include <array>",
          "30: #include <string>",
          "31: #include <vector>",
          "32: #include <map>",
          "33: #include <bitset>",
          "35: #if defined(_WIN32)",
          "36: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "37: #define eProsima_user_DllExport __declspec( dllexport )",
          "38: #else",
          "39: #define eProsima_user_DllExport",
          "40: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "41: #else",
          "42: #define eProsima_user_DllExport",
          "43: #endif  // _WIN32",
          "45: #if defined(_WIN32)",
          "46: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "47: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
          "48: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
          "49: #else",
          "50: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
          "51: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
          "52: #else",
          "53: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "54: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "55: #else",
          "56: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "57: #endif // _WIN32",
          "59: namespace eprosima {",
          "60: namespace fastcdr {",
          "61: class Cdr;",
          "62: } // namespace fastcdr",
          "63: } // namespace eprosima",
          "70: class UnboundedHelloWorld",
          "71: {",
          "72: public:",
          "77:     eProsima_user_DllExport UnboundedHelloWorld();",
          "82:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "88:     eProsima_user_DllExport UnboundedHelloWorld(",
          "89:             const UnboundedHelloWorld& x);",
          "95:     eProsima_user_DllExport UnboundedHelloWorld(",
          "96:             UnboundedHelloWorld&& x) noexcept;",
          "102:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "103:             const UnboundedHelloWorld& x);",
          "109:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "110:             UnboundedHelloWorld&& x) noexcept;",
          "116:     eProsima_user_DllExport bool operator ==(",
          "117:             const UnboundedHelloWorld& x) const;",
          "123:     eProsima_user_DllExport bool operator !=(",
          "124:             const UnboundedHelloWorld& x) const;",
          "130:     eProsima_user_DllExport void index(",
          "131:             uint16_t _index);",
          "137:     eProsima_user_DllExport uint16_t index() const;",
          "143:     eProsima_user_DllExport uint16_t& index();",
          "149:     eProsima_user_DllExport void message(",
          "150:             const std::string& _message);",
          "156:     eProsima_user_DllExport void message(",
          "157:             std::string&& _message);",
          "163:     eProsima_user_DllExport const std::string& message() const;",
          "169:     eProsima_user_DllExport std::string& message();",
          "177:     eProsima_user_DllExport static size_t getMaxCdrSerializedSize(",
          "178:             size_t current_alignment = 0);",
          "186:     eProsima_user_DllExport static size_t getCdrSerializedSize(",
          "187:             const UnboundedHelloWorld& data,",
          "188:             size_t current_alignment = 0);",
          "195:     eProsima_user_DllExport void serialize(",
          "196:             eprosima::fastcdr::Cdr& cdr) const;",
          "202:     eProsima_user_DllExport void deserialize(",
          "203:             eprosima::fastcdr::Cdr& cdr);",
          "213:     eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(",
          "214:             size_t current_alignment = 0);",
          "219:     eProsima_user_DllExport static bool isKeyDefined();",
          "225:     eProsima_user_DllExport void serializeKey(",
          "226:             eprosima::fastcdr::Cdr& cdr) const;",
          "228: private:",
          "230:     uint16_t m_index;",
          "231:     std::string m_message;",
          "233: };",
          "235: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl": [
          "File: test/blackbox/types/UnboundedHelloWorld.idl -> test/blackbox/types/UnboundedHelloWorld.idl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: struct UnboundedHelloWorld",
          "2: {",
          "3:  unsigned short index;",
          "4:  string message;",
          "5: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp": [
          "File: test/blackbox/types/UnboundedHelloWorldCdrAux.hpp -> test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "25: #include \"UnboundedHelloWorld.h\"",
          "27: constexpr uint32_t UnboundedHelloWorld_max_cdr_typesize {268UL};",
          "28: constexpr uint32_t UnboundedHelloWorld_max_key_cdr_typesize {0UL};",
          "31: namespace eprosima {",
          "32: namespace fastcdr {",
          "34: class Cdr;",
          "35: class CdrSizeCalculator;",
          "39: eProsima_user_DllExport void serialize_key(",
          "40:         eprosima::fastcdr::Cdr& scdr,",
          "41:         const UnboundedHelloWorld& data);",
          "44: } // namespace fastcdr",
          "45: } // namespace eprosima",
          "47: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp": [
          "File: test/blackbox/types/UnboundedHelloWorldCdrAux.ipp -> test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "25: #include \"UnboundedHelloWorldCdrAux.hpp\"",
          "27: #include <fastcdr/Cdr.h>",
          "28: #include <fastcdr/CdrSizeCalculator.hpp>",
          "31: #include <fastcdr/exceptions/BadParamException.h>",
          "32: using namespace eprosima::fastcdr::exception;",
          "34: namespace eprosima {",
          "35: namespace fastcdr {",
          "39: template<>",
          "40: eProsima_user_DllExport size_t calculate_serialized_size(",
          "41:         eprosima::fastcdr::CdrSizeCalculator& calculator,",
          "42:         const UnboundedHelloWorld& data,",
          "43:         size_t& current_alignment)",
          "44: {",
          "45:     static_cast<void>(data);",
          "47:     eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();",
          "48:     size_t calculated_size {calculator.begin_calculate_type_serialized_size(",
          "49:                                 eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?",
          "50:                                 eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "51:                                 eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
          "52:                                 current_alignment)};",
          "55:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),",
          "56:                 data.index(), current_alignment);",
          "58:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),",
          "59:                 data.message(), current_alignment);",
          "62:     calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);",
          "64:     return calculated_size;",
          "65: }",
          "67: template<>",
          "68: eProsima_user_DllExport void serialize(",
          "69:         eprosima::fastcdr::Cdr& scdr,",
          "70:         const UnboundedHelloWorld& data)",
          "71: {",
          "72:     eprosima::fastcdr::Cdr::state current_state(scdr);",
          "73:     scdr.begin_serialize_type(current_state,",
          "74:             eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?",
          "75:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "76:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);",
          "78:     scdr",
          "79:         << eprosima::fastcdr::MemberId(0) << data.index()",
          "80:         << eprosima::fastcdr::MemberId(1) << data.message()",
          "81: ;",
          "82:     scdr.end_serialize_type(current_state);",
          "83: }",
          "85: template<>",
          "86: eProsima_user_DllExport void deserialize(",
          "87:         eprosima::fastcdr::Cdr& cdr,",
          "88:         UnboundedHelloWorld& data)",
          "89: {",
          "90:     cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?",
          "91:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "92:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
          "93:             [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool",
          "94:             {",
          "95:                 bool ret_value = true;",
          "96:                 switch (mid.id)",
          "97:                 {",
          "98:                                         case 0:",
          "99:                                                 dcdr >> data.index();",
          "100:                                             break;",
          "102:                                         case 1:",
          "103:                                                 dcdr >> data.message();",
          "104:                                             break;",
          "106:                     default:",
          "107:                         ret_value = false;",
          "108:                         break;",
          "109:                 }",
          "110:                 return ret_value;",
          "111:             });",
          "112: }",
          "114: void serialize_key(",
          "115:         eprosima::fastcdr::Cdr& scdr,",
          "116:         const UnboundedHelloWorld& data)",
          "117: {",
          "118:     static_cast<void>(scdr);",
          "119:     static_cast<void>(data);",
          "120: }",
          "124: } // namespace fastcdr",
          "125: } // namespace eprosima",
          "127: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <fastcdr/FastBuffer.h>",
          "24: #include <fastcdr/Cdr.h>",
          "26: #include \"UnboundedHelloWorldPubSubTypes.h\"",
          "28: using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;",
          "29: using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;",
          "31: UnboundedHelloWorldPubSubType::UnboundedHelloWorldPubSubType()",
          "32: {",
          "33:     setName(\"UnboundedHelloWorld\");",
          "34:     auto type_size = UnboundedHelloWorld::getMaxCdrSerializedSize();",
          "37:     m_isGetKeyDefined = UnboundedHelloWorld::isKeyDefined();",
          "38:     size_t keyLength = UnboundedHelloWorld::getKeyMaxCdrSerializedSize() > 16 ?",
          "39:             UnboundedHelloWorld::getKeyMaxCdrSerializedSize() : 16;",
          "40:     m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));",
          "41:     memset(m_keyBuffer, 0, keyLength);",
          "42: }",
          "44: UnboundedHelloWorldPubSubType::~UnboundedHelloWorldPubSubType()",
          "45: {",
          "46:     if (m_keyBuffer != nullptr)",
          "47:     {",
          "48:         free(m_keyBuffer);",
          "49:     }",
          "50: }",
          "52: bool UnboundedHelloWorldPubSubType::serialize(",
          "53:         void* data,",
          "54:         SerializedPayload_t* payload)",
          "55: {",
          "56:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "59:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);",
          "61:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);",
          "62:     payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "64:     try",
          "65:     {",
          "67:         ser.serialize_encapsulation();",
          "69:         p_type->serialize(ser);",
          "70:     }",
          "71:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "72:     {",
          "73:         return false;",
          "74:     }",
          "77:     payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());",
          "78:     return true;",
          "79: }",
          "81: bool UnboundedHelloWorldPubSubType::deserialize(",
          "82:         SerializedPayload_t* payload,",
          "83:         void* data)",
          "84: {",
          "85:     try",
          "86:     {",
          "88:         UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "91:         eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);",
          "94:         eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);",
          "97:         deser.read_encapsulation();",
          "98:         payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "101:         p_type->deserialize(deser);",
          "102:     }",
          "103:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "104:     {",
          "105:         return false;",
          "106:     }",
          "108:     return true;",
          "109: }",
          "111: std::function<uint32_t()> UnboundedHelloWorldPubSubType::getSerializedSizeProvider(",
          "112:         void* data)",
          "113: {",
          "114:     return [data]() -> uint32_t",
          "115:            {",
          "116:                return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<UnboundedHelloWorld*>(data))) +",
          "117:                       4u /*encapsulation*/;",
          "118:            };",
          "119: }",
          "121: void* UnboundedHelloWorldPubSubType::createData()",
          "122: {",
          "123:     return reinterpret_cast<void*>(new UnboundedHelloWorld());",
          "124: }",
          "126: void UnboundedHelloWorldPubSubType::deleteData(",
          "127:         void* data)",
          "128: {",
          "129:     delete(reinterpret_cast<UnboundedHelloWorld*>(data));",
          "130: }",
          "132: bool UnboundedHelloWorldPubSubType::getKey(",
          "133:         void* data,",
          "134:         InstanceHandle_t* handle,",
          "135:         bool force_md5)",
          "136: {",
          "137:     if (!m_isGetKeyDefined)",
          "138:     {",
          "139:         return false;",
          "140:     }",
          "142:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "145:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),",
          "146:             UnboundedHelloWorld::getKeyMaxCdrSerializedSize());",
          "149:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);",
          "150:     p_type->serializeKey(ser);",
          "151:     if (force_md5 || UnboundedHelloWorld::getKeyMaxCdrSerializedSize() > 16)",
          "152:     {",
          "153:         m_md5.init();",
          "154:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));",
          "155:         m_md5.finalize();",
          "156:         for (uint8_t i = 0; i < 16; ++i)",
          "157:         {",
          "158:             handle->value[i] = m_md5.digest[i];",
          "159:         }",
          "160:     }",
          "161:     else",
          "162:     {",
          "163:         for (uint8_t i = 0; i < 16; ++i)",
          "164:         {",
          "165:             handle->value[i] = m_keyBuffer[i];",
          "166:         }",
          "167:     }",
          "168:     return true;",
          "169: }",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.h -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "24: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "26: #include <fastdds/dds/topic/TopicDataType.hpp>",
          "27: #include <fastrtps/utils/md5.h>",
          "29: #include \"UnboundedHelloWorld.h\"",
          "32: #if !defined(GEN_API_VER) || (GEN_API_VER != 1)",
          "33: #error \\",
          "34:     Generated UnboundedHelloWorld is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.",
          "35: #endif  // GEN_API_VER",
          "42: class UnboundedHelloWorldPubSubType : public eprosima::fastdds::dds::TopicDataType",
          "43: {",
          "44: public:",
          "46:     typedef UnboundedHelloWorld type;",
          "48:     eProsima_user_DllExport UnboundedHelloWorldPubSubType();",
          "50:     eProsima_user_DllExport virtual ~UnboundedHelloWorldPubSubType() override;",
          "52:     eProsima_user_DllExport virtual bool serialize(",
          "53:             void* data,",
          "54:             eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;",
          "56:     eProsima_user_DllExport virtual bool deserialize(",
          "57:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
          "58:             void* data) override;",
          "60:     eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(",
          "61:             void* data) override;",
          "63:     eProsima_user_DllExport virtual bool getKey(",
          "64:             void* data,",
          "65:             eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,",
          "66:             bool force_md5 = false) override;",
          "68:     eProsima_user_DllExport virtual void* createData() override;",
          "70:     eProsima_user_DllExport virtual void deleteData(",
          "71:             void* data) override;",
          "73: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "74:     eProsima_user_DllExport inline bool is_bounded() const override",
          "75:     {",
          "76:         return false;",
          "77:     }",
          "79: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "81: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "82:     eProsima_user_DllExport inline bool is_plain() const override",
          "83:     {",
          "84:         return false;",
          "85:     }",
          "87: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "89: #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "90:     eProsima_user_DllExport inline bool construct_sample(",
          "91:             void* memory) const override",
          "92:     {",
          "93:         (void)memory;",
          "94:         return false;",
          "95:     }",
          "97: #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "99:     MD5 m_md5;",
          "100:     unsigned char* m_keyBuffer;",
          "102: };",
          "104: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldv1.cxx -> test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "31: #if FASTCDR_VERSION_MAJOR == 1",
          "33: #include <fastcdr/Cdr.h>",
          "36: #include <fastcdr/exceptions/BadParamException.h>",
          "37: using namespace eprosima::fastcdr::exception;",
          "39: #include <utility>",
          "41: namespace helper { namespace internal {",
          "43: enum class Size {",
          "44:     UInt8,",
          "45:     UInt16,",
          "46:     UInt32,",
          "47:     UInt64,",
          "48: };",
          "50: constexpr Size get_size(int s) {",
          "51:     return (s <= 8 ) ? Size::UInt8:",
          "52:            (s <= 16) ? Size::UInt16:",
          "53:            (s <= 32) ? Size::UInt32: Size::UInt64;",
          "54: }",
          "56: template<Size s>",
          "57: struct FindTypeH;",
          "59: template<>",
          "60: struct FindTypeH<Size::UInt8> {",
          "61:     using type = std::uint8_t;",
          "62: };",
          "64: template<>",
          "65: struct FindTypeH<Size::UInt16> {",
          "66:     using type = std::uint16_t;",
          "67: };",
          "69: template<>",
          "70: struct FindTypeH<Size::UInt32> {",
          "71:     using type = std::uint32_t;",
          "72: };",
          "74: template<>",
          "75: struct FindTypeH<Size::UInt64> {",
          "76:     using type = std::uint64_t;",
          "77: };",
          "78: }",
          "80: template<int S>",
          "81: struct FindType {",
          "82:     using type = typename internal::FindTypeH<internal::get_size(S)>::type;",
          "83: };",
          "84: }",
          "86: #define UnboundedHelloWorld_max_cdr_typesize 268ULL;",
          "91: UnboundedHelloWorld::UnboundedHelloWorld()",
          "92: {",
          "94:     m_index = 0;",
          "98: }",
          "100: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "101: {",
          "102: }",
          "104: UnboundedHelloWorld::UnboundedHelloWorld(",
          "105:         const UnboundedHelloWorld& x)",
          "106: {",
          "107:     m_index = x.m_index;",
          "110:     m_message = x.m_message;",
          "112: }",
          "114: UnboundedHelloWorld::UnboundedHelloWorld(",
          "115:         UnboundedHelloWorld&& x) noexcept",
          "116: {",
          "117:     m_index = x.m_index;",
          "120:     m_message = std::move(x.m_message);",
          "122: }",
          "124: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "125:         const UnboundedHelloWorld& x)",
          "126: {",
          "127:     m_index = x.m_index;",
          "130:     m_message = x.m_message;",
          "132:     return *this;",
          "133: }",
          "135: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "136:         UnboundedHelloWorld&& x) noexcept",
          "137: {",
          "138:     m_index = x.m_index;",
          "141:     m_message = std::move(x.m_message);",
          "143:     return *this;",
          "144: }",
          "146: bool UnboundedHelloWorld::operator ==(",
          "147:         const UnboundedHelloWorld& x) const",
          "148: {",
          "149:     return (m_index == x.m_index &&",
          "150:            m_message == x.m_message);",
          "151: }",
          "153: bool UnboundedHelloWorld::operator !=(",
          "154:         const UnboundedHelloWorld& x) const",
          "155: {",
          "156:     return !(*this == x);",
          "157: }",
          "159: size_t UnboundedHelloWorld::getMaxCdrSerializedSize(",
          "160:         size_t current_alignment)",
          "161: {",
          "162:     static_cast<void>(current_alignment);",
          "163:     return UnboundedHelloWorld_max_cdr_typesize;",
          "164: }",
          "166: size_t UnboundedHelloWorld::getCdrSerializedSize(",
          "167:         const UnboundedHelloWorld& data,",
          "168:         size_t current_alignment)",
          "169: {",
          "170:     (void)data;",
          "171:     size_t initial_alignment = current_alignment;",
          "173:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
          "176:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;",
          "179:     return current_alignment - initial_alignment;",
          "180: }",
          "183: void UnboundedHelloWorld::serialize(",
          "184:         eprosima::fastcdr::Cdr& scdr) const",
          "185: {",
          "186:     scdr << m_index;",
          "188:     scdr << m_message.c_str();",
          "190: }",
          "192: void UnboundedHelloWorld::deserialize(",
          "193:         eprosima::fastcdr::Cdr& dcdr)",
          "194: {",
          "195:     dcdr >> m_index;",
          "199:     dcdr >> m_message;",
          "202: }",
          "205: bool UnboundedHelloWorld::isKeyDefined()",
          "206: {",
          "207:     return false;",
          "208: }",
          "210: void UnboundedHelloWorld::serializeKey(",
          "211:         eprosima::fastcdr::Cdr& scdr) const",
          "212: {",
          "213:     (void) scdr;",
          "214: }",
          "220: void UnboundedHelloWorld::index(",
          "221:         uint16_t _index)",
          "222: {",
          "223:     m_index = _index;",
          "224: }",
          "230: uint16_t UnboundedHelloWorld::index() const",
          "231: {",
          "232:     return m_index;",
          "233: }",
          "239: uint16_t& UnboundedHelloWorld::index()",
          "240: {",
          "241:     return m_index;",
          "242: }",
          "249: void UnboundedHelloWorld::message(",
          "250:         const std::string& _message)",
          "251: {",
          "252:     m_message = _message;",
          "253: }",
          "259: void UnboundedHelloWorld::message(",
          "260:         std::string&& _message)",
          "261: {",
          "262:     m_message = std::move(_message);",
          "263: }",
          "269: const std::string& UnboundedHelloWorld::message() const",
          "270: {",
          "271:     return m_message;",
          "272: }",
          "278: std::string& UnboundedHelloWorld::message()",
          "279: {",
          "280:     return m_message;",
          "281: }",
          "286: #endif // FASTCDR_VERSION_MAJOR == 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h": [
          "File: test/blackbox/types/UnboundedHelloWorldv1.h -> test/blackbox/types/UnboundedHelloWorldv1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <fastcdr/config.h>",
          "24: #if FASTCDR_VERSION_MAJOR == 1",
          "26: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "27: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "30: #include <fastrtps/utils/fixed_size_string.hpp>",
          "32: #include <array>",
          "33: #include <bitset>",
          "34: #include <cstdint>",
          "35: #include <map>",
          "36: #include <stdint.h>",
          "37: #include <string>",
          "38: #include <vector>",
          "40: #if defined(_WIN32)",
          "41: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "42: #define eProsima_user_DllExport __declspec( dllexport )",
          "43: #else",
          "44: #define eProsima_user_DllExport",
          "45: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "46: #else",
          "47: #define eProsima_user_DllExport",
          "48: #endif  // _WIN32",
          "50: #if defined(_WIN32)",
          "51: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "52: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
          "53: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
          "54: #else",
          "55: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
          "56: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
          "57: #else",
          "58: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "59: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "60: #else",
          "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "62: #endif // _WIN32",
          "64: namespace eprosima {",
          "65: namespace fastcdr {",
          "66: class Cdr;",
          "67: } // namespace fastcdr",
          "68: } // namespace eprosima",
          "78: class UnboundedHelloWorld",
          "79: {",
          "80: public:",
          "85:     eProsima_user_DllExport UnboundedHelloWorld();",
          "90:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "96:     eProsima_user_DllExport UnboundedHelloWorld(",
          "97:             const UnboundedHelloWorld& x);",
          "103:     eProsima_user_DllExport UnboundedHelloWorld(",
          "104:             UnboundedHelloWorld&& x) noexcept;",
          "110:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "111:             const UnboundedHelloWorld& x);",
          "117:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "118:             UnboundedHelloWorld&& x) noexcept;",
          "124:     eProsima_user_DllExport bool operator ==(",
          "125:             const UnboundedHelloWorld& x) const;",
          "131:     eProsima_user_DllExport bool operator !=(",
          "132:             const UnboundedHelloWorld& x) const;",
          "138:     eProsima_user_DllExport void index(",
          "139:             uint16_t _index);",
          "145:     eProsima_user_DllExport uint16_t index() const;",
          "151:     eProsima_user_DllExport uint16_t& index();",
          "158:     eProsima_user_DllExport void message(",
          "159:             const std::string& _message);",
          "165:     eProsima_user_DllExport void message(",
          "166:             std::string&& _message);",
          "172:     eProsima_user_DllExport const std::string& message() const;",
          "178:     eProsima_user_DllExport std::string& message();",
          "187:     eProsima_user_DllExport static size_t getMaxCdrSerializedSize(",
          "188:             size_t current_alignment = 0);",
          "196:     eProsima_user_DllExport static size_t getCdrSerializedSize(",
          "197:             const UnboundedHelloWorld& data,",
          "198:             size_t current_alignment = 0);",
          "206:     eProsima_user_DllExport void serialize(",
          "207:             eprosima::fastcdr::Cdr& cdr) const;",
          "213:     eProsima_user_DllExport void deserialize(",
          "214:             eprosima::fastcdr::Cdr& cdr);",
          "222:     eProsima_user_DllExport static bool isKeyDefined();",
          "228:     eProsima_user_DllExport void serializeKey(",
          "229:             eprosima::fastcdr::Cdr& cdr) const;",
          "232: private:",
          "234:     uint16_t m_index;",
          "235:     std::string m_message;",
          "237: };",
          "240: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "244: #endif // FASTCDR_VERSION_MAJOR == 1",
          "",
          "---------------"
        ],
        "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp": [
          "File: test/blackbox/utils/data_generators.cpp -> test/blackbox/utils/data_generators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:     return returnedValue;",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "282:         size_t max)",
          "283: {",
          "284:     uint16_t index = 1;",
          "285:     size_t maximum = max ? max : 10;",
          "286:     std::list<UnboundedHelloWorld> returnedValue(maximum);",
          "288:     std::generate(returnedValue.begin(), returnedValue.end(), [&index]",
          "289:             {",
          "290:                 UnboundedHelloWorld hello;",
          "291:                 hello.index(index);",
          "292:                 std::stringstream ss;",
          "293:                 ss << \"HelloWorld \" << index;",
          "294:                 hello.message(ss.str());",
          "295:                 ++index;",
          "296:                 return hello;",
          "297:             });",
          "299:     return returnedValue;",
          "300: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9956bb0ea05016ecda8062c7f6a20da8510ad699",
      "candidate_info": {
        "commit_hash": "9956bb0ea05016ecda8062c7f6a20da8510ad699",
        "repo": "eProsima/Fast-DDS",
        "commit_url": "https://github.com/eProsima/Fast-DDS/commit/9956bb0ea05016ecda8062c7f6a20da8510ad699",
        "files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/CMakeLists.txt",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "test/blackbox/types/UnboundedHelloWorldv1.h",
          "test/blackbox/utils/data_generators.cpp"
        ],
        "message": "Merge pull request from GHSA-9m2j-qw67-ph4w\n\n* Refs #20549: Add BB test\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Fix:Fixed integer overflow causing heap overflow\n\nWhen a sub node receives a manipulated DATA sub-message, an Integer Overflow occurs in uint32_t payload_size. This causes a heap buffer overflow error. A comparison statement was inserted before the line that calculates the variable, which fixes the error.\n\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\n\n* Refs #20549: Fix review\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Refs #201549: Reset the change data fields before exiting\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n---------\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\nCo-authored-by: Mario Dominguez <mariodominguez@eprosima.com>",
        "before_after_code_files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
          "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
            "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ],
          "candidate": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
            "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx",
            "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp": [
          "File: src/cpp/rtps/messages/MessageReceiver.cpp -> src/cpp/rtps/messages/MessageReceiver.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "842:     if (dataFlag || keyFlag)",
          "843:     {",
          "844:         uint32_t payload_size;",
          "848:         if (dataFlag)",
          "849:         {",
          "",
          "[Removed Lines]",
          "845:         payload_size = smh->submessageLength -",
          "846:                 (RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);",
          "",
          "[Added Lines]",
          "845:         const uint32_t submsg_no_payload_size =",
          "846:                 RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize;",
          "849:         if (smh->submessageLength < submsg_no_payload_size)",
          "850:         {",
          "851:             EPROSIMA_LOG_WARNING(RTPS_MSG_IN, IDSTRING \"Serialized Payload avoided overflow \"",
          "852:                     \"(\" << smh->submessageLength << \"/\" << submsg_no_payload_size << \")\");",
          "853:             ch.serializedPayload.data = nullptr;",
          "854:             ch.inline_qos.data = nullptr;",
          "855:             return false;",
          "856:         }",
          "858:         payload_size = smh->submessageLength - submsg_no_payload_size;",
          "",
          "---------------"
        ],
        "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp": [
          "File: test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp -> test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:             if (subscriber_ != nullptr)",
          "335:             {",
          "337:                     subscriber_attr_.topic.topicName << std::endl;",
          "339:                 initialized_ = true;",
          "",
          "[Removed Lines]",
          "336:                 std::cout << \"Created subscriber \" << subscriber_->getGuid() << \" for topic \" <<",
          "",
          "[Added Lines]",
          "336:                 subscriber_guid_ = subscriber_->getGuid();",
          "337:                 std::cout << \"Created subscriber \" << subscriber_guid_ << \" for topic \" <<",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1414:         return participant_guid_;",
          "1415:     }",
          "1417: private:",
          "1419:     void receive_one(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1418:     const eprosima::fastrtps::rtps::GUID_t& datareader_guid() const",
          "1419:     {",
          "1420:         return subscriber_guid_;",
          "1421:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1505:     eprosima::fastrtps::SubscriberAttributes subscriber_attr_;",
          "1506:     std::string topic_name_;",
          "1507:     eprosima::fastrtps::rtps::GUID_t participant_guid_;",
          "1508:     bool initialized_;",
          "1509:     std::list<type> total_msgs_;",
          "1510:     std::mutex mutex_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1514:     eprosima::fastrtps::rtps::GUID_t subscriber_guid_;",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp": [
          "File: test/blackbox/common/BlackboxTests.hpp -> test/blackbox/common/BlackboxTests.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <unistd.h>",
          "32: #endif // if defined(_WIN32)",
          "35: #include \"../types/FixedSizedPubSubTypes.h\"",
          "36: #include \"../types/KeyedHelloWorldPubSubTypes.h\"",
          "37: #include \"../types/StringTestPubSubTypes.h\"",
          "42: #include <algorithm>",
          "43: #include <cstddef>",
          "",
          "[Removed Lines]",
          "34: #include \"../types/HelloWorldPubSubTypes.h\"",
          "38: #include \"../types/Data64kbPubSubTypes.h\"",
          "39: #include \"../types/Data1mbPubSubTypes.h\"",
          "40: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "",
          "[Added Lines]",
          "34: #include \"../types/Data1mbPubSubTypes.h\"",
          "35: #include \"../types/Data64kbPubSubTypes.h\"",
          "37: #include \"../types/HelloWorldPubSubTypes.h\"",
          "38: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "41: #include \"../types/UnboundedHelloWorldPubSubTypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170: std::list<KeyedData1mb> default_keyeddata300kb_data_generator(",
          "171:         size_t max = 0);",
          "174: extern const std::function<void(const HelloWorld&)>  default_helloworld_print;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "175:         size_t max = 0);",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp": [
          "File: test/blackbox/common/BlackboxTestsSecurity.cpp -> test/blackbox/common/BlackboxTestsSecurity.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"PubSubWriter.hpp\"",
          "28: #include \"PubSubWriterReader.hpp\"",
          "29: #include \"PubSubParticipant.hpp\"",
          "31: #include <fastdds/dds/log/Log.hpp>",
          "32: #include <fastdds/rtps/common/EntityId_t.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: };",
          "118: class SecurityPkcs : public ::testing::Test",
          "119: {",
          "120: public:",
          "",
          "[Removed Lines]",
          "92: struct UDPMessageSender",
          "93: {",
          "94:     asio::io_service service;",
          "95:     asio::ip::udp::socket socket;",
          "97:     UDPMessageSender()",
          "98:         : service()",
          "99:         , socket(service)",
          "100:     {",
          "101:         socket.open(asio::ip::udp::v4());",
          "102:     }",
          "104:     void send(",
          "105:             const CDRMessage_t& msg,",
          "106:             const Locator_t& destination)",
          "107:     {",
          "108:         std::string addr = IPLocator::toIPv4string(destination);",
          "109:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "110:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "111:         asio::error_code ec;",
          "113:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "114:     }",
          "116: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp": [
          "File: test/blackbox/common/BlackboxTestsTransportUDP.cpp -> test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"DatagramInjectionTransport.hpp\"",
          "30: #include \"PubSubReader.hpp\"",
          "31: #include \"PubSubWriter.hpp\"",
          "33: using namespace eprosima::fastrtps;",
          "34: using namespace eprosima::fastrtps::rtps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:     deliver_datagram_from_file(receivers, \"datagrams/20140.bin\");",
          "556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559: TEST(TransportUDP, MaliciousManipulatedDataOctetsToNextHeaderIgnore)",
          "560: {",
          "562:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
          "564:     PubSubWriter<UnboundedHelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
          "565:     PubSubReader<UnboundedHelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
          "567:     struct MaliciousManipulatedDataOctetsToNextHeader",
          "568:     {",
          "569:         std::array<char, 4> rtps_id{ {'R', 'T', 'P', 'S'} };",
          "570:         std::array<uint8_t, 2> protocol_version{ {2, 3} };",
          "571:         std::array<uint8_t, 2> vendor_id{ {0x01, 0x0F} };",
          "572:         GuidPrefix_t sender_prefix{};",
          "574:         struct DataSubMsg",
          "575:         {",
          "576:             struct Header",
          "577:             {",
          "578:                 uint8_t submessage_id = 0x15;",
          "579: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
          "580:                 uint8_t flags = 0x04;",
          "581: #else",
          "582:                 uint8_t flags = 0x05;",
          "583: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
          "584:                 uint16_t octets_to_next_header = 0x30;",
          "585:                 uint16_t extra_flags = 0;",
          "586:                 uint16_t octets_to_inline_qos = 0x2d;",
          "587:                 EntityId_t reader_id{};",
          "588:                 EntityId_t writer_id{};",
          "589:                 SequenceNumber_t sn{100};",
          "590:             };",
          "592:             struct SerializedData",
          "593:             {",
          "594:                 uint16_t encapsulation;",
          "595:                 uint16_t encapsulation_opts;",
          "596:                 octet data[24];",
          "597:             };",
          "599:             Header header;",
          "600:             SerializedData payload;",
          "601:         }",
          "602:         data;",
          "604:         uint8_t additional_bytes[8] {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};",
          "606:     };",
          "608:     UDPMessageSender fake_msg_sender;",
          "611:     reader.disable_builtin_transport().add_user_transport_to_pparams(udp_transport)",
          "612:             .history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "613:     writer.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "616:     Locator_t reader_locator;",
          "617:     ASSERT_TRUE(IPLocator::setIPv4(reader_locator, \"127.0.0.1\"));",
          "618:     reader_locator.port = 7000;",
          "619:     reader.add_to_unicast_locator_list(\"127.0.0.1\", 7000);",
          "622:     reader.init();",
          "623:     ASSERT_TRUE(reader.isInitialized());",
          "624:     writer.init();",
          "625:     ASSERT_TRUE(writer.isInitialized());",
          "627:     reader.wait_discovery();",
          "628:     writer.wait_discovery();",
          "630:     auto data = default_unbounded_helloworld_data_generator();",
          "631:     reader.startReception(data);",
          "632:     writer.send(data);",
          "633:     ASSERT_TRUE(data.empty());",
          "636:     {",
          "637:         auto writer_guid = writer.datawriter_guid();",
          "639:         MaliciousManipulatedDataOctetsToNextHeader malicious_packet{};",
          "640:         malicious_packet.sender_prefix = writer_guid.guidPrefix;",
          "641:         malicious_packet.data.header.writer_id = writer_guid.entityId;",
          "642:         malicious_packet.data.header.reader_id = reader.datareader_guid().entityId;",
          "643:         malicious_packet.data.payload.encapsulation = CDR_LE;",
          "645:         CDRMessage_t msg(0);",
          "646:         uint32_t msg_len = static_cast<uint32_t>(sizeof(malicious_packet));",
          "647:         msg.init(reinterpret_cast<octet*>(&malicious_packet), msg_len);",
          "648:         msg.length = msg_len;",
          "649:         msg.pos = msg_len;",
          "650:         fake_msg_sender.send(msg, reader_locator);",
          "651:     }",
          "654:     reader.block_for_all();",
          "655: }",
          "",
          "---------------"
        ],
        "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp": [
          "File: test/blackbox/common/UDPMessageSender.hpp -> test/blackbox/common/UDPMessageSender.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <asio/io_service.hpp>",
          "2: #include <asio/ip/udp.hpp>",
          "4: #include <fastdds/rtps/common/CDRMessage_t.h>",
          "5: #include <fastrtps/utils/IPLocator.h>",
          "7: using namespace eprosima::fastrtps;",
          "8: using namespace eprosima::fastrtps::rtps;",
          "10: struct UDPMessageSender",
          "11: {",
          "12:     asio::io_service service;",
          "13:     asio::ip::udp::socket socket;",
          "15:     UDPMessageSender()",
          "16:         : service()",
          "17:         , socket(service)",
          "18:     {",
          "19:         socket.open(asio::ip::udp::v4());",
          "20:     }",
          "22:     void send(",
          "23:             const CDRMessage_t& msg,",
          "24:             const Locator_t& destination)",
          "25:     {",
          "26:         std::string addr = IPLocator::toIPv4string(destination);",
          "27:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "28:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "29:         asio::error_code ec;",
          "31:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "32:     }",
          "34: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorld.cxx -> test/blackbox/types/UnboundedHelloWorld.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "31: #if FASTCDR_VERSION_MAJOR > 1",
          "33: #include <fastcdr/Cdr.h>",
          "36: #include <fastcdr/exceptions/BadParamException.h>",
          "37: using namespace eprosima::fastcdr::exception;",
          "39: #include <utility>",
          "44: UnboundedHelloWorld::UnboundedHelloWorld()",
          "45: {",
          "46: }",
          "48: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "49: {",
          "50: }",
          "52: UnboundedHelloWorld::UnboundedHelloWorld(",
          "53:         const UnboundedHelloWorld& x)",
          "54: {",
          "55:     m_index = x.m_index;",
          "56:     m_message = x.m_message;",
          "57: }",
          "59: UnboundedHelloWorld::UnboundedHelloWorld(",
          "60:         UnboundedHelloWorld&& x) noexcept",
          "61: {",
          "62:     m_index = x.m_index;",
          "63:     m_message = std::move(x.m_message);",
          "64: }",
          "66: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "67:         const UnboundedHelloWorld& x)",
          "68: {",
          "70:     m_index = x.m_index;",
          "71:     m_message = x.m_message;",
          "72:     return *this;",
          "73: }",
          "75: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "76:         UnboundedHelloWorld&& x) noexcept",
          "77: {",
          "79:     m_index = x.m_index;",
          "80:     m_message = std::move(x.m_message);",
          "81:     return *this;",
          "82: }",
          "84: bool UnboundedHelloWorld::operator ==(",
          "85:         const UnboundedHelloWorld& x) const",
          "86: {",
          "87:     return (m_index == x.m_index &&",
          "88:            m_message == x.m_message);",
          "89: }",
          "91: bool UnboundedHelloWorld::operator !=(",
          "92:         const UnboundedHelloWorld& x) const",
          "93: {",
          "94:     return !(*this == x);",
          "95: }",
          "101: void UnboundedHelloWorld::index(",
          "102:         uint16_t _index)",
          "103: {",
          "104:     m_index = _index;",
          "105: }",
          "111: uint16_t UnboundedHelloWorld::index() const",
          "112: {",
          "113:     return m_index;",
          "114: }",
          "120: uint16_t& UnboundedHelloWorld::index()",
          "121: {",
          "122:     return m_index;",
          "123: }",
          "130: void UnboundedHelloWorld::message(",
          "131:         const std::string& _message)",
          "132: {",
          "133:     m_message = _message;",
          "134: }",
          "140: void UnboundedHelloWorld::message(",
          "141:         std::string&& _message)",
          "142: {",
          "143:     m_message = std::move(_message);",
          "144: }",
          "150: const std::string& UnboundedHelloWorld::message() const",
          "151: {",
          "152:     return m_message;",
          "153: }",
          "159: std::string& UnboundedHelloWorld::message()",
          "160: {",
          "161:     return m_message;",
          "162: }",
          "166: #include \"UnboundedHelloWorldCdrAux.ipp\"",
          "168: #endif // FASTCDR_VERSION_MAJOR > 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h": [
          "File: test/blackbox/types/UnboundedHelloWorld.h -> test/blackbox/types/UnboundedHelloWorld.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <fastcdr/config.h>",
          "23: #include \"UnboundedHelloWorldv1.h\"",
          "25: #if FASTCDR_VERSION_MAJOR > 1",
          "27: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "28: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "30: #include <array>",
          "31: #include <bitset>",
          "32: #include <cstdint>",
          "33: #include <map>",
          "34: #include <string>",
          "35: #include <vector>",
          "37: #include <fastcdr/cdr/fixed_size_string.hpp>",
          "38: #include <fastcdr/xcdr/external.hpp>",
          "39: #include <fastcdr/xcdr/optional.hpp>",
          "43: #if defined(_WIN32)",
          "44: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "45: #define eProsima_user_DllExport __declspec( dllexport )",
          "46: #else",
          "47: #define eProsima_user_DllExport",
          "48: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "49: #else",
          "50: #define eProsima_user_DllExport",
          "51: #endif  // _WIN32",
          "53: #if defined(_WIN32)",
          "54: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "55: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
          "56: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
          "57: #else",
          "58: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
          "59: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
          "60: #else",
          "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "62: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "63: #else",
          "64: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "65: #endif // _WIN32",
          "67: namespace eprosima {",
          "68: namespace fastcdr {",
          "69: class Cdr;",
          "70: class CdrSizeCalculator;",
          "71: } // namespace fastcdr",
          "72: } // namespace eprosima",
          "82: class UnboundedHelloWorld",
          "83: {",
          "84: public:",
          "89:     eProsima_user_DllExport UnboundedHelloWorld();",
          "94:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "100:     eProsima_user_DllExport UnboundedHelloWorld(",
          "101:             const UnboundedHelloWorld& x);",
          "107:     eProsima_user_DllExport UnboundedHelloWorld(",
          "108:             UnboundedHelloWorld&& x) noexcept;",
          "114:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "115:             const UnboundedHelloWorld& x);",
          "121:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "122:             UnboundedHelloWorld&& x) noexcept;",
          "128:     eProsima_user_DllExport bool operator ==(",
          "129:             const UnboundedHelloWorld& x) const;",
          "135:     eProsima_user_DllExport bool operator !=(",
          "136:             const UnboundedHelloWorld& x) const;",
          "142:     eProsima_user_DllExport void index(",
          "143:             uint16_t _index);",
          "149:     eProsima_user_DllExport uint16_t index() const;",
          "155:     eProsima_user_DllExport uint16_t& index();",
          "162:     eProsima_user_DllExport void message(",
          "163:             const std::string& _message);",
          "169:     eProsima_user_DllExport void message(",
          "170:             std::string&& _message);",
          "176:     eProsima_user_DllExport const std::string& message() const;",
          "182:     eProsima_user_DllExport std::string& message();",
          "184: private:",
          "186:     uint16_t m_index{0};",
          "187:     std::string m_message;",
          "189: };",
          "191: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "195: #endif // FASTCDR_VERSION_MAJOR > 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl": [
          "File: test/blackbox/types/UnboundedHelloWorld.idl -> test/blackbox/types/UnboundedHelloWorld.idl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: struct UnboundedHelloWorld",
          "2: {",
          "3:  unsigned short index;",
          "4:  string message;",
          "5: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldCdrAux.hpp||test/blackbox/types/UnboundedHelloWorldCdrAux.hpp": [
          "File: test/blackbox/types/UnboundedHelloWorldCdrAux.hpp -> test/blackbox/types/UnboundedHelloWorldCdrAux.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "25: #include \"UnboundedHelloWorld.h\"",
          "27: constexpr uint32_t UnboundedHelloWorld_max_cdr_typesize {268UL};",
          "28: constexpr uint32_t UnboundedHelloWorld_max_key_cdr_typesize {0UL};",
          "31: namespace eprosima {",
          "32: namespace fastcdr {",
          "34: class Cdr;",
          "35: class CdrSizeCalculator;",
          "39: eProsima_user_DllExport void serialize_key(",
          "40:         eprosima::fastcdr::Cdr& scdr,",
          "41:         const UnboundedHelloWorld& data);",
          "44: } // namespace fastcdr",
          "45: } // namespace eprosima",
          "47: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_HPP_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldCdrAux.ipp||test/blackbox/types/UnboundedHelloWorldCdrAux.ipp": [
          "File: test/blackbox/types/UnboundedHelloWorldCdrAux.ipp -> test/blackbox/types/UnboundedHelloWorldCdrAux.ipp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "25: #include \"UnboundedHelloWorldCdrAux.hpp\"",
          "27: #include <fastcdr/Cdr.h>",
          "28: #include <fastcdr/CdrSizeCalculator.hpp>",
          "31: #include <fastcdr/exceptions/BadParamException.h>",
          "32: using namespace eprosima::fastcdr::exception;",
          "34: namespace eprosima {",
          "35: namespace fastcdr {",
          "39: template<>",
          "40: eProsima_user_DllExport size_t calculate_serialized_size(",
          "41:         eprosima::fastcdr::CdrSizeCalculator& calculator,",
          "42:         const UnboundedHelloWorld& data,",
          "43:         size_t& current_alignment)",
          "44: {",
          "45:     static_cast<void>(data);",
          "47:     eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();",
          "48:     size_t calculated_size {calculator.begin_calculate_type_serialized_size(",
          "49:                                 eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?",
          "50:                                 eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "51:                                 eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
          "52:                                 current_alignment)};",
          "55:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),",
          "56:                 data.index(), current_alignment);",
          "58:         calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),",
          "59:                 data.message(), current_alignment);",
          "62:     calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);",
          "64:     return calculated_size;",
          "65: }",
          "67: template<>",
          "68: eProsima_user_DllExport void serialize(",
          "69:         eprosima::fastcdr::Cdr& scdr,",
          "70:         const UnboundedHelloWorld& data)",
          "71: {",
          "72:     eprosima::fastcdr::Cdr::state current_state(scdr);",
          "73:     scdr.begin_serialize_type(current_state,",
          "74:             eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?",
          "75:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "76:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);",
          "78:     scdr",
          "79:         << eprosima::fastcdr::MemberId(0) << data.index()",
          "80:         << eprosima::fastcdr::MemberId(1) << data.message()",
          "81: ;",
          "82:     scdr.end_serialize_type(current_state);",
          "83: }",
          "85: template<>",
          "86: eProsima_user_DllExport void deserialize(",
          "87:         eprosima::fastcdr::Cdr& cdr,",
          "88:         UnboundedHelloWorld& data)",
          "89: {",
          "90:     cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?",
          "91:             eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :",
          "92:             eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,",
          "93:             [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool",
          "94:             {",
          "95:                 bool ret_value = true;",
          "96:                 switch (mid.id)",
          "97:                 {",
          "98:                                         case 0:",
          "99:                                                 dcdr >> data.index();",
          "100:                                             break;",
          "102:                                         case 1:",
          "103:                                                 dcdr >> data.message();",
          "104:                                             break;",
          "106:                     default:",
          "107:                         ret_value = false;",
          "108:                         break;",
          "109:                 }",
          "110:                 return ret_value;",
          "111:             });",
          "112: }",
          "114: void serialize_key(",
          "115:         eprosima::fastcdr::Cdr& scdr,",
          "116:         const UnboundedHelloWorld& data)",
          "117: {",
          "118:     static_cast<void>(scdr);",
          "119:     static_cast<void>(data);",
          "120: }",
          "124: } // namespace fastcdr",
          "125: } // namespace eprosima",
          "127: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLDCDRAUX_IPP_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <fastdds/rtps/common/CdrSerialization.hpp>",
          "25: #include \"UnboundedHelloWorldPubSubTypes.h\"",
          "26: #include \"UnboundedHelloWorldCdrAux.hpp\"",
          "28: using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;",
          "29: using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;",
          "30: using DataRepresentationId_t = eprosima::fastdds::dds::DataRepresentationId_t;",
          "34: UnboundedHelloWorldPubSubType::UnboundedHelloWorldPubSubType()",
          "35: {",
          "36:     setName(\"UnboundedHelloWorld\");",
          "37:     uint32_t type_size =",
          "38: #if FASTCDR_VERSION_MAJOR == 1",
          "39:         static_cast<uint32_t>(UnboundedHelloWorld::getMaxCdrSerializedSize());",
          "40: #else",
          "41:         UnboundedHelloWorld_max_cdr_typesize;",
          "42: #endif",
          "45:     m_isGetKeyDefined = false;",
          "46:     uint32_t keyLength = UnboundedHelloWorld_max_key_cdr_typesize > 16 ? UnboundedHelloWorld_max_key_cdr_typesize : 16;",
          "47:     m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));",
          "48:     memset(m_keyBuffer, 0, keyLength);",
          "49: }",
          "51: UnboundedHelloWorldPubSubType::~UnboundedHelloWorldPubSubType()",
          "52: {",
          "53:     if (m_keyBuffer != nullptr)",
          "54:     {",
          "55:         free(m_keyBuffer);",
          "56:     }",
          "57: }",
          "59: bool UnboundedHelloWorldPubSubType::serialize(",
          "60:         void* data,",
          "61:         SerializedPayload_t* payload,",
          "62:         DataRepresentationId_t data_representation)",
          "63: {",
          "64:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "67:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);",
          "69:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,",
          "70:             data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
          "71:             eprosima::fastcdr::CdrVersion::XCDRv1 : eprosima::fastcdr::CdrVersion::XCDRv2);",
          "72:     payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "73: #if FASTCDR_VERSION_MAJOR > 1",
          "74:     ser.set_encoding_flag(",
          "75:         data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
          "76:         eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR  :",
          "77:         eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2);",
          "78: #endif // FASTCDR_VERSION_MAJOR > 1",
          "80:     try",
          "81:     {",
          "83:         ser.serialize_encapsulation();",
          "85:         ser << *p_type;",
          "86:     }",
          "87:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "88:     {",
          "89:         return false;",
          "90:     }",
          "93: #if FASTCDR_VERSION_MAJOR == 1",
          "94:     payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());",
          "95: #else",
          "96:     payload->length = static_cast<uint32_t>(ser.get_serialized_data_length());",
          "97: #endif // FASTCDR_VERSION_MAJOR == 1",
          "98:     return true;",
          "99: }",
          "101: bool UnboundedHelloWorldPubSubType::deserialize(",
          "102:         SerializedPayload_t* payload,",
          "103:         void* data)",
          "104: {",
          "105:     try",
          "106:     {",
          "108:         UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "111:         eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);",
          "114:         eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN",
          "115: #if FASTCDR_VERSION_MAJOR == 1",
          "116:                 , eprosima::fastcdr::Cdr::CdrType::DDS_CDR",
          "117: #endif // FASTCDR_VERSION_MAJOR == 1",
          "118:                 );",
          "121:         deser.read_encapsulation();",
          "122:         payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "125:         deser >> *p_type;",
          "126:     }",
          "127:     catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "128:     {",
          "129:         return false;",
          "130:     }",
          "132:     return true;",
          "133: }",
          "135: std::function<uint32_t()> UnboundedHelloWorldPubSubType::getSerializedSizeProvider(",
          "136:         void* data,",
          "137:         DataRepresentationId_t data_representation)",
          "138: {",
          "139:     return [data, data_representation]() -> uint32_t",
          "140:            {",
          "141: #if FASTCDR_VERSION_MAJOR == 1",
          "142:                static_cast<void>(data_representation);",
          "143:                return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<UnboundedHelloWorld*>(data))) +",
          "144:                       4u /*encapsulation*/;",
          "145: #else",
          "146:                try",
          "147:                {",
          "148:                    eprosima::fastcdr::CdrSizeCalculator calculator(",
          "149:                        data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?",
          "150:                        eprosima::fastcdr::CdrVersion::XCDRv1 :eprosima::fastcdr::CdrVersion::XCDRv2);",
          "151:                    size_t current_alignment {0};",
          "152:                    return static_cast<uint32_t>(calculator.calculate_serialized_size(",
          "154:                            4u /*encapsulation*/;",
          "155:                }",
          "156:                catch (eprosima::fastcdr::exception::Exception& /*exception*/)",
          "157:                {",
          "158:                    return 0;",
          "159:                }",
          "160: #endif // FASTCDR_VERSION_MAJOR == 1",
          "161:            };",
          "162: }",
          "164: void* UnboundedHelloWorldPubSubType::createData()",
          "165: {",
          "166:     return reinterpret_cast<void*>(new UnboundedHelloWorld());",
          "167: }",
          "169: void UnboundedHelloWorldPubSubType::deleteData(",
          "170:         void* data)",
          "171: {",
          "172:     delete(reinterpret_cast<UnboundedHelloWorld*>(data));",
          "173: }",
          "175: bool UnboundedHelloWorldPubSubType::getKey(",
          "176:         void* data,",
          "177:         InstanceHandle_t* handle,",
          "178:         bool force_md5)",
          "179: {",
          "180:     if (!m_isGetKeyDefined)",
          "181:     {",
          "182:         return false;",
          "183:     }",
          "185:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "188:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),",
          "189:             UnboundedHelloWorld_max_key_cdr_typesize);",
          "192:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS, eprosima::fastcdr::CdrVersion::XCDRv1);",
          "193: #if FASTCDR_VERSION_MAJOR == 1",
          "194:     p_type->serializeKey(ser);",
          "195: #else",
          "196:     eprosima::fastcdr::serialize_key(ser, *p_type);",
          "197: #endif // FASTCDR_VERSION_MAJOR == 1",
          "198:     if (force_md5 || UnboundedHelloWorld_max_key_cdr_typesize > 16)",
          "199:     {",
          "200:         m_md5.init();",
          "201: #if FASTCDR_VERSION_MAJOR == 1",
          "202:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));",
          "203: #else",
          "204:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.get_serialized_data_length()));",
          "205: #endif // FASTCDR_VERSION_MAJOR == 1",
          "206:         m_md5.finalize();",
          "207:         for (uint8_t i = 0; i < 16; ++i)",
          "208:         {",
          "209:             handle->value[i] = m_md5.digest[i];",
          "210:         }",
          "211:     }",
          "212:     else",
          "213:     {",
          "214:         for (uint8_t i = 0; i < 16; ++i)",
          "215:         {",
          "216:             handle->value[i] = m_keyBuffer[i];",
          "217:         }",
          "218:     }",
          "219:     return true;",
          "220: }",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.h -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "24: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "26: #include <fastdds/dds/core/policy/QosPolicies.hpp>",
          "27: #include <fastdds/dds/topic/TopicDataType.hpp>",
          "28: #include <fastdds/rtps/common/InstanceHandle.h>",
          "29: #include <fastdds/rtps/common/SerializedPayload.h>",
          "30: #include <fastrtps/utils/md5.h>",
          "32: #include \"UnboundedHelloWorld.h\"",
          "35: #if !defined(GEN_API_VER) || (GEN_API_VER != 2)",
          "36: #error \\",
          "37:     Generated UnboundedHelloWorld is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.",
          "38: #endif  // GEN_API_VER",
          "47: class UnboundedHelloWorldPubSubType : public eprosima::fastdds::dds::TopicDataType",
          "48: {",
          "49: public:",
          "51:     typedef UnboundedHelloWorld type;",
          "53:     eProsima_user_DllExport UnboundedHelloWorldPubSubType();",
          "55:     eProsima_user_DllExport ~UnboundedHelloWorldPubSubType() override;",
          "57:     eProsima_user_DllExport bool serialize(",
          "58:             void* data,",
          "59:             eprosima::fastrtps::rtps::SerializedPayload_t* payload) override",
          "60:     {",
          "61:         return serialize(data, payload, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);",
          "62:     }",
          "64:     eProsima_user_DllExport bool serialize(",
          "65:             void* data,",
          "66:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
          "67:             eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;",
          "69:     eProsima_user_DllExport bool deserialize(",
          "70:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
          "71:             void* data) override;",
          "73:     eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(",
          "74:             void* data) override",
          "75:     {",
          "76:         return getSerializedSizeProvider(data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);",
          "77:     }",
          "79:     eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(",
          "80:             void* data,",
          "81:             eprosima::fastdds::dds::DataRepresentationId_t data_representation) override;",
          "83:     eProsima_user_DllExport bool getKey(",
          "84:             void* data,",
          "85:             eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,",
          "86:             bool force_md5 = false) override;",
          "88:     eProsima_user_DllExport void* createData() override;",
          "90:     eProsima_user_DllExport void deleteData(",
          "91:             void* data) override;",
          "93: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "94:     eProsima_user_DllExport inline bool is_bounded() const override",
          "95:     {",
          "96:         return false;",
          "97:     }",
          "99: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "101: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "102:     eProsima_user_DllExport inline bool is_plain() const override",
          "103:     {",
          "104:         return false;",
          "105:     }",
          "107:     eProsima_user_DllExport inline bool is_plain(",
          "108:         eprosima::fastdds::dds::DataRepresentationId_t data_representation) const override",
          "109:     {",
          "110:         static_cast<void>(data_representation);",
          "111:         return false;",
          "112:     }",
          "114: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "116: #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "117:     eProsima_user_DllExport inline bool construct_sample(",
          "118:             void* memory) const override",
          "119:     {",
          "120:         static_cast<void>(memory);",
          "121:         return false;",
          "122:     }",
          "124: #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "126:     MD5 m_md5;",
          "127:     unsigned char* m_keyBuffer;",
          "129: };",
          "131: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldv1.cxx||test/blackbox/types/UnboundedHelloWorldv1.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldv1.cxx -> test/blackbox/types/UnboundedHelloWorldv1.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "31: #if FASTCDR_VERSION_MAJOR == 1",
          "33: #include <fastcdr/Cdr.h>",
          "36: #include <fastcdr/exceptions/BadParamException.h>",
          "37: using namespace eprosima::fastcdr::exception;",
          "39: #include <utility>",
          "41: namespace helper { namespace internal {",
          "43: enum class Size {",
          "44:     UInt8,",
          "45:     UInt16,",
          "46:     UInt32,",
          "47:     UInt64,",
          "48: };",
          "50: constexpr Size get_size(int s) {",
          "51:     return (s <= 8 ) ? Size::UInt8:",
          "52:            (s <= 16) ? Size::UInt16:",
          "53:            (s <= 32) ? Size::UInt32: Size::UInt64;",
          "54: }",
          "56: template<Size s>",
          "57: struct FindTypeH;",
          "59: template<>",
          "60: struct FindTypeH<Size::UInt8> {",
          "61:     using type = std::uint8_t;",
          "62: };",
          "64: template<>",
          "65: struct FindTypeH<Size::UInt16> {",
          "66:     using type = std::uint16_t;",
          "67: };",
          "69: template<>",
          "70: struct FindTypeH<Size::UInt32> {",
          "71:     using type = std::uint32_t;",
          "72: };",
          "74: template<>",
          "75: struct FindTypeH<Size::UInt64> {",
          "76:     using type = std::uint64_t;",
          "77: };",
          "78: }",
          "80: template<int S>",
          "81: struct FindType {",
          "82:     using type = typename internal::FindTypeH<internal::get_size(S)>::type;",
          "83: };",
          "84: }",
          "86: #define UnboundedHelloWorld_max_cdr_typesize 268ULL;",
          "91: UnboundedHelloWorld::UnboundedHelloWorld()",
          "92: {",
          "94:     m_index = 0;",
          "98: }",
          "100: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "101: {",
          "102: }",
          "104: UnboundedHelloWorld::UnboundedHelloWorld(",
          "105:         const UnboundedHelloWorld& x)",
          "106: {",
          "107:     m_index = x.m_index;",
          "110:     m_message = x.m_message;",
          "112: }",
          "114: UnboundedHelloWorld::UnboundedHelloWorld(",
          "115:         UnboundedHelloWorld&& x) noexcept",
          "116: {",
          "117:     m_index = x.m_index;",
          "120:     m_message = std::move(x.m_message);",
          "122: }",
          "124: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "125:         const UnboundedHelloWorld& x)",
          "126: {",
          "127:     m_index = x.m_index;",
          "130:     m_message = x.m_message;",
          "132:     return *this;",
          "133: }",
          "135: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "136:         UnboundedHelloWorld&& x) noexcept",
          "137: {",
          "138:     m_index = x.m_index;",
          "141:     m_message = std::move(x.m_message);",
          "143:     return *this;",
          "144: }",
          "146: bool UnboundedHelloWorld::operator ==(",
          "147:         const UnboundedHelloWorld& x) const",
          "148: {",
          "149:     return (m_index == x.m_index &&",
          "150:            m_message == x.m_message);",
          "151: }",
          "153: bool UnboundedHelloWorld::operator !=(",
          "154:         const UnboundedHelloWorld& x) const",
          "155: {",
          "156:     return !(*this == x);",
          "157: }",
          "159: size_t UnboundedHelloWorld::getMaxCdrSerializedSize(",
          "160:         size_t current_alignment)",
          "161: {",
          "162:     static_cast<void>(current_alignment);",
          "163:     return UnboundedHelloWorld_max_cdr_typesize;",
          "164: }",
          "166: size_t UnboundedHelloWorld::getCdrSerializedSize(",
          "167:         const UnboundedHelloWorld& data,",
          "168:         size_t current_alignment)",
          "169: {",
          "170:     (void)data;",
          "171:     size_t initial_alignment = current_alignment;",
          "173:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
          "176:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;",
          "179:     return current_alignment - initial_alignment;",
          "180: }",
          "183: void UnboundedHelloWorld::serialize(",
          "184:         eprosima::fastcdr::Cdr& scdr) const",
          "185: {",
          "186:     scdr << m_index;",
          "188:     scdr << m_message.c_str();",
          "190: }",
          "192: void UnboundedHelloWorld::deserialize(",
          "193:         eprosima::fastcdr::Cdr& dcdr)",
          "194: {",
          "195:     dcdr >> m_index;",
          "199:     dcdr >> m_message;",
          "202: }",
          "205: bool UnboundedHelloWorld::isKeyDefined()",
          "206: {",
          "207:     return false;",
          "208: }",
          "210: void UnboundedHelloWorld::serializeKey(",
          "211:         eprosima::fastcdr::Cdr& scdr) const",
          "212: {",
          "213:     (void) scdr;",
          "214: }",
          "220: void UnboundedHelloWorld::index(",
          "221:         uint16_t _index)",
          "222: {",
          "223:     m_index = _index;",
          "224: }",
          "230: uint16_t UnboundedHelloWorld::index() const",
          "231: {",
          "232:     return m_index;",
          "233: }",
          "239: uint16_t& UnboundedHelloWorld::index()",
          "240: {",
          "241:     return m_index;",
          "242: }",
          "249: void UnboundedHelloWorld::message(",
          "250:         const std::string& _message)",
          "251: {",
          "252:     m_message = _message;",
          "253: }",
          "259: void UnboundedHelloWorld::message(",
          "260:         std::string&& _message)",
          "261: {",
          "262:     m_message = std::move(_message);",
          "263: }",
          "269: const std::string& UnboundedHelloWorld::message() const",
          "270: {",
          "271:     return m_message;",
          "272: }",
          "278: std::string& UnboundedHelloWorld::message()",
          "279: {",
          "280:     return m_message;",
          "281: }",
          "286: #endif // FASTCDR_VERSION_MAJOR == 1",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldv1.h||test/blackbox/types/UnboundedHelloWorldv1.h": [
          "File: test/blackbox/types/UnboundedHelloWorldv1.h -> test/blackbox/types/UnboundedHelloWorldv1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <fastcdr/config.h>",
          "24: #if FASTCDR_VERSION_MAJOR == 1",
          "26: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "27: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "30: #include <fastrtps/utils/fixed_size_string.hpp>",
          "32: #include <array>",
          "33: #include <bitset>",
          "34: #include <cstdint>",
          "35: #include <map>",
          "36: #include <stdint.h>",
          "37: #include <string>",
          "38: #include <vector>",
          "40: #if defined(_WIN32)",
          "41: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "42: #define eProsima_user_DllExport __declspec( dllexport )",
          "43: #else",
          "44: #define eProsima_user_DllExport",
          "45: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "46: #else",
          "47: #define eProsima_user_DllExport",
          "48: #endif  // _WIN32",
          "50: #if defined(_WIN32)",
          "51: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "52: #if defined(UNBOUNDEDHELLOWORLD_SOURCE)",
          "53: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllexport )",
          "54: #else",
          "55: #define UNBOUNDEDHELLOWORLD_DllAPI __declspec( dllimport )",
          "56: #endif // UNBOUNDEDHELLOWORLD_SOURCE",
          "57: #else",
          "58: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "59: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "60: #else",
          "61: #define UNBOUNDEDHELLOWORLD_DllAPI",
          "62: #endif // _WIN32",
          "64: namespace eprosima {",
          "65: namespace fastcdr {",
          "66: class Cdr;",
          "67: } // namespace fastcdr",
          "68: } // namespace eprosima",
          "78: class UnboundedHelloWorld",
          "79: {",
          "80: public:",
          "85:     eProsima_user_DllExport UnboundedHelloWorld();",
          "90:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "96:     eProsima_user_DllExport UnboundedHelloWorld(",
          "97:             const UnboundedHelloWorld& x);",
          "103:     eProsima_user_DllExport UnboundedHelloWorld(",
          "104:             UnboundedHelloWorld&& x) noexcept;",
          "110:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "111:             const UnboundedHelloWorld& x);",
          "117:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "118:             UnboundedHelloWorld&& x) noexcept;",
          "124:     eProsima_user_DllExport bool operator ==(",
          "125:             const UnboundedHelloWorld& x) const;",
          "131:     eProsima_user_DllExport bool operator !=(",
          "132:             const UnboundedHelloWorld& x) const;",
          "138:     eProsima_user_DllExport void index(",
          "139:             uint16_t _index);",
          "145:     eProsima_user_DllExport uint16_t index() const;",
          "151:     eProsima_user_DllExport uint16_t& index();",
          "158:     eProsima_user_DllExport void message(",
          "159:             const std::string& _message);",
          "165:     eProsima_user_DllExport void message(",
          "166:             std::string&& _message);",
          "172:     eProsima_user_DllExport const std::string& message() const;",
          "178:     eProsima_user_DllExport std::string& message();",
          "187:     eProsima_user_DllExport static size_t getMaxCdrSerializedSize(",
          "188:             size_t current_alignment = 0);",
          "196:     eProsima_user_DllExport static size_t getCdrSerializedSize(",
          "197:             const UnboundedHelloWorld& data,",
          "198:             size_t current_alignment = 0);",
          "206:     eProsima_user_DllExport void serialize(",
          "207:             eprosima::fastcdr::Cdr& cdr) const;",
          "213:     eProsima_user_DllExport void deserialize(",
          "214:             eprosima::fastcdr::Cdr& cdr);",
          "222:     eProsima_user_DllExport static bool isKeyDefined();",
          "228:     eProsima_user_DllExport void serializeKey(",
          "229:             eprosima::fastcdr::Cdr& cdr) const;",
          "232: private:",
          "234:     uint16_t m_index;",
          "235:     std::string m_message;",
          "237: };",
          "240: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "244: #endif // FASTCDR_VERSION_MAJOR == 1",
          "",
          "---------------"
        ],
        "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp": [
          "File: test/blackbox/utils/data_generators.cpp -> test/blackbox/utils/data_generators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:     return returnedValue;",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "282:         size_t max)",
          "283: {",
          "284:     uint16_t index = 1;",
          "285:     size_t maximum = max ? max : 10;",
          "286:     std::list<UnboundedHelloWorld> returnedValue(maximum);",
          "288:     std::generate(returnedValue.begin(), returnedValue.end(), [&index]",
          "289:             {",
          "290:                 UnboundedHelloWorld hello;",
          "291:                 hello.index(index);",
          "292:                 std::stringstream ss;",
          "293:                 ss << \"HelloWorld \" << index;",
          "294:                 hello.message(ss.str());",
          "295:                 ++index;",
          "296:                 return hello;",
          "297:             });",
          "299:     return returnedValue;",
          "300: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4f57b03f048a7edf75cae36685def0c49edf59d",
      "candidate_info": {
        "commit_hash": "d4f57b03f048a7edf75cae36685def0c49edf59d",
        "repo": "eProsima/Fast-DDS",
        "commit_url": "https://github.com/eProsima/Fast-DDS/commit/d4f57b03f048a7edf75cae36685def0c49edf59d",
        "files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/CMakeLists.txt",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/utils/data_generators.cpp"
        ],
        "message": "Merge pull request from GHSA-9m2j-qw67-ph4w\n\n* Refs #20549: Add BB test\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Fix:Fixed integer overflow causing heap overflow\n\nWhen a sub node receives a manipulated DATA sub-message, an Integer Overflow occurs in uint32_t payload_size. This causes a heap buffer overflow error. A comparison statement was inserted before the line that calculates the variable, which fixes the error.\n\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\n\n* Refs #20549: Fix review\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Refs #201549: Reset the change data fields before exiting\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n---------\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\nCo-authored-by: Mario Dominguez <mariodominguez@eprosima.com>",
        "before_after_code_files": [
          "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
          "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
          "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
          "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
          "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
          "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
          "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ],
          "candidate": [
            "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp",
            "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
            "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp",
            "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp",
            "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp",
            "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp",
            "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx",
            "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h",
            "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
            "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
            "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/cpp/rtps/messages/MessageReceiver.cpp||src/cpp/rtps/messages/MessageReceiver.cpp": [
          "File: src/cpp/rtps/messages/MessageReceiver.cpp -> src/cpp/rtps/messages/MessageReceiver.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "805:     if (dataFlag || keyFlag)",
          "806:     {",
          "807:         uint32_t payload_size;",
          "811:         if (dataFlag)",
          "812:         {",
          "",
          "[Removed Lines]",
          "808:         payload_size = smh->submessageLength -",
          "809:                 (RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);",
          "",
          "[Added Lines]",
          "808:         const uint32_t submsg_no_payload_size =",
          "809:                 RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize;",
          "812:         if (smh->submessageLength < submsg_no_payload_size)",
          "813:         {",
          "814:             logWarning(RTPS_MSG_IN, IDSTRING \"Serialized Payload avoided overflow \"",
          "815:                     \"(\" << smh->submessageLength << \"/\" << submsg_no_payload_size << \")\");",
          "816:             ch.serializedPayload.data = nullptr;",
          "817:             ch.inline_qos.data = nullptr;",
          "818:             return false;",
          "819:         }",
          "821:         payload_size = smh->submessageLength - submsg_no_payload_size;",
          "",
          "---------------"
        ],
        "test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp||test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp": [
          "File: test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp -> test/blackbox/api/fastrtps_deprecated/PubSubReader.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:             if (subscriber_ != nullptr)",
          "333:             {",
          "335:                     subscriber_attr_.topic.topicName << std::endl;",
          "337:                 initialized_ = true;",
          "",
          "[Removed Lines]",
          "334:                 std::cout << \"Created subscriber \" << subscriber_->getGuid() << \" for topic \" <<",
          "",
          "[Added Lines]",
          "334:                 subscriber_guid_ = subscriber_->getGuid();",
          "335:                 std::cout << \"Created subscriber \" << subscriber_guid_ << \" for topic \" <<",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1342:         return participant_guid_;",
          "1343:     }",
          "1345: private:",
          "1347:     void receive_one(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1346:     const eprosima::fastrtps::rtps::GUID_t& datareader_guid() const",
          "1347:     {",
          "1348:         return subscriber_guid_;",
          "1349:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1433:     eprosima::fastrtps::SubscriberAttributes subscriber_attr_;",
          "1434:     std::string topic_name_;",
          "1435:     eprosima::fastrtps::rtps::GUID_t participant_guid_;",
          "1436:     bool initialized_;",
          "1437:     std::list<type> total_msgs_;",
          "1438:     std::mutex mutex_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1442:     eprosima::fastrtps::rtps::GUID_t subscriber_guid_;",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTests.hpp||test/blackbox/common/BlackboxTests.hpp": [
          "File: test/blackbox/common/BlackboxTests.hpp -> test/blackbox/common/BlackboxTests.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <unistd.h>",
          "29: #endif // if defined(_WIN32)",
          "32: #include \"../types/FixedSizedPubSubTypes.h\"",
          "33: #include \"../types/KeyedHelloWorldPubSubTypes.h\"",
          "34: #include \"../types/StringTestPubSubTypes.h\"",
          "39: #include <algorithm>",
          "40: #include <cstddef>",
          "",
          "[Removed Lines]",
          "31: #include \"../types/HelloWorldPubSubTypes.h\"",
          "35: #include \"../types/Data64kbPubSubTypes.h\"",
          "36: #include \"../types/Data1mbPubSubTypes.h\"",
          "37: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "",
          "[Added Lines]",
          "31: #include \"../types/Data1mbPubSubTypes.h\"",
          "32: #include \"../types/Data64kbPubSubTypes.h\"",
          "34: #include \"../types/HelloWorldPubSubTypes.h\"",
          "35: #include \"../types/KeyedData1mbPubSubTypes.h\"",
          "38: #include \"../types/UnboundedHelloWorldPubSubTypes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163: std::list<KeyedData1mb> default_keyeddata300kb_data_generator(",
          "164:         size_t max = 0);",
          "167: extern const std::function<void(const HelloWorld&)>  default_helloworld_print;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "168:         size_t max = 0);",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsSecurity.cpp||test/blackbox/common/BlackboxTestsSecurity.cpp": [
          "File: test/blackbox/common/BlackboxTestsSecurity.cpp -> test/blackbox/common/BlackboxTestsSecurity.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"PubSubWriter.hpp\"",
          "28: #include \"PubSubWriterReader.hpp\"",
          "29: #include \"PubSubParticipant.hpp\"",
          "31: #include <fastdds/dds/log/Log.hpp>",
          "32: #include <fastdds/rtps/common/EntityId_t.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: };",
          "118: class SecurityPkcs : public ::testing::Test",
          "119: {",
          "120: public:",
          "",
          "[Removed Lines]",
          "92: struct UDPMessageSender",
          "93: {",
          "94:     asio::io_service service;",
          "95:     asio::ip::udp::socket socket;",
          "97:     UDPMessageSender()",
          "98:         : service()",
          "99:         , socket(service)",
          "100:     {",
          "101:         socket.open(asio::ip::udp::v4());",
          "102:     }",
          "104:     void send(",
          "105:             const CDRMessage_t& msg,",
          "106:             const Locator_t& destination)",
          "107:     {",
          "108:         std::string addr = IPLocator::toIPv4string(destination);",
          "109:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "110:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "111:         asio::error_code ec;",
          "113:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "114:     }",
          "116: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/blackbox/common/BlackboxTestsTransportUDP.cpp||test/blackbox/common/BlackboxTestsTransportUDP.cpp": [
          "File: test/blackbox/common/BlackboxTestsTransportUDP.cpp -> test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"DatagramInjectionTransport.hpp\"",
          "30: #include \"PubSubReader.hpp\"",
          "31: #include \"PubSubWriter.hpp\"",
          "33: using namespace eprosima::fastrtps;",
          "34: using namespace eprosima::fastrtps::rtps;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"UDPMessageSender.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:     deliver_datagram_from_file(receivers, \"datagrams/20140.bin\");",
          "552: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: TEST(TransportUDP, MaliciousManipulatedDataOctetsToNextHeaderIgnore)",
          "556: {",
          "558:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
          "560:     PubSubWriter<UnboundedHelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
          "561:     PubSubReader<UnboundedHelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
          "563:     struct MaliciousManipulatedDataOctetsToNextHeader",
          "564:     {",
          "565:         std::array<char, 4> rtps_id{ {'R', 'T', 'P', 'S'} };",
          "566:         std::array<uint8_t, 2> protocol_version{ {2, 3} };",
          "567:         std::array<uint8_t, 2> vendor_id{ {0x01, 0x0F} };",
          "568:         GuidPrefix_t sender_prefix{};",
          "570:         struct DataSubMsg",
          "571:         {",
          "572:             struct Header",
          "573:             {",
          "574:                 uint8_t submessage_id = 0x15;",
          "575: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
          "576:                 uint8_t flags = 0x04;",
          "577: #else",
          "578:                 uint8_t flags = 0x05;",
          "579: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
          "580:                 uint16_t octets_to_next_header = 0x30;",
          "581:                 uint16_t extra_flags = 0;",
          "582:                 uint16_t octets_to_inline_qos = 0x2d;",
          "583:                 EntityId_t reader_id{};",
          "584:                 EntityId_t writer_id{};",
          "585:                 SequenceNumber_t sn{100};",
          "586:             };",
          "588:             struct SerializedData",
          "589:             {",
          "590:                 uint16_t encapsulation;",
          "591:                 uint16_t encapsulation_opts;",
          "592:                 octet data[24];",
          "593:             };",
          "595:             Header header;",
          "596:             SerializedData payload;",
          "597:         }",
          "598:         data;",
          "600:         uint8_t additional_bytes[8] {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};",
          "602:     };",
          "604:     UDPMessageSender fake_msg_sender;",
          "607:     reader.disable_builtin_transport().add_user_transport_to_pparams(udp_transport)",
          "608:             .history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "609:     writer.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
          "612:     Locator_t reader_locator;",
          "613:     ASSERT_TRUE(IPLocator::setIPv4(reader_locator, \"127.0.0.1\"));",
          "614:     reader_locator.port = 7000;",
          "615:     reader.add_to_unicast_locator_list(\"127.0.0.1\", 7000);",
          "618:     reader.init();",
          "619:     ASSERT_TRUE(reader.isInitialized());",
          "620:     writer.init();",
          "621:     ASSERT_TRUE(writer.isInitialized());",
          "623:     reader.wait_discovery();",
          "624:     writer.wait_discovery();",
          "626:     auto data = default_unbounded_helloworld_data_generator();",
          "627:     reader.startReception(data);",
          "628:     writer.send(data);",
          "629:     ASSERT_TRUE(data.empty());",
          "632:     {",
          "633:         auto writer_guid = writer.datawriter_guid();",
          "635:         MaliciousManipulatedDataOctetsToNextHeader malicious_packet{};",
          "636:         malicious_packet.sender_prefix = writer_guid.guidPrefix;",
          "637:         malicious_packet.data.header.writer_id = writer_guid.entityId;",
          "638:         malicious_packet.data.header.reader_id = reader.datareader_guid().entityId;",
          "639:         malicious_packet.data.payload.encapsulation = CDR_LE;",
          "641:         CDRMessage_t msg(0);",
          "642:         uint32_t msg_len = static_cast<uint32_t>(sizeof(malicious_packet));",
          "643:         msg.init(reinterpret_cast<octet*>(&malicious_packet), msg_len);",
          "644:         msg.length = msg_len;",
          "645:         msg.pos = msg_len;",
          "646:         fake_msg_sender.send(msg, reader_locator);",
          "647:     }",
          "650:     reader.block_for_all();",
          "651: }",
          "",
          "---------------"
        ],
        "test/blackbox/common/UDPMessageSender.hpp||test/blackbox/common/UDPMessageSender.hpp": [
          "File: test/blackbox/common/UDPMessageSender.hpp -> test/blackbox/common/UDPMessageSender.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <asio/io_service.hpp>",
          "2: #include <asio/ip/udp.hpp>",
          "4: #include <fastdds/rtps/common/CDRMessage_t.h>",
          "5: #include <fastrtps/utils/IPLocator.h>",
          "7: using namespace eprosima::fastrtps;",
          "8: using namespace eprosima::fastrtps::rtps;",
          "10: struct UDPMessageSender",
          "11: {",
          "12:     asio::io_service service;",
          "13:     asio::ip::udp::socket socket;",
          "15:     UDPMessageSender()",
          "16:         : service()",
          "17:         , socket(service)",
          "18:     {",
          "19:         socket.open(asio::ip::udp::v4());",
          "20:     }",
          "22:     void send(",
          "23:             const CDRMessage_t& msg,",
          "24:             const Locator_t& destination)",
          "25:     {",
          "26:         std::string addr = IPLocator::toIPv4string(destination);",
          "27:         unsigned short port = static_cast<unsigned short>(destination.port);",
          "28:         auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
          "29:         asio::error_code ec;",
          "31:         socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
          "32:     }",
          "34: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.cxx||test/blackbox/types/UnboundedHelloWorld.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorld.cxx -> test/blackbox/types/UnboundedHelloWorld.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef _WIN32",
          "24: namespace {",
          "25: char dummy;",
          "26: }  // namespace",
          "27: #endif  // _WIN32",
          "29: #include \"UnboundedHelloWorld.h\"",
          "30: #include <fastcdr/Cdr.h>",
          "32: #include <fastcdr/exceptions/BadParamException.h>",
          "33: using namespace eprosima::fastcdr::exception;",
          "35: #include <utility>",
          "37: UnboundedHelloWorld::UnboundedHelloWorld()",
          "38: {",
          "40:     m_index = 0;",
          "42:     m_message =\"\";",
          "44: }",
          "46: UnboundedHelloWorld::~UnboundedHelloWorld()",
          "47: {",
          "50: }",
          "52: UnboundedHelloWorld::UnboundedHelloWorld(",
          "53:         const UnboundedHelloWorld& x)",
          "54: {",
          "55:     m_index = x.m_index;",
          "56:     m_message = x.m_message;",
          "57: }",
          "59: UnboundedHelloWorld::UnboundedHelloWorld(",
          "60:         UnboundedHelloWorld&& x)",
          "61: {",
          "62:     m_index = x.m_index;",
          "63:     m_message = std::move(x.m_message);",
          "64: }",
          "66: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "67:         const UnboundedHelloWorld& x)",
          "68: {",
          "70:     m_index = x.m_index;",
          "71:     m_message = x.m_message;",
          "73:     return *this;",
          "74: }",
          "76: UnboundedHelloWorld& UnboundedHelloWorld::operator =(",
          "77:         UnboundedHelloWorld&& x)",
          "78: {",
          "80:     m_index = x.m_index;",
          "81:     m_message = std::move(x.m_message);",
          "83:     return *this;",
          "84: }",
          "86: bool UnboundedHelloWorld::operator ==(",
          "87:         const UnboundedHelloWorld& x) const",
          "88: {",
          "90:     return (m_index == x.m_index && m_message == x.m_message);",
          "91: }",
          "93: bool UnboundedHelloWorld::operator !=(",
          "94:         const UnboundedHelloWorld& x) const",
          "95: {",
          "96:     return !(*this == x);",
          "97: }",
          "99: size_t UnboundedHelloWorld::getMaxCdrSerializedSize(",
          "100:         size_t current_alignment)",
          "101: {",
          "102:     size_t initial_alignment = current_alignment;",
          "105:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
          "108:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;",
          "111:     return current_alignment - initial_alignment;",
          "112: }",
          "114: size_t UnboundedHelloWorld::getCdrSerializedSize(",
          "115:         const UnboundedHelloWorld& data,",
          "116:         size_t current_alignment)",
          "117: {",
          "118:     (void)data;",
          "119:     size_t initial_alignment = current_alignment;",
          "122:     current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);",
          "125:     current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;",
          "128:     return current_alignment - initial_alignment;",
          "129: }",
          "131: void UnboundedHelloWorld::serialize(",
          "132:         eprosima::fastcdr::Cdr& scdr) const",
          "133: {",
          "135:     scdr << m_index;",
          "136:     scdr << m_message.c_str();",
          "138: }",
          "140: void UnboundedHelloWorld::deserialize(",
          "141:         eprosima::fastcdr::Cdr& dcdr)",
          "142: {",
          "144:     dcdr >> m_index;",
          "145:     dcdr >> m_message;",
          "146: }",
          "152: void UnboundedHelloWorld::index(",
          "153:         uint16_t _index)",
          "154: {",
          "155:     m_index = _index;",
          "156: }",
          "162: uint16_t UnboundedHelloWorld::index() const",
          "163: {",
          "164:     return m_index;",
          "165: }",
          "171: uint16_t& UnboundedHelloWorld::index()",
          "172: {",
          "173:     return m_index;",
          "174: }",
          "180: void UnboundedHelloWorld::message(",
          "181:         const std::string& _message)",
          "182: {",
          "183:     m_message = _message;",
          "184: }",
          "190: void UnboundedHelloWorld::message(",
          "191:         std::string&& _message)",
          "192: {",
          "193:     m_message = std::move(_message);",
          "194: }",
          "200: const std::string& UnboundedHelloWorld::message() const",
          "201: {",
          "202:     return m_message;",
          "203: }",
          "209: std::string& UnboundedHelloWorld::message()",
          "210: {",
          "211:     return m_message;",
          "212: }",
          "214: size_t UnboundedHelloWorld::getKeyMaxCdrSerializedSize(",
          "215:         size_t current_alignment)",
          "216: {",
          "217:     size_t current_align = current_alignment;",
          "223:     return current_align;",
          "224: }",
          "226: bool UnboundedHelloWorld::isKeyDefined()",
          "227: {",
          "228:     return false;",
          "229: }",
          "231: void UnboundedHelloWorld::serializeKey(",
          "232:         eprosima::fastcdr::Cdr& scdr) const",
          "233: {",
          "234:     (void) scdr;",
          "236: }",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.h||test/blackbox/types/UnboundedHelloWorld.h": [
          "File: test/blackbox/types/UnboundedHelloWorld.h -> test/blackbox/types/UnboundedHelloWorld.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "23: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "26: #include <fastrtps/utils/fixed_size_string.hpp>",
          "28: #include <stdint.h>",
          "29: #include <array>",
          "30: #include <string>",
          "31: #include <vector>",
          "32: #include <map>",
          "33: #include <bitset>",
          "35: #if defined(_WIN32)",
          "36: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "37: #define eProsima_user_DllExport __declspec( dllexport )",
          "38: #else",
          "39: #define eProsima_user_DllExport",
          "40: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "41: #else",
          "42: #define eProsima_user_DllExport",
          "43: #endif  // _WIN32",
          "45: #if defined(_WIN32)",
          "46: #if defined(EPROSIMA_USER_DLL_EXPORT)",
          "47: #if defined(UnboundedHelloWorld_SOURCE)",
          "48: #define UnboundedHelloWorld_DllAPI __declspec( dllexport )",
          "49: #else",
          "50: #define UnboundedHelloWorld_DllAPI __declspec( dllimport )",
          "51: #endif // UnboundedHelloWorld_SOURCE",
          "52: #else",
          "53: #define UnboundedHelloWorld_DllAPI",
          "54: #endif  // EPROSIMA_USER_DLL_EXPORT",
          "55: #else",
          "56: #define UnboundedHelloWorld_DllAPI",
          "57: #endif // _WIN32",
          "59: namespace eprosima {",
          "60: namespace fastcdr {",
          "61: class Cdr;",
          "62: } // namespace fastcdr",
          "63: } // namespace eprosima",
          "70: class UnboundedHelloWorld",
          "71: {",
          "72: public:",
          "77:     eProsima_user_DllExport UnboundedHelloWorld();",
          "82:     eProsima_user_DllExport ~UnboundedHelloWorld();",
          "88:     eProsima_user_DllExport UnboundedHelloWorld(",
          "89:             const UnboundedHelloWorld& x);",
          "95:     eProsima_user_DllExport UnboundedHelloWorld(",
          "96:             UnboundedHelloWorld&& x);",
          "102:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "103:             const UnboundedHelloWorld& x);",
          "109:     eProsima_user_DllExport UnboundedHelloWorld& operator =(",
          "110:             UnboundedHelloWorld&& x);",
          "116:     eProsima_user_DllExport bool operator ==(",
          "117:             const UnboundedHelloWorld& x) const;",
          "123:     eProsima_user_DllExport bool operator !=(",
          "124:             const UnboundedHelloWorld& x) const;",
          "130:     eProsima_user_DllExport void index(",
          "131:             uint16_t _index);",
          "137:     eProsima_user_DllExport uint16_t index() const;",
          "143:     eProsima_user_DllExport uint16_t& index();",
          "149:     eProsima_user_DllExport void message(",
          "150:             const std::string& _message);",
          "156:     eProsima_user_DllExport void message(",
          "157:             std::string&& _message);",
          "163:     eProsima_user_DllExport const std::string& message() const;",
          "169:     eProsima_user_DllExport std::string& message();",
          "177:     eProsima_user_DllExport static size_t getMaxCdrSerializedSize(",
          "178:             size_t current_alignment = 0);",
          "186:     eProsima_user_DllExport static size_t getCdrSerializedSize(",
          "187:             const UnboundedHelloWorld& data,",
          "188:             size_t current_alignment = 0);",
          "195:     eProsima_user_DllExport void serialize(",
          "196:             eprosima::fastcdr::Cdr& cdr) const;",
          "202:     eProsima_user_DllExport void deserialize(",
          "203:             eprosima::fastcdr::Cdr& cdr);",
          "213:     eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(",
          "214:             size_t current_alignment = 0);",
          "219:     eProsima_user_DllExport static bool isKeyDefined();",
          "225:     eProsima_user_DllExport void serializeKey(",
          "226:             eprosima::fastcdr::Cdr& cdr) const;",
          "228: private:",
          "230:     uint16_t m_index;",
          "231:     std::string m_message;",
          "232: };",
          "234: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_H_",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorld.idl||test/blackbox/types/UnboundedHelloWorld.idl": [
          "File: test/blackbox/types/UnboundedHelloWorld.idl -> test/blackbox/types/UnboundedHelloWorld.idl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: struct UnboundedHelloWorld",
          "2: {",
          "3:  unsigned short index;",
          "4:  string message;",
          "5: };",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx||test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <fastcdr/FastBuffer.h>",
          "24: #include <fastcdr/Cdr.h>",
          "26: #include \"UnboundedHelloWorldPubSubTypes.h\"",
          "28: using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;",
          "29: using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;",
          "31: UnboundedHelloWorldPubSubType::UnboundedHelloWorldPubSubType()",
          "32: {",
          "33:     setName(\"UnboundedHelloWorld\");",
          "34:     auto type_size = UnboundedHelloWorld::getMaxCdrSerializedSize();",
          "37:     m_isGetKeyDefined = UnboundedHelloWorld::isKeyDefined();",
          "38:     size_t keyLength = UnboundedHelloWorld::getKeyMaxCdrSerializedSize() > 16 ?",
          "39:             UnboundedHelloWorld::getKeyMaxCdrSerializedSize() : 16;",
          "40:     m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));",
          "41:     memset(m_keyBuffer, 0, keyLength);",
          "42: }",
          "44: UnboundedHelloWorldPubSubType::~UnboundedHelloWorldPubSubType()",
          "45: {",
          "46:     if (m_keyBuffer != nullptr)",
          "47:     {",
          "48:         free(m_keyBuffer);",
          "49:     }",
          "50: }",
          "52: bool UnboundedHelloWorldPubSubType::serialize(",
          "53:         void* data,",
          "54:         SerializedPayload_t* payload)",
          "55: {",
          "56:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "59:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);",
          "61:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);",
          "62:     payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "64:     ser.serialize_encapsulation();",
          "66:     try",
          "67:     {",
          "69:         p_type->serialize(ser);",
          "70:     }",
          "71:     catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)",
          "72:     {",
          "73:         return false;",
          "74:     }",
          "77:     payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());",
          "78:     return true;",
          "79: }",
          "81: bool UnboundedHelloWorldPubSubType::deserialize(",
          "82:         SerializedPayload_t* payload,",
          "83:         void* data)",
          "84: {",
          "85:     try",
          "86:     {",
          "88:         UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "91:         eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);",
          "94:         eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);",
          "97:         deser.read_encapsulation();",
          "98:         payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;",
          "101:         p_type->deserialize(deser);",
          "102:     }",
          "103:     catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)",
          "104:     {",
          "105:         return false;",
          "106:     }",
          "108:     return true;",
          "109: }",
          "111: std::function<uint32_t()> UnboundedHelloWorldPubSubType::getSerializedSizeProvider(",
          "112:         void* data)",
          "113: {",
          "114:     return [data]() -> uint32_t",
          "115:            {",
          "116:                return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<UnboundedHelloWorld*>(data))) +",
          "117:                       4u /*encapsulation*/;",
          "118:            };",
          "119: }",
          "121: void* UnboundedHelloWorldPubSubType::createData()",
          "122: {",
          "123:     return reinterpret_cast<void*>(new UnboundedHelloWorld());",
          "124: }",
          "126: void UnboundedHelloWorldPubSubType::deleteData(",
          "127:         void* data)",
          "128: {",
          "129:     delete(reinterpret_cast<UnboundedHelloWorld*>(data));",
          "130: }",
          "132: bool UnboundedHelloWorldPubSubType::getKey(",
          "133:         void* data,",
          "134:         InstanceHandle_t* handle,",
          "135:         bool force_md5)",
          "136: {",
          "137:     if (!m_isGetKeyDefined)",
          "138:     {",
          "139:         return false;",
          "140:     }",
          "142:     UnboundedHelloWorld* p_type = static_cast<UnboundedHelloWorld*>(data);",
          "145:     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),",
          "146:             UnboundedHelloWorld::getKeyMaxCdrSerializedSize());",
          "149:     eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);",
          "150:     p_type->serializeKey(ser);",
          "151:     if (force_md5 || UnboundedHelloWorld::getKeyMaxCdrSerializedSize() > 16)",
          "152:     {",
          "153:         m_md5.init();",
          "154:         m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));",
          "155:         m_md5.finalize();",
          "156:         for (uint8_t i = 0; i < 16; ++i)",
          "157:         {",
          "158:             handle->value[i] = m_md5.digest[i];",
          "159:         }",
          "160:     }",
          "161:     else",
          "162:     {",
          "163:         for (uint8_t i = 0; i < 16; ++i)",
          "164:         {",
          "165:             handle->value[i] = m_keyBuffer[i];",
          "166:         }",
          "167:     }",
          "168:     return true;",
          "169: }",
          "",
          "---------------"
        ],
        "test/blackbox/types/UnboundedHelloWorldPubSubTypes.h||test/blackbox/types/UnboundedHelloWorldPubSubTypes.h": [
          "File: test/blackbox/types/UnboundedHelloWorldPubSubTypes.h -> test/blackbox/types/UnboundedHelloWorldPubSubTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "24: #define _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "26: #include <fastdds/dds/topic/TopicDataType.hpp>",
          "27: #include <fastrtps/utils/md5.h>",
          "29: #include \"UnboundedHelloWorld.h\"",
          "31: #if !defined(GEN_API_VER) || (GEN_API_VER != 1)",
          "32: #error \\",
          "33:     Generated UnboundedHelloWorld is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.",
          "34: #endif  // GEN_API_VER",
          "40: class UnboundedHelloWorldPubSubType : public eprosima::fastdds::dds::TopicDataType",
          "41: {",
          "42: public:",
          "44:     typedef UnboundedHelloWorld type;",
          "46:     eProsima_user_DllExport UnboundedHelloWorldPubSubType();",
          "48:     eProsima_user_DllExport virtual ~UnboundedHelloWorldPubSubType();",
          "50:     eProsima_user_DllExport virtual bool serialize(",
          "51:             void* data,",
          "52:             eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;",
          "54:     eProsima_user_DllExport virtual bool deserialize(",
          "55:             eprosima::fastrtps::rtps::SerializedPayload_t* payload,",
          "56:             void* data) override;",
          "58:     eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(",
          "59:             void* data) override;",
          "61:     eProsima_user_DllExport virtual bool getKey(",
          "62:             void* data,",
          "63:             eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,",
          "64:             bool force_md5 = false) override;",
          "66:     eProsima_user_DllExport virtual void* createData() override;",
          "68:     eProsima_user_DllExport virtual void deleteData(",
          "69:             void* data) override;",
          "71: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "72:     eProsima_user_DllExport inline bool is_bounded() const override",
          "73:     {",
          "74:         return false;",
          "75:     }",
          "77: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED",
          "79: #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "80:     eProsima_user_DllExport inline bool is_plain() const override",
          "81:     {",
          "82:         return false;",
          "83:     }",
          "85: #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN",
          "87: #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "88:     eProsima_user_DllExport inline bool construct_sample(",
          "89:             void* memory) const override",
          "90:     {",
          "91:         (void)memory;",
          "92:         return false;",
          "93:     }",
          "95: #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE",
          "97:     MD5 m_md5;",
          "98:     unsigned char* m_keyBuffer;",
          "99: };",
          "101: #endif // _FAST_DDS_GENERATED_UNBOUNDEDHELLOWORLD_PUBSUBTYPES_H_",
          "",
          "---------------"
        ],
        "test/blackbox/utils/data_generators.cpp||test/blackbox/utils/data_generators.cpp": [
          "File: test/blackbox/utils/data_generators.cpp -> test/blackbox/utils/data_generators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     return returnedValue;",
          "250: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: std::list<UnboundedHelloWorld> default_unbounded_helloworld_data_generator(",
          "253:         size_t max)",
          "254: {",
          "255:     uint16_t index = 1;",
          "256:     size_t maximum = max ? max : 10;",
          "257:     std::list<UnboundedHelloWorld> returnedValue(maximum);",
          "259:     std::generate(returnedValue.begin(), returnedValue.end(), [&index]",
          "260:             {",
          "261:                 UnboundedHelloWorld hello;",
          "262:                 hello.index(index);",
          "263:                 std::stringstream ss;",
          "264:                 ss << \"HelloWorld \" << index;",
          "265:                 hello.message(ss.str());",
          "266:                 ++index;",
          "267:                 return hello;",
          "268:             });",
          "270:     return returnedValue;",
          "271: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}