{
  "cve_id": "CVE-2023-1801",
  "cve_desc": "The SMB protocol decoder in tcpdump version 4.99.3 can perform an out-of-bounds write when decoding a crafted network packet.",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "03c037bbd75588beba3ee09f26d17783d21e30bc",
  "patch_info": {
    "commit_hash": "03c037bbd75588beba3ee09f26d17783d21e30bc",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/03c037bbd75588beba3ee09f26d17783d21e30bc",
    "files": [
      "netdissect.h",
      "ntp.c",
      "print-ahcp.c",
      "print-arista.c",
      "print-rx.c",
      "print-zep.c",
      "smbutil.c",
      "tcpdump.c",
      "util-print.c"
    ],
    "message": "Have a common routine for converting dates and times to strings.\n\nHave a routine that takes a buffer, a strftime format, and a struct tm *\nas arguments, and:\n\n* checks whether the struct tm * is null and, if so, returns a string\nindicating that the date and time couldn't be converted;\n\n* otherwise, passes it to strftime(), along with the buffer and the\nformat argument and, if strftime() returns 0, meaning the string didn't\nfit into the buffer and thus that the buffer's contents are undefined,\nreturns a string indicating that the date and time didn't fit into the\nbuffer;\n\n* otherwise, returns a pointer to the buffer.\n\nCall that routine instead of directly calling strftime() in printers;\nthat prevents printing a buffer with undefined data if the buffer isn't\nbig enough for the string.\n\nAlso, when generating file names using an strftime format, check the\nreturn value of strftime() to make sure the buffer didn't overflow.",
    "before_after_code_files": [
      "netdissect.h||netdissect.h",
      "ntp.c||ntp.c",
      "print-ahcp.c||print-ahcp.c",
      "print-arista.c||print-arista.c",
      "print-rx.c||print-rx.c",
      "print-zep.c||print-zep.c",
      "smbutil.c||smbutil.c",
      "tcpdump.c||tcpdump.c",
      "util-print.c||util-print.c"
    ]
  },
  "patch_diff": {
    "netdissect.h||netdissect.h": [
      "File: netdissect.h -> netdissect.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "423: extern void signed_relts_print(netdissect_options *, int32_t);",
      "424: extern void unsigned_relts_print(netdissect_options *, uint32_t);",
      "426: extern void fn_print_char(netdissect_options *, u_char);",
      "427: extern void fn_print_str(netdissect_options *, const u_char *);",
      "428: extern u_int nd_printztn(netdissect_options *, const u_char *, u_int, const u_char *);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "426: extern const char *nd_format_time(char *buf, size_t bufsize,",
      "427:     const char *format, const struct tm *timeptr);",
      "",
      "---------------"
    ],
    "ntp.c||ntp.c": [
      "File: ntp.c -> ntp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:  if (i) {",
      "55:      int64_t seconds_64bit = (int64_t)i - JAN_1970;",
      "56:      time_t seconds;",
      "58:      char time_buf[128];",
      "60:      seconds = (time_t)seconds_64bit;",
      "61:      if (seconds != seconds_64bit) {",
      "",
      "[Removed Lines]",
      "57:      struct tm *tm;",
      "",
      "[Added Lines]",
      "58:      const char *time_string;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:      } else {",
      "81:      }",
      "82:  }",
      "83: }",
      "",
      "[Removed Lines]",
      "66:   ND_PRINT(\" (unrepresentable)\");",
      "68:   tm = gmtime(&seconds);",
      "69:   if (tm == NULL) {",
      "75:       ND_PRINT(\" (unrepresentable)\");",
      "76:   } else {",
      "78:       strftime(time_buf, sizeof (time_buf), \"%Y-%m-%dT%H:%M:%SZ\", tm);",
      "79:       ND_PRINT(\" (%s)\", time_buf);",
      "80:   }",
      "",
      "[Added Lines]",
      "66:   time_string = \"[Time is too large to fit into a time_t]\";",
      "69:   time_string = nd_format_time(time_buf, sizeof (time_buf),",
      "70:     \"%Y-%m-%dT%H:%M:%SZ\", gmtime(&seconds));",
      "72:      ND_PRINT(\" (%s)\", time_string);",
      "",
      "---------------"
    ],
    "print-ahcp.c||print-ahcp.c": [
      "File: print-ahcp.c -> print-ahcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "102:                 const u_char *cp, uint8_t len)",
      "103: {",
      "104:  time_t t;",
      "108:  if (len != 4)",
      "109:   goto invalid;",
      "110:  t = GET_BE_U_4(cp);",
      "117:  return;",
      "119: invalid:",
      "",
      "[Removed Lines]",
      "105:  struct tm *tm;",
      "106:  char buf[BUFSIZE];",
      "111:  if (NULL == (tm = gmtime(&t)))",
      "112:   ND_PRINT(\": gmtime() error\");",
      "113:  else if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))",
      "114:   ND_PRINT(\": strftime() error\");",
      "115:  else",
      "116:   ND_PRINT(\": %s UTC\", buf);",
      "",
      "[Added Lines]",
      "105:  char buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];",
      "110:  ND_PRINT(\": %s\",",
      "111:      nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S UTC\",",
      "112:        gmtime(&t)));",
      "",
      "---------------"
    ],
    "print-arista.c||print-arista.c": [
      "File: print-arista.c -> print-arista.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include \"netdissect.h\"",
      "12: #include \"extract.h\"",
      "",
      "[Removed Lines]",
      "13: #include \"addrtoname.h\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:   uint32_t nanoseconds)",
      "94: {",
      "95:  time_t ts;",
      "99:  ts = seconds + (nanoseconds / 1000000000);",
      "100:  nanoseconds %= 1000000000;",
      "107: }",
      "109: int",
      "",
      "[Removed Lines]",
      "96:  struct tm *tm;",
      "97:  char buf[BUFSIZE];",
      "101:  if (NULL == (tm = gmtime(&ts)))",
      "102:   ND_PRINT(\"gmtime() error\");",
      "103:  else if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))",
      "104:   ND_PRINT(\"strftime() error\");",
      "105:  else",
      "106:   ND_PRINT(\"%s.%09u\", buf, nanoseconds);",
      "",
      "[Added Lines]",
      "95:  char buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];",
      "99:  ND_PRINT(\"%s.%09u\",",
      "100:      nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\",",
      "101:         gmtime(&ts)), nanoseconds);",
      "",
      "---------------"
    ],
    "print-rx.c||print-rx.c": [
      "File: print-rx.c -> print-rx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:    ND_PRINT(\" %\" PRIu64, _i); \\",
      "795:   }",
      "798:    _t = (time_t) GET_BE_S_4(bp); \\",
      "799:    bp += sizeof(int32_t); \\",
      "803:   }",
      "805: #define STOREATTROUT() { uint32_t mask, _i; \\",
      "",
      "[Removed Lines]",
      "797: #define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\",
      "800:    tm = localtime(&_t); \\",
      "801:    strftime(str, 256, \"%Y/%m/%d %H:%M:%S\", tm); \\",
      "802:    ND_PRINT(\" %s\", str); \\",
      "",
      "[Added Lines]",
      "797: #define DATEOUT() { time_t _t; char str[256]; \\",
      "800:    ND_PRINT(\" %s\", \\",
      "801:        nd_format_time(str, sizeof(str), \\",
      "802:          \"%Y/%m/%d %H:%M:%S\", localtime(&_t))); \\",
      "",
      "---------------"
    ],
    "print-zep.c||print-zep.c": [
      "File: print-zep.c -> print-zep.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:  if (i) {",
      "84:   time_t seconds = i - JAN_1970;",
      "86:   char time_buf[128];",
      "91:  }",
      "92: }",
      "",
      "[Removed Lines]",
      "85:   struct tm *tm;",
      "88:   tm = localtime(&seconds);",
      "89:   strftime(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\", tm);",
      "90:   ND_PRINT(\" (%s)\", time_buf);",
      "",
      "[Added Lines]",
      "87:   ND_PRINT(\" (%s)\",",
      "88:       nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",",
      "89:         localtime(&seconds)));",
      "",
      "---------------"
    ],
    "smbutil.c||smbutil.c": [
      "File: smbutil.c -> smbutil.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "768:  case 'T':",
      "769:    {",
      "770:      time_t t;",
      "772:      const char *tstring;",
      "774:      uint32_t x;",
      "776:      switch (atoi(fmt + 1)) {",
      "",
      "[Removed Lines]",
      "771:      struct tm *lt;",
      "773:      char buffer[sizeof(\"Www Mmm dd hh:mm:ss yyyyy\\n\")];",
      "",
      "[Added Lines]",
      "772:      char buffer[sizeof(\"Www Mmm dd hh:mm:ss yyyyy\")];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "800:   break;",
      "801:      }",
      "802:      if (t != 0) {",
      "810:      } else",
      "813:      fmt++;",
      "814:      while (ND_ASCII_ISDIGIT(*fmt))",
      "815:   fmt++;",
      "",
      "[Removed Lines]",
      "803:   lt = localtime(&t);",
      "804:   if (lt != NULL) {",
      "805:       strftime(buffer, sizeof(buffer), \"%a %b %e %T %Y%n\", lt);",
      "806:       tstring = buffer;",
      "807:   }",
      "808:   else",
      "809:       tstring = \"(Can't convert time)\\n\";",
      "811:   tstring = \"NULL\\n\";",
      "812:      ND_PRINT(\"%s\", tstring);",
      "",
      "[Added Lines]",
      "802:       tstring = nd_format_time(buffer, sizeof(buffer), \"%a %b %e %T %Y\",",
      "803:       localtime(&t));",
      "805:   tstring = \"NULL\";",
      "806:      ND_PRINT(\"%s\\n\", tstring);",
      "",
      "---------------"
    ],
    "tcpdump.c||tcpdump.c": [
      "File: tcpdump.c -> tcpdump.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "843:         char *filename = malloc(PATH_MAX + 1);",
      "844:         if (filename == NULL)",
      "845:             error(\"%s: malloc\", __func__);",
      "848:         if (Gflag != 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "846:         if (strlen(orig_name) == 0)",
      "847:             error(\"an empty string is not a valid file name\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "854:           }",
      "860:         } else {",
      "861:           strncpy(filename, orig_name, PATH_MAX);",
      "862:         }",
      "",
      "[Removed Lines]",
      "859:           strftime(filename, PATH_MAX, orig_name, local_tm);",
      "",
      "[Added Lines]",
      "875:           if (strftime(filename, PATH_MAX, orig_name, local_tm) == 0) {",
      "876:             error(\"%s: strftime\", __func__);",
      "877:           }",
      "",
      "---------------"
    ],
    "util-print.c||util-print.c": [
      "File: util-print.c -> util-print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "230: {",
      "231:  time_t Time = sec;",
      "232:  struct tm *tm;",
      "235:  if ((unsigned)sec & 0x80000000) {",
      "236:   ND_PRINT(\"[Error converting time]\");",
      "",
      "[Removed Lines]",
      "233:  char timestr[32];",
      "",
      "[Added Lines]",
      "233:  char timebuf[32];",
      "234:  const char *timestr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:  else",
      "243:   tm = gmtime(&Time);",
      "248:  }",
      "253:  ND_PRINT(\"%s\", timestr);",
      "255:  ts_frac_print(ndo, usec);",
      "",
      "[Removed Lines]",
      "245:  if (!tm) {",
      "246:   ND_PRINT(\"[Error converting time]\");",
      "247:   return;",
      "249:  if (date_flag == WITH_DATE)",
      "250:   strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm);",
      "251:  else",
      "252:   strftime(timestr, sizeof(timestr), \"%H:%M:%S\", tm);",
      "",
      "[Added Lines]",
      "246:  if (date_flag == WITH_DATE) {",
      "247:   timestr = nd_format_time(timebuf, sizeof(timebuf),",
      "248:       \"%Y-%m-%d %H:%M:%S\", tm);",
      "249:  } else {",
      "250:   timestr = nd_format_time(timebuf, sizeof(timebuf),",
      "251:       \"%H:%M:%S\", tm);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "405:  unsigned_relts_print(ndo, secs);",
      "406: }",
      "409: void nd_print_trunc(netdissect_options *ndo)",
      "410: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "415: const char *",
      "416: nd_format_time(char *buf, size_t bufsize, const char *format,",
      "417:          const struct tm *timeptr)",
      "418: {",
      "419:  if (timeptr != NULL) {",
      "420:   if (strftime(buf, bufsize, format, timeptr) != 0)",
      "421:    return (buf);",
      "422:   else",
      "423:    return (\"[nd_format_time() buffer is too small]\");",
      "424:  } else",
      "425:   return (\"[localtime() or gmtime() couldn't convert the date and time]\");",
      "426: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "031999137f189428885b088e6b59bd218d1223b7",
      "candidate_info": {
        "commit_hash": "031999137f189428885b088e6b59bd218d1223b7",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/031999137f189428885b088e6b59bd218d1223b7",
        "files": [
          "print-zep.c"
        ],
        "message": "ZEP: Use the \"%Y-%m-%d\" date format\n\nReplace \"%Y/%m/%d\" with \"%Y-%m-%d\" like in most date formats.\n\n(backported from commit c3dc126cfa7250e096ae2edf329502c4ab5eda0a)",
        "before_after_code_files": [
          "print-zep.c||print-zep.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-zep.c||print-zep.c"
          ],
          "candidate": [
            "print-zep.c||print-zep.c"
          ]
        }
      },
      "candidate_diff": {
        "print-zep.c||print-zep.c": [
          "File: print-zep.c -> print-zep.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   char time_buf[128];",
          "87:   ND_PRINT(\" (%s)\",",
          "89:         localtime(&seconds)));",
          "90:  }",
          "91: }",
          "",
          "[Removed Lines]",
          "88:       nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",",
          "",
          "[Added Lines]",
          "88:       nd_format_time(time_buf, sizeof (time_buf), \"%Y-%m-%d %H:%M:%S\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8a83655e42e74a8a0d3b450df3b8acbb4212975",
      "candidate_info": {
        "commit_hash": "f8a83655e42e74a8a0d3b450df3b8acbb4212975",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/f8a83655e42e74a8a0d3b450df3b8acbb4212975",
        "files": [
          "print-rx.c",
          "tests/rx-v.out",
          "tests/rx.out"
        ],
        "message": "RX: Use the \"%Y-%m-%d\" date format\n\nReplace \"%Y/%m/%d\" with \"%Y-%m-%d\" like in most date formats.\n\n(cherry picked from commit 8e464bd4d80e8b929ea05bdfc19b6e929a1196fd)",
        "before_after_code_files": [
          "print-rx.c||print-rx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-rx.c||print-rx.c"
          ],
          "candidate": [
            "print-rx.c||print-rx.c"
          ]
        }
      },
      "candidate_diff": {
        "print-rx.c||print-rx.c": [
          "File: print-rx.c -> print-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:    bp += sizeof(int32_t); \\",
          "800:    ND_PRINT(\" %s\", \\",
          "801:        nd_format_time(str, sizeof(str), \\",
          "803:   }",
          "805: #define STOREATTROUT() { uint32_t mask, _i; \\",
          "",
          "[Removed Lines]",
          "802:          \"%Y/%m/%d %H:%M:%S\", localtime(&_t))); \\",
          "",
          "[Added Lines]",
          "802:          \"%Y-%m-%d %H:%M:%S\", localtime(&_t))); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d96060f3a1df1937f1961ab687072e338f7dc85e",
      "candidate_info": {
        "commit_hash": "d96060f3a1df1937f1961ab687072e338f7dc85e",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/d96060f3a1df1937f1961ab687072e338f7dc85e",
        "files": [
          "smbutil.c"
        ],
        "message": "smbutil.c: Use the \"%Y-%m-%d\" date format\n\nReplace \"%Y/%m/%d\" with \"%Y-%m-%d\" like in most date formats.\n\n%T is equivalent to %H:%M:%S.\n\nMoreover: Fix indentation.\n\n(cherry picked from commit a705f1c1eebc61d460509572f977efab56481190)",
        "before_after_code_files": [
          "smbutil.c||smbutil.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "smbutil.c||smbutil.c"
          ],
          "candidate": [
            "smbutil.c||smbutil.c"
          ]
        }
      },
      "candidate_diff": {
        "smbutil.c||smbutil.c": [
          "File: smbutil.c -> smbutil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "800:   break;",
          "801:      }",
          "802:      if (t != 0) {",
          "805:      } else",
          "806:   tstring = \"NULL\";",
          "807:      ND_PRINT(\"%s\\n\", tstring);",
          "",
          "[Removed Lines]",
          "803:       tstring = nd_format_time(buffer, sizeof(buffer), \"%a %b %e %T %Y\",",
          "804:       localtime(&t));",
          "",
          "[Added Lines]",
          "803:   tstring = nd_format_time(buffer, sizeof(buffer), \"%Y-%m-%d %T\",",
          "804:       localtime(&t));",
          "",
          "---------------"
        ]
      }
    }
  ]
}