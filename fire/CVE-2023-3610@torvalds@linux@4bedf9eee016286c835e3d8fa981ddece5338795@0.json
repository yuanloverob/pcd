{
  "cve_id": "CVE-2023-3610",
  "cve_desc": "A use-after-free vulnerability in the Linux kernel's netfilter: nf_tables component can be exploited to achieve local privilege escalation.\n\nFlaw in the error handling of bound chains causes a use-after-free in the abort path of NFT_MSG_NEWRULE. The vulnerability requires CAP_NET_ADMIN to be triggered.\n\nWe recommend upgrading past commit 4bedf9eee016286c835e3d8fa981ddece5338795.",
  "repo": "torvalds/linux",
  "patch_hash": "4bedf9eee016286c835e3d8fa981ddece5338795",
  "patch_info": {
    "commit_hash": "4bedf9eee016286c835e3d8fa981ddece5338795",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4bedf9eee016286c835e3d8fa981ddece5338795",
    "files": [
      "include/net/netfilter/nf_tables.h",
      "net/netfilter/nf_tables_api.c",
      "net/netfilter/nft_immediate.c"
    ],
    "message": "netfilter: nf_tables: fix chain binding transaction logic\n\nAdd bound flag to rule and chain transactions as in 6a0a8d10a366\n(\"netfilter: nf_tables: use-after-free in failing rule with bound set\")\nto skip them in case that the chain is already bound from the abort\npath.\n\nThis patch fixes an imbalance in the chain use refcnt that triggers a\nWARN_ON on the table and chain destroy path.\n\nThis patch also disallows nested chain bindings, which is not\nsupported from userspace.\n\nThe logic to deal with chain binding in nft_data_hold() and\nnft_data_release() is not correct. The NFT_TRANS_PREPARE state needs a\nspecial handling in case a chain is bound but next expressions in the\nsame rule fail to initialize as described by 1240eb93f061 (\"netfilter:\nnf_tables: incorrect error path handling with NFT_MSG_NEWRULE\").\n\nThe chain is left bound if rule construction fails, so the objects\nstored in this chain (and the chain itself) are released by the\ntransaction records from the abort path, follow up patch (\"netfilter:\nnf_tables: add NFT_TRANS_PREPARE_ERROR to deal with bound set/chain\")\ncompletes this error handling.\n\nWhen deleting an existing rule, chain bound flag is set off so the\nrule expression .destroy path releases the objects.\n\nFixes: d0e2c7de92c7 (\"netfilter: nf_tables: add NFT_CHAIN_BINDING\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
    "before_after_code_files": [
      "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
      "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
      "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
    ]
  },
  "patch_diff": {
    "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h": [
      "File: include/net/netfilter/nf_tables.h -> include/net/netfilter/nf_tables.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1009:  return (void *)&rule->data[rule->dlen];",
      "1010: }",
      "1014: static inline void nft_set_elem_update_expr(const struct nft_set_ext *ext,",
      "1015:          struct nft_regs *regs,",
      "",
      "[Removed Lines]",
      "1012: void nf_tables_rule_release(const struct nft_ctx *ctx, struct nft_rule *rule);",
      "",
      "[Added Lines]",
      "1012: void nft_rule_expr_activate(const struct nft_ctx *ctx, struct nft_rule *rule);",
      "1013: void nft_rule_expr_deactivate(const struct nft_ctx *ctx, struct nft_rule *rule,",
      "1014:          enum nft_trans_phase phase);",
      "1015: void nf_tables_rule_destroy(const struct nft_ctx *ctx, struct nft_rule *rule);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1104:     const struct nft_set_iter *iter,",
      "1105:     struct nft_set_elem *elem);",
      "1106: int nft_set_catchall_validate(const struct nft_ctx *ctx, struct nft_set *set);",
      "1108: enum nft_chain_types {",
      "1109:  NFT_CHAIN_T_DEFAULT = 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1110: int nf_tables_bind_chain(const struct nft_ctx *ctx, struct nft_chain *chain);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1140: int nft_chain_validate_hooks(const struct nft_chain *chain,",
      "1141:                              unsigned int hook_flags);",
      "1143: static inline bool nft_chain_is_bound(struct nft_chain *chain)",
      "1144: {",
      "1145:  return (chain->flags & NFT_CHAIN_BINDING) && chain->bound;",
      "1146: }",
      "1148: void nft_chain_del(struct nft_chain *chain);",
      "1149: void nf_tables_chain_destroy(struct nft_ctx *ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1147: static inline bool nft_chain_binding(const struct nft_chain *chain)",
      "1148: {",
      "1149:  return chain->flags & NFT_CHAIN_BINDING;",
      "1150: }",
      "1157: int nft_chain_add(struct nft_table *table, struct nft_chain *chain);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1575:  struct nft_rule   *rule;",
      "1576:  struct nft_flow_rule  *flow;",
      "1577:  u32    rule_id;",
      "1578: };",
      "1580: #define nft_trans_rule(trans) \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1588:  bool    bound;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1583:  (((struct nft_trans_rule *)trans->data)->flow)",
      "1584: #define nft_trans_rule_id(trans) \\",
      "1585:  (((struct nft_trans_rule *)trans->data)->rule_id)",
      "1587: struct nft_trans_set {",
      "1588:  struct nft_set   *set;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1597: #define nft_trans_rule_bound(trans) \\",
      "1598:  (((struct nft_trans_rule *)trans->data)->bound)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1607:  (((struct nft_trans_set *)trans->data)->gc_int)",
      "1609: struct nft_trans_chain {",
      "1610:  bool    update;",
      "1611:  char    *name;",
      "1612:  struct nft_stats __percpu *stats;",
      "1613:  u8    policy;",
      "1614:  u32    chain_id;",
      "1615:  struct nft_base_chain  *basechain;",
      "1616:  struct list_head  hook_list;",
      "1617: };",
      "1619: #define nft_trans_chain_update(trans) \\",
      "1620:  (((struct nft_trans_chain *)trans->data)->update)",
      "1621: #define nft_trans_chain_name(trans) \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1623:  struct nft_chain  *chain;",
      "1628:  bool    bound;",
      "1634: #define nft_trans_chain(trans) \\",
      "1635:  (((struct nft_trans_chain *)trans->data)->chain)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1624:  (((struct nft_trans_chain *)trans->data)->stats)",
      "1625: #define nft_trans_chain_policy(trans) \\",
      "1626:  (((struct nft_trans_chain *)trans->data)->policy)",
      "1627: #define nft_trans_chain_id(trans) \\",
      "1628:  (((struct nft_trans_chain *)trans->data)->chain_id)",
      "1629: #define nft_trans_basechain(trans) \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1644: #define nft_trans_chain_bound(trans) \\",
      "1645:  (((struct nft_trans_chain *)trans->data)->bound)",
      "",
      "---------------"
    ],
    "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c": [
      "File: net/netfilter/nf_tables_api.c -> net/netfilter/nf_tables_api.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "193:  }",
      "194: }",
      "196: static int nft_netdev_register_hooks(struct net *net,",
      "197:          struct list_head *hook_list)",
      "198: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "196: static void nft_chain_trans_bind(const struct nft_ctx *ctx, struct nft_chain *chain)",
      "197: {",
      "198:  struct nftables_pernet *nft_net;",
      "199:  struct net *net = ctx->net;",
      "200:  struct nft_trans *trans;",
      "202:  if (!nft_chain_binding(chain))",
      "203:   return;",
      "205:  nft_net = nft_pernet(net);",
      "206:  list_for_each_entry_reverse(trans, &nft_net->commit_list, list) {",
      "207:   switch (trans->msg_type) {",
      "208:   case NFT_MSG_NEWCHAIN:",
      "209:    if (nft_trans_chain(trans) == chain)",
      "210:     nft_trans_chain_bound(trans) = true;",
      "211:    break;",
      "212:   case NFT_MSG_NEWRULE:",
      "213:    if (trans->ctx.chain == chain)",
      "214:     nft_trans_rule_bound(trans) = true;",
      "215:    break;",
      "216:   }",
      "217:  }",
      "218: }",
      "220: int nf_tables_bind_chain(const struct nft_ctx *ctx, struct nft_chain *chain)",
      "221: {",
      "222:  if (!nft_chain_binding(chain))",
      "223:   return 0;",
      "225:  if (nft_chain_binding(ctx->chain))",
      "226:   return -EOPNOTSUPP;",
      "228:  if (chain->bound)",
      "229:   return -EBUSY;",
      "231:  chain->bound = true;",
      "232:  chain->use++;",
      "233:  nft_chain_trans_bind(ctx, chain);",
      "235:  return 0;",
      "236: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "338:     ntohl(nla_get_be32(ctx->nla[NFTA_CHAIN_ID]));",
      "339:   }",
      "340:  }",
      "342:  nft_trans_commit_list_add_tail(ctx->net, trans);",
      "343:  return trans;",
      "344: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:  nft_trans_chain(trans) = ctx->chain;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "357:  return 0;",
      "358: }",
      "362: {",
      "363:  struct nft_expr *expr;",
      "",
      "[Removed Lines]",
      "360: static void nft_rule_expr_activate(const struct nft_ctx *ctx,",
      "361:        struct nft_rule *rule)",
      "",
      "[Added Lines]",
      "403: void nft_rule_expr_activate(const struct nft_ctx *ctx, struct nft_rule *rule)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "371:  }",
      "372: }",
      "377: {",
      "378:  struct nft_expr *expr;",
      "",
      "[Removed Lines]",
      "374: static void nft_rule_expr_deactivate(const struct nft_ctx *ctx,",
      "375:          struct nft_rule *rule,",
      "376:          enum nft_trans_phase phase)",
      "",
      "[Added Lines]",
      "416: void nft_rule_expr_deactivate(const struct nft_ctx *ctx, struct nft_rule *rule,",
      "417:          enum nft_trans_phase phase)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2226:  return 0;",
      "2227: }",
      "2230: {",
      "2231:  int err;",
      "",
      "[Removed Lines]",
      "2229: static int nft_chain_add(struct nft_table *table, struct nft_chain *chain)",
      "",
      "[Added Lines]",
      "2270: int nft_chain_add(struct nft_table *table, struct nft_chain *chain)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3490:  return err;",
      "3491: }",
      "3495: {",
      "3496:  struct nft_expr *expr, *next;",
      "",
      "[Removed Lines]",
      "3493: static void nf_tables_rule_destroy(const struct nft_ctx *ctx,",
      "3494:        struct nft_rule *rule)",
      "",
      "[Added Lines]",
      "3534: void nf_tables_rule_destroy(const struct nft_ctx *ctx, struct nft_rule *rule)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3508:  kfree(rule);",
      "3509: }",
      "3512: {",
      "3513:  nft_rule_expr_deactivate(ctx, rule, NFT_TRANS_RELEASE);",
      "3514:  nf_tables_rule_destroy(ctx, rule);",
      "",
      "[Removed Lines]",
      "3511: void nf_tables_rule_release(const struct nft_ctx *ctx, struct nft_rule *rule)",
      "",
      "[Added Lines]",
      "3551: static void nf_tables_rule_release(const struct nft_ctx *ctx, struct nft_rule *rule)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "6638: void nft_data_hold(const struct nft_data *data, enum nft_data_types type)",
      "6639: {",
      "6640:  struct nft_chain *chain;",
      "6643:  if (type == NFT_DATA_VERDICT) {",
      "6644:   switch (data->verdict.code) {",
      "",
      "[Removed Lines]",
      "6641:  struct nft_rule *rule;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "6646:   case NFT_GOTO:",
      "6647:    chain = data->verdict.chain;",
      "6648:    chain->use++;",
      "6658:    break;",
      "6659:   }",
      "6660:  }",
      "",
      "[Removed Lines]",
      "6650:    if (!nft_chain_is_bound(chain))",
      "6651:     break;",
      "6653:    chain->table->use++;",
      "6654:    list_for_each_entry(rule, &chain->rules, list)",
      "6655:     chain->use++;",
      "6657:    nft_chain_add(chain->table, chain);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "9677:     kfree(nft_trans_chain_name(trans));",
      "9678:     nft_trans_destroy(trans);",
      "9679:    } else {",
      "9681:      nft_trans_destroy(trans);",
      "9682:      break;",
      "9683:     }",
      "",
      "[Removed Lines]",
      "9680:     if (nft_chain_is_bound(trans->ctx.chain)) {",
      "",
      "[Added Lines]",
      "9710:     if (nft_trans_chain_bound(trans)) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "9700:    nft_trans_destroy(trans);",
      "9701:    break;",
      "9702:   case NFT_MSG_NEWRULE:",
      "9703:    trans->ctx.chain->use--;",
      "9704:    list_del_rcu(&nft_trans_rule(trans)->list);",
      "9705:    nft_rule_expr_deactivate(&trans->ctx,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9733:    if (nft_trans_rule_bound(trans)) {",
      "9734:     nft_trans_destroy(trans);",
      "9735:     break;",
      "9736:    }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "10263: static void nft_verdict_uninit(const struct nft_data *data)",
      "10264: {",
      "10265:  struct nft_chain *chain;",
      "10268:  switch (data->verdict.code) {",
      "10269:  case NFT_JUMP:",
      "10270:  case NFT_GOTO:",
      "10271:   chain = data->verdict.chain;",
      "10272:   chain->use--;",
      "10282:   break;",
      "10283:  }",
      "10284: }",
      "",
      "[Removed Lines]",
      "10266:  struct nft_rule *rule;",
      "10274:   if (!nft_chain_is_bound(chain))",
      "10275:    break;",
      "10277:   chain->table->use--;",
      "10278:   list_for_each_entry(rule, &chain->rules, list)",
      "10279:    chain->use--;",
      "10281:   nft_chain_del(chain);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c": [
      "File: net/netfilter/nft_immediate.c -> net/netfilter/nft_immediate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:   switch (priv->data.verdict.code) {",
      "77:   case NFT_JUMP:",
      "78:   case NFT_GOTO:",
      "84:    break;",
      "85:   default:",
      "86:    break;",
      "",
      "[Removed Lines]",
      "79:    if (nft_chain_is_bound(chain)) {",
      "80:     err = -EBUSY;",
      "81:     goto err1;",
      "82:    }",
      "83:    chain->bound = true;",
      "",
      "[Added Lines]",
      "79:    err = nf_tables_bind_chain(ctx, chain);",
      "80:    if (err < 0)",
      "81:     return err;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:        const struct nft_expr *expr)",
      "99: {",
      "100:  const struct nft_immediate_expr *priv = nft_expr_priv(expr);",
      "102:  return nft_data_hold(&priv->data, nft_dreg_to_type(priv->dreg));",
      "103: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99:  const struct nft_data *data = &priv->data;",
      "100:  struct nft_ctx chain_ctx;",
      "101:  struct nft_chain *chain;",
      "102:  struct nft_rule *rule;",
      "104:  if (priv->dreg == NFT_REG_VERDICT) {",
      "105:   switch (data->verdict.code) {",
      "106:   case NFT_JUMP:",
      "107:   case NFT_GOTO:",
      "108:    chain = data->verdict.chain;",
      "109:    if (!nft_chain_binding(chain))",
      "110:     break;",
      "112:    chain_ctx = *ctx;",
      "113:    chain_ctx.chain = chain;",
      "115:    list_for_each_entry(rule, &chain->rules, list)",
      "116:     nft_rule_expr_activate(&chain_ctx, rule);",
      "118:    nft_clear(ctx->net, chain);",
      "119:    break;",
      "120:   default:",
      "121:    break;",
      "122:   }",
      "123:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "107:          enum nft_trans_phase phase)",
      "108: {",
      "109:  const struct nft_immediate_expr *priv = nft_expr_priv(expr);",
      "111:  if (phase == NFT_TRANS_COMMIT)",
      "112:   return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:  const struct nft_data *data = &priv->data;",
      "134:  struct nft_ctx chain_ctx;",
      "135:  struct nft_chain *chain;",
      "136:  struct nft_rule *rule;",
      "138:  if (priv->dreg == NFT_REG_VERDICT) {",
      "139:   switch (data->verdict.code) {",
      "140:   case NFT_JUMP:",
      "141:   case NFT_GOTO:",
      "142:    chain = data->verdict.chain;",
      "143:    if (!nft_chain_binding(chain))",
      "144:     break;",
      "146:    chain_ctx = *ctx;",
      "147:    chain_ctx.chain = chain;",
      "149:    list_for_each_entry(rule, &chain->rules, list)",
      "150:     nft_rule_expr_deactivate(&chain_ctx, rule, phase);",
      "152:    switch (phase) {",
      "153:    case NFT_TRANS_PREPARE:",
      "154:     nft_deactivate_next(ctx->net, chain);",
      "155:     break;",
      "156:    default:",
      "157:     nft_chain_del(chain);",
      "158:     chain->bound = false;",
      "159:     chain->table->use--;",
      "160:     break;",
      "161:    }",
      "162:    break;",
      "163:   default:",
      "164:    break;",
      "165:   }",
      "166:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "131:  case NFT_GOTO:",
      "132:   chain = data->verdict.chain;",
      "135:    break;",
      "137:   chain_ctx = *ctx;",
      "138:   chain_ctx.chain = chain;",
      "143:   nf_tables_chain_destroy(&chain_ctx);",
      "144:   break;",
      "145:  default:",
      "",
      "[Removed Lines]",
      "134:   if (!nft_chain_is_bound(chain))",
      "140:   list_for_each_entry_safe(rule, n, &chain->rules, list)",
      "141:    nf_tables_rule_release(&chain_ctx, rule);",
      "",
      "[Added Lines]",
      "191:   if (!nft_chain_binding(chain))",
      "192:    break;",
      "197:   if (chain->bound) {",
      "198:    chain->use--;",
      "200:   }",
      "206:   chain->use--;",
      "207:   list_for_each_entry_safe(rule, n, &chain->rules, list) {",
      "208:    chain->use--;",
      "209:    list_del(&rule->list);",
      "210:    nf_tables_rule_destroy(&chain_ctx, rule);",
      "211:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b29be0ca8e816119ccdf95cc7d7c7be9bde005f1",
      "candidate_info": {
        "commit_hash": "b29be0ca8e816119ccdf95cc7d7c7be9bde005f1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b29be0ca8e816119ccdf95cc7d7c7be9bde005f1",
        "files": [
          "net/netfilter/nft_immediate.c"
        ],
        "message": "netfilter: nft_immediate: drop chain reference counter on error\n\nIn the init path, nft_data_init() bumps the chain reference counter,\ndecrement it on error by following the error path which calls\nnft_data_release() to restore it.\n\nFixes: 4bedf9eee016 (\"netfilter: nf_tables: fix chain binding transaction logic\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
          ],
          "candidate": [
            "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
          ]
        }
      },
      "candidate_diff": {
        "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c": [
          "File: net/netfilter/nft_immediate.c -> net/netfilter/nft_immediate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   case NFT_GOTO:",
          "79:    err = nf_tables_bind_chain(ctx, chain);",
          "80:    if (err < 0)",
          "82:    break;",
          "83:   default:",
          "84:    break;",
          "",
          "[Removed Lines]",
          "81:     return err;",
          "",
          "[Added Lines]",
          "81:     goto err1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26b5a5712eb85e253724e56a54c17f8519bd8e4e",
      "candidate_info": {
        "commit_hash": "26b5a5712eb85e253724e56a54c17f8519bd8e4e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/26b5a5712eb85e253724e56a54c17f8519bd8e4e",
        "files": [
          "include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_immediate.c"
        ],
        "message": "netfilter: nf_tables: add NFT_TRANS_PREPARE_ERROR to deal with bound set/chain\n\nAdd a new state to deal with rule expressions deactivation from the\nnewrule error path, otherwise the anonymous set remains in the list in\ninactive state for the next generation. Mark the set/chain transaction\nas unbound so the abort path releases this object, set it as inactive in\nthe next generation so it is not reachable anymore from this transaction\nand reference counter is dropped.\n\nFixes: 1240eb93f061 (\"netfilter: nf_tables: incorrect error path handling with NFT_MSG_NEWRULE\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
            "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
          ],
          "candidate": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
            "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h": [
          "File: include/net/netfilter/nf_tables.h -> include/net/netfilter/nf_tables.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "902: enum nft_trans_phase {",
          "903:  NFT_TRANS_PREPARE,",
          "904:  NFT_TRANS_ABORT,",
          "905:  NFT_TRANS_COMMIT,",
          "906:  NFT_TRANS_RELEASE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:  NFT_TRANS_PREPARE_ERROR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1108:     struct nft_set_elem *elem);",
          "1109: int nft_set_catchall_validate(const struct nft_ctx *ctx, struct nft_set *set);",
          "1110: int nf_tables_bind_chain(const struct nft_ctx *ctx, struct nft_chain *chain);",
          "1112: enum nft_chain_types {",
          "1113:  NFT_CHAIN_T_DEFAULT = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112: void nf_tables_unbind_chain(const struct nft_ctx *ctx, struct nft_chain *chain);",
          "",
          "---------------"
        ],
        "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c": [
          "File: net/netfilter/nf_tables_api.c -> net/netfilter/nf_tables_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:  kfree(trans);",
          "170: }",
          "173: {",
          "174:  struct nftables_pernet *nft_net;",
          "175:  struct net *net = ctx->net;",
          "",
          "[Removed Lines]",
          "172: static void nft_set_trans_bind(const struct nft_ctx *ctx, struct nft_set *set)",
          "",
          "[Added Lines]",
          "172: static void __nft_set_trans_bind(const struct nft_ctx *ctx, struct nft_set *set,",
          "173:      bool bind)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   switch (trans->msg_type) {",
          "184:   case NFT_MSG_NEWSET:",
          "185:    if (nft_trans_set(trans) == set)",
          "187:    break;",
          "188:   case NFT_MSG_NEWSETELEM:",
          "189:    if (nft_trans_elem_set(trans) == set)",
          "191:    break;",
          "192:   }",
          "193:  }",
          "194: }",
          "197: {",
          "198:  struct nftables_pernet *nft_net;",
          "199:  struct net *net = ctx->net;",
          "",
          "[Removed Lines]",
          "186:     nft_trans_set_bound(trans) = true;",
          "190:     nft_trans_elem_set_bound(trans) = true;",
          "196: static void nft_chain_trans_bind(const struct nft_ctx *ctx, struct nft_chain *chain)",
          "",
          "[Added Lines]",
          "187:     nft_trans_set_bound(trans) = bind;",
          "191:     nft_trans_elem_set_bound(trans) = bind;",
          "197: static void nft_set_trans_bind(const struct nft_ctx *ctx, struct nft_set *set)",
          "198: {",
          "199:  return __nft_set_trans_bind(ctx, set, true);",
          "200: }",
          "202: static void nft_set_trans_unbind(const struct nft_ctx *ctx, struct nft_set *set)",
          "203: {",
          "204:  return __nft_set_trans_bind(ctx, set, false);",
          "205: }",
          "207: static void __nft_chain_trans_bind(const struct nft_ctx *ctx,",
          "208:        struct nft_chain *chain, bool bind)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:   switch (trans->msg_type) {",
          "208:   case NFT_MSG_NEWCHAIN:",
          "209:    if (nft_trans_chain(trans) == chain)",
          "211:    break;",
          "212:   case NFT_MSG_NEWRULE:",
          "213:    if (trans->ctx.chain == chain)",
          "215:    break;",
          "216:   }",
          "217:  }",
          "218: }",
          "220: int nf_tables_bind_chain(const struct nft_ctx *ctx, struct nft_chain *chain)",
          "221: {",
          "222:  if (!nft_chain_binding(chain))",
          "",
          "[Removed Lines]",
          "210:     nft_trans_chain_bound(trans) = true;",
          "214:     nft_trans_rule_bound(trans) = true;",
          "",
          "[Added Lines]",
          "222:     nft_trans_chain_bound(trans) = bind;",
          "226:     nft_trans_rule_bound(trans) = bind;",
          "232: static void nft_chain_trans_bind(const struct nft_ctx *ctx,",
          "233:      struct nft_chain *chain)",
          "234: {",
          "235:  __nft_chain_trans_bind(ctx, chain, true);",
          "236: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:  return 0;",
          "236: }",
          "238: static int nft_netdev_register_hooks(struct net *net,",
          "239:          struct list_head *hook_list)",
          "240: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: void nf_tables_unbind_chain(const struct nft_ctx *ctx, struct nft_chain *chain)",
          "257: {",
          "258:  __nft_chain_trans_bind(ctx, chain, false);",
          "259: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3884:  if (flow)",
          "3885:   nft_flow_rule_destroy(flow);",
          "3886: err_release_rule:",
          "3888:  nf_tables_rule_destroy(&ctx, rule);",
          "3889: err_release_expr:",
          "3890:  for (i = 0; i < n; i++) {",
          "",
          "[Removed Lines]",
          "3887:  nft_rule_expr_deactivate(&ctx, rule, NFT_TRANS_PREPARE);",
          "",
          "[Added Lines]",
          "3910:  nft_rule_expr_deactivate(&ctx, rule, NFT_TRANS_PREPARE_ERROR);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5183:          enum nft_trans_phase phase)",
          "5184: {",
          "5185:  switch (phase) {",
          "5186:  case NFT_TRANS_PREPARE:",
          "5187:   if (nft_set_is_anonymous(set))",
          "5188:    nft_deactivate_next(ctx->net, set);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5209:  case NFT_TRANS_PREPARE_ERROR:",
          "5210:   nft_set_trans_unbind(ctx, set);",
          "5211:   if (nft_set_is_anonymous(set))",
          "5212:    nft_deactivate_next(ctx->net, set);",
          "5214:   set->use--;",
          "5215:   break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7701:         enum nft_trans_phase phase)",
          "7702: {",
          "7703:  switch (phase) {",
          "7704:  case NFT_TRANS_PREPARE:",
          "7705:  case NFT_TRANS_ABORT:",
          "7706:  case NFT_TRANS_RELEASE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7734:  case NFT_TRANS_PREPARE_ERROR:",
          "",
          "---------------"
        ],
        "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c": [
          "File: net/netfilter/nft_immediate.c -> net/netfilter/nft_immediate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     nft_rule_expr_deactivate(&chain_ctx, rule, phase);",
          "152:    switch (phase) {",
          "153:    case NFT_TRANS_PREPARE:",
          "154:     nft_deactivate_next(ctx->net, chain);",
          "155:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:    case NFT_TRANS_PREPARE_ERROR:",
          "154:     nf_tables_unbind_chain(ctx, chain);",
          "155:     fallthrough;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1689f25924ada8fe14a4a82c38925d04994c7142",
      "candidate_info": {
        "commit_hash": "1689f25924ada8fe14a4a82c38925d04994c7142",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1689f25924ada8fe14a4a82c38925d04994c7142",
        "files": [
          "include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_flow_offload.c",
          "net/netfilter/nft_immediate.c",
          "net/netfilter/nft_objref.c"
        ],
        "message": "netfilter: nf_tables: report use refcount overflow\n\nOverflow use refcount checks are not complete.\n\nAdd helper function to deal with object reference counter tracking.\nReport -EMFILE in case UINT_MAX is reached.\n\nnft_use_dec() splats in case that reference counter underflows,\nwhich should not ever happen.\n\nAdd nft_use_inc_restore() and nft_use_dec_restore() which are used\nto restore reference counter from error and abort paths.\n\nUse u32 in nft_flowtable and nft_object since helper functions cannot\nwork on bitfields.\n\nRemove the few early incomplete checks now that the helper functions\nare in place and used to check for refcount overflow.\n\nFixes: 96518518cc41 (\"netfilter: add nftables\")\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
          "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
          "net/netfilter/nft_flow_offload.c||net/netfilter/nft_flow_offload.c",
          "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c",
          "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
            "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
          ],
          "candidate": [
            "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h",
            "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c",
            "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_tables.h||include/net/netfilter/nf_tables.h": [
          "File: include/net/netfilter/nf_tables.h -> include/net/netfilter/nf_tables.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212: unsigned int nft_do_chain(struct nft_pktinfo *pkt, void *priv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214: static inline bool nft_use_inc(u32 *use)",
          "1215: {",
          "1216:  if (*use == UINT_MAX)",
          "1217:   return false;",
          "1219:  (*use)++;",
          "1221:  return true;",
          "1222: }",
          "1224: static inline void nft_use_dec(u32 *use)",
          "1225: {",
          "1226:  WARN_ON_ONCE((*use)-- == 0);",
          "1227: }",
          "1230: static inline void nft_use_inc_restore(u32 *use)",
          "1231: {",
          "1232:  WARN_ON_ONCE(!nft_use_inc(use));",
          "1233: }",
          "1235: #define nft_use_dec_restore nft_use_dec",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:  struct list_head  list;",
          "1297:  struct rhlist_head  rhlhead;",
          "1298:  struct nft_object_hash_key key;",
          "1301:  u64    handle;",
          "1302:  u16    udlen;",
          "1303:  u8    *udata;",
          "",
          "[Removed Lines]",
          "1299:  u32    genmask:2,",
          "1300:      use:30;",
          "",
          "[Added Lines]",
          "1322:  u32    genmask:2;",
          "1323:  u32    use;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1399:  char    *name;",
          "1400:  int    hooknum;",
          "1401:  int    ops_len;",
          "1404:  u64    handle;",
          "1406:  struct list_head  hook_list ____cacheline_aligned;",
          "",
          "[Removed Lines]",
          "1402:  u32    genmask:2,",
          "1403:      use:30;",
          "",
          "[Added Lines]",
          "1425:  u32    genmask:2;",
          "1426:  u32    use;",
          "",
          "---------------"
        ],
        "net/netfilter/nf_tables_api.c||net/netfilter/nf_tables_api.c": [
          "File: net/netfilter/nf_tables_api.c -> net/netfilter/nf_tables_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:  if (chain->bound)",
          "254:   return -EBUSY;",
          "256:  chain->bound = true;",
          "258:  nft_chain_trans_bind(ctx, chain);",
          "260:  return 0;",
          "",
          "[Removed Lines]",
          "257:  chain->use++;",
          "",
          "[Added Lines]",
          "256:  if (!nft_use_inc(&chain->use))",
          "257:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:  if (IS_ERR(trans))",
          "438:   return PTR_ERR(trans);",
          "441:  nft_deactivate_next(ctx->net, ctx->chain);",
          "443:  return 0;",
          "",
          "[Removed Lines]",
          "440:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "442:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "477:  if (nft_is_active_next(ctx->net, rule)) {",
          "478:   nft_deactivate_next(ctx->net, rule);",
          "480:   return 0;",
          "481:  }",
          "482:  return -ENOENT;",
          "",
          "[Removed Lines]",
          "479:   ctx->chain->use--;",
          "",
          "[Added Lines]",
          "481:   nft_use_dec(&ctx->chain->use);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "644:   nft_map_deactivate(ctx, set);",
          "646:  nft_deactivate_next(ctx->net, set);",
          "649:  return err;",
          "650: }",
          "",
          "[Removed Lines]",
          "647:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "649:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "676:   return err;",
          "678:  nft_deactivate_next(ctx->net, obj);",
          "681:  return err;",
          "682: }",
          "",
          "[Removed Lines]",
          "679:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "681:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "711:   return err;",
          "713:  nft_deactivate_next(ctx->net, flowtable);",
          "716:  return err;",
          "717: }",
          "",
          "[Removed Lines]",
          "714:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "716:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2396:  struct nft_chain *chain;",
          "2397:  int err;",
          "2402:  if (nla[NFTA_CHAIN_HOOK]) {",
          "2403:   struct nft_stats __percpu *stats = NULL;",
          "2404:   struct nft_chain_hook hook = {};",
          "",
          "[Removed Lines]",
          "2399:  if (table->use == UINT_MAX)",
          "2400:   return -EOVERFLOW;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2494:  if (err < 0)",
          "2495:   goto err_destroy_chain;",
          "2497:  trans = nft_trans_chain_add(ctx, NFT_MSG_NEWCHAIN);",
          "2498:  if (IS_ERR(trans)) {",
          "2499:   err = PTR_ERR(trans);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2496:  if (!nft_use_inc(&table->use)) {",
          "2497:   err = -EMFILE;",
          "2498:   goto err_use;",
          "2499:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2510:   goto err_unregister_hook;",
          "2511:  }",
          "2515:  return 0;",
          "2516: err_unregister_hook:",
          "2517:  nf_tables_unregister_hook(net, table, chain);",
          "2518: err_destroy_chain:",
          "2519:  nf_tables_chain_destroy(ctx);",
          "",
          "[Removed Lines]",
          "2513:  table->use++;",
          "",
          "[Added Lines]",
          "2520:  nft_use_dec_restore(&table->use);",
          "2521: err_use:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3840:    return -EINVAL;",
          "3841:   handle = nf_tables_alloc_handle(table);",
          "3846:   if (nla[NFTA_RULE_POSITION]) {",
          "3847:    pos_handle = be64_to_cpu(nla_get_be64(nla[NFTA_RULE_POSITION]));",
          "3848:    old_rule = __nft_rule_lookup(chain, pos_handle);",
          "",
          "[Removed Lines]",
          "3843:   if (chain->use == UINT_MAX)",
          "3844:    return -EOVERFLOW;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3936:   }",
          "3937:  }",
          "3939:  if (info->nlh->nlmsg_flags & NLM_F_REPLACE) {",
          "3940:   err = nft_delrule(&ctx, old_rule);",
          "3941:   if (err < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3941:  if (!nft_use_inc(&chain->use)) {",
          "3942:   err = -EMFILE;",
          "3943:   goto err_release_rule;",
          "3944:  }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3967:   }",
          "3968:  }",
          "3969:  kvfree(expr_info);",
          "3972:  if (flow)",
          "3973:   nft_trans_flow_rule(trans) = flow;",
          "",
          "[Removed Lines]",
          "3970:  chain->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3978:  return 0;",
          "3980: err_destroy_flow_rule:",
          "3981:  if (flow)",
          "3982:   nft_flow_rule_destroy(flow);",
          "3983: err_release_rule:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3987:  nft_use_dec_restore(&chain->use);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5014:  alloc_size = sizeof(*set) + size + udlen;",
          "5015:  if (alloc_size < size || alloc_size > INT_MAX)",
          "5016:   return -ENOMEM;",
          "5017:  set = kvzalloc(alloc_size, GFP_KERNEL_ACCOUNT);",
          "5021:  name = nla_strdup(nla[NFTA_SET_NAME], GFP_KERNEL_ACCOUNT);",
          "5022:  if (!name) {",
          "",
          "[Removed Lines]",
          "5018:  if (!set)",
          "5019:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "5025:  if (!nft_use_inc(&table->use))",
          "5026:   return -EMFILE;",
          "5029:  if (!set) {",
          "5030:   err = -ENOMEM;",
          "5031:   goto err_alloc;",
          "5032:  }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5074:   goto err_set_expr_alloc;",
          "5076:  list_add_tail_rcu(&set->list, &table->sets);",
          "5078:  return 0;",
          "5080: err_set_expr_alloc:",
          "",
          "[Removed Lines]",
          "5077:  table->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5086:  kfree(set->name);",
          "5087: err_set_name:",
          "5088:  kvfree(set);",
          "5089:  return err;",
          "5090: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5102: err_alloc:",
          "5103:  nft_use_dec_restore(&table->use);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5224:  struct nft_set_binding *i;",
          "5225:  struct nft_set_iter iter;",
          "5230:  if (!list_empty(&set->bindings) && nft_set_is_anonymous(set))",
          "5231:   return -EBUSY;",
          "",
          "[Removed Lines]",
          "5227:  if (set->use == UINT_MAX)",
          "5228:   return -EOVERFLOW;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5254:    return iter.err;",
          "5255:  }",
          "5256: bind:",
          "5257:  binding->chain = ctx->chain;",
          "5258:  list_add_tail_rcu(&binding->list, &set->bindings);",
          "5259:  nft_set_trans_bind(ctx, set);",
          "5262:  return 0;",
          "5263: }",
          "",
          "[Removed Lines]",
          "5260:  set->use++;",
          "",
          "[Added Lines]",
          "5270:  if (!nft_use_inc(&set->use))",
          "5271:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5331:   nft_clear(ctx->net, set);",
          "5332:  }",
          "5335: }",
          "5336: EXPORT_SYMBOL_GPL(nf_tables_activate_set);",
          "",
          "[Removed Lines]",
          "5334:  set->use++;",
          "",
          "[Added Lines]",
          "5349:  nft_use_inc_restore(&set->use);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5347:   else",
          "5348:    list_del_rcu(&binding->list);",
          "5351:   break;",
          "5352:  case NFT_TRANS_PREPARE:",
          "5353:   if (nft_set_is_anonymous(set)) {",
          "",
          "[Removed Lines]",
          "5350:   set->use--;",
          "",
          "[Added Lines]",
          "5365:   nft_use_dec(&set->use);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5357:    nft_deactivate_next(ctx->net, set);",
          "5358:   }",
          "5360:   return;",
          "5361:  case NFT_TRANS_ABORT:",
          "5362:  case NFT_TRANS_RELEASE:",
          "",
          "[Removed Lines]",
          "5359:   set->use--;",
          "",
          "[Added Lines]",
          "5374:   nft_use_dec(&set->use);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5364:       set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "5365:    nft_map_deactivate(ctx, set);",
          "5368:   fallthrough;",
          "5369:  default:",
          "5370:   nf_tables_unbind_set(ctx, set, binding,",
          "",
          "[Removed Lines]",
          "5367:   set->use--;",
          "",
          "[Added Lines]",
          "5382:   nft_use_dec(&set->use);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6155:   nft_set_elem_expr_destroy(&ctx, nft_set_ext_expr(ext));",
          "6157:  if (nft_set_ext_exists(ext, NFT_SET_EXT_OBJREF))",
          "6159:  kfree(elem);",
          "6160: }",
          "6161: EXPORT_SYMBOL_GPL(nft_set_elem_destroy);",
          "",
          "[Removed Lines]",
          "6158:   (*nft_set_ext_obj(ext))->use--;",
          "",
          "[Added Lines]",
          "6173:   nft_use_dec(&(*nft_set_ext_obj(ext))->use);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6657:          set->objtype, genmask);",
          "6658:   if (IS_ERR(obj)) {",
          "6659:    err = PTR_ERR(obj);",
          "6660:    goto err_parse_key_end;",
          "6661:   }",
          "6662:   err = nft_set_ext_add(&tmpl, NFT_SET_EXT_OBJREF);",
          "6663:   if (err < 0)",
          "6664:    goto err_parse_key_end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6675:    obj = NULL;",
          "6679:   if (!nft_use_inc(&obj->use)) {",
          "6680:    err = -EMFILE;",
          "6681:    obj = NULL;",
          "6682:    goto err_parse_key_end;",
          "6683:   }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6727:  if (flags)",
          "6734:  if (ulen > 0) {",
          "6735:   if (nft_set_ext_check(&tmpl, NFT_SET_EXT_USERDATA, ulen) < 0) {",
          "6736:    err = -EINVAL;",
          "",
          "[Removed Lines]",
          "6730:  if (obj) {",
          "6732:   obj->use++;",
          "6733:  }",
          "",
          "[Added Lines]",
          "6753:  if (obj)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6798:  kfree(trans);",
          "6799: err_elem_free:",
          "6800:  nf_tables_set_elem_destroy(ctx, set, elem.priv);",
          "6803: err_parse_data:",
          "6804:  if (nla[NFTA_SET_ELEM_DATA] != NULL)",
          "6805:   nft_data_release(&elem.data.val, desc.type);",
          "6806: err_parse_key_end:",
          "6807:  nft_data_release(&elem.key_end.val, NFT_DATA_VALUE);",
          "6808: err_parse_key:",
          "6809:  nft_data_release(&elem.key.val, NFT_DATA_VALUE);",
          "",
          "[Removed Lines]",
          "6801:  if (obj)",
          "6802:   obj->use--;",
          "",
          "[Added Lines]",
          "6827:  if (obj)",
          "6828:   nft_use_dec_restore(&obj->use);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6883:   case NFT_JUMP:",
          "6884:   case NFT_GOTO:",
          "6885:    chain = data->verdict.chain;",
          "6887:    break;",
          "6888:   }",
          "6889:  }",
          "",
          "[Removed Lines]",
          "6886:    chain->use++;",
          "",
          "[Added Lines]",
          "6909:    nft_use_inc_restore(&chain->use);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6898:  if (nft_set_ext_exists(ext, NFT_SET_EXT_DATA))",
          "6899:   nft_data_hold(nft_set_ext_data(ext), set->dtype);",
          "6900:  if (nft_set_ext_exists(ext, NFT_SET_EXT_OBJREF))",
          "6902: }",
          "6904: static void nft_setelem_data_deactivate(const struct net *net,",
          "",
          "[Removed Lines]",
          "6901:   (*nft_set_ext_obj(ext))->use++;",
          "",
          "[Added Lines]",
          "6924:   nft_use_inc_restore(&(*nft_set_ext_obj(ext))->use);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6910:  if (nft_set_ext_exists(ext, NFT_SET_EXT_DATA))",
          "6911:   nft_data_release(nft_set_ext_data(ext), set->dtype);",
          "6912:  if (nft_set_ext_exists(ext, NFT_SET_EXT_OBJREF))",
          "6914: }",
          "6916: static int nft_del_setelem(struct nft_ctx *ctx, struct nft_set *set,",
          "",
          "[Removed Lines]",
          "6913:   (*nft_set_ext_obj(ext))->use--;",
          "",
          "[Added Lines]",
          "6936:   nft_use_dec(&(*nft_set_ext_obj(ext))->use);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7454:  nft_ctx_init(&ctx, net, skb, info->nlh, family, table, NULL, nla);",
          "7456:  type = nft_obj_type_get(net, objtype);",
          "7460:  obj = nft_obj_init(&ctx, type, nla[NFTA_OBJ_DATA]);",
          "7461:  if (IS_ERR(obj)) {",
          "",
          "[Removed Lines]",
          "7457:  if (IS_ERR(type))",
          "7458:   return PTR_ERR(type);",
          "",
          "[Added Lines]",
          "7479:  if (!nft_use_inc(&table->use))",
          "7480:   return -EMFILE;",
          "7483:  if (IS_ERR(type)) {",
          "7484:   err = PTR_ERR(type);",
          "7485:   goto err_type;",
          "7486:  }",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7489:   goto err_obj_ht;",
          "7491:  list_add_tail_rcu(&obj->list, &table->objects);",
          "7493:  return 0;",
          "7494: err_obj_ht:",
          "",
          "[Removed Lines]",
          "7492:  table->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7505:  kfree(obj);",
          "7506: err_init:",
          "7507:  module_put(type->owner);",
          "7508:  return err;",
          "7509: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7536: err_type:",
          "7537:  nft_use_dec_restore(&table->use);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7906:  case NFT_TRANS_PREPARE:",
          "7907:  case NFT_TRANS_ABORT:",
          "7908:  case NFT_TRANS_RELEASE:",
          "7910:   fallthrough;",
          "7911:  default:",
          "7912:   return;",
          "",
          "[Removed Lines]",
          "7909:   flowtable->use--;",
          "",
          "[Added Lines]",
          "7940:   nft_use_dec(&flowtable->use);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "8261:  nft_ctx_init(&ctx, net, skb, info->nlh, family, table, NULL, nla);",
          "8263:  flowtable = kzalloc(sizeof(*flowtable), GFP_KERNEL_ACCOUNT);",
          "8267:  flowtable->table = table;",
          "8268:  flowtable->handle = nf_tables_alloc_handle(table);",
          "",
          "[Removed Lines]",
          "8264:  if (!flowtable)",
          "8265:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "8294:  if (!nft_use_inc(&table->use))",
          "8295:   return -EMFILE;",
          "8298:  if (!flowtable) {",
          "8299:   err = -ENOMEM;",
          "8300:   goto flowtable_alloc;",
          "8301:  }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "8317:   goto err5;",
          "8319:  list_add_tail_rcu(&flowtable->list, &table->flowtables);",
          "8322:  return 0;",
          "8323: err5:",
          "",
          "[Removed Lines]",
          "8320:  table->use++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "8334:  kfree(flowtable->name);",
          "8335: err1:",
          "8336:  kfree(flowtable);",
          "8337:  return err;",
          "8338: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8372: flowtable_alloc:",
          "8373:  nft_use_dec_restore(&table->use);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "9714:     if (nft_set_is_anonymous(nft_trans_set(trans)) &&",
          "9715:         !list_empty(&nft_trans_set(trans)->bindings))",
          "9717:    }",
          "9718:    nf_tables_set_notify(&trans->ctx, nft_trans_set(trans),",
          "9719:           NFT_MSG_NEWSET, GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "9716:      trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "9754:      nft_use_dec(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "9943:      nft_trans_destroy(trans);",
          "9944:      break;",
          "9945:     }",
          "9947:     nft_chain_del(trans->ctx.chain);",
          "9948:     nf_tables_unregister_hook(trans->ctx.net,",
          "9949:          trans->ctx.table,",
          "",
          "[Removed Lines]",
          "9946:     trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "9984:     nft_use_dec_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "9956:     list_splice(&nft_trans_chain_hooks(trans),",
          "9957:          &nft_trans_basechain(trans)->hook_list);",
          "9958:    } else {",
          "9960:     nft_clear(trans->ctx.net, trans->ctx.chain);",
          "9961:    }",
          "9962:    nft_trans_destroy(trans);",
          "",
          "[Removed Lines]",
          "9959:     trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "9997:     nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "9966:     nft_trans_destroy(trans);",
          "9967:     break;",
          "9968:    }",
          "9970:    list_del_rcu(&nft_trans_rule(trans)->list);",
          "9971:    nft_rule_expr_deactivate(&trans->ctx,",
          "9972:        nft_trans_rule(trans),",
          "",
          "[Removed Lines]",
          "9969:    trans->ctx.chain->use--;",
          "",
          "[Added Lines]",
          "10007:    nft_use_dec_restore(&trans->ctx.chain->use);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "9976:    break;",
          "9977:   case NFT_MSG_DELRULE:",
          "9978:   case NFT_MSG_DESTROYRULE:",
          "9980:    nft_clear(trans->ctx.net, nft_trans_rule(trans));",
          "9981:    nft_rule_expr_activate(&trans->ctx, nft_trans_rule(trans));",
          "9982:    if (trans->ctx.chain->flags & NFT_CHAIN_HW_OFFLOAD)",
          "",
          "[Removed Lines]",
          "9979:    trans->ctx.chain->use++;",
          "",
          "[Added Lines]",
          "10017:    nft_use_inc_restore(&trans->ctx.chain->use);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "9989:     nft_trans_destroy(trans);",
          "9990:     break;",
          "9991:    }",
          "9993:    if (nft_trans_set_bound(trans)) {",
          "9994:     nft_trans_destroy(trans);",
          "9995:     break;",
          "",
          "[Removed Lines]",
          "9992:    trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "10030:    nft_use_dec_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "9998:    break;",
          "9999:   case NFT_MSG_DELSET:",
          "10000:   case NFT_MSG_DESTROYSET:",
          "10002:    nft_clear(trans->ctx.net, nft_trans_set(trans));",
          "10003:    if (nft_trans_set(trans)->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "10004:     nft_map_activate(&trans->ctx, nft_trans_set(trans));",
          "",
          "[Removed Lines]",
          "10001:    trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "10039:    nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "10042:     nft_obj_destroy(&trans->ctx, nft_trans_obj_newobj(trans));",
          "10043:     nft_trans_destroy(trans);",
          "10044:    } else {",
          "10046:     nft_obj_del(nft_trans_obj(trans));",
          "10047:    }",
          "10048:    break;",
          "10049:   case NFT_MSG_DELOBJ:",
          "10050:   case NFT_MSG_DESTROYOBJ:",
          "10052:    nft_clear(trans->ctx.net, nft_trans_obj(trans));",
          "10053:    nft_trans_destroy(trans);",
          "10054:    break;",
          "",
          "[Removed Lines]",
          "10045:     trans->ctx.table->use--;",
          "10051:    trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "10083:     nft_use_dec_restore(&trans->ctx.table->use);",
          "10089:    nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "10057:     nft_unregister_flowtable_net_hooks(net,",
          "10058:       &nft_trans_flowtable_hooks(trans));",
          "10059:    } else {",
          "10061:     list_del_rcu(&nft_trans_flowtable(trans)->list);",
          "10062:     nft_unregister_flowtable_net_hooks(net,",
          "10063:       &nft_trans_flowtable(trans)->hook_list);",
          "",
          "[Removed Lines]",
          "10060:     trans->ctx.table->use--;",
          "",
          "[Added Lines]",
          "10098:     nft_use_dec_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "10069:     list_splice(&nft_trans_flowtable_hooks(trans),",
          "10070:          &nft_trans_flowtable(trans)->hook_list);",
          "10071:    } else {",
          "10073:     nft_clear(trans->ctx.net, nft_trans_flowtable(trans));",
          "10074:    }",
          "10075:    nft_trans_destroy(trans);",
          "",
          "[Removed Lines]",
          "10072:     trans->ctx.table->use++;",
          "",
          "[Added Lines]",
          "10110:     nft_use_inc_restore(&trans->ctx.table->use);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "10518:   if (desc->flags & NFT_DATA_DESC_SETELEM &&",
          "10519:       chain->flags & NFT_CHAIN_BINDING)",
          "10520:    return -EINVAL;",
          "10523:   data->verdict.chain = chain;",
          "10524:   break;",
          "10525:  }",
          "",
          "[Removed Lines]",
          "10522:   chain->use++;",
          "",
          "[Added Lines]",
          "10559:   if (!nft_use_inc(&chain->use))",
          "10560:    return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "10537:  case NFT_JUMP:",
          "10538:  case NFT_GOTO:",
          "10539:   chain = data->verdict.chain;",
          "10541:   break;",
          "10542:  }",
          "10543: }",
          "",
          "[Removed Lines]",
          "10540:   chain->use--;",
          "",
          "[Added Lines]",
          "10579:   nft_use_dec(&chain->use);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "10706:  nf_tables_unregister_hook(ctx->net, ctx->chain->table, ctx->chain);",
          "10707:  list_for_each_entry_safe(rule, nr, &ctx->chain->rules, list) {",
          "10708:   list_del(&rule->list);",
          "10710:   nf_tables_rule_release(ctx, rule);",
          "10711:  }",
          "10712:  nft_chain_del(ctx->chain);",
          "10714:  nf_tables_chain_destroy(ctx);",
          "10716:  return 0;",
          "",
          "[Removed Lines]",
          "10709:   ctx->chain->use--;",
          "10713:  ctx->table->use--;",
          "",
          "[Added Lines]",
          "10748:   nft_use_dec(&ctx->chain->use);",
          "10752:  nft_use_dec(&ctx->table->use);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "10760:   ctx.chain = chain;",
          "10761:   list_for_each_entry_safe(rule, nr, &chain->rules, list) {",
          "10762:    list_del(&rule->list);",
          "10764:    nf_tables_rule_release(&ctx, rule);",
          "10765:   }",
          "10766:  }",
          "10767:  list_for_each_entry_safe(flowtable, nf, &table->flowtables, list) {",
          "10768:   list_del(&flowtable->list);",
          "10770:   nf_tables_flowtable_destroy(flowtable);",
          "10771:  }",
          "10772:  list_for_each_entry_safe(set, ns, &table->sets, list) {",
          "10773:   list_del(&set->list);",
          "10775:   if (set->flags & (NFT_SET_MAP | NFT_SET_OBJECT))",
          "10776:    nft_map_deactivate(&ctx, set);",
          "",
          "[Removed Lines]",
          "10763:    chain->use--;",
          "10769:   table->use--;",
          "10774:   table->use--;",
          "",
          "[Added Lines]",
          "10802:    nft_use_dec(&chain->use);",
          "10808:   nft_use_dec(&table->use);",
          "10813:   nft_use_dec(&table->use);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "10779:  }",
          "10780:  list_for_each_entry_safe(obj, ne, &table->objects, list) {",
          "10781:   nft_obj_del(obj);",
          "10783:   nft_obj_destroy(&ctx, obj);",
          "10784:  }",
          "10785:  list_for_each_entry_safe(chain, nc, &table->chains, list) {",
          "10786:   ctx.chain = chain;",
          "10787:   nft_chain_del(chain);",
          "10789:   nf_tables_chain_destroy(&ctx);",
          "10790:  }",
          "10791:  nf_tables_table_destroy(&ctx);",
          "",
          "[Removed Lines]",
          "10782:   table->use--;",
          "10788:   table->use--;",
          "",
          "[Added Lines]",
          "10821:   nft_use_dec(&table->use);",
          "10827:   nft_use_dec(&table->use);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_flow_offload.c||net/netfilter/nft_flow_offload.c": [
          "File: net/netfilter/nft_flow_offload.c -> net/netfilter/nft_flow_offload.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:  if (IS_ERR(flowtable))",
          "409:   return PTR_ERR(flowtable);",
          "411:  priv->flowtable = flowtable;",
          "414:  return nf_ct_netns_get(ctx->net, ctx->family);",
          "415: }",
          "",
          "[Removed Lines]",
          "412:  flowtable->use++;",
          "",
          "[Added Lines]",
          "411:  if (!nft_use_inc(&flowtable->use))",
          "412:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428: {",
          "429:  struct nft_flow_offload *priv = nft_expr_priv(expr);",
          "432: }",
          "434: static void nft_flow_offload_destroy(const struct nft_ctx *ctx,",
          "",
          "[Removed Lines]",
          "431:  priv->flowtable->use++;",
          "",
          "[Added Lines]",
          "433:  nft_use_inc_restore(&priv->flowtable->use);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_immediate.c||net/netfilter/nft_immediate.c": [
          "File: net/netfilter/nft_immediate.c -> net/netfilter/nft_immediate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:    default:",
          "160:     nft_chain_del(chain);",
          "161:     chain->bound = false;",
          "163:     break;",
          "164:    }",
          "165:    break;",
          "",
          "[Removed Lines]",
          "162:     chain->table->use--;",
          "",
          "[Added Lines]",
          "162:     nft_use_dec(&chain->table->use);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   if (chain->bound) {",
          "202:    break;",
          "203:   }",
          "",
          "[Removed Lines]",
          "201:    chain->use--;",
          "",
          "[Added Lines]",
          "201:    nft_use_dec(&chain->use);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   chain_ctx = *ctx;",
          "207:   chain_ctx.chain = chain;",
          "210:   list_for_each_entry_safe(rule, n, &chain->rules, list) {",
          "212:    list_del(&rule->list);",
          "213:    nf_tables_rule_destroy(&chain_ctx, rule);",
          "214:   }",
          "",
          "[Removed Lines]",
          "209:   chain->use--;",
          "211:    chain->use--;",
          "",
          "[Added Lines]",
          "209:   nft_use_dec(&chain->use);",
          "211:    nft_use_dec(&chain->use);",
          "",
          "---------------"
        ],
        "net/netfilter/nft_objref.c||net/netfilter/nft_objref.c": [
          "File: net/netfilter/nft_objref.c -> net/netfilter/nft_objref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  if (IS_ERR(obj))",
          "42:   return -ENOENT;",
          "44:  nft_objref_priv(expr) = obj;",
          "47:  return 0;",
          "48: }",
          "",
          "[Removed Lines]",
          "45:  obj->use++;",
          "",
          "[Added Lines]",
          "44:  if (!nft_use_inc(&obj->use))",
          "45:   return -EMFILE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:  if (phase == NFT_TRANS_COMMIT)",
          "73:   return;",
          "76: }",
          "78: static void nft_objref_activate(const struct nft_ctx *ctx,",
          "",
          "[Removed Lines]",
          "75:  obj->use--;",
          "",
          "[Added Lines]",
          "77:  nft_use_dec(&obj->use);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80: {",
          "81:  struct nft_object *obj = nft_objref_priv(expr);",
          "84: }",
          "86: static const struct nft_expr_ops nft_objref_ops = {",
          "",
          "[Removed Lines]",
          "83:  obj->use++;",
          "",
          "[Added Lines]",
          "85:  nft_use_inc_restore(&obj->use);",
          "",
          "---------------"
        ]
      }
    }
  ]
}