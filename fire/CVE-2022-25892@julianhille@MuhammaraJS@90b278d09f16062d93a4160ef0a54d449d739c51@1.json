{
  "cve_id": "CVE-2022-25892",
  "cve_desc": "The package muhammara before 2.6.1, from 3.0.0 and before 3.1.1; all versions of package hummus are vulnerable to Denial of Service (DoS) when supplied with a maliciously crafted PDF file to be parsed.",
  "repo": "julianhille/MuhammaraJS",
  "patch_hash": "90b278d09f16062d93a4160ef0a54d449d739c51",
  "patch_info": {
    "commit_hash": "90b278d09f16062d93a4160ef0a54d449d739c51",
    "repo": "julianhille/MuhammaraJS",
    "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/90b278d09f16062d93a4160ef0a54d449d739c51",
    "files": [
      "CHANGELOG.md",
      "src/deps/PDFWriter/PDFParser.cpp",
      "tests/SigSeg.js",
      "tests/TestMaterials/BrokenPdfBadHeader.txt"
    ],
    "message": "Fix npe as backport for 2.x\n\nFixes #214",
    "before_after_code_files": [
      "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp",
      "tests/SigSeg.js||tests/SigSeg.js"
    ]
  },
  "patch_diff": {
    "src/deps/PDFWriter/PDFParser.cpp||src/deps/PDFWriter/PDFParser.cpp": [
      "File: src/deps/PDFWriter/PDFParser.cpp -> src/deps/PDFWriter/PDFParser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:   mObjectParser.ResetReadState();",
      "353:   RefCountPtr<PDFObject> anObject(mObjectParser.ParseNewObject());",
      "355:   if(anObject->GetType() == PDFObject::ePDFObjectInteger)",
      "356:   {",
      "357:    mLastXrefPosition = (LongFilePositionType)((PDFInteger*)anObject.GetPtr())->GetValue();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:   if (!anObject) {",
      "356:    status = PDFHummus::eFailure;",
      "357:    TRACE_LOG(\"PDFParser::ParseXrefPosition: Unable to find any object\");",
      "358:    break;",
      "359:   }",
      "",
      "---------------"
    ],
    "tests/SigSeg.js||tests/SigSeg.js": [
      "File: tests/SigSeg.js -> tests/SigSeg.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: var muhammara = require(\"../muhammara\");",
      "2: const { expect } = require(\"chai\");",
      "4: describe(\"SigSegv test\", function () {",
      "5:   it(\"should read fields correctly\", function () {",
      "6:     expect(() =>",
      "7:       muhammara.createReader(",
      "8:         __dirname + \"/TestMaterials/BrokenPdfBadHeader.txt\"",
      "9:       )",
      "10:     ).to.throw();",
      "11:   });",
      "12: });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4169e0b0577ed3578b5949e90c091f0ba8f2b2c",
      "candidate_info": {
        "commit_hash": "a4169e0b0577ed3578b5949e90c091f0ba8f2b2c",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/a4169e0b0577ed3578b5949e90c091f0ba8f2b2c",
        "files": [
          "src/deps/PDFWriter/CFFFileInput.cpp"
        ],
        "message": "Fix segfault for getGlyphCharString returning NULL",
        "before_after_code_files": [
          "src/deps/PDFWriter/CFFFileInput.cpp||src/deps/PDFWriter/CFFFileInput.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/CFFFileInput.cpp||src/deps/PDFWriter/CFFFileInput.cpp": [
          "File: src/deps/PDFWriter/CFFFileInput.cpp -> src/deps/PDFWriter/CFFFileInput.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:  if(status != PDFHummus::eFailure)",
          "1019:  {",
          "1020:   mCurrentDependencies = &ioDependenciesInfo;",
          "1022:  }",
          "1023:  else",
          "1024:   return status;",
          "",
          "[Removed Lines]",
          "1021:   return interpreter.Intepret(*GetGlyphCharString(inFontIndex,inCharStringIndex),this);",
          "",
          "[Added Lines]",
          "1021:   CharString* charString = GetGlyphCharString(inFontIndex,inCharStringIndex);",
          "1022:         if(!charString)",
          "1023:         {",
          "1024:             TRACE_LOG(\"GetGlyphCharString cannot find char string\");",
          "1025:             return PDFHummus::eFailure;",
          "1026:         }",
          "1027:   return interpreter.Intepret(*charString, this);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70290d0202a8efe7fce1bb50d75bc1dcc5775222",
      "candidate_info": {
        "commit_hash": "70290d0202a8efe7fce1bb50d75bc1dcc5775222",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/70290d0202a8efe7fce1bb50d75bc1dcc5775222",
        "files": [
          "src/deps/PDFWriter/DecryptionHelper.cpp",
          "src/deps/PDFWriter/DocumentContext.cpp",
          "src/deps/PDFWriter/PDFPageInput.cpp"
        ],
        "message": "Fix a segfault through returning null in QueryObject",
        "before_after_code_files": [
          "src/deps/PDFWriter/DecryptionHelper.cpp||src/deps/PDFWriter/DecryptionHelper.cpp",
          "src/deps/PDFWriter/DocumentContext.cpp||src/deps/PDFWriter/DocumentContext.cpp",
          "src/deps/PDFWriter/PDFPageInput.cpp||src/deps/PDFWriter/PDFPageInput.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/DecryptionHelper.cpp||src/deps/PDFWriter/DecryptionHelper.cpp": [
          "File: src/deps/PDFWriter/DecryptionHelper.cpp -> src/deps/PDFWriter/DecryptionHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:    for (; i < filterObjectArray->GetLength(); ++i)",
          "410:    {",
          "411:     PDFObjectCastPtr<PDFName> filterObjectItem(filterObjectArray->QueryObject(i));",
          "413:      break;",
          "414:    }",
          "415:    if (i < filterObjectArray->GetLength()) {",
          "",
          "[Removed Lines]",
          "412:     if (filterObjectItem->GetValue() == \"Crypt\")",
          "",
          "[Added Lines]",
          "412:     if (!filterObjectItem || filterObjectItem->GetValue() == \"Crypt\")",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/DocumentContext.cpp||src/deps/PDFWriter/DocumentContext.cpp": [
          "File: src/deps/PDFWriter/DocumentContext.cpp -> src/deps/PDFWriter/DocumentContext.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2176:     if(idArray.GetPtr() && idArray->GetLength() == 2)",
          "2177:     {",
          "2178:         PDFObjectCastPtr<PDFHexString> firstID = idArray->QueryObject(0);",
          "2180:             mModifiedDocumentID = firstID->GetValue();",
          "2181:     }",
          "",
          "[Removed Lines]",
          "2179:         if(firstID.GetPtr())",
          "",
          "[Added Lines]",
          "2179:         if(firstID != NULL && firstID.GetPtr())",
          "",
          "---------------"
        ],
        "src/deps/PDFWriter/PDFPageInput.cpp||src/deps/PDFWriter/PDFPageInput.cpp": [
          "File: src/deps/PDFWriter/PDFPageInput.cpp -> src/deps/PDFWriter/PDFPageInput.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  RefCountPtr<PDFObject> lowerLeftY(inPDFArray->QueryObject(1));",
          "182:  RefCountPtr<PDFObject> upperRightX(inPDFArray->QueryObject(2));",
          "183:  RefCountPtr<PDFObject> upperRightY(inPDFArray->QueryObject(3));",
          "185:  outPDFRectangle.LowerLeftX = ParsedPrimitiveHelper(lowerLeftX.GetPtr()).GetAsDouble();",
          "186:  outPDFRectangle.LowerLeftY = ParsedPrimitiveHelper(lowerLeftY.GetPtr()).GetAsDouble();",
          "187:  outPDFRectangle.UpperRightX = ParsedPrimitiveHelper(upperRightX.GetPtr()).GetAsDouble();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:  if (!lowerLeftX || !lowerLeftY || !upperRightX || !upperRightY)",
          "185:  {",
          "188:   TRACE_LOG(\"Could not apply pdf rectangle as values are NULL\");",
          "189:   return;",
          "190:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06ae97d252a64556ba97a43ea83ec3f9a2fb3305",
      "candidate_info": {
        "commit_hash": "06ae97d252a64556ba97a43ea83ec3f9a2fb3305",
        "repo": "julianhille/MuhammaraJS",
        "commit_url": "https://github.com/julianhille/MuhammaraJS/commit/06ae97d252a64556ba97a43ea83ec3f9a2fb3305",
        "files": [
          "src/deps/PDFWriter/PDFUsedFont.cpp"
        ],
        "message": "Fix segfault for FreeType createWrittenFrontObject  returning NULL",
        "before_after_code_files": [
          "src/deps/PDFWriter/PDFUsedFont.cpp||src/deps/PDFWriter/PDFUsedFont.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/julianhille/MuhammaraJS/pull/238"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/deps/PDFWriter/PDFUsedFont.cpp||src/deps/PDFWriter/PDFUsedFont.cpp": [
          "File: src/deps/PDFWriter/PDFUsedFont.cpp -> src/deps/PDFWriter/PDFUsedFont.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:  if(!mWrittenFont)",
          "70:   mWrittenFont = mFaceWrapper.CreateWrittenFontObject(mObjectsContext,mEmbedFont);",
          "72:  mWrittenFont->AppendGlyphs(inText,outCharactersToUse,outTreatCharactersAsCID,outFontObjectToUse);",
          "74:  return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  if(!mWrittenFont)",
          "72:   return PDFHummus::eFailure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:  if(!mWrittenFont)",
          "110:   mWrittenFont = mFaceWrapper.CreateWrittenFontObject(mObjectsContext,mEmbedFont);",
          "112:  mWrittenFont->AppendGlyphs(inText,outCharactersToUse,outTreatCharactersAsCID,outFontObjectToUse);",
          "114:  return PDFHummus::eSuccess;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  if(!mWrittenFont)",
          "113:   return PDFHummus::eFailure;",
          "",
          "---------------"
        ]
      }
    }
  ]
}