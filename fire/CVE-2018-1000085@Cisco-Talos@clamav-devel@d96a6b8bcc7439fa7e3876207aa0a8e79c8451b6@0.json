{
  "cve_id": "CVE-2018-1000085",
  "cve_desc": "ClamAV version version 0.99.3 contains a Out of bounds heap memory read vulnerability in XAR parser, function xar_hash_check() that can result in Leaking of memory, may help in developing exploit chains.. This attack appear to be exploitable via The victim must scan a crafted XAR file. This vulnerability appears to have been fixed in after commit d96a6b8bcc7439fa7e3876207aa0a8e79c8451b6.",
  "repo": "Cisco-Talos/clamav-devel",
  "patch_hash": "d96a6b8bcc7439fa7e3876207aa0a8e79c8451b6",
  "patch_info": {
    "commit_hash": "d96a6b8bcc7439fa7e3876207aa0a8e79c8451b6",
    "repo": "Cisco-Talos/clamav-devel",
    "commit_url": "https://github.com/Cisco-Talos/clamav-devel/commit/d96a6b8bcc7439fa7e3876207aa0a8e79c8451b6",
    "files": [
      "libclamav/xar.c"
    ],
    "message": "bb11588 - fix out of bounds read.",
    "before_after_code_files": [
      "libclamav/xar.c||libclamav/xar.c"
    ]
  },
  "patch_diff": {
    "libclamav/xar.c||libclamav/xar.c": [
      "File: libclamav/xar.c -> libclamav/xar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:      value - pointer to long to contain the returned value",
      "72:    returns - CL_SUCCESS or CL_EFORMAT",
      "75: {",
      "76:     const xmlChar * numstr;",
      "77:     if (xmlTextReaderRead(reader) == 1 && xmlTextReaderNodeType(reader) == XML_READER_TYPE_TEXT) {",
      "78:         numstr = xmlTextReaderConstValue(reader);",
      "79:         if (numstr) {",
      "82:                 cli_dbgmsg(\"cli_scanxar: XML element value %li\\n\", *value);",
      "83:                 return CL_EFORMAT;",
      "84:             }",
      "85:             return CL_SUCCESS;",
      "86:         }",
      "87:     }",
      "",
      "[Removed Lines]",
      "74: static int xar_get_numeric_from_xml_element(xmlTextReaderPtr reader, long * value)",
      "81:             if (*value < 0) {",
      "",
      "[Added Lines]",
      "74: static int xar_get_numeric_from_xml_element(xmlTextReaderPtr reader, size_t * value)",
      "77:     ssize_t numval;",
      "82:             numval = atol((const char *)numstr);",
      "83:             if (numval < 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:     if (xmlTextReaderRead(reader) == 1 && xmlTextReaderNodeType(reader) == XML_READER_TYPE_TEXT) {",
      "124:         xmlval = xmlTextReaderConstValue(reader);",
      "125:         if (xmlval) {",
      "128:         } else {",
      "130:             cli_dbgmsg(\"cli_scanxar: xmlTextReaderConstValue() returns NULL for checksum value.\\n\");",
      "",
      "[Removed Lines]",
      "127:             cli_dbgmsg(\"cli_scanxar: checksum value is %s.\\n\", *cksum);",
      "",
      "[Added Lines]",
      "129:             cli_dbgmsg(\"cli_scanxar: checksum value is %s.\\n\", xmlval);",
      "130:             if (*hash == XAR_CKSUM_SHA1 && xmlStrlen(xmlval) == 2 * CLI_HASHLEN_SHA1 ||",
      "132:                 {",
      "134:                 }",
      "135:             else",
      "136:                 {",
      "137:                     cli_dbgmsg(\"cli_scanxar: checksum type is unknown or length is invalid.\\n\");",
      "140:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "149:      e_hash - pointer to int for returning extracted checksum algorithm.",
      "150:    returns - CL_FORMAT, CL_SUCCESS, CL_BREAK. CL_BREAK indicates no more <data>/<ea> element.",
      "153:                                    unsigned char ** a_cksum, int * a_hash, unsigned char ** e_cksum, int * e_hash)",
      "154: {",
      "155:     const xmlChar *name;",
      "",
      "[Removed Lines]",
      "152: static int xar_get_toc_data_values(xmlTextReaderPtr reader, long *length, long *offset, long *size, int *encoding,",
      "",
      "[Added Lines]",
      "165: static int xar_get_toc_data_values(xmlTextReaderPtr reader, size_t *length, size_t *offset, size_t *size, int *encoding,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "386:         return 1;",
      "387:     switch (hash) {",
      "388:     case XAR_CKSUM_SHA1:",
      "390:         break;",
      "391:     case XAR_CKSUM_MD5:",
      "393:         break;",
      "394:     case XAR_CKSUM_OTHER:",
      "395:     case XAR_CKSUM_NONE:",
      "",
      "[Removed Lines]",
      "389:         len = SHA1_HASH_SIZE;",
      "392:         len = CLI_HASH_MD5;",
      "",
      "[Added Lines]",
      "402:         len = CLI_HASHLEN_SHA1;",
      "405:         len = CLI_HASHLEN_MD5;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "417:     int fd = -1;",
      "418:     struct xar_header hdr;",
      "419:     fmap_t *map = *ctx->fmap;",
      "421:     int encoding;",
      "422:     z_stream strm;",
      "423:     char *toc, *tmpname;",
      "",
      "[Removed Lines]",
      "420:     long length, offset, size, at;",
      "",
      "[Added Lines]",
      "433:     size_t length, offset, size, at;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "490:         goto exit_toc;",
      "491:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "506:     if (hdr.toc_length_decompressed != strm.total_out) {",
      "507:         cli_dbgmsg(\"TOC decompress length %\" PRIu64 \" does not match amount decompressed %lu\\n\",",
      "508:                    hdr.toc_length_decompressed, strm.total_out);",
      "509:         toc[strm.total_out] = '\\0';",
      "510:         hdr.toc_length_decompressed = strm.total_out;",
      "511:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "557:             goto exit_reader;",
      "558:         }",
      "562:                    tmpname, size, offset, length);",
      "",
      "[Removed Lines]",
      "560:         cli_dbgmsg(\"cli_scanxar: decompress into temp file:\\n%s, size %li,\\n\"",
      "561:                    \"from xar heap offset %li length %li\\n\",",
      "",
      "[Added Lines]",
      "580:         cli_dbgmsg(\"cli_scanxar: decompress into temp file:\\n%s, size %zu,\\n\"",
      "581:                    \"from xar heap offset %zu length %zu\\n\",",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "639:             {",
      "640:                 struct CLI_LZMA lz;",
      "642:                 unsigned long out_size = 0;",
      "643:                 unsigned char * buff = __lzma_wrap_alloc(NULL, CLI_LZMA_OBUF_SIZE);",
      "644:                 int lret;",
      "646:                 memset(&lz, 0, sizeof(lz));",
      "647:                 if (buff == NULL) {",
      "648:                     cli_dbgmsg(\"cli_scanxar: memory request for lzma decompression buffer fails.\\n\");",
      "",
      "[Removed Lines]",
      "641:                 unsigned long in_remaining = length;",
      "",
      "[Added Lines]",
      "661:                 unsigned long in_remaining = MIN(length, map->len - at);",
      "666:                 if (length > in_remaining)",
      "667:                     length = in_remaining;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "655:                 if (blockp == NULL) {",
      "656:                     char errbuff[128];",
      "657:                     cli_strerror(errno, errbuff, sizeof(errbuff));",
      "660:                     rc = CL_EREAD;",
      "661:                     __lzma_wrap_free(NULL, buff);",
      "662:                     goto exit_tmpfile;",
      "",
      "[Removed Lines]",
      "658:                     cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno:%s.\\n\",",
      "659:                                length, at, errbuff);",
      "",
      "[Added Lines]",
      "681:                     cli_dbgmsg(\"cli_scanxar: Can't read %i bytes @ %li, errno:%s.\\n\",",
      "682:                                CLI_LZMA_HDR_SIZE, at, errbuff);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "693:                         char errbuff[128];",
      "694:                         cli_strerror(errno, errbuff, sizeof(errbuff));",
      "695:                         cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno: %s.\\n\",",
      "697:                         rc = CL_EREAD;",
      "698:                         __lzma_wrap_free(NULL, buff);",
      "699:                         cli_LzmaShutdown(&lz);",
      "",
      "[Removed Lines]",
      "696:                                    length, at, errbuff);",
      "",
      "[Added Lines]",
      "719:                                    lz.avail_in, at, errbuff);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "759:             do_extract_cksum = 0;",
      "760:             {",
      "763:                 if (ctx->engine->maxfilesize)",
      "769:                     char errbuff[128];",
      "770:                     cli_strerror(errno, errbuff, sizeof(errbuff));",
      "773:                     rc = CL_EREAD;",
      "774:                     goto exit_tmpfile;",
      "775:                 }",
      "777:                 if (a_hash_ctx != NULL)",
      "782:                     rc = CL_EWRITE;",
      "783:                     goto exit_tmpfile;",
      "784:                 }",
      "786:             }",
      "789:         if (rc == CL_SUCCESS) {",
      "790:             if (a_hash_ctx != NULL) {",
      "",
      "[Removed Lines]",
      "761:                 unsigned long write_len;",
      "764:                     write_len = MIN((size_t)(ctx->engine->maxfilesize), (size_t)length);",
      "765:                 else",
      "766:                     write_len = length;",
      "768:                 if (!(blockp = (void*)fmap_need_off_once(map, at, length))) {",
      "771:                     cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno:%s.\\n\",",
      "772:                                length, at, errbuff);",
      "778:                     xar_hash_update(a_hash_ctx, blockp, length, a_hash);",
      "780:                 if (cli_writen(fd, blockp, write_len) < 0) {",
      "781:                     cli_dbgmsg(\"cli_scanxar: cli_writen error %li bytes @ %li.\\n\", length, at);",
      "787:         }",
      "",
      "[Added Lines]",
      "784:                 size_t writelen = MIN(map->len - at, length);",
      "787:                     writelen = MIN((size_t)(ctx->engine->maxfilesize), writelen);",
      "789:                 if (!(blockp = (void*)fmap_need_off_once(map, at, writelen))) {",
      "792:                     cli_dbgmsg(\"cli_scanxar: Can't read %zu bytes @ %zu, errno:%s.\\n\",",
      "793:                                writelen, at, errbuff);",
      "799:                     xar_hash_update(a_hash_ctx, blockp, writelen, a_hash);",
      "801:                 if (cli_writen(fd, blockp, writelen) < 0) {",
      "802:                     cli_dbgmsg(\"cli_scanxar: cli_writen error %zu bytes @ %li.\\n\", writelen, at);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "871:     cli_dbgmsg(\"cli_scanxar: can't scan xar files, need libxml2.\\n\");",
      "872: #endif",
      "873:     if (cksum_fails + extract_errors != 0) {",
      "875:                     cksum_fails, extract_errors);",
      "876:     }",
      "",
      "[Removed Lines]",
      "874:         cli_warnmsg(\"cli_scanxar: %u checksum errors and %u extraction errors, use --debug for more info.\\n\",",
      "",
      "[Added Lines]",
      "895:         cli_dbgmsg(\"cli_scanxar: %u checksum errors and %u extraction errors.\\n\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b43149779bfed05843b3e991af6ebafd3ab1cbb8",
      "candidate_info": {
        "commit_hash": "b43149779bfed05843b3e991af6ebafd3ab1cbb8",
        "repo": "Cisco-Talos/clamav-devel",
        "commit_url": "https://github.com/Cisco-Talos/clamav-devel/commit/b43149779bfed05843b3e991af6ebafd3ab1cbb8",
        "files": [
          "libclamav/xar.c"
        ],
        "message": "bb11588 - fix out of bounds read.",
        "before_after_code_files": [
          "libclamav/xar.c||libclamav/xar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libclamav/xar.c||libclamav/xar.c"
          ],
          "candidate": [
            "libclamav/xar.c||libclamav/xar.c"
          ]
        }
      },
      "candidate_diff": {
        "libclamav/xar.c||libclamav/xar.c": [
          "File: libclamav/xar.c -> libclamav/xar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:      value - pointer to long to contain the returned value",
          "72:    returns - CL_SUCCESS or CL_EFORMAT",
          "75: {",
          "76:     const xmlChar * numstr;",
          "77:     if (xmlTextReaderRead(reader) == 1 && xmlTextReaderNodeType(reader) == XML_READER_TYPE_TEXT) {",
          "78:         numstr = xmlTextReaderConstValue(reader);",
          "79:         if (numstr) {",
          "82:                 cli_dbgmsg(\"cli_scanxar: XML element value %li\\n\", *value);",
          "83:                 return CL_EFORMAT;",
          "84:             }",
          "85:             return CL_SUCCESS;",
          "86:         }",
          "87:     }",
          "",
          "[Removed Lines]",
          "74: static int xar_get_numeric_from_xml_element(xmlTextReaderPtr reader, long * value)",
          "81:             if (*value < 0) {",
          "",
          "[Added Lines]",
          "74: static int xar_get_numeric_from_xml_element(xmlTextReaderPtr reader, size_t * value)",
          "77:     ssize_t numval;",
          "82:             numval = atol((const char *)numstr);",
          "83:             if (numval < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     if (xmlTextReaderRead(reader) == 1 && xmlTextReaderNodeType(reader) == XML_READER_TYPE_TEXT) {",
          "124:         xmlval = xmlTextReaderConstValue(reader);",
          "125:         if (xmlval) {",
          "128:         } else {",
          "130:             cli_dbgmsg(\"cli_scanxar: xmlTextReaderConstValue() returns NULL for checksum value.\\n\");",
          "",
          "[Removed Lines]",
          "127:             cli_dbgmsg(\"cli_scanxar: checksum value is %s.\\n\", *cksum);",
          "",
          "[Added Lines]",
          "129:             cli_dbgmsg(\"cli_scanxar: checksum value is %s.\\n\", xmlval);",
          "130:             if (*hash == XAR_CKSUM_SHA1 && xmlStrlen(xmlval) == 2 * CLI_HASHLEN_SHA1 ||",
          "132:                 {",
          "134:                 }",
          "135:             else",
          "136:                 {",
          "137:                     cli_dbgmsg(\"cli_scanxar: checksum type is unknown or length is invalid.\\n\");",
          "140:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:      e_hash - pointer to int for returning extracted checksum algorithm.",
          "150:    returns - CL_FORMAT, CL_SUCCESS, CL_BREAK. CL_BREAK indicates no more <data>/<ea> element.",
          "153:                                    unsigned char ** a_cksum, int * a_hash, unsigned char ** e_cksum, int * e_hash)",
          "154: {",
          "155:     const xmlChar *name;",
          "",
          "[Removed Lines]",
          "152: static int xar_get_toc_data_values(xmlTextReaderPtr reader, long *length, long *offset, long *size, int *encoding,",
          "",
          "[Added Lines]",
          "165: static int xar_get_toc_data_values(xmlTextReaderPtr reader, size_t *length, size_t *offset, size_t *size, int *encoding,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "386:         return 1;",
          "387:     switch (hash) {",
          "388:     case XAR_CKSUM_SHA1:",
          "390:         break;",
          "391:     case XAR_CKSUM_MD5:",
          "393:         break;",
          "394:     case XAR_CKSUM_OTHER:",
          "395:     case XAR_CKSUM_NONE:",
          "",
          "[Removed Lines]",
          "389:         len = SHA1_HASH_SIZE;",
          "392:         len = CLI_HASH_MD5;",
          "",
          "[Added Lines]",
          "402:         len = CLI_HASHLEN_SHA1;",
          "405:         len = CLI_HASHLEN_MD5;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:     int fd = -1;",
          "418:     struct xar_header hdr;",
          "419:     fmap_t *map = *ctx->fmap;",
          "421:     int encoding;",
          "422:     z_stream strm;",
          "423:     char *toc, *tmpname;",
          "",
          "[Removed Lines]",
          "420:     long length, offset, size, at;",
          "",
          "[Added Lines]",
          "433:     size_t length, offset, size, at;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "490:         goto exit_toc;",
          "491:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:     if (hdr.toc_length_decompressed != strm.total_out) {",
          "507:         cli_dbgmsg(\"TOC decompress length %\" PRIu64 \" does not match amount decompressed %lu\\n\",",
          "508:                    hdr.toc_length_decompressed, strm.total_out);",
          "509:         toc[strm.total_out] = '\\0';",
          "510:         hdr.toc_length_decompressed = strm.total_out;",
          "511:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:             goto exit_reader;",
          "558:         }",
          "562:                    tmpname, size, offset, length);",
          "",
          "[Removed Lines]",
          "560:         cli_dbgmsg(\"cli_scanxar: decompress into temp file:\\n%s, size %li,\\n\"",
          "561:                    \"from xar heap offset %li length %li\\n\",",
          "",
          "[Added Lines]",
          "580:         cli_dbgmsg(\"cli_scanxar: decompress into temp file:\\n%s, size %zu,\\n\"",
          "581:                    \"from xar heap offset %zu length %zu\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "639:             {",
          "640:                 struct CLI_LZMA lz;",
          "642:                 unsigned long out_size = 0;",
          "643:                 unsigned char * buff = __lzma_wrap_alloc(NULL, CLI_LZMA_OBUF_SIZE);",
          "644:                 int lret;",
          "646:                 memset(&lz, 0, sizeof(lz));",
          "647:                 if (buff == NULL) {",
          "648:                     cli_dbgmsg(\"cli_scanxar: memory request for lzma decompression buffer fails.\\n\");",
          "",
          "[Removed Lines]",
          "641:                 unsigned long in_remaining = length;",
          "",
          "[Added Lines]",
          "661:                 unsigned long in_remaining = MIN(length, map->len - at);",
          "666:                 if (length > in_remaining)",
          "667:                     length = in_remaining;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "655:                 if (blockp == NULL) {",
          "656:                     char errbuff[128];",
          "657:                     cli_strerror(errno, errbuff, sizeof(errbuff));",
          "660:                     rc = CL_EREAD;",
          "661:                     __lzma_wrap_free(NULL, buff);",
          "662:                     goto exit_tmpfile;",
          "",
          "[Removed Lines]",
          "658:                     cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno:%s.\\n\",",
          "659:                                length, at, errbuff);",
          "",
          "[Added Lines]",
          "681:                     cli_dbgmsg(\"cli_scanxar: Can't read %i bytes @ %li, errno:%s.\\n\",",
          "682:                                CLI_LZMA_HDR_SIZE, at, errbuff);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "693:                         char errbuff[128];",
          "694:                         cli_strerror(errno, errbuff, sizeof(errbuff));",
          "695:                         cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno: %s.\\n\",",
          "697:                         rc = CL_EREAD;",
          "698:                         __lzma_wrap_free(NULL, buff);",
          "699:                         cli_LzmaShutdown(&lz);",
          "",
          "[Removed Lines]",
          "696:                                    length, at, errbuff);",
          "",
          "[Added Lines]",
          "719:                                    lz.avail_in, at, errbuff);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "759:             do_extract_cksum = 0;",
          "760:             {",
          "763:                 if (ctx->engine->maxfilesize)",
          "769:                     char errbuff[128];",
          "770:                     cli_strerror(errno, errbuff, sizeof(errbuff));",
          "773:                     rc = CL_EREAD;",
          "774:                     goto exit_tmpfile;",
          "775:                 }",
          "777:                 if (a_hash_ctx != NULL)",
          "782:                     rc = CL_EWRITE;",
          "783:                     goto exit_tmpfile;",
          "784:                 }",
          "786:             }",
          "789:         if (rc == CL_SUCCESS) {",
          "790:             if (a_hash_ctx != NULL) {",
          "",
          "[Removed Lines]",
          "761:                 unsigned long write_len;",
          "764:                     write_len = MIN((size_t)(ctx->engine->maxfilesize), (size_t)length);",
          "765:                 else",
          "766:                     write_len = length;",
          "768:                 if (!(blockp = (void*)fmap_need_off_once(map, at, length))) {",
          "771:                     cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno:%s.\\n\",",
          "772:                                length, at, errbuff);",
          "778:                     xar_hash_update(a_hash_ctx, blockp, length, a_hash);",
          "780:                 if (cli_writen(fd, blockp, write_len) < 0) {",
          "781:                     cli_dbgmsg(\"cli_scanxar: cli_writen error %li bytes @ %li.\\n\", length, at);",
          "787:         }",
          "",
          "[Added Lines]",
          "784:                 size_t writelen = MIN(map->len - at, length);",
          "787:                     writelen = MIN((size_t)(ctx->engine->maxfilesize), writelen);",
          "789:                 if (!(blockp = (void*)fmap_need_off_once(map, at, writelen))) {",
          "792:                     cli_dbgmsg(\"cli_scanxar: Can't read %zu bytes @ %zu, errno:%s.\\n\",",
          "793:                                writelen, at, errbuff);",
          "799:                     xar_hash_update(a_hash_ctx, blockp, writelen, a_hash);",
          "801:                 if (cli_writen(fd, blockp, writelen) < 0) {",
          "802:                     cli_dbgmsg(\"cli_scanxar: cli_writen error %zu bytes @ %li.\\n\", writelen, at);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "871:     cli_dbgmsg(\"cli_scanxar: can't scan xar files, need libxml2.\\n\");",
          "872: #endif",
          "873:     if (cksum_fails + extract_errors != 0) {",
          "875:                     cksum_fails, extract_errors);",
          "876:     }",
          "",
          "[Removed Lines]",
          "874:         cli_warnmsg(\"cli_scanxar: %u checksum errors and %u extraction errors, use --debug for more info.\\n\",",
          "",
          "[Added Lines]",
          "895:         cli_dbgmsg(\"cli_scanxar: %u checksum errors and %u extraction errors.\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f89349140b20e8ee3d540acf5f7209046ddf3a2a",
      "candidate_info": {
        "commit_hash": "f89349140b20e8ee3d540acf5f7209046ddf3a2a",
        "repo": "Cisco-Talos/clamav-devel",
        "commit_url": "https://github.com/Cisco-Talos/clamav-devel/commit/f89349140b20e8ee3d540acf5f7209046ddf3a2a",
        "files": [
          "libclamav/xar.c"
        ],
        "message": "bb11588 - fix out of bounds read.",
        "before_after_code_files": [
          "libclamav/xar.c||libclamav/xar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libclamav/xar.c||libclamav/xar.c"
          ],
          "candidate": [
            "libclamav/xar.c||libclamav/xar.c"
          ]
        }
      },
      "candidate_diff": {
        "libclamav/xar.c||libclamav/xar.c": [
          "File: libclamav/xar.c -> libclamav/xar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:      value - pointer to long to contain the returned value",
          "72:    returns - CL_SUCCESS or CL_EFORMAT",
          "75: {",
          "76:     const xmlChar * numstr;",
          "77:     if (xmlTextReaderRead(reader) == 1 && xmlTextReaderNodeType(reader) == XML_READER_TYPE_TEXT) {",
          "78:         numstr = xmlTextReaderConstValue(reader);",
          "79:         if (numstr) {",
          "82:                 cli_dbgmsg(\"cli_scanxar: XML element value %li\\n\", *value);",
          "83:                 return CL_EFORMAT;",
          "84:             }",
          "85:             return CL_SUCCESS;",
          "86:         }",
          "87:     }",
          "",
          "[Removed Lines]",
          "74: static int xar_get_numeric_from_xml_element(xmlTextReaderPtr reader, long * value)",
          "81:             if (*value < 0) {",
          "",
          "[Added Lines]",
          "74: static int xar_get_numeric_from_xml_element(xmlTextReaderPtr reader, size_t * value)",
          "77:     ssize_t numval;",
          "82:             numval = atol((const char *)numstr);",
          "83:             if (numval < 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     if (xmlTextReaderRead(reader) == 1 && xmlTextReaderNodeType(reader) == XML_READER_TYPE_TEXT) {",
          "124:         xmlval = xmlTextReaderConstValue(reader);",
          "125:         if (xmlval) {",
          "128:         } else {",
          "130:             cli_dbgmsg(\"cli_scanxar: xmlTextReaderConstValue() returns NULL for checksum value.\\n\");",
          "",
          "[Removed Lines]",
          "127:             cli_dbgmsg(\"cli_scanxar: checksum value is %s.\\n\", *cksum);",
          "",
          "[Added Lines]",
          "129:             cli_dbgmsg(\"cli_scanxar: checksum value is %s.\\n\", xmlval);",
          "130:             if (*hash == XAR_CKSUM_SHA1 && xmlStrlen(xmlval) == 2 * CLI_HASHLEN_SHA1 ||",
          "132:                 {",
          "134:                 }",
          "135:             else",
          "136:                 {",
          "137:                     cli_dbgmsg(\"cli_scanxar: checksum type is unknown or length is invalid.\\n\");",
          "140:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:      e_hash - pointer to int for returning extracted checksum algorithm.",
          "150:    returns - CL_FORMAT, CL_SUCCESS, CL_BREAK. CL_BREAK indicates no more <data>/<ea> element.",
          "153:                                    unsigned char ** a_cksum, int * a_hash, unsigned char ** e_cksum, int * e_hash)",
          "154: {",
          "155:     const xmlChar *name;",
          "",
          "[Removed Lines]",
          "152: static int xar_get_toc_data_values(xmlTextReaderPtr reader, long *length, long *offset, long *size, int *encoding,",
          "",
          "[Added Lines]",
          "165: static int xar_get_toc_data_values(xmlTextReaderPtr reader, size_t *length, size_t *offset, size_t *size, int *encoding,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "386:         return 1;",
          "387:     switch (hash) {",
          "388:     case XAR_CKSUM_SHA1:",
          "390:         break;",
          "391:     case XAR_CKSUM_MD5:",
          "393:         break;",
          "394:     case XAR_CKSUM_OTHER:",
          "395:     case XAR_CKSUM_NONE:",
          "",
          "[Removed Lines]",
          "389:         len = SHA1_HASH_SIZE;",
          "392:         len = CLI_HASH_MD5;",
          "",
          "[Added Lines]",
          "402:         len = CLI_HASHLEN_SHA1;",
          "405:         len = CLI_HASHLEN_MD5;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "417:     int fd = -1;",
          "418:     struct xar_header hdr;",
          "419:     fmap_t *map = *ctx->fmap;",
          "421:     int encoding;",
          "422:     z_stream strm;",
          "423:     char *toc, *tmpname;",
          "",
          "[Removed Lines]",
          "420:     long length, offset, size, at;",
          "",
          "[Added Lines]",
          "433:     size_t length, offset, size, at;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "490:         goto exit_toc;",
          "491:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:     if (hdr.toc_length_decompressed != strm.total_out) {",
          "507:         cli_dbgmsg(\"TOC decompress length %\" PRIu64 \" does not match amount decompressed %lu\\n\",",
          "508:                    hdr.toc_length_decompressed, strm.total_out);",
          "509:         toc[strm.total_out] = '\\0';",
          "510:         hdr.toc_length_decompressed = strm.total_out;",
          "511:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:             goto exit_reader;",
          "558:         }",
          "562:                    tmpname, size, offset, length);",
          "",
          "[Removed Lines]",
          "560:         cli_dbgmsg(\"cli_scanxar: decompress into temp file:\\n%s, size %li,\\n\"",
          "561:                    \"from xar heap offset %li length %li\\n\",",
          "",
          "[Added Lines]",
          "580:         cli_dbgmsg(\"cli_scanxar: decompress into temp file:\\n%s, size %zu,\\n\"",
          "581:                    \"from xar heap offset %zu length %zu\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "639:             {",
          "640:                 struct CLI_LZMA lz;",
          "642:                 unsigned long out_size = 0;",
          "643:                 unsigned char * buff = __lzma_wrap_alloc(NULL, CLI_LZMA_OBUF_SIZE);",
          "644:                 int lret;",
          "646:                 memset(&lz, 0, sizeof(lz));",
          "647:                 if (buff == NULL) {",
          "648:                     cli_dbgmsg(\"cli_scanxar: memory request for lzma decompression buffer fails.\\n\");",
          "",
          "[Removed Lines]",
          "641:                 unsigned long in_remaining = length;",
          "",
          "[Added Lines]",
          "661:                 unsigned long in_remaining = MIN(length, map->len - at);",
          "666:                 if (length > in_remaining)",
          "667:                     length = in_remaining;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "655:                 if (blockp == NULL) {",
          "656:                     char errbuff[128];",
          "657:                     cli_strerror(errno, errbuff, sizeof(errbuff));",
          "660:                     rc = CL_EREAD;",
          "661:                     __lzma_wrap_free(NULL, buff);",
          "662:                     goto exit_tmpfile;",
          "",
          "[Removed Lines]",
          "658:                     cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno:%s.\\n\",",
          "659:                                length, at, errbuff);",
          "",
          "[Added Lines]",
          "681:                     cli_dbgmsg(\"cli_scanxar: Can't read %i bytes @ %li, errno:%s.\\n\",",
          "682:                                CLI_LZMA_HDR_SIZE, at, errbuff);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "693:                         char errbuff[128];",
          "694:                         cli_strerror(errno, errbuff, sizeof(errbuff));",
          "695:                         cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno: %s.\\n\",",
          "697:                         rc = CL_EREAD;",
          "698:                         __lzma_wrap_free(NULL, buff);",
          "699:                         cli_LzmaShutdown(&lz);",
          "",
          "[Removed Lines]",
          "696:                                    length, at, errbuff);",
          "",
          "[Added Lines]",
          "719:                                    lz.avail_in, at, errbuff);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "759:             do_extract_cksum = 0;",
          "760:             {",
          "763:                 if (ctx->engine->maxfilesize)",
          "769:                     char errbuff[128];",
          "770:                     cli_strerror(errno, errbuff, sizeof(errbuff));",
          "773:                     rc = CL_EREAD;",
          "774:                     goto exit_tmpfile;",
          "775:                 }",
          "777:                 if (a_hash_ctx != NULL)",
          "782:                     rc = CL_EWRITE;",
          "783:                     goto exit_tmpfile;",
          "784:                 }",
          "786:             }",
          "789:         if (rc == CL_SUCCESS) {",
          "790:             if (a_hash_ctx != NULL) {",
          "",
          "[Removed Lines]",
          "761:                 unsigned long write_len;",
          "764:                     write_len = MIN((size_t)(ctx->engine->maxfilesize), (size_t)length);",
          "765:                 else",
          "766:                     write_len = length;",
          "768:                 if (!(blockp = (void*)fmap_need_off_once(map, at, length))) {",
          "771:                     cli_dbgmsg(\"cli_scanxar: Can't read %li bytes @ %li, errno:%s.\\n\",",
          "772:                                length, at, errbuff);",
          "778:                     xar_hash_update(a_hash_ctx, blockp, length, a_hash);",
          "780:                 if (cli_writen(fd, blockp, write_len) < 0) {",
          "781:                     cli_dbgmsg(\"cli_scanxar: cli_writen error %li bytes @ %li.\\n\", length, at);",
          "787:         }",
          "",
          "[Added Lines]",
          "784:                 size_t writelen = MIN(map->len - at, length);",
          "787:                     writelen = MIN((size_t)(ctx->engine->maxfilesize), writelen);",
          "789:                 if (!(blockp = (void*)fmap_need_off_once(map, at, writelen))) {",
          "792:                     cli_dbgmsg(\"cli_scanxar: Can't read %zu bytes @ %zu, errno:%s.\\n\",",
          "793:                                writelen, at, errbuff);",
          "799:                     xar_hash_update(a_hash_ctx, blockp, writelen, a_hash);",
          "801:                 if (cli_writen(fd, blockp, writelen) < 0) {",
          "802:                     cli_dbgmsg(\"cli_scanxar: cli_writen error %zu bytes @ %li.\\n\", writelen, at);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "871:     cli_dbgmsg(\"cli_scanxar: can't scan xar files, need libxml2.\\n\");",
          "872: #endif",
          "873:     if (cksum_fails + extract_errors != 0) {",
          "875:                     cksum_fails, extract_errors);",
          "876:     }",
          "",
          "[Removed Lines]",
          "874:         cli_warnmsg(\"cli_scanxar: %u checksum errors and %u extraction errors, use --debug for more info.\\n\",",
          "",
          "[Added Lines]",
          "895:         cli_dbgmsg(\"cli_scanxar: %u checksum errors and %u extraction errors.\\n\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}