{
  "cve_id": "CVE-2021-30045",
  "cve_desc": "SerenityOS 2021-03-27 contains a buffer overflow vulnerability in the EndOfCentralDirectory::read() function.",
  "repo": "SerenityOS/serenity",
  "patch_hash": "4317db7498eaa5a37068052bb0310fbc6a5f78e4",
  "patch_info": {
    "commit_hash": "4317db7498eaa5a37068052bb0310fbc6a5f78e4",
    "repo": "SerenityOS/serenity",
    "commit_url": "https://github.com/SerenityOS/serenity/commit/4317db7498eaa5a37068052bb0310fbc6a5f78e4",
    "files": [
      "Userland/Libraries/LibArchive/Zip.h"
    ],
    "message": "LibArchive: Make bounds checks stricter in the Zip parser\n\nWe now also check we have enough space in the incoming buffer for the\nvarious signatures and optional (length specified) fields. This helps\nprevents a possible heap overflow read.",
    "before_after_code_files": [
      "Userland/Libraries/LibArchive/Zip.h||Userland/Libraries/LibArchive/Zip.h"
    ]
  },
  "patch_diff": {
    "Userland/Libraries/LibArchive/Zip.h||Userland/Libraries/LibArchive/Zip.h": [
      "File: Userland/Libraries/LibArchive/Zip.h -> Userland/Libraries/LibArchive/Zip.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     bool read(ReadonlyBytes buffer)",
      "53:     {",
      "54:         auto fields_size = sizeof(EndOfCentralDirectory) - sizeof(u8*);",
      "56:             return false;",
      "57:         if (memcmp(buffer.data(), end_of_central_directory_signature, sizeof(end_of_central_directory_signature)) != 0)",
      "58:             return false;",
      "59:         memcpy(reinterpret_cast<void*>(&disk_number), buffer.data() + sizeof(end_of_central_directory_signature), fields_size);",
      "60:         comment = buffer.data() + sizeof(end_of_central_directory_signature) + fields_size;",
      "61:         return true;",
      "62:     }",
      "",
      "[Removed Lines]",
      "55:         if (buffer.size() < fields_size)",
      "",
      "[Added Lines]",
      "55:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size)",
      "60:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + comment_length)",
      "61:             return false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:     bool read(ReadonlyBytes buffer)",
      "102:     {",
      "103:         auto fields_size = sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3);",
      "105:             return false;",
      "106:         if (memcmp(buffer.data(), central_directory_record_signature, sizeof(central_directory_record_signature)) != 0)",
      "107:             return false;",
      "108:         memcpy(reinterpret_cast<void*>(&made_by_version), buffer.data() + sizeof(central_directory_record_signature), fields_size);",
      "109:         name = buffer.data() + sizeof(central_directory_record_signature) + fields_size;",
      "110:         extra_data = name + name_length;",
      "111:         comment = extra_data + extra_data_length;",
      "",
      "[Removed Lines]",
      "104:         if (buffer.size() < fields_size)",
      "",
      "[Added Lines]",
      "106:         if (buffer.size() < sizeof(central_directory_record_signature) + fields_size)",
      "111:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + comment_length + name_length + extra_data_length)",
      "112:             return false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "165:     bool read(ReadonlyBytes buffer)",
      "166:     {",
      "167:         auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);",
      "169:             return false;",
      "170:         if (memcmp(buffer.data(), local_file_header_signature, sizeof(local_file_header_signature)) != 0)",
      "171:             return false;",
      "172:         memcpy(reinterpret_cast<void*>(&minimum_version), buffer.data() + sizeof(local_file_header_signature), fields_size);",
      "173:         name = buffer.data() + sizeof(local_file_header_signature) + fields_size;",
      "174:         extra_data = name + name_length;",
      "175:         compressed_data = extra_data + extra_data_length;",
      "",
      "[Removed Lines]",
      "168:         if (buffer.size() < fields_size)",
      "",
      "[Added Lines]",
      "172:         if (buffer.size() < sizeof(local_file_header_signature) + fields_size)",
      "177:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + name_length + extra_data_length + compressed_size)",
      "178:             return false;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "484c0edafc0d4d004243b23b1d833e836d3e449e",
      "candidate_info": {
        "commit_hash": "484c0edafc0d4d004243b23b1d833e836d3e449e",
        "repo": "SerenityOS/serenity",
        "commit_url": "https://github.com/SerenityOS/serenity/commit/484c0edafc0d4d004243b23b1d833e836d3e449e",
        "files": [
          "Userland/Libraries/LibArchive/Zip.cpp",
          "Userland/Libraries/LibArchive/Zip.h"
        ],
        "message": "LibArchive: Refactor zip header handling\n\nThe directory headers have some common code for reading.",
        "before_after_code_files": [
          "Userland/Libraries/LibArchive/Zip.cpp||Userland/Libraries/LibArchive/Zip.cpp",
          "Userland/Libraries/LibArchive/Zip.h||Userland/Libraries/LibArchive/Zip.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Userland/Libraries/LibArchive/Zip.h||Userland/Libraries/LibArchive/Zip.h"
          ],
          "candidate": [
            "Userland/Libraries/LibArchive/Zip.h||Userland/Libraries/LibArchive/Zip.h"
          ]
        }
      },
      "candidate_diff": {
        "Userland/Libraries/LibArchive/Zip.cpp||Userland/Libraries/LibArchive/Zip.cpp": [
          "File: Userland/Libraries/LibArchive/Zip.cpp -> Userland/Libraries/LibArchive/Zip.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         if (buffer.size() < (sizeof(EndOfCentralDirectory) - sizeof(u8*)) + backwards_offset)",
          "16:             return false;",
          "20:             offset = signature_offset;",
          "21:             return true;",
          "22:         }",
          "",
          "[Removed Lines]",
          "18:         auto signature_offset = (buffer.size() - (sizeof(EndOfCentralDirectory) - sizeof(u8*)) - backwards_offset);",
          "19:         if (memcmp(buffer.data() + signature_offset, end_of_central_directory_signature, sizeof(end_of_central_directory_signature)) == 0) {",
          "",
          "[Added Lines]",
          "19:         auto const signature_offset = (buffer.size() - (sizeof(EndOfCentralDirectory) - sizeof(u8*)) - backwards_offset);",
          "20:         if (auto signature = ReadonlyBytes { buffer.data() + signature_offset, EndOfCentralDirectory::signature.size() };",
          "21:             signature == EndOfCentralDirectory::signature) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:         central_directory_record.internal_attributes = 0;",
          "157:         central_directory_record.external_attributes = member.is_directory ? zip_directory_external_attribute : 0;",
          "158:         central_directory_record.local_file_header_offset = file_header_offset; // FIXME: we assume the wrapped output stream was never written to before us",
          "160:         central_directory_record.name = (const u8*)(member.name.characters());",
          "161:         central_directory_record.extra_data = nullptr;",
          "162:         central_directory_record.comment = nullptr;",
          "",
          "[Removed Lines]",
          "159:         file_header_offset += sizeof(local_file_header_signature) + (sizeof(LocalFileHeader) - (sizeof(u8*) * 3)) + member.name.length() + member.compressed_data.size();",
          "",
          "[Added Lines]",
          "161:         file_header_offset += sizeof(LocalFileHeader::signature) + (sizeof(LocalFileHeader) - (sizeof(u8*) * 3)) + member.name.length() + member.compressed_data.size();",
          "",
          "---------------"
        ],
        "Userland/Libraries/LibArchive/Zip.h||Userland/Libraries/LibArchive/Zip.h": [
          "File: Userland/Libraries/LibArchive/Zip.h -> Userland/Libraries/LibArchive/Zip.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #pragma once",
          "9: #include <AK/Function.h>",
          "10: #include <AK/IterationDecision.h>",
          "12: #include <AK/Stream.h>",
          "13: #include <AK/String.h>",
          "14: #include <AK/Vector.h>",
          "",
          "[Removed Lines]",
          "11: #include <AK/Span.h>",
          "",
          "[Added Lines]",
          "10: #include <AK/Array.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: namespace Archive {",
          "22: struct [[gnu::packed]] EndOfCentralDirectory {",
          "23:     u16 disk_number;",
          "24:     u16 central_directory_start_disk;",
          "25:     u16 disk_records_count;",
          "",
          "[Removed Lines]",
          "21: static constexpr u8 end_of_central_directory_signature[] = { 0x50, 0x4b, 0x05, 0x06 }; // 'PK\\x05\\x06'",
          "",
          "[Added Lines]",
          "20: template<size_t fields_size, class T>",
          "21: static bool read_helper(ReadonlyBytes buffer, T* self)",
          "22: {",
          "23:     if (buffer.size() < T::signature.size() + fields_size)",
          "24:         return false;",
          "25:     if (buffer.slice(0, T::signature.size()) != T::signature)",
          "26:         return false;",
          "27:     memcpy(self, buffer.data() + T::signature.size(), fields_size);",
          "28:     return true;",
          "29: }",
          "33: static constexpr auto signature_length = 4;",
          "36:     static constexpr Array<u8, signature_length> signature = { 0x50, 0x4b, 0x05, 0x06 }; // 'PK\\x05\\x06'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:     bool read(ReadonlyBytes buffer)",
          "33:     {",
          "38:             return false;",
          "41:             return false;",
          "43:         return true;",
          "44:     }",
          "46:     void write(OutputStream& stream) const",
          "47:     {",
          "49:         stream << disk_number;",
          "50:         stream << central_directory_start_disk;",
          "51:         stream << disk_records_count;",
          "",
          "[Removed Lines]",
          "34:         auto fields_size = sizeof(EndOfCentralDirectory) - sizeof(u8*);",
          "35:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size)",
          "36:             return false;",
          "37:         if (memcmp(buffer.data(), end_of_central_directory_signature, sizeof(end_of_central_directory_signature)) != 0)",
          "39:         memcpy(reinterpret_cast<void*>(&disk_number), buffer.data() + sizeof(end_of_central_directory_signature), fields_size);",
          "40:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + comment_length)",
          "42:         comment = buffer.data() + sizeof(end_of_central_directory_signature) + fields_size;",
          "48:         stream.write_or_error({ end_of_central_directory_signature, sizeof(end_of_central_directory_signature) });",
          "",
          "[Added Lines]",
          "49:         constexpr auto fields_size = sizeof(EndOfCentralDirectory) - (sizeof(u8*) * 1);",
          "50:         if (!read_helper<fields_size>(buffer, this))",
          "52:         if (buffer.size() < signature.size() + fields_size + comment_length)",
          "54:         comment = buffer.data() + signature.size() + fields_size;",
          "60:         stream.write_or_error(signature);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58:     }",
          "59: };",
          "62: struct [[gnu::packed]] CentralDirectoryRecord {",
          "63:     u16 made_by_version;",
          "64:     u16 minimum_version;",
          "65:     u16 general_purpose_flags;",
          "",
          "[Removed Lines]",
          "61: static constexpr u8 central_directory_record_signature[] = { 0x50, 0x4b, 0x01, 0x02 }; // 'PK\\x01\\x02'",
          "",
          "[Added Lines]",
          "74:     static constexpr Array<u8, signature_length> signature = { 0x50, 0x4b, 0x01, 0x02 }; // 'PK\\x01\\x02'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:     bool read(ReadonlyBytes buffer)",
          "84:     {",
          "89:             return false;",
          "92:             return false;",
          "94:         extra_data = name + name_length;",
          "95:         comment = extra_data + extra_data_length;",
          "96:         return true;",
          "",
          "[Removed Lines]",
          "85:         auto fields_size = sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3);",
          "86:         if (buffer.size() < sizeof(central_directory_record_signature) + fields_size)",
          "87:             return false;",
          "88:         if (memcmp(buffer.data(), central_directory_record_signature, sizeof(central_directory_record_signature)) != 0)",
          "90:         memcpy(reinterpret_cast<void*>(&made_by_version), buffer.data() + sizeof(central_directory_record_signature), fields_size);",
          "91:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + comment_length + name_length + extra_data_length)",
          "93:         name = buffer.data() + sizeof(central_directory_record_signature) + fields_size;",
          "",
          "[Added Lines]",
          "98:         constexpr auto fields_size = sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3);",
          "99:         if (!read_helper<fields_size>(buffer, this))",
          "101:         if (buffer.size() < size())",
          "103:         name = buffer.data() + signature.size() + fields_size;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "99:     void write(OutputStream& stream) const",
          "100:     {",
          "102:         stream << made_by_version;",
          "103:         stream << minimum_version;",
          "104:         stream << general_purpose_flags;",
          "",
          "[Removed Lines]",
          "101:         stream.write_or_error({ central_directory_record_signature, sizeof(central_directory_record_signature) });",
          "",
          "[Added Lines]",
          "111:         stream.write_or_error(signature);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:     [[nodiscard]] size_t size() const",
          "127:     {",
          "129:     }",
          "130: };",
          "131: static constexpr u32 zip_directory_external_attribute = 1 << 4;",
          "134: struct [[gnu::packed]] LocalFileHeader {",
          "135:     u16 minimum_version;",
          "136:     u16 general_purpose_flags;",
          "137:     u16 compression_method;",
          "",
          "[Removed Lines]",
          "128:         return sizeof(central_directory_record_signature) + (sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3)) + name_length + extra_data_length + comment_length;",
          "133: static constexpr u8 local_file_header_signature[] = { 0x50, 0x4b, 0x03, 0x04 }; // 'PK\\x03\\x04'",
          "",
          "[Added Lines]",
          "138:         return signature.size() + (sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3)) + name_length + extra_data_length + comment_length;",
          "144:     static constexpr Array<u8, signature_length> signature = { 0x50, 0x4b, 0x03, 0x04 }; // 'PK\\x03\\x04'",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "149:     bool read(ReadonlyBytes buffer)",
          "150:     {",
          "155:             return false;",
          "158:             return false;",
          "160:         extra_data = name + name_length;",
          "161:         compressed_data = extra_data + extra_data_length;",
          "162:         return true;",
          "",
          "[Removed Lines]",
          "151:         auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);",
          "152:         if (buffer.size() < sizeof(local_file_header_signature) + fields_size)",
          "153:             return false;",
          "154:         if (memcmp(buffer.data(), local_file_header_signature, sizeof(local_file_header_signature)) != 0)",
          "156:         memcpy(reinterpret_cast<void*>(&minimum_version), buffer.data() + sizeof(local_file_header_signature), fields_size);",
          "157:         if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + name_length + extra_data_length + compressed_size)",
          "159:         name = buffer.data() + sizeof(local_file_header_signature) + fields_size;",
          "",
          "[Added Lines]",
          "162:         constexpr auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);",
          "163:         if (!read_helper<fields_size>(buffer, this))",
          "165:         if (buffer.size() < signature.size() + fields_size + name_length + extra_data_length + compressed_size)",
          "167:         name = buffer.data() + signature.size() + fields_size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "165:     void write(OutputStream& stream) const",
          "166:     {",
          "168:         stream << minimum_version;",
          "169:         stream << general_purpose_flags;",
          "170:         stream << compression_method;",
          "",
          "[Removed Lines]",
          "167:         stream.write_or_error({ local_file_header_signature, sizeof(local_file_header_signature) });",
          "",
          "[Added Lines]",
          "175:         stream.write_or_error(signature);",
          "",
          "---------------"
        ]
      }
    }
  ]
}