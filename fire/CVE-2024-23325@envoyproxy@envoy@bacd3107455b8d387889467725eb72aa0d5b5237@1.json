{
  "cve_id": "CVE-2024-23325",
  "cve_desc": "Envoy is a high-performance edge/middle/service proxy. Envoy crashes in Proxy protocol when using an address type that isn\u2019t supported by the OS. Envoy is susceptible to crashing on a host with IPv6 disabled and a listener config with proxy protocol enabled when it receives a request where the client presents its IPv6 address.  It is valid for a client to present its IPv6 address to a target server even though the whole chain is connected via IPv4. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "bacd3107455b8d387889467725eb72aa0d5b5237",
  "patch_info": {
    "commit_hash": "bacd3107455b8d387889467725eb72aa0d5b5237",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237",
    "files": [
      "changelogs/current.yaml",
      "source/common/network/BUILD",
      "source/common/network/address_impl.cc",
      "source/common/network/address_impl.h",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
      "source/extensions/transport_sockets/tls/utility.cc",
      "source/extensions/transport_sockets/tls/utility.h",
      "test/config/integration/certs/clientcert.cfg",
      "test/config/integration/certs/clientcert.pem",
      "test/config/integration/certs/clientcert_hash.h",
      "test/config/integration/certs/clientkey.pem",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
    ],
    "message": "Fix crash when proxy protocol receives an address type that isn't supported by the operating system\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
    "before_after_code_files": [
      "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
      "source/common/network/address_impl.h||source/common/network/address_impl.h",
      "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
      "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
      "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
      "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
      "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
      "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
      "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
      "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
      "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:   return {start, end};",
      "213: }",
      "215: absl::Status Ipv4Instance::validateProtocolSupported() {",
      "216:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
      "218:     return absl::OkStatus();",
      "219:   }",
      "220:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
      "",
      "[Removed Lines]",
      "217:   if (supported) {",
      "",
      "[Added Lines]",
      "215: namespace {",
      "216: bool force_ipv4_unsupported_for_test = false;",
      "217: }",
      "219: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
      "220:   bool old_val = force_ipv4_unsupported_for_test;",
      "221:   force_ipv4_unsupported_for_test = new_val;",
      "222:   return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });",
      "223: }",
      "227:   if (supported && !force_ipv4_unsupported_for_test) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "324:   initHelper(address, v6only);",
      "325: }",
      "327: absl::Status Ipv6Instance::validateProtocolSupported() {",
      "328:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
      "330:     return absl::OkStatus();",
      "331:   }",
      "332:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
      "",
      "[Removed Lines]",
      "329:   if (supported) {",
      "",
      "[Added Lines]",
      "337: namespace {",
      "338: bool force_ipv6_unsupported_for_test = false;",
      "339: }",
      "341: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
      "342:   bool old_val = force_ipv6_unsupported_for_test;",
      "343:   force_ipv6_unsupported_for_test = new_val;",
      "344:   return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });",
      "345: }",
      "349:   if (supported && !force_ipv6_unsupported_for_test) {",
      "",
      "---------------"
    ],
    "source/common/network/address_impl.h||source/common/network/address_impl.h": [
      "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include \"envoy/network/socket.h\"",
      "13: #include \"source/common/common/assert.h\"",
      "14: #include \"source/common/common/statusor.h\"",
      "16: namespace Envoy {",
      "17: namespace Network {",
      "18: namespace Address {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: #include \"source/common/common/cleanup.h\"",
      "22: #define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:   static absl::Status validateProtocolSupported();",
      "147: private:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "227:   static absl::Status validateProtocolSupported();",
      "229: private:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "243:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
      "",
      "---------------"
    ],
    "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
      "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "276:         la4.sin_family = AF_INET;",
      "277:         la4.sin_port = v4->dst_port;",
      "278:         la4.sin_addr.s_addr = v4->dst_addr;",
      "284:         return true;",
      "285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
      "286:         PACKED_STRUCT(struct pp_ipv6_addr {",
      "",
      "[Removed Lines]",
      "279:         proxy_protocol_header_.emplace(",
      "280:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
      "281:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
      "282:                        std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
      "283:                        std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
      "",
      "[Added Lines]",
      "280:         TRY_NEEDS_AUDIT_ADDRESS {",
      "283:           proxy_protocol_header_.emplace(WireHeader{",
      "284:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
      "285:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
      "286:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
      "287:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
      "288:         }",
      "289:         END_TRY CATCH(const EnvoyException& e, {",
      "290:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
      "291:           return false;",
      "292:         });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "302:         la6.sin6_port = v6->dst_port;",
      "303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
      "310:         return true;",
      "311:       }",
      "312:     }",
      "",
      "[Removed Lines]",
      "305:         proxy_protocol_header_.emplace(WireHeader{",
      "306:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
      "307:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
      "308:             std::make_shared<Network::Address::Ipv6Instance>(ra6),",
      "309:             std::make_shared<Network::Address::Ipv6Instance>(la6)});",
      "",
      "[Added Lines]",
      "315:         TRY_NEEDS_AUDIT_ADDRESS {",
      "316:           proxy_protocol_header_.emplace(WireHeader{",
      "317:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
      "318:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
      "319:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
      "320:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
      "321:         }",
      "322:         END_TRY CATCH(const EnvoyException& e, {",
      "325:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
      "326:           return false;",
      "327:         });",
      "",
      "---------------"
    ],
    "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc": [
      "File: source/extensions/transport_sockets/tls/connection_info_impl_base.cc -> source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "185:     ASSERT(cached_ip_san_peer_certificate_.empty());",
      "186:     return cached_ip_san_peer_certificate_;",
      "187:   }",
      "189:   return cached_ip_san_peer_certificate_;",
      "190: }",
      "",
      "[Removed Lines]",
      "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);",
      "",
      "[Added Lines]",
      "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);",
      "",
      "---------------"
    ],
    "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc": [
      "File: source/extensions/transport_sockets/tls/utility.cc -> source/extensions/transport_sockets/tls/utility.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:   return \"\";",
      "168: }",
      "171:   std::vector<std::string> subject_alt_names;",
      "172:   bssl::UniquePtr<GENERAL_NAMES> san_names(",
      "173:       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));",
      "",
      "[Removed Lines]",
      "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
      "",
      "[Added Lines]",
      "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:   }",
      "177:   for (const GENERAL_NAME* san : san_names.get()) {",
      "178:     if (san->type == type) {",
      "180:     }",
      "181:   }",
      "182:   return subject_alt_names;",
      "",
      "[Removed Lines]",
      "179:       subject_alt_names.push_back(generalNameAsString(san));",
      "",
      "[Added Lines]",
      "179:       if (skip_unsupported) {",
      "182:         TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }",
      "183:         END_TRY CATCH(const EnvoyException& e,",
      "184:                       { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });",
      "185:       } else {",
      "186:         subject_alt_names.push_back(generalNameAsString(san));",
      "187:       }",
      "",
      "---------------"
    ],
    "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h": [
      "File: source/extensions/transport_sockets/tls/utility.h -> source/extensions/transport_sockets/tls/utility.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "57: std::vector<std::string> getSubjectAltNames(X509& cert, int type);",
      "",
      "[Added Lines]",
      "59: std::vector<std::string> getSubjectAltNames(X509& cert, int type, bool skip_unsupported = false);",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg": [
      "File: test/config/integration/certs/clientcert.cfg -> test/config/integration/certs/clientcert.cfg",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: URI.2 = http://frontend.lyft.com",
      "40: DNS.1 = lyft.com",
      "41: DNS.2 = www.lyft.com",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: IP.1 = 1.2.3.4",
      "43: IP.2 = 0:1:2:3::4",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem": [
      "File: test/config/integration/certs/clientcert.pem -> test/config/integration/certs/clientcert.pem",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: -----BEGIN CERTIFICATE-----",
      "3: BQAwdjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM",
      "4: DVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsMEEx5ZnQgRW5n",
      "7: FjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsM",
      "8: EEx5ZnQgRW5naW5lZXJpbmcxGzAZBgNVBAMMElRlc3QgRnJvbnRlbmQgVGVhbTEl",
      "9: MCMGCSqGSIb3DQEJARYWZnJvbnRlbmQtdGVhbUBseWZ0LmNvbTCCASIwDQYJKoZI",
      "18: bmQtdGVhbYYYaHR0cDovL2Zyb250ZW5kLmx5ZnQuY29tgghseWZ0LmNvbYIMd3d3",
      "27: -----END CERTIFICATE-----",
      "",
      "[Removed Lines]",
      "2: MIIEiTCCA3GgAwIBAgIUT9Wze0Fvw/pMvqAmPJjlD7HNjZAwDQYJKoZIhvcNAQEL",
      "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjIwNDA3MTY0NjM1WhcNMjQw",
      "6: NDA2MTY0NjM1WjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
      "10: hvcNAQEBBQADggEPADCCAQoCggEBAOwOQ96U2nYcA+lV5eFmHqwkUVH/b5wn/FXg",
      "11: ALBfT2qSn2pzMmqj3RHebqN4I7uiRGPmk7eVHxktW/ytFDdk+AwbGEOP8vWl9zR7",
      "12: 3pveKchHVSdSNJ4RkXpgDLZYDDDj/JQxNzDwPD43eIUw9SKj+Mw9nTRv0hm39hhh",
      "13: hjBmvOfbdWjQPMsuSDqEAPGE06PpirTdwZNSsuBjfvo6zdnJxTgzd/Cf1KINda4P",
      "14: xklw9M9CuKQMeLwVfwMDNeI2uJ7kn1dpsOhSDBU7LEleSWGGAlcycDzLuy/5/rKc",
      "15: dON9MKUK+82rJ+cME6I+DYqS1Nz+wY9t8farXLuGK41n0G4qr1MCAwEAAaOB2zCB",
      "16: 2DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
      "17: AgYIKwYBBQUHAwEwXAYDVR0RBFUwU4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
      "19: Lmx5ZnQuY29tMB0GA1UdDgQWBBROWpBWXFbgQUweTJcDDdEtGxJ6wzAfBgNVHSME",
      "20: GDAWgBQdDTmYdOz7TqwMpoOli3Dmj78ygjANBgkqhkiG9w0BAQsFAAOCAQEALyDC",
      "21: CJ2V30VRqf/vHnv4hocaNvkbg2XqSczsNsXQB9Oh15y2nrTu8nIlktJeMCwgYKB3",
      "22: tyuIYADw2c0HKmFshOiNM3P1taM+Gljx/OeyhMq/dgKTF0rX7w3vOoWrvW7o0cDJ",
      "23: gBzDAmPJegrIlAqfb97MOcLtBlk9vjh7ukh8BSRI+5Hdj5Gb8Y6tQvmiqzm5yx5L",
      "24: Swz7im1BIGwk4Hq82JO20egDYCn9zhmuDIEJGtRbl0ymcfdaC4oKqiqU/CrynaAo",
      "25: SkNXfca8Sqk1tvbfDzNkOAnLN572vkbhUnLfcqcfouRXlUl2DYmG+dCoYuWw4/co",
      "26: ahwsslCKM3xGY4ax9Q==",
      "",
      "[Added Lines]",
      "2: MIIEoTCCA4mgAwIBAgIUfOq/vQ8mjLRgSYL45lUeRsi92lQwDQYJKoZIhvcNAQEL",
      "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjMxMTE0MjMxODQwWhcNMjUx",
      "6: MTEzMjMxODQwWjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
      "10: hvcNAQEBBQADggEPADCCAQoCggEBAL0rleTUkmUs7g/PA9skuWZoa6RoK/NfwwfC",
      "11: WniKgiX+yRZcBy9//6HlOD3jLezD6tp+smh1UzIu3r69/r0eDjA+PsxQKDFH69LJ",
      "12: 74CaFtx9rjapY3VNwuE3jNclcKzDnjNVHrvND+YAIkLhRbXyBqg3n7T1C2wtVIs5",
      "13: zOy79iu97vVuX744IDsIuWUWPpFImfgdELeAByRq8IN333jljTf3pN3GfjDf9aKL",
      "14: M6jTGRitNVPY2mOe6LpkUntHs42weUBCZ2B39c8olXWeEoCJL35ENuJ/JlxpamP+",
      "15: OlK/eShorsFE+UH8tYRMeNkb8ZEdFHohYQGO8WJ5VBw4d47loRsCAwEAAaOB8zCB",
      "16: 8DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
      "17: AgYIKwYBBQUHAwEwdAYDVR0RBG0wa4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
      "19: Lmx5ZnQuY29thwQBAgMEhxAAAAABAAIAAwAAAAAAAAAEMB0GA1UdDgQWBBTl8J5P",
      "20: CF97S4cY6TytejTb3sngmTAfBgNVHSMEGDAWgBQdDTmYdOz7TqwMpoOli3Dmj78y",
      "21: gjANBgkqhkiG9w0BAQsFAAOCAQEAsMuSPKvSx/uDRIHWNQhUWSHfa4nfonyGBmnV",
      "22: VvC7Xatq3kZ1MCedzxHbqOOdlO4cSVq+eOHlVzWJUsJSj1J8hcVh3vZp6GFoRZgU",
      "23: F93g2dlgkmEEqEFB4qI71PwjC6amEV+xY21v/QPEouI1VumUnMnAV81G5uJDzPtn",
      "24: gmNyM6hnvKGufpaovZFeXsB0ZUnYPz+4QdKwHTErsV8uUdeJUhFHg1NjCmrqQAmm",
      "25: PG0G9JOi/dY/X5/LfGomAb7E+wuJFKHFP7gE6JvWi5M1Y1IlW1tCgN3dSCdCaUZm",
      "26: JPKWR3x+gYOFHfKNpdG/zRwOrClgISmDzZiXXFSHCn95tFocXA==",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h": [
      "File: test/config/integration/certs/clientcert_hash.h -> test/config/integration/certs/clientcert_hash.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #pragma once",
      "",
      "[Removed Lines]",
      "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"4A:FD:3A:AE:4B:36:08:A6:CB:41:4F:20:8A:86:1F:3B:43:6F:2F:\"",
      "5:                                          \"12:49:82:8D:9F:F6:FA:53:4D:23:26:FB:43\";",
      "",
      "[Added Lines]",
      "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"F6:31:41:AA:8E:E3:D7:AC:AE:A8:AF:AD:C9:11:CD:0A:83:72:03:\"",
      "5:                                          \"6D:4B:B3:72:4F:6F:71:E1:ED:18:5B:92:AA\";",
      "",
      "---------------"
    ],
    "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem": [
      "File: test/config/integration/certs/clientkey.pem -> test/config/integration/certs/clientkey.pem",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: -----BEGIN RSA PRIVATE KEY-----",
      "2: MIIEpAIBAAKCAQEA7A5D3pTadhwD6VXl4WYerCRRUf9vnCf8VeAAsF9PapKfanMy",
      "3: aqPdEd5uo3gju6JEY+aTt5UfGS1b/K0UN2T4DBsYQ4/y9aX3NHvem94pyEdVJ1I0",
      "4: nhGRemAMtlgMMOP8lDE3MPA8Pjd4hTD1IqP4zD2dNG/SGbf2GGGGMGa859t1aNA8",
      "5: yy5IOoQA8YTTo+mKtN3Bk1Ky4GN++jrN2cnFODN38J/Uog11rg/GSXD0z0K4pAx4",
      "6: vBV/AwM14ja4nuSfV2mw6FIMFTssSV5JYYYCVzJwPMu7L/n+spx0430wpQr7zasn",
      "7: 5wwToj4NipLU3P7Bj23x9qtcu4YrjWfQbiqvUwIDAQABAoIBAQDKY5ixODLuXSrF",
      "8: Xo6QaLwXn7PReA67dlUVU8+DaNRwbXIdFNO/NuuOLIXzxkfs0j2M4d744fQd5BQg",
      "9: Wk0hCYLa7kgpdTw8faWr7CB6x0pPm0lZQ1Q1yp5OrBd6J5ecO30NmfzWCsO8HFdK",
      "10: 6yTiJHBmvNUSZmVfA6kOUl95FD0XFB7J/4MPmE0UqEg5IhoWxpH9cEV8yll/bZZL",
      "11: FHzA1cfwjtcHp5kHm/7IYlWqpShpdsquMmZt8vHFaoGvT5pms/AtAFjjDcW5dFpZ",
      "12: GipS5D/3oPMXWbhrzMoIe8ERVBmlKPVoUmxUNIomgRSTP6/+mgcgojRRqcLW3l0W",
      "13: KXi4i1dhAoGBAPmgVd+2K5vox09EbYaD1KAZpwuW61PQ6RI3wU5YCf84FoNAzK+e",
      "14: KHSI+5Vo7JkwwiP7MSIJhiODG9VRnfou06NPEY4jllcMXp73PVGhOzsnHTqsbgps",
      "15: Yg9tXsX5jQDx60yIOHf7halAz3vpEldQ6YecLscYV0Oz5i84gl/jee5JAoGBAPIV",
      "16: Ofuf88WjErvuAxqIJWx85afr4B8YfChKHIVEx1eI6o89xuB16FjFzKAhHe9SJdfk",
      "17: YVOwYD/9MRZ5+ZZAsRrKTHbD3VX20c0ECX9++/Sz2LGMewgvqiscpfGzDTsTJIVA",
      "18: Ep31IAXmAUsmBAQAbuXxtbpKgU8Wi3mSp4nFzKC7AoGAUlpgGkbqSixYnMERdSBG",
      "19: 5G6yGnO2vVcdnWIBhwwqeCWT38df/8wowpFylo8gB0X7to0nX3hO5aZaZ1zexmvu",
      "20: bGEohIEfFybAjKc6dpS/irtTvEiooQ2yqC5H5v52U0p8eyoxnvu+0+DK0rFI2L+b",
      "21: 255eHFbeazqNhSSadnIAhukCgYEAtfKAPv/sb0nupbLxQDq9rfl9fqVJMPXtMzbo",
      "22: kr2r+b2dVgW/eSsFc9tOvbfGUP50FPzAre7tmIqLH3KTxXtf4VvU9pqlu5uj+iwj",
      "23: m2Dsq/GUV3XXbsKsanTAwJWrxw/PLhuHIpN++w/xPvMWp49PyqHNzXN8Ft5B/CDe",
      "24: rS0ubEsCgYA5kvmEDFYLF4TU7xg3QJ08+6+tJ+HZdvCBzE7RGJD8l5ZfpJuE6s9E",
      "25: aW09E+65hSMaE85MpiM/s08quiMQeR6i7UWeN4GwoQznH1f9zUAuyP1J1Iv2knj7",
      "26: lZ+oGk0EgnjkiIxo3ppAoKGz2/9Oi09lsEbdIBHvC56DAu44uOP50A==",
      "27: -----END RSA PRIVATE KEY-----",
      "",
      "[Added Lines]",
      "1: -----BEGIN PRIVATE KEY-----",
      "2: MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC9K5Xk1JJlLO4P",
      "3: zwPbJLlmaGukaCvzX8MHwlp4ioIl/skWXAcvf/+h5Tg94y3sw+rafrJodVMyLt6+",
      "4: vf69Hg4wPj7MUCgxR+vSye+Amhbcfa42qWN1TcLhN4zXJXCsw54zVR67zQ/mACJC",
      "5: 4UW18gaoN5+09QtsLVSLOczsu/Yrve71bl++OCA7CLllFj6RSJn4HRC3gAckavCD",
      "6: d9945Y0396Tdxn4w3/WiizOo0xkYrTVT2Npjnui6ZFJ7R7ONsHlAQmdgd/XPKJV1",
      "7: nhKAiS9+RDbifyZcaWpj/jpSv3koaK7BRPlB/LWETHjZG/GRHRR6IWEBjvFieVQc",
      "8: OHeO5aEbAgMBAAECggEARVEny2KDRFSq5RsPyCjUUOy5aNSNKlBwSDMU8K+cUizi",
      "9: 5XESZvrpopq6OZ850FTYBXlAiZtYQX7AOzemlQji3RWp8Db9C1XV2XcKbl7IOsJI",
      "10: 6Jm4Kp80Zk9zKdD70SqbGSc7LEjPZxGsfEJMx4donhJH0MisB1cy8BNdfm+/nDYK",
      "11: NsezfOYAD4UkX1NcrdfwLsWimZHPifwxL+va5cV3FiWO3S861/aE0pLhh+AJFYGI",
      "12: 3lEZxr6Gh+uaARcV4YNZPogYbrc8wJWP/6uR8pDwjqS8aUTBfyo1wUDd6bTvlQDv",
      "13: +nKBiVjmWPgY6TlZ/Okp+H28fO3zqoXExE6KJamxmQKBgQDzV5jIemNDUrxodc1i",
      "14: AQIchTbchvGiSpLyS2PY1W0vyYpyc5mugvzgaHPVEtaQTtR+QHWrYEFksOBZeIqX",
      "15: rQGTDk6jGWBzI7qa/itqr9jydZsMYgJ7eqGpiSsiD0ka65xO+Ho6FkZAV11+qPyE",
      "16: QmPD3Izj/58pSod4PADFQSP18wKBgQDHAp9Sd9fGCn/RHRVyf1nao2ZeKCQUDyyj",
      "17: g+uCIswhE8lT7C5K76FPxZrV6enpTkLjEnMdRrPl4fQ5xl0SPAR/gaZXhM1U4sjo",
      "18: w0dWITeMHwR7HqwbpumNbMccZMGA7o1Ua/k7GPIyD2UE7hiJyJRNyfeN09/cC18p",
      "19: EjHcSs4qOQKBgCwU0jh+8zxe4IKL1IjMZfWErEuGpn8fwz7hKVU+VGkzuUDCcDSM",
      "20: xgJg6ZrPrs61eQjl5GsHJNF4uSt8Cp8vV/mrvdMN5cr1zfgF0xegg0xowY2cs5Zq",
      "21: wJ5Vmtqwqi2WQNqNaJbdMhy1ttobAqNy41+3tE4ZIFv6hE/jjsAs7LbBAoGAXy64",
      "22: 5uec0wKYiXqglGemoTS/tE78mn97eSWSUWa1PSjKhRIUPhEIlS/M030SPF0LDrH3",
      "23: TsxPJKcCeVOPljYQbK+k0H0a+/uP3gvwJZiziZgYO467AGq/j720Kbdi+XifLf6K",
      "24: cKKIzDqitU3vfI7rp5zugu4QRp1FwU4LfPJmUrkCgYAzzBz3K7jg4JPdY7Od22SQ",
      "25: F/eToChPu60B9uQciR6gGwR1ry2sVSlK0Y1DMFMBCFEqPfJFO4OwZP0NWbRd13X1",
      "26: 9nUvpVoGxxJ51fIdMrPPm0G6f8HS79JhOGUp9tYsQ+LPCcnrrH2ZDGQYxZsSXqbe",
      "27: 5qc2rk4Sgt8Ua/oVrxghzA==",
      "28: -----END PRIVATE KEY-----",
      "",
      "---------------"
    ],
    "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
      "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #include \"source/common/buffer/buffer_impl.h\"",
      "12: #include \"source/common/event/dispatcher_impl.h\"",
      "13: #include \"source/common/listener_manager/connection_handler_impl.h\"",
      "14: #include \"source/common/network/connection_balancer_impl.h\"",
      "15: #include \"source/common/network/listen_socket_impl.h\"",
      "16: #include \"source/common/network/proxy_protocol_filter_state.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: #include \"source/common/network/address_impl.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "236:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
      "237:                          TestUtility::ipTestParamsToString);",
      "239: TEST_P(ProxyProtocolTest, V1Basic) {",
      "240:   connect();",
      "241:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "240: TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {",
      "241:   connect(false);",
      "242:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
      "243:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
      "244:   expectProxyProtoError();",
      "245: }",
      "247: TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {",
      "248:   connect(false);",
      "249:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
      "250:   write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");",
      "251:   expectProxyProtoError();",
      "252: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "390:   disconnect();",
      "391: }",
      "393: TEST_P(ProxyProtocolTest, V2UnsupportedAF) {",
      "395:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "408: TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {",
      "410:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
      "411:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,",
      "412:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',",
      "413:                                 'r',  'e',  ' ',  'd',  'a',  't',  'a'};",
      "415:   connect(false);",
      "416:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
      "417:   write(buffer, sizeof(buffer));",
      "418:   expectProxyProtoError();",
      "419: }",
      "421: TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {",
      "423:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
      "424:                                 0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,",
      "425:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,",
      "426:                                 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,",
      "427:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',",
      "428:                                 'e',  ' ',  'd',  'a',  't',  'a'};",
      "430:   connect(false);",
      "431:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
      "432:   write(buffer, sizeof(buffer));",
      "433:   expectProxyProtoError();",
      "434: }",
      "",
      "---------------"
    ],
    "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc": [
      "File: test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc -> test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "462:   checkStats();",
      "463: }",
      "465: TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {",
      "467:   auto custom_validator_config = std::make_unique<envoy::config::core::v3::TypedExtensionConfig>(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "465: TEST_P(SslIntegrationTest, LogPeerIpSanUnsupportedIpVersion) {",
      "466:   useListenerAccessLog(\"%DOWNSTREAM_PEER_IP_SAN%\");",
      "467:   config_helper_.addFilter(\"name: sni-to-header-filter\");",
      "468:   ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {",
      "469:     return makeSslClientConnection(ClientSslTransportOptions().setSni(\"host.com\"));",
      "470:   };",
      "471:   initialize();",
      "472:   codec_client_ = makeHttpConnection(",
      "473:       makeSslClientConnection(ClientSslTransportOptions().setSni(\"www.host.com\")));",
      "477:   auto disabler = (version_ == Network::Address::IpVersion::v4)",
      "478:                       ? Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest",
      "479:                       : Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest;",
      "480:   Cleanup cleaner(disabler(true));",
      "482:   Http::TestRequestHeaderMapImpl request_headers{",
      "483:       {\":method\", \"GET\"}, {\":path\", \"/\"}, {\":scheme\", \"https\"}, {\":authority\", \"host.com\"}};",
      "484:   auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "485:   waitForNextUpstreamRequest();",
      "487:   EXPECT_EQ(\"www.host.com\", upstream_request_->headers()",
      "488:                                 .get(Http::LowerCaseString(\"x-envoy-client-sni\"))[0]",
      "489:                                 ->value()",
      "490:                                 .getStringView());",
      "492:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
      "493:   upstream_request_->encodeHeaders(response_headers, true);",
      "494:   RELEASE_ASSERT(response->waitForEndStream(), \"unexpected timeout\");",
      "495:   codec_client_->close();",
      "497:   checkStats();",
      "498:   auto result = waitForAccessLog(listener_access_log_name_);",
      "499:   if (version_ == Network::Address::IpVersion::v4) {",
      "500:     EXPECT_EQ(result, \"1.2.3.4\");",
      "501:   } else {",
      "502:     EXPECT_EQ(result, \"0:1:2:3::4\");",
      "503:   }",
      "504: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a683c05870786a2bfce557492d8b0617967a0081",
      "candidate_info": {
        "commit_hash": "a683c05870786a2bfce557492d8b0617967a0081",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/a683c05870786a2bfce557492d8b0617967a0081",
        "files": [
          "changelogs/current.yaml",
          "source/common/network/BUILD",
          "source/common/network/address_impl.cc",
          "source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "source/extensions/transport_sockets/tls/utility.cc",
          "source/extensions/transport_sockets/tls/utility.h",
          "test/config/integration/certs/clientcert.cfg",
          "test/config/integration/certs/clientcert.pem",
          "test/config/integration/certs/clientcert_hash.h",
          "test/config/integration/certs/clientkey.pem",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
        ],
        "message": "Fix crash when proxy protocol receives an address type that isn't supported by the operating system\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
          "source/common/network/address_impl.h||source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
          "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
          "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
          "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
          "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
          "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
            "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
            "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
            "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
            "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
            "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
            "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
          ],
          "candidate": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
            "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
            "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
            "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
            "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
            "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
            "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
          "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:   return {start, end};",
          "213: }",
          "215: absl::Status Ipv4Instance::validateProtocolSupported() {",
          "216:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
          "218:     return absl::OkStatus();",
          "219:   }",
          "220:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "217:   if (supported) {",
          "",
          "[Added Lines]",
          "215: namespace {",
          "216: bool force_ipv4_unsupported_for_test = false;",
          "217: }",
          "219: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "220:   bool old_val = force_ipv4_unsupported_for_test;",
          "221:   force_ipv4_unsupported_for_test = new_val;",
          "222:   return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });",
          "223: }",
          "227:   if (supported && !force_ipv4_unsupported_for_test) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:   initHelper(address, v6only);",
          "325: }",
          "327: absl::Status Ipv6Instance::validateProtocolSupported() {",
          "328:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
          "330:     return absl::OkStatus();",
          "331:   }",
          "332:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "329:   if (supported) {",
          "",
          "[Added Lines]",
          "337: namespace {",
          "338: bool force_ipv6_unsupported_for_test = false;",
          "339: }",
          "341: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "342:   bool old_val = force_ipv6_unsupported_for_test;",
          "343:   force_ipv6_unsupported_for_test = new_val;",
          "344:   return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });",
          "345: }",
          "349:   if (supported && !force_ipv6_unsupported_for_test) {",
          "",
          "---------------"
        ],
        "source/common/network/address_impl.h||source/common/network/address_impl.h": [
          "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"envoy/network/socket.h\"",
          "13: #include \"source/common/common/assert.h\"",
          "14: #include \"source/common/common/statusor.h\"",
          "16: namespace Envoy {",
          "17: namespace Network {",
          "18: namespace Address {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"source/common/common/cleanup.h\"",
          "22: #define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   static absl::Status validateProtocolSupported();",
          "147: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   static absl::Status validateProtocolSupported();",
          "229: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:         la4.sin_family = AF_INET;",
          "277:         la4.sin_port = v4->dst_port;",
          "278:         la4.sin_addr.s_addr = v4->dst_addr;",
          "284:         return true;",
          "285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
          "286:         PACKED_STRUCT(struct pp_ipv6_addr {",
          "",
          "[Removed Lines]",
          "279:         proxy_protocol_header_.emplace(",
          "280:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "281:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "282:                        std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "283:                        std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "",
          "[Added Lines]",
          "280:         TRY_NEEDS_AUDIT_ADDRESS {",
          "283:           proxy_protocol_header_.emplace(WireHeader{",
          "284:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "285:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "286:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "287:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "288:         }",
          "289:         END_TRY CATCH(const EnvoyException& e, {",
          "290:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "291:           return false;",
          "292:         });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         la6.sin6_port = v6->dst_port;",
          "303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
          "310:         return true;",
          "311:       }",
          "312:     }",
          "",
          "[Removed Lines]",
          "305:         proxy_protocol_header_.emplace(WireHeader{",
          "306:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "307:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "308:             std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "309:             std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "",
          "[Added Lines]",
          "315:         TRY_NEEDS_AUDIT_ADDRESS {",
          "316:           proxy_protocol_header_.emplace(WireHeader{",
          "317:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "318:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "319:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "320:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "321:         }",
          "322:         END_TRY CATCH(const EnvoyException& e, {",
          "325:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "326:           return false;",
          "327:         });",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc": [
          "File: source/extensions/transport_sockets/tls/connection_info_impl_base.cc -> source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     ASSERT(cached_ip_san_peer_certificate_.empty());",
          "186:     return cached_ip_san_peer_certificate_;",
          "187:   }",
          "189:   return cached_ip_san_peer_certificate_;",
          "190: }",
          "",
          "[Removed Lines]",
          "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);",
          "",
          "[Added Lines]",
          "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc": [
          "File: source/extensions/transport_sockets/tls/utility.cc -> source/extensions/transport_sockets/tls/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   return \"\";",
          "168: }",
          "171:   std::vector<std::string> subject_alt_names;",
          "172:   bssl::UniquePtr<GENERAL_NAMES> san_names(",
          "173:       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));",
          "",
          "[Removed Lines]",
          "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
          "",
          "[Added Lines]",
          "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   }",
          "177:   for (const GENERAL_NAME* san : san_names.get()) {",
          "178:     if (san->type == type) {",
          "180:     }",
          "181:   }",
          "182:   return subject_alt_names;",
          "",
          "[Removed Lines]",
          "179:       subject_alt_names.push_back(generalNameAsString(san));",
          "",
          "[Added Lines]",
          "179:       if (skip_unsupported) {",
          "182:         TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }",
          "183:         END_TRY CATCH(const EnvoyException& e,",
          "184:                       { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });",
          "185:       } else {",
          "186:         subject_alt_names.push_back(generalNameAsString(san));",
          "187:       }",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h": [
          "File: source/extensions/transport_sockets/tls/utility.h -> source/extensions/transport_sockets/tls/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "57: std::vector<std::string> getSubjectAltNames(X509& cert, int type);",
          "",
          "[Added Lines]",
          "59: std::vector<std::string> getSubjectAltNames(X509& cert, int type, bool skip_unsupported = false);",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg": [
          "File: test/config/integration/certs/clientcert.cfg -> test/config/integration/certs/clientcert.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: URI.2 = http://frontend.lyft.com",
          "40: DNS.1 = lyft.com",
          "41: DNS.2 = www.lyft.com",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: IP.1 = 1.2.3.4",
          "43: IP.2 = 0:1:2:3::4",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem": [
          "File: test/config/integration/certs/clientcert.pem -> test/config/integration/certs/clientcert.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: -----BEGIN CERTIFICATE-----",
          "3: BQAwdjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM",
          "4: DVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsMEEx5ZnQgRW5n",
          "7: FjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsM",
          "8: EEx5ZnQgRW5naW5lZXJpbmcxGzAZBgNVBAMMElRlc3QgRnJvbnRlbmQgVGVhbTEl",
          "9: MCMGCSqGSIb3DQEJARYWZnJvbnRlbmQtdGVhbUBseWZ0LmNvbTCCASIwDQYJKoZI",
          "18: bmQtdGVhbYYYaHR0cDovL2Zyb250ZW5kLmx5ZnQuY29tgghseWZ0LmNvbYIMd3d3",
          "27: -----END CERTIFICATE-----",
          "",
          "[Removed Lines]",
          "2: MIIEiTCCA3GgAwIBAgIUT9Wze0Fvw/pMvqAmPJjlD7HNjZAwDQYJKoZIhvcNAQEL",
          "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjIwNDA3MTY0NjM1WhcNMjQw",
          "6: NDA2MTY0NjM1WjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
          "10: hvcNAQEBBQADggEPADCCAQoCggEBAOwOQ96U2nYcA+lV5eFmHqwkUVH/b5wn/FXg",
          "11: ALBfT2qSn2pzMmqj3RHebqN4I7uiRGPmk7eVHxktW/ytFDdk+AwbGEOP8vWl9zR7",
          "12: 3pveKchHVSdSNJ4RkXpgDLZYDDDj/JQxNzDwPD43eIUw9SKj+Mw9nTRv0hm39hhh",
          "13: hjBmvOfbdWjQPMsuSDqEAPGE06PpirTdwZNSsuBjfvo6zdnJxTgzd/Cf1KINda4P",
          "14: xklw9M9CuKQMeLwVfwMDNeI2uJ7kn1dpsOhSDBU7LEleSWGGAlcycDzLuy/5/rKc",
          "15: dON9MKUK+82rJ+cME6I+DYqS1Nz+wY9t8farXLuGK41n0G4qr1MCAwEAAaOB2zCB",
          "16: 2DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
          "17: AgYIKwYBBQUHAwEwXAYDVR0RBFUwU4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
          "19: Lmx5ZnQuY29tMB0GA1UdDgQWBBROWpBWXFbgQUweTJcDDdEtGxJ6wzAfBgNVHSME",
          "20: GDAWgBQdDTmYdOz7TqwMpoOli3Dmj78ygjANBgkqhkiG9w0BAQsFAAOCAQEALyDC",
          "21: CJ2V30VRqf/vHnv4hocaNvkbg2XqSczsNsXQB9Oh15y2nrTu8nIlktJeMCwgYKB3",
          "22: tyuIYADw2c0HKmFshOiNM3P1taM+Gljx/OeyhMq/dgKTF0rX7w3vOoWrvW7o0cDJ",
          "23: gBzDAmPJegrIlAqfb97MOcLtBlk9vjh7ukh8BSRI+5Hdj5Gb8Y6tQvmiqzm5yx5L",
          "24: Swz7im1BIGwk4Hq82JO20egDYCn9zhmuDIEJGtRbl0ymcfdaC4oKqiqU/CrynaAo",
          "25: SkNXfca8Sqk1tvbfDzNkOAnLN572vkbhUnLfcqcfouRXlUl2DYmG+dCoYuWw4/co",
          "26: ahwsslCKM3xGY4ax9Q==",
          "",
          "[Added Lines]",
          "2: MIIEoTCCA4mgAwIBAgIUfOq/vQ8mjLRgSYL45lUeRsi92lQwDQYJKoZIhvcNAQEL",
          "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjMxMTE0MjMxODQwWhcNMjUx",
          "6: MTEzMjMxODQwWjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
          "10: hvcNAQEBBQADggEPADCCAQoCggEBAL0rleTUkmUs7g/PA9skuWZoa6RoK/NfwwfC",
          "11: WniKgiX+yRZcBy9//6HlOD3jLezD6tp+smh1UzIu3r69/r0eDjA+PsxQKDFH69LJ",
          "12: 74CaFtx9rjapY3VNwuE3jNclcKzDnjNVHrvND+YAIkLhRbXyBqg3n7T1C2wtVIs5",
          "13: zOy79iu97vVuX744IDsIuWUWPpFImfgdELeAByRq8IN333jljTf3pN3GfjDf9aKL",
          "14: M6jTGRitNVPY2mOe6LpkUntHs42weUBCZ2B39c8olXWeEoCJL35ENuJ/JlxpamP+",
          "15: OlK/eShorsFE+UH8tYRMeNkb8ZEdFHohYQGO8WJ5VBw4d47loRsCAwEAAaOB8zCB",
          "16: 8DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
          "17: AgYIKwYBBQUHAwEwdAYDVR0RBG0wa4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
          "19: Lmx5ZnQuY29thwQBAgMEhxAAAAABAAIAAwAAAAAAAAAEMB0GA1UdDgQWBBTl8J5P",
          "20: CF97S4cY6TytejTb3sngmTAfBgNVHSMEGDAWgBQdDTmYdOz7TqwMpoOli3Dmj78y",
          "21: gjANBgkqhkiG9w0BAQsFAAOCAQEAsMuSPKvSx/uDRIHWNQhUWSHfa4nfonyGBmnV",
          "22: VvC7Xatq3kZ1MCedzxHbqOOdlO4cSVq+eOHlVzWJUsJSj1J8hcVh3vZp6GFoRZgU",
          "23: F93g2dlgkmEEqEFB4qI71PwjC6amEV+xY21v/QPEouI1VumUnMnAV81G5uJDzPtn",
          "24: gmNyM6hnvKGufpaovZFeXsB0ZUnYPz+4QdKwHTErsV8uUdeJUhFHg1NjCmrqQAmm",
          "25: PG0G9JOi/dY/X5/LfGomAb7E+wuJFKHFP7gE6JvWi5M1Y1IlW1tCgN3dSCdCaUZm",
          "26: JPKWR3x+gYOFHfKNpdG/zRwOrClgISmDzZiXXFSHCn95tFocXA==",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h": [
          "File: test/config/integration/certs/clientcert_hash.h -> test/config/integration/certs/clientcert_hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #pragma once",
          "",
          "[Removed Lines]",
          "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"4A:FD:3A:AE:4B:36:08:A6:CB:41:4F:20:8A:86:1F:3B:43:6F:2F:\"",
          "5:                                          \"12:49:82:8D:9F:F6:FA:53:4D:23:26:FB:43\";",
          "",
          "[Added Lines]",
          "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"F6:31:41:AA:8E:E3:D7:AC:AE:A8:AF:AD:C9:11:CD:0A:83:72:03:\"",
          "5:                                          \"6D:4B:B3:72:4F:6F:71:E1:ED:18:5B:92:AA\";",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem": [
          "File: test/config/integration/certs/clientkey.pem -> test/config/integration/certs/clientkey.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: -----BEGIN RSA PRIVATE KEY-----",
          "2: MIIEpAIBAAKCAQEA7A5D3pTadhwD6VXl4WYerCRRUf9vnCf8VeAAsF9PapKfanMy",
          "3: aqPdEd5uo3gju6JEY+aTt5UfGS1b/K0UN2T4DBsYQ4/y9aX3NHvem94pyEdVJ1I0",
          "4: nhGRemAMtlgMMOP8lDE3MPA8Pjd4hTD1IqP4zD2dNG/SGbf2GGGGMGa859t1aNA8",
          "5: yy5IOoQA8YTTo+mKtN3Bk1Ky4GN++jrN2cnFODN38J/Uog11rg/GSXD0z0K4pAx4",
          "6: vBV/AwM14ja4nuSfV2mw6FIMFTssSV5JYYYCVzJwPMu7L/n+spx0430wpQr7zasn",
          "7: 5wwToj4NipLU3P7Bj23x9qtcu4YrjWfQbiqvUwIDAQABAoIBAQDKY5ixODLuXSrF",
          "8: Xo6QaLwXn7PReA67dlUVU8+DaNRwbXIdFNO/NuuOLIXzxkfs0j2M4d744fQd5BQg",
          "9: Wk0hCYLa7kgpdTw8faWr7CB6x0pPm0lZQ1Q1yp5OrBd6J5ecO30NmfzWCsO8HFdK",
          "10: 6yTiJHBmvNUSZmVfA6kOUl95FD0XFB7J/4MPmE0UqEg5IhoWxpH9cEV8yll/bZZL",
          "11: FHzA1cfwjtcHp5kHm/7IYlWqpShpdsquMmZt8vHFaoGvT5pms/AtAFjjDcW5dFpZ",
          "12: GipS5D/3oPMXWbhrzMoIe8ERVBmlKPVoUmxUNIomgRSTP6/+mgcgojRRqcLW3l0W",
          "13: KXi4i1dhAoGBAPmgVd+2K5vox09EbYaD1KAZpwuW61PQ6RI3wU5YCf84FoNAzK+e",
          "14: KHSI+5Vo7JkwwiP7MSIJhiODG9VRnfou06NPEY4jllcMXp73PVGhOzsnHTqsbgps",
          "15: Yg9tXsX5jQDx60yIOHf7halAz3vpEldQ6YecLscYV0Oz5i84gl/jee5JAoGBAPIV",
          "16: Ofuf88WjErvuAxqIJWx85afr4B8YfChKHIVEx1eI6o89xuB16FjFzKAhHe9SJdfk",
          "17: YVOwYD/9MRZ5+ZZAsRrKTHbD3VX20c0ECX9++/Sz2LGMewgvqiscpfGzDTsTJIVA",
          "18: Ep31IAXmAUsmBAQAbuXxtbpKgU8Wi3mSp4nFzKC7AoGAUlpgGkbqSixYnMERdSBG",
          "19: 5G6yGnO2vVcdnWIBhwwqeCWT38df/8wowpFylo8gB0X7to0nX3hO5aZaZ1zexmvu",
          "20: bGEohIEfFybAjKc6dpS/irtTvEiooQ2yqC5H5v52U0p8eyoxnvu+0+DK0rFI2L+b",
          "21: 255eHFbeazqNhSSadnIAhukCgYEAtfKAPv/sb0nupbLxQDq9rfl9fqVJMPXtMzbo",
          "22: kr2r+b2dVgW/eSsFc9tOvbfGUP50FPzAre7tmIqLH3KTxXtf4VvU9pqlu5uj+iwj",
          "23: m2Dsq/GUV3XXbsKsanTAwJWrxw/PLhuHIpN++w/xPvMWp49PyqHNzXN8Ft5B/CDe",
          "24: rS0ubEsCgYA5kvmEDFYLF4TU7xg3QJ08+6+tJ+HZdvCBzE7RGJD8l5ZfpJuE6s9E",
          "25: aW09E+65hSMaE85MpiM/s08quiMQeR6i7UWeN4GwoQznH1f9zUAuyP1J1Iv2knj7",
          "26: lZ+oGk0EgnjkiIxo3ppAoKGz2/9Oi09lsEbdIBHvC56DAu44uOP50A==",
          "27: -----END RSA PRIVATE KEY-----",
          "",
          "[Added Lines]",
          "1: -----BEGIN PRIVATE KEY-----",
          "2: MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC9K5Xk1JJlLO4P",
          "3: zwPbJLlmaGukaCvzX8MHwlp4ioIl/skWXAcvf/+h5Tg94y3sw+rafrJodVMyLt6+",
          "4: vf69Hg4wPj7MUCgxR+vSye+Amhbcfa42qWN1TcLhN4zXJXCsw54zVR67zQ/mACJC",
          "5: 4UW18gaoN5+09QtsLVSLOczsu/Yrve71bl++OCA7CLllFj6RSJn4HRC3gAckavCD",
          "6: d9945Y0396Tdxn4w3/WiizOo0xkYrTVT2Npjnui6ZFJ7R7ONsHlAQmdgd/XPKJV1",
          "7: nhKAiS9+RDbifyZcaWpj/jpSv3koaK7BRPlB/LWETHjZG/GRHRR6IWEBjvFieVQc",
          "8: OHeO5aEbAgMBAAECggEARVEny2KDRFSq5RsPyCjUUOy5aNSNKlBwSDMU8K+cUizi",
          "9: 5XESZvrpopq6OZ850FTYBXlAiZtYQX7AOzemlQji3RWp8Db9C1XV2XcKbl7IOsJI",
          "10: 6Jm4Kp80Zk9zKdD70SqbGSc7LEjPZxGsfEJMx4donhJH0MisB1cy8BNdfm+/nDYK",
          "11: NsezfOYAD4UkX1NcrdfwLsWimZHPifwxL+va5cV3FiWO3S861/aE0pLhh+AJFYGI",
          "12: 3lEZxr6Gh+uaARcV4YNZPogYbrc8wJWP/6uR8pDwjqS8aUTBfyo1wUDd6bTvlQDv",
          "13: +nKBiVjmWPgY6TlZ/Okp+H28fO3zqoXExE6KJamxmQKBgQDzV5jIemNDUrxodc1i",
          "14: AQIchTbchvGiSpLyS2PY1W0vyYpyc5mugvzgaHPVEtaQTtR+QHWrYEFksOBZeIqX",
          "15: rQGTDk6jGWBzI7qa/itqr9jydZsMYgJ7eqGpiSsiD0ka65xO+Ho6FkZAV11+qPyE",
          "16: QmPD3Izj/58pSod4PADFQSP18wKBgQDHAp9Sd9fGCn/RHRVyf1nao2ZeKCQUDyyj",
          "17: g+uCIswhE8lT7C5K76FPxZrV6enpTkLjEnMdRrPl4fQ5xl0SPAR/gaZXhM1U4sjo",
          "18: w0dWITeMHwR7HqwbpumNbMccZMGA7o1Ua/k7GPIyD2UE7hiJyJRNyfeN09/cC18p",
          "19: EjHcSs4qOQKBgCwU0jh+8zxe4IKL1IjMZfWErEuGpn8fwz7hKVU+VGkzuUDCcDSM",
          "20: xgJg6ZrPrs61eQjl5GsHJNF4uSt8Cp8vV/mrvdMN5cr1zfgF0xegg0xowY2cs5Zq",
          "21: wJ5Vmtqwqi2WQNqNaJbdMhy1ttobAqNy41+3tE4ZIFv6hE/jjsAs7LbBAoGAXy64",
          "22: 5uec0wKYiXqglGemoTS/tE78mn97eSWSUWa1PSjKhRIUPhEIlS/M030SPF0LDrH3",
          "23: TsxPJKcCeVOPljYQbK+k0H0a+/uP3gvwJZiziZgYO467AGq/j720Kbdi+XifLf6K",
          "24: cKKIzDqitU3vfI7rp5zugu4QRp1FwU4LfPJmUrkCgYAzzBz3K7jg4JPdY7Od22SQ",
          "25: F/eToChPu60B9uQciR6gGwR1ry2sVSlK0Y1DMFMBCFEqPfJFO4OwZP0NWbRd13X1",
          "26: 9nUvpVoGxxJ51fIdMrPPm0G6f8HS79JhOGUp9tYsQ+LPCcnrrH2ZDGQYxZsSXqbe",
          "27: 5qc2rk4Sgt8Ua/oVrxghzA==",
          "28: -----END PRIVATE KEY-----",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"source/common/buffer/buffer_impl.h\"",
          "12: #include \"source/common/event/dispatcher_impl.h\"",
          "13: #include \"source/common/listener_manager/connection_handler_impl.h\"",
          "14: #include \"source/common/network/connection_balancer_impl.h\"",
          "15: #include \"source/common/network/listen_socket_impl.h\"",
          "16: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"source/common/network/address_impl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "237:                          TestUtility::ipTestParamsToString);",
          "239: TEST_P(ProxyProtocolTest, V1Basic) {",
          "240:   connect();",
          "241:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {",
          "241:   connect(false);",
          "242:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "243:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "244:   expectProxyProtoError();",
          "245: }",
          "247: TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {",
          "248:   connect(false);",
          "249:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "250:   write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");",
          "251:   expectProxyProtoError();",
          "252: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:   disconnect();",
          "391: }",
          "393: TEST_P(ProxyProtocolTest, V2UnsupportedAF) {",
          "395:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408: TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {",
          "410:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "411:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,",
          "412:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',",
          "413:                                 'r',  'e',  ' ',  'd',  'a',  't',  'a'};",
          "415:   connect(false);",
          "416:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "417:   write(buffer, sizeof(buffer));",
          "418:   expectProxyProtoError();",
          "419: }",
          "421: TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {",
          "423:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "424:                                 0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,",
          "425:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,",
          "426:                                 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,",
          "427:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',",
          "428:                                 'e',  ' ',  'd',  'a',  't',  'a'};",
          "430:   connect(false);",
          "431:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "432:   write(buffer, sizeof(buffer));",
          "433:   expectProxyProtoError();",
          "434: }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc": [
          "File: test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc -> test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:   checkStats();",
          "463: }",
          "465: TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {",
          "467:   auto custom_validator_config = std::make_unique<envoy::config::core::v3::TypedExtensionConfig>(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: TEST_P(SslIntegrationTest, LogPeerIpSanUnsupportedIpVersion) {",
          "466:   useListenerAccessLog(\"%DOWNSTREAM_PEER_IP_SAN%\");",
          "467:   config_helper_.addFilter(\"name: sni-to-header-filter\");",
          "468:   ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {",
          "469:     return makeSslClientConnection(ClientSslTransportOptions().setSni(\"host.com\"));",
          "470:   };",
          "471:   initialize();",
          "472:   codec_client_ = makeHttpConnection(",
          "473:       makeSslClientConnection(ClientSslTransportOptions().setSni(\"www.host.com\")));",
          "477:   auto disabler = (version_ == Network::Address::IpVersion::v4)",
          "478:                       ? Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest",
          "479:                       : Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest;",
          "480:   Cleanup cleaner(disabler(true));",
          "482:   Http::TestRequestHeaderMapImpl request_headers{",
          "483:       {\":method\", \"GET\"}, {\":path\", \"/\"}, {\":scheme\", \"https\"}, {\":authority\", \"host.com\"}};",
          "484:   auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "485:   waitForNextUpstreamRequest();",
          "487:   EXPECT_EQ(\"www.host.com\", upstream_request_->headers()",
          "488:                                 .get(Http::LowerCaseString(\"x-envoy-client-sni\"))[0]",
          "489:                                 ->value()",
          "490:                                 .getStringView());",
          "492:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "493:   upstream_request_->encodeHeaders(response_headers, true);",
          "494:   RELEASE_ASSERT(response->waitForEndStream(), \"unexpected timeout\");",
          "495:   codec_client_->close();",
          "497:   checkStats();",
          "498:   auto result = waitForAccessLog(listener_access_log_name_);",
          "499:   if (version_ == Network::Address::IpVersion::v4) {",
          "500:     EXPECT_EQ(result, \"1.2.3.4\");",
          "501:   } else {",
          "502:     EXPECT_EQ(result, \"0:1:2:3::4\");",
          "503:   }",
          "504: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfdeedc554d109519e7f686f3fb064b7c27ca91b",
      "candidate_info": {
        "commit_hash": "cfdeedc554d109519e7f686f3fb064b7c27ca91b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/cfdeedc554d109519e7f686f3fb064b7c27ca91b",
        "files": [
          "changelogs/current.yaml",
          "source/common/network/BUILD",
          "source/common/network/address_impl.cc",
          "source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ],
        "message": "Fix crashes when proxyproto receives address type not supported by the OS\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
          "source/common/network/address_impl.h||source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ],
          "candidate": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
          "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   return std::string(start, str + BufferSize - start);",
          "212: }",
          "214: absl::Status Ipv4Instance::validateProtocolSupported() {",
          "215:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
          "217:     return absl::OkStatus();",
          "218:   }",
          "219:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "216:   if (supported) {",
          "",
          "[Added Lines]",
          "214: namespace {",
          "215: bool force_ipv4_unsupported_for_test = false;",
          "216: }",
          "218: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "219:   bool old_val = force_ipv4_unsupported_for_test;",
          "220:   force_ipv4_unsupported_for_test = new_val;",
          "221:   return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });",
          "222: }",
          "226:   if (supported && !force_ipv4_unsupported_for_test) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:   initHelper(address, v6only);",
          "324: }",
          "326: absl::Status Ipv6Instance::validateProtocolSupported() {",
          "327:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
          "329:     return absl::OkStatus();",
          "330:   }",
          "331:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "328:   if (supported) {",
          "",
          "[Added Lines]",
          "336: namespace {",
          "337: bool force_ipv6_unsupported_for_test = false;",
          "338: }",
          "340: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "341:   bool old_val = force_ipv6_unsupported_for_test;",
          "342:   force_ipv6_unsupported_for_test = new_val;",
          "343:   return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });",
          "344: }",
          "348:   if (supported && !force_ipv6_unsupported_for_test) {",
          "",
          "---------------"
        ],
        "source/common/network/address_impl.h||source/common/network/address_impl.h": [
          "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"envoy/network/socket.h\"",
          "13: #include \"source/common/common/assert.h\"",
          "14: #include \"source/common/common/statusor.h\"",
          "16: namespace Envoy {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"source/common/common/cleanup.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   static absl::Status validateProtocolSupported();",
          "147: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   static absl::Status validateProtocolSupported();",
          "229: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:         la4.sin_family = AF_INET;",
          "277:         la4.sin_port = v4->dst_port;",
          "278:         la4.sin_addr.s_addr = v4->dst_addr;",
          "284:         return true;",
          "285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
          "286:         PACKED_STRUCT(struct pp_ipv6_addr {",
          "",
          "[Removed Lines]",
          "279:         proxy_protocol_header_.emplace(",
          "280:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "281:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "282:                        std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "283:                        std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "",
          "[Added Lines]",
          "280:         try {",
          "283:           proxy_protocol_header_.emplace(WireHeader{",
          "284:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "285:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "286:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "287:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "288:         } catch (const EnvoyException& e) {",
          "289:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "290:           return false;",
          "291:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         la6.sin6_port = v6->dst_port;",
          "303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
          "310:         return true;",
          "311:       }",
          "312:     }",
          "",
          "[Removed Lines]",
          "305:         proxy_protocol_header_.emplace(WireHeader{",
          "306:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "307:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "308:             std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "309:             std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "",
          "[Added Lines]",
          "314:         try {",
          "315:           proxy_protocol_header_.emplace(WireHeader{",
          "316:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "317:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "318:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "319:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "320:         } catch (const EnvoyException& e) {",
          "323:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "324:           return false;",
          "325:         }",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"source/common/api/os_sys_calls_impl.h\"",
          "11: #include \"source/common/buffer/buffer_impl.h\"",
          "12: #include \"source/common/event/dispatcher_impl.h\"",
          "13: #include \"source/common/network/connection_balancer_impl.h\"",
          "14: #include \"source/common/network/listen_socket_impl.h\"",
          "15: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include \"source/common/network/address_impl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "235:                          TestUtility::ipTestParamsToString);",
          "237: TEST_P(ProxyProtocolTest, V1Basic) {",
          "238:   connect();",
          "239:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {",
          "239:   connect(false);",
          "240:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "241:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "242:   expectProxyProtoError();",
          "243: }",
          "245: TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {",
          "246:   connect(false);",
          "247:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "248:   write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");",
          "249:   expectProxyProtoError();",
          "250: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:   disconnect();",
          "389: }",
          "391: TEST_P(ProxyProtocolTest, V2UnsupportedAF) {",
          "393:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406: TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {",
          "408:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "409:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,",
          "410:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',",
          "411:                                 'r',  'e',  ' ',  'd',  'a',  't',  'a'};",
          "413:   connect(false);",
          "414:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "415:   write(buffer, sizeof(buffer));",
          "416:   expectProxyProtoError();",
          "417: }",
          "419: TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {",
          "421:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "422:                                 0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,",
          "423:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,",
          "424:                                 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,",
          "425:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',",
          "426:                                 'e',  ' ',  'd',  'a',  't',  'a'};",
          "428:   connect(false);",
          "429:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "430:   write(buffer, sizeof(buffer));",
          "431:   expectProxyProtoError();",
          "432: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b09657251b0b6c81f8af83425b995c19ae723614",
      "candidate_info": {
        "commit_hash": "b09657251b0b6c81f8af83425b995c19ae723614",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/b09657251b0b6c81f8af83425b995c19ae723614",
        "files": [
          "changelogs/current.yaml",
          "source/common/network/BUILD",
          "source/common/network/address_impl.cc",
          "source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "source/extensions/transport_sockets/tls/utility.cc",
          "source/extensions/transport_sockets/tls/utility.h",
          "test/config/integration/certs/clientcert.cfg",
          "test/config/integration/certs/clientcert.pem",
          "test/config/integration/certs/clientcert_hash.h",
          "test/config/integration/certs/clientkey.pem",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
        ],
        "message": "Fix crashes when using address type that isn't supported by the OS\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
          "source/common/network/address_impl.h||source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
          "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
          "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
          "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
          "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
          "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
            "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
            "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
            "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
            "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
            "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
            "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
          ],
          "candidate": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
            "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
            "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
            "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
            "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
            "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
            "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
          "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   return std::string(start, str + BufferSize - start);",
          "212: }",
          "214: absl::Status Ipv4Instance::validateProtocolSupported() {",
          "215:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
          "217:     return absl::OkStatus();",
          "218:   }",
          "219:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "216:   if (supported) {",
          "",
          "[Added Lines]",
          "214: namespace {",
          "215: bool force_ipv4_unsupported_for_test = false;",
          "216: }",
          "218: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "219:   bool old_val = force_ipv4_unsupported_for_test;",
          "220:   force_ipv4_unsupported_for_test = new_val;",
          "221:   return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });",
          "222: }",
          "226:   if (supported && !force_ipv4_unsupported_for_test) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:   initHelper(address, v6only);",
          "324: }",
          "326: absl::Status Ipv6Instance::validateProtocolSupported() {",
          "327:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
          "329:     return absl::OkStatus();",
          "330:   }",
          "331:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "328:   if (supported) {",
          "",
          "[Added Lines]",
          "336: namespace {",
          "337: bool force_ipv6_unsupported_for_test = false;",
          "338: }",
          "340: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "341:   bool old_val = force_ipv6_unsupported_for_test;",
          "342:   force_ipv6_unsupported_for_test = new_val;",
          "343:   return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });",
          "344: }",
          "348:   if (supported && !force_ipv6_unsupported_for_test) {",
          "",
          "---------------"
        ],
        "source/common/network/address_impl.h||source/common/network/address_impl.h": [
          "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"envoy/network/socket.h\"",
          "13: #include \"source/common/common/assert.h\"",
          "14: #include \"source/common/common/statusor.h\"",
          "16: namespace Envoy {",
          "17: namespace Network {",
          "18: namespace Address {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"source/common/common/cleanup.h\"",
          "22: #define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   static absl::Status validateProtocolSupported();",
          "147: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   static absl::Status validateProtocolSupported();",
          "229: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:         la4.sin_family = AF_INET;",
          "277:         la4.sin_port = v4->dst_port;",
          "278:         la4.sin_addr.s_addr = v4->dst_addr;",
          "284:         return true;",
          "285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
          "286:         PACKED_STRUCT(struct pp_ipv6_addr {",
          "",
          "[Removed Lines]",
          "279:         proxy_protocol_header_.emplace(",
          "280:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "281:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "282:                        std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "283:                        std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "",
          "[Added Lines]",
          "280:         TRY_NEEDS_AUDIT_ADDRESS {",
          "283:           proxy_protocol_header_.emplace(WireHeader{",
          "284:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "285:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "286:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "287:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "288:         }",
          "289:         END_TRY CATCH(const EnvoyException& e, {",
          "290:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "291:           return false;",
          "292:         });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         la6.sin6_port = v6->dst_port;",
          "303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
          "310:         return true;",
          "311:       }",
          "312:     }",
          "",
          "[Removed Lines]",
          "305:         proxy_protocol_header_.emplace(WireHeader{",
          "306:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "307:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "308:             std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "309:             std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "",
          "[Added Lines]",
          "315:         TRY_NEEDS_AUDIT_ADDRESS {",
          "316:           proxy_protocol_header_.emplace(WireHeader{",
          "317:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "318:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "319:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "320:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "321:         }",
          "322:         END_TRY CATCH(const EnvoyException& e, {",
          "325:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "326:           return false;",
          "327:         });",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc": [
          "File: source/extensions/transport_sockets/tls/connection_info_impl_base.cc -> source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     ASSERT(cached_ip_san_peer_certificate_.empty());",
          "186:     return cached_ip_san_peer_certificate_;",
          "187:   }",
          "189:   return cached_ip_san_peer_certificate_;",
          "190: }",
          "",
          "[Removed Lines]",
          "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);",
          "",
          "[Added Lines]",
          "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc": [
          "File: source/extensions/transport_sockets/tls/utility.cc -> source/extensions/transport_sockets/tls/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   return \"\";",
          "168: }",
          "171:   std::vector<std::string> subject_alt_names;",
          "172:   bssl::UniquePtr<GENERAL_NAMES> san_names(",
          "173:       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));",
          "",
          "[Removed Lines]",
          "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
          "",
          "[Added Lines]",
          "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   }",
          "177:   for (const GENERAL_NAME* san : san_names.get()) {",
          "178:     if (san->type == type) {",
          "180:     }",
          "181:   }",
          "182:   return subject_alt_names;",
          "",
          "[Removed Lines]",
          "179:       subject_alt_names.push_back(generalNameAsString(san));",
          "",
          "[Added Lines]",
          "179:       if (skip_unsupported) {",
          "182:         TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }",
          "183:         END_TRY CATCH(const EnvoyException& e,",
          "184:                       { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });",
          "185:       } else {",
          "186:         subject_alt_names.push_back(generalNameAsString(san));",
          "187:       }",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h": [
          "File: source/extensions/transport_sockets/tls/utility.h -> source/extensions/transport_sockets/tls/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "57: std::vector<std::string> getSubjectAltNames(X509& cert, int type);",
          "",
          "[Added Lines]",
          "59: std::vector<std::string> getSubjectAltNames(X509& cert, int type, bool skip_unsupported = false);",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg": [
          "File: test/config/integration/certs/clientcert.cfg -> test/config/integration/certs/clientcert.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: URI.2 = http://frontend.lyft.com",
          "40: DNS.1 = lyft.com",
          "41: DNS.2 = www.lyft.com",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: IP.1 = 1.2.3.4",
          "43: IP.2 = 0:1:2:3::4",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem": [
          "File: test/config/integration/certs/clientcert.pem -> test/config/integration/certs/clientcert.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: -----BEGIN CERTIFICATE-----",
          "3: BQAwdjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM",
          "4: DVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsMEEx5ZnQgRW5n",
          "7: FjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsM",
          "8: EEx5ZnQgRW5naW5lZXJpbmcxGzAZBgNVBAMMElRlc3QgRnJvbnRlbmQgVGVhbTEl",
          "9: MCMGCSqGSIb3DQEJARYWZnJvbnRlbmQtdGVhbUBseWZ0LmNvbTCCASIwDQYJKoZI",
          "18: bmQtdGVhbYYYaHR0cDovL2Zyb250ZW5kLmx5ZnQuY29tgghseWZ0LmNvbYIMd3d3",
          "27: -----END CERTIFICATE-----",
          "",
          "[Removed Lines]",
          "2: MIIEiTCCA3GgAwIBAgIUT9Wze0Fvw/pMvqAmPJjlD7HNjZAwDQYJKoZIhvcNAQEL",
          "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjIwNDA3MTY0NjM1WhcNMjQw",
          "6: NDA2MTY0NjM1WjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
          "10: hvcNAQEBBQADggEPADCCAQoCggEBAOwOQ96U2nYcA+lV5eFmHqwkUVH/b5wn/FXg",
          "11: ALBfT2qSn2pzMmqj3RHebqN4I7uiRGPmk7eVHxktW/ytFDdk+AwbGEOP8vWl9zR7",
          "12: 3pveKchHVSdSNJ4RkXpgDLZYDDDj/JQxNzDwPD43eIUw9SKj+Mw9nTRv0hm39hhh",
          "13: hjBmvOfbdWjQPMsuSDqEAPGE06PpirTdwZNSsuBjfvo6zdnJxTgzd/Cf1KINda4P",
          "14: xklw9M9CuKQMeLwVfwMDNeI2uJ7kn1dpsOhSDBU7LEleSWGGAlcycDzLuy/5/rKc",
          "15: dON9MKUK+82rJ+cME6I+DYqS1Nz+wY9t8farXLuGK41n0G4qr1MCAwEAAaOB2zCB",
          "16: 2DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
          "17: AgYIKwYBBQUHAwEwXAYDVR0RBFUwU4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
          "19: Lmx5ZnQuY29tMB0GA1UdDgQWBBROWpBWXFbgQUweTJcDDdEtGxJ6wzAfBgNVHSME",
          "20: GDAWgBQdDTmYdOz7TqwMpoOli3Dmj78ygjANBgkqhkiG9w0BAQsFAAOCAQEALyDC",
          "21: CJ2V30VRqf/vHnv4hocaNvkbg2XqSczsNsXQB9Oh15y2nrTu8nIlktJeMCwgYKB3",
          "22: tyuIYADw2c0HKmFshOiNM3P1taM+Gljx/OeyhMq/dgKTF0rX7w3vOoWrvW7o0cDJ",
          "23: gBzDAmPJegrIlAqfb97MOcLtBlk9vjh7ukh8BSRI+5Hdj5Gb8Y6tQvmiqzm5yx5L",
          "24: Swz7im1BIGwk4Hq82JO20egDYCn9zhmuDIEJGtRbl0ymcfdaC4oKqiqU/CrynaAo",
          "25: SkNXfca8Sqk1tvbfDzNkOAnLN572vkbhUnLfcqcfouRXlUl2DYmG+dCoYuWw4/co",
          "26: ahwsslCKM3xGY4ax9Q==",
          "",
          "[Added Lines]",
          "2: MIIEoTCCA4mgAwIBAgIUfOq/vQ8mjLRgSYL45lUeRsi92lQwDQYJKoZIhvcNAQEL",
          "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjMxMTE0MjMxODQwWhcNMjUx",
          "6: MTEzMjMxODQwWjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
          "10: hvcNAQEBBQADggEPADCCAQoCggEBAL0rleTUkmUs7g/PA9skuWZoa6RoK/NfwwfC",
          "11: WniKgiX+yRZcBy9//6HlOD3jLezD6tp+smh1UzIu3r69/r0eDjA+PsxQKDFH69LJ",
          "12: 74CaFtx9rjapY3VNwuE3jNclcKzDnjNVHrvND+YAIkLhRbXyBqg3n7T1C2wtVIs5",
          "13: zOy79iu97vVuX744IDsIuWUWPpFImfgdELeAByRq8IN333jljTf3pN3GfjDf9aKL",
          "14: M6jTGRitNVPY2mOe6LpkUntHs42weUBCZ2B39c8olXWeEoCJL35ENuJ/JlxpamP+",
          "15: OlK/eShorsFE+UH8tYRMeNkb8ZEdFHohYQGO8WJ5VBw4d47loRsCAwEAAaOB8zCB",
          "16: 8DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
          "17: AgYIKwYBBQUHAwEwdAYDVR0RBG0wa4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
          "19: Lmx5ZnQuY29thwQBAgMEhxAAAAABAAIAAwAAAAAAAAAEMB0GA1UdDgQWBBTl8J5P",
          "20: CF97S4cY6TytejTb3sngmTAfBgNVHSMEGDAWgBQdDTmYdOz7TqwMpoOli3Dmj78y",
          "21: gjANBgkqhkiG9w0BAQsFAAOCAQEAsMuSPKvSx/uDRIHWNQhUWSHfa4nfonyGBmnV",
          "22: VvC7Xatq3kZ1MCedzxHbqOOdlO4cSVq+eOHlVzWJUsJSj1J8hcVh3vZp6GFoRZgU",
          "23: F93g2dlgkmEEqEFB4qI71PwjC6amEV+xY21v/QPEouI1VumUnMnAV81G5uJDzPtn",
          "24: gmNyM6hnvKGufpaovZFeXsB0ZUnYPz+4QdKwHTErsV8uUdeJUhFHg1NjCmrqQAmm",
          "25: PG0G9JOi/dY/X5/LfGomAb7E+wuJFKHFP7gE6JvWi5M1Y1IlW1tCgN3dSCdCaUZm",
          "26: JPKWR3x+gYOFHfKNpdG/zRwOrClgISmDzZiXXFSHCn95tFocXA==",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h": [
          "File: test/config/integration/certs/clientcert_hash.h -> test/config/integration/certs/clientcert_hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2: constexpr char TEST_CLIENT_CERT_HASH[] = \"4A:FD:3A:AE:4B:36:08:A6:CB:41:4F:20:8A:86:1F:3B:43:6F:2F:\"",
          "3:                                          \"12:49:82:8D:9F:F6:FA:53:4D:23:26:FB:43\";",
          "",
          "[Added Lines]",
          "2: constexpr char TEST_CLIENT_CERT_HASH[] = \"F6:31:41:AA:8E:E3:D7:AC:AE:A8:AF:AD:C9:11:CD:0A:83:72:03:\"",
          "3:                                          \"6D:4B:B3:72:4F:6F:71:E1:ED:18:5B:92:AA\";",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem": [
          "File: test/config/integration/certs/clientkey.pem -> test/config/integration/certs/clientkey.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: -----BEGIN RSA PRIVATE KEY-----",
          "2: MIIEpAIBAAKCAQEA7A5D3pTadhwD6VXl4WYerCRRUf9vnCf8VeAAsF9PapKfanMy",
          "3: aqPdEd5uo3gju6JEY+aTt5UfGS1b/K0UN2T4DBsYQ4/y9aX3NHvem94pyEdVJ1I0",
          "4: nhGRemAMtlgMMOP8lDE3MPA8Pjd4hTD1IqP4zD2dNG/SGbf2GGGGMGa859t1aNA8",
          "5: yy5IOoQA8YTTo+mKtN3Bk1Ky4GN++jrN2cnFODN38J/Uog11rg/GSXD0z0K4pAx4",
          "6: vBV/AwM14ja4nuSfV2mw6FIMFTssSV5JYYYCVzJwPMu7L/n+spx0430wpQr7zasn",
          "7: 5wwToj4NipLU3P7Bj23x9qtcu4YrjWfQbiqvUwIDAQABAoIBAQDKY5ixODLuXSrF",
          "8: Xo6QaLwXn7PReA67dlUVU8+DaNRwbXIdFNO/NuuOLIXzxkfs0j2M4d744fQd5BQg",
          "9: Wk0hCYLa7kgpdTw8faWr7CB6x0pPm0lZQ1Q1yp5OrBd6J5ecO30NmfzWCsO8HFdK",
          "10: 6yTiJHBmvNUSZmVfA6kOUl95FD0XFB7J/4MPmE0UqEg5IhoWxpH9cEV8yll/bZZL",
          "11: FHzA1cfwjtcHp5kHm/7IYlWqpShpdsquMmZt8vHFaoGvT5pms/AtAFjjDcW5dFpZ",
          "12: GipS5D/3oPMXWbhrzMoIe8ERVBmlKPVoUmxUNIomgRSTP6/+mgcgojRRqcLW3l0W",
          "13: KXi4i1dhAoGBAPmgVd+2K5vox09EbYaD1KAZpwuW61PQ6RI3wU5YCf84FoNAzK+e",
          "14: KHSI+5Vo7JkwwiP7MSIJhiODG9VRnfou06NPEY4jllcMXp73PVGhOzsnHTqsbgps",
          "15: Yg9tXsX5jQDx60yIOHf7halAz3vpEldQ6YecLscYV0Oz5i84gl/jee5JAoGBAPIV",
          "16: Ofuf88WjErvuAxqIJWx85afr4B8YfChKHIVEx1eI6o89xuB16FjFzKAhHe9SJdfk",
          "17: YVOwYD/9MRZ5+ZZAsRrKTHbD3VX20c0ECX9++/Sz2LGMewgvqiscpfGzDTsTJIVA",
          "18: Ep31IAXmAUsmBAQAbuXxtbpKgU8Wi3mSp4nFzKC7AoGAUlpgGkbqSixYnMERdSBG",
          "19: 5G6yGnO2vVcdnWIBhwwqeCWT38df/8wowpFylo8gB0X7to0nX3hO5aZaZ1zexmvu",
          "20: bGEohIEfFybAjKc6dpS/irtTvEiooQ2yqC5H5v52U0p8eyoxnvu+0+DK0rFI2L+b",
          "21: 255eHFbeazqNhSSadnIAhukCgYEAtfKAPv/sb0nupbLxQDq9rfl9fqVJMPXtMzbo",
          "22: kr2r+b2dVgW/eSsFc9tOvbfGUP50FPzAre7tmIqLH3KTxXtf4VvU9pqlu5uj+iwj",
          "23: m2Dsq/GUV3XXbsKsanTAwJWrxw/PLhuHIpN++w/xPvMWp49PyqHNzXN8Ft5B/CDe",
          "24: rS0ubEsCgYA5kvmEDFYLF4TU7xg3QJ08+6+tJ+HZdvCBzE7RGJD8l5ZfpJuE6s9E",
          "25: aW09E+65hSMaE85MpiM/s08quiMQeR6i7UWeN4GwoQznH1f9zUAuyP1J1Iv2knj7",
          "26: lZ+oGk0EgnjkiIxo3ppAoKGz2/9Oi09lsEbdIBHvC56DAu44uOP50A==",
          "27: -----END RSA PRIVATE KEY-----",
          "",
          "[Added Lines]",
          "1: -----BEGIN PRIVATE KEY-----",
          "2: MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC9K5Xk1JJlLO4P",
          "3: zwPbJLlmaGukaCvzX8MHwlp4ioIl/skWXAcvf/+h5Tg94y3sw+rafrJodVMyLt6+",
          "4: vf69Hg4wPj7MUCgxR+vSye+Amhbcfa42qWN1TcLhN4zXJXCsw54zVR67zQ/mACJC",
          "5: 4UW18gaoN5+09QtsLVSLOczsu/Yrve71bl++OCA7CLllFj6RSJn4HRC3gAckavCD",
          "6: d9945Y0396Tdxn4w3/WiizOo0xkYrTVT2Npjnui6ZFJ7R7ONsHlAQmdgd/XPKJV1",
          "7: nhKAiS9+RDbifyZcaWpj/jpSv3koaK7BRPlB/LWETHjZG/GRHRR6IWEBjvFieVQc",
          "8: OHeO5aEbAgMBAAECggEARVEny2KDRFSq5RsPyCjUUOy5aNSNKlBwSDMU8K+cUizi",
          "9: 5XESZvrpopq6OZ850FTYBXlAiZtYQX7AOzemlQji3RWp8Db9C1XV2XcKbl7IOsJI",
          "10: 6Jm4Kp80Zk9zKdD70SqbGSc7LEjPZxGsfEJMx4donhJH0MisB1cy8BNdfm+/nDYK",
          "11: NsezfOYAD4UkX1NcrdfwLsWimZHPifwxL+va5cV3FiWO3S861/aE0pLhh+AJFYGI",
          "12: 3lEZxr6Gh+uaARcV4YNZPogYbrc8wJWP/6uR8pDwjqS8aUTBfyo1wUDd6bTvlQDv",
          "13: +nKBiVjmWPgY6TlZ/Okp+H28fO3zqoXExE6KJamxmQKBgQDzV5jIemNDUrxodc1i",
          "14: AQIchTbchvGiSpLyS2PY1W0vyYpyc5mugvzgaHPVEtaQTtR+QHWrYEFksOBZeIqX",
          "15: rQGTDk6jGWBzI7qa/itqr9jydZsMYgJ7eqGpiSsiD0ka65xO+Ho6FkZAV11+qPyE",
          "16: QmPD3Izj/58pSod4PADFQSP18wKBgQDHAp9Sd9fGCn/RHRVyf1nao2ZeKCQUDyyj",
          "17: g+uCIswhE8lT7C5K76FPxZrV6enpTkLjEnMdRrPl4fQ5xl0SPAR/gaZXhM1U4sjo",
          "18: w0dWITeMHwR7HqwbpumNbMccZMGA7o1Ua/k7GPIyD2UE7hiJyJRNyfeN09/cC18p",
          "19: EjHcSs4qOQKBgCwU0jh+8zxe4IKL1IjMZfWErEuGpn8fwz7hKVU+VGkzuUDCcDSM",
          "20: xgJg6ZrPrs61eQjl5GsHJNF4uSt8Cp8vV/mrvdMN5cr1zfgF0xegg0xowY2cs5Zq",
          "21: wJ5Vmtqwqi2WQNqNaJbdMhy1ttobAqNy41+3tE4ZIFv6hE/jjsAs7LbBAoGAXy64",
          "22: 5uec0wKYiXqglGemoTS/tE78mn97eSWSUWa1PSjKhRIUPhEIlS/M030SPF0LDrH3",
          "23: TsxPJKcCeVOPljYQbK+k0H0a+/uP3gvwJZiziZgYO467AGq/j720Kbdi+XifLf6K",
          "24: cKKIzDqitU3vfI7rp5zugu4QRp1FwU4LfPJmUrkCgYAzzBz3K7jg4JPdY7Od22SQ",
          "25: F/eToChPu60B9uQciR6gGwR1ry2sVSlK0Y1DMFMBCFEqPfJFO4OwZP0NWbRd13X1",
          "26: 9nUvpVoGxxJ51fIdMrPPm0G6f8HS79JhOGUp9tYsQ+LPCcnrrH2ZDGQYxZsSXqbe",
          "27: 5qc2rk4Sgt8Ua/oVrxghzA==",
          "28: -----END PRIVATE KEY-----",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"source/common/api/os_sys_calls_impl.h\"",
          "11: #include \"source/common/buffer/buffer_impl.h\"",
          "12: #include \"source/common/event/dispatcher_impl.h\"",
          "13: #include \"source/common/network/connection_balancer_impl.h\"",
          "14: #include \"source/common/network/listen_socket_impl.h\"",
          "15: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include \"source/common/network/address_impl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "238:                          TestUtility::ipTestParamsToString);",
          "240: TEST_P(ProxyProtocolTest, V1Basic) {",
          "241:   connect();",
          "242:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {",
          "242:   connect(false);",
          "243:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "244:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "245:   expectProxyProtoError();",
          "246: }",
          "248: TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {",
          "249:   connect(false);",
          "250:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "251:   write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");",
          "252:   expectProxyProtoError();",
          "253: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:   disconnect();",
          "392: }",
          "394: TEST_P(ProxyProtocolTest, V2UnsupportedAF) {",
          "396:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409: TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {",
          "411:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "412:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,",
          "413:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',",
          "414:                                 'r',  'e',  ' ',  'd',  'a',  't',  'a'};",
          "416:   connect(false);",
          "417:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "418:   write(buffer, sizeof(buffer));",
          "419:   expectProxyProtoError();",
          "420: }",
          "422: TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {",
          "424:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "425:                                 0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,",
          "426:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,",
          "427:                                 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,",
          "428:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',",
          "429:                                 'e',  ' ',  'd',  'a',  't',  'a'};",
          "431:   connect(false);",
          "432:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "433:   write(buffer, sizeof(buffer));",
          "434:   expectProxyProtoError();",
          "435: }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc": [
          "File: test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc -> test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "461:   checkStats();",
          "462: }",
          "464: TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {",
          "466:   envoy::config::core::v3::TypedExtensionConfig* custom_validator_config =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "464: TEST_P(SslIntegrationTest, LogPeerIpSanUnsupportedIpVersion) {",
          "465:   useListenerAccessLog(\"%DOWNSTREAM_PEER_IP_SAN%\");",
          "466:   config_helper_.addFilter(\"name: sni-to-header-filter\");",
          "467:   ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {",
          "468:     return makeSslClientConnection(ClientSslTransportOptions().setSni(\"host.com\"));",
          "469:   };",
          "470:   initialize();",
          "471:   codec_client_ = makeHttpConnection(",
          "472:       makeSslClientConnection(ClientSslTransportOptions().setSni(\"www.host.com\")));",
          "476:   auto disabler = (version_ == Network::Address::IpVersion::v4)",
          "477:                       ? Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest",
          "478:                       : Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest;",
          "479:   Cleanup cleaner(disabler(true));",
          "481:   Http::TestRequestHeaderMapImpl request_headers{",
          "482:       {\":method\", \"GET\"}, {\":path\", \"/\"}, {\":scheme\", \"https\"}, {\":authority\", \"host.com\"}};",
          "483:   auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "484:   waitForNextUpstreamRequest();",
          "486:   EXPECT_EQ(\"www.host.com\", upstream_request_->headers()",
          "487:                                 .get(Http::LowerCaseString(\"x-envoy-client-sni\"))[0]",
          "488:                                 ->value()",
          "489:                                 .getStringView());",
          "491:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "492:   upstream_request_->encodeHeaders(response_headers, true);",
          "493:   RELEASE_ASSERT(response->waitForEndStream(), \"unexpected timeout\");",
          "494:   codec_client_->close();",
          "496:   checkStats();",
          "497:   auto result = waitForAccessLog(listener_access_log_name_);",
          "498:   if (version_ == Network::Address::IpVersion::v4) {",
          "499:     EXPECT_EQ(result, \"1.2.3.4\");",
          "500:   } else {",
          "501:     EXPECT_EQ(result, \"0:1:2:3::4\");",
          "502:   }",
          "503: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "982545851087d683bff9cda7036f0b590dd5bb75",
      "candidate_info": {
        "commit_hash": "982545851087d683bff9cda7036f0b590dd5bb75",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/982545851087d683bff9cda7036f0b590dd5bb75",
        "files": [
          "changelogs/current.yaml",
          "source/common/network/BUILD",
          "source/common/network/address_impl.cc",
          "source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "source/extensions/transport_sockets/tls/utility.cc",
          "source/extensions/transport_sockets/tls/utility.h",
          "test/config/integration/certs/clientcert.cfg",
          "test/config/integration/certs/clientcert.pem",
          "test/config/integration/certs/clientcert_hash.h",
          "test/config/integration/certs/clientkey.pem",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
        ],
        "message": "Fix crashes when using address type that isn't supported by the OS\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
        "before_after_code_files": [
          "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
          "source/common/network/address_impl.h||source/common/network/address_impl.h",
          "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
          "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
          "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
          "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
          "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
          "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
          "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
            "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
            "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
            "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
            "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
            "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
            "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
          ],
          "candidate": [
            "source/common/network/address_impl.cc||source/common/network/address_impl.cc",
            "source/common/network/address_impl.h||source/common/network/address_impl.h",
            "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
            "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
            "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc",
            "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h",
            "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg",
            "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem",
            "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h",
            "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem",
            "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
            "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/network/address_impl.cc||source/common/network/address_impl.cc": [
          "File: source/common/network/address_impl.cc -> source/common/network/address_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:   return {start, end};",
          "213: }",
          "215: absl::Status Ipv4Instance::validateProtocolSupported() {",
          "216:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
          "218:     return absl::OkStatus();",
          "219:   }",
          "220:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "217:   if (supported) {",
          "",
          "[Added Lines]",
          "215: namespace {",
          "216: bool force_ipv4_unsupported_for_test = false;",
          "217: }",
          "219: Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "220:   bool old_val = force_ipv4_unsupported_for_test;",
          "221:   force_ipv4_unsupported_for_test = new_val;",
          "222:   return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });",
          "223: }",
          "227:   if (supported && !force_ipv4_unsupported_for_test) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:   initHelper(address, v6only);",
          "325: }",
          "327: absl::Status Ipv6Instance::validateProtocolSupported() {",
          "328:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
          "330:     return absl::OkStatus();",
          "331:   }",
          "332:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
          "",
          "[Removed Lines]",
          "329:   if (supported) {",
          "",
          "[Added Lines]",
          "337: namespace {",
          "338: bool force_ipv6_unsupported_for_test = false;",
          "339: }",
          "341: Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {",
          "342:   bool old_val = force_ipv6_unsupported_for_test;",
          "343:   force_ipv6_unsupported_for_test = new_val;",
          "344:   return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });",
          "345: }",
          "349:   if (supported && !force_ipv6_unsupported_for_test) {",
          "",
          "---------------"
        ],
        "source/common/network/address_impl.h||source/common/network/address_impl.h": [
          "File: source/common/network/address_impl.h -> source/common/network/address_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"envoy/network/socket.h\"",
          "13: #include \"source/common/common/assert.h\"",
          "14: #include \"source/common/common/statusor.h\"",
          "16: namespace Envoy {",
          "17: namespace Network {",
          "18: namespace Address {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"source/common/common/cleanup.h\"",
          "22: #define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   static absl::Status validateProtocolSupported();",
          "147: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   static absl::Status validateProtocolSupported();",
          "229: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:   static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);",
          "",
          "---------------"
        ],
        "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc||source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc": [
          "File: source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc -> source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:         la4.sin_family = AF_INET;",
          "277:         la4.sin_port = v4->dst_port;",
          "278:         la4.sin_addr.s_addr = v4->dst_addr;",
          "284:         return true;",
          "285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
          "286:         PACKED_STRUCT(struct pp_ipv6_addr {",
          "",
          "[Removed Lines]",
          "279:         proxy_protocol_header_.emplace(",
          "280:             WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "281:                        hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "282:                        std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "283:                        std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "",
          "[Added Lines]",
          "280:         TRY_NEEDS_AUDIT_ADDRESS {",
          "283:           proxy_protocol_header_.emplace(WireHeader{",
          "284:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
          "285:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
          "286:               std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
          "287:               std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
          "288:         }",
          "289:         END_TRY CATCH(const EnvoyException& e, {",
          "290:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "291:           return false;",
          "292:         });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         la6.sin6_port = v6->dst_port;",
          "303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
          "310:         return true;",
          "311:       }",
          "312:     }",
          "",
          "[Removed Lines]",
          "305:         proxy_protocol_header_.emplace(WireHeader{",
          "306:             PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "307:             hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "308:             std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "309:             std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "",
          "[Added Lines]",
          "315:         TRY_NEEDS_AUDIT_ADDRESS {",
          "316:           proxy_protocol_header_.emplace(WireHeader{",
          "317:               PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
          "318:               hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
          "319:               std::make_shared<Network::Address::Ipv6Instance>(ra6),",
          "320:               std::make_shared<Network::Address::Ipv6Instance>(la6)});",
          "321:         }",
          "322:         END_TRY CATCH(const EnvoyException& e, {",
          "325:           ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());",
          "326:           return false;",
          "327:         });",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/connection_info_impl_base.cc||source/extensions/transport_sockets/tls/connection_info_impl_base.cc": [
          "File: source/extensions/transport_sockets/tls/connection_info_impl_base.cc -> source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     ASSERT(cached_ip_san_peer_certificate_.empty());",
          "186:     return cached_ip_san_peer_certificate_;",
          "187:   }",
          "189:   return cached_ip_san_peer_certificate_;",
          "190: }",
          "",
          "[Removed Lines]",
          "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);",
          "",
          "[Added Lines]",
          "188:   cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/utility.cc||source/extensions/transport_sockets/tls/utility.cc": [
          "File: source/extensions/transport_sockets/tls/utility.cc -> source/extensions/transport_sockets/tls/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   return \"\";",
          "168: }",
          "171:   std::vector<std::string> subject_alt_names;",
          "172:   bssl::UniquePtr<GENERAL_NAMES> san_names(",
          "173:       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));",
          "",
          "[Removed Lines]",
          "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
          "",
          "[Added Lines]",
          "170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   }",
          "177:   for (const GENERAL_NAME* san : san_names.get()) {",
          "178:     if (san->type == type) {",
          "180:     }",
          "181:   }",
          "182:   return subject_alt_names;",
          "",
          "[Removed Lines]",
          "179:       subject_alt_names.push_back(generalNameAsString(san));",
          "",
          "[Added Lines]",
          "179:       if (skip_unsupported) {",
          "182:         TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }",
          "183:         END_TRY CATCH(const EnvoyException& e,",
          "184:                       { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });",
          "185:       } else {",
          "186:         subject_alt_names.push_back(generalNameAsString(san));",
          "187:       }",
          "",
          "---------------"
        ],
        "source/extensions/transport_sockets/tls/utility.h||source/extensions/transport_sockets/tls/utility.h": [
          "File: source/extensions/transport_sockets/tls/utility.h -> source/extensions/transport_sockets/tls/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "57: std::vector<std::string> getSubjectAltNames(X509& cert, int type);",
          "",
          "[Added Lines]",
          "59: std::vector<std::string> getSubjectAltNames(X509& cert, int type, bool skip_unsupported = false);",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert.cfg||test/config/integration/certs/clientcert.cfg": [
          "File: test/config/integration/certs/clientcert.cfg -> test/config/integration/certs/clientcert.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: URI.2 = http://frontend.lyft.com",
          "40: DNS.1 = lyft.com",
          "41: DNS.2 = www.lyft.com",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: IP.1 = 1.2.3.4",
          "43: IP.2 = 0:1:2:3::4",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert.pem||test/config/integration/certs/clientcert.pem": [
          "File: test/config/integration/certs/clientcert.pem -> test/config/integration/certs/clientcert.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: -----BEGIN CERTIFICATE-----",
          "3: BQAwdjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM",
          "4: DVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsMEEx5ZnQgRW5n",
          "7: FjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBEx5ZnQxGTAXBgNVBAsM",
          "8: EEx5ZnQgRW5naW5lZXJpbmcxGzAZBgNVBAMMElRlc3QgRnJvbnRlbmQgVGVhbTEl",
          "9: MCMGCSqGSIb3DQEJARYWZnJvbnRlbmQtdGVhbUBseWZ0LmNvbTCCASIwDQYJKoZI",
          "18: bmQtdGVhbYYYaHR0cDovL2Zyb250ZW5kLmx5ZnQuY29tgghseWZ0LmNvbYIMd3d3",
          "27: -----END CERTIFICATE-----",
          "",
          "[Removed Lines]",
          "2: MIIEiTCCA3GgAwIBAgIUT9Wze0Fvw/pMvqAmPJjlD7HNjZAwDQYJKoZIhvcNAQEL",
          "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjIwNDA3MTY0NjM1WhcNMjQw",
          "6: NDA2MTY0NjM1WjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
          "10: hvcNAQEBBQADggEPADCCAQoCggEBAOwOQ96U2nYcA+lV5eFmHqwkUVH/b5wn/FXg",
          "11: ALBfT2qSn2pzMmqj3RHebqN4I7uiRGPmk7eVHxktW/ytFDdk+AwbGEOP8vWl9zR7",
          "12: 3pveKchHVSdSNJ4RkXpgDLZYDDDj/JQxNzDwPD43eIUw9SKj+Mw9nTRv0hm39hhh",
          "13: hjBmvOfbdWjQPMsuSDqEAPGE06PpirTdwZNSsuBjfvo6zdnJxTgzd/Cf1KINda4P",
          "14: xklw9M9CuKQMeLwVfwMDNeI2uJ7kn1dpsOhSDBU7LEleSWGGAlcycDzLuy/5/rKc",
          "15: dON9MKUK+82rJ+cME6I+DYqS1Nz+wY9t8farXLuGK41n0G4qr1MCAwEAAaOB2zCB",
          "16: 2DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
          "17: AgYIKwYBBQUHAwEwXAYDVR0RBFUwU4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
          "19: Lmx5ZnQuY29tMB0GA1UdDgQWBBROWpBWXFbgQUweTJcDDdEtGxJ6wzAfBgNVHSME",
          "20: GDAWgBQdDTmYdOz7TqwMpoOli3Dmj78ygjANBgkqhkiG9w0BAQsFAAOCAQEALyDC",
          "21: CJ2V30VRqf/vHnv4hocaNvkbg2XqSczsNsXQB9Oh15y2nrTu8nIlktJeMCwgYKB3",
          "22: tyuIYADw2c0HKmFshOiNM3P1taM+Gljx/OeyhMq/dgKTF0rX7w3vOoWrvW7o0cDJ",
          "23: gBzDAmPJegrIlAqfb97MOcLtBlk9vjh7ukh8BSRI+5Hdj5Gb8Y6tQvmiqzm5yx5L",
          "24: Swz7im1BIGwk4Hq82JO20egDYCn9zhmuDIEJGtRbl0ymcfdaC4oKqiqU/CrynaAo",
          "25: SkNXfca8Sqk1tvbfDzNkOAnLN572vkbhUnLfcqcfouRXlUl2DYmG+dCoYuWw4/co",
          "26: ahwsslCKM3xGY4ax9Q==",
          "",
          "[Added Lines]",
          "2: MIIEoTCCA4mgAwIBAgIUfOq/vQ8mjLRgSYL45lUeRsi92lQwDQYJKoZIhvcNAQEL",
          "5: aW5lZXJpbmcxEDAOBgNVBAMMB1Rlc3QgQ0EwHhcNMjMxMTE0MjMxODQwWhcNMjUx",
          "6: MTEzMjMxODQwWjCBqDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWEx",
          "10: hvcNAQEBBQADggEPADCCAQoCggEBAL0rleTUkmUs7g/PA9skuWZoa6RoK/NfwwfC",
          "11: WniKgiX+yRZcBy9//6HlOD3jLezD6tp+smh1UzIu3r69/r0eDjA+PsxQKDFH69LJ",
          "12: 74CaFtx9rjapY3VNwuE3jNclcKzDnjNVHrvND+YAIkLhRbXyBqg3n7T1C2wtVIs5",
          "13: zOy79iu97vVuX744IDsIuWUWPpFImfgdELeAByRq8IN333jljTf3pN3GfjDf9aKL",
          "14: M6jTGRitNVPY2mOe6LpkUntHs42weUBCZ2B39c8olXWeEoCJL35ENuJ/JlxpamP+",
          "15: OlK/eShorsFE+UH8tYRMeNkb8ZEdFHohYQGO8WJ5VBw4d47loRsCAwEAAaOB8zCB",
          "16: 8DAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcD",
          "17: AgYIKwYBBQUHAwEwdAYDVR0RBG0wa4Yfc3BpZmZlOi8vbHlmdC5jb20vZnJvbnRl",
          "19: Lmx5ZnQuY29thwQBAgMEhxAAAAABAAIAAwAAAAAAAAAEMB0GA1UdDgQWBBTl8J5P",
          "20: CF97S4cY6TytejTb3sngmTAfBgNVHSMEGDAWgBQdDTmYdOz7TqwMpoOli3Dmj78y",
          "21: gjANBgkqhkiG9w0BAQsFAAOCAQEAsMuSPKvSx/uDRIHWNQhUWSHfa4nfonyGBmnV",
          "22: VvC7Xatq3kZ1MCedzxHbqOOdlO4cSVq+eOHlVzWJUsJSj1J8hcVh3vZp6GFoRZgU",
          "23: F93g2dlgkmEEqEFB4qI71PwjC6amEV+xY21v/QPEouI1VumUnMnAV81G5uJDzPtn",
          "24: gmNyM6hnvKGufpaovZFeXsB0ZUnYPz+4QdKwHTErsV8uUdeJUhFHg1NjCmrqQAmm",
          "25: PG0G9JOi/dY/X5/LfGomAb7E+wuJFKHFP7gE6JvWi5M1Y1IlW1tCgN3dSCdCaUZm",
          "26: JPKWR3x+gYOFHfKNpdG/zRwOrClgISmDzZiXXFSHCn95tFocXA==",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientcert_hash.h||test/config/integration/certs/clientcert_hash.h": [
          "File: test/config/integration/certs/clientcert_hash.h -> test/config/integration/certs/clientcert_hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #pragma once",
          "",
          "[Removed Lines]",
          "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"4A:FD:3A:AE:4B:36:08:A6:CB:41:4F:20:8A:86:1F:3B:43:6F:2F:\"",
          "5:                                          \"12:49:82:8D:9F:F6:FA:53:4D:23:26:FB:43\";",
          "",
          "[Added Lines]",
          "4: constexpr char TEST_CLIENT_CERT_HASH[] = \"F6:31:41:AA:8E:E3:D7:AC:AE:A8:AF:AD:C9:11:CD:0A:83:72:03:\"",
          "5:                                          \"6D:4B:B3:72:4F:6F:71:E1:ED:18:5B:92:AA\";",
          "",
          "---------------"
        ],
        "test/config/integration/certs/clientkey.pem||test/config/integration/certs/clientkey.pem": [
          "File: test/config/integration/certs/clientkey.pem -> test/config/integration/certs/clientkey.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: -----BEGIN RSA PRIVATE KEY-----",
          "2: MIIEpAIBAAKCAQEA7A5D3pTadhwD6VXl4WYerCRRUf9vnCf8VeAAsF9PapKfanMy",
          "3: aqPdEd5uo3gju6JEY+aTt5UfGS1b/K0UN2T4DBsYQ4/y9aX3NHvem94pyEdVJ1I0",
          "4: nhGRemAMtlgMMOP8lDE3MPA8Pjd4hTD1IqP4zD2dNG/SGbf2GGGGMGa859t1aNA8",
          "5: yy5IOoQA8YTTo+mKtN3Bk1Ky4GN++jrN2cnFODN38J/Uog11rg/GSXD0z0K4pAx4",
          "6: vBV/AwM14ja4nuSfV2mw6FIMFTssSV5JYYYCVzJwPMu7L/n+spx0430wpQr7zasn",
          "7: 5wwToj4NipLU3P7Bj23x9qtcu4YrjWfQbiqvUwIDAQABAoIBAQDKY5ixODLuXSrF",
          "8: Xo6QaLwXn7PReA67dlUVU8+DaNRwbXIdFNO/NuuOLIXzxkfs0j2M4d744fQd5BQg",
          "9: Wk0hCYLa7kgpdTw8faWr7CB6x0pPm0lZQ1Q1yp5OrBd6J5ecO30NmfzWCsO8HFdK",
          "10: 6yTiJHBmvNUSZmVfA6kOUl95FD0XFB7J/4MPmE0UqEg5IhoWxpH9cEV8yll/bZZL",
          "11: FHzA1cfwjtcHp5kHm/7IYlWqpShpdsquMmZt8vHFaoGvT5pms/AtAFjjDcW5dFpZ",
          "12: GipS5D/3oPMXWbhrzMoIe8ERVBmlKPVoUmxUNIomgRSTP6/+mgcgojRRqcLW3l0W",
          "13: KXi4i1dhAoGBAPmgVd+2K5vox09EbYaD1KAZpwuW61PQ6RI3wU5YCf84FoNAzK+e",
          "14: KHSI+5Vo7JkwwiP7MSIJhiODG9VRnfou06NPEY4jllcMXp73PVGhOzsnHTqsbgps",
          "15: Yg9tXsX5jQDx60yIOHf7halAz3vpEldQ6YecLscYV0Oz5i84gl/jee5JAoGBAPIV",
          "16: Ofuf88WjErvuAxqIJWx85afr4B8YfChKHIVEx1eI6o89xuB16FjFzKAhHe9SJdfk",
          "17: YVOwYD/9MRZ5+ZZAsRrKTHbD3VX20c0ECX9++/Sz2LGMewgvqiscpfGzDTsTJIVA",
          "18: Ep31IAXmAUsmBAQAbuXxtbpKgU8Wi3mSp4nFzKC7AoGAUlpgGkbqSixYnMERdSBG",
          "19: 5G6yGnO2vVcdnWIBhwwqeCWT38df/8wowpFylo8gB0X7to0nX3hO5aZaZ1zexmvu",
          "20: bGEohIEfFybAjKc6dpS/irtTvEiooQ2yqC5H5v52U0p8eyoxnvu+0+DK0rFI2L+b",
          "21: 255eHFbeazqNhSSadnIAhukCgYEAtfKAPv/sb0nupbLxQDq9rfl9fqVJMPXtMzbo",
          "22: kr2r+b2dVgW/eSsFc9tOvbfGUP50FPzAre7tmIqLH3KTxXtf4VvU9pqlu5uj+iwj",
          "23: m2Dsq/GUV3XXbsKsanTAwJWrxw/PLhuHIpN++w/xPvMWp49PyqHNzXN8Ft5B/CDe",
          "24: rS0ubEsCgYA5kvmEDFYLF4TU7xg3QJ08+6+tJ+HZdvCBzE7RGJD8l5ZfpJuE6s9E",
          "25: aW09E+65hSMaE85MpiM/s08quiMQeR6i7UWeN4GwoQznH1f9zUAuyP1J1Iv2knj7",
          "26: lZ+oGk0EgnjkiIxo3ppAoKGz2/9Oi09lsEbdIBHvC56DAu44uOP50A==",
          "27: -----END RSA PRIVATE KEY-----",
          "",
          "[Added Lines]",
          "1: -----BEGIN PRIVATE KEY-----",
          "2: MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC9K5Xk1JJlLO4P",
          "3: zwPbJLlmaGukaCvzX8MHwlp4ioIl/skWXAcvf/+h5Tg94y3sw+rafrJodVMyLt6+",
          "4: vf69Hg4wPj7MUCgxR+vSye+Amhbcfa42qWN1TcLhN4zXJXCsw54zVR67zQ/mACJC",
          "5: 4UW18gaoN5+09QtsLVSLOczsu/Yrve71bl++OCA7CLllFj6RSJn4HRC3gAckavCD",
          "6: d9945Y0396Tdxn4w3/WiizOo0xkYrTVT2Npjnui6ZFJ7R7ONsHlAQmdgd/XPKJV1",
          "7: nhKAiS9+RDbifyZcaWpj/jpSv3koaK7BRPlB/LWETHjZG/GRHRR6IWEBjvFieVQc",
          "8: OHeO5aEbAgMBAAECggEARVEny2KDRFSq5RsPyCjUUOy5aNSNKlBwSDMU8K+cUizi",
          "9: 5XESZvrpopq6OZ850FTYBXlAiZtYQX7AOzemlQji3RWp8Db9C1XV2XcKbl7IOsJI",
          "10: 6Jm4Kp80Zk9zKdD70SqbGSc7LEjPZxGsfEJMx4donhJH0MisB1cy8BNdfm+/nDYK",
          "11: NsezfOYAD4UkX1NcrdfwLsWimZHPifwxL+va5cV3FiWO3S861/aE0pLhh+AJFYGI",
          "12: 3lEZxr6Gh+uaARcV4YNZPogYbrc8wJWP/6uR8pDwjqS8aUTBfyo1wUDd6bTvlQDv",
          "13: +nKBiVjmWPgY6TlZ/Okp+H28fO3zqoXExE6KJamxmQKBgQDzV5jIemNDUrxodc1i",
          "14: AQIchTbchvGiSpLyS2PY1W0vyYpyc5mugvzgaHPVEtaQTtR+QHWrYEFksOBZeIqX",
          "15: rQGTDk6jGWBzI7qa/itqr9jydZsMYgJ7eqGpiSsiD0ka65xO+Ho6FkZAV11+qPyE",
          "16: QmPD3Izj/58pSod4PADFQSP18wKBgQDHAp9Sd9fGCn/RHRVyf1nao2ZeKCQUDyyj",
          "17: g+uCIswhE8lT7C5K76FPxZrV6enpTkLjEnMdRrPl4fQ5xl0SPAR/gaZXhM1U4sjo",
          "18: w0dWITeMHwR7HqwbpumNbMccZMGA7o1Ua/k7GPIyD2UE7hiJyJRNyfeN09/cC18p",
          "19: EjHcSs4qOQKBgCwU0jh+8zxe4IKL1IjMZfWErEuGpn8fwz7hKVU+VGkzuUDCcDSM",
          "20: xgJg6ZrPrs61eQjl5GsHJNF4uSt8Cp8vV/mrvdMN5cr1zfgF0xegg0xowY2cs5Zq",
          "21: wJ5Vmtqwqi2WQNqNaJbdMhy1ttobAqNy41+3tE4ZIFv6hE/jjsAs7LbBAoGAXy64",
          "22: 5uec0wKYiXqglGemoTS/tE78mn97eSWSUWa1PSjKhRIUPhEIlS/M030SPF0LDrH3",
          "23: TsxPJKcCeVOPljYQbK+k0H0a+/uP3gvwJZiziZgYO467AGq/j720Kbdi+XifLf6K",
          "24: cKKIzDqitU3vfI7rp5zugu4QRp1FwU4LfPJmUrkCgYAzzBz3K7jg4JPdY7Od22SQ",
          "25: F/eToChPu60B9uQciR6gGwR1ry2sVSlK0Y1DMFMBCFEqPfJFO4OwZP0NWbRd13X1",
          "26: 9nUvpVoGxxJ51fIdMrPPm0G6f8HS79JhOGUp9tYsQ+LPCcnrrH2ZDGQYxZsSXqbe",
          "27: 5qc2rk4Sgt8Ua/oVrxghzA==",
          "28: -----END PRIVATE KEY-----",
          "",
          "---------------"
        ],
        "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc||test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc": [
          "File: test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc -> test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"source/common/api/os_sys_calls_impl.h\"",
          "11: #include \"source/common/buffer/buffer_impl.h\"",
          "12: #include \"source/common/event/dispatcher_impl.h\"",
          "13: #include \"source/common/network/connection_balancer_impl.h\"",
          "14: #include \"source/common/network/listen_socket_impl.h\"",
          "15: #include \"source/common/network/proxy_protocol_filter_state.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include \"source/common/network/address_impl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "234:                          TestUtility::ipTestParamsToString);",
          "236: TEST_P(ProxyProtocolTest, V1Basic) {",
          "237:   connect();",
          "238:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {",
          "238:   connect(false);",
          "239:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "240:   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");",
          "241:   expectProxyProtoError();",
          "242: }",
          "244: TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {",
          "245:   connect(false);",
          "246:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "247:   write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");",
          "248:   expectProxyProtoError();",
          "249: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387:   disconnect();",
          "388: }",
          "390: TEST_P(ProxyProtocolTest, V2UnsupportedAF) {",
          "392:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405: TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {",
          "407:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,",
          "408:                                 0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,",
          "409:                                 0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',",
          "410:                                 'r',  'e',  ' ',  'd',  'a',  't',  'a'};",
          "412:   connect(false);",
          "413:   Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);",
          "414:   write(buffer, sizeof(buffer));",
          "415:   expectProxyProtoError();",
          "416: }",
          "418: TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {",
          "420:   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,",
          "421:                                 0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,",
          "422:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,",
          "423:                                 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,",
          "424:                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',",
          "425:                                 'e',  ' ',  'd',  'a',  't',  'a'};",
          "427:   connect(false);",
          "428:   Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);",
          "429:   write(buffer, sizeof(buffer));",
          "430:   expectProxyProtoError();",
          "431: }",
          "",
          "---------------"
        ],
        "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc||test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc": [
          "File: test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc -> test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:   checkStats();",
          "463: }",
          "465: TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {",
          "467:   envoy::config::core::v3::TypedExtensionConfig* custom_validator_config =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: TEST_P(SslIntegrationTest, LogPeerIpSanUnsupportedIpVersion) {",
          "466:   useListenerAccessLog(\"%DOWNSTREAM_PEER_IP_SAN%\");",
          "467:   config_helper_.addFilter(\"name: sni-to-header-filter\");",
          "468:   ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {",
          "469:     return makeSslClientConnection(ClientSslTransportOptions().setSni(\"host.com\"));",
          "470:   };",
          "471:   initialize();",
          "472:   codec_client_ = makeHttpConnection(",
          "473:       makeSslClientConnection(ClientSslTransportOptions().setSni(\"www.host.com\")));",
          "477:   auto disabler = (version_ == Network::Address::IpVersion::v4)",
          "478:                       ? Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest",
          "479:                       : Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest;",
          "480:   Cleanup cleaner(disabler(true));",
          "482:   Http::TestRequestHeaderMapImpl request_headers{",
          "483:       {\":method\", \"GET\"}, {\":path\", \"/\"}, {\":scheme\", \"https\"}, {\":authority\", \"host.com\"}};",
          "484:   auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "485:   waitForNextUpstreamRequest();",
          "487:   EXPECT_EQ(\"www.host.com\", upstream_request_->headers()",
          "488:                                 .get(Http::LowerCaseString(\"x-envoy-client-sni\"))[0]",
          "489:                                 ->value()",
          "490:                                 .getStringView());",
          "492:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};",
          "493:   upstream_request_->encodeHeaders(response_headers, true);",
          "494:   RELEASE_ASSERT(response->waitForEndStream(), \"unexpected timeout\");",
          "495:   codec_client_->close();",
          "497:   checkStats();",
          "498:   auto result = waitForAccessLog(listener_access_log_name_);",
          "499:   if (version_ == Network::Address::IpVersion::v4) {",
          "500:     EXPECT_EQ(result, \"1.2.3.4\");",
          "501:   } else {",
          "502:     EXPECT_EQ(result, \"0:1:2:3::4\");",
          "503:   }",
          "504: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}