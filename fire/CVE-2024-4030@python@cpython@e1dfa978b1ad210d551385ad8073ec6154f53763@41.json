{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "572b0b0809ddcc92c564164ad110c45327d12e6e",
      "candidate_info": {
        "commit_hash": "572b0b0809ddcc92c564164ad110c45327d12e6e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/572b0b0809ddcc92c564164ad110c45327d12e6e",
        "files": [
          "Lib/test/test_fractions.py"
        ],
        "message": "[3.13] gh-119189: Add more tests for mixed Fraction arithmetic (GH-119236) (GH-119255)\n\n(cherry picked from commit fe67af19638d208239549ccac8b4f4fb6480e801)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_fractions.py||Lib/test/test_fractions.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_fractions.py||Lib/test/test_fractions.py": [
          "File: Lib/test/test_fractions.py -> Lib/test/test_fractions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Tests for Lib/fractions.py.\"\"\"",
          "3: from decimal import Decimal",
          "4: from test.support import requires_IEEE_754",
          "5: import math",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import cmath",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: def _components(r):",
          "92:     return (r.numerator, r.denominator)",
          "95: class FractionTest(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: def typed_approx_eq(a, b):",
          "96:     return type(a) == type(b) and (a == b or math.isclose(a, b))",
          "98: class Symbolic:",
          "99:     \"\"\"Simple non-numeric class for testing mixed arithmetic.",
          "100:     It is not Integral, Rational, Real or Complex, and cannot be conveted",
          "101:     to int, float or complex. but it supports some arithmetic operations.",
          "102:     \"\"\"",
          "103:     def __init__(self, value):",
          "104:         self.value = value",
          "105:     def __mul__(self, other):",
          "106:         if isinstance(other, F):",
          "107:             return NotImplemented",
          "108:         return self.__class__(f'{self} * {other}')",
          "109:     def __rmul__(self, other):",
          "110:         return self.__class__(f'{other} * {self}')",
          "111:     def __truediv__(self, other):",
          "112:         if isinstance(other, F):",
          "113:             return NotImplemented",
          "114:         return self.__class__(f'{self} / {other}')",
          "115:     def __rtruediv__(self, other):",
          "116:         return self.__class__(f'{other} / {self}')",
          "117:     def __mod__(self, other):",
          "118:         if isinstance(other, F):",
          "119:             return NotImplemented",
          "120:         return self.__class__(f'{self} % {other}')",
          "121:     def __rmod__(self, other):",
          "122:         return self.__class__(f'{other} % {self}')",
          "123:     def __pow__(self, other):",
          "124:         if isinstance(other, F):",
          "125:             return NotImplemented",
          "126:         return self.__class__(f'{self} ** {other}')",
          "127:     def __rpow__(self, other):",
          "128:         return self.__class__(f'{other} ** {self}')",
          "129:     def __eq__(self, other):",
          "130:         if other.__class__ != self.__class__:",
          "131:             return NotImplemented",
          "132:         return self.value == other.value",
          "133:     def __str__(self):",
          "134:         return f'{self.value}'",
          "135:     def __repr__(self):",
          "136:         return f'{self.__class__.__name__}({self.value!r})'",
          "138: class Rat:",
          "139:     \"\"\"Simple Rational class for testing mixed arithmetic.\"\"\"",
          "140:     def __init__(self, n, d):",
          "141:         self.numerator = n",
          "142:         self.denominator = d",
          "143:     def __mul__(self, other):",
          "144:         if isinstance(other, F):",
          "145:             return NotImplemented",
          "146:         return self.__class__(self.numerator * other.numerator,",
          "147:                               self.denominator * other.denominator)",
          "148:     def __rmul__(self, other):",
          "149:         return self.__class__(other.numerator * self.numerator,",
          "150:                               other.denominator * self.denominator)",
          "151:     def __truediv__(self, other):",
          "152:         if isinstance(other, F):",
          "153:             return NotImplemented",
          "154:         return self.__class__(self.numerator * other.denominator,",
          "155:                               self.denominator * other.numerator)",
          "156:     def __rtruediv__(self, other):",
          "157:         return self.__class__(other.numerator * self.denominator,",
          "158:                               other.denominator * self.numerator)",
          "159:     def __mod__(self, other):",
          "160:         if isinstance(other, F):",
          "161:             return NotImplemented",
          "162:         d = self.denominator * other.numerator",
          "163:         return self.__class__(self.numerator * other.denominator % d, d)",
          "164:     def __rmod__(self, other):",
          "165:         d = other.denominator * self.numerator",
          "166:         return self.__class__(other.numerator * self.denominator % d, d)",
          "168:         return self.__class__(other.numerator / self.numerator,",
          "169:                               other.denominator / self.denominator)",
          "170:     def __pow__(self, other):",
          "171:         if isinstance(other, F):",
          "172:             return NotImplemented",
          "173:         return self.__class__(self.numerator ** other,",
          "174:                               self.denominator ** other)",
          "175:     def __float__(self):",
          "176:         return self.numerator / self.denominator",
          "177:     def __eq__(self, other):",
          "178:         if self.__class__ != other.__class__:",
          "179:             return NotImplemented",
          "180:         return (typed_approx_eq(self.numerator, other.numerator) and",
          "181:                 typed_approx_eq(self.denominator, other.denominator))",
          "182:     def __repr__(self):",
          "183:         return f'{self.__class__.__name__}({self.numerator!r}, {self.denominator!r})'",
          "184: numbers.Rational.register(Rat)",
          "186: class Root:",
          "187:     \"\"\"Simple Real class for testing mixed arithmetic.\"\"\"",
          "188:     def __init__(self, v, n=F(2)):",
          "189:         self.base = v",
          "190:         self.degree = n",
          "191:     def __mul__(self, other):",
          "192:         if isinstance(other, F):",
          "193:             return NotImplemented",
          "194:         return self.__class__(self.base * other**self.degree, self.degree)",
          "195:     def __rmul__(self, other):",
          "196:         return self.__class__(other**self.degree * self.base, self.degree)",
          "197:     def __truediv__(self, other):",
          "198:         if isinstance(other, F):",
          "199:             return NotImplemented",
          "200:         return self.__class__(self.base / other**self.degree, self.degree)",
          "201:     def __rtruediv__(self, other):",
          "202:         return self.__class__(other**self.degree / self.base, self.degree)",
          "203:     def __pow__(self, other):",
          "204:         if isinstance(other, F):",
          "205:             return NotImplemented",
          "206:         return self.__class__(self.base, self.degree / other)",
          "207:     def __float__(self):",
          "208:         return float(self.base) ** (1 / float(self.degree))",
          "209:     def __eq__(self, other):",
          "210:         if self.__class__ != other.__class__:",
          "211:             return NotImplemented",
          "212:         return typed_approx_eq(self.base, other.base) and typed_approx_eq(self.degree, other.degree)",
          "213:     def __repr__(self):",
          "214:         return f'{self.__class__.__name__}({self.base!r}, {self.degree!r})'",
          "215: numbers.Real.register(Root)",
          "217: class Polar:",
          "218:     \"\"\"Simple Complex class for testing mixed arithmetic.\"\"\"",
          "219:     def __init__(self, r, phi):",
          "220:         self.r = r",
          "221:         self.phi = phi",
          "222:     def __mul__(self, other):",
          "223:         if isinstance(other, F):",
          "224:             return NotImplemented",
          "225:         return self.__class__(self.r * other, self.phi)",
          "226:     def __rmul__(self, other):",
          "227:         return self.__class__(other * self.r, self.phi)",
          "228:     def __truediv__(self, other):",
          "229:         if isinstance(other, F):",
          "230:             return NotImplemented",
          "231:         return self.__class__(self.r / other, self.phi)",
          "232:     def __rtruediv__(self, other):",
          "233:         return self.__class__(other / self.r, -self.phi)",
          "234:     def __pow__(self, other):",
          "235:         if isinstance(other, F):",
          "236:             return NotImplemented",
          "237:         return self.__class__(self.r ** other, self.phi * other)",
          "238:     def __eq__(self, other):",
          "239:         if self.__class__ != other.__class__:",
          "240:             return NotImplemented",
          "241:         return typed_approx_eq(self.r, other.r) and typed_approx_eq(self.phi, other.phi)",
          "242:     def __repr__(self):",
          "243:         return f'{self.__class__.__name__}({self.r!r}, {self.phi!r})'",
          "244: numbers.Complex.register(Polar)",
          "246: class Rect:",
          "247:     \"\"\"Other simple Complex class for testing mixed arithmetic.\"\"\"",
          "248:     def __init__(self, x, y):",
          "249:         self.x = x",
          "250:         self.y = y",
          "251:     def __mul__(self, other):",
          "252:         if isinstance(other, F):",
          "253:             return NotImplemented",
          "254:         return self.__class__(self.x * other, self.y * other)",
          "255:     def __rmul__(self, other):",
          "256:         return self.__class__(other * self.x, other * self.y)",
          "257:     def __truediv__(self, other):",
          "258:         if isinstance(other, F):",
          "259:             return NotImplemented",
          "260:         return self.__class__(self.x / other, self.y / other)",
          "261:     def __rtruediv__(self, other):",
          "262:         r = self.x * self.x + self.y * self.y",
          "263:         return self.__class__(other * (self.x / r), other * (self.y / r))",
          "264:     def __rpow__(self, other):",
          "265:         return Polar(other ** self.x, math.log(other) * self.y)",
          "266:     def __complex__(self):",
          "267:         return complex(self.x, self.y)",
          "268:     def __eq__(self, other):",
          "269:         if self.__class__ != other.__class__:",
          "270:             return NotImplemented",
          "271:         return typed_approx_eq(self.x, other.x) and typed_approx_eq(self.y, other.y)",
          "272:     def __repr__(self):",
          "273:         return f'{self.__class__.__name__}({self.x!r}, {self.y!r})'",
          "274: numbers.Complex.register(Rect)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:         self.assertTypedEquals(0.9, 1.0 - F(1, 10))",
          "594:         self.assertTypedEquals(0.9 + 0j, (1.0 + 0j) - F(1, 10))",
          "596:         self.assertTypedEquals(F(1, 10), F(1, 10) * 1)",
          "597:         self.assertTypedEquals(0.1, F(1, 10) * 1.0)",
          "598:         self.assertTypedEquals(0.1 + 0j, F(1, 10) * (1.0 + 0j))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:     def testMixedMultiplication(self):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "600:         self.assertTypedEquals(0.1, 1.0 * F(1, 10))",
          "601:         self.assertTypedEquals(0.1 + 0j, (1.0 + 0j) * F(1, 10))",
          "603:         self.assertTypedEquals(F(1, 10), F(1, 10) / 1)",
          "604:         self.assertTypedEquals(0.1, F(1, 10) / 1.0)",
          "605:         self.assertTypedEquals(0.1 + 0j, F(1, 10) / (1.0 + 0j))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:         self.assertTypedEquals(F(3, 2) * DummyFraction(5, 3), F(5, 2))",
          "787:         self.assertTypedEquals(DummyFraction(5, 3) * F(3, 2), F(5, 2))",
          "788:         self.assertTypedEquals(F(3, 2) * Rat(5, 3), Rat(15, 6))",
          "789:         self.assertTypedEquals(Rat(5, 3) * F(3, 2), F(5, 2))",
          "791:         self.assertTypedEquals(F(3, 2) * Root(4), Root(F(9, 1)))",
          "792:         self.assertTypedEquals(Root(4) * F(3, 2), 3.0)",
          "794:         self.assertTypedEquals(F(3, 2) * Polar(4, 2), Polar(F(6, 1), 2))",
          "795:         self.assertTypedEquals(F(3, 2) * Polar(4.0, 2), Polar(6.0, 2))",
          "796:         self.assertTypedEquals(F(3, 2) * Rect(4, 3), Rect(F(6, 1), F(9, 2)))",
          "797:         self.assertRaises(TypeError, operator.mul, Polar(4, 2), F(3, 2))",
          "798:         self.assertTypedEquals(Rect(4, 3) * F(3, 2), 6.0 + 4.5j)",
          "800:         self.assertEqual(F(3, 2) * Symbolic('X'), Symbolic('3/2 * X'))",
          "801:         self.assertRaises(TypeError, operator.mul, Symbolic('X'), F(3, 2))",
          "803:     def testMixedDivision(self):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "607:         self.assertTypedEquals(10.0, 1.0 / F(1, 10))",
          "608:         self.assertTypedEquals(10.0 + 0j, (1.0 + 0j) / F(1, 10))",
          "610:         self.assertTypedEquals(0, F(1, 10) // 1)",
          "611:         self.assertTypedEquals(0.0, F(1, 10) // 1.0)",
          "612:         self.assertTypedEquals(10, 1 // F(1, 10))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:         self.assertTypedEquals(F(3, 2) / DummyFraction(3, 5), F(5, 2))",
          "812:         self.assertTypedEquals(DummyFraction(5, 3) / F(2, 3), F(5, 2))",
          "813:         self.assertTypedEquals(F(3, 2) / Rat(3, 5), Rat(15, 6))",
          "814:         self.assertTypedEquals(Rat(5, 3) / F(2, 3), F(5, 2))",
          "816:         self.assertTypedEquals(F(2, 3) / Root(4), Root(F(1, 9)))",
          "817:         self.assertTypedEquals(Root(4) / F(2, 3), 3.0)",
          "819:         self.assertTypedEquals(F(3, 2) / Polar(4, 2), Polar(F(3, 8), -2))",
          "820:         self.assertTypedEquals(F(3, 2) / Polar(4.0, 2), Polar(0.375, -2))",
          "821:         self.assertTypedEquals(F(3, 2) / Rect(4, 3), Rect(0.24, 0.18))",
          "822:         self.assertRaises(TypeError, operator.truediv, Polar(4, 2), F(2, 3))",
          "823:         self.assertTypedEquals(Rect(4, 3) / F(2, 3), 6.0 + 4.5j)",
          "825:         self.assertEqual(F(3, 2) / Symbolic('X'), Symbolic('3/2 / X'))",
          "826:         self.assertRaises(TypeError, operator.truediv, Symbolic('X'), F(2, 3))",
          "828:     def testMixedIntegerDivision(self):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "631:         self.assertTypedTupleEquals(divmod(-0.1, float('inf')), divmod(F(-1, 10), float('inf')))",
          "632:         self.assertTypedTupleEquals(divmod(-0.1, float('-inf')), divmod(F(-1, 10), float('-inf')))",
          "634:         # ** has more interesting conversion rules.",
          "635:         self.assertTypedEquals(F(100, 1), F(1, 10) ** -2)",
          "636:         self.assertTypedEquals(F(100, 1), F(10, 1) ** 2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:         self.assertTypedEquals(F(3, 2) % DummyFraction(3, 5), F(3, 10))",
          "854:         self.assertTypedEquals(DummyFraction(5, 3) % F(2, 3), F(1, 3))",
          "855:         self.assertTypedEquals(F(3, 2) % Rat(3, 5), Rat(3, 6))",
          "856:         self.assertTypedEquals(Rat(5, 3) % F(2, 3), F(1, 3))",
          "858:         self.assertRaises(TypeError, operator.mod, F(2, 3), Root(4))",
          "859:         self.assertTypedEquals(Root(4) % F(3, 2), 0.5)",
          "861:         self.assertRaises(TypeError, operator.mod, F(3, 2), Polar(4, 2))",
          "862:         self.assertRaises(TypeError, operator.mod, Rect(4, 3), F(2, 3))",
          "864:         self.assertEqual(F(3, 2) % Symbolic('X'), Symbolic('3/2 % X'))",
          "865:         self.assertRaises(TypeError, operator.mod, Symbolic('X'), F(2, 3))",
          "867:     def testMixedPower(self):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "647:         self.assertRaises(ZeroDivisionError, operator.pow,",
          "648:                           F(0, 1), -2)",
          "650:     def testMixingWithDecimal(self):",
          "651:         # Decimal refuses mixed arithmetic (but not mixed comparisons)",
          "652:         self.assertRaises(TypeError, operator.add,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:         self.assertTypedEquals(F(3, 2) ** Rat(3, 1), F(27, 8))",
          "885:         self.assertTypedEquals(F(3, 2) ** Rat(-3, 1), F(8, 27))",
          "886:         self.assertTypedEquals(F(-3, 2) ** Rat(-3, 1), F(-8, 27))",
          "887:         self.assertTypedEquals(F(9, 4) ** Rat(3, 2), 3.375)",
          "888:         self.assertIsInstance(F(4, 9) ** Rat(-3, 2), float)",
          "889:         self.assertAlmostEqual(F(4, 9) ** Rat(-3, 2), 3.375)",
          "890:         self.assertAlmostEqual(F(-4, 9) ** Rat(-3, 2), 3.375j)",
          "892:         self.assertTypedEquals(Rat(9, 4) ** F(3, 2), 3.375)",
          "893:         self.assertTypedEquals(Rat(3, 2) ** F(3, 1), Rat(27, 8))",
          "894:         self.assertTypedEquals(Rat(3, 2) ** F(-3, 1), F(8, 27))",
          "895:         self.assertIsInstance(Rat(4, 9) ** F(-3, 2), float)",
          "896:         self.assertAlmostEqual(Rat(4, 9) ** F(-3, 2), 3.375)",
          "898:         self.assertTypedEquals(Root(4) ** F(2, 3), Root(4, 3.0))",
          "899:         self.assertTypedEquals(Root(4) ** F(2, 1), Root(4, F(1)))",
          "900:         self.assertTypedEquals(Root(4) ** F(-2, 1), Root(4, -F(1)))",
          "901:         self.assertTypedEquals(Root(4) ** F(-2, 3), Root(4, -3.0))",
          "903:         self.assertTypedEquals(F(3, 2) ** Rect(2, 0), Polar(2.25, 0.0))",
          "904:         self.assertTypedEquals(F(1, 1) ** Rect(2, 3), Polar(1.0, 0.0))",
          "905:         self.assertTypedEquals(Polar(4, 2) ** F(3, 2), Polar(8.0, 3.0))",
          "906:         self.assertTypedEquals(Polar(4, 2) ** F(3, 1), Polar(64, 6))",
          "907:         self.assertTypedEquals(Polar(4, 2) ** F(-3, 1), Polar(0.015625, -6))",
          "908:         self.assertTypedEquals(Polar(4, 2) ** F(-3, 2), Polar(0.125, -3.0))",
          "910:         self.assertTypedEquals(F(3, 2) ** Symbolic('X'), Symbolic('1.5 ** X'))",
          "911:         self.assertTypedEquals(Symbolic('X') ** F(3, 2), Symbolic('X ** 1.5'))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6aee5edb84cfa23f430091270a4118e51894c767",
      "candidate_info": {
        "commit_hash": "6aee5edb84cfa23f430091270a4118e51894c767",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6aee5edb84cfa23f430091270a4118e51894c767",
        "files": [
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-120860: Fix a few bugs in `type_setattro` error paths. (GH-120861) (#120963)\n\nMoves the logic to update the type's dictionary to its own function in order\nto make the lock scoping more clear.\n\nAlso, ensure that `name` is decref'd on the error path.\n(cherry picked from commit dee63cb35971b87a09ddda5d6f29cd941f570720)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5465:     return _Py_type_getattro_impl((PyTypeObject *)type, name, NULL);",
          "5466: }",
          "5468: static int",
          "5469: type_setattro(PyObject *self, PyObject *name, PyObject *value)",
          "5470: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5468: static int",
          "5469: type_update_dict(PyTypeObject *type, PyDictObject *dict, PyObject *name,",
          "5470:                  PyObject *value, PyObject **old_value)",
          "5471: {",
          "5478:     if (_PyDict_GetItemRef_Unicode_LockHeld(dict, name, old_value) < 0) {",
          "5479:         return -1;",
          "5480:     }",
          "5483:         subclasses.  This could possibly be unified with the",
          "5484:         update_subclasses() recursion in update_slot(), but carefully:",
          "5485:         they each have their own conditions on which to stop",
          "5487:     type_modified_unlocked(type);",
          "5489:     if (_PyDict_SetItem_LockHeld(dict, name, value) < 0) {",
          "5490:         PyErr_Format(PyExc_AttributeError,",
          "5491:                      \"type object '%.50s' has no attribute '%U'\",",
          "5492:                      ((PyTypeObject*)type)->tp_name, name);",
          "5493:         _PyObject_SetAttributeErrorContext((PyObject *)type, name);",
          "5494:         return -1;",
          "5495:     }",
          "5497:     if (is_dunder_name(name)) {",
          "5498:         return update_slot(type, name);",
          "5499:     }",
          "5501:     return 0;",
          "5502: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5507:     assert(!_PyType_HasFeature(metatype, Py_TPFLAGS_INLINE_VALUES));",
          "5508:     assert(!_PyType_HasFeature(metatype, Py_TPFLAGS_MANAGED_DICT));",
          "5511:     PyObject *descr = _PyType_LookupRef(metatype, name);",
          "5512:     if (descr != NULL) {",
          "5513:         descrsetfunc f = Py_TYPE(descr)->tp_descr_set;",
          "5514:         if (f != NULL) {",
          "5516:             res = f(descr, (PyObject *)type, value);",
          "5517:             goto done;",
          "5518:         }",
          "",
          "[Removed Lines]",
          "5510:     PyObject *old_value;",
          "5515:             old_value = NULL;",
          "",
          "[Added Lines]",
          "5546:     PyObject *old_value = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5528:         }",
          "5529:         END_TYPE_LOCK();",
          "5530:         if (dict == NULL) {",
          "5532:         }",
          "5533:     }",
          "5541:     BEGIN_TYPE_DICT_LOCK(dict);",
          "5569:     assert(_PyType_CheckConsistency(type));",
          "5571:     END_TYPE_DICT_LOCK();",
          "5572: done:",
          "5573:     Py_DECREF(name);",
          "5574:     Py_XDECREF(descr);",
          "",
          "[Removed Lines]",
          "5531:             return -1;",
          "5543:     if (_PyDict_GetItemRef_Unicode_LockHeld((PyDictObject *)dict, name, &old_value) < 0) {",
          "5544:         return -1;",
          "5545:     }",
          "5548:         subclasses.  This could possibly be unified with the",
          "5549:         update_subclasses() recursion in update_slot(), but carefully:",
          "5550:         they each have their own conditions on which to stop",
          "5552:     type_modified_unlocked(type);",
          "5554:     res = _PyDict_SetItem_LockHeld((PyDictObject *)dict, name, value);",
          "5556:     if (res == 0) {",
          "5557:         if (is_dunder_name(name)) {",
          "5558:             res = update_slot(type, name);",
          "5559:         }",
          "5560:     }",
          "5561:     else if (PyErr_ExceptionMatches(PyExc_KeyError)) {",
          "5562:         PyErr_Format(PyExc_AttributeError,",
          "5563:                         \"type object '%.50s' has no attribute '%U'\",",
          "5564:                         ((PyTypeObject*)type)->tp_name, name);",
          "5566:         _PyObject_SetAttributeErrorContext((PyObject *)type, name);",
          "5567:     }",
          "",
          "[Added Lines]",
          "5566:             res = -1;",
          "5567:             goto done;",
          "5572:     res = type_update_dict(type, (PyDictObject *)dict, name, value, &old_value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c7aa5a99cce256ff726654038092a333a1f0531",
      "candidate_info": {
        "commit_hash": "7c7aa5a99cce256ff726654038092a333a1f0531",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7c7aa5a99cce256ff726654038092a333a1f0531",
        "files": [
          "Include/internal/pycore_optimizer.h",
          "Python/optimizer_analysis.c",
          "Python/optimizer_bytecodes.c",
          "Python/optimizer_cases.c.h",
          "Python/optimizer_symbols.c"
        ],
        "message": "[3.13] gh-119258: Backport optimizer frame fixes in GH-119365 (GH-120699)\n\n(cherry picked from commit 55402d3)",
        "before_after_code_files": [
          "Include/internal/pycore_optimizer.h||Include/internal/pycore_optimizer.h",
          "Python/optimizer_analysis.c||Python/optimizer_analysis.c",
          "Python/optimizer_bytecodes.c||Python/optimizer_bytecodes.c",
          "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h",
          "Python/optimizer_symbols.c||Python/optimizer_symbols.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_optimizer.h||Include/internal/pycore_optimizer.h": [
          "File: Include/internal/pycore_optimizer.h -> Include/internal/pycore_optimizer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: extern _Py_UOpsAbstractFrame *_Py_uop_frame_new(",
          "108:     _Py_UOpsContext *ctx,",
          "109:     PyCodeObject *co,",
          "113: extern int _Py_uop_frame_pop(_Py_UOpsContext *ctx);",
          "115: PyAPI_FUNC(PyObject *) _Py_uop_symbols_test(PyObject *self, PyObject *ignored);",
          "",
          "[Removed Lines]",
          "110:     _Py_UopsSymbol **localsplus_start,",
          "111:     int n_locals_already_filled,",
          "112:     int curr_stackentries);",
          "",
          "[Added Lines]",
          "110:     int curr_stackentries,",
          "111:     _Py_UopsSymbol **args,",
          "112:     int arg_len);",
          "",
          "---------------"
        ],
        "Python/optimizer_analysis.c||Python/optimizer_analysis.c": [
          "File: Python/optimizer_analysis.c -> Python/optimizer_analysis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:     if (_Py_uop_abstractcontext_init(ctx) < 0) {",
          "412:         goto out_of_space;",
          "413:     }",
          "415:     if (frame == NULL) {",
          "416:         return -1;",
          "417:     }",
          "",
          "[Removed Lines]",
          "414:     _Py_UOpsAbstractFrame *frame = _Py_uop_frame_new(ctx, co, ctx->n_consumed, 0, curr_stacklen);",
          "",
          "[Added Lines]",
          "414:     _Py_UOpsAbstractFrame *frame = _Py_uop_frame_new(ctx, co, curr_stacklen, NULL, 0);",
          "",
          "---------------"
        ],
        "Python/optimizer_bytecodes.c||Python/optimizer_bytecodes.c": [
          "File: Python/optimizer_bytecodes.c -> Python/optimizer_bytecodes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:             argcount++;",
          "617:         }",
          "624:         if (sym_is_null(self_or_null) || sym_is_not_null(self_or_null)) {",
          "627:         }",
          "630:     }",
          "632:     op(_PY_FRAME_GENERAL, (callable, self_or_null, args[oparg] -- new_frame: _Py_UOpsAbstractFrame *)) {",
          "",
          "[Removed Lines]",
          "619:         _Py_UopsSymbol **localsplus_start = ctx->n_consumed;",
          "620:         int n_locals_already_filled = 0;",
          "625:             localsplus_start = args;",
          "626:             n_locals_already_filled = argcount;",
          "628:         OUT_OF_SPACE_IF_NULL(new_frame =",
          "629:                              frame_new(ctx, co, localsplus_start, n_locals_already_filled, 0));",
          "",
          "[Added Lines]",
          "621:             OUT_OF_SPACE_IF_NULL(new_frame = frame_new(ctx, co, 0, args, argcount));",
          "622:         } else {",
          "623:             OUT_OF_SPACE_IF_NULL(new_frame = frame_new(ctx, co, 0, NULL, 0));",
          "",
          "---------------"
        ],
        "Python/optimizer_cases.c.h||Python/optimizer_cases.c.h": [
          "File: Python/optimizer_cases.c.h -> Python/optimizer_cases.c.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1696:                 args--;",
          "1697:                 argcount++;",
          "1698:             }",
          "1704:             if (sym_is_null(self_or_null) || sym_is_not_null(self_or_null)) {",
          "1707:             }",
          "1710:             stack_pointer[-2 - oparg] = (_Py_UopsSymbol *)new_frame;",
          "1711:             stack_pointer += -1 - oparg;",
          "1712:             break;",
          "",
          "[Removed Lines]",
          "1699:             _Py_UopsSymbol **localsplus_start = ctx->n_consumed;",
          "1700:             int n_locals_already_filled = 0;",
          "1705:                 localsplus_start = args;",
          "1706:                 n_locals_already_filled = argcount;",
          "1708:             OUT_OF_SPACE_IF_NULL(new_frame =",
          "1709:                              frame_new(ctx, co, localsplus_start, n_locals_already_filled, 0));",
          "",
          "[Added Lines]",
          "1700:                 OUT_OF_SPACE_IF_NULL(new_frame = frame_new(ctx, co, 0, args, argcount));",
          "1701:             } else {",
          "1702:                 OUT_OF_SPACE_IF_NULL(new_frame = frame_new(ctx, co, 0, NULL, 0));",
          "",
          "---------------"
        ],
        "Python/optimizer_symbols.c||Python/optimizer_symbols.c": [
          "File: Python/optimizer_symbols.c -> Python/optimizer_symbols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303: _Py_uop_frame_new(",
          "304:     _Py_UOpsContext *ctx,",
          "305:     PyCodeObject *co,",
          "309: {",
          "310:     assert(ctx->curr_frame_depth < MAX_ABSTRACT_FRAME_DEPTH);",
          "311:     _Py_UOpsAbstractFrame *frame = &ctx->frames[ctx->curr_frame_depth];",
          "",
          "[Removed Lines]",
          "306:     _Py_UopsSymbol **localsplus_start,",
          "307:     int n_locals_already_filled,",
          "308:     int curr_stackentries)",
          "",
          "[Added Lines]",
          "306:     int curr_stackentries,",
          "307:     _Py_UopsSymbol **args,",
          "308:     int arg_len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:     frame->stack_len = co->co_stacksize;",
          "314:     frame->locals_len = co->co_nlocalsplus;",
          "317:     frame->stack = frame->locals + co->co_nlocalsplus;",
          "318:     frame->stack_pointer = frame->stack + curr_stackentries;",
          "320:     if (ctx->n_consumed >= ctx->limit) {",
          "321:         return NULL;",
          "322:     }",
          "327:         _Py_UopsSymbol *local = _Py_uop_sym_new_unknown(ctx);",
          "331:         frame->locals[i] = local;",
          "332:     }",
          "",
          "[Removed Lines]",
          "316:     frame->locals = localsplus_start;",
          "319:     ctx->n_consumed = localsplus_start + (co->co_nlocalsplus + co->co_stacksize);",
          "326:     for (int i = n_locals_already_filled; i < co->co_nlocalsplus; i++) {",
          "328:         if (local == NULL) {",
          "329:             return NULL;",
          "330:         }",
          "",
          "[Added Lines]",
          "316:     frame->locals = ctx->n_consumed;",
          "319:     ctx->n_consumed = ctx->n_consumed + (co->co_nlocalsplus + co->co_stacksize);",
          "325:     for (int i = 0; i < arg_len; i++) {",
          "326:         frame->locals[i] = args[i];",
          "327:     }",
          "329:     for (int i = arg_len; i < co->co_nlocalsplus; i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:     for (int i = 0; i < curr_stackentries; i++) {",
          "337:         _Py_UopsSymbol *stackvar = _Py_uop_sym_new_unknown(ctx);",
          "341:         frame->stack[i] = stackvar;",
          "342:     }",
          "",
          "[Removed Lines]",
          "338:         if (stackvar == NULL) {",
          "339:             return NULL;",
          "340:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d481d4b7676f2e5d33465ca691346f69af655b24",
      "candidate_info": {
        "commit_hash": "d481d4b7676f2e5d33465ca691346f69af655b24",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/d481d4b7676f2e5d33465ca691346f69af655b24",
        "files": [
          "Lib/asyncio/base_subprocess.py",
          "Lib/test/test_asyncio/test_subprocess.py",
          "Misc/NEWS.d/next/Library/2024-06-29-05-08-59.gh-issue-87744.rpF6Jw.rst"
        ],
        "message": "[3.13] gh-87744: fix waitpid race while calling send_signal in asyncio (GH-121126) (#121194)\n\ngh-87744: fix waitpid race while calling send_signal in asyncio (GH-121126)\n\nasyncio earlier relied on subprocess module to send signals to the process, this has some drawbacks one being that subprocess module unnecessarily calls waitpid on child processes and hence it races with asyncio implementation which internally uses child watchers. To mitigate this, now asyncio sends signals directly to the process without going through the subprocess on non windows systems. On Windows it fallbacks to subprocess module handling but on windows there are no child watchers so this issue doesn't exists altogether.\n\n(cherry picked from commit bd473aa598c5161521a7018896dc124728214a6c)\n\nCo-authored-by: Kumar Aditya <kumaraditya@python.org>",
        "before_after_code_files": [
          "Lib/asyncio/base_subprocess.py||Lib/asyncio/base_subprocess.py",
          "Lib/test/test_asyncio/test_subprocess.py||Lib/test/test_asyncio/test_subprocess.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/asyncio/base_subprocess.py||Lib/asyncio/base_subprocess.py": [
          "File: Lib/asyncio/base_subprocess.py -> Lib/asyncio/base_subprocess.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import collections",
          "2: import subprocess",
          "3: import warnings",
          "5: from . import protocols",
          "6: from . import transports",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import os",
          "5: import signal",
          "6: import sys",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:         if self._proc is None:",
          "143:             raise ProcessLookupError()",
          "157:     async def _connect_pipes(self, waiter):",
          "158:         try:",
          "",
          "[Removed Lines]",
          "145:     def send_signal(self, signal):",
          "146:         self._check_proc()",
          "147:         self._proc.send_signal(signal)",
          "149:     def terminate(self):",
          "150:         self._check_proc()",
          "151:         self._proc.terminate()",
          "153:     def kill(self):",
          "154:         self._check_proc()",
          "155:         self._proc.kill()",
          "",
          "[Added Lines]",
          "148:     if sys.platform == 'win32':",
          "149:         def send_signal(self, signal):",
          "150:             self._check_proc()",
          "151:             self._proc.send_signal(signal)",
          "153:         def terminate(self):",
          "154:             self._check_proc()",
          "155:             self._proc.terminate()",
          "157:         def kill(self):",
          "158:             self._check_proc()",
          "159:             self._proc.kill()",
          "160:     else:",
          "161:         def send_signal(self, signal):",
          "162:             self._check_proc()",
          "163:             try:",
          "164:                 os.kill(self._proc.pid, signal)",
          "165:             except ProcessLookupError:",
          "166:                 pass",
          "168:         def terminate(self):",
          "169:             self.send_signal(signal.SIGTERM)",
          "171:         def kill(self):",
          "172:             self.send_signal(signal.SIGKILL)",
          "",
          "---------------"
        ],
        "Lib/test/test_asyncio/test_subprocess.py||Lib/test/test_asyncio/test_subprocess.py": [
          "File: Lib/test/test_asyncio/test_subprocess.py -> Lib/test/test_asyncio/test_subprocess.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "874:         self.loop.run_until_complete(main())",
          "877: if sys.platform != 'win32':",
          "878:     # Unix",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:     @unittest.skipIf(sys.platform != 'linux', \"Linux only\")",
          "877:     def test_subprocess_send_signal_race(self):",
          "878:         # See https://github.com/python/cpython/issues/87744",
          "879:         async def main():",
          "880:             for _ in range(10):",
          "881:                 proc = await asyncio.create_subprocess_exec('sleep', '0.1')",
          "882:                 await asyncio.sleep(0.1)",
          "883:                 try:",
          "884:                     proc.send_signal(signal.SIGUSR1)",
          "885:                 except ProcessLookupError:",
          "886:                     pass",
          "887:                 self.assertNotEqual(await proc.wait(), 255)",
          "889:         self.loop.run_until_complete(main())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9922178100e17f0264dd943ac838b2f7e8cfdab",
      "candidate_info": {
        "commit_hash": "e9922178100e17f0264dd943ac838b2f7e8cfdab",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e9922178100e17f0264dd943ac838b2f7e8cfdab",
        "files": [
          "Lib/_pyrepl/commands.py",
          "Lib/test/test_pyrepl.py"
        ],
        "message": "[3.13] gh-118877: Fix AssertionError crash in pyrepl (GH-118936) (#119363)\n\n(cherry picked from commit c0d81b256604a1079349d82d136db43eefcb3df1)\n\nCo-authored-by: Daniel Hollas <daniel.hollas@bristol.ac.uk>",
        "before_after_code_files": [
          "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py",
          "Lib/test/test_pyrepl.py||Lib/test/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py": [
          "File: Lib/_pyrepl/commands.py -> Lib/_pyrepl/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # types",
          "36: if False:",
          "38:     from .historical_reader import HistoricalReader",
          "42: class Command:",
          "",
          "[Removed Lines]",
          "37:     from .reader import Reader",
          "39:     from .console import Event",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:             x, y = r.pos2xy()",
          "246:             new_y = y - 1",
          "249:                 if r.historyi > 0:",
          "250:                     r.select_item(r.historyi - 1)",
          "251:                     return",
          "",
          "[Removed Lines]",
          "248:             if new_y < 0:",
          "",
          "[Added Lines]",
          "246:             if r.bol() == 0:",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl.py||Lib/test/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl.py -> Lib/test/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         output = multiline_input(reader, namespace)",
          "608:         self.assertEqual(output, \"python\")",
          "611: @patch(\"_pyrepl.curses.tigetstr\", lambda x: b\"\")",
          "612: class TestUnivEventQueue(TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:     def test_updown_arrow_with_completion_menu(self):",
          "611:         \"\"\"Up arrow in the middle of unfinished tab completion when the menu is displayed",
          "612:         should work and trigger going back in history. Down arrow should subsequently",
          "613:         get us back to the incomplete command.\"\"\"",
          "614:         code = \"import os\\nos.\\t\\t\"",
          "615:         namespace = {\"os\": os}",
          "617:         events = itertools.chain(",
          "618:             code_to_events(code),",
          "619:             [",
          "620:                 Event(evt='key', data='up', raw=bytearray(b'\\x1bOA')),",
          "621:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "622:             ],",
          "623:             code_to_events(\"\\n\")",
          "624:         )",
          "625:         reader = self.prepare_reader(events, namespace=namespace)",
          "626:         output = multiline_input(reader, namespace)",
          "627:         # This is the first line, nothing to see here",
          "628:         self.assertEqual(output, \"import os\")",
          "629:         # This is the second line. We pressed up and down arrows",
          "630:         # so we should end up where we were when we initiated tab completion.",
          "631:         output = multiline_input(reader, namespace)",
          "632:         self.assertEqual(output, \"os.\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}