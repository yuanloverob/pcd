{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1e123e9b2d59b6c147c37a37573e18ba1389036",
      "candidate_info": {
        "commit_hash": "b1e123e9b2d59b6c147c37a37573e18ba1389036",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b1e123e9b2d59b6c147c37a37573e18ba1389036",
        "files": [
          "configure.ac"
        ],
        "message": "configure.ac: Streamline detection of reallocarray\n\nThanks to Periklis Akritidis!",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: AC_CONFIG_MACRO_DIR([m4])",
          "8: AC_PROG_CC",
          "9: AC_PROG_CXX",
          "10: AC_PROG_LIBTOOL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: AC_USE_SYSTEM_EXTENSIONS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: ## Check for reallocarray",
          "59: ## Option for URI_SIZEDOWN",
          "",
          "[Removed Lines]",
          "41: AC_MSG_CHECKING(for reallocarray)",
          "42: AC_LINK_IFELSE([AC_LANG_SOURCE([",
          "44:     #include <stdlib.h>",
          "46:     int main() {",
          "47:         reallocarray(NULL, 0, 0);",
          "48:         return 0;",
          "49:     }",
          "50: ])],[",
          "51:     AC_DEFINE([HAVE_REALLOCARRAY], 1,",
          "52:         [Define to 1 if you have function reallocarray])",
          "53:     AC_MSG_RESULT(yes)",
          "54: ], [",
          "55:     AC_MSG_RESULT(no)",
          "56: ])",
          "",
          "[Added Lines]",
          "42: AC_CHECK_FUNCS([reallocarray])  # needs AC_USE_SYSTEM_EXTENSIONS (#define _GNU_SOURCE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0fd87f0bd61ef5c2d1f1cd22c11b2847786526ca",
      "candidate_info": {
        "commit_hash": "0fd87f0bd61ef5c2d1f1cd22c11b2847786526ca",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/0fd87f0bd61ef5c2d1f1cd22c11b2847786526ca",
        "files": [
          "ChangeLog",
          "include/uriparser/UriBase.h",
          "src/UriMemory.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "UriMemory.c: Implement tester and calloc/reallocarray emulation",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h",
          "src/UriMemory.c||src/UriMemory.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: void * uriEmulateCalloc(UriMemoryManager * memory,",
          "259:   size_t nmemb, size_t size);",
          "277: void * uriEmulateReallocarray(UriMemoryManager * memory,",
          "278:   void * ptr, size_t nmemb, size_t size);",
          "299: int uriTestMemoryManager(UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:  uriDefaultMalloc,",
          "123:  uriDefaultCalloc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: void * uriEmulateCalloc(UriMemoryManager * memory, size_t nmemb, size_t size) {",
          "122:  void * buffer;",
          "123:  const size_t total_size = nmemb * size;",
          "125:  if (memory == NULL) {",
          "126:   errno = EINVAL;",
          "127:   return NULL;",
          "128:  }",
          "131:  if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "132:   errno = ENOMEM;",
          "133:   return NULL;",
          "134:  }",
          "136:  buffer = memory->malloc(memory, total_size);",
          "137:  if (buffer == NULL) {",
          "138:   return NULL;",
          "139:  }",
          "140:  memset(buffer, 0, total_size);",
          "141:  return buffer;",
          "142: }",
          "146: void * uriEmulateReallocarray(UriMemoryManager * memory,",
          "147:   void * ptr, size_t nmemb, size_t size) {",
          "148:  const size_t total_size = nmemb * size;",
          "150:  if (memory == NULL) {",
          "151:   errno = EINVAL;",
          "152:   return NULL;",
          "153:  }",
          "156:  if ((nmemb != 0) && (total_size / nmemb != size)) {",
          "157:   errno = ENOMEM;",
          "158:   return NULL;",
          "159:  }",
          "161:  return memory->realloc(memory, ptr, total_size);",
          "162: }",
          "166: int uriTestMemoryManager(UriMemoryManager * memory) {",
          "167:  const size_t mallocSize = 7;",
          "168:  const size_t callocNmemb = 3;",
          "169:  const size_t callocSize = 5;",
          "170:  const size_t callocTotalSize = callocNmemb * callocSize;",
          "171:  const size_t reallocSize = 11;",
          "172:  const size_t reallocarrayNmemb = 5;",
          "173:  const size_t reallocarraySize = 7;",
          "174:  const size_t reallocarrayTotal = reallocarrayNmemb * reallocarraySize;",
          "175:  size_t index;",
          "176:  char * buffer;",
          "178:  if (memory == NULL) {",
          "179:   return URI_ERROR_NULL;",
          "180:  }",
          "182:  if (uriMemoryManagerIsComplete(memory) != URI_TRUE) {",
          "183:   return URI_ERROR_MEMORY_MANAGER_INCOMPLETE;",
          "184:  }",
          "187:  buffer = memory->malloc(memory, mallocSize);",
          "188:  if (buffer == NULL) {",
          "189:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "190:  }",
          "191:  buffer[mallocSize - 1] = '\\xF1';",
          "192:  memory->free(memory, buffer);",
          "193:  buffer = NULL;",
          "196:  buffer = memory->calloc(memory, callocNmemb, callocSize);",
          "197:  if (buffer == NULL) {",
          "198:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "199:  }",
          "201:   if (buffer[index] != '\\0') {",
          "202:    return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "203:   }",
          "204:  }",
          "205:  buffer[callocTotalSize - 1] = '\\xF2';",
          "206:  memory->free(memory, buffer);",
          "207:  buffer = NULL;",
          "210:  buffer = memory->malloc(memory, mallocSize);",
          "211:  if (buffer == NULL) {",
          "212:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "213:  }",
          "214:  for (index = 0; index < mallocSize; index++) {",
          "215:   buffer[index] = '\\xF3';",
          "216:  }",
          "217:  buffer = memory->realloc(memory, buffer, reallocSize);",
          "218:  if (buffer == NULL) {",
          "219:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "220:  }",
          "222:   if (buffer[index] != '\\xF3') {",
          "223:    return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "224:   }",
          "225:  }",
          "226:  buffer[reallocSize - 1] = '\\xF4';",
          "227:  memory->free(memory, buffer);",
          "228:  buffer = NULL;",
          "231:  buffer = memory->malloc(memory, mallocSize);",
          "232:  if (buffer == NULL) {",
          "233:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "234:  }",
          "235:  buffer[mallocSize - 1] = '\\xF5';",
          "236:  memory->realloc(memory, buffer, 0);",
          "237:  buffer = NULL;",
          "240:  buffer = memory->realloc(memory, NULL, mallocSize);",
          "241:  if (buffer == NULL) {",
          "242:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "243:  }",
          "244:  buffer[mallocSize - 1] = '\\xF6';",
          "245:  memory->free(memory, buffer);",
          "246:  buffer = NULL;",
          "249:  buffer = memory->malloc(memory, mallocSize);",
          "250:  if (buffer == NULL) {",
          "251:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "252:  }",
          "253:  for (index = 0; index < mallocSize; index++) {",
          "254:   buffer[index] = '\\xF7';",
          "255:  }",
          "256:  buffer = memory->reallocarray(memory, buffer, reallocarrayNmemb,",
          "257:    reallocarraySize);",
          "258:  if (buffer == NULL) {",
          "259:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "260:  }",
          "262:   if (buffer[index] != '\\xF7') {",
          "263:    return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "264:   }",
          "265:  }",
          "266:  buffer[reallocarrayTotal - 1] = '\\xF8';",
          "267:  memory->free(memory, buffer);",
          "268:  buffer = NULL;",
          "271:  buffer = memory->malloc(memory, mallocSize);",
          "272:  if (buffer == NULL) {",
          "273:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "274:  }",
          "275:  buffer[mallocSize - 1] = '\\xF9';",
          "276:  memory->reallocarray(memory, buffer, 0, reallocarraySize);",
          "277:  buffer = NULL;",
          "280:  buffer = memory->malloc(memory, mallocSize);",
          "281:  if (buffer == NULL) {",
          "282:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "283:  }",
          "284:  buffer[mallocSize - 1] = '\\xFA';",
          "285:  memory->reallocarray(memory, buffer, reallocarrayNmemb, 0);",
          "286:  buffer = NULL;",
          "289:  buffer = memory->reallocarray(memory, NULL, callocNmemb, callocSize);",
          "290:  if (buffer == NULL) {",
          "291:   return URI_ERROR_MEMORY_MANAGER_FAULTY;",
          "292:  }",
          "293:  buffer[callocTotalSize - 1] = '\\xFB';",
          "294:  memory->free(memory, buffer);",
          "295:  buffer = NULL;",
          "297:  return URI_SUCCESS;",
          "298: }",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <cassert>",
          "23: #include <gtest/gtest.h>",
          "25: #include <uriparser/Uri.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <cstring>  // memcpy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: TEST(FailingMemoryManagerSuite, AddBaseUriExMm) {",
          "163:  UriUriA absoluteDest;",
          "164:  UriUriA relativeSource = parse(\"foo\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: TEST(MemoryManagerTestingSuite, DefaultMemoryManager) {",
          "164:  ASSERT_EQ(uriTestMemoryManager(&defaultMemoryManager), URI_SUCCESS);",
          "165: }",
          "169: TEST(MemoryManagerTestingSuite, EmulateCalloc) {",
          "170:  UriMemoryManager partialEmulationMemoryManager;",
          "171:  memcpy(&partialEmulationMemoryManager, &defaultMemoryManager,",
          "172:    sizeof(UriMemoryManager));",
          "173:  partialEmulationMemoryManager.calloc = uriEmulateCalloc;",
          "175:  ASSERT_EQ(uriTestMemoryManager(&partialEmulationMemoryManager),",
          "176:    URI_SUCCESS);",
          "177: }",
          "181: TEST(MemoryManagerTestingSuite, EmulateReallocarray) {",
          "182:  UriMemoryManager partialEmulationMemoryManager;",
          "183:  memcpy(&partialEmulationMemoryManager, &defaultMemoryManager,",
          "184:    sizeof(UriMemoryManager));",
          "185:  partialEmulationMemoryManager.reallocarray = uriEmulateReallocarray;",
          "187:  ASSERT_EQ(uriTestMemoryManager(&partialEmulationMemoryManager),",
          "188:    URI_SUCCESS);",
          "189: }",
          "193: TEST(MemoryManagerTestingSuite, EmulateCallocAndReallocarray) {",
          "194:  UriMemoryManager partialEmulationMemoryManager;",
          "195:  memcpy(&partialEmulationMemoryManager, &defaultMemoryManager,",
          "196:    sizeof(UriMemoryManager));",
          "197:  partialEmulationMemoryManager.calloc = uriEmulateCalloc;",
          "198:  partialEmulationMemoryManager.reallocarray = uriEmulateReallocarray;",
          "200:  ASSERT_EQ(uriTestMemoryManager(&partialEmulationMemoryManager),",
          "201:    URI_SUCCESS);",
          "202: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a8d2ec8cfe9a6d04f680cbb73e69a6409c8f3ca",
      "candidate_info": {
        "commit_hash": "1a8d2ec8cfe9a6d04f680cbb73e69a6409c8f3ca",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/1a8d2ec8cfe9a6d04f680cbb73e69a6409c8f3ca",
        "files": [
          "Makefile.am",
          "src/UriMemory.c",
          "src/UriMemory.h"
        ],
        "message": "Expose defaultMemoryManager to be usable",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/UriMemory.c||src/UriMemory.c",
          "src/UriMemory.h||src/UriMemory.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  src/UriIp4Base.c \\",
          "50:  src/UriIp4Base.h \\",
          "51:  src/UriMemory.c \\",
          "52:  src/UriNormalize.c \\",
          "53:  src/UriNormalizeBase.c \\",
          "54:  src/UriNormalizeBase.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  src/UriMemory.h \\",
          "",
          "---------------"
        ],
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #ifndef URI_DOXYGEN",
          "47: #endif",
          "",
          "[Removed Lines]",
          "46: # include <uriparser/Uri.h>",
          "",
          "[Added Lines]",
          "46: # include \"UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     uriDefaultMalloc,",
          "75:     uriDefaultRealloc,",
          "76:     uriDefaultFree,",
          "",
          "[Removed Lines]",
          "73: static UriMemoryManager defaultMemoryManager = {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/UriMemory.h||src/UriMemory.h": [
          "File: src/UriMemory.h -> src/UriMemory.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #ifndef URI_DOXYGEN",
          "41: # include <uriparser/Uri.h>",
          "42: #endif",
          "46: extern UriMemoryManager defaultMemoryManager;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8ca7a211ad9be8e92e862629e61193864d73651",
      "candidate_info": {
        "commit_hash": "a8ca7a211ad9be8e92e862629e61193864d73651",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/a8ca7a211ad9be8e92e862629e61193864d73651",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseZeroMoreSlashSegs",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "185: static const URI_CHAR * URI_FUNC(ParseUriReference)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "186: static const URI_CHAR * URI_FUNC(ParseUriTail)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "187: static const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "190: static UriBool URI_FUNC(OnExitOwnHost2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "191: static UriBool URI_FUNC(OnExitOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, UriMemoryManager * memory);",
          "",
          "[Removed Lines]",
          "188: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "188: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "926:     return NULL;",
          "927:    }",
          "928:    afterZeroMoreSlashSegs",
          "930:    if (afterZeroMoreSlashSegs == NULL) {",
          "931:     return NULL;",
          "932:    }",
          "",
          "[Removed Lines]",
          "929:      = URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast);",
          "",
          "[Added Lines]",
          "929:      = URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1462:     URI_FUNC(StopMalloc)(state);",
          "1463:     return NULL;",
          "1464:    }",
          "1466:   }",
          "1468:  default:",
          "",
          "[Removed Lines]",
          "1465:    return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegmentNz, afterLast);",
          "",
          "[Added Lines]",
          "1465:    return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegmentNz, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1488:    return NULL;",
          "1489:   }",
          "1490:  }",
          "1492: }",
          "",
          "[Removed Lines]",
          "1491:  return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegmentNz, afterLast);",
          "",
          "[Added Lines]",
          "1491:  return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegmentNz, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1863:     return NULL;",
          "1864:    }",
          "1865:    afterZeroMoreSlashSegs",
          "1867:    if (afterZeroMoreSlashSegs == NULL) {",
          "1868:     return NULL;",
          "1869:    }",
          "",
          "[Removed Lines]",
          "1866:      = URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast);",
          "",
          "[Added Lines]",
          "1866:      = URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2044:  if (first >= afterLast) {",
          "2045:   return afterLast;",
          "2046:  }",
          "",
          "[Removed Lines]",
          "2041: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "2041: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(",
          "2042:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "2043:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2057:     URI_FUNC(StopMalloc)(state);",
          "2058:     return NULL;",
          "2059:    }",
          "2061:   }",
          "2063:  default:",
          "",
          "[Removed Lines]",
          "2060:    return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast);",
          "",
          "[Added Lines]",
          "2060:    return URI_FUNC(ParseZeroMoreSlashSegs)(state, afterSegment, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a9e235042c698c531e330d982c67b08c59e639c",
      "candidate_info": {
        "commit_hash": "2a9e235042c698c531e330d982c67b08c59e639c",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2a9e235042c698c531e330d982c67b08c59e639c",
        "files": [
          "src/UriNormalize.c"
        ],
        "message": "Pass memory manager to NormalizeSyntaxEngine",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static int URI_FUNC(NormalizeSyntaxEngine)(URI_TYPE(Uri) * uri, unsigned int inMask,",
          "81: static UriBool URI_FUNC(MakeRangeOwner)(unsigned int * doneMask,",
          "82:   unsigned int maskTest, URI_TYPE(TextRange) * range,",
          "",
          "[Removed Lines]",
          "79:   unsigned int * outMask);",
          "",
          "[Added Lines]",
          "79:   unsigned int * outMask, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472: unsigned int URI_FUNC(NormalizeSyntaxMaskRequired)(const URI_TYPE(Uri) * uri) {",
          "473:  unsigned int res;",
          "474: #if defined(__GNUC__) && ((__GNUC__ > 4) \\",
          "475:         || ((__GNUC__ == 4) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ >= 2)))",
          "477:  URI_TYPE(Uri) writeableClone;",
          "478:  memcpy(&writeableClone, uri, 1 * sizeof(URI_TYPE(Uri)));",
          "480: #else",
          "482: #endif",
          "483:  return res;",
          "484: }",
          "",
          "[Removed Lines]",
          "479:  URI_FUNC(NormalizeSyntaxEngine)(&writeableClone, 0, &res);",
          "481:  URI_FUNC(NormalizeSyntaxEngine)((URI_TYPE(Uri) *)uri, 0, &res);",
          "",
          "[Added Lines]",
          "480:  URI_FUNC(NormalizeSyntaxEngine)(&writeableClone, 0, &res, memory);",
          "482:  URI_FUNC(NormalizeSyntaxEngine)((URI_TYPE(Uri) *)uri, 0, &res, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "488: int URI_FUNC(NormalizeSyntaxEx)(URI_TYPE(Uri) * uri, unsigned int mask) {",
          "490: }",
          "",
          "[Removed Lines]",
          "489:  return URI_FUNC(NormalizeSyntaxEngine)(uri, mask, NULL);",
          "",
          "[Added Lines]",
          "491:  return URI_FUNC(NormalizeSyntaxEngine)(uri, mask, NULL, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "502:  unsigned int doneMask = URI_NORMALIZED;",
          "503:  if (uri == NULL) {",
          "504:   if (outMask != NULL) {",
          "",
          "[Removed Lines]",
          "500: static URI_INLINE int URI_FUNC(NormalizeSyntaxEngine)(URI_TYPE(Uri) * uri, unsigned int inMask, unsigned int * outMask) {",
          "",
          "[Added Lines]",
          "502: static URI_INLINE int URI_FUNC(NormalizeSyntaxEngine)(URI_TYPE(Uri) * uri,",
          "503:   unsigned int inMask, unsigned int * outMask,",
          "504:   UriMemoryManager * memory) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}