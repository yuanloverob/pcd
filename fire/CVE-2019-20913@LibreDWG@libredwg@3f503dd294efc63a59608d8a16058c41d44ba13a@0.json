{
  "cve_id": "CVE-2019-20913",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to a heap-based buffer over-read in dwg_encode_entity in common_entity_data.spec.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "3f503dd294efc63a59608d8a16058c41d44ba13a",
  "patch_info": {
    "commit_hash": "3f503dd294efc63a59608d8a16058c41d44ba13a",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/3f503dd294efc63a59608d8a16058c41d44ba13a",
    "files": [
      "src/classes.inc",
      "src/dec_macros.h"
    ],
    "message": "add DEBUGGING_CLASS_CPP\n\nand use it for TABLECONTENT.\nThis is more stable than CLASS_DXF in cases when\nTABLE is mixed up with TABLECONTENT. See e.g.\nGH #178, where it fixes the heap_overflow2 case.",
    "before_after_code_files": [
      "src/classes.inc||src/classes.inc",
      "src/dec_macros.h||src/dec_macros.h"
    ]
  },
  "patch_diff": {
    "src/classes.inc||src/classes.inc": [
      "File: src/classes.inc -> src/classes.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: # define DEBUGGING_DXF(action, name)                 ALLOW_DXF(action, name)",
      "54: # define DEBUGGING_CLASS(action, name)               UNSTABLE_CLASS(action, name)",
      "55: # define DEBUGGING_CLASS_DXF(action, name, _dxfname) UNSTABLE_CLASS_DXF(action, name, _dxfname)",
      "56: #else",
      "57: # define DEBUGGING_DXF(action, name)                 DISALLOW_DXF(action, name)",
      "58: # define DEBUGGING_CLASS(action, name)               UNHANDLED_CLASS(action, name)",
      "59: # define DEBUGGING_CLASS_DXF(action, name, _dxfname) UNHANDLED_CLASS_DXF(action, name, _dxfname)",
      "60: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: # define DEBUGGING_CLASS_CPP(action, name, _cppname) UNSTABLE_CLASS_CPP(action, name, _cppname)",
      "61: # define DEBUGGING_CLASS_CPP(action, name, _cppname) UNHANDLED_CLASS_CPP(action, name, _cppname)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:         obj->dxfname = (char*) #_name; \\",
      "124:         obj->fixedtype = DWG_TYPE_##_name; \\",
      "125:       } \\",
      "127:     }",
      "128: #define UNHANDLED_CLASS(action, _name) \\",
      "129:   if (klass->dxfname && strEQc (klass->dxfname, #_name)) \\",
      "",
      "[Removed Lines]",
      "126:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name)(dat, obj); \\",
      "",
      "[Added Lines]",
      "128:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name) (dat, obj); \\",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "144:       if (strEQc (_STR(action), \"decode\") || !memcmp (_STR(action), \"in\", 2)) { \\",
      "145:         obj->name = (char*) #_name; \\",
      "146:         obj->dxfname = (char*) #_dxfname; \\",
      "148:       } \\",
      "150:       return DWG_ERR_UNHANDLEDCLASS; \\",
      "151:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:       return DWG_ERR_UNHANDLEDCLASS; \\",
      "149:     }",
      "150: #define UNHANDLED_CLASS_CPP(action, _name, _cppname) \\",
      "151:   if (klass->cppname && strEQc (klass->cppname, #_cppname)) \\",
      "152:     { \\",
      "153:       WARN_UNHANDLED_CLASS; \\",
      "154:       if (strEQc (_STR(action), \"decode\") || !memcmp (_STR(action), \"in\", 2)) { \\",
      "155:         obj->name = (char*) #_name; \\",
      "156:         obj->dxfname = (char*) #_name; \\",
      "157:       } \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "170:   STABLE_CLASS    (ACTION, IMAGEDEF)",
      "171:   STABLE_CLASS    (ACTION, IMAGEDEF_REACTOR)",
      "172:   STABLE_CLASS    (ACTION, LAYER_INDEX)",
      "174:   STABLE_CLASS    (ACTION, LWPOLYLINE)",
      "176:   STABLE_CLASS    (ACTION, OBJECTCONTEXTDATA)",
      "177:   STABLE_CLASS_CPP(ACTION, OBJECTCONTEXTDATA, AcDbObjectContextData)",
      "178:   STABLE_CLASS_DXF(ACTION, PLACEHOLDER, ACDBPLACEHOLDER)",
      "",
      "[Removed Lines]",
      "173:   STABLE_CLASS    (ACTION, LAYOUT)",
      "175:   STABLE_CLASS    (ACTION, MLEADERSTYLE)",
      "",
      "[Added Lines]",
      "181:   STABLE_CLASS    (ACTION, LAYOUT) // TODO bottom_margin nan",
      "183:   STABLE_CLASS    (ACTION, MLEADERSTYLE) // TODO block_rotation nan",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "224:   DEBUGGING_CLASS     (ACTION, TABLEGEOMETRY) //wrong geom_data",
      "225:   DEBUGGING_CLASS     (ACTION, CELLSTYLEMAP) //broken",
      "226:   DEBUGGING_CLASS     (ACTION, MATERIAL)     //working on",
      "",
      "[Removed Lines]",
      "222:   DEBUGGING_CLASS     (ACTION, ARC_DIMENSION) //ent",
      "223:   DEBUGGING_CLASS     (ACTION, TABLECONTENT) //wrong values",
      "",
      "[Added Lines]",
      "231:   DEBUGGING_CLASS_CPP (ACTION, TABLECONTENT, AcDbTableContent)",
      "",
      "---------------"
    ],
    "src/dec_macros.h||src/dec_macros.h": [
      "File: src/dec_macros.h -> src/dec_macros.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1236:       obj_dat = *dat;                                                         \\",
      "1237:       hdl_dat = *dat;                                                         \\",
      "1238:       str_dat = *dat;                                                         \\",
      "1241:     }                                                                         \\",
      "1242:     else { error = dwg_decode_##token##_private (dat, dat, dat, obj); }       \\",
      "1243:     return error;                                                             \\",
      "",
      "[Removed Lines]",
      "1239:       error                                                                   \\",
      "1240:           = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat, obj); \\",
      "",
      "[Added Lines]",
      "1239:       error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,     \\",
      "1240:                                             obj);                             \\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "784829b23deead8f62fe49cf7d8dd082698a33a9",
      "candidate_info": {
        "commit_hash": "784829b23deead8f62fe49cf7d8dd082698a33a9",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/784829b23deead8f62fe49cf7d8dd082698a33a9",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: object.size overflow\n\ndecode fails when it overflows, but encode does not\nknow its final dat->size, so introduce a sensible limit.\nFixes the dos testcase of GH #178",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1662:   dat->bit = 0;",
          "1664:   LOG_INFO (\"Object number: %lu\", (unsigned long)obj->index);",
          "1665:   while (dat->byte + obj->size >= dat->size)",
          "1666:     bit_chain_alloc (dat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1665:   if (obj->size > 0x100000)",
          "1666:     {",
          "1667:       LOG_ERROR (\"Object size %u overflow\", obj->size);",
          "1668:       return DWG_ERR_VALUEOUTOFBOUNDS;",
          "1669:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0ad00da16fd57a4c9fefdab85c3bb0725a9ac74",
      "candidate_info": {
        "commit_hash": "f0ad00da16fd57a4c9fefdab85c3bb0725a9ac74",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/f0ad00da16fd57a4c9fefdab85c3bb0725a9ac74",
        "files": [
          "src/in_json.c"
        ],
        "message": "in_json: ignore OBJECTS index field\n\nwe really need to use our own for an reliable objid.\nIt is treated just as a comment.\n\nAlso fixup TableCellContent_Attr.index subclass field.\nFixes GH #178 fuzzing crashes",
        "before_after_code_files": [
          "src/in_json.c||src/in_json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/in_json.c||src/in_json.c": [
          "File: src/in_json.c -> src/in_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1678:               if (!obj->dxfname)",
          "1679:                 obj->dxfname = strdup (name);",
          "1680:             }",
          "1682:             {",
          "1683:               BITCODE_RL index = (BITCODE_RL)json_long (dat, tokens);",
          "1684:               if (obj->index != index)",
          "1686:                           obj->index)",
          "1692:               LOG_TRACE (\"index: %d\\n\", obj->index)",
          "1693:             }",
          "1694:           else if (strEQc (key, \"type\") && !obj->type)",
          "",
          "[Removed Lines]",
          "1681:           else if (strEQc (key, \"index\")) // TODO not TableCellContent_Attr",
          "1685:                 LOG_WARN (\"Unexpected %s.index %d, expected %d\", name, index,",
          "1687:               obj->index = index;",
          "1688:               if (is_entity)",
          "1689:                 obj->tio.entity->objid = obj->index;",
          "1690:               else",
          "1691:                 obj->tio.object->objid = obj->index;",
          "",
          "[Added Lines]",
          "1681:           else if (strEQc (key, \"index\") && strNE (name, \"TableCellContent_Attr\"))",
          "1685:                 LOG_WARN (\"Ignore wrong %s.index %d, expected %d\", name, index,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95cc9300430d35feb05b06a9badf678419463dbe",
      "candidate_info": {
        "commit_hash": "95cc9300430d35feb05b06a9badf678419463dbe",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/95cc9300430d35feb05b06a9badf678419463dbe",
        "files": [
          "src/bits.c"
        ],
        "message": "encode: protect from stack under-flow\n\nFrom GH #178 fuzzing",
        "before_after_code_files": [
          "src/bits.c||src/bits.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/bits.c||src/bits.c": [
          "File: src/bits.c -> src/bits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "883:     if (byte[i] & 0x7f)",
          "884:       break;",
          "887:     i--;",
          "888:   byte[i] &= 0x7f;",
          "889:   if (negative)",
          "",
          "[Removed Lines]",
          "886:   if (byte[i] & 0x40)",
          "",
          "[Added Lines]",
          "886:   if (byte[i] & 0x40 && i > 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:     if (byte[i] & 0x7f)",
          "954:       break;",
          "957:     i--;",
          "958:   byte[i] &= 0x7f;",
          "959:   for (j = 4; j >= i; j--)",
          "",
          "[Removed Lines]",
          "956:   if (byte[i] & 0x40)",
          "",
          "[Added Lines]",
          "956:   if (byte[i] & 0x40 && i > 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6875ad84d2c77e14b74a98a3abc051ccad1711c9",
      "candidate_info": {
        "commit_hash": "6875ad84d2c77e14b74a98a3abc051ccad1711c9",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/6875ad84d2c77e14b74a98a3abc051ccad1711c9",
        "files": [
          "src/in_json.c"
        ],
        "message": "in_json: fatal error if OBJECTS handle is missing\n\nFixes GH #178 fuzzing crashes",
        "before_after_code_files": [
          "src/in_json.c||src/in_json.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/in_json.c||src/in_json.c": [
          "File: src/in_json.c -> src/in_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:                    && t->type == JSMN_PRIMITIVE)",
          "1731:             {",
          "1732:               obj->size = json_long (dat, tokens);",
          "1733:               LOG_TRACE (\"size: %d\\n\", obj->size)",
          "1734:             }",
          "1735:           else if (strEQc (key, \"bitsize\") && !obj->bitsize)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1733:               if (!obj->handle.value)",
          "1734:                 {",
          "1735:                   LOG_ERROR (\"Required %s.handle missing\", name)",
          "1736:                   return DWG_ERR_INVALIDDWG;",
          "1737:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7913b893bfa98fab27f05825dc4cab2d3a20c83",
      "candidate_info": {
        "commit_hash": "d7913b893bfa98fab27f05825dc4cab2d3a20c83",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/d7913b893bfa98fab27f05825dc4cab2d3a20c83",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: fix empty FIELD_2DD_VECTOR\n\nFixes GH #178 null_pointer1 case",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: #define FIELD_2DD_VECTOR(nam, size, dxf)                                      \\",
          "283:   OVERFLOW_CHECK (nam, _obj->size)                                            \\",
          "285:   for (vcount = 1; vcount < (BITCODE_BL)_obj->size; vcount++)                 \\",
          "286:     {                                                                         \\",
          "287:       FIELD_2DD (nam[vcount], FIELD_VALUE (nam[vcount - 1].x),                \\",
          "",
          "[Removed Lines]",
          "284:   FIELD_2RD (nam[0], dxf);                                                    \\",
          "",
          "[Added Lines]",
          "284:   if (_obj->size)                                                             \\",
          "285:     FIELD_2RD (nam[0], dxf);                                                  \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}