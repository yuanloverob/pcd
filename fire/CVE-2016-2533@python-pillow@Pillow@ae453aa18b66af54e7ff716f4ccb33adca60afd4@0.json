{
  "cve_id": "CVE-2016-2533",
  "cve_desc": "Buffer overflow in the ImagingPcdDecode function in PcdDecode.c in Pillow before 3.1.1 and Python Imaging Library (PIL) 1.1.7 and earlier allows remote attackers to cause a denial of service (crash) via a crafted PhotoCD file.",
  "repo": "python-pillow/Pillow",
  "patch_hash": "ae453aa18b66af54e7ff716f4ccb33adca60afd4",
  "patch_info": {
    "commit_hash": "ae453aa18b66af54e7ff716f4ccb33adca60afd4",
    "repo": "python-pillow/Pillow",
    "commit_url": "https://github.com/python-pillow/Pillow/commit/ae453aa18b66af54e7ff716f4ccb33adca60afd4",
    "files": [
      "Tests/images/hopper.pcd",
      "Tests/test_file_pcd.py",
      "libImaging/PcdDecode.c"
    ],
    "message": "PCD decoder overruns the shuffle buffer, Fixes #568",
    "before_after_code_files": [
      "Tests/test_file_pcd.py||Tests/test_file_pcd.py",
      "libImaging/PcdDecode.c||libImaging/PcdDecode.c"
    ]
  },
  "patch_diff": {
    "Tests/test_file_pcd.py||Tests/test_file_pcd.py": [
      "File: Tests/test_file_pcd.py -> Tests/test_file_pcd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from helper import unittest, PillowTestCase, hopper",
      "2: from PIL import Image",
      "4: class TestFilePcd(PillowTestCase):",
      "6:     def test_load_raw(self):",
      "7:         im = Image.open('Tests/images/hopper.pcd')",
      "8:         im.load() # should not segfault.",
      "10:         # Note that this image was created with a resized hopper",
      "11:         # image, which was then converted to pcd with imagemagick",
      "12:         # and the colors are wonky in Pillow.  It's unclear if this",
      "13:         # is a pillow or a convert issue, as other images not generated",
      "14:         # from convert look find on pillow and not imagemagick.",
      "16:         #target = hopper().resize((768,512))",
      "17:         #self.assert_image_similar(im, target, 10)",
      "",
      "---------------"
    ],
    "libImaging/PcdDecode.c||libImaging/PcdDecode.c": [
      "File: libImaging/PcdDecode.c -> libImaging/PcdDecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:      out[0] = ptr[x];",
      "48:      out[1] = ptr[(x+4*state->xsize)/2];",
      "49:      out[2] = ptr[(x+5*state->xsize)/2];",
      "51:  }",
      "53:  state->shuffle((UINT8*) im->image[state->y],",
      "",
      "[Removed Lines]",
      "50:      out += 4;",
      "",
      "[Added Lines]",
      "50:      out += 3;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:      out[0] = ptr[x+state->xsize];",
      "63:      out[1] = ptr[(x+4*state->xsize)/2];",
      "64:      out[2] = ptr[(x+5*state->xsize)/2];",
      "66:  }",
      "68:  state->shuffle((UINT8*) im->image[state->y],",
      "",
      "[Removed Lines]",
      "65:      out += 4;",
      "",
      "[Added Lines]",
      "65:      out += 3;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c581d8abfbf38e2eeae8e516cd4b99cc366a9574",
      "candidate_info": {
        "commit_hash": "c581d8abfbf38e2eeae8e516cd4b99cc366a9574",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/c581d8abfbf38e2eeae8e516cd4b99cc366a9574",
        "files": [
          "Tests/test_file_pcd.py"
        ],
        "message": "added __main__ clause",
        "before_after_code_files": [
          "Tests/test_file_pcd.py||Tests/test_file_pcd.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/python-pillow/Pillow/pull/1706"
        ],
        "olp_code_files": {
          "patch": [
            "Tests/test_file_pcd.py||Tests/test_file_pcd.py"
          ],
          "candidate": [
            "Tests/test_file_pcd.py||Tests/test_file_pcd.py"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_file_pcd.py||Tests/test_file_pcd.py": [
          "File: Tests/test_file_pcd.py -> Tests/test_file_pcd.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:         #target = hopper().resize((768,512))",
          "17:         #self.assert_image_similar(im, target, 10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: if __name__ == '__main__':",
          "21:     unittest.main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "677b958a7fb1903738dad2ba9dbf04bbe3bbe41a",
      "candidate_info": {
        "commit_hash": "677b958a7fb1903738dad2ba9dbf04bbe3bbe41a",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/677b958a7fb1903738dad2ba9dbf04bbe3bbe41a",
        "files": [
          "PIL/DdsImagePlugin.py",
          "PIL/FtexImagePlugin.py",
          "PIL/GbrImagePlugin.py",
          "PIL/JpegImagePlugin.py",
          "PIL/TiffImagePlugin.py",
          "PIL/TiffTags.py",
          "Tests/check_fli_overflow.py",
          "Tests/check_libtiff_segfault.py",
          "Tests/test_file_dds.py",
          "Tests/test_file_ftex.py",
          "Tests/test_file_gbr.py",
          "Tests/test_file_jpeg.py",
          "Tests/test_file_libtiff.py",
          "Tests/test_file_pcd.py",
          "Tests/test_file_tiff.py",
          "Tests/test_file_tiff_metadata.py",
          "Tests/test_image_getim.py",
          "Tests/test_image_resample.py",
          "Tests/test_tiff_ifdrational.py",
          "docs/releasenotes/3.1.0.rst"
        ],
        "message": "Health fixes",
        "before_after_code_files": [
          "PIL/DdsImagePlugin.py||PIL/DdsImagePlugin.py",
          "PIL/FtexImagePlugin.py||PIL/FtexImagePlugin.py",
          "PIL/GbrImagePlugin.py||PIL/GbrImagePlugin.py",
          "PIL/JpegImagePlugin.py||PIL/JpegImagePlugin.py",
          "PIL/TiffImagePlugin.py||PIL/TiffImagePlugin.py",
          "PIL/TiffTags.py||PIL/TiffTags.py",
          "Tests/check_fli_overflow.py||Tests/check_fli_overflow.py",
          "Tests/check_libtiff_segfault.py||Tests/check_libtiff_segfault.py",
          "Tests/test_file_dds.py||Tests/test_file_dds.py",
          "Tests/test_file_ftex.py||Tests/test_file_ftex.py",
          "Tests/test_file_gbr.py||Tests/test_file_gbr.py",
          "Tests/test_file_jpeg.py||Tests/test_file_jpeg.py",
          "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py",
          "Tests/test_file_pcd.py||Tests/test_file_pcd.py",
          "Tests/test_file_tiff.py||Tests/test_file_tiff.py",
          "Tests/test_file_tiff_metadata.py||Tests/test_file_tiff_metadata.py",
          "Tests/test_image_getim.py||Tests/test_image_getim.py",
          "Tests/test_image_resample.py||Tests/test_image_resample.py",
          "Tests/test_tiff_ifdrational.py||Tests/test_tiff_ifdrational.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Tests/test_file_pcd.py||Tests/test_file_pcd.py"
          ],
          "candidate": [
            "Tests/test_file_pcd.py||Tests/test_file_pcd.py"
          ]
        }
      },
      "candidate_diff": {
        "PIL/DdsImagePlugin.py||PIL/DdsImagePlugin.py": [
          "File: PIL/DdsImagePlugin.py -> PIL/DdsImagePlugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:             raise IOError(\"Truncated DDS file\")",
          "254:         finally:",
          "255:             self.fp.close()",
          "260:     def load_seek(self, pos):",
          "261:         pass",
          "",
          "[Removed Lines]",
          "257:         self.fp = BytesIO(decoded_data)",
          "",
          "[Added Lines]",
          "257:         self.fp = BytesIO(decoded_data)",
          "",
          "---------------"
        ],
        "PIL/FtexImagePlugin.py||PIL/FtexImagePlugin.py": [
          "File: PIL/FtexImagePlugin.py -> PIL/FtexImagePlugin.py"
        ],
        "PIL/GbrImagePlugin.py||PIL/GbrImagePlugin.py": [
          "File: PIL/GbrImagePlugin.py -> PIL/GbrImagePlugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: def _accept(prefix):",
          "36: ##",
          "",
          "[Removed Lines]",
          "33:     return len(prefix) >= 8 and i32(prefix[:4]) >= 20 and i32(prefix[4:8]) in (1,2)",
          "",
          "[Added Lines]",
          "33:     return len(prefix) >= 8 and i32(prefix[:4]) >= 20 and i32(prefix[4:8]) in (1, 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         version = i32(self.fp.read(4))",
          "47:         if header_size < 20:",
          "48:             raise SyntaxError(\"not a GIMP brush\")",
          "52:         width = i32(self.fp.read(4))",
          "53:         height = i32(self.fp.read(4))",
          "54:         color_depth = i32(self.fp.read(4))",
          "56:             raise SyntaxError(\"not a GIMP brush\")",
          "60:         if version == 1:",
          "61:             comment_length = header_size-20",
          "62:         else:",
          "",
          "[Removed Lines]",
          "49:         if version not in (1,2):",
          "50:             raise SyntaxError(\"Unsupported GIMP brush version: %s\" %version)",
          "55:         if width <= 0 or height <= 0:",
          "57:         if color_depth not in (1,4):",
          "58:             raise SyntaxError(\"Unsupported GMP brush color depth: %s\" %color_depth)",
          "",
          "[Added Lines]",
          "49:         if version not in (1, 2):",
          "50:             raise SyntaxError(\"Unsupported GIMP brush version: %s\" % version)",
          "55:         if width <= 0 or height <= 0:",
          "57:         if color_depth not in (1, 4):",
          "58:             raise SyntaxError(\"Unsupported GMP brush color depth: %s\" % color_depth)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:         # Image might not be small",
          "81:         Image._decompression_bomb_check(self.size)",
          "84:         self._data_size = width * height * color_depth",
          "86:     def load(self):",
          "",
          "[Removed Lines]",
          "83:         # Data is an uncompressed block of w * h * bytes/pixel",
          "",
          "[Added Lines]",
          "83:         # Data is an uncompressed block of w * h * bytes/pixel",
          "",
          "---------------"
        ],
        "PIL/JpegImagePlugin.py||PIL/JpegImagePlugin.py": [
          "File: PIL/JpegImagePlugin.py -> PIL/JpegImagePlugin.py"
        ],
        "PIL/TiffImagePlugin.py||PIL/TiffImagePlugin.py": [
          "File: PIL/TiffImagePlugin.py -> PIL/TiffImagePlugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: import sys",
          "58: import warnings",
          "63: __version__ = \"1.3.5\"",
          "",
          "[Removed Lines]",
          "60: from .TiffTags import TYPES, TagInfo",
          "",
          "[Added Lines]",
          "60: from .TiffTags import TYPES",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:     def __hash__(self):",
          "305:         return self._val.__hash__()",
          "308:         return self._val == other",
          "310:     def _delegate(op):",
          "311:         def delegate(self, *args):",
          "313:         return delegate",
          "315:     \"\"\" a = ['add','radd', 'sub', 'rsub','div', 'rdiv', 'mul', 'rmul',",
          "",
          "[Removed Lines]",
          "307:     def __eq__(self,other):",
          "312:             return getattr(self._val,op)(*args)",
          "",
          "[Added Lines]",
          "306:     def __eq__(self, other):",
          "311:             return getattr(self._val, op)(*args)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1127:         self.info[\"compression\"] = self._compression",
          "1132:         if xres and yres:",
          "1133:             resunit = self.tag_v2.get(RESOLUTION_UNIT, 1)",
          "",
          "[Removed Lines]",
          "1129:         xres = self.tag_v2.get(X_RESOLUTION,1)",
          "1130:         yres = self.tag_v2.get(Y_RESOLUTION,1)",
          "",
          "[Added Lines]",
          "1127:         xres = self.tag_v2.get(X_RESOLUTION, 1)",
          "1128:         yres = self.tag_v2.get(Y_RESOLUTION, 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1416:         if hasattr(im, 'tag'):",
          "1417:             legacy_ifd = im.tag.to_v2()",
          "1418:         for tag, value in itertools.chain(ifd.items(),",
          "1421:             # Libtiff can only process certain core items without adding",
          "1422:             # them to the custom dictionary. It will segfault if it attempts",
          "1423:             # to add a custom tag without the dictionary entry",
          "1424:             #",
          "1425:             # UNDONE --  add code for the custom dictionary",
          "1427:             if tag not in atts and tag not in blocklist:",
          "1428:                 if isinstance(value, unicode if bytes is str else str):",
          "1429:                     atts[tag] = value.encode('ascii', 'replace') + b\"\\0\"",
          "",
          "[Removed Lines]",
          "1419:                                     getattr(im, 'tag_v2', {}).items(),",
          "1420:                                     legacy_ifd.items()):",
          "1426:             if tag not in TiffTags.LIBTIFF_CORE: continue",
          "",
          "[Added Lines]",
          "1417:                                           getattr(im, 'tag_v2', {}).items(),",
          "1418:                                           legacy_ifd.items()):",
          "1424:             if tag not in TiffTags.LIBTIFF_CORE:",
          "1425:                 continue",
          "",
          "---------------"
        ],
        "PIL/TiffTags.py||PIL/TiffTags.py": [
          "File: PIL/TiffTags.py -> PIL/TiffTags.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "379: # some of these are not in our TAGS_V2 dict and were included from tiff.h",
          "398: # Note to advanced users: There may be combinations of these",
          "399: # parameters and values that when added properly, will work and",
          "",
          "[Removed Lines]",
          "381: LIBTIFF_CORE = set ([255, 256, 257, 258, 259, 262, 263, 266, 274, 277,",
          "382:                      278, 280, 281, 340, 341, 282, 283, 284, 286, 287,",
          "383:                      296, 297, 321, 320, 338, 32995, 322, 323, 32998,",
          "384:                      32996, 339, 32997, 330, 531, 530, 301, 532, 333,",
          "385:                      # as above",
          "386:                      269 # this has been in our tests forever, and works",
          "387:                      ])",
          "389: LIBTIFF_CORE.remove(320) # Array of short, crashes",
          "390: LIBTIFF_CORE.remove(301) # Array of short, crashes",
          "391: LIBTIFF_CORE.remove(532) # Array of long, crashes",
          "393: LIBTIFF_CORE.remove(255) # We don't have support for subfiletypes",
          "394: LIBTIFF_CORE.remove(322) # We don't have support for tiled images in libtiff",
          "395: LIBTIFF_CORE.remove(323) # Tiled images",
          "396: LIBTIFF_CORE.remove(333) # Ink Names either",
          "",
          "[Added Lines]",
          "382: LIBTIFF_CORE = set([255, 256, 257, 258, 259, 262, 263, 266, 274, 277,",
          "383:                     278, 280, 281, 340, 341, 282, 283, 284, 286, 287,",
          "384:                     296, 297, 321, 320, 338, 32995, 322, 323, 32998,",
          "385:                     32996, 339, 32997, 330, 531, 530, 301, 532, 333,",
          "386:                     # as above",
          "387:                     269  # this has been in our tests forever, and works",
          "388:                     ])",
          "390: LIBTIFF_CORE.remove(320)  # Array of short, crashes",
          "391: LIBTIFF_CORE.remove(301)  # Array of short, crashes",
          "392: LIBTIFF_CORE.remove(532)  # Array of long, crashes",
          "394: LIBTIFF_CORE.remove(255)  # We don't have support for subfiletypes",
          "395: LIBTIFF_CORE.remove(322)  # We don't have support for tiled images in libtiff",
          "396: LIBTIFF_CORE.remove(323)  # Tiled images",
          "397: LIBTIFF_CORE.remove(333)  # Ink Names either",
          "",
          "---------------"
        ],
        "Tests/check_fli_overflow.py||Tests/check_fli_overflow.py": [
          "File: Tests/check_fli_overflow.py -> Tests/check_fli_overflow.py"
        ],
        "Tests/check_libtiff_segfault.py||Tests/check_libtiff_segfault.py": [
          "File: Tests/check_libtiff_segfault.py -> Tests/check_libtiff_segfault.py"
        ],
        "Tests/test_file_dds.py||Tests/test_file_dds.py": [
          "File: Tests/test_file_dds.py -> Tests/test_file_dds.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:         im = Image.open(TEST_FILE_DXT1)",
          "19:         im.load()",
          "21:         self.assertEqual(im.format, \"DDS\")",
          "22:         self.assertEqual(im.mode, \"RGBA\")",
          "23:         self.assertEqual(im.size, (256, 256))",
          "26:         self.assert_image_equal(target.convert('RGBA'), im)",
          "28:     def test_sanity_dxt5(self):",
          "",
          "[Removed Lines]",
          "25:         # This target image is from the test set of images, and is exact.",
          "",
          "[Added Lines]",
          "25:         # This target image is from the test set of images, and is exact.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:         # a little brighter. The 0,0 pixel is (00,6c,f8,ff) by our code,",
          "43:         # and by the target image for the DXT1, and the imagemagick .png",
          "44:         # is giving (00, 6d, ff, ff).  So, assert similar, pretty tight",
          "46:         self.assert_image_similar(target, im, 5)",
          "48:     def test_sanity_dxt3(self):",
          "",
          "[Removed Lines]",
          "45:         # I'm currently seeing about a 3 for the epsilon.",
          "",
          "[Added Lines]",
          "45:         # I'm currently seeing about a 3 for the epsilon.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:             img_file = f.read()",
          "80:         def short_header():",
          "83:         self.assertRaises(IOError, short_header)",
          "85:     def test_short_file(self):",
          "86:         \"\"\" Check that the appropriate error is thrown for a short file\"\"\"",
          "88:         with open(TEST_FILE_DXT5, 'rb') as f:",
          "89:             img_file = f.read()",
          "91:         def short_file():",
          "94:         self.assertRaises(IOError, short_file)",
          "",
          "[Removed Lines]",
          "81:             im = Image.open(BytesIO(img_file[:119]))",
          "92:             im = Image.open(BytesIO(img_file[:-100]))",
          "",
          "[Added Lines]",
          "81:             Image.open(BytesIO(img_file[:119]))",
          "92:             Image.open(BytesIO(img_file[:-100]))",
          "",
          "---------------"
        ],
        "Tests/test_file_ftex.py||Tests/test_file_ftex.py": [
          "File: Tests/test_file_ftex.py -> Tests/test_file_ftex.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from PIL import Image",
          "4: class TestFileFtex(PillowTestCase):",
          "6:     def test_load_raw(self):",
          "",
          "[Removed Lines]",
          "1: from helper import unittest, PillowTestCase",
          "",
          "[Added Lines]",
          "1: from helper import PillowTestCase",
          "",
          "---------------"
        ],
        "Tests/test_file_gbr.py||Tests/test_file_gbr.py": [
          "File: Tests/test_file_gbr.py -> Tests/test_file_gbr.py"
        ],
        "Tests/test_file_jpeg.py||Tests/test_file_jpeg.py": [
          "File: Tests/test_file_jpeg.py -> Tests/test_file_jpeg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     def test_exif_rollback(self):",
          "192:         # rolling back exif support in 3.1 to pre-3.0 formatting.",
          "193:         # expected from 2.9, with b/u qualifiers switched for 3.2 compatibility",
          "195:         expected_exif = {34867: 4294967295,",
          "207:                          271: 'Make',",
          "214:                          33434: (4294967295, 1)}",
          "216:         im = Image.open('Tests/images/exif_gps.jpg')",
          "",
          "[Removed Lines]",
          "194:         # this test passes on 2.9 and 3.1, but not 3.0",
          "196:                          258: (24, 24, 24),",
          "197:                          36867: '2099:09:29 10:10:10',",
          "198:                          34853: {0: b'\\x00\\x00\\x00\\x01',",
          "199:                                  2: (4294967295, 1),",
          "200:                                  5: b'\\x01',",
          "201:                                  30: 65535,",
          "202:                                  29: '1999:99:99 99:99:99'},",
          "203:                          296: 65535,",
          "204:                          34665: 185,",
          "205:                          41994: 65535,",
          "206:                          514: 4294967295,",
          "208:                          272: 'XXX-XXX',",
          "209:                          305: 'PIL',",
          "210:                          42034: ((1, 1), (1, 1), (1, 1), (1, 1)),",
          "211:                          42035: 'LensMake',",
          "212:                          34856: b'\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa',",
          "213:                          282: (4294967295, 1),",
          "",
          "[Added Lines]",
          "194:         # this test passes on 2.9 and 3.1, but not 3.0",
          "196:                          258: (24, 24, 24),",
          "197:                          36867: '2099:09:29 10:10:10',",
          "198:                          34853: {0: b'\\x00\\x00\\x00\\x01',",
          "199:                                  2: (4294967295, 1),",
          "200:                                  5: b'\\x01',",
          "201:                                  30: 65535,",
          "202:                                  29: '1999:99:99 99:99:99'},",
          "203:                          296: 65535,",
          "204:                          34665: 185,",
          "205:                          41994: 65535,",
          "206:                          514: 4294967295,",
          "208:                          272: 'XXX-XXX',",
          "209:                          305: 'PIL',",
          "210:                          42034: ((1, 1), (1, 1), (1, 1), (1, 1)),",
          "211:                          42035: 'LensMake',",
          "212:                          34856: b'\\xaa\\xaa\\xaa\\xaa\\xaa\\xaa',",
          "213:                          282: (4294967295, 1),",
          "",
          "---------------"
        ],
        "Tests/test_file_libtiff.py||Tests/test_file_libtiff.py": [
          "File: Tests/test_file_libtiff.py -> Tests/test_file_libtiff.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         # these should not crash. Seriously dummy data, most of it doesn't make",
          "177:         # any sense, so we're running up against limits where we're asking",
          "178:         # libtiff to do stupid things.",
          "180:         # Get the list of the ones that we should be able to write",
          "183:                                                         in TiffTags.LIBTIFF_CORE]",
          "184:                           if info.type is not None)",
          "186:         # Exclude ones that have special meaning that we're already testing them",
          "187:         im = Image.open('Tests/images/hopper_g4.tif')",
          "188:         for tag in im.tag_v2.keys():",
          "189:             try:",
          "190:                 del(core_items[tag])",
          "193:         # Type codes:",
          "194:         #     2: \"ascii\",",
          "",
          "[Removed Lines]",
          "182:         core_items = dict((tag, info) for tag, info in [(s,TiffTags.lookup(s)) for s",
          "191:             except: pass",
          "",
          "[Added Lines]",
          "182:         core_items = dict((tag, info) for tag, info in [(s, TiffTags.lookup(s)) for s",
          "191:             except:",
          "192:                 pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:         #     5: \"rational\",",
          "198:         #     12: \"double\",",
          "199:         # type: dummy value",
          "207:         new_ifd = TiffImagePlugin.ImageFileDirectory_v2()",
          "208:         for tag, info in core_items.items():",
          "",
          "[Removed Lines]",
          "200:         values = { 2: 'test',",
          "201:                    3: 1,",
          "202:                    4: 2**20,",
          "203:                    5: TiffImagePlugin.IFDRational(100,1),",
          "204:                    12: 1.05 }",
          "",
          "[Added Lines]",
          "201:         values = {2: 'test',",
          "202:                   3: 1,",
          "203:                   4: 2**20,",
          "204:                   5: TiffImagePlugin.IFDRational(100, 1),",
          "205:                   12: 1.05}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:             else:",
          "214:                 new_ifd[tag] = tuple(values[info.type] for _ in range(info.length))",
          "217:         del(new_ifd[338])",
          "219:         out = self.tempfile(\"temp.tif\")",
          "220:         TiffImagePlugin.WRITE_LIBTIFF = True",
          "222:         im.save(out, tiffinfo=new_ifd)",
          "228:     def test_g3_compression(self):",
          "229:         i = Image.open('Tests/images/hopper_g4_500.tif')",
          "",
          "[Removed Lines]",
          "216:         # Extra samples really doesn't make sense in this application.",
          "224:         TiffImagePlugin.WRITE_LIBTIFF = False",
          "",
          "[Added Lines]",
          "216:         # Extra samples really doesn't make sense in this application.",
          "224:         TiffImagePlugin.WRITE_LIBTIFF = False",
          "",
          "---------------"
        ],
        "Tests/test_file_pcd.py||Tests/test_file_pcd.py": [
          "File: Tests/test_file_pcd.py -> Tests/test_file_pcd.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from PIL import Image",
          "4: class TestFilePcd(PillowTestCase):",
          "6:     def test_load_raw(self):",
          "7:         im = Image.open('Tests/images/hopper.pcd')",
          "10:         # Note that this image was created with a resized hopper",
          "11:         # image, which was then converted to pcd with imagemagick",
          "12:         # and the colors are wonky in Pillow.  It's unclear if this",
          "13:         # is a pillow or a convert issue, as other images not generated",
          "14:         # from convert look find on pillow and not imagemagick.",
          "20: if __name__ == '__main__':",
          "21:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: from helper import unittest, PillowTestCase, hopper",
          "8:         im.load() # should not segfault.",
          "16:         #target = hopper().resize((768,512))",
          "17:         #self.assert_image_similar(im, target, 10)",
          "",
          "[Added Lines]",
          "1: from helper import unittest, PillowTestCase",
          "9:         im.load()  # should not segfault.",
          "17:         # target = hopper().resize((768,512))",
          "18:         # self.assert_image_similar(im, target, 10)",
          "",
          "---------------"
        ],
        "Tests/test_file_tiff.py||Tests/test_file_tiff.py": [
          "File: Tests/test_file_tiff.py -> Tests/test_file_tiff.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         self.assertIsInstance(im.tag[X_RESOLUTION][0], tuple)",
          "85:         self.assertIsInstance(im.tag[Y_RESOLUTION][0], tuple)",
          "88:         self.assertIsInstance(im.tag_v2[X_RESOLUTION], TiffImagePlugin.IFDRational)",
          "89:         self.assertIsInstance(im.tag_v2[Y_RESOLUTION], TiffImagePlugin.IFDRational)",
          "",
          "[Removed Lines]",
          "87:         #v2 api",
          "",
          "[Added Lines]",
          "87:         # v2 api",
          "",
          "---------------"
        ],
        "Tests/test_file_tiff_metadata.py||Tests/test_file_tiff_metadata.py": [
          "File: Tests/test_file_tiff_metadata.py -> Tests/test_file_tiff_metadata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         original = img.tag_v2.named()",
          "123:         reloaded = loaded.tag_v2.named()",
          "126:             if type(v) == IFDRational:",
          "128:             if type(v) == tuple and \\",
          "130:                 original[k] = tuple([IFDRational(",
          "133:         ignored = ['StripByteCounts', 'RowsPerStrip',",
          "134:                    'PageNumber', 'StripOffsets']",
          "136:         for tag, value in reloaded.items():",
          "138:             if (type(original[tag]) == tuple",
          "140:                 # Need to compare element by element in the tuple,",
          "141:                 # not comparing tuples of object references",
          "142:                 self.assert_deep_equal(original[tag],",
          "",
          "[Removed Lines]",
          "125:         for k,v in original.items():",
          "127:                 original[k] = IFDRational(*_limit_rational(v,2**31))",
          "129:                 type(v[0]) == IFDRational:",
          "137:             if tag in ignored: continue",
          "139:                 and type(original[tag][0]) == IFDRational):",
          "",
          "[Added Lines]",
          "125:         for k, v in original.items():",
          "127:                 original[k] = IFDRational(*_limit_rational(v, 2**31))",
          "129:                type(v[0]) == IFDRational:",
          "137:             if tag in ignored:",
          "138:                 continue",
          "140:                and type(original[tag][0]) == IFDRational):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     def test_exif_div_zero(self):",
          "189:         im = hopper()",
          "190:         info = TiffImagePlugin.ImageFileDirectory_v2()",
          "193:         out = self.tempfile('temp.tiff')",
          "194:         im.save(out, tiffinfo=info, compression='raw')",
          "",
          "[Removed Lines]",
          "191:         info[41988] = TiffImagePlugin.IFDRational(0,0)",
          "",
          "[Added Lines]",
          "192:         info[41988] = TiffImagePlugin.IFDRational(0, 0)",
          "",
          "---------------"
        ],
        "Tests/test_image_getim.py||Tests/test_image_getim.py": [
          "File: Tests/test_image_getim.py -> Tests/test_image_getim.py"
        ],
        "Tests/test_image_resample.py||Tests/test_image_resample.py": [
          "File: Tests/test_image_resample.py -> Tests/test_image_resample.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from helper import unittest, PillowTestCase, hopper",
          "2: from PIL import Image",
          "4: class TestImagingCoreResize(PillowTestCase):",
          "6:     def test_overflow(self):",
          "7:         im = hopper('L')",
          "8:         xsize = 0x100000008 // 4",
          "10:         try:",
          "11:             # any resampling filter will do here",
          "13:             self.fail(\"Resize should raise MemoryError on invalid xsize\")",
          "14:         except MemoryError:",
          "15:             self.assertTrue(True, \"Should raise MemoryError\")",
          "",
          "[Removed Lines]",
          "5:     #see https://github.com/python-pillow/Pillow/issues/1710",
          "9:         ysize = 1000 # unimportant",
          "12:             im.im.resize((xsize, ysize), Image.LINEAR)",
          "",
          "[Added Lines]",
          "6:     # see https://github.com/python-pillow/Pillow/issues/1710",
          "10:         ysize = 1000  # unimportant",
          "13:             im.im.resize((xsize, ysize), Image.LINEAR)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     def test_invalid_size(self):",
          "18:         im = hopper()",
          "21:         self.assertTrue(True, \"Should not Crash\")",
          "23:         try:",
          "25:             self.fail(\"Resize should raise a value error on x negative size\")",
          "26:         except ValueError:",
          "27:             self.assertTrue(True, \"Should raise ValueError\")",
          "29:         try:",
          "31:             self.fail(\"Resize should raise a value error on y negative size\")",
          "32:         except ValueError:",
          "33:             self.assertTrue(True, \"Should raise ValueError\")",
          "",
          "[Removed Lines]",
          "20:         im.resize((100,100))",
          "24:             im.resize((-100,100))",
          "30:             im.resize((100,-100))",
          "",
          "[Added Lines]",
          "21:         im.resize((100, 100))",
          "25:             im.resize((-100, 100))",
          "31:             im.resize((100, -100))",
          "",
          "---------------"
        ],
        "Tests/test_tiff_ifdrational.py||Tests/test_tiff_ifdrational.py": [
          "File: Tests/test_tiff_ifdrational.py -> Tests/test_tiff_ifdrational.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from fractions import Fraction",
          "13:     def _test_equal(self, num, denom, target):",
          "",
          "[Removed Lines]",
          "10: class Test_IFDRational(PillowTestCase):",
          "",
          "[Added Lines]",
          "11: class Test_IFDRational(PillowTestCase):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     def test_sanity(self):",
          "22:         self._test_equal(1, 1, 1)",
          "25:         self._test_equal(2, 2, 1)",
          "35:     def test_nonetype(self):",
          "36:         \" Fails if the _delegate function doesn't return a valid function\"",
          "",
          "[Removed Lines]",
          "23:         self._test_equal(1, 1, Fraction(1,1))",
          "26:         self._test_equal(1.0, 1, Fraction(1,1))",
          "28:         self._test_equal(Fraction(1,1), 1, Fraction(1,1))",
          "29:         self._test_equal(IFDRational(1,1), 1, 1)",
          "32:         self._test_equal(1, 2, Fraction(1,2))",
          "33:         self._test_equal(1, 2, IFDRational(1,2))",
          "",
          "[Added Lines]",
          "23:         self._test_equal(1, 1, Fraction(1, 1))",
          "26:         self._test_equal(1.0, 1, Fraction(1, 1))",
          "28:         self._test_equal(Fraction(1, 1), 1, Fraction(1, 1))",
          "29:         self._test_equal(IFDRational(1, 1), 1, 1)",
          "31:         self._test_equal(1, 2, Fraction(1, 2))",
          "32:         self._test_equal(1, 2, IFDRational(1, 2))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:         self.assertTrue(xres and 1)",
          "46:         self.assertTrue(xres and yres)",
          "49:     def test_ifd_rational_save(self):",
          "50:         for libtiff in (True, False):",
          "51:             TiffImagePlugin.WRITE_LIBTIFF = libtiff",
          "53:             im = hopper()",
          "54:             out = self.tempfile('temp.tiff')",
          "58:             reloaded = Image.open(out)",
          "60:                              float(reloaded.tag_v2[282]))",
          "",
          "[Removed Lines]",
          "55:             res = IFDRational(301,1)",
          "56:             im.save(out, dpi=(res,res), compression='raw')",
          "59:             self.assertEqual(float(IFDRational(301,1)),",
          "",
          "[Added Lines]",
          "53:             res = IFDRational(301, 1)",
          "54:             im.save(out, dpi=(res, res), compression='raw')",
          "57:             self.assertEqual(float(IFDRational(301, 1)),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bdf54b5a76b54fb00bd05f2d733e0a4173eefc9",
      "candidate_info": {
        "commit_hash": "5bdf54b5a76b54fb00bd05f2d733e0a4173eefc9",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/5bdf54b5a76b54fb00bd05f2d733e0a4173eefc9",
        "files": [
          "Tests/images/hopper.pcd",
          "Tests/test_file_pcd.py",
          "libImaging/PcdDecode.c"
        ],
        "message": "PCD decoder overruns the shuffle buffer, Fixes #568",
        "before_after_code_files": [
          "Tests/test_file_pcd.py||Tests/test_file_pcd.py",
          "libImaging/PcdDecode.c||libImaging/PcdDecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Tests/test_file_pcd.py||Tests/test_file_pcd.py",
            "libImaging/PcdDecode.c||libImaging/PcdDecode.c"
          ],
          "candidate": [
            "Tests/test_file_pcd.py||Tests/test_file_pcd.py",
            "libImaging/PcdDecode.c||libImaging/PcdDecode.c"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_file_pcd.py||Tests/test_file_pcd.py": [
          "File: Tests/test_file_pcd.py -> Tests/test_file_pcd.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from helper import unittest, PillowTestCase, hopper",
          "2: from PIL import Image",
          "4: class TestFilePcd(PillowTestCase):",
          "6:     def test_load_raw(self):",
          "7:         im = Image.open('Tests/images/hopper.pcd')",
          "8:         im.load() # should not segfault.",
          "10:         # Note that this image was created with a resized hopper",
          "11:         # image, which was then converted to pcd with imagemagick",
          "12:         # and the colors are wonky in Pillow.  It's unclear if this",
          "13:         # is a pillow or a convert issue, as other images not generated",
          "14:         # from convert look find on pillow and not imagemagick.",
          "16:         #target = hopper().resize((768,512))",
          "17:         #self.assert_image_similar(im, target, 10)",
          "20: if __name__ == '__main__':",
          "21:     unittest.main()",
          "",
          "---------------"
        ],
        "libImaging/PcdDecode.c||libImaging/PcdDecode.c": [
          "File: libImaging/PcdDecode.c -> libImaging/PcdDecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:      out[0] = ptr[x];",
          "48:      out[1] = ptr[(x+4*state->xsize)/2];",
          "49:      out[2] = ptr[(x+5*state->xsize)/2];",
          "51:  }",
          "53:  state->shuffle((UINT8*) im->image[state->y],",
          "",
          "[Removed Lines]",
          "50:      out += 4;",
          "",
          "[Added Lines]",
          "50:      out += 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:      out[0] = ptr[x+state->xsize];",
          "63:      out[1] = ptr[(x+4*state->xsize)/2];",
          "64:      out[2] = ptr[(x+5*state->xsize)/2];",
          "66:  }",
          "68:  state->shuffle((UINT8*) im->image[state->y],",
          "",
          "[Removed Lines]",
          "65:      out += 4;",
          "",
          "[Added Lines]",
          "65:      out += 3;",
          "",
          "---------------"
        ]
      }
    }
  ]
}