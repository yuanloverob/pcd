{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7993268beb9442c063d142860135bd5d84c2946e",
      "candidate_info": {
        "commit_hash": "7993268beb9442c063d142860135bd5d84c2946e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7993268beb9442c063d142860135bd5d84c2946e",
        "files": [
          "Misc/NEWS.d/next/Build/2024-06-09-15-54-22.gh-issue-120291.IpfHzE.rst",
          "Misc/python-config.sh.in"
        ],
        "message": "[3.13] gh-120291: Fix a bashism in python-config.sh.in (GH-120292) (#120341)\n\ngh-120291: Fix a bashism in python-config.sh.in (GH-120292)\n\ngh-120291: Fix bashisms in python-config.sh.in\n\nReplace the use of bash-specific `[[ ... ]]` with POSIX-compliant\n`[ ... ]` to make the `python-config` shell script work with non-bash\nshells again.  While at it, use `local` in a safer way, since it is\nnot in POSIX either (though universally supported).\n\nFixes GH-120291\n(cherry picked from commit 7d2447137e117ea9a6ee1493bce0b071c76b1bd7)\n\nCo-authored-by: Micha\u0142 G\u00f3rny <mgorny@gentoo.org>",
        "before_after_code_files": [
          "Misc/python-config.sh.in||Misc/python-config.sh.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Misc/python-config.sh.in||Misc/python-config.sh.in": [
          "File: Misc/python-config.sh.in -> Misc/python-config.sh.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: exit_with_usage ()",
          "6: {",
          "10:     else",
          "12:     fi",
          "13:     exit $1",
          "14: }",
          "",
          "[Removed Lines]",
          "7:     local USAGE=\"Usage: $0 --prefix|--exec-prefix|--includes|--libs|--cflags|--ldflags|--extension-suffix|--help|--abiflags|--configdir|--embed\"",
          "8:     if [[ \"$1\" -eq 0 ]]; then",
          "9:         echo \"$USAGE\"",
          "11:         echo \"$USAGE\" >&2",
          "",
          "[Added Lines]",
          "7:     local usage",
          "8:     usage=\"Usage: $0 --prefix|--exec-prefix|--includes|--libs|--cflags|--ldflags|--extension-suffix|--help|--abiflags|--configdir|--embed\"",
          "9:     if [ \"$1\" -eq 0 ]; then",
          "10:         echo \"$usage\"",
          "12:         echo \"$usage\" >&2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a266f7e74ce1ff4ad6e88f05473cc6a22ab7e20",
      "candidate_info": {
        "commit_hash": "0a266f7e74ce1ff4ad6e88f05473cc6a22ab7e20",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/0a266f7e74ce1ff4ad6e88f05473cc6a22ab7e20",
        "files": [
          "Doc/c-api/reflection.rst",
          "Doc/data/refcounts.dat",
          "Doc/whatsnew/3.13.rst",
          "Lib/test/test_sys.py",
          "Objects/frameobject.c",
          "Python/bytecodes.c",
          "Python/executor_cases.c.h",
          "Python/generated_cases.c.h",
          "Python/sysmodule.c"
        ],
        "message": "[3.13] gh-74929: PEP 667 C API documentation (gh-119892)\n\n* Add docs for new APIs\n* Add soft-deprecation notices\n* Add What's New porting entries\n* Update comments referencing `PyFrame_LocalsToFast()` to mention the proxy instead\n* Other related cleanups found when looking for refs to the deprecated APIs\n\n(cherry picked from commit 3859e09e3d92d004978dd838f0511364e7edfb94)\n\nCo-authored-by: Alyssa Coghlan <ncoghlan@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_sys.py||Lib/test/test_sys.py",
          "Objects/frameobject.c||Objects/frameobject.c",
          "Python/bytecodes.c||Python/bytecodes.c",
          "Python/executor_cases.c.h||Python/executor_cases.c.h",
          "Python/generated_cases.c.h||Python/generated_cases.c.h",
          "Python/sysmodule.c||Python/sysmodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_sys.py||Lib/test/test_sys.py": [
          "File: Lib/test/test_sys.py -> Lib/test/test_sys.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:     @test.support.refcount_test",
          "396:     def test_refcount(self):",
          "401:         global n",
          "402:         self.assertRaises(TypeError, sys.getrefcount)",
          "403:         c = sys.getrefcount(None)",
          "",
          "[Removed Lines]",
          "397:         # n here must be a global in order for this test to pass while",
          "398:         # tracing with a python function.  Tracing calls PyFrame_FastToLocals",
          "399:         # which will add a copy of any locals to the frame object, causing",
          "400:         # the reference count to increase by 2 instead of 1.",
          "",
          "[Added Lines]",
          "397:         # n here originally had to be a global in order for this test to pass",
          "398:         # while tracing with a python function. Tracing used to call",
          "399:         # PyFrame_FastToLocals, which would add a copy of any locals to the",
          "400:         # frame object, causing the ref count to increase by 2 instead of 1.",
          "401:         # While that no longer happens (due to PEP 667), this test case retains",
          "402:         # its original global-based implementation",
          "403:         # PEP 683's immortal objects also made this point moot, since the",
          "404:         # refcount for None doesn't change anyway. Maybe this test should be",
          "405:         # using a different constant value? (e.g. an integer)",
          "",
          "---------------"
        ],
        "Objects/frameobject.c||Objects/frameobject.c": [
          "File: Objects/frameobject.c -> Objects/frameobject.c"
        ],
        "Python/bytecodes.c||Python/bytecodes.c": [
          "File: Python/bytecodes.c -> Python/bytecodes.c"
        ],
        "Python/executor_cases.c.h||Python/executor_cases.c.h": [
          "File: Python/executor_cases.c.h -> Python/executor_cases.c.h"
        ],
        "Python/generated_cases.c.h||Python/generated_cases.c.h": [
          "File: Python/generated_cases.c.h -> Python/generated_cases.c.h"
        ],
        "Python/sysmodule.c||Python/sysmodule.c": [
          "File: Python/sysmodule.c -> Python/sysmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"pycore_sysmodule.h\"     // export _PySys_GetSizeOf()",
          "36: #include \"pycore_tuple.h\"         // _PyTuple_FromArray()",
          "39: #include \"pydtrace.h\"             // PyDTrace_AUDIT()",
          "40: #include \"osdefs.h\"               // DELIM",
          "41: #include \"stdlib_module_names.h\"  // _Py_stdlib_module_names",
          "",
          "[Removed Lines]",
          "38: #include \"frameobject.h\"          // PyFrame_FastToLocalsWithError()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8860f83e4b451181e46b0400a4c5019387776b1d",
      "candidate_info": {
        "commit_hash": "8860f83e4b451181e46b0400a4c5019387776b1d",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8860f83e4b451181e46b0400a4c5019387776b1d",
        "files": [
          "Lib/_pyrepl/keymap.py",
          "Lib/_pyrepl/reader.py"
        ],
        "message": "[3.13] gh-119035: Add Ctrl+\u2190 and Ctrl+\u2192 word-skipping keybindings to new repl (GH-119248) (#119323)\n\nadd word-skipping ctrl keybindings to new repl\n(cherry picked from commit 0398d9339217aa0710c0de45a7e9b587136e7129)\n\nCo-authored-by: Alastair Stanley <alastairstanley@ntlworld.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/keymap.py||Lib/_pyrepl/keymap.py",
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/keymap.py||Lib/_pyrepl/keymap.py": [
          "File: Lib/_pyrepl/keymap.py -> Lib/_pyrepl/keymap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:             ret = key[s]",
          "178:             s += 1",
          "179:     if ctrl:",
          "183:     if meta:",
          "184:         ret = [\"\\033\", ret]",
          "185:     else:",
          "",
          "[Removed Lines]",
          "180:         if len(ret) > 1:",
          "181:             raise KeySpecError(\"\\\\C- must be followed by a character\")",
          "182:         ret = chr(ord(ret) & 0x1F)  # curses.ascii.ctrl()",
          "",
          "[Added Lines]",
          "180:         if len(ret) == 1:",
          "181:             ret = chr(ord(ret) & 0x1F)  # curses.ascii.ctrl()",
          "182:         elif ret in {\"left\", \"right\"}:",
          "183:             ret = f\"ctrl {ret}\"",
          "184:         else:",
          "185:             raise KeySpecError(\"\\\\C- followed by invalid key\")",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         (r\"\\<up>\", \"up\"),",
          "137:         (r\"\\<down>\", \"down\"),",
          "138:         (r\"\\<left>\", \"left\"),",
          "139:         (r\"\\<right>\", \"right\"),",
          "140:         (r\"\\<delete>\", \"delete\"),",
          "141:         (r\"\\<backspace>\", \"backspace\"),",
          "142:         (r\"\\M-\\<backspace>\", \"backward-kill-word\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:         (r\"\\C-\\<left>\", \"backward-word\"),",
          "141:         (r\"\\C-\\<right>\", \"forward-word\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6c4080aaa646d8d3a0e54a6de7557b230c09341",
      "candidate_info": {
        "commit_hash": "a6c4080aaa646d8d3a0e54a6de7557b230c09341",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a6c4080aaa646d8d3a0e54a6de7557b230c09341",
        "files": [
          "Lib/test/test_free_threading/test_type.py",
          "Lib/test/test_super.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-10-15-07-16.gh-issue-120198.WW_pjO.rst",
          "Objects/typeobject.c"
        ],
        "message": "gh-120198: Fix race condition when editing __class__ with an audit hook active (GH-120195)\n\n(cherry picked from commit 203565b2f9c74656ba519780049b46d4e5afcba1)\n\nCo-authored-by: Ken Jin <kenjin@python.org>",
        "before_after_code_files": [
          "Lib/test/test_free_threading/test_type.py||Lib/test/test_free_threading/test_type.py",
          "Lib/test/test_super.py||Lib/test/test_super.py",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_free_threading/test_type.py||Lib/test/test_free_threading/test_type.py": [
          "File: Lib/test/test_free_threading/test_type.py -> Lib/test/test_free_threading/test_type.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import unittest",
          "3: from concurrent.futures import ThreadPoolExecutor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import threading",
          "",
          "---------------"
        ],
        "Lib/test/test_super.py||Lib/test/test_super.py": [
          "File: Lib/test/test_super.py -> Lib/test/test_super.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Unit tests for zero-argument super() & related machinery.\"\"\"",
          "3: import textwrap",
          "4: import unittest",
          "5: from unittest.mock import patch",
          "9: ADAPTIVE_WARMUP_DELAY = 2",
          "",
          "[Removed Lines]",
          "6: from test.support import import_helper",
          "",
          "[Added Lines]",
          "4: import threading",
          "7: from test.support import import_helper, threading_helper",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:         for _ in range(ADAPTIVE_WARMUP_DELAY):",
          "506:             C.some(C)",
          "509: if __name__ == \"__main__\":",
          "510:     unittest.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:     @threading_helper.requires_working_threading()",
          "510:     def test___class___modification_multithreaded(self):",
          "511:         \"\"\" Note: this test isn't actually testing anything on its own.",
          "512:         It requires a sys audithook to be set to crash on older Python.",
          "513:         This should be the case anyways as our test suite sets",
          "514:         an audit hook.",
          "515:         \"\"\"",
          "516:         class Foo:",
          "517:             pass",
          "519:         class Bar:",
          "520:             pass",
          "522:         thing = Foo()",
          "523:         def work():",
          "524:             foo = thing",
          "525:             for _ in range(5000):",
          "526:                 foo.__class__ = Bar",
          "527:                 type(foo)",
          "528:                 foo.__class__ = Foo",
          "529:                 type(foo)",
          "532:         threads = []",
          "533:         for _ in range(6):",
          "534:             thread = threading.Thread(target=work)",
          "535:             thread.start()",
          "536:             threads.append(thread)",
          "538:         for thread in threads:",
          "539:             thread.join()",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6363: static int",
          "6364: object_set_class(PyObject *self, PyObject *value, void *closure)",
          "6365: {",
          "6368:     if (value == NULL) {",
          "6369:         PyErr_SetString(PyExc_TypeError,",
          "",
          "[Removed Lines]",
          "6366:     PyTypeObject *oldto = Py_TYPE(self);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6383:         return -1;",
          "6384:     }",
          "6387:        compatible_for_assignment was not set up to correctly check for memory",
          "6388:        layout / slot / etc. compatibility for non-HEAPTYPE classes, so we just",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6385:     PyTypeObject *oldto = Py_TYPE(self);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58dbb4a4b053800bb802aaf9662e3977ad114a52",
      "candidate_info": {
        "commit_hash": "58dbb4a4b053800bb802aaf9662e3977ad114a52",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/58dbb4a4b053800bb802aaf9662e3977ad114a52",
        "files": [
          "Lib/_pyrepl/commands.py",
          "Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/readline.py",
          "Lib/_pyrepl/simple_interact.py",
          "Lib/_pyrepl/utils.py",
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-111201: Speed up paste mode in the REPL (#119341) (GH-119432) (#119439)\n\n(cherry picked from commit e6572e8f98d33994d2d0dd3afa92a2a72ee642a9)\n\nAlso includes:\n\n* gh-111201: Use calc_complete_screen after bracketed paste in PyREPL (GH-119432)\n(cherry picked from commit 14b063cbf1bb11a489d04a31f277edba0fc8893c)\n\nCo-authored-by: Pablo Galindo Salgado <Pablogsal@gmail.com>\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\nCo-authored-by: Lysandros Nikolaou <lisandrosnik@gmail.com>",
        "before_after_code_files": [
          "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py",
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py",
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py",
          "Lib/_pyrepl/utils.py||Lib/_pyrepl/utils.py",
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py": [
          "File: Lib/_pyrepl/commands.py -> Lib/_pyrepl/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: class paste_mode(Command):",
          "463:     def do(self) -> None:",
          "466:         self.reader.paste_mode = not self.reader.paste_mode",
          "467:         self.reader.dirty = True",
          "",
          "[Removed Lines]",
          "464:         if not self.reader.paste_mode:",
          "465:             self.reader.was_paste_mode_activated = True",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: class enable_bracketed_paste(Command):",
          "471:     def do(self) -> None:",
          "472:         self.reader.paste_mode = True",
          "475: class disable_bracketed_paste(Command):",
          "476:     def do(self) -> None:",
          "477:         self.reader.paste_mode = False",
          "478:         self.reader.dirty = True",
          "",
          "[Removed Lines]",
          "473:         self.reader.was_paste_mode_activated = True",
          "",
          "[Added Lines]",
          "471:         self.reader.in_bracketed_paste = True",
          "476:         self.reader.in_bracketed_paste = False",
          "478:         self.reader.calc_screen = self.reader.calc_complete_screen",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     b: list[int] = []",
          "55:     s: list[str] = []",
          "56:     for c in buffer:",
          "58:             c = r\"\\u%04x\" % ord(c)",
          "59:         s.append(c)",
          "60:         b.append(wlen(c))",
          "",
          "[Removed Lines]",
          "57:         if unicodedata.category(c).startswith(\"C\"):",
          "",
          "[Added Lines]",
          "57:         if ord(c) > 128 and unicodedata.category(c).startswith(\"C\"):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:     dirty: bool = False",
          "226:     finished: bool = False",
          "227:     paste_mode: bool = False",
          "229:     commands: dict[str, type[Command]] = field(default_factory=make_default_commands)",
          "230:     last_command: type[Command] | None = None",
          "231:     syntax_table: dict[str, int] = field(default_factory=make_default_syntax_table)",
          "",
          "[Removed Lines]",
          "228:     was_paste_mode_activated: bool = False",
          "",
          "[Added Lines]",
          "228:     in_bracketed_paste: bool = False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "454:         elif \"\\n\" in self.buffer:",
          "455:             if lineno == 0:",
          "456:                 prompt = self.ps2",
          "458:                 prompt = self.ps4",
          "459:             else:",
          "460:                 prompt = self.ps3",
          "",
          "[Removed Lines]",
          "457:             elif lineno == self.buffer.count(\"\\n\"):",
          "",
          "[Added Lines]",
          "457:             elif self.ps4 and lineno == self.buffer.count(\"\\n\"):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "618:         self.after_command(command)",
          "621:             self.refresh()",
          "622:         else:",
          "623:             self.update_cursor()",
          "",
          "[Removed Lines]",
          "620:         if self.dirty:",
          "",
          "[Added Lines]",
          "620:         if self.dirty and not self.in_bracketed_paste:",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/readline.py||Lib/_pyrepl/readline.py": [
          "File: Lib/_pyrepl/readline.py -> Lib/_pyrepl/readline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:         reader.ps1 = str(prompt)",
          "342:         return reader.readline(startup_hook=self.startup_hook)",
          "345:         \"\"\"Read an input on possibly multiple lines, asking for more",
          "346:         lines as long as 'more_lines(unicodetext)' returns an object whose",
          "347:         boolean value is true.",
          "",
          "[Removed Lines]",
          "344:     def multiline_input(self, more_lines: MoreLinesCallable, ps1: str, ps2: str) -> tuple[str, bool]:",
          "",
          "[Added Lines]",
          "344:     def multiline_input(self, more_lines: MoreLinesCallable, ps1: str, ps2: str) -> str:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:         saved = reader.more_lines",
          "351:         try:",
          "352:             reader.more_lines = more_lines",
          "355:             with warnings.catch_warnings(action=\"ignore\"):",
          "357:         finally:",
          "358:             reader.more_lines = saved",
          "359:             reader.paste_mode = False",
          "362:     def parse_and_bind(self, string: str) -> None:",
          "363:         pass  # XXX we don't support parsing GNU-readline-style init files",
          "",
          "[Removed Lines]",
          "353:             reader.ps1 = reader.ps2 = ps1",
          "354:             reader.ps3 = reader.ps4 = ps2",
          "356:                 return reader.readline(), reader.was_paste_mode_activated",
          "360:             reader.was_paste_mode_activated = False",
          "",
          "[Added Lines]",
          "353:             reader.ps1 = ps1",
          "354:             reader.ps2 = ps1",
          "355:             reader.ps3 = ps2",
          "356:             reader.ps4 = \"\"",
          "358:                 return reader.readline()",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     \"quit\": _sitebuiltins.Quitter('quit' ,''),",
          "63:     \"copyright\": _sitebuiltins._Printer('copyright', sys.copyright),",
          "64:     \"help\": \"help\",",
          "65: }",
          "67: class InteractiveColoredConsole(code.InteractiveConsole):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     \"clear\": \"clear_screen\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:             ps1 = getattr(sys, \"ps1\", \">>> \")",
          "164:             ps2 = getattr(sys, \"ps2\", \"... \")",
          "165:             try:",
          "167:             except EOFError:",
          "168:                 break",
          "",
          "[Removed Lines]",
          "166:                 statement, contains_pasted_code = multiline_input(more_lines, ps1, ps2)",
          "",
          "[Added Lines]",
          "167:                 statement = multiline_input(more_lines, ps1, ps2)",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/utils.py||Lib/_pyrepl/utils.py": [
          "File: Lib/_pyrepl/utils.py -> Lib/_pyrepl/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import re",
          "2: import unicodedata",
          "4: ANSI_ESCAPE_SEQUENCE = re.compile(r\"\\x1b\\[[ -@]*[A-~]\")",
          "7: def str_width(c: str) -> int:",
          "8:     w = unicodedata.east_asian_width(c)",
          "9:     if w in ('N', 'Na', 'H', 'A'):",
          "10:         return 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import functools",
          "8: @functools.cache",
          "10:     if ord(c) < 128:",
          "11:         return 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: def wlen(s: str) -> int:",
          "15:     length = sum(str_width(i) for i in s)",
          "17:     # remove lengths of any escape sequences",
          "",
          "[Removed Lines]",
          "18:     return length - sum(len(i) for i in ANSI_ESCAPE_SEQUENCE.findall(s))",
          "",
          "[Added Lines]",
          "21:     sequence = ANSI_ESCAPE_SEQUENCE.findall(s)",
          "22:     return length - sum(len(i) for i in sequence)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:         reader = self.prepare_reader(events, namespace)",
          "588:         mock_get_reader.return_value = reader",
          "589:         output = readline_multiline_input(more_lines, \">>>\", \"...\")",
          "591:         self.assertEqual(mock_stderr.getvalue(), \"\")",
          "",
          "[Removed Lines]",
          "590:         self.assertEqual(output[0], \"dummy.test_func.__\")",
          "",
          "[Added Lines]",
          "590:         self.assertEqual(output, \"dummy.test_func.__\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}