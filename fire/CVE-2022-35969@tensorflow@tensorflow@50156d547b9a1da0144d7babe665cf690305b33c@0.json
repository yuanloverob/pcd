{
  "cve_id": "CVE-2022-35969",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The implementation of `Conv2DBackpropInput` requires `input_sizes` to be 4-dimensional. Otherwise, it gives a `CHECK` failure which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 50156d547b9a1da0144d7babe665cf690305b33c. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "50156d547b9a1da0144d7babe665cf690305b33c",
  "patch_info": {
    "commit_hash": "50156d547b9a1da0144d7babe665cf690305b33c",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c",
    "files": [
      "tensorflow/core/kernels/conv_grad_input_ops.h",
      "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
    ],
    "message": "Add security vulnerability test for raw_ops.Conv2DBackpropInput\n\nPiperOrigin-RevId: 463395218",
    "before_after_code_files": [
      "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
      "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h": [
      "File: tensorflow/core/kernels/conv_grad_input_ops.h -> tensorflow/core/kernels/conv_grad_input_ops.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "422:     const Tensor& filter = context->input(1);",
      "423:     const Tensor& out_backprop = context->input(2);",
      "425:     TensorShape input_shape;",
      "426:     OP_REQUIRES_OK(context,",
      "427:                    Conv2DBackpropComputeInputShape(input_sizes, filter.shape(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:     OP_REQUIRES(",
      "426:         context, out_backprop.dims() == 4,",
      "427:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
      "428:                                 out_backprop.dims()));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:     const Tensor& input_sizes = context->input(0);",
      "528:     const Tensor& filter = context->input(1);",
      "529:     const Tensor& out_backprop = context->input(2);",
      "531:     TensorShape input_shape;",
      "532:     OP_REQUIRES_OK(context,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "535:     OP_REQUIRES(",
      "536:         context, out_backprop.dims() == 4,",
      "537:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
      "538:                                 out_backprop.dims()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: from tensorflow.python.layers import convolutional",
      "33: from tensorflow.python.ops import array_ops",
      "34: from tensorflow.python.ops import control_flow_ops",
      "35: from tensorflow.python.ops import gradient_checker",
      "36: from tensorflow.python.ops import gradients_impl",
      "37: from tensorflow.python.ops import math_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35: from tensorflow.python.ops import gen_nn_ops",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1319:     x2 = self._CreateNumpyTensor(filter_sizes)",
      "1320:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
      "1321:     if default_dilations or use_gpu:",
      "1323:         if data_format == \"NCHW\":",
      "1324:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
      "1325:         t1 = constant_op.constant(x1, shape=input_sizes)",
      "",
      "[Removed Lines]",
      "1322:       with self.cached_session(use_gpu=use_gpu) as sess:",
      "",
      "[Added Lines]",
      "1323:       with self.cached_session(use_gpu=use_gpu):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1365:     x2 = self._CreateNumpyTensor(filter_sizes)",
      "1366:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
      "1367:     if default_dilations or use_gpu:",
      "1369:         if data_format == \"NCHW\":",
      "1370:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
      "1371:         t1 = constant_op.constant(x1, shape=input_sizes)",
      "",
      "[Removed Lines]",
      "1368:       with self.cached_session(use_gpu=use_gpu) as sess:",
      "",
      "[Added Lines]",
      "1369:       with self.cached_session(use_gpu=use_gpu):",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2628:               strides=[1, 1, 1, 1],",
      "2629:               padding=[[0, 0], [-1, 0], [0, 0], [0, 0]]))",
      "2632: @test_util.run_all_without_tensor_float_32(\"Avoid TF32 conv on GPU\")",
      "2633: class DepthwiseConv2DTest(test.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2632:   def testConv2DBackpropInputInvalidOutBackpropRaiseError(self):",
      "2633:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
      "2634:       with self.cached_session():",
      "2635:         input_sizes = constant_op.constant([65534, 65534],",
      "2636:                                            shape=[2],",
      "2637:                                            dtype=dtypes.int32)",
      "2638:         filters = constant_op.constant(",
      "2639:             0.159749106, shape=[3, 3, 2, 2], dtype=dtypes.float32)",
      "2640:         out_backprop = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
      "2641:         t = gen_nn_ops.conv2d_backprop_input(",
      "2642:             input_sizes=input_sizes,",
      "2643:             filter=filters,",
      "2644:             out_backprop=out_backprop,",
      "2645:             strides=[1, 1, 1, 1],",
      "2646:             padding=\"SAME\",",
      "2647:             use_cudnn_on_gpu=True,",
      "2648:             explicit_paddings=[],",
      "2649:             data_format=\"NHWC\",",
      "2650:             dilations=[1, 1, 1, 1])",
      "2651:         self.evaluate(t)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2655:     # numbers from 1.",
      "2656:     x1 = [f * 1.0 for f in range(1, total_size_1 + 1)]",
      "2657:     x2 = [f * 1.0 for f in range(1, total_size_2 + 1)]",
      "2659:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
      "2660:       t1.set_shape(tensor_in_sizes)",
      "2661:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
      "",
      "[Removed Lines]",
      "2658:     with self.cached_session() as sess:",
      "",
      "[Added Lines]",
      "2680:     with self.cached_session():",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2926:     x1 = np.random.rand(*tensor_in_sizes).astype(np.float32)",
      "2927:     x2 = np.random.rand(*filter_in_sizes).astype(np.float32)",
      "2930:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
      "2931:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
      "2932:       strides = [1] + conv_strides + [1]",
      "",
      "[Removed Lines]",
      "2929:     with self.cached_session(use_gpu=False) as sess:",
      "",
      "[Added Lines]",
      "2951:     with self.cached_session(use_gpu=False):",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bec93427d9e557617d48e32924c139c93b8ac11e",
      "candidate_info": {
        "commit_hash": "bec93427d9e557617d48e32924c139c93b8ac11e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bec93427d9e557617d48e32924c139c93b8ac11e",
        "files": [
          "tensorflow/core/kernels/conv_grad_input_ops.h",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ],
        "message": "Add security vulnerability test for raw_ops.Conv2DBackpropInput\n\nPiperOrigin-RevId: 463395218",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h": [
          "File: tensorflow/core/kernels/conv_grad_input_ops.h -> tensorflow/core/kernels/conv_grad_input_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:     const Tensor& filter = context->input(1);",
          "422:     const Tensor& out_backprop = context->input(2);",
          "424:     TensorShape input_shape;",
          "425:     OP_REQUIRES_OK(context,",
          "426:                    Conv2DBackpropComputeInputShape(input_sizes, filter.shape(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:     OP_REQUIRES(",
          "425:         context, out_backprop.dims() == 4,",
          "426:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
          "427:                                 out_backprop.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     const Tensor& input_sizes = context->input(0);",
          "518:     const Tensor& filter = context->input(1);",
          "519:     const Tensor& out_backprop = context->input(2);",
          "521:     TensorShape input_shape;",
          "522:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:     OP_REQUIRES(",
          "526:         context, out_backprop.dims() == 4,",
          "527:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
          "528:                                 out_backprop.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: from tensorflow.python.layers import convolutional",
          "33: from tensorflow.python.ops import array_ops",
          "34: from tensorflow.python.ops import control_flow_ops",
          "35: from tensorflow.python.ops import gradient_checker",
          "36: from tensorflow.python.ops import gradients_impl",
          "37: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: from tensorflow.python.ops import gen_nn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1293:     x2 = self._CreateNumpyTensor(filter_sizes)",
          "1294:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
          "1295:     if default_dilations or use_gpu:",
          "1297:         if data_format == \"NCHW\":",
          "1298:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
          "1299:         t1 = constant_op.constant(x1, shape=input_sizes)",
          "",
          "[Removed Lines]",
          "1296:       with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "1297:       with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1339:     x2 = self._CreateNumpyTensor(filter_sizes)",
          "1340:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
          "1341:     if default_dilations or use_gpu:",
          "1343:         if data_format == \"NCHW\":",
          "1344:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
          "1345:         t1 = constant_op.constant(x1, shape=input_sizes)",
          "",
          "[Removed Lines]",
          "1342:       with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "1343:       with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2602:               strides=[1, 1, 1, 1],",
          "2603:               padding=[[0, 0], [-1, 0], [0, 0], [0, 0]]))",
          "2606: @test_util.run_all_without_tensor_float_32(\"Avoid TF32 conv on GPU\")",
          "2607: class DepthwiseConv2DTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2606:   def testConv2DBackpropInputInvalidOutBackpropRaiseError(self):",
          "2607:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "2608:       with self.cached_session():",
          "2609:         input_sizes = constant_op.constant([65534, 65534],",
          "2610:                                            shape=[2],",
          "2611:                                            dtype=dtypes.int32)",
          "2612:         filters = constant_op.constant(",
          "2613:             0.159749106, shape=[3, 3, 2, 2], dtype=dtypes.float32)",
          "2614:         out_backprop = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "2615:         t = gen_nn_ops.conv2d_backprop_input(",
          "2616:             input_sizes=input_sizes,",
          "2617:             filter=filters,",
          "2618:             out_backprop=out_backprop,",
          "2619:             strides=[1, 1, 1, 1],",
          "2620:             padding=\"SAME\",",
          "2621:             use_cudnn_on_gpu=True,",
          "2622:             explicit_paddings=[],",
          "2623:             data_format=\"NHWC\",",
          "2624:             dilations=[1, 1, 1, 1])",
          "2625:         self.evaluate(t)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2629:     # numbers from 1.",
          "2630:     x1 = [f * 1.0 for f in range(1, total_size_1 + 1)]",
          "2631:     x2 = [f * 1.0 for f in range(1, total_size_2 + 1)]",
          "2633:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
          "2634:       t1.set_shape(tensor_in_sizes)",
          "2635:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
          "",
          "[Removed Lines]",
          "2632:     with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "2654:     with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2900:     x1 = np.random.rand(*tensor_in_sizes).astype(np.float32)",
          "2901:     x2 = np.random.rand(*filter_in_sizes).astype(np.float32)",
          "2904:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
          "2905:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
          "2906:       strides = [1] + conv_strides + [1]",
          "",
          "[Removed Lines]",
          "2903:     with self.cached_session(use_gpu=False) as sess:",
          "",
          "[Added Lines]",
          "2925:     with self.cached_session(use_gpu=False):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6270c97bc96a080e678bbcdf60cefb08213f18a",
      "candidate_info": {
        "commit_hash": "a6270c97bc96a080e678bbcdf60cefb08213f18a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a6270c97bc96a080e678bbcdf60cefb08213f18a",
        "files": [
          "tensorflow/core/kernels/conv_grad_input_ops.h",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ],
        "message": "Add security vulnerability test for raw_ops.Conv2DBackpropInput\n\nPiperOrigin-RevId: 463395218",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
          "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
            "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h": [
          "File: tensorflow/core/kernels/conv_grad_input_ops.h -> tensorflow/core/kernels/conv_grad_input_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:     const Tensor& filter = context->input(1);",
          "422:     const Tensor& out_backprop = context->input(2);",
          "424:     TensorShape input_shape;",
          "425:     OP_REQUIRES_OK(context,",
          "426:                    Conv2DBackpropComputeInputShape(input_sizes, filter.shape(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:     OP_REQUIRES(",
          "425:         context, out_backprop.dims() == 4,",
          "426:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
          "427:                                 out_backprop.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     const Tensor& input_sizes = context->input(0);",
          "518:     const Tensor& filter = context->input(1);",
          "519:     const Tensor& out_backprop = context->input(2);",
          "521:     TensorShape input_shape;",
          "522:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:     OP_REQUIRES(",
          "526:         context, out_backprop.dims() == 4,",
          "527:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
          "528:                                 out_backprop.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py||tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: from tensorflow.python.layers import convolutional",
          "33: from tensorflow.python.ops import array_ops",
          "34: from tensorflow.python.ops import control_flow_ops",
          "35: from tensorflow.python.ops import gradient_checker",
          "36: from tensorflow.python.ops import gradients_impl",
          "37: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: from tensorflow.python.ops import gen_nn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1293:     x2 = self._CreateNumpyTensor(filter_sizes)",
          "1294:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
          "1295:     if default_dilations or use_gpu:",
          "1297:         if data_format == \"NCHW\":",
          "1298:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
          "1299:         t1 = constant_op.constant(x1, shape=input_sizes)",
          "",
          "[Removed Lines]",
          "1296:       with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "1297:       with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1339:     x2 = self._CreateNumpyTensor(filter_sizes)",
          "1340:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
          "1341:     if default_dilations or use_gpu:",
          "1343:         if data_format == \"NCHW\":",
          "1344:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
          "1345:         t1 = constant_op.constant(x1, shape=input_sizes)",
          "",
          "[Removed Lines]",
          "1342:       with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "1343:       with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2602:               strides=[1, 1, 1, 1],",
          "2603:               padding=[[0, 0], [-1, 0], [0, 0], [0, 0]]))",
          "2606: @test_util.run_all_without_tensor_float_32(\"Avoid TF32 conv on GPU\")",
          "2607: class DepthwiseConv2DTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2606:   def testConv2DBackpropInputInvalidOutBackpropRaiseError(self):",
          "2607:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "2608:       with self.cached_session():",
          "2609:         input_sizes = constant_op.constant([65534, 65534],",
          "2610:                                            shape=[2],",
          "2611:                                            dtype=dtypes.int32)",
          "2612:         filters = constant_op.constant(",
          "2613:             0.159749106, shape=[3, 3, 2, 2], dtype=dtypes.float32)",
          "2614:         out_backprop = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "2615:         t = gen_nn_ops.conv2d_backprop_input(",
          "2616:             input_sizes=input_sizes,",
          "2617:             filter=filters,",
          "2618:             out_backprop=out_backprop,",
          "2619:             strides=[1, 1, 1, 1],",
          "2620:             padding=\"SAME\",",
          "2621:             use_cudnn_on_gpu=True,",
          "2622:             explicit_paddings=[],",
          "2623:             data_format=\"NHWC\",",
          "2624:             dilations=[1, 1, 1, 1])",
          "2625:         self.evaluate(t)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2629:     # numbers from 1.",
          "2630:     x1 = [f * 1.0 for f in range(1, total_size_1 + 1)]",
          "2631:     x2 = [f * 1.0 for f in range(1, total_size_2 + 1)]",
          "2633:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
          "2634:       t1.set_shape(tensor_in_sizes)",
          "2635:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
          "",
          "[Removed Lines]",
          "2632:     with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "2654:     with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2900:     x1 = np.random.rand(*tensor_in_sizes).astype(np.float32)",
          "2901:     x2 = np.random.rand(*filter_in_sizes).astype(np.float32)",
          "2904:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
          "2905:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
          "2906:       strides = [1] + conv_strides + [1]",
          "",
          "[Removed Lines]",
          "2903:     with self.cached_session(use_gpu=False) as sess:",
          "",
          "[Added Lines]",
          "2925:     with self.cached_session(use_gpu=False):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c88ec12530340d99d3176860e09ca3061f85ad88",
      "candidate_info": {
        "commit_hash": "c88ec12530340d99d3176860e09ca3061f85ad88",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c88ec12530340d99d3176860e09ca3061f85ad88",
        "files": [
          "tensorflow/core/kernels/conv_grad_input_ops.h",
          "tensorflow/python/kernel_tests/conv_ops_test.py"
        ],
        "message": "Add security vulnerability test for raw_ops.Conv2DBackpropInput\n\nPiperOrigin-RevId: 463395218",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h",
          "tensorflow/python/kernel_tests/conv_ops_test.py||tensorflow/python/kernel_tests/conv_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_grad_input_ops.h||tensorflow/core/kernels/conv_grad_input_ops.h": [
          "File: tensorflow/core/kernels/conv_grad_input_ops.h -> tensorflow/core/kernels/conv_grad_input_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:     const Tensor& filter = context->input(1);",
          "422:     const Tensor& out_backprop = context->input(2);",
          "424:     TensorShape input_shape;",
          "425:     OP_REQUIRES_OK(context,",
          "426:                    Conv2DBackpropComputeInputShape(input_sizes, filter.shape(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:     OP_REQUIRES(",
          "425:         context, out_backprop.dims() == 4,",
          "426:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
          "427:                                 out_backprop.dims()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     const Tensor& input_sizes = context->input(0);",
          "518:     const Tensor& filter = context->input(1);",
          "519:     const Tensor& out_backprop = context->input(2);",
          "521:     TensorShape input_shape;",
          "522:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:     OP_REQUIRES(",
          "526:         context, out_backprop.dims() == 4,",
          "527:         errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",",
          "528:                                 out_backprop.dims()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/conv_ops_test.py||tensorflow/python/kernel_tests/conv_ops_test.py": [
          "File: tensorflow/python/kernel_tests/conv_ops_test.py -> tensorflow/python/kernel_tests/conv_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: from tensorflow.python.layers import convolutional",
          "38: from tensorflow.python.ops import array_ops",
          "39: from tensorflow.python.ops import control_flow_ops",
          "40: from tensorflow.python.ops import gradient_checker",
          "41: from tensorflow.python.ops import gradients_impl",
          "42: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: from tensorflow.python.ops import gen_nn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1297:     x2 = self._CreateNumpyTensor(filter_sizes)",
          "1298:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
          "1299:     if default_dilations or use_gpu:",
          "1301:         if data_format == \"NCHW\":",
          "1302:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
          "1303:         t1 = constant_op.constant(x1, shape=input_sizes)",
          "",
          "[Removed Lines]",
          "1300:       with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "1301:       with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1343:     x2 = self._CreateNumpyTensor(filter_sizes)",
          "1344:     default_dilations = (dilations[0] == 1 and dilations[1] == 1)",
          "1345:     if default_dilations or use_gpu:",
          "1347:         if data_format == \"NCHW\":",
          "1348:           input_sizes = test_util.NHWCToNCHW(input_sizes)",
          "1349:         t1 = constant_op.constant(x1, shape=input_sizes)",
          "",
          "[Removed Lines]",
          "1346:       with self.cached_session(use_gpu=use_gpu) as sess:",
          "",
          "[Added Lines]",
          "1347:       with self.cached_session(use_gpu=use_gpu):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2606:               strides=[1, 1, 1, 1],",
          "2607:               padding=[[0, 0], [-1, 0], [0, 0], [0, 0]]))",
          "2610: class DepthwiseConv2DTest(test.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2610:   def testConv2DBackpropInputInvalidOutBackpropRaiseError(self):",
          "2611:     with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):",
          "2612:       with self.cached_session():",
          "2613:         input_sizes = constant_op.constant([65534, 65534],",
          "2614:                                            shape=[2],",
          "2615:                                            dtype=dtypes.int32)",
          "2616:         filters = constant_op.constant(",
          "2617:             0.159749106, shape=[3, 3, 2, 2], dtype=dtypes.float32)",
          "2618:         out_backprop = constant_op.constant(0, shape=[], dtype=dtypes.float32)",
          "2619:         t = gen_nn_ops.conv2d_backprop_input(",
          "2620:             input_sizes=input_sizes,",
          "2621:             filter=filters,",
          "2622:             out_backprop=out_backprop,",
          "2623:             strides=[1, 1, 1, 1],",
          "2624:             padding=\"SAME\",",
          "2625:             use_cudnn_on_gpu=True,",
          "2626:             explicit_paddings=[],",
          "2627:             data_format=\"NHWC\",",
          "2628:             dilations=[1, 1, 1, 1])",
          "2629:         self.evaluate(t)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2632:     # numbers from 1.",
          "2633:     x1 = [f * 1.0 for f in range(1, total_size_1 + 1)]",
          "2634:     x2 = [f * 1.0 for f in range(1, total_size_2 + 1)]",
          "2636:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
          "2637:       t1.set_shape(tensor_in_sizes)",
          "2638:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
          "",
          "[Removed Lines]",
          "2635:     with self.cached_session() as sess:",
          "",
          "[Added Lines]",
          "2657:     with self.cached_session():",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2901:     x1 = np.random.rand(*tensor_in_sizes).astype(np.float32)",
          "2902:     x2 = np.random.rand(*filter_in_sizes).astype(np.float32)",
          "2905:       t1 = constant_op.constant(x1, shape=tensor_in_sizes)",
          "2906:       t2 = constant_op.constant(x2, shape=filter_in_sizes)",
          "2907:       strides = [1] + conv_strides + [1]",
          "",
          "[Removed Lines]",
          "2904:     with self.cached_session(use_gpu=False) as sess:",
          "",
          "[Added Lines]",
          "2926:     with self.cached_session(use_gpu=False):",
          "",
          "---------------"
        ]
      }
    }
  ]
}