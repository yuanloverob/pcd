{
  "cve_id": "CVE-2023-23557",
  "cve_desc": "An error in Hermes' algorithm for copying objects properties prior to commit a00d237346894c6067a594983be6634f4168c9ad could be used by a malicious attacker to execute arbitrary code via type confusion. Note that this is only exploitable in cases where Hermes is used to execute untrusted JavaScript. Hence, most React Native applications are not affected.",
  "repo": "facebook/hermes",
  "patch_hash": "a00d237346894c6067a594983be6634f4168c9ad",
  "patch_info": {
    "commit_hash": "a00d237346894c6067a594983be6634f4168c9ad",
    "repo": "facebook/hermes",
    "commit_url": "https://github.com/facebook/hermes/commit/a00d237346894c6067a594983be6634f4168c9ad",
    "files": [
      "lib/VM/JSLib/HermesBuiltin.cpp",
      "test/hermes/regress-spread-operator.js",
      "unittests/API/APITest.cpp"
    ],
    "message": "Use copyDataProperties slow path for objects with accessors\n\nSummary:\nFix a bug present in `hermesBuiltinCopyDataProperties`.\n`hermesBuiltinCopyDataProperties` is meant to copy an object. It does\nthis by iterating over all the properties in the source object, and\nthen writing the key-value pair into a new object which is returned.The\niteration is done using `JSObject::forEachOwnPropertyWhile`, providing\na callback to process each property. It will take the property id, look\nit up in the source object using `getNamedPropertyValue_RJS`, then take\nthat resulting value and write it into the target. However, that API\nexplicitly states the following:\n\n> Obviously the callbacks shouldn't be  doing naughty things like modifying\nthe property map or creating new hidden classes (even implicitly)\n\nBut, `getNamedPropertyValue_RJS` can\nperform arbitrary JS execution if it is a getter, including\nadding/deleting new properties, which would modify the object's\nHiddenClass, thus violating `JSObject::forEachOwnPropertyWhile`'s\nprecondition.Therefore, the fix is to use the correct, but slower path,\nwhenever there is an accessor on the object. This code path is more 1:1\nto the spec. At the beginning, it will simply find all the properties\nof the source object using `JSObject::getOwnPropertyKeys` and then\niterate on those, rather than use `JSObject::forEachOwnPropertyWhile`.\nThis way, we are allowed to manipulate the source object however we\nwish, which is necessary in order to call `getNamedPropertyValue_RJS`.\n\nReviewed By: neildhar\n\nDifferential Revision: D41701871\n\nfbshipit-source-id: c4be179f57d52827f12ca26b1ab8d17cdccd7447",
    "before_after_code_files": [
      "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp",
      "test/hermes/regress-spread-operator.js||test/hermes/regress-spread-operator.js",
      "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
    ]
  },
  "patch_diff": {
    "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp": [
      "File: lib/VM/JSLib/HermesBuiltin.cpp -> lib/VM/JSLib/HermesBuiltin.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:     Handle<JSObject> target,",
      "252:     Handle<JSObject> from,",
      "253:     Handle<JSObject> excludedItems) {",
      "260:       from,",
      "261:       runtime,",
      "262:       OwnKeysFlags()",
      "",
      "[Removed Lines]",
      "254:   assert(",
      "255:       from->isProxyObject() &&",
      "256:       \"copyDataPropertiesSlowPath_RJS is only for Proxy\");",
      "259:   auto cr = JSProxy::getOwnPropertyKeys(",
      "",
      "[Added Lines]",
      "255:   auto cr = JSObject::getOwnPropertyKeys(",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "312:     ComputedPropertyDescriptor desc;",
      "315:     if (LLVM_UNLIKELY(crb == ExecutionStatus::EXCEPTION))",
      "316:       return ExecutionStatus::EXCEPTION;",
      "320:       CallResult<PseudoHandle<>> crv =",
      "322:       if (LLVM_UNLIKELY(crv == ExecutionStatus::EXCEPTION))",
      "323:         return ExecutionStatus::EXCEPTION;",
      "324:       propValueHandle = std::move(*crv);",
      "",
      "[Removed Lines]",
      "313:     CallResult<bool> crb =",
      "314:         JSProxy::getOwnProperty(from, runtime, nextKeyHandle, desc, nullptr);",
      "318:     if (*crb && desc.flags.enumerable) {",
      "321:           JSProxy::getComputed(from, runtime, nextKeyHandle, from);",
      "",
      "[Added Lines]",
      "309:     CallResult<bool> crb = JSObject::getOwnComputedDescriptor(",
      "310:         from, runtime, nextKeyHandle, tmpSymbolStorage, desc);",
      "316:     if ((*crb && desc.flags.enumerable) || from->isHostObject()) {",
      "319:           JSObject::getComputed_RJS(from, runtime, nextKeyHandle);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "380:       (!excludedItems || !excludedItems->isProxyObject()) &&",
      "381:       \"excludedItems internal List is a Proxy\");",
      "384:     return copyDataPropertiesSlowPath_RJS(",
      "385:         runtime, target, source, excludedItems);",
      "386:   }",
      "",
      "[Removed Lines]",
      "383:   if (source->isProxyObject()) {",
      "",
      "[Added Lines]",
      "386:   if (source->isProxyObject() || source->isHostObject() ||",
      "387:       source->getClass(runtime)->getMayHaveAccessor()) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "458:             return true;",
      "459:         }",
      "",
      "[Removed Lines]",
      "461:         auto cr =",
      "462:             JSObject::getNamedPropertyValue_RJS(source, runtime, source, desc);",
      "463:         if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION))",
      "464:           return false;",
      "466:         valueHandle = std::move(*cr);",
      "",
      "[Added Lines]",
      "465:         SmallHermesValue shv =",
      "466:             JSObject::getNamedSlotValueUnsafe(*source, runtime, desc);",
      "467:         valueHandle = runtime.makeHandle(shv.unboxToHV(runtime));",
      "",
      "---------------"
    ],
    "test/hermes/regress-spread-operator.js||test/hermes/regress-spread-operator.js": [
      "File: test/hermes/regress-spread-operator.js -> test/hermes/regress-spread-operator.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: var obj = {",
      "15:   get foo() {",
      "16:     this.tutu = 'hi';",
      "17:     delete obj.bar;",
      "18:     obj.tutu = 'lol';",
      "19:   },",
      "20:    bar: 'bar'",
      "21: };",
      "22: print({ ...obj }.tutu)",
      "25: var obj2 = {",
      "26:   get foo() {",
      "27:     obj2.bar = 'foo'",
      "28:   },",
      "29:   bar: 'bar'",
      "30: };",
      "31: print({ ...obj2 }.bar)",
      "",
      "---------------"
    ],
    "unittests/API/APITest.cpp||unittests/API/APITest.cpp": [
      "File: unittests/API/APITest.cpp -> unittests/API/APITest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "493:   EXPECT_EQ(callstack, expected);",
      "494: }",
      "496: TEST_F(HermesRuntimeTest, HostObjectWithOwnProperties) {",
      "497:   class HostObjectWithPropertyNames : public HostObject {",
      "498:     std::vector<PropNameID> getPropertyNames(Runtime &rt) override {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "496: TEST_F(HermesRuntimeTest, SpreadHostObjectWithOwnProperties) {",
      "497:   class HostObjectWithPropertyNames : public HostObject {",
      "498:     std::vector<PropNameID> getPropertyNames(Runtime &rt) override {",
      "499:       return PropNameID::names(rt, \"prop1\", \"1\", \"2\", \"prop2\", \"3\");",
      "500:     }",
      "501:     Value get(Runtime &runtime, const PropNameID &name) override {",
      "502:       return Value();",
      "503:     }",
      "504:   };",
      "506:   Object ho = Object::createFromHostObject(",
      "508:   rt->global().setProperty(*rt, \"ho\", ho);",
      "510:   auto res = eval(R\"###(",
      "511: var spreaded = {...ho};",
      "512: var props = Object.getOwnPropertyNames(spreaded);",
      "513: props.toString();",
      "514: )###\")",
      "515:                  .getString(*rt)",
      "516:                  .utf8(*rt);",
      "517:   EXPECT_EQ(res, \"1,2,3,prop1,prop2\");",
      "518: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be53e070477e60943ac1c1247356e824c8357d40",
      "candidate_info": {
        "commit_hash": "be53e070477e60943ac1c1247356e824c8357d40",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/be53e070477e60943ac1c1247356e824c8357d40",
        "files": [
          "include/hermes/VM/JSObject.h",
          "include/hermes/VM/JSProxy.h",
          "include/hermes/VM/TypesafeFlags.h",
          "lib/VM/JSLib/HermesBuiltin.cpp",
          "lib/VM/JSLib/Object.cpp",
          "lib/VM/JSLib/Object.h",
          "lib/VM/JSLib/Reflect.cpp",
          "lib/VM/JSObject.cpp",
          "lib/VM/JSProxy.cpp"
        ],
        "message": "Back out \"Make default behavior of OwnKeyFlags explicit\"\n\nSummary: D43645420 has already been backed out because of a perf regression. This diff is also causing a compile-time error.\n\nReviewed By: jpporto\n\nDifferential Revision: D44654723\n\nfbshipit-source-id: bb7bc5882da449a68f120c5e9b70a0644ffb738e",
        "before_after_code_files": [
          "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h",
          "include/hermes/VM/JSProxy.h||include/hermes/VM/JSProxy.h",
          "include/hermes/VM/TypesafeFlags.h||include/hermes/VM/TypesafeFlags.h",
          "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp",
          "lib/VM/JSLib/Object.cpp||lib/VM/JSLib/Object.cpp",
          "lib/VM/JSLib/Object.h||lib/VM/JSLib/Object.h",
          "lib/VM/JSLib/Reflect.cpp||lib/VM/JSLib/Reflect.cpp",
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
          "lib/VM/JSProxy.cpp||lib/VM/JSProxy.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp"
          ],
          "candidate": [
            "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h": [
          "File: include/hermes/VM/JSObject.h -> include/hermes/VM/JSObject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: HERMES_VM__DECLARE_FLAGS_CLASS(PropOpFlags, HERMES_VM__LIST_PropOpFlags);",
          "",
          "[Removed Lines]",
          "175: namespace OwnKeys {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205: #define HERMES_VM__LIST_OwnKeysFlags(FLAG) \\",
          "206:   FLAG(IncludeSymbols)                     \\",
          "207:   FLAG(IncludeNonSymbols)                  \\",
          "209:   FLAG(IncludeNonEnumerable)",
          "",
          "[Removed Lines]",
          "208:   FLAG(IncludeEnumerable)                  \\",
          "211: HERMES_VM__DECLARE_FLAGS_CLASS(Flags, HERMES_VM__LIST_OwnKeysFlags);",
          "215: constexpr Flags Default() {",
          "216:   return Flags().plusIncludeEnumerable();",
          "217: }",
          "220: constexpr Flags AllKeys() {",
          "221:   return Flags()",
          "222:       .plusIncludeSymbols()",
          "223:       .plusIncludeNonSymbols()",
          "224:       .plusIncludeEnumerable()",
          "225:       .plusIncludeNonEnumerable();",
          "226: }",
          "227: } // namespace OwnKeys",
          "",
          "[Added Lines]",
          "202: HERMES_VM__DECLARE_FLAGS_CLASS(OwnKeysFlags, HERMES_VM__LIST_OwnKeysFlags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "579:   static CallResult<Handle<JSArray>> getOwnPropertyKeys(",
          "580:       Handle<JSObject> selfHandle,",
          "581:       Runtime &runtime,",
          "",
          "[Removed Lines]",
          "582:       OwnKeys::Flags okFlags);",
          "",
          "[Added Lines]",
          "557:       OwnKeysFlags okFlags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     return getOwnPropertyKeys(",
          "596:         selfHandle,",
          "597:         runtime,",
          "599:             !onlyEnumerable));",
          "600:   }",
          "",
          "[Removed Lines]",
          "598:         OwnKeys::Default().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "[Added Lines]",
          "573:         OwnKeysFlags().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "608:     return getOwnPropertyKeys(",
          "609:         selfHandle,",
          "610:         runtime,",
          "612:   }",
          "",
          "[Removed Lines]",
          "611:         OwnKeys::Default().plusIncludeSymbols().plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "586:         OwnKeysFlags().plusIncludeSymbols().plusIncludeNonEnumerable());",
          "",
          "---------------"
        ],
        "include/hermes/VM/JSProxy.h||include/hermes/VM/JSProxy.h": [
          "File: include/hermes/VM/JSProxy.h -> include/hermes/VM/JSProxy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   static CallResult<PseudoHandle<JSArray>> ownPropertyKeys(",
          "174:       Handle<JSObject> selfHandle,",
          "175:       Runtime &runtime,",
          "178:  public:",
          "179:   JSProxy(Runtime &runtime, Handle<JSObject> parent, Handle<HiddenClass> clazz)",
          "",
          "[Removed Lines]",
          "176:       OwnKeys::Flags okFlags);",
          "",
          "[Added Lines]",
          "176:       OwnKeysFlags okFlags);",
          "",
          "---------------"
        ],
        "include/hermes/VM/TypesafeFlags.h||include/hermes/VM/TypesafeFlags.h": [
          "File: include/hermes/VM/TypesafeFlags.h -> include/hermes/VM/TypesafeFlags.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define HERMES_VM_TYPESAFEFLAGS_H",
          "58: #define _HERMES_VM__DECL_FLAG(name) bool f##name##_ : 1;",
          "77:   }",
          "79: #define HERMES_VM__DECLARE_FLAGS_CLASS(ClassName, listMacro) \\",
          "",
          "[Removed Lines]",
          "59: #define _HERMES_VM__IMPL_FLAG(name)        \\",
          "60:   constexpr Self plus##name() const {      \\",
          "61:     auto r(*this);                         \\",
          "62:     r.f##name##_ = true;                   \\",
          "63:     return r;                              \\",
          "64:   }                                        \\",
          "65:   constexpr Self minus##name() const {     \\",
          "66:     auto r(*this);                         \\",
          "67:     r.f##name##_ = false;                  \\",
          "68:     return r;                              \\",
          "69:   }                                        \\",
          "70:   constexpr Self set##name(bool v) const { \\",
          "71:     auto r(*this);                         \\",
          "72:     r.f##name##_ = v;                      \\",
          "73:     return r;                              \\",
          "74:   }                                        \\",
          "75:   constexpr bool get##name() const {       \\",
          "76:     return f##name##_;                     \\",
          "",
          "[Added Lines]",
          "59: #define _HERMES_VM__IMPL_FLAG(name) \\",
          "60:   Self plus##name() const {         \\",
          "61:     auto r(*this);                  \\",
          "62:     r.f##name##_ = true;            \\",
          "63:     return r;                       \\",
          "64:   }                                 \\",
          "65:   Self minus##name() const {        \\",
          "66:     auto r(*this);                  \\",
          "67:     r.f##name##_ = false;           \\",
          "68:     return r;                       \\",
          "69:   }                                 \\",
          "70:   Self set##name(bool v) const {    \\",
          "71:     auto r(*this);                  \\",
          "72:     r.f##name##_ = v;               \\",
          "73:     return r;                       \\",
          "74:   }                                 \\",
          "75:   bool get##name() const {          \\",
          "76:     return f##name##_;              \\",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp": [
          "File: lib/VM/JSLib/HermesBuiltin.cpp -> lib/VM/JSLib/HermesBuiltin.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     Handle<JSObject> from,",
          "254:     Handle<JSObject> excludedItems) {",
          "257:   if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION)) {",
          "258:     return ExecutionStatus::EXCEPTION;",
          "259:   }",
          "",
          "[Removed Lines]",
          "256:   auto cr = JSObject::getOwnPropertyKeys(from, runtime, OwnKeys::AllKeys());",
          "",
          "[Added Lines]",
          "256:   auto cr = JSObject::getOwnPropertyKeys(",
          "257:       from,",
          "258:       runtime,",
          "259:       OwnKeysFlags()",
          "260:           .plusIncludeSymbols()",
          "261:           .plusIncludeNonSymbols()",
          "262:           .plusIncludeNonEnumerable());",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Object.cpp||lib/VM/JSLib/Object.cpp": [
          "File: lib/VM/JSLib/Object.cpp -> lib/VM/JSLib/Object.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:   Handle<JSObject> obj = runtime.makeHandle<JSObject>(objRes.getValue());",
          "399:   if (LLVM_UNLIKELY(ownKeysRes == ExecutionStatus::EXCEPTION)) {",
          "400:     return ExecutionStatus::EXCEPTION;",
          "401:   }",
          "",
          "[Removed Lines]",
          "397:   auto ownKeysRes =",
          "398:       JSObject::getOwnPropertyKeys(obj, runtime, OwnKeys::AllKeys());",
          "",
          "[Added Lines]",
          "397:   auto ownKeysRes = JSObject::getOwnPropertyKeys(",
          "398:       obj,",
          "399:       runtime,",
          "400:       OwnKeysFlags()",
          "401:           .plusIncludeNonSymbols()",
          "402:           .plusIncludeSymbols()",
          "403:           .plusIncludeNonEnumerable());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444: CallResult<HermesValue> getOwnPropertyKeysAsStrings(",
          "445:     Handle<JSObject> selfHandle,",
          "446:     Runtime &runtime,",
          "448:   auto cr = JSObject::getOwnPropertyKeys(selfHandle, runtime, okFlags);",
          "449:   if (cr == ExecutionStatus::EXCEPTION) {",
          "450:     return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "447:     OwnKeys::Flags okFlags) {",
          "",
          "[Added Lines]",
          "452:     OwnKeysFlags okFlags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:   auto cr = getOwnPropertyKeysAsStrings(",
          "483:       objHandle,",
          "484:       runtime,",
          "486:   if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION)) {",
          "487:     return ExecutionStatus::EXCEPTION;",
          "488:   }",
          "",
          "[Removed Lines]",
          "485:       OwnKeys::Default().plusIncludeNonSymbols().plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "490:       OwnKeysFlags().plusIncludeNonSymbols().plusIncludeNonEnumerable());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "573:   auto cr = JSObject::getOwnPropertyKeys(",
          "574:       propsHandle,",
          "575:       runtime,",
          "",
          "[Removed Lines]",
          "576:       OwnKeys::AllKeys()",
          "",
          "[Added Lines]",
          "581:       OwnKeysFlags()",
          "582:           .plusIncludeSymbols()",
          "583:           .plusIncludeNonSymbols()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "793:   auto namesRes = getOwnPropertyKeysAsStrings(",
          "794:       objHandle,",
          "795:       runtime,",
          "797:           objHandle->isProxyObject()));",
          "798:   if (namesRes == ExecutionStatus::EXCEPTION) {",
          "799:     return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "796:       OwnKeys::Default().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "[Added Lines]",
          "803:       OwnKeysFlags().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1031:     auto cr = JSObject::getOwnPropertyKeys(",
          "1032:         fromHandle,",
          "1033:         runtime,",
          "1036:     if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION)) {",
          "1038:       return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "1034:         OwnKeys::AllKeys().setIncludeNonEnumerable(",
          "1035:             fromHandle->isProxyObject()));",
          "",
          "[Added Lines]",
          "1041:         OwnKeysFlags()",
          "1042:             .plusIncludeSymbols()",
          "1043:             .plusIncludeNonSymbols()",
          "1044:             .setIncludeNonEnumerable(fromHandle->isProxyObject()));",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Object.h||lib/VM/JSLib/Object.h": [
          "File: lib/VM/JSLib/Object.h -> lib/VM/JSLib/Object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: CallResult<HermesValue> getOwnPropertyKeysAsStrings(",
          "34:     Handle<JSObject> selfHandle,",
          "35:     Runtime &runtime,",
          "",
          "[Removed Lines]",
          "36:     OwnKeys::Flags okFlags);",
          "",
          "[Added Lines]",
          "36:     OwnKeysFlags okFlags);",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Reflect.cpp||lib/VM/JSLib/Reflect.cpp": [
          "File: lib/VM/JSLib/Reflect.cpp -> lib/VM/JSLib/Reflect.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     return runtime.raiseTypeError(\"target is not an object\");",
          "203:   }",
          "206: }",
          "208: CallResult<HermesValue>",
          "",
          "[Removed Lines]",
          "205:   return getOwnPropertyKeysAsStrings(target, runtime, OwnKeys::AllKeys());",
          "",
          "[Added Lines]",
          "205:   return getOwnPropertyKeysAsStrings(",
          "206:       target,",
          "207:       runtime,",
          "208:       OwnKeysFlags()",
          "209:           .plusIncludeSymbols()",
          "210:           .plusIncludeNonSymbols()",
          "211:           .plusIncludeNonEnumerable());",
          "",
          "---------------"
        ],
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: CallResult<Handle<JSArray>> JSObject::getOwnPropertyKeys(",
          "351:     Handle<JSObject> selfHandle,",
          "352:     Runtime &runtime,",
          "354:   assert(",
          "355:       (okFlags.getIncludeNonSymbols() || okFlags.getIncludeSymbols()) &&",
          "356:       \"Can't exclude symbols and strings\");",
          "360:   if (LLVM_UNLIKELY(",
          "361:           selfHandle->flags_.lazyObject || selfHandle->flags_.proxyObject)) {",
          "362:     if (selfHandle->flags_.proxyObject) {",
          "",
          "[Removed Lines]",
          "353:     OwnKeys::Flags okFlags) {",
          "357:   assert(",
          "358:       (okFlags.getIncludeEnumerable() || okFlags.getIncludeNonEnumerable()) &&",
          "359:       \"Can't exclude enumerable and non-enumerable\");",
          "",
          "[Added Lines]",
          "353:     OwnKeysFlags okFlags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:   if (okFlags.getIncludeNonSymbols()) {",
          "415:       assert(",
          "416:           range.first == range.second &&",
          "417:           \"Host objects cannot own indexed range\");",
          "",
          "[Removed Lines]",
          "413:     if (LLVM_UNLIKELY(",
          "414:             selfHandle->flags_.hostObject && okFlags.getIncludeEnumerable())) {",
          "",
          "[Added Lines]",
          "409:     if (LLVM_UNLIKELY(selfHandle->flags_.hostObject)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:       if (!res)",
          "434:         continue;",
          "437:       if (!okFlags.getIncludeNonEnumerable() && !res->enumerable)",
          "438:         continue;",
          "443:       tmpHandle = HermesValue::encodeUntrustedNumberValue(i);",
          "444:       JSArray::setElementAt(array, runtime, index++, tmpHandle);",
          "",
          "[Removed Lines]",
          "440:       if (!okFlags.getIncludeEnumerable() && res->enumerable)",
          "441:         continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "462:             return;",
          "463:           }",
          "466:           if (!okFlags.getIncludeNonEnumerable()) {",
          "467:             if (!desc.flags.enumerable)",
          "468:               return;",
          "469:           }",
          "",
          "[Removed Lines]",
          "471:           if (!okFlags.getIncludeEnumerable()) {",
          "472:             if (desc.flags.enumerable)",
          "473:               return;",
          "474:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "537:           if (!isSymbolPrimitive(id)) {",
          "538:             return;",
          "539:           }",
          "541:           if (!okFlags.getIncludeNonEnumerable()) {",
          "542:             if (!desc.flags.enumerable)",
          "543:               return;",
          "544:           }",
          "550:           idHandle = id;",
          "551:           JSArray::setElementAt(array, runtime, index++, idHandle);",
          "552:         });",
          "",
          "[Removed Lines]",
          "546:           if (!okFlags.getIncludeEnumerable()) {",
          "547:             if (desc.flags.enumerable)",
          "548:               return;",
          "549:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/VM/JSProxy.cpp||lib/VM/JSProxy.cpp": [
          "File: lib/VM/JSProxy.cpp -> lib/VM/JSProxy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1265:     Handle<JSObject> selfHandle,",
          "1266:     Handle<JSArray> keys,",
          "1267:     Runtime &runtime,",
          "1272:   assert(",
          "1273:       (okFlags.getIncludeNonSymbols() || okFlags.getIncludeSymbols()) &&",
          "1274:       \"Can't exclude symbols and strings\");",
          "",
          "[Removed Lines]",
          "1268:     OwnKeys::Flags okFlags) {",
          "1269:   assert(",
          "1270:       okFlags.getIncludeEnumerable() &&",
          "1271:       \"For now, proxy does not support excluding enumerable keys\");",
          "",
          "[Added Lines]",
          "1268:     OwnKeysFlags okFlags) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1345: CallResult<PseudoHandle<JSArray>> JSProxy::ownPropertyKeys(",
          "1346:     Handle<JSObject> selfHandle,",
          "1347:     Runtime &runtime,",
          "1349:   GCScope gcScope{runtime};",
          "1350:   ScopedNativeDepthTracker depthTracker(runtime);",
          "1351:   if (LLVM_UNLIKELY(depthTracker.overflowed())) {",
          "",
          "[Removed Lines]",
          "1348:     OwnKeys::Flags okFlags) {",
          "",
          "[Added Lines]",
          "1345:     OwnKeysFlags okFlags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1364:     CallResult<Handle<JSArray>> targetRes =",
          "1368:     if (targetRes == ExecutionStatus::EXCEPTION) {",
          "1369:       return ExecutionStatus::EXCEPTION;",
          "1370:     }",
          "",
          "[Removed Lines]",
          "1367:         JSObject::getOwnPropertyKeys(target, runtime, OwnKeys::AllKeys());",
          "",
          "[Added Lines]",
          "1364:         JSObject::getOwnPropertyKeys(",
          "1365:             target,",
          "1366:             runtime,",
          "1367:             OwnKeysFlags()",
          "1368:                 .plusIncludeSymbols()",
          "1369:                 .plusIncludeNonSymbols()",
          "1370:                 .plusIncludeNonEnumerable());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1445:     return ExecutionStatus::EXCEPTION;",
          "1446:   }",
          "1450:   if (targetKeysRes == ExecutionStatus::EXCEPTION) {",
          "1451:     return ExecutionStatus::EXCEPTION;",
          "1452:   }",
          "",
          "[Removed Lines]",
          "1448:   CallResult<Handle<JSArray>> targetKeysRes =",
          "1449:       JSObject::getOwnPropertyKeys(target, runtime, OwnKeys::AllKeys());",
          "",
          "[Added Lines]",
          "1451:   CallResult<Handle<JSArray>> targetKeysRes = JSObject::getOwnPropertyKeys(",
          "1452:       target,",
          "1453:       runtime,",
          "1454:       OwnKeysFlags()",
          "1455:           .plusIncludeSymbols()",
          "1456:           .plusIncludeNonSymbols()",
          "1457:           .plusIncludeNonEnumerable());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c0d4df5aa5d102b03490518063f90950fa9c4ef",
      "candidate_info": {
        "commit_hash": "6c0d4df5aa5d102b03490518063f90950fa9c4ef",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/6c0d4df5aa5d102b03490518063f90950fa9c4ef",
        "files": [
          "unittests/API/APITest.cpp"
        ],
        "message": "Run HermesRuntimeTests with all runtime types\n\nSummary:\nUse the same runtime factory we use for JSI tests when running the\n`HermesRuntimeTest`, so the tests are run on any runtime that is built\non top of Hermes. For now, this exercises `HermesRuntime` and the\n\"thread-safe\" `HermesRuntime`. This will be expanded to include the\nupcoming ABI-safe runtime and WASM based runtime.f\n\nReviewed By: avp\n\nDifferential Revision: D47379092\n\nfbshipit-source-id: 83bd1fcfd2dac7cd32ade6ec2b76c397501cb7a7",
        "before_after_code_files": [
          "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
          ],
          "candidate": [
            "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
          ]
        }
      },
      "candidate_diff": {
        "unittests/API/APITest.cpp||unittests/API/APITest.cpp": [
          "File: unittests/API/APITest.cpp -> unittests/API/APITest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <hermes/VM/TimeLimitMonitor.h>",
          "13: #include <hermes/hermes.h>",
          "14: #include <jsi/instrumentation.h>",
          "16: #include <tuple>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <jsi/test/testlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: namespace {",
          "38:  public:",
          "42:  protected:",
          "43:   Value eval(const char *code) {",
          "44:     return rt->global().getPropertyAsFunction(*rt, \"eval\").call(*rt, code);",
          "45:   }",
          "48: };",
          "51:  public:",
          "57: };",
          "63:   Function coolify = Function::createFromHostFunction(",
          "65:       PropNameID::forAscii(*rt, \"coolify\"),",
          "",
          "[Removed Lines]",
          "37: class HermesRuntimeTestBase : public ::testing::Test {",
          "39:   HermesRuntimeTestBase(::hermes::vm::RuntimeConfig runtimeConfig)",
          "40:       : rt(makeHermesRuntime(runtimeConfig)) {}",
          "47:   std::shared_ptr<HermesRuntime> rt;",
          "50: class HermesRuntimeTest : public HermesRuntimeTestBase {",
          "52:   HermesRuntimeTest()",
          "53:       : HermesRuntimeTestBase(::hermes::vm::RuntimeConfig::Builder()",
          "54:                                   .withES6Proxy(true)",
          "55:                                   .withES6Promise(true)",
          "56:                                   .build()) {}",
          "62: TEST_F(HermesRuntimeTest, StrictHostFunctionBindTest) {",
          "",
          "[Added Lines]",
          "38: class HermesRuntimeTestBase {",
          "40:   HermesRuntimeTestBase(std::unique_ptr<Runtime> rt) : rt(std::move(rt)) {}",
          "47:   std::unique_ptr<Runtime> rt;",
          "52: class HermesRuntimeCustomConfigTest : public ::testing::Test,",
          "53:                                       public HermesRuntimeTestBase {",
          "55:   HermesRuntimeCustomConfigTest(::hermes::vm::RuntimeConfig runtimeConfig)",
          "56:       : HermesRuntimeTestBase(makeHermesRuntime(runtimeConfig)) {}",
          "57: };",
          "59: class HermesRuntimeTest : public ::testing::TestWithParam<RuntimeFactory>,",
          "60:                           public HermesRuntimeTestBase {",
          "61:  public:",
          "62:   HermesRuntimeTest() : HermesRuntimeTestBase(GetParam()()) {}",
          "68: TEST_P(HermesRuntimeTest, StrictHostFunctionBindTest) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:                   .getBool());",
          "77: }",
          "82:   EXPECT_NE(rt->description().find(\"Hermes\"), std::string::npos);",
          "",
          "[Removed Lines]",
          "79: TEST_F(HermesRuntimeTest, DescriptionTest) {",
          "",
          "[Added Lines]",
          "85: TEST_P(HermesRuntimeTest, DescriptionTest) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:   EXPECT_NE(rt2->description().find(\"Hermes\"), std::string::npos);",
          "90: }",
          "93:   eval(",
          "94:       \"var buffer = new ArrayBuffer(16);\\",
          "95:         var int32View = new Int32Array(buffer);\\",
          "",
          "[Removed Lines]",
          "92: TEST_F(HermesRuntimeTest, ArrayBufferTest) {",
          "",
          "[Added Lines]",
          "98: TEST_P(HermesRuntimeTest, ArrayBufferTest) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "107:   EXPECT_EQ(buffer[1], 5678);",
          "108: }",
          "111:  public:",
          "112:   HermesRuntimeTestMethodsTest()",
          "116: };",
          "118: TEST_F(HermesRuntimeTestMethodsTest, ExternalArrayBufferTest) {",
          "",
          "[Removed Lines]",
          "110: class HermesRuntimeTestMethodsTest : public HermesRuntimeTestBase {",
          "113:       : HermesRuntimeTestBase(::hermes::vm::RuntimeConfig::Builder()",
          "114:                                   .withEnableHermesInternalTestMethods(true)",
          "115:                                   .build()) {}",
          "",
          "[Added Lines]",
          "116: class HermesRuntimeTestMethodsTest : public HermesRuntimeCustomConfigTest {",
          "119:       : HermesRuntimeCustomConfigTest(",
          "120:             ::hermes::vm::RuntimeConfig::Builder()",
          "121:                 .withEnableHermesInternalTestMethods(true)",
          "122:                 .build()) {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "169:   }",
          "170: }",
          "173:   const uint8_t shortBytes[] = {1, 2, 3};",
          "174:   EXPECT_FALSE(HermesRuntime::isHermesBytecode(shortBytes, 0));",
          "175:   EXPECT_FALSE(HermesRuntime::isHermesBytecode(shortBytes, sizeof(shortBytes)));",
          "",
          "[Removed Lines]",
          "172: TEST_F(HermesRuntimeTest, BytecodeTest) {",
          "",
          "[Added Lines]",
          "179: TEST_P(HermesRuntimeTest, BytecodeTest) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:   EXPECT_EQ(HermesRuntime::getBytecodeVersion(), hermes::hbc::BYTECODE_VERSION);",
          "189: }",
          "192:   eval(\"var q = 0;\");",
          "193:   std::string bytecode;",
          "194:   ASSERT_TRUE(hermes::compileJS(\"q++\", bytecode));",
          "",
          "[Removed Lines]",
          "191: TEST_F(HermesRuntimeTest, PreparedJavaScriptBytecodeTest) {",
          "",
          "[Added Lines]",
          "198: TEST_P(HermesRuntimeTest, PreparedJavaScriptBytecodeTest) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "201:   EXPECT_EQ(rt->global().getProperty(*rt, \"q\").getNumber(), 2);",
          "202: }",
          "206:   const a: number = 12;",
          "207:   class MyClass {",
          "",
          "[Removed Lines]",
          "204: TEST_F(HermesRuntimeTest, CompileWithSourceMapTest) {",
          "",
          "[Added Lines]",
          "211: TEST_P(HermesRuntimeTest, CompileWithSourceMapTest) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "260:   }",
          "261: }",
          "264:   std::string code = R\"xyz(",
          "265:     (function(){",
          "266: var i = 0;",
          "",
          "[Removed Lines]",
          "263: TEST_F(HermesRuntimeTest, JumpTableBytecodeTest) {",
          "",
          "[Added Lines]",
          "270: TEST_P(HermesRuntimeTest, JumpTableBytecodeTest) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "286:   ASSERT_EQ(ret.asNumber(), 5.0);",
          "287: }",
          "290:   const char *badSource = \"this is definitely not valid javascript\";",
          "291:   EXPECT_THROW(",
          "292:       rt->prepareJavaScript(std::make_unique<StringBuffer>(badSource), \"\"),",
          "",
          "[Removed Lines]",
          "289: TEST_F(HermesRuntimeTest, PreparedJavaScriptInvalidSourceThrows) {",
          "",
          "[Added Lines]",
          "296: TEST_P(HermesRuntimeTest, PreparedJavaScriptInvalidSourceThrows) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "294:       << \"prepareJavaScript should have thrown an exception\";",
          "295: }",
          "299:   char badSource[32];",
          "300:   memset((void *)badSource, '\\xFE', sizeof(badSource));",
          "",
          "[Removed Lines]",
          "297: TEST_F(HermesRuntimeTest, PreparedJavaScriptInvalidSourceBufferPrefix) {",
          "",
          "[Added Lines]",
          "304: TEST_P(HermesRuntimeTest, PreparedJavaScriptInvalidSourceBufferPrefix) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "310:   EXPECT_TRUE(errMsg.find(prefix) != std::string::npos);",
          "311: }",
          "",
          "[Removed Lines]",
          "313: TEST_F(HermesRuntimeTest, NoCorruptionOnJSError) {",
          "",
          "[Added Lines]",
          "320: TEST_P(HermesRuntimeTest, NoCorruptionOnJSError) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "349: }",
          "350: #endif",
          "353:   Value val = Object(*rt);",
          "355:   std::unique_ptr<Object> obj;",
          "",
          "[Removed Lines]",
          "352: TEST_F(HermesRuntimeTest, DontGrowWhenMoveObjectOutOfValue) {",
          "",
          "[Added Lines]",
          "359: TEST(HermesRootsTest, DontGrowWhenMoveObjectOutOfValue) {",
          "360:   auto rt = makeHermesRuntime();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "359:   EXPECT_EQ(rootsDelta, 0);",
          "360: }",
          "363:   Value val = Object(*rt);",
          "364:   constexpr int kCloneCount = 1000;",
          "",
          "[Removed Lines]",
          "362: TEST_F(HermesRuntimeTest, DontGrowWhenCloneObject) {",
          "",
          "[Added Lines]",
          "370: TEST(HermesRootsTest, DontGrowWhenCloneObject) {",
          "371:   auto rt = makeHermesRuntime();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "512:   EXPECT_EQ(callstack, expected);",
          "513: }",
          "516:   class HostObjectWithPropertyNames : public HostObject {",
          "517:     std::vector<PropNameID> getPropertyNames(Runtime &rt) override {",
          "518:       return PropNameID::names(rt, \"prop1\", \"1\", \"2\", \"prop2\", \"3\");",
          "",
          "[Removed Lines]",
          "515: TEST_F(HermesRuntimeTest, SpreadHostObjectWithOwnProperties) {",
          "",
          "[Added Lines]",
          "524: TEST_P(HermesRuntimeTest, SpreadHostObjectWithOwnProperties) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "536:   EXPECT_EQ(res, \"1,2,3,prop1,prop2\");",
          "537: }",
          "540:   class HostObjectWithPropertyNames : public HostObject {",
          "541:     std::vector<PropNameID> getPropertyNames(Runtime &rt) override {",
          "542:       return PropNameID::names(rt, \"prop1\", \"1\", \"2\", \"prop2\", \"3\");",
          "",
          "[Removed Lines]",
          "539: TEST_F(HermesRuntimeTest, HostObjectWithOwnProperties) {",
          "",
          "[Added Lines]",
          "548: TEST_P(HermesRuntimeTest, HostObjectWithOwnProperties) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "615: }",
          "619:   Object o = eval(\"({one: 1})\").getObject(*rt);",
          "620:   WeakObject wo = WeakObject(*rt, o);",
          "621:   rt->global().setProperty(*rt, \"obj\", o);",
          "",
          "[Removed Lines]",
          "618: TEST_F(HermesRuntimeTest, WeakReferences) {",
          "",
          "[Added Lines]",
          "627: TEST_P(HermesRuntimeTest, WeakReferences) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "672:   EXPECT_TRUE(wo.lock(*rt).isUndefined());",
          "673: }",
          "676:   std::string sourceURL = \"//SourceURLAppearsInBacktraceTest/Test/URL\";",
          "677:   std::string sourceCode = R\"(",
          "678: function thrower() { throw new Error('Test Error Message')}",
          "",
          "[Removed Lines]",
          "675: TEST_F(HermesRuntimeTest, SourceURLAppearsInBacktraceTest) {",
          "",
          "[Added Lines]",
          "684: TEST_P(HermesRuntimeTest, SourceURLAppearsInBacktraceTest) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "696:   }",
          "697: }",
          "700:   class HostObjectWithProp : public HostObject {",
          "701:     Value get(Runtime &runtime, const PropNameID &name) override {",
          "702:       if (PropNameID::compare(",
          "",
          "[Removed Lines]",
          "699: TEST_F(HermesRuntimeTest, HostObjectAsParentTest) {",
          "",
          "[Added Lines]",
          "708: TEST_P(HermesRuntimeTest, HostObjectAsParentTest) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "714:       eval(\"var subClass = {__proto__: ho}; subClass.prop1 == 10;\").getBool());",
          "715: }",
          "718:   class C : public facebook::jsi::NativeState {",
          "719:    public:",
          "720:     int *dtors;",
          "",
          "[Removed Lines]",
          "717: TEST_F(HermesRuntimeTest, NativeStateTest) {",
          "",
          "[Added Lines]",
          "726: TEST_P(HermesRuntimeTest, NativeStateTest) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "759:   eval(\"gc()\");",
          "760: }",
          "763:   auto strProp = PropNameID::forAscii(*rt, \"a\");",
          "764:   auto secretProp = PropNameID::forSymbol(",
          "",
          "[Removed Lines]",
          "762: TEST_F(HermesRuntimeTest, PropNameIDFromSymbol) {",
          "",
          "[Added Lines]",
          "771: TEST_P(HermesRuntimeTest, PropNameIDFromSymbol) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "774:   EXPECT_EQ(x.getProperty(*rt, globalProp).getString(*rt).utf8(*rt), \"global\");",
          "775: }",
          "",
          "[Removed Lines]",
          "777: TEST_F(HermesRuntimeTest, HasComputedTest) {",
          "",
          "[Added Lines]",
          "786: TEST_P(HermesRuntimeTest, HasComputedTest) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "800:   EXPECT_TRUE(eval(\"'prop' in new Proxy({}, {has: returnTrue})\").getBool());",
          "801: }",
          "804:   rt->global().setProperty(*rt, \"a\", 5);",
          "805:   eval(\"f = function(b) { return a + b; }\");",
          "806:   eval(\"gc()\");",
          "807:   EXPECT_EQ(eval(\"f(10)\").getNumber(), 15);",
          "808: }",
          "811:  public:",
          "812:   HermesRuntimeTestWithDisableGenerator()",
          "816: };",
          "818: TEST_F(HermesRuntimeTestWithDisableGenerator, WithDisableGenerator) {",
          "",
          "[Removed Lines]",
          "803: TEST_F(HermesRuntimeTest, GlobalObjectTest) {",
          "810: class HermesRuntimeTestWithDisableGenerator : public HermesRuntimeTestBase {",
          "813:       : HermesRuntimeTestBase(::hermes::vm::RuntimeConfig::Builder()",
          "814:                                   .withEnableGenerator(false)",
          "815:                                   .build()) {}",
          "",
          "[Added Lines]",
          "812: TEST_P(HermesRuntimeTest, GlobalObjectTest) {",
          "819: class HermesRuntimeTestWithDisableGenerator",
          "820:     : public HermesRuntimeCustomConfigTest {",
          "823:       : HermesRuntimeCustomConfigTest(::hermes::vm::RuntimeConfig::Builder()",
          "824:                                           .withEnableGenerator(false)",
          "825:                                           .build()) {}",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "836:       << \"Expected JSIException\";",
          "837: }",
          "840:   using DiagnosticHandler = hermes::DiagnosticHandler;",
          "842:   struct BufferingDiagnosticHandler : DiagnosticHandler {",
          "",
          "[Removed Lines]",
          "839: TEST_F(HermesRuntimeTest, DiagnosticHandlerTestError) {",
          "",
          "[Added Lines]",
          "849: TEST_P(HermesRuntimeTest, DiagnosticHandlerTestError) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "854:   EXPECT_EQ(4, diagHandler.ds[0].column);",
          "855: }",
          "858:   using DiagnosticHandler = hermes::DiagnosticHandler;",
          "860:   struct BufferingDiagnosticHandler : DiagnosticHandler {",
          "",
          "[Removed Lines]",
          "857: TEST_F(HermesRuntimeTest, DiagnosticHandlerTestWarning) {",
          "",
          "[Added Lines]",
          "867: TEST_P(HermesRuntimeTest, DiagnosticHandlerTestWarning) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "886:   EXPECT_EQ(5, diagHandler.ds[1].ranges[0].second);",
          "887: }",
          "890:   Function bigintCtor = rt->global().getPropertyAsFunction(*rt, \"BigInt\");",
          "891:   auto BigInt = [&](const char *v) { return bigintCtor.call(*rt, eval(v)); };",
          "",
          "[Removed Lines]",
          "889: TEST_F(HermesRuntimeTest, BigIntJSI) {",
          "",
          "[Added Lines]",
          "899: TEST_P(HermesRuntimeTest, BigIntJSI) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "912:   EXPECT_FALSE(BigInt::strictEquals(*rt, bNeg1, bffffffffffffffff));",
          "913: }",
          "916:   Function bigintCtor = rt->global().getPropertyAsFunction(*rt, \"BigInt\");",
          "917:   auto BigInt = [&](const char *v) {",
          "918:     return bigintCtor.call(*rt, eval(v)).asBigInt(*rt);",
          "",
          "[Removed Lines]",
          "915: TEST_F(HermesRuntimeTest, BigIntJSIFromScalar) {",
          "",
          "[Added Lines]",
          "925: TEST_P(HermesRuntimeTest, BigIntJSIFromScalar) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "932:       BigInt::strictEquals(*rt, BigInt(\"-1\"), BigInt::fromInt64(*rt, ~0ull)));",
          "933: }",
          "936:   auto b = BigInt::fromUint64(*rt, 1);",
          "938:   for (int radix = 2; radix <= 36; ++radix) {",
          "",
          "[Removed Lines]",
          "935: TEST_F(HermesRuntimeTest, BigIntJSIToString) {",
          "",
          "[Added Lines]",
          "945: TEST_P(HermesRuntimeTest, BigIntJSIToString) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "959:   }",
          "960: }",
          "963:   auto lossless = [](uint64_t value) { return std::make_tuple(value, true); };",
          "964:   auto lossy = [](uint64_t value) { return std::make_tuple(value, false); };",
          "",
          "[Removed Lines]",
          "962: TEST_F(HermesRuntimeTest, BigIntJSITruncation) {",
          "",
          "[Added Lines]",
          "972: TEST_P(HermesRuntimeTest, BigIntJSITruncation) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1018: }",
          "1020: #ifdef HERMESVM_EXCEPTION_ON_OOM",
          "1022:  public:",
          "1023:   HermesRuntimeTestSmallHeap()",
          "1025:             ::hermes::vm::RuntimeConfig::Builder()",
          "1026:                 .withGCConfig(::hermes::vm::GCConfig::Builder()",
          "1027:                                   .withInitHeapSize(8 << 20)",
          "",
          "[Removed Lines]",
          "1021: class HermesRuntimeTestSmallHeap : public HermesRuntimeTestBase {",
          "1024:       : HermesRuntimeTestBase(",
          "",
          "[Added Lines]",
          "1031: class HermesRuntimeTestSmallHeap : public HermesRuntimeCustomConfigTest {",
          "1034:       : HermesRuntimeCustomConfigTest(",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1069: }",
          "1070: #endif",
          "1073:   Function alwaysThrows = Function::createFromHostFunction(",
          "1075:       PropNameID::forAscii(*rt, \"alwaysThrows\"),",
          "",
          "[Removed Lines]",
          "1072: TEST_F(HermesRuntimeTest, NativeExceptionDoesNotUseGlobalError) {",
          "",
          "[Added Lines]",
          "1082: TEST_P(HermesRuntimeTest, NativeExceptionDoesNotUseGlobalError) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1099:       test.call(*rt).getString(*rt).utf8(*rt));",
          "1100: }",
          "1102: } // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112: INSTANTIATE_TEST_CASE_P(",
          "1113:     Runtimes,",
          "1114:     HermesRuntimeTest,",
          "1115:     ::testing::ValuesIn(runtimeGenerators()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b6888cdcd7d175076c8861249812d17c6a88025",
      "candidate_info": {
        "commit_hash": "8b6888cdcd7d175076c8861249812d17c6a88025",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/8b6888cdcd7d175076c8861249812d17c6a88025",
        "files": [
          "include/hermes/VM/JSObject.h",
          "include/hermes/VM/JSProxy.h",
          "include/hermes/VM/TypesafeFlags.h",
          "lib/VM/JSLib/HermesBuiltin.cpp",
          "lib/VM/JSLib/Object.cpp",
          "lib/VM/JSLib/Object.h",
          "lib/VM/JSLib/Reflect.cpp",
          "lib/VM/JSObject.cpp",
          "lib/VM/JSProxy.cpp"
        ],
        "message": "Make default behavior of OwnKeyFlags explicit\n\nSummary:\nAdd an option for IncludeEnumerable in OwnKeyFlags. Remove the implicit\ndefault behavior of always including enumerable properties. This way,\nwe have the capability of requesting only the nonenumerable keys,\nsomething which was impossible before this diff. The current use-case\nfor this is handling nonenumerable property shadowing.\n\nFor now, proxy does not support excluding enumerable keys. If support\nis needed for this it can be added later.\n\nReviewed By: jpporto\n\nDifferential Revision: D43645421\n\nfbshipit-source-id: 17700f2c90ffe56ee33b842adcb05cb9bce029ed",
        "before_after_code_files": [
          "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h",
          "include/hermes/VM/JSProxy.h||include/hermes/VM/JSProxy.h",
          "include/hermes/VM/TypesafeFlags.h||include/hermes/VM/TypesafeFlags.h",
          "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp",
          "lib/VM/JSLib/Object.cpp||lib/VM/JSLib/Object.cpp",
          "lib/VM/JSLib/Object.h||lib/VM/JSLib/Object.h",
          "lib/VM/JSLib/Reflect.cpp||lib/VM/JSLib/Reflect.cpp",
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
          "lib/VM/JSProxy.cpp||lib/VM/JSProxy.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp"
          ],
          "candidate": [
            "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h": [
          "File: include/hermes/VM/JSObject.h -> include/hermes/VM/JSObject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: HERMES_VM__DECLARE_FLAGS_CLASS(PropOpFlags, HERMES_VM__LIST_PropOpFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: namespace OwnKeys {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197: #define HERMES_VM__LIST_OwnKeysFlags(FLAG) \\",
          "198:   FLAG(IncludeSymbols)                     \\",
          "199:   FLAG(IncludeNonSymbols)                  \\",
          "200:   FLAG(IncludeNonEnumerable)",
          "",
          "[Removed Lines]",
          "202: HERMES_VM__DECLARE_FLAGS_CLASS(OwnKeysFlags, HERMES_VM__LIST_OwnKeysFlags);",
          "",
          "[Added Lines]",
          "208:   FLAG(IncludeEnumerable)                  \\",
          "211: HERMES_VM__DECLARE_FLAGS_CLASS(Flags, HERMES_VM__LIST_OwnKeysFlags);",
          "215: constexpr Flags Default() {",
          "216:   return Flags().plusIncludeEnumerable();",
          "217: }",
          "220: constexpr Flags AllKeys() {",
          "221:   return Flags()",
          "222:       .plusIncludeSymbols()",
          "223:       .plusIncludeNonSymbols()",
          "224:       .plusIncludeEnumerable()",
          "225:       .plusIncludeNonEnumerable();",
          "226: }",
          "227: } // namespace OwnKeys",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554:   static CallResult<Handle<JSArray>> getOwnPropertyKeys(",
          "555:       Handle<JSObject> selfHandle,",
          "556:       Runtime &runtime,",
          "",
          "[Removed Lines]",
          "557:       OwnKeysFlags okFlags);",
          "",
          "[Added Lines]",
          "582:       OwnKeys::Flags okFlags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "570:     return getOwnPropertyKeys(",
          "571:         selfHandle,",
          "572:         runtime,",
          "574:             !onlyEnumerable));",
          "575:   }",
          "",
          "[Removed Lines]",
          "573:         OwnKeysFlags().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "[Added Lines]",
          "598:         OwnKeys::Default().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "583:     return getOwnPropertyKeys(",
          "584:         selfHandle,",
          "585:         runtime,",
          "587:   }",
          "",
          "[Removed Lines]",
          "586:         OwnKeysFlags().plusIncludeSymbols().plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "611:         OwnKeys::Default().plusIncludeSymbols().plusIncludeNonEnumerable());",
          "",
          "---------------"
        ],
        "include/hermes/VM/JSProxy.h||include/hermes/VM/JSProxy.h": [
          "File: include/hermes/VM/JSProxy.h -> include/hermes/VM/JSProxy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   static CallResult<PseudoHandle<JSArray>> ownPropertyKeys(",
          "174:       Handle<JSObject> selfHandle,",
          "175:       Runtime &runtime,",
          "178:  public:",
          "179:   JSProxy(Runtime &runtime, Handle<JSObject> parent, Handle<HiddenClass> clazz)",
          "",
          "[Removed Lines]",
          "176:       OwnKeysFlags okFlags);",
          "",
          "[Added Lines]",
          "176:       OwnKeys::Flags okFlags);",
          "",
          "---------------"
        ],
        "include/hermes/VM/TypesafeFlags.h||include/hermes/VM/TypesafeFlags.h": [
          "File: include/hermes/VM/TypesafeFlags.h -> include/hermes/VM/TypesafeFlags.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define HERMES_VM_TYPESAFEFLAGS_H",
          "58: #define _HERMES_VM__DECL_FLAG(name) bool f##name##_ : 1;",
          "77:   }",
          "79: #define HERMES_VM__DECLARE_FLAGS_CLASS(ClassName, listMacro) \\",
          "",
          "[Removed Lines]",
          "59: #define _HERMES_VM__IMPL_FLAG(name) \\",
          "60:   Self plus##name() const {         \\",
          "61:     auto r(*this);                  \\",
          "62:     r.f##name##_ = true;            \\",
          "63:     return r;                       \\",
          "64:   }                                 \\",
          "65:   Self minus##name() const {        \\",
          "66:     auto r(*this);                  \\",
          "67:     r.f##name##_ = false;           \\",
          "68:     return r;                       \\",
          "69:   }                                 \\",
          "70:   Self set##name(bool v) const {    \\",
          "71:     auto r(*this);                  \\",
          "72:     r.f##name##_ = v;               \\",
          "73:     return r;                       \\",
          "74:   }                                 \\",
          "75:   bool get##name() const {          \\",
          "76:     return f##name##_;              \\",
          "",
          "[Added Lines]",
          "59: #define _HERMES_VM__IMPL_FLAG(name)        \\",
          "60:   constexpr Self plus##name() const {      \\",
          "61:     auto r(*this);                         \\",
          "62:     r.f##name##_ = true;                   \\",
          "63:     return r;                              \\",
          "64:   }                                        \\",
          "65:   constexpr Self minus##name() const {     \\",
          "66:     auto r(*this);                         \\",
          "67:     r.f##name##_ = false;                  \\",
          "68:     return r;                              \\",
          "69:   }                                        \\",
          "70:   constexpr Self set##name(bool v) const { \\",
          "71:     auto r(*this);                         \\",
          "72:     r.f##name##_ = v;                      \\",
          "73:     return r;                              \\",
          "74:   }                                        \\",
          "75:   constexpr bool get##name() const {       \\",
          "76:     return f##name##_;                     \\",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp": [
          "File: lib/VM/JSLib/HermesBuiltin.cpp -> lib/VM/JSLib/HermesBuiltin.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     Handle<JSObject> from,",
          "254:     Handle<JSObject> excludedItems) {",
          "263:   if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION)) {",
          "264:     return ExecutionStatus::EXCEPTION;",
          "265:   }",
          "",
          "[Removed Lines]",
          "256:   auto cr = JSObject::getOwnPropertyKeys(",
          "257:       from,",
          "258:       runtime,",
          "259:       OwnKeysFlags()",
          "260:           .plusIncludeSymbols()",
          "261:           .plusIncludeNonSymbols()",
          "262:           .plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "256:   auto cr = JSObject::getOwnPropertyKeys(from, runtime, OwnKeys::AllKeys());",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Object.cpp||lib/VM/JSLib/Object.cpp": [
          "File: lib/VM/JSLib/Object.cpp -> lib/VM/JSLib/Object.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:   Handle<JSObject> obj = runtime.makeHandle<JSObject>(objRes.getValue());",
          "404:   if (LLVM_UNLIKELY(ownKeysRes == ExecutionStatus::EXCEPTION)) {",
          "405:     return ExecutionStatus::EXCEPTION;",
          "406:   }",
          "",
          "[Removed Lines]",
          "397:   auto ownKeysRes = JSObject::getOwnPropertyKeys(",
          "398:       obj,",
          "399:       runtime,",
          "400:       OwnKeysFlags()",
          "401:           .plusIncludeNonSymbols()",
          "402:           .plusIncludeSymbols()",
          "403:           .plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "397:   auto ownKeysRes =",
          "398:       JSObject::getOwnPropertyKeys(obj, runtime, OwnKeys::AllKeys());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449: CallResult<HermesValue> getOwnPropertyKeysAsStrings(",
          "450:     Handle<JSObject> selfHandle,",
          "451:     Runtime &runtime,",
          "453:   auto cr = JSObject::getOwnPropertyKeys(selfHandle, runtime, okFlags);",
          "454:   if (cr == ExecutionStatus::EXCEPTION) {",
          "455:     return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "452:     OwnKeysFlags okFlags) {",
          "",
          "[Added Lines]",
          "447:     OwnKeys::Flags okFlags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:   auto cr = getOwnPropertyKeysAsStrings(",
          "488:       objHandle,",
          "489:       runtime,",
          "491:   if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION)) {",
          "492:     return ExecutionStatus::EXCEPTION;",
          "493:   }",
          "",
          "[Removed Lines]",
          "490:       OwnKeysFlags().plusIncludeNonSymbols().plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "485:       OwnKeys::Default().plusIncludeNonSymbols().plusIncludeNonEnumerable());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "578:   auto cr = JSObject::getOwnPropertyKeys(",
          "579:       propsHandle,",
          "580:       runtime,",
          "",
          "[Removed Lines]",
          "581:       OwnKeysFlags()",
          "582:           .plusIncludeSymbols()",
          "583:           .plusIncludeNonSymbols()",
          "",
          "[Added Lines]",
          "576:       OwnKeys::AllKeys()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "800:   auto namesRes = getOwnPropertyKeysAsStrings(",
          "801:       objHandle,",
          "802:       runtime,",
          "804:           objHandle->isProxyObject()));",
          "805:   if (namesRes == ExecutionStatus::EXCEPTION) {",
          "806:     return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "803:       OwnKeysFlags().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "[Added Lines]",
          "796:       OwnKeys::Default().plusIncludeNonSymbols().setIncludeNonEnumerable(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1038:     auto cr = JSObject::getOwnPropertyKeys(",
          "1039:         fromHandle,",
          "1040:         runtime,",
          "1045:     if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION)) {",
          "1047:       return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "1041:         OwnKeysFlags()",
          "1042:             .plusIncludeSymbols()",
          "1043:             .plusIncludeNonSymbols()",
          "1044:             .setIncludeNonEnumerable(fromHandle->isProxyObject()));",
          "",
          "[Added Lines]",
          "1034:         OwnKeys::AllKeys().setIncludeNonEnumerable(",
          "1035:             fromHandle->isProxyObject()));",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Object.h||lib/VM/JSLib/Object.h": [
          "File: lib/VM/JSLib/Object.h -> lib/VM/JSLib/Object.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: CallResult<HermesValue> getOwnPropertyKeysAsStrings(",
          "34:     Handle<JSObject> selfHandle,",
          "35:     Runtime &runtime,",
          "",
          "[Removed Lines]",
          "36:     OwnKeysFlags okFlags);",
          "",
          "[Added Lines]",
          "36:     OwnKeys::Flags okFlags);",
          "",
          "---------------"
        ],
        "lib/VM/JSLib/Reflect.cpp||lib/VM/JSLib/Reflect.cpp": [
          "File: lib/VM/JSLib/Reflect.cpp -> lib/VM/JSLib/Reflect.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     return runtime.raiseTypeError(\"target is not an object\");",
          "203:   }",
          "212: }",
          "214: CallResult<HermesValue>",
          "",
          "[Removed Lines]",
          "205:   return getOwnPropertyKeysAsStrings(",
          "206:       target,",
          "207:       runtime,",
          "208:       OwnKeysFlags()",
          "209:           .plusIncludeSymbols()",
          "210:           .plusIncludeNonSymbols()",
          "211:           .plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "205:   return getOwnPropertyKeysAsStrings(target, runtime, OwnKeys::AllKeys());",
          "",
          "---------------"
        ],
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: CallResult<Handle<JSArray>> JSObject::getOwnPropertyKeys(",
          "351:     Handle<JSObject> selfHandle,",
          "352:     Runtime &runtime,",
          "354:   assert(",
          "355:       (okFlags.getIncludeNonSymbols() || okFlags.getIncludeSymbols()) &&",
          "356:       \"Can't exclude symbols and strings\");",
          "357:   if (LLVM_UNLIKELY(",
          "358:           selfHandle->flags_.lazyObject || selfHandle->flags_.proxyObject)) {",
          "359:     if (selfHandle->flags_.proxyObject) {",
          "",
          "[Removed Lines]",
          "353:     OwnKeysFlags okFlags) {",
          "",
          "[Added Lines]",
          "353:     OwnKeys::Flags okFlags) {",
          "357:   assert(",
          "358:       (okFlags.getIncludeEnumerable() || okFlags.getIncludeNonEnumerable()) &&",
          "359:       \"Can't exclude enumerable and non-enumerable\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:   if (okFlags.getIncludeNonSymbols()) {",
          "410:       assert(",
          "411:           range.first == range.second &&",
          "412:           \"Host objects cannot own indexed range\");",
          "",
          "[Removed Lines]",
          "409:     if (LLVM_UNLIKELY(selfHandle->flags_.hostObject)) {",
          "",
          "[Added Lines]",
          "413:     if (LLVM_UNLIKELY(",
          "414:             selfHandle->flags_.hostObject && okFlags.getIncludeEnumerable())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:       if (!res)",
          "429:         continue;",
          "432:       if (!okFlags.getIncludeNonEnumerable() && !res->enumerable)",
          "433:         continue;",
          "435:       tmpHandle = HermesValue::encodeDoubleValue(i);",
          "436:       JSArray::setElementAt(array, runtime, index++, tmpHandle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "440:       if (!okFlags.getIncludeEnumerable() && res->enumerable)",
          "441:         continue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "454:             return;",
          "455:           }",
          "458:           if (!okFlags.getIncludeNonEnumerable()) {",
          "459:             if (!desc.flags.enumerable)",
          "460:               return;",
          "461:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:           if (!okFlags.getIncludeEnumerable()) {",
          "472:             if (desc.flags.enumerable)",
          "473:               return;",
          "474:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "524:           if (!isSymbolPrimitive(id)) {",
          "525:             return;",
          "526:           }",
          "528:           if (!okFlags.getIncludeNonEnumerable()) {",
          "529:             if (!desc.flags.enumerable)",
          "530:               return;",
          "531:           }",
          "532:           idHandle = id;",
          "533:           JSArray::setElementAt(array, runtime, index++, idHandle);",
          "534:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:           if (!okFlags.getIncludeEnumerable()) {",
          "547:             if (desc.flags.enumerable)",
          "548:               return;",
          "549:           }",
          "",
          "---------------"
        ],
        "lib/VM/JSProxy.cpp||lib/VM/JSProxy.cpp": [
          "File: lib/VM/JSProxy.cpp -> lib/VM/JSProxy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1265:     Handle<JSObject> selfHandle,",
          "1266:     Handle<JSArray> keys,",
          "1267:     Runtime &runtime,",
          "1269:   assert(",
          "1270:       (okFlags.getIncludeNonSymbols() || okFlags.getIncludeSymbols()) &&",
          "1271:       \"Can't exclude symbols and strings\");",
          "",
          "[Removed Lines]",
          "1268:     OwnKeysFlags okFlags) {",
          "",
          "[Added Lines]",
          "1268:     OwnKeys::Flags okFlags) {",
          "1269:   assert(",
          "1270:       okFlags.getIncludeEnumerable() &&",
          "1271:       \"For now, proxy does not support excluding enumerable keys\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1342: CallResult<PseudoHandle<JSArray>> JSProxy::ownPropertyKeys(",
          "1343:     Handle<JSObject> selfHandle,",
          "1344:     Runtime &runtime,",
          "1346:   GCScope gcScope{runtime};",
          "1347:   ScopedNativeDepthTracker depthTracker(runtime);",
          "1348:   if (LLVM_UNLIKELY(depthTracker.overflowed())) {",
          "",
          "[Removed Lines]",
          "1345:     OwnKeysFlags okFlags) {",
          "",
          "[Added Lines]",
          "1348:     OwnKeys::Flags okFlags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1361:     CallResult<Handle<JSArray>> targetRes =",
          "1371:     if (targetRes == ExecutionStatus::EXCEPTION) {",
          "1372:       return ExecutionStatus::EXCEPTION;",
          "1373:     }",
          "",
          "[Removed Lines]",
          "1364:         JSObject::getOwnPropertyKeys(",
          "1365:             target,",
          "1366:             runtime,",
          "1367:             OwnKeysFlags()",
          "1368:                 .plusIncludeSymbols()",
          "1369:                 .plusIncludeNonSymbols()",
          "1370:                 .plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "1367:         JSObject::getOwnPropertyKeys(target, runtime, OwnKeys::AllKeys());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1448:     return ExecutionStatus::EXCEPTION;",
          "1449:   }",
          "1458:   if (targetKeysRes == ExecutionStatus::EXCEPTION) {",
          "1459:     return ExecutionStatus::EXCEPTION;",
          "1460:   }",
          "",
          "[Removed Lines]",
          "1451:   CallResult<Handle<JSArray>> targetKeysRes = JSObject::getOwnPropertyKeys(",
          "1452:       target,",
          "1453:       runtime,",
          "1454:       OwnKeysFlags()",
          "1455:           .plusIncludeSymbols()",
          "1456:           .plusIncludeNonSymbols()",
          "1457:           .plusIncludeNonEnumerable());",
          "",
          "[Added Lines]",
          "1448:   CallResult<Handle<JSArray>> targetKeysRes =",
          "1449:       JSObject::getOwnPropertyKeys(target, runtime, OwnKeys::AllKeys());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "897c31e8addd3f951f8de9cafbf8c4fef44d63d5",
      "candidate_info": {
        "commit_hash": "897c31e8addd3f951f8de9cafbf8c4fef44d63d5",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/897c31e8addd3f951f8de9cafbf8c4fef44d63d5",
        "files": [
          "lib/VM/JSLib/HermesBuiltin.cpp",
          "test/hermes/regress-spread-operator.js",
          "unittests/API/APITest.cpp"
        ],
        "message": "Use copyDataProperties slow path for objects with accessors\n\nSummary:\nOriginal Author: fbmal7@meta.com\nOriginal Git: a00d237346894c6067a594983be6634f4168c9ad\n\nFix a bug present in `hermesBuiltinCopyDataProperties`.\n`hermesBuiltinCopyDataProperties` is meant to copy an object. It does\nthis by iterating over all the properties in the source object, and\nthen writing the key-value pair into a new object which is returned.The\niteration is done using `JSObject::forEachOwnPropertyWhile`, providing\na callback to process each property. It will take the property id, look\nit up in the source object using `getNamedPropertyValue_RJS`, then take\nthat resulting value and write it into the target. However, that API\nexplicitly states the following:\n\n> Obviously the callbacks shouldn't be  doing naughty things like modifying\nthe property map or creating new hidden classes (even implicitly)\n\nBut, `getNamedPropertyValue_RJS` can\nperform arbitrary JS execution if it is a getter, including\nadding/deleting new properties, which would modify the object's\nHiddenClass, thus violating `JSObject::forEachOwnPropertyWhile`'s\nprecondition.Therefore, the fix is to use the correct, but slower path,\nwhenever there is an accessor on the object. This code path is more 1:1\nto the spec. At the beginning, it will simply find all the properties\nof the source object using `JSObject::getOwnPropertyKeys` and then\niterate on those, rather than use `JSObject::forEachOwnPropertyWhile`.\nThis way, we are allowed to manipulate the source object however we\nwish, which is necessary in order to call `getNamedPropertyValue_RJS`.\n\nOriginal Reviewed By: neildhar\n\nOriginal Revision: D41701871\n\nReviewed By: tmikov\n\nDifferential Revision: D44770959\n\nfbshipit-source-id: 8a04ee1b2894972066ed1e8fac36558d2c6dd371",
        "before_after_code_files": [
          "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp",
          "test/hermes/regress-spread-operator.js||test/hermes/regress-spread-operator.js",
          "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp",
            "test/hermes/regress-spread-operator.js||test/hermes/regress-spread-operator.js",
            "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
          ],
          "candidate": [
            "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp",
            "test/hermes/regress-spread-operator.js||test/hermes/regress-spread-operator.js",
            "unittests/API/APITest.cpp||unittests/API/APITest.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/VM/JSLib/HermesBuiltin.cpp||lib/VM/JSLib/HermesBuiltin.cpp": [
          "File: lib/VM/JSLib/HermesBuiltin.cpp -> lib/VM/JSLib/HermesBuiltin.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     Handle<JSObject> target,",
          "204:     Handle<JSObject> from,",
          "205:     Handle<JSObject> excludedItems) {",
          "212:       from,",
          "213:       runtime,",
          "214:       OwnKeysFlags()",
          "",
          "[Removed Lines]",
          "206:   assert(",
          "207:       from->isProxyObject() &&",
          "208:       \"copyDataPropertiesSlowPath_RJS is only for Proxy\");",
          "211:   auto cr = JSProxy::getOwnPropertyKeys(",
          "",
          "[Added Lines]",
          "207:   auto cr = JSObject::getOwnPropertyKeys(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:     ComputedPropertyDescriptor desc;",
          "267:     if (LLVM_UNLIKELY(crb == ExecutionStatus::EXCEPTION))",
          "268:       return ExecutionStatus::EXCEPTION;",
          "272:       CallResult<PseudoHandle<>> crv =",
          "274:       if (LLVM_UNLIKELY(crv == ExecutionStatus::EXCEPTION))",
          "275:         return ExecutionStatus::EXCEPTION;",
          "276:       propValueHandle = std::move(*crv);",
          "",
          "[Removed Lines]",
          "265:     CallResult<bool> crb =",
          "266:         JSProxy::getOwnProperty(from, runtime, nextKeyHandle, desc, nullptr);",
          "270:     if (*crb && desc.flags.enumerable) {",
          "273:           JSProxy::getComputed(from, runtime, nextKeyHandle, from);",
          "",
          "[Added Lines]",
          "261:     CallResult<bool> crb = JSObject::getOwnComputedDescriptor(",
          "262:         from, runtime, nextKeyHandle, tmpSymbolStorage, desc);",
          "268:     if ((*crb && desc.flags.enumerable) || from->isHostObject()) {",
          "271:           JSObject::getComputed_RJS(from, runtime, nextKeyHandle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:       (!excludedItems || !excludedItems->isProxyObject()) &&",
          "333:       \"excludedItems internal List is a Proxy\");",
          "336:     return copyDataPropertiesSlowPath_RJS(",
          "337:         runtime, target, source, excludedItems);",
          "338:   }",
          "",
          "[Removed Lines]",
          "335:   if (source->isProxyObject()) {",
          "",
          "[Added Lines]",
          "338:   if (source->isProxyObject() || source->isHostObject() ||",
          "339:       source->getClass(runtime)->getMayHaveAccessor()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410:             return true;",
          "411:         }",
          "",
          "[Removed Lines]",
          "413:         auto cr =",
          "414:             JSObject::getNamedPropertyValue_RJS(source, runtime, source, desc);",
          "415:         if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION))",
          "416:           return false;",
          "418:         valueHandle = std::move(*cr);",
          "",
          "[Added Lines]",
          "417:         SmallHermesValue shv =",
          "418:             JSObject::getNamedSlotValueUnsafe(*source, runtime, desc);",
          "419:         valueHandle = runtime.makeHandle(shv.unboxToHV(runtime));",
          "",
          "---------------"
        ],
        "test/hermes/regress-spread-operator.js||test/hermes/regress-spread-operator.js": [
          "File: test/hermes/regress-spread-operator.js -> test/hermes/regress-spread-operator.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: var obj = {",
          "15:   get foo() {",
          "16:     this.tutu = 'hi';",
          "17:     delete obj.bar;",
          "18:     obj.tutu = 'lol';",
          "19:   },",
          "20:    bar: 'bar'",
          "21: };",
          "22: print({ ...obj }.tutu)",
          "25: var obj2 = {",
          "26:   get foo() {",
          "27:     obj2.bar = 'foo'",
          "28:   },",
          "29:   bar: 'bar'",
          "30: };",
          "31: print({ ...obj2 }.bar)",
          "",
          "---------------"
        ],
        "unittests/API/APITest.cpp||unittests/API/APITest.cpp": [
          "File: unittests/API/APITest.cpp -> unittests/API/APITest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:   EXPECT_EQ(callstack, expected);",
          "494: }",
          "496: TEST_F(HermesRuntimeTest, HostObjectWithOwnProperties) {",
          "497:   class HostObjectWithPropertyNames : public HostObject {",
          "498:     std::vector<PropNameID> getPropertyNames(Runtime &rt) override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496: TEST_F(HermesRuntimeTest, SpreadHostObjectWithOwnProperties) {",
          "497:   class HostObjectWithPropertyNames : public HostObject {",
          "498:     std::vector<PropNameID> getPropertyNames(Runtime &rt) override {",
          "499:       return PropNameID::names(rt, \"prop1\", \"1\", \"2\", \"prop2\", \"3\");",
          "500:     }",
          "501:     Value get(Runtime &runtime, const PropNameID &name) override {",
          "502:       return Value();",
          "503:     }",
          "504:   };",
          "506:   Object ho = Object::createFromHostObject(",
          "508:   rt->global().setProperty(*rt, \"ho\", ho);",
          "510:   auto res = eval(R\"###(",
          "511: var spreaded = {...ho};",
          "512: var props = Object.getOwnPropertyNames(spreaded);",
          "513: props.toString();",
          "514: )###\")",
          "515:                  .getString(*rt)",
          "516:                  .utf8(*rt);",
          "517:   EXPECT_EQ(res, \"1,2,3,prop1,prop2\");",
          "518: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}