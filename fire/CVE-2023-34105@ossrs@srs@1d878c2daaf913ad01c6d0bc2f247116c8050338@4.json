{
  "cve_id": "CVE-2023-34105",
  "cve_desc": "SRS is a real-time video server supporting RTMP, WebRTC, HLS, HTTP-FLV, SRT, MPEG-DASH, and GB28181. Prior to versions 5.0.157, 5.0-b1, and 6.0.48, SRS's `api-server` server is vulnerable to a drive-by command injection. An attacker may send a request to the `/api/v1/snapshots` endpoint containing any commands to be executed as part of the body of the POST request. This issue may lead to Remote Code Execution (RCE). Versions 5.0.157, 5.0-b1, and 6.0.48 contain a fix.",
  "repo": "ossrs/srs",
  "patch_hash": "1d878c2daaf913ad01c6d0bc2f247116c8050338",
  "patch_info": {
    "commit_hash": "1d878c2daaf913ad01c6d0bc2f247116c8050338",
    "repo": "ossrs/srs",
    "commit_url": "https://github.com/ossrs/srs/commit/1d878c2daaf913ad01c6d0bc2f247116c8050338",
    "files": [
      "trunk/doc/CHANGELOG.md",
      "trunk/research/api-server/server.go",
      "trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp"
    ],
    "message": "Fix command injection in api-server for HTTP callback. v5.0.157, v6.0.48",
    "before_after_code_files": [
      "trunk/research/api-server/server.go||trunk/research/api-server/server.go",
      "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
      "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
    ]
  },
  "patch_diff": {
    "trunk/research/api-server/server.go||trunk/research/api-server/server.go": [
      "File: trunk/research/api-server/server.go -> trunk/research/api-server/server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "400:  normalPicPath := path.Join(outputPicDir, fmt.Sprintf(\"%v\", v.Stream)+\"-%03d.png\")",
      "401:  bestPng := path.Join(outputPicDir, fmt.Sprintf(\"%v-best.png\", v.Stream))",
      "405:  timeoutCtx, _ := context.WithTimeout(v.cancelCtx, v.timeout)",
      "407:  if err = cmd.Run(); err != nil {",
      "408:   log.Println(fmt.Sprintf(\"run snapshot %v cmd failed, err is %v\", v.Tag(), err))",
      "409:   return",
      "",
      "[Removed Lines]",
      "403:  param := fmt.Sprintf(\"%v -i %v -vf fps=1 -vcodec png -f image2 -an -y -vframes %v -y %v\", ffmpegPath, inputUrl, v.vframes, normalPicPath)",
      "404:  log.Println(fmt.Sprintf(\"start snapshot, cmd param=%v\", param))",
      "406:  cmd := exec.CommandContext(timeoutCtx, \"/bin/bash\", \"-c\", param)",
      "",
      "[Added Lines]",
      "403:  params := []string{",
      "404:   \"-i\", inputUrl,",
      "405:   \"-vf\", \"fps=1\",",
      "406:   \"-vcodec\", \"png\",",
      "407:   \"-f\", \"image2\",",
      "408:   \"-an\",",
      "409:   \"-vframes\", strconv.Itoa(v.vframes),",
      "410:   \"-y\", normalPicPath,",
      "411:  }",
      "412:  log.Println(fmt.Sprintf(\"start snapshot, cmd param=%v %v\", ffmpegPath, strings.Join(params, \" \")))",
      "414:  cmd := exec.CommandContext(timeoutCtx, ffmpegPath, params...)",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
      "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       5",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    156",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    157",
      "",
      "---------------"
    ],
    "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
      "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #define VERSION_MAJOR       6",
      "11: #define VERSION_MINOR       0",
      "14: #endif",
      "",
      "[Removed Lines]",
      "12: #define VERSION_REVISION    47",
      "",
      "[Added Lines]",
      "12: #define VERSION_REVISION    48",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "43dfb1bcaa28271a13758473f38adb7220a291f5",
      "candidate_info": {
        "commit_hash": "43dfb1bcaa28271a13758473f38adb7220a291f5",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/43dfb1bcaa28271a13758473f38adb7220a291f5",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_raw_avc.cpp"
        ],
        "message": "H264: Fix H.264 ISOM reserved bit value. v5.0.161, v6.0.55 (#3551)\n\n---------\n\nCo-authored-by: chundonglinlin <chundonglinlin@163.com>",
        "before_after_code_files": [
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/protocol/srs_protocol_raw_avc.cpp||trunk/src/protocol/srs_protocol_raw_avc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    160",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    161",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    54",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    55",
          "",
          "---------------"
        ],
        "trunk/src/protocol/srs_protocol_raw_avc.cpp||trunk/src/protocol/srs_protocol_raw_avc.cpp": [
          "File: trunk/src/protocol/srs_protocol_raw_avc.cpp -> trunk/src/protocol/srs_protocol_raw_avc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:         stream.write_1bytes(level_idc);",
          "161:     }",
          "164:     if (true) {",
          "169:         stream.write_2bytes((int16_t)sps.length());",
          "",
          "[Removed Lines]",
          "160:         stream.write_1bytes(0x03);",
          "167:         stream.write_1bytes(0x01);",
          "",
          "[Added Lines]",
          "160:         stream.write_1bytes(0xfc | 0x03);",
          "167:         stream.write_1bytes(0xe0 | 0x01);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "104cf14d689e40c83b0b1d1d225edfe151f1b7e8",
      "candidate_info": {
        "commit_hash": "104cf14d689e40c83b0b1d1d225edfe151f1b7e8",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/104cf14d689e40c83b0b1d1d225edfe151f1b7e8",
        "files": [
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_rtc_conn.cpp",
          "trunk/src/app/srs_app_rtc_dtls.cpp",
          "trunk/src/app/srs_app_rtc_dtls.hpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "DTLS: Use bio callback to get fragment packet. v5.0.156, v6.0.47 (#3565)\n\n1. The MTU is effective, with the certificate being split into two DTLS records to comply with the limit.\n2. The issue occurs when using BIO_get_mem_data, which retrieves all DTLS packets in a single call, even though each is smaller than the MTU.\n3. An alternative callback is available for using BIO_new with BIO_s_mem.\n4. Improvements to the MTU setting were made, including adding the DTLS_set_link_mtu function and removing the SSL_set_max_send_fragment function.\n5. The handshake process was refined, calling SSL_do_handshake only after ICE completion, and using SSL_read to handle handshake messages.\n6. The session close code was improved to enable immediate closure upon receiving an SSL CloseNotify or fatal message.\n\n------\n\nCo-authored-by: chundonglinlin <chundonglinlin@163.com>",
        "before_after_code_files": [
          "trunk/src/app/srs_app_rtc_conn.cpp||trunk/src/app/srs_app_rtc_conn.cpp",
          "trunk/src/app/srs_app_rtc_dtls.cpp||trunk/src/app/srs_app_rtc_dtls.cpp",
          "trunk/src/app/srs_app_rtc_dtls.hpp||trunk/src/app/srs_app_rtc_dtls.hpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/src/app/srs_app_rtc_conn.cpp||trunk/src/app/srs_app_rtc_conn.cpp": [
          "File: trunk/src/app/srs_app_rtc_conn.cpp -> trunk/src/app/srs_app_rtc_conn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2240:     srs_error_t err = srs_success;",
          "2244:         SrsContextRestore(_srs_context->get_id());",
          "2245:         switch_to_context();",
          "2248:         _srs_rtc_manager->remove(this);",
          "2249:     }",
          "",
          "[Removed Lines]",
          "2243:     if (type == \"warning\" && desc == \"CN\") {",
          "2247:         srs_trace(\"RTC: session destroy by DTLS alert, username=%s\", username_.c_str());",
          "",
          "[Added Lines]",
          "2244:     if (type == \"fatal\" || (type == \"warning\" && desc == \"CN\")) {",
          "2248:         srs_trace(\"RTC: session destroy by DTLS alert(%s %s), username=%s\", type.c_str(), desc.c_str(), username_.c_str());",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_dtls.cpp||trunk/src/app/srs_app_rtc_dtls.cpp": [
          "File: trunk/src/app/srs_app_rtc_dtls.cpp -> trunk/src/app/srs_app_rtc_dtls.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     SrsDtlsImpl* dtls_impl = (SrsDtlsImpl*)SSL_get_ex_data(dtls, 0);",
          "45:     srs_assert(dtls_impl);",
          "48:     unsigned int timeout_us = previous_us * 2;",
          "59:     srs_info(\"DTLS: ARQ timer cb timeout=%ums, previous=%ums\", timeout_us/1000, previous_us/1000);",
          "61:     return timeout_us;",
          "",
          "[Removed Lines]",
          "52:     if (previous_us == 0 || dtls_impl->should_reset_timer()) {",
          "53:         timeout_us =  50 * 1000; // in us",
          "54:     }",
          "57:     timeout_us = srs_min(timeout_us, 30 * 1000 * 1000); // in us",
          "",
          "[Added Lines]",
          "51:     timeout_us = srs_max(timeout_us, 50 * 1000);",
          "52:     timeout_us = srs_min(timeout_us, 30 * 1000 * 1000);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:     callback_ = callback;",
          "402:     handshake_done_for_us = false;",
          "404:     nn_arq_packets = 0;",
          "406:     version_ = SrsDtlsVersionAuto;",
          "407: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:     last_handshake_type = 0;",
          "399:     last_content_type = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:     }",
          "426: }",
          "428: srs_error_t SrsDtlsImpl::initialize(std::string version, std::string role)",
          "429: {",
          "430:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423: long srs_dtls_bio_out_callback(BIO* bio, int cmd, const char* argp, int argi, long argl, long ret)",
          "424: {",
          "425:     long r0 = (BIO_CB_RETURN & cmd) ? ret : 1;",
          "426:     if (cmd == BIO_CB_WRITE && argp && argi > 0) {",
          "427:         SrsDtlsImpl* dtls = (SrsDtlsImpl*)BIO_get_callback_arg(bio);",
          "428:         srs_error_t err = dtls->write_dtls_data((void*)argp, argi);",
          "429:         if (err != srs_success) {",
          "430:             srs_warn(\"ignore err %s\", srs_error_desc(err).c_str());",
          "431:         }",
          "432:         srs_freep(err);",
          "433:     }",
          "434:     return r0;",
          "435: }",
          "437: srs_error_t SrsDtlsImpl::write_dtls_data(void* data, int size)",
          "438: {",
          "439:     srs_error_t err = srs_success;",
          "441:     if (size > 0 && (err = callback_->write_dtls_data(data, size)) != srs_success) {",
          "442:         return srs_error_wrap(err, \"dtls send size=%u, data=[%s]\", size,",
          "443:             srs_string_dumps_hex((char*)data, size, 32).c_str());",
          "444:     }",
          "448:     uint8_t content_type = size >= 1 ? ((uint8_t*)data)[0] : 0;",
          "449:     uint8_t handshake_type = size >= 14 ? ((uint8_t*)data)[13] : 0;",
          "450:     if (content_type && handshake_type && last_content_type == content_type && last_handshake_type == handshake_type) {",
          "451:         nn_arq_packets++;",
          "452:     }",
          "453:     last_content_type = content_type;",
          "454:     last_handshake_type = handshake_type;",
          "457:     state_trace((uint8_t*)data, size, false, 0);",
          "459:     return err;",
          "460: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:     SSL_set_ex_data(dtls, 0, this);",
          "447:     SSL_set_info_callback(dtls, ssl_on_info);",
          "451:     SSL_set_options(dtls, SSL_OP_NO_QUERY_MTU);",
          "452:     SSL_set_mtu(dtls, DTLS_FRAGMENT_MAX_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:     DTLS_set_link_mtu(dtls, DTLS_FRAGMENT_MAX_SIZE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "473:         return srs_error_new(ERROR_OpenSslBIONew, \"BIO_new out\");",
          "474:     }",
          "476:     SSL_set_bio(dtls, bio_in, bio_out);",
          "478:     return err;",
          "479: }",
          "481: srs_error_t SrsDtlsImpl::on_dtls(char* data, int nb_data)",
          "482: {",
          "483:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:     BIO_set_callback(bio_out, srs_dtls_bio_out_callback);",
          "527:     BIO_set_callback_arg(bio_out, (char*)this);",
          "534: srs_error_t SrsDtlsImpl::start_active_handshake()",
          "535: {",
          "536:     srs_error_t err = srs_success;",
          "545:     int r0 = SSL_do_handshake(dtls);",
          "546:     int r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "548:     if (r0 < 0 && (r1 != SSL_ERROR_NONE && r1 != SSL_ERROR_WANT_READ && r1 != SSL_ERROR_WANT_WRITE)) {",
          "549:         return srs_error_new(ERROR_RTC_DTLS, \"handshake r0=%d, r1=%d\", r0, r1);",
          "550:     }",
          "552:     if ((err = start_arq()) != srs_success) {",
          "553:         return srs_error_wrap(err, \"start arq\");",
          "554:     }",
          "556:     return err;",
          "557: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "499:     if (handshake_done_for_us) {",
          "501:     }",
          "503:     int r0 = 0;",
          "515:     if ((r0 = BIO_write(bio_in, data, nb_data)) <= 0) {",
          "517:         return srs_error_new(ERROR_OpenSslBIOWrite, \"BIO_write r0=%d\", r0);",
          "518:     }",
          "557:         }",
          "559:         srs_trace(\"DTLS: read r0=%d, r1=%d, padding=%d, done=%d, data=[%s]\",",
          "560:             r0, r1, BIO_ctrl_pending(bio_in), handshake_done_for_us, srs_string_dumps_hex(buf, r0, 32).c_str());",
          "",
          "[Removed Lines]",
          "500:         srs_info(\"DTLS: After done, got %d bytes\", nb_data);",
          "505:     if ((r0 = BIO_reset(bio_in)) != 1) {",
          "506:         return srs_error_new(ERROR_OpenSslBIOReset, \"BIO_reset r0=%d\", r0);",
          "507:     }",
          "508:     if ((r0 = BIO_reset(bio_out)) != 1) {",
          "509:         return srs_error_new(ERROR_OpenSslBIOReset, \"BIO_reset r0=%d\", r0);",
          "510:     }",
          "513:     state_trace((uint8_t*)data, nb_data, true, r0, SSL_ERROR_NONE, false);",
          "522:     if ((err = do_handshake()) != srs_success) {",
          "523:         return srs_error_wrap(err, \"do handshake\");",
          "524:     }",
          "528:     for (int i = 0; i < 1024 && BIO_ctrl_pending(bio_in) > 0; i++) {",
          "529:         char buf[8092];",
          "530:         int r0 = SSL_read(dtls, buf, sizeof(buf));",
          "531:         int r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "533:         if (r0 <= 0) {",
          "541:             if (r1 != SSL_ERROR_WANT_READ && r1 != SSL_ERROR_WANT_WRITE) {",
          "542:                 break;",
          "543:             }",
          "546:             uint8_t* data = NULL;",
          "547:             int size = BIO_get_mem_data(bio_out, (char**)&data);",
          "550:             state_trace((uint8_t*)data, size, false, r0, r1, false);",
          "552:             if (size > 0 && (err = callback_->write_dtls_data(data, size)) != srs_success) {",
          "553:                 return srs_error_wrap(err, \"dtls send size=%u, data=[%s]\", size,",
          "554:                     srs_string_dumps_hex((char*)data, size, 32).c_str());",
          "555:             }",
          "556:             continue;",
          "",
          "[Added Lines]",
          "578:         srs_trace(\"DTLS: After done, got %d bytes\", nb_data);",
          "587:     state_trace((uint8_t*)data, nb_data, true, r0);",
          "594:     char buf[kRtpPacketSize];",
          "595:     r0 = SSL_read(dtls, buf, sizeof(buf));",
          "596:     int r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "597:     if (r0 <= 0) {",
          "598:         if (r1 != SSL_ERROR_WANT_READ && r1 != SSL_ERROR_WANT_WRITE && r1 != SSL_ERROR_ZERO_RETURN) {",
          "599:             return srs_error_new(ERROR_RTC_DTLS, \"DTLS: read r0=%d, r1=%d, done=%d\", r0, r1, handshake_done_for_us);",
          "601:     } else {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "565:         }",
          "566:     }",
          "592:         handshake_done_for_us = true;",
          "613:         if (((err = on_handshake_done()) != srs_success)) {",
          "614:             return srs_error_wrap(err, \"done\");",
          "615:         }",
          "",
          "[Removed Lines]",
          "568:     return err;",
          "569: }",
          "571: srs_error_t SrsDtlsImpl::do_handshake()",
          "572: {",
          "573:     srs_error_t err = srs_success;",
          "577:     if (handshake_done_for_us) {",
          "578:         return err;",
          "579:     }",
          "582:     int r0 = SSL_do_handshake(dtls);",
          "583:     int r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "586:     if (r0 < 0 && (r1 != SSL_ERROR_NONE && r1 != SSL_ERROR_WANT_READ && r1 != SSL_ERROR_WANT_WRITE)) {",
          "587:         return srs_error_new(ERROR_RTC_DTLS, \"handshake r0=%d, r1=%d\", r0, r1);",
          "588:     }",
          "591:     if (r1 == SSL_ERROR_NONE) {",
          "593:     }",
          "596:     uint8_t* data = NULL;",
          "597:     int size = BIO_get_mem_data(bio_out, (char**)&data);",
          "600:     state_trace((uint8_t*)data, size, false, r0, r1, false);",
          "603:     if ((err = on_final_out_data(data, size)) != srs_success) {",
          "604:         return srs_error_wrap(err, \"handle\");",
          "605:     }",
          "607:     if (size > 0 && (err = callback_->write_dtls_data(data, size)) != srs_success) {",
          "608:         return srs_error_wrap(err, \"dtls send size=%u, data=[%s]\", size,",
          "609:             srs_string_dumps_hex((char*)data, size, 32).c_str());",
          "610:     }",
          "612:     if (handshake_done_for_us) {",
          "",
          "[Added Lines]",
          "612:     if (!handshake_done_for_us && SSL_is_init_finished(dtls) == 1) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "618:     return err;",
          "619: }",
          "622: {",
          "",
          "[Removed Lines]",
          "621: void SrsDtlsImpl::state_trace(uint8_t* data, int length, bool incoming, int r0, int r1, bool arq)",
          "",
          "[Added Lines]",
          "622: void SrsDtlsImpl::state_trace(uint8_t* data, int length, bool incoming, int r0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "637:         handshake_type = (uint8_t)data[13];",
          "638:     }",
          "643: }",
          "645: const int SRTP_MASTER_KEY_KEY_LEN = 16;",
          "",
          "[Removed Lines]",
          "640:     srs_trace(\"DTLS: State %s %s, done=%u, arq=%u/%u, r0=%d, r1=%d, len=%u, cnt=%u, size=%u, hs=%u\",",
          "641:         (is_dtls_client()? \"Active\":\"Passive\"), (incoming? \"RECV\":\"SEND\"), handshake_done_for_us, arq,",
          "642:         nn_arq_packets, r0, r1, length, content_type, size, handshake_type);",
          "",
          "[Added Lines]",
          "641:     srs_trace(\"DTLS: State %s %s, done=%u, arq=%u, r0=%d, len=%u, cnt=%u, size=%u, hs=%u\",",
          "642:         (is_dtls_client()? \"Active\":\"Passive\"), (incoming? \"RECV\":\"SEND\"), handshake_done_for_us,",
          "643:         nn_arq_packets, r0, length, content_type, size, handshake_type);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "693:     arq_max_retry = 12 * 2; // Max ARQ limit shared for ClientHello and Certificate.",
          "695: }",
          "697: SrsDtlsClientImpl::~SrsDtlsClientImpl()",
          "",
          "[Removed Lines]",
          "694:     reset_timer_ = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "711:     SSL_set_connect_state(dtls);",
          "761:     return err;",
          "762: }",
          "",
          "[Removed Lines]",
          "712:     SSL_set_max_send_fragment(dtls, DTLS_FRAGMENT_MAX_SIZE);",
          "714:     return err;",
          "715: }",
          "717: srs_error_t SrsDtlsClientImpl::start_active_handshake()",
          "718: {",
          "719:     srs_error_t err = srs_success;",
          "721:     if ((err = do_handshake()) != srs_success) {",
          "722:         return srs_error_wrap(err, \"start handshake\");",
          "723:     }",
          "725:     if ((err = start_arq()) != srs_success) {",
          "726:         return srs_error_wrap(err, \"start arq\");",
          "727:     }",
          "729:     return err;",
          "730: }",
          "732: bool SrsDtlsClientImpl::should_reset_timer()",
          "733: {",
          "734:     bool v = reset_timer_;",
          "735:     reset_timer_ = false;",
          "736:     return v;",
          "737: }",
          "741: srs_error_t SrsDtlsClientImpl::on_final_out_data(uint8_t* data, int size)",
          "742: {",
          "743:     srs_error_t err = srs_success;",
          "746:     if (state_ == SrsDtlsStateInit && size > 14 && data[0] == 22 && data[13] == 1) {",
          "747:         state_ = SrsDtlsStateClientHello;",
          "748:         return err;",
          "749:     }",
          "752:     if (state_ == SrsDtlsStateClientHello && size > 14 && data[0] == 22 && data[13] == 11) {",
          "753:         state_ = SrsDtlsStateClientCertificate;",
          "756:         reset_timer_ = true;",
          "757:         srs_info(\"DTLS: Reset the timer for ServerHello\");",
          "758:         return err;",
          "759:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "836:             return err;",
          "837:         }",
          "855:         if (timeout > 0) {",
          "862:             srs_usleep(timeout);",
          "863:             continue;",
          "864:         }",
          "881:             return srs_error_new(ERROR_RTC_DTLS, \"ARQ r0=%d, r1=%d\", r0, r1);",
          "882:         }",
          "896:     }",
          "898:     return err;",
          "",
          "[Removed Lines]",
          "840:         if (state_ != SrsDtlsStateClientHello && state_ != SrsDtlsStateClientCertificate) {",
          "841:             return err;",
          "842:         }",
          "846:         int r0 = 0; timeval to = {0};",
          "847:         if ((r0 = DTLSv1_get_timeout(dtls, &to)) == 0) {",
          "849:             srs_usleep(50 * SRS_UTIME_MILLISECONDS);",
          "850:             continue;",
          "851:         }",
          "852:         srs_utime_t timeout = to.tv_sec + to.tv_usec;",
          "860:             timeout = srs_min(100 * SRS_UTIME_MILLISECONDS, timeout);",
          "861:             timeout = srs_max(50 * SRS_UTIME_MILLISECONDS, timeout);",
          "867:         r0 = BIO_reset(bio_out); int r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "868:         if (r0 != 1) {",
          "869:             return srs_error_new(ERROR_OpenSslBIOReset, \"BIO_reset r0=%d, r1=%d\", r0, r1);",
          "870:         }",
          "876:         r0 = DTLSv1_handle_timeout(dtls); r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "877:         if (r0 == 0) {",
          "878:             continue; // No timeout had expired.",
          "879:         }",
          "880:         if (r0 != 1) {",
          "885:         uint8_t* data = NULL;",
          "886:         int size = BIO_get_mem_data(bio_out, (char**)&data);",
          "888:         arq_count++;",
          "889:         nn_arq_packets++;",
          "890:         state_trace((uint8_t*)data, size, false, r0, r1, true);",
          "892:         if (size > 0 && (err = callback_->write_dtls_data(data, size)) != srs_success) {",
          "893:             return srs_error_wrap(err, \"dtls send size=%u, data=[%s]\", size,",
          "894:                 srs_string_dumps_hex((char*)data, size, 32).c_str());",
          "895:         }",
          "",
          "[Added Lines]",
          "794:         timeval to = {0};",
          "795:         int r0 = DTLSv1_get_timeout(dtls, &to);",
          "796:         srs_utime_t timeout = r0 == 1 ? to.tv_sec + to.tv_usec : 0;",
          "804:             timeout = srs_min(timeout, 100 * SRS_UTIME_MILLISECONDS);",
          "805:             srs_info(\"DTLS: ARQ wait timeout=%dms, to=%dms, r0=%d\", srsu2msi(timeout), srsu2msi(to.tv_sec + to.tv_usec), r0);",
          "814:         r0 = DTLSv1_handle_timeout(dtls);",
          "815:         if (r0 != 0 && r0 != 1) {",
          "816:             int r1 = SSL_get_error(dtls, r0); ERR_clear_error();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "920:     return err;",
          "921: }",
          "941: srs_error_t SrsDtlsServerImpl::on_handshake_done()",
          "942: {",
          "943:     srs_error_t err = srs_success;",
          "",
          "[Removed Lines]",
          "923: srs_error_t SrsDtlsServerImpl::start_active_handshake()",
          "924: {",
          "926:     return srs_success;",
          "927: }",
          "929: bool SrsDtlsServerImpl::should_reset_timer()",
          "930: {",
          "932:     return false;",
          "933: }",
          "935: srs_error_t SrsDtlsServerImpl::on_final_out_data(uint8_t* data, int size)",
          "936: {",
          "938:     return srs_success;",
          "939: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "955:     return false;",
          "956: }",
          "958: SrsDtlsEmptyImpl::SrsDtlsEmptyImpl() : SrsDtlsImpl(NULL)",
          "959: {",
          "960:     handshake_done_for_us = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863: srs_error_t SrsDtlsServerImpl::start_arq()",
          "864: {",
          "866:     return srs_success;",
          "867: }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "969:     return srs_success;",
          "970: }",
          "982: srs_error_t SrsDtlsEmptyImpl::on_dtls(char* data, int nb_data)",
          "983: {",
          "984:     return srs_success;",
          "",
          "[Removed Lines]",
          "972: srs_error_t SrsDtlsEmptyImpl::start_active_handshake()",
          "973: {",
          "974:     return srs_success;",
          "975: }",
          "977: bool SrsDtlsEmptyImpl::should_reset_timer()",
          "978: {",
          "979:     return false;",
          "980: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "993: {",
          "994: }",
          "1001: srs_error_t SrsDtlsEmptyImpl::on_handshake_done()",
          "1002: {",
          "1003:     return srs_success;",
          "",
          "[Removed Lines]",
          "996: srs_error_t SrsDtlsEmptyImpl::on_final_out_data(uint8_t* data, int size)",
          "997: {",
          "998:     return srs_success;",
          "999: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1008:     return false;",
          "1009: }",
          "1011: SrsDtls::SrsDtls(ISrsDtlsCallback* callback)",
          "1012: {",
          "1013:     callback_ = callback;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "907: srs_error_t SrsDtlsEmptyImpl::start_arq()",
          "908: {",
          "909:     return srs_success;",
          "910: }",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_rtc_dtls.hpp||trunk/src/app/srs_app_rtc_dtls.hpp": [
          "File: trunk/src/app/srs_app_rtc_dtls.hpp -> trunk/src/app/srs_app_rtc_dtls.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: enum SrsDtlsState {",
          "85:     SrsDtlsStateInit, // Start.",
          "90:     SrsDtlsStateClientDone, // Done.",
          "91: };",
          "",
          "[Removed Lines]",
          "86:     SrsDtlsStateClientHello, // Should start ARQ thread.",
          "87:     SrsDtlsStateServerHello, // We are in the first ARQ state.",
          "88:     SrsDtlsStateClientCertificate, // Should start ARQ thread again.",
          "89:     SrsDtlsStateServerDone, // We are in the second ARQ state.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     bool handshake_done_for_us;",
          "108:     int nn_arq_packets;",
          "109: public:",
          "110:     SrsDtlsImpl(ISrsDtlsCallback* callback);",
          "111:     virtual ~SrsDtlsImpl();",
          "112: public:",
          "113:     virtual srs_error_t initialize(std::string version, std::string role);",
          "116:     virtual srs_error_t on_dtls(char* data, int nb_data);",
          "117: protected:",
          "118:     srs_error_t do_on_dtls(char* data, int nb_data);",
          "121: public:",
          "122:     srs_error_t get_srtp_key(std::string& recv_key, std::string& send_key);",
          "123:     void callback_by_ssl(std::string type, std::string desc);",
          "124: protected:",
          "126:     virtual srs_error_t on_handshake_done() = 0;",
          "127:     virtual bool is_dtls_client() = 0;",
          "128: };",
          "130: class SrsDtlsClientImpl : public SrsDtlsImpl, public ISrsCoroutineHandler",
          "",
          "[Removed Lines]",
          "114:     virtual srs_error_t start_active_handshake() = 0;",
          "115:     virtual bool should_reset_timer() = 0;",
          "119:     srs_error_t do_handshake();",
          "120:     void state_trace(uint8_t* data, int length, bool incoming, int r0, int r1, bool arq);",
          "125:     virtual srs_error_t on_final_out_data(uint8_t* data, int size) = 0;",
          "",
          "[Added Lines]",
          "105:     uint8_t last_handshake_type;",
          "106:     uint8_t last_content_type;",
          "110: public:",
          "112:     srs_error_t write_dtls_data(void* data, int size);",
          "115:     virtual srs_error_t start_active_handshake();",
          "119:     void state_trace(uint8_t* data, int length, bool incoming, int r0);",
          "126:     virtual srs_error_t start_arq() = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:     SrsDtlsState state_;",
          "139:     int arq_max_retry;",
          "143: public:",
          "144:     SrsDtlsClientImpl(ISrsDtlsCallback* callback);",
          "145:     virtual ~SrsDtlsClientImpl();",
          "146: public:",
          "147:     virtual srs_error_t initialize(std::string version, std::string role);",
          "150: protected:",
          "152:     virtual srs_error_t on_handshake_done();",
          "153:     virtual bool is_dtls_client();",
          "155:     srs_error_t start_arq();",
          "156:     void stop_arq();",
          "157: public:",
          "",
          "[Removed Lines]",
          "142:     bool reset_timer_;",
          "148:     virtual srs_error_t start_active_handshake();",
          "149:     virtual bool should_reset_timer();",
          "151:     virtual srs_error_t on_final_out_data(uint8_t* data, int size);",
          "154: private:",
          "",
          "[Added Lines]",
          "147: protected:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:     virtual ~SrsDtlsServerImpl();",
          "166: public:",
          "167:     virtual srs_error_t initialize(std::string version, std::string role);",
          "170: protected:",
          "172:     virtual srs_error_t on_handshake_done();",
          "173:     virtual bool is_dtls_client();",
          "174: };",
          "176: class SrsDtlsEmptyImpl : public SrsDtlsImpl",
          "",
          "[Removed Lines]",
          "168:     virtual srs_error_t start_active_handshake();",
          "169:     virtual bool should_reset_timer();",
          "171:     virtual srs_error_t on_final_out_data(uint8_t* data, int size);",
          "",
          "[Added Lines]",
          "164:     srs_error_t start_arq();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:     virtual ~SrsDtlsEmptyImpl();",
          "181: public:",
          "182:     virtual srs_error_t initialize(std::string version, std::string role);",
          "185:     virtual srs_error_t on_dtls(char* data, int nb_data);",
          "186: public:",
          "187:     srs_error_t get_srtp_key(std::string& recv_key, std::string& send_key);",
          "188:     void callback_by_ssl(std::string type, std::string desc);",
          "189: protected:",
          "191:     virtual srs_error_t on_handshake_done();",
          "192:     virtual bool is_dtls_client();",
          "193: };",
          "195: class SrsDtls",
          "",
          "[Removed Lines]",
          "183:     virtual srs_error_t start_active_handshake();",
          "184:     virtual bool should_reset_timer();",
          "190:     virtual srs_error_t on_final_out_data(uint8_t* data, int size);",
          "",
          "[Added Lines]",
          "181:     virtual srs_error_t start_arq();",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    155",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    156",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    46",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    47",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1e4f61dd3a5d97dac483e4a1a0e4dc568554b4c",
      "candidate_info": {
        "commit_hash": "a1e4f61dd3a5d97dac483e4a1a0e4dc568554b4c",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/a1e4f61dd3a5d97dac483e4a1a0e4dc568554b4c",
        "files": [
          "Dockerfile",
          "trunk/conf/full.conf",
          "trunk/conf/hls.origin.conf",
          "trunk/conf/hls.realtime.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_hls.cpp",
          "trunk/src/app/srs_app_hls.hpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest_config.cpp"
        ],
        "message": "Solve the problem of inaccurate HLS TS duration. v5.0.187 v6.0.87 (#3824)\n\n1. The comment on the ratio configuration says it can affect the slice\nduration, but there is no effect after configuring it.\n2. The default hls_td_ratio is 1.5, and after setting it to 1, the\nduration is still slightly more than 10 seconds.\n3. Even if the GOP is an integer, like 1 second, the slice is still a\nnon-integer, like 0.998 seconds, which seems a bit unreliable.\n4. In the duration of the TS in the m3u8 file, it is one frame less than\nthe duration of the slice.\n5. Set hls_dispose to 120s to dispose HLS files when no stream.\n6. Use docker.conf for docker.\n\nBefore this patch:\n\n```\n#EXTINF:10.983, no desc\nlivestream-0.ts?hls_ctx=3p095hq0\n```\n\nAfter this patch:\n\n```\n#EXTINF:10.000, no desc\nlivestream-0.ts?hls_ctx=3p095hq0\n```\n\nNote: If the fragment is set to 10 seconds, but the GOP size cannot be\ndivided by 10, such as not 1, 2, 5, or 10, then the duration of ts will\nstill be more than 10 seconds.\n\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/conf/hls.origin.conf||trunk/conf/hls.origin.conf",
          "trunk/conf/hls.realtime.conf||trunk/conf/hls.realtime.conf",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/app/srs_app_hls.cpp||trunk/src/app/srs_app_hls.cpp",
          "trunk/src/app/srs_app_hls.hpp||trunk/src/app/srs_app_hls.hpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp",
          "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1751:         # default: off",
          "1752:         enabled on;",
          "1775:         # the hls fragment in seconds, the duration of a piece of ts.",
          "1776:         # Overwrite by env SRS_VHOST_HLS_HLS_FRAGMENT for all vhosts.",
          "1777:         # default: 10",
          "",
          "[Removed Lines]",
          "1754:         # Whether enable hls_ctx for HLS streaming, for which we create a \"fake\" connection for HTTP API and callback.",
          "1755:         # For each HLS streaming session, we use a child m3u8 with a session identified by query \"hls_ctx\", it simply",
          "1756:         # work as the session id.",
          "1757:         # Once the HLS streaming session is created, we will cleanup it when timeout in 2*hls_window seconds. So it",
          "1758:         # takes a long time period to identify the timeout.",
          "1759:         # Now we got a HLS stremaing session, just like RTMP/WebRTC/HTTP-FLV streaming, we're able to stat the session",
          "1760:         # as a \"fake\" connection, do HTTP callback when start playing the HLS streaming. You're able to do querying and",
          "1761:         # authentication.",
          "1762:         # Note that it will make NGINX edge cache always missed, so never enable HLS streaming if use NGINX edges.",
          "1763:         # Overwrite by env SRS_VHOST_HLS_HLS_CTX for all vhosts.",
          "1764:         # Default: on",
          "1765:         hls_ctx on;",
          "1766:         # For HLS pseudo streaming, whether enable the session for each TS segment.",
          "1767:         # If enabled, SRS HTTP API will show the statistics about HLS streaming bandwidth, both m3u8 and ts file. Please",
          "1768:         # note that it also consumes resource, because each ts file should be served by SRS, all NGINX cache will be",
          "1769:         # missed because we add session id to each ts file.",
          "1770:         # Note that it will make NGINX edge cache always missed, so never enable HLS streaming if use NGINX edges.",
          "1771:         # Overwrite by env SRS_VHOST_HLS_HLS_TS_CTX for all vhosts.",
          "1772:         # Default: on",
          "1773:         hls_ts_ctx on;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1780:         #   EXT-X-TARGETDURATION = hls_td_ratio * hls_fragment // init",
          "1781:         #   EXT-X-TARGETDURATION = max(ts_duration, EXT-X-TARGETDURATION) // for each ts",
          "1782:         # Overwrite by env SRS_VHOST_HLS_HLS_TD_RATIO for all vhosts.",
          "1785:         # the audio overflow ratio.",
          "1786:         # for pure audio, the duration to reap the segment.",
          "1789:         # Overwrite by env SRS_VHOST_HLS_HLS_AOF_RATIO for all vhosts.",
          "1792:         # the hls window in seconds, the number of ts in m3u8.",
          "1793:         # Overwrite by env SRS_VHOST_HLS_HLS_WINDOW for all vhosts.",
          "1794:         # default: 60",
          "",
          "[Removed Lines]",
          "1783:         # default: 1.5",
          "1784:         hls_td_ratio 1.5;",
          "1787:         # for example, the hls_fragment is 10s, hls_aof_ratio is 2.0,",
          "1788:         # the segment will reap to 20s for pure audio.",
          "1790:         # default: 2.0",
          "1791:         hls_aof_ratio 2.0;",
          "",
          "[Added Lines]",
          "1762:         # default: 1.0",
          "1763:         hls_td_ratio 1.0;",
          "1766:         # for example, the hls_fragment is 10s, hls_aof_ratio is 1.2,",
          "1767:         # the segment will reap to 12s for pure audio.",
          "1769:         # default: 1.2",
          "1770:         hls_aof_ratio 1.2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1837:         # Overwrite by env SRS_VHOST_HLS_HLS_TS_FILE for all vhosts.",
          "1838:         # default: [app]/[stream]-[seq].ts",
          "1839:         hls_ts_file [app]/[stream]-[seq].ts;",
          "1847:         # the hls entry prefix, which is base url of ts url.",
          "1848:         # for example, the prefix is:",
          "1849:         #         http://your-server/",
          "",
          "[Removed Lines]",
          "1840:         # whether use floor for the hls_ts_file path generation.",
          "1841:         # if on, use floor(timestamp/hls_fragment) as the variable [timestamp],",
          "1842:         #       and use enhanced algorithm to calc deviation for segment.",
          "1843:         # @remark when floor on, recommend the hls_segment>=2*gop.",
          "1844:         # Overwrite by env SRS_VHOST_HLS_HLS_TS_FLOOR for all vhosts.",
          "1845:         # default: off",
          "1846:         hls_ts_floor off;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1879:         # @remark 0 to disable dispose for publisher.",
          "1880:         # @remark apply for publisher timeout only, while \"etc/init.d/srs stop\" always dispose hls.",
          "1881:         # Overwrite by env SRS_VHOST_HLS_HLS_DISPOSE for all vhosts.",
          "1890:         # whether wait keyframe to reap segment,",
          "1891:         # if off, reap segment when duration exceed the fragment,",
          "1892:         # if on, reap segment when duration exceed and got keyframe.",
          "1893:         # Overwrite by env SRS_VHOST_HLS_HLS_WAIT_KEYFRAME for all vhosts.",
          "1894:         # default: on",
          "1895:         hls_wait_keyframe on;",
          "1897:         # whether using AES encryption.",
          "1898:         # Overwrite by env SRS_VHOST_HLS_HLS_KEYS for all vhosts.",
          "",
          "[Removed Lines]",
          "1882:         # default: 0",
          "1883:         hls_dispose 0;",
          "1884:         # the max size to notify hls,",
          "1885:         # to read max bytes from ts of specified cdn network,",
          "1886:         # @remark only used when on_hls_notify is config.",
          "1887:         # Overwrite by env SRS_VHOST_HLS_HLS_NB_NOTIFY for all vhosts.",
          "1888:         # default: 64",
          "1889:         hls_nb_notify 64;",
          "",
          "[Added Lines]",
          "1854:         # default: 120",
          "1855:         hls_dispose 120;",
          "1862:         # whether use floor for the hls_ts_file path generation.",
          "1863:         # if on, use floor(timestamp/hls_fragment) as the variable [timestamp],",
          "1864:         #       and use enhanced algorithm to calc deviation for segment.",
          "1865:         # @remark when floor on, recommend the hls_segment>=2*gop.",
          "1866:         # Overwrite by env SRS_VHOST_HLS_HLS_TS_FLOOR for all vhosts.",
          "1867:         # default: off",
          "1868:         hls_ts_floor off;",
          "1869:         # the max size to notify hls,",
          "1870:         # to read max bytes from ts of specified cdn network,",
          "1871:         # @remark only used when on_hls_notify is config.",
          "1872:         # Overwrite by env SRS_VHOST_HLS_HLS_NB_NOTIFY for all vhosts.",
          "1873:         # default: 64",
          "1874:         hls_nb_notify 64;",
          "1876:         # Whether enable hls_ctx for HLS streaming, for which we create a \"fake\" connection for HTTP API and callback.",
          "1877:         # For each HLS streaming session, we use a child m3u8 with a session identified by query \"hls_ctx\", it simply",
          "1878:         # work as the session id.",
          "1879:         # Once the HLS streaming session is created, we will cleanup it when timeout in 2*hls_window seconds. So it",
          "1880:         # takes a long time period to identify the timeout.",
          "1881:         # Now we got a HLS stremaing session, just like RTMP/WebRTC/HTTP-FLV streaming, we're able to stat the session",
          "1882:         # as a \"fake\" connection, do HTTP callback when start playing the HLS streaming. You're able to do querying and",
          "1883:         # authentication.",
          "1884:         # Note that it will make NGINX edge cache always missed, so never enable HLS streaming if use NGINX edges.",
          "1885:         # Overwrite by env SRS_VHOST_HLS_HLS_CTX for all vhosts.",
          "1886:         # Default: on",
          "1887:         hls_ctx on;",
          "1888:         # For HLS pseudo streaming, whether enable the session for each TS segment.",
          "1889:         # If enabled, SRS HTTP API will show the statistics about HLS streaming bandwidth, both m3u8 and ts file. Please",
          "1890:         # note that it also consumes resource, because each ts file should be served by SRS, all NGINX cache will be",
          "1891:         # missed because we add session id to each ts file.",
          "1892:         # Note that it will make NGINX edge cache always missed, so never enable HLS streaming if use NGINX edges.",
          "1893:         # Overwrite by env SRS_VHOST_HLS_HLS_TS_CTX for all vhosts.",
          "1894:         # Default: on",
          "1895:         hls_ts_ctx on;",
          "",
          "---------------"
        ],
        "trunk/conf/hls.origin.conf||trunk/conf/hls.origin.conf": [
          "File: trunk/conf/hls.origin.conf -> trunk/conf/hls.origin.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:         enabled         on;",
          "13:         # Note that it will make NGINX edge cache always missed, so never enable HLS streaming if use NGINX edges.",
          "14:         hls_ctx off;",
          "15:     }",
          "16: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:         hls_ts_ctx off;",
          "",
          "---------------"
        ],
        "trunk/conf/hls.realtime.conf||trunk/conf/hls.realtime.conf": [
          "File: trunk/conf/hls.realtime.conf -> trunk/conf/hls.realtime.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: vhost __defaultVhost__ {",
          "15:     hls {",
          "16:         enabled         on;",
          "20:     }",
          "21: }",
          "",
          "[Removed Lines]",
          "17:         hls_fragment    0.2;",
          "18:         hls_window      2;",
          "19:         hls_wait_keyframe       off;",
          "",
          "[Added Lines]",
          "17:         hls_fragment    2;",
          "18:         hls_window      10;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6973: {",
          "6974:     SRS_OVERWRITE_BY_ENV_FLOAT(\"srs.vhost.hls.hls_td_ratio\"); // SRS_VHOST_HLS_HLS_TD_RATIO",
          "6978:     SrsConfDirective* conf = get_hls(vhost);",
          "6979:     if (!conf) {",
          "",
          "[Removed Lines]",
          "6976:     static double DEFAULT = 1.5;",
          "",
          "[Added Lines]",
          "6976:     static double DEFAULT = 1.0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6992: {",
          "6993:     SRS_OVERWRITE_BY_ENV_FLOAT(\"srs.vhost.hls.hls_aof_ratio\"); // SRS_VHOST_HLS_HLS_AOF_RATIO",
          "6997:     SrsConfDirective* conf = get_hls(vhost);",
          "6998:     if (!conf) {",
          "",
          "[Removed Lines]",
          "6995:     static double DEFAULT = 2.0;",
          "",
          "[Added Lines]",
          "6995:     static double DEFAULT = 1.2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7183: {",
          "7184:     SRS_OVERWRITE_BY_ENV_SECONDS(\"srs.vhost.hls.hls_dispose\"); // SRS_VHOST_HLS_HLS_DISPOSE",
          "7188:     SrsConfDirective* conf = get_hls(vhost);",
          "7189:     if (!conf) {",
          "",
          "[Removed Lines]",
          "7186:     static srs_utime_t DEFAULT = 0;",
          "",
          "[Added Lines]",
          "7186:     static srs_utime_t DEFAULT = 120 * SRS_UTIME_SECONDS;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_hls.cpp||trunk/src/app/srs_app_hls.cpp": [
          "File: trunk/src/app/srs_app_hls.cpp -> trunk/src/app/srs_app_hls.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:         return false;",
          "543:     }",
          "546:     srs_utime_t deviation = hls_ts_floor? SRS_HLS_FLOOR_REAP_PERCENT * deviation_ts * hls_fragment : 0;",
          "548: }",
          "550: bool SrsHlsMuxer::wait_keyframe()",
          "",
          "[Removed Lines]",
          "547:     return current->duration() >= hls_fragment + deviation;",
          "",
          "[Added Lines]",
          "550:     return current->duration() >= max_td + deviation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "586:     }",
          "591:     if ((err = current->tscw->write_audio(cache->audio)) != srs_success) {",
          "592:         return srs_error_wrap(err, \"hls: write audio\");",
          "593:     }",
          "",
          "[Removed Lines]",
          "589:     current->append(cache->audio->pts / 90);",
          "",
          "[Added Lines]",
          "592:     update_duration(cache->audio->dts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:     srs_assert(current);",
          "620:     if ((err = current->tscw->write_video(cache->video)) != srs_success) {",
          "621:         return srs_error_wrap(err, \"hls: write video\");",
          "",
          "[Removed Lines]",
          "618:     current->append(cache->video->dts / 90);",
          "",
          "[Added Lines]",
          "621:     update_duration(cache->video->dts);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "627:     return err;",
          "628: }",
          "630: srs_error_t SrsHlsMuxer::segment_close()",
          "631: {",
          "632:     srs_error_t err = do_segment_close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633: void SrsHlsMuxer::update_duration(uint64_t dts)",
          "634: {",
          "635:     current->append(dts / 90);",
          "636: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "661:     bool matchMinDuration = current->duration() >= SRS_HLS_SEGMENT_MIN_DURATION;",
          "663:     if (matchMinDuration && matchMaxDuration) {",
          "665:         if ((err = current->rename()) != srs_success) {",
          "",
          "[Removed Lines]",
          "662:     bool matchMaxDuration = current->duration() <= max_td * 2 * 1000;",
          "",
          "[Added Lines]",
          "670:     bool matchMaxDuration = current->duration() <= max_td * 3 * 1000;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "920:     std::string vhost = req->vhost;",
          "921:     std::string stream = req->stream;",
          "922:     std::string app = req->app;",
          "924:     srs_utime_t hls_fragment = _srs_config->get_hls_fragment(vhost);",
          "925:     srs_utime_t hls_window = _srs_config->get_hls_window(vhost);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:     double hls_td_ratio = _srs_config->get_hls_td_ratio(vhost);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "966:     bool hls_dts_directly = _srs_config->get_vhost_hls_dts_directly(req->vhost);",
          "969:         srsu2msi(hls_window), srsu2msi(hls_fragment), entry_prefix.c_str(), path.c_str(), m3u8_file.c_str(), ts_file.c_str(),",
          "972:     return err;",
          "973: }",
          "",
          "[Removed Lines]",
          "968:     srs_trace(\"hls: win=%dms, frag=%dms, prefix=%s, path=%s, m3u8=%s, ts=%s, aof=%.2f, floor=%d, clean=%d, waitk=%d, dispose=%dms, dts_directly=%d\",",
          "970:         hls_aof_ratio, ts_floor, cleanup, wait_keyframe, srsu2msi(hls_dispose), hls_dts_directly);",
          "",
          "[Added Lines]",
          "977:     srs_trace(\"hls: win=%dms, frag=%dms, prefix=%s, path=%s, m3u8=%s, ts=%s, tdr=%.2f, aof=%.2f, floor=%d, clean=%d, waitk=%d, dispose=%dms, dts_directly=%d\",",
          "979:         hls_td_ratio, hls_aof_ratio, ts_floor, cleanup, wait_keyframe, srsu2msi(hls_dispose), hls_dts_directly);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1017:     if ((err = tsmc->cache_audio(frame, pts)) != srs_success) {",
          "1018:         return srs_error_wrap(err, \"hls: cache audio\");",
          "1019:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1032:     muxer->update_duration(tsmc->audio->dts);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1064:     if ((err = tsmc->cache_video(frame, dts)) != srs_success) {",
          "1065:         return srs_error_wrap(err, \"hls: cache video\");",
          "1066:     }",
          "1069:     if (muxer->is_segment_overflow()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1083:     muxer->update_duration(tsmc->video->dts);",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_hls.hpp||trunk/src/app/srs_app_hls.hpp": [
          "File: trunk/src/app/srs_app_hls.hpp -> trunk/src/app/srs_app_hls.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     virtual bool pure_audio();",
          "205:     virtual srs_error_t flush_audio(SrsTsMessageCache* cache);",
          "206:     virtual srs_error_t flush_video(SrsTsMessageCache* cache);",
          "208:     virtual srs_error_t segment_close();",
          "209: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:     void update_duration(uint64_t dts);",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    184",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    187",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    86",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    87",
          "",
          "---------------"
        ],
        "trunk/src/utest/srs_utest_config.cpp||trunk/src/utest/srs_utest_config.cpp": [
          "File: trunk/src/utest/srs_utest_config.cpp -> trunk/src/utest/srs_utest_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2086:     if (true) {",
          "2087:         HELPER_ASSERT_SUCCESS(conf.parse(_MIN_OK_CONF));",
          "2089:         EXPECT_EQ(10 * SRS_UTIME_SECONDS, conf.get_hls_fragment(\"\"));",
          "2090:         EXPECT_EQ(60 * SRS_UTIME_SECONDS, conf.get_hls_window(\"\"));",
          "",
          "[Removed Lines]",
          "2088:         EXPECT_EQ(0, (int)conf.get_hls_dispose(\"\"));",
          "",
          "[Added Lines]",
          "2088:         EXPECT_EQ(120 * SRS_UTIME_SECONDS, (int)conf.get_hls_dispose(\"\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9183e05ef00c90621e4303f4145954805278a3c4",
      "candidate_info": {
        "commit_hash": "9183e05ef00c90621e4303f4145954805278a3c4",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/9183e05ef00c90621e4303f4145954805278a3c4",
        "files": [
          "trunk/auto/depends.sh",
          "trunk/auto/options.sh",
          "trunk/configure",
          "trunk/doc/CHANGELOG.md",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Added system library option for ffmpeg, srtp, srt libraries. v5.0.193 v6.0.93 (#3846)\n\n---------\n\nCo-authored-by: john <hondaxiao@tencent.com>",
        "before_after_code_files": [
          "trunk/auto/depends.sh||trunk/auto/depends.sh",
          "trunk/auto/options.sh||trunk/auto/options.sh",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/auto/depends.sh||trunk/auto/depends.sh": [
          "File: trunk/auto/depends.sh -> trunk/auto/depends.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "444: #####################################################################################",
          "445: # srtp",
          "446: #####################################################################################",
          "448:     SRTP_OPTIONS=\"\"",
          "449:     # To eliminate warnings, see https://stackoverflow.com/a/34208904/17679565",
          "450:     #       was built for newer macOS version (11.6) than being linked (11.0)",
          "",
          "[Removed Lines]",
          "447: if [[ $SRS_RTC == YES ]]; then",
          "",
          "[Added Lines]",
          "447: if [[ $SRS_RTC == YES && $SRS_USE_SYS_SRTP == YES ]]; then",
          "448:     echo \"Warning: Use system libsrtp, without compiling srtp.\"",
          "449: fi",
          "450: if [[ $SRS_RTC == YES && $SRS_USE_SYS_SRTP == NO ]]; then",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513: # For cross build, we use opus of FFmpeg, so we don't build the libopus.",
          "514: if [[ $SRS_RTC == YES && $SRS_FFMPEG_OPUS != YES ]]; then",
          "515:     # Only build static libraries if no shared FFmpeg.",
          "517:         OPUS_OPTIONS=\"--disable-shared --disable-doc\"",
          "518:     fi",
          "519:     if [[ $OS_IS_LOONGARCH64 == YES ]]; then",
          "",
          "[Removed Lines]",
          "516:     if [[ $SRS_SHARED_FFMPEG == NO ]]; then",
          "",
          "[Added Lines]",
          "519:     if [[ $SRS_SHARED_FFMPEG != YES ]]; then",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "542: #####################################################################################",
          "543: # ffmpeg-fit, for WebRTC to transcode AAC with Opus.",
          "544: #####################################################################################",
          "546:     FFMPEG_CONFIGURE=\"env SRS_FFMPEG_FIT=on\"",
          "547:     if [[ $SRS_FFMPEG_OPUS != YES ]]; then",
          "548:         FFMPEG_CONFIGURE=\"$FFMPEG_CONFIGURE PKG_CONFIG_PATH=${SRS_DEPENDS_LIBS}/opus/lib/pkgconfig\"",
          "",
          "[Removed Lines]",
          "545: if [[ $SRS_FFMPEG_FIT == YES ]]; then",
          "",
          "[Added Lines]",
          "548: if [[ $SRS_FFMPEG_FIT == YES && $SRS_USE_SYS_FFMPEG == YES ]]; then",
          "549:     echo \"Warning: Use system ffmpeg, without compiling ffmpeg.\"",
          "550: fi",
          "551: if [[ $SRS_FFMPEG_FIT == YES && $SRS_USE_SYS_FFMPEG == NO ]]; then",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "659: #####################################################################################",
          "660: # SRT module, https://github.com/ossrs/srs/issues/1147#issuecomment-577469119",
          "661: #####################################################################################",
          "663:     # Always disable c++11 for libsrt, because only the srt-app requres it.",
          "664:     LIBSRT_OPTIONS=\"--enable-apps=0  --enable-static=1 --enable-c++11=0\"",
          "665:     if [[ $SRS_SHARED_SRT == YES ]]; then",
          "",
          "[Removed Lines]",
          "662: if [[ $SRS_SRT == YES ]]; then",
          "",
          "[Added Lines]",
          "668: if [[ $SRS_SRT == YES && $SRS_USE_SYS_SRT == YES ]]; then",
          "669:     echo \"Warning: Use system libsrt, without compiling srt.\"",
          "670: fi",
          "671: if [[ $SRS_SRT == YES && $SRS_USE_SYS_SRT == NO ]]; then",
          "",
          "---------------"
        ],
        "trunk/auto/options.sh||trunk/auto/options.sh": [
          "File: trunk/auto/options.sh -> trunk/auto/options.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: SRS_SHARED_ST=NO",
          "51: # If enabled, link shared libraries for libsrt.so which uses MPL license.",
          "52: # See https://ossrs.net/lts/zh-cn/license#srt",
          "54: # If enabled, link shared libraries for FFmpeg which is LGPL license.",
          "55: # See https://ossrs.net/lts/zh-cn/license#ffmpeg",
          "57: # whether enable the gcov",
          "58: SRS_GCOV=NO",
          "59: # Whether enable cloud logging and APM(Application Performance Monitor).",
          "",
          "[Removed Lines]",
          "53: SRS_SHARED_SRT=NO",
          "56: SRS_SHARED_FFMPEG=NO",
          "",
          "[Added Lines]",
          "53: SRS_SHARED_SRT=RESERVED",
          "56: SRS_SHARED_FFMPEG=RESERVED",
          "57: # If enabled, link shared libraries for SRTP which is BSD license.",
          "58: # See https://ossrs.net/lts/zh-cn/license#srtp",
          "59: SRS_SHARED_SRTP=RESERVED",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: ################################################################",
          "70: # Experts options.",
          "71: SRS_USE_SYS_SSL=NO # Use system ssl(-lssl) if required.",
          "72: SRS_VALGRIND=NO",
          "73: SRS_SANITIZER=RESERVED",
          "74: SRS_SANITIZER_STATIC=NO",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: SRS_USE_SYS_FFMPEG=NO # Use system ffmpeg if required.",
          "76: SRS_USE_SYS_SRT=NO # Use system srt(-lsrt) if required.",
          "77: SRS_USE_SYS_SRTP=NO # Use system srtp(-lsrtp) if required.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:   --ssl-local=on|off        Whether use local openssl, not system even exists. Default: $(value2switch $SRS_SSL_LOCAL)",
          "216:   --shared-st=on|off        Use shared libraries for ST which is MPL license. Default: $(value2switch $SRS_SHARED_ST)",
          "217:   --shared-srt=on|off       Use shared libraries for SRT which is MPL license. Default: $(value2switch $SRS_SHARED_SRT)",
          "218:   --shared-ffmpeg=on|off    Use shared libraries for FFmpeg which is LGPL license. Default: $(value2switch $SRS_SHARED_FFMPEG)",
          "219:   --clean=on|off            Whether do 'make clean' when configure. Default: $(value2switch $SRS_CLEAN)",
          "220:   --simulator=on|off        RTC: Whether enable network simulator. Default: $(value2switch $SRS_SIMULATOR)",
          "221:   --generate-objs=on|off    RTC: Whether generate objs and quit. Default: $(value2switch $SRS_GENERATE_OBJS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:   --sys-srt=on|off          Do not compile srt, use system srt(-lsrt) if required. Default: $(value2switch $SRS_USE_SYS_SRT)",
          "226:   --sys-ffmpeg=on|off       Do not compile ffmpeg, use system ffmpeg if required. Default: $(value2switch $SRS_USE_SYS_FFMPEG)",
          "227:   --sys-srtp=on|off         Do not compile srtp, use system srtp(-lsrtp) if required. Default: $(value2switch $SRS_USE_SYS_SRTP)",
          "228:   --shared-srtp=on|off      Use shared libraries for SRTP which is BSD license. Default: $(value2switch $SRS_SHARED_SRTP)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "398:         --use-shared-srt)               SRS_SHARED_SRT=YES          ;;",
          "399:         --shared-st)                    SRS_SHARED_ST=$(switch2value $value) ;;",
          "400:         --shared-srt)                   SRS_SHARED_SRT=$(switch2value $value) ;;",
          "401:         --shared-ffmpeg)                SRS_SHARED_FFMPEG=$(switch2value $value) ;;",
          "403:         --with-valgrind)                SRS_VALGRIND=YES            ;;",
          "404:         --without-valgrind)             SRS_VALGRIND=NO             ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:         --use-sys-srt)                  SRS_USE_SYS_SRT=YES         ;;",
          "412:         --sys-srt)                      SRS_USE_SYS_SRT=$(switch2value $value) ;;",
          "414:         --use-sys-ffmpeg)               SRS_USE_SYS_FFMPEG=YES         ;;",
          "415:         --sys-ffmpeg)                   SRS_USE_SYS_FFMPEG=$(switch2value $value) ;;",
          "416:         --shared-srtp)                  SRS_SHARED_SRTP=$(switch2value $value) ;;",
          "417:         --use-sys-srtp)                 SRS_USE_SYS_SRTP=YES        ;;",
          "418:         --sys-srtp)                     SRS_USE_SYS_SRTP=$(switch2value $value) ;;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521:     if [[ $SRS_RTC == YES && $SRS_FFMPEG_FIT == RESERVED ]]; then",
          "522:         SRS_FFMPEG_FIT=YES",
          "523:     fi",
          "524:     if [[ $SRS_CROSS_BUILD == YES && $SRS_FFMPEG_OPUS != YES ]]; then",
          "525:         echo \"Enable FFmpeg native opus for cross building\"",
          "526:         SRS_FFMPEG_OPUS=YES",
          "527:     fi",
          "529:     # Enable asan, but disable for Centos",
          "530:     # @see https://github.com/ossrs/srs/issues/3347",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541:     if [[ $SRS_USE_SYS_FFMPEG == YES && $SRS_SHARED_FFMPEG == RESERVED ]]; then",
          "542:         SRS_SHARED_FFMPEG=YES",
          "543:     fi",
          "548:     if [[ $SRS_USE_SYS_SRT == YES && $SRS_SHARED_SRT == RESERVED ]]; then",
          "549:         SRS_SHARED_SRT=YES",
          "550:     fi",
          "551:     if [[ $SRS_USE_SYS_SRTP == YES && $SRS_SHARED_SRTP == RESERVED ]]; then",
          "552:         SRS_SHARED_SRTP=YES",
          "553:     fi",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "628:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --http-api=$(value2switch $SRS_HTTP_API)\"",
          "629:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --utest=$(value2switch $SRS_UTEST)\"",
          "630:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --srt=$(value2switch $SRS_SRT)\"",
          "631:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --rtc=$(value2switch $SRS_RTC)\"",
          "632:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --h265=$(value2switch $SRS_H265)\"",
          "633:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --gb28181=$(value2switch $SRS_GB28181)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "657:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --sys-srt=$(value2switch $SRS_USE_SYS_SRT)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "636:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --cxx14=$(value2switch $SRS_CXX14)\"",
          "637:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --backtrace=$(value2switch $SRS_BACKTRACE)\"",
          "638:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --ffmpeg-fit=$(value2switch $SRS_FFMPEG_FIT)\"",
          "639:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --ffmpeg-opus=$(value2switch $SRS_FFMPEG_OPUS)\"",
          "640:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --nasm=$(value2switch $SRS_NASM)\"",
          "641:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --srtp-nasm=$(value2switch $SRS_SRTP_ASM)\"",
          "642:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --clean=$(value2switch $SRS_CLEAN)\"",
          "643:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --gperf=$(value2switch $SRS_GPERF)\"",
          "644:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --gmc=$(value2switch $SRS_GPERF_MC)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --sys-ffmpeg=$(value2switch $SRS_USE_SYS_FFMPEG)\"",
          "670:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --sys-srtp=$(value2switch $SRS_USE_SYS_SRTP)\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "650:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --shared-st=$(value2switch $SRS_SHARED_ST)\"",
          "651:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --shared-srt=$(value2switch $SRS_SHARED_SRT)\"",
          "652:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --shared-ffmpeg=$(value2switch $SRS_SHARED_FFMPEG)\"",
          "653:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --log-verbose=$(value2switch $SRS_LOG_VERBOSE)\"",
          "654:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --log-info=$(value2switch $SRS_LOG_INFO)\"",
          "655:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --log-trace=$(value2switch $SRS_LOG_TRACE)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:     SRS_AUTO_CONFIGURE=\"${SRS_AUTO_CONFIGURE} --shared-srtp=$(value2switch $SRS_SHARED_SRTP)\"",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    192",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    193",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    92",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    93",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8865ddd4bb261d86e0b5e9b282539ca90931c151",
      "candidate_info": {
        "commit_hash": "8865ddd4bb261d86e0b5e9b282539ca90931c151",
        "repo": "ossrs/srs",
        "commit_url": "https://github.com/ossrs/srs/commit/8865ddd4bb261d86e0b5e9b282539ca90931c151",
        "files": [
          "trunk/conf/full.conf",
          "trunk/doc/CHANGELOG.md",
          "trunk/ide/srs_clion/CMakeLists.txt",
          "trunk/src/app/srs_app_config.cpp",
          "trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp"
        ],
        "message": "Change the hls_aof_ratio to 2.1. v5.0.200 v6.0.101 (#3886)\n\nIn pure audio mode, there are no keyframes. Therefore, we can only rely\non the length of the slice to determine whether it should be output.\n`hls_aof_ratio` is the coefficient that, once reached, will generate a\nnew slice.\n\nIn scenarios with video, if the `hls_aof_ratio` is too small, for\nexample 1.2, and the GOP (Group of Pictures) is 10 seconds, then a slice\nwill definitely be generated at 12 seconds. At this point, if there are\nno keyframes, it will cause the next slice to start with a non-keyframe.\n\nA safer coefficient is twice the GOP (Group of Pictures). This way, it\nwon't trigger incorrectly and prevent the individual transcoding of a ts\nsegment file.\n\n---------\n\nCo-authored-by: Haibo Chen <495810242@qq.com>",
        "before_after_code_files": [
          "trunk/conf/full.conf||trunk/conf/full.conf",
          "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp",
          "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
          "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ],
          "candidate": [
            "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp",
            "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp"
          ]
        }
      },
      "candidate_diff": {
        "trunk/conf/full.conf||trunk/conf/full.conf": [
          "File: trunk/conf/full.conf -> trunk/conf/full.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1772:         # for example, the hls_fragment is 10s, hls_aof_ratio is 1.2,",
          "1773:         # the segment will reap to 12s for pure audio.",
          "1774:         # Overwrite by env SRS_VHOST_HLS_HLS_AOF_RATIO for all vhosts.",
          "1777:         # the hls window in seconds, the number of ts in m3u8.",
          "1778:         # Overwrite by env SRS_VHOST_HLS_HLS_WINDOW for all vhosts.",
          "1779:         # default: 60",
          "",
          "[Removed Lines]",
          "1775:         # default: 1.2",
          "1776:         hls_aof_ratio 1.2;",
          "",
          "[Added Lines]",
          "1775:         # default: 2.1",
          "1776:         hls_aof_ratio 2.1;",
          "",
          "---------------"
        ],
        "trunk/src/app/srs_app_config.cpp||trunk/src/app/srs_app_config.cpp": [
          "File: trunk/src/app/srs_app_config.cpp -> trunk/src/app/srs_app_config.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "7035: {",
          "7036:     SRS_OVERWRITE_BY_ENV_FLOAT(\"srs.vhost.hls.hls_aof_ratio\"); // SRS_VHOST_HLS_HLS_AOF_RATIO",
          "7040:     SrsConfDirective* conf = get_hls(vhost);",
          "7041:     if (!conf) {",
          "",
          "[Removed Lines]",
          "7038:     static double DEFAULT = 1.2;",
          "",
          "[Added Lines]",
          "7038:     static double DEFAULT = 2.1;",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version5.hpp||trunk/src/core/srs_core_version5.hpp": [
          "File: trunk/src/core/srs_core_version5.hpp -> trunk/src/core/srs_core_version5.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       5",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    199",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    200",
          "",
          "---------------"
        ],
        "trunk/src/core/srs_core_version6.hpp||trunk/src/core/srs_core_version6.hpp": [
          "File: trunk/src/core/srs_core_version6.hpp -> trunk/src/core/srs_core_version6.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION_MAJOR       6",
          "11: #define VERSION_MINOR       0",
          "14: #endif",
          "",
          "[Removed Lines]",
          "12: #define VERSION_REVISION    100",
          "",
          "[Added Lines]",
          "12: #define VERSION_REVISION    101",
          "",
          "---------------"
        ]
      }
    }
  ]
}