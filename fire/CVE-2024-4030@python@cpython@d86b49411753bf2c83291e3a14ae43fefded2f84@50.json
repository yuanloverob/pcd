{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "ca37034baa2909722df58c02dfd13e1d667252ce",
      "candidate_info": {
        "commit_hash": "ca37034baa2909722df58c02dfd13e1d667252ce",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ca37034baa2909722df58c02dfd13e1d667252ce",
        "files": [
          "Python/parking_lot.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Avoid `sem_clockwait` in TSAN (GH-119915) (#119992)\n\nThe `sem_clockwait` function is not currently instrumented, which leads\nto false positives.\n(cherry picked from commit 41c1cefbae71d687d1a935233b086473df65e15c)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/parking_lot.c||Python/parking_lot.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/parking_lot.c||Python/parking_lot.c": [
          "File: Python/parking_lot.c -> Python/parking_lot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     if (timeout >= 0) {",
          "120:         struct timespec ts;",
          "123:         PyTime_t now;",
          "125:         (void)PyTime_MonotonicRaw(&now);",
          "",
          "[Removed Lines]",
          "122: #if defined(CLOCK_MONOTONIC) && defined(HAVE_SEM_CLOCKWAIT)",
          "",
          "[Added Lines]",
          "122: #if defined(CLOCK_MONOTONIC) && defined(HAVE_SEM_CLOCKWAIT) && !defined(_Py_THREAD_SANITIZER)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "396f8b0b98441344e1d3223a4075e5e342e0c2df",
      "candidate_info": {
        "commit_hash": "396f8b0b98441344e1d3223a4075e5e342e0c2df",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/396f8b0b98441344e1d3223a4075e5e342e0c2df",
        "files": [
          "Lib/test/test_descr.py",
          "Lib/test/test_free_threading/test_slots.py",
          "Python/structmember.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657:  Fix `__slots__` thread safety in free-threaded build (GH-119368) (#120655)\n\nFix a race in `PyMember_GetOne` and `PyMember_SetOne` for `Py_T_OBJECT_EX`.\nThese functions implement `__slots__` accesses for Python objects.\n(cherry picked from commit 362cd2680b45a36c3467b9721ff7fc0ceb338452)\n\nCo-authored-by: Daniele Parmeggiani <8658291+dpdani@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/test_descr.py||Lib/test/test_descr.py",
          "Lib/test/test_free_threading/test_slots.py||Lib/test/test_free_threading/test_slots.py",
          "Python/structmember.c||Python/structmember.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_descr.py||Lib/test/test_descr.py": [
          "File: Lib/test/test_descr.py -> Lib/test/test_descr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1314:         # Inherit from object on purpose to check some backwards compatibility paths",
          "1315:         class X(object):",
          "1316:             __slots__ = \"a\"",
          "1318:             X().a",
          "1320:         # Test string subclass in `__slots__`, see gh-98783",
          "",
          "[Removed Lines]",
          "1317:         with self.assertRaisesRegex(AttributeError, \"'X' object has no attribute 'a'\"):",
          "",
          "[Added Lines]",
          "1317:         with self.assertRaisesRegex(AttributeError, \"'test.test_descr.ClassPropertiesAndMethods.test_slots.<locals>.X' object has no attribute 'a'\"):",
          "",
          "---------------"
        ],
        "Lib/test/test_free_threading/test_slots.py||Lib/test/test_free_threading/test_slots.py": [
          "File: Lib/test/test_free_threading/test_slots.py -> Lib/test/test_free_threading/test_slots.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import threading",
          "2: from test.support import threading_helper",
          "3: from unittest import TestCase",
          "6: def run_in_threads(targets):",
          "7:     \"\"\"Run `targets` in separate threads\"\"\"",
          "8:     threads = [",
          "9:         threading.Thread(target=target)",
          "10:         for target in targets",
          "11:     ]",
          "12:     for thread in threads:",
          "13:         thread.start()",
          "14:     for thread in threads:",
          "15:         thread.join()",
          "18: @threading_helper.requires_working_threading()",
          "19: class TestSlots(TestCase):",
          "21:     def test_object(self):",
          "22:         class Spam:",
          "23:             __slots__ = [",
          "24:                 \"eggs\",",
          "25:             ]",
          "27:             def __init__(self, initial_value):",
          "28:                 self.eggs = initial_value",
          "30:         spam = Spam(0)",
          "31:         iters = 20_000",
          "33:         def writer():",
          "34:             for _ in range(iters):",
          "35:                 spam.eggs += 1",
          "37:         def reader():",
          "38:             for _ in range(iters):",
          "39:                 eggs = spam.eggs",
          "40:                 assert type(eggs) is int",
          "41:                 assert 0 <= eggs <= iters",
          "43:         run_in_threads([writer, reader, reader, reader])",
          "",
          "---------------"
        ],
        "Python/structmember.c||Python/structmember.c": [
          "File: Python/structmember.c -> Python/structmember.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"Python.h\"",
          "5: #include \"pycore_abstract.h\"      // _PyNumber_Index()",
          "6: #include \"pycore_long.h\"          // _PyLong_IsNegative()",
          "9: PyObject *",
          "10: PyMember_GetOne(const char *obj_addr, PyMemberDef *l)",
          "11: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"pycore_object.h\"        // _Py_TryIncrefCompare(), FT_ATOMIC_*()",
          "8: #include \"pycore_critical_section.h\"",
          "11: static inline PyObject *",
          "12: member_get_object(const char *addr, const char *obj_addr, PyMemberDef *l)",
          "13: {",
          "14:     PyObject *v = FT_ATOMIC_LOAD_PTR(*(PyObject **) addr);",
          "15:     if (v == NULL) {",
          "16:         PyErr_Format(PyExc_AttributeError,",
          "17:                      \"'%T' object has no attribute '%s'\",",
          "18:                      (PyObject *)obj_addr, l->name);",
          "19:     }",
          "20:     return v;",
          "21: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         Py_INCREF(v);",
          "76:         break;",
          "77:     case Py_T_OBJECT_EX:",
          "86:         Py_XINCREF(v);",
          "87:         break;",
          "88:     case Py_T_LONGLONG:",
          "89:         v = PyLong_FromLongLong(*(long long *)addr);",
          "",
          "[Removed Lines]",
          "78:         v = *(PyObject **)addr;",
          "79:         if (v == NULL) {",
          "80:             PyObject *obj = (PyObject *)obj_addr;",
          "81:             PyTypeObject *tp = Py_TYPE(obj);",
          "82:             PyErr_Format(PyExc_AttributeError,",
          "83:                          \"'%.200s' object has no attribute '%s'\",",
          "84:                          tp->tp_name, l->name);",
          "85:         }",
          "",
          "[Added Lines]",
          "92:         v = member_get_object(addr, obj_addr, l);",
          "93: #ifndef Py_GIL_DISABLED",
          "95: #else",
          "96:         if (v != NULL) {",
          "97:             if (!_Py_TryIncrefCompare((PyObject **) addr, v)) {",
          "98:                 Py_BEGIN_CRITICAL_SECTION((PyObject *) obj_addr);",
          "99:                 v = member_get_object(addr, obj_addr, l);",
          "100:                 Py_XINCREF(v);",
          "101:                 Py_END_CRITICAL_SECTION();",
          "102:             }",
          "103:         }",
          "104: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         return -1;",
          "119:     }",
          "121:     addr += l->offset;",
          "123:     if ((l->flags & Py_READONLY))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: #ifdef Py_GIL_DISABLED",
          "141:     PyObject *obj = (PyObject *) addr;",
          "142: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:         break;",
          "282:     case _Py_T_OBJECT:",
          "283:     case Py_T_OBJECT_EX:",
          "284:         oldv = *(PyObject **)addr;",
          "286:         Py_XDECREF(oldv);",
          "287:         break;",
          "288:     case Py_T_CHAR: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:         Py_BEGIN_CRITICAL_SECTION(obj);",
          "308:         FT_ATOMIC_STORE_PTR_RELEASE(*(PyObject **)addr, Py_XNewRef(v));",
          "309:         Py_END_CRITICAL_SECTION();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "978b86a91e381bf7cc987ac3e44b0251e4a474ba",
      "candidate_info": {
        "commit_hash": "978b86a91e381bf7cc987ac3e44b0251e4a474ba",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/978b86a91e381bf7cc987ac3e44b0251e4a474ba",
        "files": [
          "Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_ttk/test_widgets.py"
        ],
        "message": "[3.13] gh-107262: Update Tkinter tests for Tcl/Tk 8.6.14 (GH-119322) (GH-119806)\n\n(cherry picked from commit 9732ed5ca94cd8fe9ca2fc7ba5a42dfa2b7791ea)\n\nCo-authored-by: James De Bias <81095953+DBJim@users.noreply.github.com>\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py",
          "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_tkinter/test_widgets.py||Lib/test/test_tkinter/test_widgets.py": [
          "File: Lib/test/test_tkinter/test_widgets.py -> Lib/test/test_tkinter/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "660:         widget = self.create()",
          "661:         self.checkParam(widget, 'tabs', (10.2, 20.7, '1i', '2i'))",
          "662:         self.checkParam(widget, 'tabs', '10.2 20.7 1i 2i',",
          "664:         self.checkParam(widget, 'tabs', '2c left 4c 6c center',",
          "665:                         expected=('2c', 'left', '4c', '6c', 'center'))",
          "666:         self.checkInvalidParam(widget, 'tabs', 'spam',",
          "",
          "[Removed Lines]",
          "663:                         expected=('10.2', '20.7', '1i', '2i'))",
          "",
          "[Added Lines]",
          "663:                         expected=(10.2, 20.7, '1i', '2i')",
          "664:                                  if get_tk_patchlevel(self.root) >= (8, 6, 14)",
          "665:                                  else ('10.2', '20.7', '1i', '2i'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "999:             widget.itemconfigure()",
          "1000:         with self.assertRaisesRegex(TclError, 'bad listbox index \"red\"'):",
          "1001:             widget.itemconfigure('red')",
          "1002:         self.assertEqual(widget.itemconfigure(0, 'background'),",
          "1004:         self.assertEqual(widget.itemconfigure('end', 'background'),",
          "1006:         self.assertEqual(widget.itemconfigure('@0,0', 'background'),",
          "1009:         d = widget.itemconfigure(0)",
          "1010:         self.assertIsInstance(d, dict)",
          "",
          "[Removed Lines]",
          "1003:                          ('background', 'background', 'Background', '', 'red'))",
          "1005:                          ('background', 'background', 'Background', '', 'violet'))",
          "1007:                          ('background', 'background', 'Background', '', 'red'))",
          "",
          "[Added Lines]",
          "1004:         if get_tk_patchlevel(self.root) >= (8, 6, 14):",
          "1005:             prefix = ('background', '', '', '')",
          "1006:         else:",
          "1007:             prefix = ('background', 'background', 'Background', '')",
          "1009:                          (*prefix, 'red'))",
          "1011:                          (*prefix, 'violet'))",
          "1013:                          (*prefix, 'red'))",
          "",
          "---------------"
        ],
        "Lib/test/test_ttk/test_widgets.py||Lib/test/test_ttk/test_widgets.py": [
          "File: Lib/test/test_ttk/test_widgets.py -> Lib/test/test_ttk/test_widgets.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     def test_configure_padding(self):",
          "29:         widget = self.create()",
          "33:         self.checkParam(widget, 'padding', (5, 6, 7),",
          "35:         self.checkParam(widget, 'padding', (5, 6, 7, 8),",
          "37:         self.checkParam(widget, 'padding', ('5p', '6p', '7p', '8p'))",
          "38:         self.checkParam(widget, 'padding', (), expected='')",
          "",
          "[Removed Lines]",
          "30:         self.checkParam(widget, 'padding', 0, expected=('0',))",
          "31:         self.checkParam(widget, 'padding', 5, expected=('5',))",
          "32:         self.checkParam(widget, 'padding', (5, 6), expected=('5', '6'))",
          "34:                         expected=('5', '6', '7'))",
          "36:                         expected=('5', '6', '7', '8'))",
          "",
          "[Added Lines]",
          "30:         if get_tk_patchlevel(self.root) < (8, 6, 14):",
          "31:             def padding_conv(value):",
          "32:                 self.assertIsInstance(value, tuple)",
          "33:                 return tuple(map(str, value))",
          "34:         else:",
          "35:             padding_conv = None",
          "36:         self.checkParam(widget, 'padding', 0, expected=(0,), conv=padding_conv)",
          "37:         self.checkParam(widget, 'padding', 5, expected=(5,), conv=padding_conv)",
          "38:         self.checkParam(widget, 'padding', (5, 6),",
          "39:                         expected=(5, 6), conv=padding_conv)",
          "41:                         expected=(5, 6, 7), conv=padding_conv)",
          "43:                         expected=(5, 6, 7, 8), conv=padding_conv)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cceb758c788adb51ca1660e9d49410c2347feadc",
      "candidate_info": {
        "commit_hash": "cceb758c788adb51ca1660e9d49410c2347feadc",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cceb758c788adb51ca1660e9d49410c2347feadc",
        "files": [
          "Lib/test/seq_tests.py",
          "Lib/test/test_capi/test_misc.py",
          "Lib/test/test_descr.py",
          "Lib/test/test_gc.py",
          "Lib/test/test_inspect/test_inspect.py",
          "Lib/test/test_module/__init__.py",
          "Lib/test/test_trace.py",
          "Lib/test/test_zoneinfo/test_zoneinfo.py"
        ],
        "message": "[3.13] gh-118846: Fix free-threading test failures when run sequentially (GH-118864) (#118927)\n\nThe free-threaded build currently immortalizes some objects once the\nfirst thread is started. This can lead to test failures depending on the\norder in which tests are run. This PR addresses those failures by\nsuppressing immortalization or skipping the affected tests.\n(cherry picked from commit b309c8ebff011f27012367b046ff92eecbdd68a5)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Lib/test/seq_tests.py||Lib/test/seq_tests.py",
          "Lib/test/test_capi/test_misc.py||Lib/test/test_capi/test_misc.py",
          "Lib/test/test_descr.py||Lib/test/test_descr.py",
          "Lib/test/test_gc.py||Lib/test/test_gc.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py",
          "Lib/test/test_module/__init__.py||Lib/test/test_module/__init__.py",
          "Lib/test/test_trace.py||Lib/test/test_trace.py",
          "Lib/test/test_zoneinfo/test_zoneinfo.py||Lib/test/test_zoneinfo/test_zoneinfo.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/seq_tests.py||Lib/test/seq_tests.py": [
          "File: Lib/test/seq_tests.py -> Lib/test/seq_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:             self.assertEqual(lst2, lst)",
          "427:             self.assertNotEqual(id(lst2), id(lst))",
          "429:     def test_free_after_iterating(self):",
          "430:         support.check_free_after_iterating(self, iter, self.type2test)",
          "431:         support.check_free_after_iterating(self, reversed, self.type2test)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:     @support.suppress_immortalization()",
          "",
          "---------------"
        ],
        "Lib/test/test_capi/test_misc.py||Lib/test/test_capi/test_misc.py": [
          "File: Lib/test/test_capi/test_misc.py -> Lib/test/test_capi/test_misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from test.support import threading_helper",
          "27: from test.support import warnings_helper",
          "28: from test.support import requires_limited_api",
          "30: from test.support import Py_GIL_DISABLED",
          "31: from test.support.script_helper import assert_python_failure, assert_python_ok, run_python_until_end",
          "32: try:",
          "",
          "[Removed Lines]",
          "29: from test.support import requires_gil_enabled, expected_failure_if_gil_disabled",
          "",
          "[Added Lines]",
          "29: from test.support import suppress_immortalization",
          "30: from test.support import expected_failure_if_gil_disabled",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "481:     def test_null_type_doc(self):",
          "482:         self.assertEqual(_testcapi.NullTpDocType.__doc__, None)",
          "484:     def test_subclass_of_heap_gc_ctype_with_tpdealloc_decrefs_once(self):",
          "485:         class HeapGcCTypeSubclass(_testcapi.HeapGcCType):",
          "486:             def __init__(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:         del subclass_instance",
          "499:         self.assertEqual(type_refcnt - 1, sys.getrefcount(HeapGcCTypeSubclass))",
          "501:     def test_subclass_of_heap_gc_ctype_with_del_modifying_dunder_class_only_decrefs_once(self):",
          "502:         class A(_testcapi.HeapGcCType):",
          "503:             def __init__(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:     @suppress_immortalization()",
          "",
          "---------------"
        ],
        "Lib/test/test_descr.py||Lib/test/test_descr.py": [
          "File: Lib/test/test_descr.py -> Lib/test/test_descr.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:                 cls.lst = [2**i for i in range(10000)]",
          "5015:         X.descr",
          "5017:     def test_remove_subclass(self):",
          "5018:         # bpo-46417: when the last subclass of a type is deleted,",
          "5019:         # remove_subclass() clears the internal dictionary of subclasses:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5017:     @support.suppress_immortalization()",
          "",
          "---------------"
        ],
        "Lib/test/test_gc.py||Lib/test/test_gc.py": [
          "File: Lib/test/test_gc.py -> Lib/test/test_gc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from test import support",
          "4: from test.support import (verbose, refcount_test,",
          "5:                           cpython_only, requires_subprocess,",
          "7: from test.support.import_helper import import_module",
          "8: from test.support.os_helper import temp_dir, TESTFN, unlink",
          "9: from test.support.script_helper import assert_python_ok, make_script",
          "",
          "[Removed Lines]",
          "6:                           requires_gil_enabled)",
          "",
          "[Added Lines]",
          "6:                           requires_gil_enabled, suppress_immortalization,",
          "7:                           Py_GIL_DISABLED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         del l",
          "110:         self.assertEqual(gc.collect(), 2)",
          "112:     def test_class(self):",
          "113:         class A:",
          "114:             pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:         del A",
          "118:         self.assertNotEqual(gc.collect(), 0)",
          "120:     def test_newstyleclass(self):",
          "121:         class A(object):",
          "122:             pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:         del a",
          "134:         self.assertNotEqual(gc.collect(), 0)",
          "136:     def test_newinstance(self):",
          "137:         class A(object):",
          "138:             pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:             self.fail(\"didn't find obj in garbage (finalizer)\")",
          "220:         gc.garbage.remove(obj)",
          "222:     def test_function(self):",
          "223:         # Tricky: f -> d -> f, code should call d.clear() after the exec to",
          "224:         # break the cycle.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "562:         self.assertEqual(gc.get_referents(1, 'a', 4j), [])",
          "564:     def test_is_tracked(self):",
          "565:         # Atomic built-in types are not tracked, user-defined objects and",
          "566:         # mutable containers are.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "598:         class UserIntSlots(int):",
          "599:             __slots__ = ()",
          "602:         self.assertTrue(gc.is_tracked(UserClass))",
          "603:         self.assertTrue(gc.is_tracked(UserClass()))",
          "604:         self.assertTrue(gc.is_tracked(UserInt()))",
          "",
          "[Removed Lines]",
          "601:         self.assertTrue(gc.is_tracked(gc))",
          "",
          "[Added Lines]",
          "607:         if not Py_GIL_DISABLED:",
          "608:             # gh-117783: modules may be immortalized in free-threaded build",
          "609:             self.assertTrue(gc.is_tracked(gc))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1347:         junk = []",
          "1348:         i = 0",
          "1349:         detector = GC_Detector()",
          "1350:         while not detector.gc_happened:",
          "1351:             i += 1",
          "1352:             if i > 10000:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358:         if Py_GIL_DISABLED:",
          "1359:             # The free-threaded build doesn't have multiple generations, so",
          "1360:             # just trigger a GC manually.",
          "1361:             gc.collect()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1415:         detector = GC_Detector()",
          "1416:         junk = []",
          "1417:         i = 0",
          "1418:         while not detector.gc_happened:",
          "1419:             i += 1",
          "1420:             if i > 10000:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1430:         if Py_GIL_DISABLED:",
          "1431:             # The free-threaded build doesn't have multiple generations, so",
          "1432:             # just trigger a GC manually.",
          "1433:             gc.collect()",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: except ImportError:",
          "35:     ThreadPoolExecutor = None",
          "38: from test.support import MISSING_C_DOCSTRINGS, ALWAYS_EQ",
          "39: from test.support.import_helper import DirsOnSysPath, ready_to_import",
          "40: from test.support.os_helper import TESTFN, temp_cwd",
          "",
          "[Removed Lines]",
          "37: from test.support import cpython_only, import_helper",
          "",
          "[Added Lines]",
          "37: from test.support import cpython_only, import_helper, suppress_immortalization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "768:             inspect.getfile(list.append)",
          "769:         self.assertIn('expected, got', str(e_append.exception))",
          "771:     def test_getfile_class_without_module(self):",
          "772:         class CM(type):",
          "773:             @property",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2431:         self.assertFalse(test.called)",
          "2433:     def test_cache_does_not_cause_classes_to_persist(self):",
          "2434:         # regression test for gh-118013:",
          "2435:         # check that the internal _shadowed_dict cache does not cause",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2434:     @suppress_immortalization()",
          "",
          "---------------"
        ],
        "Lib/test/test_module/__init__.py||Lib/test/test_module/__init__.py": [
          "File: Lib/test/test_module/__init__.py -> Lib/test/test_module/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import weakref",
          "5: from test.support import gc_collect",
          "6: from test.support import import_helper",
          "7: from test.support.script_helper import assert_python_ok",
          "9: import sys",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from test.support import suppress_immortalization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:         gc_collect()",
          "104:         self.assertEqual(f().__dict__[\"bar\"], 4)",
          "106:     def test_clear_dict_in_ref_cycle(self):",
          "107:         destroyed = []",
          "108:         m = ModuleType(\"foo\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     @suppress_immortalization()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         gc_collect()",
          "119:         self.assertEqual(destroyed, [1])",
          "121:     def test_weakref(self):",
          "122:         m = ModuleType(\"foo\")",
          "123:         wr = weakref.ref(m)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     @suppress_immortalization()",
          "",
          "---------------"
        ],
        "Lib/test/test_trace.py||Lib/test/test_trace.py": [
          "File: Lib/test/test_trace.py -> Lib/test/test_trace.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "2: from pickle import dump",
          "3: import sys",
          "5: from test.support.os_helper import (TESTFN, rmtree, unlink)",
          "6: from test.support.script_helper import assert_python_ok, assert_python_failure",
          "7: import textwrap",
          "",
          "[Removed Lines]",
          "4: from test.support import captured_stdout, requires_resource",
          "",
          "[Added Lines]",
          "4: from test.support import captured_stdout, requires_resource, requires_gil_enabled",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),",
          "303:                      'pre-existing trace function throws off measurements')",
          "304:     def test_inst_method_calling(self):",
          "305:         obj = TracedClass(20)",
          "306:         self.tracer.runfunc(obj.inst_method_calling, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:     @requires_gil_enabled(\"gh-117783: immortalization of types affects traced method names\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335:     @unittest.skipIf(hasattr(sys, 'gettrace') and sys.gettrace(),",
          "336:                      'pre-existing trace function throws off measurements')",
          "337:     def test_loop_caller_importing(self):",
          "338:         self.tracer.runfunc(traced_func_importing_caller, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:     @requires_gil_enabled(\"gh-117783: immortalization of types affects traced method names\")",
          "",
          "---------------"
        ],
        "Lib/test/test_zoneinfo/test_zoneinfo.py||Lib/test/test_zoneinfo/test_zoneinfo.py": [
          "File: Lib/test/test_zoneinfo/test_zoneinfo.py -> Lib/test/test_zoneinfo/test_zoneinfo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from datetime import date, datetime, time, timedelta, timezone",
          "18: from functools import cached_property",
          "21: from test.test_zoneinfo import _support as test_support",
          "22: from test.test_zoneinfo._support import OS_ENV_LOCK, TZPATH_TEST_LOCK, ZoneInfoTestBase",
          "23: from test.support.import_helper import import_module, CleanImport",
          "",
          "[Removed Lines]",
          "20: from test.support import MISSING_C_DOCSTRINGS",
          "",
          "[Added Lines]",
          "20: from test.support import MISSING_C_DOCSTRINGS, requires_gil_enabled",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1931:         self.assertFalse(hasattr(c_zoneinfo.ZoneInfo, \"_weak_cache\"))",
          "1932:         self.assertTrue(hasattr(py_zoneinfo.ZoneInfo, \"_weak_cache\"))",
          "1934:     def test_gc_tracked(self):",
          "1935:         import gc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1934:     @requires_gil_enabled(\"gh-117783: types may be immortalized\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8ea9669aa79b0d29e26a30824b7516efa612a02",
      "candidate_info": {
        "commit_hash": "a8ea9669aa79b0d29e26a30824b7516efa612a02",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a8ea9669aa79b0d29e26a30824b7516efa612a02",
        "files": [
          "Lib/inspect.py",
          "Lib/test/test_inspect/test_inspect.py",
          "Misc/NEWS.d/next/Library/2023-04-10-00-04-37.gh-issue-87106.UyBnPQ.rst"
        ],
        "message": "[3.13] gh-87106: Fix inspect.signature.bind() handling of positional-only arguments with **kwargs (GH-103404) (#118985)\n\n(cherry picked from commit 9c1520244151f36e010c1b04bedf14747a28517d)\n\nCo-authored-by: Jacob Walls <jacobtylerwalls@gmail.com>",
        "before_after_code_files": [
          "Lib/inspect.py||Lib/inspect.py",
          "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/inspect.py||Lib/inspect.py": [
          "File: Lib/inspect.py -> Lib/inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3106:         parameters_ex = ()",
          "3107:         arg_vals = iter(args)",
          "3109:         while True:",
          "3110:             # Let's iterate through the positional arguments and corresponding",
          "3111:             # parameters",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3109:         pos_only_param_in_kwargs = []",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3126:                         break",
          "3127:                     elif param.name in kwargs:",
          "3128:                         if param.kind == _POSITIONAL_ONLY:",
          "3133:                         parameters_ex = (param,)",
          "3134:                         break",
          "3135:                     elif (param.kind == _VAR_KEYWORD or",
          "",
          "[Removed Lines]",
          "3129:                             msg = '{arg!r} parameter is positional only, ' \\",
          "3130:                                   'but was passed as a keyword'",
          "3131:                             msg = msg.format(arg=param.name)",
          "3132:                             raise TypeError(msg) from None",
          "",
          "[Added Lines]",
          "3131:                             # Raise a TypeError once we are sure there is no",
          "3132:                             # **kwargs param later.",
          "3133:                             pos_only_param_in_kwargs.append(param)",
          "3134:                             continue",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3211:                                     format(arg=param_name)) from None",
          "3213:             else:",
          "3222:                 arguments[param_name] = arg_val",
          "3224:         if kwargs:",
          "3225:             if kwargs_param is not None:",
          "3226:                 # Process our '**kwargs'-like parameter",
          "3227:                 arguments[kwargs_param.name] = kwargs",
          "3228:             else:",
          "3229:                 raise TypeError(",
          "3230:                     'got an unexpected keyword argument {arg!r}'.format(",
          "",
          "[Removed Lines]",
          "3214:                 if param.kind == _POSITIONAL_ONLY:",
          "3215:                     # This should never happen in case of a properly built",
          "3216:                     # Signature object (but let's have this check here",
          "3217:                     # to ensure correct behaviour just in case)",
          "3218:                     raise TypeError('{arg!r} parameter is positional only, '",
          "3219:                                     'but was passed as a keyword'. \\",
          "3220:                                     format(arg=param.name))",
          "",
          "[Added Lines]",
          "3222:             elif pos_only_param_in_kwargs:",
          "3223:                 raise TypeError(",
          "3224:                     'got some positional-only arguments passed as '",
          "3225:                     'keyword arguments: {arg!r}'.format(",
          "3226:                         arg=', '.join(",
          "3227:                             param.name",
          "3228:                             for param in pos_only_param_in_kwargs",
          "3229:                         ),",
          "3230:                     ),",
          "3231:                 )",
          "",
          "---------------"
        ],
        "Lib/test/test_inspect/test_inspect.py||Lib/test/test_inspect/test_inspect.py": [
          "File: Lib/test/test_inspect/test_inspect.py -> Lib/test/test_inspect/test_inspect.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5089:         self.assertEqual(self.call(test, 1, 2, foo=4, bar=5),",
          "5090:                          (1, 2, 3, 4, 5, {}))",
          "5099:             self.call(test, a_po=1, b_po=2)",
          "5101:     def test_signature_bind_with_self_arg(self):",
          "5102:         # Issue #17071: one of the parameters is named \"self",
          "5103:         def test(a, self, b):",
          "",
          "[Removed Lines]",
          "5092:         with self.assertRaisesRegex(TypeError, \"but was passed as a keyword\"):",
          "5093:             self.call(test, 1, 2, foo=4, bar=5, c_po=10)",
          "5095:         with self.assertRaisesRegex(TypeError, \"parameter is positional only\"):",
          "5096:             self.call(test, 1, 2, c_po=4)",
          "5098:         with self.assertRaisesRegex(TypeError, \"parameter is positional only\"):",
          "",
          "[Added Lines]",
          "5092:         self.assertEqual(self.call(test, 1, 2, foo=4, bar=5, c_po=10),",
          "5093:                          (1, 2, 3, 4, 5, {'c_po': 10}))",
          "5095:         self.assertEqual(self.call(test, 1, 2, 30, c_po=31, foo=4, bar=5),",
          "5096:                          (1, 2, 30, 4, 5, {'c_po': 31}))",
          "5098:         self.assertEqual(self.call(test, 1, 2, 30, foo=4, bar=5, c_po=31),",
          "5099:                          (1, 2, 30, 4, 5, {'c_po': 31}))",
          "5101:         self.assertEqual(self.call(test, 1, 2, c_po=4),",
          "5102:                          (1, 2, 3, 42, 50, {'c_po': 4}))",
          "5104:         with self.assertRaisesRegex(TypeError, \"missing 2 required positional arguments\"):",
          "5107:         def without_var_kwargs(c_po=3, d_po=4, /):",
          "5108:             return c_po, d_po",
          "5110:         with self.assertRaisesRegex(",
          "5111:             TypeError,",
          "5112:             \"positional-only arguments passed as keyword arguments: 'c_po, d_po'\",",
          "5113:         ):",
          "5114:             self.call(without_var_kwargs, c_po=33, d_po=44)",
          "",
          "---------------"
        ]
      }
    }
  ]
}