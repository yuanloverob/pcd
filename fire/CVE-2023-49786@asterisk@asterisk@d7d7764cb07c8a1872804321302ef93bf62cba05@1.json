{
  "cve_id": "CVE-2023-49786",
  "cve_desc": "Asterisk is an open source private branch exchange and telephony toolkit. In Asterisk prior to versions 18.20.1, 20.5.1, and 21.0.1; as well as certified-asterisk prior to 18.9-cert6; Asterisk is susceptible to a DoS due to a race condition in the hello handshake phase of the DTLS protocol when handling DTLS-SRTP for media setup. This attack can be done continuously, thus denying new DTLS-SRTP encrypted calls during the attack. Abuse of this vulnerability may lead to a massive Denial of Service on vulnerable Asterisk servers for calls that rely on DTLS-SRTP. Commit d7d7764cb07c8a1872804321302ef93bf62cba05 contains a fix, which is part of versions 18.20.1, 20.5.1, 21.0.1, amd 18.9-cert6.",
  "repo": "asterisk/asterisk",
  "patch_hash": "d7d7764cb07c8a1872804321302ef93bf62cba05",
  "patch_info": {
    "commit_hash": "d7d7764cb07c8a1872804321302ef93bf62cba05",
    "repo": "asterisk/asterisk",
    "commit_url": "https://github.com/asterisk/asterisk/commit/d7d7764cb07c8a1872804321302ef93bf62cba05",
    "files": [
      "res/res_rtp_asterisk.c"
    ],
    "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
    "before_after_code_files": [
      "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
    ]
  },
  "patch_diff": {
    "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
      "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3208:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3217:   if (rtp->ice) {",
      "3218:    int pass_src_check = 0;",
      "3219:    struct ao2_iterator i;",
      "3220:    struct ast_rtp_engine_ice_candidate *candidate;",
      "3221:    int cand_cnt = 0;",
      "3234:    if (!rtp->ice_media_started) {",
      "3235:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
      "3236:      ast_rtp_instance_get_channel_id(instance),",
      "3237:      ast_sockaddr_stringify(sa));",
      "3238:     return 0;",
      "3239:    }",
      "3245:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
      "3246:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
      "3247:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
      "3248:     ao2_ref(candidate, -1);",
      "3249:     if (res == 0) {",
      "3250:      pass_src_check = 1;",
      "3251:      break;",
      "3252:     }",
      "3253:     cand_cnt++;",
      "3254:    }",
      "3255:    ao2_iterator_destroy(&i);",
      "3257:    if (!pass_src_check) {",
      "3258:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
      "3259:      ast_rtp_instance_get_channel_id(instance),",
      "3260:      ast_sockaddr_stringify(sa));",
      "3261:     return 0;",
      "3262:    }",
      "3263:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "986b55eeaaca2aa6ae8f3b6a77e032d2ca2e8318",
      "candidate_info": {
        "commit_hash": "986b55eeaaca2aa6ae8f3b6a77e032d2ca2e8318",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/986b55eeaaca2aa6ae8f3b6a77e032d2ca2e8318",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3180:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3189:   if (rtp->ice) {",
          "3190:    int pass_src_check = 0;",
          "3191:    struct ao2_iterator i;",
          "3192:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3193:    int cand_cnt = 0;",
          "3206:    if (!rtp->ice_media_started) {",
          "3207:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3208:      ast_rtp_instance_get_channel_id(instance),",
          "3209:      ast_sockaddr_stringify(sa));",
          "3210:     return 0;",
          "3211:    }",
          "3217:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3218:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3219:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3220:     ao2_ref(candidate, -1);",
          "3221:     if (res == 0) {",
          "3222:      pass_src_check = 1;",
          "3223:      break;",
          "3224:     }",
          "3225:     cand_cnt++;",
          "3226:    }",
          "3227:    ao2_iterator_destroy(&i);",
          "3229:    if (!pass_src_check) {",
          "3230:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3231:      ast_rtp_instance_get_channel_id(instance),",
          "3232:      ast_sockaddr_stringify(sa));",
          "3233:     return 0;",
          "3234:    }",
          "3235:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "096819ec8afe9f7ffb12332f94e22b918bef9c68",
      "candidate_info": {
        "commit_hash": "096819ec8afe9f7ffb12332f94e22b918bef9c68",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/096819ec8afe9f7ffb12332f94e22b918bef9c68",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3138:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3147:   if (rtp->ice) {",
          "3148:    int pass_src_check = 0;",
          "3149:    struct ao2_iterator i;",
          "3150:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3151:    int cand_cnt = 0;",
          "3164:    if (!rtp->ice_media_started) {",
          "3165:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3166:      ast_rtp_instance_get_channel_id(instance),",
          "3167:      ast_sockaddr_stringify(sa));",
          "3168:     return 0;",
          "3169:    }",
          "3175:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3176:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3177:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3178:     ao2_ref(candidate, -1);",
          "3179:     if (res == 0) {",
          "3180:      pass_src_check = 1;",
          "3181:      break;",
          "3182:     }",
          "3183:     cand_cnt++;",
          "3184:    }",
          "3185:    ao2_iterator_destroy(&i);",
          "3187:    if (!pass_src_check) {",
          "3188:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3189:      ast_rtp_instance_get_channel_id(instance),",
          "3190:      ast_sockaddr_stringify(sa));",
          "3191:     return 0;",
          "3192:    }",
          "3193:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00921cecdad11dea8cc8f9f75651156b83c71b50",
      "candidate_info": {
        "commit_hash": "00921cecdad11dea8cc8f9f75651156b83c71b50",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/00921cecdad11dea8cc8f9f75651156b83c71b50",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3208:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3217:   if (rtp->ice) {",
          "3218:    int pass_src_check = 0;",
          "3219:    struct ao2_iterator i;",
          "3220:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3221:    int cand_cnt = 0;",
          "3234:    if (!rtp->ice_media_started) {",
          "3235:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3236:      ast_rtp_instance_get_channel_id(instance),",
          "3237:      ast_sockaddr_stringify(sa));",
          "3238:     return 0;",
          "3239:    }",
          "3245:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3246:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3247:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3248:     ao2_ref(candidate, -1);",
          "3249:     if (res == 0) {",
          "3250:      pass_src_check = 1;",
          "3251:      break;",
          "3252:     }",
          "3253:     cand_cnt++;",
          "3254:    }",
          "3255:    ao2_iterator_destroy(&i);",
          "3257:    if (!pass_src_check) {",
          "3258:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3259:      ast_rtp_instance_get_channel_id(instance),",
          "3260:      ast_sockaddr_stringify(sa));",
          "3261:     return 0;",
          "3262:    }",
          "3263:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be5e9c568d9a08576f271b05ac92f990b999d493",
      "candidate_info": {
        "commit_hash": "be5e9c568d9a08576f271b05ac92f990b999d493",
        "repo": "asterisk/asterisk",
        "commit_url": "https://github.com/asterisk/asterisk/commit/be5e9c568d9a08576f271b05ac92f990b999d493",
        "files": [
          "res/res_rtp_asterisk.c"
        ],
        "message": "res_rtp_asterisk.c: Check DTLS packets against ICE candidate list\n\nWhen ICE is in use, we can prevent a possible DOS attack by allowing\nDTLS protocol messages (client hello, etc) only from sources that\nare in the active remote candidates list.\n\nResolves: GHSA-hxj9-xwr8-w8pq",
        "before_after_code_files": [
          "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ],
          "candidate": [
            "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c"
          ]
        }
      },
      "candidate_diff": {
        "res/res_rtp_asterisk.c||res/res_rtp_asterisk.c": [
          "File: res/res_rtp_asterisk.c -> res/res_rtp_asterisk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3180:   ast_debug_dtls(3, \"(%p) DTLS - __rtp_recvfrom rtp=%p - Got SSL packet '%d'\\n\", instance, rtp, *in);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3189:   if (rtp->ice) {",
          "3190:    int pass_src_check = 0;",
          "3191:    struct ao2_iterator i;",
          "3192:    struct ast_rtp_engine_ice_candidate *candidate;",
          "3193:    int cand_cnt = 0;",
          "3206:    if (!rtp->ice_media_started) {",
          "3207:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. ICE not completed yet.\\n\",",
          "3208:      ast_rtp_instance_get_channel_id(instance),",
          "3209:      ast_sockaddr_stringify(sa));",
          "3210:     return 0;",
          "3211:    }",
          "3217:    i = ao2_iterator_init(rtp->ice_active_remote_candidates, 0);",
          "3218:    while ((candidate = ao2_iterator_next(&i)) && (cand_cnt < PJ_ICE_MAX_CAND)) {",
          "3219:     res = ast_sockaddr_cmp_addr(&candidate->address, sa);",
          "3220:     ao2_ref(candidate, -1);",
          "3221:     if (res == 0) {",
          "3222:      pass_src_check = 1;",
          "3223:      break;",
          "3224:     }",
          "3225:     cand_cnt++;",
          "3226:    }",
          "3227:    ao2_iterator_destroy(&i);",
          "3229:    if (!pass_src_check) {",
          "3230:     ast_log(LOG_WARNING, \"%s: DTLS packet from %s dropped. Source not in ICE active candidate list.\\n\",",
          "3231:      ast_rtp_instance_get_channel_id(instance),",
          "3232:      ast_sockaddr_stringify(sa));",
          "3233:     return 0;",
          "3234:    }",
          "3235:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}