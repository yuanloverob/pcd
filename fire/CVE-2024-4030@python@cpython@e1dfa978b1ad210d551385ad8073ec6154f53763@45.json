{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0e99617985d64e6134964f758ae0a1a20f9f433",
      "candidate_info": {
        "commit_hash": "c0e99617985d64e6134964f758ae0a1a20f9f433",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c0e99617985d64e6134964f758ae0a1a20f9f433",
        "files": [
          "Lib/test/test_functools.py",
          "Lib/test/test_type_params.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-21-09-46-51.gh-issue-119011.WOe3bu.rst",
          "Objects/typeobject.c"
        ],
        "message": "[3.13] gh-119011: `type.__type_params__` now return an empty tuple (GH-119296) (#119678)\n\n(cherry picked from commit 6b240c2308a044e38623900ccb8fa58c3549d4ae)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_functools.py||Lib/test/test_functools.py",
          "Lib/test/test_type_params.py||Lib/test/test_type_params.py",
          "Objects/typeobject.c||Objects/typeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_functools.py||Lib/test/test_functools.py": [
          "File: Lib/test/test_functools.py -> Lib/test/test_functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:         self.assertTrue(wrapper.__doc__.startswith('max('))",
          "711:         self.assertEqual(wrapper.__annotations__, {})",
          "714: class TestWraps(TestUpdateWrapper):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:     def test_update_type_wrapper(self):",
          "714:         def wrapper(*args): pass",
          "716:         functools.update_wrapper(wrapper, type)",
          "717:         self.assertEqual(wrapper.__name__, 'type')",
          "718:         self.assertEqual(wrapper.__annotations__, {})",
          "719:         self.assertEqual(wrapper.__type_params__, ())",
          "",
          "---------------"
        ],
        "Lib/test/test_type_params.py||Lib/test/test_type_params.py": [
          "File: Lib/test/test_type_params.py -> Lib/test/test_type_params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:         self.assertIs(T, C.Alias.__type_params__[0])",
          "564:         self.assertIs(U, C.__type_params__[1])",
          "567: def make_base(arg):",
          "568:     class Base:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:     def test_type_special_case(self):",
          "567:         # https://github.com/python/cpython/issues/119011",
          "568:         self.assertEqual(type.__type_params__, ())",
          "569:         self.assertEqual(object.__type_params__, ())",
          "",
          "---------------"
        ],
        "Objects/typeobject.c||Objects/typeobject.c": [
          "File: Objects/typeobject.c -> Objects/typeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1742: static PyObject *",
          "1743: type_get_type_params(PyTypeObject *type, void *context)",
          "1744: {",
          "1745:     PyObject *params;",
          "1746:     if (PyDict_GetItemRef(lookup_tp_dict(type), &_Py_ID(__type_params__), &params) == 0) {",
          "1747:         return PyTuple_New(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1745:     if (type == &PyType_Type) {",
          "1746:         return PyTuple_New(0);",
          "1747:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e54a28bcc9114f296bd1d63010eedbd0c2140d71",
      "candidate_info": {
        "commit_hash": "e54a28bcc9114f296bd1d63010eedbd0c2140d71",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/e54a28bcc9114f296bd1d63010eedbd0c2140d71",
        "files": [
          "Lib/tabnanny.py",
          "Lib/test/test_tabnanny.py",
          "Misc/ACKS",
          "Misc/NEWS.d/next/Library/2024-06-14-20-05-25.gh-issue-120495.OxgZKB.rst"
        ],
        "message": "[3.13] gh-120495: Fix incorrect exception handling in Tab Nanny (GH-120498) (#120548)\n\ngh-120495: Fix incorrect exception handling in Tab Nanny (GH-120498)\n(cherry picked from commit c501261c919ceb97c850ef9427a93326f06a8f2e)\n\nCo-authored-by: Wulian233 <71213467+Wulian233@users.noreply.github.com>\nCo-authored-by: Hugo van Kemenade <1324225+hugovk@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/tabnanny.py||Lib/tabnanny.py",
          "Lib/test/test_tabnanny.py||Lib/test/test_tabnanny.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/tabnanny.py||Lib/tabnanny.py": [
          "File: Lib/tabnanny.py -> Lib/tabnanny.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         errprint(\"%r: Token Error: %s\" % (file, msg))",
          "108:         return",
          "114:     except IndentationError as msg:",
          "115:         errprint(\"%r: Indentation Error: %s\" % (file, msg))",
          "116:         return",
          "118:     except NannyNag as nag:",
          "119:         badline = nag.get_lineno()",
          "120:         line = nag.get_line()",
          "",
          "[Removed Lines]",
          "110:     except SyntaxError as msg:",
          "111:         errprint(\"%r: Token Error: %s\" % (file, msg))",
          "112:         return",
          "",
          "[Added Lines]",
          "114:     except SyntaxError as msg:",
          "115:         errprint(\"%r: Syntax Error: %s\" % (file, msg))",
          "116:         return",
          "",
          "---------------"
        ],
        "Lib/test/test_tabnanny.py||Lib/test/test_tabnanny.py": [
          "File: Lib/test/test_tabnanny.py -> Lib/test/test_tabnanny.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     def test_with_errored_file(self):",
          "316:         \"\"\"Should displays error when errored python file is given.\"\"\"",
          "317:         with TemporaryPyFile(SOURCE_CODES[\"wrong_indented\"]) as file_path:",
          "319:             stderr += ('unindent does not match any outer indentation level'",
          "320:                        ' (<string>, line 3)')",
          "321:             self.validate_cmd(file_path, stderr=stderr, expect_failure=True)",
          "",
          "[Removed Lines]",
          "318:             stderr  = f\"{file_path!r}: Token Error: \"",
          "",
          "[Added Lines]",
          "318:             stderr  = f\"{file_path!r}: Indentation Error: \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdc50bac16d3f8dc693488738009de8c86baf6e0",
      "candidate_info": {
        "commit_hash": "fdc50bac16d3f8dc693488738009de8c86baf6e0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/fdc50bac16d3f8dc693488738009de8c86baf6e0",
        "files": [
          "Lib/test/test_posixpath.py"
        ],
        "message": "[3.13] GH-118447: Fix FreeBSD test failures. (GH-119170) (#119181)\n\nGH-118447: Fix FreeBSD test failures. (GH-119170)\n\nApparently only macOS requires read permission to call `readlink()` on a\nsymlink.\n(cherry picked from commit 4b7667172898d440c1931ae923446c6a5ef1765e)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>",
        "before_after_code_files": [
          "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_posixpath.py||Lib/test/test_posixpath.py": [
          "File: Lib/test/test_posixpath.py -> Lib/test/test_posixpath.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:     @os_helper.skip_unless_symlink",
          "664:     @skip_if_ABSTFN_contains_backslash",
          "665:     @unittest.skipIf(os.chmod not in os.supports_follow_symlinks, \"Can't set symlink permissions\")",
          "666:     def test_realpath_unreadable_symlink(self):",
          "667:         try:",
          "668:             os.symlink(ABSTFN+\"1\", ABSTFN)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:     @unittest.skipIf(sys.platform != \"darwin\", \"only macOS requires read permission to readlink()\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bc7fc08aef6142c034a9b67972b536a1a810a3e",
      "candidate_info": {
        "commit_hash": "6bc7fc08aef6142c034a9b67972b536a1a810a3e",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/6bc7fc08aef6142c034a9b67972b536a1a810a3e",
        "files": [
          "Lib/rlcompleter.py",
          "Misc/NEWS.d/next/Library/2024-01-12-08-51-03.gh-issue-113978.MqTgB0.rst"
        ],
        "message": "[3.13] gh-113978: Ignore warnings on text completion inside REPL (GH-113979) (#119429)\n\n(cherry picked from commit e03dde5a24d3953e0b16f7cdefdc8b00aa9d9e11)\n\nCo-authored-by: Yan Yanchii <yyanchiy@gmail.com>",
        "before_after_code_files": [
          "Lib/rlcompleter.py||Lib/rlcompleter.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/rlcompleter.py||Lib/rlcompleter.py": [
          "File: Lib/rlcompleter.py -> Lib/rlcompleter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import keyword",
          "36: import re",
          "37: import __main__",
          "39: __all__ = [\"Completer\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import warnings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                 return None",
          "90:         if state == 0:",
          "95:         try:",
          "96:             return self.matches[state]",
          "97:         except IndexError:",
          "",
          "[Removed Lines]",
          "91:             if \".\" in text:",
          "92:                 self.matches = self.attr_matches(text)",
          "93:             else:",
          "94:                 self.matches = self.global_matches(text)",
          "",
          "[Added Lines]",
          "92:             with warnings.catch_warnings(action=\"ignore\"):",
          "93:                 if \".\" in text:",
          "94:                     self.matches = self.attr_matches(text)",
          "95:                 else:",
          "96:                     self.matches = self.global_matches(text)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca37034baa2909722df58c02dfd13e1d667252ce",
      "candidate_info": {
        "commit_hash": "ca37034baa2909722df58c02dfd13e1d667252ce",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/ca37034baa2909722df58c02dfd13e1d667252ce",
        "files": [
          "Python/parking_lot.c",
          "Tools/tsan/suppressions_free_threading.txt"
        ],
        "message": "[3.13] gh-117657: Avoid `sem_clockwait` in TSAN (GH-119915) (#119992)\n\nThe `sem_clockwait` function is not currently instrumented, which leads\nto false positives.\n(cherry picked from commit 41c1cefbae71d687d1a935233b086473df65e15c)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/parking_lot.c||Python/parking_lot.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/parking_lot.c||Python/parking_lot.c": [
          "File: Python/parking_lot.c -> Python/parking_lot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:     if (timeout >= 0) {",
          "120:         struct timespec ts;",
          "123:         PyTime_t now;",
          "125:         (void)PyTime_MonotonicRaw(&now);",
          "",
          "[Removed Lines]",
          "122: #if defined(CLOCK_MONOTONIC) && defined(HAVE_SEM_CLOCKWAIT)",
          "",
          "[Added Lines]",
          "122: #if defined(CLOCK_MONOTONIC) && defined(HAVE_SEM_CLOCKWAIT) && !defined(_Py_THREAD_SANITIZER)",
          "",
          "---------------"
        ]
      }
    }
  ]
}