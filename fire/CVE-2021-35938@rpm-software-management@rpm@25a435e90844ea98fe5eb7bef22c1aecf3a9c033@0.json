{
  "cve_id": "CVE-2021-35938",
  "cve_desc": "A symbolic link issue was found in rpm. It occurs when rpm sets the desired permissions and credentials after installing a file. A local unprivileged user could use this flaw to exchange the original file with a symbolic link to a security-critical file and escalate their privileges on the system. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
  "patch_info": {
    "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
    "files": [
      "lib/fsm.c"
    ],
    "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
    "before_after_code_files": [
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
      "991:             }",
      "993: setmeta:",
      "994:      if (!rc && fp->setmeta) {",
      "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
      "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
      "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
      "997:   if (fd < 0)",
      "998:       rc = RPMERR_OPEN_FAILED;",
      "999:      }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0e3024ca3e7450104e70ec8d213cf223e71f7c02",
      "candidate_info": {
        "commit_hash": "0e3024ca3e7450104e70ec8d213cf223e71f7c02",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/0e3024ca3e7450104e70ec8d213cf223e71f7c02",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Track first hardlink directory descriptor as well\n\nCross-directory hardlinks shouldn't be used as there's no guarantee\ntwo directories are on the same filesystem, but these exist in the\nwild so we need to care.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "193:        rpmpsm psm, int nodigest,",
          "194:        struct filedata_s ** firstlink, int *firstlinkfile,",
          "196: {",
          "197:     int rc = 0;",
          "198:     int fd = -1;",
          "",
          "[Removed Lines]",
          "195:        int *fdp)",
          "",
          "[Added Lines]",
          "195:        int *firstdir, int *fdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:  if (fp->sb.st_nlink > 1) {",
          "207:  }",
          "208:     } else {",
          "210:  if (*firstlink != fp) {",
          "212:  }",
          "213:  fd = *firstlinkfile;",
          "214:     }",
          "",
          "[Removed Lines]",
          "211:      rc = fsmLink(dirfd, (*firstlink)->fpath, dirfd, fp->fpath);",
          "",
          "[Added Lines]",
          "212:      rc = fsmLink(*firstdir, (*firstlink)->fpath, dirfd, fp->fpath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822: struct diriter_s {",
          "823:     int dirfd;",
          "824: };",
          "826: static int onChdir(rpmfi fi, void *data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:     int firstdir;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "828:     struct diriter_s *di = data;",
          "830:     if (di->dirfd >= 0) {",
          "832:  di->dirfd = -1;",
          "833:     }",
          "834:     return 0;",
          "",
          "[Removed Lines]",
          "831:  close(di->dirfd);",
          "",
          "[Added Lines]",
          "834:  if (di->dirfd != di->firstdir)",
          "835:      close(di->dirfd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "849: static rpmfi fsmIterFini(rpmfi fi, struct diriter_s *di)",
          "850: {",
          "853:     return rpmfiFree(fi);",
          "854: }",
          "",
          "[Removed Lines]",
          "851:     close(di->dirfd);",
          "852:     di->dirfd = -1;",
          "",
          "[Added Lines]",
          "855:     if (di->dirfd >= 0) {",
          "856:  close(di->dirfd);",
          "857:  di->dirfd = -1;",
          "858:     }",
          "859:     if (di->firstdir >= 0) {",
          "860:  close(di->firstdir);",
          "861:  di->firstdir = -1;",
          "862:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "869:     char *tid = NULL;",
          "870:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
          "871:     struct filedata_s *firstlink = NULL;",
          "875:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
          "",
          "[Removed Lines]",
          "872:     struct diriter_s di = { -1 };",
          "",
          "[Added Lines]",
          "882:     struct diriter_s di = { -1, -1 };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "969:             if (S_ISREG(fp->sb.st_mode)) {",
          "970:   if (rc == RPMERR_ENOENT) {",
          "971:       rc = fsmMkfile(di.dirfd, fi, fp, files, psm, nodigest,",
          "973:   }",
          "974:             } else if (S_ISDIR(fp->sb.st_mode)) {",
          "975:                 if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "972:        &firstlink, &firstlinkfile, &fd);",
          "",
          "[Added Lines]",
          "982:        &firstlink, &firstlinkfile, &di.firstdir,",
          "983:        &fd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1093: int rpmPackageFilesRemove(rpmts ts, rpmte te, rpmfiles files,",
          "1094:               rpmpsm psm, char ** failedFile)",
          "1095: {",
          "1097:     rpmfi fi = fsmIter(NULL, files, RPMFI_ITER_BACK, &di);",
          "1098:     rpmfs fs = rpmteGetFileStates(te);",
          "1099:     rpmPlugins plugins = rpmtsPlugins(ts);",
          "",
          "[Removed Lines]",
          "1096:     struct diriter_s di = { -1 };",
          "",
          "[Added Lines]",
          "1107:     struct diriter_s di = { -1, -1 };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "693d828c035848585b500dfde6f4e58cfb8d4de4",
      "candidate_info": {
        "commit_hash": "693d828c035848585b500dfde6f4e58cfb8d4de4",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/693d828c035848585b500dfde6f4e58cfb8d4de4",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Return descriptor of created file from fsmMkfile()\n\nThis will be needed for using fd-based metadata operations.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "174:        rpmpsm psm, int nodigest,",
          "176: {",
          "177:     int rc = 0;",
          "178:     int fd = -1;",
          "",
          "[Removed Lines]",
          "175:        struct filedata_s ** firstlink, int *firstlinkfile)",
          "",
          "[Added Lines]",
          "175:        struct filedata_s ** firstlink, int *firstlinkfile,",
          "176:        int *fdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:  }",
          "206:     }",
          "211:     return rc;",
          "212: }",
          "",
          "[Removed Lines]",
          "208:     if (fd != *firstlinkfile)",
          "209:  fsmClose(&fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "867:      fp = firstlink;",
          "869:         if (!fp->skip) {",
          "871:      if (!fp->suffix && fp != firstlink) {",
          "872:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:      int fd = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "910:             if (S_ISREG(fp->sb.st_mode)) {",
          "911:   if (rc == RPMERR_ENOENT) {",
          "912:       rc = fsmMkfile(di.dirfd, fi, fp, files, psm, nodigest,",
          "914:   }",
          "915:             } else if (S_ISDIR(fp->sb.st_mode)) {",
          "916:                 if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "913:        &firstlink, &firstlinkfile);",
          "",
          "[Added Lines]",
          "913:        &firstlink, &firstlinkfile, &fd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "946:   rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "947:     &fp->sb, nofcaps);",
          "948:      }",
          "949:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950:      if (fd != firstlinkfile)",
          "951:   fsmClose(&fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dd62720fe84f7e2ad902c915b952fc0b29e3dcd",
      "candidate_info": {
        "commit_hash": "6dd62720fe84f7e2ad902c915b952fc0b29e3dcd",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/6dd62720fe84f7e2ad902c915b952fc0b29e3dcd",
        "files": [
          "lib/fsm.c",
          "lib/rpmplugins.c"
        ],
        "message": "Swap over to dirfd+basename based operation within the fsm\n\nWithin fsm this is just a matter of adjusting error messages to include\nthe directory... if it only wasn't for the plugins requiring absolute\npaths for outside users. For the plugins, we need to assemble absolute\npaths as needed, both in ensureDir() and plugin file slots.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c",
          "lib/rpmplugins.c||lib/rpmplugins.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: static char * fsmFsPath(rpmfi fi, const char * suffix)",
          "77: {",
          "79: }",
          "81: static int fsmLink(int odirfd, const char *opath, int dirfd, const char *path)",
          "",
          "[Removed Lines]",
          "78:     return rstrscat(NULL, rpmfiDN(fi), rpmfiBN(fi), suffix ? suffix : \"\", NULL);",
          "",
          "[Added Lines]",
          "79:     const char *bn = rpmfiBN(fi);",
          "80:     return rstrscat(NULL, *bn ? bn : \"/\", suffix ? suffix : \"\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: }",
          "331: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
          "332:    int owned, mode_t mode, int *fdp)",
          "333: {",
          "334:     int rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:    const char *apath,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "337:  op |= FAF_UNOWNED;",
          "342:     if (!rc)",
          "343:  rc = fsmMkdir(dirfd, dn, mode);",
          "",
          "[Removed Lines]",
          "340:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
          "",
          "[Added Lines]",
          "343:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, apath, mode, op);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:     }",
          "351:     if (!rc) {",
          "353:     }",
          "",
          "[Removed Lines]",
          "352:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, dn, dn, mode, op);",
          "",
          "[Added Lines]",
          "355:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, apath, apath, mode, op);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:     if (!rc) {",
          "359:  rpmlog(RPMLOG_DEBUG,",
          "360:   \"%s directory created with perms %04o\\n\",",
          "362:     }",
          "364:     return rc;",
          "",
          "[Removed Lines]",
          "361:   dn, (unsigned)(mode & 07777));",
          "",
          "[Added Lines]",
          "364:   apath, (unsigned)(mode & 07777));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "370:     char *path = xstrdup(p);",
          "371:     char *dp = path;",
          "372:     char *sp = NULL, *bn;",
          "373:     int oflags = O_RDONLY;",
          "374:     int rc = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:     char *apath = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
          "383:  fd = fsmOpenat(dirfd, bn, oflags, 1);",
          "385:  if (fd < 0 && errno == ENOENT && create) {",
          "386:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
          "388:  }",
          "390:  close(dirfd);",
          "",
          "[Removed Lines]",
          "387:      rc = fsmDoMkDir(plugins, dirfd, bn, owned, mode, &fd);",
          "",
          "[Added Lines]",
          "389:  apath = rstrscat(&apath, \"/\", bn, NULL);",
          "393:      rc = fsmDoMkDir(plugins, dirfd, bn, apath, owned, mode, &fd);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "417:     }",
          "419:     free(path);",
          "420:     return rc;",
          "421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     free(apath);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "708:  char * path = fsmFsPath(fi, suffix);",
          "709:  rc = fsmRename(dirfd, opath, dirfd, path);",
          "710:  if (!rc) {",
          "712:  }",
          "713:  free(path);",
          "714:  free(opath);",
          "",
          "[Removed Lines]",
          "711:      rpmlog(RPMLOG_WARNING, _(\"%s saved as %s\\n\"), opath, path);",
          "",
          "[Added Lines]",
          "718:      rpmlog(RPMLOG_WARNING, _(\"%s%s saved as %s%s\\n\"),",
          "719:      rpmfiDN(fi), opath, rpmfiDN(fi), path);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "764:      if (!rc) {",
          "765:   if (nsuffix) {",
          "766:       char * opath = fsmFsPath(fi, NULL);",
          "769:       free(opath);",
          "770:   }",
          "771:   free(*path);",
          "",
          "[Removed Lines]",
          "767:       rpmlog(RPMLOG_WARNING, _(\"%s created as %s\\n\"),",
          "768:       opath, dest);",
          "",
          "[Added Lines]",
          "775:       rpmlog(RPMLOG_WARNING, _(\"%s%s created as %s%s\\n\"),",
          "776:       rpmfiDN(fi), opath, rpmfiDN(fi), dest);",
          "",
          "---------------"
        ],
        "lib/rpmplugins.c||lib/rpmplugins.c": [
          "File: lib/rpmplugins.c -> lib/rpmplugins.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:     return rc;",
          "351: }",
          "353: rpmRC rpmpluginsCallFsmFilePre(rpmPlugins plugins, rpmfi fi, const char *path,",
          "354:           mode_t file_mode, rpmFsmOp op)",
          "355: {",
          "356:     plugin_fsm_file_pre_func hookFunc;",
          "357:     int i;",
          "358:     rpmRC rc = RPMRC_OK;",
          "360:     for (i = 0; i < plugins->count; i++) {",
          "361:  rpmPlugin plugin = plugins->plugins[i];",
          "362:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_pre);",
          "364:      rpmlog(RPMLOG_ERR, \"Plugin %s: hook fsm_file_pre failed\\n\", plugin->name);",
          "365:      rc = RPMRC_FAIL;",
          "366:  }",
          "367:     }",
          "369:     return rc;",
          "370: }",
          "",
          "[Removed Lines]",
          "363:  if (hookFunc && hookFunc(plugin, fi, path, file_mode, op) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "353: static char *abspath(rpmfi fi, const char *path)",
          "354: {",
          "355:     if (*path == '/')",
          "356:  return xstrdup(path);",
          "357:     else",
          "358:  return rstrscat(NULL, rpmfiDN(fi), path, NULL);",
          "359: }",
          "367:     char *apath = abspath(fi, path);",
          "372:  if (hookFunc && hookFunc(plugin, fi, apath, file_mode, op) == RPMRC_FAIL) {",
          "377:     free(apath);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     plugin_fsm_file_post_func hookFunc;",
          "376:     int i;",
          "377:     rpmRC rc = RPMRC_OK;",
          "379:     for (i = 0; i < plugins->count; i++) {",
          "380:  rpmPlugin plugin = plugins->plugins[i];",
          "381:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_post);",
          "383:      rpmlog(RPMLOG_WARNING, \"Plugin %s: hook fsm_file_post failed\\n\", plugin->name);",
          "384:  }",
          "385:     }",
          "387:     return rc;",
          "388: }",
          "",
          "[Removed Lines]",
          "382:  if (hookFunc && hookFunc(plugin, fi, path, file_mode, op, res) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "388:     char *apath = abspath(fi, path);",
          "393:  if (hookFunc && hookFunc(plugin, fi, apath, file_mode, op, res) == RPMRC_FAIL) {",
          "397:     free(apath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:     plugin_fsm_file_prepare_func hookFunc;",
          "395:     int i;",
          "396:     rpmRC rc = RPMRC_OK;",
          "398:     for (i = 0; i < plugins->count; i++) {",
          "399:  rpmPlugin plugin = plugins->plugins[i];",
          "400:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_prepare);",
          "402:      rpmlog(RPMLOG_ERR, \"Plugin %s: hook fsm_file_prepare failed\\n\", plugin->name);",
          "403:      rc = RPMRC_FAIL;",
          "404:  }",
          "405:     }",
          "407:     return rc;",
          "408: }",
          "",
          "[Removed Lines]",
          "401:  if (hookFunc && hookFunc(plugin, fi, fd, path, dest, file_mode, op) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "409:     char *apath = abspath(fi, path);",
          "414:  if (hookFunc && hookFunc(plugin, fi, fd, apath, dest, file_mode, op) == RPMRC_FAIL) {",
          "419:     free(apath);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35195684d29f495bfd982516044e05deed832b6e",
      "candidate_info": {
        "commit_hash": "35195684d29f495bfd982516044e05deed832b6e",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/35195684d29f495bfd982516044e05deed832b6e",
        "files": [
          "lib/fsm.c",
          "lib/rpmplugin.h",
          "lib/rpmplugins.c",
          "lib/rpmplugins.h",
          "plugins/fapolicyd.c",
          "plugins/fsverity.c",
          "plugins/ima.c",
          "plugins/selinux.c"
        ],
        "message": "Pass file descriptor to file prepare plugin hook, use when possible\n\nSadly the thing that allegedly makes things better mostly just makes\nthings more complicated as symlinks can't be opened, so we'll now have\nto deal with both cases in plugins too. To make matters worse, most\nAPIs out there support either an fd or a path, but very few support\nthe *at() style dirfd + basename approach so plugins are stuck with\nabsolute paths for now.\n\nThis is of course a plugin API/ABI change too.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c",
          "lib/rpmplugin.h||lib/rpmplugin.h",
          "lib/rpmplugins.c||lib/rpmplugins.c",
          "lib/rpmplugins.h||lib/rpmplugins.h",
          "plugins/fapolicyd.c||plugins/fapolicyd.c",
          "plugins/fsverity.c||plugins/fsverity.c",
          "plugins/ima.c||plugins/ima.c",
          "plugins/selinux.c||plugins/selinux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:     }",
          "349:     if (!rc) {",
          "351:     }",
          "",
          "[Removed Lines]",
          "350:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
          "",
          "[Added Lines]",
          "350:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, *fdp, dn, dn, mode, op);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:     }",
          "738:     if (!rc) {",
          "739:  rc = rpmpluginsCallFsmFilePrepare(plugins, fi,",
          "741:        st->st_mode, action);",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:        path, dest,",
          "",
          "[Added Lines]",
          "740:        fd, path, dest,",
          "",
          "---------------"
        ],
        "lib/rpmplugin.h||lib/rpmplugin.h": [
          "File: lib/rpmplugin.h -> lib/rpmplugin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         const char* path, mode_t file_mode,",
          "58:         rpmFsmOp op, int res);",
          "59: typedef rpmRC (*plugin_fsm_file_prepare_func)(rpmPlugin plugin, rpmfi fi,",
          "61:            const char *dest,",
          "62:            mode_t file_mode, rpmFsmOp op);",
          "",
          "[Removed Lines]",
          "60:            const char* path,",
          "",
          "[Added Lines]",
          "60:            int fd, const char* path,",
          "",
          "---------------"
        ],
        "lib/rpmplugins.c||lib/rpmplugins.c": [
          "File: lib/rpmplugins.c -> lib/rpmplugins.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388: }",
          "390: rpmRC rpmpluginsCallFsmFilePrepare(rpmPlugins plugins, rpmfi fi,",
          "392:        mode_t file_mode, rpmFsmOp op)",
          "393: {",
          "394:     plugin_fsm_file_prepare_func hookFunc;",
          "",
          "[Removed Lines]",
          "391:        const char *path, const char *dest,",
          "",
          "[Added Lines]",
          "391:        int fd, const char *path, const char *dest,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     for (i = 0; i < plugins->count; i++) {",
          "399:  rpmPlugin plugin = plugins->plugins[i];",
          "400:  RPMPLUGINS_SET_HOOK_FUNC(fsm_file_prepare);",
          "402:      rpmlog(RPMLOG_ERR, \"Plugin %s: hook fsm_file_prepare failed\\n\", plugin->name);",
          "403:      rc = RPMRC_FAIL;",
          "404:  }",
          "",
          "[Removed Lines]",
          "401:  if (hookFunc && hookFunc(plugin, fi, path, dest, file_mode, op) == RPMRC_FAIL) {",
          "",
          "[Added Lines]",
          "401:  if (hookFunc && hookFunc(plugin, fi, fd, path, dest, file_mode, op) == RPMRC_FAIL) {",
          "",
          "---------------"
        ],
        "lib/rpmplugins.h||lib/rpmplugins.h": [
          "File: lib/rpmplugins.h -> lib/rpmplugins.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: RPM_GNUC_INTERNAL",
          "166: rpmRC rpmpluginsCallFsmFilePrepare(rpmPlugins plugins, rpmfi fi,",
          "168:                                    mode_t mode, rpmFsmOp op);",
          "170: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "167:                                    const char *path, const char *dest,",
          "",
          "[Added Lines]",
          "168:                                    int fd, const char *path, const char *dest,",
          "",
          "---------------"
        ],
        "plugins/fapolicyd.c||plugins/fapolicyd.c": [
          "File: plugins/fapolicyd.c -> plugins/fapolicyd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: }",
          "147: static rpmRC fapolicyd_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "149:                                         mode_t file_mode, rpmFsmOp op)",
          "150: {",
          "",
          "[Removed Lines]",
          "148:                                         const char *path, const char *dest,",
          "",
          "[Added Lines]",
          "148:                                         int fd, const char *path,",
          "149:      const char *dest,",
          "",
          "---------------"
        ],
        "plugins/fsverity.c||plugins/fsverity.c": [
          "File: plugins/fsverity.c -> plugins/fsverity.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:            const char *path, const char *dest,",
          "38:            mode_t file_mode, rpmFsmOp op)",
          "39: {",
          "",
          "[Removed Lines]",
          "36: static rpmRC fsverity_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "",
          "[Added Lines]",
          "36: static rpmRC fsverity_fsm_file_prepare(rpmPlugin plugin, rpmfi fi, int fd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     size_t len;",
          "43:     uint16_t algo = 0;",
          "44:     int rc = RPMRC_OK;",
          "46:     rpmFileAction action = XFO_ACTION(op);",
          "47:     char *buffer;",
          "",
          "[Removed Lines]",
          "45:     int fd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     rpmlog(RPMLOG_DEBUG, \"applying signature: %s\\n\", buffer);",
          "99:     free(buffer);",
          "",
          "[Removed Lines]",
          "101:     fd = open(path, O_RDONLY);",
          "102:     if (fd < 0) {",
          "103:  rpmlog(RPMLOG_ERR, \"failed to open path %s\\n\", path);",
          "104:  goto exit;",
          "105:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:     rpmlog(RPMLOG_DEBUG, \"fsverity enabled signature for: path %s dest %s\\n\",",
          "164:     path, dest);",
          "166: exit:",
          "167:     return rc;",
          "168: }",
          "",
          "[Removed Lines]",
          "165:     close(fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "plugins/ima.c||plugins/ima.c": [
          "File: plugins/ima.c -> plugins/ima.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  return (memcmp(fsig, &zero_hdr, sizeof(zero_hdr)) == 0);",
          "43: }",
          "46:                                   const char *path,",
          "47:                                   const char *dest,",
          "48:                                   mode_t file_mode, rpmFsmOp op)",
          "",
          "[Removed Lines]",
          "45: static rpmRC ima_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "",
          "[Added Lines]",
          "45: static rpmRC ima_fsm_file_prepare(rpmPlugin plugin, rpmfi fi, int fd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  fsig = rpmfiFSignature(fi, &len);",
          "70:  if (fsig && (check_zero_hdr(fsig, len) == 0)) {",
          "72:          rpmlog(RPMLOG_ERR,",
          "73:    \"ima: could not apply signature on '%s': %s\\n\",",
          "74:    path, strerror(errno));",
          "",
          "[Removed Lines]",
          "71:      if (lsetxattr(path, XATTR_NAME_IMA, fsig, len, 0) < 0) {",
          "",
          "[Added Lines]",
          "71:      int xx;",
          "72:      if (fd >= 0)",
          "73:   xx = fsetxattr(fd, XATTR_NAME_IMA, fsig, len, 0);",
          "74:      else",
          "75:   xx = lsetxattr(path, XATTR_NAME_IMA, fsig, len, 0);",
          "76:      if (xx < 0) {",
          "",
          "---------------"
        ],
        "plugins/selinux.c||plugins/selinux.c": [
          "File: plugins/selinux.c -> plugins/selinux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     return rc;",
          "156: }",
          "159:      const char *path, const char *dest,",
          "160:             mode_t file_mode, rpmFsmOp op)",
          "161: {",
          "",
          "[Removed Lines]",
          "158: static rpmRC selinux_fsm_file_prepare(rpmPlugin plugin, rpmfi fi,",
          "",
          "[Added Lines]",
          "158: static rpmRC selinux_fsm_file_prepare(rpmPlugin plugin, rpmfi fi, int fd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     if (sehandle && !XFA_SKIPPING(action)) {",
          "166:  char *scon = NULL;",
          "167:  if (selabel_lookup_raw(sehandle, &scon, dest, file_mode) == 0) {",
          "170:      if (conrc == 0 || (conrc < 0 && errno == EOPNOTSUPP))",
          "171:   rc = RPMRC_OK;",
          "176:      freecon(scon);",
          "177:  } else {",
          "",
          "[Removed Lines]",
          "168:      int conrc = lsetfilecon(path, scon);",
          "173:      rpmlog(loglvl(rc != RPMRC_OK), \"lsetfilecon: (%s, %s) %s\\n\",",
          "174:          path, scon, (conrc < 0 ? strerror(errno) : \"\"));",
          "",
          "[Added Lines]",
          "168:      int conrc;",
          "169:      if (fd >= 0)",
          "170:   conrc = fsetfilecon(fd, scon);",
          "171:      else",
          "172:   conrc = lsetfilecon(path, scon);",
          "177:      rpmlog(loglvl(rc != RPMRC_OK), \"lsetfilecon: (%d %s, %s) %s\\n\",",
          "178:          fd, path, scon, (conrc < 0 ? strerror(errno) : \"\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69fe9a008f7f2db7a3aae34aca9f7ef34596a0a0",
      "candidate_info": {
        "commit_hash": "69fe9a008f7f2db7a3aae34aca9f7ef34596a0a0",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/69fe9a008f7f2db7a3aae34aca9f7ef34596a0a0",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Move file-post plugin hook back to commit stage\n\nThis isn't ideal from the sense that some files may get a success post\ncall while something later can still fail, but things get even weirder\nwith doing it in a separate round where things could fail because of\na vanished directory and then we'd still need to call the plugin hook\nwith some result. Also, this lets us skip the backwards walk on the\nnormal case of success, which is nice.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "977:   fp->stage = FILE_COMMIT;",
          "978:      else",
          "990:      rpmpluginsCallFsmFilePost(plugins, fi, fp->fpath,",
          "991:           fp->sb.st_mode, fp->action, rc);",
          "992:  }",
          "997:  }",
          "998:     }",
          "",
          "[Removed Lines]",
          "980:  }",
          "981:     }",
          "982:     fi = rpmfiFree(fi);",
          "985:     fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "986:     while ((fx = rpmfiNext(fi)) >= 0) {",
          "987:  struct filedata_s *fp = &fdata[fx];",
          "989:  if (fp->stage) {",
          "995:  if (rc && fp->stage > FILE_NONE && !fp->skip) {",
          "996:      (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "",
          "[Added Lines]",
          "985:     }",
          "986:     fi = rpmfiFree(fi);",
          "989:     if (rc) {",
          "990:  fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "991:  while ((fx = rpmfiNext(fi)) >= 0) {",
          "992:      struct filedata_s *fp = &fdata[fx];",
          "994:      if (fp->stage > FILE_NONE && !fp->skip) {",
          "995:   (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "996:      }",
          "",
          "---------------"
        ]
      }
    }
  ]
}