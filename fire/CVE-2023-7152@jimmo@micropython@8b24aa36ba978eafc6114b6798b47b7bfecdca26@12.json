{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec5b80bdd5d5cf09bb9561929da33658dc9ad54b",
      "candidate_info": {
        "commit_hash": "ec5b80bdd5d5cf09bb9561929da33658dc9ad54b",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/ec5b80bdd5d5cf09bb9561929da33658dc9ad54b",
        "files": [
          "py/mpz.c",
          "py/mpz.h"
        ],
        "message": "py/mpz: Remove mpz_set from public API.\n\nIt's unused outside of mpz.c.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
        "before_after_code_files": [
          "py/mpz.c||py/mpz.c",
          "py/mpz.h||py/mpz.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "py/mpz.c||py/mpz.c": [
          "File: py/mpz.c -> py/mpz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:     mpz_need_dig(dest, src->len);",
          "645:     dest->neg = src->neg;",
          "646:     dest->len = src->len;",
          "",
          "[Removed Lines]",
          "643: void mpz_set(mpz_t *dest, const mpz_t *src) {",
          "",
          "[Added Lines]",
          "643: STATIC void mpz_set(mpz_t *dest, const mpz_t *src) {",
          "",
          "---------------"
        ],
        "py/mpz.h||py/mpz.h": [
          "File: py/mpz.h -> py/mpz.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: void mpz_init_fixed_from_int(mpz_t *z, mpz_dig_t *dig, size_t dig_alloc, mp_int_t val);",
          "108: void mpz_deinit(mpz_t *z);",
          "111: void mpz_set_from_int(mpz_t *z, mp_int_t src);",
          "112: void mpz_set_from_ll(mpz_t *z, long long i, bool is_signed);",
          "113: #if MICROPY_PY_BUILTINS_FLOAT",
          "",
          "[Removed Lines]",
          "110: void mpz_set(mpz_t *dest, const mpz_t *src);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5552896ca8064a71446030bd9524cff7558a0f83",
      "candidate_info": {
        "commit_hash": "5552896ca8064a71446030bd9524cff7558a0f83",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/5552896ca8064a71446030bd9524cff7558a0f83",
        "files": [
          "ports/esp32/mpconfigport.h"
        ],
        "message": "esp32/mpconfigport: Enable MICROPY_PY_HASHLIB_MD5.\n\nSigned-off-by: IhorNehrutsa <Ihor.Nehrutsa@gmail.com>",
        "before_after_code_files": [
          "ports/esp32/mpconfigport.h||ports/esp32/mpconfigport.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/esp32/mpconfigport.h||ports/esp32/mpconfigport.h": [
          "File: ports/esp32/mpconfigport.h -> ports/esp32/mpconfigport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: #define MICROPY_BLUETOOTH_NIMBLE            (1)",
          "102: #define MICROPY_BLUETOOTH_NIMBLE_BINDINGS_ONLY (1)",
          "103: #endif",
          "104: #define MICROPY_PY_HASHLIB_SHA1             (1)",
          "105: #define MICROPY_PY_HASHLIB_SHA256           (1)",
          "106: #define MICROPY_PY_CRYPTOLIB                (1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #define MICROPY_PY_HASHLIB_MD5              (1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f3cc3649cd5c408d6161abba4c0e6390a8ea7640",
      "candidate_info": {
        "commit_hash": "f3cc3649cd5c408d6161abba4c0e6390a8ea7640",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/f3cc3649cd5c408d6161abba4c0e6390a8ea7640",
        "files": [
          "py/mpconfig.h"
        ],
        "message": "py/mpconfig.h: Allow per-function super optimisations.\n\nProvides a default implementation of a macro that will enable `-O3`,\nand enable this by default on level 1, 2, and 3.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
        "before_after_code_files": [
          "py/mpconfig.h||py/mpconfig.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "py/mpconfig.h||py/mpconfig.h": [
          "File: py/mpconfig.h -> py/mpconfig.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1791: #ifndef MICROPY_PERFORMANCE_CRITICAL_LEVEL_1",
          "1793: #endif",
          "1797: #ifndef MICROPY_PERFORMANCE_CRITICAL_LEVEL_2",
          "1799: #endif",
          "1803: #ifndef MICROPY_PERFORMANCE_CRITICAL_LEVEL_3",
          "1805: #endif",
          "",
          "[Removed Lines]",
          "1792: #define MICROPY_PERFORMANCE_CRITICAL_LEVEL_1(f) f",
          "1798: #define MICROPY_PERFORMANCE_CRITICAL_LEVEL_2(f) f",
          "1804: #define MICROPY_PERFORMANCE_CRITICAL_LEVEL_3(f) f",
          "",
          "[Added Lines]",
          "1789: #ifndef MICROPY_APPLY_COMPILER_OPTIMISATIONS",
          "1790: #if defined(__GNUC__) && !defined(__clang__)",
          "1792: #define MICROPY_APPLY_COMPILER_OPTIMISATIONS(f) __attribute__((optimize(\"O2\"))) f",
          "1793: #else",
          "1795: #define MICROPY_APPLY_COMPILER_OPTIMISATIONS(f) f",
          "1796: #endif",
          "1797: #endif",
          "1802: #define MICROPY_PERFORMANCE_CRITICAL_LEVEL_1(f) MICROPY_APPLY_COMPILER_OPTIMISATIONS(f)",
          "1808: #define MICROPY_PERFORMANCE_CRITICAL_LEVEL_2(f) MICROPY_APPLY_COMPILER_OPTIMISATIONS(f)",
          "1814: #define MICROPY_PERFORMANCE_CRITICAL_LEVEL_3(f) MICROPY_APPLY_COMPILER_OPTIMISATIONS(f)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f34e27f178afe707062173b9394cd994ab8c82cc",
      "candidate_info": {
        "commit_hash": "f34e27f178afe707062173b9394cd994ab8c82cc",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/f34e27f178afe707062173b9394cd994ab8c82cc",
        "files": [
          "ports/mimxrt/mpbthciport.c"
        ],
        "message": "mimxrt/mpbthciport: Add missing extmod/modmachine.h header.\n\nInclude extmod/modmachine.h for machine_uart_type declaration.\n\nSigned-off-by: iabdalkader <i.abdalkader@gmail.com>",
        "before_after_code_files": [
          "ports/mimxrt/mpbthciport.c||ports/mimxrt/mpbthciport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/mimxrt/mpbthciport.c||ports/mimxrt/mpbthciport.c": [
          "File: ports/mimxrt/mpbthciport.c -> ports/mimxrt/mpbthciport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"py/stream.h\"",
          "30: #include \"py/mphal.h\"",
          "31: #include \"extmod/modbluetooth.h\"",
          "32: #include \"extmod/mpbthci.h\"",
          "33: #include \"shared/runtime/softtimer.h\"",
          "34: #include \"modmachine.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"extmod/modmachine.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49d0c22b11732da3be622d7c550ecb4249bf17ac",
      "candidate_info": {
        "commit_hash": "49d0c22b11732da3be622d7c550ecb4249bf17ac",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/49d0c22b11732da3be622d7c550ecb4249bf17ac",
        "files": [
          "ports/stm32/mboot/main.c"
        ],
        "message": "stm32/mboot: Expand device descriptor to make it easier to understand.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/stm32/mboot/main.c||ports/stm32/mboot/main.c": [
          "File: ports/stm32/mboot/main.c -> ports/stm32/mboot/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1024: };",
          "1026: static const uint8_t dev_descr[0x12] = {",
          "1028:     LOBYTE(MBOOT_USB_VID), HIBYTE(MBOOT_USB_VID),",
          "1029:     LOBYTE(MBOOT_USB_PID), HIBYTE(MBOOT_USB_PID),",
          "1031: };",
          "",
          "[Removed Lines]",
          "1027:     0x12, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40,",
          "1030:     0x00, 0x22, 0x01, 0x02, 0x03, 0x01",
          "",
          "[Added Lines]",
          "1027:     0x12, // bLength",
          "1028:     0x01, // bDescriptorType: Device",
          "1029:     0x00, 0x01, // USB version: 1.00",
          "1030:     0x00, // bDeviceClass",
          "1031:     0x00, // bDeviceSubClass",
          "1032:     0x00, // bDeviceProtocol",
          "1033:     0x40, // bMaxPacketSize",
          "1036:     0x00, 0x22, // bcdDevice: 22.00",
          "1037:     0x01, // iManufacturer",
          "1038:     0x02, // iProduct",
          "1039:     0x03, // iSerialNumber",
          "1040:     0x01, // bNumConfigurations: 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}