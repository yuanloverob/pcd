{
  "cve_id": "CVE-2023-52426",
  "cve_desc": "libexpat through 2.5.0 allows recursive XML Entity Expansion if XML_DTD is undefined at compile time.",
  "repo": "libexpat/libexpat",
  "patch_hash": "0f075ec8ecb5e43f8fdca5182f8cca4703da0404",
  "patch_info": {
    "commit_hash": "0f075ec8ecb5e43f8fdca5182f8cca4703da0404",
    "repo": "libexpat/libexpat",
    "commit_url": "https://github.com/libexpat/libexpat/commit/0f075ec8ecb5e43f8fdca5182f8cca4703da0404",
    "files": [
      "expat/CMakeLists.txt",
      "expat/lib/expat.h",
      "expat/lib/internal.h",
      "expat/lib/libexpat.def.cmake",
      "expat/lib/xmlparse.c",
      "expat/xmlwf/xmlwf.c"
    ],
    "message": "lib|xmlwf|cmake: Extend scope of billion laughs attack protection\n\n.. from \"defined(XML_DTD)\" to \"defined(XML_DTD) || XML_GE==1\".",
    "before_after_code_files": [
      "expat/lib/expat.h||expat/lib/expat.h",
      "expat/lib/internal.h||expat/lib/internal.h",
      "expat/lib/libexpat.def.cmake||expat/lib/libexpat.def.cmake",
      "expat/lib/xmlparse.c||expat/lib/xmlparse.c",
      "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c"
    ]
  },
  "patch_diff": {
    "expat/lib/expat.h||expat/lib/expat.h": [
      "File: expat/lib/expat.h -> expat/lib/expat.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1038: XMLPARSEAPI(const XML_Feature *)",
      "1039: XML_GetFeatureList(void);",
      "1043: XMLPARSEAPI(XML_Bool)",
      "1044: XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
      "1045:     XML_Parser parser, float maximumAmplificationFactor);",
      "1048: XMLPARSEAPI(XML_Bool)",
      "1049: XML_SetBillionLaughsAttackProtectionActivationThreshold(",
      "1050:     XML_Parser parser, unsigned long long activationThresholdBytes);",
      "",
      "[Removed Lines]",
      "1041: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "1041: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ],
    "expat/lib/internal.h||expat/lib/internal.h": [
      "File: expat/lib/internal.h -> expat/lib/internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "154: void _INTERNAL_trim_to_complete_utf8_characters(const char *from,",
      "155:                                                 const char **fromLimRef);",
      "158: unsigned long long testingAccountingGetCountBytesDirect(XML_Parser parser);",
      "159: unsigned long long testingAccountingGetCountBytesIndirect(XML_Parser parser);",
      "160: const char *unsignedCharToPrintable(unsigned char c);",
      "",
      "[Removed Lines]",
      "157: #if defined(XML_DTD)",
      "",
      "[Added Lines]",
      "157: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ],
    "expat/lib/libexpat.def.cmake||expat/lib/libexpat.def.cmake": [
      "File: expat/lib/libexpat.def.cmake -> expat/lib/libexpat.def.cmake",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   XML_SetHashSalt @67",
      "76: ; internal @68 removed with version 2.3.1",
      "77: ; added with version 2.4.0",
      "",
      "[Removed Lines]",
      "78: @_EXPAT_COMMENT_DTD@ XML_SetBillionLaughsAttackProtectionActivationThreshold @69",
      "79: @_EXPAT_COMMENT_DTD@ XML_SetBillionLaughsAttackProtectionMaximumAmplification @70",
      "",
      "[Added Lines]",
      "78: @_EXPAT_COMMENT_DTD_OR_GE@ XML_SetBillionLaughsAttackProtectionActivationThreshold @69",
      "79: @_EXPAT_COMMENT_DTD_OR_GE@ XML_SetBillionLaughsAttackProtectionMaximumAmplification @70",
      "",
      "---------------"
    ],
    "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
      "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "417: };",
      "420: typedef unsigned long long XmlBigCount;",
      "421: typedef struct accounting {",
      "422:   XmlBigCount countBytesDirect;",
      "",
      "[Removed Lines]",
      "419: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "419: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "571: static void parserInit(XML_Parser parser, const XML_Char *encodingName);",
      "574: static float accountingGetCurrentAmplification(XML_Parser rootParser);",
      "575: static void accountingReportStats(XML_Parser originParser, const char *epilog);",
      "576: static void accountingOnAbort(XML_Parser originParser);",
      "",
      "[Removed Lines]",
      "573: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "573: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "718:   enum XML_ParamEntityParsing m_paramEntityParsing;",
      "719: #endif",
      "720:   unsigned long m_hash_secret_salt;",
      "722:   ACCOUNTING m_accounting;",
      "723:   ENTITY_STATS m_entity_stats;",
      "724: #endif",
      "",
      "[Removed Lines]",
      "721: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "721: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1178: #endif",
      "1179:   parser->m_hash_secret_salt = 0;",
      "1182:   memset(&parser->m_accounting, 0, sizeof(ACCOUNTING));",
      "1183:   parser->m_accounting.debugLevel = getDebugLevel(\"EXPAT_ACCOUNTING_DEBUG\", 0u);",
      "1184:   parser->m_accounting.maximumAmplificationFactor",
      "",
      "[Removed Lines]",
      "1181: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "1181: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2534: #ifdef XML_ATTR_INFO",
      "2535:     {XML_FEATURE_ATTR_INFO, XML_L(\"XML_ATTR_INFO\"), 0},",
      "2536: #endif",
      "2539:     {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
      "2540:      XML_L(\"XML_BLAP_MAX_AMP\"),",
      "2541:      (long int)",
      "",
      "[Removed Lines]",
      "2537: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2537: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2550:   return features;",
      "2551: }",
      "2554: XML_Bool XMLCALL",
      "2555: XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
      "2556:     XML_Parser parser, float maximumAmplificationFactor) {",
      "",
      "[Removed Lines]",
      "2553: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2554: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2658:   int tok = XmlContentTok(parser->m_encoding, start, end, &next);",
      "2659:   switch (tok) {",
      "2660:   case XML_TOK_BOM:",
      "2662:     if (! accountingDiffTolerated(parser, tok, start, next, __LINE__,",
      "2663:                                   XML_ACCOUNT_DIRECT)) {",
      "2664:       accountingOnAbort(parser);",
      "2665:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
      "2666:     }",
      "2670:        i.e. externalEntityInitProcessor3, to pass control directly to",
      "",
      "[Removed Lines]",
      "2661: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2662: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2778:   for (;;) {",
      "2780:     int tok = XmlContentTok(enc, s, end, &next);",
      "2782:     const char *accountAfter",
      "2783:         = ((tok == XML_TOK_TRAILING_RSQB) || (tok == XML_TOK_TRAILING_CR))",
      "2784:               ? (haveMore ? s /* i.e. 0 bytes */ : end)",
      "",
      "[Removed Lines]",
      "2781: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2782: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2844:       XML_Char ch = (XML_Char)XmlPredefinedEntityName(",
      "2845:           enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);",
      "2846:       if (ch) {",
      "2851:         accountingDiffTolerated(parser, tok, (char *)&ch,",
      "2852:                                 ((char *)&ch) + sizeof(XML_Char), __LINE__,",
      "2853:                                 XML_ACCOUNT_ENTITY_EXPANSION);",
      "2855:         if (parser->m_characterDataHandler)",
      "2856:           parser->m_characterDataHandler(parser->m_handlerArg, &ch, 1);",
      "2857:         else if (parser->m_defaultHandler)",
      "",
      "[Removed Lines]",
      "2847: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "2848: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4053:   for (;;) {",
      "4055:     int tok = XmlCdataSectionTok(enc, s, end, &next);",
      "4057:     if (! accountingDiffTolerated(parser, tok, s, next, __LINE__, account)) {",
      "4058:       accountingOnAbort(parser);",
      "4059:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
      "",
      "[Removed Lines]",
      "4056: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4057: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "4207:   tok = XmlIgnoreSectionTok(enc, s, end, &next);",
      "4209:   if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
      "4210:                                 XML_ACCOUNT_DIRECT)) {",
      "4211:     accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "4208: #  ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4209: #  if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "4297:   const XML_Char *storedversion = NULL;",
      "4298:   int standalone = -1;",
      "4301:   if (! accountingDiffTolerated(parser, XML_TOK_XML_DECL, s, next, __LINE__,",
      "4302:                                 XML_ACCOUNT_DIRECT)) {",
      "4303:     accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "4300: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4301: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "4504:        is not valid to have multiple BOMs.",
      "4506:     else if (tok == XML_TOK_BOM) {",
      "4508:       if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
      "4509:                                     XML_ACCOUNT_DIRECT)) {",
      "4510:         accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "4507: #  ifdef XML_DTD",
      "",
      "[Added Lines]",
      "4508: #  if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "4720:       }",
      "4721:     }",
      "4722:     role = XmlTokenRole(&parser->m_prologState, tok, s, next, enc);",
      "4724:     switch (role) {",
      "4725:     case XML_ROLE_INSTANCE_START: // bytes accounted in contentProcessor",
      "4726:     case XML_ROLE_XML_DECL:       // bytes accounted in processXmlDecl",
      "4728:       break;",
      "4729:     default:",
      "4730:       if (! accountingDiffTolerated(parser, tok, s, next, __LINE__, account)) {",
      "",
      "[Removed Lines]",
      "4723: #ifdef XML_DTD",
      "4727:     case XML_ROLE_TEXT_DECL:      // bytes accounted in processXmlDecl",
      "",
      "[Added Lines]",
      "4724: #if defined(XML_DTD) || XML_GE == 1",
      "4728: #  ifdef XML_DTD",
      "4729:     case XML_ROLE_TEXT_DECL: // bytes accounted in processXmlDecl",
      "4730: #  endif",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "5661:   for (;;) {",
      "5662:     const char *next = NULL;",
      "5663:     int tok = XmlPrologTok(parser->m_encoding, s, end, &next);",
      "5665:     if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
      "5666:                                   XML_ACCOUNT_DIRECT)) {",
      "5667:       accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "5664: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5667: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "5741:       return XML_ERROR_NO_MEMORY;",
      "5742:   }",
      "5743:   entity->open = XML_TRUE;",
      "5745:   entityTrackingOnOpen(parser, entity, __LINE__);",
      "5746: #endif",
      "5747:   entity->processed = 0;",
      "",
      "[Removed Lines]",
      "5744: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5747: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "5775:       entity->processed = (int)(next - textStart);",
      "5776:       parser->m_processor = internalEntityProcessor;",
      "5777:     } else {",
      "5779:       entityTrackingOnClose(parser, entity, __LINE__);",
      "5781:       entity->open = XML_FALSE;",
      "5782:       parser->m_openInternalEntities = openEntity->next;",
      "",
      "[Removed Lines]",
      "5778: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5781: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "5826:     return result;",
      "5827:   }",
      "5830:   entityTrackingOnClose(parser, entity, __LINE__);",
      "5831: #endif",
      "5832:   entity->open = XML_FALSE;",
      "",
      "[Removed Lines]",
      "5829: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5832: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "5905:     const char *next",
      "5907:     int tok = XmlAttributeValueTok(enc, ptr, end, &next);",
      "5909:     if (! accountingDiffTolerated(parser, tok, ptr, next, __LINE__, account)) {",
      "5910:       accountingOnAbort(parser);",
      "5911:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
      "",
      "[Removed Lines]",
      "5908: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5911: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "5970:       XML_Char ch = (XML_Char)XmlPredefinedEntityName(",
      "5971:           enc, ptr + enc->minBytesPerChar, next - enc->minBytesPerChar);",
      "5972:       if (ch) {",
      "5977:         accountingDiffTolerated(parser, tok, (char *)&ch,",
      "5978:                                 ((char *)&ch) + sizeof(XML_Char), __LINE__,",
      "5979:                                 XML_ACCOUNT_ENTITY_EXPANSION);",
      "5981:         if (! poolAppendChar(pool, ch))",
      "5982:           return XML_ERROR_NO_MEMORY;",
      "5983:         break;",
      "",
      "[Removed Lines]",
      "5973: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "5976: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "6055:         enum XML_Error result;",
      "6056:         const XML_Char *textEnd = entity->textPtr + entity->textLen;",
      "6057:         entity->open = XML_TRUE;",
      "6059:         entityTrackingOnOpen(parser, entity, __LINE__);",
      "6060: #endif",
      "6061:         result = appendAttributeValue(parser, parser->m_internalEncoding,",
      "6062:                                       isCdata, (const char *)entity->textPtr,",
      "6063:                                       (const char *)textEnd, pool,",
      "6064:                                       XML_ACCOUNT_ENTITY_EXPANSION);",
      "6066:         entityTrackingOnClose(parser, entity, __LINE__);",
      "6067: #endif",
      "6068:         entity->open = XML_FALSE;",
      "",
      "[Removed Lines]",
      "6058: #ifdef XML_DTD",
      "6065: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "6061: #if defined(XML_DTD) || XML_GE == 1",
      "6068: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "6119:     int tok = XmlEntityValueTok(enc, entityTextPtr, entityTextEnd, &next);",
      "6122:     if (! accountingDiffTolerated(parser, tok, entityTextPtr, next, __LINE__,",
      "6123:                                   account)) {",
      "6124:       accountingOnAbort(parser);",
      "",
      "[Removed Lines]",
      "6121: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "6124: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "7669:   return result;",
      "7670: }",
      "7674: static float",
      "7675: accountingGetCurrentAmplification(XML_Parser rootParser) {",
      "",
      "[Removed Lines]",
      "7672: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "7675: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ],
    "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c": [
      "File: expat/xmlwf/xmlwf.c -> expat/xmlwf/xmlwf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1096:             \" (needs a floating point number greater or equal than 1.0)\"));",
      "1097:         exit(XMLWF_EXIT_USAGE_ERROR);",
      "1098:       }",
      "1102: #endif",
      "1103:       break;",
      "1104:     }",
      "",
      "[Removed Lines]",
      "1099: #ifndef XML_DTD",
      "1100:       ftprintf(stderr, T(\"Warning: Given amplification limit ignored\") T(",
      "1101:                            \", xmlwf has been compiled without DTD support.\\n\"));",
      "",
      "[Added Lines]",
      "1099: #if ! defined(XML_DTD) && XML_GE == 0",
      "1100:       ftprintf(stderr,",
      "1101:                T(\"Warning: Given amplification limit ignored\")",
      "1102:                    T(\", xmlwf has been compiled without DTD/GE support.\\n\"));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1117:         exit(XMLWF_EXIT_USAGE_ERROR);",
      "1118:       }",
      "1119:       attackThresholdGiven = XML_TRUE;",
      "1123: #endif",
      "1124:       break;",
      "1125:     }",
      "",
      "[Removed Lines]",
      "1120: #ifndef XML_DTD",
      "1121:       ftprintf(stderr, T(\"Warning: Given attack threshold ignored\") T(",
      "1122:                            \", xmlwf has been compiled without DTD support.\\n\"));",
      "",
      "[Added Lines]",
      "1121: #if ! defined(XML_DTD) && XML_GE == 0",
      "1122:       ftprintf(stderr,",
      "1123:                T(\"Warning: Given attack threshold ignored\")",
      "1124:                    T(\", xmlwf has been compiled without DTD/GE support.\\n\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1155:     }",
      "1157:     if (attackMaximumAmplification != -1.0f) {",
      "1159:       XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
      "1160:           parser, attackMaximumAmplification);",
      "1161: #endif",
      "1162:     }",
      "1163:     if (attackThresholdGiven) {",
      "1165:       XML_SetBillionLaughsAttackProtectionActivationThreshold(",
      "1166:           parser, attackThresholdBytes);",
      "1167: #else",
      "",
      "[Removed Lines]",
      "1158: #ifdef XML_DTD",
      "1164: #ifdef XML_DTD",
      "",
      "[Added Lines]",
      "1160: #if defined(XML_DTD) || XML_GE == 1",
      "1166: #if defined(XML_DTD) || XML_GE == 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "caa27198637683b15d810737bb8a6a81af19bfa5",
      "candidate_info": {
        "commit_hash": "caa27198637683b15d810737bb8a6a81af19bfa5",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/caa27198637683b15d810737bb8a6a81af19bfa5",
        "files": [
          "expat/lib/expat.h",
          "expat/lib/internal.h",
          "expat/lib/xmlparse.c",
          "expat/tests/acc_tests.c",
          "expat/tests/handlers.c",
          "expat/tests/runtests.c",
          "expat/xmlwf/xmlwf.c"
        ],
        "message": "Simplify \"defined(XML_DTD) || XML_GE == 1\" to \"XML_GE == 1\"",
        "before_after_code_files": [
          "expat/lib/expat.h||expat/lib/expat.h",
          "expat/lib/internal.h||expat/lib/internal.h",
          "expat/lib/xmlparse.c||expat/lib/xmlparse.c",
          "expat/tests/acc_tests.c||expat/tests/acc_tests.c",
          "expat/tests/handlers.c||expat/tests/handlers.c",
          "expat/tests/runtests.c||expat/tests/runtests.c",
          "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "expat/lib/expat.h||expat/lib/expat.h",
            "expat/lib/internal.h||expat/lib/internal.h",
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c",
            "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c"
          ],
          "candidate": [
            "expat/lib/expat.h||expat/lib/expat.h",
            "expat/lib/internal.h||expat/lib/internal.h",
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c",
            "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c"
          ]
        }
      },
      "candidate_diff": {
        "expat/lib/expat.h||expat/lib/expat.h": [
          "File: expat/lib/expat.h -> expat/lib/expat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038: XMLPARSEAPI(const XML_Feature *)",
          "1039: XML_GetFeatureList(void);",
          "1044: XMLPARSEAPI(XML_Bool)",
          "",
          "[Removed Lines]",
          "1041: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "1041: #if XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/lib/internal.h||expat/lib/internal.h": [
          "File: expat/lib/internal.h -> expat/lib/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: void _INTERNAL_trim_to_complete_utf8_characters(const char *from,",
          "155:                                                 const char **fromLimRef);",
          "158: unsigned long long testingAccountingGetCountBytesDirect(XML_Parser parser);",
          "159: unsigned long long testingAccountingGetCountBytesIndirect(XML_Parser parser);",
          "160: const char *unsignedCharToPrintable(unsigned char c);",
          "",
          "[Removed Lines]",
          "157: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "157: #if XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
          "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425: };",
          "428: typedef unsigned long long XmlBigCount;",
          "429: typedef struct accounting {",
          "430:   XmlBigCount countBytesDirect;",
          "",
          "[Removed Lines]",
          "427: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "427: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "583: static void parserInit(XML_Parser parser, const XML_Char *encodingName);",
          "586: static float accountingGetCurrentAmplification(XML_Parser rootParser);",
          "587: static void accountingReportStats(XML_Parser originParser, const char *epilog);",
          "588: static void accountingOnAbort(XML_Parser originParser);",
          "",
          "[Removed Lines]",
          "585: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "585: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "730:   enum XML_ParamEntityParsing m_paramEntityParsing;",
          "731: #endif",
          "732:   unsigned long m_hash_secret_salt;",
          "734:   ACCOUNTING m_accounting;",
          "735:   ENTITY_STATS m_entity_stats;",
          "736: #endif",
          "",
          "[Removed Lines]",
          "733: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "733: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1190: #endif",
          "1191:   parser->m_hash_secret_salt = 0;",
          "1194:   memset(&parser->m_accounting, 0, sizeof(ACCOUNTING));",
          "1195:   parser->m_accounting.debugLevel = getDebugLevel(\"EXPAT_ACCOUNTING_DEBUG\", 0u);",
          "1196:   parser->m_accounting.maximumAmplificationFactor",
          "",
          "[Removed Lines]",
          "1193: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "1193: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2546: #ifdef XML_ATTR_INFO",
          "2547:     {XML_FEATURE_ATTR_INFO, XML_L(\"XML_ATTR_INFO\"), 0},",
          "2548: #endif",
          "2552:     {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
          "",
          "[Removed Lines]",
          "2549: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "2549: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2563:   return features;",
          "2564: }",
          "2567: XML_Bool XMLCALL",
          "2568: XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
          "2569:     XML_Parser parser, float maximumAmplificationFactor) {",
          "",
          "[Removed Lines]",
          "2566: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "2566: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2671:   int tok = XmlContentTok(parser->m_encoding, start, end, &next);",
          "2672:   switch (tok) {",
          "2673:   case XML_TOK_BOM:",
          "2675:     if (! accountingDiffTolerated(parser, tok, start, next, __LINE__,",
          "2676:                                   XML_ACCOUNT_DIRECT)) {",
          "2677:       accountingOnAbort(parser);",
          "2678:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
          "2679:     }",
          "2683:        i.e. externalEntityInitProcessor3, to pass control directly to",
          "",
          "[Removed Lines]",
          "2674: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "2674: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2791:   for (;;) {",
          "2793:     int tok = XmlContentTok(enc, s, end, &next);",
          "2795:     const char *accountAfter",
          "2796:         = ((tok == XML_TOK_TRAILING_RSQB) || (tok == XML_TOK_TRAILING_CR))",
          "2797:               ? (haveMore ? s /* i.e. 0 bytes */ : end)",
          "",
          "[Removed Lines]",
          "2794: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "2794: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2857:       XML_Char ch = (XML_Char)XmlPredefinedEntityName(",
          "2858:           enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);",
          "2859:       if (ch) {",
          "2864:         accountingDiffTolerated(parser, tok, (char *)&ch,",
          "2865:                                 ((char *)&ch) + sizeof(XML_Char), __LINE__,",
          "2866:                                 XML_ACCOUNT_ENTITY_EXPANSION);",
          "2868:         if (parser->m_characterDataHandler)",
          "2869:           parser->m_characterDataHandler(parser->m_handlerArg, &ch, 1);",
          "2870:         else if (parser->m_defaultHandler)",
          "",
          "[Removed Lines]",
          "2860: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "2860: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4066:   for (;;) {",
          "4068:     int tok = XmlCdataSectionTok(enc, s, end, &next);",
          "4070:     if (! accountingDiffTolerated(parser, tok, s, next, __LINE__, account)) {",
          "4071:       accountingOnAbort(parser);",
          "4072:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
          "",
          "[Removed Lines]",
          "4069: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "4069: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4220:   tok = XmlIgnoreSectionTok(enc, s, end, &next);",
          "4222:   if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
          "4223:                                 XML_ACCOUNT_DIRECT)) {",
          "4224:     accountingOnAbort(parser);",
          "",
          "[Removed Lines]",
          "4221: #  if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "4221: #  if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4310:   const XML_Char *storedversion = NULL;",
          "4311:   int standalone = -1;",
          "4314:   if (! accountingDiffTolerated(parser, XML_TOK_XML_DECL, s, next, __LINE__,",
          "4315:                                 XML_ACCOUNT_DIRECT)) {",
          "4316:     accountingOnAbort(parser);",
          "",
          "[Removed Lines]",
          "4313: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "4313: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4517:        is not valid to have multiple BOMs.",
          "4519:     else if (tok == XML_TOK_BOM) {",
          "4521:       if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
          "4522:                                     XML_ACCOUNT_DIRECT)) {",
          "4523:         accountingOnAbort(parser);",
          "",
          "[Removed Lines]",
          "4520: #  if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "4520: #  if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4733:       }",
          "4734:     }",
          "4735:     role = XmlTokenRole(&parser->m_prologState, tok, s, next, enc);",
          "4737:     switch (role) {",
          "4738:     case XML_ROLE_INSTANCE_START: // bytes accounted in contentProcessor",
          "4739:     case XML_ROLE_XML_DECL:       // bytes accounted in processXmlDecl",
          "",
          "[Removed Lines]",
          "4736: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "4736: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5057:       break;",
          "5058:     case XML_ROLE_ENTITY_VALUE:",
          "5059:       if (dtd->keepProcessing) {",
          "5063:         enum XML_Error result",
          "",
          "[Removed Lines]",
          "5060: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "5060: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5708:   for (;;) {",
          "5709:     const char *next = NULL;",
          "5710:     int tok = XmlPrologTok(parser->m_encoding, s, end, &next);",
          "5712:     if (! accountingDiffTolerated(parser, tok, s, next, __LINE__,",
          "5713:                                   XML_ACCOUNT_DIRECT)) {",
          "5714:       accountingOnAbort(parser);",
          "",
          "[Removed Lines]",
          "5711: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "5711: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5788:       return XML_ERROR_NO_MEMORY;",
          "5789:   }",
          "5790:   entity->open = XML_TRUE;",
          "5792:   entityTrackingOnOpen(parser, entity, __LINE__);",
          "5793: #endif",
          "5794:   entity->processed = 0;",
          "",
          "[Removed Lines]",
          "5791: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "5791: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5822:       entity->processed = (int)(next - textStart);",
          "5823:       parser->m_processor = internalEntityProcessor;",
          "5824:     } else {",
          "5826:       entityTrackingOnClose(parser, entity, __LINE__);",
          "5828:       entity->open = XML_FALSE;",
          "5829:       parser->m_openInternalEntities = openEntity->next;",
          "",
          "[Removed Lines]",
          "5825: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "5825: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5873:     return result;",
          "5874:   }",
          "5877:   entityTrackingOnClose(parser, entity, __LINE__);",
          "5878: #endif",
          "5879:   entity->open = XML_FALSE;",
          "",
          "[Removed Lines]",
          "5876: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "5876: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5952:     const char *next",
          "5954:     int tok = XmlAttributeValueTok(enc, ptr, end, &next);",
          "5956:     if (! accountingDiffTolerated(parser, tok, ptr, next, __LINE__, account)) {",
          "5957:       accountingOnAbort(parser);",
          "5958:       return XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
          "",
          "[Removed Lines]",
          "5955: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "5955: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6017:       XML_Char ch = (XML_Char)XmlPredefinedEntityName(",
          "6018:           enc, ptr + enc->minBytesPerChar, next - enc->minBytesPerChar);",
          "6019:       if (ch) {",
          "6024:         accountingDiffTolerated(parser, tok, (char *)&ch,",
          "6025:                                 ((char *)&ch) + sizeof(XML_Char), __LINE__,",
          "6026:                                 XML_ACCOUNT_ENTITY_EXPANSION);",
          "6028:         if (! poolAppendChar(pool, ch))",
          "6029:           return XML_ERROR_NO_MEMORY;",
          "6030:         break;",
          "",
          "[Removed Lines]",
          "6020: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "6020: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6102:         enum XML_Error result;",
          "6103:         const XML_Char *textEnd = entity->textPtr + entity->textLen;",
          "6104:         entity->open = XML_TRUE;",
          "6106:         entityTrackingOnOpen(parser, entity, __LINE__);",
          "6107: #endif",
          "6108:         result = appendAttributeValue(parser, parser->m_internalEncoding,",
          "6109:                                       isCdata, (const char *)entity->textPtr,",
          "6110:                                       (const char *)textEnd, pool,",
          "6111:                                       XML_ACCOUNT_ENTITY_EXPANSION);",
          "6113:         entityTrackingOnClose(parser, entity, __LINE__);",
          "6114: #endif",
          "6115:         entity->open = XML_FALSE;",
          "",
          "[Removed Lines]",
          "6105: #if defined(XML_DTD) || XML_GE == 1",
          "6112: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "6105: #if XML_GE == 1",
          "6112: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6167:     int tok = XmlEntityValueTok(enc, entityTextPtr, entityTextEnd, &next);",
          "6170:     if (! accountingDiffTolerated(parser, tok, entityTextPtr, next, __LINE__,",
          "6171:                                   account)) {",
          "6172:       accountingOnAbort(parser);",
          "",
          "[Removed Lines]",
          "6169: #  if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "6169: #  if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7743:   return result;",
          "7744: }",
          "7748: static float",
          "7749: accountingGetCurrentAmplification(XML_Parser rootParser) {",
          "",
          "[Removed Lines]",
          "7746: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "7746: #if XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/tests/acc_tests.c||expat/tests/acc_tests.c": [
          "File: expat/tests/acc_tests.c -> expat/tests/acc_tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"handlers.h\"",
          "55: #include \"acc_tests.h\"",
          "58: START_TEST(test_accounting_precision) {",
          "59:   struct AccountingTestCase cases[] = {",
          "60:     {\"<e/>\", NULL, NULL, 0},",
          "",
          "[Removed Lines]",
          "57: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "57: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391:     fail(\"unsignedCharToPrintable result mistaken\");",
          "392: }",
          "393: END_TEST",
          "396: void",
          "397: make_accounting_test_case(Suite *s) {",
          "399:   TCase *tc_accounting = tcase_create(\"accounting tests\");",
          "401:   suite_add_tcase(s, tc_accounting);",
          "",
          "[Removed Lines]",
          "394: #endif // defined(XML_DTD) || XML_GE == 1",
          "398: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "394: #endif // XML_GE == 1",
          "398: #if XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/tests/handlers.c||expat/tests/handlers.c": [
          "File: expat/tests/handlers.c -> expat/tests/handlers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1494:   return XML_STATUS_ERROR;",
          "1495: }",
          "1498: int",
          "1499: accounting_external_entity_ref_handler(XML_Parser parser,",
          "1500:                                        const XML_Char *context,",
          "",
          "[Removed Lines]",
          "1497: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "1497: #if XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/tests/runtests.c||expat/tests/runtests.c": [
          "File: expat/tests/runtests.c -> expat/tests/runtests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   make_miscellaneous_test_case(s);",
          "70:   make_alloc_test_case(s);",
          "71:   make_nsalloc_test_case(s);",
          "73:   make_accounting_test_case(s);",
          "74: #endif",
          "",
          "[Removed Lines]",
          "72: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "72: #if XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/xmlwf/xmlwf.c||expat/xmlwf/xmlwf.c": [
          "File: expat/xmlwf/xmlwf.c -> expat/xmlwf/xmlwf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:     }",
          "1159:     if (attackMaximumAmplification != -1.0f) {",
          "1161:       XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
          "1162:           parser, attackMaximumAmplification);",
          "1163: #endif",
          "1164:     }",
          "1165:     if (attackThresholdGiven) {",
          "1167:       XML_SetBillionLaughsAttackProtectionActivationThreshold(",
          "1168:           parser, attackThresholdBytes);",
          "1169: #else",
          "",
          "[Removed Lines]",
          "1160: #if defined(XML_DTD) || XML_GE == 1",
          "1166: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "[Added Lines]",
          "1160: #if XML_GE == 1",
          "1166: #if XML_GE == 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f60a47cb5716bb810789a12ef6024c1dc448164",
      "candidate_info": {
        "commit_hash": "3f60a47cb5716bb810789a12ef6024c1dc448164",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/3f60a47cb5716bb810789a12ef6024c1dc448164",
        "files": [
          "expat/lib/expat.h",
          "expat/lib/internal.h"
        ],
        "message": "Fix compiler warnings\n\n> In file included from ./../lib/internal.h:149,\n>                  from codepage.c:38:\n> ./../lib/expat.h:1045:5: warning: \"XML_GE\" is not defined, evaluates to 0 [-Wundef]\n>  1045 | #if XML_GE == 1\n>       |     ^~~~~~\n> ./../lib/internal.h:158:5: warning: \"XML_GE\" is not defined, evaluates to 0 [-Wundef]\n>   158 | #if XML_GE == 1\n>       |     ^~~~~~",
        "before_after_code_files": [
          "expat/lib/expat.h||expat/lib/expat.h",
          "expat/lib/internal.h||expat/lib/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "expat/lib/expat.h||expat/lib/expat.h",
            "expat/lib/internal.h||expat/lib/internal.h"
          ],
          "candidate": [
            "expat/lib/expat.h||expat/lib/expat.h",
            "expat/lib/internal.h||expat/lib/internal.h"
          ]
        }
      },
      "candidate_diff": {
        "expat/lib/expat.h||expat/lib/expat.h": [
          "File: expat/lib/expat.h -> expat/lib/expat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: XMLPARSEAPI(const XML_Feature *)",
          "1043: XML_GetFeatureList(void);",
          "1048: XMLPARSEAPI(XML_Bool)",
          "",
          "[Removed Lines]",
          "1045: #if XML_GE == 1",
          "",
          "[Added Lines]",
          "1045: #if defined(XML_GE) && XML_GE == 1",
          "",
          "---------------"
        ],
        "expat/lib/internal.h||expat/lib/internal.h": [
          "File: expat/lib/internal.h -> expat/lib/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: void _INTERNAL_trim_to_complete_utf8_characters(const char *from,",
          "156:                                                 const char **fromLimRef);",
          "159: unsigned long long testingAccountingGetCountBytesDirect(XML_Parser parser);",
          "160: unsigned long long testingAccountingGetCountBytesIndirect(XML_Parser parser);",
          "161: const char *unsignedCharToPrintable(unsigned char c);",
          "",
          "[Removed Lines]",
          "158: #if XML_GE == 1",
          "",
          "[Added Lines]",
          "158: #if defined(XML_GE) && XML_GE == 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b127c20b220b673cf52c6be8bef725bf04cbeaf",
      "candidate_info": {
        "commit_hash": "2b127c20b220b673cf52c6be8bef725bf04cbeaf",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/2b127c20b220b673cf52c6be8bef725bf04cbeaf",
        "files": [
          "expat/lib/xmlparse.c"
        ],
        "message": "lib: Make XML_GE==0 use self-references as entity replacement text",
        "before_after_code_files": [
          "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
          ],
          "candidate": [
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
          ]
        }
      },
      "candidate_diff": {
        "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
          "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512: static ATTRIBUTE_ID *getAttributeId(XML_Parser parser, const ENCODING *enc,",
          "513:                                     const char *start, const char *end);",
          "514: static int setElementTypePrefix(XML_Parser parser, ELEMENT_TYPE *);",
          "515: static enum XML_Error storeEntityValue(XML_Parser parser, const ENCODING *enc,",
          "516:                                        const char *start, const char *end,",
          "517:                                        enum XML_Account account);",
          "518: static int reportProcessingInstruction(XML_Parser parser, const ENCODING *enc,",
          "519:                                        const char *start, const char *end);",
          "520: static int reportComment(XML_Parser parser, const ENCODING *enc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515: #if XML_GE == 1",
          "519: #else",
          "520: static enum XML_Error storeSelfEntityValue(XML_Parser parser, ENTITY *entity);",
          "521: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5053:       break;",
          "5054:     case XML_ROLE_ENTITY_VALUE:",
          "5055:       if (dtd->keepProcessing) {",
          "5056:         enum XML_Error result",
          "5057:             = storeEntityValue(parser, enc, s + enc->minBytesPerChar,",
          "5058:                                next - enc->minBytesPerChar, XML_ACCOUNT_NONE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5060: #if defined(XML_DTD) || XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5073:           poolDiscard(&dtd->entityValuePool);",
          "5074:         if (result != XML_ERROR_NONE)",
          "5075:           return result;",
          "5076:       }",
          "5077:       break;",
          "5078:     case XML_ROLE_DOCTYPE_SYSTEM_ID:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5083: #else",
          "5086:         if (parser->m_declEntity != NULL) {",
          "5087:           const enum XML_Error result",
          "5088:               = storeSelfEntityValue(parser, parser->m_declEntity);",
          "5089:           if (result != XML_ERROR_NONE)",
          "5090:             return result;",
          "5092:           if (parser->m_entityDeclHandler) {",
          "5094:             parser->m_entityDeclHandler(",
          "5095:                 parser->m_handlerArg, parser->m_declEntity->name,",
          "5096:                 parser->m_declEntity->is_param, parser->m_declEntity->textPtr,",
          "5097:                 parser->m_declEntity->textLen, parser->m_curBase, 0, 0, 0);",
          "5098:             handleDefault = XML_FALSE;",
          "5099:           }",
          "5100:         }",
          "5101: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5131:       }",
          "5132:       break;",
          "5133:     case XML_ROLE_ENTITY_COMPLETE:",
          "5134:       if (dtd->keepProcessing && parser->m_declEntity",
          "5135:           && parser->m_entityDeclHandler) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5160: #if XML_GE == 0",
          "5163:       if (parser->m_declEntity != NULL) {",
          "5164:         const enum XML_Error result",
          "5165:             = storeSelfEntityValue(parser, parser->m_declEntity);",
          "5166:         if (result != XML_ERROR_NONE)",
          "5167:           return result;",
          "5168:       }",
          "5169: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6104: }",
          "6106: static enum XML_Error",
          "6107: storeEntityValue(XML_Parser parser, const ENCODING *enc,",
          "6108:                  const char *entityTextPtr, const char *entityTextEnd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6142: #if XML_GE == 1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6111:   STRING_POOL *pool = &(dtd->entityValuePool);",
          "6112:   enum XML_Error result = XML_ERROR_NONE;",
          "6114:   int oldInEntityValue = parser->m_prologState.inEntityValue;",
          "6115:   parser->m_prologState.inEntityValue = 1;",
          "6117:   UNUSED_P(account);",
          "6120:      since this would indicate an external entity; therefore we",
          "",
          "[Removed Lines]",
          "6113: #ifdef XML_DTD",
          "6116: #else",
          "",
          "[Added Lines]",
          "6150: #  ifdef XML_DTD",
          "6153: #  else",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6130:     int tok = XmlEntityValueTok(enc, entityTextPtr, entityTextEnd, &next);",
          "6133:     if (! accountingDiffTolerated(parser, tok, entityTextPtr, next, __LINE__,",
          "6134:                                   account)) {",
          "6135:       accountingOnAbort(parser);",
          "6136:       result = XML_ERROR_AMPLIFICATION_LIMIT_BREACH;",
          "6137:       goto endEntityValue;",
          "6138:     }",
          "6141:     switch (tok) {",
          "6142:     case XML_TOK_PARAM_ENTITY_REF:",
          "6144:       if (parser->m_isParamEntity || enc != parser->m_encoding) {",
          "6145:         const XML_Char *name;",
          "6146:         ENTITY *entity;",
          "",
          "[Removed Lines]",
          "6132: #if defined(XML_DTD) || XML_GE == 1",
          "6139: #endif",
          "6143: #ifdef XML_DTD",
          "",
          "[Added Lines]",
          "6169: #  if defined(XML_DTD) || XML_GE == 1",
          "6176: #  endif",
          "6180: #  ifdef XML_DTD",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6283:     entityTextPtr = next;",
          "6284:   }",
          "6285: endEntityValue:",
          "6287:   parser->m_prologState.inEntityValue = oldInEntityValue;",
          "6289:   return result;",
          "6290: }",
          "6292: static void FASTCALL",
          "6293: normalizeLines(XML_Char *s) {",
          "6294:   XML_Char *p;",
          "",
          "[Removed Lines]",
          "6286: #ifdef XML_DTD",
          "",
          "[Added Lines]",
          "6323: #  ifdef XML_DTD",
          "6331: static enum XML_Error",
          "6332: storeSelfEntityValue(XML_Parser parser, ENTITY *entity) {",
          "6335:   const char *const entity_start = \"&amp;\";",
          "6336:   const char *const entity_end = \";\";",
          "6338:   STRING_POOL *const pool = &(parser->m_dtd->entityValuePool);",
          "6339:   if (! poolAppendString(pool, entity_start)",
          "6340:       || ! poolAppendString(pool, entity->name)",
          "6341:       || ! poolAppendString(pool, entity_end)) {",
          "6342:     poolDiscard(pool);",
          "6343:     return XML_ERROR_NO_MEMORY;",
          "6344:   }",
          "6346:   entity->textPtr = poolStart(pool);",
          "6347:   entity->textLen = (int)(poolLength(pool));",
          "6348:   poolFinish(pool);",
          "6350:   return XML_ERROR_NONE;",
          "6351: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "137a57808748d799558a88056a4aef4d04994320",
      "candidate_info": {
        "commit_hash": "137a57808748d799558a88056a4aef4d04994320",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/137a57808748d799558a88056a4aef4d04994320",
        "files": [
          "expat/lib/xmlparse.c"
        ],
        "message": "Mass-apply clang-format 18.1.0",
        "before_after_code_files": [
          "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
          ],
          "candidate": [
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
          ]
        }
      },
      "candidate_diff": {
        "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
          "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2539: const XML_Feature *XMLCALL",
          "2540: XML_GetFeatureList(void) {",
          "2541:   static const XML_Feature features[] = {",
          "2545: #ifdef XML_UNICODE",
          "2547: #endif",
          "2548: #ifdef XML_UNICODE_WCHAR_T",
          "2550: #endif",
          "2551: #ifdef XML_DTD",
          "2553: #endif",
          "2554: #if XML_CONTEXT_BYTES > 0",
          "2556: #endif",
          "2557: #ifdef XML_MIN_SIZE",
          "2559: #endif",
          "2560: #ifdef XML_NS",
          "2562: #endif",
          "2563: #ifdef XML_LARGE_SIZE",
          "2565: #endif",
          "2566: #ifdef XML_ATTR_INFO",
          "2568: #endif",
          "2569: #if XML_GE == 1",
          "2581: #endif",
          "2585:   return features;",
          "2586: }",
          "",
          "[Removed Lines]",
          "2542:     {XML_FEATURE_SIZEOF_XML_CHAR, XML_L(\"sizeof(XML_Char)\"), sizeof(XML_Char)},",
          "2543:     {XML_FEATURE_SIZEOF_XML_LCHAR, XML_L(\"sizeof(XML_LChar)\"),",
          "2544:      sizeof(XML_LChar)},",
          "2546:     {XML_FEATURE_UNICODE, XML_L(\"XML_UNICODE\"), 0},",
          "2549:     {XML_FEATURE_UNICODE_WCHAR_T, XML_L(\"XML_UNICODE_WCHAR_T\"), 0},",
          "2552:     {XML_FEATURE_DTD, XML_L(\"XML_DTD\"), 0},",
          "2555:     {XML_FEATURE_CONTEXT_BYTES, XML_L(\"XML_CONTEXT_BYTES\"), XML_CONTEXT_BYTES},",
          "2558:     {XML_FEATURE_MIN_SIZE, XML_L(\"XML_MIN_SIZE\"), 0},",
          "2561:     {XML_FEATURE_NS, XML_L(\"XML_NS\"), 0},",
          "2564:     {XML_FEATURE_LARGE_SIZE, XML_L(\"XML_LARGE_SIZE\"), 0},",
          "2567:     {XML_FEATURE_ATTR_INFO, XML_L(\"XML_ATTR_INFO\"), 0},",
          "2572:     {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
          "2573:      XML_L(\"XML_BLAP_MAX_AMP\"),",
          "2574:      (long int)",
          "2575:          EXPAT_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT},",
          "2576:     {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT,",
          "2577:      XML_L(\"XML_BLAP_ACT_THRES\"),",
          "2578:      EXPAT_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT},",
          "2580:     {XML_FEATURE_GE, XML_L(\"XML_GE\"), 0},",
          "2582:     {XML_FEATURE_END, NULL, 0}",
          "2583:   };",
          "",
          "[Added Lines]",
          "2542:       {XML_FEATURE_SIZEOF_XML_CHAR, XML_L(\"sizeof(XML_Char)\"),",
          "2543:        sizeof(XML_Char)},",
          "2544:       {XML_FEATURE_SIZEOF_XML_LCHAR, XML_L(\"sizeof(XML_LChar)\"),",
          "2545:        sizeof(XML_LChar)},",
          "2547:       {XML_FEATURE_UNICODE, XML_L(\"XML_UNICODE\"), 0},",
          "2550:       {XML_FEATURE_UNICODE_WCHAR_T, XML_L(\"XML_UNICODE_WCHAR_T\"), 0},",
          "2553:       {XML_FEATURE_DTD, XML_L(\"XML_DTD\"), 0},",
          "2556:       {XML_FEATURE_CONTEXT_BYTES, XML_L(\"XML_CONTEXT_BYTES\"),",
          "2557:        XML_CONTEXT_BYTES},",
          "2560:       {XML_FEATURE_MIN_SIZE, XML_L(\"XML_MIN_SIZE\"), 0},",
          "2563:       {XML_FEATURE_NS, XML_L(\"XML_NS\"), 0},",
          "2566:       {XML_FEATURE_LARGE_SIZE, XML_L(\"XML_LARGE_SIZE\"), 0},",
          "2569:       {XML_FEATURE_ATTR_INFO, XML_L(\"XML_ATTR_INFO\"), 0},",
          "2574:       {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
          "2575:        XML_L(\"XML_BLAP_MAX_AMP\"),",
          "2576:        (long int)",
          "2577:            EXPAT_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT},",
          "2578:       {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT,",
          "2579:        XML_L(\"XML_BLAP_ACT_THRES\"),",
          "2580:        EXPAT_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT},",
          "2582:       {XML_FEATURE_GE, XML_L(\"XML_GE\"), 0},",
          "2584:       {XML_FEATURE_END, NULL, 0}};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a6c61de4a425977e357cafd8667a0d7771ce292",
      "candidate_info": {
        "commit_hash": "8a6c61de4a425977e357cafd8667a0d7771ce292",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/8a6c61de4a425977e357cafd8667a0d7771ce292",
        "files": [
          "expat/lib/expat.h",
          "expat/lib/xmlparse.c"
        ],
        "message": "lib: Add XML_GE to XML_GetFeatureList and XML_FeatureEnum\n\nCo-authored-by: Snild Dolkow <snild@sony.com>",
        "before_after_code_files": [
          "expat/lib/expat.h||expat/lib/expat.h",
          "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "expat/lib/expat.h||expat/lib/expat.h",
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
          ],
          "candidate": [
            "expat/lib/expat.h||expat/lib/expat.h",
            "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
          ]
        }
      },
      "candidate_diff": {
        "expat/lib/expat.h||expat/lib/expat.h": [
          "File: expat/lib/expat.h -> expat/lib/expat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025:   XML_FEATURE_ATTR_INFO,",
          "1027:   XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
          "1030: };",
          "",
          "[Removed Lines]",
          "1028:   XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT",
          "",
          "[Added Lines]",
          "1028:   XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT,",
          "1030:   XML_FEATURE_GE",
          "",
          "---------------"
        ],
        "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
          "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2556:     {XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT,",
          "2557:      XML_L(\"XML_BLAP_ACT_THRES\"),",
          "2558:      EXPAT_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT},",
          "2559: #endif",
          "2560:     {XML_FEATURE_END, NULL, 0}",
          "2561:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2560:     {XML_FEATURE_GE, XML_L(\"XML_GE\"), 0},",
          "",
          "---------------"
        ]
      }
    }
  ]
}