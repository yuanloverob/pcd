{
  "cve_id": "CVE-2024-23836",
  "cve_desc": "Suricata is a network Intrusion Detection System, Intrusion Prevention System and Network Security Monitoring engine. Prior to versions 6.0.16 and 7.0.3, an attacker can craft traffic to cause Suricata to use far more CPU and memory for processing the traffic than needed, which can lead to extreme slow downs and denial of service.  This vulnerability is patched in 6.0.16 or 7.0.3.  Workarounds include disabling the affected protocol app-layer parser in the yaml and reducing the `stream.reassembly.depth` value helps reduce the severity of the issue.",
  "repo": "OISF/suricata",
  "patch_hash": "e7e28822f473320658d6125f16ac3f0524baff01",
  "patch_info": {
    "commit_hash": "e7e28822f473320658d6125f16ac3f0524baff01",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/commit/e7e28822f473320658d6125f16ac3f0524baff01",
    "files": [
      "configure.ac",
      "doc/userguide/configuration/suricata-yaml.rst",
      "src/app-layer-htp.c",
      "suricata.yaml.in"
    ],
    "message": "http1: configurable max number of live tx per flow\n\nTicket: #5921\n\nCo-authored-by: Jason Ish <jason.ish@oisf.net>\n(cherry picked from commit 4175680a8a1c0dfaa491ee63d6e36c011d498473)",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/app-layer-htp.c||src/app-layer-htp.c",
      "suricata.yaml.in||suricata.yaml.in"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:         AC_CHECK_LIB([htp], [htp_config_set_lzma_layers],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_LZMA_LAYERS],[1],[Found htp_config_set_lzma_layers function in libhtp]) ,,[-lhtp])",
      "1597:         AC_CHECK_LIB([htp], [htp_config_set_compression_bomb_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Found htp_config_set_compression_bomb_limit function in libhtp]) ,,[-lhtp])",
      "1598:         AC_CHECK_LIB([htp], [htp_config_set_compression_time_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Found htp_config_set_compression_time_limit function in libhtp]) ,,[-lhtp])",
      "1599:     ])",
      "1601:     if test \"x$enable_non_bundled_htp\" = \"xno\"; then",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1599:         AC_CHECK_LIB([htp], [htp_config_set_max_tx],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Found htp_config_set_max_tx function in libhtp]) ,,[-lhtp])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1620:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_LZMA_LAYERS],[1],[Assuming htp_config_set_lzma_layers function in bundled libhtp])",
      "1621:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Assuming htp_config_set_compression_bomb_limit function in bundled libhtp])",
      "1622:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Assuming htp_config_set_compression_time_limit function in bundled libhtp])",
      "1623:         else",
      "1624:             echo",
      "1625:             echo \"  ERROR: Libhtp is not bundled. Get libhtp by doing:\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1624:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Assuming htp_config_set_max_tx function in bundled libhtp])",
      "",
      "---------------"
    ],
    "src/app-layer-htp.c||src/app-layer-htp.c": [
      "File: src/app-layer-htp.c -> src/app-layer-htp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2517: #endif",
      "2518: #ifdef HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT",
      "2519:     htp_config_set_compression_time_limit(cfg_prec->cfg, HTP_CONFIG_DEFAULT_COMPRESSION_TIME_LIMIT);",
      "2520: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2520: #endif",
      "2521: #ifdef HAVE_HTP_CONFIG_SET_MAX_TX",
      "2522: #define HTP_CONFIG_DEFAULT_MAX_TX_LIMIT 512",
      "2523:     htp_config_set_max_tx(cfg_prec->cfg, HTP_CONFIG_DEFAULT_MAX_TX_LIMIT);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2868:             }",
      "2869:             SCLogConfig(\"Setting HTTP decompression time limit to %\" PRIu32 \" usec\", limit);",
      "2870:             htp_config_set_compression_time_limit(cfg_prec->cfg, (size_t)limit);",
      "2871: #endif",
      "2872:         } else if (strcasecmp(\"randomize-inspection-sizes\", p->name) == 0) {",
      "2873:             if (!g_disable_randomness) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2875: #endif",
      "2876: #ifdef HAVE_HTP_CONFIG_SET_MAX_TX",
      "2877:         } else if (strcasecmp(\"max-tx\", p->name) == 0) {",
      "2878:             uint32_t limit = 0;",
      "2879:             if (ParseSizeStringU32(p->val, &limit) < 0) {",
      "2880:                 FatalError(\"failed to parse 'max-tx' \"",
      "2881:                            \"from conf file - %s.\",",
      "2882:                         p->val);",
      "2883:             }",
      "2885:             SCLogConfig(\"Setting HTTP max-tx limit to %\" PRIu32 \" bytes\", limit);",
      "2886:             htp_config_set_max_tx(cfg_prec->cfg, (size_t)limit);",
      "",
      "---------------"
    ],
    "suricata.yaml.in||suricata.yaml.in": [
      "File: suricata.yaml.in -> suricata.yaml.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "1086:            #compression-bomb-limit: 1mb",
      "1087:            # Maximum time spent decompressing a single transaction in usec",
      "1088:            #decompression-time-limit: 100000",
      "1090:          server-config:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1089:            # Maximum number of live transactions per flow",
      "1090:            #max-tx: 512",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4175680a8a1c0dfaa491ee63d6e36c011d498473",
      "candidate_info": {
        "commit_hash": "4175680a8a1c0dfaa491ee63d6e36c011d498473",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/4175680a8a1c0dfaa491ee63d6e36c011d498473",
        "files": [
          "configure.ac",
          "doc/userguide/configuration/suricata-yaml.rst",
          "src/app-layer-htp.c",
          "suricata.yaml.in"
        ],
        "message": "http1: configurable max number of live tx per flow\n\nTicket: #5921\n\nCo-authored-by: Jason Ish <jason.ish@oisf.net>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/app-layer-htp.c||src/app-layer-htp.c",
          "suricata.yaml.in||suricata.yaml.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/app-layer-htp.c||src/app-layer-htp.c",
            "suricata.yaml.in||suricata.yaml.in"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/app-layer-htp.c||src/app-layer-htp.c",
            "suricata.yaml.in||suricata.yaml.in"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1620:         AC_CHECK_LIB([htp], [htp_config_set_lzma_layers],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_LZMA_LAYERS],[1],[Found htp_config_set_lzma_layers function in libhtp]) ,,[-lhtp])",
          "1621:         AC_CHECK_LIB([htp], [htp_config_set_compression_bomb_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Found htp_config_set_compression_bomb_limit function in libhtp]) ,,[-lhtp])",
          "1622:         AC_CHECK_LIB([htp], [htp_config_set_compression_time_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Found htp_config_set_compression_time_limit function in libhtp]) ,,[-lhtp])",
          "1623:     ])",
          "1625:     if test \"x$enable_non_bundled_htp\" = \"xno\"; then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1623:         AC_CHECK_LIB([htp], [htp_config_set_max_tx],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Found htp_config_set_max_tx function in libhtp]) ,,[-lhtp])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_LZMA_LAYERS],[1],[Assuming htp_config_set_lzma_layers function in bundled libhtp])",
          "1645:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Assuming htp_config_set_compression_bomb_limit function in bundled libhtp])",
          "1646:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Assuming htp_config_set_compression_time_limit function in bundled libhtp])",
          "1647:         else",
          "1648:             echo",
          "1649:             echo \"  ERROR: Libhtp is not bundled. Get libhtp by doing:\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1648:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Assuming htp_config_set_max_tx function in bundled libhtp])",
          "",
          "---------------"
        ],
        "src/app-layer-htp.c||src/app-layer-htp.c": [
          "File: src/app-layer-htp.c -> src/app-layer-htp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2517: #endif",
          "2518: #ifdef HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT",
          "2519:     htp_config_set_compression_time_limit(cfg_prec->cfg, HTP_CONFIG_DEFAULT_COMPRESSION_TIME_LIMIT);",
          "2520: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2520: #endif",
          "2521: #ifdef HAVE_HTP_CONFIG_SET_MAX_TX",
          "2522: #define HTP_CONFIG_DEFAULT_MAX_TX_LIMIT 512",
          "2523:     htp_config_set_max_tx(cfg_prec->cfg, HTP_CONFIG_DEFAULT_MAX_TX_LIMIT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2868:             }",
          "2869:             SCLogConfig(\"Setting HTTP decompression time limit to %\" PRIu32 \" usec\", limit);",
          "2870:             htp_config_set_compression_time_limit(cfg_prec->cfg, (size_t)limit);",
          "2871: #endif",
          "2872:         } else if (strcasecmp(\"randomize-inspection-sizes\", p->name) == 0) {",
          "2873:             if (!g_disable_randomness) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2875: #endif",
          "2876: #ifdef HAVE_HTP_CONFIG_SET_MAX_TX",
          "2877:         } else if (strcasecmp(\"max-tx\", p->name) == 0) {",
          "2878:             uint32_t limit = 0;",
          "2879:             if (ParseSizeStringU32(p->val, &limit) < 0) {",
          "2880:                 FatalError(\"failed to parse 'max-tx' \"",
          "2881:                            \"from conf file - %s.\",",
          "2882:                         p->val);",
          "2883:             }",
          "2885:             SCLogConfig(\"Setting HTTP max-tx limit to %\" PRIu32 \" bytes\", limit);",
          "2886:             htp_config_set_max_tx(cfg_prec->cfg, (size_t)limit);",
          "",
          "---------------"
        ],
        "suricata.yaml.in||suricata.yaml.in": [
          "File: suricata.yaml.in -> suricata.yaml.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1081:            #compression-bomb-limit: 1mb",
          "1082:            # Maximum time spent decompressing a single transaction in usec",
          "1083:            #decompression-time-limit: 100000",
          "1085:          server-config:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084:            # Maximum number of live transactions per flow",
          "1085:            #max-tx: 512",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8efaebe293e2a74c8e323fa85a6f5fadf82801bc",
      "candidate_info": {
        "commit_hash": "8efaebe293e2a74c8e323fa85a6f5fadf82801bc",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/8efaebe293e2a74c8e323fa85a6f5fadf82801bc",
        "files": [
          "configure.ac",
          "src/app-layer-htp.c"
        ],
        "message": "http1: configurable max number of live tx per flow\n\nUnlike the original commit, this commit just enforces a maximum limit,\nbut does not expose the configuration of it.\n\nTicket: #5921\n\n(cherry picked from commit 4175680a8a1c0dfaa491ee63d6e36c011d498473)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/app-layer-htp.c||src/app-layer-htp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/app-layer-htp.c||src/app-layer-htp.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/app-layer-htp.c||src/app-layer-htp.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1692:         AC_CHECK_LIB([htp], [htp_config_set_lzma_layers],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_LZMA_LAYERS],[1],[Found htp_config_set_lzma_layers function in libhtp]) ,,[-lhtp])",
          "1693:         AC_CHECK_LIB([htp], [htp_config_set_compression_bomb_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Found htp_config_set_compression_bomb_limit function in libhtp]) ,,[-lhtp])",
          "1694:         AC_CHECK_LIB([htp], [htp_config_set_compression_time_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Found htp_config_set_compression_time_limit function in libhtp]) ,,[-lhtp])",
          "1695:     ])",
          "1697:     if test \"x$enable_non_bundled_htp\" = \"xno\"; then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1695:         AC_CHECK_LIB([htp], [htp_config_set_max_tx],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Found htp_config_set_max_tx function in libhtp]) ,,[-lhtp])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1716:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_LZMA_LAYERS],[1],[Assuming htp_config_set_lzma_layers function in bundled libhtp])",
          "1717:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Assuming htp_config_set_compression_bomb_limit function in bundled libhtp])",
          "1718:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Assuming htp_config_set_compression_time_limit function in bundled libhtp])",
          "1719:         else",
          "1720:             echo",
          "1721:             echo \"  ERROR: Libhtp is not bundled. Get libhtp by doing:\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1720:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Assuming htp_config_set_max_tx function in bundled libhtp])",
          "",
          "---------------"
        ],
        "src/app-layer-htp.c||src/app-layer-htp.c": [
          "File: src/app-layer-htp.c -> src/app-layer-htp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2407: #endif",
          "2408: #ifdef HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT",
          "2409:     htp_config_set_compression_time_limit(cfg_prec->cfg, HTP_CONFIG_DEFAULT_COMPRESSION_TIME_LIMIT);",
          "2410: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2410: #endif",
          "2411: #ifdef HAVE_HTP_CONFIG_SET_MAX_TX",
          "2412: #define HTP_CONFIG_DEFAULT_MAX_TX_LIMIT 512",
          "2413:     htp_config_set_max_tx(cfg_prec->cfg, HTP_CONFIG_DEFAULT_MAX_TX_LIMIT);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca8bf6e64c5b6d26672586c5551607ad8bdce0dc",
      "candidate_info": {
        "commit_hash": "ca8bf6e64c5b6d26672586c5551607ad8bdce0dc",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/ca8bf6e64c5b6d26672586c5551607ad8bdce0dc",
        "files": [
          "configure.ac",
          "doc/userguide/configuration/suricata-yaml.rst",
          "rules/http-events.rules",
          "src/app-layer-htp.c",
          "src/app-layer-htp.h",
          "suricata.yaml.in"
        ],
        "message": "http: have a headers limit\n\nTicket: 7191\n\nSo as to avoid quadratic complexity in libhtp.\nMake the limit configurable from suricata.yaml,\nand have an event when network traffic goes over the limit.\n\n(cherry picked from commit bb714c917878ed13aab9e314a026f71570e84f37)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "rules/http-events.rules||rules/http-events.rules",
          "src/app-layer-htp.c||src/app-layer-htp.c",
          "src/app-layer-htp.h||src/app-layer-htp.h",
          "suricata.yaml.in||suricata.yaml.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/app-layer-htp.c||src/app-layer-htp.c",
            "suricata.yaml.in||suricata.yaml.in"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/app-layer-htp.c||src/app-layer-htp.c",
            "suricata.yaml.in||suricata.yaml.in"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1602:         AC_CHECK_LIB([htp], [htp_config_set_compression_bomb_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Found htp_config_set_compression_bomb_limit function in libhtp]) ,,[-lhtp])",
          "1603:         AC_CHECK_LIB([htp], [htp_config_set_compression_time_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Found htp_config_set_compression_time_limit function in libhtp]) ,,[-lhtp])",
          "1604:         AC_CHECK_LIB([htp], [htp_config_set_max_tx],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Found htp_config_set_max_tx function in libhtp]) ,,[-lhtp])",
          "1605:     ])",
          "1607:     if test \"x$enable_non_bundled_htp\" = \"xno\"; then",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:         AC_CHECK_LIB([htp], [htp_config_set_number_headers_limit],AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_HEADERS_LIMIT],[1],[Found htp_config_set_number_headers_limit function in libhtp]) ,,[-lhtp])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1627:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_BOMB_LIMIT],[1],[Assuming htp_config_set_compression_bomb_limit function in bundled libhtp])",
          "1628:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_COMPRESSION_TIME_LIMIT],[1],[Assuming htp_config_set_compression_time_limit function in bundled libhtp])",
          "1629:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_MAX_TX],[1],[Assuming htp_config_set_max_tx function in bundled libhtp])",
          "1630:         else",
          "1631:             echo",
          "1632:             echo \"  ERROR: Libhtp is not bundled. Get libhtp by doing:\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1631:             AC_DEFINE_UNQUOTED([HAVE_HTP_CONFIG_SET_HEADERS_LIMIT],[1],[Assuming htp_config_set_number_headers_limit function in bundled libhtp])",
          "",
          "---------------"
        ],
        "rules/http-events.rules||rules/http-events.rules": [
          "File: rules/http-events.rules -> rules/http-events.rules",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: #alert http any any -> any any (msg:\"SURICATA HTTP request chunk extension\"; flow:established; app-layer-event:http.request_chunk_extension; classtype:protocol-command-decode; sid:2221054; rev:1;)",
          "",
          "[Removed Lines]",
          "94: # next sid 2221055",
          "",
          "[Added Lines]",
          "94: #alert http any any -> any any (msg:\"SURICATA HTTP request missing protocol\"; flow:established,to_server; app-layer-event:http.request_line_missing_protocol; classtype:protocol-command-decode; sid:2221055; rev:1;)",
          "96: alert http any any -> any any (msg:\"SURICATA HTTP request too many headers\"; flow:established,to_server; app-layer-event:http.request_too_many_headers; classtype:protocol-command-decode; sid:2221056; rev:1;)",
          "97: alert http any any -> any any (msg:\"SURICATA HTTP response too many headers\"; flow:established,to_client; app-layer-event:http.response_too_many_headers; classtype:protocol-command-decode; sid:2221057; rev:1;)",
          "99: # next sid 2221058",
          "",
          "---------------"
        ],
        "src/app-layer-htp.c||src/app-layer-htp.c": [
          "File: src/app-layer-htp.c -> src/app-layer-htp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     { \"RANGE_INVALID\", HTTP_DECODER_EVENT_RANGE_INVALID },",
          "169:     { \"REQUEST_CHUNK_EXTENSION\", HTTP_DECODER_EVENT_REQUEST_CHUNK_EXTENSION },",
          "172:     { \"MULTIPART_GENERIC_ERROR\", HTTP_DECODER_EVENT_MULTIPART_GENERIC_ERROR },",
          "173:     { \"MULTIPART_NO_FILEDATA\", HTTP_DECODER_EVENT_MULTIPART_NO_FILEDATA },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:     { \"REQUEST_TOO_MANY_HEADERS\", HTTP_DECODER_EVENT_REQUEST_TOO_MANY_HEADERS },",
          "172:     { \"RESPONSE_TOO_MANY_HEADERS\", HTTP_DECODER_EVENT_RESPONSE_TOO_MANY_HEADERS },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:     { \"Ambiguous response C-L value\",",
          "643:             HTTP_DECODER_EVENT_DUPLICATE_CONTENT_LENGTH_FIELD_IN_RESPONSE },",
          "644:     { \"Request chunk extension\", HTTP_DECODER_EVENT_REQUEST_CHUNK_EXTENSION },",
          "645: };",
          "647: #define HTP_ERROR_MAX (sizeof(htp_errors) / sizeof(htp_errors[0]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:     { \"Too many request headers\", HTTP_DECODER_EVENT_REQUEST_TOO_MANY_HEADERS },",
          "649:     { \"Too many response headers\", HTTP_DECODER_EVENT_RESPONSE_TOO_MANY_HEADERS },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2521: #ifdef HAVE_HTP_CONFIG_SET_MAX_TX",
          "2522: #define HTP_CONFIG_DEFAULT_MAX_TX_LIMIT 512",
          "2523:     htp_config_set_max_tx(cfg_prec->cfg, HTP_CONFIG_DEFAULT_MAX_TX_LIMIT);",
          "2524: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2529: #endif",
          "2530: #ifdef HAVE_HTP_CONFIG_SET_HEADERS_LIMIT",
          "2531: #define HTP_CONFIG_DEFAULT_HEADERS_LIMIT 1024",
          "2532:     htp_config_set_number_headers_limit(cfg_prec->cfg, HTP_CONFIG_DEFAULT_HEADERS_LIMIT);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2885:             SCLogConfig(\"Setting HTTP max-tx limit to %\" PRIu32 \" bytes\", limit);",
          "2886:             htp_config_set_max_tx(cfg_prec->cfg, (size_t)limit);",
          "2887: #endif",
          "2888:         } else if (strcasecmp(\"randomize-inspection-sizes\", p->name) == 0) {",
          "2889:             if (!g_disable_randomness) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2896: #endif",
          "2897: #ifdef HAVE_HTP_CONFIG_SET_HEADERS_LIMIT",
          "2898:         } else if (strcasecmp(\"headers-limit\", p->name) == 0) {",
          "2899:             uint32_t limit = 0;",
          "2900:             if (ParseSizeStringU32(p->val, &limit) < 0) {",
          "2901:                 FatalError(\"failed to parse 'headers-limit' \"",
          "2902:                            \"from conf file - %s.\",",
          "2903:                         p->val);",
          "2904:             }",
          "2905:             SCLogConfig(\"Setting HTTP headers limit to %\" PRIu32, limit);",
          "2906:             htp_config_set_number_headers_limit(cfg_prec->cfg, limit);",
          "",
          "---------------"
        ],
        "src/app-layer-htp.h||src/app-layer-htp.h": [
          "File: src/app-layer-htp.h -> src/app-layer-htp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     HTTP_DECODER_EVENT_RANGE_INVALID,",
          "130:     HTTP_DECODER_EVENT_REQUEST_CHUNK_EXTENSION,",
          "133:     HTTP_DECODER_EVENT_MULTIPART_GENERIC_ERROR,",
          "134:     HTTP_DECODER_EVENT_MULTIPART_NO_FILEDATA,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     HTTP_DECODER_EVENT_REQUEST_TOO_MANY_HEADERS,",
          "133:     HTTP_DECODER_EVENT_RESPONSE_TOO_MANY_HEADERS,",
          "",
          "---------------"
        ],
        "suricata.yaml.in||suricata.yaml.in": [
          "File: suricata.yaml.in -> suricata.yaml.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1099:            #decompression-time-limit: 100000",
          "1100:            # Maximum number of live transactions per flow",
          "1101:            #max-tx: 512",
          "1103:          server-config:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:            # Maximum used number of HTTP1 headers in one request or response",
          "1103:            #headers-limit: 1024",
          "",
          "---------------"
        ]
      }
    }
  ]
}