{
  "cve_id": "CVE-2022-41883",
  "cve_desc": "TensorFlow is an open source platform for machine learning. When ops that have specified input sizes receive a differing number of inputs, the executor will crash. We have patched the issue in GitHub commit f5381e0e10b5a61344109c1b7c174c68110f7629. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f5381e0e10b5a61344109c1b7c174c68110f7629",
  "patch_info": {
    "commit_hash": "f5381e0e10b5a61344109c1b7c174c68110f7629",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f5381e0e10b5a61344109c1b7c174c68110f7629",
    "files": [
      "tensorflow/core/common_runtime/eager/execute.cc",
      "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
    ],
    "message": "Fix OOB error when op input sizes do not match.\n\nIn cases where op input sizes are specified as in\n```\nREGISTER_OP(\"DynamicStitch\")\n    .Input(\"indices: N * int32\")\n    .Input(\"data: N * T\")\n    .Output(\"merged: T\")\n    .Attr(\"N : int >= 1\")\n    .Attr(\"T : type\")\n    .SetShapeFn(DynamicStitchShapeFunction);\n```\nif differing number of inputs are provided (e.g. 3 for `indices` and 4 for `data`)\nwe can get a crash in the executor when parsing the inputs, even before the kernel\ncalled.  Here we avoid this by checking the return code for the argument id and\nexit early.\n\nPiperOrigin-RevId: 478068540",
    "before_after_code_files": [
      "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
      "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc": [
      "File: tensorflow/core/common_runtime/eager/execute.cc -> tensorflow/core/common_runtime/eager/execute.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "313:   const auto& host_memory_args = kernel_def->host_memory_arg();",
      "314:   const OpDef& op_def = OpRegistry::Global()->LookUp(op.Name())->op_def;",
      "315:   const int arg_id = OpPortIdToArgId(*node_def, op_def.input_arg(), port_id);",
      "316:   return std::find(host_memory_args.begin(), host_memory_args.end(),",
      "317:                    op_def.input_arg(arg_id).name()) != host_memory_args.end();",
      "318: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "317:   if (arg_id < 0) {",
      "318:     return false;",
      "319:   }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py": [
      "File: tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py -> tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: from tensorflow.python.framework import constant_op",
      "20: from tensorflow.python.framework import dtypes",
      "21: from tensorflow.python.framework import test_util",
      "22: from tensorflow.python.ops import array_ops",
      "23: from tensorflow.python.ops import data_flow_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "308:     for datum, grad in zip(data, self.evaluate(grads[3:])):",
      "309:       self.assertAllEqual(7.0 * self.evaluate(datum), grad)",
      "312: if __name__ == \"__main__\":",
      "313:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "312:   @test_util.run_in_graph_and_eager_modes",
      "313:   def testMismatchedDataAndIndexListSizes(self):",
      "314:     indices = [",
      "315:         constant_op.constant([2]),",
      "316:         constant_op.constant([1]),",
      "317:         constant_op.constant([0]),",
      "318:         constant_op.constant([3]),",
      "319:     ]",
      "320:     data = [",
      "321:         constant_op.constant([1.0]),",
      "322:         constant_op.constant([2.0]),",
      "323:         constant_op.constant([3.0]),",
      "324:         constant_op.constant([4.0])",
      "325:     ]",
      "326:     with self.assertRaisesRegex(",
      "327:         (ValueError, errors.InvalidArgumentError),",
      "328:         \"expected inputs .* do not match|List argument .* must match\"):",
      "329:       self.evaluate(data_flow_ops.dynamic_stitch(indices[0:2], data))",
      "331:     with self.assertRaisesRegex(",
      "332:         (ValueError, errors.InvalidArgumentError),",
      "333:         \"expected inputs .* do not match|List argument .* must match\"):",
      "334:       self.evaluate(data_flow_ops.dynamic_stitch(indices, data[0:2]))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d24586b15afa963e93b85705fd153e24197b893",
      "candidate_info": {
        "commit_hash": "8d24586b15afa963e93b85705fd153e24197b893",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8d24586b15afa963e93b85705fd153e24197b893",
        "files": [
          "tensorflow/core/common_runtime/eager/execute.cc",
          "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
        ],
        "message": "Fix OOB error when op input sizes do not match.\n\nIn cases where op input sizes are specified as in\n```\nREGISTER_OP(\"DynamicStitch\")\n    .Input(\"indices: N * int32\")\n    .Input(\"data: N * T\")\n    .Output(\"merged: T\")\n    .Attr(\"N : int >= 1\")\n    .Attr(\"T : type\")\n    .SetShapeFn(DynamicStitchShapeFunction);\n```\nif differing number of inputs are provided (e.g. 3 for `indices` and 4 for `data`)\nwe can get a crash in the executor when parsing the inputs, even before the kernel\ncalled.  Here we avoid this by checking the return code for the argument id and\nexit early.\n\nPiperOrigin-RevId: 478068540",
        "before_after_code_files": [
          "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
          "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
            "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
            "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc": [
          "File: tensorflow/core/common_runtime/eager/execute.cc -> tensorflow/core/common_runtime/eager/execute.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   return {x, tensorflow::FingerprintCat64(a.high64, x)};",
          "291: }",
          "295:   Device* cpu_device = ctx.HostCPU();",
          "296:   string device_name;",
          "297:   if (tensor_handle->Type() != TensorHandle::LOCAL) {",
          "",
          "[Removed Lines]",
          "293: Status GetDeviceForInput(const EagerContext& ctx, TensorHandle* tensor_handle,",
          "294:                          Device** result) {",
          "",
          "[Added Lines]",
          "293: const KernelDef* GetKernelDef(const EagerOperation& op, const NodeDef* node_def,",
          "294:                               const Device* op_device) {",
          "295:   if (node_def == nullptr || op_device == nullptr) return nullptr;",
          "296:   const KernelDef* kernel_def = nullptr;",
          "297:   Status s = FindKernelDef(DeviceType(op_device->device_type()), *node_def,",
          "298:                            &kernel_def,",
          "300:   if (!s.ok()) return nullptr;",
          "301:   return kernel_def;",
          "302: }",
          "304: bool IsHostMemoryArg(const EagerOperation& op, const NodeDef* node_def,",
          "305:                      const Device* op_device, const KernelDef* kernel_def,",
          "306:                      const int port_id) {",
          "307:   if (op.is_function()) return false;",
          "308:   if (node_def == nullptr) return false;",
          "309:   if (kernel_def == nullptr || op_device == nullptr) return false;",
          "310:   const auto& host_memory_args = kernel_def->host_memory_arg();",
          "311:   const OpDef& op_def = OpRegistry::Global()->LookUp(op.Name())->op_def;",
          "312:   const int arg_id = OpPortIdToArgId(*node_def, op_def.input_arg(), port_id);",
          "314:   if (arg_id < 0) {",
          "315:     return false;",
          "316:   }",
          "317:   return std::find(host_memory_args.begin(), host_memory_args.end(),",
          "318:                    op_def.input_arg(arg_id).name()) != host_memory_args.end();",
          "319: }",
          "321: Status GetDeviceForInput(const EagerOperation& op, const EagerContext& ctx,",
          "322:                          const bool is_host_memory_arg,",
          "323:                          TensorHandle* tensor_handle, Device** result) {",
          "324: >>>>>>> f5381e0e10b (Fix OOB error when op input sizes do not match.)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py -> tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.ops import array_ops",
          "23: from tensorflow.python.ops import data_flow_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     for datum, grad in zip(data, self.evaluate(grads[3:])):",
          "309:       self.assertAllEqual(7.0 * self.evaluate(datum), grad)",
          "312: if __name__ == \"__main__\":",
          "313:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   @test_util.run_in_graph_and_eager_modes",
          "313:   def testMismatchedDataAndIndexListSizes(self):",
          "314:     indices = [",
          "315:         constant_op.constant([2]),",
          "316:         constant_op.constant([1]),",
          "317:         constant_op.constant([0]),",
          "318:         constant_op.constant([3]),",
          "319:     ]",
          "320:     data = [",
          "321:         constant_op.constant([1.0]),",
          "322:         constant_op.constant([2.0]),",
          "323:         constant_op.constant([3.0]),",
          "324:         constant_op.constant([4.0])",
          "325:     ]",
          "326:     with self.assertRaisesRegex(",
          "327:         (ValueError, errors.InvalidArgumentError),",
          "328:         \"expected inputs .* do not match|List argument .* must match\"):",
          "329:       self.evaluate(data_flow_ops.dynamic_stitch(indices[0:2], data))",
          "331:     with self.assertRaisesRegex(",
          "332:         (ValueError, errors.InvalidArgumentError),",
          "333:         \"expected inputs .* do not match|List argument .* must match\"):",
          "334:       self.evaluate(data_flow_ops.dynamic_stitch(indices, data[0:2]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bd22f0f9a64a92554eae8b0579f92479df8d006",
      "candidate_info": {
        "commit_hash": "1bd22f0f9a64a92554eae8b0579f92479df8d006",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1bd22f0f9a64a92554eae8b0579f92479df8d006",
        "files": [
          "tensorflow/core/common_runtime/eager/execute.cc",
          "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
        ],
        "message": "Fix OOB error when op input sizes do not match.\n\nIn cases where op input sizes are specified as in\n```\nREGISTER_OP(\"DynamicStitch\")\n    .Input(\"indices: N * int32\")\n    .Input(\"data: N * T\")\n    .Output(\"merged: T\")\n    .Attr(\"N : int >= 1\")\n    .Attr(\"T : type\")\n    .SetShapeFn(DynamicStitchShapeFunction);\n```\nif differing number of inputs are provided (e.g. 3 for `indices` and 4 for `data`)\nwe can get a crash in the executor when parsing the inputs, even before the kernel\ncalled.  Here we avoid this by checking the return code for the argument id and\nexit early.\n\nPiperOrigin-RevId: 478068540",
        "before_after_code_files": [
          "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
          "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
            "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
            "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc": [
          "File: tensorflow/core/common_runtime/eager/execute.cc -> tensorflow/core/common_runtime/eager/execute.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:   const auto& host_memory_args = kernel_def->host_memory_arg();",
          "314:   const OpDef& op_def = OpRegistry::Global()->LookUp(op.Name())->op_def;",
          "315:   const int arg_id = OpPortIdToArgId(*node_def, op_def.input_arg(), port_id);",
          "316:   return std::find(host_memory_args.begin(), host_memory_args.end(),",
          "317:                    op_def.input_arg(arg_id).name()) != host_memory_args.end();",
          "318: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:   if (arg_id < 0) {",
          "318:     return false;",
          "319:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py -> tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.ops import array_ops",
          "23: from tensorflow.python.ops import data_flow_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     for datum, grad in zip(data, self.evaluate(grads[3:])):",
          "309:       self.assertAllEqual(7.0 * self.evaluate(datum), grad)",
          "312: if __name__ == \"__main__\":",
          "313:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   @test_util.run_in_graph_and_eager_modes",
          "313:   def testMismatchedDataAndIndexListSizes(self):",
          "314:     indices = [",
          "315:         constant_op.constant([2]),",
          "316:         constant_op.constant([1]),",
          "317:         constant_op.constant([0]),",
          "318:         constant_op.constant([3]),",
          "319:     ]",
          "320:     data = [",
          "321:         constant_op.constant([1.0]),",
          "322:         constant_op.constant([2.0]),",
          "323:         constant_op.constant([3.0]),",
          "324:         constant_op.constant([4.0])",
          "325:     ]",
          "326:     with self.assertRaisesRegex(",
          "327:         (ValueError, errors.InvalidArgumentError),",
          "328:         \"expected inputs .* do not match|List argument .* must match\"):",
          "329:       self.evaluate(data_flow_ops.dynamic_stitch(indices[0:2], data))",
          "331:     with self.assertRaisesRegex(",
          "332:         (ValueError, errors.InvalidArgumentError),",
          "333:         \"expected inputs .* do not match|List argument .* must match\"):",
          "334:       self.evaluate(data_flow_ops.dynamic_stitch(indices, data[0:2]))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fff989eab57a66970fff8e05956f320c9310917d",
      "candidate_info": {
        "commit_hash": "fff989eab57a66970fff8e05956f320c9310917d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/fff989eab57a66970fff8e05956f320c9310917d",
        "files": [
          "tensorflow/core/common_runtime/eager/execute.cc",
          "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
        ],
        "message": "Fix OOB error when op input sizes do not match.\n\nIn cases where op input sizes are specified as in\n```\nREGISTER_OP(\"DynamicStitch\")\n    .Input(\"indices: N * int32\")\n    .Input(\"data: N * T\")\n    .Output(\"merged: T\")\n    .Attr(\"N : int >= 1\")\n    .Attr(\"T : type\")\n    .SetShapeFn(DynamicStitchShapeFunction);\n```\nif differing number of inputs are provided (e.g. 3 for `indices` and 4 for `data`)\nwe can get a crash in the executor when parsing the inputs, even before the kernel\ncalled.  Here we avoid this by checking the return code for the argument id and\nexit early.\n\nPiperOrigin-RevId: 478068540",
        "before_after_code_files": [
          "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
          "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
            "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc",
            "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/common_runtime/eager/execute.cc||tensorflow/core/common_runtime/eager/execute.cc": [
          "File: tensorflow/core/common_runtime/eager/execute.cc -> tensorflow/core/common_runtime/eager/execute.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   return {x, tensorflow::FingerprintCat64(a.high64, x)};",
          "290: }",
          "294:   Device* cpu_device = ctx.HostCPU();",
          "295:   string device_name;",
          "296:   if (tensor_handle->Type() != TensorHandle::LOCAL) {",
          "",
          "[Removed Lines]",
          "292: Status GetDeviceForInput(const EagerContext& ctx, TensorHandle* tensor_handle,",
          "293:                          Device** result) {",
          "",
          "[Added Lines]",
          "292: const KernelDef* GetKernelDef(const EagerOperation& op, const NodeDef* node_def,",
          "293:                               const Device* op_device) {",
          "294:   if (node_def == nullptr || op_device == nullptr) return nullptr;",
          "295:   const KernelDef* kernel_def = nullptr;",
          "296:   Status s = FindKernelDef(DeviceType(op_device->device_type()), *node_def,",
          "297:                            &kernel_def,",
          "299:   if (!s.ok()) return nullptr;",
          "300:   return kernel_def;",
          "301: }",
          "303: bool IsHostMemoryArg(const EagerOperation& op, const NodeDef* node_def,",
          "304:                      const Device* op_device, const KernelDef* kernel_def,",
          "305:                      const int port_id) {",
          "306:   if (op.is_function()) return false;",
          "307:   if (node_def == nullptr) return false;",
          "308:   if (kernel_def == nullptr || op_device == nullptr) return false;",
          "309:   const auto& host_memory_args = kernel_def->host_memory_arg();",
          "310:   const OpDef& op_def = OpRegistry::Global()->LookUp(op.Name())->op_def;",
          "311:   const int arg_id = OpPortIdToArgId(*node_def, op_def.input_arg(), port_id);",
          "313:   if (arg_id < 0) {",
          "314:     return false;",
          "315:   }",
          "316:   return std::find(host_memory_args.begin(), host_memory_args.end(),",
          "317:                    op_def.input_arg(arg_id).name()) != host_memory_args.end();",
          "318: }",
          "320: Status GetDeviceForInput(const EagerOperation& op, const EagerContext& ctx,",
          "321:                          const bool is_host_memory_arg,",
          "322:                          TensorHandle* tensor_handle, Device** result) {",
          "323: >>>>>>> f5381e0e10b (Fix OOB error when op input sizes do not match.)",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py||tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py": [
          "File: tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py -> tensorflow/python/kernel_tests/data_structures/dynamic_stitch_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.ops import array_ops",
          "23: from tensorflow.python.ops import data_flow_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     for datum, grad in zip(data, self.evaluate(grads[3:])):",
          "309:       self.assertAllEqual(7.0 * self.evaluate(datum), grad)",
          "312: if __name__ == \"__main__\":",
          "313:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   @test_util.run_in_graph_and_eager_modes",
          "313:   def testMismatchedDataAndIndexListSizes(self):",
          "314:     indices = [",
          "315:         constant_op.constant([2]),",
          "316:         constant_op.constant([1]),",
          "317:         constant_op.constant([0]),",
          "318:         constant_op.constant([3]),",
          "319:     ]",
          "320:     data = [",
          "321:         constant_op.constant([1.0]),",
          "322:         constant_op.constant([2.0]),",
          "323:         constant_op.constant([3.0]),",
          "324:         constant_op.constant([4.0])",
          "325:     ]",
          "326:     with self.assertRaisesRegex(",
          "327:         (ValueError, errors.InvalidArgumentError),",
          "328:         \"expected inputs .* do not match|List argument .* must match\"):",
          "329:       self.evaluate(data_flow_ops.dynamic_stitch(indices[0:2], data))",
          "331:     with self.assertRaisesRegex(",
          "332:         (ValueError, errors.InvalidArgumentError),",
          "333:         \"expected inputs .* do not match|List argument .* must match\"):",
          "334:       self.evaluate(data_flow_ops.dynamic_stitch(indices, data[0:2]))",
          "",
          "---------------"
        ]
      }
    }
  ]
}