{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b4c27428cf0549ab1afdee68141696549bffb9f",
      "candidate_info": {
        "commit_hash": "9b4c27428cf0549ab1afdee68141696549bffb9f",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/9b4c27428cf0549ab1afdee68141696549bffb9f",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Add helper parseQueryList for upcoming tests",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  return uri;",
          "119: }",
          "121: }  // namespace",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: static UriQueryListA * parseQueryList(const char * queryString) {",
          "124:  UriQueryListA * queryList;",
          "125:  const char * const first = queryString;",
          "126:  const char * const afterLast = first + strlen(first);",
          "127:  assert(uriDissectQueryMallocA(&queryList, NULL, first, afterLast)",
          "128:    == URI_SUCCESS);",
          "129:  return queryList;",
          "130: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "927396ee1592e591a235630bace1173eca77119b",
      "candidate_info": {
        "commit_hash": "927396ee1592e591a235630bace1173eca77119b",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/927396ee1592e591a235630bace1173eca77119b",
        "files": [
          "include/uriparser/UriBase.h"
        ],
        "message": "UriBase.h: Add missing word \"see\"",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h"
        ]
      }
    },
    {
      "candidate_hash": "2f48d2a3010303c4f716302d81ded6aeae6f09b6",
      "candidate_info": {
        "commit_hash": "2f48d2a3010303c4f716302d81ded6aeae6f09b6",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2f48d2a3010303c4f716302d81ded6aeae6f09b6",
        "files": [
          "test/VersionSuite.cpp"
        ],
        "message": "tests: Drop output \"bytes_printed: 5\\n\"",
        "before_after_code_files": [
          "test/VersionSuite.cpp||test/VersionSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/VersionSuite.cpp||test/VersionSuite.cpp": [
          "File: test/VersionSuite.cpp -> test/VersionSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  const int bytes_printed = asprintf(&INSIDE_VERSION, \"%d.%d.%d%s\",",
          "36:    URI_VER_MAJOR, URI_VER_MINOR, URI_VER_RELEASE, URI_VER_SUFFIX_ANSI);",
          "37:  ASSERT_TRUE(bytes_printed != -1);",
          "40:  const bool equal = !strcmp(INSIDE_VERSION, PACKAGE_VERSION);",
          "41:  if (! equal) {",
          "",
          "[Removed Lines]",
          "38:  printf(\"bytes_printed: %d\\n\", bytes_printed);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12d17600c6465647db6282e158bbd6da933ee416",
      "candidate_info": {
        "commit_hash": "12d17600c6465647db6282e158bbd6da933ee416",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/12d17600c6465647db6282e158bbd6da933ee416",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Use UriMemoryManager rather than struct UriMemoryManagerStruct",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     return malloc(size);",
          "66: }",
          "72:         size_t nmemb, size_t size) {",
          "73:     return calloc(nmemb, size);",
          "74: }",
          "80:         void * ptr, size_t size) {",
          "81:     return realloc(ptr, size);",
          "82: }",
          "88:         void * ptr, size_t nmemb, size_t size) {",
          "89: #if HAVE_REALLOCARRAY",
          "90:     return reallocarray(ptr, nmemb, size);",
          "",
          "[Removed Lines]",
          "63: static void * uriDefaultMalloc(",
          "64:         struct UriMemoryManagerStruct * URI_UNUSED(memory), size_t size) {",
          "70: static void * uriDefaultCalloc(",
          "71:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "78: static void * uriDefaultRealloc(",
          "79:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "86: static void * uriDefaultReallocarray(",
          "87:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "",
          "[Added Lines]",
          "63: static void * uriDefaultMalloc(UriMemoryManager * URI_UNUSED(memory),",
          "64:         size_t size) {",
          "70: static void * uriDefaultCalloc(UriMemoryManager * URI_UNUSED(memory),",
          "77: static void * uriDefaultRealloc(UriMemoryManager * URI_UNUSED(memory),",
          "84: static void * uriDefaultReallocarray(UriMemoryManager * URI_UNUSED(memory),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:         void * ptr) {",
          "108:     free(ptr);",
          "109: }",
          "",
          "[Removed Lines]",
          "106: static void uriDefaultFree(struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "",
          "[Added Lines]",
          "103: static void uriDefaultFree(UriMemoryManager * URI_UNUSED(memory),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "852d12162123aa817aa7cdb57fa87b8e814a22fe",
      "candidate_info": {
        "commit_hash": "852d12162123aa817aa7cdb57fa87b8e814a22fe",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/852d12162123aa817aa7cdb57fa87b8e814a22fe",
        "files": [
          "include/uriparser/Uri.h",
          "src/UriQuery.c",
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "Add API function FreeQueryListMm",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "src/UriQuery.c||src/UriQuery.c",
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "872: void URI_FUNC(FreeQueryList)(URI_TYPE(QueryList) * queryList);",
          "876: #ifdef __cplusplus",
          "877: }",
          "878: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888: int URI_FUNC(FreeQueryListMm)(URI_TYPE(QueryList) * queryList,",
          "889:   UriMemoryManager * memory);",
          "",
          "---------------"
        ],
        "src/UriQuery.c||src/UriQuery.c": [
          "File: src/UriQuery.c -> src/UriQuery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #ifndef URI_DOXYGEN",
          "65: # include <uriparser/Uri.h>",
          "66: # include \"UriCommon.h\"",
          "67: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: # include \"UriMemory.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348: void URI_FUNC(FreeQueryList)(URI_TYPE(QueryList) * queryList) {",
          "350:  while (queryList != NULL) {",
          "351:   URI_TYPE(QueryList) * nextBackup = queryList->next;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:  URI_FUNC(FreeQueryListMm)(queryList, NULL);",
          "351: }",
          "355: int URI_FUNC(FreeQueryListMm)(URI_TYPE(QueryList) * queryList,",
          "356:   UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354:   memory->free(memory, queryList);",
          "355:   queryList = nextBackup;",
          "356:  }",
          "357: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:  return URI_SUCCESS;",
          "",
          "---------------"
        ],
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   this->userData = NULL;",
          "103:  }",
          "105: private:",
          "106:  const CallCountLog * getCallCountLog() const {",
          "107:   return static_cast<CallCountLog *>(this->userData);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:  unsigned int getCallCountFree() const {",
          "106:   return this->getCallCountLog()->callCountFree;",
          "107:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153: TEST(FailingMemoryManagerSuite, NormalizeSyntaxExMm) {",
          "154:  UriUriA uri = parse(\"hTTp://example.org/path\");",
          "155:  const unsigned int mask = URI_NORMALIZE_SCHEME;  // anything but URI_NORMALIZED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: TEST(FailingMemoryManagerSuite, FreeQueryListMm) {",
          "158:  UriQueryListA * const queryList = parseQueryList(\"k1=v1\");",
          "159:  FailingMemoryManager failingMemoryManager;",
          "160:  ASSERT_EQ(failingMemoryManager.getCallCountFree(), 0);",
          "162:  uriFreeQueryListMmA(queryList, &failingMemoryManager);",
          "164:  ASSERT_GE(failingMemoryManager.getCallCountFree(), 1);",
          "165:  uriFreeQueryListA(queryList);",
          "166: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}