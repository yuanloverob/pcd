{
  "cve_id": "CVE-2021-29551",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of `MatrixTriangularSolve`(https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "480641e3599775a8895254ffbc0fc45621334f68",
  "patch_info": {
    "commit_hash": "480641e3599775a8895254ffbc0fc45621334f68",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68",
    "files": [
      "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
    ],
    "message": "Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
    "before_after_code_files": [
      "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h": [
      "File: tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h -> tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     const Tensor& in1 = ctx->input(1);",
      "164:     ValidateInputTensors(ctx, in0, in1);",
      "166:     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());",
      "167:     OP_REQUIRES(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "165:     if (!ctx->status().ok()) {",
      "166:       return;",
      "167:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "230:  private:",
      "231:   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,",
      "232:                             const Tensor& in1) override {",
      "233:     OP_REQUIRES(",
      "237:     OP_REQUIRES(",
      "240:   }",
      "241: };",
      "",
      "[Removed Lines]",
      "234:         ctx, in0.dims() >= 2,",
      "235:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));",
      "238:         ctx, in1.dims() >= 2,",
      "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));",
      "",
      "[Added Lines]",
      "236:     const auto in0_num_dims = in0.dims();",
      "238:         ctx, in0_num_dims >= 2,",
      "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));",
      "241:     const auto in1_num_dims = in1.dims();",
      "243:         ctx, in1_num_dims >= 2,",
      "244:         errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));",
      "246:     const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);",
      "247:     const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);",
      "248:     OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,",
      "249:                 errors::InvalidArgument(",
      "250:                     \"In[0] matrices in the last dimensions must be square (\",",
      "251:                     in0_last_dim, \" =/= \", in0_prev_dim, \")\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de0fdd003c4613106b7b451433c1d1e7ed4c04fd",
      "candidate_info": {
        "commit_hash": "de0fdd003c4613106b7b451433c1d1e7ed4c04fd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/de0fdd003c4613106b7b451433c1d1e7ed4c04fd",
        "files": [
          "tensorflow/core/kernels/matrix_triangular_solve_op_impl.h"
        ],
        "message": "Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
        "before_after_code_files": [
          "tensorflow/core/kernels/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/matrix_triangular_solve_op_impl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/matrix_triangular_solve_op_impl.h": [
          "File: tensorflow/core/kernels/matrix_triangular_solve_op_impl.h -> tensorflow/core/kernels/matrix_triangular_solve_op_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     const Tensor& in1 = ctx->input(1);",
          "164:     ValidateInputTensors(ctx, in0, in1);",
          "166:     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());",
          "167:     OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     if (!ctx->status().ok()) {",
          "166:       return;",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:  private:",
          "231:   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,",
          "232:                             const Tensor& in1) override {",
          "233:     OP_REQUIRES(",
          "237:     OP_REQUIRES(",
          "240:   }",
          "241: };",
          "",
          "[Removed Lines]",
          "234:         ctx, in0.dims() >= 2,",
          "235:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));",
          "238:         ctx, in1.dims() >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));",
          "",
          "[Added Lines]",
          "236:     const auto in0_num_dims = in0.dims();",
          "238:         ctx, in0_num_dims >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));",
          "241:     const auto in1_num_dims = in1.dims();",
          "243:         ctx, in1_num_dims >= 2,",
          "244:         errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));",
          "246:     const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);",
          "247:     const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);",
          "248:     OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,",
          "249:                 errors::InvalidArgument(",
          "250:                     \"In[0] matrices in the last dimensions must be square (\",",
          "251:                     in0_last_dim, \" =/= \", in0_prev_dim, \")\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ecb56ac8ee5cf96df56a9e7a4ddecdde4518510a",
      "candidate_info": {
        "commit_hash": "ecb56ac8ee5cf96df56a9e7a4ddecdde4518510a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ecb56ac8ee5cf96df56a9e7a4ddecdde4518510a",
        "files": [
          "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
        ],
        "message": "Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
        "before_after_code_files": [
          "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h": [
          "File: tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h -> tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     const Tensor& in1 = ctx->input(1);",
          "164:     ValidateInputTensors(ctx, in0, in1);",
          "166:     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());",
          "167:     OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     if (!ctx->status().ok()) {",
          "166:       return;",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:  private:",
          "231:   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,",
          "232:                             const Tensor& in1) override {",
          "233:     OP_REQUIRES(",
          "237:     OP_REQUIRES(",
          "240:   }",
          "241: };",
          "",
          "[Removed Lines]",
          "234:         ctx, in0.dims() >= 2,",
          "235:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));",
          "238:         ctx, in1.dims() >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));",
          "",
          "[Added Lines]",
          "236:     const auto in0_num_dims = in0.dims();",
          "238:         ctx, in0_num_dims >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));",
          "241:     const auto in1_num_dims = in1.dims();",
          "243:         ctx, in1_num_dims >= 2,",
          "244:         errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));",
          "246:     const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);",
          "247:     const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);",
          "248:     OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,",
          "249:                 errors::InvalidArgument(",
          "250:                     \"In[0] matrices in the last dimensions must be square (\",",
          "251:                     in0_last_dim, \" =/= \", in0_prev_dim, \")\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56397503159c92e078e1a17e8c434315b1d217fa",
      "candidate_info": {
        "commit_hash": "56397503159c92e078e1a17e8c434315b1d217fa",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/56397503159c92e078e1a17e8c434315b1d217fa",
        "files": [
          "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
        ],
        "message": "Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
        "before_after_code_files": [
          "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
          ],
          "candidate": [
            "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h": [
          "File: tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h -> tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     const Tensor& in1 = ctx->input(1);",
          "164:     ValidateInputTensors(ctx, in0, in1);",
          "166:     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());",
          "167:     OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     if (!ctx->status().ok()) {",
          "166:       return;",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:  private:",
          "231:   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,",
          "232:                             const Tensor& in1) override {",
          "233:     OP_REQUIRES(",
          "237:     OP_REQUIRES(",
          "240:   }",
          "241: };",
          "",
          "[Removed Lines]",
          "234:         ctx, in0.dims() >= 2,",
          "235:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));",
          "238:         ctx, in1.dims() >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));",
          "",
          "[Added Lines]",
          "236:     const auto in0_num_dims = in0.dims();",
          "238:         ctx, in0_num_dims >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));",
          "241:     const auto in1_num_dims = in1.dims();",
          "243:         ctx, in1_num_dims >= 2,",
          "244:         errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));",
          "246:     const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);",
          "247:     const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);",
          "248:     OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,",
          "249:                 errors::InvalidArgument(",
          "250:                     \"In[0] matrices in the last dimensions must be square (\",",
          "251:                     in0_last_dim, \" =/= \", in0_prev_dim, \")\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02fd9d38c4431d2f911377e83d34fac6d6a11382",
      "candidate_info": {
        "commit_hash": "02fd9d38c4431d2f911377e83d34fac6d6a11382",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/02fd9d38c4431d2f911377e83d34fac6d6a11382",
        "files": [
          "tensorflow/core/kernels/matrix_triangular_solve_op_impl.h"
        ],
        "message": "Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
        "before_after_code_files": [
          "tensorflow/core/kernels/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/matrix_triangular_solve_op_impl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/matrix_triangular_solve_op_impl.h||tensorflow/core/kernels/matrix_triangular_solve_op_impl.h": [
          "File: tensorflow/core/kernels/matrix_triangular_solve_op_impl.h -> tensorflow/core/kernels/matrix_triangular_solve_op_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     const Tensor& in1 = ctx->input(1);",
          "164:     ValidateInputTensors(ctx, in0, in1);",
          "166:     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());",
          "167:     OP_REQUIRES(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     if (!ctx->status().ok()) {",
          "166:       return;",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:  private:",
          "231:   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,",
          "232:                             const Tensor& in1) override {",
          "233:     OP_REQUIRES(",
          "237:     OP_REQUIRES(",
          "240:   }",
          "241: };",
          "",
          "[Removed Lines]",
          "234:         ctx, in0.dims() >= 2,",
          "235:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));",
          "238:         ctx, in1.dims() >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));",
          "",
          "[Added Lines]",
          "236:     const auto in0_num_dims = in0.dims();",
          "238:         ctx, in0_num_dims >= 2,",
          "239:         errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));",
          "241:     const auto in1_num_dims = in1.dims();",
          "243:         ctx, in1_num_dims >= 2,",
          "244:         errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));",
          "246:     const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);",
          "247:     const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);",
          "248:     OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,",
          "249:                 errors::InvalidArgument(",
          "250:                     \"In[0] matrices in the last dimensions must be square (\",",
          "251:                     in0_last_dim, \" =/= \", in0_prev_dim, \")\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}