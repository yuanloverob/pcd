{
  "cve_id": "CVE-2017-12992",
  "cve_desc": "The RIPng parser in tcpdump before 4.9.2 has a buffer over-read in print-ripng.c:ripng_print().",
  "repo": "the-tcpdump-group/tcpdump",
  "patch_hash": "e942fb84fbe3a73a98a00d2a279425872b5fb9d2",
  "patch_info": {
    "commit_hash": "e942fb84fbe3a73a98a00d2a279425872b5fb9d2",
    "repo": "the-tcpdump-group/tcpdump",
    "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/e942fb84fbe3a73a98a00d2a279425872b5fb9d2",
    "files": [
      "print-ripng.c",
      "tests/TESTLIST",
      "tests/hoobr_ripng_print.out",
      "tests/hoobr_ripng_print.pcap"
    ],
    "message": "CVE-2017-12992/RIPng: Clean up bounds checking.\n\nDo bounds checking as we access items.\n\nScan the list of netinfo6 entries based on the supplied packet length,\nwithout taking the captured length into account; let the aforementioned\nbounds checking handle that.\n\nThis fixes a buffer over-read discovered by Kamil Frankowicz.\n\nAdd a test using the capture file supplied by the reporter(s).",
    "before_after_code_files": [
      "print-ripng.c||print-ripng.c"
    ]
  },
  "patch_diff": {
    "print-ripng.c||print-ripng.c": [
      "File: print-ripng.c -> print-ripng.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "110: {",
      "111:  register const struct rip6 *rp = (const struct rip6 *)dat;",
      "112:  register const struct netinfo6 *ni;",
      "126:  switch (rp->rip6_cmd) {",
      "128:  case RIP6_REQUEST:",
      "135:   }",
      "138:   else",
      "143:    if (ndo->ndo_vflag > 1)",
      "144:     ND_PRINT((ndo, \"\\n\\t\"));",
      "145:    else",
      "146:     ND_PRINT((ndo, \" \"));",
      "147:    rip6_entry_print(ndo, ni, 0);",
      "148:   }",
      "149:   break;",
      "150:  case RIP6_RESPONSE:",
      "153:    ND_PRINT((ndo, \" ripng-resp %d[%u]:\", j, length));",
      "154:   else",
      "155:    ND_PRINT((ndo, \" ripng-resp %d:\", j));",
      "159:    if (ndo->ndo_vflag > 1)",
      "160:     ND_PRINT((ndo, \"\\n\\t\"));",
      "161:    else",
      "162:     ND_PRINT((ndo, \" \"));",
      "163:    rip6_entry_print(ndo, ni, ni->rip6_metric);",
      "164:   }",
      "167:   break;",
      "168:  default:",
      "169:   ND_PRINT((ndo, \" ripng-%d ?? %u\", rp->rip6_cmd, length));",
      "170:   break;",
      "171:  }",
      "172:  if (rp->rip6_vers != RIP6_VERSION)",
      "173:   ND_PRINT((ndo, \" [vers %d]\", rp->rip6_vers));",
      "174: }",
      "",
      "[Removed Lines]",
      "113:  register u_int amt;",
      "114:  register u_int i;",
      "115:  int j;",
      "116:  int trunc;",
      "118:  if (ndo->ndo_snapend < dat)",
      "119:   return;",
      "120:  amt = ndo->ndo_snapend - dat;",
      "121:  i = min(length, amt);",
      "122:  if (i < (sizeof(struct rip6) - sizeof(struct netinfo6)))",
      "123:   return;",
      "124:  i -= (sizeof(struct rip6) - sizeof(struct netinfo6));",
      "129:   j = length / sizeof(*ni);",
      "130:   if (j == 1",
      "131:       &&  rp->rip6_nets->rip6_metric == HOPCNT_INFINITY6",
      "132:       &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
      "133:    ND_PRINT((ndo, \" ripng-req dump\"));",
      "134:    break;",
      "136:   if (j * sizeof(*ni) != length - 4)",
      "137:    ND_PRINT((ndo, \" ripng-req %d[%u]:\", j, length));",
      "139:    ND_PRINT((ndo, \" ripng-req %d:\", j));",
      "140:   trunc = ((i / sizeof(*ni)) * sizeof(*ni) != i);",
      "141:   for (ni = rp->rip6_nets; i >= sizeof(*ni);",
      "142:       i -= sizeof(*ni), ++ni) {",
      "151:   j = length / sizeof(*ni);",
      "152:   if (j * sizeof(*ni) != length - 4)",
      "156:   trunc = ((i / sizeof(*ni)) * sizeof(*ni) != i);",
      "157:   for (ni = rp->rip6_nets; i >= sizeof(*ni);",
      "158:       i -= sizeof(*ni), ++ni) {",
      "165:   if (trunc)",
      "166:    ND_PRINT((ndo, \"[|ripng]\"));",
      "",
      "[Added Lines]",
      "113:  unsigned int length_left;",
      "114:  u_int j;",
      "116:  ND_TCHECK(rp->rip6_cmd);",
      "120:   length_left = length;",
      "121:   if (length_left < (sizeof(struct rip6) - sizeof(struct netinfo6)))",
      "122:    goto trunc;",
      "123:   length_left -= (sizeof(struct rip6) - sizeof(struct netinfo6));",
      "124:    j = length_left / sizeof(*ni);",
      "125:   if (j == 1) {",
      "126:    ND_TCHECK(rp->rip6_nets);",
      "127:    if (rp->rip6_nets->rip6_metric == HOPCNT_INFINITY6",
      "128:        &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
      "129:     ND_PRINT((ndo, \" ripng-req dump\"));",
      "130:     break;",
      "131:    }",
      "133:   if (j * sizeof(*ni) != length_left)",
      "134:    ND_PRINT((ndo, \" ripng-req %u[%u]:\", j, length));",
      "136:    ND_PRINT((ndo, \" ripng-req %u:\", j));",
      "137:   for (ni = rp->rip6_nets; length_left >= sizeof(*ni);",
      "138:       length_left -= sizeof(*ni), ++ni) {",
      "139:    ND_TCHECK(*ni);",
      "146:   if (length_left != 0)",
      "147:    goto trunc;",
      "150:   length_left = length;",
      "151:   if (length_left < (sizeof(struct rip6) - sizeof(struct netinfo6)))",
      "152:    goto trunc;",
      "153:   length_left -= (sizeof(struct rip6) - sizeof(struct netinfo6));",
      "154:   j = length_left / sizeof(*ni);",
      "155:   if (j * sizeof(*ni) != length_left)",
      "159:   for (ni = rp->rip6_nets; length_left >= sizeof(*ni);",
      "160:       length_left -= sizeof(*ni), ++ni) {",
      "161:    ND_TCHECK(*ni);",
      "168:   if (length_left != 0)",
      "169:    goto trunc;",
      "175:  ND_TCHECK(rp->rip6_vers);",
      "178:  return;",
      "180: trunc:",
      "181:  ND_PRINT((ndo, \"[|ripng]\"));",
      "182:  return;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0829e7c05444b1c6c2e4387fc98a7b456209d63",
      "candidate_info": {
        "commit_hash": "c0829e7c05444b1c6c2e4387fc98a7b456209d63",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/c0829e7c05444b1c6c2e4387fc98a7b456209d63",
        "files": [
          "print-ripng.c"
        ],
        "message": "Use nd_ types, add EXTRACT_ calls.",
        "before_after_code_files": [
          "print-ripng.c||print-ripng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ripng.c||print-ripng.c"
          ],
          "candidate": [
            "print-ripng.c||print-ripng.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ripng.c||print-ripng.c": [
          "File: print-ripng.c -> print-ripng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: struct netinfo6 {",
          "68:  struct in6_addr rip6_dest;",
          "72: };",
          "74: struct rip6 {",
          "78:  union {",
          "79:   struct netinfo6 ru6_nets[1];",
          "81:  } rip6un;",
          "82: #define rip6_nets rip6un.ru6_nets",
          "83: #define rip6_tracefile rip6un.ru6_tracefile",
          "",
          "[Removed Lines]",
          "69:  uint16_t rip6_tag;",
          "70:  uint8_t  rip6_plen;",
          "71:  uint8_t  rip6_metric;",
          "75:  uint8_t  rip6_cmd;",
          "76:  uint8_t  rip6_vers;",
          "77:  uint8_t  rip6_res1[2];",
          "80:   char ru6_tracefile[1];",
          "",
          "[Added Lines]",
          "69:  nd_uint16_t rip6_tag;",
          "70:  nd_uint8_t rip6_plen;",
          "71:  nd_uint8_t rip6_metric;",
          "75:  nd_uint8_t rip6_cmd;",
          "76:  nd_uint8_t rip6_vers;",
          "77:  nd_byte  rip6_res1[2];",
          "80:   nd_byte ru6_tracefile[1];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: #endif",
          "96: static int",
          "98: {",
          "99:  int l;",
          "103:  if (metric)",
          "105:  return l;",
          "106: }",
          "",
          "[Removed Lines]",
          "97: rip6_entry_print(netdissect_options *ndo, const struct netinfo6 *ni, int metric)",
          "100:  l = ND_PRINT((ndo, \"%s/%d\", ip6addr_string(ndo, &ni->rip6_dest), ni->rip6_plen));",
          "101:  if (ni->rip6_tag)",
          "102:   l += ND_PRINT((ndo, \" [%d]\", EXTRACT_BE_U_2(&ni->rip6_tag)));",
          "104:   l += ND_PRINT((ndo, \" (%d)\", ni->rip6_metric));",
          "",
          "[Added Lines]",
          "97: rip6_entry_print(netdissect_options *ndo, const struct netinfo6 *ni, u_int metric)",
          "100:  uint16_t tag;",
          "102:  l = ND_PRINT((ndo, \"%s/%u\", ip6addr_string(ndo, &ni->rip6_dest), EXTRACT_U_1(ni->rip6_plen)));",
          "103:  tag = EXTRACT_BE_U_2(ni->rip6_tag);",
          "104:  if (tag)",
          "105:   l += ND_PRINT((ndo, \" [%u]\", tag));",
          "107:   l += ND_PRINT((ndo, \" (%u)\", metric));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: ripng_print(netdissect_options *ndo, const u_char *dat, unsigned int length)",
          "110: {",
          "111:  const struct rip6 *rp = (const struct rip6 *)dat;",
          "112:  const struct netinfo6 *ni;",
          "113:  unsigned int length_left;",
          "114:  u_int j;",
          "116:  ND_TCHECK(rp->rip6_cmd);",
          "119:  case RIP6_REQUEST:",
          "120:   length_left = length;",
          "",
          "[Removed Lines]",
          "117:  switch (rp->rip6_cmd) {",
          "",
          "[Added Lines]",
          "115:  uint8_t cmd;",
          "121:  cmd = EXTRACT_U_1(rp->rip6_cmd);",
          "122:  switch (cmd) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:    j = length_left / sizeof(*ni);",
          "125:   if (j == 1) {",
          "126:    ND_TCHECK(rp->rip6_nets);",
          "128:        &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "129:     ND_PRINT((ndo, \" ripng-req dump\"));",
          "130:     break;",
          "",
          "[Removed Lines]",
          "127:    if (rp->rip6_nets->rip6_metric == HOPCNT_INFINITY6",
          "",
          "[Added Lines]",
          "132:    if (EXTRACT_U_1(rp->rip6_nets->rip6_metric) == HOPCNT_INFINITY6",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   length_left -= (sizeof(struct rip6) - sizeof(struct netinfo6));",
          "154:   j = length_left / sizeof(*ni);",
          "155:   if (j * sizeof(*ni) != length_left)",
          "157:   else",
          "159:   for (ni = rp->rip6_nets; length_left >= sizeof(*ni);",
          "160:       length_left -= sizeof(*ni), ++ni) {",
          "161:    ND_TCHECK(*ni);",
          "",
          "[Removed Lines]",
          "156:    ND_PRINT((ndo, \" ripng-resp %d[%u]:\", j, length));",
          "158:    ND_PRINT((ndo, \" ripng-resp %d:\", j));",
          "",
          "[Added Lines]",
          "161:    ND_PRINT((ndo, \" ripng-resp %u[%u]:\", j, length));",
          "163:    ND_PRINT((ndo, \" ripng-resp %u:\", j));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:     ND_PRINT((ndo, \"\\n\\t\"));",
          "164:    else",
          "165:     ND_PRINT((ndo, \" \"));",
          "167:   }",
          "168:   if (length_left != 0)",
          "169:    goto trunc;",
          "170:   break;",
          "171:  default:",
          "173:   break;",
          "174:  }",
          "175:  ND_TCHECK(rp->rip6_vers);",
          "178:  return;",
          "180: trunc:",
          "",
          "[Removed Lines]",
          "166:    rip6_entry_print(ndo, ni, ni->rip6_metric);",
          "172:   ND_PRINT((ndo, \" ripng-%d ?? %u\", rp->rip6_cmd, length));",
          "176:  if (rp->rip6_vers != RIP6_VERSION)",
          "177:   ND_PRINT((ndo, \" [vers %d]\", rp->rip6_vers));",
          "",
          "[Added Lines]",
          "171:    rip6_entry_print(ndo, ni, EXTRACT_U_1(ni->rip6_metric));",
          "177:   ND_PRINT((ndo, \" ripng-%u ?? %u\", cmd, length));",
          "181:  if (EXTRACT_U_1(rp->rip6_vers) != RIP6_VERSION)",
          "182:   ND_PRINT((ndo, \" [vers %u]\", EXTRACT_U_1(rp->rip6_vers)));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57b0a999a9fafc936e2a4876cb27624c3cd58568",
      "candidate_info": {
        "commit_hash": "57b0a999a9fafc936e2a4876cb27624c3cd58568",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/57b0a999a9fafc936e2a4876cb27624c3cd58568",
        "files": [
          "print-ripng.c"
        ],
        "message": "RIPng: Use more ND_TCHECK_n() macros",
        "before_after_code_files": [
          "print-ripng.c||print-ripng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ripng.c||print-ripng.c"
          ],
          "candidate": [
            "print-ripng.c||print-ripng.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ripng.c||print-ripng.c": [
          "File: print-ripng.c -> print-ripng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  unsigned int length_left;",
          "118:  u_int j;",
          "121:  cmd = EXTRACT_U_1(rp->rip6_cmd);",
          "122:  switch (cmd) {",
          "",
          "[Removed Lines]",
          "120:  ND_TCHECK(rp->rip6_cmd);",
          "",
          "[Added Lines]",
          "120:  ND_TCHECK_1(rp->rip6_cmd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:   ND_PRINT(\" ripng-%u ?? %u\", cmd, length);",
          "178:   break;",
          "179:  }",
          "181:  if (EXTRACT_U_1(rp->rip6_vers) != RIP6_VERSION)",
          "182:   ND_PRINT(\" [vers %u]\", EXTRACT_U_1(rp->rip6_vers));",
          "183:  return;",
          "",
          "[Removed Lines]",
          "180:  ND_TCHECK(rp->rip6_vers);",
          "",
          "[Added Lines]",
          "180:  ND_TCHECK_1(rp->rip6_vers);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
      "candidate_info": {
        "commit_hash": "3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/3db38df8ed9dcd8191438bb69e2ddbda6d90ed61",
        "files": [
          "print-aodv.c",
          "print-bgp.c",
          "print-domain.c",
          "print-esp.c",
          "print-icmp6.c",
          "print-ip6.c",
          "print-isakmp.c",
          "print-isoclns.c",
          "print-ldp.c",
          "print-lwres.c",
          "print-olsr.c",
          "print-ospf6.c",
          "print-pgm.c",
          "print-pim.c",
          "print-ripng.c",
          "print-rsvp.c"
        ],
        "message": "Use nd_ipv6 rather than struct in6_addr in packet-layout structures.\n\nAlso, use it, and nd_ipv4, in sizeof() operations.",
        "before_after_code_files": [
          "print-aodv.c||print-aodv.c",
          "print-bgp.c||print-bgp.c",
          "print-domain.c||print-domain.c",
          "print-esp.c||print-esp.c",
          "print-icmp6.c||print-icmp6.c",
          "print-ip6.c||print-ip6.c",
          "print-isakmp.c||print-isakmp.c",
          "print-isoclns.c||print-isoclns.c",
          "print-ldp.c||print-ldp.c",
          "print-lwres.c||print-lwres.c",
          "print-olsr.c||print-olsr.c",
          "print-ospf6.c||print-ospf6.c",
          "print-pgm.c||print-pgm.c",
          "print-pim.c||print-pim.c",
          "print-ripng.c||print-ripng.c",
          "print-rsvp.c||print-rsvp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ripng.c||print-ripng.c"
          ],
          "candidate": [
            "print-ripng.c||print-ripng.c"
          ]
        }
      },
      "candidate_diff": {
        "print-aodv.c||print-aodv.c": [
          "File: print-aodv.c -> print-aodv.c"
        ],
        "print-bgp.c||print-bgp.c": [
          "File: print-bgp.c -> print-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     char *pos = addr;",
          "635:     switch(addr_length) {",
          "638:         nd_snprintf(pos, sizeof(addr), \"%s\", ipaddr_string(ndo, pptr));",
          "639:         break;",
          "642:         nd_snprintf(pos, sizeof(addr), \"%s\", ip6addr_string(ndo, pptr));",
          "643:         break;",
          "644:     default:",
          "",
          "[Removed Lines]",
          "637:         ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "641:         ND_TCHECK_LEN(pptr, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "637:         ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "641:         ND_TCHECK_LEN(pptr, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:     pptr += 8;",
          "892:     vpn_ip = pptr;",
          "898:     nd_snprintf(buf, buflen, \"RD: %s, VPN IP Address: %s, MC Group Address: %s\",",
          "899:              bgp_vpn_rd_print(ndo, rd), ipaddr_string(ndo, vpn_ip), ipaddr_string(ndo, pptr));",
          "",
          "[Removed Lines]",
          "891:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "893:     pptr += sizeof(struct in_addr);",
          "896:     ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "891:     ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "893:     pptr += sizeof(nd_ipv4);",
          "896:     ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1716:                 case (AFNUM_INET<<8 | SAFNUM_RT_ROUTING_INFO):",
          "1717:                 case (AFNUM_INET<<8 | SAFNUM_MULTICAST_VPN):",
          "1718:                 case (AFNUM_INET<<8 | SAFNUM_MDT):",
          "1720:                         ND_PRINT(\"invalid len\");",
          "1721:                         tlen = 0;",
          "1722:                     } else {",
          "1724:                         ND_PRINT(\"%s\",ipaddr_string(ndo, tptr));",
          "1727:                     }",
          "1728:                     break;",
          "1729:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNICAST):",
          "1730:                 case (AFNUM_INET<<8 | SAFNUM_VPNMULTICAST):",
          "1731:                 case (AFNUM_INET<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1733:                         ND_PRINT(\"invalid len\");",
          "1734:                         tlen = 0;",
          "1735:                     } else {",
          "1736:                         ND_TCHECK_LEN(tptr,",
          "1738:                         ND_PRINT(\"RD: %s, %s\",",
          "1739:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1740:                                   ipaddr_string(ndo, tptr+BGP_VPN_RD_LEN));",
          "1743:                     }",
          "1744:                     break;",
          "1745:                 case (AFNUM_INET6<<8 | SAFNUM_UNICAST):",
          "1746:                 case (AFNUM_INET6<<8 | SAFNUM_MULTICAST):",
          "1747:                 case (AFNUM_INET6<<8 | SAFNUM_UNIMULTICAST):",
          "1748:                 case (AFNUM_INET6<<8 | SAFNUM_LABUNICAST):",
          "1750:                         ND_PRINT(\"invalid len\");",
          "1751:                         tlen = 0;",
          "1752:                     } else {",
          "1754:                         ND_PRINT(\"%s\", ip6addr_string(ndo, tptr));",
          "1757:                     }",
          "1758:                     break;",
          "1759:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNICAST):",
          "1760:                 case (AFNUM_INET6<<8 | SAFNUM_VPNMULTICAST):",
          "1761:                 case (AFNUM_INET6<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1763:                         ND_PRINT(\"invalid len\");",
          "1764:                         tlen = 0;",
          "1765:                     } else {",
          "1766:                         ND_TCHECK_LEN(tptr,",
          "1768:                         ND_PRINT(\"RD: %s, %s\",",
          "1769:                                   bgp_vpn_rd_print(ndo, tptr),",
          "1770:                                   ip6addr_string(ndo, tptr+BGP_VPN_RD_LEN));",
          "1773:                     }",
          "1774:                     break;",
          "1775:                 case (AFNUM_VPLS<<8 | SAFNUM_VPLS):",
          "1776:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNICAST):",
          "1777:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNMULTICAST):",
          "1778:                 case (AFNUM_L2VPN<<8 | SAFNUM_VPNUNIMULTICAST):",
          "1780:                         ND_PRINT(\"invalid len\");",
          "1781:                         tlen = 0;",
          "1782:                     } else {",
          "1784:                         ND_PRINT(\"%s\", ipaddr_string(ndo, tptr));",
          "1787:                     }",
          "1788:                     break;",
          "1789:                 case (AFNUM_NSAP<<8 | SAFNUM_UNICAST):",
          "",
          "[Removed Lines]",
          "1719:                     if (tlen < sizeof(struct in_addr)) {",
          "1723:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1725:                         tlen -= sizeof(struct in_addr);",
          "1726:                         tptr += sizeof(struct in_addr);",
          "1732:                     if (tlen < sizeof(struct in_addr)+BGP_VPN_RD_LEN) {",
          "1737:                                       sizeof(struct in_addr) + BGP_VPN_RD_LEN);",
          "1741:                         tlen -= (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1742:                         tptr += (sizeof(struct in_addr)+BGP_VPN_RD_LEN);",
          "1749:                     if (tlen < sizeof(struct in6_addr)) {",
          "1753:                         ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "1755:                         tlen -= sizeof(struct in6_addr);",
          "1756:                         tptr += sizeof(struct in6_addr);",
          "1762:                     if (tlen < sizeof(struct in6_addr)+BGP_VPN_RD_LEN) {",
          "1767:                                       sizeof(struct in6_addr) + BGP_VPN_RD_LEN);",
          "1771:                         tlen -= (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1772:                         tptr += (sizeof(struct in6_addr)+BGP_VPN_RD_LEN);",
          "1779:                     if (tlen < sizeof(struct in_addr)) {",
          "1783:                         ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "1785:                         tlen -= (sizeof(struct in_addr));",
          "1786:                         tptr += (sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "1719:                     if (tlen < sizeof(nd_ipv4)) {",
          "1723:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "1725:                         tlen -= sizeof(nd_ipv4);",
          "1726:                         tptr += sizeof(nd_ipv4);",
          "1732:                     if (tlen < sizeof(nd_ipv4)+BGP_VPN_RD_LEN) {",
          "1737:                                       sizeof(nd_ipv4) + BGP_VPN_RD_LEN);",
          "1741:                         tlen -= (sizeof(nd_ipv4)+BGP_VPN_RD_LEN);",
          "1742:                         tptr += (sizeof(nd_ipv4)+BGP_VPN_RD_LEN);",
          "1749:                     if (tlen < sizeof(nd_ipv6)) {",
          "1753:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "1755:                         tlen -= sizeof(nd_ipv6);",
          "1756:                         tptr += sizeof(nd_ipv6);",
          "1762:                     if (tlen < sizeof(nd_ipv6)+BGP_VPN_RD_LEN) {",
          "1767:                                       sizeof(nd_ipv6) + BGP_VPN_RD_LEN);",
          "1771:                         tlen -= (sizeof(nd_ipv6)+BGP_VPN_RD_LEN);",
          "1772:                         tptr += (sizeof(nd_ipv6)+BGP_VPN_RD_LEN);",
          "1779:                     if (tlen < sizeof(nd_ipv4)) {",
          "1783:                         ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "1785:                         tlen -= (sizeof(nd_ipv4));",
          "1786:                         tptr += (sizeof(nd_ipv4));",
          "",
          "---------------"
        ],
        "print-domain.c||print-domain.c": [
          "File: print-domain.c -> print-domain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:  switch (typ) {",
          "433:  case T_A:",
          "435:    return(NULL);",
          "436:   ND_PRINT(\" %s\", intoa(EXTRACT_IPV4_TO_NETWORK_ORDER(cp)));",
          "437:   break;",
          "",
          "[Removed Lines]",
          "434:   if (!ND_TTEST_LEN(cp, sizeof(struct in_addr)))",
          "",
          "[Added Lines]",
          "434:   if (!ND_TTEST_LEN(cp, sizeof(nd_ipv4)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:      {",
          "503:   char ntop_buf[INET6_ADDRSTRLEN];",
          "506:    return(NULL);",
          "507:   ND_PRINT(\" %s\",",
          "508:       addrtostr6(cp, ntop_buf, sizeof(ntop_buf)));",
          "",
          "[Removed Lines]",
          "505:   if (!ND_TTEST_LEN(cp, sizeof(struct in6_addr)))",
          "",
          "[Added Lines]",
          "505:   if (!ND_TTEST_LEN(cp, sizeof(nd_ipv6)))",
          "",
          "---------------"
        ],
        "print-esp.c||print-esp.c": [
          "File: print-esp.c -> print-esp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:    if (sa->spi == EXTRACT_BE_U_4(esp->esp_spi) &&",
          "718:        sa->daddr_version == 6 &&",
          "719:        UNALIGNED_MEMCMP(&sa->daddr.in6, &ip6->ip6_dst,",
          "721:     break;",
          "722:    }",
          "723:   }",
          "",
          "[Removed Lines]",
          "720:        sizeof(struct in6_addr)) == 0) {",
          "",
          "[Added Lines]",
          "720:        sizeof(nd_ipv6)) == 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:    if (sa->spi == EXTRACT_BE_U_4(esp->esp_spi) &&",
          "734:        sa->daddr_version == 4 &&",
          "735:        UNALIGNED_MEMCMP(&sa->daddr.in4, &ip->ip_dst,",
          "737:     break;",
          "738:    }",
          "739:   }",
          "",
          "[Removed Lines]",
          "736:        sizeof(struct in_addr)) == 0) {",
          "",
          "[Added Lines]",
          "736:        sizeof(nd_ipv4)) == 0) {",
          "",
          "---------------"
        ],
        "print-icmp6.c||print-icmp6.c": [
          "File: print-icmp6.c -> print-icmp6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: #define ND_OPT_DNSSL   31",
          "297: };",
          "299: #define ND_OPT_PI_FLAG_ONLINK  0x80",
          "",
          "[Removed Lines]",
          "289:  nd_uint8_t  nd_opt_pi_type;",
          "290:  nd_uint8_t  nd_opt_pi_len;",
          "291:  nd_uint8_t  nd_opt_pi_prefix_len;",
          "292:  nd_uint8_t  nd_opt_pi_flags_reserved;",
          "293:  nd_uint32_t  nd_opt_pi_valid_time;",
          "294:  nd_uint32_t  nd_opt_pi_preferred_time;",
          "295:  nd_uint32_t  nd_opt_pi_reserved2;",
          "296:  struct in6_addr nd_opt_pi_prefix;",
          "",
          "[Added Lines]",
          "289:  nd_uint8_t nd_opt_pi_type;",
          "290:  nd_uint8_t nd_opt_pi_len;",
          "291:  nd_uint8_t nd_opt_pi_prefix_len;",
          "292:  nd_uint8_t nd_opt_pi_flags_reserved;",
          "293:  nd_uint32_t nd_opt_pi_valid_time;",
          "294:  nd_uint32_t nd_opt_pi_preferred_time;",
          "295:  nd_uint32_t nd_opt_pi_reserved2;",
          "296:  nd_ipv6  nd_opt_pi_prefix;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1275:                 break;",
          "1276:  case ICMP6_HADISCOV_REPLY:",
          "1277:   if (ndo->ndo_vflag) {",
          "1279:    const u_char *cp;",
          "1281:    ND_TCHECK_2(dp->icmp6_data16[0]);",
          "1282:    ND_PRINT(\", id 0x%04x\", EXTRACT_BE_U_2(dp->icmp6_data16[0]));",
          "1283:    cp = (const u_char *)dp + length;",
          "1285:    for (; (const u_char *)in6 < cp; in6++) {",
          "1286:     ND_TCHECK_SIZE(in6);",
          "1287:     ND_PRINT(\", %s\", ip6addr_string(ndo, in6));",
          "",
          "[Removed Lines]",
          "1278:    const struct in6_addr *in6;",
          "1284:    in6 = (const struct in6_addr *)(dp + 1);",
          "",
          "[Added Lines]",
          "1278:    const nd_ipv6 *in6;",
          "1284:    in6 = (const nd_ipv6 *)(dp + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1511:    opri = (const struct nd_opt_route_info *)op;",
          "1512:    ND_TCHECK_4(opri->nd_opt_rti_lifetime);",
          "1513:    memset(&in6, 0, sizeof(in6));",
          "1515:    switch (opt_len) {",
          "1516:    case 1:",
          "1517:     break;",
          "",
          "[Removed Lines]",
          "1514:    in6p = (const struct in6_addr *)(opri + 1);",
          "",
          "[Added Lines]",
          "1514:    in6p = (const nd_ipv6 *)(opri + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1595:                     ND_PRINT(\" [invalid number of groups]\");",
          "1596:                     return;",
          "1597:      }",
          "1599:             ND_PRINT(\" [gaddr %s\", ip6addr_string(ndo, bp + group + 4));",
          "1600:      ND_PRINT(\" %s\", tok2str(mldv2report2str, \" [v2-report-#%u]\",",
          "1601:                                          EXTRACT_U_1(bp + group)));",
          "1602:             nsrcs = EXTRACT_BE_U_2(bp + group + 2);",
          "1605:                     ND_PRINT(\" [invalid number of sources %u]\", nsrcs);",
          "1606:                     return;",
          "1607:      }",
          "",
          "[Removed Lines]",
          "1598:             ND_TCHECK_LEN(bp + 4 + group, sizeof(struct in6_addr));",
          "1604:      if (len < group + 20 + (nsrcs * sizeof(struct in6_addr))) {",
          "",
          "[Added Lines]",
          "1598:             ND_TCHECK_LEN(bp + 4 + group, sizeof(nd_ipv6));",
          "1604:      if (len < group + 20 + (nsrcs * sizeof(nd_ipv6))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1612:                     ND_PRINT(\" {\");",
          "1613:                 for (j = 0; j < nsrcs; j++) {",
          "1617:   }",
          "1618:                 ND_PRINT(\" }\");",
          "1619:             }",
          "1622:      ND_PRINT(\"]\");",
          "1623:         }",
          "1624:     }",
          "",
          "[Removed Lines]",
          "1614:                     ND_TCHECK_LEN(bp + group + 20 + (j * sizeof(struct in6_addr)),",
          "1615:                                   sizeof(struct in6_addr));",
          "1616:       ND_PRINT(\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(struct in6_addr))));",
          "1621:             group += 20 + nsrcs * sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "1614:                     ND_TCHECK_LEN(bp + group + 20 + (j * sizeof(nd_ipv6)),",
          "1615:                                   sizeof(nd_ipv6));",
          "1616:       ND_PRINT(\" %s\", ip6addr_string(ndo, bp + group + 20 + (j * sizeof(nd_ipv6))));",
          "1621:             group += 20 + nsrcs * sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1652:     if (ndo->ndo_vflag) {",
          "1653:             ND_PRINT(\" [max resp delay=%u]\", mrt);",
          "1654:     }",
          "1656:     ND_PRINT(\" [gaddr %s\", ip6addr_string(ndo, bp + 8));",
          "1658:     if (ndo->ndo_vflag) {",
          "",
          "[Removed Lines]",
          "1655:     ND_TCHECK_LEN(bp + 8, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "1655:     ND_TCHECK_LEN(bp + 8, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1675:     ND_TCHECK_2(bp + 26);",
          "1676:     nsrcs = EXTRACT_BE_U_2(bp + 26);",
          "1677:     if (nsrcs > 0) {",
          "1679:      ND_PRINT(\" [invalid number of sources]\");",
          "1680:  else if (ndo->ndo_vflag > 1) {",
          "1681:      ND_PRINT(\" {\");",
          "1682:      for (i = 0; i < nsrcs; i++) {",
          "1686:      }",
          "1687:      ND_PRINT(\" }\");",
          "1688:  } else",
          "",
          "[Removed Lines]",
          "1678:  if (len < 28 + nsrcs * sizeof(struct in6_addr))",
          "1683:   ND_TCHECK_LEN(bp + 28 + (i * sizeof(struct in6_addr)),",
          "1684:                               sizeof(struct in6_addr));",
          "1685:   ND_PRINT(\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(struct in6_addr))));",
          "",
          "[Added Lines]",
          "1678:  if (len < 28 + nsrcs * sizeof(nd_ipv6))",
          "1683:   ND_TCHECK_LEN(bp + 28 + (i * sizeof(nd_ipv6)),",
          "1684:                               sizeof(nd_ipv6));",
          "1685:   ND_PRINT(\" %s\", ip6addr_string(ndo, bp + 28 + (i * sizeof(nd_ipv6))));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1813:   switch (EXTRACT_U_1(ni6->ni_code)) {",
          "1814:   case ICMP6_NI_SUBJ_IPV6:",
          "1816:     break;",
          "1818:     if (ndo->ndo_vflag)",
          "1819:      ND_PRINT(\", invalid subject len\");",
          "1820:     break;",
          "",
          "[Removed Lines]",
          "1815:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in6_addr)))",
          "1817:    if (siz != sizeof(*ni6) + sizeof(struct in6_addr)) {",
          "",
          "[Added Lines]",
          "1815:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(nd_ipv6)))",
          "1817:    if (siz != sizeof(*ni6) + sizeof(nd_ipv6)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1840:     dnsname_print(ndo, cp, ep);",
          "1841:    break;",
          "1842:   case ICMP6_NI_SUBJ_IPV4:",
          "1844:     break;",
          "1846:     if (ndo->ndo_vflag)",
          "1847:      ND_PRINT(\", invalid subject len\");",
          "1848:     break;",
          "",
          "[Removed Lines]",
          "1843:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(struct in_addr)))",
          "1845:    if (siz != sizeof(*ni6) + sizeof(struct in_addr)) {",
          "",
          "[Added Lines]",
          "1843:    if (!ND_TTEST_LEN(dp, sizeof(*ni6) + sizeof(nd_ipv4)))",
          "1845:    if (siz != sizeof(*ni6) + sizeof(nd_ipv4)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1945:    ND_PRINT(\"node addresses\");",
          "1946:    i = sizeof(*ni6);",
          "1947:    while (i < siz) {",
          "1949:      break;",
          "1950:     ND_PRINT(\" %s(%u)\",",
          "1951:         ip6addr_string(ndo, bp + i + sizeof(uint32_t)),",
          "1952:         EXTRACT_BE_U_4(bp + i));",
          "1954:    }",
          "1955:    i = EXTRACT_BE_U_2(ni6->ni_flags);",
          "1956:    if (!i)",
          "",
          "[Removed Lines]",
          "1948:     if (i + sizeof(uint32_t) + sizeof(struct in6_addr) > siz)",
          "1953:     i += sizeof(uint32_t) + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "1948:     if (i + sizeof(uint32_t) + sizeof(nd_ipv6) > siz)",
          "1953:     i += sizeof(uint32_t) + sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-ip6.c||print-ip6.c": [
          "File: print-ip6.c -> print-ip6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152: done:",
          "153: trunc:",
          "155: }",
          "",
          "[Removed Lines]",
          "154:  UNALIGNED_MEMCPY(dst, dst_addr, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "154:  UNALIGNED_MEMCPY(dst, dst_addr, sizeof(nd_ipv6));",
          "",
          "---------------"
        ],
        "print-isakmp.c||print-isakmp.c": [
          "File: print-isakmp.c -> print-isakmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:  switch (IP_V(ip)) {",
          "781:  case 4:",
          "782:   cookiecache[ninitiator].version = 4;",
          "785:   break;",
          "786:  case 6:",
          "787:   ip6 = (const struct ip6_hdr *)bp2;",
          "788:   cookiecache[ninitiator].version = 6;",
          "791:   break;",
          "792:  default:",
          "793:   return;",
          "",
          "[Removed Lines]",
          "783:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in4, &ip->ip_src, sizeof(struct in_addr));",
          "784:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in4, &ip->ip_dst, sizeof(struct in_addr));",
          "789:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in6, &ip6->ip6_src, sizeof(struct in6_addr));",
          "790:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in6, &ip6->ip6_dst, sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "783:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in4, &ip->ip_src, sizeof(nd_ipv4));",
          "784:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in4, &ip->ip_dst, sizeof(nd_ipv4));",
          "789:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].iaddr.in6, &ip6->ip6_src, sizeof(nd_ipv6));",
          "790:   UNALIGNED_MEMCPY(&cookiecache[ninitiator].raddr.in6, &ip6->ip6_dst, sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:   if (cookiecache[i].version != 4)",
          "811:    return 0;",
          "812:   if (initiator) {",
          "814:     return 1;",
          "815:   } else {",
          "817:     return 1;",
          "818:   }",
          "819:   break;",
          "",
          "[Removed Lines]",
          "813:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].iaddr.in4, sizeof(struct in_addr)) == 0)",
          "816:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].raddr.in4, sizeof(struct in_addr)) == 0)",
          "",
          "[Added Lines]",
          "813:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].iaddr.in4, sizeof(nd_ipv4)) == 0)",
          "816:    if (UNALIGNED_MEMCMP(&ip->ip_src, &cookiecache[i].raddr.in4, sizeof(nd_ipv4)) == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:    return 0;",
          "823:   ip6 = (const struct ip6_hdr *)bp2;",
          "824:   if (initiator) {",
          "826:     return 1;",
          "827:   } else {",
          "829:     return 1;",
          "830:   }",
          "831:   break;",
          "",
          "[Removed Lines]",
          "825:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].iaddr.in6, sizeof(struct in6_addr)) == 0)",
          "828:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].raddr.in6, sizeof(struct in6_addr)) == 0)",
          "",
          "[Added Lines]",
          "825:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].iaddr.in6, sizeof(nd_ipv6)) == 0)",
          "828:    if (UNALIGNED_MEMCMP(&ip6->ip6_src, &cookiecache[i].raddr.in6, sizeof(nd_ipv6)) == 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1402:    if (len < 8)",
          "1403:     ND_PRINT(\" len=%u [bad: < 8]\", len);",
          "1404:    else {",
          "1406:     ND_PRINT(\" len=%u %s/%u.%u.%u.%u\", len,",
          "1407:        ipaddr_string(ndo, data),",
          "1408:        EXTRACT_U_1(mask), EXTRACT_U_1(mask + 1),",
          "",
          "[Removed Lines]",
          "1405:     mask = data + sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "1405:     mask = data + sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1424:    if (len < 32)",
          "1425:     ND_PRINT(\" len=%u [bad: < 32]\", len);",
          "1426:    else {",
          "1429:     ND_PRINT(\" len=%u %s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\", len,",
          "1430:        ip6addr_string(ndo, data),",
          "",
          "[Removed Lines]",
          "1427:     mask = (const u_char *)(data + sizeof(struct in6_addr));",
          "",
          "[Added Lines]",
          "1427:     mask = (const u_char *)(data + sizeof(nd_ipv6));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1442:    else {",
          "1443:     ND_PRINT(\" len=%u %s-%s\", len,",
          "1444:        ipaddr_string(ndo, data),",
          "1446:    }",
          "1447:    len = 0;",
          "1448:    break;",
          "",
          "[Removed Lines]",
          "1445:        ipaddr_string(ndo, data + sizeof(struct in_addr)));",
          "",
          "[Added Lines]",
          "1445:        ipaddr_string(ndo, data + sizeof(nd_ipv4)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1452:    else {",
          "1453:     ND_PRINT(\" len=%u %s-%s\", len,",
          "1454:        ip6addr_string(ndo, data),",
          "1456:    }",
          "1457:    len = 0;",
          "1458:    break;",
          "",
          "[Removed Lines]",
          "1455:        ip6addr_string(ndo, data + sizeof(struct in6_addr)));",
          "",
          "[Added Lines]",
          "1455:        ip6addr_string(ndo, data + sizeof(nd_ipv6)));",
          "",
          "---------------"
        ],
        "print-isoclns.c||print-isoclns.c": [
          "File: print-isoclns.c -> print-isoclns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:                 break;",
          "1930:             case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR:",
          "1931:             case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR:",
          "1933:                     ND_PRINT(\", %s\", ipaddr_string(ndo, tptr));",
          "1934:                 break;",
          "1935:             case ISIS_SUBTLV_EXT_IS_REACH_MAX_LINK_BW :",
          "",
          "[Removed Lines]",
          "1932:                 if (subtlv_len >= sizeof(struct in_addr))",
          "",
          "[Added Lines]",
          "1932:                 if (subtlv_len >= sizeof(nd_ipv4))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2825:      break;",
          "2827:  case ISIS_TLV_IP6ADDR:",
          "2831:                 ND_PRINT(\"\\n\\t      IPv6 interface address: %s\",",
          "2832:          ip6addr_string(ndo, tptr));",
          "2836:      }",
          "2837:      break;",
          "2838:  case ISIS_TLV_AUTH:",
          "",
          "[Removed Lines]",
          "2828:      while (tmp>=sizeof(struct in6_addr)) {",
          "2829:   ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "2834:   tptr += sizeof(struct in6_addr);",
          "2835:   tmp -= sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "2828:      while (tmp>=sizeof(nd_ipv6)) {",
          "2829:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "2834:   tptr += sizeof(nd_ipv6);",
          "2835:   tmp -= sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2958:       break;",
          "2960:  case ISIS_TLV_TE_ROUTER_ID:",
          "2962:      ND_PRINT(\"\\n\\t      Traffic Engineering Router ID: %s\", ipaddr_string(ndo, pptr));",
          "2963:      break;",
          "2965:  case ISIS_TLV_IPADDR:",
          "2968:   ND_PRINT(\"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr));",
          "2971:      }",
          "2972:      break;",
          "",
          "[Removed Lines]",
          "2961:      ND_TCHECK_LEN(pptr, sizeof(struct in_addr));",
          "2966:      while (tmp>=sizeof(struct in_addr)) {",
          "2967:   ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "2969:   tptr += sizeof(struct in_addr);",
          "2970:   tmp -= sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "2961:      ND_TCHECK_LEN(pptr, sizeof(nd_ipv4));",
          "2966:      while (tmp>=sizeof(nd_ipv4)) {",
          "2967:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "2969:   tptr += sizeof(nd_ipv4);",
          "2970:   tmp -= sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2992:      tptr++;",
          "2993:      tmp--;",
          "2996:          break;",
          "2998:      ND_PRINT(\"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr));",
          "3003:          break;",
          "3005:      ND_PRINT(\"\\n\\t      IPv4 neighbor address: %s\", ipaddr_string(ndo, tptr));",
          "3009:      while (tmp>=4) {",
          "3010:                 ND_TCHECK_4(tptr);",
          "",
          "[Removed Lines]",
          "2995:      if (tmp < sizeof(struct in_addr))",
          "2997:      ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "2999:      tptr+=sizeof(struct in_addr);",
          "3000:      tmp-=sizeof(struct in_addr);",
          "3002:      if (tmp < sizeof(struct in_addr))",
          "3004:      ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "3006:      tptr+=sizeof(struct in_addr);",
          "3007:      tmp-=sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "2995:      if (tmp < sizeof(nd_ipv4))",
          "2997:      ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "2999:      tptr+=sizeof(nd_ipv4);",
          "3000:      tmp-=sizeof(nd_ipv4);",
          "3002:      if (tmp < sizeof(nd_ipv4))",
          "3004:      ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "3006:      tptr+=sizeof(nd_ipv4);",
          "3007:      tmp-=sizeof(nd_ipv4);",
          "",
          "---------------"
        ],
        "print-ldp.c||print-ldp.c": [
          "File: print-ldp.c -> print-ldp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:                tok2str(af_values, \"Unknown (%u)\", af));",
          "304:         switch (af) {",
          "305:         case AFNUM_INET:",
          "308:   ND_PRINT(\" %s\", ipaddr_string(ndo, tptr));",
          "311:      }",
          "312:             break;",
          "313:         case AFNUM_INET6:",
          "316:   ND_PRINT(\" %s\", ip6addr_string(ndo, tptr));",
          "319:      }",
          "320:             break;",
          "321:         default:",
          "",
          "[Removed Lines]",
          "306:      while(tlv_tlen >= sizeof(struct in_addr)) {",
          "307:   ND_TCHECK_LEN(tptr, sizeof(struct in_addr));",
          "309:   tlv_tlen-=sizeof(struct in_addr);",
          "310:   tptr+=sizeof(struct in_addr);",
          "314:      while(tlv_tlen >= sizeof(struct in6_addr)) {",
          "315:   ND_TCHECK_LEN(tptr, sizeof(struct in6_addr));",
          "317:   tlv_tlen-=sizeof(struct in6_addr);",
          "318:   tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "306:      while(tlv_tlen >= sizeof(nd_ipv4)) {",
          "307:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv4));",
          "309:   tlv_tlen-=sizeof(nd_ipv4);",
          "310:   tptr+=sizeof(nd_ipv4);",
          "314:      while(tlv_tlen >= sizeof(nd_ipv6)) {",
          "315:   ND_TCHECK_LEN(tptr, sizeof(nd_ipv6));",
          "317:   tlv_tlen-=sizeof(nd_ipv6);",
          "318:   tptr+=sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-lwres.c||print-lwres.c": [
          "File: print-lwres.c -> print-lwres.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:   if (l < 4)",
          "282:    return -1;",
          "283:   ND_PRINT(\" %s\", ipaddr_string(ndo, p));",
          "285:   break;",
          "287:   if (l < 16)",
          "288:    return -1;",
          "289:   ND_PRINT(\" %s\", ip6addr_string(ndo, p));",
          "291:   break;",
          "292:  default:",
          "293:   ND_PRINT(\" %u/\", EXTRACT_BE_U_4(ap->family));",
          "",
          "[Removed Lines]",
          "284:   p += sizeof(struct in_addr);",
          "290:   p += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "284:   p += sizeof(nd_ipv4);",
          "290:   p += sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-olsr.c||print-olsr.c": [
          "File: print-olsr.c -> print-olsr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:     ND_PRINT(\"\\n\\t      neighbor\\n\\t\\t\");",
          "291:     neighbor = 1;",
          "296:             return (-1);",
          "299:         ND_PRINT(\"%s%s\", ipaddr_string(ndo, msg_data),",
          "300:                neighbor % 4 == 0 ? \"\\n\\t\\t\" : \" \");",
          "304:     }",
          "305:     return (0);",
          "306: }",
          "",
          "[Removed Lines]",
          "293:     while (hello_len >= sizeof(struct in_addr)) {",
          "295:         if (!ND_TTEST_LEN(msg_data, sizeof(struct in_addr)))",
          "302:         msg_data += sizeof(struct in_addr);",
          "303:         hello_len -= sizeof(struct in_addr);",
          "",
          "[Added Lines]",
          "293:     while (hello_len >= sizeof(nd_ipv4)) {",
          "295:         if (!ND_TTEST_LEN(msg_data, sizeof(nd_ipv4)))",
          "302:         msg_data += sizeof(nd_ipv4);",
          "303:         hello_len -= sizeof(nd_ipv4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:         case OLSR_MID_MSG:",
          "516:         {",
          "519:             if (is_ipv6)",
          "522:             while (msg_tlen >= addr_size) {",
          "523:                 ND_TCHECK_LEN(msg_data, addr_size);",
          "",
          "[Removed Lines]",
          "517:             size_t addr_size = sizeof(struct in_addr);",
          "520:                 addr_size = sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "517:             size_t addr_size = sizeof(nd_ipv4);",
          "520:                 addr_size = sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-ospf6.c||print-ospf6.c": [
          "File: print-ospf6.c -> print-ospf6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:      } llsa_priandopt;",
          "209: #define llsa_priority llsa_priandopt.pri",
          "210: #define llsa_options llsa_priandopt.opt",
          "212:      nd_uint32_t llsa_nprefix;",
          "213:      struct lsa6_prefix llsa_prefix[1];",
          "214:  } un_llsa;",
          "",
          "[Removed Lines]",
          "211:      struct in6_addr llsa_lladdr;",
          "",
          "[Added Lines]",
          "211:      nd_ipv6 llsa_lladdr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:  lsa_length -= sizeof (*lsapp) - IPV6_ADDR_LEN_BYTES;",
          "420:  ND_TCHECK_LEN(lsapp, sizeof(*lsapp) - IPV6_ADDR_LEN_BYTES);",
          "421:  wordlen = (EXTRACT_U_1(lsapp->lsa_p_len) + 31) / 32;",
          "423:   ND_PRINT(\" bogus prefixlen /%u\", EXTRACT_U_1(lsapp->lsa_p_len));",
          "424:   goto trunc;",
          "425:  }",
          "",
          "[Removed Lines]",
          "422:  if (wordlen * 4 > sizeof(struct in6_addr)) {",
          "",
          "[Added Lines]",
          "422:  if (wordlen * 4 > sizeof(nd_ipv6)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "602:   tptr += bytelen;",
          "604:   if ((flags32 & ASLA_FLAG_FWDADDR) != 0) {",
          "608:    if (lsa_length < sizeof (*fwdaddr6))",
          "609:     return (1);",
          "610:    lsa_length -= sizeof (*fwdaddr6);",
          "",
          "[Removed Lines]",
          "605:    const struct in6_addr *fwdaddr6;",
          "607:    fwdaddr6 = (const struct in6_addr *)tptr;",
          "",
          "[Added Lines]",
          "605:    const nd_ipv6 *fwdaddr6;",
          "607:    fwdaddr6 = (const nd_ipv6 *)tptr;",
          "",
          "---------------"
        ],
        "print-pgm.c||print-pgm.c": [
          "File: print-pgm.c -> print-pgm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:      switch (EXTRACT_BE_U_2(spm->pgms_nla_afi)) {",
          "232:      case AFNUM_INET:",
          "234:   addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "236:   break;",
          "237:      case AFNUM_INET6:",
          "239:   addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "241:   break;",
          "242:      default:",
          "243:   goto trunc;",
          "",
          "[Removed Lines]",
          "233:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "235:   bp += sizeof(struct in_addr);",
          "238:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "240:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "233:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "235:   bp += sizeof(nd_ipv4);",
          "238:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "240:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:      switch (EXTRACT_BE_U_2(polr->pgmp_nla_afi)) {",
          "275:      case AFNUM_INET:",
          "277:   addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "279:   break;",
          "280:      case AFNUM_INET6:",
          "282:   addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "284:   break;",
          "285:      default:",
          "286:   goto trunc;",
          "",
          "[Removed Lines]",
          "276:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "278:   bp += sizeof(struct in_addr);",
          "281:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "283:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "276:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "278:   bp += sizeof(nd_ipv4);",
          "281:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "283:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:      switch (EXTRACT_BE_U_2(nak->pgmn_source_afi)) {",
          "346:      case AFNUM_INET:",
          "348:   addrtostr(bp, source_buf, sizeof(source_buf));",
          "350:   break;",
          "351:      case AFNUM_INET6:",
          "353:   addrtostr6(bp, source_buf, sizeof(source_buf));",
          "355:   break;",
          "356:      default:",
          "357:   goto trunc;",
          "",
          "[Removed Lines]",
          "347:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "349:   bp += sizeof(struct in_addr);",
          "352:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "354:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "347:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "349:   bp += sizeof(nd_ipv4);",
          "352:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "354:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:      ND_TCHECK_2(bp);",
          "367:      switch (EXTRACT_BE_U_2(bp)) {",
          "368:      case AFNUM_INET:",
          "370:   addrtostr(bp, group_buf, sizeof(group_buf));",
          "372:   break;",
          "373:      case AFNUM_INET6:",
          "375:   addrtostr6(bp, group_buf, sizeof(group_buf));",
          "377:   break;",
          "378:      default:",
          "379:   goto trunc;",
          "",
          "[Removed Lines]",
          "369:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "371:   bp += sizeof(struct in_addr);",
          "374:   ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "376:   bp += sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "369:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "371:   bp += sizeof(nd_ipv4);",
          "374:   ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "376:   bp += sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "589:       bp += 2+2;",
          "590:       switch (nla_afnum) {",
          "591:       case AFNUM_INET:",
          "593:        ND_PRINT(\"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
          "594:            opt_len, PGM_OPT_REDIRECT_FIXED_LEN);",
          "595:        return;",
          "596:    }",
          "598:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "601:    break;",
          "602:       case AFNUM_INET6:",
          "604:        ND_PRINT(\"[Bad OPT_REDIRECT option, length %u != %u + address size]\",",
          "605:            PGM_OPT_REDIRECT_FIXED_LEN, opt_len);",
          "606:        return;",
          "607:    }",
          "609:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "612:    break;",
          "613:       default:",
          "614:    goto trunc;",
          "",
          "[Removed Lines]",
          "592:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr)) {",
          "597:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "599:    bp += sizeof(struct in_addr);",
          "600:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in_addr);",
          "603:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr)) {",
          "608:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "610:    bp += sizeof(struct in6_addr);",
          "611:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "592:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv4)) {",
          "597:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "599:    bp += sizeof(nd_ipv4);",
          "600:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv4);",
          "603:    if (opt_len != PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv6)) {",
          "608:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "610:    bp += sizeof(nd_ipv6);",
          "611:    opts_len -= PGM_OPT_REDIRECT_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "746:       bp += 2+2;",
          "747:       switch (nla_afnum) {",
          "748:       case AFNUM_INET:",
          "750:        ND_PRINT(\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
          "751:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN);",
          "752:        return;",
          "753:    }",
          "755:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "758:    break;",
          "759:       case AFNUM_INET6:",
          "761:        ND_PRINT(\"[Bad OPT_PGMCC_DATA option, length %u != %u + address size]\",",
          "762:            opt_len, PGM_OPT_PGMCC_DATA_FIXED_LEN);",
          "763:        return;",
          "764:    }",
          "766:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "769:    break;",
          "770:       default:",
          "771:    goto trunc;",
          "",
          "[Removed Lines]",
          "749:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr)) {",
          "754:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "756:    bp += sizeof(struct in_addr);",
          "757:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in_addr);",
          "760:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr)) {",
          "765:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "767:    bp += sizeof(struct in6_addr);",
          "768:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "749:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv4)) {",
          "754:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "756:    bp += sizeof(nd_ipv4);",
          "757:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv4);",
          "760:    if (opt_len != PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv6)) {",
          "765:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "767:    bp += sizeof(nd_ipv6);",
          "768:    opts_len -= PGM_OPT_PGMCC_DATA_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "789:       bp += 2+2;",
          "790:       switch (nla_afnum) {",
          "791:       case AFNUM_INET:",
          "793:        ND_PRINT(\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
          "794:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN);",
          "795:        return;",
          "796:    }",
          "798:    addrtostr(bp, nla_buf, sizeof(nla_buf));",
          "801:    break;",
          "802:       case AFNUM_INET6:",
          "804:        ND_PRINT(\"[Bad OPT_PGMCC_FEEDBACK option, length %u != %u + address size]\",",
          "805:            opt_len, PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN);",
          "806:        return;",
          "807:    }",
          "809:    addrtostr6(bp, nla_buf, sizeof(nla_buf));",
          "812:    break;",
          "813:       default:",
          "814:    goto trunc;",
          "",
          "[Removed Lines]",
          "792:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr)) {",
          "797:    ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "799:    bp += sizeof(struct in_addr);",
          "800:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in_addr);",
          "803:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr)) {",
          "808:    ND_TCHECK_LEN(bp, sizeof(struct in6_addr));",
          "810:    bp += sizeof(struct in6_addr);",
          "811:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "792:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv4)) {",
          "797:    ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "799:    bp += sizeof(nd_ipv4);",
          "800:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv4);",
          "803:    if (opt_len != PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv6)) {",
          "808:    ND_TCHECK_LEN(bp, sizeof(nd_ipv6));",
          "810:    bp += sizeof(nd_ipv6);",
          "811:    opts_len -= PGM_OPT_PGMCC_FEEDBACK_FIXED_LEN + sizeof(nd_ipv6);",
          "",
          "---------------"
        ],
        "print-pim.c||print-pim.c": [
          "File: print-pim.c -> print-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   return;",
          "170:  }",
          "173:   goto trunc;",
          "175:  if (ndo->ndo_vflag > 1)",
          "176:   ND_PRINT(\"\\n\");",
          "177:  ND_PRINT(\" Upstream Nbr: %s\", ipaddr_string(ndo, bp));",
          "",
          "[Removed Lines]",
          "172:  if (len < sizeof(struct in_addr))",
          "174:  ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "172:  if (len < sizeof(nd_ipv4))",
          "174:  ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:   if (len < 4)",
          "204:    goto trunc;",
          "206:   ND_PRINT(\"\\n\\tGroup: %s\", ipaddr_string(ndo, bp));",
          "207:   bp += 4;",
          "208:   len -= 4;",
          "209:   if (len < 4)",
          "210:    goto trunc;",
          "212:   if (EXTRACT_BE_U_4(bp) != 0xffffffff)",
          "213:    ND_PRINT(\"/%s\", ipaddr_string(ndo, bp));",
          "214:   bp += 4;",
          "",
          "[Removed Lines]",
          "205:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "211:   ND_TCHECK_LEN(bp, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "205:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "211:   ND_TCHECK_LEN(bp, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:      ipaddr_string(ndo, bp + 24));",
          "291:   break;",
          "292:  case PIMV1_TYPE_REGISTER_STOP:",
          "294:   ND_PRINT(\" for %s > %s\", ipaddr_string(ndo, bp + 8),",
          "295:      ipaddr_string(ndo, bp + 12));",
          "296:   break;",
          "",
          "[Removed Lines]",
          "293:   ND_TCHECK_LEN(bp + 12, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "293:   ND_TCHECK_LEN(bp + 12, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:   }",
          "306:   break;",
          "307:  case PIMV1_TYPE_ASSERT:",
          "309:   ND_PRINT(\" for %s > %s\", ipaddr_string(ndo, bp + 16),",
          "310:      ipaddr_string(ndo, bp + 8));",
          "311:   if (EXTRACT_BE_U_4(bp + 12) != 0xffffffff)",
          "",
          "[Removed Lines]",
          "308:   ND_TCHECK_LEN(bp + 16, sizeof(struct in_addr));",
          "",
          "[Added Lines]",
          "308:   ND_TCHECK_LEN(bp + 16, sizeof(nd_ipv4));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:   switch (EXTRACT_U_1(bp)) {",
          "576:   case 1:",
          "577:    af = AF_INET;",
          "579:    break;",
          "580:   case 2:",
          "581:    af = AF_INET6;",
          "583:    break;",
          "584:   default:",
          "585:    return -1;",
          "",
          "[Removed Lines]",
          "578:    addr_len = (u_int)sizeof(struct in_addr);",
          "582:    addr_len = (u_int)sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "578:    addr_len = (u_int)sizeof(nd_ipv4);",
          "582:    addr_len = (u_int)sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "589:   hdrlen = 2;",
          "590:  } else {",
          "591:   switch (addr_len) {",
          "593:    af = AF_INET;",
          "594:    break;",
          "596:    af = AF_INET6;",
          "597:    break;",
          "598:   default:",
          "",
          "[Removed Lines]",
          "592:   case sizeof(struct in_addr):",
          "595:   case sizeof(struct in6_addr):",
          "",
          "[Added Lines]",
          "592:   case sizeof(nd_ipv4):",
          "595:   case sizeof(nd_ipv6):",
          "",
          "---------------"
        ],
        "print-ripng.c||print-ripng.c": [
          "File: print-ripng.c -> print-ripng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #define RIP6_RESPONSE 2",
          "67: struct netinfo6 {",
          "69:  nd_uint16_t rip6_tag;",
          "70:  nd_uint8_t rip6_plen;",
          "71:  nd_uint8_t rip6_metric;",
          "",
          "[Removed Lines]",
          "68:  struct in6_addr rip6_dest;",
          "",
          "[Added Lines]",
          "68:  nd_ipv6  rip6_dest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: #define HOPCNT_INFINITY6 16",
          "90: {",
          "92:     return (memcmp(addr, &in6addr_any, sizeof(*addr)) == 0);",
          "93: }",
          "96: static int",
          "97: rip6_entry_print(netdissect_options *ndo, const struct netinfo6 *ni, u_int metric)",
          "",
          "[Removed Lines]",
          "89: static int IN6_IS_ADDR_UNSPECIFIED(const struct in6_addr *addr)",
          "94: #endif",
          "",
          "[Added Lines]",
          "88: static int ND_IN6_IS_ADDR_UNSPECIFIED(const nd_ipv6 *addr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:   if (j == 1) {",
          "131:    ND_TCHECK_SIZE(rp->rip6_nets);",
          "132:    if (EXTRACT_U_1(rp->rip6_nets->rip6_metric) == HOPCNT_INFINITY6",
          "134:     ND_PRINT(\" ripng-req dump\");",
          "135:     break;",
          "136:    }",
          "",
          "[Removed Lines]",
          "133:        &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "",
          "[Added Lines]",
          "131:        && ND_IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "",
          "---------------"
        ],
        "print-rsvp.c||print-rsvp.c": [
          "File: print-rsvp.c -> print-rsvp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "743:                 ND_PRINT(\"%s  IPv4 DestAddress: %s, Protocol ID: 0x%02x\",",
          "744:                        indent,",
          "745:                        ipaddr_string(ndo, obj_tptr),",
          "747:                 ND_PRINT(\"%s  Flags: [0x%02x], DestPort %u\",",
          "748:                        indent,",
          "749:                        EXTRACT_U_1((obj_tptr + 5)),",
          "",
          "[Removed Lines]",
          "746:                        EXTRACT_U_1(obj_tptr + sizeof(struct in_addr)));",
          "",
          "[Added Lines]",
          "746:                        EXTRACT_U_1(obj_tptr + sizeof(nd_ipv4)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "757:                 ND_PRINT(\"%s  IPv6 DestAddress: %s, Protocol ID: 0x%02x\",",
          "758:                        indent,",
          "759:                        ip6addr_string(ndo, obj_tptr),",
          "761:                 ND_PRINT(\"%s  Flags: [0x%02x], DestPort %u\",",
          "762:                        indent,",
          "765:                 obj_tlen-=20;",
          "766:                 obj_tptr+=20;",
          "767:                 break;",
          "",
          "[Removed Lines]",
          "760:                        EXTRACT_U_1(obj_tptr + sizeof(struct in6_addr)));",
          "763:                        EXTRACT_U_1((obj_tptr + sizeof(struct in6_addr) + 1)),",
          "764:                        EXTRACT_BE_U_2(obj_tptr + sizeof(struct in6_addr) + 2));",
          "",
          "[Added Lines]",
          "760:                        EXTRACT_U_1(obj_tptr + sizeof(nd_ipv6)));",
          "763:                        EXTRACT_U_1((obj_tptr + sizeof(nd_ipv6) + 1)),",
          "764:                        EXTRACT_BE_U_2(obj_tptr + sizeof(nd_ipv6) + 2));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "820:         case RSVP_OBJ_CONFIRM:",
          "821:             switch(rsvp_obj_ctype) {",
          "822:             case RSVP_CTYPE_IPV4:",
          "824:                     return -1;",
          "825:                 ND_PRINT(\"%s  IPv4 Receiver Address: %s\",",
          "826:                        indent,",
          "827:                        ipaddr_string(ndo, obj_tptr));",
          "830:                 break;",
          "831:             case RSVP_CTYPE_IPV6:",
          "833:                     return -1;",
          "834:                 ND_PRINT(\"%s  IPv6 Receiver Address: %s\",",
          "835:                        indent,",
          "836:                        ip6addr_string(ndo, obj_tptr));",
          "839:                 break;",
          "840:             default:",
          "841:                 hexdump=TRUE;",
          "",
          "[Removed Lines]",
          "823:                 if (obj_tlen < sizeof(struct in_addr))",
          "828:                 obj_tlen-=sizeof(struct in_addr);",
          "829:                 obj_tptr+=sizeof(struct in_addr);",
          "832:                 if (obj_tlen < sizeof(struct in6_addr))",
          "837:                 obj_tlen-=sizeof(struct in6_addr);",
          "838:                 obj_tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "823:                 if (obj_tlen < sizeof(nd_ipv4))",
          "828:                 obj_tlen-=sizeof(nd_ipv4);",
          "829:                 obj_tptr+=sizeof(nd_ipv4);",
          "832:                 if (obj_tlen < sizeof(nd_ipv6))",
          "837:                 obj_tlen-=sizeof(nd_ipv6);",
          "838:                 obj_tptr+=sizeof(nd_ipv6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "845:         case RSVP_OBJ_NOTIFY_REQ:",
          "846:             switch(rsvp_obj_ctype) {",
          "847:             case RSVP_CTYPE_IPV4:",
          "849:                     return -1;",
          "850:                 ND_PRINT(\"%s  IPv4 Notify Node Address: %s\",",
          "851:                        indent,",
          "852:                        ipaddr_string(ndo, obj_tptr));",
          "855:                 break;",
          "856:             case RSVP_CTYPE_IPV6:",
          "858:                     return-1;",
          "859:                 ND_PRINT(\"%s  IPv6 Notify Node Address: %s\",",
          "860:                        indent,",
          "861:                        ip6addr_string(ndo, obj_tptr));",
          "864:                 break;",
          "865:             default:",
          "866:                 hexdump=TRUE;",
          "",
          "[Removed Lines]",
          "848:                 if (obj_tlen < sizeof(struct in_addr))",
          "853:                 obj_tlen-=sizeof(struct in_addr);",
          "854:                 obj_tptr+=sizeof(struct in_addr);",
          "857:                 if (obj_tlen < sizeof(struct in6_addr))",
          "862:                 obj_tlen-=sizeof(struct in6_addr);",
          "863:                 obj_tptr+=sizeof(struct in6_addr);",
          "",
          "[Added Lines]",
          "848:                 if (obj_tlen < sizeof(nd_ipv4))",
          "853:                 obj_tlen-=sizeof(nd_ipv4);",
          "854:                 obj_tptr+=sizeof(nd_ipv4);",
          "857:                 if (obj_tlen < sizeof(nd_ipv6))",
          "862:                 obj_tlen-=sizeof(nd_ipv6);",
          "863:                 obj_tptr+=sizeof(nd_ipv6);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff2bbd6ffe2ba25884e36f2bcc97fb156cf280e6",
      "candidate_info": {
        "commit_hash": "ff2bbd6ffe2ba25884e36f2bcc97fb156cf280e6",
        "repo": "the-tcpdump-group/tcpdump",
        "commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/ff2bbd6ffe2ba25884e36f2bcc97fb156cf280e6",
        "files": [
          "print-ripng.c"
        ],
        "message": "RIPng: Use more ND_TCHECK_SIZE() macros",
        "before_after_code_files": [
          "print-ripng.c||print-ripng.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "print-ripng.c||print-ripng.c"
          ],
          "candidate": [
            "print-ripng.c||print-ripng.c"
          ]
        }
      },
      "candidate_diff": {
        "print-ripng.c||print-ripng.c": [
          "File: print-ripng.c -> print-ripng.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   length_left -= (sizeof(struct rip6) - sizeof(struct netinfo6));",
          "129:    j = length_left / sizeof(*ni);",
          "130:   if (j == 1) {",
          "132:    if (EXTRACT_U_1(rp->rip6_nets->rip6_metric) == HOPCNT_INFINITY6",
          "133:        &&  IN6_IS_ADDR_UNSPECIFIED(&rp->rip6_nets->rip6_dest)) {",
          "134:     ND_PRINT(\" ripng-req dump\");",
          "",
          "[Removed Lines]",
          "131:    ND_TCHECK(rp->rip6_nets);",
          "",
          "[Added Lines]",
          "131:    ND_TCHECK_SIZE(rp->rip6_nets);",
          "",
          "---------------"
        ]
      }
    }
  ]
}