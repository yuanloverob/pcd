{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2466a2c7f581ab20d7e2c2d2e73c4bed1bc38781",
      "candidate_info": {
        "commit_hash": "2466a2c7f581ab20d7e2c2d2e73c4bed1bc38781",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/2466a2c7f581ab20d7e2c2d2e73c4bed1bc38781",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac"
        ],
        "message": "document and attribute #292\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd208e65b6004f033994281a45942da91834e773",
      "candidate_info": {
        "commit_hash": "fd208e65b6004f033994281a45942da91834e773",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/fd208e65b6004f033994281a45942da91834e773",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c"
        ],
        "message": "add support for an empty OIDCClaimPrefix; see #264\n\nshould/must be used with OIDCWhiteListedClaims to protect selected\nheaders; bump to 2.3.0rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "602: # (Optional)",
          "603: # The prefix to use when setting claims (openid-connect or oauth20) in the HTTP headers/environment variables.",
          "604: # When not defined, the default \"OIDC_CLAIM_\" is used.",
          "605: #OIDCClaimPrefix <prefix>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: # This prefix should not be set to \"\" except when combined with OIDCWhiteListedClaims to maintain a secure setup.",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.1rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "825: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830: static const char *oidc_cfg_set_claim_prefix(cmd_parms *cmd, void *struct_ptr, const char *args) {",
          "831:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "832:    cmd->server->module_config, &auth_openidc_module);",
          "833:     char *w = ap_getword_conf(cmd->pool, &args);",
          "834:     if (*w == '\\0' || *args != 0)",
          "835:      cfg->claim_prefix = \"\";",
          "836:     else",
          "837:      cfg->claim_prefix = w;",
          "838:     return NULL;",
          "839: }",
          "844: const char *oidc_cfg_claim_prefix(request_rec *r) {",
          "845:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
          "846:    &auth_openidc_module);",
          "847:  if (cfg->claim_prefix == NULL)",
          "848:   return OIDC_DEFAULT_CLAIM_PREFIX;",
          "849:  return cfg->claim_prefix;",
          "850: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "934:  c->cookie_domain = NULL;",
          "935:  c->claim_delimiter = OIDC_DEFAULT_CLAIM_DELIMITER;",
          "937:  c->remote_user_claim.claim_name = OIDC_DEFAULT_CLAIM_REMOTE_USER;",
          "938:  c->remote_user_claim.reg_exp = NULL;",
          "939:  c->pass_idtoken_as = OIDC_PASS_IDTOKEN_AS_CLAIMS;",
          "",
          "[Removed Lines]",
          "936:  c->claim_prefix = OIDC_DEFAULT_CLAIM_PREFIX;",
          "",
          "[Added Lines]",
          "960:  c->claim_prefix = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296:    apr_strnatcmp(add->claim_delimiter, OIDC_DEFAULT_CLAIM_DELIMITER)",
          "1297:    != 0 ? add->claim_delimiter : base->claim_delimiter;",
          "1298:  c->claim_prefix =",
          "1300:      add->claim_prefix : base->claim_prefix;",
          "1301:  c->remote_user_claim.claim_name =",
          "1302:    apr_strnatcmp(add->remote_user_claim.claim_name,",
          "",
          "[Removed Lines]",
          "1299:    apr_strnatcmp(add->claim_prefix, OIDC_DEFAULT_CLAIM_PREFIX) != 0 ?",
          "",
          "[Added Lines]",
          "1323:    add->claim_prefix != NULL ?",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2254:     (void*)APR_OFFSETOF(oidc_cfg, claim_delimiter),",
          "2255:     RSRC_CONF,",
          "2256:     \"The delimiter to use when setting multi-valued claims in the HTTP headers.\"),",
          "2258:     (void*)APR_OFFSETOF(oidc_cfg, claim_prefix),",
          "2259:     RSRC_CONF,",
          "2260:     \"The prefix to use when setting claims in the HTTP headers.\"),",
          "",
          "[Removed Lines]",
          "2257:   AP_INIT_TAKE1(\"OIDCClaimPrefix\", oidc_set_string_slot,",
          "",
          "[Added Lines]",
          "2281:   AP_INIT_RAW_ARGS(\"OIDCClaimPrefix\", oidc_cfg_set_claim_prefix,",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  const int prefix_len = claim_prefix ? strlen(claim_prefix) : 0;",
          "",
          "[Removed Lines]",
          "88: static void oidc_scrub_request_headers(request_rec *r, const char *claim_prefix,",
          "89:   const char *authn_header) {",
          "",
          "[Added Lines]",
          "88: static void oidc_scrub_request_headers(request_rec *r, const char *claim_prefix, apr_hash_t *scrub) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:  for (i = 0; i < h->nelts; i++) {",
          "103:   const char * const k = e[i].key;",
          "",
          "[Removed Lines]",
          "106:   const int authn_header_matches = (k != NULL) && authn_header",
          "107:     && (oidc_strnenvcmp(k, authn_header, -1) == 0);",
          "",
          "[Added Lines]",
          "105:   const char *hdr =",
          "106:     (k != NULL) && (scrub != NULL) ?",
          "107:       apr_hash_get(scrub, k, APR_HASH_KEY_STRING) : NULL;",
          "108:   const int header_matches = (hdr != NULL)",
          "109:       && (oidc_strnenvcmp(k, hdr, -1) == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     && (oidc_strnenvcmp(k, claim_prefix, prefix_len) == 0);",
          "121:    apr_table_addn(clean_headers, k, e[i].val);",
          "122:   } else {",
          "123:    oidc_warn(r, \"scrubbed suspicious request header (%s: %.32s)\", k,",
          "",
          "[Removed Lines]",
          "120:   if (!prefix_matches && !authn_header_matches) {",
          "",
          "[Added Lines]",
          "122:   if (!prefix_matches && !header_matches) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:  if (cfg->scrub_request_headers != 0) {",
          "152:   }",
          "153:  }",
          "154: }",
          "",
          "[Removed Lines]",
          "142:   oidc_scrub_request_headers(r, OIDC_DEFAULT_HEADER_PREFIX,",
          "143:     oidc_cfg_dir_authn_header(r));",
          "149:   if ((strstr(cfg->claim_prefix, OIDC_DEFAULT_HEADER_PREFIX)",
          "150:     != cfg->claim_prefix)) {",
          "151:    oidc_scrub_request_headers(r, cfg->claim_prefix, NULL);",
          "",
          "[Added Lines]",
          "143:   const char *prefix = oidc_cfg_claim_prefix(r);",
          "144:   apr_hash_t *hdrs = apr_hash_make(r->pool);",
          "146:   if (apr_strnatcmp(prefix, \"\") == 0) {",
          "147:    if ((cfg->white_listed_claims != NULL)",
          "148:      && (apr_hash_count(cfg->white_listed_claims) > 0))",
          "149:     hdrs = apr_hash_overlay(r->pool, cfg->white_listed_claims,",
          "150:       hdrs);",
          "151:    else",
          "152:     oidc_warn(r,",
          "153:       \"both OIDCClaimPrefix and OIDCWhiteListedClaims are empty: this renders an insecure setup!\");",
          "154:   }",
          "156:   char *authn_hdr = oidc_cfg_dir_authn_header(r);",
          "157:   if (authn_hdr != NULL)",
          "158:    apr_hash_set(hdrs, authn_hdr, APR_HASH_KEY_STRING, authn_hdr);",
          "163:   oidc_scrub_request_headers(r, OIDC_DEFAULT_HEADER_PREFIX, hdrs);",
          "169:   if ((strstr(prefix, OIDC_DEFAULT_HEADER_PREFIX) != prefix)) {",
          "170:    oidc_scrub_request_headers(r, prefix, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "852:  if (j_claims != NULL) {",
          "854:     cfg->claim_delimiter, oidc_cfg_dir_pass_info_in_headers(r),",
          "855:     oidc_cfg_dir_pass_info_in_envvars(r));",
          "",
          "[Removed Lines]",
          "853:   oidc_util_set_app_infos(r, j_claims, cfg->claim_prefix,",
          "",
          "[Added Lines]",
          "872:   oidc_util_set_app_infos(r, j_claims, oidc_cfg_claim_prefix(r),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "592: int oidc_cfg_cache_encrypt(request_rec *r);",
          "593: int oidc_cfg_session_cache_fallback_to_cookie(request_rec *r);",
          "594: const char *oidc_parse_pkce_type(apr_pool_t *pool, const char *arg, oidc_proto_pkce_t **type);",
          "597: int oidc_strnenvcmp(const char *a, const char *b, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595: const char *oidc_cfg_claim_prefix(request_rec *r);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696:   oidc_util_hdr_in_set(r, authn_header, r->user);",
          "703:  if (access_token != NULL) {",
          "",
          "[Removed Lines]",
          "699:  oidc_util_set_app_infos(r, token, c->claim_prefix, c->claim_delimiter,",
          "700:    pass_headers, pass_envvars);",
          "",
          "[Added Lines]",
          "699:  oidc_util_set_app_infos(r, token, oidc_cfg_claim_prefix(r),",
          "700:    c->claim_delimiter, pass_headers, pass_envvars);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c912219846e6de1acfa0e3fed6c6985a7c06ec24",
      "candidate_info": {
        "commit_hash": "c912219846e6de1acfa0e3fed6c6985a7c06ec24",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/c912219846e6de1acfa0e3fed6c6985a7c06ec24",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c"
        ],
        "message": "refactor remote user handling; bump to 2.3.0rc1\n\nallow for postfixing the remote user in OIDC flows with the issuer value\nafter applying a regex\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.0rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352:  r->user = (char *) session->remote_user;",
          "1355:  char *authn_header = oidc_cfg_dir_authn_header(r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1353:  oidc_debug(r, \"set remote_user to \\\"%s\\\"\", r->user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1485:    error_description, DONE);",
          "1486: }",
          "1493:   const char *s_claims) {",
          "1495:  char *issuer = provider->issuer;",
          "1496:  char *claim_name = apr_pstrdup(r->pool, c->remote_user_claim.claim_name);",
          "1497:  int n = strlen(claim_name);",
          "1500:   claim_name[n - 1] = '\\0';",
          "1501:   issuer =",
          "1502:     (strstr(issuer, \"https://\") == NULL) ?",
          "",
          "[Removed Lines]",
          "1491: static apr_byte_t oidc_get_remote_user(request_rec *r, oidc_cfg *c,",
          "1492:   oidc_provider_t *provider, oidc_jwt_t *jwt, char **user,",
          "1498:  int post_fix_with_issuer = (claim_name[n - 1] == '@');",
          "1499:  if (post_fix_with_issuer) {",
          "",
          "[Added Lines]",
          "1492: apr_byte_t oidc_get_remote_user(request_rec *r, const char *claim_name,",
          "1493:   const char *reg_exp, json_t *json, char **request_user) {",
          "1496:  json_t *username = json_object_get(json, claim_name);",
          "1497:  if ((username == NULL) || (!json_is_string(username))) {",
          "1498:   oidc_warn(r, \"JSON object did not contain a \\\"%s\\\" string\", claim_name);",
          "1499:   return FALSE;",
          "1500:  }",
          "1504:  if (reg_exp != NULL) {",
          "1506:   char *error_str = NULL;",
          "1507:   if (oidc_util_regexp_first_match(r->pool, *request_user, reg_exp,",
          "1508:     request_user, &error_str) == FALSE) {",
          "1509:    oidc_error(r, \"oidc_util_regexp_first_match failed: %s\", error_str);",
          "1511:    return FALSE;",
          "1512:   }",
          "1513:  }",
          "1515:  return TRUE;",
          "1516: }",
          "1521: static apr_byte_t oidc_set_request_user(request_rec *r, oidc_cfg *c,",
          "1522:   oidc_provider_t *provider, oidc_jwt_t *jwt,",
          "1528:  apr_byte_t post_fix_with_issuer = (claim_name[n - 1] == '@');",
          "1529:  if (post_fix_with_issuer == TRUE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1505:  }",
          "1509:  json_t *claims = NULL;",
          "1510:  oidc_util_decode_json_object(r, s_claims, &claims);",
          "1511:  if (claims == NULL) {",
          "1515:  } else {",
          "1516:   oidc_util_json_merge(r, jwt->payload.value.json, claims);",
          "1519:   json_decref(claims);",
          "1520:  }",
          "1523:   oidc_error(r,",
          "1525:     c->remote_user_claim.claim_name, claim_name);",
          "1527:   return FALSE;",
          "1528:  }",
          "1547:  return TRUE;",
          "1548: }",
          "",
          "[Removed Lines]",
          "1508:  char *username = NULL;",
          "1512:   username = apr_pstrdup(r->pool,",
          "1513:     json_string_value(",
          "1514:       json_object_get(jwt->payload.value.json, claim_name)));",
          "1517:   username = apr_pstrdup(r->pool,",
          "1518:     json_string_value(json_object_get(claims, claim_name)));",
          "1522:  if (username == NULL) {",
          "1524:     \"OIDCRemoteUserClaim is set to \\\"%s\\\", but the id_token JSON payload and user claims did not contain a \\\"%s\\\" string\",",
          "1532:    apr_psprintf(r->pool, \"%s@%s\", username, issuer) : username;",
          "1534:  if (c->remote_user_claim.reg_exp != NULL) {",
          "1536:   char *error_str = NULL;",
          "1537:   if (oidc_util_regexp_first_match(r->pool, *user,",
          "1538:     c->remote_user_claim.reg_exp, user, &error_str) == FALSE) {",
          "1539:    oidc_error(r, \"oidc_util_regexp_first_match failed: %s\", error_str);",
          "1541:    return FALSE;",
          "1542:   }",
          "1543:  }",
          "1545:  oidc_debug(r, \"set user to \\\"%s\\\"\", *user);",
          "",
          "[Added Lines]",
          "1538:  apr_byte_t rc = FALSE;",
          "1539:  char *remote_user = NULL;",
          "1543:   rc = oidc_get_remote_user(r, claim_name, c->remote_user_claim.reg_exp,",
          "1544:     jwt->payload.value.json, &remote_user);",
          "1547:   rc = oidc_get_remote_user(r, claim_name, c->remote_user_claim.reg_exp,",
          "1548:     claims, &remote_user);",
          "1552:  if ((rc == FALSE) || (remote_user == NULL)) {",
          "1554:     \"OIDCRemoteUserClaim is set to \\\"%s\\\", but could not set the remote user based on the requested claim \\\"%s\\\" and the available claims for the user\",",
          "1559:  if (post_fix_with_issuer == TRUE)",
          "1560:   remote_user = apr_psprintf(r->pool, \"%s@%s\", remote_user, issuer);",
          "1562:  r->user = remote_user;",
          "1564:  oidc_debug(r, \"set remote_user to \\\"%s\\\" based on claim: \\\"%s\\\"%s\", r->user,",
          "1565:    c->remote_user_claim.claim_name,",
          "1566:    c->remote_user_claim.reg_exp ?",
          "1567:      apr_psprintf(r->pool, \" and expression: \\\"%s\\\"\",",
          "1568:        c->remote_user_claim.reg_exp) :",
          "1569:        \"\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1817:  const char *prompt = oidc_proto_state_get_prompt(proto_state);",
          "1823:   if ((prompt != NULL) && (apr_strnatcmp(prompt, \"none\") == 0)) {",
          "",
          "[Removed Lines]",
          "1820:  if (oidc_get_remote_user(r, c, provider, jwt, &r->user, claims) == TRUE) {",
          "",
          "[Added Lines]",
          "1844:  if (oidc_set_request_user(r, c, provider, jwt, claims) == TRUE) {",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "397: void oidc_scrub_headers(request_rec *r);",
          "398: void oidc_strip_cookies(request_rec *r);",
          "399: int oidc_content_handler(request_rec *r);",
          "402: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: apr_byte_t oidc_get_remote_user(request_rec *r, const char *claim_name, const char *reg_exp, json_t *json, char **request_user);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:  return TRUE;",
          "465: }",
          "",
          "[Removed Lines]",
          "470: static apr_byte_t oidc_oauth_set_remote_user(request_rec *r, oidc_cfg *c,",
          "471:   json_t *token) {",
          "474:  char *claim_name = apr_pstrdup(r->pool,",
          "475:    c->oauth.remote_user_claim.claim_name);",
          "478:  json_t *username = json_object_get(token, claim_name);",
          "479:  if ((username == NULL) || (!json_is_string(username))) {",
          "480:   oidc_warn(r, \"response JSON object did not contain a \\\"%s\\\" string\",",
          "481:     claim_name);",
          "482:   return FALSE;",
          "483:  }",
          "485:  r->user = apr_pstrdup(r->pool, json_string_value(username));",
          "487:  if (c->oauth.remote_user_claim.reg_exp != NULL) {",
          "489:   char *error_str = NULL;",
          "490:   if (oidc_util_regexp_first_match(r->pool, r->user,",
          "491:     c->oauth.remote_user_claim.reg_exp, &r->user,",
          "492:     &error_str) == FALSE) {",
          "493:    oidc_error(r, \"oidc_util_regexp_first_match failed: %s\", error_str);",
          "494:    r->user = NULL;",
          "495:    return FALSE;",
          "496:   }",
          "497:  }",
          "499:  oidc_debug(r, \"set REMOTE_USER to claim %s=%s\", claim_name,",
          "500:    json_string_value(username));",
          "502:  return TRUE;",
          "503: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:  return HTTP_UNAUTHORIZED;",
          "593: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: static apr_byte_t oidc_oauth_set_request_user(request_rec *r, oidc_cfg *c,",
          "561:   json_t *token) {",
          "562:  char *remote_user = NULL;",
          "564:  if (oidc_get_remote_user(r, c->oauth.remote_user_claim.claim_name,",
          "565:    c->oauth.remote_user_claim.reg_exp, token, &remote_user) == FALSE) {",
          "566:   oidc_error(r,",
          "567:     \"OIDCOAuthRemoteUserClaim is set to \\\"%s\\\", but could not set the remote user based the available claims for the user\",",
          "568:     c->oauth.remote_user_claim.claim_name);",
          "569:   return FALSE;",
          "570:  }",
          "572:  r->user = remote_user;",
          "574:  oidc_debug(r, \"set user to \\\"%s\\\" based on claim: \\\"%s\\\"%s\", r->user,",
          "575:    c->oauth.remote_user_claim.claim_name,",
          "576:    c->oauth.remote_user_claim.reg_exp ?",
          "577:      apr_psprintf(r->pool, \" and expression: \\\"%s\\\"\",",
          "578:        c->oauth.remote_user_claim.reg_exp) :",
          "579:        \"\");",
          "581:  return TRUE;",
          "582: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "672:  oidc_request_state_set(r, OIDC_REQUEST_STATE_KEY_CLAIMS,",
          "673:    (const char *) s_token);",
          "677:   oidc_error(r,",
          "678:     \"remote user could not be set, aborting with HTTP_UNAUTHORIZED\");",
          "680:   return oidc_oauth_return_www_authenticate(r, \"invalid_token\",",
          "681:     \"Could not set remote user\");",
          "682:  }",
          "",
          "[Removed Lines]",
          "676:  if (oidc_oauth_set_remote_user(r, c, token) == FALSE) {",
          "679:   json_decref(token);",
          "",
          "[Added Lines]",
          "665:  if (oidc_oauth_set_request_user(r, c, token) == FALSE) {",
          "666:   json_decref(token);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c2cf739dcbe0dfecb05495d00782ac18b5cf6db",
      "candidate_info": {
        "commit_hash": "7c2cf739dcbe0dfecb05495d00782ac18b5cf6db",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/7c2cf739dcbe0dfecb05495d00782ac18b5cf6db",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "Makefile.in",
          "configure.ac",
          "src/authz.c",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h"
        ],
        "message": "add support for \"Require\" claims boolean expressions with libjq\n\naddresses #178; thanks @hkeeler\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "configure.ac||configure.ac",
          "src/authz.c||src/authz.c",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: REDIS_LIBS=@HIREDIS_LIBS@",
          "22: endif",
          "24: HDRS = \\",
          "25:  $(JWT_HDRS) \\",
          "26:  src/mod_auth_openidc.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: ifeq (@HAVE_LIBJQ@, 1)",
          "25: JQ_CFLAGS=-DUSE_LIBJQ @JQ_CFLAGS@",
          "26: JQ_LIBS=@JQ_LIBS@",
          "27: endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: all: src/mod_auth_openidc.la",
          "54: src/mod_auth_openidc.la: $(SRC) $(HDRS)",
          "55:  @APXS2@ @APXS2_OPTS@ -Wc,\"-DNAMEVER=\\\"@NAMEVER@\\\" $(CFLAGS)\" -Wl,\"$(LIBS)\" -Wc,-Wall -Wc,-g -c $(SRC)",
          "",
          "[Removed Lines]",
          "51: CFLAGS=@OPENSSL_CFLAGS@ @CURL_CFLAGS@ @JANSSON_CFLAGS@ @CJOSE_CFLAGS@ @PCRE_CFLAGS@ $(REDIS_CFLAGS)",
          "52: LIBS=@OPENSSL_LIBS@ @CURL_LIBS@ @JANSSON_LIBS@ @CJOSE_LIBS@ @PCRE_LIBS@ $(REDIS_LIBS)",
          "",
          "[Added Lines]",
          "56: CFLAGS=@OPENSSL_CFLAGS@ @CURL_CFLAGS@ @JANSSON_CFLAGS@ @CJOSE_CFLAGS@ @PCRE_CFLAGS@ $(REDIS_CFLAGS) $(JQ_CFLAGS)",
          "57: LIBS=@OPENSSL_LIBS@ @CURL_LIBS@ @JANSSON_LIBS@ @CJOSE_LIBS@ @PCRE_LIBS@ $(REDIS_LIBS) $(JQ_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: AC_SUBST(HIREDIS_CFLAGS)",
          "87: AC_SUBST(HIREDIS_LIBS)",
          "89: # Create Makefile from Makefile.in",
          "90: AC_CONFIG_FILES([Makefile])",
          "91: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: # JQ",
          "90: AC_ARG_WITH([jq],",
          "91:   [AS_HELP_STRING([--with-jq],",
          "92:     [support JQ @<:@default=check@:>@])],",
          "93:   [],",
          "94:   [with_jq=yes])",
          "95: AS_CASE([\"$with_jq\"],",
          "96:   [yes], [if test \"$JQ_LIBS\" == \"\"; then PKG_CHECK_MODULES([JQ], [libjq], [HAVE_LIBJQ=1], [HAVE_LIBHJQ=0]) ; else [HAVE_LIBJQ=1] ; fi],",
          "97:   [no], [HAVE_LIBJQ=0],",
          "98:   [PKG_CHECK_MODULES([JQ], [jq], [HAVE_LIBJQ=1], [HAVE_LIBJQ=0])])",
          "99: AC_SUBST(HAVE_LIBJQ)",
          "100: AC_SUBST(JQ_CFLAGS)",
          "101: AC_SUBST(JQ_LIBS)",
          "",
          "---------------"
        ],
        "src/authz.c||src/authz.c": [
          "File: src/authz.c -> src/authz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include <pcre.h>",
          "61: static apr_byte_t oidc_authz_match_value(request_rec *r, const char *spec_c,",
          "62:   json_t *val, const char *key) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #ifdef USE_LIBJQ",
          "62: #include \"jq.h\"",
          "63: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:   const char * const attr_spec, const json_t * const claims) {",
          "186:  const char *key;",
          "",
          "[Removed Lines]",
          "183: static apr_byte_t oidc_authz_match_claim(request_rec *r,",
          "",
          "[Added Lines]",
          "187: apr_byte_t oidc_authz_match_claim(request_rec *r,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:  return FALSE;",
          "234: }",
          "240:   const require_line * const reqs, int nelts) {",
          "241:  const int m = r->method_number;",
          "242:  const char *token;",
          "",
          "[Removed Lines]",
          "239: int oidc_authz_worker(request_rec *r, const json_t * const claims,",
          "",
          "[Added Lines]",
          "240: #ifdef USE_LIBJQ",
          "242: static apr_byte_t jq_parse(request_rec *r, jq_state *jq, struct jv_parser *parser) {",
          "243:  apr_byte_t rv = FALSE;",
          "244:  jv value;",
          "246:  while (jv_is_valid((value = jv_parser_next(parser)))) {",
          "247:   jq_start(jq, value, 0);",
          "248:   jv result;",
          "250:   while (jv_is_valid(result = jq_next(jq))) {",
          "251:    jv dumped = jv_dump_string(result, 0);",
          "252:    const char *str = jv_string_value(dumped);",
          "253:    oidc_debug(r, \"dumped: %s\", str);",
          "254:    rv = (apr_strnatcmp(str, \"true\") == 0);",
          "255:   }",
          "257:   jv_free(result);",
          "258:  }",
          "260:  if (jv_invalid_has_msg(jv_copy(value))) {",
          "261:   jv msg = jv_invalid_get_msg(value);",
          "262:   oidc_error(r, \"invalid: %s\", jv_string_value(msg));",
          "263:   jv_free(msg);",
          "264:   rv = FALSE;",
          "265:  } else {",
          "266:   jv_free(value);",
          "267:  }",
          "269:  return rv;",
          "270: }",
          "275: apr_byte_t oidc_authz_match_claims_expr(request_rec *r,",
          "276:   const char * const attr_spec, const json_t * const claims) {",
          "277:  apr_byte_t rv = FALSE;",
          "279:  oidc_debug(r, \" ### enter: '%s' ###\", attr_spec);",
          "281:  jq_state *jq = jq_init();",
          "282:  if (jq_compile(jq, attr_spec) == 0)",
          "283:   jq_teardown(&jq);",
          "285:  struct jv_parser *parser = jv_parser_new(0);",
          "287:  char *buf = oidc_util_encode_json_object(r, (json_t *)claims, 0);",
          "288:  jv_parser_set_buf(parser, buf, strlen(buf), 0);",
          "289:  rv = jq_parse(r, jq, parser);",
          "291:  jv_parser_free(parser);",
          "292:  jq_teardown(&jq);",
          "294:  return rv;",
          "295: }",
          "297: #endif",
          "299: #if MODULE_MAGIC_NUMBER_MAJOR < 20100714",
          "304: int oidc_authz_worker22(request_rec *r, const json_t * const claims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:  int i;",
          "245:  int have_oauthattr = 0;",
          "246:  int count_oauth_claims = 0;",
          "249:  for (i = 0; i < nelts; ++i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:  oidc_authz_match_claim_fn_type match_claim_fn = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:   token = ap_getword_white(r->pool, &requirement);",
          "262:    continue;",
          "263:   }",
          "266:   have_oauthattr = 1;",
          "",
          "[Removed Lines]",
          "261:   if (apr_strnatcasecmp(token, OIDC_REQUIRE_NAME) != 0) {",
          "",
          "[Added Lines]",
          "328:   if (apr_strnatcasecmp(token, OIDC_REQUIRE_CLAIM_NAME) == 0) {",
          "329:    match_claim_fn = oidc_authz_match_claim;",
          "330: #ifdef USE_LIBJQ",
          "331:   } else if (apr_strnatcasecmp(token, OIDC_REQUIRE_CLAIMS_EXPR_NAME) == 0) {",
          "332:    match_claim_fn = oidc_authz_match_claims_expr;",
          "333: #endif",
          "334:   } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "281:   while (*requirement) {",
          "282:    token = ap_getword_conf(r->pool, &requirement);",
          "283:    count_oauth_claims++;",
          "291:     return OK;",
          "292:    }",
          "293:   }",
          "",
          "[Removed Lines]",
          "285:    oidc_debug(r, \"evaluating claim specification: %s\", token);",
          "287:    if (oidc_authz_match_claim(r, token, claims) == TRUE) {",
          "290:     oidc_debug(r, \"require claim '%s' matched\", token);",
          "",
          "[Added Lines]",
          "358:    oidc_debug(r, \"evaluating claim/expr specification: %s\", token);",
          "360:    if (match_claim_fn(r, token, claims) == TRUE) {",
          "363:     oidc_debug(r, \"require claim/expr '%s' matched\", token);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "297:  if (!have_oauthattr) {",
          "299:   return DECLINED;",
          "300:  }",
          "302:  if (count_oauth_claims == 0) {",
          "303:   oidc_warn(r,",
          "305:   return DECLINED;",
          "306:  }",
          "",
          "[Removed Lines]",
          "298:   oidc_debug(r, \"no claim statements found, not performing authz\");",
          "304:     \"'require claim' missing specification(s) in configuration, declining\");",
          "",
          "[Added Lines]",
          "371:   oidc_debug(r, \"no claim/expr statements found, not performing authz\");",
          "377:     \"'require claim/expr' missing specification(s) in configuration, declining\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "312:  return HTTP_UNAUTHORIZED;",
          "313: }",
          "319: authz_status oidc_authz_worker24(request_rec *r, const json_t * const claims,",
          "322:  int count_oauth_claims = 0;",
          "323:  const char *t, *w;",
          "",
          "[Removed Lines]",
          "315: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "320:   const char *require_args) {",
          "",
          "[Added Lines]",
          "388: #else",
          "394:   const char *require_args, oidc_authz_match_claim_fn_type match_claim_fn) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "337:   count_oauth_claims++;",
          "345:    return AUTHZ_GRANTED;",
          "346:   }",
          "347:  }",
          "",
          "[Removed Lines]",
          "339:   oidc_debug(r, \"evaluating claim specification: %s\", w);",
          "342:   if (oidc_authz_match_claim(r, w, claims) == TRUE) {",
          "344:    oidc_debug(r, \"require claim '%s' matched\", w);",
          "",
          "[Added Lines]",
          "413:   oidc_debug(r, \"evaluating claim/expr specification: %s\", w);",
          "416:   if (match_claim_fn(r, w, claims) == TRUE) {",
          "418:    oidc_debug(r, \"require claim/expr '%s' matched\", w);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "350:  if (count_oauth_claims == 0) {",
          "351:   oidc_warn(r,",
          "353:  }",
          "355:  return AUTHZ_DENIED;",
          "356: }",
          "357: #endif",
          "",
          "[Removed Lines]",
          "352:     \"'require claim' missing specification(s) in configuration, denying\");",
          "",
          "[Added Lines]",
          "426:     \"'require claim/expr' missing specification(s) in configuration, denying\");",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1801: }",
          "1803: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1806:   NULL,",
          "1807: };",
          "1808: #endif",
          "",
          "[Removed Lines]",
          "1804: static const authz_provider authz_oidc_provider = {",
          "1805:   &oidc_authz_checker,",
          "",
          "[Added Lines]",
          "1804: static const authz_provider oidc_authz_claim_provider = {",
          "1805:   &oidc_authz_checker_claim,",
          "1806:   NULL,",
          "1807: };",
          "1809: #ifdef USE_LIBJQ",
          "1810: static const authz_provider oidc_authz_claims_expr_provider = {",
          "1811:   &oidc_authz_checker_claims_expr,",
          "1815: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1846: void oidc_register_hooks(apr_pool_t *pool) {",
          "1847:  ap_hook_post_config(oidc_post_config, NULL, NULL, APR_HOOK_LAST);",
          "1848:  ap_hook_child_init(oidc_child_init, NULL, NULL, APR_HOOK_MIDDLE);",
          "1850:  ap_hook_fixups(oidc_auth_fixups, NULL, NULL, APR_HOOK_MIDDLE);",
          "1851: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1852:  ap_hook_check_authn(oidc_check_user_id, NULL, NULL, APR_HOOK_MIDDLE,",
          "1853:    AP_AUTH_INTERNAL_PER_CONF);",
          "1856: #else",
          "1857:  static const char * const authzSucc[] = {\"mod_authz_user.c\", NULL};",
          "1858:  ap_hook_check_user_id(oidc_check_user_id, NULL, NULL, APR_HOOK_MIDDLE);",
          "",
          "[Removed Lines]",
          "1849:     ap_hook_handler(oidc_content_handler, NULL, NULL, APR_HOOK_MIDDLE);",
          "1854:  ap_register_auth_provider(pool, AUTHZ_PROVIDER_GROUP, OIDC_REQUIRE_NAME,",
          "1855:    \"0\", &authz_oidc_provider, AP_AUTH_INTERNAL_PER_CONF);",
          "",
          "[Added Lines]",
          "1856:  ap_hook_handler(oidc_content_handler, NULL, NULL, APR_HOOK_MIDDLE);",
          "1861:  ap_register_auth_provider(pool, AUTHZ_PROVIDER_GROUP,",
          "1862:    OIDC_REQUIRE_CLAIM_NAME, \"0\", &oidc_authz_claim_provider,",
          "1863:    AP_AUTH_INTERNAL_PER_CONF);",
          "1864: #ifdef USE_LIBJQ",
          "1865:  ap_register_auth_provider(pool, AUTHZ_PROVIDER_GROUP,",
          "1866:    OIDC_REQUIRE_CLAIMS_EXPR_NAME, \"0\",",
          "1867:    &oidc_authz_claims_expr_provider, AP_AUTH_INTERNAL_PER_CONF);",
          "1868: #endif",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3233: authz_status oidc_authz_checker(request_rec *r, const char *require_args,",
          "3236:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "3234:   const void *parsed_require_args) {",
          "",
          "[Added Lines]",
          "3234:   const void *parsed_require_args, oidc_authz_match_claim_fn_type match_claim_fn) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3254:  authz_status rc = oidc_authz_worker24(r, claims ? claims : id_token,",
          "3258:  if (claims)",
          "",
          "[Removed Lines]",
          "3255:    require_args);",
          "",
          "[Added Lines]",
          "3255:    require_args, match_claim_fn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3269:  return rc;",
          "3270: }",
          "3271: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3272: authz_status oidc_authz_checker_claim(request_rec *r, const char *require_args, const void *parsed_require_args) {",
          "3273:  return oidc_authz_checker(r, require_args, parsed_require_args, oidc_authz_match_claim);",
          "3274: }",
          "3276: #ifdef USE_LIBJQ",
          "3277: authz_status oidc_authz_checker_claims_expr(request_rec *r, const char *require_args, const void *parsed_require_args) {",
          "3278:  return oidc_authz_checker(r, require_args, parsed_require_args, oidc_authz_match_claims_expr);",
          "3279: }",
          "3280: #endif",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: #define OIDC_UTIL_HTTP_SENDSTRING \"OIDC_UTIL_HTTP_SENDSTRING\"",
          "164: #define OIDC_CACHE_PROVIDER_METADATA_EXPIRY_DEFAULT 86400",
          "",
          "[Removed Lines]",
          "161: #define OIDC_REQUIRE_NAME \"claim\"",
          "",
          "[Added Lines]",
          "161: #define OIDC_REQUIRE_CLAIM_NAME \"claim\"",
          "162: #ifdef USE_LIBJQ",
          "164: #define OIDC_REQUIRE_CLAIMS_EXPR_NAME \"claims_expr\"",
          "165: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349: int oidc_check_user_id(request_rec *r);",
          "350: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "352: #else",
          "353: int oidc_auth_checker(request_rec *r);",
          "354: #endif",
          "",
          "[Removed Lines]",
          "351: authz_status oidc_authz_checker(request_rec *r, const char *require_args, const void *parsed_require_args);",
          "",
          "[Added Lines]",
          "355: authz_status oidc_authz_checker_claim(request_rec *r, const char *require_args, const void *parsed_require_args);",
          "356: #ifdef USE_LIBJQ",
          "357: authz_status oidc_authz_checker_claims_expr(request_rec *r, const char *require_args, const void *parsed_require_args);",
          "358: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495: apr_byte_t oidc_proto_validate_nonce(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *nonce, oidc_jwt_t *jwt);",
          "498: int oidc_authz_worker(request_rec *r, const json_t *const claims, const require_line *const reqs, int nelts);",
          "501: #endif",
          "502: int oidc_oauth_return_www_authenticate(request_rec *r, const char *error, const char *error_description);",
          "",
          "[Removed Lines]",
          "499: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "500: authz_status oidc_authz_worker24(request_rec *r, const json_t * const claims, const char *require_line);",
          "",
          "[Added Lines]",
          "505: typedef apr_byte_t (*oidc_authz_match_claim_fn_type)(request_rec *, const char * const, const json_t * const);",
          "506: apr_byte_t oidc_authz_match_claim(request_rec *r, const char * const attr_spec, const json_t * const claims);",
          "507: #ifdef USE_LIBJQ",
          "508: apr_byte_t oidc_authz_match_claims_expr(request_rec *r, const char * const attr_spec, const json_t * const claims);",
          "509: #endif",
          "510: #if MODULE_MAGIC_NUMBER_MAJOR < 20100714",
          "512: #else",
          "513: authz_status oidc_authz_worker24(request_rec *r, const json_t * const claims, const char *require_args, oidc_authz_match_claim_fn_type match_claim_fn);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12329a838af29ac2fc10862a5c1d71d6df60174c",
      "candidate_info": {
        "commit_hash": "12329a838af29ac2fc10862a5c1d71d6df60174c",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/12329a838af29ac2fc10862a5c1d71d6df60174c",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/common.c"
        ],
        "message": "2.3.2rc1: fix decryption when using shm caching with encryption\n\n- fix issue with the combination of using a shared memory (shm) cache\nand using encryption (OIDCCacheEncrypt On) where the cache value would\nbe corrupted after the first (successful) retrieval\n- bump to 2.3.2rc1  \n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/common.c||src/cache/common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:  char *encoded_tag = strstr(cache_value, \".\");",
          "433:   return FALSE;",
          "435:  encoded_tag++;",
          "",
          "[Removed Lines]",
          "432:  if (encoded_tag == NULL)",
          "",
          "[Added Lines]",
          "432:  if (encoded_tag == NULL) {",
          "433:   oidc_error(r,",
          "434:     \"corrupted cache value: no tag separator found in encrypted value\");",
          "436:  }",
          "439:  cache_value = apr_pstrndup(r->pool, cache_value,",
          "440:    strlen(cache_value) - strlen(encoded_tag));",
          "",
          "---------------"
        ]
      }
    }
  ]
}