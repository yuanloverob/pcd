{
  "cve_id": "CVE-2022-41861",
  "cve_desc": "A flaw was found in freeradius. A malicious RADIUS client or home server can send a malformed abinary attribute which can cause the server to crash.",
  "repo": "FreeRADIUS/freeradius-server",
  "patch_hash": "0ec2b39d260e08e4c3464f6b95005821dc559c62",
  "patch_info": {
    "commit_hash": "0ec2b39d260e08e4c3464f6b95005821dc559c62",
    "repo": "FreeRADIUS/freeradius-server",
    "commit_url": "https://github.com/FreeRADIUS/freeradius-server/commit/0ec2b39d260e",
    "files": [
      "src/lib/filters.c"
    ],
    "message": "manual port of commit 5906bfa1",
    "before_after_code_files": [
      "src/lib/filters.c||src/lib/filters.c"
    ]
  },
  "patch_diff": {
    "src/lib/filters.c||src/lib/filters.c": [
      "File: src/lib/filters.c -> src/lib/filters.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1205:    }",
      "1206:   }",
      "1207:  } else if (filter->type == RAD_FILTER_GENERIC) {",
      "1210:   i = snprintf(p, outlen, \" %u \", (unsigned int) ntohs(filter->u.generic.offset));",
      "1211:   p += i;",
      "1215:    i = snprintf(p, outlen, \"%02x\", filter->u.generic.mask[count]);",
      "1216:    p += i;",
      "1217:    outlen -= i;",
      "",
      "[Removed Lines]",
      "1208:   int count;",
      "1214:   for (count = 0; count < ntohs(filter->u.generic.len); count++) {",
      "",
      "[Added Lines]",
      "1208:   size_t count, masklen;",
      "1210:   masklen = ntohs(filter->u.generic.len);",
      "1211:   if (masklen >= sizeof(filter->u.generic.mask)) {",
      "1213:    return;",
      "1214:   }",
      "1220:   for (count = 0; count < masklen; count++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1222:   outlen--;",
      "1226:    i = snprintf(p, outlen, \"%02x\", filter->u.generic.value[count]);",
      "1227:    p += i;",
      "1228:    outlen -= i;",
      "",
      "[Removed Lines]",
      "1225:   for (count = 0; count < ntohs(filter->u.generic.len); count++) {",
      "",
      "[Added Lines]",
      "1231:   for (count = 0; count < masklen; count++) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12f92ba18695cd2c925619cc1b06f7786328bd5f",
      "candidate_info": {
        "commit_hash": "12f92ba18695cd2c925619cc1b06f7786328bd5f",
        "repo": "FreeRADIUS/freeradius-server",
        "commit_url": "https://github.com/FreeRADIUS/freeradius-server/commit/12f92ba18695cd2c925619cc1b06f7786328bd5f",
        "files": [
          "src/lib/filters.c"
        ],
        "message": "manual port of commit 5906bfa1",
        "before_after_code_files": [
          "src/lib/filters.c||src/lib/filters.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/filters.c||src/lib/filters.c"
          ],
          "candidate": [
            "src/lib/filters.c||src/lib/filters.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/filters.c||src/lib/filters.c": [
          "File: src/lib/filters.c -> src/lib/filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:    }",
          "1206:   }",
          "1207:  } else if (filter->type == RAD_FILTER_GENERIC) {",
          "1210:   i = snprintf(p, outlen, \" %u \", (unsigned int) ntohs(filter->u.generic.offset));",
          "1211:   p += i;",
          "1215:    i = snprintf(p, outlen, \"%02x\", filter->u.generic.mask[count]);",
          "1216:    p += i;",
          "1217:    outlen -= i;",
          "",
          "[Removed Lines]",
          "1208:   int count;",
          "1214:   for (count = 0; count < ntohs(filter->u.generic.len); count++) {",
          "",
          "[Added Lines]",
          "1208:   size_t count, masklen;",
          "1210:   masklen = ntohs(filter->u.generic.len);",
          "1211:   if (masklen >= sizeof(filter->u.generic.mask)) {",
          "1213:    return;",
          "1214:   }",
          "1220:   for (count = 0; count < masklen; count++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1222:   outlen--;",
          "1226:    i = snprintf(p, outlen, \"%02x\", filter->u.generic.value[count]);",
          "1227:    p += i;",
          "1228:    outlen -= i;",
          "",
          "[Removed Lines]",
          "1225:   for (count = 0; count < ntohs(filter->u.generic.len); count++) {",
          "",
          "[Added Lines]",
          "1231:   for (count = 0; count < masklen; count++) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}