{
  "cve_id": "CVE-2023-27597",
  "cve_desc": "OpenSIPS is a Session Initiation Protocol (SIP) server implementation. Prior to versions 3.1.8 and 3.2.5, when a specially crafted SIP message is processed by the function `rewrite_ruri`, a crash occurs due to a segmentation fault. This issue causes the server to crash. It affects configurations containing functions that make use of the affected code, such as the function `setport`. This issue has been fixed in version 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
  "patch_info": {
    "commit_hash": "b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/b2dffe4b5cd81182c9c8eabb6c96aac96c7acfe3",
    "files": [
      "parser/parse_uri.c"
    ],
    "message": "[core] fix parse_uri() parsing\n\nIssue discovered during OpenSIPS Security Audit 2022,\n\tby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-358f-935m-7p9c",
    "before_after_code_files": [
      "parser/parse_uri.c||parser/parse_uri.c"
    ]
  },
  "patch_diff": {
    "parser/parse_uri.c||parser/parse_uri.c": [
      "File: parser/parse_uri.c -> parser/parse_uri.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532:   case TELS_URI_T:",
      "1534:    uri->user=uri->host;",
      "1536:    uri->host.len=0;",
      "1537:    break;",
      "1538:   case SIP_URI_T:",
      "",
      "[Removed Lines]",
      "1535:    uri->host.s=\"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1543:   case URN_NENA_SERVICE_URI_T:",
      "1544:    uri->user.s=0;",
      "1545:    uri->user.len=0;",
      "1548:    break;",
      "1549:   case ERROR_URI_T:",
      "1550:    LM_ERR(\"unexpected error (BUG?)\\n\");",
      "",
      "[Removed Lines]",
      "1546:    uri->host.s=\"\";",
      "1547:    uri->host.len=0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
      "candidate_info": {
        "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
        "files": [
          "lib/cJSON.c"
        ],
        "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
        "before_after_code_files": [
          "lib/cJSON.c||lib/cJSON.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/cJSON.c||lib/cJSON.c": [
          "File: lib/cJSON.c -> lib/cJSON.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483: fail:",
          "1484:     if (item->child != NULL)",
          "1485:     {",
          "1487:         item->child = NULL;",
          "1488:     }",
          "",
          "[Removed Lines]",
          "1486:         cJSON_Delete(child);",
          "",
          "[Added Lines]",
          "1486:         cJSON_Delete(item->child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fea6bedae03786057c929fe82f83ceee8fa1156",
      "candidate_info": {
        "commit_hash": "7fea6bedae03786057c929fe82f83ceee8fa1156",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7fea6bedae03786057c929fe82f83ceee8fa1156",
        "files": [
          "menuconfig/curses.c"
        ],
        "message": "Merge pull request #2821 from lemenkov/format_security\n\nFix -Werror=format-security\n\n(cherry picked from commit 47bfb3e3292a1acca6562427038b25a302d65ff1)",
        "before_after_code_files": [
          "menuconfig/curses.c||menuconfig/curses.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "menuconfig/curses.c||menuconfig/curses.c": [
          "File: menuconfig/curses.c -> menuconfig/curses.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  attron(COLOR_PAIR(1));",
          "94:  print_notice(NOTICE_Y,NOTICE_X,0,\"Press h for navigation help.\");",
          "95:  attroff(COLOR_PAIR(1));",
          "",
          "[Removed Lines]",
          "92:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,menu->parent?menu->parent->name:\"OpenSIPS Main Configuration Menu\");",
          "",
          "[Added Lines]",
          "92:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,\"%s\",menu->parent?menu->parent->name:\"OpenSIPS Main Configuration Menu\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:  attron(COLOR_PAIR(1));",
          "209:  attroff(COLOR_PAIR(1));",
          "211:  if (should_scroll) {",
          "",
          "[Removed Lines]",
          "208:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,menu->name);",
          "",
          "[Added Lines]",
          "208:  mvprintw(HIGH_NOTICE_Y,max_x/2-20,\"%s\",menu->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:  if (current->description) {",
          "250:   attron(COLOR_PAIR(1));",
          "252:   attroff(COLOR_PAIR(1));",
          "253:  }",
          "",
          "[Removed Lines]",
          "251:   print_notice(NOTICE_Y,NOTICE_X,0,current->description);",
          "",
          "[Added Lines]",
          "251:   print_notice(NOTICE_Y,NOTICE_X,0,\"%s\",current->description);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:  }",
          "343:  return 0;",
          "",
          "[Removed Lines]",
          "344: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cb182de0bf1f31dfe6e697b4321d0b7528268f3",
      "candidate_info": {
        "commit_hash": "7cb182de0bf1f31dfe6e697b4321d0b7528268f3",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/7cb182de0bf1f31dfe6e697b4321d0b7528268f3",
        "files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_utils.c"
        ],
        "message": "Merge pull request #2806 from john08burke/redis_bugfix_3_1\n\n[cachedb_redis] cleanup stale context pointer, branch 3.1\n\n(cherry picked from commit 6ea4a7ac1cddae536a4bc3d2a3fe8ed279d671dc)",
        "before_after_code_files": [
          "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_utils.c||modules/cachedb_redis/cachedb_redis_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.c -> modules/cachedb_redis/cachedb_redis_dbase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:    LM_ERR(\"failed to auth to redis - %.*s\\n\",",
          "162:     rpl?(unsigned)rpl->len:7,rpl?rpl->str:\"FAILURE\");",
          "163:    freeReplyObject(rpl);",
          "165:   }",
          "166:   LM_DBG(\"AUTH [password] -  %.*s\\n\",(unsigned)rpl->len,rpl->str);",
          "167:   freeReplyObject(rpl);",
          "",
          "[Removed Lines]",
          "164:    goto error;",
          "",
          "[Added Lines]",
          "164:    redisFree(node->context);",
          "165:    node->context = NULL;",
          "166:    return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:    LM_ERR(\"failed to select database %s - %.*s\\n\",con->id->database,",
          "174:     rpl?(unsigned)rpl->len:7,rpl?rpl->str:\"FAILURE\");",
          "175:    freeReplyObject(rpl);",
          "177:   }",
          "179:   LM_DBG(\"SELECT [%s] - %.*s\\n\",con->id->database,(unsigned)rpl->len,rpl->str);",
          "",
          "[Removed Lines]",
          "176:    goto error;",
          "",
          "[Added Lines]",
          "178:    redisFree(node->context);",
          "179:    node->context = NULL;",
          "180:    return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:  LM_DBG(\"reconnecting node %s:%d \\n\",node->ip,node->port);",
          "200:   redisFree(node->context);",
          "202:  return redis_connect_node(con,node);",
          "203: }",
          "",
          "[Removed Lines]",
          "199:  if(node->context)",
          "",
          "[Added Lines]",
          "203:  if(node->context) {",
          "205:   node->context = NULL;",
          "206:  }",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_utils.c||modules/cachedb_redis/cachedb_redis_utils.c": [
          "File: modules/cachedb_redis/cachedb_redis_utils.c -> modules/cachedb_redis/cachedb_redis_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  new = con->nodes;",
          "110:  while (new) {",
          "111:   foo = new->next;",
          "113:   if (use_tls && new->tls_dom)",
          "114:    tls_api.release_domain(new->tls_dom);",
          "115:   pkg_free(new);",
          "116:   new = foo;",
          "117:  }",
          "",
          "[Removed Lines]",
          "112:   redisFree(new->context);",
          "",
          "[Added Lines]",
          "114:   redisFree(new->context);",
          "115:   new->context = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31d99cdaa3b3b42df529d450df2d8df40e576d2c",
      "candidate_info": {
        "commit_hash": "31d99cdaa3b3b42df529d450df2d8df40e576d2c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/31d99cdaa3b3b42df529d450df2d8df40e576d2c",
        "files": [
          "parser/case_feat.h",
          "parser/case_repl.h"
        ],
        "message": "Fix switch-case levels for Replaces and Feature-Caps header name parsing\n\n(cherry picked from commit 6b49736cca0d1e8ebf0440cf51f95a08f31b9222)",
        "before_after_code_files": [
          "parser/case_feat.h||parser/case_feat.h",
          "parser/case_repl.h||parser/case_repl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/case_feat.h||parser/case_feat.h": [
          "File: parser/case_feat.h -> parser/case_feat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef CASE_FEAT_H",
          "24: #define CASE_FEAT_H",
          "35: #define ure__CASE              \\",
          "36:  switch(LOWER_DWORD(val)) { \\",
          "",
          "[Removed Lines]",
          "26: #define feat_CASE              \\",
          "27:  switch(LOWER_DWORD(val)) { \\",
          "28:   case _feat_:           \\",
          "29:    p += 4;            \\",
          "30:    val = READ(p);     \\",
          "31:    ure__CASE;         \\",
          "32:    goto other;        \\",
          "33:  }",
          "",
          "[Added Lines]",
          "26: #define feat_CASE          \\",
          "27:   p += 4;            \\",
          "28:   val = READ(p);     \\",
          "29:   ure__CASE;         \\",
          "30:   goto other;        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:    goto other;        \\",
          "42:  }",
          "",
          "[Removed Lines]",
          "44: #define caps_CASE                               \\",
          "45:  switch(LOWER_DWORD(val)) {                  \\",
          "46:   case _caps_:                            \\",
          "47:    p += 4;                             \\",
          "48:    if (*p == ':') {                    \\",
          "49:     hdr->type = HDR_FEATURE_CAPS_T; \\",
          "50:     hdr->name.len = 12;             \\",
          "51:     return p + 1;                   \\",
          "52:    }                                   \\",
          "53:    p++;                                \\",
          "54:    goto dc_cont;                       \\",
          "55:   }",
          "",
          "[Added Lines]",
          "41: #define caps_CASE                         \\",
          "42:  if (LOWER_DWORD(val) == _caps_) {     \\",
          "43:   hdr->type = HDR_FEATURE_CAPS_T;   \\",
          "44:   hdr->name.len = 12;               \\",
          "45:   p += 4;                           \\",
          "46:   goto dc_cont;                     \\",
          "47:  }",
          "",
          "---------------"
        ],
        "parser/case_repl.h||parser/case_repl.h": [
          "File: parser/case_repl.h -> parser/case_repl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef CASE_REPL_H",
          "24: #define CASE_REPL_H",
          "",
          "[Removed Lines]",
          "26: #define repl_CASE              \\",
          "27:  switch(LOWER_DWORD(val)) { \\",
          "28:   case _repl_:           \\",
          "29:    p += 4;            \\",
          "30:    val = READ(p);     \\",
          "31:    aces_CASE;         \\",
          "32:    goto other;        \\",
          "33:  }",
          "35: #define aces_CASE                               \\",
          "36:  switch(LOWER_DWORD(val)) {                  \\",
          "37:   case _aces_:                            \\",
          "38:    p += 4;                             \\",
          "39:    if (*p == ':') {                    \\",
          "40:     hdr->type = HDR_REPLACES_T;     \\",
          "41:     hdr->name.len = 8;              \\",
          "42:     return p + 1;                   \\",
          "43:    }                                   \\",
          "44:    p++;                                \\",
          "45:    goto dc_cont;                       \\",
          "46:   }",
          "",
          "[Added Lines]",
          "26: #define repl_CASE          \\",
          "27:   p += 4;            \\",
          "28:   val = READ(p);     \\",
          "29:   aces_CASE;         \\",
          "30:   goto other;        \\",
          "32: #define aces_CASE                         \\",
          "33:  if (LOWER_DWORD(val) == _aces_) {     \\",
          "34:   hdr->type = HDR_REPLACES_T;       \\",
          "35:   hdr->name.len = 8;                \\",
          "36:   p += 4;                           \\",
          "37:   goto dc_cont;                     \\",
          "38:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a518e41c0d03de7e8e000214785c64a444dbfe5d",
      "candidate_info": {
        "commit_hash": "a518e41c0d03de7e8e000214785c64a444dbfe5d",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/a518e41c0d03de7e8e000214785c64a444dbfe5d",
        "files": [
          "modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_sessions.c",
          "modules/siprec/siprec_logic.c",
          "modules/siprec/siprec_sess.c",
          "modules/siprec/siprec_sess.h"
        ],
        "message": "b2b*: consider dlginfo for requests an replies as well\n\n(cherry picked from commit 7aa2007300fac85645bb4edaea3085557aae7923)",
        "before_after_code_files": [
          "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h",
          "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c",
          "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c",
          "modules/siprec/siprec_sess.c||modules/siprec/siprec_sess.c",
          "modules/siprec/siprec_sess.h||modules/siprec/siprec_sess.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/b2b_entities/b2be_load.h||modules/b2b_entities/b2be_load.h": [
          "File: modules/b2b_entities/b2be_load.h -> modules/b2b_entities/b2be_load.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:  return load_b2b( b2b_api );",
          "188: }",
          "191: {",
          "192:  b2b_dlginfo_t* dlg = NULL;",
          "193:  int size;",
          "200:  dlg = shm_malloc(size);",
          "201:  if (!dlg)",
          "202:   return NULL;",
          "203:  memset(dlg, 0, size);",
          "205:  dlg->callid.s = (char *)(dlg + 1);",
          "210:   dlg->totag.s = dlg->callid.s + dlg->callid.len;",
          "212:  }",
          "215:   dlg->fromtag.s = dlg->callid.s + dlg->callid.len + dlg->totag.len;",
          "217:  }",
          "218:  return dlg;",
          "219: }",
          "221: #endif",
          "",
          "[Removed Lines]",
          "190: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "195:  size = sizeof(b2b_dlginfo_t) + info->callid.len;",
          "196:  if (info->totag.s)",
          "197:   size += info->totag.len;",
          "198:  if (info->fromtag.s)",
          "199:   size += info->fromtag.len;",
          "206:  dlg->callid.len = info->callid.len;",
          "207:  memcpy(dlg->callid.s, info->callid.s, dlg->callid.len);",
          "208:  if (info->totag.s) {",
          "209:   dlg->totag.len = info->totag.len;",
          "211:   memcpy(dlg->totag.s, info->totag.s, dlg->totag.len);",
          "213:  if (info->fromtag.s) {",
          "214:   dlg->fromtag.len = info->fromtag.len;",
          "216:   memcpy(dlg->fromtag.s, info->fromtag.s, dlg->fromtag.len);",
          "",
          "[Added Lines]",
          "190: static inline b2b_dlginfo_t *b2b_new_dlginfo(str *callid, str *fromtag, str *totag)",
          "195:  size = sizeof(b2b_dlginfo_t) + callid->len;",
          "196:  if (totag && totag->s)",
          "197:   size += totag->len;",
          "198:  if (fromtag && fromtag->s)",
          "199:   size += fromtag->len;",
          "206:  dlg->callid.len = callid->len;",
          "207:  memcpy(dlg->callid.s, callid->s, callid->len);",
          "208:  if (totag->s) {",
          "209:   dlg->totag.len = totag->len;",
          "211:   memcpy(dlg->totag.s, totag->s, totag->len);",
          "213:  if (fromtag->s) {",
          "214:   dlg->fromtag.len = fromtag->len;",
          "216:   memcpy(dlg->fromtag.s, fromtag->s, fromtag->len);",
          "221: static inline b2b_dlginfo_t *b2b_dup_dlginfo(b2b_dlginfo_t *info)",
          "222: {",
          "223:  return b2b_new_dlginfo(&info->callid, &info->fromtag, &info->totag);",
          "224: }",
          "",
          "---------------"
        ],
        "modules/media_exchange/media_sessions.c||modules/media_exchange/media_sessions.c": [
          "File: modules/media_exchange/media_sessions.c -> modules/media_exchange/media_sessions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:  memset(&req, 0, sizeof(req));",
          "251:  req.et = msl->b2b_entity;",
          "252:  req.b2b_key = &msl->b2b_key;",
          "253:  req.method = &m;",
          "254:  req.body = body;",
          "255:  if (body)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  req.dlginfo = msl->dlginfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:  reply_data.code = code;",
          "278:  reply_data.text = reason;",
          "279:  reply_data.body = body;",
          "280:  if (body)",
          "281:   reply_data.extra_headers = &content_type_sdp_hdr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:  reply_data.dlginfo = msl->dlginfo;",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_logic.c||modules/siprec/siprec_logic.c": [
          "File: modules/siprec/siprec_logic.c -> modules/siprec/siprec_logic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  req.et = B2B_CLIENT;",
          "125:  req.b2b_key = &ss->b2b_key;",
          "126:  req.method = &bye;",
          "129:  if (srec_b2b.send_request(&req) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:  req.et = B2B_CLIENT;",
          "244:  req.b2b_key = &ss->b2b_key;",
          "245:  req.method = &ack;",
          "248:  if (srec_b2b.send_request(&req) < 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:  req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:   req.et = B2B_CLIENT;",
          "282:   req.b2b_key = &ss->b2b_key;",
          "283:   req.method = &bye;",
          "286:   if (srec_b2b.send_request(&req) < 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   req.dlginfo = ss->dlginfo;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "311: static int srec_b2b_confirm(str* key, str* entity_key, int src, b2b_dlginfo_t* info)",
          "312: {",
          "314:  struct src_sess *ss;",
          "316:  ss = *(struct src_sess **)key->s;",
          "",
          "[Removed Lines]",
          "313:  char *tmp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:     entity_key->len, entity_key->s);",
          "320:   return -1;",
          "321:  }",
          "343:   return -1;",
          "344:  }",
          "348:  return 0;",
          "349: }",
          "",
          "[Removed Lines]",
          "322:  tmp = shm_malloc(info->fromtag.len);",
          "323:  if (!tmp) {",
          "324:   LM_ERR(\"cannot allocate dialog info fromtag!\\n\");",
          "325:   return -1;",
          "326:  }",
          "327:  ss->b2b_fromtag.s = tmp;",
          "328:  ss->b2b_fromtag.len = info->fromtag.len;",
          "329:  memcpy(ss->b2b_fromtag.s, info->fromtag.s, ss->b2b_fromtag.len);",
          "331:  tmp = shm_malloc(info->totag.len);",
          "332:  if (!tmp) {",
          "333:   LM_ERR(\"cannot allocate dialog info totag!\\n\");",
          "334:   return -1;",
          "335:  }",
          "336:  ss->b2b_totag.s = tmp;",
          "337:  ss->b2b_totag.len = info->totag.len;",
          "338:  memcpy(ss->b2b_totag.s, info->totag.s, ss->b2b_totag.len);",
          "340:  tmp = shm_malloc(info->callid.len);",
          "341:  if (!tmp) {",
          "342:   LM_ERR(\"cannot allocate dialog info callid!\\n\");",
          "345:  ss->b2b_callid.s = tmp;",
          "346:  ss->b2b_callid.len = info->callid.len;",
          "347:  memcpy(ss->b2b_callid.s, info->callid.s, ss->b2b_callid.len);",
          "",
          "[Added Lines]",
          "324:  ss->dlginfo = b2b_dup_dlginfo(info);",
          "325:  if (!ss->dlginfo) {",
          "326:   LM_ERR(\"could not duplicate b2b dialog info!\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "498:   goto error;",
          "499:  }",
          "500:  req.body = &body;",
          "502:  if (srec_b2b.send_request(&req) < 0)",
          "503:   LM_ERR(\"Cannot end recording session for key %.*s\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:  req.dlginfo = sess->dlginfo;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "547: void srec_logic_destroy(struct src_sess *sess)",
          "548: {",
          "550:  if (!sess->b2b_key.s)",
          "551:   return;",
          "552:  shm_free(sess->b2b_key.s);",
          "566:  sess->b2b_key.s = NULL;",
          "567: }",
          "",
          "[Removed Lines]",
          "549:  b2b_dlginfo_t info;",
          "554:  info.fromtag = sess->b2b_fromtag;",
          "555:  info.totag = sess->b2b_totag;",
          "556:  info.callid = sess->b2b_callid;",
          "557:  srec_b2b.entity_delete(B2B_CLIENT, &sess->b2b_key,",
          "558:    (info.callid.s ? &info: NULL), 1, 1);",
          "559:  if (sess->b2b_fromtag.s)",
          "560:   shm_free(sess->b2b_fromtag.s);",
          "561:  if (sess->b2b_totag.s)",
          "562:   shm_free(sess->b2b_totag.s);",
          "563:  if (sess->b2b_callid.s)",
          "564:   shm_free(sess->b2b_callid.s);",
          "565:  sess->b2b_callid.s = sess->b2b_totag.s = sess->b2b_fromtag.s = NULL;",
          "",
          "[Added Lines]",
          "535:  srec_b2b.entity_delete(B2B_CLIENT, &sess->b2b_key, sess->dlginfo, 1, 1);",
          "536:  if (sess->dlginfo)",
          "537:   shm_free(sess->dlginfo);",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_sess.c||modules/siprec/siprec_sess.c": [
          "File: modules/siprec/siprec_sess.c -> modules/siprec/siprec_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:  struct socket_info *si;",
          "252:  int p, port, proto, c, label, medianum;",
          "253:  int p_type;",
          "255:  if (!dlg) {",
          "256:   LM_ERR(\"null dialog - cannot fetch siprec info!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  str from_tag, to_tag;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:  }",
          "332:  memcpy(sess->b2b_key.s, tmp.s, tmp.len);",
          "333:  sess->b2b_key.len = tmp.len;",
          "334:  SIPREC_BIN_POP(str, &tmp);",
          "355:  }",
          "359:  SIPREC_BIN_POP(int, &p);",
          "360:  for (; p > 0; p--) {",
          "",
          "[Removed Lines]",
          "335:  sess->b2b_fromtag.s = shm_malloc(tmp.len);",
          "336:  if (!sess->b2b_fromtag.s) {",
          "337:   LM_ERR(\"cannot allocate memory for b2b_fromtag!\\n\");",
          "338:   goto error;",
          "339:  }",
          "340:  memcpy(sess->b2b_fromtag.s, tmp.s, tmp.len);",
          "341:  sess->b2b_fromtag.len = tmp.len;",
          "342:  SIPREC_BIN_POP(str, &tmp);",
          "343:  sess->b2b_totag.s = shm_malloc(tmp.len);",
          "344:  if (!sess->b2b_totag.s) {",
          "345:   LM_ERR(\"cannot allocate memory for b2b_totag!\\n\");",
          "346:   goto error;",
          "347:  }",
          "348:  memcpy(sess->b2b_totag.s, tmp.s, tmp.len);",
          "349:  sess->b2b_totag.len = tmp.len;",
          "350:  SIPREC_BIN_POP(str, &tmp);",
          "351:  sess->b2b_callid.s = shm_malloc(tmp.len);",
          "352:  if (!sess->b2b_callid.s) {",
          "353:   LM_ERR(\"cannot allocate memory for b2b_callid!\\n\");",
          "354:   goto error;",
          "356:  memcpy(sess->b2b_callid.s, tmp.s, tmp.len);",
          "357:  sess->b2b_callid.len = tmp.len;",
          "",
          "[Added Lines]",
          "335:  SIPREC_BIN_POP(str, &from_tag);",
          "336:  SIPREC_BIN_POP(str, &to_tag);",
          "339:  if (tmp.len) {",
          "340:   sess->dlginfo = b2b_new_dlginfo(&tmp, &from_tag, &to_tag);",
          "341:   if (!sess->dlginfo) {",
          "342:    LM_ERR(\"could not create b2b dlginfo for %.*s/%.*s/%.*s!\\n\",",
          "343:      tmp.len, tmp.s, from_tag.len, from_tag.s, to_tag.len, to_tag.s);",
          "344:    goto error;",
          "345:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "483:   SIPREC_BIN_PUSH(str, &empty);",
          "484:  SIPREC_BIN_PUSH(str, SIPREC_SERIALIZE(ss->uuid));",
          "485:  SIPREC_BIN_PUSH(str, &ss->b2b_key);",
          "489:  SIPREC_BIN_PUSH(int, ss->participants_no);",
          "491:  for (p = 0; p < ss->participants_no; p++) {",
          "",
          "[Removed Lines]",
          "486:  SIPREC_BIN_PUSH(str, &ss->b2b_fromtag);",
          "487:  SIPREC_BIN_PUSH(str, &ss->b2b_totag);",
          "488:  SIPREC_BIN_PUSH(str, &ss->b2b_callid);",
          "",
          "[Added Lines]",
          "475:  if (ss->dlginfo) {",
          "476:   SIPREC_BIN_PUSH(str, &ss->dlginfo->fromtag);",
          "477:   SIPREC_BIN_PUSH(str, &ss->dlginfo->totag);",
          "478:   SIPREC_BIN_PUSH(str, &ss->dlginfo->callid);",
          "479:  } else {",
          "480:   SIPREC_BIN_PUSH(str, &empty);",
          "481:   SIPREC_BIN_PUSH(str, &empty);",
          "482:   SIPREC_BIN_PUSH(str, &empty);",
          "483:  }",
          "",
          "---------------"
        ],
        "modules/siprec/siprec_sess.h||modules/siprec/siprec_sess.h": [
          "File: modules/siprec/siprec_sess.h -> modules/siprec/siprec_sess.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"siprec_body.h\"",
          "30: #include \"../dialog/dlg_load.h\"",
          "31: #include \"../tm//tm_load.h\"",
          "32: #include \"../../ut.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include \"../b2b_entities/b2be_load.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:  str b2b_key;",
          "103: };",
          "105: void src_unref_session(void *p);",
          "",
          "[Removed Lines]",
          "100:  str b2b_fromtag;",
          "101:  str b2b_totag;",
          "102:  str b2b_callid;",
          "",
          "[Added Lines]",
          "101:  b2b_dlginfo_t *dlginfo;",
          "",
          "---------------"
        ]
      }
    }
  ]
}