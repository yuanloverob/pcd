{
  "cve_id": "CVE-2021-35939",
  "cve_desc": "It was found that the fix for CVE-2017-7500 and CVE-2017-7501 was incomplete: the check was only implemented for the parent directory of the file to be created. A local unprivileged user who owns another ancestor directory could potentially use this flaw to gain root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
  "repo": "rpm-software-management/rpm",
  "patch_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
  "patch_info": {
    "commit_hash": "96ec957e281220f8e137a2d5eb23b83a6377d556",
    "repo": "rpm-software-management/rpm",
    "commit_url": "https://github.com/rpm-software-management/rpm/commit/96ec957e281220f8e137a2d5eb23b83a6377d556",
    "files": [
      "INSTALL",
      "configure.ac",
      "lib/fsm.c"
    ],
    "message": "Validate intermediate symlinks during installation, CVE-2021-35939\n\nWhenever directory changes during unpacking, walk the entire tree from\nstarting from / and validate any symlinks crossed, fail the install\non invalid links.\n\nThis is the first of step of many towards securing our file operations\nagainst local tamperers and besides plugging that one CVE, paves the way\nfor the next step by adding the necessary directory fd tracking.\nThis also bumps the rpm OS requirements to a whole new level by requiring\nthe *at() family of calls from POSIX-1.2008.\n\nThis necessarily does a whole lot of huffing and puffing we previously\ndid not do. It should be possible to cache secure (ie root-owned)\ndirectory structures to avoid validating everything a million times\nbut for now, just keeping things simple.",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "lib/fsm.c||lib/fsm.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "581: AC_CHECK_FUNCS(",
      "582:    [mkstemp getcwd basename dirname realpath setenv unsetenv regcomp lchown \\",
      "584:    [], [AC_MSG_ERROR([function required by rpm])])",
      "586: AC_LIBOBJ(fnmatch)",
      "",
      "[Removed Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo ],",
      "",
      "[Added Lines]",
      "583:     utimes getline localtime_r statvfs getaddrinfo \\",
      "584:     openat mkdirat fstatat ],",
      "",
      "---------------"
    ],
    "lib/fsm.c||lib/fsm.c": [
      "File: lib/fsm.c -> lib/fsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: #include <inttypes.h>",
      "9: #include <utime.h>",
      "10: #include <errno.h>",
      "11: #if WITH_CAP",
      "12: #include <sys/capability.h>",
      "13: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #include <fcntl.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "406:     return rc;",
      "407: }",
      "410: {",
      "412:     if (_fsm_debug)",
      "415:         (rc < 0 ? strerror(errno) : \"\"));",
      "416:     if (rc < 0) rc = RPMERR_MKDIR_FAILED;",
      "417:     return rc;",
      "418: }",
      "420: static int fsmMkfifo(const char *path, mode_t mode)",
      "421: {",
      "422:     int rc = mkfifo(path, (mode & 07777));",
      "",
      "[Removed Lines]",
      "409: static int fsmMkdir(const char *path, mode_t mode)",
      "411:     int rc = mkdir(path, (mode & 07777));",
      "413:  rpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,",
      "414:         path, (unsigned)(mode & 07777),",
      "",
      "[Added Lines]",
      "411: static int fsmMkdir(int dirfd, const char *path, mode_t mode)",
      "413:     int rc = mkdirat(dirfd, path, (mode & 07777));",
      "415:  rpmlog(RPMLOG_DEBUG, \" %8s (%d %s, 0%04o) %s\\n\", __func__,",
      "416:         dirfd, path, (unsigned)(mode & 07777),",
      "422: static int fsmOpenat(int dirfd, const char *path, int flags)",
      "423: {",
      "424:     struct stat lsb, sb;",
      "425:     int sflags = flags | O_NOFOLLOW;",
      "426:     int fd = openat(dirfd, path, sflags);",
      "434:     if (fd < 0 && errno == ELOOP && flags != sflags) {",
      "435:  int ffd = openat(dirfd, path, flags);",
      "436:  if (ffd >= 0 && fstatat(dirfd, path, &lsb, AT_SYMLINK_NOFOLLOW) == 0) {",
      "437:      if (fstat(ffd, &sb) == 0) {",
      "438:   if (lsb.st_uid == 0 || lsb.st_uid == sb.st_uid) {",
      "439:       fd = ffd;",
      "440:   } else {",
      "441:       close(ffd);",
      "442:   }",
      "443:      }",
      "444:  }",
      "445:     }",
      "446:     return fd;",
      "447: }",
      "449: static int fsmDoMkDir(rpmPlugins plugins, int dirfd, const char *dn,",
      "450:    int owned, mode_t mode)",
      "451: {",
      "452:     int rc;",
      "453:     rpmFsmOp op = (FA_CREATE);",
      "454:     if (!owned)",
      "455:  op |= FAF_UNOWNED;",
      "458:     rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "460:     if (!rc)",
      "461:  rc = fsmMkdir(dirfd, dn, mode);",
      "463:     if (!rc) {",
      "464:  rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn, mode, op);",
      "465:     }",
      "468:     rpmpluginsCallFsmFilePost(plugins, NULL, dn, mode, op, rc);",
      "470:     if (!rc) {",
      "471:  rpmlog(RPMLOG_DEBUG,",
      "472:   \"%s directory created with perms %04o\\n\",",
      "473:   dn, (unsigned)(mode & 07777));",
      "474:     }",
      "476:     return rc;",
      "477: }",
      "479: static int ensureDir(rpmPlugins plugins, const char *p, int owned, int create)",
      "480: {",
      "481:     char *path = xstrdup(p);",
      "482:     char *dp = path;",
      "483:     char *sp = NULL, *bn;",
      "484:     int oflags = O_RDONLY;",
      "486:     int dirfd = fsmOpenat(-1, \"/\", oflags);",
      "489:     while ((bn = strtok_r(dp, \"/\", &sp)) != NULL) {",
      "490:  struct stat sb;",
      "491:  fd = fsmOpenat(dirfd, bn, oflags);",
      "493:  if (fd < 0 && errno == ENOENT && create) {",
      "494:      mode_t mode = S_IFDIR | (_dirPerms & 07777);",
      "495:      if (fsmDoMkDir(plugins, dirfd, bn, owned, mode) == 0) {",
      "496:   fd = fsmOpenat(dirfd, bn, oflags|O_NOFOLLOW);",
      "497:      }",
      "498:  }",
      "500:  if (fd >= 0 && fstat(fd, &sb) == 0 && !S_ISDIR(sb.st_mode)) {",
      "501:      close(fd);",
      "502:      errno = ENOTDIR;",
      "503:      fd = -1;",
      "504:  }",
      "506:  close(dirfd);",
      "507:  if (fd >= 0) {",
      "508:      dirfd = fd;",
      "509:  } else {",
      "510:      dirfd = -1;",
      "511:      rpmlog(RPMLOG_ERR, _(\"failed to open dir %s of %s: %s\\n\"),",
      "512:     bn, p, strerror(errno));",
      "513:      break;",
      "514:  }",
      "516:  dp = NULL;",
      "517:     }",
      "519:     free(path);",
      "520:     return dirfd;",
      "521: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:   rc = rpmpluginsCallFsmFilePre(plugins, NULL, dn, mode, op);",
      "509:   if (!rc)",
      "512:   if (!rc) {",
      "513:       rc = rpmpluginsCallFsmFilePrepare(plugins, NULL, dn, dn,",
      "",
      "[Removed Lines]",
      "510:       rc = fsmMkdir(dn, mode);",
      "",
      "[Added Lines]",
      "613:       rc = fsmMkdir(-1, dn, mode);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "874:     }",
      "875: }",
      "877: int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,",
      "878:               rpmpsm psm, char ** failedFile)",
      "879: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980: struct diriter_s {",
      "981:     int dirfd;",
      "982: };",
      "984: static int onChdir(rpmfi fi, void *data)",
      "985: {",
      "986:     struct diriter_s *di = data;",
      "988:     if (di->dirfd >= 0) {",
      "989:  close(di->dirfd);",
      "990:  di->dirfd = -1;",
      "991:     }",
      "992:     return 0;",
      "993: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "890:     char *tid = NULL;",
      "891:     struct filedata_s *fdata = xcalloc(fc, sizeof(*fdata));",
      "892:     struct filedata_s *firstlink = NULL;",
      "895:     rasprintf(&tid, \";%08x\", (unsigned)rpmtsGetTid(ts));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1011:     struct diriter_s di = { -1 };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "932:         rc = RPMERR_BAD_MAGIC;",
      "933:         goto exit;",
      "934:     }",
      "937:     if (!rc)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1054:     rpmfiSetOnChdir(fi, onChdir, &di);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "946:      if (!fp->suffix) {",
      "947:   rc = fsmBackup(fi, fp->action);",
      "948:      }",
      "950:      if (!fp->suffix) {",
      "951:   if (fp->action == FA_TOUCH) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:      if (di.dirfd == -1) {",
      "1071:   di.dirfd = ensureDir(plugins, rpmfiDN(fi), 0,",
      "1072:         (fp->action == FA_CREATE));",
      "1073:   if (di.dirfd == -1) {",
      "1074:       rc = RPMERR_OPEN_FAILED;",
      "1075:       break;",
      "1076:   }",
      "1077:      }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "980:                     mode_t mode = fp->sb.st_mode;",
      "981:                     mode &= ~07777;",
      "982:                     mode |=  00700;",
      "984:                 }",
      "985:             } else if (S_ISLNK(fp->sb.st_mode)) {",
      "986:   if (rc == RPMERR_ENOENT) {",
      "",
      "[Removed Lines]",
      "983:                     rc = fsmMkdir(fp->fpath, mode);",
      "",
      "[Added Lines]",
      "1113:                     rc = fsmMkdir(di.dirfd, fp->fpath, mode);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1022:  fp->stage = FILE_UNPACK;",
      "1023:     }",
      "1024:     fi = rpmfiFree(fi);",
      "1026:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
      "1027:  rc = fx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1155:     close(di.dirfd);",
      "1156:     di.dirfd = -1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
      "candidate_info": {
        "commit_hash": "25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/25a435e90844ea98fe5eb7bef22c1aecf3a9c033",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Set file metadata via fd-based ops for everything but symlinks\n\nRegular file ops are fd-based already, for the rest we need to open them\nmanually. Files with temporary suffix must never be followed, for\ndirectories (and pre-existing FA_TOUCHed files) use the rpm symlink\n\"root or target owner allowed\" rule wrt following.\n\nThis mostly fixes CVE-2021-35938, but as we're not yet using dirfd-based\noperatiosn for everything there are corner cases left undone. And then\nthere's the plugin API which needs updating for all this.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "990:                     rc = RPMERR_UNKNOWN_FILETYPE;",
          "991:             }",
          "993: setmeta:",
          "994:      if (!rc && fp->setmeta) {",
          "995:   rc = fsmSetmeta(fd, di.dirfd, fp->fpath,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993:      if (!rc && fd == -1 && !S_ISLNK(fp->sb.st_mode)) {",
          "995:   fd = fsmOpenat(di.dirfd, fp->fpath,",
          "996:     fp->suffix ? AT_SYMLINK_NOFOLLOW : 0);",
          "997:   if (fd < 0)",
          "998:       rc = RPMERR_OPEN_FAILED;",
          "999:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "693d828c035848585b500dfde6f4e58cfb8d4de4",
      "candidate_info": {
        "commit_hash": "693d828c035848585b500dfde6f4e58cfb8d4de4",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/693d828c035848585b500dfde6f4e58cfb8d4de4",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Return descriptor of created file from fsmMkfile()\n\nThis will be needed for using fd-based metadata operations.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: static int fsmMkfile(int dirfd, rpmfi fi, struct filedata_s *fp, rpmfiles files,",
          "174:        rpmpsm psm, int nodigest,",
          "176: {",
          "177:     int rc = 0;",
          "178:     int fd = -1;",
          "",
          "[Removed Lines]",
          "175:        struct filedata_s ** firstlink, int *firstlinkfile)",
          "",
          "[Added Lines]",
          "175:        struct filedata_s ** firstlink, int *firstlinkfile,",
          "176:        int *fdp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:  }",
          "206:     }",
          "211:     return rc;",
          "212: }",
          "",
          "[Removed Lines]",
          "208:     if (fd != *firstlinkfile)",
          "209:  fsmClose(&fd);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "867:      fp = firstlink;",
          "869:         if (!fp->skip) {",
          "871:      if (!fp->suffix && fp != firstlink) {",
          "872:   rc = fsmBackup(di.dirfd, fi, fp->action);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "869:      int fd = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "910:             if (S_ISREG(fp->sb.st_mode)) {",
          "911:   if (rc == RPMERR_ENOENT) {",
          "912:       rc = fsmMkfile(di.dirfd, fi, fp, files, psm, nodigest,",
          "914:   }",
          "915:             } else if (S_ISDIR(fp->sb.st_mode)) {",
          "916:                 if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "913:        &firstlink, &firstlinkfile);",
          "",
          "[Added Lines]",
          "913:        &firstlink, &firstlinkfile, &fd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "946:   rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "947:     &fp->sb, nofcaps);",
          "948:      }",
          "949:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950:      if (fd != firstlinkfile)",
          "951:   fsmClose(&fd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69fe9a008f7f2db7a3aae34aca9f7ef34596a0a0",
      "candidate_info": {
        "commit_hash": "69fe9a008f7f2db7a3aae34aca9f7ef34596a0a0",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/69fe9a008f7f2db7a3aae34aca9f7ef34596a0a0",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Move file-post plugin hook back to commit stage\n\nThis isn't ideal from the sense that some files may get a success post\ncall while something later can still fail, but things get even weirder\nwith doing it in a separate round where things could fail because of\na vanished directory and then we'd still need to call the plugin hook\nwith some result. Also, this lets us skip the backwards walk on the\nnormal case of success, which is nice.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "977:   fp->stage = FILE_COMMIT;",
          "978:      else",
          "990:      rpmpluginsCallFsmFilePost(plugins, fi, fp->fpath,",
          "991:           fp->sb.st_mode, fp->action, rc);",
          "992:  }",
          "997:  }",
          "998:     }",
          "",
          "[Removed Lines]",
          "980:  }",
          "981:     }",
          "982:     fi = rpmfiFree(fi);",
          "985:     fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "986:     while ((fx = rpmfiNext(fi)) >= 0) {",
          "987:  struct filedata_s *fp = &fdata[fx];",
          "989:  if (fp->stage) {",
          "995:  if (rc && fp->stage > FILE_NONE && !fp->skip) {",
          "996:      (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "",
          "[Added Lines]",
          "985:     }",
          "986:     fi = rpmfiFree(fi);",
          "989:     if (rc) {",
          "990:  fi = rpmfilesIter(files, RPMFI_ITER_BACK);",
          "991:  while ((fx = rpmfiNext(fi)) >= 0) {",
          "992:      struct filedata_s *fp = &fdata[fx];",
          "994:      if (fp->stage > FILE_NONE && !fp->skip) {",
          "995:   (void) fsmRemove(fp->fpath, fp->sb.st_mode);",
          "996:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b65ed55c3aef325192363951584dfb05c395b32e",
      "candidate_info": {
        "commit_hash": "b65ed55c3aef325192363951584dfb05c395b32e",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/b65ed55c3aef325192363951584dfb05c395b32e",
        "files": [
          "tests/data/SPECS/hlinktest.spec",
          "tests/rpmi.at"
        ],
        "message": "Add a test-case for cross-directory hardlinks",
        "before_after_code_files": [
          "tests/data/SPECS/hlinktest.spec||tests/data/SPECS/hlinktest.spec",
          "tests/rpmi.at||tests/rpmi.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/data/SPECS/hlinktest.spec||tests/data/SPECS/hlinktest.spec": [
          "File: tests/data/SPECS/hlinktest.spec -> tests/data/SPECS/hlinktest.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: %bcond_with unpackaged_dirs",
          "2: %bcond_with unpackaged_files",
          "3: %bcond_with owned_dir",
          "5: Summary:          Testing hard link behavior",
          "6: Name:             hlinktest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: %bcond_with crossdir_links",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     ln hello hello-${f}",
          "30: done",
          "32: %if %{with unpackaged_dirs}",
          "33: mkdir -p $RPM_BUILD_ROOT/zoo/",
          "34: %endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: %if %{with crossdir_links}",
          "34: mkdir -p $RPM_BUILD_ROOT/xmark",
          "35: ln $RPM_BUILD_ROOT/foo/aaaa $RPM_BUILD_ROOT/xmark/",
          "36: ln $RPM_BUILD_ROOT/foo/hello $RPM_BUILD_ROOT/xmark/",
          "37: %endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42: %if %{with owned_dir}",
          "43: %dir /foo",
          "44: %endif",
          "45: /foo/*",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: %if %{with crossdir_links}",
          "53: /xmark",
          "54: %endif",
          "",
          "---------------"
        ],
        "tests/rpmi.at||tests/rpmi.at": [
          "File: tests/rpmi.at -> tests/rpmi.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "1003: .........    /foo/zzzz",
          "1004: ],",
          "1005: [])",
          "1006: AT_CLEANUP",
          "1008: AT_SETUP([rpm -U filesystem])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007: AT_CHECK([",
          "1008: RPMDB_INIT",
          "1009: runroot rpmbuild -bb --quiet --with crossdir_links /data/SPECS/hlinktest.spec",
          "1010: runroot rpm -U /build/RPMS/noarch/hlinktest-1.0-1.noarch.rpm",
          "1011: runroot rpm -Vav --nouser --nogroup",
          "1012: ],",
          "1013: [0],",
          "1014: [.........    /foo/aaaa",
          "1015: .........    /foo/copyllo",
          "1016: .........    /foo/hello",
          "1017: .........    /foo/hello-bar",
          "1018: .........    /foo/hello-foo",
          "1019: .........    /foo/hello-world",
          "1020: .........    /foo/zzzz",
          "1021: .........    /xmark",
          "1022: .........    /xmark/aaaa",
          "1023: .........    /xmark/hello",
          "1024: ],",
          "1025: [])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da79e3c3ae7da8719f0bf87a1a60e046597b8240",
      "candidate_info": {
        "commit_hash": "da79e3c3ae7da8719f0bf87a1a60e046597b8240",
        "repo": "rpm-software-management/rpm",
        "commit_url": "https://github.com/rpm-software-management/rpm/commit/da79e3c3ae7da8719f0bf87a1a60e046597b8240",
        "files": [
          "lib/fsm.c"
        ],
        "message": "Move file metadata setting back to unpack stage\n\nCommit a82251b44ee2d2802ee8aea1b3d89f88beee4bad moved metadata setting\nto a separate step because there are potential benefits to doing so, but\nthe current downsides are worse: as long as we operate in potentially\nuntrusted directories, we'd need to somehow verify the content is what we\ninitially laid down to avoid possible privilege escalation from non-root\nowned directories.\n\nThis commit does not fix that vulnerability, only makes the window much\nsmaller and paves the way for the real fix(es) without introducing a\nsecond round of directory tree validation chase to the picture.",
        "before_after_code_files": [
          "lib/fsm.c||lib/fsm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rpm-software-management/rpm/pull/1919"
        ],
        "olp_code_files": {
          "patch": [
            "lib/fsm.c||lib/fsm.c"
          ],
          "candidate": [
            "lib/fsm.c||lib/fsm.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/fsm.c||lib/fsm.c": [
          "File: lib/fsm.c -> lib/fsm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:      if (fp->action == FA_TOUCH)",
          "885:             if (S_ISREG(fp->sb.st_mode)) {",
          "886:   if (rc == RPMERR_ENOENT) {",
          "",
          "[Removed Lines]",
          "883:   continue;",
          "",
          "[Added Lines]",
          "883:   goto setmeta;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "915:                 if (!IS_DEV_LOG(fp->fpath))",
          "916:                     rc = RPMERR_UNKNOWN_FILETYPE;",
          "917:             }",
          "918:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919: setmeta:",
          "920:      if (!rc && fp->setmeta) {",
          "921:   rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "922:     &fp->sb, nofcaps);",
          "923:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "931:     if (!rc && fx < 0 && fx != RPMERR_ITER_END)",
          "932:  rc = fx;",
          "949:     fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "950:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "",
          "[Removed Lines]",
          "935:     fi = rpmfilesIter(files, RPMFI_ITER_FWD);",
          "936:     while (!rc && (fx = rpmfiNext(fi)) >= 0) {",
          "937:  struct filedata_s *fp = &fdata[fx];",
          "938:  if (!fp->skip && fp->setmeta) {",
          "939:      rc = fsmSetmeta(fp->fpath, fi, plugins, fp->action,",
          "940:        &fp->sb, nofcaps);",
          "941:  }",
          "942:  if (rc)",
          "944:  fp->stage = FILE_PREP;",
          "945:     }",
          "946:     fi = rpmfiFree(fi);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}