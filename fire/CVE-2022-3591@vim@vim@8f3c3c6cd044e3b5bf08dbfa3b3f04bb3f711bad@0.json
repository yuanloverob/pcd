{
  "cve_id": "CVE-2022-3591",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.0789.",
  "repo": "vim/vim",
  "patch_hash": "8f3c3c6cd044e3b5bf08dbfa3b3f04bb3f711bad",
  "patch_info": {
    "commit_hash": "8f3c3c6cd044e3b5bf08dbfa3b3f04bb3f711bad",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/8f3c3c6cd044e3b5bf08dbfa3b3f04bb3f711bad",
    "files": [
      "src/buffer.c",
      "src/testdir/test_autocmd.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0789: dummy buffer ends up in a window\n\nProblem:    Dummy buffer ends up in a window.\nSolution:   Disallow navigating to a dummy buffer.",
    "before_after_code_files": [
      "src/buffer.c||src/buffer.c",
      "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/buffer.c||src/buffer.c": [
      "File: src/buffer.c -> src/buffer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1351:     if ((flags & DOBUF_NOPOPUP) && bt_popup(buf) && !bt_terminal(buf))",
      "1352:  return OK;",
      "1353: #endif",
      "1355: #ifdef FEAT_GUI",
      "1356:     need_mouse_correct = TRUE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1354:     if ((action == DOBUF_GOTO || action == DOBUF_SPLIT)",
      "1355:         && (buf->b_flags & BF_DUMMY))",
      "1356:     {",
      "1358:  semsg(_(e_buffer_nr_does_not_exist), count);",
      "1359:  return FAIL;",
      "1360:     }",
      "",
      "---------------"
    ],
    "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim": [
      "File: src/testdir/test_autocmd.vim -> src/testdir/test_autocmd.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "3857:   call assert_true(autocmd_delete([test_null_dict()]))",
      "3858: endfunc",
      "3860: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3860: func Test_autocmd_split_dummy()",
      "3861:   \" Autocommand trying to split a window containing a dummy buffer.",
      "3862:   auto BufReadPre * exe \"sbuf \" .. expand(\"<abuf>\")",
      "3863:   \" Avoid the \"W11\" prompt",
      "3864:   au FileChangedShell * let v:fcs_choice = 'reload'",
      "3865:   func Xautocmd_changelist()",
      "3866:     cal writefile(['Xtestfile2:4:4'], 'Xerr')",
      "3867:     edit Xerr",
      "3868:     lex 'Xtestfile2:4:4'",
      "3869:   endfunc",
      "3870:   call Xautocmd_changelist()",
      "3871:   call assert_fails('call Xautocmd_changelist()', 'E86:')",
      "3873:   au! BufReadPre",
      "3874:   au! FileChangedShell",
      "3875:   delfunc Xautocmd_changelist",
      "3876:   bwipe! Xerr",
      "3877:   call delete('Xerr')",
      "3878: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "696: static int included_patches[] =",
      "699:     788,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "699:     789,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "53c5c9f50ca68d3ed559eebb2c5f7d23f39a768c",
      "candidate_info": {
        "commit_hash": "53c5c9f50ca68d3ed559eebb2c5f7d23f39a768c",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/53c5c9f50ca68d3ed559eebb2c5f7d23f39a768c",
        "files": [
          "src/testdir/test_autocmd.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0790: test for dummy buffer does not always produce the E86 error\n\nProblem:    Test for dummy buffer does not always produce the E86 error.\nSolution:   Do not check if the error is produced.",
        "before_after_code_files": [
          "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim": [
          "File: src/testdir/test_autocmd.vim -> src/testdir/test_autocmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "3868:     lex 'Xtestfile2:4:4'",
          "3869:   endfunc",
          "3870:   call Xautocmd_changelist()",
          "3873:   au! BufReadPre",
          "3874:   au! FileChangedShell",
          "",
          "[Removed Lines]",
          "3871:   call assert_fails('call Xautocmd_changelist()', 'E86:')",
          "",
          "[Added Lines]",
          "3871:   \" Should get E86, but it doesn't always happen (timing?)",
          "3872:   silent! call Xautocmd_changelist()",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static int included_patches[] =",
          "699:     789,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:     790,",
          "",
          "---------------"
        ]
      }
    }
  ]
}