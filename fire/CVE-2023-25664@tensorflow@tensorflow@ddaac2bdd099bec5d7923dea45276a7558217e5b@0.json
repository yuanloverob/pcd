{
  "cve_id": "CVE-2023-25664",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad. A fix is included in TensorFlow 2.12.0 and 2.11.1.\n",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ddaac2bdd099bec5d7923dea45276a7558217e5b",
  "patch_info": {
    "commit_hash": "ddaac2bdd099bec5d7923dea45276a7558217e5b",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ddaac2bdd099bec5d7923dea45276a7558217e5b",
    "files": [
      "tensorflow/core/kernels/avgpooling_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
    ],
    "message": "Add inputs check for AvgPoolGrad\n\nPiperOrigin-RevId: 488975844",
    "before_after_code_files": [
      "tensorflow/core/kernels/avgpooling_op.cc||tensorflow/core/kernels/avgpooling_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/avgpooling_op.cc||tensorflow/core/kernels/avgpooling_op.cc": [
      "File: tensorflow/core/kernels/avgpooling_op.cc -> tensorflow/core/kernels/avgpooling_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "342:     const T* out_backprop_ptr = out_backprop.flat<T>().data();",
      "343:     T* input_backprop_ptr = output->flat<T>().data();",
      "345:     auto shard = [context, out_backprop_ptr, input_backprop_ptr,",
      "346:                   out_backprop_rows, out_backprop_cols, out_backprop_depth,",
      "347:                   in_rows, in_cols, window_rows, window_cols, row_stride,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "345:     for (int64_t r = 0; r < out_backprop_rows; ++r) {",
      "346:       int rindex, rsize;",
      "347:       OP_REQUIRES_OK(context,",
      "348:                      GetBroadcastSize(r, in_rows, window_rows, row_stride,",
      "349:                                       pad_rows, &rindex, &rsize));",
      "350:       for (int64_t c = 0; c < out_backprop_cols; ++c) {",
      "351:         int cindex, csize;",
      "352:         OP_REQUIRES_OK(context,",
      "353:                        GetBroadcastSize(c, in_cols, window_cols, col_stride,",
      "354:                                         pad_cols, &cindex, &csize));",
      "355:       }",
      "356:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2510:             data_format=\"NHWC\")",
      "2511:         self.evaluate(t)",
      "2514: def GetMaxPoolFwdTest(input_size, filter_size, strides, padding):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2513:   def testAvgPoolGradInvalidStrideRaiseErrorProperly(self):",
      "2514:     with self.assertRaises(errors_impl.InvalidArgumentError):",
      "2515:       with self.cached_session():",
      "2516:         orig_input_shape = [11, 9, 78, 9]",
      "2517:         grad = constant_op.constant(",
      "2518:             0.1, shape=[16, 16, 16, 16], dtype=dtypes.float64)",
      "2519:         t = gen_nn_ops.AvgPoolGrad(",
      "2520:             orig_input_shape=orig_input_shape,",
      "2521:             grad=grad,",
      "2522:             ksize=[1, 40, 128, 1],",
      "2523:             strides=[1, 128, 128, 30],",
      "2524:             padding=\"SAME\",",
      "2525:             data_format=\"NHWC\")",
      "2526:         self.evaluate(t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87bf986bb958da468a4365ed9a1f7bec4696fe37",
      "candidate_info": {
        "commit_hash": "87bf986bb958da468a4365ed9a1f7bec4696fe37",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/87bf986bb958da468a4365ed9a1f7bec4696fe37",
        "files": [
          "tensorflow/core/kernels/avgpooling_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
        ],
        "message": "Add inputs check for AvgPoolGrad\n\nPiperOrigin-RevId: 488975844",
        "before_after_code_files": [
          "tensorflow/core/kernels/avgpooling_op.cc||tensorflow/core/kernels/avgpooling_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/avgpooling_op.cc||tensorflow/core/kernels/avgpooling_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/avgpooling_op.cc||tensorflow/core/kernels/avgpooling_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/avgpooling_op.cc||tensorflow/core/kernels/avgpooling_op.cc": [
          "File: tensorflow/core/kernels/avgpooling_op.cc -> tensorflow/core/kernels/avgpooling_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:     const T* out_backprop_ptr = out_backprop.flat<T>().data();",
          "343:     T* input_backprop_ptr = output->flat<T>().data();",
          "345:     auto shard = [context, out_backprop_ptr, input_backprop_ptr,",
          "346:                   out_backprop_rows, out_backprop_cols, out_backprop_depth,",
          "347:                   in_rows, in_cols, window_rows, window_cols, row_stride,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:     for (int64_t r = 0; r < out_backprop_rows; ++r) {",
          "346:       int rindex, rsize;",
          "347:       OP_REQUIRES_OK(context,",
          "348:                      GetBroadcastSize(r, in_rows, window_rows, row_stride,",
          "349:                                       pad_rows, &rindex, &rsize));",
          "350:       for (int64_t c = 0; c < out_backprop_cols; ++c) {",
          "351:         int cindex, csize;",
          "352:         OP_REQUIRES_OK(context,",
          "353:                        GetBroadcastSize(c, in_cols, window_cols, col_stride,",
          "354:                                         pad_cols, &cindex, &csize));",
          "355:       }",
          "356:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py||tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py -> tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2510:             data_format=\"NHWC\")",
          "2511:         self.evaluate(t)",
          "2514: def GetMaxPoolFwdTest(input_size, filter_size, strides, padding):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2513:   def testAvgPoolGradInvalidStrideRaiseErrorProperly(self):",
          "2514:     with self.assertRaises(errors_impl.InvalidArgumentError):",
          "2515:       with self.cached_session():",
          "2516:         orig_input_shape = [11, 9, 78, 9]",
          "2517:         grad = constant_op.constant(",
          "2518:             0.1, shape=[16, 16, 16, 16], dtype=dtypes.float64)",
          "2519:         t = gen_nn_ops.AvgPoolGrad(",
          "2520:             orig_input_shape=orig_input_shape,",
          "2521:             grad=grad,",
          "2522:             ksize=[1, 40, 128, 1],",
          "2523:             strides=[1, 128, 128, 30],",
          "2524:             padding=\"SAME\",",
          "2525:             data_format=\"NHWC\")",
          "2526:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}