{
  "cve_id": "CVE-2024-29195",
  "cve_desc": "The azure-c-shared-utility is a C library for AMQP/MQTT communication to Azure Cloud Services. This library may be used by the Azure IoT C SDK for communication between IoT Hub and IoT Hub devices. An attacker can cause an integer wraparound or under-allocation or heap buffer overflow due to vulnerabilities in parameter checking mechanism, by exploiting the buffer length parameter in Azure C SDK, which may lead to remote code execution. Requirements for RCE are 1. Compromised Azure account allowing malformed payloads to be sent to the device via IoT Hub service, 2. By passing IoT hub service max message payload limit of 128KB, and 3. Ability to overwrite code space with remote code. Fixed in commit https://github.com/Azure/azure-c-shared-utility/commit/1129147c38ac02ad974c4c701a1e01b2141b9fe2.",
  "repo": "Azure/azure-c-shared-utility",
  "patch_hash": "1129147c38ac02ad974c4c701a1e01b2141b9fe2",
  "patch_info": {
    "commit_hash": "1129147c38ac02ad974c4c701a1e01b2141b9fe2",
    "repo": "Azure/azure-c-shared-utility",
    "commit_url": "https://github.com/Azure/azure-c-shared-utility/commit/1129147c38ac02ad974c4c701a1e01b2141b9fe2",
    "files": [
      "adapters/httpapi_compact.c",
      "adapters/httpapi_curl.c",
      "adapters/httpapi_tirtos.c",
      "adapters/httpapi_winhttp.c",
      "adapters/socketio_berkeley.c",
      "adapters/socketio_win32.c",
      "adapters/string_utils.c",
      "adapters/tlsio_mbedtls.c",
      "adapters/tlsio_openssl.c",
      "adapters/tlsio_schannel.c",
      "adapters/tlsio_wolfssl.c",
      "adapters/x509_schannel.c",
      "inc/azure_c_shared_utility/xlogging.h",
      "src/buffer.c",
      "src/constbuffer.c"
    ],
    "message": "Add malloc size checks (#652)\n\n* Add malloc size checks\n\n* Update adapters/socketio_berkeley.c\n\nCo-authored-by: Valerie Avva Lim <54871851+vaavva@users.noreply.github.com>\n\n* Update adapters/string_utils.c\n\nCo-authored-by: Valerie Avva Lim <54871851+vaavva@users.noreply.github.com>\n\n* PR review\n\n---------\n\nCo-authored-by: Valerie Avva Lim <54871851+vaavva@users.noreply.github.com>",
    "before_after_code_files": [
      "adapters/httpapi_compact.c||adapters/httpapi_compact.c",
      "adapters/httpapi_curl.c||adapters/httpapi_curl.c",
      "adapters/httpapi_tirtos.c||adapters/httpapi_tirtos.c",
      "adapters/httpapi_winhttp.c||adapters/httpapi_winhttp.c",
      "adapters/socketio_berkeley.c||adapters/socketio_berkeley.c",
      "adapters/socketio_win32.c||adapters/socketio_win32.c",
      "adapters/string_utils.c||adapters/string_utils.c",
      "adapters/tlsio_mbedtls.c||adapters/tlsio_mbedtls.c",
      "adapters/tlsio_openssl.c||adapters/tlsio_openssl.c",
      "adapters/tlsio_schannel.c||adapters/tlsio_schannel.c",
      "adapters/tlsio_wolfssl.c||adapters/tlsio_wolfssl.c",
      "adapters/x509_schannel.c||adapters/x509_schannel.c",
      "inc/azure_c_shared_utility/xlogging.h||inc/azure_c_shared_utility/xlogging.h",
      "src/buffer.c||src/buffer.c",
      "src/constbuffer.c||src/constbuffer.c"
    ]
  },
  "patch_diff": {
    "adapters/httpapi_compact.c||adapters/httpapi_compact.c": [
      "File: adapters/httpapi_compact.c -> adapters/httpapi_compact.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"azure_c_shared_utility/threadapi.h\"",
      "19: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "20: #include \"azure_c_shared_utility/http_proxy_io.h\"",
      "22: #ifdef _MSC_VER",
      "23: #define snprintf _snprintf",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "431:         else",
      "432:         {",
      "435:             if (new_received_bytes == NULL)",
      "436:             {",
      "437:                 http_instance->is_io_error = 1;",
      "",
      "[Removed Lines]",
      "434:             new_received_bytes = (unsigned char*)realloc(http_instance->received_bytes, http_instance->received_bytes_count + size);",
      "",
      "[Added Lines]",
      "435:             size_t malloc_size = http_instance->received_bytes_count + size;",
      "436:             if (malloc_size < size)",
      "437:             {",
      "439:                 new_received_bytes = NULL;",
      "440:                 LogError(\"Invalid size parameter\");",
      "441:             }",
      "442:             else",
      "443:             {",
      "444:                 new_received_bytes = (unsigned char*)realloc(http_instance->received_bytes, malloc_size);",
      "445:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1301:         result = HTTPAPI_OK;",
      "1302:         http_instance->certificate = (char*)value;",
      "1303: #else",
      "1306:         if (http_instance->certificate)",
      "1307:         {",
      "1308:             free(http_instance->certificate);",
      "1309:         }",
      "1313:         if (http_instance->certificate == NULL)",
      "1314:         {",
      "",
      "[Removed Lines]",
      "1304:         int len;",
      "1311:         len = (int)strlen((char*)value);",
      "1312:         http_instance->certificate = (char*)malloc((len + 1) * sizeof(char));",
      "",
      "[Added Lines]",
      "1322:         size_t len = strlen((char*)value);",
      "1323:         size_t malloc_size = safe_add_size_t(len, 1);",
      "1324:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "1325:         if (malloc_size == SIZE_MAX)",
      "1326:         {",
      "1327:             LogError(\"Invalid malloc size\");",
      "1328:             http_instance->certificate = NULL;",
      "1329:         }",
      "1330:         else",
      "1331:         {",
      "1332:             http_instance->certificate = (char*)malloc(malloc_size);",
      "1333:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1326:     }",
      "1327:     else if (strcmp(SU_OPTION_X509_CERT, optionName) == 0 || strcmp(OPTION_X509_ECC_CERT, optionName) == 0)",
      "1328:     {",
      "1330:         if (http_instance->x509ClientCertificate)",
      "1331:         {",
      "1332:             free(http_instance->x509ClientCertificate);",
      "1333:         }",
      "1337:         if (http_instance->x509ClientCertificate == NULL)",
      "1338:         {",
      "",
      "[Removed Lines]",
      "1329:         int len;",
      "1335:         len = (int)strlen((char*)value);",
      "1336:         http_instance->x509ClientCertificate = (char*)malloc((len + 1) * sizeof(char));",
      "",
      "[Added Lines]",
      "1356:         size_t len = strlen((char*)value);",
      "1357:         size_t malloc_size = safe_add_size_t(len, 1);",
      "1358:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "1359:         if (malloc_size == SIZE_MAX)",
      "1360:         {",
      "1361:             LogError(\"Invalid malloc size\");",
      "1362:             http_instance->x509ClientCertificate = NULL;",
      "1363:         }",
      "1364:         else",
      "1365:         {",
      "1366:             http_instance->x509ClientCertificate = (char*)malloc(malloc_size);",
      "1367:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1349:     }",
      "1350:     else if (strcmp(SU_OPTION_X509_PRIVATE_KEY, optionName) == 0 || strcmp(OPTION_X509_ECC_KEY, optionName) == 0)",
      "1351:     {",
      "1353:         if (http_instance->x509ClientPrivateKey)",
      "1354:         {",
      "1355:             free(http_instance->x509ClientPrivateKey);",
      "1356:         }",
      "1360:         if (http_instance->x509ClientPrivateKey == NULL)",
      "1361:         {",
      "",
      "[Removed Lines]",
      "1352:         int len;",
      "1358:         len = (int)strlen((char*)value);",
      "1359:         http_instance->x509ClientPrivateKey = (char*)malloc((len + 1) * sizeof(char));",
      "",
      "[Added Lines]",
      "1389:         size_t len = strlen((char*)value);",
      "1390:         size_t malloc_size = safe_add_size_t(len, 1);",
      "1391:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "1392:         if (malloc_size == SIZE_MAX)",
      "1393:         {",
      "1394:             LogError(\"Invalid malloc size\");",
      "1395:             http_instance->x509ClientPrivateKey = NULL;",
      "1396:         }",
      "1397:         else",
      "1398:         {",
      "1399:             http_instance->x509ClientPrivateKey = (char*)malloc(malloc_size);",
      "1400:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1482:         result = HTTPAPI_OK;",
      "1483: #else",
      "1484:         certLen = strlen((const char*)value);",
      "1486:         if (tempCert == NULL)",
      "1487:         {",
      "",
      "[Removed Lines]",
      "1485:         tempCert = (char*)malloc((certLen + 1) * sizeof(char));",
      "",
      "[Added Lines]",
      "1527:         size_t malloc_size = safe_add_size_t(certLen, 1);",
      "1528:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "1529:         if (malloc_size == SIZE_MAX)",
      "1530:         {",
      "1531:             tempCert = NULL;",
      "1532:         }",
      "1533:         else",
      "1534:         {",
      "1535:             tempCert = (char*)malloc(malloc_size);",
      "1536:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1500:     else if (strcmp(SU_OPTION_X509_CERT, optionName) == 0 || strcmp(OPTION_X509_ECC_CERT, optionName) == 0)",
      "1501:     {",
      "1502:         certLen = strlen((const char*)value);",
      "1504:         if (tempCert == NULL)",
      "1505:         {",
      "",
      "[Removed Lines]",
      "1503:         tempCert = (char*)malloc((certLen + 1) * sizeof(char));",
      "",
      "[Added Lines]",
      "1555:         size_t malloc_size = safe_add_size_t(certLen, 1);",
      "1556:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "1557:         if (malloc_size == SIZE_MAX)",
      "1558:         {",
      "1559:             LogError(\"Invalid malloc size\");",
      "1560:             tempCert = NULL;",
      "1561:         }",
      "1562:         else",
      "1563:         {",
      "1564:             tempCert = (char*)malloc(malloc_size);",
      "1565:         }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1517:     else if (strcmp(SU_OPTION_X509_PRIVATE_KEY, optionName) == 0 || strcmp(OPTION_X509_ECC_KEY, optionName) == 0)",
      "1518:     {",
      "1519:         certLen = strlen((const char*)value);",
      "1521:         if (tempCert == NULL)",
      "1522:         {",
      "",
      "[Removed Lines]",
      "1520:         tempCert = (char*)malloc((certLen + 1) * sizeof(char));",
      "",
      "[Added Lines]",
      "1583:         size_t malloc_size = safe_add_size_t(certLen, 1);",
      "1584:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "1585:         if (malloc_size == SIZE_MAX)",
      "1586:         {",
      "1587:             LogError(\"Invalid malloc size\");",
      "1588:             tempCert = NULL;",
      "1589:         }",
      "1590:         else",
      "1591:         {",
      "1592:             tempCert = (char*)malloc(malloc_size);",
      "1593:         }",
      "",
      "---------------"
    ],
    "adapters/httpapi_curl.c||adapters/httpapi_curl.c": [
      "File: adapters/httpapi_curl.c -> adapters/httpapi_curl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"mbedtls/ssl.h\"",
      "28: #endif",
      "29: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "31: #define TEMP_BUFFER_SIZE 1024",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:         httpHandleData = (HTTP_HANDLE_DATA*)malloc(sizeof(HTTP_HANDLE_DATA));",
      "119:         if (httpHandleData != NULL)",
      "120:         {",
      "124:             if (httpHandleData->hostURL == NULL)",
      "125:             {",
      "",
      "[Removed Lines]",
      "121:             size_t hostURL_size = strlen(\"https://\") + strlen(hostName) + 1;",
      "122:             httpHandleData->hostURL = malloc(hostURL_size);",
      "",
      "[Added Lines]",
      "122:             size_t hostURL_size = safe_add_size_t(strlen(\"https://\"), strlen(hostName));",
      "123:             hostURL_size = safe_add_size_t(hostURL_size, 1);",
      "125:             if (hostURL_size == SIZE_MAX)",
      "126:             {",
      "127:                 LogError(\"invalid malloc size\");",
      "128:                 httpHandleData->hostURL = NULL;",
      "129:             }",
      "130:             else",
      "131:             {",
      "132:                 httpHandleData->hostURL = malloc(hostURL_size);",
      "133:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "282:         (ptr != NULL) &&",
      "283:         (size * nmemb > 0))",
      "284:     {",
      "286:         if (newBuffer != NULL)",
      "287:         {",
      "288:             responseContentBuffer->buffer = newBuffer;",
      "",
      "[Removed Lines]",
      "285:         void* newBuffer = realloc(responseContentBuffer->buffer, responseContentBuffer->bufferSize + (size * nmemb));",
      "",
      "[Added Lines]",
      "296:         size_t malloc_size = safe_multiply_size_t(size, nmemb);",
      "297:         malloc_size = safe_add_size_t(malloc_size, responseContentBuffer->bufferSize);",
      "299:         void* newBuffer;",
      "300:         if (malloc_size == SIZE_MAX)",
      "301:         {",
      "302:             LogError(\"Invalid buffer size\");",
      "303:             newBuffer = NULL;",
      "304:         }",
      "305:         else",
      "306:         {",
      "307:             newBuffer = realloc(responseContentBuffer->buffer, malloc_size);",
      "308:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:         }",
      "292:         else",
      "293:         {",
      "295:             responseContentBuffer->error = 1;",
      "296:             if (responseContentBuffer->buffer != NULL)",
      "297:             {",
      "",
      "[Removed Lines]",
      "294:             LogError(\"Could not allocate buffer of size %lu\", (unsigned long)(responseContentBuffer->bufferSize + (size * nmemb)));",
      "",
      "[Added Lines]",
      "318:             LogError(\"Could not allocate buffer of size %lu\", (unsigned long)(malloc_size));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "452:     else",
      "453:     {",
      "454:         char* tempHostURL;",
      "457:         if (tempHostURL == NULL)",
      "458:         {",
      "459:             result = HTTPAPI_ERROR;",
      "",
      "[Removed Lines]",
      "455:         size_t tempHostURL_size = strlen(httpHandleData->hostURL) + strlen(relativePath) + 1;",
      "456:         tempHostURL = malloc(tempHostURL_size);",
      "",
      "[Added Lines]",
      "479:         size_t tempHostURL_size = safe_add_size_t(strlen(httpHandleData->hostURL), strlen(relativePath));",
      "480:         tempHostURL_size = safe_add_size_t(tempHostURL_size, 1);",
      "481:         if (tempHostURL_size == SIZE_MAX)",
      "482:         {",
      "483:             LogError(\"Invalid malloc size\");",
      "484:             tempHostURL = NULL;",
      "485:         }",
      "486:         else",
      "487:         {",
      "488:             tempHostURL = malloc(tempHostURL_size);",
      "489:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "963:                 {",
      "964:                     if (proxy_data->username != NULL && proxy_data->password != NULL)",
      "965:                     {",
      "968:                         if (proxy_auth == NULL)",
      "969:                         {",
      "970:                             LogError(\"failure allocating proxy authentication\");",
      "",
      "[Removed Lines]",
      "966:                         size_t authLen = strlen(proxy_data->username)+strlen(proxy_data->password)+1;",
      "967:                         proxy_auth = malloc(authLen+1);",
      "",
      "[Added Lines]",
      "1000:                         size_t authLen = safe_add_size_t(strlen(proxy_data->username), strlen(proxy_data->password));",
      "1001:                         authLen = safe_add_size_t(authLen, 2);",
      "1002:                         if (authLen == SIZE_MAX)",
      "1003:                         {",
      "1004:                             LogError(\"Invalid malloc size\");",
      "1005:                             proxy_auth = NULL;",
      "1006:                         }",
      "1007:                         else",
      "1008:                         {",
      "1009:                             proxy_auth = malloc(authLen);",
      "1010:                         }",
      "",
      "---------------"
    ],
    "adapters/httpapi_tirtos.c||adapters/httpapi_tirtos.c": [
      "File: adapters/httpapi_tirtos.c -> adapters/httpapi_tirtos.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #include \"azure_c_shared_utility/httpapi.h\"",
      "11: #include \"azure_c_shared_utility/strings.h\"",
      "12: #include \"azure_c_shared_utility/xlogging.h\"",
      "14: #define CONTENT_BUF_LEN     128",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "198:         }",
      "200:         if (cnt < offset + ret) {",
      "202:             if (hname == NULL) {",
      "203:                 LogError(\"Failed reallocating memory\");",
      "204:                 ret = HTTPAPI_ALLOC_FAILED;",
      "",
      "[Removed Lines]",
      "201:             hname = (char *)realloc(hname, offset + ret);",
      "",
      "[Added Lines]",
      "202:             size_t malloc_size = safe_add_size_t(offset, ret);",
      "203:             if (malloc_size == SIZE_MAX)",
      "204:             {",
      "205:                 LogError(\"invalid realloc size\");",
      "206:                 hname = NULL;",
      "207:             }",
      "208:             else",
      "209:             {",
      "210:                 hname = (char*)realloc(hname, malloc_size);",
      "211:             }",
      "",
      "---------------"
    ],
    "adapters/httpapi_winhttp.c||adapters/httpapi_winhttp.c": [
      "File: adapters/httpapi_winhttp.c -> adapters/httpapi_winhttp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: #include \"azure_c_shared_utility/strings.h\"",
      "17: #include \"azure_c_shared_utility/x509_schannel.h\"",
      "18: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "20: MU_DEFINE_ENUM_STRINGS(HTTPAPI_RESULT, HTTPAPI_RESULT_VALUES)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52: static char* ConcatHttpHeaders(HTTP_HEADERS_HANDLE httpHeadersHandle, size_t toAlloc, size_t headersCount)",
      "53: {",
      "55:     size_t i;",
      "57:     if (result == NULL)",
      "58:     {",
      "",
      "[Removed Lines]",
      "54:     char *result = (char*)malloc(toAlloc * sizeof(char) + 1);",
      "",
      "[Added Lines]",
      "56:     char* result;",
      "58:     size_t malloc_size = safe_multiply_size_t(toAlloc, sizeof(char));",
      "59:     malloc_size = safe_add_size_t(malloc_size, 1);",
      "60:     if (malloc_size == SIZE_MAX)",
      "61:     {",
      "62:         LogError(\"Invalid malloc size\");",
      "63:         result = NULL;",
      "64:     }",
      "65:     else",
      "66:     {",
      "67:         result = (char*)malloc(malloc_size);",
      "68:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "132:         {",
      "133:             char *httpHeadersA;",
      "134:             size_t requiredCharactersForHeaders;",
      "136:             if ((httpHeadersA = ConcatHttpHeaders(httpHeadersHandle, toAlloc, headersCount)) == NULL)",
      "137:             {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:             size_t malloc_size;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "143:                 result = HTTPAPI_STRING_PROCESSING_ERROR;",
      "144:                 LogError(\"MultiByteToWideChar failed, GetLastError=0x%08x (result = %\" PRI_MU_ENUM \")\", GetLastError(), MU_ENUM_VALUE(HTTPAPI_RESULT, result));",
      "145:             }",
      "147:             {",
      "148:                 result = HTTPAPI_ALLOC_FAILED;",
      "149:                 LogError(\"Cannot allocate memory (result = %\" PRI_MU_ENUM \")\", MU_ENUM_VALUE(HTTPAPI_RESULT, result));",
      "",
      "[Removed Lines]",
      "146:             else if ((*httpHeaders = (wchar_t*)malloc((requiredCharactersForHeaders + 1) * sizeof(wchar_t))) == NULL)",
      "",
      "[Added Lines]",
      "160:             else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(requiredCharactersForHeaders, 1), sizeof(wchar_t))) == SIZE_MAX ||",
      "161:                 (*httpHeaders = (wchar_t*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "332:             }",
      "333:             else",
      "334:             {",
      "336:                 if (hostNameTemp == NULL)",
      "337:                 {",
      "338:                     LogError(\"malloc failed\");",
      "",
      "[Removed Lines]",
      "335:                 hostNameTemp = (wchar_t*)malloc(sizeof(wchar_t) * hostNameTemp_size);",
      "",
      "[Added Lines]",
      "350:                 size_t malloc_size = safe_multiply_size_t(sizeof(wchar_t), hostNameTemp_size);",
      "351:                 if (malloc_size == SIZE_MAX)",
      "352:                 {",
      "353:                     LogError(\"Invalid malloc size\");",
      "354:                     hostNameTemp = NULL;",
      "355:                 }",
      "356:                 else",
      "357:                 {",
      "358:                     hostNameTemp = (wchar_t*)malloc(malloc_size);",
      "359:                 }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "454:     const wchar_t* requestTypeString;",
      "455:     size_t requiredCharactersForRelativePath;",
      "456:     wchar_t* relativePathTemp = NULL;",
      "458:     if ((requestTypeString = GetHttpRequestString(requestType)) == NULL)",
      "459:     {",
      "460:         result = HTTPAPI_INVALID_ARG;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:     size_t malloc_size;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "465:         result = HTTPAPI_STRING_PROCESSING_ERROR;",
      "466:         LogError(\"MultiByteToWideChar failed, GetLastError=0x%08x\", GetLastError());",
      "467:     }",
      "469:     {",
      "470:         result = HTTPAPI_ALLOC_FAILED;",
      "471:         LogError(\"malloc failed (result = %\" PRI_MU_ENUM \")\", MU_ENUM_VALUE(HTTPAPI_RESULT, result));",
      "",
      "[Removed Lines]",
      "468:     else if ((relativePathTemp = (wchar_t*)malloc((requiredCharactersForRelativePath + 1) * sizeof(wchar_t))) == NULL)",
      "",
      "[Added Lines]",
      "494:     else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(requiredCharactersForRelativePath, 1), sizeof(wchar_t))) == SIZE_MAX)",
      "495:     {",
      "496:         LogError(\"malloc invalid size\");",
      "497:         result = HTTPAPI_ALLOC_FAILED;",
      "498:     }",
      "499:     else if ((relativePathTemp = (wchar_t*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "780:         &responseHeadersTempLength,",
      "781:         WINHTTP_NO_HEADER_INDEX);",
      "784:     {",
      "785:         result = HTTPAPI_ALLOC_FAILED;",
      "786:         LogError(\"malloc failed: (result = %\" PRI_MU_ENUM \")\", MU_ENUM_VALUE(HTTPAPI_RESULT, result));",
      "",
      "[Removed Lines]",
      "783:     if ((responseHeadersTemp = (wchar_t*)malloc((size_t)responseHeadersTempLength + 2)) == NULL)",
      "",
      "[Added Lines]",
      "814:     size_t malloc_size = safe_add_size_t((size_t)responseHeadersTempLength, 2);",
      "815:     if (malloc_size == SIZE_MAX)",
      "816:     {",
      "817:         LogError(\"Invalid malloc size\");",
      "818:         responseHeadersTemp = NULL;",
      "819:     }",
      "820:     else",
      "821:     {",
      "822:         responseHeadersTemp = (wchar_t*)malloc(malloc_size);",
      "823:     }",
      "825:     if (responseHeadersTemp == NULL)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "816:                 LogError(\"WideCharToMultiByte failed\");",
      "817:                 break;",
      "818:             }",
      "820:             {",
      "821:                 result = HTTPAPI_ALLOC_FAILED;",
      "822:                 LogError(\"malloc failed\");",
      "",
      "[Removed Lines]",
      "819:             else if ((tokenTemp = (char*)malloc(sizeof(char) * tokenTemp_size)) == NULL)",
      "",
      "[Added Lines]",
      "861:             else if ((malloc_size = safe_multiply_size_t(sizeof(char), tokenTemp_size)) == SIZE_MAX)",
      "862:             {",
      "863:                 result = HTTPAPI_ALLOC_FAILED;",
      "864:                 LogError(\"invalid malloc size\");",
      "865:                 break;",
      "866:             }",
      "867:             else if ((tokenTemp = (char*)malloc(malloc_size)) == NULL)",
      "",
      "---------------"
    ],
    "adapters/socketio_berkeley.c||adapters/socketio_berkeley.c": [
      "File: adapters/socketio_berkeley.c -> adapters/socketio_berkeley.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "47: #include \"azure_c_shared_utility/xlogging.h\"",
      "48: #include \"azure_c_shared_utility/const_defines.h\"",
      "49: #include \"azure_c_shared_utility/dns_resolver.h\"",
      "50: #include <sys/ioctl.h>",
      "51: #include <netinet/in.h>",
      "52: #include <arpa/inet.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "126:             }",
      "127:             else",
      "128:             {",
      "130:                 {",
      "131:                     LogError(\"Failed cloning option %s (malloc failed)\", name);",
      "132:                 }",
      "",
      "[Removed Lines]",
      "129:                 if ((result = malloc(sizeof(char) * (strlen((char*)value) + 1))) == NULL)",
      "",
      "[Added Lines]",
      "130:                 size_t malloc_size = safe_add_size_t(strlen((char*)value), 1);",
      "131:                 malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "132:                 if (malloc_size == SIZE_MAX)",
      "133:                 {",
      "134:                     LogError(\"Invalid malloc size\");",
      "135:                 }",
      "136:                 else if ((result = malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "313: static NETWORK_INTERFACE_DESCRIPTION* create_network_interface_description(struct ifreq *ifr, NETWORK_INTERFACE_DESCRIPTION* previous_nid)",
      "314: {",
      "315:     NETWORK_INTERFACE_DESCRIPTION* result;",
      "317:     if ((result = (NETWORK_INTERFACE_DESCRIPTION*)malloc(sizeof(NETWORK_INTERFACE_DESCRIPTION))) == NULL)",
      "318:     {",
      "319:         LogError(\"Failed allocating NETWORK_INTERFACE_DESCRIPTION\");",
      "320:     }",
      "322:     {",
      "323:         LogError(\"failed setting interface description name (malloc failed)\");",
      "324:         destroy_network_interface_descriptions(result);",
      "",
      "[Removed Lines]",
      "321:     else if ((result->name = (char*)malloc(sizeof(char) * (strlen(ifr->ifr_name) + 1))) == NULL)",
      "",
      "[Added Lines]",
      "323:     size_t malloc_size;",
      "329:     else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(strlen(ifr->ifr_name), 1), sizeof(char))) == SIZE_MAX)",
      "330:     {",
      "331:         LogError(\"invalid malloc size\");",
      "332:         destroy_network_interface_descriptions(result);",
      "333:         result = NULL;",
      "334:     }",
      "335:     else if ((result->name = (char*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "331:         char* ip_address;",
      "332:         unsigned char* mac = (unsigned char*)ifr->ifr_hwaddr.sa_data;",
      "335:         {",
      "337:             destroy_network_interface_descriptions(result);",
      "338:             result = NULL;",
      "339:         }",
      "",
      "[Removed Lines]",
      "334:         if ((result->mac_address = (char*)malloc(sizeof(char) * MAC_ADDRESS_STRING_LENGTH)) == NULL)",
      "336:             LogError(\"failed formatting mac address (malloc failed)\");",
      "",
      "[Added Lines]",
      "347:         size_t malloc_size = safe_multiply_size_t(sizeof(char), MAC_ADDRESS_STRING_LENGTH);",
      "349:         if (malloc_size == SIZE_MAX ||",
      "350:                 (result->mac_address = (char*)malloc(malloc_size)) == NULL)",
      "352:             LogError(\"failed formatting mac address (malloc failed) size:%zu\", malloc_size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "349:             destroy_network_interface_descriptions(result);",
      "350:             result = NULL;",
      "351:         }",
      "353:         {",
      "354:             LogError(\"failed setting the ip address (malloc failed)\");",
      "355:             destroy_network_interface_descriptions(result);",
      "",
      "[Removed Lines]",
      "352:         else if ((result->ip_address = (char*)malloc(sizeof(char) * (strlen(ip_address) + 1))) == NULL)",
      "",
      "[Added Lines]",
      "368:         else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(strlen(ip_address), 1), sizeof(char))) == SIZE_MAX)",
      "369:         {",
      "370:             LogError(\"invalid malloc size\");",
      "371:             destroy_network_interface_descriptions(result);",
      "372:             result = NULL;",
      "373:         }",
      "374:         else if ((result->ip_address = (char*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "742:             {",
      "743:                 if (socket_io_config->hostname != NULL)",
      "744:                 {",
      "747:                     {",
      "749:                     }",
      "751:                     result->socket = INVALID_SOCKET;",
      "",
      "[Removed Lines]",
      "745:                     result->hostname = (char*)malloc(strlen(socket_io_config->hostname) + 1);",
      "746:                     if (result->hostname != NULL)",
      "748:                         (void)strcpy(result->hostname, socket_io_config->hostname);",
      "",
      "[Added Lines]",
      "767:                     size_t malloc_size = safe_add_size_t(strlen(socket_io_config->hostname), 1);",
      "768:                     if (malloc_size == SIZE_MAX)",
      "770:                         LogError(\"invalid malloc size\");",
      "771:                         result->hostname = NULL;",
      "772:                     }",
      "773:                     else",
      "774:                     {",
      "775:                         result->hostname = (char*)malloc(malloc_size);",
      "776:                         if (result->hostname != NULL)",
      "777:                         {",
      "778:                             (void)strcpy(result->hostname, socket_io_config->hostname);",
      "779:                         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1205:             LogError(\"option not supported.\");",
      "1206:             result = MU_FAILURE;",
      "1207: #else",
      "1208:             if (strlen(value) == 0)",
      "1209:             {",
      "1210:                 LogError(\"option value must be a valid mac address\");",
      "1211:                 result = MU_FAILURE;",
      "1212:             }",
      "1214:             {",
      "1215:                 LogError(\"failed setting net_interface_mac_address option (malloc failed)\");",
      "1216:                 result = MU_FAILURE;",
      "",
      "[Removed Lines]",
      "1213:             else if ((socket_io_instance->target_mac_address = (char*)malloc(sizeof(char) * (strlen(value) + 1))) == NULL)",
      "",
      "[Added Lines]",
      "1239:             size_t malloc_size;",
      "1245:             else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(strlen(value), 1), sizeof(char))) == SIZE_MAX)",
      "1246:             {",
      "1247:                 LogError(\"invalid malloc size\");",
      "1248:                 result = MU_FAILURE;",
      "1249:                 socket_io_instance->target_mac_address = NULL;",
      "1250:             }",
      "1251:             else if ((socket_io_instance->target_mac_address = (char*)malloc(malloc_size)) == NULL)",
      "",
      "---------------"
    ],
    "adapters/socketio_win32.c||adapters/socketio_win32.c": [
      "File: adapters/socketio_win32.c -> adapters/socketio_win32.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "19: #include \"azure_c_shared_utility/xlogging.h\"",
      "20: #include \"azure_c_shared_utility/dns_resolver.h\"",
      "22: typedef enum IO_STATE_TAG",
      "23: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "336:             {",
      "337:                 if (socket_io_config->hostname != NULL)",
      "338:                 {",
      "341:                     {",
      "343:                     }",
      "345:                     result->socket = INVALID_SOCKET;",
      "",
      "[Removed Lines]",
      "339:                     result->hostname = (char*)malloc(strlen(socket_io_config->hostname) + 1);",
      "340:                     if (result->hostname != NULL)",
      "342:                         (void)strcpy(result->hostname, socket_io_config->hostname);",
      "",
      "[Added Lines]",
      "340:                     size_t malloc_size = safe_add_size_t(strlen(socket_io_config->hostname), 1);",
      "341:                     if (malloc_size == SIZE_MAX)",
      "343:                         LogError(\"Invalid malloc size\");",
      "344:                         result->hostname = NULL;",
      "345:                     }",
      "346:                     else",
      "347:                     {",
      "348:                         result->hostname = (char*)malloc(malloc_size);",
      "349:                         if (result->hostname != NULL)",
      "350:                         {",
      "351:                             (void)strcpy(result->hostname, socket_io_config->hostname);",
      "352:                         }",
      "",
      "---------------"
    ],
    "adapters/string_utils.c||adapters/string_utils.c": [
      "File: adapters/string_utils.c -> adapters/string_utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: #include \"azure_macro_utils/macro_utils.h\"",
      "11: #include \"azure_c_shared_utility/gballoc.h\"",
      "12: #include \"azure_c_shared_utility/xlogging.h\"",
      "14: #include \"azure_c_shared_utility/string_utils.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:     }",
      "25:     else",
      "26:     {",
      "29:         {",
      "30:             LogError(\"failure in malloc\");",
      "",
      "[Removed Lines]",
      "27:         result = (char*)malloc(((unsigned long long)neededSize + 1) * sizeof(char));",
      "28:         if (result == NULL)",
      "",
      "[Added Lines]",
      "28:         size_t malloc_size = safe_add_size_t((unsigned long long)neededSize, 1);",
      "29:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "30:         if (malloc_size == SIZE_MAX)",
      "31:         {",
      "32:             LogError(\"invalid malloc size\");",
      "33:             result = NULL;",
      "35:         }",
      "36:         else if ((result = (char*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54:     }",
      "55:     else",
      "56:     {",
      "59:         {",
      "60:             LogError(\"failure in malloc\");",
      "",
      "[Removed Lines]",
      "57:         result = (wchar_t*)malloc(((unsigned long long)neededSize + 1)*sizeof(wchar_t));",
      "58:         if (result == NULL)",
      "",
      "[Added Lines]",
      "65:         size_t malloc_size = safe_add_size_t((unsigned long long)neededSize, 1);",
      "66:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(wchar_t));",
      "67:         if (malloc_size == SIZE_MAX)",
      "68:         {",
      "69:             LogError(\"invalid malloc size\");",
      "70:             result = NULL;",
      "72:         }",
      "73:         else if ((result = (wchar_t*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "169:         }",
      "170:         else",
      "171:         {",
      "174:             {",
      "175:                 LogError(\"failure in malloc\");",
      "",
      "[Removed Lines]",
      "172:             result = (wchar_t*)malloc(sizeof(wchar_t)*(nwc+1));",
      "173:             if (result == NULL)",
      "",
      "[Added Lines]",
      "187:             size_t malloc_size = safe_add_size_t(nwc, 1);",
      "188:             malloc_size = safe_multiply_size_t(malloc_size, sizeof(wchar_t));",
      "189:             if (malloc_size == SIZE_MAX)",
      "190:             {",
      "191:                 LogError(\"invalid malloc size\");",
      "192:                 result = NULL;",
      "194:             }",
      "195:             else if ((result = (wchar_t*)malloc(malloc_size)) == NULL)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "216:         }",
      "217:         else",
      "218:         {",
      "221:             {",
      "222:                 LogError(\"failure in malloc\");",
      "",
      "[Removed Lines]",
      "219:             result = (char*)malloc(sizeof(char)*(nc + 1));",
      "220:             if (result == NULL)",
      "",
      "[Added Lines]",
      "241:             size_t malloc_size = safe_add_size_t(nc, 1);",
      "242:             malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
      "243:             if (malloc_size == SIZE_MAX)",
      "244:             {",
      "245:                 LogError(\"invalid malloc size\");",
      "246:                 result = NULL;",
      "248:             }",
      "249:             else if ((result = (char*)malloc(malloc_size)) == NULL)",
      "",
      "---------------"
    ],
    "adapters/tlsio_mbedtls.c||adapters/tlsio_mbedtls.c": [
      "File: adapters/tlsio_mbedtls.c -> adapters/tlsio_mbedtls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #include \"azure_c_shared_utility/crt_abstractions.h\"",
      "25: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "26: #include \"azure_c_shared_utility/threadapi.h\"",
      "28: static const char *const OPTION_UNDERLYING_IO_OPTIONS = \"underlying_io_options\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "206: {",
      "207:     if (context != NULL)",
      "208:     {",
      "209:         TLS_IO_INSTANCE *tls_io_instance = (TLS_IO_INSTANCE *)context;",
      "214:         {",
      "215:             tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;",
      "216:             indicate_error(tls_io_instance);",
      "217:         }",
      "",
      "[Removed Lines]",
      "211:         unsigned char *new_socket_io_read_bytes = (unsigned char *)realloc(tls_io_instance->socket_io_read_bytes, tls_io_instance->socket_io_read_byte_count + size);",
      "213:         if (new_socket_io_read_bytes == NULL)",
      "",
      "[Added Lines]",
      "210:         unsigned char* new_socket_io_read_bytes;",
      "213:         size_t realloc_size = safe_add_size_t(tls_io_instance->socket_io_read_byte_count, size);",
      "214:         if (realloc_size == SIZE_MAX)",
      "215:         {",
      "216:             LogError(\"Invalid realloc size\");",
      "217:             tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;",
      "218:             indicate_error(tls_io_instance);",
      "219:         }",
      "220:         else if ((new_socket_io_read_bytes = (unsigned char*)realloc(tls_io_instance->socket_io_read_bytes, realloc_size)) == NULL)",
      "222:             LogError(\"realloc failed\");",
      "",
      "---------------"
    ],
    "adapters/tlsio_openssl.c||adapters/tlsio_openssl.c": [
      "File: adapters/tlsio_openssl.c -> adapters/tlsio_openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "22: #include \"azure_c_shared_utility/gballoc.h\"",
      "23: #include \"azure_c_shared_utility/const_defines.h\"",
      "25: typedef enum TLSIO_STATE_TAG",
      "26: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "607:     }",
      "608:     else",
      "609:     {",
      "612:         {",
      "614:             result = MU_FAILURE;",
      "615:         }",
      "616:         else",
      "",
      "[Removed Lines]",
      "610:         openssl_locks = malloc(CRYPTO_num_locks() * sizeof(LOCK_HANDLE));",
      "611:         if (openssl_locks == NULL)",
      "613:             LogError(\"Failed to allocate locks\");",
      "",
      "[Added Lines]",
      "611:         size_t malloc_size = safe_multiply_size_t(CRYPTO_num_locks(), sizeof(LOCK_HANDLE));",
      "612:         if (malloc_size == SIZE_MAX ||",
      "613:             (openssl_locks = malloc(malloc_size)) == NULL)",
      "615:             LogError(\"Failed to allocate locks, size:%zu\", malloc_size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1656:             len = strlen(cert);",
      "1659:             {",
      "1660:                 result = MU_FAILURE;",
      "1661:             }",
      "1662:             else",
      "",
      "[Removed Lines]",
      "1657:             tls_io_instance->certificate = malloc(len + 1);",
      "1658:             if (tls_io_instance->certificate == NULL)",
      "",
      "[Added Lines]",
      "1659:             size_t malloc_size = safe_add_size_t(len, 1);",
      "1660:             if (malloc_size == SIZE_MAX ||",
      "1661:                 (tls_io_instance->certificate = malloc(malloc_size)) == NULL)",
      "1663:                 LogError(\"malloc failure, size:%zu\", malloc_size);",
      "",
      "---------------"
    ],
    "adapters/tlsio_schannel.c||adapters/tlsio_schannel.c": [
      "File: adapters/tlsio_schannel.c -> adapters/tlsio_schannel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"azure_c_shared_utility/singlylinkedlist.h\"",
      "22: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "23: #include \"azure_c_shared_utility/gballoc.h\"",
      "25: #define TLSIO_STATE_VALUES                        \\",
      "26:     TLSIO_STATE_NOT_OPEN,                         \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "515:             }",
      "516:             else",
      "517:             {",
      "518:                 SecBuffer security_buffers[4];",
      "519:                 SecBufferDesc security_buffers_desc;",
      "523:                 {",
      "525:                     result = MU_FAILURE;",
      "526:                 }",
      "527:                 else",
      "",
      "[Removed Lines]",
      "520:                 size_t needed_buffer = sizes.cbHeader + size + sizes.cbTrailer;",
      "521:                 unsigned char* out_buffer = (unsigned char*)malloc(needed_buffer);",
      "522:                 if (out_buffer == NULL)",
      "524:                     LogError(\"malloc failed\");",
      "",
      "[Added Lines]",
      "519:                 unsigned char* out_buffer;",
      "522:                 size_t needed_buffer = safe_add_size_t(sizes.cbHeader, size);",
      "523:                 needed_buffer = safe_add_size_t(needed_buffer, sizes.cbTrailer);",
      "524:                 if (needed_buffer == SIZE_MAX ||",
      "525:                     (out_buffer = (unsigned char*)malloc(needed_buffer)) == NULL)",
      "527:                     LogError(\"malloc failed, size:%zu\", needed_buffer);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1089:         {",
      "1090:             (void)memset(result, 0, sizeof(TLS_IO_INSTANCE));",
      "1094:             {",
      "1096:                 free(result);",
      "1097:                 result = NULL;",
      "1098:             }",
      "",
      "[Removed Lines]",
      "1092:             result->host_name = (SEC_TCHAR*)malloc(sizeof(SEC_TCHAR) * (1 + strlen(tls_io_config->hostname)));",
      "1093:             if (result->host_name == NULL)",
      "1095:                 LogError(\"malloc failed\");",
      "",
      "[Added Lines]",
      "1095:             size_t malloc_size = safe_add_size_t(strlen(tls_io_config->hostname), 1);",
      "1096:             malloc_size = safe_multiply_size_t(malloc_size, sizeof(SEC_TCHAR));",
      "1097:             if (malloc_size == SIZE_MAX ||",
      "1098:                 (result->host_name = (SEC_TCHAR*)malloc(malloc_size)) == NULL)",
      "1100:                 LogError(\"malloc failed, size:%zu\", malloc_size);",
      "",
      "---------------"
    ],
    "adapters/tlsio_wolfssl.c||adapters/tlsio_wolfssl.c": [
      "File: adapters/tlsio_wolfssl.c -> adapters/tlsio_wolfssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"azure_c_shared_utility/optimize_size.h\"",
      "19: #include \"azure_c_shared_utility/xlogging.h\"",
      "20: #include \"azure_c_shared_utility/shared_util_options.h\"",
      "22: typedef enum TLSIO_STATE_ENUM_TAG",
      "23: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303:     if (context != NULL)",
      "304:     {",
      "305:         TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)context;",
      "309:         {",
      "311:             tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;",
      "312:             indicate_error(tls_io_instance);",
      "313:         }",
      "",
      "[Removed Lines]",
      "307:         unsigned char* new_socket_io_read_bytes = (unsigned char*)realloc(tls_io_instance->socket_io_read_bytes, tls_io_instance->socket_io_read_byte_count + size);",
      "308:         if (new_socket_io_read_bytes == NULL)",
      "310:             LogError(\"Failed allocating memory for received bytes\");",
      "",
      "[Added Lines]",
      "307:         unsigned char* new_socket_io_read_bytes;",
      "309:         size_t realloc_size = safe_add_size_t(tls_io_instance->socket_io_read_byte_count, size);",
      "310:         if (realloc_size == SIZE_MAX ||",
      "311:             (new_socket_io_read_bytes = (unsigned char*)realloc(tls_io_instance->socket_io_read_bytes, realloc_size)) == NULL)",
      "313:             LogError(\"Failed allocating memory for received bytes, size:%zu\", realloc_size);",
      "",
      "---------------"
    ],
    "adapters/x509_schannel.c||adapters/x509_schannel.c": [
      "File: adapters/x509_schannel.c -> adapters/x509_schannel.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: #include \"azure_c_shared_utility/gballoc.h\"",
      "7: #include \"azure_c_shared_utility/x509_schannel.h\"",
      "8: #include \"azure_c_shared_utility/xlogging.h\"",
      "9: #if _MSC_VER > 1500",
      "10: #include <ncrypt.h>",
      "11: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: #include \"azure_c_shared_utility/safe_math.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153: {",
      "154:     int result;",
      "155: #if _MSC_VER > 1500",
      "156:     SECURITY_STATUS status;",
      "157:     CRYPT_BIT_BLOB* pPubKeyBlob = &x509_handle->x509certificate_context->pCertInfo->SubjectPublicKeyInfo.PublicKey;",
      "158:     CRYPT_ECC_PRIVATE_KEY_INFO* pPrivKeyInfo = (CRYPT_ECC_PRIVATE_KEY_INFO*)x509privatekeyBlob;",
      "159:     DWORD pubSize = pPubKeyBlob->cbData - 1;",
      "160:     DWORD privSize = pPrivKeyInfo->PrivateKey.cbData;",
      "162:     BYTE* pubKeyBuf = pPubKeyBlob->pbData + 1;",
      "163:     BYTE* privKeyBuf = pPrivKeyInfo->PrivateKey.pbData;",
      "166:     {",
      "169:         result = MU_FAILURE;",
      "170:     }",
      "171:     else",
      "",
      "[Removed Lines]",
      "161:     DWORD keyBlobSize = sizeof(BCRYPT_ECCKEY_BLOB) + pubSize + privSize;",
      "164:     BCRYPT_ECCKEY_BLOB* pKeyBlob = (BCRYPT_ECCKEY_BLOB*)malloc(keyBlobSize);",
      "165:     if (pKeyBlob == NULL)",
      "168:         LogError(\"Failed to malloc NCrypt private key blob\");",
      "",
      "[Added Lines]",
      "158:     BCRYPT_ECCKEY_BLOB* pKeyBlob;",
      "164:     size_t keyBlobSize = safe_add_size_t(safe_add_size_t(sizeof(BCRYPT_ECCKEY_BLOB), pubSize), privSize);",
      "168:     if (keyBlobSize == SIZE_MAX ||",
      "169:         (pKeyBlob = (BCRYPT_ECCKEY_BLOB*)malloc(keyBlobSize)) == NULL)",
      "172:         LogError(\"Failed to malloc NCrypt private key blob, size:%zu\", keyBlobSize);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "204:             if (status == ERROR_SUCCESS)",
      "205:             {",
      "206:                 status2 = NCryptFreeObject(x509_handle->x509hcryptkey);",
      "",
      "[Removed Lines]",
      "203:             status = NCryptImportKey(x509_handle->hProv, 0, BCRYPT_ECCPRIVATE_BLOB, &ncBufDesc, &x509_handle->x509hcryptkey, (BYTE*)pKeyBlob, keyBlobSize, NCRYPT_OVERWRITE_KEY_FLAG);",
      "",
      "[Added Lines]",
      "207:             status = NCryptImportKey(x509_handle->hProv, 0, BCRYPT_ECCPRIVATE_BLOB, &ncBufDesc, &x509_handle->x509hcryptkey, (BYTE*)pKeyBlob, (DWORD)keyBlobSize, NCRYPT_OVERWRITE_KEY_FLAG);",
      "",
      "---------------"
    ],
    "inc/azure_c_shared_utility/xlogging.h||inc/azure_c_shared_utility/xlogging.h": [
      "File: inc/azure_c_shared_utility/xlogging.h -> inc/azure_c_shared_utility/xlogging.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:             }                                                                                                                                                           \\",
      "137:             else                                                                                                                                                        \\",
      "138:             {                                                                                                                                                           \\",
      "139:                 size_t formatSize = strlen(format);                                                                                                                     \\",
      "142:                 {                                                                                                                                                       \\",
      "143:                     l(log_category, __FILE__, FUNC_NAME, __LINE__, log_options, format, __VA_ARGS__);                                                                   \\",
      "144:                 }                                                                                                                                                       \\",
      "",
      "[Removed Lines]",
      "140:                 char* formatWithStack = (char*)logging_malloc(formatSize + sizeof(\"STACK_PRINT_FORMAT\"));                                                               \\",
      "141:                 if (formatWithStack == NULL)                                                                                                                            \\",
      "",
      "[Added Lines]",
      "139:                 char* formatWithStack;                                                                                                                                  \\",
      "141:                 size_t mallocSize = formatSize + sizeof(\"STACK_PRINT_FORMAT\");                                                                                          \\",
      "142:                 if (mallocSize < formatSize ||   /* int overflow check */                                                                                               \\",
      "143:                     (formatWithStack = (char*)logging_malloc(mallocSize)) == NULL)                                                                                      \\",
      "",
      "---------------"
    ],
    "src/buffer.c||src/buffer.c": [
      "File: src/buffer.c -> src/buffer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "228:         else",
      "229:         {",
      "233:             {",
      "236:                 result = MU_FAILURE;",
      "237:             }",
      "238:             else",
      "",
      "[Removed Lines]",
      "231:             unsigned char* temp = (unsigned char*)realloc(handle->buffer, handle->size + size);",
      "232:             if (temp == NULL)",
      "235:                 LogError(\"Failure reallocating temporary buffer\");",
      "",
      "[Added Lines]",
      "231:             unsigned char* temp;",
      "232:             size_t malloc_size = safe_add_size_t(handle->size, size);",
      "233:             if (malloc_size == SIZE_MAX ||",
      "234:                 (temp = (unsigned char*)realloc(handle->buffer, malloc_size)) == NULL)",
      "237:                 LogError(\"Failure reallocating temporary buffer, size:%zu\", malloc_size);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "357:     }",
      "358:     else",
      "359:     {",
      "360:         BUFFER* b = (BUFFER*)handle;",
      "363:         {",
      "366:             result = MU_FAILURE;",
      "367:         }",
      "368:         else",
      "",
      "[Removed Lines]",
      "361:         unsigned char* temp = (unsigned char*)realloc(b->buffer, b->size + enlargeSize);",
      "362:         if (temp == NULL)",
      "365:             LogError(\"Failure: allocating temp buffer.\");",
      "",
      "[Added Lines]",
      "362:         unsigned char* temp;",
      "364:         size_t malloc_size = safe_add_size_t(b->size, enlargeSize);",
      "365:         if (malloc_size == SIZE_MAX ||",
      "366:             (temp = (unsigned char*)realloc(b->buffer, malloc_size)) == NULL)",
      "369:             LogError(\"Failure: allocating temp buffer, size:%zu\", malloc_size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "494:             else",
      "495:             {",
      "499:                 {",
      "501:                     LogError(\"Failure: allocating temp buffer.\");",
      "",
      "[Removed Lines]",
      "497:                 unsigned char* temp = (unsigned char*)realloc(b1->buffer, b1->size + b2->size);",
      "498:                 if (temp == NULL)",
      "",
      "[Added Lines]",
      "501:                 unsigned char* temp;",
      "502:                 size_t malloc_size = safe_add_size_t(b1->size, b2->size);",
      "503:                 if (malloc_size == SIZE_MAX ||",
      "504:                     (temp = (unsigned char*)realloc(b1->buffer, malloc_size)) == NULL)",
      "",
      "---------------"
    ],
    "src/constbuffer.c||src/constbuffer.c": [
      "File: src/constbuffer.c -> src/constbuffer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     CONSTBUFFER_HANDLE result;",
      "37:     if (result == NULL)",
      "38:     {",
      "",
      "[Removed Lines]",
      "36:     result = (CONSTBUFFER_HANDLE)calloc(1, (sizeof(CONSTBUFFER_HANDLE_DATA) + size));",
      "",
      "[Added Lines]",
      "36:     size_t malloc_size = sizeof(CONSTBUFFER_HANDLE_DATA) + size;",
      "37:     if (malloc_size < size)",
      "38:     {",
      "39:         result = NULL;",
      "40:         LogError(\"invalid size parameter\");",
      "42:     }",
      "43:     else",
      "44:     {",
      "45:         result = (CONSTBUFFER_HANDLE)calloc(1, malloc_size);",
      "46:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41cbc882c99ffdf86b1d726e53f1896f0877cbd2",
      "candidate_info": {
        "commit_hash": "41cbc882c99ffdf86b1d726e53f1896f0877cbd2",
        "repo": "Azure/azure-c-shared-utility",
        "commit_url": "https://github.com/Azure/azure-c-shared-utility/commit/41cbc882c99ffdf86b1d726e53f1896f0877cbd2",
        "files": [
          "adapters/string_utils.c"
        ],
        "message": "vsprintf_char tracing (#656)\n\n* vsprintf_char tracing",
        "before_after_code_files": [
          "adapters/string_utils.c||adapters/string_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "adapters/string_utils.c||adapters/string_utils.c"
          ],
          "candidate": [
            "adapters/string_utils.c||adapters/string_utils.c"
          ]
        }
      },
      "candidate_diff": {
        "adapters/string_utils.c||adapters/string_utils.c": [
          "File: adapters/string_utils.c -> adapters/string_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     int neededSize = vsnprintf(NULL, 0, format, va);",
          "21:     if (neededSize < 0)",
          "22:     {",
          "24:         result = NULL;",
          "25:     }",
          "26:     else",
          "27:     {",
          "30:         if (malloc_size == SIZE_MAX)",
          "31:         {",
          "33:             result = NULL;",
          "35:         }",
          "",
          "[Removed Lines]",
          "23:         LogError(\"failure in vsnprintf\");",
          "28:         size_t malloc_size = safe_add_size_t((unsigned long long)neededSize, 1);",
          "29:         malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));",
          "32:             LogError(\"invalid malloc size\");",
          "",
          "[Added Lines]",
          "23:         LogError(\"failure in vsnprintf, neededSize=%d\", neededSize);",
          "28:         size_t len = safe_add_size_t((unsigned long long)neededSize, 1);",
          "29:         size_t malloc_size = safe_multiply_size_t(len, sizeof(char));",
          "32:             LogError(\"invalid malloc size, size:%zu\", malloc_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:         }",
          "41:         else",
          "42:         {",
          "44:             {",
          "46:                 free(result);",
          "47:                 result = NULL;",
          "48:             }",
          "",
          "[Removed Lines]",
          "43:             if (vsnprintf(result, (unsigned long long)neededSize + 1, format, va) != neededSize)",
          "45:                 LogError(\"inconsistent vsnprintf behavior\");",
          "",
          "[Added Lines]",
          "43:             int out_len = vsnprintf(result, len, format, va);",
          "44:             if (out_len != neededSize)",
          "46:                 LogError(\"inconsistent vsnprintf behavior, len=%zu, out_len=%d\", len, out_len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}