{
  "cve_id": "CVE-2024-24814",
  "cve_desc": "mod_auth_openidc is an OpenID Certified\u2122 authentication and authorization module for the Apache 2.x HTTP server that implements the OpenID Connect Relying Party functionality. In affected versions missing input validation on mod_auth_openidc_session_chunks cookie value makes the server vulnerable to a denial of service (DoS) attack. An internal security audit has been conducted and the reviewers found that if they manipulated the value of the mod_auth_openidc_session_chunks cookie to a very large integer, like 99999999, the server struggles with the request for a long time and finally gets back with a 500 error. Making a few requests of this kind caused our server to become unresponsive. Attackers can craft requests that would make the server work very hard (and possibly become unresponsive) and/or crash with minimal effort. This issue has been addressed in version 2.4.15.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "OpenIDC/mod_auth_openidc",
  "patch_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
  "patch_info": {
    "commit_hash": "4022c12f314bd89d127d1be008b1a80a08e1203d",
    "repo": "OpenIDC/mod_auth_openidc",
    "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/4022c12f314bd89d127d1be008b1a80a08e1203d",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/util.c"
    ],
    "message": "release 2.4.15.2: fix DoS CVE-2024-24814\n\nfix CVE-2024-24814: DoS when `OIDCSessionType client-cookie` is set and\na crafted Cookie header is supplied\nhttps://github.com/OpenIDC/mod_auth_openidc/security/advisories/GHSA-hxr6-w4gc-7vvv\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/util.c||src/util.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2dev],[hans.zandbelt@openidc.com])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.15.2],[hans.zandbelt@openidc.com])",
      "",
      "---------------"
    ],
    "src/util.c||src/util.c": [
      "File: src/util.c -> src/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1561: char *oidc_util_get_chunked_cookie(request_rec *r, const char *cookieName, int chunkSize) {",
      "1578:   }",
      "1579:  }",
      "1580:  return cookieValue;",
      "1581: }",
      "",
      "[Removed Lines]",
      "1562:  char *cookieValue = NULL;",
      "1563:  char *chunkValue = NULL;",
      "1564:  int i = 0;",
      "1565:  if (chunkSize == 0) {",
      "1566:   cookieValue = oidc_util_get_cookie(r, cookieName);",
      "1567:  } else {",
      "1568:   int chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1569:   if (chunkCount > 0) {",
      "1570:    cookieValue = \"\";",
      "1571:    for (i = 0; i < chunkCount; i++) {",
      "1572:     chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1573:     if (chunkValue != NULL)",
      "1574:      cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue, chunkValue);",
      "1575:    }",
      "1576:   } else {",
      "1577:    cookieValue = oidc_util_get_cookie(r, cookieName);",
      "",
      "[Added Lines]",
      "1562:  char *cookieValue = NULL, *chunkValue = NULL;",
      "1563:  int chunkCount = 0, i = 0;",
      "1564:  if (chunkSize == 0)",
      "1565:   return oidc_util_get_cookie(r, cookieName);",
      "1566:  chunkCount = oidc_util_get_chunked_count(r, cookieName);",
      "1567:  if (chunkCount == 0)",
      "1568:   return oidc_util_get_cookie(r, cookieName);",
      "1569:  if ((chunkCount < 0) || (chunkCount > 99)) {",
      "1570:   oidc_warn(r, \"chunk count out of bounds: %d\", chunkCount);",
      "1571:   return NULL;",
      "1572:  }",
      "1573:  for (i = 0; i < chunkCount; i++) {",
      "1574:   chunkValue = oidc_util_get_cookie(r, oidc_util_get_chunk_cookie_name(r, cookieName, i));",
      "1575:   if (chunkValue == NULL) {",
      "1576:    oidc_warn(r, \"could not find chunk %d; aborting\", i);",
      "1577:    break;",
      "1579:   cookieValue = apr_psprintf(r->pool, \"%s%s\", cookieValue ? cookieValue : \"\", chunkValue);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d70666ac394d9029cc000aea7d1ce2364c7eb098",
      "candidate_info": {
        "commit_hash": "d70666ac394d9029cc000aea7d1ce2364c7eb098",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/d70666ac394d9029cc000aea7d1ce2364c7eb098",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/jose.c"
        ],
        "message": "refactor zlib compression routines and add error checks\n\nbump to 2.4.15.4dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/jose.c||src/jose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.3],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.4dev],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/jose.c||src/jose.c": [
          "File: src/jose.c -> src/jose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "821: static apr_byte_t oidc_jose_zlib_compress(apr_pool_t *pool, const char *input, int input_len, char **output,",
          "822:        int *output_len, oidc_jose_error_t *err) {",
          "823:  z_stream zlib;",
          "824:  zlib.zalloc = Z_NULL;",
          "825:  zlib.zfree = Z_NULL;",
          "826:  zlib.opaque = Z_NULL;",
          "827:  zlib.next_in = (Bytef *)input;",
          "828:  zlib.avail_in = input_len;",
          "830:  zlib.next_out = (Bytef *)(*output);",
          "831:  zlib.avail_out = input_len * 2;",
          "839:   return FALSE;",
          "840:  }",
          "844:   return FALSE;",
          "845:  }",
          "",
          "[Removed Lines]",
          "832:  int deflate_status = Z_OK;",
          "834:  deflateInit(&zlib, Z_BEST_COMPRESSION);",
          "836:  deflate_status = deflate(&zlib, Z_FINISH);",
          "837:  if (deflate_status != Z_STREAM_END) {",
          "838:   oidc_jose_error(err, \"deflate failed: %d\", deflate_status);",
          "842:  if (deflateEnd(&zlib) != Z_OK) {",
          "843:   oidc_jose_error(err, \"deflateEnd failed\");",
          "",
          "[Added Lines]",
          "823:  int status = Z_OK;",
          "836:  status = deflateInit(&zlib, Z_BEST_COMPRESSION);",
          "837:  if (status != Z_OK) {",
          "838:   oidc_jose_error(err, \"deflateInit() failed: %d\", status);",
          "839:   return FALSE;",
          "840:  }",
          "842:  status = deflate(&zlib, Z_FINISH);",
          "843:  if (status != Z_STREAM_END) {",
          "844:   oidc_jose_error(err, \"deflate() failed: %d\", status);",
          "848:  status = deflateEnd(&zlib);",
          "849:  if (status != Z_OK) {",
          "850:   oidc_jose_error(err, \"deflateEnd() failed: %d\", status);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "854: static apr_byte_t oidc_jose_zlib_uncompress(apr_pool_t *pool, const char *input, int input_len, char **output,",
          "855:          int *output_len, oidc_jose_error_t *err) {",
          "856:  z_stream zlib;",
          "857:  zlib.zalloc = Z_NULL;",
          "858:  zlib.zfree = Z_NULL;",
          "859:  zlib.opaque = Z_NULL;",
          "860:  zlib.avail_in = (uInt)input_len;",
          "861:  zlib.next_in = (Bytef *)input;",
          "862:  zlib.total_out = 0;",
          "870:   if (zlib.total_out >= OIDC_CJOSE_UNCOMPRESS_CHUNK) {",
          "875:   }",
          "883:    inflateEnd(&zlib);",
          "884:    return FALSE;",
          "885:   }",
          "886:  }",
          "890:   return FALSE;",
          "891:  }",
          "896:  return TRUE;",
          "897: }",
          "",
          "[Removed Lines]",
          "863:  size_t uncompLength = OIDC_CJOSE_UNCOMPRESS_CHUNK;",
          "864:  char *uncomp = (char *)apr_pcalloc(pool, uncompLength + 1);",
          "866:  inflateInit(&zlib);",
          "867:  int done = 1;",
          "868:  while (done) {",
          "869:   int inflate_status;",
          "871:    char *uncomp2 = (char *)apr_pcalloc(pool, uncompLength + OIDC_CJOSE_UNCOMPRESS_CHUNK);",
          "872:    _oidc_memcpy(uncomp2, uncomp, uncompLength);",
          "873:    uncompLength += OIDC_CJOSE_UNCOMPRESS_CHUNK;",
          "874:    uncomp = uncomp2;",
          "876:   zlib.next_out = (Bytef *)(uncomp + zlib.total_out);",
          "877:   zlib.avail_out = (uInt)uncompLength - zlib.total_out;",
          "878:   inflate_status = inflate(&zlib, Z_SYNC_FLUSH);",
          "879:   if (inflate_status == Z_STREAM_END) {",
          "880:    done = 0;",
          "881:   } else if (inflate_status != Z_OK) {",
          "882:    oidc_jose_error(err, \"inflate failed: %d\", inflate_status);",
          "888:  if (inflateEnd(&zlib) != Z_OK) {",
          "889:   oidc_jose_error(err, \"inflateEnd failed\");",
          "",
          "[Added Lines]",
          "863:  int status = Z_OK;",
          "864:  size_t len = OIDC_CJOSE_UNCOMPRESS_CHUNK;",
          "865:  char *tmp = NULL, *buf = apr_pcalloc(pool, len);",
          "875:  status = inflateInit(&zlib);",
          "876:  if (status != Z_OK) {",
          "877:   oidc_jose_error(err, \"inflateInit() failed: %d\", status);",
          "878:   return FALSE;",
          "879:  }",
          "881:  while (status != Z_STREAM_END) {",
          "883:    tmp = apr_pcalloc(pool, len + OIDC_CJOSE_UNCOMPRESS_CHUNK);",
          "884:    _oidc_memcpy(tmp, buf, len);",
          "885:    len += OIDC_CJOSE_UNCOMPRESS_CHUNK;",
          "886:    buf = tmp;",
          "888:   zlib.next_out = (Bytef *)(buf + zlib.total_out);",
          "889:   zlib.avail_out = (uInt)len - zlib.total_out;",
          "890:   status = inflate(&zlib, Z_SYNC_FLUSH);",
          "891:   if ((status != Z_STREAM_END) && (status != Z_OK)) {",
          "892:    oidc_jose_error(err, \"inflate() failed: %d\", status);",
          "898:  status = inflateEnd(&zlib);",
          "899:  if (status != Z_OK) {",
          "900:   oidc_jose_error(err, \"inflateEnd() failed: %d\", status);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2fc2cf849bb6e43278395e89a1dadbe199bc166",
      "candidate_info": {
        "commit_hash": "e2fc2cf849bb6e43278395e89a1dadbe199bc166",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/e2fc2cf849bb6e43278395e89a1dadbe199bc166",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.4.16.3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.3dev],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.3],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78e1635f094d20aa8de9bf110067d84e517e3777",
      "candidate_info": {
        "commit_hash": "78e1635f094d20aa8de9bf110067d84e517e3777",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/78e1635f094d20aa8de9bf110067d84e517e3777",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "bump to 2.4.16.4rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc2],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc3],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2024d1b54b3dc4a8212a57ae906d7d9fd852c49",
      "candidate_info": {
        "commit_hash": "f2024d1b54b3dc4a8212a57ae906d7d9fd852c49",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/f2024d1b54b3dc4a8212a57ae906d7d9fd852c49",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/redis.c"
        ],
        "message": "set Redis default retry interval time to 300ms\n\ninstead of 0.5ms and make it configurable; bump to 2.4.15.3dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/redis.c||src/cache/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.2],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.15.3dev],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  return reply;",
          "264: }",
          "266: #define OIDC_REDIS_MAX_TRIES_ENV_VAR \"OIDC_REDIS_MAX_TRIES\"",
          "267: #define OIDC_REDIS_MAX_TRIES_DEFAULT 2",
          "",
          "[Removed Lines]",
          "269: static int oidc_cache_redis_tries(request_rec *r) {",
          "270:  const char *s = r->subprocess_env ? apr_table_get(r->subprocess_env, OIDC_REDIS_MAX_TRIES_ENV_VAR) : NULL;",
          "271:  return s ? _oidc_str_to_int(s) : OIDC_REDIS_MAX_TRIES_DEFAULT;",
          "272: }",
          "",
          "[Added Lines]",
          "266: static int oidc_cache_redis_env2int(request_rec *r, const char *env_var_name, const int default_value) {",
          "267:  const char *s = r->subprocess_env ? apr_table_get(r->subprocess_env, env_var_name) : NULL;",
          "268:  return s ? _oidc_str_to_int(s) : default_value;",
          "269: }",
          "274: #define OIDC_REDIS_RETRY_INTERVAL_ENV_VAR \"OIDC_REDIS_RETRY_INTERVAL\"",
          "275: #define OIDC_REDIS_RETRY_INTERVAL_DEFAULT 300",
          "277: #define OIDC_REDIS_WARN_OR_ERROR(cond, r, ...)                                                                         \\",
          "278:  if (cond)                                                                                                      \\",
          "279:   oidc_warn(r, ##__VA_ARGS__);                                                                           \\",
          "280:  else                                                                                                           \\",
          "281:   oidc_error(r, ##__VA_ARGS__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:  char *errstr = NULL;",
          "281:  int i = 0;",
          "282:  va_list ap;",
          "289:   if (context->connect(r, context) != APR_SUCCESS) {",
          "297:    }",
          "298:    continue;",
          "299:   }",
          "",
          "[Removed Lines]",
          "283:  int n = oidc_cache_redis_tries(r);",
          "286:  for (i = 1; i <= n; i++) {",
          "290:    if (i < n) {",
          "291:     oidc_warn(r, \"Redis connect (attempt=%d/%d to %s:%d) failed\", i, n, context->host_str,",
          "292:        context->port);",
          "293:     apr_sleep(500);",
          "294:    } else {",
          "295:     oidc_error(r, \"Redis connect (attempt=%d/%d to %s:%d) failed\", i, n, context->host_str,",
          "296:         context->port);",
          "",
          "[Added Lines]",
          "292:  int retries = oidc_cache_redis_env2int(r, OIDC_REDIS_MAX_TRIES_ENV_VAR, OIDC_REDIS_MAX_TRIES_DEFAULT);",
          "293:  apr_time_t interval = apr_time_from_msec(",
          "294:      oidc_cache_redis_env2int(r, OIDC_REDIS_RETRY_INTERVAL_ENV_VAR, OIDC_REDIS_RETRY_INTERVAL_DEFAULT));",
          "297:  for (i = 1; i <= retries; i++) {",
          "301:    OIDC_REDIS_WARN_OR_ERROR(i < retries, r, \"Redis connect (attempt=%d/%d to %s:%d) failed\", i,",
          "302:        retries, context->host_str, context->port);",
          "303:    if (i < retries) {",
          "304:     oidc_debug(r, \"wait before retrying: %\" APR_TIME_T_FMT \" (msec)\",",
          "305:         apr_time_as_msec(interval));",
          "306:     apr_sleep(interval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:    break;",
          "320:   oidc_cache_redis_reply_free(&reply);",
          "",
          "[Removed Lines]",
          "312:   if (i < n)",
          "313:    oidc_warn(r, \"Redis command (attempt=%d/%d to %s:%d) failed, disconnecting: '%s' [%s]\", i, n,",
          "314:       context->host_str, context->port, errstr, reply ? reply->str : \"<n/a>\");",
          "315:   else",
          "316:    oidc_error(r, \"Redis command (attempt=%d/%d to %s:%d) failed, disconnecting: '%s' [%s]\", i, n,",
          "317:        context->host_str, context->port, errstr, reply ? reply->str : \"<n/a>\");",
          "",
          "[Added Lines]",
          "322:   OIDC_REDIS_WARN_OR_ERROR(",
          "323:       i < retries, r, \"Redis command (attempt=%d/%d to %s:%d) failed, disconnecting: '%s' [%s]\", i,",
          "324:       retries, context->host_str, context->port, errstr, reply ? reply->str : \"<n/a>\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea3af872dcdbb4634a7e541c5e8c7326dafbb090",
      "candidate_info": {
        "commit_hash": "ea3af872dcdbb4634a7e541c5e8c7326dafbb090",
        "repo": "OpenIDC/mod_auth_openidc",
        "commit_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/ea3af872dcdbb4634a7e541c5e8c7326dafbb090",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c"
        ],
        "message": "change warnings about not passing unknown claims into debug messages\n\nsee #1263; thanks @nclarkau; bump to 2.4.16.4rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@openidc.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/util.c||src/util.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/util.c||src/util.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc0],[hans.zandbelt@openidc.com])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.16.4rc1],[hans.zandbelt@openidc.com])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1622:     } else {",
          "1629:     }",
          "1630:    }",
          "",
          "[Removed Lines]",
          "1625:      oidc_warn(r,",
          "1626:         \"unhandled in-array JSON object type [%d] for key \\\"%s\\\" when \"",
          "1627:         \"parsing claims array elements\",",
          "1628:         elem->type, s_key);",
          "",
          "[Added Lines]",
          "1625:      oidc_debug(r,",
          "1626:          \"unhandled in-array JSON object type [%d] for key \\\"%s\\\" when \"",
          "1627:          \"parsing claims array elements\",",
          "1628:          elem->type, s_key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1635:   } else {",
          "1640:   }",
          "1642:   iter = json_object_iter_next(j_attrs, iter);",
          "",
          "[Removed Lines]",
          "1638:    oidc_warn(r, \"unhandled JSON object type [%d] for key \\\"%s\\\" when parsing claims\",",
          "1639:       j_value->type, s_key);",
          "",
          "[Added Lines]",
          "1638:    oidc_debug(r, \"unhandled JSON object type [%d] for key \\\"%s\\\" when parsing claims\",",
          "1639:        j_value->type, s_key);",
          "",
          "---------------"
        ]
      }
    }
  ]
}