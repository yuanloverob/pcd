{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
  "patch_info": {
    "commit_hash": "d86b49411753bf2c83291e3a14ae43fefded2f84",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/d86b49411753bf2c83291e3a14ae43fefded2f84",
    "files": [
      "Doc/whatsnew/3.13.rst",
      "Misc/NEWS.d/next/Security/2024-05-01-20-57-09.gh-issue-118486.K44KJG.rst"
    ],
    "message": "gh-118486: Update docs for CVE-2024-4030 reference (GH-118737)\n\nUpdate docs for CVE-2024-4030 reference",
    "before_after_code_files": []
  },
  "patch_diff": {},
  "candidates": [
    {
      "candidate_hash": "a7e81fdfc175bd9cf82dfd8f1e1853cb942bf0f0",
      "candidate_info": {
        "commit_hash": "a7e81fdfc175bd9cf82dfd8f1e1853cb942bf0f0",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a7e81fdfc175bd9cf82dfd8f1e1853cb942bf0f0",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-05-24-21-16-52.gh-issue-119369.qBThho.rst",
          "Python/pystate.c",
          "Python/qsbr.c"
        ],
        "message": "[3.13] gh-119369: Fix deadlock during thread exit in free-threaded build (GH-119528) (#119868)\n\nRelease the GIL before calling `_Py_qsbr_unregister`.\n\nThe deadlock could occur when the GIL was enabled at runtime. The\n`_Py_qsbr_unregister` call might block while holding the GIL because the\nthread state was not active, but the GIL was still held.\n(cherry picked from commit 078b8c8cf2bf68f7484cc4d2e3dd74b6fab55664)\n\nCo-authored-by: Sam Gross <colesbury@gmail.com>",
        "before_after_code_files": [
          "Python/pystate.c||Python/pystate.c",
          "Python/qsbr.c||Python/qsbr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1753: static void",
          "1755: {",
          "1756:     assert(tstate->_status.cleared && !tstate->_status.finalized);",
          "1757:     tstate_verify_not_active(tstate);",
          "",
          "[Removed Lines]",
          "1754: tstate_delete_common(PyThreadState *tstate)",
          "",
          "[Added Lines]",
          "1754: tstate_delete_common(PyThreadState *tstate, int release_gil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1794:     HEAD_UNLOCK(runtime);",
          "1802:     if (tstate->_status.bound_gilstate) {",
          "",
          "[Removed Lines]",
          "1796: #ifdef Py_GIL_DISABLED",
          "1797:     _Py_qsbr_unregister(tstate);",
          "1798: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1808:     clear_datastack(tstate);",
          "1810:     tstate->_status.finalized = 1;",
          "1811: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1806:     if (release_gil) {",
          "1807:         _PyEval_ReleaseLock(tstate->interp, tstate, 1);",
          "1808:     }",
          "1810: #ifdef Py_GIL_DISABLED",
          "1811:     _Py_qsbr_unregister(tstate);",
          "1812: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1819:     while ((tstate = interp->threads.head) != NULL) {",
          "1820:         tstate_verify_not_active(tstate);",
          "1822:         free_threadstate((_PyThreadStateImpl *)tstate);",
          "1823:     }",
          "1824: }",
          "",
          "[Removed Lines]",
          "1821:         tstate_delete_common(tstate);",
          "",
          "[Added Lines]",
          "1825:         tstate_delete_common(tstate, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1829: {",
          "1830:     _Py_EnsureTstateNotNULL(tstate);",
          "1831:     tstate_verify_not_active(tstate);",
          "1833:     free_threadstate((_PyThreadStateImpl *)tstate);",
          "1834: }",
          "",
          "[Removed Lines]",
          "1832:     tstate_delete_common(tstate);",
          "",
          "[Added Lines]",
          "1836:     tstate_delete_common(tstate, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1842:     _Py_qsbr_detach(((_PyThreadStateImpl *)tstate)->qsbr);",
          "1843: #endif",
          "1844:     current_fast_clear(tstate->interp->runtime);",
          "1847:     free_threadstate((_PyThreadStateImpl *)tstate);",
          "1848: }",
          "",
          "[Removed Lines]",
          "1845:     tstate_delete_common(tstate);",
          "1846:     _PyEval_ReleaseLock(tstate->interp, tstate, 1);",
          "",
          "[Added Lines]",
          "1849:     tstate_delete_common(tstate, 1);  // release GIL as part of call",
          "",
          "---------------"
        ],
        "Python/qsbr.c||Python/qsbr.c": [
          "File: Python/qsbr.c -> Python/qsbr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     struct _qsbr_shared *shared = &tstate->interp->qsbr;",
          "237:     struct _PyThreadStateImpl *tstate_imp = (_PyThreadStateImpl*) tstate;",
          "239:     PyMutex_Lock(&shared->mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     assert(!tstate->_status.holds_gil);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "863a0bd5154a7dcade03e849ec2ed45fe9f8837f",
      "candidate_info": {
        "commit_hash": "863a0bd5154a7dcade03e849ec2ed45fe9f8837f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/863a0bd5154a7dcade03e849ec2ed45fe9f8837f",
        "files": [
          "Lib/test/test_datetime.py"
        ],
        "message": "[3.13] gh-120242: Fix handling of `[setUp,tearDown]Class` in `test_datetime` (GH-120243) (#120259)\n\ngh-120242: Fix handling of `[setUp,tearDown]Class` in `test_datetime` (GH-120243)\n(cherry picked from commit 95f4db88d5ab7d900f05d0418b2a2e77bf9ff126)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_datetime.py||Lib/test/test_datetime.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_datetime.py||Lib/test/test_datetime.py": [
          "File: Lib/test/test_datetime.py -> Lib/test/test_datetime.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import unittest",
          "2: import sys",
          "4: from test.support.import_helper import import_fresh_module",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import functools",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         for cls in test_classes:",
          "40:             cls.__name__ += suffix",
          "41:             cls.__qualname__ += suffix",
          "57:     return tests",
          "",
          "[Removed Lines]",
          "42:             @classmethod",
          "43:             def setUpClass(cls_, module=module):",
          "44:                 cls_._save_sys_modules = sys.modules.copy()",
          "45:                 sys.modules[TESTS] = module",
          "46:                 sys.modules['datetime'] = module.datetime_module",
          "47:                 if hasattr(module, '_pydatetime'):",
          "48:                     sys.modules['_pydatetime'] = module._pydatetime",
          "49:                 sys.modules['_strptime'] = module._strptime",
          "50:             @classmethod",
          "51:             def tearDownClass(cls_):",
          "52:                 sys.modules.clear()",
          "53:                 sys.modules.update(cls_._save_sys_modules)",
          "54:             cls.setUpClass = setUpClass",
          "55:             cls.tearDownClass = tearDownClass",
          "56:             tests.addTests(loader.loadTestsFromTestCase(cls))",
          "",
          "[Added Lines]",
          "44:             @functools.wraps(cls, updated=())",
          "45:             class Wrapper(cls):",
          "46:                 @classmethod",
          "47:                 def setUpClass(cls_, module=module):",
          "48:                     cls_._save_sys_modules = sys.modules.copy()",
          "49:                     sys.modules[TESTS] = module",
          "50:                     sys.modules['datetime'] = module.datetime_module",
          "51:                     if hasattr(module, '_pydatetime'):",
          "52:                         sys.modules['_pydatetime'] = module._pydatetime",
          "53:                     sys.modules['_strptime'] = module._strptime",
          "54:                     super().setUpClass()",
          "56:                 @classmethod",
          "57:                 def tearDownClass(cls_):",
          "58:                     super().tearDownClass()",
          "59:                     sys.modules.clear()",
          "60:                     sys.modules.update(cls_._save_sys_modules)",
          "62:             tests.addTests(loader.loadTestsFromTestCase(Wrapper))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93ef7aa03c64a97d8615ad3975083392ad07b379",
      "candidate_info": {
        "commit_hash": "93ef7aa03c64a97d8615ad3975083392ad07b379",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/93ef7aa03c64a97d8615ad3975083392ad07b379",
        "files": [
          "Lib/test/test_frame.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-10-19-54-18.gh-issue-118921.O4ztZG.rst",
          "Objects/frameobject.c"
        ],
        "message": "[3.13] gh-118921: Add `copy()` method for `FrameLocalsProxy` (GH-118923) (#118933)\n\n(cherry picked from commit 35c436186b849f8f2f9fb866c59015c9d034d448)\n\nCo-authored-by: Tian Gao <gaogaotiantian@hotmail.com>",
        "before_after_code_files": [
          "Lib/test/test_frame.py||Lib/test/test_frame.py",
          "Objects/frameobject.c||Objects/frameobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_frame.py||Lib/test/test_frame.py": [
          "File: Lib/test/test_frame.py -> Lib/test/test_frame.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:         f_locals['o'] = f_locals['k']",
          "372:         self.assertEqual(o, 'a.b.c')",
          "374:     def test_update_with_self(self):",
          "375:         def f():",
          "376:             f_locals = sys._getframe().f_locals",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:     def test_copy(self):",
          "375:         x = 0",
          "376:         d = sys._getframe().f_locals",
          "377:         d_copy = d.copy()",
          "378:         self.assertIsInstance(d_copy, dict)",
          "379:         self.assertEqual(d_copy['x'], 0)",
          "380:         d_copy['x'] = 1",
          "381:         self.assertEqual(x, 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:     def test_unsupport(self):",
          "406:         x = 1",
          "407:         d = sys._getframe().f_locals",
          "411:         with self.assertRaises(TypeError):",
          "412:             copy.copy(d)",
          "",
          "[Removed Lines]",
          "408:         with self.assertRaises(AttributeError):",
          "409:             d.copy()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Objects/frameobject.c||Objects/frameobject.c": [
          "File: Objects/frameobject.c -> Objects/frameobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     return result;",
          "638: }",
          "640: static PyObject*",
          "641: framelocalsproxy_reversed(PyObject *self, void *Py_UNUSED(ignored))",
          "642: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640: static PyObject*",
          "641: framelocalsproxy_copy(PyObject *self, PyObject *Py_UNUSED(ignored))",
          "642: {",
          "643:     PyObject* result = PyDict_New();",
          "645:     if (result == NULL) {",
          "646:         return NULL;",
          "647:     }",
          "649:     if (PyDict_Update(result, self) < 0) {",
          "650:         Py_DECREF(result);",
          "651:         return NULL;",
          "652:     }",
          "654:     return result;",
          "655: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "677:      NULL},",
          "678:     {\"__reversed__\", _PyCFunction_CAST(framelocalsproxy_reversed),       METH_NOARGS,",
          "679:      NULL},",
          "680:     {\"keys\",         _PyCFunction_CAST(framelocalsproxy_keys),           METH_NOARGS,",
          "681:      NULL},",
          "682:     {\"values\",       _PyCFunction_CAST(framelocalsproxy_values),         METH_NOARGS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "697:     {\"copy\",         _PyCFunction_CAST(framelocalsproxy_copy),           METH_NOARGS,",
          "698:      NULL},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7776179ec459cc598fedf761a3c36463aa2e42a8",
      "candidate_info": {
        "commit_hash": "7776179ec459cc598fedf761a3c36463aa2e42a8",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7776179ec459cc598fedf761a3c36463aa2e42a8",
        "files": [
          "Include/internal/pycore_dtoa.h"
        ],
        "message": "[3.13] gh-119447: Fix build with _PY_SHORT_FLOAT_REPR == 0 (GH-121178) (#121179)\n\ngh-119447: Fix build with _PY_SHORT_FLOAT_REPR == 0 (GH-121178)\n(cherry picked from commit c3677befbecbd7fa94cde8c1fecaa4cc18e6aa2b)\n\nCo-authored-by: Yureka <yuka@yuka.dev>",
        "before_after_code_files": [
          "Include/internal/pycore_dtoa.h||Include/internal/pycore_dtoa.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_dtoa.h||Include/internal/pycore_dtoa.h": [
          "File: Include/internal/pycore_dtoa.h -> Include/internal/pycore_dtoa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"pycore_pymath.h\"        // _PY_SHORT_FLOAT_REPR",
          "16: typedef uint32_t ULong;",
          "18: struct",
          "",
          "[Removed Lines]",
          "14: #if _PY_SHORT_FLOAT_REPR == 1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     ULong x[1];",
          "23: };",
          "27: struct _dtoa_state {",
          "28:     int _not_used;",
          "29: };",
          "31:     {0}",
          "36: #define Bigint_Kmax 7",
          "",
          "[Removed Lines]",
          "25: #ifdef Py_USING_MEMORY_DEBUGGER",
          "30: #define _dtoa_interp_state_INIT(INTERP) \\",
          "33: #else  // !Py_USING_MEMORY_DEBUGGER",
          "",
          "[Added Lines]",
          "23: #if defined(Py_USING_MEMORY_DEBUGGER) || _PY_SHORT_FLOAT_REPR == 0",
          "28: #define _dtoa_state_INIT(INTERP) \\",
          "31: #else  // !Py_USING_MEMORY_DEBUGGER && _PY_SHORT_FLOAT_REPR != 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:                          int *decpt, int *sign, char **rve);",
          "67: extern void _Py_dg_freedtoa(char *s);",
          "72: extern PyStatus _PyDtoa_Init(PyInterpreterState *interp);",
          "73: extern void _PyDtoa_Fini(PyInterpreterState *interp);",
          "",
          "[Removed Lines]",
          "69: #endif // _PY_SHORT_FLOAT_REPR == 1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "810a09ad3710be60cff9e174be85ca65e76cdbd1",
      "candidate_info": {
        "commit_hash": "810a09ad3710be60cff9e174be85ca65e76cdbd1",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/810a09ad3710be60cff9e174be85ca65e76cdbd1",
        "files": [
          "Lib/os.py",
          "Lib/test/test_os.py",
          "Misc/NEWS.d/next/Library/2024-05-28-00-56-59.gh-issue-89727._bxoL3.rst"
        ],
        "message": "[3.13] GH-89727: Fix `os.fwalk()` recursion error on deep trees (GH-119638) (#119764)\n\nGH-89727: Fix `os.fwalk()` recursion error on deep trees (GH-119638)\n\nImplement `os.fwalk()` using a list as a stack to avoid emitting recursion\nerrors on deeply nested trees.\n(cherry picked from commit 3c890b503c740767d0eb9a0e74b47f17a1e69452)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>",
        "before_after_code_files": [
          "Lib/os.py||Lib/os.py",
          "Lib/test/test_os.py||Lib/test/test_os.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/os.py||Lib/os.py": [
          "File: Lib/os.py -> Lib/os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:         \"\"\"",
          "479:         sys.audit(\"os.fwalk\", top, topdown, onerror, follow_symlinks, dir_fd)",
          "480:         top = fspath(top)",
          "495:         # Note: This uses O(depth of the directory tree) file descriptors: if",
          "496:         # necessary, it can be adapted to only require O(1) FDs, see issue",
          "497:         # #13734.",
          "499:         scandir_it = scandir(topfd)",
          "500:         dirs = []",
          "501:         nondirs = []",
          "",
          "[Removed Lines]",
          "481:         # Note: To guard against symlink races, we use the standard",
          "482:         # lstat()/open()/fstat() trick.",
          "483:         if not follow_symlinks:",
          "484:             orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)",
          "485:         topfd = open(top, O_RDONLY | O_NONBLOCK, dir_fd=dir_fd)",
          "486:         try:",
          "487:             if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and",
          "488:                                     path.samestat(orig_st, stat(topfd)))):",
          "489:                 yield from _fwalk(topfd, top, isinstance(top, bytes),",
          "490:                                   topdown, onerror, follow_symlinks)",
          "491:         finally:",
          "492:             close(topfd)",
          "494:     def _fwalk(topfd, toppath, isbytes, topdown, onerror, follow_symlinks):",
          "",
          "[Added Lines]",
          "481:         stack = [(_fwalk_walk, (True, dir_fd, top, top, None))]",
          "482:         isbytes = isinstance(top, bytes)",
          "483:         while stack:",
          "484:             yield from _fwalk(stack, isbytes, topdown, onerror, follow_symlinks)",
          "486:     # Each item in the _fwalk() stack is a pair (action, args).",
          "487:     _fwalk_walk = 0  # args: (isroot, dirfd, toppath, topname, entry)",
          "488:     _fwalk_yield = 1  # args: (toppath, dirnames, filenames, topfd)",
          "489:     _fwalk_close = 2  # args: dirfd",
          "491:     def _fwalk(stack, isbytes, topdown, onerror, follow_symlinks):",
          "496:         action, value = stack.pop()",
          "497:         if action == _fwalk_close:",
          "498:             close(value)",
          "499:             return",
          "500:         elif action == _fwalk_yield:",
          "501:             yield value",
          "502:             return",
          "503:         assert action == _fwalk_walk",
          "504:         isroot, dirfd, toppath, topname, entry = value",
          "505:         try:",
          "506:             if not follow_symlinks:",
          "507:                 # Note: To guard against symlink races, we use the standard",
          "508:                 # lstat()/open()/fstat() trick.",
          "509:                 if entry is None:",
          "510:                     orig_st = stat(topname, follow_symlinks=False, dir_fd=dirfd)",
          "511:                 else:",
          "512:                     orig_st = entry.stat(follow_symlinks=False)",
          "513:             topfd = open(topname, O_RDONLY | O_NONBLOCK, dir_fd=dirfd)",
          "514:         except OSError as err:",
          "515:             if isroot:",
          "516:                 raise",
          "517:             if onerror is not None:",
          "518:                 onerror(err)",
          "519:             return",
          "520:         stack.append((_fwalk_close, topfd))",
          "521:         if not follow_symlinks:",
          "522:             if isroot and not st.S_ISDIR(orig_st.st_mode):",
          "523:                 return",
          "524:             if not path.samestat(orig_st, stat(topfd)):",
          "525:                 return",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:         if topdown:",
          "523:             yield toppath, dirs, nondirs, topfd",
          "550:     __all__.append(\"fwalk\")",
          "",
          "[Removed Lines]",
          "525:         for name in dirs if entries is None else zip(dirs, entries):",
          "526:             try:",
          "527:                 if not follow_symlinks:",
          "528:                     if topdown:",
          "529:                         orig_st = stat(name, dir_fd=topfd, follow_symlinks=False)",
          "530:                     else:",
          "531:                         assert entries is not None",
          "532:                         name, entry = name",
          "533:                         orig_st = entry.stat(follow_symlinks=False)",
          "534:                 dirfd = open(name, O_RDONLY | O_NONBLOCK, dir_fd=topfd)",
          "535:             except OSError as err:",
          "536:                 if onerror is not None:",
          "537:                     onerror(err)",
          "538:                 continue",
          "539:             try:",
          "540:                 if follow_symlinks or path.samestat(orig_st, stat(dirfd)):",
          "541:                     dirpath = path.join(toppath, name)",
          "542:                     yield from _fwalk(dirfd, dirpath, isbytes,",
          "543:                                       topdown, onerror, follow_symlinks)",
          "544:             finally:",
          "545:                 close(dirfd)",
          "547:         if not topdown:",
          "548:             yield toppath, dirs, nondirs, topfd",
          "",
          "[Added Lines]",
          "552:         else:",
          "553:             stack.append((_fwalk_yield, (toppath, dirs, nondirs, topfd)))",
          "555:         toppath = path.join(toppath, toppath[:0])  # Add trailing slash.",
          "556:         if entries is None:",
          "557:             stack.extend(",
          "558:                 (_fwalk_walk, (False, topfd, toppath + name, name, None))",
          "559:                 for name in dirs[::-1])",
          "560:         else:",
          "561:             stack.extend(",
          "562:                 (_fwalk_walk, (False, topfd, toppath + name, name, entry))",
          "563:                 for name, entry in zip(dirs[::-1], entries[::-1]))",
          "",
          "---------------"
        ],
        "Lib/test/test_os.py||Lib/test/test_os.py": [
          "File: Lib/test/test_os.py -> Lib/test/test_os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1688:     # fwalk() keeps file descriptors open",
          "1689:     test_walk_many_open_files = None",
          "1694: class BytesWalkTests(WalkTests):",
          "",
          "[Removed Lines]",
          "1690:     # fwalk() still uses recursion",
          "1691:     test_walk_above_recursion_limit = None",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}