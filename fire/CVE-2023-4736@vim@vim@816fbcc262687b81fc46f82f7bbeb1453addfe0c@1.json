{
  "cve_id": "CVE-2023-4736",
  "cve_desc": "Untrusted Search Path in GitHub repository vim/vim prior to 9.0.1833.",
  "repo": "vim/vim",
  "patch_hash": "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
  "patch_info": {
    "commit_hash": "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c",
    "files": [
      "runtime/autoload/gzip.vim",
      "runtime/autoload/zip.vim",
      "runtime/ftplugin/perl.vim",
      "runtime/ftplugin/ruby.vim",
      "runtime/ftplugin/zig.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.1833: [security] runtime file fixes\n\nProblem:  runtime files may execute code in current dir\nSolution: only execute, if not run from current directory\n\nThe perl, zig and ruby filetype plugins and the zip and gzip autoload\nplugins may try to load malicious executable files from the current\nworking directory.  This is especially a problem on windows, where the\ncurrent directory is implicitly in your $PATH and windows may even run a\nfile with the extension `.bat` because of $PATHEXT.\n\nSo make sure that we are not trying to execute a file from the current\ndirectory. If this would be the case, error out (for the zip and gzip)\nplugins or silently do not run those commands (for the ftplugins).\n\nThis assumes, that only the current working directory is bad. For all\nother directories, it is assumed that those directories were\nintentionally set to the $PATH by the user.\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
      "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
      "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
      "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
      "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim": [
      "File: runtime/autoload/gzip.vim -> runtime/autoload/gzip.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: fun s:check(cmd)",
      "11:   let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')",
      "12:   if !exists(\"s:have_\" . name)",
      "13:     let e = executable(name)",
      "14:     if e < 0",
      "15:       let r = system(name . \" --version\")",
      "16:       let e = (r !~ \"not found\" && r != \"\")",
      "17:     endif",
      "19:   endif",
      "20:   exe \"return s:have_\" . name",
      "21: endfun",
      "",
      "[Removed Lines]",
      "18:     exe \"let s:have_\" . name . \"=\" . e",
      "",
      "[Added Lines]",
      "13:     \" safety check, don't execute anything from the current directory",
      "14:     let f = fnamemodify(exepath(name), \":p:h\") !=# getcwd()",
      "15:     if !f",
      "16:       echoerr \"Warning: NOT executing \" .. name .. \" from current directory!\"",
      "17:     endif",
      "23:     exe \"let s:have_\" . name . \"=\" . (e && f)",
      "",
      "---------------"
    ],
    "runtime/autoload/zip.vim||runtime/autoload/zip.vim": [
      "File: runtime/autoload/zip.vim -> runtime/autoload/zip.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  let g:zip_extractcmd= g:zip_unzipcmd",
      "58: endif",
      "60: \" ----------------",
      "61: \"  Functions: {{{1",
      "62: \" ----------------",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: if fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()",
      "61:  echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"",
      "62:  finish",
      "63: endif",
      "",
      "---------------"
    ],
    "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim": [
      "File: runtime/ftplugin/perl.vim -> runtime/ftplugin/perl.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: \" Set this once, globally.",
      "56: if !exists(\"perlpath\")",
      "58:       try",
      "59:  if &shellxquote != '\"'",
      "60:      let perlpath = system('perl -e \"print join(q/,/,@INC)\"')",
      "",
      "[Removed Lines]",
      "57:     if executable(\"perl\")",
      "",
      "[Added Lines]",
      "57:     \" safety check: don't execute perl from current directory",
      "58:     if executable(\"perl\") && fnamemodify(exepath(\"perl\"), \":p:h\") != getcwd()",
      "",
      "---------------"
    ],
    "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim": [
      "File: runtime/ftplugin/ruby.vim -> runtime/ftplugin/ruby.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "99:   return path",
      "100: endfunction",
      "108:     endif",
      "109:   endif",
      "125:     endif",
      "126:   endif",
      "138: if (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")",
      "139:   let b:browsefilter = \"Ruby Source Files (*.rb)\\t*.rb\\n\" .",
      "",
      "[Removed Lines]",
      "102: if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))",
      "103:   let s:version_file = findfile('.ruby-version', '.;')",
      "104:   if !empty(s:version_file) && filereadable(s:version_file)",
      "105:     let b:ruby_version = get(readfile(s:version_file, '', 1), '')",
      "106:     if !has_key(g:ruby_version_paths, b:ruby_version)",
      "107:       let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))",
      "110: endif",
      "112: if exists(\"g:ruby_path\")",
      "113:   let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path",
      "114: elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', ''))",
      "115:   let s:ruby_paths = g:ruby_version_paths[b:ruby_version]",
      "116:   let s:ruby_path = s:build_path(s:ruby_paths)",
      "117: else",
      "118:   if !exists('g:ruby_default_path')",
      "119:     if has(\"ruby\") && has(\"win32\")",
      "120:       ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
      "121:     elseif executable('ruby') && !empty($HOME)",
      "122:       let g:ruby_default_path = s:query_path($HOME)",
      "123:     else",
      "124:       let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
      "127:   let s:ruby_paths = g:ruby_default_path",
      "128:   let s:ruby_path = s:build_path(s:ruby_paths)",
      "129: endif",
      "131: if stridx(&l:path, s:ruby_path) == -1",
      "132:   let &l:path = s:ruby_path",
      "133: endif",
      "134: if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1",
      "135:   let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')",
      "136: endif",
      "",
      "[Added Lines]",
      "102: let s:execute_ruby = 1",
      "103: \" Security Check, don't execute ruby from the current directory",
      "104: if fnamemodify(exepath(\"ruby\"), \":p:h\") ==# getcwd()",
      "105:   let s:execute_ruby = 0",
      "106: endif",
      "108: function SetRubyPath()",
      "109:   if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))",
      "110:     let s:version_file = findfile('.ruby-version', '.;')",
      "111:     if !empty(s:version_file) && filereadable(s:version_file) && s:execute_ruby",
      "112:       let b:ruby_version = get(readfile(s:version_file, '', 1), '')",
      "113:       if !has_key(g:ruby_version_paths, b:ruby_version)",
      "114:  let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))",
      "115:       endif",
      "119:   if exists(\"g:ruby_path\")",
      "120:     let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path",
      "121:   elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', '')) && s:execute_ruby",
      "122:     let s:ruby_paths = g:ruby_version_paths[b:ruby_version]",
      "123:     let s:ruby_path = s:build_path(s:ruby_paths)",
      "124:   else",
      "125:     if !exists('g:ruby_default_path')",
      "126:       if has(\"ruby\") && has(\"win32\")",
      "127:  ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )",
      "128:       elseif executable('ruby') && !empty($HOME) && s:execute_ruby",
      "129:  let g:ruby_default_path = s:query_path($HOME)",
      "130:       else",
      "131:  let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')",
      "132:       endif",
      "134:     let s:ruby_paths = g:ruby_default_path",
      "135:     let s:ruby_path = s:build_path(s:ruby_paths)",
      "138:   if stridx(&l:path, s:ruby_path) == -1",
      "139:     let &l:path = s:ruby_path",
      "140:   endif",
      "141:   if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1",
      "142:     let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')",
      "143:   endif",
      "144: endfunction",
      "146: call SetRubyPath()",
      "",
      "---------------"
    ],
    "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
      "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
      "43:     silent let s:env = system('zig env')",
      "44:     if v:shell_error == 0",
      "45:         let g:zig_std_dir = json_decode(s:env)['std_dir']",
      "",
      "[Removed Lines]",
      "42: if !exists('g:zig_std_dir') && exists('*json_decode') && executable('zig')",
      "",
      "[Added Lines]",
      "42: \" Safety check: don't execute zip from current directory",
      "43: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
      "44:     \\  executable('zig') && fnamemodify(exepath(\"zig\"), \":p:h\") != getcwd()",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700: static int included_patches[] =",
      "703:     1832,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     1833,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7ac0ef5098856bedca26e7073594a407c05636f",
      "candidate_info": {
        "commit_hash": "f7ac0ef5098856bedca26e7073594a407c05636f",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/f7ac0ef5098856bedca26e7073594a407c05636f",
        "files": [
          "runtime/doc/filetype.txt",
          "runtime/ftplugin/awk.vim",
          "runtime/ftplugin/changelog.vim",
          "runtime/ftplugin/perl.vim",
          "runtime/ftplugin/ruby.vim",
          "runtime/ftplugin/zig.vim"
        ],
        "message": "runtime: don't execute external commands when loading ftplugins\n\nThis is a followup to 816fbcc262687b81fc46f82f7bbeb1453addfe0c (patch\n9.0.1833: [security] runtime file fixes)\n\nIt basically disables that external commands are run on loading of the\nfiletype plugin, **unless** the user has set the `g:plugin_exec = 1`\nglobal variable in their configuration or for a specific filetype the\nvariable g:<filetype>_exec=1.\n\nThere are a few more plugins, that may execute system commands like\ndebchangelog, gitcommit, sh, racket, zsh, ps1 but those do at least\ndo not run those commands by default during loading of the filetype plugin\n(there the command is mostly run as convenience for auto-completion or\nto provide documentation lookup).\n\ncloses: #13034\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>\nCo-authored-by: Tim Pope <vim@tpope.org>",
        "before_after_code_files": [
          "runtime/ftplugin/awk.vim||runtime/ftplugin/awk.vim",
          "runtime/ftplugin/changelog.vim||runtime/ftplugin/changelog.vim",
          "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
          "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
          "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ],
          "candidate": [
            "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/ftplugin/awk.vim||runtime/ftplugin/awk.vim": [
          "File: runtime/ftplugin/awk.vim -> runtime/ftplugin/awk.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     let b:undo_ftplugin .= \" | setl fp<\"",
          "38:   endif",
          "45:   let b:undo_ftplugin .= \" | setl inc< path<\"",
          "46: endif",
          "",
          "[Removed Lines]",
          "40:   let path = system(\"gawk 'BEGIN { printf ENVIRON[\\\"AWKPATH\\\"] }'\")",
          "41:   let path = substitute(path, '^\\.\\=:\\|:\\.\\=$\\|:\\.\\=:', ',,', 'g') \" POSIX cwd",
          "42:   let path = substitute(path, ':', ',', 'g')",
          "44:   let &l:path = path",
          "",
          "[Added Lines]",
          "40:   \" Disabled by default for security reasons.",
          "41:   if get(g:, 'awk_exec', get(g:, 'plugin_exec', 0))",
          "42:     let path = system(\"gawk 'BEGIN { printf ENVIRON[\\\"AWKPATH\\\"] }'\")",
          "43:     let path = substitute(path, '^\\.\\=:\\|:\\.\\=$\\|:\\.\\=:', ',,', 'g') \" POSIX cwd",
          "44:     let path = substitute(path, ':', ',', 'g')",
          "46:     let &l:path = path",
          "47:   endif",
          "",
          "---------------"
        ],
        "runtime/ftplugin/changelog.vim||runtime/ftplugin/changelog.vim": [
          "File: runtime/ftplugin/changelog.vim -> runtime/ftplugin/changelog.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     elseif $EMAIL_ADDRESS != \"\"",
          "56:       return $EMAIL_ADDRESS",
          "57:     endif",
          "60:     return printf('%s <%s@%s>', s:name(login), login, s:hostname())",
          "61:   endfunction",
          "63:   function! s:login()",
          "65:   endfunction",
          "67:   function! s:trimmed_system_with_default(command, default)",
          "",
          "[Removed Lines]",
          "59:     let login = s:login()",
          "64:     return s:trimmed_system_with_default('whoami', 'unknown')",
          "",
          "[Added Lines]",
          "58:     let s:default_login = 'unknown'",
          "60:     \" Disabled by default for security reasons.",
          "61:     if get(g:, 'changelog_exec', get(g:, 'plugin_exec', 0))",
          "62:       let login = s:login()",
          "63:     else",
          "64:       let login = s:default_login",
          "65:     endif",
          "70:     return s:trimmed_system_with_default('whoami', s:default_login)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   function! s:system_with_default(command, default)",
          "72:     let output = system(a:command)",
          "73:     if v:shell_error",
          "75:     endif",
          "76:     return output",
          "77:   endfunction",
          "",
          "[Removed Lines]",
          "74:       return default",
          "",
          "[Added Lines]",
          "80:       return a:default",
          "",
          "---------------"
        ],
        "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim": [
          "File: runtime/ftplugin/perl.vim -> runtime/ftplugin/perl.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: \" Set this once, globally.",
          "56: if !exists(\"perlpath\")",
          "58:     let s:tmp_cwd = getcwd()",
          "61:       try",
          "62:  if &shellxquote != '\"'",
          "63:      let perlpath = system('perl -e \"print join(q/,/,@INC)\"')",
          "",
          "[Removed Lines]",
          "57:     \" safety check: don't execute perl from current directory",
          "59:     if executable(\"perl\") && (fnamemodify(exepath(\"perl\"), \":p:h\") != s:tmp_cwd",
          "60:           \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "",
          "[Added Lines]",
          "58:     \" safety check: don't execute perl binary by default",
          "59:     if executable(\"perl\") && get(g:, 'perl_exec', get(g:, 'plugin_exec', 0))",
          "60:         \\ && (fnamemodify(exepath(\"perl\"), \":p:h\") != s:tmp_cwd",
          "61:         \\ || (index(split($PATH, has(\"win32\") ? ';' : ':'), s:tmp_cwd) != -1",
          "62:         \\ && s:tmp_cwd != '.'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  \" current directory and the directory of the current file.",
          "74:  let perlpath = \".,,\"",
          "75:     endif",
          "77: endif",
          "79: \" Append perlpath to the existing path value, if it is set.  Since we don't",
          "",
          "[Removed Lines]",
          "76:     unlet s:tmp_cwd",
          "",
          "[Added Lines]",
          "78:     unlet! s:tmp_cwd",
          "",
          "---------------"
        ],
        "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim": [
          "File: runtime/ftplugin/ruby.vim -> runtime/ftplugin/ruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: endif",
          "63: function! s:query_path(root) abort",
          "64:   let code = \"print $:.join %q{,}\"",
          "65:   if &shell =~# 'sh' && empty(&shellxquote)",
          "66:     let prefix = 'env PATH='.shellescape($PATH).' '",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   \" Disabled by default for security reasons.",
          "65:   if !get(g:, 'ruby_exec', get(g:, 'plugin_exec', 0))",
          "66:     return []",
          "67:   endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     else",
          "85:       let path = split(system(path_check),',')",
          "86:     endif",
          "88:     exe cd cwd",
          "89:     return path",
          "90:   finally",
          "",
          "[Removed Lines]",
          "87:     unlet s:tmp_cwd",
          "",
          "[Added Lines]",
          "91:     unlet! s:tmp_cwd",
          "",
          "---------------"
        ],
        "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
          "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
          "42: \" Safety check: don't execute zip from current directory",
          "44: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
          "47:     silent let s:env = system('zig env')",
          "48:     if v:shell_error == 0",
          "49:         let g:zig_std_dir = json_decode(s:env)['std_dir']",
          "50:     endif",
          "51:     unlet! s:env",
          "52: endif",
          "55: if exists('g:zig_std_dir')",
          "56:     let &l:path = &l:path . ',' . g:zig_std_dir",
          "",
          "[Removed Lines]",
          "43: let s:tmp_cwd = getcwd()",
          "45:     \\  executable('zig') && (fnamemodify(exepath(\"zig\"), \":p:h\") != s:tmp_cwd",
          "46:           \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "53: unlet s:tmp_cwd",
          "",
          "[Added Lines]",
          "44:     \\  executable('zig') && get(g:, 'zig_exec', get(g:, 'plugin_exec', 0))",
          "45:     \\ && (fnamemodify(exepath(\"zig\"), \":p:h\") != s:tmp_cwd",
          "46:     \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "53: unlet! s:tmp_cwd",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd8a3eaf5348feacfecab4b374b7ea4ce6a97422",
      "candidate_info": {
        "commit_hash": "cd8a3eaf5348feacfecab4b374b7ea4ce6a97422",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/cd8a3eaf5348feacfecab4b374b7ea4ce6a97422",
        "files": [
          "runtime/autoload/dist/vim.vim",
          "runtime/autoload/gzip.vim",
          "runtime/autoload/zip.vim",
          "runtime/ftplugin/awk.vim",
          "runtime/ftplugin/changelog.vim",
          "runtime/ftplugin/perl.vim",
          "runtime/ftplugin/zig.vim"
        ],
        "message": "runtime(dist): centralize safe executable check and add vim library (#13413)\n\nFollow up to 816fbcc26 (patch 9.0.1833: [security] runtime file fixes,\n2023-08-31) and f7ac0ef50 (runtime: don't execute external commands when\nloading ftplugins, 2023-09-06).\n\nThis puts the logic for safe executable checks in a single place, by introducing\na central vim library, so all filetypes benefit from consistency.\n\nNotable changes:\n- dist#vim because the (autoload) namespace for a new runtime support\n  library. Supporting functions should get documentation. It might make\n  life easier for NeoVim devs to make the documentation a new file\n  rather than cram it into existing files, though we may want\n  cross-references to it somewhere\u2026\n- The gzip and zip plugins need to be opted into by enabling execution\n  of those programs (or the global plugin_exec). This needs\n  documentation or discussion.\n- This fixes a bug in the zig plugin: code setting s:tmp_cwd was removed\n  in f7ac0ef50 (runtime: don't execute external commands when loading\n  ftplugins, 2023-09-06), but the variable was still referenced. Since\n  the new function takes care of that automatically, the variable is no\n  longer needed.\n\nSigned-off-by: D. Ben Knoble <ben.knoble+github@gmail.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "runtime/autoload/dist/vim.vim||runtime/autoload/dist/vim.vim",
          "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
          "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
          "runtime/ftplugin/awk.vim||runtime/ftplugin/awk.vim",
          "runtime/ftplugin/changelog.vim||runtime/ftplugin/changelog.vim",
          "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
          "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
            "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
            "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ],
          "candidate": [
            "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
            "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
            "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/autoload/dist/vim.vim||runtime/autoload/dist/vim.vim": [
          "File: runtime/autoload/dist/vim.vim -> runtime/autoload/dist/vim.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: vim9script",
          "3: # Vim runtime support library",
          "4: #",
          "5: # Maintainer: The Vim Project <https://github.com/vim/vim>",
          "6: # Last Change: 2023 Oct 25",
          "8: export def IsSafeExecutable(filetype: string, executable: string): bool",
          "9:   var cwd = getcwd()",
          "10:   return get(g:, filetype .. '_exec', get(g:, 'plugin_exec', 0))",
          "11:     && (fnamemodify(exepath(executable), ':p:h') !=# cwd",
          "12:         || (split($PATH, has('win32') ? ';' : ':')->index(cwd) != -1",
          "13:             && cwd != '.'))",
          "14: enddef",
          "16: # Uncomment this line to check for compilation errors early",
          "17: # defcompile",
          "",
          "---------------"
        ],
        "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim": [
          "File: runtime/autoload/gzip.vim -> runtime/autoload/gzip.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')",
          "12:   if !exists(\"s:have_\" . name)",
          "13:     \" safety check, don't execute anything from the current directory",
          "18:     if !f",
          "19:       echoerr \"Warning: NOT executing \" .. name .. \" from current directory!\"",
          "20:     endif",
          "",
          "[Removed Lines]",
          "14:     let s:tmp_cwd = getcwd()",
          "15:     let f = (fnamemodify(exepath(name), \":p:h\") !=# s:tmp_cwd",
          "16:           \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "17:     unlet s:tmp_cwd",
          "",
          "[Added Lines]",
          "14:     let f = dist#vim#IsSafeExecutable('gzip', name)",
          "",
          "---------------"
        ],
        "runtime/autoload/zip.vim||runtime/autoload/zip.vim": [
          "File: runtime/autoload/zip.vim -> runtime/autoload/zip.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  let g:zip_extractcmd= g:zip_unzipcmd",
          "58: endif",
          "64:  echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"",
          "65:  finish",
          "66: endif",
          "69: \" ----------------",
          "70: \"  Functions: {{{1",
          "",
          "[Removed Lines]",
          "60: let s:tmp_cwd = getcwd()",
          "61: if (fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()",
          "62:           \\ && (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) == -1 || s:tmp_cwd == '.'))",
          "63:  unlet s:tmp_cwd",
          "67: unlet s:tmp_cwd",
          "",
          "[Added Lines]",
          "60: if !dist#vim#IsSafeExecutable('zip', g:zip_unzipcmd)",
          "",
          "---------------"
        ],
        "runtime/ftplugin/awk.vim||runtime/ftplugin/awk.vim": [
          "File: runtime/ftplugin/awk.vim -> runtime/ftplugin/awk.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     let b:undo_ftplugin .= \" | setl fp<\"",
          "38:   endif",
          "42:     let path = system(\"gawk 'BEGIN { printf ENVIRON[\\\"AWKPATH\\\"] }'\")",
          "43:     let path = substitute(path, '^\\.\\=:\\|:\\.\\=$\\|:\\.\\=:', ',,', 'g') \" POSIX cwd",
          "44:     let path = substitute(path, ':', ',', 'g')",
          "",
          "[Removed Lines]",
          "40:   \" Disabled by default for security reasons.",
          "41:   if get(g:, 'awk_exec', get(g:, 'plugin_exec', 0))",
          "",
          "[Added Lines]",
          "40:   \" Disabled by default for security reasons.",
          "41:   if dist#vim#IsSafeExecutable('awk', 'gawk')",
          "",
          "---------------"
        ],
        "runtime/ftplugin/changelog.vim||runtime/ftplugin/changelog.vim": [
          "File: runtime/ftplugin/changelog.vim -> runtime/ftplugin/changelog.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     endif",
          "58:     let s:default_login = 'unknown'",
          "62:       let login = s:login()",
          "63:     else",
          "64:       let login = s:default_login",
          "",
          "[Removed Lines]",
          "60:     \" Disabled by default for security reasons.",
          "61:     if get(g:, 'changelog_exec', get(g:, 'plugin_exec', 0))",
          "",
          "[Added Lines]",
          "60:     \" Disabled by default for security reasons.",
          "61:     if dist#vim#IsSafeExecutable('changelog', 'whoami')",
          "",
          "---------------"
        ],
        "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim": [
          "File: runtime/ftplugin/perl.vim -> runtime/ftplugin/perl.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: \" Set this once, globally.",
          "58: if !exists(\"perlpath\")",
          "60:     \" safety check: don't execute perl binary by default",
          "65:       try",
          "66:  if &shellxquote != '\"'",
          "67:      let perlpath = system('perl -e \"print join(q/,/,@INC)\"')",
          "",
          "[Removed Lines]",
          "59:     let s:tmp_cwd = getcwd()",
          "61:     if executable(\"perl\") && get(g:, 'perl_exec', get(g:, 'plugin_exec', 0))",
          "62:         \\ && (fnamemodify(exepath(\"perl\"), \":p:h\") != s:tmp_cwd",
          "63:         \\ || (index(split($PATH, has(\"win32\") ? ';' : ':'), s:tmp_cwd) != -1",
          "64:         \\ && s:tmp_cwd != '.'))",
          "",
          "[Added Lines]",
          "60:     if dist#vim#IsSafeExecutable('perl', 'perl')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  \" current directory and the directory of the current file.",
          "78:  let perlpath = \".,,\"",
          "79:     endif",
          "81: endif",
          "83: \" Append perlpath to the existing path value, if it is set.  Since we don't",
          "",
          "[Removed Lines]",
          "80:     unlet! s:tmp_cwd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
          "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: \" Safety check: don't execute zig from current directory",
          "43: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
          "47:     silent let s:env = system('zig env')",
          "48:     if v:shell_error == 0",
          "49:         let g:zig_std_dir = json_decode(s:env)['std_dir']",
          "50:     endif",
          "51:     unlet! s:env",
          "52: endif",
          "55: if exists('g:zig_std_dir')",
          "56:     let &l:path = g:zig_std_dir . ',' . &l:path",
          "",
          "[Removed Lines]",
          "44:     \\  executable('zig') && get(g:, 'zig_exec', get(g:, 'plugin_exec', 0))",
          "45:     \\ && (fnamemodify(exepath(\"zig\"), \":p:h\") != s:tmp_cwd",
          "46:     \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "53: unlet! s:tmp_cwd",
          "",
          "[Added Lines]",
          "44:     \\  executable('zig') && dist#vim#IsSafeExecutable('zig', 'zig')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67c951df4c95981c716eeedb1b102d9668549e65",
      "candidate_info": {
        "commit_hash": "67c951df4c95981c716eeedb1b102d9668549e65",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/67c951df4c95981c716eeedb1b102d9668549e65",
        "files": [
          "runtime/autoload/gzip.vim",
          "runtime/autoload/zip.vim",
          "runtime/ftplugin/perl.vim",
          "runtime/ftplugin/ruby.vim",
          "runtime/ftplugin/zig.vim"
        ],
        "message": "runtime(ftplugin): allow to exec if curdir is in PATH\n\nIn case the current directory is present as valid $PATH entry, it is OK\nto call the program from it, even if vim curdir is in that same\ndirectory.\n\n(Without that patch, for instance, you will not be able to open .zip\nfiles while your current directory is /bin)\n\ncloses: #13027\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
          "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
          "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
          "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
          "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
            "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
            "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ],
          "candidate": [
            "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim",
            "runtime/autoload/zip.vim||runtime/autoload/zip.vim",
            "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim",
            "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim",
            "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim"
          ]
        }
      },
      "candidate_diff": {
        "runtime/autoload/gzip.vim||runtime/autoload/gzip.vim": [
          "File: runtime/autoload/gzip.vim -> runtime/autoload/gzip.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')",
          "12:   if !exists(\"s:have_\" . name)",
          "13:     \" safety check, don't execute anything from the current directory",
          "15:     if !f",
          "16:       echoerr \"Warning: NOT executing \" .. name .. \" from current directory!\"",
          "17:     endif",
          "",
          "[Removed Lines]",
          "14:     let f = fnamemodify(exepath(name), \":p:h\") !=# getcwd()",
          "",
          "[Added Lines]",
          "14:     let s:tmp_cwd = getcwd()",
          "15:     let f = (fnamemodify(exepath(name), \":p:h\") !=# s:tmp_cwd",
          "16:           \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "17:     unlet s:tmp_cwd",
          "",
          "---------------"
        ],
        "runtime/autoload/zip.vim||runtime/autoload/zip.vim": [
          "File: runtime/autoload/zip.vim -> runtime/autoload/zip.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  let g:zip_extractcmd= g:zip_unzipcmd",
          "58: endif",
          "61:  echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"",
          "62:  finish",
          "63: endif",
          "64: \" ----------------",
          "65: \"  Functions: {{{1",
          "66: \" ----------------",
          "",
          "[Removed Lines]",
          "60: if fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()",
          "",
          "[Added Lines]",
          "60: let s:tmp_cwd = getcwd()",
          "61: if (fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()",
          "62:           \\ && (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) == -1 || s:tmp_cwd == '.'))",
          "63:  unlet s:tmp_cwd",
          "67: unlet s:tmp_cwd",
          "",
          "---------------"
        ],
        "runtime/ftplugin/perl.vim||runtime/ftplugin/perl.vim": [
          "File: runtime/ftplugin/perl.vim -> runtime/ftplugin/perl.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: \" Set this once, globally.",
          "56: if !exists(\"perlpath\")",
          "57:     \" safety check: don't execute perl from current directory",
          "59:       try",
          "60:  if &shellxquote != '\"'",
          "61:      let perlpath = system('perl -e \"print join(q/,/,@INC)\"')",
          "",
          "[Removed Lines]",
          "58:     if executable(\"perl\") && fnamemodify(exepath(\"perl\"), \":p:h\") != getcwd()",
          "",
          "[Added Lines]",
          "58:     let s:tmp_cwd = getcwd()",
          "59:     if executable(\"perl\") && (fnamemodify(exepath(\"perl\"), \":p:h\") != s:tmp_cwd",
          "60:           \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:  \" current directory and the directory of the current file.",
          "72:  let perlpath = \".,,\"",
          "73:     endif",
          "74: endif",
          "76: \" Append perlpath to the existing path value, if it is set.  Since we don't",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     unlet s:tmp_cwd",
          "",
          "---------------"
        ],
        "runtime/ftplugin/ruby.vim||runtime/ftplugin/ruby.vim": [
          "File: runtime/ftplugin/ruby.vim -> runtime/ftplugin/ruby.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   let cwd = fnameescape(getcwd())",
          "78:   try",
          "79:     exe cd fnameescape(a:root)",
          "81:       let path = []",
          "82:     else",
          "83:       let path = split(system(path_check),',')",
          "84:     endif",
          "85:     exe cd cwd",
          "86:     return path",
          "87:   finally",
          "",
          "[Removed Lines]",
          "80:     if fnamemodify(exepath('ruby'), ':p:h') ==# cwd",
          "",
          "[Added Lines]",
          "80:     let s:tmp_cwd = getcwd()",
          "81:     if (fnamemodify(exepath('ruby'), ':p:h') ==# cwd",
          "82:           \\ && (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) == -1 || s:tmp_cwd == '.'))",
          "87:     unlet s:tmp_cwd",
          "",
          "---------------"
        ],
        "runtime/ftplugin/zig.vim||runtime/ftplugin/zig.vim": [
          "File: runtime/ftplugin/zig.vim -> runtime/ftplugin/zig.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'",
          "42: \" Safety check: don't execute zip from current directory",
          "43: if !exists('g:zig_std_dir') && exists('*json_decode') &&",
          "45:     silent let s:env = system('zig env')",
          "46:     if v:shell_error == 0",
          "47:         let g:zig_std_dir = json_decode(s:env)['std_dir']",
          "48:     endif",
          "49:     unlet! s:env",
          "50: endif",
          "52: if exists('g:zig_std_dir')",
          "53:     let &l:path = &l:path . ',' . g:zig_std_dir",
          "",
          "[Removed Lines]",
          "44:     \\  executable('zig') && fnamemodify(exepath(\"zig\"), \":p:h\") != getcwd()",
          "",
          "[Added Lines]",
          "43: let s:tmp_cwd = getcwd()",
          "45:     \\  executable('zig') && (fnamemodify(exepath(\"zig\"), \":p:h\") != s:tmp_cwd",
          "46:           \\ || (index(split($PATH,has(\"win32\")? ';' : ':'), s:tmp_cwd) != -1 && s:tmp_cwd != '.'))",
          "53: unlet s:tmp_cwd",
          "",
          "---------------"
        ]
      }
    }
  ]
}