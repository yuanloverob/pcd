{
  "cve_id": "CVE-2020-28346",
  "cve_desc": "ACRN through 2.2 has a devicemodel/hw/pci/virtio/virtio.c NULL Pointer Dereference.",
  "repo": "projectacrn/acrn-hypervisor",
  "patch_hash": "ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681",
  "patch_info": {
    "commit_hash": "ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681",
    "repo": "projectacrn/acrn-hypervisor",
    "commit_url": "https://github.com/projectacrn/acrn-hypervisor/pull/5453/commits/ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681",
    "files": [
      "devicemodel/hw/pci/virtio/virtio.c"
    ],
    "message": "dm: virtio: check for paddr_guest2host return value\n\npaddr_guest2host can return NULL, but code paths in virtio\nare not checking the return value.\n_vq_record() initializes iov_base pointer using paddr_guest2host()\nbut there is nothing in the flow that checks for NULL.\nChane _vq_record to return -1 in case the address translation\nhas failed.\n\nTracked-On: #5452\nSigned-off-by: Tomas Winkler <tomas.winkler@intel.com>\nAcked-by: Wang, Yu1 <yu1.wang@intel.com>",
    "before_after_code_files": [
      "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
    ]
  },
  "patch_diff": {
    "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c": [
      "File: devicemodel/hw/pci/virtio/virtio.c -> devicemodel/hw/pci/virtio/virtio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "296:  phys = (uint64_t)pfn << VRING_PAGE_BITS;",
      "297:  size = vring_size(vq->qsize, VIRTIO_PCI_VRING_ALIGN);",
      "298:  vb = paddr_guest2host(base->dev->vmctx, phys, size);",
      "301:  vq->desc = (struct vring_desc *)vb;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "299:  if (!vb)",
      "300:   goto error;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:  mb();",
      "320:  vq->flags = VQ_ALLOC;",
      "321: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "324:  return;",
      "326: error:",
      "327:  vq->flags = 0;",
      "328:  pr_err(\"%s: vq enable failed\\n\", __func__);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "387: _vq_record(int i, volatile struct vring_desc *vd, struct vmctx *ctx,",
      "388:     struct iovec *iov, int n_iov, uint16_t *flags) {",
      "390:  if (i >= n_iov)",
      "393:  iov[i].iov_len = vd->len;",
      "394:  if (flags != NULL)",
      "395:   flags[i] = vd->flags;",
      "396: }",
      "",
      "[Removed Lines]",
      "386: static inline void",
      "391:   return;",
      "392:  iov[i].iov_base = paddr_guest2host(ctx, vd->addr, vd->len);",
      "",
      "[Added Lines]",
      "396: static inline int",
      "400:  void *host_addr;",
      "403:   return -1;",
      "404:  host_addr = paddr_guest2host(ctx, vd->addr, vd->len);",
      "405:  if (!host_addr)",
      "406:   return -1;",
      "407:  iov[i].iov_base = host_addr;",
      "411:  return 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "495:   }",
      "496:   vdir = &vq->desc[next];",
      "497:   if ((vdir->flags & VRING_DESC_F_INDIRECT) == 0) {",
      "499:    i++;",
      "500:   } else if ((base->device_caps &",
      "501:       (1 << VIRTIO_RING_F_INDIRECT_DESC)) == 0) {",
      "",
      "[Removed Lines]",
      "498:    _vq_record(i, vdir, ctx, iov, n_iov, flags);",
      "",
      "[Added Lines]",
      "514:    if (_vq_record(i, vdir, ctx, iov, n_iov, flags)) {",
      "515:     pr_err(\"%s: mapping to host failed\\r\\n\", name);",
      "516:     return -1;",
      "517:    }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "513:    }",
      "514:    vindir = paddr_guest2host(ctx,",
      "515:        vdir->addr, vdir->len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "536:    if (!vindir) {",
      "537:     pr_err(\"%s cannot get host memory\\r\\n\", name);",
      "538:     return -1;",
      "539:    }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "529:          name);",
      "530:      return -1;",
      "531:     }",
      "533:     if (++i > VQ_MAX_DESCRIPTORS)",
      "534:      goto loopy;",
      "535:     if ((vp->flags & VRING_DESC_F_NEXT) == 0)",
      "",
      "[Removed Lines]",
      "532:     _vq_record(i, vp, ctx, iov, n_iov, flags);",
      "",
      "[Added Lines]",
      "556:     if (_vq_record(i, vp, ctx, iov, n_iov, flags)) {",
      "557:      pr_err(\"%s: mapping to host failed\\r\\n\", name);",
      "558:      return -1;",
      "559:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e59a3c92ce9bb46d9a0874476e8b5af5976c1a37",
      "candidate_info": {
        "commit_hash": "e59a3c92ce9bb46d9a0874476e8b5af5976c1a37",
        "repo": "projectacrn/acrn-hypervisor",
        "commit_url": "https://github.com/projectacrn/acrn-hypervisor/commit/e59a3c92ce9bb46d9a0874476e8b5af5976c1a37",
        "files": [
          "devicemodel/hw/pci/virtio/virtio.c"
        ],
        "message": "dm: virtio: check for paddr_guest2host return value\n\npaddr_guest2host can return NULL, but code paths in virtio\nare not checking the return value.\n_vq_record() initializes iov_base pointer using paddr_guest2host()\nbut there is nothing in the flow that checks for NULL.\nChane _vq_record to return -1 in case the address translation\nhas failed.\n\nTracked-On: #5514\nSigned-off-by: Tomas Winkler <tomas.winkler@intel.com>\nAcked-by: Wang, Yu1 <yu1.wang@intel.com>",
        "before_after_code_files": [
          "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
          ],
          "candidate": [
            "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
          ]
        }
      },
      "candidate_diff": {
        "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c": [
          "File: devicemodel/hw/pci/virtio/virtio.c -> devicemodel/hw/pci/virtio/virtio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:  phys = (uint64_t)pfn << VRING_PAGE_BITS;",
          "297:  size = vring_size(vq->qsize, VIRTIO_PCI_VRING_ALIGN);",
          "298:  vb = paddr_guest2host(base->dev->vmctx, phys, size);",
          "301:  vq->desc = (struct vring_desc *)vb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:  if (!vb)",
          "300:   goto error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:  mb();",
          "320:  vq->flags = VQ_ALLOC;",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:  return;",
          "326: error:",
          "327:  vq->flags = 0;",
          "328:  pr_err(\"%s: vq enable failed\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387: _vq_record(int i, volatile struct vring_desc *vd, struct vmctx *ctx,",
          "388:     struct iovec *iov, int n_iov, uint16_t *flags) {",
          "390:  if (i >= n_iov)",
          "393:  iov[i].iov_len = vd->len;",
          "394:  if (flags != NULL)",
          "395:   flags[i] = vd->flags;",
          "396: }",
          "",
          "[Removed Lines]",
          "386: static inline void",
          "391:   return;",
          "392:  iov[i].iov_base = paddr_guest2host(ctx, vd->addr, vd->len);",
          "",
          "[Added Lines]",
          "396: static inline int",
          "400:  void *host_addr;",
          "403:   return -1;",
          "404:  host_addr = paddr_guest2host(ctx, vd->addr, vd->len);",
          "405:  if (!host_addr)",
          "406:   return -1;",
          "407:  iov[i].iov_base = host_addr;",
          "411:  return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:   }",
          "496:   vdir = &vq->desc[next];",
          "497:   if ((vdir->flags & VRING_DESC_F_INDIRECT) == 0) {",
          "499:    i++;",
          "500:   } else if ((base->device_caps &",
          "501:       (1 << VIRTIO_RING_F_INDIRECT_DESC)) == 0) {",
          "",
          "[Removed Lines]",
          "498:    _vq_record(i, vdir, ctx, iov, n_iov, flags);",
          "",
          "[Added Lines]",
          "514:    if (_vq_record(i, vdir, ctx, iov, n_iov, flags)) {",
          "515:     pr_err(\"%s: mapping to host failed\\r\\n\", name);",
          "516:     return -1;",
          "517:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "513:    }",
          "514:    vindir = paddr_guest2host(ctx,",
          "515:        vdir->addr, vdir->len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:    if (!vindir) {",
          "537:     pr_err(\"%s cannot get host memory\\r\\n\", name);",
          "538:     return -1;",
          "539:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:          name);",
          "530:      return -1;",
          "531:     }",
          "533:     if (++i > VQ_MAX_DESCRIPTORS)",
          "534:      goto loopy;",
          "535:     if ((vp->flags & VRING_DESC_F_NEXT) == 0)",
          "",
          "[Removed Lines]",
          "532:     _vq_record(i, vp, ctx, iov, n_iov, flags);",
          "",
          "[Added Lines]",
          "556:     if (_vq_record(i, vp, ctx, iov, n_iov, flags)) {",
          "557:      pr_err(\"%s: mapping to host failed\\r\\n\", name);",
          "558:      return -1;",
          "559:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "188ab4f85b44bca0090be527c1f73e24b980e836",
      "candidate_info": {
        "commit_hash": "188ab4f85b44bca0090be527c1f73e24b980e836",
        "repo": "projectacrn/acrn-hypervisor",
        "commit_url": "https://github.com/projectacrn/acrn-hypervisor/commit/188ab4f85b44bca0090be527c1f73e24b980e836",
        "files": [
          "devicemodel/hw/pci/virtio/virtio.c"
        ],
        "message": "dm: virtio: check for paddr_guest2host return value\n\npaddr_guest2host can return NULL, but code paths in virtio\nare not checking the return value.\n_vq_record() initializes iov_base pointer using paddr_guest2host()\nbut there is nothing in the flow that checks for NULL.\nChane _vq_record to return -1 in case the address translation\nhas failed.\n\nTracked-On: #5452\nSigned-off-by: Tomas Winkler <tomas.winkler@intel.com>\nAcked-by: Wang, Yu1 <yu1.wang@intel.com>",
        "before_after_code_files": [
          "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
          ],
          "candidate": [
            "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c"
          ]
        }
      },
      "candidate_diff": {
        "devicemodel/hw/pci/virtio/virtio.c||devicemodel/hw/pci/virtio/virtio.c": [
          "File: devicemodel/hw/pci/virtio/virtio.c -> devicemodel/hw/pci/virtio/virtio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:  phys = (uint64_t)pfn << VRING_PAGE_BITS;",
          "297:  size = vring_size(vq->qsize, VIRTIO_PCI_VRING_ALIGN);",
          "298:  vb = paddr_guest2host(base->dev->vmctx, phys, size);",
          "301:  vq->desc = (struct vring_desc *)vb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:  if (!vb)",
          "300:   goto error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:  mb();",
          "320:  vq->flags = VQ_ALLOC;",
          "321: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:  return;",
          "326: error:",
          "327:  vq->flags = 0;",
          "328:  pr_err(\"%s: vq enable failed\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387: _vq_record(int i, volatile struct vring_desc *vd, struct vmctx *ctx,",
          "388:     struct iovec *iov, int n_iov, uint16_t *flags) {",
          "390:  if (i >= n_iov)",
          "393:  iov[i].iov_len = vd->len;",
          "394:  if (flags != NULL)",
          "395:   flags[i] = vd->flags;",
          "396: }",
          "",
          "[Removed Lines]",
          "386: static inline void",
          "391:   return;",
          "392:  iov[i].iov_base = paddr_guest2host(ctx, vd->addr, vd->len);",
          "",
          "[Added Lines]",
          "396: static inline int",
          "400:  void *host_addr;",
          "403:   return -1;",
          "404:  host_addr = paddr_guest2host(ctx, vd->addr, vd->len);",
          "405:  if (!host_addr)",
          "406:   return -1;",
          "407:  iov[i].iov_base = host_addr;",
          "411:  return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:   }",
          "496:   vdir = &vq->desc[next];",
          "497:   if ((vdir->flags & VRING_DESC_F_INDIRECT) == 0) {",
          "499:    i++;",
          "500:   } else if ((base->device_caps &",
          "501:       (1 << VIRTIO_RING_F_INDIRECT_DESC)) == 0) {",
          "",
          "[Removed Lines]",
          "498:    _vq_record(i, vdir, ctx, iov, n_iov, flags);",
          "",
          "[Added Lines]",
          "514:    if (_vq_record(i, vdir, ctx, iov, n_iov, flags)) {",
          "515:     pr_err(\"%s: mapping to host failed\\r\\n\", name);",
          "516:     return -1;",
          "517:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "513:    }",
          "514:    vindir = paddr_guest2host(ctx,",
          "515:        vdir->addr, vdir->len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:    if (!vindir) {",
          "537:     pr_err(\"%s cannot get host memory\\r\\n\", name);",
          "538:     return -1;",
          "539:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:          name);",
          "530:      return -1;",
          "531:     }",
          "533:     if (++i > VQ_MAX_DESCRIPTORS)",
          "534:      goto loopy;",
          "535:     if ((vp->flags & VRING_DESC_F_NEXT) == 0)",
          "",
          "[Removed Lines]",
          "532:     _vq_record(i, vp, ctx, iov, n_iov, flags);",
          "",
          "[Added Lines]",
          "556:     if (_vq_record(i, vp, ctx, iov, n_iov, flags)) {",
          "557:      pr_err(\"%s: mapping to host failed\\r\\n\", name);",
          "558:      return -1;",
          "559:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}