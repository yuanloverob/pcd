{
  "cve_id": "CVE-2021-33035",
  "cve_desc": "Apache OpenOffice opens dBase/DBF documents and shows the contents as spreadsheets. DBF are database files with data organized in fields. When reading DBF data the size of certain fields is not checked: the data is just copied into local variables. A carefully crafted document could overflow the allocated space, leading to the execution of arbitrary code by altering the contents of the program stack. This issue affects Apache OpenOffice up to and including version 4.1.10",
  "repo": "apache/openoffice",
  "patch_hash": "efddaef0151af3be16078cc4d88c6bae0f911e56",
  "patch_info": {
    "commit_hash": "efddaef0151af3be16078cc4d88c6bae0f911e56",
    "repo": "apache/openoffice",
    "commit_url": "https://github.com/apache/openoffice/commit/efddaef0151af3be16078cc4d88c6bae0f911e56#diff-ea66e734dd358922aba12ad4ba39c96bdc6cbde587d07dbc63d04daa0a30e90f",
    "files": [
      "main/connectivity/source/drivers/dbase/DTable.cxx"
    ],
    "message": "add useful checks",
    "before_after_code_files": [
      "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
    ]
  },
  "patch_diff": {
    "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx": [
      "File: main/connectivity/source/drivers/dbase/DTable.cxx -> main/connectivity/source/drivers/dbase/DTable.cxx",
      "--- Hunk 1 ---",
      "[Context before]",
      "896:         else if ( DataType::TIMESTAMP == nType )",
      "897:         {",
      "898:             sal_Int32 nDate = 0,nTime = 0;",
      "899:    memcpy(&nDate, pData, 4);",
      "900:             memcpy(&nTime, pData+ 4, 4);",
      "901:             if ( !nDate && !nTime )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "899:             OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
      "900:             if (nLen != 8) {",
      "901:                 return false;",
      "902:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "911:         }",
      "912:         else if ( DataType::INTEGER == nType )",
      "913:         {",
      "914:             sal_Int32 nValue = 0;",
      "915:    memcpy(&nValue, pData, nLen);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "918:             OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
      "919:             if (nLen != 4) {",
      "920:                 return false;",
      "921:             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "918:         else if ( DataType::DOUBLE == nType )",
      "919:         {",
      "920:             double d = 0.0;",
      "921:             if (getBOOL((*aIter)->getPropertyValue(OMetaConnection::getPropMap().getNameByIndex(PROPERTY_ID_ISCURRENCY)))) // Currency wird gesondert behandelt",
      "922:             {",
      "923:                 sal_Int64 nValue = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "929:             OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
      "930:             if (nLen != 8) {",
      "931:                 return false;",
      "932:             }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "959:    {",
      "960:     case DataType::DATE:",
      "961:     {",
      "962:      if (aStr.Len() != nLen)",
      "963:      {",
      "964:       (_rRow->get())[i]->setNull();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "974:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
      "975:                     if (nLen != 8) {",
      "976:                         return false;",
      "977:                     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "978:     break;",
      "979:     case DataType::BIT:",
      "980:     {",
      "981:      sal_Bool b;",
      "982:      switch (* ((const char *)pData))",
      "983:      {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "997:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
      "998:                     if (nLen != 1) {",
      "999:                         return false;",
      "1000:                     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1873:    {",
      "1874:                 case DataType::TIMESTAMP:",
      "1875:                     {",
      "1876:                         sal_Int32 nJulianDate = 0, nJulianTime = 0;",
      "1877:                         lcl_CalcJulDate(nJulianDate,nJulianTime,rRow.get()[nPos]->getValue());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1896:                         OSL_ENSURE(nLen == 8, \"Invalid length for timestamp field\");",
      "1897:                         if (nLen != 8) {",
      "1898:                             bHadError = true;",
      "1899:                             break;",
      "1900:                         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1882:                     break;",
      "1883:     case DataType::DATE:",
      "1884:     {",
      "1885:      ::com::sun::star::util::Date aDate;",
      "1886:      if(rRow.get()[nPos]->getValue().getTypeKind() == DataType::DOUBLE)",
      "1887:       aDate = ::dbtools::DBTypeConversion::toDate(rRow.get()[nPos]->getValue().getDouble());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1910:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
      "1911:                     if (nLen != 8) {",
      "1912:                         bHadError = true;",
      "1913:                         break;",
      "1914:                     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1900:     } break;",
      "1901:                 case DataType::INTEGER:",
      "1902:                     {",
      "1903:                         sal_Int32 nValue = rRow.get()[nPos]->getValue();",
      "1904:                         memcpy(pData,&nValue,nLen);",
      "1905:                     }",
      "1906:                     break;",
      "1907:                 case DataType::DOUBLE:",
      "1908:                     {",
      "1909:                         const double d = rRow.get()[nPos]->getValue();",
      "1910:                         m_pColumns->getByIndex(i) >>= xCol;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1933:                         OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
      "1934:                         if (nLen != 4) {",
      "1935:                             bHadError = true;",
      "1936:                             break;",
      "1937:                         }",
      "1944:                         OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
      "1945:                         if (nLen != 8) {",
      "1946:                             bHadError = true;",
      "1947:                             break;",
      "1948:                         }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1958:      }",
      "1959:     } break;",
      "1960:     case DataType::BIT:",
      "1962:      break;",
      "1963:                 case DataType::LONGVARBINARY:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2001:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
      "2002:                     if (nLen != 1) {",
      "2003:                         bHadError = true;",
      "2004:                         break;",
      "2005:                     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0986a24c272c007505815565adb1f85383d1cf2f",
      "candidate_info": {
        "commit_hash": "0986a24c272c007505815565adb1f85383d1cf2f",
        "repo": "apache/openoffice",
        "commit_url": "https://github.com/apache/openoffice/commit/0986a24c272c007505815565adb1f85383d1cf2f",
        "files": [
          "ext_libraries/serf/makefile.mk",
          "main/configure.ac"
        ],
        "message": "Rely on pkg-config for openssl on macOS too",
        "before_after_code_files": [
          "ext_libraries/serf/makefile.mk||ext_libraries/serf/makefile.mk",
          "main/configure.ac||main/configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/openoffice/pull/366"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext_libraries/serf/makefile.mk||ext_libraries/serf/makefile.mk": [
          "File: ext_libraries/serf/makefile.mk -> ext_libraries/serf/makefile.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: CONFIGURE_DIR=",
          "86: CONFIGURE_ACTION=autoconf && .$/configure",
          "89: .IF \"$(SYSTEM_OPENSSL)\"==\"YES\"",
          "90: CDEFS+=$(OPENSSL_CFLAGS)",
          "91: .ELSE",
          "92: OPENSSLINCDIR=external",
          "93: CDEFS+=-I$(SOLARINCDIR)$/$(OPENSSLINCDIR)",
          "94: .ENDIF",
          "97: # On Linux/Mac we need the content of CDEFS in CFLAGS so that the ssl headers are searched for",
          "99: # in a directory that corresponds to the directory that is searched for the ssl library.",
          "100: CONFIGURE_FLAGS='CFLAGS=$(CDEFS)'",
          "101: .ENDIF",
          "",
          "[Removed Lines]",
          "88: .IF \"$(OS)\"==\"LINUX\"",
          "95: .ENDIF",
          "98: .IF \"$(OS)\"==\"MACOSX\" || \"$(OS)\"==\"LINUX\"",
          "",
          "[Added Lines]",
          "88: .IF \"$(OS)\"==\"MACOSX\" || \"$(OS)\"==\"LINUX\"",
          "",
          "---------------"
        ],
        "main/configure.ac||main/configure.ac": [
          "File: main/configure.ac -> main/configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "5018: if test -n \"$with_system_openssl\" -o -n \"$with_system_libs\" && \\",
          "5019:         test \"$with_system_openssl\" != \"no\"; then",
          "5020:     AC_MSG_RESULT([external])",
          "5024:         OPENSSL_CFLAGS=",
          "5025:         OPENSSL_LIBS=\"-lssl -lcrypto\"",
          "5026:     else",
          "",
          "[Removed Lines]",
          "5021:     # Mac OS builds should get out without extra stuff is the Mac porters'",
          "5022:     # wish. And pkg-config is although Xcode ships a .pc for openssl",
          "5023:     if test \"$_os\" = \"Darwin\" -o \"$_os\" = \"FreeBSD\"; then",
          "",
          "[Added Lines]",
          "5021:     if test \"$_os\" = \"FreeBSD\"; then",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2200ed4b753a121eed3bf8f6623ed27453f800a1",
      "candidate_info": {
        "commit_hash": "2200ed4b753a121eed3bf8f6623ed27453f800a1",
        "repo": "apache/openoffice",
        "commit_url": "https://github.com/apache/openoffice/commit/2200ed4b753a121eed3bf8f6623ed27453f800a1",
        "files": [
          "main/xmlsecurity/source/helper/xsecverify.cxx"
        ],
        "message": "Revert \"Fix regression\"\n\nThis reverts commit 8167b394bd75b0ba1462b5f1ed80a6d339d0f4ec.",
        "before_after_code_files": [
          "main/xmlsecurity/source/helper/xsecverify.cxx||main/xmlsecurity/source/helper/xsecverify.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/openoffice/pull/366"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/xmlsecurity/source/helper/xsecverify.cxx||main/xmlsecurity/source/helper/xsecverify.cxx": [
          "File: main/xmlsecurity/source/helper/xsecverify.cxx -> main/xmlsecurity/source/helper/xsecverify.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "220: {",
          "221:  InternalSignatureInformation &isi = m_vInternalSignatureInformations[m_vInternalSignatureInformations.size()-1];",
          "222:  convertDateTime( isi.signatureInfor.stDateTime, ouDate );",
          "225:  setIfEmpty(isi.signatureInfor.ouDateTime, ouDate);",
          "227: }",
          "",
          "[Removed Lines]",
          "223:  isi.signatureInfor.ouDateTime = ouDate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9612238d944fe6e95fefdcba391f700257594809",
      "candidate_info": {
        "commit_hash": "9612238d944fe6e95fefdcba391f700257594809",
        "repo": "apache/openoffice",
        "commit_url": "https://github.com/apache/openoffice/commit/9612238d944fe6e95fefdcba391f700257594809",
        "files": [
          "main/extensions.lst"
        ],
        "message": "Updated English dictionary",
        "before_after_code_files": [
          "main/extensions.lst||main/extensions.lst"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/openoffice/pull/366"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/extensions.lst||main/extensions.lst": [
          "File: main/extensions.lst -> main/extensions.lst",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: # English dictionary",
          "41: [ language=en.* || language=de || language=it ]",
          "44: # English (USA, en_US) dictionary",
          "45: [ language==nl || language==ru ]",
          "",
          "[Removed Lines]",
          "42:     08edcbbddc098f84e9995a8ff76235f6 https://sourceforge.net/projects/aoo-extensions/files/17102/68/dict-en-20210801.oxt/download \"dict-en.oxt\"",
          "",
          "[Added Lines]",
          "42:     3730ea9696aab7900606d650e8000562 https://sourceforge.net/projects/aoo-extensions/files/17102/69/dict-en-20210901.oxt/download \"dict-en.oxt\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5a898d6dbe995add5ad8aba03c04adfff4586cd",
      "candidate_info": {
        "commit_hash": "a5a898d6dbe995add5ad8aba03c04adfff4586cd",
        "repo": "apache/openoffice",
        "commit_url": "https://github.com/apache/openoffice/commit/a5a898d6dbe995add5ad8aba03c04adfff4586cd",
        "files": [
          "main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src"
        ],
        "message": "Make dialog wider",
        "before_after_code_files": [
          "main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src||main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/openoffice/pull/366"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src||main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src": [
          "File: main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src -> main/xmlsecurity/source/dialogs/digitalsignaturesdialog.src",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: ModalDialog RID_XMLSECDLG_DIGSIG",
          "29: {",
          "30:  HelpId = HID_XMLSEC_DLG_DIGSIG ;",
          "32:  OutputSize = TRUE ;",
          "33:  Closeable = TRUE ;",
          "34:  Moveable = TRUE ;",
          "",
          "[Removed Lines]",
          "31:  Size = MAP_APPFONT ( 234, 191 ) ;",
          "",
          "[Added Lines]",
          "31:  Size = MAP_APPFONT ( 249, 191 ) ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  {",
          "62:   HelpId = HID_XMLSEC_CTRL_SIGNATURESDLG ;",
          "63:   Pos = MAP_APPFONT ( 6, 14 ) ;",
          "65:   SVLook = TRUE ;",
          "66:   Border = TRUE ;",
          "67:  };",
          "",
          "[Removed Lines]",
          "64:   Size = MAP_APPFONT ( 222, 109 ) ;",
          "",
          "[Added Lines]",
          "64:   Size = MAP_APPFONT ( 237, 109 ) ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:  {",
          "141:   HelpID = \"xmlsecurity:PushButton:RID_XMLSECDLG_DIGSIG:BTN_VIEWCERT\" ;",
          "142:   Pos = MAP_APPFONT ( 6, 142 ) ;",
          "144:   Text [ en-US ] = \"View Certificate...\" ;",
          "145:  };",
          "146:  PushButton BTN_ADDCERT",
          "147:  {",
          "148:   HelpID = \"xmlsecurity:PushButton:RID_XMLSECDLG_DIGSIG:BTN_ADDCERT\" ;",
          "151:   Text [ en-US ] = \"Sign Document...\" ;",
          "152:  };",
          "153:  PushButton BTN_REMOVECERT",
          "154:  {",
          "155:   HelpID = \"xmlsecurity:PushButton:RID_XMLSECDLG_DIGSIG:BTN_REMOVECERT\" ;",
          "158:   Text [ en-US ] = \"Remove\" ;",
          "159:  };",
          "160:  FixedLine FL_BOTTOM_SEP",
          "161:  {",
          "162:   Pos = MAP_APPFONT ( 0, 160 ) ;",
          "164:  };",
          "165:  OKButton BTN_OK",
          "166:  {",
          "167:   DefButton = TRUE;",
          "169:   Size = MAP_APPFONT ( 50, 14 ) ;",
          "170:   Text [ en-US ] = \"Close\" ;",
          "171:  };",
          "",
          "[Removed Lines]",
          "143:   Size = MAP_APPFONT ( 70, 14 ) ;",
          "149:   Pos = MAP_APPFONT ( 82, 142 ) ;",
          "150:   Size = MAP_APPFONT ( 70, 14 ) ;",
          "156:   Pos = MAP_APPFONT ( 158, 142 ) ;",
          "157:   Size = MAP_APPFONT ( 70, 14 ) ;",
          "163:   Size = MAP_APPFONT ( 234, 8 ) ;",
          "168:   Pos = MAP_APPFONT ( 178, 171 ) ;",
          "",
          "[Added Lines]",
          "143:   Size = MAP_APPFONT ( 75, 14 ) ;",
          "149:   Pos = MAP_APPFONT ( 87, 142 ) ;",
          "150:   Size = MAP_APPFONT ( 75, 14 ) ;",
          "156:   Pos = MAP_APPFONT ( 168, 142 ) ;",
          "157:   Size = MAP_APPFONT ( 75, 14 ) ;",
          "163:   Size = MAP_APPFONT ( 249, 8 ) ;",
          "168:   Pos = MAP_APPFONT ( 193, 171 ) ;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193: {",
          "194:  Buttons = WB_OK ;",
          "195:  DefButton = WB_DEF_OK ;",
          "198: };",
          "",
          "[Removed Lines]",
          "196:  Message [ en-US ] = \"This document contains signatures in ODF 1.1 format. Signing documents in %PRODUCTNAME %PRODUCTVERSION requires ODF 1.2 format version. \"",
          "197:   \"Thus no signatures can be added or removed to this document.\\n\\nSave document in ODF 1.2 format and add all desired signatures again.\" ;",
          "",
          "[Added Lines]",
          "196:  Message [ en-US ] = \"This document contains signatures in ODF 1.1 format. Signing documents in %PRODUCTNAME %PRODUCTVERSION requires ODF 1.2 format version. Thus no signatures can be added or removed to this document.\\n\\nSave document in ODF 1.2 format and add all desired signatures again.\" ;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89f78bf2f1627bd77c8f4bfb01a7f46c6f6a13ad",
      "candidate_info": {
        "commit_hash": "89f78bf2f1627bd77c8f4bfb01a7f46c6f6a13ad",
        "repo": "apache/openoffice",
        "commit_url": "https://github.com/apache/openoffice/commit/89f78bf2f1627bd77c8f4bfb01a7f46c6f6a13ad",
        "files": [
          "main/connectivity/source/drivers/dbase/DTable.cxx"
        ],
        "message": "Allow more data than necessary\n\nAlso translate some comments from German",
        "before_after_code_files": [
          "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
          ],
          "candidate": [
            "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx"
          ]
        }
      },
      "candidate_diff": {
        "main/connectivity/source/drivers/dbase/DTable.cxx||main/connectivity/source/drivers/dbase/DTable.cxx": [
          "File: main/connectivity/source/drivers/dbase/DTable.cxx -> main/connectivity/source/drivers/dbase/DTable.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:         {",
          "898:             sal_Int32 nDate = 0,nTime = 0;",
          "899:             OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
          "902:             }",
          "905:             if ( !nDate && !nTime )",
          "906:             {",
          "907:                 (_rRow->get())[i]->setNull();",
          "",
          "[Removed Lines]",
          "900:             if (nLen != 8) {",
          "901:                 return false;",
          "903:    memcpy(&nDate, pData, 4);",
          "904:             memcpy(&nTime, pData+ 4, 4);",
          "",
          "[Added Lines]",
          "900:             if (nLen >= 8) {",
          "901:                 memcpy(&nDate, pData, 4);",
          "902:                 memcpy(&nTime, pData+ 4, 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "916:         else if ( DataType::INTEGER == nType )",
          "917:         {",
          "918:             OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");",
          "921:             }",
          "925:         }",
          "926:         else if ( DataType::DOUBLE == nType )",
          "927:         {",
          "928:             double d = 0.0;",
          "929:             OSL_ENSURE(nLen == 8, \"Invalid length for double field\");",
          "940:                 else",
          "949:         }",
          "950:   else",
          "951:   {",
          "953:    for (sal_Int32 k = 0; k < nLen; k++)",
          "954:    {",
          "955:     if (pData[k] == '\\0')",
          "956:      pData[k] = ' ';",
          "957:    }",
          "960:    aStr.EraseLeadingChars();",
          "961:    aStr.EraseTrailingChars();",
          "963:    if (!aStr.Len())",
          "964:    {",
          "965:     nByteOffset += nLen;",
          "967:     continue;",
          "968:    }",
          "",
          "[Removed Lines]",
          "919:             if (nLen != 4) {",
          "920:                 return false;",
          "922:             sal_Int32 nValue = 0;",
          "923:    memcpy(&nValue, pData, nLen);",
          "930:             if (nLen != 8) {",
          "931:                 return false;",
          "932:             }",
          "933:             if (getBOOL((*aIter)->getPropertyValue(OMetaConnection::getPropMap().getNameByIndex(PROPERTY_ID_ISCURRENCY)))) // Currency wird gesondert behandelt",
          "934:             {",
          "935:                 sal_Int64 nValue = 0;",
          "936:        memcpy(&nValue, pData, nLen);",
          "938:                 if ( m_aScales[i-1] )",
          "939:                     d = (double)(nValue / pow(10.0,(int)m_aScales[i-1]));",
          "941:                     d = (double)(nValue);",
          "942:             }",
          "943:             else",
          "944:             {",
          "945:                 memcpy(&d, pData, nLen);",
          "946:             }",
          "959:    String aStr(pData, (xub_StrLen)nLen,m_eEncoding);  // Spaces am Anfang und am Ende entfernen:",
          "966:     (_rRow->get())[i]->setNull(); // keine Werte -> fertig",
          "",
          "[Added Lines]",
          "918:             if (nLen >= 4) {",
          "919:                 sal_Int32 nValue = 0;",
          "920:                 memcpy(&nValue, pData, 4);",
          "922:             } else {",
          "923:                 (_rRow->get())[i]->setNull();",
          "930:             if (nLen >= 8) {",
          "931:                 if (getBOOL((*aIter)->getPropertyValue(OMetaConnection::getPropMap().getNameByIndex(PROPERTY_ID_ISCURRENCY)))) // Currency needs special treatment",
          "932:                     {",
          "933:                         sal_Int64 nValue = 0;",
          "934:                         memcpy(&nValue, pData, nLen);",
          "936:                         if ( m_aScales[i-1] )",
          "937:                             d = (double)(nValue / pow(10.0,(int)m_aScales[i-1]));",
          "938:                         else",
          "939:                             d = (double)(nValue);",
          "940:                     }",
          "942:                     {",
          "943:                         memcpy(&d, pData, nLen);",
          "944:                     }",
          "947:             } else {",
          "948:                 (_rRow->get())[i]->setNull();",
          "949:             }",
          "960:    String aStr(pData, (xub_StrLen)nLen,m_eEncoding);  // Strip spaces from beginning and end",
          "967:     (_rRow->get())[i]->setNull(); // no value -> we are done",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "972:     case DataType::DATE:",
          "973:     {",
          "974:                     OSL_ENSURE(nLen == 8, \"Invalid length for date field\");",
          "980:       (_rRow->get())[i]->setNull();",
          "981:       break;",
          "982:      }",
          "",
          "[Removed Lines]",
          "975:                     if (nLen != 8) {",
          "976:                         return false;",
          "977:                     }",
          "978:      if (aStr.Len() != nLen)",
          "979:      {",
          "",
          "[Added Lines]",
          "976:      if ((nLen < 8) || (aStr.Len() != nLen)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "995:     case DataType::BIT:",
          "996:     {",
          "997:                     OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");",
          "1000:                     }",
          "1001:      sal_Bool b;",
          "1002:      switch (* ((const char *)pData))",
          "",
          "[Removed Lines]",
          "998:                     if (nLen != 1) {",
          "999:                         return false;",
          "",
          "[Added Lines]",
          "995:                     if (nLen < 1) {",
          "996:       (_rRow->get())[i]->setNull();",
          "997:       break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1024:       (_rRow->get())[i]->setNull();",
          "1025:     } break;",
          "1026:     default:",
          "1028:    }",
          "1029:    (_rRow->get())[i]->setTypeKind(nType);",
          "1030:   }",
          "",
          "[Removed Lines]",
          "1027:      OSL_ASSERT(\"Falscher Type\");",
          "",
          "[Added Lines]",
          "1025:      OSL_ASSERT(\"Wrong type\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}