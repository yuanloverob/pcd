{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af57832e634720a797a54973a85d15ac3e13cf60",
      "candidate_info": {
        "commit_hash": "af57832e634720a797a54973a85d15ac3e13cf60",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/af57832e634720a797a54973a85d15ac3e13cf60",
        "files": [
          "Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c"
        ],
        "message": "[3.13] gh-117398: Add multiphase support to _datetime (gh-119694)\n\nThis is an unrevert of d58ebf0 (gh-119636), which was reverted by 9216a53 (gh-119639) due to problems which have been resolved.\n\nThis is minimal support for multiphase init. Subinterpreters are not supported yet. That will be addressed in a later change.\n\n(cherry picked from commit 3e8b609)\n\nCo-authored-by: Erlend E. Aasland erlend@python.org",
        "before_after_code_files": [
          "Lib/test/datetimetester.py||Lib/test/datetimetester.py",
          "Modules/_datetimemodule.c||Modules/_datetimemodule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/datetimetester.py||Lib/test/datetimetester.py": [
          "File: Lib/test/datetimetester.py -> Lib/test/datetimetester.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     pass",
          "48: #",
          "50: pickle_loads = {pickle.loads, pickle._loads}",
          "52: pickle_choices = [(pickle, pickle, proto)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: # This is copied from test_import/__init__.py.",
          "51: def no_rerun(reason):",
          "52:     \"\"\"Skip rerunning for a particular test.",
          "54:     WARNING: Use this decorator with care; skipping rerunning makes it",
          "55:     impossible to find reference leaks. Provide a clear reason for skipping the",
          "56:     test using the 'reason' parameter.",
          "57:     \"\"\"",
          "58:     def deco(func):",
          "59:         _has_run = False",
          "60:         def wrapper(self):",
          "61:             nonlocal _has_run",
          "62:             if _has_run:",
          "63:                 self.skipTest(reason)",
          "64:             func(self)",
          "65:             _has_run = True",
          "66:         return wrapper",
          "67:     return deco",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6385: @unittest.skipIf(_testcapi is None, 'need _testcapi module')",
          "6386: class CapiTest(unittest.TestCase):",
          "6387:     def setUp(self):",
          "6388:         # Since the C API is not present in the _Pure tests, skip all tests",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6405: @no_rerun(\"the encapsulated datetime C API does not support reloading\")",
          "",
          "---------------"
        ],
        "Modules/_datetimemodule.c||Modules/_datetimemodule.c": [
          "File: Modules/_datetimemodule.c -> Modules/_datetimemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7048: }",
          "7049: #undef DATETIME_ADD_MACRO",
          "7052:     .m_base = PyModuleDef_HEAD_INIT,",
          "7053:     .m_name = \"_datetime\",",
          "7054:     .m_doc = \"Fast implementation of the datetime type.\",",
          "7056:     .m_methods = module_methods,",
          "7057: };",
          "7059: PyMODINIT_FUNC",
          "7060: PyInit__datetime(void)",
          "7061: {",
          "7075: }",
          "",
          "[Removed Lines]",
          "7051: static struct PyModuleDef datetimemodule = {",
          "7055:     .m_size = -1,",
          "7062:     PyObject *mod = PyModule_Create(&datetimemodule);",
          "7063:     if (mod == NULL)",
          "7064:         return NULL;",
          "7065: #ifdef Py_GIL_DISABLED",
          "7066:     PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED);",
          "7067: #endif",
          "7069:     if (_datetime_exec(mod) < 0) {",
          "7070:         Py_DECREF(mod);",
          "7071:         return NULL;",
          "7072:     }",
          "7074:     return mod;",
          "",
          "[Added Lines]",
          "7051: static PyModuleDef_Slot module_slots[] = {",
          "7052:     {Py_mod_exec, _datetime_exec},",
          "7053:     {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},",
          "7054:     {Py_mod_gil, Py_MOD_GIL_NOT_USED},",
          "7055:     {0, NULL},",
          "7056: };",
          "7058: static PyModuleDef datetimemodule = {",
          "7062:     .m_size = 0,",
          "7064:     .m_slots = module_slots,",
          "7070:     return PyModuleDef_Init(&datetimemodule);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f028451d95d5a8bda0ca1726b05c87a2caace025",
      "candidate_info": {
        "commit_hash": "f028451d95d5a8bda0ca1726b05c87a2caace025",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f028451d95d5a8bda0ca1726b05c87a2caace025",
        "files": [
          "Lib/site.py"
        ],
        "message": "[3.13] gh-119102: Fix REPL for dumb terminal (GH-119269) (#119308)\n\ngh-119102: Fix REPL for dumb terminal (GH-119269)\n\nUse CAN_USE_PYREPL of _pyrepl.__main__ in the site module to decide\nif _pyrepl.write_history_file() can be used.\n(cherry picked from commit 73f4a58d36b65ec650e8f00b2affc4a4d3195f0c)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/site.py||Lib/site.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/site.py||Lib/site.py": [
          "File: Lib/site.py -> Lib/site.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:             pass",
          "525:         def write_history():",
          "526:             try:",
          "528:                     readline.write_history_file(history)",
          "529:                 else:",
          "530:                     _pyrepl.readline.write_history_file(history)",
          "",
          "[Removed Lines]",
          "527:                 if os.getenv(\"PYTHON_BASIC_REPL\"):",
          "",
          "[Added Lines]",
          "526:             from _pyrepl.__main__ import CAN_USE_PYREPL",
          "528:                 if os.getenv(\"PYTHON_BASIC_REPL\") or not CAN_USE_PYREPL:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82777cd024331598dd87b45a00f9dd71437b93fa",
      "candidate_info": {
        "commit_hash": "82777cd024331598dd87b45a00f9dd71437b93fa",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/82777cd024331598dd87b45a00f9dd71437b93fa",
        "files": [
          "Include/py_curses.h",
          "Misc/NEWS.d/next/Build/2024-06-02-13-23-26.gh-issue-113565.8xBlId.rst",
          "Modules/_curses_panel.c",
          "Modules/_cursesmodule.c",
          "configure",
          "configure.ac",
          "pyconfig.h.in"
        ],
        "message": "[3.13] gh-113565: Improve and harden detection of curses dependencies (GH-119816) (#121202)\n\n1. Use pkg-config to check for ncursesw/panelw. If that fails, use\n   pkg-config to check for ncurses/panel.\n2. Regardless of pkg-config output, search for curses/panel headers, so\n   we're sure we have all defines in pyconfig.h.\n3. Regardless of pkg-config output, check if libncurses or libncursesw\n   contains the 'initscr' symbol; if it does _and_ pkg-config failed\n   earlier, add the resulting -llib linker option to CURSES_LIBS.\n   Ditto for 'update_panels' and PANEL_LIBS.\n4. Wrap the rest of the checks with WITH_SAVE_ENV and make sure we're\n   using updated LIBS and CPPFLAGS for those.\n\nAdd the PY_CHECK_CURSES convenience macro.\n(cherry picked from commit f80376b129ad947263a6b03a6c3a874e9f8706e6)\n\nCo-authored-by: Erlend E. Aasland <erlend@python.org>",
        "before_after_code_files": [
          "Include/py_curses.h||Include/py_curses.h",
          "Modules/_curses_panel.c||Modules/_curses_panel.c",
          "Modules/_cursesmodule.c||Modules/_cursesmodule.c",
          "configure.ac||configure.ac",
          "pyconfig.h.in||pyconfig.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/py_curses.h||Include/py_curses.h": [
          "File: Include/py_curses.h -> Include/py_curses.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define NCURSES_OPAQUE 0",
          "37: #endif",
          "43: #endif",
          "48: #if !defined(WINDOW_HAS_FLAGS) && \\",
          "",
          "[Removed Lines]",
          "39: #ifdef HAVE_NCURSES_H",
          "40: #include <ncurses.h>",
          "41: #else",
          "42: #include <curses.h>",
          "45: #ifdef HAVE_NCURSES_H",
          "",
          "[Added Lines]",
          "39: #if defined(HAVE_NCURSESW_NCURSES_H)",
          "40: #  include <ncursesw/ncurses.h>",
          "41: #elif defined(HAVE_NCURSESW_CURSES_H)",
          "42: #  include <ncursesw/curses.h>",
          "43: #elif defined(HAVE_NCURSES_NCURSES_H)",
          "44: #  include <ncurses/ncurses.h>",
          "45: #elif defined(HAVE_NCURSES_CURSES_H)",
          "46: #  include <ncurses/curses.h>",
          "47: #elif defined(HAVE_NCURSES_H)",
          "48: #  include <ncurses.h>",
          "49: #elif defined(HAVE_CURSES_H)",
          "50: #  include <curses.h>",
          "53: #ifdef NCURSES_VERSION",
          "",
          "---------------"
        ],
        "Modules/_curses_panel.c||Modules/_curses_panel.c": [
          "File: Modules/_curses_panel.c -> Modules/_curses_panel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"py_curses.h\"",
          "24: typedef struct {",
          "25:     PyObject *PyCursesError;",
          "",
          "[Removed Lines]",
          "22: #include <panel.h>",
          "",
          "[Added Lines]",
          "22: #if defined(HAVE_NCURSESW_PANEL_H)",
          "23: #  include <ncursesw/panel.h>",
          "24: #elif defined(HAVE_NCURSES_PANEL_H)",
          "25: #  include <ncurses/panel.h>",
          "26: #elif defined(HAVE_PANEL_H)",
          "27: #  include <panel.h>",
          "28: #endif",
          "",
          "---------------"
        ],
        "Modules/_cursesmodule.c||Modules/_cursesmodule.c": [
          "File: Modules/_cursesmodule.c -> Modules/_cursesmodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: #include <langinfo.h>",
          "129: #endif",
          "134: #endif",
          "",
          "[Removed Lines]",
          "131: #if !defined(HAVE_NCURSES_H) && (defined(sgi) || defined(__sun) || defined(SCO5))",
          "",
          "[Added Lines]",
          "131: #if !defined(NCURSES_VERSION) && (defined(sgi) || defined(__sun) || defined(SCO5))",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "6653:   [Define if year with century should be normalized for strftime.])",
          "6654: fi",
          "6657: dnl NOTE: old curses is not detected.",
          "6660: have_curses=no",
          "6661: have_panel=no",
          "6700: dnl remove _XOPEN_SOURCE macro from curses cflags. pyconfig.h sets",
          "6701: dnl the macro to 700.",
          "6702: CURSES_CFLAGS=$(echo $CURSES_CFLAGS | sed 's/-D_XOPEN_SOURCE=600//g')",
          "6705:   dnl On macOS, there is no separate /usr/lib/libncursesw nor libpanelw.",
          "6706:   dnl System-supplied ncurses combines libncurses/libpanel and supports wide",
          "6707:   dnl characters, so we can use it like ncursesw.",
          "",
          "[Removed Lines]",
          "6656: dnl check for ncurses/ncursesw and panel/panelw",
          "6658: dnl have_curses=[no, ncursesw, ncurses]",
          "6659: dnl have_panel=[no, panelw, panel]",
          "6663: AH_TEMPLATE([HAVE_NCURSESW], [Define to 1 if you have the `ncursesw' library.])",
          "6664: AC_CHECK_HEADERS([curses.h ncurses.h])",
          "6666: AS_VAR_IF([ac_cv_header_ncurses_h], [yes], [",
          "6667:   if test \"$ac_sys_system\" != \"Darwin\"; then",
          "6668:     dnl On macOS, there is no separate /usr/lib/libncursesw nor libpanelw.",
          "6669:     PKG_CHECK_MODULES([CURSES], [ncursesw], [",
          "6670:       AC_DEFINE([HAVE_NCURSESW], [1])",
          "6671:       have_curses=ncursesw",
          "6672:     ], [",
          "6673:       WITH_SAVE_ENV([",
          "6674:         AC_CHECK_LIB([ncursesw], [initscr], [",
          "6675:           AC_DEFINE([HAVE_NCURSESW], [1])",
          "6676:           have_curses=ncursesw",
          "6677:           CURSES_CFLAGS=${CURSES_CFLAGS-\"\"}",
          "6678:           CURSES_LIBS=${CURSES_LIBS-\"-lncursesw\"}",
          "6679:         ])",
          "6680:       ])",
          "6681:     ])",
          "6682:   fi",
          "6684:   AS_VAR_IF([have_curses], [no], [",
          "6685:     PKG_CHECK_MODULES([CURSES], [ncurses], [",
          "6686:       have_curses=ncurses",
          "6687:     ], [",
          "6688:       WITH_SAVE_ENV([",
          "6689:         AC_CHECK_LIB([ncurses], [initscr], [",
          "6690:           have_curses=ncurses",
          "6691:           CURSES_CFLAGS=${CURSES_CFLAGS-\"\"}",
          "6692:           CURSES_LIBS=${CURSES_LIBS-\"-lncurses\"}",
          "6693:         ])",
          "6694:       ])",
          "6695:     ])",
          "6696:   ])",
          "6698: ])dnl ac_cv_header_ncurses_h = yes",
          "6704: if test \"$have_curses\" != no -a \"$ac_sys_system\" = \"Darwin\"; then",
          "",
          "[Added Lines]",
          "6656: dnl check for ncursesw/ncurses and panelw/panel",
          "6658: dnl have_curses=[no, yes]",
          "6659: dnl have_panel=[no, yes]",
          "6663: dnl PY_CHECK_CURSES(LIBCURSES, LIBPANEL)",
          "6664: dnl Sets 'have_curses' and 'have_panel'.",
          "6665: dnl For the PKG_CHECK_MODULES() calls, we can safely reuse the first variable",
          "6666: dnl here, since we're only calling the macro a second time if the first call",
          "6667: dnl fails.",
          "6668: AC_DEFUN([PY_CHECK_CURSES], [dnl",
          "6669: AS_VAR_PUSHDEF([curses_var], [m4_toupper([$1])])",
          "6670: AS_VAR_PUSHDEF([panel_var], [m4_toupper([$2])])",
          "6671: PKG_CHECK_MODULES([CURSES], [$1],",
          "6672:   [AC_DEFINE([HAVE_]curses_var, [1], [Define if you have the '$1' library])",
          "6673:    AS_VAR_SET([have_curses], [yes])",
          "6674:    PKG_CHECK_MODULES([PANEL], [$2],",
          "6675:     [AC_DEFINE([HAVE_]panel_var, [1], [Define if you have the '$2' library])",
          "6676:      AS_VAR_SET([have_panel], [yes])],",
          "6677:     [AS_VAR_SET([have_panel], [no])])],",
          "6678:   [AS_VAR_SET([have_curses], [no])])",
          "6679: AS_VAR_POPDEF([curses_var])",
          "6680: AS_VAR_POPDEF([panel_var])])",
          "6682: # Check for ncursesw/panelw first. If that fails, try ncurses/panel.",
          "6683: PY_CHECK_CURSES([ncursesw], [panelw])",
          "6684: AS_VAR_IF([have_curses], [no],",
          "6685:           [PY_CHECK_CURSES([ncurses], [panel])])",
          "6687: WITH_SAVE_ENV([",
          "6688:   # Make sure we've got the header defines.",
          "6689:   AS_VAR_APPEND([CPPFLAGS], [\" $CURSES_CFLAGS $PANEL_CFLAGS\"])",
          "6690:   AC_CHECK_HEADERS(m4_normalize([",
          "6691:     ncursesw/curses.h ncursesw/ncurses.h ncursesw/panel.h",
          "6692:     ncurses/curses.h ncurses/ncurses.h ncurses/panel.h",
          "6693:     curses.h ncurses.h panel.h",
          "6694:   ]))",
          "6696:   # Check that we're able to link with crucial curses/panel functions. This",
          "6697:   # also serves as a fallback in case pkg-config failed.",
          "6698:   AS_VAR_APPEND([LIBS], [\" $CURSES_LIBS $PANEL_LIBS\"])",
          "6699:   AC_SEARCH_LIBS([initscr], [ncursesw ncurses],",
          "6700:     [AS_VAR_IF([have_curses], [no],",
          "6701:       [AS_VAR_SET([have_curses], [yes])",
          "6702:        CURSES_LIBS=${CURSES_LIBS-\"$ac_cv_search_initscr\"}])],",
          "6703:     [AS_VAR_SET([have_curses], [no])])",
          "6704:   AC_SEARCH_LIBS([update_panels], [panelw panel],",
          "6705:     [AS_VAR_IF([have_panel], [no],",
          "6706:       [AS_VAR_SET([have_panel], [yes])",
          "6707:        PANEL_LIBS=${PANEL_LIBS-\"$ac_cv_search_update_panels\"}])],",
          "6708:     [AS_VAR_SET([have_panel], [no])])",
          "6710: dnl Issue #25720: ncurses has introduced the NCURSES_OPAQUE symbol making opaque",
          "6711: dnl structs since version 5.7.  If the macro is defined as zero before including",
          "6712: dnl [n]curses.h, ncurses will expose fields of the structs regardless of the",
          "6713: dnl configuration.",
          "6714: AC_DEFUN([_CURSES_INCLUDES],dnl",
          "6715: [",
          "6716: #define NCURSES_OPAQUE 0",
          "6717: #if defined(HAVE_NCURSESW_NCURSES_H)",
          "6718: #  include <ncursesw/ncurses.h>",
          "6719: #elif defined(HAVE_NCURSESW_CURSES_H)",
          "6720: #  include <ncursesw/curses.h>",
          "6721: #elif defined(HAVE_NCURSES_NCURSES_H)",
          "6722: #  include <ncurses/ncurses.h>",
          "6723: #elif defined(HAVE_NCURSES_CURSES_H)",
          "6724: #  include <ncurses/curses.h>",
          "6725: #elif defined(HAVE_NCURSES_H)",
          "6726: #  include <ncurses.h>",
          "6727: #elif defined(HAVE_CURSES_H)",
          "6728: #  include <curses.h>",
          "6729: #endif",
          "6730: ])",
          "6732: AS_IF([test \"have_curses\" != \"no\"], [",
          "6737: AS_VAR_IF([ac_sys_system], [Darwin], [",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6711:   dnl _XOPEN_SOURCE_EXTENDED here for ncurses wide char support.",
          "6713:   AS_VAR_APPEND([CURSES_CFLAGS], [\" -D_XOPEN_SOURCE_EXTENDED=1\"])",
          "6724: ])",
          "6764: dnl pyconfig.h defines _XOPEN_SOURCE=700",
          "6765: PANEL_CFLAGS=$(echo $PANEL_CFLAGS | sed 's/-D_XOPEN_SOURCE=600//g')",
          "6780: # On Solaris, term.h requires curses.h",
          "6787: # On HP/UX 11.0, mvwdelch is a block with a return statement",
          "6788: AC_CACHE_CHECK([whether mvwdelch is an expression], [ac_cv_mvwdelch_is_expression],",
          "6790:   int rtn;",
          "6791:   rtn = mvwdelch(0,0,0);",
          "6792: ]])],",
          "",
          "[Removed Lines]",
          "6714:   AC_DEFINE([HAVE_NCURSESW], [1])",
          "6715: fi",
          "6717: dnl TODO: detect \"curses\" and special cases tinfo, terminfo, or termcap",
          "6719: AC_MSG_CHECKING([curses module flags])",
          "6720: AS_VAR_IF([have_curses], [no], [",
          "6721:   AC_MSG_RESULT([no])",
          "6722: ], [",
          "6723:   AC_MSG_RESULT([$have_curses (CFLAGS: $CURSES_CFLAGS, LIBS: $CURSES_LIBS)])",
          "6726: dnl check for ncurses' panel/panelw library",
          "6727: AC_CHECK_HEADERS([panel.h])",
          "6729: AS_VAR_IF([ac_cv_header_panel_h], [yes], [",
          "6731:   if test \"$ac_sys_system\" != \"Darwin\"; then",
          "6732:     dnl On macOS, there is no separate /usr/lib/libncursesw nor libpanelw.",
          "6733:     AS_VAR_IF([have_curses], [ncursesw], [",
          "6734:       PKG_CHECK_MODULES([PANEL], [panelw], [",
          "6735:         have_panel=panelw",
          "6736:       ], [",
          "6737:         WITH_SAVE_ENV([",
          "6738:           AC_CHECK_LIB([panelw], [update_panels], [",
          "6739:             have_panel=panelw",
          "6740:             PANEL_CFLAGS=${PANEL_CFLAGS-\"\"}",
          "6741:             PANEL_LIBS=${PANEL_LIBS-\"-lpanelw\"}",
          "6742:           ])",
          "6743:         ])",
          "6744:       ])",
          "6745:     ])",
          "6746:   fi",
          "6748:   AS_VAR_IF([have_curses], [ncurses], [",
          "6749:     PKG_CHECK_MODULES([PANEL], [panel], [",
          "6750:       have_panel=panel",
          "6751:     ], [",
          "6752:       WITH_SAVE_ENV([",
          "6753:         AC_CHECK_LIB([panel], [update_panels], [",
          "6754:           have_panel=panel",
          "6755:           PANEL_CFLAGS=${PANEL_CFLAGS-\"\"}",
          "6756:           PANEL_LIBS=${PANEL_LIBS-\"-lpanel\"}",
          "6757:         ])",
          "6758:       ])",
          "6759:     ])",
          "6760:   ])",
          "6762: ])dnl ac_cv_header_panel_h = yes",
          "6767: AC_MSG_CHECKING([panel flags])",
          "6768: AS_VAR_IF([have_panel], [no], [",
          "6769:   AC_MSG_RESULT([no])",
          "6770: ], [",
          "6771:   AC_MSG_RESULT([$have_panel (CFLAGS: $PANEL_CFLAGS, LIBS: $PANEL_LIBS)])",
          "6772: ])",
          "6774: # first curses header check",
          "6775: ac_save_cppflags=\"$CPPFLAGS\"",
          "6776: if test \"$cross_compiling\" = no; then",
          "6777:   CPPFLAGS=\"$CPPFLAGS -I/usr/include/ncursesw\"",
          "6778: fi",
          "6781: AC_CHECK_HEADERS([term.h], [], [], [",
          "6782: #ifdef HAVE_CURSES_H",
          "6783: #include <curses.h>",
          "6784: #endif",
          "6785: ])",
          "6789: AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <curses.h>]], [[",
          "",
          "[Added Lines]",
          "6753: AC_CHECK_HEADERS([term.h], [], [], _CURSES_INCLUDES)",
          "6757: AC_COMPILE_IFELSE([AC_LANG_PROGRAM(_CURSES_INCLUDES, [[",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6799:   [Define if mvwdelch in curses.h is an expression.])",
          "6800: fi",
          "6806: AC_CACHE_CHECK([whether WINDOW has _flags], [ac_cv_window_has_flags],",
          "6811:   WINDOW *w;",
          "6812:   w->_flags = 0;",
          "6813: ]])],",
          "",
          "[Removed Lines]",
          "6802: # Issue #25720: ncurses has introduced the NCURSES_OPAQUE symbol making opaque",
          "6803: # structs since version 5.7.  If the macro is defined as zero before including",
          "6804: # [n]curses.h, ncurses will expose fields of the structs regardless of the",
          "6805: # configuration.",
          "6807: AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[",
          "6808:   #define NCURSES_OPAQUE 0",
          "6809:   #include <curses.h>",
          "6810: ]], [[",
          "",
          "[Added Lines]",
          "6771: AC_COMPILE_IFELSE([AC_LANG_PROGRAM(_CURSES_INCLUDES, [[",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6829:     [for curses function $1],",
          "6830:     [py_var],",
          "6831:     [AC_COMPILE_IFELSE(",
          "6837:         #ifndef $1",
          "6838:         void *x=$1",
          "6839:         #endif",
          "",
          "[Removed Lines]",
          "6832:       [AC_LANG_PROGRAM(",
          "6833:         [",
          "6834:         #define NCURSES_OPAQUE 0",
          "6835:         #include <curses.h>",
          "6836:         ], [",
          "",
          "[Added Lines]",
          "6793:       [AC_LANG_PROGRAM(_CURSES_INCLUDES, [",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6861: PY_CHECK_CURSES_FUNC([typeahead])",
          "6862: PY_CHECK_CURSES_FUNC([use_env])",
          "6863: CPPFLAGS=$ac_save_cppflags",
          "6865: AC_MSG_NOTICE([checking for device files])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6821: ])dnl have_curses != no",
          "6822: ])dnl save env",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7778:   [], [test \"$have_libffi\" = yes],",
          "7779:   [$NO_STRICT_OVERFLOW_CFLAGS $LIBFFI_CFLAGS], [$LIBFFI_LIBS])",
          "7780: PY_STDLIB_MOD([_curses],",
          "7782:   [$CURSES_CFLAGS], [$CURSES_LIBS]",
          "7783: )",
          "7784: PY_STDLIB_MOD([_curses_panel],",
          "7786:   [$PANEL_CFLAGS $CURSES_CFLAGS], [$PANEL_LIBS $CURSES_LIBS]",
          "7787: )",
          "7788: PY_STDLIB_MOD([_decimal],",
          "",
          "[Removed Lines]",
          "7781:   [], [test \"$have_curses\" != \"no\"],",
          "7785:   [], [test \"$have_panel\" != \"no\"],",
          "",
          "[Added Lines]",
          "7740:   [], [test \"$have_curses\" = \"yes\"],",
          "7744:   [], [test \"$have_curses\" = \"yes\" && test \"$have_panel\" = \"yes\"],",
          "",
          "---------------"
        ],
        "pyconfig.h.in||pyconfig.h.in": [
          "File: pyconfig.h.in -> pyconfig.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "830: #undef HAVE_NANOSLEEP",
          "833: #undef HAVE_NCURSESW",
          "836: #undef HAVE_NCURSES_H",
          "839: #undef HAVE_NDBM_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "833: #undef HAVE_NCURSES",
          "839: #undef HAVE_NCURSESW_CURSES_H",
          "842: #undef HAVE_NCURSESW_NCURSES_H",
          "845: #undef HAVE_NCURSESW_PANEL_H",
          "848: #undef HAVE_NCURSES_CURSES_H",
          "854: #undef HAVE_NCURSES_NCURSES_H",
          "857: #undef HAVE_NCURSES_PANEL_H",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "879: #undef HAVE_OPENPTY",
          "882: #undef HAVE_PANEL_H",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: #undef HAVE_PANEL",
          "906: #undef HAVE_PANELW",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c750061047ee520d8299334df4b112fd983d7e48",
      "candidate_info": {
        "commit_hash": "c750061047ee520d8299334df4b112fd983d7e48",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c750061047ee520d8299334df4b112fd983d7e48",
        "files": [
          "Lib/test/test_socket.py"
        ],
        "message": "[3.13] gh-119461: Fix ThreadedVSOCKSocketStreamTest (#119465) (#119479)\n\ngh-119461: Fix ThreadedVSOCKSocketStreamTest (#119465)\n\nFix ThreadedVSOCKSocketStreamTest: if get_cid() returns the host\naddress or the \"any\" address, use the local communication address\n(loopback): VMADDR_CID_LOCAL.\n\nOn Linux 6.9, apparently, the /dev/vsock device is now available but\nget_cid() returns VMADDR_CID_ANY (-1).\n\n(cherry picked from commit e94dbe4ed83460f18bd72563c5f09f6cdc71f604)",
        "before_after_code_files": [
          "Lib/test/test_socket.py||Lib/test/test_socket.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_socket.py||Lib/test/test_socket.py": [
          "File: Lib/test/test_socket.py -> Lib/test/test_socket.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: # test unicode string and carriage return",
          "48: MSG = 'Michael Gilfix was here\\u1234\\r\\n'.encode('utf-8')",
          "50: VSOCKPORT = 1234",
          "51: AIX = platform.system() == \"AIX\"",
          "52: WSL = \"microsoft-standard-WSL\" in platform.release()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: VMADDR_CID_LOCAL = 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161: def _have_socket_vsock():",
          "162:     \"\"\"Check whether AF_VSOCK sockets are supported on this host.\"\"\"",
          "167: def _have_socket_bluetooth():",
          "",
          "[Removed Lines]",
          "163:     ret = get_cid() is not None",
          "164:     return ret",
          "",
          "[Added Lines]",
          "164:     cid = get_cid()",
          "165:     return (cid is not None)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520: @unittest.skipIf(WSL, 'VSOCK does not work on Microsoft WSL')",
          "521: @unittest.skipUnless(HAVE_SOCKET_VSOCK,",
          "522:           'VSOCK sockets required for this test.')",
          "525: class ThreadedVSOCKSocketStreamTest(unittest.TestCase, ThreadableTest):",
          "527:     def __init__(self, methodName='runTest'):",
          "",
          "[Removed Lines]",
          "523: @unittest.skipUnless(get_cid() != 2,",
          "524:           \"This test can only be run on a virtual guest.\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "543:         self.cli = socket.socket(socket.AF_VSOCK, socket.SOCK_STREAM)",
          "544:         self.addCleanup(self.cli.close)",
          "545:         cid = get_cid()",
          "546:         self.cli.connect((cid, VSOCKPORT))",
          "548:     def testStream(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:         if cid in (socket.VMADDR_CID_HOST, socket.VMADDR_CID_ANY):",
          "546:             # gh-119461: Use the local communication address (loopback)",
          "547:             cid = VMADDR_CID_LOCAL",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2a4540c4fc3e9de4ca7b8a33463f71d795d86b2",
      "candidate_info": {
        "commit_hash": "f2a4540c4fc3e9de4ca7b8a33463f71d795d86b2",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f2a4540c4fc3e9de4ca7b8a33463f71d795d86b2",
        "files": [
          "Lib/test/test_free_threading/test_dict.py"
        ],
        "message": "[3.13] gh-120579: Guard `_testcapi` import in `test_free_threading` (GH-120580) (#120583)\n\ngh-120579: Guard `_testcapi` import in `test_free_threading` (GH-120580)\n(cherry picked from commit 0c0348adbfca991f78b3aaa6790e5c26606a1c0f)\n\nCo-authored-by: Nikita Sobolev <mail@sobolevn.me>",
        "before_after_code_files": [
          "Lib/test/test_free_threading/test_dict.py||Lib/test/test_free_threading/test_dict.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_free_threading/test_dict.py||Lib/test/test_free_threading/test_dict.py": [
          "File: Lib/test/test_free_threading/test_dict.py -> Lib/test/test_free_threading/test_dict.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from threading import Thread",
          "9: from unittest import TestCase",
          "13: from test.support import threading_helper",
          "",
          "[Removed Lines]",
          "11: from _testcapi import dict_version",
          "",
          "[Added Lines]",
          "11: try:",
          "12:     import _testcapi",
          "13: except ImportError:",
          "14:     _testcapi = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:             for ref in thread_list:",
          "140:                 self.assertIsNone(ref())",
          "142:     def test_dict_version(self):",
          "143:         THREAD_COUNT = 10",
          "144:         DICT_COUNT = 10000",
          "145:         lists = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     @unittest.skipIf(_testcapi is None, 'need _testcapi module')",
          "147:         dict_version = _testcapi.dict_version",
          "",
          "---------------"
        ]
      }
    }
  ]
}