{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f7303cd96742cf6ae3dedc4e3d5211140922186f",
      "candidate_info": {
        "commit_hash": "f7303cd96742cf6ae3dedc4e3d5211140922186f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f7303cd96742cf6ae3dedc4e3d5211140922186f",
        "files": [
          "Lib/idlelib/config.py",
          "Lib/idlelib/pyshell.py",
          "Lib/idlelib/util.py",
          "Lib/turtledemo/__main__.py",
          "Misc/NEWS.d/next/Library/2024-05-19-18-49-04.gh-issue-119174.5GTv7d.rst"
        ],
        "message": "[3.13] gh-119174: Fix high DPI causes turtledemo(turtle-graphics examples) windows blurry (GH-119175) (#119289)\n\ngh-119174: Fix high DPI causes turtledemo(turtle-graphics examples) windows blurry (GH-119175)\n\n------\n\n(cherry picked from commit 538ed5e4818aa0d0aa759634e8bfa23e317434a1)\n\nCo-authored-by: Wulian233 <71213467+Wulian233@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/idlelib/config.py||Lib/idlelib/config.py",
          "Lib/idlelib/pyshell.py||Lib/idlelib/pyshell.py",
          "Lib/idlelib/util.py||Lib/idlelib/util.py",
          "Lib/turtledemo/__main__.py||Lib/turtledemo/__main__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/idlelib/config.py||Lib/idlelib/config.py": [
          "File: Lib/idlelib/config.py -> Lib/idlelib/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         self.defaultCfg = {}",
          "159:         self.userCfg = {}",
          "160:         self.cfg = {}  # TODO use to select userCfg vs defaultCfg",
          "161:         # self.blink_off_time = <first editor text>['insertofftime']",
          "164:         if not _utest:",
          "165:             self.CreateConfigHandlers()",
          "",
          "[Removed Lines]",
          "162:         # See https://bugs.python.org/issue4630#msg356516.",
          "",
          "[Added Lines]",
          "162:         # See https://bugs.python.org/issue4630#msg356516 for following.",
          "",
          "---------------"
        ],
        "Lib/idlelib/pyshell.py||Lib/idlelib/pyshell.py": [
          "File: Lib/idlelib/pyshell.py -> Lib/idlelib/pyshell.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:           \"Your Python may not be configured for Tk. **\", file=sys.__stderr__)",
          "12:     raise SystemExit(1)",
          "16: if sys.platform == 'win32':",
          "24: from tkinter import messagebox",
          "",
          "[Removed Lines]",
          "14: # Valid arguments for the ...Awareness call below are defined in the following.",
          "15: # https://msdn.microsoft.com/en-us/library/windows/desktop/dn280512(v=vs.85).aspx",
          "17:     try:",
          "18:         import ctypes",
          "19:         PROCESS_SYSTEM_DPI_AWARE = 1  # Int required.",
          "20:         ctypes.OleDLL('shcore').SetProcessDpiAwareness(PROCESS_SYSTEM_DPI_AWARE)",
          "21:     except (ImportError, AttributeError, OSError):",
          "22:         pass",
          "",
          "[Added Lines]",
          "15:     from idlelib.util import fix_win_hidpi",
          "16:     fix_win_hidpi()",
          "",
          "---------------"
        ],
        "Lib/idlelib/util.py||Lib/idlelib/util.py": [
          "File: Lib/idlelib/util.py -> Lib/idlelib/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: \"\"\"",
          "16: # .pyw is for Windows; .pyi is for typing stub files.",
          "17: # The extension order is needed for iomenu open/save dialogs.",
          "18: py_extensions = ('.py', '.pyw', '.pyi')",
          "20: if __name__ == '__main__':",
          "21:     from unittest import main",
          "22:     main('idlelib.idle_test.test_util', verbosity=2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import sys",
          "22: # Fix for HiDPI screens on Windows.  CALL BEFORE ANY TK OPERATIONS!",
          "23: # URL for arguments for the ...Awareness call below.",
          "24: # https://msdn.microsoft.com/en-us/library/windows/desktop/dn280512(v=vs.85).aspx",
          "25: if sys.platform == 'win32':  # pragma: no cover",
          "26:     def fix_win_hidpi():  # Called in pyshell and turtledemo.",
          "27:         try:",
          "28:             import ctypes",
          "29:             PROCESS_SYSTEM_DPI_AWARE = 1  # Int required.",
          "30:             ctypes.OleDLL('shcore').SetProcessDpiAwareness(PROCESS_SYSTEM_DPI_AWARE)",
          "31:         except (ImportError, AttributeError, OSError):",
          "32:             pass",
          "",
          "---------------"
        ],
        "Lib/turtledemo/__main__.py||Lib/turtledemo/__main__.py": [
          "File: Lib/turtledemo/__main__.py -> Lib/turtledemo/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: from idlelib.colorizer import ColorDelegator, color_config",
          "93: from idlelib.percolator import Percolator",
          "94: from idlelib.textview import view_text",
          "95: from turtledemo import __doc__ as about_turtledemo",
          "99: demo_dir = os.path.dirname(os.path.abspath(__file__))",
          "100: darwin = sys.platform == 'darwin'",
          "102: STARTUP = 1",
          "103: READY = 2",
          "104: RUNNING = 3",
          "",
          "[Removed Lines]",
          "97: import turtle",
          "",
          "[Added Lines]",
          "95: import turtle",
          "98: if sys.platform == 'win32':",
          "99:     from idlelib.util import fix_win_hidpi",
          "100:     fix_win_hidpi()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b413952e817ae87bfda2ac85dd84d30a6ce743b",
      "candidate_info": {
        "commit_hash": "7b413952e817ae87bfda2ac85dd84d30a6ce743b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7b413952e817ae87bfda2ac85dd84d30a6ce743b",
        "files": [
          "Include/patchlevel.h",
          "Lib/pydoc_data/topics.py",
          "Misc/NEWS.d/3.13.0b3.rst",
          "Misc/NEWS.d/next/Build/2024-06-09-15-54-22.gh-issue-120291.IpfHzE.rst",
          "Misc/NEWS.d/next/Build/2024-06-11-00-38-05.gh-issue-120326.JHSDF1.rst",
          "Misc/NEWS.d/next/Build/2024-06-19-21-05-15.gh-issue-120602.UyDARz.rst",
          "Misc/NEWS.d/next/Build/2024-06-21-09-24-03.gh-issue-120671.Z8sBQB.rst",
          "Misc/NEWS.d/next/C API/2024-04-10-16-48-04.gh-issue-117511.RZtBRK.rst",
          "Misc/NEWS.d/next/C API/2024-05-08-21-57-50.gh-issue-118789.Ni4UQx.rst",
          "Misc/NEWS.d/next/C API/2024-05-21-19-41-41.gh-issue-119344.QKvzQb.rst",
          "Misc/NEWS.d/next/C API/2024-06-19-21-27-42.gh-issue-120642.UlKClN.rst",
          "Misc/NEWS.d/next/C API/2024-06-21-16-41-21.gh-issue-120858.Z5_-Mn.rst",
          "Misc/NEWS.d/next/C API/2024-06-26-11-29-01.gh-issue-120642.H7P9qK.rst",
          "Misc/NEWS.d/next/Core and Builtins/2018-10-09-15-14-53.bpo-24766.c_C1Wc.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-03-13-48-44.gh-issue-119933.Kc0HG5.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-07-16-09-04.gh-issue-120225.kuYf9t.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-09-19-13-38.gh-issue-119666.S0G4rZ.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-10-10-42-48.gh-issue-120298.napREA.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-10-15-07-16.gh-issue-120198.WW_pjO.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-10-22-30-26.gh-issue-93691.68WOTS.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-11-12-47-54.gh-issue-120346.hhn_6X.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-11-17-56-12.gh-issue-120221.si9hM9.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-12-12-29-45.gh-issue-120400.lZYHVS.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-12-18-23-15.gh-issue-120380.edtqjq.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-12-18-50-29.gh-issue-120367.LmXx2y.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-13-12-17-52.gh-issue-120384.w1UBGl.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-14-22-02-25.gh-issue-113993.MiA0vX.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-18-21-34-30.gh-issue-120367.zDwffP.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-18-22-41-05.gh-issue-120722.rS7tkE.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-19-01-58-54.gh-issue-120437.nCkIoI.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-19-11-10-50.gh-issue-119462.DpcqSe.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-26-13-42-36.gh-issue-113433.xKAtLB.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-26-14-09-31.gh-issue-120838.nFeTL9.rst",
          "Misc/NEWS.d/next/Library/2024-05-24-14-32-24.gh-issue-119506.-nMNqq.rst",
          "Misc/NEWS.d/next/Library/2024-05-25-10-40-38.gh-issue-118908.XcZiq4.rst",
          "Misc/NEWS.d/next/Library/2024-05-29-21-50-05.gh-issue-119577.S3BlKJ.rst",
          "Misc/NEWS.d/next/Library/2024-06-02-13-35-11.gh-issue-81936.ETeW9x.rst",
          "Misc/NEWS.d/next/Library/2024-06-04-08-57-02.gh-issue-65454.o9j4wF.rst",
          "Misc/NEWS.d/next/Library/2024-06-04-19-03-25.gh-issue-112672.K2XfZH.rst",
          "Misc/NEWS.d/next/Library/2024-06-05-08-02-46.gh-issue-120108.4U9BL8.rst",
          "Misc/NEWS.d/next/Library/2024-06-05-11-39-21.gh-issue-119933.ooJXQV.rst",
          "Misc/NEWS.d/next/Library/2024-06-05-16-30-28.gh-issue-120121.9dz8i7.rst",
          "Misc/NEWS.d/next/Library/2024-06-06-12-07-57.gh-issue-119698.rRrprk.rst",
          "Misc/NEWS.d/next/Library/2024-06-06-17-24-43.gh-issue-120161.DahNXV.rst",
          "Misc/NEWS.d/next/Library/2024-06-07-11-23-31.gh-issue-71587.IjFajE.rst",
          "Misc/NEWS.d/next/Library/2024-06-07-13-21-11.gh-issue-120211.Rws_gf.rst",
          "Misc/NEWS.d/next/Library/2024-06-08-09-45-31.gh-issue-120244.8o9Dzr.rst",
          "Misc/NEWS.d/next/Library/2024-06-08-14-36-40.gh-issue-120268.MNpd1q.rst",
          "Misc/NEWS.d/next/Library/2024-06-08-15-15-29.gh-issue-114053.WQLAFG.rst",
          "Misc/NEWS.d/next/Library/2024-06-08-15-46-35.gh-issue-114053.Ub2XgJ.rst",
          "Misc/NEWS.d/next/Library/2024-06-10-14-00-40.gh-issue-119600.jJMf4C.rst",
          "Misc/NEWS.d/next/Library/2024-06-11-16-34-41.gh-issue-120343.hdiXeU.rst",
          "Misc/NEWS.d/next/Library/2024-06-12-10-00-31.gh-issue-90425.5CfkKG.rst",
          "Misc/NEWS.d/next/Library/2024-06-12-11-54-05.gh-issue-120381.O-BNLs.rst",
          "Misc/NEWS.d/next/Library/2024-06-14-20-05-25.gh-issue-120495.OxgZKB.rst",
          "Misc/NEWS.d/next/Library/2024-06-15-12-04-46.gh-issue-120541.d3cc5y.rst",
          "Misc/NEWS.d/next/Library/2024-06-17-20-04-13.gh-issue-120633.kZC5wt.rst",
          "Misc/NEWS.d/next/Library/2024-06-18-19-18-10.gh-issue-120683.xmRez7.rst",
          "Misc/NEWS.d/next/Library/2024-06-19-15-06-58.gh-issue-120732.OvYV9b.rst",
          "Misc/NEWS.d/next/Library/2024-06-20-01-31-24.gh-issue-120769.PfiMrc.rst",
          "Misc/NEWS.d/next/Library/2024-06-21-14-32-56.gh-issue-120811.eBmVTV.rst",
          "Misc/NEWS.d/next/Library/2024-06-22-22-23-56.gh-issue-101830.1BAoxH.rst",
          "Misc/NEWS.d/next/Library/2024-06-22-22-52-24.gh-issue-120888.sd8I3N.rst",
          "Misc/NEWS.d/next/Library/2024-06-23-11-21-27.gh-issue-120910.t0QXdB.rst",
          "Misc/NEWS.d/next/Library/2024-06-23-17-50-40.gh-issue-119614.vwPGLB.rst",
          "Misc/NEWS.d/next/Library/2024-06-26-03-04-24.gh-issue-121018.clVSc4.rst",
          "Misc/NEWS.d/next/Library/2024-06-26-10-13-40.gh-issue-121025.M-XXlV.rst",
          "Misc/NEWS.d/next/Library/2024-06-27-13-47-14.gh-issue-121027.jh55EC.rst",
          "README.rst"
        ],
        "message": "Python 3.13.0b3",
        "before_after_code_files": [
          "Include/patchlevel.h||Include/patchlevel.h",
          "Lib/pydoc_data/topics.py||Lib/pydoc_data/topics.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/patchlevel.h||Include/patchlevel.h": [
          "File: Include/patchlevel.h -> Include/patchlevel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define PY_MINOR_VERSION        13",
          "21: #define PY_MICRO_VERSION        0",
          "22: #define PY_RELEASE_LEVEL        PY_RELEASE_LEVEL_BETA",
          "",
          "[Removed Lines]",
          "23: #define PY_RELEASE_SERIAL       2",
          "26: #define PY_VERSION              \"3.13.0b2+\"",
          "",
          "[Added Lines]",
          "23: #define PY_RELEASE_SERIAL       3",
          "26: #define PY_VERSION              \"3.13.0b3\"",
          "",
          "---------------"
        ],
        "Lib/pydoc_data/topics.py||Lib/pydoc_data/topics.py": [
          "File: Lib/pydoc_data/topics.py -> Lib/pydoc_data/topics.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "3: # as part of the release process.",
          "4: topics = {'assert': 'The \"assert\" statement\\n'",
          "5:            '**********************\\n'",
          "",
          "[Removed Lines]",
          "2: # Autogenerated by Sphinx on Wed Jun  5 16:43:53 2024",
          "",
          "[Added Lines]",
          "2: # Autogenerated by Sphinx on Thu Jun 27 15:02:53 2024",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:                'a single\\n'",
          "363:                'target is allowed.\\n'",
          "364:                '\\n'",
          "378:                'evaluated\\n'",
          "380:                '\\n'",
          "381:                'If a name is annotated in a function scope, then this name is '",
          "382:                'local\\n'",
          "",
          "[Removed Lines]",
          "365:                'For simple names as assignment targets, if in class or module '",
          "366:                'scope,\\n'",
          "367:                'the annotations are evaluated and stored in a special class or '",
          "368:                'module\\n'",
          "369:                'attribute \"__annotations__\" that is a dictionary mapping from '",
          "370:                'variable\\n'",
          "371:                'names (mangled if private) to evaluated annotations. This '",
          "372:                'attribute is\\n'",
          "373:                'writable and is automatically created at the start of class or '",
          "374:                'module\\n'",
          "375:                'body execution, if annotations are found statically.\\n'",
          "376:                '\\n'",
          "377:                'For expressions as assignment targets, the annotations are '",
          "379:                'if in class or module scope, but not stored.\\n'",
          "",
          "[Added Lines]",
          "365:                'The assignment target is considered \u201csimple\u201d if it consists of '",
          "366:                'a\\n'",
          "367:                'single name that is not enclosed in parentheses. For simple '",
          "368:                'assignment\\n'",
          "369:                'targets, if in class or module scope, the annotations are '",
          "371:                'and stored in a special class or module attribute '",
          "372:                '\"__annotations__\"\\n'",
          "373:                'that is a dictionary mapping from variable names (mangled if '",
          "374:                'private)\\n'",
          "375:                'to evaluated annotations. This attribute is writable and is\\n'",
          "376:                'automatically created at the start of class or module body '",
          "377:                'execution,\\n'",
          "378:                'if annotations are found statically.\\n'",
          "379:                '\\n'",
          "380:                'If the assignment target is not simple (an attribute, '",
          "381:                'subscript node,\\n'",
          "382:                'or parenthesized name), the annotation is evaluated if in '",
          "383:                'class or\\n'",
          "384:                'module scope, but not stored.\\n'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2388:              'An\\n'",
          "2389:              'expression-less \"except\" clause, if present, must be last; it '",
          "2390:              'matches\\n'",
          "2403:              '\\n'",
          "2404:              'If no \"except\" clause matches the exception, the search for an\\n'",
          "2405:              'exception handler continues in the surrounding code and on the\\n'",
          "",
          "[Removed Lines]",
          "2391:              'any exception. For an \"except\" clause with an expression, that\\n'",
          "2392:              'expression is evaluated, and the clause matches the exception if '",
          "2393:              'the\\n'",
          "2394:              'resulting object is \u201ccompatible\u201d with the exception.  An object '",
          "2395:              'is\\n'",
          "2396:              'compatible with an exception if the object is the class or a '",
          "2397:              '*non-\\n'",
          "2398:              'virtual base class* of the exception object, or a tuple '",
          "2399:              'containing an\\n'",
          "2400:              'item that is the class or a non-virtual base class of the '",
          "2401:              'exception\\n'",
          "2402:              'object.\\n'",
          "",
          "[Added Lines]",
          "2396:              'any exception.\\n'",
          "2397:              '\\n'",
          "2398:              'For an \"except\" clause with an expression, the expression must\\n'",
          "2399:              'evaluate to an exception type or a tuple of exception types. '",
          "2400:              'The\\n'",
          "2401:              'raised exception matches an \"except\" clause whose expression '",
          "2402:              'evaluates\\n'",
          "2403:              'to the class or a *non-virtual base class* of the exception '",
          "2404:              'object, or\\n'",
          "2405:              'to a tuple that contains such a class.\\n'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2548:              '   ...\\n'",
          "2549:              \"   ExceptionGroup('', (BlockingIOError()))\\n\"",
          "2550:              '\\n'",
          "2558:              '\\n'",
          "2559:              '\\n'",
          "2560:              '\"else\" clause\\n'",
          "",
          "[Removed Lines]",
          "2551:              'An \"except*\" clause must have a matching type, and this type '",
          "2552:              'cannot be\\n'",
          "2553:              'a subclass of \"BaseExceptionGroup\". It is not possible to mix '",
          "2554:              '\"except\"\\n'",
          "2555:              'and \"except*\" in the same \"try\". \"break\", \"continue\" and '",
          "2556:              '\"return\"\\n'",
          "2557:              'cannot appear in an \"except*\" clause.\\n'",
          "",
          "[Added Lines]",
          "2554:              'An \"except*\" clause must have a matching expression; it cannot '",
          "2555:              'be\\n'",
          "2556:              '\"except*:\". Furthermore, this expression cannot contain '",
          "2557:              'exception\\n'",
          "2558:              'group types, because that would have ambiguous semantics.\\n'",
          "2559:              '\\n'",
          "2560:              'It is not possible to mix \"except\" and \"except*\" in the same '",
          "2561:              '\"try\".\\n'",
          "2562:              '\"break\", \"continue\" and \"return\" cannot appear in an \"except*\" '",
          "2563:              'clause.\\n'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4536:                   '   It is not guaranteed that \"__del__()\" methods are called '",
          "4537:                   'for\\n'",
          "4538:                   '   objects that still exist when the interpreter exits.\\n'",
          "4539:                   '\\n'",
          "4540:                   '   Note:\\n'",
          "4541:                   '\\n'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4545:                   '   \"weakref.finalize\" provides a straightforward way to '",
          "4546:                   'register a\\n'",
          "4547:                   '   cleanup function to be called when an object is garbage '",
          "4548:                   'collected.\\n'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9995:                  '   It is not guaranteed that \"__del__()\" methods are called '",
          "9996:                  'for\\n'",
          "9997:                  '   objects that still exist when the interpreter exits.\\n'",
          "9998:                  '\\n'",
          "9999:                  '   Note:\\n'",
          "10000:                  '\\n'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10008:                  '   \"weakref.finalize\" provides a straightforward way to '",
          "10009:                  'register a\\n'",
          "10010:                  '   cleanup function to be called when an object is garbage '",
          "10011:                  'collected.\\n'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "13489:         'clauses in turn until one is found that matches the exception. An\\n'",
          "13490:         'expression-less \"except\" clause, if present, must be last; it '",
          "13491:         'matches\\n'",
          "13500:         '\\n'",
          "13501:         'If no \"except\" clause matches the exception, the search for an\\n'",
          "13502:         'exception handler continues in the surrounding code and on the\\n'",
          "",
          "[Removed Lines]",
          "13492:         'any exception. For an \"except\" clause with an expression, that\\n'",
          "13493:         'expression is evaluated, and the clause matches the exception if the\\n'",
          "13494:         'resulting object is \u201ccompatible\u201d with the exception.  An object is\\n'",
          "13495:         'compatible with an exception if the object is the class or a *non-\\n'",
          "13496:         'virtual base class* of the exception object, or a tuple containing '",
          "13497:         'an\\n'",
          "13498:         'item that is the class or a non-virtual base class of the exception\\n'",
          "13499:         'object.\\n'",
          "",
          "[Added Lines]",
          "13506:         'any exception.\\n'",
          "13507:         '\\n'",
          "13508:         'For an \"except\" clause with an expression, the expression must\\n'",
          "13509:         'evaluate to an exception type or a tuple of exception types. The\\n'",
          "13510:         'raised exception matches an \"except\" clause whose expression '",
          "13511:         'evaluates\\n'",
          "13512:         'to the class or a *non-virtual base class* of the exception object, '",
          "13513:         'or\\n'",
          "13514:         'to a tuple that contains such a class.\\n'",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "13625:         '   ...\\n'",
          "13626:         \"   ExceptionGroup('', (BlockingIOError()))\\n\"",
          "13627:         '\\n'",
          "13634:         '\\n'",
          "13635:         '\\n'",
          "13636:         '\"else\" clause\\n'",
          "",
          "[Removed Lines]",
          "13628:         'An \"except*\" clause must have a matching type, and this type cannot '",
          "13629:         'be\\n'",
          "13630:         'a subclass of \"BaseExceptionGroup\". It is not possible to mix '",
          "13631:         '\"except\"\\n'",
          "13632:         'and \"except*\" in the same \"try\". \"break\", \"continue\" and \"return\"\\n'",
          "13633:         'cannot appear in an \"except*\" clause.\\n'",
          "",
          "[Added Lines]",
          "13643:         'An \"except*\" clause must have a matching expression; it cannot be\\n'",
          "13644:         '\"except*:\". Furthermore, this expression cannot contain exception\\n'",
          "13645:         'group types, because that would have ambiguous semantics.\\n'",
          "13646:         '\\n'",
          "13647:         'It is not possible to mix \"except\" and \"except*\" in the same \"try\".\\n'",
          "13648:         '\"break\", \"continue\" and \"return\" cannot appear in an \"except*\" '",
          "13649:         'clause.\\n'",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "16085:              '\\n'",
          "16086:              'Notes:\\n'",
          "16087:              '\\n'",
          "16089:              '\\n'",
          "16090:              '2. The optional argument *i* defaults to \"-1\", so that by '",
          "16091:              'default the\\n'",
          "",
          "[Removed Lines]",
          "16088:              '1. *t* must have the same length as the slice it is replacing.\\n'",
          "",
          "[Added Lines]",
          "16104:              '1. If *k* is not equal to \"1\", *t* must have the same length as '",
          "16105:              'the\\n'",
          "16106:              '   slice it is replacing.\\n'",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "16549:                      '\\n'",
          "16550:                      'Notes:\\n'",
          "16551:                      '\\n'",
          "16554:                      '\\n'",
          "16555:                      '2. The optional argument *i* defaults to \"-1\", so that '",
          "16556:                      'by default the\\n'",
          "",
          "[Removed Lines]",
          "16552:                      '1. *t* must have the same length as the slice it is '",
          "16553:                      'replacing.\\n'",
          "",
          "[Added Lines]",
          "16570:                      '1. If *k* is not equal to \"1\", *t* must have the same '",
          "16571:                      'length as the\\n'",
          "16572:                      '   slice it is replacing.\\n'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "544a47212b92f52ceffbd50275c6b0c57a446a98",
      "candidate_info": {
        "commit_hash": "544a47212b92f52ceffbd50275c6b0c57a446a98",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/544a47212b92f52ceffbd50275c6b0c57a446a98",
        "files": [
          "Lib/logging/__init__.py",
          "Lib/test/test_logging.py",
          "Misc/NEWS.d/next/Library/2024-06-18-19-18-10.gh-issue-120683.xmRez7.rst"
        ],
        "message": "[3.13] gh-120683: Fix an error in logging.LogRecord timestamp (GH-120709) (GH-120933)\n\nThe integer part of the timestamp can be rounded up, while the millisecond\ncalculation truncates, causing the log timestamp to be wrong by up to 999 ms\n(affected roughly 1 in 8 million timestamps).\n(cherry picked from commit 1500a23f33f5a6d052ff1ef6383d9839928b8ff1)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Lib/logging/__init__.py||Lib/logging/__init__.py",
          "Lib/test/test_logging.py||Lib/test/test_logging.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/logging/__init__.py||Lib/logging/__init__.py": [
          "File: Lib/logging/__init__.py -> Lib/logging/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:         self.lineno = lineno",
          "341:         self.funcName = func",
          "342:         self.created = ct / 1e9  # ns to float seconds",
          "344:         # Get the number of whole milliseconds (0-999) in the fractional part of seconds.",
          "345:         # Eg: 1_677_903_920_999_998_503 ns --> 999_998_503 ns--> 999 ms",
          "346:         # Convert to float by adding 0.0 for historical reasons. See gh-89047",
          "347:         self.msecs = (ct % 1_000_000_000) // 1_000_000 + 0.0",
          "349:         self.relativeCreated = (ct - _startTime) / 1e6",
          "350:         if logThreads:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:         if self.msecs == 999.0 and int(self.created) != ct // 1_000_000_000:",
          "348:             # ns -> sec conversion can round up, e.g:",
          "349:             # 1_677_903_920_999_999_900 ns --> 1_677_903_921.0 sec",
          "350:             self.msecs = 0.0",
          "",
          "---------------"
        ],
        "Lib/test/test_logging.py||Lib/test/test_logging.py": [
          "File: Lib/test/test_logging.py -> Lib/test/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4648:             (1_677_902_297_100_000_000, 100.0),  # exactly 100ms",
          "4649:             (1_677_903_920_999_998_503, 999.0),  # check truncating doesn't round",
          "4650:             (1_677_903_920_000_998_503, 0.0),  # check truncating doesn't round",
          "4651:         )",
          "4652:         for ns, want in tests:",
          "4653:             with patch('time.time_ns') as patched_ns:",
          "4654:                 patched_ns.return_value = ns",
          "4655:                 record = logging.makeLogRecord({'msg': 'test'})",
          "4659:     def test_relativeCreated_has_higher_precision(self):",
          "4660:         # See issue gh-102402.",
          "",
          "[Removed Lines]",
          "4656:             self.assertEqual(record.msecs, want)",
          "4657:             self.assertEqual(record.created, ns / 1e9)",
          "",
          "[Added Lines]",
          "4651:             (1_677_903_920_999_999_900, 0.0), # check rounding up",
          "4657:             with self.subTest(ns):",
          "4658:                 self.assertEqual(record.msecs, want)",
          "4659:                 self.assertEqual(record.created, ns / 1e9)",
          "4660:                 self.assertAlmostEqual(record.created - int(record.created),",
          "4661:                                        record.msecs / 1e3,",
          "4662:                                        delta=1e-3)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f49749cf8f61db0182304c00d6a4ee1b5e361766",
      "candidate_info": {
        "commit_hash": "f49749cf8f61db0182304c00d6a4ee1b5e361766",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/f49749cf8f61db0182304c00d6a4ee1b5e361766",
        "files": [
          "Doc/library/stdtypes.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-05-25-13-51-48.gh-issue-111999.L0q1gh.rst",
          "Objects/unicodeobject.c"
        ],
        "message": "[3.13] gh-111999: Fix the signature of str.format_map() (GH-119540) (#119543)\n\n(cherry picked from commit 08e65430aafa1047029e6f132a5f748c415bda14)\n\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
        "before_after_code_files": [
          "Objects/unicodeobject.c||Objects/unicodeobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Objects/unicodeobject.c||Objects/unicodeobject.c": [
          "File: Objects/unicodeobject.c -> Objects/unicodeobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13411: The substitutions are identified by braces ('{' and '}').\");",
          "13413: PyDoc_STRVAR(format_map__doc__,",
          "13415: --\\n\\",
          "13416: \\n\\",
          "13417: Return a formatted version of the string, using substitutions from mapping.\\n\\",
          "",
          "[Removed Lines]",
          "13414:              \"format_map($self, /, mapping)\\n\\",
          "",
          "[Added Lines]",
          "13414:              \"format_map($self, mapping, /)\\n\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c83997476f9bcb28af02296c3c74c1549dcd9f35",
      "candidate_info": {
        "commit_hash": "c83997476f9bcb28af02296c3c74c1549dcd9f35",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/c83997476f9bcb28af02296c3c74c1549dcd9f35",
        "files": [
          "Misc/NEWS.d/next/Core and Builtins/2024-06-26-13-42-36.gh-issue-113433.xKAtLB.rst",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-26-14-09-31.gh-issue-120838.nFeTL9.rst",
          "Python/pylifecycle.c"
        ],
        "message": "[3.13] gh-113433: Automatically Clean Up Subinterpreters in Py_Finalize() (gh-121067)\n\nThis change makes things a little less painful for some users.  It also fixes a failing assert (gh-120765), by making sure all subinterpreters are destroyed before the main interpreter.  As part of that, we make sure Py_Finalize() always runs with the main interpreter active.\n\n(cherry picked from commit 4be1f37b20bd51498d3adf8ad603095c0f38d6e5, AKA gh-121060)\n\nCo-authored-by: Eric Snow <ericsnowcurrently@gmail.com>",
        "before_after_code_files": [
          "Python/pylifecycle.c||Python/pylifecycle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/pylifecycle.c||Python/pylifecycle.c": [
          "File: Python/pylifecycle.c -> Python/pylifecycle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static PyStatus init_android_streams(PyThreadState *tstate);",
          "75: #endif",
          "76: static void wait_for_thread_shutdown(PyThreadState *tstate);",
          "77: static void call_ll_exitfuncs(_PyRuntimeState *runtime);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static void finalize_subinterpreters(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1908: }",
          "1913: {",
          "1914:     int status = 0;",
          "1917:     if (!runtime->initialized) {",
          "1918:         return status;",
          "1919:     }",
          "1927:     tstate->interp->finalizing = 1;",
          "",
          "[Removed Lines]",
          "1911: int",
          "1912: Py_FinalizeEx(void)",
          "1916:     _PyRuntimeState *runtime = &_PyRuntime;",
          "1922:     PyThreadState *tstate = _PyThreadState_GET();",
          "",
          "[Added Lines]",
          "1913:    to be called in any other thread than the one where Py_Initialize()",
          "1914:    was called.  Consequently, it would make sense to fail if the thread",
          "1915:    or thread state (or interpreter) don't match.  However, such",
          "1916:    constraints have never been enforced, and, as unlikely as it may be,",
          "1917:    there may be users relying on the unconstrained behavior.  Thus,",
          "1920: static PyThreadState *",
          "1921: resolve_final_tstate(_PyRuntimeState *runtime)",
          "1922: {",
          "1923:     PyThreadState *main_tstate = runtime->main_tstate;",
          "1924:     assert(main_tstate != NULL);",
          "1925:     assert(main_tstate->thread_id == runtime->main_thread);",
          "1926:     PyInterpreterState *main_interp = _PyInterpreterState_Main();",
          "1927:     assert(main_tstate->interp == main_interp);",
          "1929:     PyThreadState *tstate = _PyThreadState_GET();",
          "1930:     if (_Py_IsMainThread()) {",
          "1931:         if (tstate != main_tstate) {",
          "1933:                a non-main interpreter was active or while the main",
          "1934:                tstate was temporarily swapped out with another.",
          "1935:                Neither case should be allowed, but, until we get around",
          "1937:             (void)PyThreadState_Swap(main_tstate);",
          "1938:         }",
          "1939:     }",
          "1940:     else {",
          "1942:            called when it shouldn't have been.  We can't simply switch",
          "1943:            over to the main thread.  At the least, however, we can make",
          "1945:         if (!_Py_IsMainInterpreter(tstate->interp)) {",
          "1948:             main_tstate =",
          "1949:                 _PyThreadState_New(main_interp, _PyThreadState_WHENCE_FINI);",
          "1950:             if (main_tstate != NULL) {",
          "1951:                 _PyThreadState_Bind(main_tstate);",
          "1952:                 (void)PyThreadState_Swap(main_tstate);",
          "1953:             }",
          "1954:             else {",
          "1956:                 main_tstate = tstate;",
          "1957:             }",
          "1958:         }",
          "1959:     }",
          "1960:     assert(main_tstate != NULL);",
          "1964:     return main_tstate;",
          "1965: }",
          "1967: static int",
          "1968: _Py_Finalize(_PyRuntimeState *runtime)",
          "1978:     PyThreadState *tstate = resolve_final_tstate(runtime);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1945:     _PyAtExit_Call(tstate->interp);",
          "1949: #ifdef Py_REF_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2001:     assert(_PyThreadState_GET() == tstate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2024:     _PyImport_FiniExternal(tstate->interp);",
          "2025:     finalize_modules(tstate);",
          "2028:     _PyEval_Fini();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2084:     finalize_subinterpreters();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2141:     return status;",
          "2142: }",
          "2144: void",
          "2145: Py_Finalize(void)",
          "2146: {",
          "2148: }",
          "",
          "[Removed Lines]",
          "2147:     Py_FinalizeEx();",
          "",
          "[Added Lines]",
          "2203: int",
          "2204: Py_FinalizeEx(void)",
          "2205: {",
          "2206:     return _Py_Finalize(&_PyRuntime);",
          "2207: }",
          "2212:     (void)_Py_Finalize(&_PyRuntime);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2356:     return finalizing != NULL;",
          "2357: }",
          "2361: static PyStatus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2424: static void",
          "2425: finalize_subinterpreters(void)",
          "2426: {",
          "2427:     PyThreadState *final_tstate = _PyThreadState_GET();",
          "2428:     PyInterpreterState *main_interp = _PyInterpreterState_Main();",
          "2429:     assert(final_tstate->interp == main_interp);",
          "2430:     _PyRuntimeState *runtime = main_interp->runtime;",
          "2431:     struct pyinterpreters *interpreters = &runtime->interpreters;",
          "2434:     HEAD_LOCK(runtime);",
          "2435:     PyInterpreterState *interp = interpreters->head;",
          "2436:     if (interp == main_interp) {",
          "2437:         interp = interp->next;",
          "2438:     }",
          "2439:     HEAD_UNLOCK(runtime);",
          "2442:     if (interp == NULL) {",
          "2443:         return;",
          "2444:     }",
          "2447:     (void)PyErr_WarnEx(",
          "2448:             PyExc_RuntimeWarning,",
          "2449:             \"remaining subinterpreters; \"",
          "2450:             \"destroy them with _interpreters.destroy()\",",
          "2451:             0);",
          "2455:     _PyThreadState_Detach(final_tstate);",
          "2458:     while (interp != NULL) {",
          "2459:         assert(!_PyInterpreterState_IsRunningMain(interp));",
          "2463:         PyThreadState *tstate = interp->threads.head;",
          "2464:         if (tstate != NULL) {",
          "2466:                on it being in a ready state: no exception set, not",
          "2467:                running anything (tstate->current_frame), matching the",
          "2468:                current thread ID (tstate->thread_id).  To play it safe,",
          "2470:             assert(tstate != final_tstate);",
          "2471:             _PyThreadState_Attach(tstate);",
          "2472:             PyThreadState_Clear(tstate);",
          "2473:             _PyThreadState_Detach(tstate);",
          "2474:             PyThreadState_Delete(tstate);",
          "2475:         }",
          "2476:         tstate = _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_FINI);",
          "2479:         _PyThreadState_Attach(tstate);",
          "2480:         Py_EndInterpreter(tstate);",
          "2481:         assert(_PyThreadState_GET() == NULL);",
          "2484:         HEAD_LOCK(runtime);",
          "2485:         interp = interpreters->head;",
          "2486:         if (interp == main_interp) {",
          "2487:             interp = interp->next;",
          "2488:         }",
          "2489:         HEAD_UNLOCK(runtime);",
          "2490:     }",
          "2493:     _PyThreadState_Attach(final_tstate);",
          "2494: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3217:     if (tstate != NULL && _PyThreadState_IsRunningMain(tstate)) {",
          "3218:         _PyInterpreterState_SetNotRunningMain(tstate->interp);",
          "3219:     }",
          "3221:         sts = 120;",
          "3222:     }",
          "",
          "[Removed Lines]",
          "3220:     if (Py_FinalizeEx() < 0) {",
          "",
          "[Added Lines]",
          "3358:     if (_Py_Finalize(&_PyRuntime) < 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}