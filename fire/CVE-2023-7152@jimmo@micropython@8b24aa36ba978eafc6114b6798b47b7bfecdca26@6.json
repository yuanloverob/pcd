{
  "cve_id": "CVE-2023-7152",
  "cve_desc": "A vulnerability, which was classified as critical, has been found in MicroPython 1.21.0/1.22.0-preview. Affected by this issue is the function poll_set_add_fd of the file extmod/modselect.c. The manipulation leads to use after free. The exploit has been disclosed to the public and may be used. The patch is identified as 8b24aa36ba978eafc6114b6798b47b7bfecdca26. It is recommended to apply a patch to fix this issue. VDB-249158 is the identifier assigned to this vulnerability.",
  "repo": "jimmo/micropython",
  "patch_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
  "patch_info": {
    "commit_hash": "8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "repo": "jimmo/micropython",
    "commit_url": "https://github.com/jimmo/micropython/commit/8b24aa36ba978eafc6114b6798b47b7bfecdca26",
    "files": [
      "extmod/modselect.c",
      "tests/extmod/select_poll_fd.py"
    ],
    "message": "extmod/modselect: Handle growing the pollfds allocation correctly.\n\nThe poll_obj_t instances have their pollfd field point into this\nallocation.  So if re-allocating results in a move, we need to update the\nexisting poll_obj_t's.\n\nUpdate the test to cover this case.\n\nFixes issue #12887.\n\nThis work was funded through GitHub Sponsors.\n\nSigned-off-by: Jim Mussared <jim.mussared@gmail.com>",
    "before_after_code_files": [
      "extmod/modselect.c||extmod/modselect.c",
      "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py"
    ]
  },
  "patch_diff": {
    "extmod/modselect.c||extmod/modselect.c": [
      "File: extmod/modselect.c -> extmod/modselect.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #if MICROPY_PY_SELECT_POSIX_OPTIMISATIONS",
      "44: #include <poll.h>",
      "46: #if !((MP_STREAM_POLL_RD) == (POLLIN) && \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #include <string.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     }",
      "143: }",
      "145: STATIC struct pollfd *poll_set_add_fd(poll_set_t *poll_set, int fd) {",
      "146:     struct pollfd *free_slot = NULL;",
      "148:     if (poll_set->used == poll_set->max_used) {",
      "150:         if (poll_set->max_used >= poll_set->alloc) {",
      "153:         }",
      "154:         free_slot = &poll_set->pollfds[poll_set->max_used++];",
      "155:     } else {",
      "",
      "[Removed Lines]",
      "151:             poll_set->pollfds = m_renew(struct pollfd, poll_set->pollfds, poll_set->alloc, poll_set->alloc + 4);",
      "152:             poll_set->alloc += 4;",
      "",
      "[Added Lines]",
      "147: #define POLL_SET_ALLOC_INCREMENT (4)",
      "155:             size_t new_alloc = poll_set->alloc + POLL_SET_ALLOC_INCREMENT;",
      "157:             struct pollfd *new_fds = m_renew_maybe(struct pollfd, poll_set->pollfds, poll_set->alloc, new_alloc, false);",
      "158:             if (!new_fds) {",
      "160:                 new_fds = m_new(struct pollfd, new_alloc);",
      "161:                 memcpy(new_fds, poll_set->pollfds, sizeof(struct pollfd) * poll_set->alloc);",
      "165:                 for (mp_uint_t i = 0; i < poll_set->map.alloc; ++i) {",
      "166:                     if (!mp_map_slot_is_filled(&poll_set->map, i)) {",
      "167:                         continue;",
      "168:                     }",
      "170:                     poll_obj_t *poll_obj = MP_OBJ_TO_PTR(poll_set->map.table[i].value);",
      "171:                     if (!poll_obj) {",
      "175:                         continue;",
      "176:                     }",
      "178:                     poll_obj->pollfd = new_fds + (poll_obj->pollfd - poll_set->pollfds);",
      "179:                 }",
      "182:                 m_del(struct pollfd, poll_set->pollfds, poll_set->alloc);",
      "183:             }",
      "185:             poll_set->pollfds = new_fds;",
      "186:             poll_set->alloc = new_alloc;",
      "",
      "---------------"
    ],
    "tests/extmod/select_poll_fd.py||tests/extmod/select_poll_fd.py": [
      "File: tests/extmod/select_poll_fd.py -> tests/extmod/select_poll_fd.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: # Poll for input, should return an empty list.",
      "35: print(poller.poll(0))",
      "38: poller = select.poll()",
      "39: for fd in range(6000):",
      "40:     poller.register(fd)",
      "41: try:",
      "42:     poller.poll()",
      "43: except OSError as er:",
      "44:     print(er.errno == errno.EINVAL)",
      "",
      "[Removed Lines]",
      "37: # Test registering a very large number of file descriptors.",
      "",
      "[Added Lines]",
      "37: # Test registering a very large number of file descriptors (will trigger",
      "38: # EINVAL due to more than OPEN_MAX fds).",
      "44:     assert False",
      "48: # Register stdout/stderr, plus many extra ones to trigger the fd vector",
      "49: # resizing. Then unregister the excess ones and verify poll still works.",
      "50: poller = select.poll()",
      "51: for fd in range(1, 1000):",
      "52:     poller.register(fd)",
      "53: for i in range(3, 1000):",
      "54:     poller.unregister(i)",
      "55: print(sorted(poller.poll()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "215a982c1469df214b2beda2db5ed8d562040738",
      "candidate_info": {
        "commit_hash": "215a982c1469df214b2beda2db5ed8d562040738",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/215a982c1469df214b2beda2db5ed8d562040738",
        "files": [
          "py/py.mk"
        ],
        "message": "py/py.mk: Remove extra build dir created for frozen_content.\n\nThis was originally needed because the .c --> .o rule is:\n\n    $(BUILD)/%.o: %.c\n\nand because the generated frozen_content.c is inside build-FOO, it must\ntherefore generate build-FOO/build-FOO/frozen_content.o.\n\nBut 2eda5138701d6a7d36f8d8e3700d136b3c1161b7 added a new build rule for\npins.c that can also be used for frozen_content.c.\n\nSigned-off-by: iabdalkader <i.abdalkader@gmail.com>",
        "before_after_code_files": [
          "py/py.mk||py/py.mk"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "py/py.mk||py/py.mk": [
          "File: py/py.mk -> py/py.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: # object file for frozen code specified via a manifest",
          "205: ifneq ($(FROZEN_MANIFEST),)",
          "207: endif",
          "209: # Sources that may contain qstrings",
          "",
          "[Removed Lines]",
          "206: PY_O += $(BUILD)/$(BUILD)/frozen_content.o",
          "",
          "[Added Lines]",
          "206: PY_O += $(BUILD)/frozen_content.o",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bb446b7ff62af6d3b6b10f2da0f6d107f97e00e",
      "candidate_info": {
        "commit_hash": "6bb446b7ff62af6d3b6b10f2da0f6d107f97e00e",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/6bb446b7ff62af6d3b6b10f2da0f6d107f97e00e",
        "files": [
          "tests/extmod/asyncio_await_return.py.exp",
          "tests/extmod/asyncio_basic2.py.exp",
          "tests/extmod/asyncio_cancel_fair.py.exp",
          "tests/extmod/asyncio_cancel_fair2.py.exp",
          "tests/extmod/asyncio_cancel_task.py.exp",
          "tests/extmod/asyncio_cancel_wait_on_finished.py.exp",
          "tests/extmod/asyncio_current_task.py.exp",
          "tests/extmod/asyncio_event.py.exp",
          "tests/extmod/asyncio_event_fair.py.exp",
          "tests/extmod/asyncio_exception.py.exp",
          "tests/extmod/asyncio_fair.py",
          "tests/extmod/asyncio_fair.py.exp",
          "tests/extmod/asyncio_lock.py",
          "tests/extmod/asyncio_lock_cancel.py.exp",
          "tests/extmod/asyncio_loop_stop.py.exp",
          "tests/extmod/asyncio_new_event_loop.py.exp",
          "tests/extmod/asyncio_set_exception_handler.py.exp",
          "tests/extmod/asyncio_task_done.py.exp"
        ],
        "message": "tests/extmod: Remove asyncio .exp files that match CPython output.\n\nThese were added back in commit c4935f30490d0446e16a51dbf7a6397b771cf804\nbecause the tests required CPython 3.8, which was quite new at the time.\nBut CPython 3.8 was released over 4 years ago (October 2019) and the CI\ntest runners, and developers, have this (or a more recent) CPython version.\n\nRemoving the .exp files also helps keep MicroPython semantics the same as\nCPython.\n\nThe asyncio_fair.py test it adjusted slightly to have more deterministic\ntiming and output.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "tests/extmod/asyncio_await_return.py.exp||tests/extmod/asyncio_await_return.py.exp",
          "tests/extmod/asyncio_basic2.py.exp||tests/extmod/asyncio_basic2.py.exp",
          "tests/extmod/asyncio_cancel_fair.py.exp||tests/extmod/asyncio_cancel_fair.py.exp",
          "tests/extmod/asyncio_cancel_fair2.py.exp||tests/extmod/asyncio_cancel_fair2.py.exp",
          "tests/extmod/asyncio_cancel_task.py.exp||tests/extmod/asyncio_cancel_task.py.exp",
          "tests/extmod/asyncio_cancel_wait_on_finished.py.exp||tests/extmod/asyncio_cancel_wait_on_finished.py.exp",
          "tests/extmod/asyncio_current_task.py.exp||tests/extmod/asyncio_current_task.py.exp",
          "tests/extmod/asyncio_event.py.exp||tests/extmod/asyncio_event.py.exp",
          "tests/extmod/asyncio_event_fair.py.exp||tests/extmod/asyncio_event_fair.py.exp",
          "tests/extmod/asyncio_exception.py.exp||tests/extmod/asyncio_exception.py.exp",
          "tests/extmod/asyncio_fair.py||tests/extmod/asyncio_fair.py",
          "tests/extmod/asyncio_fair.py.exp||tests/extmod/asyncio_fair.py.exp",
          "tests/extmod/asyncio_lock.py||tests/extmod/asyncio_lock.py",
          "tests/extmod/asyncio_lock_cancel.py.exp||tests/extmod/asyncio_lock_cancel.py.exp",
          "tests/extmod/asyncio_loop_stop.py.exp||tests/extmod/asyncio_loop_stop.py.exp",
          "tests/extmod/asyncio_new_event_loop.py.exp||tests/extmod/asyncio_new_event_loop.py.exp",
          "tests/extmod/asyncio_set_exception_handler.py.exp||tests/extmod/asyncio_set_exception_handler.py.exp",
          "tests/extmod/asyncio_task_done.py.exp||tests/extmod/asyncio_task_done.py.exp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/extmod/asyncio_await_return.py.exp||tests/extmod/asyncio_await_return.py.exp": [
          "File: tests/extmod/asyncio_await_return.py.exp -> tests/extmod/asyncio_await_return.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_basic2.py.exp||tests/extmod/asyncio_basic2.py.exp": [
          "File: tests/extmod/asyncio_basic2.py.exp -> tests/extmod/asyncio_basic2.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_cancel_fair.py.exp||tests/extmod/asyncio_cancel_fair.py.exp": [
          "File: tests/extmod/asyncio_cancel_fair.py.exp -> tests/extmod/asyncio_cancel_fair.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_cancel_fair2.py.exp||tests/extmod/asyncio_cancel_fair2.py.exp": [
          "File: tests/extmod/asyncio_cancel_fair2.py.exp -> tests/extmod/asyncio_cancel_fair2.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_cancel_task.py.exp||tests/extmod/asyncio_cancel_task.py.exp": [
          "File: tests/extmod/asyncio_cancel_task.py.exp -> tests/extmod/asyncio_cancel_task.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_cancel_wait_on_finished.py.exp||tests/extmod/asyncio_cancel_wait_on_finished.py.exp": [
          "File: tests/extmod/asyncio_cancel_wait_on_finished.py.exp -> tests/extmod/asyncio_cancel_wait_on_finished.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_current_task.py.exp||tests/extmod/asyncio_current_task.py.exp": [
          "File: tests/extmod/asyncio_current_task.py.exp -> tests/extmod/asyncio_current_task.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_event.py.exp||tests/extmod/asyncio_event.py.exp": [
          "File: tests/extmod/asyncio_event.py.exp -> tests/extmod/asyncio_event.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_event_fair.py.exp||tests/extmod/asyncio_event_fair.py.exp": [
          "File: tests/extmod/asyncio_event_fair.py.exp -> tests/extmod/asyncio_event_fair.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_exception.py.exp||tests/extmod/asyncio_exception.py.exp": [
          "File: tests/extmod/asyncio_exception.py.exp -> tests/extmod/asyncio_exception.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_fair.py||tests/extmod/asyncio_fair.py": [
          "File: tests/extmod/asyncio_fair.py -> tests/extmod/asyncio_fair.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     t2 = asyncio.create_task(task(2, 0.1))",
          "21:     t3 = asyncio.create_task(task(3, 0.18))",
          "22:     t4 = asyncio.create_task(task(4, -100))",
          "24:     t1.cancel()",
          "25:     t2.cancel()",
          "26:     t3.cancel()",
          "",
          "[Removed Lines]",
          "23:     await asyncio.sleep(0.5)",
          "",
          "[Added Lines]",
          "23:     await asyncio.sleep(0.45)  # t2 prints 5 times, t3 prints 3 times",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_fair.py.exp||tests/extmod/asyncio_fair.py.exp": [
          "File: tests/extmod/asyncio_fair.py.exp -> tests/extmod/asyncio_fair.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_lock.py||tests/extmod/asyncio_lock.py": [
          "File: tests/extmod/asyncio_lock.py -> tests/extmod/asyncio_lock.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Test Lock class",
          "3: try:",
          "4:     import asyncio",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #",
          "3: # This test has a corresponding .exp file because it tests a very specific ordering of",
          "4: # events when cancelling a task waiting on a lock, and that ordering should not change",
          "5: # (even though it does match CPython's output).",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_lock_cancel.py.exp||tests/extmod/asyncio_lock_cancel.py.exp": [
          "File: tests/extmod/asyncio_lock_cancel.py.exp -> tests/extmod/asyncio_lock_cancel.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_loop_stop.py.exp||tests/extmod/asyncio_loop_stop.py.exp": [
          "File: tests/extmod/asyncio_loop_stop.py.exp -> tests/extmod/asyncio_loop_stop.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_new_event_loop.py.exp||tests/extmod/asyncio_new_event_loop.py.exp": [
          "File: tests/extmod/asyncio_new_event_loop.py.exp -> tests/extmod/asyncio_new_event_loop.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_set_exception_handler.py.exp||tests/extmod/asyncio_set_exception_handler.py.exp": [
          "File: tests/extmod/asyncio_set_exception_handler.py.exp -> tests/extmod/asyncio_set_exception_handler.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/extmod/asyncio_task_done.py.exp||tests/extmod/asyncio_task_done.py.exp": [
          "File: tests/extmod/asyncio_task_done.py.exp -> tests/extmod/asyncio_task_done.py.exp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07472d05db64a0990b4d47cb001d1a40ba78414f",
      "candidate_info": {
        "commit_hash": "07472d05db64a0990b4d47cb001d1a40ba78414f",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/07472d05db64a0990b4d47cb001d1a40ba78414f",
        "files": [
          "ports/rp2/machine_uart.c"
        ],
        "message": "rp2/machine_uart: Fix event wait in uart.flush() and uart.read().\n\nDo not wait in the worst case up to the timeout.\n\nFixes issue #13377.\n\nSigned-off-by: robert-hh <robert@hammelrath.com>",
        "before_after_code_files": [
          "ports/rp2/machine_uart.c||ports/rp2/machine_uart.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/rp2/machine_uart.c||ports/rp2/machine_uart.c": [
          "File: ports/rp2/machine_uart.c -> ports/rp2/machine_uart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:                     return i;",
          "484:                 }",
          "485:             }",
          "487:         }",
          "489:         start = mp_hal_ticks_ms(); // Inter-character timeout",
          "",
          "[Removed Lines]",
          "486:             mp_event_wait_ms(timeout - elapsed);",
          "",
          "[Added Lines]",
          "486:             mp_event_handle_nowait();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:             if (now >= timeout) {",
          "560:                 break;",
          "561:             }",
          "563:         }",
          "565:         ret = MP_STREAM_ERROR;",
          "",
          "[Removed Lines]",
          "562:             mp_event_wait_ms((timeout - now) / 1000);",
          "",
          "[Added Lines]",
          "562:             mp_event_handle_nowait();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e111793d8d6a0b921f47c7396b70a0aca1edaea5",
      "candidate_info": {
        "commit_hash": "e111793d8d6a0b921f47c7396b70a0aca1edaea5",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/e111793d8d6a0b921f47c7396b70a0aca1edaea5",
        "files": [
          "ports/nrf/drivers/secureboot/secureboot_main.c",
          "ports/nrf/main.c"
        ],
        "message": "nrf: Fix _start() build issue with CMSIS 5.9.0.\n\nThe `_start` function prototype is now declared as no-return, so `main()`\ncan't return.\n\nTo fix this, `main()` is replaced with `_start`.\n\nSigned-off-by: iabdalkader <i.abdalkader@gmail.com>",
        "before_after_code_files": [
          "ports/nrf/drivers/secureboot/secureboot_main.c||ports/nrf/drivers/secureboot/secureboot_main.c",
          "ports/nrf/main.c||ports/nrf/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ports/nrf/drivers/secureboot/secureboot_main.c||ports/nrf/drivers/secureboot/secureboot_main.c": [
          "File: ports/nrf/drivers/secureboot/secureboot_main.c -> ports/nrf/drivers/secureboot/secureboot_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     }",
          "177: }",
          "180:     configure_flash();",
          "181:     configure_ram();",
          "182:     configure_peripherals();",
          "",
          "[Removed Lines]",
          "179: int main(void) {",
          "",
          "[Added Lines]",
          "179: void _start(void) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:     while (1) {",
          "187:  ;",
          "188:     }",
          "191: }",
          "",
          "[Removed Lines]",
          "190:     return 0;",
          "193: void _start(void) {main();}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ports/nrf/main.c||ports/nrf/main.c": [
          "File: ports/nrf/main.c -> ports/nrf/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: extern uint32_t _heap_start;",
          "108: extern uint32_t _heap_end;",
          "113:     MICROPY_BOARD_STARTUP();",
          "",
          "[Removed Lines]",
          "110: int main(int argc, char **argv) {",
          "",
          "[Added Lines]",
          "110: void NORETURN _start(void) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     #endif",
          "301:     goto soft_reset;",
          "304: }",
          "306: #if !MICROPY_VFS",
          "",
          "[Removed Lines]",
          "303:     return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     printf(\"Assertion '%s' failed, at file %s:%d\\n\", expr, file, line);",
          "370:     __fatal_error(\"Assertion failed\");",
          "371: }",
          "",
          "[Removed Lines]",
          "373: void _start(void) {",
          "374:     main(0, NULL);",
          "375: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f46269a1d16a5d0890bbc97d1141af7173050013",
      "candidate_info": {
        "commit_hash": "f46269a1d16a5d0890bbc97d1141af7173050013",
        "repo": "jimmo/micropython",
        "commit_url": "https://github.com/jimmo/micropython/commit/f46269a1d16a5d0890bbc97d1141af7173050013",
        "files": [
          "extmod/asyncio/stream.py"
        ],
        "message": "extmod/asyncio: Remove non-working Stream __aenter__/__aexit__ methods.\n\nIt looks like these never worked and there are no tests for this\nfunctionality.  Furthermore, CPython doesn't support this.\n\nFixes #12995.\n\nSigned-off-by: Damien George <damien@micropython.org>",
        "before_after_code_files": [
          "extmod/asyncio/stream.py||extmod/asyncio/stream.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/micropython/micropython/pull/12644"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "extmod/asyncio/stream.py||extmod/asyncio/stream.py": [
          "File: extmod/asyncio/stream.py -> extmod/asyncio/stream.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     def get_extra_info(self, v):",
          "14:         return self.e[v]",
          "22:     def close(self):",
          "23:         pass",
          "",
          "[Removed Lines]",
          "16:     async def __aenter__(self):",
          "17:         return self",
          "19:     async def __aexit__(self, exc_type, exc, tb):",
          "20:         await self.close()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}