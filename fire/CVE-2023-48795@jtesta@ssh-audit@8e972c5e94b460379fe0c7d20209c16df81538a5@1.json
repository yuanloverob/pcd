{
  "cve_id": "CVE-2023-48795",
  "cve_desc": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
  "repo": "jtesta/ssh-audit",
  "patch_hash": "8e972c5e94b460379fe0c7d20209c16df81538a5",
  "patch_info": {
    "commit_hash": "8e972c5e94b460379fe0c7d20209c16df81538a5",
    "repo": "jtesta/ssh-audit",
    "commit_url": "https://github.com/jtesta/ssh-audit/commit/8e972c5e94b460379fe0c7d20209c16df81538a5",
    "files": [
      "README.md",
      "src/ssh_audit/ssh2_kexdb.py",
      "src/ssh_audit/ssh_audit.py",
      "test/test_ssh2.py"
    ],
    "message": "Added test for the Terrapin vulnerability (CVE-2023-48795) (#227).",
    "before_after_code_files": [
      "src/ssh_audit/ssh2_kexdb.py||src/ssh_audit/ssh2_kexdb.py",
      "src/ssh_audit/ssh_audit.py||src/ssh_audit/ssh_audit.py",
      "test/test_ssh2.py||test/test_ssh2.py"
    ]
  },
  "patch_diff": {
    "src/ssh_audit/ssh2_kexdb.py||src/ssh_audit/ssh2_kexdb.py": [
      "File: src/ssh_audit/ssh2_kexdb.py -> src/ssh_audit/ssh2_kexdb.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:     INFO_REMOVED_IN_OPENSSH69 = 'removed in OpenSSH 6.9: https://www.openssh.com/txt/release-6.9'",
      "72:     INFO_REMOVED_IN_OPENSSH70 = 'removed in OpenSSH 7.0: https://www.openssh.com/txt/release-7.0'",
      "73:     INFO_WITHDRAWN_PQ_ALG = 'the sntrup4591761 algorithm was withdrawn, as it may not provide strong post-quantum security'",
      "75:     # Maintains a dictionary per calling thread that yields its own copy of MASTER_DB.  This prevents results from one thread polluting the results of another thread.",
      "76:     DB_PER_THREAD: Dict[int, Dict[str, Dict[str, List[List[Optional[str]]]]]] = {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74:     INFO_EXTENSION_NEGOTIATION = 'pseudo-algorithm that denotes the peer supports RFC8308 extensions'",
      "75:     INFO_STRICT_KEX = 'pseudo-algorithm that denotes the peer supports a stricter key exchange method as a counter-measure to the Terrapin attack (CVE-2023-48795)'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "154:             'ecdh-sha2-wiRIU8TKjMZ418sMqlqtvQ==': [[], [FAIL_UNPROVEN]],  # sect283k1",
      "155:             'ecdh-sha2-zD/b3hu/71952ArpUG4OjQ==': [[], [FAIL_UNPROVEN, FAIL_SMALL_ECC_MODULUS]],  # sect233k1",
      "156:             'ecmqv-sha2': [[], [FAIL_UNPROVEN]],",
      "160:             # The GSS kex algorithms get special wildcard handling, since they include variable base64 data after their standard prefixes.",
      "161:             'gss-13.3.132.0.10-sha256-*': [[], [FAIL_UNKNOWN]],",
      "",
      "[Removed Lines]",
      "157:             'ext-info-c': [[]],  # Extension negotiation (RFC 8308)",
      "158:             'ext-info-s': [[]],  # Extension negotiation (RFC 8308)",
      "",
      "[Added Lines]",
      "159:             'ext-info-c': [[], [], [], [INFO_EXTENSION_NEGOTIATION]],  # Extension negotiation (RFC 8308)",
      "160:             'ext-info-s': [[], [], [], [INFO_EXTENSION_NEGOTIATION]],  # Extension negotiation (RFC 8308)",
      "161:             'kex-strict-c-v00@openssh.com': [[], [], [], [INFO_STRICT_KEX]],  # Strict KEX marker (countermeasure for CVE-2023-48795).",
      "162:             'kex-strict-s-v00@openssh.com': [[], [], [], [INFO_STRICT_KEX]],  # Strict KEX marker (countermeasure for CVE-2023-48795).",
      "",
      "---------------"
    ],
    "src/ssh_audit/ssh_audit.py||src/ssh_audit/ssh_audit.py": [
      "File: src/ssh_audit/ssh_audit.py -> src/ssh_audit/ssh_audit.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "447:         out.sep()",
      "451:     '''Perform post-processing on scan results before reporting them to the user.  Returns a list of algorithms that should not be recommended'''",
      "",
      "[Removed Lines]",
      "450: def post_process_findings(banner: Optional[Banner], algs: Algorithms) -> List[str]:",
      "",
      "[Added Lines]",
      "450: def post_process_findings(banner: Optional[Banner], algs: Algorithms, client_audit: bool) -> List[str]:",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "466:         # Ensure that this algorithm doesn't appear in the recommendations section since the user cannot control this OpenSSH bug.",
      "467:         algorithm_recommendation_suppress_list.append('diffie-hellman-group-exchange-sha256')",
      "469:     return algorithm_recommendation_suppress_list",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "469:     # Check for the Terrapin vulnerability (CVE-2023-48795), and mark the vulnerable algorithms.",
      "470:     if algs.ssh2kex is not None and \\",
      "471:        ((client_audit and 'kex-strict-c-v00@openssh.com' not in algs.ssh2kex.kex_algorithms) or (not client_audit and 'kex-strict-s-v00@openssh.com' not in algs.ssh2kex.kex_algorithms)):  # Strict KEX marker is not present.",
      "473:         def add_terrapin_warning(db: Dict[str, Dict[str, List[List[Optional[str]]]]], category: str, algorithm_name: str) -> None:",
      "474:             while len(db[category][algorithm_name]) < 3:",
      "475:                 db[category][algorithm_name].append([])",
      "477:             db[category][algorithm_name][2].append(\"vulnerable to the Terrapin attack (CVE-2023-48795), allowing message prefix truncation\")",
      "479:         db = SSH2_KexDB.get_db()",
      "481:         # Without the strict KEX marker, these algorithms are always vulnerable.",
      "482:         add_terrapin_warning(db, \"enc\", \"chacha20-poly1305\")",
      "483:         add_terrapin_warning(db, \"enc\", \"chacha20-poly1305@openssh.com\")",
      "485:         cbc_ciphers = []",
      "486:         etm_macs = []",
      "488:         # Find the list of CBC ciphers the peer supports.",
      "489:         ciphers_supported = algs.ssh2kex.client.encryption if client_audit else algs.ssh2kex.server.encryption",
      "490:         for cipher in ciphers_supported:",
      "491:             if cipher.endswith(\"-cbc\"):",
      "492:                 cbc_ciphers.append(cipher)",
      "494:         # Find the list of ETM MACs the peer supports.",
      "495:         macs_supported = algs.ssh2kex.client.mac if client_audit else algs.ssh2kex.server.mac",
      "496:         for mac in macs_supported:",
      "497:             if mac.endswith(\"-etm@openssh.com\"):",
      "498:                 etm_macs.append(mac)",
      "500:         # If at least one CBC cipher and at least one ETM MAC is supported, mark them all as vulnerable.",
      "501:         if len(cbc_ciphers) > 0 and len(etm_macs) > 0:",
      "502:             for cipher in cbc_ciphers:",
      "503:                 add_terrapin_warning(db, \"enc\", cipher)",
      "505:             for mac in etm_macs:",
      "506:                 add_terrapin_warning(db, \"mac\", mac)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "478:     algs = Algorithms(pkm, kex)",
      "480:     # Perform post-processing on the findings to make final adjustments before outputting the results.",
      "483:     with out:",
      "484:         if print_target:",
      "",
      "[Removed Lines]",
      "481:     algorithm_recommendation_suppress_list = post_process_findings(banner, algs)",
      "",
      "[Added Lines]",
      "520:     algorithm_recommendation_suppress_list = post_process_findings(banner, algs, client_audit)",
      "",
      "---------------"
    ],
    "test/test_ssh2.py||test/test_ssh2.py": [
      "File: test/test_ssh2.py -> test/test_ssh2.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "164:         self.audit(out, self._conf())",
      "165:         out.write()",
      "166:         lines = output_spy.flush()",
      "169:     def test_ssh2_server_invalid_first_packet(self, output_spy, virtual_socket):",
      "170:         vsocket = virtual_socket",
      "",
      "[Removed Lines]",
      "167:         assert len(lines) == 70",
      "",
      "[Added Lines]",
      "167:         assert len(lines) == 83",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bef8c6c0f710d102987b0f42bb7d42f694faf230",
      "candidate_info": {
        "commit_hash": "bef8c6c0f710d102987b0f42bb7d42f694faf230",
        "repo": "jtesta/ssh-audit",
        "commit_url": "https://github.com/jtesta/ssh-audit/commit/bef8c6c0f710d102987b0f42bb7d42f694faf230",
        "files": [
          "src/ssh_audit/ssh_audit.py"
        ],
        "message": "Updated notes on fixing Terrapin vulnerability.",
        "before_after_code_files": [
          "src/ssh_audit/ssh_audit.py||src/ssh_audit/ssh_audit.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ssh_audit/ssh_audit.py||src/ssh_audit/ssh_audit.py"
          ],
          "candidate": [
            "src/ssh_audit/ssh_audit.py||src/ssh_audit/ssh_audit.py"
          ]
        }
      },
      "candidate_diff": {
        "src/ssh_audit/ssh_audit.py||src/ssh_audit/ssh_audit.py": [
          "File: src/ssh_audit/ssh_audit.py -> src/ssh_audit/ssh_audit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:     # Return a note telling the user that, while this target is properly configured, if connected to a vulnerable peer, then a vulnerable connection is still possible.",
          "594:     notes = \"\"",
          "595:     if len(algs_to_note) > 0:",
          "598:     # Add the chacha ciphers, CBC ciphers, and ETM MACs to the recommendation suppression list if they are not enabled on the server.  That way they are not recommended to the user to enable if they were explicitly disabled to handle the Terrapin vulnerability.  However, they can still be recommended for disabling.",
          "599:     algorithm_recommendation_suppress_list += _get_chacha_ciphers_not_enabled(db, algs)",
          "",
          "[Removed Lines]",
          "596:         notes = \"Be aware that, while this target properly supports the strict key exchange method (via the kex-strict-?-v00@openssh.com marker) needed to protect against the Terrapin vulnerability (CVE-2023-48795), all peers must also support this feature as well, otherwise the vulnerability will still be present.  The following algorithms would allow an unpatched peer to create vulnerable SSH channels with this target: %s\" % \", \".join(algs_to_note)",
          "",
          "[Added Lines]",
          "596:         notes = \"Be aware that, while this target properly supports the strict key exchange method (via the kex-strict-?-v00@openssh.com marker) needed to protect against the Terrapin vulnerability (CVE-2023-48795), all peers must also support this feature as well, otherwise the vulnerability will still be present.  The following algorithms would allow an unpatched peer to create vulnerable SSH channels with this target: %s.  If any CBC ciphers are in this list, you may remove them while leaving the *-etm@openssh.com MACs in place; these MACs are fine while paired with non-CBC cipher types.\" % \", \".join(algs_to_note)",
          "",
          "---------------"
        ]
      }
    }
  ]
}