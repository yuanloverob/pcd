{
  "cve_id": "CVE-2024-28183",
  "cve_desc": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
  "repo": "espressif/esp-idf",
  "patch_hash": "f327ddf6adab0c28d395975785727b2feef57803",
  "patch_info": {
    "commit_hash": "f327ddf6adab0c28d395975785727b2feef57803",
    "repo": "espressif/esp-idf",
    "commit_url": "https://github.com/espressif/esp-idf/commit/f327ddf6adab0c28d395975785727b2feef57803",
    "files": [
      "components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ],
    "message": "Merge branch 'bugfix/ota_anti_rollback_checks_2_v4.4' into 'release/v4.4'\n\nfeat(bootloader_support): Read secure_version under sha256 protection (v4.4)\n\nSee merge request espressif/esp-idf!29062",
    "before_after_code_files": [
      "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h",
      "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h",
      "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c",
      "components/esp_system/startup.c||components/esp_system/startup.c",
      "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback"
    ]
  },
  "patch_diff": {
    "components/bootloader_support/include/esp_app_format.h||components/bootloader_support/include/esp_app_format.h": [
      "File: components/bootloader_support/include/esp_app_format.h -> components/bootloader_support/include/esp_app_format.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: _Static_assert(sizeof(esp_app_desc_t) == 256, \"esp_app_desc_t should be 256 bytes\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: _Static_assert(offsetof(esp_app_desc_t, secure_version) == 4, \"secure_version field must be at 4 offset\");",
      "",
      "---------------"
    ],
    "components/bootloader_support/include/esp_image_format.h||components/bootloader_support/include/esp_image_format.h": [
      "File: components/bootloader_support/include/esp_image_format.h -> components/bootloader_support/include/esp_image_format.h"
    ],
    "components/bootloader_support/src/esp_image_format.c||components/bootloader_support/src/esp_image_format.c": [
      "File: components/bootloader_support/src/esp_image_format.c -> components/bootloader_support/src/esp_image_format.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include <bootloader_sha.h>",
      "18: #include \"bootloader_util.h\"",
      "19: #include \"bootloader_common.h\"",
      "20: #include \"esp_rom_sys.h\"",
      "21: #include \"soc/soc_memory_types.h\"",
      "22: #if CONFIG_IDF_TARGET_ESP32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: #include \"esp_efuse.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: static esp_err_t process_segments(esp_image_metadata_t *data, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "85: static esp_err_t verify_image_header(uint32_t src_addr, const esp_image_header_t *image, bool silent);",
      "",
      "[Removed Lines]",
      "79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
      "",
      "[Added Lines]",
      "80: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "83: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "222:             }",
      "223:         }",
      "224:     }",
      "225: #endif // BOOTLOADER_BUILD",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "229:     bool sec_ver = false;",
      "230:     if (do_load) {",
      "231:         sec_ver = esp_efuse_check_secure_version(data->secure_version);",
      "232:         if (!sec_ver) {",
      "233:             err = ESP_FAIL;",
      "234:             goto err;",
      "235:         }",
      "236:     }",
      "238:     ESP_FAULT_ASSERT(!do_load || sec_ver == true);",
      "239: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:     uint32_t next_addr = start_segments;",
      "489:     for (int i = 0; i < data->image.segment_count; i++) {",
      "490:         esp_image_segment_header_t *header = &data->segments[i];",
      "493:         next_addr += sizeof(esp_image_segment_header_t);",
      "494:         data->segment_data[i] = next_addr;",
      "495:         next_addr += header->data_len;",
      "",
      "[Removed Lines]",
      "491:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%x\", i, next_addr);",
      "492:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "507:         ESP_LOGV(TAG, \"loading segment header %d at offset 0x%\"PRIx32, i, next_addr);",
      "508:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum, data));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "510:     return err;",
      "511: }",
      "514: {",
      "515:     esp_err_t err;",
      "",
      "[Removed Lines]",
      "513: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "529: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "568:         uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;",
      "570:         data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));",
      "572:         data_addr += data_len;",
      "573:         data_len_remain -= data_len;",
      "574:     }",
      "",
      "[Removed Lines]",
      "571:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
      "",
      "[Added Lines]",
      "587:         CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "583:     return err;",
      "584: }",
      "587: {",
      "",
      "[Removed Lines]",
      "586: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
      "",
      "[Added Lines]",
      "602: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "607: __attribute__((optimize(\"O0\")))",
      "608: static size_t process_esp_app_desc_data(const uint32_t *src, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "609: {",
      "621:     uint32_t data_buffer[2];",
      "622:     memcpy(data_buffer, src, sizeof(data_buffer));",
      "623:     assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);",
      "624:     metadata->secure_version = data_buffer[1];",
      "625:     if (checksum != NULL) {",
      "627:     }",
      "628:     if (sha_handle != NULL) {",
      "629:         bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));",
      "630:     }",
      "631:     ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);",
      "632:     ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);",
      "633:     return sizeof(data_buffer);",
      "634: }",
      "635: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "637: static esp_err_t process_segment_data(int segment, intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum, esp_image_metadata_t *metadata)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "616: #endif",
      "617:     }",
      "618:     uint32_t *dest = (uint32_t *)load_addr;",
      "621:     const uint32_t *src = data;",
      "623:     for (size_t i = 0; i < data_len; i += 4) {",
      "624:         int w_i = i / 4; // Word index",
      "625:         uint32_t w = src[w_i];",
      "",
      "[Removed Lines]",
      "619: #endif",
      "",
      "[Added Lines]",
      "670: #endif // BOOTLOADER_BUILD",
      "674: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "678:     if (segment == 0 && metadata->start_addr != ESP_BOOTLOADER_OFFSET) {",
      "679:         ESP_LOGD(TAG, \"additional anti-rollback check 0x%\"PRIx32, data_addr);",
      "681:         size_t len = process_esp_app_desc_data(src, sha_handle, checksum, metadata);",
      "682:         data_len -= len;",
      "683:         src += len / 4;",
      "685:     }",
      "686: #endif // CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "",
      "---------------"
    ],
    "components/esp_system/startup.c||components/esp_system/startup.c": [
      "File: components/esp_system/startup.c -> components/esp_system/startup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352:     esp_efuse_disable_basic_rom_console();",
      "353: #endif",
      "355: #ifdef CONFIG_SECURE_FLASH_ENC_ENABLED",
      "356:     esp_flash_encryption_init_checks();",
      "357: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355: #if CONFIG_BOOTLOADER_APP_ANTI_ROLLBACK",
      "357:     assert(esp_efuse_check_secure_version(esp_ota_get_app_description()->secure_version) == true && \"Incorrect secure version of app\");",
      "358: #endif",
      "",
      "---------------"
    ],
    "tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback||tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback": [
      "File: tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback -> tools/test_apps/system/bootloader_sections/sdkconfig.ci.anti_rollback",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y",
      "4: CONFIG_PARTITION_TABLE_CUSTOM=y",
      "5: CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions_example.csv\"",
      "",
      "[Removed Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0x9000",
      "",
      "[Added Lines]",
      "6: CONFIG_PARTITION_TABLE_OFFSET=0xA000",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e6f56087391a6d15ebf9d3df90c87a2c65643460",
      "candidate_info": {
        "commit_hash": "e6f56087391a6d15ebf9d3df90c87a2c65643460",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/e6f56087391a6d15ebf9d3df90c87a2c65643460",
        "files": [
          "components/nvs_flash/CMakeLists.txt",
          "components/nvs_flash/src/nvs_api.cpp",
          "components/nvs_flash/src/nvs_platform.cpp",
          "components/nvs_flash/src/nvs_platform.hpp",
          "components/nvs_flash/src/nvs_storage.cpp",
          "components/nvs_flash/test_nvs_host/Makefile"
        ],
        "message": "fix(nvs): Improved lockig mechanism for initialization phase",
        "before_after_code_files": [
          "components/nvs_flash/src/nvs_api.cpp||components/nvs_flash/src/nvs_api.cpp",
          "components/nvs_flash/src/nvs_platform.cpp||components/nvs_flash/src/nvs_platform.cpp",
          "components/nvs_flash/src/nvs_platform.hpp||components/nvs_flash/src/nvs_platform.hpp",
          "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/nvs_flash/src/nvs_api.cpp||components/nvs_flash/src/nvs_api.cpp": [
          "File: components/nvs_flash/src/nvs_api.cpp -> components/nvs_flash/src/nvs_api.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: extern \"C\" void nvs_dump(const char *partName);",
          "52: using namespace std;",
          "53: using namespace nvs;",
          "",
          "[Removed Lines]",
          "48: #ifndef LINUX_TARGET",
          "49: SemaphoreHandle_t nvs::Lock::mSemaphore = nullptr;",
          "50: #endif // ! LINUX_TARGET",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273: extern \"C\" esp_err_t nvs_open_from_partition(const char *part_name, const char* name, nvs_open_mode_t open_mode, nvs_handle_t *out_handle)",
          "274: {",
          "275:     Lock lock;",
          "276:     ESP_LOGD(TAG, \"%s %s %d\", __func__, name, open_mode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:     esp_err_t lock_result = Lock::init();",
          "272:     if (lock_result != ESP_OK) {",
          "273:         return lock_result;",
          "274:     }",
          "",
          "---------------"
        ],
        "components/nvs_flash/src/nvs_platform.cpp||components/nvs_flash/src/nvs_platform.cpp": [
          "File: components/nvs_flash/src/nvs_platform.cpp -> components/nvs_flash/src/nvs_platform.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"nvs_platform.hpp\"",
          "8: using namespace nvs;",
          "10: #ifdef LINUX_TARGET",
          "11: Lock::Lock() {}",
          "12: Lock::~Lock() {}",
          "13: esp_err_t nvs::Lock::init() {return ESP_OK;}",
          "14: void Lock::uninit() {}",
          "15: #else",
          "17: #include \"sys/lock.h\"",
          "19: Lock::Lock()",
          "20: {",
          "23:     _lock_acquire(&mSemaphore);",
          "24: }",
          "26: Lock::~Lock()",
          "27: {",
          "29:     _lock_release(&mSemaphore);",
          "30: }",
          "32: esp_err_t Lock::init()",
          "33: {",
          "36:     return ESP_OK;",
          "37: }",
          "39: void Lock::uninit()",
          "40: {",
          "43:     if (mSemaphore) {",
          "44:         _lock_close(&mSemaphore);",
          "45:     }",
          "46: }",
          "48: _lock_t Lock::mSemaphore = 0;",
          "50: #endif",
          "",
          "---------------"
        ],
        "components/nvs_flash/src/nvs_platform.hpp||components/nvs_flash/src/nvs_platform.hpp": [
          "File: components/nvs_flash/src/nvs_platform.hpp -> components/nvs_flash/src/nvs_platform.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #pragma once",
          "38: namespace nvs",
          "39: {",
          "59:     {",
          "80: } // namespace nvs",
          "",
          "[Removed Lines]",
          "16: #ifdef LINUX_TARGET",
          "17: namespace nvs",
          "18: {",
          "19: class Lock",
          "20: {",
          "21: public:",
          "22:     Lock() { }",
          "23:     ~Lock() { }",
          "24:     static esp_err_t init()",
          "25:     {",
          "26:         return ESP_OK;",
          "27:     }",
          "29:     static void uninit() {}",
          "30: };",
          "31: } // namespace nvs",
          "33: #else // LINUX_TARGET",
          "35: #include \"freertos/FreeRTOS.h\"",
          "36: #include \"freertos/semphr.h\"",
          "41: class Lock",
          "42: {",
          "43: public:",
          "44:     Lock()",
          "45:     {",
          "46:         if (mSemaphore) {",
          "47:             xSemaphoreTake(mSemaphore, portMAX_DELAY);",
          "48:         }",
          "49:     }",
          "51:     ~Lock()",
          "52:     {",
          "53:         if (mSemaphore) {",
          "54:             xSemaphoreGive(mSemaphore);",
          "55:         }",
          "56:     }",
          "58:     static esp_err_t init()",
          "60:         if (mSemaphore) {",
          "61:             return ESP_OK;",
          "62:         }",
          "63:         mSemaphore = xSemaphoreCreateMutex();",
          "64:         if (!mSemaphore) {",
          "65:             return ESP_ERR_NO_MEM;",
          "66:         }",
          "67:         return ESP_OK;",
          "68:     }",
          "70:     static void uninit()",
          "71:     {",
          "72:         if (mSemaphore) {",
          "73:             vSemaphoreDelete(mSemaphore);",
          "74:         }",
          "75:         mSemaphore = nullptr;",
          "76:     }",
          "78:     static SemaphoreHandle_t mSemaphore;",
          "79: };",
          "82: #endif // LINUX_TARGET",
          "",
          "[Added Lines]",
          "8: #include \"esp_err.h\"",
          "12:     class Lock",
          "14:     public:",
          "15:         Lock();",
          "16:         ~Lock();",
          "17:         static esp_err_t init();",
          "18:         static void uninit();",
          "19: #ifndef LINUX_TARGET",
          "20:     private:",
          "21:         static _lock_t mSemaphore;",
          "22: #endif",
          "23:     };",
          "",
          "---------------"
        ],
        "components/nvs_flash/src/nvs_storage.cpp||components/nvs_flash/src/nvs_storage.cpp": [
          "File: components/nvs_flash/src/nvs_storage.cpp -> components/nvs_flash/src/nvs_storage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     if (mNamespaceUsage.set(255, true) != ESP_OK) {",
          "205:         return ESP_FAIL;",
          "206:     }",
          "210:     TBlobIndexList blobIdxList;",
          "",
          "[Removed Lines]",
          "207:     mState = StorageState::ACTIVE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:     blobIdxList.clearAndFreeNodes();",
          "226: #ifdef DEBUG_STORAGE",
          "227:     debugCheck();",
          "228: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     mState = StorageState::ACTIVE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5b0b4d15078d5215874ae451311fd7d91253033",
      "candidate_info": {
        "commit_hash": "b5b0b4d15078d5215874ae451311fd7d91253033",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/b5b0b4d15078d5215874ae451311fd7d91253033",
        "files": [
          "tools/idf_tools.py"
        ],
        "message": "feat(tools): add ESP_IDF_VERSION env var to v4.4\n\nCloses https://github.com/espressif/esp-idf/issues/10677",
        "before_after_code_files": [
          "tools/idf_tools.py||tools/idf_tools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/idf_tools.py||tools/idf_tools.py": [
          "File: tools/idf_tools.py -> tools/idf_tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import sys",
          "45: import tarfile",
          "46: import time",
          "48: from ssl import SSLContext  # noqa: F401",
          "49: from tarfile import TarFile  # noqa: F401",
          "50: from zipfile import ZipFile",
          "",
          "[Removed Lines]",
          "47: from collections import OrderedDict, namedtuple",
          "",
          "[Added Lines]",
          "46: from collections import namedtuple",
          "47: from collections import OrderedDict",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1046:     return json.dumps(file_json, indent=2, separators=(',', ': '), sort_keys=True)",
          "1050:     python_ver_major_minor = '{}.{}'.format(sys.version_info.major, sys.version_info.minor)",
          "1052:     version_file_path = os.path.join(global_idf_path, 'version.txt')  # type: ignore",
          "",
          "[Removed Lines]",
          "1049: def get_python_env_path():  # type: () -> Tuple[str, str, str]",
          "",
          "[Added Lines]",
          "1049: def get_python_env_path():  # type: () -> Tuple[str, str, str, str]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1097:     idf_python_export_path = os.path.join(idf_python_env_path, subdir)",
          "1098:     virtualenv_python = os.path.join(idf_python_export_path, python_exe)",
          "1103: def get_idf_env():  # type: () -> Any",
          "",
          "[Removed Lines]",
          "1100:     return idf_python_env_path, idf_python_export_path, virtualenv_python",
          "",
          "[Added Lines]",
          "1100:     return idf_python_env_path, idf_python_export_path, virtualenv_python, idf_version",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1314:                 export_vars[k] = v",
          "1316:     current_path = os.getenv('PATH')",
          "1318:     if os.path.exists(virtualenv_python):",
          "1319:         idf_python_env_path = to_shell_specific_paths([idf_python_env_path])[0]",
          "1320:         if os.getenv('IDF_PYTHON_ENV_PATH') != idf_python_env_path:",
          "",
          "[Removed Lines]",
          "1317:     idf_python_env_path, idf_python_export_path, virtualenv_python = get_python_env_path()",
          "",
          "[Added Lines]",
          "1317:     idf_python_env_path, idf_python_export_path, virtualenv_python, idf_version = get_python_env_path()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1322:         if idf_python_export_path not in current_path:",
          "1323:             paths_to_export.append(idf_python_export_path)",
          "1325:     idf_tools_dir = os.path.join(global_idf_path, 'tools')",
          "1326:     idf_tools_dir = to_shell_specific_paths([idf_tools_dir])[0]",
          "1327:     if idf_tools_dir not in current_path:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1325:     if os.getenv('ESP_IDF_VERSION') != idf_version:",
          "1326:         export_vars['ESP_IDF_VERSION'] = idf_version",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1555: def action_install_python_env(args):  # type: ignore",
          "1556:     reinstall = args.reinstall",
          "1559:     is_virtualenv = hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)",
          "1560:     if is_virtualenv and (not os.path.exists(idf_python_env_path) or reinstall):",
          "",
          "[Removed Lines]",
          "1557:     idf_python_env_path, _, virtualenv_python = get_python_env_path()",
          "",
          "[Added Lines]",
          "1560:     idf_python_env_path, _, virtualenv_python, _ = get_python_env_path()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "156429b56a7a5bd64c75442f615e8bd7ffae6e56",
      "candidate_info": {
        "commit_hash": "156429b56a7a5bd64c75442f615e8bd7ffae6e56",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/156429b56a7a5bd64c75442f615e8bd7ffae6e56",
        "files": [
          "components/nvs_flash/src/nvs_page.cpp"
        ],
        "message": "fix(nvs): Fixed Page::findItem performance degradation caused by wrong condition before hash map use\n\nThe condition enabling use of hash map when page is searched for Item was modified\nto correct the bug introduced by commit addressing delete of any BLOB_INDEX Items.\nThis correction returns the performance of findItem to the state before previous change.",
        "before_after_code_files": [
          "components/nvs_flash/src/nvs_page.cpp||components/nvs_flash/src/nvs_page.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/nvs_flash/src/nvs_page.cpp||components/nvs_flash/src/nvs_page.cpp": [
          "File: components/nvs_flash/src/nvs_page.cpp -> components/nvs_flash/src/nvs_page.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "911:         size_t cachedIndex = mHashList.find(start, Item(nsIndex, datatype, 0, key, chunkIdx));",
          "912:         if (cachedIndex < ENTRY_COUNT) {",
          "913:             start = cachedIndex;",
          "",
          "[Removed Lines]",
          "910:     if (nsIndex != NS_ANY && key != NULL && (datatype == ItemType::BLOB_DATA && chunkIdx != CHUNK_ANY)) {",
          "",
          "[Added Lines]",
          "910:     if (nsIndex != NS_ANY && key != NULL && (datatype != ItemType::BLOB_DATA || chunkIdx != CHUNK_ANY)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ca03fc6005211b34d539f21bd4d130d874b49a0",
      "candidate_info": {
        "commit_hash": "6ca03fc6005211b34d539f21bd4d130d874b49a0",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/6ca03fc6005211b34d539f21bd4d130d874b49a0",
        "files": [
          "components/bt/common/btc/profile/esp/blufi/include/blufi_int.h",
          "components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h",
          "components/bt/common/btc/profile/esp/include/btc_blufi_prf.h"
        ],
        "message": "fix(bt/blufi): Fixed BluFi module link error(C++ hybrid compilation)",
        "before_after_code_files": [
          "components/bt/common/btc/profile/esp/blufi/include/blufi_int.h||components/bt/common/btc/profile/esp/blufi/include/blufi_int.h",
          "components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h||components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h",
          "components/bt/common/btc/profile/esp/include/btc_blufi_prf.h||components/bt/common/btc/profile/esp/include/btc_blufi_prf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "components/bt/common/btc/profile/esp/blufi/include/blufi_int.h||components/bt/common/btc/profile/esp/blufi/include/blufi_int.h": [
          "File: components/bt/common/btc/profile/esp/blufi/include/blufi_int.h -> components/bt/common/btc/profile/esp/blufi/include/blufi_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #ifndef __BLUFI_INT_H__",
          "16: #define __BLUFI_INT_H__",
          "18: #include \"btc/btc_task.h\"",
          "19: #include \"esp_blufi_api.h\"",
          "20: #if (BLUFI_INCLUDED == TRUE)",
          "22: #define BTC_BLUFI_GREAT_VER   0x01  //Version + Subversion",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #ifdef __cplusplus",
          "14: extern \"C\" {",
          "15: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: void btc_blufi_cb_deep_free(btc_msg_t *msg);",
          "",
          "[Removed Lines]",
          "205: #endif  ///BLUFI_INCLUDED == TRUE",
          "",
          "[Added Lines]",
          "201: #endif ///BLUFI_INCLUDED == TRUE",
          "203: #ifdef __cplusplus",
          "204: }",
          "205: #endif",
          "",
          "---------------"
        ],
        "components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h||components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h": [
          "File: components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h -> components/bt/common/btc/profile/esp/blufi/include/esp_blufi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include \"esp_gap_ble_api.h\"",
          "14: #endif",
          "16: #define BLUFI_APP_UUID      0xFFFF",
          "17: #define BLUFI_DEVICE_NAME            \"BLUFI_DEVICE\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifdef __cplusplus",
          "23: extern \"C\" {",
          "24: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: void esp_blufi_send_encap(void *arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #ifdef __cplusplus",
          "88: }",
          "89: #endif",
          "",
          "---------------"
        ],
        "components/bt/common/btc/profile/esp/include/btc_blufi_prf.h||components/bt/common/btc/profile/esp/include/btc_blufi_prf.h": [
          "File: components/bt/common/btc/profile/esp/include/btc_blufi_prf.h -> components/bt/common/btc/profile/esp/include/btc_blufi_prf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define ESP_BLUFI_SUCCESS 0x00",
          "30: #endif",
          "32: #define BT_BD_ADDR_STR         \"%02x:%02x:%02x:%02x:%02x:%02x\"",
          "33: #define BT_BD_ADDR_HEX(addr)   addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #ifdef __cplusplus",
          "26: extern \"C\" {",
          "27: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: uint16_t btc_blufi_get_version(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: #ifdef __cplusplus",
          "109: }",
          "110: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6f12bdf29cc2e610915de5fb56bda3f5680fea9",
      "candidate_info": {
        "commit_hash": "c6f12bdf29cc2e610915de5fb56bda3f5680fea9",
        "repo": "espressif/esp-idf",
        "commit_url": "https://github.com/espressif/esp-idf/commit/c6f12bdf29cc2e610915de5fb56bda3f5680fea9",
        "files": [
          "examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c"
        ],
        "message": "fix(bt/example): Use correct struct type",
        "before_after_code_files": [
          "examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c||examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/dahanzimin/esp-idf/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c||examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c": [
          "File: examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c -> examples/bluetooth/bluedroid/ble/gatt_client/main/gattc_demo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:             break;",
          "133:         }",
          "134:         ESP_LOGI(GATTC_TAG, \"discover service complete conn_id %d\", param->dis_srvc_cmpl.conn_id);",
          "136:         break;",
          "137:     case ESP_GATTC_CFG_MTU_EVT:",
          "138:         if (param->cfg_mtu.status != ESP_GATT_OK){",
          "",
          "[Removed Lines]",
          "135:         esp_ble_gattc_search_service(gattc_if, param->cfg_mtu.conn_id, &remote_filter_service_uuid);",
          "",
          "[Added Lines]",
          "135:         esp_ble_gattc_search_service(gattc_if, param->dis_srvc_cmpl.conn_id, &remote_filter_service_uuid);",
          "",
          "---------------"
        ]
      }
    }
  ]
}