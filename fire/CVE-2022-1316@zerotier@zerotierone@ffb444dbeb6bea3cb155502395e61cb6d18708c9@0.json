{
  "cve_id": "CVE-2022-1316",
  "cve_desc": "Incorrect Permission Assignment for Critical Resource in GitHub repository zerotier/zerotierone prior to 1.8.8. Local Privilege Escalation\n\n",
  "repo": "zerotier/zerotierone",
  "patch_hash": "ffb444dbeb6bea3cb155502395e61cb6d18708c9",
  "patch_info": {
    "commit_hash": "ffb444dbeb6bea3cb155502395e61cb6d18708c9",
    "repo": "zerotier/zerotierone",
    "commit_url": "https://github.com/zerotier/zerotierone/commit/ffb444dbeb6bea3cb155502395e61cb6d18708c9",
    "files": [
      "debian/changelog",
      "ext/installfiles/mac/ZeroTier One.pkgproj",
      "ext/installfiles/windows/ZeroTier One.aip",
      "version.h",
      "zerotier-one.spec"
    ],
    "message": "1.8.8 bump",
    "before_after_code_files": [
      "version.h||version.h",
      "zerotier-one.spec||zerotier-one.spec"
    ]
  },
  "patch_diff": {
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "30: #define ZEROTIER_ONE_VERSION_REVISION 7",
      "",
      "[Added Lines]",
      "30: #define ZEROTIER_ONE_VERSION_REVISION 8",
      "",
      "---------------"
    ],
    "zerotier-one.spec||zerotier-one.spec": [
      "File: zerotier-one.spec -> zerotier-one.spec",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: Name:           zerotier-one",
      "3: Release:        1%{?dist}",
      "4: Summary:        ZeroTier network virtualization service",
      "",
      "[Removed Lines]",
      "2: Version:        1.8.7",
      "",
      "[Added Lines]",
      "2: Version:        1.8.8",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "165: %endif",
      "167: %changelog",
      "169: - see https://github.com/zerotier/ZeroTierOne for release notes",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169: - see https://github.com/zerotier/ZeroTierOne for release notes",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2a981f353818070568c8649875f3af7b3c9c1fc",
      "candidate_info": {
        "commit_hash": "b2a981f353818070568c8649875f3af7b3c9c1fc",
        "repo": "zerotier/zerotierone",
        "commit_url": "https://github.com/zerotier/zerotierone/commit/b2a981f353818070568c8649875f3af7b3c9c1fc",
        "files": [
          "RELEASE-NOTES.md",
          "debian/changelog",
          "ext/installfiles/mac/ZeroTier One.pkgproj",
          "ext/installfiles/windows/ZeroTier One.aip",
          "version.h",
          "zerotier-one.spec"
        ],
        "message": "1.10.5 (#1905)\n\n* 1.10.5 bump\n\n* 1.10.5 for Windows\n\n* 1.10.5",
        "before_after_code_files": [
          "version.h||version.h",
          "zerotier-one.spec||zerotier-one.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ],
          "candidate": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ]
        }
      },
      "candidate_diff": {
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 4",
          "",
          "[Added Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 5",
          "",
          "---------------"
        ],
        "zerotier-one.spec||zerotier-one.spec": [
          "File: zerotier-one.spec -> zerotier-one.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Name:           zerotier-one",
          "3: Release:        1%{?dist}",
          "4: Summary:        ZeroTier network virtualization service",
          "",
          "[Removed Lines]",
          "2: Version:        1.10.4",
          "",
          "[Added Lines]",
          "2: Version:        1.10.5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: %endif",
          "139: %changelog",
          "141: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4508a6687eb69d8985bbce36ff44f2491c2747a0",
      "candidate_info": {
        "commit_hash": "4508a6687eb69d8985bbce36ff44f2491c2747a0",
        "repo": "zerotier/zerotierone",
        "commit_url": "https://github.com/zerotier/zerotierone/commit/4508a6687eb69d8985bbce36ff44f2491c2747a0",
        "files": [
          "debian/changelog",
          "ext/installfiles/mac/ZeroTier One.pkgproj",
          "ext/installfiles/windows/Prerequisites/WebView2/MicrosoftEdgeWebview2Setup.exe",
          "one.cpp",
          "version.h",
          "zerotier-one.spec"
        ],
        "message": "Version bump.",
        "before_after_code_files": [
          "one.cpp||one.cpp",
          "version.h||version.h",
          "zerotier-one.spec||zerotier-one.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ],
          "candidate": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ]
        }
      },
      "candidate_diff": {
        "one.cpp||one.cpp": [
          "File: one.cpp -> one.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:          int64_t expiresIn = ((int64_t)authenticationExpiryTime - OSUtils::now()) / 1000LL;",
          "779:          if (expiresIn >= 0) {",
          "780:           printf(\"    AUTH OK, expires in: %lld seconds\" ZT_EOL_S, expiresIn);",
          "783:          }",
          "784:         }",
          "785:        }",
          "",
          "[Removed Lines]",
          "781:          } else {",
          "782:           printf(\"    AUTH OK, refreshing...\" ZT_EOL_S);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "25: #define ZEROTIER_ONE_VERSION_MINOR 8",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 10",
          "",
          "[Added Lines]",
          "25: #define ZEROTIER_ONE_VERSION_MINOR 10",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 1",
          "",
          "---------------"
        ],
        "zerotier-one.spec||zerotier-one.spec": [
          "File: zerotier-one.spec -> zerotier-one.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Name:           zerotier-one",
          "3: Release:        1%{?dist}",
          "4: Summary:        ZeroTier network virtualization service",
          "",
          "[Removed Lines]",
          "2: Version:        1.8.10",
          "",
          "[Added Lines]",
          "2: Version:        1.10.1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: %endif",
          "167: %changelog",
          "169: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee0a194b2594d5e4e9ea23751fbd7835583a27c3",
      "candidate_info": {
        "commit_hash": "ee0a194b2594d5e4e9ea23751fbd7835583a27c3",
        "repo": "zerotier/zerotierone",
        "commit_url": "https://github.com/zerotier/zerotierone/commit/ee0a194b2594d5e4e9ea23751fbd7835583a27c3",
        "files": [
          "RELEASE-NOTES.md",
          "node/Constants.hpp",
          "node/IncomingPacket.cpp",
          "node/Membership.hpp",
          "node/Network.cpp",
          "node/Peer.hpp",
          "one.cpp",
          "version.h"
        ],
        "message": "Several more SSO/OIDC related fixes, and bump version to 1.8.9.",
        "before_after_code_files": [
          "node/Constants.hpp||node/Constants.hpp",
          "node/IncomingPacket.cpp||node/IncomingPacket.cpp",
          "node/Membership.hpp||node/Membership.hpp",
          "node/Network.cpp||node/Network.cpp",
          "node/Peer.hpp||node/Peer.hpp",
          "one.cpp||one.cpp",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "node/Constants.hpp||node/Constants.hpp": [
          "File: node/Constants.hpp -> node/Constants.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "530: #define ZT_PUSH_DIRECT_PATHS_MAX_PER_SCOPE_AND_FAMILY 8",
          "",
          "[Removed Lines]",
          "535: #define ZT_PEER_CREDENTIALS_CUTOFF_TIME 60000",
          "540: #define ZT_PEER_CREDENTIALS_CUTOFF_LIMIT 15",
          "",
          "[Added Lines]",
          "535: #define ZT_PEER_CREDENTIALS_RATE_LIMIT 1000",
          "",
          "---------------"
        ],
        "node/IncomingPacket.cpp||node/IncomingPacket.cpp": [
          "File: node/IncomingPacket.cpp -> node/IncomingPacket.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1069:    const int64_t now = RR->node->now();",
          "1070:    outp.armor(peer->key(),true,peer->aesKeysIfSupported());",
          "1071:    peer->recordOutgoingPacket(_path,outp.packetId(),outp.payloadLength(),outp.verb(),ZT_QOS_NO_FLOW,now);",
          "1075:   }",
          "1076:  }",
          "",
          "[Removed Lines]",
          "1072:    if (!_path->send(RR,tPtr,outp.data(),outp.size(),RR->node->now())) {",
          "1074:    }",
          "",
          "[Added Lines]",
          "1070:    _path->send(RR,tPtr,outp.data(),outp.size(),RR->node->now());",
          "",
          "---------------"
        ],
        "node/Membership.hpp||node/Membership.hpp": [
          "File: node/Membership.hpp -> node/Membership.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:  void pushCredentials(const RuntimeEnvironment *RR,void *tPtr,const int64_t now,const Address &peerAddress,const NetworkConfig &nconf);",
          "67:  inline int64_t lastPushedCredentials() { return _lastPushedCredentials; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:  inline int64_t comTimestamp() { return _com.timestamp(); }",
          "69:  inline int64_t comRevocationThreshold() { return _comRevocationThreshold; }",
          "",
          "---------------"
        ],
        "node/Network.cpp||node/Network.cpp": [
          "File: node/Network.cpp -> node/Network.cpp"
        ],
        "node/Peer.hpp||node/Peer.hpp": [
          "File: node/Peer.hpp -> node/Peer.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:  inline bool rateGateCredentialsReceived(const int64_t now)",
          "392:  {",
          "398:  }",
          "",
          "[Removed Lines]",
          "393:   if ((now - _lastCredentialsReceived) <= ZT_PEER_CREDENTIALS_CUTOFF_TIME)",
          "394:    ++_credentialsCutoffCount;",
          "395:   else _credentialsCutoffCount = 0;",
          "396:   _lastCredentialsReceived = now;",
          "397:   return (_credentialsCutoffCount < ZT_PEER_CREDENTIALS_CUTOFF_LIMIT);",
          "",
          "[Added Lines]",
          "393:   if ((now - _lastCredentialsReceived) >= ZT_PEER_CREDENTIALS_RATE_LIMIT) {",
          "394:    _lastCredentialsReceived = now;",
          "395:    return true;",
          "396:   }",
          "397:   return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:  Identity _id;",
          "565:  unsigned int _directPathPushCutoffCount;",
          "567:  unsigned int _echoRequestCutoffCount;",
          "569:  AtomicCounter __refCount;",
          "",
          "[Removed Lines]",
          "566:  unsigned int _credentialsCutoffCount;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "one.cpp||one.cpp": [
          "File: one.cpp -> one.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "775:         if (status == \"AUTHENTICATION_REQUIRED\") {",
          "776:          printf(\"    AUTH EXPIRED, URL: %s\" ZT_EOL_S, OSUtils::jsonString(n[\"authenticationURL\"], \"(null)\").c_str());",
          "777:         } else if (status == \"OK\") {",
          "779:         }",
          "780:        }",
          "781:       }",
          "",
          "[Removed Lines]",
          "778:          printf(\"    AUTH OK, expires in: %lld seconds\" ZT_EOL_S, ((int64_t)authenticationExpiryTime - OSUtils::now()) / 1000LL);",
          "",
          "[Added Lines]",
          "778:          int64_t expiresIn = ((int64_t)authenticationExpiryTime - OSUtils::now()) / 1000LL;",
          "779:          if (expiresIn >= 0) {",
          "780:           printf(\"    AUTH OK, expires in: %lld seconds\" ZT_EOL_S, expiresIn);",
          "781:          } else {",
          "782:           printf(\"    AUTH OK, refreshing...\" ZT_EOL_S);",
          "783:          }",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 8",
          "",
          "[Added Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 9",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a872cc341866f84f07fd58a5d26bcfdad6714174",
      "candidate_info": {
        "commit_hash": "a872cc341866f84f07fd58a5d26bcfdad6714174",
        "repo": "zerotier/zerotierone",
        "commit_url": "https://github.com/zerotier/zerotierone/commit/a872cc341866f84f07fd58a5d26bcfdad6714174",
        "files": [
          "RELEASE-NOTES.md",
          "debian/changelog",
          "ext/installfiles/mac/ZeroTier One.pkgproj",
          "ext/installfiles/windows/ZeroTier One.aip",
          "java/jni/ZT_jnicache.cpp",
          "java/jni/ZT_jniutils.cpp",
          "java/jni/com_zerotierone_sdk_Node.cpp",
          "java/src/com/zerotier/sdk/VirtualNetworkConfig.java",
          "node/Peer.cpp",
          "osdep/Binder.hpp",
          "service/OneService.cpp",
          "version.h",
          "zerotier-one.spec"
        ],
        "message": "1.10.6 merge to main (#1930)\n\n* add note about forceTcpRelay\n\n* Create a sample systemd unit for tcp proxy\n\n* set gitattributes for rust & cargo so hashes dont conflict on Windows\n\n* Revert \"set gitattributes for rust & cargo so hashes dont conflict on Windows\"\n\nThis reverts commit 032dc5c108195f6bbc2e224f00da5b785df4b7f9.\n\n* Turn off autocrlf for rust source\n\nDoesn't appear to play nice well when it comes to git and vendored cargo package hashes\n\n* Fix #1883 (#1886)\n\nStill unknown as to why, but the call to `nc->GetProperties()` can fail\nwhen setting a friendly name on the Windows virtual ethernet adapter.\nEnsure that `ncp` is not null before continuing and accessing the device\nGUID.\n\n* Don't vendor packages for zeroidc (#1885)\n\n* Added docker environment way to join networks (#1871)\n\n* add StringUtils\n\n* fix headers\nuse recommended headers and remove unused headers\n\n* move extern \"C\"\nonly JNI functions need to be exported\n\n* cleanup\n\n* fix ANDROID-50: RESULT_ERROR_BAD_PARAMETER typo\n\n* fix typo in log message\n\n* fix typos in JNI method signatures\n\n* fix typo\n\n* fix ANDROID-51: fieldName is uninitialized\n\n* fix ANDROID-35: memory leak\n\n* fix missing DeleteLocalRef in loops\n\n* update to use unique error codes\n\n* add GETENV macro\n\n* add LOG_TAG defines\n\n* ANDROID-48: add ZT_jnicache.cpp\n\n* ANDROID-48: use ZT_jnicache.cpp and remove ZT_jnilookup.cpp and ZT_jniarray.cpp\n\n* add Event.fromInt\n\n* add PeerRole.fromInt\n\n* add ResultCode.fromInt\n\n* fix ANDROID-36: issues with ResultCode\n\n* add VirtualNetworkConfigOperation.fromInt\n\n* fix ANDROID-40: VirtualNetworkConfigOperation out-of-sync with ZT_VirtualNetworkConfigOperation enum\n\n* add VirtualNetworkStatus.fromInt\n\n* fix ANDROID-37: VirtualNetworkStatus out-of-sync with ZT_VirtualNetworkStatus enum\n\n* add VirtualNetworkType.fromInt\n\n* make NodeStatus a plain data class\n\n* fix ANDROID-52: synchronization bug with nodeMap\n\n* Node init work: separate Node construction and init\n\n* add Node.toString\n\n* make PeerPhysicalPath a plain data class\n\n* remove unused PeerPhysicalPath.fixed\n\n* add array functions\n\n* make Peer a plain data class\n\n* make Version a plain data class\n\n* fix ANDROID-42: copy/paste error\n\n* fix ANDROID-49: VirtualNetworkConfig.equals is wrong\n\n* reimplement VirtualNetworkConfig.equals\n\n* reimplement VirtualNetworkConfig.compareTo\n\n* add VirtualNetworkConfig.hashCode\n\n* make VirtualNetworkConfig a plain data class\n\n* remove unused VirtualNetworkConfig.enabled\n\n* reimplement VirtualNetworkDNS.equals\n\n* add VirtualNetworkDNS.hashCode\n\n* make VirtualNetworkDNS a plain data class\n\n* reimplement VirtualNetworkRoute.equals\n\n* reimplement VirtualNetworkRoute.compareTo\n\n* reimplement VirtualNetworkRoute.toString\n\n* add VirtualNetworkRoute.hashCode\n\n* make VirtualNetworkRoute a plain data class\n\n* add isSocketAddressEmpty\n\n* add addressPort\n\n* add fromSocketAddressObject\n\n* invert logic in a couple of places and return early\n\n* newInetAddress and newInetSocketAddress work\nallow newInetSocketAddress to return NULL if given empty address\n\n* fix ANDROID-38: stack corruption in onSendPacketRequested\n\n* use GETENV macro\n\n* JniRef work\nJniRef does not use callbacks struct, so remove\nfix NewGlobalRef / DeleteGlobalRef mismatch\n\n* use PRId64 macros\n\n* switch statement work\n\n* comments and logging\n\n* Modifier 'public' is redundant for interface members\n\n* NodeException can be made a checked Exception\n\n* 'NodeException' does not define a 'serialVersionUID' field\n\n* 'finalize()' should not be overridden\nthis is fine to do because ZeroTierOneService calls close() when it is done\n\n* error handling, error reporting, asserts, logging\n\n* simplify loadLibrary\n\n* rename Node.networks -> Node.networkConfigs\n\n* Windows file permissions fix (#1887)\n\n* Allow macOS interfaces to use multiple IP addresses (#1879)\n\nCo-authored-by: Sean OMeara <someara@users.noreply.github.com>\nCo-authored-by: Grant Limberg <glimberg@users.noreply.github.com>\n\n* Fix condition where full HELLOs might not be sent when necessary (#1877)\n\nCo-authored-by: Grant Limberg <glimberg@users.noreply.github.com>\n\n* 1.10.4 version bumps\n\n* Add security policy to repo (#1889)\n\n* [+] add e2k64 arch (#1890)\n\n* temp fix for ANDROID-56: crash inside newNetworkConfig from too many args\n\n* 1.10.4 release notes\n\n* Windows 1.10.4 Advanced Installer bump\n\n* Revert \"temp fix for ANDROID-56: crash inside newNetworkConfig from too many args\"\n\nThis reverts commit dd627cd7f44ad623a110bb14f72d0bea72a09e30.\n\n* actual fix for ANDROID-56: crash inside newNetworkConfig\ncast all arguments to varargs functions as good style\n\n* Fix addIp being called with applied ips (#1897)\n\nThis was getting called outside of the check for existing ips\nBecause of the added ifdef and a brace getting moved to the\nwrong place.\n\n```\nif (! n.tap()->addIp(*ip)) {\n\tfprintf(stderr, \"ERROR: unable to add ip address %s\" ZT_EOL_S, ip->toString(ipbuf));\n}\nWinFWHelper::newICMPRule(*ip, n.config().nwid);\n\n```\n\n* 1.10.5 (#1905)\n\n* 1.10.5 bump\n\n* 1.10.5 for Windows\n\n* 1.10.5\n\n* Prevent path-learning loops (#1914)\n\n* Prevent path-learning loops\n\n* Only allow new overwrite if not bonded\n\n* fix binding temporary ipv6 addresses on macos (#1910)\n\nThe check code wasn't running.\n\nI don't know why !defined(TARGET_OS_IOS) would exclude code on\ndesktop macOS. I did a quick search and changed it to defined(TARGET_OS_MAC).\nNot 100% sure what the most correct solution there is.\n\nYou can verify the old and new versions with\n\n`ifconfig | grep temporary`\n\nplus\n\n`zerotier-cli info -j` -> listeningOn\n\n* 1.10.6 (#1929)\n\n* 1.10.5 bump\n\n* 1.10.6\n\n* 1.10.6 AIP for Windows.\n\n---------\n\nCo-authored-by: travis laduke <travisladuke@gmail.com>\nCo-authored-by: Grant Limberg <grant.limberg@zerotier.com>\nCo-authored-by: Grant Limberg <glimberg@users.noreply.github.com>\nCo-authored-by: Leonardo Amaral <leleobhz@users.noreply.github.com>\nCo-authored-by: Brenton Bostick <bostick@gmail.com>\nCo-authored-by: Sean OMeara <someara@users.noreply.github.com>\nCo-authored-by: Joseph Henry <joseph-henry@users.noreply.github.com>\nCo-authored-by: Roman Peshkichev <roman.peshkichev@gmail.com>",
        "before_after_code_files": [
          "java/jni/ZT_jnicache.cpp||java/jni/ZT_jnicache.cpp",
          "java/jni/ZT_jniutils.cpp||java/jni/ZT_jniutils.cpp",
          "java/jni/com_zerotierone_sdk_Node.cpp||java/jni/com_zerotierone_sdk_Node.cpp",
          "java/src/com/zerotier/sdk/VirtualNetworkConfig.java||java/src/com/zerotier/sdk/VirtualNetworkConfig.java",
          "node/Peer.cpp||node/Peer.cpp",
          "osdep/Binder.hpp||osdep/Binder.hpp",
          "service/OneService.cpp||service/OneService.cpp",
          "version.h||version.h",
          "zerotier-one.spec||zerotier-one.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ],
          "candidate": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ]
        }
      },
      "candidate_diff": {
        "java/jni/ZT_jnicache.cpp||java/jni/ZT_jnicache.cpp": [
          "File: java/jni/ZT_jnicache.cpp -> java/jni/ZT_jnicache.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     EXCEPTIONANDNULLCHECK(Peer_ctor = env->GetMethodID(Peer_class, \"<init>\", \"(JIIIILcom/zerotier/sdk/PeerRole;[Lcom/zerotier/sdk/PeerPhysicalPath;)V\"));",
          "177:     EXCEPTIONANDNULLCHECK(Version_ctor = env->GetMethodID(Version_class, \"<init>\", \"(III)V\"));",
          "178:     EXCEPTIONANDNULLCHECK(VirtualNetworkConfigListener_onNetworkConfigurationUpdated_method = env->GetMethodID(VirtualNetworkConfigListener_class, \"onNetworkConfigurationUpdated\", \"(JLcom/zerotier/sdk/VirtualNetworkConfigOperation;Lcom/zerotier/sdk/VirtualNetworkConfig;)I\"));",
          "188:     EXCEPTIONANDNULLCHECK(VirtualNetworkDNS_ctor = env->GetMethodID(VirtualNetworkDNS_class, \"<init>\", \"(Ljava/lang/String;Ljava/util/ArrayList;)V\"));",
          "189:     EXCEPTIONANDNULLCHECK(VirtualNetworkFrameListener_onVirtualNetworkFrame_method = env->GetMethodID(VirtualNetworkFrameListener_class, \"onVirtualNetworkFrame\", \"(JJJJJ[B)V\"));",
          "190:     EXCEPTIONANDNULLCHECK(VirtualNetworkRoute_ctor = env->GetMethodID(VirtualNetworkRoute_class, \"<init>\", \"(Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;II)V\"));",
          "",
          "[Removed Lines]",
          "185:     EXCEPTIONANDNULLCHECK(VirtualNetworkConfig_ctor = env->GetMethodID(VirtualNetworkConfig_class, \"<init>\", \"(JJLjava/lang/String;Lcom/zerotier/sdk/VirtualNetworkStatus;Lcom/zerotier/sdk/VirtualNetworkType;IZZZ[Ljava/net/InetSocketAddress;[Lcom/zerotier/sdk/VirtualNetworkRoute;Lcom/zerotier/sdk/VirtualNetworkDNS;)V\"));",
          "",
          "[Added Lines]",
          "179:     EXCEPTIONANDNULLCHECK(VirtualNetworkConfig_ctor = env->GetMethodID(VirtualNetworkConfig_class, \"<init>\", \"(JJLjava/lang/String;Lcom/zerotier/sdk/VirtualNetworkStatus;Lcom/zerotier/sdk/VirtualNetworkType;IZZZIJ[Ljava/net/InetSocketAddress;[Lcom/zerotier/sdk/VirtualNetworkRoute;Lcom/zerotier/sdk/VirtualNetworkDNS;)V\"));",
          "",
          "---------------"
        ],
        "java/jni/ZT_jniutils.cpp||java/jni/ZT_jniutils.cpp": [
          "File: java/jni/ZT_jniutils.cpp -> java/jni/ZT_jniutils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: jobject createResultObject(JNIEnv *env, ZT_ResultCode code)",
          "33: {",
          "35:     if(env->ExceptionCheck() || resultObject == NULL) {",
          "36:         LOGE(\"Error creating ResultCode object\");",
          "37:         return NULL;",
          "",
          "[Removed Lines]",
          "34:     jobject resultObject = env->CallStaticObjectMethod(ResultCode_class, ResultCode_fromInt_method, code);",
          "",
          "[Added Lines]",
          "34:     jobject resultObject = env->CallStaticObjectMethod(ResultCode_class, ResultCode_fromInt_method, (jint)code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: jobject createVirtualNetworkStatus(JNIEnv *env, ZT_VirtualNetworkStatus status)",
          "45: {",
          "47:     if (env->ExceptionCheck() || statusObject == NULL) {",
          "48:         LOGE(\"Error creating VirtualNetworkStatus object\");",
          "49:         return NULL;",
          "",
          "[Removed Lines]",
          "46:     jobject statusObject = env->CallStaticObjectMethod(VirtualNetworkStatus_class, VirtualNetworkStatus_fromInt_method, status);",
          "",
          "[Added Lines]",
          "46:     jobject statusObject = env->CallStaticObjectMethod(VirtualNetworkStatus_class, VirtualNetworkStatus_fromInt_method, (jint)status);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: jobject createEvent(JNIEnv *env, ZT_Event event)",
          "56: {",
          "58:     if (env->ExceptionCheck() || eventObject == NULL) {",
          "59:         LOGE(\"Error creating Event object\");",
          "60:         return NULL;",
          "",
          "[Removed Lines]",
          "57:     jobject eventObject = env->CallStaticObjectMethod(Event_class, Event_fromInt_method, event);",
          "",
          "[Added Lines]",
          "57:     jobject eventObject = env->CallStaticObjectMethod(Event_class, Event_fromInt_method, (jint)event);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66: jobject createPeerRole(JNIEnv *env, ZT_PeerRole role)",
          "67: {",
          "69:     if (env->ExceptionCheck() || peerRoleObject == NULL) {",
          "70:         LOGE(\"Error creating PeerRole object\");",
          "71:         return NULL;",
          "",
          "[Removed Lines]",
          "68:     jobject peerRoleObject = env->CallStaticObjectMethod(PeerRole_class, PeerRole_fromInt_method, role);",
          "",
          "[Added Lines]",
          "68:     jobject peerRoleObject = env->CallStaticObjectMethod(PeerRole_class, PeerRole_fromInt_method, (jint)role);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77: jobject createVirtualNetworkType(JNIEnv *env, ZT_VirtualNetworkType type)",
          "78: {",
          "80:     if (env->ExceptionCheck() || vntypeObject == NULL) {",
          "81:         LOGE(\"Error creating VirtualNetworkType object\");",
          "82:         return NULL;",
          "",
          "[Removed Lines]",
          "79:     jobject vntypeObject = env->CallStaticObjectMethod(VirtualNetworkType_class, VirtualNetworkType_fromInt_method, type);",
          "",
          "[Added Lines]",
          "79:     jobject vntypeObject = env->CallStaticObjectMethod(VirtualNetworkType_class, VirtualNetworkType_fromInt_method, (jint)type);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "88: jobject createVirtualNetworkConfigOperation(JNIEnv *env, ZT_VirtualNetworkConfigOperation op)",
          "89: {",
          "91:     if (env->ExceptionCheck() || vnetConfigOpObject == NULL) {",
          "92:         LOGE(\"Error creating VirtualNetworkConfigOperation object\");",
          "93:         return NULL;",
          "",
          "[Removed Lines]",
          "90:     jobject vnetConfigOpObject = env->CallStaticObjectMethod(VirtualNetworkConfigOperation_class, VirtualNetworkConfigOperation_fromInt_method, op);",
          "",
          "[Added Lines]",
          "90:     jobject vnetConfigOpObject = env->CallStaticObjectMethod(VirtualNetworkConfigOperation_class, VirtualNetworkConfigOperation_fromInt_method, (jint)op);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "113:             }",
          "115:             inetAddressObj = env->CallStaticObjectMethod(",
          "117:         }",
          "118:         break;",
          "119:         case AF_INET:",
          "",
          "[Removed Lines]",
          "116:                 InetAddress_class, InetAddress_getByAddress_method, buff);",
          "",
          "[Added Lines]",
          "116:                 InetAddress_class, InetAddress_getByAddress_method, (jbyteArray)buff);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "127:             }",
          "129:             inetAddressObj = env->CallStaticObjectMethod(",
          "131:         }",
          "132:         break;",
          "133:         default:",
          "",
          "[Removed Lines]",
          "130:                 InetAddress_class, InetAddress_getByAddress_method, buff);",
          "",
          "[Added Lines]",
          "130:                 InetAddress_class, InetAddress_getByAddress_method, (jbyteArray)buff);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "191:     int port = addressPort(addr);",
          "194:     if(env->ExceptionCheck() || inetSocketAddressObject == NULL) {",
          "195:         LOGE(\"Error creating InetSocketAddress object\");",
          "196:         return NULL;",
          "",
          "[Removed Lines]",
          "193:     jobject inetSocketAddressObject = env->NewObject(InetSocketAddress_class, InetSocketAddress_ctor, inetAddressObject, port);",
          "",
          "[Added Lines]",
          "193:     jobject inetSocketAddressObject = env->NewObject(InetSocketAddress_class, InetSocketAddress_ctor, (jobject)inetAddressObject, (jint)port);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "211:     jobject pppObject = env->NewObject(",
          "212:             PeerPhysicalPath_class,",
          "213:             PeerPhysicalPath_ctor,",
          "218:     if(env->ExceptionCheck() || pppObject == NULL)",
          "219:     {",
          "220:         LOGE(\"Error creating PPP object\");",
          "",
          "[Removed Lines]",
          "214:             addressObject,",
          "215:             ppp.lastSend,",
          "216:             ppp.lastReceive,",
          "217:             ppp.preferred);",
          "",
          "[Added Lines]",
          "214:             (jobject)addressObject,",
          "215:             (jlong)ppp.lastSend,",
          "216:             (jlong)ppp.lastReceive,",
          "217:             (jboolean)ppp.preferred); // ANDROID-56: cast to correct size",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "240:     jobject peerObject = env->NewObject(",
          "241:             Peer_class,",
          "242:             Peer_ctor,",
          "250:     if(env->ExceptionCheck() || peerObject == NULL)",
          "251:     {",
          "252:         LOGE(\"Error creating Peer object\");",
          "",
          "[Removed Lines]",
          "243:             peer.address,",
          "244:             peer.versionMajor,",
          "245:             peer.versionMinor,",
          "246:             peer.versionRev,",
          "247:             peer.latency,",
          "248:             peerRoleObj,",
          "249:             arrayObject);",
          "",
          "[Added Lines]",
          "243:             (jlong)peer.address,",
          "244:             (jint)peer.versionMajor,",
          "245:             (jint)peer.versionMinor,",
          "246:             (jint)peer.versionRev,",
          "247:             (jint)peer.latency,",
          "248:             (jobject)peerRoleObj,",
          "249:             (jobjectArray)arrayObject);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "298:     jobject vnetConfigObj = env->NewObject(",
          "299:             VirtualNetworkConfig_class,",
          "300:             VirtualNetworkConfig_ctor,",
          "318:     if(env->ExceptionCheck() || vnetConfigObj == NULL)",
          "319:     {",
          "320:         LOGE(\"Error creating new VirtualNetworkConfig object\");",
          "",
          "[Removed Lines]",
          "301:             vnetConfig.nwid,",
          "302:             vnetConfig.mac,",
          "303:             nameStr,",
          "304:             statusObject,",
          "305:             typeObject,",
          "306:             vnetConfig.mtu,",
          "307:             vnetConfig.dhcp,",
          "308:             vnetConfig.bridge,",
          "309:             vnetConfig.broadcastEnabled,",
          "315:             assignedAddrArrayObj,",
          "316:             routesArrayObj,",
          "317:             dnsObj);",
          "",
          "[Added Lines]",
          "301:             (jlong)vnetConfig.nwid,",
          "302:             (jlong)vnetConfig.mac,",
          "303:             (jstring)nameStr,",
          "304:             (jobject)statusObject,",
          "305:             (jobject)typeObject,",
          "306:             (jint)vnetConfig.mtu,",
          "307:             (jboolean)vnetConfig.dhcp, // ANDROID-56: cast to correct size",
          "308:             (jboolean)vnetConfig.bridge, // ANDROID-56: cast to correct size",
          "309:             (jboolean)vnetConfig.broadcastEnabled, // ANDROID-56: cast to correct size",
          "310:             (jint)vnetConfig.portError,",
          "311:             (jlong)vnetConfig.netconfRevision,",
          "312:             (jobjectArray)assignedAddrArrayObj,",
          "313:             (jobjectArray)routesArrayObj,",
          "314:             (jobject)dnsObj);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "327: jobject newVersion(JNIEnv *env, int major, int minor, int rev)",
          "328: {",
          "331:     if(env->ExceptionCheck() || versionObj == NULL)",
          "332:     {",
          "333:         LOGE(\"Error creating new Version object\");",
          "",
          "[Removed Lines]",
          "330:     jobject versionObj = env->NewObject(Version_class, Version_ctor, major, minor, rev);",
          "",
          "[Added Lines]",
          "327:     jobject versionObj = env->NewObject(Version_class, Version_ctor, (jint)major, (jint)minor, (jint)rev);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "358:     jobject routeObj = env->NewObject(",
          "359:             VirtualNetworkRoute_class,",
          "360:             VirtualNetworkRoute_ctor,",
          "365:     if(env->ExceptionCheck() || routeObj == NULL)",
          "366:     {",
          "367:         LOGE(\"Exception creating VirtualNetworkRoute\");",
          "",
          "[Removed Lines]",
          "361:             targetObj,",
          "362:             viaObj,",
          "363:             route.flags,",
          "364:             route.metric);",
          "",
          "[Added Lines]",
          "358:             (jobject)targetObj,",
          "359:             (jobject)viaObj,",
          "360:             (jint)route.flags, // ANDROID-56: cast to correct size",
          "361:             (jint)route.metric); // ANDROID-56: cast to correct size",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "387:         return NULL;",
          "388:     }",
          "391:     if (env->ExceptionCheck() || addrList == NULL) {",
          "392:         LOGE(\"Exception creating new ArrayList\");",
          "393:         return NULL;",
          "",
          "[Removed Lines]",
          "390:     jobject addrList = env->NewObject(ArrayList_class, ArrayList_ctor, 0);",
          "",
          "[Added Lines]",
          "387:     jobject addrList = env->NewObject(ArrayList_class, ArrayList_ctor, (jint)0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "409:             continue;",
          "410:         }",
          "413:         if(env->ExceptionCheck())",
          "414:         {",
          "415:             LOGE(\"Exception calling add\");",
          "",
          "[Removed Lines]",
          "412:         env->CallBooleanMethod(addrList, ArrayList_add_method, addr);",
          "",
          "[Added Lines]",
          "409:         env->CallBooleanMethod(addrList, ArrayList_add_method, (jobject)addr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "422:     jobject dnsObj = env->NewObject(",
          "423:             VirtualNetworkDNS_class,",
          "424:             VirtualNetworkDNS_ctor,",
          "427:     if (env->ExceptionCheck() || dnsObj == NULL) {",
          "428:         LOGE(\"Exception creating new VirtualNetworkDNS\");",
          "429:         return NULL;",
          "",
          "[Removed Lines]",
          "425:             domain,",
          "426:             addrList);",
          "",
          "[Added Lines]",
          "422:             (jstring)domain,",
          "423:             (jobject)addrList);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "450:     jobject nodeStatusObj = env->NewObject(",
          "451:             NodeStatus_class,",
          "452:             NodeStatus_ctor,",
          "457:     if(env->ExceptionCheck() || nodeStatusObj == NULL) {",
          "458:         LOGE(\"Exception creating new NodeStatus\");",
          "459:         return NULL;",
          "",
          "[Removed Lines]",
          "453:             status.address,",
          "454:             pubIdentStr,",
          "455:             secIdentStr,",
          "456:             status.online);",
          "",
          "[Added Lines]",
          "450:             (jlong)status.address,",
          "451:             (jstring)pubIdentStr,",
          "452:             (jstring)secIdentStr,",
          "453:             (jboolean)status.online);",
          "",
          "---------------"
        ],
        "java/jni/com_zerotierone_sdk_Node.cpp||java/jni/com_zerotierone_sdk_Node.cpp": [
          "File: java/jni/com_zerotierone_sdk_Node.cpp -> java/jni/com_zerotierone_sdk_Node.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:         jint ret = env->CallIntMethod(",
          "163:             ref->configListener,",
          "164:             VirtualNetworkConfigListener_onNetworkConfigurationUpdated_method,",
          "166:         if (env->ExceptionCheck()) {",
          "167:             LOGE(\"Exception calling onNetworkConfigurationUpdated\");",
          "168:             return -105;",
          "",
          "[Removed Lines]",
          "165:             (jlong)nwid, operationObject, networkConfigObject);",
          "",
          "[Added Lines]",
          "165:             (jlong)nwid, (jobject)operationObject, (jobject)networkConfigObject);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:             return;",
          "214:         }",
          "217:         if (env->ExceptionCheck()) {",
          "218:             LOGE(\"Exception calling onVirtualNetworkFrame\");",
          "219:             return;",
          "",
          "[Removed Lines]",
          "216:         env->CallVoidMethod(ref->frameListener, VirtualNetworkFrameListener_onVirtualNetworkFrame_method, (jlong)nwid, (jlong)sourceMac, (jlong)destMac, (jlong)etherType, (jlong)vlanid, dataArray);",
          "",
          "[Added Lines]",
          "216:         env->CallVoidMethod(ref->frameListener, VirtualNetworkFrameListener_onVirtualNetworkFrame_method, (jlong)nwid, (jlong)sourceMac, (jlong)destMac, (jlong)etherType, (jlong)vlanid, (jbyteArray)dataArray);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:         switch (event) {",
          "255:             case ZT_EVENT_UP: {",
          "256:                 LOGD(\"Event Up\");",
          "258:                 if (env->ExceptionCheck()) {",
          "259:                     LOGE(\"Exception calling onEvent\");",
          "260:                     return;",
          "",
          "[Removed Lines]",
          "257:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, eventObject);",
          "",
          "[Added Lines]",
          "257:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, (jobject)eventObject);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:             }",
          "264:             case ZT_EVENT_OFFLINE: {",
          "265:                 LOGD(\"Event Offline\");",
          "267:                 if (env->ExceptionCheck()) {",
          "268:                     LOGE(\"Exception calling onEvent\");",
          "269:                     return;",
          "",
          "[Removed Lines]",
          "266:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, eventObject);",
          "",
          "[Added Lines]",
          "266:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, (jobject)eventObject);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "272:             }",
          "273:             case ZT_EVENT_ONLINE: {",
          "274:                 LOGD(\"Event Online\");",
          "276:                 if (env->ExceptionCheck()) {",
          "277:                     LOGE(\"Exception calling onEvent\");",
          "278:                     return;",
          "",
          "[Removed Lines]",
          "275:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, eventObject);",
          "",
          "[Added Lines]",
          "275:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, (jobject)eventObject);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "281:             }",
          "282:             case ZT_EVENT_DOWN: {",
          "283:                 LOGD(\"Event Down\");",
          "285:                 if (env->ExceptionCheck()) {",
          "286:                     LOGE(\"Exception calling onEvent\");",
          "287:                     return;",
          "",
          "[Removed Lines]",
          "284:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, eventObject);",
          "",
          "[Added Lines]",
          "284:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, (jobject)eventObject);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291:             case ZT_EVENT_FATAL_ERROR_IDENTITY_COLLISION: {",
          "292:                 LOGV(\"Identity Collision\");",
          "295:                 if (env->ExceptionCheck()) {",
          "296:                     LOGE(\"Exception calling onEvent\");",
          "297:                     return;",
          "",
          "[Removed Lines]",
          "294:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, eventObject);",
          "",
          "[Added Lines]",
          "294:                 env->CallVoidMethod(ref->eventListener, EventListener_onEvent_method, (jobject)eventObject);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "311:                     return;",
          "312:                 }",
          "315:                 if (env->ExceptionCheck()) {",
          "316:                     LOGE(\"Exception calling onTrace\");",
          "317:                     return;",
          "",
          "[Removed Lines]",
          "314:                 env->CallVoidMethod(ref->eventListener, EventListener_onTrace_method, messageStr);",
          "",
          "[Added Lines]",
          "314:                 env->CallVoidMethod(ref->eventListener, EventListener_onTrace_method, (jstring)messageStr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "399:             int retval = env->CallIntMethod(ref->dataStorePutListener,",
          "400:                                DataStorePutListener_onDataStorePut_method,",
          "402:             if (env->ExceptionCheck()) {",
          "403:                 LOGE(\"Exception calling onDataStorePut\");",
          "404:                 return;",
          "",
          "[Removed Lines]",
          "401:                                nameStr, bufferObj, secure);",
          "",
          "[Added Lines]",
          "401:                                (jstring)nameStr, (jbyteArray)bufferObj, (jboolean)secure);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "411:         } else {",
          "412:             LOGD(\"JNI: Delete file: %s\", p);",
          "414:             if (env->ExceptionCheck()) {",
          "415:                 LOGE(\"Exception calling onDelete\");",
          "416:                 return;",
          "",
          "[Removed Lines]",
          "413:             int retval = env->CallIntMethod(ref->dataStorePutListener, DataStorePutListener_onDelete_method, nameStr);",
          "",
          "[Added Lines]",
          "413:             int retval = env->CallIntMethod(ref->dataStorePutListener, DataStorePutListener_onDelete_method, (jstring)nameStr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "500:         int retval = (int)env->CallLongMethod(",
          "501:                 ref->dataStoreGetListener,",
          "502:                 DataStoreGetListener_onDataStoreGet_method,",
          "505:         if (env->ExceptionCheck()) {",
          "506:             LOGE(\"Exception calling onDataStoreGet\");",
          "507:             return -106;",
          "",
          "[Removed Lines]",
          "503:                 nameStr,",
          "504:                 bufferObj);",
          "",
          "[Added Lines]",
          "503:                 (jstring)nameStr,",
          "504:                 (jbyteArray)bufferObj);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "570:             return -103;",
          "571:         }",
          "574:         if (env->ExceptionCheck()) {",
          "575:             LOGE(\"Exception calling onSendPacketRequested\");",
          "576:             return -104;",
          "",
          "[Removed Lines]",
          "573:         int retval = env->CallIntMethod(ref->packetSender, PacketSender_onSendPacketRequested_method, localSocket, remoteAddressObj, bufferObj, 0);",
          "",
          "[Added Lines]",
          "573:         int retval = env->CallIntMethod(ref->packetSender, PacketSender_onSendPacketRequested_method, (jlong)localSocket, (jobject)remoteAddressObj, (jbyteArray)bufferObj, (jint)0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "616:             return true;",
          "617:         }",
          "620:         if (env->ExceptionCheck()) {",
          "621:             LOGE(\"Exception calling onPathCheck\");",
          "622:             return true;",
          "",
          "[Removed Lines]",
          "619:         jboolean ret = env->CallBooleanMethod(ref->pathChecker, PathChecker_onPathCheck_method, address, localSocket, remoteAddressObj);",
          "",
          "[Added Lines]",
          "619:         jboolean ret = env->CallBooleanMethod(ref->pathChecker, PathChecker_onPathCheck_method, (jlong)address, (jlong)localSocket, (jobject)remoteAddressObj);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "660:         if (env->ExceptionCheck()) {",
          "661:             LOGE(\"Unable to call onPathLookup implementation\");",
          "662:             return false;",
          "",
          "[Removed Lines]",
          "659:         jobject sockAddressObject = env->CallObjectMethod(ref->pathChecker, PathChecker_onPathLookup_method, address, ss_family);",
          "",
          "[Added Lines]",
          "659:         jobject sockAddressObject = env->CallObjectMethod(ref->pathChecker, PathChecker_onPathLookup_method, (jlong)address, (jint)ss_family);",
          "",
          "---------------"
        ],
        "java/src/com/zerotier/sdk/VirtualNetworkConfig.java||java/src/com/zerotier/sdk/VirtualNetworkConfig.java": [
          "File: java/src/com/zerotier/sdk/VirtualNetworkConfig.java -> java/src/com/zerotier/sdk/VirtualNetworkConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     private final boolean broadcastEnabled;",
          "76:     private final InetSocketAddress[] assignedAddresses;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     private final int portError;",
          "71:     private final long netconfRevision;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     private final VirtualNetworkDNS dns;",
          "83:         this.nwid = nwid;",
          "84:         this.mac = mac;",
          "85:         this.name = name;",
          "",
          "[Removed Lines]",
          "82:     public VirtualNetworkConfig(long nwid, long mac, String name, VirtualNetworkStatus status, VirtualNetworkType type, int mtu, boolean dhcp, boolean bridge, boolean broadcastEnabled, InetSocketAddress[] assignedAddresses, VirtualNetworkRoute[] routes, VirtualNetworkDNS dns) {",
          "",
          "[Added Lines]",
          "79:     public VirtualNetworkConfig(long nwid, long mac, String name, VirtualNetworkStatus status, VirtualNetworkType type, int mtu, boolean dhcp, boolean bridge, boolean broadcastEnabled, int portError, long netconfRevision, InetSocketAddress[] assignedAddresses, VirtualNetworkRoute[] routes, VirtualNetworkDNS dns) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:         this.dhcp = dhcp;",
          "93:         this.bridge = bridge;",
          "94:         this.broadcastEnabled = broadcastEnabled;",
          "100:         this.assignedAddresses = assignedAddresses;",
          "101:         this.routes = routes;",
          "102:         this.dns = dns;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:         this.portError = portError;",
          "93:         if (netconfRevision < 0) {",
          "94:             throw new RuntimeException(\"netconfRevision < 0: \" + netconfRevision);",
          "95:         }",
          "96:         this.netconfRevision = netconfRevision;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:     @Override",
          "106:     public String toString() {",
          "108:     }",
          "110:     @Override",
          "",
          "[Removed Lines]",
          "107:         return \"VirtualNetworkConfig(\" + StringUtils.networkIdToString(nwid) + \", \" + StringUtils.macAddressToString(mac) + \", \" + name + \", \" + status + \", \" + type + \", \" + mtu + \", \" + dhcp + \", \" + bridge + \", \" + broadcastEnabled + \", \" + Arrays.toString(assignedAddresses) + \", \" + Arrays.toString(routes) + \", \" + dns + \")\";",
          "",
          "[Added Lines]",
          "104:         return \"VirtualNetworkConfig(\" + StringUtils.networkIdToString(nwid) + \", \" + StringUtils.macAddressToString(mac) + \", \" + name + \", \" + status + \", \" + type + \", \" + mtu + \", \" + dhcp + \", \" + bridge + \", \" + broadcastEnabled + \", \" + portError + \", \" + netconfRevision + \", \" + Arrays.toString(assignedAddresses) + \", \" + Arrays.toString(routes) + \", \" + dns + \")\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:             return false;",
          "172:         }",
          "186:         if (!Arrays.equals(assignedAddresses, cfg.assignedAddresses)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:         if (this.portError != cfg.portError) {",
          "172:             Log.i(TAG, \"Port Error Changed. Old: \" + this.portError + \", New: \" + cfg.portError);",
          "174:             return false;",
          "175:         }",
          "177:         if (this.netconfRevision != cfg.netconfRevision) {",
          "178:             Log.i(TAG, \"NetConfRevision Changed. Old: \" + this.netconfRevision + \", New: \" + cfg.netconfRevision);",
          "180:             return false;",
          "181:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "280:         result = 37 * result + (dhcp ? 1 : 0);",
          "281:         result = 37 * result + (bridge ? 1 : 0);",
          "282:         result = 37 * result + (broadcastEnabled ? 1 : 0);",
          "285:         result = 37 * result + Arrays.hashCode(assignedAddresses);",
          "286:         result = 37 * result + Arrays.hashCode(routes);",
          "287:         result = 37 * result + (dns == null ? 0 : dns.hashCode());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         result = 37 * result + portError;",
          "281:         result = 37 * result + (int) (netconfRevision ^ (netconfRevision >>> 32));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:     public int getPortError() {",
          "363:         return portError;",
          "364:     }",
          "371:     public long getNetconfRevision() {",
          "372:         return netconfRevision;",
          "373:     }",
          "",
          "---------------"
        ],
        "node/Peer.cpp||node/Peer.cpp": [
          "File: node/Peer.cpp -> node/Peer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:       havePath = true;",
          "110:       break;",
          "111:      }",
          "112:     } else {",
          "113:      break;",
          "114:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:      if (_paths[i].p->address().ipsEqual(path->address()) && _paths[i].p->localSocket() == path->localSocket()) {",
          "114:       if (_paths[i].p->alive(now) && !_bond) {",
          "115:        havePath = true;",
          "116:        break;",
          "117:       }",
          "118:      }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   }",
          "118:   if ( (!havePath) && RR->node->shouldUsePathForZeroTierTraffic(tPtr,_id.address(),path->localSocket(),path->address()) ) {",
          "127:    if (verb == Packet::VERB_OK) {",
          "128:     Mutex::Lock _l(_paths_m);",
          "129:     unsigned int replacePath = ZT_MAX_PEER_NETWORK_PATHS;",
          "135:     for(unsigned int i=0;i<ZT_MAX_PEER_NETWORK_PATHS;++i) {",
          "137:      if (_paths[i].p) {",
          "141:       }",
          "143:       if (_paths[i].p->address().ipsEqual(path->address())) {",
          "149:         }",
          "150:        }",
          "151:       }",
          "157:      }",
          "158:      else {",
          "160:       replacePath = i;",
          "161:       break;",
          "162:      }",
          "163:     }",
          "182:     if (replacePath != ZT_MAX_PEER_NETWORK_PATHS) {",
          "183:      RR->t->peerLearnedNewPath(tPtr, networkId, *this, path, packetId);",
          "184:      _paths[replacePath].lr = now;",
          "",
          "[Removed Lines]",
          "130:     uint64_t maxScore = 0;",
          "131:     uint64_t currScore;",
          "132:     long replacePathQuality = 0;",
          "133:     bool foundFreeSlot = false;",
          "136:      currScore = 0;",
          "139:       if (!_paths[i].p->alive(now)) {",
          "140:        currScore = _paths[i].p->age(now) / 1000;",
          "144:        currScore++;",
          "145:        if (_paths[i].p->address().port() == path->address().port()) {",
          "146:         currScore++;",
          "147:         if (_paths[i].p->localSocket() == path->localSocket()) {",
          "148:          currScore++; // max score (3)",
          "153:       if (currScore > maxScore) {",
          "154:        maxScore = currScore;",
          "155:        replacePath = i;",
          "156:       }",
          "159:       foundFreeSlot = true;",
          "164:     if (!foundFreeSlot) {",
          "165:      if (maxScore > 3) {",
          "167:      }",
          "169:      else if (maxScore == 0) {",
          "170:       for(unsigned int i=0;i<ZT_MAX_PEER_NETWORK_PATHS;++i) {",
          "171:        if (_paths[i].p) {",
          "172:         const long q = _paths[i].p->quality(now) / _paths[i].priority;",
          "173:         if (q > replacePathQuality) {",
          "174:          replacePathQuality = q;",
          "175:          replacePath = i;",
          "176:         }",
          "177:        }",
          "178:       }",
          "179:      }",
          "180:     }",
          "",
          "[Added Lines]",
          "128:     unsigned int oldestPathIdx = ZT_MAX_PEER_NETWORK_PATHS;",
          "129:     unsigned int oldestPathAge = 0;",
          "135:       unsigned int currAge = _paths[i].p->age(now);",
          "136:       if (currAge > oldestPathAge) {",
          "137:        oldestPathAge = currAge;",
          "138:        oldestPathIdx = i;",
          "141:        if (_paths[i].p->localSocket() == path->localSocket()) {",
          "142:         if (!_paths[i].p->alive(now)) {",
          "143:          replacePath = i;",
          "144:          break;",
          "156:     replacePath = (replacePath == ZT_MAX_PEER_NETWORK_PATHS) ? oldestPathIdx : replacePath;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "541:  long maxPriority = 0;",
          "542:  for(unsigned int i=0;i<ZT_MAX_PEER_NETWORK_PATHS;++i) {",
          "544:    maxPriority = std::max(_paths[i].priority,maxPriority);",
          "546:  }",
          "548:  for(unsigned int i=0;i<ZT_MAX_PEER_NETWORK_PATHS;++i) {",
          "549:   if (_paths[i].p) {",
          "",
          "[Removed Lines]",
          "543:   if (_paths[i].p)",
          "545:   else break;",
          "",
          "[Added Lines]",
          "518:   if (_paths[i].p) {",
          "520:   }",
          "521:   else {",
          "522:    break;",
          "523:   }",
          "526:  bool deletionOccurred = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "554:      _paths[i].p->sent(now);",
          "555:      sent |= (_paths[i].p->address().ss_family == AF_INET) ? 0x1 : 0x2;",
          "556:     }",
          "558:     _paths[i] = _PeerPath();",
          "559:    }",
          "561:  }",
          "562:  return sent;",
          "563: }",
          "",
          "[Removed Lines]",
          "557:    } else {",
          "560:   } else break;",
          "",
          "[Added Lines]",
          "536:    }",
          "537:    else {",
          "539:     deletionOccurred = true;",
          "541:   }",
          "542:   if (!_paths[i].p || deletionOccurred) {",
          "543:    for(unsigned int j=i;j<ZT_MAX_PEER_NETWORK_PATHS;++j) {",
          "544:     if (_paths[j].p && i != j) {",
          "545:      _paths[i] = _paths[j];",
          "546:      _paths[j] = _PeerPath();",
          "547:      break;",
          "548:     }",
          "549:    }",
          "550:    deletionOccurred = false;",
          "551:   }",
          "",
          "---------------"
        ],
        "osdep/Binder.hpp||osdep/Binder.hpp": [
          "File: osdep/Binder.hpp -> osdep/Binder.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #if (defined(__unix__) || defined(__APPLE__)) && !defined(__LINUX__) && !defined(ZT_SDK)",
          "44: #include <net/if.h>",
          "46: #include <netinet6/in6_var.h>",
          "47: #endif",
          "48: #include <sys/ioctl.h>",
          "",
          "[Removed Lines]",
          "45: #if ! defined(TARGET_OS_IOS)",
          "",
          "[Added Lines]",
          "45: #if defined(TARGET_OS_OSX)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:      while (ifa) {",
          "334:       if ((ifa->ifa_name) && (ifa->ifa_addr)) {",
          "335:        InetAddress ip = *(ifa->ifa_addr);",
          "338:        if (ifa->ifa_addr->sa_family == AF_INET6) {",
          "339:         struct sockaddr_in6* sa6 = (struct sockaddr_in6*)ifa->ifa_addr;",
          "",
          "[Removed Lines]",
          "336: #if (defined(__unix__) || defined(__APPLE__)) && !defined(__LINUX__) && !defined(ZT_SDK) && !defined(TARGET_OS_IOS)",
          "",
          "[Added Lines]",
          "336: #if (defined(__unix__) || defined(__APPLE__)) && !defined(__LINUX__) && !defined(ZT_SDK) && defined(TARGET_OS_OSX)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:         if (flags & IN6_IFF_TEMPORARY) {",
          "353: #ifdef ZT_TRACE",
          "354:          fprintf(stderr, \"skip binding to temporary IPv6 address: %s\\n\", ip.toIpString(buf));",
          "355: #endif",
          "356:          ifa = ifa->ifa_next;",
          "",
          "[Removed Lines]",
          "352:          char buf[64];",
          "",
          "[Added Lines]",
          "353:          char buf[64];",
          "",
          "---------------"
        ],
        "service/OneService.cpp||service/OneService.cpp": [
          "File: service/OneService.cpp -> service/OneService.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2307:     auto same_subnet = [ip](InetAddress i){",
          "2308:      return ip->network() == i.network();",
          "2309:     };",
          "2311:     if (std::find(n.managedIps().begin(),n.managedIps().end(),*ip) == n.managedIps().end()) {",
          "2313:      if (",
          "2314:       std::find_if(n.managedIps().begin(),n.managedIps().end(), same_subnet) != n.managedIps().end() ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2310: #endif",
          "2313: #ifdef __APPLE__",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2322:      } else {",
          "2323:       newManagedIps2.push_back(*ip);",
          "2324:      }",
          "2326: #endif",
          "2334:    }",
          "2336: #ifdef __APPLE__",
          "",
          "[Removed Lines]",
          "2325:     }",
          "2328:      if (!n.tap()->addIp(*ip))",
          "2329:       fprintf(stderr,\"ERROR: unable to add ip address %s\" ZT_EOL_S, ip->toString(ipbuf));",
          "2331:      #ifdef __WINDOWS__",
          "2332:      WinFWHelper::newICMPRule(*ip, n.config().nwid);",
          "2333:      #endif",
          "",
          "[Added Lines]",
          "2329:      if (! n.tap()->addIp(*ip)) {",
          "2330:       fprintf(stderr, \"ERROR: unable to add ip address %s\" ZT_EOL_S, ip->toString(ipbuf));",
          "2331:      }",
          "2332:      else {",
          "2333: #ifdef __WINDOWS__",
          "2334:       WinFWHelper::newICMPRule(*ip, n.config().nwid);",
          "2335: #endif",
          "2336:      }",
          "2337:     }",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 4",
          "",
          "[Added Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 6",
          "",
          "---------------"
        ],
        "zerotier-one.spec||zerotier-one.spec": [
          "File: zerotier-one.spec -> zerotier-one.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Name:           zerotier-one",
          "3: Release:        1%{?dist}",
          "4: Summary:        ZeroTier network virtualization service",
          "",
          "[Removed Lines]",
          "2: Version:        1.10.4",
          "",
          "[Added Lines]",
          "2: Version:        1.10.6",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: %endif",
          "139: %changelog",
          "141: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "144: - see https://github.com/zerotier/ZeroTierOne for release notes",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e672dc80944e3a720beeebe859861799b52354c9",
      "candidate_info": {
        "commit_hash": "e672dc80944e3a720beeebe859861799b52354c9",
        "repo": "zerotier/zerotierone",
        "commit_url": "https://github.com/zerotier/zerotierone/commit/e672dc80944e3a720beeebe859861799b52354c9",
        "files": [
          "debian/changelog",
          "ext/installfiles/mac/ZeroTier One.pkgproj",
          "node/Node.cpp",
          "version.h",
          "zerotier-one.spec"
        ],
        "message": "Set version to correct 1.10.0.",
        "before_after_code_files": [
          "node/Node.cpp||node/Node.cpp",
          "version.h||version.h",
          "zerotier-one.spec||zerotier-one.spec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ],
          "candidate": [
            "version.h||version.h",
            "zerotier-one.spec||zerotier-one.spec"
          ]
        }
      },
      "candidate_diff": {
        "node/Node.cpp||node/Node.cpp": [
          "File: node/Node.cpp -> node/Node.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:     n->setAccessDenied(nullptr);",
          "741:     break;",
          "742:    case NetworkController::NC_ERROR_AUTHENTICATION_REQUIRED: {",
          "745:     break;",
          "746:    }",
          "",
          "[Removed Lines]",
          "743:     fprintf(stderr, \"\\n\\nGot auth required\\n\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 1",
          "",
          "[Added Lines]",
          "30: #define ZEROTIER_ONE_VERSION_REVISION 0",
          "",
          "---------------"
        ],
        "zerotier-one.spec||zerotier-one.spec": [
          "File: zerotier-one.spec -> zerotier-one.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Name:           zerotier-one",
          "3: Release:        1%{?dist}",
          "4: Summary:        ZeroTier network virtualization service",
          "",
          "[Removed Lines]",
          "2: Version:        1.10.1",
          "",
          "[Added Lines]",
          "2: Version:        1.10.0",
          "",
          "---------------"
        ]
      }
    }
  ]
}