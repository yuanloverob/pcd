{
  "cve_id": "CVE-2021-27138",
  "cve_desc": "The boot loader in Das U-Boot before 2021.04-rc2 mishandles use of unit addresses in a FIT.",
  "repo": "u-boot/u-boot",
  "patch_hash": "3f04db891a353f4b127ed57279279f851c6b4917",
  "patch_info": {
    "commit_hash": "3f04db891a353f4b127ed57279279f851c6b4917",
    "repo": "u-boot/u-boot",
    "commit_url": "https://github.com/u-boot/u-boot/commit/3f04db891a353f4b127ed57279279f851c6b4917",
    "files": [
      "common/image-fit.c",
      "test/py/tests/test_vboot.py"
    ],
    "message": "image: Check for unit addresses in FITs\n\nUsing unit addresses in a FIT is a security risk. Add a check for this\nand disallow it.\n\nCVE-2021-27138\n\nSigned-off-by: Simon Glass <sjg@chromium.org>\nReported-by: Bruce Monroe <bruce.monroe@intel.com>\nReported-by: Arie Haenel <arie.haenel@intel.com>\nReported-by: Julien Lenoir <julien.lenoir@intel.com>",
    "before_after_code_files": [
      "common/image-fit.c||common/image-fit.c",
      "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py"
    ]
  },
  "patch_diff": {
    "common/image-fit.c||common/image-fit.c": [
      "File: common/image-fit.c -> common/image-fit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1568:  return (comp == image_comp);",
      "1569: }",
      "1571: int fit_check_format(const void *fit, ulong size)",
      "1572: {",
      "1573:  int ret;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1580: static int fdt_check_no_at(const void *fit, int parent)",
      "1581: {",
      "1582:  const char *name;",
      "1583:  int node;",
      "1584:  int ret;",
      "1586:  name = fdt_get_name(fit, parent, NULL);",
      "1587:  if (!name || strchr(name, '@'))",
      "1588:   return -EADDRNOTAVAIL;",
      "1590:  fdt_for_each_subnode(node, fit, parent) {",
      "1591:   ret = fdt_check_no_at(fit, node);",
      "1592:   if (ret)",
      "1593:    return ret;",
      "1594:  }",
      "1596:  return 0;",
      "1597: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1589:   if (size == IMAGE_SIZE_INVAL)",
      "1590:    size = fdt_totalsize(fit);",
      "1591:   ret = fdt_check_full(fit, size);",
      "1593:   if (ret) {",
      "1594:    log_debug(\"FIT check error %d\\n\", ret);",
      "1596:   }",
      "1597:  }",
      "",
      "[Removed Lines]",
      "1595:    return -EINVAL;",
      "",
      "[Added Lines]",
      "1620:   if (ret)",
      "1621:    ret = -EINVAL;",
      "1630:   if (!ret && CONFIG_IS_ENABLED(FIT_SIGNATURE)) {",
      "1631:    ret = fdt_check_no_at(fit, 0);",
      "1633:    if (ret) {",
      "1634:     log_debug(\"FIT check error %d\\n\", ret);",
      "1635:     return ret;",
      "1636:    }",
      "1637:   }",
      "1640:    return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1955:  printf(\"## Loading %s from FIT Image at %08lx ...\\n\", prop_name, addr);",
      "1957:  bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT);",
      "1960:   bootstage_error(bootstage_id + BOOTSTAGE_SUB_FORMAT);",
      "1962:  }",
      "1963:  bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT_OK);",
      "1964:  if (fit_uname) {",
      "",
      "[Removed Lines]",
      "1958:  if (fit_check_format(fit, IMAGE_SIZE_INVAL)) {",
      "1959:   printf(\"Bad FIT %s image format!\\n\", prop_name);",
      "1961:   return -ENOEXEC;",
      "",
      "[Added Lines]",
      "2003:  ret = fit_check_format(fit, IMAGE_SIZE_INVAL);",
      "2004:  if (ret) {",
      "2005:   printf(\"Bad FIT %s image format! (err=%d)\\n\", prop_name, ret);",
      "2006:   if (CONFIG_IS_ENABLED(FIT_SIGNATURE) && ret == -EADDRNOTAVAIL)",
      "2007:    printf(\"Signature checking prevents use of unit addresses (@) in nodes\\n\");",
      "2009:   return ret;",
      "",
      "---------------"
    ],
    "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py": [
      "File: test/py/tests/test_vboot.py -> test/py/tests/test_vboot.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "232:         util.run_and_log(cons, [fit_check_sign, '-f', fit, '-k', dtb])",
      "234:         if full_test:",
      "237:             ffit = '%stest.forged.fit' % tmpdir",
      "238:             shutil.copyfile(fit, ffit)",
      "239:             with open(ffit, 'rb') as fd:",
      "",
      "[Removed Lines]",
      "235:             # Make sure that U-Boot checks that the config is in the list of hashed",
      "236:             # nodes. If it isn't, a security bypass is possible.",
      "",
      "[Added Lines]",
      "235:             # Make sure that U-Boot checks that the config is in the list of",
      "236:             # hashed nodes. If it isn't, a security bypass is possible.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "263:             shutil.copyfile(fit, efit)",
      "264:             vboot_evil.add_evil_node(fit, efit, evil_kernel, 'kernel@')",
      "266:             util.run_and_log_expect_exception(",
      "267:                 cons, [fit_check_sign, '-f', efit, '-k', dtb],",
      "271:         # Create a new properly signed fit and replace header bytes",
      "272:         make_fit('sign-configs-%s%s.its' % (sha_algo, padding))",
      "",
      "[Removed Lines]",
      "268:                 1, 'Node name contains @')",
      "269:             run_bootm(sha_algo, 'evil kernel@', 'Bad Data Hash', False, efit)",
      "",
      "[Added Lines]",
      "266:             msg = 'Signature checking prevents use of unit addresses (@) in nodes'",
      "269:                 1, msg)",
      "270:             run_bootm(sha_algo, 'evil kernel@', msg, False, efit)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d5f3aadacbc63df3b690d6fd9f0aa3f575b43356",
      "candidate_info": {
        "commit_hash": "d5f3aadacbc63df3b690d6fd9f0aa3f575b43356",
        "repo": "u-boot/u-boot",
        "commit_url": "https://github.com/u-boot/u-boot/commit/d5f3aadacbc63df3b690d6fd9f0aa3f575b43356",
        "files": [
          "test/py/tests/test_vboot.py"
        ],
        "message": "test: Add tests for the 'evil' vboot attacks\n\nAdd tests to check that these two attacks are mitigated by recent patches.\n\nSigned-off-by: Simon Glass <sjg@chromium.org>\nReported-by: Bruce Monroe <bruce.monroe@intel.com>\nReported-by: Arie Haenel <arie.haenel@intel.com>\nReported-by: Julien Lenoir <julien.lenoir@intel.com>",
        "before_after_code_files": [
          "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py"
          ],
          "candidate": [
            "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py"
          ]
        }
      },
      "candidate_diff": {
        "test/py/tests/test_vboot.py||test/py/tests/test_vboot.py": [
          "File: test/py/tests/test_vboot.py -> test/py/tests/test_vboot.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: Tests run with both SHA1 and SHA256 hashing.",
          "25: \"\"\"",
          "27: import struct",
          "28: import pytest",
          "29: import u_boot_utils as util",
          "30: import vboot_forge",
          "32: TESTDATA = [",
          "43: ]",
          "45: @pytest.mark.boardspec('sandbox')",
          "",
          "[Removed Lines]",
          "33:     ['sha1', '', None, False],",
          "34:     ['sha1', '', '-E -p 0x10000', False],",
          "35:     ['sha1', '-pss', None, False],",
          "36:     ['sha1', '-pss', '-E -p 0x10000', False],",
          "37:     ['sha256', '', None, False],",
          "38:     ['sha256', '', '-E -p 0x10000', False],",
          "39:     ['sha256', '-pss', None, False],",
          "40:     ['sha256', '-pss', '-E -p 0x10000', False],",
          "41:     ['sha256', '-pss', None, True],",
          "42:     ['sha256', '-pss', '-E -p 0x10000', True],",
          "",
          "[Added Lines]",
          "27: import shutil",
          "32: import vboot_evil",
          "34: # Only run the full suite on a few combinations, since it doesn't add any more",
          "35: # test coverage.",
          "37:     ['sha1', '', None, False, True],",
          "38:     ['sha1', '', '-E -p 0x10000', False, False],",
          "39:     ['sha1', '-pss', None, False, False],",
          "40:     ['sha1', '-pss', '-E -p 0x10000', False, False],",
          "41:     ['sha256', '', None, False, False],",
          "42:     ['sha256', '', '-E -p 0x10000', False, False],",
          "43:     ['sha256', '-pss', None, False, False],",
          "44:     ['sha256', '-pss', '-E -p 0x10000', False, False],",
          "45:     ['sha256', '-pss', None, True, False],",
          "46:     ['sha256', '-pss', '-E -p 0x10000', True, True],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: @pytest.mark.requiredtool('fdtget')",
          "49: @pytest.mark.requiredtool('fdtput')",
          "50: @pytest.mark.requiredtool('openssl')",
          "53:     \"\"\"Test verified boot signing with mkimage and verification with 'bootm'.",
          "55:     This works using sandbox only as it needs to update the device tree used",
          "",
          "[Removed Lines]",
          "51: @pytest.mark.parametrize(\"sha_algo,padding,sign_options,required\", TESTDATA)",
          "52: def test_vboot(u_boot_console, sha_algo, padding, sign_options, required):",
          "",
          "[Added Lines]",
          "55: @pytest.mark.parametrize(\"sha_algo,padding,sign_options,required,full_test\",",
          "56:                          TESTDATA)",
          "57: def test_vboot(u_boot_console, sha_algo, padding, sign_options, required,",
          "58:                full_test):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:         util.run_and_log(cons, 'dtc %s %s%s -O dtb '",
          "72:                          '-o %s%s' % (dtc_args, datadir, dts, tmpdir, dtb))",
          "75:         \"\"\"Run a 'bootm' command U-Boot.",
          "77:         This always starts a fresh U-Boot instance since the device tree may",
          "",
          "[Removed Lines]",
          "74:     def run_bootm(sha_algo, test_type, expect_string, boots):",
          "",
          "[Added Lines]",
          "80:     def run_bootm(sha_algo, test_type, expect_string, boots, fit=None):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:                     use.",
          "85:             boots: A boolean that is True if Linux should boot and False if",
          "86:                     we are expected to not boot",
          "87:         \"\"\"",
          "88:         cons.restart_uboot()",
          "89:         with cons.log.section('Verified boot %s %s' % (sha_algo, test_type)):",
          "90:             output = cons.run_command_list(",
          "92:                  'fdt addr 100',",
          "93:                  'bootm 100'])",
          "94:         assert expect_string in ''.join(output)",
          "",
          "[Removed Lines]",
          "91:                 ['host load hostfs - 100 %stest.fit' % tmpdir,",
          "",
          "[Added Lines]",
          "93:             fit: FIT filename to load and verify",
          "95:         if not fit:",
          "96:             fit = '%stest.fit' % tmpdir",
          "100:                 ['host load hostfs - 100 %s' % fit,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "223:         util.run_and_log(cons, [fit_check_sign, '-f', fit, '-k', dtb])",
          "238:         # Create a new properly signed fit and replace header bytes",
          "239:         make_fit('sign-configs-%s%s.its' % (sha_algo, padding))",
          "",
          "[Removed Lines]",
          "225:         # Make sure that U-Boot checks that the config is in the list of hashed",
          "226:         # nodes. If it isn't, a security bypass is possible.",
          "227:         with open(fit, 'rb') as fd:",
          "228:             root, strblock = vboot_forge.read_fdt(fd)",
          "229:         root, strblock = vboot_forge.manipulate(root, strblock)",
          "230:         with open(fit, 'w+b') as fd:",
          "231:             vboot_forge.write_fdt(root, strblock, fd)",
          "232:         util.run_and_log_expect_exception(",
          "233:             cons, [fit_check_sign, '-f', fit, '-k', dtb],",
          "234:             1, 'Failed to verify required signature')",
          "236:         run_bootm(sha_algo, 'forged config', 'Bad Data Hash', False)",
          "",
          "[Added Lines]",
          "234:         if full_test:",
          "235:             # Make sure that U-Boot checks that the config is in the list of hashed",
          "236:             # nodes. If it isn't, a security bypass is possible.",
          "237:             ffit = '%stest.forged.fit' % tmpdir",
          "238:             shutil.copyfile(fit, ffit)",
          "239:             with open(ffit, 'rb') as fd:",
          "240:                 root, strblock = vboot_forge.read_fdt(fd)",
          "241:             root, strblock = vboot_forge.manipulate(root, strblock)",
          "242:             with open(ffit, 'w+b') as fd:",
          "243:                 vboot_forge.write_fdt(root, strblock, fd)",
          "244:             util.run_and_log_expect_exception(",
          "245:                 cons, [fit_check_sign, '-f', ffit, '-k', dtb],",
          "246:                 1, 'Failed to verify required signature')",
          "248:             run_bootm(sha_algo, 'forged config', 'Bad Data Hash', False, ffit)",
          "250:             # Try adding an evil root node. This should be detected.",
          "251:             efit = '%stest.evilf.fit' % tmpdir",
          "252:             shutil.copyfile(fit, efit)",
          "253:             vboot_evil.add_evil_node(fit, efit, evil_kernel, 'fakeroot')",
          "255:             util.run_and_log_expect_exception(",
          "256:                 cons, [fit_check_sign, '-f', efit, '-k', dtb],",
          "257:                 1, 'Failed to verify required signature')",
          "258:             run_bootm(sha_algo, 'evil fakeroot', 'Bad Data Hash', False, efit)",
          "260:             # Try adding an @ to the kernel node name. This should be detected.",
          "261:             efit = '%stest.evilk.fit' % tmpdir",
          "262:             shutil.copyfile(fit, efit)",
          "263:             vboot_evil.add_evil_node(fit, efit, evil_kernel, 'kernel@')",
          "265:             util.run_and_log_expect_exception(",
          "266:                 cons, [fit_check_sign, '-f', efit, '-k', dtb],",
          "267:                 1, 'Node name contains @')",
          "268:             run_bootm(sha_algo, 'evil kernel@', 'Bad Data Hash', False, efit)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:     create_rsa_pair('prod')",
          "346:     # Create a number kernel image with zeroes",
          "350:     try:",
          "351:         # We need to use our own device tree file. Remember to restore it",
          "",
          "[Removed Lines]",
          "347:     with open('%stest-kernel.bin' % tmpdir, 'w') as fd:",
          "348:         fd.write(500 * chr(0))",
          "",
          "[Added Lines]",
          "379:     with open('%stest-kernel.bin' % tmpdir, 'wb') as fd:",
          "380:         fd.write(500 * b'\\0')",
          "382:     # Create a second kernel image with ones",
          "383:     evil_kernel = '%stest-kernel1.bin' % tmpdir",
          "384:     with open(evil_kernel, 'wb') as fd:",
          "385:         fd.write(500 * b'\\x01')",
          "",
          "---------------"
        ]
      }
    }
  ]
}