{
  "cve_id": "CVE-2021-45463",
  "cve_desc": "load_cache in GEGL before 0.4.34 allows shell expansion when a pathname in a constructed command line is not escaped or filtered. This is caused by use of the system library function for execution of the ImageMagick convert fallback in magick-load. NOTE: GEGL releases before 0.4.34 are used in GIMP releases before 2.10.30; however, this does not imply that GIMP builds enable the vulnerable feature.",
  "repo": "GNOME/gimp",
  "patch_hash": "e8a31ba4f2ce7e6bc34882dc27c97fba993f5868",
  "patch_info": {
    "commit_hash": "e8a31ba4f2ce7e6bc34882dc27c97fba993f5868",
    "repo": "GNOME/gimp",
    "commit_url": "https://gitlab.gnome.org/GNOME/gimp/-/commit/e8a31ba4f2ce7e6bc34882dc27c97fba993f5868",
    "files": [
      "plug-ins/common/file-gegl.c"
    ],
    "message": "plug-ins: in file-gegl, use the accurate load/save GEGL operation\u2026\n\n\u2026 rather than generic \"gegl:load\" and \"gegl:save\".\n\nIn particular, it means using \"gegl:rgbe-load|save\" for RGBE images and\n\"gegl:exr-save\" for EXR exporting.\n\nWithout this, we could encounter weird run cases where for instance, we\nwould detect a RGBE image through the file magic number in GIMP,\nredirect the load to file-gegl, but \"gegl:load\" only relies on file\nextension. So if the file extension was not \".hdr\", \"gegl:load\" could\nredirect to a different handler operation meant for another format,\nhence break proper loading. If no extension was matched, it could even\nredirect to a fallback handler, such as Image Magick.\n\nThis breaks loading or saving images which we would be otherwise able to\nload/save. And it could also have some security implications. So let's\nfix this by setting the accurate operations to use for each specific\nfile formats we want to support through the file-gegl plug-in.",
    "before_after_code_files": [
      "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
    ]
  },
  "patch_diff": {
    "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c": [
      "File: plug-ins/common/file-gegl.c -> plug-ins/common/file-gegl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:   const gchar *load_proc;",
      "47:   const gchar *load_blurb;",
      "48:   const gchar *load_help;",
      "50:   const gchar *save_proc;",
      "51:   const gchar *save_blurb;",
      "52:   const gchar *save_help;",
      "53: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:   const gchar *load_op;",
      "54:   const gchar *save_op;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:                                                gpointer              run_data);",
      "93: static GimpImage      * load_image            (GFile                *file,",
      "94:                                                GError              **error);",
      "95: static gboolean         save_image            (GFile                *file,",
      "96:                                                GimpImage            *image,",
      "97:                                                GimpDrawable         *drawable,",
      "98:                                                GError              **error);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:                                                const gchar          *gegl_op,",
      "99:                                                const gchar          *gegl_op,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "114:     \"file-load-rgbe\",",
      "115:     \"Load files in the RGBE file format\",",
      "118:     \"file-save-rgbe\",",
      "119:     \"Saves files in the RGBE file format\",",
      "121:   },",
      "122:   {",
      "123:     N_(\"OpenEXR image\"),",
      "",
      "[Removed Lines]",
      "116:     \"This procedure loads images in the RGBE format, using gegl:load\",",
      "120:     \"This procedure exports images in the RGBE format, using gegl:save\"",
      "",
      "[Added Lines]",
      "120:     \"This procedure loads images in the RGBE format, using gegl:rgbe-load\",",
      "121:     \"gegl:rgbe-load\",",
      "125:     \"This procedure exports images in the RGBE format, using gegl:rgbe-save\",",
      "126:     \"gegl:rgbe-save\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "126:     \"0,lelong,20000630\",",
      "131:     \"file-exr-save\",",
      "132:     \"Saves files in the OpenEXR file format\",",
      "134:   }",
      "135: };",
      "",
      "[Removed Lines]",
      "129:     NULL, NULL, NULL,",
      "133:     \"This procedure saves images in the OpenEXR format, using gegl:save\"",
      "",
      "[Added Lines]",
      "135:     NULL, NULL, NULL, NULL,",
      "139:     \"This procedure saves images in the OpenEXR format, using gegl:exr-save\",",
      "140:     \"gegl:exr-save\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "234:           const GimpValueArray *args,",
      "235:           gpointer              run_data)",
      "236: {",
      "241:   INIT_I18N ();",
      "242:   gegl_init (NULL, NULL);",
      "246:   if (! image)",
      "247:     return gimp_procedure_new_return_values (procedure,",
      "",
      "[Removed Lines]",
      "237:   GimpValueArray *return_vals;",
      "238:   GimpImage      *image;",
      "239:   GError         *error = NULL;",
      "244:   image = load_image (file, &error);",
      "",
      "[Added Lines]",
      "244:   const FileFormat *format = run_data;",
      "245:   GimpValueArray   *return_vals;",
      "246:   GimpImage        *image;",
      "247:   GError           *error  = NULL;",
      "252:   image = load_image (file, format->load_op, &error);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "267:            const GimpValueArray *args,",
      "268:            gpointer              run_data)",
      "269: {",
      "270:   GimpPDBStatusType  status = GIMP_PDB_SUCCESS;",
      "271:   GimpExportReturn   export = GIMP_EXPORT_CANCEL;",
      "272:   GError            *error = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "278:   const FileFormat  *format = run_data;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "306:                                                error);",
      "307:     }",
      "310:                     &error))",
      "311:     {",
      "312:       status = GIMP_PDB_EXECUTION_ERROR;",
      "",
      "[Removed Lines]",
      "309:   if (! save_image (file, image, drawables[0],",
      "",
      "[Added Lines]",
      "318:   if (! save_image (file, format->save_op, image, drawables[0],",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "322: }",
      "324: static GimpImage *",
      "327: {",
      "328:   GimpImage         *image;",
      "329:   GimpLayer         *layer;",
      "",
      "[Removed Lines]",
      "325: load_image (GFile   *file,",
      "326:             GError **error)",
      "",
      "[Added Lines]",
      "334: load_image (GFile        *file,",
      "335:             const gchar  *gegl_op,",
      "336:             GError      **error)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "345:   graph = gegl_node_new ();",
      "347:   source = gegl_node_new_child (graph,",
      "349:                                 \"path\",      g_file_peek_path (file),",
      "350:                                 NULL);",
      "351:   sink = gegl_node_new_child (graph,",
      "",
      "[Removed Lines]",
      "348:                                 \"operation\", \"gegl:load\",",
      "",
      "[Added Lines]",
      "358:                                 \"operation\", gegl_op,",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "479: static gboolean",
      "480: save_image (GFile         *file,",
      "481:             GimpImage     *image,",
      "482:             GimpDrawable  *drawable,",
      "483:             GError       **error)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "491:             const gchar   *gegl_op,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "496:                                 \"buffer\",    src_buf,",
      "497:                                 NULL);",
      "498:   sink = gegl_node_new_child (graph,",
      "500:                               \"path\",      g_file_peek_path (file),",
      "501:                               NULL);",
      "",
      "[Removed Lines]",
      "499:                               \"operation\", \"gegl:save\",",
      "",
      "[Added Lines]",
      "510:                               \"operation\", gegl_op,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d5164072e064c160329dc276344508d6bacf8870",
      "candidate_info": {
        "commit_hash": "d5164072e064c160329dc276344508d6bacf8870",
        "repo": "GNOME/gimp",
        "commit_url": "https://github.com/GNOME/gimp/commit/d5164072e064c160329dc276344508d6bacf8870",
        "files": [
          "plug-ins/common/file-gegl.c"
        ],
        "message": "plug-ins: fix Radiance RGBE magic number.\n\nNote that the full magic should be \"#?RADIANCE\". Not sure why we only\nuse the first 2 characters. Do some software create these RGBE files\nwith just \"#?\" and we want to be able to read these? No other image\nformat use these 2 characters as the start of their own magic numbers?\n\nAnyway let's keep like this for now. We'll see. If it makes a problem,\nwe might update to more accurate magic later.",
        "before_after_code_files": [
          "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
          ],
          "candidate": [
            "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
          ]
        }
      },
      "candidate_diff": {
        "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c": [
          "File: plug-ins/common/file-gegl.c -> plug-ins/common/file-gegl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     N_(\"Radiance RGBE\"),",
          "110:     \"image/vnd.radiance\",",
          "111:     \"hdr\",",
          "114:     \"file-load-rgbe\",",
          "115:     \"Load files in the RGBE file format\",",
          "",
          "[Removed Lines]",
          "112:     \"0,string,?#\",",
          "",
          "[Added Lines]",
          "112:     \"0,string,#?\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4201cf60b15fc1883e2bb5d61ff42837576af4bf",
      "candidate_info": {
        "commit_hash": "4201cf60b15fc1883e2bb5d61ff42837576af4bf",
        "repo": "GNOME/gimp",
        "commit_url": "https://github.com/GNOME/gimp/commit/4201cf60b15fc1883e2bb5d61ff42837576af4bf",
        "files": [
          "plug-ins/common/file-gegl.c"
        ],
        "message": "plug-ins: in file-gegl, use the accurate load/save GEGL operation\u2026\n\n\u2026 rather than generic \"gegl:load\" and \"gegl:save\".\n\nIn particular, it means using \"gegl:rgbe-load|save\" for RGBE images and\n\"gegl:exr-save\" for EXR exporting.\n\nWithout this, we could encounter weird run cases where for instance, we\nwould detect a RGBE image through the file magic number in GIMP,\nredirect the load to file-gegl, but \"gegl:load\" only relies on file\nextension. So if the file extension was not \".hdr\", \"gegl:load\" could\nredirect to a different handler operation meant for another format,\nhence break proper loading. If no extension was matched, it could even\nredirect to a fallback handler, such as Image Magick.\n\nThis breaks loading or saving images which we would be otherwise able to\nload/save. And it could also have some security implications. So let's\nfix this by setting the accurate operations to use for each specific\nfile formats we want to support through the file-gegl plug-in.\n\nNote: this is the gimp-2-10 version of commit e8a31ba4f2c (`master`\nbranch) adapted to the older 2.10 API.",
        "before_after_code_files": [
          "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
          ],
          "candidate": [
            "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c"
          ]
        }
      },
      "candidate_diff": {
        "plug-ins/common/file-gegl.c||plug-ins/common/file-gegl.c": [
          "File: plug-ins/common/file-gegl.c -> plug-ins/common/file-gegl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   const gchar *load_proc;",
          "47:   const gchar *load_blurb;",
          "48:   const gchar *load_help;",
          "50:   const gchar *save_proc;",
          "51:   const gchar *save_blurb;",
          "52:   const gchar *save_help;",
          "53: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:   const gchar *load_op;",
          "54:   const gchar *save_op;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:                             gint             *nreturn_vals,",
          "61:                             GimpParam       **return_vals);",
          "62: static gint32   load_image (const gchar      *filename,",
          "63:                             GError          **error);",
          "64: static gboolean save_image (const gchar      *filename,",
          "65:                             gint32            image_ID,",
          "66:                             gint32            drawable_ID,",
          "67:                             GError          **error);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:                             const gchar      *gegl_op,",
          "68:                             const gchar      *gegl_op,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     \"file-load-rgbe\",",
          "79:     \"Load files in the RGBE file format\",",
          "82:     \"file-save-rgbe\",",
          "83:     \"Saves files in the RGBE file format\",",
          "85:   },",
          "86:   {",
          "87:     N_(\"OpenEXR image\"),",
          "",
          "[Removed Lines]",
          "80:     \"This procedure loads images in the RGBE format, using gegl:load\",",
          "84:     \"This procedure exports images in the RGBE format, using gegl:save\"",
          "",
          "[Added Lines]",
          "84:     \"This procedure loads images in the RGBE format, using gegl:rgbe-load\",",
          "85:     \"gegl:rgbe-load\",",
          "89:     \"This procedure exports images in the RGBE format, using gegl:rgbe-save\",",
          "90:     \"gegl:rgbe-save\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:     \"0,lelong,20000630\",",
          "95:     \"file-exr-save\",",
          "96:     \"Saves files in the OpenEXR file format\",",
          "98:   }",
          "99: };",
          "",
          "[Removed Lines]",
          "93:     NULL, NULL, NULL,",
          "97:     \"This procedure saves images in the OpenEXR format, using gegl:save\"",
          "",
          "[Added Lines]",
          "99:     NULL, NULL, NULL, NULL,",
          "103:     \"This procedure saves images in the OpenEXR format, using gegl:exr-save\",",
          "104:     \"gegl:exr-save\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:       if (format->load_proc && !strcmp (name, format->load_proc))",
          "218:         {",
          "221:           if (image_ID != -1)",
          "222:             {",
          "",
          "[Removed Lines]",
          "219:           image_ID = load_image (param[1].data.d_string, &error);",
          "",
          "[Added Lines]",
          "226:           image_ID = load_image (param[1].data.d_string, format->load_op, &error);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:               break;",
          "264:             }",
          "267:                             &error))",
          "268:             {",
          "269:               status = GIMP_PDB_EXECUTION_ERROR;",
          "",
          "[Removed Lines]",
          "266:           if (! save_image (param[3].data.d_string, image_ID, drawable_ID,",
          "",
          "[Added Lines]",
          "273:           if (! save_image (param[3].data.d_string,",
          "274:                             format->save_op,",
          "275:                             image_ID, drawable_ID,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "294: static gint32",
          "295: load_image (const gchar  *filename,",
          "296:             GError      **error)",
          "297: {",
          "298:   gint32             image_ID = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:             const gchar  *gegl_op,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:   graph = gegl_node_new ();",
          "317:   source = gegl_node_new_child (graph,",
          "319:                                 \"path\",      filename,",
          "320:                                 NULL);",
          "321:   sink = gegl_node_new_child (graph,",
          "",
          "[Removed Lines]",
          "318:                                 \"operation\", \"gegl:load\",",
          "",
          "[Added Lines]",
          "328:                                 \"operation\", gegl_op,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "448: static gboolean",
          "449: save_image (const gchar  *filename,",
          "450:             gint32        image_ID,",
          "451:             gint32        drawable_ID,",
          "452:             GError      **error)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:             const gchar  *gegl_op,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "465:                                 \"buffer\",    src_buf,",
          "466:                                 NULL);",
          "467:   sink = gegl_node_new_child (graph,",
          "469:                               \"path\",      filename,",
          "470:                               NULL);",
          "",
          "[Removed Lines]",
          "468:                               \"operation\", \"gegl:save\",",
          "",
          "[Added Lines]",
          "479:                               \"operation\", gegl_op,",
          "",
          "---------------"
        ]
      }
    }
  ]
}