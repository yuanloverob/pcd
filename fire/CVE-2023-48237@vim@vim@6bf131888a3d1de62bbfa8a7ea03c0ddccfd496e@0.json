{
  "cve_id": "CVE-2023-48237",
  "cve_desc": "Vim is an open source command line text editor. In affected versions when shifting lines in operator pending mode and using a very large value, it may be possible to overflow the size of integer. Impact is low, user interaction is required and a crash may not even happen in all situations. This issue has been addressed in commit `6bf131888` which has been included in version 9.0.2112. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "vim/vim",
  "patch_hash": "6bf131888a3d1de62bbfa8a7ea03c0ddccfd496e",
  "patch_info": {
    "commit_hash": "6bf131888a3d1de62bbfa8a7ea03c0ddccfd496e",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/6bf131888a3d1de62bbfa8a7ea03c0ddccfd496e",
    "files": [
      "src/ops.c",
      "src/testdir/test_indent.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.2112: [security]: overflow in shift_line\n\nProblem:  [security]: overflow in shift_line\nSolution: allow a max indent of INT_MAX\n\n[security]: overflow in shift_line\n\nWhen shifting lines in operator pending mode and using a very large\nvalue, we may overflow the size of integer. Fix this by using a long\nvariable, testing if the result would be larger than INT_MAX and if so,\nindent by INT_MAX value.\n\nSpecial case: We cannot use long here, since on 32bit architectures (or\non Windows?), it typically cannot take larger values than a plain int,\nso we have to use long long count, decide whether the resulting\nmultiplication of the shiftwidth value * amount is larger than INT_MAX\nand if so, we will store INT_MAX as possible larges value in the long\nlong count variable.\n\nThen we can safely cast it back to int when calling the functions to set\nthe indent (set_indent() or change_indent()). So this should be safe.\n\nAdd a test that when using a huge value in operator pending mode for\nshifting, we will shift by INT_MAX\n\ncloses: #13535\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
    "before_after_code_files": [
      "src/ops.c||src/ops.c",
      "src/testdir/test_indent.vim||src/testdir/test_indent.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ops.c||src/ops.c": [
      "File: src/ops.c -> src/ops.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "229:     int amount,",
      "230:     int call_changed_bytes) // call changed_bytes()",
      "231: {",
      "233:     int  i, j;",
      "234:     int  sw_val = (int)get_sw_value_indent(curbuf);",
      "238:     if (round)   // round off indent",
      "239:     {",
      "",
      "[Removed Lines]",
      "232:     int  count;",
      "236:     count = get_indent(); // get current indent",
      "",
      "[Added Lines]",
      "232:     long long count;",
      "236:     count = (long long)get_indent(); // get current indent",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "260:   count = 0;",
      "261:  }",
      "262:  else",
      "264:     }",
      "267:     if (State & VREPLACE_FLAG)",
      "269:     else",
      "271: }",
      "",
      "[Removed Lines]",
      "263:      count += sw_val * amount;",
      "268:  change_indent(INDENT_SET, count, FALSE, NUL, call_changed_bytes);",
      "270:  (void)set_indent(count, call_changed_bytes ? SIN_CHANGED : 0);",
      "",
      "[Added Lines]",
      "263:  {",
      "264:      if ((long long)sw_val * (long long)amount > INT_MAX - count)",
      "265:   count = INT_MAX;",
      "266:      else",
      "267:   count += (long long)sw_val * (long long)amount;",
      "268:  }",
      "273:  change_indent(INDENT_SET, (int)count, FALSE, NUL, call_changed_bytes);",
      "275:  (void)set_indent((int)count, call_changed_bytes ? SIN_CHANGED : 0);",
      "",
      "---------------"
    ],
    "src/testdir/test_indent.vim||src/testdir/test_indent.vim": [
      "File: src/testdir/test_indent.vim -> src/testdir/test_indent.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:   bwipe!",
      "276: endfunc",
      "278: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "278: \" Test for indenting with large amount, causes overflow",
      "279: func Test_indent_overflow_count()",
      "280:   new",
      "281:   setl sw=8",
      "282:   call setline(1, \"abc\")",
      "283:   norm! V2147483647>",
      "284:   \" indents by INT_MAX",
      "285:   call assert_equal(2147483647, indent(1))",
      "286:   close!",
      "287: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "705: static int included_patches[] =",
      "708:     2111,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "708:     2112,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22a97fc241361aa91bda84e5344d5b7c0cda3e81",
      "candidate_info": {
        "commit_hash": "22a97fc241361aa91bda84e5344d5b7c0cda3e81",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/22a97fc241361aa91bda84e5344d5b7c0cda3e81",
        "files": [
          "src/ops.c",
          "src/version.c"
        ],
        "message": "patch 9.0.2113: Coverity warns for another overflow in shift_line()\n\nProblem:  Coverity warns for another overflow in shift_line()\nSolution: Test for INT_MAX after the if condition, cast integer values\n          to (long long) before multiplying.\n\nSigned-off-by: Christian Brabandt <cb@256bit.org>\nSigned-off-by: Michael Henry <vim@drmikehenry.com>\nSigned-off-by: Ernie Rael <errael@raelity.com>",
        "before_after_code_files": [
          "src/ops.c||src/ops.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  }",
          "250:  else",
          "251:      i += amount;",
          "253:     }",
          "254:     else  // original vi indent",
          "255:     {",
          "256:  if (left)",
          "257:  {",
          "259:      if (count < 0)",
          "260:   count = 0;",
          "261:  }",
          "262:  else",
          "269:     }",
          "272:     if (State & VREPLACE_FLAG)",
          "273:  change_indent(INDENT_SET, (int)count, FALSE, NUL, call_changed_bytes);",
          "",
          "[Removed Lines]",
          "252:  count = i * sw_val;",
          "258:      count -= sw_val * amount;",
          "263:  {",
          "264:      if ((long long)sw_val * (long long)amount > INT_MAX - count)",
          "265:   count = INT_MAX;",
          "266:      else",
          "267:   count += (long long)sw_val * (long long)amount;",
          "268:  }",
          "",
          "[Added Lines]",
          "252:  count = (long long)i * (long long)sw_val;",
          "258:      count -= (long long)sw_val * (long long)amount;",
          "263:      count += (long long)sw_val * (long long)amount;",
          "266:     if (count > INT_MAX)",
          "267:  count = INT_MAX;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2112,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2113,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fda700cb04612fe2f9301a9ba820309175decabf",
      "candidate_info": {
        "commit_hash": "fda700cb04612fe2f9301a9ba820309175decabf",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/fda700cb04612fe2f9301a9ba820309175decabf",
        "files": [
          "src/cindent.c",
          "src/misc1.c",
          "src/ops.c",
          "src/proto/misc1.pro",
          "src/version.c",
          "src/vim.h"
        ],
        "message": "patch 9.0.2138: Overflow logic requires long long\n\nProblem:  Overflow logic requires long long\nSolution: Define vimlong_T data type to make life easier\n          for porters\n\ncloses: #13598\n\nSigned-off-by: Ernie Rael <errael@raelity.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/cindent.c||src/cindent.c",
          "src/misc1.c||src/misc1.c",
          "src/ops.c||src/ops.c",
          "src/proto/misc1.pro||src/proto/misc1.pro",
          "src/version.c||src/version.c",
          "src/vim.h||src/vim.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cindent.c||src/cindent.c": [
          "File: src/cindent.c -> src/cindent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:     char_u *p;",
          "1731:     char_u *l;",
          "1732:     char_u *digits;",
          "1734:     int  divider;",
          "1735:     int  fraction = 0;",
          "1736:     int  sw;",
          "",
          "[Removed Lines]",
          "1733:     long long n;",
          "",
          "[Added Lines]",
          "1733:     vimlong_T n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1902:      {",
          "1903:   n *= sw;",
          "1904:   if (divider)",
          "1906:      }",
          "1907:      ++p;",
          "1908:  }",
          "",
          "[Removed Lines]",
          "1905:       n += ((long long)sw * fraction + divider / 2) / divider;",
          "",
          "[Added Lines]",
          "1905:       n += ((vimlong_T)sw * fraction + divider / 2) / divider;",
          "",
          "---------------"
        ],
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2845:     int",
          "2847: {",
          "2848:     return x > INT_MAX ? INT_MAX : x < INT_MIN ? INT_MIN : x;",
          "2849: }",
          "",
          "[Removed Lines]",
          "2846: trim_to_int(long long x)",
          "",
          "[Added Lines]",
          "2846: trim_to_int(vimlong_T x)",
          "",
          "---------------"
        ],
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:     int amount,",
          "230:     int call_changed_bytes) // call changed_bytes()",
          "231: {",
          "233:     int  i, j;",
          "234:     int  sw_val = trim_to_int(get_sw_value_indent(curbuf));",
          "238:     if (round)   // round off indent",
          "239:     {",
          "",
          "[Removed Lines]",
          "232:     long long count;",
          "236:     count = (long long)get_indent(); // get current indent",
          "",
          "[Added Lines]",
          "232:     vimlong_T count;",
          "236:     count = get_indent(); // get current indent",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:  }",
          "250:  else",
          "251:      i += amount;",
          "253:     }",
          "254:     else  // original vi indent",
          "255:     {",
          "256:  if (left)",
          "257:  {",
          "259:      if (count < 0)",
          "260:   count = 0;",
          "261:  }",
          "262:  else",
          "264:     }",
          "",
          "[Removed Lines]",
          "252:  count = (long long)i * (long long)sw_val;",
          "258:      count -= (long long)sw_val * (long long)amount;",
          "263:      count += (long long)sw_val * (long long)amount;",
          "",
          "[Added Lines]",
          "252:  count = (vimlong_T)i * (vimlong_T)sw_val;",
          "258:      count -= (vimlong_T)sw_val * (vimlong_T)amount;",
          "263:      count += (vimlong_T)sw_val * (vimlong_T)amount;",
          "",
          "---------------"
        ],
        "src/proto/misc1.pro||src/proto/misc1.pro": [
          "File: src/proto/misc1.pro -> src/proto/misc1.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: void may_trigger_modechanged(void);",
          "56: int vim_append_digit_int(int *value, int digit);",
          "57: int vim_append_digit_long(long *value, int digit);",
          "",
          "[Removed Lines]",
          "58: int trim_to_int(long long x);",
          "",
          "[Added Lines]",
          "58: int trim_to_int(vimlong_T x);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2137,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2138,",
          "",
          "---------------"
        ],
        "src/vim.h||src/vim.h": [
          "File: src/vim.h -> src/vim.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "436: typedef unsigned int u8char_T; // int is 32 bits or more",
          "438: #ifndef UNIX      // For Unix this is included in os_unix.h",
          "439: # include <stdio.h>",
          "440: # include <ctype.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: typedef long long vimlong_T;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b0882fa6555b4d0197afbdfc32a4533cf6aacf4",
      "candidate_info": {
        "commit_hash": "2b0882fa6555b4d0197afbdfc32a4533cf6aacf4",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/2b0882fa6555b4d0197afbdfc32a4533cf6aacf4",
        "files": [
          "src/cindent.c",
          "src/misc1.c",
          "src/ops.c",
          "src/proto/misc1.pro",
          "src/version.c"
        ],
        "message": "patch 9.0.2124: INT overflow detection logic can be simplified\n\nProblem:  INT overflow logic can be simplified\nSolution: introduce trim_to_int() function\n\ncloses: #13556\n\nSigned-off-by: Ernie Rael <errael@raelity.com>\nSigned-off-by: Christian Brabandt <cb@256bit.org>",
        "before_after_code_files": [
          "src/cindent.c||src/cindent.c",
          "src/misc1.c||src/misc1.c",
          "src/ops.c||src/ops.c",
          "src/proto/misc1.pro||src/proto/misc1.pro",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ops.c||src/ops.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cindent.c||src/cindent.c": [
          "File: src/cindent.c -> src/cindent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1734:     int  divider;",
          "1735:     int  fraction = 0;",
          "1736:     int  sw;",
          "1740:     if (t > INT_MAX / 2)",
          "",
          "[Removed Lines]",
          "1737:     long long t = get_sw_value(buf);",
          "",
          "[Added Lines]",
          "1737:     long t = get_sw_value(buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1902:      {",
          "1903:   n *= sw;",
          "1904:   if (divider)",
          "1906:      }",
          "1907:      ++p;",
          "1908:  }",
          "1909:  if (l[1] == '-')",
          "1910:      n = -n;",
          "",
          "[Removed Lines]",
          "1905:       n += (sw * fraction + divider / 2) / divider;",
          "1912:  if (n > INT_MAX)",
          "1913:      n = INT_MAX;",
          "1914:  else if (n < INT_MIN)",
          "1915:      n = INT_MIN;",
          "",
          "[Added Lines]",
          "1905:       n += ((long long)sw * fraction + divider / 2) / divider;",
          "1912:  n = trim_to_int(n);",
          "",
          "---------------"
        ],
        "src/misc1.c||src/misc1.c": [
          "File: src/misc1.c -> src/misc1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2839:     return OK;",
          "2840: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2843:     int",
          "2844: trim_to_int(long long x)",
          "2845: {",
          "2846:     return x > INT_MAX ? INT_MAX : x < INT_MIN ? INT_MIN : x;",
          "2847: }",
          "",
          "---------------"
        ],
        "src/ops.c||src/ops.c": [
          "File: src/ops.c -> src/ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     int call_changed_bytes) // call changed_bytes()",
          "231: {",
          "232:     long long count;",
          "236:     count = (long long)get_indent(); // get current indent",
          "",
          "[Removed Lines]",
          "233:     long i, j;",
          "234:     long sw_val = get_sw_value_indent(curbuf);",
          "",
          "[Added Lines]",
          "233:     int  i, j;",
          "234:     int  sw_val = trim_to_int(get_sw_value_indent(curbuf));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:      count += (long long)sw_val * (long long)amount;",
          "264:     }",
          "270:     if (State & VREPLACE_FLAG)",
          "272:     else",
          "274: }",
          "",
          "[Removed Lines]",
          "266:     if (count > INT_MAX)",
          "267:  count = INT_MAX;",
          "271:  change_indent(INDENT_SET, (int)count, FALSE, NUL, call_changed_bytes);",
          "273:  (void)set_indent((int)count, call_changed_bytes ? SIN_CHANGED : 0);",
          "",
          "[Added Lines]",
          "268:  change_indent(INDENT_SET, trim_to_int(count), FALSE, NUL, call_changed_bytes);",
          "270:  (void)set_indent(trim_to_int(count), call_changed_bytes ? SIN_CHANGED : 0);",
          "",
          "---------------"
        ],
        "src/proto/misc1.pro||src/proto/misc1.pro": [
          "File: src/proto/misc1.pro -> src/proto/misc1.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: void may_trigger_modechanged(void);",
          "56: int vim_append_digit_int(int *value, int digit);",
          "57: int vim_append_digit_long(long *value, int digit);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: int trim_to_int(long long x);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705: static int included_patches[] =",
          "708:     2123,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:     2124,",
          "",
          "---------------"
        ]
      }
    }
  ]
}