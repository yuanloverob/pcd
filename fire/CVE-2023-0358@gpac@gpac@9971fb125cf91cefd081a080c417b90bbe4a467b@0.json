{
  "cve_id": "CVE-2023-0358",
  "cve_desc": "Use After Free in GitHub repository gpac/gpac prior to 2.3.0-DEV.",
  "repo": "gpac/gpac",
  "patch_hash": "9971fb125cf91cefd081a080c417b90bbe4a467b",
  "patch_info": {
    "commit_hash": "9971fb125cf91cefd081a080c417b90bbe4a467b",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/9971fb125cf91cefd081a080c417b90bbe4a467b",
    "files": [
      "src/odf/descriptors.c"
    ],
    "message": "fixed #2378",
    "before_after_code_files": [
      "src/odf/descriptors.c||src/odf/descriptors.c"
    ]
  },
  "patch_diff": {
    "src/odf/descriptors.c||src/odf/descriptors.c": [
      "File: src/odf/descriptors.c -> src/odf/descriptors.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1395:    gf_list_add(cfg->param_array, ar);",
      "1396:    break;",
      "1397:   default:",
      "1399:    gf_free(ar);",
      "1400:    break;",
      "1401:   }",
      "1404:    nalucount = gf_bs_read_int(bs, 16);",
      "1405:   else",
      "1406:    nalucount = 1;",
      "",
      "[Removed Lines]",
      "1398:    GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[VVC] Invalid NALU type in vvcC - ignoring\\n\", ar->nalus));",
      "1403:   if ((ar->type != GF_VVC_NALU_DEC_PARAM) && (ar->type != GF_VVC_NALU_OPI))",
      "",
      "[Added Lines]",
      "1398:    GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[VVC] Invalid NALU type %d in vvcC - ignoring\\n\", ar->type));",
      "1403:   if (!valid || ((ar->type != GF_VVC_NALU_DEC_PARAM) && (ar->type != GF_VVC_NALU_OPI)))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "933746803f3bbccfefe796f355c952be34312759",
      "candidate_info": {
        "commit_hash": "933746803f3bbccfefe796f355c952be34312759",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/933746803f3bbccfefe796f355c952be34312759",
        "files": [
          "src/odf/descriptors.c"
        ],
        "message": "fixed #2378",
        "before_after_code_files": [
          "src/odf/descriptors.c||src/odf/descriptors.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/odf/descriptors.c||src/odf/descriptors.c"
          ],
          "candidate": [
            "src/odf/descriptors.c||src/odf/descriptors.c"
          ]
        }
      },
      "candidate_diff": {
        "src/odf/descriptors.c||src/odf/descriptors.c": [
          "File: src/odf/descriptors.c -> src/odf/descriptors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1395:    gf_list_add(cfg->param_array, ar);",
          "1396:    break;",
          "1397:   default:",
          "1399:    gf_free(ar);",
          "1400:    break;",
          "1401:   }",
          "1404:    nalucount = gf_bs_read_int(bs, 16);",
          "1405:   else",
          "1406:    nalucount = 1;",
          "",
          "[Removed Lines]",
          "1398:    GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[VVC] Invalid NALU type in vvcC - ignoring\\n\", ar->nalus));",
          "1403:   if ((ar->type != GF_VVC_NALU_DEC_PARAM) && (ar->type != GF_VVC_NALU_OPI))",
          "",
          "[Added Lines]",
          "1398:    GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[VVC] Invalid NALU type %d in vvcC - ignoring\\n\", ar->type));",
          "1403:   if (!valid || ((ar->type != GF_VVC_NALU_DEC_PARAM) && (ar->type != GF_VVC_NALU_OPI)))",
          "",
          "---------------"
        ]
      }
    }
  ]
}