{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34c7ec0de4858ba261f564e5a37c0a155d3db8cb",
      "candidate_info": {
        "commit_hash": "34c7ec0de4858ba261f564e5a37c0a155d3db8cb",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/34c7ec0de4858ba261f564e5a37c0a155d3db8cb",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Rethink approach to free(..) towards leakfree test suite",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  static_cast<CallCountLog *>(memory->userData)->callCountFree++;",
          "81: }",
          "",
          "[Removed Lines]",
          "78: static void failingFree(UriMemoryManager * memory, void * URI_UNUSED(ptr)) {",
          "",
          "[Added Lines]",
          "78: static void failingFree(UriMemoryManager * memory, void * ptr) {",
          "80:  free(ptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:  uriFreeQueryListMmA(queryList, &failingMemoryManager);",
          "198:  ASSERT_GE(failingMemoryManager.getCallCountFree(), 1);",
          "200: }",
          "",
          "[Removed Lines]",
          "199:  uriFreeQueryListA(queryList);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16a961c10827095f37aea6fd329d600733f2c729",
      "candidate_info": {
        "commit_hash": "16a961c10827095f37aea6fd329d600733f2c729",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/16a961c10827095f37aea6fd329d600733f2c729",
        "files": [
          "ChangeLog",
          "configure.ac",
          "include/uriparser/Uri.h",
          "include/uriparser/UriBase.h"
        ],
        "message": "Release 0.9.0",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uriparser/Uri.h||include/uriparser/Uri.h",
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: AC_PREREQ(2.61)",
          "3:   [uriparser], [https://uriparser.github.io/])",
          "4: AC_CONFIG_AUX_DIR([build-aux])",
          "5: AM_INIT_AUTOMAKE([1.10.1 foreign dist-zip dist-bzip2 no-dist-gzip subdir-objects])",
          "",
          "[Removed Lines]",
          "2: AC_INIT([uriparser], [0.8.6], [https://github.com/uriparser/uriparser/issues],",
          "",
          "[Added Lines]",
          "2: AC_INIT([uriparser], [0.9.0], [https://github.com/uriparser/uriparser/issues],",
          "",
          "---------------"
        ],
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ],
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define URI_VER_MAJOR           0",
          "59: #define URI_VER_SUFFIX_ANSI     \"\"",
          "60: #define URI_VER_SUFFIX_UNICODE  URI_ANSI_TO_UNICODE(URI_VER_SUFFIX_ANSI)",
          "",
          "[Removed Lines]",
          "57: #define URI_VER_MINOR           8",
          "58: #define URI_VER_RELEASE         6",
          "",
          "[Added Lines]",
          "57: #define URI_VER_MINOR           9",
          "58: #define URI_VER_RELEASE         0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e42204ec71710d37cfa3ad6634ea952a78750c4b",
      "candidate_info": {
        "commit_hash": "e42204ec71710d37cfa3ad6634ea952a78750c4b",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/e42204ec71710d37cfa3ad6634ea952a78750c4b",
        "files": [
          "src/UriParse.c",
          "test/test.cpp"
        ],
        "message": "UriParse.c: Cover and fix ParseSingleUri* functions",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c",
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2217:  }",
          "2220:  res = URI_FUNC(ParseUriExMm)(&state, first, afterLast, memory);",
          "2222:  if (res != URI_SUCCESS) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2220:  state.uri = uri;",
          "",
          "---------------"
        ],
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2041:         \"http://example2/x/y/z\");",
          "2042: }",
          "2045: int main(int argc, char ** argv) {",
          "2046:  ::testing::InitGoogleTest(&argc, argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2044: TEST(UriParseSingleSuite, Success) {",
          "2045:  UriUriA uri;",
          "2047:  EXPECT_EQ(uriParseSingleUriA(&uri, \"file:///home/user/song.mp3\", NULL),",
          "2048:    URI_SUCCESS);",
          "2050:  uriFreeUriMembersA(&uri);",
          "2051: }",
          "2053: TEST(UriParseSingleSuite, ErrorSyntaxParseErrorSetsErrorPos) {",
          "2054:  UriUriA uri;",
          "2055:  const char * errorPos;",
          "2056:  const char * const uriString = \"abc{}def\";",
          "2058:  EXPECT_EQ(uriParseSingleUriA(&uri, uriString, &errorPos),",
          "2059:    URI_ERROR_SYNTAX);",
          "2060:  EXPECT_EQ(errorPos, uriString + strlen(\"abc\"));",
          "2062:  uriFreeUriMembersA(&uri);",
          "2063: }",
          "2065: TEST(UriParseSingleSuite, ErrorNullFirstDetected) {",
          "2066:  UriUriA uri;",
          "2067:  const char * errorPos;",
          "2069:  EXPECT_EQ(uriParseSingleUriExA(&uri, NULL, \"notnull\", &errorPos),",
          "2070:    URI_ERROR_NULL);",
          "2071: }",
          "2073: TEST(UriParseSingleSuite, ErrorNullAfterLastDetected) {",
          "2074:  UriUriA uri;",
          "2075:  const char * errorPos;",
          "2077:  EXPECT_EQ(uriParseSingleUriExA(&uri, \"foo\", NULL, &errorPos),",
          "2078:    URI_ERROR_NULL);",
          "2079: }",
          "2081: TEST(UriParseSingleSuite, ErrorNullMemoryManagerDetected) {",
          "2082:  UriUriA uri;",
          "2083:  const char * errorPos;",
          "2084:  const char * const uriString = \"somethingwellformed\";",
          "2086:  EXPECT_EQ(uriParseSingleUriExMmA(&uri,",
          "2087:    uriString,",
          "2088:    uriString + strlen(uriString),",
          "2089:    &errorPos, NULL), URI_SUCCESS);",
          "2091:  EXPECT_EQ(uriFreeUriMembersMmA(&uri, NULL), URI_SUCCESS);",
          "2092: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5da3a141c355a4950259a8f4ccb16a3b2f3e5f7",
      "candidate_info": {
        "commit_hash": "b5da3a141c355a4950259a8f4ccb16a3b2f3e5f7",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/b5da3a141c355a4950259a8f4ccb16a3b2f3e5f7",
        "files": [
          "ChangeLog",
          "test/test.cpp"
        ],
        "message": "tests: Address warning \"designated initializers are a C99 feature\"",
        "before_after_code_files": [
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710: }",
          "1712: TEST(UriSuite, TestQueryCompositionMathCalc) {",
          "1716:   int charsRequired;",
          "1717:   ASSERT_TRUE(uriComposeQueryCharsRequiredA(&first, &charsRequired)",
          "",
          "[Removed Lines]",
          "1713:   UriQueryListA second = { .key = \"k2\", .value = \"v2\", .next = NULL };",
          "1714:   UriQueryListA first = { .key = \"k1\", .value = \"v1\", .next = &second };",
          "",
          "[Added Lines]",
          "1713:   UriQueryListA second = { /*.key =*/ \"k2\", /*.value =*/ \"v2\", /*.next =*/ NULL };",
          "1714:   UriQueryListA first = { /*.key =*/ \"k1\", /*.value =*/ \"v1\", /*.next =*/ &second };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1726: }",
          "1728: TEST(UriSuite, TestQueryCompositionMathWriteGoogleAutofuzz113244572) {",
          "1732:   const UriBool spaceToPlus = URI_TRUE;",
          "",
          "[Removed Lines]",
          "1729:   UriQueryListA second = { .key = \"\\x11\", .value = NULL, .next = NULL };",
          "1730:   UriQueryListA first = { .key = \"\\x01\", .value = \"\\x02\", .next = &second };",
          "",
          "[Added Lines]",
          "1729:   UriQueryListA second = { /*.key =*/ \"\\x11\", /*.value =*/ NULL, /*.next =*/ NULL };",
          "1730:   UriQueryListA first = { /*.key =*/ \"\\x01\", /*.value =*/ \"\\x02\", /*.next =*/ &second };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70df06b3823a297e9b0a84379f9df6c2505c4fb0",
      "candidate_info": {
        "commit_hash": "70df06b3823a297e9b0a84379f9df6c2505c4fb0",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/70df06b3823a297e9b0a84379f9df6c2505c4fb0",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseSegmentNzNcOrScheme2",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: static const URI_CHAR * URI_FUNC(ParseQueryFrag)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "182: static const URI_CHAR * URI_FUNC(ParseSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "183: static const URI_CHAR * URI_FUNC(ParseSegmentNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "185: static const URI_CHAR * URI_FUNC(ParseUriReference)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "186: static const URI_CHAR * URI_FUNC(ParseUriTail)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "187: static const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "184: static const URI_CHAR * URI_FUNC(ParseSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "184: static const URI_CHAR * URI_FUNC(ParseSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1807:  if (first >= afterLast) {",
          "1808:   if (!URI_FUNC(OnExitSegmentNzNcOrScheme2)(state, first, memory)) {",
          "1809:    URI_FUNC(StopMalloc)(state);",
          "",
          "[Removed Lines]",
          "1804: static const URI_CHAR * URI_FUNC(ParseSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1804: static const URI_CHAR * URI_FUNC(ParseSegmentNzNcOrScheme2)(",
          "1805:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1806:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1818:  case _UT('-'):",
          "1819:  case URI_SET_ALPHA:",
          "1820:  case URI_SET_DIGIT:",
          "1823:  case _UT('%'):",
          "1824:   {",
          "",
          "[Removed Lines]",
          "1821:   return URI_FUNC(ParseSegmentNzNcOrScheme2)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1821:   return URI_FUNC(ParseSegmentNzNcOrScheme2)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1915:  switch (*first) {",
          "1916:  case URI_SET_ALPHA:",
          "1920:  case URI_SET_DIGIT:",
          "1921:  case _UT('!'):",
          "",
          "[Removed Lines]",
          "1918:   return URI_FUNC(ParseSegmentNzNcOrScheme2)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1918:   return URI_FUNC(ParseSegmentNzNcOrScheme2)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    }
  ]
}