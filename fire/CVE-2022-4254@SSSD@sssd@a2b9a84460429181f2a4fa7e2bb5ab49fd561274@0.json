{
  "cve_id": "CVE-2022-4254",
  "cve_desc": "sssd: libsss_certmap fails to sanitise certificate data used in LDAP filters",
  "repo": "SSSD/sssd",
  "patch_hash": "a2b9a84460429181f2a4fa7e2bb5ab49fd561274",
  "patch_info": {
    "commit_hash": "a2b9a84460429181f2a4fa7e2bb5ab49fd561274",
    "repo": "SSSD/sssd",
    "commit_url": "https://github.com/SSSD/sssd/commit/a2b9a84460429181f2a4fa7e2bb5ab49fd561274",
    "files": [
      "Makefile.am",
      "src/lib/certmap/sss_certmap.c",
      "src/lib/certmap/sss_certmap.exports",
      "src/lib/certmap/sss_certmap.h",
      "src/responder/pam/pamsrv_p11.c",
      "src/tests/cmocka/test_certmap.c",
      "src/util/util.c",
      "src/util/util_ext.c"
    ],
    "message": "certmap: sanitize LDAP search filter\n\nThe sss_certmap_get_search_filter() will now sanitize the values read\nfrom the certificates before adding them to a search filter. To be able\nto get the plain values as well sss_certmap_expand_mapping_rule() is\nadded.\n\nResolves:\nhttps://github.com/SSSD/sssd/issues/5135\n\nReviewed-by: Alexey Tikhonov <atikhono@redhat.com>",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "src/lib/certmap/sss_certmap.c||src/lib/certmap/sss_certmap.c",
      "src/lib/certmap/sss_certmap.exports||src/lib/certmap/sss_certmap.exports",
      "src/lib/certmap/sss_certmap.h||src/lib/certmap/sss_certmap.h",
      "src/responder/pam/pamsrv_p11.c||src/responder/pam/pamsrv_p11.c",
      "src/tests/cmocka/test_certmap.c||src/tests/cmocka/test_certmap.c",
      "src/util/util.c||src/util/util.c",
      "src/util/util_ext.c||src/util/util_ext.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "2163:     $(NULL)",
      "2164: libsss_certmap_la_LDFLAGS = \\",
      "2165:     -Wl,--version-script,$(srcdir)/src/lib/certmap/sss_certmap.exports \\",
      "2168: if HAVE_NSS",
      "2169: libsss_certmap_la_SOURCES += \\",
      "",
      "[Removed Lines]",
      "2166:     -version-info 1:0:1",
      "",
      "[Added Lines]",
      "2166:     -version-info 2:0:2",
      "",
      "---------------"
    ],
    "src/lib/certmap/sss_certmap.c||src/lib/certmap/sss_certmap.c": [
      "File: src/lib/certmap/sss_certmap.c -> src/lib/certmap/sss_certmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "441: static int expand_template(struct sss_certmap_ctx *ctx,",
      "442:                            struct parsed_template *parsed_template,",
      "443:                            struct sss_cert_content *cert_content,",
      "444:                            char **expanded)",
      "445: {",
      "446:     int ret;",
      "447:     char *exp = NULL;",
      "449:     if (strcmp(\"issuer_dn\", parsed_template->name) == 0) {",
      "450:         ret = rdn_list_2_dn_str(ctx, parsed_template->conversion,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "444:                            bool sanitize,",
      "449:     char *exp_sanitized = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "455:     } else if (strncmp(\"subject_\", parsed_template->name, 8) == 0) {",
      "456:         ret = expand_san(ctx, parsed_template, cert_content->san_list, &exp);",
      "457:     } else if (strcmp(\"cert\", parsed_template->name) == 0) {",
      "458:         ret = expand_cert(ctx, parsed_template, cert_content, &exp);",
      "459:     } else {",
      "460:         CM_DEBUG(ctx, \"Unsupported template name.\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "461:         sanitize = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "471:         goto done;",
      "472:     }",
      "474:     ret = 0;",
      "476: done:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "478:     if (sanitize) {",
      "479:         ret = sss_filter_sanitize(ctx, exp, &exp_sanitized);",
      "480:         if (ret != EOK) {",
      "481:             CM_DEBUG(ctx, \"Failed to sanitize expanded template.\");",
      "482:             goto done;",
      "483:         }",
      "484:         talloc_free(exp);",
      "485:         exp = exp_sanitized;",
      "486:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "486: static int get_filter(struct sss_certmap_ctx *ctx,",
      "487:                       struct ldap_mapping_rule *parsed_mapping_rule,",
      "489:                       char **filter)",
      "490: {",
      "491:     struct ldap_mapping_rule_comp *comp;",
      "",
      "[Removed Lines]",
      "488:                       struct sss_cert_content *cert_content,",
      "",
      "[Added Lines]",
      "502:                       struct sss_cert_content *cert_content, bool sanitize,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "503:             result = talloc_strdup_append(result, comp->val);",
      "504:         } else if (comp->type == comp_template) {",
      "505:             ret = expand_template(ctx, comp->parsed_template, cert_content,",
      "507:             if (ret != 0) {",
      "508:                 CM_DEBUG(ctx, \"Failed to expanded template.\");",
      "509:                 goto done;",
      "",
      "[Removed Lines]",
      "506:                                   &expanded);",
      "",
      "[Added Lines]",
      "520:                                   sanitize, &expanded);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "791:     return ret;",
      "792: }",
      "795:                                   const uint8_t *der_cert, size_t der_size,",
      "796:                                   char **_filter, char ***_domains)",
      "797: {",
      "798:     int ret;",
      "",
      "[Removed Lines]",
      "794: int sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,",
      "",
      "[Added Lines]",
      "808: static int expand_mapping_rule_ex(struct sss_certmap_ctx *ctx,",
      "810:                                   bool sanitize,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "819:             return EINVAL;",
      "820:         }",
      "823:         goto done;",
      "824:     }",
      "",
      "[Removed Lines]",
      "822:         ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, &filter);",
      "",
      "[Added Lines]",
      "837:         ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, sanitize,",
      "838:                          &filter);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "829:             if (ret == 0) {",
      "831:                 ret = get_filter(ctx, r->parsed_mapping_rule, cert_content,",
      "833:                 if (ret != 0) {",
      "834:                     CM_DEBUG(ctx, \"Failed to get filter\");",
      "835:                     goto done;",
      "",
      "[Removed Lines]",
      "832:                                  &filter);",
      "",
      "[Added Lines]",
      "848:                                  sanitize, &filter);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "873:     return ret;",
      "874: }",
      "876: int sss_certmap_init(TALLOC_CTX *mem_ctx,",
      "877:                      sss_certmap_ext_debug *debug, void *debug_priv,",
      "878:                      struct sss_certmap_ctx **ctx)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "892: int sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,",
      "893:                                   const uint8_t *der_cert, size_t der_size,",
      "894:                                   char **_filter, char ***_domains)",
      "895: {",
      "896:     return expand_mapping_rule_ex(ctx, der_cert, der_size, true,",
      "897:                                   _filter, _domains);",
      "898: }",
      "900: int sss_certmap_expand_mapping_rule(struct sss_certmap_ctx *ctx,",
      "901:                                     const uint8_t *der_cert, size_t der_size,",
      "902:                                     char **_expanded, char ***_domains)",
      "903: {",
      "904:     return expand_mapping_rule_ex(ctx, der_cert, der_size, false,",
      "905:                                   _expanded, _domains);",
      "906: }",
      "",
      "---------------"
    ],
    "src/lib/certmap/sss_certmap.exports||src/lib/certmap/sss_certmap.exports": [
      "File: src/lib/certmap/sss_certmap.exports -> src/lib/certmap/sss_certmap.exports",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     global:",
      "17:         sss_certmap_display_cert_content;",
      "18: } SSS_CERTMAP_0.0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: SSS_CERTMAP_0.2 {",
      "21:     global:",
      "22:         sss_certmap_expand_mapping_rule;",
      "23: } SSS_CERTMAP_0.1;",
      "",
      "---------------"
    ],
    "src/lib/certmap/sss_certmap.h||src/lib/certmap/sss_certmap.h": [
      "File: src/lib/certmap/sss_certmap.h -> src/lib/certmap/sss_certmap.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:                                   const uint8_t *der_cert, size_t der_size,",
      "137:                                   char **filter, char ***domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "160: int sss_certmap_expand_mapping_rule(struct sss_certmap_ctx *ctx,",
      "161:                                     const uint8_t *der_cert, size_t der_size,",
      "162:                                     char **_expanded, char ***_domains);",
      "",
      "---------------"
    ],
    "src/responder/pam/pamsrv_p11.c||src/responder/pam/pamsrv_p11.c": [
      "File: src/responder/pam/pamsrv_p11.c -> src/responder/pam/pamsrv_p11.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1049:         goto done;",
      "1050:     }",
      "1053:     if (ret != 0) {",
      "1055:         goto done;",
      "1056:     }",
      "",
      "[Removed Lines]",
      "1052:     ret = sss_certmap_get_search_filter(ctx, der, der_size, &filter, &domains);",
      "1054:         DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_get_search_filter failed.\\n\");",
      "",
      "[Added Lines]",
      "1052:     ret = sss_certmap_expand_mapping_rule(ctx, der, der_size,",
      "1053:                                           &filter, &domains);",
      "1055:         DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_expand_mapping_rule failed.\\n\");",
      "",
      "---------------"
    ],
    "src/tests/cmocka/test_certmap.c||src/tests/cmocka/test_certmap.c": [
      "File: src/tests/cmocka/test_certmap.c -> src/tests/cmocka/test_certmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1431:                                         &filter, &domains);",
      "1432:     assert_int_equal(ret, 0);",
      "1433:     assert_non_null(filter);",
      "1434:     assert_string_equal(filter, \"rule100=<I>CN=Certificate Authority,O=IPA.DEVEL\"",
      "1435:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
      "1436:     assert_null(domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1434:     assert_string_equal(filter, \"rule100=<I>CN=Certificate\\\\20Authority,O=IPA.DEVEL\"",
      "1435:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
      "1436:     assert_null(domains);",
      "1438:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1439:                                           sizeof(test_cert_der),",
      "1440:                                           &filter, &domains);",
      "1441:     assert_int_equal(ret, 0);",
      "1442:     assert_non_null(filter);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1445:                                         &filter, &domains);",
      "1446:     assert_int_equal(ret, 0);",
      "1447:     assert_non_null(filter);",
      "1448:     assert_string_equal(filter, \"rule99=<I>CN=Certificate Authority,O=IPA.DEVEL\"",
      "1449:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
      "1450:     assert_non_null(domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1457:     assert_string_equal(filter, \"rule99=<I>CN=Certificate\\\\20Authority,O=IPA.DEVEL\"",
      "1458:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
      "1459:     assert_non_null(domains);",
      "1460:     assert_string_equal(domains[0], \"test.dom\");",
      "1461:     assert_null(domains[1]);",
      "1463:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1464:                                           sizeof(test_cert_der),",
      "1465:                                           &filter, &domains);",
      "1466:     assert_int_equal(ret, 0);",
      "1467:     assert_non_null(filter);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1466:     assert_string_equal(domains[0], \"test.dom\");",
      "1467:     assert_null(domains[1]);",
      "1469:     ret = sss_certmap_add_rule(ctx, 97,",
      "1470:                             \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",",
      "1471:                             \"LDAP:rule97=<I>{issuer_dn!nss_x500}<S>{subject_dn}\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1489:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1490:                                           sizeof(test_cert_der),",
      "1491:                                           &filter, &domains);",
      "1492:     assert_int_equal(ret, 0);",
      "1493:     assert_non_null(filter);",
      "1494:     assert_string_equal(filter, \"rule98=userCertificate;binary=\" TEST_CERT_BIN);",
      "1495:     assert_non_null(domains);",
      "1496:     assert_string_equal(domains[0], \"test.dom\");",
      "1497:     assert_null(domains[1]);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1476:                                         &filter, &domains);",
      "1477:     assert_int_equal(ret, 0);",
      "1478:     assert_non_null(filter);",
      "1479:     assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
      "1480:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
      "1481:     assert_non_null(domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1509:     assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"",
      "1510:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
      "1511:     assert_non_null(domains);",
      "1512:     assert_string_equal(domains[0], \"test.dom\");",
      "1513:     assert_null(domains[1]);",
      "1515:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1516:                                           sizeof(test_cert_der),",
      "1517:                                           &filter, &domains);",
      "1518:     assert_int_equal(ret, 0);",
      "1519:     assert_non_null(filter);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1492:                                         &filter, &domains);",
      "1493:     assert_int_equal(ret, 0);",
      "1494:     assert_non_null(filter);",
      "1495:     assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
      "1496:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
      "1497:     assert_non_null(domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1536:     assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"",
      "1537:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
      "1538:     assert_non_null(domains);",
      "1539:     assert_string_equal(domains[0], \"test.dom\");",
      "1540:     assert_null(domains[1]);",
      "1542:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1543:                                           sizeof(test_cert_der),",
      "1544:                                           &filter, &domains);",
      "1545:     assert_int_equal(ret, 0);",
      "1546:     assert_non_null(filter);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1510:     assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");",
      "1511:     assert_null(domains);",
      "1513:     ret = sss_certmap_add_rule(ctx, 94,",
      "1514:                       \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",",
      "1515:                       \"LDAP:rule94=<I>{issuer_dn!ad_x500}<S>{subject_dn!ad_x500}\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1565:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1566:                                           sizeof(test_cert_der),",
      "1567:                                           &filter, &domains);",
      "1568:     assert_int_equal(ret, 0);",
      "1569:     assert_non_null(filter);",
      "1570:     assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");",
      "1571:     assert_null(domains);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1520:                                         &filter, &domains);",
      "1521:     assert_int_equal(ret, 0);",
      "1522:     assert_non_null(filter);",
      "1524:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
      "1525:     assert_non_null(domains);",
      "1526:     assert_string_equal(domains[0], \"test.dom\");",
      "1527:     assert_null(domains[1]);",
      "1530:     ret = sss_certmap_add_rule(ctx, 89, NULL,",
      "1531:                             \"(rule89={subject_nt_principal})\",",
      "",
      "[Removed Lines]",
      "1523:     assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
      "",
      "[Added Lines]",
      "1583:     assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"",
      "1589:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
      "1590:                                           sizeof(test_cert_der),",
      "1591:                                           &filter, &domains);",
      "1592:     assert_int_equal(ret, 0);",
      "1593:     assert_non_null(filter);",
      "1594:     assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
      "1595:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
      "1596:     assert_non_null(domains);",
      "1597:     assert_string_equal(domains[0], \"test.dom\");",
      "1598:     assert_null(domains[1]);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1539:     assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");",
      "1540:     assert_null(domains);",
      "1542:     ret = sss_certmap_add_rule(ctx, 88, NULL,",
      "1543:                             \"(rule88={subject_nt_principal.short_name})\",",
      "1544:                             NULL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1612:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),",
      "1613:                                           sizeof(test_cert2_der),",
      "1614:                                           &filter, &domains);",
      "1615:     assert_int_equal(ret, 0);",
      "1616:     assert_non_null(filter);",
      "1617:     assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");",
      "1618:     assert_null(domains);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1560:                                         &filter, &domains);",
      "1561:     assert_int_equal(ret, 0);",
      "1562:     assert_non_null(filter);",
      "1563:     assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
      "1564:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");",
      "1565:     assert_null(domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1641:     assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
      "1642:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t\\\\20u,E=test.user@email.domain\");",
      "1643:     assert_null(domains);",
      "1645:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),",
      "1646:                                           sizeof(test_cert2_der),",
      "1647:                                           &filter, &domains);",
      "1648:     assert_int_equal(ret, 0);",
      "1649:     assert_non_null(filter);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1573:                                         &filter, &domains);",
      "1574:     assert_int_equal(ret, 0);",
      "1575:     assert_non_null(filter);",
      "1576:     assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
      "1577:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");",
      "1578:     assert_null(domains);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1663:     assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
      "1664:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t\\\\20u,E=test.user@email.domain\");",
      "1665:     assert_null(domains);",
      "1667:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),",
      "1668:                                           sizeof(test_cert2_der),",
      "1669:                                           &filter, &domains);",
      "1670:     assert_int_equal(ret, 0);",
      "1671:     assert_non_null(filter);",
      "",
      "---------------"
    ],
    "src/util/util.c||src/util/util.c": [
      "File: src/util/util.c -> src/util/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     return sss_hash_create_ex(mem_ctx, count, tbl, 0, 0, 0, 0, NULL, NULL);",
      "437: }",
      "533: char *",
      "534: sss_escape_ip_address(TALLOC_CTX *mem_ctx, int family, const char *addr)",
      "535: {",
      "",
      "[Removed Lines]",
      "439: errno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,",
      "440:                                const char *input,",
      "441:                                char **sanitized,",
      "442:                                const char *ignore)",
      "443: {",
      "444:     char *output;",
      "445:     size_t i = 0;",
      "446:     size_t j = 0;",
      "447:     char *allowed;",
      "450:     output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);",
      "451:     if (!output) {",
      "452:         return ENOMEM;",
      "453:     }",
      "455:     while (input[i]) {",
      "459:         if (ignore == NULL) {",
      "460:             allowed = NULL;",
      "461:         } else {",
      "462:             allowed = strchr(ignore, input[i]);",
      "463:         }",
      "464:         if (allowed) {",
      "465:             output[j++] = input[i++];",
      "466:             continue;",
      "467:         }",
      "469:         switch(input[i]) {",
      "470:         case '\\t':",
      "471:             output[j++] = '\\\\';",
      "472:             output[j++] = '0';",
      "473:             output[j++] = '9';",
      "474:             break;",
      "475:         case ' ':",
      "476:             output[j++] = '\\\\';",
      "477:             output[j++] = '2';",
      "478:             output[j++] = '0';",
      "479:             break;",
      "480:         case '*':",
      "481:             output[j++] = '\\\\';",
      "482:             output[j++] = '2';",
      "483:             output[j++] = 'a';",
      "484:             break;",
      "485:         case '(':",
      "486:             output[j++] = '\\\\';",
      "487:             output[j++] = '2';",
      "488:             output[j++] = '8';",
      "489:             break;",
      "490:         case ')':",
      "491:             output[j++] = '\\\\';",
      "492:             output[j++] = '2';",
      "493:             output[j++] = '9';",
      "494:             break;",
      "495:         case '\\\\':",
      "496:             output[j++] = '\\\\';",
      "497:             output[j++] = '5';",
      "498:             output[j++] = 'c';",
      "499:             break;",
      "500:         case '\\r':",
      "501:             output[j++] = '\\\\';",
      "502:             output[j++] = '0';",
      "503:             output[j++] = 'd';",
      "504:             break;",
      "505:         case '\\n':",
      "506:             output[j++] = '\\\\';",
      "507:             output[j++] = '0';",
      "508:             output[j++] = 'a';",
      "509:             break;",
      "510:         default:",
      "511:             output[j++] = input[i];",
      "512:         }",
      "514:         i++;",
      "515:     }",
      "516:     output[j] = '\\0';",
      "518:     if (!*sanitized) {",
      "519:         talloc_free(output);",
      "520:         return ENOMEM;",
      "521:     }",
      "523:     return EOK;",
      "524: }",
      "526: errno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,",
      "527:                             const char *input,",
      "528:                             char **sanitized)",
      "529: {",
      "530:     return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);",
      "531: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/util/util_ext.c||src/util/util_ext.c": [
      "File: src/util/util_ext.c -> src/util/util_ext.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #define EOK 0",
      "32: int split_on_separator(TALLOC_CTX *mem_ctx, const char *str,",
      "33:                        const char sep, bool trim, bool skip_empty,",
      "34:                        char ***_list, int *size)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #ifndef HAVE_ERRNO_T",
      "33: #define HAVE_ERRNO_T",
      "34: typedef int errno_t;",
      "35: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     return false;",
      "143: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150: errno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,",
      "151:                                const char *input,",
      "152:                                char **sanitized,",
      "153:                                const char *ignore)",
      "154: {",
      "155:     char *output;",
      "156:     size_t i = 0;",
      "157:     size_t j = 0;",
      "158:     char *allowed;",
      "161:     output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);",
      "162:     if (!output) {",
      "163:         return ENOMEM;",
      "164:     }",
      "166:     while (input[i]) {",
      "170:         if (ignore == NULL) {",
      "171:             allowed = NULL;",
      "172:         } else {",
      "173:             allowed = strchr(ignore, input[i]);",
      "174:         }",
      "175:         if (allowed) {",
      "176:             output[j++] = input[i++];",
      "177:             continue;",
      "178:         }",
      "180:         switch(input[i]) {",
      "181:         case '\\t':",
      "182:             output[j++] = '\\\\';",
      "183:             output[j++] = '0';",
      "184:             output[j++] = '9';",
      "185:             break;",
      "186:         case ' ':",
      "187:             output[j++] = '\\\\';",
      "188:             output[j++] = '2';",
      "189:             output[j++] = '0';",
      "190:             break;",
      "191:         case '*':",
      "192:             output[j++] = '\\\\';",
      "193:             output[j++] = '2';",
      "194:             output[j++] = 'a';",
      "195:             break;",
      "196:         case '(':",
      "197:             output[j++] = '\\\\';",
      "198:             output[j++] = '2';",
      "199:             output[j++] = '8';",
      "200:             break;",
      "201:         case ')':",
      "202:             output[j++] = '\\\\';",
      "203:             output[j++] = '2';",
      "204:             output[j++] = '9';",
      "205:             break;",
      "206:         case '\\\\':",
      "207:             output[j++] = '\\\\';",
      "208:             output[j++] = '5';",
      "209:             output[j++] = 'c';",
      "210:             break;",
      "211:         case '\\r':",
      "212:             output[j++] = '\\\\';",
      "213:             output[j++] = '0';",
      "214:             output[j++] = 'd';",
      "215:             break;",
      "216:         case '\\n':",
      "217:             output[j++] = '\\\\';",
      "218:             output[j++] = '0';",
      "219:             output[j++] = 'a';",
      "220:             break;",
      "221:         default:",
      "222:             output[j++] = input[i];",
      "223:         }",
      "225:         i++;",
      "226:     }",
      "227:     output[j] = '\\0';",
      "229:     if (!*sanitized) {",
      "230:         talloc_free(output);",
      "231:         return ENOMEM;",
      "232:     }",
      "234:     return EOK;",
      "235: }",
      "237: errno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,",
      "238:                             const char *input,",
      "239:                             char **sanitized)",
      "240: {",
      "241:     return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);",
      "242: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "918fb32af6a271230bf87db47f78768edb9ca86c",
      "candidate_info": {
        "commit_hash": "918fb32af6a271230bf87db47f78768edb9ca86c",
        "repo": "SSSD/sssd",
        "commit_url": "https://github.com/SSSD/sssd/commit/918fb32af6a271230bf87db47f78768edb9ca86c",
        "files": [
          "Makefile.am",
          "src/lib/certmap/sss_certmap.c",
          "src/lib/certmap/sss_certmap.exports",
          "src/lib/certmap/sss_certmap.h",
          "src/responder/pam/pamsrv_p11.c",
          "src/tests/cmocka/test_certmap.c",
          "src/util/util.c",
          "src/util/util_ext.c"
        ],
        "message": "certmap: sanitize LDAP search filter\n\nThe sss_certmap_get_search_filter() will now sanitize the values read\nfrom the certificates before adding them to a search filter. To be able\nto get the plain values as well sss_certmap_expand_mapping_rule() is\nadded.\n\nResolves:\nhttps://github.com/SSSD/sssd/issues/5135\n\nReviewed-by: Alexey Tikhonov <atikhono@redhat.com>\n(cherry picked from commit a2b9a84460429181f2a4fa7e2bb5ab49fd561274)\n\nReviewed-by: Alexey Tikhonov <atikhono@redhat.com>\nReviewed-by: Justin Stephenson <jstephen@redhat.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/lib/certmap/sss_certmap.c||src/lib/certmap/sss_certmap.c",
          "src/lib/certmap/sss_certmap.exports||src/lib/certmap/sss_certmap.exports",
          "src/lib/certmap/sss_certmap.h||src/lib/certmap/sss_certmap.h",
          "src/responder/pam/pamsrv_p11.c||src/responder/pam/pamsrv_p11.c",
          "src/tests/cmocka/test_certmap.c||src/tests/cmocka/test_certmap.c",
          "src/util/util.c||src/util/util.c",
          "src/util/util_ext.c||src/util/util_ext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "src/lib/certmap/sss_certmap.c||src/lib/certmap/sss_certmap.c",
            "src/lib/certmap/sss_certmap.exports||src/lib/certmap/sss_certmap.exports",
            "src/lib/certmap/sss_certmap.h||src/lib/certmap/sss_certmap.h",
            "src/responder/pam/pamsrv_p11.c||src/responder/pam/pamsrv_p11.c",
            "src/tests/cmocka/test_certmap.c||src/tests/cmocka/test_certmap.c",
            "src/util/util.c||src/util/util.c",
            "src/util/util_ext.c||src/util/util_ext.c"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "src/lib/certmap/sss_certmap.c||src/lib/certmap/sss_certmap.c",
            "src/lib/certmap/sss_certmap.exports||src/lib/certmap/sss_certmap.exports",
            "src/lib/certmap/sss_certmap.h||src/lib/certmap/sss_certmap.h",
            "src/responder/pam/pamsrv_p11.c||src/responder/pam/pamsrv_p11.c",
            "src/tests/cmocka/test_certmap.c||src/tests/cmocka/test_certmap.c",
            "src/util/util.c||src/util/util.c",
            "src/util/util_ext.c||src/util/util_ext.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1864:     $(NULL)",
          "1865: libsss_certmap_la_LDFLAGS = \\",
          "1866:     -Wl,--version-script,$(srcdir)/src/lib/certmap/sss_certmap.exports \\",
          "1869: if HAVE_NSS",
          "1870: libsss_certmap_la_SOURCES += \\",
          "",
          "[Removed Lines]",
          "1867:     -version-info 1:0:1",
          "",
          "[Added Lines]",
          "1867:     -version-info 2:0:2",
          "",
          "---------------"
        ],
        "src/lib/certmap/sss_certmap.c||src/lib/certmap/sss_certmap.c": [
          "File: src/lib/certmap/sss_certmap.c -> src/lib/certmap/sss_certmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: static int expand_template(struct sss_certmap_ctx *ctx,",
          "442:                            struct parsed_template *parsed_template,",
          "443:                            struct sss_cert_content *cert_content,",
          "444:                            char **expanded)",
          "445: {",
          "446:     int ret;",
          "447:     char *exp = NULL;",
          "449:     if (strcmp(\"issuer_dn\", parsed_template->name) == 0) {",
          "450:         ret = rdn_list_2_dn_str(ctx, parsed_template->conversion,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:                            bool sanitize,",
          "449:     char *exp_sanitized = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:     } else if (strncmp(\"subject_\", parsed_template->name, 8) == 0) {",
          "456:         ret = expand_san(ctx, parsed_template, cert_content->san_list, &exp);",
          "457:     } else if (strcmp(\"cert\", parsed_template->name) == 0) {",
          "458:         ret = expand_cert(ctx, parsed_template, cert_content, &exp);",
          "459:     } else {",
          "460:         CM_DEBUG(ctx, \"Unsupported template name.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:         sanitize = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "471:         goto done;",
          "472:     }",
          "474:     ret = 0;",
          "476: done:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:     if (sanitize) {",
          "479:         ret = sss_filter_sanitize(ctx, exp, &exp_sanitized);",
          "480:         if (ret != EOK) {",
          "481:             CM_DEBUG(ctx, \"Failed to sanitize expanded template.\");",
          "482:             goto done;",
          "483:         }",
          "484:         talloc_free(exp);",
          "485:         exp = exp_sanitized;",
          "486:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486: static int get_filter(struct sss_certmap_ctx *ctx,",
          "487:                       struct ldap_mapping_rule *parsed_mapping_rule,",
          "489:                       char **filter)",
          "490: {",
          "491:     struct ldap_mapping_rule_comp *comp;",
          "",
          "[Removed Lines]",
          "488:                       struct sss_cert_content *cert_content,",
          "",
          "[Added Lines]",
          "502:                       struct sss_cert_content *cert_content, bool sanitize,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503:             result = talloc_strdup_append(result, comp->val);",
          "504:         } else if (comp->type == comp_template) {",
          "505:             ret = expand_template(ctx, comp->parsed_template, cert_content,",
          "507:             if (ret != 0) {",
          "508:                 CM_DEBUG(ctx, \"Failed to expanded template.\");",
          "509:                 goto done;",
          "",
          "[Removed Lines]",
          "506:                                   &expanded);",
          "",
          "[Added Lines]",
          "520:                                   sanitize, &expanded);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "791:     return ret;",
          "792: }",
          "795:                                   const uint8_t *der_cert, size_t der_size,",
          "796:                                   char **_filter, char ***_domains)",
          "797: {",
          "798:     int ret;",
          "",
          "[Removed Lines]",
          "794: int sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,",
          "",
          "[Added Lines]",
          "808: static int expand_mapping_rule_ex(struct sss_certmap_ctx *ctx,",
          "810:                                   bool sanitize,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "819:             return EINVAL;",
          "820:         }",
          "823:         goto done;",
          "824:     }",
          "",
          "[Removed Lines]",
          "822:         ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, &filter);",
          "",
          "[Added Lines]",
          "837:         ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, sanitize,",
          "838:                          &filter);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "829:             if (ret == 0) {",
          "831:                 ret = get_filter(ctx, r->parsed_mapping_rule, cert_content,",
          "833:                 if (ret != 0) {",
          "834:                     CM_DEBUG(ctx, \"Failed to get filter\");",
          "835:                     goto done;",
          "",
          "[Removed Lines]",
          "832:                                  &filter);",
          "",
          "[Added Lines]",
          "848:                                  sanitize, &filter);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "873:     return ret;",
          "874: }",
          "876: int sss_certmap_init(TALLOC_CTX *mem_ctx,",
          "877:                      sss_certmap_ext_debug *debug, void *debug_priv,",
          "878:                      struct sss_certmap_ctx **ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892: int sss_certmap_get_search_filter(struct sss_certmap_ctx *ctx,",
          "893:                                   const uint8_t *der_cert, size_t der_size,",
          "894:                                   char **_filter, char ***_domains)",
          "895: {",
          "896:     return expand_mapping_rule_ex(ctx, der_cert, der_size, true,",
          "897:                                   _filter, _domains);",
          "898: }",
          "900: int sss_certmap_expand_mapping_rule(struct sss_certmap_ctx *ctx,",
          "901:                                     const uint8_t *der_cert, size_t der_size,",
          "902:                                     char **_expanded, char ***_domains)",
          "903: {",
          "904:     return expand_mapping_rule_ex(ctx, der_cert, der_size, false,",
          "905:                                   _expanded, _domains);",
          "906: }",
          "",
          "---------------"
        ],
        "src/lib/certmap/sss_certmap.exports||src/lib/certmap/sss_certmap.exports": [
          "File: src/lib/certmap/sss_certmap.exports -> src/lib/certmap/sss_certmap.exports",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     global:",
          "17:         sss_certmap_display_cert_content;",
          "18: } SSS_CERTMAP_0.0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: SSS_CERTMAP_0.2 {",
          "21:     global:",
          "22:         sss_certmap_expand_mapping_rule;",
          "23: } SSS_CERTMAP_0.1;",
          "",
          "---------------"
        ],
        "src/lib/certmap/sss_certmap.h||src/lib/certmap/sss_certmap.h": [
          "File: src/lib/certmap/sss_certmap.h -> src/lib/certmap/sss_certmap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:                                   const uint8_t *der_cert, size_t der_size,",
          "137:                                   char **filter, char ***domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: int sss_certmap_expand_mapping_rule(struct sss_certmap_ctx *ctx,",
          "161:                                     const uint8_t *der_cert, size_t der_size,",
          "162:                                     char **_expanded, char ***_domains);",
          "",
          "---------------"
        ],
        "src/responder/pam/pamsrv_p11.c||src/responder/pam/pamsrv_p11.c": [
          "File: src/responder/pam/pamsrv_p11.c -> src/responder/pam/pamsrv_p11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:         goto done;",
          "1045:     }",
          "1048:     if (ret != 0) {",
          "1050:         goto done;",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1047:     ret = sss_certmap_get_search_filter(ctx, der, der_size, &filter, &domains);",
          "1049:         DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_get_search_filter failed.\\n\");",
          "",
          "[Added Lines]",
          "1047:     ret = sss_certmap_expand_mapping_rule(ctx, der, der_size,",
          "1048:                                           &filter, &domains);",
          "1050:         DEBUG(SSSDBG_OP_FAILURE, \"sss_certmap_expand_mapping_rule failed.\\n\");",
          "",
          "---------------"
        ],
        "src/tests/cmocka/test_certmap.c||src/tests/cmocka/test_certmap.c": [
          "File: src/tests/cmocka/test_certmap.c -> src/tests/cmocka/test_certmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1431:                                         &filter, &domains);",
          "1432:     assert_int_equal(ret, 0);",
          "1433:     assert_non_null(filter);",
          "1434:     assert_string_equal(filter, \"rule100=<I>CN=Certificate Authority,O=IPA.DEVEL\"",
          "1435:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
          "1436:     assert_null(domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1434:     assert_string_equal(filter, \"rule100=<I>CN=Certificate\\\\20Authority,O=IPA.DEVEL\"",
          "1435:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
          "1436:     assert_null(domains);",
          "1438:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1439:                                           sizeof(test_cert_der),",
          "1440:                                           &filter, &domains);",
          "1441:     assert_int_equal(ret, 0);",
          "1442:     assert_non_null(filter);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1445:                                         &filter, &domains);",
          "1446:     assert_int_equal(ret, 0);",
          "1447:     assert_non_null(filter);",
          "1448:     assert_string_equal(filter, \"rule99=<I>CN=Certificate Authority,O=IPA.DEVEL\"",
          "1449:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
          "1450:     assert_non_null(domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1457:     assert_string_equal(filter, \"rule99=<I>CN=Certificate\\\\20Authority,O=IPA.DEVEL\"",
          "1458:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
          "1459:     assert_non_null(domains);",
          "1460:     assert_string_equal(domains[0], \"test.dom\");",
          "1461:     assert_null(domains[1]);",
          "1463:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1464:                                           sizeof(test_cert_der),",
          "1465:                                           &filter, &domains);",
          "1466:     assert_int_equal(ret, 0);",
          "1467:     assert_non_null(filter);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1466:     assert_string_equal(domains[0], \"test.dom\");",
          "1467:     assert_null(domains[1]);",
          "1469:     ret = sss_certmap_add_rule(ctx, 97,",
          "1470:                             \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",",
          "1471:                             \"LDAP:rule97=<I>{issuer_dn!nss_x500}<S>{subject_dn}\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1490:                                           sizeof(test_cert_der),",
          "1491:                                           &filter, &domains);",
          "1492:     assert_int_equal(ret, 0);",
          "1493:     assert_non_null(filter);",
          "1494:     assert_string_equal(filter, \"rule98=userCertificate;binary=\" TEST_CERT_BIN);",
          "1495:     assert_non_null(domains);",
          "1496:     assert_string_equal(domains[0], \"test.dom\");",
          "1497:     assert_null(domains[1]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1476:                                         &filter, &domains);",
          "1477:     assert_int_equal(ret, 0);",
          "1478:     assert_non_null(filter);",
          "1479:     assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
          "1480:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
          "1481:     assert_non_null(domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509:     assert_string_equal(filter, \"rule97=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"",
          "1510:                                 \"<S>CN=ipa-devel.ipa.devel,O=IPA.DEVEL\");",
          "1511:     assert_non_null(domains);",
          "1512:     assert_string_equal(domains[0], \"test.dom\");",
          "1513:     assert_null(domains[1]);",
          "1515:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1516:                                           sizeof(test_cert_der),",
          "1517:                                           &filter, &domains);",
          "1518:     assert_int_equal(ret, 0);",
          "1519:     assert_non_null(filter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1492:                                         &filter, &domains);",
          "1493:     assert_int_equal(ret, 0);",
          "1494:     assert_non_null(filter);",
          "1495:     assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
          "1496:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
          "1497:     assert_non_null(domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1536:     assert_string_equal(filter, \"rule96=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"",
          "1537:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
          "1538:     assert_non_null(domains);",
          "1539:     assert_string_equal(domains[0], \"test.dom\");",
          "1540:     assert_null(domains[1]);",
          "1542:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1543:                                           sizeof(test_cert_der),",
          "1544:                                           &filter, &domains);",
          "1545:     assert_int_equal(ret, 0);",
          "1546:     assert_non_null(filter);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1510:     assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");",
          "1511:     assert_null(domains);",
          "1513:     ret = sss_certmap_add_rule(ctx, 94,",
          "1514:                       \"KRB5:<ISSUER>CN=Certificate Authority,O=IPA.DEVEL\",",
          "1515:                       \"LDAP:rule94=<I>{issuer_dn!ad_x500}<S>{subject_dn!ad_x500}\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1565:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1566:                                           sizeof(test_cert_der),",
          "1567:                                           &filter, &domains);",
          "1568:     assert_int_equal(ret, 0);",
          "1569:     assert_non_null(filter);",
          "1570:     assert_string_equal(filter, \"(userCertificate;binary=\" TEST_CERT_BIN \")\");",
          "1571:     assert_null(domains);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1520:                                         &filter, &domains);",
          "1521:     assert_int_equal(ret, 0);",
          "1522:     assert_non_null(filter);",
          "1524:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
          "1525:     assert_non_null(domains);",
          "1526:     assert_string_equal(domains[0], \"test.dom\");",
          "1527:     assert_null(domains[1]);",
          "1530:     ret = sss_certmap_add_rule(ctx, 89, NULL,",
          "1531:                             \"(rule89={subject_nt_principal})\",",
          "",
          "[Removed Lines]",
          "1523:     assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
          "",
          "[Added Lines]",
          "1583:     assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate\\\\20Authority\"",
          "1589:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert_der),",
          "1590:                                           sizeof(test_cert_der),",
          "1591:                                           &filter, &domains);",
          "1592:     assert_int_equal(ret, 0);",
          "1593:     assert_non_null(filter);",
          "1594:     assert_string_equal(filter, \"rule94=<I>O=IPA.DEVEL,CN=Certificate Authority\"",
          "1595:                                 \"<S>O=IPA.DEVEL,CN=ipa-devel.ipa.devel\");",
          "1596:     assert_non_null(domains);",
          "1597:     assert_string_equal(domains[0], \"test.dom\");",
          "1598:     assert_null(domains[1]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1539:     assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");",
          "1540:     assert_null(domains);",
          "1542:     ret = sss_certmap_add_rule(ctx, 88, NULL,",
          "1543:                             \"(rule88={subject_nt_principal.short_name})\",",
          "1544:                             NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1612:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),",
          "1613:                                           sizeof(test_cert2_der),",
          "1614:                                           &filter, &domains);",
          "1615:     assert_int_equal(ret, 0);",
          "1616:     assert_non_null(filter);",
          "1617:     assert_string_equal(filter, \"(rule89=tu1@ad.devel)\");",
          "1618:     assert_null(domains);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1560:                                         &filter, &domains);",
          "1561:     assert_int_equal(ret, 0);",
          "1562:     assert_non_null(filter);",
          "1563:     assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
          "1564:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");",
          "1565:     assert_null(domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1641:     assert_string_equal(filter, \"rule87=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
          "1642:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t\\\\20u,E=test.user@email.domain\");",
          "1643:     assert_null(domains);",
          "1645:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),",
          "1646:                                           sizeof(test_cert2_der),",
          "1647:                                           &filter, &domains);",
          "1648:     assert_int_equal(ret, 0);",
          "1649:     assert_non_null(filter);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1573:                                         &filter, &domains);",
          "1574:     assert_int_equal(ret, 0);",
          "1575:     assert_non_null(filter);",
          "1576:     assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
          "1577:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t u,E=test.user@email.domain\");",
          "1578:     assert_null(domains);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1663:     assert_string_equal(filter, \"rule86=<I>DC=devel,DC=ad,CN=ad-AD-SERVER-CA\"",
          "1664:                   \"<S>DC=devel,DC=ad,CN=Users,CN=t\\\\20u,E=test.user@email.domain\");",
          "1665:     assert_null(domains);",
          "1667:     ret = sss_certmap_expand_mapping_rule(ctx, discard_const(test_cert2_der),",
          "1668:                                           sizeof(test_cert2_der),",
          "1669:                                           &filter, &domains);",
          "1670:     assert_int_equal(ret, 0);",
          "1671:     assert_non_null(filter);",
          "",
          "---------------"
        ],
        "src/util/util.c||src/util/util.c": [
          "File: src/util/util.c -> src/util/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:     return sss_hash_create_ex(mem_ctx, count, tbl, 0, 0, 0, 0, NULL, NULL);",
          "437: }",
          "",
          "[Removed Lines]",
          "439: errno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,",
          "440:                                const char *input,",
          "441:                                char **sanitized,",
          "442:                                const char *ignore)",
          "443: {",
          "444:     char *output;",
          "445:     size_t i = 0;",
          "446:     size_t j = 0;",
          "447:     char *allowed;",
          "450:     output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);",
          "451:     if (!output) {",
          "452:         return ENOMEM;",
          "453:     }",
          "455:     while (input[i]) {",
          "459:         if (ignore == NULL) {",
          "460:             allowed = NULL;",
          "461:         } else {",
          "462:             allowed = strchr(ignore, input[i]);",
          "463:         }",
          "464:         if (allowed) {",
          "465:             output[j++] = input[i++];",
          "466:             continue;",
          "467:         }",
          "469:         switch(input[i]) {",
          "470:         case '\\t':",
          "471:             output[j++] = '\\\\';",
          "472:             output[j++] = '0';",
          "473:             output[j++] = '9';",
          "474:             break;",
          "475:         case ' ':",
          "476:             output[j++] = '\\\\';",
          "477:             output[j++] = '2';",
          "478:             output[j++] = '0';",
          "479:             break;",
          "480:         case '*':",
          "481:             output[j++] = '\\\\';",
          "482:             output[j++] = '2';",
          "483:             output[j++] = 'a';",
          "484:             break;",
          "485:         case '(':",
          "486:             output[j++] = '\\\\';",
          "487:             output[j++] = '2';",
          "488:             output[j++] = '8';",
          "489:             break;",
          "490:         case ')':",
          "491:             output[j++] = '\\\\';",
          "492:             output[j++] = '2';",
          "493:             output[j++] = '9';",
          "494:             break;",
          "495:         case '\\\\':",
          "496:             output[j++] = '\\\\';",
          "497:             output[j++] = '5';",
          "498:             output[j++] = 'c';",
          "499:             break;",
          "500:         case '\\r':",
          "501:             output[j++] = '\\\\';",
          "502:             output[j++] = '0';",
          "503:             output[j++] = 'd';",
          "504:             break;",
          "505:         case '\\n':",
          "506:             output[j++] = '\\\\';",
          "507:             output[j++] = '0';",
          "508:             output[j++] = 'a';",
          "509:             break;",
          "510:         default:",
          "511:             output[j++] = input[i];",
          "512:         }",
          "514:         i++;",
          "515:     }",
          "516:     output[j] = '\\0';",
          "518:     if (!*sanitized) {",
          "519:         talloc_free(output);",
          "520:         return ENOMEM;",
          "521:     }",
          "523:     return EOK;",
          "524: }",
          "526: errno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,",
          "527:                             const char *input,",
          "528:                             char **sanitized)",
          "529: {",
          "530:     return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);",
          "531: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util/util_ext.c||src/util/util_ext.c": [
          "File: src/util/util_ext.c -> src/util/util_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define EOK 0",
          "32: int split_on_separator(TALLOC_CTX *mem_ctx, const char *str,",
          "33:                        const char sep, bool trim, bool skip_empty,",
          "34:                        char ***_list, int *size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #ifndef HAVE_ERRNO_T",
          "33: #define HAVE_ERRNO_T",
          "34: typedef int errno_t;",
          "35: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:     return false;",
          "143: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: errno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,",
          "151:                                const char *input,",
          "152:                                char **sanitized,",
          "153:                                const char *ignore)",
          "154: {",
          "155:     char *output;",
          "156:     size_t i = 0;",
          "157:     size_t j = 0;",
          "158:     char *allowed;",
          "161:     output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);",
          "162:     if (!output) {",
          "163:         return ENOMEM;",
          "164:     }",
          "166:     while (input[i]) {",
          "170:         if (ignore == NULL) {",
          "171:             allowed = NULL;",
          "172:         } else {",
          "173:             allowed = strchr(ignore, input[i]);",
          "174:         }",
          "175:         if (allowed) {",
          "176:             output[j++] = input[i++];",
          "177:             continue;",
          "178:         }",
          "180:         switch(input[i]) {",
          "181:         case '\\t':",
          "182:             output[j++] = '\\\\';",
          "183:             output[j++] = '0';",
          "184:             output[j++] = '9';",
          "185:             break;",
          "186:         case ' ':",
          "187:             output[j++] = '\\\\';",
          "188:             output[j++] = '2';",
          "189:             output[j++] = '0';",
          "190:             break;",
          "191:         case '*':",
          "192:             output[j++] = '\\\\';",
          "193:             output[j++] = '2';",
          "194:             output[j++] = 'a';",
          "195:             break;",
          "196:         case '(':",
          "197:             output[j++] = '\\\\';",
          "198:             output[j++] = '2';",
          "199:             output[j++] = '8';",
          "200:             break;",
          "201:         case ')':",
          "202:             output[j++] = '\\\\';",
          "203:             output[j++] = '2';",
          "204:             output[j++] = '9';",
          "205:             break;",
          "206:         case '\\\\':",
          "207:             output[j++] = '\\\\';",
          "208:             output[j++] = '5';",
          "209:             output[j++] = 'c';",
          "210:             break;",
          "211:         case '\\r':",
          "212:             output[j++] = '\\\\';",
          "213:             output[j++] = '0';",
          "214:             output[j++] = 'd';",
          "215:             break;",
          "216:         case '\\n':",
          "217:             output[j++] = '\\\\';",
          "218:             output[j++] = '0';",
          "219:             output[j++] = 'a';",
          "220:             break;",
          "221:         default:",
          "222:             output[j++] = input[i];",
          "223:         }",
          "225:         i++;",
          "226:     }",
          "227:     output[j] = '\\0';",
          "229:     if (!*sanitized) {",
          "230:         talloc_free(output);",
          "231:         return ENOMEM;",
          "232:     }",
          "234:     return EOK;",
          "235: }",
          "237: errno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,",
          "238:                             const char *input,",
          "239:                             char **sanitized)",
          "240: {",
          "241:     return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);",
          "242: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}