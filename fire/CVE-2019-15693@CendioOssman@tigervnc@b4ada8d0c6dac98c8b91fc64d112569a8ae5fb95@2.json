{
  "cve_id": "CVE-2019-15693",
  "cve_desc": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow, which occurs in TightDecoder::FilterGradient. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
  "repo": "CendioOssman/tigervnc",
  "patch_hash": "b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
  "patch_info": {
    "commit_hash": "b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
    "repo": "CendioOssman/tigervnc",
    "commit_url": "https://github.com/CendioOssman/tigervnc/commit/b4ada8d0c6dac98c8b91fc64d112569a8ae5fb95",
    "files": [
      "common/rfb/tightDecode.h"
    ],
    "message": "Handle empty Tight gradient rects\n\nWe always assumed there would be one pixel per row so a rect with\na zero width would result in us writing to unknown memory.\n\nThis could theoretically be used by a malicious server to inject\ncode in to the viewer process.\n\nIssue found by Pavel Cheremushkin from Kaspersky Lab.",
    "before_after_code_files": [
      "common/rfb/tightDecode.h||common/rfb/tightDecode.h"
    ]
  },
  "patch_diff": {
    "common/rfb/tightDecode.h||common/rfb/tightDecode.h": [
      "File: common/rfb/tightDecode.h -> common/rfb/tightDecode.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:   int rectWidth = r.width();",
      "58:   for (y = 0; y < rectHeight; y++) {",
      "68:       for (c = 0; c < 3; c++) {",
      "69:         est[c] = prevRow[x*3+c] + pix[c] - prevRow[(x-1)*3+c];",
      "70:         if (est[c] > 0xff) {",
      "",
      "[Removed Lines]",
      "60:     for (c = 0; c < 3; c++) {",
      "61:       pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];",
      "62:       thisRow[c] = pix[c];",
      "63:     }",
      "64:     pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
      "67:     for (x = 1; x < rectWidth; x++) {",
      "",
      "[Added Lines]",
      "59:     for (x = 0; x < rectWidth; x++) {",
      "61:       if (x == 0) {",
      "62:         for (c = 0; c < 3; c++) {",
      "63:           pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];",
      "64:           thisRow[c] = pix[c];",
      "65:         }",
      "66:         pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
      "67:         continue;",
      "68:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "103:   int rectWidth = r.width();",
      "105:   for (y = 0; y < rectHeight; y++) {",
      "117:       for (c = 0; c < 3; c++) {",
      "118:         est[c] = prevRow[x*3+c] + pix[c] - prevRow[(x-1)*3+c];",
      "119:         if (est[c] > 255) {",
      "",
      "[Removed Lines]",
      "107:     pf.rgbFromBuffer(pix, &inbuf[y*rectWidth], 1);",
      "108:     for (c = 0; c < 3; c++)",
      "109:       pix[c] += prevRow[c];",
      "111:     memcpy(thisRow, pix, sizeof(pix));",
      "113:     pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
      "116:     for (x = 1; x < rectWidth; x++) {",
      "",
      "[Added Lines]",
      "108:     for (x = 0; x < rectWidth; x++) {",
      "110:       if (x == 0) {",
      "111:         pf.rgbFromBuffer(pix, &inbuf[y*rectWidth], 1);",
      "112:         for (c = 0; c < 3; c++)",
      "113:           pix[c] += prevRow[c];",
      "115:         memcpy(thisRow, pix, sizeof(pix));",
      "117:         pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);",
      "119:         continue;",
      "120:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
      "candidate_info": {
        "commit_hash": "f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "repo": "CendioOssman/tigervnc",
        "commit_url": "https://github.com/CendioOssman/tigervnc/commit/f1b9b868ec943d51ef631f53a095d48d3f178f4f",
        "files": [
          "common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx"
        ],
        "message": "Fix depth sanity test in PixelFormat",
        "before_after_code_files": [
          "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx",
          "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/TigerVNC/tigervnc/pull/921"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common/rfb/PixelFormat.cxx||common/rfb/PixelFormat.cxx": [
          "File: common/rfb/PixelFormat.cxx -> common/rfb/PixelFormat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:     return false;",
          "681:   totalBits = bits(redMax) + bits(greenMax) + bits(blueMax);",
          "683:     return false;",
          "685:   if (((redMax << redShift) & (greenMax << greenShift)) != 0)",
          "",
          "[Removed Lines]",
          "682:   if (totalBits > bpp)",
          "",
          "[Added Lines]",
          "682:   if (totalBits > depth)",
          "",
          "---------------"
        ],
        "tests/unit/pixelformat.cxx||tests/unit/pixelformat.cxx": [
          "File: tests/unit/pixelformat.cxx -> tests/unit/pixelformat.cxx",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     doTest(true, 32, 24, false, true, 127, 511, 127, 0, 4, 20);",
          "105:     doTest(true, 32, 24, false, true, 127, 127, 511, 0, 4, 8);",
          "109:     doTest(true, 32, 24, false, true, 255, 255, 255, 0, 7, 16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     doTest(true, 32, 16, false, true, 255, 255, 255, 0, 8, 16);",
          "",
          "---------------"
        ]
      }
    }
  ]
}