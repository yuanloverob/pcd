{
  "cve_id": "CVE-2023-36326",
  "cve_desc": "Integer Overflow vulnerability in RELIC before commit 34580d840469361ba9b5f001361cad659687b9ab, allows attackers to execute arbitrary code, cause a denial of service, and escalate privileges when calling realloc function in bn_grow function.",
  "repo": "relic-toolkit/relic",
  "patch_hash": "34580d840469361ba9b5f001361cad659687b9ab",
  "patch_info": {
    "commit_hash": "34580d840469361ba9b5f001361cad659687b9ab",
    "repo": "relic-toolkit/relic",
    "commit_url": "https://github.com/relic-toolkit/relic/commit/34580d840469361ba9b5f001361cad659687b9ab",
    "files": [
      "bench/bench_bn.c",
      "bench/bench_cp.c",
      "bench/bench_epx.c",
      "include/relic_bn.h",
      "include/relic_cp.h",
      "include/relic_eb.h",
      "include/relic_ed.h",
      "include/relic_ep.h",
      "include/relic_epx.h",
      "include/relic_fb.h",
      "include/relic_fp.h",
      "include/relic_fpx.h",
      "include/relic_md.h",
      "include/relic_rand.h",
      "include/relic_util.h",
      "src/bn/relic_bn_gcd.c",
      "src/bn/relic_bn_mem.c",
      "src/bn/relic_bn_mxp.c",
      "src/bn/relic_bn_prime.c",
      "src/bn/relic_bn_rec.c",
      "src/bn/relic_bn_shift.c",
      "src/bn/relic_bn_smb.c",
      "src/bn/relic_bn_srt.c",
      "src/bn/relic_bn_util.c",
      "src/cp/relic_cp_bls.c",
      "src/cp/relic_cp_cmlhs.c",
      "src/cp/relic_cp_pbpsi.c",
      "src/cp/relic_cp_rsa.c",
      "src/cp/relic_cp_sokaka.c",
      "src/cp/relic_cp_vbnn.c",
      "src/eb/relic_eb_map.c",
      "src/eb/relic_eb_mul.c",
      "src/eb/relic_eb_mul_sim.c",
      "src/eb/relic_eb_util.c",
      "src/ed/relic_ed_map.c",
      "src/ed/relic_ed_mul.c",
      "src/ed/relic_ed_mul_fix.c",
      "src/ed/relic_ed_mul_sim.c",
      "src/ed/relic_ed_util.c",
      "src/ep/relic_ep_map.c",
      "src/ep/relic_ep_mul.c",
      "src/ep/relic_ep_mul_fix.c",
      "src/ep/relic_ep_mul_sim.c",
      "src/ep/relic_ep_util.c",
      "src/epx/relic_ep2_map.c",
      "src/epx/relic_ep2_mul.c",
      "src/epx/relic_ep2_mul_fix.c",
      "src/epx/relic_ep2_mul_sim.c",
      "src/epx/relic_ep2_util.c",
      "src/epx/relic_ep4_map.c",
      "src/epx/relic_ep4_mul.c",
      "src/epx/relic_ep4_mul_fix.c",
      "src/epx/relic_ep4_mul_sim.c",
      "src/epx/relic_ep4_util.c",
      "src/fb/relic_fb_exp.c",
      "src/fb/relic_fb_util.c",
      "src/fp/relic_fp_exp.c",
      "src/fp/relic_fp_prime.c",
      "src/fp/relic_fp_util.c",
      "src/fpx/relic_fpx_cyc.c",
      "src/fpx/relic_fpx_exp.c",
      "src/fpx/relic_fpx_util.c",
      "src/md/relic_md_blake2s.c",
      "src/md/relic_md_hmac.c",
      "src/md/relic_md_kdf.c",
      "src/md/relic_md_mgf.c",
      "src/md/relic_md_sha224.c",
      "src/md/relic_md_sha256.c",
      "src/md/relic_md_sha384.c",
      "src/md/relic_md_sha512.c",
      "src/pp/relic_pp_map_k12.c",
      "src/pp/relic_pp_map_k24.c",
      "src/pp/relic_pp_map_k48.c",
      "src/pp/relic_pp_map_k54.c",
      "src/pp/relic_pp_map_k8.c",
      "src/rand/relic_rand_core.c",
      "src/rand/relic_rand_hashd.c",
      "src/relic_util.c",
      "test/test_bn.c",
      "test/test_core.c",
      "test/test_pc.c",
      "test/test_rand.c"
    ],
    "message": "Huge commit improving the API to use size_t instead of int.",
    "before_after_code_files": [
      "bench/bench_bn.c||bench/bench_bn.c",
      "bench/bench_cp.c||bench/bench_cp.c",
      "bench/bench_epx.c||bench/bench_epx.c",
      "include/relic_bn.h||include/relic_bn.h",
      "include/relic_cp.h||include/relic_cp.h",
      "include/relic_eb.h||include/relic_eb.h",
      "include/relic_ed.h||include/relic_ed.h",
      "include/relic_ep.h||include/relic_ep.h",
      "include/relic_epx.h||include/relic_epx.h",
      "include/relic_fb.h||include/relic_fb.h",
      "include/relic_fp.h||include/relic_fp.h",
      "include/relic_fpx.h||include/relic_fpx.h",
      "include/relic_md.h||include/relic_md.h",
      "include/relic_rand.h||include/relic_rand.h",
      "include/relic_util.h||include/relic_util.h",
      "src/bn/relic_bn_gcd.c||src/bn/relic_bn_gcd.c",
      "src/bn/relic_bn_mem.c||src/bn/relic_bn_mem.c",
      "src/bn/relic_bn_mxp.c||src/bn/relic_bn_mxp.c",
      "src/bn/relic_bn_prime.c||src/bn/relic_bn_prime.c",
      "src/bn/relic_bn_rec.c||src/bn/relic_bn_rec.c",
      "src/bn/relic_bn_shift.c||src/bn/relic_bn_shift.c",
      "src/bn/relic_bn_smb.c||src/bn/relic_bn_smb.c",
      "src/bn/relic_bn_srt.c||src/bn/relic_bn_srt.c",
      "src/bn/relic_bn_util.c||src/bn/relic_bn_util.c",
      "src/cp/relic_cp_bls.c||src/cp/relic_cp_bls.c",
      "src/cp/relic_cp_cmlhs.c||src/cp/relic_cp_cmlhs.c",
      "src/cp/relic_cp_pbpsi.c||src/cp/relic_cp_pbpsi.c",
      "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c",
      "src/cp/relic_cp_sokaka.c||src/cp/relic_cp_sokaka.c",
      "src/cp/relic_cp_vbnn.c||src/cp/relic_cp_vbnn.c",
      "src/eb/relic_eb_map.c||src/eb/relic_eb_map.c",
      "src/eb/relic_eb_mul.c||src/eb/relic_eb_mul.c",
      "src/eb/relic_eb_mul_sim.c||src/eb/relic_eb_mul_sim.c",
      "src/eb/relic_eb_util.c||src/eb/relic_eb_util.c",
      "src/ed/relic_ed_map.c||src/ed/relic_ed_map.c",
      "src/ed/relic_ed_mul.c||src/ed/relic_ed_mul.c",
      "src/ed/relic_ed_mul_fix.c||src/ed/relic_ed_mul_fix.c",
      "src/ed/relic_ed_mul_sim.c||src/ed/relic_ed_mul_sim.c",
      "src/ed/relic_ed_util.c||src/ed/relic_ed_util.c",
      "src/ep/relic_ep_map.c||src/ep/relic_ep_map.c",
      "src/ep/relic_ep_mul.c||src/ep/relic_ep_mul.c",
      "src/ep/relic_ep_mul_fix.c||src/ep/relic_ep_mul_fix.c",
      "src/ep/relic_ep_mul_sim.c||src/ep/relic_ep_mul_sim.c",
      "src/ep/relic_ep_util.c||src/ep/relic_ep_util.c",
      "src/epx/relic_ep2_map.c||src/epx/relic_ep2_map.c",
      "src/epx/relic_ep2_mul.c||src/epx/relic_ep2_mul.c",
      "src/epx/relic_ep2_mul_fix.c||src/epx/relic_ep2_mul_fix.c",
      "src/epx/relic_ep2_mul_sim.c||src/epx/relic_ep2_mul_sim.c",
      "src/epx/relic_ep2_util.c||src/epx/relic_ep2_util.c",
      "src/epx/relic_ep4_map.c||src/epx/relic_ep4_map.c",
      "src/epx/relic_ep4_mul.c||src/epx/relic_ep4_mul.c",
      "src/epx/relic_ep4_mul_fix.c||src/epx/relic_ep4_mul_fix.c",
      "src/epx/relic_ep4_mul_sim.c||src/epx/relic_ep4_mul_sim.c",
      "src/epx/relic_ep4_util.c||src/epx/relic_ep4_util.c",
      "src/fb/relic_fb_exp.c||src/fb/relic_fb_exp.c",
      "src/fb/relic_fb_util.c||src/fb/relic_fb_util.c",
      "src/fp/relic_fp_exp.c||src/fp/relic_fp_exp.c",
      "src/fp/relic_fp_prime.c||src/fp/relic_fp_prime.c",
      "src/fp/relic_fp_util.c||src/fp/relic_fp_util.c",
      "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c",
      "src/fpx/relic_fpx_exp.c||src/fpx/relic_fpx_exp.c",
      "src/fpx/relic_fpx_util.c||src/fpx/relic_fpx_util.c",
      "src/md/relic_md_blake2s.c||src/md/relic_md_blake2s.c",
      "src/md/relic_md_hmac.c||src/md/relic_md_hmac.c",
      "src/md/relic_md_kdf.c||src/md/relic_md_kdf.c",
      "src/md/relic_md_mgf.c||src/md/relic_md_mgf.c",
      "src/md/relic_md_sha224.c||src/md/relic_md_sha224.c",
      "src/md/relic_md_sha256.c||src/md/relic_md_sha256.c",
      "src/md/relic_md_sha384.c||src/md/relic_md_sha384.c",
      "src/md/relic_md_sha512.c||src/md/relic_md_sha512.c",
      "src/pp/relic_pp_map_k12.c||src/pp/relic_pp_map_k12.c",
      "src/pp/relic_pp_map_k24.c||src/pp/relic_pp_map_k24.c",
      "src/pp/relic_pp_map_k48.c||src/pp/relic_pp_map_k48.c",
      "src/pp/relic_pp_map_k54.c||src/pp/relic_pp_map_k54.c",
      "src/pp/relic_pp_map_k8.c||src/pp/relic_pp_map_k8.c",
      "src/rand/relic_rand_core.c||src/rand/relic_rand_core.c",
      "src/rand/relic_rand_hashd.c||src/rand/relic_rand_hashd.c",
      "src/relic_util.c||src/relic_util.c",
      "test/test_bn.c||test/test_bn.c",
      "test/test_core.c||test/test_core.c",
      "test/test_pc.c||test/test_pc.c",
      "test/test_rand.c||test/test_rand.c"
    ]
  },
  "patch_diff": {
    "bench/bench_bn.c||bench/bench_bn.c": [
      "File: bench/bench_bn.c -> bench/bench_bn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "284:  bn_t a, b, c, d[3], e[3];",
      "285:  crt_t crt;",
      "286:  dig_t f;",
      "289:  bn_null(a);",
      "290:  bn_null(b);",
      "",
      "[Removed Lines]",
      "287:  int len;",
      "",
      "[Added Lines]",
      "287:  size_t len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "892:  BENCH_RUN(\"bn_rec_naf\") {",
      "893:   int8_t naf[RLC_BN_BITS + 1];",
      "895:   bn_rand(a, RLC_POS, RLC_BN_BITS);",
      "896:   BENCH_ADD((len = RLC_BN_BITS + 1, bn_rec_naf(naf, &len, a, 4)));",
      "897:  }",
      "",
      "[Removed Lines]",
      "894:   int len;",
      "",
      "[Added Lines]",
      "894:   size_t len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "901:  if (eb_param_set_any_kbltz() == RLC_OK) {",
      "902:   BENCH_RUN(\"bn_rec_tnaf\") {",
      "903:    int8_t tnaf[RLC_FB_BITS + 8];",
      "905:    eb_curve_get_ord(b);",
      "906:    bn_rand_mod(a, b);",
      "907:    if (eb_curve_opt_a() == RLC_ZERO) {",
      "",
      "[Removed Lines]",
      "904:    int len = RLC_BN_BITS + 1;",
      "",
      "[Added Lines]",
      "904:    size_t len = RLC_BN_BITS + 1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "929:  BENCH_RUN(\"bn_rec_reg\") {",
      "930:   int8_t naf[RLC_BN_BITS + 1];",
      "932:   bn_rand(a, RLC_POS, RLC_BN_BITS);",
      "933:   BENCH_ADD((len = RLC_BN_BITS + 1, bn_rec_reg(naf, &len, a, RLC_BN_BITS, 4)));",
      "934:  }",
      "",
      "[Removed Lines]",
      "931:   int len = RLC_BN_BITS + 1;",
      "",
      "[Added Lines]",
      "931:   size_t len = RLC_BN_BITS + 1;",
      "",
      "---------------"
    ],
    "bench/bench_cp.c||bench/bench_cp.c": [
      "File: bench/bench_cp.c -> bench/bench_cp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:  dig_t in, new;",
      "142:  uint8_t out[RLC_BN_BITS / 8 + 1];",
      "143:  size_t out_len;",
      "145:  bdpe_null(pub);",
      "146:  bdpe_null(prv);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:  dig_t prime = 0xFB;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:  bdpe_new(pub);",
      "149:  bdpe_new(prv);",
      "154:  BENCH_RUN(\"cp_bdpe_enc\") {",
      "155:   out_len = RLC_BN_BITS / 8 + 1;",
      "156:   rand_bytes(out, 1);",
      "158:   BENCH_ADD(cp_bdpe_enc(out, &out_len, in, pub));",
      "159:   cp_bdpe_dec(&new, out, out_len, prv);",
      "160:  } BENCH_END;",
      "",
      "[Removed Lines]",
      "151:  BENCH_ONE(\"cp_bdpe_gen\", cp_bdpe_gen(pub, prv, bn_get_prime(47),",
      "152:   RLC_BN_BITS), 1);",
      "157:   in = out[0] % bn_get_prime(47);",
      "",
      "[Added Lines]",
      "152:  BENCH_ONE(\"cp_bdpe_gen\", cp_bdpe_gen(pub, prv, prime, RLC_BN_BITS), 1);",
      "157:   in = out[0] % prime;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "162:  BENCH_RUN(\"cp_bdpe_dec\") {",
      "163:   out_len = RLC_BN_BITS / 8 + 1;",
      "164:   rand_bytes(out, 1);",
      "166:   cp_bdpe_enc(out, &out_len, in, pub);",
      "167:   BENCH_ADD(cp_bdpe_dec(&new, out, out_len, prv));",
      "168:  } BENCH_END;",
      "",
      "[Removed Lines]",
      "165:   in = out[0] % bn_get_prime(47);",
      "",
      "[Added Lines]",
      "165:   in = out[0] % prime;",
      "",
      "---------------"
    ],
    "bench/bench_epx.c||bench/bench_epx.c": [
      "File: bench/bench_epx.c -> bench/bench_epx.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: static void memory2(void) {",
      "38:  ep2_t a[BENCH];",
      "43:  for (int i = 0; i < BENCH; i++) {",
      "44:   ep2_free(a[i]);",
      "45:  }",
      "",
      "[Removed Lines]",
      "40:  BENCH_FEW(\"ep2_null\", ep4_null(a[i]), 1);",
      "42:  BENCH_FEW(\"ep2_new\", ep4_new(a[i]), 1);",
      "",
      "[Added Lines]",
      "40:  BENCH_FEW(\"ep2_null\", ep2_null(a[i]), 1);",
      "42:  BENCH_FEW(\"ep2_new\", ep2_new(a[i]), 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:  for (int i = 0; i < BENCH; i++) {",
      "48:   ep2_new(a[i]);",
      "49:  }",
      "52:  (void)a;",
      "53: }",
      "",
      "[Removed Lines]",
      "50:  BENCH_FEW(\"ep2_free\", ep4_free(a[i]), 1);",
      "",
      "[Added Lines]",
      "50:  BENCH_FEW(\"ep2_free\", ep2_free(a[i]), 1);",
      "",
      "---------------"
    ],
    "include/relic_bn.h||include/relic_bn.h": [
      "File: include/relic_bn.h -> include/relic_bn.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "66: #if BN_MAGNI == DOUBLE",
      "68: #elif BN_MAGNI == CARRY",
      "70: #elif BN_MAGNI == SINGLE",
      "72: #endif",
      "",
      "[Removed Lines]",
      "56: #define RLC_BN_BITS  ((int)BN_PRECI)",
      "61: #define RLC_BN_DIGS  ((int)RLC_CEIL(BN_PRECI, RLC_DIG))",
      "67: #define RLC_BN_SIZE  ((int)(2 * RLC_BN_DIGS + 2))",
      "69: #define RLC_BN_SIZE  ((int)(RLC_BN_DIGS + 1))",
      "71: #define RLC_BN_SIZE  ((int)RLC_BN_DIGS)",
      "",
      "[Added Lines]",
      "56: #define RLC_BN_BITS  ((size_t)BN_PRECI)",
      "61: #define RLC_BN_DIGS  ((size_t)RLC_CEIL(BN_PRECI, RLC_DIG))",
      "67: #define RLC_BN_SIZE  ((size_t)(2 * RLC_BN_DIGS + 2))",
      "69: #define RLC_BN_SIZE  ((size_t)(RLC_BN_DIGS + 1))",
      "71: #define RLC_BN_SIZE  ((size_t)RLC_BN_DIGS)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95: typedef struct {",
      "101:  int sign;",
      "102: #if ALLOC == DYNAMIC",
      "",
      "[Removed Lines]",
      "97:  int alloc;",
      "99:  int used;",
      "",
      "[Added Lines]",
      "97:  size_t alloc;",
      "99:  size_t used;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "460: void bn_make(bn_t a, int digits);",
      "",
      "[Added Lines]",
      "460: void bn_make(bn_t a, size_t digits);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "479: void bn_grow(bn_t a, int digits);",
      "",
      "[Added Lines]",
      "479: void bn_grow(bn_t a, size_t digits);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "549: int bn_bits(const bn_t a);",
      "",
      "[Added Lines]",
      "549: size_t bn_bits(const bn_t a);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "558: int bn_get_bit(const bn_t a, int bit);",
      "",
      "[Added Lines]",
      "558: int bn_get_bit(const bn_t a, size_t bit);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "567: void bn_set_bit(bn_t a, int bit, int value);",
      "",
      "[Added Lines]",
      "567: void bn_set_bit(bn_t a, size_t bit, int value);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "575: int bn_ham(const bn_t a);",
      "",
      "[Added Lines]",
      "575: size_t bn_ham(const bn_t a);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "602: void bn_set_2b(bn_t a, int b);",
      "",
      "[Added Lines]",
      "602: void bn_set_2b(bn_t a, size_t b);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "611: void bn_rand(bn_t a, int sign, int bits);",
      "",
      "[Added Lines]",
      "611: void bn_rand(bn_t a, int sign, size_t bits);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "638: int bn_size_str(const bn_t a, int radix);",
      "",
      "[Added Lines]",
      "638: size_t bn_size_str(const bn_t a, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "650: void bn_read_str(bn_t a, const char *str, int len, int radix);",
      "",
      "[Added Lines]",
      "650: void bn_read_str(bn_t a, const char *str, size_t len, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "663: void bn_write_str(char *str, int len, const bn_t a, int radix);",
      "",
      "[Added Lines]",
      "663: void bn_write_str(char *str, size_t len, const bn_t a, unsigned radix);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "671: int bn_size_bin(const bn_t a);",
      "",
      "[Added Lines]",
      "671: size_t bn_size_bin(const bn_t a);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "681: void bn_read_bin(bn_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "681: void bn_read_bin(bn_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "692: void bn_write_bin(uint8_t *bin, int len, const bn_t a);",
      "",
      "[Added Lines]",
      "692: void bn_write_bin(uint8_t *bin, size_t len, const bn_t a);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "700: int bn_size_raw(const bn_t a);",
      "",
      "[Added Lines]",
      "700: size_t bn_size_raw(const bn_t a);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "709: void bn_read_raw(bn_t a, const dig_t *raw, int len);",
      "",
      "[Added Lines]",
      "709: void bn_read_raw(bn_t a, const dig_t *raw, size_t len);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "719: void bn_write_raw(dig_t *raw, int len, const bn_t a);",
      "",
      "[Added Lines]",
      "719: void bn_write_raw(dig_t *raw, size_t len, const bn_t a);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "873: void bn_lsh(bn_t c, const bn_t a, int bits);",
      "",
      "[Added Lines]",
      "873: void bn_lsh(bn_t c, const bn_t a, unsigned int bits);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "883: void bn_rsh(bn_t c, const bn_t a, int bits);",
      "",
      "[Added Lines]",
      "883: void bn_rsh(bn_t c, const bn_t a, unsigned int bits);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1313: void bn_gen_prime_basic(bn_t a, int bits);",
      "",
      "[Added Lines]",
      "1313: void bn_gen_prime_basic(bn_t a, size_t bits);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1321: void bn_gen_prime_safep(bn_t a, int bits);",
      "",
      "[Added Lines]",
      "1321: void bn_gen_prime_safep(bn_t a, size_t bits);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1330: void bn_gen_prime_stron(bn_t a, int bits);",
      "",
      "[Added Lines]",
      "1330: void bn_gen_prime_stron(bn_t a, size_t bits);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1341: int bn_gen_prime_factor(bn_t a, bn_t b, int abits, int bbits);",
      "",
      "[Added Lines]",
      "1341: int bn_gen_prime_factor(bn_t a, bn_t b, size_t abits, size_t bbits);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1373: void bn_rec_win(uint8_t *win, int *len, const bn_t k, int w);",
      "",
      "[Added Lines]",
      "1373: void bn_rec_win(uint8_t *win, size_t *len, const bn_t k, size_t w);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1385: void bn_rec_slw(uint8_t *win, int *len, const bn_t k, int w);",
      "",
      "[Added Lines]",
      "1385: void bn_rec_slw(uint8_t *win, size_t *len, const bn_t k, size_t w);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1397: void bn_rec_naf(int8_t *naf, int *len, const bn_t k, int w);",
      "",
      "[Added Lines]",
      "1397: void bn_rec_naf(int8_t *naf, size_t *len, const bn_t k, size_t w);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1411: void bn_rec_tnaf(int8_t *tnaf, int *len, const bn_t k, int8_t u, int m, int w);",
      "",
      "[Added Lines]",
      "1411: void bn_rec_tnaf(int8_t *tnaf, size_t *len, const bn_t k, int8_t u, size_t m,",
      "1412:   size_t w);",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1425: void bn_rec_rtnaf(int8_t *tnaf, int *len, const bn_t k, int8_t u, int m, int w);",
      "",
      "[Added Lines]",
      "1426: void bn_rec_rtnaf(int8_t *tnaf, size_t *len, const bn_t k, int8_t u, size_t m,",
      "1427:   size_t w);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1437: void bn_rec_tnaf_get(uint8_t *t, int8_t *beta, int8_t *gama, int8_t u, int w);",
      "",
      "[Added Lines]",
      "1439: void bn_rec_tnaf_get(uint8_t *t, int8_t *beta, int8_t *gama, int8_t u,",
      "1440:   size_t w);",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1449: void bn_rec_tnaf_mod(bn_t r0, bn_t r1, const bn_t k, int u, int m);",
      "",
      "[Added Lines]",
      "1452: void bn_rec_tnaf_mod(bn_t r0, bn_t r1, const bn_t k, int u, size_t m);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1462: void bn_rec_reg(int8_t *naf, int *len, const bn_t k, int n, int w);",
      "",
      "[Added Lines]",
      "1465: void bn_rec_reg(int8_t *naf, size_t *len, const bn_t k, size_t n, size_t w);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1474: void bn_rec_jsf(int8_t *jsf, int *len, const bn_t k, const bn_t l);",
      "",
      "[Added Lines]",
      "1477: void bn_rec_jsf(int8_t *jsf, size_t *len, const bn_t k, const bn_t l);",
      "",
      "---------------"
    ],
    "include/relic_cp.h||include/relic_cp.h": [
      "File: include/relic_cp.h -> include/relic_cp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "743: int cp_rsa_gen(rsa_t pub, rsa_t prv, int bits);",
      "",
      "[Added Lines]",
      "743: int cp_rsa_gen(rsa_t pub, rsa_t prv, size_t bits);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1543: int cp_bls_sig(g1_t s, const uint8_t *msg, int len, const bn_t d);",
      "",
      "[Added Lines]",
      "1543: int cp_bls_sig(g1_t s, const uint8_t *msg, size_t len, const bn_t d);",
      "",
      "---------------"
    ],
    "include/relic_eb.h||include/relic_eb.h": [
      "File: include/relic_eb.h -> include/relic_eb.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "563: void eb_read_bin(eb_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "563: void eb_read_bin(eb_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "575: void eb_write_bin(uint8_t *bin, int len, const eb_t a, int pack);",
      "",
      "[Added Lines]",
      "575: void eb_write_bin(uint8_t *bin, size_t len, const eb_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "931: void eb_map(eb_t p, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "931: void eb_map(eb_t p, const uint8_t *msg, size_t len);",
      "",
      "---------------"
    ],
    "include/relic_ed.h||include/relic_ed.h": [
      "File: include/relic_ed.h -> include/relic_ed.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "485: void ed_map(ed_t p, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "485: void ed_map(ed_t p, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "497: void ed_map_dst(ed_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "497: void ed_map_dst(ed_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "498:   size_t dst_len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "843: void ed_read_bin(ed_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "844: void ed_read_bin(ed_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "855: void ed_write_bin(uint8_t *bin, int len, const ed_t a, int pack);",
      "",
      "[Added Lines]",
      "856: void ed_write_bin(uint8_t *bin, size_t len, const ed_t a, int pack);",
      "",
      "---------------"
    ],
    "include/relic_ep.h||include/relic_ep.h": [
      "File: include/relic_ep.h -> include/relic_ep.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "814: void ep_read_bin(ep_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "814: void ep_read_bin(ep_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "826: void ep_write_bin(uint8_t *bin, int len, const ep_t a, int pack);",
      "",
      "[Added Lines]",
      "826: void ep_write_bin(uint8_t *bin, size_t len, const ep_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1218: void ep_map_from_field(ep_t p, const uint8_t *uniform_bytes, int len);",
      "",
      "[Added Lines]",
      "1218: void ep_map_from_field(ep_t p, const uint8_t *uniform_bytes, size_t len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1227: void ep_map(ep_t p, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "1227: void ep_map(ep_t p, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1239: void ep_map_dst(ep_t p, const uint8_t *msg, int len, const uint8_t *dst,",
      "1240:   int dst_len);",
      "",
      "[Added Lines]",
      "1239: void ep_map_dst(ep_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "1240:   size_t dst_len);",
      "",
      "---------------"
    ],
    "include/relic_epx.h||include/relic_epx.h": [
      "File: include/relic_epx.h -> include/relic_epx.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "748: void ep2_read_bin(ep2_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "748: void ep2_read_bin(ep2_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "760: void ep2_write_bin(uint8_t *bin, int len, const ep2_t a, int pack);",
      "",
      "[Added Lines]",
      "760: void ep2_write_bin(uint8_t *bin, size_t len, const ep2_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1063: void ep2_mul_sim_inter(ep2_t r, const ep2_t p, const bn_t k, const ep2_t q, const bn_t m);",
      "",
      "[Added Lines]",
      "1063: void ep2_mul_sim_inter(ep2_t r, const ep2_t p, const bn_t k, const ep2_t q,",
      "1064:    const bn_t m);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1075: void ep2_mul_sim_joint(ep2_t r, const ep2_t p, const bn_t k, const ep2_t q, const bn_t m);",
      "",
      "[Added Lines]",
      "1076: void ep2_mul_sim_joint(ep2_t r, const ep2_t p, const bn_t k, const ep2_t q,",
      "1077:    const bn_t m);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1086: void ep2_mul_sim_lot(ep2_t r, const ep2_t p[], const bn_t k[], int n);",
      "",
      "[Added Lines]",
      "1088: void ep2_mul_sim_lot(ep2_t r, const ep2_t p[], const bn_t k[], size_t n);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1108: void ep2_mul_sim_dig(ep2_t r, const ep2_t p[], const dig_t k[], int len);",
      "",
      "[Added Lines]",
      "1110: void ep2_mul_sim_dig(ep2_t r, const ep2_t p[], const dig_t k[], size_t len);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1137: void ep2_map_from_field(ep2_t p, const uint8_t *uniform_bytes, int len);",
      "",
      "[Added Lines]",
      "1139: void ep2_map_from_field(ep2_t p, const uint8_t *uniform_bytes, size_t len);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1146: void ep2_map(ep2_t p, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "1148: void ep2_map(ep2_t p, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1158: void ep2_map_dst(ep2_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "1160: void ep2_map_dst(ep2_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "1161:   size_t dst_len);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1388: void ep4_read_bin(ep4_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "1391: void ep4_read_bin(ep4_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1400: void ep4_write_bin(uint8_t *bin, int len, const ep4_t a, int pack);",
      "",
      "[Added Lines]",
      "1403: void ep4_write_bin(uint8_t *bin, size_t len, const ep4_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1726: void ep4_mul_sim_lot(ep4_t r, const ep4_t p[], const bn_t k[], int n);",
      "",
      "[Added Lines]",
      "1729: void ep4_mul_sim_lot(ep4_t r, const ep4_t p[], const bn_t k[], size_t n);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1748: void ep4_mul_sim_dig(ep4_t r, const ep4_t p[], const dig_t k[], int len);",
      "",
      "[Added Lines]",
      "1751: void ep4_mul_sim_dig(ep4_t r, const ep4_t p[], const dig_t k[], size_t len);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1774: void ep4_map(ep4_t p, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "1777: void ep4_map(ep4_t p, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1786: void ep4_map_dst(ep4_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "1789: void ep4_map_dst(ep4_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "1790:   size_t dst_len);",
      "",
      "---------------"
    ],
    "include/relic_fb.h||include/relic_fb.h": [
      "File: include/relic_fb.h -> include/relic_fb.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "51: #define RLC_FB_BITS  ((int)FB_POLYN)",
      "56: #define RLC_FB_DIGS  ((int)RLC_CEIL(RLC_FB_BITS, RLC_DIG))",
      "61: #define RLC_FB_BYTES  ((int)RLC_CEIL(RLC_FB_BITS, 8))",
      "",
      "[Added Lines]",
      "51: #define RLC_FB_BITS  ((size_t)FB_POLYN)",
      "56: #define RLC_FB_DIGS  ((size_t)RLC_CEIL(RLC_FB_BITS, RLC_DIG))",
      "61: #define RLC_FB_BYTES  ((size_t)RLC_CEIL(RLC_FB_BITS, 8))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "541: int fb_get_bit(const fb_t a, int bit);",
      "",
      "[Added Lines]",
      "541: int fb_get_bit(const fb_t a, size_t bit);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "550: void fb_set_bit(fb_t a, int bit, int value);",
      "",
      "[Added Lines]",
      "550: void fb_set_bit(fb_t a, size_t bit, int value);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "568: int fb_bits(const fb_t a);",
      "",
      "[Added Lines]",
      "568: size_t fb_bits(const fb_t a);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "593: int fb_size_str(const fb_t a, int radix);",
      "",
      "[Added Lines]",
      "593: size_t fb_size_str(const fb_t a, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "606: void fb_read_str(fb_t a, const char *str, int len, int radix);",
      "",
      "[Added Lines]",
      "606: void fb_read_str(fb_t a, const char *str, size_t len, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "619: void fb_write_str(char *str, int len, const fb_t a, int radix);",
      "629: void fb_read_bin(fb_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "619: void fb_write_str(char *str, size_t len, const fb_t a, unsigned int radix);",
      "629: void fb_read_bin(fb_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "639: void fb_write_bin(uint8_t *bin, int len, const fb_t a);",
      "",
      "[Added Lines]",
      "639: void fb_write_bin(uint8_t *bin, size_t len, const fb_t a);",
      "",
      "---------------"
    ],
    "include/relic_fp.h||include/relic_fp.h": [
      "File: include/relic_fp.h -> include/relic_fp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "51: #define RLC_FP_BITS  ((int)FP_PRIME)",
      "56: #define RLC_FP_DIGS  ((int)RLC_CEIL(RLC_FP_BITS, RLC_DIG))",
      "61: #define RLC_FP_BYTES  ((int)RLC_CEIL(RLC_FP_BITS, 8))",
      "",
      "[Added Lines]",
      "51: #define RLC_FP_BITS  ((size_t)FP_PRIME)",
      "56: #define RLC_FP_DIGS  ((size_t)RLC_CEIL(RLC_FP_BITS, RLC_DIG))",
      "61: #define RLC_FP_BYTES  ((size_t)RLC_CEIL(RLC_FP_BITS, 8))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "510: void fp_prime_set_pairf(const bn_t x, int pairf);",
      "",
      "[Removed Lines]",
      "504: void fp_prime_set_pmers(const int *spars, int len);",
      "",
      "[Added Lines]",
      "504: void fp_prime_set_pmers(const int *spars, size_t len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "656: int fp_get_bit(const fp_t a, int bit);",
      "",
      "[Added Lines]",
      "656: int fp_get_bit(const fp_t a, size_t bit);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "665: void fp_set_bit(fp_t a, int bit, int value);",
      "",
      "[Added Lines]",
      "665: void fp_set_bit(fp_t a, size_t bit, int value);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "684: int fp_bits(const fp_t a);",
      "",
      "[Added Lines]",
      "684: size_t fp_bits(const fp_t a);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "709: int fp_size_str(const fp_t a, int radix);",
      "",
      "[Added Lines]",
      "709: size_t fp_size_str(const fp_t a, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "721: void fp_read_str(fp_t a, const char *str, int len, int radix);",
      "",
      "[Added Lines]",
      "721: void fp_read_str(fp_t a, const char *str, size_t len, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "734: void fp_write_str(char *str, int len, const fp_t a, int radix);",
      "",
      "[Added Lines]",
      "734: void fp_write_str(char *str, size_t len, const fp_t a, unsigned int radix);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "744: void fp_read_bin(fp_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "744: void fp_read_bin(fp_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "754: void fp_write_bin(uint8_t *bin, int len, const fp_t a);",
      "",
      "[Added Lines]",
      "754: void fp_write_bin(uint8_t *bin, size_t len, const fp_t a);",
      "",
      "---------------"
    ],
    "include/relic_fpx.h||include/relic_fpx.h": [
      "File: include/relic_fpx.h -> include/relic_fpx.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1335: void fp2_read_bin(fp2_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "1335: void fp2_read_bin(fp2_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1347: void fp2_write_bin(uint8_t *bin, int len, const fp2_t a, int pack);",
      "",
      "[Added Lines]",
      "1347: void fp2_write_bin(uint8_t *bin, size_t len, const fp2_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1693: void fp3_read_bin(fp3_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "1693: void fp3_read_bin(fp3_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1704: void fp3_write_bin(uint8_t *bin, int len, const fp3_t a);",
      "",
      "[Added Lines]",
      "1704: void fp3_write_bin(uint8_t *bin, size_t len, const fp3_t a);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1959: void fp4_read_bin(fp4_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "1959: void fp4_read_bin(fp4_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1970: void fp4_write_bin(uint8_t *bin, int len, const fp4_t a);",
      "",
      "[Added Lines]",
      "1970: void fp4_write_bin(uint8_t *bin, size_t len, const fp4_t a);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2229: void fp6_read_bin(fp6_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "2229: void fp6_read_bin(fp6_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2240: void fp6_write_bin(uint8_t *bin, int len, const fp6_t a);",
      "",
      "[Added Lines]",
      "2240: void fp6_write_bin(uint8_t *bin, size_t len, const fp6_t a);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2459: void fp8_read_bin(fp8_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "2459: void fp8_read_bin(fp8_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2470: void fp8_write_bin(uint8_t *bin, int len, const fp8_t a);",
      "",
      "[Added Lines]",
      "2470: void fp8_write_bin(uint8_t *bin, size_t len, const fp8_t a);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2742: void fp9_read_bin(fp9_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "2742: void fp9_read_bin(fp9_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2753: void fp9_write_bin(uint8_t *bin, int len, const fp9_t a);",
      "",
      "[Added Lines]",
      "2753: void fp9_write_bin(uint8_t *bin, size_t len, const fp9_t a);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2981: void fp12_read_bin(fp12_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "2981: void fp12_read_bin(fp12_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2993: void fp12_write_bin(uint8_t *bin, int len, const fp12_t a, int pack);",
      "",
      "[Added Lines]",
      "2993: void fp12_write_bin(uint8_t *bin, size_t len, const fp12_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3285: void fp2_exp_cyc_sim(fp2_t e, const fp2_t a, const bn_t b, const fp2_t c, const bn_t d);",
      "",
      "[Added Lines]",
      "3285: void fp2_exp_cyc_sim(fp2_t e, const fp2_t a, const bn_t b, const fp2_t c,",
      "3286:   const bn_t d);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3296: void fp12_exp_cyc_sim(fp12_t e, const fp12_t a, const bn_t b, const fp12_t c, const bn_t d);",
      "",
      "[Added Lines]",
      "3297: void fp12_exp_cyc_sim(fp12_t e, const fp12_t a, const bn_t b, const fp12_t c,",
      "3298:   const bn_t d);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3307: void fp12_exp_cyc_sps(fp12_t c, const fp12_t a, const int *b, int l, int s);",
      "",
      "[Added Lines]",
      "3309: void fp12_exp_cyc_sps(fp12_t c, const fp12_t a, const int *b, size_t l, int s);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3398: void fp18_read_bin(fp18_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "3400: void fp18_read_bin(fp18_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3409: void fp18_write_bin(uint8_t *bin, int len, const fp18_t a);",
      "",
      "[Added Lines]",
      "3411: void fp18_write_bin(uint8_t *bin, size_t len, const fp18_t a);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3660: void fp24_read_bin(fp24_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "3662: void fp24_read_bin(fp24_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3672: void fp24_write_bin(uint8_t *bin, int len, const fp24_t a, int pack);",
      "",
      "[Added Lines]",
      "3674: void fp24_write_bin(uint8_t *bin, size_t len, const fp24_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "3964: void fp24_exp_cyc_sps(fp24_t c, const fp24_t a, const int *b, int l, int s);",
      "",
      "[Added Lines]",
      "3966: void fp24_exp_cyc_sps(fp24_t c, const fp24_t a, const int *b, size_t l, int s);",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4039: void fp48_read_bin(fp48_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "4041: void fp48_read_bin(fp48_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4051: void fp48_write_bin(uint8_t *bin, int len, const fp48_t a, int pack);",
      "",
      "[Added Lines]",
      "4053: void fp48_write_bin(uint8_t *bin, size_t len, const fp48_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4315: void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, int l, int s);",
      "",
      "[Added Lines]",
      "4317: void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, size_t l, int s);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4390: void fp54_read_bin(fp54_t a, const uint8_t *bin, int len);",
      "",
      "[Added Lines]",
      "4392: void fp54_read_bin(fp54_t a, const uint8_t *bin, size_t len);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4402: void fp54_write_bin(uint8_t *bin, int len, const fp54_t a, int pack);",
      "",
      "[Added Lines]",
      "4404: void fp54_write_bin(uint8_t *bin, size_t len, const fp54_t a, int pack);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4666: void fp54_exp_cyc_sps(fp54_t c, const fp54_t a, const int *b, int l, int s);",
      "",
      "[Added Lines]",
      "4668: void fp54_exp_cyc_sps(fp54_t c, const fp54_t a, const int *b, size_t l, int s);",
      "",
      "---------------"
    ],
    "include/relic_md.h||include/relic_md.h": [
      "File: include/relic_md.h -> include/relic_md.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "137: void md_map_sh224(uint8_t *hash, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "137: void md_map_sh224(uint8_t *hash, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "146: void md_map_sh256(uint8_t *hash, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "146: void md_map_sh256(uint8_t *hash, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "155: void md_map_sh384(uint8_t *hash, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "155: void md_map_sh384(uint8_t *hash, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "164: void md_map_sh512(uint8_t *hash, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "164: void md_map_sh512(uint8_t *hash, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "173: void md_map_b2s160(uint8_t *hash, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "173: void md_map_b2s160(uint8_t *hash, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "182: void md_map_b2s256(uint8_t *hash, const uint8_t *msg, int len);",
      "",
      "[Added Lines]",
      "182: void md_map_b2s256(uint8_t *hash, const uint8_t *msg, size_t len);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "193: void md_kdf(uint8_t *key, int key_len, const uint8_t *in, int in_len);",
      "",
      "[Added Lines]",
      "193: void md_kdf(uint8_t *key, size_t key_len, const uint8_t *in, size_t in_len);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "204: void md_mgf(uint8_t *mask, int mask_len, const uint8_t *in, int in_len);",
      "",
      "[Added Lines]",
      "204: void md_mgf(uint8_t *mask, size_t mask_len, const uint8_t *in, size_t in_len);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "215: void md_hmac(uint8_t *mac, const uint8_t *in, int in_len, const uint8_t *key,",
      "216:   int key_len);",
      "",
      "[Added Lines]",
      "215: void md_hmac(uint8_t *mac, const uint8_t *in, size_t in_len, const uint8_t *key,",
      "216:   size_t key_len);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "229: void md_xmd_sh224(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,",
      "230:   const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "229: void md_xmd_sh224(uint8_t *buf, size_t buf_len, const uint8_t *in,",
      "230:   size_t in_len, const uint8_t *dst, size_t dst_len);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "243: void md_xmd_sh256(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,",
      "244:   const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "243: void md_xmd_sh256(uint8_t *buf, size_t buf_len, const uint8_t *in,",
      "244:   size_t in_len, const uint8_t *dst, size_t dst_len);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "257: void md_xmd_sh384(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,",
      "258:   const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "257: void md_xmd_sh384(uint8_t *buf, size_t buf_len, const uint8_t *in,",
      "258:   size_t in_len, const uint8_t *dst, size_t dst_len);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "271: void md_xmd_sh512(uint8_t *buf, int buf_len, const uint8_t *in, int in_len,",
      "272:   const uint8_t *dst, int dst_len);",
      "",
      "[Added Lines]",
      "271: void md_xmd_sh512(uint8_t *buf, size_t buf_len, const uint8_t *in,",
      "272:   size_t in_len, const uint8_t *dst, size_t dst_len);",
      "",
      "---------------"
    ],
    "include/relic_rand.h||include/relic_rand.h": [
      "File: include/relic_rand.h -> include/relic_rand.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "94: #else",
      "",
      "[Removed Lines]",
      "92: void rand_seed(uint8_t *buf, int size);",
      "",
      "[Added Lines]",
      "92: void rand_seed(uint8_t *buf, size_t size);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105: #endif",
      "",
      "[Removed Lines]",
      "103: void rand_seed(void (*callback)(uint8_t *, int, void *), void *arg);",
      "",
      "[Added Lines]",
      "103: void rand_seed(void (*callback)(uint8_t *, size_t, void *), void *arg);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "115: int rand_check(uint8_t *buf, int size);",
      "",
      "[Added Lines]",
      "115: int rand_check(uint8_t *buf, size_t size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "126: void rand_bytes(uint8_t *buf, int size);",
      "",
      "[Added Lines]",
      "126: void rand_bytes(uint8_t *buf, size_t size);",
      "",
      "---------------"
    ],
    "include/relic_util.h||include/relic_util.h": [
      "File: include/relic_util.h -> include/relic_util.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "288: int util_bits_dig(dig_t a);",
      "",
      "[Added Lines]",
      "288: size_t util_bits_dig(dig_t a);",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_gcd.c||src/bn/relic_bn_gcd.c": [
      "File: src/bn/relic_bn_gcd.c -> src/bn/relic_bn_gcd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "202:    bn_abs(y, a);",
      "203:   }",
      "204:   while (y->used > 1) {",
      "206:    _x = u->dp[0];",
      "208:    _y = v->dp[0];",
      "209:    _a = _d = 1;",
      "210:    _b = _c = 0;",
      "",
      "[Removed Lines]",
      "205:    bn_rsh(u, x, bn_bits(x) - RLC_DIG);",
      "207:    bn_rsh(v, y, bn_bits(x) - RLC_DIG);",
      "",
      "[Added Lines]",
      "205:    if (bn_bits(x) > RLC_DIG) {",
      "206:     bn_rsh(u, x, bn_bits(x) - RLC_DIG);",
      "207:     bn_rsh(v, y, bn_bits(x) - RLC_DIG);",
      "208:    } else {",
      "209:     bn_copy(u, x);",
      "210:     bn_copy(v, y);",
      "211:    }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "237:     bn_copy(x, y);",
      "238:     bn_copy(y, t0);",
      "239:    } else {",
      "242:     if (_a < 0) {",
      "243:      bn_mul_dig(t0, u, -_a);",
      "244:      bn_neg(t0, t0);",
      "",
      "[Removed Lines]",
      "240:     bn_rsh(u, x, bn_bits(x) - 2 * RLC_DIG);",
      "241:     bn_rsh(v, y, bn_bits(x) - 2 * RLC_DIG);",
      "",
      "[Added Lines]",
      "245:     if (bn_bits(x) > 2 * RLC_DIG) {",
      "246:      bn_rsh(u, x, bn_bits(x) - 2 * RLC_DIG);",
      "247:      bn_rsh(v, y, bn_bits(x) - 2 * RLC_DIG);",
      "248:     } else {",
      "249:      bn_copy(u, x);",
      "250:      bn_copy(v, y);",
      "251:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "265:     }",
      "266:     bn_add(u, t0, t1);",
      "267:     bn_add(v, t2, t3);",
      "269:     _x = t0->dp[0];",
      "271:     _y = t1->dp[0];",
      "272:     t = 0;",
      "273:     if (_y != 0) {",
      "",
      "[Removed Lines]",
      "268:     bn_rsh(t0, u, bn_bits(u) - RLC_DIG);",
      "270:     bn_rsh(t1, v, bn_bits(u) - RLC_DIG);",
      "",
      "[Added Lines]",
      "278:     if (bn_bits(u) > RLC_DIG) {",
      "279:      bn_rsh(t0, u, bn_bits(u) - RLC_DIG);",
      "280:      bn_rsh(t1, v, bn_bits(u) - RLC_DIG);",
      "281:     } else {",
      "282:      bn_copy(t0, u);",
      "283:      bn_copy(t1, v);",
      "284:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "400:   bn_set_dig(d, 1);",
      "402:   while (y->used > 1) {",
      "404:    _x = u->dp[0];",
      "406:    _y = v->dp[0];",
      "407:    _a = _d = 1;",
      "408:    _b = _c = 0;",
      "",
      "[Removed Lines]",
      "403:    bn_rsh(u, x, bn_bits(x) - RLC_DIG);",
      "405:    bn_rsh(v, y, bn_bits(x) - RLC_DIG);",
      "",
      "[Added Lines]",
      "418:    if (bn_bits(x) > RLC_DIG) {",
      "419:     bn_rsh(u, x, bn_bits(x) - RLC_DIG);",
      "420:     bn_rsh(v, y, bn_bits(x) - RLC_DIG);",
      "421:    } else {",
      "422:     bn_copy(u, x);",
      "423:     bn_copy(v, y);",
      "424:    }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "439:     bn_copy(t4, d);",
      "440:     bn_copy(d, t1);",
      "441:    } else {",
      "444:     if (_a < 0) {",
      "445:      bn_mul_dig(t0, u, -_a);",
      "446:      bn_neg(t0, t0);",
      "",
      "[Removed Lines]",
      "442:     bn_rsh(u, x, bn_bits(x) - 2 * RLC_DIG);",
      "443:     bn_rsh(v, y, bn_bits(x) - 2 * RLC_DIG);",
      "",
      "[Added Lines]",
      "462:     if (bn_bits(x) > 2 * RLC_DIG) {",
      "463:      bn_rsh(u, x, bn_bits(x) - 2 * RLC_DIG);",
      "464:      bn_rsh(v, y, bn_bits(x) - 2 * RLC_DIG);",
      "465:     } else {",
      "466:      bn_copy(u, x);",
      "467:      bn_copy(v, y);",
      "468:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "467:     }",
      "468:     bn_add(u, t0, t1);",
      "469:     bn_add(v, t2, t3);",
      "471:     _x = t0->dp[0];",
      "473:     _y = t1->dp[0];",
      "474:     t = 0;",
      "475:     if (_y != 0) {",
      "",
      "[Removed Lines]",
      "470:     bn_rsh(t0, u, bn_bits(u) - RLC_DIG);",
      "472:     bn_rsh(t1, v, bn_bits(u) - RLC_DIG);",
      "",
      "[Added Lines]",
      "495:     if (bn_bits(u) > RLC_DIG) {",
      "496:      bn_rsh(t0, u, bn_bits(u) - RLC_DIG);",
      "497:      bn_rsh(t1, v, bn_bits(u) - RLC_DIG);",
      "498:     } else {",
      "499:      bn_copy(t0, u);",
      "500:      bn_copy(t1, v);",
      "501:     }",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_mem.c||src/bn/relic_bn_mem.c": [
      "File: src/bn/relic_bn_mem.c -> src/bn/relic_bn_mem.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:  if (digits < 0) {",
      "46:   RLC_THROW(ERR_NO_VALID);",
      "47:  }",
      "",
      "[Removed Lines]",
      "44: void bn_make(bn_t a, int digits) {",
      "",
      "[Added Lines]",
      "44: void bn_make(bn_t a, size_t digits) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:  }",
      "113: }",
      "116: #if ALLOC == DYNAMIC",
      "117:  dig_t *t;",
      "",
      "[Removed Lines]",
      "115: void bn_grow(bn_t a, int digits) {",
      "",
      "[Added Lines]",
      "115: void bn_grow(bn_t a, size_t digits) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "143:    --(a->used);",
      "144:   }",
      "147:    a->used = 1;",
      "148:    a->dp[0] = 0;",
      "149:    a->sign = RLC_POS;",
      "",
      "[Removed Lines]",
      "146:   if (a->used <= 0) {",
      "",
      "[Added Lines]",
      "146:   if (a->used == 0) {",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_mxp.c||src/bn/relic_bn_mxp.c": [
      "File: src/bn/relic_bn_mxp.c -> src/bn/relic_bn_mxp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117: void bn_mxp_slide(bn_t c, const bn_t a, const bn_t b, const bn_t m) {",
      "118:  bn_t tab[RLC_TABLE_SIZE], t, u, r;",
      "120:  uint8_t *win = RLC_ALLOCA(uint8_t, bn_bits(b));",
      "122:  if (win == NULL) {",
      "",
      "[Removed Lines]",
      "119:  int i, j, l, w = 1;",
      "",
      "[Added Lines]",
      "119:  size_t l, w = 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "140:  bn_null(u);",
      "141:  bn_null(r);",
      "144:   bn_null(tab[i]);",
      "145:  }",
      "150:   w = 2;",
      "152:   w = 3;",
      "154:   w = 4;",
      "156:   w = 5;",
      "158:   w = 6;",
      "159:  } else {",
      "160:   w = 7;",
      "161:  }",
      "163:  RLC_TRY {",
      "165:    bn_new(tab[i]);",
      "166:   }",
      "",
      "[Removed Lines]",
      "143:  for (i = 0; i < RLC_TABLE_SIZE; i++) {",
      "148:  i = bn_bits(b);",
      "149:  if (i <= 21) {",
      "151:  } else if (i <= 32) {",
      "153:  } else if (i <= 128) {",
      "155:  } else if (i <= 256) {",
      "157:  } else if (i <= 512) {",
      "164:   for (i = 0; i < (1 << (w - 1)); i++) {",
      "",
      "[Added Lines]",
      "143:  for (size_t i = 0; i < RLC_TABLE_SIZE; i++) {",
      "148:  l = bn_bits(b);",
      "149:  if (l <= 21) {",
      "151:  } else if (l <= 32) {",
      "153:  } else if (l <= 128) {",
      "155:  } else if (l <= 256) {",
      "157:  } else if (l <= 512) {",
      "164:   for (size_t i = 0; i < (1 << (w - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "183:   bn_sqr(t, tab[0]);",
      "184:   bn_mod(t, t, m, u);",
      "187:    bn_mul(tab[i], tab[i - 1], t);",
      "188:    bn_mod(tab[i], tab[i], m, u);",
      "189:   }",
      "192:   bn_rec_slw(win, &l, b, w);",
      "194:    if (win[i] == 0) {",
      "195:     bn_sqr(r, r);",
      "196:     bn_mod(r, r, m, u);",
      "197:    } else {",
      "199:      bn_sqr(r, r);",
      "200:      bn_mod(r, r, m, u);",
      "201:     }",
      "",
      "[Removed Lines]",
      "186:   for (i = 1; i < 1 << (w - 1); i++) {",
      "191:   l = bn_bits(b);",
      "193:   for (i = 0; i < l; i++) {",
      "198:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "186:   for (size_t i = 1; i < 1 << (w - 1); i++) {",
      "192:   for (size_t i = 0; i < l; i++) {",
      "197:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "218:   RLC_THROW(ERR_CAUGHT);",
      "219:  }",
      "220:  RLC_FINALLY {",
      "222:    bn_free(tab[i]);",
      "223:   }",
      "224:   bn_free(u);",
      "",
      "[Removed Lines]",
      "221:   for (i = 0; i < (1 << (w - 1)); i++) {",
      "",
      "[Added Lines]",
      "220:   for (size_t i = 0; i < (1 << (w - 1)); i++) {",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_prime.c||src/bn/relic_bn_prime.c": [
      "File: src/bn/relic_bn_prime.c -> src/bn/relic_bn_prime.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "276:   bn_sub_dig(n1, a, 1);",
      "277:   bn_copy(r, n1);",
      "278:   s = 0;",
      "280:    s++;",
      "281:    bn_rsh(r, r, 1);",
      "282:   }",
      "",
      "[Removed Lines]",
      "279:   while (bn_is_even(r)) {",
      "",
      "[Added Lines]",
      "279:   while (!bn_is_zero(r) && bn_is_even(r)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "402: #if BN_GEN == BASIC || !defined(STRIP)",
      "405:  while (1) {",
      "406:   do {",
      "407:    bn_rand(a, RLC_POS, bits);",
      "",
      "[Removed Lines]",
      "404: void bn_gen_prime_basic(bn_t a, int bits) {",
      "",
      "[Added Lines]",
      "404: void bn_gen_prime_basic(bn_t a, size_t bits) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "417: #if BN_GEN == SAFEP || !defined(STRIP)",
      "420:  while (1) {",
      "421:   do {",
      "422:    bn_rand(a, RLC_POS, bits);",
      "",
      "[Removed Lines]",
      "419: void bn_gen_prime_safep(bn_t a, int bits) {",
      "",
      "[Added Lines]",
      "419: void bn_gen_prime_safep(bn_t a, size_t bits) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "441: #if BN_GEN == STRON || !defined(STRIP)",
      "444:  dig_t i, j;",
      "445:  int found, k;",
      "446:  bn_t r, s, t;",
      "",
      "[Removed Lines]",
      "443: void bn_gen_prime_stron(bn_t a, int bits) {",
      "",
      "[Added Lines]",
      "443: void bn_gen_prime_stron(bn_t a, size_t bits) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "520: #endif",
      "523:  bn_t t;",
      "524:  int result = RLC_OK;",
      "",
      "[Removed Lines]",
      "522: int bn_gen_prime_factor(bn_t a, bn_t b, int abits, int bbits) {",
      "",
      "[Added Lines]",
      "522: int bn_gen_prime_factor(bn_t a, bn_t b, size_t abits, size_t bbits) {",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_rec.c||src/bn/relic_bn_rec.c": [
      "File: src/bn/relic_bn_rec.c -> src/bn/relic_bn_rec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:  int f, t;",
      "48:  dig_t mf, mt;",
      "",
      "[Removed Lines]",
      "46: static char get_bits(const bn_t a, int from, int to) {",
      "",
      "[Added Lines]",
      "46: static char get_bits(const bn_t a, size_t from, size_t to) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:  int i, j, l;",
      "97:  l = bn_bits(k);",
      "",
      "[Removed Lines]",
      "94: void bn_rec_win(uint8_t *win, int *len, const bn_t k, int w) {",
      "",
      "[Added Lines]",
      "94: void bn_rec_win(uint8_t *win, size_t *len, const bn_t k, size_t w) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "113: }",
      "116:  int i, j, l, s;",
      "118:  l = bn_bits(k);",
      "",
      "[Removed Lines]",
      "115: void bn_rec_slw(uint8_t *win, int *len, const bn_t k, int w) {",
      "",
      "[Added Lines]",
      "115: void bn_rec_slw(uint8_t *win, size_t *len, const bn_t k, size_t w) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "144: }",
      "147:  int i, l;",
      "148:  bn_t t;",
      "149:  dig_t t0, mask;",
      "",
      "[Removed Lines]",
      "146: void bn_rec_naf(int8_t *naf, int *len, const bn_t k, int w) {",
      "",
      "[Added Lines]",
      "146: void bn_rec_naf(int8_t *naf, size_t *len, const bn_t k, size_t w) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "217:  }",
      "218: }",
      "221:  if (u == -1) {",
      "222:   switch (w) {",
      "223:    case 2:",
      "",
      "[Removed Lines]",
      "220: void bn_rec_tnaf_get(uint8_t *t, int8_t *beta, int8_t *gama, int8_t u, int w) {",
      "",
      "[Added Lines]",
      "220: void bn_rec_tnaf_get(uint8_t *t, int8_t *beta, int8_t *gama, int8_t u,",
      "221:   size_t w) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "349:  }",
      "350: }",
      "353:  bn_t t, t0, t1, t2, t3;",
      "355:  bn_null(t);",
      "",
      "[Removed Lines]",
      "352: void bn_rec_tnaf_mod(bn_t r0, bn_t r1, const bn_t k, int u, int m) {",
      "",
      "[Added Lines]",
      "353: void bn_rec_tnaf_mod(bn_t r0, bn_t r1, const bn_t k, int u, size_t m) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "421:  }",
      "422: }",
      "425:  int i, l;",
      "426:  bn_t tmp, r0, r1;",
      "427:  int8_t beta[64], gama[64];",
      "",
      "[Removed Lines]",
      "424: void bn_rec_tnaf(int8_t *tnaf, int *len, const bn_t k, int8_t u, int m, int w) {",
      "",
      "[Added Lines]",
      "425: void bn_rec_tnaf(int8_t *tnaf, size_t *len, const bn_t k, int8_t u, size_t m,",
      "426:   size_t w) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "551:  }",
      "552: }",
      "555:  int i, l;",
      "556:  bn_t tmp, r0, r1;",
      "557:  int8_t beta[64], gama[64];",
      "",
      "[Removed Lines]",
      "554: void bn_rec_rtnaf(int8_t *tnaf, int *len, const bn_t k, int8_t u, int m, int w) {",
      "",
      "[Added Lines]",
      "556: void bn_rec_rtnaf(int8_t *tnaf, size_t *len, const bn_t k, int8_t u, size_t m,",
      "557:   size_t w) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "693:  }",
      "694: }",
      "697:  int i, l;",
      "698:  bn_t t;",
      "699:  dig_t t0, mask;",
      "",
      "[Removed Lines]",
      "696: void bn_rec_reg(int8_t *naf, int *len, const bn_t k, int n, int w) {",
      "",
      "[Added Lines]",
      "699: void bn_rec_reg(int8_t *naf, size_t *len, const bn_t k, size_t n, size_t w) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "746:  }",
      "747: }",
      "750:  bn_t n0, n1;",
      "751:  dig_t l0, l1;",
      "752:  int8_t u0, u1, d0, d1;",
      "",
      "[Removed Lines]",
      "749: void bn_rec_jsf(int8_t *jsf, int *len, const bn_t k, const bn_t l) {",
      "",
      "[Added Lines]",
      "752: void bn_rec_jsf(int8_t *jsf, size_t *len, const bn_t k, const bn_t l) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "828: void bn_rec_glv(bn_t k0, bn_t k1, const bn_t k, const bn_t n, const bn_t *v1,",
      "829:   const bn_t *v2) {",
      "830:  bn_t t, b1, b2;",
      "833:  bn_null(b1);",
      "834:  bn_null(b2);",
      "",
      "[Removed Lines]",
      "831:  int r1, r2, bits;",
      "",
      "[Added Lines]",
      "834:  int r1, r2;",
      "835:  size_t bits;",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_shift.c||src/bn/relic_bn_shift.c": [
      "File: src/bn/relic_bn_shift.c -> src/bn/relic_bn_shift.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:  bn_trim(c);",
      "64: }",
      "67:  int digits;",
      "68:  dig_t carry;",
      "70:  bn_copy(c, a);",
      "76:  RLC_RIP(bits, digits, bits);",
      "78:  RLC_TRY {",
      "",
      "[Removed Lines]",
      "66: void bn_lsh(bn_t c, const bn_t a, int bits) {",
      "72:  if (bits <= 0) {",
      "73:   return;",
      "74:  }",
      "",
      "[Added Lines]",
      "66: void bn_lsh(bn_t c, const bn_t a, unsigned int bits) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:  }",
      "102: }",
      "105:  int digits = 0;",
      "107:  bn_copy(c, a);",
      "113:  RLC_RIP(bits, digits, bits);",
      "115:  if (digits > 0) {",
      "116:   dv_rshd(c->dp, a->dp, a->used, digits);",
      "117:  }",
      "119:  c->sign = a->sign;",
      "121:  if (c->used > 0 && bits > 0) {",
      "",
      "[Removed Lines]",
      "104: void bn_rsh(bn_t c, const bn_t a, int bits) {",
      "109:  if (bits <= 0) {",
      "110:   return;",
      "111:  }",
      "118:  c->used = a->used - digits;",
      "",
      "[Added Lines]",
      "100: void bn_rsh(bn_t c, const bn_t a, unsigned int bits) {",
      "111:  if (a->used > digits) {",
      "112:   c->used = a->used - digits;",
      "113:  } else {",
      "114:   c->used = 0;",
      "115:  }",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_smb.c||src/bn/relic_bn_smb.c": [
      "File: src/bn/relic_bn_smb.c -> src/bn/relic_bn_smb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "121:    }",
      "123:    h = 0;",
      "125:     h++;",
      "126:     bn_rsh(t0, t0, 1);",
      "127:    }",
      "",
      "[Removed Lines]",
      "124:    while (bn_is_even(t0)) {",
      "",
      "[Added Lines]",
      "124:    while (bn_is_even(t0) && !bn_is_zero(t0)) {",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_srt.c||src/bn/relic_bn_srt.c": [
      "File: src/bn/relic_bn_srt.c -> src/bn/relic_bn_srt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: void bn_srt(bn_t c, bn_t a) {",
      "40:  bn_t h, l, m, t;",
      "43:  if (bn_sign(a) == RLC_NEG) {",
      "44:   RLC_THROW(ERR_NO_VALID);",
      "",
      "[Removed Lines]",
      "41:  int bits, cmp;",
      "",
      "[Added Lines]",
      "41:  size_t bits;",
      "42:  int cmp;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:   bn_new(m);",
      "59:   bn_new(t);",
      "61:   bn_set_2b(h, bits >> 1);",
      "65:   do {",
      "",
      "[Removed Lines]",
      "62:   bn_set_2b(l, (bits >> 1) - 1);",
      "",
      "[Added Lines]",
      "62:   bn_zero(l);",
      "64:   if (bits >= 2) {",
      "65:    bn_set_2b(l, (bits >> 1) - 1);",
      "66:   }",
      "",
      "---------------"
    ],
    "src/bn/relic_bn_util.c||src/bn/relic_bn_util.c": [
      "File: src/bn/relic_bn_util.c -> src/bn/relic_bn_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:  return 0;",
      "106: }",
      "109:  int bits;",
      "111:  if (bn_is_zero(a)) {",
      "",
      "[Removed Lines]",
      "108: int bn_bits(const bn_t a) {",
      "",
      "[Added Lines]",
      "108: size_t bn_bits(const bn_t a) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:  return bits + util_bits_dig(a->dp[a->used - 1]);",
      "119: }",
      "122:  int d;",
      "124:  if (bit < 0) {",
      "",
      "[Removed Lines]",
      "121: int bn_get_bit(const bn_t a, int bit) {",
      "",
      "[Added Lines]",
      "121: int bn_get_bit(const bn_t a, size_t bit) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "139:  }",
      "140: }",
      "143:  int d;",
      "145:  if (bit < 0) {",
      "",
      "[Removed Lines]",
      "142: void bn_set_bit(bn_t a, int bit, int value) {",
      "",
      "[Added Lines]",
      "142: void bn_set_bit(bn_t a, size_t bit, int value) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "162:  }",
      "163: }",
      "166:  int c = 0;",
      "168:  for (int i = 0; i < bn_bits(a); i++) {",
      "",
      "[Removed Lines]",
      "165: int bn_ham(const bn_t a) {",
      "",
      "[Added Lines]",
      "165: size_t bn_ham(const bn_t a) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "183:  a->sign = RLC_POS;",
      "184: }",
      "187:  int i, d;",
      "191:  } else {",
      "192:   RLC_RIP(b, d, b);",
      "",
      "[Removed Lines]",
      "186: void bn_set_2b(bn_t a, int b) {",
      "189:  if (b < 0) {",
      "190:   bn_zero(a);",
      "",
      "[Added Lines]",
      "186: void bn_set_2b(bn_t a, size_t b) {",
      "189:  if (b >= RLC_BN_SIZE * RLC_DIG) {",
      "190:   RLC_THROW(ERR_NO_VALID);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "201:  }",
      "202: }",
      "205:  int digits;",
      "207:  RLC_RIP(bits, digits, bits);",
      "",
      "[Removed Lines]",
      "204: void bn_rand(bn_t a, int sign, int bits) {",
      "",
      "[Added Lines]",
      "204: void bn_rand(bn_t a, int sign, size_t bits) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "264:  }",
      "265: }",
      "268:  int digits = 0;",
      "269:  bn_t t;",
      "",
      "[Removed Lines]",
      "267: int bn_size_str(const bn_t a, int radix) {",
      "",
      "[Added Lines]",
      "267: size_t bn_size_str(const bn_t a, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "308:  return digits + 1;",
      "309: }",
      "312:  int sign, i, j;",
      "313:  char c;",
      "",
      "[Removed Lines]",
      "311: void bn_read_str(bn_t a, const char *str, int len, int radix) {",
      "",
      "[Added Lines]",
      "311: void bn_read_str(bn_t a, const char *str, size_t len, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:  }",
      "358: }",
      "361:  bn_t t;",
      "362:  dig_t d;",
      "363:  int digits, l, i, j;",
      "",
      "[Removed Lines]",
      "360: void bn_write_str(char *str, int len, const bn_t a, int radix) {",
      "",
      "[Added Lines]",
      "360: void bn_write_str(char *str, size_t len, const bn_t a, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "426:  }",
      "427: }",
      "430:  dig_t d;",
      "431:  int digits;",
      "",
      "[Removed Lines]",
      "429: int bn_size_bin(const bn_t a) {",
      "",
      "[Added Lines]",
      "429: size_t bn_size_bin(const bn_t a) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "440:  return digits;",
      "441: }",
      "444:  int i, j;",
      "445:  dig_t d = (RLC_DIG / 8);",
      "446:  int digs = (len % d == 0 ? len / d : len / d + 1);",
      "",
      "[Removed Lines]",
      "443: void bn_read_bin(bn_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "443: void bn_read_bin(bn_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "470:  bn_trim(a);",
      "471: }",
      "474:  int size, k;",
      "475:  dig_t d;",
      "",
      "[Removed Lines]",
      "473: void bn_write_bin(uint8_t *bin, int len, const bn_t a) {",
      "",
      "[Added Lines]",
      "473: void bn_write_bin(uint8_t *bin, size_t len, const bn_t a) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "501:  }",
      "502: }",
      "505:  return a->used;",
      "506: }",
      "509:  RLC_TRY {",
      "510:   bn_grow(a, len);",
      "511:   a->used = len;",
      "",
      "[Removed Lines]",
      "504: int bn_size_raw(const bn_t a) {",
      "508: void bn_read_raw(bn_t a, const dig_t *raw, int len) {",
      "",
      "[Added Lines]",
      "504: size_t bn_size_raw(const bn_t a) {",
      "508: void bn_read_raw(bn_t a, const dig_t *raw, size_t len) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "517:  }",
      "518: }",
      "521:  int i, size;",
      "523:  size = a->used;",
      "",
      "[Removed Lines]",
      "520: void bn_write_raw(dig_t *raw, int len, const bn_t a) {",
      "",
      "[Added Lines]",
      "520: void bn_write_raw(dig_t *raw, size_t len, const bn_t a) {",
      "",
      "---------------"
    ],
    "src/cp/relic_cp_bls.c||src/cp/relic_cp_bls.c": [
      "File: src/cp/relic_cp_bls.c -> src/cp/relic_cp_bls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  return result;",
      "58: }",
      "61:  g1_t p;",
      "62:  int result = RLC_OK;",
      "",
      "[Removed Lines]",
      "60: int cp_bls_sig(g1_t s, const uint8_t *msg, int len, const bn_t d) {",
      "",
      "[Added Lines]",
      "60: int cp_bls_sig(g1_t s, const uint8_t *msg, size_t len, const bn_t d) {",
      "",
      "---------------"
    ],
    "src/cp/relic_cp_cmlhs.c||src/cp/relic_cp_cmlhs.c": [
      "File: src/cp/relic_cp_cmlhs.c -> src/cp/relic_cp_cmlhs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:   pc_map(gt, g1, g2);",
      "67:   rand_bytes(prf, plen);",
      "77:   for (int i = 0; i < len; i++) {",
      "",
      "[Removed Lines]",
      "68:   if (bls) {",
      "69:    cp_bls_gen(sk, pk);",
      "70:   } else {",
      "71:    cp_ecdsa_gen(sk, g1);",
      "72:    fp_copy(pk->x[0], g1->x);",
      "73:    fp_copy(pk->y[0], g1->y);",
      "74:   }",
      "",
      "[Added Lines]",
      "69:   bn_rand_mod(d, n);",
      "70:   g2_mul_gen(y, d);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:    gt_exp(hs[i], gt, x[i]);",
      "80:   }",
      "84:  }",
      "85:  RLC_CATCH_ANY {",
      "86:   result = RLC_ERR;",
      "",
      "[Removed Lines]",
      "82:   bn_rand_mod(d, n);",
      "83:   g2_mul_gen(y, d);",
      "",
      "[Added Lines]",
      "78:   if (bls) {",
      "79:    result = cp_bls_gen(sk, pk);",
      "80:   } else {",
      "81:    if (cp_ecdsa_gen(sk, g1) == RLC_OK) {",
      "82:     fp_copy(pk->x[0], g1->x);",
      "83:     fp_copy(pk->y[0], g1->y);",
      "84:    } else {",
      "85:     result = RLC_ERR;",
      "86:    }",
      "87:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:  bn_t k, m, n;",
      "102:  g1_t t;",
      "103:  uint8_t mac[RLC_MD_LEN];",
      "105:  uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_PC_BYTES + dlen);",
      "107:  bn_null(k);",
      "108:  bn_null(m);",
      "",
      "[Removed Lines]",
      "104:  int len, dlen = strlen(data), result = RLC_OK;",
      "",
      "[Added Lines]",
      "108:  size_t len, dlen = strlen(data);",
      "110:  int result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "211:  g2_t g2;",
      "212:  gt_t e, u, v;",
      "213:  bn_t k, n;",
      "215:  uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_PC_BYTES + dlen);",
      "217:  g1_null(g1);",
      "218:  g2_null(g2);",
      "",
      "[Removed Lines]",
      "214:  int len, dlen = strlen(data), result = 1;",
      "",
      "[Added Lines]",
      "219:  size_t len, dlen = strlen(data);",
      "221:  int result = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "331:  g2_t g2;",
      "332:  gt_t e, u, v;",
      "333:  bn_t k, n;",
      "335:  uint8_t *buf = RLC_ALLOCA(uint8_t, 1 + 8 * RLC_FP_BYTES + dlen);",
      "337:  g1_null(g1);",
      "338:  g2_null(g2);",
      "",
      "[Removed Lines]",
      "334:  int len, dlen = strlen(data), result = 1;",
      "",
      "[Added Lines]",
      "340:  size_t len, dlen = strlen(data);",
      "342:  int result = 1;",
      "",
      "---------------"
    ],
    "src/cp/relic_cp_pbpsi.c||src/cp/relic_cp_pbpsi.c": [
      "File: src/cp/relic_cp_pbpsi.c -> src/cp/relic_cp_pbpsi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "114:    bn_free(_x[i]);",
      "115:   }",
      "116:   RLC_FREE(p);",
      "117:  }",
      "118:  return result;",
      "119: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:   RLC_FREE(_x);",
      "",
      "---------------"
    ],
    "src/cp/relic_cp_rsa.c||src/cp/relic_cp_rsa.c": [
      "File: src/cp/relic_cp_rsa.c -> src/cp/relic_cp_rsa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248:  uint8_t *id, pad = 0;",
      "250:  bn_t t;",
      "252:  bn_null(t);",
      "",
      "[Removed Lines]",
      "247: static int pad_pkcs1(bn_t m, int *p_len, int m_len, int k_len, int operation) {",
      "249:  int len, result = RLC_ERR;",
      "",
      "[Added Lines]",
      "247: static int pad_pkcs1(bn_t m, int *p_len, size_t m_len, size_t k_len, int op) {",
      "249:  size_t len;",
      "250:  int result = RLC_ERR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "254:  RLC_TRY {",
      "255:   bn_new(t);",
      "258:    case RSA_ENC:",
      "260:     bn_zero(m);",
      "",
      "[Removed Lines]",
      "257:   switch (operation) {",
      "",
      "[Added Lines]",
      "258:   switch (op) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "423:  uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];",
      "424:  uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);",
      "425:  int result = RLC_ERR;",
      "",
      "[Removed Lines]",
      "422: static int pad_pkcs2(bn_t m, int *p_len, int m_len, int k_len, int operation) {",
      "",
      "[Added Lines]",
      "423: static int pad_pkcs2(bn_t m, int *p_len, size_t m_len, size_t k_len, int op) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "430:  RLC_TRY {",
      "431:   bn_new(t);",
      "434:    case RSA_ENC:",
      "436:     md_map(h1, NULL, 0);",
      "",
      "[Removed Lines]",
      "433:   switch (operation) {",
      "",
      "[Added Lines]",
      "434:   switch (op) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "582:  bn_t t, r;",
      "583:  int result = RLC_OK;",
      "",
      "[Removed Lines]",
      "581: int cp_rsa_gen(rsa_t pub, rsa_t prv, int bits) {",
      "",
      "[Added Lines]",
      "582: int cp_rsa_gen(rsa_t pub, rsa_t prv, size_t bits) {",
      "",
      "---------------"
    ],
    "src/cp/relic_cp_sokaka.c||src/cp/relic_cp_sokaka.c": [
      "File: src/cp/relic_cp_sokaka.c -> src/cp/relic_cp_sokaka.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "73: int cp_sokaka_key(uint8_t *key, size_t key_len, const char *id1,",
      "74:   const sokaka_t k, const char *id2) {",
      "77:  uint8_t *buf;",
      "78:  g1_t p;",
      "79:  g2_t q;",
      "",
      "[Removed Lines]",
      "75:  int len1 = strlen(id1), len2 = strlen(id2);",
      "76:  int size, first = 0, result = RLC_OK;",
      "",
      "[Added Lines]",
      "75:  size_t size, len1 = strlen(id1), len2 = strlen(id2);",
      "76:  int first = 0, result = RLC_OK;",
      "",
      "---------------"
    ],
    "src/cp/relic_cp_vbnn.c||src/cp/relic_cp_vbnn.c": [
      "File: src/cp/relic_cp_vbnn.c -> src/cp/relic_cp_vbnn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "73: int cp_vbnn_gen_prv(bn_t sk, ec_t pk, const bn_t msk, const uint8_t *id,",
      "74:   size_t id_len) {",
      "75:  uint8_t hash[RLC_MD_LEN];",
      "77:  uint8_t *buf = NULL;",
      "78:  bn_t n, r;",
      "81:  bn_null(n);",
      "",
      "[Removed Lines]",
      "76:  int len, result = RLC_OK;",
      "",
      "[Added Lines]",
      "76:  size_t len;",
      "79:  int result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "126: int cp_vbnn_sig(ec_t r, bn_t z, bn_t h, const uint8_t *id, size_t id_len,",
      "127:   const uint8_t *msg, int msg_len, const bn_t sk, const ec_t pk) {",
      "129:  uint8_t *buf = NULL, *buf_i, hash[RLC_MD_LEN];",
      "130:  bn_t n, y;",
      "131:  ec_t t;",
      "134:  bn_null(n);",
      "",
      "[Removed Lines]",
      "128:  int len, result = RLC_OK;",
      "",
      "[Added Lines]",
      "129:  size_t len;",
      "133:  int result = RLC_OK;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "190: int cp_vbnn_ver(const ec_t r, const bn_t z, const bn_t h, const uint8_t *id,",
      "191:   size_t id_len, const uint8_t *msg, int msg_len, const ec_t mpk) {",
      "193:  uint8_t *buf = NULL, *buf_i, hash[RLC_MD_LEN];",
      "194:  bn_t n, c, _h;",
      "199:  bn_null(n);",
      "",
      "[Removed Lines]",
      "192:  int len, result = 0;",
      "195:  ec_t Z;",
      "196:  ec_t t;",
      "",
      "[Added Lines]",
      "194:  size_t len;",
      "197:  ec_t Z, t;",
      "198:  int result = 0;",
      "",
      "---------------"
    ],
    "src/eb/relic_eb_map.c||src/eb/relic_eb_map.c": [
      "File: src/eb/relic_eb_map.c -> src/eb/relic_eb_map.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:  bn_t k;",
      "42:  fb_t t0, t1;",
      "43:  int i;",
      "",
      "[Removed Lines]",
      "40: void eb_map(eb_t p, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "40: void eb_map(eb_t p, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/eb/relic_eb_mul.c||src/eb/relic_eb_mul.c": [
      "File: src/eb/relic_eb_mul.c -> src/eb/relic_eb_mul.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: static void eb_mul_ltnaf_imp(eb_t r, const eb_t p, const bn_t k) {",
      "53:  int8_t tnaf[RLC_FB_BITS + 8], u;",
      "54:  eb_t t[1 << (EB_WIDTH - 2)];",
      "56:  if (eb_curve_opt_a() == RLC_ZERO) {",
      "57:   u = -1;",
      "",
      "[Removed Lines]",
      "52:  int i, l, n;",
      "",
      "[Added Lines]",
      "52:  int i, n;",
      "55:  size_t l;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "122: static void eb_mul_lnaf_imp(eb_t r, const eb_t p, const bn_t k) {",
      "124:  int8_t naf[RLC_FB_BITS + 1];",
      "125:  eb_t t[1 << (EB_WIDTH - 2)];",
      "127:  RLC_TRY {",
      "",
      "[Removed Lines]",
      "123:  int i, l, n;",
      "",
      "[Added Lines]",
      "124:  int i, n;",
      "127:  size_t l;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "192: static void eb_mul_rtnaf_imp(eb_t r, const eb_t p, const bn_t k) {",
      "194:  int8_t tnaf[RLC_FB_BITS + 8], u;",
      "195:  eb_t t[1 << (EB_WIDTH - 2)];",
      "197:  if (eb_curve_opt_a() == RLC_ZERO) {",
      "198:   u = -1;",
      "",
      "[Removed Lines]",
      "193:  int i, l, n;",
      "",
      "[Added Lines]",
      "195:  int i, n;",
      "198:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "491: static void eb_mul_rnaf_imp(eb_t r, const eb_t p, const bn_t k) {",
      "493:  int8_t naf[RLC_FB_BITS + 1];",
      "494:  eb_t t[1 << (EB_WIDTH - 2)];",
      "496:  RLC_TRY {",
      "",
      "[Removed Lines]",
      "492:  int i, l, n;",
      "",
      "[Added Lines]",
      "495:  int i, n;",
      "498:  size_t l;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "650: #if EB_MUL == LODAH || !defined(STRIP)",
      "652: void eb_mul_lodah(eb_t r, const eb_t p, const bn_t k) {",
      "654:  dv_t x1, z1, x2, z2, r1, r2, r3, r4, r5;",
      "655:  const dig_t *b;",
      "656:  bn_t t, n;",
      "658:  if (bn_is_zero(k)) {",
      "659:   eb_set_infty(r);",
      "",
      "[Removed Lines]",
      "653:  int bits, i, j;",
      "",
      "[Added Lines]",
      "660:  size_t bits;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "721:   fb_mul(z2, z2, r1);",
      "722:   fb_mul(x2, x2, r1);",
      "726:    fb_mul(r1, x1, z2);",
      "727:    fb_mul(r2, x2, z1);",
      "728:    fb_add(r3, r1, r2);",
      "",
      "[Removed Lines]",
      "724:   for (i = bits - 1; i >= 0; i--) {",
      "725:    j = bn_get_bit(t, i);",
      "",
      "[Added Lines]",
      "728:   for (int i = bits - 1; i >= 0; i--) {",
      "729:    int j = bn_get_bit(t, i);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "889: #if EB_MUL == HALVE || !defined(STRIP)",
      "891: void eb_mul_halve(eb_t r, const eb_t p, const bn_t k) {",
      "893:  int8_t naf[RLC_FB_BITS + 1], *_k;",
      "894:  eb_t q, s, t[1 << (EB_WIDTH - 2)];",
      "895:  bn_t n, m;",
      "896:  fb_t u, v, w, z;",
      "898:  if (bn_is_zero(k) || eb_is_infty(p)) {",
      "899:   eb_set_infty(r);",
      "",
      "[Removed Lines]",
      "892:  int i, j, l, trc, cof;",
      "",
      "[Added Lines]",
      "896:  int i, j, trc, cof;",
      "901:  size_t l;",
      "",
      "---------------"
    ],
    "src/eb/relic_eb_mul_sim.c||src/eb/relic_eb_mul_sim.c": [
      "File: src/eb/relic_eb_mul_sim.c -> src/eb/relic_eb_mul_sim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: static void eb_mul_sim_kbltz(eb_t r, const eb_t p, const bn_t k, const eb_t q,",
      "56:   const bn_t m, const eb_t *t) {",
      "58:  int8_t u, tnaf0[RLC_FB_BITS + 8], tnaf1[RLC_FB_BITS + 8], *_k, *_m;",
      "59:  eb_t t0[1 << (EB_WIDTH - 2)];",
      "60:  eb_t t1[1 << (EB_WIDTH - 2)];",
      "62:  for (i =  0; i < (1 << (EB_WIDTH - 2)); i++) {",
      "63:   eb_null(t0[i]);",
      "",
      "[Removed Lines]",
      "57:  int i, l, l0, l1, n0, n1, w, g;",
      "",
      "[Added Lines]",
      "57:  int i, n0, n1, w, g;",
      "61:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "184: static void eb_mul_sim_plain(eb_t r, const eb_t p, const bn_t k, const eb_t q,",
      "185:   const bn_t m, const eb_t *t) {",
      "187:  int8_t naf0[RLC_FB_BITS + 1], naf1[RLC_FB_BITS + 1], *_k, *_m;",
      "188:  eb_t t0[1 << (EB_WIDTH - 2)];",
      "189:  eb_t t1[1 << (EB_WIDTH - 2)];",
      "191:  for (i =  0; i < (1 << (EB_WIDTH - 2)); i++) {",
      "192:   eb_null(t0[i]);",
      "",
      "[Removed Lines]",
      "186:  int i, l, l0, l1, n0, n1, w, g;",
      "",
      "[Added Lines]",
      "187:  int i, n0, n1, w, g;",
      "191:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "310: void eb_mul_sim_trick(eb_t r, const eb_t p, const bn_t k, const eb_t q,",
      "311:   const bn_t m) {",
      "312:  eb_t t0[1 << (EB_WIDTH / 2)], t1[1 << (EB_WIDTH / 2)], t[1 << EB_WIDTH];",
      "314:  uint8_t w0[RLC_FB_BITS], w1[RLC_FB_BITS];",
      "315:  bn_t n;",
      "",
      "[Removed Lines]",
      "313:  int l0, l1, w = EB_WIDTH / 2;",
      "",
      "[Added Lines]",
      "315:  size_t l0, l1, w = EB_WIDTH / 2;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "436: void eb_mul_sim_joint(eb_t r, const eb_t p, const bn_t k, const eb_t q,",
      "437:   const bn_t m) {",
      "438:  eb_t t[5];",
      "440:  int8_t jsf[2 * (RLC_FB_BITS + 1)];",
      "442:  if (bn_is_zero(k) || eb_is_infty(p)) {",
      "443:   eb_mul(r, q, m);",
      "",
      "[Removed Lines]",
      "439:  int i, u_i, len, offset;",
      "",
      "[Added Lines]",
      "441:  int i, u_i, offset;",
      "443:  size_t len;",
      "",
      "---------------"
    ],
    "src/eb/relic_eb_util.c||src/eb/relic_eb_util.c": [
      "File: src/eb/relic_eb_util.c -> src/eb/relic_eb_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "500:  return size;",
      "501: }",
      "504:  if (len == 1) {",
      "505:   if (bin[0] == 0) {",
      "506:    eb_set_infty(a);",
      "",
      "[Removed Lines]",
      "503: void eb_read_bin(eb_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "503: void eb_read_bin(eb_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "550:  }",
      "551: }",
      "554:  eb_t t;",
      "556:  eb_null(t);",
      "",
      "[Removed Lines]",
      "553: void eb_write_bin(uint8_t *bin, int len, const eb_t a, int pack) {",
      "",
      "[Added Lines]",
      "553: void eb_write_bin(uint8_t *bin, size_t len, const eb_t a, int pack) {",
      "",
      "---------------"
    ],
    "src/ed/relic_ed_map.c||src/ed/relic_ed_map.c": [
      "File: src/ed/relic_ed_map.c -> src/ed/relic_ed_map.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:  bn_t k;",
      "192:  fp_t t;",
      "193:  ed_t q;",
      "",
      "[Removed Lines]",
      "190: void ed_map_dst(ed_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len) {",
      "",
      "[Added Lines]",
      "190: void ed_map_dst(ed_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "191:   size_t dst_len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "254:  }",
      "255: }",
      "258:  ed_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);",
      "259: }",
      "",
      "[Removed Lines]",
      "257: void ed_map(ed_t p, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "258: void ed_map(ed_t p, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/ed/relic_ed_mul.c||src/ed/relic_ed_mul.c": [
      "File: src/ed/relic_ed_mul.c -> src/ed/relic_ed_mul.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: #if ED_MUL == LWNAF || !defined(STRIP)",
      "41: static void ed_mul_naf_imp(ed_t r, const ed_t p, const bn_t k) {",
      "43:  int8_t naf[RLC_FP_BITS + 1];",
      "44:  ed_t t[1 << (ED_WIDTH - 2)];",
      "46:  if (bn_is_zero(k)) {",
      "47:   ed_set_infty(r);",
      "",
      "[Removed Lines]",
      "42:  int l, i, n;",
      "",
      "[Added Lines]",
      "42:  int i, n;",
      "45:  size_t l;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111: static void ed_mul_reg_imp(ed_t r, const ed_t p, const bn_t k) {",
      "112:  bn_t _k;",
      "114:  int8_t s, reg[RLC_CEIL(RLC_FP_BITS + 1, ED_WIDTH - 1)];",
      "115:  ed_t t[1 << (ED_WIDTH - 2)], u, v;",
      "117:  bn_null(_k);",
      "118:  if (bn_is_zero(k)) {",
      "",
      "[Removed Lines]",
      "113:  int i, j, l, n;",
      "",
      "[Added Lines]",
      "114:  int i, j, n;",
      "117:  size_t l;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "234: void ed_mul_slide(ed_t r, const ed_t p, const bn_t k) {",
      "235:  ed_t t[1 << (EP_WIDTH - 1)], q;",
      "237:  uint8_t win[RLC_FP_BITS + 1];",
      "239:  ed_null(q);",
      "",
      "[Removed Lines]",
      "236:  int i, j, l;",
      "",
      "[Added Lines]",
      "239:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "244:  }",
      "246:  RLC_TRY {",
      "248:    ed_null(t[i]);",
      "249:    ed_new(t[i]);",
      "250:   }",
      "",
      "[Removed Lines]",
      "247:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "[Added Lines]",
      "249:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "259: #endif",
      "263:    ed_add(t[i], t[i - 1], q);",
      "264:   }",
      "",
      "[Removed Lines]",
      "262:   for (i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "264:   for (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "270:   ed_set_infty(q);",
      "271:   l = RLC_FP_BITS + 1;",
      "272:   bn_rec_slw(win, &l, k, EP_WIDTH);",
      "274:    if (win[i] == 0) {",
      "275:     ed_dbl(q, q);",
      "276:    } else {",
      "278:      ed_dbl(q, q);",
      "279:     }",
      "280:     ed_add(q, q, t[win[i] >> 1]);",
      "",
      "[Removed Lines]",
      "273:   for (i = 0; i < l; i++) {",
      "277:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "275:   for (size_t i = 0; i < l; i++) {",
      "279:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "290:   RLC_THROW(ERR_CAUGHT);",
      "291:  }",
      "292:  RLC_FINALLY {",
      "294:    ed_free(t[i]);",
      "295:   }",
      "296:   ed_free(q);",
      "",
      "[Removed Lines]",
      "293:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "295:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "409:  ed_t t;",
      "410:  bn_t _k;",
      "411:  int8_t u, naf[RLC_DIG + 1];",
      "414:  ed_null(t);",
      "415:  bn_null(_k);",
      "",
      "[Removed Lines]",
      "412:  int l;",
      "",
      "[Added Lines]",
      "414:  size_t l;",
      "",
      "---------------"
    ],
    "src/ed/relic_ed_mul_fix.c||src/ed/relic_ed_mul_fix.c": [
      "File: src/ed/relic_ed_mul_fix.c -> src/ed/relic_ed_mul_fix.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: static void ed_mul_fix_plain(ed_t r, const ed_t * t, const bn_t k) {",
      "51:  int8_t naf[RLC_FP_BITS + 1], *_k;",
      "54:  l = RLC_FP_BITS + 1;",
      "",
      "[Removed Lines]",
      "50:  int l, i, n;",
      "",
      "[Added Lines]",
      "50:  int i, n;",
      "52:  size_t l;",
      "",
      "---------------"
    ],
    "src/ed/relic_ed_mul_sim.c||src/ed/relic_ed_mul_sim.c": [
      "File: src/ed/relic_ed_mul_sim.c -> src/ed/relic_ed_mul_sim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: static void ed_mul_sim_plain(ed_t r, const ed_t p, const bn_t k, const ed_t q,",
      "55:   const bn_t m, const ed_t *t) {",
      "57:  int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;",
      "58:  ed_t t0[1 << (ED_WIDTH - 2)];",
      "59:  ed_t t1[1 << (ED_WIDTH - 2)];",
      "61:  RLC_TRY {",
      "62:   gen = (t == NULL ? 0 : 1);",
      "",
      "[Removed Lines]",
      "56:  int i, l, l0, l1, n0, n1, w, gen;",
      "",
      "[Added Lines]",
      "56:  int i, n0, n1, w, gen;",
      "60:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:   const bn_t m) {",
      "177:  ed_t t0[1 << (ED_WIDTH / 2)], t1[1 << (ED_WIDTH / 2)], t[1 << ED_WIDTH];",
      "178:  bn_t n;",
      "180:  uint8_t w0[RLC_FP_BITS + 1], w1[RLC_FP_BITS + 1];",
      "182:  bn_null(n);",
      "",
      "[Removed Lines]",
      "179:  int l0, l1, w = ED_WIDTH / 2;",
      "",
      "[Added Lines]",
      "180:  size_t l0, l1, w = ED_WIDTH / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "293: void ed_mul_sim_joint(ed_t r, const ed_t p, const bn_t k, const ed_t q,",
      "294:   const bn_t m) {",
      "295:  ed_t t[5];",
      "297:  int8_t jsf[2 * (RLC_FP_BITS + 1)];",
      "299:  if (bn_is_zero(k) || ed_is_infty(p)) {",
      "300:   ed_mul(r, q, m);",
      "",
      "[Removed Lines]",
      "296:  int i, l, u_i, offset;",
      "",
      "[Added Lines]",
      "297:  int i, u_i, offset;",
      "299:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "398: }",
      "400: void ed_mul_sim_lot(ed_t r, const ed_t p[], const bn_t k[], int n) {",
      "403:  int8_t *naf = NULL;",
      "405:  RLC_TRY {",
      "406:   l = 0;",
      "",
      "[Removed Lines]",
      "401:  int i, j, l, *_l = RLC_ALLOCA(int, n);",
      "402:  ed_t *_p = RLC_ALLOCA(ed_t, n);",
      "",
      "[Added Lines]",
      "403:  int i, j;",
      "405:  ed_t *_p = RLC_ALLOCA(ed_t, n);",
      "406:  size_t l, *_l = RLC_ALLOCA(size_t, n);",
      "",
      "---------------"
    ],
    "src/ed/relic_ed_util.c||src/ed/relic_ed_util.c": [
      "File: src/ed/relic_ed_util.c -> src/ed/relic_ed_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:  return size;",
      "243: }",
      "246:  if (len == 1) {",
      "247:   if (bin[0] == 0) {",
      "248:    ed_set_infty(a);",
      "",
      "[Removed Lines]",
      "245: void ed_read_bin(ed_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "245: void ed_read_bin(ed_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "297:  }",
      "298: }",
      "301:  ed_t t;",
      "303:  ed_null(t);",
      "",
      "[Removed Lines]",
      "300: void ed_write_bin(uint8_t *bin, int len, const ed_t a, int pack) {",
      "",
      "[Added Lines]",
      "300: void ed_write_bin(uint8_t *bin, size_t len, const ed_t a, int pack) {",
      "",
      "---------------"
    ],
    "src/ep/relic_ep_map.c||src/ep/relic_ep_map.c": [
      "File: src/ep/relic_ep_map.c -> src/ep/relic_ep_map.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: #undef EP_MAP_COPY_COND",
      "70: static inline int fp_sgn0(const fp_t t, bn_t k) {",
      "71:  fp_prime_back(k, t);",
      "72:  return bn_get_bit(k, 0);",
      "",
      "[Removed Lines]",
      "51: TMPL_MAP_HORNER(fp, fp_st)",
      "55:   TMPL_MAP_ISOGENY_MAP(ep, fp, iso)",
      "61: #define EP_MAP_COPY_COND(O, I, C) dv_copy_cond(O, I, RLC_FP_DIGS, C)",
      "62:   TMPL_MAP_SSWU(ep, fp, dig_t, EP_MAP_COPY_COND)",
      "67: TMPL_MAP_SVDW(ep, fp, dig_t, EP_MAP_COPY_COND)",
      "",
      "[Added Lines]",
      "51: TMPL_MAP_HORNER(fp, fp_st);",
      "56: TMPL_MAP_ISOGENY_MAP(ep, fp, iso);",
      "60: #define EP_MAP_COPY_COND(O, I, C) dv_copy_cond(O, I, RLC_FP_DIGS, C)",
      "65: TMPL_MAP_SSWU(ep, fp, dig_t, EP_MAP_COPY_COND);",
      "71: TMPL_MAP_SVDW(ep, fp, dig_t, EP_MAP_COPY_COND);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:  bn_t k;",
      "81:  fp_t t;",
      "82:  ep_t q;",
      "",
      "[Removed Lines]",
      "79: void ep_map_from_field(ep_t p, const uint8_t *uniform_bytes, int len) {",
      "",
      "[Added Lines]",
      "85: void ep_map_from_field(ep_t p, const uint8_t *uniform_bytes, size_t len) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   const int abNeq0 = (ep_curve_opt_a() != RLC_ZERO) &&",
      "102:     (ep_curve_opt_b() != RLC_ZERO);",
      "104:     abNeq0) ? ep_map_sswu : ep_map_svdw;",
      "125:   EP_MAP_CONVERT_BYTES(0);",
      "",
      "[Removed Lines]",
      "103:   void (*const map_fn)(ep_t, fp_t) =(ep_curve_is_ctmap() ||",
      "106: #define EP_MAP_CONVERT_BYTES(IDX)                                       \\",
      "107:     do {                                                                \\",
      "108:       bn_read_bin(k, uniform_bytes + IDX * len_per_elm, len_per_elm);   \\",
      "109:       fp_prime_conv(t, k);                                              \\",
      "110:     } while (0)",
      "112: #define EP_MAP_APPLY_MAP(PT)                                    \\",
      "113:     do {                                                        \\",
      "115:       neg = fp_sgn0(t, k);                                      \\",
      "117:       map_fn(PT, t);                                            \\",
      "119:       neg = neg != fp_sgn0(PT->y, k);                             \\",
      "120:       fp_neg(t, PT->y);                                          \\",
      "121:       dv_copy_cond(PT->y, t, RLC_FP_DIGS, neg);                  \\",
      "122:     } while (0)",
      "",
      "[Added Lines]",
      "109:   void (*const map_fn)(ep_t, fp_t) = (ep_curve_is_ctmap() ||",
      "112: #define EP_MAP_CONVERT_BYTES(IDX)           \\",
      "113:   do {                \\",
      "114:    bn_read_bin(k, uniform_bytes + IDX * len_per_elm, len_per_elm); \\",
      "115:    fp_prime_conv(t, k);           \\",
      "116:   } while (0)",
      "118: #define EP_MAP_APPLY_MAP(PT)            \\",
      "119:   do {                \\",
      "121:    neg = fp_sgn0(t, k);           \\",
      "123:    map_fn(PT, t);             \\",
      "125:    neg = neg != fp_sgn0(PT->y, k);         \\",
      "126:    fp_neg(t, PT->y);            \\",
      "127:    dv_copy_cond(PT->y, t, RLC_FP_DIGS, neg);      \\",
      "128:   } while (0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "179:  }",
      "180: }",
      "186:  const int len_per_elm = (FP_PRIME + ep_param_level() + 7) / 8;",
      "",
      "[Removed Lines]",
      "182: void ep_map_dst(ep_t p, const uint8_t *msg, int len, const uint8_t *dst,",
      "183:   int dst_len) {",
      "",
      "[Added Lines]",
      "188: void ep_map_dst(ep_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "189:   size_t dst_len) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "202:  }",
      "203: }",
      "206:  ep_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);",
      "207: }",
      "",
      "[Removed Lines]",
      "205: void ep_map(ep_t p, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "211: void ep_map(ep_t p, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/ep/relic_ep_mul.c||src/ep/relic_ep_mul.c": [
      "File: src/ep/relic_ep_mul.c -> src/ep/relic_ep_mul.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: #if defined(EP_ENDOM)",
      "42: static void ep_mul_glv_imp(ep_t r, const ep_t p, const bn_t k) {",
      "44:  int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *t0, *t1;",
      "45:  bn_t n, _k, k0, k1, v1[3], v2[3];",
      "46:  ep_t q, t[1 << (EP_WIDTH - 2)];",
      "48:  bn_null(n);",
      "49:  bn_null(_k);",
      "",
      "[Removed Lines]",
      "43:  int l, l0, l1, i, n0, n1, s0, s1;",
      "",
      "[Added Lines]",
      "43:  int i, n0, n1, s0, s1;",
      "47:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153: #if defined(EP_PLAIN) || defined(EP_SUPER)",
      "155: static void ep_mul_naf_imp(ep_t r, const ep_t p, const bn_t k) {",
      "158:  int8_t u, naf[RLC_FP_BITS + 2];",
      "159:  ep_t t[1 << (EP_WIDTH - 2)];",
      "160:  bn_t _k, n;",
      "162:  bn_null(n);",
      "163:  bn_null(_k);",
      "",
      "[Removed Lines]",
      "156:  int i, l;",
      "",
      "[Added Lines]",
      "161:  size_t l;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "166:   bn_new(n);",
      "167:   bn_new(_k);",
      "170:    ep_null(t[i]);",
      "171:    ep_new(t[i]);",
      "172:   }",
      "",
      "[Removed Lines]",
      "169:   for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "170:   for (int i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "182:   bn_rec_naf(naf, &l, _k, EP_WIDTH);",
      "184:   ep_set_infty(r);",
      "186:    ep_dbl(r, r);",
      "188:    u = naf[i];",
      "",
      "[Removed Lines]",
      "185:   for (i = l - 1; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "186:   for (int i = l - 1; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "205:   bn_free(n);",
      "206:   bn_free(_k);",
      "209:    ep_free(t[i]);",
      "210:   }",
      "211:  }",
      "",
      "[Removed Lines]",
      "208:   for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "209:   for (int i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "219: #if defined(EP_ENDOM)",
      "221: static void ep_mul_reg_glv(ep_t r, const ep_t p, const bn_t k) {",
      "223:  int8_t _s0, _s1, reg0[RLC_FP_BITS + 1], reg1[RLC_FP_BITS + 1];",
      "224:  bn_t n, _k, k0, k1, v1[3], v2[3];",
      "225:  ep_t q, t[1 << (EP_WIDTH - 2)], u, v, w;",
      "227:  bn_null(n);",
      "228:  bn_null(_k);",
      "",
      "[Removed Lines]",
      "222:  int i, j, l, n0, n1, s0, s1, b0, b1;",
      "",
      "[Added Lines]",
      "223:  int i, j, n0, n1, s0, s1, b0, b1;",
      "227:  size_t l;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: static void ep_mul_reg_imp(ep_t r, const ep_t p, const bn_t k) {",
      "373:  bn_t _k;",
      "375:  int8_t s, reg[1 + RLC_CEIL(RLC_FP_BITS + 1, EP_WIDTH - 1)];",
      "376:  ep_t t[1 << (EP_WIDTH - 2)], u, v;",
      "378:  if (bn_is_zero(k)) {",
      "379:   ep_set_infty(r);",
      "",
      "[Removed Lines]",
      "374:  int i, j, l, n;",
      "",
      "[Added Lines]",
      "376:  int i, j, n;",
      "379:  size_t l;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "502: void ep_mul_slide(ep_t r, const ep_t p, const bn_t k) {",
      "503:  bn_t _k, n;",
      "504:  ep_t t[1 << (EP_WIDTH - 1)], q;",
      "506:  uint8_t win[RLC_FP_BITS + 1];",
      "508:  if (bn_is_zero(k) || ep_is_infty(p)) {",
      "509:   ep_set_infty(r);",
      "",
      "[Removed Lines]",
      "505:  int i, j, l;",
      "",
      "[Added Lines]",
      "509:  size_t l;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "517:  RLC_TRY {",
      "518:   bn_new(n);",
      "519:   bn_new(_k);",
      "521:    ep_null(t[i]);",
      "522:    ep_new(t[i]);",
      "523:   }",
      "",
      "[Removed Lines]",
      "520:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "[Added Lines]",
      "523:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "534:   bn_mod(_k, k, n);",
      "538:    ep_add(t[i], t[i - 1], q);",
      "539:   }",
      "",
      "[Removed Lines]",
      "537:   for (i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "540:   for (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "545:   ep_set_infty(q);",
      "546:   l = RLC_FP_BITS + 1;",
      "547:   bn_rec_slw(win, &l, _k, EP_WIDTH);",
      "549:    if (win[i] == 0) {",
      "550:     ep_dbl(q, q);",
      "551:    } else {",
      "553:      ep_dbl(q, q);",
      "554:     }",
      "555:     ep_add(q, q, t[win[i] >> 1]);",
      "",
      "[Removed Lines]",
      "548:   for (i = 0; i < l; i++) {",
      "552:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "551:   for (size_t i = 0; i < l; i++) {",
      "555:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "567:  RLC_FINALLY {",
      "568:   bn_free(n);",
      "569:   bn_free(_k);",
      "571:    ep_free(t[i]);",
      "572:   }",
      "573:   ep_free(q);",
      "",
      "[Removed Lines]",
      "570:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "573:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "579: #if EP_MUL == MONTY || !defined(STRIP)",
      "581: void ep_mul_monty(ep_t r, const ep_t p, const bn_t k) {",
      "583:  ep_t t[2];",
      "584:  bn_t n, l, _k;",
      "586:  bn_null(n);",
      "587:  bn_null(l);",
      "",
      "[Removed Lines]",
      "582:  int i, j, bits;",
      "",
      "[Added Lines]",
      "587:  size_t bits;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "619:   ep_blind(t[0], t[0]);",
      "620:   ep_blind(t[1], t[1]);",
      "624:    dv_swap_cond(t[0]->x, t[1]->x, RLC_FP_DIGS, j ^ 1);",
      "625:    dv_swap_cond(t[0]->y, t[1]->y, RLC_FP_DIGS, j ^ 1);",
      "626:    dv_swap_cond(t[0]->z, t[1]->z, RLC_FP_DIGS, j ^ 1);",
      "",
      "[Removed Lines]",
      "622:   for (i = bits - 1; i >= 0; i--) {",
      "623:    j = bn_get_bit(l, i);",
      "",
      "[Added Lines]",
      "625:   for (int i = bits - 1; i >= 0; i--) {",
      "626:    int j = bn_get_bit(l, i);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "723:  ep_t t;",
      "724:  bn_t _k;",
      "725:  int8_t u, naf[RLC_DIG + 1];",
      "728:  ep_null(t);",
      "729:  bn_null(_k);",
      "",
      "[Removed Lines]",
      "726:  int l;",
      "",
      "[Added Lines]",
      "729:  size_t l;",
      "",
      "---------------"
    ],
    "src/ep/relic_ep_mul_fix.c||src/ep/relic_ep_mul_fix.c": [
      "File: src/ep/relic_ep_mul_fix.c -> src/ep/relic_ep_mul_fix.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: static void ep_mul_fix_plain(ep_t r, const ep_t *t, const bn_t k) {",
      "50:  int8_t naf[RLC_FP_BITS + 1];",
      "53:  l = RLC_FP_BITS + 1;",
      "",
      "[Removed Lines]",
      "49:  int l, i, n;",
      "",
      "[Added Lines]",
      "49:  int i, n;",
      "51:  size_t l;",
      "",
      "---------------"
    ],
    "src/ep/relic_ep_mul_sim.c||src/ep/relic_ep_mul_sim.c": [
      "File: src/ep/relic_ep_mul_sim.c -> src/ep/relic_ep_mul_sim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: static void ep_mul_sim_endom(ep_t r, const ep_t p, const bn_t k, const ep_t q,",
      "56:   const bn_t m, const ep_t *t) {",
      "58:  int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *t0, *t1, u;",
      "59:  int8_t naf2[RLC_FP_BITS + 1], naf3[RLC_FP_BITS + 1], *t2, *t3;",
      "60:  bn_t n, k0, k1, m0, m1;",
      "",
      "[Removed Lines]",
      "57:  int i, l, l0, l1, l2, l3, sk0, sk1, sl0, sl1, w, g = 0;",
      "",
      "[Added Lines]",
      "57:  int i, sk0, sk1, sl0, sl1, w, g = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:  ep_t v;",
      "63:  ep_t tab0[1 << (EP_WIDTH - 2)];",
      "64:  ep_t tab1[1 << (EP_WIDTH - 2)];",
      "66:  bn_null(n);",
      "67:  bn_null(k0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:  size_t l, l0, l1, l2, l3;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "265: void ep_mul_sim_lot_endom(ep_t r, const ep_t p[], const bn_t k[], int n) {",
      "266:  const int len = RLC_FP_BITS + 1;",
      "268:  bn_t _k[2], q, v1[3], v2[3];",
      "269:  int8_t ptr, *naf = RLC_ALLOCA(int8_t, 2 * n * len);",
      "271:  bn_null(q);",
      "",
      "[Removed Lines]",
      "267:  int i, j, m, l, _l[2], sk;",
      "",
      "[Added Lines]",
      "268:  int i, j, m, sk;",
      "271:  size_t l, _l[2];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "487: static void ep_mul_sim_plain(ep_t r, const ep_t p, const bn_t k, const ep_t q,",
      "488:   const bn_t m, const ep_t *t) {",
      "490:  int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], n0, n1, *u, *v;",
      "491:  ep_t t0[1 << (EP_WIDTH - 2)];",
      "492:  ep_t t1[1 << (EP_WIDTH - 2)];",
      "494:  RLC_TRY {",
      "495:   gen = (t == NULL ? 0 : 1);",
      "",
      "[Removed Lines]",
      "489:  int i, l, l0, l1, w, gen;",
      "",
      "[Added Lines]",
      "491:  int i, w, gen;",
      "495:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "585: void ep_mul_sim_lot_plain(ep_t r, const ep_t p[], const bn_t k[], int n) {",
      "588:  int8_t *naf = NULL;",
      "590:  RLC_TRY {",
      "591:   l = 0;",
      "",
      "[Removed Lines]",
      "586:  int i, j, l, *_l = RLC_ALLOCA(int, n);",
      "587:  ep_t *_p = RLC_ALLOCA(ep_t, n);",
      "",
      "[Added Lines]",
      "589:  int i, j;",
      "591:  ep_t *_p = RLC_ALLOCA(ep_t, n);",
      "592:  size_t l, *_l = RLC_ALLOCA(size_t, n);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "677:   const bn_t m) {",
      "678:  ep_t t0[1 << (EP_WIDTH / 2)], t1[1 << (EP_WIDTH / 2)], t[1 << EP_WIDTH];",
      "679:  bn_t n, _k, _m;",
      "681:  uint8_t w0[RLC_FP_BITS + 1], w1[RLC_FP_BITS + 1];",
      "683:  if (bn_is_zero(k) || ep_is_infty(p)) {",
      "",
      "[Removed Lines]",
      "680:  int l0, l1, w = EP_WIDTH / 2;",
      "",
      "[Added Lines]",
      "684:  size_t l0, l1, w = EP_WIDTH / 2;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "838:   const bn_t m) {",
      "839:  bn_t n, _k, _m;",
      "840:  ep_t t[5];",
      "842:  int8_t jsf[2 * (RLC_FP_BITS + 1)];",
      "844:  if (bn_is_zero(k) || ep_is_infty(p)) {",
      "845:   ep_mul(r, q, m);",
      "",
      "[Removed Lines]",
      "841:  int i, l, u_i, offset;",
      "",
      "[Added Lines]",
      "845:  int i, u_i, offset;",
      "847:  size_t l;",
      "",
      "---------------"
    ],
    "src/ep/relic_ep_util.c||src/ep/relic_ep_util.c": [
      "File: src/ep/relic_ep_util.c -> src/ep/relic_ep_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "234:  return size;",
      "235: }",
      "238:  if (len == 1) {",
      "239:   if (bin[0] == 0) {",
      "240:    ep_set_infty(a);",
      "",
      "[Removed Lines]",
      "237: void ep_read_bin(ep_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "237: void ep_read_bin(ep_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "284:  }",
      "285: }",
      "288:  ep_t t;",
      "290:  ep_null(t);",
      "",
      "[Removed Lines]",
      "287: void ep_write_bin(uint8_t *bin, int len, const ep_t a, int pack) {",
      "",
      "[Added Lines]",
      "287: void ep_write_bin(uint8_t *bin, size_t len, const ep_t a, int pack) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep2_map.c||src/epx/relic_ep2_map.c": [
      "File: src/epx/relic_ep2_map.c -> src/epx/relic_ep2_map.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: TMPL_MAP_HORNER(fp2, fp2_t)",
      "55: TMPL_MAP_ISOGENY_MAP(ep2, fp2, iso2)",
      "65:  } while (0)",
      "66: TMPL_MAP_SSWU(ep2, fp2, fp_t, EP2_MAP_COPY_COND)",
      "71: TMPL_MAP_SVDW(ep2, fp2, fp_t, EP2_MAP_COPY_COND)",
      "72: #undef EP2_MAP_COPY_COND",
      "75: static inline int fp2_sgn0(const fp2_t t, bn_t k) {",
      "76:  const int t_0_zero = fp_is_zero(t[0]);",
      "",
      "[Removed Lines]",
      "61: #define EP2_MAP_COPY_COND(O, I, C)                                                       \\",
      "62:  do {                                                                                 \\",
      "63:   dv_copy_cond(O[0], I[0], RLC_FP_DIGS, C);                                        \\",
      "64:   dv_copy_cond(O[1], I[1], RLC_FP_DIGS, C);                                        \\",
      "",
      "[Added Lines]",
      "59: #define EP2_MAP_COPY_COND(O, I, C)           \\",
      "60:  do {                 \\",
      "61:   dv_copy_cond(O[0], I[0], RLC_FP_DIGS, C);       \\",
      "62:   dv_copy_cond(O[1], I[1], RLC_FP_DIGS, C);       \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151: #undef EP2_MAP_CONVERT_BYTES",
      "152: #undef EP2_MAP_APPLY_MAP",
      "167: }",
      "189: }",
      "192:  ep2_map_dst(p, msg, len, (const uint8_t *)\"RELIC\", 5);",
      "193: }",
      "",
      "[Removed Lines]",
      "92: void ep2_map_from_field(ep2_t p, const uint8_t *uniform_bytes, int len) {",
      "93:         bn_t k;",
      "94:         fp2_t t;",
      "95:         ep2_t q;",
      "96:         int neg;",
      "98:         const int len_per_elm = (FP_PRIME + ep_param_level() + 7) / 8;",
      "100:         bn_null(k);",
      "101:         fp2_null(t);",
      "102:         ep2_null(q);",
      "104:         RLC_TRY {",
      "105:                 if (len != 2* len_per_elm) {",
      "106:                   RLC_THROW(ERR_NO_VALID);",
      "107:                 }",
      "109:                 bn_new(k);",
      "110:                 fp2_new(t);",
      "111:                 ep2_new(q);",
      "114:                 const int abNeq0 = (ep2_curve_opt_a() != RLC_ZERO) && (ep2_curve_opt_b() != RLC_ZERO);",
      "115:                 void (*const map_fn)(ep2_t, fp2_t) = (ep2_curve_is_ctmap() || abNeq0) ? ep2_map_sswu : ep2_map_svdw;",
      "117: #define EP2_MAP_CONVERT_BYTES(IDX)                                                       \\",
      "118:         do {                                                                                 \\",
      "119:                 bn_read_bin(k, uniform_bytes + 2 * IDX * len_per_elm, len_per_elm);        \\",
      "120:                 fp_prime_conv(t[0], k);                                                          \\",
      "121:                 bn_read_bin(k, uniform_bytes + (2 * IDX + 1) * len_per_elm, len_per_elm);  \\",
      "122:                 fp_prime_conv(t[1], k);                                                          \\",
      "123:         } while (0)",
      "125: #define EP2_MAP_APPLY_MAP(PT)                                                            \\",
      "126:         do {                                                                                 \\",
      "128:                 neg = fp2_sgn0(t, k);                                                            \\",
      "130:                 map_fn(PT, t);                                                                   \\",
      "132:                 neg = neg != fp2_sgn0(PT->y, k);                                                 \\",
      "133:                 fp2_neg(t, PT->y);                                                               \\",
      "134:                 dv_copy_cond(PT->y[0], t[0], RLC_FP_DIGS, neg);                                  \\",
      "135:                 dv_copy_cond(PT->y[1], t[1], RLC_FP_DIGS, neg);                                  \\",
      "136:         } while (0)",
      "139:                 EP2_MAP_CONVERT_BYTES(0);",
      "140:                 EP2_MAP_APPLY_MAP(p);",
      "141:                 TMPL_MAP_CALL_ISOMAP(ep2, p);",
      "144:                 EP2_MAP_CONVERT_BYTES(1);",
      "145:                 EP2_MAP_APPLY_MAP(q);",
      "146:                 TMPL_MAP_CALL_ISOMAP(ep2, q);",
      "155:                 ep2_add(p, p, q);",
      "156:                 ep2_norm(p, p);",
      "157:                 ep2_mul_cof(p, p);",
      "158:         }",
      "159:         RLC_CATCH_ANY {",
      "160:                 RLC_THROW(ERR_CAUGHT);",
      "161:         }",
      "162:         RLC_FINALLY {",
      "163:                 bn_free(k);",
      "164:                 fp2_free(t);",
      "165:                 ep2_free(q);",
      "166:         }",
      "170: void ep2_map_dst(ep2_t p, const uint8_t *msg, int len, const uint8_t *dst, int dst_len) {",
      "173:         const int len_per_elm = (FP_PRIME + ep_param_level() + 7) / 8;",
      "174:         uint8_t *pseudo_random_bytes = RLC_ALLOCA(uint8_t, 4 * len_per_elm);",
      "176:         RLC_TRY {",
      "180:                 md_xmd(pseudo_random_bytes, 4 * len_per_elm, msg, len, dst, dst_len);",
      "181:                 ep2_map_from_field(p, pseudo_random_bytes, 2 * len_per_elm);",
      "182:         }",
      "183:         RLC_CATCH_ANY {",
      "184:                 RLC_THROW(ERR_CAUGHT);",
      "185:         }",
      "186:         RLC_FINALLY {",
      "187:                 RLC_FREE(pseudo_random_bytes);",
      "188:         }",
      "191: void ep2_map(ep2_t p, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "88: void ep2_map_from_field(ep2_t p, const uint8_t *uniform_bytes, size_t len) {",
      "89:  bn_t k;",
      "90:  fp2_t t;",
      "91:  ep2_t q;",
      "92:  int neg;",
      "94:  const int lpe = (FP_PRIME + ep_param_level() + 7) / 8;",
      "96:  bn_null(k);",
      "97:  fp2_null(t);",
      "98:  ep2_null(q);",
      "100:  RLC_TRY {",
      "101:   if (len != 2 * lpe) {",
      "102:    RLC_THROW(ERR_NO_VALID);",
      "103:   }",
      "105:   bn_new(k);",
      "106:   fp2_new(t);",
      "107:   ep2_new(q);",
      "110:   const int abNeq0 = (ep2_curve_opt_a() != RLC_ZERO) &&",
      "111:     (ep2_curve_opt_b() != RLC_ZERO);",
      "112:   void (*const map_fn)(ep2_t, fp2_t) = (ep2_curve_is_ctmap() ||",
      "113:     abNeq0) ? ep2_map_sswu : ep2_map_svdw;",
      "115: #define EP2_MAP_CONVERT_BYTES(IDX)           \\",
      "116:   do {                \\",
      "117:    bn_read_bin(k, uniform_bytes + 2 * IDX * lpe, lpe);    \\",
      "118:    fp_prime_conv(t[0], k);           \\",
      "119:    bn_read_bin(k, uniform_bytes + (2 * IDX + 1) * lpe, lpe);  \\",
      "120:    fp_prime_conv(t[1], k);           \\",
      "121:      } while (0)",
      "123: #define EP2_MAP_APPLY_MAP(PT)            \\",
      "124:   do {                \\",
      "126:             neg = fp2_sgn0(t, k);           \\",
      "128:             map_fn(PT, t);             \\",
      "130:             neg = neg != fp2_sgn0(PT->y, k);        \\",
      "131:             fp2_neg(t, PT->y);            \\",
      "132:             dv_copy_cond(PT->y[0], t[0], RLC_FP_DIGS, neg);     \\",
      "133:             dv_copy_cond(PT->y[1], t[1], RLC_FP_DIGS, neg);     \\",
      "134:   } while (0)",
      "137:   EP2_MAP_CONVERT_BYTES(0);",
      "138:   EP2_MAP_APPLY_MAP(p);",
      "139:   TMPL_MAP_CALL_ISOMAP(ep2, p);",
      "142:   EP2_MAP_CONVERT_BYTES(1);",
      "143:   EP2_MAP_APPLY_MAP(q);",
      "144:   TMPL_MAP_CALL_ISOMAP(ep2, q);",
      "153:   ep2_add(p, p, q);",
      "154:   ep2_norm(p, p);",
      "155:   ep2_mul_cof(p, p);",
      "156:  }",
      "157:  RLC_CATCH_ANY {",
      "158:   RLC_THROW(ERR_CAUGHT);",
      "159:  }",
      "160:  RLC_FINALLY {",
      "161:   bn_free(k);",
      "162:   fp2_free(t);",
      "163:   ep2_free(q);",
      "164:  }",
      "168: void ep2_map_dst(ep2_t p, const uint8_t *msg, size_t len, const uint8_t *dst,",
      "169:   size_t dst_len) {",
      "171:  const int lpe = (FP_PRIME + ep_param_level() + 7) / 8;",
      "172:  uint8_t *pseudo_random_bytes = RLC_ALLOCA(uint8_t, 4 * lpe);",
      "174:  RLC_TRY {",
      "177:   md_xmd(pseudo_random_bytes, 4 * lpe, msg, len, dst, dst_len);",
      "178:   ep2_map_from_field(p, pseudo_random_bytes, 2 * lpe);",
      "179:  }",
      "180:  RLC_CATCH_ANY {",
      "181:   RLC_THROW(ERR_CAUGHT);",
      "182:  }",
      "183:  RLC_FINALLY {",
      "184:   RLC_FREE(pseudo_random_bytes);",
      "185:  }",
      "188: void ep2_map(ep2_t p, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep2_mul.c||src/epx/relic_ep2_mul.c": [
      "File: src/epx/relic_ep2_mul.c -> src/epx/relic_ep2_mul.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #if defined(EP_ENDOM)",
      "43: static void ep2_mul_glv_imp(ep2_t r, const ep2_t p, const bn_t k) {",
      "45:  bn_t n, _k[4], u;",
      "46:  int8_t naf[4][RLC_FP_BITS + 1];",
      "47:  ep2_t q[4];",
      "",
      "[Removed Lines]",
      "44:  int i, j, l, _l[4];",
      "",
      "[Added Lines]",
      "44:  size_t l, _l[4];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:  RLC_TRY {",
      "53:   bn_new(n);",
      "54:   bn_new(u);",
      "56:    bn_null(_k[i]);",
      "57:    ep2_null(q[i]);",
      "58:    bn_new(_k[i]);",
      "",
      "[Removed Lines]",
      "55:   for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "55:   for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "70:   ep2_frb(q[3], q[2], 1);",
      "72:   l = 0;",
      "74:    if (bn_sign(_k[i]) == RLC_NEG) {",
      "75:     ep2_neg(q[i], q[i]);",
      "76:    }",
      "",
      "[Removed Lines]",
      "73:   for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "73:   for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "80:   }",
      "82:   ep2_set_infty(r);",
      "84:    ep2_dbl(r, r);",
      "87:     if (naf[i][j] > 0) {",
      "88:      ep2_add(r, r, q[i]);",
      "89:     }",
      "",
      "[Removed Lines]",
      "83:   for (j = l - 1; j >= 0; j--) {",
      "86:    for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "83:   for (int j = l - 1; j >= 0; j--) {",
      "86:    for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "102:  RLC_FINALLY {",
      "103:   bn_free(n);",
      "104:   bn_free(u);",
      "106:    bn_free(_k[i]);",
      "107:    ep2_free(q[i]);",
      "108:   }",
      "",
      "[Removed Lines]",
      "105:   for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "105:   for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "115: static void ep2_mul_naf_imp(ep2_t r, const ep2_t p, const bn_t k) {",
      "117:  int8_t naf[RLC_FP_BITS + 1];",
      "118:  ep2_t t[1 << (EP_WIDTH - 2)];",
      "120:  RLC_TRY {",
      "123:    ep2_null(t[i]);",
      "124:    ep2_new(t[i]);",
      "125:   }",
      "",
      "[Removed Lines]",
      "116:  int l, i, n;",
      "122:   for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "116:  size_t l, n;",
      "122:   for (int i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "131:   bn_rec_naf(naf, &l, k, EP_WIDTH);",
      "133:   ep2_set_infty(r);",
      "135:    ep2_dbl(r, r);",
      "137:    n = naf[i];",
      "",
      "[Removed Lines]",
      "134:   for (i = l - 1; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "134:   for (int i = l - 1; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "153:  }",
      "154:  RLC_FINALLY {",
      "157:    ep2_free(t[i]);",
      "158:   }",
      "159:  }",
      "",
      "[Removed Lines]",
      "156:   for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "156:   for (int i = 0; i < (1 << (EP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "168: void ep2_mul_basic(ep2_t r, const ep2_t p, const bn_t k) {",
      "170:  ep2_t t;",
      "172:  ep2_null(t);",
      "",
      "[Removed Lines]",
      "169:  int i, l;",
      "",
      "[Added Lines]",
      "169:  size_t l;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "186:    ep2_set_infty(t);",
      "187:   }",
      "190:    ep2_dbl(t, t);",
      "191:    if (bn_get_bit(k, i)) {",
      "192:     ep2_add(t, t, p);",
      "",
      "[Removed Lines]",
      "189:   for (i = l - 2; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "189:   for (int i = l - 2; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "212: void ep2_mul_slide(ep2_t r, const ep2_t p, const bn_t k) {",
      "213:  ep2_t t[1 << (EP_WIDTH - 1)], q;",
      "215:  uint8_t win[RLC_FP_BITS + 1];",
      "217:  ep2_null(q);",
      "",
      "[Removed Lines]",
      "214:  int i, j, l;",
      "",
      "[Added Lines]",
      "215:  size_t l;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "222:  }",
      "224:  RLC_TRY {",
      "226:    ep2_null(t[i]);",
      "227:    ep2_new(t[i]);",
      "228:   }",
      "",
      "[Removed Lines]",
      "225:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "[Added Lines]",
      "225:   for (int i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "237: #endif",
      "241:    ep2_add(t[i], t[i - 1], q);",
      "242:   }",
      "",
      "[Removed Lines]",
      "240:   for (i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "240:   for (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "248:   ep2_set_infty(q);",
      "249:   l = RLC_FP_BITS + 1;",
      "250:   bn_rec_slw(win, &l, k, EP_WIDTH);",
      "252:    if (win[i] == 0) {",
      "253:     ep2_dbl(q, q);",
      "254:    } else {",
      "256:      ep2_dbl(q, q);",
      "257:     }",
      "258:     ep2_add(q, q, t[win[i] >> 1]);",
      "",
      "[Removed Lines]",
      "251:   for (i = 0; i < l; i++) {",
      "255:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "251:   for (size_t i = 0; i < l; i++) {",
      "255:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "268:   RLC_THROW(ERR_CAUGHT);",
      "269:  }",
      "270:  RLC_FINALLY {",
      "272:    ep2_free(t[i]);",
      "273:   }",
      "274:   ep2_free(q);",
      "",
      "[Removed Lines]",
      "271:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "271:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "387:  ep2_t t;",
      "388:  bn_t _k;",
      "389:  int8_t u, naf[RLC_DIG + 1];",
      "392:  ep2_null(t);",
      "393:  bn_null(_k);",
      "",
      "[Removed Lines]",
      "390:  int l;",
      "",
      "[Added Lines]",
      "390:  size_t l;",
      "",
      "---------------"
    ],
    "src/epx/relic_ep2_mul_fix.c||src/epx/relic_ep2_mul_fix.c": [
      "File: src/epx/relic_ep2_mul_fix.c -> src/epx/relic_ep2_mul_fix.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: static void ep2_mul_fix_plain(ep2_t r, const ep2_t *table, const bn_t k) {",
      "51:  int8_t naf[2 * RLC_FP_BITS + 1], *t;",
      "53:  if (bn_is_zero(k)) {",
      "54:   ep2_set_infty(r);",
      "",
      "[Removed Lines]",
      "50:  int len, i, n;",
      "",
      "[Added Lines]",
      "51:  size_t len;",
      "52:  int n;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:  t = naf + len - 1;",
      "63:  ep2_set_infty(r);",
      "65:   ep2_dbl(r, r);",
      "67:   n = *t;",
      "",
      "[Removed Lines]",
      "64:  for (i = len - 1; i >= 0; i--, t--) {",
      "",
      "[Added Lines]",
      "65:  for (int i = len - 1; i >= 0; i--, t--) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep2_mul_sim.c||src/epx/relic_ep2_mul_sim.c": [
      "File: src/epx/relic_ep2_mul_sim.c -> src/epx/relic_ep2_mul_sim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: static void ep2_mul_sim_endom(ep2_t r, const ep2_t p, const bn_t k, ep2_t q,",
      "56:   const bn_t m) {",
      "58:  bn_t _k[4], _m[4], n, u;",
      "59:  int8_t naf0[4][RLC_FP_BITS + 1];",
      "60:  int8_t naf1[4][RLC_FP_BITS + 1];",
      "",
      "[Removed Lines]",
      "57:  int i, j, l, _l[4];",
      "",
      "[Added Lines]",
      "57:  size_t l, _l[4];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:  RLC_TRY {",
      "67:   bn_new(n);",
      "68:   bn_new(u);",
      "70:    bn_null(_k[i]);",
      "71:    bn_new(_k[i]);",
      "72:    bn_null(_m[i]);",
      "",
      "[Removed Lines]",
      "69:   for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "69:   for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94:   bn_rec_frb(_m, 4, _m[0], u, n, ep_curve_is_pairf() == EP_BN);",
      "96:   l = 0;",
      "98:    _l[i] = RLC_FP_BITS + 1;",
      "99:    bn_rec_naf(naf0[i], &_l[i], _k[i], 2);",
      "100:    if (bn_sign(_k[i]) == RLC_NEG) {",
      "",
      "[Removed Lines]",
      "97:   for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "97:   for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:   }",
      "112:   ep2_set_infty(r);",
      "114:    ep2_dbl(r, r);",
      "116:     if (naf0[j][i] > 0) {",
      "117:      ep2_add(r, r, _p[j]);",
      "118:     }",
      "",
      "[Removed Lines]",
      "113:   for (i = l - 1; i >= 0; i--) {",
      "115:    for (j = 0; j < 4; j++) {",
      "",
      "[Added Lines]",
      "113:   for (int i = l - 1; i >= 0; i--) {",
      "115:    for (int j = 0; j < 4; j++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "135:  } RLC_FINALLY {",
      "136:   bn_free(n);",
      "137:   bn_free(u);",
      "139:    bn_free(_k[i]);",
      "140:    bn_free(_m[i]);",
      "141:    ep2_free(_p[i]);",
      "",
      "[Removed Lines]",
      "138:   for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "138:   for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "163: static void ep2_mul_sim_plain(ep2_t r, const ep2_t p, const bn_t k,",
      "164:   const ep2_t q, const bn_t m, const ep2_t *t) {",
      "166:  int8_t naf0[2 * RLC_FP_BITS + 1], naf1[2 * RLC_FP_BITS + 1], *_k, *_m;",
      "167:  ep2_t t0[1 << (EP_WIDTH - 2)];",
      "168:  ep2_t t1[1 << (EP_WIDTH - 2)];",
      "170:  RLC_TRY {",
      "171:   gen = (t == NULL ? 0 : 1);",
      "",
      "[Removed Lines]",
      "165:  int i, l, l0, l1, n0, n1, w, gen;",
      "",
      "[Added Lines]",
      "165:  int i, n0, n1, w, gen;",
      "169:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "289:  ep2_t t1[1 << (EP_WIDTH / 2)];",
      "290:  ep2_t t[1 << EP_WIDTH];",
      "291:  bn_t n, _k, _m;",
      "293:  uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];",
      "295:  bn_null(n);",
      "",
      "[Removed Lines]",
      "292:  int l0, l1, w = EP_WIDTH / 2;",
      "",
      "[Added Lines]",
      "293:  size_t l0, l1, w = EP_WIDTH / 2;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "451:   const bn_t m) {",
      "452:  bn_t n, _k, _m;",
      "453:  ep2_t t[5];",
      "455:  int8_t jsf[2 * (RLC_FP_BITS + 1)];",
      "457:  if (bn_is_zero(k) || ep2_is_infty(p)) {",
      "458:   ep2_mul(r, q, m);",
      "",
      "[Removed Lines]",
      "454:  int i, l, u_i, offset;",
      "",
      "[Added Lines]",
      "455:  int i, u_i, offset;",
      "457:  size_t l;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "601:  }",
      "602: }",
      "605:  ep2_t t;",
      "606:  int max;",
      "",
      "[Removed Lines]",
      "604: void ep2_mul_sim_dig(ep2_t r, const ep2_t p[], const dig_t k[], int len) {",
      "",
      "[Added Lines]",
      "606: void ep2_mul_sim_dig(ep2_t r, const ep2_t p[], const dig_t k[], size_t len) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "635:  }",
      "636: }",
      "641:  bn_t _k[4], q, x;",
      "642:  int8_t ptr, *naf = RLC_ALLOCA(int8_t, 4 * n * len);",
      "644:  if (n == 0) {",
      "645:   ep2_set_infty(r);",
      "",
      "[Removed Lines]",
      "638: void ep2_mul_sim_lot(ep2_t r, const ep2_t p[], const bn_t k[], int n) {",
      "639:  const int len = RLC_FP_BITS + 1;",
      "640:  int i, j, m, l, _l[4];",
      "",
      "[Added Lines]",
      "640: void ep2_mul_sim_lot(ep2_t r, const ep2_t p[], const bn_t k[], size_t n) {",
      "641:  const size_t len = RLC_FP_BITS + 1;",
      "642:  int i, j, m;",
      "645:  size_t l, _l[4];",
      "",
      "---------------"
    ],
    "src/epx/relic_ep2_util.c||src/epx/relic_ep2_util.c": [
      "File: src/epx/relic_ep2_util.c -> src/epx/relic_ep2_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:  return size;",
      "244: }",
      "247:  if (len == 1) {",
      "248:   if (bin[0] == 0) {",
      "249:    ep2_set_infty(a);",
      "",
      "[Removed Lines]",
      "246: void ep2_read_bin(ep2_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "246: void ep2_read_bin(ep2_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "293:  }",
      "294: }",
      "297:  ep2_t t;",
      "299:  ep2_null(t);",
      "",
      "[Removed Lines]",
      "296: void ep2_write_bin(uint8_t *bin, int len, const ep2_t a, int pack) {",
      "",
      "[Added Lines]",
      "296: void ep2_write_bin(uint8_t *bin, size_t len, const ep2_t a, int pack) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep4_map.c||src/epx/relic_ep4_map.c": [
      "File: src/epx/relic_ep4_map.c -> src/epx/relic_ep4_map.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:  bn_t x;",
      "42:  fp4_t t0;",
      "43:  uint8_t digest[RLC_MD_LEN];",
      "",
      "[Removed Lines]",
      "40: void ep4_map(ep4_t p, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "40: void ep4_map(ep4_t p, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep4_mul.c||src/epx/relic_ep4_mul.c": [
      "File: src/epx/relic_ep4_mul.c -> src/epx/relic_ep4_mul.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #if defined(EP_ENDOM)",
      "43: static void ep4_mul_glv_imp(ep4_t r, const ep4_t p, const bn_t k) {",
      "45:  bn_t n, _k[8], u, v;",
      "46:  int8_t naf[8][RLC_FP_BITS + 1];",
      "47:  ep4_t q[8];",
      "49:  bn_null(n);",
      "50:  bn_null(u);",
      "",
      "[Removed Lines]",
      "44:  int sign, i, j, l, _l[8];",
      "",
      "[Added Lines]",
      "44:  int sign, i, j;",
      "48:  size_t l, _l[8];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "133: static void ep4_mul_naf_imp(ep4_t r, const ep4_t p, const bn_t k) {",
      "135:  int8_t naf[RLC_FP_BITS + 1];",
      "136:  ep4_t t[1 << (EP_WIDTH - 2)];",
      "138:  RLC_TRY {",
      "",
      "[Removed Lines]",
      "134:  int l, i, n;",
      "",
      "[Added Lines]",
      "135:  int i, n;",
      "138:  size_t l;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "230: void ep4_mul_slide(ep4_t r, const ep4_t p, const bn_t k) {",
      "231:  ep4_t t[1 << (EP_WIDTH - 1)], q;",
      "233:  uint8_t win[RLC_FP_BITS + 1];",
      "235:  ep4_null(q);",
      "",
      "[Removed Lines]",
      "232:  int i, j, l;",
      "",
      "[Added Lines]",
      "235:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "240:  }",
      "242:  RLC_TRY {",
      "244:    ep4_null(t[i]);",
      "245:    ep4_new(t[i]);",
      "246:   }",
      "",
      "[Removed Lines]",
      "243:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "[Added Lines]",
      "245:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i ++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "255: #endif",
      "259:    ep4_add(t[i], t[i - 1], q);",
      "260:   }",
      "",
      "[Removed Lines]",
      "258:   for (i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "260:   for (size_t i = 1; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "266:   ep4_set_infty(q);",
      "267:   l = RLC_FP_BITS + 1;",
      "268:   bn_rec_slw(win, &l, k, EP_WIDTH);",
      "270:    if (win[i] == 0) {",
      "271:     ep4_dbl(q, q);",
      "272:    } else {",
      "274:      ep4_dbl(q, q);",
      "275:     }",
      "276:     ep4_add(q, q, t[win[i] >> 1]);",
      "",
      "[Removed Lines]",
      "269:   for (i = 0; i < l; i++) {",
      "273:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "271:   for (size_t i = 0; i < l; i++) {",
      "275:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "286:   RLC_THROW(ERR_CAUGHT);",
      "287:  }",
      "288:  RLC_FINALLY {",
      "290:    ep4_free(t[i]);",
      "291:   }",
      "292:   ep4_free(q);",
      "",
      "[Removed Lines]",
      "289:   for (i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "291:   for (size_t i = 0; i < (1 << (EP_WIDTH - 1)); i++) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep4_mul_fix.c||src/epx/relic_ep4_mul_fix.c": [
      "File: src/epx/relic_ep4_mul_fix.c -> src/epx/relic_ep4_mul_fix.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "47: static void ep4_mul_pre_ordin(ep4_t *t, const ep4_t p) {",
      "50:  ep4_dbl(t[0], p);",
      "51: #if defined(EP_MIXED)",
      "52:  ep4_norm(t[0], t[0]);",
      "",
      "[Removed Lines]",
      "48:  int i;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55: #if EP_DEPTH > 2",
      "56:  ep4_add(t[1], t[0], p);",
      "58:   ep4_add(t[i], t[i - 1], t[0]);",
      "59:  }",
      "61: #if defined(EP_MIXED)",
      "63:   ep4_norm(t[i], t[i]);",
      "64:  }",
      "65: #endif",
      "",
      "[Removed Lines]",
      "57:  for (i = 2; i < (1 << (EP_DEPTH - 2)); i++) {",
      "62:  for (i = 1; i < (1 << (EP_DEPTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "55:  for (int i = 2; i < (1 << (EP_DEPTH - 2)); i++) {",
      "60:  for (int i = 1; i < (1 << (EP_DEPTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79: static void ep4_mul_fix_ordin(ep4_t r, const ep4_t *table, const bn_t k) {",
      "81:  int8_t naf[2 * RLC_FP_BITS + 1], *t;",
      "83:  if (bn_is_zero(k)) {",
      "84:   ep4_set_infty(r);",
      "",
      "[Removed Lines]",
      "80:  int len, i, n;",
      "",
      "[Added Lines]",
      "79:  size_t len;",
      "80:  int n;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "92:  t = naf + len - 1;",
      "93:  ep4_set_infty(r);",
      "95:   ep4_dbl(r, r);",
      "97:   n = *t;",
      "",
      "[Removed Lines]",
      "94:  for (i = len - 1; i >= 0; i--, t--) {",
      "",
      "[Added Lines]",
      "93:  for (int i = len - 1; i >= 0; i--, t--) {",
      "",
      "---------------"
    ],
    "src/epx/relic_ep4_mul_sim.c||src/epx/relic_ep4_mul_sim.c": [
      "File: src/epx/relic_ep4_mul_sim.c -> src/epx/relic_ep4_mul_sim.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: static void ep4_mul_sim_plain(ep4_t r, const ep4_t p, const bn_t k,",
      "54:   const ep4_t q, const bn_t m, ep4_t *t) {",
      "56:  int8_t naf0[2 * RLC_FP_BITS + 1], naf1[2 * RLC_FP_BITS + 1], *_k, *_m;",
      "57:  ep4_t t0[1 << (EP_WIDTH - 2)];",
      "58:  ep4_t t1[1 << (EP_WIDTH - 2)];",
      "60:  RLC_TRY {",
      "61:   gen = (t == NULL ? 0 : 1);",
      "",
      "[Removed Lines]",
      "55:  int i, l, l0, l1, n0, n1, w, gen;",
      "",
      "[Added Lines]",
      "55:  int i, n0, n1, w, gen;",
      "59:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "177:  ep4_t t1[1 << (EP_WIDTH / 2)];",
      "178:  ep4_t t[1 << EP_WIDTH];",
      "179:  bn_t n;",
      "181:  uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];",
      "183:  bn_null(n);",
      "",
      "[Removed Lines]",
      "180:  int l0, l1, w = EP_WIDTH / 2;",
      "",
      "[Added Lines]",
      "181:  size_t l0, l1, w = EP_WIDTH / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "293: void ep4_mul_sim_joint(ep4_t r, const ep4_t p, const bn_t k, const ep4_t q,",
      "294:   const bn_t m) {",
      "295:  ep4_t t[5];",
      "297:  int8_t jsf[4 * (RLC_FP_BITS + 1)];",
      "299:  if (bn_is_zero(k) || ep4_is_infty(p)) {",
      "300:   ep4_mul(r, q, m);",
      "",
      "[Removed Lines]",
      "296:  int i, l, u_i, offset;",
      "",
      "[Added Lines]",
      "297:  int i, u_i, offset;",
      "299:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "396:  }",
      "397: }",
      "400:  ep4_t t;",
      "401:  int max;",
      "",
      "[Removed Lines]",
      "399: void ep4_mul_sim_dig(ep4_t r, const ep4_t p[], const dig_t k[], int len) {",
      "",
      "[Added Lines]",
      "401: void ep4_mul_sim_dig(ep4_t r, const ep4_t p[], const dig_t k[], size_t len) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "430:  }",
      "431: }",
      "436:  bn_t _k[8], q, x;",
      "437:  int8_t *naf = RLC_ALLOCA(int8_t, 8 * n * len);",
      "439:  bn_null(q);",
      "440:  bn_null(x);",
      "",
      "[Removed Lines]",
      "433: void ep4_mul_sim_lot(ep4_t r, const ep4_t p[], const bn_t k[], int n) {",
      "434:  const int len = RLC_FP_BITS + 1;",
      "435:  int i, j, m, l, *_l = RLC_ALLOCA(int, 8 * n);",
      "",
      "[Added Lines]",
      "435: void ep4_mul_sim_lot(ep4_t r, const ep4_t p[], const bn_t k[], size_t n) {",
      "436:  const size_t len = RLC_FP_BITS + 1;",
      "437:  int i, j, m;",
      "440:  size_t l, *_l = RLC_ALLOCA(size_t, 8 * n);",
      "",
      "---------------"
    ],
    "src/epx/relic_ep4_util.c||src/epx/relic_ep4_util.c": [
      "File: src/epx/relic_ep4_util.c -> src/epx/relic_ep4_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "254:  return size;",
      "255: }",
      "258:  if (len == 1) {",
      "259:   if (bin[0] == 0) {",
      "260:    ep4_set_infty(a);",
      "",
      "[Removed Lines]",
      "257: void ep4_read_bin(ep4_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "257: void ep4_read_bin(ep4_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "288:  }",
      "289: }",
      "292:  ep4_t t;",
      "294:  ep4_null(t);",
      "",
      "[Removed Lines]",
      "291: void ep4_write_bin(uint8_t *bin, int len, const ep4_t a, int pack) {",
      "",
      "[Added Lines]",
      "291: void ep4_write_bin(uint8_t *bin, size_t len, const ep4_t a, int pack) {",
      "",
      "---------------"
    ],
    "src/fb/relic_fb_exp.c||src/fb/relic_fb_exp.c": [
      "File: src/fb/relic_fb_exp.c -> src/fb/relic_fb_exp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #if FB_EXP == BASIC || !defined(STRIP)",
      "46: void fb_exp_basic(fb_t c, const fb_t a, const bn_t b) {",
      "48:  fb_t r;",
      "50:  if (bn_is_zero(b)) {",
      "",
      "[Removed Lines]",
      "47:  int i, l;",
      "",
      "[Added Lines]",
      "47:  size_t l;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:   fb_copy(r, a);",
      "65:    fb_sqr(r, r);",
      "66:    if (bn_get_bit(b, i)) {",
      "67:     fb_mul(r, r, a);",
      "",
      "[Removed Lines]",
      "64:   for (i = l - 2; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "64:   for (int i = l - 2; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "89: void fb_exp_slide(fb_t c, const fb_t a, const bn_t b) {",
      "90:  fb_t t[1 << (FB_WIDTH - 1)], r;",
      "92:  uint8_t win[RLC_FB_BITS + 1];",
      "94:  fb_null(r);",
      "",
      "[Removed Lines]",
      "91:  int i, j, l;",
      "",
      "[Added Lines]",
      "92:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "104:   fb_null(t[i]);",
      "105:  }",
      "107:  RLC_TRY {",
      "109:    fb_new(t[i]);",
      "110:   }",
      "111:   fb_new(r);",
      "",
      "[Removed Lines]",
      "103:  for (i = 0; i < (1 << (FB_WIDTH - 1)); i++) {",
      "108:   for (i = 0; i < (1 << (FB_WIDTH - 1)); i ++) {",
      "",
      "[Added Lines]",
      "103:  for (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i++) {",
      "108:   for (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i ++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "114:   fb_sqr(r, a);",
      "118:    fb_mul(t[i], t[i - 1], r);",
      "119:   }",
      "121:   fb_set_dig(r, 1);",
      "122:   l = RLC_FB_BITS + 1;",
      "123:   bn_rec_slw(win, &l, b, FB_WIDTH);",
      "125:    if (win[i] == 0) {",
      "126:     fb_sqr(r, r);",
      "127:    } else {",
      "129:      fb_sqr(r, r);",
      "130:     }",
      "131:     fb_mul(r, r, t[win[i] >> 1]);",
      "",
      "[Removed Lines]",
      "117:   for (i = 1; i < 1 << (FB_WIDTH - 1); i++) {",
      "124:   for (i = 0; i < l; i++) {",
      "128:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "117:   for (size_t i = 1; i < 1 << (FB_WIDTH - 1); i++) {",
      "124:   for (size_t i = 0; i < l; i++) {",
      "128:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "142:   RLC_THROW(ERR_CAUGHT);",
      "143:  }",
      "144:  RLC_FINALLY {",
      "146:    fb_free(t[i]);",
      "147:   }",
      "148:   fb_free(r);",
      "",
      "[Removed Lines]",
      "145:   for (i = 0; i < (1 << (FB_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "145:   for (size_t i = 0; i < (1 << (FB_WIDTH - 1)); i++) {",
      "",
      "---------------"
    ],
    "src/fb/relic_fb_util.c||src/fb/relic_fb_util.c": [
      "File: src/fb/relic_fb_util.c -> src/fb/relic_fb_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:  while (radix > 0) {",
      "50:   if (radix != 1 && radix % 2 == 1)",
      "51:    return 0;",
      "",
      "[Removed Lines]",
      "48: static int valid_radix(int radix) {",
      "",
      "[Added Lines]",
      "48: static int valid_radix(unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64:  int l = 0;",
      "66:  while (radix > 0) {",
      "",
      "[Removed Lines]",
      "63: static int log_radix(int radix) {",
      "",
      "[Added Lines]",
      "63: static int log_radix(unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:  return !t;",
      "94: }",
      "97:  int d;",
      "99:  RLC_RIP(bit, d, bit);",
      "",
      "[Removed Lines]",
      "96: int fb_get_bit(const fb_t a, int bit) {",
      "",
      "[Added Lines]",
      "96: int fb_get_bit(const fb_t a, size_t bit) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "101:  return (a[d] >> bit) & 1;",
      "102: }",
      "105:  int d;",
      "106:  dig_t mask;",
      "",
      "[Removed Lines]",
      "104: void fb_set_bit(fb_t a, int bit, int value) {",
      "",
      "[Added Lines]",
      "104: void fb_set_bit(fb_t a, size_t bit, int value) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "116:  }",
      "117: }",
      "120:  int i = RLC_FB_DIGS - 1;",
      "122:  while (i >= 0 && a[i] == 0) {",
      "",
      "[Removed Lines]",
      "119: int fb_bits(const fb_t a) {",
      "",
      "[Added Lines]",
      "119: size_t fb_bits(const fb_t a) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "136: }",
      "138: void fb_rand(fb_t a) {",
      "141:  rand_bytes((uint8_t *)a, RLC_FB_DIGS * sizeof(dig_t));",
      "",
      "[Removed Lines]",
      "139:  int bits, digits;",
      "",
      "[Added Lines]",
      "139:  size_t bits, digits;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "148: }",
      "150: void fb_print(const fb_t a) {",
      "154:  (void)a;",
      "156:   util_print_dig(a[i], 1);",
      "157:   util_print(\" \");",
      "158:  }",
      "",
      "[Removed Lines]",
      "151:  int i;",
      "155:  for (i = RLC_FB_DIGS - 1; i > 0; i--) {",
      "",
      "[Added Lines]",
      "153:  for (int i = RLC_FB_DIGS - 1; i > 0; i--) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "160:  util_print(\"\\n\");",
      "161: }",
      "164:  bn_t t;",
      "167:  bn_null(t);",
      "",
      "[Removed Lines]",
      "163: int fb_size_str(const fb_t a, int radix) {",
      "165:  int digits = 0;",
      "",
      "[Added Lines]",
      "161: size_t fb_size_str(const fb_t a, unsigned int radix) {",
      "163:  size_t digits = 0;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "188:  return digits;",
      "189: }",
      "192:  bn_t t;",
      "194:  bn_null(t);",
      "",
      "[Removed Lines]",
      "191: void fb_read_str(fb_t a, const char *str, int len, int radix) {",
      "",
      "[Added Lines]",
      "189: void fb_read_str(fb_t a, const char *str, size_t len, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "217:  }",
      "218: }",
      "221:  fb_t t;",
      "222:  int d, l, i, j;",
      "223:  char c;",
      "",
      "[Removed Lines]",
      "220: void fb_write_str(char *str, int len, const fb_t a, int radix) {",
      "",
      "[Added Lines]",
      "218: void fb_write_str(char *str, size_t len, const fb_t a, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "276:  }",
      "277: }",
      "280:  bn_t t;",
      "282:  bn_null(t);",
      "",
      "[Removed Lines]",
      "279: void fb_read_bin(fb_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "277: void fb_read_bin(fb_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "301:  }",
      "302: }",
      "305:  bn_t t;",
      "307:  bn_null(t);",
      "",
      "[Removed Lines]",
      "304: void fb_write_bin(uint8_t *bin, int len, const fb_t a) {",
      "",
      "[Added Lines]",
      "302: void fb_write_bin(uint8_t *bin, size_t len, const fb_t a) {",
      "",
      "---------------"
    ],
    "src/fp/relic_fp_exp.c||src/fp/relic_fp_exp.c": [
      "File: src/fp/relic_fp_exp.c -> src/fp/relic_fp_exp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: #if FP_EXP == BASIC || !defined(STRIP)",
      "41: void fp_exp_basic(fp_t c, const fp_t a, const bn_t b) {",
      "43:  fp_t r;",
      "45:  fp_null(r);",
      "",
      "[Removed Lines]",
      "42:  int i, l;",
      "",
      "[Added Lines]",
      "42:  size_t l;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:   fp_copy(r, a);",
      "60:    fp_sqr(r, r);",
      "61:    if (bn_get_bit(b, i)) {",
      "62:     fp_mul(r, r, a);",
      "",
      "[Removed Lines]",
      "59:   for (i = l - 2; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "59:   for (int i = l - 2; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "84: void fp_exp_slide(fp_t c, const fp_t a, const bn_t b) {",
      "85:  fp_t t[1 << (FP_WIDTH - 1)], r;",
      "87:  uint8_t win[RLC_FP_BITS + 1];",
      "89:  fp_null(r);",
      "",
      "[Removed Lines]",
      "86:  int i, j, l;",
      "",
      "[Added Lines]",
      "87:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "99:   fp_null(t[i]);",
      "100:  }",
      "102:  RLC_TRY {",
      "104:    fp_new(t[i]);",
      "105:   }",
      "106:   fp_new(r);",
      "",
      "[Removed Lines]",
      "98:  for (i = 0; i < (1 << (FP_WIDTH - 1)); i++) {",
      "103:   for (i = 0; i < (1 << (FP_WIDTH - 1)); i ++) {",
      "",
      "[Added Lines]",
      "98:  for (size_t i = 0; i < (1 << (FP_WIDTH - 1)); i++) {",
      "103:   for (size_t i = 0; i < (1 << (FP_WIDTH - 1)); i ++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "109:   fp_sqr(r, a);",
      "113:    fp_mul(t[i], t[i - 1], r);",
      "114:   }",
      "116:   fp_set_dig(r, 1);",
      "117:   l = RLC_FP_BITS + 1;",
      "118:   bn_rec_slw(win, &l, b, FP_WIDTH);",
      "120:    if (win[i] == 0) {",
      "121:     fp_sqr(r, r);",
      "122:    } else {",
      "124:      fp_sqr(r, r);",
      "125:     }",
      "126:     fp_mul(r, r, t[win[i] >> 1]);",
      "",
      "[Removed Lines]",
      "112:   for (i = 1; i < 1 << (FP_WIDTH - 1); i++) {",
      "119:   for (i = 0; i < l; i++) {",
      "123:     for (j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "[Added Lines]",
      "112:   for (size_t i = 1; i < 1 << (FP_WIDTH - 1); i++) {",
      "119:   for (size_t i = 0; i < l; i++) {",
      "123:     for (size_t j = 0; j < util_bits_dig(win[i]); j++) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "137:   RLC_THROW(ERR_CAUGHT);",
      "138:  }",
      "139:  RLC_FINALLY {",
      "141:    fp_free(t[i]);",
      "142:   }",
      "143:   fp_free(r);",
      "",
      "[Removed Lines]",
      "140:   for (i = 0; i < (1 << (FP_WIDTH - 1)); i++) {",
      "",
      "[Added Lines]",
      "140:   for (size_t i = 0; i < (1 << (FP_WIDTH - 1)); i++) {",
      "",
      "---------------"
    ],
    "src/fp/relic_fp_prime.c||src/fp/relic_fp_prime.c": [
      "File: src/fp/relic_fp_prime.c -> src/fp/relic_fp_prime.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "296: void fp_prime_set_pairf(const bn_t x, int pairf) {",
      "297:  bn_t p, t0, t1;",
      "298:  ctx_t *ctx = core_get();",
      "300:  int8_t s[RLC_FP_BITS + 1];",
      "302:  bn_null(p);",
      "",
      "[Removed Lines]",
      "299:  int len = bn_bits(x) + 1;",
      "",
      "[Added Lines]",
      "299:  size_t len = bn_bits(x) + 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "459:  }",
      "460: }",
      "463:  bn_t p, t;",
      "465:  bn_null(p);",
      "",
      "[Removed Lines]",
      "462: void fp_prime_set_pmers(const int *f, int len) {",
      "",
      "[Added Lines]",
      "462: void fp_prime_set_pmers(const int *f, size_t len) {",
      "",
      "---------------"
    ],
    "src/fp/relic_fp_util.c||src/fp/relic_fp_util.c": [
      "File: src/fp/relic_fp_util.c -> src/fp/relic_fp_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:  return 0;",
      "63: }",
      "66:  int d;",
      "68:  RLC_RIP(bit, d, bit);",
      "",
      "[Removed Lines]",
      "65: int fp_get_bit(const fp_t a, int bit) {",
      "",
      "[Added Lines]",
      "65: int fp_get_bit(const fp_t a, size_t bit) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "70:  return (a[d] >> bit) & 1;",
      "71: }",
      "74:  int d;",
      "75:  dig_t mask;",
      "",
      "[Removed Lines]",
      "73: void fp_set_bit(fp_t a, int bit, int value) {",
      "",
      "[Added Lines]",
      "73: void fp_set_bit(fp_t a, size_t bit, int value) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "85:  }",
      "86: }",
      "89:  int i = RLC_FP_DIGS - 1;",
      "91:  while (i >= 0 && a[i] == 0) {",
      "",
      "[Removed Lines]",
      "88: int fp_bits(const fp_t a) {",
      "",
      "[Added Lines]",
      "88: size_t fp_bits(const fp_t a) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "157:  }",
      "158: }",
      "161:  bn_t t;",
      "164:  bn_null(t);",
      "",
      "[Removed Lines]",
      "160: int fp_size_str(const fp_t a, int radix) {",
      "162:  int digits = 0;",
      "",
      "[Added Lines]",
      "160: size_t fp_size_str(const fp_t a, unsigned int radix) {",
      "162:  size_t digits = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "179:  return digits;",
      "180: }",
      "183:  bn_t t;",
      "185:  bn_null(t);",
      "",
      "[Removed Lines]",
      "182: void fp_read_str(fp_t a, const char *str, int len, int radix) {",
      "",
      "[Added Lines]",
      "182: void fp_read_str(fp_t a, const char *str, size_t len, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "208:  }",
      "209: }",
      "212:  bn_t t;",
      "214:  bn_null(t);",
      "",
      "[Removed Lines]",
      "211: void fp_write_str(char *str, int len, const fp_t a, int radix) {",
      "",
      "[Added Lines]",
      "211: void fp_write_str(char *str, size_t len, const fp_t a, unsigned int radix) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "227:  }",
      "228: }",
      "231:  bn_t t;",
      "233:  bn_null(t);",
      "",
      "[Removed Lines]",
      "230: void fp_read_bin(fp_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "230: void fp_read_bin(fp_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "253:     } else {",
      "254:      fp_prime_conv(a, t);",
      "255:     }",
      "257:   }",
      "258:  }",
      "259:  RLC_CATCH_ANY {",
      "",
      "[Removed Lines]",
      "256:    }",
      "",
      "[Added Lines]",
      "256:    }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "264:  }",
      "265: }",
      "268:  bn_t t;",
      "270:  bn_null(t);",
      "",
      "[Removed Lines]",
      "267: void fp_write_bin(uint8_t *bin, int len, const fp_t a) {",
      "",
      "[Added Lines]",
      "267: void fp_write_bin(uint8_t *bin, size_t len, const fp_t a) {",
      "",
      "---------------"
    ],
    "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c": [
      "File: src/fpx/relic_fpx_cyc.c -> src/fpx/relic_fpx_cyc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "84: void fp2_exp_cyc(fp2_t c, const fp2_t a, const bn_t b) {",
      "85:  fp2_t r, s, t[1 << (FP_WIDTH - 2)];",
      "87:  int8_t naf[RLC_FP_BITS + 1], *k;",
      "89:  if (bn_is_zero(b)) {",
      "90:   return fp2_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "86:  int i, l;",
      "",
      "[Added Lines]",
      "87:  size_t l;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:  RLC_TRY {",
      "97:   fp2_new(r);",
      "98:   fp2_new(s);",
      "100:    fp2_null(t[i]);",
      "101:    fp2_new(t[i]);",
      "102:   }",
      "",
      "[Removed Lines]",
      "99:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "[Added Lines]",
      "99:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "117:   k = naf + l - 1;",
      "120:    fp2_sqr(r, r);",
      "122:    if (*k > 0) {",
      "",
      "[Removed Lines]",
      "119:   for (i = l - 1; i >= 0; i--, k--) {",
      "",
      "[Added Lines]",
      "119:   for (int i = l - 1; i >= 0; i--, k--) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "140:  RLC_FINALLY {",
      "141:   fp2_free(r);",
      "142:   fp2_free(s);",
      "144:    fp2_free(t[i]);",
      "145:   }",
      "146:  }",
      "",
      "[Removed Lines]",
      "143:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "143:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "194: void fp8_exp_cyc(fp8_t c, const fp8_t a, const bn_t b) {",
      "195:  fp8_t r, s, t[1 << (FP_WIDTH - 2)];",
      "197:  int8_t naf[RLC_FP_BITS + 1], *k;",
      "199:  if (bn_is_zero(b)) {",
      "200:   return fp8_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "196:  int i, l;",
      "",
      "[Added Lines]",
      "197:  size_t l;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "206:  RLC_TRY {",
      "207:   fp8_new(r);",
      "208:   fp8_new(s);",
      "210:    fp8_null(t[i]);",
      "211:    fp8_new(t[i]);",
      "212:   }",
      "",
      "[Removed Lines]",
      "209:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "[Added Lines]",
      "209:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "227:   k = naf + l - 1;",
      "230:    fp8_sqr_cyc(r, r);",
      "232:    if (*k > 0) {",
      "",
      "[Removed Lines]",
      "229:   for (i = l - 1; i >= 0; i--, k--) {",
      "",
      "[Added Lines]",
      "229:   for (int i = l - 1; i >= 0; i--, k--) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "250:  RLC_FINALLY {",
      "251:   fp8_free(r);",
      "252:   fp8_free(s);",
      "254:    fp8_free(t[i]);",
      "255:   }",
      "256:  }",
      "",
      "[Removed Lines]",
      "253:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "253:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "470: }",
      "472: void fp12_exp_cyc(fp12_t c, const fp12_t a, const bn_t b) {",
      "475:  if (bn_is_zero(b)) {",
      "476:   return fp12_set_dig(c, 1);",
      "477:  }",
      "479:  if ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {",
      "481:   int8_t naf[4][RLC_FP_BITS + 1];",
      "482:   fp12_t t[4];",
      "483:   bn_t _b[4], n, u;",
      "",
      "[Removed Lines]",
      "473:  int i, j, k, l, w = bn_ham(b);",
      "480:   int _l[4];",
      "",
      "[Added Lines]",
      "473:  size_t j, k, l, w = bn_ham(b);",
      "480:   size_t _l[4];",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "488:   RLC_TRY {",
      "489:    bn_new(n);",
      "490:    bn_new(u);",
      "492:     bn_null(_b[i]);",
      "493:     bn_new(_b[i]);",
      "494:     fp12_null(t[i]);",
      "",
      "[Removed Lines]",
      "491:    for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "491:    for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "506:     fp12_frb(t[3], t[2], 1);",
      "508:     l = 0;",
      "510:      if (bn_sign(_b[i]) == RLC_NEG) {",
      "511:       fp12_inv_cyc(t[i], t[i]);",
      "512:      }",
      "",
      "[Removed Lines]",
      "509:     for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "509:     for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "516:     }",
      "518:     fp12_set_dig(c, 1);",
      "520:      fp12_sqr_cyc(c, c);",
      "522:       if (naf[j][i] > 0) {",
      "523:        fp12_mul(c, c, t[j]);",
      "524:       }",
      "",
      "[Removed Lines]",
      "519:     for (i = l - 1; i >= 0; i--) {",
      "521:      for (j = 0; j < 4; j++) {",
      "",
      "[Added Lines]",
      "519:     for (int i = l - 1; i >= 0; i--) {",
      "521:      for (int j = 0; j < 4; j++) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "532:    } else {",
      "533:     fp12_copy(t[0], a);",
      "536:      fp12_sqr_cyc(t[0], t[0]);",
      "537:      if (bn_get_bit(b, i)) {",
      "538:       fp12_mul(t[0], t[0], a);",
      "",
      "[Removed Lines]",
      "535:     for (i = bn_bits(b) - 2; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "535:     for (int i = bn_bits(b) - 2; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "551:   RLC_FINALLY {",
      "552:    bn_free(n);",
      "553:    bn_free(u);",
      "555:     bn_free(_b[i]);",
      "556:     fp12_free(t[i]);",
      "557:    }",
      "",
      "[Removed Lines]",
      "554:    for (i = 0; i < 4; i++) {",
      "",
      "[Added Lines]",
      "554:    for (int i = 0; i < 4; i++) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "565:    if (u == NULL) {",
      "566:     RLC_THROW(ERR_NO_MEMORY);",
      "567:    }",
      "569:     fp12_null(u[i]);",
      "570:     fp12_new(u[i]);",
      "571:    }",
      "",
      "[Removed Lines]",
      "568:    for (i = 0; i < w; i++) {",
      "",
      "[Added Lines]",
      "568:    for (int i = 0; i < w; i++) {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "574:    j = 0;",
      "575:    fp12_copy(t, a);",
      "577:     fp12_sqr_pck(t, t);",
      "578:     if (bn_get_bit(b, i)) {",
      "579:      fp12_copy(u[j++], t);",
      "",
      "[Removed Lines]",
      "576:    for (i = 1; i < bn_bits(b); i++) {",
      "",
      "[Added Lines]",
      "576:    for (size_t i = 1; i < bn_bits(b); i++) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "596:     fp12_copy(c, u[0]);",
      "597:    }",
      "600:     fp12_mul(c, c, u[i]);",
      "601:    }",
      "",
      "[Removed Lines]",
      "599:    for (i = j; i < k; i++) {",
      "",
      "[Added Lines]",
      "599:    for (size_t i = j; i < k; i++) {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "608:    RLC_THROW(ERR_CAUGHT);",
      "609:   }",
      "610:   RLC_FINALLY {",
      "612:     fp12_free(u[i]);",
      "613:    }",
      "614:    fp12_free(t);",
      "",
      "[Removed Lines]",
      "611:    for (i = 0; i < w; i++) {",
      "",
      "[Added Lines]",
      "611:    for (size_t i = 0; i < w; i++) {",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "618: }",
      "620: void fp2_exp_cyc_sim(fp2_t e, const fp2_t a, const bn_t b, const fp2_t c, const bn_t d) {",
      "622:  int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;",
      "623:  fp2_t r, t0[1 << (EP_WIDTH - 2)];",
      "624:  fp2_t s, t1[1 << (EP_WIDTH - 2)];",
      "626:  if (bn_is_zero(b)) {",
      "627:   return fp2_exp_cyc(e, c, d);",
      "",
      "[Removed Lines]",
      "621:  int i, l, n0, n1, l0, l1;",
      "",
      "[Added Lines]",
      "621:  int n0, n1;",
      "625:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "637:  RLC_TRY {",
      "638:   fp2_new(r);",
      "639:   fp2_new(s);",
      "641:    fp2_null(t0[i]);",
      "642:    fp2_null(t1[i]);",
      "643:    fp2_new(t0[i]);",
      "",
      "[Removed Lines]",
      "640:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "[Added Lines]",
      "641:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "667:   l = RLC_MAX(l0, l1);",
      "668:   if (bn_sign(b) == RLC_NEG) {",
      "670:     naf0[i] = -naf0[i];",
      "671:    }",
      "672:   }",
      "673:   if (bn_sign(d) == RLC_NEG) {",
      "675:     naf1[i] = -naf1[i];",
      "676:    }",
      "677:   }",
      "",
      "[Removed Lines]",
      "669:    for (i = 0; i < l0; i++) {",
      "674:    for (i = 0; i < l1; i++) {",
      "",
      "[Added Lines]",
      "670:    for (size_t i = 0; i < l0; i++) {",
      "675:    for (size_t i = 0; i < l1; i++) {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "680:   _m = naf1 + l - 1;",
      "682:   fp2_set_dig(r, 1);",
      "684:    fp2_sqr(r, r);",
      "686:    n0 = *_k;",
      "",
      "[Removed Lines]",
      "683:   for (i = l - 1; i >= 0; i--, _k--, _m--) {",
      "",
      "[Added Lines]",
      "684:   for (int i = l - 1; i >= 0; i--, _k--, _m--) {",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "710:  RLC_FINALLY {",
      "711:   fp2_free(r);",
      "712:   fp2_free(s);",
      "714:    fp2_free(t0[i]);",
      "715:    fp2_free(t1[i]);",
      "716:   }",
      "",
      "[Removed Lines]",
      "713:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "",
      "[Added Lines]",
      "714:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "820:  }",
      "821: }",
      "825:     fp12_t t, *u = RLC_ALLOCA(fp12_t, w);",
      "827:  if (len == 0) {",
      "",
      "[Removed Lines]",
      "823: void fp12_exp_cyc_sps(fp12_t c, const fp12_t a, const int *b, int len, int sign) {",
      "824:  int i, j, k, w = len;",
      "",
      "[Added Lines]",
      "824: void fp12_exp_cyc_sps(fp12_t c, const fp12_t a, const int *b, size_t len,",
      "825:   int sign) {",
      "826:  size_t i, j, k, w = len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1097: }",
      "1099: void fp24_exp_cyc(fp24_t c, const fp24_t a, const bn_t b) {",
      "1102:  if (bn_is_zero(b)) {",
      "1103:   fp24_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "1100:  int i, j, k, w = bn_ham(b);",
      "",
      "[Added Lines]",
      "1102:  size_t j, k, w = bn_ham(b);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1105:  }",
      "1107:  if ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {",
      "1109:   int8_t naf[8][RLC_FP_BITS + 1];",
      "1110:   fp24_t t[8];",
      "1111:   bn_t _b[8], n, x;",
      "",
      "[Removed Lines]",
      "1108:   int l, _l[8];",
      "",
      "[Added Lines]",
      "1110:   size_t l, _l[8];",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1116:   RLC_TRY {",
      "1117:    bn_new(n);",
      "1118:    bn_new(x);",
      "1120:     bn_null(_b[i]);",
      "1121:     bn_new(_b[i]);",
      "1122:     fp24_null(t[i]);",
      "",
      "[Removed Lines]",
      "1119:    for (i = 0; i < 8; i++) {",
      "",
      "[Added Lines]",
      "1121:    for (int i = 0; i < 8; i++) {",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1131:     l = 0;",
      "1133:     fp24_copy(t[0], a);",
      "1135:      _l[i] = RLC_FP_BITS + 1;",
      "1136:      bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
      "1137:      l = RLC_MAX(l, _l[i]);",
      "",
      "[Removed Lines]",
      "1134:     for (i = 0; i < 8; i++) {",
      "",
      "[Added Lines]",
      "1136:     for (int i = 0; i < 8; i++) {",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1140:      }",
      "1141:     }",
      "1144:      if (bn_sign(_b[i]) == RLC_NEG) {",
      "1145:       fp24_inv_cyc(t[i], t[i]);",
      "1146:      }",
      "1147:     }",
      "1149:     fp24_set_dig(c, 1);",
      "1151:      fp24_sqr_cyc(c, c);",
      "1153:       if (naf[j][i] > 0) {",
      "1154:        fp24_mul(c, c, t[j]);",
      "1155:       }",
      "",
      "[Removed Lines]",
      "1143:     for (i = 0; i < 8; i++) {",
      "1150:     for (i = l - 1; i >= 0; i--) {",
      "1152:      for (j = 0; j < 8; j++) {",
      "",
      "[Added Lines]",
      "1145:     for (int i = 0; i < 8; i++) {",
      "1152:     for (int i = l - 1; i >= 0; i--) {",
      "1154:      for (int j = 0; j < 8; j++) {",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1163:    } else {",
      "1164:     fp24_copy(t[0], a);",
      "1167:      fp24_sqr_cyc(t[0], t[0]);",
      "1168:      if (bn_get_bit(b, i)) {",
      "1169:       fp24_mul(t[0], t[0], a);",
      "",
      "[Removed Lines]",
      "1166:     for (i = bn_bits(b) - 2; i >= 0; i--) {",
      "",
      "[Added Lines]",
      "1168:     for (int i = bn_bits(b) - 2; i >= 0; i--) {",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1182:   RLC_FINALLY {",
      "1183:    bn_free(n);",
      "1184:    bn_free(x);",
      "1186:     bn_free(_b[i]);",
      "1187:     fp24_free(t[i]);",
      "1188:    }",
      "",
      "[Removed Lines]",
      "1185:    for (i = 0; i < 8; i++) {",
      "",
      "[Added Lines]",
      "1187:    for (int i = 0; i < 8; i++) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1196:    if (u == NULL) {",
      "1197:     RLC_THROW(ERR_NO_MEMORY);",
      "1198:    }",
      "1200:     fp24_null(u[i]);",
      "1201:     fp24_new(u[i]);",
      "1202:    }",
      "",
      "[Removed Lines]",
      "1199:    for (i = 0; i < w; i++) {",
      "",
      "[Added Lines]",
      "1201:    for (size_t i = 0; i < w; i++) {",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1205:    j = 0;",
      "1206:    fp24_copy(t, a);",
      "1208:     fp24_sqr_pck(t, t);",
      "1209:     if (bn_get_bit(b, i)) {",
      "1210:      fp24_copy(u[j++], t);",
      "",
      "[Removed Lines]",
      "1207:    for (i = 1; i < bn_bits(b); i++) {",
      "",
      "[Added Lines]",
      "1209:    for (size_t i = 1; i < bn_bits(b); i++) {",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1227:     fp24_copy(c, u[0]);",
      "1228:    }",
      "1231:     fp24_mul(c, c, u[i]);",
      "1232:    }",
      "",
      "[Removed Lines]",
      "1230:    for (i = j; i < k; i++) {",
      "",
      "[Added Lines]",
      "1232:    for (size_t i = j; i < k; i++) {",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1239:    RLC_THROW(ERR_CAUGHT);",
      "1240:   }",
      "1241:   RLC_FINALLY {",
      "1243:     fp24_free(u[i]);",
      "1244:    }",
      "1245:    fp24_free(t);",
      "",
      "[Removed Lines]",
      "1242:    for (i = 0; i < w; i++) {",
      "",
      "[Added Lines]",
      "1244:    for (size_t i = 0; i < w; i++) {",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1249: }",
      "1251: void fp24_exp_cyc_sim(fp24_t e, const fp24_t a, const bn_t b, const fp24_t c, const bn_t d) {",
      "1253:  int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *_k, *_m;",
      "1254:  fp24_t r, t0[1 << (EP_WIDTH - 2)];",
      "1255:  fp24_t s, t1[1 << (EP_WIDTH - 2)];",
      "1257:  if (bn_is_zero(b)) {",
      "1258:   return fp24_exp_cyc(e, c, d);",
      "",
      "[Removed Lines]",
      "1252:  int i, l, n0, n1, l0, l1;",
      "",
      "[Added Lines]",
      "1254:  int n0, n1;",
      "1258:  size_t l, l0, l1;",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1268:  RLC_TRY {",
      "1269:   fp24_new(r);",
      "1270:   fp24_new(s);",
      "1272:    fp24_null(t0[i]);",
      "1273:    fp24_null(t1[i]);",
      "1274:    fp24_new(t0[i]);",
      "",
      "[Removed Lines]",
      "1271:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "[Added Lines]",
      "1274:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i ++) {",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "1298:   l = RLC_MAX(l0, l1);",
      "1299:   if (bn_sign(b) == RLC_NEG) {",
      "1301:     naf0[i] = -naf0[i];",
      "1302:    }",
      "1303:   }",
      "1304:   if (bn_sign(d) == RLC_NEG) {",
      "1306:     naf1[i] = -naf1[i];",
      "1307:    }",
      "1308:   }",
      "",
      "[Removed Lines]",
      "1300:    for (i = 0; i < l0; i++) {",
      "1305:    for (i = 0; i < l1; i++) {",
      "",
      "[Added Lines]",
      "1303:    for (size_t i = 0; i < l0; i++) {",
      "1308:    for (size_t i = 0; i < l1; i++) {",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "1311:   _m = naf1 + l - 1;",
      "1313:   fp24_set_dig(r, 1);",
      "1315:    fp24_sqr(r, r);",
      "1317:    n0 = *_k;",
      "",
      "[Removed Lines]",
      "1314:   for (i = l - 1; i >= 0; i--, _k--, _m--) {",
      "",
      "[Added Lines]",
      "1317:   for (int i = l - 1; i >= 0; i--, _k--, _m--) {",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "1341:  RLC_FINALLY {",
      "1342:   fp24_free(r);",
      "1343:   fp24_free(s);",
      "1345:    fp24_free(t0[i]);",
      "1346:    fp24_free(t1[i]);",
      "1347:   }",
      "1348:  }",
      "1349: }",
      "1353:     fp24_t t, *u = RLC_ALLOCA(fp24_t, w);",
      "1355:  if (len == 0) {",
      "",
      "[Removed Lines]",
      "1344:   for (i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "1351: void fp24_exp_cyc_sps(fp24_t c, const fp24_t a, const int *b, int len, int sign) {",
      "1352:  int i, j, k, w = len;",
      "",
      "[Added Lines]",
      "1347:   for (int i = 0; i < (1 << (FP_WIDTH - 2)); i++) {",
      "1354: void fp24_exp_cyc_sps(fp24_t c, const fp24_t a, const int *b, size_t len,",
      "1355:   int sign) {",
      "1356:  size_t i, j, k, w = len;",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "1719:  }",
      "1720: }",
      "1724:     fp48_t t, *u = RLC_ALLOCA(fp48_t, w);",
      "1726:  if (len == 0) {",
      "",
      "[Removed Lines]",
      "1722: void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, int len, int sign) {",
      "1723:  int i, j, k, w = len;",
      "",
      "[Added Lines]",
      "1726: void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, size_t len,",
      "1727:   int sign) {",
      "1728:  size_t i, j, k, w = len;",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "2090:  }",
      "2091: }",
      "2095:     fp54_t t, *u = RLC_ALLOCA(fp54_t, w);",
      "2097:  if (len == 0) {",
      "",
      "[Removed Lines]",
      "2093: void fp54_exp_cyc_sps(fp54_t c, const fp54_t a, const int *b, int len, int sign) {",
      "2094:  int i, j, k, w = len;",
      "",
      "[Added Lines]",
      "2098: void fp54_exp_cyc_sps(fp54_t c, const fp54_t a, const int *b, size_t len,",
      "2099:   int sign) {",
      "2100:  size_t i, j, k, w = len;",
      "",
      "---------------"
    ],
    "src/fpx/relic_fpx_exp.c||src/fpx/relic_fpx_exp.c": [
      "File: src/fpx/relic_fpx_exp.c -> src/fpx/relic_fpx_exp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "329:  bn_t _b;",
      "330:  fp12_t t, v;",
      "331:  int8_t u, naf[RLC_DIG + 1];",
      "334:  if (b == 0) {",
      "335:   fp12_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "332:  int l;",
      "",
      "[Added Lines]",
      "332:  size_t l;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "461:  bn_t _b;",
      "462:  fp24_t t, v;",
      "463:  int8_t u, naf[RLC_DIG + 1];",
      "466:  if (b == 0) {",
      "467:   fp24_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "464:  int l;",
      "",
      "[Added Lines]",
      "464:  size_t l;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "561:  bn_t _b;",
      "562:  fp48_t t, v;",
      "563:  int8_t u, naf[RLC_DIG + 1];",
      "566:  if (b == 0) {",
      "567:   fp48_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "564:  int l;",
      "",
      "[Added Lines]",
      "564:  size_t l;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "657:  bn_t _b;",
      "658:  fp54_t t, v;",
      "659:  int8_t u, naf[RLC_DIG + 1];",
      "662:  if (b == 0) {",
      "663:   fp54_set_dig(c, 1);",
      "",
      "[Removed Lines]",
      "660:  int l;",
      "",
      "[Added Lines]",
      "660:  size_t l;",
      "",
      "---------------"
    ],
    "src/fpx/relic_fpx_util.c||src/fpx/relic_fpx_util.c": [
      "File: src/fpx/relic_fpx_util.c -> src/fpx/relic_fpx_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:  }",
      "73: }",
      "76:  if (len != RLC_FP_BYTES + 1 && len != 2 * RLC_FP_BYTES) {",
      "77:   RLC_THROW(ERR_NO_BUFFER);",
      "78:   return;",
      "",
      "[Removed Lines]",
      "75: void fp2_read_bin(fp2_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "75: void fp2_read_bin(fp2_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:  }",
      "90: }",
      "93:  fp2_t t;",
      "95:  fp2_null(t);",
      "",
      "[Removed Lines]",
      "92: void fp2_write_bin(uint8_t *bin, int len, const fp2_t a, int pack) {",
      "",
      "[Added Lines]",
      "92: void fp2_write_bin(uint8_t *bin, size_t len, const fp2_t a, int pack) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "160:  return 3 * RLC_FP_BYTES;",
      "161: }",
      "164:  if (len != 3 * RLC_FP_BYTES) {",
      "165:   RLC_THROW(ERR_NO_BUFFER);",
      "166:   return;",
      "",
      "[Removed Lines]",
      "163: void fp3_read_bin(fp3_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "163: void fp3_read_bin(fp3_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "170:  fp_read_bin(a[2], bin + 2 * RLC_FP_BYTES, RLC_FP_BYTES);",
      "171: }",
      "174:  if (len != 3 * RLC_FP_BYTES) {",
      "175:   RLC_THROW(ERR_NO_BUFFER);",
      "176:   return;",
      "",
      "[Removed Lines]",
      "173: void fp3_write_bin(uint8_t *bin, int len, const fp3_t a) {",
      "",
      "[Added Lines]",
      "173: void fp3_write_bin(uint8_t *bin, size_t len, const fp3_t a) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "214:  return 4 * RLC_FP_BYTES;",
      "215: }",
      "218:  if (len != 4 * RLC_FP_BYTES) {",
      "219:   RLC_THROW(ERR_NO_BUFFER);",
      "220:   return;",
      "",
      "[Removed Lines]",
      "217: void fp4_read_bin(fp4_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "217: void fp4_read_bin(fp4_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "223:  fp2_read_bin(a[1], bin + 2 * RLC_FP_BYTES, 2 * RLC_FP_BYTES);",
      "224: }",
      "227:  if (len != 4 * RLC_FP_BYTES) {",
      "228:   RLC_THROW(ERR_NO_BUFFER);",
      "229:   return;",
      "",
      "[Removed Lines]",
      "226: void fp4_write_bin(uint8_t *bin, int len, const fp4_t a) {",
      "",
      "[Added Lines]",
      "226: void fp4_write_bin(uint8_t *bin, size_t len, const fp4_t a) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "269:  return 6 * RLC_FP_BYTES;",
      "270: }",
      "273:  if (len != 6 * RLC_FP_BYTES) {",
      "274:   RLC_THROW(ERR_NO_BUFFER);",
      "275:   return;",
      "",
      "[Removed Lines]",
      "272: void fp6_read_bin(fp6_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "272: void fp6_read_bin(fp6_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "279:  fp2_read_bin(a[2], bin + 4 * RLC_FP_BYTES, 2 * RLC_FP_BYTES);",
      "280: }",
      "283:  if (len != 6 * RLC_FP_BYTES) {",
      "284:   RLC_THROW(ERR_NO_BUFFER);",
      "285:   return;",
      "",
      "[Removed Lines]",
      "282: void fp6_write_bin(uint8_t *bin, int len, const fp6_t a) {",
      "",
      "[Added Lines]",
      "282: void fp6_write_bin(uint8_t *bin, size_t len, const fp6_t a) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "331:  }",
      "332: }",
      "335:  if (len != 8 * RLC_FP_BYTES) {",
      "336:   RLC_THROW(ERR_NO_BUFFER);",
      "337:   return;",
      "",
      "[Removed Lines]",
      "334: void fp8_read_bin(fp8_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "334: void fp8_read_bin(fp8_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "340:  fp4_read_bin(a[1], bin + 4 * RLC_FP_BYTES, 4 * RLC_FP_BYTES);",
      "341: }",
      "344:  if (len != 8 * RLC_FP_BYTES) {",
      "345:   RLC_THROW(ERR_NO_BUFFER);",
      "346:   return;",
      "",
      "[Removed Lines]",
      "343: void fp8_write_bin(uint8_t *bin, int len, const fp8_t a) {",
      "",
      "[Added Lines]",
      "343: void fp8_write_bin(uint8_t *bin, size_t len, const fp8_t a) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "386:  return 9 * RLC_FP_BYTES;",
      "387: }",
      "390:  if (len != 9 * RLC_FP_BYTES) {",
      "391:   RLC_THROW(ERR_NO_BUFFER);",
      "392:   return;",
      "",
      "[Removed Lines]",
      "389: void fp9_read_bin(fp9_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "389: void fp9_read_bin(fp9_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "396:  fp3_read_bin(a[2], bin + 6 * RLC_FP_BYTES, 3 * RLC_FP_BYTES);",
      "397: }",
      "400:  if (len != 9 * RLC_FP_BYTES) {",
      "401:   RLC_THROW(ERR_NO_BUFFER);",
      "402:   return;",
      "",
      "[Removed Lines]",
      "399: void fp9_write_bin(uint8_t *bin, int len, const fp9_t a) {",
      "",
      "[Added Lines]",
      "399: void fp9_write_bin(uint8_t *bin, size_t len, const fp9_t a) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "448:  }",
      "449: }",
      "452:  if (len != 8 * RLC_FP_BYTES && len != 12 * RLC_FP_BYTES) {",
      "453:   RLC_THROW(ERR_NO_BUFFER);",
      "454:   return;",
      "",
      "[Removed Lines]",
      "451: void fp12_read_bin(fp12_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "451: void fp12_read_bin(fp12_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "468:  }",
      "469: }",
      "472:  fp12_t t;",
      "474:  fp12_null(t);",
      "",
      "[Removed Lines]",
      "471: void fp12_write_bin(uint8_t *bin, int len, const fp12_t a, int pack) {",
      "",
      "[Added Lines]",
      "471: void fp12_write_bin(uint8_t *bin, size_t len, const fp12_t a, int pack) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "532:  return 18 * RLC_FP_BYTES;",
      "533: }",
      "536:  if (len != 18 * RLC_FP_BYTES) {",
      "537:   RLC_THROW(ERR_NO_BUFFER);",
      "538:   return;",
      "",
      "[Removed Lines]",
      "535: void fp18_read_bin(fp18_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "535: void fp18_read_bin(fp18_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "541:  fp9_read_bin(a[1], bin + 9 * RLC_FP_BYTES, 9 * RLC_FP_BYTES);",
      "542: }",
      "545:  if (len != 18 * RLC_FP_BYTES) {",
      "546:   RLC_THROW(ERR_NO_BUFFER);",
      "547:   return;",
      "",
      "[Removed Lines]",
      "544: void fp18_write_bin(uint8_t *bin, int len, const fp18_t a) {",
      "",
      "[Added Lines]",
      "544: void fp18_write_bin(uint8_t *bin, size_t len, const fp18_t a) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "595:  }",
      "596: }",
      "599:  if (len != 16 * RLC_FP_BYTES && len != 24 * RLC_FP_BYTES) {",
      "600:   RLC_THROW(ERR_NO_BUFFER);",
      "601:   return;",
      "",
      "[Removed Lines]",
      "598: void fp24_read_bin(fp24_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "598: void fp24_read_bin(fp24_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "616:  }",
      "617: }",
      "620:  fp24_t t;",
      "622:  fp24_null(t);",
      "",
      "[Removed Lines]",
      "619: void fp24_write_bin(uint8_t *bin, int len, const fp24_t a, int pack) {",
      "",
      "[Added Lines]",
      "619: void fp24_write_bin(uint8_t *bin, size_t len, const fp24_t a, int pack) {",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "690:  }",
      "691: }",
      "694:  if (len != 32 * RLC_FP_BYTES && len != 48 * RLC_FP_BYTES) {",
      "695:   RLC_THROW(ERR_NO_BUFFER);",
      "696:   return;",
      "",
      "[Removed Lines]",
      "693: void fp48_read_bin(fp48_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "693: void fp48_read_bin(fp48_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "710:  }",
      "711: }",
      "714:  fp48_t t;",
      "716:  fp48_null(t);",
      "",
      "[Removed Lines]",
      "713: void fp48_write_bin(uint8_t *bin, int len, const fp48_t a, int pack) {",
      "",
      "[Added Lines]",
      "713: void fp48_write_bin(uint8_t *bin, size_t len, const fp48_t a, int pack) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "786:  }",
      "787: }",
      "790:  if (len != 36 * RLC_FP_BYTES && len != 54 * RLC_FP_BYTES) {",
      "791:   RLC_THROW(ERR_NO_BUFFER);",
      "792:   return;",
      "",
      "[Removed Lines]",
      "789: void fp54_read_bin(fp54_t a, const uint8_t *bin, int len) {",
      "",
      "[Added Lines]",
      "789: void fp54_read_bin(fp54_t a, const uint8_t *bin, size_t len) {",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "807:  }",
      "808: }",
      "811:  fp54_t t;",
      "813:  fp54_null(t);",
      "",
      "[Removed Lines]",
      "810: void fp54_write_bin(uint8_t *bin, int len, const fp54_t a, int pack) {",
      "",
      "[Added Lines]",
      "810: void fp54_write_bin(uint8_t *bin, size_t len, const fp54_t a, int pack) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_blake2s.c||src/md/relic_md_blake2s.c": [
      "File: src/md/relic_md_blake2s.c -> src/md/relic_md_blake2s.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #if MD_MAP == B2S160 || !defined(STRIP)",
      "47:  memset(hash, 0, RLC_MD_LEN_B2S160);",
      "48:  blake2s(hash, RLC_MD_LEN_B2S160, msg, len, NULL, 0);",
      "49: }",
      "",
      "[Removed Lines]",
      "46: void md_map_b2s160(uint8_t *hash, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "46: void md_map_b2s160(uint8_t *hash, const uint8_t *msg, size_t len) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53: #if MD_MAP == B2S256 || !defined(STRIP)",
      "56:  memset(hash, 0, RLC_MD_LEN_B2S256);",
      "57:  blake2s(hash, RLC_MD_LEN_B2S256, msg, len, NULL, 0);",
      "58: }",
      "",
      "[Removed Lines]",
      "55: void md_map_b2s256(uint8_t *hash, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "55: void md_map_b2s256(uint8_t *hash, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_hmac.c||src/md/relic_md_hmac.c": [
      "File: src/md/relic_md_hmac.c -> src/md/relic_md_hmac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #if MD_MAP == SH224 || MD_MAP == SH256 || MD_MAP == B2S160 || MD_MAP == B2S256",
      "46:   #define block_size 64",
      "47: #elif MD_MAP == SH384 || MD_MAP == SH512",
      "",
      "[Removed Lines]",
      "43: void md_hmac(uint8_t *mac, const uint8_t *in, int in_len, const uint8_t *key,",
      "44:     int key_len) {",
      "",
      "[Added Lines]",
      "43: void md_hmac(uint8_t *mac, const uint8_t *in, size_t in_len, const uint8_t *key,",
      "44:     size_t key_len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_kdf.c||src/md/relic_md_kdf.c": [
      "File: src/md/relic_md_kdf.c -> src/md/relic_md_kdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:  uint32_t i, j, d;",
      "46:  uint8_t* buffer = RLC_ALLOCA(uint8_t, in_len + sizeof(uint32_t));",
      "47:  uint8_t* t = RLC_ALLOCA(uint8_t, key_len + RLC_MD_LEN);",
      "",
      "[Removed Lines]",
      "43: void md_kdf(uint8_t *key, int key_len, const uint8_t *in,",
      "44:   int in_len) {",
      "",
      "[Added Lines]",
      "43: void md_kdf(uint8_t *key, size_t key_len, const uint8_t *in, size_t in_len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_mgf.c||src/md/relic_md_mgf.c": [
      "File: src/md/relic_md_mgf.c -> src/md/relic_md_mgf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:  uint32_t i, j, d;",
      "46:  uint8_t *buffer = RLC_ALLOCA(uint8_t, in_len + sizeof(uint32_t));",
      "47:  uint8_t *t = RLC_ALLOCA(uint8_t, key_len + RLC_MD_LEN);",
      "",
      "[Removed Lines]",
      "43: void md_mgf(uint8_t *key, int key_len, const uint8_t *in,",
      "44:   int in_len) {",
      "",
      "[Added Lines]",
      "43: void md_mgf(uint8_t *key, size_t key_len, const uint8_t *in, size_t in_len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_sha224.c||src/md/relic_md_sha224.c": [
      "File: src/md/relic_md_sha224.c -> src/md/relic_md_sha224.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #if MD_MAP == SH224 || !defined(STRIP)",
      "44:  SHA224Context ctx;",
      "46:  if (SHA224Reset(&ctx) != shaSuccess) {",
      "",
      "[Removed Lines]",
      "43: void md_map_sh224(uint8_t *hash, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "43: void md_map_sh224(uint8_t *hash, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_sha256.c||src/md/relic_md_sha256.c": [
      "File: src/md/relic_md_sha256.c -> src/md/relic_md_sha256.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #if MD_MAP == SH256 || !defined(STRIP)",
      "44:  SHA256Context ctx;",
      "46:  if (SHA256Reset(&ctx) != shaSuccess) {",
      "",
      "[Removed Lines]",
      "43: void md_map_sh256(uint8_t *hash, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "43: void md_map_sh256(uint8_t *hash, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_sha384.c||src/md/relic_md_sha384.c": [
      "File: src/md/relic_md_sha384.c -> src/md/relic_md_sha384.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #if MD_MAP == SH384 || !defined(STRIP)",
      "44:  SHA384Context ctx;",
      "46:  if (SHA384Reset(&ctx) != shaSuccess) {",
      "",
      "[Removed Lines]",
      "43: void md_map_sh384(uint8_t *hash, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "43: void md_map_sh384(uint8_t *hash, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/md/relic_md_sha512.c||src/md/relic_md_sha512.c": [
      "File: src/md/relic_md_sha512.c -> src/md/relic_md_sha512.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #if MD_MAP == SH512 || !defined(STRIP)",
      "44:  SHA512Context ctx;",
      "46:  if (SHA512Reset(&ctx) != shaSuccess) {",
      "",
      "[Removed Lines]",
      "43: void md_map_sh512(uint8_t *hash, const uint8_t *msg, int len) {",
      "",
      "[Added Lines]",
      "43: void md_map_sh512(uint8_t *hash, const uint8_t *msg, size_t len) {",
      "",
      "---------------"
    ],
    "src/pp/relic_pp_map_k12.c||src/pp/relic_pp_map_k12.c": [
      "File: src/pp/relic_pp_map_k12.c -> src/pp/relic_pp_map_k12.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:  fp12_t l;",
      "53:  ep_t *_p = RLC_ALLOCA(ep_t, m);",
      "54:  ep2_t *_q = RLC_ALLOCA(ep2_t, m);",
      "56:  int8_t s[RLC_FP_BITS + 1];",
      "58:  if (m == 0) {",
      "",
      "[Removed Lines]",
      "55:  int i, j, len = bn_bits(a) + 1;",
      "",
      "[Added Lines]",
      "55:  size_t len = bn_bits(a) + 1;",
      "56:  int i, j;",
      "",
      "---------------"
    ],
    "src/pp/relic_pp_map_k24.c||src/pp/relic_pp_map_k24.c": [
      "File: src/pp/relic_pp_map_k24.c -> src/pp/relic_pp_map_k24.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:  fp24_t l;",
      "53:  ep_t *_p = RLC_ALLOCA(ep_t, m);",
      "54:  ep4_t *_q = RLC_ALLOCA(ep4_t, m);",
      "56:  int8_t s[RLC_FP_BITS + 1];",
      "58:  if (m == 0) {",
      "",
      "[Removed Lines]",
      "55:  int i, j, len = bn_bits(a) + 1;",
      "",
      "[Added Lines]",
      "55:  size_t len = bn_bits(a) + 1;",
      "56:  int i, j;",
      "",
      "---------------"
    ],
    "src/pp/relic_pp_map_k48.c||src/pp/relic_pp_map_k48.c": [
      "File: src/pp/relic_pp_map_k48.c -> src/pp/relic_pp_map_k48.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  fp48_t l;",
      "43:  ep_t _p;",
      "44:  fp8_t rx, ry, rz, qn;",
      "46:  int8_t s[RLC_FP_BITS + 1];",
      "48:  fp48_null(l);",
      "",
      "[Removed Lines]",
      "45:  int i, len = bn_bits(a) + 1;",
      "",
      "[Added Lines]",
      "45:  size_t len = bn_bits(a) + 1;",
      "46:  int i;",
      "",
      "---------------"
    ],
    "src/pp/relic_pp_map_k54.c||src/pp/relic_pp_map_k54.c": [
      "File: src/pp/relic_pp_map_k54.c -> src/pp/relic_pp_map_k54.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  fp54_t l;",
      "43:  ep_t _p;",
      "44:  fp9_t rx, ry, rz, sx, sy, sz, qn;",
      "46:  int8_t s[RLC_FP_BITS + 1];",
      "48:  fp54_null(l);",
      "",
      "[Removed Lines]",
      "45:  int i, len = bn_bits(a) + 1;",
      "",
      "[Added Lines]",
      "45:  size_t len = bn_bits(a) + 1;",
      "46:  int i;",
      "",
      "---------------"
    ],
    "src/pp/relic_pp_map_k8.c||src/pp/relic_pp_map_k8.c": [
      "File: src/pp/relic_pp_map_k8.c -> src/pp/relic_pp_map_k8.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  fp8_t l;",
      "54:  ep_t *_p = RLC_ALLOCA(ep_t, m);",
      "55:  ep2_t *_q = RLC_ALLOCA(ep2_t, m);",
      "57:  int8_t s[RLC_FP_BITS + 1];",
      "59:  if (m == 0) {",
      "",
      "[Removed Lines]",
      "56:  int i, j, len = bn_bits(a) + 1;",
      "",
      "[Added Lines]",
      "56:  size_t len = bn_bits(a) + 1;",
      "57:  int i, j;",
      "",
      "---------------"
    ],
    "src/rand/relic_rand_core.c||src/rand/relic_rand_core.c": [
      "File: src/rand/relic_rand_core.c -> src/rand/relic_rand_core.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "183: #endif",
      "184: }",
      "187:  int count = 0;",
      "189:  for (int i = 1; i < size; i++) {",
      "",
      "[Removed Lines]",
      "186: int rand_check(uint8_t *buf, int size) {",
      "",
      "[Added Lines]",
      "186: int rand_check(uint8_t *buf, size_t size) {",
      "",
      "---------------"
    ],
    "src/rand/relic_rand_hashd.c||src/rand/relic_rand_hashd.c": [
      "File: src/rand/relic_rand_hashd.c -> src/rand/relic_rand_hashd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  uint32_t j = util_conv_big(8 * out_len);",
      "59:  uint8_t* buf = RLC_ALLOCA(uint8_t, 1 + sizeof(uint32_t) + in_len);",
      "60:  uint8_t hash[RLC_MD_LEN];",
      "",
      "[Removed Lines]",
      "56: static void rand_hash(uint8_t *out, int out_len, uint8_t *in, int in_len) {",
      "58:  int len = RLC_CEIL(out_len, RLC_MD_LEN);",
      "",
      "[Added Lines]",
      "56: static void rand_hash(uint8_t *out, size_t out_len, uint8_t *in,",
      "57:   size_t in_len) {",
      "59:  size_t len = RLC_CEIL(out_len, RLC_MD_LEN);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "92:  int carry = digit;",
      "93:  for (int i = size - 1; i >= 0; i--) {",
      "94:   int16_t s;",
      "",
      "[Removed Lines]",
      "91: static int rand_inc(uint8_t *data, int size, int digit) {",
      "",
      "[Added Lines]",
      "92: static int rand_inc(uint8_t *data, size_t size, int digit) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:  int carry = 0;",
      "110:  for (int i = size - 1; i >= 0; i--) {",
      "",
      "[Removed Lines]",
      "108: static int rand_add(uint8_t *state, uint8_t *hash, int size) {",
      "",
      "[Added Lines]",
      "109: static int rand_add(uint8_t *state, uint8_t *hash, size_t size) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:  int m = RLC_CEIL(out_len, RLC_MD_LEN);",
      "128:  uint8_t hash[RLC_MD_LEN], data[(RLC_RAND_SIZE - 1)/2];",
      "129:  ctx_t *ctx = core_get();",
      "",
      "[Removed Lines]",
      "126: static void rand_gen(uint8_t *out, int out_len) {",
      "",
      "[Added Lines]",
      "127: static void rand_gen(uint8_t *out, size_t out_len) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "151: #if RAND == HASHD",
      "154:  uint8_t hash[RLC_MD_LEN];",
      "155:  int carry, len  = (RLC_RAND_SIZE - 1)/2;",
      "156:  ctx_t *ctx = core_get();",
      "",
      "[Removed Lines]",
      "153: void rand_bytes(uint8_t *buf, int size) {",
      "",
      "[Added Lines]",
      "154: void rand_bytes(uint8_t *buf, size_t size) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "173:  ctx->counter = ctx->counter + 1;",
      "174: }",
      "177:  ctx_t *ctx = core_get();",
      "180:  if (size <= 0) {",
      "181:   RLC_THROW(ERR_NO_VALID);",
      "",
      "[Removed Lines]",
      "176: void rand_seed(uint8_t *buf, int size) {",
      "178:  int len = (RLC_RAND_SIZE - 1) / 2;",
      "",
      "[Added Lines]",
      "177: void rand_seed(uint8_t *buf, size_t size) {",
      "179:  size_t len = (RLC_RAND_SIZE - 1) / 2;",
      "",
      "---------------"
    ],
    "src/relic_util.c||src/relic_util.c": [
      "File: src/relic_util.c -> src/relic_util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "134: #endif",
      "135: }",
      "138:     return RLC_DIG - arch_lzcnt(a);",
      "139: }",
      "",
      "[Removed Lines]",
      "137: int util_bits_dig(dig_t a) {",
      "",
      "[Added Lines]",
      "137: size_t util_bits_dig(dig_t a) {",
      "",
      "---------------"
    ],
    "test/test_bn.c||test/test_bn.c": [
      "File: test/test_bn.c -> test/test_bn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "234:   } TEST_END;",
      "236:   TEST_CASE(\"reading and writing a positive number are consistent\") {",
      "238:    bn_rand(a, RLC_POS, RLC_BN_BITS);",
      "239:    for (int j = 2; j <= 64; j++) {",
      "240:     bits = bn_size_str(a, j);",
      "",
      "[Removed Lines]",
      "237:    int len = RLC_CEIL(RLC_BN_BITS, 8);",
      "",
      "[Added Lines]",
      "237:    size_t len = RLC_CEIL(RLC_BN_BITS, 8);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "262:   TEST_END;",
      "264:   TEST_CASE(\"reading and writing a negative number are consistent\") {",
      "266:    bn_rand(a, RLC_NEG, RLC_BN_BITS);",
      "267:    for (int j = 2; j <= 64; j++) {",
      "268:     bits = bn_size_str(a, j);",
      "",
      "[Removed Lines]",
      "265:    int len = RLC_CEIL(RLC_BN_BITS, 8);",
      "",
      "[Added Lines]",
      "265:    size_t len = RLC_CEIL(RLC_BN_BITS, 8);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1139: }",
      "1141: static int square_root(void) {",
      "1143:  bn_t a, b, c;",
      "1145:  bn_null(a);",
      "1146:  bn_null(b);",
      "",
      "[Removed Lines]",
      "1142:  int bits, code = RLC_ERR;",
      "",
      "[Added Lines]",
      "1142:  size_t bits;",
      "1144:  int code = RLC_ERR;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1938: static int recoding(void) {",
      "1939:  int code = RLC_ERR;",
      "1940:  bn_t a, b, c, v1[3], v2[3];",
      "1942:  uint8_t d[RLC_BN_BITS + 1];",
      "1943:  int8_t e[2 * (RLC_BN_BITS + 1)];",
      "1945:  bn_null(a);",
      "1946:  bn_null(b);",
      "",
      "[Removed Lines]",
      "1941:  int w, k, l;",
      "",
      "[Added Lines]",
      "1942:  int w, k;",
      "1945:  size_t l;",
      "",
      "---------------"
    ],
    "test/test_core.c||test/test_core.c": [
      "File: test/test_core.c -> test/test_core.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:   }",
      "124:   TEST_ASSERT(code == RLC_OK, end);",
      "126:   core_init();",
      "127: #pragma omp parallel copyin(core_ctx) shared(code)",
      "128:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:   core_clean();",
      "",
      "---------------"
    ],
    "test/test_pc.c||test/test_pc.c": [
      "File: test/test_pc.c -> test/test_pc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1245: }",
      "1247: int util(void) {",
      "1249:  gt_t a, b, c;",
      "1250:  uint8_t bin[24 * RLC_PC_BYTES];",
      "",
      "[Removed Lines]",
      "1248:  int l, code = RLC_ERR;",
      "",
      "[Added Lines]",
      "1248:  int code = RLC_ERR;",
      "",
      "---------------"
    ],
    "test/test_rand.c||test/test_rand.c": [
      "File: test/test_rand.c -> test/test_rand.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "364: static int test(void) {",
      "365:  uint8_t out[64];",
      "368:  TEST_ONCE(\"rdrand hardware generator is non-trivial\") {",
      "369:   memset(out, 0, 2 * len);",
      "",
      "[Removed Lines]",
      "366:  int len = sizeof(out) / 2, code = RLC_ERR;",
      "",
      "[Added Lines]",
      "366:  size_t len = sizeof(out) / 2, code = RLC_ERR;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b466bba298005a6f4d43fb7fbf48eba22345212e",
      "candidate_info": {
        "commit_hash": "b466bba298005a6f4d43fb7fbf48eba22345212e",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/b466bba298005a6f4d43fb7fbf48eba22345212e",
        "files": [
          "include/relic_pc.h",
          "include/relic_pp.h",
          "src/cp/relic_cp_cmlhs.c"
        ],
        "message": "Added helper macro for when moving between G1 and G2 elements.",
        "before_after_code_files": [
          "include/relic_pc.h||include/relic_pc.h",
          "include/relic_pp.h||include/relic_pp.h",
          "src/cp/relic_cp_cmlhs.c||src/cp/relic_cp_cmlhs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cp/relic_cp_cmlhs.c||src/cp/relic_cp_cmlhs.c"
          ],
          "candidate": [
            "src/cp/relic_cp_cmlhs.c||src/cp/relic_cp_cmlhs.c"
          ]
        }
      },
      "candidate_diff": {
        "include/relic_pc.h||include/relic_pc.h": [
          "File: include/relic_pc.h -> include/relic_pc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #ifndef RLC_PC_H",
          "37: #define RLC_PC_H",
          "40: #include \"relic_ep.h\"",
          "42: #include \"relic_pp.h\"",
          "43: #include \"relic_bn.h\"",
          "44: #include \"relic_util.h\"",
          "",
          "[Removed Lines]",
          "39: #include \"relic_fbx.h\"",
          "41: #include \"relic_eb.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: #if FP_PRIME == 575",
          "62: #define RLC_G2_LOWER   ep8_",
          "63: #elif FP_PRIME == 315 || FP_PRIME == 317 || FP_PRIME == 509",
          "64: #define RLC_G2_LOWER   ep4_",
          "65: #elif FP_PRIME == 508 || FP_PRIME == 638 && !defined(FP_QNRES)",
          "67: #else",
          "68: #define RLC_G2_LOWER   ep2_",
          "69: #endif",
          "71: #define RLC_G2_UPPER   EP",
          "73: #if FP_PRIME == 575",
          "74: #define RLC_GT_LOWER   fp48_",
          "75: #elif FP_PRIME == 315 || FP_PRIME == 317 || FP_PRIME == 509",
          "76: #define RLC_GT_LOWER   fp24_",
          "77: #elif FP_PRIME == 508 || FP_PRIME == 638 && !defined(FP_QNRES)",
          "79: #else",
          "80: #define RLC_GT_LOWER   fp12_",
          "81: #endif",
          "85: #else",
          "86: #define RLC_G1_LOWER   ep_",
          "87: #define RLC_G1_UPPER   EP",
          "88: #define RLC_G2_LOWER   ep_",
          "89: #define RLC_G2_UPPER   EP",
          "90: #define RLC_GT_LOWER   fp2_",
          "92: #endif",
          "",
          "[Removed Lines]",
          "66: #define RLC_G2_LOWER            ep3_",
          "78: #define RLC_GT_LOWER            fp18_",
          "83: #define RLC_PC_LOWER   pp_",
          "91: #define RLC_PC_LOWER   pp_",
          "",
          "[Added Lines]",
          "61: #define RLC_G2_BASEF(A)  A[0][0][0]",
          "64: #define RLC_G2_BASEF(A)  A[0][0]",
          "66: #define RLC_G2_LOWER   ep3_",
          "67: #define RLC_G2_BASEF(A)  A[0]",
          "70: #define RLC_G2_BASEF(A)  A[0]",
          "77: #define RLC_GT_EMBED      48",
          "80: #define RLC_GT_EMBED      24",
          "82: #define RLC_GT_LOWER   fp18_",
          "83: #define RLC_GT_EMBED      18",
          "86: #define RLC_GT_EMBED      12",
          "94: #define RLC_G2_BASEF(A)  A",
          "96: #define RLC_GT_EMBED      2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "312: #define gt_is_unity(A)  (RLC_CAT(RLC_GT_LOWER, cmp_dig)(A, 1) == RLC_EQ)",
          "319: #define g1_set_infty(P)  RLC_CAT(RLC_G1_LOWER, set_infty)(P)",
          "326: #define g2_set_infty(P)  RLC_CAT(RLC_G2_LOWER, set_infty)(P)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337: #define g1_set_g2(P, Q)                            \\",
          "338:  fp_copy((P)->x, RLC_G2_BASEF((Q)->x));                   \\",
          "339:   fp_copy((P)->y, RLC_G2_BASEF((Q)->y));                   \\",
          "340:   fp_copy((P)->z, RLC_G2_BASEF((Q)->z));                   \\",
          "348: #define g2_set_g1(Q, P)                            \\",
          "349:  fp_copy(RLC_G2_BASEF((Q)->x), (P)->x);                   \\",
          "350:   fp_copy(RLC_G2_BASEF((Q)->y), (P)->y);                   \\",
          "351:   fp_copy(RLC_G2_BASEF((Q)->z), (P)->z);                   \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "422:  #define g1_blind(R, P)  RLC_CAT(RLC_G1_LOWER, blind)(R, P)",
          "",
          "[Added Lines]",
          "447: #define g1_blind(R, P)  RLC_CAT(RLC_G1_LOWER, blind)(R, P)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "864: #define g1_map(P, M, L); RLC_CAT(RLC_G1_LOWER, map)(P, M, L)",
          "",
          "[Added Lines]",
          "889: #define g1_map(P, M, L)   RLC_CAT(RLC_G1_LOWER, map)(P, M, L)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "873: #define g2_map(P, M, L); RLC_CAT(RLC_G2_LOWER, map)(P, M, L)",
          "",
          "[Added Lines]",
          "898: #define g2_map(P, M, L)   RLC_CAT(RLC_G2_LOWER, map)(P, M, L)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "883: #if FP_PRIME < 1536",
          "885: #if FP_PRIME == 575",
          "886: #define pc_map(R, P, Q);  RLC_CAT(RLC_PC_LOWER, map_k48)(R, P, Q)",
          "887: #elif FP_PRIME == 315 || FP_PRIME == 317 || FP_PRIME == 509",
          "888: #define pc_map(R, P, Q);  RLC_CAT(RLC_PC_LOWER, map_k24)(R, P, Q)",
          "889: #elif FP_PRIME == 508 || FP_PRIME == 638 && !defined(FP_QNRES)",
          "890: #define pc_map(R, P, Q);  RLC_CAT(RLC_PC_LOWER, map_k18)(R, P, Q)",
          "891: #else",
          "892: #define pc_map(R, P, Q);  RLC_CAT(RLC_PC_LOWER, map_k12)(R, P, Q)",
          "893: #endif",
          "895: #else",
          "897: #define pc_map(R, P, Q);  RLC_CAT(RLC_PC_LOWER, map_k2)(R, P, Q)",
          "899: #endif",
          "",
          "[Added Lines]",
          "908: #define pc_map(R, P, Q)   RLC_CAT(pp_map_k, RLC_GT_EMBED)(R, P, Q)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "910: #if FP_PRIME < 1536",
          "912: #if FP_PRIME == 575",
          "913: #define pc_map_sim(R, P, Q, M); RLC_CAT(RLC_PC_LOWER, map_sim_k48)(R, P, Q, M)",
          "914: #elif FP_PRIME == 315 || FP_PRIME == 317 || FP_PRIME == 509",
          "915: #define pc_map_sim(R, P, Q, M); RLC_CAT(RLC_PC_LOWER, map_sim_k24)(R, P, Q, M)",
          "916: #elif FP_PRIME == 508 || FP_PRIME == 638 && !defined(FP_QNRES)",
          "917: #define pc_map_sim(R, P, Q, M); RLC_CAT(RLC_PC_LOWER, map_sim_k18)(R, P, Q, M)",
          "918: #else",
          "919: #define pc_map_sim(R, P, Q, M); RLC_CAT(RLC_PC_LOWER, map_sim_k12)(R, P, Q, M)",
          "920: #endif",
          "922: #else",
          "923: #define pc_map_sim(R, P, Q, M); RLC_CAT(RLC_PC_LOWER, map_sim_k2)(R, P, Q, M)",
          "924: #endif",
          "",
          "[Added Lines]",
          "919: #define pc_map_sim(R, P, Q, M)  RLC_CAT(pp_map_sim_k, RLC_GT_EMBED)(R, P, Q, M)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "932: #if FP_PRIME < 1536",
          "934: #if FP_PRIME == 315 || FP_PRIME == 317 || FP_PRIME == 509",
          "935: #define pc_exp(C, A);   RLC_CAT(RLC_PC_LOWER, exp_k24)(C, A)",
          "936: #elif FP_PRIME == 508 || FP_PRIME == 638 && !defined(FP_QNRES)",
          "937: #define pc_exp(C, A);   RLC_CAT(RLC_PC_LOWER, exp_k18)(C, A)",
          "938: #else",
          "939: #define pc_exp(C, A);   RLC_CAT(RLC_PC_LOWER, exp_k12)(C, A)",
          "940: #endif",
          "942: #else",
          "943: #define pc_exp(C, A);   RLC_CAT(RLC_PC_LOWER, exp_k2)(C, A)",
          "944: #endif",
          "",
          "[Added Lines]",
          "927: #define pc_exp(C, A);   RLC_CAT(pp_exp_k, RLC_GT_EMBED)(C, A)",
          "",
          "---------------"
        ],
        "include/relic_pp.h||include/relic_pp.h": [
          "File: include/relic_pp.h -> include/relic_pp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #if PP_EXT == BASIC",
          "60: #else",
          "62: #endif",
          "",
          "[Removed Lines]",
          "59: #define pp_add_k2_projc(L, R, P, Q)  pp_add_k2_projc_basic(L, R, P, Q)",
          "61: #define pp_add_k2_projc(L, R, P, Q)  pp_add_k2_projc_lazyr(L, R, P, Q)",
          "",
          "[Added Lines]",
          "59: #define pp_add_k2_projc(L, R, P, Q) pp_add_k2_projc_basic(L, R, P, Q)",
          "61: #define pp_add_k2_projc(L, R, P, Q) pp_add_k2_projc_lazyr(L, R, P, Q)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196: #if EP_ADD == BASIC",
          "198: #else",
          "200: #endif",
          "",
          "[Removed Lines]",
          "197: #define pp_add_k48(L, R, Q, P) pp_add_k48_basic(L, R, Q, P)",
          "199: #define pp_add_k48(L, R, Q, P) pp_add_k48_projc(L, R, Q, P)",
          "",
          "[Added Lines]",
          "197: #define pp_add_k48(L, R, Q, P)         pp_add_k48_basic(L, R, Q, P)",
          "199: #define pp_add_k48(L, R, Q, P)         pp_add_k48_projc(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227: #if PP_EXT == BASIC",
          "229: #elif PP_EXT == LAZYR",
          "231: #endif",
          "",
          "[Removed Lines]",
          "228: #define pp_dbl_k2_projc(L, R, P, Q)  pp_dbl_k2_projc_basic(L, R, P, Q)",
          "230: #define pp_dbl_k2_projc(L, R, P, Q)  pp_dbl_k2_projc_lazyr(L, R, P, Q)",
          "",
          "[Added Lines]",
          "228: #define pp_dbl_k2_projc(L, R, P, Q) pp_dbl_k2_projc_basic(L, R, P, Q)",
          "230: #define pp_dbl_k2_projc(L, R, P, Q) pp_dbl_k2_projc_lazyr(L, R, P, Q)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242: #if EP_ADD == BASIC",
          "244: #else",
          "246: #endif",
          "",
          "[Removed Lines]",
          "243: #define pp_dbl_k2(L, R, P, Q)   pp_dbl_k2_basic(L, R, P, Q)",
          "245: #define pp_dbl_k2(L, R, P, Q)   pp_dbl_k2_projc(L, R, P, Q)",
          "",
          "[Added Lines]",
          "243: #define pp_dbl_k2(L, R, P, Q)  pp_dbl_k2_basic(L, R, P, Q)",
          "245: #define pp_dbl_k2(L, R, P, Q)  pp_dbl_k2_projc(L, R, P, Q)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258: #if PP_EXT == BASIC",
          "260: #elif PP_EXT == LAZYR",
          "262: #endif",
          "",
          "[Removed Lines]",
          "259: #define pp_dbl_k8_projc(L, R, Q, P)  pp_dbl_k8_projc_basic(L, R, Q, P)",
          "261: #define pp_dbl_k8_projc(L, R, Q, P)  pp_dbl_k8_projc_lazyr(L, R, Q, P)",
          "",
          "[Added Lines]",
          "259: #define pp_dbl_k8_projc(L, R, Q, P) pp_dbl_k8_projc_basic(L, R, Q, P)",
          "261: #define pp_dbl_k8_projc(L, R, Q, P) pp_dbl_k8_projc_lazyr(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "273: #if EP_ADD == BASIC",
          "275: #else",
          "277: #endif",
          "",
          "[Removed Lines]",
          "274: #define pp_dbl_k8(L, R, Q, P)   pp_dbl_k8_basic(L, R, Q, P)",
          "276: #define pp_dbl_k8(L, R, Q, P)   pp_dbl_k8_projc(L, R, Q, P)",
          "",
          "[Added Lines]",
          "274: #define pp_dbl_k8(L, R, Q, P)  pp_dbl_k8_basic(L, R, Q, P)",
          "276: #define pp_dbl_k8(L, R, Q, P)  pp_dbl_k8_projc(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "304: #if EP_ADD == BASIC",
          "306: #else",
          "308: #endif",
          "",
          "[Removed Lines]",
          "305: #define pp_dbl_k12(L, R, Q, P)   pp_dbl_k12_basic(L, R, Q, P)",
          "307: #define pp_dbl_k12(L, R, Q, P)   pp_dbl_k12_projc(L, R, Q, P)",
          "",
          "[Added Lines]",
          "305: #define pp_dbl_k12(L, R, Q, P)  pp_dbl_k12_basic(L, R, Q, P)",
          "307: #define pp_dbl_k12(L, R, Q, P)  pp_dbl_k12_projc(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "335: #if EP_ADD == BASIC",
          "337: #else",
          "339: #endif",
          "",
          "[Removed Lines]",
          "336: #define pp_dbl_k18(L, R, Q, P)   pp_dbl_k18_basic(L, R, Q, P)",
          "338: #define pp_dbl_k18(L, R, Q, P)   pp_dbl_k18_projc(L, R, Q, P)",
          "",
          "[Added Lines]",
          "336: #define pp_dbl_k18(L, R, Q, P)  pp_dbl_k18_basic(L, R, Q, P)",
          "338: #define pp_dbl_k18(L, R, Q, P)  pp_dbl_k18_projc(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "350: #if EP_ADD == BASIC",
          "352: #else",
          "354: #endif",
          "",
          "[Removed Lines]",
          "351: #define pp_dbl_k24(L, R, Q, P)   pp_dbl_k24_basic(L, R, Q, P)",
          "353: #define pp_dbl_k24(L, R, Q, P)   pp_dbl_k24_projc(L, R, Q, P)",
          "",
          "[Added Lines]",
          "351: #define pp_dbl_k24(L, R, Q, P)  pp_dbl_k24_basic(L, R, Q, P)",
          "353: #define pp_dbl_k24(L, R, Q, P)  pp_dbl_k24_projc(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "365: #if EP_ADD == BASIC",
          "367: #else",
          "369: #endif",
          "",
          "[Removed Lines]",
          "366: #define pp_dbl_k48(L, R, Q, P)   pp_dbl_k48_basic(L, R, Q, P)",
          "368: #define pp_dbl_k48(L, R, Q, P)   pp_dbl_k48_projc(L, R, Q, P)",
          "",
          "[Added Lines]",
          "366: #define pp_dbl_k48(L, R, Q, P)  pp_dbl_k48_basic(L, R, Q, P)",
          "368: #define pp_dbl_k48(L, R, Q, P)  pp_dbl_k48_projc(L, R, Q, P)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "394: #if PP_MAP == TATEP",
          "396: #elif PP_MAP == WEILP",
          "398: #elif PP_MAP == OATEP",
          "400: #endif",
          "",
          "[Removed Lines]",
          "395: #define pp_map_k2(R, P, Q)    pp_map_tatep_k2(R, P, Q)",
          "397: #define pp_map_k2(R, P, Q)    pp_map_weilp_k2(R, P, Q)",
          "399: #define pp_map_k2(R, P, Q)    pp_map_tatep_k2(R, P, Q)",
          "",
          "[Added Lines]",
          "395: #define pp_map_k2(R, P, Q)  pp_map_tatep_k2(R, P, Q)",
          "397: #define pp_map_k2(R, P, Q)  pp_map_weilp_k2(R, P, Q)",
          "399: #define pp_map_k2(R, P, Q)  pp_map_tatep_k2(R, P, Q)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "410: #if PP_MAP == TATEP",
          "412: #elif PP_MAP == WEILP",
          "414: #elif PP_MAP == OATEP",
          "416: #endif",
          "",
          "[Removed Lines]",
          "411: #define pp_map_k12(R, P, Q)    pp_map_tatep_k12(R, P, Q)",
          "413: #define pp_map_k12(R, P, Q)    pp_map_weilp_k12(R, P, Q)",
          "415: #define pp_map_k12(R, P, Q)    pp_map_oatep_k12(R, P, Q)",
          "",
          "[Added Lines]",
          "411: #define pp_map_k12(R, P, Q)  pp_map_tatep_k12(R, P, Q)",
          "413: #define pp_map_k12(R, P, Q)  pp_map_weilp_k12(R, P, Q)",
          "415: #define pp_map_k12(R, P, Q)  pp_map_oatep_k12(R, P, Q)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "426: #if PP_MAP == TATEP",
          "428: #elif PP_MAP == WEILP",
          "430: #elif PP_MAP == OATEP",
          "432: #endif",
          "",
          "[Removed Lines]",
          "427: #define pp_map_k18(R, P, Q)    pp_map_tatep_k18(R, P, Q)",
          "429: #define pp_map_k18(R, P, Q)    pp_map_weilp_k18(R, P, Q)",
          "431: #define pp_map_k18(R, P, Q)    pp_map_oatep_k18(R, P, Q)",
          "",
          "[Added Lines]",
          "427: #define pp_map_k18(R, P, Q)  pp_map_tatep_k18(R, P, Q)",
          "429: #define pp_map_k18(R, P, Q)  pp_map_weilp_k18(R, P, Q)",
          "431: #define pp_map_k18(R, P, Q)  pp_map_oatep_k18(R, P, Q)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "443: #if PP_MAP == WEILP",
          "445: #elif PP_MAP == TATEP || PP_MAP == OATEP",
          "447: #endif",
          "",
          "[Removed Lines]",
          "444: #define pp_map_sim_k2(R, P, Q, M)  pp_map_sim_weilp_k2(R, P, Q, M)",
          "446: #define pp_map_sim_k2(R, P, Q, M)  pp_map_sim_tatep_k2(R, P, Q, M)",
          "",
          "[Added Lines]",
          "444: #define pp_map_sim_k2(R, P, Q, M) pp_map_sim_weilp_k2(R, P, Q, M)",
          "446: #define pp_map_sim_k2(R, P, Q, M) pp_map_sim_tatep_k2(R, P, Q, M)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "459: #if PP_MAP == TATEP",
          "461: #elif PP_MAP == WEILP",
          "463: #elif PP_MAP == OATEP",
          "465: #endif",
          "",
          "[Removed Lines]",
          "460: #define pp_map_sim_k12(R, P, Q, M)  pp_map_sim_tatep_k12(R, P, Q, M)",
          "462: #define pp_map_sim_k12(R, P, Q, M)  pp_map_sim_weilp_k12(R, P, Q, M)",
          "464: #define pp_map_sim_k12(R, P, Q, M)  pp_map_sim_oatep_k12(R, P, Q, M)",
          "",
          "[Added Lines]",
          "460: #define pp_map_sim_k12(R, P, Q, M) pp_map_sim_tatep_k12(R, P, Q, M)",
          "462: #define pp_map_sim_k12(R, P, Q, M) pp_map_sim_weilp_k12(R, P, Q, M)",
          "464: #define pp_map_sim_k12(R, P, Q, M) pp_map_sim_oatep_k12(R, P, Q, M)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "476: #if PP_MAP == TATEP",
          "478: #elif PP_MAP == WEILP",
          "480: #elif PP_MAP == OATEP",
          "482: #endif",
          "",
          "[Removed Lines]",
          "477: #define pp_map_sim_k18(R, P, Q, M)  pp_map_sim_tatep_k18(R, P, Q, M)",
          "479: #define pp_map_sim_k18(R, P, Q, M)  pp_map_sim_weilp_k18(R, P, Q, M)",
          "481: #define pp_map_sim_k18(R, P, Q, M)  pp_map_sim_oatep_k18(R, P, Q, M)",
          "",
          "[Added Lines]",
          "477: #define pp_map_sim_k18(R, P, Q, M) pp_map_sim_tatep_k18(R, P, Q, M)",
          "479: #define pp_map_sim_k18(R, P, Q, M) pp_map_sim_weilp_k18(R, P, Q, M)",
          "481: #define pp_map_sim_k18(R, P, Q, M) pp_map_sim_oatep_k18(R, P, Q, M)",
          "",
          "---------------"
        ],
        "src/cp/relic_cp_cmlhs.c||src/cp/relic_cp_cmlhs.c": [
          "File: src/cp/relic_cp_cmlhs.c -> src/cp/relic_cp_cmlhs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:    result = cp_bls_gen(sk, pk);",
          "80:   } else {",
          "81:    if (cp_ecdsa_gen(sk, g1) == RLC_OK) {",
          "84:    } else {",
          "85:     result = RLC_ERR;",
          "86:    }",
          "",
          "[Removed Lines]",
          "82:     fp_copy(pk->x[0], g1->x);",
          "83:     fp_copy(pk->y[0], g1->y);",
          "",
          "[Added Lines]",
          "82:     g2_set_g1(pk, g1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:    } else {",
          "250:     fp_prime_back(k, sig[i]->x);",
          "251:     fp_prime_back(n, sig[i]->y);",
          "254:     fp_set_dig(g1->z, 1);",
          "255:     result &= cp_ecdsa_ver(k, n, buf, len + dlen, 0, g1);",
          "256:    }",
          "",
          "[Removed Lines]",
          "252:     fp_copy(g1->x, pk[i]->x[0]);",
          "253:     fp_copy(g1->y, pk[i]->y[0]);",
          "",
          "[Added Lines]",
          "251:     g1_set_g2(g1, pk[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:    } else {",
          "371:     fp_prime_back(k, sig[i]->x);",
          "372:     fp_prime_back(n, sig[i]->y);",
          "376:     result &= cp_ecdsa_ver(k, n, buf, len + dlen, 0, g1);",
          "377:    }",
          "378:   }",
          "",
          "[Removed Lines]",
          "373:     fp_copy(g1->x, pk[i]->x[0]);",
          "374:     fp_copy(g1->y, pk[i]->y[0]);",
          "375:     fp_set_dig(g1->z, 1);",
          "",
          "[Added Lines]",
          "371:     g1_set_g2(g1, pk[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03211d99e0cfa917e528a4493151914b09ea768e",
      "candidate_info": {
        "commit_hash": "03211d99e0cfa917e528a4493151914b09ea768e",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/03211d99e0cfa917e528a4493151914b09ea768e",
        "files": [
          "src/fpx/relic_fpx_cyc.c",
          "src/pp/relic_pp_exp_k16.c",
          "src/pp/relic_pp_map_k16.c"
        ],
        "message": "Final exp for FM16.",
        "before_after_code_files": [
          "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c",
          "src/pp/relic_pp_exp_k16.c||src/pp/relic_pp_exp_k16.c",
          "src/pp/relic_pp_map_k16.c||src/pp/relic_pp_map_k16.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c"
          ],
          "candidate": [
            "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c": [
          "File: src/fpx/relic_fpx_cyc.c -> src/fpx/relic_fpx_cyc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:   return fp12_set_dig(c, 1);",
          "602:  }",
          "605:   fp12_t r, s, t[1 << (RLC_WIDTH - 2)];",
          "606:   int8_t naf[RLC_FP_BITS + 1], *k, w = RLC_WIDTH;",
          "",
          "[Removed Lines]",
          "604:  if (1) {//(bn_bits(b) > RLC_DIG) && ((bn_ham(b) << 3) > bn_bits(b))) {",
          "",
          "[Added Lines]",
          "604:  if ((bn_bits(b) > RLC_DIG) && ((bn_ham(b) << 3) > bn_bits(b))) {",
          "",
          "---------------"
        ],
        "src/pp/relic_pp_exp_k16.c||src/pp/relic_pp_exp_k16.c": [
          "File: src/pp/relic_pp_exp_k16.c -> src/pp/relic_pp_exp_k16.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:  }",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: static void pp_exp_fm16(fp16_t c, fp16_t a) {",
          "344:  fp16_t t0, t1, t2, t3, t4, t5, t6, t7;",
          "345:  bn_t x, x_;",
          "347:  bn_null(x);",
          "348:  bn_null(x_);",
          "349:  fp16_null(t0);",
          "350:  fp16_null(t1);",
          "351:  fp16_null(t2);",
          "352:  fp16_null(t3);",
          "353:  fp16_null(t4);",
          "354:  fp16_null(t5);",
          "355:  fp16_null(t6);",
          "356:  fp16_null(t7);",
          "358:  RLC_TRY {",
          "359:   bn_new(x);",
          "360:   bn_new(x_);",
          "361:   fp16_new(t0);",
          "362:   fp16_new(t1);",
          "363:   fp16_new(t2);",
          "364:   fp16_new(t3);",
          "365:   fp16_new(t4);",
          "366:   fp16_new(t5);",
          "367:   fp16_new(t6);",
          "368:   fp16_new(t7);",
          "370:   fp_prime_get_par(x);",
          "373:   fp16_conv_cyc(c, a);",
          "376:   bn_hlv(x_, x);",
          "378:   fp16_exp_cyc(t1, c, x_);",
          "379:   fp16_exp_cyc(t1, t1, x_);",
          "380:   fp16_exp_cyc(t2, t1, x);",
          "381:   fp16_exp_cyc(t3, t2, x);",
          "382:   fp16_exp_cyc(t4, t3, x);",
          "383:   fp16_exp_cyc(t5, t4, x);",
          "384:   fp16_exp_cyc(t6, t5, x);",
          "385:   fp16_exp_cyc(t7, t6, x);",
          "387:   fp16_mul(t0, t1, c);",
          "388:   fp16_mul(t0, t0, t7);",
          "389:   fp16_frb(t7, t0, 7);",
          "390:   fp16_exp_cyc(t0, t0, x);",
          "391:   fp16_frb(t1, t0, 6);",
          "392:   fp16_mul(t7, t7, t1);",
          "393:   fp16_exp_cyc(t0, t0, x);",
          "394:   fp16_frb(t1, t0, 5);",
          "395:   fp16_mul(t7, t7, t1);",
          "396:   fp16_exp_cyc(t0, t0, x);",
          "397:   fp16_frb(t1, t0, 4);",
          "398:   fp16_mul(t7, t7, t1);",
          "399:   fp16_exp_cyc(t0, t0, x);",
          "400:   fp16_frb(t1, t0, 3);",
          "401:   fp16_mul(t7, t7, t1);",
          "402:   fp16_exp_cyc(t0, t0, x);",
          "403:   fp16_frb(t1, t0, 2);",
          "404:   fp16_mul(t7, t7, t1);",
          "405:   fp16_exp_cyc(t0, t0, x);",
          "406:   fp16_frb(t1, t0, 1);",
          "407:   fp16_mul(t7, t7, t1);",
          "408:   fp16_exp_cyc(t0, t0, x);",
          "409:   fp16_mul(t7, t7, t0);",
          "410:   fp16_mul(c, c, t7);",
          "411:  }",
          "412:  RLC_CATCH_ANY {",
          "413:   RLC_THROW(ERR_CAUGHT);",
          "414:  }",
          "415:  RLC_FINALLY {",
          "416:   bn_free(x);",
          "417:   bn_free(x_);",
          "418:   fp16_free(t0);",
          "419:   fp16_free(t1);",
          "420:   fp16_free(t2);",
          "421:   fp16_free(t3);",
          "422:   fp16_free(t4);",
          "423:   fp16_free(t5);",
          "424:   fp16_free(t6);",
          "425:   fp16_free(t7);",
          "426:  }",
          "427: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:   case EP_N16:",
          "348:    pp_exp_new(c, a);",
          "349:    break;",
          "350:  }",
          "351: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:   case EP_FM16:",
          "445:    pp_exp_fm16(c, a);",
          "446:    break;",
          "",
          "---------------"
        ],
        "src/pp/relic_pp_map_k16.c||src/pp/relic_pp_map_k16.c": [
          "File: src/pp/relic_pp_map_k16.c -> src/pp/relic_pp_map_k16.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:   if (!ep_is_infty(_p[0]) && !ep4_is_infty(_q[0])) {",
          "491:    switch (ep_curve_is_pairf()) {",
          "492:     case EP_N16:",
          "494:      pp_mil_k16(r, t, _q, _p, 1, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:     case EP_FM16:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:   if (j > 0) {",
          "561:    switch (ep_curve_is_pairf()) {",
          "562:     case EP_N16:",
          "564:      pp_mil_k16(r, t, _q, _p, j, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     case EP_FM16:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22a3357478f60ea82649b591c701b76524f59bbc",
      "candidate_info": {
        "commit_hash": "22a3357478f60ea82649b591c701b76524f59bbc",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/22a3357478f60ea82649b591c701b76524f59bbc",
        "files": [
          "bench/bench_fpx.c",
          "include/relic_fpx.h",
          "include/relic_pc.h",
          "src/fpx/relic_fpx_cyc.c",
          "src/pc/relic_pc_exp.c",
          "test/test_fpx.c"
        ],
        "message": "Big restructuring of the exponentiation functions.",
        "before_after_code_files": [
          "bench/bench_fpx.c||bench/bench_fpx.c",
          "include/relic_fpx.h||include/relic_fpx.h",
          "include/relic_pc.h||include/relic_pc.h",
          "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c",
          "src/pc/relic_pc_exp.c||src/pc/relic_pc_exp.c",
          "test/test_fpx.c||test/test_fpx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/relic_fpx.h||include/relic_fpx.h",
            "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c"
          ],
          "candidate": [
            "include/relic_fpx.h||include/relic_fpx.h",
            "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c"
          ]
        }
      },
      "candidate_diff": {
        "bench/bench_fpx.c||bench/bench_fpx.c": [
          "File: bench/bench_fpx.c -> bench/bench_fpx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1976:  }",
          "1977:  BENCH_END;",
          "1979:  BENCH_RUN(\"fp12_exp_cyc (param or sparse)\") {",
          "1980:   fp12_rand(a);",
          "1981:   fp12_conv_cyc(a, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1979:  if (ep_curve_is_pairf() && ep_param_embed() == 12) {",
          "1980:   BENCH_RUN(\"fp12_exp_cyc (gls)\") {",
          "1981:    fp12_rand(a);",
          "1982:    fp12_conv_cyc(a, a);",
          "1983:    bn_rand(e, RLC_POS, RLC_FP_BITS);",
          "1984:    BENCH_ADD(fp12_exp_cyc_gls(c, a, e));",
          "1985:   }",
          "1986:   BENCH_END;",
          "1987:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2241:  }",
          "2242:  BENCH_END;",
          "2244:  BENCH_RUN(\"fp16_exp_cyc (param or sparse)\") {",
          "2245:   fp16_rand(a);",
          "2246:   fp16_conv_cyc(a, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2254:  if (ep_curve_is_pairf() && ep_param_embed() == 16) {",
          "2255:   BENCH_RUN(\"fp16_exp_cyc (gls)\") {",
          "2256:    fp16_rand(a);",
          "2257:    fp16_conv_cyc(a, a);",
          "2258:    bn_rand(e, RLC_POS, RLC_FP_BITS);",
          "2259:    BENCH_ADD(fp16_exp_cyc_gls(c, a, e));",
          "2260:   }",
          "2261:   BENCH_END;",
          "2262:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2589:  }",
          "2590:  BENCH_END;",
          "2592:  BENCH_RUN(\"fp18_exp_cyc (param or sparse)\") {",
          "2593:   fp18_rand(a);",
          "2594:   fp18_conv_cyc(a, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2612:  if (ep_curve_is_pairf() && ep_param_embed() == 18) {",
          "2613:   BENCH_RUN(\"fp18_exp_cyc (gls)\") {",
          "2614:    fp18_rand(a);",
          "2615:    fp18_conv_cyc(a, a);",
          "2616:    bn_rand(e, RLC_POS, RLC_FP_BITS);",
          "2617:    BENCH_ADD(fp18_exp_cyc_gls(c, a, e));",
          "2618:   }",
          "2619:   BENCH_END;",
          "2620:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2900:  }",
          "2901:  BENCH_END;",
          "2903:  BENCH_RUN(\"fp24_exp_cyc (param or sparse)\") {",
          "2904:   fp24_rand(a);",
          "2905:   fp24_conv_cyc(a, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2933:  if (ep_curve_is_pairf() && ep_param_embed() == 24) {",
          "2934:   BENCH_RUN(\"fp24_exp_cyc (gls)\") {",
          "2935:    fp24_rand(a);",
          "2936:    fp24_conv_cyc(a, a);",
          "2937:    bn_rand(e, RLC_POS, RLC_FP_BITS);",
          "2938:    BENCH_ADD(fp24_exp_cyc_gls(c, a, e));",
          "2939:   }",
          "2940:   BENCH_END;",
          "2941:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3256:  }",
          "3257:  BENCH_END;",
          "3259:  BENCH_RUN(\"fp48_exp_cyc (param or sparse)\") {",
          "3260:   fp48_rand(a);",
          "3261:   fp48_conv_cyc(a, a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3299:  if (ep_curve_is_pairf() && ep_param_embed() == 48) {",
          "3300:   BENCH_RUN(\"fp48_exp_cyc (gls)\") {",
          "3301:    fp48_rand(a);",
          "3302:    fp48_conv_cyc(a, a);",
          "3303:    bn_rand(e, RLC_POS, RLC_FP_BITS);",
          "3304:    BENCH_ADD(fp48_exp_cyc_gls(c, a, e));",
          "3305:   }",
          "3306:   BENCH_END;",
          "3307:  }",
          "",
          "---------------"
        ],
        "include/relic_fpx.h||include/relic_fpx.h": [
          "File: include/relic_fpx.h -> include/relic_fpx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3549: void fp12_exp_cyc(fp12_t c, const fp12_t a, const bn_t b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3559: void fp12_exp_cyc_gls(fp12_t c, const fp12_t a, const bn_t b);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3909: void fp16_exp_cyc(fp16_t c, const fp16_t a, const bn_t b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3928: void fp16_exp_cyc_gls(fp16_t c, const fp16_t a, const bn_t b);",
          "3939: void fp16_exp_cyc_sim(fp16_t e, const fp16_t a, const bn_t b, const fp16_t c,",
          "3940:   const bn_t d);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4282: void fp18_exp_cyc(fp18_t c, const fp18_t a, const bn_t b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4323: void fp18_exp_cyc_gls(fp18_t c, const fp18_t a, const bn_t b);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4293: void fp18_exp_cyc_sim(fp18_t e, const fp18_t a, const bn_t b, const fp18_t c, const bn_t d);",
          "",
          "[Added Lines]",
          "4334: void fp18_exp_cyc_sim(fp18_t e, const fp18_t a, const bn_t b, const fp18_t c,",
          "4335:   const bn_t d);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4672: void fp24_exp_cyc(fp24_t c, const fp24_t a, const bn_t b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4724: void fp24_exp_cyc_gls(fp24_t c, const fp24_t a, const bn_t b);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5028: void fp48_exp_cyc(fp48_t c, const fp48_t a, const bn_t b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5090: void fp48_exp_cyc_gls(fp48_t c, const fp48_t a, const bn_t b);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5039: void fp48_exp_cyc_sps(fp48_t c, const fp48_t a, const int *b, size_t l, int s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5112: void fp48_exp_cyc_sim(fp48_t e, const fp48_t a, const bn_t b, const fp48_t c,",
          "5113:   const bn_t d);",
          "",
          "---------------"
        ],
        "include/relic_pc.h||include/relic_pc.h": [
          "File: include/relic_pc.h -> include/relic_pc.h"
        ],
        "src/fpx/relic_fpx_cyc.c||src/fpx/relic_fpx_cyc.c": [
          "File: src/fpx/relic_fpx_cyc.c -> src/fpx/relic_fpx_cyc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   return fp12_set_dig(c, 1);",
          "604:  }",
          "615:   RLC_TRY {",
          "621:     fp12_null(t[i]);",
          "622:     fp12_new(t[i]);",
          "623:    }",
          "667:     }",
          "672:     }",
          "673:    }",
          "676:    RLC_THROW(ERR_CAUGHT);",
          "677:   }",
          "678:   RLC_FINALLY {",
          "683:     fp12_free(t[i]);",
          "684:    }",
          "685:   }",
          "",
          "[Removed Lines]",
          "606:  if ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {",
          "607:   size_t _l[4];",
          "608:   int8_t naf[4][RLC_FP_BITS + 1];",
          "609:   fp12_t t[4];",
          "610:   bn_t _b[4], n, u;",
          "612:   bn_null(n);",
          "613:   bn_null(u);",
          "616:    bn_new(n);",
          "617:    bn_new(u);",
          "618:    for (int i = 0; i < 4; i++) {",
          "619:     bn_null(_b[i]);",
          "620:     bn_new(_b[i]);",
          "625:    ep_curve_get_ord(n);",
          "626:    fp_prime_get_par(u);",
          "627:    bn_rec_frb(_b, 4, b, u, n, ep_curve_is_pairf() == EP_BN);",
          "629:    if (ep_curve_is_pairf()) {",
          "630:     fp12_copy(t[0], a);",
          "631:     fp12_frb(t[1], t[0], 1);",
          "632:     fp12_frb(t[2], t[1], 1);",
          "633:     fp12_frb(t[3], t[2], 1);",
          "635:     l = 0;",
          "636:     for (int i = 0; i < 4; i++) {",
          "637:      if (bn_sign(_b[i]) == RLC_NEG) {",
          "638:       fp12_inv_cyc(t[i], t[i]);",
          "639:      }",
          "640:      _l[i] = RLC_FP_BITS + 1;",
          "641:      bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "642:      l = RLC_MAX(l, _l[i]);",
          "643:     }",
          "645:     fp12_set_dig(c, 1);",
          "646:     for (int i = l - 1; i >= 0; i--) {",
          "647:      fp12_sqr_cyc(c, c);",
          "648:      for (int j = 0; j < 4; j++) {",
          "649:       if (naf[j][i] > 0) {",
          "650:        fp12_mul(c, c, t[j]);",
          "651:       }",
          "652:       if (naf[j][i] < 0) {",
          "653:        fp12_inv_cyc(t[j], t[j]);",
          "654:        fp12_mul(c, c, t[j]);",
          "655:        fp12_inv_cyc(t[j], t[j]);",
          "656:       }",
          "657:      }",
          "658:     }",
          "659:    } else {",
          "660:     fp12_copy(t[0], a);",
          "662:     for (int i = bn_bits(b) - 2; i >= 0; i--) {",
          "663:      fp12_sqr_cyc(t[0], t[0]);",
          "664:      if (bn_get_bit(b, i)) {",
          "665:       fp12_mul(t[0], t[0], a);",
          "666:      }",
          "669:     fp12_copy(c, t[0]);",
          "670:     if (bn_sign(b) == RLC_NEG) {",
          "671:      fp12_inv_cyc(c, c);",
          "674:   }",
          "675:   RLC_CATCH_ANY {",
          "679:    bn_free(n);",
          "680:    bn_free(u);",
          "681:    for (int i = 0; i < 4; i++) {",
          "682:     bn_free(_b[i]);",
          "",
          "[Added Lines]",
          "604:  if (1) {//(bn_bits(b) > RLC_DIG) && ((bn_ham(b) << 3) > bn_bits(b))) {",
          "605:   fp12_t r, s, t[1 << (RLC_WIDTH - 2)];",
          "606:   int8_t naf[RLC_FP_BITS + 1], *k, w = RLC_WIDTH;",
          "608:   if (bn_bits(b) <= RLC_DIG) {",
          "609:    w = 2;",
          "610:   }",
          "612:   fp12_null(r);",
          "613:   fp12_null(s);",
          "616:    fp12_new(r);",
          "617:    fp12_new(s);",
          "618:    for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i ++) {",
          "623: #if RLC_WIDTH > 2",
          "624:    fp12_sqr_cyc(t[0], a);",
          "625:    fp12_mul(t[1], t[0], a);",
          "626:    for (int i = 2; i < (1 << (w - 2)); i++) {",
          "627:     fp12_mul(t[i], t[i - 1], t[0]);",
          "628:    }",
          "629: #endif",
          "630:    fp12_copy(t[0], a);",
          "632:    l = RLC_FP_BITS + 1;",
          "633:    fp12_set_dig(r, 1);",
          "634:    bn_rec_naf(naf, &l, b, w);",
          "636:    k = naf + l - 1;",
          "637:    for (int i = l - 1; i >= 0; i--, k--) {",
          "638:     fp12_sqr_cyc(r, r);",
          "640:     if (*k > 0) {",
          "641:      fp12_mul(r, r, t[*k / 2]);",
          "643:     if (*k < 0) {",
          "644:      fp12_inv_cyc(s, t[-*k / 2]);",
          "645:      fp12_mul(r, r, s);",
          "649:    if (bn_sign(b) == RLC_NEG) {",
          "650:     fp12_inv_cyc(c, r);",
          "651:    } else {",
          "652:     fp12_copy(c, r);",
          "653:    }",
          "654:   } RLC_CATCH_ANY {",
          "658:    fp12_free(r);",
          "659:    fp12_free(s);",
          "660:    for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:  }",
          "745: }",
          "747: void fp12_exp_cyc_sim(fp12_t e, const fp12_t a, const bn_t b, const fp12_t c,",
          "748:   const bn_t d) {",
          "749:  int i, j, l;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: void fp12_exp_cyc_gls(fp12_t c, const fp12_t a, const bn_t b) {",
          "726:  size_t l, _l[4];",
          "727:  int8_t naf[4][RLC_FP_BITS + 1];",
          "728:  fp12_t t[4];",
          "729:  bn_t _b[4], n, u;",
          "731:  if (bn_is_zero(b)) {",
          "732:   return fp12_set_dig(c, 1);",
          "733:  }",
          "735:  bn_null(n);",
          "736:  bn_null(u);",
          "738:  RLC_TRY {",
          "739:   bn_new(n);",
          "740:   bn_new(u);",
          "741:   for (size_t i = 0; i < 4; i++) {",
          "742:    bn_null(_b[i]);",
          "743:    bn_new(_b[i]);",
          "744:    fp12_null(t[i]);",
          "745:    fp12_new(t[i]);",
          "746:   }",
          "748:   ep_curve_get_ord(n);",
          "749:   fp_prime_get_par(u);",
          "750:   bn_abs(_b[0], b);",
          "751:   bn_mod(_b[0], _b[0], n);",
          "752:   if (bn_sign(b) == RLC_NEG) {",
          "753:    bn_neg(_b[0], _b[0]);",
          "754:   }",
          "755:   bn_rec_frb(_b, 4, _b[0], u, n, ep_curve_is_pairf() == EP_BN);",
          "757:   fp12_copy(t[0], a);",
          "758:   fp12_frb(t[1], t[0], 1);",
          "759:   fp12_frb(t[2], t[1], 1);",
          "760:   fp12_frb(t[3], t[2], 1);",
          "762:   l = 0;",
          "763:   for (size_t i = 0; i < 4; i++) {",
          "764:    if (bn_sign(_b[i]) == RLC_NEG) {",
          "765:     fp12_inv_cyc(t[i], t[i]);",
          "766:    }",
          "767:    _l[i] = RLC_FP_BITS + 1;",
          "768:    bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "769:    l = RLC_MAX(l, _l[i]);",
          "770:   }",
          "772:   fp12_set_dig(c, 1);",
          "773:   for (int i = l - 1; i >= 0; i--) {",
          "774:    fp12_sqr_cyc(c, c);",
          "775:    for (size_t j = 0; j < 4; j++) {",
          "776:     if (naf[j][i] > 0) {",
          "777:      fp12_mul(c, c, t[j]);",
          "778:     }",
          "779:     if (naf[j][i] < 0) {",
          "780:      fp12_inv_cyc(t[j], t[j]);",
          "781:      fp12_mul(c, c, t[j]);",
          "782:      fp12_inv_cyc(t[j], t[j]);",
          "783:     }",
          "784:    }",
          "785:   }",
          "786:  }",
          "787:  RLC_CATCH_ANY {",
          "788:   RLC_THROW(ERR_CAUGHT);",
          "789:  }",
          "790:  RLC_FINALLY {",
          "791:   bn_free(n);",
          "792:   bn_free(u);",
          "793:   for (size_t i = 0; i < 4; i++) {",
          "794:    bn_free(_b[i]);",
          "795:    fp12_free(t[i]);",
          "796:   }",
          "797:  }",
          "798: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "778:   ep_curve_get_ord(n);",
          "779:   fp_prime_get_par(x);",
          "784:    for (i = 0; i < 4; i++) {",
          "785:     fp12_frb(t[i], a, i);",
          "786:     fp12_frb(u[i], c, i);",
          "",
          "[Removed Lines]",
          "780:   bn_rec_frb(_b, 4, b, x, n, ep_curve_is_pairf() == EP_BN);",
          "781:   bn_rec_frb(_d, 4, d, x, n, ep_curve_is_pairf() == EP_BN);",
          "783:   if (ep_curve_is_pairf()) {",
          "",
          "[Added Lines]",
          "833:   bn_abs(_b[0], b);",
          "834:   bn_mod(_b[0], _b[0], n);",
          "835:   if (bn_sign(b) == RLC_NEG) {",
          "836:    bn_neg(_b[0], _b[0]);",
          "837:   }",
          "838:   bn_rec_frb(_b, 4, _b[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "839:   bn_abs(_d[0], d);",
          "840:   bn_mod(_d[0], _d[0], n);",
          "841:   if (bn_sign(b) == RLC_NEG) {",
          "842:    bn_neg(_d[0], _d[0]);",
          "843:   }",
          "844:   bn_rec_frb(_d, 4, _d[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "846:   if (ep_curve_is_pairf() && ep_param_embed() == 12) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "972:  return result;",
          "973: }",
          "975: void fp16_exp_cyc(fp16_t c, const fp16_t a, const bn_t b) {",
          "976:  fp16_t r, s, t[1 << (RLC_WIDTH - 2)];",
          "980:  if (bn_is_zero(b)) {",
          "981:   return fp16_set_dig(c, 1);",
          "",
          "[Removed Lines]",
          "977:  int8_t naf[RLC_FP_BITS + 1], *k, w = RLC_WIDTH;",
          "978:  size_t l;",
          "",
          "[Added Lines]",
          "1038: static void fp16_gls(fp16_t c, const fp16_t a) {",
          "1039:  fp16_t b;",
          "1041:  fp16_null(b);",
          "1043:  RLC_TRY {",
          "1044:   fp16_new(b);",
          "1046:   switch (ep_curve_is_pairf()) {",
          "1047:    case EP_K16:",
          "1049:     fp16_frb(b, a, 1);",
          "1050:     fp16_frb(c, b, 4);",
          "1051:     fp16_sqr_cyc(c, c);",
          "1052:     fp16_inv_cyc(b, b);",
          "1053:     fp16_mul(c, c, b);",
          "1054:     break;",
          "1055:    case EP_N16:",
          "1057:     fp16_frb(c, a, 5);",
          "1058:     fp16_inv_cyc(c, c);",
          "1059:     break;",
          "1060:   }",
          "1061:  }",
          "1062:  RLC_CATCH_ANY {",
          "1063:   RLC_THROW(ERR_CAUGHT);",
          "1064:  }",
          "1065:  RLC_FINALLY {",
          "1066:   fp16_free(b);",
          "1067:  }",
          "1068: }",
          "1071:  size_t l, w = RLC_WIDTH;",
          "1073:  int8_t naf[RLC_FP_BITS + 1], *k;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "991:  RLC_TRY {",
          "992:   fp16_new(r);",
          "993:   fp16_new(s);",
          "995:    fp16_null(t[i]);",
          "996:    fp16_new(t[i]);",
          "997:   }",
          "",
          "[Removed Lines]",
          "994:   for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i ++) {",
          "",
          "[Added Lines]",
          "1089:   for (size_t i = 0; i < (1 << (RLC_WIDTH - 2)); i ++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "999: #if RLC_WIDTH > 2",
          "1000:   fp16_sqr_cyc(t[0], a);",
          "1001:   fp16_mul(t[1], t[0], a);",
          "1003:    fp16_mul(t[i], t[i - 1], t[0]);",
          "1004:   }",
          "1005: #endif",
          "",
          "[Removed Lines]",
          "1002:   for (int i = 2; i < (1 << (w - 2)); i++) {",
          "",
          "[Added Lines]",
          "1097:   for (size_t i = 2; i < (1 << (w - 2)); i++) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1028:   } else {",
          "1029:    fp16_copy(c, r);",
          "1030:   }",
          "1033:   RLC_THROW(ERR_CAUGHT);",
          "1034:  }",
          "1035:  RLC_FINALLY {",
          "1036:   fp16_free(r);",
          "1037:   fp16_free(s);",
          "1039:    fp16_free(t[i]);",
          "1040:   }",
          "1041:  }",
          "",
          "[Removed Lines]",
          "1031:  }",
          "1032:  RLC_CATCH_ANY {",
          "1038:   for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i++) {",
          "",
          "[Added Lines]",
          "1125:  } RLC_CATCH_ANY {",
          "1131:   for (size_t i = 0; i < (1 << (RLC_WIDTH - 2)); i++) {",
          "1132:    fp16_free(t[i]);",
          "1133:   }",
          "1134:  }",
          "1135: }",
          "1137: void fp16_exp_cyc_gls(fp16_t c, const fp16_t a, const bn_t b) {",
          "1138:  size_t i, l, _l[8];",
          "1139:  int8_t naf[8][RLC_FP_BITS + 1];",
          "1140:  fp16_t t[8];",
          "1141:  bn_t _b[8], n, x;",
          "1143:  if (bn_is_zero(b)) {",
          "1144:   return fp16_set_dig(c, 1);",
          "1145:  }",
          "1147:  bn_null(n);",
          "1148:  bn_null(x);",
          "1150:  RLC_TRY {",
          "1151:   bn_new(n);",
          "1152:   bn_new(x);",
          "1153:   for (i = 0; i < 8; i++) {",
          "1154:    bn_null(_b[i]);",
          "1155:    bn_new(_b[i]);",
          "1156:    fp16_null(t[i]);",
          "1157:    fp16_new(t[i]);",
          "1158:   }",
          "1160:   ep_curve_get_ord(n);",
          "1161:   fp_prime_get_par(x);",
          "1162:   bn_abs(_b[0], b);",
          "1163:   bn_mod(_b[0], _b[0], n);",
          "1164:   if (bn_sign(b) == RLC_NEG) {",
          "1165:    bn_neg(_b[0], _b[0]);",
          "1166:   }",
          "1167:   bn_rec_frb(_b, 8, _b[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "1169:   fp16_copy(t[0], a);",
          "1170:   for (int i = 1; i < 8; i++) {",
          "1171:    fp16_gls(t[i], t[i - 1]);",
          "1172:   }",
          "1174:   l = 0;",
          "1175:   for (size_t i = 0; i < 8; i++) {",
          "1176:    if (bn_sign(_b[i]) == RLC_NEG) {",
          "1177:     fp16_inv_cyc(t[i], t[i]);",
          "1178:    }",
          "1179:    _l[i] = RLC_FP_BITS + 1;",
          "1180:    bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "1181:    l = RLC_MAX(l, _l[i]);",
          "1182:   }",
          "1184:   fp16_set_dig(c, 1);",
          "1185:   for (int i = l - 1; i >= 0; i--) {",
          "1186:    fp16_sqr_cyc(c, c);",
          "1187:    for (size_t j = 0; j < 8; j++) {",
          "1188:     if (naf[j][i] > 0) {",
          "1189:      fp16_mul(c, c, t[j]);",
          "1190:     }",
          "1191:     if (naf[j][i] < 0) {",
          "1192:      fp16_inv_cyc(t[j], t[j]);",
          "1193:      fp16_mul(c, c, t[j]);",
          "1194:      fp16_inv_cyc(t[j], t[j]);",
          "1195:     }",
          "1196:    }",
          "1197:   }",
          "1198:  }",
          "1199:  RLC_CATCH_ANY {",
          "1200:   RLC_THROW(ERR_CAUGHT);",
          "1201:  }",
          "1202:  RLC_FINALLY {",
          "1203:   bn_free(n);",
          "1204:   bn_free(x);",
          "1205:   for (size_t i = 0; i < 8; i++) {",
          "1206:    bn_free(_b[i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1412: }",
          "1414: void fp18_exp_cyc(fp18_t c, const fp18_t a, const bn_t b) {",
          "1417:  if (bn_is_zero(b)) {",
          "1418:   return fp18_set_dig(c, 1);",
          "1419:  }",
          "1421:  if ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {",
          "1430:   RLC_TRY {",
          "1436:     fp18_null(t[i]);",
          "1437:     fp18_new(t[i]);",
          "1438:    }",
          "1446:    }",
          "1483:     }",
          "1492:     }",
          "1498:    }",
          "1501:    RLC_THROW(ERR_CAUGHT);",
          "1502:   }",
          "1503:   RLC_FINALLY {",
          "1508:     fp18_free(t[i]);",
          "1509:    }",
          "1510:   }",
          "1511:  } else {",
          "1512:   fp18_t t, *u = RLC_ALLOCA(fp18_t, w);",
          "1514:   fp18_null(t);",
          "",
          "[Removed Lines]",
          "1415:  int i, j, k, w = bn_ham(b);",
          "1422:   size_t l, _l[6];",
          "1423:   int8_t naf[6][RLC_FP_BITS + 1];",
          "1424:   fp18_t t[6];",
          "1425:   bn_t _b[6], n, x;",
          "1427:   bn_null(n);",
          "1428:   bn_null(x);",
          "1431:    bn_new(n);",
          "1432:    bn_new(x);",
          "1433:    for (i = 0; i < 6; i++) {",
          "1434:     bn_null(_b[i]);",
          "1435:     bn_new(_b[i]);",
          "1440:    fp_prime_get_par(x);",
          "1441:    if (ep_curve_is_pairf() == EP_SG18) {",
          "1443:     bn_dbl(n, x);",
          "1444:     bn_add(x, x, n);",
          "1445:     bn_neg(x, x);",
          "1447:    ep_curve_get_ord(n);",
          "1448:    bn_mod(_b[0], b, n);",
          "1449:    bn_rec_frb(_b, 6, _b[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "1451:    if (ep_curve_is_pairf()) {",
          "1452:     l = 0;",
          "1454:     fp18_copy(t[0], a);",
          "1455:     for (int i = 0; i < 6; i++) {",
          "1456:      _l[i] = RLC_FP_BITS + 1;",
          "1457:      bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "1458:      l = RLC_MAX(l, _l[i]);",
          "1459:      if (i > 0) {",
          "1460:       fp18_gls(t[i], t[i - 1]);",
          "1461:      }",
          "1462:     }",
          "1464:     for (int i = 0; i < 6; i++) {",
          "1465:      if (bn_sign(_b[i]) == RLC_NEG) {",
          "1466:       fp18_inv_cyc(t[i], t[i]);",
          "1467:      }",
          "1468:     }",
          "1470:     fp18_set_dig(c, 1);",
          "1471:     for (int i = l - 1; i >= 0; i--) {",
          "1472:      fp18_sqr_cyc(c, c);",
          "1473:      for (int j = 0; j < 6; j++) {",
          "1474:       if (naf[j][i] > 0) {",
          "1475:        fp18_mul(c, c, t[j]);",
          "1476:       }",
          "1477:       if (naf[j][i] < 0) {",
          "1478:        fp18_inv_cyc(t[j], t[j]);",
          "1479:        fp18_mul(c, c, t[j]);",
          "1480:        fp18_inv_cyc(t[j], t[j]);",
          "1481:       }",
          "1482:      }",
          "1484:    } else {",
          "1485:     fp18_copy(t[0], a);",
          "1487:     for (i = bn_bits(b) - 2; i >= 0; i--) {",
          "1488:      fp18_sqr_cyc(t[0], t[0]);",
          "1489:      if (bn_get_bit(b, i)) {",
          "1490:       fp18_mul(t[0], t[0], a);",
          "1491:      }",
          "1494:     fp18_copy(c, t[0]);",
          "1495:     if (bn_sign(b) == RLC_NEG) {",
          "1496:      fp18_inv_cyc(c, c);",
          "1497:     }",
          "1499:   }",
          "1500:   RLC_CATCH_ANY {",
          "1504:    bn_free(n);",
          "1505:    bn_free(x);",
          "1506:    for (i = 0; i < 6; i++) {",
          "1507:     bn_free(_b[i]);",
          "",
          "[Added Lines]",
          "1583:  size_t l, w = bn_ham(b);",
          "1590:   fp18_t r, s, t[1 << (RLC_WIDTH - 2)];",
          "1591:   int8_t naf[RLC_FP_BITS + 1], *k;",
          "1593:   if (bn_bits(b) <= RLC_DIG) {",
          "1594:    w = 2;",
          "1595:   } else {",
          "1596:    w = RLC_WIDTH;",
          "1597:   }",
          "1599:   fp18_null(r);",
          "1600:   fp18_null(s);",
          "1603:    fp18_new(r);",
          "1604:    fp18_new(s);",
          "1605:    for (size_t i = 0; i < (1 << (RLC_WIDTH - 2)); i ++) {",
          "1610: #if RLC_WIDTH > 2",
          "1611:    fp18_sqr_cyc(t[0], a);",
          "1612:    fp18_mul(t[1], t[0], a);",
          "1613:    for (size_t i = 2; i < (1 << (w - 2)); i++) {",
          "1614:     fp18_mul(t[i], t[i - 1], t[0]);",
          "1616: #endif",
          "1617:    fp18_copy(t[0], a);",
          "1619:    l = RLC_FP_BITS + 1;",
          "1620:    fp18_set_dig(r, 1);",
          "1621:    bn_rec_naf(naf, &l, b, w);",
          "1623:    k = naf + l - 1;",
          "1624:    for (int i = l - 1; i >= 0; i--, k--) {",
          "1625:     fp18_sqr_cyc(r, r);",
          "1627:     if (*k > 0) {",
          "1628:      fp18_mul(r, r, t[*k / 2]);",
          "1630:     if (*k < 0) {",
          "1631:      fp18_inv_cyc(s, t[-*k / 2]);",
          "1632:      fp18_mul(r, r, s);",
          "1634:    }",
          "1636:    if (bn_sign(b) == RLC_NEG) {",
          "1637:     fp18_inv_cyc(c, r);",
          "1638:    } else {",
          "1639:     fp18_copy(c, r);",
          "1641:   } RLC_CATCH_ANY {",
          "1645:    fp18_free(r);",
          "1646:    fp18_free(s);",
          "1647:    for (size_t i = 0; i < (1 << (RLC_WIDTH - 2)); i++) {",
          "1652:   size_t j, k;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1517:    if (u == NULL) {",
          "1518:     RLC_THROW(ERR_NO_MEMORY);",
          "1519:    }",
          "1521:     fp18_null(u[i]);",
          "1522:     fp18_new(u[i]);",
          "1523:    }",
          "",
          "[Removed Lines]",
          "1520:    for (i = 0; i < w; i++) {",
          "",
          "[Added Lines]",
          "1661:    for (int i = 0; i < w; i++) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1526:    j = 0;",
          "1527:    fp18_copy(t, a);",
          "1529:     fp18_sqr_pck(t, t);",
          "1530:     if (bn_get_bit(b, i)) {",
          "1531:      fp18_copy(u[j++], t);",
          "",
          "[Removed Lines]",
          "1528:    for (i = 1; i < bn_bits(b); i++) {",
          "",
          "[Added Lines]",
          "1669:    for (size_t i = 1; i < bn_bits(b); i++) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1548:     fp18_copy(c, u[0]);",
          "1549:    }",
          "1552:     fp18_mul(c, c, u[i]);",
          "1553:    }",
          "",
          "[Removed Lines]",
          "1551:    for (i = j; i < k; i++) {",
          "",
          "[Added Lines]",
          "1692:    for (size_t i = j; i < k; i++) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1560:    RLC_THROW(ERR_CAUGHT);",
          "1561:   }",
          "1562:   RLC_FINALLY {",
          "1564:     fp18_free(u[i]);",
          "1565:    }",
          "1566:    fp18_free(t);",
          "",
          "[Removed Lines]",
          "1563:    for (i = 0; i < w; i++) {",
          "",
          "[Added Lines]",
          "1704:    for (size_t i = 0; i < w; i++) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1569:  }",
          "1570: }",
          "1572: void fp18_exp_cyc_sim(fp18_t e, const fp18_t a, const bn_t b, const fp18_t c,",
          "1573:   const bn_t d) {",
          "1574:  int i, n0, n1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1713: void fp18_exp_cyc_gls(fp18_t c, const fp18_t a, const bn_t b) {",
          "1714:  size_t l, _l[6];",
          "1715:  int8_t naf[6][RLC_FP_BITS + 1];",
          "1716:  fp18_t t[6];",
          "1717:  bn_t _b[6], n, x;",
          "1719:  if (bn_is_zero(b)) {",
          "1720:   return fp18_set_dig(c, 1);",
          "1721:  }",
          "1723:  bn_null(n);",
          "1724:  bn_null(x);",
          "1726:  RLC_TRY {",
          "1727:   bn_new(n);",
          "1728:   bn_new(x);",
          "1729:   for (size_t i = 0; i < 6; i++) {",
          "1730:    bn_null(_b[i]);",
          "1731:    bn_new(_b[i]);",
          "1732:    fp18_null(t[i]);",
          "1733:    fp18_new(t[i]);",
          "1734:   }",
          "1736:   fp_prime_get_par(x);",
          "1737:   if (ep_curve_is_pairf() == EP_SG18) {",
          "1739:    bn_dbl(n, x);",
          "1740:    bn_add(x, x, n);",
          "1741:    bn_neg(x, x);",
          "1742:   }",
          "1743:   ep_curve_get_ord(n);",
          "1744:   bn_abs(_b[0], b);",
          "1745:   bn_mod(_b[0], _b[0], n);",
          "1746:   if (bn_sign(b) == RLC_NEG) {",
          "1747:    bn_neg(_b[0], _b[0]);",
          "1748:   }",
          "1749:   bn_rec_frb(_b, 6, _b[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "1751:   l = 0;",
          "1752:   fp18_copy(t[0], a);",
          "1753:   for (size_t i = 0; i < 6; i++) {",
          "1754:    _l[i] = RLC_FP_BITS + 1;",
          "1755:    bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "1756:    l = RLC_MAX(l, _l[i]);",
          "1757:    if (i > 0) {",
          "1758:     fp18_gls(t[i], t[i - 1]);",
          "1759:    }",
          "1760:   }",
          "1762:   for (size_t i = 0; i < 6; i++) {",
          "1763:    if (bn_sign(_b[i]) == RLC_NEG) {",
          "1764:     fp18_inv_cyc(t[i], t[i]);",
          "1765:    }",
          "1766:   }",
          "1768:   fp18_set_dig(c, 1);",
          "1769:   for (int i = l - 1; i >= 0; i--) {",
          "1770:    fp18_sqr_cyc(c, c);",
          "1771:    for (int j = 0; j < 6; j++) {",
          "1772:     if (naf[j][i] > 0) {",
          "1773:      fp18_mul(c, c, t[j]);",
          "1774:     }",
          "1775:     if (naf[j][i] < 0) {",
          "1776:      fp18_inv_cyc(t[j], t[j]);",
          "1777:      fp18_mul(c, c, t[j]);",
          "1778:      fp18_inv_cyc(t[j], t[j]);",
          "1779:     }",
          "1780:    }",
          "1781:   }",
          "1782:  }",
          "1783:  RLC_CATCH_ANY {",
          "1784:   RLC_THROW(ERR_CAUGHT);",
          "1785:  }",
          "1786:  RLC_FINALLY {",
          "1787:   bn_free(n);",
          "1788:   bn_free(x);",
          "1789:   for (size_t i = 0; i < 6; i++) {",
          "1790:    bn_free(_b[i]);",
          "1791:    fp18_free(t[i]);",
          "1792:   }",
          "1793:  }",
          "1794: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1993: }",
          "1995: void fp24_exp_cyc(fp24_t c, const fp24_t a, const bn_t b) {",
          "1998:  if (bn_is_zero(b)) {",
          "2001:  }",
          "2003:  if ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {",
          "2012:   RLC_TRY {",
          "2018:     fp24_null(t[i]);",
          "2019:     fp24_new(t[i]);",
          "2020:    }",
          "2058:     }",
          "2067:     }",
          "2073:    }",
          "2076:    RLC_THROW(ERR_CAUGHT);",
          "2077:   }",
          "2078:   RLC_FINALLY {",
          "2083:     fp24_free(t[i]);",
          "2084:    }",
          "2085:   }",
          "2086:  } else {",
          "2087:   fp24_t t, *u = RLC_ALLOCA(fp24_t, w);",
          "2089:   fp24_null(t);",
          "",
          "[Removed Lines]",
          "1996:  size_t j, k, w = bn_ham(b);",
          "1999:   fp24_set_dig(c, 1);",
          "2000:   return;",
          "2004:   size_t l, _l[8];",
          "2005:   int8_t naf[8][RLC_FP_BITS + 1];",
          "2006:   fp24_t t[8];",
          "2007:   bn_t _b[8], n, x;",
          "2009:   bn_null(n);",
          "2010:   bn_null(x);",
          "2013:    bn_new(n);",
          "2014:    bn_new(x);",
          "2015:    for (int i = 0; i < 8; i++) {",
          "2016:     bn_null(_b[i]);",
          "2017:     bn_new(_b[i]);",
          "2022:    ep_curve_get_ord(n);",
          "2023:    fp_prime_get_par(x);",
          "2024:    bn_rec_frb(_b, 8, b, x, n, ep_curve_is_pairf() == EP_BN);",
          "2026:    if (ep_curve_is_pairf()) {",
          "2027:     l = 0;",
          "2029:     fp24_copy(t[0], a);",
          "2030:     for (int i = 0; i < 8; i++) {",
          "2031:      _l[i] = RLC_FP_BITS + 1;",
          "2032:      bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "2033:      l = RLC_MAX(l, _l[i]);",
          "2034:      if (i > 0) {",
          "2035:       fp24_frb(t[i], t[i - 1], 1);",
          "2036:      }",
          "2037:     }",
          "2039:     for (int i = 0; i < 8; i++) {",
          "2040:      if (bn_sign(_b[i]) == RLC_NEG) {",
          "2041:       fp24_inv_cyc(t[i], t[i]);",
          "2042:      }",
          "2043:     }",
          "2045:     fp24_set_dig(c, 1);",
          "2046:     for (int i = l - 1; i >= 0; i--) {",
          "2047:      fp24_sqr_cyc(c, c);",
          "2048:      for (int j = 0; j < 8; j++) {",
          "2049:       if (naf[j][i] > 0) {",
          "2050:        fp24_mul(c, c, t[j]);",
          "2051:       }",
          "2052:       if (naf[j][i] < 0) {",
          "2053:        fp24_inv_cyc(t[j], t[j]);",
          "2054:        fp24_mul(c, c, t[j]);",
          "2055:        fp24_inv_cyc(t[j], t[j]);",
          "2056:       }",
          "2057:      }",
          "2059:    } else {",
          "2060:     fp24_copy(t[0], a);",
          "2062:     for (int i = bn_bits(b) - 2; i >= 0; i--) {",
          "2063:      fp24_sqr_cyc(t[0], t[0]);",
          "2064:      if (bn_get_bit(b, i)) {",
          "2065:       fp24_mul(t[0], t[0], a);",
          "2066:      }",
          "2069:     fp24_copy(c, t[0]);",
          "2070:     if (bn_sign(b) == RLC_NEG) {",
          "2071:      fp24_inv_cyc(c, c);",
          "2072:     }",
          "2074:   }",
          "2075:   RLC_CATCH_ANY {",
          "2079:    bn_free(n);",
          "2080:    bn_free(x);",
          "2081:    for (int i = 0; i < 8; i++) {",
          "2082:     bn_free(_b[i]);",
          "",
          "[Added Lines]",
          "2220:  size_t l, w = bn_ham(b);",
          "2223:   return fp24_set_dig(c, 1);",
          "2227:   fp24_t r, s, t[1 << (RLC_WIDTH - 2)];",
          "2228:   int8_t naf[RLC_FP_BITS + 1], *k;",
          "2230:   if (bn_bits(b) <= RLC_DIG) {",
          "2231:    w = 2;",
          "2232:   } else {",
          "2233:    w = RLC_WIDTH;",
          "2234:   }",
          "2236:   fp24_null(r);",
          "2237:   fp24_null(s);",
          "2240:    fp24_new(r);",
          "2241:    fp24_new(s);",
          "2242:    for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i ++) {",
          "2247: #if RLC_WIDTH > 2",
          "2248:    fp24_sqr_cyc(t[0], a);",
          "2249:    fp24_mul(t[1], t[0], a);",
          "2250:    for (int i = 2; i < (1 << (w - 2)); i++) {",
          "2251:     fp24_mul(t[i], t[i - 1], t[0]);",
          "2252:    }",
          "2253: #endif",
          "2254:    fp24_copy(t[0], a);",
          "2256:    l = RLC_FP_BITS + 1;",
          "2257:    fp24_set_dig(r, 1);",
          "2258:    bn_rec_naf(naf, &l, b, w);",
          "2260:    k = naf + l - 1;",
          "2261:    for (int i = l - 1; i >= 0; i--, k--) {",
          "2262:     fp24_sqr_cyc(r, r);",
          "2264:     if (*k > 0) {",
          "2265:      fp24_mul(r, r, t[*k / 2]);",
          "2267:     if (*k < 0) {",
          "2268:      fp24_inv_cyc(s, t[-*k / 2]);",
          "2269:      fp24_mul(r, r, s);",
          "2271:    }",
          "2273:    if (bn_sign(b) == RLC_NEG) {",
          "2274:     fp24_inv_cyc(c, r);",
          "2275:    } else {",
          "2276:     fp24_copy(c, r);",
          "2278:   } RLC_CATCH_ANY {",
          "2282:    fp24_free(r);",
          "2283:    fp24_free(s);",
          "2284:    for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i++) {",
          "2289:   size_t j, k;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2092:    if (u == NULL) {",
          "2093:     RLC_THROW(ERR_NO_MEMORY);",
          "2094:    }",
          "2096:     fp24_null(u[i]);",
          "2097:     fp24_new(u[i]);",
          "2098:    }",
          "",
          "[Removed Lines]",
          "2095:    for (size_t i = 0; i < w; i++) {",
          "",
          "[Added Lines]",
          "2298:    for (int i = 0; i < w; i++) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2144:  }",
          "2145: }",
          "2147: void fp24_exp_cyc_sim(fp24_t e, const fp24_t a, const bn_t b, const fp24_t c,",
          "2148:   const bn_t d) {",
          "2149:  int n0, n1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2350: void fp24_exp_cyc_gls(fp24_t c, const fp24_t a, const bn_t b) {",
          "2351:  size_t l, _l[8];",
          "2352:  int8_t naf[8][RLC_FP_BITS + 1];",
          "2353:  fp24_t t[8];",
          "2354:  bn_t _b[8], n, x;",
          "2356:  if (bn_is_zero(b)) {",
          "2357:   fp24_set_dig(c, 1);",
          "2358:   return;",
          "2359:  }",
          "2361:  bn_null(n);",
          "2362:  bn_null(x);",
          "2364:  RLC_TRY {",
          "2365:   bn_new(n);",
          "2366:   bn_new(x);",
          "2367:   for (int i = 0; i < 8; i++) {",
          "2368:    bn_null(_b[i]);",
          "2369:    bn_new(_b[i]);",
          "2370:    fp24_null(t[i]);",
          "2371:    fp24_new(t[i]);",
          "2372:   }",
          "2374:   ep_curve_get_ord(n);",
          "2375:   fp_prime_get_par(x);",
          "2376:   bn_abs(_b[0], b);",
          "2377:   bn_mod(_b[0], _b[0], n);",
          "2378:   if (bn_sign(b) == RLC_NEG) {",
          "2379:    bn_neg(_b[0], _b[0]);",
          "2380:   }",
          "2381:   bn_rec_frb(_b, 8, _b[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "2383:   fp24_copy(t[0], a);",
          "2384:   for (size_t i = 1; i < 8; i++) {",
          "2385:    fp24_frb(t[i], t[i - 1], 1);",
          "2386:   }",
          "2388:   l = 0;",
          "2389:   for (size_t i = 0; i < 8; i++) {",
          "2390:    if (bn_sign(_b[i]) == RLC_NEG) {",
          "2391:     fp24_inv_cyc(t[i], t[i]);",
          "2392:    }",
          "2393:    _l[i] = RLC_FP_BITS + 1;",
          "2394:    bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "2395:    l = RLC_MAX(l, _l[i]);",
          "2396:   }",
          "2398:   fp24_set_dig(c, 1);",
          "2399:   for (int i = l - 1; i >= 0; i--) {",
          "2400:    fp24_sqr_cyc(c, c);",
          "2401:    for (size_t j = 0; j < 8; j++) {",
          "2402:     if (naf[j][i] > 0) {",
          "2403:      fp24_mul(c, c, t[j]);",
          "2404:     }",
          "2405:     if (naf[j][i] < 0) {",
          "2406:      fp24_inv_cyc(t[j], t[j]);",
          "2407:      fp24_mul(c, c, t[j]);",
          "2408:      fp24_inv_cyc(t[j], t[j]);",
          "2409:     }",
          "2410:    }",
          "2411:   }",
          "2412:  } RLC_CATCH_ANY {",
          "2413:   RLC_THROW(ERR_CAUGHT);",
          "2414:  }",
          "2415:  RLC_FINALLY {",
          "2416:   bn_free(n);",
          "2417:   bn_free(x);",
          "2418:   for (size_t i = 0; i < 8; i++) {",
          "2419:    bn_free(_b[i]);",
          "2420:    fp24_free(t[i]);",
          "2421:   }",
          "2422:  }",
          "2423: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2601: }",
          "2603: void fp48_exp_cyc(fp48_t c, const fp48_t a, const bn_t b) {",
          "2606:  if (bn_is_zero(b)) {",
          "2607:   return fp48_set_dig(c, 1);",
          "2608:  }",
          "2610:  if ((bn_bits(b) > RLC_DIG) && ((w << 3) > bn_bits(b))) {",
          "2615:   RLC_TRY {",
          "2623:     }",
          "2624:    }",
          "2627:    if (bn_sign(b) == RLC_NEG) {",
          "2629:    }",
          "2632:    RLC_THROW(ERR_CAUGHT);",
          "2633:   }",
          "2634:   RLC_FINALLY {",
          "2636:   }",
          "2637:  } else {",
          "2638:   fp48_t t, *u = RLC_ALLOCA(fp48_t, w);",
          "2640:   fp48_null(t);",
          "",
          "[Removed Lines]",
          "2604:  int i, j, k, w = bn_ham(b);",
          "2611:   fp48_t t;",
          "2613:   fp48_null(t)",
          "2616:    fp48_new(t);",
          "2618:    fp48_copy(t, a);",
          "2619:    for (i = bn_bits(b) - 2; i >= 0; i--) {",
          "2620:     fp48_sqr_cyc(t, t);",
          "2621:     if (bn_get_bit(b, i)) {",
          "2622:      fp48_mul(t, t, a);",
          "2626:    fp48_copy(c, t);",
          "2628:     fp48_inv_cyc(c, c);",
          "2630:   }",
          "2631:   RLC_CATCH_ANY {",
          "2635:    fp48_free(t);",
          "",
          "[Added Lines]",
          "2882:  size_t l, w = bn_ham(b);",
          "2889:   fp48_t r, s, t[1 << (RLC_WIDTH - 2)];",
          "2890:   int8_t naf[RLC_FP_BITS + 1], *k;",
          "2892:   if (bn_bits(b) <= RLC_DIG) {",
          "2893:    w = 2;",
          "2894:   } else {",
          "2895:    w = RLC_WIDTH;",
          "2896:   }",
          "2898:   fp48_null(r);",
          "2899:   fp48_null(s);",
          "2902:    fp48_new(r);",
          "2903:    fp48_new(s);",
          "2904:    for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i ++) {",
          "2905:     fp48_null(t[i]);",
          "2906:     fp48_new(t[i]);",
          "2907:    }",
          "2909: #if RLC_WIDTH > 2",
          "2910:    fp48_sqr_cyc(t[0], a);",
          "2911:    fp48_mul(t[1], t[0], a);",
          "2912:    for (int i = 2; i < (1 << (w - 2)); i++) {",
          "2913:     fp48_mul(t[i], t[i - 1], t[0]);",
          "2914:    }",
          "2915: #endif",
          "2916:    fp48_copy(t[0], a);",
          "2918:    l = RLC_FP_BITS + 1;",
          "2919:    fp48_set_dig(r, 1);",
          "2920:    bn_rec_naf(naf, &l, b, w);",
          "2922:    k = naf + l - 1;",
          "2923:    for (int i = l - 1; i >= 0; i--, k--) {",
          "2924:     fp48_sqr_cyc(r, r);",
          "2926:     if (*k > 0) {",
          "2927:      fp48_mul(r, r, t[*k / 2]);",
          "2928:     }",
          "2929:     if (*k < 0) {",
          "2930:      fp48_inv_cyc(s, t[-*k / 2]);",
          "2931:      fp48_mul(r, r, s);",
          "2936:     fp48_inv_cyc(c, r);",
          "2937:    } else {",
          "2938:     fp48_copy(c, r);",
          "2940:   } RLC_CATCH_ANY {",
          "2944:    fp48_free(r);",
          "2945:    fp48_free(s);",
          "2946:    for (int i = 0; i < (1 << (RLC_WIDTH - 2)); i++) {",
          "2947:     fp48_free(t[i]);",
          "2948:    }",
          "2951:   size_t j, k;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2643:    if (u == NULL) {",
          "2644:     RLC_THROW(ERR_NO_MEMORY);",
          "2645:    }",
          "2647:     fp48_null(u[i]);",
          "2648:     fp48_new(u[i]);",
          "2649:    }",
          "",
          "[Removed Lines]",
          "2646:    for (i = 0; i < w; i++) {",
          "",
          "[Added Lines]",
          "2960:    for (int i = 0; i < w; i++) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2652:    j = 0;",
          "2653:    fp48_copy(t, a);",
          "2655:     fp48_sqr_pck(t, t);",
          "2656:     if (bn_get_bit(b, i)) {",
          "2657:      fp48_copy(u[j++], t);",
          "",
          "[Removed Lines]",
          "2654:    for (i = 1; i < bn_bits(b); i++) {",
          "",
          "[Added Lines]",
          "2968:    for (size_t i = 1; i < bn_bits(b); i++) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2674:     fp48_copy(c, u[0]);",
          "2675:    }",
          "2678:     fp48_mul(c, c, u[i]);",
          "2679:    }",
          "",
          "[Removed Lines]",
          "2677:    for (i = j; i < k; i++) {",
          "",
          "[Added Lines]",
          "2991:    for (size_t i = j; i < k; i++) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2686:    RLC_THROW(ERR_CAUGHT);",
          "2687:   }",
          "2688:   RLC_FINALLY {",
          "2690:     fp48_free(u[i]);",
          "2691:    }",
          "2692:    fp48_free(t);",
          "",
          "[Removed Lines]",
          "2689:    for (i = 0; i < w; i++) {",
          "",
          "[Added Lines]",
          "3003:    for (size_t i = 0; i < w; i++) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2695:  }",
          "2696: }",
          "2698: void fp48_exp_cyc_sim(fp48_t e, const fp48_t a, const bn_t b, const fp48_t c,",
          "2699:   const bn_t d) {",
          "2700:  int n0, n1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3012: void fp48_exp_cyc_gls(fp48_t c, const fp48_t a, const bn_t b) {",
          "3013:  size_t l, _l[16];",
          "3014:  int8_t naf[16][RLC_FP_BITS + 1];",
          "3015:  fp48_t t[16];",
          "3016:  bn_t _b[16], n, x;",
          "3018:  if (bn_is_zero(b)) {",
          "3019:   fp48_set_dig(c, 1);",
          "3020:   return;",
          "3021:  }",
          "3023:  bn_null(n);",
          "3024:  bn_null(x);",
          "3026:  RLC_TRY {",
          "3027:   bn_new(n);",
          "3028:   bn_new(x);",
          "3029:   for (int i = 0; i < 8; i++) {",
          "3030:    bn_null(_b[i]);",
          "3031:    bn_new(_b[i]);",
          "3032:    fp48_null(t[i]);",
          "3033:    fp48_new(t[i]);",
          "3034:   }",
          "3036:   ep_curve_get_ord(n);",
          "3037:   fp_prime_get_par(x);",
          "3038:   bn_abs(_b[0], b);",
          "3039:   bn_mod(_b[0], _b[0], n);",
          "3040:   if (bn_sign(b) == RLC_NEG) {",
          "3041:    bn_neg(_b[0], _b[0]);",
          "3042:   }",
          "3043:   bn_rec_frb(_b, 16, _b[0], x, n, ep_curve_is_pairf() == EP_BN);",
          "3045:   fp48_copy(t[0], a);",
          "3046:   for (size_t i = 1; i < 16; i++) {",
          "3047:    fp48_frb(t[i], t[i - 1], 1);",
          "3048:   }",
          "3050:   l = 0;",
          "3051:   for (size_t i = 0; i < 16; i++) {",
          "3052:    if (bn_sign(_b[i]) == RLC_NEG) {",
          "3053:     fp48_inv_cyc(t[i], t[i]);",
          "3054:    }",
          "3055:    _l[i] = RLC_FP_BITS + 1;",
          "3056:    bn_rec_naf(naf[i], &_l[i], _b[i], 2);",
          "3057:    l = RLC_MAX(l, _l[i]);",
          "3058:   }",
          "3060:   fp48_set_dig(c, 1);",
          "3061:   for (int i = l - 1; i >= 0; i--) {",
          "3062:    fp48_sqr_cyc(c, c);",
          "3063:    for (size_t j = 0; j < 16; j++) {",
          "3064:     if (naf[j][i] > 0) {",
          "3065:      fp48_mul(c, c, t[j]);",
          "3066:     }",
          "3067:     if (naf[j][i] < 0) {",
          "3068:      fp48_inv_cyc(t[j], t[j]);",
          "3069:      fp48_mul(c, c, t[j]);",
          "3070:      fp48_inv_cyc(t[j], t[j]);",
          "3071:     }",
          "3072:    }",
          "3073:   }",
          "3074:  } RLC_CATCH_ANY {",
          "3075:   RLC_THROW(ERR_CAUGHT);",
          "3076:  }",
          "3077:  RLC_FINALLY {",
          "3078:   bn_free(n);",
          "3079:   bn_free(x);",
          "3080:   for (size_t i = 0; i < 16; i++) {",
          "3081:    bn_free(_b[i]);",
          "3082:    fp48_free(t[i]);",
          "3083:   }",
          "3084:  }",
          "3085: }",
          "",
          "---------------"
        ],
        "src/pc/relic_pc_exp.c||src/pc/relic_pc_exp.c": [
          "File: src/pc/relic_pc_exp.c -> src/pc/relic_pc_exp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: }",
          "142: void gt_exp(gt_t c, const gt_t a, const bn_t b) {",
          "148:  if (bn_bits(b) <= RLC_DIG) {",
          "149:   gt_exp_dig(c, a, b->dp[0]);",
          "150:   if (bn_sign(b) == RLC_NEG) {",
          "",
          "[Removed Lines]",
          "143:  bn_t n, _b;",
          "145:  bn_null(n);",
          "146:  bn_null(_b);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:   return;",
          "154:  }",
          "163: #if FP_PRIME <= 1536",
          "165: #else",
          "167: #endif",
          "174: }",
          "176: void gt_exp_dig(gt_t c, const gt_t a, dig_t b) {",
          "179:  if (b == 0) {",
          "180:   gt_set_unity(c);",
          "181:   return;",
          "182:  }",
          "184:  gt_null(t);",
          "186:  RLC_TRY {",
          "187:   gt_new(t);",
          "189:   gt_copy(t, a);",
          "190:   for (int i = util_bits_dig(b) - 2; i >= 0; i--) {",
          "191:    gt_sqr(t, t);",
          "193:     gt_mul(t, t, a);",
          "194:    }",
          "195:   }",
          "",
          "[Removed Lines]",
          "156:  RLC_TRY {",
          "157:   bn_new(n);",
          "158:   bn_new(_b);",
          "160:   pc_get_ord(n);",
          "161:   bn_mod(_b, b, n);",
          "164:   RLC_CAT(RLC_GT_LOWER, exp_cyc)(c, a, _b);",
          "166:   RLC_CAT(RLC_GT_LOWER, exp)(c, a, _b);",
          "168:  } RLC_CATCH_ANY {",
          "169:   RLC_THROW(ERR_CAUGHT);",
          "170:  } RLC_FINALLY {",
          "171:   bn_free(n);",
          "172:   bn_free(_b);",
          "173:  }",
          "177:  gt_t t;",
          "192:    if (b & ((dig_t)1 << i)) {",
          "",
          "[Added Lines]",
          "152:  RLC_CAT(RLC_GT_LOWER, exp_cyc_gls)(c, a, b);",
          "154:  RLC_CAT(RLC_GT_LOWER, exp)(c, a, b);",
          "159:  gt_t s, t;",
          "160:  bn_t _b;",
          "161:  int8_t u, naf[RLC_DIG + 1];",
          "162:  size_t l;",
          "169:  gt_null(s);",
          "171:  bn_null(_k);",
          "174:   gt_new(s);",
          "176:   bn_new(_b);",
          "178:   bn_set_dig(_b, b);",
          "180:   l = RLC_DIG + 1;",
          "181:   bn_rec_naf(naf, &l, _b, 2);",
          "183:   gt_inv(s, a);",
          "187:    u = naf[i];",
          "188:    if (u > 0) {",
          "190:    } else if (u < 0) {",
          "191:     gt_mul(t, t, s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:   RLC_THROW(ERR_CAUGHT);",
          "201:  }",
          "202:  RLC_FINALLY {",
          "203:   gt_free(t);",
          "204:  }",
          "205: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:   gt_free(s);",
          "203:   bn_free(_b);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:   gt_get_ord(n);",
          "223:   bn_mod(_b, b, n);",
          "224:   bn_mod(_d, d, n);",
          "225: #if FP_PRIME <= 1536",
          "226:   RLC_CAT(RLC_GT_LOWER, exp_cyc_sim)(e, a, _b, c, _d);",
          "227: #else",
          "228:   gt_exp(t, a, _b);",
          "229:   gt_exp(e, c, _d);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   (void)t;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240: }",
          "242: void gt_exp_gen(gt_t c, const bn_t b) {",
          "244:  gt_t g;",
          "248:  gt_null(g);",
          "250:  RLC_TRY {",
          "253:   gt_new(g);",
          "257:   gt_get_gen(g);",
          "259:  } RLC_CATCH_ANY {",
          "260:   RLC_THROW(ERR_CAUGHT);",
          "261:  } RLC_FINALLY {",
          "264:   gt_free(g);",
          "265:  }",
          "266: }",
          "",
          "[Removed Lines]",
          "243:  bn_t n, _b;",
          "246:  bn_null(n);",
          "247:  bn_null(_b);",
          "251:   bn_new(n);",
          "252:   bn_new(_b);",
          "255:   pc_get_ord(n);",
          "256:   bn_mod(_b, b, n);",
          "258:   gt_exp(c, g, _b);",
          "262:   bn_free(n);",
          "263:   bn_free(_b);",
          "",
          "[Added Lines]",
          "253:   gt_exp(c, g, b);",
          "",
          "---------------"
        ],
        "test/test_fpx.c||test/test_fpx.c": [
          "File: test/test_fpx.c -> test/test_fpx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4676:    TEST_ASSERT(fp12_cmp(b, c) == RLC_EQ, end);",
          "4677:         } TEST_END;",
          "4679:   TEST_CASE(\"sparse cyclotomic exponentiation is correct\") {",
          "4680:    int g[3] = {0, 0, RLC_FP_BITS - 1};",
          "4681:    do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4679:   if (ep_curve_is_pairf() && ep_param_embed() == 12) {",
          "4680:    TEST_CASE(\"cyclotomic exponentiation in subgroup is correct\") {",
          "4681:     fp12_rand(a);",
          "4682:     pp_exp_k12(a, a);",
          "4683:     bn_zero(f);",
          "4684:     fp12_exp_cyc_gls(c, a, f);",
          "4685:     TEST_ASSERT(fp12_cmp_dig(c, 1) == RLC_EQ, end);",
          "4686:     bn_set_dig(f, 1);",
          "4687:     fp12_exp_cyc_gls(c, a, f);",
          "4688:     TEST_ASSERT(fp12_cmp(c, a) == RLC_EQ, end);",
          "4689:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "4690:     fp12_exp(b, a, f);",
          "4691:     fp12_exp_cyc_gls(c, a, f);",
          "4692:     TEST_ASSERT(fp12_cmp(b, c) == RLC_EQ, end);",
          "4693:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "4694:     fp12_exp_cyc_gls(b, a, f);",
          "4695:     bn_neg(f, f);",
          "4696:     fp12_exp_cyc_gls(c, a, f);",
          "4697:     fp12_inv_cyc(c, c);",
          "4698:     TEST_ASSERT(fp12_cmp(b, c) == RLC_EQ, end);",
          "4699:    } TEST_END;",
          "4700:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5351:    TEST_ASSERT(fp16_cmp(b, c) == RLC_EQ, end);",
          "5352:   } TEST_END;",
          "5355:    fp16_rand(a);",
          "5356:    fp16_conv_cyc(a, a);",
          "5357:    bn_zero(f);",
          "",
          "[Removed Lines]",
          "5354:         TEST_CASE(\"cyclotomic exponentiation is correct\") {",
          "",
          "[Added Lines]",
          "5377:   TEST_CASE(\"cyclotomic exponentiation is correct\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5370:    fp16_exp_cyc(c, a, f);",
          "5371:    fp16_inv_cyc(c, c);",
          "5372:    TEST_ASSERT(fp16_cmp(b, c) == RLC_EQ, end);",
          "5374:  }",
          "5375:  RLC_CATCH_ANY {",
          "5376:   util_print(\"FATAL ERROR!\\n\");",
          "",
          "[Removed Lines]",
          "5373:         } TEST_END;",
          "",
          "[Added Lines]",
          "5397:    bn_set_2b(f, RLC_FP_BITS - 1);",
          "5398:    bn_set_bit(f, RLC_FP_BITS / 2, 1);",
          "5399:    bn_set_bit(f, 0, 1);",
          "5400:    fp16_rand(a);",
          "5401:    fp16_conv_cyc(a, a);",
          "5402:    fp16_exp_cyc(b, a, f);",
          "5403:    bn_neg(f, f);",
          "5404:    fp16_exp_cyc(c, a, f);",
          "5405:    fp16_inv_cyc(c, c);",
          "5406:    TEST_ASSERT(fp16_cmp(b, c) == RLC_EQ, end);",
          "5407:   } TEST_END;",
          "5409:   if (ep_curve_is_pairf() && ep_param_embed() == 16) {",
          "5410:    TEST_CASE(\"cyclotomic exponentiation in subgroup is correct\") {",
          "5411:     fp16_rand(a);",
          "5412:     pp_exp_k16(a, a);",
          "5413:     bn_zero(f);",
          "5414:     fp16_exp_cyc(c, a, f);",
          "5415:     TEST_ASSERT(fp16_cmp_dig(c, 1) == RLC_EQ, end);",
          "5416:     bn_set_dig(f, 1);",
          "5417:     fp16_exp_cyc(c, a, f);",
          "5418:     TEST_ASSERT(fp16_cmp(c, a) == RLC_EQ, end);",
          "5419:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "5420:     fp16_exp(b, a, f);",
          "5421:     fp16_exp_cyc(c, a, f);",
          "5422:     TEST_ASSERT(fp16_cmp(b, c) == RLC_EQ, end);",
          "5423:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "5424:     fp16_exp_cyc(b, a, f);",
          "5425:     bn_neg(f, f);",
          "5426:     fp16_exp_cyc(c, a, f);",
          "5427:     fp16_inv_cyc(c, c);",
          "5428:     TEST_ASSERT(fp16_cmp(b, c) == RLC_EQ, end);",
          "5429:    } TEST_END;",
          "5430:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6087:   } TEST_END;",
          "6088: #endif",
          "6092:     fp18_rand(a);",
          "6094:     pp_exp_k18(a, a);",
          "6095:     bn_zero(f);",
          "6097:     TEST_ASSERT(fp18_cmp_dig(c, 1) == RLC_EQ, end);",
          "6098:     bn_set_dig(f, 1);",
          "6100:     TEST_ASSERT(fp18_cmp(c, a) == RLC_EQ, end);",
          "6101:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "6102:     fp18_exp(b, a, f);",
          "6104:     TEST_ASSERT(fp18_cmp(b, c) == RLC_EQ, end);",
          "6105:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "6107:     bn_neg(f, f);",
          "6109:     fp18_inv_cyc(c, c);",
          "6110:     TEST_ASSERT(fp18_cmp(b, c) == RLC_EQ, end);",
          "6123:   }",
          "6125:   TEST_CASE(\"sparse cyclotomic exponentiation is correct\") {",
          "",
          "[Removed Lines]",
          "6090:   if (ep_curve_is_pairf() == EP_K18) {",
          "6091:          TEST_CASE(\"cyclotomic exponentiation is correct\") {",
          "6093:     fp18_conv_cyc(a, a);",
          "6096:     fp18_exp_cyc(c, a, f);",
          "6099:     fp18_exp_cyc(c, a, f);",
          "6103:     fp18_exp_cyc(c, a, f);",
          "6106:     fp18_exp_cyc(b, a, f);",
          "6108:     fp18_exp_cyc(c, a, f);",
          "6112:     bn_set_2b(f, RLC_FP_BITS - 1);",
          "6113:     bn_set_bit(f, RLC_FP_BITS / 2, 1);",
          "6114:     bn_set_bit(f, 0, 1);",
          "6115:     fp18_rand(a);",
          "6116:     fp18_conv_cyc(a, a);",
          "6117:     fp18_exp_cyc(b, a, f);",
          "6118:     bn_neg(f, f);",
          "6119:     fp18_exp_cyc(c, a, f);",
          "6120:     fp18_inv_cyc(c, c);",
          "6121:     TEST_ASSERT(fp18_cmp(b, c) == RLC_EQ, end);",
          "6122:          } TEST_END;",
          "",
          "[Added Lines]",
          "6147:   TEST_CASE(\"cyclotomic exponentiation is correct\") {",
          "6148:    fp18_rand(a);",
          "6149:    fp18_conv_cyc(a, a);",
          "6150:    bn_zero(f);",
          "6151:    fp18_exp_cyc(c, a, f);",
          "6152:    TEST_ASSERT(fp18_cmp_dig(c, 1) == RLC_EQ, end);",
          "6153:    bn_set_dig(f, 1);",
          "6154:    fp18_exp_cyc(c, a, f);",
          "6155:    TEST_ASSERT(fp18_cmp(c, a) == RLC_EQ, end);",
          "6156:    bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "6157:    fp18_exp(b, a, f);",
          "6158:    fp18_exp_cyc(c, a, f);",
          "6159:    TEST_ASSERT(fp18_cmp(b, c) == RLC_EQ, end);",
          "6160:    bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "6161:    fp18_exp_cyc(b, a, f);",
          "6162:    bn_neg(f, f);",
          "6163:    fp18_exp_cyc(c, a, f);",
          "6164:    fp18_inv_cyc(c, c);",
          "6165:    TEST_ASSERT(fp18_cmp(b, c) == RLC_EQ, end);",
          "6167:    bn_set_2b(f, RLC_FP_BITS - 1);",
          "6168:    bn_set_bit(f, RLC_FP_BITS / 2, 1);",
          "6169:    bn_set_bit(f, 0, 1);",
          "6170:    fp18_rand(a);",
          "6171:    fp18_conv_cyc(a, a);",
          "6172:    fp18_exp_cyc(b, a, f);",
          "6173:    bn_neg(f, f);",
          "6174:    fp18_exp_cyc(c, a, f);",
          "6175:    fp18_inv_cyc(c, c);",
          "6176:    TEST_ASSERT(fp18_cmp(b, c) == RLC_EQ, end);",
          "6177:   } TEST_END;",
          "6179:   if (ep_curve_is_pairf() && ep_param_embed() == 18) {",
          "6180:    TEST_CASE(\"cyclotomic exponentiation in subgroup is correct\") {",
          "6184:     fp18_exp_cyc_gls(c, a, f);",
          "6187:     fp18_exp_cyc_gls(c, a, f);",
          "6191:     fp18_exp_cyc_gls(c, a, f);",
          "6194:     fp18_exp_cyc_gls(b, a, f);",
          "6196:     fp18_exp_cyc_gls(c, a, f);",
          "6199:    } TEST_END;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6875:    TEST_ASSERT(fp24_cmp(b, c) == RLC_EQ, end);",
          "6876:         } TEST_END;",
          "6878:   TEST_CASE(\"sparse cyclotomic exponentiation is correct\") {",
          "6879:    int g[3] = {0, 0, RLC_FP_BITS - 1};",
          "6880:    do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6955:   if (ep_curve_is_pairf() && ep_param_embed() == 24) {",
          "6956:    TEST_CASE(\"cyclotomic exponentiation in subgroup is correct\") {",
          "6957:     fp24_rand(a);",
          "6958:     pp_exp_k24(a, a);",
          "6959:     bn_zero(f);",
          "6960:     fp24_exp_cyc_gls(c, a, f);",
          "6961:     TEST_ASSERT(fp24_cmp_dig(c, 1) == RLC_EQ, end);",
          "6962:     bn_set_dig(f, 1);",
          "6963:     fp24_exp_cyc_gls(c, a, f);",
          "6964:     TEST_ASSERT(fp24_cmp(c, a) == RLC_EQ, end);",
          "6965:     bn_rand(f, RLC_POS, RLC_DIG);",
          "6966:     fp24_exp(b, a, f);",
          "6967:     fp24_exp_cyc_gls(c, a, f);",
          "6968:     TEST_ASSERT(fp24_cmp(b, c) == RLC_EQ, end);",
          "6969:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "6970:     fp24_exp_cyc_gls(b, a, f);",
          "6971:     bn_neg(f, f);",
          "6972:     fp24_exp_cyc_gls(c, a, f);",
          "6973:     fp24_inv_cyc(c, c);",
          "6974:     TEST_ASSERT(fp24_cmp(b, c) == RLC_EQ, end);",
          "6975:    } TEST_END;",
          "6976:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7667:    TEST_ASSERT(fp48_cmp(b, c) == RLC_EQ, end);",
          "7668:         } TEST_END;",
          "7670:   TEST_CASE(\"sparse cyclotomic exponentiation is correct\") {",
          "7671:    int g[3] = {0, 0, RLC_FP_BITS - 1};",
          "7672:    do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7770:   if (ep_curve_is_pairf() && ep_param_embed() == 48) {",
          "7771:    TEST_CASE(\"cyclotomic exponentiation in subgroup is correct\") {",
          "7772:     fp48_rand(a);",
          "7773:     pp_exp_k48(a, a);",
          "7774:     bn_zero(f);",
          "7775:     fp48_exp_cyc_gls(c, a, f);",
          "7776:     TEST_ASSERT(fp48_cmp_dig(c, 1) == RLC_EQ, end);",
          "7777:     bn_set_dig(f, 1);",
          "7778:     fp48_exp_cyc_gls(c, a, f);",
          "7779:     TEST_ASSERT(fp48_cmp(c, a) == RLC_EQ, end);",
          "7780:     bn_rand(f, RLC_POS, RLC_DIG);",
          "7781:     fp48_exp(b, a, f);",
          "7782:     fp48_exp_cyc_gls(c, a, f);",
          "7783:     TEST_ASSERT(fp48_cmp(b, c) == RLC_EQ, end);",
          "7784:     bn_rand(f, RLC_POS, RLC_FP_BITS);",
          "7785:     fp48_exp_cyc_gls(b, a, f);",
          "7786:     bn_neg(f, f);",
          "7787:     fp48_exp_cyc_gls(c, a, f);",
          "7788:     fp48_inv_cyc(c, c);",
          "7789:     TEST_ASSERT(fp48_cmp(b, c) == RLC_EQ, end);",
          "7790:    } TEST_END;",
          "7791:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "361a77db5a867b8aef430e334bb25431be70cc24",
      "candidate_info": {
        "commit_hash": "361a77db5a867b8aef430e334bb25431be70cc24",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/361a77db5a867b8aef430e334bb25431be70cc24",
        "files": [
          "include/relic_bn.h",
          "include/relic_core.h",
          "include/relic_fb.h",
          "include/relic_fp.h",
          "include/relic_util.h",
          "src/arch/relic_arch_a64.c",
          "src/arch/relic_arch_arm.c",
          "src/arch/relic_arch_avr.c",
          "src/arch/relic_arch_msp.c",
          "src/arch/relic_arch_none.c",
          "src/arch/relic_arch_x64.c",
          "src/arch/relic_arch_x86.c",
          "src/bn/relic_bn_factor.c",
          "src/bn/relic_bn_shift.c",
          "src/bn/relic_bn_util.c",
          "src/cp/relic_cp_pbpsi.c",
          "src/cp/relic_cp_rsapsi.c",
          "src/cp/relic_cp_shipsi.c",
          "src/fb/relic_fb_shift.c",
          "src/fb/relic_fb_util.c",
          "src/fp/relic_fp_shift.c",
          "src/fp/relic_fp_util.c",
          "src/relic_util.c"
        ],
        "message": "Use shorter uint_t instead of unsigned int.",
        "before_after_code_files": [
          "include/relic_bn.h||include/relic_bn.h",
          "include/relic_core.h||include/relic_core.h",
          "include/relic_fb.h||include/relic_fb.h",
          "include/relic_fp.h||include/relic_fp.h",
          "include/relic_util.h||include/relic_util.h",
          "src/arch/relic_arch_a64.c||src/arch/relic_arch_a64.c",
          "src/arch/relic_arch_arm.c||src/arch/relic_arch_arm.c",
          "src/arch/relic_arch_avr.c||src/arch/relic_arch_avr.c",
          "src/arch/relic_arch_msp.c||src/arch/relic_arch_msp.c",
          "src/arch/relic_arch_none.c||src/arch/relic_arch_none.c",
          "src/arch/relic_arch_x64.c||src/arch/relic_arch_x64.c",
          "src/arch/relic_arch_x86.c||src/arch/relic_arch_x86.c",
          "src/bn/relic_bn_factor.c||src/bn/relic_bn_factor.c",
          "src/bn/relic_bn_shift.c||src/bn/relic_bn_shift.c",
          "src/bn/relic_bn_util.c||src/bn/relic_bn_util.c",
          "src/cp/relic_cp_pbpsi.c||src/cp/relic_cp_pbpsi.c",
          "src/cp/relic_cp_rsapsi.c||src/cp/relic_cp_rsapsi.c",
          "src/cp/relic_cp_shipsi.c||src/cp/relic_cp_shipsi.c",
          "src/fb/relic_fb_shift.c||src/fb/relic_fb_shift.c",
          "src/fb/relic_fb_util.c||src/fb/relic_fb_util.c",
          "src/fp/relic_fp_shift.c||src/fp/relic_fp_shift.c",
          "src/fp/relic_fp_util.c||src/fp/relic_fp_util.c",
          "src/relic_util.c||src/relic_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/relic_bn.h||include/relic_bn.h",
            "include/relic_fb.h||include/relic_fb.h",
            "include/relic_fp.h||include/relic_fp.h",
            "include/relic_util.h||include/relic_util.h",
            "src/bn/relic_bn_shift.c||src/bn/relic_bn_shift.c",
            "src/bn/relic_bn_util.c||src/bn/relic_bn_util.c",
            "src/cp/relic_cp_pbpsi.c||src/cp/relic_cp_pbpsi.c",
            "src/fb/relic_fb_util.c||src/fb/relic_fb_util.c",
            "src/fp/relic_fp_util.c||src/fp/relic_fp_util.c",
            "src/relic_util.c||src/relic_util.c"
          ],
          "candidate": [
            "include/relic_bn.h||include/relic_bn.h",
            "include/relic_fb.h||include/relic_fb.h",
            "include/relic_fp.h||include/relic_fp.h",
            "include/relic_util.h||include/relic_util.h",
            "src/bn/relic_bn_shift.c||src/bn/relic_bn_shift.c",
            "src/bn/relic_bn_util.c||src/bn/relic_bn_util.c",
            "src/cp/relic_cp_pbpsi.c||src/cp/relic_cp_pbpsi.c",
            "src/fb/relic_fb_util.c||src/fb/relic_fb_util.c",
            "src/fp/relic_fp_util.c||src/fp/relic_fp_util.c",
            "src/relic_util.c||src/relic_util.c"
          ]
        }
      },
      "candidate_diff": {
        "include/relic_bn.h||include/relic_bn.h": [
          "File: include/relic_bn.h -> include/relic_bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "558: int bn_get_bit(const bn_t a, size_t bit);",
          "",
          "[Added Lines]",
          "558: int bn_get_bit(const bn_t a, uint_t bit);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "567: void bn_set_bit(bn_t a, size_t bit, int value);",
          "",
          "[Added Lines]",
          "567: void bn_set_bit(bn_t a, uint_t bit, int value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "575: size_t bn_ham(const bn_t a);",
          "",
          "[Added Lines]",
          "575: uint_t bn_ham(const bn_t a);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "638: size_t bn_size_str(const bn_t a, unsigned int radix);",
          "",
          "[Added Lines]",
          "638: size_t bn_size_str(const bn_t a, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "650: void bn_read_str(bn_t a, const char *str, size_t len, unsigned int radix);",
          "",
          "[Added Lines]",
          "650: void bn_read_str(bn_t a, const char *str, size_t len, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "873: void bn_lsh(bn_t c, const bn_t a, unsigned int bits);",
          "",
          "[Added Lines]",
          "873: void bn_lsh(bn_t c, const bn_t a, uint_t bits);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "883: void bn_rsh(bn_t c, const bn_t a, unsigned int bits);",
          "",
          "[Added Lines]",
          "883: void bn_rsh(bn_t c, const bn_t a, uint_t bits);",
          "",
          "---------------"
        ],
        "include/relic_core.h||include/relic_core.h": [
          "File: include/relic_core.h -> include/relic_core.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "444: #if ARCH == X86",
          "446: #elif ARCH == X64 || ARCH == A64",
          "448: #endif",
          "449: } ctx_t;",
          "",
          "[Removed Lines]",
          "445:  unsigned int (*lzcnt_ptr)(unsigned int);",
          "447:  unsigned int (*lzcnt_ptr)(ull_t);",
          "",
          "[Added Lines]",
          "445:  uint_t (*lzcnt_ptr)(unsigned int);",
          "447:  uint_t (*lzcnt_ptr)(ull_t);",
          "",
          "---------------"
        ],
        "include/relic_fb.h||include/relic_fb.h": [
          "File: include/relic_fb.h -> include/relic_fb.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "541: int fb_get_bit(const fb_t a, size_t bit);",
          "",
          "[Added Lines]",
          "541: int fb_get_bit(const fb_t a, uint_t bit);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "550: void fb_set_bit(fb_t a, size_t bit, int value);",
          "",
          "[Added Lines]",
          "550: void fb_set_bit(fb_t a, uint_t bit, int value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "593: size_t fb_size_str(const fb_t a, unsigned int radix);",
          "",
          "[Added Lines]",
          "593: size_t fb_size_str(const fb_t a, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "606: void fb_read_str(fb_t a, const char *str, size_t len, unsigned int radix);",
          "",
          "[Added Lines]",
          "606: void fb_read_str(fb_t a, const char *str, size_t len, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "619: void fb_write_str(char *str, size_t len, const fb_t a, unsigned int radix);",
          "",
          "[Added Lines]",
          "619: void fb_write_str(char *str, size_t len, const fb_t a, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "756: void fb_lsh(fb_t c, const fb_t a, int bits);",
          "",
          "[Added Lines]",
          "756: void fb_lsh(fb_t c, const fb_t a, uint_t bits);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "765: void fb_rsh(fb_t c, const fb_t a, int bits);",
          "",
          "[Added Lines]",
          "765: void fb_rsh(fb_t c, const fb_t a, uint_t bits);",
          "",
          "---------------"
        ],
        "include/relic_fp.h||include/relic_fp.h": [
          "File: include/relic_fp.h -> include/relic_fp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "656: int fp_get_bit(const fp_t a, size_t bit);",
          "",
          "[Added Lines]",
          "656: int fp_get_bit(const fp_t a, uint_t bit);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "665: void fp_set_bit(fp_t a, size_t bit, int value);",
          "",
          "[Added Lines]",
          "665: void fp_set_bit(fp_t a, uint_t bit, int value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "709: size_t fp_size_str(const fp_t a, unsigned int radix);",
          "",
          "[Added Lines]",
          "709: size_t fp_size_str(const fp_t a, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "721: void fp_read_str(fp_t a, const char *str, size_t len, unsigned int radix);",
          "",
          "[Added Lines]",
          "721: void fp_read_str(fp_t a, const char *str, size_t len, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "734: void fp_write_str(char *str, size_t len, const fp_t a, unsigned int radix);",
          "",
          "[Added Lines]",
          "734: void fp_write_str(char *str, size_t len, const fp_t a, uint_t radix);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "967: void fp_lsh(fp_t c, const fp_t a, int bits);",
          "",
          "[Added Lines]",
          "967: void fp_lsh(fp_t c, const fp_t a, uint_t bits);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "976: void fp_rsh(fp_t c, const fp_t a, int bits);",
          "",
          "[Added Lines]",
          "976: void fp_rsh(fp_t c, const fp_t a, uint_t bits);",
          "",
          "---------------"
        ],
        "include/relic_util.h||include/relic_util.h": [
          "File: include/relic_util.h -> include/relic_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "306: void util_perm(unsigned int p[], int n);",
          "",
          "[Added Lines]",
          "306: void util_perm(uint_t p[], int n);",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_a64.c||src/arch/relic_arch_a64.c": [
          "File: src/arch/relic_arch_a64.c -> src/arch/relic_arch_a64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: ull_t arch_cycles(void) {",
          "209: #if TIMER == CYCLE",
          "",
          "[Removed Lines]",
          "207:  unsigned int value = 0;",
          "",
          "[Added Lines]",
          "207:  uint_t value = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:  return value;",
          "232: }",
          "235:  return core_get()->lzcnt_ptr((ull_t)x) - (8 * sizeof(ull_t) - WSIZE);",
          "236: }",
          "",
          "[Removed Lines]",
          "234: unsigned int arch_lzcnt(dig_t x) {",
          "",
          "[Added Lines]",
          "234: uint_t arch_lzcnt(dig_t x) {",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_arm.c||src/arch/relic_arch_arm.c": [
          "File: src/arch/relic_arch_arm.c -> src/arch/relic_arch_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #endif",
          "",
          "[Removed Lines]",
          "46:  volatile unsigned int *DWT_CYCCNT = (unsigned int *)0xE0001004;",
          "47:  volatile unsigned int *DWT_CONTROL = (unsigned int *)0xE0001000;",
          "48:  volatile unsigned int *SCB_DEMCR = (unsigned int *)0xE000EDFC;",
          "",
          "[Added Lines]",
          "46:  volatile uint_t *DWT_CYCCNT = (uint_t *)0xE0001004;",
          "47:  volatile uint_t *DWT_CONTROL = (uint_t *)0xE0001000;",
          "48:  volatile uint_t *SCB_DEMCR = (uint_t *)0xE000EDFC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: ull_t arch_cycles(void) {",
          "90: #if TIMER == CYCLE",
          "",
          "[Removed Lines]",
          "88:  unsigned int value = 0;",
          "",
          "[Added Lines]",
          "88:  uint_t value = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:  return value;",
          "105: }",
          "108: #ifdef WSIZE == 32",
          "109:  return lzcnt32_gcc_arm(x);",
          "110: #elif WSIZE == 64",
          "",
          "[Removed Lines]",
          "107: unsigned int arch_lzcnt(unsigned int x) {",
          "",
          "[Added Lines]",
          "107: uint_t arch_lzcnt(uint_t x) {",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_avr.c||src/arch/relic_arch_avr.c": [
          "File: src/arch/relic_arch_avr.c -> src/arch/relic_arch_avr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "55:  static const uint8_t table[16] = {",
          "56:   0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4",
          "57:  };",
          "",
          "[Removed Lines]",
          "54: unsigned int arch_lzcnt() {",
          "",
          "[Added Lines]",
          "54: uint_t arch_lzcnt() {",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_msp.c||src/arch/relic_arch_msp.c": [
          "File: src/arch/relic_arch_msp.c -> src/arch/relic_arch_msp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: static volatile uint8_t TEST_TEXTOUT __asm__(\"0x01b0\");",
          "55: union cycles_t {",
          "56:     unsigned long long cycles;",
          "57:     struct {",
          "62:     } e;",
          "63: };",
          "",
          "[Removed Lines]",
          "50: static volatile unsigned int BENCH_CYCLES_0 __asm__(\"0x01b2\");",
          "51: static volatile unsigned int BENCH_CYCLES_1 __asm__(\"0x01b4\");",
          "52: static volatile unsigned int BENCH_CYCLES_2 __asm__(\"0x01b6\");",
          "53: static volatile unsigned int BENCH_CYCLES_3 __asm__(\"0x01b8\");",
          "58:         unsigned int e0;",
          "59:         unsigned int e1;",
          "60:         unsigned int e2;",
          "61:         unsigned int e3;",
          "",
          "[Added Lines]",
          "50: static volatile uint_t BENCH_CYCLES_0 __asm__(\"0x01b2\");",
          "51: static volatile uint_t BENCH_CYCLES_1 __asm__(\"0x01b4\");",
          "52: static volatile uint_t BENCH_CYCLES_2 __asm__(\"0x01b6\");",
          "53: static volatile uint_t BENCH_CYCLES_3 __asm__(\"0x01b8\");",
          "58:         uint_t e0;",
          "59:         uint_t e1;",
          "60:         uint_t e2;",
          "61:         uint_t e3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     static const uint8_t table[16] = {",
          "96:      0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4",
          "97:     };",
          "",
          "[Removed Lines]",
          "94: unsigned int arch_lzcnt() {",
          "",
          "[Added Lines]",
          "94: uint_t arch_lzcnt() {",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_none.c||src/arch/relic_arch_none.c": [
          "File: src/arch/relic_arch_none.c -> src/arch/relic_arch_none.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  return 0;",
          "46: }",
          "49: #if WSIZE == 8 || WSIZE == 16",
          "50:  static const uint8_t table[16] = {",
          "51:   4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0",
          "",
          "[Removed Lines]",
          "48: unsigned int arch_lzcnt(dig_t a) {",
          "",
          "[Added Lines]",
          "48: uint_t arch_lzcnt(dig_t a) {",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_x64.c||src/arch/relic_arch_x64.c": [
          "File: src/arch/relic_arch_x64.c -> src/arch/relic_arch_x64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #if TIMER == CYCLE",
          "66: ull_t arch_cycles(void) {",
          "68:  asm (",
          "",
          "[Removed Lines]",
          "67:  unsigned int hi, lo;",
          "",
          "[Added Lines]",
          "67:  uint_t hi, lo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: #elif TIMER == PERF",
          "80: ull_t arch_cycles(void) {",
          "82:  ull_t index, offset, result = 0;",
          "83:  if (core_get()->perf_buf != NULL) {",
          "84:   do {",
          "",
          "[Removed Lines]",
          "81:  unsigned int seq;",
          "",
          "[Added Lines]",
          "81:  uint_t seq;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: }",
          "101: #endif",
          "104:  return core_get()->lzcnt_ptr((ull_t)x) - (8 * sizeof(ull_t) - WSIZE);",
          "105: }",
          "",
          "[Removed Lines]",
          "103: unsigned int arch_lzcnt(dig_t x) {",
          "",
          "[Added Lines]",
          "103: uint_t arch_lzcnt(dig_t x) {",
          "",
          "---------------"
        ],
        "src/arch/relic_arch_x86.c||src/arch/relic_arch_x86.c": [
          "File: src/arch/relic_arch_x86.c -> src/arch/relic_arch_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }",
          "52: ull_t arch_cycles(void) {",
          "54:  asm (",
          "",
          "[Removed Lines]",
          "53:  unsigned int hi, lo;",
          "",
          "[Added Lines]",
          "53:  uint_t hi, lo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  return ((ull_t) lo) | (((ull_t) hi) << 32);",
          "62: }",
          "65:  return core_get()->lzcnt_ptr((uint32_t)x) - (8 * sizeof(uint32_t) - WSIZE);",
          "66: }",
          "",
          "[Removed Lines]",
          "64: unsigned int arch_lzcnt(dig_t x) {",
          "",
          "[Added Lines]",
          "64: uint_t arch_lzcnt(dig_t x) {",
          "",
          "---------------"
        ],
        "src/bn/relic_bn_factor.c||src/bn/relic_bn_factor.c": [
          "File: src/bn/relic_bn_factor.c -> src/bn/relic_bn_factor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: int bn_factor(bn_t c, const bn_t a) {",
          "39:  bn_t t0, t1;",
          "40:  int result;",
          "43:  bn_null(t0);",
          "44:  bn_null(t1);",
          "",
          "[Removed Lines]",
          "41:  unsigned int i, tests;",
          "",
          "[Added Lines]",
          "41:  uint_t i, tests;",
          "",
          "---------------"
        ],
        "src/bn/relic_bn_shift.c||src/bn/relic_bn_shift.c": [
          "File: src/bn/relic_bn_shift.c -> src/bn/relic_bn_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  bn_trim(c);",
          "64: }",
          "67:  int digits;",
          "68:  dig_t carry;",
          "",
          "[Removed Lines]",
          "66: void bn_lsh(bn_t c, const bn_t a, unsigned int bits) {",
          "",
          "[Added Lines]",
          "66: void bn_lsh(bn_t c, const bn_t a, uint_t bits) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:  }",
          "98: }",
          "101:  int digits = 0;",
          "103:  bn_copy(c, a);",
          "",
          "[Removed Lines]",
          "100: void bn_rsh(bn_t c, const bn_t a, unsigned int bits) {",
          "",
          "[Added Lines]",
          "100: void bn_rsh(bn_t c, const bn_t a, uint_t bits) {",
          "",
          "---------------"
        ],
        "src/bn/relic_bn_util.c||src/bn/relic_bn_util.c": [
          "File: src/bn/relic_bn_util.c -> src/bn/relic_bn_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  return bits + util_bits_dig(a->dp[a->used - 1]);",
          "119: }",
          "122:  int d;",
          "124:  if (bit < 0) {",
          "",
          "[Removed Lines]",
          "121: int bn_get_bit(const bn_t a, size_t bit) {",
          "",
          "[Added Lines]",
          "121: int bn_get_bit(const bn_t a, uint_t bit) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:  }",
          "140: }",
          "143:  int d;",
          "145:  if (bit < 0) {",
          "",
          "[Removed Lines]",
          "142: void bn_set_bit(bn_t a, size_t bit, int value) {",
          "",
          "[Added Lines]",
          "142: void bn_set_bit(bn_t a, uint_t bit, int value) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:  }",
          "163: }",
          "166:  int c = 0;",
          "168:  for (int i = 0; i < bn_bits(a); i++) {",
          "",
          "[Removed Lines]",
          "165: size_t bn_ham(const bn_t a) {",
          "",
          "[Added Lines]",
          "165: uint_t bn_ham(const bn_t a) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:  }",
          "265: }",
          "268:  int digits = 0;",
          "269:  bn_t t;",
          "",
          "[Removed Lines]",
          "267: size_t bn_size_str(const bn_t a, unsigned int radix) {",
          "",
          "[Added Lines]",
          "267: size_t bn_size_str(const bn_t a, uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "308:  return digits + 1;",
          "309: }",
          "312:  int sign, i, j;",
          "313:  char c;",
          "",
          "[Removed Lines]",
          "311: void bn_read_str(bn_t a, const char *str, size_t len, unsigned int radix) {",
          "",
          "[Added Lines]",
          "311: void bn_read_str(bn_t a, const char *str, size_t len, uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "357:  }",
          "358: }",
          "361:  bn_t t;",
          "362:  dig_t d;",
          "363:  int digits, l, i, j;",
          "",
          "[Removed Lines]",
          "360: void bn_write_str(char *str, size_t len, const bn_t a, unsigned int radix) {",
          "",
          "[Added Lines]",
          "360: void bn_write_str(char *str, size_t len, const bn_t a, uint_t radix) {",
          "",
          "---------------"
        ],
        "src/cp/relic_cp_pbpsi.c||src/cp/relic_cp_pbpsi.c": [
          "File: src/cp/relic_cp_pbpsi.c -> src/cp/relic_cp_pbpsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  bn_t q, tj;",
          "126:  g1_t g1;",
          "127:  g2_t g2;",
          "130:  bn_null(q);",
          "131:  bn_null(tj);",
          "",
          "[Removed Lines]",
          "128:  unsigned int *shuffle = RLC_ALLOCA(unsigned int, n);",
          "",
          "[Added Lines]",
          "128:  uint_t *shuffle = RLC_ALLOCA(unsigned int, n);",
          "",
          "---------------"
        ],
        "src/cp/relic_cp_rsapsi.c||src/cp/relic_cp_rsapsi.c": [
          "File: src/cp/relic_cp_rsapsi.c -> src/cp/relic_cp_rsapsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   const bn_t y[], size_t l) {",
          "108:  int j, result = RLC_OK, len = RLC_CEIL(RLC_BN_BITS, 8);",
          "109:  uint8_t h[RLC_MD_LEN], bin[RLC_CEIL(RLC_BN_BITS, 8)];",
          "111:  bn_t p;",
          "113:  bn_null(p);",
          "",
          "[Removed Lines]",
          "110:  unsigned int *shuffle = RLC_ALLOCA(unsigned int, l);",
          "",
          "[Added Lines]",
          "110:  uint_t *shuffle = RLC_ALLOCA(unsigned int, l);",
          "",
          "---------------"
        ],
        "src/cp/relic_cp_shipsi.c||src/cp/relic_cp_shipsi.c": [
          "File: src/cp/relic_cp_shipsi.c -> src/cp/relic_cp_shipsi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   const bn_t y[], size_t n) {",
          "105:  int j, result = RLC_OK, len = RLC_CEIL(RLC_BN_BITS, 8);",
          "106:  uint8_t h[RLC_MD_LEN], bin[RLC_CEIL(RLC_BN_BITS, 8)];",
          "108:  bn_t p, q;",
          "110:  bn_null(p);",
          "",
          "[Removed Lines]",
          "107:  unsigned int *shuffle = RLC_ALLOCA(unsigned int, n);",
          "",
          "[Added Lines]",
          "107:  uint_t *shuffle = RLC_ALLOCA(unsigned int, n);",
          "",
          "---------------"
        ],
        "src/fb/relic_fb_shift.c||src/fb/relic_fb_shift.c": [
          "File: src/fb/relic_fb_shift.c -> src/fb/relic_fb_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  int digits;",
          "44:  RLC_RIP(bits, digits, bits);",
          "",
          "[Removed Lines]",
          "41: void fb_lsh(fb_t c, const fb_t a, int bits) {",
          "",
          "[Added Lines]",
          "41: void fb_lsh(fb_t c, const fb_t a, uint_t bits) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:  }",
          "64: }",
          "67:  int digits;",
          "69:  RLC_RIP(bits, digits, bits);",
          "",
          "[Removed Lines]",
          "66: void fb_rsh(fb_t c, const fb_t a, int bits) {",
          "",
          "[Added Lines]",
          "66: void fb_rsh(fb_t c, const fb_t a, uint_t bits) {",
          "",
          "---------------"
        ],
        "src/fb/relic_fb_util.c||src/fb/relic_fb_util.c": [
          "File: src/fb/relic_fb_util.c -> src/fb/relic_fb_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  while (radix > 0) {",
          "50:   if (radix != 1 && radix % 2 == 1)",
          "51:    return 0;",
          "",
          "[Removed Lines]",
          "48: static int valid_radix(unsigned int radix) {",
          "",
          "[Added Lines]",
          "48: static int valid_radix(uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  int l = 0;",
          "66:  while (radix > 0) {",
          "",
          "[Removed Lines]",
          "63: static int log_radix(unsigned int radix) {",
          "",
          "[Added Lines]",
          "63: static int log_radix(uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:  return !t;",
          "94: }",
          "97:  int d;",
          "99:  RLC_RIP(bit, d, bit);",
          "",
          "[Removed Lines]",
          "96: int fb_get_bit(const fb_t a, size_t bit) {",
          "",
          "[Added Lines]",
          "96: int fb_get_bit(const fb_t a, uint_t bit) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:  return (a[d] >> bit) & 1;",
          "102: }",
          "105:  int d;",
          "106:  dig_t mask;",
          "",
          "[Removed Lines]",
          "104: void fb_set_bit(fb_t a, size_t bit, int value) {",
          "",
          "[Added Lines]",
          "104: void fb_set_bit(fb_t a, uint_t bit, int value) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:  util_print(\"\\n\");",
          "159: }",
          "162:  bn_t t;",
          "163:  size_t digits = 0;",
          "",
          "[Removed Lines]",
          "161: size_t fb_size_str(const fb_t a, unsigned int radix) {",
          "",
          "[Added Lines]",
          "161: size_t fb_size_str(const fb_t a, uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:  return digits;",
          "187: }",
          "190:  bn_t t;",
          "192:  bn_null(t);",
          "",
          "[Removed Lines]",
          "189: void fb_read_str(fb_t a, const char *str, size_t len, unsigned int radix) {",
          "",
          "[Added Lines]",
          "189: void fb_read_str(fb_t a, const char *str, size_t len, uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "215:  }",
          "216: }",
          "219:  fb_t t;",
          "220:  int d, l, i, j;",
          "221:  char c;",
          "",
          "[Removed Lines]",
          "218: void fb_write_str(char *str, size_t len, const fb_t a, unsigned int radix) {",
          "",
          "[Added Lines]",
          "218: void fb_write_str(char *str, size_t len, const fb_t a, uint_t radix) {",
          "",
          "---------------"
        ],
        "src/fp/relic_fp_shift.c||src/fp/relic_fp_shift.c": [
          "File: src/fp/relic_fp_shift.c -> src/fp/relic_fp_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  int digits;",
          "42:  RLC_RIP(bits, digits, bits);",
          "",
          "[Removed Lines]",
          "39: void fp_lsh(fp_t c, const fp_t a, int bits) {",
          "",
          "[Added Lines]",
          "39: void fp_lsh(fp_t c, const fp_t a, uint_t bits) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: }",
          "66:  int digits;",
          "68:  RLC_RIP(bits, digits, bits);",
          "",
          "[Removed Lines]",
          "65: void fp_rsh(fp_t c, const fp_t a, int bits) {",
          "",
          "[Added Lines]",
          "65: void fp_rsh(fp_t c, const fp_t a, uint_t bits) {",
          "",
          "---------------"
        ],
        "src/fp/relic_fp_util.c||src/fp/relic_fp_util.c": [
          "File: src/fp/relic_fp_util.c -> src/fp/relic_fp_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  return 0;",
          "63: }",
          "66:  int d;",
          "68:  RLC_RIP(bit, d, bit);",
          "",
          "[Removed Lines]",
          "65: int fp_get_bit(const fp_t a, size_t bit) {",
          "",
          "[Added Lines]",
          "65: int fp_get_bit(const fp_t a, uint_t bit) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  return (a[d] >> bit) & 1;",
          "71: }",
          "74:  int d;",
          "75:  dig_t mask;",
          "",
          "[Removed Lines]",
          "73: void fp_set_bit(fp_t a, size_t bit, int value) {",
          "",
          "[Added Lines]",
          "73: void fp_set_bit(fp_t a, uint_t bit, int value) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:  }",
          "158: }",
          "161:  bn_t t;",
          "162:  size_t digits = 0;",
          "",
          "[Removed Lines]",
          "160: size_t fp_size_str(const fp_t a, unsigned int radix) {",
          "",
          "[Added Lines]",
          "160: size_t fp_size_str(const fp_t a, uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:  return digits;",
          "180: }",
          "183:  bn_t t;",
          "185:  bn_null(t);",
          "",
          "[Removed Lines]",
          "182: void fp_read_str(fp_t a, const char *str, size_t len, unsigned int radix) {",
          "",
          "[Added Lines]",
          "182: void fp_read_str(fp_t a, const char *str, size_t len, uint_t radix) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "208:  }",
          "209: }",
          "212:  bn_t t;",
          "214:  bn_null(t);",
          "",
          "[Removed Lines]",
          "211: void fp_write_str(char *str, size_t len, const fp_t a, unsigned int radix) {",
          "",
          "[Added Lines]",
          "211: void fp_write_str(char *str, size_t len, const fp_t a, uint_t radix) {",
          "",
          "---------------"
        ],
        "src/relic_util.c||src/relic_util.c": [
          "File: src/relic_util.c -> src/relic_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:  return (result == 0 ? RLC_EQ : RLC_NE);",
          "152: }",
          "155:  size_t i, j, k;",
          "157:  for (i = 0; i < n; i++) {",
          "",
          "[Removed Lines]",
          "154: void util_perm(unsigned int p[], int n) {",
          "",
          "[Added Lines]",
          "154: void util_perm(uint_t p[], int n) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "273d0053987fb198fa8fbb7cc723c8db144b12b9",
      "candidate_info": {
        "commit_hash": "273d0053987fb198fa8fbb7cc723c8db144b12b9",
        "repo": "relic-toolkit/relic",
        "commit_url": "https://github.com/relic-toolkit/relic/commit/273d0053987fb198fa8fbb7cc723c8db144b12b9",
        "files": [
          "src/ep/relic_ep_mul.c",
          "src/epx/relic_ep2_map.c",
          "src/epx/relic_ep2_mul.c",
          "src/epx/relic_ep3_map.c",
          "src/epx/relic_ep3_mul.c",
          "src/epx/relic_ep4_map.c",
          "src/epx/relic_ep4_mul.c",
          "src/epx/relic_ep8_map.c",
          "src/epx/relic_ep8_mul.c",
          "src/fpx/relic_fpx_srt.c"
        ],
        "message": "Many fixes.",
        "before_after_code_files": [
          "src/ep/relic_ep_mul.c||src/ep/relic_ep_mul.c",
          "src/epx/relic_ep2_map.c||src/epx/relic_ep2_map.c",
          "src/epx/relic_ep2_mul.c||src/epx/relic_ep2_mul.c",
          "src/epx/relic_ep3_map.c||src/epx/relic_ep3_map.c",
          "src/epx/relic_ep3_mul.c||src/epx/relic_ep3_mul.c",
          "src/epx/relic_ep4_map.c||src/epx/relic_ep4_map.c",
          "src/epx/relic_ep4_mul.c||src/epx/relic_ep4_mul.c",
          "src/epx/relic_ep8_map.c||src/epx/relic_ep8_map.c",
          "src/epx/relic_ep8_mul.c||src/epx/relic_ep8_mul.c",
          "src/fpx/relic_fpx_srt.c||src/fpx/relic_fpx_srt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ep/relic_ep_mul.c||src/ep/relic_ep_mul.c",
            "src/epx/relic_ep2_map.c||src/epx/relic_ep2_map.c",
            "src/epx/relic_ep2_mul.c||src/epx/relic_ep2_mul.c",
            "src/epx/relic_ep4_map.c||src/epx/relic_ep4_map.c",
            "src/epx/relic_ep4_mul.c||src/epx/relic_ep4_mul.c"
          ],
          "candidate": [
            "src/ep/relic_ep_mul.c||src/ep/relic_ep_mul.c",
            "src/epx/relic_ep2_map.c||src/epx/relic_ep2_map.c",
            "src/epx/relic_ep2_mul.c||src/epx/relic_ep2_mul.c",
            "src/epx/relic_ep4_map.c||src/epx/relic_ep4_map.c",
            "src/epx/relic_ep4_mul.c||src/epx/relic_ep4_mul.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ep/relic_ep_mul.c||src/ep/relic_ep_mul.c": [
          "File: src/ep/relic_ep_mul.c -> src/ep/relic_ep_mul.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570: }",
          "572: #endif",
          "574: #if EP_MUL == MONTY || !defined(STRIP)",
          "576: void ep_mul_monty(ep_t r, const ep_t p, const bn_t k) {",
          "",
          "[Removed Lines]",
          "573: #include \"assert.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:   ep_blind(t[1], t[1]);",
          "617:   for (int i = bits - 1; i >= 0; i--) {",
          "619:    dv_swap_cond(t[0]->x, t[1]->x, RLC_FP_DIGS, j ^ 1);",
          "620:    dv_swap_cond(t[0]->y, t[1]->y, RLC_FP_DIGS, j ^ 1);",
          "621:    dv_swap_cond(t[0]->z, t[1]->z, RLC_FP_DIGS, j ^ 1);",
          "",
          "[Removed Lines]",
          "618:    int j = bn_get_bit(l, i);",
          "",
          "[Added Lines]",
          "618:     int j = bn_get_bit(l, i);",
          "",
          "---------------"
        ],
        "src/epx/relic_ep2_map.c||src/epx/relic_ep2_map.c": [
          "File: src/epx/relic_ep2_map.c -> src/epx/relic_ep2_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:    ep2_mul_cof(p, p);",
          "376:   }",
          "378:   bn_free(k);",
          "379:   fp2_free(t);",
          "380:   fp2_free(u);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:  }",
          "378:  RLC_CATCH_ANY {",
          "379:   RLC_THROW(ERR_CAUGHT);",
          "380:  }",
          "381:  RLC_FINALLY {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:   fp2_free(x1);",
          "385:   fp2_free(y1);",
          "386:   fp2_free(z1);",
          "392:   RLC_FREE(r);",
          "393:  }",
          "394: }",
          "",
          "[Removed Lines]",
          "387:  }",
          "388:  RLC_CATCH_ANY {",
          "389:   RLC_THROW(ERR_CAUGHT);",
          "390:  }",
          "391:  RLC_FINALLY {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/epx/relic_ep2_mul.c||src/epx/relic_ep2_mul.c": [
          "File: src/epx/relic_ep2_mul.c -> src/epx/relic_ep2_mul.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287: void ep2_mul_monty(ep2_t r, const ep2_t p, const bn_t k) {",
          "288:  ep2_t t[2];",
          "290:  ep2_null(t[0]);",
          "291:  ep2_null(t[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:  bn_t n, l, _k;",
          "290:  size_t bits;",
          "292:  bn_null(n);",
          "293:  bn_null(l);",
          "294:  bn_null(_k);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:  }",
          "298:  RLC_TRY {",
          "299:   ep2_new(t[0]);",
          "300:   ep2_new(t[1]);",
          "305:   for (int i = bn_bits(k) - 1; i >= 0; i--) {",
          "306:    int j = bn_get_bit(k, i);",
          "",
          "[Removed Lines]",
          "302:   ep2_set_infty(t[0]);",
          "303:   ep2_copy(t[1], p);",
          "",
          "[Added Lines]",
          "304:   bn_new(n);",
          "305:   bn_new(l);",
          "306:   bn_new(_k);",
          "310:   ep2_curve_get_ord(n);",
          "311:   bits = bn_bits(n);",
          "313:   bn_mod(_k, k, n);",
          "314:   bn_abs(l, _k);",
          "315:   bn_add(l, l, n);",
          "316:   bn_add(n, l, n);",
          "317:   dv_swap_cond(l->dp, n->dp, RLC_MAX(l->used, n->used),",
          "318:    bn_get_bit(l, bits) == 0);",
          "319:   l->used = RLC_SEL(l->used, n->used, bn_get_bit(l, bits) == 0);",
          "321:   ep2_norm(t[0], p);",
          "322:   ep2_dbl(t[1], t[0]);",
          "325:   ep2_blind(t[0], t[0]);",
          "326:   ep2_blind(t[1], t[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321:   }",
          "323:   ep2_norm(r, t[0]);",
          "327:  } RLC_CATCH_ANY {",
          "328:   RLC_THROW(ERR_CAUGHT);",
          "329:  }",
          "330:  RLC_FINALLY {",
          "331:   ep2_free(t[1]);",
          "332:   ep2_free(t[0]);",
          "333:  }",
          "",
          "[Removed Lines]",
          "324:   if (bn_sign(k) == RLC_NEG) {",
          "325:    ep2_neg(r, r);",
          "326:   }",
          "",
          "[Added Lines]",
          "351:   bn_free(n);",
          "352:   bn_free(l);",
          "353:   bn_free(_k);",
          "",
          "---------------"
        ],
        "src/epx/relic_ep3_map.c||src/epx/relic_ep3_map.c": [
          "File: src/epx/relic_ep3_map.c -> src/epx/relic_ep3_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:    ep3_mul_cof(p, p);",
          "168:   }",
          "170:   bn_free(k);",
          "171:   fp3_free(t);",
          "172:   fp3_free(u);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  }",
          "170:  RLC_CATCH_ANY {",
          "171:   RLC_THROW(ERR_CAUGHT);",
          "172:  }",
          "173:  RLC_FINALLY {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   fp3_free(x1);",
          "177:   fp3_free(y1);",
          "178:   fp3_free(z1);",
          "184:   RLC_FREE(r);",
          "185:  }",
          "186: }",
          "",
          "[Removed Lines]",
          "179:  }",
          "180:  RLC_CATCH_ANY {",
          "181:   RLC_THROW(ERR_CAUGHT);",
          "182:  }",
          "183:  RLC_FINALLY {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/epx/relic_ep3_mul.c||src/epx/relic_ep3_mul.c": [
          "File: src/epx/relic_ep3_mul.c -> src/epx/relic_ep3_mul.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: void ep3_mul_monty(ep3_t r, const ep3_t p, const bn_t k) {",
          "333:  ep3_t t[2];",
          "335:  ep3_null(t[0]);",
          "336:  ep3_null(t[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:  bn_t n, l, _k;",
          "335:  size_t bits;",
          "337:  bn_null(n);",
          "338:  bn_null(l);",
          "339:  bn_null(_k);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:  }",
          "343:  RLC_TRY {",
          "344:   ep3_new(t[0]);",
          "345:   ep3_new(t[1]);",
          "350:   for (int i = bn_bits(k) - 1; i >= 0; i--) {",
          "351:    int j = bn_get_bit(k, i);",
          "",
          "[Removed Lines]",
          "347:   ep3_set_infty(t[0]);",
          "348:   ep3_copy(t[1], p);",
          "",
          "[Added Lines]",
          "349:   bn_new(n);",
          "350:   bn_new(l);",
          "351:   bn_new(_k);",
          "355:   ep3_curve_get_ord(n);",
          "356:   bits = bn_bits(n);",
          "358:   bn_mod(_k, k, n);",
          "359:   bn_abs(l, _k);",
          "360:   bn_add(l, l, n);",
          "361:   bn_add(n, l, n);",
          "362:   dv_swap_cond(l->dp, n->dp, RLC_MAX(l->used, n->used),",
          "363:    bn_get_bit(l, bits) == 0);",
          "364:   l->used = RLC_SEL(l->used, n->used, bn_get_bit(l, bits) == 0);",
          "366:   ep3_norm(t[0], p);",
          "367:   ep3_dbl(t[1], t[0]);",
          "370:   ep3_blind(t[0], t[0]);",
          "371:   ep3_blind(t[1], t[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:   }",
          "374:   ep3_norm(r, t[0]);",
          "378:  } RLC_CATCH_ANY {",
          "379:   RLC_THROW(ERR_CAUGHT);",
          "380:  }",
          "381:  RLC_FINALLY {",
          "382:   ep3_free(t[1]);",
          "383:   ep3_free(t[0]);",
          "384:  }",
          "",
          "[Removed Lines]",
          "375:   if (bn_sign(k) == RLC_NEG) {",
          "376:    ep3_neg(r, r);",
          "377:   }",
          "",
          "[Added Lines]",
          "402:   bn_free(n);",
          "403:   bn_free(l);",
          "404:   bn_free(_k);",
          "",
          "---------------"
        ],
        "src/epx/relic_ep4_map.c||src/epx/relic_ep4_map.c": [
          "File: src/epx/relic_ep4_map.c -> src/epx/relic_ep4_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:    ep4_mul_cof(p, p);",
          "175:   }",
          "177:   bn_free(k);",
          "178:   fp4_free(t);",
          "179:   fp4_free(u);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:  }",
          "177:  RLC_CATCH_ANY {",
          "178:   RLC_THROW(ERR_CAUGHT);",
          "179:  }",
          "180:  RLC_FINALLY {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:   fp4_free(x1);",
          "184:   fp4_free(y1);",
          "185:   fp4_free(z1);",
          "191:   RLC_FREE(r);",
          "192:  }",
          "193: }",
          "",
          "[Removed Lines]",
          "186:  }",
          "187:  RLC_CATCH_ANY {",
          "188:   RLC_THROW(ERR_CAUGHT);",
          "189:  }",
          "190:  RLC_FINALLY {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/epx/relic_ep4_mul.c||src/epx/relic_ep4_mul.c": [
          "File: src/epx/relic_ep4_mul.c -> src/epx/relic_ep4_mul.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: void ep4_mul_monty(ep4_t r, const ep4_t p, const bn_t k) {",
          "289:  ep4_t t[2];",
          "291:  ep4_null(t[0]);",
          "292:  ep4_null(t[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:  bn_t n, l, _k;",
          "291:  size_t bits;",
          "293:  bn_null(n);",
          "294:  bn_null(l);",
          "295:  bn_null(_k);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:  }",
          "299:  RLC_TRY {",
          "300:   ep4_new(t[0]);",
          "301:   ep4_new(t[1]);",
          "306:   for (int i = bn_bits(k) - 1; i >= 0; i--) {",
          "307:    int j = bn_get_bit(k, i);",
          "",
          "[Removed Lines]",
          "303:   ep4_set_infty(t[0]);",
          "304:   ep4_copy(t[1], p);",
          "",
          "[Added Lines]",
          "305:   bn_new(n);",
          "306:   bn_new(l);",
          "307:   bn_new(_k);",
          "311:   ep4_curve_get_ord(n);",
          "312:   bits = bn_bits(n);",
          "314:   bn_mod(_k, k, n);",
          "315:   bn_abs(l, _k);",
          "316:   bn_add(l, l, n);",
          "317:   bn_add(n, l, n);",
          "318:   dv_swap_cond(l->dp, n->dp, RLC_MAX(l->used, n->used),",
          "319:    bn_get_bit(l, bits) == 0);",
          "320:   l->used = RLC_SEL(l->used, n->used, bn_get_bit(l, bits) == 0);",
          "322:   ep4_norm(t[0], p);",
          "323:   ep4_dbl(t[1], t[0]);",
          "326:   ep4_blind(t[0], t[0]);",
          "327:   ep4_blind(t[1], t[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "334:   }",
          "336:   ep4_norm(r, t[0]);",
          "340:  } RLC_CATCH_ANY {",
          "341:   RLC_THROW(ERR_CAUGHT);",
          "342:  }",
          "343:  RLC_FINALLY {",
          "344:   ep4_free(t[1]);",
          "345:   ep4_free(t[0]);",
          "346:  }",
          "",
          "[Removed Lines]",
          "337:   if (bn_sign(k) == RLC_NEG) {",
          "338:    ep4_neg(r, r);",
          "339:   }",
          "",
          "[Added Lines]",
          "364:   bn_free(n);",
          "365:   bn_free(l);",
          "366:   bn_free(_k);",
          "",
          "---------------"
        ],
        "src/epx/relic_ep8_map.c||src/epx/relic_ep8_map.c": [
          "File: src/epx/relic_ep8_map.c -> src/epx/relic_ep8_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:    ep8_mul_cof(p, p);",
          "188:   }",
          "190:   bn_free(k);",
          "191:   fp8_free(t);",
          "192:   fp8_free(u);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:  }",
          "190:  RLC_CATCH_ANY {",
          "191:   RLC_THROW(ERR_CAUGHT);",
          "192:  }",
          "193:  RLC_FINALLY {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:   fp8_free(x1);",
          "197:   fp8_free(y1);",
          "198:   fp8_free(z1);",
          "204:   RLC_FREE(r);",
          "205:  }",
          "206: }",
          "",
          "[Removed Lines]",
          "199:  }",
          "200:  RLC_CATCH_ANY {",
          "201:   RLC_THROW(ERR_CAUGHT);",
          "202:  }",
          "203:  RLC_FINALLY {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/epx/relic_ep8_mul.c||src/epx/relic_ep8_mul.c": [
          "File: src/epx/relic_ep8_mul.c -> src/epx/relic_ep8_mul.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: void ep8_mul_monty(ep8_t r, const ep8_t p, const bn_t k) {",
          "289:  ep8_t t[2];",
          "291:  ep8_null(t[0]);",
          "292:  ep8_null(t[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:  bn_t n, l, _k;",
          "291:  size_t bits;",
          "293:  bn_null(n);",
          "294:  bn_null(l);",
          "295:  bn_null(_k);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:  }",
          "299:  RLC_TRY {",
          "300:   ep8_new(t[0]);",
          "301:   ep8_new(t[1]);",
          "306:   for (int i = bn_bits(k) - 1; i >= 0; i--) {",
          "307:    int j = bn_get_bit(k, i);",
          "",
          "[Removed Lines]",
          "303:   ep8_set_infty(t[0]);",
          "304:   ep8_copy(t[1], p);",
          "",
          "[Added Lines]",
          "305:   bn_new(n);",
          "306:   bn_new(l);",
          "307:   bn_new(_k);",
          "311:   ep8_curve_get_ord(n);",
          "312:   bits = bn_bits(n);",
          "314:   bn_mod(_k, k, n);",
          "315:   bn_abs(l, _k);",
          "316:   bn_add(l, l, n);",
          "317:   bn_add(n, l, n);",
          "318:   dv_swap_cond(l->dp, n->dp, RLC_MAX(l->used, n->used),",
          "319:    bn_get_bit(l, bits) == 0);",
          "320:   l->used = RLC_SEL(l->used, n->used, bn_get_bit(l, bits) == 0);",
          "322:   ep8_norm(t[0], p);",
          "323:   ep8_dbl(t[1], t[0]);",
          "326:   ep8_blind(t[0], t[0]);",
          "327:   ep8_blind(t[1], t[1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328:   }",
          "330:   ep8_norm(r, t[0]);",
          "334:  } RLC_CATCH_ANY {",
          "335:   RLC_THROW(ERR_CAUGHT);",
          "336:  }",
          "337:  RLC_FINALLY {",
          "338:   ep8_free(t[1]);",
          "339:   ep8_free(t[0]);",
          "340:  }",
          "",
          "[Removed Lines]",
          "331:   if (bn_sign(k) == RLC_NEG) {",
          "332:    ep8_neg(r, r);",
          "333:   }",
          "",
          "[Added Lines]",
          "358:   bn_free(n);",
          "359:   bn_free(l);",
          "360:   bn_free(_k);",
          "",
          "---------------"
        ],
        "src/fpx/relic_fpx_srt.c||src/fpx/relic_fpx_srt.c": [
          "File: src/fpx/relic_fpx_srt.c -> src/fpx/relic_fpx_srt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:      fp_mul(t0[0], t3[0], root);",
          "243:      fp_mul(t0[1], t3[1], root);",
          "244:      fp_mul(t0[2], t3[2], root);",
          "246:        fp3_cmp_dig(t2, 1) != RLC_EQ);",
          "248:        fp3_cmp_dig(t2, 1) != RLC_EQ);",
          "250:        fp3_cmp_dig(t2, 1) != RLC_EQ);",
          "251:      fp_sqr(root, root);",
          "252:      fp_mul(t0[0], t1[0], root);",
          "",
          "[Removed Lines]",
          "245:      dv_copy_cond(c[0], t0[0], RLC_FP_DIGS,",
          "247:      dv_copy_cond(c[1], t0[1], RLC_FP_DIGS,",
          "249:      dv_copy_cond(c[2], t0[2], RLC_FP_DIGS,",
          "",
          "[Added Lines]",
          "245:      dv_copy_cond(t3[0], t0[0], RLC_FP_DIGS,",
          "247:      dv_copy_cond(t3[1], t0[1], RLC_FP_DIGS,",
          "249:      dv_copy_cond(t3[2], t0[2], RLC_FP_DIGS,",
          "",
          "---------------"
        ]
      }
    }
  ]
}