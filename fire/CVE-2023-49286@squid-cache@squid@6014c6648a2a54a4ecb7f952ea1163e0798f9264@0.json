{
  "cve_id": "CVE-2023-49286",
  "cve_desc": "Squid is a caching proxy for the Web supporting HTTP, HTTPS, FTP, and more. Due to an Incorrect Check of Function Return Value bug Squid is vulnerable to a Denial of Service attack against its Helper process management. This bug is fixed by Squid version 6.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "squid-cache/squid",
  "patch_hash": "6014c6648a2a54a4ecb7f952ea1163e0798f9264",
  "patch_info": {
    "commit_hash": "6014c6648a2a54a4ecb7f952ea1163e0798f9264",
    "repo": "squid-cache/squid",
    "commit_url": "https://github.com/squid-cache/squid/commit/6014c6648a2a54a4ecb7f952ea1163e0798f9264",
    "files": [
      "src/ipc.cc"
    ],
    "message": "Exit without asserting when helper process startup fails (#1543)\n\n... to dup() after fork() and before execvp().\n\nAssertions are for handling program logic errors. Helper initialization\ncode already handled system call errors correctly (i.e. by exiting the\nnewly created helper process with an error), except for a couple of\nassert()s that could be triggered by dup(2) failures.\n\nThis bug was discovered and detailed by Joshua Rogers at\nhttps://megamansec.github.io/Squid-Security-Audit/ipc-assert.html\nwhere it was filed as 'Assertion in Squid \"Helper\" Process Creator'.",
    "before_after_code_files": [
      "src/ipc.cc||src/ipc.cc"
    ]
  },
  "patch_diff": {
    "src/ipc.cc||src/ipc.cc": [
      "File: src/ipc.cc -> src/ipc.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: #include <chrono>",
      "24: #include <thread>",
      "26: static const char *hello_string = \"hi there\\n\";",
      "27: #ifndef HELLO_BUF_SZ",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: #include <cstdlib>",
      "27: #if HAVE_UNISTD_H",
      "28: #include <unistd.h>",
      "29: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "362:     }",
      "364:     PutEnvironment();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:     const auto dupOrExit = [prog,name](const int oldFd) {",
      "374:         const auto newFd = dup(oldFd);",
      "375:         if (newFd < 0) {",
      "376:             const auto savedErrno = errno;",
      "377:             debugs(54, DBG_CRITICAL, \"ERROR: Helper process initialization failure: \" << name <<",
      "378:                    Debug::Extra << \"helper (CHILD) PID: \" << getpid() <<",
      "379:                    Debug::Extra << \"helper program name: \" << prog <<",
      "380:                    Debug::Extra << \"dup(2) system call error for FD \" << oldFd << \": \" << xstrerr(savedErrno));",
      "381:             _exit(EXIT_FAILURE);",
      "382:         }",
      "383:         return newFd;",
      "384:     };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "370:     do {",
      "376:     close(x);",
      "384:     assert(t1 > 2 && t2 > 2 && t3 > 2);",
      "",
      "[Removed Lines]",
      "372:         x = dup(crfd);",
      "373:         assert(x > -1);",
      "374:     } while (x < 3 && x > -1);",
      "378:     t1 = dup(crfd);",
      "380:     t2 = dup(cwfd);",
      "382:     t3 = dup(fileno(debug_log));",
      "",
      "[Added Lines]",
      "393:         x = dupOrExit(crfd);",
      "394:     } while (x < 3);",
      "398:     t1 = dupOrExit(crfd);",
      "400:     t2 = dupOrExit(cwfd);",
      "402:     t3 = dupOrExit(fileno(debug_log));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7386e1fea0a7176c468ec954ec1f3bfb4b7f9dbb",
      "candidate_info": {
        "commit_hash": "7386e1fea0a7176c468ec954ec1f3bfb4b7f9dbb",
        "repo": "squid-cache/squid",
        "commit_url": "https://github.com/squid-cache/squid/commit/7386e1fea0a7176c468ec954ec1f3bfb4b7f9dbb",
        "files": [
          "src/ipc.cc"
        ],
        "message": "Exit without asserting when helper process startup fails (#1543)\n\n... to dup() after fork() and before execvp().\n\nAssertions are for handling program logic errors. Helper initialization\ncode already handled system call errors correctly (i.e. by exiting the\nnewly created helper process with an error), except for a couple of\nassert()s that could be triggered by dup(2) failures.\n\nThis bug was discovered and detailed by Joshua Rogers at\nhttps://megamansec.github.io/Squid-Security-Audit/ipc-assert.html\nwhere it was filed as 'Assertion in Squid \"Helper\" Process Creator'.",
        "before_after_code_files": [
          "src/ipc.cc||src/ipc.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/ipc.cc||src/ipc.cc"
          ],
          "candidate": [
            "src/ipc.cc||src/ipc.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/ipc.cc||src/ipc.cc": [
          "File: src/ipc.cc -> src/ipc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <chrono>",
          "24: #include <thread>",
          "26: static const char *hello_string = \"hi there\\n\";",
          "27: #ifndef HELLO_BUF_SZ",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include <cstdlib>",
          "27: #if HAVE_UNISTD_H",
          "28: #include <unistd.h>",
          "29: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:     }",
          "364:     PutEnvironment();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:     const auto dupOrExit = [prog,name](const int oldFd) {",
          "374:         const auto newFd = dup(oldFd);",
          "375:         if (newFd < 0) {",
          "376:             const auto savedErrno = errno;",
          "377:             debugs(54, DBG_CRITICAL, \"ERROR: Helper process initialization failure: \" << name <<",
          "378:                    Debug::Extra << \"helper (CHILD) PID: \" << getpid() <<",
          "379:                    Debug::Extra << \"helper program name: \" << prog <<",
          "380:                    Debug::Extra << \"dup(2) system call error for FD \" << oldFd << \": \" << xstrerr(savedErrno));",
          "381:             _exit(EXIT_FAILURE);",
          "382:         }",
          "383:         return newFd;",
          "384:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     do {",
          "376:     close(x);",
          "384:     assert(t1 > 2 && t2 > 2 && t3 > 2);",
          "",
          "[Removed Lines]",
          "372:         x = dup(crfd);",
          "373:         assert(x > -1);",
          "374:     } while (x < 3 && x > -1);",
          "378:     t1 = dup(crfd);",
          "380:     t2 = dup(cwfd);",
          "382:     t3 = dup(fileno(debug_log));",
          "",
          "[Added Lines]",
          "393:         x = dupOrExit(crfd);",
          "394:     } while (x < 3);",
          "398:     t1 = dupOrExit(crfd);",
          "400:     t2 = dupOrExit(cwfd);",
          "402:     t3 = dupOrExit(fileno(debug_log));",
          "",
          "---------------"
        ]
      }
    }
  ]
}