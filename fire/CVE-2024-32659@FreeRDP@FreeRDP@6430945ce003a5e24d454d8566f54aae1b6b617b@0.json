{
  "cve_id": "CVE-2024-32659",
  "cve_desc": "FreeRDP is a free implementation of the Remote Desktop Protocol. FreeRDP based clients prior to version 3.5.1 are vulnerable to out-of-bounds read if `((nWidth == 0) and (nHeight == 0))`. Version 3.5.1 contains a patch for the issue. No known workarounds are available.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "6430945ce003a5e24d454d8566f54aae1b6b617b",
  "patch_info": {
    "commit_hash": "6430945ce003a5e24d454d8566f54aae1b6b617b",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6430945ce003a5e24d454d8566f54aae1b6b617b",
    "files": [
      "libfreerdp/codec/color.c"
    ],
    "message": "[codec,color] fix out of bound read",
    "before_after_code_files": [
      "libfreerdp/codec/color.c||libfreerdp/codec/color.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/codec/color.c||libfreerdp/codec/color.c": [
      "File: libfreerdp/codec/color.c -> libfreerdp/codec/color.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "847:  if (!pDstData || !pSrcData)",
      "848:   return FALSE;",
      "850:  if (nDstStep == 0)",
      "851:   nDstStep = nWidth * FreeRDPGetBytesPerPixel(DstFormat);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "850:  if ((nWidth == 0) || (nHeight == 0))",
      "851:   return TRUE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b9ad6cf80a2233de22b3b5100d642d876ef9a6e",
      "candidate_info": {
        "commit_hash": "8b9ad6cf80a2233de22b3b5100d642d876ef9a6e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8b9ad6cf80a2233de22b3b5100d642d876ef9a6e",
        "files": [
          "libfreerdp/codec/color.c"
        ],
        "message": "[codec,color] fix out of bound read\n\n(cherry picked from commit 6430945ce003a5e24d454d8566f54aae1b6b617b)",
        "before_after_code_files": [
          "libfreerdp/codec/color.c||libfreerdp/codec/color.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/color.c||libfreerdp/codec/color.c"
          ],
          "candidate": [
            "libfreerdp/codec/color.c||libfreerdp/codec/color.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/color.c||libfreerdp/codec/color.c": [
          "File: libfreerdp/codec/color.c -> libfreerdp/codec/color.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:  if (!pDstData || !pSrcData)",
          "614:   return FALSE;",
          "616:  if (nDstStep == 0)",
          "617:   nDstStep = nWidth * GetBytesPerPixel(DstFormat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:  if ((nWidth == 0) || (nHeight == 0))",
          "617:   return TRUE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ce8bc3e9858925f538b7cb334ed7883d3ddbeed",
      "candidate_info": {
        "commit_hash": "6ce8bc3e9858925f538b7cb334ed7883d3ddbeed",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6ce8bc3e9858925f538b7cb334ed7883d3ddbeed",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c"
        ],
        "message": "[channels,rdpdr] remove dead code.",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10109"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1861:  UINT status = 0;",
          "1862:  rdpdrPlugin* plugin = (rdpdrPlugin*)rdpdr;",
          "1865:  {",
          "1866:   Stream_Release(s);",
          "1867:   return CHANNEL_RC_NULL_DATA;",
          "",
          "[Removed Lines]",
          "1864:  if (!rdpdr || !s)",
          "",
          "[Added Lines]",
          "1864:  if (!s)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870:  if (!plugin)",
          "1871:  {",
          "1872:   Stream_Release(s);",
          "1881:  }",
          "1883:  if (status != CHANNEL_RC_OK)",
          "1884:  {",
          "1885:   Stream_Release(s);",
          "",
          "[Removed Lines]",
          "1873:   status = CHANNEL_RC_BAD_INIT_HANDLE;",
          "1874:  }",
          "1875:  else",
          "1876:  {",
          "1877:   const size_t pos = Stream_GetPosition(s);",
          "1878:   rdpdr_dump_send_packet(rdpdr->log, WLOG_TRACE, s, \"[rdpdr-channel] send\");",
          "1879:   status = plugin->channelEntryPoints.pVirtualChannelWriteEx(",
          "1880:       plugin->InitHandle, plugin->OpenHandle, Stream_Buffer(s), pos, s);",
          "",
          "[Added Lines]",
          "1873:   return CHANNEL_RC_BAD_INIT_HANDLE;",
          "1876:  const size_t pos = Stream_GetPosition(s);",
          "1877:  rdpdr_dump_send_packet(rdpdr->log, WLOG_TRACE, s, \"[rdpdr-channel] send\");",
          "1878:  status = plugin->channelEntryPoints.pVirtualChannelWriteEx(",
          "1879:      plugin->InitHandle, plugin->OpenHandle, Stream_Buffer(s), pos, s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e756306b9675f45d0886d2db9ab10d3cc4441ee",
      "candidate_info": {
        "commit_hash": "4e756306b9675f45d0886d2db9ab10d3cc4441ee",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/4e756306b9675f45d0886d2db9ab10d3cc4441ee",
        "files": [
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "[winpr,timezone] fix unused result warnings",
        "before_after_code_files": [
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/10109"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <winpr/wtypes.h>",
          "24: #include <winpr/timezone.h>",
          "25: #include <winpr/crt.h>",
          "26: #include <winpr/file.h>",
          "27: #include \"../log.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <winpr/assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402: DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)",
          "403: {",
          "404:  time_t t = 0;",
          "407:  TIME_ZONE_ENTRY* dtz = NULL;",
          "408:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "412:  if (!local_time)",
          "413:   goto out_error;",
          "416: #ifdef WINPR_HAVE_TM_GMTOFF",
          "417:  {",
          "418:   long bias = -(local_time->tm_gmtoff / 60L);",
          "",
          "[Removed Lines]",
          "405:  struct tm tres;",
          "406:  struct tm* local_time = NULL;",
          "409:  lpTimeZoneInformation->StandardBias = 0;",
          "410:  time(&t);",
          "411:  local_time = localtime_r(&t, &tres);",
          "415:  memset(tz, 0, sizeof(TIME_ZONE_INFORMATION));",
          "",
          "[Added Lines]",
          "406:  struct tm tres = { 0 };",
          "408:  const TIME_ZONE_INFORMATION empty = { 0 };",
          "411:  WINPR_ASSERT(tz);",
          "415:  t = time(NULL);",
          "416:  struct tm* local_time = localtime_r(&t, &tres);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:   tz->Bias = (LONG)bias;",
          "424:  }",
          "427: #endif",
          "428:  dtz = winpr_detect_windows_time_zone();",
          "430:  if (dtz != NULL)",
          "431:  {",
          "434:   WLog_DBG(TAG, \"tz: Bias=%\" PRId32 \" sn='%s' dln='%s'\", dtz->Bias, dtz->StandardName,",
          "435:            dtz->DaylightName);",
          "438:   tz->Bias = dtz->Bias;",
          "440:   if (ConvertUtf8ToWChar(dtz->StandardName, tz->StandardName, ARRAYSIZE(tz->StandardName)) <",
          "",
          "[Removed Lines]",
          "425: #else",
          "426:  tz->Bias = 0;",
          "432:   const TIME_ZONE_INFORMATION empty = { 0 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:  WLog_DBG(TAG, \"tz not found, using computed bias %\" PRId32 \".\", tz->Bias);",
          "475: out_error:",
          "476:  free(dtz);",
          "478:  memcpy(tz->DaylightName, tz->StandardName, sizeof(tz->DaylightName));",
          "480: }",
          "",
          "[Removed Lines]",
          "477:  ConvertUtf8ToWChar(\"Client Local Time\", tz->StandardName, ARRAYSIZE(tz->StandardName));",
          "",
          "[Added Lines]",
          "476:  if (ConvertUtf8ToWChar(\"Client Local Time\", tz->StandardName, ARRAYSIZE(tz->StandardName)) <= 0)",
          "477:   WLog_WARN(TAG, \"Failed to set default timezone name\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}