{
  "cve_id": "CVE-2024-28871",
  "cve_desc": "LibHTP is a security-aware parser for the HTTP protocol and the related bits and pieces. Version 0.5.46 may parse malformed request traffic, leading to excessive CPU usage. Version 0.5.47 contains a patch for the issue. No known workarounds are available.",
  "repo": "OISF/libhtp",
  "patch_hash": "bf618ec7f243cebfb0f7e84c3cb158955cb32b4d",
  "patch_info": {
    "commit_hash": "bf618ec7f243cebfb0f7e84c3cb158955cb32b4d",
    "repo": "OISF/libhtp",
    "commit_url": "https://github.com/OISF/libhtp/commit/bf618ec7f243cebfb0f7e84c3cb158955cb32b4d",
    "files": [
      "htp/htp_request.c",
      "test/test_main.cpp"
    ],
    "message": "http0.9: process headers if there are non-space characters\n\nPreviously, we fell back on HTTP/0.9 if there was a missing protocol\nexcept if the following line cintained a colon.\n\nThis makes libhtp stricter to consider a transaction as 0.9\nby only accepting if we have spaces after the request line\n\nas done in libhtp-rs\n\nTicket: 6643",
    "before_after_code_files": [
      "htp/htp_request.c||htp/htp_request.c",
      "test/test_main.cpp||test/test_main.cpp"
    ]
  },
  "patch_diff": {
    "htp/htp_request.c||htp/htp_request.c": [
      "File: htp/htp_request.c -> htp/htp_request.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "744:     } else {",
      "746:         int64_t pos = connp->in_current_read_offset;",
      "749:         while (pos < connp->in_current_len) {",
      "751:                 htp_log(connp, HTP_LOG_MARK, HTP_LOG_WARNING, 0, \"Request line: missing protocol\");",
      "752:                 connp->in_tx->is_protocol_0_9 = 0;",
      "754:                 connp->in_state = htp_connp_REQ_HEADERS;",
      "755:                 connp->in_tx->request_progress = HTP_REQUEST_HEADERS;",
      "756:                 return HTP_OK;",
      "762:             }",
      "763:             pos++;",
      "764:         }",
      "",
      "[Removed Lines]",
      "747:         int afterspaces = 0;",
      "750:             if (connp->in_current_data[pos] == ':') {",
      "757:             } else if (htp_is_lws(connp->in_current_data[pos])) {",
      "759:                 afterspaces = 1;",
      "760:             } else if (htp_is_space(connp->in_current_data[pos]) || afterspaces == 1) {",
      "761:                 break;",
      "",
      "[Added Lines]",
      "749:             if (!htp_is_space(connp->in_current_data[pos])) {",
      "",
      "---------------"
    ],
    "test/test_main.cpp||test/test_main.cpp": [
      "File: test/test_main.cpp -> test/test_main.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "558:     ASSERT_GE(rc, 0);",
      "560:     ASSERT_EQ(1, htp_list_size(connp->conn->transactions));",
      "563:     htp_tx_t *tx = (htp_tx_t *) htp_list_get(connp->conn->transactions, 0);",
      "564:     ASSERT_TRUE(tx != NULL);",
      "",
      "[Removed Lines]",
      "561:     ASSERT_TRUE(connp->conn->flags & HTP_CONN_HTTP_0_9_EXTRA);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d69c88f9b2707516e4849b8335649072c3b308d0",
      "candidate_info": {
        "commit_hash": "d69c88f9b2707516e4849b8335649072c3b308d0",
        "repo": "OISF/libhtp",
        "commit_url": "https://github.com/OISF/libhtp/commit/d69c88f9b2707516e4849b8335649072c3b308d0",
        "files": [
          "htp/htp_transaction.c"
        ],
        "message": "request: continue processing even with invalid headers\n\nSo that following headers and response still get processed\n\nTicket: #6415",
        "before_after_code_files": [
          "htp/htp_transaction.c||htp/htp_transaction.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/libhtp/pull/415"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "htp/htp_transaction.c||htp/htp_transaction.c": [
          "File: htp/htp_transaction.c -> htp/htp_transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:     rc = htp_hook_run_all(tx->connp->cfg->hook_request_headers, tx);",
          "586:     if (rc != HTP_OK) return rc;",
          "593:     return HTP_OK;",
          "594: }",
          "",
          "[Removed Lines]",
          "589:     if (tx->flags & HTP_REQUEST_INVALID) {",
          "590:         return HTP_ERROR;",
          "591:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d01d355b4646cf99e99e7f9fa33bcff1a7b0d86e",
      "candidate_info": {
        "commit_hash": "d01d355b4646cf99e99e7f9fa33bcff1a7b0d86e",
        "repo": "OISF/libhtp",
        "commit_url": "https://github.com/OISF/libhtp/commit/d01d355b4646cf99e99e7f9fa33bcff1a7b0d86e",
        "files": [
          "htp/htp_util.c"
        ],
        "message": "htp_util: fix spelling issue",
        "before_after_code_files": [
          "htp/htp_util.c||htp/htp_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/libhtp/pull/415"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "htp/htp_util.c||htp/htp_util.c": [
          "File: htp/htp_util.c -> htp/htp_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:     while ((pos < len) && (data[pos] < '0' || data[pos] > '9')) {",
          "276:         if (!htp_is_lws(data[pos]) && connp != NULL && r == 0) {",
          "277:             htp_log(connp, HTP_LOG_MARK, HTP_LOG_WARNING, 0,",
          "279:             r = -1;",
          "280:         }",
          "281:         pos++;",
          "",
          "[Removed Lines]",
          "278:                     \"C-L value with extra data in the beginnning\");",
          "",
          "[Added Lines]",
          "278:                     \"C-L value with extra data in the beginning\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c990dc3fcc1f71a9981d26224907c400bfa87f38",
      "candidate_info": {
        "commit_hash": "c990dc3fcc1f71a9981d26224907c400bfa87f38",
        "repo": "OISF/libhtp",
        "commit_url": "https://github.com/OISF/libhtp/commit/c990dc3fcc1f71a9981d26224907c400bfa87f38",
        "files": [
          "htp/htp_private.h",
          "htp/htp_transaction.c",
          "htp/htp_util.c",
          "test/test_utils.cpp"
        ],
        "message": "request: be more liberal about transfer-encoding value\n\nFor instance, the following header may be considered as valid:\nTransfer-Encoding: chunked, chunked\n\nIntroduces a new helper function to recognize header value tokens\n\nTicket: #6415",
        "before_after_code_files": [
          "htp/htp_private.h||htp/htp_private.h",
          "htp/htp_transaction.c||htp/htp_transaction.c",
          "htp/htp_util.c||htp/htp_util.c",
          "test/test_utils.cpp||test/test_utils.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/libhtp/pull/415"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "htp/htp_private.h||htp/htp_private.h": [
          "File: htp/htp_private.h -> htp/htp_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "249: void htp_connp_destroy_decompressors(htp_connp_t *connp);",
          "251: #ifndef HAVE_STRLCAT",
          "252: size_t strlcat(char *dst, const char *src, size_t size);",
          "253: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: htp_status_t htp_header_has_token(const unsigned char *hvp, size_t hvlen, const unsigned char *value);",
          "",
          "---------------"
        ],
        "htp/htp_transaction.c||htp/htp_transaction.c": [
          "File: htp/htp_transaction.c -> htp/htp_transaction.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:             tx->request_transfer_coding = HTP_CODING_INVALID;",
          "411:             tx->flags |= HTP_REQUEST_INVALID_T_E;",
          "",
          "[Removed Lines]",
          "408:         if (bstr_cmp_c_nocase(te->value, \"chunked\") != 0) {",
          "",
          "[Added Lines]",
          "408:         if (htp_header_has_token(bstr_ptr(te->value), bstr_len(te->value), (unsigned char*) \"chunked\") != HTP_OK) {",
          "",
          "---------------"
        ],
        "htp/htp_util.c||htp/htp_util.c": [
          "File: htp/htp_util.c -> htp/htp_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2543: char *htp_get_version(void) {",
          "2544:     return HTP_VERSION_STRING_FULL;",
          "2545: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2556: htp_status_t htp_header_has_token(const unsigned char *hvp, size_t hvlen, const unsigned char *value) {",
          "2557:     int state = 0;",
          "2559:     size_t v_off = 0;",
          "2561:     for (size_t i = 0; i < hvlen; i++) {",
          "2562:         switch (state) {",
          "2563:             case 0:",
          "2564:                 if (v_off == 0 && htp_is_space(hvp[i])) {",
          "2566:                     continue;",
          "2567:                 }",
          "2568:                 if (tolower(hvp[i]) == value[v_off]) {",
          "2569:                     v_off++;",
          "2570:                     if (value[v_off] == 0) {",
          "2572:                         state = 2;",
          "2573:                     }",
          "2574:                     continue;",
          "2575:                 } else {",
          "2577:                     v_off = 0;",
          "2578:                     state = 1;",
          "2579:                 }",
          "2581:             case 1:",
          "2582:                 if (hvp[i] == ',') {",
          "2584:                     state = 0;",
          "2585:                 }",
          "2586:                 break;",
          "2587:             case 2:",
          "2588:                 if (hvp[i] == ',') {",
          "2589:                     return HTP_OK;",
          "2590:                 }",
          "2591:                 if (!htp_is_space(hvp[i])) {",
          "2593:                     v_off = 0;",
          "2594:                     state = 1;",
          "2595:                 }",
          "2596:         }",
          "2597:     }",
          "2598:     if (state == 2) {",
          "2599:         return HTP_OK;",
          "2600:     }",
          "2601:     return HTP_ERROR;",
          "2602: }",
          "",
          "---------------"
        ],
        "test/test_utils.cpp||test/test_utils.cpp": [
          "File: test/test_utils.cpp -> test/test_utils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1801:     ASSERT_EQ(0, bstr_cmp_c(s, \"/one/two/three/%3\"));",
          "1802:     bstr_free(s);",
          "1803: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1805: TEST(UtilTest, HeaderHasToken) {",
          "1806:     char data[100];",
          "1809:     strcpy(data, \"chunked\");",
          "1810:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1813:     strcpy(data, \"notchunked\");",
          "1814:     EXPECT_EQ(HTP_ERROR, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1815:     strcpy(data, \"chunkednot\");",
          "1816:     EXPECT_EQ(HTP_ERROR, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1817:     strcpy(data, \"chunk,ed\");",
          "1818:     EXPECT_EQ(HTP_ERROR, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1819:     strcpy(data, \"chunk ed\");",
          "1820:     EXPECT_EQ(HTP_ERROR, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1823:     strcpy(data, \" notchunked , chunked , yetanother\");",
          "1824:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1825:     strcpy(data, \"chunked,yetanother\");",
          "1826:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1827:     strcpy(data, \"not,chunked\");",
          "1828:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1829:     strcpy(data, \"chunk,chunked\");",
          "1830:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1831:     strcpy(data, \" chunked\");",
          "1832:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1833:     strcpy(data, \"chunked \");",
          "1834:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1835:     strcpy(data, \"chunked,\");",
          "1836:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1837:     strcpy(data, \",chunked\");",
          "1838:     EXPECT_EQ(HTP_OK, htp_header_has_token((unsigned char*) data, strlen(data), (unsigned char *)\"chunked\"));",
          "1839: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95344371ecbefd9e9e3975793cc61ecd2da9c6c3",
      "candidate_info": {
        "commit_hash": "95344371ecbefd9e9e3975793cc61ecd2da9c6c3",
        "repo": "OISF/libhtp",
        "commit_url": "https://github.com/OISF/libhtp/commit/95344371ecbefd9e9e3975793cc61ecd2da9c6c3",
        "files": [
          "htp/bstr.c",
          "htp/htp_base64.c",
          "htp/htp_config.c",
          "htp/htp_decompressors.c",
          "htp/htp_transcoder.c",
          "htp/htp_util.c"
        ],
        "message": "src: fix -Wshorten-64-to-32 warnings",
        "before_after_code_files": [
          "htp/bstr.c||htp/bstr.c",
          "htp/htp_base64.c||htp/htp_base64.c",
          "htp/htp_config.c||htp/htp_config.c",
          "htp/htp_decompressors.c||htp/htp_decompressors.c",
          "htp/htp_transcoder.c||htp/htp_transcoder.c",
          "htp/htp_util.c||htp/htp_util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OISF/libhtp/pull/415"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "htp/bstr.c||htp/bstr.c": [
          "File: htp/bstr.c -> htp/bstr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:     size_t i = 0;",
          "199:     while (i < len) {",
          "200:         if (data[i] == c) {",
          "202:         }",
          "204:         i++;",
          "",
          "[Removed Lines]",
          "201:             return i;",
          "",
          "[Added Lines]",
          "201:             return (int) i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     size_t i = len;",
          "323:     while (i > 0) {",
          "324:         if (data[i - 1] == c) {",
          "326:         }",
          "328:         i--;",
          "",
          "[Removed Lines]",
          "325:             return i - 1;",
          "",
          "[Added Lines]",
          "325:             return (int) (i - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "506:         }",
          "508:         if (j == len2) {",
          "510:         }",
          "511:     }",
          "",
          "[Removed Lines]",
          "509:             return i;",
          "",
          "[Added Lines]",
          "509:             return (int) i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "529:         }",
          "531:         if (j == len2) {",
          "533:         }",
          "534:     }",
          "",
          "[Removed Lines]",
          "532:             return i;",
          "",
          "[Added Lines]",
          "532:             return (int) i;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "560:         }",
          "562:         if (j == len2) {",
          "564:         }",
          "565:     }",
          "",
          "[Removed Lines]",
          "563:             return i;",
          "",
          "[Added Lines]",
          "563:             return (int) i;",
          "",
          "---------------"
        ],
        "htp/htp_base64.c||htp/htp_base64.c": [
          "File: htp/htp_base64.c -> htp/htp_base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:                     if (codechar == code_in + length_in) {",
          "100:                         decoder->step = step_a;",
          "101:                         decoder->plainchar = *plainchar;",
          "103:                     }",
          "104:                     fragment = (char) htp_base64_decode_single(*codechar++);",
          "105:                 } while (fragment < 0);",
          "",
          "[Removed Lines]",
          "102:                         return plainchar - plaintext_out;",
          "",
          "[Added Lines]",
          "102:                         return (int) (plainchar - plaintext_out);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:                     if (codechar == code_in + length_in) {",
          "112:                         decoder->step = step_b;",
          "113:                         decoder->plainchar = *plainchar;",
          "115:                     }",
          "116:                     fragment = (char) htp_base64_decode_single(*codechar++);",
          "117:                 } while (fragment < 0);",
          "120:                 if (--length_out == 0) {",
          "122:                 }",
          "",
          "[Removed Lines]",
          "114:                         return plainchar - plaintext_out;",
          "121:                     return plainchar - plaintext_out;",
          "",
          "[Added Lines]",
          "114:                         return (int) (plainchar - plaintext_out);",
          "121:                     return (int) (plainchar - plaintext_out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:                     if (codechar == code_in + length_in) {",
          "128:                         decoder->step = step_c;",
          "129:                         decoder->plainchar = *plainchar;",
          "131:                     }",
          "132:                     fragment = (char) htp_base64_decode_single(*codechar++);",
          "133:                 } while (fragment < 0);",
          "136:                 if (--length_out == 0) {",
          "138:                 }",
          "",
          "[Removed Lines]",
          "130:                         return plainchar - plaintext_out;",
          "137:                     return plainchar - plaintext_out;",
          "",
          "[Added Lines]",
          "130:                         return (int) (plainchar - plaintext_out);",
          "137:                     return (int) (plainchar - plaintext_out);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:                     if (codechar == code_in + length_in) {",
          "144:                         decoder->step = step_d;",
          "145:                         decoder->plainchar = *plainchar;",
          "147:                     }",
          "148:                     fragment = (char) htp_base64_decode_single(*codechar++);",
          "149:                 } while (fragment < 0);",
          "151:                 if (--length_out == 0) {",
          "153:                 }",
          "155:             }",
          "",
          "[Removed Lines]",
          "146:                         return plainchar - plaintext_out;",
          "152:                     return plainchar - plaintext_out;",
          "",
          "[Added Lines]",
          "146:                         return (int) (plainchar - plaintext_out);",
          "152:                     return (int) (plainchar - plaintext_out);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:     unsigned char *tmpstr = malloc(len);",
          "186:     if (tmpstr == NULL) return NULL;",
          "189:     if (resulting_len > 0) {",
          "190:         r = bstr_dup_mem(tmpstr, resulting_len);",
          "191:     }",
          "",
          "[Removed Lines]",
          "188:     int resulting_len = htp_base64_decode(&decoder, data, len, tmpstr, len);",
          "",
          "[Added Lines]",
          "188:     int resulting_len = htp_base64_decode(&decoder, data, (int) len, tmpstr, (int) len);",
          "",
          "---------------"
        ],
        "htp/htp_config.c||htp/htp_config.c": [
          "File: htp/htp_config.c -> htp/htp_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:     if (bomblimit > INT32_MAX) {",
          "529:         cfg->compression_bomb_limit = INT32_MAX;",
          "530:     } else {",
          "532:     }",
          "533: }",
          "",
          "[Removed Lines]",
          "531:         cfg->compression_bomb_limit = bomblimit;",
          "",
          "[Added Lines]",
          "531:         cfg->compression_bomb_limit = (int32_t) bomblimit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:     if (useclimit >= 1000000) {",
          "539:         cfg->compression_time_limit = 1000000;",
          "540:     } else {",
          "542:     }",
          "543: }",
          "",
          "[Removed Lines]",
          "541:         cfg->compression_time_limit = useclimit;",
          "",
          "[Added Lines]",
          "541:         cfg->compression_time_limit = (int32_t) useclimit;",
          "",
          "---------------"
        ],
        "htp/htp_decompressors.c||htp/htp_decompressors.c": [
          "File: htp/htp_decompressors.c -> htp/htp_decompressors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:     }",
          "234: restart:",
          "236:         htp_log(d->tx->connp, HTP_LOG_MARK, HTP_LOG_ERROR, 0, \"GZip decompressor: consumed > d->len\");",
          "237:         return HTP_ERROR;",
          "238:     }",
          "239:     drec->stream.next_in = (unsigned char *) (d->data + consumed);",
          "242:     while (drec->stream.avail_in != 0) {",
          "",
          "[Removed Lines]",
          "235:     if (consumed > d->len) {",
          "240:     drec->stream.avail_in = d->len - consumed;",
          "",
          "[Added Lines]",
          "235:     if (consumed > d->len || d->len > UINT32_MAX ) {",
          "240:     drec->stream.avail_in = (uint32_t) (d->len - consumed);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:                 }",
          "276:                 memcpy(drec->header + drec->header_len, drec->stream.next_in, consumed);",
          "277:                 drec->stream.next_in = (unsigned char *) (d->data + consumed);",
          "279:                 drec->header_len += consumed;",
          "280:             }",
          "281:             if (drec->header_len == LZMA_PROPS_SIZE + 8) {",
          "",
          "[Removed Lines]",
          "278:                 drec->stream.avail_in = d->len - consumed;",
          "",
          "[Added Lines]",
          "278:                 drec->stream.avail_in = (uint32_t) (d->len - consumed);",
          "",
          "---------------"
        ],
        "htp/htp_transcoder.c||htp/htp_transcoder.c": [
          "File: htp/htp_transcoder.c -> htp/htp_transcoder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     bstr *name = NULL;",
          "76:     bstr *value = NULL;",
          "78:         value = htp_table_get_index(input_params, i, &name);",
          "80:         bstr *new_name = NULL, *new_value = NULL;",
          "",
          "[Removed Lines]",
          "77:     for (int i = 0, n = htp_table_size(input_params); i < n; i++) {",
          "",
          "[Added Lines]",
          "77:     for (size_t i = 0, n = htp_table_size(input_params); i < n; i++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:             iconv_close(cd);",
          "87:             bstr *b = NULL;",
          "89:                 b = htp_table_get_index(output_params, j, NULL);",
          "90:                 bstr_free(b);",
          "91:             }",
          "",
          "[Removed Lines]",
          "88:             for (int j = 0, k = htp_table_size(output_params); j < k; j++) {",
          "",
          "[Added Lines]",
          "88:             for (size_t j = 0, k = htp_table_size(output_params); j < k; j++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:             iconv_close(cd);",
          "103:             bstr *b = NULL;",
          "105:                 b = htp_table_get_index(output_params, j, NULL);",
          "106:                 bstr_free(b);",
          "107:             }",
          "",
          "[Removed Lines]",
          "104:             for (int j = 0, k = htp_table_size(output_params); j < k; j++) {",
          "",
          "[Added Lines]",
          "104:             for (size_t j = 0, k = htp_table_size(output_params); j < k; j++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     if (destroy_old) {",
          "122:         bstr *b = NULL;",
          "124:             b = htp_table_get_index(input_params, i, NULL);",
          "125:             bstr_free(b);",
          "126:         }",
          "",
          "[Removed Lines]",
          "123:         for (int i = 0, n = htp_table_size(input_params); i < n; i++) {",
          "",
          "[Added Lines]",
          "123:         for (size_t i = 0, n = htp_table_size(input_params); i < n; i++) {",
          "",
          "---------------"
        ],
        "htp/htp_util.c||htp/htp_util.c": [
          "File: htp/htp_util.c -> htp/htp_util.c"
        ]
      }
    }
  ]
}