{
  "cve_id": "CVE-2012-2373",
  "cve_desc": "The Linux kernel before 3.4.5 on the x86 platform, when Physical Address Extension (PAE) is enabled, does not properly use the Page Middle Directory (PMD), which allows local users to cause a denial of service (panic) via a crafted application that triggers a race condition.",
  "repo": "torvalds/linux",
  "patch_hash": "26c191788f18129af0eb32a358cdaea0c7479626",
  "patch_info": {
    "commit_hash": "26c191788f18129af0eb32a358cdaea0c7479626",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/26c191788f18129af0eb32a358cdaea0c7479626",
    "files": [
      "arch/x86/include/asm/pgtable-3level.h",
      "include/asm-generic/pgtable.h"
    ],
    "message": "mm: pmd_read_atomic: fix 32bit PAE pmd walk vs pmd_populate SMP race condition\n\nWhen holding the mmap_sem for reading, pmd_offset_map_lock should only\nrun on a pmd_t that has been read atomically from the pmdp pointer,\notherwise we may read only half of it leading to this crash.\n\nPID: 11679  TASK: f06e8000  CPU: 3   COMMAND: \"do_race_2_panic\"\n #0 [f06a9dd8] crash_kexec at c049b5ec\n #1 [f06a9e2c] oops_end at c083d1c2\n #2 [f06a9e40] no_context at c0433ded\n #3 [f06a9e64] bad_area_nosemaphore at c043401a\n #4 [f06a9e6c] __do_page_fault at c0434493\n #5 [f06a9eec] do_page_fault at c083eb45\n #6 [f06a9f04] error_code (via page_fault) at c083c5d5\n    EAX: 01fb470c EBX: fff35000 ECX: 00000003 EDX: 00000100 EBP:\n    00000000\n    DS:  007b     ESI: 9e201000 ES:  007b     EDI: 01fb4700 GS:  00e0\n    CS:  0060     EIP: c083bc14 ERR: ffffffff EFLAGS: 00010246\n #7 [f06a9f38] _spin_lock at c083bc14\n #8 [f06a9f44] sys_mincore at c0507b7d\n #9 [f06a9fb0] system_call at c083becd\n                         start           len\n    EAX: ffffffda  EBX: 9e200000  ECX: 00001000  EDX: 6228537f\n    DS:  007b      ESI: 00000000  ES:  007b      EDI: 003d0f00\n    SS:  007b      ESP: 62285354  EBP: 62285388  GS:  0033\n    CS:  0073      EIP: 00291416  ERR: 000000da  EFLAGS: 00000286\n\nThis should be a longstanding bug affecting x86 32bit PAE without THP.\nOnly archs with 64bit large pmd_t and 32bit unsigned long should be\naffected.\n\nWith THP enabled the barrier() in pmd_none_or_trans_huge_or_clear_bad()\nwould partly hide the bug when the pmd transition from none to stable,\nby forcing a re-read of the *pmd in pmd_offset_map_lock, but when THP is\nenabled a new set of problem arises by the fact could then transition\nfreely in any of the none, pmd_trans_huge or pmd_trans_stable states.\nSo making the barrier in pmd_none_or_trans_huge_or_clear_bad()\nunconditional isn't good idea and it would be a flakey solution.\n\nThis should be fully fixed by introducing a pmd_read_atomic that reads\nthe pmd in order with THP disabled, or by reading the pmd atomically\nwith cmpxchg8b with THP enabled.\n\nLuckily this new race condition only triggers in the places that must\nalready be covered by pmd_none_or_trans_huge_or_clear_bad() so the fix\nis localized there but this bug is not related to THP.\n\nNOTE: this can trigger on x86 32bit systems with PAE enabled with more\nthan 4G of ram, otherwise the high part of the pmd will never risk to be\ntruncated because it would be zero at all times, in turn so hiding the\nSMP race.\n\nThis bug was discovered and fully debugged by Ulrich, quote:\n\n----\n[..]\npmd_none_or_trans_huge_or_clear_bad() loads the content of edx and\neax.\n\n    496 static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t\n    *pmd)\n    497 {\n    498         /* depend on compiler for an atomic pmd read */\n    499         pmd_t pmdval = *pmd;\n\n                                // edi = pmd pointer\n0xc0507a74 <sys_mincore+548>:   mov    0x8(%esp),%edi\n...\n                                // edx = PTE page table high address\n0xc0507a84 <sys_mincore+564>:   mov    0x4(%edi),%edx\n...\n                                // eax = PTE page table low address\n0xc0507a8e <sys_mincore+574>:   mov    (%edi),%eax\n\n[..]\n\nPlease note that the PMD is not read atomically. These are two \"mov\"\ninstructions where the high order bits of the PMD entry are fetched\nfirst. Hence, the above machine code is prone to the following race.\n\n-  The PMD entry {high|low} is 0x0000000000000000.\n   The \"mov\" at 0xc0507a84 loads 0x00000000 into edx.\n\n-  A page fault (on another CPU) sneaks in between the two \"mov\"\n   instructions and instantiates the PMD.\n\n-  The PMD entry {high|low} is now 0x00000003fda38067.\n   The \"mov\" at 0xc0507a8e loads 0xfda38067 into eax.\n----\n\nReported-by: Ulrich Obergfell <uobergfe@redhat.com>\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Hugh Dickins <hughd@google.com>\nCc: Larry Woodman <lwoodman@redhat.com>\nCc: Petr Matousek <pmatouse@redhat.com>\nCc: Rik van Riel <riel@redhat.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "arch/x86/include/asm/pgtable-3level.h||arch/x86/include/asm/pgtable-3level.h",
      "include/asm-generic/pgtable.h||include/asm-generic/pgtable.h"
    ]
  },
  "patch_diff": {
    "arch/x86/include/asm/pgtable-3level.h||arch/x86/include/asm/pgtable-3level.h": [
      "File: arch/x86/include/asm/pgtable-3level.h -> arch/x86/include/asm/pgtable-3level.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:  ptep->pte_low = pte.pte_low;",
      "32: }",
      "34: static inline void native_set_pte_atomic(pte_t *ptep, pte_t pte)",
      "35: {",
      "36:  set_64bit((unsigned long long *)(ptep), native_pte_val(pte));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: #define pmd_read_atomic pmd_read_atomic",
      "59: #ifndef CONFIG_TRANSPARENT_HUGEPAGE",
      "60: static inline pmd_t pmd_read_atomic(pmd_t *pmdp)",
      "61: {",
      "62:  pmdval_t ret;",
      "63:  u32 *tmp = (u32 *)pmdp;",
      "65:  ret = (pmdval_t) (*tmp);",
      "66:  if (ret) {",
      "71:   smp_rmb();",
      "72:   ret |= ((pmdval_t)*(tmp + 1)) << 32;",
      "73:  }",
      "75:  return (pmd_t) { ret };",
      "76: }",
      "78: static inline pmd_t pmd_read_atomic(pmd_t *pmdp)",
      "79: {",
      "80:  return (pmd_t) { atomic64_read((atomic64_t *)pmdp) };",
      "81: }",
      "",
      "---------------"
    ],
    "include/asm-generic/pgtable.h||include/asm-generic/pgtable.h": [
      "File: include/asm-generic/pgtable.h -> include/asm-generic/pgtable.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448: #ifndef pmd_read_atomic",
      "449: static inline pmd_t pmd_read_atomic(pmd_t *pmdp)",
      "450: {",
      "456:  return *pmdp;",
      "457: }",
      "458: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "462: static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)",
      "463: {",
      "",
      "[Removed Lines]",
      "465:  pmd_t pmdval = *pmd;",
      "",
      "[Added Lines]",
      "483:  pmd_t pmdval = pmd_read_atomic(pmd);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8c7aae64cd2db5eccc631c29fa978a24fb1feef",
      "candidate_info": {
        "commit_hash": "d8c7aae64cd2db5eccc631c29fa978a24fb1feef",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d8c7aae64cd2db5eccc631c29fa978a24fb1feef",
        "files": [
          "net/mac80211/agg-rx.c"
        ],
        "message": "mac80211: add missing rcu_read_lock/unlock in agg-rx session timer\n\nFixes a lockdep warning:\n\n===================================================\n[ INFO: suspicious rcu_dereference_check() usage. ]\n---------------------------------------------------\nnet/mac80211/agg-rx.c:148 invoked rcu_dereference_check() without protection!\n\nother info that might help us debug this:\n\nrcu_scheduler_active = 1, debug_locks = 1\n1 lock held by arecord/11226:\n #0:  (&tid_agg_rx->session_timer){+.-...}, at: [<ffffffff81066bb0>] call_timer_fn+0x0/0x360\n\nstack backtrace:\nPid: 11226, comm: arecord Not tainted 3.1.0-kml #16\nCall Trace:\n <IRQ>  [<ffffffff81093454>] lockdep_rcu_dereference+0xa4/0xc0\n [<ffffffffa02778c9>] sta_rx_agg_session_timer_expired+0xc9/0x110 [mac80211]\n [<ffffffffa0277800>] ? ieee80211_process_addba_resp+0x220/0x220 [mac80211]\n [<ffffffff81066c3a>] call_timer_fn+0x8a/0x360\n [<ffffffff81066bb0>] ? init_timer_deferrable_key+0x30/0x30\n [<ffffffff81477bb0>] ? _raw_spin_unlock_irq+0x30/0x70\n [<ffffffff81067049>] run_timer_softirq+0x139/0x310\n [<ffffffff81091d5e>] ? put_lock_stats.isra.25+0xe/0x40\n [<ffffffff810922ac>] ? lock_release_holdtime.part.26+0xdc/0x160\n [<ffffffffa0277800>] ? ieee80211_process_addba_resp+0x220/0x220 [mac80211]\n [<ffffffff8105cb78>] __do_softirq+0xc8/0x3c0\n [<ffffffff8108f088>] ? tick_dev_program_event+0x48/0x110\n [<ffffffff8108f16f>] ? tick_program_event+0x1f/0x30\n [<ffffffff81153b15>] ? putname+0x35/0x50\n [<ffffffff8147a43c>] call_softirq+0x1c/0x30\n [<ffffffff81004c55>] do_softirq+0xa5/0xe0\n [<ffffffff8105d1ee>] irq_exit+0xae/0xe0\n [<ffffffff8147ac6b>] smp_apic_timer_interrupt+0x6b/0x98\n [<ffffffff81479ab3>] apic_timer_interrupt+0x73/0x80\n <EOI>  [<ffffffff8146aac6>] ? free_debug_processing+0x1a1/0x1d5\n [<ffffffff81153b15>] ? putname+0x35/0x50\n [<ffffffff8146ab2b>] __slab_free+0x31/0x2ca\n [<ffffffff81477c3a>] ? _raw_spin_unlock_irqrestore+0x4a/0x90\n [<ffffffff81253b8f>] ? __debug_check_no_obj_freed+0x15f/0x210\n [<ffffffff81097054>] ? lock_release_nested+0x84/0xc0\n [<ffffffff8113ec55>] ? kmem_cache_free+0x105/0x250\n [<ffffffff81153b15>] ? putname+0x35/0x50\n [<ffffffff81153b15>] ? putname+0x35/0x50\n [<ffffffff8113ed8f>] kmem_cache_free+0x23f/0x250\n [<ffffffff81153b15>] putname+0x35/0x50\n [<ffffffff81146d8d>] do_sys_open+0x16d/0x1d0\n [<ffffffff81146e10>] sys_open+0x20/0x30\n [<ffffffff81478f42>] system_call_fastpath+0x16/0x1b\n\nReported-by: Johannes Berg <johannes.berg@intel.com>\nSigned-off-by: Felix Fietkau <nbd@openwrt.org>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>",
        "before_after_code_files": [
          "net/mac80211/agg-rx.c||net/mac80211/agg-rx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/mac80211/agg-rx.c||net/mac80211/agg-rx.c": [
          "File: net/mac80211/agg-rx.c -> net/mac80211/agg-rx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:  struct tid_ampdu_rx *tid_rx;",
          "146:  unsigned long timeout;",
          "148:  tid_rx = rcu_dereference(sta->ampdu_mlme.tid_rx[*ptid]);",
          "150:   return;",
          "152:  timeout = tid_rx->last_rx + TU_TO_JIFFIES(tid_rx->timeout);",
          "153:  if (time_is_after_jiffies(timeout)) {",
          "154:   mod_timer(&tid_rx->session_timer, timeout);",
          "155:   return;",
          "156:  }",
          "158: #ifdef CONFIG_MAC80211_HT_DEBUG",
          "159:  printk(KERN_DEBUG \"rx session timer expired on tid %d\\n\", (u16)*ptid);",
          "",
          "[Removed Lines]",
          "149:  if (!tid_rx)",
          "",
          "[Added Lines]",
          "148:  rcu_read_lock();",
          "150:  if (!tid_rx) {",
          "151:   rcu_read_unlock();",
          "153:  }",
          "158:   rcu_read_unlock();",
          "161:  rcu_read_unlock();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2eddc7c491c916ff9ba39b3563cd779e7b58320",
      "candidate_info": {
        "commit_hash": "a2eddc7c491c916ff9ba39b3563cd779e7b58320",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a2eddc7c491c916ff9ba39b3563cd779e7b58320",
        "files": [
          "arch/frv/kernel/entry.S"
        ],
        "message": "FRV: Optimise the system call exit path in entry.S [ver #2]\n\nOptimise the system call exit path in entry.S by packing some instructions.\n\nSuggested-by: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: David Howells <dhowells@redhat.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
        "before_after_code_files": [
          "arch/frv/kernel/entry.S||arch/frv/kernel/entry.S"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/frv/kernel/entry.S||arch/frv/kernel/entry.S": [
          "File: arch/frv/kernel/entry.S -> arch/frv/kernel/entry.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "905: __syscall_exit:",
          "906:  LEDS  0x6300",
          "911:  ldi  @(gr28,#REG_PSR),gr22",
          "912:  srli  gr22,#1,gr5",
          "913:  andi.p  gr22,#~PSR_PS,gr22",
          "914:  andi  gr5,#PSR_PS,gr5",
          "915:  or  gr5,gr22,gr22",
          "921:  # make sure we don't miss an interrupt setting need_resched or sigpending between",
          "922:  # sampling and the RETT",
          "",
          "[Removed Lines]",
          "908:  sti  gr8,@(gr28,#REG_GR(8)) ; save return value",
          "910:  # rebuild saved psr - execve will change it for init/main.c",
          "916:  ori  gr22,#PSR_S,gr22",
          "918:  # keep current PSR in GR23",
          "919:  movsg  psr,gr23",
          "",
          "[Added Lines]",
          "908:  # keep current PSR in GR23",
          "909:  movsg  psr,gr23",
          "913:  sti.p  gr8,@(gr28,#REG_GR(8)) ; save return value",
          "915:  # rebuild saved psr - execve will change it for init/main.c",
          "920:  ori.p  gr22,#PSR_S,gr22",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd0a37355c4d39affa39d5cd75168fb94b292318",
      "candidate_info": {
        "commit_hash": "fd0a37355c4d39affa39d5cd75168fb94b292318",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fd0a37355c4d39affa39d5cd75168fb94b292318",
        "files": [
          "lib/spinlock_debug.c"
        ],
        "message": "spinlock_debug: print kallsyms name for lock\n\nWhen a spinlock warning is printed we usually get\n\n BUG: spinlock bad magic on CPU#0, modprobe/111\n  lock: 0xdff09f38, .magic: 00000000, .owner: /0, .owner_cpu: 0\n\nbut it's nicer to print the symbol for the lock if we have it so that we\ncan avoid 'grep dff09f38 /proc/kallsyms' to find out which lock it was.\nUse kallsyms to print the symbol name so we get something a bit easier to\nread\n\n BUG: spinlock bad magic on CPU#0, modprobe/112\n  lock: test_lock, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0\n\nIf the lock is not in kallsyms %ps will fall back to printing the address\ndirectly.\n\nSigned-off-by: Stephen Boyd <sboyd@codeaurora.org>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: Peter Zijlstra <a.p.zijlstra@chello.nl>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "lib/spinlock_debug.c||lispinlock_debug.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/spinlock_debug.c||lispinlock_debug.c": [
          "File: lib/spinlock_debug.c -> lispinlock_debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  printk(KERN_EMERG \"BUG: spinlock %s on CPU#%d, %s/%d\\n\",",
          "59:   msg, raw_smp_processor_id(),",
          "60:   current->comm, task_pid_nr(current));",
          "62:    \".owner_cpu: %d\\n\",",
          "63:   lock, lock->magic,",
          "64:   owner ? owner->comm : \"<none>\",",
          "",
          "[Removed Lines]",
          "61:  printk(KERN_EMERG \" lock: %p, .magic: %08x, .owner: %s/%d, \"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08f75bf14fadaa81fe362d5acda9b77b113dd0a2",
      "candidate_info": {
        "commit_hash": "08f75bf14fadaa81fe362d5acda9b77b113dd0a2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/08f75bf14fadaa81fe362d5acda9b77b113dd0a2",
        "files": [
          "drivers/usb/musb/musb_gadget.c"
        ],
        "message": "usb: musb_gadget: fix crash caused by dangling pointer\n\nusb_ep_ops.disable must clear external copy of the endpoint descriptor,\notherwise musb crashes after loading/unloading several gadget modules\nin a row:\n\nUnable to handle kernel paging request at virtual address bf013730\npgd = c0004000\n[bf013730] *pgd=8f26d811, *pte=00000000, *ppte=00000000\nInternal error: Oops: 7 [#1]\nModules linked in: g_cdc [last unloaded: g_file_storage]\nCPU: 0    Not tainted  (3.2.17 #647)\nPC is at musb_gadget_enable+0x4c/0x24c\nLR is at _raw_spin_lock_irqsave+0x4c/0x58\n[<c027c030>] (musb_gadget_enable+0x4c/0x24c) from [<bf01b760>] (gether_connect+0x3c/0x19c [g_cdc])\n[<bf01b760>] (gether_connect+0x3c/0x19c [g_cdc]) from [<bf01ba1c>] (ecm_set_alt+0x15c/0x180 [g_cdc])\n[<bf01ba1c>] (ecm_set_alt+0x15c/0x180 [g_cdc]) from [<bf01ecd4>] (composite_setup+0x85c/0xac4 [g_cdc])\n[<bf01ecd4>] (composite_setup+0x85c/0xac4 [g_cdc]) from [<c027b744>] (musb_g_ep0_irq+0x844/0x924)\n[<c027b744>] (musb_g_ep0_irq+0x844/0x924) from [<c027a97c>] (musb_interrupt+0x79c/0x864)\n[<c027a97c>] (musb_interrupt+0x79c/0x864) from [<c027aaa8>] (generic_interrupt+0x64/0x7c)\n[<c027aaa8>] (generic_interrupt+0x64/0x7c) from [<c00797cc>] (handle_irq_event_percpu+0x28/0x178)\n...\n\nCc: stable@vger.kernel.org # v3.1+\nSigned-off-by: Grazvydas Ignotas <notasas@gmail.com>\nSigned-off-by: Felipe Balbi <balbi@ti.com>",
        "before_after_code_files": [
          "drivers/usb/musb/musb_gadget.c||drivers/usmusmusb_gadget.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/usb/musb/musb_gadget.c||drivers/usmusmusb_gadget.c": [
          "File: drivers/usb/musb/musb_gadget.c -> drivers/usmusmusb_gadget.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1232:  }",
          "1234:  musb_ep->desc = NULL;",
          "1237:  nuke(musb_ep, -ESHUTDOWN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c9c708c9fc967e389f85bc735e4c1f65d67334e",
      "candidate_info": {
        "commit_hash": "3c9c708c9fc967e389f85bc735e4c1f65d67334e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3c9c708c9fc967e389f85bc735e4c1f65d67334e",
        "files": [
          "block/blk-ioc.c"
        ],
        "message": "block: avoid infinite loop in get_task_io_context()\n\nCalling get_task_io_context() on a exiting task which isn't %current can\nloop forever. This triggers at boot time on my dev machine.\n\nBUG: soft lockup - CPU#3 stuck for 22s ! [mountall.1603]\n\nFix this by making create_task_io_context() returns -EBUSY in this case\nto break the loop.\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Alan Cox <alan@linux.intel.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "block/blk-ioc.c||block/blk-ioc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/blk-ioc.c||block/blk-ioc.c": [
          "File: block/blk-ioc.c -> block/blk-ioc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: int create_task_io_context(struct task_struct *task, gfp_t gfp_flags, int node)",
          "236: {",
          "237:  struct io_context *ioc;",
          "239:  ioc = kmem_cache_alloc_node(iocontext_cachep, gfp_flags | __GFP_ZERO,",
          "240:         node);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:  int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:   task->io_context = ioc;",
          "263:  else",
          "264:   kmem_cache_free(iocontext_cachep, ioc);",
          "265:  task_unlock(task);",
          "268: }",
          "",
          "[Removed Lines]",
          "267:  return 0;",
          "",
          "[Added Lines]",
          "267:  ret = task->io_context ? 0 : -EBUSY;",
          "271:  return ret;",
          "",
          "---------------"
        ]
      }
    }
  ]
}