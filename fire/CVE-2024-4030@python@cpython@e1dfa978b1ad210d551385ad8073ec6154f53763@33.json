{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7240ed3f09ffb4bb8bffac3a1ff88b1e99afa26",
      "candidate_info": {
        "commit_hash": "b7240ed3f09ffb4bb8bffac3a1ff88b1e99afa26",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/b7240ed3f09ffb4bb8bffac3a1ff88b1e99afa26",
        "files": [
          "Lib/pdb.py",
          "Lib/test/test_pdb.py",
          "Misc/NEWS.d/next/Library/2024-05-31-21-17-43.gh-issue-119824.CQlxWV.rst",
          "Misc/NEWS.d/next/Library/2024-06-20-01-31-24.gh-issue-120769.PfiMrc.rst"
        ],
        "message": "[3.13] gh-119824: Revert the `where` solution and use meta commands (#120919)",
        "before_after_code_files": [
          "Lib/pdb.py||Lib/pdb.py",
          "Lib/test/test_pdb.py||Lib/test/test_pdb.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/pdb.py||Lib/pdb.py": [
          "File: Lib/pdb.py -> Lib/pdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:     # Called before loop, handles display expressions",
          "521:     # Set up convenience variable containers",
          "523:         displaying = self.displaying.get(self.curframe)",
          "524:         if displaying:",
          "525:             for expr, oldvalue in displaying.items():",
          "",
          "[Removed Lines]",
          "522:     def preloop(self):",
          "",
          "[Added Lines]",
          "522:     def _show_display(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:             self.setup(frame, tb)",
          "608:             # We should print the stack entry if and only if the user input",
          "609:             # is expected, and we should print it right before the user input.",
          "616:             self._cmdloop()",
          "619:                 self.cmdqueue.pop()",
          "620:             self.forget()",
          "",
          "[Removed Lines]",
          "610:             # If self.cmdqueue is not empty, we append a \"w 0\" command to the",
          "611:             # queue, which is equivalent to print_stack_entry",
          "612:             if self.cmdqueue:",
          "613:                 self.cmdqueue.append('w 0')",
          "614:             else:",
          "615:                 self.print_stack_entry(self.stack[self.curindex])",
          "617:             # If \"w 0\" is not used, pop it out",
          "618:             if self.cmdqueue and self.cmdqueue[-1] == 'w 0':",
          "",
          "[Added Lines]",
          "610:             # We achieve this by appending _pdbcmd_print_frame_status to the",
          "611:             # command queue. If cmdqueue is not exausted, the user input is",
          "612:             # not expected and we will not print the stack entry.",
          "613:             self.cmdqueue.append('_pdbcmd_print_frame_status')",
          "615:             # If _pdbcmd_print_frame_status is not used, pop it out",
          "616:             if self.cmdqueue and self.cmdqueue[-1] == '_pdbcmd_print_frame_status':",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "848:         \"\"\"",
          "849:         if not self.commands_defining:",
          "850:             self._validate_file_mtime()",
          "851:             return cmd.Cmd.onecmd(self, line)",
          "852:         else:",
          "853:             return self.handle_command_def(line)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:             if line.startswith('_pdbcmd'):",
          "850:                 command, arg, line = self.parseline(line)",
          "851:                 if hasattr(self, command):",
          "852:                     return getattr(self, command)(arg)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "981:             state += 1",
          "982:         return matches",
          "984:     # Command definitions, called by cmdloop()",
          "985:     # The argument is the remaining string on the command line",
          "986:     # Return true to exit from the command loop",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "986:     # Pdb meta commands, only intended to be used internally by pdb",
          "988:     def _pdbcmd_print_frame_status(self, arg):",
          "989:         self.print_stack_entry(self.stack[self.curindex])",
          "990:         self._show_display()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1411:     complete_cl = _complete_location",
          "1413:     def do_where(self, arg):",
          "1420:         An arrow indicates the \"current frame\", which determines the",
          "1421:         context of most commands.  'bt' is an alias for this command.",
          "1422:         \"\"\"",
          "1432:     do_w = do_where",
          "1433:     do_bt = do_where",
          "",
          "[Removed Lines]",
          "1414:         \"\"\"w(here) [count]",
          "1416:         Print a stack trace. If count is not specified, print the full stack.",
          "1417:         If count is 0, print the current frame entry. If count is positive,",
          "1418:         print count entries from the most recent frame. If count is negative,",
          "1419:         print -count entries from the least recent frame.",
          "1423:         if not arg:",
          "1424:             count = None",
          "1425:         else:",
          "1426:             try:",
          "1427:                 count = int(arg)",
          "1428:             except ValueError:",
          "1429:                 self.error('Invalid count (%s)' % arg)",
          "1430:                 return",
          "1431:         self.print_stack_trace(count)",
          "",
          "[Added Lines]",
          "1422:         \"\"\"w(here)",
          "1424:         Print a stack trace, with the most recent frame at the bottom.",
          "1428:         if arg:",
          "1429:             self._print_invalid_arg(arg)",
          "1430:             return",
          "1431:         self.print_stack_trace()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2083:     # It is also consistent with the up/down commands (which are",
          "2084:     # compatible with dbx and gdb: up moves towards 'main()'",
          "2085:     # and down moves towards the most recent stack frame).",
          "2100:         try:",
          "2102:                 self.print_stack_entry(frame_lineno)",
          "2103:         except KeyboardInterrupt:",
          "2104:             pass",
          "",
          "[Removed Lines]",
          "2086:     #     * if count is None, prints the full stack",
          "2087:     #     * if count = 0, prints the current frame entry",
          "2088:     #     * if count < 0, prints -count least recent frame entries",
          "2089:     #     * if count > 0, prints count most recent frame entries",
          "2091:     def print_stack_trace(self, count=None):",
          "2092:         if count is None:",
          "2093:             stack_to_print = self.stack",
          "2094:         elif count == 0:",
          "2095:             stack_to_print = [self.stack[self.curindex]]",
          "2096:         elif count < 0:",
          "2097:             stack_to_print = self.stack[:-count]",
          "2098:         else:",
          "2099:             stack_to_print = self.stack[-count:]",
          "2101:             for frame_lineno in stack_to_print:",
          "",
          "[Added Lines]",
          "2087:     def print_stack_trace(self):",
          "2089:             for frame_lineno in self.stack:",
          "",
          "---------------"
        ],
        "Lib/test/test_pdb.py||Lib/test/test_pdb.py": [
          "File: Lib/test/test_pdb.py -> Lib/test/test_pdb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:     (Pdb) continue",
          "492:     \"\"\"",
          "495: def do_nothing():",
          "496:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: def test_pdb_empty_line():",
          "495:     \"\"\"Test that empty line repeats the last command.",
          "497:     >>> def test_function():",
          "498:     ...     x = 1",
          "499:     ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "500:     ...     y = 2",
          "502:     >>> with PdbTestInput([  # doctest: +NORMALIZE_WHITESPACE",
          "503:     ...     'p x',",
          "504:     ...     '',  # Should repeat p x",
          "505:     ...     'n ;; p 0 ;; p x',  # Fill cmdqueue with multiple commands",
          "506:     ...     '',  # Should still repeat p x",
          "507:     ...     'continue',",
          "508:     ... ]):",
          "509:     ...    test_function()",
          "510:     > <doctest test.test_pdb.test_pdb_empty_line[0]>(3)test_function()",
          "511:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "512:     (Pdb) p x",
          "513:     1",
          "514:     (Pdb)",
          "515:     1",
          "516:     (Pdb) n ;; p 0 ;; p x",
          "517:     0",
          "518:     1",
          "519:     > <doctest test.test_pdb.test_pdb_empty_line[0]>(4)test_function()",
          "520:     -> y = 2",
          "521:     (Pdb)",
          "522:     1",
          "523:     (Pdb) continue",
          "524:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "781:     ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "783:     >>> def f():",
          "786:     >>> def test_function():",
          "787:     ...     f()",
          "",
          "[Removed Lines]",
          "784:     ...     g()",
          "",
          "[Added Lines]",
          "815:     ...     g();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "789:     >>> with PdbTestInput([  # doctest: +ELLIPSIS",
          "790:     ...     'w',",
          "791:     ...     'where',",
          "794:     ...     'u',",
          "795:     ...     'w',",
          "799:     ...     'continue',",
          "800:     ... ]):",
          "801:     ...    test_function()",
          "",
          "[Removed Lines]",
          "792:     ...     'w 1',",
          "793:     ...     'w invalid',",
          "796:     ...     'w 0',",
          "797:     ...     'w 100',",
          "798:     ...     'w -100',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "803:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "804:     (Pdb) w",
          "805:     ...",
          "807:     -> test_function()",
          "808:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "809:     -> f()",
          "810:       <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "812:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "813:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "814:     (Pdb) where",
          "815:     ...",
          "817:     -> test_function()",
          "818:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "819:     -> f()",
          "820:       <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "822:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "823:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "829:     (Pdb) u",
          "830:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "832:     (Pdb) w",
          "833:     ...",
          "858:     -> test_function()",
          "859:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "860:     -> f()",
          "861:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "863:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "864:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "865:     (Pdb) continue",
          "",
          "[Removed Lines]",
          "806:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "811:     -> g()",
          "816:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "821:     -> g()",
          "824:     (Pdb) w 1",
          "825:     > <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "826:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "827:     (Pdb) w invalid",
          "831:     -> g()",
          "834:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "835:     -> test_function()",
          "836:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "837:     -> f()",
          "838:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "839:     -> g()",
          "840:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "841:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "842:     (Pdb) w 0",
          "843:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "844:     -> g()",
          "845:     (Pdb) w 100",
          "846:     ...",
          "847:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "848:     -> test_function()",
          "849:       <doctest test.test_pdb.test_pdb_where_command[2]>(2)test_function()",
          "850:     -> f()",
          "851:     > <doctest test.test_pdb.test_pdb_where_command[1]>(2)f()",
          "852:     -> g()",
          "853:       <doctest test.test_pdb.test_pdb_where_command[0]>(2)g()",
          "854:     -> import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()",
          "855:     (Pdb) w -100",
          "856:     ...",
          "857:       <doctest test.test_pdb.test_pdb_where_command[3]>(13)<module>()",
          "862:     -> g()",
          "",
          "[Added Lines]",
          "832:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "837:     -> g();",
          "842:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "847:     -> g();",
          "852:     -> g();",
          "855:       <doctest test.test_pdb.test_pdb_where_command[3]>(8)<module>()",
          "860:     -> g();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3198:         stdout, stderr = self.run_pdb_script(script, 'q\\n', pdbrc=pdbrc, remove_home=True)",
          "3199:         self.assertNotIn(\"SyntaxError\", stdout)",
          "3200:         self.assertIn(\"a+8=9\", stdout)",
          "3203:     def test_pdbrc_empty_line(self):",
          "3204:         \"\"\"Test that empty lines in .pdbrc are ignored.\"\"\"",
          "",
          "[Removed Lines]",
          "3201:         self.assertIn(\"-> b = 2\", stdout)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc8586a1edc0ec2844008827b59fd50da73e735c",
      "candidate_info": {
        "commit_hash": "cc8586a1edc0ec2844008827b59fd50da73e735c",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/cc8586a1edc0ec2844008827b59fd50da73e735c",
        "files": [
          "Doc/library/base64.rst",
          "Lib/base64.py"
        ],
        "message": "[3.13] Clarify base64.a85encode docs: *wrapcols* doesn't count the newline (GH-119409) (GH-119483)\n\nClarify base64.a85encode docs: *wrapcols* doesn't count the newline (GH-119409)\n(cherry picked from commit ffa24aab107b5bc3c6ad31a6a245c226bf24b208)\n\nCo-authored-by: Petr Viktorin <encukou@gmail.com>",
        "before_after_code_files": [
          "Lib/base64.py||Lib/base64.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/base64.py||Lib/base64.py": [
          "File: Lib/base64.py -> Lib/base64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:     wrapcol controls whether the output should have newline (b'\\\\n') characters",
          "334:     added to it. If this is non-zero, each output line will be at most this",
          "337:     pad controls whether the input is padded to a multiple of 4 before",
          "338:     encoding. Note that the btoa implementation always pads.",
          "",
          "[Removed Lines]",
          "335:     many characters long.",
          "",
          "[Added Lines]",
          "335:     many characters long, excluding the trailing newline.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "061abf8e4c1a0a920067aa73b0e41f40c89e340b",
      "candidate_info": {
        "commit_hash": "061abf8e4c1a0a920067aa73b0e41f40c89e340b",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/061abf8e4c1a0a920067aa73b0e41f40c89e340b",
        "files": [
          "Lib/os.py",
          "Lib/shutil.py",
          "Lib/test/test_shutil.py",
          "Misc/NEWS.d/next/Library/2024-05-29-20-42-17.gh-issue-89727.5lPTTW.rst"
        ],
        "message": "[3.13] GH-89727: Partially fix `shutil.rmtree()` recursion error on deep trees (GH-119634) (#119748)\n\nGH-89727: Partially fix `shutil.rmtree()` recursion error on deep trees (GH-119634)\n\nMake `shutil._rmtree_unsafe()` call `os.walk()`, which is implemented\nwithout recursion.\n\n`shutil._rmtree_safe_fd()` is not affected and can still raise a recursion\nerror.\n\n(cherry picked from commit a150679f90c6e3f017bd75cac3b8f727063cc4aa)\n\nCo-authored-by: Barney Gale <barney.gale@gmail.com>\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
        "before_after_code_files": [
          "Lib/os.py||Lib/os.py",
          "Lib/shutil.py||Lib/shutil.py",
          "Lib/test/test_shutil.py||Lib/test/test_shutil.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/os.py||Lib/os.py": [
          "File: Lib/os.py -> Lib/os.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "282: __all__.extend([\"makedirs\", \"removedirs\", \"renames\"])",
          "284: def walk(top, topdown=True, onerror=None, followlinks=False):",
          "285:     \"\"\"Directory tree generator.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: # Private sentinel that makes walk() classify all symlinks and junctions as",
          "285: # regular files.",
          "286: _walk_symlinks_as_files = object()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:                     break",
          "384:                 try:",
          "386:                 except OSError:",
          "387:                     # If is_dir() raises an OSError, consider the entry not to",
          "388:                     # be a directory, same behaviour as os.path.isdir().",
          "",
          "[Removed Lines]",
          "385:                     is_dir = entry.is_dir()",
          "",
          "[Added Lines]",
          "389:                     if followlinks is _walk_symlinks_as_files:",
          "390:                         is_dir = entry.is_dir(follow_symlinks=False) and not entry.is_junction()",
          "391:                     else:",
          "392:                         is_dir = entry.is_dir()",
          "",
          "---------------"
        ],
        "Lib/shutil.py||Lib/shutil.py": [
          "File: Lib/shutil.py -> Lib/shutil.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "607: # version vulnerable to race conditions",
          "608: def _rmtree_unsafe(path, onexc):",
          "627:             try:",
          "633:             except FileNotFoundError:",
          "634:                 continue",
          "635:             except OSError as err:",
          "640:             try:",
          "641:                 os.unlink(fullname)",
          "642:             except FileNotFoundError:",
          "",
          "[Removed Lines]",
          "609:     try:",
          "610:         with os.scandir(path) as scandir_it:",
          "611:             entries = list(scandir_it)",
          "612:     except FileNotFoundError:",
          "613:         return",
          "614:     except OSError as err:",
          "615:         onexc(os.scandir, path, err)",
          "616:         entries = []",
          "617:     for entry in entries:",
          "618:         fullname = entry.path",
          "619:         try:",
          "620:             is_dir = entry.is_dir(follow_symlinks=False)",
          "621:         except FileNotFoundError:",
          "622:             continue",
          "623:         except OSError:",
          "624:             is_dir = False",
          "626:         if is_dir and not entry.is_junction():",
          "628:                 if entry.is_symlink():",
          "629:                     # This can only happen if someone replaces",
          "630:                     # a directory with a symlink after the call to",
          "631:                     # os.scandir or entry.is_dir above.",
          "632:                     raise OSError(\"Cannot call rmtree on a symbolic link\")",
          "636:                 onexc(os.path.islink, fullname, err)",
          "637:                 continue",
          "638:             _rmtree_unsafe(fullname, onexc)",
          "639:         else:",
          "",
          "[Added Lines]",
          "609:     def onerror(err):",
          "610:         if not isinstance(err, FileNotFoundError):",
          "611:             onexc(os.scandir, err.filename, err)",
          "612:     results = os.walk(path, topdown=False, onerror=onerror, followlinks=os._walk_symlinks_as_files)",
          "613:     for dirpath, dirnames, filenames in results:",
          "614:         for name in dirnames:",
          "615:             fullname = os.path.join(dirpath, name)",
          "617:                 os.rmdir(fullname)",
          "621:                 onexc(os.rmdir, fullname, err)",
          "622:         for name in filenames:",
          "623:             fullname = os.path.join(dirpath, name)",
          "",
          "---------------"
        ],
        "Lib/test/test_shutil.py||Lib/test/test_shutil.py": [
          "File: Lib/test/test_shutil.py -> Lib/test/test_shutil.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "741:             shutil.rmtree(TESTFN)",
          "742:             raise",
          "745: class TestCopyTree(BaseTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "744:     @unittest.skipIf(shutil._use_fd_functions, \"fd-based functions remain unfixed (GH-89727)\")",
          "745:     def test_rmtree_above_recursion_limit(self):",
          "746:         recursion_limit = 40",
          "747:         # directory_depth > recursion_limit",
          "748:         directory_depth = recursion_limit + 10",
          "749:         base = os.path.join(TESTFN, *(['d'] * directory_depth))",
          "750:         os.makedirs(base)",
          "752:         with support.infinite_recursion(recursion_limit):",
          "753:             shutil.rmtree(TESTFN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84634254fef19ab31439e88ec0213acb46bd7b1f",
      "candidate_info": {
        "commit_hash": "84634254fef19ab31439e88ec0213acb46bd7b1f",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/84634254fef19ab31439e88ec0213acb46bd7b1f",
        "files": [
          "Lib/functools.py",
          "Lib/test/test_asyncio/test_events.py",
          "Lib/test/test_functools.py",
          "Misc/NEWS.d/next/Library/2024-06-26-10-13-40.gh-issue-121025.M-XXlV.rst"
        ],
        "message": "[3.13] gh-121025: Improve partialmethod.__repr__ (GH-121033) (#121037)\n\ngh-121025: Improve partialmethod.__repr__ (GH-121033)\n\nIt no longer contains redundant commas and spaces.\n(cherry picked from commit d2646e3f45e3e4e831ee2ae84d55b161a361d592)\n\nCo-authored-by: B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/functools.py||Lib/functools.py",
          "Lib/test/test_asyncio/test_events.py||Lib/test/test_asyncio/test_events.py",
          "Lib/test/test_functools.py||Lib/test/test_functools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/functools.py||Lib/functools.py": [
          "File: Lib/functools.py -> Lib/functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:             self.keywords = keywords",
          "375:     def __repr__(self):",
          "386:     def _make_unbound_method(self):",
          "387:         def _method(cls_or_self, /, *args, **keywords):",
          "",
          "[Removed Lines]",
          "376:         args = \", \".join(map(repr, self.args))",
          "377:         keywords = \", \".join(\"{}={!r}\".format(k, v)",
          "378:                                  for k, v in self.keywords.items())",
          "379:         format_string = \"{module}.{cls}({func}, {args}, {keywords})\"",
          "380:         return format_string.format(module=self.__class__.__module__,",
          "381:                                     cls=self.__class__.__qualname__,",
          "382:                                     func=self.func,",
          "383:                                     args=args,",
          "384:                                     keywords=keywords)",
          "",
          "[Added Lines]",
          "376:         cls = type(self)",
          "377:         module = cls.__module__",
          "378:         qualname = cls.__qualname__",
          "379:         args = [repr(self.func)]",
          "380:         args.extend(map(repr, self.args))",
          "381:         args.extend(f\"{k}={v!r}\" for k, v in self.keywords.items())",
          "382:         return f\"{module}.{qualname}({', '.join(args)})\"",
          "",
          "---------------"
        ],
        "Lib/test/test_asyncio/test_events.py||Lib/test/test_asyncio/test_events.py": [
          "File: Lib/test/test_asyncio/test_events.py -> Lib/test/test_asyncio/test_events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2364:         h = asyncio.Handle(cb, (), self.loop)",
          "2366:         cb_regex = r'<function HandleTests.test_handle_repr .*>'",
          "2368:         regex = fr'^<Handle {cb_regex} at {re.escape(filename)}:{lineno}>$'",
          "2369:         self.assertRegex(repr(h), regex)",
          "",
          "[Removed Lines]",
          "2367:         cb_regex = fr'functools.partialmethod\\({cb_regex}, , \\)\\(\\)'",
          "",
          "[Added Lines]",
          "2367:         cb_regex = fr'functools.partialmethod\\({cb_regex}\\)\\(\\)'",
          "",
          "---------------"
        ],
        "Lib/test/test_functools.py||Lib/test/test_functools.py": [
          "File: Lib/test/test_functools.py -> Lib/test/test_functools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:                 method = functools.partialmethod(func=capture, a=1)",
          "571:     def test_repr(self):",
          "572:         self.assertEqual(repr(vars(self.A)['both']),",
          "573:                          'functools.partialmethod({}, 3, b=4)'.format(capture))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572:         self.assertEqual(repr(vars(self.A)['nothing']),",
          "573:                          'functools.partialmethod({})'.format(capture))",
          "574:         self.assertEqual(repr(vars(self.A)['positional']),",
          "575:                          'functools.partialmethod({}, 1)'.format(capture))",
          "576:         self.assertEqual(repr(vars(self.A)['keywords']),",
          "577:                          'functools.partialmethod({}, a=2)'.format(capture))",
          "578:         self.assertEqual(repr(vars(self.A)['spec_keywords']),",
          "579:                          'functools.partialmethod({}, self=1, func=2)'.format(capture))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fd8cc564bea243e30cc8881a9981ab85e09fe81",
      "candidate_info": {
        "commit_hash": "8fd8cc564bea243e30cc8881a9981ab85e09fe81",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/8fd8cc564bea243e30cc8881a9981ab85e09fe81",
        "files": [
          "Lib/test/test_pyrepl/test_interact.py",
          "Lib/test/test_pyrepl/test_unix_console.py"
        ],
        "message": "[3.13] gh-119469: Fix _pyrepl reference leaks (GH-119470) (#119471)\n\n(cherry picked from commit 6e012ced6cc07a7502278e1849c5618d1ab54a08)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py",
          "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py": [
          "File: Lib/test/test_pyrepl/test_interact.py -> Lib/test/test_pyrepl/test_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         a",
          "28:         \"\"\")",
          "29:         console = InteractiveColoredConsole(namespace, filename=\"<stdin>\")",
          "30:         with (",
          "31:             patch.object(InteractiveColoredConsole, \"showsyntaxerror\") as showsyntaxerror,",
          "32:             patch.object(InteractiveColoredConsole, \"runsource\", wraps=console.runsource) as runsource,",
          "33:         ):",
          "34:             more = console.push(code, filename=\"<stdin>\", _symbol=\"single\")  # type: ignore[call-arg]",
          "35:         self.assertFalse(more)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:         f = io.StringIO()",
          "34:             contextlib.redirect_stdout(f),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     def test_runsource_returns_false_for_successful_compilation(self):",
          "72:         console = InteractiveColoredConsole()",
          "73:         source = \"print('Hello, world!')\"",
          "75:         self.assertFalse(result)",
          "77:     @force_not_colorized",
          "",
          "[Removed Lines]",
          "74:         result = console.runsource(source)",
          "",
          "[Added Lines]",
          "76:         f = io.StringIO()",
          "77:         with contextlib.redirect_stdout(f):",
          "78:             result = console.runsource(source)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_unix_console.py||Lib/test/test_pyrepl/test_unix_console.py": [
          "File: Lib/test/test_pyrepl/test_unix_console.py -> Lib/test/test_pyrepl/test_unix_console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     def test_simple_addition(self, _os_write):",
          "113:         code = \"12+34\"",
          "114:         events = code_to_events(code)",
          "116:         _os_write.assert_any_call(ANY, b\"1\")",
          "117:         _os_write.assert_any_call(ANY, b\"2\")",
          "118:         _os_write.assert_any_call(ANY, b\"+\")",
          "119:         _os_write.assert_any_call(ANY, b\"3\")",
          "120:         _os_write.assert_any_call(ANY, b\"4\")",
          "122:     def test_wrap(self, _os_write):",
          "123:         code = \"12+34\"",
          "124:         events = code_to_events(code)",
          "126:         _os_write.assert_any_call(ANY, b\"1\")",
          "127:         _os_write.assert_any_call(ANY, b\"2\")",
          "128:         _os_write.assert_any_call(ANY, b\"+\")",
          "",
          "[Removed Lines]",
          "115:         _, _ = handle_events_unix_console(events)",
          "125:         _, _ = handle_events_narrow_unix_console(events)",
          "",
          "[Added Lines]",
          "115:         _, con = handle_events_unix_console(events)",
          "121:         con.restore()",
          "126:         _, con = handle_events_narrow_unix_console(events)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         _os_write.assert_any_call(ANY, b\"\\\\\")",
          "131:         _os_write.assert_any_call(ANY, b\"\\n\")",
          "132:         _os_write.assert_any_call(ANY, b\"4\")",
          "134:     def test_cursor_left(self, _os_write):",
          "135:         code = \"1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:         con.restore()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:             code_to_events(code),",
          "138:             [Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\"))],",
          "139:         )",
          "141:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "143:     def test_cursor_left_right(self, _os_write):",
          "144:         code = \"1\"",
          "",
          "[Removed Lines]",
          "140:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "143:         _, con = handle_events_unix_console(events)",
          "145:         con.restore()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:                 Event(evt=\"key\", data=\"right\", raw=bytearray(b\"\\x1bOC\")),",
          "150:             ],",
          "151:         )",
          "153:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "154:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuf\"] + b\":1\")",
          "156:     def test_cursor_up(self, _os_write):",
          "157:         code = \"1\\n2+3\"",
          "",
          "[Removed Lines]",
          "152:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "156:         _, con = handle_events_unix_console(events)",
          "159:         con.restore()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:             code_to_events(code),",
          "160:             [Event(evt=\"key\", data=\"up\", raw=bytearray(b\"\\x1bOA\"))],",
          "161:         )",
          "163:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuu\"] + b\":1\")",
          "165:     def test_cursor_up_down(self, _os_write):",
          "166:         code = \"1\\n2+3\"",
          "",
          "[Removed Lines]",
          "162:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "167:         _, con = handle_events_unix_console(events)",
          "169:         con.restore()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:                 Event(evt=\"key\", data=\"down\", raw=bytearray(b\"\\x1bOB\")),",
          "172:             ],",
          "173:         )",
          "175:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cuu\"] + b\":1\")",
          "176:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cud\"] + b\":1\")",
          "178:     def test_cursor_back_write(self, _os_write):",
          "179:         events = itertools.chain(",
          "",
          "[Removed Lines]",
          "174:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "180:         _, con = handle_events_unix_console(events)",
          "183:         con.restore()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "181:             [Event(evt=\"key\", data=\"left\", raw=bytearray(b\"\\x1bOD\"))],",
          "182:             code_to_events(\"2\"),",
          "183:         )",
          "185:         _os_write.assert_any_call(ANY, b\"1\")",
          "186:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"cub\"] + b\":1\")",
          "187:         _os_write.assert_any_call(ANY, b\"2\")",
          "189:     def test_multiline_function_move_up_short_terminal(self, _os_write):",
          "190:         # fmt: off",
          "",
          "[Removed Lines]",
          "184:         _, _ = handle_events_unix_console(events)",
          "",
          "[Added Lines]",
          "191:         _, con = handle_events_unix_console(events)",
          "195:         con.restore()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "201:                 Event(evt=\"scroll\", data=None),",
          "202:             ],",
          "203:         )",
          "205:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\")",
          "207:     def test_multiline_function_move_up_down_short_terminal(self, _os_write):",
          "208:         # fmt: off",
          "",
          "[Removed Lines]",
          "204:         _, _ = handle_events_short_unix_console(events)",
          "",
          "[Added Lines]",
          "212:         _, con = handle_events_short_unix_console(events)",
          "214:         con.restore()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "221:                 Event(evt=\"scroll\", data=None),",
          "222:             ],",
          "223:         )",
          "225:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ri\"] + b\":\")",
          "226:         _os_write.assert_any_call(ANY, TERM_CAPABILITIES[\"ind\"] + b\":\")",
          "228:     def test_resize_bigger_on_multiline_function(self, _os_write):",
          "229:         # fmt: off",
          "",
          "[Removed Lines]",
          "224:         _, _ = handle_events_short_unix_console(events)",
          "",
          "[Added Lines]",
          "233:         _, con = handle_events_short_unix_console(events)",
          "236:         con.restore()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "246:             console.get_event = MagicMock(side_effect=events)",
          "247:             return console",
          "250:             [Event(evt=\"resize\", data=None)],",
          "251:             prepare_reader=same_reader,",
          "252:             prepare_console=same_console,",
          "",
          "[Removed Lines]",
          "249:         _, _ = handle_all_events(",
          "",
          "[Added Lines]",
          "259:         _, con = handle_all_events(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "258:                 call(ANY, b\"def f():\"),",
          "259:             ]",
          "260:         )",
          "262:     def test_resize_smaller_on_multiline_function(self, _os_write):",
          "263:         # fmt: off",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:         console.restore()",
          "272:         con.restore()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "280:             console.get_event = MagicMock(side_effect=events)",
          "281:             return console",
          "284:             [Event(evt=\"resize\", data=None)],",
          "285:             prepare_reader=same_reader,",
          "286:             prepare_console=same_console,",
          "",
          "[Removed Lines]",
          "283:         _, _ = handle_all_events(",
          "",
          "[Added Lines]",
          "295:         _, con = handle_all_events(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "292:                 call(ANY, b\"  foo\"),",
          "293:             ]",
          "294:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:         console.restore()",
          "308:         con.restore()",
          "",
          "---------------"
        ]
      }
    }
  ]
}