{
  "cve_id": "CVE-2023-29418",
  "cve_desc": "An issue was discovered in libbzip3.a in bzip3 before 1.2.3. There is an xwrite out-of-bounds read.",
  "repo": "kspalaiologos/bzip3",
  "patch_hash": "aae16d107f804f69000c09cd92027a140968cc9d",
  "patch_info": {
    "commit_hash": "aae16d107f804f69000c09cd92027a140968cc9d",
    "repo": "kspalaiologos/bzip3",
    "commit_url": "https://github.com/kspalaiologos/bzip3/commit/aae16d107f804f69000c09cd92027a140968cc9d",
    "files": [
      "src/libbz3.c",
      "src/main.c"
    ],
    "message": "safety checks for decoding/testing when the buffer size and block size are inconsistent, tentative CRC32 version for BE systems (needs further verification on SPARC?)",
    "before_after_code_files": [
      "src/libbz3.c||src/libbz3.c",
      "src/main.c||src/main.c"
    ]
  },
  "patch_diff": {
    "src/libbz3.c||src/libbz3.c": [
      "File: src/libbz3.c -> src/libbz3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "61: };",
      "63: static u32 crc32sum(u32 crc, u8 * RESTRICT buf, size_t size) {",
      "66: }",
      "",
      "[Removed Lines]",
      "64:     while (size--) crc = crc32Table[(crc ^ *(buf++)) & 0xff] ^ (crc >> 8);",
      "65:     return crc;",
      "",
      "[Added Lines]",
      "65:     u32 test = 1;",
      "66:     if (*(u8 *) &test) {",
      "67:         while (size--) crc = crc32Table[(crc ^ *(buf++)) & 0xff] ^ (crc >> 8);",
      "68:         return crc;",
      "69:     } else {",
      "70:         while (size--) crc = crc32Table[((crc >> 24) ^ *(buf++)) & 0xff] ^ (crc << 8);",
      "71:         return crc;",
      "72:     }",
      "",
      "---------------"
    ],
    "src/main.c||src/main.c": [
      "File: src/main.c -> src/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:                 new_size = read_neutral_s32(byteswap_buf);",
      "243:                 xread_noeof(&byteswap_buf, 1, 4, input_des);",
      "244:                 old_size = read_neutral_s32(byteswap_buf);",
      "245:                 xread_noeof(buffer, 1, new_size, input_des);",
      "246:                 bytes_read += 8 + new_size;",
      "247:                 if (bz3_decode_block(state, buffer, new_size, old_size) == -1) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:                 if(old_size > block_size + 31) {",
      "246:                     fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
      "247:                     return 1;",
      "248:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "259:                 new_size = read_neutral_s32(byteswap_buf);",
      "260:                 xread_noeof(&byteswap_buf, 1, 4, input_des);",
      "261:                 old_size = read_neutral_s32(byteswap_buf);",
      "262:                 xread_noeof(buffer, 1, new_size, input_des);",
      "263:                 bytes_read += 8 + new_size;",
      "264:                 if (bz3_decode_block(state, buffer, new_size, old_size) == -1) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "266:                 if(old_size > block_size + 31) {",
      "267:                     fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
      "268:                     return 1;",
      "269:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "332:                     sizes[i] = read_neutral_s32(byteswap_buf);",
      "333:                     xread_noeof(&byteswap_buf, 1, 4, input_des);",
      "334:                     old_sizes[i] = read_neutral_s32(byteswap_buf);",
      "335:                     xread_noeof(buffers[i], 1, sizes[i], input_des);",
      "336:                     bytes_read += 8 + sizes[i];",
      "337:                 }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:                     if(old_sizes[i] > block_size + 31) {",
      "344:                         fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
      "345:                         return 1;",
      "346:                     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "356:                     sizes[i] = read_neutral_s32(byteswap_buf);",
      "357:                     xread_noeof(&byteswap_buf, 1, 4, input_des);",
      "358:                     old_sizes[i] = read_neutral_s32(byteswap_buf);",
      "359:                     xread_noeof(buffers[i], 1, sizes[i], input_des);",
      "360:                     bytes_read += 8 + sizes[i];",
      "361:                 }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "371:                     if(old_sizes[i] > block_size + 31) {",
      "372:                         fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
      "373:                         return 1;",
      "374:                     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "691:     output_des = mode != MODE_TEST ? open_output(output, force) : NULL;",
      "692:     input_des = open_input(input);",
      "694:     int r = process(input_des, output_des, mode, block_size, workers, verbose, input);",
      "696:     fclose(input_des);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "710:     if(output != f2)",
      "711:         free(output);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6d1ca9b61271411dce987795203347306a58cd65",
      "candidate_info": {
        "commit_hash": "6d1ca9b61271411dce987795203347306a58cd65",
        "repo": "kspalaiologos/bzip3",
        "commit_url": "https://github.com/kspalaiologos/bzip3/commit/6d1ca9b61271411dce987795203347306a58cd65",
        "files": [
          ".github/workflows/build.yml",
          "Makefile.am",
          "examples/shakespeare.txt.bz3",
          "src/libbz3.c"
        ],
        "message": "Fixed shift direction for crc32sum() (#109)\n\n* Fixed shift direction for crc32sum()\n\nref. #105\nref. commit 7a8d35b161403d2c873abb6cbef74deaa18354cd\n\n* Add a `.bz3` reference file to test\n\nThe `examples/shakespeare.txt.bz3` file was created by the following command\n\n```console\n% ./bzip3 -e -b 4 < examples/shakespeare.txt > examples/shakespeare.txt.bz3\n```\n\nAt this time bzip3 is version 1.1.0 and running on FreeBSD 13.2 amd64.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/libbz3.c||src/libbz3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libbz3.c||src/libbz3.c"
          ],
          "candidate": [
            "src/libbz3.c||src/libbz3.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  ./$(BZIP3) -v -d $(builddir)/LICENSE.bz3 $(builddir)/LICENSE2",
          "78:  cmp $(srcdir)/LICENSE $(builddir)/LICENSE2",
          "79:  -command -v md5sum >/dev/null 2>&1 && md5sum $(builddir)/LICENSE.bz3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: .PHONY: test",
          "82: test: $(BZIP3)",
          "83:  ./$(BZIP3) -d < $(srcdir)/examples/shakespeare.txt.bz3 | cmp - $(srcdir)/examples/shakespeare.txt",
          "",
          "---------------"
        ],
        "src/libbz3.c||src/libbz3.c": [
          "File: src/libbz3.c -> src/libbz3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: };",
          "63: static u32 crc32sum(u32 crc, u8 * RESTRICT buf, size_t size) {",
          "65:     return crc;",
          "66: }",
          "",
          "[Removed Lines]",
          "64:     while (size--) crc = crc32Table[((crc >> 24) ^ *(buf++)) & 0xff] ^ (crc << 8);",
          "",
          "[Added Lines]",
          "64:     while (size--) crc = crc32Table[((u8)crc ^ *(buf++)) & 0xff] ^ (crc >> 8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe996e05e1469f5bdc9794e1a6e6c19474a447e8",
      "candidate_info": {
        "commit_hash": "fe996e05e1469f5bdc9794e1a6e6c19474a447e8",
        "repo": "kspalaiologos/bzip3",
        "commit_url": "https://github.com/kspalaiologos/bzip3/commit/fe996e05e1469f5bdc9794e1a6e6c19474a447e8",
        "files": [
          "Makefile.am",
          "examples/fuzz.c",
          "include/libsais.h",
          "src/libbz3.c",
          "src/main.c"
        ],
        "message": "reformat the code, BE CRC32 table",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "examples/fuzz.c||examples/fuzz.c",
          "include/libsais.h||include/libsais.h",
          "src/libbz3.c||src/libbz3.c",
          "src/main.c||src/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libbz3.c||src/libbz3.c",
            "src/main.c||src/main.c"
          ],
          "candidate": [
            "src/libbz3.c||src/libbz3.c",
            "src/main.c||src/main.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: # Begin developer convenience targets",
          "61: .PHONY: format",
          "63:  clang-format -i $^ examples/*.c",
          "65: .PHONY: cloc",
          "67:  cloc $^",
          "69: CLEANFILES += LICENSE2",
          "",
          "[Removed Lines]",
          "62: format: $(bzip3_SOURCES) $(include_HEADERS) $(noinst_HEADERS)",
          "66: cloc: $(bzip3_SOURCES) $(include_HEADERS) $(noinst_HEADERS)",
          "",
          "[Added Lines]",
          "62: format: $(bzip3_SOURCES) $(libbzip3_la_SOURCES) $(include_HEADERS) $(noinst_HEADERS)",
          "66: cloc: $(bzip3_SOURCES) $(libbzip3_la_SOURCES) $(include_HEADERS) $(noinst_HEADERS)",
          "",
          "---------------"
        ],
        "examples/fuzz.c||examples/fuzz.c": [
          "File: examples/fuzz.c -> examples/fuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     fread(buffer, 1, size, fp);",
          "29:     fclose(fp);",
          "33:         return 0;",
          "34:     }",
          "",
          "[Removed Lines]",
          "31:     if(size < 64) {",
          "",
          "[Added Lines]",
          "31:     if (size < 64) {",
          "",
          "---------------"
        ],
        "include/libsais.h||include/libsais.h": [
          "File: include/libsais.h -> include/libsais.h"
        ],
        "src/libbz3.c||src/libbz3.c": [
          "File: src/libbz3.c -> src/libbz3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     0xBE2DA0A5L, 0x4C4623A6L, 0x5F16D052L, 0xAD7D5351L",
          "61: };",
          "63: static u32 crc32sum(u32 crc, u8 * RESTRICT buf, size_t size) {",
          "65:     u32 test = 1;",
          "67:         while (size--) crc = crc32Table[(crc ^ *(buf++)) & 0xff] ^ (crc >> 8);",
          "68:         return crc;",
          "69:     } else {",
          "71:         return crc;",
          "72:     }",
          "73: }",
          "",
          "[Removed Lines]",
          "66:     if (*(u8 *) &test) {",
          "70:         while (size--) crc = crc32Table[((crc >> 24) ^ *(buf++)) & 0xff] ^ (crc << 8);",
          "",
          "[Added Lines]",
          "63: static const u32 crc32TableBig[256] = {",
          "64:     0x00000000L, 0x03836BF2L, 0xF7703BE1L, 0xF4F35013L, 0x1F979AC7L, 0x1C14F135L, 0xE8E7A126L, 0xEB64CAD4L, 0xCF58D98AL,",
          "65:     0xCCDBB278L, 0x3828E26BL, 0x3BAB8999L, 0xD0CF434DL, 0xD34C28BFL, 0x27BF78ACL, 0x243C135EL, 0x6FC75E10L, 0x6C4435E2L,",
          "66:     0x98B765F1L, 0x9B340E03L, 0x7050C4D7L, 0x73D3AF25L, 0x8720FF36L, 0x84A394C4L, 0xA09F879AL, 0xA31CEC68L, 0x57EFBC7BL,",
          "67:     0x546CD789L, 0xBF081D5DL, 0xBC8B76AFL, 0x487826BCL, 0x4BFB4D4EL, 0xDE8EBD20L, 0xDD0DD6D2L, 0x29FE86C1L, 0x2A7DED33L,",
          "68:     0xC11927E7L, 0xC29A4C15L, 0x36691C06L, 0x35EA77F4L, 0x11D664AAL, 0x12550F58L, 0xE6A65F4BL, 0xE52534B9L, 0x0E41FE6DL,",
          "69:     0x0DC2959FL, 0xF931C58CL, 0xFAB2AE7EL, 0xB149E330L, 0xB2CA88C2L, 0x4639D8D1L, 0x45BAB323L, 0xAEDE79F7L, 0xAD5D1205L,",
          "70:     0x59AE4216L, 0x5A2D29E4L, 0x7E113ABAL, 0x7D925148L, 0x8961015BL, 0x8AE26AA9L, 0x6186A07DL, 0x6205CB8FL, 0x96F69B9CL,",
          "71:     0x9575F06EL, 0xBC1D7B41L, 0xBF9E10B3L, 0x4B6D40A0L, 0x48EE2B52L, 0xA38AE186L, 0xA0098A74L, 0x54FADA67L, 0x5779B195L,",
          "72:     0x7345A2CBL, 0x70C6C939L, 0x8435992AL, 0x87B6F2D8L, 0x6CD2380CL, 0x6F5153FEL, 0x9BA203EDL, 0x9821681FL, 0xD3DA2551L,",
          "73:     0xD0594EA3L, 0x24AA1EB0L, 0x27297542L, 0xCC4DBF96L, 0xCFCED464L, 0x3B3D8477L, 0x38BEEF85L, 0x1C82FCDBL, 0x1F019729L,",
          "74:     0xEBF2C73AL, 0xE871ACC8L, 0x0315661CL, 0x00960DEEL, 0xF4655DFDL, 0xF7E6360FL, 0x6293C661L, 0x6110AD93L, 0x95E3FD80L,",
          "75:     0x96609672L, 0x7D045CA6L, 0x7E873754L, 0x8A746747L, 0x89F70CB5L, 0xADCB1FEBL, 0xAE487419L, 0x5ABB240AL, 0x59384FF8L,",
          "76:     0xB25C852CL, 0xB1DFEEDEL, 0x452CBECDL, 0x46AFD53FL, 0x0D549871L, 0x0ED7F383L, 0xFA24A390L, 0xF9A7C862L, 0x12C302B6L,",
          "77:     0x11406944L, 0xE5B33957L, 0xE63052A5L, 0xC20C41FBL, 0xC18F2A09L, 0x357C7A1AL, 0x36FF11E8L, 0xDD9BDB3CL, 0xDE18B0CEL,",
          "78:     0x2AEBE0DDL, 0x29688B2FL, 0x783BF682L, 0x7BB89D70L, 0x8F4BCD63L, 0x8CC8A691L, 0x67AC6C45L, 0x642F07B7L, 0x90DC57A4L,",
          "79:     0x935F3C56L, 0xB7632F08L, 0xB4E044FAL, 0x401314E9L, 0x43907F1BL, 0xA8F4B5CFL, 0xAB77DE3DL, 0x5F848E2EL, 0x5C07E5DCL,",
          "80:     0x17FCA892L, 0x147FC360L, 0xE08C9373L, 0xE30FF881L, 0x086B3255L, 0x0BE859A7L, 0xFF1B09B4L, 0xFC986246L, 0xD8A47118L,",
          "81:     0xDB271AEAL, 0x2FD44AF9L, 0x2C57210BL, 0xC733EBDFL, 0xC4B0802DL, 0x3043D03EL, 0x33C0BBCCL, 0xA6B54BA2L, 0xA5362050L,",
          "82:     0x51C57043L, 0x52461BB1L, 0xB922D165L, 0xBAA1BA97L, 0x4E52EA84L, 0x4DD18176L, 0x69ED9228L, 0x6A6EF9DAL, 0x9E9DA9C9L,",
          "83:     0x9D1EC23BL, 0x767A08EFL, 0x75F9631DL, 0x810A330EL, 0x828958FCL, 0xC97215B2L, 0xCAF17E40L, 0x3E022E53L, 0x3D8145A1L,",
          "84:     0xD6E58F75L, 0xD566E487L, 0x2195B494L, 0x2216DF66L, 0x062ACC38L, 0x05A9A7CAL, 0xF15AF7D9L, 0xF2D99C2BL, 0x19BD56FFL,",
          "85:     0x1A3E3D0DL, 0xEECD6D1EL, 0xED4E06ECL, 0xC4268DC3L, 0xC7A5E631L, 0x3356B622L, 0x30D5DDD0L, 0xDBB11704L, 0xD8327CF6L,",
          "86:     0x2CC12CE5L, 0x2F424717L, 0x0B7E5449L, 0x08FD3FBBL, 0xFC0E6FA8L, 0xFF8D045AL, 0x14E9CE8EL, 0x176AA57CL, 0xE399F56FL,",
          "87:     0xE01A9E9DL, 0xABE1D3D3L, 0xA862B821L, 0x5C91E832L, 0x5F1283C0L, 0xB4764914L, 0xB7F522E6L, 0x430672F5L, 0x40851907L,",
          "88:     0x64B90A59L, 0x673A61ABL, 0x93C931B8L, 0x904A5A4AL, 0x7B2E909EL, 0x78ADFB6CL, 0x8C5EAB7FL, 0x8FDDC08DL, 0x1AA830E3L,",
          "89:     0x192B5B11L, 0xEDD80B02L, 0xEE5B60F0L, 0x053FAA24L, 0x06BCC1D6L, 0xF24F91C5L, 0xF1CCFA37L, 0xD5F0E969L, 0xD673829BL,",
          "90:     0x2280D288L, 0x2103B97AL, 0xCA6773AEL, 0xC9E4185CL, 0x3D17484FL, 0x3E9423BDL, 0x756F6EF3L, 0x76EC0501L, 0x821F5512L,",
          "91:     0x819C3EE0L, 0x6AF8F434L, 0x697B9FC6L, 0x9D88CFD5L, 0x9E0BA427L, 0xBA37B779L, 0xB9B4DC8BL, 0x4D478C98L, 0x4EC4E76AL,",
          "92:     0xA5A02DBEL, 0xA623464CL, 0x52D0165FL, 0x51537DADL",
          "93: }",
          "98:     if (*(u8 *)&test) {",
          "102:         while (size--) crc = crc32TableBig[((crc >> 24) ^ *(buf++)) & 0xff] ^ (crc << 8);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     }",
          "142: }",
          "145:     uint64_t bytes_read = 0, bytes_written = 0;",
          "147:     if ((mode == MODE_ENCODE && isatty(fileno(output_des))) ||",
          "",
          "[Removed Lines]",
          "144: static int process(FILE * input_des, FILE * output_des, int mode, int block_size, int workers, int verbose, char * file_name) {",
          "",
          "[Added Lines]",
          "144: static int process(FILE * input_des, FILE * output_des, int mode, int block_size, int workers, int verbose,",
          "145:                    char * file_name) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:                 read_count = xread(buffer, 1, block_size, input_des);",
          "218:                 bytes_read += read_count;",
          "223:                 s32 new_size = bz3_encode_block(state, buffer, read_count);",
          "224:                 if (new_size == -1) {",
          "",
          "[Removed Lines]",
          "220:                 if(read_count == 0)",
          "221:                     break;",
          "",
          "[Added Lines]",
          "221:                 if (read_count == 0) break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:                 new_size = read_neutral_s32(byteswap_buf);",
          "243:                 xread_noeof(&byteswap_buf, 1, 4, input_des);",
          "244:                 old_size = read_neutral_s32(byteswap_buf);",
          "246:                     fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
          "247:                     return 1;",
          "248:                 }",
          "",
          "[Removed Lines]",
          "245:                 if(old_size > block_size + 31) {",
          "",
          "[Added Lines]",
          "245:                 if (old_size > block_size + 31) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:                 new_size = read_neutral_s32(byteswap_buf);",
          "264:                 xread_noeof(&byteswap_buf, 1, 4, input_des);",
          "265:                 old_size = read_neutral_s32(byteswap_buf);",
          "267:                     fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
          "268:                     return 1;",
          "269:                 }",
          "",
          "[Removed Lines]",
          "266:                 if(old_size > block_size + 31) {",
          "",
          "[Added Lines]",
          "266:                 if (old_size > block_size + 31) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340:                     sizes[i] = read_neutral_s32(byteswap_buf);",
          "341:                     xread_noeof(&byteswap_buf, 1, 4, input_des);",
          "342:                     old_sizes[i] = read_neutral_s32(byteswap_buf);",
          "344:                         fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
          "345:                         return 1;",
          "346:                     }",
          "",
          "[Removed Lines]",
          "343:                     if(old_sizes[i] > block_size + 31) {",
          "",
          "[Added Lines]",
          "343:                     if (old_sizes[i] > block_size + 31) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "368:                     sizes[i] = read_neutral_s32(byteswap_buf);",
          "369:                     xread_noeof(&byteswap_buf, 1, 4, input_des);",
          "370:                     old_sizes[i] = read_neutral_s32(byteswap_buf);",
          "372:                         fprintf(stderr, \"Failed to decode a block: Inconsistent headers.\\n\");",
          "373:                         return 1;",
          "374:                     }",
          "",
          "[Removed Lines]",
          "371:                     if(old_sizes[i] > block_size + 31) {",
          "",
          "[Added Lines]",
          "371:                     if (old_sizes[i] > block_size + 31) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "392:     }",
          "393: #endif",
          "401:         else",
          "403:     }",
          "405:     return 0;",
          "",
          "[Removed Lines]",
          "395:     if(verbose) {",
          "396:         if(file_name) fprintf(stderr, \" %s:\", file_name);",
          "397:         if(mode == MODE_ENCODE)",
          "398:             fprintf(stderr, \"\\t%\"PRIu64\" -> %\"PRIu64\" bytes, %.2f%%, %.2f bpb\\n\", bytes_read, bytes_written, (double)bytes_written * 100.0 / bytes_read, (double)bytes_written * 8.0 / bytes_read);",
          "399:         else if(mode == MODE_DECODE)",
          "400:             fprintf(stderr, \"\\t%\"PRIu64\" -> %\"PRIu64\" bytes, %.2f%%, %.2f bpb\\n\", bytes_read, bytes_written, (double)bytes_read * 100.0 / bytes_written, (double)bytes_read * 8.0 / bytes_written);",
          "402:             fprintf(stderr, \"OK, %\"PRIu64\" bytes read.\\n\", bytes_read);",
          "",
          "[Added Lines]",
          "395:     if (verbose) {",
          "396:         if (file_name) fprintf(stderr, \" %s:\", file_name);",
          "397:         if (mode == MODE_ENCODE)",
          "398:             fprintf(stderr, \"\\t%\" PRIu64 \" -> %\" PRIu64 \" bytes, %.2f%%, %.2f bpb\\n\", bytes_read, bytes_written,",
          "399:                     (double)bytes_written * 100.0 / bytes_read, (double)bytes_written * 8.0 / bytes_read);",
          "400:         else if (mode == MODE_DECODE)",
          "401:             fprintf(stderr, \"\\t%\" PRIu64 \" -> %\" PRIu64 \" bytes, %.2f%%, %.2f bpb\\n\", bytes_read, bytes_written,",
          "402:                     (double)bytes_read * 100.0 / bytes_written, (double)bytes_read * 8.0 / bytes_written);",
          "404:             fprintf(stderr, \"OK, %\" PRIu64 \" bytes read.\\n\", bytes_read);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "511:             case '?':",
          "512:                 fprintf(stderr, \"Try 'bzip3 --help' for more information.\\n\");",
          "513:                 return 1;",
          "515:                 mode = MODE_ENCODE;",
          "516:                 break;",
          "517:             case 'd':",
          "",
          "[Removed Lines]",
          "514:             case 'e': case 'z':",
          "",
          "[Added Lines]",
          "516:             case 'e':",
          "517:             case 'z':",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "707:     output_des = mode != MODE_TEST ? open_output(output, force) : NULL;",
          "708:     input_des = open_input(input);",
          "713:     int r = process(input_des, output_des, mode, block_size, workers, verbose, input);",
          "",
          "[Removed Lines]",
          "710:     if(output != f2)",
          "711:         free(output);",
          "",
          "[Added Lines]",
          "713:     if (output != f2) free(output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a8d35b161403d2c873abb6cbef74deaa18354cd",
      "candidate_info": {
        "commit_hash": "7a8d35b161403d2c873abb6cbef74deaa18354cd",
        "repo": "kspalaiologos/bzip3",
        "commit_url": "https://github.com/kspalaiologos/bzip3/commit/7a8d35b161403d2c873abb6cbef74deaa18354cd",
        "files": [
          "src/libbz3.c"
        ],
        "message": "crc32 calculation proved correct on Big Endian MIPS64 w. Debian Stretch",
        "before_after_code_files": [
          "src/libbz3.c||src/libbz3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libbz3.c||src/libbz3.c"
          ],
          "candidate": [
            "src/libbz3.c||src/libbz3.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libbz3.c||src/libbz3.c": [
          "File: src/libbz3.c -> src/libbz3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     0xBE2DA0A5L, 0x4C4623A6L, 0x5F16D052L, 0xAD7D5351L",
          "61: };",
          "95: static u32 crc32sum(u32 crc, u8 * RESTRICT buf, size_t size) {",
          "105: }",
          "",
          "[Removed Lines]",
          "63: static const u32 crc32TableBig[256] = {",
          "64:     0x00000000L, 0x03836BF2L, 0xF7703BE1L, 0xF4F35013L, 0x1F979AC7L, 0x1C14F135L, 0xE8E7A126L, 0xEB64CAD4L, 0xCF58D98AL,",
          "65:     0xCCDBB278L, 0x3828E26BL, 0x3BAB8999L, 0xD0CF434DL, 0xD34C28BFL, 0x27BF78ACL, 0x243C135EL, 0x6FC75E10L, 0x6C4435E2L,",
          "66:     0x98B765F1L, 0x9B340E03L, 0x7050C4D7L, 0x73D3AF25L, 0x8720FF36L, 0x84A394C4L, 0xA09F879AL, 0xA31CEC68L, 0x57EFBC7BL,",
          "67:     0x546CD789L, 0xBF081D5DL, 0xBC8B76AFL, 0x487826BCL, 0x4BFB4D4EL, 0xDE8EBD20L, 0xDD0DD6D2L, 0x29FE86C1L, 0x2A7DED33L,",
          "68:     0xC11927E7L, 0xC29A4C15L, 0x36691C06L, 0x35EA77F4L, 0x11D664AAL, 0x12550F58L, 0xE6A65F4BL, 0xE52534B9L, 0x0E41FE6DL,",
          "69:     0x0DC2959FL, 0xF931C58CL, 0xFAB2AE7EL, 0xB149E330L, 0xB2CA88C2L, 0x4639D8D1L, 0x45BAB323L, 0xAEDE79F7L, 0xAD5D1205L,",
          "70:     0x59AE4216L, 0x5A2D29E4L, 0x7E113ABAL, 0x7D925148L, 0x8961015BL, 0x8AE26AA9L, 0x6186A07DL, 0x6205CB8FL, 0x96F69B9CL,",
          "71:     0x9575F06EL, 0xBC1D7B41L, 0xBF9E10B3L, 0x4B6D40A0L, 0x48EE2B52L, 0xA38AE186L, 0xA0098A74L, 0x54FADA67L, 0x5779B195L,",
          "72:     0x7345A2CBL, 0x70C6C939L, 0x8435992AL, 0x87B6F2D8L, 0x6CD2380CL, 0x6F5153FEL, 0x9BA203EDL, 0x9821681FL, 0xD3DA2551L,",
          "73:     0xD0594EA3L, 0x24AA1EB0L, 0x27297542L, 0xCC4DBF96L, 0xCFCED464L, 0x3B3D8477L, 0x38BEEF85L, 0x1C82FCDBL, 0x1F019729L,",
          "74:     0xEBF2C73AL, 0xE871ACC8L, 0x0315661CL, 0x00960DEEL, 0xF4655DFDL, 0xF7E6360FL, 0x6293C661L, 0x6110AD93L, 0x95E3FD80L,",
          "75:     0x96609672L, 0x7D045CA6L, 0x7E873754L, 0x8A746747L, 0x89F70CB5L, 0xADCB1FEBL, 0xAE487419L, 0x5ABB240AL, 0x59384FF8L,",
          "76:     0xB25C852CL, 0xB1DFEEDEL, 0x452CBECDL, 0x46AFD53FL, 0x0D549871L, 0x0ED7F383L, 0xFA24A390L, 0xF9A7C862L, 0x12C302B6L,",
          "77:     0x11406944L, 0xE5B33957L, 0xE63052A5L, 0xC20C41FBL, 0xC18F2A09L, 0x357C7A1AL, 0x36FF11E8L, 0xDD9BDB3CL, 0xDE18B0CEL,",
          "78:     0x2AEBE0DDL, 0x29688B2FL, 0x783BF682L, 0x7BB89D70L, 0x8F4BCD63L, 0x8CC8A691L, 0x67AC6C45L, 0x642F07B7L, 0x90DC57A4L,",
          "79:     0x935F3C56L, 0xB7632F08L, 0xB4E044FAL, 0x401314E9L, 0x43907F1BL, 0xA8F4B5CFL, 0xAB77DE3DL, 0x5F848E2EL, 0x5C07E5DCL,",
          "80:     0x17FCA892L, 0x147FC360L, 0xE08C9373L, 0xE30FF881L, 0x086B3255L, 0x0BE859A7L, 0xFF1B09B4L, 0xFC986246L, 0xD8A47118L,",
          "81:     0xDB271AEAL, 0x2FD44AF9L, 0x2C57210BL, 0xC733EBDFL, 0xC4B0802DL, 0x3043D03EL, 0x33C0BBCCL, 0xA6B54BA2L, 0xA5362050L,",
          "82:     0x51C57043L, 0x52461BB1L, 0xB922D165L, 0xBAA1BA97L, 0x4E52EA84L, 0x4DD18176L, 0x69ED9228L, 0x6A6EF9DAL, 0x9E9DA9C9L,",
          "83:     0x9D1EC23BL, 0x767A08EFL, 0x75F9631DL, 0x810A330EL, 0x828958FCL, 0xC97215B2L, 0xCAF17E40L, 0x3E022E53L, 0x3D8145A1L,",
          "84:     0xD6E58F75L, 0xD566E487L, 0x2195B494L, 0x2216DF66L, 0x062ACC38L, 0x05A9A7CAL, 0xF15AF7D9L, 0xF2D99C2BL, 0x19BD56FFL,",
          "85:     0x1A3E3D0DL, 0xEECD6D1EL, 0xED4E06ECL, 0xC4268DC3L, 0xC7A5E631L, 0x3356B622L, 0x30D5DDD0L, 0xDBB11704L, 0xD8327CF6L,",
          "86:     0x2CC12CE5L, 0x2F424717L, 0x0B7E5449L, 0x08FD3FBBL, 0xFC0E6FA8L, 0xFF8D045AL, 0x14E9CE8EL, 0x176AA57CL, 0xE399F56FL,",
          "87:     0xE01A9E9DL, 0xABE1D3D3L, 0xA862B821L, 0x5C91E832L, 0x5F1283C0L, 0xB4764914L, 0xB7F522E6L, 0x430672F5L, 0x40851907L,",
          "88:     0x64B90A59L, 0x673A61ABL, 0x93C931B8L, 0x904A5A4AL, 0x7B2E909EL, 0x78ADFB6CL, 0x8C5EAB7FL, 0x8FDDC08DL, 0x1AA830E3L,",
          "89:     0x192B5B11L, 0xEDD80B02L, 0xEE5B60F0L, 0x053FAA24L, 0x06BCC1D6L, 0xF24F91C5L, 0xF1CCFA37L, 0xD5F0E969L, 0xD673829BL,",
          "90:     0x2280D288L, 0x2103B97AL, 0xCA6773AEL, 0xC9E4185CL, 0x3D17484FL, 0x3E9423BDL, 0x756F6EF3L, 0x76EC0501L, 0x821F5512L,",
          "91:     0x819C3EE0L, 0x6AF8F434L, 0x697B9FC6L, 0x9D88CFD5L, 0x9E0BA427L, 0xBA37B779L, 0xB9B4DC8BL, 0x4D478C98L, 0x4EC4E76AL,",
          "92:     0xA5A02DBEL, 0xA623464CL, 0x52D0165FL, 0x51537DADL",
          "93: };",
          "97:     u32 test = 1;",
          "98:     if (*(u8 *)&test) {",
          "99:         while (size--) crc = crc32Table[(crc ^ *(buf++)) & 0xff] ^ (crc >> 8);",
          "100:         return crc;",
          "101:     } else {",
          "102:         while (size--) crc = crc32TableBig[((crc >> 24) ^ *(buf++)) & 0xff] ^ (crc << 8);",
          "103:         return crc;",
          "104:     }",
          "",
          "[Added Lines]",
          "64:     while (size--) crc = crc32Table[((crc >> 24) ^ *(buf++)) & 0xff] ^ (crc << 8);",
          "65:     return crc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}