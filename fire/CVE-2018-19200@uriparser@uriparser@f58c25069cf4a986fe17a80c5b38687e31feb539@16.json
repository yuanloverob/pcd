{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e882e8ec7bf320fd48816bf498b591e60c3cf269",
      "candidate_info": {
        "commit_hash": "e882e8ec7bf320fd48816bf498b591e60c3cf269",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/e882e8ec7bf320fd48816bf498b591e60c3cf269",
        "files": [
          "test/MemoryManagerSuite.cpp"
        ],
        "message": "tests: Cover CompleteMemoryManager violation of requirements",
        "before_after_code_files": [
          "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/MemoryManagerSuite.cpp||test/MemoryManagerSuite.cpp": [
          "File: test/MemoryManagerSuite.cpp -> test/MemoryManagerSuite.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:  UriUriA uri = parse(\"whatever\");",
          "131:  UriMemoryManager memory;",
          "",
          "[Removed Lines]",
          "129: TEST(MiscMemoryManagerSuite, MemoryManagerIsComplete) {",
          "",
          "[Added Lines]",
          "129: TEST(MemoryManagerCompletenessSuite, AllFunctionMembersRequired) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164: TEST(MemoryManagerTestingSuite, DefaultMemoryManager) {",
          "165:  ASSERT_EQ(uriTestMemoryManager(&defaultMemoryManager), URI_SUCCESS);",
          "166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: TEST(MemoryManagerCompletenessSuite, MallocAndFreeRequiredOnly) {",
          "165:  UriMemoryManager memory;",
          "166:  UriMemoryManager backend;",
          "168:  memcpy(&backend, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "169:  backend.malloc = NULL;",
          "170:  ASSERT_EQ(uriCompleteMemoryManager(&memory, &backend),",
          "171:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "173:  memcpy(&backend, &defaultMemoryManager, sizeof(UriMemoryManager));",
          "174:  backend.free = NULL;",
          "175:  ASSERT_EQ(uriCompleteMemoryManager(&memory, &backend),",
          "176:      URI_ERROR_MEMORY_MANAGER_INCOMPLETE);",
          "177: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d695f9a3c35716e7262ad264126a1395476bfd7",
      "candidate_info": {
        "commit_hash": "2d695f9a3c35716e7262ad264126a1395476bfd7",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/2d695f9a3c35716e7262ad264126a1395476bfd7",
        "files": [
          "src/UriResolve.c"
        ],
        "message": "UriResolve.c: Simplify AddBaseUri",
        "before_after_code_files": [
          "src/UriResolve.c||src/UriResolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriResolve.c||src/UriResolve.c": [
          "File: src/UriResolve.c -> src/UriResolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296: int URI_FUNC(AddBaseUri)(URI_TYPE(Uri) * absDest,",
          "297:   const URI_TYPE(Uri) * relSource, const URI_TYPE(Uri) * absBase) {",
          "304: }",
          "",
          "[Removed Lines]",
          "299:  const int res = URI_FUNC(AddBaseUriImpl)(absDest, relSource, absBase, URI_RESOLVE_STRICTLY, memory);",
          "300:  if ((res != URI_SUCCESS) && (absDest != NULL)) {",
          "301:   URI_FUNC(FreeUriMembers)(absDest);",
          "302:  }",
          "303:  return res;",
          "",
          "[Added Lines]",
          "298:  const UriResolutionOptions options = URI_RESOLVE_STRICTLY;",
          "299:  return URI_FUNC(AddBaseUriEx)(absDest, relSource, absBase, options);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "59c23b161ebd8e021e957d314866aa879976e821",
      "candidate_info": {
        "commit_hash": "59c23b161ebd8e021e957d314866aa879976e821",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/59c23b161ebd8e021e957d314866aa879976e821",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseUriReference",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: static const URI_CHAR * URI_FUNC(ParseSegment)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "183: static const URI_CHAR * URI_FUNC(ParseSegmentNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "184: static const URI_CHAR * URI_FUNC(ParseSegmentNzNcOrScheme2)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "186: static const URI_CHAR * URI_FUNC(ParseUriTail)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "187: static const URI_CHAR * URI_FUNC(ParseUriTailTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "188: static const URI_CHAR * URI_FUNC(ParseZeroMoreSlashSegs)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "185: static const URI_CHAR * URI_FUNC(ParseUriReference)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "185: static const URI_CHAR * URI_FUNC(ParseUriReference)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1911:  if (first >= afterLast) {",
          "1912:   return afterLast;",
          "1913:  }",
          "",
          "[Removed Lines]",
          "1908: static const URI_CHAR * URI_FUNC(ParseUriReference)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1908: static const URI_CHAR * URI_FUNC(ParseUriReference)(",
          "1909:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1910:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2122:  URI_FUNC(ResetUri)(uri);",
          "2126:  if (afterUriReference == NULL) {",
          "2127:   return state->errorCode;",
          "2128:  }",
          "",
          "[Removed Lines]",
          "2125:  afterUriReference = URI_FUNC(ParseUriReference)(state, first, afterLast);",
          "",
          "[Added Lines]",
          "2126:  afterUriReference = URI_FUNC(ParseUriReference)(state, first, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b4f72a55b75472cfa7b1818ac28a5bb7c66170c",
      "candidate_info": {
        "commit_hash": "6b4f72a55b75472cfa7b1818ac28a5bb7c66170c",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/6b4f72a55b75472cfa7b1818ac28a5bb7c66170c",
        "files": [
          "test/test.cpp"
        ],
        "message": "tests: Cover multiple calls to FreeUriMembers",
        "before_after_code_files": [
          "test/test.cpp||test/test.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test.cpp||test/test.cpp": [
          "File: test/test.cpp -> test/test.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2091:  EXPECT_EQ(uriFreeUriMembersMmA(&uri, NULL), URI_SUCCESS);",
          "2092: }",
          "2095: int main(int argc, char ** argv) {",
          "2096:  ::testing::InitGoogleTest(&argc, argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2094: TEST(FreeUriMembersSuite, MultiFreeWorksFine) {",
          "2095:  UriUriA uri;",
          "2097:  EXPECT_EQ(uriParseSingleUriA(&uri, \"file:///home/user/song.mp3\", NULL),",
          "2098:    URI_SUCCESS);",
          "2100:  UriUriA uriBackup = uri;",
          "2101:  EXPECT_EQ(memcmp(&uriBackup, &uri, sizeof(UriUriA)), 0);",
          "2103:  uriFreeUriMembersA(&uri);",
          "2106:  EXPECT_NE(memcmp(&uriBackup, &uri, sizeof(UriUriA)), 0);",
          "2108:  uriFreeUriMembersA(&uri);  // second time",
          "2109: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90c88c0fb66a21dcaa07b3bca0ca3e50675c9fb7",
      "candidate_info": {
        "commit_hash": "90c88c0fb66a21dcaa07b3bca0ca3e50675c9fb7",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/90c88c0fb66a21dcaa07b3bca0ca3e50675c9fb7",
        "files": [
          "Makefile.am",
          "include/uriparser/UriBase.h",
          "src/UriMemory.c"
        ],
        "message": "Draft UriMemoryManager",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h",
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  src/UriIp4.c \\",
          "49:  src/UriIp4Base.c \\",
          "50:  src/UriIp4Base.h \\",
          "51:  src/UriNormalize.c \\",
          "52:  src/UriNormalizeBase.c \\",
          "53:  src/UriNormalizeBase.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:  src/UriMemory.c \\",
          "",
          "---------------"
        ],
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: struct UriMemoryManagerStruct;",
          "158: typedef void * (*UriFuncMalloc)(struct UriMemoryManagerStruct *, size_t);",
          "159: typedef void * (*UriFuncRealloc)(struct UriMemoryManagerStruct *, void *, size_t);",
          "160: typedef void (*UriFuncFree)(struct UriMemoryManagerStruct *, void *);",
          "163: typedef struct UriMemoryManagerStruct {",
          "164:  UriFuncMalloc malloc;",
          "165:  UriFuncRealloc realloc;",
          "166:  UriFuncFree free;",
          "167:  void * userData;",
          "",
          "---------------"
        ],
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #ifndef URI_DOXYGEN",
          "46: # include <uriparser/Uri.h>",
          "47: #endif",
          "51: static void * uriDefaultMalloc(",
          "52:         struct UriMemoryManagerStruct * URI_UNUSED(memory), size_t size) {",
          "53:     return malloc(size);",
          "54: }",
          "58: static void * uriDefaultRealloc(",
          "59:         struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "60:         void * ptr, size_t size) {",
          "61:     return realloc(ptr, size);",
          "62: }",
          "66: static void uriDefaultFree(struct UriMemoryManagerStruct * URI_UNUSED(memory),",
          "67:         void * ptr) {",
          "68:     free(ptr);",
          "69: }",
          "73: static UriMemoryManager defaultMemoryManager = {",
          "74:     uriDefaultMalloc,",
          "75:     uriDefaultRealloc,",
          "76:     uriDefaultFree,",
          "78: };",
          "",
          "---------------"
        ]
      }
    }
  ]
}