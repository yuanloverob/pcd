{
  "cve_id": "CVE-2018-19200",
  "cve_desc": "An issue was discovered in uriparser before 0.9.0. UriCommon.c allows attempted operations on NULL input via a uriResetUri* function.",
  "repo": "uriparser/uriparser",
  "patch_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
  "patch_info": {
    "commit_hash": "f58c25069cf4a986fe17a80c5b38687e31feb539",
    "repo": "uriparser/uriparser",
    "commit_url": "https://github.com/uriparser/uriparser/commit/f58c25069cf4a986fe17a80c5b38687e31feb539",
    "files": [
      "src/UriCommon.c"
    ],
    "message": "ResetUri: Protect against NULL",
    "before_after_code_files": [
      "src/UriCommon.c||src/UriCommon.c"
    ]
  },
  "patch_diff": {
    "src/UriCommon.c||src/UriCommon.c": [
      "File: src/UriCommon.c -> src/UriCommon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "77: void URI_FUNC(ResetUri)(URI_TYPE(Uri) * uri) {",
      "78:  memset(uri, 0, sizeof(URI_TYPE(Uri)));",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:  if (uri == NULL) {",
      "79:   return;",
      "80:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b9df6ea9a4b7532e81ebed283a7718d6dcae155",
      "candidate_info": {
        "commit_hash": "5b9df6ea9a4b7532e81ebed283a7718d6dcae155",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/5b9df6ea9a4b7532e81ebed283a7718d6dcae155",
        "files": [
          "ChangeLog",
          "include/uriparser/Uri.h"
        ],
        "message": "Mark non-Ex NormalizeSyntaxMaskRequired as deprecated",
        "before_after_code_files": [
          "include/uriparser/Uri.h||include/uriparser/Uri.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/Uri.h||include/uriparser/Uri.h": [
          "File: include/uriparser/Uri.h -> include/uriparser/Uri.h"
        ]
      }
    },
    {
      "candidate_hash": "53074748eee60d7ce87deaea903a6fce77ca77f5",
      "candidate_info": {
        "commit_hash": "53074748eee60d7ce87deaea903a6fce77ca77f5",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/53074748eee60d7ce87deaea903a6fce77ca77f5",
        "files": [
          "src/UriNormalize.c"
        ],
        "message": "Pass memory manager to MakeOwner",
        "before_after_code_files": [
          "src/UriNormalize.c||src/UriNormalize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriNormalize.c||src/UriNormalize.c": [
          "File: src/UriNormalize.c -> src/UriNormalize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   unsigned int maskTest, URI_TYPE(TextRange) * range,",
          "83:   UriMemoryManager * memory);",
          "84: static UriBool URI_FUNC(MakeOwner)(URI_TYPE(Uri) * uri,",
          "87: static void URI_FUNC(FixPercentEncodingInplace)(const URI_CHAR * first,",
          "88:   const URI_CHAR ** afterLast);",
          "",
          "[Removed Lines]",
          "85:   unsigned int * doneMask);",
          "",
          "[Added Lines]",
          "85:   unsigned int * doneMask, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389: static URI_INLINE UriBool URI_FUNC(MakeOwner)(URI_TYPE(Uri) * uri,",
          "392:  URI_TYPE(PathSegment) * walker = uri->pathHead;",
          "393:  if (!URI_FUNC(MakeRangeOwner)(doneMask, URI_NORMALIZE_SCHEME,",
          "394:     &(uri->scheme), memory)",
          "",
          "[Removed Lines]",
          "390:   unsigned int * doneMask) {",
          "",
          "[Added Lines]",
          "390:   unsigned int * doneMask, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:  if ((outMask == NULL) && !uri->owner) {",
          "722:    URI_FUNC(PreventLeakage)(uri, doneMask, memory);",
          "723:    return URI_ERROR_MALLOC;",
          "724:   }",
          "",
          "[Removed Lines]",
          "721:   if (!URI_FUNC(MakeOwner)(uri, &doneMask)) {",
          "",
          "[Added Lines]",
          "720:   if (!URI_FUNC(MakeOwner)(uri, &doneMask, memory)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "414dc38500b1b3e034cfb127d8080b15daf938d1",
      "candidate_info": {
        "commit_hash": "414dc38500b1b3e034cfb127d8080b15daf938d1",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/414dc38500b1b3e034cfb127d8080b15daf938d1",
        "files": [
          "src/UriMemory.c"
        ],
        "message": "UriMemory.c: Fix scope of <errno.h> include\n\nerrno is also used outside of uriDefaultReallocarray by now\nso the HAVE_REALLOCARRAY guard is too strict.\n\nThanks to Periklis Akritidis!",
        "before_after_code_files": [
          "src/UriMemory.c||src/UriMemory.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriMemory.c||src/UriMemory.c": [
          "File: src/UriMemory.c -> src/UriMemory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #if HAVE_REALLOCARRAY",
          "48: # define _GNU_SOURCE",
          "51: #endif",
          "53: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "49: #else",
          "50: # include <errno.h>",
          "",
          "[Added Lines]",
          "51: #include <errno.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c1749c73e8be1fae2303daa965ca973b5d9c620",
      "candidate_info": {
        "commit_hash": "1c1749c73e8be1fae2303daa965ca973b5d9c620",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/1c1749c73e8be1fae2303daa965ca973b5d9c620",
        "files": [
          "src/UriParse.c"
        ],
        "message": "Pass memory manager to ParseOwnUserInfo",
        "before_after_code_files": [
          "src/UriParse.c||src/UriParse.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/UriParse.c||src/UriParse.c": [
          "File: src/UriParse.c -> src/UriParse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "170: static const URI_CHAR * URI_FUNC(ParseOwnHostUserInfoNz)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "171: static const URI_CHAR * URI_FUNC(ParseOwnPortUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "173: static const URI_CHAR * URI_FUNC(ParsePartHelperTwo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "174: static const URI_CHAR * URI_FUNC(ParsePathAbsEmpty)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "175: static const URI_CHAR * URI_FUNC(ParsePathAbsNoLeadSlash)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Removed Lines]",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast);",
          "",
          "[Added Lines]",
          "172: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast, UriMemoryManager * memory);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1251:  case URI_SET_ALPHA:",
          "1256:  case URI_SET_DIGIT:",
          "1257:   return URI_FUNC(ParseOwnPortUserInfo)(state, first + 1, afterLast, memory);",
          "",
          "[Removed Lines]",
          "1254:   return URI_FUNC(ParseOwnUserInfo)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1254:   return URI_FUNC(ParseOwnUserInfo)(state, first + 1, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1264:    if (afterPct == NULL) {",
          "1265:     return NULL;",
          "1266:    }",
          "1268:   }",
          "1270:  case _UT('@'):",
          "",
          "[Removed Lines]",
          "1267:    return URI_FUNC(ParseOwnUserInfo)(state, afterPct, afterLast);",
          "",
          "[Added Lines]",
          "1267:    return URI_FUNC(ParseOwnUserInfo)(state, afterPct, afterLast, memory);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1296:  if (first >= afterLast) {",
          "1297:   URI_FUNC(StopSyntax)(state, first);",
          "1298:   return NULL;",
          "",
          "[Removed Lines]",
          "1293: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(URI_TYPE(ParserState) * state, const URI_CHAR * first, const URI_CHAR * afterLast) {",
          "",
          "[Added Lines]",
          "1293: static const URI_CHAR * URI_FUNC(ParseOwnUserInfo)(",
          "1294:   URI_TYPE(ParserState) * state, const URI_CHAR * first,",
          "1295:   const URI_CHAR * afterLast, UriMemoryManager * memory) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1323:    if (afterPctSubUnres == NULL) {",
          "1324:     return NULL;",
          "1325:    }",
          "1327:   }",
          "1329:  case _UT(':'):",
          "1332:  case _UT('@'):",
          "",
          "[Removed Lines]",
          "1326:    return URI_FUNC(ParseOwnUserInfo)(state, afterPctSubUnres, afterLast);",
          "1330:   return URI_FUNC(ParseOwnUserInfo)(state, first + 1, afterLast);",
          "",
          "[Added Lines]",
          "1326:    return URI_FUNC(ParseOwnUserInfo)(state, afterPctSubUnres, afterLast, memory);",
          "1330:   return URI_FUNC(ParseOwnUserInfo)(state, first + 1, afterLast, memory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8afb355ca2ed01908c0be7d8b464f9c982690cb5",
      "candidate_info": {
        "commit_hash": "8afb355ca2ed01908c0be7d8b464f9c982690cb5",
        "repo": "uriparser/uriparser",
        "commit_url": "https://github.com/uriparser/uriparser/commit/8afb355ca2ed01908c0be7d8b464f9c982690cb5",
        "files": [
          ".travis.yml",
          "include/uriparser/UriBase.h"
        ],
        "message": "doc: Fix spelling of AddressSanitizer x2",
        "before_after_code_files": [
          "include/uriparser/UriBase.h||include/uriparser/UriBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uriparser/uriparser/pull/35"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uriparser/UriBase.h||include/uriparser/UriBase.h": [
          "File: include/uriparser/UriBase.h -> include/uriparser/UriBase.h"
        ]
      }
    }
  ]
}