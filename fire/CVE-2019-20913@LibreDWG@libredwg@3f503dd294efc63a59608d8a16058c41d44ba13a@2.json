{
  "cve_id": "CVE-2019-20913",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to a heap-based buffer over-read in dwg_encode_entity in common_entity_data.spec.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "3f503dd294efc63a59608d8a16058c41d44ba13a",
  "patch_info": {
    "commit_hash": "3f503dd294efc63a59608d8a16058c41d44ba13a",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/3f503dd294efc63a59608d8a16058c41d44ba13a",
    "files": [
      "src/classes.inc",
      "src/dec_macros.h"
    ],
    "message": "add DEBUGGING_CLASS_CPP\n\nand use it for TABLECONTENT.\nThis is more stable than CLASS_DXF in cases when\nTABLE is mixed up with TABLECONTENT. See e.g.\nGH #178, where it fixes the heap_overflow2 case.",
    "before_after_code_files": [
      "src/classes.inc||src/classes.inc",
      "src/dec_macros.h||src/dec_macros.h"
    ]
  },
  "patch_diff": {
    "src/classes.inc||src/classes.inc": [
      "File: src/classes.inc -> src/classes.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: # define DEBUGGING_DXF(action, name)                 ALLOW_DXF(action, name)",
      "54: # define DEBUGGING_CLASS(action, name)               UNSTABLE_CLASS(action, name)",
      "55: # define DEBUGGING_CLASS_DXF(action, name, _dxfname) UNSTABLE_CLASS_DXF(action, name, _dxfname)",
      "56: #else",
      "57: # define DEBUGGING_DXF(action, name)                 DISALLOW_DXF(action, name)",
      "58: # define DEBUGGING_CLASS(action, name)               UNHANDLED_CLASS(action, name)",
      "59: # define DEBUGGING_CLASS_DXF(action, name, _dxfname) UNHANDLED_CLASS_DXF(action, name, _dxfname)",
      "60: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: # define DEBUGGING_CLASS_CPP(action, name, _cppname) UNSTABLE_CLASS_CPP(action, name, _cppname)",
      "61: # define DEBUGGING_CLASS_CPP(action, name, _cppname) UNHANDLED_CLASS_CPP(action, name, _cppname)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:         obj->dxfname = (char*) #_name; \\",
      "124:         obj->fixedtype = DWG_TYPE_##_name; \\",
      "125:       } \\",
      "127:     }",
      "128: #define UNHANDLED_CLASS(action, _name) \\",
      "129:   if (klass->dxfname && strEQc (klass->dxfname, #_name)) \\",
      "",
      "[Removed Lines]",
      "126:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name)(dat, obj); \\",
      "",
      "[Added Lines]",
      "128:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name) (dat, obj); \\",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "144:       if (strEQc (_STR(action), \"decode\") || !memcmp (_STR(action), \"in\", 2)) { \\",
      "145:         obj->name = (char*) #_name; \\",
      "146:         obj->dxfname = (char*) #_dxfname; \\",
      "148:       } \\",
      "150:       return DWG_ERR_UNHANDLEDCLASS; \\",
      "151:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:       return DWG_ERR_UNHANDLEDCLASS; \\",
      "149:     }",
      "150: #define UNHANDLED_CLASS_CPP(action, _name, _cppname) \\",
      "151:   if (klass->cppname && strEQc (klass->cppname, #_cppname)) \\",
      "152:     { \\",
      "153:       WARN_UNHANDLED_CLASS; \\",
      "154:       if (strEQc (_STR(action), \"decode\") || !memcmp (_STR(action), \"in\", 2)) { \\",
      "155:         obj->name = (char*) #_name; \\",
      "156:         obj->dxfname = (char*) #_name; \\",
      "157:       } \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "170:   STABLE_CLASS    (ACTION, IMAGEDEF)",
      "171:   STABLE_CLASS    (ACTION, IMAGEDEF_REACTOR)",
      "172:   STABLE_CLASS    (ACTION, LAYER_INDEX)",
      "174:   STABLE_CLASS    (ACTION, LWPOLYLINE)",
      "176:   STABLE_CLASS    (ACTION, OBJECTCONTEXTDATA)",
      "177:   STABLE_CLASS_CPP(ACTION, OBJECTCONTEXTDATA, AcDbObjectContextData)",
      "178:   STABLE_CLASS_DXF(ACTION, PLACEHOLDER, ACDBPLACEHOLDER)",
      "",
      "[Removed Lines]",
      "173:   STABLE_CLASS    (ACTION, LAYOUT)",
      "175:   STABLE_CLASS    (ACTION, MLEADERSTYLE)",
      "",
      "[Added Lines]",
      "181:   STABLE_CLASS    (ACTION, LAYOUT) // TODO bottom_margin nan",
      "183:   STABLE_CLASS    (ACTION, MLEADERSTYLE) // TODO block_rotation nan",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "224:   DEBUGGING_CLASS     (ACTION, TABLEGEOMETRY) //wrong geom_data",
      "225:   DEBUGGING_CLASS     (ACTION, CELLSTYLEMAP) //broken",
      "226:   DEBUGGING_CLASS     (ACTION, MATERIAL)     //working on",
      "",
      "[Removed Lines]",
      "222:   DEBUGGING_CLASS     (ACTION, ARC_DIMENSION) //ent",
      "223:   DEBUGGING_CLASS     (ACTION, TABLECONTENT) //wrong values",
      "",
      "[Added Lines]",
      "231:   DEBUGGING_CLASS_CPP (ACTION, TABLECONTENT, AcDbTableContent)",
      "",
      "---------------"
    ],
    "src/dec_macros.h||src/dec_macros.h": [
      "File: src/dec_macros.h -> src/dec_macros.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1236:       obj_dat = *dat;                                                         \\",
      "1237:       hdl_dat = *dat;                                                         \\",
      "1238:       str_dat = *dat;                                                         \\",
      "1241:     }                                                                         \\",
      "1242:     else { error = dwg_decode_##token##_private (dat, dat, dat, obj); }       \\",
      "1243:     return error;                                                             \\",
      "",
      "[Removed Lines]",
      "1239:       error                                                                   \\",
      "1240:           = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat, obj); \\",
      "",
      "[Added Lines]",
      "1239:       error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,     \\",
      "1240:                                             obj);                             \\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a71a93f2f95e61be61669882cd0fc632d4261ee1",
      "candidate_info": {
        "commit_hash": "a71a93f2f95e61be61669882cd0fc632d4261ee1",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/a71a93f2f95e61be61669882cd0fc632d4261ee1",
        "files": [
          "doc/dynapi.texi",
          "include/dwg.h",
          "include/dwg_api.h",
          "programs/dwggrep.c",
          "src/classes.c",
          "src/classes.inc",
          "src/dwg.c",
          "src/dwg.spec",
          "src/dwg_api.c",
          "src/dynapi.c",
          "src/gen-dynapi.pl",
          "src/in_dxf.c",
          "test/unit-testing/cellstylemap.c",
          "test/unit-testing/common.c",
          "test/unit-testing/dynapi_test.c",
          "test/unit-testing/layer.c",
          "test/unit-testing/layout.c",
          "test/unit-testing/plotsettings.c"
        ],
        "message": "embed PLOTSETTINGS into LAYOUT\n\nit is the very same. promote PLOTSETTINGS to stable\nremove PLOTSETTINGS.page_setup_name, it was a mixup.",
        "before_after_code_files": [
          "include/dwg.h||include/dwg.h",
          "include/dwg_api.h||include/dwg_api.h",
          "programs/dwggrep.c||programs/dwggrep.c",
          "src/classes.c||src/classes.c",
          "src/classes.inc||src/classes.inc",
          "src/dwg.c||src/dwg.c",
          "src/dwg.spec||src/dwg.spec",
          "src/dwg_api.c||src/dwg_api.c",
          "src/dynapi.c||src/dynapi.c",
          "src/gen-dynapi.pl||src/gen-dynapi.pl",
          "src/in_dxf.c||src/in_dxf.c",
          "test/unit-testing/cellstylemap.c||test/unit-testing/cellstylemap.c",
          "test/unit-testing/common.c||test/unit-testing/common.c",
          "test/unit-testing/dynapi_test.c||test/unit-testing/dynapi_test.c",
          "test/unit-testing/layer.c||test/unit-testing/layer.c",
          "test/unit-testing/layout.c||test/unit-testing/layout.c",
          "test/unit-testing/plotsettings.c||test/unit-testing/plotsettings.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/classes.inc||src/classes.inc"
          ],
          "candidate": [
            "src/classes.inc||src/classes.inc"
          ]
        }
      },
      "candidate_diff": {
        "include/dwg.h||include/dwg.h": [
          "File: include/dwg.h -> include/dwg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: typedef uint16_t BITCODE_BS;",
          "99: typedef int16_t BITCODE_BSd;",
          "100: typedef uint16_t BITCODE_RS;",
          "101: typedef uint16_t BITCODE_RSx;",
          "102: typedef uint32_t BITCODE_BL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: typedef uint16_t BITCODE_BSx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3015:   BITCODE_TF data;",
          "3016: } Dwg_Object_VBA_PROJECT;",
          "3023: {",
          "3024:   struct _dwg_object_object *parent;",
          "3056:   BITCODE_T layout_name;",
          "3057:   BITCODE_BS tab_order;",
          "3059:   BITCODE_3DPOINT INSBASE;",
          "3060:   BITCODE_2DPOINT LIMMIN;",
          "3061:   BITCODE_2DPOINT LIMMAX;",
          "",
          "[Removed Lines]",
          "3020:  LAYOUT (82 + varies) object",
          "3022: typedef struct _dwg_object_LAYOUT",
          "3030:   BITCODE_BS plot_flags;",
          "3031:   BITCODE_BD left_margin;",
          "3032:   BITCODE_BD bottom_margin;",
          "3033:   BITCODE_BD right_margin;",
          "3034:   BITCODE_BD top_margin;",
          "3035:   BITCODE_BD paper_width;",
          "3036:   BITCODE_BD paper_height;",
          "3037:   BITCODE_2BD_1 plot_origin;",
          "3038:   BITCODE_BS plot_paper_unit;",
          "3039:   BITCODE_BS plot_rotation_mode;",
          "3040:   BITCODE_BS plot_type;",
          "3041:   BITCODE_2BD_1 plot_window_ll;",
          "3042:   BITCODE_2BD_1 plot_window_ur;",
          "3043:   BITCODE_T plotview_name;  // <=r2000",
          "3044:   BITCODE_H plotview;   // r2004+",
          "3045:   BITCODE_BD paper_units;",
          "3046:   BITCODE_BD drawing_units;",
          "3047:   BITCODE_T stylesheet;",
          "3048:   BITCODE_BS std_scale_type;",
          "3049:   BITCODE_BD std_scale_factor;",
          "3050:   BITCODE_2BD_1 paper_image_origin;",
          "3051:   BITCODE_BS shadeplot_mode;",
          "3052:   BITCODE_BS shadeplot_reslevel;",
          "3053:   BITCODE_BS shadeplot_customdpi;",
          "3058:   BITCODE_BS layout_flags;",
          "",
          "[Added Lines]",
          "3020:  Object PLOTSETTINGS (varies)",
          "3021:  See also LAYOUT.",
          "3023: typedef struct _dwg_object_PLOTSETTINGS",
          "3030:   BITCODE_BS plot_flags;  /*!< DXF 70",
          "3031:                          1 = PlotViewportBorders",
          "3032:                          2 = ShowPlotStyles",
          "3033:                          4 = PlotCentered",
          "3034:                          8 = PlotHidden",
          "3035:                          16 = UseStandardScale",
          "3036:                          32 = PlotPlotStyles",
          "3037:                          64 = ScaleLineweights",
          "3038:                          128 = PrintLineweights",
          "3039:                          512 = DrawViewportsFirst",
          "3040:                          1024 = ModelType",
          "3041:                          2048 = UpdatePaper",
          "3042:                          4096 = ZoomToPaperOnUpdate",
          "3043:                          8192 = Initializing",
          "3058:   BITCODE_BS plot_type;          /*!< DXF 74,  0 display, 1 extents, 2 limits, 3 view (see DXF 6),",
          "3063:   BITCODE_BS std_scale_type;     /*!< DXF 75, 0 = scaled to fit,",
          "3064:                                    1 = 1/128\"=1', 2 = 1/64\"=1', 3 = 1/32\"=1'",
          "3065:                                    4 = 1/16\"=1', 5 = 3/32\"=1', 6 = 1/8\"=1'",
          "3066:                                    7 = 3/16\"=1', 8 = 1/4\"=1', 9 = 3/8\"=1'",
          "3067:                                    10 = 1/2\"=1', 11 = 3/4\"=1', 12 = 1\"=1'",
          "3068:                                    13 = 3\"=1', 14 = 6\"=1', 15 = 1'=1'",
          "3069:                                    16 = 1:1, 17= 1:2, 18 = 1:4 19 = 1:8, 20 = 1:10, 21= 1:16",
          "3070:                                    22 = 1:20, 23 = 1:30, 24 = 1:40, 25 = 1:50, 26 = 1:100",
          "3071:                                    27 = 2:1, 28 = 4:1, 29 = 8:1, 30 = 10:1, 31 = 100:1, 32 = 1000:1",
          "3075:   BITCODE_BS shadeplot_type;     /*!< DXF 76, 0 display, 1 wireframe, 2 hidden, 3 rendered,",
          "3077:   BITCODE_BS shadeplot_reslevel; /*!< DXF 77, 0 draft, 1 preview, 2 nomal,",
          "3081: } Dwg_Object_PLOTSETTINGS;",
          "3084:  LAYOUT (82 + varies) object",
          "3086: typedef struct _dwg_object_LAYOUT",
          "3087: {",
          "3088:   struct _dwg_object_object *parent;",
          "3090:   Dwg_Object_PLOTSETTINGS plotsettings;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3066:   BITCODE_BS ucs_orthoview_type;",
          "3067:   BITCODE_3DPOINT EXTMIN;",
          "3068:   BITCODE_3DPOINT EXTMAX;",
          "3070:   BITCODE_H block_header;",
          "3071:   BITCODE_H active_viewport;",
          "3072:   BITCODE_H base_ucs;",
          "",
          "[Removed Lines]",
          "3069:   BITCODE_H visualstyle;  // r2007+",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4310: } Dwg_Object_MATERIAL;",
          "4377:  Object OBJECT_PTR (varies) UNKNOWN FIELDS",
          "4378:  yet unsorted, and unused.",
          "",
          "[Removed Lines]",
          "4313:  Object PLOTSETTINGS (varies)",
          "4314:  See LAYOUT.",
          "4316: typedef struct _dwg_object_PLOTSETTINGS",
          "4317: {",
          "4318:   struct _dwg_object_object *parent;",
          "4323:   BITCODE_BS plot_flags;    /*!< DXF 70",
          "4324:                          1 = PlotViewportBorders",
          "4325:                          2 = ShowPlotStyles",
          "4326:                          4 = PlotCentered",
          "4327:                          8 = PlotHidden",
          "4328:                          16 = UseStandardScale",
          "4329:                          32 = PlotPlotStyles",
          "4330:                          64 = ScaleLineweights",
          "4331:                          128 = PrintLineweights",
          "4332:                          512 = DrawViewportsFirst",
          "4333:                          1024 = ModelType",
          "4334:                          2048 = UpdatePaper",
          "4335:                          4096 = ZoomToPaperOnUpdate",
          "4336:                          8192 = Initializing",
          "4346:   BITCODE_2BD_1 plot_origin;         /*!< DXF 46 */ // + 47",
          "4347:   BITCODE_2BD_1 plot_window_ll;      /*!< DXF 48 */ // + 49",
          "4348:   BITCODE_2BD_1 plot_window_ur;      /*!< DXF 140 */ // + 141",
          "4353:   BITCODE_BS plot_type;        /*!< DXF 74,  0 display, 1 extents, 2 limits, 3 view (see DXF 6),",
          "4356:   BITCODE_BS std_scale_type;   /*!< DXF 75, 0 = scaled to fit,",
          "4357:                                    1 = 1/128\"=1', 2 = 1/64\"=1', 3 = 1/32\"=1'",
          "4358:                                    4 = 1/16\"=1', 5 = 3/32\"=1', 6 = 1/8\"=1'",
          "4359:                                    7 = 3/16\"=1', 8 = 1/4\"=1', 9 = 3/8\"=1'",
          "4360:                                    10 = 1/2\"=1', 11 = 3/4\"=1', 12 = 1\"=1'",
          "4361:                                    13 = 3\"=1', 14 = 6\"=1', 15 = 1'=1'",
          "4362:                                    16 = 1:1, 17= 1:2, 18 = 1:4 19 = 1:8, 20 = 1:10, 21= 1:16",
          "4363:                                    22 = 1:20, 23 = 1:30, 24 = 1:40, 25 = 1:50, 26 = 1:100",
          "4364:                                    27 = 2:1, 28 = 4:1, 29 = 8:1, 30 = 10:1, 31 = 100:1, 32 = 1000:1",
          "4368:   BITCODE_BS shadeplot_mode;   /*!< DXF 76, 0 display, 1 wireframe, 2 hidden, 3 rendered,",
          "4370:   BITCODE_BS shadeplot_reslevel; /*!< DXF 77, 0 draft, 1 preview, 2 nomal,",
          "4374: } Dwg_Object_PLOTSETTINGS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7200: EXPORT BITCODE_BSd dxf_revcvt_lweight (const int lw);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7176: EXPORT BITCODE_H",
          "7177: dwg_ctrl_table (Dwg_Data *restrict dwg, const char *restrict table);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7207:                                        const char *restrict name,",
          "7208:                                        const char *restrict table);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7189: EXPORT char*",
          "7190: dwg_handle_name (Dwg_Data *restrict dwg, const char *restrict table,",
          "7191:                  const BITCODE_H restrict handle);",
          "",
          "---------------"
        ],
        "include/dwg_api.h||include/dwg_api.h": [
          "File: include/dwg_api.h -> include/dwg_api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "565: typedef struct _dwg_object_LAYER_INDEX            dwg_obj_layer_index;",
          "566: typedef struct _dwg_object_LAYERFILTER            dwg_obj_layerfilter;",
          "567: typedef struct _dwg_object_LAYOUT                 dwg_obj_layout;",
          "568: typedef struct _dwg_object_MLEADERSTYLE           dwg_obj_mleaderstyle;",
          "569: typedef struct _dwg_object_PLACEHOLDER            dwg_obj_placeholder;",
          "570: typedef struct _dwg_object_RASTERVARIABLES        dwg_obj_rastervariables;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568: typedef struct _dwg_object_PLOTSETTINGS           dwg_obj_plotsettings;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588: typedef struct _dwg_object_MENTALRAYRENDERSETTINGS         dwg_obj_mentalrayrendersettings;",
          "589: typedef struct _dwg_object_OBJECT_PTR                      dwg_obj_object_ptr;",
          "590: typedef struct _dwg_object_PERSUBENTMGR                    dwg_obj_persubentmgr;",
          "592: typedef struct _dwg_object_RAPIDRTRENDERSETTINGS           dwg_obj_rapidrtrendersettings;",
          "593: typedef struct _dwg_object_RENDERSETTINGS                  dwg_obj_rendersettings;",
          "594: typedef struct _dwg_object_SECTION_MANAGER                 dwg_obj_section_manager;",
          "",
          "[Removed Lines]",
          "591: typedef struct _dwg_object_PLOTSETTINGS                    dwg_obj_plotsettings;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795: DWG_GETALL_OBJECT_DECL (LAYER_INDEX)",
          "796: DWG_GETALL_OBJECT_DECL (LAYERFILTER)",
          "797: DWG_GETALL_OBJECT_DECL (LAYOUT)",
          "798: DWG_GETALL_OBJECT_DECL (MLEADERSTYLE)",
          "799: DWG_GETALL_OBJECT_DECL (PLACEHOLDER)",
          "800: DWG_GETALL_OBJECT_DECL (RASTERVARIABLES)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798: DWG_GETALL_OBJECT_DECL (PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "818: DWG_GETALL_OBJECT_DECL (MENTALRAYRENDERSETTINGS)",
          "819: DWG_GETALL_OBJECT_DECL (OBJECT_PTR)",
          "820: DWG_GETALL_OBJECT_DECL (PERSUBENTMGR)",
          "822: DWG_GETALL_OBJECT_DECL (PROXY_OBJECT)",
          "823: DWG_GETALL_OBJECT_DECL (RAPIDRTRENDERSETTINGS)",
          "824: DWG_GETALL_OBJECT_DECL (RENDERSETTINGS)",
          "",
          "[Removed Lines]",
          "821: DWG_GETALL_OBJECT_DECL (PLOTSETTINGS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1289: dwg_get_OBJECT_DECL (obj_layer_index, LAYER_INDEX);",
          "1290: dwg_get_OBJECT_DECL (obj_layerfilter, LAYERFILTER)",
          "1291: dwg_get_OBJECT_DECL (obj_layout, LAYOUT);",
          "1292: dwg_get_OBJECT_DECL (obj_mleaderstyle, MLEADERSTYLE);",
          "1293: dwg_get_OBJECT_DECL (obj_placeholder, PLACEHOLDER);",
          "1294: dwg_get_OBJECT_DECL (obj_rastervariables, RASTERVARIABLES);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1292: dwg_get_OBJECT_DECL (obj_plotsettings, PLOTSETTINGS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1312: dwg_get_OBJECT_DECL (obj_mentalrayrendersettings, MENTALRAYRENDERSETTINGS)",
          "1313: dwg_get_OBJECT_DECL (obj_object_ptr, OBJECT_PTR);",
          "1314: dwg_get_OBJECT_DECL (obj_persubentmgr, PERSUBENTMGR);",
          "1316: dwg_get_OBJECT_DECL (obj_proxy, PROXY_OBJECT);",
          "1317: dwg_get_OBJECT_DECL (obj_rapidrtrendersettings, RAPIDRTRENDERSETTINGS)",
          "1318: dwg_get_OBJECT_DECL (obj_rendersettings, RENDERSETTINGS);",
          "",
          "[Removed Lines]",
          "1315: dwg_get_OBJECT_DECL (obj_plotsettings, PLOTSETTINGS);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "programs/dwggrep.c||programs/dwggrep.c": [
          "File: programs/dwggrep.c -> programs/dwggrep.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:   BITCODE_BL i;",
          "673:   const Dwg_Object_LAYOUT *_obj = obj->tio.object->tio.LAYOUT;",
          "681:   MATCH_OBJECT (LAYOUT, layout_name, 1);",
          "682:   MATCH_TABLE (LAYOUT, shadeplot, VISUALSTYLE, 333);",
          "683:   MATCH_TABLE (LAYOUT, base_ucs, UCS, 346);",
          "684:   MATCH_TABLE (LAYOUT, named_ucs, UCS, 345);",
          "",
          "[Removed Lines]",
          "675:   MATCH_OBJECT (LAYOUT, printer_cfg_file, 1);",
          "676:   MATCH_OBJECT (LAYOUT, paper_size, 2);",
          "677:   MATCH_OBJECT (LAYOUT, canonical_media_name, 4);",
          "678:   MATCH_OBJECT (LAYOUT, plotview_name, 6);",
          "679:   MATCH_OBJECT (LAYOUT, stylesheet, 7);",
          "",
          "[Added Lines]",
          "675:   MATCH_OBJECT (LAYOUT, plotsettings.printer_cfg_file, 1);",
          "676:   MATCH_OBJECT (LAYOUT, plotsettings.paper_size, 2);",
          "677:   MATCH_OBJECT (LAYOUT, plotsettings.canonical_media_name, 4);",
          "678:   MATCH_TABLE (LAYOUT, plotsettings.plotview, PLOTVIEW, 6);",
          "679:   MATCH_OBJECT (LAYOUT, plotsettings.plotview_name, 6);",
          "680:   MATCH_OBJECT (LAYOUT, plotsettings.stylesheet, 7);",
          "683:   MATCH_TABLE (LAYOUT, block_header, BLOCK, 330);",
          "684:   MATCH_TABLE (LAYOUT, active_viewport, VIEWPORT, 331);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "930:   MATCH_OBJECT (PLOTSETTINGS, paper_size, 2);",
          "931:   MATCH_OBJECT (PLOTSETTINGS, canonical_media_name, 4);",
          "932:   MATCH_OBJECT (PLOTSETTINGS, plotview_name, 6);",
          "933:   MATCH_OBJECT (PLOTSETTINGS, stylesheet, 7);",
          "934:   MATCH_TABLE (PLOTSETTINGS, VISUALSTYLE, shadeplot, 333);",
          "935:   return found;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "936:   MATCH_TABLE (PLOTSETTINGS, PLOTVIEW, plotview, 6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1105:       ELSEMATCH (IMAGEDEF)",
          "1106:       ELSEMATCH (LAYER_INDEX)",
          "1107:       ELSEMATCH (LAYOUT)",
          "1108:       ELSEMATCH (SCALE)",
          "1109:       ELSEMATCH (FIELD)",
          "1110:       ELSEMATCH (TABLECONTENT)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1112:       ELSEMATCH (PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1116:       ELSEMATCH (LIGHTLIST)",
          "1117:       ELSEMATCH (DBCOLOR)",
          "1118:       ELSEMATCH (MATERIAL)",
          "1120:       ELSEMATCH (DIMASSOC)",
          "1121:       ELSEMATCH (ASSOCACTION)",
          "1122:       ELSEMATCH (ASSOCOSNAPPOINTREFACTIONPARAM)",
          "",
          "[Removed Lines]",
          "1119:       ELSEMATCH (PLOTSETTINGS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/classes.c||src/classes.c": [
          "File: src/classes.c -> src/classes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:    DWG_TYPE_MENTALRAYRENDERSETTINGS,",
          "36:    DWG_TYPE_OBJECT_PTR,",
          "37:    DWG_TYPE_PERSUBENTMGR,",
          "39:    DWG_TYPE_PROXY_OBJECT,",
          "40:    DWG_TYPE_RAPIDRTRENDERSETTINGS,",
          "41:    DWG_TYPE_RENDERSETTINGS,",
          "",
          "[Removed Lines]",
          "38:    DWG_TYPE_PLOTSETTINGS,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/classes.inc||src/classes.inc": [
          "File: src/classes.inc -> src/classes.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   STABLE_CLASS    (ACTION, IMAGEDEF_REACTOR)",
          "192:   STABLE_CLASS    (ACTION, LAYER_INDEX)",
          "193:   STABLE_CLASS    (ACTION, LAYERFILTER)",
          "195:   STABLE_CLASS    (ACTION, MLEADERSTYLE) // TODO block_rotation nan",
          "197:   STABLE_CLASS_DXF(ACTION, PLACEHOLDER, ACDBPLACEHOLDER)",
          "198:   STABLE_CLASS    (ACTION, RASTERVARIABLES)",
          "199:   STABLE_CLASS    (ACTION, SCALE)",
          "200:   STABLE_CLASS    (ACTION, SORTENTSTABLE)",
          "",
          "[Removed Lines]",
          "194:   STABLE_CLASS    (ACTION, LAYOUT)       // TODO bottom_margin nan",
          "",
          "[Added Lines]",
          "194:   STABLE_CLASS    (ACTION, LAYOUT)       // includes PLOTSETTINGS",
          "198:   STABLE_CLASS    (ACTION, PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:   UNSTABLE_CLASS_CPP (ACTION, OBJECT_PTR, CAseDLPNTableRecord)",
          "229:   UNSTABLE_CLASS_DXF (ACTION, PROXY_OBJECT, PROXY)",
          "230:   UNSTABLE_CLASS_DXF (ACTION, PERSUBENTMGR, ACDBPERSSUBENTMANAGER)",
          "232:   UNSTABLE_CLASS     (ACTION, RAPIDRTRENDERSETTINGS)",
          "233:   UNSTABLE_CLASS     (ACTION, RENDERSETTINGS)",
          "234:   UNSTABLE_CLASS     (ACTION, TABLESTYLE)        // stable, but for r2010+ some bits missing at the end",
          "",
          "[Removed Lines]",
          "231:   UNSTABLE_CLASS     (ACTION, PLOTSETTINGS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dwg.c||src/dwg.c": [
          "File: src/dwg.c -> src/dwg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1864:   return ref;",
          "1865: }",
          "1871: EXPORT BITCODE_H",
          "1874: {",
          "1879:   Dwg_Header_Variables *vars = &dwg->header_vars;",
          "1882:     return NULL;",
          "1884:   if (strEQc (table, \"BLOCK\"))",
          "1885:     {",
          "1886:       if (!(ctrl = vars->BLOCK_CONTROL_OBJECT))",
          "",
          "[Removed Lines]",
          "1872: dwg_find_tablehandle (Dwg_Data *restrict dwg, const char *restrict name,",
          "1873:                       const char *restrict table)",
          "1875:   BITCODE_BL i, num_entries = 0;",
          "1876:   BITCODE_H ctrl = NULL, *hdlv = NULL;",
          "1877:   Dwg_Object *obj;",
          "1878:   Dwg_Object_APPID_CONTROL *_obj; // just some random generic type",
          "1881:   if (!dwg || !name || !table)",
          "",
          "[Added Lines]",
          "1869: dwg_ctrl_table (Dwg_Data *restrict dwg, const char *restrict table)",
          "1871:   BITCODE_H ctrl = NULL;",
          "1874:   if (!dwg || !table)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1904:       if (!(ctrl = vars->LTYPE_CONTROL_OBJECT))",
          "1905:         vars->LTYPE_CONTROL_OBJECT = ctrl",
          "1906:             = dwg_find_table_control (dwg, \"LTYPE_CONTROL\");",
          "1922:     }",
          "1923:   else if (strEQc (table, \"VIEW\"))",
          "1924:     {",
          "",
          "[Removed Lines]",
          "1907:       if (strEQc (name, \"BYLAYER\") || strEQc (name, \"ByLayer\"))",
          "1908:         {",
          "1909:           if (vars->LTYPE_BYLAYER)",
          "1910:             return vars->LTYPE_BYLAYER;",
          "1911:         }",
          "1912:       else if (strEQc (name, \"BYBLOCK\") || strEQc (name, \"ByBlock\"))",
          "1913:         {",
          "1914:           if (vars->LTYPE_BYBLOCK)",
          "1915:             return vars->LTYPE_BYBLOCK;",
          "1916:         }",
          "1917:       else if (strEQc (name, \"CONTINUOUS\") || strEQc (name, \"Continuous\"))",
          "1918:         {",
          "1919:           if (vars->LTYPE_CONTINUOUS)",
          "1920:             return vars->LTYPE_CONTINUOUS;",
          "1921:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2026:     }",
          "2027:   else",
          "2028:     {",
          "2030:       return 0;",
          "2031:     }",
          "2032:   if (!ctrl)",
          "2033:     { // TODO: silently search table_control. header_vars can be empty",
          "2034:       LOG_TRACE (\"dwg_find_tablehandle: Empty header_vars table %s\\n\", table);",
          "",
          "[Removed Lines]",
          "2029:       LOG_ERROR (\"dwg_find_tablehandle: Unsupported table %s\", table);",
          "",
          "[Added Lines]",
          "2006:       LOG_ERROR (\"dwg_ctrl_table: Unsupported table %s\", table);",
          "2009:   return ctrl;",
          "2010: }",
          "2016: EXPORT BITCODE_H",
          "2017: dwg_find_tablehandle (Dwg_Data *restrict dwg, const char *restrict name,",
          "2018:                       const char *restrict table)",
          "2019: {",
          "2020:   BITCODE_BL i, num_entries = 0;",
          "2021:   BITCODE_H ctrl = NULL, *hdlv = NULL;",
          "2022:   Dwg_Object *obj;",
          "2023:   Dwg_Object_APPID_CONTROL *_obj; // just some random generic type",
          "2024:   Dwg_Header_Variables *vars = &dwg->header_vars;",
          "2026:   if (!dwg || !name || !table)",
          "2027:     return NULL;",
          "2029:   ctrl = dwg_ctrl_table (dwg, table);",
          "2030:   if (strEQc (table, \"LTYPE\"))",
          "2031:     {",
          "2032:       if (strEQc (name, \"BYLAYER\") || strEQc (name, \"ByLayer\"))",
          "2033:         {",
          "2034:           if (vars->LTYPE_BYLAYER)",
          "2035:             return vars->LTYPE_BYLAYER;",
          "2036:         }",
          "2037:       else if (strEQc (name, \"BYBLOCK\") || strEQc (name, \"ByBlock\"))",
          "2038:         {",
          "2039:           if (vars->LTYPE_BYBLOCK)",
          "2040:             return vars->LTYPE_BYBLOCK;",
          "2041:         }",
          "2042:       else if (strEQc (name, \"CONTINUOUS\") || strEQc (name, \"Continuous\"))",
          "2043:         {",
          "2044:           if (vars->LTYPE_CONTINUOUS)",
          "2045:             return vars->LTYPE_CONTINUOUS;",
          "2046:         }",
          "2047:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2086:   return 0;",
          "2087: }",
          "2090:    NULL if not found.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2106: EXPORT char*",
          "2107: dwg_handle_name (Dwg_Data *restrict dwg, const char *restrict table,",
          "2108:                  const BITCODE_H restrict handle)",
          "2109: {",
          "2110:   BITCODE_BL i, num_entries = 0;",
          "2111:   BITCODE_H ctrl = NULL, *hdlv = NULL;",
          "2112:   Dwg_Object *obj;",
          "2113:   Dwg_Object_APPID_CONTROL *_obj; // just some random generic type",
          "2114:   Dwg_Header_Variables *vars = &dwg->header_vars;",
          "2116:   if (!dwg || !table || !handle || !handle->handleref.value)",
          "2117:     return NULL;",
          "2119:   ctrl = dwg_ctrl_table (dwg, table);",
          "2120:   if (!ctrl)",
          "2121:     { // TODO: silently search table_control. header_vars can be empty",
          "2122:       LOG_TRACE (\"dwg_handle_name: Empty header_vars table %s\\n\", table);",
          "2123:       return 0;",
          "2124:     }",
          "2125:   obj = dwg_resolve_handle (dwg, ctrl->absolute_ref);",
          "2126:   if (!obj)",
          "2127:     {",
          "2128:       LOG_TRACE (\"dwg_handle_name: Could not resolve table %s\\n\", table);",
          "2129:       return 0;",
          "2130:     }",
          "2133:   if (!dwg_obj_is_control (obj))",
          "2134:     {",
          "2135:       LOG_ERROR (\"dwg_handle_name: Could not resolve CONTROL object %s \"",
          "2136:                  \"for table %s\",",
          "2137:                  obj->name, table);",
          "2138:       return 0;",
          "2139:     }",
          "2140:   _obj = obj->tio.object->tio.APPID_CONTROL; // just a random type",
          "2141:   dwg_dynapi_entity_value (_obj, obj->name, \"num_entries\", &num_entries, NULL);",
          "2142:   if (!num_entries)",
          "2143:     return NULL;",
          "2144:   dwg_dynapi_entity_value (_obj, obj->name, \"entries\", &hdlv, NULL);",
          "2145:   if (!hdlv)",
          "2146:     return NULL;",
          "2147:   for (i = 0; i < num_entries; i++)",
          "2148:     {",
          "2149:       char *hdlname;",
          "2150:       Dwg_Object *hobj;",
          "2151:       Dwg_Object_APPID *_o;",
          "2152:       int isnew = 0;",
          "2153:       bool ok;",
          "2155:       if (!hdlv[i])",
          "2156:         continue;",
          "2157:       hobj = dwg_resolve_handle (dwg, hdlv[i]->absolute_ref);",
          "2158:       if (!hobj || !hobj->tio.object || !hobj->tio.object->tio.APPID)",
          "2159:         continue;",
          "2160:       if (hdlv[i]->absolute_ref != handle->absolute_ref)",
          "2161:         continue;",
          "2162:       _o = hobj->tio.object->tio.APPID;",
          "2163:       ok = dwg_dynapi_entity_utf8text (_o, hobj->name, \"name\", &hdlname, &isnew, NULL);",
          "2164:       LOG_HANDLE (\" %s.%s[%d] => %s.name: %s\\n\", obj->name, \"entries\", i,",
          "2165:                   hobj->name, hdlname ? hdlname : \"NULL\");",
          "2166:       if (ok)",
          "2167:         return hdlname;",
          "2168:       else",
          "2169:         return NULL;",
          "2170:     }",
          "2171:   return NULL;",
          "2172: }",
          "",
          "---------------"
        ],
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "4043:   START_OBJECT_HANDLE_STREAM;",
          "4044: DWG_OBJECT_END",
          "4049:   SUBCLASS (AcDbPlotSettings)",
          "4050:   FIELD_T (printer_cfg_file, 1);",
          "4051:   FIELD_T (paper_size, 2);",
          "",
          "[Removed Lines]",
          "4047: DWG_OBJECT (LAYOUT)",
          "",
          "[Added Lines]",
          "4047: DWG_OBJECT (PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4064:   FIELD_2BD_1 (plot_window_ll, 48);",
          "4065:   FIELD_2BD_1 (plot_window_ur, 140);",
          "4066:   UNTIL (R_2000) {",
          "4068:   }",
          "4071:   }",
          "4072:   FREE { FIELD_TV (plotview_name, 6); FIELD_HANDLE (plotview, 5, 6); }",
          "4073:   FIELD_BD (paper_units, 142);",
          "",
          "[Removed Lines]",
          "4067:     FIELD_TV (plotview_name, 6);",
          "4069:   SINCE (R_2004) {",
          "4070:     FIELD_HANDLE (plotview, 5, 6);",
          "",
          "[Added Lines]",
          "4067:     ENCODER {",
          "4068:       if (_obj->plotview && !_obj->plotview_name)",
          "4069:         _obj->plotview_name = dwg_handle_name (dwg, \"PLOTVIEW\", _obj->plotview);",
          "4070:     }",
          "4071:     FIELD_T (plotview_name, 6);",
          "4072:     DECODER {",
          "4073:       _obj->plotview = dwg_find_tablehandle (dwg, _obj->plotview_name, \"PLOTVIEW\");",
          "4074:     }",
          "4076:   LATER_VERSIONS {",
          "4077:     DECODER {",
          "4078:       if (!_obj->plotview && _obj->plotview_name)",
          "4079:         _obj->plotview = dwg_find_tablehandle (dwg, _obj->plotview_name, \"PLOTVIEW\");",
          "4080:     }",
          "4081:     DXF {",
          "4082:       FIELD_T (plotview_name, 6);",
          "4083:     } else {",
          "4084:       FIELD_HANDLE (plotview, 4, 6);",
          "4085:     }",
          "4086:     DECODER {",
          "4087:       if (!_obj->plotview_name)",
          "4088:         _obj->plotview_name = dwg_handle_name (dwg, \"PLOTVIEW\", _obj->plotview);",
          "4089:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4084:   FIELD_2BD_1 (paper_image_origin, 148);",
          "4085:   SINCE (R_2004)",
          "4086:     {",
          "4088:       FIELD_BS (shadeplot_reslevel, 77);",
          "4089:       FIELD_BS (shadeplot_customdpi, 78);",
          "4090:     }",
          "4092:   SUBCLASS (AcDbLayout)",
          "4093:   FIELD_T (layout_name, 1);",
          "",
          "[Removed Lines]",
          "4087:       FIELD_BS (shadeplot_mode, 76);",
          "",
          "[Added Lines]",
          "4106:       FIELD_BS (shadeplot_type, 76);",
          "4110:   SINCE (R_2007) {",
          "4111:     FIELD_HANDLE (shadeplot, 4, 333);",
          "4112:   }",
          "4113: DWG_OBJECT_END",
          "4116: DWG_OBJECT (LAYOUT)",
          "4118:   SUBCLASS (AcDbPlotSettings)",
          "4119:   FIELD_T (plotsettings.printer_cfg_file, 1);",
          "4120:   FIELD_T (plotsettings.paper_size, 2);",
          "4121:   FIELD_BSx (plotsettings.plot_flags, 0);",
          "4122:   FIELD_BD (plotsettings.left_margin, 40);",
          "4123:   FIELD_BD (plotsettings.bottom_margin, 41);",
          "4124:   FIELD_BD (plotsettings.right_margin, 42);",
          "4125:   FIELD_BD (plotsettings.top_margin, 43);",
          "4126:   FIELD_BD (plotsettings.paper_width, 44);",
          "4127:   FIELD_BD (plotsettings.paper_height, 45);",
          "4128:   FIELD_T (plotsettings.canonical_media_name, 4);",
          "4129:   FIELD_2BD_1 (plotsettings.plot_origin, 46);",
          "4130:   FIELD_BS (plotsettings.plot_paper_unit, 0);",
          "4131:   FIELD_BS (plotsettings.plot_rotation_mode, 0);",
          "4132:   FIELD_BS (plotsettings.plot_type, 0);",
          "4133:   FIELD_2BD_1 (plotsettings.plot_window_ll, 48);",
          "4134:   FIELD_2BD_1 (plotsettings.plot_window_ur, 140);",
          "4135:   UNTIL (R_2000) {",
          "4136:     ENCODER {",
          "4137:       if (_obj->plotsettings.plotview && !_obj->plotsettings.plotview_name)",
          "4138:         _obj->plotsettings.plotview_name = dwg_handle_name (dwg, \"PLOTVIEW\",",
          "4139:                                              _obj->plotsettings.plotview);",
          "4140:     }",
          "4141:     FIELD_T (plotsettings.plotview_name, 6);",
          "4142:     DECODER {",
          "4143:       _obj->plotsettings.plotview = dwg_find_tablehandle (dwg,",
          "4144:                                       _obj->plotsettings.plotview_name, \"PLOTVIEW\");",
          "4145:     }",
          "4146:   }",
          "4147:   LATER_VERSIONS {",
          "4148:     DECODER {",
          "4149:       if (!_obj->plotsettings.plotview && _obj->plotsettings.plotview_name)",
          "4150:         _obj->plotsettings.plotview = dwg_find_tablehandle (dwg,",
          "4151:                  _obj->plotsettings.plotview_name, \"PLOTVIEW\");",
          "4152:     }",
          "4153:     DXF {",
          "4154:       FIELD_T (plotsettings.plotview_name, 6);",
          "4155:     } else {",
          "4156:       FIELD_HANDLE (plotsettings.plotview, 4, 6);",
          "4157:     }",
          "4158:     DECODER {",
          "4159:       if (!_obj->plotsettings.plotview_name)",
          "4160:         _obj->plotsettings.plotview_name = dwg_handle_name (dwg, \"PLOTVIEW\",",
          "4161:                                               _obj->plotsettings.plotview);",
          "4162:     }",
          "4163:   }",
          "4164:   FREE { FIELD_TV (plotsettings.plotview_name, 6); FIELD_HANDLE (plotsettings.plotview, 5, 6); }",
          "4165:   FIELD_BD (plotsettings.paper_units, 142);",
          "4166:   FIELD_BD (plotsettings.drawing_units, 143);",
          "4167:   DXF {",
          "4168:     FIELD_BS (plotsettings.plot_flags, 70);",
          "4169:     FIELD_BS (plotsettings.plot_paper_unit, 72);",
          "4170:     FIELD_BS (plotsettings.plot_rotation_mode, 73);",
          "4171:     FIELD_BS (plotsettings.plot_type, 74);",
          "4172:   }",
          "4173:   FIELD_T (plotsettings.stylesheet, 7);",
          "4174:   FIELD_BS (plotsettings.std_scale_type, 75);",
          "4175:   FIELD_BD (plotsettings.std_scale_factor, 147);",
          "4176:   FIELD_2BD_1 (plotsettings.paper_image_origin, 148);",
          "4177:   SINCE (R_2004)",
          "4178:     {",
          "4179:       FIELD_BS (plotsettings.shadeplot_type, 76);",
          "4180:       FIELD_BS (plotsettings.shadeplot_reslevel, 77);",
          "4181:       FIELD_BS (plotsettings.shadeplot_customdpi, 78);",
          "4182:     }",
          "4183:   SINCE (R_2007) {",
          "4184:     FIELD_HANDLE (plotsettings.shadeplot, 4, 333);",
          "4185:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4110:   }",
          "4112:   START_OBJECT_HANDLE_STREAM;",
          "4116:   FIELD_HANDLE (block_header, 4, 330); // => BLOCK_HEADER.pspace or mspace (ownerhandle)",
          "4117:   FIELD_HANDLE (active_viewport, 4, 331);",
          "4118:   FIELD_HANDLE (base_ucs, 5, 346);",
          "",
          "[Removed Lines]",
          "4113:   SINCE (R_2007) {",
          "4114:     FIELD_HANDLE (visualstyle, 4, 0);",
          "4115:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6728: DWG_ENTITY_END",
          "6782: DWG_OBJECT (ASSOCALIGNEDDIMACTIONBODY)",
          "",
          "[Removed Lines]",
          "6731: DWG_OBJECT (PLOTSETTINGS)",
          "6733:   SUBCLASS (AcDbPlotSettings)",
          "6734:   FIELD_T (printer_cfg_file, 2);",
          "6735:   FIELD_T (paper_size, 3);",
          "6736:   FIELD_BSx (plot_flags, 0);",
          "6737:   FIELD_BD (left_margin, 40);",
          "6738:   FIELD_BD (bottom_margin, 41);",
          "6739:   FIELD_BD (right_margin, 42);",
          "6740:   FIELD_BD (top_margin, 43);",
          "6741:   FIELD_BD (paper_width, 44);",
          "6742:   FIELD_BD (paper_height, 45);",
          "6743:   FIELD_T (canonical_media_name, 4);",
          "6744:   FIELD_2BD_1 (plot_origin, 46);",
          "6745:   FIELD_BS (plot_paper_unit, 0);",
          "6746:   FIELD_BS (plot_rotation_mode, 0);",
          "6747:   FIELD_BS (plot_type, 0);",
          "6748:   FIELD_2BD_1 (plot_window_ll, 48);",
          "6749:   FIELD_2BD_1 (plot_window_ur, 140);",
          "6750:   VERSIONS (R_13, R_2000) {",
          "6751:     FIELD_TV (plotview_name, 6);",
          "6752:   }",
          "6753:   SINCE (R_2004) {",
          "6754:     FIELD_HANDLE (plotview, 5, 6);",
          "6755:   }",
          "6756:   FREE { FIELD_TV (plotview_name, 6); FIELD_HANDLE (plotview, 5, 6); }",
          "6757:   FIELD_BD (paper_units, 142);",
          "6758:   FIELD_BD (drawing_units, 143);",
          "6759:   DXF {",
          "6760:     FIELD_BS (plot_flags, 70);",
          "6761:     FIELD_BS (plot_paper_unit, 72);",
          "6762:     FIELD_BS (plot_rotation_mode, 73);",
          "6763:     FIELD_BS (plot_type, 74);",
          "6764:   }",
          "6765:   FIELD_T (stylesheet, 7);",
          "6766:   FIELD_BS (std_scale_type, 75);",
          "6767:   FIELD_BD (std_scale_factor, 147);",
          "6768:   FIELD_2BD_1 (paper_image_origin, 148);",
          "6769:   SINCE (R_2004)",
          "6770:     {",
          "6771:       FIELD_BS (shadeplot_mode, 76);",
          "6772:       FIELD_BS (shadeplot_reslevel, 77);",
          "6773:       FIELD_BS (shadeplot_customdpi, 78);",
          "6774:     }",
          "6775:   SINCE (R_2007) {",
          "6776:     FIELD_HANDLE (shadeplot, 4, 333);",
          "6777:   }",
          "6778: DWG_OBJECT_END",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dwg_api.c||src/dwg_api.c": [
          "File: src/dwg_api.c -> src/dwg_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: DWG_GETALL_OBJECT (LAYER_INDEX)",
          "183: DWG_GETALL_OBJECT (LAYERFILTER)",
          "184: DWG_GETALL_OBJECT (LAYOUT)",
          "185: DWG_GETALL_OBJECT (MLEADERSTYLE)",
          "186: DWG_GETALL_OBJECT (PLACEHOLDER)",
          "187: DWG_GETALL_OBJECT (RASTERVARIABLES)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: DWG_GETALL_OBJECT (PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205: DWG_GETALL_OBJECT (MENTALRAYRENDERSETTINGS)",
          "206: DWG_GETALL_OBJECT (OBJECT_PTR)",
          "207: DWG_GETALL_OBJECT (PERSUBENTMGR)",
          "209: DWG_GETALL_OBJECT (PROXY_OBJECT)",
          "210: DWG_GETALL_OBJECT (RAPIDRTRENDERSETTINGS)",
          "211: DWG_GETALL_OBJECT (RENDERSETTINGS)",
          "",
          "[Removed Lines]",
          "208: DWG_GETALL_OBJECT (PLOTSETTINGS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "402: CAST_DWG_OBJECT_TO_OBJECT (PLACEHOLDER)",
          "403: CAST_DWG_OBJECT_TO_OBJECT (PROXY_OBJECT)",
          "404: CAST_DWG_OBJECT_TO_OBJECT (LAYOUT)",
          "405: CAST_DWG_OBJECT_TO_OBJECT (LAYERFILTER)",
          "406: CAST_DWG_OBJECT_TO_OBJECT (VBA_PROJECT)",
          "407: CAST_DWG_OBJECT_TO_OBJECT (XRECORD)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405: CAST_DWG_OBJECT_TO_OBJECT (PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439: CAST_DWG_OBJECT_TO_OBJECT (MENTALRAYRENDERSETTINGS)",
          "440: CAST_DWG_OBJECT_TO_OBJECT (OBJECT_PTR)",
          "441: CAST_DWG_OBJECT_TO_OBJECT (PERSUBENTMGR)",
          "443: CAST_DWG_OBJECT_TO_OBJECT (RAPIDRTRENDERSETTINGS)",
          "444: CAST_DWG_OBJECT_TO_OBJECT (RENDERSETTINGS)",
          "445: CAST_DWG_OBJECT_TO_OBJECT (SECTION_MANAGER)",
          "",
          "[Removed Lines]",
          "442: CAST_DWG_OBJECT_TO_OBJECT (PLOTSETTINGS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "891:   dwg_get_OBJECT (obj_layer_index, LAYER_INDEX)",
          "892:   dwg_get_OBJECT (obj_layerfilter, LAYERFILTER)",
          "893:   dwg_get_OBJECT (obj_layout, LAYOUT)",
          "894:   dwg_get_OBJECT (obj_mleaderstyle, MLEADERSTYLE)",
          "895:   dwg_get_OBJECT (obj_placeholder, PLACEHOLDER)",
          "896:   dwg_get_OBJECT (obj_rastervariables, RASTERVARIABLES)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "894:   dwg_get_OBJECT (obj_plotsettings, PLOTSETTINGS)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "915:   dwg_get_OBJECT (obj_mentalrayrendersettings, MENTALRAYRENDERSETTINGS)",
          "916:   dwg_get_OBJECT (obj_object_ptr, OBJECT_PTR)",
          "917:   dwg_get_OBJECT (obj_persubentmgr, PERSUBENTMGR)",
          "919:   dwg_get_OBJECT (obj_proxy, PROXY_OBJECT)",
          "920:   dwg_get_OBJECT (obj_rapidrtrendersettings, RAPIDRTRENDERSETTINGS)",
          "921:   dwg_get_OBJECT (obj_rendersettings, RENDERSETTINGS)",
          "",
          "[Removed Lines]",
          "918:   dwg_get_OBJECT (obj_plotsettings, PLOTSETTINGS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dynapi.c||src/dynapi.c": [
          "File: src/dynapi.c -> src/dynapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2: #line 1380 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "2: #line 1381 \"gen-dynapi.pl\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5862: static const Dwg_DYNAPI_field _dwg_LAYOUT_fields[] = {",
          "5863:   { \"parent\", \"struct _dwg_object_object*\", sizeof (void *),  OFF (struct _dwg_object_LAYOUT, parent),",
          "5864:     1,1,0, 0 },",
          "5919:   { \"layout_name\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_LAYOUT, layout_name),",
          "5920:     1,1,1, 1 },",
          "5921:   { \"tab_order\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, tab_order),",
          "",
          "[Removed Lines]",
          "5865:   { \"printer_cfg_file\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_LAYOUT, printer_cfg_file),",
          "5866:     1,1,1, 1 },",
          "5867:   { \"paper_size\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_LAYOUT, paper_size),",
          "5868:     1,1,1, 4 },",
          "5869:   { \"canonical_media_name\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_LAYOUT, canonical_media_name),",
          "5870:     1,1,1, 0 },",
          "5871:   { \"plot_flags\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, plot_flags),",
          "5872:     0,0,0, 70 },",
          "5873:   { \"left_margin\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, left_margin),",
          "5874:     0,0,0, 40 },",
          "5875:   { \"bottom_margin\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, bottom_margin),",
          "5876:     0,0,0, 41 },",
          "5877:   { \"right_margin\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, right_margin),",
          "5878:     0,0,0, 42 },",
          "5879:   { \"top_margin\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, top_margin),",
          "5880:     0,0,0, 43 },",
          "5881:   { \"paper_width\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, paper_width),",
          "5882:     0,0,0, 44 },",
          "5883:   { \"paper_height\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, paper_height),",
          "5884:     0,0,0, 45 },",
          "5885:   { \"plot_origin\", \"2BD_1\", sizeof (BITCODE_2BD_1),  OFF (struct _dwg_object_LAYOUT, plot_origin),",
          "5886:     1,0,0, 46 },",
          "5887:   { \"plot_paper_unit\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, plot_paper_unit),",
          "5888:     0,0,0, 72 },",
          "5889:   { \"plot_rotation_mode\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, plot_rotation_mode),",
          "5890:     0,0,0, 73 },",
          "5891:   { \"plot_type\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, plot_type),",
          "5892:     0,0,0, 74 },",
          "5893:   { \"plot_window_ll\", \"2BD_1\", sizeof (BITCODE_2BD_1),  OFF (struct _dwg_object_LAYOUT, plot_window_ll),",
          "5894:     1,0,0, 48 },",
          "5895:   { \"plot_window_ur\", \"2BD_1\", sizeof (BITCODE_2BD_1),  OFF (struct _dwg_object_LAYOUT, plot_window_ur),",
          "5896:     1,0,0, 140 },",
          "5897:   { \"plotview_name\", \"TV\", sizeof (BITCODE_T),  OFF (struct _dwg_object_LAYOUT, plotview_name),",
          "5898:     1,1,1, 6 },",
          "5899:   { \"plotview\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_object_LAYOUT, plotview),",
          "5900:     1,0,0, 6 },",
          "5901:   { \"paper_units\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, paper_units),",
          "5902:     0,0,0, 142 },",
          "5903:   { \"drawing_units\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, drawing_units),",
          "5904:     0,0,0, 143 },",
          "5905:   { \"stylesheet\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_LAYOUT, stylesheet),",
          "5906:     1,1,1, 7 },",
          "5907:   { \"std_scale_type\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, std_scale_type),",
          "5908:     0,0,0, 75 },",
          "5909:   { \"std_scale_factor\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_LAYOUT, std_scale_factor),",
          "5910:     0,0,0, 147 },",
          "5911:   { \"paper_image_origin\", \"2BD_1\", sizeof (BITCODE_2BD_1),  OFF (struct _dwg_object_LAYOUT, paper_image_origin),",
          "5912:     1,0,0, 148 },",
          "5913:   { \"shadeplot_mode\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, shadeplot_mode),",
          "5914:     0,0,0, 76 },",
          "5915:   { \"shadeplot_reslevel\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, shadeplot_reslevel),",
          "5916:     0,0,0, 77 },",
          "5917:   { \"shadeplot_customdpi\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_LAYOUT, shadeplot_customdpi),",
          "5918:     0,0,0, 78 },",
          "",
          "[Added Lines]",
          "5865:   { \"plotsettings\", \"Dwg_Object_PLOTSETTINGS\", sizeof (Dwg_Object_PLOTSETTINGS),  OFF (struct _dwg_object_LAYOUT, plotsettings),",
          "5866:     0,0,0, 0 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5942:     1,0,0, 14 },",
          "5943:   { \"EXTMAX\", \"3DPOINT\", sizeof (BITCODE_3DPOINT),  OFF (struct _dwg_object_LAYOUT, EXTMAX),",
          "5944:     1,0,0, 15 },",
          "5947:   { \"block_header\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_object_LAYOUT, block_header),",
          "5948:     1,0,0, 330 },",
          "5949:   { \"active_viewport\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_object_LAYOUT, active_viewport),",
          "",
          "[Removed Lines]",
          "5945:   { \"visualstyle\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_object_LAYOUT, visualstyle),",
          "5946:     1,0,0, 0 },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6519:   { \"parent\", \"struct _dwg_object_object*\", sizeof (void *),  OFF (struct _dwg_object_PLOTSETTINGS, parent),",
          "6520:     1,1,0, 0 },",
          "6521:   { \"printer_cfg_file\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_PLOTSETTINGS, printer_cfg_file),",
          "6523:   { \"paper_size\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_PLOTSETTINGS, paper_size),",
          "6525:   { \"canonical_media_name\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_PLOTSETTINGS, canonical_media_name),",
          "6526:     1,1,1, 4 },",
          "6527:   { \"plot_flags\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, plot_flags),",
          "6528:     0,0,0, 70 },",
          "6531:   { \"plotview\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_object_PLOTSETTINGS, plotview),",
          "6532:     1,0,0, 6 },",
          "6533:   { \"left_margin\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_PLOTSETTINGS, left_margin),",
          "6534:     0,0,0, 40 },",
          "6535:   { \"bottom_margin\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_PLOTSETTINGS, bottom_margin),",
          "",
          "[Removed Lines]",
          "6522:     1,1,1, 2 },",
          "6524:     1,1,1, 3 },",
          "6529:   { \"plotview_name\", \"TV\", sizeof (BITCODE_T),  OFF (struct _dwg_object_PLOTSETTINGS, plotview_name),",
          "6530:     1,1,1, 6 },",
          "",
          "[Added Lines]",
          "6468:     1,1,1, 1 },",
          "6470:     1,1,1, 2 },",
          "6477:   { \"plotview_name\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_PLOTSETTINGS, plotview_name),",
          "6478:     1,1,1, 6 },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6548:     1,0,0, 48 },",
          "6549:   { \"plot_window_ur\", \"2BD_1\", sizeof (BITCODE_2BD_1),  OFF (struct _dwg_object_PLOTSETTINGS, plot_window_ur),",
          "6550:     1,0,0, 140 },",
          "6555:   { \"plot_paper_unit\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, plot_paper_unit),",
          "6556:     0,0,0, 72 },",
          "6557:   { \"plot_rotation_mode\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, plot_rotation_mode),",
          "6558:     0,0,0, 73 },",
          "6559:   { \"plot_type\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, plot_type),",
          "6560:     0,0,0, 74 },",
          "6561:   { \"stylesheet\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_object_PLOTSETTINGS, stylesheet),",
          "6562:     1,1,1, 7 },",
          "6563:   { \"std_scale_type\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, std_scale_type),",
          "",
          "[Removed Lines]",
          "6551:   { \"paper_units\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_PLOTSETTINGS, paper_units),",
          "6552:     0,0,0, 142 },",
          "6553:   { \"drawing_units\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_PLOTSETTINGS, drawing_units),",
          "6554:     0,0,0, 143 },",
          "",
          "[Added Lines]",
          "6503:   { \"paper_units\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_PLOTSETTINGS, paper_units),",
          "6504:     0,0,0, 142 },",
          "6505:   { \"drawing_units\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_object_PLOTSETTINGS, drawing_units),",
          "6506:     0,0,0, 143 },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6566:     0,0,0, 147 },",
          "6567:   { \"paper_image_origin\", \"2BD_1\", sizeof (BITCODE_2BD_1),  OFF (struct _dwg_object_PLOTSETTINGS, paper_image_origin),",
          "6568:     1,0,0, 148 },",
          "6570:     0,0,0, 76 },",
          "6571:   { \"shadeplot_reslevel\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, shadeplot_reslevel),",
          "6572:     0,0,0, 77 },",
          "",
          "[Removed Lines]",
          "6569:   { \"shadeplot_mode\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, shadeplot_mode),",
          "",
          "[Added Lines]",
          "6515:   { \"shadeplot_type\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_object_PLOTSETTINGS, shadeplot_type),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10046: };",
          "10049: static int",
          "10050: _name_inl_cmp (const void *restrict key, const void *restrict elem)",
          "10051: {",
          "",
          "[Removed Lines]",
          "10048: #line 1464 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "9994: #line 1465 \"gen-dynapi.pl\"",
          "",
          "---------------"
        ],
        "src/gen-dynapi.pl||src/gen-dynapi.pl": [
          "File: src/gen-dynapi.pl -> src/gen-dynapi.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:         $f = $1;",
          "301:         $n = 'MLEADER_AnnotContext';",
          "302:       }",
          "303:       embedded_struct ('cellstyle', 'TABLESTYLE_Cell');",
          "304:       embedded_struct ('body', 'ACTIONBODY');",
          "305:       embedded_struct ('ldata', 'LinkedData');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:       embedded_struct ('plotsettings', 'PLOTSETTINGS');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400: $DXF{'DIMASSOC'}->{'intsect_gsmarker'} = 92;",
          "401: $DXF{'DIMASSOC_Ref'}->{'xrefpaths'} = 301;",
          "402: $DXF{'DIMSTYLE'}->{'flag'} = 70;",
          "403: $DXF{'TABLE_Cell'}->{'cell_flag_override'} = 177;",
          "404: # $DXF{'DIMENSION_ORDINATE'}->{'def_pt'} = 10;",
          "405: # $DXF{'DIMENSION_ORDINATE'}->{'feature_location_pt'} = 13;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404: $DXF{'PLOTSETTINGS'}->{'plotview'} = 6;",
          "405: $DXF{'PLOTSETTINGS'}->{'shadeplot'} = 333;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1377: # NOTE: in the 2 #line's below use __LINE__ + 1",
          "1378: __DATA__",
          "",
          "[Removed Lines]",
          "1380: #line 1380 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "1383: #line 1381 \"gen-dynapi.pl\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1461: @@list subclasses@@",
          "1462: };",
          "1465: static int",
          "1466: _name_inl_cmp (const void *restrict key, const void *restrict elem)",
          "1467: {",
          "",
          "[Removed Lines]",
          "1464: #line 1464 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "1467: #line 1465 \"gen-dynapi.pl\"",
          "",
          "---------------"
        ],
        "src/in_dxf.c||src/in_dxf.c": [
          "File: src/in_dxf.c -> src/in_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6502:   if (obj->fixedtype == DWG_TYPE_LAYOUT)",
          "6503:     {",
          "6504:       Dwg_Object_LAYOUT *_o = obj->tio.object->tio.LAYOUT;",
          "6505:       _o->paper_units = 1.0; // default",
          "6506:     }",
          "6507:   else if (obj->fixedtype == DWG_TYPE_DIMSTYLE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6505:       _o->plotsettings.paper_units = 1.0; // default",
          "6506:     }",
          "6507:   else if (obj->fixedtype == DWG_TYPE_PLOTSETTINGS)",
          "6508:     {",
          "6509:       Dwg_Object_PLOTSETTINGS *_o = obj->tio.object->tio.PLOTSETTINGS;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7098:           else if (pair->code == 70 && obj->fixedtype == DWG_TYPE_LAYOUT)",
          "7099:             {",
          "7100:               Dwg_Object_LAYOUT *_o = obj->tio.object->tio.LAYOUT;",
          "7102:                 {",
          "7105:                 }",
          "7106:               else if (strEQc (subclass, \"AcDbLayout\"))",
          "7107:                 {",
          "7108:                   _o->layout_flags = pair->value.u;",
          "7110:                 }",
          "7111:               else",
          "7112:                 {",
          "7113:                   LOG_WARN (\"Unhandled LAYOUT.70 in subclass %s\", subclass);",
          "7114:                   _o->layout_flags = pair->value.u;",
          "7116:                 }",
          "7117:               break;",
          "7118:             }",
          "",
          "[Removed Lines]",
          "7101:               if (strEQc (subclass, \"AcDbPlotSettings\"))",
          "7103:                   _o->plot_flags = pair->value.u;",
          "7104:                   LOG_TRACE (\"LAYOUT.plot_flags = 0x%x [BSx 70]\", pair->value.u);",
          "7109:                   LOG_TRACE (\"LAYOUT.layout_flags = %d [BSx 70]\", pair->value.u);",
          "7115:                   LOG_TRACE (\"LAYOUT.layout_flags = %d [BSx 70]\", pair->value.u);",
          "",
          "[Added Lines]",
          "7106:               if (strEQc (subclass, \"AcDbPlotSettings\")) // todo: embedded struct",
          "7108:                   _o->plotsettings.plot_flags = pair->value.i;",
          "7109:                   LOG_TRACE (\"LAYOUT.plotsettings.plot_flags = 0x%x [BSx 70]\", pair->value.i);",
          "7114:                   LOG_TRACE (\"LAYOUT.layout_flags = 0x%x [BSx 70]\", pair->value.u);",
          "7120:                   LOG_TRACE (\"LAYOUT.layout_flags = 0x%x [BSx 70]\", pair->value.u);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7394:               Dwg_Object_LAYOUT *_o = obj->tio.object->tio.LAYOUT;",
          "7395:               if (strEQc (subclass, \"AcDbPlotSettings\"))",
          "7396:                 {",
          "7400:                              obj->name, pair->value.s);",
          "7401:                 }",
          "7402:               else if (strEQc (subclass, \"AcDbLayout\"))",
          "",
          "[Removed Lines]",
          "7397:                   dwg_dynapi_entity_set_value (_obj, obj->name, \"page_setup_name\",",
          "7398:                                                &pair->value, 1);",
          "7399:                   LOG_TRACE (\"%s.page_setup_name = %s [T 1]\\n\",",
          "",
          "[Added Lines]",
          "7402:                   const Dwg_DYNAPI_field *f = dwg_dynapi_entity_field (\"PLOTSETTINGS\", \"printer_cfg_file\");",
          "7403:                   dwg_dynapi_field_set_value (dwg, &_o->plotsettings, f, &pair->value, 1);",
          "7404:                   LOG_TRACE (\"%s.plotsettings.printer_cfg_file = %s [T 1]\\n\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7410:                 LOG_WARN (\"Unhandled LAYOUT.1 in subclass %s\", subclass);",
          "7411:               goto next_pair;",
          "7412:             }",
          "7413:           else if (pair->code == 370 && obj->fixedtype == DWG_TYPE_LAYER)",
          "7414:             {",
          "7415:               Dwg_Object_LAYER *layer = obj->tio.object->tio.LAYER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7418:           else if (pair->code == 2 && obj->fixedtype == DWG_TYPE_LAYOUT)",
          "7419:             {",
          "7420:               Dwg_Object_LAYOUT *_o = obj->tio.object->tio.LAYOUT;",
          "7421:               const Dwg_DYNAPI_field *f = dwg_dynapi_entity_field (\"PLOTSETTINGS\", \"paper_size\");",
          "7422:               dwg_dynapi_field_set_value (dwg, &_o->plotsettings, f, &pair->value, 1);",
          "7423:               LOG_TRACE (\"%s.plotsettings.paper_size = %s [T 2]\\n\",",
          "7424:                          obj->name, pair->value.s);",
          "7425:               goto next_pair;",
          "7426:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7417:               LOG_TRACE (\"LAYER.linewt = %d\\n\", layer->linewt);",
          "7418:               layer->flag |= layer->linewt << 5;",
          "7419:               LOG_TRACE (\"LAYER.flag = 0x%x [BS 70]\\n\", layer->flag);",
          "7420:             }",
          "7421:           else if (pair->code == 49 && obj->fixedtype == DWG_TYPE_LTYPE)",
          "7422:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7434:               goto next_pair;",
          "",
          "---------------"
        ],
        "test/unit-testing/cellstylemap.c||test/unit-testing/cellstylemap.c": [
          "File: test/unit-testing/cellstylemap.c -> test/unit-testing/cellstylemap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:         CHK_SUBCLASS_TYPE (cells[i].cellstyle, CellStyle, data_flags, BS);",
          "26:         if (!cells[i].cellstyle.data_flags)",
          "27:           continue;",
          "30:         CHK_SUBCLASS_CMC (cells[i].cellstyle, CellStyle, bg_color);",
          "31:         CHK_SUBCLASS_TYPE (cells[i].cellstyle, CellStyle, content_layout, BL);",
          "35:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, value_data_type, BL);",
          "36:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, value_unit_type, BL);",
          "37:         CHK_SUBCLASS_UTF8TEXT (cells[i].cellstyle.content_format, ContentFormat, value_format_string);",
          "38:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, rotation, BD);",
          "39:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, block_scale, BD);",
          "41:         CHK_SUBCLASS_CMC (cells[i].cellstyle.content_format, ContentFormat, content_color);",
          "42:         CHK_SUBCLASS_H (cells[i].cellstyle.content_format, ContentFormat, text_style);",
          "43:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, text_height, BD);",
          "",
          "[Removed Lines]",
          "28:         CHK_SUBCLASS_TYPE (cells[i].cellstyle, CellStyle, property_override_flags, BL);",
          "29:         CHK_SUBCLASS_TYPE (cells[i].cellstyle, CellStyle, merge_flags, BL);",
          "32:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, property_override_flags, BL);",
          "33:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, property_override_flags, BL);",
          "34:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, property_flags, BL);",
          "40:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, cell_alignment, BL);",
          "",
          "[Added Lines]",
          "28:         CHK_SUBCLASS_TYPE (cells[i].cellstyle, CellStyle, property_override_flags, BLx);",
          "29:         CHK_SUBCLASS_TYPE (cells[i].cellstyle, CellStyle, merge_flags, BLx);",
          "32:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, property_override_flags, BLx);",
          "33:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, property_override_flags, BLx);",
          "34:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, property_flags, BLx);",
          "40:         CHK_SUBCLASS_TYPE (cells[i].cellstyle.content_format, ContentFormat, cell_alignment, BLx);",
          "",
          "---------------"
        ],
        "test/unit-testing/common.c||test/unit-testing/common.c": [
          "File: test/unit-testing/common.c -> test/unit-testing/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123: #define CHK_SUBCLASS_TYPE(ptr, name, field, typ)                              \\",
          "1124:   {                                                                           \\",
          "1125:     BITCODE_##typ value;                                                      \\",
          "1127:       fail (#name \".\" #field);                                                \\",
          "1128:     else                                                                      \\",
          "1129:       {                                                                       \\",
          "",
          "[Removed Lines]",
          "1126:     if (!dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL))       \\",
          "",
          "[Added Lines]",
          "1126:     bool _ok;                                                                 \\",
          "1127:     if (dwg_dynapi_entity_fields (#name))                                     \\",
          "1128:       _ok = dwg_dynapi_entity_value (&ptr, #name, #field, &value, NULL);      \\",
          "1129:     else                                                                      \\",
          "1130:       _ok = dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL);    \\",
          "1131:     if (!_ok)                                                                 \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1142: #define CHK_SUBCLASS_3RD(ptr, name, field)                                    \\",
          "1143:   {                                                                           \\",
          "1144:     BITCODE_3RD value;                                                        \\",
          "1146:       fail (#name \".\" #field);                                                \\",
          "1147:     else                                                                      \\",
          "1148:       {                                                                       \\",
          "",
          "[Removed Lines]",
          "1145:     if (!dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL))       \\",
          "",
          "[Added Lines]",
          "1150:     bool _ok;                                                                 \\",
          "1151:     if (dwg_dynapi_entity_fields (#name))                                     \\",
          "1152:       _ok = dwg_dynapi_entity_value (&ptr, #name, #field, &value, NULL);      \\",
          "1153:     else                                                                      \\",
          "1154:       _ok = dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL);    \\",
          "1155:     if (!_ok)                                                                 \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1163: #define CHK_SUBCLASS_2RD(ptr, name, field)                                    \\",
          "1164:   {                                                                           \\",
          "1165:     BITCODE_2RD value;                                                        \\",
          "1167:       fail (#name \".\" #field);                                                \\",
          "1168:     else                                                                      \\",
          "1169:       {                                                                       \\",
          "",
          "[Removed Lines]",
          "1166:     if (!dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL))       \\",
          "",
          "[Added Lines]",
          "1176:     bool _ok;                                                                 \\",
          "1177:     if (dwg_dynapi_entity_fields (#name))                                     \\",
          "1178:       _ok = dwg_dynapi_entity_value (&ptr, #name, #field, &value, NULL);      \\",
          "1179:     else                                                                      \\",
          "1180:       _ok = dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL);    \\",
          "1181:     if (!_ok)                                                                 \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1181: #define CHK_SUBCLASS_H(ptr, name, field)                                      \\",
          "1182:   {                                                                           \\",
          "1183:     BITCODE_H value;                                                          \\",
          "1185:       fail (#name \".\" #field);                                                \\",
          "1186:     else                                                                      \\",
          "1187:       {                                                                       \\",
          "",
          "[Removed Lines]",
          "1184:     if (!dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL))       \\",
          "",
          "[Added Lines]",
          "1199:     bool _ok;                                                                 \\",
          "1200:     if (dwg_dynapi_entity_fields (#name))                                     \\",
          "1201:       _ok = dwg_dynapi_entity_value (&ptr, #name, #field, &value, NULL);      \\",
          "1202:     else                                                                      \\",
          "1203:       _ok = dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL);    \\",
          "1204:     if (!_ok)                                                                 \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1239:     }",
          "1240: #define CHK_SUBCLASS_UTF8TEXT(ptr, name, field)                               \\",
          "1241:   {                                                                           \\",
          "1244:       {                                                                       \\",
          "1245:         if (g_counter > g_countmax)                                           \\",
          "1246:           pass ();                                                            \\",
          "1247:         else                                                                  \\",
          "1249:       }                                                                       \\",
          "1250:     else                                                                      \\",
          "1251:       {                                                                       \\",
          "1252:         if (dwg_version < R_2007)                                             \\",
          "1254:         else                                                                  \\",
          "1255:           fail (#name \".\" #field);                                            \\",
          "1256:       }                                                                       \\",
          "",
          "[Removed Lines]",
          "1242:     BITCODE_TV field;                                                         \\",
          "1243:     if (dwg_dynapi_subclass_value (&ptr, #name, #field, &field, NULL))        \\",
          "1248:           ok (#name \".\" #field \":\\t\\\"%s\\\"\", field);                           \\",
          "1253:           fail (#name \".\" #field \":\\t\\\"%s\\\"\", field);                         \\",
          "",
          "[Added Lines]",
          "1262:     BITCODE_TV value;                                                         \\",
          "1263:     bool _ok;                                                                 \\",
          "1264:     if (dwg_dynapi_entity_fields (#name))                                     \\",
          "1265:       _ok = dwg_dynapi_entity_value (&ptr, #name, #field, &value, NULL);      \\",
          "1266:     else                                                                      \\",
          "1267:       _ok = dwg_dynapi_subclass_value (&ptr, #name, #field, &value, NULL);    \\",
          "1268:     if (_ok)                                                                  \\",
          "1273:           ok (#name \".\" #field \":\\t\\\"%s\\\"\", value);                           \\",
          "1278:           fail (#name \".\" #field \":\\t\\\"%s\\\"\", value);                         \\",
          "",
          "---------------"
        ],
        "test/unit-testing/dynapi_test.c||test/unit-testing/dynapi_test.c": [
          "File: test/unit-testing/dynapi_test.c -> test/unit-testing/dynapi_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34590:     else",
          "34591:         fail (\"LAYOUT.block_header [H]\");",
          "34592:   }",
          "34633:   {",
          "34634:     BITCODE_BS layout_flags;",
          "34635:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"layout_flags\", &layout_flags, NULL)",
          "",
          "[Removed Lines]",
          "34593:   {",
          "34594:     BITCODE_BD bottom_margin;",
          "34595:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"bottom_margin\", &bottom_margin, NULL)",
          "34596:         && bottom_margin == layout->bottom_margin)",
          "34597:       pass ();",
          "34598:     else",
          "34599:       fail (\"LAYOUT.bottom_margin [BD] %g != %g\", layout->bottom_margin, bottom_margin);",
          "34600:     bottom_margin++;",
          "34601:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"bottom_margin\", &bottom_margin, 0)",
          "34602:         && bottom_margin == layout->bottom_margin)",
          "34603:       pass ();",
          "34604:     else",
          "34605:       fail (\"LAYOUT.bottom_margin [BD] set+1 %g != %g\", layout->bottom_margin, bottom_margin);",
          "34606:     layout->bottom_margin--;",
          "34607:   }",
          "34608:   {",
          "34609:     BITCODE_T canonical_media_name;",
          "34610:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"canonical_media_name\", &canonical_media_name, NULL)",
          "34611:         && canonical_media_name",
          "34612:            ? strEQ ((char *)canonical_media_name, (char *)layout->canonical_media_name)",
          "34613:            : !layout->canonical_media_name)",
          "34614:       pass ();",
          "34615:     else",
          "34616:       fail (\"LAYOUT.canonical_media_name [T] '%s' <> '%s'\", canonical_media_name, layout->canonical_media_name);",
          "34617:   }",
          "34618:   {",
          "34619:     BITCODE_BD drawing_units;",
          "34620:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"drawing_units\", &drawing_units, NULL)",
          "34621:         && drawing_units == layout->drawing_units)",
          "34622:       pass ();",
          "34623:     else",
          "34624:       fail (\"LAYOUT.drawing_units [BD] %g != %g\", layout->drawing_units, drawing_units);",
          "34625:     drawing_units++;",
          "34626:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"drawing_units\", &drawing_units, 0)",
          "34627:         && drawing_units == layout->drawing_units)",
          "34628:       pass ();",
          "34629:     else",
          "34630:       fail (\"LAYOUT.drawing_units [BD] set+1 %g != %g\", layout->drawing_units, drawing_units);",
          "34631:     layout->drawing_units--;",
          "34632:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34655:     else",
          "34656:       fail (\"LAYOUT.layout_name [T] '%s' <> '%s'\", layout_name, layout->layout_name);",
          "34657:   }",
          "34673:   {",
          "34674:     BITCODE_H named_ucs;",
          "34675:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"named_ucs\", &named_ucs, NULL)",
          "",
          "[Removed Lines]",
          "34658:   {",
          "34659:     BITCODE_BD left_margin;",
          "34660:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"left_margin\", &left_margin, NULL)",
          "34661:         && left_margin == layout->left_margin)",
          "34662:       pass ();",
          "34663:     else",
          "34664:       fail (\"LAYOUT.left_margin [BD] %g != %g\", layout->left_margin, left_margin);",
          "34665:     left_margin++;",
          "34666:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"left_margin\", &left_margin, 0)",
          "34667:         && left_margin == layout->left_margin)",
          "34668:       pass ();",
          "34669:     else",
          "34670:       fail (\"LAYOUT.left_margin [BD] set+1 %g != %g\", layout->left_margin, left_margin);",
          "34671:     layout->left_margin--;",
          "34672:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34693:       fail (\"LAYOUT.num_viewports [BL] set+1 %u != %u\", layout->num_viewports, num_viewports);",
          "34694:     layout->num_viewports--;",
          "34695:   }",
          "34759:   {",
          "34760:     struct _dwg_object_object* parent;",
          "34761:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"parent\", &parent, NULL)",
          "",
          "[Removed Lines]",
          "34696:   {",
          "34697:     BITCODE_BD paper_height;",
          "34698:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"paper_height\", &paper_height, NULL)",
          "34699:         && paper_height == layout->paper_height)",
          "34700:       pass ();",
          "34701:     else",
          "34702:       fail (\"LAYOUT.paper_height [BD] %g != %g\", layout->paper_height, paper_height);",
          "34703:     paper_height++;",
          "34704:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"paper_height\", &paper_height, 0)",
          "34705:         && paper_height == layout->paper_height)",
          "34706:       pass ();",
          "34707:     else",
          "34708:       fail (\"LAYOUT.paper_height [BD] set+1 %g != %g\", layout->paper_height, paper_height);",
          "34709:     layout->paper_height--;",
          "34710:   }",
          "34711:   {",
          "34712:     BITCODE_2BD paper_image_origin;",
          "34713:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"paper_image_origin\", &paper_image_origin, NULL)",
          "34714:         && !memcmp (&paper_image_origin, &layout->paper_image_origin, sizeof (layout->paper_image_origin)))",
          "34715:         pass ();",
          "34716:     else",
          "34717:         fail (\"LAYOUT.paper_image_origin [2BD_1]\");",
          "34718:   }",
          "34719:   {",
          "34720:     BITCODE_T paper_size;",
          "34721:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"paper_size\", &paper_size, NULL)",
          "34722:         && paper_size",
          "34723:            ? strEQ ((char *)paper_size, (char *)layout->paper_size)",
          "34724:            : !layout->paper_size)",
          "34725:       pass ();",
          "34726:     else",
          "34727:       fail (\"LAYOUT.paper_size [T] '%s' <> '%s'\", paper_size, layout->paper_size);",
          "34728:   }",
          "34729:   {",
          "34730:     BITCODE_BD paper_units;",
          "34731:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"paper_units\", &paper_units, NULL)",
          "34732:         && paper_units == layout->paper_units)",
          "34733:       pass ();",
          "34734:     else",
          "34735:       fail (\"LAYOUT.paper_units [BD] %g != %g\", layout->paper_units, paper_units);",
          "34736:     paper_units++;",
          "34737:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"paper_units\", &paper_units, 0)",
          "34738:         && paper_units == layout->paper_units)",
          "34739:       pass ();",
          "34740:     else",
          "34741:       fail (\"LAYOUT.paper_units [BD] set+1 %g != %g\", layout->paper_units, paper_units);",
          "34742:     layout->paper_units--;",
          "34743:   }",
          "34744:   {",
          "34745:     BITCODE_BD paper_width;",
          "34746:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"paper_width\", &paper_width, NULL)",
          "34747:         && paper_width == layout->paper_width)",
          "34748:       pass ();",
          "34749:     else",
          "34750:       fail (\"LAYOUT.paper_width [BD] %g != %g\", layout->paper_width, paper_width);",
          "34751:     paper_width++;",
          "34752:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"paper_width\", &paper_width, 0)",
          "34753:         && paper_width == layout->paper_width)",
          "34754:       pass ();",
          "34755:     else",
          "34756:       fail (\"LAYOUT.paper_width [BD] set+1 %g != %g\", layout->paper_width, paper_width);",
          "34757:     layout->paper_width--;",
          "34758:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "34765:         fail (\"LAYOUT.parent [struct _dwg_object_object*]\");",
          "34766:   }",
          "34767:   {",
          "34839:         pass ();",
          "34840:     else",
          "34978:   }",
          "34979:   {",
          "34980:     BITCODE_BS tab_order;",
          "",
          "[Removed Lines]",
          "34768:     BITCODE_BS plot_flags;",
          "34769:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_flags\", &plot_flags, NULL)",
          "34770:         && plot_flags == layout->plot_flags)",
          "34771:       pass ();",
          "34772:     else",
          "34773:       fail (\"LAYOUT.plot_flags [BS] %hu != %hu\", layout->plot_flags, plot_flags);",
          "34774:     plot_flags++;",
          "34775:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"plot_flags\", &plot_flags, 0)",
          "34776:         && plot_flags == layout->plot_flags)",
          "34777:       pass ();",
          "34778:     else",
          "34779:       fail (\"LAYOUT.plot_flags [BS] set+1 %hu != %hu\", layout->plot_flags, plot_flags);",
          "34780:     layout->plot_flags--;",
          "34781:   }",
          "34782:   {",
          "34783:     BITCODE_2BD plot_origin;",
          "34784:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_origin\", &plot_origin, NULL)",
          "34785:         && !memcmp (&plot_origin, &layout->plot_origin, sizeof (layout->plot_origin)))",
          "34786:         pass ();",
          "34787:     else",
          "34788:         fail (\"LAYOUT.plot_origin [2BD_1]\");",
          "34789:   }",
          "34790:   {",
          "34791:     BITCODE_BS plot_paper_unit;",
          "34792:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_paper_unit\", &plot_paper_unit, NULL)",
          "34793:         && plot_paper_unit == layout->plot_paper_unit)",
          "34794:       pass ();",
          "34795:     else",
          "34796:       fail (\"LAYOUT.plot_paper_unit [BS] %hu != %hu\", layout->plot_paper_unit, plot_paper_unit);",
          "34797:     plot_paper_unit++;",
          "34798:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"plot_paper_unit\", &plot_paper_unit, 0)",
          "34799:         && plot_paper_unit == layout->plot_paper_unit)",
          "34800:       pass ();",
          "34801:     else",
          "34802:       fail (\"LAYOUT.plot_paper_unit [BS] set+1 %hu != %hu\", layout->plot_paper_unit, plot_paper_unit);",
          "34803:     layout->plot_paper_unit--;",
          "34804:   }",
          "34805:   {",
          "34806:     BITCODE_BS plot_rotation_mode;",
          "34807:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_rotation_mode\", &plot_rotation_mode, NULL)",
          "34808:         && plot_rotation_mode == layout->plot_rotation_mode)",
          "34809:       pass ();",
          "34810:     else",
          "34811:       fail (\"LAYOUT.plot_rotation_mode [BS] %hu != %hu\", layout->plot_rotation_mode, plot_rotation_mode);",
          "34812:     plot_rotation_mode++;",
          "34813:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"plot_rotation_mode\", &plot_rotation_mode, 0)",
          "34814:         && plot_rotation_mode == layout->plot_rotation_mode)",
          "34815:       pass ();",
          "34816:     else",
          "34817:       fail (\"LAYOUT.plot_rotation_mode [BS] set+1 %hu != %hu\", layout->plot_rotation_mode, plot_rotation_mode);",
          "34818:     layout->plot_rotation_mode--;",
          "34819:   }",
          "34820:   {",
          "34821:     BITCODE_BS plot_type;",
          "34822:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_type\", &plot_type, NULL)",
          "34823:         && plot_type == layout->plot_type)",
          "34824:       pass ();",
          "34825:     else",
          "34826:       fail (\"LAYOUT.plot_type [BS] %hu != %hu\", layout->plot_type, plot_type);",
          "34827:     plot_type++;",
          "34828:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"plot_type\", &plot_type, 0)",
          "34829:         && plot_type == layout->plot_type)",
          "34830:       pass ();",
          "34831:     else",
          "34832:       fail (\"LAYOUT.plot_type [BS] set+1 %hu != %hu\", layout->plot_type, plot_type);",
          "34833:     layout->plot_type--;",
          "34834:   }",
          "34835:   {",
          "34836:     BITCODE_2BD plot_window_ll;",
          "34837:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_window_ll\", &plot_window_ll, NULL)",
          "34838:         && !memcmp (&plot_window_ll, &layout->plot_window_ll, sizeof (layout->plot_window_ll)))",
          "34841:         fail (\"LAYOUT.plot_window_ll [2BD_1]\");",
          "34842:   }",
          "34843:   {",
          "34844:     BITCODE_2BD plot_window_ur;",
          "34845:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plot_window_ur\", &plot_window_ur, NULL)",
          "34846:         && !memcmp (&plot_window_ur, &layout->plot_window_ur, sizeof (layout->plot_window_ur)))",
          "34847:         pass ();",
          "34848:     else",
          "34849:         fail (\"LAYOUT.plot_window_ur [2BD_1]\");",
          "34850:   }",
          "34851:   {",
          "34852:     BITCODE_H plotview;",
          "34853:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plotview\", &plotview, NULL)",
          "34854:         && !memcmp (&plotview, &layout->plotview, sizeof (layout->plotview)))",
          "34855:         pass ();",
          "34856:     else",
          "34857:         fail (\"LAYOUT.plotview [H]\");",
          "34858:   }",
          "34859:   {",
          "34860:     BITCODE_TV plotview_name;",
          "34861:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plotview_name\", &plotview_name, NULL)",
          "34862:         && plotview_name",
          "34863:            ? strEQ ((char *)plotview_name, (char *)layout->plotview_name)",
          "34864:            : !layout->plotview_name)",
          "34865:       pass ();",
          "34866:     else",
          "34867:       fail (\"LAYOUT.plotview_name [TV] '%s' <> '%s'\", plotview_name, layout->plotview_name);",
          "34868:   }",
          "34869:   {",
          "34870:     BITCODE_T printer_cfg_file;",
          "34871:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"printer_cfg_file\", &printer_cfg_file, NULL)",
          "34872:         && printer_cfg_file",
          "34873:            ? strEQ ((char *)printer_cfg_file, (char *)layout->printer_cfg_file)",
          "34874:            : !layout->printer_cfg_file)",
          "34875:       pass ();",
          "34876:     else",
          "34877:       fail (\"LAYOUT.printer_cfg_file [T] '%s' <> '%s'\", printer_cfg_file, layout->printer_cfg_file);",
          "34878:   }",
          "34879:   {",
          "34880:     BITCODE_BD right_margin;",
          "34881:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"right_margin\", &right_margin, NULL)",
          "34882:         && right_margin == layout->right_margin)",
          "34883:       pass ();",
          "34884:     else",
          "34885:       fail (\"LAYOUT.right_margin [BD] %g != %g\", layout->right_margin, right_margin);",
          "34886:     right_margin++;",
          "34887:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"right_margin\", &right_margin, 0)",
          "34888:         && right_margin == layout->right_margin)",
          "34889:       pass ();",
          "34890:     else",
          "34891:       fail (\"LAYOUT.right_margin [BD] set+1 %g != %g\", layout->right_margin, right_margin);",
          "34892:     layout->right_margin--;",
          "34893:   }",
          "34894:   {",
          "34895:     BITCODE_BS shadeplot_customdpi;",
          "34896:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"shadeplot_customdpi\", &shadeplot_customdpi, NULL)",
          "34897:         && shadeplot_customdpi == layout->shadeplot_customdpi)",
          "34898:       pass ();",
          "34899:     else",
          "34900:       fail (\"LAYOUT.shadeplot_customdpi [BS] %hu != %hu\", layout->shadeplot_customdpi, shadeplot_customdpi);",
          "34901:     shadeplot_customdpi++;",
          "34902:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"shadeplot_customdpi\", &shadeplot_customdpi, 0)",
          "34903:         && shadeplot_customdpi == layout->shadeplot_customdpi)",
          "34904:       pass ();",
          "34905:     else",
          "34906:       fail (\"LAYOUT.shadeplot_customdpi [BS] set+1 %hu != %hu\", layout->shadeplot_customdpi, shadeplot_customdpi);",
          "34907:     layout->shadeplot_customdpi--;",
          "34908:   }",
          "34909:   {",
          "34910:     BITCODE_BS shadeplot_mode;",
          "34911:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"shadeplot_mode\", &shadeplot_mode, NULL)",
          "34912:         && shadeplot_mode == layout->shadeplot_mode)",
          "34913:       pass ();",
          "34914:     else",
          "34915:       fail (\"LAYOUT.shadeplot_mode [BS] %hu != %hu\", layout->shadeplot_mode, shadeplot_mode);",
          "34916:     shadeplot_mode++;",
          "34917:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"shadeplot_mode\", &shadeplot_mode, 0)",
          "34918:         && shadeplot_mode == layout->shadeplot_mode)",
          "34919:       pass ();",
          "34920:     else",
          "34921:       fail (\"LAYOUT.shadeplot_mode [BS] set+1 %hu != %hu\", layout->shadeplot_mode, shadeplot_mode);",
          "34922:     layout->shadeplot_mode--;",
          "34923:   }",
          "34924:   {",
          "34925:     BITCODE_BS shadeplot_reslevel;",
          "34926:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"shadeplot_reslevel\", &shadeplot_reslevel, NULL)",
          "34927:         && shadeplot_reslevel == layout->shadeplot_reslevel)",
          "34928:       pass ();",
          "34929:     else",
          "34930:       fail (\"LAYOUT.shadeplot_reslevel [BS] %hu != %hu\", layout->shadeplot_reslevel, shadeplot_reslevel);",
          "34931:     shadeplot_reslevel++;",
          "34932:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"shadeplot_reslevel\", &shadeplot_reslevel, 0)",
          "34933:         && shadeplot_reslevel == layout->shadeplot_reslevel)",
          "34934:       pass ();",
          "34935:     else",
          "34936:       fail (\"LAYOUT.shadeplot_reslevel [BS] set+1 %hu != %hu\", layout->shadeplot_reslevel, shadeplot_reslevel);",
          "34937:     layout->shadeplot_reslevel--;",
          "34938:   }",
          "34939:   {",
          "34940:     BITCODE_BD std_scale_factor;",
          "34941:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"std_scale_factor\", &std_scale_factor, NULL)",
          "34942:         && std_scale_factor == layout->std_scale_factor)",
          "34943:       pass ();",
          "34944:     else",
          "34945:       fail (\"LAYOUT.std_scale_factor [BD] %g != %g\", layout->std_scale_factor, std_scale_factor);",
          "34946:     std_scale_factor++;",
          "34947:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"std_scale_factor\", &std_scale_factor, 0)",
          "34948:         && std_scale_factor == layout->std_scale_factor)",
          "34949:       pass ();",
          "34950:     else",
          "34951:       fail (\"LAYOUT.std_scale_factor [BD] set+1 %g != %g\", layout->std_scale_factor, std_scale_factor);",
          "34952:     layout->std_scale_factor--;",
          "34953:   }",
          "34954:   {",
          "34955:     BITCODE_BS std_scale_type;",
          "34956:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"std_scale_type\", &std_scale_type, NULL)",
          "34957:         && std_scale_type == layout->std_scale_type)",
          "34958:       pass ();",
          "34959:     else",
          "34960:       fail (\"LAYOUT.std_scale_type [BS] %hu != %hu\", layout->std_scale_type, std_scale_type);",
          "34961:     std_scale_type++;",
          "34962:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"std_scale_type\", &std_scale_type, 0)",
          "34963:         && std_scale_type == layout->std_scale_type)",
          "34964:       pass ();",
          "34965:     else",
          "34966:       fail (\"LAYOUT.std_scale_type [BS] set+1 %hu != %hu\", layout->std_scale_type, std_scale_type);",
          "34967:     layout->std_scale_type--;",
          "34968:   }",
          "34969:   {",
          "34970:     BITCODE_T stylesheet;",
          "34971:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"stylesheet\", &stylesheet, NULL)",
          "34972:         && stylesheet",
          "34973:            ? strEQ ((char *)stylesheet, (char *)layout->stylesheet)",
          "34974:            : !layout->stylesheet)",
          "34975:       pass ();",
          "34976:     else",
          "34977:       fail (\"LAYOUT.stylesheet [T] '%s' <> '%s'\", stylesheet, layout->stylesheet);",
          "",
          "[Added Lines]",
          "34650:     Dwg_Object_PLOTSETTINGS plotsettings;",
          "34651:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"plotsettings\", &plotsettings, NULL)",
          "34652:         && !memcmp (&plotsettings, &layout->plotsettings, sizeof (layout->plotsettings)))",
          "34655:         fail (\"LAYOUT.plotsettings [Dwg_Object_PLOTSETTINGS]\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "34991:       fail (\"LAYOUT.tab_order [BS] set+1 %hu != %hu\", layout->tab_order, tab_order);",
          "34992:     layout->tab_order--;",
          "34993:   }",
          "35009:   {",
          "35010:     BITCODE_BD ucs_elevation;",
          "35011:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"ucs_elevation\", &ucs_elevation, NULL)",
          "",
          "[Removed Lines]",
          "34994:   {",
          "34995:     BITCODE_BD top_margin;",
          "34996:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"top_margin\", &top_margin, NULL)",
          "34997:         && top_margin == layout->top_margin)",
          "34998:       pass ();",
          "34999:     else",
          "35000:       fail (\"LAYOUT.top_margin [BD] %g != %g\", layout->top_margin, top_margin);",
          "35001:     top_margin++;",
          "35002:     if (dwg_dynapi_entity_set_value (layout, \"LAYOUT\", \"top_margin\", &top_margin, 0)",
          "35003:         && top_margin == layout->top_margin)",
          "35004:       pass ();",
          "35005:     else",
          "35006:       fail (\"LAYOUT.top_margin [BD] set+1 %g != %g\", layout->top_margin, top_margin);",
          "35007:     layout->top_margin--;",
          "35008:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "35046:     else",
          "35047:       fail (\"LAYOUT.viewports [H*] * %u num_viewports\", count);",
          "35048:   }",
          "35057:   if (failed && (is_class_unstable (\"LAYOUT\") || is_class_debugging (\"LAYOUT\")))",
          "35058:     {",
          "35059:       ok (\"%s failed %d tests (TODO unstable)\", \"LAYOUT\", failed);",
          "",
          "[Removed Lines]",
          "35049:   {",
          "35050:     BITCODE_H visualstyle;",
          "35051:     if (dwg_dynapi_entity_value (layout, \"LAYOUT\", \"visualstyle\", &visualstyle, NULL)",
          "35052:         && !memcmp (&visualstyle, &layout->visualstyle, sizeof (layout->visualstyle)))",
          "35053:         pass ();",
          "35054:     else",
          "35055:         fail (\"LAYOUT.visualstyle [H]\");",
          "35056:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "38654:         fail (\"PLOTSETTINGS.plotview [H]\");",
          "38655:   }",
          "38656:   {",
          "38658:     if (dwg_dynapi_entity_value (plotsettings, \"PLOTSETTINGS\", \"plotview_name\", &plotview_name, NULL)",
          "38659:         && plotview_name",
          "38660:            ? strEQ ((char *)plotview_name, (char *)plotsettings->plotview_name)",
          "38661:            : !plotsettings->plotview_name)",
          "38662:       pass ();",
          "38663:     else",
          "38665:   }",
          "38666:   {",
          "38667:     BITCODE_T printer_cfg_file;",
          "",
          "[Removed Lines]",
          "38657:     BITCODE_TV plotview_name;",
          "38664:       fail (\"PLOTSETTINGS.plotview_name [TV] '%s' <> '%s'\", plotview_name, plotsettings->plotview_name);",
          "",
          "[Added Lines]",
          "38312:     BITCODE_T plotview_name;",
          "38319:       fail (\"PLOTSETTINGS.plotview_name [T] '%s' <> '%s'\", plotview_name, plotsettings->plotview_name);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "38711:       fail (\"PLOTSETTINGS.shadeplot_customdpi [BS] set+1 %hu != %hu\", plotsettings->shadeplot_customdpi, shadeplot_customdpi);",
          "38712:     plotsettings->shadeplot_customdpi--;",
          "38713:   }",
          "38729:   {",
          "38730:     BITCODE_BS shadeplot_reslevel;",
          "38731:     if (dwg_dynapi_entity_value (plotsettings, \"PLOTSETTINGS\", \"shadeplot_reslevel\", &shadeplot_reslevel, NULL)",
          "",
          "[Removed Lines]",
          "38714:   {",
          "38715:     BITCODE_BS shadeplot_mode;",
          "38716:     if (dwg_dynapi_entity_value (plotsettings, \"PLOTSETTINGS\", \"shadeplot_mode\", &shadeplot_mode, NULL)",
          "38717:         && shadeplot_mode == plotsettings->shadeplot_mode)",
          "38718:       pass ();",
          "38719:     else",
          "38720:       fail (\"PLOTSETTINGS.shadeplot_mode [BS] %hu != %hu\", plotsettings->shadeplot_mode, shadeplot_mode);",
          "38721:     shadeplot_mode++;",
          "38722:     if (dwg_dynapi_entity_set_value (plotsettings, \"PLOTSETTINGS\", \"shadeplot_mode\", &shadeplot_mode, 0)",
          "38723:         && shadeplot_mode == plotsettings->shadeplot_mode)",
          "38724:       pass ();",
          "38725:     else",
          "38726:       fail (\"PLOTSETTINGS.shadeplot_mode [BS] set+1 %hu != %hu\", plotsettings->shadeplot_mode, shadeplot_mode);",
          "38727:     plotsettings->shadeplot_mode--;",
          "38728:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "38741:       fail (\"PLOTSETTINGS.shadeplot_reslevel [BS] set+1 %hu != %hu\", plotsettings->shadeplot_reslevel, shadeplot_reslevel);",
          "38742:     plotsettings->shadeplot_reslevel--;",
          "38743:   }",
          "38744:   {",
          "38745:     BITCODE_BD std_scale_factor;",
          "38746:     if (dwg_dynapi_entity_value (plotsettings, \"PLOTSETTINGS\", \"std_scale_factor\", &std_scale_factor, NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38384:   {",
          "38385:     BITCODE_BS shadeplot_type;",
          "38386:     if (dwg_dynapi_entity_value (plotsettings, \"PLOTSETTINGS\", \"shadeplot_type\", &shadeplot_type, NULL)",
          "38387:         && shadeplot_type == plotsettings->shadeplot_type)",
          "38388:       pass ();",
          "38389:     else",
          "38390:       fail (\"PLOTSETTINGS.shadeplot_type [BS] %hu != %hu\", plotsettings->shadeplot_type, shadeplot_type);",
          "38391:     shadeplot_type++;",
          "38392:     if (dwg_dynapi_entity_set_value (plotsettings, \"PLOTSETTINGS\", \"shadeplot_type\", &shadeplot_type, 0)",
          "38393:         && shadeplot_type == plotsettings->shadeplot_type)",
          "38394:       pass ();",
          "38395:     else",
          "38396:       fail (\"PLOTSETTINGS.shadeplot_type [BS] set+1 %hu != %hu\", plotsettings->shadeplot_type, shadeplot_type);",
          "38397:     plotsettings->shadeplot_type--;",
          "38398:   }",
          "",
          "---------------"
        ],
        "test/unit-testing/layer.c||test/unit-testing/layer.c": [
          "File: test/unit-testing/layer.c -> test/unit-testing/layer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "31:   dwg_obj_layer *layer = dwg_object_to_LAYER (obj);",
          "34:   CHK_ENTITY_UTF8TEXT_W_OBJ (layer, LAYER, name);",
          "35:   CHK_ENTITY_TYPE (layer, LAYER, used, RS);",
          "36:   CHK_ENTITY_TYPE (layer, LAYER, is_xref_ref, B);",
          "",
          "[Removed Lines]",
          "33:   CHK_ENTITY_TYPE (layer, LAYER, flag, BS);",
          "",
          "[Added Lines]",
          "33:   CHK_ENTITY_TYPE (layer, LAYER, flag, BSx);",
          "",
          "---------------"
        ],
        "test/unit-testing/layout.c||test/unit-testing/layout.c": [
          "File: test/unit-testing/layout.c -> test/unit-testing/layout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "41:   BITCODE_BS tab_order;",
          "42:   BITCODE_BS layout_flags;",
          "43:   BITCODE_3DPOINT INSBASE;",
          "",
          "[Removed Lines]",
          "10:   BITCODE_T printer_cfg_file;",
          "11:   BITCODE_T paper_size;",
          "12:   BITCODE_T canonical_media_name;",
          "13:   BITCODE_BS plot_flags;",
          "14:   BITCODE_BD left_margin;",
          "15:   BITCODE_BD bottom_margin;",
          "16:   BITCODE_BD right_margin;",
          "17:   BITCODE_BD top_margin;",
          "18:   BITCODE_BD paper_width;",
          "19:   BITCODE_BD paper_height;",
          "20:   BITCODE_2BD_1 plot_origin;",
          "21:   BITCODE_BS plot_paper_unit;",
          "22:   BITCODE_BS plot_rotation_mode;",
          "23:   BITCODE_BS plot_type;",
          "24:   BITCODE_2BD_1 plot_window_ll;",
          "25:   BITCODE_2BD_1 plot_window_ur;",
          "26:   BITCODE_H plotview;",
          "27:   BITCODE_TV plotview_name;",
          "28:   BITCODE_BD paper_units;",
          "29:   BITCODE_BD drawing_units;",
          "30:   BITCODE_TV stylesheet;",
          "31:   BITCODE_BS std_scale_type;",
          "32:   BITCODE_BD std_scale_factor;",
          "33:   BITCODE_2BD_1 paper_image_origin;",
          "34:   BITCODE_BS shadeplot_mode;",
          "35:   BITCODE_BS shadeplot_reslevel;",
          "36:   BITCODE_BS shadeplot_customdpi;",
          "37:   BITCODE_H  shadeplot;",
          "40:   BITCODE_T layout_name;",
          "",
          "[Added Lines]",
          "8:   Dwg_Object_PLOTSETTINGS plotsettings;",
          "9:   BITCODE_TV layout_name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "61:   dwg_obj_layout *layout = dwg_object_to_LAYOUT (obj);",
          "98:   CHK_ENTITY_TYPE (layout, LAYOUT, tab_order, BS);",
          "99:   CHK_ENTITY_TYPE (layout, LAYOUT, layout_flags, BSx);",
          "100:   CHK_ENTITY_3RD (layout, LAYOUT, INSBASE);",
          "",
          "[Removed Lines]",
          "63:   CHK_ENTITY_UTF8TEXT (layout, LAYOUT, printer_cfg_file);",
          "64:   CHK_ENTITY_UTF8TEXT (layout, LAYOUT, paper_size);",
          "65:   CHK_ENTITY_UTF8TEXT (layout, LAYOUT, canonical_media_name);",
          "66:   CHK_ENTITY_UTF8TEXT (layout, LAYOUT, stylesheet);",
          "67:   CHK_ENTITY_UTF8TEXT (layout, LAYOUT, plotview_name);",
          "68:   CHK_ENTITY_H (layout, LAYOUT, plotview);",
          "70:   CHK_ENTITY_TYPE (layout, LAYOUT, plot_flags, BSx);",
          "71:   CHK_ENTITY_TYPE (layout, LAYOUT, left_margin, BD);",
          "72:   CHK_ENTITY_TYPE (layout, LAYOUT, bottom_margin, BD);",
          "73:   CHK_ENTITY_TYPE (layout, LAYOUT, right_margin, BD);",
          "74:   CHK_ENTITY_TYPE (layout, LAYOUT, top_margin, BD);",
          "75:   CHK_ENTITY_TYPE (layout, LAYOUT, paper_width, BD);",
          "76:   CHK_ENTITY_TYPE (layout, LAYOUT, paper_height, BD);",
          "77:   CHK_ENTITY_2RD (layout, LAYOUT, plot_origin);",
          "78:   CHK_ENTITY_TYPE (layout, LAYOUT, plot_paper_unit, BS);",
          "79:   CHK_ENTITY_MAX (layout, LAYOUT, plot_paper_unit, BS, 2);",
          "80:   CHK_ENTITY_TYPE (layout, LAYOUT, plot_rotation_mode, BS);",
          "81:   CHK_ENTITY_MAX (layout, LAYOUT, plot_rotation_mode, BS, 3);",
          "82:   CHK_ENTITY_TYPE (layout, LAYOUT, plot_type, BS);",
          "83:   CHK_ENTITY_2RD (layout, LAYOUT, plot_window_ll);",
          "84:   CHK_ENTITY_2RD (layout, LAYOUT, plot_window_ur);",
          "85:   CHK_ENTITY_TYPE (layout, LAYOUT, paper_units, BD);",
          "86:   CHK_ENTITY_TYPE (layout, LAYOUT, drawing_units, BD);",
          "87:   CHK_ENTITY_TYPE (layout, LAYOUT, std_scale_type, BS);",
          "88:   CHK_ENTITY_TYPE (layout, LAYOUT, std_scale_factor, BD);",
          "89:   CHK_ENTITY_2RD (layout, LAYOUT, paper_image_origin);",
          "90:   CHK_ENTITY_TYPE (layout, LAYOUT, shadeplot_mode, BS);",
          "91:   CHK_ENTITY_MAX (layout, LAYOUT, shadeplot_mode, BS, 5);",
          "92:   CHK_ENTITY_TYPE (layout, LAYOUT, shadeplot_reslevel, BS);",
          "93:   CHK_ENTITY_MAX (layout, LAYOUT, shadeplot_reslevel, BS, 5);",
          "94:   CHK_ENTITY_TYPE (layout, LAYOUT, shadeplot_customdpi, BS);",
          "95:   CHK_ENTITY_H (layout, LAYOUT, shadeplot);",
          "97:   CHK_ENTITY_TYPE (layout, LAYOUT, layout_name, T);",
          "",
          "[Added Lines]",
          "31:   memset (&plotsettings, 0, sizeof (Dwg_Object_PLOTSETTINGS));",
          "33:   CHK_SUBCLASS_UTF8TEXT (layout->plotsettings, PLOTSETTINGS, printer_cfg_file);",
          "34:   CHK_SUBCLASS_UTF8TEXT (layout->plotsettings, PLOTSETTINGS, paper_size);",
          "35:   CHK_SUBCLASS_UTF8TEXT (layout->plotsettings, PLOTSETTINGS, canonical_media_name);",
          "36:   CHK_SUBCLASS_UTF8TEXT (layout->plotsettings, PLOTSETTINGS, stylesheet);",
          "37:   CHK_SUBCLASS_UTF8TEXT (layout->plotsettings, PLOTSETTINGS, plotview_name);",
          "38:   CHK_SUBCLASS_H (layout->plotsettings, PLOTSETTINGS, plotview);",
          "39:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, plot_flags, BSx);",
          "40:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, left_margin, BD);",
          "41:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, bottom_margin, BD);",
          "42:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, right_margin, BD);",
          "43:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, top_margin, BD);",
          "44:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, paper_width, BD);",
          "45:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, paper_height, BD);",
          "46:   CHK_SUBCLASS_2RD (layout->plotsettings, PLOTSETTINGS, plot_origin);",
          "47:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, plot_paper_unit, BS);",
          "48:   CHK_SUBCLASS_MAX (layout->plotsettings, PLOTSETTINGS, plot_paper_unit, BS, 2);",
          "49:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, plot_rotation_mode, BS);",
          "50:   CHK_SUBCLASS_MAX (layout->plotsettings, PLOTSETTINGS, plot_rotation_mode, BS, 3);",
          "51:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, plot_type, BS);",
          "52:   CHK_SUBCLASS_MAX (layout->plotsettings, PLOTSETTINGS, plot_type, BS, 5);",
          "53:   CHK_SUBCLASS_2RD (layout->plotsettings, PLOTSETTINGS, plot_window_ll);",
          "54:   CHK_SUBCLASS_2RD (layout->plotsettings, PLOTSETTINGS, plot_window_ur);",
          "55:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, paper_units, BD);",
          "56:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, drawing_units, BD);",
          "57:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, std_scale_type, BS);",
          "58:   CHK_SUBCLASS_MAX (layout->plotsettings, PLOTSETTINGS, std_scale_type, BS, 32);",
          "59:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, std_scale_factor, BD);",
          "60:   CHK_SUBCLASS_2RD (layout->plotsettings, PLOTSETTINGS, paper_image_origin);",
          "61:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, shadeplot_type, BS);",
          "62:   CHK_SUBCLASS_MAX (layout->plotsettings, PLOTSETTINGS, shadeplot_type, BS, 5);",
          "63:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, shadeplot_reslevel, BS);",
          "64:   CHK_SUBCLASS_MAX (layout->plotsettings, PLOTSETTINGS, shadeplot_reslevel, BS, 5);",
          "65:   CHK_SUBCLASS_TYPE (layout->plotsettings, PLOTSETTINGS, shadeplot_customdpi, BS);",
          "66:   CHK_SUBCLASS_H (layout->plotsettings, PLOTSETTINGS, shadeplot);",
          "68:   CHK_ENTITY_UTF8TEXT (layout, LAYOUT, layout_name);",
          "",
          "---------------"
        ],
        "test/unit-testing/plotsettings.c||test/unit-testing/plotsettings.c": [
          "File: test/unit-testing/plotsettings.c -> test/unit-testing/plotsettings.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   int error, isnew;",
          "9:   BITCODE_T printer_cfg_file;",
          "10:   BITCODE_T paper_size;",
          "12:   BITCODE_BD left_margin;",
          "13:   BITCODE_BD bottom_margin;",
          "14:   BITCODE_BD right_margin;",
          "",
          "[Removed Lines]",
          "11:   BITCODE_T canonical_media_name;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   BITCODE_BD drawing_units;",
          "26:   BITCODE_BS plot_flags;",
          "27:   BITCODE_BS plot_paper_unit;",
          "29:   BITCODE_BS plot_type;",
          "30:   BITCODE_T stylesheet;",
          "31:   BITCODE_BS std_scale_type;",
          "32:   BITCODE_BD std_scale_factor;",
          "33:   BITCODE_2BD_1 paper_image_origin;",
          "39:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "40:   dwg_obj_plotsettings *plt = dwg_object_to_PLOTSETTINGS (obj);",
          "",
          "[Removed Lines]",
          "28:   BITCODE_BS plot_rotation;",
          "34:   BITCODE_BS shade_plot_mode;",
          "35:   BITCODE_BS shade_plot_reslevel;",
          "36:   BITCODE_BS shade_plot_customdpi;",
          "37:   BITCODE_H  shadeplot;",
          "",
          "[Added Lines]",
          "26:   BITCODE_BS plot_rotation_mode;",
          "32:   BITCODE_BS shadeplot_type;",
          "33:   BITCODE_BS shadeplot_reslevel;",
          "34:   BITCODE_BS shadeplot_customdpi;",
          "35:   BITCODE_H shadeplot;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   CHK_ENTITY_TYPE (plt, PLOTSETTINGS, std_scale_factor, BD);",
          "70:   CHK_ENTITY_2RD (plt, PLOTSETTINGS, paper_image_origin);",
          "74:   CHK_ENTITY_TYPE (plt, PLOTSETTINGS, shadeplot_reslevel, BS);",
          "75:   CHK_ENTITY_MAX (plt, PLOTSETTINGS, shadeplot_reslevel, BS, 5);",
          "76:   CHK_ENTITY_TYPE (plt, PLOTSETTINGS, shadeplot_customdpi, BS);",
          "",
          "[Removed Lines]",
          "72:   CHK_ENTITY_TYPE (plt, PLOTSETTINGS, shadeplot_mode, BS);",
          "73:   CHK_ENTITY_MAX (plt, PLOTSETTINGS, shadeplot_mode, BS, 5);",
          "",
          "[Added Lines]",
          "70:   CHK_ENTITY_TYPE (plt, PLOTSETTINGS, shadeplot_type, BS);",
          "71:   CHK_ENTITY_MAX (plt, PLOTSETTINGS, shadeplot_type, BS, 5);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "892ddf7f8e61e7f32cfc05af766cf31f3b96fa70",
      "candidate_info": {
        "commit_hash": "892ddf7f8e61e7f32cfc05af766cf31f3b96fa70",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/892ddf7f8e61e7f32cfc05af766cf31f3b96fa70",
        "files": [
          "doc/dynapi.texi",
          "include/dwg.h",
          "src/bits.c",
          "src/bits.h",
          "src/common.c",
          "src/dec_macros.h",
          "src/decode.c",
          "src/decode_r2007.c",
          "src/dwg.c",
          "src/dwg.spec",
          "src/dwg_api.c",
          "src/dynapi.c",
          "src/encode.c",
          "src/free.c",
          "src/gen-dynapi.pl",
          "src/hash.c",
          "src/header_variables_r11.spec",
          "src/in_dxf.c",
          "src/in_dxf.h",
          "src/in_json.c",
          "src/out_dxf.c",
          "src/out_dxfb.c",
          "src/out_geojson.c",
          "src/out_json.c",
          "src/reedsolomon.c",
          "test/unit-testing/decode_test.c",
          "test/unit-testing/dynapi_test.c",
          "test/unit-testing/multileader.c",
          "test/unit-testing/tests_common.h"
        ],
        "message": "Enable C++ compat\n\nTo compile with g++/clang++\nreserved keywords, inner structs, malloc casts, ...\n\nNeeded for some bindings in C++",
        "before_after_code_files": [
          "include/dwg.h||include/dwg.h",
          "src/bits.c||src/bits.c",
          "src/bits.h||src/bits.h",
          "src/common.c||src/common.c",
          "src/dec_macros.h||src/dec_macros.h",
          "src/decode.c||src/decode.c",
          "src/decode_r2007.c||src/decode_r2007.c",
          "src/dwg.c||src/dwg.c",
          "src/dwg.spec||src/dwg.spec",
          "src/dwg_api.c||src/dwg_api.c",
          "src/dynapi.c||src/dynapi.c",
          "src/encode.c||src/encode.c",
          "src/free.c||src/free.c",
          "src/gen-dynapi.pl||src/gen-dynapi.pl",
          "src/hash.c||src/hash.c",
          "src/header_variables_r11.spec||src/header_variables_r11.spec",
          "src/in_dxf.c||src/in_dxf.c",
          "src/in_dxf.h||src/in_dxf.h",
          "src/in_json.c||src/in_json.c",
          "src/out_dxf.c||src/out_dxf.c",
          "src/out_dxfb.c||src/out_dxfb.c",
          "src/out_geojson.c||src/out_geojson.c",
          "src/out_json.c||src/out_json.c",
          "src/reedsolomon.c||src/reedsolomon.c",
          "test/unit-testing/decode_test.c||test/unit-testing/decode_test.c",
          "test/unit-testing/dynapi_test.c||test/unit-testing/dynapi_test.c",
          "test/unit-testing/multileader.c||test/unit-testing/multileader.c",
          "test/unit-testing/tests_common.h||test/unit-testing/tests_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/dec_macros.h||src/dec_macros.h"
          ],
          "candidate": [
            "src/dec_macros.h||src/dec_macros.h"
          ]
        }
      },
      "candidate_diff": {
        "include/dwg.h||include/dwg.h": [
          "File: include/dwg.h -> include/dwg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2820:   BITCODE_BS attach_dir; //2010+ 271",
          "2821: } Dwg_LEADER_Node;",
          "2823: typedef union _dwg_MLEADER_Content",
          "2824: {",
          "2865: } Dwg_MLEADER_Content;",
          "",
          "[Removed Lines]",
          "2825:   struct _content_mtext",
          "2826:     {",
          "2827:       BITCODE_T default_text;",
          "2828:       BITCODE_3BD normal; // 11",
          "2829:       BITCODE_H style;",
          "2830:       BITCODE_3BD location;",
          "2831:       BITCODE_3BD direction;",
          "2832:       BITCODE_BD rotation;",
          "2833:       BITCODE_BD width;",
          "2834:       BITCODE_BD height;",
          "2835:       BITCODE_BD line_spacing_factor;",
          "2836:       BITCODE_BS line_spacing_style;",
          "2837:       BITCODE_CMC color;",
          "2838:       BITCODE_BS alignment;",
          "2839:       BITCODE_BS flow;",
          "2840:       BITCODE_CMC bg_color;",
          "2841:       BITCODE_BD bg_scale;",
          "2842:       BITCODE_BL bg_transparency;",
          "2843:       BITCODE_B is_bg_fill;",
          "2844:       BITCODE_B is_bg_mask_fill;",
          "2845:       BITCODE_BS col_type;",
          "2846:       BITCODE_B is_height_auto;",
          "2847:       BITCODE_BD col_width;",
          "2848:       BITCODE_BD col_gutter;",
          "2849:       BITCODE_B is_col_flow_reversed;",
          "2850:       BITCODE_BL num_col_sizes;",
          "2851:       BITCODE_BD *col_sizes;",
          "2852:       BITCODE_B word_break;",
          "2853:       BITCODE_B unknown;",
          "2854:     } txt;",
          "2855:   struct _content_block",
          "2856:     {",
          "2857:       BITCODE_H block_table;",
          "2858:       BITCODE_3BD normal; // 14",
          "2859:       BITCODE_3BD location;",
          "2860:       BITCODE_3BD scale;",
          "2861:       BITCODE_BD rotation;",
          "2862:       BITCODE_CMC color;",
          "2863:       BITCODE_BD *transform;",
          "2864:     } blk;",
          "",
          "[Added Lines]",
          "2823: typedef struct _dwg_MLEADER_Content_MText",
          "2824: {",
          "2825:   BITCODE_T default_text;",
          "2826:   BITCODE_3BD normal; // 11",
          "2827:   BITCODE_H style;",
          "2828:   BITCODE_3BD location;",
          "2829:   BITCODE_3BD direction;",
          "2830:   BITCODE_BD rotation;",
          "2831:   BITCODE_BD width;",
          "2832:   BITCODE_BD height;",
          "2833:   BITCODE_BD line_spacing_factor;",
          "2834:   BITCODE_BS line_spacing_style;",
          "2835:   BITCODE_CMC color;",
          "2836:   BITCODE_BS alignment;",
          "2837:   BITCODE_BS flow;",
          "2838:   BITCODE_CMC bg_color;",
          "2839:   BITCODE_BD bg_scale;",
          "2840:   BITCODE_BL bg_transparency;",
          "2841:   BITCODE_B is_bg_fill;",
          "2842:   BITCODE_B is_bg_mask_fill;",
          "2843:   BITCODE_BS col_type;",
          "2844:   BITCODE_B is_height_auto;",
          "2845:   BITCODE_BD col_width;",
          "2846:   BITCODE_BD col_gutter;",
          "2847:   BITCODE_B is_col_flow_reversed;",
          "2848:   BITCODE_BL num_col_sizes;",
          "2849:   BITCODE_BD *col_sizes;",
          "2850:   BITCODE_B word_break;",
          "2851:   BITCODE_B unknown;",
          "2852: } Dwg_MLEADER_Content_MText;",
          "2854: typedef struct _dwg_MLEADER_Content_Block",
          "2855: {",
          "2856:   BITCODE_H block_table;",
          "2857:   BITCODE_3BD normal; // 14",
          "2858:   BITCODE_3BD location;",
          "2859:   BITCODE_3BD scale;",
          "2860:   BITCODE_BD rotation;",
          "2861:   BITCODE_CMC color;",
          "2862:   BITCODE_BD *transform;",
          "2863: } Dwg_MLEADER_Content_Block;",
          "2867:   Dwg_MLEADER_Content_MText txt;",
          "2868:   Dwg_MLEADER_Content_Block blk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6863:   BITCODE_RC padding[9]; // always 8x 0x55",
          "6864: } Dwg_AcDs_Segment;",
          "6866: #pragma pack(1)",
          "6868: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6870: typedef struct _dwg_AcDs",
          "6871: {",
          "6873:   BITCODE_RL file_signature;",
          "6874:   BITCODE_RL file_header_size;",
          "6879:   BITCODE_RL segidx_offset;",
          "6880:   BITCODE_RL segidx_unknown;",
          "6881:   BITCODE_RL num_segidx;",
          "6882:   BITCODE_RL schidx_segidx;",
          "6883:   BITCODE_RL datidx_segidx;",
          "6884:   BITCODE_RL search_segidx;",
          "6885:   BITCODE_RL prvsav_segidx;",
          "6886:   BITCODE_RL file_size;",
          "6887:   BITCODE_BL total_segments; // computed",
          "6888:   Dwg_AcDs_SegmentIndex *segidx;",
          "6889:   Dwg_AcDs_DataIndex datidx;",
          "6890:   Dwg_AcDs_Data *data;",
          "6891:   Dwg_AcDs_DataBlob blob01;",
          "6892:   Dwg_AcDs_SchemaIndex schidx;",
          "6893:   Dwg_AcDs_SchemaData schdat;",
          "6894:   Dwg_AcDs_Search search;",
          "6895:   Dwg_AcDs_Segment *segments;",
          "6896: } Dwg_AcDs;",
          "6898: typedef struct _dwg_header",
          "6899: {",
          "6902:   BITCODE_RC zero_5[5];",
          "6903:   BITCODE_RC is_maint;",
          "6904:   BITCODE_RC zero_one_or_three;",
          "6907:   BITCODE_RC dwg_version;",
          "6908:   BITCODE_RC maint_version;",
          "6909:   BITCODE_RS codepage;",
          "6918:   BITCODE_RL num_sections;",
          "6919:   Dwg_Section *section;",
          "6921:   Dwg_Section_Info *section_info;",
          "6922: } Dwg_Header;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6898: } Dwg_R2004_Header;",
          "6899: #pragma pack()",
          "6903:  Main DWG struct",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6959: typedef struct _dwg_auxheader",
          "6960: {",
          "6962:   BITCODE_RS dwg_version;",
          "6963:   BITCODE_RS maint_version;",
          "6964:   BITCODE_RL numsaves;",
          "6965:   BITCODE_RL minus_1;",
          "6966:   BITCODE_RS numsaves_1;",
          "6967:   BITCODE_RS numsaves_2;",
          "6968:   BITCODE_RL zero;",
          "6969:   BITCODE_RS dwg_version_1;",
          "6970:   BITCODE_RS maint_version_1;",
          "6971:   BITCODE_RS dwg_version_2;",
          "6972:   BITCODE_RS maint_version_2;",
          "6973:   BITCODE_RS unknown_6rs[6];",
          "6974:   BITCODE_RL unknown_5rl[5];",
          "6976:   BITCODE_RD TDUPDATE;",
          "6977:   BITCODE_RL HANDSEED;",
          "6978:   BITCODE_RL plot_stamp;",
          "6979:   BITCODE_RS zero_1;",
          "6980:   BITCODE_RS numsaves_3;",
          "6981:   BITCODE_RL zero_2;",
          "6982:   BITCODE_RL zero_3;",
          "6983:   BITCODE_RL zero_4;",
          "6984:   BITCODE_RL numsaves_4;",
          "6985:   BITCODE_RL zero_5;",
          "6986:   BITCODE_RL zero_6;",
          "6987:   BITCODE_RL zero_7;",
          "6990: } Dwg_AuxHeader;",
          "6992: typedef struct _dwg_summaryinfo",
          "6993: {",
          "6994:   BITCODE_T TITLE;",
          "6995:   BITCODE_T SUBJECT;",
          "6996:   BITCODE_T AUTHOR;",
          "6997:   BITCODE_T KEYWORDS;",
          "6998:   BITCODE_T COMMENTS;",
          "6999:   BITCODE_T LASTSAVEDBY;",
          "7000:   BITCODE_T REVISIONNUMBER;",
          "7001:   BITCODE_T HYPERLINKBASE;",
          "7003:   BITCODE_TIMERLL TDCREATE;",
          "7004:   BITCODE_TIMERLL TDUPDATE;",
          "7005:   BITCODE_RS num_props;",
          "7006:   Dwg_SummaryInfo_Property *props;",
          "7007:   BITCODE_RL unknown1;",
          "7008:   BITCODE_RL unknown2;",
          "7009: } Dwg_SummaryInfo;",
          "7013: typedef struct _dwg_appinfo",
          "7014: {",
          "7015:   BITCODE_RL class_version; // 3",
          "7016:   BITCODE_RL num_strings;   // 2-3",
          "7017:   BITCODE_TU appinfo_name;  // AppInfoDataList",
          "7018:   BITCODE_RC version_checksum[16];",
          "7019:   BITCODE_RC comment_checksum[16];",
          "7020:   BITCODE_RC product_checksum[16];",
          "7021:   BITCODE_TU version;      // \"19.0.55.0.0\", \"Teigha(R) 4.3.2.0\"",
          "7022:   BITCODE_TU comment;      // \"Autodesk DWG.  This file is a Trusted DWG \"...",
          "7023:   BITCODE_TU product_info; // XML ProductInformation",
          "7024: } Dwg_AppInfo;",
          "7027: typedef struct _dwg_filedeplist",
          "7028: {",
          "7029:   BITCODE_RL num_features;",
          "7030:   BITCODE_TU32 *features; // Acad:XRef, Acad:Image, Acad:PlotConfig, Acad:Text",
          "7031:   BITCODE_RL num_files;",
          "7032:   Dwg_FileDepList_Files *files;",
          "7033: } Dwg_FileDepList;",
          "7036: typedef struct _dwg_security",
          "7037: {",
          "7038:   BITCODE_RL unknown_1;   // 0xc",
          "7039:   BITCODE_RL unknown_2;   // 0",
          "7040:   BITCODE_RL unknown_3;   // 0xabcdabcd",
          "7041:   BITCODE_RL crypto_id;   //",
          "7042:   BITCODE_TV crypto_name; // \"Microsoft Base DSS and Diffie-Hellman",
          "7044:   BITCODE_RL algo_id;     // RC4",
          "7045:   BITCODE_RL key_len;     // 40",
          "7046:   BITCODE_RL encr_size;   //",
          "7047:   BITCODE_TF encr_buffer;",
          "7048: } Dwg_Security;",
          "7050: typedef struct _dwg_vbaproject",
          "7051: {",
          "7052:   int size;",
          "7053:   BITCODE_TF unknown_bits;",
          "7054: } Dwg_VBAProject;",
          "7056: typedef struct _dwg_appinfohistory",
          "7057: {",
          "7058:   int size;",
          "7059:   BITCODE_TF unknown_bits;",
          "7060: } Dwg_AppInfoHistory;",
          "7062: typedef struct _dwg_revhistory",
          "7063: {",
          "7064:   BITCODE_RL class_version;",
          "7065:   BITCODE_RL class_minor;",
          "7066:   BITCODE_RL num_histories;",
          "7067:   BITCODE_RL *histories;",
          "7068: } Dwg_RevHistory;",
          "7070: typedef struct _dwg_objfreespace",
          "7071: {",
          "7072:   BITCODE_RLL zero;",
          "7073:   BITCODE_RLL num_handles;",
          "7074:   BITCODE_TIMERLL TDUPDATE;",
          "7075:   BITCODE_RL objects_address;",
          "7076:   BITCODE_RC num_nums; // RLL (uint64_t) or uint128_t",
          "7077:   BITCODE_RLL max32;   // 0x32",
          "7078:   BITCODE_RLL max64;   // 0x64",
          "7079:   BITCODE_RLL maxtbl;  // 0x200",
          "7080:   BITCODE_RLL maxrl;",
          "7081:   BITCODE_RLL max32_hi;",
          "7082:   BITCODE_RLL max64_hi;",
          "7083:   BITCODE_RLL maxtbl_hi;",
          "7084:   BITCODE_RLL maxrl_hi;",
          "7085: } Dwg_ObjFreeSpace;",
          "7087: typedef struct _dwg_template",
          "7088: {",
          "7089:   BITCODE_T16 description;",
          "7090:   BITCODE_RS MEASUREMENT;",
          "7091: } Dwg_Template;",
          "7093: typedef struct _dwg_second_header",
          "7094: {",
          "7095:   BITCODE_RL size;",
          "7096:   BITCODE_RL address;",
          "7097:   BITCODE_RC version[12];",
          "7098:   BITCODE_B null_b[4];",
          "7099:   BITCODE_RC unknown_10;",
          "7100:   BITCODE_RC unknown_rc4[4];",
          "7101:   BITCODE_RC num_sections;",
          "7102:   struct _sections",
          "7103:   {",
          "7104:     BITCODE_RC nr;",
          "7105:     BITCODE_BL address;",
          "7106:     BITCODE_BL size;",
          "7107:   } section[6];",
          "7108:   BITCODE_BS num_handlers;",
          "7109:   struct _handler",
          "7110:   {",
          "7111:     BITCODE_RC size;",
          "7112:     BITCODE_RC nr;",
          "7113:     BITCODE_RC *data;",
          "7114:   } handlers[16];",
          "7117: } Dwg_Second_Header;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6906: typedef struct _dwg_struct",
          "6907: {",
          "",
          "[Removed Lines]",
          "6908:   struct Dwg_Header",
          "6909:   {",
          "6912:     BITCODE_RC   zero_5[5];",
          "6913:     BITCODE_RC   is_maint;",
          "6914:     BITCODE_RC   zero_one_or_three;",
          "6917:     BITCODE_RC   dwg_version;",
          "6918:     BITCODE_RC   maint_version;",
          "6919:     BITCODE_RS   codepage;",
          "6929:     BITCODE_RL   num_sections; // TODO: should not be here",
          "6930:     Dwg_Section* section;",
          "6932:     Dwg_Section_Info* section_info;",
          "6933:   } header;",
          "",
          "[Added Lines]",
          "7125:   Dwg_Header header;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6947:   Dwg_Header_Variables header_vars;",
          "6948:   Dwg_Chain thumbnail;",
          "6952:   Dwg_Object *mspace_block;",
          "6953:   Dwg_Object *pspace_block;",
          "",
          "[Removed Lines]",
          "6950:   Dwg_R2004_Header r2004_header; // packed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6964:   Dwg_Object_VPORT_ENTITY_CONTROL  vport_entity_control;",
          "7153:   unsigned int layout_type;",
          "7154: } Dwg_Data;",
          "",
          "[Removed Lines]",
          "6967:   struct Dwg_AuxHeader",
          "6968:   {",
          "6970:     BITCODE_RS   dwg_version;",
          "6971:     BITCODE_RS   maint_version;",
          "6972:     BITCODE_RL   numsaves;",
          "6973:     BITCODE_RL   minus_1;",
          "6974:     BITCODE_RS   numsaves_1;",
          "6975:     BITCODE_RS   numsaves_2;",
          "6976:     BITCODE_RL   zero;",
          "6977:     BITCODE_RS   dwg_version_1;",
          "6978:     BITCODE_RS   maint_version_1;",
          "6979:     BITCODE_RS   dwg_version_2;",
          "6980:     BITCODE_RS   maint_version_2;",
          "6981:     BITCODE_RS   unknown_6rs[6];",
          "6982:     BITCODE_RL   unknown_5rl[5];",
          "6984:     BITCODE_RD   TDUPDATE;",
          "6985:     BITCODE_RL   HANDSEED;",
          "6986:     BITCODE_RL   plot_stamp;",
          "6987:     BITCODE_RS   zero_1;",
          "6988:     BITCODE_RS   numsaves_3;",
          "6989:     BITCODE_RL   zero_2;",
          "6990:     BITCODE_RL   zero_3;",
          "6991:     BITCODE_RL   zero_4;",
          "6992:     BITCODE_RL   numsaves_4;",
          "6993:     BITCODE_RL   zero_5;",
          "6994:     BITCODE_RL   zero_6;",
          "6995:     BITCODE_RL   zero_7;",
          "6998:   } auxheader;",
          "7000:   struct Dwg_SummaryInfo",
          "7001:   {",
          "7002:     BITCODE_T    TITLE;",
          "7003:     BITCODE_T    SUBJECT;",
          "7004:     BITCODE_T    AUTHOR;",
          "7005:     BITCODE_T    KEYWORDS;",
          "7006:     BITCODE_T    COMMENTS;",
          "7007:     BITCODE_T    LASTSAVEDBY;",
          "7008:     BITCODE_T    REVISIONNUMBER;",
          "7009:     BITCODE_T    HYPERLINKBASE;",
          "7011:     BITCODE_TIMERLL  TDCREATE;",
          "7012:     BITCODE_TIMERLL  TDUPDATE;",
          "7013:     BITCODE_RS   num_props;",
          "7014:     Dwg_SummaryInfo_Property *props;",
          "7015:     BITCODE_RL   unknown1;",
          "7016:     BITCODE_RL   unknown2;",
          "7017:   } summaryinfo;",
          "7021:   struct Dwg_AppInfo",
          "7022:   {",
          "7023:     BITCODE_RL class_version;   // 3",
          "7024:     BITCODE_RL num_strings;     // 2-3",
          "7025:     BITCODE_TU appinfo_name;    // AppInfoDataList",
          "7026:     BITCODE_RC version_checksum[16];",
          "7027:     BITCODE_RC comment_checksum[16];",
          "7028:     BITCODE_RC product_checksum[16];",
          "7029:     BITCODE_TU version; // \"19.0.55.0.0\", \"Teigha(R) 4.3.2.0\"",
          "7030:     BITCODE_TU comment; // \"Autodesk DWG.  This file is a Trusted DWG \"...",
          "7031:     BITCODE_TU product_info; // XML ProductInformation",
          "7032:   } appinfo;",
          "7035:   struct Dwg_FileDepList",
          "7036:   {",
          "7037:     BITCODE_RL num_features;",
          "7038:     BITCODE_TU32 *features; // Acad:XRef, Acad:Image, Acad:PlotConfig, Acad:Text",
          "7039:     BITCODE_RL num_files;",
          "7040:     Dwg_FileDepList_Files *files;",
          "7041:   } filedeplist;",
          "7044:   struct Dwg_Security",
          "7045:   {",
          "7046:     BITCODE_RL unknown_1;        // 0xc",
          "7047:     BITCODE_RL unknown_2;        // 0",
          "7048:     BITCODE_RL unknown_3;        // 0xabcdabcd",
          "7049:     BITCODE_RL crypto_id;        //",
          "7050:     BITCODE_TV crypto_name;      // \"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\"",
          "7051:     BITCODE_RL algo_id;          // RC4",
          "7052:     BITCODE_RL key_len;          // 40",
          "7053:     BITCODE_RL encr_size;        //",
          "7054:     BITCODE_TF encr_buffer;",
          "7055:   } security;",
          "7057:   struct Dwg_VBAProject",
          "7058:   {",
          "7059:     int    size;",
          "7060:     BITCODE_TF unknown_bits;",
          "7061:   } vbaproject;",
          "7063:   struct Dwg_AppInfoHistory",
          "7064:   {",
          "7065:     int    size;",
          "7066:     BITCODE_TF unknown_bits;",
          "7067:   } appinfohistory;",
          "7069:   struct Dwg_RevHistory",
          "7070:   {",
          "7071:     BITCODE_RL class_version;",
          "7072:     BITCODE_RL class_minor;",
          "7073:     BITCODE_RL num_histories;",
          "7074:     BITCODE_RL *histories;",
          "7075:   } revhistory;",
          "7077:   struct Dwg_ObjFreeSpace",
          "7078:   {",
          "7079:     BITCODE_RLL zero;",
          "7080:     BITCODE_RLL num_handles;",
          "7081:     BITCODE_TIMERLL TDUPDATE;",
          "7082:     BITCODE_RL objects_address;",
          "7083:     BITCODE_RC num_nums; // RLL (uint64_t) or uint128_t",
          "7084:     BITCODE_RLL max32;  // 0x32",
          "7085:     BITCODE_RLL max64;  // 0x64",
          "7086:     BITCODE_RLL maxtbl; // 0x200",
          "7087:     BITCODE_RLL maxrl;",
          "7088:     BITCODE_RLL max32_hi;",
          "7089:     BITCODE_RLL max64_hi;",
          "7090:     BITCODE_RLL maxtbl_hi;",
          "7091:     BITCODE_RLL maxrl_hi;",
          "7092:   } objfreespace;",
          "7094:   struct Dwg_Template",
          "7095:   {",
          "7096:     BITCODE_T16 description;",
          "7097:     BITCODE_RS MEASUREMENT;",
          "7098:   } template;",
          "7100:   struct Dwg_AcDs",
          "7101:   {",
          "7103:     BITCODE_RL file_signature;",
          "7104:     BITCODE_RL file_header_size;",
          "7109:     BITCODE_RL segidx_offset;",
          "7110:     BITCODE_RL segidx_unknown;",
          "7111:     BITCODE_RL num_segidx;",
          "7112:     BITCODE_RL schidx_segidx;",
          "7113:     BITCODE_RL datidx_segidx;",
          "7114:     BITCODE_RL search_segidx;",
          "7115:     BITCODE_RL prvsav_segidx;",
          "7116:     BITCODE_RL file_size;",
          "7117:     BITCODE_BL total_segments; // computed",
          "7118:     Dwg_AcDs_SegmentIndex *segidx;",
          "7119:     Dwg_AcDs_DataIndex datidx;",
          "7120:     Dwg_AcDs_Data *data;",
          "7121:     Dwg_AcDs_DataBlob blob01;",
          "7122:     Dwg_AcDs_SchemaIndex schidx;",
          "7123:     Dwg_AcDs_SchemaData schdat;",
          "7124:     Dwg_AcDs_Search search;",
          "7125:     Dwg_AcDs_Segment *segments;",
          "7126:   } acds;",
          "7128:   struct _dwg_second_header {",
          "7129:     BITCODE_RL size;",
          "7130:     BITCODE_RL address;",
          "7131:     BITCODE_RC version[12];",
          "7132:     BITCODE_B null_b[4];",
          "7133:     BITCODE_RC unknown_10;",
          "7134:     BITCODE_RC unknown_rc4[4];",
          "7135:     BITCODE_RC num_sections;",
          "7136:     struct _sections",
          "7137:     {",
          "7138:       BITCODE_RC nr;",
          "7139:       BITCODE_BL address;",
          "7140:       BITCODE_BL size;",
          "7141:     } section[6];",
          "7142:     BITCODE_BS num_handlers;",
          "7143:     struct _handler",
          "7144:     {",
          "7145:       BITCODE_RC size;",
          "7146:       BITCODE_RC nr;",
          "7147:       BITCODE_RC *data;",
          "7148:     } handlers[16];",
          "7151:   } second_header;",
          "",
          "[Added Lines]",
          "7159:   Dwg_AuxHeader auxheader;",
          "7160:   Dwg_SummaryInfo summaryinfo;",
          "7163:   Dwg_AppInfo appinfo;",
          "7165:   Dwg_FileDepList filedeplist;",
          "7167:   Dwg_VBAProject vbaproject;",
          "7168:   Dwg_AppInfoHistory appinfohistory;",
          "7169:   Dwg_RevHistory revhistory;",
          "7170:   Dwg_ObjFreeSpace objfreespace;",
          "7171:   Dwg_Template Template;",
          "7172:   Dwg_AcDs acds;",
          "7173:   Dwg_Second_Header second_header;",
          "",
          "---------------"
        ],
        "src/bits.c||src/bits.c": [
          "File: src/bits.c -> src/bits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1430: BITCODE_TF",
          "1431: bit_read_TF (Bit_Chain *restrict dat, unsigned int length)",
          "1432: {",
          "1434:   if (!chain)",
          "1435:     {",
          "1436:       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;",
          "1437:       LOG_ERROR (\"Out of memory\");",
          "1438:       return NULL;",
          "1439:     }",
          "1440:   bit_read_fixed (dat, chain, length);",
          "1441:   chain[length] = '\\0';",
          "",
          "[Removed Lines]",
          "1433:   BITCODE_RC *chain = calloc (length + 1, 1);",
          "",
          "[Added Lines]",
          "1433:   BITCODE_RC *chain = (BITCODE_RC *)calloc (length + 1, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1548:   if (!wstr)",
          "1549:     return NULL;",
          "1550:   size = len + 1;",
          "1552:   if (!str)",
          "1553:     return NULL;",
          "1554:   read = write = 0;",
          "",
          "[Removed Lines]",
          "1551:   str = malloc (size);",
          "",
          "[Added Lines]",
          "1552:   str = (char*)malloc (size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1580:           if (write + 7 > size)",
          "1581:             {",
          "1582:               size += 8;",
          "1584:             }",
          "1585:           str[write++] = '\\\\';",
          "1586:           str[write++] = 'U';",
          "",
          "[Removed Lines]",
          "1583:               str = realloc (str, size);",
          "",
          "[Added Lines]",
          "1584:               str = (char*)realloc (str, size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2162:         LOG_INSANE (\"U+%04X \", c);",
          "2163: #endif",
          "2164:     }",
          "2166:   if (!str)",
          "2167:     {",
          "2168:       loglevel = 1;",
          "",
          "[Removed Lines]",
          "2165:   str = malloc (len + 1);",
          "",
          "[Added Lines]",
          "2166:   str = (char*)malloc (len + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2351:   int len = strlen (str);",
          "2352:   unsigned char c;",
          "2355:   if (!wstr)",
          "2356:     {",
          "2357:       loglevel = 1;",
          "",
          "[Removed Lines]",
          "2354:   wstr = malloc (2 * (len + 1));",
          "",
          "[Added Lines]",
          "2355:   wstr = (BITCODE_TU)malloc (2 * (len + 1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2593:         color->rgb = bit_read_BL (dat); // ODA bug, documented as BS",
          "2594:       if (flag & 0x40)",
          "2595:         {",
          "2597:           if (!color->handle)",
          "2598:             {",
          "2599:               loglevel = dat->opts & DWG_OPTS_LOGLEVEL;",
          "",
          "[Removed Lines]",
          "2596:           color->handle = calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "2597:           color->handle = (BITCODE_H)calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2878: uint16_t",
          "2879: bit_calc_CRC (const uint16_t seed, unsigned char *addr, long len)",
          "2880: {",
          "2884:   static const uint16_t crctable[256] = {",
          "2885:     0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241, 0xC601,",
          "",
          "[Removed Lines]",
          "2881:   register unsigned char al;",
          "2882:   register uint16_t dx = seed;",
          "",
          "[Added Lines]",
          "2882:   unsigned char al;",
          "2883:   uint16_t dx = seed;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2925: uint32_t",
          "2926: bit_calc_CRC32 (const uint32_t seed, unsigned char *addr, long len)",
          "2927: {",
          "2931:   static const uint32_t crctable[256] = {",
          "2932:     0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,",
          "",
          "[Removed Lines]",
          "2928:   register unsigned char al;",
          "",
          "[Added Lines]",
          "2929:   unsigned char al;",
          "",
          "---------------"
        ],
        "src/bits.h||src/bits.h": [
          "File: src/bits.h -> src/bits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #  include <wchar.h>",
          "45: #endif",
          "46: #include <stdio.h>",
          "47: #include <stdbool.h>",
          "48: #include \"common.h\"",
          "49: #include \"dwg.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include <string.h>",
          "48: #include <stddef.h>",
          "",
          "---------------"
        ],
        "src/common.c||src/common.c": [
          "File: src/common.c -> src/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148: char *",
          "149: strrplc (const char *s, const char *from, const char *to)",
          "150: {",
          "152:   if (p)",
          "153:     {",
          "154:       int len = strlen (s) - (strlen (from) - strlen (to));",
          "",
          "[Removed Lines]",
          "151:   char *p = strstr (s, from);",
          "",
          "[Added Lines]",
          "151:   const char *p = strstr (s, from);",
          "",
          "---------------"
        ],
        "src/dec_macros.h||src/dec_macros.h": [
          "File: src/dec_macros.h -> src/dec_macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "990:     {                                                                         \\",
          "991:       _VECTOR_CHKCOUNT (name, _obj->size,                                     \\",
          "992:                         dat->from_version >= R_2007 ? 18 : 2, dat)            \\",
          "994:       for (vcount = 0; vcount < (BITCODE_BL)_obj->size; vcount++)             \\",
          "995:         {                                                                     \\",
          "996:           PRE (R_2007)                                                        \\",
          "",
          "[Removed Lines]",
          "993:       _obj->name = calloc (_obj->size, sizeof (char *));                      \\",
          "",
          "[Added Lines]",
          "993:       _obj->name = (char**)calloc (_obj->size, sizeof (char *));              \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1164:   if (obj->tio.object->num_reactors > 0)                                      \\",
          "1165:     {                                                                         \\",
          "1166:       HANDLE_VECTOR_CHKCOUNT (reactors, obj->tio.object->num_reactors)        \\",
          "1169:       for (vcount = 0; vcount < obj->tio.object->num_reactors; vcount++)      \\",
          "1170:         {                                                                     \\",
          "1171:           VALUE_HANDLE_N (obj->tio.object->reactors[vcount], reactors,        \\",
          "",
          "[Removed Lines]",
          "1167:       obj->tio.object->reactors                                               \\",
          "1168:           = calloc (obj->tio.object->num_reactors, sizeof (BITCODE_H));       \\",
          "",
          "[Added Lines]",
          "1167:       obj->tio.object->reactors = (BITCODE_H *)calloc (                       \\",
          "1168:           obj->tio.object->num_reactors, sizeof (BITCODE_H));                 \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1177:   if (_ent->num_reactors > 0)                                                 \\",
          "1178:     {                                                                         \\",
          "1179:       HANDLE_VECTOR_CHKCOUNT (reactors, _ent->num_reactors)                   \\",
          "1181:       for (vcount = 0; vcount < _ent->num_reactors; vcount++)                 \\",
          "1182:         {                                                                     \\",
          "1183:           VALUE_HANDLE_N (_ent->reactors[vcount], reactors, vcount, code,     \\",
          "",
          "[Removed Lines]",
          "1180:       _ent->reactors = calloc (_ent->num_reactors, sizeof (BITCODE_H));       \\",
          "",
          "[Added Lines]",
          "1180:       _ent->reactors                                                          \\",
          "1181:           = (BITCODE_H *)calloc (_ent->num_reactors, sizeof (BITCODE_H));     \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1389:         if (obj->parent->opts & DWG_OPTS_INJSON)                              \\",
          "1390:           obj->name = strdup (obj->name);                                     \\",
          "1391:       }                                                                       \\",
          "1393:     if (!_ent)                                                                \\",
          "1394:       return DWG_ERR_OUTOFMEM;                                                \\",
          "1396:     if (!_ent->tio.token)                                                     \\",
          "1397:       return DWG_ERR_OUTOFMEM;                                                \\",
          "1398:     _ent->dwg = obj->parent;                                                  \\",
          "",
          "[Removed Lines]",
          "1392:     _ent = obj->tio.entity = calloc (1, sizeof (Dwg_Object_Entity));          \\",
          "1395:     _ent->tio.token = calloc (1, sizeof (Dwg_Entity_##token));                \\",
          "",
          "[Added Lines]",
          "1393:     _ent = obj->tio.entity                                                    \\",
          "1394:         = (Dwg_Object_Entity *)calloc (1, sizeof (Dwg_Object_Entity));        \\",
          "1397:     _ent->tio.token                                                           \\",
          "1398:         = (Dwg_Entity_##token *)calloc (1, sizeof (Dwg_Entity_##token));      \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1415:     if (error)                                                                \\",
          "1416:       return error;                                                           \\",
          "1417:     SINCE (R_2007)                                                            \\",
          "1427:     return error;                                                             \\",
          "1428:   }                                                                           \\",
          "1429:                                                                               \\",
          "1431:   static int dwg_decode_##token##_private (                                   \\",
          "1433:       Dwg_Object *restrict obj)                                               \\",
          "1434:   {                                                                           \\",
          "1435:     BITCODE_BL vcount, rcount3, rcount4;                                      \\",
          "",
          "[Removed Lines]",
          "1418:       {                                                                       \\",
          "1419:         Bit_Chain obj_dat = *dat, str_dat = *dat;                             \\",
          "1420:         error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,   \\",
          "1421:                                               obj);                           \\",
          "1422:       }                                                                       \\",
          "1423:     else                                                                      \\",
          "1424:       {                                                                       \\",
          "1425:         error = dwg_decode_##token##_private (dat, &hdl_dat, dat, obj);       \\",
          "1426:       }                                                                       \\",
          "1430:   GCC30_DIAG_IGNORE (-Wformat-nonliteral)                                     \\",
          "1432:       Bit_Chain *dat, Bit_Chain *hdl_dat, Bit_Chain *str_dat,\\",
          "",
          "[Added Lines]",
          "1421:     {                                                                         \\",
          "1422:       Bit_Chain obj_dat = *dat, str_dat = *dat;                               \\",
          "1423:       error                                                                   \\",
          "1424:           = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat, obj); \\",
          "1425:     }                                                                         \\",
          "1426:     else { error = dwg_decode_##token##_private (dat, &hdl_dat, dat, obj); }  \\",
          "1430:   GCC30_DIAG_IGNORE (-Wformat - nonliteral)                                   \\",
          "1432:       Bit_Chain *dat, Bit_Chain *hdl_dat, Bit_Chain *str_dat,                 \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1469:     Dwg_Object_##token *_obj;                                                 \\",
          "1470:     LOG_INFO (\"Add object \" #token \" [%d] \", obj->index)                      \\",
          "1471:     obj->supertype = DWG_SUPERTYPE_OBJECT;                                    \\",
          "1473:     if (!obj->tio.object)                                                     \\",
          "1474:       return DWG_ERR_OUTOFMEM;                                                \\",
          "1475:     _obj = obj->tio.object->tio.token                                         \\",
          "1477:     if (!_obj)                                                                \\",
          "1478:       {                                                                       \\",
          "1479:         free (obj->tio.object);                                               \\",
          "",
          "[Removed Lines]",
          "1472:     obj->tio.object = calloc (1, sizeof (Dwg_Object_Object));                 \\",
          "1476:         = calloc (1, sizeof (Dwg_Object_##token));                            \\",
          "",
          "[Added Lines]",
          "1472:     obj->tio.object                                                           \\",
          "1473:         = (Dwg_Object_Object *)calloc (1, sizeof (Dwg_Object_Object));        \\",
          "1477:         = (Dwg_Object_##token *)calloc (1, sizeof (Dwg_Object_##token));      \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1520:     if (error)                                                                \\",
          "1521:       return error;                                                           \\",
          "1522:     SINCE (R_2007)                                                            \\",
          "1532:     return error;                                                             \\",
          "1533:   }                                                                           \\",
          "1534:                                                                               \\",
          "",
          "[Removed Lines]",
          "1523:       {                                                                       \\",
          "1524:         Bit_Chain obj_dat = *dat, str_dat = *dat;                             \\",
          "1525:         error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,   \\",
          "1526:                                               obj);                           \\",
          "1527:       }                                                                       \\",
          "1528:     else                                                                      \\",
          "1529:       {                                                                       \\",
          "1530:         error = dwg_decode_##token##_private (dat, &hdl_dat, dat, obj);       \\",
          "1531:       }                                                                       \\",
          "",
          "[Added Lines]",
          "1524:     {                                                                         \\",
          "1525:       Bit_Chain obj_dat = *dat, str_dat = *dat;               \\",
          "1526:       error                                                                   \\",
          "1527:           = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat, obj); \\",
          "1528:     }                                                                         \\",
          "1529:     else { error = dwg_decode_##token##_private (dat, &hdl_dat, dat, obj); }  \\",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   strncpy (version, (const char *)dat->chain, 6);",
          "192:   version[6] = '\\0';",
          "195:   for (i = 0; i < R_AFTER; i++)",
          "196:     {",
          "197:       if (strEQ (version, version_codes[(Dwg_Version_Type)i]))",
          "",
          "[Removed Lines]",
          "194:   dwg->header.from_version = 0;",
          "",
          "[Added Lines]",
          "194:   dwg->header.from_version = R_INVALID;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:       return DWG_ERR_INVALIDDWG;",
          "322:     }",
          "323:   if (dwg->num_objects % REFS_PER_REALLOC == 0)",
          "327: #define PREP_TABLE(token)                                                     \\",
          "328:   Dwg_Object *obj = &dwg->object[num + i];                                    \\",
          "330:   if (dat->byte > dat->size)                                                  \\",
          "331:     {                                                                         \\",
          "332:       free (_obj);                                                            \\",
          "333:       return DWG_ERR_INVALIDDWG;                                              \\",
          "334:     }                                                                         \\",
          "336:   if (!_obj || !obj->tio.object)                                              \\",
          "337:     {                                                                         \\",
          "338:       if (_obj) free (_obj);                                                  \\",
          "",
          "[Removed Lines]",
          "324:     dwg->object = realloc (dwg->object, old_size + size + REFS_PER_REALLOC);",
          "329:   Dwg_Object_##token *_obj = calloc (1, sizeof (Dwg_Object_##token));         \\",
          "335:   obj->tio.object = calloc (1, sizeof (Dwg_Object_Object));                   \\",
          "",
          "[Added Lines]",
          "324:     dwg->object = (Dwg_Object*)realloc (dwg->object, old_size + size + REFS_PER_REALLOC);",
          "329:   Dwg_Object_##token *_obj = (Dwg_Object_##token*)calloc (1, sizeof (Dwg_Object_##token)); \\",
          "335:   obj->tio.object = (Dwg_Object_Object*)calloc (1, sizeof (Dwg_Object_Object)); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "652:   {",
          "653:     int i;",
          "655:     Bit_Chain *hdl_dat = dat;",
          "656:     dat->byte = 0x06;",
          "",
          "[Removed Lines]",
          "654:     struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "654:     Dwg_Header *_obj = (Dwg_Header *)&dwg->header;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "864:   {",
          "865:     int i;",
          "867:     Bit_Chain *hdl_dat = dat;",
          "868:     dat->byte = 0x06;",
          "",
          "[Removed Lines]",
          "866:     struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "866:     Dwg_Header *_obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "944:   if (dwg->header.num_sections == 6 && dwg->header.version >= R_2000)",
          "945:     {",
          "946:       int i;",
          "948:       Bit_Chain *hdl_dat = dat;",
          "949:       BITCODE_BL end_address",
          "950:           = dwg->header.section[SECTION_AUXHEADER_R2000].address",
          "",
          "[Removed Lines]",
          "947:       struct Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "[Added Lines]",
          "947:       Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1109:       i = dwg->num_classes;",
          "1110:       if (i == 0)",
          "1112:       else",
          "1115:       if (!dwg->dwg_class)",
          "1116:         {",
          "1117:           LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "1111:         dwg->dwg_class = malloc (sizeof (Dwg_Class));",
          "1113:         dwg->dwg_class",
          "1114:             = realloc (dwg->dwg_class, (i + 1) * sizeof (Dwg_Class));",
          "",
          "[Added Lines]",
          "1111:         dwg->dwg_class = (Dwg_Class *)malloc (sizeof (Dwg_Class));",
          "1113:         dwg->dwg_class = (Dwg_Class *)realloc (dwg->dwg_class,",
          "1114:                                                (i + 1) * sizeof (Dwg_Class));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1362:           LOG_WARN (\"Only %d num_sections, but 2ndheader found, extending to 4\",",
          "1363:                     dwg->header.num_sections);",
          "1368:           memset (&dwg->header.section[SECTION_2NDHEADER_R13], 0,",
          "1369:                   sizeof (Dwg_Section));",
          "1370:         }",
          "",
          "[Removed Lines]",
          "1365:           dwg->header.section",
          "1366:               = realloc (dwg->header.section,",
          "1367:                          dwg->header.num_sections * sizeof (Dwg_Section));",
          "",
          "[Added Lines]",
          "1365:           dwg->header.section = (Dwg_Section *)realloc (",
          "1366:               dwg->header.section,",
          "1367:               dwg->header.num_sections * sizeof (Dwg_Section));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1796: {",
          "1797:   if (dwg->header.num_sections == 0)",
          "1798:     {",
          "1800:     }",
          "1801:   else",
          "1802:     {",
          "1806:       memset (&dwg->header.section[dwg->header.num_sections], 0,",
          "1807:               sizeof (Dwg_Section));",
          "1808:     }",
          "",
          "[Removed Lines]",
          "1799:       dwg->header.section = calloc (1, sizeof (Dwg_Section));",
          "1803:       dwg->header.section",
          "1804:           = realloc (dwg->header.section,",
          "1805:                      sizeof (Dwg_Section) * (dwg->header.num_sections + 1));",
          "",
          "[Added Lines]",
          "1799:       dwg->header.section = (Dwg_Section*)calloc (1, sizeof (Dwg_Section));",
          "1803:       dwg->header.section = (Dwg_Section *)realloc (",
          "1804:           dwg->header.section,",
          "1805:           sizeof (Dwg_Section) * (dwg->header.num_sections + 1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2218:               error |= DWG_ERR_VALUEOUTOFBOUNDS;",
          "2219:             }",
          "2220:           LOG_INFO (\"Page count %u in area %d\\n\", info->num_sections, i);",
          "2222:           if (!info->sections)",
          "2223:             {",
          "2224:               free (decomp);",
          "",
          "[Removed Lines]",
          "2221:           info->sections = calloc (info->num_sections, sizeof (Dwg_Section *));",
          "",
          "[Added Lines]",
          "2221:           info->sections = (Dwg_Section **)calloc (info->num_sections, sizeof (Dwg_Section *));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2260:                 { // gap/unused data",
          "2261:                   LOG_TRACE (\"Page: %4\" PRId32 \" (-)\", page.number)",
          "2262:                   info->num_sections++;",
          "2266:                   info->sections[info->num_sections - 1] = NULL;",
          "2267:                 }",
          "2268:               else if (page.address < prev_address)",
          "",
          "[Removed Lines]",
          "2263:                   info->sections",
          "2264:                       = realloc (info->sections,",
          "2265:                                  info->num_sections * sizeof (Dwg_Section *));",
          "",
          "[Added Lines]",
          "2263:                   info->sections = (Dwg_Section **)realloc (",
          "2264:                       info->sections,",
          "2265:                       info->num_sections * sizeof (Dwg_Section *));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2879: summaryinfo_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "2880: {",
          "2881:   Bit_Chain *str_dat = dat;",
          "2883:   Dwg_Object *obj = NULL;",
          "2884:   int error = 0;",
          "",
          "[Removed Lines]",
          "2882:   struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "[Added Lines]",
          "2882:   Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2926: appinfo_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "2927: {",
          "2928:   Bit_Chain *str_dat = dat;",
          "2930:   Dwg_Object *obj = NULL;",
          "2931:   int error = 0;",
          "2932:   if (!dat->chain || !dat->size)",
          "",
          "[Removed Lines]",
          "2929:   struct Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "[Added Lines]",
          "2929:   Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2980: static int",
          "2981: filedeplist_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "2982: {",
          "2984:   Dwg_Object *obj = NULL; // for obj->size overflow check",
          "2985:   int error = 0;",
          "2986:   BITCODE_BL vcount;",
          "",
          "[Removed Lines]",
          "2983:   struct Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "[Added Lines]",
          "2983:   Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3027: security_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "3028: {",
          "3029:   Bit_Chain *str_dat = dat;",
          "3031:   Dwg_Object *obj = NULL;",
          "3032:   int error = 0;",
          "",
          "[Removed Lines]",
          "3030:   struct Dwg_Security *_obj = &dwg->security;",
          "",
          "[Added Lines]",
          "3030:   Dwg_Security *_obj = &dwg->security;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3121: {",
          "3122:   Bit_Chain old_dat, sec_dat = { 0 };",
          "3123:   int error;",
          "3125:   if (!dwg->header.vbaproj_address)",
          "3126:     return 0;",
          "",
          "[Removed Lines]",
          "3124:   struct Dwg_VBAProject *_obj = &dwg->vbaproject;",
          "",
          "[Added Lines]",
          "3124:   Dwg_VBAProject *_obj = &dwg->vbaproject;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3157: {",
          "3158:   Bit_Chain old_dat, sec_dat = { 0 };",
          "3159:   int error;",
          "3162:   error = read_2004_compressed_section (dat, dwg, &sec_dat, SECTION_APPINFOHISTORY);",
          "3163:   if (error >= DWG_ERR_CRITICAL || !sec_dat.chain)",
          "",
          "[Removed Lines]",
          "3160:   struct Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "[Added Lines]",
          "3160:   Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3189: revhistory_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "3190: {",
          "3191:   Bit_Chain *str_dat = dat;",
          "3193:   Dwg_Object *obj = NULL;",
          "3194:   int error = 0;",
          "",
          "[Removed Lines]",
          "3192:   struct Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "[Added Lines]",
          "3192:   Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3207: {",
          "3208:   Bit_Chain old_dat, sec_dat = { 0 };",
          "3209:   int error;",
          "3212:   error = read_2004_compressed_section (dat, dwg, &sec_dat, SECTION_REVHISTORY);",
          "3213:   if (error >= DWG_ERR_CRITICAL || !sec_dat.chain)",
          "",
          "[Removed Lines]",
          "3210:   struct Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "[Added Lines]",
          "3210:   Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3238: {",
          "3239:   Bit_Chain old_dat, sec_dat = { 0 };",
          "3240:   int error;",
          "3244:   error = read_2004_compressed_section (dat, dwg, &sec_dat, SECTION_OBJFREESPACE);",
          "",
          "[Removed Lines]",
          "3241:   struct Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "[Added Lines]",
          "3241:   Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3270: template_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "3271: {",
          "3272:   Bit_Chain *str_dat = dat;",
          "3274:   Dwg_Object *obj = NULL;",
          "3275:   int error = 0;",
          "",
          "[Removed Lines]",
          "3273:   struct Dwg_Template *_obj = &dwg->template;",
          "",
          "[Added Lines]",
          "3273:   Dwg_Template *_obj = &dwg->Template;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3328: acds_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "3329: {",
          "3330:   Bit_Chain *str_dat = dat;",
          "3332:   Dwg_Object *obj = NULL;",
          "3333:   BITCODE_BL rcount3 = 0, rcount4, vcount;",
          "3334:   int error = 0;",
          "",
          "[Removed Lines]",
          "3331:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "3331:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3545:   Dwg_Section *section;",
          "3547:   {",
          "3549:     Dwg_Object *obj = NULL;",
          "3550:     Bit_Chain *hdl_dat = dat;",
          "3551:     int i;",
          "",
          "[Removed Lines]",
          "3548:     struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "3548:     Dwg_Header *_obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3653:   hdl_dat = *dat;",
          "3654:   {",
          "3655:     int i;",
          "3657:     Dwg_Object *obj = NULL;",
          "3659:     dat->byte = 0x06;",
          "",
          "[Removed Lines]",
          "3656:     struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "3656:     Dwg_Header *_obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3932:                           && appid->entries[j]->absolute_ref",
          "3933:                                  == ref.absolute_ref)",
          "3934:                         {",
          "3936:                               = obj->tio.MLEADERSTYLE;",
          "3938:                           LOG_TRACE (",
          "3939:                               \"EED found ACAD_MLEADERVER %lX\\n\",",
          "3940:                               ref.absolute_ref);",
          "",
          "[Removed Lines]",
          "3935:                           Dwg_Object_MLEADERSTYLE *o",
          "3937:                           o->class_version = 2; // real value with code 70 follows",
          "",
          "[Added Lines]",
          "3935:                           Dwg_Object_MLEADERSTYLE *mstyle",
          "3937:                           mstyle->class_version = 2; // real value with code 70 follows",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4447:   if (!dwg->num_object_refs)",
          "4449:   else if (dwg->num_object_refs % REFS_PER_REALLOC == 0)",
          "4450:     dwg->object_ref",
          "4453:   if (!dwg->object_ref)",
          "4454:     {",
          "4455:       LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "4448:     dwg->object_ref = calloc (REFS_PER_REALLOC, sizeof (Dwg_Object_Ref *));",
          "4451:         = realloc (dwg->object_ref, (dwg->num_object_refs + REFS_PER_REALLOC)",
          "",
          "[Added Lines]",
          "4448:     dwg->object_ref = (Dwg_Object_Ref **)calloc (REFS_PER_REALLOC, sizeof (Dwg_Object_Ref *));",
          "4451:         = (Dwg_Object_Ref **)realloc (dwg->object_ref, (dwg->num_object_refs + REFS_PER_REALLOC)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4828:             length = bit_read_RS (dat);",
          "4829:             if ((short)length > 0 && dat->byte + (length * 2) <= end_address)",
          "4830:               {",
          "4832:                 if (!rbuf->value.str.u.wdata)",
          "4833:                   {",
          "4834:                     LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "4831:                 rbuf->value.str.u.wdata = calloc (length + 1, 2);",
          "",
          "[Added Lines]",
          "4831:                 rbuf->value.str.u.wdata = (BITCODE_TU)calloc (length + 1, 2);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5106:         dwg->object",
          "5107:             = (Dwg_Object *)malloc (REFS_PER_REALLOC * sizeof (Dwg_Object));",
          "5108:       else if (num % REFS_PER_REALLOC == 0)",
          "5111:       if (!dwg->object)",
          "5112:         {",
          "5113:           LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "5109:         dwg->object = realloc (dwg->object,",
          "5110:                                (num + REFS_PER_REALLOC) * sizeof (Dwg_Object));",
          "",
          "[Added Lines]",
          "5109:         dwg->object = (Dwg_Object *)realloc (",
          "5110:             dwg->object, (num + REFS_PER_REALLOC) * sizeof (Dwg_Object));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5255:   BITCODE_BL num = dwg->num_objects;",
          "5256:   int realloced = 0;",
          "5257:   if (!num)",
          "5259:   else if (num % REFS_PER_REALLOC == 0)",
          "5260:     {",
          "5261:       Dwg_Object *restrict old = dwg->object;",
          "5264:       realloced = old != dwg->object;",
          "5265:     }",
          "5266:   if (!dwg->object)",
          "",
          "[Removed Lines]",
          "5258:     dwg->object = calloc (REFS_PER_REALLOC, sizeof (Dwg_Object));",
          "5262:       dwg->object = realloc (dwg->object,",
          "5263:                              (num + REFS_PER_REALLOC) * sizeof (Dwg_Object));",
          "",
          "[Added Lines]",
          "5258:     dwg->object = (Dwg_Object *)calloc (REFS_PER_REALLOC, sizeof (Dwg_Object));",
          "5262:       dwg->object = (Dwg_Object *)realloc (",
          "5263:           dwg->object, (num + REFS_PER_REALLOC) * sizeof (Dwg_Object));",
          "",
          "---------------"
        ],
        "src/decode_r2007.c||src/decode_r2007.c": [
          "File: src/decode_r2007.c -> src/decode_r2007.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:       LOG_ERROR (\"Invalid max decompression size %\" PRIu64, max_decomp_size);",
          "753:       return DWG_ERR_INVALIDDWG;",
          "754:     }",
          "756:   if (decomp == NULL)",
          "757:     {",
          "758:       LOG_ERROR (\"Out of memory\")",
          "",
          "[Removed Lines]",
          "755:   decomp = calloc (max_decomp_size, 1);",
          "",
          "[Added Lines]",
          "755:   decomp = (BITCODE_RC *)calloc (max_decomp_size, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1693: {",
          "1694:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1697:   Dwg_Object *obj = NULL;",
          "1698:   int error = 0;",
          "",
          "[Removed Lines]",
          "1696:   struct Dwg_VBAProject *_obj = &dwg->vbaproject;",
          "",
          "[Added Lines]",
          "1696:   Dwg_VBAProject *_obj = &dwg->vbaproject;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1732: {",
          "1733:   static Bit_Chain old_dat, sec_dat = { 0 };",
          "1734:   Bit_Chain *str_dat;",
          "1736:   Dwg_Object *obj = NULL;",
          "1737:   int error;",
          "1738:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "1735:   struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "[Added Lines]",
          "1735:   Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1773: {",
          "1774:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1775:   Bit_Chain *str_dat;",
          "1777:   Dwg_Object *obj = NULL;",
          "1778:   int error = 0;",
          "1779:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "1776:   struct Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "[Added Lines]",
          "1776:   Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1813: {",
          "1814:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1817:   Dwg_Object *obj = NULL;",
          "1818:   int error = 0;",
          "",
          "[Removed Lines]",
          "1816:   struct Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "[Added Lines]",
          "1816:   Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1854: {",
          "1855:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1858:   Dwg_Object *obj = NULL;",
          "1859:   int error = 0;",
          "1860:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "1857:   struct Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "[Added Lines]",
          "1857:   Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1894: {",
          "1895:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1898:   Dwg_Object *obj = NULL;",
          "1899:   int error = 0;",
          "1900:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "1897:   struct Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "[Added Lines]",
          "1897:   Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1935: {",
          "1936:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1939:   Dwg_Object *obj = NULL;",
          "1940:   int error = 0;",
          "1941:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "1938:   struct Dwg_Template *_obj = &dwg->template;",
          "",
          "[Added Lines]",
          "1938:   Dwg_Template *_obj = &dwg->Template;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1980:   Bit_Chain old_dat, sec_dat = { 0 };",
          "1981:   int error;",
          "1982:   Bit_Chain *str_dat;",
          "1984:   Dwg_Object *obj = NULL;",
          "1985:   BITCODE_BL vcount;",
          "1986:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "1983:   struct Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "[Added Lines]",
          "1983:   Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2021:   Bit_Chain old_dat, sec_dat = { 0 };",
          "2022:   int error;",
          "2023:   Bit_Chain *str_dat;",
          "2025:   Dwg_Object *obj = NULL;",
          "2026:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "2024:   struct Dwg_Security *_obj = &dwg->security;",
          "",
          "[Added Lines]",
          "2024:   Dwg_Security *_obj = &dwg->security;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2097: acds_private (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "2098: {",
          "2099:   Bit_Chain *str_dat = dat;",
          "2101:   Dwg_Object *obj = NULL;",
          "2102:   int error = 0;",
          "2103:   BITCODE_BL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "2100:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "2100:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2121:   int error;",
          "2122:   Bit_Chain *str_dat;",
          "2123:   const char *secname = \"AcDsPrototype_1b\";",
          "2125:   Dwg_Object *obj = NULL;",
          "2126:   BITCODE_RL rcount1 = 0, rcount2 = 0;",
          "",
          "[Removed Lines]",
          "2124:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "2124:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------"
        ],
        "src/dwg.c||src/dwg.c": [
          "File: src/dwg.c -> src/dwg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086: {",
          "1087:   Dwg_Data *dwg = owner->parent;",
          "1088:   Dwg_Version_Type version = dwg->header.version;",
          "1090:   Dwg_Object_Entity *ent = owner->tio.entity;",
          "1091:   Dwg_Object *obj = dwg_next_object (current);",
          "",
          "[Removed Lines]",
          "1089:   const Dwg_Object_Type type = owner->type;",
          "",
          "[Added Lines]",
          "1089:   const Dwg_Object_Type type = (const Dwg_Object_Type)owner->type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1295:             {",
          "1296:               if (!_hdr->endblk_entity)",
          "1297:                 {",
          "1299:                   if (_hdr->endblk_entity)",
          "1300:                     {",
          "1301:                       _hdr->endblk_entity->obj = obj;",
          "",
          "[Removed Lines]",
          "1298:                   _hdr->endblk_entity = calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "1298:                   _hdr->endblk_entity = (BITCODE_H)calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "---------------"
        ],
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1771:           while (FIELD_VALUE (block_size[i++]) > 0 && AVAIL_BITS (dat) >= 16); // crc RS",
          "1775:           num_blocks = i - 1;",
          "1776:           FIELD_VALUE (num_blocks) = num_blocks;",
          "1777:           LOG_TRACE (\"num_blocks: \" FORMAT_BL \"\\n\", FIELD_VALUE (num_blocks));",
          "",
          "[Removed Lines]",
          "1774:           FIELD_VALUE (acis_data) = malloc (total_size + 1);",
          "",
          "[Added Lines]",
          "1774:           FIELD_VALUE (acis_data) = (BITCODE_RC *)malloc (total_size + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1813:           FIELD_VALUE (num_blocks) = 2;",
          "1814:           LOG_TRACE (\"num_blocks: 2\\n\");",
          "1817:           FIELD_TFv (encr_sat_data[0], 15, 1); // \"ACIS BinaryFile\"",
          "1818:           FIELD_VALUE (block_size[0]) = 15;",
          "1819:           FIELD_RL (block_size[1], 0);",
          "",
          "[Removed Lines]",
          "1815:           FIELD_VALUE (block_size) = calloc (3, sizeof (BITCODE_RL));",
          "1816:           FIELD_VALUE (encr_sat_data) = calloc (3, sizeof (char*));",
          "",
          "[Added Lines]",
          "1815:           FIELD_VALUE (block_size) = (BITCODE_BL*)calloc (3, sizeof (BITCODE_BL));",
          "1816:           FIELD_VALUE (encr_sat_data) = (char**)calloc (3, sizeof (char*));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1871:                   VALUE_RL (0, 0);",
          "1872:                   return error;",
          "1873:                 }",
          "1875:               FIELD_VALUE (block_size[0]) = strlen ((char*)FIELD_VALUE (acis_data));",
          "1876:               FIELD_VALUE (block_size[1]) = 0;",
          "1877:               LOG_TRACE (\"default block_size[0] = %d\\n\", (int)FIELD_VALUE (block_size[0]));",
          "",
          "[Removed Lines]",
          "1874:               FIELD_VALUE (block_size) = calloc (2, sizeof (BITCODE_BL));",
          "",
          "[Added Lines]",
          "1874:               FIELD_VALUE (block_size) = (BITCODE_BL*)calloc (2, sizeof (BITCODE_BL));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1907:             FIELD_TF (encr_sat_data[0], 15, 1);",
          "1908:           if (!FIELD_VALUE (block_size))",
          "1909:             {",
          "1911:               FIELD_VALUE (block_size[0]) = 15;",
          "1912:               if (!FIELD_VALUE (acis_data))",
          "1913:                 {",
          "",
          "[Removed Lines]",
          "1910:               FIELD_VALUE (block_size) = calloc (3, sizeof (BITCODE_BL));",
          "",
          "[Added Lines]",
          "1910:               FIELD_VALUE (block_size) = (BITCODE_BL*)calloc (3, sizeof (BITCODE_BL));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5816:       for (vcount=0; bit_position (hdl_dat) < obj->handlestream_size; vcount++)",
          "5817:         {",
          "5818:           FIELD_VALUE (objid_handles) = vcount",
          "5820:                                    (vcount+1) * sizeof (Dwg_Object_Ref))",
          "5822:           FIELD_HANDLE_N (objid_handles[vcount], vcount, ANYCODE, 0);",
          "5823:           if (!FIELD_VALUE (objid_handles[vcount]))",
          "5824:             {",
          "",
          "[Removed Lines]",
          "5819:             ? realloc (FIELD_VALUE (objid_handles),",
          "5821:             : malloc (sizeof (Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "5819:             ? (BITCODE_H*)realloc (FIELD_VALUE (objid_handles),",
          "5821:             : (BITCODE_H*)malloc (sizeof (Dwg_Object_Ref));",
          "",
          "---------------"
        ],
        "src/dwg_api.c||src/dwg_api.c": [
          "File: src/dwg_api.c -> src/dwg_api.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:     dwg_point_2d *point;",
          "1002:     Dwg_DYNAPI_field field;",
          "1003:     int error;",
          "1005:     if (!obj || !obj->name)",
          "1006:       return NULL;",
          "1009:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &point,",
          "1010:                                   &field))",
          "1011:       {",
          "1012:         free (point);",
          "1014:       }",
          "1015:     if (strEQc (field.type, \"2RD\") || strEQc (field.type, \"2BD\")",
          "1016:         || strEQc (field.type, \"2DPOINT\"))",
          "",
          "[Removed Lines]",
          "1004:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "1008:     point = calloc (1, sizeof (dwg_point_2d));",
          "1013:         return false;",
          "",
          "[Added Lines]",
          "1004:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1005:         (const dwg_obj_generic *)_obj, &error);",
          "1009:     point = (dwg_point_2d *)calloc (1, sizeof (dwg_point_2d));",
          "1014:         return NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1034: {",
          "1035: #  ifndef HAVE_NONNULL",
          "1036:   if (!_obj || !fieldname || !point)",
          "1038: #  endif",
          "1039:   {",
          "1040:     dwg_point_2d dummy;",
          "1041:     Dwg_DYNAPI_field field;",
          "1042:     int error;",
          "1044:     if (!obj || !obj->name)",
          "1047:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1048:                                   &field))",
          "",
          "[Removed Lines]",
          "1037:     return NULL;",
          "1043:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "1045:       return NULL;",
          "",
          "[Added Lines]",
          "1038:     return false;",
          "1044:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1045:         (const dwg_obj_generic *)_obj, &error);",
          "1047:       return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1076:     dwg_point_3d *point;",
          "1077:     Dwg_DYNAPI_field field;",
          "1078:     int error;",
          "1080:     if (!obj || !obj->name)",
          "1081:       return NULL;",
          "1084:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &point,",
          "1085:                                   &field))",
          "1086:       {",
          "",
          "[Removed Lines]",
          "1079:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "1083:     point = calloc (1, sizeof (dwg_point_3d));",
          "",
          "[Added Lines]",
          "1081:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1082:         (const dwg_obj_generic *)_obj, &error);",
          "1086:     point = (dwg_point_3d *)calloc (1, sizeof (dwg_point_3d));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1115:     dwg_point_3d dummy;",
          "1116:     Dwg_DYNAPI_field field;",
          "1117:     int error;",
          "1119:     if (!obj || !obj->name)",
          "1122:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "1123:                                   &field))",
          "",
          "[Removed Lines]",
          "1118:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "1120:       return NULL;",
          "",
          "[Added Lines]",
          "1121:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1122:         (const dwg_obj_generic *)_obj, &error);",
          "1124:       return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1149:     char *str;",
          "1150:     Dwg_DYNAPI_field field;",
          "1151:     int error;",
          "1153:     if (!obj || !obj->name)",
          "1154:       return NULL;",
          "",
          "[Removed Lines]",
          "1152:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1156:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1157:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1183:     char *str;",
          "1184:     Dwg_DYNAPI_field field;",
          "1185:     int error;",
          "1187:     if (!obj || !obj->name)",
          "1188:       return NULL;",
          "",
          "[Removed Lines]",
          "1186:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1191:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1192:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1215:     char *dummy;",
          "1216:     Dwg_DYNAPI_field field;",
          "1217:     int error;",
          "1219:     if (!obj || !obj->name)",
          "1220:       return false;",
          "",
          "[Removed Lines]",
          "1218:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1224:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1225:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1248:     char *dummy;",
          "1249:     Dwg_DYNAPI_field field;",
          "1250:     int error;",
          "1252:     if (!obj || !obj->name)",
          "1253:       return false;",
          "",
          "[Removed Lines]",
          "1251:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1258:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1259:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1280:     BITCODE_BD num;",
          "1281:     Dwg_DYNAPI_field field;",
          "1282:     int error;",
          "1284:     if (!obj || !obj->name)",
          "1285:       return 0.0;",
          "",
          "[Removed Lines]",
          "1283:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1291:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1292:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1312:     BITCODE_BD dummy;",
          "1313:     Dwg_DYNAPI_field field;",
          "1314:     int error;",
          "1316:     if (!obj || !obj->name)",
          "1317:       return false;",
          "1318:     if (!dwg_dynapi_entity_value ((void *)_obj, obj->name, fieldname, &dummy,",
          "",
          "[Removed Lines]",
          "1315:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1324:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1325:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1343:     BITCODE_BS num;",
          "1344:     Dwg_DYNAPI_field field;",
          "1345:     int error;",
          "1347:     if (!obj || !obj->name)",
          "1348:       return 0;",
          "",
          "[Removed Lines]",
          "1346:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1356:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1357:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1375:     BITCODE_BS dummy;",
          "1376:     Dwg_DYNAPI_field field;",
          "1377:     int error;",
          "1379:     if (!obj || !obj->name)",
          "1380:       return false;",
          "",
          "[Removed Lines]",
          "1378:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1389:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1390:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1407:     BITCODE_BL num;",
          "1408:     Dwg_DYNAPI_field field;",
          "1409:     int error;",
          "1411:     if (!obj || !obj->name)",
          "1412:       return 0;",
          "",
          "[Removed Lines]",
          "1410:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1422:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1423:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1440:     BITCODE_BL dummy;",
          "1441:     Dwg_DYNAPI_field field;",
          "1442:     int error;",
          "1444:     if (!obj || !obj->name)",
          "1445:       return false;",
          "",
          "[Removed Lines]",
          "1443:     const Dwg_Object *obj = dwg_obj_generic_to_object (_obj, &error);",
          "",
          "[Added Lines]",
          "1456:     const Dwg_Object *obj = (const Dwg_Object *)dwg_obj_generic_to_object (",
          "1457:         (const dwg_obj_generic *)_obj, &error);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "12395:                             int *restrict error)",
          "12396: {",
          "12397:   dwg_point_3d *ptx",
          "12399:   if (ptx)",
          "12400:     {",
          "12401:       BITCODE_BS i;",
          "",
          "[Removed Lines]",
          "12398:       = calloc (spline->num_fit_pts, sizeof (dwg_point_3d));",
          "",
          "[Added Lines]",
          "12412:       = (dwg_point_3d *)calloc (spline->num_fit_pts, sizeof (dwg_point_3d));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "12420: dwg_ent_spline_get_ctrl_pts (const dwg_ent_spline *restrict spline,",
          "12421:                              int *restrict error)",
          "12422: {",
          "12425:   if (ptx)",
          "12426:     {",
          "12427:       BITCODE_BL i;",
          "",
          "[Removed Lines]",
          "12423:   dwg_spline_control_point *ptx",
          "12424:       = calloc (spline->num_ctrl_pts, sizeof (dwg_spline_control_point));",
          "",
          "[Added Lines]",
          "12437:   dwg_spline_control_point *ptx = (dwg_spline_control_point *)calloc (",
          "12438:       spline->num_ctrl_pts, sizeof (dwg_spline_control_point));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "14478:       if (!num_points || *error)",
          "14479:         return NULL;",
          "14481:       if (!ptx)",
          "14482:         {",
          "14483:           LOG_ERROR (\"%s: Out of memory\", __FUNCTION__);",
          "",
          "[Removed Lines]",
          "14480:       ptx = calloc (num_points, sizeof (dwg_point_2d));",
          "",
          "[Added Lines]",
          "14494:       ptx = (dwg_point_2d *)calloc (num_points, sizeof (dwg_point_2d));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "14736:       if (!num_points || *error)",
          "14737:         return NULL;",
          "14739:       if (!ptx)",
          "14740:         {",
          "14741:           LOG_ERROR (\"%s: Out of memory\", __FUNCTION__);",
          "",
          "[Removed Lines]",
          "14738:       ptx = calloc (num_points, sizeof (dwg_point_3d));",
          "",
          "[Added Lines]",
          "14752:       ptx = (dwg_point_3d *)calloc (num_points, sizeof (dwg_point_3d));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "15729: dwg_ent_image_get_clip_verts (const dwg_ent_image *restrict image,",
          "15730:                               int *restrict error)",
          "15731: {",
          "15733:   if (ptx)",
          "15734:     {",
          "15735:       BITCODE_BL i;",
          "",
          "[Removed Lines]",
          "15732:   BITCODE_2RD *ptx = calloc (image->num_clip_verts, sizeof (BITCODE_2RD));",
          "",
          "[Added Lines]",
          "15746:   BITCODE_2RD *ptx = (BITCODE_2RD *)calloc (image->num_clip_verts, sizeof (BITCODE_2RD));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "15988: dwg_mline_vertex_get_lines (const dwg_mline_vertex *restrict vertex,",
          "15989:                             int *restrict error)",
          "15990: {",
          "15992:   if (ptx)",
          "15993:     {",
          "15994:       BITCODE_BS i;",
          "",
          "[Removed Lines]",
          "15991:   dwg_mline_line *ptx = calloc (vertex->num_lines, sizeof (dwg_mline_line));",
          "",
          "[Added Lines]",
          "16005:   dwg_mline_line *ptx",
          "16006:       = (dwg_mline_line *)calloc (vertex->num_lines, sizeof (dwg_mline_line));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "16032: dwg_ent_mline_get_verts (const dwg_ent_mline *restrict mline,",
          "16033:                          int *restrict error)",
          "16034: {",
          "16036:   if (ptx)",
          "16037:     {",
          "16038:       BITCODE_BS i;",
          "",
          "[Removed Lines]",
          "16035:   dwg_mline_vertex *ptx = calloc (mline->num_verts, sizeof (dwg_mline_vertex));",
          "",
          "[Added Lines]",
          "16050:   dwg_mline_vertex *ptx = (dwg_mline_vertex *)calloc (",
          "16051:       mline->num_verts, sizeof (dwg_mline_vertex));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "16421: dwg_ent_3dsolid_get_wires (const dwg_ent_3dsolid *restrict _3dsolid,",
          "16422:                            int *restrict error)",
          "16423: {",
          "16426:   if (wire)",
          "16427:     {",
          "16428:       BITCODE_BL i;",
          "",
          "[Removed Lines]",
          "16424:   dwg_3dsolid_wire *wire",
          "16425:       = calloc (_3dsolid->num_wires, sizeof (dwg_3dsolid_wire));",
          "",
          "[Added Lines]",
          "16440:   dwg_3dsolid_wire *wire = (dwg_3dsolid_wire *)calloc (",
          "16441:       _3dsolid->num_wires, sizeof (dwg_3dsolid_wire));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "16467: dwg_ent_3dsolid_get_silhouettes (const dwg_ent_3dsolid *restrict _3dsolid,",
          "16468:                                  int *restrict error)",
          "16469: {",
          "16472:   if (sh)",
          "16473:     {",
          "16474:       BITCODE_BL i;",
          "",
          "[Removed Lines]",
          "16470:   dwg_3dsolid_silhouette *sh",
          "16471:       = calloc (_3dsolid->num_silhouettes, sizeof (dwg_3dsolid_silhouette));",
          "",
          "[Added Lines]",
          "16486:   dwg_3dsolid_silhouette *sh = (dwg_3dsolid_silhouette *)calloc (",
          "16487:       _3dsolid->num_silhouettes, sizeof (dwg_3dsolid_silhouette));",
          "",
          "---------------"
        ],
        "src/dynapi.c||src/dynapi.c": [
          "File: src/dynapi.c -> src/dynapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2: #line 1384 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "2: #line 1403 \"gen-dynapi.pl\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3144:   { \"pt\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_entity_RTEXT, pt),",
          "3145:     1,0,0, 10 },",
          "3146:   { \"extrusion\", \"BE\", sizeof (BITCODE_BE),  OFF (struct _dwg_entity_RTEXT, extrusion),",
          "3148:   { \"rotation\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_entity_RTEXT, rotation),",
          "3149:     0,0,0, 50 },",
          "3150:   { \"height\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_entity_RTEXT, height),",
          "",
          "[Removed Lines]",
          "3147:     0,0,0, 210 },",
          "",
          "[Added Lines]",
          "3147:     0,0,0, 0 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7893:     1,0,0, 0 },",
          "7894:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "7895: };",
          "7897: static const Dwg_DYNAPI_field _dwg_AcDs_Data_fields[] = {",
          "7898:   { \"record_hdrs\", \"Dwg_AcDs_Data_RecordHdr*\", sizeof (Dwg_AcDs_Data_RecordHdr*),  OFF (struct _dwg_AcDs_Data, record_hdrs),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7897: static const Dwg_DYNAPI_field _dwg_AcDs_fields[] = {",
          "7898:   { \"file_signature\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, file_signature),",
          "7899:     0,0,0, 0 },",
          "7900:   { \"file_header_size\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, file_header_size),",
          "7901:     0,0,0, 0 },",
          "7902:   { \"unknown_1\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, unknown_1),",
          "7903:     0,0,0, 0 },",
          "7904:   { \"version\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, version),",
          "7905:     0,0,0, 0 },",
          "7906:   { \"unknown_2\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, unknown_2),",
          "7907:     0,0,0, 0 },",
          "7908:   { \"ds_version\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, ds_version),",
          "7909:     0,0,0, 0 },",
          "7910:   { \"segidx_offset\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, segidx_offset),",
          "7911:     0,0,0, 0 },",
          "7912:   { \"segidx_unknown\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, segidx_unknown),",
          "7913:     0,0,0, 0 },",
          "7914:   { \"num_segidx\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, num_segidx),",
          "7915:     0,0,0, 0 },",
          "7916:   { \"schidx_segidx\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, schidx_segidx),",
          "7917:     0,0,0, 0 },",
          "7918:   { \"datidx_segidx\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, datidx_segidx),",
          "7919:     0,0,0, 0 },",
          "7920:   { \"search_segidx\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, search_segidx),",
          "7921:     0,0,0, 0 },",
          "7922:   { \"prvsav_segidx\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, prvsav_segidx),",
          "7923:     0,0,0, 0 },",
          "7924:   { \"file_size\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_AcDs, file_size),",
          "7925:     0,0,0, 0 },",
          "7926:   { \"total_segments\", \"BL\", sizeof (BITCODE_BL),  OFF (struct _dwg_AcDs, total_segments),",
          "7927:     0,0,0, 0 },",
          "7928:   { \"segidx\", \"Dwg_AcDs_SegmentIndex*\", sizeof (Dwg_AcDs_SegmentIndex*),  OFF (struct _dwg_AcDs, segidx),",
          "7929:     1,1,0, 0 },",
          "7930:   { \"datidx\", \"Dwg_AcDs_DataIndex\", sizeof (Dwg_AcDs_DataIndex),  OFF (struct _dwg_AcDs, datidx),",
          "7931:     0,0,0, 0 },",
          "7932:   { \"data\", \"Dwg_AcDs_Data*\", sizeof (Dwg_AcDs_Data*),  OFF (struct _dwg_AcDs, data),",
          "7933:     1,1,0, 0 },",
          "7934:   { \"blob01\", \"Dwg_AcDs_DataBlob\", sizeof (Dwg_AcDs_DataBlob),  OFF (struct _dwg_AcDs, blob01),",
          "7935:     0,0,0, 0 },",
          "7936:   { \"schidx\", \"Dwg_AcDs_SchemaIndex\", sizeof (Dwg_AcDs_SchemaIndex),  OFF (struct _dwg_AcDs, schidx),",
          "7937:     0,0,0, 0 },",
          "7938:   { \"schdat\", \"Dwg_AcDs_SchemaData\", sizeof (Dwg_AcDs_SchemaData),  OFF (struct _dwg_AcDs, schdat),",
          "7939:     0,0,0, 0 },",
          "7940:   { \"search\", \"Dwg_AcDs_Search\", sizeof (Dwg_AcDs_Search),  OFF (struct _dwg_AcDs, search),",
          "7941:     0,0,0, 0 },",
          "7942:   { \"segments\", \"Dwg_AcDs_Segment*\", sizeof (Dwg_AcDs_Segment*),  OFF (struct _dwg_AcDs, segments),",
          "7943:     1,1,0, 0 },",
          "7944:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "7945: };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8873:     0,0,0, 272 },",
          "8874:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "8875: };",
          "8877: static const Dwg_DYNAPI_field _dwg_MLINESTYLE_line_fields[] = {",
          "8878:   { \"parent\", \"struct _dwg_object_MLINESTYLE*\", sizeof (void *),  OFF (struct _dwg_MLINESTYLE_line, parent),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8927: static const Dwg_DYNAPI_field _dwg_MLEADER_Content_Block_fields[] = {",
          "8928:   { \"block_table\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_MLEADER_Content_Block, block_table),",
          "8929:     1,0,0, 0 },",
          "8930:   { \"normal\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_MLEADER_Content_Block, normal),",
          "8931:     1,0,0, 0 },",
          "8932:   { \"location\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_MLEADER_Content_Block, location),",
          "8933:     1,0,0, 0 },",
          "8934:   { \"scale\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_MLEADER_Content_Block, scale),",
          "8935:     1,0,0, 0 },",
          "8936:   { \"rotation\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_Block, rotation),",
          "8937:     0,0,0, 0 },",
          "8938:   { \"color\", \"CMC\", sizeof (BITCODE_CMC),  OFF (struct _dwg_MLEADER_Content_Block, color),",
          "8939:     1,0,0, 0 },",
          "8940:   { \"transform\", \"BD*\", sizeof (BITCODE_BD*),  OFF (struct _dwg_MLEADER_Content_Block, transform),",
          "8941:     1,1,0, 0 },",
          "8942:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "8943: };",
          "8945: static const Dwg_DYNAPI_field _dwg_MLEADER_Content_MText_fields[] = {",
          "8946:   { \"default_text\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_MLEADER_Content_MText, default_text),",
          "8947:     1,1,1, 0 },",
          "8948:   { \"normal\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_MLEADER_Content_MText, normal),",
          "8949:     1,0,0, 0 },",
          "8950:   { \"style\", \"H\", sizeof (BITCODE_H),  OFF (struct _dwg_MLEADER_Content_MText, style),",
          "8951:     1,0,0, 0 },",
          "8952:   { \"location\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_MLEADER_Content_MText, location),",
          "8953:     1,0,0, 0 },",
          "8954:   { \"direction\", \"3BD\", sizeof (BITCODE_3BD),  OFF (struct _dwg_MLEADER_Content_MText, direction),",
          "8955:     1,0,0, 0 },",
          "8956:   { \"rotation\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, rotation),",
          "8957:     0,0,0, 0 },",
          "8958:   { \"width\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, width),",
          "8959:     0,0,0, 0 },",
          "8960:   { \"height\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, height),",
          "8961:     0,0,0, 0 },",
          "8962:   { \"line_spacing_factor\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, line_spacing_factor),",
          "8963:     0,0,0, 0 },",
          "8964:   { \"line_spacing_style\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_MLEADER_Content_MText, line_spacing_style),",
          "8965:     0,0,0, 0 },",
          "8966:   { \"color\", \"CMC\", sizeof (BITCODE_CMC),  OFF (struct _dwg_MLEADER_Content_MText, color),",
          "8967:     1,0,0, 0 },",
          "8968:   { \"alignment\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_MLEADER_Content_MText, alignment),",
          "8969:     0,0,0, 0 },",
          "8970:   { \"flow\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_MLEADER_Content_MText, flow),",
          "8971:     0,0,0, 0 },",
          "8972:   { \"bg_color\", \"CMC\", sizeof (BITCODE_CMC),  OFF (struct _dwg_MLEADER_Content_MText, bg_color),",
          "8973:     1,0,0, 0 },",
          "8974:   { \"bg_scale\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, bg_scale),",
          "8975:     0,0,0, 0 },",
          "8976:   { \"bg_transparency\", \"BL\", sizeof (BITCODE_BL),  OFF (struct _dwg_MLEADER_Content_MText, bg_transparency),",
          "8977:     0,0,0, 0 },",
          "8978:   { \"is_bg_fill\", \"B\", sizeof (BITCODE_B),  OFF (struct _dwg_MLEADER_Content_MText, is_bg_fill),",
          "8979:     0,0,0, 0 },",
          "8980:   { \"is_bg_mask_fill\", \"B\", sizeof (BITCODE_B),  OFF (struct _dwg_MLEADER_Content_MText, is_bg_mask_fill),",
          "8981:     0,0,0, 0 },",
          "8982:   { \"col_type\", \"BS\", sizeof (BITCODE_BS),  OFF (struct _dwg_MLEADER_Content_MText, col_type),",
          "8983:     0,0,0, 0 },",
          "8984:   { \"is_height_auto\", \"B\", sizeof (BITCODE_B),  OFF (struct _dwg_MLEADER_Content_MText, is_height_auto),",
          "8985:     0,0,0, 0 },",
          "8986:   { \"col_width\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, col_width),",
          "8987:     0,0,0, 0 },",
          "8988:   { \"col_gutter\", \"BD\", sizeof (BITCODE_BD),  OFF (struct _dwg_MLEADER_Content_MText, col_gutter),",
          "8989:     0,0,0, 0 },",
          "8990:   { \"is_col_flow_reversed\", \"B\", sizeof (BITCODE_B),  OFF (struct _dwg_MLEADER_Content_MText, is_col_flow_reversed),",
          "8991:     0,0,0, 0 },",
          "8992:   { \"num_col_sizes\", \"BL\", sizeof (BITCODE_BL),  OFF (struct _dwg_MLEADER_Content_MText, num_col_sizes),",
          "8993:     0,0,0, 0 },",
          "8994:   { \"col_sizes\", \"BD*\", sizeof (BITCODE_BD*),  OFF (struct _dwg_MLEADER_Content_MText, col_sizes),",
          "8995:     1,1,0, 0 },",
          "8996:   { \"word_break\", \"B\", sizeof (BITCODE_B),  OFF (struct _dwg_MLEADER_Content_MText, word_break),",
          "8997:     0,0,0, 0 },",
          "8998:   { \"unknown\", \"B\", sizeof (BITCODE_B),  OFF (struct _dwg_MLEADER_Content_MText, unknown),",
          "8999:     0,0,0, 0 },",
          "9000:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "9001: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9457: };",
          "9459: static const Dwg_DYNAPI_field _dwg_MLEADER_Content_fields[] = {",
          "9475:     0,0,0, 0 },",
          "9483:     0,0,0, 0 },",
          "9532:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "9533: };",
          "",
          "[Removed Lines]",
          "9460:   { \"txt.default_text\", \"TV\", sizeof (BITCODE_TV),  OFF (union _dwg_MLEADER_Content, txt.default_text),",
          "9461:     1,1,1, 0 },",
          "9462:   { \"txt.normal\", \"3BD\", sizeof (BITCODE_3BD),  OFF (union _dwg_MLEADER_Content, txt.normal),",
          "9463:     1,0,0, 0 },",
          "9464:   { \"txt.style\", \"H\", sizeof (BITCODE_H),  OFF (union _dwg_MLEADER_Content, txt.style),",
          "9465:     1,0,0, 0 },",
          "9466:   { \"txt.location\", \"3BD\", sizeof (BITCODE_3BD),  OFF (union _dwg_MLEADER_Content, txt.location),",
          "9467:     1,0,0, 0 },",
          "9468:   { \"txt.direction\", \"3BD\", sizeof (BITCODE_3BD),  OFF (union _dwg_MLEADER_Content, txt.direction),",
          "9469:     1,0,0, 0 },",
          "9470:   { \"txt.rotation\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.rotation),",
          "9471:     0,0,0, 0 },",
          "9472:   { \"txt.width\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.width),",
          "9473:     0,0,0, 0 },",
          "9474:   { \"txt.height\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.height),",
          "9476:   { \"txt.line_spacing_factor\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.line_spacing_factor),",
          "9477:     0,0,0, 0 },",
          "9478:   { \"txt.line_spacing_style\", \"BS\", sizeof (BITCODE_BS),  OFF (union _dwg_MLEADER_Content, txt.line_spacing_style),",
          "9479:     0,0,0, 0 },",
          "9480:   { \"txt.color\", \"CMC\", sizeof (BITCODE_CMC),  OFF (union _dwg_MLEADER_Content, txt.color),",
          "9481:     1,0,0, 0 },",
          "9482:   { \"txt.alignment\", \"BS\", sizeof (BITCODE_BS),  OFF (union _dwg_MLEADER_Content, txt.alignment),",
          "9484:   { \"txt.flow\", \"BS\", sizeof (BITCODE_BS),  OFF (union _dwg_MLEADER_Content, txt.flow),",
          "9485:     0,0,0, 0 },",
          "9486:   { \"txt.bg_color\", \"CMC\", sizeof (BITCODE_CMC),  OFF (union _dwg_MLEADER_Content, txt.bg_color),",
          "9487:     1,0,0, 0 },",
          "9488:   { \"txt.bg_scale\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.bg_scale),",
          "9489:     0,0,0, 0 },",
          "9490:   { \"txt.bg_transparency\", \"BL\", sizeof (BITCODE_BL),  OFF (union _dwg_MLEADER_Content, txt.bg_transparency),",
          "9491:     0,0,0, 0 },",
          "9492:   { \"txt.is_bg_fill\", \"B\", sizeof (BITCODE_B),  OFF (union _dwg_MLEADER_Content, txt.is_bg_fill),",
          "9493:     0,0,0, 0 },",
          "9494:   { \"txt.is_bg_mask_fill\", \"B\", sizeof (BITCODE_B),  OFF (union _dwg_MLEADER_Content, txt.is_bg_mask_fill),",
          "9495:     0,0,0, 0 },",
          "9496:   { \"txt.col_type\", \"BS\", sizeof (BITCODE_BS),  OFF (union _dwg_MLEADER_Content, txt.col_type),",
          "9497:     0,0,0, 0 },",
          "9498:   { \"txt.is_height_auto\", \"B\", sizeof (BITCODE_B),  OFF (union _dwg_MLEADER_Content, txt.is_height_auto),",
          "9499:     0,0,0, 0 },",
          "9500:   { \"txt.col_width\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.col_width),",
          "9501:     0,0,0, 0 },",
          "9502:   { \"txt.col_gutter\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, txt.col_gutter),",
          "9503:     0,0,0, 0 },",
          "9504:   { \"txt.is_col_flow_reversed\", \"B\", sizeof (BITCODE_B),  OFF (union _dwg_MLEADER_Content, txt.is_col_flow_reversed),",
          "9505:     0,0,0, 0 },",
          "9506:   { \"txt.num_col_sizes\", \"BL\", sizeof (BITCODE_BL),  OFF (union _dwg_MLEADER_Content, txt.num_col_sizes),",
          "9507:     0,0,0, 0 },",
          "9508:   { \"txt.col_sizes\", \"BD*\", sizeof (BITCODE_BD*),  OFF (union _dwg_MLEADER_Content, txt.col_sizes),",
          "9509:     1,1,0, 0 },",
          "9510:   { \"txt.word_break\", \"B\", sizeof (BITCODE_B),  OFF (union _dwg_MLEADER_Content, txt.word_break),",
          "9511:     0,0,0, 0 },",
          "9512:   { \"txt.unknown\", \"B\", sizeof (BITCODE_B),  OFF (union _dwg_MLEADER_Content, txt.unknown),",
          "9513:     0,0,0, 0 },",
          "9514:   { \"txt\", \"struct _content_mtext\", sizeof (struct _content_mtext),  OFF (union _dwg_MLEADER_Content, txt),",
          "9515:     1,0,0, 0 },",
          "9516:   { \"blk.block_table\", \"H\", sizeof (BITCODE_H),  OFF (union _dwg_MLEADER_Content, blk.block_table),",
          "9517:     1,0,0, 0 },",
          "9518:   { \"blk.normal\", \"3BD\", sizeof (BITCODE_3BD),  OFF (union _dwg_MLEADER_Content, blk.normal),",
          "9519:     1,0,0, 0 },",
          "9520:   { \"blk.location\", \"3BD\", sizeof (BITCODE_3BD),  OFF (union _dwg_MLEADER_Content, blk.location),",
          "9521:     1,0,0, 0 },",
          "9522:   { \"blk.scale\", \"3BD\", sizeof (BITCODE_3BD),  OFF (union _dwg_MLEADER_Content, blk.scale),",
          "9523:     1,0,0, 0 },",
          "9524:   { \"blk.rotation\", \"BD\", sizeof (BITCODE_BD),  OFF (union _dwg_MLEADER_Content, blk.rotation),",
          "9525:     0,0,0, 0 },",
          "9526:   { \"blk.color\", \"CMC\", sizeof (BITCODE_CMC),  OFF (union _dwg_MLEADER_Content, blk.color),",
          "9527:     1,0,0, 0 },",
          "9528:   { \"blk.transform\", \"BD*\", sizeof (BITCODE_BD*),  OFF (union _dwg_MLEADER_Content, blk.transform),",
          "9529:     1,1,0, 0 },",
          "9530:   { \"blk\", \"struct _content_block\", sizeof (struct _content_block),  OFF (union _dwg_MLEADER_Content, blk),",
          "9531:     1,0,0, 0 },",
          "",
          "[Added Lines]",
          "9586:   { \"txt\", \"Dwg_MLEADER_Content_MText\", sizeof (Dwg_MLEADER_Content_MText),  OFF (union _dwg_MLEADER_Content, txt),",
          "9588:   { \"blk\", \"Dwg_MLEADER_Content_Block\", sizeof (Dwg_MLEADER_Content_Block),  OFF (union _dwg_MLEADER_Content, blk),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9665: };",
          "9671:     1,1,1, 1 },",
          "9673:     1,1,1, 1 },",
          "9675:     1,1,1, 1 },",
          "9677:     1,1,1, 1 },",
          "9679:     1,1,1, 1 },",
          "9681:     1,1,1, 1 },",
          "9683:     1,1,1, 1 },",
          "9685:     1,0,0, 0 },",
          "9687:     1,0,0, 0 },",
          "9689:     1,0,0, 0 },",
          "9691:     1,1,1, 1 },",
          "9693:     0,0,0, 0 },",
          "9695:     1,1,0, 0 },",
          "9697:     0,0,0, 0 },",
          "9699:     0,0,0, 0 },",
          "9700:   {NULL, NULL, 0, 0, 0,0,0, 0},",
          "9701: };",
          "",
          "[Removed Lines]",
          "9669: static const Dwg_DYNAPI_field _dwg_SummaryInfo_fields[] = {",
          "9670:   { \"AUTHOR\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, AUTHOR),",
          "9672:   { \"COMMENTS\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, COMMENTS),",
          "9674:   { \"HYPERLINKBASE\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, HYPERLINKBASE),",
          "9676:   { \"KEYWORDS\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, KEYWORDS),",
          "9678:   { \"LASTSAVEDBY\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, LASTSAVEDBY),",
          "9680:   { \"REVISIONNUMBER\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, REVISIONNUMBER),",
          "9682:   { \"SUBJECT\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, SUBJECT),",
          "9684:   { \"TDCREATE\", \"TIMERLL\", sizeof (BITCODE_TIMERLL),  OFF (struct Dwg_SummaryInfo, TDCREATE),",
          "9686:   { \"TDINDWG\", \"TIMERLL\", sizeof (BITCODE_TIMERLL),  OFF (struct Dwg_SummaryInfo, TDINDWG),",
          "9688:   { \"TDUPDATE\", \"TIMERLL\", sizeof (BITCODE_TIMERLL),  OFF (struct Dwg_SummaryInfo, TDUPDATE),",
          "9690:   { \"TITLE\", \"T\", sizeof (BITCODE_TV),  OFF (struct Dwg_SummaryInfo, TITLE),",
          "9692:   { \"num_props\", \"RS\", sizeof (BITCODE_RS),  OFF (struct Dwg_SummaryInfo, num_props),",
          "9694:   { \"props\", \"Dwg_SummaryInfo_Property*\", sizeof (Dwg_SummaryInfo_Property*),  OFF (struct Dwg_SummaryInfo, props),",
          "9696:   { \"unknown1\", \"RL\", sizeof (BITCODE_RL),  OFF (struct Dwg_SummaryInfo, unknown1),",
          "9698:   { \"unknown2\", \"RL\", sizeof (BITCODE_RL),  OFF (struct Dwg_SummaryInfo, unknown2),",
          "",
          "[Added Lines]",
          "9727: static const Dwg_DYNAPI_field _dwg_summaryinfo_fields[] = {",
          "9728:   { \"AUTHOR\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, AUTHOR),",
          "9730:   { \"COMMENTS\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, COMMENTS),",
          "9732:   { \"HYPERLINKBASE\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, HYPERLINKBASE),",
          "9734:   { \"KEYWORDS\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, KEYWORDS),",
          "9736:   { \"LASTSAVEDBY\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, LASTSAVEDBY),",
          "9738:   { \"REVISIONNUMBER\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, REVISIONNUMBER),",
          "9740:   { \"SUBJECT\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, SUBJECT),",
          "9742:   { \"TDCREATE\", \"TIMERLL\", sizeof (BITCODE_TIMERLL),  OFF (struct _dwg_summaryinfo, TDCREATE),",
          "9744:   { \"TDINDWG\", \"TIMERLL\", sizeof (BITCODE_TIMERLL),  OFF (struct _dwg_summaryinfo, TDINDWG),",
          "9746:   { \"TDUPDATE\", \"TIMERLL\", sizeof (BITCODE_TIMERLL),  OFF (struct _dwg_summaryinfo, TDUPDATE),",
          "9748:   { \"TITLE\", \"T\", sizeof (BITCODE_T),  OFF (struct _dwg_summaryinfo, TITLE),",
          "9750:   { \"num_props\", \"RS\", sizeof (BITCODE_RS),  OFF (struct _dwg_summaryinfo, num_props),",
          "9752:   { \"props\", \"Dwg_SummaryInfo_Property*\", sizeof (Dwg_SummaryInfo_Property*),  OFF (struct _dwg_summaryinfo, props),",
          "9754:   { \"unknown1\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_summaryinfo, unknown1),",
          "9756:   { \"unknown2\", \"RL\", sizeof (BITCODE_RL),  OFF (struct _dwg_summaryinfo, unknown2),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10020: };",
          "10023: static int",
          "10024: _name_inl_cmp (const void *restrict key, const void *restrict elem)",
          "10025: {",
          "",
          "[Removed Lines]",
          "10022: #line 1470 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "10083: #line 1487 \"gen-dynapi.pl\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10050:  __nonnull ((1))",
          "10051: _find_entity (const char *name)",
          "10052: {",
          "10054:                            sizeof (dwg_name_types[0]),",
          "10055:                            _name_struct_cmp);",
          "10056:   if (p)",
          "",
          "[Removed Lines]",
          "10053:   const char *p = bsearch (name, dwg_name_types, NUM_NAME_TYPES,",
          "",
          "[Added Lines]",
          "10114:   const char *p = (const char *)bsearch (name, dwg_name_types, NUM_NAME_TYPES,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "10067:  __nonnull ((1))",
          "10068: _find_subclass (const char *name)",
          "10069: {",
          "10071:                            sizeof (dwg_list_subclasses[0]),",
          "10072:                            _name_struct_cmp);",
          "10073:   if (p)",
          "",
          "[Removed Lines]",
          "10070:   const char *p = bsearch (name, dwg_list_subclasses, NUM_SUBCLASSES,",
          "",
          "[Added Lines]",
          "10131:   const char *p = (const char *)bsearch (name, dwg_list_subclasses, NUM_SUBCLASSES,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10552:       else if (strEQc (f->type, \"TF\") || (f->is_string && dwg_version < R_2007))",
          "10553:         {",
          "10555:           strcpy (str, *(char**)value);",
          "10556:           memcpy (old, &str, sizeof (char*)); // size of ptr",
          "10557:         }",
          "",
          "[Removed Lines]",
          "10554:           char *str = malloc (strlen (*(char**)value)+1);",
          "",
          "[Added Lines]",
          "10615:           char *str = (char *)malloc (strlen (*(char**)value)+1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10564:           else // source is already TU",
          "10565:             {",
          "10566: #if defined(HAVE_WCHAR_H) && defined(SIZEOF_WCHAR_T) && SIZEOF_WCHAR_T == 2",
          "10568:               wcscpy ((wchar_t *)wstr, *(wchar_t **)value);",
          "10569: #else",
          "10570:               int length = 0;",
          "10571:               for (; (*(BITCODE_TU*)value)[length]; length++)",
          "10572:                 ;",
          "10573:               length++;",
          "10575:               memcpy (wstr, value, length * 2);",
          "10576: #endif",
          "10577:             }",
          "",
          "[Removed Lines]",
          "10567:               wstr = malloc (2 * (wcslen (*(wchar_t **)value) + 1));",
          "10574:               wstr = malloc (2 * length);",
          "",
          "[Added Lines]",
          "10628:               wstr = (BITCODE_TU)malloc (2 * (wcslen (*(wchar_t **)value) + 1));",
          "10635:               wstr = (BITCODE_TU)malloc (2 * length);",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1798:   dat->byte += 6;",
          "1800:   {",
          "1802:     Dwg_Object *obj = NULL;",
          "1803:     if (!_obj->dwg_version)",
          "1804:       {",
          "",
          "[Removed Lines]",
          "1801:     struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "1801:     Dwg_Header *_obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1909:             dat->from_version = R_11;",
          "1910:             if (dat->version <= dat->from_version)",
          "1912:           }",
          "1913:       }",
          "1914:     LOG_TRACE (\"num_sections: \" FORMAT_RL \" [RL]\\n\", dwg->header.num_sections);",
          "1915:     bit_write_RL (dat, dwg->header.num_sections);",
          "1916:     if (!dwg->header.section)",
          "1919:     section_address = dat->byte;                 // save section address",
          "1921:     bit_write_CRC (dat, 0, 0xC0C1);",
          "",
          "[Removed Lines]",
          "1911:               dat->from_version = dat->version - 1;",
          "1917:       dwg->header.section",
          "1918:           = calloc (dwg->header.num_sections, sizeof (Dwg_Section));",
          "",
          "[Added Lines]",
          "1911:               dat->from_version = (Dwg_Version_Type)((int)dat->version - 1);",
          "1917:       dwg->header.section = (Dwg_Section*)calloc (dwg->header.num_sections,",
          "1918:                                                   sizeof (Dwg_Section));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1928:     if (dwg->header.num_sections > 5)",
          "1929:       {",
          "1931:         Dwg_Object *obj = NULL;",
          "1932:         BITCODE_BL vcount;",
          "1933:         assert (!dat->bit);",
          "",
          "[Removed Lines]",
          "1930:         struct Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "[Added Lines]",
          "1930:         Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1985:     memset (&sec_dat, 0, (SECTION_SYSTEM_MAP + 1) * sizeof (Bit_Chain));",
          "1986:     if (dwg->header.section_infohdr.num_desc && !dwg->header.section_info)",
          "1990:       {",
          "1991:         dwg->header.num_sections = 28; // room for some object pages",
          "1992:         dwg->header.section = calloc (28, sizeof (Dwg_Section));",
          "",
          "[Removed Lines]",
          "1987:       dwg->header.section_info = calloc (dwg->header.section_infohdr.num_desc,",
          "1988:                                          sizeof (Dwg_Section_Info));",
          "1989:     if (!dwg->header.section)",
          "",
          "[Added Lines]",
          "1987:       dwg->header.section_info = (Dwg_Section_Info *)calloc (",
          "1988:           dwg->header.section_infohdr.num_desc, sizeof (Dwg_Section_Info));",
          "1989:     LOG_TRACE (\"\\n#### r2004 File Header ####\\n\");",
          "1990:     if (dat->byte + 0x80 >= dat->size - 1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2045:   SINCE (R_2004)",
          "2046:   {",
          "2047:     sec_id = SECTION_HEADER;",
          "2049:     str_dat = hdl_dat = dat = &sec_dat[sec_id];",
          "2050:   }",
          "2051:   assert (!dat->bit);",
          "",
          "[Removed Lines]",
          "2048:     bit_chain_init_dat (&sec_dat[sec_id], sizeof (struct Dwg_Header) + 64, dat);",
          "",
          "[Added Lines]",
          "2049:     bit_chain_init_dat (&sec_dat[sec_id], sizeof (Dwg_Header) + 64, dat);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2534:             break;",
          "2535:           case SECTION_OBJFREESPACE:",
          "2536:             {",
          "2538:               bit_chain_alloc (&sec_dat[type]);",
          "2539:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2540:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2537:               struct Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "[Added Lines]",
          "2538:               Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2544:             break;",
          "2545:           case SECTION_REVHISTORY:",
          "2546:             {",
          "2548:               bit_chain_alloc (&sec_dat[type]);",
          "2549:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2550:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2547:               struct Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "[Added Lines]",
          "2548:               Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2554:             break;",
          "2555:           case SECTION_SUMMARYINFO:",
          "2556:             {",
          "2558:               bit_chain_alloc (&sec_dat[type]);",
          "2559:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2560:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2557:               struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "[Added Lines]",
          "2558:               Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2564:             break;",
          "2565:           case SECTION_APPINFO:",
          "2566:             {",
          "2568:               bit_chain_alloc (&sec_dat[type]);",
          "2569:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2570:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2567:               struct Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "[Added Lines]",
          "2568:               Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2575:           case SECTION_APPINFOHISTORY:",
          "2576:             {",
          "2577: #if 0",
          "2579:               bit_chain_alloc (&sec_dat[type]);",
          "2580:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2581:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2578:               struct Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "[Added Lines]",
          "2579:               Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2586:             break;",
          "2587:           case SECTION_FILEDEPLIST:",
          "2588:             {",
          "2590:               bit_chain_alloc (&sec_dat[type]);",
          "2591:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2592:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2589:               struct Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "[Added Lines]",
          "2590:               Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2596:             break;",
          "2597:           case SECTION_SECURITY:",
          "2598:             {",
          "2600:               bit_chain_alloc (&sec_dat[type]);",
          "2601:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2602:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2599:               struct Dwg_Security *_obj = &dwg->security;",
          "",
          "[Added Lines]",
          "2600:               Dwg_Security *_obj = &dwg->security;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2607:           case SECTION_SIGNATURE:",
          "2608:             {",
          "2609: #if 0",
          "2611:               bit_chain_alloc (&sec_dat[type]);",
          "2612:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2613:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2610:               struct Dwg_Signature *_obj = &dwg->signature;",
          "",
          "[Added Lines]",
          "2611:               Dwg_Signature *_obj = &dwg->signature;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2621:           case SECTION_ACDS:",
          "2622:             {",
          "2623: #if 0",
          "2625:               bit_chain_alloc (&sec_dat[type]);",
          "2626:               str_dat = hdl_dat = dat = &sec_dat[type];",
          "2627:               bit_chain_set_version (dat, old_dat);",
          "",
          "[Removed Lines]",
          "2624:               struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "2625:               Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4256: {",
          "4257:   Dwg_Header_Variables *_obj = &dwg->header_vars;",
          "4258:   Dwg_Object *obj = NULL;",
          "4261:   if (!_obj->HANDSEED) // minimal or broken DXF",
          "4262:     {",
          "4263:       dwg->opts |= DWG_OPTS_MINIMAL;",
          "4265:       LOG_TRACE (\"encode from minimal DXF\\n\");",
          "4267:       _obj->HANDSEED->absolute_ref = 0x72E;",
          "4268:     }",
          "",
          "[Removed Lines]",
          "4259:   int old_from = (int)dat->from_version;",
          "4264:       dat->from_version = dat->version - 1;",
          "4266:       _obj->HANDSEED = calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "4260:   Dwg_Version_Type old_from = dat->from_version;",
          "4265:       dat->from_version = (Dwg_Version_Type)((int)dat->version - 1);",
          "4267:       _obj->HANDSEED = (Dwg_Object_Ref*)calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4465: char *",
          "4466: encrypt_sat1 (BITCODE_BL blocksize, BITCODE_RC *acis_data, int *idx)",
          "4467: {",
          "4469:   int i = *idx;",
          "4470:   int j;",
          "4471:   for (j = 0; j < (int)blocksize; j++)",
          "",
          "[Removed Lines]",
          "4468:   char *encr_sat_data = calloc (blocksize, 1);",
          "",
          "[Added Lines]",
          "4469:   char *encr_sat_data = (char*)calloc (blocksize, 1);",
          "",
          "---------------"
        ],
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: static unsigned int cur_ver = 0;",
          "48: static BITCODE_BL rcount1, rcount2;",
          "",
          "[Removed Lines]",
          "47: static Bit_Chain pdat = { NULL, 0, 0, 0, 0, 0 };",
          "",
          "[Added Lines]",
          "47: static Bit_Chain pdat = { NULL, 0, 0, 0, 0, R_INVALID };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865: static int",
          "866: dwg_free_summaryinfo (Dwg_Data *dwg)",
          "867: {",
          "869:   Dwg_Object *obj = NULL;",
          "870:   Bit_Chain *dat = &pdat;",
          "",
          "[Removed Lines]",
          "868:   struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "[Added Lines]",
          "868:   Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "878: static int",
          "879: dwg_free_appinfo (Dwg_Data *dwg)",
          "880: {",
          "882:   Dwg_Object *obj = NULL;",
          "883:   Bit_Chain *dat = &pdat;",
          "",
          "[Removed Lines]",
          "881:   struct Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "[Added Lines]",
          "881:   Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "890: static int",
          "891: dwg_free_filedeplist (Dwg_Data *dwg)",
          "892: {",
          "894:   Dwg_Object *obj = NULL;",
          "895:   Bit_Chain *dat = &pdat;",
          "896:   BITCODE_RL vcount;",
          "",
          "[Removed Lines]",
          "893:   struct Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "[Added Lines]",
          "893:   Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "903: static int",
          "904: dwg_free_security (Dwg_Data *dwg)",
          "905: {",
          "907:   Dwg_Object *obj = NULL;",
          "908:   Bit_Chain *dat = &pdat;",
          "",
          "[Removed Lines]",
          "906:   struct Dwg_Security *_obj = &dwg->security;",
          "",
          "[Added Lines]",
          "906:   Dwg_Security *_obj = &dwg->security;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "916: static int",
          "917: dwg_free_acds (Dwg_Data *dwg)",
          "918: {",
          "920:   Dwg_Object *obj = NULL;",
          "921:   Bit_Chain *dat = &pdat;",
          "922:   BITCODE_RL rcount3 = 0, rcount4, vcount;",
          "",
          "[Removed Lines]",
          "919:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "919:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "974:       FREE_IF (dwg->revhistory.histories);",
          "975:       FREE_IF (dwg->appinfohistory.unknown_bits);",
          "978:       FREE_IF (dwg->header.section);",
          "979:       for (i = 0; i < dwg->second_header.num_handlers; i++)",
          "980:         FREE_IF (dwg->second_header.handlers[i].data);",
          "",
          "[Removed Lines]",
          "977:       FREE_IF (dwg->template.description);",
          "",
          "[Added Lines]",
          "977:       FREE_IF (dwg->Template.description);",
          "",
          "---------------"
        ],
        "src/gen-dynapi.pl||src/gen-dynapi.pl": [
          "File: src/gen-dynapi.pl -> src/gen-dynapi.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "467: $DXF{$n}->{'xdicobjhandle'} = 360;",
          "468: $DXF{$n}->{'reactors'} = 330;",
          "471: dxfin_spec \"$srcdir/summaryinfo.spec\";",
          "473: # dxfclassname for each of our classes and subclasses (not complete)",
          "",
          "[Removed Lines]",
          "470: $n = 'SummaryInfo';",
          "",
          "[Added Lines]",
          "470: $n = 'summaryinfo';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:     return;",
          "738:   }",
          "739:   my @declarations = @{$s->{declarations}};",
          "741:     @declarations = sort {",
          "742:       my $aname = $a->{declarators}->[0]->{declarator};",
          "743:       my $bname = $b->{declarators}->[0]->{declarator};",
          "",
          "[Removed Lines]",
          "740:   if ($n =~ /^_dwg_(header_variables|object_object|object_entity|SummaryInfo)$/) {",
          "",
          "[Added Lines]",
          "740:   if ($n =~ /^_dwg_(header_variables|object_object|object_entity|summaryinfo)$/) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "916:       } elsif ($1 eq 'object_entity') {",
          "917:         print $doc \"\\@strong{Common Entity fields} \\@anchor{Common Entity fields}\\n\";",
          "918:         print $doc \"\\@cindex Common Entity fields\\n\\n\";",
          "920:         print $doc \"\\n\\@node SummaryInfo\\n\\@section SummaryInfo\\n\\@cindex SummaryInfo\\n\\n\";",
          "921:         print $doc \"All Section SummaryInfo fields.\\n\\n\";",
          "922:       } else {",
          "",
          "[Removed Lines]",
          "919:       } elsif ($1 eq 'SummaryInfo') {",
          "",
          "[Added Lines]",
          "919:       } elsif ($1 eq 'summaryinfo') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "925:       }",
          "926:       out_struct($tmpl, $1);",
          "927:     } elsif ($tmpl =~ /^struct Dwg_(\\w+)/) {",
          "929:         print $doc \"\\n\\@node SummaryInfo\\n\\@section SummaryInfo\\n\\@cindex SummaryInfo\\n\\n\";",
          "930:         print $doc \"All Section SummaryInfo fields.\\n\\n\";",
          "931:       } else {",
          "",
          "[Removed Lines]",
          "928:       if ($1 eq 'SummaryInfo') {",
          "",
          "[Added Lines]",
          "928:       warn $tmpl;",
          "929:       if ($1 eq 'summaryinfo') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1398: # NOTE: in the 2 #line's below use __LINE__ + 1",
          "1399: __DATA__",
          "",
          "[Removed Lines]",
          "1401: #line 1384 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "1402: #line 1403 \"gen-dynapi.pl\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1455: @@struct _dwg_object_entity@@",
          "1456: @@struct _dwg_object_object@@",
          "1460: struct _name_type_fields {",
          "1461:   const char *const name;",
          "",
          "[Removed Lines]",
          "1458: @@struct Dwg_SummaryInfo@@",
          "",
          "[Added Lines]",
          "1459: @@struct _dwg_summaryinfo@@",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1482: @@list subclasses@@",
          "1483: };",
          "1486: static int",
          "1487: _name_inl_cmp (const void *restrict key, const void *restrict elem)",
          "1488: {",
          "",
          "[Removed Lines]",
          "1485: #line 1470 \"gen-dynapi.pl\"",
          "",
          "[Added Lines]",
          "1486: #line 1487 \"gen-dynapi.pl\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1513:  __nonnull ((1))",
          "1514: _find_entity (const char *name)",
          "1515: {",
          "1517:                            sizeof (dwg_name_types[0]),",
          "1518:                            _name_struct_cmp);",
          "1519:   if (p)",
          "",
          "[Removed Lines]",
          "1516:   const char *p = bsearch (name, dwg_name_types, NUM_NAME_TYPES,",
          "",
          "[Added Lines]",
          "1517:   const char *p = (const char *)bsearch (name, dwg_name_types, NUM_NAME_TYPES,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1530:  __nonnull ((1))",
          "1531: _find_subclass (const char *name)",
          "1532: {",
          "1534:                            sizeof (dwg_list_subclasses[0]),",
          "1535:                            _name_struct_cmp);",
          "1536:   if (p)",
          "",
          "[Removed Lines]",
          "1533:   const char *p = bsearch (name, dwg_list_subclasses, NUM_SUBCLASSES,",
          "",
          "[Added Lines]",
          "1534:   const char *p = (const char *)bsearch (name, dwg_list_subclasses, NUM_SUBCLASSES,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2015:       else if (strEQc (f->type, \"TF\") || (f->is_string && dwg_version < R_2007))",
          "2016:         {",
          "2018:           strcpy (str, *(char**)value);",
          "2019:           memcpy (old, &str, sizeof (char*)); // size of ptr",
          "2020:         }",
          "",
          "[Removed Lines]",
          "2017:           char *str = malloc (strlen (*(char**)value)+1);",
          "",
          "[Added Lines]",
          "2018:           char *str = (char *)malloc (strlen (*(char**)value)+1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2027:           else // source is already TU",
          "2028:             {",
          "2029: #if defined(HAVE_WCHAR_H) && defined(SIZEOF_WCHAR_T) && SIZEOF_WCHAR_T == 2",
          "2031:               wcscpy ((wchar_t *)wstr, *(wchar_t **)value);",
          "2032: #else",
          "2033:               int length = 0;",
          "2034:               for (; (*(BITCODE_TU*)value)[length]; length++)",
          "2035:                 ;",
          "2036:               length++;",
          "2038:               memcpy (wstr, value, length * 2);",
          "2039: #endif",
          "2040:             }",
          "",
          "[Removed Lines]",
          "2030:               wstr = malloc (2 * (wcslen (*(wchar_t **)value) + 1));",
          "2037:               wstr = malloc (2 * length);",
          "",
          "[Added Lines]",
          "2031:               wstr = (BITCODE_TU)malloc (2 * (wcslen (*(wchar_t **)value) + 1));",
          "2038:               wstr = (BITCODE_TU)malloc (2 * length);",
          "",
          "---------------"
        ],
        "src/hash.c||src/hash.c": [
          "File: src/hash.c -> src/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: dwg_inthash *",
          "27: hash_new (uint32_t size)",
          "28: {",
          "30:   uint32_t cap;",
          "31:   if (!hash)",
          "32:     return NULL;",
          "",
          "[Removed Lines]",
          "29:   dwg_inthash *hash = malloc (sizeof (dwg_inthash));",
          "",
          "[Added Lines]",
          "29:   dwg_inthash *hash = (dwg_inthash *)malloc (sizeof (dwg_inthash));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   while (size <= cap)",
          "40:     size <<= 1U;",
          "42:   hash->elems = 0;",
          "43:   hash->size = size;",
          "44:   return hash;",
          "",
          "[Removed Lines]",
          "41:   hash->array = calloc (size, sizeof (struct _hashbucket)); // key+value pairs",
          "",
          "[Added Lines]",
          "41:   hash->array = (struct _hashbucket *)calloc (size, sizeof (struct _hashbucket)); // key+value pairs",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:   uint32_t i;",
          "63:   if (!hash->array)",
          "64:     {",
          "",
          "[Removed Lines]",
          "62:   hash->array = calloc (size, sizeof (struct _hashbucket));",
          "",
          "[Added Lines]",
          "62:   hash->array = (struct _hashbucket *)calloc (size, sizeof (struct _hashbucket));",
          "",
          "---------------"
        ],
        "src/header_variables_r11.spec||src/header_variables_r11.spec": [
          "File: src/header_variables_r11.spec -> src/header_variables_r11.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   dat->byte = 0x31b;",
          "134:   FIELD_RS (CECOLOR.index, 62);",
          "135:   DECODER {",
          "137:     _obj->CELTYPE->absolute_ref = (BITCODE_RL)bit_read_RS (dat); // 6, ff for BYLAYER, fe for BYBLOCK",
          "138:     LOG_TRACE (\"CELTYPE: %lu [long 6]\\n\", _obj->CELTYPE->absolute_ref)",
          "139:   }",
          "",
          "[Removed Lines]",
          "136:     _obj->CELTYPE = calloc(1, sizeof(Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "136:     _obj->CELTYPE = (BITCODE_H)calloc(1, sizeof(Dwg_Object_Ref));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:   dat->byte = 0x4ee;",
          "205:   DECODER {",
          "207:     _obj->HANDSEED->absolute_ref = (BITCODE_RL)bit_read_RS (dat);",
          "208:     LOG_TRACE (\"HANDSEED: %lX [RS 5]\\n\", _obj->HANDSEED->absolute_ref)",
          "209:   }",
          "",
          "[Removed Lines]",
          "206:     _obj->HANDSEED = calloc(1, sizeof(Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "206:     _obj->HANDSEED = (BITCODE_H)calloc(1, sizeof(Dwg_Object_Ref));",
          "",
          "---------------"
        ],
        "src/in_dxf.c||src/in_dxf.c": [
          "File: src/in_dxf.c -> src/in_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299: static Dxf_Pair *ATTRIBUTE_MALLOC",
          "300: dxf_read_pair (Bit_Chain *dat)",
          "301: {",
          "303:   const int is_binary = dat->opts & DWG_OPTS_DXFB;",
          "304:   if (!pair)",
          "305:     return NULL;",
          "",
          "[Removed Lines]",
          "302:   Dxf_Pair *pair = xcalloc (1, sizeof (Dxf_Pair));",
          "",
          "[Added Lines]",
          "302:   Dxf_Pair *pair = (Dxf_Pair *)xcalloc (1, sizeof (Dxf_Pair));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:   if (i >= hdls->size)",
          "431:     {",
          "432:       hdls->size += 16;",
          "434:       if (!hdls)",
          "435:         {",
          "436:           LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "433:       hdls = realloc (hdls, 8 + (hdls->size * sizeof (struct array_hdl)));",
          "",
          "[Added Lines]",
          "433:       hdls = (array_hdls *)realloc (",
          "434:           hdls, 8 + (hdls->size * sizeof (struct array_hdl)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448: array_hdls *",
          "449: new_array_hdls (int size)",
          "450: {",
          "452:   if (!hdls)",
          "453:     return NULL;",
          "454:   hdls->size = size;",
          "",
          "[Removed Lines]",
          "451:   array_hdls *hdls = xcalloc (1, 8 + size * sizeof (struct array_hdl));",
          "",
          "[Added Lines]",
          "452:   array_hdls *hdls",
          "453:       = (array_hdls *)xcalloc (1, 8 + size * sizeof (struct array_hdl));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "665:           const char *version = pair->value.s;",
          "667:             {",
          "668:               if (strEQ (version, version_codes[v]))",
          "669:                 {",
          "",
          "[Removed Lines]",
          "666:           for (Dwg_Version_Type v = 0; v <= R_AFTER; v++)",
          "",
          "[Added Lines]",
          "668:           for (Dwg_Version_Type v = R_INVALID; v <= R_AFTER; v++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "860: dxf_fixup_header (Dwg_Data *dwg)",
          "861: {",
          "862:   Dwg_Header_Variables *vars = &dwg->header_vars;",
          "865:   LOG_TRACE (\"dxf_fixup_header\\n\");",
          "867:   if (vars->HANDSEED)",
          "",
          "[Removed Lines]",
          "863:   struct Dwg_Header *hdr = &dwg->header;",
          "",
          "[Added Lines]",
          "865:   Dwg_Header *hdr = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1031:       i = dwg->num_classes;",
          "1032:       if (i == 0)",
          "1034:       else",
          "1037:       if (!dwg->dwg_class)",
          "1038:         {",
          "1039:           LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "1033:         dwg->dwg_class = malloc (sizeof (Dwg_Class));",
          "1035:         dwg->dwg_class",
          "1036:             = realloc (dwg->dwg_class, (i + 1) * sizeof (Dwg_Class));",
          "",
          "[Added Lines]",
          "1035:         dwg->dwg_class = (Dwg_Class *)malloc (sizeof (Dwg_Class));",
          "1037:         dwg->dwg_class = (Dwg_Class *)realloc (dwg->dwg_class,",
          "1038:                                                (i + 1) * sizeof (Dwg_Class));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1484:   int num_dashes = (int)_o->num_dashes;",
          "1485:   int is_tu = 0;",
          "1488:   if (!_o->dashes)",
          "1489:     {",
          "1490:       _o->num_dashes = 0;",
          "",
          "[Removed Lines]",
          "1487:   _o->dashes = xcalloc (_o->num_dashes, sizeof (Dwg_LTYPE_dash));",
          "",
          "[Added Lines]",
          "1489:   _o->dashes",
          "1490:       = (Dwg_LTYPE_dash *)xcalloc (_o->num_dashes, sizeof (Dwg_LTYPE_dash));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1562:           LOG_TRACE (\"LTYPE.dashes[%d].text = %s [T 9]\\n\", j, pair->value.s);",
          "1564:           if (!_o->strings_area)",
          "1566:           if (is_tu)",
          "1567:             {",
          "1568:               bit_wcs2cpy ((BITCODE_TU)&_o->strings_area[dash_i], (BITCODE_TU)_o->dashes[j].text);",
          "",
          "[Removed Lines]",
          "1565:             _o->strings_area = xcalloc (is_tu ? 512 : 256, 1);",
          "",
          "[Added Lines]",
          "1568:             _o->strings_area = (BITCODE_TF)xcalloc (is_tu ? 512 : 256, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1592:   Dwg_Data *dwg = obj->parent;",
          "1593:   _o->num_lines = num_lines;",
          "1594:   LOG_TRACE (\"MLINESTYLE.num_lines = %d [RC 71]\\n\", num_lines);",
          "1596:   if (!_o->lines)",
          "1597:     {",
          "1598:       _o->num_lines = 0;",
          "",
          "[Removed Lines]",
          "1595:   _o->lines = xcalloc (num_lines, sizeof (Dwg_MLINESTYLE_line));",
          "",
          "[Added Lines]",
          "1598:   _o->lines = (Dwg_MLINESTYLE_line *)xcalloc (num_lines,",
          "1599:                                               sizeof (Dwg_MLINESTYLE_line));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1698:   _o->num_points = num_points;",
          "1699:   LOG_TRACE (\"LWPOLYLINE.num_points = %u [BS 90]\\n\", num_points);",
          "1701:   if (!_o->points)",
          "1702:     {",
          "1703:       _o->num_points = 0;",
          "",
          "[Removed Lines]",
          "1700:   _o->points = xcalloc (num_points, sizeof (BITCODE_2RD));",
          "",
          "[Added Lines]",
          "1704:   _o->points = (BITCODE_2RD*)xcalloc (num_points, sizeof (BITCODE_2RD));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1780:         {",
          "1781:           if (!_o->num_bulges)",
          "1782:             {",
          "1784:               if (!_o->bulges)",
          "1785:                 {",
          "1786:                   _o->num_bulges = 0;",
          "",
          "[Removed Lines]",
          "1783:               _o->bulges = xcalloc (num_points, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "1787:               _o->bulges = (BITCODE_BD*)xcalloc (num_points, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1798:         {",
          "1799:           if (!j)",
          "1800:             {",
          "1802:               if (!_o->vertexids)",
          "1803:                 {",
          "1804:                   _o->num_vertexids = 0;",
          "",
          "[Removed Lines]",
          "1801:               _o->vertexids = xcalloc (num_points, sizeof (BITCODE_BL));",
          "",
          "[Added Lines]",
          "1805:               _o->vertexids = (BITCODE_BL*)xcalloc (num_points, sizeof (BITCODE_BL));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1817:         {",
          "1818:           if (!j)",
          "1819:             {",
          "1821:               if (!_o->widths)",
          "1822:                 {",
          "1823:                   _o->num_widths = 0;",
          "",
          "[Removed Lines]",
          "1820:               _o->widths = xcalloc (num_points, sizeof (Dwg_LWPOLYLINE_width));",
          "",
          "[Added Lines]",
          "1824:               _o->widths = (Dwg_LWPOLYLINE_width *)xcalloc (",
          "1825:                   num_points, sizeof (Dwg_LWPOLYLINE_width));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1860:   Dwg_Entity_3DSOLID *o = obj->tio.entity->tio._3DSOLID;",
          "1861:   int i = 0, total = 0;",
          "1862:   o->num_blocks = 1;",
          "1864:   if (!o->encr_sat_data)",
          "1865:     {",
          "1866:       o->num_blocks = 0;",
          "1867:       return NULL;",
          "1868:     }",
          "1869:   o->encr_sat_data[0] = NULL;",
          "1871:   if (!o->block_size)",
          "1872:     {",
          "1873:       o->num_blocks = 0;",
          "",
          "[Removed Lines]",
          "1863:   o->encr_sat_data = xcalloc (2, sizeof (char *));",
          "1870:   o->block_size = xcalloc (2, sizeof (BITCODE_BL));",
          "",
          "[Added Lines]",
          "1868:   o->encr_sat_data = (char**)xcalloc (2, sizeof (char *));",
          "1875:   o->block_size = (BITCODE_BL*)xcalloc (2, sizeof (BITCODE_BL));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1880:       if (!total)",
          "1881:         {",
          "1882:           total = len;",
          "1884:           if (!o->encr_sat_data[0])",
          "1885:             {",
          "1886:               LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "1883:           o->encr_sat_data[0] = malloc (total + 1); // + the \\0",
          "",
          "[Added Lines]",
          "1888:           o->encr_sat_data[0] = (char*)malloc (total + 1); // + the \\0",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1892:       else",
          "1893:         {",
          "1894:           total += len;",
          "1896:           if (!o->encr_sat_data[0])",
          "1897:             {",
          "1898:               LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "1895:           o->encr_sat_data[0] = realloc (o->encr_sat_data[0], total + 1);",
          "",
          "[Added Lines]",
          "1900:           o->encr_sat_data[0] = (char*)realloc (o->encr_sat_data[0], total + 1);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1912:     {",
          "1913:       int idx = 0;",
          "1914:       o->unknown = 1; // ??",
          "1916:       if (!o->acis_data)",
          "1920:       for (i = 0; i < total; i++)",
          "1921:         {",
          "1922:           if (o->encr_sat_data[0][i] == '^' && i <= total",
          "",
          "[Removed Lines]",
          "1915:       o->acis_data = xcalloc (1, total + 1);",
          "1917:         {",
          "1918:           return NULL;",
          "1919:         }",
          "",
          "[Added Lines]",
          "1920:       o->acis_data = (BITCODE_RC*)xcalloc (1, total + 1);",
          "1922:         return NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1954:       LOG_TRACE (\"MESH.num_subdiv_vertex = %u [BL 91]\\n\", pair->value.u);",
          "1955:       if (pair->value.u)",
          "1956:         {",
          "1958:           if (!o->subdiv_vertex)",
          "1959:             {",
          "1960:               o->num_subdiv_vertex = 0;",
          "",
          "[Removed Lines]",
          "1957:           o->subdiv_vertex = xcalloc (o->num_subdiv_vertex, sizeof (BITCODE_3BD));",
          "",
          "[Added Lines]",
          "1960:           o->subdiv_vertex = (BITCODE_3BD *)xcalloc (o->num_subdiv_vertex,",
          "1961:                                                      sizeof (BITCODE_3BD));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1978:           LOG_TRACE (\"MESH.num_vertex = %u [BL 92]\\n\", pair->value.u);",
          "1979:           if (pair->value.u)",
          "1980:             {",
          "1982:               if (!o->vertex)",
          "1983:                 {",
          "1984:                   o->num_vertex = 0;",
          "",
          "[Removed Lines]",
          "1981:               o->vertex = xcalloc (o->num_vertex, sizeof (BITCODE_3BD));",
          "",
          "[Added Lines]",
          "1985:               o->vertex = (BITCODE_3BD *)xcalloc (o->num_vertex,",
          "1986:                                                   sizeof (BITCODE_3BD));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1995:                      pair->code);",
          "1996:           if (pair->value.u)",
          "1997:             {",
          "1999:               if (!o->faces)",
          "2000:                 {",
          "2001:                   o->num_faces = 0;",
          "",
          "[Removed Lines]",
          "1998:               o->faces = xcalloc (o->num_faces, sizeof (BITCODE_BL));",
          "",
          "[Added Lines]",
          "2003:               o->faces = (BITCODE_BL *)xcalloc (o->num_faces, sizeof (BITCODE_BL));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2012:                      pair->code);",
          "2013:           if (pair->value.u) // from face - to face",
          "2014:             {",
          "2016:               if (!o->edges)",
          "2017:                 {",
          "2018:                   o->num_edges = 0;",
          "",
          "[Removed Lines]",
          "2015:               o->edges = xcalloc (o->num_edges, sizeof (Dwg_MESH_edge));",
          "",
          "[Added Lines]",
          "2020:               o->edges = (Dwg_MESH_edge *)xcalloc (o->num_edges,",
          "2021:                                                    sizeof (Dwg_MESH_edge));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2029:                      pair->code);",
          "2030:           if (pair->value.u)",
          "2031:             {",
          "2033:               if (!o->crease)",
          "2034:                 {",
          "2035:                   o->num_crease = 0;",
          "",
          "[Removed Lines]",
          "2032:               o->crease = xcalloc (o->num_crease, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "2038:               o->crease = (BITCODE_BD*)xcalloc (o->num_crease, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2122:                          pair->code);",
          "2123:               if (pair->value.u) // from face - to face",
          "2124:                 {",
          "2126:                   if (!o->crease)",
          "2127:                     {",
          "2128:                       o->num_crease = 0;",
          "",
          "[Removed Lines]",
          "2125:                   o->crease = xcalloc (o->num_crease, sizeof (double));",
          "",
          "[Added Lines]",
          "2131:                   o->crease = (double*)xcalloc (o->num_crease, sizeof (double));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2175:     {",
          "2176:       o->num_paths = pair->value.u;",
          "2177:       LOG_TRACE (\"HATCH.num_paths = %u [BS 91]\\n\", o->num_paths);",
          "2179:       if (!o->paths)",
          "2180:         {",
          "2181:           o->num_paths = 0;",
          "",
          "[Removed Lines]",
          "2178:       o->paths = xcalloc (o->num_paths, sizeof (Dwg_HATCH_Path));",
          "",
          "[Added Lines]",
          "2184:       o->paths",
          "2185:           = (Dwg_HATCH_Path *)xcalloc (o->num_paths, sizeof (Dwg_HATCH_Path));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2186:     {",
          "2187:       o->num_deflines = pair->value.l;",
          "2188:       LOG_TRACE (\"HATCH.num_deflines = %ld [BS 78]\\n\", pair->value.l);",
          "2190:       if (!o->deflines)",
          "2191:         {",
          "2192:           o->num_deflines = 0;",
          "",
          "[Removed Lines]",
          "2189:       o->deflines = xcalloc (pair->value.l, sizeof (Dwg_HATCH_DefLine));",
          "",
          "[Added Lines]",
          "2196:       o->deflines = (Dwg_HATCH_DefLine *)xcalloc (pair->value.l,",
          "2197:                                                   sizeof (Dwg_HATCH_DefLine));",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2197:     {",
          "2198:       o->num_colors = pair->value.l;",
          "2199:       LOG_TRACE (\"HATCH.num_colors = %ld [BL 453]\\n\", pair->value.l);",
          "2201:       if (!o->colors)",
          "2202:         {",
          "2203:           o->num_colors = 0;",
          "",
          "[Removed Lines]",
          "2200:       o->colors = xcalloc (pair->value.l, sizeof (Dwg_HATCH_Color));",
          "",
          "[Added Lines]",
          "2208:       o->colors = (Dwg_HATCH_Color *)xcalloc (pair->value.l,",
          "2209:                                               sizeof (Dwg_HATCH_Color));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2233:           k = -1;",
          "2234:           if (pair->value.u && !is_plpath)",
          "2238:               if (!o->paths[j].segs)",
          "2239:                 {",
          "2240:                   o->paths[j].num_segs_or_paths = 0;",
          "",
          "[Removed Lines]",
          "2236:               o->paths[j].segs",
          "2237:                   = xcalloc (pair->value.u, sizeof (Dwg_HATCH_PathSeg));",
          "",
          "[Added Lines]",
          "2245:               o->paths[j].segs = (Dwg_HATCH_PathSeg *)xcalloc (",
          "2246:                   pair->value.u, sizeof (Dwg_HATCH_PathSeg));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2243:             }",
          "2244:           else if (pair->value.u)",
          "2248:               if (!o->paths[j].polyline_paths)",
          "2249:                 {",
          "2250:                   o->paths[j].num_segs_or_paths = 0;",
          "",
          "[Removed Lines]",
          "2246:               o->paths[j].polyline_paths",
          "2247:                   = xcalloc (pair->value.u, sizeof (Dwg_HATCH_PolylinePath));",
          "",
          "[Added Lines]",
          "2255:               o->paths[j].polyline_paths = (Dwg_HATCH_PolylinePath *)xcalloc (",
          "2256:                   pair->value.u, sizeof (Dwg_HATCH_PolylinePath));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2313:           o->paths[j].segs[k].num_knots = pair->value.l;",
          "2314:           LOG_TRACE (\"HATCH.paths[%d].segs[%d].num_knots = %ld [BL 95]\\n\", j,",
          "2315:                      k, pair->value.l);",
          "2317:           if (!o->paths[j].segs[k].knots)",
          "2318:             {",
          "2319:               o->paths[j].segs[k].num_knots = 0;",
          "",
          "[Removed Lines]",
          "2316:           o->paths[j].segs[k].knots = xcalloc (pair->value.l, sizeof (double));",
          "",
          "[Added Lines]",
          "2325:           o->paths[j].segs[k].knots = (double*)xcalloc (pair->value.l, sizeof (double));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2332:               \"HATCH.paths[%d].segs[%d].num_control_points = %ld [BL 96]\\n\", j,",
          "2333:               k, pair->value.l);",
          "2334:           o->paths[j].segs[k].control_points",
          "2336:           if (!o->paths[j].segs[k].control_points)",
          "2337:             {",
          "2338:               o->paths[j].segs[k].num_control_points = 0;",
          "",
          "[Removed Lines]",
          "2335:               = xcalloc (pair->value.l, sizeof (Dwg_HATCH_ControlPoint));",
          "",
          "[Added Lines]",
          "2344:               = (Dwg_HATCH_ControlPoint *)xcalloc (",
          "2345:                   pair->value.l, sizeof (Dwg_HATCH_ControlPoint));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2660:         {",
          "2661:           o->num_deflines = pair->value.l;",
          "2662:           LOG_TRACE (\"HATCH.num_deflines = %ld [BS 78]\\n\", pair->value.l);",
          "2664:           if (!o->deflines)",
          "2665:             {",
          "2666:               o->num_deflines = 0;",
          "",
          "[Removed Lines]",
          "2663:           o->deflines = xcalloc (pair->value.l, sizeof (Dwg_HATCH_DefLine));",
          "",
          "[Added Lines]",
          "2673:           o->deflines = (Dwg_HATCH_DefLine *)xcalloc (",
          "2674:               pair->value.l, sizeof (Dwg_HATCH_DefLine));",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2719:           if (pair->value.u)",
          "2720:             {",
          "2721:               o->deflines[j].dashes",
          "2723:               if (!o->deflines[j].dashes)",
          "2724:                 {",
          "2725:                   o->deflines[j].num_dashes = 0;",
          "",
          "[Removed Lines]",
          "2722:                 = xcalloc (pair->value.u, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "2733:                   = (BITCODE_BD *)xcalloc (pair->value.u, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2755:           LOG_TRACE (\"HATCH.num_seeds = %u [BL 98]\\n\", pair->value.u);",
          "2756:           if (pair->value.u)",
          "2757:             {",
          "2759:               if (!o->seeds)",
          "2760:                 {",
          "2761:                   o->num_seeds = 0;",
          "",
          "[Removed Lines]",
          "2758:               o->seeds = xcalloc (pair->value.u, sizeof (BITCODE_2RD));",
          "",
          "[Added Lines]",
          "2769:               o->seeds = (BITCODE_2RD *)xcalloc (pair->value.u,",
          "2770:                                                  sizeof (BITCODE_2RD));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2786:           BITCODE_H ref",
          "2787:               = dwg_add_handleref (obj->parent, 3, pair->value.u, obj);",
          "2788:           if (!o->boundary_handles)",
          "2790:           if (!o->boundary_handles)",
          "2791:             {",
          "2792:               o->num_boundary_handles = 0;",
          "",
          "[Removed Lines]",
          "2789:             o->boundary_handles = xcalloc (o->num_boundary_handles, sizeof (BITCODE_H));",
          "",
          "[Added Lines]",
          "2801:             o->boundary_handles = (BITCODE_H *)xcalloc (",
          "2802:                 o->num_boundary_handles, sizeof (BITCODE_H));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2802:           LOG_TRACE (\"HATCH.num_colors = %u [BL 453]\\n\", pair->value.u);",
          "2803:           if (pair->value.u)",
          "2804:             {",
          "2806:               if (!o->colors)",
          "2807:                 {",
          "2808:                   o->num_colors = 0;",
          "",
          "[Removed Lines]",
          "2805:               o->colors = xcalloc (pair->value.u, sizeof (Dwg_HATCH_Color));",
          "",
          "[Added Lines]",
          "2818:               o->colors = (Dwg_HATCH_Color *)xcalloc (",
          "2819:                   pair->value.u, sizeof (Dwg_HATCH_Color));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2912:     {",
          "2913:       int i = -1, j = -1, k = -1;",
          "2914:       Dwg_MLEADER_AnnotContext *ctx = &o->ctx;",
          "2916:       if (!lnode->lines)",
          "2917:         {",
          "2918:           lnode->num_lines = 0;",
          "",
          "[Removed Lines]",
          "2915:       lnode->lines = xcalloc (1, sizeof (Dwg_LEADER_Line));",
          "",
          "[Added Lines]",
          "2929:       lnode->lines = (Dwg_LEADER_Line *)xcalloc (1, sizeof (Dwg_LEADER_Line));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2935:               LOG_TRACE (\"%s.leaders[].num_lines = %d\\n\", obj->name, i + 1);",
          "2936:               if (i > 0)",
          "2937:                 {",
          "2941:                   if (!lnode->lines)",
          "2942:                     {",
          "2943:                       lnode->num_lines = 0;",
          "",
          "[Removed Lines]",
          "2938:                   lnode->lines",
          "2939:                       = realloc (lnode->lines,",
          "2940:                                  lnode->num_lines * sizeof (Dwg_LEADER_Line));",
          "",
          "[Added Lines]",
          "2952:                   lnode->lines = (Dwg_LEADER_Line *)realloc (",
          "2953:                       lnode->lines,",
          "2954:                       lnode->num_lines * sizeof (Dwg_LEADER_Line));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2950:               lline->num_breaks = 0;",
          "2951:               j++;",
          "2952:               lline->num_points = j + 1;",
          "2955:               memset (&lline->points[j], 0, sizeof (BITCODE_3BD));",
          "2956:               lline->points[j].x = pair->value.d;",
          "2957:               LOG_TRACE (\"%s.leaders[].lines[%d].points[%d].x = %f [BD %d]\\n\",",
          "",
          "[Removed Lines]",
          "2953:               lline->points",
          "2954:                   = realloc (lline->points, (j + 1) * sizeof (BITCODE_3BD));",
          "",
          "[Added Lines]",
          "2967:               lline->points = (BITCODE_3BD *)realloc (",
          "2968:                   lline->points, lline->num_points * sizeof (BITCODE_3BD));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2972:             case 11:",
          "2973:               k++;",
          "2974:               lline->num_breaks = k + 1;",
          "2977:               memset (&ctx->leaders[k], 0, sizeof (Dwg_LEADER_Break));",
          "2978:               lline->breaks[k].start.x = pair->value.d;",
          "2979:               LOG_TRACE (",
          "",
          "[Removed Lines]",
          "2975:               lline->breaks = realloc (lline->breaks,",
          "2976:                                        (k + 1) * sizeof (Dwg_LEADER_Break));",
          "",
          "[Added Lines]",
          "2989:               lline->breaks = (Dwg_LEADER_Break *)realloc (",
          "2990:                   lline->breaks, (k + 1) * sizeof (Dwg_LEADER_Break));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3107:               i++;",
          "3108:               ctx->num_leaders = i + 1;",
          "3109:               LOG_TRACE (\"%s.ctx.num_leaders = %d\\n\", obj->name, i + 1);",
          "3112:               memset (&ctx->leaders[i], 0, sizeof (Dwg_LEADER_Node));",
          "3113:               ctx->leaders[i].has_lastleaderlinepoint = pair->value.i;",
          "3114:               LOG_TRACE (",
          "",
          "[Removed Lines]",
          "3110:               ctx->leaders",
          "3111:                   = realloc (ctx->leaders, (i + 1) * sizeof (Dwg_LEADER_Node));",
          "",
          "[Added Lines]",
          "3124:               ctx->leaders = (Dwg_LEADER_Node *)realloc (",
          "3125:                   ctx->leaders, (i + 1) * sizeof (Dwg_LEADER_Node));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3166:                   j++;",
          "3167:                   lnode->num_breaks = j + 1;",
          "3168:                   LOG_TRACE (\"%s.leaders[%d].num_breaks = %d\\n\", obj->name, i, j + 1);",
          "3170:                       lnode->breaks, (j + 1) * sizeof (Dwg_LEADER_Break));",
          "3171:                   lnode->breaks[j].start.x = pair->value.d;",
          "3172:                   LOG_TRACE (",
          "",
          "[Removed Lines]",
          "3169:                   lnode->breaks = realloc (",
          "",
          "[Added Lines]",
          "3183:                   lnode->breaks = (Dwg_LEADER_Break *)realloc (",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3547:                 goto unknown_mleader;",
          "3548:               i++;",
          "3549:               ctx->content.txt.num_col_sizes = i + 1;",
          "3552:               ctx->content.txt.col_sizes[i] = pair->value.d;",
          "3553:               LOG_TRACE (\"%s.ctx.content.txt.col_sizes[%d] = %f [BD %d]\\n\",",
          "3554:                          obj->name, i, pair->value.d, pair->code);",
          "",
          "[Removed Lines]",
          "3550:               ctx->content.txt.col_sizes = realloc (ctx->content.txt.col_sizes,",
          "3551:                                                     (i + 1) * sizeof (double));",
          "",
          "[Added Lines]",
          "3564:               ctx->content.txt.col_sizes = (double *)realloc (",
          "3565:                   ctx->content.txt.col_sizes, (i + 1) * sizeof (double));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3663:               j++;",
          "3664:               if (!j)",
          "3665:                 {",
          "3667:                   if (!ctx->content.blk.transform)",
          "3668:                     {",
          "3669:                       return NULL;",
          "",
          "[Removed Lines]",
          "3666:                   ctx->content.blk.transform = xcalloc (16, sizeof (double));",
          "",
          "[Added Lines]",
          "3680:                   ctx->content.blk.transform = (double *)xcalloc (16, sizeof (double));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3754:         case 93:",
          "3755:           i = -1;",
          "3756:           o->num_geomesh_pts = pair->value.u;",
          "3758:           if (!o->geomesh_pts && o->num_geomesh_pts)",
          "3759:             return NULL;",
          "3760:           LOG_TRACE (\"%s.num_geomesh_pts = %u [BL %d]\\n\",",
          "",
          "[Removed Lines]",
          "3757:           o->geomesh_pts = xcalloc (pair->value.u, sizeof (Dwg_GEODATA_meshpt));",
          "",
          "[Added Lines]",
          "3771:           o->geomesh_pts = (Dwg_GEODATA_meshpt*)xcalloc (pair->value.u, sizeof (Dwg_GEODATA_meshpt));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3763:         case 96:",
          "3764:           i = -1;",
          "3765:           o->num_geomesh_faces = pair->value.u;",
          "3767:           if (!o->geomesh_faces && o->num_geomesh_faces)",
          "3768:             return NULL;",
          "3769:           LOG_TRACE (\"%s.num_geomesh_faces = %u [BL %d]\\n\",",
          "",
          "[Removed Lines]",
          "3766:           o->geomesh_faces = xcalloc (pair->value.u, sizeof (Dwg_GEODATA_meshface));",
          "",
          "[Added Lines]",
          "3780:           o->geomesh_faces = (Dwg_GEODATA_meshface*)xcalloc (pair->value.u, sizeof (Dwg_GEODATA_meshface));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4004:               j = 0;",
          "4005:               LOG_TRACE (\"%s.%s.num_borders = \" FORMAT_BL \" [BL %d]\\n\",",
          "4006:                          obj->name, key, pair->value.u, pair->code);",
          "4008:             }",
          "4009:           else if (mode == CONTENTFORMAT)",
          "4010:             {",
          "",
          "[Removed Lines]",
          "4007:               o->borders = xcalloc (o->num_borders, sizeof (Dwg_GridFormat));",
          "",
          "[Added Lines]",
          "4021:               o->borders = (Dwg_GridFormat*)xcalloc (o->num_borders, sizeof (Dwg_GridFormat));",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4295:           assert (o->num_rowstyles);",
          "4296:           if (!o->rowstyles[i].borders)",
          "4297:             {",
          "4299:               if (!o->rowstyles[i].borders)",
          "4300:                 {",
          "4301:                   o->rowstyles[i].num_borders = 0;",
          "",
          "[Removed Lines]",
          "4298:               o->rowstyles[i].borders = xcalloc (6, sizeof (Dwg_TABLESTYLE_border));",
          "",
          "[Added Lines]",
          "4312:               o->rowstyles[i].borders = (Dwg_TABLESTYLE_border*)xcalloc (6, sizeof (Dwg_TABLESTYLE_border));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4361:   BITCODE_BL num_cells = o->num_cells;",
          "4362:   int i = -1, j = -1;",
          "4365:   if (!o->cells)",
          "4366:     {",
          "4367:       o->num_cells = 0;",
          "",
          "[Removed Lines]",
          "4364:   o->cells = xcalloc (num_cells, sizeof (Dwg_TABLEGEOMETRY_Cell));",
          "",
          "[Added Lines]",
          "4378:   o->cells = (Dwg_TABLEGEOMETRY_Cell*)xcalloc (num_cells, sizeof (Dwg_TABLEGEOMETRY_Cell));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4411:           o->cells[i].num_geometry = pair->value.i;",
          "4412:           LOG_TRACE (\"%s.cells[%d].num_geometry = \" FORMAT_BL \" [BL %d]\\n\",",
          "4413:                        obj->name, i, o->cells[i].num_geometry, pair->code);",
          "4415:           if (!o->cells[i].geometry)",
          "4416:             {",
          "4417:               o->cells[i].num_geometry = 0;",
          "",
          "[Removed Lines]",
          "4414:           o->cells[i].geometry = xcalloc (pair->value.i, sizeof (Dwg_CellContentGeometry));",
          "",
          "[Added Lines]",
          "4428:           o->cells[i].geometry = (Dwg_CellContentGeometry *)xcalloc (",
          "4429:               pair->value.i, sizeof (Dwg_CellContentGeometry));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4538:   Dwg_Data *dwg = obj->parent;",
          "4539:   int i = -1, j = -1;",
          "4540:   int have_rotated_type = 0;",
          "4542:   if (!o->ref)",
          "4543:     {",
          "4544:       return NULL;",
          "",
          "[Removed Lines]",
          "4541:   o->ref = xcalloc (4, sizeof (Dwg_DIMASSOC_Ref));",
          "",
          "[Added Lines]",
          "4556:   o->ref = (Dwg_DIMASSOC_Ref *)xcalloc (4, sizeof (Dwg_DIMASSOC_Ref));",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4681:   Dwg_Object_LAYER_INDEX *o = obj->tio.object->tio.LAYER_INDEX;",
          "4682:   Dwg_Data *dwg = obj->parent;",
          "4683:   int i = 0;",
          "4685:   o->num_entries = 1;",
          "4686:   if (!o->entries)",
          "4687:     {",
          "",
          "[Removed Lines]",
          "4684:   o->entries = xcalloc (1, sizeof (Dwg_LAYER_entry));",
          "",
          "[Added Lines]",
          "4699:   o->entries = (Dwg_LAYER_entry*)xcalloc (1, sizeof (Dwg_LAYER_entry));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "5047:               BITCODE_H *hdls;",
          "5049:               BITCODE_BL num_entries = pair->value.i < 0 ? 0 : pair->value.i;",
          "5051:               if (!hdls)",
          "5052:                 num_entries = 0;",
          "5053:               dwg_dynapi_entity_set_value (_obj, obj->name, \"num_entries\",",
          "",
          "[Removed Lines]",
          "5050:               hdls = xcalloc (num_entries, sizeof (Dwg_Object_Ref *));",
          "",
          "[Added Lines]",
          "5065:               hdls = (BITCODE_H*)xcalloc (num_entries, sizeof (BITCODE_H));",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "5064:               if (pair->value.u)",
          "5065:                 {",
          "5066:                   BITCODE_H *hdls;",
          "5068:                   if (!hdls)",
          "5069:                     pair->value.u = 0;",
          "5070:                   dwg_dynapi_entity_set_value (_obj, obj->name,",
          "",
          "[Removed Lines]",
          "5067:                   hdls = xcalloc (pair->value.u, sizeof (Dwg_Object_Ref *));",
          "",
          "[Added Lines]",
          "5082:                   hdls = (BITCODE_H *)xcalloc (pair->value.u, sizeof (BITCODE_H));",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "5188:   num_xdata = _obj->num_xdata;",
          "5189:   xdata_size = _obj->xdata_size;",
          "5191:   if (!rbuf)",
          "5192:     {",
          "5193:       LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "5190:   rbuf = calloc (1, sizeof (Dwg_Resbuf));",
          "",
          "[Added Lines]",
          "5205:   rbuf = (Dwg_Resbuf *)calloc (1, sizeof (Dwg_Resbuf));",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "5302:         int i;",
          "5303:         int len = strlen (pair->value.s);",
          "5304:         int blen = len / 2;",
          "5306:         const char *pos = pair->value.s;",
          "5307:         rbuf->value.str.u.data = s;",
          "5308:         rbuf->value.str.size = blen;",
          "",
          "[Removed Lines]",
          "5305:         char *s = malloc (blen);",
          "",
          "[Added Lines]",
          "5320:         char *s = (char*)malloc (blen);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "5353:   hdl = dwg_add_handleref (dwg, 2, pair->value.u, obj);",
          "5354:   LOG_TRACE (\"%s.itemhandles[%d] = \" FORMAT_REF \" [H* %d]\\n\", obj->name, num,",
          "5355:              ARGS_REF (hdl), pair->code);",
          "5358:   if (!_obj->itemhandles || !_obj->texts)",
          "5359:     {",
          "5360:       LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "5356:   _obj->itemhandles = realloc (_obj->itemhandles, (num + 1) * sizeof (BITCODE_H));",
          "5357:   _obj->texts = realloc (_obj->texts, (num + 1) * sizeof (BITCODE_TV));",
          "",
          "[Added Lines]",
          "5371:   _obj->itemhandles = (BITCODE_H *)realloc (_obj->itemhandles,",
          "5372:                                             (num + 1) * sizeof (BITCODE_H));",
          "5373:   _obj->texts",
          "5374:       = (BITCODE_TV *)realloc (_obj->texts, (num + 1) * sizeof (BITCODE_TV));",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "5391:       dxf_free_pair (pair);",
          "5392:       return dxf_read_pair (dat);",
          "5393:     }",
          "5395:   if (!ent->preview)",
          "5396:     {",
          "5397:       LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "5394:   ent->preview = calloc (ent->preview_size, 1);",
          "",
          "[Added Lines]",
          "5411:   ent->preview = (BITCODE_TF)calloc (ent->preview_size, 1);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "5457:       const char *pos = pair->value.s;",
          "5458:       BITCODE_TF s;",
          "5461:       s = &_obj->preview[written];",
          "5462:       for (unsigned i = 0; i < blen; i++)",
          "5463:         {",
          "",
          "[Removed Lines]",
          "5460:       _obj->preview = realloc (_obj->preview, written + blen);",
          "",
          "[Added Lines]",
          "5477:       _obj->preview = (BITCODE_TF)realloc (_obj->preview, written + blen);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "5528:     {",
          "5529:       _o->num_knots = pair->value.i;",
          "5532:       if (!_o->knots)",
          "5533:         {",
          "5534:           _o->num_knots = 0;",
          "",
          "[Removed Lines]",
          "5531:       _o->knots = xcalloc (_o->num_knots, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "5548:       _o->knots = (BITCODE_BD *)xcalloc (_o->num_knots, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "5541:     {",
          "5542:       _o->num_ctrl_pts = pair->value.i;",
          "5546:       if (!_o->ctrl_pts)",
          "5547:         {",
          "5548:           _o->num_ctrl_pts = 0;",
          "",
          "[Removed Lines]",
          "5544:       _o->ctrl_pts",
          "5545:           = xcalloc (_o->num_ctrl_pts, sizeof (Dwg_SPLINE_control_point));",
          "",
          "[Added Lines]",
          "5561:       _o->ctrl_pts = (Dwg_SPLINE_control_point *)xcalloc (",
          "5562:           _o->num_ctrl_pts, sizeof (Dwg_SPLINE_control_point));",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "5555:     {",
          "5556:       _o->num_fit_pts = pair->value.i;",
          "5559:       if (!_o->fit_pts)",
          "5560:         {",
          "5561:           _o->num_fit_pts = 0;",
          "",
          "[Removed Lines]",
          "5558:       _o->fit_pts = xcalloc (_o->num_fit_pts, sizeof (BITCODE_3BD));",
          "",
          "[Added Lines]",
          "5575:       _o->fit_pts = (BITCODE_3BD *)xcalloc (_o->num_fit_pts, sizeof (BITCODE_3BD));",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "5694:     {",
          "5695:       _o->num_verts = pair->value.i;",
          "5696:       _o->parent = obj->tio.entity;",
          "5698:       if (!_o->verts)",
          "5699:         {",
          "5700:           _o->num_verts = 0;",
          "",
          "[Removed Lines]",
          "5697:       _o->verts = xcalloc (_o->num_verts, sizeof (Dwg_MLINE_vertex));",
          "",
          "[Added Lines]",
          "5714:       _o->verts = (Dwg_MLINE_vertex *)xcalloc (_o->num_verts, sizeof (Dwg_MLINE_vertex));",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "5705:           for (int _j = 0; _j < _o->num_verts; _j++)",
          "5706:             {",
          "5707:               _o->verts[_j].lines",
          "5709:               if (!_o->verts[_j].lines)",
          "5710:                 {",
          "5711:                   _o->num_lines = 0;",
          "",
          "[Removed Lines]",
          "5708:                 = xcalloc (_o->num_lines, sizeof (Dwg_MLINE_line));",
          "",
          "[Added Lines]",
          "5725:                 = (Dwg_MLINE_line*)xcalloc (_o->num_lines, sizeof (Dwg_MLINE_line));",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "5724:           for (int _j = 0; _j < _o->num_verts; _j++)",
          "5725:             {",
          "5726:               _o->verts[_j].lines",
          "5728:               if (!_o->verts[_j].lines)",
          "5729:                 {",
          "5730:                   _o->num_lines = 0;",
          "",
          "[Removed Lines]",
          "5727:                 = xcalloc (_o->num_lines, sizeof (Dwg_MLINE_line));",
          "",
          "[Added Lines]",
          "5744:                 = (Dwg_MLINE_line *)xcalloc (_o->num_lines, sizeof (Dwg_MLINE_line));",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "5871:       _o->verts[j].lines[k].parent = &_o->verts[j];",
          "5872:       _o->verts[j].lines[k].num_segparms = pair->value.i;",
          "5873:       _o->verts[j].lines[k].segparms",
          "5875:       if (!_o->verts[j].lines[k].segparms)",
          "5876:         {",
          "5877:           _o->verts[j].lines[k].num_segparms = 0;",
          "",
          "[Removed Lines]",
          "5874:           = xcalloc (pair->value.i, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "5891:           = (BITCODE_BD *)xcalloc (pair->value.i, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "6093:       num_owned = j + 1;",
          "6094:       if (dwg->header.version >= R_13)",
          "6095:         {",
          "6097:           owned[j] = dwg_add_handleref (dwg, 4, _o->handle.value, owner);",
          "6098:           LOG_TRACE (\"%s.%s[%d] = \" FORMAT_REF \" [H* 0]\\n\", owner->name, owhdls,",
          "6099:                      j, ARGS_REF (owned[j]));",
          "",
          "[Removed Lines]",
          "6096:           owned = realloc (owned, num_owned * sizeof (BITCODE_H));",
          "",
          "[Added Lines]",
          "6113:           owned = (BITCODE_H *)realloc (owned, num_owned * sizeof (BITCODE_H));",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "6168:             memmove (&_ctrl->entries[j], &_ctrl->entries[j + 1],",
          "6169:                      (_ctrl->num_entries - j - 1) * sizeof (BITCODE_H));",
          "6171:                                     _ctrl->num_entries * sizeof (BITCODE_H));",
          "6172:           break;",
          "6173:         }",
          "",
          "[Removed Lines]",
          "6170:           _ctrl->entries = realloc (_ctrl->entries,",
          "",
          "[Added Lines]",
          "6187:           _ctrl->entries = (BITCODE_H *)realloc (_ctrl->entries,",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "6192:           if (j < _ctrl->num_entries)",
          "6193:             memmove (&_ctrl->entries[j], &_ctrl->entries[j + 1],",
          "6194:                      (_ctrl->num_entries - j - 1) * sizeof (BITCODE_H));",
          "6196:                                     _ctrl->num_entries * sizeof (BITCODE_H));",
          "6197:           break;",
          "6198:         }",
          "",
          "[Removed Lines]",
          "6195:           _ctrl->entries = realloc (_ctrl->entries,",
          "",
          "[Added Lines]",
          "6212:           _ctrl->entries = (BITCODE_H *)realloc (_ctrl->entries,",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "6608:     {",
          "6609:       Dwg_Object_TABLESTYLE *_o = obj->tio.object->tio.TABLESTYLE;",
          "6610:       _o->num_rowstyles = 3;",
          "6612:       if (!_o->rowstyles)",
          "6613:         {",
          "6614:           _o->num_rowstyles = 0;",
          "",
          "[Removed Lines]",
          "6611:       _o->rowstyles = xcalloc (3, sizeof (Dwg_TABLESTYLE_rowstyles));",
          "",
          "[Added Lines]",
          "6628:       _o->rowstyles = (Dwg_TABLESTYLE_rowstyles *)xcalloc (",
          "6629:           3, sizeof (Dwg_TABLESTYLE_rowstyles));",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "6616:         }",
          "6617:       for (j = 0; j < 3; j++)",
          "6618:         {",
          "6620:           _o->rowstyles[j].num_borders = 6;",
          "6621:           for (k = 0; k < 3; k++) // defaults: ByLayer",
          "6622:             {",
          "",
          "[Removed Lines]",
          "6619:           _o->rowstyles[j].borders = xcalloc (6, sizeof (Dwg_TABLESTYLE_border));",
          "",
          "[Added Lines]",
          "6637:           _o->rowstyles[j].borders = (Dwg_TABLESTYLE_border *)xcalloc (",
          "6638:               6, sizeof (Dwg_TABLESTYLE_border));",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "6731:                 dwg_dynapi_entity_value (_ctrl, ctrlname, \"entries\", &hdls,",
          "6732:                                          NULL);",
          "6733:                 if (!hdls)",
          "6737:                 else",
          "6742:                 if (pair->value.u && !hdls)",
          "6743:                   goto invalid_dxf;",
          "6744:                 hdls[i] = dwg_add_handleref (dwg, 2, pair->value.u, obj);",
          "",
          "[Removed Lines]",
          "6734:                   {",
          "6735:                     hdls = xcalloc (num_entries, sizeof (Dwg_Object_Ref *));",
          "6736:                   }",
          "6738:                   {",
          "6739:                     hdls = realloc (hdls,",
          "6740:                                     num_entries * sizeof (Dwg_Object_Ref *));",
          "6741:                   }",
          "",
          "[Added Lines]",
          "6753:                   hdls = (BITCODE_H *)xcalloc (num_entries,",
          "6754:                                                sizeof (Dwg_Object_Ref *));",
          "6756:                   hdls = (BITCODE_H *)realloc (",
          "6757:                       hdls, num_entries * sizeof (Dwg_Object_Ref *));",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "6946:                                                &num_inserts, 0);",
          "6947:                 }",
          "6948:               if (inserts)",
          "6950:               else",
          "6952:               if (num_inserts && !inserts)",
          "6953:                 goto invalid_dxf;",
          "6954:               dwg_dynapi_entity_set_value (_obj, obj->name, \"inserts\",",
          "",
          "[Removed Lines]",
          "6949:                 inserts = realloc (inserts, num_inserts * sizeof (BITCODE_H));",
          "6951:                 inserts = xcalloc (num_inserts, sizeof (BITCODE_H));",
          "",
          "[Added Lines]",
          "6965:                 inserts = (BITCODE_H *)realloc (",
          "6966:                     inserts, num_inserts * sizeof (BITCODE_H));",
          "6968:                 inserts",
          "6969:                     = (BITCODE_H *)xcalloc (num_inserts, sizeof (BITCODE_H));",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "7413:             {",
          "7414:               Dwg_Entity_OLE2FRAME *_o = obj->tio.entity->tio.OLE2FRAME;",
          "7415:               _o->data_size = pair->value.l;",
          "7417:               if (!_o->data)",
          "7418:                 {",
          "7419:                   _o->data_size = 0;",
          "",
          "[Removed Lines]",
          "7416:               _o->data = xcalloc (pair->value.l, 1);",
          "",
          "[Added Lines]",
          "7434:               _o->data = (BITCODE_RC *)xcalloc (pair->value.l, 1);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "7670:               if (!j)",
          "7671:                 {",
          "7672:                   o->column_heights",
          "7674:                   if (!o->column_heights)",
          "7675:                     {",
          "7676:                       o->num_column_heights = 0;",
          "",
          "[Removed Lines]",
          "7673:                     = xcalloc (o->num_column_heights, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "7691:                     = (BITCODE_BD*)xcalloc (o->num_column_heights, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "7717:                   if (cur_cell < 0 || cur_cell >= (int)_o->num_cells)",
          "7718:                     goto invalid_dxf;",
          "7719:                   if (cur_cell == 0 && !_o->cells)",
          "7721:                   tbl_sty = &_o->cells[cur_cell];",
          "7722:                   sprintf (key, \"cells[%d]\", cur_cell);",
          "7723:                   o = &tbl_sty->cellstyle;",
          "",
          "[Removed Lines]",
          "7720:                     _o->cells = xcalloc (_o->num_cells, sizeof (Dwg_TABLESTYLE_CellStyle));",
          "",
          "[Added Lines]",
          "7738:                     _o->cells = (Dwg_TABLESTYLE_CellStyle *)xcalloc (",
          "7739:                         _o->num_cells, sizeof (Dwg_TABLESTYLE_CellStyle));",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "7776:               Dwg_Entity_LEADER *o = obj->tio.entity->tio.LEADER;",
          "7777:               if (!j && pair->code == 10)",
          "7778:                 {",
          "7780:                   if (!o->points)",
          "7781:                     {",
          "7782:                       o->num_points = 0;",
          "",
          "[Removed Lines]",
          "7779:                   o->points = xcalloc (o->num_points, sizeof (BITCODE_3BD));",
          "",
          "[Added Lines]",
          "7798:                   o->points = (BITCODE_3BD*)xcalloc (o->num_points, sizeof (BITCODE_3BD));",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "7806:               Dwg_Object_LAYERFILTER *o = obj->tio.object->tio.LAYERFILTER;",
          "7807:               if (!o->names)",
          "7808:                 {",
          "7810:                   j = 0;",
          "7811:                 }",
          "7812:               else",
          "",
          "[Removed Lines]",
          "7809:                   o->names = xcalloc (1, sizeof (BITCODE_T));",
          "",
          "[Added Lines]",
          "7828:                   o->names = (BITCODE_T*)xcalloc (1, sizeof (BITCODE_T));",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "7873:                               if (!j && pair->code == 14)",
          "7874:                                 {",
          "7876:                                                        sizeof (BITCODE_2RD));",
          "7877:                                   dwg_dynapi_entity_set_value (_obj, obj->name,",
          "7878:                                                                f->name,",
          "",
          "[Removed Lines]",
          "7875:                                   clip_verts = xcalloc (num_clip_verts,",
          "",
          "[Added Lines]",
          "7894:                                   clip_verts = (BITCODE_2RD*)xcalloc (num_clip_verts,",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "8279:                                                &matrix, NULL);",
          "8280:                       if (!matrix)",
          "8281:                         {",
          "8283:                           if (!matrix)",
          "8284:                             goto invalid_dxf;",
          "8285:                           j = 0;",
          "",
          "[Removed Lines]",
          "8282:                           matrix = xcalloc (16, sizeof (BITCODE_BD));",
          "",
          "[Added Lines]",
          "8301:                           matrix = (BITCODE_BD*)xcalloc (16, sizeof (BITCODE_BD));",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "8900:                   else if (dwg->header.version > R_2004 && _obj->name",
          "8901:                            && _obj->has_strings_area)",
          "8902:                     {",
          "8904:                       if (!_obj->strings_area)",
          "8905:                         return DWG_ERR_OUTOFMEM;",
          "8906:                     }",
          "8907:                   if (dwg->header.version <= R_2004)",
          "8908:                     {",
          "8910:                       if (!_obj->strings_area)",
          "8911:                         return DWG_ERR_OUTOFMEM;",
          "8912:                     }",
          "",
          "[Removed Lines]",
          "8903:                       _obj->strings_area = xcalloc (512, 1);",
          "8909:                       _obj->strings_area = xcalloc (256, 1);",
          "",
          "[Added Lines]",
          "8922:                       _obj->strings_area = (BITCODE_TF)xcalloc (512, 1);",
          "8928:                       _obj->strings_area = (BITCODE_TF)xcalloc (256, 1);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "9606:   loglevel = dwg->opts & DWG_OPTS_LOGLEVEL;",
          "9607:   num_dxf_objs = 0;",
          "9608:   size_dxf_objs = 1000;",
          "9610:   if (!dwg->object_map)",
          "9611:     dwg->object_map = hash_new (dat->size / 1000);",
          "",
          "[Removed Lines]",
          "9609:   dxf_objs = malloc (1000 * sizeof (Dxf_Objs));",
          "",
          "[Added Lines]",
          "9628:   dxf_objs = (Dxf_Objs*)malloc (1000 * sizeof (Dxf_Objs));",
          "",
          "---------------"
        ],
        "src/in_dxf.h||src/in_dxf.h": [
          "File: src/in_dxf.h -> src/in_dxf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     (void)dwg_add_object (dwg);                                               \\",
          "110:     obj = &dwg->object[idx];                                                  \\",
          "111:     obj->supertype = DWG_SUPERTYPE_OBJECT;                                    \\",
          "113:     obj->tio.object->objid = obj->index;                                      \\",
          "114:     obj->tio.object->dwg = dwg;                                               \\",
          "115:   }",
          "",
          "[Removed Lines]",
          "112:     obj->tio.object = calloc (1, sizeof (Dwg_Object_Object));                 \\",
          "",
          "[Added Lines]",
          "112:     obj->tio.object                                                           \\",
          "113:         = (Dwg_Object_Object *)calloc (1, sizeof (Dwg_Object_Object));        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:     (void)dwg_add_object (dwg);                                               \\",
          "121:     obj = &dwg->object[idx];                                                  \\",
          "122:     obj->supertype = DWG_SUPERTYPE_ENTITY;                                    \\",
          "124:     obj->tio.entity->objid = obj->index;                                      \\",
          "125:     obj->tio.entity->dwg = dwg;                                               \\",
          "126:   }",
          "",
          "[Removed Lines]",
          "123:     obj->tio.entity = calloc (1, sizeof (Dwg_Object_Entity));                 \\",
          "",
          "[Added Lines]",
          "124:     obj->tio.entity                                                           \\",
          "125:         = (Dwg_Object_Entity *)calloc (1, sizeof (Dwg_Object_Entity));        \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161: #define STRADD_TV(field, string)                                              \\",
          "162:   if (string)                                                                 \\",
          "163:     {                                                                         \\",
          "165:       strcpy (field, string);                                                 \\",
          "166:     }",
          "167: #define STRADD_T(field, string)                                               \\",
          "",
          "[Removed Lines]",
          "164:       field = malloc (strlen (string) + 1);                                   \\",
          "",
          "[Added Lines]",
          "166:       field = (char*)malloc (strlen (string) + 1);                            \\",
          "",
          "---------------"
        ],
        "src/in_json.c||src/in_json.c": [
          "File: src/in_json.c -> src/in_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:   if (memchr (&dat->chain[t->start], '\\\\', len))",
          "344:     {",
          "345:       len += 8;",
          "347:       if (!key)",
          "348:         goto outofmemory;",
          "349:       dat->chain[t->end] = '\\0';",
          "",
          "[Removed Lines]",
          "346:       key = malloc (len);",
          "",
          "[Added Lines]",
          "346:       key = (char*)malloc (len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:               free (key);",
          "361:               goto normal;",
          "362:             }",
          "364:           if (!key)",
          "365:             goto outofmemory;",
          "366:         }",
          "",
          "[Removed Lines]",
          "363:           key = realloc (key, len);",
          "",
          "[Added Lines]",
          "363:           key = (char *)realloc (key, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:   else",
          "369:     {",
          "370:     normal:",
          "372:       if (!key)",
          "373:         goto outofmemory;",
          "374:       memcpy (key, &dat->chain[t->start], len);",
          "",
          "[Removed Lines]",
          "371:       key = malloc (len + 1);",
          "",
          "[Added Lines]",
          "371:       key = (char *)malloc (len + 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408:   const size_t len = t->end - t->start;",
          "409:   const char *str = (char *)&dat->chain[t->start];",
          "410:   const unsigned long blen = len / 2;",
          "412:   char *pos = (char *)str;",
          "413:   char *old;",
          "",
          "[Removed Lines]",
          "411:   char *buf = len ? malloc (blen + 1) : NULL;",
          "",
          "[Added Lines]",
          "411:   char *buf = len ? (char *)malloc (blen + 1) : NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "832: {",
          "833:   const char *section = \"FILEHEADER\";",
          "834:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "836:   Dwg_Object *obj = NULL;",
          "837:   char version[80];",
          "838:   int size = t->size;",
          "",
          "[Removed Lines]",
          "835:   struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "835:   Dwg_Header *_obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1076:              tokens->index, size);",
          "1077:   tokens->index++;",
          "1078:   if (dwg->num_classes == 0)",
          "1080:   else",
          "1083:   if (!dwg->dwg_class)",
          "1084:     {",
          "1085:       LOG_ERROR (\"Out of memory\");",
          "",
          "[Removed Lines]",
          "1079:     dwg->dwg_class = calloc (size, sizeof (Dwg_Class));",
          "1081:     dwg->dwg_class = realloc (dwg->dwg_class,",
          "1082:                               (dwg->num_classes + size) * sizeof (Dwg_Class));",
          "",
          "[Added Lines]",
          "1079:     dwg->dwg_class = (Dwg_Class *)calloc (size, sizeof (Dwg_Class));",
          "1081:     dwg->dwg_class = (Dwg_Class *)realloc (",
          "1082:         dwg->dwg_class, (dwg->num_classes + size) * sizeof (Dwg_Class));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1232:   const char *name = \"\";",
          "1233:   int isize = -1;",
          "1234:   long size = 0;",
          "1236:   obj->num_eed = t->size;",
          "1237:   LOG_TRACE (\"num_eed: \" FORMAT_BL\" [BL]\\n\", obj->num_eed);",
          "1238:   tokens->index++; // array of objects",
          "",
          "[Removed Lines]",
          "1235:   obj->eed = calloc (t->size, sizeof (Dwg_Eed));",
          "",
          "[Added Lines]",
          "1235:   obj->eed = (Dwg_Eed *)calloc (t->size, sizeof (Dwg_Eed));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1260:                   obj->eed[i].size = (BITCODE_BS)size;",
          "1261:                   have = size + 1; // we overallocate by 1 for the ending NUL",
          "1263:                   LOG_INSANE (\" alloc eed[%u].data: %d\\n\", i, have)",
          "1264:                }",
          "1265:               else if (strEQc (key, \"handle\"))",
          "",
          "[Removed Lines]",
          "1262:                   obj->eed[i].data = calloc (have, 1);",
          "",
          "[Added Lines]",
          "1262:                   obj->eed[i].data = (Dwg_Eed_Data *)calloc (have, 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1279:                     {",
          "1280:                       if (have > 0)",
          "1281:                         {",
          "1283:                           LOG_INSANE (\" realloc eed[%u].data: %d\\n\", i-1, (int)(size - have))",
          "1284:                         }",
          "1285:                       have = size - have - 1;",
          "1287:                       LOG_INSANE (\" alloc eed[%u].data: %d\\n\", i, have)",
          "1288:                     }",
          "1289:                   have--;",
          "",
          "[Removed Lines]",
          "1282:                           obj->eed[i - 1].data = realloc (obj->eed[i - 1].data, size - have);",
          "1286:                       obj->eed[i].data = calloc (have, 1);",
          "",
          "[Added Lines]",
          "1282:                           obj->eed[i - 1].data = (Dwg_Eed_Data *)realloc (obj->eed[i - 1].data, size - have);",
          "1286:                       obj->eed[i].data = (Dwg_Eed_Data *)calloc (have, 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1671:                 const char *restrict key)",
          "1672: {",
          "1673:   const Dwg_DYNAPI_field *f;",
          "1675:   strcpy (s, key);",
          "1676:   strcat (s, \"_size\");",
          "1677:   for (f = &fields[0]; f->name; f++)",
          "",
          "[Removed Lines]",
          "1674:   char *s = malloc (strlen (key) + 12);",
          "",
          "[Added Lines]",
          "1674:   char *s = (char *)malloc (strlen (key) + 12);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1837:                 {",
          "1839:                   unsigned blen = len / 2;",
          "1841:                   char *pos = str;",
          "1842:                   char *old;",
          "1843:                   for (unsigned i = 0; i < blen; i++)",
          "",
          "[Removed Lines]",
          "1840:                   char *buf = len ? malloc (blen + 1) : NULL;",
          "",
          "[Added Lines]",
          "1840:                   char *buf = len ? (char*)malloc (blen + 1) : NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1872:                         }",
          "1873:                       else if (len != (size_t)k)",
          "1874:                         {",
          "1876:                           memset (&str[len + 1], 0, k - len - 1);",
          "1877:                         }",
          "1878:                     }",
          "1879:                   else if (f->size > sizeof (char *))",
          "1880:                     {",
          "1882:                       memset (&str[len + 1], 0, f->size - len - 1);",
          "1883:                     }",
          "1884:                   LOG_TRACE (\"%s.%s: \\\"%s\\\" [%s %d]\\n\", name, key, str, f->type,",
          "",
          "[Removed Lines]",
          "1875:                           str = realloc (str, k);",
          "1881:                       str = realloc (str, f->size);",
          "",
          "[Added Lines]",
          "1875:                           str = (char*)realloc (str, k);",
          "1881:                       str = (char*)realloc (str, f->size);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1947:                   LOG_ERROR (\"Illegal old json format\");",
          "1948:                   return DWG_ERR_INVALIDDWG;",
          "1949:                 }",
          "1951:               json_set_numfield (_obj, fields, key, (long)size1);",
          "1952:               tokens->index++;",
          "1953:               for (int k = 0; k < t->size; k++)",
          "",
          "[Removed Lines]",
          "1950:               hdls = size1 ? calloc (size1, sizeof (BITCODE_H)) : NULL;",
          "",
          "[Added Lines]",
          "1950:               hdls = size1 ? (BITCODE_H *)calloc (size1, sizeof (BITCODE_H)) : NULL;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1975:             {",
          "1976:               int skip = 0;",
          "1977:               BITCODE_BL size1 = t->size;",
          "1979:               if (memBEGINc (name, \"DICTIONARY\") && strEQc (key, \"texts\"))",
          "1980:                 {",
          "1981:                   LOG_ERROR (\"Illegal old json format\");",
          "1982:                   return DWG_ERR_INVALIDDWG;",
          "1983:                 }",
          "1985:               json_set_numfield (_obj, fields, key, (long)size1);",
          "1986:               tokens->index++;",
          "1987:               for (int k = 0; k < t->size; k++)",
          "",
          "[Removed Lines]",
          "1978:               BITCODE_TV *elems;",
          "1984:               elems = size1 ? calloc (size1, sizeof (BITCODE_T)) : NULL;",
          "",
          "[Added Lines]",
          "1978:               BITCODE_T *elems;",
          "1984:               elems = size1 ? (BITCODE_T *)calloc (size1, sizeof (BITCODE_T)) : NULL;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2008:           else if (t->type == JSMN_ARRAY && strEQc (f->type, \"3DPOINT*\"))",
          "2009:             {",
          "2010:               int size1 = t->size;",
          "2012:               json_set_numfield (_obj, fields, key, size1);",
          "2013:               tokens->index++;",
          "2014:               for (int k = 0; k < size1; k++)",
          "",
          "[Removed Lines]",
          "2011:               BITCODE_3DPOINT *pts = size1 ? calloc (size1, sizeof (BITCODE_3BD)) : NULL;",
          "",
          "[Added Lines]",
          "2011:               BITCODE_3DPOINT *pts",
          "2012:                   = size1 ? (BITCODE_3BD *)calloc (size1, sizeof (BITCODE_3BD))",
          "2013:                           : NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2023:           else if (t->type == JSMN_ARRAY && strEQc (f->type, \"2RD*\"))",
          "2024:             {",
          "2025:               int size1 = t->size;",
          "2027:               json_set_numfield (_obj, fields, key, size1);",
          "2028:               tokens->index++;",
          "2029:               for (int k = 0; k < size1; k++)",
          "",
          "[Removed Lines]",
          "2026:               BITCODE_2DPOINT *pts = size1 ? calloc (size1, sizeof (BITCODE_2RD)) : NULL;",
          "",
          "[Added Lines]",
          "2028:               BITCODE_2DPOINT *pts = size1 ? (BITCODE_2DPOINT *)calloc (",
          "2029:                                          size1, sizeof (BITCODE_2DPOINT))",
          "2030:                                            : NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2038:           else if (t->type == JSMN_ARRAY && strEQc (f->type, \"BD*\"))",
          "2039:             {",
          "2040:               int size1 = t->size;",
          "2042:               json_set_numfield (_obj, fields, key, size1);",
          "2043:               tokens->index++;",
          "2044:               for (int k = 0; k < size1; k++)",
          "",
          "[Removed Lines]",
          "2041:               BITCODE_BD *nums = size1 ? calloc (size1, sizeof (BITCODE_BD)) : NULL;",
          "",
          "[Added Lines]",
          "2045:               BITCODE_BD *nums = size1 ? (BITCODE_BD *)calloc (size1, sizeof (BITCODE_BD)) : NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2054:           else if (t->type == JSMN_ARRAY && strEQc (f->type, \"BL*\"))",
          "2055:             {",
          "2056:               int size1 = t->size;",
          "2058:               json_set_numfield (_obj, fields, key, size1);",
          "2059:               tokens->index++;",
          "2060:               for (int k = 0; k < size1; k++)",
          "",
          "[Removed Lines]",
          "2057:               BITCODE_BL *nums = size1 ? calloc (size1, sizeof (BITCODE_BL)) : NULL;",
          "",
          "[Added Lines]",
          "2061:               BITCODE_BL *nums = size1 ? (BITCODE_BL *)calloc (size1, sizeof (BITCODE_BL)) : NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2069:             }",
          "2070:           else if (t->type == JSMN_ARRAY && strEQc (key, \"xdata\") && strEQc (name, \"XRECORD\"))",
          "2071:             {",
          "2073:               JSON_TOKENS_CHECK_OVERFLOW_ERR",
          "2074:             }",
          "2075:           else if (t->type == JSMN_ARRAY && strEQc (key, \"acis_data\") && strEQc (f->type, \"RC*\"))",
          "",
          "[Removed Lines]",
          "2072:               error |= json_xdata (dat, dwg, tokens, _obj);",
          "",
          "[Added Lines]",
          "2076:               error |= json_xdata (dat, dwg, tokens, (Dwg_Object_XRECORD *)_obj);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2132:                 }",
          "2133:               if (strEQc (subclass, \"DIMASSOC_Ref\") && num_elems != 4)",
          "2134:                 {",
          "2136:                   LOG_TRACE (\"DIMASSOC num_refs = 4\\n\");",
          "2137:                 }",
          "2138:               else",
          "2140:               dwg_dynapi_field_set_value (dwg, _obj, f, &elems, 1);",
          "2141:               tokens->index++;",
          "",
          "[Removed Lines]",
          "2135:                   elems = calloc (MAX (4, num_elems), size_elem);",
          "2139:                 elems = num_elems ? calloc (num_elems, size_elem) : NULL;",
          "",
          "[Added Lines]",
          "2139:                   elems = (char*)calloc (MAX (4, num_elems), size_elem);",
          "2143:                 elems = num_elems ? (char*)calloc (num_elems, size_elem) : NULL;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2519:       int rounded = size;",
          "2520:       if (rounded % REFS_PER_REALLOC)",
          "2521:         rounded += REFS_PER_REALLOC - (rounded % REFS_PER_REALLOC);",
          "2523:     }",
          "2524:   else",
          "2525:     dwg_add_object (dwg);",
          "",
          "[Removed Lines]",
          "2522:       dwg->object = calloc (rounded, sizeof (Dwg_Object));",
          "",
          "[Added Lines]",
          "2526:       dwg->object = (Dwg_Object*)calloc (rounded, sizeof (Dwg_Object));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2647:                 }",
          "2648:               LOG_TRACE (\"\\nnew object %s [%d] (size: %d)\\n\", name, i,",
          "2649:                          objsize);",
          "2651:               obj->tio.object->dwg = dwg;",
          "2652:               obj->tio.object->objid = i;",
          "2656:               obj->tio.object->tio.APPID = _obj;",
          "2657:               obj->tio.object->tio.APPID->parent = obj->tio.object;",
          "2658:               obj->name = strdup (name);",
          "",
          "[Removed Lines]",
          "2650:               obj->tio.object = calloc (1, sizeof (Dwg_Object_Object));",
          "2655:               _obj = calloc (1, objsize);",
          "",
          "[Added Lines]",
          "2654:               obj->tio.object = (Dwg_Object_Object*)calloc (1, sizeof (Dwg_Object_Object));",
          "2659:               _obj = (Dwg_Object_APPID*)calloc (1, objsize);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2706:                 }",
          "2707:               LOG_TRACE (\"\\nnew entity %s [%d] (size: %d)\\n\", name, i,",
          "2708:                          objsize);",
          "2710:               obj->tio.entity->dwg = dwg;",
          "2711:               obj->tio.entity->objid = i;",
          "2715:               obj->tio.entity->tio.POINT = (Dwg_Entity_POINT *)_obj;",
          "2716:               obj->tio.entity->tio.POINT->parent = obj->tio.entity;",
          "2717:               obj->name = strdup (name);",
          "",
          "[Removed Lines]",
          "2709:               obj->tio.entity = calloc (1, sizeof (Dwg_Object_Entity));",
          "2714:               _obj = calloc (1, objsize);",
          "",
          "[Added Lines]",
          "2713:               obj->tio.entity = (Dwg_Object_Entity *)calloc (1, sizeof (Dwg_Object_Entity));",
          "2718:               _obj = (Dwg_Object_APPID *)calloc (1, objsize);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2844:               int len = t->end - t->start;",
          "2845:               char *hex = json_string (dat, tokens);",
          "2846:               unsigned blen = len / 2;",
          "2848:               char *pos = hex;",
          "2849:               char *old;",
          "2850:               for (unsigned k = 0; k < blen; k++)",
          "",
          "[Removed Lines]",
          "2847:               BITCODE_TF buf = malloc (blen + 1);",
          "",
          "[Added Lines]",
          "2851:               BITCODE_TF buf = (BITCODE_TF)malloc (blen + 1);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2896:                 {",
          "2901:                     {",
          "2902:                       Dwg_Entity_MULTILEADER *_o",
          "2903:                           = (Dwg_Entity_MULTILEADER *)_obj;",
          "2904:                       Dwg_MLEADER_Content *cnt = &_o->ctx.content;",
          "2905:                       const Dwg_DYNAPI_field *sf",
          "2907:                       if (sf",
          "2908:                           && _set_struct_field (",
          "2909:                               dat, obj, tokens, cnt, \"MLEADER_Content\",",
          "",
          "[Removed Lines]",
          "2899:                   if (memBEGINc (key, \"ctx.content.txt.\")",
          "2900:                       || memBEGINc (key, \"ctx.content.blk.\"))",
          "2906:                           = dwg_dynapi_subclass_fields (\"MLEADER_Content\");",
          "",
          "[Added Lines]",
          "2903:                   if (memBEGINc (key, \"ctx.content.txt.\"))",
          "2909:                           = dwg_dynapi_subclass_fields (\"MLEADER_Content_MText\");",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3150: {",
          "3151:   const char *section = \"AuxHeader\";",
          "3152:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3154:   int size;",
          "3155:   if (t->type != JSMN_OBJECT)",
          "3156:     {",
          "",
          "[Removed Lines]",
          "3153:   struct Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "[Added Lines]",
          "3156:   Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3221: {",
          "3222:   const char *section = \"SummaryInfo\";",
          "3223:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3225:   int size;",
          "3226:   if (t->type != JSMN_OBJECT)",
          "3227:     {",
          "",
          "[Removed Lines]",
          "3224:   struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "[Added Lines]",
          "3227:   Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3264:           size1 = t->size;",
          "3265:           LOG_TRACE (\"\\n%s pos:%d [%d members]\\n--------------------\\n\",",
          "3266:                      \"SummaryInfo_Property\", tokens->index, size);",
          "3268:           _obj->num_props = size1;",
          "3269:           tokens->index++;",
          "3270:           for (int j = 0; j < size1; j++)",
          "",
          "[Removed Lines]",
          "3267:           _obj->props = calloc (size1, sizeof (Dwg_SummaryInfo_Property));",
          "",
          "[Added Lines]",
          "3270:           _obj->props = (Dwg_SummaryInfo_Property *)calloc (",
          "3271:               size1, sizeof (Dwg_SummaryInfo_Property));",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3337: {",
          "3338:   const char *section = \"AppInfo\";",
          "3339:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3341:   int size;",
          "3342:   if (t->type != JSMN_OBJECT)",
          "3343:     {",
          "",
          "[Removed Lines]",
          "3340:   struct Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "[Added Lines]",
          "3344:   Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3389: {",
          "3390:   const char *section = \"AppInfoHistory\";",
          "3391:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3393:   int size;",
          "3394:   if (t->type != JSMN_OBJECT)",
          "3395:     {",
          "",
          "[Removed Lines]",
          "3392:   struct Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "[Added Lines]",
          "3396:   Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3430: static int",
          "3431: json_FileDepList_Files (Bit_Chain *restrict dat, Dwg_Data *restrict dwg,",
          "3432:                         jsmntokens_t *restrict tokens,",
          "3434: {",
          "3435:   const char *section = \"FileDepList_Files\";",
          "3436:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "",
          "[Removed Lines]",
          "3433:                         struct Dwg_FileDepList *o, int size)",
          "",
          "[Added Lines]",
          "3437:                         Dwg_FileDepList *o, int size)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3442:       json_advance_unknown (dat, tokens, t->type, 0);",
          "3443:       return DWG_ERR_INVALIDTYPE;",
          "3444:     }",
          "3446:   o->num_files = size;",
          "3447:   for (int j = 0; j < size; j++)",
          "3448:     {",
          "",
          "[Removed Lines]",
          "3445:   o->files = calloc (size, sizeof (Dwg_FileDepList_Files));",
          "",
          "[Added Lines]",
          "3449:   o->files",
          "3450:       = (Dwg_FileDepList_Files *)calloc (size, sizeof (Dwg_FileDepList_Files));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3498: {",
          "3499:   int error = 0;",
          "3500:   const char *section = \"FileDepList\";",
          "3502:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3503:   int size;",
          "",
          "[Removed Lines]",
          "3501:   struct Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "[Added Lines]",
          "3506:   Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3528:           else",
          "3529:             {",
          "3530:               int size1 = t->size;",
          "3532:               _obj->num_features = size1;",
          "3533:               tokens->index++;",
          "3534:               for (int j = 0; j < size1; j++)",
          "",
          "[Removed Lines]",
          "3531:               _obj->features = calloc (size1, sizeof (BITCODE_TV));",
          "",
          "[Added Lines]",
          "3536:               _obj->features = (BITCODE_TV *)calloc (size1, sizeof (BITCODE_TV));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3575:                jsmntokens_t *restrict tokens)",
          "3576: {",
          "3577:   const char *section = \"Security\";",
          "3579:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3580:   int size;",
          "3581:   if (t->type != JSMN_OBJECT)",
          "",
          "[Removed Lines]",
          "3578:   struct Dwg_Security *_obj = &dwg->security;",
          "",
          "[Added Lines]",
          "3583:   Dwg_Security *_obj = &dwg->security;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3625:                  jsmntokens_t *restrict tokens)",
          "3626: {",
          "3627:   const char *section = \"RevHistory\";",
          "3629:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3630:   int size;",
          "3631:   if (t->type != JSMN_OBJECT)",
          "",
          "[Removed Lines]",
          "3628:   struct Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "[Added Lines]",
          "3633:   Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3670:                    jsmntokens_t *restrict tokens)",
          "3671: {",
          "3672:   const char *section = \"ObjFreeSpace\";",
          "3674:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3675:   int size;",
          "3676:   if (t->type != JSMN_OBJECT)",
          "",
          "[Removed Lines]",
          "3673:   struct Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "[Added Lines]",
          "3678:   Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3722: static int",
          "3723: json_AcDs_SegmentIndex (Bit_Chain *restrict dat, Dwg_Data *restrict dwg,",
          "3724:                         jsmntokens_t *restrict tokens,",
          "3726: {",
          "3727:   const char *section = \"AcDs_SegmentIndex\";",
          "3728:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "",
          "[Removed Lines]",
          "3725:                         struct Dwg_AcDs *o, int size)",
          "",
          "[Added Lines]",
          "3730:                         Dwg_AcDs *o, int size)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3782: static int",
          "3783: json_AcDs_Segments (Bit_Chain *restrict dat, Dwg_Data *restrict dwg,",
          "3784:                     jsmntokens_t *restrict tokens,",
          "3786: {",
          "3787:   const char *section = \"AcDs_Segment\";",
          "3788:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "",
          "[Removed Lines]",
          "3785:                     struct Dwg_AcDs *o, int size)",
          "",
          "[Added Lines]",
          "3790:                     Dwg_AcDs *o, int size)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3922:                    jsmntokens_t *restrict tokens)",
          "3923: {",
          "3924:   const char *section = \"AcDs\";",
          "3926:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "3927:   int error = 0;",
          "3928:   int size;",
          "",
          "[Removed Lines]",
          "3925:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "3930:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4000:                jsmntokens_t *restrict tokens)",
          "4001: {",
          "4002:   const char *section = \"Template\";",
          "4004:   const jsmntok_t *t = &tokens->tokens[tokens->index];",
          "4005:   int size;",
          "4006:   if (t->type != JSMN_OBJECT)",
          "",
          "[Removed Lines]",
          "4003:   struct Dwg_Template *_obj = &dwg->template;",
          "",
          "[Added Lines]",
          "4008:   Dwg_Template *_obj = &dwg->Template;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4046: EXPORT int",
          "4047: dwg_read_json (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "4048: {",
          "4050:   jsmn_parser parser;",
          "4051:   jsmntokens_t tokens;",
          "4052:   unsigned int i;",
          "",
          "[Removed Lines]",
          "4049:   struct Dwg_Header *obj = &dwg->header;",
          "",
          "[Added Lines]",
          "4054:   Dwg_Header *obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4087:       return DWG_ERR_INVALIDDWG;",
          "4088:     }",
          "4089:   LOG_TRACE (\"  num_tokens: %ld\\n\", tokens.num_tokens);",
          "4091:   if (!tokens.tokens)",
          "4092:     return DWG_ERR_OUTOFMEM;",
          "",
          "[Removed Lines]",
          "4090:   tokens.tokens = calloc (tokens.num_tokens + 1024, sizeof (jsmntok_t));",
          "",
          "[Added Lines]",
          "4095:   tokens.tokens = (jsmntok_t *)calloc (tokens.num_tokens + 1024, sizeof (jsmntok_t));",
          "",
          "---------------"
        ],
        "src/out_dxf.c||src/out_dxf.c": [
          "File: src/out_dxf.c -> src/out_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "961:       if (strchr (str, '\\n') || strchr (str, '\\r'))",
          "962:         {",
          "963:           const int len = 2 * strlen (str) + 1;",
          "965:           fprintf (dat->fh, \"%s\\r\\n\", cquote (_buf, str, len));",
          "966:           freea (_buf);",
          "967:         }",
          "",
          "[Removed Lines]",
          "964:           char *_buf = alloca (len);",
          "",
          "[Added Lines]",
          "964:           char *_buf = (char *)alloca (len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2246: dxf_ENDBLK_empty (Bit_Chain *restrict dat, const Dwg_Object *restrict hdr)",
          "2247: {",
          "2250:   Dwg_Data *dwg = hdr->parent;",
          "2252:   obj->parent = dwg;",
          "2253:   obj->index = dwg->num_objects;",
          "2254:   dwg_setup_ENDBLK (obj);",
          "2256:   obj->tio.entity->ownerhandle->obj = (Dwg_Object *)hdr;",
          "2257:   obj->tio.entity->ownerhandle->handleref = hdr->handle;",
          "2258:   obj->tio.entity->ownerhandle->absolute_ref = hdr->handle.value;",
          "",
          "[Removed Lines]",
          "2249:   Dwg_Object *obj = calloc (1, sizeof (Dwg_Object));",
          "2255:   obj->tio.entity->ownerhandle = calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "2249:   Dwg_Object *obj = (Dwg_Object *)calloc (1, sizeof (Dwg_Object));",
          "2255:   obj->tio.entity->ownerhandle = (BITCODE_H)calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2439: dxf_acds_write (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "2440: {",
          "2443:   if (0 && _obj->num_segidx)",
          "2444:     {",
          "2445:       SECTION (ACSDSDATA); // FIXME",
          "",
          "[Removed Lines]",
          "2442:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "2442:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------"
        ],
        "src/out_dxfb.c||src/out_dxfb.c": [
          "File: src/out_dxfb.c -> src/out_dxfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1860: static void",
          "1861: dxfb_ENDBLK_empty (Bit_Chain *restrict dat, const Dwg_Object *restrict hdr)",
          "1862: {",
          "1864:   obj->parent = hdr->parent;",
          "1865:   obj->index = obj->parent->num_objects;",
          "1866:   dwg_setup_ENDBLK (obj);",
          "1868:   obj->tio.entity->ownerhandle->obj = (Dwg_Object *)hdr;",
          "1869:   obj->tio.entity->ownerhandle->handleref = hdr->handle;",
          "1870:   obj->tio.entity->ownerhandle->absolute_ref = hdr->handle.value;",
          "",
          "[Removed Lines]",
          "1863:   Dwg_Object *obj = calloc (1, sizeof (Dwg_Object));",
          "1867:   obj->tio.entity->ownerhandle = calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "[Added Lines]",
          "1863:   Dwg_Object *obj = (Dwg_Object *)calloc (1, sizeof (Dwg_Object));",
          "1867:   obj->tio.entity->ownerhandle = (Dwg_Object_Ref*)calloc (1, sizeof (Dwg_Object_Ref));",
          "",
          "---------------"
        ],
        "src/out_geojson.c||src/out_geojson.c": [
          "File: src/out_geojson.c -> src/out_geojson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     if (len < 4096 / 6)                                                       \\",
          "134:       {                                                                       \\",
          "135:         const int _len = 6 * len + 1;                                         \\",
          "137:         PREFIX fprintf (dat->fh, \"\\\"\" #name \"\\\": \\\"%s\\\",\\n\",                  \\",
          "138:                         json_cquote (_buf, str, _len));                       \\",
          "139:         freea (_buf);                                                         \\",
          "",
          "[Removed Lines]",
          "136:         char *_buf = alloca (_len);                                           \\",
          "",
          "[Added Lines]",
          "136:         char *_buf = (char *)alloca (_len);                                   \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     else                                                                      \\",
          "142:       {                                                                       \\",
          "143:         const int _len = 6 * len + 1;                                         \\",
          "145:         PREFIX fprintf (dat->fh, \"\\\"\" #name \"\\\": \\\"%s\\\",\\n\",                  \\",
          "146:                         json_cquote (_buf, str, _len));                       \\",
          "147:         free (_buf);                                                          \\",
          "",
          "[Removed Lines]",
          "144:         char *_buf = malloc (_len);                                           \\",
          "",
          "[Added Lines]",
          "144:         char *_buf = (char *)malloc (_len);                                   \\",
          "",
          "---------------"
        ],
        "src/out_json.c||src/out_json.c": [
          "File: src/out_json.c -> src/out_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:         if (len < 4096 / 6)                                                   \\",
          "241:           {                                                                   \\",
          "242:             const int _len = 6 * len + 1;                                     \\",
          "244:             fprintf (dat->fh, \"\\\"%s\\\"\", json_cquote (_buf, str, _len));       \\",
          "245:             freea (_buf);                                                     \\",
          "246:           }                                                                   \\",
          "247:         else                                                                  \\",
          "248:           {                                                                   \\",
          "249:             const int _len = 6 * len + 1;                                     \\",
          "251:             fprintf (dat->fh, \"\\\"%s\\\"\", json_cquote (_buf, str, _len));       \\",
          "252:             free (_buf);                                                      \\",
          "253:           }                                                                   \\",
          "",
          "[Removed Lines]",
          "243:             char *_buf = alloca (_len);                                       \\",
          "250:             char *_buf = malloc (_len);                                       \\",
          "",
          "[Added Lines]",
          "243:             char *_buf = (char*)alloca (_len);                                \\",
          "250:             char *_buf = (char*)malloc (_len);                                \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941: static char* _path_field(const char *path)",
          "942: {",
          "944:   if (s && s[1] == '.')",
          "945:     {",
          "947:     }",
          "948:   return (char*)path;",
          "949: }",
          "",
          "[Removed Lines]",
          "943:   char *s = strrchr (path, ']');",
          "946:       return &s[2];",
          "",
          "[Added Lines]",
          "943:   const char *s = strrchr (path, ']');",
          "946:       return (char*)&s[2];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1688: static int",
          "1689: json_fileheader_write (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1690: {",
          "1692:   Dwg_Object *obj = NULL;",
          "1693:   int i;",
          "",
          "[Removed Lines]",
          "1691:   struct Dwg_Header *_obj = &dwg->header;",
          "",
          "[Added Lines]",
          "1691:   Dwg_Header *_obj = &dwg->header;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1827: static int",
          "1828: json_section_summary (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1829: {",
          "1831:   Dwg_Object *obj = NULL;",
          "1832:   int error = 0;",
          "",
          "[Removed Lines]",
          "1830:   struct Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "[Added Lines]",
          "1830:   Dwg_SummaryInfo *_obj = &dwg->summaryinfo;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1842: static int",
          "1843: json_section_vbaproject (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1844: {",
          "1846:   Dwg_Object *obj = NULL;",
          "1847:   int error = 0;",
          "",
          "[Removed Lines]",
          "1845:   struct Dwg_VBAProject *_obj = &dwg->vbaproject;",
          "",
          "[Added Lines]",
          "1845:   Dwg_VBAProject *_obj = &dwg->vbaproject;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1858: static int",
          "1859: json_section_appinfo (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1860: {",
          "1862:   Dwg_Object *obj = NULL;",
          "1863:   int error = 0;",
          "",
          "[Removed Lines]",
          "1861:   struct Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "[Added Lines]",
          "1861:   Dwg_AppInfo *_obj = &dwg->appinfo;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1873: static int",
          "1874: json_section_appinfohistory (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1875: {",
          "1877:   Dwg_Object *obj = NULL;",
          "1878:   int error = 0;",
          "",
          "[Removed Lines]",
          "1876:   struct Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "[Added Lines]",
          "1876:   Dwg_AppInfoHistory *_obj = &dwg->appinfohistory;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1890: static int",
          "1891: json_section_filedeplist (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1892: {",
          "1894:   Dwg_Object *obj = NULL;",
          "1895:   int error = 0;",
          "1896:   BITCODE_RL vcount;",
          "",
          "[Removed Lines]",
          "1893:   struct Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "[Added Lines]",
          "1893:   Dwg_FileDepList *_obj = &dwg->filedeplist;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1906: static int",
          "1907: json_section_security (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1908: {",
          "1910:   Dwg_Object *obj = NULL;",
          "1911:   int error = 0;",
          "",
          "[Removed Lines]",
          "1909:   struct Dwg_Security *_obj = &dwg->security;",
          "",
          "[Added Lines]",
          "1909:   Dwg_Security *_obj = &dwg->security;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1921: static int",
          "1922: json_section_revhistory (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1923: {",
          "1925:   Dwg_Object *obj = NULL;",
          "1926:   int error = 0;",
          "1927:   BITCODE_RL vcount;",
          "",
          "[Removed Lines]",
          "1924:   struct Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "[Added Lines]",
          "1924:   Dwg_RevHistory *_obj = &dwg->revhistory;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1938: static int",
          "1939: json_section_objfreespace (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1940: {",
          "1942:   Dwg_Object *obj = NULL;",
          "1943:   int error = 0;",
          "",
          "[Removed Lines]",
          "1941:   struct Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "[Added Lines]",
          "1941:   Dwg_ObjFreeSpace *_obj = &dwg->objfreespace;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1953: static int",
          "1954: json_section_acds (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1955: {",
          "1957:   Dwg_Object *obj = NULL;",
          "1958:   int error = 0;",
          "1959:   BITCODE_RL rcount3 = 0, rcount4, vcount;",
          "",
          "[Removed Lines]",
          "1956:   struct Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "[Added Lines]",
          "1956:   Dwg_AcDs *_obj = &dwg->acds;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1971: static int",
          "1972: json_section_template (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1973: {",
          "1975:   Dwg_Object *obj = NULL;",
          "1976:   int error = 0;",
          "",
          "[Removed Lines]",
          "1974:   struct Dwg_Template *_obj = &dwg->template;",
          "",
          "[Added Lines]",
          "1974:   Dwg_Template *_obj = &dwg->Template;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1986: static int",
          "1987: json_section_auxheader (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "1988: {",
          "1990:   Dwg_Object *obj = NULL;",
          "1991:   int error = 0, i;",
          "1992:   BITCODE_RL vcount;",
          "",
          "[Removed Lines]",
          "1989:   struct Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "[Added Lines]",
          "1989:   Dwg_AuxHeader *_obj = &dwg->auxheader;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2036: dwg_write_json (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)",
          "2037: {",
          "2038:   const int minimal = dwg->opts & DWG_OPTS_MINIMAL;",
          "2040:   int error = 0;",
          "2042:   fprintf (dat->fh, \"{\\n  \\\"created_by\\\": \\\"%s\\\"\", PACKAGE_STRING);",
          "",
          "[Removed Lines]",
          "2039:   struct Dwg_Header *obj = &dwg->header;",
          "",
          "[Added Lines]",
          "2039:   Dwg_Header *obj = &dwg->header;",
          "",
          "---------------"
        ],
        "src/reedsolomon.c||src/reedsolomon.c": [
          "File: src/reedsolomon.c -> src/reedsolomon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:   unsigned char *synbuf, *sigma, *omega;",
          "224:   int errflag = 0;",
          "228:   memset (synbuf, 0, 16);",
          "230:   for (j = 0; j < 16; j++)",
          "",
          "[Removed Lines]",
          "226:   synbuf = malloc (POLY_LENGTH);",
          "",
          "[Added Lines]",
          "226:   synbuf = (unsigned char *)malloc (POLY_LENGTH);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:       return -1;",
          "251:     }",
          "254:   memset (sigma, 0, POLY_LENGTH);",
          "257:   memset (omega, 0, POLY_LENGTH);",
          "259:   solve_key_equation (synbuf, sigma, omega);",
          "",
          "[Removed Lines]",
          "253:   sigma = malloc (POLY_LENGTH);",
          "256:   omega = malloc (POLY_LENGTH);",
          "",
          "[Added Lines]",
          "252:   sigma = (unsigned char *)malloc (POLY_LENGTH);",
          "255:   omega = (unsigned char *)malloc (POLY_LENGTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:   PolyMatrix matrix;",
          "318:   int i, j;",
          "321:   for (i = 0; i < 2; i++)",
          "322:     {",
          "324:       for (j = 0; j < 3; j++)",
          "325:         {",
          "328:         }",
          "329:     }",
          "",
          "[Removed Lines]",
          "320:   matrix = malloc (sizeof (PolyRow) * 2);",
          "323:       matrix[i] = malloc (sizeof (Poly) * 3);",
          "326:           matrix[i][j] = malloc (POLY_LENGTH);",
          "327:           memset (matrix[i][j], 0, POLY_LENGTH);",
          "",
          "[Added Lines]",
          "319:   matrix = (PolyMatrix)calloc (2, sizeof (PolyRow));",
          "322:       matrix[i] = (PolyRow)calloc (3, sizeof (Poly));",
          "325:           matrix[i][j] = (Poly)calloc (1, POLY_LENGTH);",
          "",
          "---------------"
        ],
        "test/unit-testing/decode_test.c||test/unit-testing/decode_test.c": [
          "File: test/unit-testing/decode_test.c -> test/unit-testing/decode_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define DECODE_TEST_C",
          "4: #include \"../../src/decode.c\"",
          "6: #include \"tests_common.h\"",
          "8: void read_literal_length_tests (void);",
          "",
          "[Removed Lines]",
          "2: #include \"../../src/common.h\"",
          "3: CLANG_DIAG_IGNORE (-Wpragma-pack)",
          "5: CLANG_DIAG_RESTORE",
          "",
          "[Added Lines]",
          "3: #include <stddef.h>",
          "4: #ifdef CLANG_DIAG_IGNORE",
          "5:   CLANG_DIAG_IGNORE (-Wpragma-pack)",
          "6: #endif",
          "8: #ifdef CLANG_DIAG_IGNORE",
          "9:   CLANG_DIAG_RESTORE",
          "10: #endif",
          "",
          "---------------"
        ],
        "test/unit-testing/dynapi_test.c||test/unit-testing/dynapi_test.c": [
          "File: test/unit-testing/dynapi_test.c -> test/unit-testing/dynapi_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48480:                \"dwg_dynapi_fields_size (\\\"ASSOCACTION_Deps\\\"): %d\\n\", size1, size2);",
          "48481:       error++;",
          "48482:     }",
          "48483:   size1 = sizeof (struct _dwg_AcDs_Data);",
          "48484:   size2 = dwg_dynapi_fields_size (\"AcDs_Data\");",
          "48485:   if (size1 != size2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48483:   size1 = sizeof (struct _dwg_AcDs);",
          "48484:   size2 = dwg_dynapi_fields_size (\"AcDs\");",
          "48485:   if (size1 != size2)",
          "48486:     {",
          "48487:       fprintf (stderr, \"sizeof(struct _dwg_AcDs): %d != \"",
          "48488:                \"dwg_dynapi_fields_size (\\\"AcDs\\\"): %d\\n\", size1, size2);",
          "48489:       error++;",
          "48490:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48960:                \"dwg_dynapi_fields_size (\\\"MLEADER_AnnotContext\\\"): %d\\n\", size1, size2);",
          "48961:       error++;",
          "48962:     }",
          "48963:   size1 = sizeof (struct _dwg_MLINESTYLE_line);",
          "48964:   size2 = dwg_dynapi_fields_size (\"MLINESTYLE_line\");",
          "48965:   if (size1 != size2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48971:   size1 = sizeof (struct _dwg_MLEADER_Content_Block);",
          "48972:   size2 = dwg_dynapi_fields_size (\"MLEADER_Content_Block\");",
          "48973:   if (size1 != size2)",
          "48974:     {",
          "48975:       fprintf (stderr, \"sizeof(struct _dwg_MLEADER_Content_Block): %d != \"",
          "48976:                \"dwg_dynapi_fields_size (\\\"MLEADER_Content_Block\\\"): %d\\n\", size1, size2);",
          "48977:       error++;",
          "48978:     }",
          "48979:   size1 = sizeof (struct _dwg_MLEADER_Content_MText);",
          "48980:   size2 = dwg_dynapi_fields_size (\"MLEADER_Content_MText\");",
          "48981:   if (size1 != size2)",
          "48982:     {",
          "48983:       fprintf (stderr, \"sizeof(struct _dwg_MLEADER_Content_MText): %d != \"",
          "48984:                \"dwg_dynapi_fields_size (\\\"MLEADER_Content_MText\\\"): %d\\n\", size1, size2);",
          "48985:       error++;",
          "48986:     }",
          "",
          "---------------"
        ],
        "test/unit-testing/multileader.c||test/unit-testing/multileader.c": [
          "File: test/unit-testing/multileader.c -> test/unit-testing/multileader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   CHK_SUBCLASS_TYPE (ctx, MLEADER_AnnotContext, has_content_txt, B);",
          "143:   if (ctx.has_content_txt)",
          "144:     {",
          "146:       CHK_SUBCLASS_3RD (ctx.content, MLEADER_Content, txt.normal);",
          "147:       CHK_SUBCLASS_H (ctx.content, MLEADER_Content, txt.style);",
          "148:       CHK_SUBCLASS_3RD (ctx.content, MLEADER_Content, txt.location);",
          "",
          "[Removed Lines]",
          "145:       CHK_SUBCLASS_TYPE (ctx.content, MLEADER_Content, txt.default_text, TV);",
          "",
          "[Added Lines]",
          "145:       CHK_SUBCLASS_UTF8TEXT (ctx.content, MLEADER_Content, txt.default_text);",
          "",
          "---------------"
        ],
        "test/unit-testing/tests_common.h||test/unit-testing/tests_common.h": [
          "File: test/unit-testing/tests_common.h -> test/unit-testing/tests_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <string.h>",
          "3: #include <stdlib.h>",
          "4: #include <stdio.h>",
          "5: #include <stdarg.h>",
          "6: #if defined(BITS_TEST_C) || defined(DECODE_TEST_C)",
          "7: #  include \"../../src/bits.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <stddef.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "559cd620e581bc06caf3cb489b72c5ef6fbb88e7",
      "candidate_info": {
        "commit_hash": "559cd620e581bc06caf3cb489b72c5ef6fbb88e7",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/559cd620e581bc06caf3cb489b72c5ef6fbb88e7",
        "files": [
          "src/dec_macros.h",
          "src/decode.c",
          "src/dwg.spec",
          "src/spec.h"
        ],
        "message": "decode: init handle_stream earlier <r2007 also\n\nunify hdl_dat init, now also pre-r2007.\ncall dwg_decode_common_entity_handle_data and START_OBJECT_HANDLE_STREAM earlier",
        "before_after_code_files": [
          "src/dec_macros.h||src/dec_macros.h",
          "src/decode.c||src/decode.c",
          "src/dwg.spec||src/dwg.spec",
          "src/spec.h||src/spec.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/dec_macros.h||src/dec_macros.h"
          ],
          "candidate": [
            "src/dec_macros.h||src/dec_macros.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec_macros.h||src/dec_macros.h": [
          "File: src/dec_macros.h -> src/dec_macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1125:   }",
          "1127: #define START_HANDLE_STREAM                                                   \\",
          "1129:     {                                                                         \\",
          "1130:       vcount = 1 + bit_position (dat);                                        \\",
          "1131:       if (obj->hdlpos != (unsigned long)vcount)                               \\",
          "",
          "[Removed Lines]",
          "1128:   if (dat->version >= R_2007)                                                 \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1231:   SINCE (R_13)                                                                \\",
          "1232:   {                                                                           \\",
          "1233:     START_HANDLE_STREAM;                                                      \\",
          "1238:   }",
          "",
          "[Removed Lines]",
          "1234:     PRE (R_2007)                                                              \\",
          "1235:     {                                                                         \\",
          "1236:       error |= dwg_decode_common_entity_handle_data (dat, hdl_dat, obj);      \\",
          "1237:     }                                                                         \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1291:                                  Dwg_Object *restrict obj)                    \\",
          "1292:   {                                                                           \\",
          "1293:     int error = dwg_add_##token (obj);                                        \\",
          "1294:     if (error)                                                                \\",
          "1295:       return error;                                                           \\",
          "1296:     SINCE (R_2007)                                                            \\",
          "1297:       {                                                                       \\",
          "1299:         error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,   \\",
          "1300:                                               obj);                           \\",
          "1301:       }                                                                       \\",
          "1302:     else                                                                      \\",
          "1303:       {                                                                       \\",
          "1305:       }                                                                       \\",
          "1306:     return error;                                                             \\",
          "1307:   }                                                                           \\",
          "",
          "[Removed Lines]",
          "1298:         Bit_Chain obj_dat = *dat, str_dat = *dat, hdl_dat = *dat;             \\",
          "1304:         error = dwg_decode_##token##_private (dat, dat, dat, obj);            \\",
          "",
          "[Added Lines]",
          "1289:     Bit_Chain hdl_dat = *dat;                                                 \\",
          "1294:         Bit_Chain obj_dat = *dat, str_dat = *dat;                             \\",
          "1300:         error = dwg_decode_##token##_private (dat, &hdl_dat, dat, obj);       \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1385:                                  Dwg_Object *restrict obj)                    \\",
          "1386:   {                                                                           \\",
          "1387:     int error = dwg_add_##token (obj);                                        \\",
          "1388:     if (error)                                                                \\",
          "1389:       return error;                                                           \\",
          "1390:     SINCE (R_2007)                                                            \\",
          "1391:       {                                                                       \\",
          "1393:         error = dwg_decode_##token##_private (&obj_dat, &hdl_dat, &str_dat,   \\",
          "1394:                                               obj);                           \\",
          "1395:       }                                                                       \\",
          "1396:     else                                                                      \\",
          "1397:       {                                                                       \\",
          "1399:       }                                                                       \\",
          "1400:     return error;                                                             \\",
          "1401:   }                                                                           \\",
          "",
          "[Removed Lines]",
          "1392:         Bit_Chain obj_dat = *dat, str_dat = *dat, hdl_dat = *dat;             \\",
          "1398:         error = dwg_decode_##token##_private (dat, dat, dat, obj);            \\",
          "",
          "[Added Lines]",
          "1384:     Bit_Chain hdl_dat = *dat;                                                 \\",
          "1389:         Bit_Chain obj_dat = *dat, str_dat = *dat;                             \\",
          "1395:         error = dwg_decode_##token##_private (dat, &hdl_dat, dat, obj);       \\",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4060:         has_wrong_bitsize = 1;",
          "4061:         error |= DWG_ERR_VALUEOUTOFBOUNDS;",
          "4062:       }",
          "4063:   }",
          "4064:   SINCE (R_2007)",
          "4065:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4063:     else",
          "4064:       error |= obj_handle_stream (dat, obj, hdl_dat);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4112:   #include \"common_entity_data.spec\"",
          "4120:   obj->common_size = bit_position (dat) - objectpos;",
          "",
          "[Removed Lines]",
          "4115:   SINCE (R_2007) {",
          "4116:     dwg_decode_common_entity_handle_data (dat, hdl_dat, obj);",
          "4117:   }",
          "",
          "[Added Lines]",
          "4117:   dwg_decode_common_entity_handle_data (dat, hdl_dat, obj);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4154:         has_wrong_bitsize = 1;",
          "4155:         error |= DWG_ERR_VALUEOUTOFBOUNDS;",
          "4156:       }",
          "4157:   }",
          "4158:   SINCE (R_2007)",
          "4159:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4157:     else",
          "4158:       error |= obj_handle_stream (dat, obj, hdl_dat);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4224:   obj->common_size = bit_position (dat) - objectpos;",
          "4225:   LOG_HANDLE (\"--common_size: %lu\\n\", obj->common_size); // needed for unknown",
          "4227:   return error;",
          "4228: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4229:   FIELD_HANDLE (ownerhandle, 4, 0);",
          "4230:   REACTORS (4);",
          "4231:   XDICOBJHANDLE (3);",
          "",
          "---------------"
        ],
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "6061: DWG_OBJECT (DIMASSOC)",
          "6063:   DECODE_UNKNOWN_BITS",
          "6074:   SUBCLASS (AcDbDimAssoc)",
          "6079:   FIELD_BLx (associativity, 90);",
          "6080:   FIELD_RC (trans_space_flag, 70);",
          "",
          "[Removed Lines]",
          "6064:   SINCE (R_2007)",
          "6065:   {",
          "6066: #ifdef IS_JSON",
          "6067:     KEY (ownerhandle);",
          "6068: #endif",
          "6069:     VALUE_HANDLE (obj->tio.object->ownerhandle, ownerhandle, 4, 0);",
          "6070:     REACTORS (4);",
          "6071:     XDICOBJHANDLE (3);",
          "6072:   }",
          "6075:   SINCE (R_2007)",
          "6076:   {",
          "6077:     FIELD_HANDLE (dimensionobj, 4, 330);",
          "6078:   }",
          "",
          "[Added Lines]",
          "6065:   FIELD_HANDLE (dimensionobj, 4, 330);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6109:   END_REPEAT (ref)",
          "6124: DWG_OBJECT_END",
          "",
          "[Removed Lines]",
          "6112:   PRE (R_2007)",
          "6113:   {",
          "6114:     START_OBJECT_HANDLE_STREAM;",
          "6115:     FIELD_HANDLE (dimensionobj, 4, 330);",
          "6116:   }",
          "6117:   SINCE (R_2007)",
          "6118:   {",
          "6119:     START_HANDLE_STREAM;",
          "6120:   }",
          "",
          "[Added Lines]",
          "6099:   START_OBJECT_HANDLE_STREAM;",
          "",
          "---------------"
        ],
        "src/spec.h||src/spec.h": [
          "File: src/spec.h -> src/spec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "337: #  define START_OBJECT_HANDLE_STREAM                                          \\",
          "338:     START_HANDLE_STREAM;                                                      \\",
          "339:     assert (obj->supertype == DWG_SUPERTYPE_OBJECT);                          \\",
          "343: #endif",
          "345: #ifndef COMMON_TABLE_FLAGS",
          "",
          "[Removed Lines]",
          "340:     VALUE_HANDLE (obj->tio.object->ownerhandle, ownerhandle, 4, 0);           \\",
          "341:     REACTORS (4);                                                             \\",
          "342:     XDICOBJHANDLE (3)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "340f92d5b9ca88e7b7e1cbe94b22d63fc09a290c",
      "candidate_info": {
        "commit_hash": "340f92d5b9ca88e7b7e1cbe94b22d63fc09a290c",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/340f92d5b9ca88e7b7e1cbe94b22d63fc09a290c",
        "files": [
          "src/classes.inc",
          "test/unit-testing/Makefile.am",
          "test/unit-testing/appid.c",
          "test/unit-testing/appid_control.c",
          "test/unit-testing/block_control.c",
          "test/unit-testing/block_header.c",
          "test/unit-testing/common.c",
          "test/unit-testing/dictionary.c",
          "test/unit-testing/dictionaryvar.c",
          "test/unit-testing/dictionarywdflt.c",
          "test/unit-testing/dimstyle.c",
          "test/unit-testing/dimstyle_control.c",
          "test/unit-testing/dynamicblockpurgepreventer.c",
          "test/unit-testing/layer_control.c",
          "test/unit-testing/ltype.c",
          "test/unit-testing/ltype_control.c",
          "test/unit-testing/lwpline.c",
          "test/unit-testing/lwpolyline.c",
          "test/unit-testing/style.c",
          "test/unit-testing/style_control.c",
          "test/unit-testing/ucs.c",
          "test/unit-testing/ucs_control.c",
          "test/unit-testing/view.c",
          "test/unit-testing/view_control.c",
          "test/unit-testing/vport.c",
          "test/unit-testing/vport_control.c",
          "test/unit-testing/vport_entity_control.c",
          "test/unit-testing/wipeoutvariables.c"
        ],
        "message": "unit-testing: add missing stable objects",
        "before_after_code_files": [
          "src/classes.inc||src/classes.inc",
          "test/unit-testing/Makefile.am||test/unit-testing/Makefile.am",
          "test/unit-testing/appid.c||test/unit-testing/appid.c",
          "test/unit-testing/appid_control.c||test/unit-testing/appid_control.c",
          "test/unit-testing/block_control.c||test/unit-testing/block_control.c",
          "test/unit-testing/block_header.c||test/unit-testing/block_header.c",
          "test/unit-testing/common.c||test/unit-testing/common.c",
          "test/unit-testing/dictionary.c||test/unit-testing/dictionary.c",
          "test/unit-testing/dictionaryvar.c||test/unit-testing/dictionaryvar.c",
          "test/unit-testing/dictionarywdflt.c||test/unit-testing/dictionarywdflt.c",
          "test/unit-testing/dimstyle.c||test/unit-testing/dimstyle.c",
          "test/unit-testing/dimstyle_control.c||test/unit-testing/dimstyle_control.c",
          "test/unit-testing/dynamicblockpurgepreventer.c||test/unit-testing/dynamicblockpurgepreventer.c",
          "test/unit-testing/layer_control.c||test/unit-testing/layer_control.c",
          "test/unit-testing/ltype.c||test/unit-testing/ltype.c",
          "test/unit-testing/ltype_control.c||test/unit-testing/ltype_control.c",
          "test/unit-testing/style.c||test/unit-testing/style.c",
          "test/unit-testing/style_control.c||test/unit-testing/style_control.c",
          "test/unit-testing/ucs.c||test/unit-testing/ucs.c",
          "test/unit-testing/ucs_control.c||test/unit-testing/ucs_control.c",
          "test/unit-testing/view.c||test/unit-testing/view.c",
          "test/unit-testing/view_control.c||test/unit-testing/view_control.c",
          "test/unit-testing/vport.c||test/unit-testing/vport.c",
          "test/unit-testing/vport_control.c||test/unit-testing/vport_control.c",
          "test/unit-testing/vport_entity_control.c||test/unit-testing/vport_entity_control.c",
          "test/unit-testing/wipeoutvariables.c||test/unit-testing/wipeoutvariables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/classes.inc||src/classes.inc"
          ],
          "candidate": [
            "src/classes.inc||src/classes.inc"
          ]
        }
      },
      "candidate_diff": {
        "src/classes.inc||src/classes.inc": [
          "File: src/classes.inc -> src/classes.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:   STABLE_CLASS    (ACTION, IMAGEDEF)",
          "180:   STABLE_CLASS    (ACTION, IMAGEDEF_REACTOR)",
          "181:   STABLE_CLASS    (ACTION, LAYER_INDEX)",
          "183:   STABLE_CLASS    (ACTION, LWPOLYLINE)",
          "184:   STABLE_CLASS    (ACTION, MLEADERSTYLE) // TODO block_rotation nan",
          "185:   STABLE_CLASS    (ACTION, OBJECTCONTEXTDATA)",
          "",
          "[Removed Lines]",
          "182:   STABLE_CLASS    (ACTION, LAYOUT) // TODO bottom_margin nan",
          "",
          "[Added Lines]",
          "182:   STABLE_CLASS    (ACTION, LAYOUT)       // TODO bottom_margin nan",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   STABLE_CLASS    (ACTION, SPATIAL_FILTER)",
          "192:   STABLE_CLASS    (ACTION, SPATIAL_INDEX)",
          "195:   STABLE_CLASS_DXF(ACTION, UNDERLAYDEFINITION, PDFDEFINITION)",
          "196:   STABLE_CLASS_DXF(ACTION, UNDERLAYDEFINITION, DGNDEFINITION)",
          "197:   STABLE_CLASS_DXF(ACTION, UNDERLAYDEFINITION, DWFDEFINITION)",
          "",
          "[Removed Lines]",
          "194:   STABLE_CLASS    (ACTION, UNDERLAYDEFINITION) //only tested pdf, but very simple",
          "",
          "[Added Lines]",
          "194:   STABLE_CLASS    (ACTION, UNDERLAYDEFINITION)    // only tested pdf, but very simple",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:   DEBUGGING_CLASS_CPP (ACTION, TABLECONTENT, AcDbTableContent) // dxfname: \"TABLE\"",
          "241:   DEBUGGING_CLASS     (ACTION, ACSH_BOX_CLASS)",
          "242:   DEBUGGING_CLASS     (ACTION, ACSH_SWEEP_CLASS)",
          "243:   DEBUGGING_CLASS     (ACTION, ACSH_EXTRUSION_CLASS)",
          "",
          "[Removed Lines]",
          "235:   DEBUGGING_CLASS     (ACTION, TABLEGEOMETRY) //wrong geom_data",
          "236:   DEBUGGING_CLASS     (ACTION, CELLSTYLEMAP) //broken",
          "237:   DEBUGGING_CLASS     (ACTION, MATERIAL)     //working on",
          "238:   DEBUGGING_CLASS     (ACTION, SUN)          //90%",
          "239:   DEBUGGING_CLASS     (ACTION, SUNSTUDY)     //almost",
          "240:   DEBUGGING_CLASS     (ACTION, VBA_PROJECT)  //Has its own section?",
          "",
          "[Added Lines]",
          "235:   DEBUGGING_CLASS     (ACTION, TABLEGEOMETRY) // wrong geom_data",
          "236:   DEBUGGING_CLASS     (ACTION, CELLSTYLEMAP) // broken",
          "237:   DEBUGGING_CLASS     (ACTION, MATERIAL)     // working on",
          "238:   DEBUGGING_CLASS     (ACTION, SUN)          // 90%",
          "239:   DEBUGGING_CLASS     (ACTION, SUNSTUDY)     // almost",
          "240:   DEBUGGING_CLASS     (ACTION, VBA_PROJECT)  // has its own section?",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:   DEBUGGING_CLASS_DXF (ACTION, ASSOC2DCONSTRAINTGROUP, ACDBASSOC2DCONSTRAINTGROUP)",
          "252:   DEBUGGING_CLASS     (ACTION, MESH)",
          "255:   DEBUGGING_CLASS     (ACTION, LIGHTLIST)",
          "256:   DEBUGGING_CLASS_DXF (ACTION, ANNOTSCALEOBJECTCONTEXTDATA, ACDB_ALDIMOBJECTCONTEXTDATA_CLASS)",
          "257:   DEBUGGING_CLASS_DXF (ACTION, ANNOTSCALEOBJECTCONTEXTDATA, ACDB_BLKREFOBJECTCONTEXTDATA_CLASS)",
          "",
          "[Removed Lines]",
          "253:   DEBUGGING_CLASS     (ACTION, RENDERENVIRONMENT) //no coverage",
          "254:   DEBUGGING_CLASS     (ACTION, RENDERGLOBAL)      //no coverage",
          "",
          "[Added Lines]",
          "253:   DEBUGGING_CLASS     (ACTION, RENDERENVIRONMENT) // no coverage",
          "254:   DEBUGGING_CLASS     (ACTION, RENDERGLOBAL)      // no coverage",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:   UNHANDLED_CLASS     (ACTION, ACDSRECORD)",
          "268:   UNHANDLED_CLASS     (ACTION, ACDSSCHEMA)",
          "269:   UNHANDLED_CLASS     (ACTION, ACMECOMMANDHISTORY) // no dxf",
          "272:   UNHANDLED_CLASS     (ACTION, ACSH_HISTORY_CLASS)",
          "273:   UNHANDLED_CLASS     (ACTION, ACSH_REVOLVE_CLASS)",
          "274:   UNHANDLED_CLASS     (ACTION, ACSH_SPHERE_CLASS)",
          "",
          "[Removed Lines]",
          "270:   UNHANDLED_CLASS     (ACTION, ACMESCOPE) // no dxf",
          "271:   UNHANDLED_CLASS     (ACTION, ACMESTATEMGR) // no dxf",
          "",
          "[Added Lines]",
          "270:   UNHANDLED_CLASS     (ACTION, ACMESCOPE)          // no dxf",
          "271:   UNHANDLED_CLASS     (ACTION, ACMESTATEMGR)       // no dxf",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "291:   UNHANDLED_CLASS_DXF (ACTION, XREFPANELOBJECT, EXACXREFPANELOBJECT)",
          "",
          "[Removed Lines]",
          "294: ACAD_PROXY_ENTITY",
          "295: ACDBPOINTCLOUDEX",
          "296: ARRAY",
          "297: ATTBLOCKREF",
          "298: ATTDYNBLOCKREF",
          "299: BLOCKREF",
          "300: DYNBLOCKREF",
          "301: XREF",
          "302: CENTERMARK",
          "303: CENTERLINE",
          "304: SECTIONOBJECT",
          "308: ACAD_EVALUATION_GRAPH",
          "309: ACSH_BOX_CLASS",
          "310: ACSH_EXTRUSION_CLASS",
          "311: ACSH_HISTORY_CLASS",
          "312: ACSH_SWEEP_CLASS",
          "313: MENTALRAYRENDERSETTINGS",
          "",
          "[Added Lines]",
          "294:    ACAD_PROXY_ENTITY",
          "295:    ACDBPOINTCLOUDEX",
          "296:    ARRAY",
          "297:    ATTBLOCKREF",
          "298:    ATTDYNBLOCKREF",
          "299:    BLOCKREF",
          "300:    DYNBLOCKREF",
          "301:    XREF",
          "302:    CENTERMARK",
          "303:    CENTERLINE",
          "304:    SECTIONOBJECT",
          "308:    ACAD_EVALUATION_GRAPH",
          "309:    ACSH_BOX_CLASS",
          "310:    ACSH_EXTRUSION_CLASS",
          "311:    ACSH_HISTORY_CLASS",
          "312:    ACSH_SWEEP_CLASS",
          "313:    MENTALRAYRENDERSETTINGS",
          "",
          "---------------"
        ],
        "test/unit-testing/Makefile.am||test/unit-testing/Makefile.am": [
          "File: test/unit-testing/Makefile.am -> test/unit-testing/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: testobjects = \\",
          "43:  3dface \\",
          "44:  3dsolid \\",
          "45:  arc \\",
          "46:  arc_dimension \\",
          "47:  assocaligneddimactionbody \\",
          "48:  assocperssubentmanager \\",
          "49:  assocplanesurfaceactionbody \\",
          "51:  attdef \\",
          "52:  attrib \\",
          "53:  block \\",
          "54:  body \\",
          "55:  camera \\",
          "56:  circle \\",
          "57:  dbcolor \\",
          "58:  dim_aligned \\",
          "59:  dim_ang2ln \\",
          "60:  dim_ang3pt \\",
          "",
          "[Removed Lines]",
          "50:  assocdependency \\",
          "",
          "[Added Lines]",
          "45:  acsh_box_class \\",
          "46:  acsh_extrusion_class \\",
          "47:  acsh_sweep_class \\",
          "48:  annotscaleobjectcontextdata \\",
          "49:  appid \\",
          "50:  appid_control \\",
          "53:  assoc2dconstraintgroup \\",
          "54:  assocaction \\",
          "56:  assocdependency \\",
          "57:  assocnetwork \\",
          "60:  assocosnappointrefactionparam \\",
          "64:  block_control \\",
          "65:  block_header \\",
          "70:  dictionary \\",
          "71:  dictionaryvar \\",
          "72:  dictionarywdflt \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:  dim_ordinate \\",
          "64:  dim_radius \\",
          "65:  dimassoc \\",
          "66:  ellipse \\",
          "67:  endblk \\",
          "68:  geodata \\",
          "69:  hatch \\",
          "70:  helix \\",
          "71:  image \\",
          "72:  insert \\",
          "73:  layout \\",
          "74:  leader \\",
          "75:  light \\",
          "76:  line \\",
          "78:  minsert \\",
          "79:  mline \\",
          "80:  mlinestyle \\",
          "81:  mtext \\",
          "82:  multileader \\",
          "83:  ole2frame \\",
          "84:  perssubentmanager \\",
          "85:  plotsettings \\",
          "",
          "[Removed Lines]",
          "77:  lwpline \\",
          "",
          "[Added Lines]",
          "81:  dimstyle \\",
          "82:  dimstyle_control \\",
          "83:  dynamicblockpurgepreventer \\",
          "86:  evaluation_graph \\",
          "87:  extrudedsurface \\",
          "88:  field \\",
          "89:  fieldlist \\",
          "91:  geomapimage \\",
          "92:  geopositionmarker \\",
          "93:  group \\",
          "96:  idbuffer \\",
          "98:  imagedef \\",
          "99:  imagedef_reactor \\",
          "101:  layer \\",
          "102:  layer_control \\",
          "103:  layer_index \\",
          "107:  lightlist \\",
          "109:  loftedsurface \\",
          "110:  ltype \\",
          "111:  ltype_control \\",
          "112:  lwpolyline \\",
          "113:  material \\",
          "114:  mesh \\",
          "116:  mleaderstyle \\",
          "121:  navisworksmodeldef \\",
          "122:  object_ptr \\",
          "123:  objectcontextdata \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:  polyline_3d \\",
          "89:  polyline_mesh \\",
          "90:  polyline_pface \\",
          "91:  ray \\",
          "92:  region \\",
          "93:  seqend \\",
          "94:  shape \\",
          "95:  solid \\",
          "96:  spline \\",
          "97:  table \\",
          "98:  tablestyle \\",
          "99:  text \\",
          "100:  tolerance \\",
          "101:  trace \\",
          "102:  underlay \\",
          "103:  underlaydefinition \\",
          "104:  vertex_2d \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:  proxy_object \\",
          "133:  rastervariables \\",
          "136:  renderenvironment \\",
          "137:  renderglobal \\",
          "138:  revolvedsurface \\",
          "139:  scale \\",
          "143:  sortentstable \\",
          "144:  spatial_filter \\",
          "145:  spatial_index \\",
          "147:  style \\",
          "148:  style_control \\",
          "149:  sun \\",
          "150:  sunstudy \\",
          "151:  surface \\",
          "152:  sweptsurface \\",
          "158:  ucs \\",
          "159:  ucs_control \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:  vertex_mesh \\",
          "107:  vertex_pface \\",
          "108:  vertex_pface_face \\",
          "109:  viewport \\",
          "110:  visualstyle \\",
          "111:  wipeout \\",
          "112:  xline \\",
          "113:  xrecord",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  view \\",
          "168:  view_control \\",
          "169:  vport_entity_control \\",
          "170:  vport_entity_header \\",
          "173:  vport \\",
          "174:  vport_control \\",
          "176:  wipeoutvariables \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:  dxf_test \\",
          "123:  $(testobjects)",
          "132: list:",
          "133:  echo $(testobjects) dynapi_test",
          "",
          "[Removed Lines]",
          "125: #TODO:",
          "126: # extrudedsurface \\",
          "127: # geopositionmarker \\",
          "128: # revolvedsurface \\",
          "129: # surface \\",
          "130: # sweptsurface",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/unit-testing/appid.c||test/unit-testing/appid.c": [
          "File: test/unit-testing/appid.c -> test/unit-testing/appid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_APPID",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "14:   BITCODE_RC unknown;",
          "15:   BITCODE_H null_handle;",
          "17:   dwg_obj_appid *_obj = dwg_object_to_APPID (obj);",
          "19:   CHK_ENTITY_TYPE (_obj, APPID, flag, RC, flag);",
          "20:   CHK_ENTITY_UTF8TEXT (_obj, APPID, name, name);",
          "21:   CHK_ENTITY_TYPE (_obj, APPID, used, RS, used);",
          "22:   CHK_ENTITY_TYPE (_obj, APPID, xrefref, B, xrefref);",
          "23:   CHK_ENTITY_TYPE (_obj, APPID, xrefindex_plus1, BS, xrefindex_plus1);",
          "24:   CHK_ENTITY_TYPE (_obj, APPID, xrefdep, B, xrefdep);",
          "26:   CHK_ENTITY_TYPE (_obj, APPID, unknown, RC, unknown);",
          "27:   CHK_ENTITY_H (_obj, APPID, null_handle, null_handle);",
          "28: }",
          "",
          "---------------"
        ],
        "test/unit-testing/appid_control.c||test/unit-testing/appid_control.c": [
          "File: test/unit-testing/appid_control.c -> test/unit-testing/appid_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_APPID_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_appid_control *ctrl = dwg_object_to_APPID_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, APPID_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"APPID_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"APPID_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"APPID_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"APPID_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25: }",
          "",
          "---------------"
        ],
        "test/unit-testing/block_control.c||test/unit-testing/block_control.c": [
          "File: test/unit-testing/block_control.c -> test/unit-testing/block_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_BLOCK_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "11:   BITCODE_H model_space;",
          "12:   BITCODE_H paper_space;",
          "14:   dwg_obj_block_control *ctrl = dwg_object_to_BLOCK_CONTROL (obj);",
          "16:   CHK_ENTITY_TYPE (ctrl, BLOCK_CONTROL, num_entries, BS, num_entries);",
          "17:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "18:   if (!dwg_dynapi_entity_value (ctrl, \"BLOCK_CONTROL\", \"entries\", &hdls, NULL))",
          "19:     fail (\"BLOCK_CONTROL.entries\");",
          "20:   for (i = 0; i < num_entries; i++)",
          "21:     {",
          "22:       if (hdls[i] == entries[i])",
          "23:         ok (\"BLOCK_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:       else",
          "25:         fail (\"BLOCK_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "26:     }",
          "27:   CHK_ENTITY_TYPE (ctrl, BLOCK_CONTROL, objid, BL, objid);",
          "28:   CHK_ENTITY_H (ctrl, BLOCK_CONTROL, model_space, model_space);",
          "29:   CHK_ENTITY_H (ctrl, BLOCK_CONTROL, model_space, model_space);",
          "30: }",
          "",
          "---------------"
        ],
        "test/unit-testing/block_header.c||test/unit-testing/block_header.c": [
          "File: test/unit-testing/block_header.c -> test/unit-testing/block_header.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_BLOCK_HEADER",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "15:   BITCODE_BL __iterator;",
          "23:   BITCODE_BL num_owned;",
          "24:   BITCODE_3DPOINT base_pt;",
          "25:   BITCODE_TV xref_pname;",
          "26:   BITCODE_RL i, num_inserts;",
          "27:   BITCODE_TV description;",
          "30:   BITCODE_BS insert_units;",
          "31:   BITCODE_B explodable;",
          "32:   BITCODE_RC block_scaling;",
          "33:   BITCODE_H null_handle;",
          "34:   BITCODE_H block_entity;",
          "35:   BITCODE_H first_entity;",
          "36:   BITCODE_H last_entity;",
          "37:   BITCODE_H* entities;",
          "38:   BITCODE_H endblk_entity;",
          "39:   BITCODE_H* inserts;",
          "40:   BITCODE_H layout;",
          "42:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "43:   dwg_obj_block_header *hdr = dwg_object_to_BLOCK_HEADER (obj);",
          "45:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, flag, RC, flag);",
          "46:   CHK_ENTITY_UTF8TEXT (hdr, BLOCK_HEADER, name, name);",
          "47:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, used, RS, used);",
          "48:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, xrefref, B, xrefref);",
          "49:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, xrefindex_plus1, BS, xrefindex_plus1);",
          "50:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, xrefdep, B, xrefdep);",
          "59:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, num_owned, BL, num_owned);",
          "60:   CHK_ENTITY_3RD (hdr, BLOCK_HEADER, base_pt, base_pt);",
          "61:   CHK_ENTITY_UTF8TEXT (hdr, BLOCK_HEADER, xref_pname, xref_pname);",
          "62:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, num_inserts, RL, num_inserts);",
          "63:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, description, TV, description);",
          "64:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, preview_size, BL, preview_size);",
          "65:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, preview, TF, preview);",
          "66:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, insert_units, BS, insert_units);",
          "67:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, explodable, B, explodable);",
          "68:   CHK_ENTITY_TYPE (hdr, BLOCK_HEADER, block_scaling, RC, block_scaling);",
          "69:   CHK_ENTITY_UTF8TEXT (hdr, BLOCK_HEADER, description, description);",
          "70:   CHK_ENTITY_H (hdr, BLOCK_HEADER, null_handle, null_handle);",
          "71:   CHK_ENTITY_H (hdr, BLOCK_HEADER, block_entity, block_entity);",
          "72:   CHK_ENTITY_H (hdr, BLOCK_HEADER, first_entity, first_entity);",
          "73:   CHK_ENTITY_H (hdr, BLOCK_HEADER, last_entity, last_entity);",
          "74:   if (!dwg_dynapi_entity_value (hdr, \"BLOCK_HEADER\", \"entities\", &entities, NULL))",
          "75:     fail (\"BLOCK_HEADER.entities\");",
          "76:   for (i = 0; i < num_owned; i++)",
          "77:     {",
          "78:       ok (\"BLOCK_HEADER.entities[%d]: \" FORMAT_REF, i, ARGS_REF (entities[i]));",
          "79:     }",
          "80:   CHK_ENTITY_H (hdr, BLOCK_HEADER, endblk_entity, endblk_entity);",
          "81:   if (!dwg_dynapi_entity_value (hdr, \"BLOCK_HEADER\", \"inserts\", &inserts, NULL))",
          "82:     fail (\"BLOCK_HEADER.inserts\");",
          "83:   for (i = 0; i < num_inserts; i++)",
          "84:     {",
          "85:       ok (\"BLOCK_HEADER.inserts[%d]: \" FORMAT_REF, i, ARGS_REF (inserts[i]));",
          "86:     }",
          "87:   CHK_ENTITY_H (hdr, BLOCK_HEADER, layout, layout);",
          "88: }",
          "",
          "---------------"
        ],
        "test/unit-testing/common.c||test/unit-testing/common.c": [
          "File: test/unit-testing/common.c -> test/unit-testing/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:               strcat (tmp, \"2018/Leader.dwg\");",
          "168:               error += test_code (tmp, cov);",
          "169:             }",
          "170:           if (DWG_TYPE == DWG_TYPE_HATCH)",
          "171:             {",
          "172:               strcpy (tmp, prefix);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:           if (DWG_TYPE == DWG_TYPE_VIEW)",
          "171:             {",
          "172:               strcpy (tmp, prefix);",
          "173:               strcat (tmp, \"2007/big.dwg\");",
          "174:               error += test_code (tmp, cov);",
          "175:             }",
          "",
          "---------------"
        ],
        "test/unit-testing/dictionary.c||test/unit-testing/dictionary.c": [
          "File: test/unit-testing/dictionary.c -> test/unit-testing/dictionary.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_DICTIONARY",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error;",
          "8:   BITCODE_BL i, numitems;",
          "9:   BITCODE_BS cloning;",
          "10:   BITCODE_RC hard_owner;",
          "11:   BITCODE_TV* texts;",
          "12:   BITCODE_H *itemhandles, *hdls;",
          "13:   BITCODE_RC cloning_r14;",
          "15:   dwg_obj_dictionary *_obj = dwg_object_to_DICTIONARY (obj);",
          "17:   CHK_ENTITY_TYPE (_obj, DICTIONARY, numitems, BL, numitems);",
          "18:   CHK_ENTITY_TYPE (_obj, DICTIONARY, cloning, BS, cloning);",
          "19:   CHK_ENTITY_TYPE (_obj, DICTIONARY, hard_owner, RC, hard_owner);",
          "20:   if (!dwg_dynapi_entity_value (_obj, \"DICTIONARY\", \"texts\", &texts, NULL))",
          "21:     fail (\"DICTIONARY.texts\");",
          "22:   if (!dwg_dynapi_entity_value (_obj, \"DICTIONARY\", \"itemhandles\", &itemhandles, NULL))",
          "23:     fail (\"DICTIONARY.itemhandles\");",
          "24:   hdls = _obj->itemhandles;",
          "25:   for (i = 0; i < numitems; i++)",
          "26:     {",
          "27:       ok (\"DICTIONARY.texts[%d]: %s\", i, texts[i]);",
          "28:       if (hdls[i] == itemhandles[i])",
          "29:         ok (\"DICTIONARY.itemhandles[%d]: \" FORMAT_REF, i, ARGS_REF (itemhandles[i]));",
          "30:       else",
          "31:         fail (\"DICTIONARY.itemhandles[%d]: \" FORMAT_REF, i, ARGS_REF (itemhandles[i]));",
          "32:     }",
          "33:   CHK_ENTITY_TYPE (_obj, DICTIONARY, cloning_r14, RC, cloning_r14);",
          "34: }",
          "",
          "---------------"
        ],
        "test/unit-testing/dictionaryvar.c||test/unit-testing/dictionaryvar.c": [
          "File: test/unit-testing/dictionaryvar.c -> test/unit-testing/dictionaryvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_DICTIONARYVAR",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC intval;",
          "9:   BITCODE_TV str;",
          "11:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "12:   dwg_obj_dictionaryvar *_obj = dwg_object_to_DICTIONARYVAR (obj);",
          "14:   CHK_ENTITY_TYPE (_obj, DICTIONARYVAR, intval, RC, intval);",
          "15:   CHK_ENTITY_UTF8TEXT (_obj, DICTIONARYVAR, str, str);",
          "16: }",
          "",
          "---------------"
        ],
        "test/unit-testing/dictionarywdflt.c||test/unit-testing/dictionarywdflt.c": [
          "File: test/unit-testing/dictionarywdflt.c -> test/unit-testing/dictionarywdflt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_DICTIONARYWDFLT",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BL numitems;",
          "9:   BITCODE_BS cloning;",
          "10:   BITCODE_RC hard_owner;",
          "11:   BITCODE_TV* texts;",
          "12:   BITCODE_H* itemhandles;",
          "13:   BITCODE_RL cloning_r14;",
          "14:   BITCODE_H defaultid;",
          "16:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "17:   dwg_obj_dictionarywdflt *_obj = dwg_object_to_DICTIONARYWDFLT (obj);",
          "19:   CHK_ENTITY_TYPE (_obj, DICTIONARYWDFLT, numitems, BL, numitems);",
          "20: }",
          "",
          "---------------"
        ],
        "test/unit-testing/dimstyle.c||test/unit-testing/dimstyle.c": [
          "File: test/unit-testing/dimstyle.c -> test/unit-testing/dimstyle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_DIMSTYLE",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "15:   BITCODE_B DIMTOL;",
          "16:   BITCODE_B DIMLIM;",
          "17:   BITCODE_B DIMTIH;",
          "18:   BITCODE_B DIMTOH;",
          "19:   BITCODE_B DIMSE1;",
          "20:   BITCODE_B DIMSE2;",
          "21:   BITCODE_B DIMALT;",
          "22:   BITCODE_B DIMTOFL;",
          "23:   BITCODE_B DIMSAH;",
          "24:   BITCODE_B DIMTIX;",
          "25:   BITCODE_B DIMSOXD;",
          "28:   BITCODE_B DIMSD1;",
          "29:   BITCODE_B DIMSD2;",
          "33:   BITCODE_B DIMUPT;",
          "38:   BITCODE_BS DIMUNIT;",
          "39:   BITCODE_BS DIMAUNIT;",
          "40:   BITCODE_BS DIMDEC;",
          "41:   BITCODE_BS DIMTDEC;",
          "42:   BITCODE_BS DIMALTU;",
          "43:   BITCODE_BS DIMALTTD;",
          "45:   BITCODE_BD DIMSCALE;",
          "46:   BITCODE_BD DIMASZ;",
          "47:   BITCODE_BD DIMEXO;",
          "48:   BITCODE_BD DIMDLI;",
          "49:   BITCODE_BD DIMEXE;",
          "50:   BITCODE_BD DIMRND;",
          "51:   BITCODE_BD DIMDLE;",
          "52:   BITCODE_BD DIMTP;",
          "53:   BITCODE_BD DIMTM;",
          "54:   BITCODE_BD DIMFXL;",
          "55:   BITCODE_BD DIMJOGANG;",
          "56:   BITCODE_BS DIMTFILL;",
          "57:   BITCODE_CMC DIMTFILLCLR;",
          "58:   BITCODE_BS DIMAZIN;",
          "59:   BITCODE_BS DIMARCSYM;",
          "60:   BITCODE_BD DIMTXT;",
          "61:   BITCODE_BD DIMCEN;",
          "62:   BITCODE_BD DIMTSZ;",
          "63:   BITCODE_BD DIMALTF;",
          "64:   BITCODE_BD DIMLFAC;",
          "65:   BITCODE_BD DIMTVP;",
          "66:   BITCODE_BD DIMTFAC;",
          "67:   BITCODE_BD DIMGAP;",
          "68:   BITCODE_T DIMPOST;",
          "69:   BITCODE_T DIMAPOST;",
          "70:   BITCODE_T DIMBLK_T;",
          "71:   BITCODE_T DIMBLK1_T;",
          "72:   BITCODE_T DIMBLK2_T;",
          "73:   BITCODE_BD DIMALTRND;",
          "77:   BITCODE_CMC DIMCLRD;",
          "78:   BITCODE_CMC DIMCLRE;",
          "79:   BITCODE_CMC DIMCLRT;",
          "80:   BITCODE_BS DIMADEC;",
          "81:   BITCODE_BS DIMFRAC;",
          "82:   BITCODE_BS DIMLUNIT;",
          "83:   BITCODE_BS DIMDSEP;",
          "84:   BITCODE_BS DIMTMOVE;",
          "85:   BITCODE_BS DIMALTZ;",
          "86:   BITCODE_BS DIMALTTZ;",
          "87:   BITCODE_BS DIMATFIT;",
          "94:   BITCODE_BSd DIMLWD;",
          "95:   BITCODE_BSd DIMLWE;",
          "96:   BITCODE_H extref_handle;",
          "97:   BITCODE_H DIMTXSTY;",
          "98:   BITCODE_H DIMLDRBLK;",
          "99:   BITCODE_H DIMBLK;",
          "100:   BITCODE_H DIMBLK1;",
          "101:   BITCODE_H DIMBLK2;",
          "102:   BITCODE_H DIMLTYPE;",
          "103:   BITCODE_H DIMLTEX1;",
          "104:   BITCODE_H DIMLTEX2;",
          "106:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "107:   dwg_obj_dimstyle *_obj = dwg_object_to_DIMSTYLE (obj);",
          "109:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, flag, RC, flag);",
          "110:   CHK_ENTITY_UTF8TEXT (_obj, DIMSTYLE, name, name);",
          "111:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, used, RS, used);",
          "112:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, xrefref, B, xrefref);",
          "113:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, xrefindex_plus1, BS, xrefindex_plus1);",
          "114:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, xrefdep, B, xrefdep);",
          "116:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTOL, B, DIMTOL);",
          "117:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMLIM, B, DIMLIM);",
          "118:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTIH, B, DIMTIH);",
          "119:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTOH, B, DIMTOH);",
          "120:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSE1, B, DIMSE1);",
          "121:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSE2, B, DIMSE2);",
          "122:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALT, B, DIMALT);",
          "123:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTOFL, B, DIMTOFL);",
          "124:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSAH, B, DIMSAH);",
          "125:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTIX, B, DIMTIX);",
          "126:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSOXD, B, DIMSOXD);",
          "129:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSD1, B, DIMSD1);",
          "130:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSD2, B, DIMSD2);",
          "134:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMUPT, B, DIMUPT);",
          "139:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMUNIT, BS, DIMUNIT);",
          "140:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMAUNIT, BS, DIMAUNIT);",
          "141:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMDEC, BS, DIMDEC);",
          "142:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTDEC, BS, DIMTDEC);",
          "143:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALTU, BS, DIMALTU);",
          "144:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALTTD, BS, DIMALTTD);",
          "146:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMSCALE, BD, DIMSCALE);",
          "147:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMASZ, BD, DIMASZ);",
          "148:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMEXO, BD, DIMEXO);",
          "149:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMDLI, BD, DIMDLI);",
          "150:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMEXE, BD, DIMEXE);",
          "151:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMRND, BD, DIMRND);",
          "152:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMDLE, BD, DIMDLE);",
          "153:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTP, BD, DIMTP);",
          "154:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTM, BD, DIMTM);",
          "155:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMFXL, BD, DIMFXL);",
          "156:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMJOGANG, BD, DIMJOGANG);",
          "157:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTFILL, BS, DIMTFILL);",
          "158:   CHK_ENTITY_CMC (_obj, DIMSTYLE, DIMTFILLCLR, DIMTFILLCLR);",
          "159:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMAZIN, BS, DIMAZIN);",
          "160:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMARCSYM, BS, DIMARCSYM);",
          "161:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTXT, BD, DIMTXT);",
          "162:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMCEN, BD, DIMCEN);",
          "163:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTSZ, BD, DIMTSZ);",
          "164:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALTF, BD, DIMALTF);",
          "165:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMLFAC, BD, DIMLFAC);",
          "166:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTVP, BD, DIMTVP);",
          "167:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTFAC, BD, DIMTFAC);",
          "168:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMGAP, BD, DIMGAP);",
          "169:   CHK_ENTITY_UTF8TEXT (_obj, DIMSTYLE, DIMPOST, DIMPOST);",
          "170:   CHK_ENTITY_UTF8TEXT (_obj, DIMSTYLE, DIMAPOST, DIMAPOST);",
          "171:   CHK_ENTITY_UTF8TEXT (_obj, DIMSTYLE, DIMBLK_T, DIMBLK_T);",
          "172:   CHK_ENTITY_UTF8TEXT (_obj, DIMSTYLE, DIMBLK1_T, DIMBLK1_T);",
          "173:   CHK_ENTITY_UTF8TEXT (_obj, DIMSTYLE, DIMBLK2_T, DIMBLK2_T);",
          "174:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALTRND, BD, DIMALTRND);",
          "178:   CHK_ENTITY_CMC (_obj, DIMSTYLE, DIMCLRD, DIMCLRD);",
          "179:   CHK_ENTITY_CMC (_obj, DIMSTYLE, DIMCLRE, DIMCLRE);",
          "180:   CHK_ENTITY_CMC (_obj, DIMSTYLE, DIMCLRT, DIMCLRT);",
          "181:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMADEC, BS, DIMADEC);",
          "182:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMFRAC, BS, DIMFRAC);",
          "183:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMLUNIT, BS, DIMLUNIT);",
          "184:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMDSEP, BS, DIMDSEP);",
          "185:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMTMOVE, BS, DIMTMOVE);",
          "186:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALTZ, BS, DIMALTZ);",
          "187:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMALTTZ, BS, DIMALTTZ);",
          "188:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMATFIT, BS, DIMATFIT);",
          "195:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMLWD, BSd, DIMLWD);",
          "196:   CHK_ENTITY_TYPE (_obj, DIMSTYLE, DIMLWE, BSd, DIMLWE);",
          "197:   CHK_ENTITY_H (_obj, DIMSTYLE, extref_handle, extref_handle);",
          "198:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMTXSTY, DIMTXSTY);",
          "199:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMLDRBLK, DIMLDRBLK);",
          "200:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMBLK, DIMBLK);",
          "201:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMBLK1, DIMBLK1);",
          "202:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMBLK2, DIMBLK2);",
          "203:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMLTYPE, DIMLTYPE);",
          "204:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMLTEX1, DIMLTEX1);",
          "205:   CHK_ENTITY_H (_obj, DIMSTYLE, DIMLTEX2, DIMLTEX2);",
          "206: }",
          "",
          "---------------"
        ],
        "test/unit-testing/dimstyle_control.c||test/unit-testing/dimstyle_control.c": [
          "File: test/unit-testing/dimstyle_control.c -> test/unit-testing/dimstyle_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_DIMSTYLE_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "11:   BITCODE_RC num_morehandles;",
          "12:   BITCODE_H* morehandles;",
          "14:   dwg_obj_dimstyle_control *ctrl = dwg_object_to_DIMSTYLE_CONTROL (obj);",
          "16:   CHK_ENTITY_TYPE (ctrl, DIMSTYLE_CONTROL, num_entries, BS, num_entries);",
          "17:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "18:   if (!dwg_dynapi_entity_value (ctrl, \"DIMSTYLE_CONTROL\", \"entries\", &hdls, NULL))",
          "19:     fail (\"DIMSTYLE_CONTROL.entries\");",
          "20:   for (i = 0; i < num_entries; i++)",
          "21:     {",
          "22:       if (hdls[i] == entries[i])",
          "23:         ok (\"DIMSTYLE_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:       else",
          "25:         fail (\"DIMSTYLE_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "26:     }",
          "27:   CHK_ENTITY_TYPE (ctrl, DIMSTYLE_CONTROL, num_morehandles, RC, num_morehandles);",
          "28:   if (!dwg_dynapi_entity_value (ctrl, \"DIMSTYLE_CONTROL\", \"morehandles\", &morehandles, NULL))",
          "29:     fail (\"DIMSTYLE_CONTROL.morehandles\");",
          "30:   for (i = 0; i < num_morehandles; i++)",
          "31:     {",
          "32:       ok (\"DIMSTYLE_CONTROL.morehandles[%d]: \" FORMAT_REF, i, ARGS_REF (morehandles[i]));",
          "33:     }",
          "34: }",
          "",
          "---------------"
        ],
        "test/unit-testing/dynamicblockpurgepreventer.c||test/unit-testing/dynamicblockpurgepreventer.c": [
          "File: test/unit-testing/dynamicblockpurgepreventer.c -> test/unit-testing/dynamicblockpurgepreventer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_DYNAMICBLOCKPURGEPREVENTER",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error;",
          "8:   BITCODE_BS flag;",
          "9:   BITCODE_H  block;",
          "11:   dwg_obj_dynamicblockpurgepreventer *_obj = dwg_object_to_DYNAMICBLOCKPURGEPREVENTER (obj);",
          "13:   CHK_ENTITY_TYPE (_obj, DYNAMICBLOCKPURGEPREVENTER, flag, BS, flag);",
          "14:   CHK_ENTITY_H (_obj, DYNAMICBLOCKPURGEPREVENTER, block, block);",
          "15: }",
          "",
          "---------------"
        ],
        "test/unit-testing/layer_control.c||test/unit-testing/layer_control.c": [
          "File: test/unit-testing/layer_control.c -> test/unit-testing/layer_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_LAYER_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_layer_control *ctrl = dwg_object_to_LAYER_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, LAYER_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"LAYER_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"LAYER_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"LAYER_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"LAYER_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25:   CHK_ENTITY_TYPE (ctrl, LAYER_CONTROL, objid, BL, objid);",
          "26: }",
          "",
          "---------------"
        ],
        "test/unit-testing/ltype.c||test/unit-testing/ltype.c": [
          "File: test/unit-testing/ltype.c -> test/unit-testing/ltype.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_LTYPE",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "15:   BITCODE_TV description;",
          "16:   BITCODE_BD pattern_len;",
          "17:   BITCODE_RC alignment;",
          "18:   BITCODE_RC num_dashes;",
          "19:   Dwg_LTYPE_dash* dashes;",
          "20:   BITCODE_RD* dashes_r11;",
          "22:   BITCODE_TF strings_area;",
          "23:   BITCODE_H extref_handle;",
          "25:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "26:   dwg_obj_ltype *ltype = dwg_object_to_LTYPE (obj);",
          "28:   CHK_ENTITY_TYPE (ltype, LTYPE, flag, RC, flag);",
          "29:   CHK_ENTITY_UTF8TEXT (ltype, LTYPE, name, name);",
          "30:   CHK_ENTITY_TYPE (ltype, LTYPE, used, RS, used);",
          "31:   CHK_ENTITY_TYPE (ltype, LTYPE, xrefref, B, xrefref);",
          "32:   CHK_ENTITY_TYPE (ltype, LTYPE, xrefindex_plus1, BS, xrefindex_plus1);",
          "33:   CHK_ENTITY_TYPE (ltype, LTYPE, xrefdep, B, xrefdep);",
          "35:   CHK_ENTITY_UTF8TEXT (ltype, LTYPE, description, description);",
          "36:   CHK_ENTITY_TYPE (ltype, LTYPE, pattern_len, BD, pattern_len);",
          "37:   CHK_ENTITY_TYPE (ltype, LTYPE, alignment, RC, alignment);",
          "38:   CHK_ENTITY_TYPE (ltype, LTYPE, num_dashes, RC, num_dashes);",
          "41:   CHK_ENTITY_TYPE (ltype, LTYPE, has_strings_area, B, has_strings_area);",
          "43:   CHK_ENTITY_H (ltype, LTYPE, extref_handle, extref_handle);",
          "44: }",
          "",
          "---------------"
        ],
        "test/unit-testing/ltype_control.c||test/unit-testing/ltype_control.c": [
          "File: test/unit-testing/ltype_control.c -> test/unit-testing/ltype_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_LTYPE_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "11:   BITCODE_H bylayer;",
          "12:   BITCODE_H byblock;",
          "14:   dwg_obj_ltype_control *ctrl = dwg_object_to_LTYPE_CONTROL (obj);",
          "16:   CHK_ENTITY_TYPE (ctrl, LTYPE_CONTROL, num_entries, BS, num_entries);",
          "17:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "18:   if (!dwg_dynapi_entity_value (ctrl, \"LTYPE_CONTROL\", \"entries\", &hdls, NULL))",
          "19:     fail (\"LTYPE_CONTROL.entries\");",
          "20:   for (i = 0; i < num_entries; i++)",
          "21:     {",
          "22:       if (hdls[i] == entries[i])",
          "23:         ok (\"LTYPE_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:       else",
          "25:         fail (\"LTYPE_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "26:     }",
          "27:   CHK_ENTITY_TYPE (ctrl, LTYPE_CONTROL, objid, BL, objid);",
          "28:   CHK_ENTITY_H (ctrl, LTYPE_CONTROL, bylayer, bylayer);",
          "29:   CHK_ENTITY_H (ctrl, LTYPE_CONTROL, byblock, byblock);",
          "30: }",
          "",
          "---------------"
        ],
        "test/unit-testing/style.c||test/unit-testing/style.c": [
          "File: test/unit-testing/style.c -> test/unit-testing/style.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_STYLE",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "14:   BITCODE_B vertical;",
          "15:   BITCODE_B shape_file;",
          "16:   BITCODE_BD fixed_height;",
          "17:   BITCODE_BD width_factor;",
          "18:   BITCODE_BD oblique_ang;",
          "19:   BITCODE_RC generation;",
          "20:   BITCODE_BD last_height;",
          "21:   BITCODE_TV font_name;",
          "22:   BITCODE_TV bigfont_name;",
          "23:   BITCODE_H extref;",
          "25:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "26:   dwg_obj_style *_obj = dwg_object_to_STYLE (obj);",
          "28:   CHK_ENTITY_TYPE (_obj, STYLE, flag, RC, flag);",
          "29:   CHK_ENTITY_UTF8TEXT (_obj, STYLE, name, name);",
          "30:   CHK_ENTITY_TYPE (_obj, STYLE, used, RS, used);",
          "31:   CHK_ENTITY_TYPE (_obj, STYLE, xrefref, B, xrefref);",
          "32:   CHK_ENTITY_TYPE (_obj, STYLE, xrefindex_plus1, BS, xrefindex_plus1);",
          "33:   CHK_ENTITY_TYPE (_obj, STYLE, xrefdep, B, xrefdep);",
          "34:   CHK_ENTITY_TYPE (_obj, STYLE, vertical, B, vertical);",
          "35:   CHK_ENTITY_TYPE (_obj, STYLE, shape_file, B, shape_file);",
          "36:   CHK_ENTITY_TYPE (_obj, STYLE, fixed_height, BD, fixed_height);",
          "37:   CHK_ENTITY_TYPE (_obj, STYLE, width_factor, BD, width_factor);",
          "38:   CHK_ENTITY_TYPE (_obj, STYLE, oblique_ang, BD, oblique_ang);",
          "39:   CHK_ENTITY_TYPE (_obj, STYLE, generation, RC, generation);",
          "40:   CHK_ENTITY_TYPE (_obj, STYLE, last_height, BD, last_height);",
          "41:   CHK_ENTITY_UTF8TEXT (_obj, STYLE, font_name, font_name);",
          "42:   CHK_ENTITY_UTF8TEXT (_obj, STYLE, bigfont_name, bigfont_name);",
          "43:   CHK_ENTITY_H (_obj, STYLE, extref, extref);",
          "44: }",
          "",
          "---------------"
        ],
        "test/unit-testing/style_control.c||test/unit-testing/style_control.c": [
          "File: test/unit-testing/style_control.c -> test/unit-testing/style_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_STYLE_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_style_control *ctrl = dwg_object_to_STYLE_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, STYLE_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"STYLE_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"STYLE_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"STYLE_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"STYLE_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25: }",
          "",
          "---------------"
        ],
        "test/unit-testing/ucs.c||test/unit-testing/ucs.c": [
          "File: test/unit-testing/ucs.c -> test/unit-testing/ucs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_UCS",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "14:   BITCODE_3BD origin;",
          "15:   BITCODE_3BD x_direction;",
          "16:   BITCODE_3BD y_direction;",
          "17:   BITCODE_BD elevation;",
          "18:   BITCODE_BS orthographic_view_type;",
          "19:   BITCODE_BS orthographic_type;",
          "20:   BITCODE_H null_handle;",
          "24:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "25:   dwg_obj_ucs *_obj = dwg_object_to_UCS (obj);",
          "27:   CHK_ENTITY_TYPE (_obj, UCS, flag, RC, flag);",
          "28:   CHK_ENTITY_UTF8TEXT (_obj, UCS, name, name);",
          "29:   CHK_ENTITY_TYPE (_obj, UCS, used, RS, used);",
          "30:   CHK_ENTITY_TYPE (_obj, UCS, xrefref, B, xrefref);",
          "31:   CHK_ENTITY_TYPE (_obj, UCS, xrefindex_plus1, BS, xrefindex_plus1);",
          "32:   CHK_ENTITY_TYPE (_obj, UCS, xrefdep, B, xrefdep);",
          "34:   CHK_ENTITY_3RD (_obj, UCS, origin, origin);",
          "35:   CHK_ENTITY_3RD (_obj, UCS, x_direction, x_direction);",
          "36:   CHK_ENTITY_3RD (_obj, UCS, y_direction, y_direction);",
          "37:   CHK_ENTITY_TYPE (_obj, UCS, elevation, BD, elevation);",
          "38:   CHK_ENTITY_TYPE (_obj, UCS, orthographic_view_type, BS, orthographic_view_type);",
          "39:   CHK_ENTITY_TYPE (_obj, UCS, orthographic_type, BS, orthographic_type);",
          "40:   CHK_ENTITY_H (_obj, UCS, null_handle, null_handle);",
          "41:   CHK_ENTITY_H (_obj, UCS, base_ucs, base_ucs);",
          "42:   CHK_ENTITY_H (_obj, UCS, named_ucs, named_ucs);",
          "43: }",
          "",
          "---------------"
        ],
        "test/unit-testing/ucs_control.c||test/unit-testing/ucs_control.c": [
          "File: test/unit-testing/ucs_control.c -> test/unit-testing/ucs_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_UCS_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_ucs_control *ctrl = dwg_object_to_UCS_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, UCS_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"UCS_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"UCS_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"UCS_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"UCS_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25: }",
          "",
          "---------------"
        ],
        "test/unit-testing/view.c||test/unit-testing/view.c": [
          "File: test/unit-testing/view.c -> test/unit-testing/view.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_VIEW",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "14:   BITCODE_BD height;",
          "15:   BITCODE_BD width;",
          "16:   BITCODE_2RD center;",
          "17:   BITCODE_3BD target;",
          "18:   BITCODE_3BD direction;",
          "19:   BITCODE_BD twist_angle;",
          "20:   BITCODE_BD lens_length;",
          "21:   BITCODE_BD front_clip;",
          "22:   BITCODE_BD back_clip;",
          "23:   BITCODE_4BITS VIEWMODE;",
          "24:   BITCODE_RC render_mode;",
          "25:   BITCODE_B use_default_lights;",
          "26:   BITCODE_RC default_lightning_type;",
          "27:   BITCODE_BD brightness;",
          "28:   BITCODE_BD contrast;",
          "29:   BITCODE_CMC ambient_color;",
          "30:   BITCODE_B pspace_flag;",
          "31:   BITCODE_B associated_ucs;",
          "32:   BITCODE_3BD origin;",
          "33:   BITCODE_3BD x_direction;",
          "34:   BITCODE_3BD y_direction;",
          "35:   BITCODE_BD elevation;",
          "36:   BITCODE_BS orthographic_view_type;",
          "37:   BITCODE_B camera_plottable;",
          "38:   BITCODE_H null_handle;",
          "39:   BITCODE_H background;",
          "40:   BITCODE_H visualstyle;",
          "41:   BITCODE_H sun;",
          "42:   BITCODE_H base_ucs;",
          "43:   BITCODE_H named_ucs;",
          "44:   BITCODE_H livesection;",
          "46:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "47:   dwg_obj_view *_obj = dwg_object_to_VIEW (obj);",
          "49:   CHK_ENTITY_TYPE (_obj, VIEW, flag, RC, flag);",
          "50:   CHK_ENTITY_UTF8TEXT (_obj, VIEW, name, name);",
          "51:   CHK_ENTITY_TYPE (_obj, VIEW, used, RS, used);",
          "52:   CHK_ENTITY_TYPE (_obj, VIEW, xrefref, B, xrefref);",
          "53:   CHK_ENTITY_TYPE (_obj, VIEW, xrefindex_plus1, BS, xrefindex_plus1);",
          "54:   CHK_ENTITY_TYPE (_obj, VIEW, xrefdep, B, xrefdep);",
          "56:   CHK_ENTITY_TYPE (_obj, VIEW, height, BD, height);",
          "57:   CHK_ENTITY_TYPE (_obj, VIEW, width, BD, width);",
          "58:   CHK_ENTITY_2RD (_obj, VIEW, center, center);",
          "59:   CHK_ENTITY_3RD (_obj, VIEW, target, target);",
          "60:   CHK_ENTITY_3RD (_obj, VIEW, direction, direction);",
          "61:   CHK_ENTITY_TYPE (_obj, VIEW, twist_angle, BD, twist_angle);",
          "62:   CHK_ENTITY_TYPE (_obj, VIEW, lens_length, BD, lens_length);",
          "63:   CHK_ENTITY_TYPE (_obj, VIEW, front_clip, BD, front_clip);",
          "64:   CHK_ENTITY_TYPE (_obj, VIEW, back_clip, BD, back_clip);",
          "65:   CHK_ENTITY_TYPE (_obj, VIEW, VIEWMODE, 4BITS, VIEWMODE);",
          "66:   CHK_ENTITY_TYPE (_obj, VIEW, render_mode, RC, render_mode);",
          "67:   CHK_ENTITY_TYPE (_obj, VIEW, use_default_lights, B, use_default_lights);",
          "68:   CHK_ENTITY_TYPE (_obj, VIEW, default_lightning_type, RC, default_lightning_type);",
          "69:   CHK_ENTITY_TYPE (_obj, VIEW, brightness, BD, brightness);",
          "70:   CHK_ENTITY_TYPE (_obj, VIEW, contrast, BD, contrast);",
          "71:   CHK_ENTITY_CMC (_obj, VIEW, ambient_color, ambient_color);",
          "72:   CHK_ENTITY_TYPE (_obj, VIEW, pspace_flag, B, pspace_flag);",
          "73:   CHK_ENTITY_TYPE (_obj, VIEW, associated_ucs, B, associated_ucs);",
          "74:   CHK_ENTITY_3RD (_obj, VIEW, origin, origin);",
          "75:   CHK_ENTITY_3RD (_obj, VIEW, x_direction, x_direction);",
          "76:   CHK_ENTITY_3RD (_obj, VIEW, y_direction, y_direction);",
          "77:   CHK_ENTITY_TYPE (_obj, VIEW, elevation, BD, elevation);",
          "78:   CHK_ENTITY_TYPE (_obj, VIEW, orthographic_view_type, BS, orthographic_view_type);",
          "79:   CHK_ENTITY_TYPE (_obj, VIEW, camera_plottable, B, camera_plottable);",
          "80:   CHK_ENTITY_H (_obj, VIEW, null_handle, null_handle);",
          "81:   CHK_ENTITY_H (_obj, VIEW, background, background);",
          "82:   CHK_ENTITY_H (_obj, VIEW, visualstyle, visualstyle);",
          "83:   CHK_ENTITY_H (_obj, VIEW, sun, sun);",
          "84:   CHK_ENTITY_H (_obj, VIEW, base_ucs, base_ucs);",
          "85:   CHK_ENTITY_H (_obj, VIEW, named_ucs, named_ucs);",
          "86:   CHK_ENTITY_H (_obj, VIEW, livesection, livesection);",
          "87: }",
          "",
          "---------------"
        ],
        "test/unit-testing/view_control.c||test/unit-testing/view_control.c": [
          "File: test/unit-testing/view_control.c -> test/unit-testing/view_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_VIEW_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_view_control *ctrl = dwg_object_to_VIEW_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, VIEW_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"VIEW_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"VIEW_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"VIEW_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"VIEW_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25: }",
          "",
          "---------------"
        ],
        "test/unit-testing/vport.c||test/unit-testing/vport.c": [
          "File: test/unit-testing/vport.c -> test/unit-testing/vport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_VPORT",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_RC flag;",
          "9:   BITCODE_TV name;",
          "10:   BITCODE_RS used;",
          "11:   BITCODE_B xrefref;",
          "12:   BITCODE_BS xrefindex_plus1;",
          "13:   BITCODE_B xrefdep;",
          "14:   BITCODE_BD VIEWSIZE;  // really the view height",
          "15:   BITCODE_BD viewwidth; // in DWG r13+, needed to calc. aspect_ratio",
          "16:   BITCODE_BD aspect_ratio; // DXF 41 = viewwidth / VIEWSIZE",
          "17:   BITCODE_2RD VIEWCTR;",
          "18:   BITCODE_3BD view_target;",
          "19:   BITCODE_3BD VIEWDIR;",
          "20:   BITCODE_BD view_twist;",
          "21:   BITCODE_BD lens_length;",
          "22:   BITCODE_BD front_clip;",
          "23:   BITCODE_BD back_clip;",
          "24:   BITCODE_4BITS VIEWMODE;",
          "25:   BITCODE_RC render_mode;",
          "26:   BITCODE_B use_default_lights;",
          "27:   BITCODE_RC default_lightning_type;",
          "28:   BITCODE_BD brightness;",
          "29:   BITCODE_BD contrast;",
          "30:   BITCODE_CMC ambient_color;",
          "31:   BITCODE_2RD lower_left;",
          "32:   BITCODE_2RD upper_right;",
          "33:   BITCODE_B UCSFOLLOW;",
          "35:   BITCODE_B FASTZOOM;",
          "36:   BITCODE_RC UCSICON;",
          "37:   BITCODE_B GRIDMODE;",
          "38:   BITCODE_2RD GRIDUNIT;",
          "39:   BITCODE_B SNAPMODE;",
          "40:   BITCODE_B SNAPSTYLE;",
          "41:   BITCODE_BS SNAPISOPAIR;",
          "42:   BITCODE_BD SNAPANG;",
          "43:   BITCODE_2RD SNAPBASE;",
          "44:   BITCODE_2RD SNAPUNIT;",
          "45:   BITCODE_B unknown;",
          "46:   BITCODE_B UCSVP;",
          "47:   BITCODE_3BD ucs_origin;",
          "48:   BITCODE_3BD ucs_x_axis;",
          "49:   BITCODE_3BD ucs_y_axis;",
          "50:   BITCODE_BD ucs_elevation;",
          "51:   BITCODE_BS ucs_orthografic_type;",
          "52:   BITCODE_BS grid_flags;",
          "53:   BITCODE_BS grid_major;",
          "54:   BITCODE_H null_handle;",
          "55:   BITCODE_H background;",
          "56:   BITCODE_H visualstyle;",
          "57:   BITCODE_H sun;",
          "58:   BITCODE_H named_ucs;",
          "59:   BITCODE_H base_ucs;",
          "61:   Dwg_Version_Type dwg_version = obj->parent->header.version;",
          "62:   dwg_obj_vport *_obj = dwg_object_to_VPORT (obj);",
          "64:   CHK_ENTITY_TYPE (_obj, VPORT, flag, RC, flag);",
          "65:   CHK_ENTITY_UTF8TEXT (_obj, VPORT, name, name);",
          "66:   CHK_ENTITY_TYPE (_obj, VPORT, used, RS, used);",
          "67:   CHK_ENTITY_TYPE (_obj, VPORT, xrefref, B, xrefref);",
          "68:   CHK_ENTITY_TYPE (_obj, VPORT, xrefindex_plus1, BS, xrefindex_plus1);",
          "69:   CHK_ENTITY_TYPE (_obj, VPORT, xrefdep, B, xrefdep);",
          "71:   CHK_ENTITY_TYPE (_obj, VPORT, VIEWSIZE, BD, VIEWSIZE);  // really the view height",
          "72:   CHK_ENTITY_TYPE (_obj, VPORT, viewwidth, BD, viewwidth); // in DWG r13+, needed to calc. aspect_ratio",
          "73:   CHK_ENTITY_TYPE (_obj, VPORT, aspect_ratio, BD, aspect_ratio); // DXF 41 = viewwidth / VIEWSIZE",
          "74:   CHK_ENTITY_2RD (_obj, VPORT, VIEWCTR, VIEWCTR);",
          "75:   CHK_ENTITY_3RD (_obj, VPORT, view_target, view_target);",
          "76:   CHK_ENTITY_3RD (_obj, VPORT, VIEWDIR, VIEWDIR);",
          "77:   CHK_ENTITY_TYPE (_obj, VPORT, view_twist, BD, view_twist);",
          "78:   CHK_ENTITY_TYPE (_obj, VPORT, lens_length, BD, lens_length);",
          "79:   CHK_ENTITY_TYPE (_obj, VPORT, front_clip, BD, front_clip);",
          "80:   CHK_ENTITY_TYPE (_obj, VPORT, back_clip, BD, back_clip);",
          "81:   CHK_ENTITY_TYPE (_obj, VPORT, VIEWMODE, 4BITS, VIEWMODE);",
          "82:   CHK_ENTITY_TYPE (_obj, VPORT, render_mode, RC, render_mode);",
          "83:   CHK_ENTITY_TYPE (_obj, VPORT, use_default_lights, B, use_default_lights);",
          "84:   CHK_ENTITY_TYPE (_obj, VPORT, default_lightning_type, RC, default_lightning_type);",
          "85:   CHK_ENTITY_TYPE (_obj, VPORT, brightness, BD, brightness);",
          "86:   CHK_ENTITY_TYPE (_obj, VPORT, contrast, BD, contrast);",
          "87:   CHK_ENTITY_CMC (_obj, VPORT, ambient_color, ambient_color);",
          "88:   CHK_ENTITY_2RD (_obj, VPORT, lower_left, lower_left);",
          "89:   CHK_ENTITY_2RD (_obj, VPORT, upper_right, upper_right);",
          "90:   CHK_ENTITY_TYPE (_obj, VPORT, UCSFOLLOW, B, UCSFOLLOW);",
          "92:   CHK_ENTITY_TYPE (_obj, VPORT, FASTZOOM, B, FASTZOOM);",
          "93:   CHK_ENTITY_TYPE (_obj, VPORT, UCSICON, RC, UCSICON);",
          "94:   CHK_ENTITY_TYPE (_obj, VPORT, GRIDMODE, B, GRIDMODE);",
          "95:   CHK_ENTITY_2RD (_obj, VPORT, GRIDUNIT, GRIDUNIT);",
          "96:   CHK_ENTITY_TYPE (_obj, VPORT, SNAPMODE, B, SNAPMODE);",
          "97:   CHK_ENTITY_TYPE (_obj, VPORT, SNAPSTYLE, B, SNAPSTYLE);",
          "98:   CHK_ENTITY_TYPE (_obj, VPORT, SNAPISOPAIR, BS, SNAPISOPAIR);",
          "99:   CHK_ENTITY_TYPE (_obj, VPORT, SNAPANG, BD, SNAPANG);",
          "100:   CHK_ENTITY_2RD (_obj, VPORT, SNAPBASE, SNAPBASE);",
          "101:   CHK_ENTITY_2RD (_obj, VPORT, SNAPUNIT, SNAPUNIT);",
          "102:   CHK_ENTITY_TYPE (_obj, VPORT, unknown, B, unknown);",
          "103:   CHK_ENTITY_TYPE (_obj, VPORT, UCSVP, B, UCSVP);",
          "104:   CHK_ENTITY_3RD (_obj, VPORT, ucs_origin, ucs_origin);",
          "105:   CHK_ENTITY_3RD (_obj, VPORT, ucs_x_axis, ucs_x_axis);",
          "106:   CHK_ENTITY_3RD (_obj, VPORT, ucs_y_axis, ucs_y_axis);",
          "107:   CHK_ENTITY_TYPE (_obj, VPORT, ucs_elevation, BD, ucs_elevation);",
          "108:   CHK_ENTITY_TYPE (_obj, VPORT, ucs_orthografic_type, BS, ucs_orthografic_type);",
          "109:   CHK_ENTITY_TYPE (_obj, VPORT, grid_flags, BS, grid_flags);",
          "110:   CHK_ENTITY_TYPE (_obj, VPORT, grid_major, BS, grid_major);",
          "111:   CHK_ENTITY_H (_obj, VPORT, null_handle, null_handle);",
          "112:   CHK_ENTITY_H (_obj, VPORT, background, background);",
          "113:   CHK_ENTITY_H (_obj, VPORT, visualstyle, visualstyle);",
          "114:   CHK_ENTITY_H (_obj, VPORT, sun, sun);",
          "115:   CHK_ENTITY_H (_obj, VPORT, named_ucs, named_ucs);",
          "116:   CHK_ENTITY_H (_obj, VPORT, base_ucs, base_ucs);",
          "117: }",
          "",
          "---------------"
        ],
        "test/unit-testing/vport_control.c||test/unit-testing/vport_control.c": [
          "File: test/unit-testing/vport_control.c -> test/unit-testing/vport_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_VPORT_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_vport_control *ctrl = dwg_object_to_VPORT_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, VPORT_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"VPORT_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"VPORT_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"VPORT_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"VPORT_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25: }",
          "",
          "---------------"
        ],
        "test/unit-testing/vport_entity_control.c||test/unit-testing/vport_entity_control.c": [
          "File: test/unit-testing/vport_entity_control.c -> test/unit-testing/vport_entity_control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_VPORT_ENTITY_CONTROL",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error, isnew;",
          "8:   BITCODE_BS i, num_entries;",
          "9:   BITCODE_H *entries, *hdls;",
          "10:   BITCODE_BL objid;",
          "12:   dwg_obj_vport_entity_control *ctrl = dwg_object_to_VPORT_ENTITY_CONTROL (obj);",
          "14:   CHK_ENTITY_TYPE (ctrl, VPORT_ENTITY_CONTROL, num_entries, BS, num_entries);",
          "15:   entries = dwg_object_tablectrl_get_entries (obj, &error);",
          "16:   if (!dwg_dynapi_entity_value (ctrl, \"VPORT_ENTITY_CONTROL\", \"entries\", &hdls, NULL))",
          "17:     fail (\"VPORT_ENTITY_CONTROL.entries\");",
          "18:   for (i = 0; i < num_entries; i++)",
          "19:     {",
          "20:       if (hdls[i] == entries[i])",
          "21:         ok (\"VPORT_ENTITY_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "22:       else",
          "23:         fail (\"VPORT_ENTITY_CONTROL.entries[%d]: \" FORMAT_REF, i, ARGS_REF (entries[i]));",
          "24:     }",
          "25: }",
          "",
          "---------------"
        ],
        "test/unit-testing/wipeoutvariables.c||test/unit-testing/wipeoutvariables.c": [
          "File: test/unit-testing/wipeoutvariables.c -> test/unit-testing/wipeoutvariables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #define DWG_TYPE DWG_TYPE_WIPEOUTVARIABLES",
          "2: #include \"common.c\"",
          "4: void",
          "5: api_process (dwg_object *obj)",
          "6: {",
          "7:   int error;",
          "8:   BITCODE_BS display_frame;",
          "10:   dwg_obj_dictionarywdflt *_obj = dwg_object_to_WIPEOUTVARIABLES (obj);",
          "12:   CHK_ENTITY_TYPE (_obj, WIPEOUTVARIABLES, display_frame, BS, display_frame);",
          "13: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}