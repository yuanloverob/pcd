{
  "cve_id": "CVE-2024-4030",
  "cve_desc": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you\u2019re not using Windows or haven\u2019t changed the temporary directory location then you aren\u2019t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix \u201c700\u201d for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.",
  "repo": "python/cpython",
  "patch_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
  "patch_info": {
    "commit_hash": "e1dfa978b1ad210d551385ad8073ec6154f53763",
    "repo": "python/cpython",
    "commit_url": "https://github.com/python/cpython/commit/e1dfa978b1ad210d551385ad8073ec6154f53763",
    "files": [
      "Lib/test/test_os.py",
      "Modules/posixmodule.c"
    ],
    "message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)\n\n(cherry picked from commit 94591dca510c796c7d40e9b4167ea56f2fdf28ca)\n\nCo-authored-by: Steve Dower <steve.dower@python.org>",
    "before_after_code_files": [
      "Lib/test/test_os.py||Lib/test/test_os.py",
      "Modules/posixmodule.c||Modules/posixmodule.c"
    ]
  },
  "patch_diff": {
    "Lib/test/test_os.py||Lib/test/test_os.py": [
      "File: Lib/test/test_os.py -> Lib/test/test_os.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1814:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
      "1815:     def test_win32_mkdir_700(self):",
      "1816:         base = os_helper.TESTFN",
      "1833:     def tearDown(self):",
      "1834:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
      "",
      "[Removed Lines]",
      "1817:         path1 = os.path.join(os_helper.TESTFN, 'dir1')",
      "1818:         path2 = os.path.join(os_helper.TESTFN, 'dir2')",
      "1819:         # mode=0o700 is special-cased to override ACLs on Windows",
      "1820:         # There's no way to know exactly how the ACLs will look, so we'll",
      "1821:         # check that they are different from a regularly created directory.",
      "1822:         os.mkdir(path1, mode=0o700)",
      "1823:         os.mkdir(path2, mode=0o777)",
      "1825:         out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
      "1826:         out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
      "1827:         os.rmdir(path1)",
      "1828:         os.rmdir(path2)",
      "1829:         out1 = out1.replace(path1, \"<PATH>\")",
      "1830:         out2 = out2.replace(path2, \"<PATH>\")",
      "1831:         self.assertNotEqual(out1, out2)",
      "",
      "[Added Lines]",
      "1817:         path = os.path.abspath(os.path.join(os_helper.TESTFN, 'dir'))",
      "1818:         os.mkdir(path, mode=0o700)",
      "1819:         out = subprocess.check_output([\"cacls.exe\", path, \"/s\"], encoding=\"oem\")",
      "1820:         os.rmdir(path)",
      "1821:         self.assertEqual(",
      "1822:             out.strip(),",
      "1823:             f'{path} \"D:P(A;OICI;FA;;;SY)(A;OICI;FA;;;BA)(A;OICI;FA;;;OW)\"',",
      "1824:         )",
      "",
      "---------------"
    ],
    "Modules/posixmodule.c||Modules/posixmodule.c": [
      "File: Modules/posixmodule.c -> Modules/posixmodule.c"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3be7e91d037059dd98c175f48620191b538b9731",
      "candidate_info": {
        "commit_hash": "3be7e91d037059dd98c175f48620191b538b9731",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/3be7e91d037059dd98c175f48620191b538b9731",
        "files": [
          "Lib/test/test_compile.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-07-16-09-04.gh-issue-120225.kuYf9t.rst",
          "Python/flowgraph.c"
        ],
        "message": "[3.13] gh-120225: fix crash in compiler on empty block at end of exception handler (GH-120235) (#120249)\n\ngh-120225: fix crash in compiler on empty block at end of exception handler (GH-120235)\n(cherry picked from commit 4fc82b6d3b99f873179937215833e7a573ca7876)\n\nCo-authored-by: Irit Katriel <1055913+iritkatriel@users.noreply.github.com>",
        "before_after_code_files": [
          "Lib/test/test_compile.py||Lib/test/test_compile.py",
          "Python/flowgraph.c||Python/flowgraph.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_compile.py||Lib/test/test_compile.py": [
          "File: Lib/test/test_compile.py -> Lib/test/test_compile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1409:         for kw in (\"except\", \"except*\"):",
          "1410:             exec(code % kw, g, l);",
          "1413: @requires_debug_ranges()",
          "1414: class TestSourcePositions(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1412:     def test_regression_gh_120225(self):",
          "1413:         async def name_4():",
          "1414:             match b'':",
          "1415:                 case True:",
          "1416:                     pass",
          "1417:                 case name_5 if f'e':",
          "1418:                     {name_3: name_4 async for name_2 in name_5}",
          "1419:                 case []:",
          "1420:                     pass",
          "1421:             [[]]",
          "",
          "---------------"
        ],
        "Python/flowgraph.c||Python/flowgraph.c": [
          "File: Python/flowgraph.c -> Python/flowgraph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2276:             if (!IS_LABEL(b->b_next->b_label)) {",
          "2277:                 b->b_next->b_label.id = next_lbl++;",
          "2278:             }",
          "2284:             basicblock_addop(explicit_jump, JUMP_NO_INTERRUPT, b->b_next->b_label.id,",
          "2286:             explicit_jump->b_cold = 1;",
          "2287:             explicit_jump->b_next = b->b_next;",
          "2288:             b->b_next = explicit_jump;",
          "",
          "[Removed Lines]",
          "2279:             cfg_instr *prev_instr = basicblock_last_instr(b);",
          "2282:             assert(prev_instr);",
          "2285:                              prev_instr->i_loc);",
          "",
          "[Added Lines]",
          "2280:                              NO_LOCATION);",
          "2283:             explicit_jump->b_predecessors = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "071b66b218d71d9f4fbdef6487f82fed808c81d4",
      "candidate_info": {
        "commit_hash": "071b66b218d71d9f4fbdef6487f82fed808c81d4",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/071b66b218d71d9f4fbdef6487f82fed808c81d4",
        "files": [
          "Python/import.c",
          "Python/pystate.c"
        ],
        "message": "[3.13] gh-120726: Fix compiler warnings on is_core_module() (GH-120727) (#120729)\n\ngh-120726: Fix compiler warnings on is_core_module() (GH-120727)\n\nFix compiler warnings on is_core_module() and\ncheck_interpreter_whence(): only define them when\nassertions are built.\n(cherry picked from commit a816cd67f43d9adb27ccdb6331e08c835247d1df)\n\nCo-authored-by: Kirill Podoprigora <kirill.bast9@mail.ru>",
        "before_after_code_files": [
          "Python/import.c||Python/import.c",
          "Python/pystate.c||Python/pystate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Python/import.c||Python/import.c": [
          "File: Python/import.c -> Python/import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1551:     return NULL;",
          "1552: }",
          "1554: static inline int",
          "1555: is_core_module(PyInterpreterState *interp, PyObject *name, PyObject *path)",
          "1556: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1554: #ifndef NDEBUG",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1568: }",
          "1572: static _Py_ext_module_kind",
          "1573: _get_extension_kind(PyModuleDef *def, bool check_size)",
          "1574: {",
          "",
          "[Removed Lines]",
          "1571: #ifndef NDEBUG",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Python/pystate.c||Python/pystate.c": [
          "File: Python/pystate.c -> Python/pystate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         PyMem_RawFree(interp);",
          "585:     }",
          "586: }",
          "588: static inline int check_interpreter_whence(long);",
          "591:    Further init happens in pylifecycle.c before it can be used.",
          "592:    All fields not initialized here are expected to be zeroed out,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587: #ifndef NDEBUG",
          "589: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1130:     return interp->_ready;",
          "1131: }",
          "1134: static inline int",
          "1135: check_interpreter_whence(long whence)",
          "1136: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1133: #ifndef NDEBUG",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1142:     }",
          "1143:     return 0;",
          "1144: }",
          "1146: long",
          "1147: _PyInterpreterState_GetWhence(PyInterpreterState *interp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c47f93dff878bdc43f5162dd878cbb375711570",
      "candidate_info": {
        "commit_hash": "7c47f93dff878bdc43f5162dd878cbb375711570",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/7c47f93dff878bdc43f5162dd878cbb375711570",
        "files": [
          "Doc/library/symtable.rst",
          "Include/internal/pycore_symtable.h",
          "Lib/symtable.py",
          "Lib/test/test_symtable.py",
          "Lib/test/test_syntax.py",
          "Misc/NEWS.d/next/Core and Builtins/2024-06-03-13-48-44.gh-issue-119933.Kc0HG5.rst",
          "Misc/NEWS.d/next/Library/2024-06-05-11-39-21.gh-issue-119933.ooJXQV.rst",
          "Modules/symtablemodule.c",
          "Python/symtable.c"
        ],
        "message": "[3.13] gh-119933: Improve ``SyntaxError`` message for invalid type parameters expressions (GH-119976) (#120641)\n\n(cherry picked from commit 4bf17c381fb7b465f0f26aecb94a6c54cf9be2d3)\n\nCo-authored-by: B\u00e9n\u00e9dikt Tran <10796600+picnixz@users.noreply.github.com>",
        "before_after_code_files": [
          "Include/internal/pycore_symtable.h||Include/internal/pycore_symtable.h",
          "Lib/symtable.py||Lib/symtable.py",
          "Lib/test/test_symtable.py||Lib/test/test_symtable.py",
          "Lib/test/test_syntax.py||Lib/test/test_syntax.py",
          "Modules/symtablemodule.c||Modules/symtablemodule.c",
          "Python/symtable.c||Python/symtable.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Include/internal/pycore_symtable.h||Include/internal/pycore_symtable.h": [
          "File: Include/internal/pycore_symtable.h -> Include/internal/pycore_symtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     AnnotationBlock,",
          "23: } _Py_block_ty;",
          "25: typedef enum _comprehension_type {",
          "",
          "[Removed Lines]",
          "22:     TypeVarBoundBlock, TypeAliasBlock, TypeParamBlock",
          "",
          "[Added Lines]",
          "26:     TypeAliasBlock,",
          "29:     TypeParametersBlock,",
          "34:     TypeVariableBlock,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     _Py_block_ty ste_type;",
          "88:     unsigned ste_child_free : 1;  /* true if a child block has free vars,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     const char *ste_scope_info;",
          "",
          "---------------"
        ],
        "Lib/symtable.py||Lib/symtable.py": [
          "File: Lib/symtable.py -> Lib/symtable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:      LOCAL, GLOBAL_IMPLICIT, GLOBAL_EXPLICIT, CELL)",
          "8: import weakref",
          "12: def symtable(code, filename, compile_type):",
          "13:     \"\"\" Return the toplevel *SymbolTable* for the source code.",
          "",
          "[Removed Lines]",
          "10: __all__ = [\"symtable\", \"SymbolTable\", \"Class\", \"Function\", \"Symbol\"]",
          "",
          "[Added Lines]",
          "9: from enum import StrEnum",
          "11: __all__ = [\"symtable\", \"SymbolTableType\", \"SymbolTable\", \"Class\", \"Function\", \"Symbol\"]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: _newSymbolTable = SymbolTableFactory()",
          "42: class SymbolTable:",
          "44:     def __init__(self, raw_table, filename):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: class SymbolTableType(StrEnum):",
          "44:     MODULE = \"module\"",
          "45:     FUNCTION = \"function\"",
          "46:     CLASS = \"class\"",
          "47:     ANNOTATION = \"annotation\"",
          "48:     TYPE_ALIAS = \"type alias\"",
          "49:     TYPE_PARAMETERS = \"type parameters\"",
          "50:     TYPE_VARIABLE = \"type variable\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     def get_type(self):",
          "63:         \"\"\"Return the type of the symbol table.",
          "67:         \"\"\"",
          "68:         if self._table.type == _symtable.TYPE_MODULE:",
          "70:         if self._table.type == _symtable.TYPE_FUNCTION:",
          "72:         if self._table.type == _symtable.TYPE_CLASS:",
          "74:         if self._table.type == _symtable.TYPE_ANNOTATION:",
          "78:         if self._table.type == _symtable.TYPE_TYPE_ALIAS:",
          "82:         assert False, f\"unexpected type: {self._table.type}\"",
          "84:     def get_id(self):",
          "",
          "[Removed Lines]",
          "65:         The values returned are 'class', 'module', 'function',",
          "66:         'annotation', 'TypeVar bound', 'type alias', and 'type parameter'.",
          "69:             return \"module\"",
          "71:             return \"function\"",
          "73:             return \"class\"",
          "75:             return \"annotation\"",
          "76:         if self._table.type == _symtable.TYPE_TYPE_VAR_BOUND:",
          "77:             return \"TypeVar bound\"",
          "79:             return \"type alias\"",
          "80:         if self._table.type == _symtable.TYPE_TYPE_PARAM:",
          "81:             return \"type parameter\"",
          "",
          "[Added Lines]",
          "76:         The value returned is one of the values in",
          "77:         the ``SymbolTableType`` enumeration.",
          "80:             return SymbolTableType.MODULE",
          "82:             return SymbolTableType.FUNCTION",
          "84:             return SymbolTableType.CLASS",
          "86:             return SymbolTableType.ANNOTATION",
          "88:             return SymbolTableType.TYPE_ALIAS",
          "89:         if self._table.type == _symtable.TYPE_TYPE_PARAMETERS:",
          "90:             return SymbolTableType.TYPE_PARAMETERS",
          "91:         if self._table.type == _symtable.TYPE_TYPE_VARIABLE:",
          "92:             return SymbolTableType.TYPE_VARIABLE",
          "",
          "---------------"
        ],
        "Lib/test/test_symtable.py||Lib/test/test_symtable.py": [
          "File: Lib/test/test_symtable.py -> Lib/test/test_symtable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: def generic_spam[T](a):",
          "50:     pass",
          "53:     pass",
          "54: \"\"\"",
          "",
          "[Removed Lines]",
          "52: class GenericMine[T: int]:",
          "",
          "[Added Lines]",
          "52: class GenericMine[T: int, U: (int, str) = int]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     GenericMine = find_block(top, \"GenericMine\")",
          "79:     GenericMine_inner = find_block(GenericMine, \"GenericMine\")",
          "80:     T = find_block(GenericMine, \"T\")",
          "82:     def test_type(self):",
          "83:         self.assertEqual(self.top.get_type(), \"module\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     U = find_block(GenericMine, \"U\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:         self.assertEqual(self.internal.get_type(), \"function\")",
          "88:         self.assertEqual(self.foo.get_type(), \"function\")",
          "89:         self.assertEqual(self.Alias.get_type(), \"type alias\")",
          "91:         self.assertEqual(self.GenericAlias_inner.get_type(), \"type alias\")",
          "93:         self.assertEqual(self.generic_spam_inner.get_type(), \"function\")",
          "95:         self.assertEqual(self.GenericMine_inner.get_type(), \"class\")",
          "98:     def test_id(self):",
          "99:         self.assertGreater(self.top.get_id(), 0)",
          "",
          "[Removed Lines]",
          "90:         self.assertEqual(self.GenericAlias.get_type(), \"type parameter\")",
          "92:         self.assertEqual(self.generic_spam.get_type(), \"type parameter\")",
          "94:         self.assertEqual(self.GenericMine.get_type(), \"type parameter\")",
          "96:         self.assertEqual(self.T.get_type(), \"TypeVar bound\")",
          "",
          "[Added Lines]",
          "91:         self.assertEqual(self.GenericAlias.get_type(), \"type parameters\")",
          "93:         self.assertEqual(self.generic_spam.get_type(), \"type parameters\")",
          "95:         self.assertEqual(self.GenericMine.get_type(), \"type parameters\")",
          "97:         self.assertEqual(self.T.get_type(), \"type variable\")",
          "98:         self.assertEqual(self.U.get_type(), \"type variable\")",
          "",
          "---------------"
        ],
        "Lib/test/test_syntax.py||Lib/test/test_syntax.py": [
          "File: Lib/test/test_syntax.py -> Lib/test/test_syntax.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2046:    ...",
          "2047:    SyntaxError: Type parameter list cannot be empty",
          "2049:    >>> type A[T: (x:=3)] = int",
          "2050:    Traceback (most recent call last):",
          "2051:       ...",
          "2052:    SyntaxError: named expression cannot be used within a TypeVar bound",
          "2054:    >>> type A[T: (yield 3)] = int",
          "2055:    Traceback (most recent call last):",
          "2056:       ...",
          "2057:    SyntaxError: yield expression cannot be used within a TypeVar bound",
          "2059:    >>> type A[T: (await 3)] = int",
          "2060:    Traceback (most recent call last):",
          "2061:       ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2049:    >>> def f[T: (x:=3)](): pass",
          "2050:    Traceback (most recent call last):",
          "2051:       ...",
          "2052:    SyntaxError: named expression cannot be used within a TypeVar bound",
          "2054:    >>> def f[T: ((x:= 3), int)](): pass",
          "2055:    Traceback (most recent call last):",
          "2056:       ...",
          "2057:    SyntaxError: named expression cannot be used within a TypeVar constraint",
          "2059:    >>> def f[T = ((x:=3))](): pass",
          "2060:    Traceback (most recent call last):",
          "2061:       ...",
          "2062:    SyntaxError: named expression cannot be used within a TypeVar default",
          "2064:    >>> async def f[T: (x:=3)](): pass",
          "2065:    Traceback (most recent call last):",
          "2066:       ...",
          "2067:    SyntaxError: named expression cannot be used within a TypeVar bound",
          "2069:    >>> async def f[T: ((x:= 3), int)](): pass",
          "2070:    Traceback (most recent call last):",
          "2071:       ...",
          "2072:    SyntaxError: named expression cannot be used within a TypeVar constraint",
          "2074:    >>> async def f[T = ((x:=3))](): pass",
          "2075:    Traceback (most recent call last):",
          "2076:       ...",
          "2077:    SyntaxError: named expression cannot be used within a TypeVar default",
          "2084:    >>> type A[T: ((x:= 3), int)] = int",
          "2085:    Traceback (most recent call last):",
          "2086:       ...",
          "2087:    SyntaxError: named expression cannot be used within a TypeVar constraint",
          "2089:    >>> type A[T = ((x:=3))] = int",
          "2090:    Traceback (most recent call last):",
          "2091:       ...",
          "2092:    SyntaxError: named expression cannot be used within a TypeVar default",
          "2094:    >>> def f[T: (yield)](): pass",
          "2095:    Traceback (most recent call last):",
          "2096:       ...",
          "2097:    SyntaxError: yield expression cannot be used within a TypeVar bound",
          "2099:    >>> def f[T: (int, (yield))](): pass",
          "2100:    Traceback (most recent call last):",
          "2101:       ...",
          "2102:    SyntaxError: yield expression cannot be used within a TypeVar constraint",
          "2104:    >>> def f[T = (yield)](): pass",
          "2105:    Traceback (most recent call last):",
          "2106:       ...",
          "2107:    SyntaxError: yield expression cannot be used within a TypeVar default",
          "2109:    >>> def f[*Ts = (yield)](): pass",
          "2110:    Traceback (most recent call last):",
          "2111:       ...",
          "2112:    SyntaxError: yield expression cannot be used within a TypeVarTuple default",
          "2114:    >>> def f[**P = [(yield), int]](): pass",
          "2115:    Traceback (most recent call last):",
          "2116:       ...",
          "2117:    SyntaxError: yield expression cannot be used within a ParamSpec default",
          "2124:    >>> type A[T: (int, (yield 3))] = int",
          "2125:    Traceback (most recent call last):",
          "2126:       ...",
          "2127:    SyntaxError: yield expression cannot be used within a TypeVar constraint",
          "2129:    >>> type A[T = (yield 3)] = int",
          "2130:    Traceback (most recent call last):",
          "2131:       ...",
          "2132:    SyntaxError: yield expression cannot be used within a TypeVar default",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2066:       ...",
          "2067:    SyntaxError: yield expression cannot be used within a TypeVar bound",
          "2069:    >>> type A = (x := 3)",
          "2070:    Traceback (most recent call last):",
          "2071:       ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2144:    >>> class A[T: (yield 3)]: pass",
          "2145:    Traceback (most recent call last):",
          "2146:       ...",
          "2147:    SyntaxError: yield expression cannot be used within a TypeVar bound",
          "2149:    >>> class A[T: (int, (yield 3))]: pass",
          "2150:    Traceback (most recent call last):",
          "2151:       ...",
          "2152:    SyntaxError: yield expression cannot be used within a TypeVar constraint",
          "2154:    >>> class A[T = (yield)]: pass",
          "2155:    Traceback (most recent call last):",
          "2156:       ...",
          "2157:    SyntaxError: yield expression cannot be used within a TypeVar default",
          "2159:    >>> class A[*Ts = (yield)]: pass",
          "2160:    Traceback (most recent call last):",
          "2161:       ...",
          "2162:    SyntaxError: yield expression cannot be used within a TypeVarTuple default",
          "2164:    >>> class A[**P = [(yield), int]]: pass",
          "2165:    Traceback (most recent call last):",
          "2166:       ...",
          "2167:    SyntaxError: yield expression cannot be used within a ParamSpec default",
          "",
          "---------------"
        ],
        "Modules/symtablemodule.c||Modules/symtablemodule.c": [
          "File: Modules/symtablemodule.c -> Modules/symtablemodule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         return -1;",
          "89:     if (PyModule_AddIntConstant(m, \"TYPE_ANNOTATION\", AnnotationBlock) < 0)",
          "90:         return -1;",
          "93:     if (PyModule_AddIntConstant(m, \"TYPE_TYPE_ALIAS\", TypeAliasBlock) < 0)",
          "94:         return -1;",
          "96:         return -1;",
          "98:     if (PyModule_AddIntMacro(m, LOCAL) < 0) return -1;",
          "",
          "[Removed Lines]",
          "91:     if (PyModule_AddIntConstant(m, \"TYPE_TYPE_VAR_BOUND\", TypeVarBoundBlock) < 0)",
          "92:         return -1;",
          "95:     if (PyModule_AddIntConstant(m, \"TYPE_TYPE_PARAM\", TypeParamBlock) < 0)",
          "",
          "[Added Lines]",
          "93:     if (PyModule_AddIntConstant(m, \"TYPE_TYPE_PARAMETERS\", TypeParametersBlock) < 0)",
          "94:         return -1;",
          "95:     if (PyModule_AddIntConstant(m, \"TYPE_TYPE_VARIABLE\", TypeVariableBlock) < 0)",
          "",
          "---------------"
        ],
        "Python/symtable.c||Python/symtable.c": [
          "File: Python/symtable.c -> Python/symtable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: #define ANNOTATION_NOT_ALLOWED \\",
          "59: \"%s cannot be used within an annotation\"",
          "65: \"%s cannot be used within a type alias\"",
          "68: \"%s cannot be used within the definition of a generic\"",
          "70: #define DUPLICATE_TYPE_PARAM \\",
          "",
          "[Removed Lines]",
          "61: #define TYPEVAR_BOUND_NOT_ALLOWED \\",
          "62: \"%s cannot be used within a TypeVar bound\"",
          "64: #define TYPEALIAS_NOT_ALLOWED \\",
          "67: #define TYPEPARAM_NOT_ALLOWED \\",
          "",
          "[Added Lines]",
          "61: #define EXPR_NOT_ALLOWED_IN_TYPE_VARIABLE \\",
          "62: \"%s cannot be used within %s\"",
          "64: #define EXPR_NOT_ALLOWED_IN_TYPE_ALIAS \\",
          "67: #define EXPR_NOT_ALLOWED_IN_TYPE_PARAMETERS \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     ste->ste_mangled_names = NULL;",
          "108:     ste->ste_type = block;",
          "109:     ste->ste_nested = 0;",
          "110:     ste->ste_free = 0;",
          "111:     ste->ste_varargs = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     ste->ste_scope_info = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:         case ClassBlock: blocktype = \"ClassBlock\"; break;",
          "266:         case ModuleBlock: blocktype = \"ModuleBlock\"; break;",
          "267:         case AnnotationBlock: blocktype = \"AnnotationBlock\"; break;",
          "269:         case TypeAliasBlock: blocktype = \"TypeAliasBlock\"; break;",
          "271:     }",
          "272:     const char *comptype = \"\";",
          "273:     switch (ste->ste_comprehension) {",
          "",
          "[Removed Lines]",
          "268:         case TypeVarBoundBlock: blocktype = \"TypeVarBoundBlock\"; break;",
          "270:         case TypeParamBlock: blocktype = \"TypeParamBlock\"; break;",
          "",
          "[Added Lines]",
          "270:         case TypeVariableBlock: blocktype = \"TypeVariableBlock\"; break;",
          "272:         case TypeParametersBlock: blocktype = \"TypeParametersBlock\"; break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "525: _PyST_IsFunctionLike(PySTEntryObject *ste)",
          "526: {",
          "527:     return ste->ste_type == FunctionBlock",
          "529:         || ste->ste_type == TypeAliasBlock",
          "531: }",
          "533: static int",
          "",
          "[Removed Lines]",
          "528:         || ste->ste_type == TypeVarBoundBlock",
          "530:         || ste->ste_type == TypeParamBlock;",
          "",
          "[Added Lines]",
          "530:         || ste->ste_type == TypeVariableBlock",
          "532:         || ste->ste_type == TypeParametersBlock;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1494:                                int end_lineno, int end_col_offset)",
          "1495: {",
          "1496:     _Py_block_ty current_type = st->st_cur->ste_type;",
          "1498:                              col_offset, end_lineno, end_col_offset)) {",
          "1499:         return 0;",
          "1500:     }",
          "",
          "[Removed Lines]",
          "1497:     if(!symtable_enter_block(st, name, TypeParamBlock, ast, lineno,",
          "",
          "[Added Lines]",
          "1499:     if(!symtable_enter_block(st, name, TypeParametersBlock, ast, lineno,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2069:         }",
          "2071:         if (ste->ste_type == ClassBlock ||",
          "2073:             ste->ste_type == TypeAliasBlock ||",
          "2075:             switch (ste->ste_type) {",
          "2076:                 case ClassBlock:",
          "2077:                     PyErr_Format(PyExc_SyntaxError, NAMED_EXPR_COMP_IN_CLASS);",
          "2078:                     break;",
          "2080:                     PyErr_Format(PyExc_SyntaxError, NAMED_EXPR_COMP_IN_TYPEPARAM);",
          "2081:                     break;",
          "2082:                 case TypeAliasBlock:",
          "2083:                     PyErr_Format(PyExc_SyntaxError, NAMED_EXPR_COMP_IN_TYPEALIAS);",
          "2084:                     break;",
          "2086:                     PyErr_Format(PyExc_SyntaxError, NAMED_EXPR_COMP_IN_TYPEVAR_BOUND);",
          "2087:                     break;",
          "2088:                 default:",
          "",
          "[Removed Lines]",
          "2072:             ste->ste_type == TypeParamBlock ||",
          "2074:             ste->ste_type == TypeVarBoundBlock) {",
          "2079:                 case TypeParamBlock:",
          "2085:                 case TypeVarBoundBlock:",
          "",
          "[Added Lines]",
          "2074:             ste->ste_type == TypeParametersBlock ||",
          "2076:             ste->ste_type == TypeVariableBlock) {",
          "2081:                 case TypeParametersBlock:",
          "2087:                 case TypeVariableBlock:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2288: }",
          "2290: static int",
          "2292: {",
          "2293:     if (e) {",
          "2294:         int is_in_class = st->st_cur->ste_can_see_class_scope;",
          "2296:             return 0;",
          "2297:         st->st_cur->ste_can_see_class_scope = is_in_class;",
          "2298:         if (is_in_class && !symtable_add_def(st, &_Py_ID(__classdict__), USE, LOCATION(e))) {",
          "2299:             VISIT_QUIT(st, 0);",
          "2300:         }",
          "2301:         VISIT(st, expr, e);",
          "2303:             return 0;",
          "2304:     }",
          "2305:     return 1;",
          "2306: }",
          "",
          "[Removed Lines]",
          "2291: symtable_visit_type_param_bound_or_default(struct symtable *st, expr_ty e, identifier name, void *key)",
          "2295:         if (!symtable_enter_block(st, name, TypeVarBoundBlock, key, LOCATION(e)))",
          "2302:         if (!symtable_exit_block(st))",
          "",
          "[Added Lines]",
          "2293: symtable_visit_type_param_bound_or_default(",
          "2294:     struct symtable *st, expr_ty e, identifier name,",
          "2295:     void *key, const char *ste_scope_info)",
          "2299:         if (!symtable_enter_block(st, name, TypeVariableBlock, key, LOCATION(e)))",
          "2307:         assert(ste_scope_info != NULL);",
          "2308:         st->st_cur->ste_scope_info = ste_scope_info;",
          "2311:         if (!symtable_exit_block(st)) {",
          "2313:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2318:         if (!symtable_add_def(st, tp->v.TypeVar.name, DEF_TYPE_PARAM | DEF_LOCAL, LOCATION(tp)))",
          "2319:             VISIT_QUIT(st, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:         const char *ste_scope_info = NULL;",
          "2332:         const expr_ty bound = tp->v.TypeVar.bound;",
          "2333:         if (bound != NULL) {",
          "2334:             ste_scope_info = bound->kind == Tuple_kind ? \"a TypeVar constraint\" : \"a TypeVar bound\";",
          "2335:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2327:         if (!symtable_visit_type_param_bound_or_default(st, tp->v.TypeVar.bound, tp->v.TypeVar.name,",
          "2329:             VISIT_QUIT(st, 0);",
          "2330:         }",
          "2331:         if (!symtable_visit_type_param_bound_or_default(st, tp->v.TypeVar.default_value, tp->v.TypeVar.name,",
          "2333:             VISIT_QUIT(st, 0);",
          "2334:         }",
          "2335:         break;",
          "",
          "[Removed Lines]",
          "2328:                                                         (void *)tp)) {",
          "2332:                                                         (void *)((uintptr_t)tp + 1))) {",
          "",
          "[Added Lines]",
          "2344:                                                         (void *)tp, ste_scope_info)) {",
          "2349:                                                         (void *)((uintptr_t)tp + 1), \"a TypeVar default\")) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2337:         if (!symtable_add_def(st, tp->v.TypeVarTuple.name, DEF_TYPE_PARAM | DEF_LOCAL, LOCATION(tp))) {",
          "2338:             VISIT_QUIT(st, 0);",
          "2339:         }",
          "2340:         if (!symtable_visit_type_param_bound_or_default(st, tp->v.TypeVarTuple.default_value, tp->v.TypeVarTuple.name,",
          "2342:             VISIT_QUIT(st, 0);",
          "2343:         }",
          "2344:         break;",
          "",
          "[Removed Lines]",
          "2341:                                                         (void *)tp)) {",
          "",
          "[Added Lines]",
          "2359:                                                         (void *)tp, \"a TypeVarTuple default\")) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2346:         if (!symtable_add_def(st, tp->v.ParamSpec.name, DEF_TYPE_PARAM | DEF_LOCAL, LOCATION(tp))) {",
          "2347:             VISIT_QUIT(st, 0);",
          "2348:         }",
          "2349:         if (!symtable_visit_type_param_bound_or_default(st, tp->v.ParamSpec.default_value, tp->v.ParamSpec.name,",
          "2351:             VISIT_QUIT(st, 0);",
          "2352:         }",
          "2353:         break;",
          "",
          "[Removed Lines]",
          "2350:                                                         (void *)tp)) {",
          "",
          "[Added Lines]",
          "2369:                                                         (void *)tp, \"a ParamSpec default\")) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2729:     enum _block_type type = st->st_cur->ste_type;",
          "2730:     if (type == AnnotationBlock)",
          "2731:         PyErr_Format(PyExc_SyntaxError, ANNOTATION_NOT_ALLOWED, name);",
          "2738:     else",
          "2739:         return 1;",
          "",
          "[Removed Lines]",
          "2732:     else if (type == TypeVarBoundBlock)",
          "2733:         PyErr_Format(PyExc_SyntaxError, TYPEVAR_BOUND_NOT_ALLOWED, name);",
          "2734:     else if (type == TypeAliasBlock)",
          "2735:         PyErr_Format(PyExc_SyntaxError, TYPEALIAS_NOT_ALLOWED, name);",
          "2736:     else if (type == TypeParamBlock)",
          "2737:         PyErr_Format(PyExc_SyntaxError, TYPEPARAM_NOT_ALLOWED, name);",
          "",
          "[Added Lines]",
          "2751:     else if (type == TypeVariableBlock) {",
          "2752:         const char *info = st->st_cur->ste_scope_info;",
          "2753:         assert(info != NULL); // e.g., info == \"a ParamSpec default\"",
          "2754:         PyErr_Format(PyExc_SyntaxError, EXPR_NOT_ALLOWED_IN_TYPE_VARIABLE, name, info);",
          "2755:     }",
          "2756:     else if (type == TypeAliasBlock) {",
          "2758:         assert(st->st_cur->ste_scope_info == NULL);",
          "2759:         PyErr_Format(PyExc_SyntaxError, EXPR_NOT_ALLOWED_IN_TYPE_ALIAS, name);",
          "2760:     }",
          "2761:     else if (type == TypeParametersBlock) {",
          "2763:         assert(st->st_cur->ste_scope_info == NULL);",
          "2764:         PyErr_Format(PyExc_SyntaxError, EXPR_NOT_ALLOWED_IN_TYPE_PARAMETERS, name);",
          "2765:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5272e63efc003a30a2b603b512d367282a24209",
      "candidate_info": {
        "commit_hash": "a5272e63efc003a30a2b603b512d367282a24209",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/a5272e63efc003a30a2b603b512d367282a24209",
        "files": [
          "Lib/_pyrepl/commands.py",
          "Lib/_pyrepl/console.py",
          "Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/simple_interact.py",
          "Lib/asyncio/__main__.py",
          "Lib/test/test_pyrepl/test_interact.py",
          "Misc/NEWS.d/next/Library/2024-05-22-21-20-43.gh-issue-118894.xHdxR_.rst"
        ],
        "message": "[3.13] gh-118894: Make asyncio REPL use pyrepl (GH-119433) (#119884)\n\n(cherry picked from commit 2237946af0981c46dc7d3886477e425ccfb37f28)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
        "before_after_code_files": [
          "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py",
          "Lib/_pyrepl/console.py||Lib/_pyrepl/console.py",
          "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py",
          "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py",
          "Lib/asyncio/__main__.py||Lib/asyncio/__main__.py",
          "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/_pyrepl/commands.py||Lib/_pyrepl/commands.py": [
          "File: Lib/_pyrepl/commands.py -> Lib/_pyrepl/commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:         os.kill(os.getpid(), signal.SIGINT)",
          "222: class suspend(Command):",
          "223:     def do(self) -> None:",
          "224:         import signal",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: class ctrl_c(Command):",
          "223:     def do(self) -> None:",
          "224:         raise KeyboardInterrupt",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/console.py||Lib/_pyrepl/console.py": [
          "File: Lib/_pyrepl/console.py -> Lib/_pyrepl/console.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from __future__ import annotations",
          "24: from abc import ABC, abstractmethod",
          "25: from dataclasses import dataclass, field",
          "28: TYPE_CHECKING = False",
          "",
          "[Removed Lines]",
          "22: import sys",
          "",
          "[Added Lines]",
          "22: import _colorize  # type: ignore[import-not-found]",
          "25: import ast",
          "26: import code",
          "28: import os.path",
          "29: import sys",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:     @abstractmethod",
          "138:     def repaint(self) -> None: ...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: class InteractiveColoredConsole(code.InteractiveConsole):",
          "146:     def __init__(",
          "147:         self,",
          "148:         locals: dict[str, object] | None = None,",
          "149:         filename: str = \"<console>\",",
          "151:         local_exit: bool = False,",
          "152:     ) -> None:",
          "153:         super().__init__(locals=locals, filename=filename, local_exit=local_exit)  # type: ignore[call-arg]",
          "154:         self.can_colorize = _colorize.can_colorize()",
          "156:     def showsyntaxerror(self, filename=None):",
          "157:         super().showsyntaxerror(colorize=self.can_colorize)",
          "159:     def showtraceback(self):",
          "160:         super().showtraceback(colorize=self.can_colorize)",
          "162:     def runsource(self, source, filename=\"<input>\", symbol=\"single\"):",
          "163:         try:",
          "164:             tree = ast.parse(source)",
          "165:         except (SyntaxError, OverflowError, ValueError):",
          "166:             self.showsyntaxerror(filename)",
          "167:             return False",
          "168:         if tree.body:",
          "170:         for stmt in tree.body:",
          "171:             wrapper = ast.Interactive if stmt is last_stmt else ast.Module",
          "172:             the_symbol = symbol if stmt is last_stmt else \"exec\"",
          "173:             item = wrapper([stmt])",
          "174:             try:",
          "175:                 code = self.compile.compiler(item, filename, the_symbol, dont_inherit=True)",
          "176:             except SyntaxError as e:",
          "177:                 if e.args[0] == \"'await' outside function\":",
          "178:                     python = os.path.basename(sys.executable)",
          "179:                     e.add_note(",
          "180:                         f\"Try the asyncio REPL ({python} -m asyncio) to use\"",
          "181:                         f\" top-level 'await' and run background asyncio tasks.\"",
          "182:                     )",
          "183:                 self.showsyntaxerror(filename)",
          "184:                 return False",
          "185:             except (OverflowError, ValueError):",
          "186:                 self.showsyntaxerror(filename)",
          "187:                 return False",
          "189:             if code is None:",
          "190:                 return True",
          "192:             self.runcode(code)",
          "193:         return False",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/reader.py||Lib/_pyrepl/reader.py": [
          "File: Lib/_pyrepl/reader.py -> Lib/_pyrepl/reader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:         (\"\\\\\\\\\", \"self-insert\"),",
          "132:         (r\"\\x1b[200~\", \"enable_bracketed_paste\"),",
          "133:         (r\"\\x1b[201~\", \"disable_bracketed_paste\"),",
          "134:     ]",
          "135:     + [(c, \"self-insert\") for c in map(chr, range(32, 127)) if c != \"\\\\\"]",
          "136:     + [(c, \"self-insert\") for c in map(chr, range(128, 256)) if c.isalpha()]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:         (r\"\\x03\", \"ctrl-c\"),",
          "",
          "---------------"
        ],
        "Lib/_pyrepl/simple_interact.py||Lib/_pyrepl/simple_interact.py": [
          "File: Lib/_pyrepl/simple_interact.py -> Lib/_pyrepl/simple_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from __future__ import annotations",
          "29: import _sitebuiltins",
          "30: import linecache",
          "31: import sys",
          "32: import code",
          "34: from types import ModuleType",
          "36: from .readline import _get_reader, multiline_input",
          "38: _error: tuple[type[Exception], ...] | type[Exception]",
          "",
          "[Removed Lines]",
          "28: import _colorize  # type: ignore[import-not-found]",
          "33: import ast",
          "",
          "[Added Lines]",
          "34: from .console import InteractiveColoredConsole",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     \"clear\": _clear_screen,",
          "75: }",
          "119: def run_multiline_interactive_console(",
          "121: ) -> None:",
          "122:     import __main__",
          "123:     from .readline import _setup",
          "124:     _setup()",
          "126:     mainmodule = mainmodule or __main__",
          "128:     if future_flags:",
          "129:         console.compile.compiler.flags |= future_flags",
          "",
          "[Removed Lines]",
          "77: class InteractiveColoredConsole(code.InteractiveConsole):",
          "78:     def __init__(",
          "79:         self,",
          "80:         locals: dict[str, object] | None = None,",
          "81:         filename: str = \"<console>\",",
          "83:         local_exit: bool = False,",
          "84:     ) -> None:",
          "85:         super().__init__(locals=locals, filename=filename, local_exit=local_exit)  # type: ignore[call-arg]",
          "86:         self.can_colorize = _colorize.can_colorize()",
          "88:     def showsyntaxerror(self, filename=None):",
          "89:         super().showsyntaxerror(colorize=self.can_colorize)",
          "91:     def showtraceback(self):",
          "92:         super().showtraceback(colorize=self.can_colorize)",
          "94:     def runsource(self, source, filename=\"<input>\", symbol=\"single\"):",
          "95:         try:",
          "96:             tree = ast.parse(source)",
          "97:         except (OverflowError, SyntaxError, ValueError):",
          "98:             self.showsyntaxerror(filename)",
          "99:             return False",
          "100:         if tree.body:",
          "102:         for stmt in tree.body:",
          "103:             wrapper = ast.Interactive if stmt is last_stmt else ast.Module",
          "104:             the_symbol = symbol if stmt is last_stmt else \"exec\"",
          "105:             item = wrapper([stmt])",
          "106:             try:",
          "107:                 code = compile(item, filename, the_symbol, dont_inherit=True)",
          "108:             except (OverflowError, ValueError, SyntaxError):",
          "109:                     self.showsyntaxerror(filename)",
          "110:                     return False",
          "112:             if code is None:",
          "113:                 return True",
          "115:             self.runcode(code)",
          "116:         return False",
          "120:     mainmodule: ModuleType | None= None, future_flags: int = 0",
          "127:     console = InteractiveColoredConsole(mainmodule.__dict__, filename=\"<stdin>\")",
          "",
          "[Added Lines]",
          "78:     mainmodule: ModuleType | None = None,",
          "79:     future_flags: int = 0,",
          "80:     console: code.InteractiveConsole | None = None,",
          "87:     if console is None:",
          "88:         console = InteractiveColoredConsole(",
          "89:             mainmodule.__dict__, filename=\"<stdin>\"",
          "90:         )",
          "",
          "---------------"
        ],
        "Lib/asyncio/__main__.py||Lib/asyncio/__main__.py": [
          "File: Lib/asyncio/__main__.py -> Lib/asyncio/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import ast",
          "2: import asyncio",
          "4: import concurrent.futures",
          "5: import inspect",
          "6: import site",
          "7: import sys",
          "8: import threading",
          "9: import types",
          "10: import warnings",
          "12: from . import futures",
          "17:     def __init__(self, locals, loop):",
          "19:         self.compile.compiler.flags |= ast.PyCF_ALLOW_TOP_LEVEL_AWAIT",
          "21:         self.loop = loop",
          "23:     def runcode(self, code):",
          "24:         future = concurrent.futures.Future()",
          "26:         def callback():",
          "27:             global repl_future",
          "30:             repl_future = None",
          "33:             func = types.FunctionType(code, self.locals)",
          "34:             try:",
          "35:                 coro = func()",
          "38:             except KeyboardInterrupt as ex:",
          "40:                 future.set_exception(ex)",
          "41:                 return",
          "42:             except BaseException as ex:",
          "",
          "[Removed Lines]",
          "3: import code",
          "15: class AsyncIOInteractiveConsole(code.InteractiveConsole):",
          "18:         super().__init__(locals)",
          "28:             global repl_future_interrupted",
          "31:             repl_future_interrupted = False",
          "36:             except SystemExit:",
          "37:                 raise",
          "39:                 repl_future_interrupted = True",
          "",
          "[Added Lines]",
          "5: import os",
          "12: from _colorize import can_colorize, ANSIColors  # type: ignore[import-not-found]",
          "13: from _pyrepl.console import InteractiveColoredConsole",
          "18: class AsyncIOInteractiveConsole(InteractiveColoredConsole):",
          "21:         super().__init__(locals, filename=\"<stdin>\")",
          "27:         global return_code",
          "31:             global return_code",
          "33:             global keyboard_interrupted",
          "36:             keyboard_interrupted = False",
          "41:             except SystemExit as se:",
          "42:                 return_code = se.code",
          "43:                 self.loop.stop()",
          "44:                 return",
          "46:                 keyboard_interrupted = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         try:",
          "59:             return future.result()",
          "62:         except BaseException:",
          "64:                 self.write(\"\\nKeyboardInterrupt\\n\")",
          "65:             else:",
          "66:                 self.showtraceback()",
          "",
          "[Removed Lines]",
          "60:         except SystemExit:",
          "61:             raise",
          "63:             if repl_future_interrupted:",
          "",
          "[Added Lines]",
          "67:         except SystemExit as se:",
          "68:             return_code = se.code",
          "69:             self.loop.stop()",
          "70:             return",
          "72:             if keyboard_interrupted:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: class REPLThread(threading.Thread):",
          "71:     def run(self):",
          "72:         try:",
          "73:             banner = (",
          "74:                 f'asyncio REPL {sys.version} on {sys.platform}\\n'",
          "75:                 f'Use \"await\" directly instead of \"asyncio.run()\".\\n'",
          "76:                 f'Type \"help\", \"copyright\", \"credits\" or \"license\" '",
          "77:                 f'for more information.\\n'",
          "79:             )",
          "84:         finally:",
          "85:             warnings.filterwarnings(",
          "86:                 'ignore',",
          "",
          "[Removed Lines]",
          "78:                 f'{getattr(sys, \"ps1\", \">>> \")}import asyncio'",
          "81:             console.interact(",
          "82:                 banner=banner,",
          "83:                 exitmsg='exiting asyncio REPL...')",
          "",
          "[Added Lines]",
          "81:         global return_code",
          "91:             console.write(banner)",
          "93:             if startup_path := os.getenv(\"PYTHONSTARTUP\"):",
          "94:                 import tokenize",
          "95:                 with tokenize.open(startup_path) as f:",
          "96:                     startup_code = compile(f.read(), startup_path, \"exec\")",
          "97:                     exec(startup_code, console.locals)",
          "99:             ps1 = getattr(sys, \"ps1\", \">>> \")",
          "100:             if can_colorize():",
          "101:                 ps1 = f\"{ANSIColors.BOLD_MAGENTA}{ps1}{ANSIColors.RESET}\"",
          "102:             console.write(f\"{ps1}import asyncio\\n\")",
          "104:             try:",
          "105:                 import errno",
          "106:                 if os.getenv(\"PYTHON_BASIC_REPL\"):",
          "107:                     raise RuntimeError(\"user environment requested basic REPL\")",
          "108:                 if not os.isatty(sys.stdin.fileno()):",
          "109:                     raise OSError(errno.ENOTTY, \"tty required\", \"stdin\")",
          "111:                 # This import will fail on operating systems with no termios.",
          "112:                 from _pyrepl.simple_interact import (",
          "113:                     check,",
          "114:                     run_multiline_interactive_console,",
          "115:                 )",
          "116:                 if err := check():",
          "117:                     raise RuntimeError(err)",
          "118:             except Exception as e:",
          "119:                 console.interact(banner=\"\", exitmsg=exit_message)",
          "120:             else:",
          "121:                 try:",
          "122:                     run_multiline_interactive_console(console=console)",
          "123:                 except SystemExit:",
          "124:                     # expected via the `exit` and `quit` commands",
          "125:                     pass",
          "126:                 except BaseException:",
          "127:                     # unexpected issue",
          "128:                     console.showtraceback()",
          "129:                     console.write(\"Internal error, \")",
          "130:                     return_code = 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93: if __name__ == '__main__':",
          "94:     loop = asyncio.new_event_loop()",
          "95:     asyncio.set_event_loop(loop)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     CAN_USE_PYREPL = True",
          "143:     return_code = 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:     console = AsyncIOInteractiveConsole(repl_locals, loop)",
          "105:     repl_future = None",
          "108:     try:",
          "109:         import readline  # NoQA",
          "",
          "[Removed Lines]",
          "106:     repl_future_interrupted = False",
          "",
          "[Added Lines]",
          "156:     keyboard_interrupted = False",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:                 completer = rlcompleter.Completer(console.locals)",
          "127:                 readline.set_completer(completer.complete)",
          "130:     repl_thread.daemon = True",
          "131:     repl_thread.start()",
          "",
          "[Removed Lines]",
          "129:     repl_thread = REPLThread()",
          "",
          "[Added Lines]",
          "179:     repl_thread = REPLThread(name=\"Interactive thread\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "134:         try:",
          "135:             loop.run_forever()",
          "136:         except KeyboardInterrupt:",
          "137:             if repl_future and not repl_future.done():",
          "138:                 repl_future.cancel()",
          "140:             continue",
          "141:         else:",
          "142:             break",
          "",
          "[Removed Lines]",
          "139:                 repl_future_interrupted = True",
          "",
          "[Added Lines]",
          "187:             keyboard_interrupted = True",
          "194:     console.write('exiting asyncio REPL...\\n')",
          "195:     sys.exit(return_code)",
          "",
          "---------------"
        ],
        "Lib/test/test_pyrepl/test_interact.py||Lib/test/test_pyrepl/test_interact.py": [
          "File: Lib/test/test_pyrepl/test_interact.py -> Lib/test/test_pyrepl/test_interact.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from test.support import force_not_colorized",
          "12: class TestSimpleInteract(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "9: from _pyrepl.simple_interact import InteractiveColoredConsole",
          "",
          "[Added Lines]",
          "9: from _pyrepl.console import InteractiveColoredConsole",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb5d19440b8056bd2b272239a2c0b1c2063b3af6",
      "candidate_info": {
        "commit_hash": "bb5d19440b8056bd2b272239a2c0b1c2063b3af6",
        "repo": "python/cpython",
        "commit_url": "https://github.com/python/cpython/commit/bb5d19440b8056bd2b272239a2c0b1c2063b3af6",
        "files": [
          "Lib/test/test_pyrepl/test_pyrepl.py"
        ],
        "message": "[3.13] gh-120635: Avoid leaking processes in test_pyrepl (GH-120676) (#120741)\n\ngh-120635: Avoid leaking processes in test_pyrepl (GH-120676)\n\nIf the child process takes longer than SHORT_TIMEOUT seconds to\ncomplete, kill the process but then wait until it completes with no\ntimeout to not leak child processes.\n(cherry picked from commit 0f3e36454d754026d6c510053ff1e4b22ae80cd9)\n\nCo-authored-by: Victor Stinner <vstinner@python.org>",
        "before_after_code_files": [
          "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/AcreetionOS-Linux/python/pull/2"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Lib/test/test_pyrepl/test_pyrepl.py||Lib/test/test_pyrepl/test_pyrepl.py": [
          "File: Lib/test/test_pyrepl/test_pyrepl.py -> Lib/test/test_pyrepl/test_pyrepl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "890:             exit_code = process.wait(timeout=SHORT_TIMEOUT)",
          "891:         except subprocess.TimeoutExpired:",
          "892:             process.kill()",
          "894:         return \"\\n\".join(output), exit_code",
          "",
          "[Removed Lines]",
          "893:             exit_code = process.returncode",
          "",
          "[Added Lines]",
          "893:             exit_code = process.wait()",
          "",
          "---------------"
        ]
      }
    }
  ]
}