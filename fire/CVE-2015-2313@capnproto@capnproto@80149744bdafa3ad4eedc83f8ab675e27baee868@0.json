{
  "cve_id": "CVE-2015-2313",
  "cve_desc": "Sandstorm Cap'n Proto before 0.4.1.1 and 0.5.x before 0.5.1.2, when an application invokes the totalSize method on an object reader, allows remote peers to cause a denial of service (CPU consumption) via a crafted small message, which triggers a \"tight\" for loop.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-2312.",
  "repo": "capnproto/capnproto",
  "patch_hash": "80149744bdafa3ad4eedc83f8ab675e27baee868",
  "patch_info": {
    "commit_hash": "80149744bdafa3ad4eedc83f8ab675e27baee868",
    "repo": "capnproto/capnproto",
    "commit_url": "https://github.com/capnproto/capnproto/commit/80149744bdafa3ad4eedc83f8ab675e27baee868",
    "files": [
      "c++/src/capnp/encoding-test.c++",
      "c++/src/capnp/layout.c++"
    ],
    "message": "SECURITY: Additional CPU amplification case.\n\nUnfortunately, commit 104870608fde3c698483fdef6b97f093fc15685d missed a case of CPU amplification via struct lists with zero-sized elements.\n\nSee advisory: https://github.com/sandstorm-io/capnproto/blob/master/security-advisories/2015-03-05-0-c++-addl-cpu-amplification.md",
    "before_after_code_files": [
      "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
      "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
    ]
  },
  "patch_diff": {
    "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
      "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
      "--- Hunk 1 ---",
      "[Context before]",
      "1427: }",
      "1429: TEST(Encoding, EmptyStructListAmplification) {",
      "1434:   auto segments = builder.getSegmentsForOutput();",
      "1438:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
      "1441: }",
      "1443: TEST(Encoding, Constants) {",
      "",
      "[Removed Lines]",
      "1430:   MallocMessageBuilder builder;",
      "1431:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
      "1432:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
      "1435:   EXPECT_EQ(1, segments.size());",
      "1436:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
      "1439:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
      "1440:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
      "",
      "[Added Lines]",
      "1430:   MallocMessageBuilder builder(1024);",
      "1431:   auto listList = builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
      "1432:       .initAs<List<List<test::TestEmptyStruct>>>(500);",
      "1434:   for (uint i = 0; i < listList.size(); i++) {",
      "1435:     listList.init(i, 1u << 28);",
      "1436:   }",
      "1439:   ASSERT_EQ(1, segments.size());",
      "1442:   auto root = reader.getRoot<test::TestAnyPointer>();",
      "1443:   auto listListReader = root.getAnyPointerField().getAs<List<List<TestAllTypes>>>();",
      "1444:   EXPECT_NONFATAL_FAILURE(listListReader[0]);",
      "1445:   EXPECT_NONFATAL_FAILURE(listListReader[10]);",
      "1447:   EXPECT_EQ(segments[0].size() - 1, root.totalSize().wordCount);",
      "",
      "---------------"
    ],
    "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
      "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
      "--- Hunk 1 ---",
      "[Context before]",
      "555:             WordCount dataSize = elementTag->structRef.dataSize.get();",
      "556:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
      "559:             uint count = elementTag->inlineCompositeListElementCount() / ELEMENTS;",
      "566:               }",
      "567:             }",
      "",
      "[Removed Lines]",
      "558:             word* pos = ptr + POINTER_SIZE_IN_WORDS;",
      "560:             for (uint i = 0; i < count; i++) {",
      "561:               pos += dataSize;",
      "563:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
      "564:                 zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
      "565:                 pos += POINTER_SIZE_IN_WORDS;",
      "",
      "[Added Lines]",
      "559:             if (pointerCount > 0 * POINTERS) {",
      "560:               word* pos = ptr + POINTER_SIZE_IN_WORDS;",
      "561:               for (uint i = 0; i < count; i++) {",
      "562:                 pos += dataSize;",
      "564:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
      "565:                   zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
      "566:                   pos += POINTER_SIZE_IN_WORDS;",
      "567:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "680:               return result;",
      "681:             }",
      "685:             const WirePointer* elementTag = reinterpret_cast<const WirePointer*>(ptr);",
      "686:             ElementCount count = elementTag->inlineCompositeListElementCount();",
      "",
      "[Removed Lines]",
      "683:             result.wordCount += wordCount + POINTER_SIZE_IN_WORDS;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "690:               return result;",
      "691:             }",
      "695:                        \"Struct list pointer's elements overran size.\") {",
      "696:               return result;",
      "697:             }",
      "699:             WordCount dataSize = elementTag->structRef.dataSize.get();",
      "700:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
      "710:               }",
      "711:             }",
      "712:             break;",
      "",
      "[Removed Lines]",
      "693:             KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *",
      "694:                        ElementCount64(count) <= wordCount,",
      "702:             const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
      "703:             for (uint i = 0; i < count / ELEMENTS; i++) {",
      "704:               pos += dataSize;",
      "706:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
      "707:                 result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
      "708:                                     nestingLimit);",
      "709:                 pos += POINTER_SIZE_IN_WORDS;",
      "",
      "[Added Lines]",
      "693:             auto actualSize = elementTag->structRef.wordSize() / ELEMENTS * ElementCount64(count);",
      "694:             KJ_REQUIRE(actualSize <= wordCount,",
      "701:             result.wordCount += actualSize + POINTER_SIZE_IN_WORDS;",
      "706:             if (pointerCount > 0 * POINTERS) {",
      "707:               const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
      "708:               for (uint i = 0; i < count / ELEMENTS; i++) {",
      "709:                 pos += dataSize;",
      "711:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
      "712:                   result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
      "713:                                       nestingLimit);",
      "714:                   pos += POINTER_SIZE_IN_WORDS;",
      "715:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5413038b464c7940a302e1f7c82894389567534b",
      "candidate_info": {
        "commit_hash": "5413038b464c7940a302e1f7c82894389567534b",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/5413038b464c7940a302e1f7c82894389567534b",
        "files": [
          "c++/src/capnp/any.h",
          "c++/src/capnp/arena.c++",
          "c++/src/capnp/arena.h",
          "c++/src/capnp/capability.c++",
          "c++/src/capnp/capability.h",
          "c++/src/capnp/dynamic.c++",
          "c++/src/capnp/dynamic.h",
          "c++/src/capnp/layout-test.c++",
          "c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h",
          "c++/src/capnp/message.c++",
          "c++/src/capnp/message.h",
          "c++/src/capnp/orphan.h",
          "c++/src/capnp/rpc-test.c++",
          "c++/src/capnp/rpc-twoparty.c++",
          "c++/src/capnp/rpc.c++",
          "c++/src/capnp/rpc.h"
        ],
        "message": "Refactor how messages are imbued with a capability table.\n\n**The problem**\n\nThe methods MessageReader::initCapTable() and MessageBuilder::getCapTable() always felt rather hacky. initCapTable() in particular feels like something that should be handled by the constructor. However, in practice, the cap table is often initialized based on a table encoded within the message itself. That is, an RPC message contains a \"payload\" which includes both the application-level message structure and a table of capabilities. The cap table has to be processed first, then initCapTable() is called on the overall message, before the application structure can safely be read.\n\nThe really weird part about this is that even though the cap table only applies to one branch of the message (the payload), it is set on the *whole* MessageReader. This implies, for example, that it would be impossible to have a message that contains multiple payloads. We haven't had any need for such a thing, but an implemnetation that has such artificial limitations feels very wrong.\n\nMessageBuilder has similar issues going in the opposite direction.\n\nAll of this ugliness potentially gets worse when we introduce \"membranes\". We want a way to intercept capabilities as they are being read from or written to an RPC payload. Currently, the only plausible way to do that is, again, to apply a transformation to all capabilities in the message. In practice it seems like this would work out OK, but it again feels wrong -- we really want to take a single Reader or Builder and \"wrap\" it so that transformations are applied on capabilities read/written through it.\n\n**The solution**\n\nThis change fixes the problem by adding a new pointer to each struct/list Reader/Builder that tracks the current cap table. So, now a Reader or Builder for a particular sub-object can be \"imbued\" with a cap table without affecting any other existing Readers/Builders pointing into the same message. The cap table is inherited by child Readers/Builders obtained through the original one.\n\nThis approach matches up nicely with membranes, which should make their implementation nice and clean.\n\nThis change unfortunately means that Readers and Builders are now bigger, possibly with some performance impact.",
        "before_after_code_files": [
          "c++/src/capnp/any.h||c++/src/capnp/any.h",
          "c++/src/capnp/arena.c++||c++/src/capnp/arena.c++",
          "c++/src/capnp/arena.h||c++/src/capnp/arena.h",
          "c++/src/capnp/capability.c++||c++/src/capnp/capability.c++",
          "c++/src/capnp/capability.h||c++/src/capnp/capability.h",
          "c++/src/capnp/dynamic.c++||c++/src/capnp/dynamic.c++",
          "c++/src/capnp/dynamic.h||c++/src/capnp/dynamic.h",
          "c++/src/capnp/layout-test.c++||c++/src/capnp/layout-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++",
          "c++/src/capnp/layout.h||c++/src/capnp/layout.h",
          "c++/src/capnp/message.c++||c++/src/capnp/message.c++",
          "c++/src/capnp/message.h||c++/src/capnp/message.h",
          "c++/src/capnp/orphan.h||c++/src/capnp/orphan.h",
          "c++/src/capnp/rpc-test.c++||c++/src/capnp/rpc-test.c++",
          "c++/src/capnp/rpc-twoparty.c++||c++/src/capnp/rpc-twoparty.c++",
          "c++/src/capnp/rpc.c++||c++/src/capnp/rpc.c++",
          "c++/src/capnp/rpc.h||c++/src/capnp/rpc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/any.h||c++/src/capnp/any.h": [
          "File: c++/src/capnp/any.h -> c++/src/capnp/any.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     friend struct AnyPointer;",
          "139:     friend class Orphanage;",
          "140:     friend class CapReaderContext;",
          "141:   };",
          "143:   class Builder {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     friend class _::PointerHelpers<AnyPointer>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:     _::PointerBuilder builder;",
          "255:     friend class Orphanage;",
          "256:     friend class CapBuilderContext;",
          "257:   };",
          "259: #if !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     friend class _::PointerHelpers<AnyPointer>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "888:   static inline Orphan<AnyPointer> disown(PointerBuilder builder) {",
          "889:     return Orphan<AnyPointer>(builder.disown());",
          "890:   }",
          "891: };",
          "893: template <>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "893:   static inline _::PointerReader getInternalReader(const AnyPointer::Reader& reader) {",
          "894:     return reader.reader;",
          "895:   }",
          "896:   static inline _::PointerBuilder getInternalBuilder(AnyPointer::Builder&& builder) {",
          "897:     return builder.builder;",
          "898:   }",
          "",
          "---------------"
        ],
        "c++/src/capnp/arena.c++||c++/src/capnp/arena.c++": [
          "File: c++/src/capnp/arena.c++ -> c++/src/capnp/arena.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   }",
          "109: }",
          "123: BuilderArena::BuilderArena(MessageBuilder* message)",
          "",
          "[Removed Lines]",
          "111: #if !CAPNP_LITE",
          "112: kj::Maybe<kj::Own<ClientHook>> ReaderArena::extractCap(uint index) {",
          "113:   if (index < capTable.size()) {",
          "114:     return capTable[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "115:   } else {",
          "116:     return nullptr;",
          "117:   }",
          "118: }",
          "119: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: }",
          "296: #if !CAPNP_LITE",
          "298:   if (index < capTable.size()) {",
          "299:     return capTable[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "300:   } else {",
          "",
          "[Removed Lines]",
          "297: kj::Maybe<kj::Own<ClientHook>> BuilderArena::extractCap(uint index) {",
          "",
          "[Added Lines]",
          "287: kj::Maybe<kj::Own<ClientHook>> BuilderArena::LocalCapTable::extractCap(uint index) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:   }",
          "303: }",
          "308:   uint result = capTable.size();",
          "309:   capTable.add(kj::mv(cap));",
          "310:   return result;",
          "311: }",
          "314:   KJ_ASSERT(index < capTable.size(), \"Invalid capability descriptor in message.\") {",
          "315:     return;",
          "316:   }",
          "",
          "[Removed Lines]",
          "305: uint BuilderArena::injectCap(kj::Own<ClientHook>&& cap) {",
          "313: void BuilderArena::dropCap(uint index) {",
          "",
          "[Added Lines]",
          "295: uint BuilderArena::LocalCapTable::injectCap(kj::Own<ClientHook>&& cap) {",
          "301: void BuilderArena::LocalCapTable::dropCap(uint index) {",
          "",
          "---------------"
        ],
        "c++/src/capnp/arena.h||c++/src/capnp/arena.h": [
          "File: c++/src/capnp/arena.h -> c++/src/capnp/arena.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: };",
          "215: class ReaderArena final: public Arena {",
          "",
          "[Removed Lines]",
          "209: #if !CAPNP_LITE",
          "210:   virtual kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) = 0;",
          "212: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   ~ReaderArena() noexcept(false);",
          "219:   KJ_DISALLOW_COPY(ReaderArena);",
          "231:   SegmentReader* tryGetSegment(SegmentId id) override;",
          "232:   void reportReadLimitReached() override;",
          "237: private:",
          "238:   MessageReader* message;",
          "239:   ReadLimiter readLimiter;",
          "245:   SegmentReader segment0;",
          "",
          "[Removed Lines]",
          "221: #if !CAPNP_LITE",
          "222:   inline void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable) {",
          "226:     this->capTable = kj::mv(capTable);",
          "227:   }",
          "228: #endif  // !CAPNP_LITE",
          "233: #if !CAPNP_LITE",
          "234:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index);",
          "235: #endif  // !CAPNP_LITE",
          "240: #if !CAPNP_LITE",
          "241:   kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable;",
          "242: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274: #if !CAPNP_LITE",
          "277: #endif  // !CAPNP_LITE",
          "279:   SegmentBuilder* getSegment(SegmentId id);",
          "",
          "[Removed Lines]",
          "275:   inline kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() { return capTable; }",
          "",
          "[Added Lines]",
          "255:   inline CapTableBuilder* getLocalCapTable() {",
          "269:     return &localCapTable;",
          "270:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315:   SegmentReader* tryGetSegment(SegmentId id) override;",
          "316:   void reportReadLimitReached() override;",
          "321: private:",
          "322:   MessageBuilder* message;",
          "323:   ReadLimiter dummyLimiter;",
          "324: #if !CAPNP_LITE",
          "326: #endif  // !CAPNP_LITE",
          "328:   SegmentBuilder segment0;",
          "",
          "[Removed Lines]",
          "304: #if !CAPNP_LITE",
          "305:   uint injectCap(kj::Own<ClientHook>&& cap);",
          "309: #endif  // !CAPNP_LITE",
          "311:   void dropCap(uint index);",
          "317: #if !CAPNP_LITE",
          "318:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index);",
          "319: #endif  // !CAPNP_LITE",
          "325:   kj::Vector<kj::Maybe<kj::Own<ClientHook>>> capTable;",
          "",
          "[Added Lines]",
          "307:   class LocalCapTable: public CapTableBuilder {",
          "308:   public:",
          "309:     kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override;",
          "310:     uint injectCap(kj::Own<ClientHook>&& cap) override;",
          "311:     void dropCap(uint index) override;",
          "313:   private:",
          "314:     kj::Vector<kj::Maybe<kj::Own<ClientHook>>> capTable;",
          "315:   };",
          "317:   LocalCapTable localCapTable;",
          "",
          "---------------"
        ],
        "c++/src/capnp/capability.c++||c++/src/capnp/capability.c++": [
          "File: c++/src/capnp/capability.c++ -> c++/src/capnp/capability.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return nullptr;",
          "66: }",
          "75: Capability::Client::Client(decltype(nullptr))",
          "",
          "[Removed Lines]",
          "68: void MessageReader::initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable) {",
          "69:   setGlobalBrokenCapFactoryForLayoutCpp(brokenCapFactory);",
          "70:   arena()->initCapTable(kj::mv(capTable));",
          "71: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:   return Request<AnyPointer, AnyPointer>(root, kj::mv(hook));",
          "656: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: ReaderCapabilityTable::ReaderCapabilityTable(",
          "656:     kj::Array<kj::Maybe<kj::Own<ClientHook>>> table)",
          "657:     : table(kj::mv(table)) {",
          "658:   setGlobalBrokenCapFactoryForLayoutCpp(brokenCapFactory);",
          "659: }",
          "661: kj::Maybe<kj::Own<ClientHook>> ReaderCapabilityTable::extractCap(uint index) {",
          "662:   if (index < table.size()) {",
          "663:     return table[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "664:   } else {",
          "665:     return nullptr;",
          "666:   }",
          "667: }",
          "669: BuilderCapabilityTable::BuilderCapabilityTable() {",
          "670:   setGlobalBrokenCapFactoryForLayoutCpp(brokenCapFactory);",
          "671: }",
          "673: kj::Maybe<kj::Own<ClientHook>> BuilderCapabilityTable::extractCap(uint index) {",
          "674:   if (index < table.size()) {",
          "675:     return table[index].map([](kj::Own<ClientHook>& cap) { return cap->addRef(); });",
          "676:   } else {",
          "677:     return nullptr;",
          "678:   }",
          "679: }",
          "681: uint BuilderCapabilityTable::injectCap(kj::Own<ClientHook>&& cap) {",
          "682:   uint result = table.size();",
          "683:   table.add(kj::mv(cap));",
          "684:   return result;",
          "685: }",
          "687: void BuilderCapabilityTable::dropCap(uint index) {",
          "688:   KJ_ASSERT(index < table.size(), \"Invalid capability descriptor in message.\") {",
          "689:     return;",
          "690:   }",
          "691:   table[index] = nullptr;",
          "692: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/capability.h||c++/src/capnp/capability.h": [
          "File: c++/src/capnp/capability.h -> c++/src/capnp/capability.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #endif",
          "33: #include <kj/async.h>",
          "34: #include \"any.h\"",
          "35: #include \"pointer-helpers.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <kj/vector.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363: namespace _ {  // private",
          "365: class CapabilityServerSetBase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: class ReaderCapabilityTable: private _::CapTableReader {",
          "379: public:",
          "380:   explicit ReaderCapabilityTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> table);",
          "381:   KJ_DISALLOW_COPY(ReaderCapabilityTable);",
          "383:   template <typename T>",
          "384:   T imbue(T reader);",
          "388: private:",
          "389:   kj::Array<kj::Maybe<kj::Own<ClientHook>>> table;",
          "391:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override;",
          "392: };",
          "394: class BuilderCapabilityTable: private _::CapTableBuilder {",
          "400: public:",
          "401:   BuilderCapabilityTable();",
          "402:   KJ_DISALLOW_COPY(BuilderCapabilityTable);",
          "404:   inline kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getTable() { return table; }",
          "406:   template <typename T>",
          "407:   T imbue(T builder);",
          "411: private:",
          "412:   kj::Vector<kj::Maybe<kj::Own<ClientHook>>> table;",
          "414:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override;",
          "415:   uint injectCap(kj::Own<ClientHook>&& cap) override;",
          "416:   void dropCap(uint index) override;",
          "417: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "766:   return Client(thisHook->addRef());",
          "767: }",
          "769: template <typename T>",
          "770: typename T::Client CapabilityServerSet<T>::add(kj::Own<typename T::Server>&& server) {",
          "771:   void* ptr = reinterpret_cast<void*>(server.get());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827: template <typename T>",
          "828: T ReaderCapabilityTable::imbue(T reader) {",
          "829:   return T(_::PointerHelpers<FromReader<T>>::getInternalReader(reader).imbue(this));",
          "830: }",
          "832: template <typename T>",
          "833: T BuilderCapabilityTable::imbue(T builder) {",
          "834:   return T(_::PointerHelpers<FromBuilder<T>>::getInternalBuilder(kj::mv(builder)).imbue(this));",
          "835: }",
          "",
          "---------------"
        ],
        "c++/src/capnp/dynamic.c++||c++/src/capnp/dynamic.c++": [
          "File: c++/src/capnp/dynamic.c++ -> c++/src/capnp/dynamic.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1940: Orphan<DynamicStruct> Orphanage::newOrphan(StructSchema schema) const {",
          "1941:   return Orphan<DynamicStruct>(",
          "1943: }",
          "1945: Orphan<DynamicList> Orphanage::newOrphan(ListSchema schema, uint size) const {",
          "1946:   if (schema.whichElementType() == schema::Type::STRUCT) {",
          "1947:     return Orphan<DynamicList>(schema, _::OrphanBuilder::initStructList(",
          "1949:   } else {",
          "1950:     return Orphan<DynamicList>(schema, _::OrphanBuilder::initList(",
          "1952:   }",
          "1953: }",
          "",
          "[Removed Lines]",
          "1942:       schema, _::OrphanBuilder::initStruct(arena, structSizeFromSchema(schema)));",
          "1948:         arena, size * ELEMENTS, structSizeFromSchema(schema.getStructElementType())));",
          "1951:         arena, size * ELEMENTS, elementSizeFor(schema.whichElementType())));",
          "",
          "[Added Lines]",
          "1942:       schema, _::OrphanBuilder::initStruct(arena, capTable, structSizeFromSchema(schema)));",
          "1948:         arena, capTable, size * ELEMENTS, structSizeFromSchema(schema.getStructElementType())));",
          "1951:         arena, capTable, size * ELEMENTS, elementSizeFor(schema.whichElementType())));",
          "",
          "---------------"
        ],
        "c++/src/capnp/dynamic.h||c++/src/capnp/dynamic.h": [
          "File: c++/src/capnp/dynamic.h -> c++/src/capnp/dynamic.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: inline Orphan<DynamicStruct> Orphanage::newOrphanCopy<DynamicStruct::Reader>(",
          "1045:     const DynamicStruct::Reader& copyFrom) const {",
          "1046:   return Orphan<DynamicStruct>(",
          "1048: }",
          "1050: template <>",
          "1051: inline Orphan<DynamicList> Orphanage::newOrphanCopy<DynamicList::Reader>(",
          "1052:     const DynamicList::Reader& copyFrom) const {",
          "1054: }",
          "1056: template <>",
          "1057: inline Orphan<DynamicCapability> Orphanage::newOrphanCopy<DynamicCapability::Client>(",
          "1058:     DynamicCapability::Client& copyFrom) const {",
          "1059:   return Orphan<DynamicCapability>(",
          "1061: }",
          "1063: template <>",
          "",
          "[Removed Lines]",
          "1047:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, copyFrom.reader));",
          "1053:   return Orphan<DynamicList>(copyFrom.getSchema(), _::OrphanBuilder::copy(arena, copyFrom.reader));",
          "1060:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, copyFrom.hook->addRef()));",
          "",
          "[Added Lines]",
          "1047:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, capTable, copyFrom.reader));",
          "1053:   return Orphan<DynamicList>(copyFrom.getSchema(),",
          "1054:       _::OrphanBuilder::copy(arena, capTable, copyFrom.reader));",
          "1061:       copyFrom.getSchema(), _::OrphanBuilder::copy(arena, capTable, copyFrom.hook->addRef()));",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout-test.c++||c++/src/capnp/layout-test.c++": [
          "File: c++/src/capnp/layout-test.c++ -> c++/src/capnp/layout-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:   SegmentBuilder* segment = allocation.segment;",
          "283:   word* rootLocation = allocation.words;",
          "286:       .initStruct(StructSize(2 * WORDS, 4 * POINTERS));",
          "287:   setupStruct(builder);",
          "",
          "[Removed Lines]",
          "285:   StructBuilder builder = PointerBuilder::getRoot(segment, rootLocation)",
          "",
          "[Added Lines]",
          "285:   StructBuilder builder = PointerBuilder::getRoot(segment, nullptr, rootLocation)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:   checkStruct(builder);",
          "310:   checkStruct(builder.asReader());",
          "311:   checkStruct(PointerReader::getRootUnchecked(segment->getStartPtr()).getStruct(nullptr));",
          "313: }",
          "315: TEST(WireFormat, StructRoundTrip_OneSegmentPerAllocation) {",
          "",
          "[Removed Lines]",
          "312:   checkStruct(PointerReader::getRoot(segment, segment->getStartPtr(), 4).getStruct(nullptr));",
          "",
          "[Added Lines]",
          "312:   checkStruct(PointerReader::getRoot(segment, nullptr, segment->getStartPtr(), 4)",
          "313:       .getStruct(nullptr));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:   SegmentBuilder* segment = allocation.segment;",
          "320:   word* rootLocation = allocation.words;",
          "323:       .initStruct(StructSize(2 * WORDS, 4 * POINTERS));",
          "324:   setupStruct(builder);",
          "",
          "[Removed Lines]",
          "322:   StructBuilder builder = PointerBuilder::getRoot(segment, rootLocation)",
          "",
          "[Added Lines]",
          "323:   StructBuilder builder = PointerBuilder::getRoot(segment, nullptr, rootLocation)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "348:   checkStruct(builder);",
          "349:   checkStruct(builder.asReader());",
          "351: }",
          "353: TEST(WireFormat, StructRoundTrip_MultipleSegmentsWithMultipleAllocations) {",
          "",
          "[Removed Lines]",
          "350:   checkStruct(PointerReader::getRoot(segment, segment->getStartPtr(), 4).getStruct(nullptr));",
          "",
          "[Added Lines]",
          "351:   checkStruct(PointerReader::getRoot(segment, nullptr, segment->getStartPtr(), 4)",
          "352:       .getStruct(nullptr));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "357:   SegmentBuilder* segment = allocation.segment;",
          "358:   word* rootLocation = allocation.words;",
          "361:       .initStruct(StructSize(2 * WORDS, 4 * POINTERS));",
          "362:   setupStruct(builder);",
          "",
          "[Removed Lines]",
          "360:   StructBuilder builder = PointerBuilder::getRoot(segment, rootLocation)",
          "",
          "[Added Lines]",
          "362:   StructBuilder builder = PointerBuilder::getRoot(segment, nullptr, rootLocation)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "377:   checkStruct(builder);",
          "378:   checkStruct(builder.asReader());",
          "380: }",
          "382: inline bool isNan(float f) { return f != f; }",
          "",
          "[Removed Lines]",
          "379:   checkStruct(PointerReader::getRoot(segment, segment->getStartPtr(), 4).getStruct(nullptr));",
          "",
          "[Added Lines]",
          "381:   checkStruct(PointerReader::getRoot(segment, nullptr, segment->getStartPtr(), 4)",
          "382:       .getStruct(nullptr));",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   }",
          "316:   static KJ_ALWAYS_INLINE(word* allocate(",
          "318:       WirePointer::Kind kind, BuilderArena* orphanArena)) {",
          "",
          "[Removed Lines]",
          "317:       WirePointer*& ref, SegmentBuilder*& segment, WordCount amount,",
          "",
          "[Added Lines]",
          "317:       WirePointer*& ref, SegmentBuilder*& segment, CapTableBuilder* capTable, WordCount amount,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:     if (orphanArena == nullptr) {",
          "342:       if (amount == 0 * WORDS && kind == WirePointer::STRUCT) {",
          "",
          "[Removed Lines]",
          "340:       if (!ref->isNull()) zeroObject(segment, ref);",
          "",
          "[Added Lines]",
          "340:       if (!ref->isNull()) zeroObject(segment, capTable, ref);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "467:   static void zeroObject(SegmentBuilder* segment, WirePointer* ref) {",
          "",
          "[Added Lines]",
          "467:   static void zeroObject(SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:     switch (ref->kind()) {",
          "475:       case WirePointer::STRUCT:",
          "476:       case WirePointer::LIST:",
          "478:         break;",
          "479:       case WirePointer::FAR: {",
          "480:         segment = segment->getArena()->getSegment(ref->farRef.segmentId.get());",
          "",
          "[Removed Lines]",
          "477:         zeroObject(segment, ref, ref->target());",
          "",
          "[Added Lines]",
          "477:         zeroObject(segment, capTable, ref, ref->target());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:           if (ref->isDoubleFar()) {",
          "486:             segment = segment->getArena()->getSegment(pad->farRef.segmentId.get());",
          "487:             if (segment->isWritable()) {",
          "489:             }",
          "490:             memset(pad, 0, sizeof(WirePointer) * 2);",
          "491:           } else {",
          "493:             memset(pad, 0, sizeof(WirePointer));",
          "494:           }",
          "495:         }",
          "",
          "[Removed Lines]",
          "488:               zeroObject(segment, pad + 1, segment->getPtrUnchecked(pad->farPositionInSegment()));",
          "492:             zeroObject(segment, pad);",
          "",
          "[Added Lines]",
          "488:               zeroObject(segment, capTable,",
          "489:                          pad + 1, segment->getPtrUnchecked(pad->farPositionInSegment()));",
          "493:             zeroObject(segment, capTable, pad);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "500: #if CAPNP_LITE",
          "501:           KJ_FAIL_ASSERT(\"Capability encountered in builder in lite mode?\") { break; }",
          "502: #else  // CAPNP_LINE",
          "504: #endif  // CAPNP_LITE, else",
          "505:         } else {",
          "506:           KJ_FAIL_REQUIRE(\"Unknown pointer type.\") { break; }",
          "",
          "[Removed Lines]",
          "503:           segment->getArena()->dropCap(ref->capRef.index.get());",
          "",
          "[Added Lines]",
          "504:           capTable->dropCap(ref->capRef.index.get());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "509:     }",
          "510:   }",
          "514:     if (!segment->isWritable()) return;",
          "",
          "[Removed Lines]",
          "512:   static void zeroObject(SegmentBuilder* segment, WirePointer* tag, word* ptr) {",
          "",
          "[Added Lines]",
          "513:   static void zeroObject(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "514:                          WirePointer* tag, word* ptr) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "519:             reinterpret_cast<WirePointer*>(ptr + tag->structRef.dataSize.get());",
          "520:         uint count = tag->structRef.ptrCount.get() / POINTERS;",
          "521:         for (uint i = 0; i < count; i++) {",
          "523:         }",
          "524:         memset(ptr, 0, tag->structRef.wordSize() * BYTES_PER_WORD / BYTES);",
          "525:         break;",
          "",
          "[Removed Lines]",
          "522:           zeroObject(segment, pointerSection + i);",
          "",
          "[Added Lines]",
          "524:           zeroObject(segment, capTable, pointerSection + i);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "542:           case ElementSize::POINTER: {",
          "543:             uint count = tag->listRef.elementCount() / ELEMENTS;",
          "544:             for (uint i = 0; i < count; i++) {",
          "546:             }",
          "547:             memset(ptr, 0, POINTER_SIZE_IN_WORDS * count * BYTES_PER_WORD / BYTES);",
          "548:             break;",
          "",
          "[Removed Lines]",
          "545:               zeroObject(segment, reinterpret_cast<WirePointer*>(ptr) + i);",
          "",
          "[Added Lines]",
          "547:               zeroObject(segment, capTable, reinterpret_cast<WirePointer*>(ptr) + i);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "562:                 pos += dataSize;",
          "564:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "566:                   pos += POINTER_SIZE_IN_WORDS;",
          "567:                 }",
          "568:               }",
          "",
          "[Removed Lines]",
          "565:                   zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "",
          "[Added Lines]",
          "567:                   zeroObject(segment, capTable, reinterpret_cast<WirePointer*>(pos));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "743:   static KJ_ALWAYS_INLINE(",
          "745:                       WordCount dataSize, WirePointerCount pointerCount)) {",
          "746:     memcpy(dst, src, dataSize * BYTES_PER_WORD / BYTES);",
          "",
          "[Removed Lines]",
          "744:       void copyStruct(SegmentBuilder* segment, word* dst, const word* src,",
          "",
          "[Added Lines]",
          "746:       void copyStruct(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "747:                       word* dst, const word* src,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "751:     for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "752:       SegmentBuilder* subSegment = segment;",
          "753:       WirePointer* dstRef = dstRefs + i;",
          "755:     }",
          "756:   }",
          "758:   static word* copyMessage(",
          "762:     switch (src->kind()) {",
          "",
          "[Removed Lines]",
          "754:       copyMessage(subSegment, dstRef, srcRefs + i);",
          "759:       SegmentBuilder*& segment, WirePointer*& dst, const WirePointer* src) {",
          "",
          "[Added Lines]",
          "757:       copyMessage(subSegment, capTable, dstRef, srcRefs + i);",
          "762:       SegmentBuilder*& segment, CapTableBuilder* capTable,",
          "763:       WirePointer*& dst, const WirePointer* src) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "767:         } else {",
          "768:           const word* srcPtr = src->target();",
          "769:           word* dstPtr = allocate(",
          "773:                      src->structRef.ptrCount.get());",
          "775:           dst->structRef.set(src->structRef.dataSize.get(), src->structRef.ptrCount.get());",
          "",
          "[Removed Lines]",
          "770:               dst, segment, src->structRef.wordSize(), WirePointer::STRUCT, nullptr);",
          "772:           copyStruct(segment, dstPtr, srcPtr, src->structRef.dataSize.get(),",
          "",
          "[Added Lines]",
          "774:               dst, segment, capTable, src->structRef.wordSize(), WirePointer::STRUCT, nullptr);",
          "776:           copyStruct(segment, capTable, dstPtr, srcPtr, src->structRef.dataSize.get(),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "788:                 ElementCount64(src->listRef.elementCount()) *",
          "789:                 dataBitsPerElement(src->listRef.elementSize()));",
          "790:             const word* srcPtr = src->target();",
          "792:             memcpy(dstPtr, srcPtr, wordCount * BYTES_PER_WORD / BYTES);",
          "794:             dst->listRef.set(src->listRef.elementSize(), src->listRef.elementCount());",
          "",
          "[Removed Lines]",
          "791:             word* dstPtr = allocate(dst, segment, wordCount, WirePointer::LIST, nullptr);",
          "",
          "[Added Lines]",
          "795:             word* dstPtr = allocate(dst, segment, capTable, wordCount, WirePointer::LIST, nullptr);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "798:           case ElementSize::POINTER: {",
          "799:             const WirePointer* srcRefs = reinterpret_cast<const WirePointer*>(src->target());",
          "800:             WirePointer* dstRefs = reinterpret_cast<WirePointer*>(",
          "802:                     (1 * POINTERS / ELEMENTS) * WORDS_PER_POINTER,",
          "803:                     WirePointer::LIST, nullptr));",
          "",
          "[Removed Lines]",
          "801:                 allocate(dst, segment, src->listRef.elementCount() *",
          "",
          "[Added Lines]",
          "805:                 allocate(dst, segment, capTable, src->listRef.elementCount() *",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "806:             for (uint i = 0; i < n; i++) {",
          "807:               SegmentBuilder* subSegment = segment;",
          "808:               WirePointer* dstRef = dstRefs + i;",
          "810:             }",
          "812:             dst->listRef.set(ElementSize::POINTER, src->listRef.elementCount());",
          "",
          "[Removed Lines]",
          "809:               copyMessage(subSegment, dstRef, srcRefs + i);",
          "",
          "[Added Lines]",
          "813:               copyMessage(subSegment, capTable, dstRef, srcRefs + i);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "816:           case ElementSize::INLINE_COMPOSITE: {",
          "817:             const word* srcPtr = src->target();",
          "819:                 src->listRef.inlineCompositeWordCount() + POINTER_SIZE_IN_WORDS,",
          "820:                 WirePointer::LIST, nullptr);",
          "",
          "[Removed Lines]",
          "818:             word* dstPtr = allocate(dst, segment,",
          "",
          "[Added Lines]",
          "822:             word* dstPtr = allocate(dst, segment, capTable,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "833:             uint n = srcTag->inlineCompositeListElementCount() / ELEMENTS;",
          "834:             for (uint i = 0; i < n; i++) {",
          "836:                   srcTag->structRef.dataSize.get(), srcTag->structRef.ptrCount.get());",
          "837:               srcElement += srcTag->structRef.wordSize();",
          "838:               dstElement += srcTag->structRef.wordSize();",
          "",
          "[Removed Lines]",
          "835:               copyStruct(segment, dstElement, srcElement,",
          "",
          "[Added Lines]",
          "839:               copyStruct(segment, capTable, dstElement, srcElement,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "924:   static KJ_ALWAYS_INLINE(StructBuilder initStructPointer(",
          "926:       BuilderArena* orphanArena = nullptr)) {",
          "931:     ref->structRef.set(size);",
          "935:                          size.data * BITS_PER_WORD, size.pointers);",
          "936:   }",
          "938:   static KJ_ALWAYS_INLINE(StructBuilder getWritableStructPointer(",
          "941:   }",
          "943:   static KJ_ALWAYS_INLINE(StructBuilder getWritableStructPointer(",
          "946:     if (ref->isNull()) {",
          "947:     useDefault:",
          "948:       if (defaultValue == nullptr ||",
          "949:           reinterpret_cast<const WirePointer*>(defaultValue)->isNull()) {",
          "951:       }",
          "953:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "954:     }",
          "",
          "[Removed Lines]",
          "925:       WirePointer* ref, SegmentBuilder* segment, StructSize size,",
          "928:     word* ptr = allocate(ref, segment, size.total(), WirePointer::STRUCT, orphanArena);",
          "934:     return StructBuilder(segment, ptr, reinterpret_cast<WirePointer*>(ptr + size.data),",
          "939:       WirePointer* ref, SegmentBuilder* segment, StructSize size, const word* defaultValue)) {",
          "940:     return getWritableStructPointer(ref, ref->target(), segment, size, defaultValue);",
          "944:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, StructSize size,",
          "945:       const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "950:         return initStructPointer(ref, segment, size, orphanArena);",
          "952:       refTarget = copyMessage(segment, ref, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "929:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, StructSize size,",
          "932:     word* ptr = allocate(ref, segment, capTable, size.total(), WirePointer::STRUCT, orphanArena);",
          "938:     return StructBuilder(segment, capTable, ptr, reinterpret_cast<WirePointer*>(ptr + size.data),",
          "943:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, StructSize size,",
          "944:       const word* defaultValue)) {",
          "945:     return getWritableStructPointer(ref, ref->target(), segment, capTable, size, defaultValue);",
          "949:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "950:       StructSize size, const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "955:         return initStructPointer(ref, segment, capTable, size, orphanArena);",
          "957:       refTarget = copyMessage(segment, capTable, ref,",
          "958:           reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "980:       zeroPointerAndFars(segment, ref);",
          "983:       ref->structRef.set(newDataSize, newPointerCount);",
          "",
          "[Removed Lines]",
          "982:       word* ptr = allocate(ref, segment, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "[Added Lines]",
          "988:       word* ptr = allocate(ref, segment, capTable, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "999:       memset(oldPtr, 0,",
          "1000:              (oldDataSize + oldPointerCount * WORDS_PER_POINTER) * BYTES_PER_WORD / BYTES);",
          "1003:                            newPointerCount);",
          "1004:     } else {",
          "1007:     }",
          "1008:   }",
          "1010:   static KJ_ALWAYS_INLINE(ListBuilder initListPointer(",
          "1013:     KJ_DREQUIRE(elementSize != ElementSize::INLINE_COMPOSITE,",
          "1014:         \"Should have called initStructListPointer() instead.\");",
          "",
          "[Removed Lines]",
          "1002:       return StructBuilder(segment, ptr, newPointerSection, newDataSize * BITS_PER_WORD,",
          "1005:       return StructBuilder(oldSegment, oldPtr, oldPointerSection, oldDataSize * BITS_PER_WORD,",
          "1006:                            oldPointerCount);",
          "1011:       WirePointer* ref, SegmentBuilder* segment, ElementCount elementCount,",
          "1012:       ElementSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "",
          "[Added Lines]",
          "1008:       return StructBuilder(segment, capTable, ptr, newPointerSection, newDataSize * BITS_PER_WORD,",
          "1011:       return StructBuilder(oldSegment, capTable, oldPtr, oldPointerSection,",
          "1012:                            oldDataSize * BITS_PER_WORD, oldPointerCount);",
          "1017:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1018:       ElementCount elementCount, ElementSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1021:     WordCount wordCount = roundBitsUpToWords(ElementCount64(elementCount) * step);",
          "1027:     ref->listRef.set(elementSize, elementCount);",
          "1031:   }",
          "1033:   static KJ_ALWAYS_INLINE(ListBuilder initStructListPointer(",
          "1036:     auto wordsPerElement = elementSize.total() / ELEMENTS;",
          "1039:     WordCount wordCount = elementCount * wordsPerElement;",
          "",
          "[Removed Lines]",
          "1024:     word* ptr = allocate(ref, segment, wordCount, WirePointer::LIST, orphanArena);",
          "1030:     return ListBuilder(segment, ptr, step, elementCount, dataSize, pointerCount, elementSize);",
          "1034:       WirePointer* ref, SegmentBuilder* segment, ElementCount elementCount,",
          "1035:       StructSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "1040:     word* ptr = allocate(ref, segment, POINTER_SIZE_IN_WORDS + wordCount, WirePointer::LIST,",
          "1041:                          orphanArena);",
          "",
          "[Added Lines]",
          "1030:     word* ptr = allocate(ref, segment, capTable, wordCount, WirePointer::LIST, orphanArena);",
          "1036:     return ListBuilder(segment, capTable, ptr, step, elementCount, dataSize,",
          "1037:                        pointerCount, elementSize);",
          "1041:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1042:       ElementCount elementCount, StructSize elementSize, BuilderArena* orphanArena = nullptr)) {",
          "1047:     word* ptr = allocate(ref, segment, capTable, POINTER_SIZE_IN_WORDS + wordCount,",
          "1048:                          WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1051:     ptr += POINTER_SIZE_IN_WORDS;",
          "1055:                        elementSize.data * BITS_PER_WORD, elementSize.pointers,",
          "1056:                        ElementSize::INLINE_COMPOSITE);",
          "1057:   }",
          "1059:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointer(",
          "1063:                                   defaultValue);",
          "1064:   }",
          "1066:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointer(",
          "1068:       const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "1069:     KJ_DREQUIRE(elementSize != ElementSize::INLINE_COMPOSITE,",
          "1070:              \"Use getStructList{Element,Field}() for structs.\");",
          "",
          "[Removed Lines]",
          "1054:     return ListBuilder(segment, ptr, wordsPerElement * BITS_PER_WORD, elementCount,",
          "1060:       WirePointer* origRef, SegmentBuilder* origSegment, ElementSize elementSize,",
          "1061:       const word* defaultValue)) {",
          "1062:     return getWritableListPointer(origRef, origRef->target(), origSegment, elementSize,",
          "1067:       WirePointer* origRef, word* origRefTarget, SegmentBuilder* origSegment, ElementSize elementSize,",
          "",
          "[Added Lines]",
          "1061:     return ListBuilder(segment, capTable, ptr, wordsPerElement * BITS_PER_WORD, elementCount,",
          "1067:       WirePointer* origRef, SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "1068:       ElementSize elementSize, const word* defaultValue)) {",
          "1069:     return getWritableListPointer(origRef, origRef->target(), origSegment, capTable, elementSize,",
          "1074:       WirePointer* origRef, word* origRefTarget,",
          "1075:       SegmentBuilder* origSegment, CapTableBuilder* capTable, ElementSize elementSize,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1076:         return ListBuilder(elementSize);",
          "1077:       }",
          "1078:       origRefTarget = copyMessage(",
          "1080:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "1081:     }",
          "",
          "[Removed Lines]",
          "1079:           origSegment, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "1087:           origSegment, capTable, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1153:                          tag->structRef.wordSize() * BITS_PER_WORD / ELEMENTS,",
          "1154:                          tag->inlineCompositeListElementCount(),",
          "1155:                          dataSize * BITS_PER_WORD, pointerCount, ElementSize::INLINE_COMPOSITE);",
          "",
          "[Removed Lines]",
          "1152:       return ListBuilder(segment, ptr,",
          "",
          "[Added Lines]",
          "1160:       return ListBuilder(segment, capTable, ptr,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1178:       }",
          "1180:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1182:                          dataSize, pointerCount, oldSize);",
          "1183:     }",
          "1184:   }",
          "1186:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointerAnySize(",
          "1189:   }",
          "1191:   static KJ_ALWAYS_INLINE(ListBuilder getWritableListPointerAnySize(",
          "1193:       const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "1194:     if (origRef->isNull()) {",
          "1195:     useDefault:",
          "",
          "[Removed Lines]",
          "1181:       return ListBuilder(segment, ptr, step, ref->listRef.elementCount(),",
          "1187:       WirePointer* origRef, SegmentBuilder* origSegment, const word* defaultValue)) {",
          "1188:     return getWritableListPointerAnySize(origRef, origRef->target(), origSegment, defaultValue);",
          "1192:       WirePointer* origRef, word* origRefTarget, SegmentBuilder* origSegment,",
          "",
          "[Added Lines]",
          "1189:       return ListBuilder(segment, capTable, ptr, step, ref->listRef.elementCount(),",
          "1195:       WirePointer* origRef, SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "1196:       const word* defaultValue)) {",
          "1197:     return getWritableListPointerAnySize(origRef, origRef->target(), origSegment,",
          "1198:                                          capTable, defaultValue);",
          "1202:       WirePointer* origRef, word* origRefTarget,",
          "1203:       SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1198:         return ListBuilder(ElementSize::VOID);",
          "1199:       }",
          "1200:       origRefTarget = copyMessage(",
          "1202:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "1203:     }",
          "",
          "[Removed Lines]",
          "1201:           origSegment, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "1212:           origSegment, capTable, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1220:           \"INLINE_COMPOSITE list with non-STRUCT elements not supported.\");",
          "1221:       ptr += POINTER_SIZE_IN_WORDS;",
          "1224:                          tag->structRef.wordSize() * BITS_PER_WORD / ELEMENTS,",
          "1225:                          tag->inlineCompositeListElementCount(),",
          "1226:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "",
          "[Removed Lines]",
          "1223:       return ListBuilder(segment, ptr,",
          "",
          "[Added Lines]",
          "1234:       return ListBuilder(segment, capTable, ptr,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1230:       WirePointerCount pointerCount = pointersPerElement(elementSize) * ELEMENTS;",
          "1232:       auto step = (dataSize + pointerCount * BITS_PER_POINTER) / ELEMENTS;",
          "1234:                          dataSize, pointerCount, elementSize);",
          "1235:     }",
          "1236:   }",
          "1238:   static KJ_ALWAYS_INLINE(ListBuilder getWritableStructListPointer(",
          "1243:   }",
          "1244:   static KJ_ALWAYS_INLINE(ListBuilder getWritableStructListPointer(",
          "1246:       StructSize elementSize, const word* defaultValue, BuilderArena* orphanArena = nullptr)) {",
          "1247:     if (origRef->isNull()) {",
          "1248:     useDefault:",
          "",
          "[Removed Lines]",
          "1233:       return ListBuilder(segment, ptr, step, ref->listRef.elementCount(),",
          "1239:       WirePointer* origRef, SegmentBuilder* origSegment, StructSize elementSize,",
          "1240:       const word* defaultValue)) {",
          "1241:     return getWritableStructListPointer(origRef, origRef->target(), origSegment, elementSize,",
          "1242:                                         defaultValue);",
          "1245:       WirePointer* origRef, word* origRefTarget, SegmentBuilder* origSegment,",
          "",
          "[Added Lines]",
          "1244:       return ListBuilder(segment, capTable, ptr, step, ref->listRef.elementCount(),",
          "1250:       WirePointer* origRef, SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "1251:       StructSize elementSize, const word* defaultValue)) {",
          "1252:     return getWritableStructListPointer(origRef, origRef->target(), origSegment, capTable,",
          "1253:                                         elementSize, defaultValue);",
          "1256:       WirePointer* origRef, word* origRefTarget,",
          "1257:       SegmentBuilder* origSegment, CapTableBuilder* capTable,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1251:         return ListBuilder(ElementSize::INLINE_COMPOSITE);",
          "1252:       }",
          "1253:       origRefTarget = copyMessage(",
          "1255:       defaultValue = nullptr;  // If the default value is itself invalid, don't use it again.",
          "1256:     }",
          "",
          "[Removed Lines]",
          "1254:           origSegment, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "[Added Lines]",
          "1266:           origSegment, capTable, origRef, reinterpret_cast<const WirePointer*>(defaultValue));",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1286:       if (oldDataSize >= elementSize.data && oldPointerCount >= elementSize.pointers) {",
          "1289:                            oldDataSize * BITS_PER_WORD, oldPointerCount,",
          "1290:                            ElementSize::INLINE_COMPOSITE);",
          "1291:       }",
          "",
          "[Removed Lines]",
          "1288:         return ListBuilder(oldSegment, oldPtr, oldStep * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1300:         return ListBuilder(oldSegment, capTable, oldPtr, oldStep * BITS_PER_WORD, elementCount,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1302:       zeroPointerAndFars(origSegment, origRef);",
          "1305:                               WirePointer::LIST, orphanArena);",
          "1306:       origRef->listRef.setInlineComposite(totalSize);",
          "",
          "[Removed Lines]",
          "1304:       word* newPtr = allocate(origRef, origSegment, totalSize + POINTER_SIZE_IN_WORDS,",
          "",
          "[Added Lines]",
          "1316:       word* newPtr = allocate(origRef, origSegment, capTable, totalSize + POINTER_SIZE_IN_WORDS,",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1331:       memset(oldPtr, 0, oldStep * elementCount * BYTES_PER_WORD / BYTES);",
          "1334:                          newDataSize * BITS_PER_WORD, newPointerCount, ElementSize::INLINE_COMPOSITE);",
          "1335:     } else {",
          "",
          "[Removed Lines]",
          "1333:       return ListBuilder(origSegment, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1345:       return ListBuilder(origSegment, capTable, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1343:       if (oldSize == ElementSize::VOID) {",
          "1346:       } else {",
          "",
          "[Removed Lines]",
          "1345:         return initStructListPointer(origRef, origSegment, elementCount, elementSize);",
          "",
          "[Added Lines]",
          "1357:         return initStructListPointer(origRef, origSegment, capTable, elementCount, elementSize);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1369:         zeroPointerAndFars(origSegment, origRef);",
          "1372:                                 WirePointer::LIST, orphanArena);",
          "1373:         origRef->listRef.setInlineComposite(totalWords);",
          "",
          "[Removed Lines]",
          "1371:         word* newPtr = allocate(origRef, origSegment, totalWords + POINTER_SIZE_IN_WORDS,",
          "",
          "[Added Lines]",
          "1383:         word* newPtr = allocate(origRef, origSegment, capTable, totalWords + POINTER_SIZE_IN_WORDS,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1400:         memset(oldPtr, 0, roundBitsUpToBytes(oldStep * elementCount) / BYTES);",
          "1403:                            newDataSize * BITS_PER_WORD, newPointerCount,",
          "1404:                            ElementSize::INLINE_COMPOSITE);",
          "1405:       }",
          "",
          "[Removed Lines]",
          "1402:         return ListBuilder(origSegment, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "[Added Lines]",
          "1414:         return ListBuilder(origSegment, capTable, newPtr, newStep * BITS_PER_WORD, elementCount,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1407:   }",
          "1409:   static KJ_ALWAYS_INLINE(SegmentAnd<Text::Builder> initTextPointer(",
          "1411:       BuilderArena* orphanArena = nullptr)) {",
          "1413:     ByteCount byteSize = size + 1 * BYTES;",
          "1416:     word* ptr = allocate(",
          "1420:     ref->listRef.set(ElementSize::BYTE, byteSize * (1 * ELEMENTS / BYTES));",
          "",
          "[Removed Lines]",
          "1410:       WirePointer* ref, SegmentBuilder* segment, ByteCount size,",
          "1417:         ref, segment, roundBytesUpToWords(byteSize), WirePointer::LIST, orphanArena);",
          "",
          "[Added Lines]",
          "1422:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, ByteCount size,",
          "1429:         ref, segment, capTable, roundBytesUpToWords(byteSize), WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1424:   }",
          "1426:   static KJ_ALWAYS_INLINE(SegmentAnd<Text::Builder> setTextPointer(",
          "1428:       BuilderArena* orphanArena = nullptr)) {",
          "1430:     memcpy(allocation.value.begin(), value.begin(), value.size());",
          "1431:     return allocation;",
          "1432:   }",
          "1434:   static KJ_ALWAYS_INLINE(Text::Builder getWritableTextPointer(",
          "1436:       const void* defaultValue, ByteCount defaultSize)) {",
          "1438:   }",
          "1440:   static KJ_ALWAYS_INLINE(Text::Builder getWritableTextPointer(",
          "1442:       const void* defaultValue, ByteCount defaultSize)) {",
          "1443:     if (ref->isNull()) {",
          "1444:     useDefault:",
          "1445:       if (defaultSize == 0 * BYTES) {",
          "1446:         return nullptr;",
          "1447:       } else {",
          "1449:         memcpy(builder.begin(), defaultValue, defaultSize / BYTES);",
          "1450:         return builder;",
          "1451:       }",
          "",
          "[Removed Lines]",
          "1427:       WirePointer* ref, SegmentBuilder* segment, Text::Reader value,",
          "1429:     auto allocation = initTextPointer(ref, segment, value.size() * BYTES, orphanArena);",
          "1435:       WirePointer* ref, SegmentBuilder* segment,",
          "1437:     return getWritableTextPointer(ref, ref->target(), segment, defaultValue, defaultSize);",
          "1441:       WirePointer* ref, word* refTarget, SegmentBuilder* segment,",
          "1448:         Text::Builder builder = initTextPointer(ref, segment, defaultSize).value;",
          "",
          "[Added Lines]",
          "1439:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, Text::Reader value,",
          "1441:     auto allocation = initTextPointer(ref, segment, capTable, value.size() * BYTES, orphanArena);",
          "1447:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1449:     return getWritableTextPointer(ref, ref->target(), segment, capTable, defaultValue, defaultSize);",
          "1453:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1460:         Text::Builder builder = initTextPointer(ref, segment, capTable, defaultSize).value;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1468:   }",
          "1470:   static KJ_ALWAYS_INLINE(SegmentAnd<Data::Builder> initDataPointer(",
          "1472:       BuilderArena* orphanArena = nullptr)) {",
          "1477:     ref->listRef.set(ElementSize::BYTE, size * (1 * ELEMENTS / BYTES));",
          "",
          "[Removed Lines]",
          "1471:       WirePointer* ref, SegmentBuilder* segment, ByteCount size,",
          "1474:     word* ptr = allocate(ref, segment, roundBytesUpToWords(size), WirePointer::LIST, orphanArena);",
          "",
          "[Added Lines]",
          "1483:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, ByteCount size,",
          "1486:     word* ptr = allocate(ref, segment, capTable, roundBytesUpToWords(size),",
          "1487:                          WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1481:   }",
          "1483:   static KJ_ALWAYS_INLINE(SegmentAnd<Data::Builder> setDataPointer(",
          "1485:       BuilderArena* orphanArena = nullptr)) {",
          "1487:     memcpy(allocation.value.begin(), value.begin(), value.size());",
          "1488:     return allocation;",
          "1489:   }",
          "1491:   static KJ_ALWAYS_INLINE(Data::Builder getWritableDataPointer(",
          "1493:       const void* defaultValue, ByteCount defaultSize)) {",
          "1495:   }",
          "1497:   static KJ_ALWAYS_INLINE(Data::Builder getWritableDataPointer(",
          "1499:       const void* defaultValue, ByteCount defaultSize)) {",
          "1500:     if (ref->isNull()) {",
          "1501:       if (defaultSize == 0 * BYTES) {",
          "1502:         return nullptr;",
          "1503:       } else {",
          "1505:         memcpy(builder.begin(), defaultValue, defaultSize / BYTES);",
          "1506:         return builder;",
          "1507:       }",
          "",
          "[Removed Lines]",
          "1484:       WirePointer* ref, SegmentBuilder* segment, Data::Reader value,",
          "1486:     auto allocation = initDataPointer(ref, segment, value.size() * BYTES, orphanArena);",
          "1492:       WirePointer* ref, SegmentBuilder* segment,",
          "1494:     return getWritableDataPointer(ref, ref->target(), segment, defaultValue, defaultSize);",
          "1498:       WirePointer* ref, word* refTarget, SegmentBuilder* segment,",
          "1504:         Data::Builder builder = initDataPointer(ref, segment, defaultSize).value;",
          "",
          "[Added Lines]",
          "1497:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable, Data::Reader value,",
          "1499:     auto allocation = initDataPointer(ref, segment, capTable, value.size() * BYTES, orphanArena);",
          "1505:       WirePointer* ref, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1507:     return getWritableDataPointer(ref, ref->target(), segment, capTable, defaultValue, defaultSize);",
          "1511:       WirePointer* ref, word* refTarget, SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1517:         Data::Builder builder = initDataPointer(ref, segment, capTable, defaultSize).value;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1518:   }",
          "1520:   static SegmentAnd<word*> setStructPointer(",
          "1522:       BuilderArena* orphanArena = nullptr) {",
          "1523:     WordCount dataSize = roundBitsUpToWords(value.dataSize);",
          "1524:     WordCount totalSize = dataSize + value.pointerCount * WORDS_PER_POINTER;",
          "1527:     ref->structRef.set(dataSize, value.pointerCount);",
          "1529:     if (value.dataSize == 1 * BITS) {",
          "",
          "[Removed Lines]",
          "1521:       SegmentBuilder* segment, WirePointer* ref, StructReader value,",
          "1526:     word* ptr = allocate(ref, segment, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "[Added Lines]",
          "1534:       SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref, StructReader value,",
          "1539:     word* ptr = allocate(ref, segment, capTable, totalSize, WirePointer::STRUCT, orphanArena);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1535:     WirePointer* pointerSection = reinterpret_cast<WirePointer*>(ptr + dataSize);",
          "1536:     for (uint i = 0; i < value.pointerCount / POINTERS; i++) {",
          "1539:     }",
          "1541:     return { segment, ptr };",
          "",
          "[Removed Lines]",
          "1537:       copyPointer(segment, pointerSection + i, value.segment, value.pointers + i,",
          "1538:                   value.nestingLimit);",
          "",
          "[Added Lines]",
          "1550:       copyPointer(segment, capTable, pointerSection + i,",
          "1551:                   value.segment, value.capTable, value.pointers + i, value.nestingLimit);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1544: #if !CAPNP_LITE",
          "1545:   static void setCapabilityPointer(",
          "1552:     }",
          "1553:   }",
          "1554: #endif  // !CAPNP_LITE",
          "1556:   static SegmentAnd<word*> setListPointer(",
          "1558:       BuilderArena* orphanArena = nullptr) {",
          "1559:     WordCount totalSize = roundBitsUpToWords(value.elementCount * value.step);",
          "1561:     if (value.elementSize != ElementSize::INLINE_COMPOSITE) {",
          "1565:       if (value.elementSize == ElementSize::POINTER) {",
          "1567:         ref->listRef.set(ElementSize::POINTER, value.elementCount);",
          "1568:         for (uint i = 0; i < value.elementCount / ELEMENTS; i++) {",
          "1571:                       value.nestingLimit);",
          "1572:         }",
          "1573:       } else {",
          "",
          "[Removed Lines]",
          "1546:       SegmentBuilder* segment, WirePointer* ref, kj::Own<ClientHook>&& cap,",
          "1547:       BuilderArena* orphanArena = nullptr) {",
          "1548:     if (orphanArena == nullptr) {",
          "1549:       ref->setCap(segment->getArena()->injectCap(kj::mv(cap)));",
          "1550:     } else {",
          "1551:       ref->setCap(orphanArena->injectCap(kj::mv(cap)));",
          "1557:       SegmentBuilder* segment, WirePointer* ref, ListReader value,",
          "1563:       word* ptr = allocate(ref, segment, totalSize, WirePointer::LIST, orphanArena);",
          "1569:           copyPointer(segment, reinterpret_cast<WirePointer*>(ptr) + i,",
          "1570:                       value.segment, reinterpret_cast<const WirePointer*>(value.ptr) + i,",
          "",
          "[Added Lines]",
          "1559:       SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref,",
          "1560:       kj::Own<ClientHook>&& cap) {",
          "1561:     if (!ref->isNull()) {",
          "1562:       zeroObject(segment, capTable, ref);",
          "1564:     ref->setCap(capTable->injectCap(kj::mv(cap)));",
          "1569:       SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* ref, ListReader value,",
          "1575:       word* ptr = allocate(ref, segment, capTable, totalSize, WirePointer::LIST, orphanArena);",
          "1581:           copyPointer(segment, capTable, reinterpret_cast<WirePointer*>(ptr) + i,",
          "1582:                       value.segment, value.capTable,",
          "1583:                       reinterpret_cast<const WirePointer*>(value.ptr) + i,",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1579:       return { segment, ptr };",
          "1580:     } else {",
          "1584:       ref->listRef.setInlineComposite(totalSize);",
          "1586:       WordCount dataSize = roundBitsUpToWords(value.structDataSize);",
          "",
          "[Removed Lines]",
          "1582:       word* ptr = allocate(ref, segment, totalSize + POINTER_SIZE_IN_WORDS, WirePointer::LIST,",
          "1583:                            orphanArena);",
          "",
          "[Added Lines]",
          "1595:       word* ptr = allocate(ref, segment, capTable, totalSize + POINTER_SIZE_IN_WORDS,",
          "1596:                            WirePointer::LIST, orphanArena);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1598:         src += dataSize;",
          "1600:         for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "1603:           dst += POINTER_SIZE_IN_WORDS;",
          "1604:           src += POINTER_SIZE_IN_WORDS;",
          "1605:         }",
          "",
          "[Removed Lines]",
          "1601:           copyPointer(segment, reinterpret_cast<WirePointer*>(dst),",
          "1602:               value.segment, reinterpret_cast<const WirePointer*>(src), value.nestingLimit);",
          "",
          "[Added Lines]",
          "1614:           copyPointer(segment, capTable, reinterpret_cast<WirePointer*>(dst),",
          "1615:               value.segment, value.capTable, reinterpret_cast<const WirePointer*>(src),",
          "1616:               value.nestingLimit);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1610:   }",
          "1612:   static KJ_ALWAYS_INLINE(SegmentAnd<word*> copyPointer(",
          "1615:       int nestingLimit, BuilderArena* orphanArena = nullptr)) {",
          "1617:   }",
          "1619:   static SegmentAnd<word*> copyPointer(",
          "",
          "[Removed Lines]",
          "1613:       SegmentBuilder* dstSegment, WirePointer* dst,",
          "1614:       SegmentReader* srcSegment, const WirePointer* src,",
          "1616:     return copyPointer(dstSegment, dst, srcSegment, src, src->target(), nestingLimit, orphanArena);",
          "1620:       SegmentBuilder* dstSegment, WirePointer* dst,",
          "1621:       SegmentReader* srcSegment, const WirePointer* src, const word* srcTarget,",
          "1622:       int nestingLimit, BuilderArena* orphanArena = nullptr) {",
          "",
          "[Added Lines]",
          "1627:       SegmentBuilder* dstSegment, CapTableBuilder* dstCapTable, WirePointer* dst,",
          "1628:       SegmentReader* srcSegment, CapTableReader* srcCapTable, const WirePointer* src,",
          "1630:     return copyPointer(dstSegment, dstCapTable, dst,",
          "1631:                        srcSegment, srcCapTable, src, src->target(),",
          "1632:                        nestingLimit, orphanArena);",
          "1636:       SegmentBuilder* dstSegment, CapTableBuilder* dstCapTable, WirePointer* dst,",
          "1637:       SegmentReader* srcSegment, CapTableReader* srcCapTable, const WirePointer* src,",
          "1638:       const word* srcTarget, int nestingLimit, BuilderArena* orphanArena = nullptr) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1627:     if (src->isNull()) {",
          "1628:     useDefault:",
          "1629:       if (!dst->isNull()) {",
          "1631:         memset(dst, 0, sizeof(*dst));",
          "1632:       }",
          "1633:       return { dstSegment, nullptr };",
          "",
          "[Removed Lines]",
          "1630:         zeroObject(dstSegment, dst);",
          "",
          "[Added Lines]",
          "1646:         zeroObject(dstSegment, dstCapTable, dst);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1650:                    \"Message contained out-of-bounds struct pointer.\") {",
          "1651:           goto useDefault;",
          "1652:         }",
          "1655:                          reinterpret_cast<const WirePointer*>(ptr + src->structRef.dataSize.get()),",
          "1656:                          src->structRef.dataSize.get() * BITS_PER_WORD,",
          "1657:                          src->structRef.ptrCount.get(),",
          "",
          "[Removed Lines]",
          "1653:         return setStructPointer(dstSegment, dst,",
          "1654:             StructReader(srcSegment, ptr,",
          "",
          "[Added Lines]",
          "1669:         return setStructPointer(dstSegment, dstCapTable, dst,",
          "1670:             StructReader(srcSegment, srcCapTable, ptr,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1698:             }",
          "1699:           }",
          "1703:                          tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "1704:                          tag->structRef.ptrCount.get(), ElementSize::INLINE_COMPOSITE,",
          "1705:                          nestingLimit - 1),",
          "",
          "[Removed Lines]",
          "1701:           return setListPointer(dstSegment, dst,",
          "1702:               ListReader(srcSegment, ptr, elementCount, wordsPerElement * BITS_PER_WORD,",
          "",
          "[Added Lines]",
          "1717:           return setListPointer(dstSegment, dstCapTable, dst,",
          "1718:               ListReader(srcSegment, srcCapTable, ptr,",
          "1719:                          elementCount, wordsPerElement * BITS_PER_WORD,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1725:             }",
          "1726:           }",
          "1731:               orphanArena);",
          "1732:         }",
          "1733:       }",
          "",
          "[Removed Lines]",
          "1728:           return setListPointer(dstSegment, dst,",
          "1729:               ListReader(srcSegment, ptr, elementCount, step, dataSize, pointerCount, elementSize,",
          "1730:                          nestingLimit - 1),",
          "",
          "[Added Lines]",
          "1745:           return setListPointer(dstSegment, dstCapTable, dst,",
          "1746:               ListReader(srcSegment, srcCapTable, ptr, elementCount, step, dataSize, pointerCount,",
          "1747:                          elementSize, nestingLimit - 1),",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1743:         }",
          "1745: #if !CAPNP_LITE",
          "1748:           return { dstSegment, nullptr };",
          "1749:         } else {",
          "1750: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "1746:         KJ_IF_MAYBE(cap, srcSegment->getArena()->extractCap(src->capRef.index.get())) {",
          "1747:           setCapabilityPointer(dstSegment, dst, kj::mv(*cap), orphanArena);",
          "",
          "[Added Lines]",
          "1763:         KJ_IF_MAYBE(cap, srcCapTable->extractCap(src->capRef.index.get())) {",
          "1764:           setCapabilityPointer(dstSegment, dstCapTable, dst, kj::mv(*cap));",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1760:     KJ_UNREACHABLE;",
          "1761:   }",
          "1764:     KJ_REQUIRE(value.segment == nullptr || value.segment->getArena() == segment->getArena(),",
          "1765:                \"Adopted object must live in the same message.\");",
          "1767:     if (!ref->isNull()) {",
          "1769:     }",
          "1771:     if (value == nullptr) {",
          "",
          "[Removed Lines]",
          "1763:   static void adopt(SegmentBuilder* segment, WirePointer* ref, OrphanBuilder&& value) {",
          "1768:       zeroObject(segment, ref);",
          "",
          "[Added Lines]",
          "1780:   static void adopt(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1781:                     WirePointer* ref, OrphanBuilder&& value) {",
          "1786:       zeroObject(segment, capTable, ref);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1784:     value.segment = nullptr;",
          "1785:   }",
          "1788:     word* location;",
          "1790:     if (ref->isNull()) {",
          "",
          "[Removed Lines]",
          "1787:   static OrphanBuilder disown(SegmentBuilder* segment, WirePointer* ref) {",
          "",
          "[Added Lines]",
          "1805:   static OrphanBuilder disown(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "1806:                               WirePointer* ref) {",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1797:       location = followFarsNoWritableCheck(refCopy, ref->target(), segment);",
          "1798:     }",
          "1802:     if (!ref->isNull() && ref->isPositional()) {",
          "1803:       result.tagAsPtr()->setKindForOrphan(ref->kind());",
          "",
          "[Removed Lines]",
          "1800:     OrphanBuilder result(ref, segment, location);",
          "",
          "[Added Lines]",
          "1819:     OrphanBuilder result(ref, segment, capTable, location);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1814:   static KJ_ALWAYS_INLINE(StructReader readStructPointer(",
          "1816:       int nestingLimit)) {",
          "1818:   }",
          "1820:   static KJ_ALWAYS_INLINE(StructReader readStructPointer(",
          "1822:       const word* defaultValue, int nestingLimit)) {",
          "1823:     if (ref->isNull()) {",
          "1824:     useDefault:",
          "",
          "[Removed Lines]",
          "1815:       SegmentReader* segment, const WirePointer* ref, const word* defaultValue,",
          "1817:     return readStructPointer(segment, ref, ref->target(), defaultValue, nestingLimit);",
          "1821:       SegmentReader* segment, const WirePointer* ref, const word* refTarget,",
          "",
          "[Added Lines]",
          "1834:       SegmentReader* segment, CapTableReader* capTable,",
          "1835:       const WirePointer* ref, const word* defaultValue,",
          "1837:     return readStructPointer(segment, capTable, ref, ref->target(), defaultValue, nestingLimit);",
          "1841:       SegmentReader* segment, CapTableReader* capTable,",
          "1842:       const WirePointer* ref, const word* refTarget,",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1854:     }",
          "1856:     return StructReader(",
          "1858:         ref->structRef.dataSize.get() * BITS_PER_WORD,",
          "1859:         ref->structRef.ptrCount.get(),",
          "1860:         nestingLimit - 1);",
          "",
          "[Removed Lines]",
          "1857:         segment, ptr, reinterpret_cast<const WirePointer*>(ptr + ref->structRef.dataSize.get()),",
          "",
          "[Added Lines]",
          "1878:         segment, capTable,",
          "1879:         ptr, reinterpret_cast<const WirePointer*>(ptr + ref->structRef.dataSize.get()),",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1863: #if !CAPNP_LITE",
          "1864:   static KJ_ALWAYS_INLINE(kj::Own<ClientHook> readCapabilityPointer(",
          "1866:     kj::Maybe<kj::Own<ClientHook>> maybeCap;",
          "1868:     KJ_REQUIRE(brokenCapFactory != nullptr,",
          "",
          "[Removed Lines]",
          "1865:       SegmentReader* segment, const WirePointer* ref, int nestingLimit)) {",
          "",
          "[Added Lines]",
          "1887:       SegmentReader* segment, CapTableReader* capTable,",
          "1888:       const WirePointer* ref, int nestingLimit)) {",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1879:       }",
          "1880:       return brokenCapFactory->newBrokenCap(",
          "1881:           \"Calling capability extracted from a non-capability pointer.\");",
          "1883:       return kj::mv(*cap);",
          "1884:     } else {",
          "1885:       KJ_FAIL_REQUIRE(\"Message contains invalid capability pointer.\") {",
          "",
          "[Removed Lines]",
          "1882:     } else KJ_IF_MAYBE(cap, segment->getArena()->extractCap(ref->capRef.index.get())) {",
          "",
          "[Added Lines]",
          "1905:     } else KJ_IF_MAYBE(cap, capTable->extractCap(ref->capRef.index.get())) {",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1891: #endif  // !CAPNP_LITE",
          "1893:   static KJ_ALWAYS_INLINE(ListReader readListPointer(",
          "1895:       ElementSize expectedElementSize, int nestingLimit, bool checkElementSize = true)) {",
          "1897:                            expectedElementSize, nestingLimit, checkElementSize);",
          "1898:   }",
          "1900:   static KJ_ALWAYS_INLINE(ListReader readListPointer(",
          "1902:       const word* defaultValue, ElementSize expectedElementSize, int nestingLimit,",
          "1903:       bool checkElementSize = true)) {",
          "1904:     if (ref->isNull()) {",
          "",
          "[Removed Lines]",
          "1894:       SegmentReader* segment, const WirePointer* ref, const word* defaultValue,",
          "1896:     return readListPointer(segment, ref, ref->target(), defaultValue,",
          "1901:       SegmentReader* segment, const WirePointer* ref, const word* refTarget,",
          "",
          "[Added Lines]",
          "1917:       SegmentReader* segment, CapTableReader* capTable,",
          "1918:       const WirePointer* ref, const word* defaultValue,",
          "1920:     return readListPointer(segment, capTable, ref, ref->target(), defaultValue,",
          "1925:       SegmentReader* segment, CapTableReader* capTable,",
          "1926:       const WirePointer* ref, const word* refTarget,",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2018:       }",
          "2020:       return ListReader(",
          "2022:           tag->structRef.dataSize.get() * BITS_PER_WORD,",
          "2023:           tag->structRef.ptrCount.get(), ElementSize::INLINE_COMPOSITE,",
          "2024:           nestingLimit - 1);",
          "",
          "[Removed Lines]",
          "2021:           segment, ptr, size, wordsPerElement * BITS_PER_WORD,",
          "",
          "[Added Lines]",
          "2046:           segment, capTable, ptr, size, wordsPerElement * BITS_PER_WORD,",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2076:         }",
          "2077:       }",
          "2080:                         dataSize, pointerCount, elementSize, nestingLimit - 1);",
          "2081:     }",
          "2082:   }",
          "",
          "[Removed Lines]",
          "2079:       return ListReader(segment, ptr, elementCount, step,",
          "",
          "[Added Lines]",
          "2104:       return ListReader(segment, capTable, ptr, elementCount, step,",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2184: StructBuilder PointerBuilder::initStruct(StructSize size) {",
          "2186: }",
          "2188: StructBuilder PointerBuilder::getStruct(StructSize size, const word* defaultValue) {",
          "2190: }",
          "2192: ListBuilder PointerBuilder::initList(ElementSize elementSize, ElementCount elementCount) {",
          "2194: }",
          "2196: ListBuilder PointerBuilder::initStructList(ElementCount elementCount, StructSize elementSize) {",
          "2198: }",
          "2200: ListBuilder PointerBuilder::getList(ElementSize elementSize, const word* defaultValue) {",
          "2202: }",
          "2204: ListBuilder PointerBuilder::getStructList(StructSize elementSize, const word* defaultValue) {",
          "2206: }",
          "2208: ListBuilder PointerBuilder::getListAnySize(const word* defaultValue) {",
          "2210: }",
          "2212: template <>",
          "2213: Text::Builder PointerBuilder::initBlob<Text>(ByteCount size) {",
          "2215: }",
          "2216: template <>",
          "2217: void PointerBuilder::setBlob<Text>(Text::Reader value) {",
          "2219: }",
          "2220: template <>",
          "2221: Text::Builder PointerBuilder::getBlob<Text>(const void* defaultValue, ByteCount defaultSize) {",
          "2223: }",
          "2225: template <>",
          "2226: Data::Builder PointerBuilder::initBlob<Data>(ByteCount size) {",
          "2228: }",
          "2229: template <>",
          "2230: void PointerBuilder::setBlob<Data>(Data::Reader value) {",
          "2232: }",
          "2233: template <>",
          "2234: Data::Builder PointerBuilder::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) {",
          "2236: }",
          "2238: void PointerBuilder::setStruct(const StructReader& value) {",
          "2240: }",
          "2242: void PointerBuilder::setList(const ListReader& value) {",
          "2244: }",
          "2246: #if !CAPNP_LITE",
          "2247: kj::Own<ClientHook> PointerBuilder::getCapability() {",
          "2248:   return WireHelpers::readCapabilityPointer(",
          "2250: }",
          "2252: void PointerBuilder::setCapability(kj::Own<ClientHook>&& cap) {",
          "2254: }",
          "2255: #endif  // !CAPNP_LITE",
          "2257: void PointerBuilder::adopt(OrphanBuilder&& value) {",
          "2259: }",
          "2261: OrphanBuilder PointerBuilder::disown() {",
          "2263: }",
          "2265: void PointerBuilder::clear() {",
          "2267:   memset(pointer, 0, sizeof(WirePointer));",
          "2268: }",
          "",
          "[Removed Lines]",
          "2185:   return WireHelpers::initStructPointer(pointer, segment, size);",
          "2189:   return WireHelpers::getWritableStructPointer(pointer, segment, size, defaultValue);",
          "2193:   return WireHelpers::initListPointer(pointer, segment, elementCount, elementSize);",
          "2197:   return WireHelpers::initStructListPointer(pointer, segment, elementCount, elementSize);",
          "2201:   return WireHelpers::getWritableListPointer(pointer, segment, elementSize, defaultValue);",
          "2205:   return WireHelpers::getWritableStructListPointer(pointer, segment, elementSize, defaultValue);",
          "2209:   return WireHelpers::getWritableListPointerAnySize(pointer, segment, defaultValue);",
          "2214:   return WireHelpers::initTextPointer(pointer, segment, size).value;",
          "2218:   WireHelpers::setTextPointer(pointer, segment, value);",
          "2222:   return WireHelpers::getWritableTextPointer(pointer, segment, defaultValue, defaultSize);",
          "2227:   return WireHelpers::initDataPointer(pointer, segment, size).value;",
          "2231:   WireHelpers::setDataPointer(pointer, segment, value);",
          "2235:   return WireHelpers::getWritableDataPointer(pointer, segment, defaultValue, defaultSize);",
          "2239:   WireHelpers::setStructPointer(segment, pointer, value);",
          "2243:   WireHelpers::setListPointer(segment, pointer, value);",
          "2249:       segment, pointer, kj::maxValue);",
          "2253:   WireHelpers::setCapabilityPointer(segment, pointer, kj::mv(cap));",
          "2258:   WireHelpers::adopt(segment, pointer, kj::mv(value));",
          "2262:   return WireHelpers::disown(segment, pointer);",
          "2266:   WireHelpers::zeroObject(segment, pointer);",
          "",
          "[Added Lines]",
          "2210:   return WireHelpers::initStructPointer(pointer, segment, capTable, size);",
          "2214:   return WireHelpers::getWritableStructPointer(pointer, segment, capTable, size, defaultValue);",
          "2218:   return WireHelpers::initListPointer(pointer, segment, capTable, elementCount, elementSize);",
          "2222:   return WireHelpers::initStructListPointer(pointer, segment, capTable, elementCount, elementSize);",
          "2226:   return WireHelpers::getWritableListPointer(pointer, segment, capTable, elementSize, defaultValue);",
          "2230:   return WireHelpers::getWritableStructListPointer(",
          "2231:       pointer, segment, capTable, elementSize, defaultValue);",
          "2235:   return WireHelpers::getWritableListPointerAnySize(pointer, segment, capTable, defaultValue);",
          "2240:   return WireHelpers::initTextPointer(pointer, segment, capTable, size).value;",
          "2244:   WireHelpers::setTextPointer(pointer, segment, capTable, value);",
          "2248:   return WireHelpers::getWritableTextPointer(pointer, segment, capTable, defaultValue, defaultSize);",
          "2253:   return WireHelpers::initDataPointer(pointer, segment, capTable, size).value;",
          "2257:   WireHelpers::setDataPointer(pointer, segment, capTable, value);",
          "2261:   return WireHelpers::getWritableDataPointer(pointer, segment, capTable, defaultValue, defaultSize);",
          "2265:   WireHelpers::setStructPointer(segment, capTable, pointer, value);",
          "2269:   WireHelpers::setListPointer(segment, capTable, pointer, value);",
          "2275:       segment, capTable, pointer, kj::maxValue);",
          "2279:   WireHelpers::setCapabilityPointer(segment, capTable, pointer, kj::mv(cap));",
          "2284:   WireHelpers::adopt(segment, capTable, pointer, kj::mv(value));",
          "2288:   return WireHelpers::disown(segment, capTable, pointer);",
          "2292:   WireHelpers::zeroObject(segment, capTable, pointer);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2291: void PointerBuilder::transferFrom(PointerBuilder other) {",
          "2292:   if (!pointer->isNull()) {",
          "2294:     memset(pointer, 0, sizeof(*pointer));",
          "2295:   }",
          "2296:   WireHelpers::transferPointer(segment, pointer, other.segment, other.pointer);",
          "",
          "[Removed Lines]",
          "2293:     WireHelpers::zeroObject(segment, pointer);",
          "",
          "[Added Lines]",
          "2319:     WireHelpers::zeroObject(segment, capTable, pointer);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2298: }",
          "2300: void PointerBuilder::copyFrom(PointerReader other) {",
          "2307:   }",
          "2308: }",
          "2310: PointerReader PointerBuilder::asReader() const {",
          "2312: }",
          "2314: BuilderArena* PointerBuilder::getArena() const {",
          "2315:   return segment->getArena();",
          "2316: }",
          "2323:   KJ_REQUIRE(WireHelpers::boundsCheck(segment, location, location + POINTER_SIZE_IN_WORDS),",
          "2324:              \"Root location out-of-bounds.\") {",
          "2325:     location = nullptr;",
          "2326:   }",
          "2329: }",
          "2331: StructReader PointerReader::getStruct(const word* defaultValue) const {",
          "2332:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2334: }",
          "2336: ListReader PointerReader::getList(ElementSize expectedElementSize, const word* defaultValue) const {",
          "2337:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2338:   return WireHelpers::readListPointer(",
          "2340: }",
          "2342: ListReader PointerReader::getListAnySize(const word* defaultValue) const {",
          "2343:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2344:   return WireHelpers::readListPointer(",
          "2346: }",
          "2348: template <>",
          "",
          "[Removed Lines]",
          "2301:   if (!pointer->isNull()) {",
          "2302:     WireHelpers::zeroObject(segment, pointer);",
          "2303:     memset(pointer, 0, sizeof(*pointer));",
          "2304:   }",
          "2305:   if (other.pointer != nullptr) {",
          "2306:     WireHelpers::copyPointer(segment, pointer, other.segment, other.pointer, other.nestingLimit);",
          "2311:   return PointerReader(segment, pointer, kj::maxValue);",
          "2321: PointerReader PointerReader::getRoot(SegmentReader* segment, const word* location,",
          "2322:                                      int nestingLimit) {",
          "2328:   return PointerReader(segment, reinterpret_cast<const WirePointer*>(location), nestingLimit);",
          "2333:   return WireHelpers::readStructPointer(segment, ref, defaultValue, nestingLimit);",
          "2339:       segment, ref, defaultValue, expectedElementSize, nestingLimit);",
          "2345:       segment, ref, defaultValue, ElementSize::VOID /* dummy */, nestingLimit, false);",
          "",
          "[Added Lines]",
          "2327:   if (other.pointer == nullptr) {",
          "2328:     if (!pointer->isNull()) {",
          "2329:       WireHelpers::zeroObject(segment, capTable, pointer);",
          "2330:       memset(pointer, 0, sizeof(*pointer));",
          "2331:     }",
          "2332:   } else {",
          "2333:     WireHelpers::copyPointer(segment, capTable, pointer,",
          "2334:                              other.segment, other.capTable, other.pointer, other.nestingLimit);",
          "2339:   return PointerReader(segment, capTable, pointer, kj::maxValue);",
          "2346: CapTableBuilder* PointerBuilder::getCapTable() {",
          "2347:   return capTable;",
          "2348: }",
          "2350: PointerBuilder PointerBuilder::imbue(CapTableBuilder* capTable) {",
          "2351:   auto result = *this;",
          "2352:   result.capTable = capTable;",
          "2353:   return result;",
          "2354: }",
          "2359: PointerReader PointerReader::getRoot(SegmentReader* segment, CapTableReader* capTable,",
          "2360:                                      const word* location, int nestingLimit) {",
          "2366:   return PointerReader(segment, capTable,",
          "2367:       reinterpret_cast<const WirePointer*>(location), nestingLimit);",
          "2372:   return WireHelpers::readStructPointer(segment, capTable, ref, defaultValue, nestingLimit);",
          "2378:       segment, capTable, ref, defaultValue, expectedElementSize, nestingLimit);",
          "2384:       segment, capTable, ref, defaultValue, ElementSize::VOID /* dummy */, nestingLimit, false);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2360: #if !CAPNP_LITE",
          "2361: kj::Own<ClientHook> PointerReader::getCapability() const {",
          "2362:   const WirePointer* ref = pointer == nullptr ? &zero.pointer : pointer;",
          "2364: }",
          "2365: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "2363:   return WireHelpers::readCapabilityPointer(segment, ref, nestingLimit);",
          "",
          "[Added Lines]",
          "2402:   return WireHelpers::readCapabilityPointer(segment, capTable, ref, nestingLimit);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2401:   return segment == nullptr ? nullptr : segment->getArena();",
          "2402: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2443: PointerReader PointerReader::imbue(CapTableReader* capTable) const {",
          "2444:   auto result = *this;",
          "2445:   result.capTable = capTable;",
          "2446:   return result;",
          "2447: }",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2412:   }",
          "2414:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2416:   }",
          "2417:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2418: }",
          "",
          "[Removed Lines]",
          "2415:     WireHelpers::zeroObject(segment, pointers + i);",
          "",
          "[Added Lines]",
          "2460:     WireHelpers::zeroObject(segment, capTable, pointers + i);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2443:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2445:   }",
          "2446:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "",
          "[Removed Lines]",
          "2444:     WireHelpers::zeroObject(segment, pointers + i);",
          "",
          "[Added Lines]",
          "2489:     WireHelpers::zeroObject(segment, capTable, pointers + i);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2483:   for (uint i = 0; i < pointerCount / POINTERS; i++) {",
          "2485:   }",
          "2486:   memset(pointers, 0, pointerCount * BYTES_PER_POINTER / BYTES);",
          "2489:   WirePointerCount sharedPointerCount = kj::min(pointerCount, other.pointerCount);",
          "2490:   for (uint i = 0; i < sharedPointerCount / POINTERS; i++) {",
          "2493:   }",
          "2494: }",
          "2496: StructReader StructBuilder::asReader() const {",
          "2498:       dataSize, pointerCount, kj::maxValue);",
          "2499: }",
          "",
          "[Removed Lines]",
          "2484:     WireHelpers::zeroObject(segment, pointers + i);",
          "2491:     WireHelpers::copyPointer(segment, pointers + i,",
          "2492:         other.segment, other.pointers + i, other.nestingLimit);",
          "2497:   return StructReader(segment, data, pointers,",
          "",
          "[Added Lines]",
          "2529:     WireHelpers::zeroObject(segment, capTable, pointers + i);",
          "2536:     WireHelpers::copyPointer(segment, capTable, pointers + i,",
          "2537:         other.segment, other.capTable, other.pointers + i, other.nestingLimit);",
          "2542:   return StructReader(segment, capTable, data, pointers,",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2502:   return segment->getArena();",
          "2503: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2550: CapTableBuilder* StructBuilder::getCapTable() {",
          "2551:   return capTable;",
          "2552: }",
          "2554: StructBuilder StructBuilder::imbue(CapTableBuilder* capTable) {",
          "2555:   auto result = *this;",
          "2556:   result.capTable = capTable;",
          "2557:   return result;",
          "2558: }",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2522:   return result;",
          "2523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2580: StructReader StructReader::imbue(CapTableReader* capTable) const {",
          "2581:   auto result = *this;",
          "2582:   result.capTable = capTable;",
          "2583:   return result;",
          "2584: }",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2560:   BitCount64 indexBit = ElementCount64(index) * step;",
          "2561:   byte* structData = ptr + indexBit / BITS_PER_BYTE;",
          "2562:   KJ_DASSERT(indexBit % BITS_PER_BYTE == 0 * BITS);",
          "2564:       reinterpret_cast<WirePointer*>(structData + structDataSize / BITS_PER_BYTE),",
          "2565:       structDataSize, structPointerCount);",
          "2566: }",
          "2568: ListReader ListBuilder::asReader() const {",
          "2570:                     elementSize, kj::maxValue);",
          "2571: }",
          "",
          "[Removed Lines]",
          "2563:   return StructBuilder(segment, structData,",
          "2569:   return ListReader(segment, ptr, elementCount, step, structDataSize, structPointerCount,",
          "",
          "[Added Lines]",
          "2624:   return StructBuilder(segment, capTable, structData,",
          "2630:   return ListReader(segment, capTable, ptr, elementCount, step, structDataSize, structPointerCount,",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2574:   return segment->getArena();",
          "2575: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2638: CapTableBuilder* ListBuilder::getCapTable() {",
          "2639:   return capTable;",
          "2640: }",
          "2642: ListBuilder ListBuilder::imbue(CapTableBuilder* capTable) {",
          "2643:   auto result = *this;",
          "2644:   result.capTable = capTable;",
          "2645:   return result;",
          "2646: }",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2637:   KJ_DASSERT(indexBit % BITS_PER_BYTE == 0 * BITS);",
          "2638:   return StructReader(",
          "2640:       structDataSize, structPointerCount,",
          "2641:       nestingLimit - 1);",
          "2642: }",
          "2648:   OrphanBuilder result;",
          "2650:   result.segment = builder.segment;",
          "2651:   result.location = builder.getLocation();",
          "2652:   return result;",
          "2653: }",
          "2655: OrphanBuilder OrphanBuilder::initList(",
          "2657:   OrphanBuilder result;",
          "2658:   ListBuilder builder = WireHelpers::initListPointer(",
          "2660:   result.segment = builder.segment;",
          "2661:   result.location = builder.getLocation();",
          "2662:   return result;",
          "2663: }",
          "2665: OrphanBuilder OrphanBuilder::initStructList(",
          "2667:   OrphanBuilder result;",
          "2668:   ListBuilder builder = WireHelpers::initStructListPointer(",
          "2670:   result.segment = builder.segment;",
          "2671:   result.location = builder.getLocation();",
          "2672:   return result;",
          "2673: }",
          "2676:   OrphanBuilder result;",
          "2678:   result.segment = allocation.segment;",
          "2679:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2680:   return result;",
          "2681: }",
          "2684:   OrphanBuilder result;",
          "2686:   result.segment = allocation.segment;",
          "2687:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2688:   return result;",
          "2689: }",
          "2692:   OrphanBuilder result;",
          "2694:   result.segment = allocation.segment;",
          "2695:   result.location = reinterpret_cast<word*>(allocation.value);",
          "2696:   return result;",
          "2697: }",
          "2700:   OrphanBuilder result;",
          "2702:   result.segment = allocation.segment;",
          "2703:   result.location = reinterpret_cast<word*>(allocation.value);",
          "2704:   return result;",
          "2705: }",
          "2708:   OrphanBuilder result;",
          "2709:   auto allocation = WireHelpers::copyPointer(",
          "2711:   result.segment = allocation.segment;",
          "2712:   result.location = reinterpret_cast<word*>(allocation.value);",
          "2713:   return result;",
          "2714: }",
          "2717:   OrphanBuilder result;",
          "2718:   auto allocation = WireHelpers::setTextPointer(",
          "2720:   result.segment = allocation.segment;",
          "2721:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2722:   return result;",
          "2723: }",
          "2726:   OrphanBuilder result;",
          "2727:   auto allocation = WireHelpers::setDataPointer(",
          "2729:   result.segment = allocation.segment;",
          "2730:   result.location = reinterpret_cast<word*>(allocation.value.begin());",
          "2731:   return result;",
          "2732: }",
          "2734: #if !CAPNP_LITE",
          "2736:   OrphanBuilder result;",
          "2738:   result.segment = arena->getSegment(SegmentId(0));",
          "2739:   result.location = &result.tag;  // dummy to make location non-null",
          "2740:   return result;",
          "2741: }",
          "",
          "[Removed Lines]",
          "2639:       segment, structData, structPointers,",
          "2647: OrphanBuilder OrphanBuilder::initStruct(BuilderArena* arena, StructSize size) {",
          "2649:   StructBuilder builder = WireHelpers::initStructPointer(result.tagAsPtr(), nullptr, size, arena);",
          "2656:     BuilderArena* arena, ElementCount elementCount, ElementSize elementSize) {",
          "2659:       result.tagAsPtr(), nullptr, elementCount, elementSize, arena);",
          "2666:     BuilderArena* arena, ElementCount elementCount, StructSize elementSize) {",
          "2669:       result.tagAsPtr(), nullptr, elementCount, elementSize, arena);",
          "2675: OrphanBuilder OrphanBuilder::initText(BuilderArena* arena, ByteCount size) {",
          "2677:   auto allocation = WireHelpers::initTextPointer(result.tagAsPtr(), nullptr, size, arena);",
          "2683: OrphanBuilder OrphanBuilder::initData(BuilderArena* arena, ByteCount size) {",
          "2685:   auto allocation = WireHelpers::initDataPointer(result.tagAsPtr(), nullptr, size, arena);",
          "2691: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, StructReader copyFrom) {",
          "2693:   auto allocation = WireHelpers::setStructPointer(nullptr, result.tagAsPtr(), copyFrom, arena);",
          "2699: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, ListReader copyFrom) {",
          "2701:   auto allocation = WireHelpers::setListPointer(nullptr, result.tagAsPtr(), copyFrom, arena);",
          "2707: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, PointerReader copyFrom) {",
          "2710:       nullptr, result.tagAsPtr(), copyFrom.segment, copyFrom.pointer, copyFrom.nestingLimit, arena);",
          "2716: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, Text::Reader copyFrom) {",
          "2719:       result.tagAsPtr(), nullptr, copyFrom, arena);",
          "2725: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, Data::Reader copyFrom) {",
          "2728:       result.tagAsPtr(), nullptr, copyFrom, arena);",
          "2735: OrphanBuilder OrphanBuilder::copy(BuilderArena* arena, kj::Own<ClientHook> copyFrom) {",
          "2737:   WireHelpers::setCapabilityPointer(nullptr, result.tagAsPtr(), kj::mv(copyFrom), arena);",
          "",
          "[Added Lines]",
          "2710:       segment, capTable, structData, structPointers,",
          "2715: ListReader ListReader::imbue(CapTableReader* capTable) const {",
          "2716:   auto result = *this;",
          "2717:   result.capTable = capTable;",
          "2718:   return result;",
          "2719: }",
          "2724: OrphanBuilder OrphanBuilder::initStruct(",
          "2725:     BuilderArena* arena, CapTableBuilder* capTable, StructSize size) {",
          "2727:   StructBuilder builder = WireHelpers::initStructPointer(",
          "2728:       result.tagAsPtr(), nullptr, capTable, size, arena);",
          "2730:   result.capTable = capTable;",
          "2736:     BuilderArena* arena, CapTableBuilder* capTable,",
          "2737:     ElementCount elementCount, ElementSize elementSize) {",
          "2740:       result.tagAsPtr(), nullptr, capTable, elementCount, elementSize, arena);",
          "2742:   result.capTable = capTable;",
          "2748:     BuilderArena* arena, CapTableBuilder* capTable,",
          "2749:     ElementCount elementCount, StructSize elementSize) {",
          "2752:       result.tagAsPtr(), nullptr, capTable, elementCount, elementSize, arena);",
          "2754:   result.capTable = capTable;",
          "2759: OrphanBuilder OrphanBuilder::initText(",
          "2760:     BuilderArena* arena, CapTableBuilder* capTable, ByteCount size) {",
          "2762:   auto allocation = WireHelpers::initTextPointer(result.tagAsPtr(), nullptr, capTable, size, arena);",
          "2764:   result.capTable = capTable;",
          "2769: OrphanBuilder OrphanBuilder::initData(",
          "2770:     BuilderArena* arena, CapTableBuilder* capTable, ByteCount size) {",
          "2772:   auto allocation = WireHelpers::initDataPointer(result.tagAsPtr(), nullptr, capTable, size, arena);",
          "2774:   result.capTable = capTable;",
          "2779: OrphanBuilder OrphanBuilder::copy(",
          "2780:     BuilderArena* arena, CapTableBuilder* capTable, StructReader copyFrom) {",
          "2782:   auto allocation = WireHelpers::setStructPointer(",
          "2783:       nullptr, capTable, result.tagAsPtr(), copyFrom, arena);",
          "2785:   result.capTable = capTable;",
          "2790: OrphanBuilder OrphanBuilder::copy(",
          "2791:     BuilderArena* arena, CapTableBuilder* capTable, ListReader copyFrom) {",
          "2793:   auto allocation = WireHelpers::setListPointer(",
          "2794:       nullptr, capTable, result.tagAsPtr(), copyFrom, arena);",
          "2796:   result.capTable = capTable;",
          "2801: OrphanBuilder OrphanBuilder::copy(",
          "2802:     BuilderArena* arena, CapTableBuilder* capTable, PointerReader copyFrom) {",
          "2805:       nullptr, capTable, result.tagAsPtr(),",
          "2806:       copyFrom.segment, copyFrom.capTable, copyFrom.pointer, copyFrom.nestingLimit, arena);",
          "2808:   result.capTable = capTable;",
          "2813: OrphanBuilder OrphanBuilder::copy(",
          "2814:     BuilderArena* arena, CapTableBuilder* capTable, Text::Reader copyFrom) {",
          "2817:       result.tagAsPtr(), nullptr, capTable, copyFrom, arena);",
          "2819:   result.capTable = capTable;",
          "2824: OrphanBuilder OrphanBuilder::copy(",
          "2825:     BuilderArena* arena, CapTableBuilder* capTable, Data::Reader copyFrom) {",
          "2828:       result.tagAsPtr(), nullptr, capTable, copyFrom, arena);",
          "2830:   result.capTable = capTable;",
          "2836: OrphanBuilder OrphanBuilder::copy(",
          "2837:     BuilderArena* arena, CapTableBuilder* capTable, kj::Own<ClientHook> copyFrom) {",
          "2839:   WireHelpers::setCapabilityPointer(nullptr, capTable, result.tagAsPtr(), kj::mv(copyFrom));",
          "2841:   result.capTable = capTable;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2753:   result.tagAsPtr()->listRef.set(ElementSize::BYTE, data.size() * ELEMENTS);",
          "2754:   result.segment = arena->addExternalSegment(words);",
          "2758:   result.location = const_cast<word*>(words.begin());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2860:   result.capTable = nullptr;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2764:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2766:   StructBuilder result = WireHelpers::getWritableStructPointer(",
          "2770:   location = reinterpret_cast<word*>(result.data);",
          "",
          "[Removed Lines]",
          "2767:       tagAsPtr(), location, segment, size, nullptr, segment->getArena());",
          "",
          "[Added Lines]",
          "2873:       tagAsPtr(), location, segment, capTable, size, nullptr, segment->getArena());",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2776:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2778:   ListBuilder result = WireHelpers::getWritableListPointer(",
          "",
          "[Removed Lines]",
          "2779:       tagAsPtr(), location, segment, elementSize, nullptr, segment->getArena());",
          "",
          "[Added Lines]",
          "2885:       tagAsPtr(), location, segment, capTable, elementSize, nullptr, segment->getArena());",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2790:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2792:   ListBuilder result = WireHelpers::getWritableStructListPointer(",
          "2796:   location = result.getLocation();",
          "",
          "[Removed Lines]",
          "2793:       tagAsPtr(), location, segment, elementSize, nullptr, segment->getArena());",
          "",
          "[Added Lines]",
          "2899:       tagAsPtr(), location, segment, capTable, elementSize, nullptr, segment->getArena());",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2802:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2806: }",
          "2808: Data::Builder OrphanBuilder::asData() {",
          "2809:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2813: }",
          "2815: StructReader OrphanBuilder::asStructReader(StructSize size) const {",
          "2816:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2817:   return WireHelpers::readStructPointer(",
          "2819: }",
          "2821: ListReader OrphanBuilder::asListReader(ElementSize elementSize) const {",
          "2822:   KJ_DASSERT(tagAsPtr()->isNull() == (location == nullptr));",
          "2823:   return WireHelpers::readListPointer(",
          "2825: }",
          "2827: #if !CAPNP_LITE",
          "2828: kj::Own<ClientHook> OrphanBuilder::asCapability() const {",
          "2830: }",
          "2831: #endif  // !CAPNP_LITE",
          "",
          "[Removed Lines]",
          "2805:   return WireHelpers::getWritableTextPointer(tagAsPtr(), location, segment, nullptr, 0 * BYTES);",
          "2812:   return WireHelpers::getWritableDataPointer(tagAsPtr(), location, segment, nullptr, 0 * BYTES);",
          "2818:       segment, tagAsPtr(), location, nullptr, kj::maxValue);",
          "2824:       segment, tagAsPtr(), location, nullptr, elementSize, kj::maxValue);",
          "2829:   return WireHelpers::readCapabilityPointer(segment, tagAsPtr(), kj::maxValue);",
          "",
          "[Added Lines]",
          "2911:   return WireHelpers::getWritableTextPointer(",
          "2912:       tagAsPtr(), location, segment, capTable, nullptr, 0 * BYTES);",
          "2919:   return WireHelpers::getWritableDataPointer(",
          "2920:       tagAsPtr(), location, segment, capTable, nullptr, 0 * BYTES);",
          "2926:       segment, capTable, tagAsPtr(), location, nullptr, kj::maxValue);",
          "2932:       segment, capTable, tagAsPtr(), location, nullptr, elementSize, kj::maxValue);",
          "2937:   return WireHelpers::readCapabilityPointer(segment, capTable, tagAsPtr(), kj::maxValue);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2878:     if (size <= oldSize) {",
          "2880:       for (uint i = size / ELEMENTS; i < oldSize / ELEMENTS; i++) {",
          "2882:       }",
          "2883:       ref->listRef.setInlineComposite(size * (elementWordCount / ELEMENTS));",
          "2884:       tag->setKindAndInlineCompositeListElementCount(WirePointer::STRUCT, size);",
          "",
          "[Removed Lines]",
          "2881:         WireHelpers::zeroObject(segment, tag, target + i * elementWordCount);",
          "",
          "[Added Lines]",
          "2989:         WireHelpers::zeroObject(segment, capTable, tag, target + i * elementWordCount);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2898:         tag->setKindAndInlineCompositeListElementCount(WirePointer::STRUCT, size);",
          "2899:       } else {",
          "2903:         ListBuilder newList = replacement.asStructList(structSize);",
          "2904:         word* element = target;",
          "2905:         for (uint i = 0; i < oldSize / ELEMENTS; i++) {",
          "2906:           newList.getStructElement(i * ELEMENTS).transferContentFrom(",
          "2908:                             reinterpret_cast<WirePointer*>(element + structSize.data),",
          "2909:                             structSize.data * BITS_PER_WORD, structSize.pointers));",
          "2910:           element += elementWordCount;",
          "",
          "[Removed Lines]",
          "2901:         OrphanBuilder replacement = initStructList(segment->getArena(), size, structSize);",
          "2907:               StructBuilder(segment, element,",
          "",
          "[Added Lines]",
          "3009:         OrphanBuilder replacement = initStructList(segment->getArena(), capTable, size, structSize);",
          "3015:               StructBuilder(segment, capTable, element,",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2932:         ref->listRef.set(ElementSize::POINTER, size);",
          "2933:       } else {",
          "2936:         ListBuilder newList = replacement.asList(ElementSize::POINTER);",
          "2937:         WirePointer* oldPointers = reinterpret_cast<WirePointer*>(target);",
          "2938:         for (uint i = 0; i < oldSize / ELEMENTS; i++) {",
          "2939:           newList.getPointerElement(i * ELEMENTS).transferFrom(",
          "2941:         }",
          "2943:       }",
          "",
          "[Removed Lines]",
          "2935:         OrphanBuilder replacement = initList(segment->getArena(), size, ElementSize::POINTER);",
          "2940:               PointerBuilder(segment, oldPointers + i));",
          "",
          "[Added Lines]",
          "3043:         OrphanBuilder replacement = initList(",
          "3044:             segment->getArena(), capTable, size, ElementSize::POINTER);",
          "3049:               PointerBuilder(segment, capTable, oldPointers + i));",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2965:         ref->listRef.set(elementSize, size);",
          "2966:       } else {",
          "2969:         ListBuilder newList = replacement.asList(elementSize);",
          "2970:         auto words = WireHelpers::roundBitsUpToWords(dataBitsPerElement(elementSize) * oldSize);",
          "2971:         memcpy(newList.ptr, target, words * BYTES_PER_WORD / BYTES);",
          "",
          "[Removed Lines]",
          "2968:         OrphanBuilder replacement = initList(segment->getArena(), size, elementSize);",
          "",
          "[Added Lines]",
          "3077:         OrphanBuilder replacement = initList(segment->getArena(), capTable, size, elementSize);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3001:   auto exception = kj::runCatchingExceptions([&]() {",
          "3002:     if (tagAsPtr()->isPositional()) {",
          "3004:     } else {",
          "3006:     }",
          "3008:     memset(&tag, 0, sizeof(tag));",
          "",
          "[Removed Lines]",
          "3003:       WireHelpers::zeroObject(segment, tagAsPtr(), location);",
          "3005:       WireHelpers::zeroObject(segment, tagAsPtr());",
          "",
          "[Added Lines]",
          "3112:       WireHelpers::zeroObject(segment, capTable, tagAsPtr(), location);",
          "3114:       WireHelpers::zeroObject(segment, capTable, tagAsPtr());",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.h||c++/src/capnp/layout.h": [
          "File: c++/src/capnp/layout.h -> c++/src/capnp/layout.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: class PointerBuilder: public kj::DisallowConstCopy {",
          "270: public:",
          "",
          "[Removed Lines]",
          "271:   inline PointerBuilder(): segment(nullptr), pointer(nullptr) {}",
          "273:   static inline PointerBuilder getRoot(SegmentBuilder* segment, word* location);",
          "",
          "[Added Lines]",
          "267: class CapTableReader {",
          "268: public:",
          "269: #if !CAPNP_LITE",
          "270:   virtual kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) = 0;",
          "272: #endif  // !CAPNP_LITE",
          "273: };",
          "275: class CapTableBuilder: public CapTableReader {",
          "276: public:",
          "277: #if !CAPNP_LITE",
          "278:   virtual uint injectCap(kj::Own<ClientHook>&& cap) = 0;",
          "283:   virtual void dropCap(uint index) = 0;",
          "285: #endif  // !CAPNP_LITE",
          "286: };",
          "294:   inline PointerBuilder(): segment(nullptr), capTable(nullptr), pointer(nullptr) {}",
          "296:   static inline PointerBuilder getRoot(",
          "297:       SegmentBuilder* segment, CapTableBuilder* capTable, word* location);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:   BuilderArena* getArena() const;",
          "328: private:",
          "329:   SegmentBuilder* segment;     // Memory segment in which the pointer resides.",
          "330:   WirePointer* pointer;        // Pointer to the pointer.",
          "335:   friend class StructBuilder;",
          "336:   friend class ListBuilder;",
          "",
          "[Removed Lines]",
          "332:   inline PointerBuilder(SegmentBuilder* segment, WirePointer* pointer)",
          "333:       : segment(segment), pointer(pointer) {}",
          "",
          "[Added Lines]",
          "352:   CapTableBuilder* getCapTable();",
          "355:   PointerBuilder imbue(CapTableBuilder* capTable);",
          "360:   CapTableBuilder* capTable;   // Table of capability indexes.",
          "363:   inline PointerBuilder(SegmentBuilder* segment, CapTableBuilder* capTable, WirePointer* pointer)",
          "364:       : segment(segment), capTable(capTable), pointer(pointer) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340: class PointerReader {",
          "341: public:",
          "",
          "[Removed Lines]",
          "342:   inline PointerReader(): segment(nullptr), pointer(nullptr), nestingLimit(0x7fffffff) {}",
          "344:   static PointerReader getRoot(SegmentReader* segment, const word* location, int nestingLimit);",
          "",
          "[Added Lines]",
          "373:   inline PointerReader()",
          "374:       : segment(nullptr), capTable(nullptr), pointer(nullptr), nestingLimit(0x7fffffff) {}",
          "376:   static PointerReader getRoot(SegmentReader* segment, CapTableReader* capTable,",
          "377:                                const word* location, int nestingLimit);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:   kj::Maybe<Arena&> getArena() const;",
          "381: private:",
          "382:   SegmentReader* segment;      // Memory segment in which the pointer resides.",
          "383:   const WirePointer* pointer;  // Pointer to the pointer.  null = treat as null pointer.",
          "385:   int nestingLimit;",
          "392:   friend class StructReader;",
          "393:   friend class ListReader;",
          "",
          "[Removed Lines]",
          "389:   inline PointerReader(SegmentReader* segment, const WirePointer* pointer, int nestingLimit)",
          "390:       : segment(segment), pointer(pointer), nestingLimit(nestingLimit) {}",
          "",
          "[Added Lines]",
          "414:   PointerReader imbue(CapTableReader* capTable) const;",
          "419:   CapTableReader* capTable;    // Table of capability indexes.",
          "426:   inline PointerReader(SegmentReader* segment, CapTableReader* capTable,",
          "427:                        const WirePointer* pointer, int nestingLimit)",
          "428:       : segment(segment), capTable(capTable), pointer(pointer), nestingLimit(nestingLimit) {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "400: class StructBuilder: public kj::DisallowConstCopy {",
          "401: public:",
          "404:   inline word* getLocation() { return reinterpret_cast<word*>(data); }",
          "",
          "[Removed Lines]",
          "402:   inline StructBuilder(): segment(nullptr), data(nullptr), pointers(nullptr) {}",
          "",
          "[Added Lines]",
          "440:   inline StructBuilder(): segment(nullptr), capTable(nullptr), data(nullptr), pointers(nullptr) {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "457:   BuilderArena* getArena();",
          "460: private:",
          "461:   SegmentBuilder* segment;     // Memory segment in which the struct resides.",
          "462:   void* data;                  // Pointer to the encoded data.",
          "463:   WirePointer* pointers;   // Pointer to the encoded pointers.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498:   CapTableBuilder* getCapTable();",
          "501:   StructBuilder imbue(CapTableBuilder* capTable);",
          "506:   CapTableBuilder* capTable;   // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "469:   WirePointerCount16 pointerCount;  // Size of the pointer section.",
          "472:                        BitCount dataSize, WirePointerCount pointerCount)",
          "474:         dataSize(dataSize), pointerCount(pointerCount) {}",
          "476:   friend class ListBuilder;",
          "",
          "[Removed Lines]",
          "471:   inline StructBuilder(SegmentBuilder* segment, void* data, WirePointer* pointers,",
          "473:       : segment(segment), data(data), pointers(pointers),",
          "",
          "[Added Lines]",
          "516:   inline StructBuilder(SegmentBuilder* segment, CapTableBuilder* capTable,",
          "517:                        void* data, WirePointer* pointers,",
          "519:       : segment(segment), capTable(capTable), data(data), pointers(pointers),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "481: class StructReader {",
          "482: public:",
          "483:   inline StructReader()",
          "485:         pointerCount(0), nestingLimit(0x7fffffff) {}",
          "487:   const void* getLocation() const { return data; }",
          "",
          "[Removed Lines]",
          "484:       : segment(nullptr), data(nullptr), pointers(nullptr), dataSize(0),",
          "",
          "[Added Lines]",
          "530:       : segment(nullptr), capTable(nullptr), data(nullptr), pointers(nullptr), dataSize(0),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "521: private:",
          "524:   const void* data;",
          "525:   const WirePointer* pointers;",
          "",
          "[Removed Lines]",
          "522:   SegmentReader* segment;  // Memory segment in which the struct resides.",
          "",
          "[Added Lines]",
          "567:   StructReader imbue(CapTableReader* capTable) const;",
          "571:   SegmentReader* segment;    // Memory segment in which the struct resides.",
          "572:   CapTableReader* capTable;  // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "539:                       BitCount dataSize, WirePointerCount pointerCount, int nestingLimit)",
          "541:         dataSize(dataSize), pointerCount(pointerCount),",
          "542:         nestingLimit(nestingLimit) {}",
          "",
          "[Removed Lines]",
          "538:   inline StructReader(SegmentReader* segment, const void* data, const WirePointer* pointers,",
          "540:       : segment(segment), data(data), pointers(pointers),",
          "",
          "[Added Lines]",
          "588:   inline StructReader(SegmentReader* segment, CapTableReader* capTable,",
          "589:                       const void* data, const WirePointer* pointers,",
          "591:       : segment(segment), capTable(capTable), data(data), pointers(pointers),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "563: class ListBuilder: public kj::DisallowConstCopy {",
          "564: public:",
          "565:   inline explicit ListBuilder(ElementSize elementSize)",
          "567:         step(0 * BITS / ELEMENTS), elementSize(elementSize) {}",
          "569:   MSVC_DEFAULT_ASSIGNMENT_WORKAROUND(, ListBuilder)",
          "",
          "[Removed Lines]",
          "566:       : segment(nullptr), ptr(nullptr), elementCount(0 * ELEMENTS),",
          "",
          "[Added Lines]",
          "617:       : segment(nullptr), capTable(nullptr), ptr(nullptr), elementCount(0 * ELEMENTS),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "606:   BuilderArena* getArena();",
          "609: private:",
          "612:   byte* ptr;  // Pointer to list content.",
          "",
          "[Removed Lines]",
          "610:   SegmentBuilder* segment;  // Memory segment in which the list resides.",
          "",
          "[Added Lines]",
          "660:   CapTableBuilder* getCapTable();",
          "663:   ListBuilder imbue(CapTableBuilder* capTable);",
          "667:   SegmentBuilder* segment;    // Memory segment in which the list resides.",
          "668:   CapTableBuilder* capTable;  // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "629:                      decltype(BITS / ELEMENTS) step, ElementCount size,",
          "630:                      BitCount structDataSize, WirePointerCount structPointerCount,",
          "631:                      ElementSize elementSize)",
          "633:         elementCount(size), step(step), structDataSize(structDataSize),",
          "634:         structPointerCount(structPointerCount), elementSize(elementSize) {}",
          "",
          "[Removed Lines]",
          "628:   inline ListBuilder(SegmentBuilder* segment, void* ptr,",
          "632:       : segment(segment), ptr(reinterpret_cast<byte*>(ptr)),",
          "",
          "[Added Lines]",
          "686:   inline ListBuilder(SegmentBuilder* segment, CapTableBuilder* capTable, void* ptr,",
          "690:       : segment(segment), capTable(capTable), ptr(reinterpret_cast<byte*>(ptr)),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "641: class ListReader {",
          "642: public:",
          "643:   inline explicit ListReader(ElementSize elementSize)",
          "648:   MSVC_DEFAULT_ASSIGNMENT_WORKAROUND(const, ListReader)",
          "",
          "[Removed Lines]",
          "644:       : segment(nullptr), ptr(nullptr), elementCount(0), step(0 * BITS / ELEMENTS),",
          "645:         structDataSize(0), structPointerCount(0), elementSize(elementSize),",
          "646:         nestingLimit(0x7fffffff) {}",
          "",
          "[Added Lines]",
          "702:       : segment(nullptr), capTable(nullptr), ptr(nullptr), elementCount(0),",
          "703:         step(0 * BITS / ELEMENTS), structDataSize(0), structPointerCount(0),",
          "704:         elementSize(elementSize), nestingLimit(0x7fffffff) {}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "667:   StructReader getStructElement(ElementCount index) const;",
          "669: private:",
          "672:   const byte* ptr;  // Pointer to list content.",
          "",
          "[Removed Lines]",
          "670:   SegmentReader* segment;  // Memory segment in which the list resides.",
          "",
          "[Added Lines]",
          "727:   ListReader imbue(CapTableReader* capTable) const;",
          "731:   SegmentReader* segment;    // Memory segment in which the list resides.",
          "732:   CapTableReader* capTable;  // Table of capability indexes.",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "693:                     ElementCount elementCount, decltype(BITS / ELEMENTS) step,",
          "694:                     BitCount structDataSize, WirePointerCount structPointerCount,",
          "695:                     ElementSize elementSize, int nestingLimit)",
          "698:         structPointerCount(structPointerCount), elementSize(elementSize),",
          "699:         nestingLimit(nestingLimit) {}",
          "",
          "[Removed Lines]",
          "692:   inline ListReader(SegmentReader* segment, const void* ptr,",
          "696:       : segment(segment), ptr(reinterpret_cast<const byte*>(ptr)), elementCount(elementCount),",
          "697:         step(step), structDataSize(structDataSize),",
          "",
          "[Added Lines]",
          "754:   inline ListReader(SegmentReader* segment, CapTableReader* capTable, const void* ptr,",
          "758:       : segment(segment), capTable(capTable), ptr(reinterpret_cast<const byte*>(ptr)),",
          "759:         elementCount(elementCount), step(step), structDataSize(structDataSize),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "709: class OrphanBuilder {",
          "710: public:",
          "712:   OrphanBuilder(const OrphanBuilder& other) = delete;",
          "713:   inline OrphanBuilder(OrphanBuilder&& other) noexcept;",
          "714:   inline ~OrphanBuilder() noexcept(false);",
          "729: #if !CAPNP_LITE",
          "731: #endif  // !CAPNP_LITE",
          "733:   static OrphanBuilder referenceExternalData(BuilderArena* arena, Data::Reader data);",
          "",
          "[Removed Lines]",
          "711:   inline OrphanBuilder(): segment(nullptr), location(nullptr) { memset(&tag, 0, sizeof(tag)); }",
          "716:   static OrphanBuilder initStruct(BuilderArena* arena, StructSize size);",
          "717:   static OrphanBuilder initList(BuilderArena* arena, ElementCount elementCount,",
          "718:                                 ElementSize elementSize);",
          "719:   static OrphanBuilder initStructList(BuilderArena* arena, ElementCount elementCount,",
          "720:                                       StructSize elementSize);",
          "721:   static OrphanBuilder initText(BuilderArena* arena, ByteCount size);",
          "722:   static OrphanBuilder initData(BuilderArena* arena, ByteCount size);",
          "724:   static OrphanBuilder copy(BuilderArena* arena, StructReader copyFrom);",
          "725:   static OrphanBuilder copy(BuilderArena* arena, ListReader copyFrom);",
          "726:   static OrphanBuilder copy(BuilderArena* arena, PointerReader copyFrom);",
          "727:   static OrphanBuilder copy(BuilderArena* arena, Text::Reader copyFrom);",
          "728:   static OrphanBuilder copy(BuilderArena* arena, Data::Reader copyFrom);",
          "730:   static OrphanBuilder copy(BuilderArena* arena, kj::Own<ClientHook> copyFrom);",
          "",
          "[Added Lines]",
          "773:   inline OrphanBuilder(): segment(nullptr), capTable(nullptr), location(nullptr) {",
          "774:     memset(&tag, 0, sizeof(tag));",
          "775:   }",
          "780:   static OrphanBuilder initStruct(BuilderArena* arena, CapTableBuilder* capTable, StructSize size);",
          "781:   static OrphanBuilder initList(BuilderArena* arena, CapTableBuilder* capTable,",
          "782:                                 ElementCount elementCount, ElementSize elementSize);",
          "783:   static OrphanBuilder initStructList(BuilderArena* arena, CapTableBuilder* capTable,",
          "784:                                       ElementCount elementCount, StructSize elementSize);",
          "785:   static OrphanBuilder initText(BuilderArena* arena, CapTableBuilder* capTable, ByteCount size);",
          "786:   static OrphanBuilder initData(BuilderArena* arena, CapTableBuilder* capTable, ByteCount size);",
          "788:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, StructReader copyFrom);",
          "789:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, ListReader copyFrom);",
          "790:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, PointerReader copyFrom);",
          "791:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, Text::Reader copyFrom);",
          "792:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable, Data::Reader copyFrom);",
          "794:   static OrphanBuilder copy(BuilderArena* arena, CapTableBuilder* capTable,",
          "795:                             kj::Own<ClientHook> copyFrom);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "787:   SegmentBuilder* segment;",
          "790:   word* location;",
          "796:     memcpy(&tag, tagPtr, sizeof(tag));",
          "797:   }",
          "",
          "[Removed Lines]",
          "794:   inline OrphanBuilder(const void* tagPtr, SegmentBuilder* segment, word* location)",
          "795:       : segment(segment), location(location) {",
          "",
          "[Added Lines]",
          "855:   CapTableBuilder* capTable;",
          "862:   inline OrphanBuilder(const void* tagPtr, SegmentBuilder* segment,",
          "863:                        CapTableBuilder* capTable, word* location)",
          "864:       : segment(segment), capTable(capTable), location(location) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "820: template <> typename Data::Builder PointerBuilder::getBlob<Data>(const void* defaultValue, ByteCount defaultSize);",
          "821: template <> typename Data::Reader PointerReader::getBlob<Data>(const void* defaultValue, ByteCount defaultSize) const;",
          "825: }",
          "827: inline PointerReader PointerReader::getRootUnchecked(const word* location) {",
          "829: }",
          "",
          "[Removed Lines]",
          "823: inline PointerBuilder PointerBuilder::getRoot(SegmentBuilder* segment, word* location) {",
          "824:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(location));",
          "828:   return PointerReader(nullptr, reinterpret_cast<const WirePointer*>(location), 0x7fffffff);",
          "",
          "[Added Lines]",
          "892: inline PointerBuilder PointerBuilder::getRoot(",
          "893:     SegmentBuilder* segment, CapTableBuilder* capTable, word* location) {",
          "894:   return PointerBuilder(segment, capTable, reinterpret_cast<WirePointer*>(location));",
          "898:   return PointerReader(nullptr, nullptr,",
          "899:                        reinterpret_cast<const WirePointer*>(location), 0x7fffffff);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "835: }",
          "837: inline _::ListBuilder StructBuilder::getPointerSectionAsList() {",
          "839:                         pointerCount * (1 * ELEMENTS / POINTERS),",
          "840:                         0 * BITS, 1 * POINTERS, ElementSize::POINTER);",
          "841: }",
          "",
          "[Removed Lines]",
          "838:   return _::ListBuilder(segment, pointers, 1 * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "",
          "[Added Lines]",
          "909:   return _::ListBuilder(segment, capTable, pointers, 1 * POINTERS * BITS_PER_POINTER / ELEMENTS,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "909: inline PointerBuilder StructBuilder::getPointerField(WirePointerCount ptrIndex) {",
          "912:       reinterpret_cast<word*>(pointers) + ptrIndex * WORDS_PER_POINTER));",
          "913: }",
          "",
          "[Removed Lines]",
          "911:   return PointerBuilder(segment, reinterpret_cast<WirePointer*>(",
          "",
          "[Added Lines]",
          "982:   return PointerBuilder(segment, capTable, reinterpret_cast<WirePointer*>(",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "919: }",
          "921: inline _::ListReader StructReader::getPointerSectionAsList() {",
          "923:                        1 * POINTERS * BITS_PER_POINTER / ELEMENTS, 0 * BITS, 1 * POINTERS,",
          "924:                        ElementSize::POINTER, nestingLimit);",
          "925: }",
          "",
          "[Removed Lines]",
          "922:   return _::ListReader(segment, pointers, pointerCount * (1 * ELEMENTS / POINTERS),",
          "",
          "[Added Lines]",
          "993:   return _::ListReader(segment, capTable, pointers, pointerCount * (1 * ELEMENTS / POINTERS),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "967: inline PointerReader StructReader::getPointerField(WirePointerCount ptrIndex) const {",
          "968:   if (ptrIndex < pointerCount) {",
          "971:         reinterpret_cast<const word*>(pointers) + ptrIndex * WORDS_PER_POINTER), nestingLimit);",
          "972:   } else{",
          "973:     return PointerReader();",
          "",
          "[Removed Lines]",
          "970:     return PointerReader(segment, reinterpret_cast<const WirePointer*>(",
          "",
          "[Added Lines]",
          "1041:     return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1034: inline void ListBuilder::setDataElement<Void>(ElementCount index, Void value) {}",
          "1036: inline PointerBuilder ListBuilder::getPointerElement(ElementCount index) {",
          "1038:       reinterpret_cast<WirePointer*>(ptr + index * step / BITS_PER_BYTE));",
          "1039: }",
          "",
          "[Removed Lines]",
          "1037:   return PointerBuilder(segment,",
          "",
          "[Added Lines]",
          "1108:   return PointerBuilder(segment, capTable,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1061: }",
          "1063: inline PointerReader ListReader::getPointerElement(ElementCount index) const {",
          "1065:       reinterpret_cast<const WirePointer*>(ptr + index * step / BITS_PER_BYTE), nestingLimit);",
          "1066: }",
          "1070: inline OrphanBuilder::OrphanBuilder(OrphanBuilder&& other) noexcept",
          "1072:   memcpy(&tag, &other.tag, sizeof(tag));  // Needs memcpy to comply with aliasing rules.",
          "1073:   other.segment = nullptr;",
          "1074:   other.location = nullptr;",
          "",
          "[Removed Lines]",
          "1064:   return PointerReader(segment,",
          "1071:     : segment(other.segment), location(other.location) {",
          "",
          "[Added Lines]",
          "1135:   return PointerReader(segment, capTable,",
          "1142:     : segment(other.segment), capTable(other.capTable), location(other.location) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1088:   if (segment != nullptr) euthanize();",
          "1089:   segment = other.segment;",
          "1090:   location = other.location;",
          "1091:   memcpy(&tag, &other.tag, sizeof(tag));  // Needs memcpy to comply with aliasing rules.",
          "1092:   other.segment = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:   capTable = other.capTable;",
          "",
          "---------------"
        ],
        "c++/src/capnp/message.c++||c++/src/capnp/message.c++": [
          "File: c++/src/capnp/message.c++ -> c++/src/capnp/message.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: namespace capnp {",
          "35: MessageReader::MessageReader(ReaderOptions options): options(options), allocatedArena(false) {}",
          "36: MessageReader::~MessageReader() noexcept(false) {",
          "37:   if (allocatedArena) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: namespace {",
          "37: class DummyCapTableReader: public _::CapTableReader {",
          "38: public:",
          "39:   kj::Maybe<kj::Own<ClientHook>> extractCap(uint index) override {",
          "40:     return nullptr;",
          "41:   }",
          "42: };",
          "43: static constexpr DummyCapTableReader dummyCapTableReader = DummyCapTableReader();",
          "45: }  // namespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     return AnyPointer::Reader();",
          "56:   }",
          "58:   return AnyPointer::Reader(_::PointerReader::getRoot(",
          "60: }",
          "",
          "[Removed Lines]",
          "59:       segment, segment->getStartPtr(), options.nestingLimit));",
          "",
          "[Added Lines]",
          "72:       segment, const_cast<DummyCapTableReader*>(&dummyCapTableReader),",
          "73:       segment->getStartPtr(), options.nestingLimit));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: AnyPointer::Builder MessageBuilder::getRootInternal() {",
          "98:   _::SegmentBuilder* rootSegment = getRootSegment();",
          "99:   return AnyPointer::Builder(_::PointerBuilder::getRoot(",
          "101: }",
          "103: kj::ArrayPtr<const kj::ArrayPtr<const word>> MessageBuilder::getSegmentsForOutput() {",
          "",
          "[Removed Lines]",
          "100:       rootSegment, rootSegment->getPtrUnchecked(0 * WORDS)));",
          "",
          "[Added Lines]",
          "114:       rootSegment, arena()->getLocalCapTable(), rootSegment->getPtrUnchecked(0 * WORDS)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:   }",
          "109: }",
          "121: Orphanage MessageBuilder::getOrphanage() {",
          "124:   if (!allocatedArena) getRootSegment();",
          "127: }",
          "",
          "[Removed Lines]",
          "111: #if !CAPNP_LITE",
          "112: kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> MessageBuilder::getCapTable() {",
          "113:   if (allocatedArena) {",
          "114:     return arena()->getCapTable();",
          "115:   } else {",
          "116:     return nullptr;",
          "117:   }",
          "118: }",
          "119: #endif  // !CAPNP_LITE",
          "126:   return Orphanage(arena());",
          "",
          "[Added Lines]",
          "130:   return Orphanage(arena(), arena()->getLocalCapTable());",
          "",
          "---------------"
        ],
        "c++/src/capnp/message.h||c++/src/capnp/message.h": [
          "File: c++/src/capnp/message.h -> c++/src/capnp/message.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: private:",
          "136:   ReaderOptions options;",
          "",
          "[Removed Lines]",
          "123: #if !CAPNP_LITE",
          "124:   void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTable);",
          "133: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   kj::ArrayPtr<const kj::ArrayPtr<const word>> getSegmentsForOutput();",
          "243:   Orphanage getOrphanage();",
          "245: private:",
          "",
          "[Removed Lines]",
          "235: #if !CAPNP_LITE",
          "236:   kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable();",
          "241: #endif  // !CAPNP_LITE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/orphan.h||c++/src/capnp/orphan.h": [
          "File: c++/src/capnp/orphan.h -> c++/src/capnp/orphan.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: private:",
          "168:   _::BuilderArena* arena;",
          "172:   template <typename T, Kind = CAPNP_KIND(T)>",
          "173:   struct GetInnerBuilder;",
          "",
          "[Removed Lines]",
          "170:   inline explicit Orphanage(_::BuilderArena* arena): arena(arena) {}",
          "",
          "[Added Lines]",
          "169:   _::CapTableBuilder* capTable;",
          "171:   inline explicit Orphanage(_::BuilderArena* arena, _::CapTableBuilder* capTable)",
          "172:       : arena(arena), capTable(capTable) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318: template <typename BuilderType>",
          "319: Orphanage Orphanage::getForMessageContaining(BuilderType builder) {",
          "321: }",
          "323: template <typename RootType>",
          "324: Orphan<RootType> Orphanage::newOrphan() const {",
          "326: }",
          "328: template <typename T, Kind k>",
          "329: struct Orphanage::NewOrphanListImpl<List<T, k>> {",
          "332:   }",
          "333: };",
          "335: template <typename T>",
          "336: struct Orphanage::NewOrphanListImpl<List<T, Kind::STRUCT>> {",
          "339:   }",
          "340: };",
          "342: template <>",
          "343: struct Orphanage::NewOrphanListImpl<Text> {",
          "346:   }",
          "347: };",
          "349: template <>",
          "350: struct Orphanage::NewOrphanListImpl<Data> {",
          "353:   }",
          "354: };",
          "356: template <typename RootType>",
          "357: Orphan<RootType> Orphanage::newOrphan(uint size) const {",
          "359: }",
          "361: template <typename T>",
          "",
          "[Removed Lines]",
          "320:   return Orphanage(GetInnerBuilder<FromBuilder<BuilderType>>::apply(builder).getArena());",
          "325:   return Orphan<RootType>(_::OrphanBuilder::initStruct(arena, _::structSize<RootType>()));",
          "330:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "331:     return _::OrphanBuilder::initList(arena, size * ELEMENTS, _::ElementSizeForType<T>::value);",
          "337:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "338:     return _::OrphanBuilder::initStructList(arena, size * ELEMENTS, _::structSize<T>());",
          "344:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "345:     return _::OrphanBuilder::initText(arena, size * BYTES);",
          "351:   static inline _::OrphanBuilder apply(_::BuilderArena* arena, uint size) {",
          "352:     return _::OrphanBuilder::initData(arena, size * BYTES);",
          "358:   return Orphan<RootType>(NewOrphanListImpl<RootType>::apply(arena, size));",
          "",
          "[Added Lines]",
          "322:   auto inner = GetInnerBuilder<FromBuilder<BuilderType>>::apply(builder);",
          "323:   return Orphanage(inner.getArena(), inner.getCapTable());",
          "328:   return Orphan<RootType>(_::OrphanBuilder::initStruct(arena, capTable, _::structSize<RootType>()));",
          "333:   static inline _::OrphanBuilder apply(",
          "334:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "335:     return _::OrphanBuilder::initList(",
          "336:         arena, capTable, size * ELEMENTS, _::ElementSizeForType<T>::value);",
          "342:   static inline _::OrphanBuilder apply(",
          "343:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "344:     return _::OrphanBuilder::initStructList(",
          "345:         arena, capTable, size * ELEMENTS, _::structSize<T>());",
          "351:   static inline _::OrphanBuilder apply(",
          "352:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "353:     return _::OrphanBuilder::initText(arena, capTable, size * BYTES);",
          "359:   static inline _::OrphanBuilder apply(",
          "360:       _::BuilderArena* arena, _::CapTableBuilder* capTable, uint size) {",
          "361:     return _::OrphanBuilder::initData(arena, capTable, size * BYTES);",
          "367:   return Orphan<RootType>(NewOrphanListImpl<RootType>::apply(arena, capTable, size));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "382: template <typename Reader>",
          "383: inline Orphan<FromReader<Reader>> Orphanage::newOrphanCopy(const Reader& copyFrom) const {",
          "384:   return Orphan<FromReader<Reader>>(_::OrphanBuilder::copy(",
          "386: }",
          "387: template <typename Reader>",
          "388: inline Orphan<FromReader<Reader>> Orphanage::newOrphanCopy(Reader& copyFrom) const {",
          "",
          "[Removed Lines]",
          "385:       arena, GetInnerReader<FromReader<Reader>>::apply(copyFrom)));",
          "",
          "[Added Lines]",
          "394:       arena, capTable, GetInnerReader<FromReader<Reader>>::apply(copyFrom)));",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc-test.c++||c++/src/capnp/rpc-test.c++": [
          "File: c++/src/capnp/rpc-test.c++ -> c++/src/capnp/rpc-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:         return message.getRoot<AnyPointer>();",
          "245:       }",
          "251:       kj::Array<word> data;",
          "252:       FlatArrayMessageReader message;",
          "253:     };",
          "",
          "[Removed Lines]",
          "247:       void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>>&& capTable) override {",
          "248:         message.initCapTable(kj::mv(capTable));",
          "249:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:         return message.getRoot<AnyPointer>();",
          "264:       }",
          "270:       void send() override {",
          "271:         if (connection.networkException != nullptr) {",
          "272:           return;",
          "",
          "[Removed Lines]",
          "266:       kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() override {",
          "267:         return message.getCapTable();",
          "268:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc-twoparty.c++||c++/src/capnp/rpc-twoparty.c++": [
          "File: c++/src/capnp/rpc-twoparty.c++ -> c++/src/capnp/rpc-twoparty.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     return message.getRoot<AnyPointer>();",
          "82:   }",
          "88:   void send() override {",
          "89:     network.previousWrite = KJ_ASSERT_NONNULL(network.previousWrite, \"already shut down\")",
          "90:         .then([&]() {",
          "",
          "[Removed Lines]",
          "84:   kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() override {",
          "85:     return message.getCapTable();",
          "86:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     return message->getRoot<AnyPointer>();",
          "113:   }",
          "119: private:",
          "120:   kj::Own<MessageReader> message;",
          "121: };",
          "",
          "[Removed Lines]",
          "115:   void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>>&& capTable) override {",
          "116:     message->initCapTable(kj::mv(capTable));",
          "117:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc.c++||c++/src/capnp/rpc.c++": [
          "File: c++/src/capnp/rpc.c++ -> c++/src/capnp/rpc.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322:               firstSegmentSize(sizeHint, messageSizeHint<rpc::Call>() +",
          "1323:                   sizeInWords<rpc::Payload>() + MESSAGE_TARGET_SIZE_HINT))),",
          "1324:           callBuilder(message->getBody().getAs<rpc::Message>().initCall()),",
          "1327:     inline AnyPointer::Builder getRoot() {",
          "1328:       return paramsBuilder;",
          "",
          "[Removed Lines]",
          "1325:           paramsBuilder(callBuilder.getParams().getContent()) {}",
          "",
          "[Added Lines]",
          "1325:           paramsBuilder(capTable.imbue(callBuilder.getParams().getContent())) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1418:     kj::Own<RpcClient> target;",
          "1419:     kj::Own<OutgoingRpcMessage> message;",
          "1420:     rpc::Call::Builder callBuilder;",
          "1421:     AnyPointer::Builder paramsBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420:     BuilderCapabilityTable capTable;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1428:     SendInternalResult sendInternal(bool isTailCall) {",
          "1430:       auto exports = connectionState->writeDescriptors(",
          "1434:       QuestionId questionId;",
          "",
          "[Removed Lines]",
          "1431:           message->getCapTable(), callBuilder.getParams());",
          "",
          "[Added Lines]",
          "1432:           capTable.getTable(), callBuilder.getParams());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1560:     RpcResponseImpl(RpcConnectionState& connectionState,",
          "1561:                     kj::Own<QuestionRef>&& questionRef,",
          "1562:                     kj::Own<IncomingRpcMessage>&& message,",
          "1563:                     AnyPointer::Reader results)",
          "1564:         : connectionState(kj::addRef(connectionState)),",
          "1565:           message(kj::mv(message)),",
          "1567:           questionRef(kj::mv(questionRef)) {}",
          "1569:     AnyPointer::Reader getResults() override {",
          "",
          "[Removed Lines]",
          "1566:           reader(results),",
          "",
          "[Added Lines]",
          "1564:                     kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTableArray,",
          "1568:           capTable(kj::mv(capTableArray)),",
          "1569:           reader(capTable.imbue(results)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1577:   private:",
          "1578:     kj::Own<RpcConnectionState> connectionState;",
          "1579:     kj::Own<IncomingRpcMessage> message;",
          "1580:     AnyPointer::Reader reader;",
          "1581:     kj::Own<QuestionRef> questionRef;",
          "1582:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1583:     ReaderCapabilityTable capTable;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1599:           payload(payload) {}",
          "1601:     AnyPointer::Builder getResultsBuilder() override {",
          "1603:     }",
          "1605:     kj::Maybe<kj::Array<ExportId>> send() {",
          "",
          "[Removed Lines]",
          "1602:       return payload.getContent();",
          "",
          "[Added Lines]",
          "1606:       return capTable.imbue(payload.getContent());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1611:       auto exports = connectionState.writeDescriptors(capTable, payload);",
          "",
          "[Removed Lines]",
          "1610:       auto capTable = message->getCapTable();",
          "",
          "[Added Lines]",
          "1614:       auto capTable = this->capTable.getTable();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1632:   private:",
          "1633:     RpcConnectionState& connectionState;",
          "1634:     kj::Own<OutgoingRpcMessage> message;",
          "1635:     rpc::Payload::Builder payload;",
          "1636:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1639:     BuilderCapabilityTable capTable;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1661:   class RpcCallContext final: public CallContextHook, public kj::Refcounted {",
          "1662:   public:",
          "1663:     RpcCallContext(RpcConnectionState& connectionState, AnswerId answerId,",
          "1665:                    bool redirectResults, kj::Own<kj::PromiseFulfiller<void>>&& cancelFulfiller)",
          "1666:         : connectionState(kj::addRef(connectionState)),",
          "1667:           answerId(answerId),",
          "1668:           request(kj::mv(request)),",
          "1670:           returnMessage(nullptr),",
          "1671:           redirectResults(redirectResults),",
          "1672:           cancelFulfiller(kj::mv(cancelFulfiller)) {}",
          "",
          "[Removed Lines]",
          "1664:                    kj::Own<IncomingRpcMessage>&& request, const AnyPointer::Reader& params,",
          "1669:           params(params),",
          "",
          "[Added Lines]",
          "1669:                    kj::Own<IncomingRpcMessage>&& request,",
          "1670:                    kj::Array<kj::Maybe<kj::Own<ClientHook>>> capTableArray,",
          "1671:                    const AnyPointer::Reader& params,",
          "1676:           paramsCapTable(kj::mv(capTableArray)),",
          "1677:           params(paramsCapTable.imbue(params)),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1883:     kj::Maybe<kj::Own<IncomingRpcMessage>> request;",
          "1884:     AnyPointer::Reader params;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1892:     ReaderCapabilityTable paramsCapTable;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2117:         cap = bootstrapFactory.baseCreateFor(conn.baseGetPeerVatId());",
          "2118:       }",
          "2120:       auto payload = ret.initResults();",
          "2127:     })) {",
          "2128:       fromException(*exception, ret.initException());",
          "2129:       capHook = newBrokenCap(kj::mv(*exception));",
          "",
          "[Removed Lines]",
          "2121:       payload.getContent().setAs<Capability>(kj::mv(cap));",
          "2123:       auto capTable = response->getCapTable();",
          "2124:       KJ_DASSERT(capTable.size() == 1);",
          "2125:       resultExports = writeDescriptors(capTable, payload);",
          "2126:       capHook = KJ_ASSERT_NONNULL(capTable[0])->addRef();",
          "",
          "[Added Lines]",
          "2129:       BuilderCapabilityTable capTable;",
          "2131:       capTable.imbue(payload.getContent()).setAs<Capability>(kj::mv(cap));",
          "2133:       auto capTableArray = capTable.getTable();",
          "2134:       KJ_DASSERT(capTableArray.size() == 1);",
          "2135:       resultExports = writeDescriptors(capTableArray, payload);",
          "2136:       capHook = KJ_ASSERT_NONNULL(capTableArray[0])->addRef();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2167:     }",
          "2169:     auto payload = call.getParams();",
          "2171:     auto cancelPaf = kj::newPromiseAndFulfiller<void>();",
          "2173:     AnswerId answerId = call.getQuestionId();",
          "2175:     auto context = kj::refcounted<RpcCallContext>(",
          "2177:         redirectResults, kj::mv(cancelPaf.fulfiller));",
          "",
          "[Removed Lines]",
          "2170:     message->initCapTable(receiveCaps(payload.getCapTable()));",
          "",
          "[Added Lines]",
          "2180:     auto capTableArray = receiveCaps(payload.getCapTable());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2334:             }",
          "2336:             auto payload = ret.getResults();",
          "2338:             questionRef->fulfill(kj::refcounted<RpcResponseImpl>(",
          "2340:             break;",
          "2341:           }",
          "",
          "[Removed Lines]",
          "2337:             message->initCapTable(receiveCaps(payload.getCapTable()));",
          "",
          "[Added Lines]",
          "2347:             auto capTableArray = receiveCaps(payload.getCapTable());",
          "2350:                 kj::mv(capTableArray), payload.getContent()));",
          "",
          "---------------"
        ],
        "c++/src/capnp/rpc.h||c++/src/capnp/rpc.h": [
          "File: c++/src/capnp/rpc.h -> c++/src/capnp/rpc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   virtual void send() = 0;",
          "",
          "[Removed Lines]",
          "246:   virtual kj::ArrayPtr<kj::Maybe<kj::Own<ClientHook>>> getCapTable() = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:   virtual AnyPointer::Reader getBody() = 0;",
          "264: };",
          "266: template <typename VatId, typename ProvisionId, typename RecipientId,",
          "",
          "[Removed Lines]",
          "262:   virtual void initCapTable(kj::Array<kj::Maybe<kj::Own<ClientHook>>>&& capTable) = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6787dca796a6eb4f78261d50d7f54dec915c59ba",
      "candidate_info": {
        "commit_hash": "6787dca796a6eb4f78261d50d7f54dec915c59ba",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/6787dca796a6eb4f78261d50d7f54dec915c59ba",
        "files": [
          "c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++"
        ],
        "message": "SECURITY: Additional CPU amplification case.\n\nUnfortunately, commit 104870608fde3c698483fdef6b97f093fc15685d missed a case of CPU amplification via struct lists with zero-sized elements.\n\nSee advisory: https://github.com/sandstorm-io/capnproto/blob/master/security-advisories/2015-03-05-0-c++-addl-cpu-amplification.md",
        "before_after_code_files": [
          "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
          "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1434: }",
          "1436: TEST(Encoding, EmptyStructListAmplification) {",
          "1441:   auto segments = builder.getSegmentsForOutput();",
          "1445:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1448: }",
          "1450: TEST(Encoding, Constants) {",
          "",
          "[Removed Lines]",
          "1437:   MallocMessageBuilder builder;",
          "1438:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1439:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
          "1442:   EXPECT_EQ(1, segments.size());",
          "1443:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1446:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1447:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "",
          "[Added Lines]",
          "1437:   MallocMessageBuilder builder(1024);",
          "1438:   auto listList = builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1439:       .initAs<List<List<test::TestEmptyStruct>>>(500);",
          "1441:   for (uint i = 0; i < listList.size(); i++) {",
          "1442:     listList.init(i, 1u << 28);",
          "1443:   }",
          "1446:   ASSERT_EQ(1, segments.size());",
          "1449:   auto root = reader.getRoot<test::TestAnyPointer>();",
          "1450:   auto listListReader = root.getAnyPointerField().getAs<List<List<TestAllTypes>>>();",
          "1451:   EXPECT_NONFATAL_FAILURE(listListReader[0]);",
          "1452:   EXPECT_NONFATAL_FAILURE(listListReader[10]);",
          "1454:   EXPECT_EQ(segments[0].size() - 1, root.totalSize().wordCount);",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:             WordCount dataSize = elementTag->structRef.dataSize.get();",
          "556:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "559:             uint count = elementTag->inlineCompositeListElementCount() / ELEMENTS;",
          "566:               }",
          "567:             }",
          "",
          "[Removed Lines]",
          "558:             word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "560:             for (uint i = 0; i < count; i++) {",
          "561:               pos += dataSize;",
          "563:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "564:                 zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "565:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "559:             if (pointerCount > 0 * POINTERS) {",
          "560:               word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "561:               for (uint i = 0; i < count; i++) {",
          "562:                 pos += dataSize;",
          "564:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "565:                   zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "566:                   pos += POINTER_SIZE_IN_WORDS;",
          "567:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:               return result;",
          "681:             }",
          "685:             const WirePointer* elementTag = reinterpret_cast<const WirePointer*>(ptr);",
          "686:             ElementCount count = elementTag->inlineCompositeListElementCount();",
          "",
          "[Removed Lines]",
          "683:             result.wordCount += wordCount + POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "690:               return result;",
          "691:             }",
          "695:                        \"Struct list pointer's elements overran size.\") {",
          "696:               return result;",
          "697:             }",
          "699:             WordCount dataSize = elementTag->structRef.dataSize.get();",
          "700:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "710:               }",
          "711:             }",
          "712:             break;",
          "",
          "[Removed Lines]",
          "693:             KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *",
          "694:                        ElementCount64(count) <= wordCount,",
          "702:             const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "703:             for (uint i = 0; i < count / ELEMENTS; i++) {",
          "704:               pos += dataSize;",
          "706:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "707:                 result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "708:                                     nestingLimit);",
          "709:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "693:             auto actualSize = elementTag->structRef.wordSize() / ELEMENTS * ElementCount64(count);",
          "694:             KJ_REQUIRE(actualSize <= wordCount,",
          "701:             result.wordCount += actualSize + POINTER_SIZE_IN_WORDS;",
          "706:             if (pointerCount > 0 * POINTERS) {",
          "707:               const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "708:               for (uint i = 0; i < count / ELEMENTS; i++) {",
          "709:                 pos += dataSize;",
          "711:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "712:                   result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "713:                                       nestingLimit);",
          "714:                   pos += POINTER_SIZE_IN_WORDS;",
          "715:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac00109ca0749efd04a4203d002afa00f6b6cd89",
      "candidate_info": {
        "commit_hash": "ac00109ca0749efd04a4203d002afa00f6b6cd89",
        "repo": "capnproto/capnproto",
        "commit_url": "https://github.com/capnproto/capnproto/commit/ac00109ca0749efd04a4203d002afa00f6b6cd89",
        "files": [
          "c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++"
        ],
        "message": "SECURITY: Additional CPU amplification case.\n\nUnfortunately, commit 104870608fde3c698483fdef6b97f093fc15685d missed a case of CPU amplification via struct lists with zero-sized elements.\n\nSee advisory: https://github.com/sandstorm-io/capnproto/blob/master/security-advisories/2015-03-05-0-c++-addl-cpu-amplification.md",
        "before_after_code_files": [
          "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
          "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ],
          "candidate": [
            "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++",
            "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++"
          ]
        }
      },
      "candidate_diff": {
        "c++/src/capnp/encoding-test.c++||c++/src/capnp/encoding-test.c++": [
          "File: c++/src/capnp/encoding-test.c++ -> c++/src/capnp/encoding-test.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "1501: }",
          "1503: TEST(Encoding, EmptyStructListAmplification) {",
          "1508:   auto segments = builder.getSegmentsForOutput();",
          "1512:   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());",
          "1515: }",
          "1517: TEST(Encoding, Constants) {",
          "",
          "[Removed Lines]",
          "1504:   MallocMessageBuilder builder;",
          "1505:   builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1506:       .initAs<List<test::TestEmptyStruct>>(1u << 28);",
          "1509:   EXPECT_EQ(1, segments.size());",
          "1510:   EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!",
          "1513:   auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();",
          "1514:   EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());",
          "",
          "[Added Lines]",
          "1504:   MallocMessageBuilder builder(1024);",
          "1505:   auto listList = builder.initRoot<test::TestAnyPointer>().getAnyPointerField()",
          "1506:       .initAs<List<List<test::TestEmptyStruct>>>(500);",
          "1508:   for (uint i = 0; i < listList.size(); i++) {",
          "1509:     listList.init(i, 1u << 28);",
          "1510:   }",
          "1513:   ASSERT_EQ(1, segments.size());",
          "1516:   auto root = reader.getRoot<test::TestAnyPointer>();",
          "1517:   auto listListReader = root.getAnyPointerField().getAs<List<List<TestAllTypes>>>();",
          "1518:   EXPECT_NONFATAL_FAILURE(listListReader[0]);",
          "1519:   EXPECT_NONFATAL_FAILURE(listListReader[10]);",
          "1521:   EXPECT_EQ(segments[0].size() - 1, root.totalSize().wordCount);",
          "",
          "---------------"
        ],
        "c++/src/capnp/layout.c++||c++/src/capnp/layout.c++": [
          "File: c++/src/capnp/layout.c++ -> c++/src/capnp/layout.c++",
          "--- Hunk 1 ---",
          "[Context before]",
          "534:             WordCount dataSize = elementTag->structRef.dataSize.get();",
          "535:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "538:             uint count = elementTag->inlineCompositeListElementCount() / ELEMENTS;",
          "545:               }",
          "546:             }",
          "",
          "[Removed Lines]",
          "537:             word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "539:             for (uint i = 0; i < count; i++) {",
          "540:               pos += dataSize;",
          "542:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "543:                 zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "544:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "538:             if (pointerCount > 0 * POINTERS) {",
          "539:               word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "540:               for (uint i = 0; i < count; i++) {",
          "541:                 pos += dataSize;",
          "543:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "544:                   zeroObject(segment, reinterpret_cast<WirePointer*>(pos));",
          "545:                   pos += POINTER_SIZE_IN_WORDS;",
          "546:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:               return result;",
          "658:             }",
          "662:             const WirePointer* elementTag = reinterpret_cast<const WirePointer*>(ptr);",
          "663:             ElementCount count = elementTag->inlineCompositeListElementCount();",
          "",
          "[Removed Lines]",
          "660:             result.wordCount += wordCount + POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667:               return result;",
          "668:             }",
          "672:                        \"Struct list pointer's elements overran size.\") {",
          "673:               return result;",
          "674:             }",
          "676:             WordCount dataSize = elementTag->structRef.dataSize.get();",
          "677:             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();",
          "687:               }",
          "688:             }",
          "689:             break;",
          "",
          "[Removed Lines]",
          "670:             KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *",
          "671:                        ElementCount64(count) <= wordCount,",
          "679:             const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "680:             for (uint i = 0; i < count / ELEMENTS; i++) {",
          "681:               pos += dataSize;",
          "683:               for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "684:                 result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "685:                                     nestingLimit);",
          "686:                 pos += POINTER_SIZE_IN_WORDS;",
          "",
          "[Added Lines]",
          "670:             auto actualSize = elementTag->structRef.wordSize() / ELEMENTS * ElementCount64(count);",
          "671:             KJ_REQUIRE(actualSize <= wordCount,",
          "678:             result.wordCount += actualSize + POINTER_SIZE_IN_WORDS;",
          "683:             if (pointerCount > 0 * POINTERS) {",
          "684:               const word* pos = ptr + POINTER_SIZE_IN_WORDS;",
          "685:               for (uint i = 0; i < count / ELEMENTS; i++) {",
          "686:                 pos += dataSize;",
          "688:                 for (uint j = 0; j < pointerCount / POINTERS; j++) {",
          "689:                   result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),",
          "690:                                       nestingLimit);",
          "691:                   pos += POINTER_SIZE_IN_WORDS;",
          "692:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}