{
  "cve_id": "CVE-2017-6413",
  "cve_desc": "The \"OpenID Connect Relying Party and OAuth 2.0 Resource Server\" (aka mod_auth_openidc) module before 2.1.6 for the Apache HTTP Server does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an \"AuthType oauth20\" configuration, which allows remote attackers to bypass authentication via crafted HTTP traffic.",
  "repo": "pingidentity/mod_auth_openidc",
  "patch_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
  "patch_info": {
    "commit_hash": "21e3728a825c41ab41efa75e664108051bb9665e",
    "repo": "pingidentity/mod_auth_openidc",
    "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/21e3728a825c41ab41efa75e664108051bb9665e",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h",
      "src/oauth.c"
    ],
    "message": "release 2.1.6 : security fix: scrub headers for \"AuthType oauth20\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
      "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
      "src/oauth.c||src/oauth.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6rc2],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.1.6],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "136:  oidc_cfg *cfg = ap_get_module_config(r->server->module_config,",
      "137:    &auth_openidc_module);",
      "",
      "[Removed Lines]",
      "135: static void oidc_scrub_headers(request_rec *r) {",
      "",
      "[Added Lines]",
      "135: void oidc_scrub_headers(request_rec *r) {",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
      "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "387: const char*oidc_request_state_get(request_rec *r, const char *key);",
      "388: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
      "389: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
      "392: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390: void oidc_scrub_headers(request_rec *r);",
      "",
      "---------------"
    ],
    "src/oauth.c||src/oauth.c": [
      "File: src/oauth.c -> src/oauth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "664:     \"Could not set remote user\");",
      "665:  }",
      "668:  char *authn_header = oidc_cfg_dir_authn_header(r);",
      "669:  int pass_headers = oidc_cfg_dir_pass_info_in_headers(r);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "671:  oidc_scrub_headers(r);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "192c2c291fd717c1249b577999003222d6296523",
      "candidate_info": {
        "commit_hash": "192c2c291fd717c1249b577999003222d6296523",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/192c2c291fd717c1249b577999003222d6296523",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/proto.c"
        ],
        "message": "fix public clients; add endpoint authentication method \"none\"\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "477: #define OIDC_PROTO_CLIENT_SECRET_POST  \"client_secret_post\"",
          "478: #define OIDC_PROTO_CLIENT_SECRET_JWT   \"client_secret_jwt\"",
          "479: #define OIDC_PROTO_PRIVATE_KEY_JWT     \"private_key_jwt\"",
          "481: #define OIDC_PROTO_BEARER  \"Bearer\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480: #define OIDC_PROTO_ENDPOINT_AUTH_NONE  \"none\"",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378: #define OIDC_ENDPOINT_AUTH_CLIENT_SECRET_BASIC \"client_secret_basic\"",
          "379: #define OIDC_ENDPOINT_AUTH_CLIENT_SECRET_JWT   \"client_secret_jwt\"",
          "380: #define OIDC_ENDPOINT_AUTH_PRIVATE_KEY_JWT     \"private_key_jwt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381: #define OIDC_ENDPOINT_AUTH_NONE                \"none\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:    OIDC_ENDPOINT_AUTH_CLIENT_SECRET_POST,",
          "389:    OIDC_ENDPOINT_AUTH_CLIENT_SECRET_BASIC,",
          "390:    OIDC_ENDPOINT_AUTH_CLIENT_SECRET_JWT,",
          "391:    NULL,",
          "392:    NULL };",
          "393:  if (has_private_key)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:    OIDC_ENDPOINT_AUTH_NONE,",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1806:  oidc_debug(r, \"token_endpoint_auth=%s\", token_endpoint_auth);",
          "1812:  if ((token_endpoint_auth == NULL) || (apr_strnatcmp(token_endpoint_auth,",
          "1814:   return oidc_proto_endpoint_auth_basic(r, client_id, client_secret,",
          "1815:     basic_auth_str);",
          "",
          "[Removed Lines]",
          "1809:  if ((token_endpoint_auth == NULL) && (client_secret == NULL))",
          "1810:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "1813:    OIDC_PROTO_CLIENT_SECRET_BASIC) == 0))",
          "",
          "[Added Lines]",
          "1810:  if ((token_endpoint_auth == NULL) && (client_secret != NULL))",
          "1811:   token_endpoint_auth = OIDC_PROTO_CLIENT_SECRET_BASIC;",
          "1814:    OIDC_PROTO_ENDPOINT_AUTH_NONE) != 0))",
          "1815:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "1819:  if ((client_secret == NULL) || (apr_strnatcmp(token_endpoint_auth,",
          "1820:    OIDC_PROTO_PRIVATE_KEY_JWT) != 0))",
          "1821:   return oidc_proto_endpoint_auth_none(r, client_id, params);",
          "1823:  if (apr_strnatcmp(token_endpoint_auth,",
          "1824:    OIDC_PROTO_CLIENT_SECRET_BASIC) == 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "805357a7f37b11b333a841b45fa83aa28a17e157",
      "candidate_info": {
        "commit_hash": "805357a7f37b11b333a841b45fa83aa28a17e157",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/805357a7f37b11b333a841b45fa83aa28a17e157",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac"
        ],
        "message": "document OIDCOAuthIntrospectionClientAuthBearerToken\n\n- thanks @cristichiru\n- bump to 2.3.3rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c809c63027fcfd7fa8a6a2d1c7d7358d547ec95",
      "candidate_info": {
        "commit_hash": "7c809c63027fcfd7fa8a6a2d1c7d7358d547ec95",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/7c809c63027fcfd7fa8a6a2d1c7d7358d547ec95",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/oauth.c",
          "src/proto.c"
        ],
        "message": "improve access token validation; bump to 2.3.3rc0\n\n- avoid crash when no OIDCOAuthClientID is set for remote access token\nvalidation\n- don't enforce \"iat\" slack checks on locally validated JWT access\ntokens\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/oauth.c||src/oauth.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/oauth.c||src/oauth.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.3rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:  oidc_debug(r, \"successfully parsed JWT with header: %s\",",
          "497:    jwt->header.value.str);",
          "502:   oidc_jwt_destroy(jwt);",
          "503:   return FALSE;",
          "504:  }",
          "",
          "[Removed Lines]",
          "500:  if (oidc_proto_validate_jwt(r, jwt, NULL, FALSE, FALSE,",
          "501:    c->provider.idtoken_iat_slack) == FALSE) {",
          "",
          "[Added Lines]",
          "502:  if (oidc_proto_validate_jwt(r, jwt, NULL, FALSE, FALSE, -1) == FALSE) {",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1225:   return TRUE;",
          "1226:  }",
          "1229:  if ((now - slack) > jwt->payload.iat) {",
          "1230:   oidc_error(r,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:  if (slack < 0) {",
          "1230:   oidc_debug(r, \"slack for JWT set < 0, do not enforce boundary check\");",
          "1231:   return TRUE;",
          "1232:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1843:  oidc_debug(r, \"token_endpoint_auth=%s\", token_endpoint_auth);",
          "1847:  if ((token_endpoint_auth == NULL) && (client_secret != NULL))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1851:  if (client_id == NULL) {",
          "1852:   oidc_debug(r, \"no client ID set: assume we don't need to authenticate\");",
          "1853:   return TRUE;",
          "1854:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b1ce7914c7faebc3c7f9e549e8baa9dbb9c1305",
      "candidate_info": {
        "commit_hash": "6b1ce7914c7faebc3c7f9e549e8baa9dbb9c1305",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/6b1ce7914c7faebc3c7f9e549e8baa9dbb9c1305",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/session.c"
        ],
        "message": "add token binding support for state and session cookies\n\nin conjunction with: https://github.com/zmartzone/mod_token_binding\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/session.c||src/session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.2.0rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:  apr_sha1_update(&sha1, nonce, strlen(nonce));",
          "245:  unsigned char hash[OIDC_SHA1_LEN];",
          "246:  apr_sha1_final(hash, &sha1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:  value = apr_table_get(r->subprocess_env, OIDC_TB_CFG_PROVIDED_ENV_VAR);",
          "246:  if (value != NULL) {",
          "247:   oidc_debug(r,",
          "248:     \"token binding environment variable %s found; adding its value to the state\",",
          "249:     OIDC_TB_CFG_PROVIDED_ENV_VAR);",
          "250:   apr_sha1_update(&sha1, value, strlen(value));",
          "251:  }",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: #define OIDC_COOKIE_EXT_SAME_SITE_LAX    \"SameSite=Lax\"",
          "195: #define OIDC_COOKIE_EXT_SAME_SITE_STRICT \"SameSite=Strict\"",
          "197: typedef struct oidc_jwks_uri_t {",
          "198:  const char *url;",
          "199:  int refresh_interval;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Token-Binding-ID-Provided\"",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "68: static apr_byte_t oidc_session_encode(request_rec *r, oidc_cfg *c,",
          "69:   oidc_session_t *z, char **s_value, apr_byte_t encrypt) {",
          "",
          "[Removed Lines]",
          "64: #define OIDC_SESSION_REMOTE_USER_KEY \"r\"",
          "66: #define OIDC_SESSION_EXPIRY_KEY      \"e\"",
          "",
          "[Added Lines]",
          "64: #define OIDC_SESSION_REMOTE_USER_KEY              \"r\"",
          "66: #define OIDC_SESSION_EXPIRY_KEY                   \"e\"",
          "68: #define OIDC_SESSION_PROVIDED_TOKEN_BINDING_KEY   \"ptb\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "130:    &auth_openidc_module);",
          "",
          "[Removed Lines]",
          "128: static apr_byte_t oidc_session_save_cache(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "",
          "[Added Lines]",
          "130: static apr_byte_t oidc_session_save_cache(request_rec *r, oidc_session_t *z,",
          "131:   apr_byte_t first_time) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "189:    &auth_openidc_module);",
          "190:  char *cookieValue = \"\";",
          "",
          "[Removed Lines]",
          "187: static apr_byte_t oidc_session_save_cookie(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "",
          "[Added Lines]",
          "190: static apr_byte_t oidc_session_save_cookie(request_rec *r, oidc_session_t *z,",
          "191:   apr_byte_t first_time) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:    &auth_openidc_module);",
          "214:  apr_byte_t rc = FALSE;",
          "217:  oidc_session_t *z = (*zz = apr_pcalloc(r->pool, sizeof(oidc_session_t)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:  const char *ses_p_tb_id = NULL, *env_p_tb_id = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:   } else {",
          "248:    oidc_session_get(r, z, OIDC_SESSION_REMOTE_USER_KEY,",
          "249:      &z->remote_user);",
          "250:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:    oidc_session_get(r, z, OIDC_SESSION_PROVIDED_TOKEN_BINDING_KEY,",
          "254:      &ses_p_tb_id);",
          "256:    if (ses_p_tb_id != NULL) {",
          "257:     env_p_tb_id = apr_table_get(r->subprocess_env,",
          "258:       OIDC_TB_CFG_PROVIDED_ENV_VAR);",
          "259:     if ((env_p_tb_id == NULL)",
          "260:       || (apr_strnatcmp(env_p_tb_id, ses_p_tb_id) != 0)) {",
          "261:      oidc_error(r,",
          "262:        \"the token binding ID stored in the session doesn't match the one presented by the user agent\");",
          "263:      oidc_session_free(r, z);",
          "264:      z->state = json_object();",
          "265:     }",
          "266:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "264:    &auth_openidc_module);",
          "266:  apr_byte_t rc = FALSE;",
          "268:  if (z->state != NULL) {",
          "269:   oidc_session_set(r, z, OIDC_SESSION_REMOTE_USER_KEY, z->remote_user);",
          "",
          "[Removed Lines]",
          "262: apr_byte_t oidc_session_save(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "",
          "[Added Lines]",
          "282: apr_byte_t oidc_session_save(request_rec *r, oidc_session_t *z,",
          "283:   apr_byte_t first_time) {",
          "288:  const char *p_tb_id = apr_table_get(r->subprocess_env,",
          "289:    OIDC_TB_CFG_PROVIDED_ENV_VAR);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "271:     json_integer(apr_time_sec(z->expiry)));",
          "272:  }",
          "274:  if (c->session_type == OIDC_SESSION_TYPE_SERVER_CACHE)",
          "276:   rc = oidc_session_save_cache(r, z, first_time);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:  if ((first_time) && (p_tb_id != NULL)) {",
          "298:   oidc_debug(r,",
          "299:     \"token binding environment variable %s found; adding its value to the session state\",",
          "300:     OIDC_TB_CFG_PROVIDED_ENV_VAR);",
          "301:   oidc_session_set(r, z, OIDC_SESSION_PROVIDED_TOKEN_BINDING_KEY,",
          "302:     p_tb_id);",
          "303:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "430:   if ((c->black_listed_claims != NULL)",
          "431:     && (apr_hash_get(c->black_listed_claims, name,",
          "432:       APR_HASH_KEY_STRING) != NULL)) {",
          "434:    is_allowed = FALSE;",
          "435:   }",
          "437:   if ((is_allowed == TRUE) && (c->white_listed_claims != NULL)",
          "438:     && (apr_hash_get(c->white_listed_claims, name,",
          "439:       APR_HASH_KEY_STRING) == NULL)) {",
          "441:    is_allowed = FALSE;",
          "442:   }",
          "",
          "[Removed Lines]",
          "433:    oidc_debug(r, \"removing blacklisted claim [%s]: '%s'\", session_key, name);",
          "440:    oidc_debug(r, \"removing non-whitelisted claim [%s]: '%s'\", session_key, name);",
          "",
          "[Added Lines]",
          "464:    oidc_debug(r, \"removing blacklisted claim [%s]: '%s'\", session_key,",
          "465:      name);",
          "472:    oidc_debug(r, \"removing non-whitelisted claim [%s]: '%s'\",",
          "473:      session_key, name);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "459: void oidc_session_set_userinfo_claims(request_rec *r, oidc_session_t *z,",
          "460:   const char *claims) {",
          "462: }",
          "464: const char * oidc_session_get_userinfo_claims(request_rec *r, oidc_session_t *z) {",
          "",
          "[Removed Lines]",
          "461:  oidc_session_set_filtered_claims(r, z, OIDC_SESSION_KEY_USERINFO_CLAIMS, claims);",
          "",
          "[Added Lines]",
          "494:  oidc_session_set_filtered_claims(r, z, OIDC_SESSION_KEY_USERINFO_CLAIMS,",
          "495:    claims);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "475: void oidc_session_set_idtoken_claims(request_rec *r, oidc_session_t *z,",
          "476:   const char *idtoken_claims) {",
          "478: }",
          "480: const char * oidc_session_get_idtoken_claims(request_rec *r, oidc_session_t *z) {",
          "",
          "[Removed Lines]",
          "477:  oidc_session_set_filtered_claims(r, z, OIDC_SESSION_KEY_IDTOKEN_CLAIMS, idtoken_claims);",
          "",
          "[Added Lines]",
          "511:  oidc_session_set_filtered_claims(r, z, OIDC_SESSION_KEY_IDTOKEN_CLAIMS,",
          "512:    idtoken_claims);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "585:  oidc_session_set_timestamp(r, z, OIDC_SESSION_KEY_ACCESS_TOKEN_LAST_REFRESH,",
          "586:    apr_time_now());",
          "587: }",
          "",
          "[Removed Lines]",
          "584: void oidc_session_reset_access_token_last_refresh(request_rec *r, oidc_session_t *z) {",
          "",
          "[Added Lines]",
          "619: void oidc_session_reset_access_token_last_refresh(request_rec *r,",
          "620:   oidc_session_t *z) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d77ec0228901d25bcbc873950d964d5c1e00254a",
      "candidate_info": {
        "commit_hash": "d77ec0228901d25bcbc873950d964d5c1e00254a",
        "repo": "pingidentity/mod_auth_openidc",
        "commit_url": "https://github.com/pingidentity/mod_auth_openidc/commit/d77ec0228901d25bcbc873950d964d5c1e00254a",
        "files": [
          "ChangeLog",
          "README.md",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/metadata.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h",
          "src/proto.c",
          "src/util.c"
        ],
        "message": "support HTTP POST binding for authentication request\n\nsupport sending the authentication request via HTTP POST through\nHTML/Javascript autosubmit; bump to 2.3.1rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/metadata.c||src/metadata.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/proto.c||src/proto.c",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: # NB: this can be overrridden on a per-OP basis in the .conf file using the key: userinfo_token_method",
          "141: #OIDCUserInfoTokenMethod [authz_header|post_param]",
          "143: ########################################################################################",
          "144: #",
          "145: # OpenID Connect Client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: # Defines the HTTP method used to pass the parameters in the Authentication Request to the Authorization Endpoint.",
          "144: # \"GET\" means that the parameters will be passed as query parameters in an HTTP GET",
          "145: # \"POST\" means that the parameters will be passed as form-post parameters in an HTTP POST",
          "146: # When not defined the default is \"GET\".",
          "147: # NB: this can be overrridden on a per-OP basis in the .conf file using the key: auth_request_method",
          "148: # OIDCProviderAuthRequestMethod [ GET | POST ]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: #define OIDC_DEFAULT_PROVIDER_METADATA_REFRESH_INTERVAL 0",
          "159: #define OIDC_DEFAULT_PROVIDER_TOKEN_BINDING_POLICY OIDC_TOKEN_BINDING_POLICY_OPTIONAL",
          "161: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #define OIDC_DEFAULT_AUTH_REQUEST_METHOD OIDC_AUTH_REQUEST_METHOD_GET",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "849:  return cfg->claim_prefix;",
          "850: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857: const char *oidc_set_auth_request_method(cmd_parms *cmd, void *struct_ptr,",
          "858:   const char *arg) {",
          "859:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "860:    cmd->server->module_config, &auth_openidc_module);",
          "861:  const char *rv = oidc_parse_auth_request_method(cmd->pool, arg,",
          "862:    &cfg->provider.auth_request_method);",
          "863:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "864: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "901:  c->provider.userinfo_encrypted_response_alg = NULL;",
          "902:  c->provider.userinfo_encrypted_response_enc = NULL;",
          "903:  c->provider.userinfo_token_method = OIDC_USER_INFO_TOKEN_METHOD_HEADER;",
          "905:  c->oauth.ssl_validate_server = OIDC_DEFAULT_SSL_VALIDATE_SERVER;",
          "906:  c->oauth.client_id = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "918:  c->provider.auth_request_method = OIDC_DEFAULT_AUTH_REQUEST_METHOD;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1155:    != OIDC_USER_INFO_TOKEN_METHOD_HEADER ?",
          "1156:      add->provider.userinfo_token_method :",
          "1157:      base->provider.userinfo_token_method;",
          "1159:  c->oauth.ssl_validate_server =",
          "1160:    add->oauth.ssl_validate_server != OIDC_DEFAULT_SSL_VALIDATE_SERVER ?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1173:  c->provider.auth_request_method =",
          "1174:    add->provider.auth_request_method",
          "1175:    != OIDC_DEFAULT_AUTH_REQUEST_METHOD ?",
          "1176:      add->provider.auth_request_method :",
          "1177:      base->provider.auth_request_method;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2534:     (void*)APR_OFFSETOF(oidc_cfg, provider_metadata_refresh_interval),",
          "2535:     RSRC_CONF,",
          "2536:     \"Provider metadata refresh interval in seconds.\"),",
          "2537:   AP_INIT_ITERATE(\"OIDCInfoHook\",",
          "2538:     oidc_set_info_hook_data,",
          "2539:     (void *)APR_OFFSETOF(oidc_cfg, info_hook_data),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2557:   AP_INIT_TAKE1(\"OIDCProviderAuthRequestMethod\",",
          "2558:     oidc_set_auth_request_method,",
          "2559:     (void*)APR_OFFSETOF(oidc_cfg, provider.auth_request_method),",
          "2560:     RSRC_CONF,",
          "2561:     \"HTTP method used to send the authentication request to the provider (GET or POST).\"),",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:  else",
          "1183:   provider->token_binding_policy = cfg->provider.token_binding_policy;",
          "1185:  return TRUE;",
          "1186: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1186:  oidc_metadata_get_valid_string(r, j_conf, \"auth_request_method\",",
          "1187:    oidc_valid_auth_request_method, &method,",
          "1188:    NULL);",
          "1189:  if (method != NULL)",
          "1190:   oidc_parse_auth_request_method(r->pool, method,",
          "1191:     &provider->auth_request_method);",
          "1192:  else",
          "1193:   provider->auth_request_method = cfg->provider.auth_request_method;",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145: #define OIDC_INTROSPECTION_METHOD_GET  \"GET\"",
          "146: #define OIDC_INTROSPECTION_METHOD_POST \"POST\"",
          "149: #define OIDCStateCookiePrefix  \"mod_auth_openidc_state_\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: #define OIDC_AUTH_REQUEST_METHOD_GET  0",
          "150: #define OIDC_AUTH_REQUEST_METHOD_POST 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:  char *userinfo_encrypted_response_enc;",
          "271:  int userinfo_token_method;",
          "272:  char *request_object;",
          "273:  int token_binding_policy;",
          "274: } oidc_provider_t ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:  int auth_request_method;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "692: apr_byte_t oidc_util_create_symmetric_key(request_rec *r, const char *client_secret, int r_key_len, const char *hash_algo, apr_byte_t set_kid, oidc_jwk_t **jwk);",
          "693: apr_hash_t * oidc_util_merge_symmetric_key(apr_pool_t *pool, apr_hash_t *private_keys, oidc_jwk_t *jwk);",
          "694: const char *oidc_util_get_provided_token_binding_id(const request_rec *r);",
          "697: #define OIDC_HTTP_HDR_COOKIE       \"Cookie\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700: char *oidc_util_http_query_encoded_url(request_rec *r, const char *url, const apr_table_t *params);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1119:  return NULL;",
          "1120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122: #define OIDC_AUTH_REQUEST_METHOD_GET_STR  \"GET\"",
          "1123: #define OIDC_AUTH_REQEUST_METHOD_POST_STR \"POST\"",
          "1128: const char *oidc_valid_auth_request_method(apr_pool_t *pool, const char *arg) {",
          "1129:  static char *options[] = {",
          "1130:    OIDC_AUTH_REQUEST_METHOD_GET_STR,",
          "1131:    OIDC_AUTH_REQEUST_METHOD_POST_STR,",
          "1132:    NULL };",
          "1133:  return oidc_valid_string_option(pool, arg, options);",
          "1134: }",
          "1139: const char *oidc_parse_auth_request_method(apr_pool_t *pool, const char *arg,",
          "1140:   int *method) {",
          "1141:  const char *rv = oidc_valid_auth_request_method(pool, arg);",
          "1142:  if (rv != NULL)",
          "1143:   return rv;",
          "1145:  if (apr_strnatcmp(arg, OIDC_AUTH_REQUEST_METHOD_GET_STR) == 0)",
          "1147:  else if (apr_strnatcmp(arg, OIDC_AUTH_REQEUST_METHOD_POST_STR) == 0)",
          "1150:  return NULL;",
          "1151: }",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: const char *oidc_valid_userinfo_refresh_interval(apr_pool_t *pool, int v);",
          "89: const char *oidc_valid_userinfo_token_method(apr_pool_t *pool, const char *arg);",
          "90: const char *oidc_valid_token_binding_policy(apr_pool_t *pool, const char *arg);",
          "92: const char *oidc_parse_int(apr_pool_t *pool, const char *arg, int *int_value);",
          "93: const char *oidc_parse_boolean(apr_pool_t *pool, const char *arg, int *bool_value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: const char *oidc_valid_auth_request_method(apr_pool_t *pool, const char *arg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112: const char *oidc_parse_info_hook_data(apr_pool_t *pool, const char *arg, apr_hash_t **hook_data);",
          "113: const char *oidc_parse_token_binding_policy(apr_pool_t *pool, const char *arg, int *int_value);",
          "114: const char *oidc_token_binding_policy2str(apr_pool_t *pool, int v);",
          "116: typedef const char *(*oidc_valid_int_function_t)(apr_pool_t *, int);",
          "117: typedef const char *(*oidc_valid_function_t)(apr_pool_t *, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: const char *oidc_parse_auth_request_method(apr_pool_t *pool, const char *arg, int *method);",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  return FALSE;",
          "96: }",
          "142: }",
          "144: apr_byte_t oidc_proto_get_encryption_jwk_by_type(request_rec *r, oidc_cfg *cfg,",
          "",
          "[Removed Lines]",
          "98: static void oidc_proto_copy_from_request(request_rec *r,",
          "99:   oidc_jwt_t *request_object, json_t *request_object_config,",
          "100:   const char *authorization_request) {",
          "102:  char *tokenizer_ctx, *p = strstr(authorization_request, \"?\");",
          "103:  char *request = apr_pstrdup(r->pool, ++p);",
          "105:  oidc_debug(r, \"processing request: %s\", request);",
          "107:  p = apr_strtok(request, OIDC_STR_AMP, &tokenizer_ctx);",
          "108:  do {",
          "110:   char *tuple = apr_pstrdup(r->pool, p);",
          "111:   oidc_debug(r, \"processing tuple: %s\", tuple);",
          "112:   char *q = strstr(tuple, OIDC_STR_EQUAL);",
          "114:   if (q) {",
          "116:    q++;",
          "117:    char *name = apr_pstrdup(r->pool,",
          "118:      oidc_util_unescape_string(r, tuple));",
          "119:    char *value = apr_pstrdup(r->pool, oidc_util_unescape_string(r, q));",
          "121:    oidc_debug(r, \"processing name: %s, value: %s\", name, value);",
          "123:    if (oidc_proto_copy_param_from_request(request_object_config,",
          "124:      name)) {",
          "125:     json_t *result = NULL;",
          "126:     json_error_t json_error;",
          "127:     result = json_loads(value, JSON_DECODE_ANY, &json_error);",
          "128:     if (result == NULL)",
          "130:      result = json_string(value);",
          "131:     if (result) {",
          "132:      json_object_set_new(request_object->payload.value.json,",
          "133:        name, json_deep_copy(result));",
          "134:      json_decref(result);",
          "135:     }",
          "136:    }",
          "137:   }",
          "139:   p = apr_strtok(NULL, OIDC_STR_AMP, &tokenizer_ctx);",
          "141:  } while (p);",
          "",
          "[Added Lines]",
          "99: typedef struct oidc_proto_copy_req_ctx_t {",
          "100:  request_rec *r;",
          "101:  json_t *request_object_config;",
          "102:  oidc_jwt_t *request_object;",
          "103: } oidc_proto_copy_req_ctx_t;",
          "108: static int oidc_proto_copy_from_request(void* rec, const char* name,",
          "109:   const char* value) {",
          "110:  oidc_proto_copy_req_ctx_t *ctx = (oidc_proto_copy_req_ctx_t *) rec;",
          "112:  oidc_debug(ctx->r, \"processing name: %s, value: %s\", name, value);",
          "114:  if (oidc_proto_copy_param_from_request(ctx->request_object_config, name)) {",
          "115:   json_t *result = NULL;",
          "116:   json_error_t json_error;",
          "117:   result = json_loads(value, JSON_DECODE_ANY, &json_error);",
          "118:   if (result == NULL)",
          "120:    result = json_string(value);",
          "121:   if (result) {",
          "122:    json_object_set_new(ctx->request_object->payload.value.json, name,",
          "123:      json_deep_copy(result));",
          "124:    json_decref(result);",
          "125:   }",
          "126:  }",
          "128:  return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: char *oidc_proto_create_request_object(request_rec *r,",
          "209:   struct oidc_provider_t *provider, json_t * request_object_config,",
          "212:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "210:   const char *authorization_request) {",
          "",
          "[Added Lines]",
          "197:   apr_table_t *params) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:    request_object->payload.value.json);",
          "235:  oidc_debug(r, \"request object: %s\",",
          "",
          "[Removed Lines]",
          "231:  oidc_proto_copy_from_request(r, request_object, request_object_config,",
          "232:    authorization_request);",
          "",
          "[Added Lines]",
          "218:  oidc_proto_copy_req_ctx_t data =",
          "219:  { r, request_object_config, request_object };",
          "220:  apr_table_do(oidc_proto_copy_from_request, &data, params, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:    break;",
          "322:   case CJOSE_JWK_KTY_OCT:",
          "323:    oidc_util_create_symmetric_key(r, provider->client_secret,",
          "325:    break;",
          "326:   default:",
          "327:    oidc_error(r,",
          "",
          "[Removed Lines]",
          "324:      oidc_alg2keysize(jwe->header.alg), OIDC_JOSE_ALG_SHA256, FALSE, &jwk);",
          "",
          "[Added Lines]",
          "312:      oidc_alg2keysize(jwe->header.alg), OIDC_JOSE_ALG_SHA256,",
          "313:      FALSE, &jwk);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "377: char *oidc_proto_create_request_uri(request_rec *r,",
          "381:  oidc_debug(r, \"enter\");",
          "385:  char *resolver_url = NULL;",
          "386:  if (json_object_get(request_object_config, \"url\") != NULL)",
          "",
          "[Removed Lines]",
          "378:   struct oidc_provider_t *provider, json_t * request_object_config, const char *redirect_uri,",
          "379:   const char *authorization_request) {",
          "",
          "[Added Lines]",
          "367:   struct oidc_provider_t *provider, json_t * request_object_config,",
          "368:   const char *redirect_uri, apr_table_t *params) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "390:  else",
          "391:   resolver_url = apr_pstrdup(r->pool, redirect_uri);",
          "397:  char *request_uri = NULL;",
          "",
          "[Removed Lines]",
          "394:  char *serialized_request_object = oidc_proto_create_request_object(r, provider, request_object_config, authorization_request);",
          "",
          "[Added Lines]",
          "381:  char *serialized_request_object = oidc_proto_create_request_object(r,",
          "382:    provider, request_object_config, params);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "416:   struct oidc_provider_t *provider, const char *redirect_uri,",
          "420:  json_t *request_object_config = NULL;",
          "",
          "[Removed Lines]",
          "415: char *oidc_proto_create_request_param(request_rec *r,",
          "417:   const char *authorization_request) {",
          "",
          "[Added Lines]",
          "403: char *oidc_proto_add_request_param(request_rec *r,",
          "405:   apr_table_t *params) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "426:  char* parameter = OIDC_PROTO_REQUEST_URI;",
          "430:  if (request_object_type != NULL) {",
          "432:   if (request_object_type_str == NULL) {",
          "434:    return FALSE;",
          "435:   }",
          "438:   if (strcmp(request_object_type_str, OIDC_PROTO_REQUEST_OBJECT) == 0) {",
          "439:    parameter = OIDC_PROTO_REQUEST_OBJECT;",
          "442:    return FALSE;",
          "443:   }",
          "444:  }",
          "",
          "[Removed Lines]",
          "429:  json_t *request_object_type = json_object_get(request_object_config, \"request_object_type\");",
          "431:   const char* request_object_type_str = json_string_value(request_object_type);",
          "433:    oidc_error(r, \"Value of request_object_type in request_object config is not a string\");",
          "440:   } else if (strcmp(request_object_type_str, OIDC_PROTO_REQUEST_URI) != 0) {",
          "441:    oidc_error(r, \"Bad request_object_type in config: %s\", request_object_type_str);",
          "",
          "[Added Lines]",
          "417:  json_t *request_object_type = json_object_get(request_object_config,",
          "418:    \"request_object_type\");",
          "420:   const char* request_object_type_str = json_string_value(",
          "421:     request_object_type);",
          "423:    oidc_error(r,",
          "424:      \"Value of request_object_type in request_object config is not a string\");",
          "431:   } else if (strcmp(request_object_type_str, OIDC_PROTO_REQUEST_URI)",
          "432:     != 0) {",
          "433:    oidc_error(r, \"Bad request_object_type in config: %s\",",
          "434:      request_object_type_str);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "447:  char * value = NULL;",
          "448:  if (strcmp(parameter, OIDC_PROTO_REQUEST_URI) == 0) {",
          "451:  } else {",
          "454:  }",
          "457:  char* request_param = NULL;",
          "458:  if (value != NULL) {",
          "460:  }",
          "462:  return request_param;",
          "463: }",
          "",
          "[Removed Lines]",
          "450:   value = oidc_proto_create_request_uri(r, provider, request_object_config, redirect_uri, authorization_request);",
          "453:   value = oidc_proto_create_request_object(r, provider, request_object_config, authorization_request);",
          "459:   request_param = apr_psprintf(r->pool, \"%s=%s\", parameter, oidc_util_escape_string(r, value));",
          "",
          "[Added Lines]",
          "443:   value = oidc_proto_create_request_uri(r, provider,",
          "444:     request_object_config, redirect_uri, params);",
          "447:   value = oidc_proto_create_request_object(r, provider,",
          "448:     request_object_config, params);",
          "454:   request_param = apr_psprintf(r->pool, \"%s=%s\", parameter,",
          "455:     oidc_util_escape_string(r, value));",
          "462: typedef struct oidc_proto_form_post_ctx_t {",
          "463:  request_rec *r;",
          "464:  const char *html_body;",
          "465: } oidc_proto_form_post_ctx_t;",
          "470: static int oidc_proto_add_form_post_param(void* rec, const char* key,",
          "471:   const char* value) {",
          "472:  oidc_proto_form_post_ctx_t *ctx = (oidc_proto_form_post_ctx_t *) rec;",
          "473:  oidc_debug(ctx->r, \"processing: %s=%s\", key, value);",
          "474:  ctx->html_body = apr_psprintf(ctx->r->pool,",
          "475:    \"%s      <input type=\\\"hidden\\\" name=\\\"%s\\\" value=\\\"%s\\\">\\n\",",
          "476:    ctx->html_body, oidc_util_html_escape(ctx->r->pool, key),",
          "477:    oidc_util_html_escape(ctx->r->pool, value));",
          "478:  return 1;",
          "479: }",
          "484: static int oidc_proto_html_post(request_rec *r, const char *url,",
          "485:   apr_table_t *params) {",
          "487:  oidc_debug(r, \"enter\");",
          "489:  const char *html_body = apr_psprintf(r->pool,",
          "490:    \"    <p>Submitting Authentication Request...</p>\\n\"",
          "491:    \"    <form method=\\\"post\\\" action=\\\"%s\\\">\\n\"",
          "492:    \"      <p>\\n\", url);",
          "494:  oidc_proto_form_post_ctx_t data = { r, html_body };",
          "495:  apr_table_do(oidc_proto_add_form_post_param, &data, params, NULL);",
          "497:  html_body = apr_psprintf(r->pool, \"%s%s\", data.html_body,",
          "498:    \"      </p>\\n\"",
          "499:    \"    </form>\\n\");",
          "501:  return oidc_util_html_send(r, \"Submitting...\", NULL,",
          "502:    \"document.forms[0].submit()\", html_body, DONE);",
          "503: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "479:    oidc_proto_state_to_string(r, proto_state), code_challenge,",
          "480:    auth_request_params, path_scope);",
          "494:  const char *scope = provider->scope;",
          "495:  if (path_scope != NULL)",
          "496:   scope = ((scope != NULL) && (apr_strnatcmp(scope, \"\") != 0)) ?",
          "499:  if (scope != NULL) {",
          "500:   if (!oidc_util_spaced_string_contains(r->pool, scope,",
          "",
          "[Removed Lines]",
          "483:  char *authorization_request = apr_psprintf(r->pool, \"%s%s\",",
          "484:    provider->authorization_endpoint_url,",
          "485:    strchr(provider->authorization_endpoint_url, OIDC_CHAR_QUERY) != NULL ?",
          "486:      OIDC_STR_AMP : \"?\");",
          "487:  authorization_request = apr_psprintf(r->pool, \"%s%s=%s\",",
          "488:    authorization_request,",
          "489:    OIDC_PROTO_RESPONSE_TYPE,",
          "490:    oidc_util_escape_string(r,",
          "491:      oidc_proto_state_get_response_type(proto_state)));",
          "497:     apr_pstrcat(r->pool, scope, OIDC_STR_SPACE, path_scope, NULL) : path_scope;",
          "",
          "[Added Lines]",
          "522:  int rv = DONE;",
          "523:  char *authorization_request = NULL;",
          "526:  apr_table_t *params = apr_table_make(r->pool, 4);",
          "529:  apr_table_addn(params, OIDC_PROTO_RESPONSE_TYPE,",
          "530:    oidc_proto_state_get_response_type(proto_state));",
          "536:     apr_pstrcat(r->pool, scope, OIDC_STR_SPACE, path_scope, NULL) :",
          "537:     path_scope;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "503:      \"the configuration for the \\\"%s\\\" parameter does not include the \\\"%s\\\" scope, your provider may not return an \\\"id_token\\\": %s\",",
          "504:      OIDC_PROTO_SCOPE, OIDC_PROTO_SCOPE_OPENID, provider->scope);",
          "505:   }",
          "510:  }",
          "524:  const char *nonce = oidc_proto_state_get_nonce(proto_state);",
          "525:  if (nonce != NULL)",
          "539:  const char *response_mode = oidc_proto_state_get_response_mode(proto_state);",
          "540:  if (response_mode != NULL)",
          "547:  if (login_hint != NULL)",
          "553:  if (id_token_hint != NULL)",
          "560:  const char *prompt = oidc_proto_state_get_prompt(proto_state);",
          "561:  if (prompt != NULL)",
          "597:  if ((provider->token_binding_policy > OIDC_TOKEN_BINDING_POLICY_DISABLED)",
          "",
          "[Removed Lines]",
          "507:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "508:     authorization_request,",
          "509:     OIDC_PROTO_SCOPE, oidc_util_escape_string(r, scope));",
          "512:  authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "513:    authorization_request,",
          "514:    OIDC_PROTO_CLIENT_ID,",
          "515:    oidc_util_escape_string(r, provider->client_id));",
          "516:  authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "517:    authorization_request, OIDC_PROTO_STATE,",
          "518:    oidc_util_escape_string(r, state));",
          "519:  authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "520:    authorization_request, OIDC_PROTO_REDIRECT_URI,",
          "521:    oidc_util_escape_string(r, redirect_uri));",
          "526:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "527:     authorization_request, OIDC_PROTO_NONCE,",
          "528:     oidc_util_escape_string(r, nonce));",
          "531:  if (code_challenge != NULL)",
          "532:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s&%s=%s\",",
          "533:     authorization_request,",
          "534:     OIDC_PROTO_CODE_CHALLENGE,",
          "535:     oidc_util_escape_string(r, code_challenge),",
          "536:     OIDC_PROTO_CODE_CHALLENGE_METHOD, provider->pkce->method);",
          "541:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "542:     authorization_request,",
          "543:     OIDC_PROTO_RESPONSE_MODE,",
          "544:     oidc_util_escape_string(r, response_mode));",
          "548:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "549:     authorization_request, OIDC_PROTO_LOGIN_HINT,",
          "550:     oidc_util_escape_string(r, login_hint));",
          "554:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "555:     authorization_request,",
          "556:     OIDC_PROTO_ID_TOKEN_HINT,",
          "557:     oidc_util_escape_string(r, id_token_hint));",
          "562:   authorization_request = apr_psprintf(r->pool, \"%s&%s=%s\",",
          "563:     authorization_request,",
          "564:     OIDC_PROTO_PROMPT, oidc_util_escape_string(r, prompt));",
          "567:  if (provider->auth_request_params != NULL) {",
          "568:   authorization_request = apr_psprintf(r->pool, \"%s&%s\",",
          "569:     authorization_request, provider->auth_request_params);",
          "570:  }",
          "573:  if (auth_request_params != NULL) {",
          "574:   authorization_request = apr_psprintf(r->pool, \"%s&%s\",",
          "575:     authorization_request, auth_request_params);",
          "576:  }",
          "578:  if (provider->request_object != NULL) {",
          "580:   char *request_param = oidc_proto_create_request_param(r, provider,",
          "581:     redirect_uri, authorization_request);",
          "582:   if (request_param != NULL)",
          "583:    authorization_request = apr_psprintf(r->pool, \"%s&%s\",",
          "584:      authorization_request,",
          "585:      request_param);",
          "586:  }",
          "589:  oidc_proto_state_destroy(proto_state);",
          "592:  if (oidc_post_preserve_javascript(r, authorization_request, NULL,",
          "593:    NULL) == TRUE)",
          "594:   return DONE;",
          "",
          "[Added Lines]",
          "546:   apr_table_addn(params, OIDC_PROTO_SCOPE, scope);",
          "550:  apr_table_addn(params, OIDC_PROTO_CLIENT_ID, provider->client_id);",
          "553:  apr_table_addn(params, OIDC_PROTO_STATE, state);",
          "556:  apr_table_addn(params, OIDC_PROTO_REDIRECT_URI, redirect_uri);",
          "561:   apr_table_addn(params, OIDC_PROTO_NONCE, nonce);",
          "564:  if (code_challenge != NULL) {",
          "565:   apr_table_addn(params, OIDC_PROTO_CODE_CHALLENGE, code_challenge);",
          "566:   apr_table_addn(params, OIDC_PROTO_CODE_CHALLENGE_METHOD,",
          "567:     provider->pkce->method);",
          "568:  }",
          "573:   apr_table_addn(params, OIDC_PROTO_RESPONSE_MODE, response_mode);",
          "577:   apr_table_addn(params, OIDC_PROTO_LOGIN_HINT, login_hint);",
          "581:   apr_table_addn(params, OIDC_PROTO_ID_TOKEN_HINT, id_token_hint);",
          "586:   apr_table_addn(params, OIDC_PROTO_PROMPT, prompt);",
          "589:  if (provider->auth_request_params != NULL)",
          "590:   oidc_util_table_add_query_encoded_params(r->pool, params,",
          "591:     provider->auth_request_params);",
          "594:  if (auth_request_params != NULL)",
          "595:   oidc_util_table_add_query_encoded_params(r->pool, params,",
          "596:     auth_request_params);",
          "599:  if (provider->request_object != NULL)",
          "600:   oidc_proto_add_request_param(r, provider, redirect_uri, params);",
          "603:  if (provider->auth_request_method == OIDC_AUTH_REQUEST_METHOD_POST) {",
          "606:   rv = oidc_proto_html_post(r, provider->authorization_endpoint_url,",
          "607:     params);",
          "609:  } else {",
          "612:   authorization_request = oidc_util_http_query_encoded_url(r,",
          "613:     provider->authorization_endpoint_url, params);",
          "617:   if (oidc_post_preserve_javascript(r, authorization_request, NULL,",
          "618:     NULL) == FALSE) {",
          "621:    oidc_util_hdr_out_location_set(r, authorization_request);",
          "624:    rv = HTTP_MOVED_TEMPORARILY;",
          "625:   }",
          "626:  }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "599:   oidc_util_hdr_err_out_add(r,",
          "600:     OIDC_HTTP_HDR_INCLUDE_REFERRED_TOKEN_BINDING_ID, \"true\");",
          "607: }",
          "",
          "[Removed Lines]",
          "603:  oidc_util_hdr_out_location_set(r, authorization_request);",
          "606:  return HTTP_MOVED_TEMPORARILY;",
          "",
          "[Added Lines]",
          "635:  oidc_proto_state_destroy(proto_state);",
          "638:  oidc_debug(r, \"return: %d\", rv);",
          "640:  return rv;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535: typedef struct oidc_http_encode_t {",
          "536:  request_rec *r;",
          "538: } oidc_http_encode_t;",
          "544:   const char* value) {",
          "545:  oidc_http_encode_t *ctx = (oidc_http_encode_t*) rec;",
          "546:  const char *sep =",
          "547:    apr_strnatcmp(ctx->encoded_params, \"\") == 0 ? \"\" : OIDC_STR_AMP;",
          "548:  ctx->encoded_params = apr_psprintf(ctx->r->pool, \"%s%s%s=%s\",",
          "",
          "[Removed Lines]",
          "537:  const char *encoded_params;",
          "543: static int oidc_http_add_form_url_encoded_param(void* rec, const char* key,",
          "",
          "[Added Lines]",
          "537:  char *encoded_params;",
          "543: static int oidc_util_http_add_form_url_encoded_param(void* rec, const char* key,",
          "546:  oidc_debug(ctx->r, \"processing: %s=%s\", key, value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:  return 1;",
          "552: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558: char *oidc_util_http_query_encoded_url(request_rec *r, const char *url,",
          "559:   const apr_table_t *params) {",
          "560:  char *result = NULL;",
          "561:  if ((params != NULL) && (apr_table_elts(params)->nelts > 0)) {",
          "562:   oidc_http_encode_t data = { r, \"\" };",
          "563:   apr_table_do(oidc_util_http_add_form_url_encoded_param, &data, params,",
          "564:     NULL);",
          "565:   const char *sep =",
          "566:     strchr(url, OIDC_CHAR_QUERY) != NULL ?",
          "567:       OIDC_STR_AMP :",
          "568:       OIDC_STR_QUERY;",
          "569:   result = apr_psprintf(r->pool, \"%s%s%s\", url, sep, data.encoded_params);",
          "570:  } else {",
          "571:   result = apr_pstrdup(r->pool, url);",
          "572:  }",
          "573:  oidc_debug(r, \"url=%s\", result);",
          "574:  return result;",
          "575: }",
          "580: static char *oidc_util_http_form_encoded_data(request_rec *r,",
          "581:   const apr_table_t *params) {",
          "582:  char *data = NULL;",
          "583:  if ((params != NULL) && (apr_table_elts(params)->nelts > 0)) {",
          "584:   oidc_http_encode_t encode_data = { r, \"\" };",
          "585:   apr_table_do(oidc_util_http_add_form_url_encoded_param, &encode_data,",
          "586:     params,",
          "587:     NULL);",
          "588:   data = encode_data.encoded_params;",
          "589:  }",
          "590:  oidc_debug(r, \"data=%s\", data);",
          "591:  return data;",
          "592: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "734:   int timeout, const char *outgoing_proxy,",
          "735:   apr_array_header_t *pass_cookies, const char *ssl_cert,",
          "736:   const char *ssl_key) {",
          "751: }",
          "",
          "[Removed Lines]",
          "738:  if ((params != NULL) && (apr_table_elts(params)->nelts > 0)) {",
          "739:   oidc_http_encode_t data = { r, \"\" };",
          "740:   apr_table_do(oidc_http_add_form_url_encoded_param, &data, params, NULL);",
          "741:   const char *sep =",
          "742:     strchr(url, OIDC_CHAR_QUERY) != NULL ?",
          "743:       OIDC_STR_AMP : OIDC_STR_QUERY;",
          "744:   url = apr_psprintf(r->pool, \"%s%s%s\", url, sep, data.encoded_params);",
          "745:   oidc_debug(r, \"get URL=\\\"%s\\\"\", url);",
          "746:  }",
          "748:  return oidc_util_http_call(r, url, NULL, NULL, basic_auth, bearer_token,",
          "749:    ssl_validate_server, response, timeout, outgoing_proxy,",
          "750:    pass_cookies, ssl_cert, ssl_key);",
          "",
          "[Added Lines]",
          "777:  char *query_url = oidc_util_http_query_encoded_url(r, url, params);",
          "778:  return oidc_util_http_call(r, query_url, NULL, NULL, basic_auth,",
          "779:    bearer_token, ssl_validate_server, response, timeout,",
          "780:    outgoing_proxy, pass_cookies, ssl_cert, ssl_key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "759:   int timeout, const char *outgoing_proxy,",
          "760:   apr_array_header_t *pass_cookies, const char *ssl_cert,",
          "761:   const char *ssl_key) {",
          "772:  return oidc_util_http_call(r, url, data,",
          "773:    OIDC_CONTENT_TYPE_FORM_ENCODED, basic_auth, bearer_token,",
          "774:    ssl_validate_server, response, timeout, outgoing_proxy,",
          "",
          "[Removed Lines]",
          "763:  const char *data = NULL;",
          "764:  if ((params != NULL) && (apr_table_elts(params)->nelts > 0)) {",
          "765:   oidc_http_encode_t encode_data = { r, \"\" };",
          "766:   apr_table_do(oidc_http_add_form_url_encoded_param, &encode_data, params,",
          "767:     NULL);",
          "768:   data = encode_data.encoded_params;",
          "769:   oidc_debug(r, \"post data=\\\"%s\\\"\", data);",
          "770:  }",
          "",
          "[Added Lines]",
          "792:  char *data = oidc_util_http_form_encoded_data(r, params);",
          "",
          "---------------"
        ]
      }
    }
  ]
}