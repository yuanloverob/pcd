{
  "cve_id": "CVE-2017-18187",
  "cve_desc": "In ARM mbed TLS before 2.7.0, there is a bounds-check bypass through an integer overflow in PSK identity parsing in the ssl_parse_client_psk_identity() function in library/ssl_srv.c.",
  "repo": "ARMmbed/mbedtls",
  "patch_hash": "83c9f495ffe70c7dd280b41fdfd4881485a3bc28",
  "patch_info": {
    "commit_hash": "83c9f495ffe70c7dd280b41fdfd4881485a3bc28",
    "repo": "ARMmbed/mbedtls",
    "commit_url": "https://github.com/ARMmbed/mbedtls/commit/83c9f495ffe70c7dd280b41fdfd4881485a3bc28",
    "files": [
      "library/ssl_srv.c"
    ],
    "message": "Prevent bounds check bypass through overflow in PSK identity parsing\n\nThe check `if( *p + n > end )` in `ssl_parse_client_psk_identity` is\nunsafe because `*p + n` might overflow, thus bypassing the check. As\n`n` is a user-specified value up to 65K, this is relevant if the\nlibrary happens to be located in the last 65K of virtual memory.\n\nThis commit replaces the check by a safe version.",
    "before_after_code_files": [
      "library/ssl_srv.c||library/ssl_srv.c"
    ]
  },
  "patch_diff": {
    "library/ssl_srv.c||library/ssl_srv.c": [
      "File: library/ssl_srv.c -> library/ssl_srv.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3440:     {",
      "3441:         MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
      "3442:         return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
      "",
      "[Removed Lines]",
      "3439:     if( *p + 2 > end )",
      "",
      "[Added Lines]",
      "3439:     if( end - *p < 2 )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3445:     n = ( (*p)[0] << 8 ) | (*p)[1];",
      "3449:     {",
      "3450:         MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
      "3451:         return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
      "",
      "[Removed Lines]",
      "3448:     if( n < 1 || n > 65535 || *p + n > end )",
      "",
      "[Added Lines]",
      "3448:     if( n < 1 || n > 65535 || n > (size_t) ( end - *p ) )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2ee6b432e5a05ac12399515fbce710ba03e5c3d",
      "candidate_info": {
        "commit_hash": "b2ee6b432e5a05ac12399515fbce710ba03e5c3d",
        "repo": "ARMmbed/mbedtls",
        "commit_url": "https://github.com/ARMmbed/mbedtls/commit/b2ee6b432e5a05ac12399515fbce710ba03e5c3d",
        "files": [
          "library/ssl_srv.c"
        ],
        "message": "Prevent bounds check bypass through overflow in PSK identity parsing\n\nThe check `if( *p + n > end )` in `ssl_parse_client_psk_identity` is\nunsafe because `*p + n` might overflow, thus bypassing the check. As\n`n` is a user-specified value up to 65K, this is relevant if the\nlibrary happens to be located in the last 65K of virtual memory.\n\nThis commit replaces the check by a safe version.",
        "before_after_code_files": [
          "library/ssl_srv.c||library/ssl_srv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "library/ssl_srv.c||library/ssl_srv.c"
          ],
          "candidate": [
            "library/ssl_srv.c||library/ssl_srv.c"
          ]
        }
      },
      "candidate_diff": {
        "library/ssl_srv.c||library/ssl_srv.c": [
          "File: library/ssl_srv.c -> library/ssl_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3149:     {",
          "3150:         SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
          "3151:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
          "",
          "[Removed Lines]",
          "3148:     if( *p + 2 > end )",
          "",
          "[Added Lines]",
          "3148:     if( end - *p < 2 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3154:     n = ( (*p)[0] << 8 ) | (*p)[1];",
          "3158:     {",
          "3159:         SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
          "3160:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
          "",
          "[Removed Lines]",
          "3157:     if( n < 1 || n > 65535 || *p + n > end )",
          "",
          "[Added Lines]",
          "3157:     if( n < 1 || n > 65535 || n > (size_t) ( end - *p ) )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c26741f8ca4d4d2aa43cad6504ec6935b8774b39",
      "candidate_info": {
        "commit_hash": "c26741f8ca4d4d2aa43cad6504ec6935b8774b39",
        "repo": "ARMmbed/mbedtls",
        "commit_url": "https://github.com/ARMmbed/mbedtls/commit/c26741f8ca4d4d2aa43cad6504ec6935b8774b39",
        "files": [
          "library/ssl_srv.c"
        ],
        "message": "Prevent bounds check bypass through overflow in PSK identity parsing\n\nThe check `if( *p + n > end )` in `ssl_parse_client_psk_identity` is\nunsafe because `*p + n` might overflow, thus bypassing the check. As\n`n` is a user-specified value up to 65K, this is relevant if the\nlibrary happens to be located in the last 65K of virtual memory.\n\nThis commit replaces the check by a safe version.",
        "before_after_code_files": [
          "library/ssl_srv.c||library/ssl_srv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "library/ssl_srv.c||library/ssl_srv.c"
          ],
          "candidate": [
            "library/ssl_srv.c||library/ssl_srv.c"
          ]
        }
      },
      "candidate_diff": {
        "library/ssl_srv.c||library/ssl_srv.c": [
          "File: library/ssl_srv.c -> library/ssl_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3256:     {",
          "3257:         MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
          "3258:         return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
          "",
          "[Removed Lines]",
          "3255:     if( *p + 2 > end )",
          "",
          "[Added Lines]",
          "3255:     if( end - *p < 2 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3261:     n = ( (*p)[0] << 8 ) | (*p)[1];",
          "3265:     {",
          "3266:         MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
          "3267:         return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
          "",
          "[Removed Lines]",
          "3264:     if( n < 1 || n > 65535 || *p + n > end )",
          "",
          "[Added Lines]",
          "3264:     if( n < 1 || n > 65535 || n > (size_t) ( end - *p ) )",
          "",
          "---------------"
        ]
      }
    }
  ]
}